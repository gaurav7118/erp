/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.krawler.spring.exportFuctionality;

import com.krawler.accounting.fontsetting.FontContext;
import com.krawler.accounting.fontsetting.FontFamily;
import com.krawler.accounting.fontsetting.FontFamilySelector;
import com.krawler.common.admin.*;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.FieldConstants;
import com.krawler.common.util.StringUtil;
import com.krawler.common.util.URLUtil;
import com.krawler.hql.accounting.*;
import com.krawler.spring.accounting.invoice.accInvoiceDAO;
import com.krawler.spring.accounting.creditnote.accCreditNoteDAO;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import com.krawler.spring.accounting.debitnote.accDebitNoteDAO;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptDAO;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.accounting.purchaseorder.accPurchaseOrderDAO;
import com.krawler.spring.accounting.salesorder.accSalesOrderDAO;
import com.krawler.spring.accounting.tax.accTaxDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.authHandler.authHandlerDAO;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.common.kwlCommonTablesDAO;
import com.krawler.spring.exportFunctionality.exportDAOImpl;
import com.krawler.spring.exportFunctionality.exportMPXDAOImpl;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Element;
import com.lowagie.text.ExceptionConverter;
import com.lowagie.text.Font;
import com.lowagie.text.FontFactory;
import com.lowagie.text.Image;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.Phrase;
import com.lowagie.text.Rectangle;
import com.lowagie.text.pdf.BaseFont;
import com.lowagie.text.pdf.PdfContentByte;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import java.awt.Color;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import javax.servlet.http.HttpServletResponse;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import com.lowagie.text.pdf.PdfCell;
import com.lowagie.text.pdf.PdfPageEventHelper;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.TimeZone;
import java.util.logging.Level;
import java.util.logging.Logger;
import static com.krawler.esp.web.resource.Links.loginpageFull;
import com.krawler.inventory.model.ist.InterStoreTransferCustomData;
import com.krawler.inventory.model.ist.InterStoreTransferRequest;
import com.krawler.inventory.model.stockout.StockAdjustment;
import com.krawler.inventory.model.stockrequest.StockRequest;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.customDesign.*;
import com.krawler.spring.accounting.goodsreceipt.AccGoodsReceiptServiceDAO;
import com.krawler.spring.accounting.handler.AccountingHandlerDAO;
import com.krawler.spring.accounting.handler.CommonEnglishNumberToWords;
import com.krawler.spring.accounting.invoice.AccInvoiceServiceDAO;
import com.krawler.spring.accounting.invoice.InvoiceConstants;
import com.krawler.spring.exportFuctionality.ExportRecord.EnglishNumberToWords;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.lowagie.text.html.simpleparser.HTMLWorker;
import com.lowagie.text.html.simpleparser.StyleSheet;
import com.lowagie.text.pdf.ColumnText;
import com.lowagie.text.pdf.PdfTable;
import java.io.*;
import java.net.URLDecoder;
import java.util.*;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javassist.tools.rmi.ObjectNotFoundException;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import org.apache.velocity.app.VelocityEngine;
import org.apache.velocity.exception.MethodInvocationException;
import org.apache.velocity.exception.ParseErrorException;
import org.eclipse.jdt.core.dom.CatchClause;
import org.joda.time.Period;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.select.Elements;
import org.springframework.context.MessageSource;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.support.RequestContextUtils;
import com.krawler.spring.common.AccCommonTablesDAO;
import com.krawler.spring.mrp.WorkOrder.WorkOrder;
import org.mvel2.MVEL;
import com.udojava.evalex.Expression;
import java.text.ParseException;

public class ExportRecordHandler {
    private static final long serialVersionUID = -763555229410947890L;
    /*private static Font fontSmallRegular = FontFactory.getFont("Helvetica", 10, Font.NORMAL, Color.BLACK);
    private static Font fontSmallRegularsmall = FontFactory.getFont("Helvetica", 9, Font.NORMAL, Color.BLACK);
    private static Font fontSmallRegularsmall8 = FontFactory.getFont("Helvetica", 8, Font.NORMAL, Color.BLACK);
    private static Font fontSmallBold = FontFactory.getFont("Helvetica", 10, Font.BOLD, Color.BLACK);
    private static Font fontMediumRegular = FontFactory.getFont("Helvetica", 11, Font.NORMAL, Color.BLACK);
    private static Font fontMediumBold = FontFactory.getFont("Helvetica", 12, Font.BOLD, Color.BLACK);
    private static Font fontTblMediumBold = FontFactory.getFont("Helvetica", 10, Font.NORMAL, Color.GRAY);
    private static Font fontTbl = FontFactory.getFont("Helvetica", 20, Font.NORMAL, Color.GRAY);
    private static Font fontMediumBold1 = FontFactory.getFont("Helvetica", 11, Font.BOLD, Color.BLACK);
    private static Font fontSmallRegular1 = FontFactory.getFont("Helvetica", 10, Font.NORMAL, Color.BLACK);
    private static Font fontSmallBold1 = FontFactory.getFont("Helvetica", 10, Font.BOLD, Color.BLACK);*/
    
    private static Font fontSmallRegular = new Font(Font.HELVETICA, 10, Font.NORMAL, Color.BLACK);
    private static Font fontSmallRegularsmall = new Font(Font.HELVETICA, 9, Font.NORMAL, Color.BLACK);
    private static Font fontSmallRegularsmall8 = new Font(Font.HELVETICA, 8, Font.NORMAL, Color.BLACK);
    private static Font fontSmallBold = new Font(Font.HELVETICA, 10, Font.BOLD, Color.BLACK);
    private static Font fontMediumRegular = new Font(Font.HELVETICA, 11, Font.NORMAL, Color.BLACK);
    private static Font fontMediumBold = new Font(Font.HELVETICA, 12, Font.BOLD, Color.BLACK);
    private static Font fontTblMediumBold = new Font(Font.HELVETICA, 10, Font.NORMAL, Color.GRAY);
    private static Font fontTbl = new Font(Font.HELVETICA, 20, Font.NORMAL, Color.GRAY);
    private static Font fontMediumBold1 = new Font(Font.HELVETICA, 11, Font.BOLD, Color.BLACK);
    private static Font fontSmallRegular1 = new Font(Font.HELVETICA, 10, Font.NORMAL, Color.BLACK);
    private static Font fontSmallBold1 = new Font(Font.HELVETICA, 10, Font.BOLD, Color.BLACK);
    private static FontFamilySelector fontFamilySelector = new FontFamilySelector();
    public static final String pageWidth = "850px";
    private static final String MEDIUM_FONT = "medium;";
    private static final TreeMap<Integer, String> FONT_MAP = initializeFontMap();
    private static final String[] FONT_VALUES = FONT_MAP.values().toArray(new String[0]);
    
    private static CommonEnglishNumberToWords EnglishNumberToWordsObj = new CommonEnglishNumberToWords();
    
    private static TreeMap<Integer, String> initializeFontMap() {
        TreeMap<Integer, String> map = new TreeMap<Integer, String>();
        map.put(new Integer(8), "xx-small;");
        map.put(new Integer(11), "small;");
        map.put(new Integer(13), "medium;");
        map.put(new Integer(16), "large;");
        map.put(new Integer(20), "x-large;");
        map.put(new Integer(28), "xx-large;");
        map.put(new Integer(Integer.MAX_VALUE), "300%;");
        return map;
    }
    
    static {
        FontFamily fontFamily = new FontFamily();
        fontFamily.addFont(FontContext.HEADER_NOTE, FontFactory.getFont("Helvetica", 10, Font.BOLD, Color.GRAY));
        fontFamily.addFont(FontContext.FOOTER_NOTE, FontFactory.getFont("Helvetica", 8, Font.BOLD, Color.GRAY));
        fontFamily.addFont(FontContext.LOGO_TEXT, FontFactory.getFont("Helvetica", 14, Font.NORMAL, Color.BLACK));
        fontFamily.addFont(FontContext.REPORT_TITLE, FontFactory.getFont("Helvetica", 12, Font.BOLD, Color.BLACK));
        fontFamily.addFont(FontContext.SMALL_TEXT, fontSmallBold);
        fontFamily.addFont(FontContext.TABLE_HEADER, fontMediumBold);
        fontFamily.addFont(FontContext.TABLE_DATA, fontSmallRegular);
        fontFamilySelector.addFontFamily(fontFamily);

        File[] files;
        try {
            File f = new File(exportMPXDAOImpl.class.getClassLoader().getResource("fonts").toURI());
            files = f.listFiles(new FilenameFilter() {
                @Override
                public boolean accept(File dir, String name) {
                    return name.endsWith(".ttf");
                }
            });
        } catch (Exception e1) {
            Logger.getLogger(exportMPXDAOImpl.class.getName()).log(Level.SEVERE, null, e1);
            files = new File[]{};
        }
        for (File file : files) {
            try {
                BaseFont bfnt = BaseFont.createFont(file.getAbsolutePath(), BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
                fontFamily = new FontFamily();
                fontFamily.addFont(FontContext.HEADER_NOTE, new Font(bfnt, 10, Font.BOLD, Color.GRAY));
                fontFamily.addFont(FontContext.FOOTER_NOTE, new Font(bfnt, 12, Font.BOLD, Color.GRAY));
                fontFamily.addFont(FontContext.LOGO_TEXT, new Font(bfnt, 14, Font.NORMAL, Color.BLACK));
                fontFamily.addFont(FontContext.REPORT_TITLE, new Font(bfnt, 20, Font.BOLD, Color.BLACK));
                fontFamily.addFont(FontContext.SMALL_TEXT, new Font(bfnt, 12, Font.NORMAL, Color.BLACK));
                fontFamily.addFont(FontContext.TABLE_HEADER, new Font(bfnt, 14, Font.BOLD, Color.BLACK));
                fontFamily.addFont(FontContext.TABLE_DATA, new Font(bfnt, 12, Font.NORMAL, Color.BLACK));
                fontFamilySelector.addFontFamily(fontFamily);
            } catch (Exception e) {
                Logger.getLogger(exportMPXDAOImpl.class.getName()).log(Level.SEVERE, null, e);
            }
        }

    }

    public static PdfPCell createBalanceSheetCell(String string, FontContext context, int ALIGN_RIGHT, int i, int paddLeft, int paddRight) {
        PdfPCell cell = new PdfPCell(new Paragraph(fontFamilySelector.process(string, context)));
        cell.setHorizontalAlignment(ALIGN_RIGHT);
        cell.setBorder(i);
        cell.setPaddingLeft(paddLeft);
        if (paddRight != 0) {
            cell.setPaddingRight(paddRight);
        }
        return cell;
    }

    public static PdfPCell createBalanceSheetCell(String string, Font fontTbl, int ALIGN_RIGHT, int i, int paddLeft, int paddRight) {
        PdfPCell cell = new PdfPCell(new Paragraph(string, fontTbl));
        cell.setHorizontalAlignment(ALIGN_RIGHT);
        cell.setBorder(i);
        cell.setPaddingLeft(paddLeft);
        if (paddRight != 0) {
            cell.setPaddingRight(paddRight);
        }
        return cell;
    }

    @Deprecated
    public static String currencyRenderer(double amt) {
        String fmt = "";
        try {
            String str=authHandler.getCompleteDFStringForAmount("#,##0.");
            DecimalFormat decimalFormat = new DecimalFormat(str);
            if (amt < 0) {
                amt = amt * -1;
                fmt = decimalFormat.format(amt);
                fmt = "(" + fmt + ")";
            } else {
                fmt = decimalFormat.format(amt);
            }
        } catch (Exception ex) {
        }
        return fmt;
    }
    
    public static String currencyRenderer(double amt, String companyid) {
        String fmt = "";
        try {
            String str=authHandler.getCompleteDFStringForAmount("#,##0.", companyid);
            DecimalFormat decimalFormat = new DecimalFormat(str);
            if (amt < 0) {
                amt = amt * -1;
                fmt = decimalFormat.format(amt);
                fmt = "(" + fmt + ")";
            } else {
                fmt = decimalFormat.format(amt);
            }
        } catch (Exception ex) {
        }
        return fmt;
    }

    @Deprecated
    public static void appendTermDetails(accInvoiceDAO accInvoiceDAOobj, authHandlerDAO authHandlerDAOObj, Invoice inv, PdfPTable table, String currencyid, int mode) {
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("invoiceid", inv.getID());
            KwlReturnObject curresult = null;
            curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
            List<InvoiceTermsMap> termMap = curresult.getEntityList();
            for (InvoiceTermsMap invoiceTerMap : termMap) {
                InvoiceTermsSales mt = invoiceTerMap.getTerm();
                double termAmnt = invoiceTerMap.getTermamount();
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
    }
    
    public static void appendTermDetails(accInvoiceDAO accInvoiceDAOobj, authHandlerDAO authHandlerDAOObj, Invoice inv, PdfPTable table, String currencyid, int mode, String companyid) {
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("invoiceid", inv.getID());
            KwlReturnObject curresult = null;
            curresult = accInvoiceDAOobj.getInvoiceTermMap(requestParam);
            List<InvoiceTermsMap> termMap = curresult.getEntityList();
            for (InvoiceTermsMap invoiceTerMap : termMap) {
                InvoiceTermsSales mt = invoiceTerMap.getTerm();
                double termAmnt = invoiceTerMap.getTermamount();
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
    }

    @Deprecated
    public static double appendTermDetailsVendorQuotation(accPurchaseOrderDAO accPurchaseOrderobj, authHandlerDAO authHandlerDAOObj, VendorQuotation vendorQuotation, PdfPTable table, String currencyid, int mode) {
        double totalTermAmount = 0;
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("vendorQuotation", vendorQuotation.getID());
            KwlReturnObject curresult = null;
            curresult = accPurchaseOrderobj.getVendorQuotationTermMap(requestParam);
            List<VendorQuotationTermMap> termMap = curresult.getEntityList();
            for (VendorQuotationTermMap vendorQuotationTermMap : termMap) {
                InvoiceTermsSales mt = vendorQuotationTermMap.getTerm();
                double termAmnt = vendorQuotationTermMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
        return totalTermAmount;
    }
    
     public static double appendTermDetailsVendorQuotation(accPurchaseOrderDAO accPurchaseOrderobj, authHandlerDAO authHandlerDAOObj, VendorQuotation vendorQuotation, PdfPTable table, String currencyid, int mode, String companyid) {
        double totalTermAmount = 0;
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("vendorQuotation", vendorQuotation.getID());
            KwlReturnObject curresult = null;
            curresult = accPurchaseOrderobj.getVendorQuotationTermMap(requestParam);
            List<VendorQuotationTermMap> termMap = curresult.getEntityList();
            for (VendorQuotationTermMap vendorQuotationTermMap : termMap) {
                InvoiceTermsSales mt = vendorQuotationTermMap.getTerm();
                double termAmnt = vendorQuotationTermMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
        return totalTermAmount;
    }

     @Deprecated
    public static double appendTermDetailsQuotation(accSalesOrderDAO accSalesOrderDAOobj, authHandlerDAO authHandlerDAOObj, Quotation quotation, PdfPTable table, String currencyid, int mode) {
        double totalTermAmount = 0;
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("quotation", quotation.getID());
            KwlReturnObject curresult = null;
            curresult = accSalesOrderDAOobj.getQuotationTermMap(requestParam);
            List<QuotationTermMap> termMap = curresult.getEntityList();
            for (QuotationTermMap quotationTermMap : termMap) {
                InvoiceTermsSales mt = quotationTermMap.getTerm();
                double termAmnt = quotationTermMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
        return totalTermAmount;
    }
    
    public static double appendTermDetailsQuotation(accSalesOrderDAO accSalesOrderDAOobj, authHandlerDAO authHandlerDAOObj, Quotation quotation, PdfPTable table, String currencyid, int mode, String companyid) {
        double totalTermAmount = 0;
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("quotation", quotation.getID());
            KwlReturnObject curresult = null;
            curresult = accSalesOrderDAOobj.getQuotationTermMap(requestParam);
            List<QuotationTermMap> termMap = curresult.getEntityList();
            for (QuotationTermMap quotationTermMap : termMap) {
                InvoiceTermsSales mt = quotationTermMap.getTerm();
                double termAmnt = quotationTermMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
        return totalTermAmount;
    }

    @Deprecated
    public static double appendTermDetailsPurchaseOrder(accPurchaseOrderDAO accPurchaseOrderobj, authHandlerDAO authHandlerDAOObj, PurchaseOrder purchaseOrder, PdfPTable table, String currencyid, int mode) {
        double totalTermAmount = 0;
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("purchaseOrder", purchaseOrder.getID());
            KwlReturnObject curresult = null;
            curresult = accPurchaseOrderobj.getPurchaseOrderTermMap(requestParam);
            List<PurchaseOrderTermMap> termMap = curresult.getEntityList();
            for (PurchaseOrderTermMap purchaseOrderTermMap : termMap) {
                InvoiceTermsSales mt = purchaseOrderTermMap.getTerm();
                double termAmnt = purchaseOrderTermMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
        return totalTermAmount;
    }
    
    public static double appendTermDetailsPurchaseOrder(accPurchaseOrderDAO accPurchaseOrderobj, authHandlerDAO authHandlerDAOObj, PurchaseOrder purchaseOrder, PdfPTable table, String currencyid, int mode, String companyid) {
        double totalTermAmount = 0;
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("purchaseOrder", purchaseOrder.getID());
            KwlReturnObject curresult = null;
            curresult = accPurchaseOrderobj.getPurchaseOrderTermMap(requestParam);
            List<PurchaseOrderTermMap> termMap = curresult.getEntityList();
            for (PurchaseOrderTermMap purchaseOrderTermMap : termMap) {
                InvoiceTermsSales mt = purchaseOrderTermMap.getTerm();
                double termAmnt = purchaseOrderTermMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
        return totalTermAmount;
    }

    @Deprecated
    public static double appendTermDetailsSalesOrder(accSalesOrderDAO accSalesOrderDAOobj, authHandlerDAO authHandlerDAOObj, SalesOrder salesOrder, PdfPTable table, String currencyid, int mode) {
        double totalTermAmount = 0;
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("salesOrder", salesOrder.getID());
            KwlReturnObject curresult = null;
            curresult = accSalesOrderDAOobj.getSalesOrderTermMap(requestParam);
            List<SalesOrderTermMap> termMap = curresult.getEntityList();
            for (SalesOrderTermMap salesOrderTermMap : termMap) {
                InvoiceTermsSales mt = salesOrderTermMap.getTerm();
                double termAmnt = salesOrderTermMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
        return totalTermAmount;
    }
    
    public static double appendTermDetailsSalesOrder(accSalesOrderDAO accSalesOrderDAOobj, authHandlerDAO authHandlerDAOObj, SalesOrder salesOrder, PdfPTable table, String currencyid, int mode, String companyid) {
        double totalTermAmount = 0;
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("salesOrder", salesOrder.getID());
            KwlReturnObject curresult = null;
            curresult = accSalesOrderDAOobj.getSalesOrderTermMap(requestParam);
            List<SalesOrderTermMap> termMap = curresult.getEntityList();
            for (SalesOrderTermMap salesOrderTermMap : termMap) {
                InvoiceTermsSales mt = salesOrderTermMap.getTerm();
                double termAmnt = salesOrderTermMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
        return totalTermAmount;
    }

    @Deprecated
    public static void appendTermDetailsGoodsReceipt(accGoodsReceiptDAO accGoodsReceiptobj, authHandlerDAO authHandlerDAOObj, GoodsReceipt inv, PdfPTable table, String currencyid, int mode) {
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("invoiceid", inv.getID());
            KwlReturnObject curresult = null;
            curresult = accGoodsReceiptobj.getInvoiceTermMap(requestParam);
            List<ReceiptTermsMap> termMap = curresult.getEntityList();
            for (ReceiptTermsMap receiptTermsMap : termMap) {
                InvoiceTermsSales mt = receiptTermsMap.getTerm();
                double termAmnt = receiptTermsMap.getTermamount();
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
    }
    
     public static void appendTermDetailsGoodsReceipt(accGoodsReceiptDAO accGoodsReceiptobj, authHandlerDAO authHandlerDAOObj, GoodsReceipt inv, PdfPTable table, String currencyid, int mode, String companyid) {
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("invoiceid", inv.getID());
            KwlReturnObject curresult = null;
            curresult = accGoodsReceiptobj.getInvoiceTermMap(requestParam);
            List<ReceiptTermsMap> termMap = curresult.getEntityList();
            for (ReceiptTermsMap receiptTermsMap : termMap) {
                InvoiceTermsSales mt = receiptTermsMap.getTerm();
                double termAmnt = receiptTermsMap.getTermamount();
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
    }
    
    @Deprecated
    public static double appendTermDetailsDebitNote(accDebitNoteDAO accDebitNoteDAOObj, authHandlerDAO authHandlerDAOObj, DebitNote debitNote, PdfPTable table, String currencyid, int mode) {
            double totalTermAmount = 0;
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("debitNoteId", debitNote.getID());
            KwlReturnObject curresult = null;
            curresult = accDebitNoteDAOObj.getDebitNoteTermMap(requestParam);
            List<DebitNoteTermsMap> termMap = curresult.getEntityList();
            for (DebitNoteTermsMap debitNoteTermsMap : termMap) {
                InvoiceTermsSales mt = debitNoteTermsMap.getTerm();
                double termAmnt = debitNoteTermsMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                 cell3.setColspan(4);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
        return totalTermAmount;
    }
    
    public static double appendTermDetailsDebitNote(accDebitNoteDAO accDebitNoteDAOObj, authHandlerDAO authHandlerDAOObj, DebitNote debitNote, PdfPTable table, String currencyid, int mode, String companyid) {
            double totalTermAmount = 0;
        try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("debitNoteId", debitNote.getID());
            KwlReturnObject curresult = null;
            curresult = accDebitNoteDAOObj.getDebitNoteTermMap(requestParam);
            List<DebitNoteTermsMap> termMap = curresult.getEntityList();
            for (DebitNoteTermsMap debitNoteTermsMap : termMap) {
                InvoiceTermsSales mt = debitNoteTermsMap.getTerm();
                double termAmnt = debitNoteTermsMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                 cell3.setColspan(4);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
        return totalTermAmount;
    }
    
    @Deprecated
     public static double appendTermDetailsCreditNote(accCreditNoteDAO accCreditNoteDAOobj, authHandlerDAO authHandlerDAOObj, CreditNote creditNote, PdfPTable table, String currencyid, int mode) {
         double totalTermAmount = 0;
         try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("creditNoteId", creditNote.getID());
            KwlReturnObject curresult = null;
            curresult = accCreditNoteDAOobj.getCreditNoteTermMap(requestParam);
            List<CreditNoteTermsMap> termMap = curresult.getEntityList();
            for (CreditNoteTermsMap creditNoteTermsMap : termMap) {
                InvoiceTermsSales mt = creditNoteTermsMap.getTerm();
                double termAmnt = creditNoteTermsMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                 cell3.setColspan(4);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
         return totalTermAmount;
    }
     
     public static double appendTermDetailsCreditNote(accCreditNoteDAO accCreditNoteDAOobj, authHandlerDAO authHandlerDAOObj, CreditNote creditNote, PdfPTable table, String currencyid, int mode, String companyid) {
         double totalTermAmount = 0;
         try {
            HashMap<String, Object> requestParam = new HashMap();
            requestParam.put("creditNoteId", creditNote.getID());
            KwlReturnObject curresult = null;
            curresult = accCreditNoteDAOobj.getCreditNoteTermMap(requestParam);
            List<CreditNoteTermsMap> termMap = curresult.getEntityList();
            for (CreditNoteTermsMap creditNoteTermsMap : termMap) {
                InvoiceTermsSales mt = creditNoteTermsMap.getTerm();
                double termAmnt = creditNoteTermsMap.getTermamount();
                totalTermAmount += termAmnt;
                PdfPCell cell3 = createCell((mt.getTerm() + (termAmnt > 0 ? "(+)" : "(-)")), fontSmallBold, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                 cell3.setColspan(4);
                table.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(termAmnt > 0 ? termAmnt : (termAmnt * -1), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
                table.addCell(cell3);
            }
        } catch (Exception ex) {
        }
         return totalTermAmount;
    }

    public static PdfPCell createCell(String string, Font fontTbl, int ALIGN_RIGHT, int i, int padd) {
        PdfPCell cell = new PdfPCell(new Paragraph(string, fontTbl));
            cell.setHorizontalAlignment(ALIGN_RIGHT);
            cell.setBorder(i);
            cell.setPadding(padd);
        return cell;
    }
    
   
   public static PdfPCell createCellAllowingChinese(String string, Font fontTbl, int ALIGN_RIGHT, int i, int padd) {
        PdfPCell cell = new PdfPCell(new Paragraph(string));
        
            Phrase phrase = null;
            string = StringUtil.isNullOrEmpty(string)? "" : string;

            phrase = fontFamilySelector.process(string, FontContext.TABLE_DATA, fontTbl);
            
            cell = new PdfPCell(new Paragraph(phrase));
        
            cell.setHorizontalAlignment(ALIGN_RIGHT);
            cell.setBorder(i);
            cell.setPadding(padd);
        return cell;
    }
   


    public static PdfPCell createCell(String string, FontContext context, int ALIGN_RIGHT, int i, int padd) {
        PdfPCell cell = new PdfPCell(new Paragraph(fontFamilySelector.process(string, context)));
        cell.setHorizontalAlignment(ALIGN_RIGHT);
        cell.setBorder(i);
        cell.setPadding(padd);
        return cell;
    }

    public static PdfPTable addCompanyLogo(String logoPath, Company com) {
        PdfPTable tab1 = new PdfPTable(1);
        String imgPath = logoPath;
        PdfPCell imgCell = null;
        try {
            Image img = Image.getInstance(imgPath);
            imgCell = new PdfPCell(img);
            if (imgPath.contains("logo.gif")) {
                imgCell = new PdfPCell(new Paragraph(com.getCompanyName(), fontSmallRegular));
            }
        } catch (Exception e) {
            imgCell = new PdfPCell(new Paragraph(com.getCompanyName(), fontSmallRegular));
        }
        imgCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        imgCell.setBorder(0);
        tab1.addCell(imgCell);
        return tab1;
    }

    public static PdfPTable addCompanyLogo(String logoPath, String comName) {
        PdfPTable tab1 = new PdfPTable(1);
        String imgPath = logoPath;
        PdfPCell imgCell = null;
        try {

            if (imgPath.contains("logo.gif")) {
                imgCell = new PdfPCell(new Paragraph(comName, fontSmallRegular));
            } else {
                Image img = Image.getInstance(imgPath);
                imgCell = new PdfPCell(img);

            }
        } catch (Exception e) {
            imgCell = new PdfPCell(new Paragraph(comName, fontSmallRegular));
        }
        imgCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        imgCell.setBorder(0);
        tab1.addCell(imgCell);
        return tab1;
    }

    public static void addTableRowGlobal(PdfPTable container, PdfPTable table) {
        PdfPCell tableRow = new PdfPCell(table);
        tableRow.setBorder(0);
        tableRow.setPaddingRight(10);
        tableRow.setPaddingLeft(10);
        container.addCell(tableRow);
    }

    public static void getHtmlCell(String htmlString, PdfPTable mainTable, String baseUrl) {
        StringReader strReader = new StringReader(htmlString.replaceAll("src=\"[^\"]*?video.jsp", "src=\"" + baseUrl + "video.jsp"));
        StyleSheet styles = new StyleSheet();
        try {
            for (Object ele : HTMLWorker.parseToList(strReader, styles)) {
                //Phrase phraseStr = new Phrase((Phrase)ele);
                PdfPCell cell = new PdfPCell();
                cell.addElement((Element) ele);
                cell.setBorder(0);
                cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                cell.setPadding(10);
                mainTable.addCell(cell);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
    public static String removeWidthOfHTMLTable(String htmlString){
         org.jsoup.nodes.Document jsoupDoc = Jsoup.parse(htmlString);
           Elements width = jsoupDoc.getElementsByAttribute("width");
           for (org.jsoup.nodes.Element e : width) {
             Attributes attrs = e.attributes().clone();
             for (Attribute attribute : attrs) {
                String attributeName = attribute.getKey();
                if (attributeName.equalsIgnoreCase("width")) {
                         e.removeAttr(attributeName);
                }
             }
           }
        return jsoupDoc.outerHtml();   
    }
            
    public static PdfPCell getHtmlCellTable(String htmlString, String baseUrl) throws DocumentException {
        htmlString=removeWidthOfHTMLTable(htmlString);  
        StringReader strReader = new StringReader(htmlString.replaceAll("src=\"[^\"]*?video.jsp", "src=\"" + baseUrl + "video.jsp"));
        PdfPTable taxSummeryTable = new PdfPTable(1);
        taxSummeryTable.setWidthPercentage(100);
        taxSummeryTable.setWidths(new float[]{100});
        StyleSheet styles = new StyleSheet();
        styles.loadTagStyle("body", "size", "10pt");
        PdfPCell cell = new PdfPCell();
        try {
             for (Object ele : HTMLWorker.parseToList(strReader, styles)) {
                //Phrase phraseStr = new Phrase((Phrase)ele);
                
                cell.addElement((Element) ele); 
                cell.setBorder(0);
                cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                cell.setPadding(1);
                taxSummeryTable.addCell(cell);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
        return cell;
    }
      public static String processFontTags(String buildhtml) {
          org.jsoup.nodes.Document jsoupDoc = Jsoup.parse(buildhtml);
          Elements font = jsoupDoc.select("font");
          for (org.jsoup.nodes.Element e : font) {
             Attributes attrs = e.attributes().clone();
             StringBuilder styleString = new StringBuilder();
             String theSizeString = "";
             for (Attribute attribute : attrs) {
                String attributeName = attribute.getKey();
                String attributeValue = attribute.getValue();
                if (attributeName.equalsIgnoreCase("face")) {
                   styleString.append(" font-family: ");
                   styleString.append(attributeValue+";");
                } else if (attributeName.equalsIgnoreCase("size")) {
                   int theSize = Integer.valueOf(attributeValue.trim());
                   if (theSize <= FONT_VALUES.length) {
                      theSizeString = FONT_VALUES[theSize - 1];
                   }
                } else if (attributeName.equalsIgnoreCase("color")) {
                   styleString.append(" color: ");
                   styleString.append("#"+attributeValue+";");
                } else if (attributeName.equalsIgnoreCase("style")) {
                   // possible that font size specified here (font-size: xxpt)
                   int size = attributeValue.indexOf("font-size:");
                   if (size != -1) {
                      size += "font-size:".length();
                      theSizeString = getFontSize(attributeValue.substring(size));
                   }
                }
                e.removeAttr(attributeName);
             }
             if (theSizeString.length() > 0) {
                styleString.append(" font-size: ");
                styleString.append(theSizeString+";");
             }
             e.tagName("span");
             e.attr("style", styleString.toString());
          }
          return jsoupDoc.outerHtml();
       }
       private static String getFontSize(String inputStyle) {
          int theSize = 1;
          String theReturn;
          int thePointStart = inputStyle.indexOf(' '), thePointEnd = inputStyle.lastIndexOf("pt");
          if (thePointStart == -1) {
             thePointStart = 0;
          }
          while ((inputStyle.charAt(thePointStart) == ' ') && (thePointStart < inputStyle.length())) {
             thePointStart++;
          }
          if (thePointStart >= thePointEnd) {
             theReturn = MEDIUM_FONT; // average middle font
          } else {
             theSize = Integer.valueOf(inputStyle.substring(thePointStart, thePointEnd));
             theReturn = FONT_MAP.ceilingEntry(theSize).getValue();
          }
          return theReturn;
       }
    public static PdfPCell getVRNetHtmlCell(String htmlString, PdfPTable mainTable, String baseUrl) {
        StringReader strReader = new StringReader(htmlString.replaceAll("src=\"[^\"]*?video.jsp", "src=\"" + baseUrl + "video.jsp"));
        StyleSheet styles = new StyleSheet();
        PdfPCell cell = new PdfPCell();
        try {
            cell.setBorder(0);
            for (Object ele : HTMLWorker.parseToList(strReader, styles)) {
                //Phrase phraseStr = new Phrase((Phrase)ele);
                
                cell.addElement((Element) ele);
                cell.setHorizontalAlignment(Element.ALIGN_LEFT);
                cell.setPadding(10);
//                mainTable.addCell(cell);
            }
        } catch (Exception e) {
            System.out.println(e.getMessage());
        } finally {
            return cell;
        }
        
    }
    @Deprecated
    public static String getFormattedAmount(double value) {
        String str=authHandler.getCompleteDFStringForAmount("#,##0.");
        DecimalFormat df = new DecimalFormat(str);
        return df.format(value);
    }

    @Deprecated
    public static String getFormattedUnitPrice(double value) {
        String str=authHandler.getCompleteDFStringwithDigitNumber("#,##0.",Constants.UNITPRICE_DIGIT_AFTER_DECIMAL);
        DecimalFormat df = new DecimalFormat(str);
        return df.format(value);
    }

    public static PdfPTable getSummeryTable(PdfPTable table, String mainTaxName, boolean addShipTo) throws DocumentException {
        PdfPTable summeryTable = new PdfPTable(3);
        summeryTable.setWidthPercentage(100);
        summeryTable.setWidths(new float[]{64, 1, 35});

        PdfPTable taxSummeryTable = new PdfPTable(1);
        taxSummeryTable.setWidthPercentage(100);
        taxSummeryTable.setWidths(new float[]{100});
        PdfPCell cell2 = null;
        if (addShipTo) {
            cell2 = createCell("Tax Summary", fontSmallBold, Element.ALIGN_LEFT, Rectangle.BOX, 5);
            taxSummeryTable.addCell(cell2);
            cell2 = createCell((!StringUtil.isNullOrEmpty(mainTaxName)) ? mainTaxName : "\n", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.BOX, 5);
            taxSummeryTable.addCell(cell2);
        } else {
            cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 5);
            taxSummeryTable.addCell(cell2);
            cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 5);
            taxSummeryTable.addCell(cell2);
        }

        cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 5);
        taxSummeryTable.addCell(cell2);
        cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 5);
        taxSummeryTable.addCell(cell2);

        PdfPTable midTable = new PdfPTable(1);
        midTable.setWidthPercentage(100);
        midTable.setWidths(new float[]{100});

        PdfPCell cell1 = new PdfPCell(taxSummeryTable);
        cell1.setBorder(0);
        summeryTable.addCell(cell1);
        PdfPCell cel2 = new PdfPCell(midTable);
        cel2.setBorder(0);
        summeryTable.addCell(cel2);
        PdfPCell cel3 = new PdfPCell(table);
        cel3.setBorder(0);
        summeryTable.addCell(cel3);

        return summeryTable;
    }
    /**
     * ERM - 294 
     * This function print the details of tax summery in default pdf.
     * Only when Avalara Integration is on
     */
    public static PdfPTable getSummeryTableForAvalara(PdfPTable table,HashMap<String, Double> detailedTaxInformation,String currencyid,boolean isCurrencyCode,authHandlerDAO authHandlerDAOObj,HashMap<String, Object> requestmap,MessageSource messageSource) throws DocumentException {
        PdfPTable summeryTable = new PdfPTable(3);
        summeryTable.setWidthPercentage(100);
        summeryTable.setWidths(new float[]{64, 1, 35});
        PdfPTable taxSummeryTable = new PdfPTable(2);
        taxSummeryTable.setWidthPercentage(100);
        taxSummeryTable.setWidths(new float[]{50, 50});
        PdfPCell cell2 = null;
        cell2 = createCell(messageSource.getMessage("acc.invoice.taxSummary", null, (Locale) requestmap.get("locale")), fontSmallBold, Element.ALIGN_LEFT, Rectangle.BOX, 5);
        cell2.setColspan(2);
        taxSummeryTable.addCell(cell2);
        Set< String> avalarataxesname = detailedTaxInformation.keySet();
        Double totalSubTaxAmmount = 0.0;
        for (Iterator<String> iterator = avalarataxesname.iterator(); iterator.hasNext();) {
            String next = iterator.next();
            cell2 = createCell(next, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT, 5);
            taxSummeryTable.addCell(cell2);
            cell2 = createCell(authHandlerDAOObj.getFormattedCurrency(detailedTaxInformation.get(next), currencyid, isCurrencyCode), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
            taxSummeryTable.addCell(cell2);
            totalSubTaxAmmount = totalSubTaxAmmount + detailedTaxInformation.get(next);
        }
        cell2 = createCell(messageSource.getMessage("acc.invoice.TotalTaxAmt", null, (Locale) requestmap.get("locale")), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT, 5);
        cell2.enableBorderSide(Rectangle.TOP);
        cell2.enableBorderSide(Rectangle.BOTTOM);
        taxSummeryTable.addCell(cell2);
        cell2 = createCell(authHandlerDAOObj.getFormattedCurrency(totalSubTaxAmmount, currencyid, isCurrencyCode), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
        cell2.enableBorderSide(Rectangle.TOP);
        cell2.enableBorderSide(Rectangle.BOTTOM);
        taxSummeryTable.addCell(cell2);
        PdfPTable midTable = new PdfPTable(1);
        midTable.setWidthPercentage(100);
        midTable.setWidths(new float[]{100});
        PdfPCell cell1 = new PdfPCell(taxSummeryTable);
        cell1.setBorder(1);
        summeryTable.addCell(cell1);
        PdfPCell cel2 = new PdfPCell(midTable);
        cel2.setBorder(0);
        summeryTable.addCell(cel2);
        PdfPCell cel3 = new PdfPCell(table);
        cel3.setBorder(0);
        summeryTable.addCell(cel3);
        return summeryTable;
    }
    
    public static PdfPTable getSummeryTableForVRnet(PdfPTable table, String mainTaxName, boolean addShipTo) throws DocumentException {
        PdfPTable summeryTable = new PdfPTable(3);
        summeryTable.setWidthPercentage(100);
        summeryTable.setWidths(new float[]{65, 1, 34});

        PdfPTable taxSummeryTable = new PdfPTable(1);
        taxSummeryTable.setWidthPercentage(100);
        taxSummeryTable.setWidths(new float[]{100});
        PdfPCell cell2 = null;
        if (addShipTo) {
            cell2 = createCell("Tax Summary", fontSmallBold, Element.ALIGN_LEFT, Rectangle.BOX, 5);
            taxSummeryTable.addCell(cell2);
            cell2 = createCell((!StringUtil.isNullOrEmpty(mainTaxName)) ? mainTaxName : "\n", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.BOX, 5);
            taxSummeryTable.addCell(cell2);
        } else {
            cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 5);
            taxSummeryTable.addCell(cell2);
            cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 5);
            taxSummeryTable.addCell(cell2);
        }

        cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 5);
        taxSummeryTable.addCell(cell2);
        cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 5);
        taxSummeryTable.addCell(cell2);

        PdfPTable midTable = new PdfPTable(1);
        midTable.setWidthPercentage(100);
        midTable.setWidths(new float[]{100});

        PdfPCell cell1 = new PdfPCell(taxSummeryTable);
        cell1.setBorder(0);
        summeryTable.addCell(cell1);
        PdfPCell cel2 = new PdfPCell(midTable);
        cel2.setBorder(0);
        summeryTable.addCell(cel2);
        PdfPCell cel3 = new PdfPCell(table);
        cel3.setBorder(0);
        summeryTable.addCell(cel3);

        return summeryTable;
    }
    
    public static PdfPTable getSummeryTableForVRnetQuotation(PdfPTable table, String memo, boolean addShipTo) throws DocumentException {
        PdfPTable summeryTable = new PdfPTable(3);
        summeryTable.setWidthPercentage(100);
        summeryTable.setWidths(new float[]{65, 1, 34});

        PdfPTable taxSummeryTable = new PdfPTable(1);
        taxSummeryTable.setWidthPercentage(100);
        taxSummeryTable.setWidths(new float[]{100});
        PdfPCell cell2 = null;
        cell2 = createCell("MEMO:", fontSmallBold, Element.ALIGN_LEFT, Rectangle.LEFT +Rectangle.TOP+ Rectangle.RIGHT, 5);
        taxSummeryTable.addCell(cell2);
        cell2 = createCell((!StringUtil.isNullOrEmpty(memo)) ? memo : "\n", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT +Rectangle.RIGHT+Rectangle.BOTTOM, 5);
        taxSummeryTable.addCell(cell2);
        
        PdfPTable midTable = new PdfPTable(1);
        midTable.setWidthPercentage(100);
        midTable.setWidths(new float[]{100});

        PdfPCell cell1 = new PdfPCell(taxSummeryTable);
        cell1.setBorder(0);
        summeryTable.addCell(cell1);
        
        cell1 = new PdfPCell(midTable);
        cell1.setBorder(0);
        summeryTable.addCell(cell1);
         
        cell1 = new PdfPCell(table);
        cell1.setBorder(0);
        summeryTable.addCell(cell1);
        return summeryTable;
    }
    
    public static Boolean checkCompanyTemplateLogoPresent(Company com) {
        boolean isPresent=true;  
        PdfPCell imgCell = new PdfPCell();
        try {
            String tempImagePath = storageHandlerImpl.GetDocStorePath() + com.getCompanyID() + "_template.png";
            Image img = Image.getInstance(tempImagePath);
        } catch (Exception e) {
            isPresent=false;
        }
       
        return isPresent;
    }
    
       
    public static PdfPTable addCompanyTemplateLogo(String logoPath, Company com) {
        PdfPTable tab1 = new PdfPTable(1);
        String imgPath = logoPath;

        PdfPCell imgCell = new PdfPCell();
        try {
            String tempImagePath = storageHandlerImpl.GetDocStorePath() + com.getCompanyID() + "_template.png";
            Image img = Image.getInstance(tempImagePath);    
            if (img.getWidth() < 400) {
                img.scaleToFit(img.getWidth(), img.getHeight());
            } else {
                if (com.getTemplateflag() == Constants.sms_templateflag) {
                    img.scaleAbsolute(500, 95);
                } else {
                    img.scaleToFit(380, 60);
                }
            }
            imgCell.addElement((Element) img);
            imgCell = new PdfPCell(img);
        } catch (Exception e) {
            tab1 = ExportRecordHandler.addCompanyLogo(logoPath, com);
            return tab1;
        }
        imgCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        imgCell.setBorder(0);
        tab1.addCell(imgCell);
        PdfPCell cell = new PdfPCell(new Paragraph(com.getCompanyName(), fontSmallBold1));
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.setBorder(0);
        tab1.addCell(cell);
        return tab1;
    }   
    
     public static PdfPTable addCompanyTemplateLogoForVQH(String logoPath, Company com) {
        PdfPTable tab1 = new PdfPTable(1);
        String imgPath = logoPath;
        PdfPCell imgCell = new PdfPCell();
        try {
            String tempImagePath = storageHandlerImpl.GetDocStorePath() + com.getCompanyID() + "_template.png";
            Image img = Image.getInstance(tempImagePath);
            img.scaleAbsolute(400, 86);
            imgCell.addElement((Element) img);
            imgCell = new PdfPCell(img);
        } catch (Exception e) {
            tab1 = ExportRecordHandler.addCompanyLogo(logoPath, com);
        }
        imgCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        imgCell.setBorder(0);
        tab1.addCell(imgCell);
        return tab1;
    }

    public static String getProductNameWithDescription(Product product){
       String productNameWithDecription = product.getName();
       
       if(!StringUtil.isNullOrEmpty(product.getDescription())){
       
           productNameWithDecription +=" - "+product.getDescription();
       }
   
       return productNameWithDecription;
   }  
   public static int getModuleId(int mode, String billid,String companyid,kwlCommonTablesDAO kwlCommonTablesDAOObj) {
        int moduleid=-1;
        try{            //Assigned moduleid are same as WtfSetting.js
             CompanyAccountPreferences companyAccountPreferences = (CompanyAccountPreferences) kwlCommonTablesDAOObj.getClassObject(CompanyAccountPreferences.class.getName(), companyid);
             Account cashaccount = companyAccountPreferences.getCashAccount();
              if(mode == StaticValues.AUTONUM_GOODSRECEIPT || mode == StaticValues.AUTONUM_BILLINGGOODSRECEIPT ){
                GoodsReceipt receipt = null;
                BillingGoodsReceipt bgr = null;
                Account vEntry;
                if (mode == StaticValues.AUTONUM_GOODSRECEIPT) {
                    receipt = (GoodsReceipt) kwlCommonTablesDAOObj.getClassObject(GoodsReceipt.class.getName(), billid);
                    vEntry = receipt.getVendorEntry().getAccount();
                } else {
                    bgr = (BillingGoodsReceipt) kwlCommonTablesDAOObj.getClassObject(BillingGoodsReceipt.class.getName(), billid);
                    vEntry = bgr.getVendorEntry().getAccount();
                }
                if (cashaccount == vEntry)    //true if module is Cash Purchase/Billing cash purchase otherwise it will be CI/Bill CI
                     moduleid=8;
                else 
                     moduleid=6;
            }else if ((mode == StaticValues.AUTONUM_INVOICE || mode == StaticValues.AUTONUM_BILLINGINVOICE)) {
                Invoice inv = null;
                BillingInvoice inv1 = null;
                Account cEntry;
                if (mode == StaticValues.AUTONUM_INVOICE) {
                    inv = (Invoice) kwlCommonTablesDAOObj.getClassObject(Invoice.class.getName(), billid);
                    cEntry = inv.getCustomerEntry().getAccount();
                } else {
                    inv1 = (BillingInvoice) kwlCommonTablesDAOObj.getClassObject(BillingInvoice.class.getName(), billid);
                    cEntry = inv1.getCustomerEntry().getAccount();
                }
                if (cashaccount == cEntry)   //true if module is Cash Sales/Billing Cash sales otherwise it will be VI/Bill VI
                    moduleid=4;
                else 
                    moduleid=2;
            }
            else if(mode==StaticValues.AUTONUM_DEBITNOTE || mode==StaticValues.AUTONUM_BILLINGDEBITNOTE)//Assigned moduleid are same as WtfSetting.js
               moduleid=10;         
            else if(mode==StaticValues.AUTONUM_CREDITNOTE || mode==StaticValues.AUTONUM_BILLINGCREDITNOTE)
               moduleid=12;
            else if(mode==StaticValues.AUTONUM_PAYMENT || mode==StaticValues.AUTONUM_BILLINGPAYMENT)
               moduleid=14;
            else if(mode==StaticValues.AUTONUM_RECEIPT || mode==StaticValues.AUTONUM_BILLINGRECEIPT)
               moduleid=16;
            else if(mode==StaticValues.AUTONUM_PURCHASEORDER || mode==StaticValues.AUTONUM_BILLINGPURCHASEORDER)
               moduleid=18;
            else if(mode==StaticValues.AUTONUM_SALESORDER || mode==StaticValues.AUTONUM_BILLINGSALESORDER)
               moduleid=20;
            else if(mode==StaticValues.AUTONUM_INVOICERECEIPT || mode==StaticValues.AUTONUM_BILLINGINVOICERECEIPT)
               moduleid=4;  
            else if(mode==StaticValues.AUTONUM_QUOTATION)
               moduleid=22;
            else if(mode==StaticValues.AUTONUM_VENQUOTATION)
               moduleid=23;
            else if(mode==StaticValues.AUTONUM_DELIVERYORDER)
               moduleid=27;
            else if(mode==StaticValues.AUTONUM_GOODSRECEIPTORDER)
               moduleid=28;
            else if(mode==StaticValues.AUTONUM_SALESRETURN)
               moduleid=29;
            else if(mode==StaticValues.AUTONUM_PURCHASERETURN)
               moduleid=31;
        }catch(Exception ex){
            
        }
     return moduleid; 
    }

        public PdfPCell getProductNameWithDescriptionPhrase(Product product) {
        String productNameWithDecription = product.getName();

        Phrase phrase1 = fontFamilySelector.process(productNameWithDecription, FontContext.SMALL_TEXT);
        Phrase phrase2 = new Phrase();
        if (!StringUtil.isNullOrEmpty(product.getDescription())) {
            phrase2 = fontFamilySelector.process(" - " + product.getDescription(), FontContext.TABLE_DATA);
        }

        phrase1.add(phrase2);
        PdfPCell pdfWordCell = new PdfPCell();
        pdfWordCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        pdfWordCell.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
        pdfWordCell.setPaddingLeft(5);
        pdfWordCell.setPaddingTop(0);

        pdfWordCell.addElement(phrase1);
        return pdfWordCell;
    }    
        
    public static void addHeaderFooter(String CompanyPDFFooter, Document document, PdfWriter writer) throws DocumentException, ServiceException {
        PdfPTable footer = new PdfPTable(1);
        PdfPCell footerSeparator = new PdfPCell(new Paragraph("", fontTblMediumBold));
        if(!StringUtil.isNullOrEmpty(CompanyPDFFooter)){
            String footerText= CompanyPDFFooter.replaceAll("(\\r|\\n)", "");
            footerSeparator = new PdfPCell(new Paragraph(footerText, fontTblMediumBold));
//        }   
        footerSeparator.setHorizontalAlignment(Element.ALIGN_CENTER);
        footerSeparator.setBorder(1);
        footerSeparator.setPaddingBottom(1);
        footer.addCell(footerSeparator);

        try {
            Rectangle page = document.getPageSize();            
            footer.setTotalWidth(page.getWidth() - document.leftMargin()- document.rightMargin());
            footer.writeSelectedRows(0, -1, document.leftMargin(), document.bottomMargin()-5, writer.getDirectContent());
        } catch (Exception e) {
            throw new ExceptionConverter(e);
        }
        }
    }

    public static String getBlankTable(String ashtmlString, String[] header, String width) {
//        PdfPTable table = new PdfPTable(7);
//        table.setWidthPercentage(100);
//        table.setWidths(new float[]{5, 20, 15, 15, 15,13, 17});

    	ashtmlString+="<center>";
        ashtmlString += "<table cellspacing=0 border=1 cellpadding=2 width='"+width+"%' style='font-size:9pt'>";
        ashtmlString +="<tr>";

        for (int i = 0; i < header.length; i++) {
           ashtmlString +="<th bgcolor=\"grey\">"+header[i]+"</th>";
        }
        ashtmlString +="</tr>";
        ashtmlString+="</center>";
//        ashtmlString += "</body>";
        return ashtmlString;
    }
    
    public static PdfPTable getBlankTableGST() throws DocumentException{
        PdfPTable table = new PdfPTable(4);
        table.setWidthPercentage(90);
        table.setWidths(new float[]{48, 20, 20, 20 });
        return table;
    }

    public static PdfPTable getBlankTableGSTdetailed(Company company) throws DocumentException{
        PdfPTable table=null;
        if(company.getCountry().getID().equals(Constants.SINGAPOREID)){
            table = new PdfPTable(8);
            table.setWidths(new float[]{16, 12, 12, 12, 12,12,12,12});
            table.setWidthPercentage(95);
        } else {
            table = new PdfPTable(6);
            table.setWidths(new float[]{20, 15, 15, 17, 16,17});
            table.setWidthPercentage(100);
        }    
       
        return table;
    }
    
    public static void addHeaderContents(String CompanyPDFHeader, Document document, PdfWriter writer) throws DocumentException, ServiceException {
        PdfPTable header = new PdfPTable(1);
        PdfPCell headerSeparator = new PdfPCell(new Paragraph("", fontTblMediumBold));
        if(!StringUtil.isNullOrEmpty(CompanyPDFHeader)){
             String headerText= CompanyPDFHeader.replaceAll("(\\r|\\n)", "");
            headerSeparator = new PdfPCell(new Paragraph(headerText, fontTblMediumBold));
        
        headerSeparator.setHorizontalAlignment(Element.ALIGN_CENTER);
        headerSeparator.setBorder(Rectangle.BOTTOM);
        headerSeparator.setPaddingBottom(5);
        header.addCell(headerSeparator);

        try {
            Rectangle page = document.getPageSize();
            header.setTotalWidth(page.getWidth() - document.leftMargin() - document.rightMargin());
            header.writeSelectedRows(0, -1, document.leftMargin(), page.getHeight()-10, writer.getDirectContent());           
        } catch (Exception e) {
            throw new ExceptionConverter(e);
        }
        }
    }

    public static PdfPTable getCompanyInfo(String com[]) {
        PdfPTable tab1 = new PdfPTable(1);
        tab1.setHorizontalAlignment(Element.ALIGN_CENTER);
        PdfPCell cell = new PdfPCell(new Paragraph(com[0], fontMediumBold));
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.setBorder(0);
        tab1.addCell(cell);
        for (int i = 1; i < com.length; i++) {
            cell = new PdfPCell(new Paragraph(com[i], fontTblMediumBold));
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.setBorder(0);
            tab1.addCell(cell);
        }
        return tab1;
    }
    public static PdfPTable getCompanyInfoForSATS(String com[]) {
        PdfPTable tab1 = new PdfPTable(1);
        tab1.setHorizontalAlignment(Element.ALIGN_CENTER);
        PdfPCell cell = new PdfPCell(new Paragraph(com[0], fontMediumBold));
        cell.setHorizontalAlignment(Element.ALIGN_LEFT);
        cell.setBorder(0);
        tab1.addCell(cell);
        for (int i = 1; i < com.length; i++) {
            if (i == 2) {
                cell = new PdfPCell(new Paragraph("Email: " + com[i], fontSmallRegular1));
            } else if (i == 3) {
                cell = new PdfPCell(new Paragraph("Phone: " + com[i], fontSmallRegular1));
            } else {
                cell = new PdfPCell(new Paragraph(com[i], fontSmallRegular1));
            }
            cell.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell.setBorder(0);
            tab1.addCell(cell);
        }
        return tab1;
    }
    
    public static PdfPTable addBlankLine(int count) {
        PdfPTable table = new PdfPTable(1);
        PdfPCell cell = null;
        for (int i = 0; i < count; i++) {
            cell = new PdfPCell(new Paragraph("", fontTblMediumBold));
            cell.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell.setPadding(3);
            cell.setBorder(0);
            table.addCell(cell);
        }
        return table;
    }

    @Deprecated
    public static PdfPCell calculateDiscount(authHandlerDAO authHandlerDAOObj,Double disc, String currencyid) {
        PdfPCell cell = null;
        if (disc == null) {
            cell = new PdfPCell(new Paragraph("--", fontSmallRegular));
        } else {
            String str=authHandler.getCompleteDFStringForAmount("#,##0.");
            DecimalFormat df = new DecimalFormat(str);//authHandlerDAOObj.getFormattedCurrency(disc, currencyid)
            cell = new PdfPCell(new Paragraph("("+df.format(disc) +")", fontSmallRegular));
        }
        return cell;
    }
    
    public static PdfPCell calculateDiscount(authHandlerDAO authHandlerDAOObj,Double disc, String currencyid, String companyid) {
        PdfPCell cell = null;
        if (disc == null) {
            cell = new PdfPCell(new Paragraph("--", fontSmallRegular));
        } else {
            String str=authHandler.getCompleteDFStringForAmount("#,##0.", companyid);
            DecimalFormat df = new DecimalFormat(str);//authHandlerDAOObj.getFormattedCurrency(disc, currencyid)
            cell = new PdfPCell(new Paragraph("("+df.format(disc) +")", fontSmallRegular));
        }
        return cell;
    }
    
    @Deprecated
    public static PdfPCell calculateDiscount(authHandlerDAO authHandlerDAOObj,Discount disc, String currencyid) {
        PdfPCell cell = null;
        String str=authHandler.getCompleteDFStringForAmount("#,##0.");
        DecimalFormat df = new DecimalFormat(str);
        if (disc == null) {
            cell = new PdfPCell(new Paragraph("--", fontSmallRegular));
        } else if (disc.isInPercent()) {
            cell = new PdfPCell(new Paragraph("("+df.format(disc.getDiscountValue()) +")", fontSmallRegular));//authHandlerDAOObj.getFormattedCurrency(disc.getDiscountValue(), currencyid)
        } else {
            cell = new PdfPCell(new Paragraph("("+df.format(disc.getDiscountValue())+")", fontSmallRegular));//
        }
        return cell;
    }
    
    public static PdfPCell calculateDiscount(authHandlerDAO authHandlerDAOObj,Discount disc, String currencyid, String companyid) {
        PdfPCell cell = null;
        String str=authHandler.getCompleteDFStringForAmount("#,##0.", companyid);
        DecimalFormat df = new DecimalFormat(str);
        if (disc == null) {
            cell = new PdfPCell(new Paragraph("--", fontSmallRegular));
        } else if (disc.isInPercent()) {
            cell = new PdfPCell(new Paragraph("("+df.format(disc.getDiscountValue()) +")", fontSmallRegular));//authHandlerDAOObj.getFormattedCurrency(disc.getDiscountValue(), currencyid)
        } else {
            cell = new PdfPCell(new Paragraph("("+df.format(disc.getDiscountValue())+")", fontSmallRegular));//
        }
        return cell;
    }
    
    public static PdfPCell calculatePartialDiscount(authHandlerDAO authHandlerDAOObj,Discount disc, String currencyid, double partialDiscount,String companyid) {
        PdfPCell cell = null;
        String str=authHandler.getCompleteDFStringForAmount("#,##0.", companyid);
        DecimalFormat df = new DecimalFormat(str);
        cell = new PdfPCell(new Paragraph("("+df.format(partialDiscount)+")", fontSmallRegular));//
        return cell;
    }
        
    @Deprecated
    public static PdfPCell calculateVRNetDiscount(authHandlerDAO authHandlerDAOObj,Discount disc, String currencyid, boolean isLineItem) {
        PdfPCell cell = null;
        DecimalFormat df = new DecimalFormat("#,##0.00");
        if (disc == null) {
            cell = new PdfPCell(new Paragraph("--", fontSmallRegular));
        } else if (disc.isInPercent()) {
            String discount = isLineItem ? df.format(disc.getDiscountValue()) : authHandlerDAOObj.getFormattedCurrency(disc.getDiscountValue(), currencyid); 
            cell = new PdfPCell(new Paragraph(discount, fontSmallRegular));//authHandlerDAOObj.getFormattedCurrency(disc.getDiscountValue(), currencyid)
        } else {
            String discount = isLineItem ? df.format(disc.getDiscountValue()) : authHandlerDAOObj.getFormattedCurrency(disc.getDiscountValue(), currencyid); 
            cell = new PdfPCell(new Paragraph(discount, fontSmallRegular));//
        }
        return cell;
    }
    
    public static PdfPCell calculateVRNetDiscount(authHandlerDAO authHandlerDAOObj,Discount disc, String currencyid, boolean isLineItem, String companyid) {
        PdfPCell cell = null;
        DecimalFormat df = new DecimalFormat("#,##0.00");
        if (disc == null) {
            cell = new PdfPCell(new Paragraph("--", fontSmallRegular));
        } else if (disc.isInPercent()) {
            String discount = isLineItem ? df.format(disc.getDiscountValue()) : authHandlerDAOObj.getFormattedCurrency(disc.getDiscountValue(), currencyid, companyid); 
            cell = new PdfPCell(new Paragraph(discount, fontSmallRegular));//authHandlerDAOObj.getFormattedCurrency(disc.getDiscountValue(), currencyid)
        } else {
            String discount = isLineItem ? df.format(disc.getDiscountValue()) : authHandlerDAOObj.getFormattedCurrency(disc.getDiscountValue(), currencyid, companyid); 
            cell = new PdfPCell(new Paragraph(discount, fontSmallRegular));//
        }
        return cell;
    }
    
    @Deprecated
    public static PdfPCell calculateVRNetDiscount(authHandlerDAO authHandlerDAOObj,double disc, String currencyid, boolean isLineItem) {
        PdfPCell cell = null;
        DecimalFormat df = new DecimalFormat("#,##0.00");

        cell = new PdfPCell(new Paragraph(authHandlerDAOObj.getFormattedCurrency(disc, currencyid), fontSmallRegular));//authHandlerDAOObj.getFormattedCurrency(disc.getDiscountValue(), currencyid)
        
        return cell;
    }
    
    public static PdfPCell calculateVRNetDiscount(authHandlerDAO authHandlerDAOObj,double disc, String currencyid, boolean isLineItem, String companyid) {
        PdfPCell cell = null;
        DecimalFormat df = new DecimalFormat("#,##0.00");

        cell = new PdfPCell(new Paragraph(authHandlerDAOObj.getFormattedCurrency(disc, currencyid, companyid), fontSmallRegular));//authHandlerDAOObj.getFormattedCurrency(disc.getDiscountValue(), currencyid)
        
        return cell;
    }
    
    @Deprecated
    public static PdfPCell getCharges(authHandlerDAO authHandlerDAOObj, JournalEntryDetail jEntry, String currencyid) {
        PdfPCell cell = null;
        if (jEntry == null) {
            cell = new PdfPCell(new Paragraph("--", fontSmallBold));
        } else {
            cell = new PdfPCell(new Paragraph(authHandlerDAOObj.getFormattedCurrency(jEntry.getAmount(), currencyid), fontSmallRegular));
        }
        return cell;
    }
    
    public static PdfPCell getCharges(authHandlerDAO authHandlerDAOObj, JournalEntryDetail jEntry, String currencyid, String companyid) {
        PdfPCell cell = null;
        if (jEntry == null) {
            cell = new PdfPCell(new Paragraph("--", fontSmallBold));
        } else {
            cell = new PdfPCell(new Paragraph(authHandlerDAOObj.getFormattedCurrency(jEntry.getAmount(), currencyid, companyid), fontSmallRegular));
        }
        return cell;
    }

    public static String numberFormatter(double values, String compSymbol) {
        NumberFormat numberFormatter;
        java.util.Locale currentLocale = java.util.Locale.US;
        numberFormatter = NumberFormat.getNumberInstance(currentLocale);
        numberFormatter.setMinimumFractionDigits(2);
        numberFormatter.setMaximumFractionDigits(2);
        return (compSymbol + numberFormatter.format(values));
    }
    
    public static PdfPTable getBlankTable() throws DocumentException{
        PdfPTable table = new PdfPTable(7);
        table.setWidthPercentage(100);        
        table.setWidths(new float[]{5, 20, 15, 15, 15,13, 17});
        return table;
    }
    
    public static PdfPTable getBlankTablePrintLink() throws DocumentException{
        PdfPTable table = new PdfPTable(8);
        table.setWidthPercentage(100);        
        table.setWidths(new float[]{5, 10, 20, 15, 15, 10,10, 15});
        return table;
    }
    public static void addTableRow(PdfPTable container, PdfPTable table) {
        PdfPCell tableRow = new PdfPCell(table);
        tableRow.setBorder(0);
        tableRow.setPaddingRight(10);
        tableRow.setPaddingLeft(10);
        container.addCell(tableRow);
    }
    
    public static void addTableRow1(PdfPTable container, PdfPTable table) {
        PdfPCell tableRow = new PdfPCell(table);
        tableRow.setBorder(0);
        tableRow.setPaddingRight(5);
        tableRow.setPaddingLeft(5);
        container.addCell(tableRow);
    }
    
public static void getHeaderFooter( boolean isAttachProductTable, boolean isFromProductTable, String globalCurrencyValue, String[] globalTableHeader, 
        String linkHeader, int productHeaderTableGlobalNo, JSONObject config, PdfPTable header, PdfPTable footer, Document document) throws ServiceException {
        try {
            
            java.util.Date dt = new java.util.Date();
            String date = "yyyy-MM-dd";
            java.text.SimpleDateFormat dtf = new java.text.SimpleDateFormat(date);
//            dtf.setTimeZone(TimeZone.getTimeZone("GMT"+this.tdiff));
            String DateStr = dtf.format(dt);
            java.awt.Color tColor=null;
        if(config!=null){
            tColor = new Color(Integer.parseInt(config.getString("textColor"), 16));
            // -------- header ----------------
            header = new PdfPTable(3);
            header.setWidthPercentage(100);
            header.setWidths(new float[]{20, 60,20});
            String HeadDate = "";
            if (config.getBoolean("headDate")) {
                HeadDate = DateStr;
            }
            PdfPCell headerDateCell = new PdfPCell(fontFamilySelector.process(HeadDate, FontContext.SMALL_TEXT,tColor));//fontSmallRegular));
            headerDateCell.setBorder(0);
            headerDateCell.setPaddingBottom(4);
            headerDateCell.setHorizontalAlignment(PdfCell.ALIGN_LEFT);
            header.addCell(headerDateCell);

            PdfPCell headerNotecell = new PdfPCell(fontFamilySelector.process(config.getString("headNote"), FontContext.HEADER_NOTE,tColor));
            headerNotecell.setBorder(0);
            headerNotecell.setPaddingBottom(4);
            headerNotecell.setHorizontalAlignment(PdfCell.ALIGN_CENTER);
            header.addCell(headerNotecell);

            String HeadPager = "";
            if (config.getBoolean("headPager")) {
                HeadPager = String.valueOf(document.getPageNumber());//current page no
            }
            PdfPCell headerPageNocell = new PdfPCell(fontFamilySelector.process(HeadPager,FontContext.HEADER_NOTE,tColor));// fontSmallRegular));
            headerPageNocell.setBorder(0);
            headerPageNocell.setPaddingBottom(4);
            headerPageNocell.setHorizontalAlignment(PdfCell.ALIGN_RIGHT);
            header.addCell(headerPageNocell);

                PdfPCell headerSeparator = new PdfPCell(new Phrase(""));
                headerSeparator.setBorder(PdfPCell.BOX);
                headerSeparator.setPadding(0);
                headerSeparator.setColspan(3);
                header.addCell(headerSeparator);
            }     
            PdfPCell invcell = null;
            
            if(isAttachProductTable){
                PdfPTable mainTableGlobal = new PdfPTable(1);
                 PdfPTable table=getTableForNextPage(productHeaderTableGlobalNo, linkHeader);
                addTableHeader(productHeaderTableGlobalNo,globalTableHeader,globalCurrencyValue, mainTableGlobal,table,invcell);
                ExportRecordHandler.addTableRowGlobal(mainTableGlobal, table); //Break table after adding header row                
                isAttachProductTable = false;
            }
            
            // -------- header end ----------------

            // -------- footer  -------------------
            if(isFromProductTable){
                isAttachProductTable = true;
                PdfPTable tableClosedLineGlobal = new PdfPTable(1);
                PdfPTable table=getTableForNextPage(productHeaderTableGlobalNo, linkHeader);
                addingFooterClosedLine(productHeaderTableGlobalNo, linkHeader, table);
                ExportRecordHandler.addTableRow(tableClosedLineGlobal, table); //Break table after adding extra space
                
            }
            footer = new PdfPTable(3);
                PdfPCell footerSeparator = new PdfPCell(new Phrase(""));
                footerSeparator.setBorder(PdfPCell.BOX);
                footerSeparator.setPadding(0);
                footerSeparator.setColspan(3);
                footer.addCell(footerSeparator);
            footer.setWidthPercentage(100);
            footer.setWidths(new float[]{20, 60,20});
            String PageDate = "";
             if(config!=null){ 
            if (config.getBoolean("footDate")) {
                PageDate = DateStr;
            }
            PdfPCell pagerDateCell = new PdfPCell(fontFamilySelector.process(PageDate, FontContext.SMALL_TEXT,tColor));//fontSmallRegular));
            pagerDateCell.setBorder(0);
            pagerDateCell.setHorizontalAlignment(PdfCell.ALIGN_LEFT);
            footer.addCell(pagerDateCell);
            
            PdfPCell footerNotecell = new PdfPCell(fontFamilySelector.process(config.getString("footNote"),FontContext.FOOTER_NOTE,tColor));// fontSmallRegular));
            footerNotecell.setBorder(0);
            footerNotecell.setHorizontalAlignment(PdfCell.ALIGN_CENTER);
            footer.addCell(footerNotecell);

            String FootPager = "";
            if (config.getBoolean("footPager")) {
                FootPager = String.valueOf(document.getPageNumber());//current page no
            }
                PdfPCell footerPageNocell = new PdfPCell(fontFamilySelector.process(FootPager,FontContext.SMALL_TEXT,tColor));// fontSmallRegular));
                footerPageNocell.setBorder(0);
                footerPageNocell.setHorizontalAlignment(PdfCell.ALIGN_RIGHT);
                footer.addCell(footerPageNocell);
             }       
        // -------- footer end   -----------
        } catch (Exception e) {
            throw ServiceException.FAILURE("exportDAOImpl.getHeaderFooter", e);
        }
    }
    
    public static void addingFooterClosedLine(int productHeaderTableGlobalNo, String linkHeader, PdfPTable table) {
        PdfPCell invcell = null;
        if (productHeaderTableGlobalNo == 4) {
            for (int i = 1; i <= 60; i++) {
                invcell = new PdfPCell(new Paragraph("", fontSmallRegular));
                invcell.setHorizontalAlignment(Element.ALIGN_CENTER);
                invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
                if (i > 55) {
                    invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM);
                }
                table.addCell(invcell);
            }
        } else if (productHeaderTableGlobalNo == 2) {
            for (int j = 1; j <= ((linkHeader.equalsIgnoreCase("")) ? 66 : 77); j++) {
                invcell = new PdfPCell(new Paragraph("", fontSmallRegular));
                invcell.setHorizontalAlignment(Element.ALIGN_CENTER);
                invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
                if (j > ((linkHeader.equalsIgnoreCase("")) ? 60 : 70)) {
                    invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM);
                }
                table.addCell(invcell);
            }
        } else if (productHeaderTableGlobalNo == 3) {
            for (int j = 0; j < 60; j++) {
                invcell = new PdfPCell(new Paragraph("", fontSmallRegular));
                invcell.setHorizontalAlignment(Element.ALIGN_CENTER);
                invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
                table.addCell(invcell);
            }
             for (int j = 0; j < 6; j++) {
                invcell = new PdfPCell(new Paragraph("", fontSmallRegular));
                invcell.setHorizontalAlignment(Element.ALIGN_CENTER);
                invcell.setBorder(Rectangle.BOTTOM + Rectangle.LEFT + Rectangle.RIGHT);
                table.addCell(invcell);
            }
        } else if (productHeaderTableGlobalNo == 5) {
              for (int j = 1; j <= 60; j++) {
                  invcell = new PdfPCell(new Paragraph("", fontSmallRegular));
                  invcell.setHorizontalAlignment(Element.ALIGN_CENTER);
                  invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
                  if (j > 54) {
                      invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM);
                  }
                  table.addCell(invcell);
              }
        } else {
            for (int j = 1; j <= ((!linkHeader.equalsIgnoreCase("")) ? 70 : 60); j++) {
                invcell = new PdfPCell(new Paragraph("", fontSmallRegular));
                invcell.setHorizontalAlignment(Element.ALIGN_CENTER);
                invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
                if (j > ((!linkHeader.equalsIgnoreCase("")) ? 63 : 54)) {
                    invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM);
                }
                table.addCell(invcell);
            }
        }
//            addTableRow(mainTable, table); //Break table after adding extra space
    }
 
    public static void addTableHeader(int productHeaderTableGlobalNo, String[] globalTableHeader, String currencyValue, PdfPTable mainTable,PdfPTable table,PdfPCell invcell) throws DocumentException, SessionExpiredException {
      
//        PdfPTable table = getBlankTable();
//        table.setWidthPercentage(100);

          for (int i = 0; i < globalTableHeader.length; i++) {
            invcell = new PdfPCell(new Paragraph(globalTableHeader[i], fontSmallBold));
            invcell.setHorizontalAlignment(Element.ALIGN_CENTER);
            invcell.setBackgroundColor(Color.LIGHT_GRAY);
//            invcell.setBorder(1);
            invcell.setPadding(3);
           if(productHeaderTableGlobalNo==4) 
            invcell.setPaddingBottom(10);
            table.addCell(invcell);
        }
//        for (int i = 0; i < globalTableHeader.length; i++) {
//            invcell = new PdfPCell(new Paragraph(fontFamilySelector.process(globalTableHeader[i], FontContext.SMALL_TEXT)));
//            invcell.setHorizontalAlignment(Element.ALIGN_CENTER);
//            invcell.setBackgroundColor(Color.LIGHT_GRAY);
//            invcell.setBorder(Rectangle.BOX);
//            invcell.setPadding(3);
//            table.addCell(invcell);
//        }
//        addTableRow(mainTable, table); //Break table after adding header row
//        table = getBlankTable();
    }
    public static PdfPTable getTableForNextPage(int  productHeaderTableGlobalNo,String linkHeader) throws DocumentException {
        PdfPTable table=null;

        switch (productHeaderTableGlobalNo) {
            case 1:
                table = getBlankTableForReportForRFQ();
                break;
            case 2:
                table = getTable(linkHeader, true);
                break;
            case 3:
                table = getBlankTableForDO();
                break;
            case 4:
                table = getDebitCreditTable();
                break;
            case 5:
                table = getBlankTableReportForINVOICE();
            case 6:
                 HashMap<String, Integer> customMap = new HashMap();
                table = getBlankTableReportForVRNetINVOICE(customMap);
                break;
            case 7:
                customMap = new HashMap();
                table = ExportRecordHandler.getBlankTableReportForVRNetDO(customMap);
                break;
            case 8:
                customMap = new HashMap();
                table = ExportRecordHandler.getBlankTableReportForCreditNote();
                break;

        }
        return table;

    }
    
    public static PdfPTable getTable(String linkHeader,boolean isPDF) throws DocumentException {
        PdfPTable table;
        if(isPDF){
            if (linkHeader.equalsIgnoreCase("")) {
               table = getBlankTableForReport();
            } else {
                table = getBlankTableForReportWithLinking();
            }
        }else{
            if (linkHeader.equalsIgnoreCase("")) {
                table = ExportRecordHandler.getBlankTable();
            } else {
                table = ExportRecordHandler.getBlankTablePrintLink();
            }
        }        
        return table;
    }
    public static PdfPTable getBlankTableForReportWithLinkingForDependent() throws DocumentException{
        PdfPTable table = new PdfPTable(8);
        table.setWidthPercentage(100);        
        table.setWidths(new float[]{5, 10, 15,25, 7,10,15, 15});
        return table;
    }  
    public static PdfPTable getBlankTableForReportWithLinking() throws DocumentException{
        PdfPTable table = new PdfPTable(7);
        table.setWidthPercentage(100);        
        table.setWidths(new float[]{6, 14, 17,32, 7, 13, 13});
        return table;
    }
     
    public static PdfPTable getBlankTableForReport() throws DocumentException{
        PdfPTable table = new PdfPTable(6);
        table.setWidthPercentage(100);        
        table.setWidths(new float[]{6, 18,32, 10, 15,16});
        return table;
    }
    public static PdfPTable getBlankTableForReportForLast() throws DocumentException{
        PdfPTable table = new PdfPTable(6);
        table.setWidthPercentage(100);        
        table.setWidths(new float[]{6, 20,35, 10, 13,13});
        return table;
    }

    public static PdfPTable getBlankTableForReportForRFQ() throws DocumentException{
        PdfPTable table = new PdfPTable(4);
        table.setWidthPercentage(100);
        table.setWidths(new float[]{6, 30,42, 20});
        return table;
    }
    public static PdfPTable getBlankTableReportForINVOICE() throws DocumentException{
        PdfPTable table = new PdfPTable(6);
        table.setWidthPercentage(100);
        table.setWidths(new float[]{6,45,13, 8, 13,13});
        return table;
    }
    public static PdfPTable getBlankTableReportForVRNetINVOICE(HashMap<String, Integer> customMap) throws DocumentException{
        int totalColSize = 5+customMap.size();
        float[] widthArr = new float[totalColSize];
//        widthArr.
        widthArr[0] = 6f; // Sr No
        widthArr[totalColSize-3] = 10f; // Unit
        widthArr[totalColSize-2] = 12f; // Rate
        widthArr[totalColSize-1] = 13f; // Amount
        int descpWidth = 60;
        int startIndex=2;
        int totalCustomWidth = 0;
        for (Map.Entry<String, Integer> field : customMap.entrySet()) {
            widthArr[startIndex] = Float.valueOf(field.getValue());
            totalCustomWidth+=field.getValue();
            startIndex++;
        }
        descpWidth = descpWidth - (descpWidth *  totalCustomWidth / 100);
        widthArr[1] = Float.valueOf(descpWidth); // Description
        
        PdfPTable table = new PdfPTable(totalColSize);
        table.setWidthPercentage(100);
        table.setWidths(widthArr);
//        table.setWidths(new float[]{6,45,13, 8, 13,13});
        return table;
    }
    public static PdfPTable getBlankTableReportForCreditNote() throws DocumentException{
        PdfPTable table = new PdfPTable(6);
        table.setWidthPercentage(100);
        table.setWidths(new float[]{6, 13, 45,12, 12, 12});
        return table;
    }
    public static PdfPTable getBlankTableReportForNonINVOICE() throws DocumentException{
        PdfPTable table = new PdfPTable(5);
        table.setWidthPercentage(100);
        table.setWidths(new float[]{8, 40, 15, 15,15});
        return table;
    }
    
    public static PdfPTable getBlankTableForDO() throws DocumentException{
	PdfPTable table = new PdfPTable(6);
        table.setWidthPercentage(100);
        table.setWidths(new float[]{10, 15,20, 25, 15,15});  
        return table;
    }
    
    public static PdfPTable getBlankTableForVRNetDO() throws DocumentException{
	PdfPTable table = new PdfPTable(3);
        table.setWidthPercentage(100);
        table.setWidths(new float[]{10, 65,10});  
        return table;
    }
    
    public static PdfPTable getBlankTableReportForVRNetDO(HashMap<String, Integer> customMap) throws DocumentException{
        int totalColSize = 3+customMap.size();
        float[] widthArr = new float[totalColSize];
//        widthArr.
        widthArr[0] = 6f; // Sr No
        widthArr[totalColSize-1] = 10f; // Unit
        int descpWidth = 60;
        int startIndex=2;
        int totalCustomWidth = 0;
        for (Map.Entry<String, Integer> field : customMap.entrySet()) {
            widthArr[startIndex] = Float.valueOf(field.getValue());
            totalCustomWidth+=field.getValue();
            startIndex++;
        }
        descpWidth = descpWidth - (descpWidth *  totalCustomWidth / 100);
        widthArr[1] = Float.valueOf(descpWidth); // Description
        
        PdfPTable table = new PdfPTable(totalColSize);
        table.setWidthPercentage(100);
        table.setWidths(widthArr);
        return table;
    }
    
    public static PdfPTable getDebitCreditTable() throws DocumentException {
        PdfPTable table = new PdfPTable(5);
        table.setWidthPercentage(100);
        table.setWidths(new float[]{6, 20, 32, 20, 20});
        return table;
    }
    
    public static Double addMonthlyBalanceSheetCell(JSONObject jobj,PdfPTable table,String currencyid,boolean isAlignment, List monthsList) throws JSONException, SessionExpiredException{
        String val = "";
        double retnum = 0 ;
        PdfPCell cell3 = null;
        PdfPCell cell4 = null;
        String companyid = jobj.optString("companyid");
        PdfPCell cell5 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0,0);
        
        if(!jobj.toString().equalsIgnoreCase("{}")){
        	
            String accName = jobj.get("accountname").toString();
            double amount = 0;
            int padding = Integer.parseInt(jobj.get("level").toString())*10;
            
            ////////// start extracting the amount
            try{                
                java.text.DecimalFormat obj = new java.text.DecimalFormat("###0.00");
                if(padding == 0 &&  !accName.equals("")){
                retnum = Double.parseDouble(obj.format(amount));
                }
            }catch(NumberFormatException ex){
//            	ex.printStackTrace();
                val = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("amount").toString());
            }
            ////////// end extracting the amount                                    
            
            //////////// // for grouping objects like Income, Expenses, etc
            if(jobj.has("fmt")){
            	cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0,(isAlignment)?padding:0,0);
                
            	table.addCell(cell3);
                
            	// actually we need to print out the amounts for those accounts in this group such as gross profit / loss or net profit/loss
            	for(int monthIndex=0; monthIndex<monthsList.size(); monthIndex++){
                	if (jobj.has("amount_"+monthIndex)){
                    	amount = Double.parseDouble(jobj.get("amount_"+monthIndex).toString());	                	
                    	val=ExportRecordHandler.currencyRenderer(amount, companyid);
                	}else{
                		val = "";
                	}                	
                	cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0,5);
                    cell4.setBorderWidthTop(1);
                    cell4.setBorderWidthBottom(1);
                    cell4.setBorderColor(Color.gray);
                    table.addCell(cell4);
                }            	
                
                table.addCell(cell5);
                
            
            ////////////// for level 0 object like Income, Expenses, etc
            }else if(padding == 0 &&  !accName.equals("")){ 
                
                cell3 = ExportRecordHandler.createBalanceSheetCell(accName.contains("Total")? accName:"", fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment)?padding:0,0);

                table.addCell(cell3);
                
                for(int monthIndex=0; monthIndex<monthsList.size(); monthIndex++){
                	if (jobj.has("amount_"+monthIndex)){
                    	amount = Double.parseDouble(jobj.get("amount_"+monthIndex).toString());	                	
                    	val=ExportRecordHandler.currencyRenderer(amount, companyid);
                	}else{
                		val = "";
                	}                	
                	cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0,5);
                    cell4.setBorderWidthTop(1);
                    cell4.setBorderWidthBottom(1);
                    cell4.setBorderColor(Color.gray);
                    table.addCell(cell4);
                }
                
                table.addCell(cell5);
                
//                for(int i=1;i<=8;i++)
//                    table.addCell(cell5);
                return  retnum;
                                
             //////////////// for the rest of level 1 (or sub-level) accounts such as Discount Received, etc
            }else{ 
	            if(jobj.has("bold")) {
	                cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment)?padding:0,0);
	            } else {
	                cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallRegular1, Element.ALIGN_LEFT, 0, (isAlignment)?padding:0,0);
	            }

	            table.addCell(cell3);

	            for(int monthIndex=0; monthIndex<monthsList.size(); monthIndex++){
                	if (jobj.has("amount_"+monthIndex)){
                    	amount = Double.parseDouble(jobj.get("amount_"+monthIndex).toString());	                	
                    	val=ExportRecordHandler.currencyRenderer(amount, companyid);
                	}else{
                		val = "";
                	}
                	cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);	                	
                	table.addCell(cell4);
	            }
	            table.addCell(cell5);                
            }
        }
        return  retnum;
    }
    
    public static PdfPTable getBlankTableGSTForm5() throws DocumentException{
        PdfPTable table = new PdfPTable(3);
        table.setWidthPercentage(100);
        table.setWidths(new float[]{60, 20, 20});
        return table;
    }
    
    public static PdfPTable getBlankTableGSTForm5Details(Company company) throws DocumentException {
        PdfPTable table = null;
        if(company.getCountry().getID().equals(Constants.SINGAPOREID)){
            table = new PdfPTable(8);
            table.setWidths(new float[]{18, 12, 12, 12, 12,12,13,9});
        } else {
            table = new PdfPTable(6);
            table.setWidths(new float[]{30, 15, 17, 15, 15, 8});
        }    
        table.setWidthPercentage(100);
        
        return table;
    }
    
    public static PdfPTable addBlankCell(PdfPTable table, int numberOfCells) throws DocumentException {
        PdfPCell blankCell = new PdfPCell();
        blankCell.setBorder(0);
        for(int i=0; i<numberOfCells; i++){
            table.addCell(blankCell);
        }
        return table;
    }
    
    public static PdfPCell addTitleCell(String title, Font fontname) throws DocumentException {
        PdfPCell pdfCell = new PdfPCell(new Paragraph(title, fontname));
        pdfCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        pdfCell.setBorder(0);
//        pdfCell.setBorder(Rectangle.BOTTOM);
        return pdfCell;
    }
    
    public static PdfPCell addTaxnameCell(String taxname, Font fontname) throws DocumentException {
        PdfPCell pdfCell = new PdfPCell(new Paragraph(taxname, fontname));
        pdfCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        pdfCell.setBorder(0);
        return pdfCell;
    }
    
    @Deprecated
    public static PdfPCell addCurrencyCell(String taxamount, String currencyid, authHandlerDAO authHandlerDAOObj, Font fontname) throws DocumentException {
        PdfPCell pdfCell = new PdfPCell(new Paragraph(authHandlerDAOObj.getFormattedCurrency((Double) Double.parseDouble(StringUtil.isNullOrEmpty(taxamount) ? "0.0" : taxamount), currencyid), fontname));
        pdfCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        pdfCell.setBorder(0);
        return pdfCell;
    }
    
    public static PdfPCell addCurrencyCell(String taxamount, String currencyid, authHandlerDAO authHandlerDAOObj, Font fontname, String companyid) throws DocumentException {
        PdfPCell pdfCell = new PdfPCell(new Paragraph(authHandlerDAOObj.getFormattedCurrency((Double) Double.parseDouble(StringUtil.isNullOrEmpty(taxamount) ? "0.0" : taxamount), currencyid, companyid), fontname));
        pdfCell.setHorizontalAlignment(Element.ALIGN_LEFT);
        pdfCell.setBorder(0);
        return pdfCell;
    }
  
    public static PdfPTable getBlankTable4Columns() throws DocumentException {
        PdfPTable table1 = new PdfPTable(4);
            table1.setWidthPercentage(100);
            table1.setWidths(new float[]{5, 55, 20, 20});
            return table1;
    }
    
    public static PdfPTable getBlankTableColumnsNotCompare(int column) throws DocumentException {
        PdfPTable table1 = new PdfPTable(column);
            table1.setWidthPercentage(100);
        if (column == 4) {
                table1.setWidths(new float[]{5, 55, 20, 0});
        } else if (column == 5) {
            table1.setWidths(new float[]{5, 50, 15, 15, 0});
        }
            return table1;
    }
    
    public static PdfPTable getBlankTable5Columns() throws DocumentException {
        PdfPTable table1 = new PdfPTable(5);
        table1.setWidthPercentage(100);
        table1.setWidths(new float[]{5, 50, 15, 15,15});
        return table1;
    }
    public static PdfPTable getBlankTable6Columns() throws DocumentException {
        PdfPTable table1 = new PdfPTable(6);
        table1.setWidthPercentage(100);
        table1.setWidths(new float[]{5, 30,20, 15, 15,15});
        return table1;
    }
    
    public static PdfPTable getBlankTable6Columns_Custom(ExtraCompanyPreferences extraCompanyPreferences) throws DocumentException {
        PdfPTable table1 = null;
        if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAccountCodeInFinancialReport()) {
            table1 = new PdfPTable(7);
            table1.setWidthPercentage(100);
            table1.setWidths(new float[]{5, 30, 15, 20, 17, 18, 5});
        } else {
            table1 = new PdfPTable(6);
            table1.setWidthPercentage(100);
            table1.setWidths(new float[]{5, 30, 20, 17, 18, 5});
        }
            return table1;
    }
    
    public static PdfPTable getBlankTable9Columns_Custom(ExtraCompanyPreferences extraCompanyPreferences) throws DocumentException {
        PdfPTable table1 =null;
        if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAccountCodeInFinancialReport()) {
            table1 = new PdfPTable(10);
            table1.setWidthPercentage(100);
            table1.setWidths(new float[]{1, 24, 10, 11, 11, 11, 11, 11, 11, 1});
        } else {
            table1 = new PdfPTable(9);
            table1.setWidthPercentage(100);
            table1.setWidths(new float[]{1, 24, 11, 11, 11, 11, 11, 11, 1});
        }
            return table1;
    }
    
    public static PdfPTable getBlankTable4Columns_Custom(ExtraCompanyPreferences extraCompanyPreferences) throws DocumentException {
        PdfPTable table1 = null;
        if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAccountCodeInFinancialReport()) {
            table1 = new PdfPTable(5);
        table1.setWidthPercentage(100);
        table1.setWidths(new float[]{10, 40, 15, 30, 10});
        } else {
            table1 = new PdfPTable(4);
            table1.setWidthPercentage(100);
            table1.setWidths(new float[]{10, 40, 30, 10});
        }
        return table1;
    }
    
    public static PdfPTable getDetailsTableForVRNet(authHandlerDAO authHandlerDAOObj, String salesPerson, Date entryDate,String invno, String dono, String porefno, String terms, String currencyid,DateFormat formatter) throws DocumentException {        
            PdfPTable shipToTable = new PdfPTable(2);
//            shipToTable.setWidthPercentage(100);
            shipToTable.setWidths(new float[]{40,60});

            PdfPCell cell2 = createCell("Ship To", fontSmallBold, Element.ALIGN_LEFT, Rectangle.BOX, 2);
            cell2.setBackgroundColor(Color.LIGHT_GRAY);
//            shipToTable.addCell(cell2);
            cell2 = createCell("Date:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT +Rectangle.TOP, 2);
            shipToTable.addCell(cell2);
            cell2 = createCell(formatter.format(entryDate), fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT+Rectangle.TOP, 2);
            shipToTable.addCell(cell2);
            
            cell2 = createCell("Invoice No:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
            shipToTable.addCell(cell2);
            cell2 = createCell(invno, fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT, 2);
            shipToTable.addCell(cell2);
            
            cell2 = createCell("DO No:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
            shipToTable.addCell(cell2);
            cell2 = createCell(dono, fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT, 2);
            shipToTable.addCell(cell2);
            
            cell2 = createCell("Customer PO:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
            shipToTable.addCell(cell2);
            cell2 = createCell(porefno, fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT, 2);
            shipToTable.addCell(cell2);
          
            cell2 = createCell("Sales Person:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
            shipToTable.addCell(cell2);
            cell2 = createCell(salesPerson, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.RIGHT, 2);
            shipToTable.addCell(cell2);
            
            cell2 = createCell("Terms:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
            shipToTable.addCell(cell2);
            cell2 = createCell(terms, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.RIGHT, 2);
            shipToTable.addCell(cell2);
            
            cell2 = createCell("Currency:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.BOTTOM, 2);
            cell2.setPaddingBottom(5);
            shipToTable.addCell(cell2);
           String currencyStr = authHandlerDAOObj.getCurrency(currencyid);
            if (!StringUtil.isNullOrEmpty(currencyStr)) {
                currencyStr = currencyStr.replace("(", "");
                currencyStr = currencyStr.replace(")", "");
            }
            cell2 = createCell(currencyStr, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.RIGHT+Rectangle.BOTTOM, 2);
            cell2.setPaddingBottom(5);
            shipToTable.addCell(cell2);
            return shipToTable;
   
    }
    
    public static PdfPTable getDetailsTableForVRNetQuotation(authHandlerDAO authHandlerDAOObj, String salesPerson, 
                Date entryDate,String invno, String refInvoiceNo, Date refInvoiceDate, String telNo, String fax,String email,
                DateFormat formatter, int mode) throws DocumentException {        
            PdfPTable shipToTable = new PdfPTable(2);
//            shipToTable.setWidthPercentage(100);
            shipToTable.setWidths(new float[]{40,60});

            PdfPCell cell2 = createCell("Date:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT +Rectangle.TOP, 2);
            shipToTable.addCell(cell2);
            cell2 = createCell(formatter.format(entryDate), fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT+Rectangle.TOP, 2);
            shipToTable.addCell(cell2);
            String billnolabel = "";
            switch(mode) {
                case StaticValues.AUTONUM_SALESORDER : 
                    billnolabel = "SO No:";
                    break;
                case StaticValues.AUTONUM_QUOTATION : 
                    billnolabel = "CQ No:";
                    break;
                case StaticValues.AUTONUM_CREDITNOTE : 
                    billnolabel = "CN No:";
                    break;
                case StaticValues.AUTONUM_DEBITNOTE : 
                    billnolabel = "DN No:";
                    break;
            }
            cell2 = createCell(billnolabel, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
            shipToTable.addCell(cell2);
            cell2 = createCell(invno, fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT, 2);
            shipToTable.addCell(cell2);
            
            if(mode==StaticValues.AUTONUM_CREDITNOTE || mode==StaticValues.AUTONUM_DEBITNOTE ) {
                cell2 = createCell("Ref Invoice No:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
                shipToTable.addCell(cell2);
                cell2 = createCell(refInvoiceNo, fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT, 2);
                shipToTable.addCell(cell2);
                
                cell2 = createCell("Ref Invoice Date:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
                shipToTable.addCell(cell2);
                cell2 = createCell(refInvoiceDate!=null ? formatter.format(refInvoiceDate) : "", fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT, 2);
                shipToTable.addCell(cell2);
            }
            cell2 = createCell("Tel No:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
            shipToTable.addCell(cell2);
            cell2 = createCell(telNo, fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT, 2);
            shipToTable.addCell(cell2);
            
            cell2 = createCell("Fax No:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
            shipToTable.addCell(cell2);
            cell2 = createCell(fax, fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT, 2);
            shipToTable.addCell(cell2);
          
            cell2 = createCell("Email:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT+Rectangle.BOTTOM , 2);
            shipToTable.addCell(cell2);
            cell2 = createCell(email, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.RIGHT+Rectangle.BOTTOM, 2);
            shipToTable.addCell(cell2);
            return shipToTable;
   
    }
    public static PdfPTable getAddressTable(String customerName, String billingAddress,String customerEmail,String billTo,String shipingAddress,boolean addShipTo) throws DocumentException {        
            PdfPTable addressMainTable = new PdfPTable(3);
            addressMainTable.setWidthPercentage(100);
            addressMainTable.setWidths(new float[]{50, 1, 49});
            int linegap=2;
            if(addShipTo)
                linegap=5;
            PdfPTable billToTable = new PdfPTable(1);
            billToTable.setWidthPercentage(100);
            billToTable.setWidths(new float[]{100});
           PdfPCell cell2=null; 
           if(addShipTo){ 
            cell2 = createCell(billTo, fontSmallBold, Element.ALIGN_LEFT, Rectangle.BOX, linegap);
            cell2.setBackgroundColor(Color.LIGHT_GRAY);
            }else{
            cell2 = createCell("Sold To:", fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT+Rectangle.TOP+Rectangle.LEFT, linegap);
//            cell2.setBackgroundColor(Color.LIGHT_GRAY);
}
            billToTable.addCell(cell2);
            cell2 = createCellAllowingChinese(customerName, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, linegap);
            billToTable.addCell(cell2);
            cell2 = createCellAllowingChinese(billingAddress, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, linegap);
            billToTable.addCell(cell2);
            cell2 = createCell(customerEmail, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 3);
            billToTable.addCell(cell2);
            cell2 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM, 3);
            billToTable.addCell(cell2);

            PdfPTable midTable = new PdfPTable(1);
            midTable.setWidthPercentage(100);
            midTable.setWidths(new float[]{100});

            PdfPTable shipToTable = new PdfPTable(1);
            shipToTable.setWidthPercentage(100);
            shipToTable.setWidths(new float[]{100});

            cell2 = createCell("Ship To", fontSmallBold, Element.ALIGN_LEFT, Rectangle.BOX, linegap);
            cell2.setBackgroundColor(Color.LIGHT_GRAY);
            shipToTable.addCell(cell2);
            cell2 = createCellAllowingChinese(customerName, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, linegap);
            shipToTable.addCell(cell2);
            cell2 = createCellAllowingChinese(shipingAddress, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT,linegap);
            shipToTable.addCell(cell2);
            cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 3);
            shipToTable.addCell(cell2);
            cell2 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM, 3);
            shipToTable.addCell(cell2);

            PdfPCell cell1 = new PdfPCell(billToTable);
            cell1.setBorder(0);
            addressMainTable.addCell(cell1);
            PdfPCell cel2 = new PdfPCell(midTable);
            cel2.setBorder(0);
            addressMainTable.addCell(cel2);
           if(addShipTo){ 
            PdfPCell cel3 = new PdfPCell(shipToTable);
            cel3.setBorder(0);
            addressMainTable.addCell(cel3);
           }
            return addressMainTable;
    }
    
     public static PdfPTable getAddressTableForVRnetPurchaseOrder(authHandlerDAO authHandlerDAOObj, String salesPerson, 
                Date entryDate,String invno, String refVQNo, String customerName, String billingAddress,
                String billTo,String shipingAddress, String terms, DateFormat formatter) throws DocumentException {
        int linegap=5;
        
        PdfPTable addressMainTable = new PdfPTable(3);
        addressMainTable.setWidthPercentage(100);
        addressMainTable.setWidths(new float[]{50, 1, 49}); 
         
         
        PdfPTable table1 = new PdfPTable(2); //for 2 column
        table1.setWidthPercentage(100);
        table1.setWidths(new float[]{50, 50});
        
        PdfPTable POLeftTable = new PdfPTable(2);
        POLeftTable.setWidths(new float[]{40,60});
        
        PdfPCell cell2=null; 
        cell2 = createCell("Date:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT +Rectangle.TOP, 2);
        POLeftTable.addCell(cell2);
        cell2 = createCell(formatter.format(entryDate), fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.TOP, 2);
        POLeftTable.addCell(cell2);
        
        cell2 = createCell("PO No:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
        POLeftTable.addCell(cell2);
        cell2 = createCell(invno, fontSmallRegular, Element.ALIGN_LEFT,  0, 2);
        POLeftTable.addCell(cell2);
        
        cell2 = createCell("Sales Person:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT , 2);
        POLeftTable.addCell(cell2);
        cell2 = createCell(salesPerson, fontSmallRegular, Element.ALIGN_LEFT, 0 , 2);
        POLeftTable.addCell(cell2);
        
        PdfPTable midTable = new PdfPTable(1);
        midTable.setWidthPercentage(100);
        cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.TOP, 2);
        midTable.addCell(cell2);
        midTable.setWidths(new float[]{100});
            
        PdfPTable PORightTable = new PdfPTable(2);
//        PORightTable.setWidthPercentage(100);
        PORightTable.setWidths(new float[]{40,60});
        
        cell2 = createCell("SO/VQ No:", fontSmallRegular, Element.ALIGN_LEFT,Rectangle.TOP, 2);
        PORightTable.addCell(cell2);
        cell2 = createCell(refVQNo, fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT+Rectangle.TOP, 2);
        PORightTable.addCell(cell2);
        
        cell2 = createCell("Terms:", fontSmallRegular, Element.ALIGN_LEFT, 0 , 2);
        PORightTable.addCell(cell2);
        cell2 = createCell(terms, fontSmallRegular, Element.ALIGN_LEFT,  Rectangle.RIGHT, 2);
        PORightTable.addCell(cell2);
        
        PdfPCell cell1 = new PdfPCell(POLeftTable);
        cell1.setBorder(0);
        addressMainTable.addCell(cell1);
        
        PdfPCell cel2 = new PdfPCell(midTable);
        cel2.setBorder(0);
        addressMainTable.addCell(cel2);

        PdfPCell cel3 = new PdfPCell(PORightTable);
        cel3.setBorder(0);
        addressMainTable.addCell(cel3);
           
        // add blank space 
        cel2 = new PdfPCell(midTable);
        cel2.setBorder(0);
        addressMainTable.addCell(cel2);
        cel2 = new PdfPCell(midTable);
        cel2.setBorder(0);
        addressMainTable.addCell(cel2);
        cel2 = new PdfPCell(midTable);
        cel2.setBorder(0);
        addressMainTable.addCell(cel2);
        // END blank space 
        
        
        PdfPTable billToTable = new PdfPTable(1);
        billToTable.setWidthPercentage(100);
        billToTable.setWidths(new float[]{100});

        cell2 = createCell("Sold To:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.RIGHT + Rectangle.TOP + Rectangle.LEFT, linegap);

        billToTable.addCell(cell2);
        cell2 = createCell(customerName, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, linegap);
        billToTable.addCell(cell2);
        cell2 = createCell(billingAddress, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, linegap);
        billToTable.addCell(cell2);
        cell2 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM, 3);
        billToTable.addCell(cell2);

        PdfPTable shipToTable = new PdfPTable(1);
        shipToTable.setWidthPercentage(100);
        shipToTable.setWidths(new float[]{100});

        cell2 = createCell("Ship To:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.RIGHT + Rectangle.TOP + Rectangle.LEFT, linegap);
        shipToTable.addCell(cell2);
        cell2 = createCell(customerName, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, linegap);
        shipToTable.addCell(cell2);
        cell2 = createCell(shipingAddress, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, linegap);
        shipToTable.addCell(cell2);
        cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 3);
        shipToTable.addCell(cell2);
        cell2 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM, 3);
        shipToTable.addCell(cell2);

        cell1 = new PdfPCell(billToTable);
        cell1.setBorder(0);
        addressMainTable.addCell(cell1);
        
        midTable = new PdfPTable(1);
        cel2 = new PdfPCell(midTable);
        cel2.setBorder(0);
        addressMainTable.addCell(cel2);
         
        cel3 = new PdfPCell(shipToTable);
        cel3.setBorder(0);
        addressMainTable.addCell(cel3);
         
        return addressMainTable;
    }
     
    public static PdfPTable getSupplierAddress(String customerName, String supplierAddr,String customerEmail,String Supplier)throws DocumentException{
            PdfPTable addressMainTable = new PdfPTable(2);
            addressMainTable.setWidthPercentage(100);
            addressMainTable.setWidths(new float[]{50,50});
            int linegap=2;
            
            PdfPTable supplierTable = new PdfPTable(1);
            supplierTable.setWidthPercentage(100);
            supplierTable.setWidths(new float[]{100});
            PdfPCell cell=null; 
            
            cell= createCell(Supplier, fontSmallBold, Element.ALIGN_LEFT, Rectangle.BOX, 5);
            cell.setBackgroundColor(Color.LIGHT_GRAY);
            supplierTable.addCell(cell);
            cell = createCellAllowingChinese(customerName, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, linegap);
            supplierTable.addCell(cell);
            cell = createCellAllowingChinese(supplierAddr, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, linegap);
            supplierTable.addCell(cell);
            cell = createCell(customerEmail, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 3);
            supplierTable.addCell(cell);
            cell = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM, 3);
            supplierTable.addCell(cell);

            PdfPTable blankTable = new PdfPTable(1);
            blankTable.setWidthPercentage(100);
            blankTable.setWidths(new float[]{100});
            
            PdfPCell cell1 = new PdfPCell(supplierTable);
            cell1.setBorder(0);
            addressMainTable.addCell(cell1);
          
            PdfPCell cel2 = new PdfPCell(blankTable);
            cel2.setBorder(0);
            addressMainTable.addCell(cel2);
          
            return addressMainTable;
    }

    public static PdfPTable getRowTableForBCHL(String header, String data) throws DocumentException {
        PdfPTable rowTable = new PdfPTable(2);
        rowTable.setWidthPercentage(100);
        rowTable.setWidths(new float[]{30, 70});
        PdfPCell cell2 = createCell(header, fontSmallBold, Element.ALIGN_LEFT, Rectangle.LEFT+Rectangle.RIGHT, 2);
        cell2.setBorder(0);
        cell2.setPaddingLeft(5);
        rowTable.addCell(cell2);
        cell2 = createCell(data, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT+Rectangle.RIGHT, 2);
        cell2.setBorder(0);
        rowTable.addCell(cell2);
        return rowTable;

    }
    public static PdfPTable getAddressTableForBCHL(accPurchaseOrderDAO accPurchaseOrderobj, String customerName, String billingAddress, String customerEmail, PurchaseOrder pOrder,String currencyid) throws DocumentException {
        PdfPTable addressMainTable = new PdfPTable(2);
        try {

            addressMainTable.setWidthPercentage(100);
            addressMainTable.setWidths(new float[]{50, 50});

            String poyourref = "";
            String podelyterm = "";
            String podelydate = "";
            String poinvoiceto = "";
            String podept = "";
            String porequestor = "";
            String poproject = "";
            String pomerno = "";
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("poid", pOrder.getID());
            requestParams.put("companyid", pOrder.getCompany().getCompanyID());

            PdfPTable billToTable = new PdfPTable(1);
            billToTable.setWidthPercentage(100);
            billToTable.setWidths(new float[]{100});

            PdfPTable rowTable = getRowTableForBCHL("TO:", billingAddress);
            PdfPCell cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT + Rectangle.TOP);
            billToTable.addCell(cell11);

            rowTable = getRowTableForBCHL("TEL:", pOrder.getVendor() != null ? pOrder.getVendor().getContactNumber() : "");
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
            billToTable.addCell(cell11);

            rowTable = getRowTableForBCHL("ATTN:", pOrder.getVendor() != null ? pOrder.getVendor().getContactperson() : "");
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
            billToTable.addCell(cell11);


            KwlReturnObject idresult = null;
            idresult = accPurchaseOrderobj.getPurchaseOrderOtherDetails(requestParams);
            Iterator itr = idresult.getEntityList().iterator();
            while (itr.hasNext()) {
                POOtherDetails poData = (POOtherDetails) itr.next();
                JSONObject obj = new JSONObject();
                poyourref = poData.getPoyourref();
                podelyterm = poData.getPodelyterm();
                podelydate = poData.getPodelydate();
                poinvoiceto = poData.getPoinvoiceto();
                podept = poData.getPodept();
                porequestor = poData.getPorequestor();
                poproject = poData.getPoproject();
                pomerno = poData.getPomerno();
            }


            rowTable = getRowTableForBCHL("YOUR REF:", poyourref);
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
            billToTable.addCell(cell11);

            rowTable = getRowTableForBCHL("DELY DATE:", podelydate);
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
            billToTable.addCell(cell11);

            rowTable = getRowTableForBCHL("DELY TERMS:", podelyterm);
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
            billToTable.addCell(cell11);

            rowTable = getRowTableForBCHL("INVOICE TO:", poinvoiceto);
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
            billToTable.addCell(cell11);

            rowTable = getRowTableForBCHL("PAYMENT TERMS:", pOrder.getVendor() != null ? pOrder.getVendor().getDebitTerm().getTermname() : "");
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
            billToTable.addCell(cell11);

            rowTable = getRowTableForBCHL("CURRENCY:",pOrder.getVendor() != null ? pOrder.getVendor().getAccount().getCurrency().getCurrencyCode(): "");
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
            billToTable.addCell(cell11);

            rowTable = getRowTableForBCHL("COST CODE:",  pOrder.getCostcenter()!= null ? pOrder.getCostcenter().getName() : "");
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM);
            billToTable.addCell(cell11);

            PdfPTable midTable = new PdfPTable(1);
            midTable.setWidthPercentage(100);
            midTable.setWidths(new float[]{100});

            PdfPTable shipToTable = new PdfPTable(1);
            shipToTable.setWidthPercentage(100);
            shipToTable.setWidths(new float[]{100});

            rowTable = getRowTableForBCHL("PROJECT:", poproject);
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT + Rectangle.TOP);
            shipToTable.addCell(cell11);

            rowTable = getRowTableForBCHL("DEPT:", podept);
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
            shipToTable.addCell(cell11);

            rowTable = getRowTableForBCHL("REQUESTOR:", porequestor);
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
            shipToTable.addCell(cell11);

            rowTable = getRowTableForBCHL("MER NO:", pomerno);
            cell11 = new PdfPCell(rowTable);
            cell11.setBorder(Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM);
            shipToTable.addCell(cell11);

            PdfPCell cell1 = new PdfPCell(billToTable);
            cell1.setBorder(0);
            addressMainTable.addCell(cell1);
            PdfPCell cel3 = new PdfPCell(shipToTable);
            cel3.setBorder(0);
            addressMainTable.addCell(cel3);


        } catch (ServiceException ex) {
            Logger.getLogger(ExportRecord.class.getName()).log(Level.SEVERE, null, ex);
        }
        return addressMainTable;
    }
    
        
    public static PdfPTable getDateTable(Date entryDate,String invno,String theader,DateFormat formatter) throws DocumentException {
        PdfPTable tab4 = new PdfPTable(2);
        tab4.setWidthPercentage(100);
        tab4.setWidths(new float[]{70,70});

        PdfPCell cell2 = createCell("Date", fontSmallBold, Element.ALIGN_CENTER, Rectangle.BOX, 5);
        tab4.addCell(cell2);
        cell2 = createCell(formatter.format(entryDate), fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
        tab4.addCell(cell2);
        
        cell2 = createCell(theader + " No.", fontSmallBold, Element.ALIGN_CENTER, Rectangle.BOX, 5);        
        tab4.addCell(cell2);

        cell2 = createCell(invno, fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
        tab4.addCell(cell2);
        
        
        /*Added blank row for height adjustment of other rows*/
        cell2 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, 0, 0);
        tab4.addCell(cell2);
        
        
        cell2 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, 0, 0);
        tab4.addCell(cell2);
        
        return tab4;
    }
    public static PdfPTable getDateTable2(Date entryDate,String invno,String theader,DateFormat formatter,PdfPCell invCell) throws DocumentException {
        PdfPTable tab4 = new PdfPTable(2);
        tab4.setWidthPercentage(100);
        tab4.setWidths(new float[]{70, 50});       
        invCell.setColspan(2);
        tab4.addCell(invCell);
        PdfPCell cell2 = createCell("Date", fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);
        tab4.addCell(cell2);
        cell2.setColspan(2);

        cell2 = createCell(formatter.format(entryDate), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.BOX, 5);
        tab4.addCell(cell2);
        
        cell2 = createCell(theader + " No.", fontSmallBold, Element.ALIGN_RIGHT, Rectangle.BOX, 5);        
        tab4.addCell(cell2);

        cell2 = createCell(invno, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.BOX, 5);
        tab4.addCell(cell2);
        
        
        /*Added blank row for height adjustment of other rows*/
        cell2 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, 0, 0);
        tab4.addCell(cell2);
        
        
        cell2 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, 0, 0);
        tab4.addCell(cell2);
        
        return tab4;
    }
    
    public static PdfPTable getDateTableWithJobIDforVHQ(Date entryDate,String invno,String theader,DateFormat formatter,PdfPCell invCell, String jobNumber) throws DocumentException {
        PdfPTable tab4 = new PdfPTable(2);
        tab4.setWidthPercentage(100);
        tab4.setWidths(new float[]{52, 48});       
        invCell.setColspan(2);
         tab4.addCell(invCell);
        PdfPCell cell2 = createCell("Date", fontSmallBold, Element.ALIGN_CENTER, Rectangle.BOX, 5);
        tab4.addCell(cell2);
        cell2.setColspan(2);

        cell2 = createCell(formatter.format(entryDate), fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
        tab4.addCell(cell2);
        
        cell2 = createCell(theader + " No.", fontSmallBold, Element.ALIGN_CENTER, Rectangle.BOX, 5);        
        tab4.addCell(cell2);

        cell2 = createCell(invno, fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
        tab4.addCell(cell2);
        
        cell2 = createCell("Job Number", fontSmallBold, Element.ALIGN_CENTER, Rectangle.BOX, 5);        
        tab4.addCell(cell2);

        cell2 = createCell(jobNumber, fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
        tab4.addCell(cell2);
        
        /*Added blank row for height adjustment of other rows*/
        cell2 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, 0, 0);
        tab4.addCell(cell2);
        
        
        cell2 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, 0, 0);
        tab4.addCell(cell2);
        
        return tab4;
    }
    
    public static PdfPTable getDetailsTable(String[] headers,String poRefno, String terms,Date dueDate,Date shipDate,DateFormat formatter,Boolean cellInclude, String shipvia, String fob) throws DocumentException {
        PdfPTable detailsTable;
        if(cellInclude){
            detailsTable = new PdfPTable(6);
            detailsTable.setWidthPercentage(100);
            detailsTable.setWidths(new float[]{18, 16, 16, 16, 16, 18});
             if(headers.length==5){
                detailsTable = new PdfPTable(5);
                detailsTable.setWidthPercentage(100);
                detailsTable.setWidths(new float[]{18, 16, 16, 16, 16});
            }
        }else{
            detailsTable = new PdfPTable(5);
            detailsTable.setWidthPercentage(100);
            detailsTable.setWidths(new float[]{20,20,20,20,20});
            if(headers.length==5){
                detailsTable = new PdfPTable(4);
                detailsTable.setWidthPercentage(100);
                detailsTable.setWidths(new float[]{25, 25, 25, 25});
            }
        }  
                      
        PdfPCell pocell = null;
        for (int i = 0; i < headers.length; i++) {
            if(i==0 && !cellInclude){
                continue;
            }
            pocell = new PdfPCell(new Paragraph(headers[i], fontSmallBold));
            pocell.setHorizontalAlignment(Element.ALIGN_CENTER);
            pocell.setBorder(Rectangle.BOX);
            pocell.setPadding(3);
            detailsTable.addCell(pocell);
        }

        PdfPCell cell3;
        if(cellInclude){
             cell3= createCell(poRefno, fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
            detailsTable.addCell(cell3);
            }

            cell3 = createCell(terms, fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
            detailsTable.addCell(cell3);
            if (headers.length != 5) {
                cell3 = createCell((dueDate != null) ? formatter.format(dueDate) : "", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
                detailsTable.addCell(cell3);
            }

            cell3 = createCell((shipDate != null) ? formatter.format(shipDate) : "", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
            detailsTable.addCell(cell3);

            cell3 = createCell(shipvia, fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
            detailsTable.addCell(cell3);

            cell3 = createCell(fob, fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
            detailsTable.addCell(cell3);

        return detailsTable;
    }
    
    // Table for terms, due date,Sales person Name of VRnet Company customer invoice
    public static PdfPTable getDetailsTableForVRNET(String[] headers,String poRefno, String terms,Date dueDate,DateFormat formatter,String salesPerson) throws DocumentException {
        PdfPTable detailsTable;              
        detailsTable = new PdfPTable(3);
        detailsTable.setWidthPercentage(100);
        detailsTable.setWidths(new float[]{25, 25, 50}); 
        PdfPCell pocell = null;
        for (int i = 0; i < headers.length; i++) {
            pocell = new PdfPCell(new Paragraph(headers[i], fontSmallBold));
            pocell.setHorizontalAlignment(Element.ALIGN_CENTER);
            pocell.setBorder(Rectangle.BOX);
            pocell.setPadding(3);
            detailsTable.addCell(pocell);
        }
        PdfPCell cell3;
            cell3 = createCell(terms, fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
            detailsTable.addCell(cell3);
            cell3 = createCell((dueDate != null) ? formatter.format(dueDate) : "", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
            detailsTable.addCell(cell3);
            cell3 = createCell(salesPerson, fontSmallRegular, Element.ALIGN_CENTER, Rectangle.BOX, 5);
            detailsTable.addCell(cell3);

        return detailsTable;
    }
    
    
    public static PdfPTable getDiscountRowTable(authHandlerDAO authHandlerDAOObj, PdfPTable table, String currencyid, Discount discount, double discountQuotation,int mode,String linkHeader) throws DocumentException {
        PdfPCell invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        if(!linkHeader.equalsIgnoreCase(""))
        {
            invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            table.addCell(invcell);
        }    
         
        invcell = createCell("Discount", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        if (mode == StaticValues.AUTONUM_QUOTATION || mode == StaticValues.AUTONUM_VENQUOTATION || mode == StaticValues.AUTONUM_PURCHASEORDER || mode == StaticValues.AUTONUM_SALESORDER || mode == StaticValues.AUTONUM_BILLINGPURCHASEORDER || mode == StaticValues.AUTONUM_BILLINGSALESORDER) {
            invcell = ExportRecordHandler.calculateDiscount(authHandlerDAOObj ,discountQuotation, currencyid);
        } else {
            invcell = ExportRecordHandler.calculateDiscount(authHandlerDAOObj ,discount, currencyid);
        }
        invcell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        invcell.setPadding(5);
        invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
        table.addCell(invcell);
        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);
        
        return table;
    }
    
    public static PdfPTable getDiscountRowTable(authHandlerDAO authHandlerDAOObj, PdfPTable table, String currencyid, Discount discount, int mode, String linkHeader, double partialDiscount, String companyID) throws DocumentException {
        PdfPCell invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        if (!linkHeader.equalsIgnoreCase("")) {
            invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            table.addCell(invcell);
        }

        invcell = createCell("Discount", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        invcell = ExportRecordHandler.calculatePartialDiscount(authHandlerDAOObj, discount, currencyid, partialDiscount, companyID);

        invcell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        invcell.setPadding(5);
        invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
        table.addCell(invcell);
        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        return table;
    }
    
    public static PdfPTable getDiscountRowTableForVRNet(authHandlerDAO authHandlerDAOObj, PdfPTable table, String currencyid,
            Discount discount, double discountQuotation,int mode,String linkHeader, int customCols, String companyid) throws DocumentException {
        PdfPCell invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

//        if(!linkHeader.equalsIgnoreCase(""))
//        {
//            invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
//            table.addCell(invcell);
//        }    
        
         
        invcell = createCell("Discount", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);
        
        for(int cnt=0; cnt<customCols; cnt++){
            invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            table.addCell(invcell);
        }

        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);
        
        if (mode == StaticValues.AUTONUM_QUOTATION || mode == StaticValues.AUTONUM_VENQUOTATION || mode == StaticValues.AUTONUM_PURCHASEORDER || mode == StaticValues.AUTONUM_SALESORDER || mode == StaticValues.AUTONUM_BILLINGPURCHASEORDER || mode == StaticValues.AUTONUM_BILLINGSALESORDER) {
            invcell = ExportRecordHandler.calculateDiscount(authHandlerDAOObj ,discountQuotation, currencyid, companyid);
        } else {
            invcell = ExportRecordHandler.calculateVRNetDiscount(authHandlerDAOObj ,discount, currencyid, true, companyid);
        }
        invcell.setHorizontalAlignment(Element.ALIGN_RIGHT);
        invcell.setPadding(5);
        invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
        table.addCell(invcell);
        
        return table;
    }
    
    public static String getReferenceNumber(List list,int mode) {
        String refNumber="";
        Iterator itr=list.iterator();
        while(itr.hasNext()){
            if(mode == StaticValues.AUTONUM_DELIVERYORDER ) {
                DeliveryOrderDetail row = (DeliveryOrderDetail) itr.next();
                refNumber=(row.getSodetails()!=null)?row.getSodetails().getSalesOrder().getSalesOrderNumber():(row.getCidetails()!=null)?row.getCidetails().getInvoice().getInvoiceNumber():"";                
                if(!StringUtil.isNullOrEmpty(refNumber)){
                    break;
                }                    
            }else if(mode == StaticValues.AUTONUM_SALESRETURN ) {
                SalesReturnDetail row = (SalesReturnDetail) itr.next();
                refNumber=row.getDodetails()!= null?(row.getDodetails().getDeliveryOrder().getDeliveryOrderNumber()):(row.getCidetails()!= null?row.getCidetails().getInvoice().getInvoiceNumber():"");               
                if(!StringUtil.isNullOrEmpty(refNumber)){
                    break;
                }                    
            }else if(mode == StaticValues.AUTONUM_PURCHASERETURN ) {
                PurchaseReturnDetail row = (PurchaseReturnDetail) itr.next();
                refNumber=row.getGrdetails()!= null?(row.getGrdetails().getGrOrder().getGoodsReceiptOrderNumber()):(row.getVidetails()!= null?row.getVidetails().getGoodsReceipt().getGoodsReceiptNumber():"");                
                if(!StringUtil.isNullOrEmpty(refNumber)){
                    break;
                }                    
            }else if(mode == StaticValues.AUTONUM_GOODSRECEIPTORDER) {
                GoodsReceiptOrderDetails row = (GoodsReceiptOrderDetails) itr.next();
                refNumber=(row.getPodetails()!=null)?row.getPodetails().getPurchaseOrder().getPurchaseOrderNumber():(row.getVidetails()!=null)?row.getVidetails().getGoodsReceipt().getGoodsReceiptNumber():"";                
                if(!StringUtil.isNullOrEmpty(refNumber)){
                    break;
                } 
            }else if (mode == StaticValues.AUTONUM_INVOICE) {
                InvoiceDetail row = (InvoiceDetail) itr.next();
                refNumber=(row.getSalesorderdetail()!=null)?row.getSalesorderdetail().getSalesOrder().getSalesOrderNumber():(row.getDeliveryOrderDetail()!=null)?row.getDeliveryOrderDetail().getDeliveryOrder().getDeliveryOrderNumber():"";                
                if(!StringUtil.isNullOrEmpty(refNumber)){
                    break;
                }
            }else if(mode == StaticValues.AUTONUM_BILLINGINVOICE){
                BillingInvoiceDetail row = (BillingInvoiceDetail) itr.next();
                refNumber=(row.getSalesOrderDetail()!=null)?row.getSalesOrderDetail().getSalesOrder().getSalesOrderNumber():"";                
                if(!StringUtil.isNullOrEmpty(refNumber)){
                    break;
                }
            }else if(mode == StaticValues.AUTONUM_GOODSRECEIPT){
                GoodsReceiptDetail row = (GoodsReceiptDetail) itr.next();
                refNumber=(row.getPurchaseorderdetail()!=null)?row.getPurchaseorderdetail().getPurchaseOrder().getPurchaseOrderNumber():(row.getGoodsReceiptOrderDetails()!=null)?row.getGoodsReceiptOrderDetails().getGrOrder().getGoodsReceiptOrderNumber():"";                
                if(!StringUtil.isNullOrEmpty(refNumber)){
                    break;
                }
            }else if(mode == StaticValues.AUTONUM_BILLINGGOODSRECEIPT){
                BillingGoodsReceiptDetail row = (BillingGoodsReceiptDetail) itr.next();
                refNumber=(row.getPurchaseOrderDetail()!=null)?row.getPurchaseOrderDetail().getPurchaseOrder().getPurchaseOrderNumber():"";                
                if(!StringUtil.isNullOrEmpty(refNumber)){
                    break;
                }
            }else{
                    break;  
            }
        }    
        return refNumber;
    }   
    
    /*
     * rowTaxAmount - rowTaxAmount has been added. because the tax amount field has been made editable in JS. 
     * so now calculation of row tax will be took place according to tax amount entered, either after selection of particular tax from tax combo, or by entering it manually.
     */
    
    public static PdfPTable getTaxRowTable(authHandlerDAO authHandlerDAOObj, PdfPTable table, String rowTaxName,String currencyid, double amount1, double rowTaxPercent, int mode,String linkHeader,double rowTaxAmount) throws DocumentException {
        PdfPCell invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        if(!linkHeader.equalsIgnoreCase(""))
        {
            invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            table.addCell(invcell);
        }
        
        invcell = createCell(rowTaxName + "  Tax", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);
        
        double taxamount=rowTaxAmount;//amount1 * rowTaxPercent / 100;
        //authHandlerDAOObj.getFormattedCurrency(amount1 * rowTaxPercent / 100, "")
        invcell = createCell(getFormattedAmount(taxamount), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);
        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);
        
        return table;
    }
//    /*
//     * Following method is modification of -
//     * getTaxRowTable(authHandlerDAO authHandlerDAOObj, PdfPTable table, String rowTaxName,String currencyid, double amount1, double rowTaxPercent, int mode,String linkHeader) method.
//     * in this method one extra parameter --> rowTaxAmount has been added. because the tax amount field has been made editable in JS. 
//     * so now calculation of row tax will be took place according to tax amount entered, either after selection of particular tax from tax combo, or by entering it manually.
//     */
//    public static PdfPTable getTaxRowTableNew(authHandlerDAO authHandlerDAOObj, PdfPTable table, String rowTaxName,String currencyid, double amount1, double rowTaxPercent, int mode,String linkHeader, double rowTaxAmount) throws DocumentException {
//        PdfPCell invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
//        table.addCell(invcell);
//
//        if(!linkHeader.equalsIgnoreCase(""))
//        {
//            invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
//            table.addCell(invcell);
//        }
//        
//        invcell = createCell(rowTaxName + "  Tax", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
//        table.addCell(invcell);
//
//        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
//        table.addCell(invcell);
//
//        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
//        table.addCell(invcell);
//        
//        DecimalFormat df = new DecimalFormat("#,##0.00");
//        double taxamount=rowTaxAmount;//amount1 * rowTaxPercent / 100;
//        //authHandlerDAOObj.getFormattedCurrency(amount1 * rowTaxPercent / 100, "")
//        invcell = createCell(df.format(taxamount), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
//        table.addCell(invcell);
//        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
//        table.addCell(invcell);
//        
//        return table;
//    }

    public static PdfPTable getTaxRowTableForVRnet(authHandlerDAO authHandlerDAOObj, PdfPTable table, String rowTaxName,
            String currencyid, double amount1, double rowTaxPercent, int mode,String linkHeader, int customCols,double rowTaxAmount) throws DocumentException {
        PdfPCell invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

//        if(!linkHeader.equalsIgnoreCase(""))
//        {
//            invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
//            table.addCell(invcell);
//        }
//        
        invcell = createCell(rowTaxName + "  Tax", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        for(int cnt=0; cnt<customCols; cnt++){
            invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            table.addCell(invcell);
        }

        
        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);

        invcell = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);
        
        DecimalFormat df = new DecimalFormat("#,##0.00");
        double taxamount=rowTaxAmount;//amount1 * rowTaxPercent / 100;
        //authHandlerDAOObj.getFormattedCurrency(amount1 * rowTaxPercent / 100, "")
        invcell = createCell(df.format(taxamount), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 5);
        table.addCell(invcell);
        return table;
    }

    public static void generateReceiptPDF(authHandlerDAO authHandlerDAOObj, kwlCommonTablesDAO kwlCommonTablesDAOObj, ExportRecordBeans.EnglishNumberToWords EnglishNumberToWordsOjb, MessageSource messageSource, PdfPTable mainTable, HttpServletRequest request, Company companyObj, String logoPath, String currencyid, String receiptNumber, Date journalEntryDate, DateFormat formatter, String accname, String address, double amount, int mode, PayDetail PayDetail, String memo, JSONObject config, String AccountName, boolean iscontraentryflag,String preText,String baseUrl ,boolean ismanycrdb, HashMap<String, Object> hm) throws DocumentException, ServiceException {

        PdfPTable tab1 = null;
        PdfPTable tab2 = null;
        PdfPTable tab3 = null;
        PdfPTable blankTable = null;
        PdfPCell blankCell = null;
        PdfPCell invCell = null; 
        PdfPCell cell3 = null;
        String companyid = companyObj.getCompanyID();
        double advanceAmount=0;
        if(!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount")))
        advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
        boolean advanceFlag=false;
        if(!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag")))
        advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
        
        
        try {
            
            KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), currencyid);

//            config = new com.krawler.utils.json.base.JSONObject(pOrder.getTemplateid().getConfigstr());
            boolean isCompanyLogo = true;
            boolean isCompanyTemplateLogo = false;            
            
            if (config.has("showTemplateLogo") && config.getBoolean("showTemplateLogo")) {
                isCompanyTemplateLogo = true;
                isCompanyLogo = false;
            }                    
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = kwlCommonTablesDAOObj.getObject(ExtraCompanyPreferences.class.getName(), companyObj.getCompanyID());
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            
            String company[] = new String[4];
            company[0] = companyObj.getCompanyName();
            company[1] = companyObj.getAddress() != null ? StringUtil.serverHTMLStripper(companyObj.getAddress()) : "";
            company[2] = companyObj.getEmailID();
            company[3] = companyObj.getPhoneNumber();

            
            PdfPTable table1 = new PdfPTable(2);
            table1.setWidthPercentage(100);
            table1.setWidths(new float[]{25, 75});

            if (isCompanyTemplateLogo) {
                table1.setWidths(new float[]{75, 25});
                tab1 = ExportRecordHandler.addCompanyTemplateLogo(logoPath, companyObj);
            } else {
                table1.setWidths(new float[]{50, 50});
                if (isCompanyLogo) {
                    tab1 = ExportRecordHandler.addCompanyLogo(logoPath, companyObj);
                } else {
                    tab1 = new PdfPTable(1);
                }
            }
            
            tab2 = new PdfPTable(1);         

           String theader="";
         if(mode == StaticValues.AUTONUM_PAYMENT||mode == StaticValues.AUTONUM_BILLINGPAYMENT){
                theader = messageSource.getMessage("acc.numb.37", null,RequestContextUtils.getLocale(request)) ;          
            }
            else if(mode == StaticValues.AUTONUM_RECEIPT||mode == StaticValues.AUTONUM_BILLINGRECEIPT){
                theader=messageSource.getMessage("acc.recieptVoucher", null,RequestContextUtils.getLocale(request))  ;            
            }
            invCell=createCell(theader,fontTbl,Element.ALIGN_RIGHT,0,5);
//            invCell.setPaddingTop(-40);
            invCell.setPaddingBottom(10);
//            tab2.addCell(invCell);
            PdfPTable tab4 = ExportRecordHandler.getDateTable2(journalEntryDate,receiptNumber,theader,formatter,invCell); 
            
            PdfPTable userTable2 = new PdfPTable(2);
            userTable2.setWidthPercentage(100);
            if (!isCompanyTemplateLogo) {
                userTable2.setWidths(new float[]{60, 40});
                tab3 = ExportRecordHandler.getCompanyInfo(company);
            } else {
                userTable2.setWidths(new float[]{70, 30});
                tab3 = new PdfPTable(1);
            }
            
            PdfPCell cell1 = new PdfPCell(tab1);
            cell1.setBorder(0);
//            cell1.setPaddingLeft(-10);
            table1.addCell(cell1);
            PdfPCell cel2 = new PdfPCell(tab4);
            cel2.setBorder(0);
            table1.addCell(cel2);

            PdfPCell mainCell11 = new PdfPCell(table1);
            mainCell11.setBorder(0);
            mainCell11.setPadding(0);
            mainTable.addCell(mainCell11);

            cell1 = new PdfPCell(tab3);
            cell1.setBorder(0);
            cell1.setPaddingTop(-50);
            userTable2.addCell(cell1);
            cel2 = new PdfPCell();
            cel2.setBorder(0);
            userTable2.addCell(cel2);

            PdfPCell mainCell12 = new PdfPCell(userTable2);
            mainCell12.setBorder(0);                
            mainCell12.setPaddingTop(10);
            mainCell12.setPaddingLeft(0);
            mainCell12.setPaddingRight(10);
//            mainCell12.setPaddingBottom(-20);
            mainTable.addCell(mainCell12);

            if(!StringUtil.isNullOrEmpty(preText)){
                             ExportRecordHandler.getHtmlCell(preText.trim(),mainTable,baseUrl);
                    }
            
            blankTable = ExportRecordHandler.addBlankLine(1);
            blankCell = new PdfPCell(blankTable);
            blankCell.setBorder(0);
            mainTable.addCell(blankCell);
            tab2 = new PdfPTable(2);
            tab2.setWidthPercentage(100);
            tab2.setWidths(new float[]{75, 25});
            cell3 = new PdfPCell(new Paragraph(messageSource.getMessage("acc.report.2", null, RequestContextUtils.getLocale(request)), fontSmallBold));
            cell3.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell3.setBackgroundColor(Color.lightGray);
            cell3.setBorder(Rectangle.LEFT + Rectangle.BOTTOM + Rectangle.RIGHT);
            tab2.addCell(cell3);
            cell3 = new PdfPCell(new Paragraph(messageSource.getMessage("acc.rem.193", null, RequestContextUtils.getLocale(request)), fontSmallBold));
            cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell3.setBackgroundColor(Color.lightGray);
            cell3.setBorder(Rectangle.RIGHT + Rectangle.BOTTOM);
            tab2.addCell(cell3);
            if(ismanycrdb){  //acc.je.accDebit
                 List<String> debitAccountNameRow=null; 
                 List<String> creditAccountNameRow=null;
                 List<Double> debitAccountAmount=null;
                 List<Double> creditAccountAmount=null;
                 int craditDebitFlag=1;
                 
                         
                if (hm.containsKey("debitAccountNameRow")) {
                       debitAccountNameRow=(List<String>) hm.get("debitAccountNameRow");
                }
                if (hm.containsKey("debitAccountAmount")) {
                     debitAccountAmount =(List<Double>) hm.get("debitAccountAmount");
                }
                if (hm.containsKey("creditAccountNameRow")) {
                       creditAccountNameRow=(List<String>) hm.get("creditAccountNameRow");
                }
                if (hm.containsKey("creditAccountAmount")) {
                     creditAccountAmount =(List<Double>) hm.get("creditAccountAmount");
                }
                if (hm.containsKey("creditdebitflag")) {
                     craditDebitFlag =(Integer) hm.get("creditdebitflag");
                }
               
                for(int i=0;i< (craditDebitFlag==1 ? debitAccountNameRow.size():creditAccountNameRow.size());i++){
                        
                        if(i==0)
                        {
                            cell3 = createCell(messageSource.getMessage(craditDebitFlag==1 ? "acc.je.accDebit" : "acc.je.accCredit"  , null, RequestContextUtils.getLocale(request)) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                            tab2.addCell(cell3);
                            cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                            tab2.addCell(cell3);
                        }
                        cell3 = createCell(craditDebitFlag==1 ? debitAccountNameRow.get(i) : creditAccountNameRow.get(i), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(craditDebitFlag==1 ? debitAccountAmount.get(i) :creditAccountAmount.get(i), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                        tab2.addCell(cell3);
                        cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                        tab2.addCell(cell3);
                }
                
                for(int i=0;i<(craditDebitFlag==1 ? creditAccountNameRow.size():debitAccountNameRow.size()) ;i++)
                {     
                        if(i==0){
                            cell3 = createCell(messageSource.getMessage(craditDebitFlag==1 ? "acc.je.accCredit" :"acc.je.accDebit", null, RequestContextUtils.getLocale(request)) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                            tab2.addCell(cell3);
                            cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                            tab2.addCell(cell3);
                        }
                        cell3 = createCell(craditDebitFlag==1 ? creditAccountNameRow.get(i):debitAccountNameRow.get(i), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(craditDebitFlag==1 ? creditAccountAmount.get(i): debitAccountAmount.get(i), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                        tab2.addCell(cell3);
                        cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                        tab2.addCell(cell3);
                }
            }else{
                    cell3 = createCell(messageSource.getMessage("acc.je.acc", null, RequestContextUtils.getLocale(request)) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                    tab2.addCell(cell3);
                    cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                    tab2.addCell(cell3);
                    cell3 = createCell(accname, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                    cell3.setPaddingLeft(50);
                    tab2.addCell(cell3);
                    cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(amount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 15);
                    tab2.addCell(cell3);
                    cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                    cell3.setPaddingLeft(50);
                    tab2.addCell(cell3);
                    cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                    tab2.addCell(cell3);
            }
            
            if(advanceFlag)
            {
                cell3 = createCell("Advance"+ " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5); 
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(advanceAmount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT,  Rectangle.RIGHT, 15); 
                tab2.addCell(cell3);            
            }
            
 
            
            for (int i = 0; i < 10; i++) {
                cell3 = new PdfPCell(new Paragraph("", fontSmallRegular));
                cell3.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
                tab2.addCell(cell3);
            }
            if(!iscontraentryflag){
                cell3 = createCell(messageSource.getMessage("acc.numb.42", null, RequestContextUtils.getLocale(request)), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(mode != StaticValues.AUTONUM_BILLINGRECEIPT ? (PayDetail == null ? "Cash" : PayDetail.getPaymentMethod().getMethodName()) : (PayDetail == null ? "Cash" : PayDetail.getPaymentMethod().getMethodName()), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);            
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(mode != StaticValues.AUTONUM_BILLINGRECEIPT ? (PayDetail != null ? (PayDetail.getPaymentMethod().getMethodName().equals("Cheque") ? "Cheque No : " + PayDetail.getCheque().getChequeNo() + " and Bank Name : " + PayDetail.getCheque().getBankName() : "") : "")
                        : (PayDetail != null ? (PayDetail.getPaymentMethod().getMethodName().equals("Cheque") ? "Cheque No : " + PayDetail.getCheque().getChequeNo() + " and Bank Name : " + PayDetail.getCheque().getBankName() : "") : ""), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                String str = "";
                if (mode != StaticValues.AUTONUM_BILLINGRECEIPT) {
                    if (PayDetail != null) {
                        if (PayDetail.getPaymentMethod().getDetailType() == 2 || PayDetail.getPaymentMethod().getDetailType() == 1) {
                            if (PayDetail.getCard() != null) {
                                str = "Card No : " + (PayDetail.getCard().getCardNo()) + " and Card Holder : " + PayDetail.getCard().getCardHolder();
                            } else if (PayDetail.getCheque() != null) {
                                str = "Bank Name : " + StringUtil.DecodeText(PayDetail.getCheque().getBankName()) + " and Ref. No : " + (PayDetail.getCheque().getChequeNo());
                            }
                        }
                    }
                } else if (PayDetail != null) {
                    if (PayDetail.getPaymentMethod().getDetailType() == 2 || PayDetail.getPaymentMethod().getDetailType() == 1) {
                        if (PayDetail.getCard() != null) {
                            str = "Card No : " + (PayDetail.getCard().getCardNo()) + " and Card Holder : " + PayDetail.getCard().getCardHolder();
                        } else if (PayDetail.getCheque() != null) {
                            str = "Bank Name : " + StringUtil.DecodeText(PayDetail.getCheque().getBankName()) + " and Ref. No : " + (PayDetail.getCheque().getChequeNo());
                        }
                    }
                }


    //                mode!=StaticValues.AUTONUM_BILLINGRECEIPT?(rc.getPayDetail()!=null?(rc.getPayDetail().getPaymentMethod().getMethodName().equals("Credit Card")||customer.equals("Debit Card")?
    //                        rc.getPayDetail().getCard()!=null?"Card No : "+(rc.getPayDetail().getCard().getCardNo()+" and Card Holder : "+rc.getPayDetail().getCard().getCardHolder()):"":""):""):
    //                        (rc1.getPayDetail()!=null?(rc1.getPayDetail().getPaymentMethod().getMethodName().equals("Credit Card")||customer.equals("Debit Card")?
    //                        rc1.getPayDetail().getCard()!=null?"Card No : "+(rc1.getPayDetail().getCard().getCardNo()+" and Card Holder : "+rc1.getPayDetail().getCard().getCardHolder()):"":""):"")

                cell3 = createCell(str, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
            }
            cell3 = createCell(messageSource.getMessage("acc.numb.41", null, RequestContextUtils.getLocale(request)), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            cell3 = createCell(AccountName, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            cell3.setPaddingLeft(50);
            tab2.addCell(cell3);
            cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            if(!StringUtil.isNullOrEmpty(memo)){
                cell3 = createCell("Memo :", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell(memo, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);            
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
            }
            String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(amount)), currency,countryLanguageId, companyObj.getCompanyID());
            String currencyname = currency.getName();
            cell3 = createCell(messageSource.getMessage("acc.rem.177", null, RequestContextUtils.getLocale(request)) + " : " + currencyname + " " + netinword + " Only.", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM + Rectangle.TOP, 5);
            tab2.addCell(cell3);
            
            double totalAdvanceAmount=amount;
            if(advanceFlag){
                totalAdvanceAmount=amount+advanceAmount;
            }
            
            cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(totalAdvanceAmount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM + Rectangle.TOP, 5);
            tab2.addCell(cell3);
            PdfPCell mainCell5 = new PdfPCell(tab2);
            mainCell5.setBorder(1);
            mainTable.addCell(mainCell5);

            blankTable = ExportRecordHandler.addBlankLine(5);
            blankCell = new PdfPCell(blankTable);
            blankCell.setBorder(0);
            mainTable.addCell(blankCell);
            
            PdfPTable table3 = new PdfPTable(2); //for 2 column
            String username = sessionHandlerImpl.getUserName(request);
//            cell3 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
//            cell3.setPaddingLeft(10);
//            cell3.setPaddingTop(-10);
////                cell3.setPaddingBottom(30);
//            table3.addCell(cell3);
//            cell3 = createCell("ORDER ACCEPTANCE", fontSmallBold1, Element.ALIGN_CENTER, 0, 0);
//            cell3.setPaddingRight(10);
//            cell3.setPaddingTop(-10);
//            table3.addCell(cell3);

            cell3 = createCell("Receiver's ", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingTop(5);
//            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            cell3 = createCell("Authorized ", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingTop(5);
//            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            
            cell3 = createCell("Signature : ________________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingTop(5);
            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            cell3 = createCell("Signature : ________________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingTop(5);
            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            
            cell3 = createCell(messageSource.getMessage("acc.numb.39", null, RequestContextUtils.getLocale(request)) +" : ______________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(5);
            table3.addCell(cell3);
            cell3 = createCell(messageSource.getMessage("acc.numb.40", null, RequestContextUtils.getLocale(request))+" : _______________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(5);
//                cell3.setPaddingTop(-9);
            table3.addCell(cell3);
            
            PdfPCell mainCell63 = new PdfPCell(table3);
            mainCell63.setBorder(0);
            mainTable.addCell(mainCell63);
                
        } catch (Exception ex) {
            Logger.getLogger(ExportRecord.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
public static void generateReceiptPDFforVHQ(authHandlerDAO authHandlerDAOObj, kwlCommonTablesDAO kwlCommonTablesDAOObj, ExportRecordBeans.EnglishNumberToWords EnglishNumberToWordsOjb, MessageSource messageSource, PdfPTable mainTable, HttpServletRequest request, Company companyObj, String logoPath, String currencyid, String receiptNumber, Date journalEntryDate, DateFormat formatter, String accname, String address, double amount, int mode, PayDetail PayDetail, String memo, JSONObject config, String AccountName, boolean iscontraentryflag,String preText,String baseUrl ,boolean ismanycrdb, HashMap<String, Object> hm, String preparedBy) throws DocumentException, ServiceException {

        PdfPTable tab1 = null;
        PdfPTable tab2 = null;
        PdfPTable tab3 = null;
        PdfPTable blankTable = null;
        PdfPCell blankCell = null;
        PdfPCell invCell = null; 
        PdfPCell cell3 = null;
        String companyid = companyObj.getCompanyID();
        double advanceAmount=0;
        if(!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount")))
        advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
        boolean advanceFlag=false;
        if(!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag")))
        advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
        
        
        try {
            
            KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), currencyid);

//            config = new com.krawler.utils.json.base.JSONObject(pOrder.getTemplateid().getConfigstr());
            boolean isCompanyLogo = true;
            boolean isCompanyTemplateLogo = false;            
            
            if (config.has("showTemplateLogo") && config.getBoolean("showTemplateLogo")) {
                isCompanyTemplateLogo = true;
                isCompanyLogo = false;
            }                    
            
            String company[] = new String[4];
            company[0] = companyObj.getCompanyName();
            company[1] = companyObj.getAddress() != null ? StringUtil.serverHTMLStripper(companyObj.getAddress()) : "";
            company[2] = companyObj.getEmailID();
            company[3] = companyObj.getPhoneNumber();

            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = kwlCommonTablesDAOObj.getObject(ExtraCompanyPreferences.class.getName(), companyObj.getCompanyID());
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }

            PdfPTable table1 = new PdfPTable(2);
            table1.setWidthPercentage(100);
            table1.setWidths(new float[]{25, 75});

            if (isCompanyTemplateLogo) {
                table1.setWidths(new float[]{75, 25});
                tab1 = ExportRecordHandler.addCompanyTemplateLogoForVQH(logoPath, companyObj);
            } else {
                table1.setWidths(new float[]{50, 50});
                if (isCompanyLogo) {
                    tab1 = ExportRecordHandler.addCompanyLogo(logoPath, companyObj);
                } else {
                    tab1 = new PdfPTable(1);
                }
            }
            
            tab2 = new PdfPTable(1);         
        String theader="";
         if(mode == StaticValues.AUTONUM_PAYMENT||mode == StaticValues.AUTONUM_BILLINGPAYMENT){
                theader = messageSource.getMessage("acc.numb.37", null, RequestContextUtils.getLocale(request));            
            }
            else if(mode == StaticValues.AUTONUM_RECEIPT||mode == StaticValues.AUTONUM_BILLINGRECEIPT){
                theader=messageSource.getMessage("acc.recieptVoucher", null, RequestContextUtils.getLocale(request));               
            }
            invCell=createCell(theader,fontTbl,Element.ALIGN_RIGHT,0,5);
//            invCell.setPaddingTop(-40);
            invCell.setPaddingBottom(10);
//            tab2.addCell(invCell);
            PdfPTable tab4 = ExportRecordHandler.getDateTable2(journalEntryDate,receiptNumber,theader,formatter,invCell); 
            
            PdfPTable userTable2 = new PdfPTable(2);
            userTable2.setWidthPercentage(100);
            if (!isCompanyTemplateLogo) {
                userTable2.setWidths(new float[]{60, 40});
                tab3 = ExportRecordHandler.getCompanyInfo(company);
            } else {
                userTable2.setWidths(new float[]{70, 30});
                tab3 = new PdfPTable(1);
            }
            
            PdfPCell cell1 = new PdfPCell(tab1);
            cell1.setBorder(0);
//            cell1.setPaddingLeft(-10);
            table1.addCell(cell1);
            PdfPCell cel2 = new PdfPCell(tab4);
            cel2.setBorder(0);
            table1.addCell(cel2);

            PdfPCell mainCell11 = new PdfPCell(table1);
            mainCell11.setBorder(0);
            mainCell11.setPadding(0);
            mainTable.addCell(mainCell11);

            cell1 = new PdfPCell(tab3);
            cell1.setBorder(0);
            cell1.setPaddingTop(-50);
            userTable2.addCell(cell1);
            cel2 = new PdfPCell();
            cel2.setBorder(0);
            userTable2.addCell(cel2);

            PdfPCell mainCell12 = new PdfPCell(userTable2);
            mainCell12.setBorder(0);                
            mainCell12.setPaddingTop(10);
            mainCell12.setPaddingLeft(0);
            mainCell12.setPaddingRight(10);
//            mainCell12.setPaddingBottom(-20);
            mainTable.addCell(mainCell12);

            if(!StringUtil.isNullOrEmpty(preText)){
                             ExportRecordHandler.getHtmlCell(preText.trim(),mainTable,baseUrl);
                    }
            
            blankTable = ExportRecordHandler.addBlankLine(1);
            blankCell = new PdfPCell(blankTable);
            blankCell.setBorder(0);
            mainTable.addCell(blankCell);
            tab2 = new PdfPTable(2);
            tab2.setWidthPercentage(100);
            tab2.setWidths(new float[]{75, 25});
            cell3 = new PdfPCell(new Paragraph(messageSource.getMessage("acc.report.2", null, RequestContextUtils.getLocale(request)), fontSmallBold));
            cell3.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell3.setBackgroundColor(Color.lightGray);
            cell3.setBorder(Rectangle.LEFT + Rectangle.BOTTOM + Rectangle.RIGHT);
            tab2.addCell(cell3);
            cell3 = new PdfPCell(new Paragraph(messageSource.getMessage("acc.rem.193", null, RequestContextUtils.getLocale(request)), fontSmallBold));
            cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell3.setBackgroundColor(Color.lightGray);
            cell3.setBorder(Rectangle.RIGHT + Rectangle.BOTTOM);
            tab2.addCell(cell3);
            if(ismanycrdb){  //acc.je.accDebit
                 List<String> debitAccountNameRow=null; 
                 List<String> creditAccountNameRow=null;
                 List<Double> debitAccountAmount=null;
                 List<Double> creditAccountAmount=null;
                 int craditDebitFlag=1;
                 
                         
                if (hm.containsKey("debitAccountNameRow")) {
                       debitAccountNameRow=(List<String>) hm.get("debitAccountNameRow");
                }
                if (hm.containsKey("debitAccountAmount")) {
                     debitAccountAmount =(List<Double>) hm.get("debitAccountAmount");
                }
                if (hm.containsKey("creditAccountNameRow")) {
                       creditAccountNameRow=(List<String>) hm.get("creditAccountNameRow");
                }
                if (hm.containsKey("creditAccountAmount")) {
                     creditAccountAmount =(List<Double>) hm.get("creditAccountAmount");
                }
                if (hm.containsKey("creditdebitflag")) {
                     craditDebitFlag =(Integer) hm.get("creditdebitflag");
                }
               
                for(int i=0;i< (craditDebitFlag==1 ? debitAccountNameRow.size():creditAccountNameRow.size());i++){
                        
                        if(i==0)
                        {
                            cell3 = createCell(messageSource.getMessage(craditDebitFlag==1 ? "acc.je.accDebit" : "acc.je.accCredit"  , null, RequestContextUtils.getLocale(request)) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                            tab2.addCell(cell3);
                            cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                            tab2.addCell(cell3);
                        }
                        cell3 = createCell(craditDebitFlag==1 ? debitAccountNameRow.get(i) : creditAccountNameRow.get(i), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(craditDebitFlag==1 ? debitAccountAmount.get(i) :creditAccountAmount.get(i), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                        tab2.addCell(cell3);
                        cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                        tab2.addCell(cell3);
                }
                
                for(int i=0;i<(craditDebitFlag==1 ? creditAccountNameRow.size():debitAccountNameRow.size()) ;i++)
                {     
                        if(i==0){
                            cell3 = createCell(messageSource.getMessage(craditDebitFlag==1 ? "acc.je.accCredit" :"acc.je.accDebit", null, RequestContextUtils.getLocale(request)) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                            tab2.addCell(cell3);
                            cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                            tab2.addCell(cell3);
                        }
                        cell3 = createCell(craditDebitFlag==1 ? creditAccountNameRow.get(i):debitAccountNameRow.get(i), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(craditDebitFlag==1 ? creditAccountAmount.get(i): debitAccountAmount.get(i), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                        tab2.addCell(cell3);
                        cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                        tab2.addCell(cell3);
                }
            }else{
                    cell3 = createCell(messageSource.getMessage("acc.je.acc", null, RequestContextUtils.getLocale(request)) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                    tab2.addCell(cell3);
                    cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                    tab2.addCell(cell3);
                    cell3 = createCell(accname, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                    cell3.setPaddingLeft(50);
                    tab2.addCell(cell3);
                    cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(amount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 15);
                    tab2.addCell(cell3);
                    cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                    cell3.setPaddingLeft(50);
                    tab2.addCell(cell3);
                    cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                    tab2.addCell(cell3);
            }
            
            if(advanceFlag)
            {
                cell3 = createCell("Advance"+ " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5); 
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(advanceAmount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT,  Rectangle.RIGHT, 15); 
                tab2.addCell(cell3);            
            }
            
 
            
            for (int i = 0; i < 10; i++) {
                cell3 = new PdfPCell(new Paragraph("", fontSmallRegular));
                cell3.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
                tab2.addCell(cell3);
            }
            if(!iscontraentryflag){
                cell3 = createCell(messageSource.getMessage("acc.numb.42", null, RequestContextUtils.getLocale(request)), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(mode != StaticValues.AUTONUM_BILLINGRECEIPT ? (PayDetail == null ? "Cash" : PayDetail.getPaymentMethod().getMethodName()) : (PayDetail == null ? "Cash" : PayDetail.getPaymentMethod().getMethodName()), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);            
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(mode != StaticValues.AUTONUM_BILLINGRECEIPT ? (PayDetail != null ? (PayDetail.getPaymentMethod().getMethodName().equals("Cheque") ? "Cheque No : " + PayDetail.getCheque().getChequeNo() + " and Bank Name : " + PayDetail.getCheque().getBankName() : "") : "")
                        : (PayDetail != null ? (PayDetail.getPaymentMethod().getMethodName().equals("Cheque") ? "Cheque No : " + PayDetail.getCheque().getChequeNo() + " and Bank Name : " + PayDetail.getCheque().getBankName() : "") : ""), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                String str = "";
                if (mode != StaticValues.AUTONUM_BILLINGRECEIPT) {
                    if (PayDetail != null) {
                        if (PayDetail.getPaymentMethod().getDetailType() == 2 || PayDetail.getPaymentMethod().getDetailType() == 1) {
                            if (PayDetail.getCard() != null) {
                                str = "Card No : " + (PayDetail.getCard().getCardNo()) + " and Card Holder : " + PayDetail.getCard().getCardHolder();
                            } else if (PayDetail.getCheque() != null) {
                                str = "Bank Name : " + StringUtil.DecodeText(PayDetail.getCheque().getBankName()) + " and Ref. No : " + (PayDetail.getCheque().getChequeNo());
                            }
                        }
                    }
                } else if (PayDetail != null) {
                    if (PayDetail.getPaymentMethod().getDetailType() == 2 || PayDetail.getPaymentMethod().getDetailType() == 1) {
                        if (PayDetail.getCard() != null) {
                            str = "Card No : " + (PayDetail.getCard().getCardNo()) + " and Card Holder : " + PayDetail.getCard().getCardHolder();
                        } else if (PayDetail.getCheque() != null) {
                            str = "Bank Name : " + StringUtil.DecodeText(PayDetail.getCheque().getBankName()) + " and Ref. No : " + (PayDetail.getCheque().getChequeNo());
                        }
                    }
                }


    //                mode!=StaticValues.AUTONUM_BILLINGRECEIPT?(rc.getPayDetail()!=null?(rc.getPayDetail().getPaymentMethod().getMethodName().equals("Credit Card")||customer.equals("Debit Card")?
    //                        rc.getPayDetail().getCard()!=null?"Card No : "+(rc.getPayDetail().getCard().getCardNo()+" and Card Holder : "+rc.getPayDetail().getCard().getCardHolder()):"":""):""):
    //                        (rc1.getPayDetail()!=null?(rc1.getPayDetail().getPaymentMethod().getMethodName().equals("Credit Card")||customer.equals("Debit Card")?
    //                        rc1.getPayDetail().getCard()!=null?"Card No : "+(rc1.getPayDetail().getCard().getCardNo()+" and Card Holder : "+rc1.getPayDetail().getCard().getCardHolder()):"":""):"")

                cell3 = createCell(str, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
            }
            cell3 = createCell(messageSource.getMessage("acc.numb.41", null, RequestContextUtils.getLocale(request)), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            cell3 = createCell(AccountName, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            cell3.setPaddingLeft(50);
            tab2.addCell(cell3);
            cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            if(!StringUtil.isNullOrEmpty(memo)){
                cell3 = createCell("Memo :", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell(memo, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);            
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
            }
            String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(amount)), currency,countryLanguageId, companyObj.getCompanyID());
            String currencyname = currency.getName();
            cell3 = createCell(messageSource.getMessage("acc.rem.177", null, RequestContextUtils.getLocale(request)) + " : " + currencyname + " " + netinword + " Only.", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM + Rectangle.TOP, 5);
            tab2.addCell(cell3);
            
            double totalAdvanceAmount=amount;
            if(advanceFlag){
                totalAdvanceAmount=amount+advanceAmount;
            }
            
            cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(totalAdvanceAmount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM + Rectangle.TOP, 5);
            tab2.addCell(cell3);
            PdfPCell mainCell5 = new PdfPCell(tab2);
            mainCell5.setBorder(1);
            mainTable.addCell(mainCell5);

            blankTable = ExportRecordHandler.addBlankLine(5);
            blankCell = new PdfPCell(blankTable);
            blankCell.setBorder(0);
            mainTable.addCell(blankCell);
            
            PdfPTable table3 = new PdfPTable(2); //for 2 column
            String username = sessionHandlerImpl.getUserName(request);
//            cell3 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
//            cell3.setPaddingLeft(10);
//            cell3.setPaddingTop(-10);
////                cell3.setPaddingBottom(30);
//            table3.addCell(cell3);
//            cell3 = createCell("ORDER ACCEPTANCE", fontSmallBold1, Element.ALIGN_CENTER, 0, 0);
//            cell3.setPaddingRight(10);
//            cell3.setPaddingTop(-10);
//            table3.addCell(cell3);

            cell3 = createCell("Receiver's ", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingTop(5);
//            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            cell3 = createCell("Authorized ", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingTop(5);
//            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            
            cell3 = createCell("Signature : ________________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingTop(5);
            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            cell3 = createCell("Signature : ________________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingTop(5);
            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            
            cell3 = createCell(messageSource.getMessage("acc.numb.39", null, RequestContextUtils.getLocale(request)) +" : ______________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(5);
            table3.addCell(cell3);
            cell3 = createCell(messageSource.getMessage("acc.numb.40", null, RequestContextUtils.getLocale(request))+" : _______________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(5);
//                cell3.setPaddingTop(-9);
            table3.addCell(cell3);
            
            cell3 = createCell("Approved by : _____________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(15);
            table3.addCell(cell3);
            cell3 = createCell("Received by : ______________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(15);
//                cell3.setPaddingTop(-9);
            table3.addCell(cell3);
            
            cell3 = createCell("Prepared by : "+preparedBy, fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(15);
            table3.addCell(cell3);
            
            cell3 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(15);
//                cell3.setPaddingTop(-9);
            table3.addCell(cell3);
            

            PdfPCell mainCell63 = new PdfPCell(table3);
            mainCell63.setBorder(0);
            mainTable.addCell(mainCell63);
                
        } catch (Exception ex) {
            Logger.getLogger(ExportRecord.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    public static void generateReceiptLSHPDF(authHandlerDAO authHandlerDAOObj, kwlCommonTablesDAO kwlCommonTablesDAOObj, ExportRecordBeans.EnglishNumberToWords EnglishNumberToWordsOjb, MessageSource messageSource, PdfPTable mainTable, HttpServletRequest request, Company companyObj, String logoPath, String currencyid, String receiptNumber, Date journalEntryDate, DateFormat formatter, String accname, String address, double amount, int mode, PayDetail PayDetail,String paidTo, String memo, JSONObject config, String AccountName, boolean iscontraentryflag,String preText,String baseUrl ,boolean ismanycrdb, HashMap<String, Object> hm) throws DocumentException, ServiceException {

        PdfPTable tab1 = null;
        PdfPTable tab2 = null;
        PdfPTable tab3 = null;
        PdfPTable paidtoTable = null;
        PdfPTable blankTable = null;
        PdfPCell blankCell = null;
        PdfPCell invcell = null;
        PdfPCell invCell = null; 
        PdfPCell cell3 = null;
        ByteArrayOutputStream baos = null;
        Document document = null;
        PdfWriter writer = null;
        String companyid = companyObj.getCompanyID();
        double advanceAmount=0;
        if(!StringUtil.isNullOrEmpty(request.getParameter("advanceAmount")))
        advanceAmount = Double.parseDouble(request.getParameter("advanceAmount"));
        boolean advanceFlag=false;
        if(!StringUtil.isNullOrEmpty(request.getParameter("advanceFlag")))
        advanceFlag = Boolean.parseBoolean(request.getParameter("advanceFlag"));
  
        try {
            
            baos = new ByteArrayOutputStream();
            document = new Document(PageSize.A4, 15, 15, 40, 30);
            writer = PdfWriter.getInstance(document, baos);
//            writer.setPageEvent(new ExportRecord_LSH.EndPage());
            document.open();
            
            KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), currencyid);

//            config = new com.krawler.utils.json.base.JSONObject(pOrder.getTemplateid().getConfigstr());
            boolean isCompanyLogo = true;
            boolean isCompanyTemplateLogo = false;            

            if (config.has("showTemplateLogo") && config.getBoolean("showTemplateLogo")) {
                isCompanyTemplateLogo = true;
                isCompanyLogo = false;
            }                    
            
            String company[] = new String[4];
            company[0] = companyObj.getCompanyName();
            company[1] = companyObj.getAddress() != null ? StringUtil.serverHTMLStripper(companyObj.getAddress()) : "";
            company[2] = companyObj.getEmailID();
            company[3] = companyObj.getPhoneNumber();

            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = kwlCommonTablesDAOObj.getObject(ExtraCompanyPreferences.class.getName(), companyObj.getCompanyID());
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }

            PdfPTable logotable = new PdfPTable(1);
            logotable.setWidthPercentage(100);
            logotable.setWidths(new float[]{100});
            
            PdfPCell imgCell = new PdfPCell();
            String tempImagePath = storageHandlerImpl.GetDocStorePath() + companyObj.getCompanyID() + "_template.png";
            Image img = Image.getInstance(tempImagePath);            
            img.scaleAbsolute((PageSize.A4.getWidth() - document.leftMargin() - document.rightMargin()) * mainTable.getWidthPercentage() / 100, 82);
            
            imgCell.addElement((Element) img);
            imgCell = new PdfPCell(img);
            imgCell.setHorizontalAlignment(Element.ALIGN_LEFT);
            imgCell.setBorder(0);
            logotable.addCell(imgCell);
            
            PdfPCell mainCell00 = new PdfPCell(logotable);
            mainCell00.setBorder(0);
            mainCell00.setPadding(0);
            mainTable.addCell(mainCell00);
        
            PdfPTable table1 = new PdfPTable(2);
            table1.setWidthPercentage(100);
            table1.setWidths(new float[]{75, 25});

            tab2 = new PdfPTable(1);         
            String theader="";
            String payORreceive="";
            if(mode == StaticValues.AUTONUM_PAYMENT||mode == StaticValues.AUTONUM_BILLINGPAYMENT){
                theader = messageSource.getMessage("acc.numb.37", null, RequestContextUtils.getLocale(request));
                payORreceive="Pay To";
            }
            else if(mode == StaticValues.AUTONUM_RECEIPT||mode == StaticValues.AUTONUM_BILLINGRECEIPT){
                theader="Payment Receipt";
                payORreceive="Receive From";
            }
            invCell=createCell(theader,fontTbl,Element.ALIGN_RIGHT,0,5);
            invCell.setPaddingBottom(10);
            PdfPTable tab4 = ExportRecordHandler.getDateTable2(journalEntryDate,receiptNumber,theader,formatter,invCell); 
            
            PdfPTable userTable2 = new PdfPTable(2);
            userTable2.setWidthPercentage(100);
            
            tab1 = new PdfPTable(1);
            tab3 = new PdfPTable(1);
            
            PdfPCell cell1 = new PdfPCell(tab1);
            cell1.setBorder(0);
//            cell1.setPaddingLeft(-10);
            table1.addCell(cell1);
            PdfPCell cel2 = new PdfPCell(tab4);
            cel2.setBorder(0);
            table1.addCell(cel2);

            PdfPCell mainCell11 = new PdfPCell(table1);
            mainCell11.setBorder(0);
            mainCell11.setPadding(0);
            mainTable.addCell(mainCell11);

            cell1 = new PdfPCell(tab3);
            cell1.setBorder(0);
            cell1.setPaddingTop(-50);
            userTable2.addCell(cell1);
            cel2 = new PdfPCell();
            cel2.setBorder(0);
            userTable2.addCell(cel2);

            PdfPCell mainCell12 = new PdfPCell(userTable2);
            mainCell12.setBorder(0);                
            mainCell12.setPaddingTop(10);
            mainCell12.setPaddingLeft(0);
            mainCell12.setPaddingRight(10);
//            mainCell12.setPaddingBottom(-20);
            mainTable.addCell(mainCell12);

            if(!StringUtil.isNullOrEmpty(preText)){
                             ExportRecordHandler.getHtmlCell(preText.trim(),mainTable,baseUrl);
                    }
            
            blankTable = ExportRecordHandler.addBlankLine(1);
            blankCell = new PdfPCell(blankTable);
            blankCell.setBorder(0);
            mainTable.addCell(blankCell);
            
            paidtoTable = new PdfPTable(1);
            paidtoTable.setWidthPercentage(100);
            paidtoTable.setWidths(new float[] {100});
            PdfPCell paidTocell = createCell( payORreceive+" : "+paidTo, fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
//            paidTocell.setBorder(0);
            paidtoTable.addCell(paidTocell);
            PdfPCell mainpaidtoTable = new PdfPCell(paidtoTable);
            mainpaidtoTable.setBorder(0);
            mainTable.addCell(mainpaidtoTable);
            
            blankTable = ExportRecordHandler.addBlankLine(2);
            blankCell = new PdfPCell(blankTable);
            blankCell.setBorder(0);
            mainTable.addCell(blankCell);
            
            tab2 = new PdfPTable(2);
            tab2.setWidthPercentage(100);
            tab2.setWidths(new float[]{80, 20});
            cell3 = new PdfPCell(new Paragraph(messageSource.getMessage("acc.report.2", null, RequestContextUtils.getLocale(request)), fontSmallBold));
            cell3.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell3.setBackgroundColor(Color.lightGray);
            cell3.setBorder(Rectangle.LEFT + Rectangle.BOTTOM + Rectangle.RIGHT+Rectangle.TOP);
            tab2.addCell(cell3);
            cell3 = new PdfPCell(new Paragraph(messageSource.getMessage("acc.rem.193", null, RequestContextUtils.getLocale(request)), fontSmallBold));
            cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell3.setBackgroundColor(Color.lightGray);
            cell3.setBorder(Rectangle.RIGHT + Rectangle.BOTTOM+Rectangle.TOP);
            tab2.addCell(cell3);
            if(ismanycrdb){  //acc.je.accDebit
                 List<String> debitAccountNameRow=null; 
                 List<String> creditAccountNameRow=null;
                 List<Double> debitAccountAmount=null;
                 List<Double> creditAccountAmount=null;
                 int craditDebitFlag=1;
                 
                         
                if (hm.containsKey("debitAccountNameRow")) {
                       debitAccountNameRow=(List<String>) hm.get("debitAccountNameRow");
                }
                if (hm.containsKey("debitAccountAmount")) {
                     debitAccountAmount =(List<Double>) hm.get("debitAccountAmount");
                }
                if (hm.containsKey("creditAccountNameRow")) {
                       creditAccountNameRow=(List<String>) hm.get("creditAccountNameRow");
                }
                if (hm.containsKey("creditAccountAmount")) {
                     creditAccountAmount =(List<Double>) hm.get("creditAccountAmount");
                }
                if (hm.containsKey("creditdebitflag")) {
                     craditDebitFlag =(Integer) hm.get("creditdebitflag");
                }
                
                for(int i=0;i< (craditDebitFlag==1 ? debitAccountNameRow.size():creditAccountNameRow.size());i++){
                        
                        if(i==0)
                        {
                            cell3 = createCell(messageSource.getMessage(craditDebitFlag==1 ? "acc.je.accDebit" : "acc.je.accCredit"  , null, RequestContextUtils.getLocale(request)) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                            tab2.addCell(cell3);
                            cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                            tab2.addCell(cell3);
                        }
                        cell3 = createCell(craditDebitFlag==1 ? debitAccountNameRow.get(i) : creditAccountNameRow.get(i), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(craditDebitFlag==1 ? debitAccountAmount.get(i) :creditAccountAmount.get(i), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                        tab2.addCell(cell3);
                        cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                        tab2.addCell(cell3);
                }
                
                for(int i=0;i<(craditDebitFlag==1 ? creditAccountNameRow.size():debitAccountNameRow.size()) ;i++)
                {     
                        if(i==0){
                            cell3 = createCell(messageSource.getMessage(craditDebitFlag==1 ? "acc.je.accCredit" :"acc.je.accDebit", null, RequestContextUtils.getLocale(request)) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                            tab2.addCell(cell3);
                            cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                            tab2.addCell(cell3);
                        }
                        cell3 = createCell(craditDebitFlag==1 ? creditAccountNameRow.get(i):debitAccountNameRow.get(i), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(craditDebitFlag==1 ? creditAccountAmount.get(i): debitAccountAmount.get(i), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                        tab2.addCell(cell3);
                        cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                        cell3.setPaddingLeft(50);
                        tab2.addCell(cell3);
                        cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                        tab2.addCell(cell3);
                }
            }else{
                    cell3 = createCell(messageSource.getMessage("acc.je.acc", null, RequestContextUtils.getLocale(request)) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                    tab2.addCell(cell3);
                    cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                    tab2.addCell(cell3);
                    cell3 = createCell(accname, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                    cell3.setPaddingLeft(50);
                    tab2.addCell(cell3);
                    cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(amount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 15);
                    tab2.addCell(cell3);
                    cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                    cell3.setPaddingLeft(50);
                    tab2.addCell(cell3);
                    cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                    tab2.addCell(cell3);
            }
            
            if(advanceFlag)
            {
                cell3 = createCell("Advance"+ " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5); 
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(advanceAmount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT,  Rectangle.RIGHT, 15); 
                tab2.addCell(cell3);            
            }
            
 
            
            for (int i = 0; i < 10; i++) {
                cell3 = new PdfPCell(new Paragraph("", fontSmallRegular));
                cell3.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
                tab2.addCell(cell3);
            }
            if(!iscontraentryflag){
                cell3 = createCell(messageSource.getMessage("acc.numb.42", null, RequestContextUtils.getLocale(request)), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(mode != StaticValues.AUTONUM_BILLINGRECEIPT ? (PayDetail == null ? "Cash" : PayDetail.getPaymentMethod().getMethodName()) : (PayDetail == null ? "Cash" : PayDetail.getPaymentMethod().getMethodName()), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);            
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(mode != StaticValues.AUTONUM_BILLINGRECEIPT ? (PayDetail != null ? (PayDetail.getPaymentMethod().getMethodName().equals("Cheque") ? "Cheque No : " + PayDetail.getCheque().getChequeNo() + " and Bank Name : " + PayDetail.getCheque().getBankName() : "") : "")
                        : (PayDetail != null ? (PayDetail.getPaymentMethod().getMethodName().equals("Cheque") ? "Cheque No : " + PayDetail.getCheque().getChequeNo() + " and Bank Name : " + PayDetail.getCheque().getBankName() : "") : ""), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                String str = "";
                if (mode != StaticValues.AUTONUM_BILLINGRECEIPT) {
                    if (PayDetail != null) {
                        if (PayDetail.getPaymentMethod().getDetailType() == 2 || PayDetail.getPaymentMethod().getDetailType() == 1) {
                            if (PayDetail.getCard() != null) {
                                str = "Card No : " + (PayDetail.getCard().getCardNo()) + " and Card Holder : " + PayDetail.getCard().getCardHolder();
                            } else if (PayDetail.getCheque() != null) {
                                str = "Bank Name : " + StringUtil.DecodeText(PayDetail.getCheque().getBankName()) + " and Ref. No : " + (PayDetail.getCheque().getChequeNo());
                            }
                        }
                    }
                } else if (PayDetail != null) {
                    if (PayDetail.getPaymentMethod().getDetailType() == 2 || PayDetail.getPaymentMethod().getDetailType() == 1) {
                        if (PayDetail.getCard() != null) {
                            str = "Card No : " + (PayDetail.getCard().getCardNo()) + " and Card Holder : " + PayDetail.getCard().getCardHolder();
                        } else if (PayDetail.getCheque() != null) {
                            str = "Bank Name : " + StringUtil.DecodeText(PayDetail.getCheque().getBankName()) + " and Ref. No : " + (PayDetail.getCheque().getChequeNo());
                        }
                    }
                }


    //                mode!=StaticValues.AUTONUM_BILLINGRECEIPT?(rc.getPayDetail()!=null?(rc.getPayDetail().getPaymentMethod().getMethodName().equals("Credit Card")||customer.equals("Debit Card")?
    //                        rc.getPayDetail().getCard()!=null?"Card No : "+(rc.getPayDetail().getCard().getCardNo()+" and Card Holder : "+rc.getPayDetail().getCard().getCardHolder()):"":""):""):
    //                        (rc1.getPayDetail()!=null?(rc1.getPayDetail().getPaymentMethod().getMethodName().equals("Credit Card")||customer.equals("Debit Card")?
    //                        rc1.getPayDetail().getCard()!=null?"Card No : "+(rc1.getPayDetail().getCard().getCardNo()+" and Card Holder : "+rc1.getPayDetail().getCard().getCardHolder()):"":""):"")

                cell3 = createCell(str, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
            }
            cell3 = createCell(messageSource.getMessage("acc.numb.41", null, RequestContextUtils.getLocale(request)), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            cell3 = createCell(AccountName, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            cell3.setPaddingLeft(50);
            tab2.addCell(cell3);
            cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            if(!StringUtil.isNullOrEmpty(memo)){
                cell3 = createCell("Memo :", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell(memo, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);            
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
            }
           
            PdfPTable table3 = new PdfPTable(2); //for 2 column
            String username = sessionHandlerImpl.getUserName(request);
//            cell3 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
//            cell3.setPaddingLeft(10);
//            cell3.setPaddingTop(-10);
////                cell3.setPaddingBottom(30);
//            table3.addCell(cell3);
//            cell3 = createCell("ORDER ACCEPTANCE", fontSmallBold1, Element.ALIGN_CENTER, 0, 0);
//            cell3.setPaddingRight(10);
//            cell3.setPaddingTop(-10);
//            table3.addCell(cell3);

            cell3 = createCell("Receiver's ", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingTop(5);
//            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            cell3 = createCell("Authorized ", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingTop(5);
//            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            
            cell3 = createCell("Signature : ________________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingTop(5);
            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            cell3 = createCell("Signature : ________________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingTop(5);
            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            
            cell3 = createCell(messageSource.getMessage("acc.numb.39", null, RequestContextUtils.getLocale(request)) +" : ______________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(5);
            table3.addCell(cell3);
            cell3 = createCell(messageSource.getMessage("acc.numb.40", null, RequestContextUtils.getLocale(request))+" : _______________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(5);
//                cell3.setPaddingTop(-9);
            table3.addCell(cell3);

            /*for adding space to table -mayur b*/
            PdfPTable tableCloseLine = ExportRecordHandler.getTableForNextPage(2, "");
            
            // get after Items table height//bottom table
            table3.setTotalWidth((PageSize.A4.getWidth() - document.leftMargin() - document.rightMargin()) * table3.getWidthPercentage() / 100);
            table3.calculateHeightsFast();
            float bottomTableHeight = table3.getTotalHeight();
            
            tab2.setTotalWidth((PageSize.A4.getWidth() - document.leftMargin() - document.rightMargin()) * tab2.getWidthPercentage() / 100);
            tab2.calculateHeightsFast();
            float tab2Height = tab2.getTotalHeight();

            // get main table (having items and global fields) height 
            mainTable.setTotalWidth((PageSize.A4.getWidth() - document.leftMargin()
                    - document.rightMargin()) * mainTable.getWidthPercentage() / 100);
            mainTable.calculateHeightsFast();
            float aboveProdTableContent = mainTable.getTotalHeight();
            
            int blankRowHeight = 4;
            float addBlankRows = (document.getPageSize().getHeight()/**
                     * pageNo
                     */
                    - bottomTableHeight - aboveProdTableContent - tab2Height -85/**
                     * pageNo
                     */
                    ) / blankRowHeight; //top+bottom=5+30
            int noOfCols = 2;
            if (addBlankRows < 0) {
                addBlankRows = 10;
            }            
            float BlankCellCnt = (float) (addBlankRows * noOfCols);
            BlankCellCnt = BlankCellCnt - (BlankCellCnt % noOfCols);
            float lastRow = (float) Math.ceil(BlankCellCnt - noOfCols);
            
            for (int j = 1; j <= BlankCellCnt; j++) {
                invcell = new PdfPCell(new Paragraph("", fontSmallRegular));
                invcell.setHorizontalAlignment(Element.ALIGN_CENTER);
                invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
                if (j > lastRow) {
                    invcell.setBorder(Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM);
                }
                tab2.addCell(invcell);
            }
            
            String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(amount)), currency,countryLanguageId, companyObj.getCompanyID());
            String currencyname = currency.getName();
            cell3 = createCell(messageSource.getMessage("acc.rem.177", null, RequestContextUtils.getLocale(request)) + " : " + currencyname + " " + netinword + " Only.", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM + Rectangle.TOP, 5);
            tab2.addCell(cell3);
            
            double totalAdvanceAmount=amount;
            if(advanceFlag){
                totalAdvanceAmount=amount+advanceAmount;
            }
            
            cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(totalAdvanceAmount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM + Rectangle.TOP, 5);
            tab2.addCell(cell3);

            PdfPCell tableRow = new PdfPCell(tab2);
            tableRow.setBorder(0);
            mainTable.addCell(tableRow);

//            ExportRecordHandler.addTableRow(mainTable, tab2); //Break table after adding extra space
            
            blankTable = ExportRecordHandler.addBlankLine(3);
            blankCell = new PdfPCell(blankTable);
            blankCell.setBorder(0);
            mainTable.addCell(blankCell);
            
            PdfPCell mainCell63 = new PdfPCell(table3);
            mainCell63.setBorder(0);
            mainTable.addCell(mainCell63);
            document.add(mainTable);
            document.getPageNumber();
            
        } catch (Exception ex) {
            Logger.getLogger(ExportRecord.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            if (document != null) {
                document.close();
            }
            if (writer != null) {
                writer.close();
            }
        }
    }

    public static Double addBalanceSheetCell_Custom(JSONObject jobj, PdfPTable table, String currencyid, boolean isAlignment, boolean isCompare, ExtraCompanyPreferences extraCompanyPreferences) throws JSONException, SessionExpiredException {
        String openingval = "";
        String periodval = "";
        String endingval = "";
        String preopeningval = "";
        String preperiodval = "";
        String preendingval = "";
        double retnum = 0;
        PdfPCell cell3 = null;
        PdfPCell accountCodeCell = null;
        PdfPCell endingcell = null;
        PdfPCell openingcell = null;
        PdfPCell periodcell = null;
        PdfPCell preopeningcell = null;
        PdfPCell preperiodcell = null;
        PdfPCell preendingcell = null;
        String companyid = jobj.optString("companyid");
        PdfPCell cell5 = ExportRecordHandler.createBalanceSheetCell(endingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 0);
        if (!jobj.toString().equalsIgnoreCase("{}")) {
            String accName = jobj.get("accountname").toString();
            String accCode = (jobj.has("accountcode") && !StringUtil.isNullOrEmpty(jobj.getString("accountcode"))) ? jobj.get("accountcode").toString() : "";
            double openingamount = 0;
            double periodamount = 0;
            double endingamount = 0;
            double preopeningamount = 0;
            double preperiodamount = 0;
            double preendingamount = 0;
            int padding = Integer.parseInt(jobj.get("level").toString()) * 10;
            try {
                if (jobj.has("openingamount") && jobj.get("openingamount") != null) {
                    openingamount = Double.parseDouble(jobj.get("openingamount").toString());
                    openingamount = Double.valueOf(authHandler.formattedAmount(openingamount, companyid));
                    openingval = ExportRecordHandler.currencyRenderer(openingamount, companyid);
                }

                if (jobj.has("periodamount") && jobj.get("periodamount") != null) {
                    periodamount = Double.parseDouble(jobj.get("periodamount").toString());
                    periodamount = Double.valueOf(authHandler.formattedAmount(periodamount, companyid));
                    periodval = ExportRecordHandler.currencyRenderer(periodamount, companyid);
                }

                endingamount = Double.parseDouble(jobj.get("amount").toString());
                endingamount = Double.valueOf(authHandler.formattedAmount(endingamount, companyid));
                endingval = ExportRecordHandler.currencyRenderer(endingamount, companyid);

                if (isCompare) {
                    if (jobj.has("preopeningamount") && jobj.get("preopeningamount") != null) {
                        preopeningamount = Double.parseDouble(jobj.get("preopeningamount").toString());
                        preopeningamount = Double.valueOf(authHandler.formattedAmount(preopeningamount, companyid));
                        preopeningval = ExportRecordHandler.currencyRenderer(preopeningamount, companyid);
                    }

                    if (jobj.has("preperiodamount") && jobj.get("preperiodamount") != null) {
                        preperiodamount = Double.parseDouble(jobj.get("preperiodamount").toString());
                        preperiodamount = Double.valueOf(authHandler.formattedAmount(preperiodamount, companyid));
                        preperiodval = ExportRecordHandler.currencyRenderer(preperiodamount, companyid);
                    }

                    if (jobj.has("preamount") && jobj.get("preamount") != null) {
                        preendingamount = Double.parseDouble(jobj.get("preamount").toString());
                        preendingamount = Double.valueOf(authHandler.formattedAmount(preendingamount, companyid));
                        preendingval = ExportRecordHandler.currencyRenderer(preendingamount, companyid);
                    }
                }

                if (padding == 0 && !accName.equals("")) {
                    retnum = Double.parseDouble(authHandler.formattedAmount(endingamount, companyid));
                }
            } catch (NumberFormatException ex) {
                if (jobj.has("periodamount") && jobj.get("periodamount") != null) {
                    periodval = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("periodamount").toString());
                    if (!StringUtil.isNullOrEmpty(periodval)) {
                        periodamount = Double.parseDouble(periodval);
                        periodamount = Double.valueOf(authHandler.formattedAmount(periodamount, companyid));
                        periodval = ExportRecordHandler.currencyRenderer(periodamount, companyid);
                    }
                }

                if (jobj.has("openingamount") && jobj.get("openingamount") != null) {
                    openingval = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("openingamount").toString());
                    if (!StringUtil.isNullOrEmpty(openingval)) {
                        openingamount = Double.parseDouble(openingval);
                        openingamount = Double.valueOf(authHandler.formattedAmount(openingamount, companyid));
                        openingval = ExportRecordHandler.currencyRenderer(openingamount, companyid);
                    }
                }
                if (jobj.has("amount") && jobj.get("amount") != null) {
                    endingval = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("amount").toString());
                    if (!StringUtil.isNullOrEmpty(endingval)) {
                        endingamount = Double.parseDouble(endingval);
                        endingamount = Double.valueOf(authHandler.formattedAmount(endingamount, companyid));
                        endingval = ExportRecordHandler.currencyRenderer(endingamount, companyid);
                    }
                }
                if (isCompare) {
                    if (jobj.has("preperiodamount") && jobj.get("preperiodamount") != null) {
                        preperiodval = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("preperiodamount").toString());
                        if (!StringUtil.isNullOrEmpty(preperiodval)) {
                            preperiodamount = Double.parseDouble(preperiodval);
                            preperiodamount = Double.valueOf(authHandler.formattedAmount(preperiodamount, companyid));
                            preperiodval = ExportRecordHandler.currencyRenderer(preperiodamount, companyid);
                        }
                    }

                    if (jobj.has("preopeningamount") && jobj.get("preopeningamount") != null) {
                        preopeningval = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("preopeningamount").toString());
                        if (!StringUtil.isNullOrEmpty(preopeningval)) {
                            preopeningamount = Double.parseDouble(preopeningval);
                            preopeningamount = Double.valueOf(authHandler.formattedAmount(preopeningamount, companyid));
                            preopeningval = ExportRecordHandler.currencyRenderer(preopeningamount, companyid);
                        }
                    }
                    if (jobj.has("preamount") && jobj.get("preamount") != null) {
                        preendingval = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("preamount").toString());
                        if (!StringUtil.isNullOrEmpty(preendingval)) {
                            preendingamount = Double.parseDouble(preendingval);
                            preendingamount = Double.valueOf(authHandler.formattedAmount(preendingamount, companyid));
                            preendingval = ExportRecordHandler.currencyRenderer(preendingamount, companyid);
                        }
                    }
                }
            }
            if (jobj.has("fmt")) {
                cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                accountCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallBold1, Element.ALIGN_CENTER, 0, 0, 0);
                openingcell = ExportRecordHandler.createBalanceSheetCell(openingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                periodcell = ExportRecordHandler.createBalanceSheetCell(periodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                endingcell = ExportRecordHandler.createBalanceSheetCell(endingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                if (isCompare) {
                    preopeningcell = ExportRecordHandler.createBalanceSheetCell(preopeningval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    preperiodcell = ExportRecordHandler.createBalanceSheetCell(preperiodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    preendingcell = ExportRecordHandler.createBalanceSheetCell(preendingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                }
            } else if (padding == 0 && !accName.equals("")) {
                cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                accountCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallBold1, Element.ALIGN_CENTER, 0, 0, 0);
                if (accName.startsWith("Total for ")) {
                    openingcell = ExportRecordHandler.createBalanceSheetCell(openingval, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0, 5);
                    periodcell = ExportRecordHandler.createBalanceSheetCell(periodval, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0, 5);
                    endingcell = ExportRecordHandler.createBalanceSheetCell(endingval, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0, 5);
                    if (isCompare) {
                        preopeningcell = ExportRecordHandler.createBalanceSheetCell(preopeningval, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0, 5);
                        preperiodcell = ExportRecordHandler.createBalanceSheetCell(preperiodval, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0, 5);
                        preendingcell = ExportRecordHandler.createBalanceSheetCell(preendingval, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0, 5);
                    }
                } else {
                    openingcell = ExportRecordHandler.createBalanceSheetCell(openingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    periodcell = ExportRecordHandler.createBalanceSheetCell(periodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    endingcell = ExportRecordHandler.createBalanceSheetCell(endingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    if (isCompare) {
                        preopeningcell = ExportRecordHandler.createBalanceSheetCell(preopeningval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        preperiodcell = ExportRecordHandler.createBalanceSheetCell(preperiodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        preendingcell = ExportRecordHandler.createBalanceSheetCell(preendingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    }
                }
                if (!endingval.equals("") || !preendingval.equals("")) {
                    openingcell.setBorderWidthTop(1);
                    openingcell.setBorderWidthBottom(1);
                    openingcell.setBorderColor(Color.gray);
                    periodcell.setBorderWidthTop(1);
                    periodcell.setBorderWidthBottom(1);
                    periodcell.setBorderColor(Color.gray);
                    endingcell.setBorderWidthTop(1);
                    endingcell.setBorderWidthBottom(1);
                    endingcell.setBorderColor(Color.gray);
                    table.addCell(cell5);
                    table.addCell(cell3);
                    if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAccountCodeInFinancialReport()) {
                        table.addCell(accountCodeCell);
                    }
                    table.addCell(openingcell);
                    table.addCell(periodcell);
                    table.addCell(endingcell);
                    if (isCompare) {
                        preopeningcell.setBorderWidthTop(1);
                        preopeningcell.setBorderWidthBottom(1);
                        preopeningcell.setBorderColor(Color.gray);
                        preperiodcell.setBorderWidthTop(1);
                        preperiodcell.setBorderWidthBottom(1);
                        preperiodcell.setBorderColor(Color.gray);
                        preendingcell.setBorderWidthTop(1);
                        preendingcell.setBorderWidthBottom(1);
                        preendingcell.setBorderColor(Color.gray);
                        table.addCell(preopeningcell);
                        table.addCell(preperiodcell);
                        table.addCell(preendingcell);
                    }
                    table.addCell(cell5);

                    for (int i = 1; i <= 10; i++) {
                        table.addCell(cell5);
                    }
                    return retnum;
                }
            } else {
                if (jobj.has("bold")) {
                    cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                    accountCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallBold1, Element.ALIGN_CENTER, 0, 0, 0);
                    openingcell = ExportRecordHandler.createBalanceSheetCell(openingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    periodcell = ExportRecordHandler.createBalanceSheetCell(periodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    endingcell = ExportRecordHandler.createBalanceSheetCell(endingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    if (isCompare) {
                        preopeningcell = ExportRecordHandler.createBalanceSheetCell(preopeningval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        preperiodcell = ExportRecordHandler.createBalanceSheetCell(preperiodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        preendingcell = ExportRecordHandler.createBalanceSheetCell(preendingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    }
                } else {
                    cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallRegular1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                    accountCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallRegular1, Element.ALIGN_CENTER, 0, 0, 0);
                    openingcell = ExportRecordHandler.createBalanceSheetCell(openingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    periodcell = ExportRecordHandler.createBalanceSheetCell(periodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    endingcell = ExportRecordHandler.createBalanceSheetCell(endingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    if (isCompare) {
                        preopeningcell = ExportRecordHandler.createBalanceSheetCell(preopeningval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        preperiodcell = ExportRecordHandler.createBalanceSheetCell(preperiodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        preendingcell = ExportRecordHandler.createBalanceSheetCell(preendingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    }
                }
            }
            table.addCell(cell5);
            table.addCell(cell3);
            if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAccountCodeInFinancialReport()) {
                table.addCell(accountCodeCell);
            }
            table.addCell(openingcell);
            table.addCell(periodcell);
            table.addCell(endingcell);
            if (isCompare) {
                table.addCell(preopeningcell);
                table.addCell(preperiodcell);
                table.addCell(preendingcell);
            }
            table.addCell(cell5);
        }
        return retnum;
    }

    public static Double  addBalanceSheetCell_CustomOnlyPeriodBalances(JSONObject jobj,PdfPTable table,String currencyid,boolean isAlignment, ExtraCompanyPreferences extraCompanyPreferences) throws JSONException, SessionExpiredException{
        String endingval = "";
        String customVal = "";  //customVal is used for 'periodval' and 'endingval' based on isOnlyEndingBalances flag which is true when 'View Only Ending Balances' otherwise false
        double retnum = 0 ;
        PdfPCell cell3 = null;
        PdfPCell accountCodeCell = null;
        PdfPCell customCell = null; // customCell is used as periodCell when isOnlyEndingBalances is false and endingCell otherwise
        boolean isOnlyEndingBalances = jobj.optBoolean("isOnlyEndingBalances",false);
        String companyid = jobj.optString("companyid");
        PdfPCell cell5 = ExportRecordHandler.createBalanceSheetCell(endingval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0,0);
        if(!jobj.toString().equalsIgnoreCase("{}")){
            String accName = jobj.get("accountname").toString();
            String accCode = (jobj.has("accountcode") && !StringUtil.isNullOrEmpty(jobj.getString("accountcode"))) ? jobj.get("accountcode").toString() : "";
            String customLabel = isOnlyEndingBalances ? "amount" : "periodamount";
            double customAmount = 0;    // customAmount is used as periodAmount or endingAmount based on isOnlyEndingBalances flag value
            int padding = Integer.parseInt(jobj.get("level").toString())*10;
            try{
                if (jobj.has(customLabel) && jobj.get(customLabel) != null) {
                    customAmount = Double.parseDouble(jobj.get(customLabel).toString());
                    customAmount = Double.valueOf(authHandler.formattedAmount(customAmount, companyid));
                    customVal = ExportRecordHandler.currencyRenderer(customAmount, companyid);
                }
                }catch(NumberFormatException ex){
                    if(jobj.has(customLabel) && jobj.get(customLabel) != null){
                        customVal = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get(customLabel).toString());
                        if(!StringUtil.isNullOrEmpty(customVal)){
                           customAmount = Double.parseDouble(customVal);
                           customAmount = Double.valueOf(authHandler.formattedAmount(customAmount, companyid));
                           customVal=ExportRecordHandler.currencyRenderer(customAmount, companyid);
                        }
                    }
                }
            if(jobj.has("fmt")){
                cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0,(isAlignment)?padding:0,0);
                accountCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallBold1, Element.ALIGN_CENTER, 0, 0,0);
                customCell = ExportRecordHandler.createBalanceSheetCell(customVal, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0,5);              
            }else if(padding == 0 &&  !accName.equals("")){
                
               cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment)?padding:0,0);
               accountCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallBold1, Element.ALIGN_CENTER, 0, 0,0);
               if(accName.startsWith("Total for ")){ 
                   customCell = ExportRecordHandler.createBalanceSheetCell(customVal, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0,5);
               }else{
                   customCell = ExportRecordHandler.createBalanceSheetCell(customVal, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0,5);
               }
                if(!customVal.equals("")){
                    customCell.setBorderWidthTop(1);
                    customCell.setBorderWidthBottom(1);
                    customCell.setBorderColor(Color.gray);
                    table.addCell(cell5);
                    table.addCell(cell3);
                    if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAccountCodeInFinancialReport()) {
                        table.addCell(accountCodeCell);
                    }
                    table.addCell(customCell);
                    table.addCell(cell5);
                    
                    for(int i=1;i<=10;i++)
                        table.addCell(cell5);
                    return  retnum;
                }
            }else{
                if(jobj.has("bold")) {
                    cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment)?padding:0,0);
                    accountCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallBold1, Element.ALIGN_CENTER, 0, 0,0);
                    customCell = ExportRecordHandler.createBalanceSheetCell(customVal, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                } else {
                    cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallRegular1, Element.ALIGN_LEFT, 0, (isAlignment)?padding:0,0);
                    accountCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallRegular1, Element.ALIGN_CENTER, 0, 0,0);
                    customCell = ExportRecordHandler.createBalanceSheetCell(customVal, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                }
            }
            table.addCell(cell5);
            table.addCell(cell3);
            if (extraCompanyPreferences != null && extraCompanyPreferences.isShowAccountCodeInFinancialReport()) {
                table.addCell(accountCodeCell);
            }
            table.addCell(customCell);
            table.addCell(cell5);
        }
        return  retnum;
    }
       
    public static Double addBalanceSheetCell(HttpServletRequest request,JSONObject jobj,PdfPTable table,String currencyid,boolean isAlignment) throws JSONException, SessionExpiredException{
        String val = "";
        String preval = "";
        String openval="";
        String periodval="";
        String endval="";
        double retnum = 0 ;
        boolean showCwll6=true;
        boolean isShowAccountCode =false;
        String companyid = sessionHandlerImpl.getCompanyid(request);
        if(request.getAttribute("isShowAccountCode") !=null){
            isShowAccountCode = Boolean.valueOf(request.getAttribute("isShowAccountCode").toString());
        }
        PdfPCell cell3 = null;
        PdfPCell cell4 = null;
        PdfPCell cell6 = null;
        PdfPCell cell7 = null;
        boolean periodView=Boolean.parseBoolean(request.getParameter("periodView"));
        String isCompareGlobal = request.getParameter("isCompareGlobal");
        String isSelectedCurrencyDiff = request.getParameter("isSelectedCurrencyDiff");
        Boolean isCompare = isCompareGlobal!=null?Boolean.parseBoolean(isCompareGlobal):true;
        Boolean isSelectedCurrencyDiffFlag = isSelectedCurrencyDiff!=null?Boolean.parseBoolean(isSelectedCurrencyDiff):false;
        PdfPCell cell5 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0,0);
        PdfPCell accCodeCell = ExportRecordHandler.createBalanceSheetCell("", fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0,0);
        if(!jobj.toString().equalsIgnoreCase("{}")){
            if (periodView) {
                String accName = jobj.get("accountname").toString();
                String accCode = jobj.optString("accountcode");
                double openingamount = 0;
                double periodamount = 0;
                double endingamount = 0;
                int padding = Integer.parseInt(jobj.get("level").toString()) * 10;
                try {
                    if (jobj.opt("openingamount") != "" && jobj.opt("openingamount") != "-") {
                        openingamount = jobj.opt("openingamount")!=null?Double.parseDouble(jobj.opt("openingamount").toString()):0.0;
                    } else {
                        openingamount = 0.0;
                    }
                    openingamount = Double.valueOf(authHandler.formattedAmount(openingamount, companyid));
                    openval = ExportRecordHandler.currencyRenderer(openingamount, companyid);

                    if (padding == 0 && !accName.equals("")) {
                        retnum = Double.parseDouble(authHandler.formattedAmount(openingamount, companyid));
                    }
                    
                    if (jobj.opt("periodamount") != "" && jobj.opt("periodamount") != "-") {
                        periodamount = jobj.opt("periodamount")!=null?Double.parseDouble(jobj.opt("periodamount").toString()):0.0;
                    } else {
                        periodamount = 0.0;
                    }
                    periodamount = Double.valueOf(authHandler.formattedAmount(periodamount, companyid));
                    periodval = ExportRecordHandler.currencyRenderer(periodamount, companyid);
                    
                    
                    if (jobj.opt("endingamount") != "" && jobj.opt("endingamount") != "-") {
                        endingamount = jobj.opt("endingamount")!=null?Double.parseDouble(jobj.opt("endingamount").toString()):0.0;
                    } else {
                        endingamount = 0.0;
                    }
                    endingamount = Double.valueOf(authHandler.formattedAmount(endingamount, companyid));
                    endval = ExportRecordHandler.currencyRenderer(endingamount, companyid);
                    
                } catch (NumberFormatException ex) {
                    openval = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("openingamount").toString());
                    if (!StringUtil.isNullOrEmpty(openval)) {
                        openingamount = Double.parseDouble(openval);
                        openingamount = Double.valueOf(authHandler.formattedAmount(openingamount, companyid));
                        openval = ExportRecordHandler.currencyRenderer(openingamount, companyid);
                    }
                    periodval = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("periodamount").toString());
                    if (!StringUtil.isNullOrEmpty(periodval)) {
                        periodamount = Double.parseDouble(periodval);
                        periodamount = Double.valueOf(authHandler.formattedAmount(periodamount, companyid));
                        periodval = ExportRecordHandler.currencyRenderer(periodamount, companyid);
                    }
                    endval = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("endingamount").toString());
                    if (!StringUtil.isNullOrEmpty(endval)) {
                        endingamount = Double.parseDouble(endval);
                        endingamount = Double.valueOf(authHandler.formattedAmount(endingamount, companyid));
                        endval = ExportRecordHandler.currencyRenderer(endingamount, companyid);
                    }
                }
                if (jobj.has("fmt")) {
                    cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                    cell4 = ExportRecordHandler.createBalanceSheetCell(openval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    cell6 = ExportRecordHandler.createBalanceSheetCell(periodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    cell7 = ExportRecordHandler.createBalanceSheetCell(endval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                } else if (padding == 0 && !accName.equals("")) {
                    cell3 = ExportRecordHandler.createBalanceSheetCell(accName.contains("Total") ? "" : accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                    accCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                    if (accName.startsWith("Total for ")) {
                        cell6 = ExportRecordHandler.createBalanceSheetCell(periodval, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell4 = ExportRecordHandler.createBalanceSheetCell(openval, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell7 = ExportRecordHandler.createBalanceSheetCell(endval, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0, 5);
                    } else {
                        cell6 = ExportRecordHandler.createBalanceSheetCell(periodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell4 = ExportRecordHandler.createBalanceSheetCell(openval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell7 = ExportRecordHandler.createBalanceSheetCell(endval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    }
                    if (!openval.equals("")) {
                        cell4.setBorderWidthTop(1);
                        cell4.setBorderWidthBottom(1);
                        cell4.setBorderColor(Color.gray);
                        cell6.setBorderWidthTop(1);
                        cell6.setBorderWidthBottom(1);
                        cell6.setBorderColor(Color.gray);
                        cell7.setBorderWidthTop(1);
                        cell7.setBorderWidthBottom(1);
                        cell7.setBorderColor(Color.gray);
                        table.addCell(cell5);
                        table.addCell(cell3);
                        if (isShowAccountCode) {
                            table.addCell(accCodeCell);
                        }
                        table.addCell(cell4);
                        table.addCell(cell6);
                        table.addCell(cell7);
                        table.addCell(cell5);
                        for (int i = 1; i <= 10; i++) {
                            table.addCell(cell5);
                        }
                        return retnum;
                    }
                } else {
                    if (jobj.has("bold")) {
                        cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                        cell4 = ExportRecordHandler.createBalanceSheetCell(openval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell6 = ExportRecordHandler.createBalanceSheetCell(periodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell7 = ExportRecordHandler.createBalanceSheetCell(endval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    } else {
                        accCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallRegular1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                        cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallRegular1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                        cell4 = ExportRecordHandler.createBalanceSheetCell(openval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell6 = ExportRecordHandler.createBalanceSheetCell(periodval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell7 = ExportRecordHandler.createBalanceSheetCell(endval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    }
                }
                table.addCell(cell5);
                table.addCell(cell3);
                if (isShowAccountCode) {
                    table.addCell(accCodeCell);
                }
                table.addCell(cell4);
                table.addCell(cell6);
                table.addCell(cell7);
            } else {
                String accName = jobj.get("accountname").toString();
                String accCode = jobj.optString("accountcode");
                double amount = 0;
                double preamount = 0;
                int padding = Integer.parseInt(jobj.get("level").toString()) * 10;
                try {
                    if (jobj.get("amount") != "" && jobj.get("amount") != "-") {
                        amount = Double.parseDouble(jobj.get("amount").toString());
                    } else {
                        amount = 0.0;
                    }
                    amount = Double.valueOf(authHandler.formattedAmount(amount, companyid));
                    val = ExportRecordHandler.currencyRenderer(amount, companyid);
                    if (isCompare) {
                        if (jobj.has("preamount")) {
                            if (jobj.get("preamount") != "" && jobj.get("preamount") != "-") {
                                preamount = Double.parseDouble(jobj.get("preamount").toString());
                            } else {
                                preamount = 0.0;
                            }
                            preamount = Double.valueOf(authHandler.formattedAmount(preamount, companyid));
                            preval = ExportRecordHandler.currencyRenderer(preamount, companyid);
                        } else {
                            showCwll6 = false;
                        }
                    } else if (isSelectedCurrencyDiffFlag) {
                        if (jobj.has("amountInSelectedCurrency")) {
                            if (jobj.get("amountInSelectedCurrency") != "" && jobj.get("amountInSelectedCurrency") != "-") {
                                preamount = Double.parseDouble(jobj.get("amountInSelectedCurrency").toString());
                            } else {
                                preamount = 0.0;
                            }
                            preamount = Double.valueOf(authHandler.formattedAmount(preamount, companyid));
                            preval = ExportRecordHandler.currencyRenderer(preamount, companyid);
                        } else {
                            showCwll6 = false;
                        }
                    }
                    // val = exportDaoObj.currencyRender(Double.toString(amount), currencyid);
                    if (padding == 0 && !accName.equals("")) {
                        retnum = Double.parseDouble(authHandler.formattedAmount(amount, companyid));
                    }
                } catch (NumberFormatException ex) {
                    val = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("amount").toString());
                    if (!StringUtil.isNullOrEmpty(val)) {
                        amount = Double.parseDouble(val);
                        amount = Double.valueOf(authHandler.formattedAmount(amount, companyid));
                        val = ExportRecordHandler.currencyRenderer(amount, companyid);
                    }
                    if (isCompare) {
                        if (jobj.has("preamount")) {
                            preval = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("preamount").toString());
                            if (!StringUtil.isNullOrEmpty(preval)) {
                                preamount = Double.parseDouble(preval);
                                preamount = Double.valueOf(authHandler.formattedAmount(preamount, companyid));
                                preval = ExportRecordHandler.currencyRenderer(preamount, companyid);
                            }
                        } else {
                            showCwll6 = false;
                        }
                    } else if (isSelectedCurrencyDiffFlag) {
                        if (jobj.has("amountInSelectedCurrency")) {
                            if (jobj.get("amountInSelectedCurrency") != "" && jobj.get("amountInSelectedCurrency") != "-") {
                                preamount = Double.parseDouble(jobj.get("amountInSelectedCurrency").toString());
                            } else {
                                preamount = 0.0;
                            }
                            preamount = Double.valueOf(authHandler.formattedAmount(preamount, companyid));
                            preval = ExportRecordHandler.currencyRenderer(preamount, companyid);
                        } else {
                            showCwll6 = false;
                        }
                    }
                }
                if (jobj.has("fmt")) {
                    cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                    cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    cell6 = ExportRecordHandler.createBalanceSheetCell(preval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                } else if (padding == 0 && !accName.equals("")) {
                    cell3 = ExportRecordHandler.createBalanceSheetCell(accName.contains("Total") ? "" : accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                    if (accName.startsWith("Total for ")) {
                        cell6 = ExportRecordHandler.createBalanceSheetCell(preval, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallBold1, Element.ALIGN_RIGHT, 0, 0, 5);
                    } else {
                        cell6 = ExportRecordHandler.createBalanceSheetCell(preval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    }
                    if (!val.equals("")) {
//                    cell3.setBorderWidthBottom(1);
//                    cell3.setBorderColor(Color.GRAY);
                        cell4.setBorderWidthTop(1);
                        cell4.setBorderWidthBottom(1);
                        cell4.setBorderColor(Color.gray);
                        cell6.setBorderWidthTop(1);
                        cell6.setBorderWidthBottom(1);
                        cell6.setBorderColor(Color.gray);
                        table.addCell(cell5);
                        table.addCell(cell3);
                        if (isShowAccountCode ) {
                            table.addCell(accCodeCell);
                        }
                        if (showCwll6) {
                            table.addCell(cell4);
                        }
                        if (showCwll6) {
                            table.addCell(cell6);
                        }
                        table.addCell(cell5);

                        for (int i = 1; i <= 10; i++) {
                            table.addCell(cell5);
                        }
                        return retnum;
                    }
                } else {
                    if (jobj.has("bold")) {
                        accCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                        cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                        cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell6 = ExportRecordHandler.createBalanceSheetCell(preval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    } else {
                        accCodeCell = ExportRecordHandler.createBalanceSheetCell(accCode, fontSmallRegular1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                        cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallRegular1, Element.ALIGN_LEFT, 0, (isAlignment) ? padding : 0, 0);
                        cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                        cell6 = ExportRecordHandler.createBalanceSheetCell(preval, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                    }
                }
                table.addCell(cell5);
                table.addCell(cell3);
                if(isShowAccountCode){
                    table.addCell(accCodeCell);
                }
                if (showCwll6) {
                    table.addCell(cell4);
                }
                if (showCwll6) {
                    table.addCell(cell6);
                }
                if (!isShowAccountCode) {
                    table.addCell(cell5);
                }
            }
        }/*else{
            cell3 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallBold, Element.ALIGN_RIGHT, 0, 0,0);
            cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallBold, Element.ALIGN_RIGHT, 0, 0,0);
        }*/


        return  retnum;

    }
    
    public Double addBalanceSheetCellForPL(JSONObject jobj,PdfPTable table,String currencyid,boolean isAlignment) throws JSONException, SessionExpiredException{
        String val = "";
        double retnum = 0 ;
        PdfPCell cell3 = null;
        PdfPCell cell4 = null;
        String companyid = jobj.optString("companyid");
        PdfPCell cell5 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0,0);
        if(!jobj.toString().equalsIgnoreCase("{}")){
            String accName = jobj.get("accountname").toString();
            double amount = 0;
            int padding = Integer.parseInt(jobj.get("level").toString())*10;
            try{
                amount = Double.parseDouble(jobj.get("amount").toString());
                val=ExportRecordHandler.currencyRenderer(amount, companyid);
               // val = exportDaoObj.currencyRender(Double.toString(amount), currencyid);
                 if(padding == 0 &&  !accName.equals("")){
                    retnum = Double.parseDouble(authHandler.formattedAmount(amount, companyid));
                 }
            }catch(NumberFormatException ex){
                val = com.krawler.common.util.StringUtil.serverHTMLStripper(jobj.get("amount").toString());
            }
            if(jobj.has("fmt")){
                cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0,(isAlignment)?padding:0,0);
                cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0,5);
            }else if(padding == 0 &&  !accName.equals("")){
                
                cell3 = ExportRecordHandler.createBalanceSheetCell(accName.contains("Total")?"":accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment)?padding:0,0);
                cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0,5);
                if(!val.equals("")){
//                    cell3.setBorderWidthBottom(1);
//                    cell3.setBorderColor(Color.GRAY);
                    cell4.setBorderWidthTop(1);
                    cell4.setBorderWidthBottom(1);
                    cell4.setBorderColor(Color.gray);
                    table.addCell(cell5);
                    table.addCell(cell3);
                    table.addCell(cell4);
                    table.addCell(cell5);
                    
                    for(int i=1;i<=8;i++)
                        table.addCell(cell5);
                    return  retnum;
                }
            }else{
                if(jobj.has("bold")) {
                    cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallBold1, Element.ALIGN_LEFT, 0, (isAlignment)?padding:0,0);
                    cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
                } else {
                    cell3 = ExportRecordHandler.createBalanceSheetCell(accName, fontSmallRegular1, Element.ALIGN_LEFT, 0, (isAlignment)?padding:0,0);
                    cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallRegular1, Element.ALIGN_RIGHT, 0, 0, 5);
            }
            }
            table.addCell(cell5);
            table.addCell(cell3);
            table.addCell(cell4);
            table.addCell(cell5);
        }/*else{
            cell3 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallBold, Element.ALIGN_RIGHT, 0, 0,0);
            cell4 = ExportRecordHandler.createBalanceSheetCell(val, fontSmallBold, Element.ALIGN_RIGHT, 0, 0,0);
        }*/


        return  retnum;

    }
    private static JSONObject getCVDetails(CustomDesignDAO customDesignDAOobj , Map requestMap) throws JSONException, ServiceException {
        JSONObject retJobj = new JSONObject();
        
        int moduleid=0;  String id="";  String companyid=""; Date endDate=new Date();Date asofDate=new Date();Date startDate=new Date();
                
        String templateSubType = requestMap.get("templatesubtype").toString();
        moduleid = Integer.parseInt(requestMap.get("moduleid").toString());
        id = (String)requestMap.get("transactionId");
        companyid = (String)requestMap.get("companyid");
        endDate = (Date) requestMap.get("endDate");
        startDate = (Date) requestMap.get("startDate");
        asofDate = (Date) requestMap.get("asofDate");
//        DateFormat df = (DateFormat)requestMap.get("df");
        DateFormat df = (DateFormat)requestMap.get("userdf");
        
        KwlReturnObject result = null;
        KwlReturnObject companyDetails = null;
        List list = null;
        try {
            JSONObject jobj = new JSONObject();
            
            companyDetails = customDesignDAOobj.getCompanyPreferences(companyid);
            list = companyDetails.getEntityList();
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                Object[] obj = (Object[]) itr.next();
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyName, obj[0]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyGSTNumber, obj[1]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyRegNo, obj[1]);
            }
            
            String isDefaultAddress = "T";
            String isBillingAddress = "T";
            companyDetails = customDesignDAOobj.getCompanyAddress(companyid,isBillingAddress,isDefaultAddress); // Billing Address
            list = companyDetails.getEntityList();
            itr = list.iterator();
            while (itr.hasNext()) {
                Object[] obj = (Object[]) itr.next();
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyBillingAddress, obj[0]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyBillingAddressCity, obj[1]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyBillingAddressState, obj[2]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyBillingAddressCountry, obj[3]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyBillingAddressPostalCode, obj[4]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyBillingAddressPhone, obj[5]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyBillingAddressMobile, obj[6]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyBillingAddressFax, obj[7]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyBillingAddressEmail, obj[8]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyBillingAddressContactPerson, obj[9]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyBillingAddressContactPersonNumber, obj[10]);
            }
            
            isBillingAddress = "F";
            companyDetails = customDesignDAOobj.getCompanyAddress(companyid,isBillingAddress,isDefaultAddress); // Shipping Address
            list = companyDetails.getEntityList();
            itr = list.iterator();
            while (itr.hasNext()) {
                Object[] obj = (Object[]) itr.next();
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyShippingAddress, obj[0]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyShippingAddressCity, obj[1]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyShippingAddressState, obj[2]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyShippingAddressCountry, obj[3]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyShippingAddressPostalCode, obj[4]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyShippingAddressPhone, obj[5]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyShippingAddressMobile, obj[6]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyShippingAddressFax, obj[7]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyShippingAddressEmail, obj[8]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyShippingAddressContactPerson, obj[9]);
                jobj.put(CustomDesignerConstants.CustomDesignSOACompanyShippingAddressContactPersonNumber, obj[10]);
            }
            
            
            if (moduleid == Constants.Acc_Customer_AccStatement_ModuleId) {
                result = customDesignDAOobj.getCustomerDetails(id.trim());
                list = result.getEntityList();
                Iterator ite = list.iterator();
                while (ite.hasNext()) {
//                    Object[] obj = (Object[]) ite.next();
                    ArrayList dataList = (ArrayList) ite.next();
                    JSONObject addressDetails = getTotalBillingShippingAddress(dataList,true);
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerCode, dataList.get(0));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerName1, dataList.get(1));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerAlias, dataList.get(2));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerUEN, dataList.get(4));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerOpeningBalance, dataList.get(5));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerCreditTerm, dataList.get(7));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerCreditSalesLimit, dataList.get(8));
                    if(!templateSubType.equals("2")){// If subtype is 2 (Transaction currency) then don't put currency fields
                        jobj.put(CustomDesignerConstants.CustomDesignSOACustomerCurrencyCode, dataList.get(9));
                        jobj.put(CustomDesignerConstants.CustomDesignSOACustomerCurrency, dataList.get(10));
                        jobj.put(CustomDesignerConstants.CustomDesignSOACustomerCurrencySymbol, dataList.get(11));
                    }
                    //Billing Address fields
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerBillingAddress, dataList.get(12));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerBillingAddressCity, dataList.get(13));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerBillingAddressState, dataList.get(14));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerBillingAddressCountry, dataList.get(15));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerBillingAddressPostalCode, dataList.get(16));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerBillingAddressPhoneNumber, dataList.get(17));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerBillingAddressMobileNumber, dataList.get(18));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerBillingAddressFax, dataList.get(19));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerBillingAddressEmail, dataList.get(20));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerBillingAddressContactPerson, dataList.get(21));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerBillingAddressContactPersonNumber, dataList.get(22));
                    jobj.put(CustomDesignerConstants.CustomDesignSOABillTO, addressDetails.get("billingaddress"));
                    //Shipping Address fields
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerShippingAddress, dataList.get(23));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerShippingAddressCity, dataList.get(24));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerShippingAddressState, dataList.get(25));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerShippingAddressCountry, dataList.get(26));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerShippingAddressPostalCode, dataList.get(27));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerShippingAddressPhoneNumber, dataList.get(28));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerShippingAddressMobileNumber, dataList.get(29));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerShippingAddressFax, dataList.get(30));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerShippingAddressEmail, dataList.get(31));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerShippingAddressContactPerson, dataList.get(32));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerShippingAddressContactPersonNumber, dataList.get(33));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAShipTo, addressDetails.get("shippingaddress"));
                    //Sales person Details
                    jobj.put(CustomDesignerConstants.CustomDesignSOASalesPersonName, dataList.get(34));
                    jobj.put(CustomDesignerConstants.CustomDesignSOASalesPersonDesignation, dataList.get(35));
                    jobj.put(CustomDesignerConstants.CustomDesignSOASalesPersonEmail, dataList.get(36));
                    jobj.put(CustomDesignerConstants.CustomDesignSOASalesPersonCode, dataList.get(37));
                    jobj.put(CustomDesignerConstants.CustomDesignSOA_NET_Credit_Term, dataList.get(38));
                    jobj.put(CustomDesignerConstants.CustomDesignSOACustomerGSTIN, dataList.get(41));
                }
            } else {
                result = customDesignDAOobj.getVendorDetails(id.trim());
                list = result.getEntityList();
                Iterator ite = list.iterator();
                while (ite.hasNext()) {
//                    Object[] obj = (Object[]) ite.next();
                    ArrayList dataList = (ArrayList) ite.next();
                    JSONObject addressDetails = getTotalBillingShippingAddress(dataList,false);
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorCode, dataList.get(0));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorName1, dataList.get(1));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorAlias, dataList.get(2));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorUEN, dataList.get(4));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorDebitTerm, dataList.get(6));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorDebitSalesLimit, dataList.get(7));
                    if(!templateSubType.equals("2")){// If subtype is 2 (Transaction currency) then don't put currency fields
                        jobj.put(CustomDesignerConstants.CustomDesignSOAVendorCurrencyCode, dataList.get(8));
                        jobj.put(CustomDesignerConstants.CustomDesignSOAVendorCurrency, dataList.get(9));
                        jobj.put(CustomDesignerConstants.CustomDesignSOAVendorCurrencySymbol, dataList.get(10));
                    }
                    //Billing Address fields
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorBillingAddress, dataList.get(11));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorBillingAddressCity, dataList.get(12));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorBillingAddressState, dataList.get(13));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorBillingAddressCountry, dataList.get(14));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorBillingAddressPostalCode, dataList.get(15));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorBillingAddressPhoneNumber, dataList.get(16));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorBillingAddressMobileNumber, dataList.get(17));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorBillingAddressFax, dataList.get(18));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorBillingAddressEmail, dataList.get(19));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorBillingAddressContactPerson, dataList.get(20));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorBillingAddressContactPersonNumber, dataList.get(21));
                    jobj.put(CustomDesignerConstants.CustomDesignSOABillTO, addressDetails.get("billingaddress"));
                    
                    //Shipping Address fields
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorShippingAddress, dataList.get(22));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorShippingAddressCity, dataList.get(23));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorShippingAddressState, dataList.get(24));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorShippingAddressCountry, dataList.get(25));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorShippingAddressPostalCode, dataList.get(26));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorShippingAddressPhoneNumber, dataList.get(27));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorShippingAddressMobileNumber, dataList.get(28));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorShippingAddressFax, dataList.get(29));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorShippingAddressEmail, dataList.get(30));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorShippingAddressContactPerson, dataList.get(31));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorShippingAddressContactPersonNumber, dataList.get(32));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAShipTo, addressDetails.get("shippingaddress"));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAAgentName, dataList.get(33));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAAgentDesignation, dataList.get(34));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAAgentEmail, dataList.get(35));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAAgentCode, dataList.get(36));
                    jobj.put(CustomDesignerConstants.CustomDesignSOA_NET_Debit_Term, dataList.get(37));
                    jobj.put(CustomDesignerConstants.CustomDesignSOAVendorGSTIN, dataList.get(41));
                }
            } 
            jobj.put(CustomDesignerConstants.EndDateField,df.format(endDate));
            jobj.put(CustomDesignerConstants.AsofDateField,df.format(asofDate));
            jobj.put(CustomDesignerConstants.StartDateField,df.format(startDate));
            retJobj = jobj;
        } catch (Exception ex) {
            Logger.getLogger(ExportRecord.class.getName()).log(Level.SEVERE, null, ex);
        }
        return retJobj;
    }
    public static JSONObject getTotalBillingShippingAddress(ArrayList list, boolean isCustomer) {
        JSONObject retJobj = new JSONObject();
        String billingAddress="";
        String shippingAddress="";
        String baddr="",bpostalcode="",bcity="",bstate="",bcountry="",bcounty = "";
        String saddr="",spostalcode="",scity="",sstate="",scountry="", scounty = "";
        try{
            if(list!=null){
//                     String billingCountryName = (list.get(15)!=null && !StringUtil.isNullOrEmpty(list.get(15).toString()))?list.get(15).toString() :"";;
//                     billingCountryName = billingCountryName.trim();
//                     billingCountryName = billingCountryName.toLowerCase();
//                     
//                     String shippingCountryName = (list.get(25)!=null && !StringUtil.isNullOrEmpty(list.get(25).toString()))?list.get(25).toString() :"";;
//                     shippingCountryName = shippingCountryName.trim();
//                     shippingCountryName = shippingCountryName.toLowerCase();
                     
                     if (isCustomer) {
                        baddr=(list.get(12)!=null && !StringUtil.isNullOrEmpty(list.get(12).toString()))?list.get(12).toString() :"";
                        bcity=(list.get(13)!=null && !StringUtil.isNullOrEmpty(list.get(13).toString()))?"!##"+list.get(13).toString() :"";
                        bstate=(list.get(14)!=null && !StringUtil.isNullOrEmpty(list.get(14).toString()))?"!##"+list.get(14).toString() :"";
                        bcountry=(list.get(15)!=null && !StringUtil.isNullOrEmpty(list.get(15).toString()))?"!##"+list.get(15).toString() :"";
                        bpostalcode=(list.get(16)!=null && !StringUtil.isNullOrEmpty(list.get(16).toString()))?"!##"+list.get(16).toString() :"";
                        bcounty=(list.get(39)!=null && !StringUtil.isNullOrEmpty(list.get(39).toString()))?"!##"+list.get(39).toString() :"";

                        saddr=(list.get(23)!=null && !StringUtil.isNullOrEmpty(list.get(23).toString()))?"!##"+list.get(23).toString() :"";
                        spostalcode=(list.get(27)!=null && !StringUtil.isNullOrEmpty(list.get(27).toString()))?"!##"+list.get(27).toString() :"";
                        scity=(list.get(24)!=null && !StringUtil.isNullOrEmpty(list.get(24).toString()))?"!##"+list.get(24).toString() :"";
                        sstate=(list.get(25)!=null && !StringUtil.isNullOrEmpty(list.get(25).toString()))?"!##"+list.get(25).toString() :"";
                        scountry=(list.get(26)!=null && !StringUtil.isNullOrEmpty(list.get(26).toString()))?"!##"+list.get(26).toString() :"";
                        scounty=(list.get(40)!=null && !StringUtil.isNullOrEmpty(list.get(40).toString()))?"!##"+list.get(40).toString() :"";
                     } else {
                        baddr=(list.get(11)!=null && !StringUtil.isNullOrEmpty(list.get(11).toString()))?list.get(11).toString() :"";
                        bcity=(list.get(12)!=null && !StringUtil.isNullOrEmpty(list.get(12).toString()))?"!##"+list.get(12).toString() :"";
                        bstate=(list.get(13)!=null && !StringUtil.isNullOrEmpty(list.get(13).toString()))?"!##"+list.get(13).toString() :"";
                        bcountry=(list.get(14)!=null && !StringUtil.isNullOrEmpty(list.get(14).toString()))?"!##"+list.get(14).toString() :"";
                        bpostalcode=(list.get(15)!=null && !StringUtil.isNullOrEmpty(list.get(15).toString()))?"!##"+list.get(15).toString() :"";
                        bcounty=(list.get(39)!=null && !StringUtil.isNullOrEmpty(list.get(39).toString()))?"!##"+list.get(39).toString() :"";

                        saddr=(list.get(22)!=null && !StringUtil.isNullOrEmpty(list.get(22).toString()))?"!##"+list.get(22).toString() :"";
                        spostalcode=(list.get(26)!=null && !StringUtil.isNullOrEmpty(list.get(26).toString()))?"!##"+list.get(26).toString() :"";
                        scity=(list.get(23)!=null && !StringUtil.isNullOrEmpty(list.get(23).toString()))?"!##"+list.get(23).toString() :"";
                        sstate=(list.get(24)!=null && !StringUtil.isNullOrEmpty(list.get(24).toString()))?"!##"+list.get(24).toString() :"";
                        scountry=(list.get(25)!=null && !StringUtil.isNullOrEmpty(list.get(25).toString()))?"!##"+list.get(25).toString() :"";
                        scounty=(list.get(40)!=null && !StringUtil.isNullOrEmpty(list.get(40).toString()))?"!##"+list.get(40).toString() :"";
                     }
                     
                     if(bcountry.contains("malaysia")){ 
                        billingAddress = baddr + bpostalcode + bcity + bstate + bcountry;
                     } else if(bcountry.equals("us") || bcountry.contains("usa") || bcountry.contains("united states")){ 
                        billingAddress = baddr + bcounty + bcity + bstate + bpostalcode + bcountry;
                     } else if(bcountry.equals("singapore")){ 
                        billingAddress = baddr + bcountry + bpostalcode;
                     } else{
                        billingAddress = baddr + bcity + bstate + bcountry + bpostalcode;
                     }
                     
                     if(scountry.contains("malaysia")){ 
                        shippingAddress = saddr + spostalcode + scity + sstate + scountry;
                     } else if(scountry.equals("us") || scountry.contains("usa") || scountry.contains("united states")){ 
                        shippingAddress = saddr + scounty + scity + sstate + spostalcode + scountry;
                     } else if(scountry.equals("singapore")){ 
                        shippingAddress = saddr + scountry + spostalcode;
                     } else{
                        shippingAddress = saddr + scity + sstate + scountry + spostalcode;
                     }
                     retJobj.put("billingaddress", billingAddress);
                     retJobj.put("shippingaddress", shippingAddress);
            }
            
            
        }catch(Exception ex){
           Logger.getLogger(ExportRecord.class.getName()).log(Level.SEVERE, null, ex); 
        }
        return retJobj;
    }
    private static String replaceGloballevelFieldsForSOA(String html, JSONObject jobj, int moduleid, String templatesubtype,JSONObject allFieldParameters) throws JSONException, ServiceException {
        KwlReturnObject result = null;
        List list = null;
        try { 
                HashMap<String, String> fieldMap = null;
                if (moduleid == Constants.Acc_Customer_AccStatement_ModuleId) {
                    fieldMap = CustomDesignerConstants.CustomDesignSOACustomerExtraFieldsMap;
                } else {
                    fieldMap = CustomDesignerConstants.CustomDesignSOAVendorExtraFieldsMap;
                }
                if(templatesubtype.equals("2")){// If subtype is 2 (Transaction currency) then remove currency fields map
                    HashMap<String, String> removeMap = CustomDesignerConstants.CustomDesignSOACurrencyExtraFieldsMap;
                    for (Map.Entry<String, String> removeFieldEntry : removeMap.entrySet()) {
                        fieldMap.remove(removeFieldEntry.getKey());
                    }
                } else{// Put currency fields map
                    fieldMap.putAll(CustomDesignerConstants.CustomDesignSOACurrencyExtraFieldsMap);
                }
                for (Map.Entry<String, String> fieldentry : fieldMap.entrySet()) {
                    String valueSeperator = allFieldParameters.optString(fieldentry.getKey().trim() + "valueSeparator","");
                    String val = jobj.optString(fieldentry.getKey().trim(), "").replaceAll("\n", "<br />");
                    if(!StringUtil.isNullOrEmpty(valueSeperator)){
                        val = replaceWithValueSeperator(val.toString(), valueSeperator);
                    }
                    html = html.replace("#" + fieldentry.getKey().trim() + "#", val);
                }

            
        } catch (Exception ex) {
            Logger.getLogger(ExportRecord.class.getName()).log(Level.SEVERE, null, ex);
        }
        return html;
    }

    private static String replaceGlobalLevelFields (String html, CustomDesignDAO customDesignDAOObj,AccCommonTablesDAO accCommonTablesDAO, int moduleid,String companyid, String SOID, 
            String sqlquery, List<String> invoiceCols, DateFormat df, HashMap<String, Integer> default_headers,  String json,boolean isLineitemRow, int negativeValueIn, int countryid,JSONObject allFieldParameters) throws JSONException, ServiceException {
        KwlReturnObject result = null;
        List list = null;
        Object[] rows = null;
        if(moduleid==Constants.Acc_Invoice_ModuleId || moduleid == Constants.Acc_ConsignmentInvoice_ModuleId || moduleid == Constants.LEASE_INVOICE_MODULEID)
               result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where invoice.id = ? ");
        else if (moduleid == Constants.Acc_Sales_Order_ModuleId ||moduleid == Constants.Acc_ConsignmentRequest_ModuleId || moduleid == Constants.Acc_Lease_Order_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where salesorder.id = ? ");
        } else if (moduleid == Constants.Acc_Purchase_Order_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where purchaseorder.id = ? ");
        } else if (moduleid == Constants.Acc_Credit_Note_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where creditnote.id = ? ");
        } else if (moduleid == Constants.Acc_Debit_Note_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where debitnote.id = ? ");
        } else if (moduleid == Constants.Acc_Delivery_Order_ModuleId||moduleid == Constants.Acc_ConsignmentDeliveryOrder_ModuleId || moduleid == Constants.Acc_Lease_DO) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where deliveryorder.id = ? ");
        } else if (moduleid == Constants.Acc_Goods_Receipt_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where grorder.id = ? ");
        } else if (moduleid == Constants.Acc_Make_Payment_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where payment.id = ? ");
        } else if (moduleid == Constants.Acc_Receive_Payment_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where receipt.id = ? ");
        } else if (moduleid == Constants.Acc_Vendor_Invoice_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where goodsreceipt.id = ? ");
        } else if (moduleid == Constants.Acc_Customer_Quotation_ModuleId || moduleid == Constants.Acc_Lease_Quotation) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where quotation.id = ?  ");
        } else if (moduleid == Constants.Acc_Vendor_Quotation_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where vendorquotation.id = ? ");
        }else if (moduleid == Constants.Acc_Sales_Return_ModuleId||moduleid == Constants.Acc_ConsignmentSalesReturn_ModuleId || moduleid == Constants.Acc_Lease_Return) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where salesreturn.id = ? ");
        }else if (moduleid == Constants.Acc_Purchase_Return_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where purchasereturn.id = ? ");
        } else if (moduleid == Constants.Acc_Stock_Request_ModuleId||moduleid == Constants.Inventory_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where in_goodsrequest.id = ? ");
        } else if (moduleid == Constants.Acc_Stock_Adjustment_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where in_stockadjustment.id = ? ");
        } else if (moduleid == Constants.Acc_InterStore_ModuleId||moduleid == Constants.Acc_InterLocation_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where in_interstoretransfer.id = ? ");
        }else if (moduleid == Constants.Acc_RFQ_ModuleId) {
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where requestforquotation.id = ? ");
        }else if (moduleid == Constants.Acc_Purchase_Requisition_ModuleId) { //ERP-19851
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where purchaserequisition.id = ? ");
        }else if (moduleid == Constants.Build_Assembly_Module_Id) { //ERM-26
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where productbuild.id = ? ");
        }else if (moduleid == Constants.MRP_WORK_ORDER_MODULEID) { //ERM-558 MRP Work Order
            result = customDesignDAOObj.getSQLNativeQueryResult(SOID, sqlquery + " where workorder.id = ? ");
        }
        
        list = result.getEntityList();
        for (int cnt = 0; cnt < list.size(); cnt++) {
            if (CustomDesignHandler.isArray(list.get(cnt))) {
                rows = (Object[]) list.get(cnt);
            } else {
                List objectArr = new ArrayList();
                objectArr.add(list.get(cnt));
                rows = objectArr.toArray();
            }
            for (int colCnt = 0; colCnt < rows.length; colCnt++) {
                Object col = rows[colCnt];
                if (default_headers.containsKey(invoiceCols.get(colCnt))) {
                    int xtype = default_headers.get(invoiceCols.get(colCnt));
                    switch (xtype) {
                        case 3:
                            try{
                            java.sql.Timestamp sqlDate = (java.sql.Timestamp) col;
                            if (sqlDate != null) {
                                Date date = new Date(sqlDate.getTime());
                                col = df.format(date);
                            } else {
                                col = "";
                            }} catch(ClassCastException e){ //To handle java.sql.Date cannot cast to java.sql.Timestamp exception.
                                Date date = (Date) col;
                                col = df.format(date);
                            }
                            break;
                        case 2:
                            col = authHandler.formattedAmount(Double.parseDouble(col.toString()), companyid);
                            break;
                        case 1:
                            col = col != null ? col.toString().replaceAll("(\r\n|\n\r|\r|\n)", "<br />"):"";
                            break;
                    } 
                }
//                int decimalPrecision = getDecimalPrecision(new JSONObject("{JSON:" +json+"}"),invoiceCols.get(colCnt));
                int decimalPrecision = allFieldParameters.optInt(invoiceCols.get(colCnt) + "decimalPrecision",2);
//                String valueSeperator = getValueSeperator(new JSONObject("{JSON:" +json+"}"),invoiceCols.get(colCnt));
                String valueSeperator = allFieldParameters.optString(invoiceCols.get(colCnt) + "valueSeparator","");
                boolean zeroValueAsBlank = allFieldParameters.optBoolean(invoiceCols.get(colCnt) + "showzerovalueasblank", false);
                boolean isNoWrapValue = allFieldParameters.optBoolean(invoiceCols.get(colCnt) + "isnowrapvalue", false);
                if ( col == null || StringUtil.isNullOrEmpty(col.toString()) ) {
//                    String defVal = getDefaultFieldValue(new JSONObject("{JSON:" +json+"}"),invoiceCols.get(colCnt));
                    String defVal = allFieldParameters.optString(invoiceCols.get(colCnt) + "defaultValue","");
                    if(decimalPrecision != -1){
                        try{
                            double doublevalue = Double.parseDouble(defVal);
                            defVal = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision,countryid);
                        }catch(Exception ex){
                        }
                    }
                    if(zeroValueAsBlank){
                        defVal = CustomDesignHandler.getZeroAmountAsBlank(defVal);
                    }
                    if(!StringUtil.isNullOrEmpty(valueSeperator)){
                        defVal = replaceWithValueSeperator(defVal, valueSeperator);
                    }
                    if(!StringUtil.isNullOrEmpty(defVal)){
                        html = html.replace("#" + invoiceCols.get(colCnt) + "#", defVal);
                    } else{
//                        if ( !isLineitemRow ) {
                            html = removeSelectFieldHavingNoDataFromHTML(html,invoiceCols.get(colCnt).toString());
//                        }
                    }
                } else {
                    if(decimalPrecision != -1){
                        try{
                            double doublevalue = Double.parseDouble(col.toString());
                            col = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision,countryid);
                        }catch(Exception ex){
                        }
                    }
                    if(zeroValueAsBlank){
                        col = CustomDesignHandler.getZeroAmountAsBlank(col.toString());
                    }
                    if(!StringUtil.isNullOrEmpty(valueSeperator)){
                        col = replaceWithValueSeperator(col.toString(), valueSeperator);
                    }
                    
                    if(invoiceCols.get(colCnt).equalsIgnoreCase("cursym")){
                        col = accCommonTablesDAO.getCustomCurrencySymbol(col.toString(), companyid);
                    }
                    if(invoiceCols.get(colCnt).equalsIgnoreCase("Currency Code")){
                        col = accCommonTablesDAO.getCustomCurrencyCode(col.toString(), companyid);
                    }
                    if (isNoWrapValue) {
                        col = getNonWrappingValue(col.toString());
                    }
                    html = html.replace("#" + invoiceCols.get(colCnt) + "#", col != null ? col.toString() : "");
                }
                
            }
        }
                
        return html;
    } 
    
    public static AccCustomData getCustomDataObject ( int moduleid, String invoiceID,AccountingHandlerDAO accountingHandlerDAOobj) throws JSONException, ServiceException {
        KwlReturnObject objItr= null;
        Object[] rows = null;
        AccCustomData  accCustomData = null;
        if(moduleid==Constants.Acc_Invoice_ModuleId || moduleid==Constants.Acc_ConsignmentInvoice_ModuleId || moduleid==Constants.LEASE_INVOICE_MODULEID || moduleid == Constants.Acc_FixedAssets_DisposalInvoice_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), invoiceID);
            Invoice invoice = (Invoice) objItr.getEntityList().get(0);
            String jID = invoice.getJournalEntry() != null ? invoice.getJournalEntry().getID() :"";
            
            KwlReturnObject custumObjresult = null;
            if (!StringUtil.isNullOrEmpty(jID)) {
                try {
                    custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                } catch (Exception ex) {
                    Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
                }
                accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
            }
        } 
        else if (moduleid == Constants.Acc_Sales_Order_ModuleId||moduleid == Constants.Acc_ConsignmentRequest_ModuleId || moduleid == Constants.Acc_Lease_Order_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(SalesOrder.class.getName(), invoiceID);
            SalesOrder so = (SalesOrder) objItr.getEntityList().get(0);
            if (so.getSoCustomData() != null) 
                accCustomData =  so.getSoCustomData();
        } else if (moduleid == Constants.Acc_Purchase_Order_ModuleId || moduleid == Constants.Acc_FixedAssets_Purchase_Order_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), invoiceID);
            PurchaseOrder so = (PurchaseOrder) objItr.getEntityList().get(0);
            accCustomData =  so.getPoCustomData();
        } else if (moduleid == Constants.Acc_Credit_Note_ModuleId) {
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), invoiceID);
            CreditNote creditNote = (CreditNote) cap.getEntityList().get(0);
            String jID = creditNote.getJournalEntry().getID();
            KwlReturnObject custumObjresult = null;
            if (!StringUtil.isNullOrEmpty(jID)) {
                try {
                    custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                } catch (Exception e) {
                }
                accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
            }
        } else if (moduleid == Constants.Acc_Debit_Note_ModuleId) {
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), invoiceID);
            DebitNote debitNote = (DebitNote) cap.getEntityList().get(0);
            String jID = debitNote.getJournalEntry().getID();
            KwlReturnObject custumObjresult = null;
            if (!StringUtil.isNullOrEmpty(jID)) {
                try {
                    custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                } catch (Exception e) {
                }
                accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
            }
        } else if (moduleid == Constants.Acc_Delivery_Order_ModuleId||moduleid == Constants.Acc_ConsignmentDeliveryOrder_ModuleId || moduleid == Constants.Acc_Lease_DO || moduleid == Constants.Acc_FixedAssets_DeliveryOrder_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), invoiceID);
            DeliveryOrder DO = (DeliveryOrder) objItr.getEntityList().get(0);
            if (DO.getDeliveryOrderCustomData() != null) 
                accCustomData =  DO.getDeliveryOrderCustomData();
        } else if (moduleid == Constants.Acc_Goods_Receipt_ModuleId || moduleid == Constants.Acc_FixedAssets_GoodsReceipt_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), invoiceID);
            GoodsReceiptOrder goodsReceiptOrder = (GoodsReceiptOrder) objItr.getEntityList().get(0);
            if (goodsReceiptOrder.getGoodsReceiptOrderCustomData() != null) {
                accCustomData = goodsReceiptOrder.getGoodsReceiptOrderCustomData();
            }
        } else if (moduleid == Constants.Acc_Make_Payment_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), invoiceID);
            Payment pm = null;
            if (objItr.getEntityList().size() > 0) {
                pm = (Payment) objItr.getEntityList().get(0);
            }
            String jID = "";
            if(pm!=null){
                jID = pm.getJournalEntry().getID();
            }            
            KwlReturnObject custumObjresult = null;
            if (!StringUtil.isNullOrEmpty(jID)) {
                try {
                    custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                } catch (Exception e) {
                }
                accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
            }
        } else if (moduleid == Constants.Acc_Receive_Payment_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), invoiceID);
            Receipt receipt = (Receipt) objItr.getEntityList().get(0);
            String jID = receipt!=null?receipt.getJournalEntry().getID():"";
            KwlReturnObject custumObjresult = null;
            if (!StringUtil.isNullOrEmpty(jID)) {
                try {
                    custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                } catch (Exception e) {
                }
                accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
            }
        } else if (moduleid == Constants.Acc_Vendor_Invoice_ModuleId || moduleid == Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invoiceID);
            GoodsReceipt goodsReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
            String jID = goodsReceipt.getJournalEntry().getID();
            KwlReturnObject custumObjresult = null;
            if (!StringUtil.isNullOrEmpty(jID)) {
                try {
                    custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jID);
                } catch (Exception e) {
                }
                accCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
            }
        } else if (moduleid == Constants.Acc_Customer_Quotation_ModuleId || moduleid == Constants.Acc_Lease_Quotation) {
            objItr = accountingHandlerDAOobj.getObject(Quotation.class.getName(), invoiceID);
            Quotation quotation = (Quotation) objItr.getEntityList().get(0);
            if (quotation.getQuotationCustomData() != null) 
                accCustomData =  quotation.getQuotationCustomData();
        } else if (moduleid == Constants.Acc_Vendor_Quotation_ModuleId || moduleid == Constants.Acc_FixedAssets_Vendor_Quotation_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(VendorQuotation.class.getName(), invoiceID);
            VendorQuotation vendorquotation = (VendorQuotation) objItr.getEntityList().get(0);
            if (vendorquotation.getVendorQuotationCustomData()!= null) 
                accCustomData =  vendorquotation.getVendorQuotationCustomData();
        } else if (moduleid == Constants.Acc_Sales_Return_ModuleId || moduleid == Constants.Acc_Lease_Return || moduleid == Constants.Acc_FixedAssets_Sales_Return_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), invoiceID);
            SalesReturn sr = (SalesReturn) objItr.getEntityList().get(0);
            if (sr.getSalesReturnCustomData() != null) {
                accCustomData = sr.getSalesReturnCustomData();
            }
        } else if (moduleid == Constants.Acc_Purchase_Return_ModuleId || moduleid == Constants.Acc_FixedAssets_Purchase_Return_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), invoiceID);
            PurchaseReturn pr = (PurchaseReturn) objItr.getEntityList().get(0);
            if (pr.getPurchaseReturnCustomData() != null) {
                accCustomData = pr.getPurchaseReturnCustomData();
            }
        } else if (moduleid == Constants.Acc_RFQ_ModuleId || moduleid == Constants.Acc_FixedAssets_RFQ_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(RequestForQuotation.class.getName(), invoiceID);
            RequestForQuotation rfq = (RequestForQuotation) objItr.getEntityList().get(0);
            if (rfq.getRfqCustomData() != null) {
                accCustomData = rfq.getRfqCustomData();
            }
        } else if (moduleid == Constants.Inventory_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(StockRequest.class.getName(), invoiceID);
            StockRequest stockRequest = (StockRequest) objItr.getEntityList().get(0);
            if (stockRequest.getStockCustomData() != null) {
                accCustomData = stockRequest.getStockCustomData();
            }
        } else if (moduleid == Constants.Acc_Customer_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(CustomerCustomData.class.getName(), invoiceID.trim());
            accCustomData = (CustomerCustomData) objItr.getEntityList().get(0);
        } else if (moduleid == Constants.Acc_Vendor_ModuleId) {
            KwlReturnObject custumObjresult = null;
            custumObjresult = accountingHandlerDAOobj.getObject(VendorCustomData.class.getName(), invoiceID.trim());
            accCustomData = (VendorCustomData) custumObjresult.getEntityList().get(0);
        } else if (moduleid == Constants.Acc_Purchase_Requisition_ModuleId || moduleid == Constants.Acc_FixedAssets_PurchaseRequisition_ModuleId) { //ERP-19851
            objItr = accountingHandlerDAOobj.getObject(PurchaseRequisition.class.getName(), invoiceID);
            PurchaseRequisition pr = (PurchaseRequisition) objItr.getEntityList().get(0);
            accCustomData =  pr.getPurchaseRequisitionCustomData();
        } else if (moduleid == Constants.Acc_InterStore_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(InterStoreTransferRequest.class.getName(), invoiceID);
            InterStoreTransferRequest interStoreTransReq = (InterStoreTransferRequest) objItr.getEntityList().get(0);
            accCustomData =  interStoreTransReq.getISTCustomData();
        } else if (moduleid == Constants.Acc_Stock_Adjustment_ModuleId) {
            objItr = accountingHandlerDAOobj.getObject(StockAdjustment.class.getName(), invoiceID);
            StockAdjustment stockAdj = (StockAdjustment) objItr.getEntityList().get(0);
            accCustomData = stockAdj.getStockAdjustmentCustomData();
        } else if (moduleid == Constants.MRP_WORK_ORDER_MODULEID) {
            objItr = accountingHandlerDAOobj.getObject(WorkOrder.class.getName(), invoiceID);
            WorkOrder workOrder = (WorkOrder) objItr.getEntityList().get(0);
            accCustomData = workOrder.getAccWorkOrderCustomData();
        }
        return accCustomData;
    } 
    
    private static HashMap getDefaultHeaderName_Xtype(CustomDesignDAO customDesignDAOObj, JSONArray jArr) throws JSONException, ServiceException {
        
        String fieldIds = "";
        KwlReturnObject result = null;
        List list = null;
        Object[] rows = null;
        for (int cnt = 0; cnt < jArr.length(); cnt++) {
            JSONObject jObj = jArr.getJSONObject(cnt);
            if (!StringUtil.isNullOrEmpty(jObj.optString("fieldid", ""))) {
                fieldIds += "'" + jObj.getString("fieldid") + "',";
            } else if (!StringUtil.isNullOrEmpty(jObj.optString("lineitems", ""))) {
                continue;
            }else if (!StringUtil.isNullOrEmpty(jObj.optString("cellplaceholder", ""))) {
                JSONArray GlobalField_JArr = new JSONArray(jObj.optString("cellplaceholder", ""));
                for (int gf_cnt = 0; gf_cnt < GlobalField_JArr.length(); gf_cnt++) {
                    JSONObject gf_jObj = GlobalField_JArr.getJSONObject(gf_cnt);
                    if (!StringUtil.isNullOrEmpty(gf_jObj.optString("fieldid", ""))) {
                        fieldIds += "'" + gf_jObj.getString("fieldid") + "',";
                    } 
                }
                continue;
            }
        }
        
        HashMap<String, Integer> default_headers = new HashMap();
        if(!StringUtil.isNullOrEmpty(fieldIds)){
            fieldIds = fieldIds.substring(0, fieldIds.length() - 1);
            /*
            * Below function called to fetch defaultHeader name which is used for placeholder - select defaultHeader, dummyvalue, xtype
            */
            result = customDesignDAOObj.getDummyValue(fieldIds);
            list = result.getEntityList();
            for(int cnt=0;cnt<list.size();cnt++) {
                rows = (Object[]) list.get(cnt);
                default_headers.put(rows[0].toString(), Integer.parseInt(rows[2].toString()));
            }
        }
        return default_headers;
            
    }

    private static HashMap getDefaultHeaderName_XtypeNew(CustomDesignDAO customDesignDAOObj, JSONArray jArr) throws JSONException, ServiceException {

        String fieldIds = "";
        KwlReturnObject result = null;
        List list = null;
        Object[] rows = null;
        for (int cnt = 0; cnt < jArr.length(); cnt++) { // Iterate over rows
            JSONArray colJArr = jArr.getJSONObject(cnt).getJSONArray("data");
            for (int colcnt = 0; colcnt < colJArr.length(); colcnt++) {
                JSONArray itemsJArr = colJArr.getJSONObject(colcnt).getJSONArray("data");
                for (int itemCnt = 0; itemCnt < itemsJArr.length(); itemCnt++) {
                    JSONObject jObj = itemsJArr.getJSONObject(itemCnt);
                    if (!StringUtil.isNullOrEmpty(jObj.optString("fieldid", ""))) {
                        fieldIds += "'" + jObj.getString("fieldid") + "',";
                    } else if (!StringUtil.isNullOrEmpty(jObj.optString("lineitems", ""))) {
                        continue;
                    } else if (!StringUtil.isNullOrEmpty(jObj.optString("cellplaceholder", ""))) {
                        JSONArray GlobalField_JArr = new JSONArray(jObj.optString("cellplaceholder", ""));
                        for (int gf_cnt = 0; gf_cnt < GlobalField_JArr.length(); gf_cnt++) {
                            JSONObject gf_jObj = GlobalField_JArr.getJSONObject(gf_cnt);
                            if (!StringUtil.isNullOrEmpty(gf_jObj.optString("fieldid", ""))) {
                                fieldIds += "'" + gf_jObj.getString("fieldid") + "',";
                            }
                        }
                        continue;
                    } else if (jObj.optBoolean("isFirstRowPresent", false) || jObj.optBoolean("isLastRowPresent", false)) {   //Check for the line item table contains global rows
                        JSONArray tableJsonArray = new JSONArray(jObj.optString("data", "[]"));
                        //data of global rows of line item table is at 1(for first global row) and 2(for last global row) position in json. So starting counter from 1.
                        for (int globalrow = 1; globalrow < tableJsonArray.length();globalrow++) {
                            JSONArray globalRowArray = tableJsonArray.getJSONArray(globalrow);
                            for (int placecnt = 0; placecnt < globalRowArray.length(); placecnt++) {
                                JSONObject place = globalRowArray.getJSONObject(placecnt);
                                if (!StringUtil.isNullOrEmpty(place.optString("data", ""))) {
                                    JSONArray globalRowFieldArray = new JSONArray(place.optString("data", ""));
                                    for (int innerplacecnt = 0; innerplacecnt < globalRowFieldArray.length(); innerplacecnt++) {
                                        JSONObject cellplace = globalRowFieldArray.getJSONObject(innerplacecnt);
                                        if (!StringUtil.isNullOrEmpty(cellplace.optString("fieldid", ""))) {
                                            fieldIds += "'" + cellplace.getString("fieldid") + "',";
                                        }
                                    }
                                }
                            }
                        }    
                    }
                }
            }
        }

        HashMap<String, Integer> default_headers = new HashMap();
        if(!StringUtil.isNullOrEmpty(fieldIds)){
            fieldIds = fieldIds.substring(0, fieldIds.length() - 1);
            /*
            * Below function called to fetch defaultHeader name which is used for placeholder - select defaultHeader, dummyvalue, xtype
            */
            result = customDesignDAOObj.getDummyValue(fieldIds);
            list = result.getEntityList();
            for(int cnt=0;cnt<list.size();cnt++) {
                rows = (Object[]) list.get(cnt);
                default_headers.put(rows[0].toString(), Integer.parseInt(rows[2].toString()));
            }
        }
        return default_headers;

    }
    
    public static void exportSingleGeneric(HttpServletRequest request, HttpServletResponse response, HashMap<String, JSONArray> lineItemsArrMap,
            AccCustomData accCustomData, CustomDesignDAO customDesignDAOObj,AccCommonTablesDAO accCommonTablesDAO, accAccountDAO accAccountDAOobj, AccountingHandlerDAO accountingHandlerDAOobj, VelocityEngine velocityEngine,
            String invoicePostText, HashMap<String, Object> otherconfigrequestParams, AccInvoiceServiceDAO accInvoiceServiceDAOObj,AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAOobj) {
        try {
            JSONObject requestObj = StringUtil.convertRequestToJsonObject(request);
            boolean isLineItemPresent = false, isGstIncluded = false;
            String finalBuildHtml = "";
            String buildhtml = "";
            JSONObject jrepeat = new JSONObject();
            String pagelayoutproperty = "";
            int isnewdesign = 0;
            String pagefooterhtml = "", pageheaderhtml = "", pageheaderjson = "", pageheadersqlquery = "", linetemhtml = "", bottomDiv = "", topDiv = "";
            JSONArray customizedlineItems = new JSONArray();
            JSONObject jcur = new JSONObject();
            String fileName = requestObj.optString("filename");
            String templateid = requestObj.optString("templateid");
            String companyid = requestObj.optString(Constants.companyKey);
            String alignment = "", backgroundcolor = "", changedlabel = "";
            String fileType = requestObj.optString("filetype");
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(requestObj);//User Date Formatter;
            int moduleid = (Integer) otherconfigrequestParams.get(Constants.moduleid);
            boolean isDefaultTemplate = false;
            boolean isJobOrderFlow = otherconfigrequestParams.get(Constants.isJobOrderFlow) != null ? (boolean) otherconfigrequestParams.get(Constants.isJobOrderFlow) : false;
            boolean isConsignment = otherconfigrequestParams.get(Constants.isConsignment) != null ? Boolean.parseBoolean(String.valueOf(otherconfigrequestParams.get(Constants.isConsignment))) : false;
            String recordids = "";
            String headerCurrency = "", headerCurrencyCode = "", linkedreferencenumber = "", baseCurrencySymbol = "", baseCurrencyCode = "";
            String fontstylevalue = "";
            Boolean checkfooterflag = false;
            if (!StringUtil.isNullOrEmpty(requestObj.optString("recordids"))) {
                recordids = requestObj.optString("recordids");
            }
            if (StringUtil.isNullOrEmpty(recordids)) {
                recordids = otherconfigrequestParams.get("recordids") != null ? otherconfigrequestParams.get("recordids").toString() : "";
            }
            if (isJobOrderFlow) {
                recordids = otherconfigrequestParams.get("recordids") != null ? otherconfigrequestParams.get("recordids").toString() : "";
            }
            ArrayList<String> invoiceIDList = CustomDesignHandler.getSelectedBillIDs(recordids);
            ArrayList<String> buildHtml = new ArrayList<String>();
            ArrayList<String> pageFooterHtml = new ArrayList<String>();
            ArrayList<String> fontStyleValue = new ArrayList<String>();
            ArrayList<String> pageHeaderHtml = new ArrayList<String>();
            ArrayList<String> pageFontSize = new ArrayList<String>();
            int noOfVendor = 0;
            int countryid = 0;
            KwlReturnObject cmpObj = accountingHandlerDAOobj.getObject("com.krawler.common.admin.Company", companyid);
            if(cmpObj != null){
                Company cmp = (Company) cmpObj.getEntityList().get(0);
                if(cmp != null && cmp.getCountry()!= null && !StringUtil.isNullOrEmpty(cmp.getCountry().getID())){
                    countryid = Integer.parseInt(cmp.getCountry().getID());
                }
            }
            String invoiceid = "";
            for (int i = 0; i < invoiceIDList.size(); i++) {
                JSONArray lineItemsArr = new JSONArray();
                JSONArray lineItemsArrForRFQ = new JSONArray();
                if (moduleid == Constants.Acc_RFQ_ModuleId) { //For RFQ Multiple Vendor
                    lineItemsArrForRFQ = lineItemsArrMap.get(invoiceIDList.get(i));
                    invoiceid = invoiceIDList.get(i);
                    noOfVendor = lineItemsArrForRFQ.length();

                } else {
                    noOfVendor = 1;
                }
                for (int j = 0; j < noOfVendor; j++) {
                    KwlReturnObject result = customDesignDAOObj.getDesignTemplate(templateid);
                    List list = result.getEntityList();
                    Object[] rows = (Object[]) list.get(0);
                    String html = rows[2] != null ? rows[2].toString() : "";
                    String json = rows[1] != null ? rows[1].toString() : "";
                    String sqlquery = rows[3] != null ? rows[3].toString() : "";
                    pagelayoutproperty = rows[4] != null ? rows[4].toString() : "";
                    pagefooterhtml = rows[5] != null ? rows[5].toString() : "";
                    String pagefooterjson = rows[6] != null ? rows[6].toString() : "";
                    String pagefootersqlquery = rows[7] != null ? rows[7].toString() : "";
                    String templateSubtype = rows[8] != null ? rows[8].toString() : "";
                    pageheaderhtml = rows[9] != null ? rows[9].toString() : "";
                    pageheaderjson = rows[10] != null ? rows[10].toString() : "";
                    pageheadersqlquery = rows[11] != null ? rows[11].toString() : "";
                    if (rows[12] != null) {
                        Integer footerheader = (Integer) rows[12];
                        if (footerheader == 1) {
                            checkfooterflag = true;
                        }
                    }
                    if (moduleid == Constants.Acc_RFQ_ModuleId) {
                        lineItemsArr = lineItemsArrForRFQ.getJSONArray(j);
                    } else if (isJobOrderFlow){
                        invoiceid = invoiceIDList.get(i);
                        lineItemsArr = lineItemsArrMap.get(invoiceIDList.get(i).trim());
                        invoiceid = invoiceid.substring(0, invoiceid.lastIndexOf("_"));
                    } else if (templateSubtype.equals("2") && (moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId)){
                        invoiceid = invoiceIDList.get(i).trim();
                        lineItemsArr = lineItemsArrMap.get(invoiceid);
                        lineItemsArr = getSortedLineItemArr(lineItemsArr,"Date","3", "asc",df,moduleid);
                        if(invoiceid.contains("_")){
                            invoiceid = invoiceid.substring(0, invoiceid.lastIndexOf("_"));
                        }
                    } else if (moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                        lineItemsArr = lineItemsArrMap.get(invoiceIDList.get(i).trim());
                        lineItemsArr = getSortedLineItemArr(lineItemsArr,"Date","3", "asc",df,moduleid);
                        invoiceid = invoiceIDList.get(i);
                    } else {
                        lineItemsArr = lineItemsArrMap.get(invoiceIDList.get(i).trim());
                        invoiceid = invoiceIDList.get(i);
                    }
                    if (!(moduleid == Constants.Acc_Credit_Note_ModuleId || moduleid == Constants.Acc_Debit_Note_ModuleId || moduleid == Constants.Acc_Receive_Payment_ModuleId || moduleid == Constants.Acc_Make_Payment_ModuleId || moduleid == Constants.Acc_Stock_Request_ModuleId
                            || moduleid == Constants.Inventory_ModuleId || moduleid == Constants.Acc_Stock_Adjustment_ModuleId || moduleid == Constants.Acc_InterStore_ModuleId || moduleid == Constants.Acc_InterLocation_ModuleId || moduleid == Constants.MRP_WORK_ORDER_MODULEID)) {
                        jcur = lineItemsArr.getJSONObject(0);//appending currency in header of lineitems
                        //Transaction currency details
                        headerCurrency = jcur.has("currencysymbol") ? jcur.getString("currencysymbol") : "";
                        headerCurrency = accCommonTablesDAO.getCustomCurrencySymbol(headerCurrency, companyid);//Take custom currency symbol
                        headerCurrencyCode = jcur.has("currencycode") ? jcur.getString("currencycode") : "";
                        headerCurrencyCode = accCommonTablesDAO.getCustomCurrencyCode(headerCurrencyCode, companyid);//Take custom currency code
                        //Base currency details
                        baseCurrencySymbol = jcur.has("basecurrencysymbol") ? jcur.getString("basecurrencysymbol") : "";
                        baseCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(baseCurrencySymbol, companyid);//Take custom currency symbol
                        baseCurrencyCode = jcur.has("basecurrencycode") ? jcur.getString("basecurrencycode") : "";
                        baseCurrencyCode = accCommonTablesDAO.getCustomCurrencySymbol(baseCurrencyCode, companyid);//Take custom currency Code
                        
                        isGstIncluded = jcur.has("isGstIncluded") ? jcur.getBoolean("isGstIncluded") : false;
                        linkedreferencenumber = jcur.has("linkedreferenecenumber") ? jcur.getString("linkedreferenecenumber") : "";
                    }
                    if ((moduleid == Constants.Acc_Credit_Note_ModuleId || moduleid == Constants.Acc_Debit_Note_ModuleId) && templateSubtype.equals("1")) {
                        jcur = lineItemsArr.getJSONObject(i);//appending currency in header of lineitems
                        //Transaction currency details
                        headerCurrency = jcur.has("currencysymbol") ? jcur.getString("currencysymbol") : "";
                        headerCurrency = accCommonTablesDAO.getCustomCurrencySymbol(headerCurrency, companyid);//Take custom currency symbol
                        headerCurrencyCode = jcur.has("currencycode") ? jcur.getString("currencycode") : "";
                        headerCurrencyCode = accCommonTablesDAO.getCustomCurrencyCode(headerCurrencyCode, companyid);//Take custom currency symbol
                        //Base currency details
                        baseCurrencySymbol = jcur.has("basecurrencysymbol") ? jcur.getString("basecurrencysymbol") : "";
                        baseCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(baseCurrencySymbol, companyid);//Take custom currency symbol
                        baseCurrencyCode = jcur.has("basecurrencycode") ? jcur.getString("basecurrencycode") : "";
                        baseCurrencyCode = accCommonTablesDAO.getCustomCurrencySymbol(baseCurrencyCode, companyid);//Take custom currency Code
                        
                        isGstIncluded = jcur.has("isGstIncluded") ? jcur.getBoolean("isGstIncluded") : false;
                        linkedreferencenumber = jcur.has("linkedreferenecenumber") ? jcur.getString("linkedreferenecenumber") : "";

                    }
                    isnewdesign = rows[13] != null ? Integer.parseInt(rows[13].toString()) : 0;
                    isDefaultTemplate = rows[14] != null ? Boolean.TRUE.equals(Boolean.parseBoolean(rows[14].toString())) : false;
                    if (isnewdesign == 1) {
                        /**
                         * Required parameters
                         */
                        HashMap<String, Object> paramsMap = new HashMap();
                        paramsMap.put("moduleid", moduleid + "");
                        paramsMap.put("invoiceid", invoiceid);
                        paramsMap.put("json", json);
                        paramsMap.put("html", html);
                        paramsMap.put("sqlquery", sqlquery);
                        paramsMap.put("templateSubtype", templateSubtype);
                        paramsMap.put("pageheaderhtml", pageheaderhtml);
                        paramsMap.put("pagefooterhtml", pagefooterhtml);
                        paramsMap.put("pagefooterjson", pagefooterjson);
                        paramsMap.put("pagefootersqlquery", pagefootersqlquery);
                        paramsMap.put("headerCurrency", headerCurrency);
                        paramsMap.put("headerCurrencyCode", headerCurrencyCode);
                        paramsMap.put("linkedreferencenumber", linkedreferencenumber);
                        paramsMap.put("pagelayoutproperty", pagelayoutproperty);
                        paramsMap.put("pageheaderjson", pageheaderjson);
                        paramsMap.put("pageheadersqlquery", pageheadersqlquery);
                        paramsMap.put("baseCurrencySymbol", baseCurrencySymbol);
                        paramsMap.put("baseCurrencyCode", baseCurrencyCode);

                        paramsMap.put("lineItemsArr", lineItemsArr);
                        paramsMap.put("df", df);
                        
                        paramsMap.put("checkfooterflag", checkfooterflag);
                        paramsMap.put("isConsignment", isConsignment);
                        paramsMap.put("isJobOrderFlow", isJobOrderFlow);
                        paramsMap.put("isDefaultTemplate", isDefaultTemplate);
                        
                        /**
                         * Required objects
                         */
                        HashMap<String, Object> objMap = new HashMap();
                        objMap.put("accAccountDAOObj", accAccountDAOobj);
                        objMap.put("accountingHandlerDAOObj", accountingHandlerDAOobj);
                        objMap.put("velocityEngine", velocityEngine);
                        objMap.put("customDesignDAOObj", customDesignDAOObj);
                        objMap.put("accCommonTablesDAO", accCommonTablesDAO);
                        objMap.put("accInvoiceServiceDAOObj", accInvoiceServiceDAOObj);
                        objMap.put("accGoodsReceiptServiceDAOObj", accGoodsReceiptServiceDAOobj);
                        
                        HashMap<String, String> returnHashMap = exportTemplateWithNewDesign(request, requestObj, paramsMap, objMap);

                        buildHtml.add(returnHashMap.get("buildHtml"));
                        pageFooterHtml.add(returnHashMap.get("pagefooterhtml"));
                        fontStyleValue.add(returnHashMap.get("fontstylevalue"));
                        pageHeaderHtml.add(returnHashMap.get("pageheaderhtml"));
                        pageFontSize.add(returnHashMap.get("pagefontsize"));
                        // Write final Html of all document after all the Html get build.
                        if (i == (invoiceIDList.size() - 1) && j == (noOfVendor - 1)) {
                            CustomDesignHandler.writeFinalDataToFileNew(fileName + ".pdf", fileType, buildHtml, pagelayoutproperty, pageFooterHtml, response, moduleid, recordids, request, fontStyleValue, pageHeaderHtml, checkfooterflag, pageFontSize,returnHashMap.get("extLIJobj"));
                        }
                    } else {
                        JSONArray jArr = new JSONArray();
                        if (!StringUtil.isNullOrEmpty(json)) {
                            jArr = new JSONArray(json);
                        }
                        int lineItem_YAxis = 0;
                        int lineitemheight = 0;
                        int lineitemwidth = 850;
                        int aboveLineItemObject_YAxis = 0;

                        HashMap<String, Integer> bottomItems = new HashMap<String, Integer>();
                        List<String> invoiceCols = new ArrayList();
                        Matcher m = Pattern.compile("#(.+?)#").matcher(sqlquery);
                        while (m.find()) {
                            invoiceCols.add(m.group(1));
                        }
                        for (int cnt = 0; cnt < jArr.length(); cnt++) {
                            JSONObject jObj = jArr.getJSONObject(cnt);
                            if (!StringUtil.isNullOrEmpty(jObj.optString("lineitems", ""))) {
                                customizedlineItems = new JSONArray(jObj.optString("lineitems", "[]"));
                                lineItem_YAxis = jObj.optInt("y", -1);
                                lineitemheight = jObj.optInt("height", 60);
                                lineitemwidth = jObj.optInt("width", 850);
                                isLineItemPresent = true;
                            }
//                    else if(!StringUtil.isNullOrEmpty(jObj.getString("repeatglobalfield"))){
//                             repeatglobalfield=jObj.optString("repeatglobalfield", "");
//                    }
                            bottomItems.put(jObj.getString("id"), jObj.optInt("y", 0));
                        }
//              if(jArr.)
                /*
                         * Below block to replace module global placeholders
                         * with actual values //
                         */ //for product
                        if ((moduleid == Constants.Acc_Credit_Note_ModuleId && !templateSubtype.equals("1")) || moduleid == Constants.Acc_Debit_Note_ModuleId || moduleid == Constants.Acc_Receive_Payment_ModuleId || moduleid == Constants.Acc_Make_Payment_ModuleId) {
                            jrepeat = Globalcellrepeatrows(html, json, lineItemsArr, pagefooterhtml, moduleid, 0, pageheaderhtml, 0, countryid, new JSONObject());
                            html = jrepeat.getString("html");
                        }
                        HashMap<String, Integer> default_headers = getDefaultHeaderName_Xtype(customDesignDAOObj, jArr);
                        if (!StringUtil.isNullOrEmpty(sqlquery)) {
                            html = replaceGlobalLevelFields(html, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, invoiceIDList.get(i), sqlquery, invoiceCols, df, default_headers, json, false, 0,countryid,new JSONObject());
                            pageheaderhtml = replaceGlobalLevelFields(pageheaderhtml, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, invoiceIDList.get(i), sqlquery, invoiceCols, df, default_headers, json, false, 0,countryid,new JSONObject());
                            pagefooterhtml = replaceGlobalLevelFields(pagefooterhtml, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, invoiceIDList.get(i), sqlquery, invoiceCols, df, default_headers, json, false, 0,countryid,new JSONObject());
                        }

                        /*
                         * Below block to replace module custom global
                         * placeholders with actual values
                         */
                        /*
                         * to replace global section custom fields
                         */
                        JSONObject customfieldjson = new JSONObject();
                        HashMap<String, Object> customParams = new HashMap<String, Object>();

                        if (moduleid == Constants.Acc_ConsignmentDeliveryOrder_ModuleId && isConsignment) { //ERP-10723
                            TreeMap<String, String> diffdbCols = null;
                            diffdbCols = CustomDesignerConstants.ConsignmentDOtoOtherMap;
                            if (diffdbCols != null) {
                                TreeMap<String, String> moduletoOtherMap = (TreeMap<String, String>) diffdbCols.clone();
                                if (moduletoOtherMap != null) {
                                    for (Map.Entry<String, String> mapModule : moduletoOtherMap.entrySet()) {
                                        int mapModuleId = StringUtil.getInteger(mapModule.getValue());
                                        customParams.put(Constants.moduleid, mapModuleId);
                                        customParams.put("billid", linkedreferencenumber);
                                        customParams.put("pageheaderhtml", pageheaderhtml);
                                        customParams.put("html", html);
                                        customParams.put("pagefooterhtml", pagefooterhtml);
                                        customfieldjson = ReplaceCustomFields(requestObj, accountingHandlerDAOobj, accAccountDAOobj, customParams, json, new JSONObject());
                                        html = customfieldjson.optString("html", "");
                                        pagefooterhtml = customfieldjson.optString("pagefooterhtml", "");
                                        pageheaderhtml = customfieldjson.optString("pageheaderhtml", "");
                                    }
                                }
                            }
                        }
                        //If template is of asset type then update module id to asset module id
                        if (templateSubtype.equals(CustomDesignerConstants.ASSET)) {
                            if (moduleid == Constants.Acc_Purchase_Order_ModuleId ) {    //reassigning again moduleid to salesorder & delivery order
                                moduleid = Constants.Acc_FixedAssets_Purchase_Order_ModuleId;
                            } else if (moduleid == Constants.Acc_Purchase_Requisition_ModuleId ) {
                                moduleid = Constants.Acc_FixedAssets_PurchaseRequisition_ModuleId;
                            } else if (moduleid == Constants.Acc_RFQ_ModuleId ) {
                                moduleid = Constants.Acc_FixedAssets_RFQ_ModuleId;
                            } else if (moduleid == Constants.Acc_Vendor_Quotation_ModuleId ) {
                                moduleid = Constants.Acc_FixedAssets_Vendor_Quotation_ModuleId;
                            } else if (moduleid == Constants.Acc_Vendor_Invoice_ModuleId ) {
                                moduleid = Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId;
                            } else if (moduleid == Constants.Acc_Invoice_ModuleId ) {
                                moduleid = Constants.Acc_FixedAssets_DisposalInvoice_ModuleId;
                            } else if (moduleid == Constants.Acc_Goods_Receipt_ModuleId ) {
                                moduleid = Constants.Acc_FixedAssets_GoodsReceipt_ModuleId;
                            } else if (moduleid == Constants.Acc_Delivery_Order_ModuleId ) {
                                moduleid = Constants.Acc_FixedAssets_DeliveryOrder_ModuleId;
                            } else if (moduleid == Constants.Acc_Purchase_Return_ModuleId ) {
                                moduleid = Constants.Acc_FixedAssets_Purchase_Return_ModuleId;
                            } else if (moduleid == Constants.Acc_Sales_Return_ModuleId ) {
                                moduleid = Constants.Acc_FixedAssets_Sales_Return_ModuleId;
                            }
                        }
                        customParams.clear();
                        customParams.put("billid", invoiceIDList.get(i));
                        customParams.put(Constants.moduleid, moduleid);
                        customParams.put("pageheaderhtml", pageheaderhtml);
                        customParams.put("html", html);
                        customParams.put("pagefooterhtml", pagefooterhtml);
                        customfieldjson = ReplaceCustomFields(requestObj, accountingHandlerDAOobj, accAccountDAOobj, customParams, json, new JSONObject());
                        html = customfieldjson.optString("html", "");
                        pagefooterhtml = customfieldjson.optString("pagefooterhtml", "");
                        pageheaderhtml = customfieldjson.optString("pageheaderhtml", "");

                        if (templateSubtype.equals("1")) {
                            if (moduleid == Constants.Acc_ConsignmentRequest_ModuleId && isConsignment) {    //reassigning again moduleid to salesorder & delivery order
                                moduleid = Constants.Acc_Sales_Order_ModuleId;
                            } else if (moduleid == Constants.Acc_ConsignmentDeliveryOrder_ModuleId && isConsignment) {
                                moduleid = Constants.Acc_Delivery_Order_ModuleId;
                            } else if (moduleid == Constants.Acc_ConsignmentSalesReturn_ModuleId && isConsignment) {
                                moduleid = Constants.Acc_Sales_Return_ModuleId;
                            } else if (moduleid == Constants.Acc_ConsignmentInvoice_ModuleId && isConsignment) {
                                moduleid = Constants.Acc_Invoice_ModuleId;
                            } else if (moduleid == Constants.Acc_Credit_Note_ModuleId) {
                                moduleid = Constants.Acc_Sales_Return_ModuleId;
                            }
                        } else if (templateSubtype.equals("2")) {
                            if (moduleid == Constants.Acc_Lease_DO) {
                                moduleid = Constants.Acc_Delivery_Order_ModuleId;
                            }else if (moduleid == Constants.Acc_Lease_Return) {
                                moduleid = Constants.Acc_Sales_Return_ModuleId;
                            }
                        } else if (templateSubtype.equals(CustomDesignerConstants.ASSET)) {
                            //If template is of asset type then update module id to asset module id
                            if (moduleid == Constants.Acc_FixedAssets_Purchase_Order_ModuleId) {
                                moduleid = Constants.Acc_Purchase_Order_ModuleId;
                            } else if (moduleid == Constants.Acc_FixedAssets_PurchaseRequisition_ModuleId) {
                                moduleid = Constants.Acc_Purchase_Requisition_ModuleId;
                            } else if (moduleid == Constants.Acc_FixedAssets_RFQ_ModuleId) {
                                moduleid = Constants.Acc_RFQ_ModuleId;
                            } else if (moduleid == Constants.Acc_Vendor_Quotation_ModuleId) {
                                moduleid = Constants.Acc_FixedAssets_Vendor_Quotation_ModuleId;
                            } else if (moduleid == Constants.Acc_Vendor_Invoice_ModuleId) {
                                moduleid = Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId;
                            } else if (moduleid == Constants.Acc_Invoice_ModuleId) {
                                moduleid = Constants.Acc_FixedAssets_DisposalInvoice_ModuleId;
                            } else if (moduleid == Constants.Acc_Goods_Receipt_ModuleId) {
                                moduleid = Constants.Acc_FixedAssets_GoodsReceipt_ModuleId;
                            } else if (moduleid == Constants.Acc_Delivery_Order_ModuleId) {
                                moduleid = Constants.Acc_FixedAssets_DeliveryOrder_ModuleId;
                            } else if (moduleid == Constants.Acc_Purchase_Return_ModuleId) {
                                moduleid = Constants.Acc_FixedAssets_Purchase_Return_ModuleId;
                            } else if (moduleid == Constants.Acc_Sales_Return_ModuleId) {
                                moduleid = Constants.Acc_FixedAssets_Sales_Return_ModuleId;
                            }
                        }
                        
                        /*
                         * replace summary placeholders - Total Amount, Total
                         * Discount, Total Tax, Subtotal
                         */
                        HashMap<String, String> summaryFields = new HashMap<String, String>();
                        if (moduleid != Constants.Acc_Credit_Note_ModuleId && moduleid != Constants.Acc_Debit_Note_ModuleId && moduleid != Constants.Acc_Receive_Payment_ModuleId && moduleid != Constants.Acc_Make_Payment_ModuleId) {
                            for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
//                ArrayList<CustomDesignLineItemProp> rowDatalist = new ArrayList();
                                JSONObject itemData = lineItemsArr.getJSONObject(cnt);
                                if (itemData.has("summarydata")) {
//                            if (moduleid == Constants.Acc_Credit_Note_ModuleId && templateSubtype.contains("1")) {
//                                moduleid = Constants.Acc_Sales_Return_ModuleId;
//                            }
                                    summaryFields = LineItemColumnModuleMapping.InvoiceProductSummaryItems;
                                    for (Map.Entry<String, String> entry : summaryFields.entrySet()) {
                                        JSONObject staticColInfo = new JSONObject(summaryFields.get(entry.getKey()));
                                        String valueSeperator = getValueSeperator(new JSONObject("{JSON:" +json+"}"),staticColInfo.getString("label"));
                                        
                                        if (itemData.has(entry.getKey())) {
                                            String value = itemData.get(entry.getKey()).toString();
                                            if (staticColInfo.getString("xtype").equals("2")) {
                                                value = ConfigureDecimalPlaces(html, staticColInfo, value, CustomDesignerConstants.Tabletype, countryid);
                                            } else {
                                                value = value.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
                                            }
                                            if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                value = replaceWithValueSeperator(value, valueSeperator);
                                            }
                                            html = html.replace("#" + staticColInfo.getString("label") + "#", value);
                                            pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                            pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                        }
                                    }
                                    /*
                                     * To Add Extra fields related to perticular
                                     * module- (Mayur Bhokase)
                                     */
                                    HashMap<String, String> extraFields = new HashMap<String, String>();
                                    extraFields = getExtraFieldsForModule(moduleid,countryid);
                                    if (extraFields != null) {
                                        /**
                                         * get extra fields related to template subtype
                                         */
                                        extraFields = (HashMap<String, String>) extraFields.clone();
                                        HashMap<String, String> subtypExtraFieldsMap = null;
                                        subtypExtraFieldsMap = CustomDesignHandler.getExtraFieldsForSubtype(moduleid, templateSubtype, countryid);
                                        if(extraFields != null && subtypExtraFieldsMap != null){
                                            extraFields.putAll(subtypExtraFieldsMap);
                                        }
                                        for (Map.Entry<String, String> entry : extraFields.entrySet()) {
                                            JSONObject staticColInfo = new JSONObject(extraFields.get(entry.getKey()));
                                            String valueSeperator = getValueSeperator(new JSONObject("{JSON:" +json+"}"),staticColInfo.getString("label"));
                                            if (itemData.has(entry.getKey())) {
                                                String value = itemData.get(entry.getKey()).toString();
                                                if (staticColInfo.getString("xtype").equals("2")) {
                                                    value = ConfigureDecimalPlaces(html, staticColInfo, value, CustomDesignerConstants.Tabletype,countryid);
                                                } else {
                                                    value = value.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");//companyposttext
                                                }
                                                if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                    value = replaceWithValueSeperator(value, valueSeperator);
                                                }
                                                html = html.replace("#" + staticColInfo.getString("label") + "#", value);
                                                pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                                pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        /*
                         * Create jsoup object for html reader
                         */

                        org.jsoup.nodes.Document jsoupDoc = Jsoup.parse(html);


                        /*
                         * find out top and bottom items corresponding to Line
                         * items
                         */
                        HashMap<String, String> topHTMLItems = new HashMap<String, String>();
                        HashMap<String, String> bottomHTMLItems = new HashMap<String, String>();
                        if (isLineItemPresent) {
                            Map<String, Integer> sorted_map = CustomDesignHandler.getSortedMap(bottomItems);
                            for (Map.Entry<String, Integer> entry : sorted_map.entrySet()) {
                                org.jsoup.nodes.Element itemListElement = jsoupDoc.getElementById(entry.getKey());
                                if (lineItem_YAxis == entry.getValue()) // if line items
                                {
                                    continue;
                                }
                                if (lineItem_YAxis > entry.getValue()) {
                                    sorted_map.remove(entry.getKey());

                                    if (!itemListElement.getElementsByTag("img").isEmpty()) {
                                        org.jsoup.nodes.Element parent = itemListElement.parent();
                                        topHTMLItems.put(entry.getKey(), parent.outerHtml());
                                    } else {
                                        topHTMLItems.put(entry.getKey(), itemListElement.outerHtml());
                                    }
                                    if (aboveLineItemObject_YAxis < entry.getValue()) {
                                        JSONObject objectInfo = CustomDesignHandler.getJSONObjectFromItemID(jArr, entry.getKey());
                                        aboveLineItemObject_YAxis = entry.getValue() + objectInfo.optInt("height", 0);
                                    }

                                } else {
                                    Attributes styleAtt;
                                    if (!itemListElement.getElementsByTag("img").isEmpty()) {
                                        org.jsoup.nodes.Element parent = itemListElement.parent();
                                        styleAtt = parent.attributes();
                                    } else {
                                        styleAtt = itemListElement.attributes();
                                    }
                                    List<Attribute> attList = styleAtt.asList();
                                    boolean isTopAttrExist = false;
                                    for (Attribute a : attList) {
                                        if (a.getKey().equals("style")) {
                                            String newValue = "";
                                            String[] items = a.getValue().trim().split(";");
                                            for (String item : items) {
                                                String[] itemValues = item.split(":");
                                                if (!itemValues[0].trim().equals("top")) {
                                                    newValue = newValue.concat(item).concat(";");
//                                        top = itemValues[1];
                                                } else {
                                                    int ch = 0;
                                                    ch = ((int) (Double.parseDouble(itemValues[1].replace("px", "").trim())) - (lineItem_YAxis + lineitemheight));
                                                    newValue = newValue.concat("top:" + ch).concat("px;");
                                                }
                                            }
                                            a.setValue(newValue);
                                            break;
                                        }
                                    }
                                    if (!itemListElement.getElementsByTag("img").isEmpty()) {
                                        org.jsoup.nodes.Element parent = itemListElement.parent();
                                        bottomHTMLItems.put(entry.getKey(), parent.outerHtml());
                                    } else {
                                        bottomHTMLItems.put(entry.getKey(), itemListElement.outerHtml());
                                    }
                                }
                                jsoupDoc.getElementById(entry.getKey()).remove();
                            }
                        }

                        buildhtml = html;

                        /*
                         * Here we are building HTML if line items present by
                         * appending Top Items, line Iems and Bottom Items
                         * respectively
                         */
                        if (isLineItemPresent) {

                            /*
                             * append Top Items
                             */
                            if (!topHTMLItems.isEmpty()) {
                                topDiv = " <tr><td><div style='position:relative; width:" + CustomDesignHandler.pageWidth + "; height:" + lineItem_YAxis + "px;'>";
                                for (Map.Entry<String, String> entry : topHTMLItems.entrySet()) {
                                    String topitem = entry.getValue();
                                    topDiv = topDiv.concat(entry.getValue());
                                }
                                topDiv += "</div></td></tr>";
                            }
                            if (!checkfooterflag) { //Appending buildhtml for previous records
                                buildhtml = "<div style='display:table-cell;height:100%;vertical-align:top;'>";
                                buildhtml += topDiv;
                            } else {
                                buildhtml = "";
                            }

                            /*
                             * append Line Items
                             */
                            ArrayList<CustomDesignLineItemProp> headerlist = new ArrayList();
                            List prodlist = new ArrayList();
                            List totallist = new ArrayList();
                            jsoupDoc = Jsoup.parse(html);
                            org.jsoup.select.Elements itemListElement = jsoupDoc.getElementsByClass("tpl-content");
                            if (!itemListElement.isEmpty()) {
                                String top = "0px", left = "0px", tablewidth = String.valueOf(lineitemwidth);
                                org.jsoup.nodes.Element mainDiv = itemListElement.first();
                                Attributes styleAtt = mainDiv.attributes();
                                List<Attribute> attList = styleAtt.asList();
                                for (Attribute a : attList) {
                                    if (a.getKey().equals("style")) {
                                        String[] items = a.getValue().trim().split(";");
                                        for (String item : items) {
                                            String[] itemValues = item.split(":");
                                            if (itemValues[0].trim().equals("top")) {
                                                top = itemValues[1];
                                            } else if (itemValues[0].trim().equals("left")) {
                                                left = itemValues[1];
                                            } else if (itemValues[0].trim().equals("width")) {
                                                tablewidth = itemValues[1];
                                            }
                                        }
                                    }
                                }

                                /*
                                 * Configure Line Headers
                                 */
//                    TreeMap<String, String> lineCols = LineItemColumnModuleMapping.InvoiceProductLineMap;

                                for (int headerCnt = 0; headerCnt < customizedlineItems.length(); headerCnt++) {
                                    JSONObject colInfo = customizedlineItems.getJSONObject(headerCnt);
//                        if (lineCols.containsKey(colInfo.getString("fieldid"))) {
                                    CustomDesignLineItemProp headerprop = new CustomDesignLineItemProp();
//                            JSONObject staticColInfo = new JSONObject(lineCols.get(colInfo.getString("fieldid")));
                                    String headerproperty = colInfo.optString("headerproperty", "");
                                    if (!headerproperty.equals("")) {
                                        JSONObject jobjheader = new JSONObject(headerproperty);
                                        alignment = jobjheader.optString("alignment", "left");
                                        backgroundcolor = jobjheader.optString("backgroundcolor", "#FFFFFF");
                                        changedlabel = jobjheader.optString("changedlabel", "");
                                    }
                                    if (colInfo.getString("xtype").equals("2")) {//xtype-2
                                        if (!headerproperty.equals("")) {
                                            if ((colInfo.has("baserate") && colInfo.getString("baserate").equals("true") && isGstIncluded == true)) {
                                                if ((colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true"))) {
                                                    headerprop.setData(changedlabel + " Including GST" + "(" + headerCurrency + ")");
                                                } else {
                                                    headerprop.setData(changedlabel + " Including GST");
                                                }
                                            } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true")) {
                                                headerprop.setData((changedlabel) + "(" + headerCurrency + ")");
                                            } else {
                                                headerprop.setData(changedlabel);
                                            }
                                            headerprop.setAlign(alignment);
                                            if (backgroundcolor.isEmpty()) {
                                                headerprop.setBgcolor("#C0C0C0");
                                            } else {
                                                headerprop.setBgcolor(backgroundcolor);
                                            }
                                        } else {
                                            if ((colInfo.has("baserate") && colInfo.getString("baserate").equals("true") && isGstIncluded == true)) {
                                                if ((colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true"))) {
                                                    headerprop.setData("Rate Including GST" + "(" + headerCurrency + ")");
                                                } else {
                                                    headerprop.setData("Rate Including GST");
                                                }
                                            } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true")) {
                                                headerprop.setData(colInfo.getString("label") + "(" + headerCurrency + ")");
                                            } else {
                                                headerprop.setData(colInfo.getString("label"));
                                            }
                                            headerprop.setAlign("left");
                                            headerprop.setBgcolor("#C0C0C0");
                                        }
                                    } else if (!headerproperty.equals("")) {//if headerproperty is not empty//xtype-1
                                        if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true")) {
                                            headerprop.setData((changedlabel) + "(" + headerCurrency + ")");
                                        } else {
                                            headerprop.setData(changedlabel);
                                        }
                                        headerprop.setAlign(alignment);
                                        if (backgroundcolor.isEmpty()) {
                                            headerprop.setBgcolor("#C0C0C0");
                                        } else {
                                            headerprop.setBgcolor(backgroundcolor);
                                        }
                                    } else {//headerproperty is empty
                                        headerprop.setData(colInfo.optString("label", ""));
                                        headerprop.setAlign("left");
                                        headerprop.setBgcolor("#C0C0C0");
                                    }
                                    headerprop.setWidth(colInfo.getString("colwidth").concat("%"));
                                    headerlist.add(headerprop);
//                        }
                                }

//                    JSONArray lineItemsArr = accInvoiceCommon.getInvoiceDetailsItemJSON(request, companyid, invoiceID);
                                Boolean showtotal = false;
                                int totalCheckIndex = 0;
                                String decimalpoints = "2";
                                String decimalValue = "0";
                                Boolean totalCheck = false;
                                ArrayList<CustomDesignLineItemProp> rowtotallist = new ArrayList();
                                for (int count = 0; count < customizedlineItems.length(); count++) {
                                    rowtotallist.add(count, new CustomDesignLineItemProp());
                                }
                                ArrayList headerTotal = new ArrayList();
                                for (int count = 0; count < customizedlineItems.length(); count++) {
                                    headerTotal.add(count, 0.0d);
                                }
                                for (int headerCnt = 0; headerCnt < customizedlineItems.length(); headerCnt++) {
                                    JSONObject colInfo = customizedlineItems.getJSONObject(headerCnt);
                                    if (colInfo.optString("showtotal", "false").equals("true")) {
                                        showtotal = true;
                                        break;
                                    }
                                }
                                for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
                                    ArrayList<CustomDesignLineItemProp> rowDatalist = new ArrayList();
                                    JSONObject itemData = lineItemsArr.getJSONObject(cnt);
                                    /*
                                     * Summart data is already replaced above
                                     */
                                    if (itemData.has("summarydata") || itemData.has("otherfieldsdata")) {
                                        continue;
                                    } else {
                                        for (int headerCnt = 0; headerCnt < customizedlineItems.length(); headerCnt++) {
                                            JSONObject colInfo = customizedlineItems.getJSONObject(headerCnt);
//                                if (lineCols.containsKey(colInfo.getString("fieldid"))) {
                                            CustomDesignLineItemProp prop = new CustomDesignLineItemProp();
                                            CustomDesignLineItemProp totalListProp = new CustomDesignLineItemProp();
//                                    JSONObject staticColInfo = new JSONObject(lineCols.get(colInfo.getString("fieldid")));
                                            if (itemData.has(colInfo.getString("fieldid"))) {
                                                prop.setData(itemData.get(colInfo.getString("fieldid")).toString());
                                                if (colInfo.getString("xtype").equals("2")) {
                                                    double decimalRoundValue = 0;
                                                    double dobValue = 0;
                                                    int intValue = 0;
                                                    prop.setAlign("right");
                                                    if (!StringUtil.isNullOrEmpty(itemData.get(colInfo.getString("fieldid")).toString())) {
//                                                  decimalpoints=(colInfo.has("decimalpoint"))?((!StringUtil.isNullOrEmpty(colInfo.getString("decimalpoint")))?colInfo.getString("decimalpoint"):"4"):"4";
                                                        if (colInfo.has("decimalpoint") && !colInfo.getString("decimalpoint").toString().equals("undefined") && !colInfo.getString("decimalpoint").toString().equals("") && !colInfo.getString("decimalpoint").toString().equals("null")) {
                                                            //decimal point configuration in line item
                                                            decimalpoints = colInfo.getString("decimalpoint");
                                                            intValue = Integer.parseInt(decimalpoints);
                                                            dobValue = Double.parseDouble(itemData.get(colInfo.getString("fieldid")).toString());
                                                            decimalRoundValue = authHandler.round(dobValue, intValue);
                                                            if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue,countryid);
                                                            } else {
                                                                decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                if (intValue == 0) {//if comma is not given and decimal point is 0
                                                                    decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                }
                                                            }
                                                            prop.setData((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals("true")) && (!colInfo.getString("recordcurrency").equals("")) ? "" + headerCurrency + " " + decimalValue : decimalValue); //setting amount to company accpreferences.

                                                        } else {
                                                            dobValue = Double.parseDouble(itemData.get(colInfo.getString("fieldid")).toString());
                                                            if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                prop.setData((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals("true")) && (!colInfo.getString("recordcurrency").equals("")) ? "" + headerCurrency + " " + CustomDesignHandler.getAmountinCommaForm(dobValue,countryid) : CustomDesignHandler.getAmountinCommaForm(dobValue,countryid));
                                                            } else {
                                                                prop.setData((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals("true")) && (!colInfo.getString("recordcurrency").equals("")) ? "" + headerCurrency + " " + itemData.get(colInfo.getString("fieldid")).toString() : itemData.get(colInfo.getString("fieldid")).toString());
                                                            }
                                                        }
                                                    } else {
                                                        prop.setData("");
                                                    }
                                                } else {
                                                    prop.setAlign("left");
                                                    if (colInfo.has("basequantitywithuom")) {//case for quantity with uom
                                                        if (colInfo.get("basequantitywithuom").equals("true")) {
                                                            if (colInfo.has("decimalpoint") && !colInfo.getString("decimalpoint").toString().equals("undefined") && !colInfo.getString("decimalpoint").toString().equals("") && !colInfo.getString("decimalpoint").toString().equals("null")) { //decimal point configuration in line item
                                                                decimalpoints = colInfo.getString("decimalpoint");
                                                                String quantityWithUom = itemData.get(colInfo.getString("fieldid")).toString();
                                                                String splitQuantityWithUom[] = quantityWithUom.split(" ");
                                                                String quantity = splitQuantityWithUom[0];
                                                                String UOM = "";
                                                                try {
                                                                    UOM = splitQuantityWithUom[1];
                                                                } catch (Exception ex) {
                                                                    UOM = "";
                                                                }
                                                                int intValue = Integer.parseInt(decimalpoints);
                                                                double dobValue = Double.parseDouble(quantity);
                                                                double decimalRoundValue = authHandler.round(dobValue, intValue);
                                                                if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                    decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue,countryid);
                                                                } else {
                                                                    decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                    if (intValue == 0) {
                                                                        decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                    }
                                                                }
                                                                decimalValue = (decimalValue) + " " + (UOM);
                                                                prop.setData(decimalValue);
                                                            }
                                                        }
                                                    }
                                                }
                                                if (showtotal) {
                                                    if (colInfo.getString("showtotal").equals("true")) {
                                                        if (colInfo.getString("xtype").equals("2")) {
                                                            totalListProp.setAlign("right");
                                                            String caltotal = "0";
                                                            if (!StringUtil.isNullOrEmpty(itemData.get(colInfo.getString("fieldid")).toString())) {
                                                                caltotal = authHandler.formattedAmount((Double.parseDouble(itemData.get(colInfo.getString("fieldid")).toString())) + Double.parseDouble(headerTotal.get(headerCnt).toString()));
                                                                headerTotal.set(headerCnt, caltotal);
                                                                totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                            } else {
                                                                headerTotal.set(headerCnt, Double.parseDouble(headerTotal.get(headerCnt).toString()));
                                                                totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                            }
                                                        } else {
                                                            if (colInfo.getString("xtype").equals("1")) {
                                                                if (!totalCheck) {
                                                                    totalCheck = true;
                                                                    totalCheckIndex = headerCnt;
                                                                }
                                                                if (totalCheckIndex == headerCnt) {
                                                                    totalListProp.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                                                                } else {
                                                                    totalListProp.setData("");
                                                                }

                                                            } else {
                                                                totalListProp.setData("");
                                                            }
                                                        }
                                                    } else {
                                                        if (colInfo.getString("xtype").equals("1")) {
                                                            if (!totalCheck) {
                                                                totalCheck = true;
                                                                totalCheckIndex = headerCnt;
                                                            }
                                                            if (totalCheckIndex == headerCnt) {
                                                                totalListProp.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                                                            } else {
                                                                totalListProp.setData("");
                                                            }
                                                        } else {
                                                            totalListProp.setData("");
                                                        }
                                                    }
                                                }
                                                rowDatalist.add(prop);
                                                rowtotallist.set(headerCnt, totalListProp);
                                            } else {
                                                if (itemData.has("Custom_" + colInfo.getString("label"))) {
                                                    prop.setData(itemData.get("Custom_" + colInfo.getString("label")).toString());
                                                    if (colInfo.getString("xtype").equals("2")) {
                                                        prop.setAlign("right");
                                                        prop.setData(authHandler.formattedAmount(Double.parseDouble(itemData.get("Custom_" + colInfo.getString("label")).toString())));
                                                    } else {
                                                        prop.setAlign("left");
                                                    }
                                                    rowDatalist.add(prop);
                                                } else if (showtotal) {
                                                    if (colInfo.getString("showtotal").equals("true") && colInfo.getString("xtype").equals("2")) {
                                                        totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                    } else {
                                                        totalListProp.setData("");
                                                    }
                                                    rowtotallist.set(headerCnt, totalListProp);
                                                }
                                                prop.setData("");
                                                rowDatalist.add(prop);
                                            }
                                        }
                                        prodlist.add(rowDatalist);
                                    }
                                }
                                totallist.add(rowtotallist);
                                int lineItemTopSpacing = lineItem_YAxis - aboveLineItemObject_YAxis;
                                linetemhtml = CustomDesignHandler.getLineDataByVelocityEngine(velocityEngine, buildhtml, prodlist, headerlist, top, left, tablewidth, showtotal, totallist, pagelayoutproperty, lineItemTopSpacing + "px");
                                buildhtml = linetemhtml;
                            }

                            /*
                             * append Bottom Items
                             */
                            JSONArray jArr1 = new JSONArray(pagelayoutproperty);
                            for (int cnt = 0; cnt < jArr1.length(); cnt++) {
                                JSONObject jObj = jArr1.getJSONObject(cnt);
                                if (!StringUtil.isNullOrEmpty(jObj.optString("pagefontstyle", ""))) {
                                    JSONObject fontPropArray = new JSONObject(jObj.optString("pagefontstyle", ""));
                                    fontstylevalue = fontPropArray.optString("fontstyle", "");
                                }

                            }
                            if (StringUtil.isNullOrEmpty(fontstylevalue)) {
                                fontstylevalue = "sans-serif";
                            }
                            bottomDiv = "<tr><td><div class='bottomdiv' style='position:relative; width:" + CustomDesignHandler.pageWidth + ";font-family:" + fontstylevalue + ";'>";
                            for (Map.Entry<String, String> entry : bottomHTMLItems.entrySet()) {
                                String bottomitem = entry.getValue();
                                if (checkfooterflag) {//IF FOOTER & HEADER PROBLEM
                                    org.jsoup.nodes.Document jsoupDoc2 = Jsoup.parse(bottomitem);
                                    Elements itemListElement2 = jsoupDoc2.getElementsByTag("div");
                                    Attributes styleAtt = itemListElement2.get(0).attributes();

                                    for (Attribute a : styleAtt) {
                                        if (a.getKey().equals("style")) {
                                            String[] items = a.getValue().trim().split(";");
                                            String newValue = "";
                                            for (String item : items) {

                                                if (!(item.contains("position") || item.contains("height"))) {
                                                    newValue = newValue.concat(item).concat(";");
                                                }
                                            }
                                            a.setValue(newValue);
//                                itemListElement2.removeAttr(a.getKey());
                                        }
                                        if (a.getKey().equals("class")) {
                                            itemListElement2.removeAttr(a.getKey());
                                        }
                                    }
                                    bottomitem = jsoupDoc2.body().html();
                                }
                                bottomDiv = bottomDiv.concat(bottomitem);
                            }
                            bottomDiv += "</div></td></tr>";
                        }
                        if (!checkfooterflag) {
                            buildhtml += bottomDiv;
                            buildhtml = CustomDesignHandler.replaceImagePathWithAbsolute(requestObj.optString("cdomain"), buildhtml);
                            org.jsoup.nodes.Document jsoupDoc1 = Jsoup.parse(buildhtml);
                            jsoupDoc1.getElementsByAttribute("id").removeAttr("id");

                            buildhtml = jsoupDoc1.body().html();
                            buildhtml = " <div style='position:relative; width:" + CustomDesignHandler.pageWidth + ";font-family:" + fontstylevalue + "'>" + buildhtml + "</div>";
                            if (invoiceIDList.size() > 1) // if multiple records then need to add horizontal linein between templates
                            {
                                buildhtml += "<hr style='margin-top: 600px;'>";
                            }
                            finalBuildHtml += buildhtml;
                        }

                        /*
                         * Replace placeholder values for Page Footer if any
                         */
                        if (!StringUtil.isNullOrEmpty(pagefootersqlquery)) {
                            jArr = new JSONArray();
                            if (!StringUtil.isNullOrEmpty(pagefooterjson)) {
                                jArr = new JSONArray(pagefooterjson);
                            }
                            default_headers = getDefaultHeaderName_Xtype(customDesignDAOObj, jArr);

                            invoiceCols = new ArrayList();
                            m = Pattern.compile("#(.+?)#").matcher(pagefootersqlquery);
                            while (m.find()) {
                                invoiceCols.add(m.group(1));
                            }
                            pagefooterhtml = replaceGlobalLevelFields(pagefooterhtml, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, invoiceIDList.get(i), pagefootersqlquery, invoiceCols, df, default_headers, json, false, 0,countryid,new JSONObject());
                        }
                        pagefooterhtml = CustomDesignHandler.replaceImagePathWithAbsolute(requestObj.optString("cdomain"), pagefooterhtml);

                        //Replace placeholder values for Page Header if any
                        if (!StringUtil.isNullOrEmpty(pageheadersqlquery)) {
                            jArr = new JSONArray();
                            if (!StringUtil.isNullOrEmpty(pageheaderjson)) {
                                jArr = new JSONArray(pageheaderjson);
                            }
                            default_headers = getDefaultHeaderName_Xtype(customDesignDAOObj, jArr);

                            invoiceCols = new ArrayList();
                            m = Pattern.compile("#(.+?)#").matcher(pageheadersqlquery);
                            while (m.find()) {
                                invoiceCols.add(m.group(1));
                            }
                            pageheaderhtml = replaceGlobalLevelFields(pageheaderhtml, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, invoiceIDList.get(i), pageheadersqlquery, invoiceCols, df, default_headers, json, false, 0,countryid,new JSONObject());
                        }
                        pageheaderhtml = CustomDesignHandler.replaceImagePathWithAbsolute(requestObj.optString("cdomain"), pageheaderhtml);
                        /*
                         * Final call to add footer and body content in PDF
                         */
                    }
                }
            }

            if (isnewdesign == 0) {
                if (!checkfooterflag) {
                    org.jsoup.nodes.Document jsoupDoc1 = Jsoup.parse(finalBuildHtml);
                    Elements itemListElement1 = jsoupDoc1.getElementsByAttribute("id").removeAttr("id");
                    finalBuildHtml = jsoupDoc1.body().html();
                } else {//check footer flag
                    finalBuildHtml = topDiv + linetemhtml + bottomDiv;
                    finalBuildHtml = CustomDesignHandler.replaceImagePathWithAbsolute(requestObj.optString("cdomain"), finalBuildHtml);
                }
                CustomDesignHandler.writeFinalDataToFile(fileName + ".pdf", fileType, finalBuildHtml, pagelayoutproperty, pagefooterhtml, response, moduleid, recordids, request, fontstylevalue, pageheaderhtml, checkfooterflag);
            }
            /*
             * Code for generate pdf using itext
             */

//            Document document = new Document(PageSize.LETTER);
//            PdfWriter.getInstance(document, new FileOutputStream("/home/krawler/testpdf1.pdf"));
//            document.open();
//            HTMLWorker htmlWorker = new HTMLWorker(document);
//            String str = buildhtml;
//            htmlWorker.parse(new StringReader(str));
//            document.close();     
        } catch (SessionExpiredException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static HashMap<String, String> getExtraFieldsForModule(int moduleid,int countryid) {
        HashMap<String, String> map = null;

        switch (moduleid) {
            case Constants.Acc_Invoice_ModuleId: // Invoice
                map = CustomDesignerConstants.CustomDesignInvoiceExtraFieldsMap;
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignExtraFieldsForInvoiceIndia); 
                }else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignExtraFieldsForInvoiceIndia);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Vendor_Invoice_ModuleId: // Vendor Invoice 
                map = CustomDesignerConstants.CustomDesignVendorInvoiceExtraFieldsMap;
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignExtraFieldsForVendorInvoiceIndia); 
                } else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignExtraFieldsForVendorInvoiceIndia);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Debit_Note_ModuleId://DebitNote
                map = CustomDesignerConstants.CustomDesignDebitNoteExtraFieldsMap;
                // add or remove fields related to Indian
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia); 
                    map.putAll(CustomDesignerConstants.CustomDesignExtraFieldsForCN_DN_India); 
                } else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia);
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignExtraFieldsForCN_DN_India);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Credit_Note_ModuleId://CreditNote
                map = CustomDesignerConstants.CustomDesignCreditNoteExtraFieldsMap;
                // add or remove fields related to Indian
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia); 
                    map.putAll(CustomDesignerConstants.CustomDesignExtraFieldsForCN_DN_India); 
                } else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia);
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignExtraFieldsForCN_DN_India);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Make_Payment_ModuleId://14 - Make Payment;
                map = CustomDesignerConstants.CustomDesignMakePaymentNewExtraFieldsMap;
                // add or remove fields related to Indian
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia); 
                    //put Make Payment extra field map for india
                    map.putAll(CustomDesignerConstants.CustomDesignExtraFieldsForMakeAndReceivePaymentIndia); 
                    map.putAll(CustomDesignerConstants.TDS_Field_Map);
                } else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia);
                    //remove Make Payment extra field map for india
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignExtraFieldsForMakeAndReceivePaymentIndia);
                    map = removeIndianExtraFields(map, CustomDesignerConstants.TDS_Field_Map);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Receive_Payment_ModuleId://16 - Receive Payment
                map = CustomDesignerConstants.CustomDesignReceivePaymentNewExtraFieldsMap;
                // add or remove fields related to Indian
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia); 
                    //put Receive Payment extra field map for india
                    map.putAll(CustomDesignerConstants.CustomDesignExtraFieldsForMakeAndReceivePaymentIndia); 
                } else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia);
                    //remove Receive Payment extra field map for india
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignExtraFieldsForMakeAndReceivePaymentIndia);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Purchase_Order_ModuleId: // Purchase Order
                map = CustomDesignerConstants.CustomDesignPurchaseOrderExtraFieldsMap;
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignExtraFieldsForPurchaseOrderIndia); 
                } else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignExtraFieldsForPurchaseOrderIndia);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Sales_Order_ModuleId: // Sales Order
                map = CustomDesignerConstants.CustomDesignSalesOrderExtraFieldsMap;
                map.putAll(CustomDesignerConstants.CustomDesignConsignmentRequestExtraFieldsMap);
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignExtraFieldsForSalesOrderIndia); 
                }else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignExtraFieldsForSalesOrderIndia);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Customer_Quotation_ModuleId: // Custom Quotation
                map = CustomDesignerConstants.CustomDesignCustomerQuotationExtraFieldsMap;
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignExtraFieldsForCustomerQuotationIndia); 
                }else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignExtraFieldsForCustomerQuotationIndia);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Vendor_Quotation_ModuleId: // Vendor Quotation
                map = CustomDesignerConstants.CustomDesignVendorQuotationExtraFieldsMap;
                // add or remove fields related to Indian
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia); 
                } else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Delivery_Order_ModuleId: //Delivery Order
                map = CustomDesignerConstants.CustomDesignDOExtraFieldsMap;
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignExtraFieldsForDeliveryOrderIndia); 
                }else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignExtraFieldsForDeliveryOrderIndia);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Goods_Receipt_ModuleId: //Good Receipt Order
                map = CustomDesignerConstants.CustomDesignGROExtraFieldsMap;
                // add or remove fields related to Indian
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia); 
                } else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Sales_Return_ModuleId://Sales Return
                map = CustomDesignerConstants.CustomDesignSalesReturnExtraFieldsMap;
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignExtraFieldsForSalesReturnIndia); 
                }else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignExtraFieldsForSalesReturnIndia);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_ConsignmentRequest_ModuleId: // Sales Order
                map = CustomDesignerConstants.CustomDesignSalesOrderExtraFieldsMap;
                break;
            case Constants.Acc_ConsignmentDeliveryOrder_ModuleId: // Delivery Order
                map = CustomDesignerConstants.CustomDesignDOExtraFieldsMap;
                break;
            case Constants.Acc_ConsignmentInvoice_ModuleId: // Consignment Invoice
                map = CustomDesignerConstants.CustomDesignInvoiceExtraFieldsMap;
                break;
            case Constants.Acc_ConsignmentSalesReturn_ModuleId: // Consignment Sales Return
                map = CustomDesignerConstants.CustomDesignSalesReturnExtraFieldsMap;
                break;
            case Constants.Acc_Purchase_Return_ModuleId: // Purchase Return
                map = CustomDesignerConstants.CustomDesignPurchaseReturnExtraFieldsMap;
                // add or remove fields related to Indian
                if(countryid == Constants.indian_country_id){
                    map.putAll(CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia); 
                } else{
                    map = removeIndianExtraFields(map,CustomDesignerConstants.CustomDesignCommonExtraFieldsForIndia);
                }
                map = CustomDesignHandler.addRemoveSpecificExtraFields(map,countryid);
                break;
            case Constants.Acc_Stock_Request_ModuleId: // Purchase Return
                map = CustomDesignerConstants.CustomDesignStockRequestExtraFieldsMap;
                break;
            case Constants.Inventory_ModuleId: // Consignment Stock Request
                map = CustomDesignerConstants.CustomDesignStockRequestExtraFieldsMap;
                break;
            case Constants.Acc_Stock_Adjustment_ModuleId: // Consignment Stock Adjustment
                map = CustomDesignerConstants.CustomDesignStockAdjustmentExtraFieldsMap;
                break;
            case Constants.Acc_InterStore_ModuleId: // Consignment Stock Adjustment
                map = CustomDesignerConstants.CustomDesignInterStoreTransferExtraFieldsMap;
                break;
            case Constants.Acc_InterLocation_ModuleId: // Consignment Stock Adjustment
                map = CustomDesignerConstants.CustomDesignInterLocationstockTransferExtraFieldsMap;
                break;
            case Constants.Acc_RFQ_ModuleId: // Request For Quotation
                map = CustomDesignerConstants.CustomDesignRequestForQuotationExtraFieldsMap;
                break;
            case Constants.Acc_Purchase_Requisition_ModuleId: // Purchase Requisition //ERP-19851
                    map = CustomDesignerConstants.CustomDesignPurchaseRequisitionExtraFieldsMap;
                break;
            case Constants.Acc_Customer_AccStatement_ModuleId: // Customer SOA
                map = CustomDesignerConstants.CustomDesignSOACustomerExtraFieldsMap;
                map.putAll(CustomDesignerConstants.CustomDesignSOACurrencyExtraFieldsMap);
                break;
            case Constants.Acc_Vendor_AccStatement_ModuleId: // Vendor SOA
                map = CustomDesignerConstants.CustomDesignSOAVendorExtraFieldsMap;
                map.putAll(CustomDesignerConstants.CustomDesignSOACurrencyExtraFieldsMap);
                break;
            case Constants.Acc_Lease_DO: //Extra fields of  Lease Delivery Order
                map = CustomDesignerConstants.CustomDesignDOExtraFieldsMap;
                break;
            case Constants.Acc_Lease_Return: //Extra fields of  Lease Sales Return
                map = CustomDesignerConstants.CustomDesignSalesReturnExtraFieldsMap;
                break;
            case Constants.Acc_Stock_Repair_Report_ModuleId: // Inventory Stock Repair Module
                map = InventoryCustomDesignerConstants.CustomDesignStockRepairExtraFieldsMap;
                break;
            case Constants.MRP_WORK_ORDER_MODULEID: //MRP Work Order Module
                map = CustomDesignerConstants.CustomDesign_MRP_WORK_ORDER_ExtraFieldsMap;
                break;
            case Constants.Bank_Reconciliation_ModuleId: //Bank Reconciliation Module
                map = CustomDesignerConstants.CustomDesign_BANK_RECONCILIATION_ExtraFieldsMap;
                break;
            case Constants.Build_Assembly_Module_Id: //Build Assembly Module
                map = CustomDesignerConstants.CustomDesign_BUILD_ASSEMBLY_ExtraFieldsMap;
                break;
        }

        return map;
    }
        
    /**
     * Function for get Global and Line level Default and Custom fields for Job Order Flow only
     * @param moduleid for module
     * @param companyid for company
     * @param extraFields for appending job order flow fields in existing fields map
     * @return HashMap with existing and job order flow fields
     * @Author : Ashish Mohite
     */
    public static HashMap<String, String> getJobOrderFlowFields(int moduleid, String companyid, HashMap<String, String> extraFields, CustomDesignDAO customDesignDAOObj){
        
        try{
            // get common fields of job order flow
            extraFields.putAll(CustomDesignerConstants.CustomDesignCommon_JobOrderFlowExtraFieldsMap);
            // get module wise fields of job order flow
            if (moduleid == Constants.Acc_Invoice_ModuleId) {
                extraFields.putAll(CustomDesignerConstants.CustomDesignSI_JobOrderFlowExtraFieldsMap);
            } else if (moduleid == Constants.Acc_Sales_Order_ModuleId) {
                extraFields.putAll(CustomDesignerConstants.CustomDesignSO_JobOrderFlowExtraFieldsMap);
            }
            // get Global level custom fields
            KwlReturnObject result = customDesignDAOObj.getGlobalCustomFields(companyid, moduleid);
            List list = result.getEntityList();
            for (int ind = 0; ind < list.size(); ind++) {
                Object[] row = (Object[]) list.get(ind);
                JSONObject staticamountInfo = new JSONObject();
                staticamountInfo.put("id", row[0]);
                staticamountInfo.put("label", row[1]);
                staticamountInfo.put("xtype", row[2]);
                staticamountInfo.put("customfield", true);
                staticamountInfo.put("defaultHeader", row[1]);
                extraFields.put("Custom_"+row[1], staticamountInfo.toString());
            }
            // get Line level custom fields
            result = customDesignDAOObj.getCustomLineFields(companyid, moduleid);
            list = result.getEntityList();
            for (int ind = 0; ind < list.size(); ind++) {
                Object[] row = (Object[]) list.get(ind);
                JSONObject staticamountInfo = new JSONObject();
                staticamountInfo.put("fieldid", "col" + row[3]);
                staticamountInfo.put("id", "col" + row[3]);
                staticamountInfo.put("label", row[2]);
                staticamountInfo.put("xtype", row[1]);
                staticamountInfo.put("custom", true);
                extraFields.put("col" + row[3], staticamountInfo.toString());
            }
        } catch(JSONException ex){
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex){
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        return extraFields;
    }
    /**
     * Get module wise all extra map fields and custom fields
     * @param moduleid
     * @param companyid
     * @param extraFields
     * @param customDesignDAOObj
     * @return 
     */
    public static HashMap<String, String> getModulewiseExtraFieldsAndCustomFields(int moduleid, String companyid, HashMap<String, String> extraFields, CustomDesignDAO customDesignDAOObj){
        try{
            // get module wise extra map fields
            if(moduleid == Constants.Acc_Delivery_Order_ModuleId){
                extraFields.putAll(CustomDesignerConstants.CustomDesignDO_QA_Approval_ExtraFieldsMap);
            }
            // get QA inspection form extra map fields
            extraFields.putAll(CustomDesignerConstants.CustomDesign_QA_Inspecation_Form_ExtraFieldsMap);
            // get Global level custom fields
            KwlReturnObject result = customDesignDAOObj.getGlobalCustomFields(companyid, moduleid);
            List list = result.getEntityList();
            for (int ind = 0; ind < list.size(); ind++) {
                Object[] row = (Object[]) list.get(ind);
                JSONObject staticamountInfo = new JSONObject();
                staticamountInfo.put("id", row[0]);
                staticamountInfo.put("label", row[1]);
                staticamountInfo.put("xtype", row[2]);
                staticamountInfo.put("customfield", true);
                staticamountInfo.put("defaultHeader", row[1]);
                extraFields.put("Custom_"+row[1], staticamountInfo.toString());
            }
            // get Line level custom fields
            result = customDesignDAOObj.getCustomLineFields(companyid, moduleid);
            list = result.getEntityList();
            for (int ind = 0; ind < list.size(); ind++) {
                Object[] row = (Object[]) list.get(ind);
                JSONObject staticamountInfo = new JSONObject();
                staticamountInfo.put("fieldid", "col" + row[3]);
                staticamountInfo.put("id", "col" + row[3]);
                staticamountInfo.put("label", row[2]);
                staticamountInfo.put("xtype", row[1]);
                staticamountInfo.put("custom", true);
                extraFields.put("col" + row[3], staticamountInfo.toString());
            }
        } catch(JSONException ex){
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch(Exception ex){
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        return extraFields;
    }
    
    public static HashMap<String, String> removeIndianExtraFields(HashMap<String, String> map, HashMap<String, String> removeMap) {
        Iterator it = removeMap.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();
            if (map.containsKey(pair.getKey())) {
                map.remove(pair.getKey());
            }
        }
        return map;
    }
    
    /*
     * Neeraj D-->Checking the global cell if any Table row field is repeating
     * or not in global cell Property.If yes then append the html<tr>
     */
    public static JSONObject Globalcellrepeatrows(String html, String json, JSONArray lineItemsArr, String pagefooterhtml, int moduleid, int isnewdesign, String pageheaderhtml, int negativeValueIn, int countryid, JSONObject allFieldParameters) throws JSONException {
        JSONObject jobj = new JSONObject();
        JSONObject itemData = new JSONObject();

        JSONArray lineItemsAccountArrElements = new JSONArray();
        JSONArray lineItemsInvoiceArrElements = new JSONArray();
        JSONArray lineItemsCombineAccountInvoiceArrElements = new JSONArray();
        JSONArray lineItemsArrElements = new JSONArray();
        JSONArray dbCustomFieldItemsArrElements = new JSONArray();
        int prodDiscriptionRitchTextboxFlag=allFieldParameters.optInt("prodDiscriptionRitchTextboxFlag", 0);

//        JSONObject itemDatamixedaccinvelements = new JSONObject();
        try {
            String appendhtml = "";
            String concatappendhtml = "";
            String mainTableRow = "";
            String fixedrowvalue = "";
            JSONArray jArrjson = new JSONArray();
            TreeMap<String, String> summaryFields1 = new TreeMap<String, String>();
            HashMap<String, String> extraFields = new HashMap<String, String>();
            HashMap<String, String> dbcustomCols = new HashMap<String, String>();

            if (lineItemsArr.length() > 0 && (moduleid != Constants.Acc_Credit_Note_ModuleId && moduleid != Constants.Acc_Debit_Note_ModuleId && moduleid != Constants.Acc_Receive_Payment_ModuleId && moduleid != Constants.Acc_Make_Payment_ModuleId && moduleid != Constants.Acc_Vendor_AccStatement_ModuleId && moduleid != Constants.Acc_Customer_AccStatement_ModuleId)) {
                org.jsoup.nodes.Document jsoupDocele = Jsoup.parse(html);
                if (!jsoupDocele.getElementsByClass("globaltable").isEmpty()) {
                    org.jsoup.nodes.Element itemListElement1 = jsoupDocele.getElementsByClass("globaltable").get(0);
                    org.jsoup.nodes.Element finalTableClone = itemListElement1.clone();
                    Elements cloneRows = finalTableClone.getElementsByTag("tr");
                    for (org.jsoup.nodes.Element cloneRow : cloneRows) {
                        cloneRow.remove();
                    }
                    finalTableClone.outerHtml();
                    Elements itemListElementvv = jsoupDocele.getElementsByTag("tr");
                    if (!StringUtil.isNullOrEmpty(json)) {
                        jArrjson = new JSONArray(json);
                    }
                    TreeSet<Integer> repeatedRowIndex = new TreeSet<Integer>();

                    for (int ia = 0; ia < jArrjson.length(); ia++) {
                        fixedrowvalue = jArrjson.getJSONObject(ia).optString("fixedrowvalue", "");
                        if (!fixedrowvalue.isEmpty()) {
                            String[] splitfixedvalue = fixedrowvalue.split(",");
                            for (String s : splitfixedvalue) {
                                repeatedRowIndex.add(Integer.parseInt(s) - 1);
                            }
                        }
                    }
//                    repeatedRowIndex.c
                    int rowCnt = 0;
                    for (org.jsoup.nodes.Element singleRow : itemListElementvv) {
//                        String fixedrowvalue = jArrjson.getJSONObject(ia).optString("fixedrowvalue", "");
//                        if (!fixedrowvalue.isEmpty()) {
//                            String[] splitfixedvalue = fixedrowvalue.split(",");
//                        for (int equalflag = 0; equalflag < itemListElementvv.size(); equalflag++) {
                        if (repeatedRowIndex.contains(rowCnt)) {
                            mainTableRow = itemListElementvv.get(rowCnt).outerHtml();
                            itemListElementvv.get(rowCnt).remove();
                            summaryFields1 = LineItemColumnModuleMapping.InvoiceProductLineMap;
                            if(moduleid == Constants.Acc_Customer_Quotation_ModuleId ){
                                summaryFields1 = LineItemColumnModuleMapping.CustomerQuotationProductLineMap;
                            }

                            for (int in = 0; in < lineItemsArr.length() - 1; in++) {
                                itemData = lineItemsArr.getJSONObject(in);
                                appendhtml = mainTableRow;
                                for (Map.Entry<String, String> entry : summaryFields1.entrySet()) {
                                    JSONObject staticColInfo = new JSONObject(summaryFields1.get(entry.getKey()));
                                    if (itemData.has(entry.getKey())) {
                                        String value = itemData.get(entry.getKey()).toString();
                                        if (staticColInfo.getString("xtype").equals("2")) {
                                            value = CustomDesignHandler.getAmountinCommaForm(Double.parseDouble(value),countryid);
                                        }
                                        appendhtml = appendhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                        pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                    }
                                }
                                finalTableClone.append(appendhtml);
//                                    concatappendhtml+=appendhtml;
                            }
//                                org.jsoup.nodes.Document finalhtml = Jsoup.parse(concatappendhtml);
//                                Elements finalRows = finalhtml.getElementsByTag("tr");
//                                for(org.jsoup.nodes.Element finalSingleRow : finalRows) {
//                                    itemListElementvv.set(indexRow, finalSingleRow);
//                                    indexRow++;
//                                }
//                                itemListElementvv.outerHtml();
                        } else {
                            finalTableClone.append(singleRow.outerHtml());
                        }
                        rowCnt++;
                    }
//                    html = itemListElement1.outerHtml();
                    jobj.put("html", finalTableClone.outerHtml());
                }
            } else if (lineItemsArr.length() > 0 && (moduleid == Constants.Acc_Credit_Note_ModuleId || moduleid == Constants.Acc_Debit_Note_ModuleId)) {
                //Repeating the rows for account & invoice for Credit Note & Debit Note
                try {
                    org.jsoup.nodes.Document jsoupDocele = Jsoup.parse(html);
                    if (!jsoupDocele.getElementsByClass("globaltablerepeat").isEmpty()) {
                        for (int i = 0; i < jsoupDocele.getElementsByClass("globaltablerepeat").size(); i++) {
                            org.jsoup.nodes.Element itemListElement = jsoupDocele.getElementsByClass("globaltablerepeat").get(i);
                            org.jsoup.nodes.Element finalTableClone = itemListElement.clone();
                            Elements cloneRows = finalTableClone.getElementsByTag("tr");
                            for (org.jsoup.nodes.Element cloneRow : cloneRows) {
                                cloneRow.remove();
                            }
//                                finalTableClone.outerHtml();
                            Elements itemListElementvv = itemListElement.getElementsByTag("tr");
                            if (!StringUtil.isNullOrEmpty(json)) {
                                jArrjson = new JSONArray(json);
                            }
                            TreeSet<Integer> repeatedRowIndex = new TreeSet<Integer>();
                            if (isnewdesign == 0) {//for old design
                                for (int ia = 0; ia < jArrjson.length(); ia++) {
                                    fixedrowvalue = jArrjson.getJSONObject(ia).optString("fixedrowvalue", "");
                                    if (!fixedrowvalue.isEmpty()) {
                                        String[] splitfixedvalue = fixedrowvalue.split(",");
                                        for (String s : splitfixedvalue) {
                                            repeatedRowIndex.add(Integer.parseInt(s) - 1);//getting the repeated values
                                        }
                                    }
                                }
                            } else {//for new design
                                for (int ia = 0; ia < jArrjson.length(); ia++) {
                                    JSONArray colJArr = jArrjson.getJSONObject(ia).getJSONArray("data");
                                    for (int colcnt = 0; colcnt < colJArr.length(); colcnt++) {
                                        JSONArray itemsJArr = colJArr.getJSONObject(colcnt).getJSONArray("data");
                                        for (int itemCnt = 0; itemCnt < itemsJArr.length(); itemCnt++) {
                                            JSONObject jObj = itemsJArr.getJSONObject(itemCnt);
                                            if (jObj.optInt("fieldType", 0) == 12) {
                                                fixedrowvalue = jObj.optString("fixedrowvalue", "");
                                                if (!fixedrowvalue.isEmpty()) {
                                                    String[] splitfixedvalue = fixedrowvalue.split(",");
                                                    for (String s : splitfixedvalue) {
                                                        repeatedRowIndex.add(Integer.parseInt(s) - 1);//getting the repeated values
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            int rowCnt = 0;
                            if (!repeatedRowIndex.isEmpty()) {

                                lineItemsAccountArrElements = lineItemsArr.getJSONArray(0);
                                lineItemsInvoiceArrElements = lineItemsArr.getJSONArray(1);
                                int accountlength = lineItemsAccountArrElements.length();//total no of accounts
                                int invoicelength = lineItemsInvoiceArrElements.length();//total no of invoice
                                dbCustomFieldItemsArrElements = lineItemsArr.getJSONArray(3);//dbcustomfields
                                boolean repeatRowFlag = false;

                                for (org.jsoup.nodes.Element singleRow : itemListElementvv) { // Iterate over table rows
                                    
                                    int repeatedRowCnt = repeatedRowIndex.iterator().next();
                                    if (repeatedRowIndex.contains(rowCnt)) {//If it contains row repeated values else display comma separated values

                                        mainTableRow = itemListElementvv.get(rowCnt).outerHtml();
                                        itemListElementvv.get(rowCnt).remove();
                                        extraFields = getExtraFieldsForModule(moduleid,countryid);

                                        for (int count = 0; count < dbCustomFieldItemsArrElements.length(); count++) {//inserting dblineitem customfield in extrafield map
                                            JSONObject j = dbCustomFieldItemsArrElements.optJSONObject(count);
                                            Iterator it = j.keys();
                                            while (it.hasNext()) {
                                                String n = (String) it.next();
                                                extraFields.put(n, j.getString(n));
                                            }
                                        }

//check account and invoice length to parse total no of elements by setting in lineItemsCombineAccountInvoiceArrElements.length()
                                        if (accountlength > invoicelength || accountlength == invoicelength) {
                                            lineItemsCombineAccountInvoiceArrElements = lineItemsAccountArrElements;
                                        } else if (accountlength < invoicelength) {
                                            lineItemsCombineAccountInvoiceArrElements = lineItemsInvoiceArrElements;
                                        }

                                        for (int in = 0; in <= lineItemsCombineAccountInvoiceArrElements.length() - 1; in++) {
                                            boolean isEmptyRow = true; //flag for empty row // ERP-26833
                                            try {
                                                JSONObject itemDataaccountelements = new JSONObject();
                                                JSONObject itemDatainvoiceelements = new JSONObject();

                                                appendhtml = mainTableRow;
                                                try {
                                                    itemDataaccountelements = lineItemsAccountArrElements.getJSONObject(in);
                                                } catch (Exception ex) {
                                                    itemDataaccountelements = new JSONObject();
                                                }

                                                try {
                                                    itemDatainvoiceelements = lineItemsInvoiceArrElements.getJSONObject(in);
                                                } catch (Exception ex) {
                                                    itemDatainvoiceelements = new JSONObject();
                                                }

                                                for (Map.Entry<String, String> entry : extraFields.entrySet()) {
                                                    JSONObject staticColInfo = new JSONObject(extraFields.get(entry.getKey()));

                                                    if (itemDataaccountelements.has(entry.getKey())) {
                                                        String value = itemDataaccountelements.get(entry.getKey()).toString();

                                                        //Sorting Line level custom field and Dimensions
                                                        String ordereddimensionfields = "";
                                                        if (entry.getKey().toString().equals(CustomDesignerConstants.AllDimensions) || entry.getKey().toString().equals(CustomDesignerConstants.AllLinelevelCustomFields)) {
                                                            String fieldid = "";
                                                            if (entry.getKey().toString().equals(CustomDesignerConstants.AllDimensions)) {
                                                                fieldid = CustomDesignerConstants.AllDimensions;

                                                            } else if (entry.getKey().toString().equals(CustomDesignerConstants.AllLinelevelCustomFields)) {
                                                                fieldid = CustomDesignerConstants.AllLinelevelCustomFields;
                                                            } else {
                                                                fieldid = "";
                                                            }
                                                            HashMap<String, Object> fieldparams = new HashMap<String, Object>();
                                                            fieldparams.put(Constants.moduleid, moduleid);
                                                            fieldparams.put(CustomDesignerConstants.json, json);
                                                            fieldparams.put(CustomDesignerConstants.islineitem, "false");
                                                            fieldparams.put("isrepeattabletype", "true");
                                                            fieldparams.put(CustomDesignerConstants.fieldid, fieldid);
                                                            HashMap<String, Object> returnvalues = new HashMap<String, Object>();
                                                            returnvalues = CustomFieldDimensionwithSequence(fieldparams, itemDataaccountelements);
                                                            if (returnvalues.containsKey("prodData")) {
                                                                ordereddimensionfields = (String) returnvalues.get("prodData");
                                                                if (!StringUtil.isNullOrEmpty(ordereddimensionfields)) {
                                                                    value = ordereddimensionfields + "</br>";
                                                                }
                                                            }
                                                        }

                                                        if (staticColInfo.getString("xtype").equals("2")) {
                                                            //get decimal precision
                                                            int precision = allFieldParameters.optInt(staticColInfo.optString("label")+"decimalPrecision", 2);
                                                            value = CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(value.replaceAll(",", "")), precision, countryid);
                                                            //value = ConfigureDecimalPlaces(html, staticColInfo, value, CustomDesignerConstants.RepeatTabletype,countryid);
                                                            //value = CustomDesignHandler.getAmountinCommaForm(Double.parseDouble(value));
                                                            if(value.contains("-")){
                                                                if(negativeValueIn == 1){
                                                                    //No need to modification
                                                                } else if(negativeValueIn == 2){
                                                                    value = value.replace("-", "");
                                                                    value = "("+value+")";
                                                                }
                                                            }
                                                        }
                                                        value = value.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");  //ERP-20872
                                                        String valueSeperator = allFieldParameters.optString(staticColInfo.getString("label") + "valueSeparator","");
                                                        if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                            value = replaceWithValueSeperator(value, valueSeperator);
                                                        }
                                                        appendhtml = appendhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                                        if(!staticColInfo.getString("label").equals("Sr No.") && (mainTableRow.contains("#" + staticColInfo.getString("label") + "#") && value.length() > 0)){ // If column is present in row (except Sr No. because it always have value) and value is not empty then change empty flag to false //ERP-26833
                                                            isEmptyRow = false;
                                                        }
                                                    } else if (itemDatainvoiceelements.has(entry.getKey())) {
                                                        String value = itemDatainvoiceelements.get(entry.getKey()).toString();
                                                        if (staticColInfo.getString("xtype").equals("2") && !StringUtil.isNullOrEmpty(value)) {
                                                            //get decimal precision
                                                            int precision = allFieldParameters.optInt(staticColInfo.optString("label")+"decimalPrecision", 2);
                                                            value = CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(value.replaceAll(",", "")), precision, countryid);
                                                            //value = ConfigureDecimalPlaces(html, staticColInfo, value, CustomDesignerConstants.RepeatTabletype,countryid);
                                                            //value = CustomDesignHandler.getAmountinCommaForm(Double.parseDouble(value));
                                                            if(value.contains("-")){
                                                                if(negativeValueIn == 1){
                                                                    //No need to modification
                                                                } else if(negativeValueIn == 2){
                                                                    value = value.replace("-", "");
                                                                    value = "("+value+")";
                                                                }
                                                            }
                                                        } else if (staticColInfo.getString("xtype").equals("1") && !StringUtil.isNullOrEmpty(value)) {
                                                            value = StringUtil.DecodeText(value);
                                                        }
                                                        String valueSeperator = allFieldParameters.optString(staticColInfo.getString("label") + "valueSeparator","");
                                                        if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                            value = replaceWithValueSeperator(value, valueSeperator);
                                                        }
                                                        appendhtml = appendhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                                        if(!staticColInfo.getString("label").equals("Sr No.") && (mainTableRow.contains("#" + staticColInfo.getString("label") + "#") && value.length() > 0)){ // If column is present in row (except Sr No. because it always have value) and value is not empty then change empty flag to false //ERP-26833
                                                            isEmptyRow = false;
                                                        }
                                                    } else if (itemDatainvoiceelements.length() == 0 || itemDataaccountelements.length() == 0) {
                                                        appendhtml = appendhtml.replace("#" + staticColInfo.getString("label") + "#", "");
                                                    } else {
                                                        appendhtml = appendhtml.replace("#" + staticColInfo.getString("label") + "#", "");
                                                    }

                                                }
                                            } catch (Exception e) {
                                                continue;
                                            }
                                            if(finalTableClone.getElementsByTag("tbody").outerHtml().equals("")){ //If tbody not present then append tbody
                                                finalTableClone.appendElement("tbody");
                                            }
                                            if(!isEmptyRow){ // If whole row is empty (except Sr No.) then dont put in table
                                                finalTableClone.getElementsByTag("tbody").append(appendhtml);
                                            }
                                        }
                                    } else {
                                        if (Boolean.parseBoolean(singleRow.getElementsByTag("tr").attr("isheader"))) { //If table header present then put it in thead
                                            String tableHeader = singleRow.outerHtml();
                                            tableHeader = tableHeader.replaceAll("<td", "<th");
                                            tableHeader = tableHeader.replaceAll("</td>", "</th>");
                                            finalTableClone.getElementsByTag("tbody").remove(); // remove tbody
                                            finalTableClone.appendElement("thead"); // append thead for table header
                                            finalTableClone.getElementsByTag("thead").append(tableHeader); //insert table header in thead
                                        } else{ //If table header not present then put it in tbody
                                            
                                            if (repeatedRowCnt < rowCnt && !repeatRowFlag) {
                                                singleRow.attr("isafterrepeatrow", "1");
                                                repeatRowFlag = true;
                                            }

                                            finalTableClone.getElementsByTag("tbody").append(singleRow.outerHtml());
                                        }
                                        itemListElementvv.get(rowCnt).remove();
                                    }

                                    rowCnt++;
                                }
                            }

                            Elements finalRows = finalTableClone.getElementsByTag("tr");
                            for (org.jsoup.nodes.Element singleRow : finalRows) {
                                if (Boolean.parseBoolean(singleRow.getElementsByTag("tr").attr("isheader"))) {
                                    itemListElement.appendElement("thead");
                                    itemListElement.getElementsByTag("thead").append(singleRow.outerHtml());
                                } else{
                                    itemListElement.getElementsByTag("tbody").append(singleRow.outerHtml());
                                }
                            }
                            html = jsoupDocele.outerHtml();
                        }
                    }
                    html = DisplayCommaSeparatedAccount_Invoice(html, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);
                    pagefooterhtml = DisplayCommaSeparatedAccount_Invoice(pagefooterhtml, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);
                    pageheaderhtml = DisplayCommaSeparatedAccount_Invoice(pageheaderhtml, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);

                } catch (Exception ex) {
                    html = DisplayCommaSeparatedAccount_Invoice(html, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);
                    pagefooterhtml = DisplayCommaSeparatedAccount_Invoice(pagefooterhtml, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);
                    pageheaderhtml = DisplayCommaSeparatedAccount_Invoice(pageheaderhtml, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);
                }
            } else if (moduleid == Constants.Acc_Receive_Payment_ModuleId || moduleid == Constants.Acc_Make_Payment_ModuleId) {
                try {
                    org.jsoup.nodes.Document jsoupDocele = Jsoup.parse(html);
                    if (!jsoupDocele.getElementsByClass("globaltablerepeat").isEmpty()) {
                        for(int cnt = 0; cnt < jsoupDocele.getElementsByClass("globaltablerepeat").size(); cnt++){
                            org.jsoup.nodes.Element itemListElement = jsoupDocele.getElementsByClass("globaltablerepeat").get(cnt);
                            if(itemListElement.getElementsByClass("jetable").isEmpty()){
                                org.jsoup.nodes.Element finalTableClone = itemListElement.clone();
                                Elements cloneRows = finalTableClone.getElementsByTag("tr");
                                for (org.jsoup.nodes.Element cloneRow : cloneRows) {
                                    cloneRow.remove();
                                }
        //                                finalTableClone.outerHtml();
                                Elements itemListElementvv = itemListElement.getElementsByTag("tr");
                                if (!StringUtil.isNullOrEmpty(json)) {
                                    jArrjson = new JSONArray(json);
                                }
                                TreeSet<Integer> repeatedRowIndex = new TreeSet<Integer>();
                                if (isnewdesign == 0) {//for old design
                                    for (int ia = 0; ia < jArrjson.length(); ia++) {
                                        fixedrowvalue = jArrjson.getJSONObject(ia).optString("fixedrowvalue", "");
                                        if (!fixedrowvalue.isEmpty()) {
                                            String[] splitfixedvalue = fixedrowvalue.split(",");
                                            for (String s : splitfixedvalue) {
                                                repeatedRowIndex.add(Integer.parseInt(s) - 1);//getting the repeated values
                                            }
                                        }
                                    }
                                } else {//for new design
                                    for (int ia = 0; ia < jArrjson.length(); ia++) {
                                        JSONArray colJArr = jArrjson.getJSONObject(ia).getJSONArray("data");
                                        for (int colcnt = 0; colcnt < colJArr.length(); colcnt++) {
                                            JSONArray itemsJArr = colJArr.getJSONObject(colcnt).getJSONArray("data");
                                            for (int itemCnt = 0; itemCnt < itemsJArr.length(); itemCnt++) {
                                                JSONObject jObj = itemsJArr.getJSONObject(itemCnt);
                                                if (jObj.optInt("fieldType", 0) == 12) {
                                                    fixedrowvalue = jObj.optString("fixedrowvalue", "");
                                                    if (!fixedrowvalue.isEmpty()) {
                                                        String[] splitfixedvalue = fixedrowvalue.split(",");
                                                        for (String s : splitfixedvalue) {
                                                            repeatedRowIndex.add(Integer.parseInt(s) - 1);//getting the repeated values
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                int rowCnt = 0;
                                if (!repeatedRowIndex.isEmpty()) {

                                    lineItemsArrElements = lineItemsArr.getJSONArray(0);
                                    int lineitemsarrlength = lineItemsArrElements.length();//total no of accounts
                                    dbCustomFieldItemsArrElements = lineItemsArr.getJSONArray(2);
                                    boolean repeatRowFlag = false;

                                    for (org.jsoup.nodes.Element singleRow : itemListElementvv) { // Iterate over table rows

                                        int repeatedRowCnt = repeatedRowIndex.iterator().next();
                                        if (repeatedRowIndex.contains(rowCnt)) {//If it contains row repeated values else display comma separated values
                                            mainTableRow = itemListElementvv.get(rowCnt).outerHtml();
                                            itemListElementvv.get(rowCnt).remove();
                                            extraFields = getExtraFieldsForModule(moduleid,countryid);

                                            for (int i = 0; i < dbCustomFieldItemsArrElements.length(); i++) {//inserting dblineitem customfield in extrafield map
                                                JSONObject j = dbCustomFieldItemsArrElements.optJSONObject(i);
                                                Iterator it = j.keys();
                                                while (it.hasNext()) {
                                                    String n = (String) it.next();
                                                    extraFields.put(n, j.getString(n));
                                                }
                                            }

                                            for (int in = 0; in <= lineItemsArrElements.length() - 1; in++) {
                                                try {
                                                    JSONObject itemDataarrelements = new JSONObject();
        //                                            JSONObject itemDatainvoiceelements = new JSONObject();

                                                    appendhtml = mainTableRow;
                                                    try {
                                                        itemDataarrelements = lineItemsArrElements.getJSONObject(in);
                                                    } catch (Exception ex) {
                                                        itemDataarrelements = new JSONObject();
                                                    }

                                                    for (Map.Entry<String, String> entry : extraFields.entrySet()) {
                                                        JSONObject staticColInfo = new JSONObject(extraFields.get(entry.getKey()));

                                                        if (itemDataarrelements.has(entry.getKey())) {
                                                            String value = itemDataarrelements.get(entry.getKey()).toString();

                                                            //Sorting Line level custom field and Dimensions
                                                            String ordereddimensionfields = "";
                                                            if (entry.getKey().toString().equals(CustomDesignerConstants.AllDimensions) || entry.getKey().toString().equals(CustomDesignerConstants.AllLinelevelCustomFields)) {
                                                                String fieldid = "";
                                                                if (entry.getKey().toString().equals(CustomDesignerConstants.AllDimensions)) {
                                                                    fieldid = CustomDesignerConstants.AllDimensions;

                                                                } else if (entry.getKey().toString().equals(CustomDesignerConstants.AllLinelevelCustomFields)) {
                                                                    fieldid = CustomDesignerConstants.AllLinelevelCustomFields;
                                                                } else {
                                                                    fieldid = "";
                                                                }
                                                                HashMap<String, Object> fieldparams = new HashMap<String, Object>();
                                                                fieldparams.put(Constants.moduleid, moduleid);
                                                                fieldparams.put(CustomDesignerConstants.json, json);
                                                                fieldparams.put(CustomDesignerConstants.islineitem, "false");
                                                                fieldparams.put(CustomDesignerConstants.fieldid, fieldid);
                                                                HashMap<String, Object> returnvalues = new HashMap<String, Object>();
                                                                returnvalues = CustomFieldDimensionwithSequence(fieldparams, itemDataarrelements);
                                                                if (returnvalues.containsKey("prodData")) {
                                                                    ordereddimensionfields = (String) returnvalues.get("prodData");
                                                                    if (!StringUtil.isNullOrEmpty(ordereddimensionfields)) {
                                                                        value = ordereddimensionfields + "</br>";
                                                                    }
                                                                }
                                                            }

                                                            if (staticColInfo.getString("xtype").equals("2")) {
                                                                if (!StringUtil.isNullOrEmpty(value)) {
                                                                    //get decimal precision
                                                                    int precision = allFieldParameters.optInt(staticColInfo.optString("label")+"decimalPrecision", 2);
                                                                    value = CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(value.replaceAll(",", "")), precision, countryid);
                                                                    //value = ConfigureDecimalPlaces(html, staticColInfo, value, CustomDesignerConstants.RepeatTabletype,countryid);
                                                                    //value = CustomDesignHandler.getAmountinCommaForm(Double.parseDouble(value));
                                                                    if(value.contains("-")){
                                                                        if(negativeValueIn == 1){
                                                                            //No need to modification
                                                                        } else if(negativeValueIn == 2){
                                                                            value = value.replace("-", "");
                                                                            value = "("+value+")";
                                                                        }
                                                                    }
                                                                }
                                                            } else if (staticColInfo.getString("xtype").equals("1") && !StringUtil.isNullOrEmpty(value)) {
                                                                value = value.replaceAll("%", "%25");
                                                                value = value.replaceAll("\\+", "%2B");
                                                                /**
                                                                 * Replace < with "&#60;" only if its not a HTML Editor
                                                                 */
                                                                if(!(prodDiscriptionRitchTextboxFlag==Constants.HTML_EDITOR)){
                                                                    value = value.replaceAll("<", "&#60;");
                                                                }
                                                                value = value.replaceAll("(\r\n|\n\r|\r|\n)", "<br />"); 
                                                                value = StringUtil.DecodeText(value);
                                                            }
                                                            appendhtml = appendhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                                            }
                                                        }
                                                } catch (Exception e) {
                                                    continue;
                                                }
                                                if(finalTableClone.getElementsByTag("tbody").html().equals("")){ //If tbody not present then append tbody
                                                    finalTableClone.appendElement("tbody");
                                                }
                                                    finalTableClone.getElementsByTag("tbody").append(appendhtml);
                                                }
                                        } else {
                                            if (Boolean.parseBoolean(singleRow.getElementsByTag("tr").attr("isheader"))) { //If table header present then put it in thead
                                                String tableHeader = singleRow.outerHtml();
                                                tableHeader = tableHeader.replaceAll("<td", "<th");
                                                tableHeader = tableHeader.replaceAll("</td>", "</th>");
                                                finalTableClone.getElementsByTag("tbody").remove(); // remove tbody
                                                finalTableClone.appendElement("thead"); // append thead for table header
                                                finalTableClone.getElementsByTag("thead").append(tableHeader); //insert table header in thead
                                            } else{ //If table header not present then put it in tbody
                                                
                                                if (repeatedRowCnt < rowCnt && !repeatRowFlag) {
                                                    singleRow.attr("isafterrepeatrow", "1");
                                                    repeatRowFlag = true;
                                                }
                                                
                                                finalTableClone.getElementsByTag("tbody").append(singleRow.outerHtml());
                                            }
                                            itemListElementvv.get(rowCnt).remove();
                                        }

                                        rowCnt++;
                                    }
                                }

                                Elements finalRows = finalTableClone.getElementsByTag("tr");
                                for (org.jsoup.nodes.Element singleRow : finalRows) {
                                    if (Boolean.parseBoolean(singleRow.getElementsByTag("tr").attr("isheader"))) {
                                        itemListElement.appendElement("thead");
                                        itemListElement.getElementsByTag("thead").append(singleRow.outerHtml());
                                    } else{
                                        itemListElement.getElementsByTag("tbody").append(singleRow.outerHtml());
                                    }
                                }
                                html = jsoupDocele.outerHtml();
                            }
                        }
                    }
                    /**
                     * replace journal entry fields in repeat row table
                     */
                    if (!jsoupDocele.getElementsByClass("jetable").isEmpty()) {
                        org.jsoup.nodes.Element itemListElement = jsoupDocele.getElementsByClass("jetable").get(0);
                        org.jsoup.nodes.Element finalTableClone = itemListElement.clone();
                        Elements cloneRows = finalTableClone.getElementsByTag("tr");
                        for (org.jsoup.nodes.Element cloneRow : cloneRows) {
                            cloneRow.remove();
                        }
                        Elements itemListElementvv = itemListElement.getElementsByTag("tr");
                        if (!StringUtil.isNullOrEmpty(json)) {
                            jArrjson = new JSONArray(json);
                        }
                        // Get repeat row index
                        TreeSet<Integer> repeatedRowIndex = new TreeSet<Integer>();
                        for (int ia = 0; ia < jArrjson.length(); ia++) {
                            JSONArray colJArr = jArrjson.getJSONObject(ia).getJSONArray("data");
                            for (int colcnt = 0; colcnt < colJArr.length(); colcnt++) {
                                JSONArray itemsJArr = colJArr.getJSONObject(colcnt).getJSONArray("data");
                                for (int itemCnt = 0; itemCnt < itemsJArr.length(); itemCnt++) {
                                    JSONObject jObj = itemsJArr.getJSONObject(itemCnt);
                                    if (jObj.optInt("fieldType", 0) == 12 && jObj.optBoolean("isjedetailstable", false)) {
                                        fixedrowvalue = jObj.optString("fixedrowvalue", "");
                                        if (!fixedrowvalue.isEmpty()) {
                                            String[] splitfixedvalue = fixedrowvalue.split(",");
                                            for (String s : splitfixedvalue) {
                                                repeatedRowIndex.add(Integer.parseInt(s) - 1);//getting the repeated values
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        int rowCnt = 0;
                        if (!repeatedRowIndex.isEmpty()) {
                            for (org.jsoup.nodes.Element singleRow : itemListElementvv) { // Iterate over table rows

                                JSONArray jeDetailsArrElements = lineItemsArr.getJSONObject(1).getJSONArray("jedetails");
                                if (repeatedRowIndex.contains(rowCnt)) {//If it contains row repeated values else display comma separated values
                                    // get table row for repeat
                                    mainTableRow = itemListElementvv.get(rowCnt).outerHtml();
                                    itemListElementvv.get(rowCnt).remove();
                                    extraFields = getExtraFieldsForModule(moduleid,countryid); //get extra field map
                                    
                                    for (int in = 0; in <= jeDetailsArrElements.length() - 1; in++) {
                                        try {
                                            appendhtml = mainTableRow;

                                            JSONObject itemDataarrelements = new JSONObject();
                                            itemDataarrelements = jeDetailsArrElements.getJSONObject(in);
                                            // loop for replacing field with values
                                            for (Map.Entry<String, String> entry : extraFields.entrySet()) {
                                                JSONObject staticColInfo = new JSONObject(extraFields.get(entry.getKey()));

                                                if (itemDataarrelements.has(entry.getKey())) {
                                                    String value = itemDataarrelements.get(entry.getKey()).toString();

                                                    if (staticColInfo.getString("xtype").equals("2")) {
                                                        if (!StringUtil.isNullOrEmpty(value)) {
                                                            //get decimal precision
                                                            int precision = allFieldParameters.optInt(staticColInfo.optString("label")+"decimalPrecision", 2);
                                                            value = CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(value.replaceAll(",", "")), precision, countryid);
                                                            //value = ConfigureDecimalPlaces(html, staticColInfo, value, CustomDesignerConstants.RepeatTabletype,countryid);
                                                            if(value.contains("-")){
                                                                if(negativeValueIn == 1){
                                                                    //No need to modification
                                                                } else if(negativeValueIn == 2){
                                                                    value = value.replace("-", "");
                                                                    value = "("+value+")";
                                                                }
                                                            }
                                                        }
                                                    } else if (staticColInfo.getString("xtype").equals("1") && !StringUtil.isNullOrEmpty(value)) {
                                                        value = value.replaceAll("%", "%25");
                                                        value = value.replaceAll("\\+", "%2B");
                                                        value = value.replaceAll("<", "&#60;");
                                                        value = StringUtil.DecodeText(value);
                                                    }
                                                    appendhtml = appendhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                                }
                                            }
                                        } catch (Exception e) {
                                            continue;
                                        }
                                        if(finalTableClone.getElementsByTag("tbody").html().equals("")){ //If tbody not present then append tbody
                                            finalTableClone.appendElement("tbody");
                                        }
                                            finalTableClone.getElementsByTag("tbody").append(appendhtml);
                                        }
                                    
                                } else {
                                    if (Boolean.parseBoolean(singleRow.getElementsByTag("tr").attr("isheader"))) { //If table header present then put it in thead
                                        String tableHeader = singleRow.outerHtml();
                                        tableHeader = tableHeader.replaceAll("<td", "<th");
                                        tableHeader = tableHeader.replaceAll("</td>", "</th>");
                                        finalTableClone.getElementsByTag("tbody").remove(); // remove tbody
                                        finalTableClone.appendElement("thead"); // append thead for table header
                                        finalTableClone.getElementsByTag("thead").append(tableHeader); //insert table header in thead
                                    } else{ //If table header not present then put it in tbody
                                        finalTableClone.getElementsByTag("tbody").append(singleRow.outerHtml());
                                    }
                                    itemListElementvv.get(rowCnt).remove();
                                }

                                rowCnt++;
                            }
                        }
                        
                        Elements finalRows = finalTableClone.getElementsByTag("tr");
                        for (org.jsoup.nodes.Element singleRow : finalRows) {
                            if (Boolean.parseBoolean(singleRow.getElementsByTag("tr").attr("isheader"))) {
                                itemListElement.appendElement("thead");
                                itemListElement.getElementsByTag("thead").append(singleRow.outerHtml());
                            } else{
                                itemListElement.getElementsByTag("tbody").append(singleRow.outerHtml());
                            }
                        }
                        html = jsoupDocele.outerHtml();
                    }
                    html = DisplayCommaSeparatedAccount_Invoice(html, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);
                    pagefooterhtml = DisplayCommaSeparatedAccount_Invoice(pagefooterhtml, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);
                    pageheaderhtml = DisplayCommaSeparatedAccount_Invoice(pageheaderhtml, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);
                } catch (Exception ex) {
                    html = DisplayCommaSeparatedAccount_Invoice(html, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);
                    pagefooterhtml = DisplayCommaSeparatedAccount_Invoice(pagefooterhtml, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);
                    pageheaderhtml = DisplayCommaSeparatedAccount_Invoice(pageheaderhtml, json, lineItemsArr, moduleid, negativeValueIn, countryid, allFieldParameters);
                }
            } else if (moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId) {
                org.jsoup.nodes.Document jsoupDocele = Jsoup.parse(html);
                if (!jsoupDocele.getElementsByClass("globaltablerepeat").isEmpty()) {
                    org.jsoup.nodes.Element itemListElement = jsoupDocele.getElementsByClass("globaltablerepeat").get(0);
                    org.jsoup.nodes.Element finalTableClone = itemListElement.clone();
                    Elements cloneRows = finalTableClone.getElementsByTag("tr");
                    for (org.jsoup.nodes.Element cloneRow : cloneRows) {
                        cloneRow.remove();
                    }
                    TreeSet<Integer> repeatedRowIndex = new TreeSet<Integer>();
                    Elements itemListElementvv = itemListElement.getElementsByTag("tr");
                    if (!StringUtil.isNullOrEmpty(json)) {
                        jArrjson = new JSONArray(json);
                    }
                    for (int ia = 0; ia < jArrjson.length(); ia++) {
                        JSONArray colJArr = jArrjson.getJSONObject(ia).getJSONArray("data");
                        for (int colcnt = 0; colcnt < colJArr.length(); colcnt++) {
                            JSONArray itemsJArr = colJArr.getJSONObject(colcnt).getJSONArray("data");
                            for (int itemCnt = 0; itemCnt < itemsJArr.length(); itemCnt++) {
                                JSONObject jObj = itemsJArr.getJSONObject(itemCnt);
                                if (jObj.optInt("fieldType", 0) == 12) {
                                    fixedrowvalue = jObj.optString("fixedrowvalue", "");
                                    if (!fixedrowvalue.isEmpty()) {
                                        String[] splitfixedvalue = fixedrowvalue.split(",");
                                        for (String s : splitfixedvalue) {
                                            repeatedRowIndex.add(Integer.parseInt(s) - 1);//getting the repeated values
                                        }
                                    }
                                }
                            }
                        }
                    }
                    int rowCnt = 0;
                    if (!repeatedRowIndex.isEmpty()) {

                        lineItemsArrElements = lineItemsArr;
                        int lineitemsarrlength = lineItemsArrElements.length();//total no of accounts
                        for (org.jsoup.nodes.Element singleRow : itemListElementvv) { // Iterate over table rows

                            if (repeatedRowIndex.contains(rowCnt)) {//If it contains row repeated values else display comma separated values

                                mainTableRow = itemListElementvv.get(rowCnt).outerHtml();
                                itemListElementvv.get(rowCnt).remove();


                                for (int in = 0; in <= lineItemsArrElements.length() - 1; in++) {
                                    try {
                                        JSONObject itemDataarrelements = new JSONObject();
                                        appendhtml = mainTableRow;
                                        try {
                                            itemDataarrelements = lineItemsArrElements.getJSONObject(in);
                                        } catch (Exception ex) {
                                            itemDataarrelements = new JSONObject();
                                        }
                                        appendhtml = appendhtml.replace("#Outstanding Currency#", itemDataarrelements.getString("Outstanding Currency"));
                                        appendhtml = appendhtml.replace("#Amount#", itemDataarrelements.getString("Amount"));
                                        
                                    } catch (Exception e) {
                                        continue;
                                    }
                                    finalTableClone.append(appendhtml);
                                }
                            } else {
                                finalTableClone.append(singleRow.outerHtml());
                                itemListElementvv.get(rowCnt).remove();
                            }

                            rowCnt++;
                        }
                    }
                    Elements finalRows = finalTableClone.getElementsByTag("tr");
                    for (org.jsoup.nodes.Element singleRow : finalRows) {
                        itemListElement.append(singleRow.outerHtml());
                    }
                    html = jsoupDocele.outerHtml();
                }


            }
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        jobj.put("html", html);
        jobj.put("pagefooterhtml", pagefooterhtml);
        jobj.put("pageheaderhtml", pageheaderhtml);

        if (!html.isEmpty()) {
            jobj.put("htmlappendedflag", true);
        } else {
            jobj.put("htmlappendedflag", false);
        }
        return jobj;
    }

    public static String DisplayCommaSeparatedAccount_Invoice(String html, String json, JSONArray lineItemsArr, int moduleid, int negativeValueIn, int countryid, JSONObject allFieldParameters) throws JSONException {

        String finalhtml = html;
        try {
            JSONObject itemData = new JSONObject();
            HashMap<String, String> extraFields = new HashMap<String, String>();
            extraFields = getExtraFieldsForModule(moduleid,countryid);
            JSONArray dbCustomFieldItemsArrElements = new JSONArray();
            
            if(moduleid == Constants.Acc_Credit_Note_ModuleId || moduleid == Constants.Acc_Debit_Note_ModuleId) {  
                dbCustomFieldItemsArrElements = lineItemsArr.getJSONArray(3);
            } else {
                dbCustomFieldItemsArrElements = lineItemsArr.getJSONArray(2);
            }
            
            for (int i = 0; i < dbCustomFieldItemsArrElements.length(); i++) {//inserting dblineitem customfield in extrafield map
                JSONObject j = dbCustomFieldItemsArrElements.optJSONObject(i);
                Iterator it = j.keys();
                while (it.hasNext()) {
                    String n = (String) it.next();
                    extraFields.put(n, j.getString(n));
                }
            }
            
            for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
                if (lineItemsArr.get(cnt) != null && lineItemsArr.get(cnt).getClass().equals(JSONObject.class) && lineItemsArr.getJSONObject(cnt).optBoolean("summarydata", false)) {
                    itemData = lineItemsArr.getJSONObject(cnt);
                    break;
                }
            }
            for (Map.Entry<String, String> entry : extraFields.entrySet()) {
                JSONObject staticColInfo = new JSONObject(extraFields.get(entry.getKey()));
                if (itemData.has(entry.getKey())) {
                    String value = itemData.get(entry.getKey()).toString();

                    /*
                     * Sorting Global Level Dimensions & Global Level Diemnsions
                     */
                    String ordereddimensionfields = "";
                    if (entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelDimensions) || entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelCustomfields)) {
                        String fieldid = "";
                        if (entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelDimensions)) {
                            fieldid = CustomDesignerConstants.AllGloballevelDimensions;

                        } else if (entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelCustomfields)) {
                            fieldid = CustomDesignerConstants.AllGloballevelCustomfields;
                        } else {
                            fieldid = "";
                        }

                        HashMap<String, Object> fieldparams = new HashMap<String, Object>();
                        fieldparams.put(Constants.moduleid, moduleid);
                        fieldparams.put(CustomDesignerConstants.json, json);
                        fieldparams.put(CustomDesignerConstants.islineitem, "false");
                        fieldparams.put(CustomDesignerConstants.fieldid, fieldid);
                        HashMap<String, Object> returnvalues = new HashMap<String, Object>();
                        returnvalues = CustomFieldDimensionwithSequence(fieldparams, itemData);
                        if (returnvalues.containsKey("prodData")) {
                            ordereddimensionfields = (String) returnvalues.get("prodData");
                            if (!StringUtil.isNullOrEmpty(ordereddimensionfields)) {
                                value = ordereddimensionfields + "</br>";
                            }
                        }
                    }

                    if (staticColInfo.getString("xtype").equals("2") || staticColInfo.optBoolean("isNumeric", false)) {
                        if (!StringUtil.isNullOrEmpty(value)) {
                            JSONArray jarr = new JSONArray(json);
                            JSONObject jObj = new JSONObject();
                            jObj.put("JSON", jarr);
                            int decimalPrecision = allFieldParameters.optInt(staticColInfo.getString("label") + "decimalPrecision", 2);
                            if (decimalPrecision != -1) {
                                try {
                                    // Seperate values with , or !##
                                    String seperator = ",";
                                    String[] valueArr = value.split(","); //ERP-32676 - double parse exception
                                    if(value.contains("!##")){
                                        seperator = "!##";
                                        valueArr = value.split("!##");
                                    }
                                    String newValueStr = "";
                                    for (String val : valueArr) {
                                        double doublevalue = Double.parseDouble(val);
                                        String newValue = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision, countryid);
                                        newValueStr += newValue + seperator;
                                    }
                                    value = newValueStr.substring(0, newValueStr.length() - seperator.length());
                                } catch (Exception ex) {
//                                     Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                            if(value.contains("-")){
                                if(negativeValueIn == 1){
                                    //No need to modification
                                } else if(negativeValueIn == 2){
                                    value = value.replace("-", "");
                                    value = "("+value+")";
                                }
                            }
                        }
                    }
                    String valueSeperator = allFieldParameters.optString(staticColInfo.getString("label") + "valueSeparator","");
                    if(!StringUtil.isNullOrEmpty(valueSeperator)){
                        value = replaceWithValueSeperator(value, valueSeperator);
                    }
                    if (StringUtil.isNullOrEmpty(value)) {
                        finalhtml = removeSelectFieldHavingNoDataFromHTML(finalhtml, staticColInfo.getString("label"));
                    } else {
                        value = value.replaceAll("(\r\n|\n\r|\r|\n)", "<br />"); //ERP-20783
                        finalhtml = finalhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                    }
            }
            }
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        return finalhtml;

    }

    public static void generateReceiptPDF(authHandlerDAO authHandlerDAOObj, kwlCommonTablesDAO kwlCommonTablesDAOObj, ExportRecordBeans.EnglishNumberToWords EnglishNumberToWordsOjb, MessageSource messageSource, PdfPTable mainTable, Map requestmap, Locale loc, Company companyObj, String logoPath, String currencyid, String receiptNumber, Date journalEntryDate, DateFormat formatter, String accname, String address, double amount, int mode, PayDetail PayDetail, String memo, JSONObject config, String AccountName, boolean iscontraentryflag, String preText, String baseUrl, boolean ismanycrdb, HashMap<String, Object> hm) throws DocumentException, ServiceException {

        PdfPTable tab1 = null;
        PdfPTable tab2 = null;
        PdfPTable tab3 = null;
        PdfPTable blankTable = null;
        PdfPCell blankCell = null;
        PdfPCell invCell = null;
        PdfPCell cell3 = null;

        double advanceAmount = 0;
        if (requestmap.get("advanceAmount") != null && !StringUtil.isNullOrEmpty(requestmap.get("advanceAmount").toString())) {
            advanceAmount = Double.parseDouble(requestmap.get("advanceAmount").toString());
        }
        boolean advanceFlag = false;
        if (requestmap.get("advanceFlag") != null && !StringUtil.isNullOrEmpty(requestmap.get("advanceFlag").toString())) {
            advanceFlag = Boolean.parseBoolean(requestmap.get("advanceFlag").toString());
        }


        try {

            KWLCurrency currency = (KWLCurrency) kwlCommonTablesDAOObj.getClassObject(KWLCurrency.class.getName(), currencyid);

//            config = new com.krawler.utils.json.base.JSONObject(pOrder.getTemplateid().getConfigstr());
            boolean isCompanyLogo = true;
            boolean isCompanyTemplateLogo = false;

            if (config.has("showTemplateLogo") && config.getBoolean("showTemplateLogo")) {
                isCompanyTemplateLogo = true;
                isCompanyLogo = false;
            }

            String companyid = companyObj.getCompanyID();
            String company[] = new String[4];
            company[0] = companyObj.getCompanyName();
            company[1] = companyObj.getAddress() != null ? StringUtil.serverHTMLStripper(companyObj.getAddress()) : "";
            company[2] = companyObj.getEmailID();
            company[3] = companyObj.getPhoneNumber();

            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            KwlReturnObject extraprefresult = kwlCommonTablesDAOObj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            
            PdfPTable table1 = new PdfPTable(2);
            table1.setWidthPercentage(100);
            table1.setWidths(new float[]{25, 75});

            if (isCompanyTemplateLogo) {
                table1.setWidths(new float[]{75, 25});
                tab1 = ExportRecordHandler.addCompanyTemplateLogo(logoPath, companyObj);
            } else {
                table1.setWidths(new float[]{50, 50});
                if (isCompanyLogo) {
                    tab1 = ExportRecordHandler.addCompanyLogo(logoPath, companyObj);
                } else {
                    tab1 = new PdfPTable(1);
                }
            }

            tab2 = new PdfPTable(1);

            String theader = "";
            if (mode == StaticValues.AUTONUM_PAYMENT || mode == StaticValues.AUTONUM_BILLINGPAYMENT) {
                theader = messageSource.getMessage("acc.numb.37", null, loc);
            } else if (mode == StaticValues.AUTONUM_RECEIPT || mode == StaticValues.AUTONUM_BILLINGRECEIPT) {
                theader = messageSource.getMessage("acc.recieptVoucher", null, loc);
            }
            invCell = createCell(theader, fontTbl, Element.ALIGN_RIGHT, 0, 5);
//            invCell.setPaddingTop(-40);
            invCell.setPaddingBottom(10);
//            tab2.addCell(invCell);
            PdfPTable tab4 = ExportRecordHandler.getDateTable2(journalEntryDate, receiptNumber, theader, formatter, invCell);

            PdfPTable userTable2 = new PdfPTable(2);
            userTable2.setWidthPercentage(100);
            if (!isCompanyTemplateLogo) {
                userTable2.setWidths(new float[]{60, 40});
                tab3 = ExportRecordHandler.getCompanyInfo(company);
            } else {
                userTable2.setWidths(new float[]{70, 30});
                tab3 = new PdfPTable(1);
            }

            PdfPCell cell1 = new PdfPCell(tab1);
            cell1.setBorder(0);
//            cell1.setPaddingLeft(-10);
            table1.addCell(cell1);
            PdfPCell cel2 = new PdfPCell(tab4);
            cel2.setBorder(0);
            table1.addCell(cel2);

            PdfPCell mainCell11 = new PdfPCell(table1);
            mainCell11.setBorder(0);
            mainCell11.setPadding(0);
            mainTable.addCell(mainCell11);

            cell1 = new PdfPCell(tab3);
            cell1.setBorder(0);
            cell1.setPaddingTop(-50);
            userTable2.addCell(cell1);
            cel2 = new PdfPCell();
            cel2.setBorder(0);
            userTable2.addCell(cel2);

            PdfPCell mainCell12 = new PdfPCell(userTable2);
            mainCell12.setBorder(0);
            mainCell12.setPaddingTop(10);
            mainCell12.setPaddingLeft(0);
            mainCell12.setPaddingRight(10);
//            mainCell12.setPaddingBottom(-20);
            mainTable.addCell(mainCell12);

            if (!StringUtil.isNullOrEmpty(preText)) {
                ExportRecordHandler.getHtmlCell(preText.trim(), mainTable, baseUrl);
            }

            blankTable = ExportRecordHandler.addBlankLine(1);
            blankCell = new PdfPCell(blankTable);
            blankCell.setBorder(0);
            mainTable.addCell(blankCell);
            tab2 = new PdfPTable(2);
            tab2.setWidthPercentage(100);
            tab2.setWidths(new float[]{75, 25});
            cell3 = new PdfPCell(new Paragraph(messageSource.getMessage("acc.report.2", null, loc), fontSmallBold));
            cell3.setHorizontalAlignment(Element.ALIGN_LEFT);
            cell3.setBackgroundColor(Color.lightGray);
            cell3.setBorder(Rectangle.LEFT + Rectangle.BOTTOM + Rectangle.RIGHT);
            tab2.addCell(cell3);
            cell3 = new PdfPCell(new Paragraph(messageSource.getMessage("acc.rem.193", null, loc), fontSmallBold));
            cell3.setHorizontalAlignment(Element.ALIGN_CENTER);
            cell3.setBackgroundColor(Color.lightGray);
            cell3.setBorder(Rectangle.RIGHT + Rectangle.BOTTOM);
            tab2.addCell(cell3);
            if (ismanycrdb) {  //acc.je.accDebit
                List<String> debitAccountNameRow = null;
                List<String> creditAccountNameRow = null;
                List<Double> debitAccountAmount = null;
                List<Double> creditAccountAmount = null;
                int craditDebitFlag = 1;


                if (hm.containsKey("debitAccountNameRow")) {
                    debitAccountNameRow = (List<String>) hm.get("debitAccountNameRow");
                }
                if (hm.containsKey("debitAccountAmount")) {
                    debitAccountAmount = (List<Double>) hm.get("debitAccountAmount");
                }
                if (hm.containsKey("creditAccountNameRow")) {
                    creditAccountNameRow = (List<String>) hm.get("creditAccountNameRow");
                }
                if (hm.containsKey("creditAccountAmount")) {
                    creditAccountAmount = (List<Double>) hm.get("creditAccountAmount");
                }
                if (hm.containsKey("creditdebitflag")) {
                    craditDebitFlag = (Integer) hm.get("creditdebitflag");
                }

                for (int i = 0; i < (craditDebitFlag == 1 ? debitAccountNameRow.size() : creditAccountNameRow.size()); i++) {

                    if (i == 0) {
                        cell3 = createCell(messageSource.getMessage(craditDebitFlag == 1 ? "acc.je.accDebit" : "acc.je.accCredit", null, loc) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                        tab2.addCell(cell3);
                        cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                        tab2.addCell(cell3);
                    }
                    cell3 = createCell(craditDebitFlag == 1 ? debitAccountNameRow.get(i) : creditAccountNameRow.get(i), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                    cell3.setPaddingLeft(50);
                    tab2.addCell(cell3);
                    cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(craditDebitFlag == 1 ? debitAccountAmount.get(i) : creditAccountAmount.get(i), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                    tab2.addCell(cell3);
                    cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                    cell3.setPaddingLeft(50);
                    tab2.addCell(cell3);
                    cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                    tab2.addCell(cell3);
                }

                for (int i = 0; i < (craditDebitFlag == 1 ? creditAccountNameRow.size() : debitAccountNameRow.size()); i++) {
                    if (i == 0) {
                        cell3 = createCell(messageSource.getMessage(craditDebitFlag == 1 ? "acc.je.accCredit" : "acc.je.accDebit", null, loc) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                        tab2.addCell(cell3);
                        cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                        tab2.addCell(cell3);
                    }
                    cell3 = createCell(craditDebitFlag == 1 ? creditAccountNameRow.get(i) : debitAccountNameRow.get(i), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                    cell3.setPaddingLeft(50);
                    tab2.addCell(cell3);
                    cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(craditDebitFlag == 1 ? creditAccountAmount.get(i) : debitAccountAmount.get(i), currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                    tab2.addCell(cell3);
                    cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                    cell3.setPaddingLeft(50);
                    tab2.addCell(cell3);
                    cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                    tab2.addCell(cell3);
                }
            } else {
                cell3 = createCell(messageSource.getMessage("acc.je.acc", null, loc) + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallBold, Element.ALIGN_LEFT, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(accname, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(amount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 15);
                tab2.addCell(cell3);
                cell3 = createCell(address, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
            }

            if (advanceFlag) {
                cell3 = createCell("Advance" + " : ", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(advanceAmount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 15);
                tab2.addCell(cell3);
            }



            for (int i = 0; i < 10; i++) {
                cell3 = new PdfPCell(new Paragraph("", fontSmallRegular));
                cell3.setBorder(Rectangle.LEFT + Rectangle.RIGHT);
                tab2.addCell(cell3);
            }
            if (!iscontraentryflag) {
                cell3 = createCell(messageSource.getMessage("acc.numb.42", null, loc), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(mode != StaticValues.AUTONUM_BILLINGRECEIPT ? (PayDetail == null ? "Cash" : PayDetail.getPaymentMethod().getMethodName()) : (PayDetail == null ? "Cash" : PayDetail.getPaymentMethod().getMethodName()), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                cell3 = createCell(mode != StaticValues.AUTONUM_BILLINGRECEIPT ? (PayDetail != null ? (PayDetail.getPaymentMethod().getMethodName().equals("Cheque") ? "Cheque No : " + PayDetail.getCheque().getChequeNo() + " and Bank Name : " + PayDetail.getCheque().getBankName() : "") : "")
                        : (PayDetail != null ? (PayDetail.getPaymentMethod().getMethodName().equals("Cheque") ? "Cheque No : " + PayDetail.getCheque().getChequeNo() + " and Bank Name : " + PayDetail.getCheque().getBankName() : "") : ""), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
                String str = "";
                if (mode != StaticValues.AUTONUM_BILLINGRECEIPT) {
                    if (PayDetail != null) {
                        if (PayDetail.getPaymentMethod().getDetailType() == 2 || PayDetail.getPaymentMethod().getDetailType() == 1) {
                            if (PayDetail.getCard() != null) {
                                str = "Card No : " + (PayDetail.getCard().getCardNo()) + " and Card Holder : " + PayDetail.getCard().getCardHolder();
                            } else if (PayDetail.getCheque() != null) {
                                str = "Bank Name : " + StringUtil.DecodeText(PayDetail.getCheque().getBankName()) + " and Ref. No : " + (PayDetail.getCheque().getChequeNo());
                            }
                        }
                    }
                } else if (PayDetail != null) {
                    if (PayDetail.getPaymentMethod().getDetailType() == 2 || PayDetail.getPaymentMethod().getDetailType() == 1) {
                        if (PayDetail.getCard() != null) {
                            str = "Card No : " + (PayDetail.getCard().getCardNo()) + " and Card Holder : " + PayDetail.getCard().getCardHolder();
                        } else if (PayDetail.getCheque() != null) {
                            str = "Bank Name : " + StringUtil.DecodeText(PayDetail.getCheque().getBankName()) + " and Ref. No : " + (PayDetail.getCheque().getChequeNo());
                        }
                    }
                }


                //                mode!=StaticValues.AUTONUM_BILLINGRECEIPT?(rc.getPayDetail()!=null?(rc.getPayDetail().getPaymentMethod().getMethodName().equals("Credit Card")||customer.equals("Debit Card")?
                //                        rc.getPayDetail().getCard()!=null?"Card No : "+(rc.getPayDetail().getCard().getCardNo()+" and Card Holder : "+rc.getPayDetail().getCard().getCardHolder()):"":""):""):
                //                        (rc1.getPayDetail()!=null?(rc1.getPayDetail().getPaymentMethod().getMethodName().equals("Credit Card")||customer.equals("Debit Card")?
                //                        rc1.getPayDetail().getCard()!=null?"Card No : "+(rc1.getPayDetail().getCard().getCardNo()+" and Card Holder : "+rc1.getPayDetail().getCard().getCardHolder()):"":""):"")

                cell3 = createCell(str, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 0);
                tab2.addCell(cell3);
            }
            cell3 = createCell(messageSource.getMessage("acc.numb.41", null, loc), fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            cell3 = createCell(AccountName, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
            cell3.setPaddingLeft(50);
            tab2.addCell(cell3);
            cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
            tab2.addCell(cell3);
            if (!StringUtil.isNullOrEmpty(memo)) {
                cell3 = createCell("Memo :", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
                cell3 = createCell(memo, fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT, 5);
                cell3.setPaddingLeft(50);
                tab2.addCell(cell3);
                cell3 = createCell("", fontSmallRegular, Element.ALIGN_CENTER, Rectangle.RIGHT, 5);
                tab2.addCell(cell3);
            }
            String netinword = EnglishNumberToWordsOjb.convert(Double.parseDouble(String.valueOf(amount)), currency,countryLanguageId, companyid);
            String currencyname = currency.getName();
            cell3 = createCell(messageSource.getMessage("acc.rem.177", null, loc) + " : " + currencyname + " " + netinword + " Only.", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM + Rectangle.TOP, 5);
            tab2.addCell(cell3);

            double totalAdvanceAmount = amount;
            if (advanceFlag) {
                totalAdvanceAmount = amount + advanceAmount;
            }

            cell3 = createCell(authHandlerDAOObj.getFormattedCurrency(totalAdvanceAmount, currencyid, companyid), fontSmallRegular, Element.ALIGN_RIGHT, Rectangle.LEFT + Rectangle.RIGHT + Rectangle.BOTTOM + Rectangle.TOP, 5);
            tab2.addCell(cell3);
            PdfPCell mainCell5 = new PdfPCell(tab2);
            mainCell5.setBorder(1);
            mainTable.addCell(mainCell5);

            blankTable = ExportRecordHandler.addBlankLine(5);
            blankCell = new PdfPCell(blankTable);
            blankCell.setBorder(0);
            mainTable.addCell(blankCell);

            PdfPTable table3 = new PdfPTable(2); //for 2 column
//            String username = requestmap.get("username").toString();
//            cell3 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
//            cell3.setPaddingLeft(10);
//            cell3.setPaddingTop(-10);
////                cell3.setPaddingBottom(30);
//            table3.addCell(cell3);
//            cell3 = createCell("ORDER ACCEPTANCE", fontSmallBold1, Element.ALIGN_CENTER, 0, 0);
//            cell3.setPaddingRight(10);
//            cell3.setPaddingTop(-10);
//            table3.addCell(cell3);
             if (storageHandlerImpl.GetSATSCompanyId().contains(companyid)) {  //This is sats specific code 
                 cell3 = createCell("Preparer’s ", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
             }else{
                 cell3 = createCell("Receiver's ", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
             }
            cell3.setPaddingLeft(10);
            cell3.setPaddingTop(5);
//            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            cell3 = createCell("Authorized ", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingTop(5);
//            cell3.setPaddingBottom(10);
            table3.addCell(cell3);

            cell3 = createCell("Signature : ________________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingTop(5);
            cell3.setPaddingBottom(10);
            table3.addCell(cell3);
            cell3 = createCell("Signature : ________________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingTop(5);
            cell3.setPaddingBottom(10);
            table3.addCell(cell3);

            cell3 = createCell(messageSource.getMessage("acc.numb.39", null, loc) + " : ______________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingLeft(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(5);
            table3.addCell(cell3);
            cell3 = createCell(messageSource.getMessage("acc.numb.40", null, loc) + " : _______________________________", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
            cell3.setPaddingRight(10);
            cell3.setPaddingBottom(5);
            cell3.setPaddingTop(5);
//                cell3.setPaddingTop(-9);
            table3.addCell(cell3);

            PdfPCell mainCell63 = new PdfPCell(table3);
            mainCell63.setBorder(0);
            mainTable.addCell(mainCell63);

        } catch (Exception ex) {
            Logger.getLogger(ExportRecord.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public static PdfPTable getDateTableForSATS(Date entryDate, String invno, String theader, DateFormat formatter) throws DocumentException {
        PdfPTable tab4 = new PdfPTable(2);
        tab4.setWidthPercentage(100);
        tab4.setWidths(new float[]{30, 70});

        PdfPCell cell2 = createCell("Date:", fontSmallRegular, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);
        cell2 = createCell(formatter.format(entryDate), fontSmallRegular, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        cell2 = createCell(theader + " No: ", fontSmallRegular, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        cell2 = createCell(invno, fontSmallRegular, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);


        cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
        tab4.addCell(cell2);


        cell2 = createCell("", fontSmallRegular, Element.ALIGN_LEFT, 0, 0);
        tab4.addCell(cell2);

        return tab4;
    }

    public static PdfPTable getFooterTableForSATS(String customerName, String invNo, double totalamount) throws DocumentException {
        PdfPTable tab4 = new PdfPTable(1);
        tab4.setWidthPercentage(100);

        PdfPCell cell2 = createCell("Raised By:    " + customerName, fontSmallRegular, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);
        cell2 = createCell("Remittances by Wire or Telegraphic transfer should be made to:", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);
        cell2 = createCell("Deutsche Bank AG, Singapore", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        cell2 = createCell("For the Account of SATS-Creuers Cruise Services Pte. Ltd.", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        PdfPTable tab5 = new PdfPTable(2);
        tab5.setWidthPercentage(100);
        tab5.setWidths(new float[]{50, 50});

        cell2 = createCell("Bank Code: 7463", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab5.addCell(cell2);
        cell2 = createCell("Branch Code: 001", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab5.addCell(cell2);

        cell2 = createCell("Account No: 2542991000", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab5.addCell(cell2);

        cell2 = createCell("SWIFT Address: DEUTSGSG", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab5.addCell(cell2);

        PdfPCell cel3 = new PdfPCell(tab5);
        cel3.setBorder(0);
        tab4.addCell(cel3);

        cell2 = createCell("", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);
        cell2 = createCell("Kindly specify the invoice number and Customer account number in your payment instruction.", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        cell2 = createCell("If a fax copy of the transfer is sent to us at (65) 6604 8307, we can credit your account expeditiously when payment is received.", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        cell2 = createCell("For payments by cheque, please detach this portion and return with payment to :\n\n ........................................................................................................................................................................................................................................................", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        cell2 = createCell("", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        cell2 = createCell("", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        PdfPTable tab6 = new PdfPTable(3);

        tab6.setWidthPercentage(100);
        tab6.setWidths(new float[]{40, 30, 30});

        cell2 = createCell("SATS-Creuers Cruise Services Pte. Ltd.", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab6.addCell(cell2);
        cell2 = createCell("Invoice No: " + invNo, fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab6.addCell(cell2);

        cell2 = createCell("Amount (SGD): " + totalamount, fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab6.addCell(cell2);

        cel3 = new PdfPCell(tab6);
        cel3.setBorder(0);
        tab4.addCell(cel3);

        cell2 = createCell("FINANCE DEPT", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        cell2 = createCell("61, MARINA COASTAL DRIVE, #01-01", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        cell2 = createCell("SINGAPORE 018947", fontSmallRegularsmall8, Element.ALIGN_LEFT, 0, 2);
        tab4.addCell(cell2);

        return tab4;
    }

    public static PdfPTable getFooterTableForSATSForPO(String customerName, String invNo, double totalamount) throws DocumentException {
        PdfPTable tab4 = new PdfPTable(1);
        tab4.setWidthPercentage(100);
        PdfPCell cell2 = createCell("1. Please send us two copies of your invoice.", fontSmallRegular, Element.ALIGN_LEFT, 0, 3);
        tab4.addCell(cell2);
        cell2 = createCell("2. Please notify us immediately if you are unable to ship as specified.", fontSmallRegular, Element.ALIGN_LEFT, 0, 3);
        tab4.addCell(cell2);
        cell2 = createCell("3. Send all correspondence to:", fontSmallRegular, Element.ALIGN_LEFT, 0, 3);
        tab4.addCell(cell2);

        PdfPTable tab5 = new PdfPTable(3);
        tab5.setWidthPercentage(100);
        tab5.setWidths(new float[]{70, 15, 15});

        cell2 = createCell("61 Marina Coastal Drive\n#01-01, Singapore 018947\nTel 6604 8307\nFax 6604 8307", fontSmallRegular, Element.ALIGN_LEFT, 0, 2);
        tab5.addCell(cell2);
        cell2 = createCell("Authorized by", fontSmallRegular, Element.ALIGN_LEFT, 0, 2);
        tab5.addCell(cell2);
        cell2 = createCell("Date", fontSmallRegular, Element.ALIGN_LEFT, 0, 2);
        tab5.addCell(cell2);

        PdfPCell cel3 = new PdfPCell(tab5);
        cel3.setBorder(0);
        tab4.addCell(cel3);



        return tab4;
    }

    public static PdfPTable getAddressTableForSATS(String customerName, String billingAddress, String customerEmail, String billTo, String shipingAddress, boolean addShipTo, String customerAccountCode, String terms, double shiplenght) throws DocumentException {
        PdfPTable addressMainTable = new PdfPTable(3);
        addressMainTable.setWidthPercentage(100);
        addressMainTable.setWidths(new float[]{58, 1, 41});
        int linegap = 2;
        if (addShipTo) {
            linegap = 5;
        }
        PdfPTable billToTable = new PdfPTable(2);
        billToTable.setWidthPercentage(100);
        billToTable.setWidths(new float[]{35, 65});
        PdfPCell cell2 = null;
        if (addShipTo) {
            cell2 = createCell(billTo, fontSmallBold, Element.ALIGN_LEFT, Rectangle.BOX, linegap);
            cell2.setBackgroundColor(Color.LIGHT_GRAY);
        } else {
            cell2 = createCell("Sold To:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.RIGHT + Rectangle.TOP + Rectangle.LEFT, linegap);

        }

        cell2 = createCell("Customer Account No: ", fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        billToTable.addCell(cell2);
        cell2 = createCell(customerAccountCode, fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        billToTable.addCell(cell2);
        cell2 = createCell("Credit term: ", fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        billToTable.addCell(cell2);
        cell2 = createCell(terms, fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        billToTable.addCell(cell2);
        cell2 = createCell("Ship Length: ", fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        billToTable.addCell(cell2);
        cell2 = createCell(String.valueOf(shiplenght), fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        billToTable.addCell(cell2);
        PdfPTable midTable = new PdfPTable(1);
        midTable.setWidthPercentage(100);
        midTable.setWidths(new float[]{100});

        PdfPTable shipToTable = new PdfPTable(2);
        shipToTable.setWidthPercentage(100);
        shipToTable.setWidths(new float[]{40, 60});

        cell2 = createCell("Customer Name: ", fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        shipToTable.addCell(cell2);
        cell2 = createCell(customerName, fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        shipToTable.addCell(cell2);
        cell2 = createCell("Address: ", fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        shipToTable.addCell(cell2);
        cell2 = createCell(shipingAddress, fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        shipToTable.addCell(cell2);

        PdfPCell cell1 = new PdfPCell(billToTable);
        cell1.setBorder(0);
        addressMainTable.addCell(cell1);
        PdfPCell cel2 = new PdfPCell(midTable);
        cel2.setBorder(0);
        addressMainTable.addCell(cel2);
        if (addShipTo) {
            PdfPCell cel3 = new PdfPCell(shipToTable);
            cel3.setBorder(0);
            addressMainTable.addCell(cel3);
        }
        return addressMainTable;
    }

    public static PdfPTable getAddressTableForSATSForPO(String customerName, String billingAddress, String customerEmail, String billTo, String shipingAddress, boolean addShipTo, String customerAccountCode, String terms, double shiplenght) throws DocumentException {
        PdfPTable addressMainTable = new PdfPTable(3);
        addressMainTable.setWidthPercentage(100);
        addressMainTable.setWidths(new float[]{49, 1, 49});
        int linegap = 2;
        if (addShipTo) {
            linegap = 5;
        }
        PdfPTable billToTable = new PdfPTable(2);
        billToTable.setWidthPercentage(100);
        billToTable.setWidths(new float[]{25, 75});
        PdfPCell cell2 = null;
        if (addShipTo) {
            cell2 = createCell(billTo, fontSmallBold, Element.ALIGN_LEFT, Rectangle.BOX, linegap);
            cell2.setBackgroundColor(Color.LIGHT_GRAY);
        } else {
            cell2 = createCell("Sold To:", fontSmallRegular, Element.ALIGN_LEFT, Rectangle.RIGHT + Rectangle.TOP + Rectangle.LEFT, linegap);

        }

        cell2 = createCell("VENDOR: ", fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        billToTable.addCell(cell2);
        cell2 = createCell(customerName, fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        billToTable.addCell(cell2);
        cell2 = createCell("Address: ", fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        billToTable.addCell(cell2);
        cell2 = createCell(billingAddress, fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        billToTable.addCell(cell2);

        PdfPTable midTable = new PdfPTable(1);
        midTable.setWidthPercentage(100);
        midTable.setWidths(new float[]{100});

        PdfPTable shipToTable = new PdfPTable(2);
        shipToTable.setWidthPercentage(100);
        shipToTable.setWidths(new float[]{25, 75});

        cell2 = createCell("SHIP TO: ", fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        shipToTable.addCell(cell2);
        cell2 = createCell(shipingAddress, fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
        shipToTable.addCell(cell2);

        PdfPCell cell1 = new PdfPCell(billToTable);
        cell1.setBorder(0);
        addressMainTable.addCell(cell1);
        PdfPCell cel2 = new PdfPCell(midTable);
        cel2.setBorder(0);
        addressMainTable.addCell(cel2);
        if (addShipTo) {
            PdfPCell cel3 = new PdfPCell(shipToTable);
            cel3.setBorder(0);
            addressMainTable.addCell(cel3);
        }
        return addressMainTable;
    }

    public static PdfPTable getCustomTableForSATS(List lst, String jeId, AccountingHandlerDAO accountingHandlerDAOobj) throws DocumentException, ServiceException {
        PdfPTable addressMainTable = new PdfPTable(3);
        addressMainTable.setWidthPercentage(100);
        addressMainTable.setWidths(new float[]{58, 1, 41});
        int linegap = 2;
        KwlReturnObject custumObjresult = null;
        KwlReturnObject custumComboData = null;
        Iterator ite = lst.iterator();
        int i = 5;
        while (ite.hasNext()) {
            AccJECustomData accBillInvCustomData = null;
            FieldComboData fieldComboData = null;
            FieldParams tmpcontyp = (FieldParams) ite.next();
            String fieldName = tmpcontyp.getFieldlabel();
            String coldata = "";
            custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), jeId);

            accBillInvCustomData = (AccJECustomData) custumObjresult.getEntityList().get(0);
            if (accBillInvCustomData != null) {
                coldata = accBillInvCustomData.getCol(tmpcontyp.getColnum());
                if (tmpcontyp.getFieldtype() == 4) {
                    if (!StringUtil.isNullOrEmpty(coldata)) {
                        custumComboData = accountingHandlerDAOobj.getObject(FieldComboData.class.getName(), coldata);
                        fieldComboData = (FieldComboData) custumComboData.getEntityList().get(0);
                        if (fieldComboData != null) {
                            coldata = fieldComboData.getValue();
                        }
                    } else {
                        coldata = "";
                    }
                }


            }
            PdfPCell cell2 = createCell(fieldName + ": " + coldata, fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
            addressMainTable.addCell(cell2);
            if (i == 2 || i == 5) {
                cell2 = createCell(" ", fontSmallRegular, Element.ALIGN_LEFT, 0, linegap);
                addressMainTable.addCell(cell2);
                i = 0;
            }
            i++;
        }

        return addressMainTable;
    }

    //Used for Document Designer. Configuring Decimal Places for xtype2 field
    public static String ConfigureDecimalPlaces(String html, JSONObject staticColInfo, String value, String Tabletype, int countryid) throws JSONException {
        org.jsoup.nodes.Document jsoupDoc2 = Jsoup.parse(html);
//        if (!isdisplaycomma) {
        Elements itemListElement2 = jsoupDoc2.getElementsByClass(Tabletype);
        Elements itemListElement = jsoupDoc2.getElementsByClass(staticColInfo.getString("label"));
        String ss1 = itemListElement2.html();
        String ss = itemListElement.html();
        boolean checkinside = true;//to return in comma form if decimal value not given
        Elements td = itemListElement2.select("td");
        td.contains(staticColInfo.getString("label"));

        for (org.jsoup.nodes.Element eachtd : td) {
            boolean decimalflag = false;
            int decimalpoints = 0;
            Attributes styleAtt = eachtd.attributes();
            String tdid = eachtd.id();
            if (tdid.equals(staticColInfo.getString("label"))) {
                checkinside = false;
                for (Attribute a : styleAtt) {
                    if (a.getKey().equals("decimalpoint") && !StringUtil.isNullOrEmpty(a.getValue())) {
                        decimalflag = true;
                        decimalpoints = Integer.parseInt(a.getValue());
                    }
                }
                String decimalvalue = value;
                decimalvalue = decimalvalue.replaceAll(",", "");
                try { //try catch for concatenated values of Enter Payment & Common Enter Payment when not in repeated row.
                    if (decimalflag) {
                        value = CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(decimalvalue), decimalpoints,countryid);
                    } else {
                        value = CustomDesignHandler.getAmountinCommaForm(Double.parseDouble(value),countryid);
                    }
                } catch (Exception ex) {
                    value = value;
                }
            } else {
                continue;
            }
        }
        value = value.replaceAll(",", "");
        try {
            if (checkinside) {
                if (staticColInfo.has("decimalPrecision")) {
                    value = CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(value), staticColInfo.getInt("decimalPrecision"),countryid);
                } else {
                    value = CustomDesignHandler.getAmountinCommaForm(Double.parseDouble(value),countryid);
                }
            }
        } catch (Exception ex) {
            value = value;
        }
//        else {
//            String[] elements = new String[]{CustomDesignerConstants.Tabletype, CustomDesignerConstants.RepeatTabletype};
//            for (int i = 0; i < elements.length-1; i++) {
//               
//            }
//        }

        return value;
    }
    /*
     * to replace global section custom fields for particular moduleid
     */
    public static JSONObject ReplaceCustomFields(JSONObject requestObj, AccountingHandlerDAO accountingHandlerDAOobj, accAccountDAO accAccountDAOobj, HashMap<String, Object> customParams, String json, JSONObject allFieldParameters) throws JSONException, SessionExpiredException, ServiceException {
        AccCustomData accCustomData = null;
        JSONObject htmlappendarray = new JSONObject();
        try {
            int moduleid = 0;
            String billid = "", html = "", pagefooterhtml = "", pageheaderhtml = "";
            String lineItemFirstRowHTML = "";
            String lineItemLastRowHTML = "";
            List<String> globalCustomFields = new ArrayList();
            String postText = "";
            String companyid = requestObj.optString(Constants.companyKey);
            if (customParams.containsKey(Constants.moduleid)) {
                moduleid = (Integer) customParams.get(Constants.moduleid);
            }
            if (customParams.containsKey("billid")) {
                billid = (String) customParams.get("billid");
            }
            if (customParams.containsKey("html")) {
                html = (String) customParams.get("html");
            }
            if (customParams.containsKey("pagefooterhtml")) {
                pagefooterhtml = (String) customParams.get("pagefooterhtml");
            }
            if (customParams.containsKey("pageheaderhtml")) {
                pageheaderhtml = (String) customParams.get("pageheaderhtml");
            }
            if (customParams.containsKey("lineItemFirstRowHTML")) {
                lineItemFirstRowHTML = (String) customParams.get("lineItemFirstRowHTML");
            }
            if (customParams.containsKey("lineItemLastRowHTML")) {
                lineItemLastRowHTML = (String) customParams.get("lineItemLastRowHTML");
            }
            if (customParams.containsKey("globalCustomFieldList")) {
                globalCustomFields = (List) customParams.get("globalCustomFieldList");
            }
            if (customParams.containsKey("postText")) {//Custom Fields having post Test
                postText = (String) customParams.get("postText");
            }
            int countryid = 0;
            KwlReturnObject cmpObj = accountingHandlerDAOobj.getObject("com.krawler.common.admin.Company", companyid);
            if(cmpObj != null){
                Company cmp = (Company) cmpObj.getEntityList().get(0);
                if(cmp != null && cmp.getCountry()!= null && !StringUtil.isNullOrEmpty(cmp.getCountry().getID())){
                    countryid = Integer.parseInt(cmp.getCountry().getID());
                }
            }
            String globalFieldStrign = globalCustomFields.toString().replaceAll("\\, ", "','").replace("[", "'").replace("]", "'");

            accCustomData = getCustomDataObject(moduleid, billid.trim(), accountingHandlerDAOobj);
            HashMap<String, Object> CustomRequestParams = new HashMap<String, Object>();
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(requestObj);//User Date Formatter
            requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid));
            requestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid));
            requestParams.put("fieldids", globalFieldStrign);
            KwlReturnObject result = accAccountDAOobj.getFieldParams(requestParams);
            List lst = result.getEntityList();
            Iterator ite = lst.iterator();

            while (ite.hasNext()) {
                String field = "", data = "";
                FieldParams tmpcontyp = (FieldParams) ite.next();
                field = tmpcontyp.getFieldlabel();
                if (accCustomData != null) {
                    String coldata = accCustomData.getCol(tmpcontyp.getColnum());
                    int fieldType = tmpcontyp.getFieldtype();
                    if (!StringUtil.isNullOrEmpty(coldata)) {
                        switch (fieldType) {
                            case 3:
                                //long milliSeconds = Long.parseLong(coldata);
                                DateFormat dateFormat = new SimpleDateFormat(Constants.MMMMdyyyy);
                                Date dateWithNoTZ=dateFormat.parse(coldata);
//                                if(!StringUtil.isNullOrEmpty(sessionHandlerImpl.getBrowserTZ(request))) {
//                                    //df.setTimeZone(TimeZone.getTimeZone("GMT" + sessionHandlerImpl.getBrowserTZ(request))); //Time Zone Removed When custom Long Date is Changed To Date Object
//                                    //data = df.format(new java.util.Date(milliSeconds));
//                                    data=df.format(dateWithNoTZ);
//                                } else {
//                                DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                    //data = df.format(milliSeconds);//User Date Formatter
                                      data = df.format(dateWithNoTZ);
//                                }
                                break;
                            case 4:
                                CustomRequestParams.clear();
                                CustomRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                CustomRequestParams.put(Constants.filter_values, Arrays.asList(coldata, 0));
                                CustomRequestParams.put("isDDflag", true);
                                KwlReturnObject customresult = accAccountDAOobj.getCustomCombodata(CustomRequestParams);
                                if (customresult != null) {
                                    List customDataList = customresult.getEntityList();
                                    Iterator cite = customDataList.iterator();
                                    while (cite.hasNext()) {
                                        String valueForReport = "";
                                        Object[] row = (Object[]) cite.next();
                                        FieldComboData combodata = (FieldComboData) row[0];
                                        data = combodata.getValue();
//                                        String dimensionValue = getDimensionValue(new JSONObject("{JSON:" + json + "}"), field);
                                        String dimensionValue = allFieldParameters.optString(field + "dimensionValue","2");
                                        if (combodata != null) {
                                            String itemdescription = combodata.getItemdescription();
                                            if (!StringUtil.isNullOrEmpty(itemdescription)) {
                                                itemdescription = "<br>" + itemdescription.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
                                            }
                                            if (dimensionValue.equals("1") && !StringUtil.isNullOrEmpty(itemdescription)) {//Show only description of dimension
                                                valueForReport += itemdescription;
                                            } else if (dimensionValue.equals("2") && !StringUtil.isNullOrEmpty(itemdescription)) {//Show title with  description of dimension
                                                valueForReport += combodata.getValue() + itemdescription;
                                            } else {
                                                valueForReport += combodata.getValue();
                                            }
                                        }
                                        if (!StringUtil.isNullOrEmpty(valueForReport)) {
                                            data = valueForReport;
                                        }
                                    }
                                }
                                break;
                            case 7: //Multiple select drop down
                                String[] valueData = coldata.split(",");
                                for (String value : valueData) {
                                    CustomRequestParams.clear();
                                    CustomRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                    CustomRequestParams.put(Constants.filter_values, Arrays.asList(value, 0));
                                    KwlReturnObject customresult1 = accAccountDAOobj.getCustomCombodata(CustomRequestParams);
                                    if (customresult1 != null) {
                                        List customDataList = customresult1.getEntityList();
                                        Iterator cite = customDataList.iterator();
                                        while (cite.hasNext()) {
                                            Object[] row = (Object[]) cite.next();
                                            FieldComboData combodata = (FieldComboData) row[0];
                                            data += combodata.getValue() + ",";
                                        }
                                    }
                                }
                                data = data.length() > 0 ? data.substring(0, data.length() - 1) : data;
                                break;
                            case 12:
                                String fieldid = tmpcontyp.getId();
                                HashMap<String, Object> checkListRequestParams = new HashMap<String, Object>();
                                String Colsplit[] = coldata.split(",");
                                for (int i = 0; i < Colsplit.length; i++) {
                                    coldata = Colsplit[i];
                                    checkListRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                    checkListRequestParams.put(Constants.filter_values, Arrays.asList(coldata, 0));
                                    ArrayList order_by = new ArrayList();
                                    ArrayList order_type = new ArrayList();
                                    order_by.add("itemsequence");
                                    order_type.add("asc");
                                    checkListRequestParams.put("order_by", order_by);
                                    checkListRequestParams.put("order_type", order_type);
                                    KwlReturnObject checkListresult = accAccountDAOobj.getCustomCombodata(checkListRequestParams);
                                    List checklst = checkListresult.getEntityList();
                                    Iterator checkite = checklst.iterator();
                                    while (checkite.hasNext()) {
                                        Object[] row = (Object[]) checkite.next();
                                        FieldComboData checkfield = (FieldComboData) row[0];
                                        data += checkfield.getValue() + ",";
                                    }
                                }
                                data = data.length() > 0 ? data.substring(0, data.length() - 1) : data;
                                break;
                            case 13:
                                data = coldata.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
                                break;
                            default:
                                data = coldata;
                                break;
                        }
                    } else {
                        if(fieldType == 2){// If Number field
                            data = "0";
                        } else{
                            data = "";
                        }
                    }
                }
//                int decimalPrecision = getDecimalPrecision(new JSONObject("{JSON:" + json + "}"), field);
                int decimalPrecision = allFieldParameters.optInt(field + "decimalPrecision",2);
//                String valueSeperator = getValueSeperator(new JSONObject("{JSON:" +json+"}"),field); 
                String valueSeperator = allFieldParameters.optString(field + "valueSeparator",""); 
//                boolean isValuewithComm = getIsValueWithComma(new JSONObject("{JSON:" +json+"}"),field); 
                boolean isValuewithComm = allFieldParameters.optBoolean(field + "valueWithComma",false); 
                boolean zeroValueAsBlank = allFieldParameters.optBoolean(field + "showzerovalueasblank", false);
                if (StringUtil.isNullOrEmpty(data)) {
//                    String defVal = getDefaultFieldValue(new JSONObject("{JSON:" + json + "}"), field);
                    String defVal = allFieldParameters.optString(field + "defaultValue","");
                    if (decimalPrecision != -1) {
                        try {
                            double doublevalue = Double.parseDouble(defVal);
                            defVal = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision,countryid);
                        } catch (Exception ex) {
                        }
                    }
                    if(zeroValueAsBlank){
                        defVal = CustomDesignHandler.getZeroAmountAsBlank(defVal);
                    }
                    if(!StringUtil.isNullOrEmpty(valueSeperator)){
                        defVal = replaceWithValueSeperator(defVal, valueSeperator);
                    }
                    if (!StringUtil.isNullOrEmpty(defVal)) {
                        html = html.replace("#" + field + postText + "#", defVal);
                        pagefooterhtml = pagefooterhtml.replace("#" + field + postText + "#", defVal);
                        pageheaderhtml = pageheaderhtml.replace("#" + field + postText + "#", defVal);
                        lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + field + postText + "#", defVal);
                        lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + field + postText + "#", defVal);
                    } else {
                        html = removeSelectFieldHavingNoDataFromHTML(html, field + postText);
                        pagefooterhtml = removeSelectFieldHavingNoDataFromHTML(pagefooterhtml, field + postText);
                        pageheaderhtml = removeSelectFieldHavingNoDataFromHTML(pageheaderhtml, field + postText);
                        lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + field + postText + "#", "");
                        lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + field + postText + "#", "");
                    }
                } else {
                    if (decimalPrecision != -1) {
                        try {
                            double doublevalue = Double.parseDouble(data);
                            if (!isValuewithComm) {//If we don't want to show numeric custom value with comma
                                data = authHandler.formattingdecimal(doublevalue, decimalPrecision);
                                if (decimalPrecision == 0) {
                                    data = data.substring(0, data.length() - 1);
                                }
                            } else {
                                data = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision, countryid);
                            }
                            
                        } catch (Exception ex) {
                        }
                    }
                    if(zeroValueAsBlank){
                        data = CustomDesignHandler.getZeroAmountAsBlank(data);
                    }
                    if(!StringUtil.isNullOrEmpty(valueSeperator)){
                        data = replaceWithValueSeperator(data, valueSeperator);
                    }
                    html = html.replace("#" + field + postText + "#", data);
                    pagefooterhtml = pagefooterhtml.replace("#" + field + postText + "#", data);
                    pageheaderhtml = pageheaderhtml.replace("#" + field  + postText + "#", data);
                    lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + field + postText + "#", data);
                    lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + field + postText + "#", data);
                }
            }
            htmlappendarray.put("html", html);
            htmlappendarray.put("pagefooterhtml", pagefooterhtml);
            htmlappendarray.put("pageheaderhtml", pageheaderhtml);
            htmlappendarray.put("lineItemFirstRowHTML", lineItemFirstRowHTML);
            htmlappendarray.put("lineItemLastRowHTML", lineItemLastRowHTML);
        } catch (Exception ex) {
        }
        return htmlappendarray;
    }

    public static HashMap exportTemplateWithNewDesign(HttpServletRequest request, JSONObject requestObj, HashMap paramsMap, HashMap objMap) {
        HashMap<String, String> returnHashMap = new HashMap<String, String>();
        try {
            /**
             * Required parameters
             */
            String companyid = requestObj.optString(Constants.companyKey);
            int moduleid = Integer.parseInt((String) paramsMap.get("moduleid"));
            String transactionId = (String) paramsMap.get("invoiceid");
            String json = (String) paramsMap.get("json");
            String html = (String) paramsMap.get("html");
            String sqlquery = (String) paramsMap.get("sqlquery");
            String templateSubtype = (String) paramsMap.get("templateSubtype");
            String pageheaderhtml = (String) paramsMap.get("pageheaderhtml");
            String pagefooterhtml = (String) paramsMap.get("pagefooterhtml");
            String pagefooterjson = (String) paramsMap.get("pagefooterjson");
            String pagefootersqlquery = (String) paramsMap.get("pagefootersqlquery");
            String headerCurrency = (String) paramsMap.get("headerCurrency");
            String headerCurrencyCode = (String) paramsMap.get("headerCurrencyCode");
            String linkedreferencenumber = (String) paramsMap.get("linkedreferencenumber");
            String pagelayoutproperty = (String) paramsMap.get("pagelayoutproperty");
            String pageheaderjson = (String) paramsMap.get("pageheaderjson");
            String pageheadersqlquery = (String) paramsMap.get("pageheadersqlquery");
            String baseCurrencySymbol = (String) paramsMap.get("baseCurrencySymbol");
            String baseCurrencyCode = (String) paramsMap.get("baseCurrencyCode");

            JSONArray lineItemsArr = (JSONArray) paramsMap.get("lineItemsArr");
            DateFormat df = (DateFormat) paramsMap.get("df");

            boolean checkfooterflag = (Boolean) paramsMap.get("checkfooterflag");
            boolean isConsignment = (Boolean) paramsMap.get("isConsignment");
            boolean isJobOrderFlow = (Boolean) paramsMap.get("isJobOrderFlow");
            boolean isDefaultTemplate = (Boolean) paramsMap.get("isDefaultTemplate");
    /**
             * Required objects
    */
            accAccountDAO accAccountDAOobj = (accAccountDAO) objMap.get("accAccountDAOObj");
            AccountingHandlerDAO accountingHandlerDAOobj = (AccountingHandlerDAO) objMap.get("accountingHandlerDAOObj");
            VelocityEngine velocityEngine = (VelocityEngine) objMap.get("velocityEngine");
            CustomDesignDAO customDesignDAOObj = (CustomDesignDAO) objMap.get("customDesignDAOObj");
            AccCommonTablesDAO accCommonTablesDAO = (AccCommonTablesDAO) objMap.get("accCommonTablesDAO");
            AccInvoiceServiceDAO accInvoiceServiceDAOObj = (AccInvoiceServiceDAO) objMap.get("accInvoiceServiceDAOObj");
            AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAOObj = (AccGoodsReceiptServiceDAO) objMap.get("accGoodsReceiptServiceDAOObj");
            
            JSONArray jArr = new JSONArray();
            JSONArray numberFieldArray = new JSONArray();
            JSONArray customizedlineItems = new JSONArray();
            JSONArray customizedheaderItems = new JSONArray();
            JSONArray groupingItems = new JSONArray();
            JSONArray groupingAfterItems = new JSONArray();
            
            JSONObject jrepeat = new JSONObject();
            JSONObject LineItemHeaderProperties = new JSONObject();
            JSONObject AllDetailsTableHeaderProperties = new JSONObject();
            JSONObject allFieldParameters = null;
            
            boolean isLineItemPresent = false; // Flag to checl if Line item is present in Design
            boolean isPrePrinted = false;
            boolean isMultipleTransaction = false;
            boolean isExtendedGlobalTable = false;
            boolean isOutstandingTablePresent = false;
            boolean isOutstandingMultipleCurrency = false;
            //***************************************
            boolean isGstIncluded = false; // Irrelevant Field why this field is used
            //***********************************************************
            
            String buildhtml = "", finalBuildHtml = "", linetemhtml = "", bottomDiv = "", topDiv = "";
            String alignment = "", backgroundcolor = "", changedlabel = "";
            String fontstylevalue = "";
            String pagefontsize = "";
            String marginTop = "";
            String marginBottom = "";
            String marginLeft = "";
            String marginRight = "";
            String dt_marginTop = "", dt_marginBottom = "", dt_marginLeft = "", dt_marginRight = "";
            String totalItems = "";
            
            List globalCustomFieldList = new ArrayList<>();
            
            int widthOfTable = 100, dt_widthOfTable = 100;
            int negativeValueIn = 0;
            int countryid = 0;
            String gcurrencyid = "";
            
            // Fetching important parameters required for all Fields (like value separator, default value etc.)
            allFieldParameters = getFieldParameters(new JSONObject("{JSON:" +json+"}"));
            
            KwlReturnObject companyobj = accountingHandlerDAOobj.getObject("com.krawler.common.admin.Company", companyid);
            if(companyobj != null){
                Company companydata = (Company) companyobj.getEntityList().get(0);
                if(companydata != null && companydata.getCountry()!= null && !StringUtil.isNullOrEmpty(companydata.getCountry().getID())){
                    countryid = Integer.parseInt(companydata.getCountry().getID());
                }
                gcurrencyid = companydata.getCurrency().getCurrencyID();
            }
            /**
             * get value for showing negative amount
             */
            if (!StringUtil.isNullOrEmpty(pagelayoutproperty)) {
                JSONArray jArr1 = new JSONArray(pagelayoutproperty);
                for (int cnt = 0; cnt < jArr1.length(); cnt++) {
                    JSONObject jObj = jArr1.getJSONObject(cnt);
                    if (!StringUtil.isNullOrEmpty(jObj.optString("pagelayoutsettings", ""))) {
                        JSONObject pagePropertyArray = new JSONObject(jObj.optString("pagelayoutsettings", ""));
                        negativeValueIn = pagePropertyArray.optInt("negativeValueIn", 2);
                    }
                }
            }
            // If negative value combo have value 0 (none) then get value from company preferences
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            if(negativeValueIn == 0){
                negativeValueIn = extraCompanyPreferences.getNegativeValueIn();
            }
            int prodDiscriptionRitchTextboxFlag = extraCompanyPreferences.getProddiscripritchtextboxflag();
            
            String documentCurrencyId = gcurrencyid;
            KWLCurrency documentCurrencyObj = null;
            double reverseExchangeRate = 1.0;
            KWLCurrency baseCurrencyObj = null;
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            
            if (!StringUtil.isNullOrEmpty(gcurrencyid)) {
                KwlReturnObject resultObj = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
                baseCurrencyObj = (KWLCurrency) resultObj.getEntityList().get(0);
            }
            
            //Document currency
            for (int i = 0; i < lineItemsArr.length(); i++) {
                if (lineItemsArr.get(i) != null && lineItemsArr.get(i).getClass().equals(JSONObject.class) && lineItemsArr.getJSONObject(i).optBoolean("summarydata", false)) {
                    documentCurrencyId = lineItemsArr.getJSONObject(i).optString(CustomDesignerConstants.DOCUMENT_CURRENCY_ID);
                    if (StringUtil.isNullOrEmpty(documentCurrencyId)) {
                        documentCurrencyId = gcurrencyid;
                    }
                    KwlReturnObject resultObj = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), documentCurrencyId);
                    documentCurrencyObj = (KWLCurrency) resultObj.getEntityList().get(0);
                    reverseExchangeRate = lineItemsArr.getJSONObject(i).optDouble(CustomDesignerConstants.CustomDesignExchangeRate_fieldTypeId, 1);
                    break;
                }
            }
            
            if (!StringUtil.isNullOrEmpty(json)) {
                jArr = new JSONArray(json);
                boolean bold = false, italic = false, underline = false;
                boolean dt_bold = false, dt_italic = false, dt_underline = false;
                String fontsize = "", align = "center", bordercolor = "";
                String dt_fontsize = "", dt_align = "center", dt_bordercolor = "";
                for (int cnt = 0; cnt < jArr.length(); cnt++) {
                    JSONArray colJArr = jArr.getJSONObject(cnt).getJSONArray("data");
                    for (int colcnt = 0; colcnt < colJArr.length(); colcnt++) {
                        JSONArray itemsJArr = colJArr.getJSONObject(colcnt).getJSONArray("data");
                        for (int itemCnt = 0; itemCnt < itemsJArr.length(); itemCnt++) {
                            JSONObject jObj = itemsJArr.getJSONObject(itemCnt);
                            if (jObj.optInt("fieldType", 0) == 11) {
                                JSONObject jSONObject = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0);
                                fontsize = jSONObject.optString("fontsize", "");
                                align = jSONObject.optString("align", "center");
                                bordercolor = jSONObject.optString("bordercolor", "");
                                bold = jSONObject.optBoolean("bold", false);
                                italic = jSONObject.optBoolean("italic", false);
                                underline = jSONObject.optBoolean("underline", false);
                                widthOfTable = jObj.optInt("tablewidth", 100);
                                marginTop = jObj.optString("marginTop", "");
                                marginBottom = jObj.optString("marginBottom", "");
                                marginLeft = jObj.optString("marginLeft", "");
                                marginRight = jObj.optString("marginRight", "");
                                /*
                                 * get custom fields id from Summary table
                                 */
                                if (!StringUtil.isNullOrEmpty(jSONObject.optString("cellplaceholder", "[]")) ) {
                                    JSONArray cellplaceObjectArray = new JSONArray(jSONObject.optString("cellplaceholder", "[]"));
                                    for (int innerplacecnt = 0; innerplacecnt < cellplaceObjectArray.length(); innerplacecnt++) {
                                        JSONObject cellplace = cellplaceObjectArray.getJSONObject(innerplacecnt);
                                        if (cellplace.optBoolean("customfield", false)) {
                                            globalCustomFieldList.add(cellplace.optString("placeholder", ""));
                                        }
                                    }
                                }
                                /*
                                 * get custom fields id used in line item global row's
                                 */
                                JSONArray tableJsonArray = new JSONArray(jObj.optString("data", "[]"));
                                //data of global rows of line item table is at 1(for first global row) and 2(for last global row) position in json. So starting counter from 1.
                                for (int globalrow = 1; globalrow < tableJsonArray.length();globalrow++) {
                                    JSONArray globalRowArray = tableJsonArray.getJSONArray(globalrow);
                                    for (int placecnt = 0; placecnt < globalRowArray.length(); placecnt++) {
                                        JSONObject place = globalRowArray.getJSONObject(placecnt);
                                        if (!StringUtil.isNullOrEmpty(place.optString("data", ""))) {
                                            JSONArray globalRowFieldArray = new JSONArray(place.optString("data", ""));
                                            for (int innerplacecnt = 0; innerplacecnt < globalRowFieldArray.length(); innerplacecnt++) {
                                                JSONObject cellplace = globalRowFieldArray.getJSONObject(innerplacecnt);
                                                /*
                                                 * Check for line item global row's contains global table
                                                 */
                                                if (cellplace.optInt("fieldType", 0) == 12) {
                                                    if (!StringUtil.isNullOrEmpty(cellplace.optString("cellplaceholder", "[]"))) {
                                                        /*
                                                         * get custom fields id used in line item global row's contains global table
                                                         */
                                                        JSONArray cellplaceObjectArray = new JSONArray(cellplace.optString("cellplaceholder", "[]"));
                                                        for (int globaltableplacecnt = 0; globaltableplacecnt < cellplaceObjectArray.length(); globaltableplacecnt++) {
                                                            JSONObject globalcellplace = cellplaceObjectArray.getJSONObject(globaltableplacecnt);
                                                            if (globalcellplace.optBoolean("customfield", false)) {
                                                                globalCustomFieldList.add(globalcellplace.optString("placeholder", ""));
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if (cellplace.optBoolean("customfield", false)) {
                                                        globalCustomFieldList.add(cellplace.optString("placeholder", ""));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (jObj.optInt("fieldType", 0) == 12 && !isOutstandingTablePresent) { 
                                isOutstandingTablePresent = !StringUtil.isNullOrEmpty(jObj.optString("isbalanceoutstanding",""))?Boolean.parseBoolean(jObj.optString("isbalanceoutstanding","")):false;
                                isOutstandingMultipleCurrency = !StringUtil.isNullOrEmpty(jObj.optString("isOutstandingMultipleCurrency",""))?Boolean.parseBoolean(jObj.optString("isOutstandingMultipleCurrency","")):false;
                               
                                JSONArray cellplaceObjectArray =  new JSONArray(jObj.optString("cellplaceholder", "[]"));
                                for(int innerplacecnt=0; innerplacecnt < cellplaceObjectArray.length(); innerplacecnt++) {
                                    JSONObject cellplace = cellplaceObjectArray.getJSONObject(innerplacecnt);
                                    if(cellplace.optBoolean("customfield", false)) {
                                        globalCustomFieldList.add(cellplace.optString("placeholder", ""));
                                    }
                                }
                            }
                            if (jObj.optInt("fieldType", 0) == 14) {
                                JSONArray cellPlaceHolderArray = new JSONArray(jObj.optString("data", "[]"));
                                for(int placecnt=0; placecnt < cellPlaceHolderArray.length(); placecnt++) {
                                    if(cellPlaceHolderArray.getJSONObject(placecnt).optBoolean("customfield", false)) {
                                        globalCustomFieldList.add(cellPlaceHolderArray.getJSONObject(placecnt).optString("placeholder", ""));
                                    }
                                }
                               
                            }
                            //Details Table
                            if (jObj.optInt("fieldType", 0) == 20) {
                                //get Details Table header properties
                                dt_fontsize = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optString("fontsize", "");
                                dt_align = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optString("align", "center");
                                dt_bordercolor = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optString("bordercolor", "");
                                dt_bold = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optBoolean("bold", false);
                                dt_italic = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optBoolean("italic", false);
                                dt_underline = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optBoolean("underline", false);
                                dt_widthOfTable = jObj.optInt("tablewidth", 100);
                                dt_marginTop = jObj.optString("marginTop", "");
                                dt_marginBottom = jObj.optString("marginBottom", "");
                                dt_marginLeft = jObj.optString("marginLeft", "");
                                dt_marginRight = jObj.optString("marginRight", "");
                                //get id of details table
                                String detailsTableId = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optString("id", "");
                                //set header properties of Details Tbale in JSONObject
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_margin", dt_marginTop+" "+dt_marginRight+" "+dt_marginBottom+" "+dt_marginLeft);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_width", dt_widthOfTable);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_fontsize", dt_fontsize);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_align", dt_align);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_bordercolor", dt_bordercolor);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_bold", dt_bold);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_italic", dt_italic);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_underline", dt_underline);
                            }
                            if (jObj.has("fieldType") && !StringUtil.isNullOrEmpty(jObj.getString("fieldType"))) {
                                if (Integer.parseInt(jObj.getString("fieldType")) == 2) {
                                    if (jObj.has("label") && !StringUtil.isNullOrEmpty(jObj.getString("label"))) {
                                        JSONObject numberField = new JSONObject();
                                        numberField.put("label", jObj.getString("label"));
                                        numberField.put("fieldType", jObj.getString("fieldType"));
                                        numberField.put("decimalPrecision", jObj.optString("decimalPrecision", "2"));
                                        numberFieldArray.put(numberField);
                                        if(jObj.optBoolean("customfield", false)) {
                                            globalCustomFieldList.add(jObj.optString("placeholder", ""));
                                        }
                                    }
                                } else if (Integer.parseInt(jObj.getString("fieldType")) == 17) {
                                    if (jObj.has("label") && !StringUtil.isNullOrEmpty(jObj.getString("label"))) {
                                        if(jObj.optBoolean("customfield", false)) {
                                            globalCustomFieldList.add(jObj.optString("placeholder", ""));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                LineItemHeaderProperties.put("fontsize", fontsize);
                LineItemHeaderProperties.put("align", align);
                LineItemHeaderProperties.put("bordercolor", bordercolor);
                LineItemHeaderProperties.put("bold", bold);
                LineItemHeaderProperties.put("italic", italic);
                LineItemHeaderProperties.put("underline", underline);
            }
            int lineItem_YAxis = 0;
            int lineitemheight = 0;
            int lineitemwidth = 850;
            int aboveLineItemObject_YAxis = 0;

//                HashMap<String, Integer> bottomItems = new HashMap<String, Integer>();
            List<String> invoiceCols = new ArrayList();
            Matcher m = Pattern.compile("#(.+?)#").matcher(sqlquery);
            while (m.find()) {
                invoiceCols.add(m.group(1));
            }

            //User Permission for display Unit Price and Amount
            boolean displayUnitPriceAndAmountInSalesDocument = true;
            boolean displayUnitPriceAndAmountInPurchaseDocument = true;
            long unitPriceAndAmountSalesPermission = 0;
            long unitPriceAndAmountPurchasePermission = 0;
            long unitPriceAndAmountPermission = 0;

            HashMap<String, Object> params = new HashMap<String, Object>();
            params.put("userid", requestObj.optString(Constants.useridKey));
            JSONObject userPermJobj = accountingHandlerDAOobj.getUserPermissionForFeature(params);
            if(userPermJobj.has("Perm") && userPermJobj.getJSONObject("Perm") != null && userPermJobj.getJSONObject("Perm").length() > 0){
                JSONObject permJobj = userPermJobj.getJSONObject("Perm");
                if(permJobj.has("unitpriceandamount") && permJobj.getJSONObject("unitpriceandamount") != null && permJobj.getJSONObject("unitpriceandamount").length() > 0){
                    unitPriceAndAmountSalesPermission = permJobj.getJSONObject("unitpriceandamount").optLong("displayunitpriceandamountinsalesdocument", 0);
                    unitPriceAndAmountPurchasePermission = permJobj.getJSONObject("unitpriceandamount").optLong("displayunitpriceandamountinpurchasedocument", 0);
                }
            }
            if(userPermJobj.has("UPerm") && userPermJobj.getJSONObject("UPerm") != null && userPermJobj.getJSONObject("UPerm").length() > 0){
                unitPriceAndAmountPermission = userPermJobj.getJSONObject("UPerm").getLong("unitpriceandamount");
            }

            if ((unitPriceAndAmountPermission & unitPriceAndAmountSalesPermission) == unitPriceAndAmountSalesPermission){
                displayUnitPriceAndAmountInSalesDocument = false;
            }
            if ((unitPriceAndAmountPermission & unitPriceAndAmountPurchasePermission) == unitPriceAndAmountPurchasePermission){
                displayUnitPriceAndAmountInPurchaseDocument = false;
            }
            boolean displayUnitPriceAndAmountInPrint = true;
            if(moduleid == Constants.Acc_Invoice_ModuleId
                    || moduleid == Constants.Acc_Sales_Order_ModuleId
                    || moduleid == Constants.Acc_Customer_Quotation_ModuleId
                    || moduleid == Constants.Acc_Delivery_Order_ModuleId
                    || moduleid == Constants.Acc_Sales_Return_ModuleId
                    //Consignment
                    || moduleid == Constants.Acc_ConsignmentRequest_ModuleId
                    || moduleid == Constants.Acc_ConsignmentDeliveryOrder_ModuleId
                    || moduleid == Constants.Acc_ConsignmentInvoice_ModuleId
                    || moduleid == Constants.Acc_ConsignmentSalesReturn_ModuleId
                    //Lease
                    || moduleid == Constants.LEASE_INVOICE_MODULEID
                    || moduleid == Constants.Acc_Lease_Order_ModuleId
                    || moduleid == Constants.Acc_Lease_DO
                    || moduleid == Constants.Acc_Lease_Return
                    || moduleid == Constants.Acc_Lease_Quotation
                    //Asset
                    || moduleid == Constants.Acc_FixedAssets_DisposalInvoice_ModuleId
                    || moduleid == Constants.Acc_FixedAssets_DeliveryOrder_ModuleId
                    || moduleid == Constants.Acc_FixedAssets_Sales_Return_ModuleId){
                displayUnitPriceAndAmountInPrint = !displayUnitPriceAndAmountInSalesDocument;
            } else if(moduleid == Constants.Acc_Vendor_Invoice_ModuleId
                    || moduleid == Constants.Acc_Purchase_Order_ModuleId
                    || moduleid == Constants.Acc_Vendor_Quotation_ModuleId
                    || moduleid == Constants.Acc_Goods_Receipt_ModuleId
                    || moduleid == Constants.Acc_Purchase_Return_ModuleId
                    || moduleid == Constants.Acc_Purchase_Requisition_ModuleId
                    //Consignment
                    || moduleid == Constants.Acc_ConsignmentVendorRequest_ModuleId
                    || moduleid == Constants.Acc_Consignment_GoodsReceiptOrder_ModuleId
                    || moduleid == Constants.Acc_Consignment_GoodsReceipt_ModuleId
                    || moduleid == Constants.Acc_ConsignmentPurchaseReturn_ModuleId
                    //Asset
                    || moduleid == Constants.Acc_FixedAssets_Purchase_Order_ModuleId
                    || moduleid == Constants.Acc_FixedAssets_GoodsReceipt_ModuleId
                    || moduleid == Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId
                    || moduleid == Constants.Acc_FixedAssets_Purchase_Return_ModuleId
                    || moduleid == Constants.Acc_FixedAssets_Vendor_Quotation_ModuleId
                    || moduleid == Constants.Acc_FixedAssets_PurchaseRequisition_ModuleId){
                displayUnitPriceAndAmountInPrint = !displayUnitPriceAndAmountInPurchaseDocument;
            }
            
            boolean isLineItemSummaryTable = false;
            JSONObject LineItemSummaryTableInfo = new JSONObject();
            String lineitemTableParentRowID = "";

            String lineItemFirstRowHTML = "";
            String lineItemLastRowHTML = "";
            String pageSize = "a4";
            String pageSizeForExtGT = "a4";
            String pageOrientationForEXTGT = "portrait";
            String pageOrientation = "portrait";
            String adjustPageHeight = "0";
            String sortField = "";
            String sortFieldXtype = "";
            String sortOrder = "";
            boolean isLastRowPresent = false;
            boolean isFirstRowPresent = false;
            boolean isGroupingRowPresent = false;
            boolean isGroupingApplied = false;
            boolean isGroupingAfterRowPresent = false;
            boolean islineitemrepeat = false;
            boolean isconsolidated = false;
            boolean isExtendLineItem = false;
            boolean isExtendGlobalTable = false;

            HashMap<String, Object> lineitemmap = CustomDesignHandler.getLineItemsDetails(jArr);
            if (lineitemmap.containsKey(Constants.Customedlineitems) && lineitemmap.get(Constants.Customedlineitems) != null) {
                customizedlineItems = (JSONArray) lineitemmap.get(Constants.Customedlineitems);
            }
            if (lineitemmap.containsKey("customizedheaderItems") && lineitemmap.get("customizedheaderItems") != null) {
                customizedheaderItems = (JSONArray) lineitemmap.get("customizedheaderItems");
                    }
            if (lineitemmap.containsKey(Constants.lineitemHeight) && lineitemmap.get(Constants.lineitemHeight) != null) {
                lineitemheight = (Integer) lineitemmap.get(Constants.lineitemHeight);
            }
            if (lineitemmap.containsKey("groupingItems") && lineitemmap.get("groupingItems") != null) {
                groupingItems = (JSONArray) lineitemmap.get("groupingItems");
            }
            if (lineitemmap.containsKey("groupingAfterItems") && lineitemmap.get("groupingAfterItems") != null) {
                groupingAfterItems = (JSONArray) lineitemmap.get("groupingAfterItems");
            }
            if (lineitemmap.containsKey(Constants.lineitemWidth) && lineitemmap.get(Constants.lineitemWidth) != null) {
                lineitemwidth = (Integer) lineitemmap.get(Constants.lineitemWidth);
            }
            if (lineitemmap.containsKey(Constants.isLineItemPresent) && lineitemmap.get(Constants.isLineItemPresent) != null) {
                isLineItemPresent = (Boolean) lineitemmap.get(Constants.isLineItemPresent);
            }
            if (lineitemmap.containsKey(Constants.isLineItemSummaryTable) && lineitemmap.get(Constants.isLineItemSummaryTable) != null) {
                isLineItemSummaryTable = (Boolean) lineitemmap.get(Constants.isLineItemSummaryTable);
            }
            if (lineitemmap.containsKey(Constants.LineItemSummaryTableInfo) && lineitemmap.get(Constants.LineItemSummaryTableInfo) != null) {
                LineItemSummaryTableInfo = new JSONObject(lineitemmap.get(Constants.LineItemSummaryTableInfo).toString());
            }
            if (lineitemmap.containsKey(Constants.lineitemTableParentRowID) && lineitemmap.get(Constants.lineitemTableParentRowID) != null) {
                lineitemTableParentRowID = (String) lineitemmap.get(Constants.lineitemTableParentRowID);
            }
            if (lineitemmap.containsKey(Constants.lineItemFirstRowHTML) && lineitemmap.get(Constants.lineItemFirstRowHTML) != null) {
                lineItemFirstRowHTML = (String) lineitemmap.get(Constants.lineItemFirstRowHTML);
            }
            if (lineitemmap.containsKey(Constants.lineItemLastRowHTML) && lineitemmap.get(Constants.lineItemLastRowHTML) != null) {
                lineItemLastRowHTML = (String) lineitemmap.get(Constants.lineItemLastRowHTML);
            }
            if (lineitemmap.containsKey("isFirstRowPresent") && lineitemmap.get("isFirstRowPresent") != null) {
                isFirstRowPresent = Boolean.parseBoolean(lineitemmap.get("isFirstRowPresent").toString());
            }
            if (lineitemmap.containsKey("isLastRowPresent") && lineitemmap.get("isLastRowPresent") != null) {
                isLastRowPresent = Boolean.parseBoolean(lineitemmap.get("isLastRowPresent").toString());
            }
            if (lineitemmap.containsKey("isGroupingRowPresent") && lineitemmap.get("isGroupingRowPresent") != null) {
                isGroupingRowPresent = Boolean.parseBoolean(lineitemmap.get("isGroupingRowPresent").toString());
            }
            if (lineitemmap.containsKey("isGroupingApplied") && lineitemmap.get("isGroupingApplied") != null) {
                isGroupingApplied = Boolean.parseBoolean(lineitemmap.get("isGroupingApplied").toString());
            }
            if (lineitemmap.containsKey("isGroupingAfterRowPresent") && lineitemmap.get("isGroupingAfterRowPresent") != null) {
                isGroupingAfterRowPresent = Boolean.parseBoolean(lineitemmap.get("isGroupingAfterRowPresent").toString());
            }
            if (lineitemmap.containsKey("islineitemrepeat") && lineitemmap.get("islineitemrepeat") != null) {
                islineitemrepeat = Boolean.parseBoolean(lineitemmap.get("islineitemrepeat").toString());
            }
            if (lineitemmap.containsKey("isconsolidated") && lineitemmap.get("isconsolidated") != null) {
                isconsolidated = Boolean.parseBoolean(lineitemmap.get("isconsolidated").toString());
            }
            if (lineitemmap.containsKey("isExtendLineItem") && lineitemmap.get("isExtendLineItem") != null) {
                isExtendLineItem = Boolean.parseBoolean(lineitemmap.get("isExtendLineItem").toString());
            }     
            if (lineitemmap.containsKey(Constants.pageSize) && lineitemmap.get(Constants.pageSize) != null) {
                pageSize = (String) lineitemmap.get(Constants.pageSize);
            }
            if (lineitemmap.containsKey(Constants.pageOrientation) && lineitemmap.get(Constants.pageOrientation) != null) {
                pageOrientation = (String) lineitemmap.get(Constants.pageOrientation);
            }
            if (lineitemmap.containsKey(Constants.adjustPageHeight) && lineitemmap.get(Constants.adjustPageHeight) != null) {
                adjustPageHeight = (String) lineitemmap.get(Constants.adjustPageHeight);
            }
            if (lineitemmap.containsKey(Constants.SORTFIELD) && lineitemmap.get(Constants.SORTFIELD) != null) {
                sortField = (String) lineitemmap.get(Constants.SORTFIELD);
            }
            if (lineitemmap.containsKey(Constants.SORTFIELDXTYPE) && lineitemmap.get(Constants.SORTFIELDXTYPE) != null) {
                sortFieldXtype = (String) lineitemmap.get(Constants.SORTFIELDXTYPE);
            }
            if (lineitemmap.containsKey(Constants.SORTORDER) && lineitemmap.get(Constants.SORTORDER) != null) {
                sortOrder = (String) lineitemmap.get(Constants.SORTORDER);
            }
            
            boolean isAgeingTablePresent = false;
            boolean ismulticurrency = false;
            boolean isCustomerVendorCurrency = false;
            boolean isincludecurrent = false;
            String ageingTableParentRowid = "";
            String ageingTableStyle = "";
            String intervalText = "";
            String intervalType = "";
            String intervalPlaceHolder = ""; //ERP-28745
            int noofintervals = 3;
            int interval = 30;
            JSONArray ageingTableHeaderItems = new JSONArray();
            JSONArray ageingTableDataItems = new JSONArray();
            if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                HashMap<String, Object> ageingTablemap = CustomDesignHandler.getAgeingTableDetails(jArr);
                if (ageingTablemap.containsKey(Constants.isAgeingTablePresent) && ageingTablemap.get(Constants.isAgeingTablePresent) != null) {
                    isAgeingTablePresent = (Boolean) ageingTablemap.get(Constants.isAgeingTablePresent);
                }
                if (ageingTablemap.containsKey("ageingTableHeaderItems") && ageingTablemap.get("ageingTableHeaderItems") != null) {
                    ageingTableHeaderItems = (JSONArray) ageingTablemap.get("ageingTableHeaderItems");
                }
                if (ageingTablemap.containsKey("ageingTableDataItems") && ageingTablemap.get("ageingTableDataItems") != null) {
                    ageingTableDataItems = (JSONArray) ageingTablemap.get("ageingTableDataItems");
                }
                if (ageingTablemap.containsKey("noofintervals") && ageingTablemap.get("noofintervals") != null) {
                    noofintervals =  Integer.parseInt(ageingTablemap.get("noofintervals").toString());
                }
                if (ageingTablemap.containsKey("interval") && ageingTablemap.get("interval") != null) {
                    interval =  Integer.parseInt(ageingTablemap.get("interval").toString());
                }
                if (ageingTablemap.containsKey("ageingTableParentRowid") && ageingTablemap.get("ageingTableParentRowid") != null) {
                    ageingTableParentRowid =  (ageingTablemap.get("ageingTableParentRowid").toString());
                }
                if (ageingTablemap.containsKey("ageingTableStyle") && ageingTablemap.get("ageingTableStyle") != null) {
                    ageingTableStyle =  (ageingTablemap.get("ageingTableStyle").toString());
                }
                if (ageingTablemap.containsKey("ismulticurrency") && ageingTablemap.get("ismulticurrency") != null) {
                    ismulticurrency =  Boolean.valueOf(ageingTablemap.get("ismulticurrency").toString());
                }
                if (ageingTablemap.containsKey("isCustomerVendorCurrency") && ageingTablemap.get("isCustomerVendorCurrency") != null) {
                    isCustomerVendorCurrency =  Boolean.valueOf(ageingTablemap.get("isCustomerVendorCurrency").toString());
                }
                if (ageingTablemap.containsKey("isincludecurrent") && ageingTablemap.get("isincludecurrent") != null) {
                    isincludecurrent = Boolean.valueOf(ageingTablemap.get("isincludecurrent").toString());
                }
                if (ageingTablemap.containsKey("intervalType") && ageingTablemap.get("intervalType") != null) {
                    intervalType = (ageingTablemap.get("intervalType").toString());
                }
                if (ageingTablemap.containsKey("intervalPlaceHolder") && ageingTablemap.get("intervalPlaceHolder") != null) { //ERP-28745
                    intervalPlaceHolder = (ageingTablemap.get("intervalPlaceHolder").toString());
                }
                if (ageingTablemap.containsKey("intervalText") && ageingTablemap.get("intervalText") != null) {
                    intervalText = (ageingTablemap.get("intervalText").toString());
                }
            }
//        for (int cnt = 0; cnt < jArr.length(); cnt++) {
//            JSONArray colJArr = jArr.getJSONObject(cnt).getJSONArray("data");
//            for (int colcnt = 0; colcnt < colJArr.length(); colcnt++) {
//                JSONArray itemsJArr = colJArr.getJSONObject(colcnt).getJSONArray("data");
//                for (int itemCnt = 0; itemCnt < itemsJArr.length(); itemCnt++) {
//                    JSONObject jObj = itemsJArr.getJSONObject(itemCnt);
//                    if (jObj.optInt("fieldType", 0) == 11 ) {
//                        customizedlineItems = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).getJSONArray("lineitems");
//                        lineItem_YAxis = jObj.optInt("y", -1);
//                        lineitemheight = jObj.optInt("height", 60);
//                        lineitemwidth = jObj.optInt("width", 850);
//                        isLineItemPresent = true;
//                        break;
//                    }
//                }
//            }
////                    else if(!StringUtil.isNullOrEmpty(jObj.getString("repeatglobalfield"))){
////                             repeatglobalfield=jObj.optString("repeatglobalfield", "");
////                    }
////            bottomItems.put(jObj.getString("id"), jObj.optInt("y", 0));
//        }
//              if(jArr.)
                /*
             * Below block to replace module global placeholders with actual
             * values //
             */ //for product
            
            org.jsoup.nodes.Document jsoupForFormulaBuilder = Jsoup.parse(html);
            org.jsoup.select.Elements formulaEles = (Elements) jsoupForFormulaBuilder.getElementsByAttribute(CustomDesignerConstants.ISFORMULA);
            for(int ind=0; ind < formulaEles.size(); ind++){
                org.jsoup.nodes.Element formulaEle = formulaEles.get(ind);
                String formulaName = formulaEle.html();
                String formulaPlaceholder = formulaEle.attr("attribute");
                String formula = formulaPlaceholder.replace("{PLACEHOLDER:", "").replace("}", "");
                String newFormulaName = formula;
                formulaEle.html(newFormulaName);
                formulaEle.attr("attribute", "{PLACEHOLDER:"+formulaName+"}");
            }
            html = jsoupForFormulaBuilder.outerHtml();
            
            /* If QA Approval module then change moduleid to respective main module.
             * Also maintain flag for QA Approval flow.
             * Set transactionId to main module transaction id.
             */
            boolean isQAApproval = false;
            if(moduleid == Constants.Acc_QA_APPROVAL_MODULE_ID){
                isQAApproval = true;
                if(!StringUtil.isNullOrEmpty(requestObj.optString("transactionid"))){
                    transactionId = requestObj.optString("transactionid");
                }
                switch(templateSubtype){
                    case "0":
                        moduleid = Constants.Acc_Delivery_Order_ModuleId;
                        break;
                }
            }
            
            if ((moduleid == Constants.Acc_Credit_Note_ModuleId && !templateSubtype.equals("1")&& !templateSubtype.equals(CustomDesignerConstants.UNDERCHARGE_SUBTYPE)&& !templateSubtype.equals(CustomDesignerConstants.OVERCHARGE_SUBTYPE)) || (moduleid == Constants.Acc_Debit_Note_ModuleId && !templateSubtype.equals("1")&& !templateSubtype.equals(CustomDesignerConstants.UNDERCHARGE_SUBTYPE)&& !templateSubtype.equals(CustomDesignerConstants.OVERCHARGE_SUBTYPE)) || moduleid == Constants.Acc_Receive_Payment_ModuleId || moduleid == Constants.Acc_Make_Payment_ModuleId) {
                allFieldParameters.put("prodDiscriptionRitchTextboxFlag", prodDiscriptionRitchTextboxFlag);
                jrepeat = Globalcellrepeatrows(html, json, lineItemsArr, pagefooterhtml, moduleid, 1, pageheaderhtml, negativeValueIn, countryid, allFieldParameters);
                html = jrepeat.getString("html");
                pagefooterhtml = jrepeat.getString("pagefooterhtml");
                pageheaderhtml = jrepeat.getString("pageheaderhtml");
            }
            HashMap<String, Integer> default_headers = getDefaultHeaderName_XtypeNew(customDesignDAOObj, jArr);
            if (!StringUtil.isNullOrEmpty(sqlquery)) {
                html = replaceGlobalLevelFields(html, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, transactionId, sqlquery, invoiceCols, df, default_headers, json, false, negativeValueIn,countryid,allFieldParameters);
                pageheaderhtml = replaceGlobalLevelFields(pageheaderhtml, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, transactionId, sqlquery, invoiceCols, df, default_headers, json, false, negativeValueIn,countryid,allFieldParameters);
                pagefooterhtml = replaceGlobalLevelFields(pagefooterhtml, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, transactionId, sqlquery, invoiceCols, df, default_headers, json, false, negativeValueIn,countryid,allFieldParameters);
                lineItemFirstRowHTML = replaceGlobalLevelFields(lineItemFirstRowHTML, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, transactionId, sqlquery, invoiceCols, df, default_headers, json, true, negativeValueIn,countryid,allFieldParameters);
                lineItemLastRowHTML = replaceGlobalLevelFields(lineItemLastRowHTML, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, transactionId, sqlquery, invoiceCols, df, default_headers, json, true, negativeValueIn,countryid,allFieldParameters);
            }
            boolean isAged = requestObj.optBoolean("isAged", false);
            
            if ( moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId ){
                Date endDate = authHandler.getDateOnlyFormat().parse(requestObj.optString("enddate"));
                Date startDate = null;
                if(!StringUtil.isNullOrEmpty(requestObj.optString("startdate"))) {
                    startDate = authHandler.getDateOnlyFormat().parse(requestObj.optString("startdate"));
                } else {
                    if (isAged) {
                        startDate = authHandler.getDateOnlyFormat().parse(Constants.opening_Date);
                    }
                }
                Date asofDate = authHandler.getDateOnlyFormat().parse(requestObj.optString("asofdate"));
                Map<String,Object> requestMap = new HashMap<>();
                requestMap.put("endDate",endDate);
                requestMap.put("asofDate",asofDate);
                requestMap.put("startDate",startDate);
                requestMap.put("companyid",companyid);
                requestMap.put("transactionId",transactionId);
                requestMap.put("moduleid",moduleid);
                requestMap.put("df", authHandler.getUserDateFormatterWithoutTimeZone(requestObj));
                requestMap.put("userdf", authHandler.getUserDateFormatterWithoutTimeZone(requestObj));
                requestMap.put("templatesubtype", templateSubtype);
                
                JSONObject cvJobj = getCVDetails(customDesignDAOObj,requestMap);
                html = replaceGloballevelFieldsForSOA(html,cvJobj,moduleid, templateSubtype,allFieldParameters);
                pageheaderhtml = replaceGloballevelFieldsForSOA(pageheaderhtml,cvJobj,moduleid, templateSubtype,allFieldParameters);
                pagefooterhtml = replaceGloballevelFieldsForSOA(pagefooterhtml,cvJobj,moduleid, templateSubtype,allFieldParameters);
                lineItemFirstRowHTML = replaceGloballevelFieldsForSOA(lineItemFirstRowHTML,cvJobj,moduleid, templateSubtype,allFieldParameters);
                lineItemLastRowHTML = replaceGloballevelFieldsForSOA(lineItemLastRowHTML,cvJobj,moduleid, templateSubtype,allFieldParameters);
            }

            /*
             * Below block to replace module custom global placeholders with
             * actual values
             */
            /*
             * to replace global section custom fields
             */
            JSONObject customfieldjson = new JSONObject();
            JSONObject objectDetailsjson = new JSONObject();
            HashMap<String, Object> customParams = new HashMap<String, Object>();

            if (moduleid == Constants.Acc_ConsignmentDeliveryOrder_ModuleId && isConsignment) { //ERP-10723
                TreeMap<String, String> diffdbCols = null;
                diffdbCols = CustomDesignerConstants.ConsignmentDOtoOtherMap;
                if (diffdbCols != null) {
                    TreeMap<String, String> moduletoOtherMap = (TreeMap<String, String>) diffdbCols.clone();
                    if (moduletoOtherMap != null) {
                        for (Map.Entry<String, String> mapModule : moduletoOtherMap.entrySet()) {
                            int mapModuleId = StringUtil.getInteger(mapModule.getValue());
                            customParams.put(Constants.moduleid, mapModuleId);
                            customParams.put("billid", linkedreferencenumber);
                            customParams.put("pageheaderhtml", pageheaderhtml);
                            customParams.put("html", html);
                            customParams.put("pagefooterhtml", pagefooterhtml);
                            customParams.put("lineItemFirstRowHTML", lineItemFirstRowHTML);
                            customParams.put("lineItemLastRowHTML", lineItemLastRowHTML);
                            customParams.put("globalCustomFieldList", globalCustomFieldList);
                            customfieldjson = ReplaceCustomFields(requestObj, accountingHandlerDAOobj, accAccountDAOobj, customParams, json,allFieldParameters);
                            html = customfieldjson.optString("html", "");
                            pagefooterhtml = customfieldjson.optString("pagefooterhtml", "");
                            pageheaderhtml = customfieldjson.optString("pageheaderhtml", "");
                            lineItemFirstRowHTML = customfieldjson.optString("lineItemFirstRowHTML", "");
                            lineItemLastRowHTML = customfieldjson.optString("lineItemLastRowHTML", "");
                        }
                    }
                }
            }
            customParams.clear();
            customParams.put("billid", transactionId);
            if ( moduleid == Constants.Acc_Customer_AccStatement_ModuleId ) {
                customParams.put(Constants.moduleid, Constants.Acc_Customer_ModuleId);
            } else if ( moduleid == Constants.Acc_Vendor_AccStatement_ModuleId ) {
                customParams.put(Constants.moduleid, Constants.Acc_Vendor_ModuleId);
            } else if (moduleid == Constants.Acc_Credit_Note_ModuleId && templateSubtype.equals("1")) { //Check For template for Sales return with credit note
                customParams.put("postText",CustomDesignerConstants.CUSTOM_POST_TEXT_CN);
                customParams.put(Constants.moduleid, moduleid);
            } else if( moduleid == Constants.Acc_Debit_Note_ModuleId && templateSubtype.equals("1")){ //Check For template for Purchase return with credit note
                customParams.put("postText",CustomDesignerConstants.CUSTOM_POST_TEXT_DN);
                customParams.put(Constants.moduleid, moduleid);
            } else {
                customParams.put(Constants.moduleid, moduleid);
            }
            //If template is of asset type then update module id to asset module id
            if (templateSubtype.equals(CustomDesignerConstants.ASSET)) {
                if (moduleid == Constants.Acc_Purchase_Order_ModuleId) {
                    customParams.put(Constants.moduleid, Constants.Acc_FixedAssets_Purchase_Order_ModuleId);
                } else if (moduleid == Constants.Acc_Purchase_Requisition_ModuleId) {
                    customParams.put(Constants.moduleid, Constants.Acc_FixedAssets_PurchaseRequisition_ModuleId);
                } else if (moduleid == Constants.Acc_RFQ_ModuleId) {
                    customParams.put(Constants.moduleid, Constants.Acc_FixedAssets_RFQ_ModuleId);
                } else if (moduleid == Constants.Acc_Vendor_Quotation_ModuleId) {
                    customParams.put(Constants.moduleid, Constants.Acc_FixedAssets_Vendor_Quotation_ModuleId);
                } else if (moduleid == Constants.Acc_Vendor_Invoice_ModuleId) {
                    customParams.put(Constants.moduleid, Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId);
                } else if (moduleid == Constants.Acc_Invoice_ModuleId) {
                    customParams.put(Constants.moduleid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);
                } else if (moduleid == Constants.Acc_Goods_Receipt_ModuleId) {
                    customParams.put(Constants.moduleid, Constants.Acc_FixedAssets_GoodsReceipt_ModuleId);
                } else if (moduleid == Constants.Acc_Delivery_Order_ModuleId) {
                    customParams.put(Constants.moduleid, Constants.Acc_FixedAssets_DeliveryOrder_ModuleId);
                } else if (moduleid == Constants.Acc_Purchase_Return_ModuleId) {
                    customParams.put(Constants.moduleid, Constants.Acc_FixedAssets_Purchase_Return_ModuleId);
                } else if (moduleid == Constants.Acc_Sales_Return_ModuleId) {
                    customParams.put(Constants.moduleid, Constants.Acc_FixedAssets_Sales_Return_ModuleId);
                }
            }
            customParams.put("pageheaderhtml", pageheaderhtml);
            customParams.put("html", html);
            customParams.put("pagefooterhtml", pagefooterhtml);
            customParams.put("lineItemFirstRowHTML", lineItemFirstRowHTML);
            customParams.put("lineItemLastRowHTML", lineItemLastRowHTML);
            customParams.put("globalCustomFieldList", globalCustomFieldList);
            if (!(isJobOrderFlow || isQAApproval)) { // If not job order flow and not QA Approval module
                customfieldjson = ReplaceCustomFields(requestObj, accountingHandlerDAOobj, accAccountDAOobj, customParams, json,allFieldParameters);
                html = customfieldjson.optString("html", "");
                pagefooterhtml = customfieldjson.optString("pagefooterhtml", "");
                pageheaderhtml = customfieldjson.optString("pageheaderhtml", "");
                lineItemFirstRowHTML = customfieldjson.optString("lineItemFirstRowHTML", "");
                lineItemLastRowHTML = customfieldjson.optString("lineItemLastRowHTML", "");
            }
            /**
             * If Credit Note with Sales Return template then replace Sales Return custom fields
             * If Debit Note with Purchase Return template then replace Purchase Return custom fields
             */
            if ((moduleid == Constants.Acc_Credit_Note_ModuleId || moduleid == Constants.Acc_Debit_Note_ModuleId) && templateSubtype.equals("1")) {
                customParams.clear();
                customParams.put("pageheaderhtml", pageheaderhtml);
                customParams.put("html", html);
                customParams.put("pagefooterhtml", pagefooterhtml);
                customParams.put("lineItemFirstRowHTML", lineItemFirstRowHTML);
                customParams.put("lineItemLastRowHTML", lineItemLastRowHTML);
                customParams.put("globalCustomFieldList", globalCustomFieldList);
                //get and put Sales Return or Purchase Return ID from CN or DN
                if (moduleid == Constants.Acc_Credit_Note_ModuleId) {
                    KwlReturnObject cap = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), transactionId);
                    CreditNote creditNote = (CreditNote) cap.getEntityList().get(0);
                    String srid = creditNote.getSalesReturn() != null ? creditNote.getSalesReturn().getID() : "";
                    if (!StringUtil.isNullOrEmpty(srid)) {
                        //put Sales Return ID
                        customParams.put("billid", srid);
                        //put Sales Return module id
                        customParams.put(Constants.moduleid, Constants.Acc_Sales_Return_ModuleId);
                    }
                } else {
                    KwlReturnObject cap = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), transactionId);
                    DebitNote DebitNote = (DebitNote) cap.getEntityList().get(0);
                    String prid = DebitNote.getPurchaseReturn() != null ? DebitNote.getPurchaseReturn().getID() : "";
                    if (!StringUtil.isNullOrEmpty(prid)) {
                        //put Purchase Return ID
                        customParams.put("billid", prid);
                        //put Purchase Return module id
                        customParams.put(Constants.moduleid, Constants.Acc_Purchase_Return_ModuleId);
                    }
                }
                customfieldjson = ReplaceCustomFields(requestObj, accountingHandlerDAOobj, accAccountDAOobj, customParams, json, allFieldParameters);
                html = customfieldjson.optString("html", "");
                pagefooterhtml = customfieldjson.optString("pagefooterhtml", "");
                pageheaderhtml = customfieldjson.optString("pageheaderhtml", "");
                lineItemFirstRowHTML = customfieldjson.optString("lineItemFirstRowHTML", "");
                lineItemLastRowHTML = customfieldjson.optString("lineItemLastRowHTML", "");
            }

            /*
             * Calculating Custom Fields Value for Customer and Vendor
             */
            TreeMap<String, String> baseModuletoOtherMap = null;
            baseModuletoOtherMap = getOtherFieldsMapForModule(moduleid, templateSubtype);
            if (baseModuletoOtherMap != null) {
                TreeMap<String, String> moduletoOtherMap = (TreeMap<String, String>) baseModuletoOtherMap.clone();
                if (moduletoOtherMap != null) {
                    for (Map.Entry<String, String> mapModule : moduletoOtherMap.entrySet()) {
                        int mapModuleId = StringUtil.getInteger(mapModule.getValue());
                        if (mapModuleId == Constants.Acc_Customer_ModuleId || mapModuleId == Constants.Acc_Vendor_ModuleId) {
                            String customerId = "", vendorId = "";
                            
                            objectDetailsjson = getObjectDetails(moduleid, transactionId, accountingHandlerDAOobj);//fetching customerid and vendorid
                            customerId = objectDetailsjson.optString("customerId", "");
                            vendorId = objectDetailsjson.optString("vendorId", "");
                            
                            customParams.clear();
                            if (!StringUtil.isNullOrEmpty(customerId)) {
                                customParams.put("billid", customerId);
                            } else if (!StringUtil.isNullOrEmpty(vendorId)) {
                                customParams.put("billid", vendorId);
                            }
                            customParams.put(Constants.moduleid, mapModuleId);
                            customParams.put("pageheaderhtml", pageheaderhtml);
                            customParams.put("html", html);
                            customParams.put("pagefooterhtml", pagefooterhtml);
                            customParams.put("lineItemFirstRowHTML", lineItemFirstRowHTML);
                            customParams.put("lineItemLastRowHTML", lineItemLastRowHTML);
                            customParams.put("globalCustomFieldList", globalCustomFieldList);
                            customfieldjson = ReplaceCustomFields(requestObj, accountingHandlerDAOobj, accAccountDAOobj, customParams, json,allFieldParameters);
                            html = customfieldjson.optString("html", "");
                            pagefooterhtml = customfieldjson.optString("pagefooterhtml", "");
                            pageheaderhtml = customfieldjson.optString("pageheaderhtml", "");
                            lineItemFirstRowHTML = customfieldjson.optString("lineItemFirstRowHTML", "");
                            lineItemLastRowHTML = customfieldjson.optString("lineItemLastRowHTML", "");
                        }
                    }
                }
            }
            
            if (templateSubtype.equals("1")) {
                if (moduleid == Constants.Acc_ConsignmentRequest_ModuleId && isConsignment) {    //reassigning again moduleid to salesorder & delivery order
                    moduleid = Constants.Acc_Sales_Order_ModuleId;
                } else if (moduleid == Constants.Acc_ConsignmentDeliveryOrder_ModuleId && isConsignment) {
                    moduleid = Constants.Acc_Delivery_Order_ModuleId;
                } else if (moduleid == Constants.Acc_ConsignmentSalesReturn_ModuleId && isConsignment) {
                    moduleid = Constants.Acc_Sales_Return_ModuleId;
                } else if (moduleid == Constants.Acc_ConsignmentInvoice_ModuleId && isConsignment) {
                    moduleid = Constants.Acc_Invoice_ModuleId;
                } else if (moduleid == Constants.Acc_Credit_Note_ModuleId) {
                    moduleid = Constants.Acc_Sales_Return_ModuleId;
                } else if (moduleid == Constants.Acc_Debit_Note_ModuleId) {
                    moduleid = Constants.Acc_Purchase_Return_ModuleId;
                }
            }else if (templateSubtype.equals("2")) {
                if (moduleid == Constants.Acc_Lease_DO) {
                    moduleid = Constants.Acc_Delivery_Order_ModuleId;
                } else if (moduleid == Constants.Acc_Lease_Return) {
                    moduleid = Constants.Acc_Sales_Return_ModuleId;
                } else if (moduleid == Constants.LEASE_INVOICE_MODULEID) { //reassigning again moduleid to sales invoice
                    moduleid = Constants.Acc_Invoice_ModuleId;
                } else if (moduleid == Constants.Acc_Lease_Order_ModuleId) { //reassigning again moduleid to sales order
                    moduleid = Constants.Acc_Sales_Order_ModuleId;
                } else if (moduleid == Constants.Acc_Lease_Quotation) { //reassigning again moduleid to customer quotation
                    moduleid = Constants.Acc_Customer_Quotation_ModuleId;
                }
            }
            /*
             * replace summary placeholders - Total Amount, Total Discount,
             * Total Tax, Subtotal
             */
            HashMap<String, String> summaryFields = new HashMap<String, String>();
            if (((moduleid != Constants.Acc_Credit_Note_ModuleId) || (moduleid == Constants.Acc_Credit_Note_ModuleId && (templateSubtype.equals(CustomDesignerConstants.UNDERCHARGE_SUBTYPE) || templateSubtype.equals(CustomDesignerConstants.OVERCHARGE_SUBTYPE)))) 
                    && ((moduleid != Constants.Acc_Debit_Note_ModuleId) || (moduleid == Constants.Acc_Debit_Note_ModuleId && (templateSubtype.equals(CustomDesignerConstants.UNDERCHARGE_SUBTYPE) || templateSubtype.equals(CustomDesignerConstants.OVERCHARGE_SUBTYPE)))) 
                    && moduleid != Constants.Acc_Receive_Payment_ModuleId && moduleid != Constants.Acc_Make_Payment_ModuleId) {
                for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
//                ArrayList<CustomDesignLineItemProp> rowDatalist = new ArrayList();
                    JSONObject itemData = lineItemsArr.getJSONObject(cnt);
                    if (itemData.has("summarydata")) {
//                            if (moduleid == Constants.Acc_Credit_Note_ModuleId && templateSubtype.contains("1")) {
//                                moduleid = Constants.Acc_Sales_Return_ModuleId;
//                            }
                        if (moduleid != Constants.Acc_Stock_Request_ModuleId && moduleid != Constants.Inventory_ModuleId && moduleid != Constants.Acc_Stock_Adjustment_ModuleId && moduleid != Constants.Acc_InterStore_ModuleId
                                && moduleid != Constants.Acc_InterLocation_ModuleId) {//Not calculated for Inventory Module
                            summaryFields = LineItemColumnModuleMapping.InvoiceProductSummaryItems;
                            for (Map.Entry<String, String> entry : summaryFields.entrySet()) {
                                JSONObject staticColInfo = new JSONObject(summaryFields.get(entry.getKey()));
                                if(html.contains("#"+staticColInfo.getString("label")+"#")
                                        || pageheaderhtml.contains("#"+staticColInfo.getString("label")+"#")
                                        || pagefooterhtml.contains("#"+staticColInfo.getString("label")+"#")
                                        || lineItemFirstRowHTML.contains("#"+staticColInfo.getString("label")+"#")
                                        || lineItemLastRowHTML.contains("#"+staticColInfo.getString("label")+"#")){
                                    if((staticColInfo.optBoolean("isFromUnitPriceAndAmount", false)) && !displayUnitPriceAndAmountInPrint){
                                        html = html.replace("#" + staticColInfo.getString("label") + "#", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                        pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                        pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                        lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                        lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                    } else{
                                        if (itemData.has(entry.getKey())) {
                                            String value = itemData.get(entry.getKey()).toString();

            //                                    int decimalPrecision = getDecimalPrecision(new JSONObject("{JSON:" + json + "}"), staticColInfo.getString("label"));
                                                int decimalPrecision = allFieldParameters.optInt(staticColInfo.getString("label") + "decimalPrecision",2);
            //                                    String valueSeperator = getValueSeperator(new JSONObject("{JSON:" +json+"}"),staticColInfo.getString("label"));
                                                String valueSeperator = allFieldParameters.optString(staticColInfo.getString("label") + "valueSeparator","");
                                                boolean zeroValueAsBlank = allFieldParameters.optBoolean(staticColInfo.getString("label") + "showzerovalueasblank", false);
                                            if (StringUtil.isNullOrEmpty(value)) {
            //                                        String defVal = getDefaultFieldValue(new JSONObject("{JSON:" + json + "}"), staticColInfo.getString("label"));
                                                    String defVal = allFieldParameters.optString(staticColInfo.getString("label") + "defaultValue","");
                                                if (decimalPrecision != -1) {
                                                    try {
                                                        double doublevalue = Double.parseDouble(defVal);
                                                        defVal = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision,countryid);
                                                    } catch (Exception Ex) {
                                                    }
                                                }
                                                if(zeroValueAsBlank){
                                                    defVal = CustomDesignHandler.getZeroAmountAsBlank(defVal);
                                                }
                                                if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                    defVal = replaceWithValueSeperator(defVal, valueSeperator);
                                                }
                                                if (StringUtil.isNullOrEmpty(defVal)) {
                                                    html = removeSelectFieldHavingNoDataFromHTML(html, staticColInfo.getString("label"));
                                                    pagefooterhtml = removeSelectFieldHavingNoDataFromHTML(pagefooterhtml, staticColInfo.getString("label"));
                                                    pageheaderhtml = removeSelectFieldHavingNoDataFromHTML(pageheaderhtml, staticColInfo.getString("label"));
                                                    lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", "");
                                                    lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", "");
                                                } else {
                                                    html = html.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                    pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                    pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                    lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                    lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                }
                                            } else {

                                                if (decimalPrecision != -1) {
        //                                            value = value.replaceAll(",", "");

                                                    try {
                                                        if (staticColInfo.optBoolean("isNumeric", false)) {
                                                            String valueArr[] = value.split("!##");
                                                            value = "";
                                                            for (String val : valueArr) {
                                                                double doublevalue = Double.parseDouble(val);
                                                                val = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision, countryid);
                                                                if (val.contains("-")) {
                                                                    if (negativeValueIn == 1) {
                                                                        //No need to modification
                                                                    } else if (negativeValueIn == 2) {
                                                                        val = val.replace("-", "");
                                                                        val = "(" + val + ")";
                                                                    }
                                                                }
                                                                value += val + "!##";
                                                            }
                                                            value = value.substring(0,value.length()-3);
                                                        } else {
                                                            double doublevalue = Double.parseDouble(value);
                                                            value = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision,countryid);
                                                            if(value.contains("-")){
                                                                if(negativeValueIn == 1){
                                                                    //No need to modification
                                                                } else if(negativeValueIn == 2){
                                                                    value = value.replace("-", "");
                                                                    value = "("+value+")";
                                                                }
                                                            }
                                                        }
                                                    } catch (Exception Ex) {
                                                    }
                                                } else {
                                                    value = value.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
                                                }
                                                if(zeroValueAsBlank){
                                                    value = CustomDesignHandler.getZeroAmountAsBlank(value);
                                                }
                                                if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                    value = replaceWithValueSeperator(value, valueSeperator);
                                                }
                                                html = html.replace("#" + staticColInfo.getString("label") + "#", value);
                                                pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                                pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                                lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                                lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                            }

                                        }
                                    }
                                }
                            }

                            /*
                             * Summary Terms Calcution
                             */
                            HashMap<String, Object> hm = new HashMap<String, Object>();
                            JSONObject summaryjson = new JSONObject();
                            hm.put("companyid", companyid);
                            if (moduleid == Constants.Acc_Invoice_ModuleId || moduleid == Constants.Acc_Sales_Order_ModuleId || moduleid == Constants.Acc_Customer_Quotation_ModuleId || moduleid == Constants.Acc_Delivery_Order_ModuleId) {
                                hm.put("salesOrPurchaseFlag", true);
                            } else if (moduleid == Constants.Acc_Vendor_Invoice_ModuleId || moduleid == Constants.Acc_Purchase_Order_ModuleId || moduleid == Constants.Acc_Vendor_Quotation_ModuleId || moduleid == Constants.Acc_Goods_Receipt_ModuleId) {
                                hm.put("salesOrPurchaseFlag", false);
                            }

                            if (moduleid == Constants.Acc_Invoice_ModuleId || moduleid == Constants.Acc_Vendor_Invoice_ModuleId || moduleid == Constants.Acc_Customer_Quotation_ModuleId
                                    || moduleid == Constants.Acc_Sales_Order_ModuleId || moduleid == Constants.Acc_Purchase_Order_ModuleId
                                    || moduleid == Constants.Acc_Vendor_Quotation_ModuleId || moduleid == Constants.Acc_Delivery_Order_ModuleId || moduleid == Constants.Acc_Goods_Receipt_ModuleId) {
                                hm.put("pageheaderhtml", pageheaderhtml);
                                hm.put("html", html);
                                hm.put("pagefooterhtml", pagefooterhtml);
                                hm.put("lineItemFirstRowHTML", lineItemFirstRowHTML);
                                hm.put("lineItemLastRowHTML", lineItemLastRowHTML);
                                summaryjson = fetchSummaryTermFields(customDesignDAOObj, hm, numberFieldArray, itemData, negativeValueIn, countryid, json, allFieldParameters);
                                html = summaryjson.optString("html", "");
                                pagefooterhtml = summaryjson.optString("pagefooterhtml", "");
                                pageheaderhtml = summaryjson.optString("pageheaderhtml", "");
                                lineItemFirstRowHTML = summaryjson.optString("lineItemFirstRowHTML", "");
                                lineItemLastRowHTML = summaryjson.optString("lineItemLastRowHTML", "");
                            }
                        }
                        //Multiple Approver Levels Calculation.
                        for (int level = 1; level <= 10; level++) {
                            if (itemData.has(Constants.ApproverLevel + level)) {
                                String value = itemData.get(Constants.ApproverLevel + level).toString();
                                html = html.replace("#" + Constants.ApproverLevel + level + "#", value);
                                pagefooterhtml = pagefooterhtml.replace("#" + Constants.ApproverLevel + level + "#", value);
                                pageheaderhtml = pageheaderhtml.replace("#" + Constants.ApproverLevel + level + "#", value);
                            } else {
                                html = html.replace("#" + Constants.ApproverLevel + level + "#", "");
                                pagefooterhtml = pagefooterhtml.replace("#" + Constants.ApproverLevel + level + "#", "");
                                pageheaderhtml = pageheaderhtml.replace("#" + Constants.ApproverLevel + level + "#", "");
                            }
                        }
                        /*
                         * To Add Extra fields related to perticular module-
                         * (Mayur Bhokase)
                         */
                        HashMap<String, String> extraFields = new HashMap<String, String>();
                        extraFields = getExtraFieldsForModule(moduleid, countryid);
                        if (extraFields != null) {
                            /**
                             * get extra fields related to template subtype
                             */
                            extraFields = (HashMap<String, String>) extraFields.clone();
                            HashMap<String, String> subtypExtraFieldsMap = null;
                            subtypExtraFieldsMap = CustomDesignHandler.getExtraFieldsForSubtype(moduleid, templateSubtype, countryid);
                            if(subtypExtraFieldsMap != null){
                                extraFields.putAll(subtypExtraFieldsMap);
                            }
                            
                            if(isJobOrderFlow){
                                /*
                                * Get Global and Line level Default and Custom fields for Job Order Flow only
                                */
                                extraFields = getJobOrderFlowFields(moduleid, companyid, extraFields, customDesignDAOObj);
                            }
                            
                            if(isQAApproval){
                                /*
                                * Get module wise Extra Map fields and Custom fields for QA Approval
                                */
                                extraFields = getModulewiseExtraFieldsAndCustomFields(moduleid, companyid, extraFields, customDesignDAOObj);
                            }

                            for (Map.Entry<String, String> entry : extraFields.entrySet()) {
                                JSONObject staticColInfo = new JSONObject(extraFields.get(entry.getKey()));
                                if(html.contains("#"+staticColInfo.getString("label")+"#")
                                        || pageheaderhtml.contains("#"+staticColInfo.getString("label")+"#")
                                        || pagefooterhtml.contains("#"+staticColInfo.getString("label")+"#")
                                        || lineItemFirstRowHTML.contains("#"+staticColInfo.getString("label")+"#")
                                        || lineItemLastRowHTML.contains("#"+staticColInfo.getString("label")+"#")){
                                    if((staticColInfo.optBoolean("isFromUnitPriceAndAmount", false)) && !displayUnitPriceAndAmountInPrint){
                                        html = html.replace("#" + staticColInfo.getString("label") + "#", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                        pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                        pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                        lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                        lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS);
                                    } else{
                                        if (itemData.has(entry.getKey())) {
                                            String value = itemData.get(entry.getKey()).toString();
                                            /*
                                            * Sorting Global Level Dimensions &
                                            * GlobalLevel Diemnsions
                                            */
                                            String ordereddimensionfields = "";
                                            if (entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelDimensions) || entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelCustomfields)) {
                                                String fieldid = "";
                                                if (entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelDimensions)) {
                                                    fieldid = CustomDesignerConstants.AllGloballevelDimensions;

                                                } else if (entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelCustomfields)) {
                                                    fieldid = CustomDesignerConstants.AllGloballevelCustomfields;
                                                } else {
                                                    fieldid = "";
                                                }

                                                HashMap<String, Object> fieldparams = new HashMap<String, Object>();
                                                fieldparams.put(Constants.moduleid, moduleid);
                                                fieldparams.put(CustomDesignerConstants.json, json);
                                                fieldparams.put(CustomDesignerConstants.islineitem, "false");
                                                fieldparams.put(CustomDesignerConstants.fieldid, fieldid);
                                                HashMap<String, Object> returnvalues = new HashMap<String, Object>();
                                                returnvalues = CustomFieldDimensionwithSequence(fieldparams, itemData);
                                                if (returnvalues.containsKey("prodData")) {
                                                    ordereddimensionfields = (String) returnvalues.get("prodData");
                                                    if (!StringUtil.isNullOrEmpty(ordereddimensionfields)) {
                                                        value = ordereddimensionfields + "</br>";
                                                    }
                                                }
                                            }

        //                                    int decimalPrecision = getDecimalPrecision(new JSONObject("{JSON:" + json + "}"), staticColInfo.getString("label"));
                                            int decimalPrecision = allFieldParameters.optInt(staticColInfo.getString("label") + "decimalPrecision",2);
        //                                    String valueSeperator = getValueSeperator(new JSONObject("{JSON:" +json+"}"),staticColInfo.getString("label"));
                                            String valueSeperator = allFieldParameters.optString(staticColInfo.getString("label") + "valueSeparator","");
                                            boolean zeroValueAsBlank = allFieldParameters.optBoolean(staticColInfo.getString("label") + "showzerovalueasblank", false);
                                            boolean isNoWrapValue = allFieldParameters.optBoolean(staticColInfo.getString("label") + "isnowrapvalue", false);
                                            if (StringUtil.isNullOrEmpty(value)) {
        //                                        String defVal = getDefaultFieldValue(new JSONObject("{JSON:" + json + "}"), staticColInfo.getString("label"));
                                                String defVal = allFieldParameters.optString(staticColInfo.getString("label") + "defaultValue","");
                                                if (decimalPrecision != -1) {
                                                    try {
                                                        double doublevalue = Double.parseDouble(defVal);
                                                        defVal = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision,countryid);
                                                    } catch (Exception Ex) {
                                                    }
                                                }
                                                if(zeroValueAsBlank){
                                                    defVal = CustomDesignHandler.getZeroAmountAsBlank(defVal);
                                                }
                                                if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                    defVal = replaceWithValueSeperator(defVal, valueSeperator);
                                                }
                                                if (StringUtil.isNullOrEmpty(defVal)) {
                                                    html = removeSelectFieldHavingNoDataFromHTML(html, staticColInfo.getString("label"));
                                                    pagefooterhtml = removeSelectFieldHavingNoDataFromHTML(pagefooterhtml, staticColInfo.getString("label"));
                                                    pageheaderhtml = removeSelectFieldHavingNoDataFromHTML(pageheaderhtml, staticColInfo.getString("label"));
                                                    lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", "");
                                                    lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", "");
                                                } else {
                                                    html = html.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                    pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                    pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                    lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                    lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                }
                                            } else {

                                                if (decimalPrecision != -1) {
        //                                                value = value.replaceAll(",", "");
                                                    try {
                                                        double doublevalue = 0;
                                                        if(staticColInfo.getString("label").equals("Total Quantity With UOM") || staticColInfo.getString("label").equals("Total Delivered Quantity With UOM")){ //SDP-3288 : enable use to change decimal precison for total quantity with uom OR total delivered quantity with uom
                                                            if(value.contains(" ")){
                                                                String uom = value.split(" ")[1]; // get UOM
                                                                doublevalue = Double.parseDouble(value.split(" ")[0]); // get Value
                                                                value = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision,countryid);
                                                                value = value +" "+ uom; // append Value and UOM
                                                            }
                                                        } else{

                                                            String SpecificCurrencyId = allFieldParameters.optString(staticColInfo.getString("label") + "specificreccurrency", "");
                                                            if (!StringUtil.isNullOrEmpty(SpecificCurrencyId) && !SpecificCurrencyId.equals("none") && staticColInfo.optString("fieldid","").equals("SpecificCurrencyAmount")) {
                                                                if (!SpecificCurrencyId.equals(gcurrencyid)) {
                                                                    doublevalue = Double.parseDouble(value);
                                                                    JSONObject requestJson = new JSONObject();
                                                                    requestJson.put("transactionDate", itemData.optString("transactiondate"));
                                                                    requestJson.put("currId", SpecificCurrencyId);
                                                                    requestJson.put(Constants.globalCurrencyKey, gcurrencyid);
                                                                    requestJson.put(Constants.companyKey, companyid);
                                                                    requestJson.put("fieldName", entry.getKey().toString());
                                                                    requestJson.put("gstCurrencyRate", itemData.optString("gstCurrencyRate"));
                                                                    double exchangeRateForSpecificFields = getExchangeRateForSpecificCurrencyFields(requestJson, accInvoiceServiceDAOObj);
                                                                    doublevalue = doublevalue * exchangeRateForSpecificFields;
                                                                    value = Double.toString(doublevalue);
                                                                }
                                                            }
                                                            doublevalue = Double.parseDouble(value);
                                                            value = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision, countryid);
                                                            if (value.contains("-")) {
                                                                if (negativeValueIn == 1) {
                                                                    //No need to modification
                                                                } else if (negativeValueIn == 2) {
                                                                    value = value.replace("-", "");
                                                                    value = "(" + value + ")";
                                                                }
                                                            }
                                                        }
                                                    } catch (Exception Ex) {
                                                    }
                                                } else {
                                                    if(staticColInfo.optInt("xtype", 1) != CustomDesignerConstants.RICH_TEXT_AREA) {
                                                        value = value.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");//companyposttextprodData = prodData.replaceAll("\\n","<br>");
                                                    }
                                                    if(value.contains("!#isrichtext#!")){
                                                         value = value.replaceAll("!#isrichtext#!", "");
                                                    }
                                                }
                                                if(zeroValueAsBlank){
                                                    value = CustomDesignHandler.getZeroAmountAsBlank(value);
                                                }
                                                if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                    value = replaceWithValueSeperator(value, valueSeperator);
                                                }
                                                if (isNoWrapValue) {
                                                    value = getNonWrappingValue(value);
                                                }
                                                html = html.replace("#" + staticColInfo.getString("label") + "#", value);
                                                pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                                pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                                lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                                lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                            }
                                        } else{
                                            if(isJobOrderFlow || isQAApproval){// Replace value with empty
                                                String value = "";
                                                html = html.replace("#" + staticColInfo.getString("label") + "#", value);
                                                pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                                pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                                lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                                lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            /**
             * Replace approver level fields in Make Payment
             */
            if (moduleid == Constants.Acc_Make_Payment_ModuleId) {
                for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
                    JSONObject itemData = lineItemsArr.getJSONObject(1); // global level data is always at 1 position in array
                    for (int level = 1; level <= 10; level++) {
                        /**
                         * Replace approver names
                         */
                        if (itemData.has(Constants.ApproverLevel + level)) {
                            String value = itemData.get(Constants.ApproverLevel + level).toString();
                            html = html.replace("#" + Constants.ApproverLevel + level + "#", value);
                            pagefooterhtml = pagefooterhtml.replace("#" + Constants.ApproverLevel + level + "#", value);
                            pageheaderhtml = pageheaderhtml.replace("#" + Constants.ApproverLevel + level + "#", value);
                        } else {
                            html = html.replace("#" + Constants.ApproverLevel + level + "#", "");
                            pagefooterhtml = pagefooterhtml.replace("#" + Constants.ApproverLevel + level + "#", "");
                            pageheaderhtml = pageheaderhtml.replace("#" + Constants.ApproverLevel + level + "#", "");
                        }
                        /**
                         * Replace approved dates
                         */
                        if (itemData.has(Constants.APPROVED_DATE_LEVEL + level)) {
                            String value = itemData.get(Constants.APPROVED_DATE_LEVEL + level).toString();
                            html = html.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", value);
                            pagefooterhtml = pagefooterhtml.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", value);
                            pageheaderhtml = pageheaderhtml.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", value);
                        } else {
                            html = html.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", "");
                            pagefooterhtml = pagefooterhtml.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", "");
                            pageheaderhtml = pageheaderhtml.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", "");
                        }
                    }
                }
            }
                        
            org.jsoup.nodes.Document jsoupDoc = null;

            buildhtml = html;

            /*
             * Here we are building HTML if line items present by appending Top
             * Items, line Iems and Bottom Items respectively
             */
            if ( isAgeingTablePresent || isOutstandingTablePresent ) {
                int amountdigitafterdecimal=2;
                String ageingTableHTML = "";
                int duration = requestObj.optInt("duration");
                JSONObject ageingDetailsJobj = new JSONObject();
                JSONArray ageingDetailJarr  = new JSONArray();
                // If subtype is 2 then get multiple currency ageing details
                if(templateSubtype.equals("2")){
                    requestObj.put("isCurrencyDetails", true);
                } else{
                    requestObj.put("isCurrencyDetails", (ismulticurrency || isOutstandingMultipleCurrency));
                }
                requestObj.put("isCallFromDD", true);
                requestObj.put("transactionId", transactionId.trim());
                Set<String> monthList = new LinkedHashSet<String>();
                Set<String> monthFromList = new LinkedHashSet<String>();
                Set<String> monthToList = new LinkedHashSet<String>();
                if ( moduleid == Constants.Acc_Customer_AccStatement_ModuleId ) {
                    if( intervalType.equalsIgnoreCase("Days") ) {
                        ageingDetailsJobj = accInvoiceServiceDAOObj.getCustomerAgedReceivableMerged(requestObj, false,true);
                        ageingDetailJarr  = ageingDetailsJobj.getJSONArray("data");
                    } else {
                        SimpleDateFormat tempdf = new SimpleDateFormat("MMMM, yyyy");
                        Date sda = new Date(requestObj.optString("startdate"));
                        Date eda = new Date(requestObj.optString("enddate"));
                        String sd = tempdf.format(sda);
                        String ed = tempdf.format(eda);
//                        requestObj.put("startdate", sd);
//                        requestObj.put("enddate", ed);
//                        requestObj.put("isSummary", true);
//                        requestObj.put("isCallFromDD", true);
                        request.setAttribute("startdate", sd);
                        request.setAttribute("enddate", ed);
                        request.setAttribute("isSummary", true);
                        request.setAttribute("isCallFromDD", true);
                        ageingDetailJarr = accInvoiceServiceDAOObj.getMonthlyCustomerAgedReceivableMerged(request);
                        while (eda.getTime() > sda.getTime()) {
                            String monthName = tempdf.format(eda);

                            Calendar c = Calendar.getInstance();
                            c.setTime(eda);
                            int year = c.get(Calendar.YEAR);
                            int month = c.get(Calendar.MONTH);
                            int day = 1;
                            c.set(year, month, day);
                            int numOfDaysInMonth = c.getActualMaximum(Calendar.DAY_OF_MONTH);
//                            System.out.println("First Day of month: " + c.getTime());
                            String monthStartDate = df.format(c.getTime());
                            
                            c.add(Calendar.DAY_OF_MONTH, numOfDaysInMonth-1);
//                            System.out.println("Last Day of month: " + c.getTime());
                            String monthEndDate = df.format(c.getTime());

                            eda.setMonth(eda.getMonth() - 1);
                            monthList.add(monthName);
                            monthFromList.add(monthStartDate);
                            monthToList.add(monthEndDate);
                        }
                    }
                } else {
                    if ( intervalType.equalsIgnoreCase("Days") ) {
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        requestParams = getVendorAgedPayableRequestParams(requestObj);
                        ageingDetailJarr = accGoodsReceiptServiceDAOObj.getVendorAgedPayableMerged(requestObj, requestParams);
                    } else {
                        SimpleDateFormat tempdf = new SimpleDateFormat("MMMM, yyyy");
                        Date sda = new Date(requestObj.optString("startdate"));
                        Date eda = new Date(requestObj.optString("enddate"));
                        String sd = tempdf.format(sda);
                        String ed = tempdf.format(eda);
//                        requestObj.put("startdate", sd);
//                        requestObj.put("enddate", ed);
//                        requestObj.put("isSummary", true);
//                        requestObj.put("isCallFromDD", true);
                        request.setAttribute("startdate", sd);
                        request.setAttribute("enddate", ed);
                        request.setAttribute("isSummary", true);
                        request.setAttribute("isCallFromDD", true);
                        ageingDetailJarr = accGoodsReceiptServiceDAOObj.getMonthlyVendorAgedPayableMerged(request);
                        while (eda.getTime() > sda.getTime()) {
                            String monthName = tempdf.format(eda);
                            
                            Calendar c = Calendar.getInstance();
                            c.setTime(eda);
                            int year = c.get(Calendar.YEAR);
                            int month = c.get(Calendar.MONTH);
                            int day = 1;
                            c.set(year, month, day);
                            int numOfDaysInMonth = c.getActualMaximum(Calendar.DAY_OF_MONTH);
//                            System.out.println("First Day of month: " + c.getTime());
                            String monthStartDate = df.format(c.getTime());
                            
                            c.add(Calendar.DAY_OF_MONTH, numOfDaysInMonth-1);
//                            System.out.println("Last Day of month: " + c.getTime());
                            String monthEndDate = df.format(c.getTime());

                            eda.setMonth(eda.getMonth() - 1);
                            monthList.add(monthName);
                            monthFromList.add(monthStartDate);
                            monthToList.add(monthEndDate);
                        }
                    }
                }
                List<String> MonthList = new ArrayList<String>();
                Iterator ite = monthList.iterator();
                while (ite.hasNext()) {
                    MonthList.add(ite.next().toString());
                }
                List<String> MonthFromList = new ArrayList<String>();
                Iterator fromIte = monthFromList.iterator();
                while (fromIte.hasNext()) {
                    MonthFromList.add(fromIte.next().toString());
                }
                List<String> MonthToList = new ArrayList<String>();
                Iterator toIte = monthToList.iterator();
                while (toIte.hasNext()) {
                    MonthToList.add(toIte.next().toString());
                }

//                JSONObject custAgeingDetailObj = new JSONObject();
                JSONArray custAgeingDetailJarr = new JSONArray();
                for (int i = 0; i < ageingDetailJarr.length(); i++) {
                    if (transactionId.trim().equals(ageingDetailJarr.getJSONObject(i).optString("personid",""))) {
                        JSONObject custAgeingDetailObj = ageingDetailJarr.getJSONObject(i);
                        custAgeingDetailJarr.put(custAgeingDetailObj);
                    }
                }
                //If no Ageing table present for customer/vendor
                if(custAgeingDetailJarr.length() == 0 && intervalType.equalsIgnoreCase("Days")){ //Put default values in ageing table if no Ageing data present for Day Customer/Vendor
                    KwlReturnObject cmpObj = accountingHandlerDAOobj.getObject("com.krawler.common.admin.Company", companyid);
                    Company cmp = (Company) cmpObj.getEntityList().get(0);
                    JSONObject defaultJobj = new JSONObject("{\"total\":0,\"totalinbase\":0,\"currencyid\":\""+cmp.getCurrency().getCurrencyID()+"\","
                            +"\"currencysymbol\":\""+cmp.getCurrency().getSymbol()+"\",\"currencyname\":\""+cmp.getCurrency().getName()+"\","
                            +"\"amountdueinbase\":0,\"amountdueinbase1\":0,\"amountdueinbase2\":0,\"amountdueinbase3\":0,\"amountdueinbase4\":0,\"amountdueinbase5\":0,"
                            +"\"amountdueinbase6\":0,\"amountdueinbase7\":0,\"amountdueinbase8\":0,\"amountdue1\":0,\"amountdue2\":0,\"amountdue3\":0,\"amountdue4\":0,"
                            +"\"amountdue5\":0,\"amountdue6\":0,\"amountdue7\":0,\"amountdue8\":0}");
                    custAgeingDetailJarr.put(defaultJobj);
                }else if(custAgeingDetailJarr.length() == 0 && intervalType.equalsIgnoreCase("Months")){ //Put default values in ageing table if no Ageing data present for Month Customer/Vendor
                    KwlReturnObject cmpObj = accountingHandlerDAOobj.getObject("com.krawler.common.admin.Company", companyid);
                    Company cmp = (Company) cmpObj.getEntityList().get(0);
                    JSONObject defaultJobj = new JSONObject("{\"total\":0,\"totalinbase\":0,\"currencyid\":\""+cmp.getCurrency().getCurrencyID()+"\","
                            +"\"currencysymbol\":\""+cmp.getCurrency().getSymbol()+"\",\"currencyname\":\""+cmp.getCurrency().getName()+"\","
                            +"\"amountdueinbase_0\":0,\"amountdueinbase_1\":0,\"amountdueinbase_2\":0,\"amountdueinbase_3\":0,\"amountdueinbase_4\":0,\"amountdueinbase_5\":0,"
                            +"\"amountdueinbase_6\":0,\"amountdueinbase_7\":0,\"amountdueinbase_8\":0,\"amountdue_0\":0,\"amountdue_1\":0,\"amountdue_2\":0,\"amountdue_3\":0,\"amountdue_4\":0,"
                            +"\"amountdue_5\":0,\"amountdue_6\":0,\"amountdue_7\":0,\"amountdue_8\":0,\"amountdue_9\":0,\"amountdue_10\":0},,\"amountdue_11\":0");
                    custAgeingDetailJarr.put(defaultJobj);
                }
                if ( isOutstandingTablePresent ) {
                    JSONArray amtJArr = new JSONArray();
                    for (int cnt = 0; cnt < custAgeingDetailJarr.length(); cnt++) {
                        JSONObject custAgeingDetailObj = custAgeingDetailJarr.getJSONObject(cnt);
                        JSONObject tempJobj = new JSONObject();
                        double outStandingAmount = 0.0; 
                        outStandingAmount = Double.parseDouble(custAgeingDetailObj.optString("total","0"));
                        tempJobj.put("Amount",CustomDesignHandler.getAmountinCommaDecimal(outStandingAmount, amountdigitafterdecimal,countryid));
                        tempJobj.put("Outstanding Currency",custAgeingDetailObj.optString("currencysymbol", ""));
                        amtJArr.put(tempJobj);
                        // Show ageing details in customer/vendor currency
                        if(isCustomerVendorCurrency){
                            //Exchange Rate Amount
                            JSONObject exchangeJobj = new JSONObject();
                            double outStandingExchangeAmount = 0.0; 
                            String personId = custAgeingDetailObj.optString("personid", "");//Customer or Vendor Id
                            String custVendCurrency = "";
                            if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId){
                                KwlReturnObject customerResult = accountingHandlerDAOobj.getObject(Customer.class.getName(), personId);
                                Customer customer = (Customer) customerResult.getEntityList().get(0);
                                custVendCurrency = customer.getCurrency().getSymbol();
                            } else if(moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                                KwlReturnObject vendorResult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), personId);
                                Vendor vendor = (Vendor) vendorResult.getEntityList().get(0);
                                custVendCurrency = vendor.getCurrency().getSymbol();
                            }
                            double exchangeRate = custAgeingDetailObj.optDouble(InvoiceConstants.ExchangeRate, 1.0);

                            outStandingExchangeAmount = Double.parseDouble(custAgeingDetailObj.optString("total","0")) * exchangeRate;
                            exchangeJobj.put("Amount", CustomDesignHandler.getAmountinCommaDecimal(outStandingExchangeAmount, amountdigitafterdecimal,countryid));
                            exchangeJobj.put("Outstanding Currency", custVendCurrency);
                            amtJArr.put(exchangeJobj);
                        }
                    }
                    jrepeat = Globalcellrepeatrows(buildhtml, json, amtJArr, pagefooterhtml, moduleid, 1, pageheaderhtml, negativeValueIn, countryid, allFieldParameters);
                    buildhtml = jrepeat.getString("html");
                    pagefooterhtml = jrepeat.getString("pagefooterhtml");
                    pageheaderhtml = jrepeat.getString("pageheaderhtml");
                    
                }
                
                if (isAgeingTablePresent) {
                    jsoupDoc = Jsoup.parse(buildhtml);
                    ArrayList<CustomDesignLineItemProp> ageingTableHeaderlist = new ArrayList();
                    ArrayList<CustomDesignLineItemProp> ageingTableDetailslist = null;
                    ArrayList<CustomDesignLineItemProp> ageingTableDetailslistInCustCurrency = null;
                    int datefilter = requestObj.optInt("datefilter", 0);
                    List rowDataList = new ArrayList();
                    org.jsoup.nodes.Element ageingTableElement = jsoupDoc.getElementById(ageingTableParentRowid);
                    double lineItemTotalAmount = 0.0;
                    lineItemTotalAmount = lineItemsArr.getJSONObject(lineItemsArr.length()-1).getDouble(CustomDesignerConstants.CustomDesignTotalAmount_fieldTypeId);//balance Total Amount
                    String currencyId = lineItemsArr.getJSONObject(lineItemsArr.length()-1).optString(Constants.currencyKey, "");
                    for (int cnt = 0; cnt < custAgeingDetailJarr.length(); cnt++) {
                        boolean includecurrent = isincludecurrent;
                        JSONObject custAgeingDetailObj = custAgeingDetailJarr.getJSONObject(cnt);
                        ageingTableDetailslist = new ArrayList();
                        ageingTableDetailslistInCustCurrency = new ArrayList();
                        double totalamount = Double.parseDouble(custAgeingDetailObj.optString("total", "0"));//Aginging Total Amount
                        if(templateSubtype.equals("2") || templateSubtype.equals("0")){
                            // Update total amount for ageing details table
                            lineItemTotalAmount = totalamount;
                        }
                        // Get customer/vendor currency symbol
                        String personId = custAgeingDetailObj.optString("personid", "");//Customer or Vendor Id
                        String custVendCurrency = "";
                        if(StringUtil.isNullOrEmpty(personId)){// If customer id id empty or null then get details from json object
                            if(!StringUtil.isNullOrEmpty(custAgeingDetailObj.optString(Constants.currencyKey, ""))){
                                KwlReturnObject currencyResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), custAgeingDetailObj.optString(Constants.currencyKey, ""));
                                KWLCurrency currency = (KWLCurrency) currencyResult.getEntityList().get(0);
                                custVendCurrency = currency.getSymbol();
                            }
                        } else{// get currency details from customer id 
                            if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId){
                                KwlReturnObject customerResult = accountingHandlerDAOobj.getObject(Customer.class.getName(), personId);
                                Customer customer = (Customer) customerResult.getEntityList().get(0);
                                custVendCurrency = customer.getCurrency().getSymbol();
                            } else if(moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                                KwlReturnObject vendorResult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), personId);
                                Vendor vendor = (Vendor) vendorResult.getEntityList().get(0);
                                custVendCurrency = vendor.getCurrency().getSymbol();
                            }
                        }
                        double exchangeRate = custAgeingDetailObj.optDouble(InvoiceConstants.ExchangeRate, 1.0);
                        
                        if (ageingTableElement != null) {
                            for (int headerCnt = 0; headerCnt < ageingTableHeaderItems.length(); headerCnt++) {
                                JSONObject headerObj = ageingTableHeaderItems.getJSONObject(headerCnt);
                                JSONObject dataObj = ageingTableDataItems.optJSONObject(headerCnt);
                                if(dataObj==null){
                                    dataObj=headerObj;
                                }
                                CustomDesignLineItemProp ageingheader = new CustomDesignLineItemProp();
                                CustomDesignLineItemProp ageingdata = new CustomDesignLineItemProp();
                                CustomDesignLineItemProp ageingdata2 = new CustomDesignLineItemProp();
                                if (headerObj.optString("columnname", "").equalsIgnoreCase("interval")) {
                                    int intervalCounter = 0;
                                    int k = 0;
                                    int from = 0;
                                    double amount = 0.0, exhangeAmount = 0.0;
                                    String amountStr = "", exchangeAmountStr = "";
                                    int to = 0, currentapply = 0;
                                    int width = headerObj.optInt("width", 0);
                                    String headerstyle = headerObj.optString("style", "");
                                    String widthString = headerstyle.substring(headerstyle.indexOf("width:"), headerstyle.indexOf(";", headerstyle.indexOf("width:")));
                                    headerstyle = headerstyle.replace(widthString, "");
                                    String datastyle = dataObj.optString("style", "");
                                    datastyle = datastyle.replace(widthString, "");
                                    int dividedWidth = width / (noofintervals + 1);
                                    int amountdigitdecimal = StringUtil.isNullOrEmpty(dataObj.optString("decimalpoint", ""))?0:Integer.parseInt(dataObj.optString("decimalpoint", ""));
                                    for (intervalCounter = 0; intervalCounter < noofintervals; intervalCounter++) {
                                        if(intervalType.equalsIgnoreCase("Months") && intervalCounter == MonthList.size()){
                                            intervalCounter--;
                                            break;
                                        }
                                        if (includecurrent) {
                                            CustomDesignLineItemProp ageingIntervalData = new CustomDesignLineItemProp();
                                            CustomDesignLineItemProp ageingIntervalData2 = new CustomDesignLineItemProp();
                                            if (intervalType.equalsIgnoreCase("Days")) {
                                                amount = Double.parseDouble(custAgeingDetailObj.getString("amountdue" + (intervalCounter + 1)));
                                            } else {
                                                amount = Double.parseDouble(custAgeingDetailObj.optString(("amountdue_" + ((MonthList.size()-1) - intervalCounter)),"0.0"));
                                            }
                                            amountStr = authHandler.formattingdecimal(amount, amountdigitdecimal);
                                            if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                                amountStr = CustomDesignHandler.getAmountinCommaDecimal(amount, amountdigitdecimal,countryid);
                                            } else if (amountdigitdecimal == 0) {
                                                amountStr = (amountStr.substring(0, amountStr.length() - 1));
                                            }
                                            ageingIntervalData.setData(dataObj.optString("recordcurrency", "").equals("true") ? custAgeingDetailObj.optString("currencysymbol", "") + " " + amountStr : amountStr);
                                            ageingIntervalData.setStyle(datastyle);
                                            ageingTableDetailslist.add(ageingIntervalData);
                                            
                                            // Exchange Rate Amount
                                            exhangeAmount = amount * exchangeRate;
                                            exchangeAmountStr = authHandler.formattingdecimal(exhangeAmount, amountdigitdecimal);
                                            if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                                exchangeAmountStr = CustomDesignHandler.getAmountinCommaDecimal(exhangeAmount, amountdigitdecimal,countryid);
                                            } else if (amountdigitdecimal == 0) {
                                                exchangeAmountStr = (exchangeAmountStr.substring(0, exchangeAmountStr.length() - 1));
                                            }
                                            ageingIntervalData2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeAmountStr : exchangeAmountStr);
                                            ageingIntervalData2.setStyle(datastyle);
                                            ageingTableDetailslistInCustCurrency.add(ageingIntervalData2);
                                            
                                            if (cnt == 0) {
                                                CustomDesignLineItemProp ageingIntervalHeader = new CustomDesignLineItemProp();
                                                ageingIntervalHeader.setData("Current");
                                                ageingIntervalHeader.setWidth(String.valueOf(dividedWidth));
                                                ageingIntervalHeader.setStyle(headerstyle);
                                                ageingTableHeaderlist.add(ageingIntervalHeader);
                                                k++;
                                            }
                                            includecurrent =false;
                                            currentapply = -1;

                                        } else {
                                            CustomDesignLineItemProp ageingIntervalData = new CustomDesignLineItemProp();
                                            CustomDesignLineItemProp ageingIntervalData2 = new CustomDesignLineItemProp();
                                            if((intervalCounter == 0 || (intervalCounter == 1 && currentapply == -1)) && isAged && (datefilter == Constants.agedDueDate0to30Filter || datefilter == Constants.agedInvoiceDate0to30Filter)){
                                                from = (duration * (intervalCounter + currentapply));
                                            } else {
                                                from = (duration * (intervalCounter + currentapply)) + 1;
                                            }
                                            to = duration * (intervalCounter + currentapply + 1);
                                            if (intervalType.equalsIgnoreCase("Days")) {
                                                amount = Double.parseDouble(custAgeingDetailObj.getString("amountdue" + (intervalCounter + currentapply + 2)));
                                            } else {
                                                amount = Double.parseDouble(custAgeingDetailObj.getString("amountdue_" + ((MonthList.size()-1-intervalCounter))));
                                            }
                                            amountStr = authHandler.formattingdecimal(amount,amountdigitdecimal);
                                            if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                                amountStr = CustomDesignHandler.getAmountinCommaDecimal(amount, amountdigitdecimal,countryid);
                                            } else if (amountdigitdecimal == 0) {
                                                amountStr = (amountStr.substring(0, amountStr.length() - 1));
                                            }
                                            ageingIntervalData.setData(dataObj.optString("recordcurrency", "").equals("true") ? custAgeingDetailObj.optString("currencysymbol", "") + " " + amountStr : amountStr);
                                            ageingIntervalData.setStyle(datastyle);
                                            ageingTableDetailslist.add(ageingIntervalData);
                                            
                                            // Exchange Rate Amount
                                            exhangeAmount = amount * exchangeRate;
                                            exchangeAmountStr = authHandler.formattingdecimal(exhangeAmount, amountdigitdecimal);
                                            if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                                exchangeAmountStr = CustomDesignHandler.getAmountinCommaDecimal(exhangeAmount, amountdigitdecimal,countryid);
                                            } else if (amountdigitdecimal == 0) {
                                                exchangeAmountStr = (exchangeAmountStr.substring(0, exchangeAmountStr.length() - 1));
                                            }
                                            ageingIntervalData2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeAmountStr : exchangeAmountStr);
                                            ageingIntervalData2.setStyle(datastyle);
                                            ageingTableDetailslistInCustCurrency.add(ageingIntervalData2);
                                            if (cnt == 0) {
                                                CustomDesignLineItemProp ageingIntervalHeader = new CustomDesignLineItemProp();
                                                String tmpString = intervalText;
                                                if (intervalType.equalsIgnoreCase("Months")) {
                                                    tmpString = tmpString.replace("#Month#",MonthList.get(k));
                                                    tmpString = tmpString.replace("#MonthNumber#", (k) +""); //ERP-28745
                                                    tmpString = tmpString.replace("#MonthFrom#", MonthFromList.get(k));
                                                    tmpString = tmpString.replace("#MonthTo#", MonthToList.get(k));
                                                    tmpString = tmpString.replaceAll("\n", "<br>");
                                                    k++;
                                                } else {
                                                    tmpString = tmpString.replace("#From#",String.valueOf(from));
                                                    tmpString = tmpString.replace("#To#",String.valueOf(to));
                                                }
                                                ageingIntervalHeader.setData(tmpString);
                                                ageingIntervalHeader.setWidth(String.valueOf(dividedWidth));
                                                ageingIntervalHeader.setStyle(headerstyle);
                                                ageingTableHeaderlist.add(ageingIntervalHeader);
                                            }
                                        }
                                    }
                                    int intCount = 12; //ERP-28745
                                    if (intervalType.equalsIgnoreCase("Months")) {
                                        intCount = MonthList.size() - 1;
                                    } else {
                                        intervalCounter = intervalCounter + currentapply + 2;
                                        intCount = 8;
                                    }
                                    if (intervalCounter < intCount) {
                                        double restAmount = 0.0;
                                        for (int j = intervalCounter; j <= intCount; j++) {
                                            if (intervalType.equalsIgnoreCase("Days")) {
                                                restAmount += custAgeingDetailObj.getDouble("amountdue" + j);
                                            } else {
                                                restAmount += custAgeingDetailObj.getDouble("amountdue_" + ((MonthList.size()-1) - j));
                                            }
                                        }
                                        if (intervalType.equalsIgnoreCase("Days")) { // Days case - accrued balance already added in last interval
                                            restAmount = restAmount + (lineItemTotalAmount-totalamount);//Add accrued balance in last interval
                                        } else{ // Months case - accrued balance comes in opening field
                                            double accruedAmount = 0.0;
                                            accruedAmount = custAgeingDetailObj.optDouble("opening", 0.0);
                                            restAmount = restAmount + (lineItemTotalAmount-totalamount) + accruedAmount;//Add accrued balance in last interval
                                        }
                                        amountStr = authHandler.formattingdecimal(restAmount, amountdigitdecimal);
                                        if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                            amountStr = CustomDesignHandler.getAmountinCommaDecimal(restAmount, amountdigitdecimal,countryid);
                                        } else if (amountdigitdecimal == 0) {
                                            amountStr = (amountStr.substring(0, amountStr.length() - 1));
                                        }
                                        ageingdata.setData(dataObj.optString("recordcurrency", "").equals("true") ? custAgeingDetailObj.optString("currencysymbol", "") + " " + amountStr : amountStr);
                                        ageingdata.setStyle(datastyle);
                                        ageingTableDetailslist.add(ageingdata);
                                        
                                        // Exchange Rate Amount
                                        exhangeAmount = restAmount * exchangeRate;
                                        exchangeAmountStr = authHandler.formattingdecimal(exhangeAmount, amountdigitdecimal);
                                        if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                            exchangeAmountStr = CustomDesignHandler.getAmountinCommaDecimal(exhangeAmount, amountdigitdecimal,countryid);
                                        } else if (amountdigitdecimal == 0) {
                                            exchangeAmountStr = (exchangeAmountStr.substring(0, exchangeAmountStr.length() - 1));
                                        }
                                        ageingdata2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeAmountStr : exchangeAmountStr);
                                        ageingdata2.setStyle(datastyle);
                                        ageingTableDetailslistInCustCurrency.add(ageingdata2);
                                        if (cnt == 0) {
                                            if (intervalType.equalsIgnoreCase("Days")) {
                                                ageingheader.setData("> " + to + " Days");
                                            } else {
                                                if(intervalPlaceHolder.equalsIgnoreCase("MonthNumber")){ //ERP-28745
                                                    ageingheader.setData("> " + intervalText.replace("#MonthNumber#", String.valueOf(k)));
                                                } else if(intervalPlaceHolder.equalsIgnoreCase("Month")) {
                                                    ageingheader.setData("< " + MonthList.get(k));
                                                } else{
                                                    ageingheader.setData("< " + "Before");
                                                }
                                            }
                                            ageingheader.setWidth(String.valueOf(dividedWidth));
                                            ageingheader.setStyle(headerstyle);
                                            ageingTableHeaderlist.add(ageingheader);
                                        }
                                    } else{ 
                                        /*
                                         * If interval in document designer is greater than actual interval in UI
                                         * then add remaining amount and accrued amount to last interval in ageing table - for month case only
                                         */
                                        if (intervalType.equalsIgnoreCase("Months")){
                                            double accruedAmount = 0.0;
                                            double restAmount = 0.0;
                                            if(MonthList.size() >= noofintervals){
                                                while(((MonthList.size()-1) - intervalCounter) >= 0){
                                                    restAmount += custAgeingDetailObj.getDouble("amountdue_" + ((MonthList.size()-1) - intervalCounter));
                                                    intervalCounter++;
                                                }
                                            }
                                            accruedAmount = custAgeingDetailObj.optDouble("opening", 0.0);
                                            restAmount += accruedAmount;
                                            restAmount += (lineItemTotalAmount-totalamount);
                                            amountStr = authHandler.formattingdecimal(restAmount, amountdigitdecimal);

                                            ageingdata.setData(dataObj.optString("recordcurrency", "").equals("true") ? custAgeingDetailObj.optString("currencysymbol", "") + " " + amountStr : amountStr);
                                            ageingdata.setStyle(datastyle);
                                            ageingTableDetailslist.add(ageingdata);
                                            
                                            // Exchange Rate Amount
                                            exhangeAmount = restAmount * exchangeRate;
                                            exchangeAmountStr = authHandler.formattingdecimal(exhangeAmount, amountdigitdecimal);
                                            if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                                exchangeAmountStr = CustomDesignHandler.getAmountinCommaDecimal(exhangeAmount, amountdigitdecimal,countryid);
                                            } else if (amountdigitdecimal == 0) {
                                                exchangeAmountStr = (exchangeAmountStr.substring(0, exchangeAmountStr.length() - 1));
                                            }                                            
                                            ageingdata2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeAmountStr : exchangeAmountStr);
                                            ageingdata2.setStyle(datastyle);
                                            ageingTableDetailslistInCustCurrency.add(ageingdata2);

                                            if(intervalPlaceHolder.equalsIgnoreCase("MonthNumber")){ //ERP-28745
                                                ageingheader.setData("> " + intervalText.replace("#MonthNumber#", String.valueOf(k)));
                                            } else if(intervalPlaceHolder.equalsIgnoreCase("Month")){
                                                if(MonthList.size() == k){
                                                    ageingheader.setData("< " + MonthList.get(--k));
                                                } else{
                                                    ageingheader.setData("< " + MonthList.get(k));
                                                }
                                            } else{
                                                ageingheader.setData("< " + "Before");
                                            }
                                            ageingheader.setWidth(String.valueOf(dividedWidth));
                                            ageingheader.setStyle(headerstyle);
                                            ageingTableHeaderlist.add(ageingheader);
                                        }
                                    }
                                } else {
                                    if (cnt == 0) {
                                        ageingheader.setData(headerObj.optString("header", ""));
                                        ageingheader.setWidth(headerObj.optString("width", ""));
                                        ageingheader.setStyle(headerObj.optString("style", ""));
                                        ageingTableHeaderlist.add(ageingheader);
                                    }

                                    if (headerObj.optString("columnname").equals("cvname")) {
                                        ageingdata.setData(custAgeingDetailObj.optString("personname", ""));
                                        ageingdata2.setData(custAgeingDetailObj.optString("personname", ""));
                                    } else if (headerObj.optString("columnname").equals("total")) {
                                        int amountdigitdecimal = StringUtil.isNullOrEmpty(dataObj.optString("decimalpoint", ""))?0:Integer.parseInt(dataObj.optString("decimalpoint", ""));
                                        String totalamountstr = authHandler.formattingdecimal(lineItemTotalAmount, amountdigitdecimal);// Show ageing total amount as balance total amount
                                        if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                            totalamountstr = CustomDesignHandler.getAmountinCommaDecimal(lineItemTotalAmount, amountdigitdecimal,countryid);
                                        } else if (amountdigitdecimal == 0) {
                                            totalamountstr = (totalamountstr.substring(0, totalamountstr.length() - 1));
                                        }
                                        ageingdata.setData(totalamountstr);
                                        String customCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(custAgeingDetailObj.optString("currencysymbol", ""), companyid); 
                                        ageingdata.setData(dataObj.optString("recordcurrency", "").equals("true") ? customCurrencySymbol + " " + totalamountstr : totalamountstr);
                                        
                                        // Exchange Rate Amount
                                        double exhangeTotalAmount = lineItemTotalAmount * exchangeRate;
                                        String exchangeTotalAmountStr = authHandler.formattingdecimal(exhangeTotalAmount, amountdigitdecimal);
                                        ageingdata2.setData(exchangeTotalAmountStr);
                                        ageingdata2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeTotalAmountStr : exchangeTotalAmountStr);
                                    } else if (headerObj.optString("columnname").equals("Currency")) {
                                        ageingdata.setData(custAgeingDetailObj.optString("currencysymbol", ""));
                                        ageingdata2.setData(custVendCurrency);
                                    } else if(headerObj.optString("columnname").equals("accruedbalance")){ // Accrued Balance column
                                        String amountStr = "";
                                        int amountdigitdecimal = StringUtil.isNullOrEmpty(dataObj.optString("decimalpoint", ""))?0:Integer.parseInt(dataObj.optString("decimalpoint", ""));
                                        double accruedbalance = Double.parseDouble(StringUtil.isNullOrEmpty(custAgeingDetailObj.optString("accruedbalance", "")) ? "0" : custAgeingDetailObj.optString("accruedbalance", ""));
                                        amountStr = authHandler.formattingdecimal(accruedbalance, amountdigitdecimal);
                                        if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                            amountStr = CustomDesignHandler.getAmountinCommaDecimal(accruedbalance, amountdigitdecimal, countryid);
                                        } else if (amountdigitdecimal == 0) {
                                            amountStr = (amountStr.substring(0, amountStr.length() - 1));
                                        }
                                        ageingdata.setData(dataObj.optString("recordcurrency", "").equals("true") ? custAgeingDetailObj.optString("currencysymbol", "") + " " + amountStr : amountStr);
                                        
                                        // Exchange Rate Accrued Balance Amount
                                        double exhangeAccruedBalance = accruedbalance * exchangeRate;
                                        String exchangeAccBalanceStr = authHandler.formattingdecimal(exhangeAccruedBalance, amountdigitdecimal);
                                        ageingdata2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeAccBalanceStr : exchangeAccBalanceStr);
                                    }
                                    ageingdata.setStyle(dataObj.optString("style", ""));
                                    ageingdata2.setStyle(dataObj.optString("style", ""));
                                    ageingTableDetailslist.add(ageingdata);
                                    ageingTableDetailslistInCustCurrency.add(ageingdata2);
                                }
                            }
                            if(templateSubtype.equals("2")){
                                // If subtype is 2 then check for currency to show ageing details of that currency
                                if(currencyId.equals(custAgeingDetailObj.optString(Constants.currencyKey, ""))){
                                    rowDataList.add(ageingTableDetailslist);
                                }
                            } else{
                                rowDataList.add(ageingTableDetailslist);
                            }
                            // Show ageing details in customer/vendor currency
                            if(isCustomerVendorCurrency){
                                rowDataList.add(ageingTableDetailslistInCustCurrency);
                            }
                        }
                    }
                    ageingTableHTML = CustomDesignHandler.getAgeingTableHTMLByVelocityEngineNew(velocityEngine, ageingTableDetailslist, ageingTableHeaderlist, ageingTableStyle, rowDataList);
                    ageingTableElement.html(ageingTableHTML);
                    buildhtml = jsoupDoc.body().html();
                }
            }
            //Grouping Summary Table Start
            buildhtml = createGroupingSummaryTable(buildhtml, jArr, lineItemsArr, headerCurrency, headerCurrencyCode, countryid, companyid, velocityEngine);
            //Grouping Summary Table End
            
            //Calculate Formula value
            jsoupForFormulaBuilder = Jsoup.parse(buildhtml);
            formulaEles = (Elements) jsoupForFormulaBuilder.getElementsByAttribute(CustomDesignerConstants.ISFORMULA);
            /**
             * Get summary details object for replacing missing custom fields in formula
             */
            JSONObject summaryDataJobj = new JSONObject();
            for (int arrInd = 0; arrInd < lineItemsArr.length(); arrInd++) {
                if (lineItemsArr.get(arrInd).getClass().equals(JSONArray.class)) {
                    continue;
                } else {
                    if (lineItemsArr.getJSONObject(arrInd).has("summarydata") && lineItemsArr.getJSONObject(arrInd).optBoolean("summarydata", false)) {
                        summaryDataJobj = lineItemsArr.getJSONObject(arrInd);
                    }
                }
            }
            for(int ind=0; ind < formulaEles.size(); ind++){
                try {
                    org.jsoup.nodes.Element formulaEle = formulaEles.get(ind);
                    String formula = formulaEle.html();
                    String formulaPlaceholder = formulaEle.attr("attribute");
                    int decimalPercision = StringUtil.isNullOrEmpty(formulaEle.attr("decimalprecision")) ? 2 : Integer.parseInt(formulaEle.attr("decimalprecision"));
                    String formulaName = formulaPlaceholder.replace("{PLACEHOLDER:", "").replace("}", "");
                    String formulValue = "";
                    if(!displayUnitPriceAndAmountInPrint && !StringUtil.isNullOrEmpty(formula) && formula.contains(CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS)){
                        formulValue = CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS;
                        formulaEle.html(formulValue);
                        lineItemFirstRowHTML = lineItemFirstRowHTML.replaceAll(formulaName, formulValue);
                        lineItemLastRowHTML = lineItemLastRowHTML.replaceAll(formulaName, formulValue);
                        continue;
                    }

                    if(!StringUtil.isNullOrEmpty(formula) && !formula.contains(CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS)){
                        String formulaValue = formula;// get formula with fieldid's
    //                    formula = formulaValue; // use formula with fieldid's for value replacement and calculation
                        formula = formula.replaceAll("!##", "-").replaceAll("$##", "/");// replace '!##' and '$##' with respective characters in formula if exist('!##' for '-' and '$##' for '/')
                        String[] fieldsArr = formulaValue.replaceAll("\\(|\\)", "").split("\\+|\\-|\\*|\\/");// Replace brackets '(' and ')' then split fields from formula using operators used
                        for (String field : fieldsArr) {
                            String fieldValue = "0";
                            field = field.trim(); //Remove extra space before and after
                            field = field.replaceAll("!##", "-");// replace '!##' identifier in formula if exist('!##' for '-')
                            field = field.replaceAll("$##", "/");// replace '$##' identifier in formula if exist('$##' for '/')
                            if (field.startsWith("#") && field.endsWith("#")) { // If placeholder

                                field = field.substring(1, field.length() - 1); // Remove # from start and end

                                if (summaryDataJobj.has(field)) { // If Default field
                                    fieldValue = summaryDataJobj.getString(field);
                                } else {
                                    if (summaryDataJobj.has("Custom_" + field)) { // If Custom field
                                        fieldValue = (summaryDataJobj.get("Custom_" + field).toString());
                                        fieldValue = (authHandler.formattedAmount(Double.parseDouble(summaryDataJobj.get("Custom_" + field).toString()), companyid));
                                    } else {
                                        fieldValue = "0";
                                    }
                                }
                            } else { // If number
                                fieldValue = field;
                            }
                            formula = formula.replace("#" + field + "#", fieldValue); // replace field value in formula
                        }

                        formulValue = evaluateExpression(formula, decimalPercision);
                        double doubleVal = Double.parseDouble(formulValue);
                        boolean zeroValueAsBlank = allFieldParameters.optBoolean(formulaName.substring(1, formulaName.length()-1) + "showzerovalueasblank", false);
                        int showAmountInWords = allFieldParameters.optInt(formulaName.substring(1, formulaName.length() - 1) + "showAmountInWords", 0);
                        if (!StringUtil.isNullOrEmpty(formulaEle.attr("showAmountInWords"))) {
                            showAmountInWords = Integer.parseInt(formulaEle.attr("showAmountInWords"));
                        }
                        if (showAmountInWords == CustomDesignerConstants.IN_Document_Currency && !StringUtil.isNullObject(documentCurrencyObj)) {
                            formulValue = EnglishNumberToWordsObj.convert(doubleVal, documentCurrencyObj, countryLanguageId) + " Only.";
                            if (doubleVal == 0 && zeroValueAsBlank) {
                                formulValue = "";
                            }
                        } else if (showAmountInWords == CustomDesignerConstants.IN_Base_Currency && !StringUtil.isNullObject(baseCurrencyObj)) {
                            doubleVal = Double.parseDouble(authHandler.formattingdecimal((doubleVal * reverseExchangeRate), decimalPercision));
                            formulValue = EnglishNumberToWordsObj.convert(doubleVal, baseCurrencyObj, countryLanguageId) + " Only.";
                            if (doubleVal == 0 && zeroValueAsBlank) {
                                formulValue = "";
                            }
                        } else {
                            formulValue = CustomDesignHandler.getAmountinCommaDecimal(doubleVal, decimalPercision, countryid);
                            if(formulValue.startsWith("-")){
                                if (negativeValueIn == 1) {
                                    //No need to modification
                                } else if (negativeValueIn == 2) {
                                    formulValue = formulValue.replace("-", "");
                                    formulValue = "(" + formulValue + ")";
                                }
                            }

                            if (zeroValueAsBlank) {
                                formulValue = CustomDesignHandler.getZeroAmountAsBlank(formulValue);
                            }
                        }

                    }
                    formulaEle.html(formulValue);
                    formulaName = StringUtil.escapeArithmeticOperators(formulaName);
                    lineItemFirstRowHTML = lineItemFirstRowHTML.replaceAll(formulaName, formulValue);
                    lineItemLastRowHTML = lineItemLastRowHTML.replaceAll(formulaName, formulValue);
                    pageheaderhtml = pageheaderhtml.replaceAll(formulaName, formulValue);
                    pagefooterhtml = pagefooterhtml.replaceAll(formulaName, formulValue);
                } catch (Exception ex) {
                    Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            buildhtml = jsoupForFormulaBuilder.outerHtml();
            
            //Get page layout settings
            if (!StringUtil.isNullOrEmpty(pagelayoutproperty)) {
                JSONArray jArr1 = new JSONArray(pagelayoutproperty);
                for (int cnt = 0; cnt < jArr1.length(); cnt++) {
                    JSONObject jObj = jArr1.getJSONObject(cnt);
                    if (!StringUtil.isNullOrEmpty(jObj.optString("pagelayoutsettings", ""))) {
                        JSONObject pagePropertyArray = new JSONObject(jObj.optString("pagelayoutsettings", ""));
                        fontstylevalue = pagePropertyArray.optString("pagefont", "");
                        pagefontsize = pagePropertyArray.optString("pagefontsize", "12");
                        isExtendedGlobalTable = pagePropertyArray.optBoolean("isExtendedGlobalTable");
                        if(isExtendedGlobalTable){
                            adjustPageHeight = pagePropertyArray.optString("adjustPageHeight", "0");
                        }
                        pageSizeForExtGT = pagePropertyArray.optString("pageSizeForExtGT","a4");
                        pageOrientationForEXTGT = pagePropertyArray.optString("pageOrientationForEXTGT","portrait");
                        isPrePrinted = pagePropertyArray.optBoolean("ispreprinted");
                        isMultipleTransaction = pagePropertyArray.optBoolean(CustomDesignerConstants.IS_MULTIPLE_TRANSACTION, false);
                    }
                }
            }
            //Creating Details Table
            //Get all details table information used in template
            JSONArray allDetailsTableInfo = CustomDesignHandler.getAllDetailsTableInfo(jArr);
            //Iterate all Details Table
            for(int detailsTableCnt = 0; detailsTableCnt < allDetailsTableInfo.length(); detailsTableCnt++){
               
                JSONArray customizedDetailsTableCols = new JSONArray();
                JSONArray customizedDetailsTableHeaders = new JSONArray();
                
                boolean isDetailsTablePresent = false;
                String detailsTableParentRowID = "";
                String detailsTableID = "";
                String consolidatedfield = "";
                String summationfields = "";
                String detailsTableSubType_id = "";
                String detailsTableSubType_value = "";
                //get details table info
                JSONObject detailsTableInfo = allDetailsTableInfo.getJSONObject(detailsTableCnt);
                //set details table info to respective variables
                if (detailsTableInfo.has(Constants.customizedDetailsTableCols) && detailsTableInfo.get(Constants.customizedDetailsTableCols) != null) {
                    customizedDetailsTableCols = (JSONArray) detailsTableInfo.get(Constants.customizedDetailsTableCols);
                }
                if (detailsTableInfo.has(Constants.customizedDetailsTableHeaders) && detailsTableInfo.get(Constants.customizedDetailsTableHeaders) != null) {
                    customizedDetailsTableHeaders = (JSONArray) detailsTableInfo.get(Constants.customizedDetailsTableHeaders);
                }
                if (detailsTableInfo.has(Constants.isDetailsTablePresent) && detailsTableInfo.get(Constants.isDetailsTablePresent) != null) {
                    isDetailsTablePresent = (Boolean) detailsTableInfo.get(Constants.isDetailsTablePresent);
                }
                if (detailsTableInfo.has(Constants.detailsTableParentRowID) && detailsTableInfo.get(Constants.detailsTableParentRowID) != null) {
                    detailsTableParentRowID = (String) detailsTableInfo.get(Constants.detailsTableParentRowID);
                }
                if (detailsTableInfo.has(Constants.detailsTableSubType_id) && detailsTableInfo.get(Constants.detailsTableSubType_id) != null) {
                    detailsTableSubType_id = (String) detailsTableInfo.get(Constants.detailsTableSubType_id);
                }
                if (detailsTableInfo.has(Constants.detailsTableSubType_value) && detailsTableInfo.get(Constants.detailsTableSubType_value) != null) {
                    detailsTableSubType_value = (String) detailsTableInfo.get(Constants.detailsTableSubType_value);
                }
                if (detailsTableInfo.has(Constants.detailsTableID) && detailsTableInfo.get(Constants.detailsTableID) != null) {
                    detailsTableID = (String) detailsTableInfo.get(Constants.detailsTableID);
                }
                if (detailsTableInfo.has(Constants.consolidatedfield) && detailsTableInfo.get(Constants.consolidatedfield) != null) {
                    consolidatedfield = (String) detailsTableInfo.get(Constants.consolidatedfield);
                }
                if (detailsTableInfo.has(Constants.summationfields) && detailsTableInfo.get(Constants.summationfields) != null) {
                    summationfields = (String) detailsTableInfo.get(Constants.summationfields);
                }
                
                if(isDetailsTablePresent){
                    ArrayList<CustomDesignLineItemProp> headerlist = new ArrayList();
                    List prodlist = new ArrayList();
                    List totallist = new ArrayList();
                    jsoupDoc = Jsoup.parse(buildhtml);
                    //get Details Table element
                    org.jsoup.nodes.Element detailsTableElement = jsoupDoc.getElementById(detailsTableParentRowID);
                    String detailsTablehtml = "";

                    if (detailsTableElement != null) {
                        String top = "0px", left = "0px", tablewidth = "0";
                        //Configure table Headers
                        JSONArray columnarr = new JSONArray();
                        Set colnoset = new HashSet();
                        int fieldcnt = 0;
                        String headerStyle = "";
                        for (int cnt = 0; cnt < customizedDetailsTableCols.length(); cnt++) {
                            if (!(colnoset.contains(customizedDetailsTableCols.getJSONObject(cnt).optInt("colno", cnt)))) {
                                colnoset.add(customizedDetailsTableCols.getJSONObject(cnt).optInt("colno", cnt));
                                columnarr.put(customizedDetailsTableCols.getJSONObject(cnt));
                            }
                        }
                        for (int cnt1 = 0; cnt1 < columnarr.length(); cnt1++) {
                            fieldcnt = 0;
                            JSONArray fields = new JSONArray();
                            for (int cnt = 0; cnt < customizedDetailsTableCols.length(); cnt++) {
                                if (columnarr.getJSONObject(cnt1).optInt("colno", cnt1) == customizedDetailsTableCols.getJSONObject(cnt).optInt("colno", cnt)) {
                                    fields.put(cnt);
                                }
                            }
                            columnarr.getJSONObject(cnt1).put("fields", fields);
                        }

                        JSONArray headerJsonArr = null;
                        if (customizedDetailsTableHeaders != null && customizedDetailsTableHeaders.length() > 0) {
                            headerJsonArr = customizedDetailsTableHeaders;
                        } else {
                            headerJsonArr = columnarr;
                        }
                        //Create table header
                        for (int headerCnt = 0; headerCnt < headerJsonArr.length(); headerCnt++) {
                            JSONObject colInfo = headerJsonArr.getJSONObject(headerCnt);
                            CustomDesignLineItemProp headerprop = new CustomDesignLineItemProp();
                            String headerproperty = colInfo.optString("headerproperty", "");
                            if (!headerproperty.equals("")) {
                                JSONObject jobjheader = new JSONObject(headerproperty);
                                alignment = jobjheader.optString("alignment", "left");
                                backgroundcolor = jobjheader.optString("backgroundcolor", "#FFFFFF");
                                changedlabel = jobjheader.optString("changedlabel", "");
                                headerStyle = jobjheader.optString("style", "border:1px solid;padding: 1px;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;");
                            }
                            //If number field
                            if (colInfo.getString("xtype").equals("2")) {//xtype-2
                                if (!headerproperty.equals("")) {
                                    if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("0")) {
                                        headerprop.setData((changedlabel) + "(" + headerCurrency + ")");
                                    } else {
                                        headerprop.setData(changedlabel);
                                    }
                                    headerprop.setAlign(alignment);
                                    if (backgroundcolor.isEmpty()) {
                                        headerprop.setBgcolor("#C0C0C0");
                                    } else {
                                        headerprop.setBgcolor(backgroundcolor);
                                    }
                                    headerprop.setStyle(headerStyle);
                                } else {
                                    //Set currency values in header
                                    if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("0")) { //if symbol(0) then append currency symbol
                                        if(colInfo.getString("label").contains("#Currency Symbol#")){
                                            headerprop.setData(colInfo.getString("label").replace("#Currency Symbol#", headerCurrency));// + "(" + headerCurrencyCode + ")");
                                        } else{
                                            headerprop.setData(colInfo.getString("label") + "(" + headerCurrency + ")");
                                        }
                                    } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("1")) { //if code(1) then append currency code
                                        if(colInfo.getString("label").contains("#Currency Code#")){
                                            headerprop.setData(colInfo.getString("label").replace("#Currency Code#", headerCurrencyCode));// + "(" + headerCurrencyCode + ")");
                                        } else{
                                            headerprop.setData(colInfo.getString("label") + "(" + headerCurrencyCode + ")");
                                        }
                                    } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("2")) { //if code(2) then append base currency symbol
                                        if(colInfo.getString("label").contains("#Base Currency Symbol#")){
                                            headerprop.setData(colInfo.getString("label").replace("#Base Currency Symbol#", baseCurrencySymbol));
                                        } else{
                                            headerprop.setData(colInfo.getString("label") + "(" + baseCurrencySymbol + ")");
                                        }
                                    } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("3")) { //if code(3) then append base currency code
                                        if(colInfo.getString("label").contains("#Base Currency Code#")){
                                            headerprop.setData(colInfo.getString("label").replace("#Base Currency Code#", baseCurrencyCode));
                                        } else{
                                            headerprop.setData(colInfo.getString("label") + "(" + baseCurrencyCode + ")");
                                        }
                                    } else {
                                        headerprop.setData(colInfo.getString("label"));
                                    }
                                    headerprop.setAlign("left");
                                    headerprop.setBgcolor("#C0C0C0");
                                    headerprop.setStyle(" padding: 1px; " + colInfo.optString("style", "border:1px solid;padding: 0.5em;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;") + "  position:unset; ");
                                }
                            } else if (!headerproperty.equals("")) {//if headerproperty is not empty//xtype-1
                                if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true")) {
                                    headerprop.setData((changedlabel) + "(" + headerCurrency + ")");
                                } else {
                                    headerprop.setData(changedlabel);
                                }
                                headerprop.setAlign(alignment);
                                if (backgroundcolor.isEmpty()) {
                                    headerprop.setBgcolor("#C0C0C0");
                                } else {
                                    headerprop.setBgcolor(backgroundcolor);
                                }
                                headerprop.setStyle(headerStyle);
                            } else {//headerproperty is empty
                                headerprop.setData(colInfo.optString("label", ""));
                                headerprop.setAlign("left");
                                headerprop.setBgcolor("#C0C0C0");
                                headerprop.setStyle(" padding: 1px; " + colInfo.optString("style", "border:1px solid;padding: 0.5em;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;") + "  position:unset; ");
                            }
                            headerprop.setWidth(colInfo.getString("colwidth").concat("%"));
                            headerlist.add(headerprop);
                        }

                        Boolean showtotal = false;
                        int totalCheckIndex = 0;
                        String decimalpoints = "2";
                        String decimalValue = "0";
                        Boolean totalCheck = false;
                        ArrayList<CustomDesignLineItemProp> rowtotallist = new ArrayList();
                        for (int count = 0; count < columnarr.length(); count++) {
                            rowtotallist.add(count, new CustomDesignLineItemProp());
                        }
                        ArrayList<String> headerTotal = new ArrayList<String>();
                        for (int count = 0; count < columnarr.length(); count++) {
                            headerTotal.add(count, "0.00");
                        }
                        for (int headerCnt = 0; headerCnt < columnarr.length(); headerCnt++) {
                            JSONObject colInfo = customizedDetailsTableCols.getJSONObject(headerCnt);
                            if (colInfo.optString("showtotal", "false").equals("true")) {
                                showtotal = true;
                                break;
                            }
                        }
                        JSONArray taskBreak = new JSONArray();
                        JSONArray taskTableHeader = new JSONArray();
                        //Create details table rows
                        for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
                            if (lineItemsArr.get(cnt).getClass().equals(JSONArray.class)) {
                                continue;
                            }
                            JSONObject itemData = lineItemsArr.getJSONObject(cnt);
                            //If details table data available then proceed
                            if (itemData.has("isDetailsTableData")) {
                                //get detail table data based on subtype
                                JSONArray detailsTableArr = itemData.getJSONArray(detailsTableSubType_id);
                                if(detailsTableSubType_id.equals("tasks") && itemData.has("taskBreak")){
                                    taskBreak = itemData.getJSONArray("taskBreak");
                                }
                                if(detailsTableSubType_id.equals("tasks") && itemData.has("taskTableHeader")){
                                    taskTableHeader = itemData.getJSONArray("taskTableHeader");
                                }

                                //Consolidated details table
                                if(!StringUtil.isNullOrEmpty(consolidatedfield)){
                                    detailsTableArr = CustomDesignHandler.getConsolidatedDetailsTableArray(detailsTableArr, consolidatedfield, summationfields);
                                }

                                //Iterate over details table data fetched above
                                for(int detailsRow = 0; detailsRow < detailsTableArr.length(); detailsRow++) {
                                    ArrayList<CustomDesignLineItemProp> rowDatalist = new ArrayList();
                                    JSONObject detailsTableData = detailsTableArr.getJSONObject(detailsRow);
                                    //Iterate columns of Details Table
                                    for (int headerCnt = 0; headerCnt < columnarr.length(); headerCnt++) {
                                        int fieldsLength = columnarr.getJSONObject(headerCnt).getJSONArray("fields").length();
                                        JSONArray fields = columnarr.getJSONObject(headerCnt).getJSONArray("fields");
                                        String prodData = "";
                                        String prodDataHTML = "";
                                        String prodData1 = "";
                                        String style = "";

                                        int type;//for field type - xtype
                                        CustomDesignLineItemProp prop = new CustomDesignLineItemProp();
                                        String valign = "top";
                                        //Iterate fields used in columns
                                        for (int fieldCnt = 0; fieldCnt < fieldsLength; fieldCnt++) {
                                            //get column info
                                            JSONObject colInfo = customizedDetailsTableCols.getJSONObject(fields.getInt(fieldCnt));
                                            type = colInfo.optInt("type", 0);
                                            style = colInfo.optString("style", "");
                                            valign = colInfo.optString("valign", "top");
                                            CustomDesignLineItemProp totalListProp = new CustomDesignLineItemProp();
                                            if(!displayUnitPriceAndAmountInPrint){
                                                JSONObject fieldJsonObj = new JSONObject();
                                                if(LineItemColumnModuleMapping.DETAILSTABLE_GST_TAX_SUMMARY_FIELDS_MAP.containsKey(colInfo.optString("fieldid", ""))){
                                                    String value = (String) LineItemColumnModuleMapping.DETAILSTABLE_GST_TAX_SUMMARY_FIELDS_MAP.get(colInfo.optString("fieldid", ""));
                                                    fieldJsonObj = new JSONObject(value);
                                                }
                                                if(fieldJsonObj.length() > 0){
                                                    if(fieldJsonObj.optBoolean("isFromUnitPriceAndAmount", false)){
                                                        prodDataHTML = "<div style=\"" + style + "\">" + CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS + "</div>";
                                                        prodData1 += prodDataHTML;
                                                        continue;
                                                    }
                                                }
                                            }
                                            if (type == Constants.lineItemSelectFieldType) {//If Select field
                                                if (detailsTableData.has(colInfo.getString("fieldid"))) {
                                                    prodData = (detailsTableData.get(colInfo.getString("fieldid")).toString()) + "</br>";
                                                    //If number field
                                                    if (colInfo.getString("xtype").equals("2")) {
                                                        double decimalRoundValue = 0;
                                                        double dobValue = 0;
                                                        int intValue = 0;
                                                        if (!StringUtil.isNullOrEmpty(detailsTableData.get(colInfo.getString("fieldid")).toString())) {
                                                            if (colInfo.has("decimalpoint") && !colInfo.getString("decimalpoint").toString().equals("undefined") && !colInfo.getString("decimalpoint").toString().equals("") && !colInfo.getString("decimalpoint").toString().equals("null")) {
                                                                //decimal point configuration in line item
                                                                decimalpoints = colInfo.getString("decimalpoint");
                                                                intValue = Integer.parseInt(decimalpoints);

                                                                dobValue = Double.parseDouble(detailsTableData.get(colInfo.getString("fieldid")).toString());
                                                                decimalRoundValue = authHandler.round(dobValue, intValue);
                                                                //make comma seperated value
                                                                if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                    decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue, countryid);
                                                                } else {
                                                                    decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                    if (intValue == 0) {//if comma is not given and decimal point is 0
                                                                        decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                    }
                                                                }
                                                                //append currency
                                                                if(colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex)){ //if symbol(0) then append currency symbol
                                                                    prodData = headerCurrency + " " + decimalValue + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                                    prodData = headerCurrencyCode + " " + decimalValue + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                                    prodData = baseCurrencySymbol + " " + decimalValue + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                                    prodData = baseCurrencyCode + " " + decimalValue + "</br>";
                                                                } else{
                                                                    prodData = decimalValue + "</br>";
                                                                }
                                                            } else {
                                                                String valueStr = detailsTableData.get(colInfo.getString("fieldid")).toString();
                                                                //make comma seperated value
                                                                if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                    dobValue = Double.parseDouble(valueStr);
                                                                    valueStr = CustomDesignHandler.getAmountinCommaForm(dobValue,countryid);
                                                                }
                                                                //append currency to value
                                                                if(colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex)){//if symbol(0) then append currency symbol
                                                                    prodData = headerCurrency + " " + valueStr + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                                    prodData = headerCurrencyCode + " " + valueStr + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                                    prodData = baseCurrencySymbol + " " + valueStr + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                                    prodData = baseCurrencyCode + " " + valueStr + "</br>";
                                                                } else{
                                                                    prodData = valueStr + "</br>";
                                                                }
                                                            }
                                                        } else {
                                                            prodData = ("");
                                                        }
                                                    }
                                                    //Show total of column
                                                    if (showtotal) {
                                                        if (colInfo.getString("showtotal").equals("true")) {
                                                            if (colInfo.getString("xtype").equals("2")) {
                                                                decimalpoints = colInfo.getString("decimalpoint");
                                                                int intValue = Integer.parseInt(decimalpoints);
                                                                totalListProp.setAlign("rightDouble.parseDouble(caltotal)");
                                                                String caltotal = "0";
                                                                if (!StringUtil.isNullOrEmpty(detailsTableData.get(colInfo.getString("fieldid")).toString())) {
                                                                    caltotal = authHandler.formattedAmount((Double.parseDouble(detailsTableData.get(colInfo.getString("fieldid")).toString())) + Double.parseDouble(headerTotal.get(headerCnt).toString()), companyid);
                                                                    headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), intValue));
                                                                    totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                                } else {
                                                                    headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(headerTotal.get(headerCnt).toString()), intValue));
                                                                    totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                                }
                                                            } else {
                                                                if (colInfo.getString("xtype").equals("1")) {
                                                                    if (!totalCheck) {
                                                                        totalCheck = true;
                                                                        totalCheckIndex = headerCnt;
                                                                    }
                                                                    if (totalCheckIndex == headerCnt) {
                                                                        totalListProp.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                                                                    } else {
                                                                        /*
                                                                        * calculating total for the fields having xtype = 1
                                                                        */
                                                                        if (!StringUtil.isNullOrEmpty(detailsTableData.get(colInfo.getString("fieldid")).toString())) {
                                                                            String totString = detailsTableData.get(colInfo.getString("fieldid")).toString();
                                                                            String caltotal = "0";
                                                                            double total = 0;
                                                                            totalListProp.setAlign("rightDouble.parseDouble(caltotal)");
                                                                            String[] tempStrArr = totString.split("!##");
                                                                            if(isNumeric(tempStrArr[0].trim().replaceAll(",", ""))) {
                                                                                for (int index = 0; index < tempStrArr.length; index++) {
                                                                                    String tempString = tempStrArr[index].trim().replaceAll(",", "");
                                                                                    total += Double.parseDouble(tempString);
                                                                                }
                                                                                caltotal = authHandler.formattedAmount(total + Double.parseDouble(headerTotal.get(headerCnt).toString()), companyid);
                                                                                headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), Constants.AMOUNT_DIGIT_AFTER_DECIMAL));
                                                                                totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                                            } else {
                                                                                totalListProp.setData("");
                                                                            }
                                                                        }
                                                                        else {
                                                                            totalListProp.setData("");
                                                                        }
                                                                    }

                                                                } else {
                                                                    totalListProp.setData("");
                                                                }
                                                            }
                                                        } else {
                                                            if (colInfo.getString("xtype").equals("1")) {
                                                                if (!totalCheck) {
                                                                    totalCheck = true;
                                                                    totalCheckIndex = headerCnt;
                                                                }
                                                                if (totalCheckIndex == headerCnt) {
                                                                    totalListProp.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                                                                } else {
                                                                    totalListProp.setData("");
                                                                }
                                                            } else {
                                                                totalListProp.setData("");
                                                            }
                                                        }
                                                    }
                                                    rowtotallist.set(headerCnt, totalListProp);
                                                } else {// Custom field
                                                    if (detailsTableData.has("Custom_" + colInfo.getString("label"))) {
                                                        prodData = (detailsTableData.get("Custom_" + colInfo.getString("label")).toString()) + "</br>";
                                                        if (colInfo.getString("xtype").equals("2")) {
                                                            prodData = (authHandler.formattedAmount(Double.parseDouble(detailsTableData.get("Custom_" + colInfo.getString("label")).toString()), companyid)) + "</br>";
                                                        } else {
                                                        }
                                                    } else if (showtotal) {
                                                        if (colInfo.getString("showtotal").equals("true") && colInfo.getString("xtype").equals("2")) {
                                                            totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                        } else {
                                                            totalListProp.setData("");
                                                        }
                                                        rowtotallist.set(headerCnt, totalListProp);
                                                    } else {
                                                        prodData = "&nbsp;";
                                                    }
                                                }
                                            } else if (type == 3) {// If Image
                                                if (detailsTableData.has(colInfo.getString("fieldid"))) {
                                                    prodData = "<img style='width:100%;height:100%' src='" + detailsTableData.getString(colInfo.getString("fieldid")) + "'></img>";
                                                } else {
                                                    prodData = "<img style='width:100%;height:100%' src='../images/s.gif'></img>";
                                                }
                                                if (!totalCheck) {
                                                    totalCheck = true;
                                                    totalCheckIndex = headerCnt;
                                                }
                                                if (totalCheckIndex == headerCnt) {
                                                    totalListProp.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                                                } else {
                                                    totalListProp.setData("");
                                                }
                                                rowtotallist.set(headerCnt, totalListProp);

                                            } else {// If Static Text
                                                prodData = colInfo.optString("label", "");
                                            }
                                            String fieldId = colInfo.optString("fieldid", " ");
                                            String dimensionValue = colInfo.optString("dimensionvalue", "2");
                                            String valueSeparator = colInfo.optString("valueseparator", "comma");
                                            if (fieldId.equalsIgnoreCase(CustomDesignerConstants.WAREHOUSE) || fieldId.equalsIgnoreCase(CustomDesignerConstants.LOCATION)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.BatchNumber) || fieldId.equalsIgnoreCase(CustomDesignerConstants.SerialNumber)) {
                                                if (!StringUtil.isNullOrEmpty(prodData)) {
                                                    prodData = replaceWithValueSeperator(prodData, valueSeparator);
                                                }
                                            }

                                            if (!StringUtil.isNullOrEmpty(prodData)) {
                                                if (dimensionValue.equals("0") && prodData.contains("<br>")) {//Show only Title of dimension 
                                                    prodData = prodData.substring(0, prodData.indexOf("<br>"));
                                                } else if (dimensionValue.equals("1") && prodData.contains("<br>")) {//Show only description of dimension
                                                    prodData = prodData.substring(prodData.indexOf("<br>"), prodData.length()-1);
                                                }
                                                if(colInfo.optString("fieldid", " ").equals(CustomDesignerConstants.imageTag) && prodData.contains("s.gif")){
                                                    prodDataHTML = "<div></div>";
                                                } else{
                                                    // Replace \n with <br> tag for representation of value in print
                                                    prodData = prodData.replaceAll("\\n", "<br>");
                                                    prodDataHTML = "<div style=\"" + style + "\">" + prodData + "</div>";
                                                }

                                            }
                                            if (fieldcnt == fieldsLength - 1) {
                                                prodData1 += prodDataHTML;
                                            } else {
                                                prodData1 += prodDataHTML + "<!-- -->";
                                                prodDataHTML="";
                                            }
                                        }
                                        prop.setData(prodData1);
                                        prop.setValign(valign);
                                        rowDatalist.add(prop);
                                    }
                                    prodlist.add(rowDatalist);
                                }
                            }
                        }
                        totallist.add(rowtotallist);
                        ArrayList finalSummaryData = new ArrayList();
                        //get margins of details table
                        String margin = AllDetailsTableHeaderProperties.optString(detailsTableID+"_margin", "0 0 0 0");
                        //get width of details table
                        widthOfTable = AllDetailsTableHeaderProperties.optInt(detailsTableID+"_width", 100);
                        //set detaila table header properties
                        JSONObject DetailsTableHeaderProperties = new JSONObject();
                        DetailsTableHeaderProperties.put("fontsize", AllDetailsTableHeaderProperties.optString(detailsTableID+"_fontsize", ""));
                        DetailsTableHeaderProperties.put("align", AllDetailsTableHeaderProperties.optString(detailsTableID+"_align", ""));
                        DetailsTableHeaderProperties.put("bordercolor", AllDetailsTableHeaderProperties.optString(detailsTableID+"_bordercolor", ""));
                        DetailsTableHeaderProperties.put("bold", AllDetailsTableHeaderProperties.optBoolean(detailsTableID+"_bold", false));
                        DetailsTableHeaderProperties.put("italic", AllDetailsTableHeaderProperties.optBoolean(detailsTableID+"_italic", false));
                        DetailsTableHeaderProperties.put("underline", AllDetailsTableHeaderProperties.optBoolean(detailsTableID+"_underline", false));
                        DetailsTableHeaderProperties.put("isDetailsTable", true);
                        DetailsTableHeaderProperties.put("detailsTableId", "idDtailsTable"+detailsTableCnt);
                        DetailsTableHeaderProperties.put("detailsTableSubType_id", detailsTableSubType_id);
                        DetailsTableHeaderProperties.put("taskBreak", taskBreak);
                        DetailsTableHeaderProperties.put("taskTableHeader", taskTableHeader);
                        //create details table html with proper border and properties
                        detailsTablehtml = CustomDesignHandler.getLineDataHTMLByVelocityEngineNew(velocityEngine, prodlist, headerlist, top, left, tablewidth, showtotal, totallist,
                                    pagelayoutproperty, "0px", finalSummaryData, DetailsTableHeaderProperties, widthOfTable, margin, "", "", false, false, false);
                        //get classes applied to details table
                        Set<String> classSet = detailsTableElement.classNames();
                        //remove class and style attributes from details table element
                        detailsTableElement.removeAttr("class");
                        detailsTableElement.removeAttr("style");
                        if ( classSet.contains("joinnextrow") ) {
                            detailsTableElement.addClass("joinnextrow");
                        }
                        //set detial table final html to details table element
                        detailsTableElement.html(detailsTablehtml);
                        buildhtml = jsoupDoc.body().html();
                    }
                }
            }
            
            /**
             * Details Table Ends
             */
            
            /**
             * Checklist Table Starts
             */
            boolean isChecklistTablePresent = false;
            String checklistTableParentRowid = "";
            String checklistValue = "";
            String checklistTableStyle = "";
            JSONArray checklistTableHeaderItems = new JSONArray();
            JSONArray checklistTableDataItems = new JSONArray();
            if(moduleid == Constants.MRP_WORK_ORDER_MODULEID){
                HashMap<String, Object> checklistTableMap = CustomDesignHandler.getChecklistTableDetails(jArr);
                if (checklistTableMap.containsKey(Constants.isChecklistTablePresent) && checklistTableMap.get(Constants.isChecklistTablePresent) != null) {
                    isChecklistTablePresent = (Boolean) checklistTableMap.get(Constants.isChecklistTablePresent);
                }
                if (checklistTableMap.containsKey("checklistTableHeaderItems") && checklistTableMap.get("checklistTableHeaderItems") != null) {
                    checklistTableHeaderItems = (JSONArray) checklistTableMap.get("checklistTableHeaderItems");
                }
                if (checklistTableMap.containsKey("checklistTableDataItems") && checklistTableMap.get("checklistTableDataItems") != null) {
                    checklistTableDataItems = (JSONArray) checklistTableMap.get("checklistTableDataItems");
                }
                if (checklistTableMap.containsKey("checklistTableParentRowid") && checklistTableMap.get("checklistTableParentRowid") != null) {
                    checklistTableParentRowid =  (checklistTableMap.get("checklistTableParentRowid").toString());
                }
                if (checklistTableMap.containsKey("checklistValue") && checklistTableMap.get("checklistValue") != null) {
                    checklistValue =  (checklistTableMap.get("checklistValue").toString());
                }
                if (checklistTableMap.containsKey("checklistTableStyle") && checklistTableMap.get("checklistTableStyle") != null) {
                    checklistTableStyle =  (checklistTableMap.get("checklistTableStyle").toString());
                }
                if (isChecklistTablePresent) {
                    String checklistTableHTML = "";
                    jsoupDoc = Jsoup.parse(buildhtml);
                    org.jsoup.nodes.Element checklistTableElement = jsoupDoc.getElementById(checklistTableParentRowid);
                    JSONArray checklistDetailJarr = new JSONArray();
                    for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
                        JSONObject itemData = lineItemsArr.getJSONObject(cnt);
                        if(itemData.has("isChecklistTableData") && itemData.optBoolean("isChecklistTableData", false)){
                            checklistDetailJarr = itemData.optJSONArray("checklistTableData");
                            break;
                        }
                    }
                    for (int cnt = 0; cnt < checklistDetailJarr.length(); cnt++) {
                        ArrayList<CustomDesignLineItemProp> checklistTableHeaderlist = new ArrayList();
                        ArrayList<CustomDesignLineItemProp> checklistTableDetailslist = null;
                        List rowDataList = new ArrayList();
                        JSONObject checklistDetailObj = checklistDetailJarr.getJSONObject(cnt);
                        checklistTableDetailslist = new ArrayList();
                        if (checklistTableElement != null) {
                            for (int headerCnt = 0; headerCnt < checklistTableHeaderItems.length(); headerCnt++) {
                                JSONObject headerObj = checklistTableHeaderItems.getJSONObject(headerCnt);
                                JSONObject dataObj = checklistTableDataItems.optJSONObject(headerCnt);
                                if(dataObj==null){
                                    dataObj=headerObj;
                                }
                                CustomDesignLineItemProp checklistheader = new CustomDesignLineItemProp();
                                CustomDesignLineItemProp checklistdata = new CustomDesignLineItemProp();
                                if (headerObj.optString("columnname", "").equalsIgnoreCase("Checklist")) {
                                    int width = headerObj.optInt("width", 0);
                                    String headerstyle = headerObj.optString("style", "");
                                    String widthString = headerstyle.substring(headerstyle.indexOf("width:"), headerstyle.indexOf(";", headerstyle.indexOf("width:")));
                                    headerstyle = headerstyle.replace(widthString, "");
                                    String datastyle = dataObj.optString("style", "");
                                    datastyle = datastyle.replace(widthString, "");

                                    String checklistHeaders = checklistDetailObj.optString("headers", "");
                                    String[] checklistHeadersArr = checklistHeaders.split("!##");

                                    int dividedWidth = width / checklistHeadersArr.length;
                                    for (int checklistCnt = 0; checklistCnt < checklistHeadersArr.length; checklistCnt++) {
                                        checklistdata = new CustomDesignLineItemProp();
                                        CustomDesignLineItemProp checklistHeader = new CustomDesignLineItemProp();
                                        checklistHeader.setData(checklistHeadersArr[checklistCnt]);
                                        checklistHeader.setWidth(String.valueOf(dividedWidth));
                                        checklistHeader.setStyle(headerstyle);
                                        checklistTableHeaderlist.add(checklistHeader);

                                        String value = "";
                                        if(!StringUtil.isNullOrEmpty(checklistValue)) {
                                            String[] checklistVal = checklistValue.replace("[", "").replace("]", "").split(",");
                                            for(int valCnt = 0; valCnt < checklistVal.length; valCnt++){
                                                String key = checklistVal[valCnt];
                                                key = key.substring(1, key.length()-1).trim();
                                                String data = checklistDetailObj.optString(checklistHeadersArr[checklistCnt]+"_"+key, "");
                                                if(!StringUtil.isNullOrEmpty(data)){
                                                   value += data + ", ";
                                                }
                                            }
                                            if(!StringUtil.isNullOrEmpty(value)){
                                                value = value.substring(0, value.length() - 2);
                                            }
                                        } else{
                                            value = checklistDetailObj.optString(checklistHeadersArr[checklistCnt]+"_rating", "");
                                        }
                                        checklistdata.setData(value);
                                        checklistdata.setStyle(datastyle);
                                        checklistTableDetailslist.add(checklistdata);
                                    }
                                } else {
                                    checklistheader.setData(headerObj.optString("header", ""));
                                    checklistheader.setWidth(headerObj.optString("width", ""));
                                    checklistheader.setStyle(headerObj.optString("style", ""));
                                    checklistTableHeaderlist.add(checklistheader);

                                    if (headerObj.optString("columnname").equals("TaskName")) {
                                        checklistdata.setData(checklistDetailObj.optString("taskName", ""));
                                    }
                                    checklistdata.setStyle(dataObj.optString("style", ""));
                                    checklistTableDetailslist.add(checklistdata);
                                }
                            }
                            rowDataList.add(checklistTableDetailslist);
                        }
                        checklistTableHTML += CustomDesignHandler.getAgeingTableHTMLByVelocityEngineNew(velocityEngine, checklistTableDetailslist, checklistTableHeaderlist, checklistTableStyle, rowDataList);
                    }
                    checklistTableElement.html(checklistTableHTML);
                    buildhtml = jsoupDoc.body().html();
                }
            }
            /**
             * Checklist Table Ends
             */
            
            String lineTableColumnCSS = "";
            
            if (isLineItemPresent) {
                /*
                 * append Line Items
                 */
                ArrayList<CustomDesignLineItemProp> headerlist = new ArrayList();
                List prodlist = new ArrayList();
                List totallist = new ArrayList();
                jsoupDoc = Jsoup.parse(buildhtml);
                org.jsoup.nodes.Element itemListElement = jsoupDoc.getElementById(lineitemTableParentRowID);
//                new JSONArray(pagelayoutproperty).getJSONObject(0).getJSONObject("pagelayoutsettings").get("ispreprinted");
//                JSONObject pageLayoutSettings = new JSONArray(pagelayoutproperty).getJSONObject(0);
//                isPrePrinted = pageLayoutSettings.has("pagelayoutsettings") ? pageLayoutSettings.getJSONObject("pagelayoutsettings").getBoolean("ispreprinted") : false;
                if(isPrePrinted){
                    lineTableColumnCSS = itemListElement.getElementById("itemlistcontainer").parent().attr("style");
                    lineTableColumnCSS = lineTableColumnCSS.replace(lineTableColumnCSS.substring(lineTableColumnCSS.indexOf("display"), lineTableColumnCSS.indexOf(";",lineTableColumnCSS.indexOf("display"))+2), "");
                }
                if (itemListElement != null) {
                    String top = "0px", left = "0px", tablewidth = String.valueOf(lineitemwidth);
//                    org.jsoup.nodes.Element mainDiv = itemListElement;
//                    Attributes styleAtt = mainDiv.attributes();
//                    List<Attribute> attList = styleAtt.asList();
//                    for (Attribute a : attList) {
//                        if (a.getKey().equals("style")) {
//                            String[] items = a.getValue().trim().split(";");
//                            for (String item : items) {
//                                String[] itemValues = item.split(":");
//                                if (itemValues[0].trim().equals("top")) {
//                                    top = itemValues[1];
//                                } else if (itemValues[0].trim().equals("left")) {
//                                    left = itemValues[1];
//                                } else if (itemValues[0].trim().equals("width")) {
//                                    tablewidth = itemValues[1];
//                                }
//                            }
//                        }
//                    }

                    /*
                     * Configure Line Headers
                     */
//                    TreeMap<String, String> lineCols = LineItemColumnModuleMapping.InvoiceProductLineMap;
                    JSONArray columnarr = new JSONArray();
                    Set colnoset = new HashSet();
                    int fieldcnt = 0;
                    String headerStyle = "";
                    for (int cnt = 0; cnt < customizedlineItems.length(); cnt++) {
                        if (!(colnoset.contains(customizedlineItems.getJSONObject(cnt).optInt("colno", cnt)))) {
                            colnoset.add(customizedlineItems.getJSONObject(cnt).optInt("colno", cnt));
                            columnarr.put(customizedlineItems.getJSONObject(cnt));
                        }
                    }
                    for (int cnt1 = 0; cnt1 < columnarr.length(); cnt1++) {
                        fieldcnt = 0;
                        JSONArray fields = new JSONArray();
                        for (int cnt = 0; cnt < customizedlineItems.length(); cnt++) {
                            if (columnarr.getJSONObject(cnt1).optInt("colno", cnt1) == customizedlineItems.getJSONObject(cnt).optInt("colno", cnt)) {
                                fields.put(cnt);
                            }
                        }
                        columnarr.getJSONObject(cnt1).put("fields", fields);
                    }

                    JSONArray headerJsonArr = null;
                    if (customizedheaderItems != null && customizedheaderItems.length() > 0) {
                        headerJsonArr = customizedheaderItems;
                    } else {
                        headerJsonArr = columnarr;
                    }

                    for (int headerCnt = 0; headerCnt < headerJsonArr.length(); headerCnt++) {
                        JSONObject colInfo = headerJsonArr.getJSONObject(headerCnt);
//                        if (lineCols.containsKey(colInfo.getString("fieldid"))) {
                        CustomDesignLineItemProp headerprop = new CustomDesignLineItemProp();
//                            JSONObject staticColInfo = new JSONObject(lineCols.get(colInfo.getString("fieldid")));
                        String headerproperty = colInfo.optString("headerproperty", "");
                        if (!headerproperty.equals("")) {
                            JSONObject jobjheader = new JSONObject(headerproperty);
                            alignment = jobjheader.optString("alignment", "left");
                            backgroundcolor = jobjheader.optString("backgroundcolor", "#FFFFFF");
                            changedlabel = jobjheader.optString("changedlabel", "");
                            headerStyle = jobjheader.optString("style", "border:1px solid;padding: 1px;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;");
                        }
                        if (colInfo.getString("xtype").equals("2")) {//xtype-2
                            if (!headerproperty.equals("")) {
                                if ((colInfo.has("baserate") && colInfo.getString("baserate").equals("true") && isGstIncluded == true)) {
                                    if ((colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true"))) {
                                        headerprop.setData(changedlabel + " Including GST" + "(" + headerCurrency + ")");
                                    } else {
                                        headerprop.setData(changedlabel + " Including GST");
                                    }
                                } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true")) {
                                    headerprop.setData((changedlabel) + "(" + headerCurrency + ")");
                                } else {
                                    headerprop.setData(changedlabel);
                                }
                                headerprop.setAlign(alignment);
                                if (backgroundcolor.isEmpty()) {
                                    headerprop.setBgcolor("#C0C0C0");
                                } else {
                                    headerprop.setBgcolor(backgroundcolor);
                                }
                                headerprop.setStyle(headerStyle);
                            } else {
                                if ((colInfo.has("baserate") && colInfo.getString("baserate").equals("true") && isGstIncluded == true)) {
                                    if ((colInfo.has("headercurrency") && (colInfo.getString("headercurrency").equals("true") || colInfo.getString("headercurrency").equals("0")))) { //if symbol(0 / true for old template) then append currency symbol
                                        headerprop.setData("Rate Including GST" + "(" + headerCurrency + ")");
                                    } else if ((colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("1"))) { //if code then append currency code(1)
                                        headerprop.setData("Rate Including GST" + "(" + headerCurrencyCode + ")");
                                    } else {
                                        headerprop.setData("Rate Including GST");
                                    }
                                } else if (colInfo.has("headercurrency") && (colInfo.getString("headercurrency").equals("true") || colInfo.getString("headercurrency").equals("0"))) { //if symbol(0 / true for old template) then append currency symbol
//                                    headerprop.setData(colInfo.getString("label") + "(" + headerCurrency + ")");
                                    if(colInfo.getString("label").contains("#Currency Symbol#")){
                                        headerprop.setData(colInfo.getString("label").replace("#Currency Symbol#", headerCurrency));// + "(" + headerCurrencyCode + ")");
                                    } else{
                                        headerprop.setData(colInfo.getString("label") + "(" + headerCurrency + ")");
                                    }
                                } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("1")) { //if code(1) then append currency code
//                                    headerprop.setData(colInfo.getString("label") + "(" + headerCurrencyCode + ")");
                                    if(colInfo.getString("label").contains("#Currency Code#")){
                                        headerprop.setData(colInfo.getString("label").replace("#Currency Code#", headerCurrencyCode));// + "(" + headerCurrencyCode + ")");
                                    } else{
                                        headerprop.setData(colInfo.getString("label") + "(" + headerCurrencyCode + ")");
                                    }
                                } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("2")) { //if code(2) then append base currency symbol
                                    if(colInfo.getString("label").contains("#Base Currency Symbol#")){
                                        headerprop.setData(colInfo.getString("label").replace("#Base Currency Symbol#", baseCurrencySymbol));
                                    } else{
                                        headerprop.setData(colInfo.getString("label") + "(" + baseCurrencySymbol + ")");
                                    }
                                } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("3")) { //if code(3) then append base currency code
                                    if(colInfo.getString("label").contains("#Base Currency Code#")){
                                        headerprop.setData(colInfo.getString("label").replace("#Base Currency Code#", baseCurrencyCode));
                                    } else{
                                        headerprop.setData(colInfo.getString("label") + "(" + baseCurrencyCode + ")");
                                    }
                                } else {
                                    headerprop.setData(colInfo.getString("label"));
                                }
                                headerprop.setAlign("left");
                                headerprop.setBgcolor("#C0C0C0");
                                headerprop.setStyle(" padding: 1px; " + colInfo.optString("style", "border:1px solid;padding: 0.5em;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;") + "  position:unset; ");
                            }
                        } else if (!headerproperty.equals("")) {//if headerproperty is not empty//xtype-1
                            if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true")) {
                                headerprop.setData((changedlabel) + "(" + headerCurrency + ")");
                            } else {
                                headerprop.setData(changedlabel);
                            }
                            headerprop.setAlign(alignment);
                            if (backgroundcolor.isEmpty()) {
                                headerprop.setBgcolor("#C0C0C0");
                            } else {
                                headerprop.setBgcolor(backgroundcolor);
                            }
                            headerprop.setStyle(headerStyle);
                        } else {//headerproperty is empty
                            headerprop.setData(colInfo.optString("label", ""));
                            headerprop.setAlign("left");
                            headerprop.setBgcolor("#C0C0C0");
                            headerprop.setStyle(" padding: 1px; " + colInfo.optString("style", "border:1px solid;padding: 0.5em;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;") + "  position:unset; ");
                        }
                        headerprop.setWidth(colInfo.getString("colwidth").concat("%"));
                        headerlist.add(headerprop);
//                        }
                    }

//                    JSONArray lineItemsArr = accInvoiceCommon.getInvoiceDetailsItemJSON(request, companyid, invoiceID);
                    Boolean showtotal = false;
                    int totalCheckIndex = 0;
                    String decimalpoints = "2";
                    String decimalValue = "0";
                    Boolean totalCheck = false;
                    ArrayList<CustomDesignLineItemProp> rowtotallist = new ArrayList();
                    for (int count = 0; count < columnarr.length(); count++) {
                        rowtotallist.add(count, new CustomDesignLineItemProp());
                    }
                    ArrayList<String> headerTotal = new ArrayList<String>();
                    for (int count = 0; count < columnarr.length(); count++) {
                        headerTotal.add(count, "0.00");
                    }
                    for (int headerCnt = 0; headerCnt < columnarr.length(); headerCnt++) {
                        JSONObject colInfo = customizedlineItems.getJSONObject(headerCnt);
                        if (colInfo.optString("showtotal", "false").equals("true")) {
                            showtotal = true;
                            break;
                        }
                    }
                    /*
                     * Sort line item with selected field and sort order
                     */
                    if(!StringUtil.isNullOrEmpty(sortField) && !StringUtil.isNullOrEmpty(sortOrder)){
                        lineItemsArr = getSortedLineItemArr(lineItemsArr, sortField, sortFieldXtype, sortOrder,df,moduleid);
                    }
                    lineItemsArr = getConsolidatedLineItem(lineItemsArr, isconsolidated);
                    lineItemsArr = getLineItemArrByProductCategory(lineItemsArr, isGroupingApplied, isGroupingAfterRowPresent, groupingItems, groupingAfterItems,countryid, companyid);

                    boolean isTotalNamePresent = false;
                    for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
                        ArrayList<CustomDesignLineItemProp> rowDatalist = new ArrayList();
                        JSONObject itemData = lineItemsArr.getJSONObject(cnt);
                        /*
                         * Summary data and details table is already replaced above
                         */
                        if (itemData.has("summarydata") || itemData.has("otherfieldsdata") || itemData.has("isDetailsTableData") || itemData.has("isChecklistTableData")) {
                            continue;
                        } else if (itemData.has("isCategory")) {
                            for (int k = 0; k < groupingItems.length(); k++) {
                                CustomDesignLineItemProp prop = new CustomDesignLineItemProp();
                                if (!StringUtil.isNullOrEmpty(groupingItems.getJSONObject(k).optString("label"))) {
                                    String style = groupingItems.getJSONObject(k).optString("style", "");
                                    String data = "<div style=\"" + style + "\">" + itemData.optString("name", "") + "</div>";
                                    prop.setData(data);
                                } else {
                                    prop.setData("&nbsp;");
                                }
                                rowDatalist.add(prop);
                            }
                            prodlist.add(rowDatalist);
                        } else if (itemData.has("isGroupAfter")) {
                            for (int k = 0; k < groupingAfterItems.length(); k++) {
                                CustomDesignLineItemProp prop = new CustomDesignLineItemProp();
                                if (!StringUtil.isNullOrEmpty(groupingAfterItems.getJSONObject(k).optString("label"))) {
                                    String style = groupingAfterItems.getJSONObject(k).optString("style", "");
                                    String data = "<div style=\"" + style + "\">" + itemData.optString(groupingAfterItems.getJSONObject(k).optString("putin")+"_"+Constants.data, "") + "</div>";
                                    prop.setData(data);
                                } else {
                                    prop.setData("&nbsp;");
                                }
                                rowDatalist.add(prop);
                            }
                            prodlist.add(rowDatalist);
                        } else {
                            for (int headerCnt = 0; headerCnt < columnarr.length(); headerCnt++) {
                                int fieldsLength = columnarr.getJSONObject(headerCnt).getJSONArray("fields").length();
                                JSONArray fields = columnarr.getJSONObject(headerCnt).getJSONArray("fields");
                                String prodDataHTML = "";
                                String prodData1 = "";
                                String pretext = "";
                                String posttext = "";
                                String style = "";
                                String prodordereddata = "";
                                boolean isCreditDebitAmountInOneColumn = false; // for SOA only
                                if(fieldsLength > 1 && (moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId)){
                                    boolean isDebitAmountPresent = false;
                                    boolean isCreditAmountPresent = false;
                                    for (int fieldCnt = 0; fieldCnt < fieldsLength; fieldCnt++) {
                                        JSONObject colInfo = customizedlineItems.getJSONObject(fields.getInt(fieldCnt));
                                        if(colInfo.optString("columnname","").equals("Debit Amount") || colInfo.optString("columnname","").equals("Debit Amount in Base Currency")){
                                            isDebitAmountPresent = true;
                                        } else if(colInfo.optString("columnname","").equals("Credit Amount") || colInfo.optString("columnname","").equals("Credit Amount in Base Currency")){
                                            isCreditAmountPresent = true;
                                        }
                                    }
                                    if(isCreditAmountPresent && isDebitAmountPresent){
                                        isCreditDebitAmountInOneColumn = true;
                                    }
                                }
                                int type;
                                CustomDesignLineItemProp prop = new CustomDesignLineItemProp();
                                String valign = "top";
                                for (int fieldCnt = 0; fieldCnt < fieldsLength; fieldCnt++) {
                                    String prodData = "";
                                    JSONObject colInfo = customizedlineItems.getJSONObject(fields.getInt(fieldCnt));
                                    type = colInfo.optInt("type", 0);
                                    //replace double quote to single quote because double quote in html breaks string
                                    style = colInfo.optString("style", "").replaceAll("\"", "'");//colInfo.optString("style", "");
                                    valign = colInfo.optString("valign", "top");
                                    CustomDesignLineItemProp totalListProp = new CustomDesignLineItemProp();
                                    
                                    if(!displayUnitPriceAndAmountInPrint){
                                        JSONObject fieldJsonObj = getJsonValueOfLineField(colInfo.optString("fieldid"), moduleid);
                                        if(fieldJsonObj.length() > 0){
                                            if(fieldJsonObj.optBoolean("isFromUnitPriceAndAmount", false)){
                                                prodDataHTML = "<div style=\"" + style + "\">" + CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS + "</div>";
                                                prodData1 += prodDataHTML;
                                                continue;
                                            }
                                        }
                                    }
                                    if(!isTotalNamePresent && colInfo.has("totalname") && !StringUtil.isNullOrEmpty(colInfo.optString("totalname", ""))){
                                        isTotalNamePresent = true;
                                    }
                                    if (type == Constants.lineItemSelectFieldType) {

//                                if (lineCols.containsKey(colInfo.getString("fieldid"))) {
//                                    JSONObject staticColInfo = new JSONObject(lineCols.get(colInfo.getString("fieldid")));
                                        if (itemData.has(colInfo.getString("fieldid"))) {
                                            prodData = (itemData.get(colInfo.getString("fieldid")).toString()) + "</br>";
                                            //For dimensions
                                            if (colInfo.getString("fieldid").toString().equals(CustomDesignerConstants.AllDimensions) || colInfo.getString("fieldid").toString().equals(CustomDesignerConstants.AllLinelevelCustomFields)) {
                                                HashMap<String, Object> fieldparams = new HashMap<String, Object>();
                                                fieldparams.put(Constants.moduleid, moduleid);
                                                fieldparams.put(Constants.companyid, companyid);
                                                fieldparams.put(CustomDesignerConstants.json, json);
                                                fieldparams.put(CustomDesignerConstants.islineitem, "true");
                                                HashMap<String, Object> returnvalues = new HashMap<String, Object>();
                                                returnvalues = CustomFieldDimensionwithSequence(fieldparams, itemData);
                                                if (returnvalues.containsKey("prodData")) {
                                                    prodordereddata = (String) returnvalues.get("prodData");
                                                    if (!StringUtil.isNullOrEmpty(prodordereddata)) {
                                                        prodData = prodordereddata + "</br>";
                                                    }
                                                }
                                            }

                                            if (colInfo.getString("xtype").equals("2") || colInfo.getString("columnname").equalsIgnoreCase("quantity with uom")||colInfo.getString("columnname").equalsIgnoreCase("base qty with uom")||colInfo.getString("columnname").equalsIgnoreCase("batch sub quantity")) {
                                                double decimalRoundValue = 0;
                                                double dobValue = 0;
                                                int intValue = 0;
//                                            prop.setAlign("right");
                                                if (!StringUtil.isNullOrEmpty(itemData.get(colInfo.getString("fieldid")).toString())) {
//                                                  decimalpoints=(colInfo.has("decimalpoint"))?((!StringUtil.isNullOrEmpty(colInfo.getString("decimalpoint")))?colInfo.getString("decimalpoint"):"4"):"4";
                                                    if (colInfo.has("decimalpoint") && !colInfo.getString("decimalpoint").toString().equals("undefined") && !colInfo.getString("decimalpoint").toString().equals("") && !colInfo.getString("decimalpoint").toString().equals("null")) {
                                                        //decimal point configuration in line item
                                                        decimalpoints = colInfo.getString("decimalpoint");
                                                        intValue = Integer.parseInt(decimalpoints);
                                                        if (colInfo.getString("columnname").equals("Quantity With UOM")||colInfo.getString("columnname").equals("Base Qty With UOM")) {
                                                            String value = itemData.get(colInfo.getString("fieldid")).toString();
                                                            String[] seperatedValues = value.split(" ");
                                                            dobValue = Double.parseDouble(seperatedValues[0]);
                                                            decimalRoundValue = authHandler.round(dobValue, intValue);
                                                            if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue,countryid);
                                                            } else {
                                                                decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                if (intValue == 0) {//if comma is not given and decimal point is 0
                                                                    decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                }
                                                            }
                                                            prodData = decimalValue + " " + ((seperatedValues.length > 1) ? seperatedValues[1] : "") + "</br>";
                                                        } else if (colInfo.getString("columnname").equalsIgnoreCase("Job Work Balance Qty") || colInfo.getString("columnname").equalsIgnoreCase("Job Work Consume Qty") || colInfo.getString("columnname").equalsIgnoreCase("Batch Quantity") || colInfo.getString("columnname").equalsIgnoreCase("batch sub quantity")) {//Apply Decimal Precision to Job Work balance Qty and Job Work consume Qty
                                                            String value = itemData.get(colInfo.getString("fieldid")).toString();
                                                            String[] tempStrArr = value.split(CustomDesignerConstants.VALUE_SEPARATOR);
                                                            prodData = "";
                                                            for (int index = 0; index < tempStrArr.length; index++) {
                                                                String tempString = tempStrArr[index];
                                                                tempString = tempString.trim();
                                                                String tempStringPostText = tempString.split(" ").length == 2 ? " " + tempString.split(" ")[1] : "";
                                                                tempString = tempString.split(" ")[0];
                                                                if (!StringUtil.isNullOrEmpty(tempString)) {
                                                                    dobValue = Double.parseDouble(tempString);
                                                                    decimalRoundValue = authHandler.round(dobValue, intValue);
                                                                    if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                        decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue, countryid);
                                                                    } else {
                                                                        decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                        if (intValue == 0) {
                                                                            decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                        }
                                                                    }
                                                                    decimalValue = decimalValue + tempStringPostText + CustomDesignerConstants.VALUE_SEPARATOR;
                                                                    prodData += decimalValue;
                                                                }
                                                            }

                                                        } else {
                                                            dobValue = Double.parseDouble(itemData.get(colInfo.getString("fieldid")).toString());
                                                            String SpecificCurrencyId = "";
                                                            if (!StringUtil.isNullOrEmpty(colInfo.getString("recordcurrency")) && colInfo.getString("fieldid").equals("SpecificCurrencyAmount")) {
                                                                    SpecificCurrencyId = colInfo.optString("recordcurrency");
                                                                    JSONObject requestJson = new JSONObject();
                                                                    requestJson.put("transactionDate", itemData.optString("transactiondate"));
                                                                    requestJson.put("currId", SpecificCurrencyId);
                                                                    requestJson.put(Constants.globalCurrencyKey, gcurrencyid);
                                                                    requestJson.put(Constants.companyKey, companyid);
                                                                    requestJson.put("fieldName", colInfo.optString("fieldid"));
                                                                    requestJson.put("gstCurrencyRate", itemData.optString("gstCurrencyRate"));
                                                                    double exchangeRateForSpecificFields = getExchangeRateForSpecificCurrencyFields(requestJson, accInvoiceServiceDAOObj);
                                                                    dobValue = dobValue * exchangeRateForSpecificFields;
                                                            }
                                                            decimalRoundValue = authHandler.round(dobValue, intValue);
                                                            if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue, countryid);
                                                            } else {
                                                                decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                if (intValue == 0) {//if comma is not given and decimal point is 0
                                                                    decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                }
                                                            }
                                                            if ((colInfo.optBoolean("showzerovalueasblank", false))) {
                                                                decimalValue = CustomDesignHandler.getZeroAmountAsBlank(decimalValue);
                                                            }
                                                            // If credit amount and debit amount is in one column then show credit amount as per negative value combo selection
                                                            if(isCreditDebitAmountInOneColumn){
                                                                if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                                                                    if(colInfo.getString("columnname").equals("Credit Amount") || colInfo.getString("columnname").equals("Credit Amount in Base Currency")){
                                                                        if(negativeValueIn == 1){
                                                                            decimalValue = "-" + decimalValue;
                                                                        } else if(negativeValueIn == 2){
                                                                            decimalValue = "(" + decimalValue + ")";
                                                                        }
                                                                    }
                                                                }
                                                            }
//                                                            prodData = ((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals("true")) && (!colInfo.getString("recordcurrency").equals("")) ? "" + headerCurrency + " " + decimalValue : decimalValue) + "</br>"; //setting amount to company accpreferences.
                                                            if(colInfo.has("recordcurrency") && (colInfo.getString("recordcurrency").equals("true") || colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex)) && (StringUtil.isNullOrEmpty(SpecificCurrencyId) || SpecificCurrencyId.equals("0") || SpecificCurrencyId.equals("none"))){ //if symbol(0 / true for old template) then append currency symbol
                                                                prodData = headerCurrency + " " + decimalValue + "</br>";
                                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex) && (StringUtil.isNullOrEmpty(SpecificCurrencyId) || SpecificCurrencyId.equals("0") || SpecificCurrencyId.equals("none")))){ //if value is (1) then append currency code
                                                                prodData = headerCurrencyCode + " " + decimalValue + "</br>";
                                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex) && (StringUtil.isNullOrEmpty(SpecificCurrencyId) || SpecificCurrencyId.equals("0") || SpecificCurrencyId.equals("none")))){ //if value is (2) then append base currency symbol
                                                                prodData = baseCurrencySymbol + " " + decimalValue + "</br>";
                                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex) && (StringUtil.isNullOrEmpty(SpecificCurrencyId) || SpecificCurrencyId.equals("0") || SpecificCurrencyId.equals("none")))){ //if value is (3) then append base currency code
                                                                prodData = baseCurrencyCode + " " + decimalValue + "</br>";
                                                            } else{
                                                                prodData = decimalValue + "</br>";
                                                            }
                                                        }

                                                    } else {
                                                        if (colInfo.getString("columnname").equals("Quantity With UOM") || colInfo.getString("columnname").equals("Product Available Quantity")||colInfo.getString("columnname").equals("Base Qty With UOM")) {
                                                            String value = itemData.get(colInfo.getString("fieldid")).toString();
                                                            String[] seperatedValues = value.split(" ");
                                                            dobValue = Double.parseDouble(seperatedValues[0]);
                                                            prodData = dobValue + " " + (seperatedValues.length > 1 ? seperatedValues[1] : "") + "</br>";
                                                        } else {
                                                            dobValue = Double.parseDouble(itemData.get(colInfo.getString("fieldid")).toString());
                                                            if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
//                                                                prodData = ((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals("true")) && (!colInfo.getString("recordcurrency").equals("")) ? "" + headerCurrency + " " + CustomDesignHandler.getAmountinCommaForm(dobValue) : CustomDesignHandler.getAmountinCommaForm(dobValue)) + "</br>";
                                                                if(colInfo.has("recordcurrency") && (colInfo.getString("recordcurrency").equals("true") || colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex))){ //if symbol(0 / true for old template) then append currency symbol
                                                                    prodData = headerCurrency + " " + CustomDesignHandler.getAmountinCommaForm(dobValue,countryid) + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                                    prodData = headerCurrencyCode + " " + CustomDesignHandler.getAmountinCommaForm(dobValue,countryid) + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                                    prodData = baseCurrencySymbol + " " + CustomDesignHandler.getAmountinCommaForm(dobValue,countryid) + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                                    prodData = baseCurrencyCode + " " + CustomDesignHandler.getAmountinCommaForm(dobValue,countryid) + "</br>";
                                                                } else{
                                                                    prodData = CustomDesignHandler.getAmountinCommaForm(dobValue,countryid) + "</br>";
                                                                }
                                                            } else {
//                                                                prodData = ((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals("true")) && (!colInfo.getString("recordcurrency").equals("")) ? "" + headerCurrency + " " + itemData.get(colInfo.getString("fieldid")).toString() : itemData.get(colInfo.getString("fieldid")).toString()) + "</br>";
                                                                if(colInfo.has("recordcurrency") && (colInfo.getString("recordcurrency").equals("true") || colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex))){//if symbol(0 / true for old template) then append currency symbol
                                                                    prodData = headerCurrency + " " + itemData.get(colInfo.getString("fieldid")).toString() + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                                    prodData = headerCurrencyCode + " " + itemData.get(colInfo.getString("fieldid")).toString() + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                                    prodData = baseCurrencySymbol + " " + itemData.get(colInfo.getString("fieldid")).toString() + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                                    prodData = baseCurrencyCode + " " + itemData.get(colInfo.getString("fieldid")).toString() + "</br>";
                                                                } else{
                                                                    prodData = itemData.get(colInfo.getString("fieldid")).toString() + "</br>";
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    prodData = ("");
                                                }
                                            } else {
//                                            prop.setAlign("left");
                                                if (colInfo.has("basequantitywithuom")) {//case for quantity with uom
                                                    if (colInfo.get("basequantitywithuom").equals("true")) {
                                                        if (colInfo.has("decimalpoint") && !colInfo.getString("decimalpoint").toString().equals("undefined") && !colInfo.getString("decimalpoint").toString().equals("") && !colInfo.getString("decimalpoint").toString().equals("null")) { //decimal point configuration in line item
                                                            decimalpoints = colInfo.getString("decimalpoint");
                                                            String quantityWithUom = itemData.get(colInfo.getString("fieldid")).toString();
                                                            String splitQuantityWithUom[] = quantityWithUom.split(" ");
                                                            String quantity = splitQuantityWithUom[0];
                                                            String UOM = "";
                                                            try {
                                                                UOM = splitQuantityWithUom[1];
                                                            } catch (Exception ex) {
                                                                UOM = "";
                                                            }
                                                            int intValue = Integer.parseInt(decimalpoints);
                                                            double dobValue = Double.parseDouble(quantity);
                                                            double decimalRoundValue = authHandler.round(dobValue, intValue);
                                                            if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue,countryid);
                                                            } else {
                                                                decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                if (intValue == 0) {
                                                                    decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                }
                                                            }
                                                            decimalValue = (decimalValue) + " " + (UOM);
                                                            prodData = (decimalValue) + "</br>";
                                                        }
                                                    }
                                                }
                                            }
                                            if (showtotal) {
                                                if (colInfo.getString("showtotal").equals("true")) {
                                                    if (colInfo.getString("xtype").equals("2")) {
                                                        decimalpoints = colInfo.getString("decimalpoint");
                                                        int intValue = Integer.parseInt(decimalpoints);
                                                        
                                                        String textAlign = "right";
                                                        String textAlignStyle = colInfo.getString("style");
                                                         if(textAlignStyle.indexOf("text-align:") != -1){
                                                            textAlignStyle = textAlignStyle.substring(textAlignStyle.indexOf("text-align:"));
                                                            if(textAlignStyle.indexOf(";") != -1)
                                                                textAlign = textAlignStyle.substring(textAlignStyle.indexOf(":")+1, textAlignStyle.indexOf(";"));
                                                        }
                                                        totalListProp.setAlign(textAlign.trim());
                                                        String caltotal = "0";
                                                        if (colInfo.getString("columnname").equalsIgnoreCase("Job Work Balance Qty") || colInfo.getString("columnname").equalsIgnoreCase("Job Work Consume Qty") || colInfo.getString("columnname").equalsIgnoreCase("Batch Quantity")) {//Apply Show total to Job Work balance Qty and Job Work consume Qty
                                                        String value = itemData.get(colInfo.getString("fieldid")).toString();
                                                            String[] tempStrArr = value.split(CustomDesignerConstants.VALUE_SEPARATOR);
                                                            for (String tempString : tempStrArr) {
                                                                tempString = tempString.trim();
                                                                if (!StringUtil.isNullOrEmpty(tempString)) {
                                                                    caltotal = authHandler.formattedAmount(Double.parseDouble(tempString) + Double.parseDouble(headerTotal.get(headerCnt)), companyid);
                                                                    headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), intValue));
                                                                    totalListProp.setData(headerTotal.get(headerCnt));
                                                                } else {
                                                                    headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(headerTotal.get(headerCnt)), intValue));
                                                                    totalListProp.setData(headerTotal.get(headerCnt));
                                                                }
                                                            }
                                                        } else {
                                                            if (!StringUtil.isNullOrEmpty(itemData.get(colInfo.getString("fieldid")).toString())) {
                                                                caltotal = authHandler.formattedAmount((Double.parseDouble(itemData.get(colInfo.getString("fieldid")).toString())) + Double.parseDouble(headerTotal.get(headerCnt).toString()), companyid);
                                                                headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), intValue));
                                                                totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                            } else {
                                                                headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(headerTotal.get(headerCnt).toString()), intValue));
                                                                totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                            }
                                                        }
                                                    } else {
                                                        if (colInfo.getString("xtype").equals("1")) {
                                                            if (!totalCheck) {
                                                                totalCheck = true;
                                                                totalCheckIndex = headerCnt;
                                                            }
                                                            if (totalCheckIndex == headerCnt) {
                                                                totalListProp.setData(colInfo.optString("totalname", ""));
                                                            } else {
                                                                /*
                                                                 * calculating total for the fields having xtype = 1
                                                                 */
                                                                    if (!StringUtil.isNullOrEmpty(itemData.get(colInfo.getString("fieldid")).toString())) {
                                                                        String totString = itemData.get(colInfo.getString("fieldid")).toString();
                                                                        String caltotal = "0";
                                                                        double total = 0;
                                                                        totalListProp.setAlign("rightDouble.parseDouble(caltotal)");
                                                                        String[] tempStrArr = totString.split("!##");
                                                                        if(isNumeric(tempStrArr[0].trim().replaceAll(",", ""))) {
                                                                            for (int index = 0; index < tempStrArr.length; index++) {
                                                                                String tempString = tempStrArr[index].trim().replaceAll(",", "");
                                                                                total += Double.parseDouble(tempString);
                                                                            }
                                                                            caltotal = authHandler.formattedAmount(total + Double.parseDouble(headerTotal.get(headerCnt).toString()), companyid);
                                                                            headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), Constants.AMOUNT_DIGIT_AFTER_DECIMAL));
                                                                            totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                                        } else {
                                                                            totalListProp.setData(colInfo.optString("totalname", ""));
                                                                        }
                                                                    }
                                                                    else {
                                                                        totalListProp.setData(colInfo.optString("totalname", ""));
                                                                    }
                                                            }

                                                        } else {
                                                            totalListProp.setData(colInfo.optString("totalname", ""));
                                                        }
                                                    }
                                                } else {
                                                    String textAlign = "left";
                                                    String textAlignStyle = colInfo.getString("style");
                                                    if(textAlignStyle.indexOf("text-align:") != -1){
                                                        textAlignStyle = textAlignStyle.substring(textAlignStyle.indexOf("text-align:"));
                                                        if(textAlignStyle.indexOf(";") != -1)
                                                            textAlign = textAlignStyle.substring(textAlignStyle.indexOf(":")+1, textAlignStyle.indexOf(";"));
                                                    }
                                                    totalListProp.setAlign(textAlign.trim());    
                                                    totalListProp.setData(colInfo.optString("totalname", ""));
                                                }
                                            }
//                                        rowDatalist.add(prop);
                                            rowtotallist.set(headerCnt, totalListProp);
                                        } else {
                                            if (itemData.has("Custom_" + colInfo.getString("label"))) {
                                                prodData = (itemData.get("Custom_" + colInfo.getString("label")).toString()) + "</br>";
                                                if (colInfo.getString("xtype").equals("2")) {
//                                                prop.setAlign("right");
                                                    prodData = (authHandler.formattedAmount(Double.parseDouble(itemData.get("Custom_" + colInfo.getString("label")).toString()), companyid)) + "</br>";
                                                } else {
//                                                prop.setAlign("left");
                                                }
                                            } else if (showtotal) {
                                                if (colInfo.getString("showtotal").equals("true") && colInfo.getString("xtype").equals("2")) {
                                                    totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                } else {
                                                    totalListProp.setData(colInfo.optString("totalname", ""));
                                                }
                                                rowtotallist.set(headerCnt, totalListProp);
                                            }
//                                            else {
//                                                prodData = "&nbsp;";
//                                            }
//                                        rowDatalist.add(prop);

                                        }
                                    } else if(type == Constants.lineItemFormulaFieldType) {
                                        String formula = colInfo.getString("formula");// get formula with field label's
                                        String formulaValue = colInfo.getString("formulavalue");// get formula with fieldid's
                                        formula = formulaValue; // use formula with fieldid's for value replacement and calculation
                                        formula = formula.replaceAll("!##", "-").replaceAll("$##", "/");// replace '!##' and '$##' with respective characters in formula if exist('!##' for '-' and '$##' for '/')
                                        String[] fieldsArr = formulaValue.replaceAll("\\(|\\)", "").split("\\+|\\-|\\*|\\/");// Replace brackets '(' and ')' then split fields from formula using operators used
                                        boolean isFromUnitPriceAndAmount = false;
                                        for(int ind = 0; ind < fieldsArr.length; ind++){
                                            String fieldValue = "0";
                                            String field = fieldsArr[ind].trim(); //Remove extra space before and after
                                            field = field.replaceAll("!##", "-");// replace '!##' identifier in formula if exist('!##' for '-')
                                            field = field.replaceAll("$##", "/");// replace '$##' identifier in formula if exist('$##' for '/')

                                            if(field.startsWith("#") && field.endsWith("#")){ // If placeholder

                                                field = field.substring(1, field.length()-1); // Remove # from start and end

                                                if(itemData.has(field)){ // If Default field
                                                    fieldValue = itemData.getString(field);
                                                    if(!displayUnitPriceAndAmountInPrint && !isFromUnitPriceAndAmount){
                                                        JSONObject fieldJsonObj = getJsonValueOfLineField(field, moduleid);
                                                        if(fieldJsonObj.length() > 0){
                                                            isFromUnitPriceAndAmount = fieldJsonObj.optBoolean("isFromUnitPriceAndAmount", false);
                                                        }
                                                    }
                                                } else{
                                                    if (itemData.has("Custom_" + field)) { // If Custom field
                                                        fieldValue = (itemData.get("Custom_" + field).toString());
                                                        if (colInfo.getString("xtype").equals("2")) {
                                                            fieldValue = (authHandler.formattedAmount(Double.parseDouble(itemData.get("Custom_" + field).toString()), companyid));
                                                        } else {
                                                        }
                                                    } else if (showtotal) {
                                                        if (colInfo.getString("showtotal").equals("true") && colInfo.getString("xtype").equals("2")) {
                                                            totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                        } else {
                                                            totalListProp.setData(colInfo.optString("totalname", ""));
                                                        }
                                                        rowtotallist.set(headerCnt, totalListProp);
                                                    } else {
                                                        fieldValue = "0";
                                                    }
                                                }
                                            } else{ // If number
                                                fieldValue = field;
                                            }
                                            formula = formula.replace("#"+field+"#", fieldValue); // replace field value in formula
                                        }

                                        String formulaVal = "";
                                        if(isFromUnitPriceAndAmount && !displayUnitPriceAndAmountInPrint){
                                            prodDataHTML = "<div style=\"" + style + "\">" + CustomDesignerConstants.UNIT_PRICE_AND_AMOUNT_AS_STARS + "</div>";
                                            prodData1 += prodDataHTML;
                                            continue;
                                        }
                                        formulaVal = evaluateExpression(formula, colInfo.getInt("decimalpoint")); // Calculate expression using mval library
                                        /* SDP-11409
                                         * Declaring a double var to calcualte total of formula field column
                                         */
                                        double dblValForTotal = Double.parseDouble(formulaVal); 
                                        if (formulaVal.startsWith("-")) {
                                            if (negativeValueIn == 1) {
                                                //No need to modification
                                            } else if (negativeValueIn == 2) {
                                                formulaVal = formulaVal.replace("-", "");
                                                formulaVal = "(" + formulaVal + ")";
                                            }
                                        }
                                        if ((colInfo.optBoolean("showzerovalueasblank", false))) {
                                            formulaVal = CustomDesignHandler.getZeroAmountAsBlank(formulaVal);
                                        }
                                        if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                            double doubleVal = Double.parseDouble(formulaVal); // convert to double for decimal precision and comma sepertor

                                            if(colInfo.has("recordcurrency") && (colInfo.getString("recordcurrency").equals("true") || colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex))){ //if symbol(0 / true for old template) then append currency symbol
                                                prodData = headerCurrency + " " + CustomDesignHandler.getAmountinCommaDecimal(doubleVal, colInfo.getInt("decimalpoint"), countryid) + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                prodData = headerCurrencyCode + " " + CustomDesignHandler.getAmountinCommaDecimal(doubleVal, colInfo.getInt("decimalpoint"), countryid) + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                prodData = baseCurrencySymbol + " " + CustomDesignHandler.getAmountinCommaDecimal(doubleVal, colInfo.getInt("decimalpoint"), countryid) + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                prodData = baseCurrencyCode + " " + CustomDesignHandler.getAmountinCommaDecimal(doubleVal, colInfo.getInt("decimalpoint"), countryid) + "</br>";
                                            } else{
                                                prodData = CustomDesignHandler.getAmountinCommaDecimal(doubleVal, colInfo.getInt("decimalpoint"), countryid) + "</br>";
                                            }
                                        } else {
                                            if(colInfo.has("recordcurrency") && (colInfo.getString("recordcurrency").equals("true") || colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex))){//if symbol(0 / true for old template) then append currency symbol
                                                prodData = headerCurrency + " " + formulaVal + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                prodData = headerCurrencyCode + " " + formulaVal + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                prodData = baseCurrencySymbol + " " + formulaVal + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                prodData = baseCurrencyCode + " " + formulaVal + "</br>";
                                            } else{
                                                prodData = formulaVal + "</br>";
                                            }
                                        }
                                        /*
                                         * SDP-11409
                                         * Caluation of total of formula field column
                                         */
                                        if (showtotal) {
                                            String textAlign = "right";
                                            String textAlignStyle = colInfo.getString("style");
                                             if(textAlignStyle.indexOf("text-align:") != -1){
                                                textAlignStyle = textAlignStyle.substring(textAlignStyle.indexOf("text-align:"));
                                                if(textAlignStyle.indexOf(";") != -1)
                                                    textAlign = textAlignStyle.substring(textAlignStyle.indexOf(":")+1, textAlignStyle.indexOf(";"));
                                            }
                                            totalListProp.setAlign(textAlign.trim());
                                            if (colInfo.getString("showtotal").equals("true")) {
                                                if (colInfo.getString("xtype").equals("2")) {
                                                    decimalpoints = colInfo.getString("decimalpoint");
                                                    int intValue = Integer.parseInt(decimalpoints);
                                                    String caltotal = "0";
                                                    caltotal = authHandler.formattedAmount(dblValForTotal + Double.parseDouble(headerTotal.get(headerCnt).toString()), companyid);
                                                    headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), intValue));
                                                    totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                 }
                                            } else {
                                                totalListProp.setData(colInfo.optString("totalname", ""));
                                            }
                                        }
                                        rowtotallist.set(headerCnt, totalListProp);

                                    } else if (type == 3) {
                                        if (itemData.has(colInfo.getString("fieldid"))) {
                                            prodData = "<img style='width:100%;height:100%' src='" + itemData.getString(colInfo.getString("fieldid")) + "'></img>";
                                        } else {
                                            prodData = "<img style='width:100%;height:100%' src='../images/s.gif'></img>";
                                        }
                                        totalListProp.setData(colInfo.optString("totalname", ""));
                                        rowtotallist.set(headerCnt, totalListProp);

                                    } else {
                                        prodData = colInfo.optString("label", "");
                                    }
                                    String fieldId = colInfo.optString("fieldid", " ");
                                    String dimensionValue = colInfo.optString("dimensionvalue", "2");
                                    String valueSeparator = colInfo.optString("valueseparator", "linebreak");
                                    if (!StringUtil.isNullOrEmpty(prodData)) {
                                        if (dimensionValue.equals("0") && prodData.contains("<br>")) {//Show only Title of dimension 
                                            prodData = prodData.substring(0, prodData.indexOf("<br>"));
                                        } else if (dimensionValue.equals("1") && prodData.contains("<br>")) {//Show only description of dimension
                                            prodData = prodData.substring(prodData.indexOf("<br>"), prodData.length()-1);
                                        }
                                        if(colInfo.optString("fieldid", " ").equals(CustomDesignerConstants.imageTag) && prodData.contains("s.gif")){
                                            prodDataHTML = "<div></div>";
                                        } else{
                                            // Replace \n with <br> tag for representation of value in print
                                            /*
                                             * SDP-11276
                                             * to show < appended text in print    
                                             */ 
                                            prodData = prodData.replaceAll("<br>","#br#");
                                            prodData = prodData.replaceAll("</br>","#br#");
                                            if (prodData.contains("!#isrichtext#!")) {
                                                prodData = prodData.replaceAll("!#isrichtext#!", "");
                                            } else if(extraCompanyPreferences.getProddiscripritchtextboxflag() == 2) {
                                                // Nothing to change in prodData
                                            } else if(colInfo.optString("xtype", "").equals("1")){  //SDP-13488-product Desciption contains < encoded with &#60; 
                                                prodData = prodData.replaceAll("<", "&#60;");
                                            }
                                            prodData = prodData.replaceAll("#br#","<br>");
                                            if(colInfo.optInt("xtype", 1) != CustomDesignerConstants.RICH_TEXT_AREA) {
                                                prodData = prodData.replaceAll("\\n","<br>");
                                            }
                                            if (fieldId.equalsIgnoreCase(CustomDesignerConstants.SerialNumber) || fieldId.equalsIgnoreCase(CustomDesignerConstants.IN_Loc)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.BatchNumber) || fieldId.equalsIgnoreCase("wareHouse")
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.SR_Batch_Exp_Date) || fieldId.equalsIgnoreCase(CustomDesignerConstants.SR_Asset)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.SR_Serial_Exp_Date) || fieldId.equalsIgnoreCase(CustomDesignerConstants.SR_Batch_SubQty)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.SerialNumberExp)||fieldId.equalsIgnoreCase(CustomDesignerConstants.BatchNumberExp) 
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.JobWorkChallanDate) || fieldId.equalsIgnoreCase(CustomDesignerConstants.JobWorkBalanceQty) 
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.JobWorkConsumeQty) || fieldId.equalsIgnoreCase(CustomDesignerConstants.Location)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.BatchQuantity) || fieldId.equalsIgnoreCase(CustomDesignerConstants.ManufacturingDate)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.ManufacturingDate_Batch) || fieldId.equalsIgnoreCase(CustomDesignerConstants.ManufacturingDate_Serial)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.LineLevelTax) || fieldId.equalsIgnoreCase(CustomDesignerConstants.LineLevelTaxAmount)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.LineLevelTaxPercent)|| fieldId.equalsIgnoreCase(CustomDesignerConstants.QUANTITY_PER_PACKAGE)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.GROSS_WEIGHT) || fieldId.equalsIgnoreCase(CustomDesignerConstants.PACKAGE_MEASUREMENT) 
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.PACKAGE_NAME) || fieldId.equalsIgnoreCase(CustomDesignerConstants.SR_SerialNumber) 
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.GR_Loc)) {
                                                    prodData=replaceWithValueSeperator(prodData,valueSeparator);
                                            }
                                            prodDataHTML = "<div style=\"" + style + "\">" + prodData + "</div>";
                                        }

                                    }
                                    if (fieldcnt == fieldsLength - 1) {
                                        prodData1 += prodDataHTML;
                                    } else {
                                        prodData1 += prodDataHTML + "<!-- -->";
                                        prodDataHTML="";
                                    }
                                }
                                prop.setData(prodData1);
                                prop.setValign(valign);
                                rowDatalist.add(prop);
                            }
                            prodlist.add(rowDatalist);
                        }
                    }
                    if(!isTotalNamePresent){
                        CustomDesignLineItemProp totalRowCol = (CustomDesignLineItemProp) rowtotallist.get(0);
                        totalRowCol.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                        rowtotallist.set(0, totalRowCol);
                    }
                    totallist.add(rowtotallist);
//                    int lineItemTopSpacing = lineItem_YAxis - aboveLineItemObject_YAxis;
                    ArrayList finalSummaryData = new ArrayList();
                    if (isLineItemSummaryTable) {
//                        context.put("issummary", isLineItemSummaryTable);
                        org.jsoup.nodes.Document jsoupSummaryTableDoc = Jsoup.parse(buildhtml);
                        int summaryTableColCnt = LineItemSummaryTableInfo.getInt("columnCount");
                        int summaryTableRowCnt = LineItemSummaryTableInfo.getInt("rowCount");
                        int totalLineTableColumnCnt = headerlist.size();
                        int emptyCells = totalLineTableColumnCnt - summaryTableColCnt;

                        org.jsoup.nodes.Element summaryTable = jsoupSummaryTableDoc.getElementById("summaryTableID");
                        Elements summaryTableRows = summaryTable.getElementsByTag("tr");
                        for (org.jsoup.nodes.Element row : summaryTableRows) {
                            Elements cells = row.select("td");
                            ArrayList<SummaryTableCellProperty> summaryRowData = new ArrayList();
                            for (int blankcellcnt = 0; blankcellcnt < emptyCells; blankcellcnt++) {
                                SummaryTableCellProperty prop = new SummaryTableCellProperty();
                                prop.setData("");
                                summaryRowData.add(prop);
                            }
                            if (cells.size() > 0) {
                                for (org.jsoup.nodes.Element cell : cells) {
                                    String style = cell.attr("style");
                                    String data = cell.text();
                                    String colspan = cell.attr("colspan");
                                    String rowspan = cell.attr("rowspan");
                                    SummaryTableCellProperty prop = new SummaryTableCellProperty();
                                    prop.setColspan((colspan != null) ? colspan : "");
                                    prop.setRowspan((rowspan != null) ? rowspan : "");
                                    prop.setStyle((style != null) ? style : "");
                                    prop.setData((data != null) ? data : "");
                                    summaryRowData.add(prop);
                                }
                            }
                            finalSummaryData.add(summaryRowData);
                        }
//                        context.put("summaryTable", finalSummaryData);
//                        context.put("issummarytable", finalSummaryData.size()>0 ? true : false);
                    }
                    String margin = marginTop + " " + marginRight + " " + marginBottom + " " + marginLeft + " ";
                    //get firefox mozilla browser version and put it in line item table header properties
                    if(!StringUtil.isNullOrEmpty(requestObj.optString("browserVersion"))){
                        LineItemHeaderProperties.put("browserVersion", requestObj.optString("browserVersion"));
                    }
                    if ( islineitemrepeat ) {    // line Item repeat flag is on for line table then creating table separately for each product.
                        int productCount = prodlist.size();
                        String lineItemHTMLTemp = "";
                        List tempProductList = null;
                        for ( int productIndex = 0 ; productIndex < productCount ; productIndex++ ) {
                            tempProductList = new ArrayList();
                            tempProductList.add(prodlist.get(productIndex));
                            lineItemHTMLTemp = CustomDesignHandler.getLineDataHTMLByVelocityEngineNew(velocityEngine, tempProductList, headerlist, top, left, tablewidth, showtotal, totallist,
                                pagelayoutproperty, "0px", finalSummaryData, LineItemHeaderProperties, widthOfTable, margin, lineItemFirstRowHTML, lineItemLastRowHTML, isFirstRowPresent, isLastRowPresent,isExtendLineItem);
                            linetemhtml += lineItemHTMLTemp;
                        }
                    } else {
                        //If line table is empty then don't put line table in print
                        if(prodlist.size() > 0){
                            linetemhtml = CustomDesignHandler.getLineDataHTMLByVelocityEngineNew(velocityEngine, prodlist, headerlist, top, left, tablewidth, showtotal, totallist,
                                    pagelayoutproperty, "0px", finalSummaryData, LineItemHeaderProperties, widthOfTable, margin, lineItemFirstRowHTML, lineItemLastRowHTML, isFirstRowPresent, isLastRowPresent,isExtendLineItem);
                        } else{
                            linetemhtml = "";
                        }
                    }
//                    itemListElement.html(linetemhtml);
                    Set<String> classSet = itemListElement.classNames();
                    itemListElement.removeAttr("class");
                    itemListElement.removeAttr("style");
                    if ( classSet.contains("joinnextrow") ) {
                        itemListElement.addClass("joinnextrow");
                    }
                    if ( islineitemrepeat ) {   // adding page break class for eparated line item table.
                        itemListElement.addClass("separatelineitem");
                    }
                    itemListElement.html(linetemhtml);
                    if(isPrePrinted){
                        itemListElement.attr("style", lineTableColumnCSS);
                    }
                    buildhtml = jsoupDoc.body().html();
                }

                /*
                 * append Bottom Items
                 */
//                bottomDiv = "";
            }
//            if (!checkfooterflag) {
//                buildhtml += bottomDiv;
//                buildhtml = CustomDesignHandler.replaceImagePathWithAbsolute(request.getParameter("cdomain"), buildhtml);
////                    org.jsoup.nodes.Document jsoupDoc1 = Jsoup.parse(buildhtml);
////                    jsoupDoc1.getElementsByAttribute("id").removeAttr("id");
////
////                    buildhtml = jsoupDoc1.body().html();
////                    buildhtml = " <div style='position:relative; width:" + CustomDesignHandler.pageWidth + ";font-family:" + fontstylevalue + "'>" + buildhtml + "</div>";
////                    if (invoiceIDList.size() > 1) // if multiple records then need to add horizontal linein between templates
////                    {
////                        buildhtml += "<hr style='margin-top: 600px;'>";
////                    }
//                finalBuildHtml += buildhtml;
//            }
            finalBuildHtml += buildhtml;
            finalBuildHtml = CustomDesignHandler.replaceImagePathWithAbsolute(requestObj.optString("cdomain"), finalBuildHtml);
            /*
             * Replace placeholder values for Page Footer if any
             */
            if (!StringUtil.isNullOrEmpty(pagefootersqlquery)) {
                jArr = new JSONArray();
                if (!StringUtil.isNullOrEmpty(pagefooterjson)) {
                    jArr = new JSONArray(pagefooterjson);
                }
                default_headers = getDefaultHeaderName_Xtype(customDesignDAOObj, jArr);

                invoiceCols = new ArrayList();
                m = Pattern.compile("#(.+?)#").matcher(pagefootersqlquery);
                while (m.find()) {
                    invoiceCols.add(m.group(1));
                }
                pagefooterhtml = replaceGlobalLevelFields(pagefooterhtml, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, transactionId, pagefootersqlquery, invoiceCols, df, default_headers, json, false, negativeValueIn,countryid,allFieldParameters);
            }
            pagefooterhtml = CustomDesignHandler.replaceImagePathWithAbsolute(requestObj.optString("cdomain"), pagefooterhtml);

            //Replace placeholder values for Page Header if any
            if (!StringUtil.isNullOrEmpty(pageheadersqlquery)) {
                jArr = new JSONArray();
                if (!StringUtil.isNullOrEmpty(pageheaderjson)) {
                    jArr = new JSONArray(pageheaderjson);
                }
                default_headers = getDefaultHeaderName_Xtype(customDesignDAOObj, jArr);

                invoiceCols = new ArrayList();
                m = Pattern.compile("#(.+?)#").matcher(pageheadersqlquery);
                while (m.find()) {
                    invoiceCols.add(m.group(1));
                }
                pageheaderhtml = replaceGlobalLevelFields(pageheaderhtml, customDesignDAOObj,accCommonTablesDAO, moduleid,companyid, transactionId, pageheadersqlquery, invoiceCols, df, default_headers, json, false, negativeValueIn,countryid,allFieldParameters);
            }
            if (isDefaultTemplate) {
                pageheaderhtml = CustomDesignHandler.replaceDefaultImagePathWithAbsolute(requestObj.optString("cdomain"), companyid, pageheaderhtml);
            } else {
                pageheaderhtml = CustomDesignHandler.replaceImagePathWithAbsolute(requestObj.optString("cdomain"), pageheaderhtml);
            }
            /*
             * Final call to add footer and body content in PDF
             */
//            if (!checkfooterflag) {
////                org.jsoup.nodes.Document jsoupDoc1 = Jsoup.parse(finalBuildHtml);
////                Elements itemListElement1 = jsoupDoc1.getElementsByAttribute("id").removeAttr("id");
////                finalBuildHtml = jsoupDoc1.body().html();
//            } else {//check footer flag
//                finalBuildHtml = topDiv + linetemhtml + bottomDiv;
//                finalBuildHtml = buildhtml;
//                finalBuildHtml = CustomDesignHandler.replaceImagePathWithAbsolute(request.getParameter("cdomain"), finalBuildHtml);
//            }
            jArr = new JSONArray(json);
            StringBuilder finalRowsInTr = new StringBuilder();
            for (int cnt = 0; cnt < jArr.length(); cnt++) {
//                JSONArray colJArr = jArr.getJSONObject(cnt).getJSONArray("data");
                jsoupDoc = Jsoup.parse(finalBuildHtml);
                if (!jArr.getJSONObject(cnt).optBoolean("isheader", false) && !jArr.getJSONObject(cnt).optBoolean("isfooter", false)) {
                    org.jsoup.nodes.Element footerElement = jsoupDoc.getElementById(jArr.getJSONObject(cnt).getString("id"));
                    if (footerElement != null) {
                        finalRowsInTr = finalRowsInTr.append("<tr><td>").append(footerElement.outerHtml()).append("</td></tr>");
                    }
                }
            }
            
            if (StringUtil.isNullOrEmpty(fontstylevalue)) {
                fontstylevalue = "sans-serif";
            }
            JSONObject extLIJobj = new JSONObject();
            extLIJobj.put("isExtendLineItem",isExtendLineItem);
            extLIJobj.put("isPrePrinted",isPrePrinted);
            extLIJobj.put("isExtendedGlobalTable",isExtendedGlobalTable);
            extLIJobj.put("pageSize",isExtendedGlobalTable?pageSizeForExtGT:pageSize);
            extLIJobj.put("pageOrientation",isExtendedGlobalTable?pageOrientationForEXTGT:pageOrientation);
            extLIJobj.put("adjustPageHeight", adjustPageHeight);
            extLIJobj.put(CustomDesignerConstants.IS_MULTIPLE_TRANSACTION, isMultipleTransaction);
            String buildHtml = finalRowsInTr.toString();
            buildHtml = buildHtml.replaceAll("\\s*\n\\s*<!-- -->\\s*\n\\s*", "");
            returnHashMap.put("buildHtml", buildHtml);
            returnHashMap.put("pagefooterhtml", pagefooterhtml);
            returnHashMap.put("fontstylevalue", fontstylevalue);
            returnHashMap.put("pageheaderhtml", pageheaderhtml);
            returnHashMap.put("pagefontsize", pagefontsize);
            returnHashMap.put("extLIJobj", extLIJobj.toString());
//            CustomDesignHandler.writeFinalDataToFileNew(fileName + ".pdf", fileType, buildHtml, pagelayoutproperty, pagefooterhtml, response, moduleid, recordids, request, fontstylevalue, pageheaderhtml, checkfooterflag, pagefontsize);
        } catch (JSONException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseErrorException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MethodInvocationException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnHashMap;
    }
    
    public static HashMap exportTemplateWithNewDesign(int moduleid, String transactionId, String json, String html, String sqlquery, JSONArray lineItemsArr, String templateSubtype,
            String pageheaderhtml, String pagefooterhtml, String pagefooterjson, String pagefootersqlquery, DateFormat df, String headerCurrency, String headerCurrencyCode, String linkedreferencenumber,
            String pagelayoutproperty, String pageheaderjson, String pageheadersqlquery, String recordids, String fileType, String fileName, boolean checkfooterflag,
            JSONObject requestJobj, boolean isConsignment, boolean isJobOrderFlow, boolean isDefaultTemplate, String companyid, accAccountDAO accAccountDAOobj, AccountingHandlerDAO accountingHandlerDAOobj, VelocityEngine velocityEngine, CustomDesignDAO customDesignDAOObj,AccCommonTablesDAO accCommonTablesDAO, AccInvoiceServiceDAO accInvoiceServiceDAOObj,AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAOObj,String baseCurrencySymbol,String baseCurrencyCode) {
        HashMap<String, String> returnHashMap = new HashMap<String, String>();
        try {
            boolean isLineItemPresent = false, isGstIncluded = false;
            JSONArray jArr = new JSONArray();
            JSONArray numberFieldArray = new JSONArray();
            JSONObject jrepeat = new JSONObject();
            String buildhtml = "", finalBuildHtml = "", linetemhtml = "", bottomDiv = "", topDiv = "";
            String alignment = "", backgroundcolor = "", changedlabel = "", headerStyle = "";
            String fontstylevalue = "";
            String pagefontsize = "";
            boolean isPrePrinted = false;
            boolean isMultipleTransaction = false;
            JSONArray customizedlineItems = new JSONArray();
            JSONArray customizedheaderItems = new JSONArray();
            JSONArray groupingItems = new JSONArray();
            JSONArray groupingAfterItems = new JSONArray();
            JSONObject LineItemHeaderProperties = new JSONObject();
            JSONObject AllDetailsTableHeaderProperties = new JSONObject();
            JSONObject allFieldParameters = null;
            int widthOfTable = 100, dt_widthOfTable = 100;
            String marginTop = "";
            String marginBottom = "";
            String marginLeft = "";
            String marginRight = "";
            String dt_marginTop = "", dt_marginBottom = "", dt_marginLeft = "", dt_marginRight = "";
            String totalItems = "";
            
            List globalCustomFieldList = new ArrayList<>();
            
            boolean isExtendedGlobalTable = false;
            boolean isOutstandingTablePresent = false;
            boolean isOutstandingMultipleCurrency = false;
            int negativeValueIn = 0;
            int countryid = 0;
            String gcurrencyid = "";
            KwlReturnObject companyobj = accountingHandlerDAOobj.getObject("com.krawler.common.admin.Company", companyid);
            if(companyobj != null){
                Company companydata = (Company) companyobj.getEntityList().get(0);
                if(companydata != null && companydata.getCountry()!= null && !StringUtil.isNullOrEmpty(companydata.getCountry().getID())){
                    countryid = Integer.parseInt(companydata.getCountry().getID());
                }
                gcurrencyid = companydata.getCurrency().getCurrencyID();
            }
            /**
             * get value for showing negative amount
             */
            if (!StringUtil.isNullOrEmpty(pagelayoutproperty)) {
                JSONArray jArr1 = new JSONArray(pagelayoutproperty);
                for (int cnt = 0; cnt < jArr1.length(); cnt++) {
                    JSONObject jObj = jArr1.getJSONObject(cnt);
                    if (!StringUtil.isNullOrEmpty(jObj.optString("pagelayoutsettings", ""))) {
                        JSONObject pagePropertyArray = new JSONObject(jObj.optString("pagelayoutsettings", ""));
                        negativeValueIn = pagePropertyArray.optInt("negativeValueIn", 2);
                    }
                }
            }
            // If negative value combo have value 0 (none) then get value from company preferences
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
            if (negativeValueIn == 0) {
                negativeValueIn = extraCompanyPreferences.getNegativeValueIn();
            }
            // Fetching important parameters required for all Fields (like value separator, default value etc.)
            allFieldParameters = getFieldParameters(new JSONObject("{JSON:" +json+"}"));
            
            String documentCurrencyId = gcurrencyid;
            double reverseExchangeRate = 1;
            KWLCurrency documentCurrencyObj = null;
            KWLCurrency baseCurrencyObj = null;
            
            int countryLanguageId = Constants.OtherCountryLanguageId; // 0
            if (extraCompanyPreferences.isAmountInIndianWord()) {
                countryLanguageId = Constants.CountryIndiaLanguageId; //for india id is 1;
            }
            
            if (!StringUtil.isNullOrEmpty(gcurrencyid)) {
                KwlReturnObject resultObj = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), gcurrencyid);
                baseCurrencyObj = (KWLCurrency) resultObj.getEntityList().get(0);
            }
            
            //Document currency
            for (int i = 0; i < lineItemsArr.length(); i++) {
                if (lineItemsArr.get(i) != null && lineItemsArr.get(i).getClass().equals(JSONObject.class) && lineItemsArr.getJSONObject(i).optBoolean("summarydata", false)) {
                    documentCurrencyId = lineItemsArr.getJSONObject(i).optString(CustomDesignerConstants.DOCUMENT_CURRENCY_ID);
                    if (StringUtil.isNullOrEmpty(documentCurrencyId)) {
                        documentCurrencyId = gcurrencyid;
                    }
                    KwlReturnObject resultObj = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), documentCurrencyId);
                    documentCurrencyObj = (KWLCurrency) resultObj.getEntityList().get(0);
                    reverseExchangeRate = lineItemsArr.getJSONObject(i).optDouble(CustomDesignerConstants.CustomDesignExchangeRate_fieldTypeId, 1);
                    break;
                }
            }
            
            if (!StringUtil.isNullOrEmpty(json)) {
                jArr = new JSONArray(json);
                boolean bold = false, italic = false, underline = false;
                boolean dt_bold = false, dt_italic = false, dt_underline = false;
                String fontsize = "", align = "center", bordercolor = "";
                String dt_fontsize = "", dt_align = "center", dt_bordercolor = "";
                for (int cnt = 0; cnt < jArr.length(); cnt++) {
                    JSONArray colJArr = jArr.getJSONObject(cnt).getJSONArray("data");
                    for (int colcnt = 0; colcnt < colJArr.length(); colcnt++) {
                        JSONArray itemsJArr = colJArr.getJSONObject(colcnt).getJSONArray("data");
                        for (int itemCnt = 0; itemCnt < itemsJArr.length(); itemCnt++) {
                            JSONObject jObj = itemsJArr.getJSONObject(itemCnt);
                            if (jObj.optInt("fieldType", 0) == 11) {
                                JSONObject jSONObject = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0);
                                fontsize = jSONObject.optString("fontsize", "");
                                align = jSONObject.optString("align", "center");
                                bordercolor = jSONObject.optString("bordercolor", "");
                                bold = jSONObject.optBoolean("bold", false);
                                italic = jSONObject.optBoolean("italic", false);
                                underline = jSONObject.optBoolean("underline", false);
                                widthOfTable = jObj.optInt("tablewidth", 100);
                                marginTop = jObj.optString("marginTop", "");
                                marginBottom = jObj.optString("marginBottom", "");
                                marginLeft = jObj.optString("marginLeft", "");
                                marginRight = jObj.optString("marginRight", "");
                                /*
                                 * get custom fields id from Summary table
                                 */
                                if (!StringUtil.isNullOrEmpty(jSONObject.optString("cellplaceholder", "[]")) ) {
                                    JSONArray cellplaceObjectArray = new JSONArray(jSONObject.optString("cellplaceholder", "[]"));
                                    for (int innerplacecnt = 0; innerplacecnt < cellplaceObjectArray.length(); innerplacecnt++) {
                                        JSONObject cellplace = cellplaceObjectArray.getJSONObject(innerplacecnt);
                                        if (cellplace.optBoolean("customfield", false)) {
                                            globalCustomFieldList.add(cellplace.optString("placeholder", ""));
                                        }
                                    }
                                }
                                /*
                                 * get custom fields id used in line item global row's
                                 */
                                JSONArray tableJsonArray = new JSONArray(jObj.optString("data", "[]"));
                                //data of global rows of line item table is at 1(for first global row) and 2(for last global row) position in json. So starting counter from 1.
                                for (int globalrow = 1; globalrow < tableJsonArray.length();globalrow++) {
                                    JSONArray globalRowArray = tableJsonArray.getJSONArray(globalrow);
                                    for (int placecnt = 0; placecnt < globalRowArray.length(); placecnt++) {
                                        JSONObject place = globalRowArray.getJSONObject(placecnt);
                                        if (!StringUtil.isNullOrEmpty(place.optString("data", ""))) {
                                            JSONArray globalRowFieldArray = new JSONArray(place.optString("data", ""));
                                            for (int innerplacecnt = 0; innerplacecnt < globalRowFieldArray.length(); innerplacecnt++) {
                                                JSONObject cellplace = globalRowFieldArray.getJSONObject(innerplacecnt);
                                                /*
                                                 * Check for line item global row's contains global table
                                                 */
                                                if (cellplace.optInt("fieldType", 0) == 12) {
                                                    if (!StringUtil.isNullOrEmpty(cellplace.optString("cellplaceholder", "[]"))) {
                                                        /*
                                                         * get custom fields id used in line item global row's contains global table
                                                         */
                                                        JSONArray cellplaceObjectArray = new JSONArray(cellplace.optString("cellplaceholder", "[]"));
                                                        for (int globaltableplacecnt = 0; globaltableplacecnt < cellplaceObjectArray.length(); globaltableplacecnt++) {
                                                            JSONObject globalcellplace = cellplaceObjectArray.getJSONObject(globaltableplacecnt);
                                                            if (globalcellplace.optBoolean("customfield", false)) {
                                                                globalCustomFieldList.add(globalcellplace.optString("placeholder", ""));
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if (cellplace.optBoolean("customfield", false)) {
                                                        globalCustomFieldList.add(cellplace.optString("placeholder", ""));
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            if (jObj.optInt("fieldType", 0) == 12 && !isOutstandingTablePresent) { 
                                isOutstandingTablePresent = !StringUtil.isNullOrEmpty(jObj.optString("isbalanceoutstanding",""))?Boolean.parseBoolean(jObj.optString("isbalanceoutstanding","")):false;
                                isOutstandingMultipleCurrency = !StringUtil.isNullOrEmpty(jObj.optString("isOutstandingMultipleCurrency",""))?Boolean.parseBoolean(jObj.optString("isOutstandingMultipleCurrency","")):false;
                               
                                JSONArray cellplaceObjectArray =  new JSONArray(jObj.optString("cellplaceholder", "[]"));
                                for(int innerplacecnt=0; innerplacecnt < cellplaceObjectArray.length(); innerplacecnt++) {
                                    JSONObject cellplace = cellplaceObjectArray.getJSONObject(innerplacecnt);
                                    if(cellplace.optBoolean("customfield", false)) {
                                        globalCustomFieldList.add(cellplace.optString("placeholder", ""));
                                    }
                                }
                            }
                            if (jObj.optInt("fieldType", 0) == 14) {
                                JSONArray cellPlaceHolderArray = new JSONArray(jObj.optString("data", "[]"));
                                for(int placecnt=0; placecnt < cellPlaceHolderArray.length(); placecnt++) {
                                    if(cellPlaceHolderArray.getJSONObject(placecnt).optBoolean("customfield", false)) {
                                        globalCustomFieldList.add(cellPlaceHolderArray.getJSONObject(placecnt).optString("placeholder", ""));
                                    }
                                }
                               
                            }
                            //Details Table
                            if (jObj.optInt("fieldType", 0) == 20) {
                                //get Details Table header properties
                                dt_fontsize = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optString("fontsize", "");
                                dt_align = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optString("align", "center");
                                dt_bordercolor = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optString("bordercolor", "");
                                dt_bold = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optBoolean("bold", false);
                                dt_italic = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optBoolean("italic", false);
                                dt_underline = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optBoolean("underline", false);
                                dt_widthOfTable = jObj.optInt("tablewidth", 100);
                                dt_marginTop = jObj.optString("marginTop", "");
                                dt_marginBottom = jObj.optString("marginBottom", "");
                                dt_marginLeft = jObj.optString("marginLeft", "");
                                dt_marginRight = jObj.optString("marginRight", "");
                                //get id of details table
                                String detailsTableId = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).optString("id", "");
                                //set header properties of Details Tbale in JSONObject
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_margin", dt_marginTop+" "+dt_marginRight+" "+dt_marginBottom+" "+dt_marginLeft);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_width", dt_widthOfTable);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_fontsize", dt_fontsize);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_align", dt_align);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_bordercolor", dt_bordercolor);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_bold", dt_bold);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_italic", dt_italic);
                                AllDetailsTableHeaderProperties.put(detailsTableId+"_underline", dt_underline);
                            }
                            if (jObj.has("fieldType") && !StringUtil.isNullOrEmpty(jObj.getString("fieldType"))) {
                                if (Integer.parseInt(jObj.getString("fieldType")) == 2) {
                                    if (jObj.has("label") && !StringUtil.isNullOrEmpty(jObj.getString("label"))) {
                                        JSONObject numberField = new JSONObject();
                                        numberField.put("label", jObj.getString("label"));
                                        numberField.put("fieldType", jObj.getString("fieldType"));
                                        numberField.put("decimalPrecision", jObj.optString("decimalPrecision", "2"));
                                        numberFieldArray.put(numberField);
                                        if(jObj.optBoolean("customfield", false)) {
                                            globalCustomFieldList.add(jObj.optString("placeholder", ""));
                                        }
                                    }
                                } else if (Integer.parseInt(jObj.getString("fieldType")) == 17) {
                                    if (jObj.has("label") && !StringUtil.isNullOrEmpty(jObj.getString("label"))) {
                                        if(jObj.optBoolean("customfield", false)) {
                                            globalCustomFieldList.add(jObj.optString("placeholder", ""));
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                LineItemHeaderProperties.put("fontsize", fontsize);
                LineItemHeaderProperties.put("align", align);
                LineItemHeaderProperties.put("bordercolor", bordercolor);
                LineItemHeaderProperties.put("bold", bold);
                LineItemHeaderProperties.put("italic", italic);
                LineItemHeaderProperties.put("underline", underline);
            }
            int lineItem_YAxis = 0;
            int lineitemheight = 0;
            int lineitemwidth = 850;
            int aboveLineItemObject_YAxis = 0;

//                HashMap<String, Integer> bottomItems = new HashMap<String, Integer>();
            List<String> invoiceCols = new ArrayList();
            Matcher m = Pattern.compile("#(.+?)#").matcher(sqlquery);
            while (m.find()) {
                invoiceCols.add(m.group(1));
            }

            boolean isLineItemSummaryTable = false;
            JSONObject LineItemSummaryTableInfo = new JSONObject();
            String lineitemTableParentRowID = "";

            String lineItemFirstRowHTML = "";
            String lineItemLastRowHTML = "";
            String pageSize = "a4";
            String pageSizeForExtGT = "a4";
            String pageOrientation = "portrait";
            String pageOrientationForEXTGT = "portrait";
            String adjustPageHeight = "0";
            String sortField = "";
            String sortFieldXtype = "";
            String sortOrder = "";
            boolean isLastRowPresent = false;
            boolean isFirstRowPresent = false;
            boolean isGroupingRowPresent = false;
            boolean isGroupingApplied = false;
            boolean isGroupingAfterRowPresent = false;
            boolean islineitemrepeat = false;
            boolean isconsolidated = false;
            boolean isExtendLineItem = false;

            HashMap<String, Object> lineitemmap = CustomDesignHandler.getLineItemsDetails(jArr);
            if (lineitemmap.containsKey(Constants.Customedlineitems) && lineitemmap.get(Constants.Customedlineitems) != null) {
                customizedlineItems = (JSONArray) lineitemmap.get(Constants.Customedlineitems);
            }
            if (lineitemmap.containsKey("customizedheaderItems") && lineitemmap.get("customizedheaderItems") != null) {
                customizedheaderItems = (JSONArray) lineitemmap.get("customizedheaderItems");
                    }
            if (lineitemmap.containsKey(Constants.lineitemHeight) && lineitemmap.get(Constants.lineitemHeight) != null) {
                lineitemheight = (Integer) lineitemmap.get(Constants.lineitemHeight);
            }
            if (lineitemmap.containsKey("groupingItems") && lineitemmap.get("groupingItems") != null) {
                groupingItems = (JSONArray) lineitemmap.get("groupingItems");
            }
            if (lineitemmap.containsKey("groupingAfterItems") && lineitemmap.get("groupingAfterItems") != null) {
                groupingAfterItems = (JSONArray) lineitemmap.get("groupingAfterItems");
            }
            if (lineitemmap.containsKey(Constants.lineitemWidth) && lineitemmap.get(Constants.lineitemWidth) != null) {
                lineitemwidth = (Integer) lineitemmap.get(Constants.lineitemWidth);
            }
            if (lineitemmap.containsKey(Constants.isLineItemPresent) && lineitemmap.get(Constants.isLineItemPresent) != null) {
                isLineItemPresent = (Boolean) lineitemmap.get(Constants.isLineItemPresent);
            }
            if (lineitemmap.containsKey(Constants.isLineItemSummaryTable) && lineitemmap.get(Constants.isLineItemSummaryTable) != null) {
                isLineItemSummaryTable = (Boolean) lineitemmap.get(Constants.isLineItemSummaryTable);
            }
            if (lineitemmap.containsKey(Constants.LineItemSummaryTableInfo) && lineitemmap.get(Constants.LineItemSummaryTableInfo) != null) {
                LineItemSummaryTableInfo = new JSONObject(lineitemmap.get(Constants.LineItemSummaryTableInfo).toString());
            }
            if (lineitemmap.containsKey(Constants.lineitemTableParentRowID) && lineitemmap.get(Constants.lineitemTableParentRowID) != null) {
                lineitemTableParentRowID = (String) lineitemmap.get(Constants.lineitemTableParentRowID);
            }
            if (lineitemmap.containsKey(Constants.lineItemFirstRowHTML) && lineitemmap.get(Constants.lineItemFirstRowHTML) != null) {
                lineItemFirstRowHTML = (String) lineitemmap.get(Constants.lineItemFirstRowHTML);
            }
            if (lineitemmap.containsKey(Constants.lineItemLastRowHTML) && lineitemmap.get(Constants.lineItemLastRowHTML) != null) {
                lineItemLastRowHTML = (String) lineitemmap.get(Constants.lineItemLastRowHTML);
            }
            if (lineitemmap.containsKey("isFirstRowPresent") && lineitemmap.get("isFirstRowPresent") != null) {
                isFirstRowPresent = Boolean.parseBoolean(lineitemmap.get("isFirstRowPresent").toString());
            }
            if (lineitemmap.containsKey("isLastRowPresent") && lineitemmap.get("isLastRowPresent") != null) {
                isLastRowPresent = Boolean.parseBoolean(lineitemmap.get("isLastRowPresent").toString());
            }
            if (lineitemmap.containsKey("isGroupingRowPresent") && lineitemmap.get("isGroupingRowPresent") != null) {
                isGroupingRowPresent = Boolean.parseBoolean(lineitemmap.get("isGroupingRowPresent").toString());
            }
            if (lineitemmap.containsKey("isGroupingApplied") && lineitemmap.get("isGroupingApplied") != null) {
                isGroupingApplied = Boolean.parseBoolean(lineitemmap.get("isGroupingApplied").toString());
            }
            if (lineitemmap.containsKey("isGroupingAfterRowPresent") && lineitemmap.get("isGroupingAfterRowPresent") != null) {
                isGroupingAfterRowPresent = Boolean.parseBoolean(lineitemmap.get("isGroupingAfterRowPresent").toString());
            }
            if (lineitemmap.containsKey("islineitemrepeat") && lineitemmap.get("islineitemrepeat") != null) {
                islineitemrepeat = Boolean.parseBoolean(lineitemmap.get("islineitemrepeat").toString());
            }
            if (lineitemmap.containsKey("isconsolidated") && lineitemmap.get("isconsolidated") != null) {
                isconsolidated = Boolean.parseBoolean(lineitemmap.get("isconsolidated").toString());
            }
            if (lineitemmap.containsKey("isExtendLineItem") && lineitemmap.get("isExtendLineItem") != null) {
                isExtendLineItem = Boolean.parseBoolean(lineitemmap.get("isExtendLineItem").toString());
            }     
            if (lineitemmap.containsKey(Constants.pageSize) && lineitemmap.get(Constants.pageSize) != null) {
                pageSize = (String) lineitemmap.get(Constants.pageSize);
            }
            if (lineitemmap.containsKey(Constants.pageOrientation) && lineitemmap.get(Constants.pageOrientation) != null) {
                pageOrientation = (String) lineitemmap.get(Constants.pageOrientation);
            }
            if (lineitemmap.containsKey(Constants.adjustPageHeight) && lineitemmap.get(Constants.adjustPageHeight) != null) {
                adjustPageHeight = (String) lineitemmap.get(Constants.adjustPageHeight);
            }
            if (lineitemmap.containsKey(Constants.SORTFIELD) && lineitemmap.get(Constants.SORTFIELD) != null) {
                sortField = (String) lineitemmap.get(Constants.SORTFIELD);
            }
            if (lineitemmap.containsKey(Constants.SORTFIELDXTYPE) && lineitemmap.get(Constants.SORTFIELDXTYPE) != null) {
                sortFieldXtype = (String) lineitemmap.get(Constants.SORTFIELDXTYPE);
            }
            if (lineitemmap.containsKey(Constants.SORTORDER) && lineitemmap.get(Constants.SORTORDER) != null) {
                sortOrder = (String) lineitemmap.get(Constants.SORTORDER);
            }
            
            boolean isAgeingTablePresent = false;
            boolean ismulticurrency = false;
            boolean isCustomerVendorCurrency = false;
            boolean isincludecurrent = false;
            String ageingTableParentRowid = "";
            String ageingTableStyle = "";
            String intervalText = "";
            String intervalType = "";
            String intervalPlaceHolder = ""; //ERP-28745
            int noofintervals = 3;
            int interval = 30;
            JSONArray ageingTableHeaderItems = new JSONArray();
            JSONArray ageingTableDataItems = new JSONArray();
            if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                HashMap<String, Object> ageingTablemap = CustomDesignHandler.getAgeingTableDetails(jArr);
                if (ageingTablemap.containsKey(Constants.isAgeingTablePresent) && ageingTablemap.get(Constants.isAgeingTablePresent) != null) {
                    isAgeingTablePresent = (Boolean) ageingTablemap.get(Constants.isAgeingTablePresent);
                }
                if (ageingTablemap.containsKey("ageingTableHeaderItems") && ageingTablemap.get("ageingTableHeaderItems") != null) {
                    ageingTableHeaderItems = (JSONArray) ageingTablemap.get("ageingTableHeaderItems");
                }
                if (ageingTablemap.containsKey("ageingTableDataItems") && ageingTablemap.get("ageingTableDataItems") != null) {
                    ageingTableDataItems = (JSONArray) ageingTablemap.get("ageingTableDataItems");
                }
                if (ageingTablemap.containsKey("noofintervals") && ageingTablemap.get("noofintervals") != null) {
                    noofintervals =  Integer.parseInt(ageingTablemap.get("noofintervals").toString());
                }
                if (ageingTablemap.containsKey("interval") && ageingTablemap.get("interval") != null) {
                    interval =  Integer.parseInt(ageingTablemap.get("interval").toString());
                }
                if (ageingTablemap.containsKey("ageingTableParentRowid") && ageingTablemap.get("ageingTableParentRowid") != null) {
                    ageingTableParentRowid =  (ageingTablemap.get("ageingTableParentRowid").toString());
                }
                if (ageingTablemap.containsKey("ageingTableStyle") && ageingTablemap.get("ageingTableStyle") != null) {
                    ageingTableStyle =  (ageingTablemap.get("ageingTableStyle").toString());
                }
                if (ageingTablemap.containsKey("ismulticurrency") && ageingTablemap.get("ismulticurrency") != null) {
                    ismulticurrency =  Boolean.valueOf(ageingTablemap.get("ismulticurrency").toString());
                }
                if (ageingTablemap.containsKey("isincludecurrent") && ageingTablemap.get("isincludecurrent") != null) {
                    isincludecurrent = Boolean.valueOf(ageingTablemap.get("isincludecurrent").toString());
                }
                if (ageingTablemap.containsKey("intervalType") && ageingTablemap.get("intervalType") != null) {
                    intervalType = (ageingTablemap.get("intervalType").toString());
                }
                if (ageingTablemap.containsKey("intervalPlaceHolder") && ageingTablemap.get("intervalPlaceHolder") != null) { //ERP-28745
                    intervalPlaceHolder = (ageingTablemap.get("intervalPlaceHolder").toString());
                }
                if (ageingTablemap.containsKey("intervalText") && ageingTablemap.get("intervalText") != null) {
                    intervalText = (ageingTablemap.get("intervalText").toString());
                }
            }
//        for (int cnt = 0; cnt < jArr.length(); cnt++) {
//            JSONArray colJArr = jArr.getJSONObject(cnt).getJSONArray("data");
//            for (int colcnt = 0; colcnt < colJArr.length(); colcnt++) {
//                JSONArray itemsJArr = colJArr.getJSONObject(colcnt).getJSONArray("data");
//                for (int itemCnt = 0; itemCnt < itemsJArr.length(); itemCnt++) {
//                    JSONObject jObj = itemsJArr.getJSONObject(itemCnt);
//                    if (jObj.optInt("fieldType", 0) == 11 ) {
//                        customizedlineItems = new JSONArray(jObj.optString("data", "[]")).getJSONObject(0).getJSONArray("lineitems");
//                        lineItem_YAxis = jObj.optInt("y", -1);
//                        lineitemheight = jObj.optInt("height", 60);
//                        lineitemwidth = jObj.optInt("width", 850);
//                        isLineItemPresent = true;
//                        break;
//                    }
//                }
//            }
////                    else if(!StringUtil.isNullOrEmpty(jObj.getString("repeatglobalfield"))){
////                             repeatglobalfield=jObj.optString("repeatglobalfield", "");
////                    }
////            bottomItems.put(jObj.getString("id"), jObj.optInt("y", 0));
//        }
//              if(jArr.)
                /*
             * Below block to replace module global placeholders with actual
             * values //
             */ //for product
            
            org.jsoup.nodes.Document jsoupForFormulaBuilder = Jsoup.parse(html);
            org.jsoup.select.Elements formulaEles = (Elements) jsoupForFormulaBuilder.getElementsByAttribute(CustomDesignerConstants.ISFORMULA);
            for(int ind=0; ind < formulaEles.size(); ind++){
                org.jsoup.nodes.Element formulaEle = formulaEles.get(ind);
                String formulaName = formulaEle.html();
                String formulaPlaceholder = formulaEle.attr("attribute");
                String formula = formulaPlaceholder.replace("{PLACEHOLDER:", "").replace("}", "");
                String newFormulaName = formula;
                formulaEle.html(newFormulaName);
                formulaEle.attr("attribute", "{PLACEHOLDER:"+formulaName+"}");
            }
            html = jsoupForFormulaBuilder.outerHtml();
            
            /* If QA Approval module then change moduleid to respective main module.
             * Also maintain flag for QA Approval flow.
             * Set transactionId to main module transaction id.
             */
            boolean isQAApproval = false;
            if(moduleid == Constants.Acc_QA_APPROVAL_MODULE_ID){
                isQAApproval = true;
                if(!StringUtil.isNullOrEmpty(requestJobj.optString("transactionid"))){
                    transactionId = requestJobj.optString("transactionid");
                }
                switch(templateSubtype){
                    case "0":
                        moduleid = Constants.Acc_Delivery_Order_ModuleId;
                        break;
                }
            }
            
            if ((moduleid == Constants.Acc_Credit_Note_ModuleId && !templateSubtype.equals("1")) || (moduleid == Constants.Acc_Debit_Note_ModuleId && !templateSubtype.equals("1")) || moduleid == Constants.Acc_Receive_Payment_ModuleId || moduleid == Constants.Acc_Make_Payment_ModuleId) {
                jrepeat = Globalcellrepeatrows(html, json, lineItemsArr, pagefooterhtml, moduleid, 1, pageheaderhtml, negativeValueIn, countryid, allFieldParameters);
                html = jrepeat.getString("html");
                pagefooterhtml = jrepeat.getString("pagefooterhtml");
                pageheaderhtml = jrepeat.getString("pageheaderhtml");
            }
            HashMap<String, Integer> default_headers = getDefaultHeaderName_XtypeNew(customDesignDAOObj, jArr);
            if (!StringUtil.isNullOrEmpty(sqlquery)) {
                html = replaceGlobalLevelFields(html, customDesignDAOObj, accCommonTablesDAO, moduleid, companyid, transactionId, sqlquery, invoiceCols, df, default_headers, json, false, negativeValueIn, countryid, allFieldParameters);
                pageheaderhtml = replaceGlobalLevelFields(pageheaderhtml, customDesignDAOObj, accCommonTablesDAO, moduleid, companyid, transactionId, sqlquery, invoiceCols, df, default_headers, json, false, negativeValueIn, countryid, allFieldParameters);
                pagefooterhtml = replaceGlobalLevelFields(pagefooterhtml, customDesignDAOObj, accCommonTablesDAO, moduleid, companyid, transactionId, sqlquery, invoiceCols, df, default_headers, json, false, negativeValueIn, countryid, allFieldParameters);
                lineItemFirstRowHTML = replaceGlobalLevelFields(lineItemFirstRowHTML, customDesignDAOObj, accCommonTablesDAO, moduleid, companyid, transactionId, sqlquery, invoiceCols, df, default_headers, json, true, negativeValueIn, countryid, allFieldParameters);
                lineItemLastRowHTML = replaceGlobalLevelFields(lineItemLastRowHTML, customDesignDAOObj, accCommonTablesDAO, moduleid, companyid, transactionId, sqlquery, invoiceCols, df, default_headers, json, true, negativeValueIn, countryid, allFieldParameters);
            }
            
            if ( moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId ){
                Date endDate = authHandler.getDateOnlyFormat().parse(requestJobj.optString("enddate",""));
                Date startDate = authHandler.getDateOnlyFormat().parse(requestJobj.optString("startdate",""));
                Date asofDate = authHandler.getDateOnlyFormat().parse(requestJobj.optString("asofdate",""));
                Map<String,Object> requestMap = new HashMap<>();
                requestMap.put("endDate",endDate);
                requestMap.put("asofDate",asofDate);
                requestMap.put("startDate",startDate);
                requestMap.put("companyid",companyid);
                requestMap.put("transactionId",transactionId);
                requestMap.put("moduleid",moduleid);
                requestMap.put("df", authHandler.getUserDateFormatterWithoutTimeZone(requestJobj));
                requestMap.put("userdf", authHandler.getUserDateFormatterWithoutTimeZone(requestJobj));
                requestMap.put("templatesubtype", templateSubtype);
                
                JSONObject cvJobj = getCVDetails(customDesignDAOObj,requestMap);
                html = replaceGloballevelFieldsForSOA(html, cvJobj, moduleid, templateSubtype, allFieldParameters);
                pageheaderhtml = replaceGloballevelFieldsForSOA(pageheaderhtml, cvJobj, moduleid, templateSubtype, allFieldParameters);
                pagefooterhtml = replaceGloballevelFieldsForSOA(pagefooterhtml, cvJobj, moduleid, templateSubtype, allFieldParameters);
                lineItemFirstRowHTML = replaceGloballevelFieldsForSOA(lineItemFirstRowHTML, cvJobj, moduleid, templateSubtype, allFieldParameters);
                lineItemLastRowHTML = replaceGloballevelFieldsForSOA(lineItemLastRowHTML, cvJobj, moduleid, templateSubtype, allFieldParameters);
            }

            /*
             * Below block to replace module custom global placeholders with
             * actual values
             */
            /*
             * to replace global section custom fields
             */
            JSONObject customfieldjson = new JSONObject();
            JSONObject objectDetailsjson = new JSONObject();
            HashMap<String, Object> customParams = new HashMap<String, Object>();

            if (moduleid == Constants.Acc_ConsignmentDeliveryOrder_ModuleId && isConsignment) { //ERP-10723
                TreeMap<String, String> diffdbCols = null;
                diffdbCols = CustomDesignerConstants.ConsignmentDOtoOtherMap;
                if (diffdbCols != null) {
                    TreeMap<String, String> moduletoOtherMap = (TreeMap<String, String>) diffdbCols.clone();
                    if (moduletoOtherMap != null) {
                        for (Map.Entry<String, String> mapModule : moduletoOtherMap.entrySet()) {
                            int mapModuleId = StringUtil.getInteger(mapModule.getValue());
                            customParams.put(Constants.moduleid, mapModuleId);
                            customParams.put("billid", linkedreferencenumber);
                            customParams.put("pageheaderhtml", pageheaderhtml);
                            customParams.put("html", html);
                            customParams.put("pagefooterhtml", pagefooterhtml);
                            customParams.put("lineItemFirstRowHTML", lineItemFirstRowHTML);
                            customParams.put("lineItemLastRowHTML", lineItemLastRowHTML);
                            customParams.put("globalCustomFieldList", globalCustomFieldList);
                            customfieldjson = ReplaceCustomFields(requestJobj, accountingHandlerDAOobj, accAccountDAOobj, customParams, json, allFieldParameters);
                            html = customfieldjson.optString("html", "");
                            pagefooterhtml = customfieldjson.optString("pagefooterhtml", "");
                            pageheaderhtml = customfieldjson.optString("pageheaderhtml", "");
                            lineItemFirstRowHTML = customfieldjson.optString("lineItemFirstRowHTML", "");
                            lineItemLastRowHTML = customfieldjson.optString("lineItemLastRowHTML", "");
                        }
                    }
                }
            }
            customParams.clear();
            customParams.put("billid", transactionId);
            if ( moduleid == Constants.Acc_Customer_AccStatement_ModuleId ) {
                customParams.put(Constants.moduleid, Constants.Acc_Customer_ModuleId);
            } else if ( moduleid == Constants.Acc_Vendor_AccStatement_ModuleId ) {
                customParams.put(Constants.moduleid, Constants.Acc_Vendor_ModuleId);
            } else {
                customParams.put(Constants.moduleid, moduleid);
            }
            customParams.put("pageheaderhtml", pageheaderhtml);
            customParams.put("html", html);
            customParams.put("pagefooterhtml", pagefooterhtml);
            customParams.put("lineItemFirstRowHTML", lineItemFirstRowHTML);
            customParams.put("lineItemLastRowHTML", lineItemLastRowHTML);
            customParams.put("globalCustomFieldList", globalCustomFieldList);
            if (!(isJobOrderFlow || isQAApproval)) { // If not job order flow and not QA Approval module
                customfieldjson = ReplaceCustomFields(requestJobj, accountingHandlerDAOobj, accAccountDAOobj, customParams, json, allFieldParameters);
                html = customfieldjson.optString("html", "");
                pagefooterhtml = customfieldjson.optString("pagefooterhtml", "");
                pageheaderhtml = customfieldjson.optString("pageheaderhtml", "");
                lineItemFirstRowHTML = customfieldjson.optString("lineItemFirstRowHTML", "");
                lineItemLastRowHTML = customfieldjson.optString("lineItemLastRowHTML", "");
            }

            /*
             * Calculating Custom Fields Value for Customer and Vendor
             */
            TreeMap<String, String> baseModuletoOtherMap = null;
            baseModuletoOtherMap = getOtherFieldsMapForModule(moduleid, templateSubtype);
            if (baseModuletoOtherMap != null) {
                TreeMap<String, String> moduletoOtherMap = (TreeMap<String, String>) baseModuletoOtherMap.clone();
                if (moduletoOtherMap != null) {
                    for (Map.Entry<String, String> mapModule : moduletoOtherMap.entrySet()) {
                        int mapModuleId = StringUtil.getInteger(mapModule.getValue());
                        if (mapModuleId == Constants.Acc_Customer_ModuleId || mapModuleId == Constants.Acc_Vendor_ModuleId) {
                            String customerId = "", vendorId = "";
                            
                            objectDetailsjson = getObjectDetails(moduleid, transactionId, accountingHandlerDAOobj);//fetching customerid and vendorid
                            customerId = objectDetailsjson.optString("customerId", "");
                            vendorId = objectDetailsjson.optString("vendorId", "");
                            
                            customParams.clear();
                            if (!StringUtil.isNullOrEmpty(customerId)) {
                                customParams.put("billid", customerId);
                            } else if (!StringUtil.isNullOrEmpty(vendorId)) {
                                customParams.put("billid", vendorId);
                            }
                            customParams.put(Constants.moduleid, mapModuleId);
                            customParams.put("pageheaderhtml", pageheaderhtml);
                            customParams.put("html", html);
                            customParams.put("pagefooterhtml", pagefooterhtml);
                            customParams.put("lineItemFirstRowHTML", lineItemFirstRowHTML);
                            customParams.put("lineItemLastRowHTML", lineItemLastRowHTML);
                            customParams.put("globalCustomFieldList", globalCustomFieldList);
                            customfieldjson = ReplaceCustomFields(requestJobj, accountingHandlerDAOobj, accAccountDAOobj, customParams, json, allFieldParameters);
                            html = customfieldjson.optString("html", "");
                            pagefooterhtml = customfieldjson.optString("pagefooterhtml", "");
                            pageheaderhtml = customfieldjson.optString("pageheaderhtml", "");
                            lineItemFirstRowHTML = customfieldjson.optString("lineItemFirstRowHTML", "");
                            lineItemLastRowHTML = customfieldjson.optString("lineItemLastRowHTML", "");
                        }
                    }
                }
            }
            //If template is of asset type then update module id to asset module id
            if (templateSubtype.equals(CustomDesignerConstants.ASSET)) {
                if (moduleid == Constants.Acc_Purchase_Order_ModuleId) {    //reassigning again moduleid to salesorder & delivery order
                    moduleid = Constants.Acc_FixedAssets_Purchase_Order_ModuleId;
                } else if (moduleid == Constants.Acc_Purchase_Requisition_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_PurchaseRequisition_ModuleId;
                } else if (moduleid == Constants.Acc_RFQ_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_RFQ_ModuleId;
                } else if (moduleid == Constants.Acc_Vendor_Quotation_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_Vendor_Quotation_ModuleId;
                } else if (moduleid == Constants.Acc_Vendor_Invoice_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId;
                } else if (moduleid == Constants.Acc_Invoice_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_DisposalInvoice_ModuleId;
                } else if (moduleid == Constants.Acc_Goods_Receipt_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_GoodsReceipt_ModuleId;
                } else if (moduleid == Constants.Acc_Delivery_Order_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_DeliveryOrder_ModuleId;
                } else if (moduleid == Constants.Acc_Purchase_Return_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_Purchase_Return_ModuleId;
                } else if (moduleid == Constants.Acc_Sales_Return_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_Sales_Return_ModuleId;
                }
            }

            if (templateSubtype.equals("1")) {
                if (moduleid == Constants.Acc_ConsignmentRequest_ModuleId && isConsignment) {    //reassigning again moduleid to salesorder & delivery order
                    moduleid = Constants.Acc_Sales_Order_ModuleId;
                } else if (moduleid == Constants.Acc_ConsignmentDeliveryOrder_ModuleId && isConsignment) {
                    moduleid = Constants.Acc_Delivery_Order_ModuleId;
                } else if (moduleid == Constants.Acc_ConsignmentSalesReturn_ModuleId && isConsignment) {
                    moduleid = Constants.Acc_Sales_Return_ModuleId;
                } else if (moduleid == Constants.Acc_ConsignmentInvoice_ModuleId && isConsignment) {
                    moduleid = Constants.Acc_Invoice_ModuleId;
                } else if (moduleid == Constants.Acc_Credit_Note_ModuleId) {
                    moduleid = Constants.Acc_Sales_Return_ModuleId;
                } else if (moduleid == Constants.Acc_Debit_Note_ModuleId) {
                    moduleid = Constants.Acc_Purchase_Return_ModuleId;
                }
            } else if (templateSubtype.equals("2")) {
                if (moduleid == Constants.Acc_Lease_DO ) {
                    moduleid = Constants.Acc_Delivery_Order_ModuleId;
                } else if (moduleid == Constants.Acc_Lease_Return ) {
                    moduleid = Constants.Acc_Sales_Return_ModuleId;
                } else if (moduleid == Constants.LEASE_INVOICE_MODULEID) { //reassigning again moduleid to sales invoice
                    moduleid = Constants.Acc_Invoice_ModuleId;
                } else if (moduleid == Constants.Acc_Lease_Order_ModuleId) { //reassigning again moduleid to sales invoice
                    moduleid = Constants.Acc_Sales_Order_ModuleId;
                } else if (moduleid == Constants.Acc_Lease_Quotation) { //reassigning again moduleid to sales invoice
                    moduleid = Constants.Acc_Customer_Quotation_ModuleId;
                }
            } else if (templateSubtype.equals(CustomDesignerConstants.ASSET)) {
                //If template is of asset type then update module id to asset module id
                if (moduleid == Constants.Acc_FixedAssets_Purchase_Order_ModuleId) {
                    moduleid = Constants.Acc_Purchase_Order_ModuleId;
                } else if (moduleid == Constants.Acc_FixedAssets_PurchaseRequisition_ModuleId) {
                    moduleid = Constants.Acc_Purchase_Requisition_ModuleId;
                } else if (moduleid == Constants.Acc_FixedAssets_RFQ_ModuleId) {
                    moduleid = Constants.Acc_RFQ_ModuleId;
                } else if (moduleid == Constants.Acc_Vendor_Quotation_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_Vendor_Quotation_ModuleId;
                } else if (moduleid == Constants.Acc_Vendor_Invoice_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId;
                } else if (moduleid == Constants.Acc_Invoice_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_DisposalInvoice_ModuleId;
                } else if (moduleid == Constants.Acc_Goods_Receipt_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_GoodsReceipt_ModuleId;
                } else if (moduleid == Constants.Acc_Delivery_Order_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_DeliveryOrder_ModuleId;
                } else if (moduleid == Constants.Acc_Purchase_Return_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_Purchase_Return_ModuleId;
                } else if (moduleid == Constants.Acc_Sales_Return_ModuleId) {
                    moduleid = Constants.Acc_FixedAssets_Sales_Return_ModuleId;
                }
            }
            /*
             * replace summary placeholders - Total Amount, Total Discount,
             * Total Tax, Subtotal
             */
            HashMap<String, String> summaryFields = new HashMap<String, String>();
            if (moduleid != Constants.Acc_Credit_Note_ModuleId && moduleid != Constants.Acc_Debit_Note_ModuleId && moduleid != Constants.Acc_Receive_Payment_ModuleId && moduleid != Constants.Acc_Make_Payment_ModuleId) {
                for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
//                ArrayList<CustomDesignLineItemProp> rowDatalist = new ArrayList();
                    JSONObject itemData = lineItemsArr.getJSONObject(cnt);
                    if (itemData.has("summarydata")) {
//                            if (moduleid == Constants.Acc_Credit_Note_ModuleId && templateSubtype.contains("1")) {
//                                moduleid = Constants.Acc_Sales_Return_ModuleId;
//                            }
                        if (moduleid != Constants.Acc_Stock_Request_ModuleId && moduleid != Constants.Inventory_ModuleId && moduleid != Constants.Acc_Stock_Adjustment_ModuleId && moduleid != Constants.Acc_InterStore_ModuleId
                                && moduleid != Constants.Acc_InterLocation_ModuleId) {//Not calculated for Inventory Module
                            summaryFields = LineItemColumnModuleMapping.InvoiceProductSummaryItems;
                            for (Map.Entry<String, String> entry : summaryFields.entrySet()) {
                                JSONObject staticColInfo = new JSONObject(summaryFields.get(entry.getKey()));
                                if(html.contains("#"+staticColInfo.getString("label")+"#")
                                        || pageheaderhtml.contains("#"+staticColInfo.getString("label")+"#")
                                        || pagefooterhtml.contains("#"+staticColInfo.getString("label")+"#")
                                        || lineItemFirstRowHTML.contains("#"+staticColInfo.getString("label")+"#")
                                        || lineItemLastRowHTML.contains("#"+staticColInfo.getString("label")+"#")){
                                    if (itemData.has(entry.getKey())) {
                                        String value = itemData.get(entry.getKey()).toString();

        //                                    int decimalPrecision = getDecimalPrecision(new JSONObject("{JSON:" + json + "}"), staticColInfo.getString("label"));
                                            int decimalPrecision = allFieldParameters.optInt(staticColInfo.getString("label") + "decimalPrecision",2);
        //                                    String valueSeperator = getValueSeperator(new JSONObject("{JSON:" +json+"}"),staticColInfo.getString("label"));
                                            String valueSeperator = allFieldParameters.optString(staticColInfo.getString("label") + "valueSeparator","");
                                            boolean zeroValueAsBlank = allFieldParameters.optBoolean(staticColInfo.getString("label") + "showzerovalueasblank", false);
                                        if (StringUtil.isNullOrEmpty(value)) {
        //                                        String defVal = getDefaultFieldValue(new JSONObject("{JSON:" + json + "}"), staticColInfo.getString("label"));
                                                String defVal = allFieldParameters.optString(staticColInfo.getString("label") + "defaultValue","");
                                            if (decimalPrecision != -1) {
                                                try {
                                                    double doublevalue = Double.parseDouble(defVal);
                                                    defVal = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision,countryid);
                                                } catch (Exception Ex) {
                                                }
                                            }
                                            if(zeroValueAsBlank){
                                                defVal = CustomDesignHandler.getZeroAmountAsBlank(defVal);
                                            }
                                            if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                defVal = replaceWithValueSeperator(defVal, valueSeperator);
                                            }
                                            if (StringUtil.isNullOrEmpty(defVal)) {
                                                html = removeSelectFieldHavingNoDataFromHTML(html, staticColInfo.getString("label"));
                                                pagefooterhtml = removeSelectFieldHavingNoDataFromHTML(pagefooterhtml, staticColInfo.getString("label"));
                                                pageheaderhtml = removeSelectFieldHavingNoDataFromHTML(pageheaderhtml, staticColInfo.getString("label"));
                                                lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", "");
                                                lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", "");
                                            } else {
                                                html = html.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                            }
                                        } else {
                                            if (decimalPrecision != -1) {
    //                                            value = value.replaceAll(",", "");
                                                try {
                                                    if (staticColInfo.optBoolean("isNumeric", false)) {
                                                        String valueArr[] = value.split("!##");
                                                        value = "";
                                                        for (String val : valueArr) {
                                                            double doublevalue = Double.parseDouble(val);
                                                            val = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision, countryid);
                                                            if (val.contains("-")) {
                                                                if (negativeValueIn == 1) {
                                                                    //No need to modification
                                                                } else if (negativeValueIn == 2) {
                                                                    val = val.replace("-", "");
                                                                    val = "(" + val + ")";
                                                                }
                                                            }
                                                            value += val + "!##";
                                                        }
                                                        value = value.substring(0,value.length()-3);
                                                    } else {
                                                        double doublevalue = Double.parseDouble(value);
                                                        value = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision,countryid);
                                                        if(value.contains("-")){
                                                            if(negativeValueIn == 1){
                                                                //No need to modification
                                                            } else if(negativeValueIn == 2){
                                                                value = value.replace("-", "");
                                                                value = "("+value+")";
                                                            }
                                                        }
                                                    }
                                                } catch (Exception Ex) {
                                                }
                                            } else {
                                                value = value.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
                                            }
                                            if(zeroValueAsBlank){
                                                value = CustomDesignHandler.getZeroAmountAsBlank(value);
                                            }
                                            if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                value = replaceWithValueSeperator(value, valueSeperator);
                                            }
                                            html = html.replace("#" + staticColInfo.getString("label") + "#", value);
                                            pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                            pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                            lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                            lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                        }

                                    }
                                }
                            }

                            /*
                             * Summary Terms Calcution
                             */
                            HashMap<String, Object> hm = new HashMap<String, Object>();
                            JSONObject summaryjson = new JSONObject();
                            hm.put("companyid", companyid);
                            if (moduleid == Constants.Acc_Invoice_ModuleId || moduleid == Constants.Acc_Sales_Order_ModuleId || moduleid == Constants.Acc_Customer_Quotation_ModuleId || moduleid == Constants.Acc_Delivery_Order_ModuleId) {
                                hm.put("salesOrPurchaseFlag", true);
                            } else if (moduleid == Constants.Acc_Vendor_Invoice_ModuleId || moduleid == Constants.Acc_Purchase_Order_ModuleId || moduleid == Constants.Acc_Vendor_Quotation_ModuleId || moduleid == Constants.Acc_Goods_Receipt_ModuleId) {
                                hm.put("salesOrPurchaseFlag", false);
                            }

                            if (moduleid == Constants.Acc_Invoice_ModuleId || moduleid == Constants.Acc_Vendor_Invoice_ModuleId || moduleid == Constants.Acc_Customer_Quotation_ModuleId
                                    || moduleid == Constants.Acc_Sales_Order_ModuleId || moduleid == Constants.Acc_Purchase_Order_ModuleId
                                    || moduleid == Constants.Acc_Vendor_Quotation_ModuleId || moduleid == Constants.Acc_Delivery_Order_ModuleId || moduleid == Constants.Acc_Goods_Receipt_ModuleId) {
                                hm.put("pageheaderhtml", pageheaderhtml);
                                hm.put("html", html);
                                hm.put("pagefooterhtml", pagefooterhtml);
                                hm.put("lineItemFirstRowHTML", lineItemFirstRowHTML);
                                hm.put("lineItemLastRowHTML", lineItemLastRowHTML);
                                summaryjson = fetchSummaryTermFields(customDesignDAOObj, hm, numberFieldArray, itemData, negativeValueIn, countryid, json, allFieldParameters);
                                html = summaryjson.optString("html", "");
                                pagefooterhtml = summaryjson.optString("pagefooterhtml", "");
                                pageheaderhtml = summaryjson.optString("pageheaderhtml", "");
                                lineItemFirstRowHTML = summaryjson.optString("lineItemFirstRowHTML", "");
                                lineItemLastRowHTML = summaryjson.optString("lineItemLastRowHTML", "");
                            }
                        }
                        //Multiple Approver Levels Calculation.
                        for (int level = 1; level <= 10; level++) {
                            if (itemData.has(Constants.ApproverLevel + level)) {
                                String value = itemData.get(Constants.ApproverLevel + level).toString();
                                html = html.replace("#" + Constants.ApproverLevel + level + "#", value);
                                pagefooterhtml = pagefooterhtml.replace("#" + Constants.ApproverLevel + level + "#", value);
                                pageheaderhtml = pageheaderhtml.replace("#" + Constants.ApproverLevel + level + "#", value);
                            } else {
                                html = html.replace("#" + Constants.ApproverLevel + level + "#", "");
                                pagefooterhtml = pagefooterhtml.replace("#" + Constants.ApproverLevel + level + "#", "");
                                pageheaderhtml = pageheaderhtml.replace("#" + Constants.ApproverLevel + level + "#", "");
                            }
                        }
                        /*
                         * To Add Extra fields related to perticular module-
                         * (Mayur Bhokase)
                         */
                        HashMap<String, String> extraFields = new HashMap<String, String>();
                        extraFields = getExtraFieldsForModule(moduleid, countryid);
                        if (extraFields != null) {
                            /**
                             * get extra fields related to template subtype
                             */
                            extraFields = (HashMap<String, String>) extraFields.clone();
                            HashMap<String, String> subtypExtraFieldsMap = null;
                            subtypExtraFieldsMap = CustomDesignHandler.getExtraFieldsForSubtype(moduleid, templateSubtype, countryid);
                            if(subtypExtraFieldsMap != null){
                                extraFields.putAll(subtypExtraFieldsMap);
                            }
                            
                            if(isJobOrderFlow){
                                /*
                                * Get Global and Line level Default and Custom fields for Job Order Flow only
                                */
                                extraFields = getJobOrderFlowFields(moduleid, companyid, extraFields, customDesignDAOObj);
                            }
                            
                            if(isQAApproval){
                                /*
                                * Get module wise Extra Map fields and Custom fields for QA Approval
                                */
                                extraFields = getModulewiseExtraFieldsAndCustomFields(moduleid, companyid, extraFields, customDesignDAOObj);
                            }

                            for (Map.Entry<String, String> entry : extraFields.entrySet()) {
                                JSONObject staticColInfo = new JSONObject(extraFields.get(entry.getKey()));
                                if(html.contains("#"+staticColInfo.getString("label")+"#")
                                        || pageheaderhtml.contains("#"+staticColInfo.getString("label")+"#")
                                        || pagefooterhtml.contains("#"+staticColInfo.getString("label")+"#")
                                        || lineItemFirstRowHTML.contains("#"+staticColInfo.getString("label")+"#")
                                        || lineItemLastRowHTML.contains("#"+staticColInfo.getString("label")+"#")){
                                    if (itemData.has(entry.getKey())) {
                                        String value = itemData.get(entry.getKey()).toString();
                                        /*
                                        * Sorting Global Level Dimensions &
                                        * GlobalLevel Diemnsions
                                        */
                                        String ordereddimensionfields = "";
                                        if (entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelDimensions) || entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelCustomfields)) {
                                            String fieldid = "";
                                            if (entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelDimensions)) {
                                                fieldid = CustomDesignerConstants.AllGloballevelDimensions;

                                            } else if (entry.getKey().toString().equals(CustomDesignerConstants.AllGloballevelCustomfields)) {
                                                fieldid = CustomDesignerConstants.AllGloballevelCustomfields;
                                            } else {
                                                fieldid = "";
                                            }

                                            HashMap<String, Object> fieldparams = new HashMap<String, Object>();
                                            fieldparams.put(Constants.moduleid, moduleid);
                                            fieldparams.put(CustomDesignerConstants.json, json);
                                            fieldparams.put(CustomDesignerConstants.islineitem, "false");
                                            fieldparams.put(CustomDesignerConstants.fieldid, fieldid);
                                            HashMap<String, Object> returnvalues = new HashMap<String, Object>();
                                            returnvalues = CustomFieldDimensionwithSequence(fieldparams, itemData);
                                            if (returnvalues.containsKey("prodData")) {
                                                ordereddimensionfields = (String) returnvalues.get("prodData");
                                                if (!StringUtil.isNullOrEmpty(ordereddimensionfields)) {
                                                    value = ordereddimensionfields + "</br>";
                                                }
                                            }
                                        }

        //                                    int decimalPrecision = getDecimalPrecision(new JSONObject("{JSON:" + json + "}"), staticColInfo.getString("label"));
                                            int decimalPrecision = allFieldParameters.optInt(staticColInfo.getString("label") + "decimalPrecision",2);
        //                                    String valueSeperator = getValueSeperator(new JSONObject("{JSON:" +json+"}"),staticColInfo.getString("label"));
                                            String valueSeperator = allFieldParameters.optString(staticColInfo.getString("label") + "valueSeparator","");
                                            boolean zeroValueAsBlank = allFieldParameters.optBoolean(staticColInfo.getString("label") + "showzerovalueasblank", false);
                                        if (StringUtil.isNullOrEmpty(value)) {
        //                                        String defVal = getDefaultFieldValue(new JSONObject("{JSON:" + json + "}"), staticColInfo.getString("label"));
                                                String defVal = allFieldParameters.optString(staticColInfo.getString("label") + "defaultValue","");
                                            if (decimalPrecision != -1) {
                                                try {
                                                    double doublevalue = Double.parseDouble(defVal);
                                                    defVal = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision,countryid);
                                                } catch (Exception Ex) {
                                                }
                                            }
                                            if(zeroValueAsBlank){
                                                defVal = CustomDesignHandler.getZeroAmountAsBlank(defVal);
                                            }
                                            if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                defVal = replaceWithValueSeperator(defVal, valueSeperator);
                                            }
                                            if (StringUtil.isNullOrEmpty(defVal)) {
                                                html = removeSelectFieldHavingNoDataFromHTML(html, staticColInfo.getString("label"));
                                                pagefooterhtml = removeSelectFieldHavingNoDataFromHTML(pagefooterhtml, staticColInfo.getString("label"));
                                                pageheaderhtml = removeSelectFieldHavingNoDataFromHTML(pageheaderhtml, staticColInfo.getString("label"));
                                                lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", "");
                                                lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", "");
                                            } else {
                                                html = html.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                                lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", defVal);
                                            }
                                        } else {
                                            if (decimalPrecision != -1) {
    //                                                value = value.replaceAll(",", "");
                                                try {
                                                    double doublevalue = 0;
                                                    if(staticColInfo.getString("label").equals("Total Quantity With UOM") || staticColInfo.getString("label").equals("Total Delivered Quantity With UOM")){ //SDP-3288 : enable use to change decimal precison for total quantity with uom OR total delivered quantity with uom
                                                        if(value.contains(" ")){
                                                            String uom = value.split(" ")[1]; // get UOM
                                                            doublevalue = Double.parseDouble(value.split(" ")[0]); // get Value
                                                            value = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision,countryid);
                                                            value = value +" "+ uom; // append Value and UOM
                                                        }
                                                    } else{
                                                        String SpecificCurrencyId = allFieldParameters.optString(staticColInfo.getString("label") + "specificreccurrency", "");
                                                        if (!StringUtil.isNullOrEmpty(SpecificCurrencyId) && !SpecificCurrencyId.equals("none") && staticColInfo.optString("fieldid","").equals("SpecificCurrencyAmount")) {
                                                            doublevalue = Double.parseDouble(value);
                                                            JSONObject requestJson = new JSONObject();
                                                            requestJson.put("transactionDate", itemData.optString("transactiondate"));
                                                            requestJson.put("currId", SpecificCurrencyId);
                                                            requestJson.put(Constants.globalCurrencyKey, gcurrencyid);
                                                            requestJson.put(Constants.companyKey, companyid);
                                                            requestJson.put("fieldName", entry.getKey().toString());
                                                            requestJson.put("gstCurrencyRate", itemData.optString("gstCurrencyRate"));
                                                            double exchangeRateForSpecificFields = getExchangeRateForSpecificCurrencyFields(requestJson, accInvoiceServiceDAOObj);
                                                            doublevalue = doublevalue * exchangeRateForSpecificFields;
                                                            value = Double.toString(doublevalue);
                                                        }
                                                        doublevalue = Double.parseDouble(value);
                                                        value = CustomDesignHandler.getAmountinCommaDecimal(doublevalue, decimalPrecision, countryid);
                                                        if (value.contains("-")) {
                                                            if (negativeValueIn == 1) {
                                                                //No need to modification
                                                            } else if (negativeValueIn == 2) {
                                                                value = value.replace("-", "");
                                                                value = "(" + value + ")";
                                                            }
                                                        }
                                                    }
                                                } catch (Exception Ex) {
                                                }
                                            } else {
                                                value = value.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");//companyposttext
                                            }
                                            if(zeroValueAsBlank){
                                                value = CustomDesignHandler.getZeroAmountAsBlank(value);
                                            }
                                            if(!StringUtil.isNullOrEmpty(valueSeperator)){
                                                value = replaceWithValueSeperator(value, valueSeperator);
                                            }
                                            html = html.replace("#" + staticColInfo.getString("label") + "#", value);
                                            pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                            pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                            lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                            lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                        }
                                    } else{
                                        if(isJobOrderFlow || isQAApproval){// Replace value with empty
                                            String value = "";
                                            html = html.replace("#" + staticColInfo.getString("label") + "#", value);
                                            pagefooterhtml = pagefooterhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                            pageheaderhtml = pageheaderhtml.replace("#" + staticColInfo.getString("label") + "#", value);
                                            lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                            lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + staticColInfo.getString("label") + "#", value);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            /**
             * Replace approver level fields in Make Payment
             */
            if (moduleid == Constants.Acc_Make_Payment_ModuleId) {
                for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
                    JSONObject itemData = lineItemsArr.getJSONObject(1); // global level data is always at 1 position in array
                    for (int level = 1; level <= 10; level++) {
                        /**
                         * Replace approver names
                         */
                        if (itemData.has(Constants.ApproverLevel + level)) {
                            String value = itemData.get(Constants.ApproverLevel + level).toString();
                            html = html.replace("#" + Constants.ApproverLevel + level + "#", value);
                            pagefooterhtml = pagefooterhtml.replace("#" + Constants.ApproverLevel + level + "#", value);
                            pageheaderhtml = pageheaderhtml.replace("#" + Constants.ApproverLevel + level + "#", value);
                        } else {
                            html = html.replace("#" + Constants.ApproverLevel + level + "#", "");
                            pagefooterhtml = pagefooterhtml.replace("#" + Constants.ApproverLevel + level + "#", "");
                            pageheaderhtml = pageheaderhtml.replace("#" + Constants.ApproverLevel + level + "#", "");
                        }
                        /**
                         * Replace approved dates
                         */
                        if (itemData.has(Constants.APPROVED_DATE_LEVEL + level)) {
                            String value = itemData.get(Constants.APPROVED_DATE_LEVEL + level).toString();
                            html = html.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", value);
                            pagefooterhtml = pagefooterhtml.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", value);
                            pageheaderhtml = pageheaderhtml.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", value);
                        } else {
                            html = html.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", "");
                            pagefooterhtml = pagefooterhtml.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", "");
                            pageheaderhtml = pageheaderhtml.replace("#" + Constants.APPROVED_DATE_LEVEL + level + "#", "");
                        }
                    }
                }
            }
                        
            org.jsoup.nodes.Document jsoupDoc = null;

            buildhtml = html;

            /*
             * Here we are building HTML if line items present by appending Top
             * Items, line Iems and Bottom Items respectively
             */
            if ( isAgeingTablePresent || isOutstandingTablePresent ) {
                int amountdigitafterdecimal=2;
                String ageingTableHTML = "";
                int duration = requestJobj.optInt("duration",0);
                JSONObject ageingDetailsJobj = new JSONObject();
                JSONArray ageingDetailJarr  = new JSONArray();
                // If subtype is 2 then get multiple currency ageing details
                if(templateSubtype.equals("2")){
                    requestJobj.put("isCurrencyDetails", true);
                } else{
                    requestJobj.put("isCurrencyDetails", (ismulticurrency || isOutstandingMultipleCurrency));
                }
                requestJobj.put("isCallFromDD", true);
                requestJobj.put("transactionId", transactionId.trim());
                requestJobj.put("isExportReport", true);
                Set<String> monthList = new LinkedHashSet<String>();
                if ( moduleid == Constants.Acc_Customer_AccStatement_ModuleId ) {
                    if( intervalType.equalsIgnoreCase("Days") ) {
                        ageingDetailsJobj = accInvoiceServiceDAOObj.getCustomerAgedReceivableMerged(requestJobj, false,true);
                        ageingDetailJarr  = ageingDetailsJobj.getJSONArray("data");
                    } else {
                        SimpleDateFormat tempdf = new SimpleDateFormat("MMMM, yyyy");
                        Date sda = new Date(requestJobj.optString("startdate",""));
                        Date eda = new Date(requestJobj.optString("enddate",""));
                        String sd = tempdf.format(sda);
                        String ed = tempdf.format(eda);
                        requestJobj.put("startdate", sd);
                        requestJobj.put("enddate", ed);
                        requestJobj.put("isSummary", true);
                        requestJobj.put("isCallFromDD", true);
                        ageingDetailJarr = accInvoiceServiceDAOObj.getMonthlyCustomerAgedReceivableMerged(requestJobj);
                        while (eda.getTime() > sda.getTime()) {
                            String monthName = tempdf.format(eda);
                            eda.setMonth(eda.getMonth() - 1);
                            monthList.add(monthName);
                        }
                    }
                } else {
                    if ( intervalType.equalsIgnoreCase("Days") ) {
                        HashMap<String, Object> requestParams = new HashMap<String, Object>();
                        requestParams = getVendorAgedPayableRequestParams(requestJobj);
                        ageingDetailJarr = accGoodsReceiptServiceDAOObj.getVendorAgedPayableMerged(requestJobj, requestParams);
                    } else {
                        SimpleDateFormat tempdf = new SimpleDateFormat("MMMM, yyyy");
                        Date sda = new Date(requestJobj.optString("startdate",""));
                        Date eda = new Date(requestJobj.optString("enddate",""));
                        String sd = tempdf.format(sda);
                        String ed = tempdf.format(eda);
                        requestJobj.put("startdate", sd);
                        requestJobj.put("enddate", ed);
                        requestJobj.put("isSummary", true);
                        requestJobj.put("isCallFromDD", true);
                        ageingDetailJarr = accGoodsReceiptServiceDAOObj.getMonthlyVendorAgedPayableMerged(requestJobj);
                        while (eda.getTime() > sda.getTime()) {
                            String monthName = tempdf.format(eda);
                            eda.setMonth(eda.getMonth() - 1);
                            monthList.add(monthName);
                        }
                    }
                }
                List<String> MonthList = new ArrayList<String>();
                Iterator ite = monthList.iterator();
                while (ite.hasNext()) {
                    MonthList.add(ite.next().toString());
                }

//                JSONObject custAgeingDetailObj = new JSONObject();
                JSONArray custAgeingDetailJarr = new JSONArray();
                for (int i = 0; i < ageingDetailJarr.length(); i++) {
                    if (transactionId.trim().equals(ageingDetailJarr.getJSONObject(i).optString("personid",""))) {
                        JSONObject custAgeingDetailObj = ageingDetailJarr.getJSONObject(i);
                        custAgeingDetailJarr.put(custAgeingDetailObj);
                    }
                }
                //If no Ageing table present for customer/vendor
                if(custAgeingDetailJarr.length() == 0 && intervalType.equalsIgnoreCase("Days")){ //Put default values in ageing table if no Ageing data present for Day Customer/Vendor
                    KwlReturnObject cmpObj = accountingHandlerDAOobj.getObject("com.krawler.common.admin.Company", companyid);
                    Company cmp = (Company) cmpObj.getEntityList().get(0);
                    JSONObject defaultJobj = new JSONObject("{\"total\":0,\"totalinbase\":0,\"currencyid\":\""+cmp.getCurrency().getCurrencyID()+"\","
                            +"\"currencysymbol\":\""+cmp.getCurrency().getSymbol()+"\",\"currencyname\":\""+cmp.getCurrency().getName()+"\","
                            +"\"amountdueinbase\":0,\"amountdueinbase1\":0,\"amountdueinbase2\":0,\"amountdueinbase3\":0,\"amountdueinbase4\":0,\"amountdueinbase5\":0,"
                            +"\"amountdueinbase6\":0,\"amountdueinbase7\":0,\"amountdueinbase8\":0,\"amountdue1\":0,\"amountdue2\":0,\"amountdue3\":0,\"amountdue4\":0,"
                            +"\"amountdue5\":0,\"amountdue6\":0,\"amountdue7\":0,\"amountdue8\":0}");
                    custAgeingDetailJarr.put(defaultJobj);
                }else if(custAgeingDetailJarr.length() == 0 && intervalType.equalsIgnoreCase("Months")){ //Put default values in ageing table if no Ageing data present for Month Customer/Vendor
                    KwlReturnObject cmpObj = accountingHandlerDAOobj.getObject("com.krawler.common.admin.Company", companyid);
                    Company cmp = (Company) cmpObj.getEntityList().get(0);
                    JSONObject defaultJobj = new JSONObject("{\"total\":0,\"totalinbase\":0,\"currencyid\":\""+cmp.getCurrency().getCurrencyID()+"\","
                            +"\"currencysymbol\":\""+cmp.getCurrency().getSymbol()+"\",\"currencyname\":\""+cmp.getCurrency().getName()+"\","
                            +"\"amountdueinbase_0\":0,\"amountdueinbase_1\":0,\"amountdueinbase_2\":0,\"amountdueinbase_3\":0,\"amountdueinbase_4\":0,\"amountdueinbase_5\":0,"
                            +"\"amountdueinbase_6\":0,\"amountdueinbase_7\":0,\"amountdueinbase_8\":0,\"amountdue_0\":0,\"amountdue_1\":0,\"amountdue_2\":0,\"amountdue_3\":0,\"amountdue_4\":0,"
                            +"\"amountdue_5\":0,\"amountdue_6\":0,\"amountdue_7\":0,\"amountdue_8\":0,\"amountdue_9\":0,\"amountdue_10\":0},,\"amountdue_11\":0");
                    custAgeingDetailJarr.put(defaultJobj);
                }
                if ( isOutstandingTablePresent ) {
                    JSONArray amtJArr = new JSONArray();
                    for (int cnt = 0; cnt < custAgeingDetailJarr.length(); cnt++) {
                        JSONObject custAgeingDetailObj = custAgeingDetailJarr.getJSONObject(cnt);
                        JSONObject tempJobj = new JSONObject();
                        double outStandingAmount = 0.0; 
                        outStandingAmount = Double.parseDouble(custAgeingDetailObj.optString("total","0"));
                        tempJobj.put("Amount",CustomDesignHandler.getAmountinCommaDecimal(outStandingAmount, amountdigitafterdecimal,countryid));
                        tempJobj.put("Outstanding Currency",custAgeingDetailObj.optString("currencysymbol", ""));
                        amtJArr.put(tempJobj);
                        // Show ageing details in customer/vendor currency
                        if(isCustomerVendorCurrency){
                            //Exchange Rate Amount
                            JSONObject exchangeJobj = new JSONObject();
                            double outStandingExchangeAmount = 0.0; 
                            String personId = custAgeingDetailObj.optString("personid", "");//Customer or Vendor Id
                            String custVendCurrency = "";
                            if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId){
                                KwlReturnObject customerResult = accountingHandlerDAOobj.getObject(Customer.class.getName(), personId);
                                Customer customer = (Customer) customerResult.getEntityList().get(0);
                                custVendCurrency = customer.getCurrency().getSymbol();
                            } else if(moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                                KwlReturnObject vendorResult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), personId);
                                Vendor vendor = (Vendor) vendorResult.getEntityList().get(0);
                                custVendCurrency = vendor.getCurrency().getSymbol();
                            }
                            double exchangeRate = custAgeingDetailObj.optDouble(InvoiceConstants.ExchangeRate, 1.0);

                            outStandingExchangeAmount = Double.parseDouble(custAgeingDetailObj.optString("total","0")) * exchangeRate;
                            exchangeJobj.put("Amount", CustomDesignHandler.getAmountinCommaDecimal(outStandingExchangeAmount, amountdigitafterdecimal,countryid));
                            exchangeJobj.put("Outstanding Currency", custVendCurrency);
                            amtJArr.put(exchangeJobj);
                        }
                    }
                    jrepeat = Globalcellrepeatrows(buildhtml, json, amtJArr, pagefooterhtml, moduleid, 1, pageheaderhtml, negativeValueIn, countryid, allFieldParameters);
                    buildhtml = jrepeat.getString("html");
                    pagefooterhtml = jrepeat.getString("pagefooterhtml");
                    pageheaderhtml = jrepeat.getString("pageheaderhtml");
                    
                }
                
                if (isAgeingTablePresent) {
                    jsoupDoc = Jsoup.parse(buildhtml);
                    ArrayList<CustomDesignLineItemProp> ageingTableHeaderlist = new ArrayList();
                    ArrayList<CustomDesignLineItemProp> ageingTableDetailslist = null;
                    ArrayList<CustomDesignLineItemProp> ageingTableDetailslistInCustCurrency = null;
                    List rowDataList = new ArrayList();
                    org.jsoup.nodes.Element ageingTableElement = jsoupDoc.getElementById(ageingTableParentRowid);
                    double lineItemTotalAmount = 0.0;
                    lineItemTotalAmount = lineItemsArr.getJSONObject(lineItemsArr.length()-1).getDouble(CustomDesignerConstants.CustomDesignTotalAmount_fieldTypeId);//balance Total Amount
                    String currencyId = lineItemsArr.getJSONObject(lineItemsArr.length()-1).optString(Constants.currencyKey, "");
                    for (int cnt = 0; cnt < custAgeingDetailJarr.length(); cnt++) {
                        boolean includecurrent = isincludecurrent;
                        JSONObject custAgeingDetailObj = custAgeingDetailJarr.getJSONObject(cnt);
                        ageingTableDetailslist = new ArrayList();
                        ageingTableDetailslistInCustCurrency = new ArrayList();
                        double totalamount = Double.parseDouble(custAgeingDetailObj.optString("total", "0"));//Aginging Total Amount
                        if(templateSubtype.equals("2") || templateSubtype.equals("0")){
                            // Update total amount for ageing details table
                            lineItemTotalAmount = totalamount;
                        }
                        // Get customer/vendor currency symbol
                        String personId = custAgeingDetailObj.optString("personid", "");//Customer or Vendor Id
                        String custVendCurrency = "";
                        if(StringUtil.isNullOrEmpty(personId)){// If customer id id empty or null then get details from json object
                            if(!StringUtil.isNullOrEmpty(custAgeingDetailObj.optString(Constants.currencyKey, ""))){
                                KwlReturnObject currencyResult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), custAgeingDetailObj.optString(Constants.currencyKey, ""));
                                KWLCurrency currency = (KWLCurrency) currencyResult.getEntityList().get(0);
                                custVendCurrency = currency.getSymbol();
                            }
                        } else{// get currency details from customer id 
                            if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId){
                                KwlReturnObject customerResult = accountingHandlerDAOobj.getObject(Customer.class.getName(), personId);
                                Customer customer = (Customer) customerResult.getEntityList().get(0);
                                custVendCurrency = customer.getCurrency().getSymbol();
                            } else if(moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                                KwlReturnObject vendorResult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), personId);
                                Vendor vendor = (Vendor) vendorResult.getEntityList().get(0);
                                custVendCurrency = vendor.getCurrency().getSymbol();
                            }
                        }
                        double exchangeRate = custAgeingDetailObj.optDouble(InvoiceConstants.ExchangeRate, 1.0);
                        
                        if (ageingTableElement != null) {
                            for (int headerCnt = 0; headerCnt < ageingTableHeaderItems.length(); headerCnt++) {
                                JSONObject headerObj = ageingTableHeaderItems.getJSONObject(headerCnt);
                                JSONObject dataObj = ageingTableDataItems.optJSONObject(headerCnt);
                                if(dataObj==null){
                                    dataObj=headerObj;
                                }
                                CustomDesignLineItemProp ageingheader = new CustomDesignLineItemProp();
                                CustomDesignLineItemProp ageingdata = new CustomDesignLineItemProp();
                                CustomDesignLineItemProp ageingdata2 = new CustomDesignLineItemProp();
                                if (headerObj.optString("columnname", "").equalsIgnoreCase("interval")) {
                                    int intervalCounter = 0;
                                    int k = 0;
                                    int from = 0;
                                    double amount = 0.0, exhangeAmount = 0.0;
                                    String amountStr = "", exchangeAmountStr = "";
                                    int to = 0, currentapply = 0;
                                    int width = headerObj.optInt("width", 0);
                                    String headerstyle = headerObj.optString("style", "");
                                    String widthString = headerstyle.substring(headerstyle.indexOf("width:"), headerstyle.indexOf(";", headerstyle.indexOf("width:")));
                                    headerstyle = headerstyle.replace(widthString, "");
                                    String datastyle = dataObj.optString("style", "");
                                    datastyle = datastyle.replace(widthString, "");
                                    int dividedWidth = width / (noofintervals + 1);
                                    int amountdigitdecimal = StringUtil.isNullOrEmpty(dataObj.optString("decimalpoint", ""))?0:Integer.parseInt(dataObj.optString("decimalpoint", ""));
                                    for (intervalCounter = 0; intervalCounter < noofintervals; intervalCounter++) {
                                        if(intervalType.equalsIgnoreCase("Months") && intervalCounter == MonthList.size()){
                                            intervalCounter--;
                                            break;
                                        }
                                        if (includecurrent) {
                                            CustomDesignLineItemProp ageingIntervalData = new CustomDesignLineItemProp();
                                            CustomDesignLineItemProp ageingIntervalData2 = new CustomDesignLineItemProp();
                                            if (intervalType.equalsIgnoreCase("Days")) {
                                                amount = Double.parseDouble(custAgeingDetailObj.getString("amountdue" + (intervalCounter + 1)));
                                            } else {
                                                amount = Double.parseDouble(custAgeingDetailObj.optString(("amountdue_" + ((MonthList.size()-1) - intervalCounter)),"0.0"));
                                            }
                                            amountStr = authHandler.formattingdecimal(amount, amountdigitdecimal);
                                            if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                                amountStr = CustomDesignHandler.getAmountinCommaDecimal(amount, amountdigitdecimal,countryid);
                                            } else if (amountdigitdecimal == 0) {
                                                amountStr = (amountStr.substring(0, amountStr.length() - 1));
                                            }
                                            ageingIntervalData.setData(dataObj.optString("recordcurrency", "").equals("true") ? custAgeingDetailObj.optString("currencysymbol", "") + " " + amountStr : amountStr);
                                            ageingIntervalData.setStyle(datastyle);
                                            ageingTableDetailslist.add(ageingIntervalData);
                                            
                                            // Exchange Rate Amount
                                            exhangeAmount = amount * exchangeRate;
                                            exchangeAmountStr = authHandler.formattingdecimal(exhangeAmount, amountdigitdecimal);
                                            if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                                exchangeAmountStr = CustomDesignHandler.getAmountinCommaDecimal(exhangeAmount, amountdigitdecimal,countryid);
                                            } else if (amountdigitdecimal == 0) {
                                                exchangeAmountStr = (exchangeAmountStr.substring(0, exchangeAmountStr.length() - 1));
                                            }
                                            ageingIntervalData2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeAmountStr : exchangeAmountStr);
                                            ageingIntervalData2.setStyle(datastyle);
                                            ageingTableDetailslistInCustCurrency.add(ageingIntervalData2);
                                            
                                            if (cnt == 0) {
                                                CustomDesignLineItemProp ageingIntervalHeader = new CustomDesignLineItemProp();
                                                ageingIntervalHeader.setData("Current");
                                                ageingIntervalHeader.setWidth(String.valueOf(dividedWidth));
                                                ageingIntervalHeader.setStyle(headerstyle);
                                                ageingTableHeaderlist.add(ageingIntervalHeader);
                                                k++;
                                            }
                                            includecurrent =false;
                                            currentapply = -1;

                                        } else {
                                            CustomDesignLineItemProp ageingIntervalData = new CustomDesignLineItemProp();
                                            CustomDesignLineItemProp ageingIntervalData2 = new CustomDesignLineItemProp();
                                            from = (duration * (intervalCounter + currentapply)) + 1;
                                            to = duration * (intervalCounter + currentapply + 1);
                                            if (intervalType.equalsIgnoreCase("Days")) {
                                                amount = Double.parseDouble(custAgeingDetailObj.getString("amountdue" + (intervalCounter + currentapply + 2)));
                                            } else {
                                                amount = Double.parseDouble(custAgeingDetailObj.getString("amountdue_" + ((MonthList.size()-1-intervalCounter))));
                                            }
                                            amountStr = authHandler.formattingdecimal(amount,amountdigitdecimal);
                                            if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                                amountStr = CustomDesignHandler.getAmountinCommaDecimal(amount, amountdigitdecimal,countryid);
                                            } else if (amountdigitdecimal == 0) {
                                                amountStr = (amountStr.substring(0, amountStr.length() - 1));
                                            }
                                            ageingIntervalData.setData(dataObj.optString("recordcurrency", "").equals("true") ? custAgeingDetailObj.optString("currencysymbol", "") + " " + amountStr : amountStr);
                                            ageingIntervalData.setStyle(datastyle);
                                            ageingTableDetailslist.add(ageingIntervalData);
                                            
                                            // Exchange Rate Amount
                                            exhangeAmount = amount * exchangeRate;
                                            exchangeAmountStr = authHandler.formattingdecimal(exhangeAmount, amountdigitdecimal);
                                            if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                                exchangeAmountStr = CustomDesignHandler.getAmountinCommaDecimal(exhangeAmount, amountdigitdecimal,countryid);
                                            } else if (amountdigitdecimal == 0) {
                                                exchangeAmountStr = (exchangeAmountStr.substring(0, exchangeAmountStr.length() - 1));
                                            }
                                            ageingIntervalData2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeAmountStr : exchangeAmountStr);
                                            ageingIntervalData2.setStyle(datastyle);
                                            ageingTableDetailslistInCustCurrency.add(ageingIntervalData2);
                                            if (cnt == 0) {
                                                CustomDesignLineItemProp ageingIntervalHeader = new CustomDesignLineItemProp();
                                                String tmpString = intervalText;
                                                if (intervalType.equalsIgnoreCase("Months")) {
                                                    tmpString = tmpString.replace("#Month#",MonthList.get(k));
                                                    tmpString = tmpString.replace("#MonthNumber#", (k) +""); //ERP-28745
                                                    k++;
                                                } else {
                                                    tmpString = tmpString.replace("#From#",String.valueOf(from));
                                                    tmpString = tmpString.replace("#To#",String.valueOf(to));
                                                }
                                                ageingIntervalHeader.setData(tmpString);
                                                ageingIntervalHeader.setWidth(String.valueOf(dividedWidth));
                                                ageingIntervalHeader.setStyle(headerstyle);
                                                ageingTableHeaderlist.add(ageingIntervalHeader);
                                            }
                                        }
                                    }
                                    int intCount = 12; //ERP-28745
                                    if (intervalType.equalsIgnoreCase("Months")) {
                                        intCount = MonthList.size() - 1;
                                    } else {
                                        intervalCounter = intervalCounter + currentapply + 2;
                                        intCount = 8;
                                    }
                                    if (intervalCounter < intCount) {
                                        double restAmount = 0.0;
                                        for (int j = intervalCounter; j <= intCount; j++) {
                                            if (intervalType.equalsIgnoreCase("Days")) {
                                                restAmount += custAgeingDetailObj.getDouble("amountdue" + j);
                                            } else {
                                                restAmount += custAgeingDetailObj.getDouble("amountdue_" + ((MonthList.size()-1) - j));
                                            }
                                        }
                                        if (intervalType.equalsIgnoreCase("Days")) { // Days case - accrued balance already added in last interval
                                            restAmount = restAmount + (lineItemTotalAmount-totalamount);//Add accrued balance in last interval
                                        } else{ // Months case - accrued balance comes in opening field
                                            double accruedAmount = 0.0;
                                            accruedAmount = custAgeingDetailObj.optDouble("opening", 0.0);
                                            restAmount = restAmount + (lineItemTotalAmount-totalamount) + accruedAmount;//Add accrued balance in last interval
                                        }
                                        amountStr = authHandler.formattingdecimal(restAmount, amountdigitdecimal);
                                        if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                            amountStr = CustomDesignHandler.getAmountinCommaDecimal(restAmount, amountdigitdecimal,countryid);
                                        } else if (amountdigitdecimal == 0) {
                                            amountStr = (amountStr.substring(0, amountStr.length() - 1));
                                        }
                                        ageingdata.setData(dataObj.optString("recordcurrency", "").equals("true") ? custAgeingDetailObj.optString("currencysymbol", "") + " " + amountStr : amountStr);
                                        ageingdata.setStyle(datastyle);
                                        ageingTableDetailslist.add(ageingdata);
                                        
                                        // Exchange Rate Amount
                                        exhangeAmount = restAmount * exchangeRate;
                                        exchangeAmountStr = authHandler.formattingdecimal(exhangeAmount, amountdigitdecimal);
                                        if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                            exchangeAmountStr = CustomDesignHandler.getAmountinCommaDecimal(exhangeAmount, amountdigitdecimal,countryid);
                                        } else if (amountdigitdecimal == 0) {
                                            exchangeAmountStr = (exchangeAmountStr.substring(0, exchangeAmountStr.length() - 1));
                                        }
                                        ageingdata2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeAmountStr : exchangeAmountStr);
                                        ageingdata2.setStyle(datastyle);
                                        ageingTableDetailslistInCustCurrency.add(ageingdata2);
                                        if (cnt == 0) {
                                            if (intervalType.equalsIgnoreCase("Days")) {
                                                ageingheader.setData("> " + to + " Days");
                                            } else {
                                                if(intervalPlaceHolder.equalsIgnoreCase("MonthNumber")){ //ERP-28745
                                                    ageingheader.setData("> " + intervalText.replace("#MonthNumber#", String.valueOf(k)));
                                                } else{
                                                    ageingheader.setData("< " + MonthList.get(k));
                                                }
                                            }
                                            ageingheader.setWidth(String.valueOf(dividedWidth));
                                            ageingheader.setStyle(headerstyle);
                                            ageingTableHeaderlist.add(ageingheader);
                                        }
                                    } else{ 
                                        /*
                                         * If interval in document designer is greater than actual interval in UI
                                         * then add remaining amount and accrued amount to last interval in ageing table - for month case only
                                         */
                                        if (intervalType.equalsIgnoreCase("Months")){
                                            double accruedAmount = 0.0;
                                            double restAmount = 0.0;
                                            if(MonthList.size() >= noofintervals){
                                                while(((MonthList.size()-1) - intervalCounter) >= 0){
                                                    restAmount += custAgeingDetailObj.getDouble("amountdue_" + ((MonthList.size()-1) - intervalCounter));
                                                    intervalCounter++;
                                                }
                                            }
                                            accruedAmount = custAgeingDetailObj.optDouble("opening", 0.0);
                                            restAmount += accruedAmount;
                                            restAmount += (lineItemTotalAmount-totalamount);
                                            amountStr = authHandler.formattingdecimal(restAmount, amountdigitdecimal);

                                            ageingdata.setData(dataObj.optString("recordcurrency", "").equals("true") ? custAgeingDetailObj.optString("currencysymbol", "") + " " + amountStr : amountStr);
                                            ageingdata.setStyle(datastyle);
                                            ageingTableDetailslist.add(ageingdata);
                                            
                                            // Exchange Rate Amount
                                            exhangeAmount = restAmount * exchangeRate;
                                            exchangeAmountStr = authHandler.formattingdecimal(exhangeAmount, amountdigitdecimal);
                                            if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                                exchangeAmountStr = CustomDesignHandler.getAmountinCommaDecimal(exhangeAmount, amountdigitdecimal,countryid);
                                            } else if (amountdigitdecimal == 0) {
                                                exchangeAmountStr = (exchangeAmountStr.substring(0, exchangeAmountStr.length() - 1));
                                            }                                            
                                            ageingdata2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeAmountStr : exchangeAmountStr);
                                            ageingdata2.setStyle(datastyle);
                                            ageingTableDetailslistInCustCurrency.add(ageingdata2);

                                            if(intervalPlaceHolder.equalsIgnoreCase("MonthNumber")){ //ERP-28745
                                                ageingheader.setData("> " + intervalText.replace("#MonthNumber#", String.valueOf(k)));
                                            } else{
                                                if(MonthList.size() == k){
                                                    ageingheader.setData("< " + MonthList.get(--k));
                                                }
                                                else{
                                                    ageingheader.setData("< " + MonthList.get(k));
                                                }
                                            }
                                            ageingheader.setWidth(String.valueOf(dividedWidth));
                                            ageingheader.setStyle(headerstyle);
                                            ageingTableHeaderlist.add(ageingheader);
                                        }
                                    }
                                } else {
                                    if (cnt == 0) {
                                        ageingheader.setData(headerObj.optString("header", ""));
                                        ageingheader.setWidth(headerObj.optString("width", ""));
                                        ageingheader.setStyle(headerObj.optString("style", ""));
                                        ageingTableHeaderlist.add(ageingheader);
                                    }

                                    if (headerObj.optString("columnname").equals("cvname")) {
                                        ageingdata.setData(custAgeingDetailObj.optString("personname", ""));
                                        ageingdata2.setData(custAgeingDetailObj.optString("personname", ""));
                                    } else if (headerObj.optString("columnname").equals("total")) {
                                        int amountdigitdecimal = StringUtil.isNullOrEmpty(dataObj.optString("decimalpoint", ""))?0:Integer.parseInt(dataObj.optString("decimalpoint", ""));
                                        String totalamountstr = authHandler.formattingdecimal(lineItemTotalAmount, amountdigitdecimal);// Show ageing total amount as balance total amount
                                        if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                            totalamountstr = CustomDesignHandler.getAmountinCommaDecimal(lineItemTotalAmount, amountdigitdecimal,countryid);
                                        } else if (amountdigitdecimal == 0) {
                                            totalamountstr = (totalamountstr.substring(0, totalamountstr.length() - 1));
                                        }
                                        ageingdata.setData(totalamountstr);
                                        String customCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(custAgeingDetailObj.optString("currencysymbol", ""), companyid); 
                                        ageingdata.setData(dataObj.optString("recordcurrency", "").equals("true") ? customCurrencySymbol + " " + totalamountstr : totalamountstr);
                                        
                                        // Exchange Rate Amount
                                        double exhangeTotalAmount = lineItemTotalAmount * exchangeRate;
                                        String exchangeTotalAmountStr = authHandler.formattingdecimal(exhangeTotalAmount, amountdigitdecimal);
                                        ageingdata2.setData(exchangeTotalAmountStr);
                                        ageingdata2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeTotalAmountStr : exchangeTotalAmountStr);
                                    } else if (headerObj.optString("columnname").equals("Currency")) {
                                        ageingdata.setData(custAgeingDetailObj.optString("currencysymbol", ""));
                                        ageingdata2.setData(custVendCurrency);
                                    } else if(headerObj.optString("columnname").equals("accruedbalance")){ // Accrued Balance column
                                        String amountStr = "";
                                        int amountdigitdecimal = StringUtil.isNullOrEmpty(dataObj.optString("decimalpoint", ""))?0:Integer.parseInt(dataObj.optString("decimalpoint", ""));
                                        double accruedbalance = Double.parseDouble(StringUtil.isNullOrEmpty(custAgeingDetailObj.optString("accruedbalance", "")) ? "0" : custAgeingDetailObj.optString("accruedbalance", ""));
                                        amountStr = authHandler.formattingdecimal(accruedbalance, amountdigitdecimal);
                                        if (dataObj.has("commaamount") && dataObj.getString("commaamount").equals("true")) {
                                            amountStr = CustomDesignHandler.getAmountinCommaDecimal(accruedbalance, amountdigitdecimal, countryid);
                                        } else if (amountdigitdecimal == 0) {
                                            amountStr = (amountStr.substring(0, amountStr.length() - 1));
                                        }
                                        ageingdata.setData(dataObj.optString("recordcurrency", "").equals("true") ? custAgeingDetailObj.optString("currencysymbol", "") + " " + amountStr : amountStr);
                                        
                                        // Exchange Rate Accrued Balance Amount
                                        double exhangeAccruedBalance = accruedbalance * exchangeRate;
                                        String exchangeAccBalanceStr = authHandler.formattingdecimal(exhangeAccruedBalance, amountdigitdecimal);
                                        ageingdata2.setData(dataObj.optString("recordcurrency", "").equals("true") ? custVendCurrency + " " + exchangeAccBalanceStr : exchangeAccBalanceStr);
                                    }
                                    ageingdata.setStyle(dataObj.optString("style", ""));
                                    ageingdata2.setStyle(dataObj.optString("style", ""));
                                    ageingTableDetailslist.add(ageingdata);
                                    ageingTableDetailslistInCustCurrency.add(ageingdata2);
                                }
                            }
                            if(templateSubtype.equals("2")){
                                // If subtype is 2 then check for currency to show ageing details of that currency
                                if(currencyId.equals(custAgeingDetailObj.optString(Constants.currencyKey, ""))){
                                    rowDataList.add(ageingTableDetailslist);
                                }
                            } else{
                                rowDataList.add(ageingTableDetailslist);
                            }
                            // Show ageing details in customer/vendor currency
                            if(isCustomerVendorCurrency){
                                rowDataList.add(ageingTableDetailslistInCustCurrency);
                            }
                        }
                    }
                    ageingTableHTML = CustomDesignHandler.getAgeingTableHTMLByVelocityEngineNew(velocityEngine, ageingTableDetailslist, ageingTableHeaderlist, ageingTableStyle, rowDataList);
                    ageingTableElement.html(ageingTableHTML);
                    buildhtml = jsoupDoc.body().html();
                }
            }
            //Grouping Summary Table Start
            buildhtml = createGroupingSummaryTable(buildhtml, jArr, lineItemsArr, headerCurrency, headerCurrencyCode, countryid, companyid, velocityEngine);
            //Grouping Summary Table End
            
            //Calculate Formula value
            jsoupForFormulaBuilder = Jsoup.parse(buildhtml);
            formulaEles = (Elements) jsoupForFormulaBuilder.getElementsByAttribute(CustomDesignerConstants.ISFORMULA);
            for(int ind=0; ind < formulaEles.size(); ind++){
                try {
                    org.jsoup.nodes.Element formulaEle = formulaEles.get(ind);
                    String formula = formulaEle.html();
                    String formulaPlaceholder = formulaEle.attr("attribute");
                    int decimalPercision = StringUtil.isNullOrEmpty(formulaEle.attr("decimalprecision")) ? 2 : Integer.parseInt(formulaEle.attr("decimalprecision"));
                    String formulaName = formulaPlaceholder.replace("{PLACEHOLDER:", "").replace("}", "");
                    String formulValue = "";

                    if(!StringUtil.isNullOrEmpty(formula)){
                        formulValue = evaluateExpression(formula, decimalPercision);
                        double doubleVal = Double.parseDouble(formulValue);
                        boolean zeroValueAsBlank = allFieldParameters.optBoolean(formulaName.substring(1, formulaName.length()-1) + "showzerovalueasblank", false);
                        int showAmountInWords = allFieldParameters.optInt(formulaName.substring(1, formulaName.length() - 1) + "showAmountInWords", 0);
                        if (!StringUtil.isNullOrEmpty(formulaEle.attr("showAmountInWords"))) {
                            showAmountInWords = Integer.parseInt(formulaEle.attr("showAmountInWords"));
                        }
                        if (showAmountInWords == CustomDesignerConstants.IN_Document_Currency && !StringUtil.isNullObject(documentCurrencyObj)) {
                            formulValue = EnglishNumberToWordsObj.convert(doubleVal, documentCurrencyObj, countryLanguageId) + " Only.";
                            if (doubleVal == 0 && zeroValueAsBlank) {
                                formulValue = "";
                            }
                        } else if (showAmountInWords == CustomDesignerConstants.IN_Base_Currency && !StringUtil.isNullObject(baseCurrencyObj)) {
                            doubleVal = Double.parseDouble(authHandler.formattingdecimal((doubleVal * reverseExchangeRate), decimalPercision));
                            formulValue = EnglishNumberToWordsObj.convert(doubleVal, baseCurrencyObj, countryLanguageId) + " Only.";
                            if (doubleVal == 0 && zeroValueAsBlank) {
                                formulValue = "";
                            }
                        } else {
                            formulValue = CustomDesignHandler.getAmountinCommaDecimal(doubleVal, decimalPercision, countryid);
                            if(formulValue.startsWith("-")){
                                if (negativeValueIn == 1) {
                                    //No need to modification
                                } else if (negativeValueIn == 2) {
                                    formulValue = formulValue.replace("-", "");
                                    formulValue = "(" + formulValue + ")";
                                }
                            }

                            if (zeroValueAsBlank) {
                                formulValue = CustomDesignHandler.getZeroAmountAsBlank(formulValue);
                            }
                        }
                    }

                    formulaEle.html(formulValue);
                    formulaName = StringUtil.escapeArithmeticOperators(formulaName);
                    lineItemFirstRowHTML = lineItemFirstRowHTML.replaceAll(formulaName, formulValue);
                    lineItemLastRowHTML = lineItemLastRowHTML.replaceAll(formulaName, formulValue);
                    pageheaderhtml = pageheaderhtml.replaceAll(formulaName, formulValue);
                    pagefooterhtml = pagefooterhtml.replaceAll(formulaName, formulValue);
                } catch (Exception ex) {
                    Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            buildhtml = jsoupForFormulaBuilder.outerHtml();
            
            //Get page layout settings
            if (!StringUtil.isNullOrEmpty(pagelayoutproperty)) {
                JSONArray jArr1 = new JSONArray(pagelayoutproperty);
                for (int cnt = 0; cnt < jArr1.length(); cnt++) {
                    JSONObject jObj = jArr1.getJSONObject(cnt);
                    if (!StringUtil.isNullOrEmpty(jObj.optString("pagelayoutsettings", ""))) {
                        JSONObject pagePropertyArray = new JSONObject(jObj.optString("pagelayoutsettings", ""));
                        fontstylevalue = pagePropertyArray.optString("pagefont", "");
                        pagefontsize = pagePropertyArray.optString("pagefontsize", "12");
                        isExtendedGlobalTable = pagePropertyArray.optBoolean("isExtendedGlobalTable");
                        if(isExtendedGlobalTable){
                            adjustPageHeight = pagePropertyArray.optString("adjustPageHeight", "0");
                        }
                        pageSizeForExtGT = pagePropertyArray.optString("pageSizeForExtGT","a4");
                        pageOrientationForEXTGT = pagePropertyArray.optString("pageOrientationForEXTGT","portrait");
                        isPrePrinted = pagePropertyArray.optBoolean("ispreprinted");
                        isMultipleTransaction = pagePropertyArray.optBoolean(CustomDesignerConstants.IS_MULTIPLE_TRANSACTION, false);
                    }
                }
            }
            
            //Creating Details Table
            //Get all details table information used in template
            JSONArray allDetailsTableInfo = CustomDesignHandler.getAllDetailsTableInfo(jArr);
            //Iterate all Details Table
            for(int detailsTableCnt = 0; detailsTableCnt < allDetailsTableInfo.length(); detailsTableCnt++){
               
                JSONArray customizedDetailsTableCols = new JSONArray();
                JSONArray customizedDetailsTableHeaders = new JSONArray();
                
                boolean isDetailsTablePresent = false;
                String detailsTableParentRowID = "";
                String detailsTableID = "";
                String detailsTableSubType_id = "";
                String detailsTableSubType_value = "";
                //get details table info
                JSONObject detailsTableInfo = allDetailsTableInfo.getJSONObject(detailsTableCnt);
                //set details table info to respective variables
                if (detailsTableInfo.has(Constants.customizedDetailsTableCols) && detailsTableInfo.get(Constants.customizedDetailsTableCols) != null) {
                    customizedDetailsTableCols = (JSONArray) detailsTableInfo.get(Constants.customizedDetailsTableCols);
                }
                if (detailsTableInfo.has(Constants.customizedDetailsTableHeaders) && detailsTableInfo.get(Constants.customizedDetailsTableHeaders) != null) {
                    customizedDetailsTableHeaders = (JSONArray) detailsTableInfo.get(Constants.customizedDetailsTableHeaders);
                }
                if (detailsTableInfo.has(Constants.isDetailsTablePresent) && detailsTableInfo.get(Constants.isDetailsTablePresent) != null) {
                    isDetailsTablePresent = (Boolean) detailsTableInfo.get(Constants.isDetailsTablePresent);
                }
                if (detailsTableInfo.has(Constants.detailsTableParentRowID) && detailsTableInfo.get(Constants.detailsTableParentRowID) != null) {
                    detailsTableParentRowID = (String) detailsTableInfo.get(Constants.detailsTableParentRowID);
                }
                if (detailsTableInfo.has(Constants.detailsTableSubType_id) && detailsTableInfo.get(Constants.detailsTableSubType_id) != null) {
                    detailsTableSubType_id = (String) detailsTableInfo.get(Constants.detailsTableSubType_id);
                }
                if (detailsTableInfo.has(Constants.detailsTableSubType_value) && detailsTableInfo.get(Constants.detailsTableSubType_value) != null) {
                    detailsTableSubType_value = (String) detailsTableInfo.get(Constants.detailsTableSubType_value);
                }
                if (detailsTableInfo.has(Constants.detailsTableID) && detailsTableInfo.get(Constants.detailsTableID) != null) {
                    detailsTableID = (String) detailsTableInfo.get(Constants.detailsTableID);
                }
                
                if(isDetailsTablePresent){
                    ArrayList<CustomDesignLineItemProp> headerlist = new ArrayList();
                    List prodlist = new ArrayList();
                    List totallist = new ArrayList();
                    jsoupDoc = Jsoup.parse(buildhtml);
                    //get Details Table element
                    org.jsoup.nodes.Element detailsTableElement = jsoupDoc.getElementById(detailsTableParentRowID);
                    String detailsTablehtml = "";

                    if (detailsTableElement != null) {
                        String top = "0px", left = "0px", tablewidth = "0";
                        //Configure table Headers
                        JSONArray columnarr = new JSONArray();
                        Set colnoset = new HashSet();
                        int fieldcnt = 0;
                        for (int cnt = 0; cnt < customizedDetailsTableCols.length(); cnt++) {
                            if (!(colnoset.contains(customizedDetailsTableCols.getJSONObject(cnt).optInt("colno", cnt)))) {
                                colnoset.add(customizedDetailsTableCols.getJSONObject(cnt).optInt("colno", cnt));
                                columnarr.put(customizedDetailsTableCols.getJSONObject(cnt));
                            }
                        }
                        for (int cnt1 = 0; cnt1 < columnarr.length(); cnt1++) {
                            fieldcnt = 0;
                            JSONArray fields = new JSONArray();
                            for (int cnt = 0; cnt < customizedDetailsTableCols.length(); cnt++) {
                                if (columnarr.getJSONObject(cnt1).optInt("colno", cnt1) == customizedDetailsTableCols.getJSONObject(cnt).optInt("colno", cnt)) {
                                    fields.put(cnt);
                                }
                            }
                            columnarr.getJSONObject(cnt1).put("fields", fields);
                        }

                        JSONArray headerJsonArr = null;
                        if (customizedDetailsTableHeaders != null && customizedDetailsTableHeaders.length() > 0) {
                            headerJsonArr = customizedDetailsTableHeaders;
                        } else {
                            headerJsonArr = columnarr;
                        }
                        //Create table header
                        for (int headerCnt = 0; headerCnt < headerJsonArr.length(); headerCnt++) {
                            JSONObject colInfo = headerJsonArr.getJSONObject(headerCnt);
                            CustomDesignLineItemProp headerprop = new CustomDesignLineItemProp();
                            String headerproperty = colInfo.optString("headerproperty", "");
                            if (!headerproperty.equals("")) {
                                JSONObject jobjheader = new JSONObject(headerproperty);
                                alignment = jobjheader.optString("alignment", "left");
                                backgroundcolor = jobjheader.optString("backgroundcolor", "#FFFFFF");
                                changedlabel = jobjheader.optString("changedlabel", "");
                                headerStyle = jobjheader.optString("style", "border:1px solid;padding: 1px;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;");
                            }
                            //If number field
                            if (colInfo.getString("xtype").equals("2")) {//xtype-2
                                if (!headerproperty.equals("")) {
                                    if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("0")) {
                                        headerprop.setData((changedlabel) + "(" + headerCurrency + ")");
                                    } else {
                                        headerprop.setData(changedlabel);
                                    }
                                    headerprop.setAlign(alignment);
                                    if (backgroundcolor.isEmpty()) {
                                        headerprop.setBgcolor("#C0C0C0");
                                    } else {
                                        headerprop.setBgcolor(backgroundcolor);
                                    }
                                    headerprop.setStyle(headerStyle);
                                } else {
                                    //Set currency values in header
                                    if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("0")) { //if symbol(0) then append currency symbol
                                        if(colInfo.getString("label").contains("#Currency Symbol#")){
                                            headerprop.setData(colInfo.getString("label").replace("#Currency Symbol#", headerCurrency));// + "(" + headerCurrencyCode + ")");
                                        } else{
                                            headerprop.setData(colInfo.getString("label") + "(" + headerCurrency + ")");
                                        }
                                    } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("1")) { //if code(1) then append currency code
                                        if(colInfo.getString("label").contains("#Currency Code#")){
                                            headerprop.setData(colInfo.getString("label").replace("#Currency Code#", headerCurrencyCode));// + "(" + headerCurrencyCode + ")");
                                        } else{
                                            headerprop.setData(colInfo.getString("label") + "(" + headerCurrencyCode + ")");
                                        }
                                    } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("2")) { //if code(2) then append base currency symbol
                                        if(colInfo.getString("label").contains("#Base Currency Symbol#")){
                                            headerprop.setData(colInfo.getString("label").replace("#Base Currency Symbol#", baseCurrencySymbol));
                                        } else{
                                            headerprop.setData(colInfo.getString("label") + "(" + baseCurrencySymbol + ")");
                                        }
                                    } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("3")) { //if code(3) then append base currency code
                                        if(colInfo.getString("label").contains("#Base Currency Code#")){
                                            headerprop.setData(colInfo.getString("label").replace("#Base Currency Code#", baseCurrencyCode));
                                        } else{
                                            headerprop.setData(colInfo.getString("label") + "(" + baseCurrencyCode + ")");
                                        }
                                    } else {
                                        headerprop.setData(colInfo.getString("label"));
                                    }
                                    headerprop.setAlign("left");
                                    headerprop.setBgcolor("#C0C0C0");
                                    headerprop.setStyle(" padding: 1px; " + colInfo.optString("style", "border:1px solid;padding: 0.5em;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;") + "  position:unset; ");
                                }
                            } else if (!headerproperty.equals("")) {//if headerproperty is not empty//xtype-1
                                if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true")) {
                                    headerprop.setData((changedlabel) + "(" + headerCurrency + ")");
                                } else {
                                    headerprop.setData(changedlabel);
                                }
                                headerprop.setAlign(alignment);
                                if (backgroundcolor.isEmpty()) {
                                    headerprop.setBgcolor("#C0C0C0");
                                } else {
                                    headerprop.setBgcolor(backgroundcolor);
                                }
                                headerprop.setStyle(headerStyle);
                            } else {//headerproperty is empty
                                headerprop.setData(colInfo.optString("label", ""));
                                headerprop.setAlign("left");
                                headerprop.setBgcolor("#C0C0C0");
                                headerprop.setStyle(" padding: 1px; " + colInfo.optString("style", "border:1px solid;padding: 0.5em;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;") + "  position:unset; ");
                            }
                            headerprop.setWidth(colInfo.getString("colwidth").concat("%"));
                            headerlist.add(headerprop);
                        }

                        Boolean showtotal = false;
                        int totalCheckIndex = 0;
                        String decimalpoints = "2";
                        String decimalValue = "0";
                        Boolean totalCheck = false;
                        ArrayList<CustomDesignLineItemProp> rowtotallist = new ArrayList();
                        for (int count = 0; count < columnarr.length(); count++) {
                            rowtotallist.add(count, new CustomDesignLineItemProp());
                        }
                        ArrayList<String> headerTotal = new ArrayList<String>();
                        for (int count = 0; count < columnarr.length(); count++) {
                            headerTotal.add(count, "0.00");
                        }
                        for (int headerCnt = 0; headerCnt < columnarr.length(); headerCnt++) {
                            JSONObject colInfo = customizedDetailsTableCols.getJSONObject(headerCnt);
                            if (colInfo.optString("showtotal", "false").equals("true")) {
                                showtotal = true;
                                break;
                            }
                        }
                        //Create details table rows
                        for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
                            JSONObject itemData = lineItemsArr.getJSONObject(cnt);
                            //If details table data available then proceed
                            if (itemData.has("isDetailsTableData")) {
                                //get detail table data based on subtype
                                JSONArray detailsTableArr = itemData.getJSONArray(detailsTableSubType_id);
                                //Iterate over details table data fetched above
                                for(int detailsRow = 0; detailsRow < detailsTableArr.length(); detailsRow++) {
                                    ArrayList<CustomDesignLineItemProp> rowDatalist = new ArrayList();
                                    JSONObject detailsTableData = detailsTableArr.getJSONObject(detailsRow);
                                    //Iterate columns of Details Table
                                    for (int headerCnt = 0; headerCnt < columnarr.length(); headerCnt++) {
                                        int fieldsLength = columnarr.getJSONObject(headerCnt).getJSONArray("fields").length();
                                        JSONArray fields = columnarr.getJSONObject(headerCnt).getJSONArray("fields");
                                        String prodData = "";
                                        String prodDataHTML = "";
                                        String prodData1 = "";
                                        String style = "";

                                        int type;//for field type - xtype
                                        CustomDesignLineItemProp prop = new CustomDesignLineItemProp();
                                        String valign = "top";
                                        //Iterate fields used in columns
                                        for (int fieldCnt = 0; fieldCnt < fieldsLength; fieldCnt++) {
                                            //get column info
                                            JSONObject colInfo = customizedDetailsTableCols.getJSONObject(fields.getInt(fieldCnt));
                                            type = colInfo.optInt("type", 0);
                                            style = colInfo.optString("style", "");
                                            valign = colInfo.optString("valign", "top");
                                            CustomDesignLineItemProp totalListProp = new CustomDesignLineItemProp();
                                            if (type == Constants.lineItemSelectFieldType) {//If Select field
                                                if (detailsTableData.has(colInfo.getString("fieldid"))) {
                                                    prodData = (detailsTableData.get(colInfo.getString("fieldid")).toString()) + "</br>";
                                                    //If number field
                                                    if (colInfo.getString("xtype").equals("2")) {
                                                        double decimalRoundValue = 0;
                                                        double dobValue = 0;
                                                        int intValue = 0;
                                                        if (!StringUtil.isNullOrEmpty(detailsTableData.get(colInfo.getString("fieldid")).toString())) {
                                                            if (colInfo.has("decimalpoint") && !colInfo.getString("decimalpoint").toString().equals("undefined") && !colInfo.getString("decimalpoint").toString().equals("") && !colInfo.getString("decimalpoint").toString().equals("null")) {
                                                                //decimal point configuration in line item
                                                                decimalpoints = colInfo.getString("decimalpoint");
                                                                intValue = Integer.parseInt(decimalpoints);

                                                                dobValue = Double.parseDouble(detailsTableData.get(colInfo.getString("fieldid")).toString());
                                                                decimalRoundValue = authHandler.round(dobValue, intValue);
                                                                //make comma seperated value
                                                                if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                    decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue, countryid);
                                                                } else {
                                                                    decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                    if (intValue == 0) {//if comma is not given and decimal point is 0
                                                                        decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                    }
                                                                }
                                                                //append currency
                                                                if(colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex)){ //if symbol(0) then append currency symbol
                                                                    prodData = headerCurrency + " " + decimalValue + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                                    prodData = headerCurrencyCode + " " + decimalValue + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                                    prodData = baseCurrencySymbol + " " + decimalValue + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                                    prodData = baseCurrencyCode + " " + decimalValue + "</br>";
                                                                } else{
                                                                    prodData = decimalValue + "</br>";
                                                                }
                                                            } else {
                                                                String valueStr = detailsTableData.get(colInfo.getString("fieldid")).toString();
                                                                //make comma seperated value
                                                                if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                    dobValue = Double.parseDouble(valueStr);
                                                                    valueStr = CustomDesignHandler.getAmountinCommaForm(dobValue,countryid);
                                                                }
                                                                //append currency to value
                                                                if(colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex)){//if symbol(0) then append currency symbol
                                                                    prodData = headerCurrency + " " + valueStr + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                                    prodData = headerCurrencyCode + " " + valueStr + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                                    prodData = baseCurrencySymbol + " " + valueStr + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                                    prodData = baseCurrencyCode + " " + valueStr + "</br>";
                                                                } else{
                                                                    prodData = valueStr + "</br>";
                                                                }
                                                            }
                                                        } else {
                                                            prodData = ("");
                                                        }
                                                    }
                                                    //Show total of column
                                                    if (showtotal) {
                                                        if (colInfo.getString("showtotal").equals("true")) {
                                                            if (colInfo.getString("xtype").equals("2")) {
                                                                decimalpoints = colInfo.getString("decimalpoint");
                                                                int intValue = Integer.parseInt(decimalpoints);
                                                                totalListProp.setAlign("rightDouble.parseDouble(caltotal)");
                                                                String caltotal = "0";
                                                                if (!StringUtil.isNullOrEmpty(detailsTableData.get(colInfo.getString("fieldid")).toString())) {
                                                                    caltotal = authHandler.formattedAmount((Double.parseDouble(detailsTableData.get(colInfo.getString("fieldid")).toString())) + Double.parseDouble(headerTotal.get(headerCnt).toString()), companyid);
                                                                    headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), intValue));
                                                                    totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                                } else {
                                                                    headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(headerTotal.get(headerCnt).toString()), intValue));
                                                                    totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                                }
                                                            } else {
                                                                if (colInfo.getString("xtype").equals("1")) {
                                                                    if (!totalCheck) {
                                                                        totalCheck = true;
                                                                        totalCheckIndex = headerCnt;
                                                                    }
                                                                    if (totalCheckIndex == headerCnt) {
                                                                        totalListProp.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                                                                    } else {
                                                                        /*
                                                                        * calculating total for the fields having xtype = 1
                                                                        */
                                                                        if (!StringUtil.isNullOrEmpty(detailsTableData.get(colInfo.getString("fieldid")).toString())) {
                                                                            String totString = detailsTableData.get(colInfo.getString("fieldid")).toString();
                                                                            String caltotal = "0";
                                                                            double total = 0;
                                                                            totalListProp.setAlign("rightDouble.parseDouble(caltotal)");
                                                                            String[] tempStrArr = totString.split("!##");
                                                                            if(isNumeric(tempStrArr[0].trim().replaceAll(",", ""))) {
                                                                                for (int index = 0; index < tempStrArr.length; index++) {
                                                                                    String tempString = tempStrArr[index].trim().replaceAll(",", "");
                                                                                    total += Double.parseDouble(tempString);
                                                                                }
                                                                                caltotal = authHandler.formattedAmount(total + Double.parseDouble(headerTotal.get(headerCnt).toString()), companyid);
                                                                                headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), Constants.AMOUNT_DIGIT_AFTER_DECIMAL));
                                                                                totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                                            } else {
                                                                                totalListProp.setData("");
                                                                            }
                                                                        }
                                                                        else {
                                                                            totalListProp.setData("");
                                                                        }
                                                                    }

                                                                } else {
                                                                    totalListProp.setData("");
                                                                }
                                                            }
                                                        } else {
                                                            if (colInfo.getString("xtype").equals("1")) {
                                                                if (!totalCheck) {
                                                                    totalCheck = true;
                                                                    totalCheckIndex = headerCnt;
                                                                }
                                                                if (totalCheckIndex == headerCnt) {
                                                                    totalListProp.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                                                                } else {
                                                                    totalListProp.setData("");
                                                                }
                                                            } else {
                                                                totalListProp.setData("");
                                                            }
                                                        }
                                                    }
                                                    rowtotallist.set(headerCnt, totalListProp);
                                                } else {// Custom field
                                                    if (detailsTableData.has("Custom_" + colInfo.getString("label"))) {
                                                        prodData = (detailsTableData.get("Custom_" + colInfo.getString("label")).toString()) + "</br>";
                                                        if (colInfo.getString("xtype").equals("2")) {
                                                            prodData = (authHandler.formattedAmount(Double.parseDouble(detailsTableData.get("Custom_" + colInfo.getString("label")).toString()), companyid)) + "</br>";
                                                        } else {
                                                        }
                                                    } else if (showtotal) {
                                                        if (colInfo.getString("showtotal").equals("true") && colInfo.getString("xtype").equals("2")) {
                                                            totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                        } else {
                                                            totalListProp.setData("");
                                                        }
                                                        rowtotallist.set(headerCnt, totalListProp);
                                                    } else {
                                                        prodData = "&nbsp;";
                                                    }
                                                }
                                            } else if (type == 3) {// If Image
                                                if (detailsTableData.has(colInfo.getString("fieldid"))) {
                                                    prodData = "<img style='width:100%;height:100%' src='" + detailsTableData.getString(colInfo.getString("fieldid")) + "'></img>";
                                                } else {
                                                    prodData = "<img style='width:100%;height:100%' src='../images/s.gif'></img>";
                                                }
                                                if (!totalCheck) {
                                                    totalCheck = true;
                                                    totalCheckIndex = headerCnt;
                                                }
                                                if (totalCheckIndex == headerCnt) {
                                                    totalListProp.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                                                } else {
                                                    totalListProp.setData("");
                                                }
                                                rowtotallist.set(headerCnt, totalListProp);

                                            } else {// If Static Text
                                                prodData = colInfo.optString("label", "");
                                            }
                                            String fieldId = colInfo.optString("fieldid", " ");
                                            String dimensionValue = colInfo.optString("dimensionvalue", "2");
                                            String valueSeparator = colInfo.optString("valueseparator", "comma");
                                            if (fieldId.equalsIgnoreCase(CustomDesignerConstants.WAREHOUSE) || fieldId.equalsIgnoreCase(CustomDesignerConstants.LOCATION)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.BatchNumber) || fieldId.equalsIgnoreCase(CustomDesignerConstants.SerialNumber)) {
                                                if (!StringUtil.isNullOrEmpty(prodData)) {
                                                    prodData = replaceWithValueSeperator(prodData, valueSeparator);
                                                }
                                            }

                                            if (!StringUtil.isNullOrEmpty(prodData)) {
                                                if (dimensionValue.equals("0") && prodData.contains("<br>")) {//Show only Title of dimension 
                                                    prodData = prodData.substring(0, prodData.indexOf("<br>"));
                                                } else if (dimensionValue.equals("1") && prodData.contains("<br>")) {//Show only description of dimension
                                                    prodData = prodData.substring(prodData.indexOf("<br>"), prodData.length()-1);
                                                }
                                                if(colInfo.optString("fieldid", " ").equals(CustomDesignerConstants.imageTag) && prodData.contains("s.gif")){
                                                    prodDataHTML = "<div></div>";
                                                } else{
                                                    // Replace \n with <br> tag for representation of value in print
                                                    prodData = prodData.replaceAll("\\n", "<br>");
                                                    prodDataHTML = "<div style=\"" + style + "\">" + prodData + "</div>";
                                                }

                                            }
                                            if (fieldcnt == fieldsLength - 1) {
                                                prodData1 += prodDataHTML;
                                            } else {
                                                prodData1 += prodDataHTML + "<!-- -->";
                                                prodDataHTML="";
                                            }
                                        }
                                        prop.setData(prodData1);
                                        prop.setValign(valign);
                                        rowDatalist.add(prop);
                                    }
                                    prodlist.add(rowDatalist);
                                }
                            }
                        }
                        totallist.add(rowtotallist);
                        ArrayList finalSummaryData = new ArrayList();
                        //get margins of details table
                        String margin = AllDetailsTableHeaderProperties.optString(detailsTableID+"_margin", "0 0 0 0");
                        //get width of details table
                        widthOfTable = AllDetailsTableHeaderProperties.optInt(detailsTableID+"_width", 100);
                        //set detaila table header properties
                        JSONObject DetailsTableHeaderProperties = new JSONObject();
                        DetailsTableHeaderProperties.put("fontsize", AllDetailsTableHeaderProperties.optString(detailsTableID+"_fontsize", ""));
                        DetailsTableHeaderProperties.put("align", AllDetailsTableHeaderProperties.optString(detailsTableID+"_align", ""));
                        DetailsTableHeaderProperties.put("bordercolor", AllDetailsTableHeaderProperties.optString(detailsTableID+"_bordercolor", ""));
                        DetailsTableHeaderProperties.put("bold", AllDetailsTableHeaderProperties.optBoolean(detailsTableID+"_bold", false));
                        DetailsTableHeaderProperties.put("italic", AllDetailsTableHeaderProperties.optBoolean(detailsTableID+"_italic", false));
                        DetailsTableHeaderProperties.put("underline", AllDetailsTableHeaderProperties.optBoolean(detailsTableID+"_underline", false));
                        DetailsTableHeaderProperties.put("isDetailsTable", true);
                        DetailsTableHeaderProperties.put("detailsTableId", "idDtailsTable"+detailsTableCnt);
                        //create details table html with proper border and properties
                        detailsTablehtml = CustomDesignHandler.getLineDataHTMLByVelocityEngineNew(velocityEngine, prodlist, headerlist, top, left, tablewidth, showtotal, totallist,
                                    pagelayoutproperty, "0px", finalSummaryData, DetailsTableHeaderProperties, widthOfTable, margin, "", "", false, false, false);
                        //get classes applied to details table
                        Set<String> classSet = detailsTableElement.classNames();
                        //remove class and style attributes from details table element
                        detailsTableElement.removeAttr("class");
                        detailsTableElement.removeAttr("style");
                        if ( classSet.contains("joinnextrow") ) {
                            detailsTableElement.addClass("joinnextrow");
                        }
                        //set detial table final html to details table element
                        detailsTableElement.html(detailsTablehtml);
                        buildhtml = jsoupDoc.body().html();
                    }
                }
            }
            
            /**
             * Details Table Ends
             */
            
            /**
             * Checklist Table Starts
             */
            boolean isChecklistTablePresent = false;
            String checklistTableParentRowid = "";
            String checklistValue = "";
            String checklistTableStyle = "";
            JSONArray checklistTableHeaderItems = new JSONArray();
            JSONArray checklistTableDataItems = new JSONArray();
            if(moduleid == Constants.MRP_WORK_ORDER_MODULEID){
                HashMap<String, Object> checklistTableMap = CustomDesignHandler.getChecklistTableDetails(jArr);
                if (checklistTableMap.containsKey(Constants.isChecklistTablePresent) && checklistTableMap.get(Constants.isChecklistTablePresent) != null) {
                    isChecklistTablePresent = (Boolean) checklistTableMap.get(Constants.isChecklistTablePresent);
                }
                if (checklistTableMap.containsKey("checklistTableHeaderItems") && checklistTableMap.get("checklistTableHeaderItems") != null) {
                    checklistTableHeaderItems = (JSONArray) checklistTableMap.get("checklistTableHeaderItems");
                }
                if (checklistTableMap.containsKey("checklistTableDataItems") && checklistTableMap.get("checklistTableDataItems") != null) {
                    checklistTableDataItems = (JSONArray) checklistTableMap.get("checklistTableDataItems");
                }
                if (checklistTableMap.containsKey("checklistTableParentRowid") && checklistTableMap.get("checklistTableParentRowid") != null) {
                    checklistTableParentRowid =  (checklistTableMap.get("checklistTableParentRowid").toString());
                }
                if (checklistTableMap.containsKey("checklistValue") && checklistTableMap.get("checklistValue") != null) {
                    checklistValue =  (checklistTableMap.get("checklistValue").toString());
                }
                if (checklistTableMap.containsKey("checklistTableStyle") && checklistTableMap.get("checklistTableStyle") != null) {
                    checklistTableStyle =  (checklistTableMap.get("checklistTableStyle").toString());
                }
                if (isChecklistTablePresent) {
                    String checklistTableHTML = "";
                    jsoupDoc = Jsoup.parse(buildhtml);
                    org.jsoup.nodes.Element checklistTableElement = jsoupDoc.getElementById(checklistTableParentRowid);
                    JSONArray checklistDetailJarr = new JSONArray();
                    for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
                        JSONObject itemData = lineItemsArr.getJSONObject(cnt);
                        if(itemData.has("isChecklistTableData") && itemData.optBoolean("isChecklistTableData", false)){
                            checklistDetailJarr = itemData.optJSONArray("checklistTableData");
                            break;
                        }
                    }
                    for (int cnt = 0; cnt < checklistDetailJarr.length(); cnt++) {
                        ArrayList<CustomDesignLineItemProp> checklistTableHeaderlist = new ArrayList();
                        ArrayList<CustomDesignLineItemProp> checklistTableDetailslist = null;
                        List rowDataList = new ArrayList();
                        JSONObject checklistDetailObj = checklistDetailJarr.getJSONObject(cnt);
                        checklistTableDetailslist = new ArrayList();
                        if (checklistTableElement != null) {
                            for (int headerCnt = 0; headerCnt < checklistTableHeaderItems.length(); headerCnt++) {
                                JSONObject headerObj = checklistTableHeaderItems.getJSONObject(headerCnt);
                                JSONObject dataObj = checklistTableDataItems.optJSONObject(headerCnt);
                                if(dataObj==null){
                                    dataObj=headerObj;
                                }
                                CustomDesignLineItemProp checklistheader = new CustomDesignLineItemProp();
                                CustomDesignLineItemProp checklistdata = new CustomDesignLineItemProp();
                                if (headerObj.optString("columnname", "").equalsIgnoreCase("Checklist")) {
                                    int width = headerObj.optInt("width", 0);
                                    String headerstyle = headerObj.optString("style", "");
                                    String widthString = headerstyle.substring(headerstyle.indexOf("width:"), headerstyle.indexOf(";", headerstyle.indexOf("width:")));
                                    headerstyle = headerstyle.replace(widthString, "");
                                    String datastyle = dataObj.optString("style", "");
                                    datastyle = datastyle.replace(widthString, "");

                                    String checklistHeaders = checklistDetailObj.optString("headers", "");
                                    String[] checklistHeadersArr = checklistHeaders.split("!##");

                                    int dividedWidth = width / checklistHeadersArr.length;
                                    for (int checklistCnt = 0; checklistCnt < checklistHeadersArr.length; checklistCnt++) {
                                        checklistdata = new CustomDesignLineItemProp();
                                        CustomDesignLineItemProp checklistHeader = new CustomDesignLineItemProp();
                                        checklistHeader.setData(checklistHeadersArr[checklistCnt]);
                                        checklistHeader.setWidth(String.valueOf(dividedWidth));
                                        checklistHeader.setStyle(headerstyle);
                                        checklistTableHeaderlist.add(checklistHeader);

                                        String value = "";
                                        if(!StringUtil.isNullOrEmpty(checklistValue)) {
                                            String[] checklistVal = checklistValue.replace("[", "").replace("]", "").split(",");
                                            for(int valCnt = 0; valCnt < checklistVal.length; valCnt++){
                                                String key = checklistVal[valCnt];
                                                key = key.substring(1, key.length()-1).trim();
                                                String data = checklistDetailObj.optString(checklistHeadersArr[checklistCnt]+"_"+key, "");
                                                if(!StringUtil.isNullOrEmpty(data)){
                                                   value += data + ", ";
                                                }
                                            }
                                            if(!StringUtil.isNullOrEmpty(value)){
                                                value = value.substring(0, value.length() - 2);
                                            }
                                        } else{
                                            value = checklistDetailObj.optString(checklistHeadersArr[checklistCnt]+"_rating", "");
                                        }
                                        checklistdata.setData(value);
                                        checklistdata.setStyle(datastyle);
                                        checklistTableDetailslist.add(checklistdata);
                                    }
                                } else {
                                    checklistheader.setData(headerObj.optString("header", ""));
                                    checklistheader.setWidth(headerObj.optString("width", ""));
                                    checklistheader.setStyle(headerObj.optString("style", ""));
                                    checklistTableHeaderlist.add(checklistheader);

                                    if (headerObj.optString("columnname").equals("TaskName")) {
                                        checklistdata.setData(checklistDetailObj.optString("taskName", ""));
                                    }
                                    checklistdata.setStyle(dataObj.optString("style", ""));
                                    checklistTableDetailslist.add(checklistdata);
                                }
                            }
                            rowDataList.add(checklistTableDetailslist);
                        }
                        checklistTableHTML += CustomDesignHandler.getAgeingTableHTMLByVelocityEngineNew(velocityEngine, checklistTableDetailslist, checklistTableHeaderlist, checklistTableStyle, rowDataList);
                    }
                    checklistTableElement.html(checklistTableHTML);
                    buildhtml = jsoupDoc.body().html();
                }
            }
            /**
             * Checklist Table Ends
             */
            
            String lineTableColumnCSS = "";
            
            if (isLineItemPresent) {
                /*
                 * append Line Items
                 */
                ArrayList<CustomDesignLineItemProp> headerlist = new ArrayList();
                List prodlist = new ArrayList();
                List totallist = new ArrayList();
                jsoupDoc = Jsoup.parse(buildhtml);
                org.jsoup.nodes.Element itemListElement = jsoupDoc.getElementById(lineitemTableParentRowID);
//                new JSONArray(pagelayoutproperty).getJSONObject(0).getJSONObject("pagelayoutsettings").get("ispreprinted");
//                JSONObject pageLayoutSettings = new JSONArray(pagelayoutproperty).getJSONObject(0);
//                isPrePrinted = pageLayoutSettings.has("pagelayoutsettings") ? pageLayoutSettings.getJSONObject("pagelayoutsettings").getBoolean("ispreprinted") : false;
                if(isPrePrinted){
                    lineTableColumnCSS = itemListElement.getElementById("itemlistcontainer").parent().attr("style");
                    lineTableColumnCSS = lineTableColumnCSS.replace(lineTableColumnCSS.substring(lineTableColumnCSS.indexOf("display"), lineTableColumnCSS.indexOf(";",lineTableColumnCSS.indexOf("display"))+2), "");
                }
                if (itemListElement != null) {
                    String top = "0px", left = "0px", tablewidth = String.valueOf(lineitemwidth);
//                    org.jsoup.nodes.Element mainDiv = itemListElement;
//                    Attributes styleAtt = mainDiv.attributes();
//                    List<Attribute> attList = styleAtt.asList();
//                    for (Attribute a : attList) {
//                        if (a.getKey().equals("style")) {
//                            String[] items = a.getValue().trim().split(";");
//                            for (String item : items) {
//                                String[] itemValues = item.split(":");
//                                if (itemValues[0].trim().equals("top")) {
//                                    top = itemValues[1];
//                                } else if (itemValues[0].trim().equals("left")) {
//                                    left = itemValues[1];
//                                } else if (itemValues[0].trim().equals("width")) {
//                                    tablewidth = itemValues[1];
//                                }
//                            }
//                        }
//                    }

                    /*
                     * Configure Line Headers
                     */
//                    TreeMap<String, String> lineCols = LineItemColumnModuleMapping.InvoiceProductLineMap;
                    JSONArray columnarr = new JSONArray();
                    Set colnoset = new HashSet();
                    int fieldcnt = 0;
                    for (int cnt = 0; cnt < customizedlineItems.length(); cnt++) {
                        if (!(colnoset.contains(customizedlineItems.getJSONObject(cnt).optInt("colno", cnt)))) {
                            colnoset.add(customizedlineItems.getJSONObject(cnt).optInt("colno", cnt));
                            columnarr.put(customizedlineItems.getJSONObject(cnt));
                        }
                    }
                    for (int cnt1 = 0; cnt1 < columnarr.length(); cnt1++) {
                        fieldcnt = 0;
                        JSONArray fields = new JSONArray();
                        for (int cnt = 0; cnt < customizedlineItems.length(); cnt++) {
                            if (columnarr.getJSONObject(cnt1).optInt("colno", cnt1) == customizedlineItems.getJSONObject(cnt).optInt("colno", cnt)) {
                                fields.put(cnt);
                            }
                        }
                        columnarr.getJSONObject(cnt1).put("fields", fields);
                    }

                    JSONArray headerJsonArr = null;
                    if (customizedheaderItems != null && customizedheaderItems.length() > 0) {
                        headerJsonArr = customizedheaderItems;
                    } else {
                        headerJsonArr = columnarr;
                    }

                    for (int headerCnt = 0; headerCnt < headerJsonArr.length(); headerCnt++) {
                        JSONObject colInfo = headerJsonArr.getJSONObject(headerCnt);
//                        if (lineCols.containsKey(colInfo.getString("fieldid"))) {
                        CustomDesignLineItemProp headerprop = new CustomDesignLineItemProp();
//                            JSONObject staticColInfo = new JSONObject(lineCols.get(colInfo.getString("fieldid")));
                        String headerproperty = colInfo.optString("headerproperty", "");
                        if (!headerproperty.equals("")) {
                            JSONObject jobjheader = new JSONObject(headerproperty);
                            alignment = jobjheader.optString("alignment", "left");
                            backgroundcolor = jobjheader.optString("backgroundcolor", "#FFFFFF");
                            changedlabel = jobjheader.optString("changedlabel", "");
                            headerStyle = jobjheader.optString("style", "border:1px solid;padding: 1px;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;");
                        }
                        if (colInfo.getString("xtype").equals("2")) {//xtype-2
                            if (!headerproperty.equals("")) {
                                if ((colInfo.has("baserate") && colInfo.getString("baserate").equals("true") && isGstIncluded == true)) {
                                    if ((colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true"))) {
                                        headerprop.setData(changedlabel + " Including GST" + "(" + headerCurrency + ")");
                                    } else {
                                        headerprop.setData(changedlabel + " Including GST");
                                    }
                                } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true")) {
                                    headerprop.setData((changedlabel) + "(" + headerCurrency + ")");
                                } else {
                                    headerprop.setData(changedlabel);
                                }
                                headerprop.setAlign(alignment);
                                if (backgroundcolor.isEmpty()) {
                                    headerprop.setBgcolor("#C0C0C0");
                                } else {
                                    headerprop.setBgcolor(backgroundcolor);
                                }
                                headerprop.setStyle(headerStyle);
                            } else {
                                if ((colInfo.has("baserate") && colInfo.getString("baserate").equals("true") && isGstIncluded == true)) {
                                    if ((colInfo.has("headercurrency") && (colInfo.getString("headercurrency").equals("true") || colInfo.getString("headercurrency").equals("0")))) { //if symbol(0 / true for old template) then append currency symbol
                                        headerprop.setData("Rate Including GST" + "(" + headerCurrency + ")");
                                    } else if ((colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("1"))) { //if code then append currency code(1)
                                        headerprop.setData("Rate Including GST" + "(" + headerCurrencyCode + ")");
                                    } else {
                                        headerprop.setData("Rate Including GST");
                                    }
                                } else if (colInfo.has("headercurrency") && (colInfo.getString("headercurrency").equals("true") || colInfo.getString("headercurrency").equals("0"))) { //if symbol(0 / true for old template) then append currency symbol
//                                    headerprop.setData(colInfo.getString("label") + "(" + headerCurrency + ")");
                                    if(colInfo.getString("label").contains("#Currency Symbol#")){
                                        headerprop.setData(colInfo.getString("label").replace("#Currency Symbol#", headerCurrency));// + "(" + headerCurrencyCode + ")");
                                    } else{
                                        headerprop.setData(colInfo.getString("label") + "(" + headerCurrency + ")");
                                    }
                                } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("1")) { //if code(1) then append currency code
//                                    headerprop.setData(colInfo.getString("label") + "(" + headerCurrencyCode + ")");
                                    if(colInfo.getString("label").contains("#Currency Code#")){
                                        headerprop.setData(colInfo.getString("label").replace("#Currency Code#", headerCurrencyCode));// + "(" + headerCurrencyCode + ")");
                                    } else{
                                        headerprop.setData(colInfo.getString("label") + "(" + headerCurrencyCode + ")");
                                    }
                                } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("2")) { //if code(2) then append base currency symbol
                                    if(colInfo.getString("label").contains("#Base Currency Symbol#")){
                                        headerprop.setData(colInfo.getString("label").replace("#Base Currency Symbol#", baseCurrencySymbol));
                                    } else{
                                        headerprop.setData(colInfo.getString("label") + "(" + baseCurrencySymbol + ")");
                                    }
                                } else if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("3")) { //if code(3) then append base currency code
                                    if(colInfo.getString("label").contains("#Base Currency Code#")){
                                        headerprop.setData(colInfo.getString("label").replace("#Base Currency Code#", baseCurrencyCode));
                                    } else{
                                        headerprop.setData(colInfo.getString("label") + "(" + baseCurrencyCode + ")");
                                    }
                                } else {
                                    headerprop.setData(colInfo.getString("label"));
                                }
                                headerprop.setAlign("left");
                                headerprop.setBgcolor("#C0C0C0");
                                headerprop.setStyle(" padding: 1px; " + colInfo.optString("style", "border:1px solid;padding: 0.5em;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;") + "  position:unset; ");
                            }
                        } else if (!headerproperty.equals("")) {//if headerproperty is not empty//xtype-1
                            if (colInfo.has("headercurrency") && colInfo.getString("headercurrency").equals("true")) {
                                headerprop.setData((changedlabel) + "(" + headerCurrency + ")");
                            } else {
                                headerprop.setData(changedlabel);
                            }
                            headerprop.setAlign(alignment);
                            if (backgroundcolor.isEmpty()) {
                                headerprop.setBgcolor("#C0C0C0");
                            } else {
                                headerprop.setBgcolor(backgroundcolor);
                            }
                            headerprop.setStyle(headerStyle);
                        } else {//headerproperty is empty
                            headerprop.setData(colInfo.optString("label", ""));
                            headerprop.setAlign("left");
                            headerprop.setBgcolor("#C0C0C0");
                            headerprop.setStyle(" padding: 1px; " + colInfo.optString("style", "border:1px solid;padding: 0.5em;border-color:$tablebordercolor;font-size:$fontsize;font-style:$italic;font-weight:$bold;text-decoration:$underline;") + "  position:unset; ");
                        }
                        headerprop.setWidth(colInfo.getString("colwidth").concat("%"));
                        headerlist.add(headerprop);
//                        }
                    }

//                    JSONArray lineItemsArr = accInvoiceCommon.getInvoiceDetailsItemJSON(request, companyid, invoiceID);
                    Boolean showtotal = false;
                    int totalCheckIndex = 0;
                    String decimalpoints = "2";
                    String decimalValue = "0";
                    Boolean totalCheck = false;
                    ArrayList<CustomDesignLineItemProp> rowtotallist = new ArrayList();
                    for (int count = 0; count < columnarr.length(); count++) {
                        rowtotallist.add(count, new CustomDesignLineItemProp());
                    }
                    ArrayList<String> headerTotal = new ArrayList<String>();
                    for (int count = 0; count < columnarr.length(); count++) {
                        headerTotal.add(count, "0.00");
                    }
                    for (int headerCnt = 0; headerCnt < columnarr.length(); headerCnt++) {
                        JSONObject colInfo = customizedlineItems.getJSONObject(headerCnt);
                        if (colInfo.optString("showtotal", "false").equals("true")) {
                            showtotal = true;
                            break;
                        }
                    }
                    /*
                     * Sort line item with selected field and sort order
                     */
                    if(!StringUtil.isNullOrEmpty(sortField) && !StringUtil.isNullOrEmpty(sortOrder)){
                        lineItemsArr = getSortedLineItemArr(lineItemsArr, sortField, sortFieldXtype, sortOrder,df,moduleid);
                    }
                    lineItemsArr = getConsolidatedLineItem(lineItemsArr, isconsolidated);
                    lineItemsArr = getLineItemArrByProductCategory(lineItemsArr, isGroupingApplied, isGroupingAfterRowPresent, groupingItems, groupingAfterItems,countryid, companyid);

                    for (int cnt = 0; cnt < lineItemsArr.length(); cnt++) {
                        ArrayList<CustomDesignLineItemProp> rowDatalist = new ArrayList();
                        JSONObject itemData = lineItemsArr.getJSONObject(cnt);
                        /*
                         * Summary data and details table is already replaced above
                         */
                        if (itemData.has("summarydata") || itemData.has("otherfieldsdata") || itemData.has("isDetailsTableData") || itemData.has("isChecklistTableData")) {
                            continue;
                        } else if (itemData.has("isCategory")) {
                            for (int k = 0; k < groupingItems.length(); k++) {
                                CustomDesignLineItemProp prop = new CustomDesignLineItemProp();
                                if (!StringUtil.isNullOrEmpty(groupingItems.getJSONObject(k).optString("label"))) {
                                    String style = groupingItems.getJSONObject(k).optString("style", "");
                                    String data = "<div style=\"" + style + "\">" + itemData.optString("name", "") + "</div>";
                                    prop.setData(data);
                                } else {
                                    prop.setData("&nbsp;");
                                }
                                rowDatalist.add(prop);
                            }
                            prodlist.add(rowDatalist);
                        } else if (itemData.has("isGroupAfter")) {
                            for (int k = 0; k < groupingAfterItems.length(); k++) {
                                CustomDesignLineItemProp prop = new CustomDesignLineItemProp();
                                if (!StringUtil.isNullOrEmpty(groupingAfterItems.getJSONObject(k).optString("label"))) {
                                    String style = groupingAfterItems.getJSONObject(k).optString("style", "");
                                    String data = "<div style=\"" + style + "\">" + itemData.optString(groupingAfterItems.getJSONObject(k).optString("putin")+"_"+Constants.data, "") + "</div>";
                                    prop.setData(data);
                                } else {
                                    prop.setData("&nbsp;");
                                }
                                rowDatalist.add(prop);
                            }
                            prodlist.add(rowDatalist);
                        } else {
                            for (int headerCnt = 0; headerCnt < columnarr.length(); headerCnt++) {
                                int fieldsLength = columnarr.getJSONObject(headerCnt).getJSONArray("fields").length();
                                JSONArray fields = columnarr.getJSONObject(headerCnt).getJSONArray("fields");
                                String prodData = "";
                                String prodDataHTML = "";
                                String prodData1 = "";
                                String pretext = "";
                                String posttext = "";
                                String style = "";
                                String prodordereddata = "";
                                boolean isCreditDebitAmountInOneColumn = false; // for SOA only
                                if(fieldsLength > 1 && (moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId)){
                                    boolean isDebitAmountPresent = false;
                                    boolean isCreditAmountPresent = false;
                                    for (int fieldCnt = 0; fieldCnt < fieldsLength; fieldCnt++) {
                                        JSONObject colInfo = customizedlineItems.getJSONObject(fields.getInt(fieldCnt));
                                        if(colInfo.getString("columnname").equals("Debit Amount") || colInfo.getString("columnname").equals("Debit Amount in Base Currency")){
                                            isDebitAmountPresent = true;
                                        } else if(colInfo.getString("columnname").equals("Credit Amount") || colInfo.getString("columnname").equals("Credit Amount in Base Currency")){
                                            isCreditAmountPresent = true;
                                        }
                                    }
                                    if(isCreditAmountPresent && isDebitAmountPresent){
                                        isCreditDebitAmountInOneColumn = true;
                                    }
                                }
                                int type;
                                CustomDesignLineItemProp prop = new CustomDesignLineItemProp();
                                String valign = "top";
                                for (int fieldCnt = 0; fieldCnt < fieldsLength; fieldCnt++) {

                                    JSONObject colInfo = customizedlineItems.getJSONObject(fields.getInt(fieldCnt));
                                    type = colInfo.optInt("type", 0);
                                    style = colInfo.optString("style", "");
                                    valign = colInfo.optString("valign", "top");
                                    CustomDesignLineItemProp totalListProp = new CustomDesignLineItemProp();
                                    if (type == Constants.lineItemSelectFieldType) {

//                                if (lineCols.containsKey(colInfo.getString("fieldid"))) {
//                                    JSONObject staticColInfo = new JSONObject(lineCols.get(colInfo.getString("fieldid")));
                                        if (itemData.has(colInfo.getString("fieldid"))) {
                                            prodData = (itemData.get(colInfo.getString("fieldid")).toString()) + "</br>";
                                            //For dimensions
                                            if (colInfo.getString("fieldid").toString().equals(CustomDesignerConstants.AllDimensions) || colInfo.getString("fieldid").toString().equals(CustomDesignerConstants.AllLinelevelCustomFields)) {
                                                HashMap<String, Object> fieldparams = new HashMap<String, Object>();
                                                fieldparams.put(Constants.moduleid, moduleid);
                                                fieldparams.put(Constants.companyid, companyid);
                                                fieldparams.put(CustomDesignerConstants.json, json);
                                                fieldparams.put(CustomDesignerConstants.islineitem, "true");
                                                HashMap<String, Object> returnvalues = new HashMap<String, Object>();
                                                returnvalues = CustomFieldDimensionwithSequence(fieldparams, itemData);
                                                if (returnvalues.containsKey("prodData")) {
                                                    prodordereddata = (String) returnvalues.get("prodData");
                                                    if (!StringUtil.isNullOrEmpty(prodordereddata)) {
                                                        prodData = prodordereddata + "</br>";
                                                    }
                                                }
                                            }

                                            if (colInfo.getString("xtype").equals("2") || colInfo.getString("columnname").equalsIgnoreCase("quantity with uom")||colInfo.getString("columnname").equalsIgnoreCase("base qty with uom")||colInfo.getString("columnname").equalsIgnoreCase("batch sub quantity")) {
                                                double decimalRoundValue = 0;
                                                double dobValue = 0;
                                                int intValue = 0;
//                                            prop.setAlign("right");
                                                if (!StringUtil.isNullOrEmpty(itemData.get(colInfo.getString("fieldid")).toString())) {
//                                                  decimalpoints=(colInfo.has("decimalpoint"))?((!StringUtil.isNullOrEmpty(colInfo.getString("decimalpoint")))?colInfo.getString("decimalpoint"):"4"):"4";
                                                    if (colInfo.has("decimalpoint") && !colInfo.getString("decimalpoint").toString().equals("undefined") && !colInfo.getString("decimalpoint").toString().equals("") && !colInfo.getString("decimalpoint").toString().equals("null")) {
                                                        //decimal point configuration in line item
                                                        decimalpoints = colInfo.getString("decimalpoint");
                                                        intValue = Integer.parseInt(decimalpoints);
                                                        if (colInfo.getString("columnname").equals("Quantity With UOM")||colInfo.getString("columnname").equals("Base Qty With UOM")) {
                                                            String value = itemData.get(colInfo.getString("fieldid")).toString();
                                                            String[] seperatedValues = value.split(" ");
                                                            dobValue = Double.parseDouble(seperatedValues[0]);
                                                            decimalRoundValue = authHandler.round(dobValue, intValue);
                                                            if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue,countryid);
                                                            } else {
                                                                decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                if (intValue == 0) {//if comma is not given and decimal point is 0
                                                                    decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                }
                                                            }
                                                            prodData = decimalValue + " " + ((seperatedValues.length > 1) ? seperatedValues[1] : "") + "</br>";
                                                        } else if (colInfo.getString("columnname").equalsIgnoreCase("Job Work Balance Qty") || colInfo.getString("columnname").equalsIgnoreCase("Job Work Consume Qty") || colInfo.getString("columnname").equalsIgnoreCase("Batch Quantity") || colInfo.getString("columnname").equalsIgnoreCase("batch sub quantity")) {//Apply Decimal Precision to Job Work balance Qty and Job Work consume Qty
                                                            String value = itemData.get(colInfo.getString("fieldid")).toString();
                                                            String[] tempStrArr = value.split(CustomDesignerConstants.VALUE_SEPARATOR);
                                                            prodData = "";
                                                            for (int index = 0; index < tempStrArr.length; index++) {
                                                                String tempString = tempStrArr[index];
                                                                tempString = tempString.trim();
                                                                if (!StringUtil.isNullOrEmpty(tempString)) {
                                                                    dobValue = Double.parseDouble(tempString);
                                                                    decimalRoundValue = authHandler.round(dobValue, intValue);
                                                                    if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                        decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue, countryid);
                                                                    } else {
                                                                        decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                        if (intValue == 0) {
                                                                            decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                        }
                                                                    }
                                                                    decimalValue = decimalValue + CustomDesignerConstants.VALUE_SEPARATOR;
                                                                    prodData += decimalValue;
                                                                }
                                                            }

                                                        } else {
                                                            dobValue = Double.parseDouble(itemData.get(colInfo.getString("fieldid")).toString());
                                                            String SpecificCurrencyId = "";
                                                            /*
                                                                In below check, 0,1,2,3 corresponds to Currency Symbol, Currency Code,
                                                                Base Currency Symbol and Base Currency Code
                                                            */
                                                            if (!StringUtil.isNullOrEmpty(colInfo.getString("recordcurrency")) && colInfo.optString("fieldid","").equals("SpecificCurrencyAmount")) {
                                                                SpecificCurrencyId = colInfo.optString("recordcurrency");
                                                                JSONObject requestJson = new JSONObject();
                                                                requestJson.put("transactionDate", itemData.optString("transactiondate"));
                                                                requestJson.put("currId", SpecificCurrencyId);
                                                                requestJson.put(Constants.globalCurrencyKey, gcurrencyid);
                                                                requestJson.put(Constants.companyKey, companyid);
                                                                requestJson.put("fieldName", colInfo.getString("fieldid"));
                                                                requestJson.put("gstCurrencyRate", itemData.getString("gstCurrencyRate"));
                                                                double exchangeRateForSpecificFields = getExchangeRateForSpecificCurrencyFields(requestJson, accInvoiceServiceDAOObj);
                                                                dobValue = dobValue * exchangeRateForSpecificFields;
                                                            }
                                                            decimalRoundValue = authHandler.round(dobValue, intValue);
                                                            if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue, countryid);
                                                            } else {
                                                                decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                if (intValue == 0) {//if comma is not given and decimal point is 0
                                                                    decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                }
                                                            }
                                                            if ((colInfo.optBoolean("showzerovalueasblank", false))) {
                                                                decimalValue = CustomDesignHandler.getZeroAmountAsBlank(decimalValue);
                                                            }
                                                            // If credit amount and debit amount is in one column then show credit amount as per negative value combo selection
                                                            if(isCreditDebitAmountInOneColumn){
                                                                if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                                                                    if(colInfo.getString("columnname").equals("Credit Amount") || colInfo.getString("columnname").equals("Credit Amount in Base Currency")){
                                                                        if(negativeValueIn == 1){
                                                                            decimalValue = "-" + decimalValue;
                                                                        } else if(negativeValueIn == 2){
                                                                            decimalValue = "(" + decimalValue + ")";
                                                                        }
                                                                    }
                                                                }
                                                            }
//                                                            prodData = ((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals("true")) && (!colInfo.getString("recordcurrency").equals("")) ? "" + headerCurrency + " " + decimalValue : decimalValue) + "</br>"; //setting amount to company accpreferences.
                                                            if(colInfo.has("recordcurrency") && (colInfo.getString("recordcurrency").equals("true") || colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex)) && (StringUtil.isNullOrEmpty(SpecificCurrencyId) || SpecificCurrencyId.equals("0") || SpecificCurrencyId.equals("none"))){ //if symbol(0 / true for old template) then append currency symbol
                                                                prodData = headerCurrency + " " + decimalValue + "</br>";
                                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex) && (StringUtil.isNullOrEmpty(SpecificCurrencyId) || SpecificCurrencyId.equals("0") || SpecificCurrencyId.equals("none")))){ //if value is (1) then append currency code
                                                                prodData = headerCurrencyCode + " " + decimalValue + "</br>";
                                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex) && (StringUtil.isNullOrEmpty(SpecificCurrencyId) || SpecificCurrencyId.equals("0") || SpecificCurrencyId.equals("none")))){ //if value is (2) then append base currency symbol
                                                                prodData = baseCurrencySymbol + " " + decimalValue + "</br>";
                                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex) && (StringUtil.isNullOrEmpty(SpecificCurrencyId) || SpecificCurrencyId.equals("0") || SpecificCurrencyId.equals("none")))){ //if value is (3) then append base currency code
                                                                prodData = baseCurrencyCode + " " + decimalValue + "</br>";
                                                            } else{
                                                                prodData = decimalValue + "</br>";
                                                            }
                                                        }

                                                    } else {
                                                        if (colInfo.getString("columnname").equals("Quantity With UOM") || colInfo.getString("columnname").equals("Product Available Quantity")||colInfo.getString("columnname").equals("Base Qty With UOM")) {
                                                            String value = itemData.get(colInfo.getString("fieldid")).toString();
                                                            String[] seperatedValues = value.split(" ");
                                                            dobValue = Double.parseDouble(seperatedValues[0]);
                                                            prodData = dobValue + " " + (seperatedValues.length > 1 ? seperatedValues[1] : "") + "</br>";
                                                        } else {
                                                            dobValue = Double.parseDouble(itemData.get(colInfo.getString("fieldid")).toString());
                                                            if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
//                                                                prodData = ((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals("true")) && (!colInfo.getString("recordcurrency").equals("")) ? "" + headerCurrency + " " + CustomDesignHandler.getAmountinCommaForm(dobValue) : CustomDesignHandler.getAmountinCommaForm(dobValue)) + "</br>";
                                                                if(colInfo.has("recordcurrency") && (colInfo.getString("recordcurrency").equals("true") || colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex))){ //if symbol(0 / true for old template) then append currency symbol
                                                                    prodData = headerCurrency + " " + CustomDesignHandler.getAmountinCommaForm(dobValue,countryid) + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                                    prodData = headerCurrencyCode + " " + CustomDesignHandler.getAmountinCommaForm(dobValue,countryid) + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                                    prodData = baseCurrencySymbol + " " + CustomDesignHandler.getAmountinCommaForm(dobValue,countryid) + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                                    prodData = baseCurrencyCode + " " + CustomDesignHandler.getAmountinCommaForm(dobValue,countryid) + "</br>";
                                                                } else{
                                                                    prodData = CustomDesignHandler.getAmountinCommaForm(dobValue,countryid) + "</br>";
                                                                }
                                                            } else {
//                                                                prodData = ((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals("true")) && (!colInfo.getString("recordcurrency").equals("")) ? "" + headerCurrency + " " + itemData.get(colInfo.getString("fieldid")).toString() : itemData.get(colInfo.getString("fieldid")).toString()) + "</br>";
                                                                if(colInfo.has("recordcurrency") && (colInfo.getString("recordcurrency").equals("true") || colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex))){//if symbol(0 / true for old template) then append currency symbol
                                                                    prodData = headerCurrency + " " + itemData.get(colInfo.getString("fieldid")).toString() + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                                    prodData = headerCurrencyCode + " " + itemData.get(colInfo.getString("fieldid")).toString() + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                                    prodData = baseCurrencySymbol + " " + itemData.get(colInfo.getString("fieldid")).toString() + "</br>";
                                                                } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                                    prodData = baseCurrencyCode + " " + itemData.get(colInfo.getString("fieldid")).toString() + "</br>";
                                                                } else{
                                                                    prodData = itemData.get(colInfo.getString("fieldid")).toString() + "</br>";
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    prodData = ("");
                                                }
                                            } else {
//                                            prop.setAlign("left");
                                                if (colInfo.has("basequantitywithuom")) {//case for quantity with uom
                                                    if (colInfo.get("basequantitywithuom").equals("true")) {
                                                        if (colInfo.has("decimalpoint") && !colInfo.getString("decimalpoint").toString().equals("undefined") && !colInfo.getString("decimalpoint").toString().equals("") && !colInfo.getString("decimalpoint").toString().equals("null")) { //decimal point configuration in line item
                                                            decimalpoints = colInfo.getString("decimalpoint");
                                                            String quantityWithUom = itemData.get(colInfo.getString("fieldid")).toString();
                                                            String splitQuantityWithUom[] = quantityWithUom.split(" ");
                                                            String quantity = splitQuantityWithUom[0];
                                                            String UOM = "";
                                                            try {
                                                                UOM = splitQuantityWithUom[1];
                                                            } catch (Exception ex) {
                                                                UOM = "";
                                                            }
                                                            int intValue = Integer.parseInt(decimalpoints);
                                                            double dobValue = Double.parseDouble(quantity);
                                                            double decimalRoundValue = authHandler.round(dobValue, intValue);
                                                            if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                                                decimalValue = CustomDesignHandler.getAmountinCommaDecimal(decimalRoundValue, intValue,countryid);
                                                            } else {
                                                                decimalValue = authHandler.formattingdecimal(decimalRoundValue, intValue);
                                                                if (intValue == 0) {
                                                                    decimalValue = (decimalValue.substring(0, decimalValue.length() - 1));
                                                                }
                                                            }
                                                            decimalValue = (decimalValue) + " " + (UOM);
                                                            prodData = (decimalValue) + "</br>";
                                                        }
                                                    }
                                                }
                                            }
                                            if (showtotal) {
                                                if (colInfo.getString("showtotal").equals("true")) {
                                                    if (colInfo.getString("xtype").equals("2")) {
                                                        decimalpoints = colInfo.getString("decimalpoint");
                                                        int intValue = Integer.parseInt(decimalpoints);
                                                        totalListProp.setAlign("rightDouble.parseDouble(caltotal)");
                                                        String caltotal = "0";
                                                        if (colInfo.getString("columnname").equalsIgnoreCase("Job Work Balance Qty") || colInfo.getString("columnname").equalsIgnoreCase("Job Work Consume Qty") || colInfo.getString("columnname").equalsIgnoreCase("Batch Quantity")) {//Apply Show total to Job Work balance Qty and Job Work consume Qty
                                                        String value = itemData.get(colInfo.getString("fieldid")).toString();
                                                            String[] tempStrArr = value.split(CustomDesignerConstants.VALUE_SEPARATOR);
                                                            for/*for*/ (String tempString : tempStrArr) {
                                                                tempString = tempString.trim();
                                                                if (!StringUtil.isNullOrEmpty(tempString)) {
                                                                    caltotal = authHandler.formattedAmount(Double.parseDouble(tempString) + Double.parseDouble(headerTotal.get(headerCnt)), companyid);
                                                                    headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), intValue));
                                                                    totalListProp.setData(headerTotal.get(headerCnt));
                                                                } else {
                                                                    headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(headerTotal.get(headerCnt)), intValue));
                                                                    totalListProp.setData(headerTotal.get(headerCnt));
                                                                }
                                                            }
                                                        } else {
                                                            if (!StringUtil.isNullOrEmpty(itemData.get(colInfo.getString("fieldid")).toString())) {
                                                                caltotal = authHandler.formattedAmount((Double.parseDouble(itemData.get(colInfo.getString("fieldid")).toString())) + Double.parseDouble(headerTotal.get(headerCnt).toString()), companyid);
                                                                headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), intValue));
                                                                totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                            } else {
                                                                headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(headerTotal.get(headerCnt).toString()), intValue));
                                                                totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                            }
                                                        }
                                                    } else {
                                                        if (colInfo.getString("xtype").equals("1")) {
                                                            if (!totalCheck) {
                                                                totalCheck = true;
                                                                totalCheckIndex = headerCnt;
                                                            }
                                                            if (totalCheckIndex == headerCnt) {
                                                                totalListProp.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                                                            } else {
                                                                /*
                                                                 * calculating total for the fields having xtype = 1
                                                                 */
                                                                if (!StringUtil.isNullOrEmpty(itemData.get(colInfo.getString("fieldid")).toString())) {
                                                                    String totString = itemData.get(colInfo.getString("fieldid")).toString();
                                                                    String caltotal = "0";
                                                                    double total = 0;
                                                                    totalListProp.setAlign("rightDouble.parseDouble(caltotal)");
                                                                    String[] tempStrArr = totString.split("!##");
                                                                    if(isNumeric(tempStrArr[0].trim().replaceAll(",", ""))) {
                                                                        for (int index = 0; index < tempStrArr.length; index++) {
                                                                            String tempString = tempStrArr[index].trim().replaceAll(",", "");
                                                                            total += Double.parseDouble(tempString);
                                                                        }
                                                                        caltotal = authHandler.formattedAmount(total + Double.parseDouble(headerTotal.get(headerCnt).toString()), companyid);
                                                                        headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), Constants.AMOUNT_DIGIT_AFTER_DECIMAL));
                                                                        totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                                    } else {
                                                                        totalListProp.setData("");
                                                                    }
                                                                }
                                                                else {
                                                                    totalListProp.setData("");
                                                                }
                                                            }

                                                        } else {
                                                            totalListProp.setData("");
                                                        }
                                                    }
                                                } else {
                                                    if (colInfo.getString("xtype").equals("1")) {
                                                        if (!totalCheck) {
                                                            totalCheck = true;
                                                            totalCheckIndex = headerCnt;
                                                        }
                                                        if (totalCheckIndex == headerCnt) {
                                                            totalListProp.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                                                        } else {
                                                            totalListProp.setData("");
                                                        }
                                                    } else {
                                                        totalListProp.setData("");
                                                    }
                                                }
                                            }
//                                        rowDatalist.add(prop);
                                            rowtotallist.set(headerCnt, totalListProp);
                                        } else {
                                            if (itemData.has("Custom_" + colInfo.getString("label"))) {
                                                prodData = (itemData.get("Custom_" + colInfo.getString("label")).toString()) + "</br>";
                                                if (colInfo.getString("xtype").equals("2")) {
//                                                prop.setAlign("right");
                                                    prodData = (authHandler.formattedAmount(Double.parseDouble(itemData.get("Custom_" + colInfo.getString("label")).toString()), companyid)) + "</br>";
                                                } else {
//                                                prop.setAlign("left");
                                                }
                                            } else if (showtotal) {
                                                if (colInfo.getString("showtotal").equals("true") && colInfo.getString("xtype").equals("2")) {
                                                    totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                } else {
                                                    totalListProp.setData("");
                                                }
                                                rowtotallist.set(headerCnt, totalListProp);
                                            } else {
                                                prodData = "&nbsp;";
                                            }
//                                        rowDatalist.add(prop);

                                        }
                                    } else if(type == Constants.lineItemFormulaFieldType) {
                                        String formula = colInfo.getString("formula");// get formula with field label's
                                        String formulaValue = colInfo.getString("formulavalue");// get formula with fieldid's
                                        formula = formulaValue; // use formula with fieldid's for value replacement and calculation
                                        formula = formula.replaceAll("!##", "-").replaceAll("$##", "/");// replace '!##' and '$##' with respective characters in formula if exist('!##' for '-' and '$##' for '/')
                                        String[] fieldsArr = formulaValue.replaceAll("\\(|\\)", "").split("\\+|\\-|\\*|\\/");// Replace brackets '(' and ')' then split fields from formula using operators used
                                        for(int ind = 0; ind < fieldsArr.length; ind++){
                                            String fieldValue = "0";
                                            String field = fieldsArr[ind].trim(); //Remove extra space before and after
                                            field = field.replaceAll("!##", "-");// replace '!##' identifier in formula if exist('!##' for '-')
                                            field = field.replaceAll("$##", "/");// replace '$##' identifier in formula if exist('$##' for '/')
                                            
                                            if(field.startsWith("#") && field.endsWith("#")){ // If placeholder
                                                
                                                field = field.substring(1, field.length()-1); // Remove # from start and end
                                                
                                                if(itemData.has(field)){ // If Default field
                                                    fieldValue = itemData.getString(field);
                                                } else{
                                                    if (itemData.has("Custom_" + field)) { // If Custom field
                                                        fieldValue = (itemData.get("Custom_" + field).toString());
                                                        if (colInfo.getString("xtype").equals("2")) {
                                                            fieldValue = (authHandler.formattedAmount(Double.parseDouble(itemData.get("Custom_" + field).toString()), companyid));
                                                        } else {
                                                        }
                                                    } else if (showtotal) {
                                                        if (colInfo.getString("showtotal").equals("true") && colInfo.getString("xtype").equals("2")) {
                                                            totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                        } else {
                                                            totalListProp.setData("");
                                                        }
                                                        rowtotallist.set(headerCnt, totalListProp);
                                                    } else {
                                                        fieldValue = "0";
                                                    }
                                                }
                                            } else{ // If number
                                                fieldValue = field;
                                            }
                                            formula = formula.replace("#"+field+"#", fieldValue); // replace field value in formula
                                        }
                                        
                                        String formulaVal =  evaluateExpression(formula, colInfo.getInt("decimalpoint")); // Calculate expression using mval library
                                        /* SDP-11409
                                         * Declaring a double var to calcualte total of formula field column
                                         */
                                        double dblValForTotal = Double.parseDouble(formulaVal); 
                                        if (formulaVal.startsWith("-")) {
                                            if (negativeValueIn == 1) {
                                                //No need to modification
                                            } else if (negativeValueIn == 2) {
                                                formulaVal = formulaVal.replace("-", "");
                                                formulaVal = "(" + formulaVal + ")";
                                            }
                                        }
                                        if ((colInfo.optBoolean("showzerovalueasblank", false))) {
                                            formulaVal = CustomDesignHandler.getZeroAmountAsBlank(formulaVal);
                                        }
                                        if ((colInfo.has("commaamount") && colInfo.getString("commaamount").equals("true")) && (!colInfo.getString("commaamount").equals(""))) {
                                            double doubleVal = Double.parseDouble(formulaVal); // convert to double for decimal precision and comma sepertor
                                            
                                            if(colInfo.has("recordcurrency") && (colInfo.getString("recordcurrency").equals("true") || colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex))){ //if symbol(0 / true for old template) then append currency symbol
                                                prodData = headerCurrency + " " + CustomDesignHandler.getAmountinCommaDecimal(doubleVal, colInfo.getInt("decimalpoint"), countryid) + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                prodData = headerCurrencyCode + " " + CustomDesignHandler.getAmountinCommaDecimal(doubleVal, colInfo.getInt("decimalpoint"), countryid) + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                prodData = baseCurrencySymbol + " " + CustomDesignHandler.getAmountinCommaDecimal(doubleVal, colInfo.getInt("decimalpoint"), countryid) + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                prodData = baseCurrencyCode + " " + CustomDesignHandler.getAmountinCommaDecimal(doubleVal, colInfo.getInt("decimalpoint"), countryid) + "</br>";
                                            } else{
                                                prodData = CustomDesignHandler.getAmountinCommaDecimal(doubleVal, colInfo.getInt("decimalpoint"), countryid) + "</br>";
                                            }
                                        } else {
                                            if(colInfo.has("recordcurrency") && (colInfo.getString("recordcurrency").equals("true") || colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencySymbolIndex))){//if symbol(0 / true for old template) then append currency symbol
                                                prodData = headerCurrency + " " + formulaVal + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignCurrencyCodeIndex))){ //if value is (1) then append currency code
                                                prodData = headerCurrencyCode + " " + formulaVal + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencySymbolIndex))){ //if value is (2) then append base currency symbol
                                                prodData = baseCurrencySymbol + " " + formulaVal + "</br>";
                                            } else if((colInfo.has("recordcurrency") && colInfo.getString("recordcurrency").equals(CustomDesignerConstants.CustomDesignBaseCurrencyCodeIndex))){ //if value is (3) then append base currency code
                                                prodData = baseCurrencyCode + " " + formulaVal + "</br>";
                                            } else{
                                                prodData = formulaVal + "</br>";
                                            }
                                        }
                                        /*
                                         * SDP-11409
                                         * Caluation of total of formula field column
                                         */
                                        if (showtotal) {
                                                if (colInfo.getString("showtotal").equals("true")) {
                                                    if (colInfo.getString("xtype").equals("2")) {
                                                        decimalpoints = colInfo.getString("decimalpoint");
                                                        int intValue = Integer.parseInt(decimalpoints);
                                                        totalListProp.setAlign("rightDouble.parseDouble(caltotal)");
                                                        String caltotal = "0";
                                                        caltotal = authHandler.formattedAmount(dblValForTotal + Double.parseDouble(headerTotal.get(headerCnt).toString()), companyid);
                                                        headerTotal.set(headerCnt, authHandler.formattingdecimal(Double.parseDouble(caltotal), intValue));
                                                        totalListProp.setData(headerTotal.get(headerCnt).toString());
                                                 }
                                            } else {
                                                totalListProp.setData("");
                                            }
                                        }
                                        rowtotallist.set(headerCnt, totalListProp);
                                        
                                    } else if (type == 3) {
                                        if (itemData.has(colInfo.getString("fieldid"))) {
                                            prodData = "<img style='width:100%;height:100%' src='" + itemData.getString(colInfo.getString("fieldid")) + "'></img>";
                                        } else {
                                            prodData = "<img style='width:100%;height:100%' src='../images/s.gif'></img>";
                                        }
                                            if (!totalCheck) {
                                                totalCheck = true;
                                                totalCheckIndex = headerCnt;
                                            }
                                            if (totalCheckIndex == headerCnt) {
                                                totalListProp.setData(CustomDesignerConstants.CustomDesignTotal_lineItemColumn);
                                            } else {
                                                totalListProp.setData("");
                                            }
                                            rowtotallist.set(headerCnt, totalListProp);

                                    } else {
                                        prodData = colInfo.optString("label", "");
                                    }
                                    String fieldId = colInfo.optString("fieldid", " ");
                                    String dimensionValue = colInfo.optString("dimensionvalue", "2");
                                    String valueSeparator = colInfo.optString("valueseparator", "linebreak");
                                    if (!StringUtil.isNullOrEmpty(prodData)) {
                                        if (dimensionValue.equals("0") && prodData.contains("<br>")) {//Show only Title of dimension 
                                            prodData = prodData.substring(0, prodData.indexOf("<br>"));
                                        } else if (dimensionValue.equals("1") && prodData.contains("<br>")) {//Show only description of dimension
                                            prodData = prodData.substring(prodData.indexOf("<br>"), prodData.length()-1);
                                        }
                                        if(colInfo.optString("fieldid", " ").equals(CustomDesignerConstants.imageTag) && prodData.contains("s.gif")){
                                            prodDataHTML = "<div></div>";
                                        } else{
                                            // Replace \n with <br> tag for representation of value in print
                                            /*
                                             * SDP-11276
                                             * to show < appended text in print    
                                             */ 
                                            prodData = prodData.replaceAll("<br>","#br#");
                                            prodData = prodData.replaceAll("</br>","#br#");
                                            if (prodData.contains("!#isrichtext#!")) {
                                                prodData = prodData.replaceAll("!#isrichtext#!", "");
                                            }
                                            prodData = prodData.replaceAll("#br#","<br>");
                                            if(colInfo.optInt("xtype", 1) != CustomDesignerConstants.RICH_TEXT_AREA) {
                                                prodData = prodData.replaceAll("\\n","<br>");
                                            }
                                            if (fieldId.equalsIgnoreCase(CustomDesignerConstants.SerialNumber) || fieldId.equalsIgnoreCase(CustomDesignerConstants.IN_Loc)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.BatchNumber) || fieldId.equalsIgnoreCase("wareHouse")
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.SR_Batch_Exp_Date) || fieldId.equalsIgnoreCase(CustomDesignerConstants.SR_Asset)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.SR_Serial_Exp_Date) || fieldId.equalsIgnoreCase(CustomDesignerConstants.SR_Batch_SubQty)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.SerialNumberExp)||fieldId.equalsIgnoreCase(CustomDesignerConstants.BatchNumberExp) 
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.JobWorkChallanDate) || fieldId.equalsIgnoreCase(CustomDesignerConstants.JobWorkBalanceQty) 
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.JobWorkConsumeQty) || fieldId.equalsIgnoreCase(CustomDesignerConstants.Location)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.BatchQuantity) || fieldId.equalsIgnoreCase(CustomDesignerConstants.ManufacturingDate)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.ManufacturingDate_Batch) || fieldId.equalsIgnoreCase(CustomDesignerConstants.ManufacturingDate_Serial)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.LineLevelTax) || fieldId.equalsIgnoreCase(CustomDesignerConstants.LineLevelTaxAmount)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.LineLevelTaxPercent)|| fieldId.equalsIgnoreCase(CustomDesignerConstants.QUANTITY_PER_PACKAGE)
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.GROSS_WEIGHT) || fieldId.equalsIgnoreCase(CustomDesignerConstants.PACKAGE_MEASUREMENT) 
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.PACKAGE_NAME) || fieldId.equalsIgnoreCase(CustomDesignerConstants.SR_SerialNumber) 
                                                    || fieldId.equalsIgnoreCase(CustomDesignerConstants.GR_Loc)) {
                                                    prodData=replaceWithValueSeperator(prodData,valueSeparator);
                                            }
                                            prodDataHTML = "<div style=\"" + style + "\">" + prodData + "</div>";
                                        }

                                    }
                                    if (fieldcnt == fieldsLength - 1) {
                                        prodData1 += prodDataHTML;
                                    } else {
                                        prodData1 += prodDataHTML + "<!-- -->";
                                        prodDataHTML="";
                                    }
                                }
                                prop.setData(prodData1);
                                prop.setValign(valign);
                                rowDatalist.add(prop);
                            }
                            prodlist.add(rowDatalist);
                        }
                    }
                    totallist.add(rowtotallist);
//                    int lineItemTopSpacing = lineItem_YAxis - aboveLineItemObject_YAxis;
                    ArrayList finalSummaryData = new ArrayList();
                    if (isLineItemSummaryTable) {
//                        context.put("issummary", isLineItemSummaryTable);
                        org.jsoup.nodes.Document jsoupSummaryTableDoc = Jsoup.parse(buildhtml);
                        int summaryTableColCnt = LineItemSummaryTableInfo.getInt("columnCount");
                        int summaryTableRowCnt = LineItemSummaryTableInfo.getInt("rowCount");
                        int totalLineTableColumnCnt = headerlist.size();
                        int emptyCells = totalLineTableColumnCnt - summaryTableColCnt;

                        org.jsoup.nodes.Element summaryTable = jsoupSummaryTableDoc.getElementById("summaryTableID");
                        Elements summaryTableRows = summaryTable.getElementsByTag("tr");
                        for (org.jsoup.nodes.Element row : summaryTableRows) {
                            Elements cells = row.select("td");
                            ArrayList<SummaryTableCellProperty> summaryRowData = new ArrayList();
                            for (int blankcellcnt = 0; blankcellcnt < emptyCells; blankcellcnt++) {
                                SummaryTableCellProperty prop = new SummaryTableCellProperty();
                                prop.setData("");
                                summaryRowData.add(prop);
                            }
                            if (cells.size() > 0) {
                                for (org.jsoup.nodes.Element cell : cells) {
                                    String style = cell.attr("style");
                                    String data = cell.text();
                                    String colspan = cell.attr("colspan");
                                    String rowspan = cell.attr("rowspan");
                                    SummaryTableCellProperty prop = new SummaryTableCellProperty();
                                    prop.setColspan((colspan != null) ? colspan : "");
                                    prop.setRowspan((rowspan != null) ? rowspan : "");
                                    prop.setStyle((style != null) ? style : "");
                                    prop.setData((data != null) ? data : "");
                                    summaryRowData.add(prop);
                                }
                            }
                            finalSummaryData.add(summaryRowData);
                        }
//                        context.put("summaryTable", finalSummaryData);
//                        context.put("issummarytable", finalSummaryData.size()>0 ? true : false);
                    }
                    String margin = marginTop + " " + marginRight + " " + marginBottom + " " + marginLeft + " ";
                    //get firefox mozilla browser version and put it in line item table header properties
                    if(!StringUtil.isNullOrEmpty(requestJobj.optString("browserVersion", ""))){
                        LineItemHeaderProperties.put("browserVersion", requestJobj.optString("browserVersion", ""));
                    }
                    if ( islineitemrepeat ) {    // line Item repeat flag is on for line table then creating table separately for each product.
                        int productCount = prodlist.size();
                        String lineItemHTMLTemp = "";
                        List tempProductList = null;
                        for ( int productIndex = 0 ; productIndex < productCount ; productIndex++ ) {
                            tempProductList = new ArrayList();
                            tempProductList.add(prodlist.get(productIndex));
                            lineItemHTMLTemp = CustomDesignHandler.getLineDataHTMLByVelocityEngineNew(velocityEngine, tempProductList, headerlist, top, left, tablewidth, showtotal, totallist,
                                pagelayoutproperty, "0px", finalSummaryData, LineItemHeaderProperties, widthOfTable, margin, lineItemFirstRowHTML, lineItemLastRowHTML, isFirstRowPresent, isLastRowPresent,isExtendLineItem);
                            linetemhtml += lineItemHTMLTemp;
                        }
                    } else {
                        //If line table is empty then don't put line table in print
                        if(prodlist.size() > 0){
                            linetemhtml = CustomDesignHandler.getLineDataHTMLByVelocityEngineNew(velocityEngine, prodlist, headerlist, top, left, tablewidth, showtotal, totallist,
                                    pagelayoutproperty, "0px", finalSummaryData, LineItemHeaderProperties, widthOfTable, margin, lineItemFirstRowHTML, lineItemLastRowHTML, isFirstRowPresent, isLastRowPresent,isExtendLineItem);
                        } else{
                            linetemhtml = "";
                        }
                    }
//                    itemListElement.html(linetemhtml);
                    Set<String> classSet = itemListElement.classNames();
                    itemListElement.removeAttr("class");
                    itemListElement.removeAttr("style");
                    if ( classSet.contains("joinnextrow") ) {
                        itemListElement.addClass("joinnextrow");
                    }
                    if ( islineitemrepeat ) {   // adding page break class for eparated line item table.
                        itemListElement.addClass("separatelineitem");
                    }
                    itemListElement.html(linetemhtml);
                    if(isPrePrinted){
                        itemListElement.attr("style", lineTableColumnCSS);
                    }
                    buildhtml = jsoupDoc.body().html();
                }

                /*
                 * append Bottom Items
                 */
//                bottomDiv = "";
            }
//            if (!checkfooterflag) {
//                buildhtml += bottomDiv;
//                buildhtml = CustomDesignHandler.replaceImagePathWithAbsolute(request.getParameter("cdomain"), buildhtml);
////                    org.jsoup.nodes.Document jsoupDoc1 = Jsoup.parse(buildhtml);
////                    jsoupDoc1.getElementsByAttribute("id").removeAttr("id");
////
////                    buildhtml = jsoupDoc1.body().html();
////                    buildhtml = " <div style='position:relative; width:" + CustomDesignHandler.pageWidth + ";font-family:" + fontstylevalue + "'>" + buildhtml + "</div>";
////                    if (invoiceIDList.size() > 1) // if multiple records then need to add horizontal linein between templates
////                    {
////                        buildhtml += "<hr style='margin-top: 600px;'>";
////                    }
//                finalBuildHtml += buildhtml;
//            }
            finalBuildHtml += buildhtml;
            finalBuildHtml = CustomDesignHandler.replaceImagePathWithAbsolute(requestJobj.optString("cdomain",""), finalBuildHtml);
            /*
             * Replace placeholder values for Page Footer if any
             */
            if (!StringUtil.isNullOrEmpty(pagefootersqlquery)) {
                jArr = new JSONArray();
                if (!StringUtil.isNullOrEmpty(pagefooterjson)) {
                    jArr = new JSONArray(pagefooterjson);
                }
                default_headers = getDefaultHeaderName_Xtype(customDesignDAOObj, jArr);

                invoiceCols = new ArrayList();
                m = Pattern.compile("#(.+?)#").matcher(pagefootersqlquery);
                while (m.find()) {
                    invoiceCols.add(m.group(1));
                }
                pagefooterhtml = replaceGlobalLevelFields(pagefooterhtml, customDesignDAOObj, accCommonTablesDAO, moduleid, companyid, transactionId, pagefootersqlquery, invoiceCols, df, default_headers, json, false, negativeValueIn, countryid, allFieldParameters);
            }
            pagefooterhtml = CustomDesignHandler.replaceImagePathWithAbsolute(requestJobj.optString("cdomain",""), pagefooterhtml);

            //Replace placeholder values for Page Header if any
            if (!StringUtil.isNullOrEmpty(pageheadersqlquery)) {
                jArr = new JSONArray();
                if (!StringUtil.isNullOrEmpty(pageheaderjson)) {
                    jArr = new JSONArray(pageheaderjson);
                }
                default_headers = getDefaultHeaderName_Xtype(customDesignDAOObj, jArr);

                invoiceCols = new ArrayList();
                m = Pattern.compile("#(.+?)#").matcher(pageheadersqlquery);
                while (m.find()) {
                    invoiceCols.add(m.group(1));
                }
                pageheaderhtml = replaceGlobalLevelFields(pageheaderhtml, customDesignDAOObj, accCommonTablesDAO, moduleid, companyid, transactionId, pageheadersqlquery, invoiceCols, df, default_headers, json, false, negativeValueIn, countryid, allFieldParameters);
            }
            if (isDefaultTemplate) {
                pageheaderhtml = CustomDesignHandler.replaceDefaultImagePathWithAbsolute(requestJobj.optString("cdomain",""), companyid, pageheaderhtml);
            } else {
                pageheaderhtml = CustomDesignHandler.replaceImagePathWithAbsolute(requestJobj.optString("cdomain",""), pageheaderhtml);
            }
            /*
             * Final call to add footer and body content in PDF
             */
//            if (!checkfooterflag) {
////                org.jsoup.nodes.Document jsoupDoc1 = Jsoup.parse(finalBuildHtml);
////                Elements itemListElement1 = jsoupDoc1.getElementsByAttribute("id").removeAttr("id");
////                finalBuildHtml = jsoupDoc1.body().html();
//            } else {//check footer flag
//                finalBuildHtml = topDiv + linetemhtml + bottomDiv;
//                finalBuildHtml = buildhtml;
//                finalBuildHtml = CustomDesignHandler.replaceImagePathWithAbsolute(request.getParameter("cdomain"), finalBuildHtml);
//            }
            jArr = new JSONArray(json);
            StringBuilder finalRowsInTr = new StringBuilder();
            for (int cnt = 0; cnt < jArr.length(); cnt++) {
//                JSONArray colJArr = jArr.getJSONObject(cnt).getJSONArray("data");
                jsoupDoc = Jsoup.parse(finalBuildHtml);
                if (!jArr.getJSONObject(cnt).optBoolean("isheader", false) && !jArr.getJSONObject(cnt).optBoolean("isfooter", false)) {
                    org.jsoup.nodes.Element footerElement = jsoupDoc.getElementById(jArr.getJSONObject(cnt).getString("id"));
                    if (footerElement != null) {
                        finalRowsInTr = finalRowsInTr.append("<tr><td>").append(footerElement.outerHtml()).append("</td></tr>");
                    }
                }
            }
            
            if (StringUtil.isNullOrEmpty(fontstylevalue)) {
                fontstylevalue = "sans-serif";
            }
            JSONObject extLIJobj = new JSONObject();
            extLIJobj.put("isExtendLineItem",isExtendLineItem);
            extLIJobj.put("isPrePrinted",isPrePrinted);
            extLIJobj.put("isExtendedGlobalTable",isExtendedGlobalTable);
            extLIJobj.put("pageSize",isExtendedGlobalTable?pageSizeForExtGT:pageSize);
            extLIJobj.put("pageOrientation",isExtendedGlobalTable?pageOrientationForEXTGT:pageOrientation);
            extLIJobj.put("adjustPageHeight", adjustPageHeight);
            extLIJobj.put(CustomDesignerConstants.IS_MULTIPLE_TRANSACTION, isMultipleTransaction);
            String buildHtml = finalRowsInTr.toString();
            buildHtml = buildHtml.replaceAll("\\s*\n\\s*<!-- -->\\s*\n\\s*", "");
            returnHashMap.put("buildHtml", buildHtml);
            returnHashMap.put("pagefooterhtml", pagefooterhtml);
            returnHashMap.put("fontstylevalue", fontstylevalue);
            returnHashMap.put("pageheaderhtml", pageheaderhtml);
            returnHashMap.put("pagefontsize", pagefontsize);
            returnHashMap.put("extLIJobj", extLIJobj.toString());
//            CustomDesignHandler.writeFinalDataToFileNew(fileName + ".pdf", fileType, buildHtml, pagelayoutproperty, pagefooterhtml, response, moduleid, recordids, request, fontstylevalue, pageheaderhtml, checkfooterflag, pagefontsize);
        } catch (JSONException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseErrorException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MethodInvocationException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnHashMap;
    }
            
    private static HashMap<String, Object> getVendorAgedPayableRequestParams(JSONObject requestJobj) {
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        try {
            requestParams.put("companyid", requestJobj.optString(Constants.companyKey, ""));
            requestParams.put("gcurrencyid", requestJobj.optString(Constants.globalCurrencyKey, ""));
            requestParams.put("dateformat", authHandler.getDateOnlyFormat());
            requestParams.put("start", requestJobj.optString("start",""));
            requestParams.put("limit", requestJobj.optString("limit",""));
            requestParams.put("ss", requestJobj.optString("ss",""));
            requestParams.put("accid", requestJobj.optString("accid",""));
            requestParams.put("cashonly", requestJobj.optString("cashonly",""));
            requestParams.put("creditonly", requestJobj.optString("creditonly",""));
            requestParams.put("ignorezero", requestJobj.optString("ignorezero",""));
            requestParams.put("curdate", requestJobj.optString("curdate",""));
            requestParams.put("persongroup", requestJobj.optString("persongroup",""));
            requestParams.put("isagedgraph", requestJobj.optString("isagedgraph",""));
            requestParams.put("vendorid", requestJobj.optString("vendorid",""));
            requestParams.put("nondeleted", requestJobj.optString("nondeleted",""));
            requestParams.put("duration", requestJobj.optString("duration",""));
            requestParams.put("isdistributive", requestJobj.optString("isdistributive",""));
            requestParams.put("withinventory", requestJobj.optString("withinventory",""));
            requestParams.put(Constants.df, authHandler.getDateOnlyFormat());
            requestParams.put(Constants.REQ_startdate ,requestJobj.optString(Constants.REQ_startdate,""));
            requestParams.put(Constants.REQ_enddate ,requestJobj.optString(Constants.REQ_enddate,""));
            requestParams.put("pendingapproval" ,requestJobj.optBoolean("pendingapproval",false));
            requestParams.put("istemplate" ,requestJobj.optInt("istemplate",0));
            requestParams.put("datefilter", requestJobj.optString("datefilter",""));
            requestParams.put("custVendorID", requestJobj.optString("custVendorID",""));
            requestParams.put("asofdate", requestJobj.optString("asofdate",""));
            requestParams.put("isAged", requestJobj.optString("isAged",""));
            requestParams.put("isAgedPayables", true);
        } catch(Exception ex) {
            
        }
        return  requestParams;
    }

    private static String getValueSeperator(JSONObject json, String fieldName) {
        String defValue = "";
        try {
            JSONArray rows = json.getJSONArray("JSON");
            for (int rowIndex = 0; rowIndex < rows.length(); rowIndex++) {
                JSONObject row = rows.getJSONObject(rowIndex);
                JSONArray columns = row.getJSONArray("data");
                for (int colIndex = 0; colIndex < columns.length(); colIndex++) {
                    JSONObject column = columns.getJSONObject(colIndex);
                    JSONArray fields = column.getJSONArray("data");
                    for (int fieldIndex = 0; fieldIndex < fields.length(); fieldIndex++) {
                        JSONObject field = fields.getJSONObject(fieldIndex);
                        if (field.getInt("fieldType") == CustomDesignerConstants.selectfieldfieldtype) {
                            if (field.getString("label").equals(fieldName)) {
                                defValue = field.optString("valueSeparator", "comma");
                            }
                        }
                        if (field.getInt("fieldType") == CustomDesignerConstants.globaltablefieldtype ) {
                            JSONArray placeHolders = field.optJSONArray("cellplaceholder");
                            if (placeHolders != null) {
                                for (int phIndex = 0; phIndex < placeHolders.length(); phIndex++) {
                                    JSONObject placeHolder = placeHolders.getJSONObject(phIndex);
                                    if (placeHolder.optString("label").equals(fieldName)) {
                                        defValue = placeHolder.optString("valueSeparator", "comma");
                                    }
                                }
                            }
                        }
                        if (field.getInt("fieldType") == CustomDesignerConstants.dataelementfieldtype) {
                            if (field.getString("label").equals(fieldName)) {
                                defValue = field.optString("valueSeparator", "comma");
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
        }
        if(defValue.equals("")){
            defValue = "comma";
        }
        return defValue;
    }
    
      private static JSONObject getFieldParameters(JSONObject json) {
        JSONObject jobj = new JSONObject();
        boolean isOutstandingTablePresent = false;
        JSONArray globalCustomFieldList=new JSONArray();
        try {
            JSONArray rows = json.getJSONArray("JSON");
            for (int rowIndex = 0; rowIndex < rows.length(); rowIndex++) {
                JSONObject row = rows.getJSONObject(rowIndex);
                JSONArray columns = row.getJSONArray("data");
                for (int colIndex = 0; colIndex < columns.length(); colIndex++) {
                    JSONObject column = columns.getJSONObject(colIndex);
                    JSONArray fields = column.getJSONArray("data");
                    for (int fieldIndex = 0; fieldIndex < fields.length(); fieldIndex++) {
                        JSONObject field = fields.getJSONObject(fieldIndex);
                        if (field.getInt("fieldType") == CustomDesignerConstants.summerytablefieldtype) {
                            JSONArray data = field.optJSONArray("data");
                            JSONArray placeHolders = data.getJSONObject(0).optJSONArray("cellplaceholder");
                            jobj.put("linetablefontsize",new JSONArray(field.optString("data", "[]")).getJSONObject(0).optString("fontsize", ""));
                            jobj.put("linetablealign",new JSONArray(field.optString("data", "[]")).getJSONObject(0).optString("align", "center"));
                            jobj.put("linetablebordercolor",new JSONArray(field.optString("data", "[]")).getJSONObject(0).optString("bordercolor", ""));
                            jobj.put("linetablebold",new JSONArray(field.optString("data", "[]")).getJSONObject(0).optBoolean("bold", false));
                            jobj.put("linetableitalic",new JSONArray(field.optString("data", "[]")).getJSONObject(0).optBoolean("italic", false));
                            jobj.put("linetableunderline",new JSONArray(field.optString("data", "[]")).getJSONObject(0).optBoolean("underline", false));
                            jobj.put("linetablewidthOfTable",field.optInt("tablewidth", 100));
                            jobj.put("linetablemarginTop",field.optString("marginTop", ""));
                            jobj.put("linetablemarginBottom",field.optString("marginBottom", ""));
                            jobj.put("linetablemarginLeft",field.optString("marginLeft", ""));
                            jobj.put("linetablemarginRight",field.optString("marginRight", ""));
                            if (placeHolders != null) {
                                for (int phIndex = 0; phIndex < placeHolders.length(); phIndex++) {
                                    JSONObject placeHolder = placeHolders.getJSONObject(phIndex);
                                    if (placeHolder.optInt("xtype") == 2 || placeHolder.optInt("xType") == 2 || placeHolder.optBoolean("isNumeric", false)) {
                                        jobj.put(placeHolder.optString("label") + "decimalPrecision", placeHolder.optInt("decimalPrecision", 2));
                                        jobj.put(placeHolder.optString("label") + "showzerovalueasblank", placeHolder.optBoolean("showzerovalueasblank", false));
                                    } else {
                                        jobj.put(placeHolder.optString("label") + "decimalPrecision", -1);
                                        jobj.put(placeHolder.optString("label") + "showzerovalueasblank", false);
                                    }
                                }
                            }
                            //get fields from line item table global rows
                            if (field.optBoolean(Constants.ISFIRSTROWPRESENT, false) || field.optBoolean(Constants.ISLASTROWPRESENT, false)) {   //Check for the line item table contains global rows
                                JSONArray tableJsonArray = new JSONArray(field.optString("data", "[]"));
                                //data of global rows of line item table is at 1(for first global row) and 2(for last global row) position in json. So starting counter from 1.
                                for (int globalrow = 1; globalrow < tableJsonArray.length();globalrow++) {
                                    JSONArray globalRowArray = tableJsonArray.getJSONArray(globalrow);
                                    //iterate over columns
                                    for (int columnCnt = 0; columnCnt < globalRowArray.length(); columnCnt++) {
                                        JSONObject columnObj = globalRowArray.getJSONObject(columnCnt);
                                        if (!StringUtil.isNullOrEmpty(columnObj.optString("data", ""))) {
                                            JSONArray columnFieldArray = new JSONArray(columnObj.optString("data", ""));
                                            //iterate over fields of column
                                            for (int placeHolderCnt = 0; placeHolderCnt < columnFieldArray.length(); placeHolderCnt++) {
                                                JSONObject placeHolder = columnFieldArray.getJSONObject(placeHolderCnt);
                                                //put all properties in json object
                                                jobj.put(placeHolder.optString("label") + "valueWithComma", placeHolder.optBoolean("valueWithComma", false));
                                                jobj.put(placeHolder.optString("label") + "defaultValue", placeHolder.optString("defaultValue", ""));
                                                jobj.put(placeHolder.optString("label") + "valueSeparator", StringUtil.isNullOrEmpty(placeHolder.optString("valueSeparator", "comma"))? "comma" : placeHolder.optString("valueSeparator", "comma"));
                                                jobj.put(placeHolder.optString("label") + "dimensionValue", placeHolder.optString("dimensionValue", "2"));
                                                if ((placeHolder.optInt("xtype", 0) == 2 || placeHolder.optInt("xType", 0) == 2) || placeHolder.optBoolean("isNumeric", false)) {
                                                    jobj.put(placeHolder.optString("label") + "decimalPrecision", placeHolder.optInt("decimalPrecision", 2));
                                                    jobj.put(placeHolder.optString("label") + "showzerovalueasblank", placeHolder.optBoolean("showzerovalueasblank", false));
                                                } else {
                                                    jobj.put(placeHolder.optString("label") + "decimalPrecision", -1);
                                                    jobj.put(placeHolder.optString("label") + "showzerovalueasblank", false);
                                                }
                                                jobj.put(placeHolder.optString("label") + "specificreccurrency", placeHolder.optString("specificreccurrency", ""));
                                                jobj.put(placeHolder.optString("label") + "isnowrapvalue", placeHolder.optBoolean("isnowrapvalue", false));
                                                jobj.put(placeHolder.optString("label") + "showAmountInWords", placeHolder.optInt("showAmountInWords", 0));
                                            }
                                        }
                                    }
                                }    
                            }
                        }
                        
                        if (field.getInt("fieldType") == CustomDesignerConstants.selectfieldfieldtype) {
                            jobj.put(field.optString("label") + "valueWithComma", field.optBoolean("valueWithComma", false));
                            jobj.put(field.optString("label") + "defaultValue", field.optString("defaultValue", ""));
                            jobj.put(field.optString("label") + "valueSeparator", StringUtil.isNullOrEmpty(field.optString("valueSeparator", "comma"))? "comma" : field.optString("valueSeparator", "comma"));
                            jobj.put(field.optString("label") + "dimensionValue", field.optString("dimensionValue", "2"));
                            if ((field.optInt("xtype", 0) == 2 || field.optInt("xType", 0) == 2) || field.optBoolean("isNumeric", false)) {
                                jobj.put(field.optString("label") + "decimalPrecision", field.optInt("decimalPrecision", 2));
                                jobj.put(field.optString("label") + "showzerovalueasblank", field.optBoolean("showzerovalueasblank", false));
                            } else {
                                jobj.put(field.optString("label") + "decimalPrecision", -1);
                                jobj.put(field.optString("label") + "showzerovalueasblank", false);
                            }
                            jobj.put(field.optString("label") + "specificreccurrency", field.optString("specificreccurrency", ""));
                            jobj.put(field.optString("label") + "isnowrapvalue", field.optBoolean("isnowrapvalue", false));
                            jobj.put(field.optString("label") + "showAmountInWords", field.optInt("showAmountInWords", 0));
                        }

                        if (field.getInt("fieldType") == CustomDesignerConstants.globaltablefieldtype) {
                            JSONArray placeHolders = field.optJSONArray("cellplaceholder");
                            if (!isOutstandingTablePresent) {
                                isOutstandingTablePresent = !StringUtil.isNullOrEmpty(field.optString("isbalanceoutstanding", "")) ? Boolean.parseBoolean(field.optString("isbalanceoutstanding", "")) : false;
                                jobj.put("isOutstandingTablePresent", isOutstandingTablePresent);
                                jobj.put("isOutstandingMultipleCurrency",!StringUtil.isNullOrEmpty(field.optString("isOutstandingMultipleCurrency", "")) ? Boolean.parseBoolean(field.optString("isOutstandingMultipleCurrency", "")) : false);
                            }

                            if (placeHolders != null) {
                                for (int phIndex = 0; phIndex < placeHolders.length(); phIndex++) {
                                    JSONObject placeHolder = placeHolders.getJSONObject(phIndex);
                                    if (placeHolder.optBoolean("customfield", false)) {
                                        globalCustomFieldList.put(placeHolder.optString("placeholder", ""));
                                    }
                                    jobj.put(placeHolder.optString("label") + "valueWithComma", placeHolder.optBoolean("valueWithComma", false));
                                    jobj.put(placeHolder.optString("label") + "defaultValue", placeHolder.optString("defaultValue", ""));
                                    jobj.put(placeHolder.optString("label") + "valueSeparator", StringUtil.isNullOrEmpty(placeHolder.optString("valueSeparator", "comma")) ? "comma" : placeHolder.optString("valueSeparator", "comma"));
                                    jobj.put(placeHolder.optString("label") + "dimensionValue", placeHolder.optString("dimensionValue", "2"));
                                    if ((placeHolder.optInt("xtype", 0) == 2 || placeHolder.optInt("xType", 0) == 2) || placeHolder.optBoolean("isNumeric", false)) {
                                        jobj.put(placeHolder.optString("label") + "decimalPrecision", placeHolder.optInt("decimalPrecision", 2));
                                        jobj.put(placeHolder.optString("label") + "showzerovalueasblank", placeHolder.optBoolean("showzerovalueasblank", false));
                                    } else {
                                        jobj.put(placeHolder.optString("label") + "decimalPrecision", -1);
                                        jobj.put(placeHolder.optString("label") + "showzerovalueasblank", false);
                                    }
                                    jobj.put(placeHolder.optString("label") + "specificreccurrency", placeHolder.optString("specificreccurrency", ""));
                                    jobj.put(placeHolder.optString("label") + "isnowrapvalue", placeHolder.optBoolean("isnowrapvalue", false));
                                    jobj.put(placeHolder.optString("label") + "showAmountInWords", placeHolder.optInt("showAmountInWords", 0));
                                }
                            }
                        }
                        if (field.getInt("fieldType") == CustomDesignerConstants.dataelementfieldtype) {
                            jobj.put(field.optString("label") + "valueWithComma", field.optBoolean("valueWithComma", false));
                            jobj.put(field.optString("label") + "defaultValue", field.optString("defaultValue", ""));
                            jobj.put(field.optString("label") + "valueSeparator", StringUtil.isNullOrEmpty(field.optString("valueSeparator", "comma")) ? "comma" : field.optString("valueSeparator", "comma"));
                            jobj.put(field.optString("label") + "dimensionValue", field.optString("dimensionValue", "2"));
                            if ((field.optInt("xtype", 0) == 2 || field.optInt("xType", 0) == 2)  || field.optBoolean("isNumeric", false)) {
                                jobj.put(field.optString("label") + "decimalPrecision", field.optInt("decimalPrecision", 2) );
                                jobj.put(field.optString("label") + "showzerovalueasblank", field.optBoolean("showzerovalueasblank", false) );
                            } else {
                                jobj.put(field.optString("label") + "decimalPrecision", -1);
                                jobj.put(field.optString("label") + "showzerovalueasblank", false);
                            }
                            jobj.put(field.optString("label") + "specificreccurrency", field.optString("specificreccurrency", ""));
                            jobj.put(field.optString("label") + "isnowrapvalue", field.optBoolean("isnowrapvalue", false));
                        }
                    }
                }
            }
        } catch (Exception ex) {
        }
        return jobj;
    }
    
    /**
     * Function for sorting line item by selected field from line item table
     * @param   lineItemsArr - line item json array
     * @param   sortField - field on which sorting will be done
     * @param   sortFieldXtype - xtype of sorting field (Example -> xtype = 2 for decimal values and xtype = 1 for string values)
     * @param   sortOrder - order for sorting (Ascending or Descending)
     * @param   dateFormat - Date format of current login user
     * @return  sorted line item json array
     */
    private static JSONArray getSortedLineItemArr(JSONArray lineItemsArr, String sortField, String sortFieldXtype, String sortOrder,DateFormat dateFormat,int moduleid) {
        JSONArray retJarr = new JSONArray();
        ArrayList<String> stringArrForSort = new ArrayList<String>();
        ArrayList<Double> doubleArrForSort = new ArrayList<Double>();
        ArrayList<Long> longArrForSort = new ArrayList<Long>();
        JSONArray otherThanLineItemJarr = new JSONArray();
        double amountInBase =0.0;
        
        try {
            if(StringUtil.isNullOrEmpty(sortField) || StringUtil.isNullOrEmpty(sortOrder)){
                retJarr = lineItemsArr;
            } else{
                /**
                 * Loop for getting values of field on which sort will be perfomed
                 */
                for (int j = 0; j < lineItemsArr.length(); j++) {
                    JSONObject jobj = lineItemsArr.getJSONObject(j);
                    if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                        if(jobj.has("accruedBalanceInBase")){
                            amountInBase = jobj.optDouble("accruedBalanceInBase",0.0);
                        }
                    }
                    String key = jobj.optString(sortField, "");
                    if(!StringUtil.isNullOrEmpty(key)){
                        /**
                         * If xtype of sorting field is 2 then it contains double type of values
                         * put them in separate array
                         */
                        if(sortFieldXtype.equals("2")){// for number field
                            doubleArrForSort.add(Double.parseDouble(key));
                        } else if(sortFieldXtype.equals("3")){// for date field
                            Date dt = dateFormat.parse(key);
                            long dtLong = dt.getTime();
                            longArrForSort.add(dtLong);
                        } else{
                            stringArrForSort.add(key);
                        }
                    } else{
                        /**
                         * If value is empty then put it in separate json array
                         * this array will be added at the end of other sorted values
                         */
                        otherThanLineItemJarr.put(lineItemsArr.getJSONObject(j));
                    }
                }
                
                int lineItemRowCount = 0;
                /**
                 * Sort array by ascending and get size of array
                 */
                if(sortFieldXtype.equals("2")){// for number field
                    Collections.sort(doubleArrForSort);
                    lineItemRowCount = doubleArrForSort.size();
                } else if(sortFieldXtype.equals("3")){// for date field
                    Collections.sort(longArrForSort);
                    lineItemRowCount = longArrForSort.size();
                } else{
                    Collections.sort(stringArrForSort);
                    lineItemRowCount = stringArrForSort.size();
                }
                
                String usedValues = "";
                int srno = 1;
                /**
                 * Condition for sorting order (Ascending or Descending)
                 */
                if(sortOrder.equals("asc")){
                    for(int i = 0; i < lineItemRowCount; i++){
                        String arrKay = "";
                        // get key value from array
                        if(sortFieldXtype.equals("2")){// for number field
                            arrKay = doubleArrForSort.get(i) + "";
                        } else if(sortFieldXtype.equals("3")){// for date field
                            arrKay = longArrForSort.get(i) + "";
                        } else{
                            arrKay = stringArrForSort.get(i);
                        }
                        // loop for comparing sorted value as key with field value
                        for (int j = 0; j < lineItemsArr.length(); j++) {
                            JSONObject jobj = lineItemsArr.getJSONObject(j);
                            String key = "";
                            if(sortFieldXtype.equals("2")){// for number field
                                key = jobj.optDouble(sortField, 0.0) + ""; // Convert double value to string
                            } else if(sortFieldXtype.equals("3")){// for date field
                                String dateVal = jobj.optString(sortField, "");
                                if(!StringUtil.isNullOrEmpty(dateVal)){
                                    Date dt = dateFormat.parse(dateVal);
                                    long dtLong = dt.getTime();
                                    key = dtLong +"";
                                } else{
                                    key = "0";
                                }
                            } else{
                                key = jobj.optString(sortField, "");
                            }
                            /**
                             * If value from sorted array match with value from line item array then put in return array
                             */
                            if(!StringUtil.isNullOrEmpty(key) && key.equals(arrKay) && !usedValues.contains(key)){
                                
                                if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                                    //To Handle SOA Case For Balance Amount
                                    if (!jobj.getString("type").equals(Constants.CASH_SALE) && !jobj.getString("type").equals(Constants.CASH_PURCHASE)) { // Exclude Cash Sales/Purchase From calculation of Total Amount in Base In case of soa
                                        amountInBase += jobj.optDouble("DebitAmountInBase", 0.0);
                                        amountInBase -= jobj.optDouble("CreditAmountInBase", 0.0);
                                    }
                                    jobj.put("BalanceAmountInBase", amountInBase);
                                }
                                jobj.put("0", srno++);
                                retJarr.put(jobj);
                            }
                        }
                        usedValues += arrKay + "!##";
                    }
                } else{
                    for(int i = lineItemRowCount-1; i >= 0; i--){
                        String arrKay = "";
                        // get key value from array
                        if(sortFieldXtype.equals("2")){// for number field
                            arrKay = doubleArrForSort.get(i) + "";
                        } else if(sortFieldXtype.equals("3")){// for date field
                            arrKay = longArrForSort.get(i) + "";
                        } else{
                            arrKay = stringArrForSort.get(i);
                        }
                        // loop for comparing sorted value as key with field value
                        for (int j = 0; j < lineItemsArr.length(); j++) {
                            JSONObject jobj = lineItemsArr.getJSONObject(j);
                            String key = "";
                            if(sortFieldXtype.equals("2")){// for number field
                                key = jobj.optDouble(sortField, 0.0) + ""; // Convert double value to string
                            } else if(sortFieldXtype.equals("3")){// for date field
                                String dateVal = jobj.optString(sortField, "");
                                if(!StringUtil.isNullOrEmpty(dateVal)){
                                    Date dt = dateFormat.parse(dateVal);
                                    long dtLong = dt.getTime();
                                    key = dtLong +"";
                                } else{
                                    key = "0";
                                }
                            } else{
                                key = jobj.optString(sortField, "");
                            }
                            /**
                             * If value from sorted array match with value from line item array then put in return array
                             */
                            if(!StringUtil.isNullOrEmpty(key) && key.equals(arrKay) && !usedValues.contains(key)){
                               
                                if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                                    //To Handle SOA Case For Balance Amount
                                    if (!jobj.getString("type").equals(Constants.CASH_SALE) && !jobj.getString("type").equals(Constants.CASH_PURCHASE)) { // Exclude Cash Sales/Purchase From calculation of Total Amount in Base In case of soa
                                        amountInBase += jobj.optDouble("DebitAmountInBase", 0.0);
                                        amountInBase -= jobj.optDouble("CreditAmountInBase", 0.0);
                                    }
                                    jobj.put("BalanceAmountInBase", amountInBase);
                                }
                                jobj.put("0", srno++);
                                retJarr.put(jobj);
                            }
                        }
                        usedValues += arrKay + "!##";
                    }
                }

                /**
                 * Put jsonobject of blank values and global fields in return array
                 */
                for(int ind = 0; ind < otherThanLineItemJarr.length(); ind++){
                    JSONObject jobj = otherThanLineItemJarr.getJSONObject(ind);
                     
                    if(moduleid == Constants.Acc_Customer_AccStatement_ModuleId || moduleid == Constants.Acc_Vendor_AccStatement_ModuleId){
                        //To Handle SOA Case For Balance Amount
                        amountInBase += jobj.optDouble("DebitAmountInBase", 0.0);
                        amountInBase -= jobj.optDouble("CreditAmountInBase", 0.0);
                        jobj.put("BalanceAmountInBase", amountInBase);
                    }
                    jobj.put("0", srno++);
                    retJarr.put(jobj);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        return retJarr;
    }
    /*
     * Consolidated Line Table means if same product is added in multiple line item. Then to show that product only one time summing its qty.
     * Author : Kausar
     */
    private static JSONArray getConsolidatedLineItem(JSONArray jarr, boolean isconsolidated) {
        JSONArray retJarr = new JSONArray();
        try {
            /*
             * If not consolidated then pass line item array as it is. 
             */
            if (!isconsolidated) {
                retJarr = jarr;
            } else {
                /*
                 * Creating product qunatity map to sum up qty for same product.
                 */
                Set<String> prodCodeSet = new HashSet<String>();
                Map<String,Object> prodCodeQtyMap = new HashMap<String,Object>();
                Map<String,Object> prodCodeAmountMap = new HashMap<String,Object>();
                for (int i = 0; i < jarr.length(); i++) {
                    JSONObject tempJobj =  jarr.getJSONObject(i);
                    /*
                     * summary data object should not be entertained.
                     */
                    if (!tempJobj.optBoolean("summarydata", false)) {
                        String productCode = "";
                        productCode = tempJobj.optString(CustomDesignerConstants.IN_ProductCode, "");
                        double prodQty = 0;
                        double tempQty = 0;
                        double prodamount = 0;
                        double tempamount = 0;
                        prodQty = tempJobj.optDouble(CustomDesignerConstants.IN_Quantity, 0);
                        prodamount = tempJobj.optDouble(CustomDesignerConstants.Amount, 0);
                        /*
                         * fetching line level qty for product 
                         */
                        if (prodCodeQtyMap.get(productCode+"qty") != null && !StringUtil.isNullOrEmpty(prodCodeQtyMap.get(productCode+"qty").toString())) {
                            tempQty = Double.parseDouble(prodCodeQtyMap.get(productCode+"qty").toString());
                        }
                        if (prodCodeAmountMap.get(productCode+"amount") != null && !StringUtil.isNullOrEmpty(prodCodeAmountMap.get(productCode+"amount").toString())) {
                            tempamount = Double.parseDouble(prodCodeAmountMap.get(productCode+"amount").toString());
                        }
                        /*
                         * summing  up the qty
                         */
                        prodCodeAmountMap.put(productCode+"amount", tempamount + prodamount);
                        prodCodeQtyMap.put(productCode+"qty", tempQty + prodQty);
                    } 
                }
                /*
                 * Adding consolidated line item 
                 */
                for (int i = 0; i < jarr.length(); i++) {
                    JSONObject tempJobj =  jarr.getJSONObject(i);
                    /*
                     * summary data object should not be entertained.
                     */
                    if (!tempJobj.optBoolean("summarydata", false)) {
                        String productCode = "";
                        productCode = tempJobj.optString(CustomDesignerConstants.IN_ProductCode, "");
                        if (!prodCodeSet.contains(productCode)) {
                            tempJobj.put(CustomDesignerConstants.IN_Quantity, prodCodeQtyMap.get(productCode+"qty"));
                            tempJobj.put(CustomDesignerConstants.QuantitywithUOM, prodCodeQtyMap.get(productCode+"qty") + " " + tempJobj.optString(CustomDesignerConstants.IN_UOM, ""));
                            tempJobj.put(CustomDesignerConstants.Amount, prodCodeAmountMap.get(productCode+"amount"));
                            retJarr.put(tempJobj);
                            prodCodeSet.add(productCode);
                        }
                    } else {
                        retJarr.put(tempJobj);
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        return retJarr;
    }
    private static JSONArray getLineItemArrByProductCategory(JSONArray jarr, boolean isGroupingApplied, boolean isGroupLastRow, JSONArray groupByArr, JSONArray groupAfterByArr,int countryid, String companyid) {
        JSONArray retJarr = new JSONArray();
        try {
            if (!isGroupingApplied) {
                retJarr = jarr;
            } else {
                Set<String> categorySet = new TreeSet<String>();
                List<String> categoryList = new ArrayList<String>();
                String groupAfterBy = "";
                Set<String> groupAfterBySet = new TreeSet<String>();
                JSONObject groupAfterByPropertyJobj = new JSONObject();
                int decimalPrecison = 2;
                for (int k = 0; k < groupAfterByArr.length(); k++) {
                    if (!StringUtil.isNullOrEmpty(groupAfterByArr.getJSONObject(k).optString("label"))) {
                        groupAfterBy = groupAfterByArr.getJSONObject(k).optString("putin");
                        decimalPrecison = groupAfterByArr.getJSONObject(k).optInt("decimalprecision", 2);
                        //Put formatting amount field in set
                        groupAfterBySet.add(groupAfterBy);
                        //Put properties of field in json object with unique key
                        groupAfterByPropertyJobj.put(groupAfterBy+"_decimalprecision", decimalPrecison);
                    }
                }

                String groupingFieldkey = "";
                for(int cnt=0; cnt<groupByArr.length(); cnt++){
//                    Object[] objArr = (Object[]) groupByArr.get(cnt);
                    JSONObject jsonObj = groupByArr.getJSONObject(cnt);
                    if(jsonObj.has("columnname") && (jsonObj.get("columnname").equals(CustomDesignerConstants.PRODUCT_CATEGORY) || jsonObj.get("columnname").equals(CustomDesignerConstants.PRODUCT_ID))){
                        groupingFieldkey = jsonObj.getString("columnname");
                        break;
                    } else if(jsonObj.has("key")){
                        groupingFieldkey = jsonObj.getString("key");
                        break;
                    }
                }
                if(groupingFieldkey.equals(CustomDesignerConstants.PRODUCT_CATEGORY)){
                    for (int i = 0; i < jarr.length(); i++) {
                        if (!StringUtil.isNullOrEmpty(jarr.getJSONObject(i).optString("productCategory", ""))) {
                            String category = jarr.getJSONObject(i).optString("productCategory", "");
                            categorySet.add(category);
                        }
                    }
                } else if (groupingFieldkey.equals(CustomDesignerConstants.PRODUCT_ID)) {
                    //If grouping is on Production ID then get product id anf put it in grouping set
                    for (int i = 0; i < jarr.length(); i++) {
                        if (!StringUtil.isNullOrEmpty(jarr.getJSONObject(i).optString(CustomDesignerConstants.IN_ProductCode, ""))) {
                            String category = jarr.getJSONObject(i).optString(CustomDesignerConstants.IN_ProductCode, "");
                            categorySet.add(category);
                        }
                    }
                } else if (groupingFieldkey.equals(CustomDesignerConstants.BILLING_ADDRESS)) {
                    //If grouping is on Billing Address then get Billing Address and put it in grouping set
                    for (int i = 0; i < jarr.length(); i++) {
                        if (!StringUtil.isNullOrEmpty(jarr.getJSONObject(i).optString(CustomDesignerConstants.BILLING_ADDRESS, ""))) {
                            String category = jarr.getJSONObject(i).optString(CustomDesignerConstants.BILLING_ADDRESS, "");
                            categorySet.add(category);
                        }
                    }
                } else if (groupingFieldkey.equals(CustomDesignerConstants.SHIPPING_ADDRESS)) {
                    //If grouping is on Shipping Address then get Shipping Address and put it in grouping set
                    for (int i = 0; i < jarr.length(); i++) {
                        if (!StringUtil.isNullOrEmpty(jarr.getJSONObject(i).optString(CustomDesignerConstants.SHIPPING_ADDRESS, ""))) {
                            String category = jarr.getJSONObject(i).optString(CustomDesignerConstants.SHIPPING_ADDRESS, "");
                            categorySet.add(category);
                        }
                    }
                } else{
                    JSONArray groupingComboJsonArr = jarr.getJSONObject(0).getJSONArray("groupingComboList");
                    
                    for(int cnt=0; cnt < groupingComboJsonArr.length(); cnt++){
                        String comboName = groupingComboJsonArr.getJSONObject(cnt).getString("comboName");
                        if(groupingFieldkey.equals(comboName)){
                            for (int i = 0; i < jarr.length(); i++) {
                                if (!StringUtil.isNullOrEmpty(jarr.getJSONObject(i).optString(comboName, ""))) {
                                    String category = jarr.getJSONObject(i).optString(comboName, "");
                                    categorySet.add(category);
                                } else{
                                    categorySet.add(Constants.NONE);
                                }
                            }
                        }
                    }
                }
                boolean isNonePresent = categorySet.contains(Constants.NONE);
                Iterator ite = categorySet.iterator();
                if (isNonePresent) {
                    categoryList.add(Constants.NONE);
                    while (ite.hasNext()) {
                        String categoryName = ite.next().toString();
                        if (!StringUtil.equalIgnoreCase(Constants.NONE, categoryName)) {
                            categoryList.add(categoryName);
                        }
                    }
                    ite = categoryList.iterator();
                }
                
                int sno = 1; //for Sr.No.
                
                while (ite.hasNext()) {
                    String categoryName = ite.next().toString();
                    JSONObject categoryJobj = new JSONObject();
                    categoryJobj.put("isCategory", true);
                    if (categoryName == Constants.NONE) {
                        categoryJobj.put("name", " ");
                    } else {
                        categoryJobj.put("name", categoryName);
                        retJarr.put(categoryJobj);
                    }
                    
                    JSONObject groupingAfterJobj = new JSONObject();
                    for (int j = 0; j < jarr.length(); j++) {
                        boolean isProceedToGrouping = false;
                        //identify is there grouping field present. It yes then proceed to grouping otherwise ignore
                        if (groupingFieldkey.equals(CustomDesignerConstants.PRODUCT_CATEGORY)) {
                            // for Product Category
                            if (categoryName.equals(jarr.getJSONObject(j).optString("productCategory", ""))) {
                                isProceedToGrouping = true;
                            }
                        } else if (groupingFieldkey.equals(CustomDesignerConstants.PRODUCT_ID)) {
                            // for Product ID
                            if (categoryName.equals(jarr.getJSONObject(j).optString(CustomDesignerConstants.IN_ProductCode, ""))) {
                                isProceedToGrouping = true;
                            }
                        } else if (groupingFieldkey.equals(CustomDesignerConstants.BILLING_ADDRESS)) {
                            // for Billing Address
                            if (categoryName.equals(jarr.getJSONObject(j).optString(CustomDesignerConstants.BILLING_ADDRESS, ""))) {
                                isProceedToGrouping = true;
                            }
                        } else if (groupingFieldkey.equals(CustomDesignerConstants.SHIPPING_ADDRESS)) {
                            // for Shipping Address
                            if (categoryName.equals(jarr.getJSONObject(j).optString(CustomDesignerConstants.SHIPPING_ADDRESS, ""))) {
                                isProceedToGrouping = true;
                            }
                        } else {
                            // for all Dimension fields
                            if (!StringUtil.isNullOrEmpty(jarr.getJSONObject(j).optString("groupingComboList", ""))) {
                                if (categoryName.equals(jarr.getJSONObject(j).optString(groupingFieldkey, ""))) {
                                    isProceedToGrouping = true;
                                } else if (categoryName.equals(Constants.NONE) && StringUtil.isNullOrEmpty(jarr.getJSONObject(j).optString(groupingFieldkey, ""))) {
                                    isProceedToGrouping = true;
                                }
                            } else {
                                retJarr.put(jarr.getJSONObject(j));
                            }
                        }
                        // If proceed to grouping is true then make grouping of amount
                        if (isProceedToGrouping) {
                            Iterator groupAfterItr = groupAfterBySet.iterator();
                            //Iterate formatting amount fields used in template like Quantity, Sub Total
                            while (groupAfterItr.hasNext()) {
                                //get field name
                                String groupAfterByStr = groupAfterItr.next().toString();
                                //get value from json object which have key as formatting field. If not present then get 0.0
                                double tempVal = groupingAfterJobj.optDouble(groupAfterByStr, 0.0);
                                //make addition of new value and existing value
                                tempVal += jarr.getJSONObject(j).optDouble(groupAfterByStr, 0.0);
                                //put new value in same json object after addition with respective field as key
                                groupingAfterJobj.put(groupAfterByStr, tempVal);
                            }
                            //update Sr.No. of row and put in arr. ("0" is constant key for Sr.No. field) : ERP-25024
                            retJarr.put(jarr.getJSONObject(j).putOpt(CustomDesignerConstants.SrNO, sno++));
                        }
                    }
                    //If grouping after set is not empty and grouping object have some values then put it in line item json array
                    if (!groupAfterBySet.isEmpty() && groupingAfterJobj.length() > 0) {
                        JSONObject groupAfterJobj = new JSONObject();
                        //put flag for notify that it is grouping after row object
                        groupAfterJobj.put("isGroupAfter", true);
                        
                        Iterator groupAfterItr = groupAfterBySet.iterator();
                        //Iterate formatting amount fields used in template like Quantity, Sub Total
                        while (groupAfterItr.hasNext()) {
                            //get field name
                            String groupAfterByStr = groupAfterItr.next().toString();
                            //get value from json object which have key as formatting field. If not present then get 0.0
                            double tempVal = groupingAfterJobj.optDouble(groupAfterByStr, 0.0);
                            //make amount round
                            double tempDecimalRoundValue = authHandler.round(tempVal, companyid);
                            //get decimal precision for respective field and apply on amount
                            String tempDecimalValue = CustomDesignHandler.getAmountinCommaDecimal(tempDecimalRoundValue, groupAfterByPropertyJobj.optInt(groupAfterByStr + "_decimalprecision", 2), countryid);
                            //put formatted amount as value with respective fieldname as key in json object
                            groupAfterJobj.put(groupAfterByStr + "_" + Constants.data, tempDecimalValue);
                        }
                        //Put grouping json object in line item json array
                        retJarr.put(groupAfterJobj);
                    }
                }
            }
        } catch (Exception ex) {
        }
        return retJarr;
    }

    private static int getDecimalPrecision(JSONObject json, String fieldName) {
        int decimalPrecision = -1;
        try {
            JSONArray rows = json.getJSONArray("JSON");
            for (int rowIndex = 0; rowIndex < rows.length(); rowIndex++) {
                JSONObject row = rows.getJSONObject(rowIndex);
                JSONArray columns = row.optJSONArray("data");
                if (columns != null) {
                    for (int colIndex = 0; colIndex < columns.length(); colIndex++) {
                        JSONObject column = columns.getJSONObject(colIndex);
                        JSONArray fields = column.optJSONArray("data");
                        if (fields != null) {
                            for (int fieldIndex = 0; fieldIndex < fields.length(); fieldIndex++) {
                                JSONObject field = fields.getJSONObject(fieldIndex);
                                if (field.optInt("fieldType", 0) == CustomDesignerConstants.selectfieldfieldtype && (field.optInt("xtype", 0) == 2 || field.optInt("xType", 0) == 2)) {
                                    if (field.optString("label", "").equals(fieldName)) {
                                        decimalPrecision = field.optInt("decimalPrecision", 2);
                                        break;
                                    }
                                }
                                if (field.optInt("fieldType", 0) == CustomDesignerConstants.dataelementfieldtype && (field.optInt("xtype", 0) == 2 || field.optInt("xType", 0) == 2)) {
                                    if (field.optString("label").equals(fieldName)) {
                                        decimalPrecision = field.optInt("decimalPrecision", 2);
                                        break;
                                    }
                                }
                                if (field.optInt("fieldType") == CustomDesignerConstants.globaltablefieldtype) {
                                    JSONArray placeHolders = field.optJSONArray("cellplaceholder");
                                    if (placeHolders != null) {
                                        for (int phIndex = 0; phIndex < placeHolders.length(); phIndex++) {
                                            JSONObject placeHolder = placeHolders.getJSONObject(phIndex);
                                            if (placeHolder.optString("label").equals(fieldName) && (placeHolder.optInt("xtype") == 2 || placeHolder.optInt("xType") == 2)) {
                                                decimalPrecision = placeHolder.optInt("decimalPrecision", 2);
                                                break;
                                            }
                                        }
                                    }
                                }
                                if (field.optInt("fieldType") == CustomDesignerConstants.summerytablefieldtype) {
                                    JSONArray data = field.optJSONArray("data");
                                    JSONArray placeHolders = data.getJSONObject(0).optJSONArray("cellplaceholder");
                                    if (placeHolders != null) {
                                        for (int phIndex = 0; phIndex < placeHolders.length(); phIndex++) {
                                            JSONObject placeHolder = placeHolders.getJSONObject(phIndex);
                                            if (placeHolder.optString("label").equals(fieldName) && (placeHolder.optInt("xtype") == 2 || placeHolder.optInt("xType") == 2)) {
                                                decimalPrecision = placeHolder.optInt("decimalPrecision", 2);
                                                break;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        return decimalPrecision;
    }
    /*
     * Fetching Terms
     */
    //Get Summary Terms and insert into Default Header-ERP-13451

    private static JSONObject fetchSummaryTermFields(CustomDesignDAO customDesignDAOObj, HashMap<String, Object> hm, JSONArray numberFieldArray, JSONObject itemData, int negativeValueIn,int countryid, String json, JSONObject allFieldParameters) throws ServiceException, JSONException {
        JSONObject returnjson = new JSONObject();
        JSONObject staticColInfo = new JSONObject();
        String html = "", pagefooterhtml = "", pageheaderhtml = "";
        String lineItemFirstRowHTML = "";
        String lineItemLastRowHTML = "";
        try {
            if (hm.containsKey("html")) {
                html = (String) hm.get("html");
            }
            if (hm.containsKey("pagefooterhtml")) {
                pagefooterhtml = (String) hm.get("pagefooterhtml");
            }
            if (hm.containsKey("pageheaderhtml")) {
                pageheaderhtml = (String) hm.get("pageheaderhtml");
            }
            if (hm.containsKey("lineItemFirstRowHTML")) {
                lineItemFirstRowHTML = (String) hm.get("lineItemFirstRowHTML");
            }
            if (hm.containsKey("lineItemLastRowHTML")) {
                lineItemLastRowHTML = (String) hm.get("lineItemLastRowHTML");
            }
            KwlReturnObject result = customDesignDAOObj.getSummaryTerms(hm);
            List list = result.getEntityList();
            for (int cnt = 0; cnt < list.size(); cnt++) {
                Object[] row = (Object[]) list.get(cnt);
                int decimalPrecision = 0;
                decimalPrecision = allFieldParameters.optInt((String) row[1] + "decimalPrecision", 2);
                boolean zeroValueAsBlank = allFieldParameters.optBoolean((String) row[1] + "showzerovalueasblank", false);
                if (itemData.has((String) row[1])) {//row[1]-termname in itemData
                    String value = itemData.get((String) row[1]).toString();
                    for (int fieldCnt = 0; fieldCnt < numberFieldArray.length(); fieldCnt++) {
                        JSONObject fieldJson = numberFieldArray.getJSONObject(fieldCnt);
                        if (((String) row[1]).equals(fieldJson.getString(("label")))) {
                            decimalPrecision = Integer.parseInt(fieldJson.getString(("decimalPrecision")));
                            break;
                        }
                    }
                    staticColInfo.put("decimalPrecision", decimalPrecision);
                    staticColInfo.put("label", (String) row[1]);
                    if (!StringUtil.isNullOrEmpty(value)) {
                        try {
                            value = CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(value), decimalPrecision, countryid);
                            if(zeroValueAsBlank) {
                                value = CustomDesignHandler.getZeroAmountAsBlank(value);
                            }
                        } catch (NumberFormatException ex) {
                            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    }
                    if(value.contains("-")){
                        if(negativeValueIn == 1){
                            //No need to modification
                        } else if(negativeValueIn == 2){
                            value = value.replace("-", "");
                            value = "("+value+")";
                        }
                    }
                    html = html.replace("#" + (String) row[1] + "#", value);
                    pagefooterhtml = pagefooterhtml.replace("#" + (String) row[1] + "#", value);
                    pageheaderhtml = pageheaderhtml.replace("#" + (String) row[1] + "#", value);
                    lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + (String) row[1] + "#", value);
                    lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + (String) row[1] + "#", value);
                } else {
                    String value = "0.00";
                    String defVal = allFieldParameters.optString((String) row[1] + "defaultValue","");
                    if(!StringUtil.isNullOrEmpty(defVal)) {
                        value = defVal;
                    } else {
                        value = CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(value), decimalPrecision, countryid);
                    }
                    if(zeroValueAsBlank) {
                        value = CustomDesignHandler.getZeroAmountAsBlank(value);
                    }
                    html = html.replace("#" + (String) row[1] + "#", value);
                    pagefooterhtml = pagefooterhtml.replace("#" + (String) row[1] + "#", value);
                    pageheaderhtml = pageheaderhtml.replace("#" + (String) row[1] + "#", value);
                    lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + (String) row[1] + "#", value);
                    lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + (String) row[1] + "#", value);
                }

                /*
                 * Converted to base currency Exchange Rate Term Value
                 */
                decimalPrecision = allFieldParameters.optInt(CustomDesignerConstants.BaseCurrency + (String) row[1] + "decimalPrecision", 2);
                if (itemData.has(CustomDesignerConstants.BaseCurrency + (String) row[1])) {//row[1]-fieldname in itemData
                    String basecurrencyterm = CustomDesignerConstants.BaseCurrency + (String) row[1];
                    String value = itemData.get(basecurrencyterm).toString();
                    for (int fieldCnt = 0; fieldCnt < numberFieldArray.length(); fieldCnt++) {
                        JSONObject fieldJson = numberFieldArray.getJSONObject(fieldCnt);
                        if ((basecurrencyterm).equals(fieldJson.getString(("label")))) {
                            decimalPrecision = Integer.parseInt(fieldJson.getString(("decimalPrecision")));
                            break;
                        }
                    }
                    value = CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(value), decimalPrecision,countryid);
                    if(zeroValueAsBlank) {
                        value = CustomDesignHandler.getZeroAmountAsBlank(value);
                    }
                    if(value.contains("-")){
                        if(negativeValueIn == 1){
                            //No need to modification
                        } else if(negativeValueIn == 2){
                            value = value.replace("-", "");
                            value = "("+value+")";
                        }
                    }
                    html = html.replace("#" + basecurrencyterm + "#", value);
                    pagefooterhtml = pagefooterhtml.replace("#" + basecurrencyterm + "#", value);
                    pageheaderhtml = pageheaderhtml.replace("#" + basecurrencyterm + "#", value);
                    lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + basecurrencyterm + "#", value);
                    lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + basecurrencyterm + "#", value);
                } else {
                    String value = "0.00";
                    String defVal = allFieldParameters.optString((String) row[1] + "defaultValue","");
                    if(!StringUtil.isNullOrEmpty(defVal)) {
                        value = defVal;
                    } else {
                        value = CustomDesignHandler.getAmountinCommaDecimal(Double.parseDouble(value), decimalPrecision, countryid);
                    }
                    if(zeroValueAsBlank) {
                        value = CustomDesignHandler.getZeroAmountAsBlank(value);
                    }
                    html = html.replace("#" + CustomDesignerConstants.BaseCurrency + (String) row[1] + "#", value);
                    pagefooterhtml = pagefooterhtml.replace("#" + CustomDesignerConstants.BaseCurrency + (String) row[1] + "#", value);
                    pageheaderhtml = pageheaderhtml.replace("#" + CustomDesignerConstants.BaseCurrency + (String) row[1] + "#", value);
                    lineItemFirstRowHTML = lineItemFirstRowHTML.replace("#" + CustomDesignerConstants.BaseCurrency + (String) row[1] + "#", value);
                    lineItemLastRowHTML = lineItemLastRowHTML.replace("#" + CustomDesignerConstants.BaseCurrency + (String) row[1] + "#", value);
                }
            }
            returnjson.put("html", html);
            returnjson.put("pagefooterhtml", pagefooterhtml);
            returnjson.put("pageheaderhtml", pageheaderhtml);
            returnjson.put("lineItemFirstRowHTML", lineItemFirstRowHTML);
            returnjson.put("lineItemLastRowHTML", lineItemLastRowHTML);

        } catch (Exception ex) {
            Logger.getLogger(CustomDesignController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
        }
        return returnjson;
    }
    /*
     * Dimension with Sequence-All Dimensions
     */

    public static HashMap<String, Object> CustomFieldDimensionwithSequence(HashMap<String, Object> otherfieldparams, JSONObject itemData) throws JSONException {

        String json = "", orderedsequence = "", fieldid = "";
        int moduleid = 0;
        boolean islineitem = true;
        StringBuilder appendimensionString = new StringBuilder();
        HashMap<String, Object> returnmap = new HashMap<String, Object>();

        try {
            if (otherfieldparams.containsKey(CustomDesignerConstants.json)) {
                json = (String) otherfieldparams.get(CustomDesignerConstants.json);
            }

            if (otherfieldparams.containsKey(Constants.moduleid)) {
                moduleid = (Integer) otherfieldparams.get(Constants.moduleid);
            }

            if (otherfieldparams.containsKey(CustomDesignerConstants.islineitem)) {
                islineitem = Boolean.parseBoolean((String) otherfieldparams.get(CustomDesignerConstants.islineitem));
            }

            if (otherfieldparams.containsKey(CustomDesignerConstants.fieldid)) {
                fieldid = (String) otherfieldparams.get(CustomDesignerConstants.fieldid);
            }

            if (islineitem) {//For lineitem section
                if (!StringUtil.isNullOrEmpty(json)) {
                    JSONArray jUserLineConfArr = new JSONArray();
                    JSONArray columndataArr = new JSONArray();
                    JSONArray jUserConfArr = new JSONArray(json);
                    HashMap<String, Object> lineitemmap = CustomDesignHandler.getLineItemsDetails(jUserConfArr);
                    if (lineitemmap.containsKey(Constants.Customedlineitems) && lineitemmap.get(Constants.Customedlineitems) != null) {
                        jUserLineConfArr = (JSONArray) lineitemmap.get(Constants.Customedlineitems);
                    }

                    if (lineitemmap.containsKey("columndata") && lineitemmap.get("columndata") != null) {
                        columndataArr = (JSONArray) lineitemmap.get("columndata");
                    }

                    if (jUserLineConfArr.length() > 0) {
                        for (int i = 0; i < jUserLineConfArr.length(); i++) {
                            JSONObject objects = jUserLineConfArr.getJSONObject(i);
                            orderedsequence = returnAllDimensionCustomFieldSortedvalue(objects, appendimensionString, itemData);
                            returnmap.put("prodData", orderedsequence);
                        }
                    }
                }

            } else if (!islineitem) {//Case for repeat global table,global table for all modules
                JSONArray jUserConfArr = new JSONArray(json);

                for (int cnt = 0; cnt < jUserConfArr.length(); cnt++) {
                    JSONArray colJArr = jUserConfArr.getJSONObject(cnt).getJSONArray("data");
                    for (int colcnt = 0; colcnt < colJArr.length(); colcnt++) {
                        JSONArray itemsJArr = colJArr.getJSONObject(colcnt).getJSONArray("data");
                        for (int itemCnt = 0; itemCnt < itemsJArr.length(); itemCnt++) {
                            JSONObject jObj = itemsJArr.getJSONObject(itemCnt);

                            if (jObj.optInt("fieldType", 0) == 12) {//For Global Table
                                String cellplaceholder = jObj.optString("cellplaceholder", "[]");
                                JSONArray cellplaceholderArr = new JSONArray(cellplaceholder);

                                for (int count = 0; count < cellplaceholderArr.length(); count++) {
                                    JSONObject jsonobject = cellplaceholderArr.getJSONObject(count);

                                    if (jsonobject.has("fieldid") && jsonobject.optString("fieldid", "").equals(fieldid)) {

                                        orderedsequence = returnAllDimensionCustomFieldSortedvalue(jsonobject, appendimensionString, itemData);
                                        returnmap.put("prodData", orderedsequence);
                                        break;//because the whole function is in loop
                                    }
                                }
                            } else if (jObj.optInt("fieldType", 0) == 2) {//For select Field
                                if (jObj.has("fieldid") && jObj.optString("fieldid", "").equals(fieldid)) {
                                    orderedsequence = returnAllDimensionCustomFieldSortedvalue(jObj, appendimensionString, itemData);
                                    returnmap.put("prodData", orderedsequence);
                                    break;//because the whole function is in loop
                                }

                            }
                        }
                    }
                }

            }//end of parent else
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);

        }
        return returnmap;
    }

    public static JSONArray sortJsonArrayOnSequence(JSONArray array) throws JSONException {
        List<JSONObject> jsons = new ArrayList<JSONObject>();
        try {
            for (int i = 0; i < array.length(); i++) {
                jsons.add(array.getJSONObject(i));
            }
            Collections.sort(jsons, new Comparator<JSONObject>() {

                @Override
                public int compare(JSONObject lhs, JSONObject rhs) {
                    String lid = "", rid = "";
                    boolean iscustomfield = false;
                    try {
//                        iscustomfield = Boolean.parseBoolean(lhs.getString("iscustomfield"));
                        if (lhs.has("sequence")) {
                            lid = String.valueOf(lhs.getInt("sequence"));
                            rid = String.valueOf(rhs.getInt("sequence"));
                        }
                    } catch (JSONException ex) {
                        Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return lid.compareTo(rid);
                }
            });
        } catch (JSONException ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
        }
        return new JSONArray(jsons);
    }

    /*
     * return appended value FOR Dimension and customfield-Applicable for both
     * line level and Global Section
     */
    public static String returnAllDimensionCustomFieldSortedvalue(JSONObject fieldjsonobject, StringBuilder appendimensionString, JSONObject itemData) throws JSONException {
        JSONObject jsonobjectfinal = fieldjsonobject;
        try {
            if (jsonobjectfinal.has("fieldid")) {
                String dimensionordersequence = "";
                String keyvalue = jsonobjectfinal.getString("fieldid");

                /*
                 * For both Global Level Dimensions and LIne level Dimensions
                 */
                if (keyvalue.equals(CustomDesignerConstants.AllDimensions) || keyvalue.equals(CustomDesignerConstants.AllGloballevelDimensions)) {
                    if (jsonobjectfinal.has(CustomDesignerConstants.DimensionOrder)) {
                        dimensionordersequence = jsonobjectfinal.optString(CustomDesignerConstants.DimensionOrder, "[]");
                        JSONArray dimensionorder = new JSONArray(dimensionordersequence);

                        if (dimensionorder.length() > 0) {//if it has dimensionorder and value is empty
                            JSONArray jArr = sortJsonArrayOnSequence(dimensionorder);
                            for (int cnt = 0; cnt < jArr.length(); cnt++) {
                                JSONObject jsonobjects = jArr.getJSONObject(cnt);
                                if (itemData.has(jsonobjects.getString(CustomDesignerConstants.FieldName))) {
                                    String dimensionPlaceholder = CustomDesignerConstants.DimensionKeyValuePair;
                                    dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.DimensionLabel, jsonobjects.getString(CustomDesignerConstants.CustomLabel));
                                    dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.DimensionValue, itemData.optString((String) jsonobjects.getString(CustomDesignerConstants.FieldName), ""));
//                                    if (cnt != jArr.length() - 1) {
//                                        dimensionPlaceholder = dimensionPlaceholder + "</br>";
//                                    }
                                    appendimensionString.append(dimensionPlaceholder);
                                }
                            }
                            if (keyvalue.equals(CustomDesignerConstants.AllDimensions)) {
                                itemData.put(CustomDesignerConstants.AllDimensions, appendimensionString.toString());
                            } else {
                                itemData.put(CustomDesignerConstants.AllGloballevelDimensions, appendimensionString.toString());
                            }
                        }
                    }
                } else if (keyvalue.equals(CustomDesignerConstants.AllGloballevelCustomfields) || keyvalue.equals(CustomDesignerConstants.AllLinelevelCustomFields)) { //Global level Custom fields
//                    jsonobjectfinal.put("customfieldorder","[{'fieldname':'Custom_CF1','customlabel':'CF1','sequence':2},{'fieldname':'Custom_CF2','customlabel':'CF2','sequence':1}]");

                    if (jsonobjectfinal.has(CustomDesignerConstants.CustomFieldOrder)) {
                        dimensionordersequence = jsonobjectfinal.optString(CustomDesignerConstants.CustomFieldOrder, "[]");
                        JSONArray dimensionorder = new JSONArray(dimensionordersequence);

                        if (dimensionorder.length() > 0) {//if it has dimensionorder and value is empty
                            JSONArray jArr = sortJsonArrayOnSequence(dimensionorder);
                            for (int cnt = 0; cnt < jArr.length(); cnt++) {
                                JSONObject jsonobjects = jArr.getJSONObject(cnt);
                                if (itemData.has(jsonobjects.getString(CustomDesignerConstants.FieldName))) {
                                    String dimensionPlaceholder = CustomDesignerConstants.CustomFieldKeyValuePair;
                                    dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.CustomFieldLabel, jsonobjects.getString(CustomDesignerConstants.CustomLabel));
                                    dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.CustomFieldValue, itemData.optString((String) jsonobjects.getString(CustomDesignerConstants.FieldName), ""));

//                                    if (cnt != jArr.length() - 1) {
//                                        dimensionPlaceholder = dimensionPlaceholder + "</br>";
//                                    }
                                    appendimensionString.append(dimensionPlaceholder);
                                }
                            }
                            if (keyvalue.equals(CustomDesignerConstants.AllLinelevelCustomFields)) {
                                itemData.put(CustomDesignerConstants.AllLinelevelCustomFields, appendimensionString.toString());
                            } else {
                                itemData.put(CustomDesignerConstants.AllGloballevelCustomfields, appendimensionString.toString());
                            }
                        }
                    }
                }

            }
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);

        }
        return appendimensionString.toString();
    }

    /*
     * to replace global section custom fields for particular moduleid
     */
    public static HashMap<String, Object> returnGlobalLevelCustomFieldDimensionValues(DateFormat df, JSONObject summaryData, accAccountDAO accAccountDAOobj, AccountingHandlerDAO accountingHandlerDAOobj, HashMap<String, Object> extraparams) throws JSONException, SessionExpiredException, ServiceException {
        AccCustomData accCustomData = null;
        StringBuilder appendimensionString = new StringBuilder();
        HashMap<String, Object> returnvalues = new HashMap<String, Object>();
        int moduleid = 0, customcolumn = 0, customfield = 0;
        String billid = "", companyid = "", browsertz="";
        boolean iscustomfield = false;
        try {

            if (extraparams.containsKey(Constants.companyid)) {
                companyid = (String) extraparams.get(Constants.companyid);
            }

            if (extraparams.containsKey(Constants.moduleid)) {
                moduleid = (Integer) extraparams.get(Constants.moduleid);
            }

            if (extraparams.containsKey(CustomDesignerConstants.isCustomfield)) {
                iscustomfield = Boolean.parseBoolean((String) extraparams.get(CustomDesignerConstants.isCustomfield));
            }

            if (extraparams.containsKey(Constants.customcolumn)) {
                customcolumn = (Integer) extraparams.get(Constants.customcolumn);
            }

            if (extraparams.containsKey(Constants.customfield)) {
                customfield = (Integer) extraparams.get(Constants.customfield);
            }

            if (extraparams.containsKey("billid")) {
                billid = (String) extraparams.get("billid");
            }
            
            if (extraparams.containsKey("browsertz") && extraparams.get("browsertz")!=null) {
                browsertz = (String) extraparams.get("browsertz");
            }
            
            //Put default value as blank for MultiEntity fields
            summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_GST_Number, "");
            summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_Tax_Number, "");
            summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_BRN_Number, "");
            summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_MSIC_Code, "");
            summaryData.put(CustomDesignerConstants.CustomDesign_ENTITY_GSTIN_NUMBER, "");
            summaryData.put(CustomDesignerConstants.CompanyPANNumber,"");
            
            accCustomData = getCustomDataObject(moduleid, billid, accountingHandlerDAOobj);
            HashMap<String, Object> CustomRequestParams = new HashMap<String, Object>();
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
            requestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, customcolumn, customfield));
            KwlReturnObject result = accAccountDAOobj.getFieldParams(requestParams);
            List lst = result.getEntityList();
            Iterator ite = lst.iterator();
            for (int cnt = 0; cnt < lst.size(); cnt++) {
                String field = "", data = "";
                FieldParams tmpcontyp = (FieldParams) lst.get(cnt);
                field = tmpcontyp.getFieldlabel();
                if (accCustomData != null) {
                    String coldata = accCustomData.getCol(tmpcontyp.getColnum());
                    if (!StringUtil.isNullOrEmpty(coldata)) {
                        int fieldType = tmpcontyp.getFieldtype();
                        switch (fieldType) {
                            case 3:
                                DateFormat dateFormat1=new SimpleDateFormat(Constants.MMMMdyyyy);
                                Date date=dateFormat1.parse(coldata);
                                //coldata=String.valueOf(date.getTime());
                                                                       
//                                if(!StringUtil.isNullOrEmpty(browsertz)) {  //ERP-21781
//                                    coldata = accAccountDAOobj.getBrowserSpecificCustomDateLongValue(coldata, browsertz);
//                                }
//                                long milliSeconds = Long.parseLong(coldata);
//                                DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                                data = df.format(date);//User Date Formatter
                                break;
                            case 4:
                                CustomRequestParams.clear();
                                CustomRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                CustomRequestParams.put(Constants.filter_values, Arrays.asList(coldata, 0));
                                KwlReturnObject customresult = accAccountDAOobj.getCustomCombodata(CustomRequestParams);
                                if (customresult != null) {
                                    List customDataList = customresult.getEntityList();
                                    Iterator cite = customDataList.iterator();
                                    while (cite.hasNext()) {
                                        String valueForReport = "";
                                        Object[] row = (Object[]) cite.next();
                                        FieldComboData combodata = (FieldComboData) row[0];
                                        data = combodata.getValue();
                                        if (combodata != null) {
                                            String itemdescription = combodata.getItemdescription();
                                            if (!StringUtil.isNullOrEmpty(itemdescription)) {
                                                itemdescription = "<br>" + itemdescription.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
                                            }
                                            valueForReport += combodata.getValue();//Remove description of dimension from all global level dimension
                                        }
                                        if (!StringUtil.isNullOrEmpty(valueForReport)) {
                                            data = valueForReport;
                                        }
                                        //get MultiEntity field values
                                        if(combodata.getField().isFieldOfGivenGSTConfigType(Constants.isformultientity)){
                                            Map<String, Object> paramsMap = new HashMap<String, Object>();
                                            paramsMap.put(Constants.companyid, companyid);
                                            paramsMap.put(Constants.multiEntityValue, data);
                                            //get MultiEntity mapping details
                                            KwlReturnObject entityResult = accountingHandlerDAOobj.getEntityDetails(paramsMap);
                                            if(!entityResult.getEntityList().isEmpty()){
                                                List<MultiEntityMapping> list = entityResult.getEntityList();
                                                for(MultiEntityMapping entityMapping : list){
                                                    //put all MultiEntity field values with respective keys
                                                    summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_GST_Number, entityMapping.getGstNumber());
                                                    summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_Tax_Number, entityMapping.getTaxNumber());
                                                    summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_BRN_Number, entityMapping.getCompanyBRN());
                                                    summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_MSIC_Code, entityMapping.getIndustryCode() != null ? entityMapping.getIndustryCode().getValue() : "");
                                                }
                                            } else{
                                                //put all MultiEntity field values as blank if no mapping details found
                                                summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_GST_Number, "");
                                                summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_Tax_Number, "");
                                                summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_BRN_Number, "");
                                                summaryData.put(CustomDesignerConstants.CustomDesign_MultiEntity_MSIC_Code, "");
                                            }
                                            summaryData.put(CustomDesignerConstants.CustomDesign_ENTITY_GSTIN_NUMBER, "");
                                            HashMap<String, Object> reqParams = new HashMap<String, Object>();
                                            //add params for Entity dimension of GST Module
                                            reqParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield, Constants.Acc_custom_field));
                                            reqParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.GSTModule, 0, 0, Constants.Custom_Record_Prefix + Constants.ENTITY));
                                            //get GST Module Entity dimension
                                            KwlReturnObject resultEntityDim = accAccountDAOobj.getFieldParams(reqParams);
                                            List list = resultEntityDim.getEntityList();
                                            for (int ind = 0; ind < list.size(); ind++) {
                                                FieldParams dimFieldParam = (FieldParams) list.get(ind);
                                                if(dimFieldParam.getFieldname().equals(Constants.Custom_Record_Prefix + Constants.ENTITY)){
                                                    reqParams.clear();
                                                    //add params for Entity dimension combo data of GST Module
                                                    reqParams.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, Constants.VALUE));
                                                    reqParams.put(Constants.filter_values, Arrays.asList(dimFieldParam.getId(), data));
                                                    //get combo data of GST Module Entity dimension
                                                    KwlReturnObject entityMasterItems = accAccountDAOobj.getCustomCombodata(reqParams);
                                                    List entityMasterItemList = entityMasterItems.getEntityList();
                                                    Iterator itr = entityMasterItemList.iterator();
                                                    FieldComboData entityMasterItem = new FieldComboData();
                                                    //get field combo data object
                                                    while (itr.hasNext()) {
                                                        Object[] comboDataRow = (Object[]) itr.next();
                                                        entityMasterItem = (FieldComboData) comboDataRow[0];
                                                    }
                                                    //If field combo data object is available then get GSTIN number field related to that combo data
                                                    if(entityMasterItem != null){
                                                        reqParams.clear();
                                                        //add params for GSTIN custom field of GST Module and related to Entity dimention
                                                        reqParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield));
                                                        reqParams.put(Constants.filter_values, Arrays.asList(companyid, Constants.GSTModule, 0, 1));
                                                        //get GST Module GSTIN custom field
                                                        KwlReturnObject resultEntityCustomData = accAccountDAOobj.getFieldParams(reqParams);
                                                        List CustomDataList = resultEntityCustomData.getEntityList();
                                                        //Iterate over custom fields
                                                        for (int fieldInd = 0; fieldInd < CustomDataList.size(); fieldInd++) {
                                                            FieldParams customFieldParam = (FieldParams) CustomDataList.get(fieldInd);
                                                            //If field name is GSTIN then get value of GSTIN and set it in summaryData with key
                                                            if(customFieldParam.getFieldname().equals(Constants.Custom_Record_Prefix + Constants.GSTIN)){
                                                                //get object of MultiEntityDimensionCustomData object
                                                                KwlReturnObject multiEntityCustomDataResult = accountingHandlerDAOobj.getObject(MultiEntityDimesionCustomData.class.getName(), entityMasterItem.getId());
                                                                if(!multiEntityCustomDataResult.getEntityList().isEmpty()){
                                                                    //load MultiEntityDimensionCustomData object
                                                                    if(multiEntityCustomDataResult.getEntityList().get(0) != null){
                                                                        MultiEntityDimesionCustomData multiEntityDimCustomData = (MultiEntityDimesionCustomData) multiEntityCustomDataResult.getEntityList().get(0);
                                                                        //get GSTIN value
                                                                        String entityGSTIN = multiEntityDimCustomData.getCol(customFieldParam.getColnum()) != null ? multiEntityDimCustomData.getCol(customFieldParam.getColnum()) : "";
                                                                        //put GSTIN value in summaryData with key value pair
                                                                        summaryData.put(CustomDesignerConstants.CustomDesign_ENTITY_GSTIN_NUMBER, entityGSTIN);
                                                                    }
                                                                }
                                                            }
                                                            //If field name is PAN then get value of PAN and set it in summaryData with key
                                                            if(customFieldParam.getFieldname().equals(Constants.Custom_Record_Prefix + Constants.PAN)){
                                                                //get object of MultiEntityDimensionCustomData object
                                                                KwlReturnObject multiEntityCustomDataResult = accountingHandlerDAOobj.getObject(MultiEntityDimesionCustomData.class.getName(), entityMasterItem.getId());
                                                                if(!multiEntityCustomDataResult.getEntityList().isEmpty()){
                                                                    //load MultiEntityDimensionCustomData object
                                                                    if(multiEntityCustomDataResult.getEntityList().get(0) != null){
                                                                        MultiEntityDimesionCustomData multiEntityDimCustomData = (MultiEntityDimesionCustomData) multiEntityCustomDataResult.getEntityList().get(0);
                                                                        //get PAN value
                                                                        String entityPAN = multiEntityDimCustomData.getCol(customFieldParam.getColnum()) != null ? multiEntityDimCustomData.getCol(customFieldParam.getColnum()) : "";
                                                                        //put PAN value in summaryData with key value pair
                                                                        summaryData.put(CustomDesignerConstants.CompanyPANNumber, entityPAN);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                break;
                            case 7: //Multiple select drop down
                                String[] valueData = coldata.split(",");
                                for (String value : valueData) {
                                    CustomRequestParams.clear();
                                    CustomRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                    CustomRequestParams.put(Constants.filter_values, Arrays.asList(value, 0));
                                    KwlReturnObject customresult1 = accAccountDAOobj.getCustomCombodata(CustomRequestParams);
                                    if (customresult1 != null) {
                                        List customDataList = customresult1.getEntityList();
                                        Iterator cite = customDataList.iterator();
                                        while (cite.hasNext()) {
                                            Object[] row = (Object[]) cite.next();
                                            FieldComboData combodata = (FieldComboData) row[0];
                                            data += combodata.getValue() + ",";
                                        }
                                    }
                                }
                                data = data.length() > 0 ? data.substring(0, data.length() - 1) : data;
                                break;
                            case 12:
                                String fieldid = tmpcontyp.getId();
                                HashMap<String, Object> checkListRequestParams = new HashMap<String, Object>();
                                String Colsplit[] = coldata.split(",");
                                for (int i = 0; i < Colsplit.length; i++) {
                                    coldata = Colsplit[i];
                                    checkListRequestParams.put(Constants.filter_names, Arrays.asList(FieldConstants.Crm_id, FieldConstants.Crm_deleteflag));
                                    checkListRequestParams.put(Constants.filter_values, Arrays.asList(coldata, 0));
                                    ArrayList order_by = new ArrayList();
                                    ArrayList order_type = new ArrayList();
                                    order_by.add("itemsequence");
                                    order_type.add("asc");
                                    checkListRequestParams.put("order_by", order_by);
                                    checkListRequestParams.put("order_type", order_type);
                                    KwlReturnObject checkListresult = accAccountDAOobj.getCustomCombodata(checkListRequestParams);
                                    List checklst = checkListresult.getEntityList();
                                    Iterator checkite = checklst.iterator();
                                    while (checkite.hasNext()) {
                                        Object[] row = (Object[]) checkite.next();
                                        FieldComboData checkfield = (FieldComboData) row[0];
                                        data += checkfield.getValue() + ",";
                                    }
                                }
                                data = data.length() > 0 ? data.substring(0, data.length() - 1) : data;
                                break;
                            case 13:
                                data = coldata.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
                                break;
                            default:
                                data = coldata;
                                break;
                        }
                    } else {
                        data = "";
                    }

                    if (!StringUtil.isNullOrEmpty(data)) {//putting an enrty in summary data to access in export record for AllGlobalCustomField and AllGlobalDimensionField
                        summaryData.put(tmpcontyp.getFieldname(), data);
                    }
                }//end of acccustomdata

                if (!StringUtil.isNullOrEmpty(data)) {
                    if (iscustomfield) { //For global level customfields
                        String dimensionPlaceholder = CustomDesignerConstants.CustomFieldKeyValuePair;
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.CustomFieldLabel, tmpcontyp.getFieldlabel());
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.CustomFieldValue, data);
//                        if (cnt != lst.size() - 1) {
//                            dimensionPlaceholder += "<br>";
//                        }
                        appendimensionString.append(dimensionPlaceholder);
                    } else {//for global level dimensions
                        String dimensionPlaceholder = CustomDesignerConstants.DimensionKeyValuePair;
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.DimensionLabel, tmpcontyp.getFieldlabel());
                        dimensionPlaceholder = dimensionPlaceholder.replace(CustomDesignerConstants.DimensionValue, data);
//                        if (cnt != lst.size() - 1) {
//                            dimensionPlaceholder += "<br>";
//                        }
                        appendimensionString.append(dimensionPlaceholder);
                    }
                }

            }
            returnvalues.put("returnValue", appendimensionString.toString());
            returnvalues.put("summaryData", summaryData);
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return returnvalues;
    }
    
    /*
     * to replace Line level custom fields and dimension values
     */
    public static void AssignLineItemCustomfieldsDimensionValues(JSONObject requestJobj, AccCustomData customData, HashMap<String, Integer> fieldMap, JSONObject obj,
            kwlCommonTablesDAO kwlCommonTablesDAOObj, Map<String, Object> variableMap) throws JSONException, SessionExpiredException, ServiceException {
        
        FieldComboData fieldComboData = null;
        try {
            for (Map.Entry<String, Integer> field : fieldMap.entrySet()) {
                Integer colnumber = field.getValue();
                if (colnumber > 0) { // colnumber will be 0 if key is part of reference map
                    Integer isref = fieldMap.get(field.getKey() + "#" + colnumber);// added '#' while creating map collection for custom fields.
                    String coldata = "";
                    try {
                        if (isref != null && customData != null) {
                            coldata = customData.getCol(colnumber);
                            if (!StringUtil.isNullOrEmpty(coldata) && coldata.length() > 0) {

                                if (isref == 0 || isref == 7) {  //Dropdown & Multidropdown
                                    String[] valueData = coldata.split(",");
                                    String valueForReport = "";
                                    for (String value : valueData) {
                                        if (value.equals("1234")) {//This is case when I select dropdown as none and its value in acccustomdata then its id is saved as 1234 
                                            value = "";
                                        }
                                        fieldComboData = (FieldComboData) kwlCommonTablesDAOObj.getClassObject(FieldComboData.class.getName(), value);
                                        if (fieldComboData != null) {
                                            String itemdescription = fieldComboData.getItemdescription();
                                            if (!StringUtil.isNullOrEmpty(itemdescription)) {
                                                itemdescription = "<br>" + itemdescription.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
                                            }
                                            valueForReport += fieldComboData.getValue() + itemdescription + ",";
                                        } else {
                                            valueForReport = "";
                                        }
//          
                                    }
                                    if (valueForReport.length() > 1) {
                                        valueForReport = valueForReport.substring(0, valueForReport.length() - 1);
                                    }
                                    coldata = valueForReport;

                                } else if (isref == 3) { //Date
                                    DateFormat dateFormat1=new SimpleDateFormat(Constants.MMMMdyyyy);
                                    Date dateFromDB=dateFormat1.parse(coldata);
                                    DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(requestJobj);//User Date Formatter
                                    //long milliSeconds = Long.parseLong(coldata);
                                    coldata = df.format(dateFromDB);//User Date Formatter
                                } else if (isref == 15) { // If custom field is of Rich Text type
                                    coldata = coldata + "!#isrichtext#!";
                                }

                                if (!StringUtil.isNullOrEmpty(coldata)) {//if it is not empty then putting into object
                                    obj.put(field.getKey(), coldata);
                                    obj.put("col" + colnumber, coldata);
                                    variableMap.put(field.getKey(), coldata);
                                }
                            }
                        }
                    } catch (IllegalArgumentException ex) {
                        ex.printStackTrace();
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    // This function removes div of dataElement from HTML if no data is availble for that field
    public static String removeSelectFieldHavingNoDataFromHTML(String HTML, String fieldName) {
        String retHtml = "";
        boolean isStartsWithtr = false;
        try {
            if (HTML.startsWith("<tr>")) {
                isStartsWithtr = true;
                HTML = "<table id='dummy'>" + HTML + "</table>";
            }
            org.jsoup.nodes.Document htmlDoc = Jsoup.parse(HTML);

            org.jsoup.nodes.Element dummyTable = null;
            List<org.jsoup.nodes.Element> dataElements = null;
            if (isStartsWithtr) {
                dummyTable = htmlDoc.getElementById("dummy");
                dataElements = dummyTable.getElementsByAttributeValue("type", "dataElement");  // for Data Element Component
            } else {
                dataElements = htmlDoc.getElementsByAttributeValue("type", "dataElement");  // for Data Element Component
            }
            Iterator ite = dataElements.iterator();
            while (ite.hasNext()) {
                org.jsoup.nodes.Element selectField = (org.jsoup.nodes.Element) ite.next();
                if (selectField.outerHtml().contains("#" + fieldName + "#")) {
                    org.jsoup.nodes.Element parentDiv = selectField.parent();
                    if (parentDiv.tagName().equals("td")) {
                        selectField.remove();
                    } else {
                        parentDiv.remove();
                    }
                }
            }
            if (isStartsWithtr) {
                retHtml = dummyTable.child(0).child(0).outerHtml();
            } else {
                retHtml = htmlDoc.outerHtml();
            }
            retHtml = retHtml.replace("#" + fieldName + "#", "");

        } catch (Exception ex) {
            Logger.getLogger(CustomDesignController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return retHtml;
    }
    
    
    /*
     * NeerajD-Get Other Moduleid for respective moduleid
     */
    public static TreeMap<String, String> getOtherFieldsMapForModule(int moduleid, String templatesubtype) {
        TreeMap<String, String> baseModuletoOtherMap = null;

        switch (moduleid) {
            case Constants.Acc_Invoice_ModuleId: // Invoice
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignInvoicetoOtherMap;
                break;
            case Constants.Acc_Vendor_Invoice_ModuleId: // Vendor Invoice 
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignVendorInvoicetoOtherMap;
                break;
            case Constants.Acc_Debit_Note_ModuleId:
                if (templatesubtype.equals("1")) {
                    baseModuletoOtherMap = CustomDesignerConstants.CustomDesignPurchaseReturntoOtherMap;
                }else {
                    baseModuletoOtherMap = CustomDesignerConstants.CustomDesignOtherCommonMap;
}
                break;
            case Constants.Acc_Credit_Note_ModuleId:
                if (templatesubtype.equals("1")) {
                    baseModuletoOtherMap = CustomDesignerConstants.CustomDesignSalesReturntoOtherMap;
                } else {
                    baseModuletoOtherMap = CustomDesignerConstants.CustomDesignOtherCommonMap;
                }
                break;
            case Constants.Acc_Make_Payment_ModuleId:
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignPaymenttoOtherMap;
                break;
            case Constants.Acc_Receive_Payment_ModuleId:
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignPaymenttoOtherMap;
                break;
            case Constants.Acc_Purchase_Order_ModuleId: // Purchase Order
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignPurchaseOrdertoOtherMap;
                break;
            case Constants.Acc_Sales_Order_ModuleId: // Sales Order
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignSalesOrdertoOtherMap;
                break;
            case Constants.Acc_Customer_Quotation_ModuleId: // Custom Quotation
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignQuotationtoOtherMap;
                break;
            case Constants.Acc_Vendor_Quotation_ModuleId: // Vendor Quotation
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignVendorQuotationtoOtherMap;
                break;
            case Constants.Acc_Delivery_Order_ModuleId://Delivery Order
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignDeliveryOrdertoOtherMap;
                break;
            case Constants.Acc_Goods_Receipt_ModuleId://GoodsReceiptOrder
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignGoodsReceiptOrdertoOtherMap;
                break;
            case Constants.Acc_Sales_Return_ModuleId: //Sales Return
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignSalesReturntoOtherMap;
                break;
            case Constants.Acc_Purchase_Return_ModuleId: //Sales Return
                baseModuletoOtherMap = CustomDesignerConstants.CustomDesignPurchaseReturntoOtherMap;
                break;
        }
        return baseModuletoOtherMap;
    }
    

    /*
     * NeerajD-Getting Object Details like vendorid,customerid and other details,etc
     */
    public static JSONObject getObjectDetails(int moduleid, String transactionId, AccountingHandlerDAO accountingHandlerDAOobj) {
        JSONObject objectDetails = new JSONObject();
        KwlReturnObject objItr = null;
        String customerId = "", vendorId = "";
        try {
            if (moduleid == Constants.Acc_Invoice_ModuleId || moduleid == Constants.Acc_ConsignmentInvoice_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(Invoice.class.getName(), transactionId);
                Invoice invoice = (Invoice) objItr.getEntityList().get(0);
                customerId = invoice.getCustomer().getID();
            } else if (moduleid == Constants.Acc_Sales_Order_ModuleId || moduleid == Constants.Acc_ConsignmentRequest_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(SalesOrder.class.getName(), transactionId);
                SalesOrder so = (SalesOrder) objItr.getEntityList().get(0);
                customerId = so.getCustomer().getID();
            } else if (moduleid == Constants.Acc_Sales_Return_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(SalesReturn.class.getName(), transactionId);
                SalesReturn sr = (SalesReturn) objItr.getEntityList().get(0);
                customerId = sr.getCustomer().getID();
            } else if (moduleid == Constants.Acc_Delivery_Order_ModuleId || moduleid == Constants.Acc_ConsignmentDeliveryOrder_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(DeliveryOrder.class.getName(), transactionId);
                DeliveryOrder DO = (DeliveryOrder) objItr.getEntityList().get(0);
                customerId = DO.getCustomer().getID();
            } else if (moduleid == Constants.Acc_Customer_Quotation_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(Quotation.class.getName(), transactionId);
                Quotation quotation = (Quotation) objItr.getEntityList().get(0);
                customerId = quotation.getCustomer().getID();
            }  else if (moduleid == Constants.Acc_Purchase_Return_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), transactionId);
                PurchaseReturn sr = (PurchaseReturn) objItr.getEntityList().get(0);
                vendorId = sr.getVendor().getID();
            }else if (moduleid == Constants.Acc_Vendor_Invoice_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), transactionId);
                GoodsReceipt goodsReceipt = (GoodsReceipt) objItr.getEntityList().get(0);
                vendorId = goodsReceipt.getVendor().getID();
            } else if (moduleid == Constants.Acc_Purchase_Order_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), transactionId);
                PurchaseOrder po = (PurchaseOrder) objItr.getEntityList().get(0);
                vendorId = po.getVendor().getID();
            } else if (moduleid == Constants.Acc_Goods_Receipt_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), transactionId);
                GoodsReceiptOrder goodsReceiptOrder = (GoodsReceiptOrder) objItr.getEntityList().get(0);
                vendorId = goodsReceiptOrder.getVendor().getID();
            } else if (moduleid == Constants.Acc_Vendor_Quotation_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(VendorQuotation.class.getName(), transactionId);
                VendorQuotation vendorquotation = (VendorQuotation) objItr.getEntityList().get(0);
                vendorId = vendorquotation.getVendor().getID();
            } else if (moduleid == Constants.Acc_Make_Payment_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(Payment.class.getName(), transactionId);
                Payment pm = null;
                if (objItr.getEntityList().size() > 0) {
                    pm = (Payment) objItr.getEntityList().get(0);
                }
                if (!StringUtil.isNullOrEmpty(pm.getCustomer())) {
                    customerId = pm.getCustomer();
                } else if (pm.getVendor() != null) {
                    vendorId = pm.getVendor().getID();
                }
            } else if (moduleid == Constants.Acc_Receive_Payment_ModuleId) {
                objItr = accountingHandlerDAOobj.getObject(Receipt.class.getName(), transactionId);
                Receipt receipt = (Receipt) objItr.getEntityList().get(0);
                if (receipt.getCustomer() != null) {
                    customerId = receipt.getCustomer().getID();
                } else if (!StringUtil.isNullOrEmpty(receipt.getVendor())) {
                    vendorId = receipt.getVendor();
                }
            } else if (moduleid == Constants.Acc_Credit_Note_ModuleId) {
                KwlReturnObject cap = accountingHandlerDAOobj.getObject(CreditNote.class.getName(), transactionId);
                CreditNote creditNote = (CreditNote) cap.getEntityList().get(0);
                if (creditNote.getCustomer() != null) {
                    customerId = creditNote.getCustomer().getID();
                } else if (creditNote.getVendor() != null) {
                    vendorId = creditNote.getVendor().getID();
                }
            } else if (moduleid == Constants.Acc_Debit_Note_ModuleId) {
                KwlReturnObject cap = accountingHandlerDAOobj.getObject(DebitNote.class.getName(), transactionId);
                DebitNote debitNote = (DebitNote) cap.getEntityList().get(0);
                if (debitNote.getCustomer() != null) {
                    customerId = debitNote.getCustomer().getID();
                } else if (debitNote.getVendor() != null) {
                    vendorId = debitNote.getVendor().getID();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                objectDetails.put("customerId", customerId);
                objectDetails.put("vendorId", vendorId);
            } catch (JSONException ex) {
                Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return objectDetails;
    }
    
    public static String replaceWithValueSeperator(String Value, String valueSeparator) {

        if (!StringUtil.isNullOrEmpty(valueSeparator)) {
            if (valueSeparator.equalsIgnoreCase("linebreak")) {
                Value = Value.replaceAll("!##", "<br>");
            } else if (valueSeparator.equalsIgnoreCase("comma")) {
                String[] tempStrArr = Value.split("!##");
                Value = "";
                for (int index = 0; index < tempStrArr.length; index++) {
                    String tempString = tempStrArr[index];
                    tempString = tempString.replaceAll("</br>", " ");
                    tempString = tempString.replaceAll("<br>", " ");
                    if (!StringUtil.isNullOrEmpty(tempString) && !(" ".equals(tempString))) {
                        if (!(index == (0))) {
                            Value += ", ";
                        }
                        Value += tempString;
                    }
                }
            } else if (valueSeparator.equalsIgnoreCase("colon")) {
                String[] tempStrArr = Value.split("!##");
                Value = "";
                for (int index = 0; index < tempStrArr.length; index++) {
                    String tempString = tempStrArr[index];
                    tempString = tempString.replaceAll("</br>", " ");
                    tempString = tempString.replaceAll("<br>", " ");
                    if (!StringUtil.isNullOrEmpty(tempString) && !(" ".equals(tempString))) {
                        if (!(index == (0))) {
                            Value += ": ";
                        }
                        Value += tempString;
                    }
                }
            } else if (valueSeparator.equalsIgnoreCase("semicolon")) {
                String[] tempStrArr = Value.split("!##");
                Value = "";
                for (int index = 0; index < tempStrArr.length; index++) {
                    String tempString = tempStrArr[index];
                    tempString = tempString.replaceAll("</br>", " ");
                    tempString = tempString.replaceAll("<br>", " ");
                    if (!StringUtil.isNullOrEmpty(tempString) && !(" ".equals(tempString))) {
                        if (!(index == (0))) {
                            Value += "; ";
                        }
                        Value += tempString;
                    }
                }
            } else if (valueSeparator.equalsIgnoreCase("space")) {
                String[] tempStrArr = Value.split("!##");
                Value = "";
                for (int index = 0; index < tempStrArr.length; index++) {
                    String tempString = tempStrArr[index];
                    tempString = tempString.replaceAll("</br>", " ");
                    tempString = tempString.replaceAll("<br>", " ");
                    if (!StringUtil.isNullOrEmpty(tempString) && !(" ".equals(tempString))) {
                        if (!(index == (0))) {
                            Value += " ";
                        }
                        Value += tempString;
                    }
                }
            } else if (valueSeparator.equalsIgnoreCase("horizotal")) {
                String[] tempStrArr = Value.split("!##");
                Value = "";
                for (int index = 0; index < tempStrArr.length; index++) {
                    String tempString = tempStrArr[index];
                    tempString = tempString.replaceAll("</br>", " ");
                    tempString = tempString.replaceAll("<br>", " ");
                    if (!StringUtil.isNullOrEmpty(tempString) && !(index == (tempStrArr.length - 1))) {
                        Value += tempString + "<hr>";
                    } else{
                        Value += tempString;
                    }
                }
            }
        }
        return Value;
    }
    public static JSONObject exportEmailWithTemplate(JSONObject requestJobj,  HashMap<String, JSONArray> itemDataAgainstInvoice,HashMap<String, Object>otherconfigrequestParams,
            AccountingHandlerDAO accountingHandlerDAO,AccCommonTablesDAO accCommonTablesDAO, CustomDesignDAO customDesignDAOObj,accAccountDAO accAccountDAOobj,AccountingHandlerDAO accountingHandlerDAOobj,VelocityEngine velocityEngine
            ,AccInvoiceServiceDAO accInvoiceServiceDAO,AccGoodsReceiptServiceDAO accGoodsReceiptServiceDAOObj){
            JSONObject jobj = new JSONObject();
            String pagelayoutproperty = "";
            int isnewdesign = 0;
            String recordids = "";
            String pagefooterhtml = "", pageheaderhtml = "", pageheaderjson = "", pageheadersqlquery = "";
            JSONObject jcur = new JSONObject();
            String templateid = requestJobj.optString("templateid","");
            boolean isConsignment = requestJobj.optBoolean(Constants.isConsignment,false);
            boolean isJobOrderFlow = false;
            boolean isDefaultTemplate = false;
            String headerCurrency = "", headerCurrencyCode = "", linkedreferencenumber = "", baseCurrencySymbol = "", baseCurrencyCode = "";
            Boolean checkfooterflag = false;
            if (!StringUtil.isNullOrEmpty(requestJobj.optString("bills",""))) {
                recordids = requestJobj.optString("bills","");
            }
            if (StringUtil.isNullOrEmpty(recordids)) {
                recordids = otherconfigrequestParams.get("recordids") != null ? otherconfigrequestParams.get("recordids").toString() : "";
            }
            try{
                //******************   Get Data of Selected record  *****************************************
                ArrayList<String> invoiceIDList = CustomDesignHandler.getSelectedBillIDs(recordids);

                DateFormat df = authHandler.getUserDateFormatterWithoutTimeZone(requestJobj);//User Date Formatter
                int noOfVendor = 0;
                String companyid = requestJobj.optString(Constants.companyKey,"");
                String invoiceid = "";
                for (int i = 0; i < invoiceIDList.size(); i++) {
                    JSONArray lineItemsArr = new JSONArray();
                    JSONArray lineItemsArrForRFQ = new JSONArray();
                    int moduleid = requestJobj.optInt(Constants.moduleid,0);
                    if (moduleid == Constants.Acc_RFQ_ModuleId) { //For RFQ Multiple Vendor
                        lineItemsArrForRFQ = itemDataAgainstInvoice.get(invoiceIDList.get(i));
                        invoiceid = invoiceIDList.get(i);
                        noOfVendor = lineItemsArrForRFQ.length();

                    } else {
                        noOfVendor = 1;
                    }
                    for (int j = 0; j < noOfVendor; j++) {
                        if (moduleid == Constants.Acc_RFQ_ModuleId) {
                            lineItemsArr = lineItemsArrForRFQ.getJSONArray(j);
                        } else {
                            lineItemsArr = itemDataAgainstInvoice.get(invoiceIDList.get(i).trim());
                            invoiceid = invoiceIDList.get(i);
                        }
                        if (!(moduleid == Constants.Acc_Credit_Note_ModuleId || moduleid == Constants.Acc_Debit_Note_ModuleId || moduleid == Constants.Acc_Receive_Payment_ModuleId || moduleid == Constants.Acc_Make_Payment_ModuleId || moduleid == Constants.Acc_Stock_Request_ModuleId
                                || moduleid == Constants.Inventory_ModuleId || moduleid == Constants.Acc_Stock_Adjustment_ModuleId || moduleid == Constants.Acc_InterStore_ModuleId || moduleid == Constants.Acc_InterLocation_ModuleId)) {
                            jcur = lineItemsArr.getJSONObject(0);//appending currency in header of lineitems
                            //Transaction currency details
                            headerCurrency = jcur.has("currencysymbol") ? jcur.getString("currencysymbol") : "";
                            headerCurrency = accCommonTablesDAO.getCustomCurrencySymbol(headerCurrency, companyid);//Take custom currency symbol
                            headerCurrencyCode = jcur.has("currencycode") ? jcur.getString("currencycode") : "";
                            headerCurrencyCode = accCommonTablesDAO.getCustomCurrencyCode(headerCurrencyCode, companyid);//Take custom currency code
                            //Base currency details
                            baseCurrencySymbol = jcur.has("basecurrencysymbol") ? jcur.getString("basecurrencysymbol") : "";
                            baseCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(baseCurrencySymbol, companyid);//Take custom currency symbol
                            baseCurrencyCode = jcur.has("basecurrencycode") ? jcur.getString("basecurrencycode") : "";
                            baseCurrencyCode = accCommonTablesDAO.getCustomCurrencySymbol(baseCurrencyCode, companyid);//Take custom currency Code

                            linkedreferencenumber = jcur.has("linkedreferenecenumber") ? jcur.getString("linkedreferenecenumber") : "";
                        }
                        //*******************  Get Template Details  ************************************************
                        
                        KwlReturnObject result = customDesignDAOObj.getDesignTemplate(templateid);
                        List list = result.getEntityList();
                        Object[] rows = (Object[]) list.get(0);
                        String html = rows[2] != null ? rows[2].toString() : "";
                        String json = rows[1] != null ? rows[1].toString() : "";
                        String sqlquery = rows[3] != null ? rows[3].toString() : "";
                        pagelayoutproperty = rows[4] != null ? rows[4].toString() : "";
                        pagefooterhtml = rows[5] != null ? rows[5].toString() : "";
                        String pagefooterjson = rows[6] != null ? rows[6].toString() : "";
                        String pagefootersqlquery = rows[7] != null ? rows[7].toString() : "";
                        String templateSubtype = rows[8] != null ? rows[8].toString() : "";
                        pageheaderhtml = rows[9] != null ? rows[9].toString() : "";
                        pageheaderjson = rows[10] != null ? rows[10].toString() : "";
                        pageheadersqlquery = rows[11] != null ? rows[11].toString() : "";
                        if (rows[12] != null) {
                            Integer footerheader = (Integer) rows[12];
                            if (footerheader == 1) {
                                checkfooterflag = true;
                            }
                        }
                        if ((moduleid == Constants.Acc_Credit_Note_ModuleId || moduleid == Constants.Acc_Debit_Note_ModuleId) && templateSubtype.equals("1")) {
                            jcur = lineItemsArr.getJSONObject(i);//appending currency in header of lineitems
                            //Transaction currency details
                            headerCurrency = jcur.has("currencysymbol") ? jcur.getString("currencysymbol") : "";
                            headerCurrency = accCommonTablesDAO.getCustomCurrencySymbol(headerCurrency, companyid);//Take custom currency symbol
                            headerCurrencyCode = jcur.has("currencycode") ? jcur.getString("currencycode") : "";
                            headerCurrencyCode = accCommonTablesDAO.getCustomCurrencyCode(headerCurrencyCode, companyid);//Take custom currency code
                            //Base currency details
                            baseCurrencySymbol = jcur.has("basecurrencysymbol") ? jcur.getString("basecurrencysymbol") : "";
                            baseCurrencySymbol = accCommonTablesDAO.getCustomCurrencySymbol(baseCurrencySymbol, companyid);//Take custom currency symbol
                            baseCurrencyCode = jcur.has("basecurrencycode") ? jcur.getString("basecurrencycode") : "";
                            baseCurrencyCode = accCommonTablesDAO.getCustomCurrencySymbol(baseCurrencyCode, companyid);//Take custom currency Code

                            linkedreferencenumber = jcur.has("linkedreferenecenumber") ? jcur.getString("linkedreferenecenumber") : "";

                        }
                        isnewdesign = rows[13] != null ? Integer.parseInt(rows[13].toString()) : 0;
                        isDefaultTemplate = rows[14] != null ? Boolean.TRUE.equals(Boolean.parseBoolean(rows[14].toString())) : false;
                        if (isnewdesign == 1) {
                            /**
                             * Required parameters
                             */
                            HashMap<String, Object> paramsMap = new HashMap();
                            paramsMap.put("moduleid", moduleid + "");
                            paramsMap.put("invoiceid", invoiceid);
                            paramsMap.put("json", json);
                            paramsMap.put("html", html);
                            paramsMap.put("sqlquery", sqlquery);
                            paramsMap.put("templateSubtype", templateSubtype);
                            paramsMap.put("pageheaderhtml", pageheaderhtml);
                            paramsMap.put("pagefooterhtml", pagefooterhtml);
                            paramsMap.put("pagefooterjson", pagefooterjson);
                            paramsMap.put("pagefootersqlquery", pagefootersqlquery);
                            paramsMap.put("headerCurrency", headerCurrency);
                            paramsMap.put("headerCurrencyCode", headerCurrencyCode);
                            paramsMap.put("linkedreferencenumber", linkedreferencenumber);
                            paramsMap.put("pagelayoutproperty", pagelayoutproperty);
                            paramsMap.put("pageheaderjson", pageheaderjson);
                            paramsMap.put("pageheadersqlquery", pageheadersqlquery);
                            paramsMap.put("recordids", recordids);
                            paramsMap.put("baseCurrencySymbol", baseCurrencySymbol);
                            paramsMap.put("baseCurrencyCode", baseCurrencyCode);

                            paramsMap.put("lineItemsArr", lineItemsArr);
                            paramsMap.put("df", df);

                            paramsMap.put("checkfooterflag", checkfooterflag);
                            paramsMap.put("isConsignment", isConsignment);
                            paramsMap.put("isJobOrderFlow", isJobOrderFlow);
                            paramsMap.put("isDefaultTemplate", isDefaultTemplate);
                            /**
                             * Required objects
                             */
                            HashMap<String, Object> objMap = new HashMap();
                            objMap.put("accAccountDAOObj", accAccountDAOobj);
                            objMap.put("accountingHandlerDAOObj", accountingHandlerDAOobj);
                            objMap.put("velocityEngine", velocityEngine);
                            objMap.put("customDesignDAOObj", customDesignDAOObj);
                            objMap.put("accCommonTablesDAO", accCommonTablesDAO);
                            objMap.put("accInvoiceServiceDAOObj", accInvoiceServiceDAO);
                            objMap.put("accGoodsReceiptServiceDAOObj", accGoodsReceiptServiceDAOObj);
                            
//                            HashMap<String, String> returnHashMap = exportTemplateWithNewDesign(requestJobj, paramsMap, objMap);
                            HashMap<String, String> returnHashMap = new HashMap<String, String>();
                            returnHashMap = exportTemplateWithNewDesign(moduleid, invoiceid, json, html, sqlquery, lineItemsArr, templateSubtype,
                                    pageheaderhtml, pagefooterhtml, pagefooterjson, pagefootersqlquery, df, headerCurrency, headerCurrencyCode, linkedreferencenumber,
                                    pagelayoutproperty, pageheaderjson, pageheadersqlquery, recordids, "", "", checkfooterflag,
                                    requestJobj, isConsignment, isJobOrderFlow, isDefaultTemplate, companyid, accAccountDAOobj, accountingHandlerDAOobj, velocityEngine, customDesignDAOObj,accCommonTablesDAO,accInvoiceServiceDAO,accGoodsReceiptServiceDAOObj, baseCurrencySymbol, baseCurrencyCode);

                            jobj.put("buildHtml", returnHashMap.get("buildHtml"));
                            jobj.put("pagefooterhtml", returnHashMap.get("pagefooterhtml"));
                            jobj.put("fontstylevalue", returnHashMap.get("fontstylevalue"));
                            jobj.put("pageheaderhtml", returnHashMap.get("pageheaderhtml"));
                            jobj.put("pagelayoutproperty", pagelayoutproperty);
                            jobj.put("pageheaderjson",pageheaderjson);
                            jobj.put("pageheadersqlquery", pageheadersqlquery);
                            jobj.put("extLIJobj", returnHashMap.get("extLIJobj"));
                            jobj.put("checkfooterflag", checkfooterflag);
                        }
                    }
                }
            }catch(Exception ex) {
                Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
            }
        return jobj;
    }
    
    public static String evaluateExpression(String expression, Integer precisonFormat) throws JSONException {
        Object result = null;
        expression = expression.replaceAll(" ", ""); //remove all spaces from expression
        expression = expression.replaceAll(",", ""); //remove all commas from expression
        Object compiledExpression = MVEL.compileExpression(expression);

        try {
            //get decimal formatter
            DecimalFormat decimal = getPrecisonFormat(precisonFormat);
            decimal.setMinimumFractionDigits(precisonFormat);
            decimal.setMaximumFractionDigits(precisonFormat);
            //execute expression and get result
            result = MVEL.executeExpression(compiledExpression);
            if (result instanceof Double) {
                Double d = (Double) result;
                if (d == null || d.isInfinite() || d.isNaN()) {
                     result = decimal.format(0.0);
                 } else if (d == -0.0) {
                     result = decimal.format(0.0);
                 } else {
                    result = decimal.format(result);
                }
            } else if(result instanceof Integer){
                Integer val = (Integer) result;
                if(val == null){
                    result = decimal.format(0.0);
                } else{
                    result = decimal.format(result);
                }
            } else if (result == null) {
                result = decimal.format(0.0);
            }
        } catch (Exception e) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, e);
        }
        return result.toString();
    }
    
    public static DecimalFormat getPrecisonFormat(Integer precisonFormat) {


        String formatString = "";
        int cnt = precisonFormat;
        if(cnt == 0){
            formatString = "#";
        } else if(cnt > 0){
            formatString = "#.";
            while(cnt > 0){
                formatString += "#";
                cnt--;
            }
        }
        DecimalFormat decimal = new DecimalFormat(formatString);
        return decimal;
    }
    
    public static String createGroupingSummaryTable(String buildhtml, JSONArray jArr, JSONArray lineItemsArr, String headerCurrency, String headerCurrencyCode, int countryid, String companyid, VelocityEngine velocityEngine){
        
        //Grouping Summary Table Start
        boolean isGroupingSummaryTablePresent = false;
        String groupingSummaryTableParentRowid = "";
        String groupingSummaryTableStyle = "";
        String groupingOnDisplayValue="";
        String groupingOnValue="";
        JSONArray groupingSummaryTableHeaderItems = new JSONArray();
        JSONArray groupingSummaryTableDataItems = new JSONArray();
        try{
            HashMap<String, Object> groupingSummaryTablemap = CustomDesignHandler.getGroupingSummaryTableDetails(jArr);
            if (groupingSummaryTablemap.containsKey(Constants.isGroupingSummaryTablePresent) && groupingSummaryTablemap.get(Constants.isGroupingSummaryTablePresent) != null) {
                isGroupingSummaryTablePresent = (Boolean) groupingSummaryTablemap.get(Constants.isGroupingSummaryTablePresent);
            }
            if (groupingSummaryTablemap.containsKey("groupingSummaryTableHeaderItems") && groupingSummaryTablemap.get("groupingSummaryTableHeaderItems") != null) {
                groupingSummaryTableHeaderItems = (JSONArray) groupingSummaryTablemap.get("groupingSummaryTableHeaderItems");
            }
            if (groupingSummaryTablemap.containsKey("groupingSummaryTableDataItems") && groupingSummaryTablemap.get("groupingSummaryTableDataItems") != null) {
                groupingSummaryTableDataItems = (JSONArray) groupingSummaryTablemap.get("groupingSummaryTableDataItems");
            }
            if (groupingSummaryTablemap.containsKey("groupingSummaryTableParentRowid") && groupingSummaryTablemap.get("groupingSummaryTableParentRowid") != null) {
                groupingSummaryTableParentRowid =  (groupingSummaryTablemap.get("groupingSummaryTableParentRowid").toString());
            }
            if (groupingSummaryTablemap.containsKey("groupingSummaryTableStyle") && groupingSummaryTablemap.get("groupingSummaryTableStyle") != null) {
                groupingSummaryTableStyle =  (groupingSummaryTablemap.get("groupingSummaryTableStyle").toString());
            }
            if (groupingSummaryTablemap.containsKey("groupingOnDisplayValue") && groupingSummaryTablemap.get("groupingOnDisplayValue") != null) {
                groupingOnDisplayValue =  (groupingSummaryTablemap.get("groupingOnDisplayValue").toString());
            }
            if (groupingSummaryTablemap.containsKey("groupingOnValue") && groupingSummaryTablemap.get("groupingOnValue") != null) {
                groupingOnValue =  (groupingSummaryTablemap.get("groupingOnValue").toString());
            }

            String groupingSummaryTableHTML = "";
            if (isGroupingSummaryTablePresent) {
                org.jsoup.nodes.Document jsoupDoc = Jsoup.parse(buildhtml);
                ArrayList<CustomDesignLineItemProp> groupingSummaryTableHeaderlist = new ArrayList();
                ArrayList<CustomDesignLineItemProp> groupingSummaryTableDetailslist = null;
                List rowDataList = new ArrayList();
                org.jsoup.nodes.Element groupingSummaryTableElement = jsoupDoc.getElementById(groupingSummaryTableParentRowid);
                // add header row
                for(int groupingHeaderCnt = 0 ; groupingHeaderCnt < groupingSummaryTableHeaderItems.length(); groupingHeaderCnt++){
                    JSONObject headerColInfo = groupingSummaryTableHeaderItems.getJSONObject(groupingHeaderCnt);
                    CustomDesignLineItemProp headerData = new CustomDesignLineItemProp();

                    String headerValue = headerColInfo.optString("header", "");
                    String headerStyle = headerColInfo.optString("style", "");
                    String headerWidth = headerColInfo.optString("width", "");

                    headerValue = headerValue.replaceAll("#Currency&nbsp;Symbol#", headerCurrency);
                    headerValue = headerValue.replaceAll("#Currency&nbsp;Code#", headerCurrencyCode);

                    headerData.setData(headerValue);
                    headerData.setStyle(headerStyle);
                    headerData.setWidth(headerWidth);

                    groupingSummaryTableHeaderlist.add(headerData);
                }

                // calculate values for grouping rows
                JSONObject colDataValuesObj = new JSONObject();
                Set<String> groupingKeySet = new TreeSet<>();
                for(int groupingDataCnt = 0 ; groupingDataCnt < groupingSummaryTableDataItems.length(); groupingDataCnt++){
                    JSONObject dataColInfo = groupingSummaryTableDataItems.getJSONObject(groupingDataCnt);

                    String dataStyle = dataColInfo.optString("style", "");
                    String label = dataColInfo.optString("label", "");
                    String key = dataColInfo.optString("fieldid", "");
                    boolean isFormula = dataColInfo.optBoolean("isformula", false);
                    boolean isSummaryFormula = dataColInfo.optBoolean("issummaryformula", false);
                    String formula = dataColInfo.optString("formula", "");
                    String formulaValue = dataColInfo.optString("formulavalue", "");
                    String recordcurrency = dataColInfo.optString("recordcurrency", "");
                    String decimalpoint = dataColInfo.optString("decimalpoint", "2");
                    String seq = dataColInfo.optString("seq", "");
                    String commaamount = dataColInfo.optString("commaamount", "");
                    String functionType = dataColInfo.optString("functiontype", "sum");

                    JSONObject groupingJobj = new JSONObject();
                    if(!seq.equals("-1")){ // if seq is -1 then it is Grouping field(text type) column
                        //Calculate sum of line amount
                        for(int ind = 0; ind < lineItemsArr.length(); ind++){
                            JSONObject lineData = lineItemsArr.getJSONObject(ind);lineItemsArr.getJSONObject(0);
                            String value = "";
                            if(!isFormula && !lineData.optBoolean("summarydata", false)){
                                if(lineData.has(key)){
                                    value = lineData.getString(key);
                                }
                            } else if(isFormula && !isSummaryFormula && !lineData.optBoolean("summarydata", false)){
                                formula = formulaValue; // use formula with fieldid's for value replacement and calculation
                                formula = formula.replaceAll("!##", "-").replaceAll("$##", "/");// replace '!##' and '$##' with respective characters in formula if exist('!##' for '-' and '$##' for '/')
                                String[] fieldsArr = formulaValue.replaceAll("\\(|\\)", "").split("\\+|\\-|\\*|\\/");// Replace brackets '(' and ')' then split fields from formula using operators used
                                for(int fieldCnt = 0; fieldCnt < fieldsArr.length; fieldCnt++){
                                    String fieldValue = "0";
                                    String field = fieldsArr[fieldCnt].trim(); //Remove extra space before and after
                                    field = field.replaceAll("!##", "-");// replace '!##' identifier in formula if exist('!##' for '-')
                                    field = field.replaceAll("$##", "/");// replace '$##' identifier in formula if exist('$##' for '/')

                                    if(field.startsWith("#") && field.endsWith("#")){ // If placeholder

                                        field = field.substring(1, field.length()-1); // Remove # from start and end

                                        if(lineData.has(field)){ // If Default field
                                            fieldValue = lineData.getString(field);
                                        } else{
                                            if (lineData.has("Custom_" + field)) { // If Custom field
                                                fieldValue = (lineData.get("Custom_" + field).toString());
                                                fieldValue = (authHandler.formattedAmount(Double.parseDouble(lineData.get("Custom_" + field).toString()), companyid));
                                            } else {
                                                fieldValue = "0";
                                            }
                                        }
                                    } else{ // If number
                                        fieldValue = field;
                                    }
                                    formula = formula.replace("#"+field+"#", fieldValue); // replace field value in formula
                                }
                                value =  evaluateExpression(formula, Integer.parseInt(decimalpoint)); // Calculate expression using mval library
                            } else if(isFormula && isSummaryFormula && !lineData.optBoolean("summarydata", false)){
                                value = "0";
                            }
                            if(!lineData.optBoolean("summarydata", false)){
                                String groupingValue = lineData.optString(groupingOnValue, "");
                                String groupVal = "0";
                                if(groupingJobj.has(groupingValue)){
                                    groupVal = groupingJobj.optString(groupingValue, "0");
                                }
                                if(!StringUtil.isNullOrEmpty(value) && !isSummaryFormula){
                                    double valDigit = 0;
                                    String valStr = "";
                                    switch (functionType) {
                                        case "sum":
                                            valDigit = Double.parseDouble(groupVal);
                                            groupingJobj.put(groupingValue, valDigit + Double.parseDouble(value));
                                            break;
                                        case "average":
                                        case "min":
                                        case "max":
                                            if(groupingJobj.has(groupingValue))
                                                groupingJobj.put(groupingValue, groupVal + "," + value);
                                            else
                                                groupingJobj.put(groupingValue, value);
                                            break;
                                        case "count":
                                            valDigit = Double.parseDouble(groupVal);
                                            groupingJobj.put(groupingValue, valDigit + 1);
                                            break;
                                    }
                                } else if(isSummaryFormula){
                                    groupingJobj.put(groupingValue, value);
                                } else{
                                    groupingJobj.put(groupingValue, groupVal);
                                }

                                groupingKeySet.add(groupingValue);
                            }
                        }
                    } else{
                        groupingJobj.put("pretext", dataColInfo.optString("PreText", ""));// put pretext value
                        groupingJobj.put("posttext", dataColInfo.optString("PostText", ""));// put posttext value
                    }
                    groupingJobj.put("isSummaryFormula", isSummaryFormula);
                    groupingJobj.put("formula", formula);
                    groupingJobj.put("formulavalue", formulaValue);
                    groupingJobj.put("style", dataStyle);
                    groupingJobj.put("label", label);
                    groupingJobj.put("seq", seq);
                    groupingJobj.put("key", key);
                    groupingJobj.put("functiontype", functionType);
                    groupingJobj.put("recordcurrency", recordcurrency);
                    groupingJobj.put("decimalpoint", decimalpoint);
                    groupingJobj.put("commaamount", commaamount);

                    colDataValuesObj.put("col" + groupingDataCnt, groupingJobj);

                }
                JSONObject totalRowJobj = new JSONObject();
                // add rows to grouping summary table
                for(String groupKey : groupingKeySet){
                    groupingSummaryTableDetailslist = new ArrayList();
                    for(int colNo = 0 ; colNo < colDataValuesObj.length(); colNo++){
                        JSONObject groupingJobj = colDataValuesObj.getJSONObject("col"+colNo);
                        boolean isSummaryFormula = groupingJobj.optBoolean("isSummaryFormula", false);
                        String formula = groupingJobj.optString("formula", "");
                        String formulaValue = groupingJobj.optString("formulavalue", "");
                        String dataStyle = groupingJobj.optString("style", "");
                        String label = groupingJobj.optString("label", "");
                        String key = groupingJobj.optString("key", "");
                        String seq = groupingJobj.optString("seq", "");
                        String functionType = groupingJobj.optString("functiontype", "sum");
                        String recordcurrency = groupingJobj.optString("recordcurrency", "");
                        String decimalpoint = groupingJobj.optString("decimalpoint", "2");
                        String commaamount = groupingJobj.optString("commaamount", "");

                        CustomDesignLineItemProp rowData = new CustomDesignLineItemProp();

                        double value = 0, totalValue = 0;
                        String amountStr = "", totalAmountStr = "";
                        if(!seq.equals("-1")){
                            totalValue = totalRowJobj.optDouble("col"+colNo, 0);
                            String valStr = "";
                            if(!isSummaryFormula){
                                switch (functionType) {// calculate values as per function type
                                    case "sum":
                                        value = groupingJobj.getDouble(groupKey);
                                        totalValue = totalValue + value;// summation of current value and totalrow value
                                        break;
                                    case "average":
                                        valStr = groupingJobj.getString(groupKey);
                                        String[] valArr = valStr.split(",");
                                        valStr = valStr.replaceAll(",", "+");
                                        valStr = "("+valStr+")/"+valArr.length; // Create expression of average calculation
                                        valStr = evaluateExpression(valStr, Integer.parseInt(decimalpoint));
                                        value = Double.parseDouble(valStr);
                                        if(totalRowJobj.has("col"+colNo)){ // if colno value is already present in totalrow
                                            totalValue = (totalValue + value) / 2;
                                        } else{ // if colno value is not present in totalrow
                                            totalValue = value;
                                        }
                                        break;
                                    case "min":
                                        valStr = groupingJobj.getString(groupKey);
                                        String[] minSortArr = valStr.split(",");
                                        Set<Double> minSortSet = new TreeSet<Double>();// get set for sorting
                                        for(String val : minSortArr){
                                            minSortSet.add(Double.parseDouble(val));
                                        }
                                        value = (Double) minSortSet.toArray()[0];// get first value from set
                                        totalValue = totalValue < value ? totalValue : value;// assign minimum value from existing minimum value and current value
                                        break;
                                    case "max":
                                        valStr = groupingJobj.getString(groupKey);
                                        String[] maxSortArr = valStr.split(",");
                                        Set<Double> maxSortSet = new TreeSet<Double>();// get set for sorting
                                        for(String val : maxSortArr){
                                            maxSortSet.add(Double.parseDouble(val));
                                        }
                                        value = (Double) maxSortSet.toArray()[maxSortSet.size()-1];// get last value from set
                                        totalValue = totalValue > value ? totalValue : value;// assign maximum value from existing maximum value and current value
                                        break;
                                    case "count":
                                        value = groupingJobj.getDouble(groupKey);
                                        totalValue = totalValue + value;// add current count value in totalrow count value
                                        break;
                                }
                            } else{ // For summary level formula calculation
                                formula = formulaValue; // use formula with fieldid's for value replacement and calculation
                                formula = formula.replaceAll("!##", "-").replaceAll("$##", "/");// replace '!##' and '$##' with respective characters in formula if exist('!##' for '-' and '$##' for '/')
                                String[] fieldsArr = formulaValue.replaceAll("\\(|\\)", "").split("\\+|\\-|\\*|\\/");// Replace brackets '(' and ')' then split fields from formula using operators used
                                for(int fieldCnt = 0; fieldCnt < fieldsArr.length; fieldCnt++){
                                    String fieldValue = "0";
                                    String field = fieldsArr[fieldCnt].trim(); //Remove extra space before and after
                                    field = field.replaceAll("!##", "-");// replace '!##' identifier in formula if exist('!##' for '-')
                                    field = field.replaceAll("$##", "/");// replace '$##' identifier in formula if exist('$##' for '/')

                                    if(field.startsWith("#") && field.endsWith("#")){ // If placeholder

                                        field = field.substring(1, field.length()-1); // Remove # from start and end

                                        for(int dataColNo = 0 ; dataColNo < colDataValuesObj.length(); dataColNo++){
                                            JSONObject groupingDataJobj = colDataValuesObj.getJSONObject("col"+dataColNo);
                                            if(groupingDataJobj.has("key") && groupingDataJobj.getString("key").equals(field)){ // If Default field
                                                fieldValue = groupingDataJobj.getString(groupKey);
                                            }
                                        }
                                    } else{ // If number
                                        fieldValue = field;
                                    }
                                    formula = formula.replace("#"+field+"#", fieldValue); // replace field value in formula
                                }
                                String valueStr =  evaluateExpression(formula, Integer.parseInt(decimalpoint)); // Calculate expression using mval library
                                value = Double.parseDouble(valueStr);
                                totalValue = 0;
                            }

                            totalRowJobj.put("col"+colNo, totalValue);
                            //Decimal and Comma formatting
                            if(!StringUtil.isNullOrEmpty(commaamount) && commaamount.equals("true")){
                                amountStr = CustomDesignHandler.getAmountinCommaDecimal(value, Integer.parseInt(decimalpoint), countryid);
                            } else{
                                amountStr = authHandler.formattingdecimal(value, Integer.parseInt(decimalpoint));
                            }
                            //Append Currency Symbol and Code
                            switch (recordcurrency) {
                                case "0":
                                    amountStr = headerCurrency + " " + amountStr;
                                    break;
                                case "1":
                                    amountStr = headerCurrencyCode + " " + amountStr;
                                    break;
                            }
                        } else{
                            amountStr = groupingJobj.optString("pretext", "") + groupKey + groupingJobj.optString("posttext", ""); // append pretext annd posttext values to grouping value
                            totalRowJobj.put("col"+colNo, "Grand Total");
                            totalRowJobj.put("totalColNo", "col"+colNo);
                        }
                        // Put other data for total row with respective column no
                        totalRowJobj.put("col"+colNo+"_isSummaryFormula", isSummaryFormula);
                        totalRowJobj.put("col"+colNo+"_key", key);
                        totalRowJobj.put("col"+colNo+"_formulaValue", formulaValue);
                        totalRowJobj.put("col"+colNo+"style", dataStyle);
                        totalRowJobj.put("col"+colNo+"recordcurrency", recordcurrency);
                        totalRowJobj.put("col"+colNo+"decimalpoint", decimalpoint);
                        totalRowJobj.put("col"+colNo+"commaamount", commaamount);

                        rowData.setData(amountStr);
                        rowData.setStyle(dataStyle);

                        groupingSummaryTableDetailslist.add(rowData);
                    }

                    rowDataList.add(groupingSummaryTableDetailslist);
                }
                // add Grand Total row
                groupingSummaryTableDetailslist = new ArrayList();
                for(int totalColNo = 0; totalColNo < totalRowJobj.length(); totalColNo++){
                    CustomDesignLineItemProp rowData = new CustomDesignLineItemProp();
                    if(totalRowJobj.has("col"+totalColNo) && totalRowJobj.has("totalColNo") && totalRowJobj.getString("totalColNo").equals("col"+totalColNo)){
                        String totalStr = totalRowJobj.optString("col"+totalColNo, "Grand Total");
                        String dataStyle = totalRowJobj.optString("col"+totalColNo+"style", "");

                        rowData.setData(totalStr);
                        rowData.setStyle(dataStyle);

                        groupingSummaryTableDetailslist.add(rowData);
                    } else if(totalRowJobj.has("col"+totalColNo)){
                        String totalAmountStr = "";
                        double totalValue = totalRowJobj.optDouble("col"+totalColNo, 0);
                        boolean isSummaryFormula = totalRowJobj.optBoolean("col"+totalColNo+"_isSummaryFormula", false);
                        String dataStyle = totalRowJobj.optString("col"+totalColNo+"style", "");
                        String formula = totalRowJobj.optString("col"+totalColNo+"_formula", "");
                        String formulaValue = totalRowJobj.optString("col"+totalColNo+"_formulaValue", "");
                        String recordcurrency = totalRowJobj.optString("col"+totalColNo+"recordcurrency", "");
                        String decimalpoint = totalRowJobj.optString("col"+totalColNo+"decimalpoint", "2");
                        String commaamount = totalRowJobj.optString("col"+totalColNo+"commaamount", "");

                        if(isSummaryFormula){ // For summary level formula calculation
                            formula = formulaValue; // use formula with fieldid's for value replacement and calculation
                            formula = formula.replaceAll("!##", "-").replaceAll("$##", "/");// replace '!##' and '$##' with respective characters in formula if exist('!##' for '-' and '$##' for '/')
                            String[] fieldsArr = formulaValue.replaceAll("\\(|\\)", "").split("\\+|\\-|\\*|\\/");// Replace brackets '(' and ')' then split fields from formula using operators used
                            for(int fieldCnt = 0; fieldCnt < fieldsArr.length; fieldCnt++){
                                String fieldValue = "0";
                                String field = fieldsArr[fieldCnt].trim(); //Remove extra space before and after
                                field = field.replaceAll("!##", "-");// replace '!##' identifier in formula if exist('!##' for '-')
                                field = field.replaceAll("$##", "/");// replace '$##' identifier in formula if exist('$##' for '/')

                                if(field.startsWith("#") && field.endsWith("#")){ // If placeholder

                                    field = field.substring(1, field.length()-1); // Remove # from start and end

                                    for(int dataColNo = 0 ; dataColNo < totalRowJobj.length(); dataColNo++){
                                        if(totalRowJobj.has("col"+dataColNo+"_key") && totalRowJobj.getString("col"+dataColNo+"_key").equals(field)){ // If Default field
                                            fieldValue = totalRowJobj.getString("col"+dataColNo);
                                        }
                                    }
                                } else{ // If number
                                    fieldValue = field;
                                }
                                formula = formula.replace("#"+field+"#", fieldValue); // replace field value in formula
                            }
                            String valueStr =  evaluateExpression(formula, Integer.parseInt(decimalpoint)); // Calculate expression using mval library
                            totalValue = Double.parseDouble(valueStr);
                        }
                        //Decimal and Comma formatting
                        if(!StringUtil.isNullOrEmpty(commaamount) && commaamount.equals("true")){
                            totalAmountStr = CustomDesignHandler.getAmountinCommaDecimal(totalValue, Integer.parseInt(decimalpoint), countryid);
                        } else{
                            totalAmountStr = authHandler.formattingdecimal(totalValue, Integer.parseInt(decimalpoint));
                        }
                        //Append Currency Symbol and Code
                        switch (recordcurrency) {
                            case "0":
                                totalAmountStr = headerCurrency + " " + totalAmountStr;
                                break;
                            case "1":
                                totalAmountStr = headerCurrencyCode + " " + totalAmountStr;
                                break;
                        }

                        rowData.setData(totalAmountStr);
                        rowData.setStyle(dataStyle);

                        groupingSummaryTableDetailslist.add(rowData);
                    }
                }
                rowDataList.add(groupingSummaryTableDetailslist);

                groupingSummaryTableHTML = CustomDesignHandler.getGroupingSummaryTableHTMLByVelocityEngineNew(velocityEngine, groupingSummaryTableHeaderlist, groupingSummaryTableStyle, rowDataList);
                groupingSummaryTableElement.html(groupingSummaryTableHTML);
                buildhtml = jsoupDoc.body().html();
            }
        } catch(Exception ex){
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        return buildhtml;
    }
    /*
     * method to check the string contents are numeric or not
     */
    public static boolean isNumeric(String str) {        
        try {            
            double d = Double.parseDouble(str);            
        } catch (NumberFormatException nfe) {            
            return false;            
        }        
        return true;        
    }
    /**
     * set HSN/SAC Code value from product master
     * @param product
     * @param obj
     * @param companyid
     * @param accAccountDAOobj
     * @param kwlCommonTablesDAOObj 
     */
    public static void setHsnSacProductDimensionField(Product product, JSONObject obj, String companyid, accAccountDAO accAccountDAOobj, kwlCommonTablesDAO kwlCommonTablesDAOObj){
        try {
            int moduleId = Constants.Acc_Product_Master_ModuleId;
            if(obj.optBoolean("isFixedAsset",false)){
                moduleId = Constants.Acc_FixedAssets_AssetsGroups_ModuleId ;
            }
            HashMap<String, String> dimensionFieldMap = new HashMap<String, String>();
            HashMap<String, Object> fieldrequestParams = new HashMap();
            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.moduleid, Constants.customcolumn, Constants.customfield, Constants.Acc_custom_field));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid,moduleId, 1, 0, Constants.Custom_Record_Prefix + Constants.HSN_SACCODE));
            //get product dimension fields map
            HashMap<String, Integer> productDimensionFieldMap = accAccountDAOobj.getFieldParamsMap(fieldrequestParams, dimensionFieldMap);
            AccProductCustomData productCustomData = (AccProductCustomData) product.getProductCustomData();
            //Iterate dimension map for getting "HSN/SAC Code" field
            for (Map.Entry<String, Integer> varEntry : productDimensionFieldMap.entrySet()) {
                String coldata = varEntry.getValue() != null ? varEntry.getValue().toString() : "";
                String val = productCustomData.getCol(Integer.parseInt(coldata));
                if(!StringUtil.isNullOrEmpty(val)){
                    //check for if field is HSN/SAC Code
                    if(varEntry.getKey().equals(Constants.Custom_Record_Prefix + Constants.HSN_SACCODE)){
                        //get field combo data details
                        KwlReturnObject dimResult = kwlCommonTablesDAOObj.getObject(FieldComboData.class.getName(), val);
                        // check field combo data is available or not
                        if(dimResult.getEntityList().size() > 0){
                            FieldComboData dim = (FieldComboData) dimResult.getEntityList().get(0);
                            //put HSN/SAC Code field
                            obj.put(CustomDesignerConstants.HSN_SAC_CODE, dim.getValue());
                            //break loop - no need to iterate after getting HSN/SAC Code
                            break;
                        }
                    }
                }
            }
        } catch (Exception e) {
            Logger.getLogger(ExportRecordHandler.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    public static double getExchangeRateForSpecificCurrencyFields(JSONObject requestJson, AccInvoiceServiceDAO accInvoiceServiceDAOObj) throws JSONException, ServiceException, ParseException{
        String fieldName = requestJson.optString("fieldName");
        String gstCurrencyRate = requestJson.optString("gstCurrencyRate");
        String SpecificCurrencyId = requestJson.optString("currId");
        double exchangeRateForSpecificFields = 1;
        if (fieldName.equals(CustomDesignerConstants.GlobalSpecificCurrencyAmount)
                || fieldName.equals(CustomDesignerConstants.GlobalSpecificCurrencySubTotal)
                || fieldName.equals(CustomDesignerConstants.GlobalSpecificCurrencySubTotalWithDicount)
                || fieldName.equals(CustomDesignerConstants.GlobalSpecificCurrencyTaxAmount)
                || fieldName.equals(CustomDesignerConstants.GlobalSpecificCurrencyExchangeRate)
                || fieldName.equals(CustomDesignerConstants.GlobalSpecificCurrencyTermAmount)
                || fieldName.equals(CustomDesignerConstants.SpecificCurrencyAmount)
                || fieldName.equals(CustomDesignerConstants.SpecificCurrencyDiscount)
                || fieldName.equals(CustomDesignerConstants.SpecificCurrencySubTotal)
                || fieldName.equals(CustomDesignerConstants.SpecificCurrencySubTotalWithDicount)
                || fieldName.equals(CustomDesignerConstants.SpecificCurrencyTaxAmount)
                || fieldName.equals(CustomDesignerConstants.SpecificCurrencyUnitPrice)
                || fieldName.equals(CustomDesignerConstants.SpecificCurrencyExchangeRate)) {

            if (!StringUtil.isNullOrEmpty(gstCurrencyRate) && SpecificCurrencyId.equals("6")) {
                exchangeRateForSpecificFields = Double.parseDouble(gstCurrencyRate);
            } else {
                exchangeRateForSpecificFields = accInvoiceServiceDAOObj.getExchangeRateForSpecificCurrency(requestJson);
            }
        }
        return exchangeRateForSpecificFields;
    }
    
    public static String getNonWrappingValue (String value) {
        String initialValue = value;
        try {
            if(value.contains(", ")) {
                value = value.replaceAll(", ", ",");
                value = value.replaceAll(" ", "&nbsp;");
                value = value.replaceAll("-", "&#8209;");
                value = value.replaceAll(",", ",</nobr><wbr><nobr style='font-size: inherit;'>");
            } else if (value.contains(",")) {
                value = value.replaceAll(" ", "&nbsp;");
                value = value.replaceAll("-", "&#8209;");
                value = value.replaceAll(",", ",</nobr><wbr><nobr style='font-size: inherit;'>");
            } else {
                value = value.replaceAll(" ", "&nbsp;");
                value = value.replaceAll("-", "&#8209;");
            }
            value = "<nobr style='font-size: inherit;'>" + value + "</nobr>";
        } catch (Exception ex) {
            return initialValue;
        }
        return value;
    }
    
    public static JSONObject getJsonValueOfLineField(String fieldKey, int moduleid){
        JSONObject fieldValue = new JSONObject();
        try {
            String value = "{}";
            switch(moduleid){
                case Constants.Acc_Invoice_ModuleId :
                case Constants.Acc_Vendor_Invoice_ModuleId :
                case Constants.Acc_Vendor_Quotation_ModuleId :
                //Lease
                case Constants.LEASE_INVOICE_MODULEID :
                //Consignment
                case Constants.Acc_ConsignmentInvoice_ModuleId :
                case Constants.Acc_Consignment_GoodsReceipt_ModuleId :
                //Assets
                case Constants.Acc_FixedAssets_DisposalInvoice_ModuleId :
                case Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId :
                case Constants.Acc_FixedAssets_Vendor_Quotation_ModuleId :
                    if(LineItemColumnModuleMapping.InvoiceProductLineMap.containsKey(fieldKey)){
                        value = (String) LineItemColumnModuleMapping.InvoiceProductLineMap.get(fieldKey);
                    }
                    break;
                case Constants.Acc_Sales_Order_ModuleId :
                //Lease
                case Constants.Acc_Lease_Order_ModuleId :
                //Consignment
                case Constants.Acc_ConsignmentRequest_ModuleId :
                    if(LineItemColumnModuleMapping.InvoiceProductLineMap.containsKey(fieldKey)){
                        value = (String) LineItemColumnModuleMapping.InvoiceProductLineMap.get(fieldKey);
                    }
                    if(LineItemColumnModuleMapping.InvoiceProductLineMap_SO.containsKey(fieldKey)){
                        value = (String) LineItemColumnModuleMapping.InvoiceProductLineMap_SO.get(fieldKey);
                    }
                    break;
                case Constants.Acc_Customer_Quotation_ModuleId :
                //Lease
                case Constants.Acc_Lease_Quotation :
                    if(LineItemColumnModuleMapping.CustomerQuotationProductLineMap.containsKey(fieldKey)){
                        value = (String) LineItemColumnModuleMapping.CustomerQuotationProductLineMap.get(fieldKey);
                    }
                    break;
                case Constants.Acc_Delivery_Order_ModuleId :
                //Lease
                case Constants.Acc_Lease_DO :
                //Consignment
                case Constants.Acc_ConsignmentDeliveryOrder_ModuleId :
                //Assets
                case Constants.Acc_FixedAssets_DeliveryOrder_ModuleId :
                    if(LineItemColumnModuleMapping.DOGROLineMap_DO.containsKey(fieldKey)){
                        value = (String) LineItemColumnModuleMapping.DOGROLineMap_DO.get(fieldKey);
                    }
                    break;
                case Constants.Acc_Goods_Receipt_ModuleId :
                //Consignment
                case Constants.Acc_Consignment_GoodsReceiptOrder_ModuleId :
                //Assets
                case Constants.Acc_FixedAssets_GoodsReceipt_ModuleId :
                    if(LineItemColumnModuleMapping.DOGROLineMap_GR.containsKey(fieldKey)){
                        value = (String) LineItemColumnModuleMapping.DOGROLineMap_GR.get(fieldKey);
                    }
                    break;
                case Constants.Acc_Purchase_Order_ModuleId :
                //Consignment
                case Constants.Acc_ConsignmentVendorRequest_ModuleId :
                //Assets
                case Constants.Acc_FixedAssets_Purchase_Order_ModuleId :
                    if(LineItemColumnModuleMapping.InvoiceProductLineMap_PO.containsKey(fieldKey)){
                        value = (String) LineItemColumnModuleMapping.InvoiceProductLineMap_PO.get(fieldKey);
                    }
                    break;
                case Constants.Acc_Sales_Return_ModuleId :
                //Lease
                case Constants.Acc_Lease_Return :
                //Consignment
                case Constants.Acc_ConsignmentSalesReturn_ModuleId :
                //Assets
                case Constants.Acc_FixedAssets_Sales_Return_ModuleId :
                    if(LineItemColumnModuleMapping.SalesReturnProductLineMap.containsKey(fieldKey)){
                        value = (String) LineItemColumnModuleMapping.SalesReturnProductLineMap.get(fieldKey);
                    }
                    break;
                case Constants.Acc_Purchase_Return_ModuleId :
                //Consignment
                case Constants.Acc_ConsignmentPurchaseReturn_ModuleId :
                //Assets
                case Constants.Acc_FixedAssets_Purchase_Return_ModuleId :
                    if(LineItemColumnModuleMapping.PurchaseReturnProductLineMap.containsKey(fieldKey)){
                        value = (String) LineItemColumnModuleMapping.PurchaseReturnProductLineMap.get(fieldKey);
                    }
                    break;
                case Constants.Acc_Purchase_Requisition_ModuleId :
                //Assets
                case Constants.Acc_FixedAssets_PurchaseRequisition_ModuleId :
                    if(LineItemColumnModuleMapping.PurchaseRequisitionLineMap.containsKey(fieldKey)){
                        value = (String) LineItemColumnModuleMapping.PurchaseRequisitionLineMap.get(fieldKey);
                    }
                    break;
            }
            if(value.equals("{}")){
                if(LineItemColumnModuleMapping.LineLevelTaxFields_India_USA.containsKey(fieldKey)){
                    value = (String) LineItemColumnModuleMapping.LineLevelTaxFields_India_USA.get(fieldKey);
                }
            }
            if(StringUtil.isNullOrEmpty(value)){
               value = "{}";
            }
            fieldValue = new JSONObject(value);
        } catch (Exception e) {
            return new JSONObject();
        }
        return fieldValue;
    }
    
}