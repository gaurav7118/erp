Ext.define("Ext.ElementLoader",{mixins:["Ext.util.Observable"],uses:["Ext.data.Connection","Ext.Ajax"],statics:{Renderer:{Html:function(A,B,C){A.getTarget().setHtml(B.responseText,C.scripts===true,C.rendererScope);return true}}},url:null,params:null,baseParams:null,autoLoad:false,target:null,loadMask:false,ajaxOptions:null,scripts:false,isLoader:true,constructor:function(B){var C=this,A;C.mixins.observable.constructor.call(C,B);C.setTarget(C.target);if(C.autoLoad){A=C.autoLoad;if(A===true){A=null}C.load(A)}},setTarget:function(B){var A=this;B=Ext.get(B);if(A.target&&A.target!==B){A.abort()}A.target=B},getTarget:function(){return this.target||null},abort:function(){var A=this.active;if(A!==undefined){Ext.Ajax.abort(A.request);if(A.mask){this.removeMask()}delete this.active}},removeMask:function(){this.target.unmask()},addMask:function(A){this.target.mask(A===true?null:A)},load:function(C){if(!this.target){Ext.raise("A valid target is required when loading content")}C=Ext.apply({},C);var E=this,A=Ext.isDefined(C.loadMask)?C.loadMask:E.loadMask,F=Ext.apply({},C.params),B=Ext.apply({},C.ajaxOptions),G=C.callback||E.callback,D=C.scope||E.scope||E;Ext.applyIf(B,E.ajaxOptions);Ext.applyIf(C,B);Ext.applyIf(F,E.params);Ext.apply(F,E.baseParams);Ext.applyIf(C,{url:E.url});if(!C.url){Ext.raise("You must specify the URL from which content should be loaded")}Ext.apply(C,{scope:E,params:F,callback:E.onComplete});if(E.fireEvent("beforeload",E,C)===false){return }if(A){E.addMask(A)}E.active={options:C,mask:A,scope:D,callback:G,success:C.success||E.success,failure:C.failure||E.failure,renderer:C.renderer||E.renderer,scripts:Ext.isDefined(C.scripts)?C.scripts:E.scripts};E.active.request=Ext.Ajax.request(C);E.setOptions(E.active,C)},setOptions:function(B,A){B.rendererScope=A.rendererScope||this.rendererScope||this},onComplete:function(B,F,A){var D=this,E=D.active,G,C;if(E){C=E.scope;G=E.rendererScope;if(F){F=D.getRenderer(E.renderer).call(G,D,A,E)!==false}if(F){Ext.callback(E.success,C,[D,A,B]);D.fireEvent("load",D,A,B)}else{Ext.callback(E.failure,C,[D,A,B]);D.fireEvent("exception",D,A,B)}Ext.callback(E.callback,C,[D,F,A,B]);if(E.mask){D.removeMask()}}delete D.active},getRenderer:function(A){if(Ext.isFunction(A)){return A}return this.statics().Renderer.Html},startAutoRefresh:function(A,B){var C=this;C.stopAutoRefresh();C.autoRefresh=Ext.interval(function(){C.load(B)},A)},stopAutoRefresh:function(){clearInterval(this.autoRefresh);delete this.autoRefresh},isAutoRefreshing:function(){return Ext.isDefined(this.autoRefresh)},destroy:function(){var A=this;A.stopAutoRefresh();delete A.target;A.abort();A.callParent()}})