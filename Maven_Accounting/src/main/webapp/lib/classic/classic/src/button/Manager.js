Ext.define("Ext.button.Manager",{singleton:true,alternateClassName:"Ext.ButtonToggleManager",groups:{},pressedButton:null,init:function(){var A=this;if(!A.initialized){Ext.getDoc().on({mouseup:A.onDocumentMouseUp,scope:A});A.initialized=true}},onButtonMousedown:function(A,C){var B=this.pressedButton;if(B){B.onMouseUp(C)}this.pressedButton=A},onDocumentMouseUp:function(B){var A=this.pressedButton;if(A){A.onMouseUp(B);this.pressedButton=null}},toggleGroup:function(B,E){if(E){var D=this.groups[B.toggleGroup],C=D.length,A;for(A=0;A<C;A++){if(D[A]!==B){D[A].toggle(false)}}}},register:function(B){var C=this,A=this.groups,D=A[B.toggleGroup];C.init();if(!B.toggleGroup){return }if(!D){D=A[B.toggleGroup]=[]}D.push(B);B.on("toggle",C.toggleGroup,C)},unregister:function(A){if(!A.toggleGroup){return }var B=this,C=B.groups[A.toggleGroup];if(C){Ext.Array.remove(C,A);A.un("toggle",B.toggleGroup,B)}},getPressed:function(D){var C=this.groups[D],B=0,A;if(C){for(A=C.length;B<A;B++){if(C[B].pressed===true){return C[B]}}}return null}})