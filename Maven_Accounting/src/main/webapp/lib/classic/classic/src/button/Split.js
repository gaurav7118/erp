Ext.define("Ext.button.Split",{extend:"Ext.button.Button",alternateClassName:"Ext.SplitButton",alias:"widget.splitbutton",isSplitButton:true,arrowCls:"split",split:true,initComponent:function(){var A=this;if(Ext.enableAriaButtons&&!Ext.slicer&&A.menu&&(A.arrowHandler||A.hasListeners.hasOwnProperty("arrowclick"))){var B=Ext.enableAria?Ext.log.error:Ext.log.warn;B("Using both menu and arrowHandler config options in Split buttons leads to confusing user experience and conflicts with accessibility best practices. See WAI-ARIA 1.0 Authoring guide: http://www.w3.org/TR/wai-aria-practices/#menubutton")}A.callParent()},getTemplateArgs:function(){var B=this,A,C;C=B.callParent();if(B.disabled){C.tabIndex=null}A=B.ariaArrowElAttributes||{};A["aria-hidden"]=!!B.hidden;A["aria-disabled"]=!!B.disabled;if(B.arrowTooltip){A["aria-label"]=B.arrowTooltip}else{A["aria-labelledby"]=B.id}C.arrowElAttributes=A;return C},onRender:function(){var B=this,A;B.callParent();A=B.getFocusEl();if(A){A.on({scope:B,focus:B.onMainElFocus,blur:B.onMainElBlur})}A=B.arrowEl;if(A){A.dom.setAttribute("data-componentid",B.id);A.setVisibilityMode(Ext.dom.Element.DISPLAY);A.on({scope:B,focus:B.onArrowElFocus,blur:B.onArrowElBlur})}},setArrowHandler:function(B,A){this.arrowHandler=B;this.scope=A},onClick:function(C){var B=this,A=C.type==="keydown"&&C.target===B.arrowEl.dom;B.doPreventDefault(C);if(!B.disabled){if(A||B.isWithinTrigger(C)){C.preventDefault();B.maybeShowMenu(C);B.fireEvent("arrowclick",B,C);if(B.arrowHandler){B.arrowHandler.call(B.scope||B,B,C)}}else{B.doToggle();B.fireHandler(C)}}},enable:function(B){var C=this,A=C.arrowEl;C.callParent([B]);if(A){A.dom.setAttribute("tabIndex",C.tabIndex);A.dom.setAttribute("aria-disabled","false")}},disable:function(B){var C=this,A=C.arrowEl;C.callParent([B]);if(A){A.dom.removeAttribute("tabIndex");A.dom.setAttribute("aria-disabled","true")}},afterHide:function(A,B){this.callParent([A,B]);this.arrowEl.dom.setAttribute("aria-hidden","true")},afterShow:function(C,A,B){this.callParent([C,A,B]);this.arrowEl.dom.setAttribute("aria-hidden","false")},privates:{isFocusing:function(D){var C=this,F=D.fromElement,E=D.toElement,B=C.focusEl&&C.focusEl.dom,A=C.arrowEl&&C.arrowEl.dom;if(C.focusable){if(E===B){return F===A?false:true}else{if(E===A){return F===B?false:true}}return true}return false},isBlurring:function(D){var C=this,F=D.fromElement,E=D.toElement,B=C.focusEl&&C.focusEl.dom,A=C.arrowEl&&C.arrowEl.dom;if(C.focusable){if(F===B){return E===A?false:true}else{if(F===A){return E===B?false:true}}return true}return false},getFocusClsEl:Ext.privateFn,onMainElFocus:function(A){this.el.addCls(this._focusCls)},onMainElBlur:function(A){this.el.removeCls(this._focusCls)},onArrowElFocus:function(A){this.el.addCls(this._arrowFocusCls)},onArrowElBlur:function(){this.el.removeCls(this._arrowFocusCls)},setTabIndex:function(A){this.callParent([A]);if(this.arrowEl){this.arrowEl.set({tabIndex:A})}},_addSplitCls:function(){var A=this.arrowEl;this.callParent();A.dom.setAttribute("tabIndex",this.tabIndex);A.setVisible(true)},_removeSplitCls:function(){var A=this.arrowEl;this.callParent();A.dom.removeAttribute("tabIndex");A.setVisible(false)}}})