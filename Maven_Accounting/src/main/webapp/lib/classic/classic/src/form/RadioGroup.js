Ext.define("Ext.form.RadioGroup",{extend:"Ext.form.CheckboxGroup",alias:"widget.radiogroup",requires:["Ext.form.field.Radio"],mixins:["Ext.util.FocusableContainer"],allowBlank:true,blankText:"You must select one item in this group",defaultType:"radiofield",local:false,defaultBindProperty:"value",groupCls:Ext.baseCSSPrefix+"form-radio-group",ariaRole:"radiogroup",initRenderData:function(){var B=this,C,A;C=B.callParent();A=C.ariaAttributes;if(A){A["aria-required"]=!B.allowBlank;A["aria-invalid"]=false}return C},lookupComponent:function(B){var A=this.callParent([B]);if(this.local){A.formId=this.getId()}return A},getBoxes:function(B,A){return(A||this).query("[isRadio]"+(B||""))},checkChange:function(){var B=this.getValue(),A=Ext.Object.getKeys(B)[0];if(Ext.isArray(B[A])){return }this.callParent(arguments)},setValue:function(D){var H,F,E,G,C,A,B;if(Ext.isObject(D)){Ext.suspendLayouts();F=this.items.first();E=F?F.getFormId():null;for(B in D){H=D[B];G=Ext.form.RadioManager.getWithValue(B,H,E).items;A=G.length;for(C=0;C<A;++C){G[C].setValue(true)}}Ext.resumeLayouts(true)}return this},markInvalid:function(B){var A=this.ariaEl.dom;this.callParent([B]);if(A){A.setAttribute("aria-invalid",true)}},clearInvalid:function(){var A=this.ariaEl.dom;this.callParent();if(A){A.setAttribute("aria-invalid",false)}},privates:{getFocusables:function(){return this.getBoxes()},initDefaultFocusable:function(A){var D=this,C,B;C=D.getChecked();if(C.length>1){Ext.log.error("RadioGroup "+D.id+" has more than one checked button")}if(C.length){B=C[0]}else{B=D.findNextFocusableChild({beforeRender:A,step:1})}if(B){D.activateFocusable(B)}return B},getFocusableContainerEl:function(){return this.containerEl},onFocusableContainerFocusLeave:function(){this.clearFocusables();this.initDefaultFocusable()},doFocusableChildAdd:function(F){var E=this,B=E.mixins.focusablecontainer,D,C,A;D=F.isContainer?E.getBoxes("",F):[F];for(C=0,A=D.length;C<A;C++){B.doFocusableChildAdd.call(E,D[C])}},doFocusableChildRemove:function(F){var E=this,B=E.mixins.focusablecontainer,D,C,A;D=F.isContainer?E.getBoxes("",F):[F];for(C=0,A=D.length;C<A;C++){B.doFocusableChildRemove.call(E,D[C])}},focusChild:function(C,B,D){var A=this.mixins.focusablecontainer.focusChild.apply(this,arguments);if(!D.ctrlKey){A.setValue(true)}}}})