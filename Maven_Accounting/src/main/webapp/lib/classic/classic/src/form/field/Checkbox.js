Ext.define("Ext.form.field.Checkbox",{extend:"Ext.form.field.Base",alias:["widget.checkboxfield","widget.checkbox"],alternateClassName:"Ext.form.Checkbox",requires:["Ext.XTemplate","Ext.form.CheckboxManager"],stretchInputElFixed:false,childEls:["boxLabelEl","innerWrapEl","displayEl"],fieldSubTpl:['<div id="{cmpId}-innerWrapEl" data-ref="innerWrapEl" role="presentation"',' class="{wrapInnerCls}">','<tpl if="labelAlignedBefore">',"{beforeBoxLabelTpl}",'<label id="{cmpId}-boxLabelEl" data-ref="boxLabelEl" {boxLabelAttrTpl} class="{boxLabelCls} ','{boxLabelCls}-{ui} {boxLabelCls}-{boxLabelAlign} {noBoxLabelCls} {childElCls}" for="{id}">',"{beforeBoxLabelTextTpl}","{boxLabel}","{afterBoxLabelTextTpl}","</label>","{afterBoxLabelTpl}","</tpl>",'<input type="button" id="{id}" name="{inputName}" data-ref="inputEl" {inputAttrTpl}','<tpl if="tabIdx != null"> tabindex="{tabIdx}"</tpl>','<tpl if="disabled"> disabled="disabled"</tpl>','<tpl if="fieldStyle"> style="{fieldStyle}"</tpl>',' class="{checkboxCls} {clipCls}" autocomplete="off" hidefocus="true" ','<tpl foreach="inputElAriaAttributes"> {$}="{.}"</tpl>',"/>",'<span id="{cmpId}-displayEl" data-ref="displayEl" class="{fieldCls} {typeCls} ','{typeCls}-{ui} {inputCls} {inputCls}-{ui} {childElCls} {afterLabelCls}"></span>','<tpl if="!labelAlignedBefore">',"{beforeBoxLabelTpl}",'<label id="{cmpId}-boxLabelEl" data-ref="boxLabelEl" {boxLabelAttrTpl} class="{boxLabelCls} ','{boxLabelCls}-{ui} {boxLabelCls}-{boxLabelAlign} {noBoxLabelCls} {childElCls}" for="{id}">',"{beforeBoxLabelTextTpl}","{boxLabel}","{afterBoxLabelTextTpl}","</label>","{afterBoxLabelTpl}","</tpl>","</div>",{disableFormats:true,compiled:true}],publishes:{checked:1},subTplInsertions:["beforeBoxLabelTpl","afterBoxLabelTpl","beforeBoxLabelTextTpl","afterBoxLabelTextTpl","boxLabelAttrTpl","inputAttrTpl"],isCheckbox:true,focusCls:"form-checkbox-focus",fieldBodyCls:Ext.baseCSSPrefix+"form-cb-wrap",checked:false,checkedCls:Ext.baseCSSPrefix+"form-cb-checked",boxLabelCls:Ext.baseCSSPrefix+"form-cb-label",boxLabelAlign:"after",afterLabelCls:Ext.baseCSSPrefix+"form-cb-after",wrapInnerCls:Ext.baseCSSPrefix+"form-cb-wrap-inner",noBoxLabelCls:Ext.baseCSSPrefix+"form-cb-no-box-label",inputValue:"on",checkChangeEvents:[],inputType:"checkbox",isTextInput:false,ariaRole:"checkbox",onRe:/^on$/i,inputCls:Ext.baseCSSPrefix+"form-cb",_checkboxCls:Ext.baseCSSPrefix+"form-cb-input",_clipCls:Ext.baseCSSPrefix+"hidden-clip",initComponent:function(){var A=this,B=A.value;if(B!==undefined){A.checked=A.isChecked(B,A.inputValue)}A.callParent();A.getManager().add(A)},initDefaultName:Ext.emptyFn,initValue:function(){var B=this,A=!!B.checked;B.originalValue=B.lastValue=A;B.setValue(A)},getElConfig:function(){var A=this;if(A.isChecked(A.rawValue,A.inputValue)){A.addCls(A.checkedCls)}return A.callParent()},getSubTplData:function(B){var D=this,C=D.boxLabel,G=D.boxLabelAlign,F=G==="before",E,A;E=Ext.apply(D.callParent([B]),{clipCls:D._clipCls,checkboxCls:D._checkboxCls,disabled:D.readOnly||D.disabled,wrapInnerCls:D.wrapInnerCls,boxLabel:C,boxLabelCls:D.boxLabelCls,boxLabelAlign:G,labelAlignedBefore:F,afterLabelCls:F?D.afterLabelCls:"",noBoxLabelCls:!C?D.noBoxLabelCls:"",inputName:D.name||D.id});A=E.inputElAriaAttributes;if(A){A["aria-checked"]=!!D.checked;A["aria-labelledby"]=D.id+"-boxLabelEl"}return E},initEvents:function(){var A=this;A.callParent();A.inputEl.on({click:"onBoxClick",scope:A,translate:false});A.displayEl.on({click:"onBoxClick",mousedown:"_onDisplayElMouseDown",scope:A})},setBoxLabel:function(A){var B=this;B.boxLabel=A;if(B.rendered){B.boxLabelEl.setHtml(A);B.boxLabelEl[A?"removeCls":"addCls"](B.noBoxLabelCls);B.updateLayout()}},onBoxClick:function(){var A=this;if(!A.disabled&&!A.readOnly){A.setValue(!A.checked)}},getRawValue:function(){return this.checked},getValue:function(){return this.checked},getSubmitValue:function(){var A=this.uncheckedValue,B=Ext.isDefined(A)?A:null;return this.checked?this.inputValue:B},isChecked:function(B,A){return(B===true||B==="true"||B==="1"||B===1||(((Ext.isString(B)||Ext.isNumber(B))&&A)?B==A:this.onRe.test(B)))},setRawValue:function(C){var B=this,D=B.inputEl,E=B.displayEl,A=B.isChecked(C,B.inputValue);if(D){B[A?"addCls":"removeCls"](B.checkedCls);if(B.ariaRole){B.ariaEl.dom.setAttribute("aria-checked",A)}}if(Ext.isIE8&&E&&A!==B.lastValue){E.repaint()}B.checked=B.rawValue=A;if(!B.duringSetValue){B.lastValue=A}return A},setValue:function(F){var E=this,C,B,A,D;if(Ext.isArray(F)){C=E.getManager().getByName(E.name,E.getFormId()).items;A=C.length;for(B=0;B<A;++B){D=C[B];D.setValue(Ext.Array.contains(F,D.inputValue))}}else{E.duringSetValue=true;E.callParent(arguments);delete E.duringSetValue}return E},valueToRaw:Ext.identityFn,onChange:function(B,A){var D=this,C=D.handler;if(C){Ext.callback(C,D.scope,[D,B],0,D)}D.callParent(arguments);if(D.reference&&D.publishState){D.publishState("checked",B)}},resetOriginalValue:function(B){var F=this,D,E,A,C;if(!B){D=F.getManager().getByName(F.name,F.getFormId()).items;A=D.length;for(C=0;C<A;++C){E=D[C];if(E!==F){D[C].resetOriginalValue(true)}}}F.callParent()},beforeDestroy:function(){this.callParent();this.getManager().removeAtKey(this.id)},getManager:function(){return Ext.form.CheckboxManager},onEnable:function(){var A=this,B=A.inputEl;A.callParent();if(B){B.dom.disabled=A.readOnly}},setReadOnly:function(C){var A=this,B=A.inputEl;if(B){B.dom.disabled=!!C||A.disabled}A.callParent(arguments)},getFormId:function(){var B=this,A;if(!B.formId){A=B.up("form");if(A){B.formId=A.id}}return B.formId},getFocusClsEl:function(){return this.displayEl},privates:{_onDisplayElMouseDown:function(A){A.preventDefault();this.inputEl.focus(1)}}})