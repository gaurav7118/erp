Ext.define("Ext.form.field.Field",{mixinId:"field",isFormField:true,config:{validation:null,validationField:null},disabled:false,submitValue:true,validateOnChange:true,valuePublishEvent:"change",suspendCheckChange:0,dirty:false,initField:function(){var E=this,D=E.valuePublishEvent,A,C;E.initValue();var F=["tagName","nodeName","children","childNodes"],B=this.name;if(B&&Ext.Array.indexOf(F,B)>-1){Ext.log.warn(['It is recommended to not use "',B,'" as a field name, because it ',"can cause naming collisions during form submission."].join(""))}if(Ext.isString(D)){E.on(D,E.publishValue,E)}else{for(C=0,A=D.length;C<A;++C){E.on(D[C],E.publishValue,E)}}},initValue:function(){var A=this;if("value" in A){A.suspendCheckChange++;A.setValue(A.value);A.suspendCheckChange--}A.initialValue=A.originalValue=A.lastValue=A.getValue()},getFieldIdentifier:function(){return this.isEditorComponent?this.dataIndex:this.name},getName:function(){return this.name},getValue:function(){return this.value},setValue:function(B){var A=this;A.value=B;A.checkChange();return A},isEqual:function(B,A){return String(B)===String(A)},isEqualAsString:function(B,A){return String(Ext.valueFrom(B,""))===String(Ext.valueFrom(A,""))},getSubmitData:function(){var A=this,B=null;if(!A.disabled&&A.submitValue){B={};B[A.getName()]=""+A.getValue()}return B},getModelData:function(A,B){var C=this,D=null;if(!C.disabled&&(C.submitValue||!B)){D={};D[C.getFieldIdentifier()]=C.getValue()}return D},reset:function(){var A=this;A.beforeReset();A.setValue(A.originalValue);A.clearInvalid();delete A.wasValid},beforeReset:Ext.emptyFn,resetOriginalValue:function(){this.originalValue=this.getValue();this.checkDirty()},checkChange:function(){var C=this,B,A;if(!C.suspendCheckChange){B=C.getValue();A=C.lastValue;if(!C.destroyed&&C.didValueChange(B,A)){C.lastValue=B;C.fireEvent("change",C,B,A);C.onChange(B,A)}}},didValueChange:function(B,A){return !this.isEqual(B,A)},onChange:function(A){var B=this;if(B.validateOnChange){B.validate()}B.checkDirty()},publishValue:function(){var A=this;if(A.rendered&&!A.getErrors().length){A.publishState("value",A.getValue())}},isDirty:function(){var A=this;return !A.disabled&&!A.isEqual(A.getValue(),A.originalValue)},checkDirty:function(){var A=this,B=A.isDirty();if(B!==A.wasDirty){A.dirty=B;A.fireEvent("dirtychange",A,B);A.onDirtyChange(B);A.wasDirty=B}},onDirtyChange:Ext.emptyFn,getErrors:function(D){var E=[],C=this.getValidationField(),B=this.getValidation(),A;if(C){A=C.validate(D);if(A!==true){E.push(A)}}if(B&&B!==true){E.push(B)}return E},isValid:function(){var A=this;return A.disabled||Ext.isEmpty(A.getErrors())},validate:function(){return this.checkValidityChange(this.isValid())},checkValidityChange:function(B){var A=this;if(B!==A.wasValid){A.wasValid=B;A.fireEvent("validitychange",A,B)}return B},batchChanges:function(A){try{this.suspendCheckChange++;A()}catch(B){throw B}finally{this.suspendCheckChange--}this.checkChange()},isFileUpload:function(){return false},extractFileInput:function(){return null},markInvalid:Ext.emptyFn,clearInvalid:Ext.emptyFn,updateValidation:function(A,B){if(B){this.validate()}},privates:{resetToInitialValue:function(){var B=this,A=B.originalValue;B.originalValue=B.initialValue;B.reset();B.originalValue=A}}})