Ext.define("Ext.form.field.Number",{extend:"Ext.form.field.Spinner",alias:"widget.numberfield",alternateClassName:["Ext.form.NumberField","Ext.form.Number"],allowExponential:true,allowDecimals:true,decimalSeparator:null,submitLocaleSeparator:true,decimalPrecision:2,minValue:Number.NEGATIVE_INFINITY,maxValue:Number.MAX_VALUE,step:1,minText:"The minimum value for this field is {0}",maxText:"The maximum value for this field is {0}",nanText:"{0} is not a valid number",negativeText:"The value cannot be negative",baseChars:"0123456789",autoStripChars:false,initComponent:function(){var A=this;if(A.decimalSeparator===null){A.decimalSeparator=Ext.util.Format.decimalSeparator}A.callParent();A.setMinValue(A.minValue);A.setMaxValue(A.maxValue)},getSubTplData:function(C){var E=this,D=E.minValue,A=E.maxValue,G,B,F;G=E.callParent([C]);B=G.inputElAriaAttributes;if(B){if(D>Number.NEGATIVE_INFINITY){B["aria-valuemin"]=D}if(A<Number.MAX_VALUE){B["aria-valuemax"]=A}F=E.getValue();if(F!=null&&F>=D&&F<=A){B["aria-valuenow"]=F}}return G},setValue:function(C){var B=this,D,A;if(B.hasFocus){D=B.getBind();A=D&&D.value;if(A&&A.syncing&&C===B.value){return B}}return B.callParent([C])},getErrors:function(C){C=arguments.length>0?C:this.processRawValue(this.getRawValue());var B=this,E=B.callParent([C]),D=Ext.String.format,A;if(C.length<1){return E}C=String(C).replace(B.decimalSeparator,".");if(isNaN(C)){E.push(D(B.nanText,C))}A=B.parseValue(C);if(B.minValue===0&&A<0){E.push(this.negativeText)}else{if(A<B.minValue){E.push(D(B.minText,B.minValue))}}if(A>B.maxValue){E.push(D(B.maxText,B.maxValue))}return E},rawToValue:function(B){var A=this.fixPrecision(this.parseValue(B));if(A===null){A=B||null}return A},valueToRaw:function(C){var B=this,A=B.decimalSeparator;C=B.parseValue(C);C=B.fixPrecision(C);C=Ext.isNumber(C)?C:parseFloat(String(C).replace(A,"."));C=isNaN(C)?"":String(C).replace(".",A);return C},getSubmitValue:function(){var A=this,B=A.callParent();if(!A.submitLocaleSeparator){B=B.replace(A.decimalSeparator,".")}return B},onChange:function(B){var A=this.ariaEl.dom;this.toggleSpinners();this.callParent(arguments);if(A){if(Ext.isNumber(B)&&isFinite(B)){A.setAttribute("aria-valuenow",B)}else{A.removeAttribute("aria-valuenow")}}},toggleSpinners:function(){var C=this,D=C.getValue(),B=D===null,A;if(C.spinUpEnabled||C.spinUpDisabledByToggle){A=B||D<C.maxValue;C.setSpinUpEnabled(A,true)}if(C.spinDownEnabled||C.spinDownDisabledByToggle){A=B||D>C.minValue;C.setSpinDownEnabled(A,true)}},setMinValue:function(D){var B=this,A=B.ariaEl.dom,C,E,A;B.minValue=C=Ext.Number.from(D,Number.NEGATIVE_INFINITY);B.toggleSpinners();if(A){if(C>Number.NEGATIVE_INFINITY){A.setAttribute("aria-valuemin",C)}else{A.removeAttribute("aria-valuemin")}}if(B.disableKeyFilter!==true){E=B.baseChars+"";if(B.allowExponential){E+=B.decimalSeparator+"e+-"}else{if(B.allowDecimals){E+=B.decimalSeparator}if(B.minValue<0){E+="-"}}E=Ext.String.escapeRegex(E);B.maskRe=new RegExp("["+E+"]");if(B.autoStripChars){B.stripCharsRe=new RegExp("[^"+E+"]","gi")}}},setMaxValue:function(B){var A=this.ariaEl.dom,C;this.maxValue=C=Ext.Number.from(B,Number.MAX_VALUE);if(A){if(C<Number.MAX_VALUE){A.setAttribute("aria-valuemax",C)}else{A.removeAttribute("aria-valuemax")}}this.toggleSpinners()},parseValue:function(A){A=parseFloat(String(A).replace(this.decimalSeparator,"."));return isNaN(A)?null:A},fixPrecision:function(D){var C=this,B=isNaN(D),A=C.decimalPrecision;if(B||!D){return B?"":D}else{if(!C.allowDecimals||A<=0){A=0}}return parseFloat(Ext.Number.toFixed(parseFloat(D),A))},onBlur:function(C){var B=this,A=B.rawToValue(B.getRawValue());if(!Ext.isEmpty(A)){B.setValue(A)}B.callParent([C])},setSpinUpEnabled:function(B,A){this.callParent(arguments);if(!A){delete this.spinUpDisabledByToggle}else{this.spinUpDisabledByToggle=!B}},onSpinUp:function(){var A=this;if(!A.readOnly){A.setSpinValue(Ext.Number.constrain(A.getValue()+A.step,A.minValue,A.maxValue))}},setSpinDownEnabled:function(B,A){this.callParent(arguments);if(!A){delete this.spinDownDisabledByToggle}else{this.spinDownDisabledByToggle=!B}},onSpinDown:function(){var A=this;if(!A.readOnly){A.setSpinValue(Ext.Number.constrain(A.getValue()-A.step,A.minValue,A.maxValue))}},setSpinValue:function(B){var A=this;if(A.enforceMaxLength){if(A.fixPrecision(B).toString().length>A.maxLength){return }}A.setValue(B)}})