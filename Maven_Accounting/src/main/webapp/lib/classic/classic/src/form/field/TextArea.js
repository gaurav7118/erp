Ext.define("Ext.form.field.TextArea",{extend:"Ext.form.field.Text",alias:["widget.textareafield","widget.textarea"],alternateClassName:"Ext.form.TextArea",requires:["Ext.XTemplate","Ext.util.DelayedTask"],fieldSubTpl:['<textarea id="{id}" data-ref="inputEl" {inputAttrTpl}','<tpl if="name"> name="{name}"</tpl>','<tpl if="placeholder"> placeholder="{placeholder}"</tpl>','<tpl if="maxLength !== undefined"> maxlength="{maxLength}"</tpl>','<tpl if="readOnly"> readonly="readonly"</tpl>','<tpl if="disabled"> disabled="disabled"</tpl>','<tpl if="tabIdx != null"> tabindex="{tabIdx}"</tpl>',' class="{fieldCls} {typeCls} {typeCls}-{ui} {inputCls}" ','<tpl if="fieldStyle"> style="{fieldStyle}"</tpl>','<tpl foreach="inputElAriaAttributes"> {$}="{.}"</tpl>',' autocomplete="off">\n','<tpl if="value">{[Ext.util.Format.htmlEncode(values.value)]}</tpl>',"</textarea>",{disableFormats:true}],growMin:60,growMax:1000,growAppend:"\n-",enterIsSpecial:false,preventScrollbars:false,returnRe:/\r/g,inputCls:Ext.baseCSSPrefix+"form-textarea",extraFieldBodyCls:Ext.baseCSSPrefix+"form-textarea-body",ariaAttributes:{"aria-multiline":true},constructor:function(A){this.callParent([A]);if(this.cols){Ext.log.warn('Ext.form.field.TextArea "cols" config was removed in Ext 5.0. Please specify a "width" or use a layout instead.')}if(this.rows){Ext.log.warn('Ext.form.field.TextArea "rows" config was removed in Ext 5.0. Please specify a "height" or use a layout instead.')}},getSubTplData:function(B){var D=this,C=D.getFieldStyle(),A=D.callParent(arguments);if(D.grow){if(D.preventScrollbars){A.fieldStyle=(C||"")+";overflow:hidden;height:"+D.growMin+"px"}}return A},afterRender:function(){var A=this;A.callParent(arguments);A.needsMaxCheck=A.enforceMaxLength&&A.maxLength!==Number.MAX_VALUE&&!Ext.supports.TextAreaMaxLength;if(A.needsMaxCheck){A.inputEl.on("paste",A.onPaste,A)}},transformRawValue:function(A){return this.stripReturns(A)},getValue:function(){return this.stripReturns(this.callParent())},valueToRaw:function(A){A=this.stripReturns(A);return this.callParent([A])},stripReturns:function(A){if(A&&typeof A==="string"){A=A.replace(this.returnRe,"")}return A},onPaste:function(){var A=this;if(!A.pasteTask){A.pasteTask=new Ext.util.DelayedTask(A.pasteCheck,A)}A.pasteTask.delay(1)},pasteCheck:function(){var B=this,C=B.getValue(),A=B.maxLength;if(C.length>A){C=C.substr(0,A);B.setValue(C)}},fireKey:function(D){var B=this,A=D.getKey(),C;if(D.isSpecialKey()&&(B.enterIsSpecial||(A!==D.ENTER||D.hasModifier()))){B.fireEvent("specialkey",B,D)}if(B.needsMaxCheck&&A!==D.BACKSPACE&&A!==D.DELETE&&!D.isNavKeyPress()&&!B.isCutCopyPasteSelectAll(D,A)){C=B.getValue();if(C.length>=B.maxLength){D.stopEvent()}}},isCutCopyPasteSelectAll:function(B,A){if(B.ctrlKey){return A===B.A||A===B.C||A===B.V||A===B.X}return false},autoSize:function(){var C=this,E,A,B,D;if(C.grow&&C.rendered&&C.getSizeModel().height.auto){E=C.inputEl;B=E.getWidth(true);D=Ext.util.Format.htmlEncode(E.dom.value)||"&#160;";D+=C.growAppend;D=D.replace(/\n/g,"<br/>");A=Ext.util.TextMetrics.measure(E,D,B).height+E.getPadding("tb")+C.inputWrap.getBorderWidth("tb")+C.triggerWrap.getBorderWidth("tb");A=Math.min(Math.max(A,C.growMin),C.growMax);C.bodyEl.setHeight(A);C.updateLayout();C.fireEvent("autosize",C,A)}},beforeDestroy:function(){var A=this.pasteTask;if(A){A.cancel();this.pasteTask=null}this.callParent()}})