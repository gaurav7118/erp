Ext.define("Ext.layout.container.Column",{extend:"Ext.layout.container.Auto",alias:["layout.column"],alternateClassName:"Ext.layout.ColumnLayout",type:"column",itemCls:Ext.baseCSSPrefix+"column",targetCls:Ext.baseCSSPrefix+"column-layout-ct",clearSide:"left",columnWidthSizePolicy:{readsWidth:0,readsHeight:1,setsWidth:1,setsHeight:0},createsInnerCt:true,manageOverflow:true,setsItemSize:true,needsItemSize:true,isItemShrinkWrap:function(A){return true},getItemSizePolicy:function(A,B){if(A.columnWidth){if(!B){B=this.owner.getSizeModel()}if(!B.width.shrinkWrap){return this.columnWidthSizePolicy}}return this.autoSizePolicy},calculateItems:function(D,A){var N=this,L=N.columnCount,E=D.targetContext,M=D.childItems,J=M.length,B=0,F=A.gotWidth,H,O,G,C,I,K;if(F===false){E.domBlock(N,"width");H=true}else{if(F){O=A.width}else{return true}}for(G=0;G<J;++G){C=M[G];if(L){if(G%L){C.setProp("clear",null)}else{C.setProp("clear",N.clearSide)}}I=C.getMarginInfo().width;if(!C.widthModel.calculated){K=C.getProp("width");if(typeof K!=="number"){C.block(N,"width");H=true}B+=K+I}}if(!H){O=(O<B)?0:O-B;for(G=0;G<J;++G){C=M[G];if(C.widthModel.calculated){I=C.marginInfo.width;K=C.target.columnWidth;K=Math.floor(K*O)-I;K=C.setWidth(K);B+=K+I}}D.setContentWidth(B+D.paddingContext.getPaddingInfo().width)}return !H}})