Ext.define("Ext.panel.Tool",{extend:"Ext.Component",uses:["Ext.tip.QuickTipManager"],xtype:"tool",isTool:true,baseCls:Ext.baseCSSPrefix+"tool",disabledCls:Ext.baseCSSPrefix+"tool-disabled",toolPressedCls:Ext.baseCSSPrefix+"tool-pressed",toolOverCls:Ext.baseCSSPrefix+"tool-over",childEls:["toolEl"],renderTpl:['<div id="{id}-toolEl" data-ref="toolEl" class="{baseCls}-img {baseCls}-{type}{childElCls}" role="presentation"></div>'],toolOwner:null,tooltipType:"qtip",stopEvent:true,ariaRole:"button",focusable:true,tabIndex:0,keyHandlers:{SPACE:"onClick",ENTER:"onClick"},cacheHeight:true,cacheWidth:true,_toolTypes:{close:1,collapse:1,down:1,expand:1,gear:1,help:1,left:1,maximize:1,minimize:1,minus:1,next:1,pin:1,plus:1,prev:1,print:1,refresh:1,restore:1,right:1,save:1,search:1,toggle:1,unpin:1,up:1},initComponent:function(){var A=this;if(A.id&&A._toolTypes[A.id]){Ext.raise("When specifying a tool you should use the type option, the id can conflict now that tool is a Component")}A.type=A.type||A.id;Ext.applyIf(A.renderData,{baseCls:A.baseCls,type:A.type});A.tooltip=A.tooltip||A.qtip;A.callParent()},afterRender:function(){var A=this,B;A.callParent(arguments);A.el.on({click:A.onClick,mousedown:A.onMouseDown,mouseover:A.onMouseOver,mouseout:A.onMouseOut,scope:A});B=A.tooltip;if(B){A.setTooltip(B)}},tipAttrs:{qtip:"data-qtip"},setTooltip:function(G,D){var E=this,B=E.tooltip,F=E.tooltipType,H=E.id,C=E.el,A;if(B&&Ext.quickTipsActive&&Ext.isObject(B)){Ext.tip.QuickTipManager.unregister(H)}E.tooltip=G;if(D){E.tooltipType=D}if(G){if(Ext.quickTipsActive&&Ext.isObject(G)){Ext.tip.QuickTipManager.register(Ext.apply({target:H},G))}else{if(C){if(D&&F&&D!==F){A=E.tipAttrs[F]||"title";C.dom.removeAttribute(A)}A=E.tipAttrs[D||F]||"title";C.dom.setAttribute(A,G)}}if(A!=="title"&&E.ariaRole&&E.ariaRole!=="presentation"){if(C){C.dom.setAttribute("aria-label",G)}else{E.ariaRenderAttributes=E.ariaRenderAttributes||{};E.ariaRenderAttributes["aria-label"]=G}}}},setType:function(A){var B=this,C=B.type;B.type=A;if(B.rendered){if(C){B.toolEl.removeCls(B.baseCls+"-"+C)}B.toolEl.addCls(B.baseCls+"-"+A)}else{B.renderData.type=A}return B},onDestroy:function(){var A=this,B=A.keyMap;A.setTooltip(null);delete A.toolOwner;A.callParent()},privates:{onClick:function(C,B){var A=this;if(A.disabled){return false}if(C.type!=="keydown"){A.el.removeCls(A.toolPressedCls+" "+A.toolOverCls)}if(A.stopEvent!==false){C.stopEvent()}if(A.handler){Ext.callback(A.handler,A.scope,[C,B,A.ownerCt,A],0,A)}else{if(A.callback){Ext.callback(A.callback,A.scope,[A.toolOwner||A.ownerCt,A,C],0,A)}}A.fireEvent("click",A,C,A.toolOwner||A.ownerCt);return true},onMouseDown:function(A){A.preventDefault();if(this.disabled){return false}this.el.addCls(this.toolPressedCls)},onMouseOver:function(){if(this.disabled){return false}this.el.addCls(this.toolOverCls)},onMouseOut:function(){this.el.removeCls(this.toolOverCls)}}})