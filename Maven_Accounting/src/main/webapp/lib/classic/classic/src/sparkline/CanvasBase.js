Ext.define("Ext.sparkline.CanvasBase",{requires:["Ext.sparkline.Shape"],shapeCount:0,_pxregex:/(\d+)(px)?\s*$/i,constructor:function(A){this.owner=A},setWidth:function(A){this.pixelWidth=A},setHeight:function(A){this.pixelHeight=A},drawLine:function(C,E,B,D,F,A){return this.drawShape([[C,E],[B,D]],F,A)},drawShape:function(C,B,D,A){return this._genShape("Shape",[C,B,D,A])},drawCircle:function(C,F,B,D,E,A){return this._genShape("Circle",[C,F,B,D,E,A])},drawPieSlice:function(B,G,A,D,C,E,F){return this._genShape("PieSlice",[B,G,A,D,C,E,F])},drawRect:function(B,F,C,A,D,E){return this._genShape("Rect",[B,F,C,A,D,E])},getElement:function(){return this.el},getLastShapeId:function(){return this.lastShapeId},reset:function(){Ext.raise("reset not implemented")},_genShape:function(B,A){var C=this.shapeCount++;A.unshift(C);return new Ext.sparkline.Shape(this,C,B,A)},appendShape:function(A){Ext.raise("appendShape not implemented")},replaceWithShape:function(B,A){Ext.raise("replaceWithShape not implemented")},insertAfterShape:function(B,A){Ext.raise("insertAfterShape not implemented")},removeShapeId:function(A){Ext.raise("removeShapeId not implemented")},getShapeAt:function(A,B){Ext.raise("getShapeAt not implemented")},render:function(){Ext.raise("render not implemented")}})