describe("Ext.Editor",function(){var C,F,E;function D(H){C=new Ext.Editor(H);F=C.field}function B(H){E=Ext.getBody().createChild(Ext.apply({tag:"span",html:"Sample Text"},H))}afterEach(function(){Ext.destroy(C,E);E=F=C=null});function G(H){B();if(arguments.length){C.startEdit(E,H)}else{C.startEdit(E)}}function A(H){jasmine.fireKeyEvent(F.inputEl,"keydown",H)}describe("field creation",function(){it("should create a text field by default",function(){D();expect(F.$className).toBe("Ext.form.field.Text")});it("should accept a string xtype",function(){D({field:"datefield"});expect(F.$className).toBe("Ext.form.field.Date")});it("should accept a config without xtype and default to a text field",function(){D({field:{maxLength:10}});expect(F.$className).toBe("Ext.form.field.Text");expect(F.maxLength).toBe(10)});it("should accept an object config including xtype",function(){D({field:{xtype:"numberfield",maxValue:20}});expect(F.$className).toBe("Ext.form.field.Number");expect(F.maxValue).toBe(20)})});describe("getValue/setValue",function(){it("should get the value from the underlying field",function(){D();G();C.field.setValue("asdf");expect(C.getValue()).toBe("asdf")});it("should set the value on the underlying field",function(){D();G();C.setValue("foo");expect(C.getValue()).toBe("foo")})});describe("startEdit",function(){describe("basic functionality",function(){it("should show the editor",function(){D();G();expect(C.isVisible()).toBe(true)});it("should set the editing property to true",function(){D();G();expect(C.editing).toBe(true)});(Ext.isWebKit?it:xit)("should focus the field",function(){D();G();waitsFor(function(){return F.hasFocus},"Field never focused");runs(function(){expect(F.hasFocus).toBe(true)})});it("should complete an existing edit when starting",function(){D({updateEl:true});G();C.setValue("Foo");C.startEdit(E);expect(E.getHtml()).toBe("Foo")})});describe("positioning",function(){it("should align to c-c as the default",function(){D();G();expect(C.getXY()).toEqual([0,0])});it("should use another alignment",function(){D({alignment:"tl-br"});G();var H=E.getSize();expect(C.getXY()).toEqual([H.width,H.height])});it("should use offsets",function(){D({alignment:"tl-tl",offsets:[20,30]});G();expect(C.getXY()).toEqual([20,30])});it("should use a combination of alignment & offsets",function(){D({alignment:"tl-br",offsets:[20,30]});G();var H=E.getSize();expect(C.getXY()).toEqual([H.width+20,H.height+30])})});describe("boundEl",function(){it("should accept an Ext.dom.Element",function(){D();B();C.startEdit(E);expect(F.getValue()).toBe("Sample Text")});it("should accept an HtmlElement",function(){D();B();C.startEdit(E.dom);expect(F.getValue()).toBe("Sample Text")});it("should accept an id",function(){D();B();C.startEdit(E.id);expect(F.getValue()).toBe("Sample Text")})});describe("value",function(){it("should take the value from the element by default",function(){D();G();expect(F.getValue()).toBe("Sample Text")});it("should use the passed value",function(){D();G("Foo");expect(F.getValue()).toBe("Foo")});it("should retain the type of the passed value",function(){var H=new Date();D({field:"datefield"});spyOn(F,"setValue");G(H);expect(F.setValue).toHaveBeenCalledWith(H)})});describe("the field",function(){it("should not fire the change event",function(){D();var H=jasmine.createSpy();F.on("change",H);G();expect(H).not.toHaveBeenCalled()});it("should not be dirty",function(){D();G();expect(F.isDirty()).toBe(false)})});describe("hideEl",function(){it("should hide the el with hideEl: true",function(){D({hideEl:true});G();expect(E.isVisible()).toBe(false)});it("should not hide the el with hideEl: false",function(){D({hideEl:false});G();expect(E.isVisible()).toBe(true)})});describe("events",function(){var H;beforeEach(function(){H=jasmine.createSpy()});afterEach(function(){H=null});it("should fire beforestartedit and pass the editor, boundEl & value",function(){D();C.on("beforestartedit",H);G();expect(H).toHaveBeenCalled();var I=H.mostRecentCall.args;expect(I[0]).toBe(C);expect(I[1]).toBe(E);expect(I[2]).toBe("Sample Text")});it("should fire startedit and pass the editor, boundEl & value",function(){D();C.on("startedit",H);G();expect(H).toHaveBeenCalled();var I=H.mostRecentCall.args;expect(I[0]).toBe(C);expect(I[1]).toBe(E);expect(I[2]).toBe("Sample Text")});it("should not show or set to editing if it returns false",function(){var I=jasmine.createSpy();D();B();C.on("beforestartedit",H.andReturn(false));C.on("startedit",I);C.startEdit(E);expect(C.isVisible()).toBe(false);expect(C.editing).toBe(false);expect(I).not.toHaveBeenCalled()})})});describe("completeEdit",function(){it("should not cause an exception if not editing",function(){D();expect(function(){C.completeEdit()}).not.toThrow()});it("should hide the editor and set editing to false",function(){D();G();C.completeEdit();expect(C.isVisible()).toBe(false);expect(C.editing).toBe(false)});describe("validity",function(){describe("with revertInvalid: false",function(){it("should not complete the edit if the field is not valid",function(){D({revertInvalid:false,field:{allowBlank:false}});G("");C.completeEdit();expect(C.editing).toBe(true);expect(C.isVisible()).toBe(true);expect(C.getValue()).toBe("")})});describe("with revertInvalid: true",function(){it("should cancel the edit if the field is not valid",function(){D({revertInvalid:true,field:{allowBlank:false}});G();F.setValue("");C.completeEdit();expect(C.getValue()).toBe("Sample Text");expect(C.editing).toBe(false);expect(C.isVisible()).toBe(false)})})});describe("hideEl",function(){it("should not show the boundEl if complete is vetoed with revertInvalid: false",function(){D({revertInvalid:false,field:{allowBlank:false}});G("");C.completeEdit();expect(E.isVisible()).toBe(false)});it("should show the boundEl if complete is vetoed with revertInvalid: true",function(){D({revertInvalid:true,field:{allowBlank:false}});G("");C.completeEdit();expect(E.isVisible()).toBe(true)});it("should show the boundEl if complete is successful",function(){D({revertInvalid:true,field:{allowBlank:false}});G("Foo");C.completeEdit();expect(E.isVisible()).toBe(true)})});describe("remainVisible",function(){it("should leave the editor visible with remainVisible",function(){D();G();C.completeEdit(true);expect(C.isVisible()).toBe(true);expect(C.editing).toBe(false)});it("should leave the editor visible with remainVisible when the edit is cancelled for being invalid",function(){D({revertInvalid:true,field:{allowBlank:true}});G("");C.completeEdit(true);expect(C.isVisible()).toBe(true);expect(C.editing).toBe(false)})});describe("updateEl",function(){it("should set the html if the boundEl with updateEl: true",function(){D({updateEl:true});G("Foo");C.completeEdit();expect(E.getHtml()).toBe("Foo")});it("should not set the html if the boundEl with updateEl: false",function(){D({updateEl:false});G("Foo");C.completeEdit();expect(E.getHtml()).toBe("Sample Text")})});(Ext.isGecko?xdescribe:describe)("allowBlur",function(){it("should not complete on blur with allowBlur: false",function(){D({allowBlur:false});G();spyOn(C,"completeEdit").andCallThrough();waitsFor(function(){return F.hasFocus},"Field never focused");runs(function(){Ext.getBody().createChild({tag:"input",type:"text"}).focus().remove()});waitsFor(function(){return !F.hasFocus},"Field never blurred");runs(function(){expect(C.completeEdit).not.toHaveBeenCalled()})});it("should complete on blur with allowBlur: true",function(){D({allowBlur:true});G();spyOn(C,"completeEdit").andCallThrough();waitsFor(function(){return F.hasFocus},"Field never focused");runs(function(){Ext.getBody().createChild({tag:"input",type:"text"}).focus().remove()});waitsFor(function(){return !F.hasFocus},"Field never blurred");runs(function(){expect(C.completeEdit).toHaveBeenCalled()})})});(Ext.isGecko?xdescribe:describe)("completeOnEnter",function(){it("should not complete on enter with completeOnEnter: false",function(){D({completeOnEnter:false});C.specialKeyDelay=0;G();spyOn(C,"completeEdit").andCallThrough();waitsFor(function(){return F.hasFocus},"Field never focused");runs(function(){A(Ext.event.Event.ENTER);expect(C.completeEdit).not.toHaveBeenCalled()})});it("should complete on enter with completeOnEnter: true",function(){D({completeOnEnter:true});C.specialKeyDelay=0;G();spyOn(C,"completeEdit").andCallThrough();waitsFor(function(){return F.hasFocus},"Field never focused");runs(function(){A(Ext.event.Event.ENTER);expect(C.completeEdit).toHaveBeenCalled()})})});describe("events",function(){var H;beforeEach(function(){H=jasmine.createSpy()});afterEach(function(){H=null});it("should fire beforecomplete & pass the editor, value & start value",function(){D();C.on("beforecomplete",H);G();F.setValue("ASDF");C.completeEdit();expect(H).toHaveBeenCalled();var I=H.mostRecentCall.args;expect(I[0]).toBe(C);expect(I[1]).toBe("ASDF");expect(I[2]).toBe("Sample Text")});it("should fire the complete event & pass the editor, value & start value",function(){D();C.on("complete",H);G();F.setValue("ASDF");C.completeEdit();expect(H).toHaveBeenCalled();var I=H.mostRecentCall.args;expect(I[0]).toBe(C);expect(I[1]).toBe("ASDF");expect(I[2]).toBe("Sample Text")});it("should not fire beforecomplete/complete if not editing",function(){D();C.on("beforecomplete",H);C.on("complete",H);C.completeEdit();expect(H).not.toHaveBeenCalled()});describe("vetoing beforecomplete",function(){it("should not fire complete",function(){var I=jasmine.createSpy();D();C.on("beforecomplete",H.andReturn(false));C.on("complete",I);G("Value");C.completeEdit();expect(I).not.toHaveBeenCalled()});it("should not update the boundEl",function(){D();C.on("beforecomplete",H.andReturn(false));G("Value");C.completeEdit();expect(E.getHtml()).toBe("Sample Text")})});describe("invalid values",function(){it("should not fire beforecomplete/complete if the value is invalid with revertInvalid: false",function(){D({revertInvalid:false,field:{allowBlank:false}});C.on("beforecomplete",H);C.on("complete",H);G("");C.completeEdit();expect(H).not.toHaveBeenCalled()});it("should not fire beforecomplete/complete if the value is invalid with revertInvalid: true",function(){D({revertInvalid:true,field:{allowBlank:false}});C.on("beforecomplete",H);C.on("complete",H);G("");C.completeEdit();expect(H).not.toHaveBeenCalled()})});describe("ignoreNoChange",function(){it("should not fire beforecomplete/complete if the value did not change with ignoreNoChange: true",function(){D({ignoreNoChange:true});C.on("beforecomplete",H);C.on("complete",H);G();C.completeEdit();expect(H).not.toHaveBeenCalled()});it("should fire beforecomplete/complete if the value did not change with ignoreNoChange: true",function(){var I=jasmine.createSpy();D({ignoreNoChange:false});C.on("beforecomplete",H);C.on("complete",I);G();C.completeEdit();expect(H).toHaveBeenCalled();expect(I).toHaveBeenCalled()})})})});describe("cancelEdit",function(){it("should not cause an error when not editing",function(){D();expect(function(){C.cancelEdit()}).not.toThrow()});it("should hide the editor & set editing to false",function(){D();G();C.cancelEdit();expect(C.isVisible()).toBe(false);expect(C.editing).toBe(false)});it("should set the original value on the field and not fire the change event",function(){D();G();C.setValue("Foo");var H=jasmine.createSpy();F.on("change",H);C.cancelEdit();expect(C.getValue()).toBe("Sample Text");expect(H).not.toHaveBeenCalled()});describe("with updateEl",function(){it("should not update the boundEl",function(){D();G();C.setValue("Foo");C.cancelEdit();expect(E.getHtml()).toBe("Sample Text")})});(Ext.isGecko?xdescribe:describe)("cancelOnEsc",function(){it("should not cancel on esc key with cancelOnEsc: false",function(){D({cancelOnEsc:false});C.specialKeyDelay=0;G();spyOn(C,"cancelEdit").andCallThrough();waitsFor(function(){return F.hasFocus},"Field never focused");runs(function(){A(Ext.event.Event.ESC);expect(C.cancelEdit).not.toHaveBeenCalled()})});it("should cancel on esc key with cancelOnEsc: true",function(){D({cancelOnEsc:true});C.specialKeyDelay=0;G();spyOn(C,"cancelEdit").andCallThrough();waitsFor(function(){return F.hasFocus},"Field never focused");runs(function(){A(Ext.event.Event.ESC);expect(C.cancelEdit).toHaveBeenCalled()})})});describe("hideEl",function(){it("should show the boundEl",function(){D();G();C.cancelEdit();expect(E.isVisible()).toBe(true)})});describe("remainVisible",function(){it("should leave the editor visible with remainVisible",function(){D();G();C.cancelEdit(true);expect(C.isVisible()).toBe(true)})});describe("events",function(){it("should fire canceledit and pass the editor, current value & start value",function(){var I=jasmine.createSpy();D();G();C.setValue("foo");C.on("canceledit",I);C.cancelEdit();expect(I).toHaveBeenCalled();var H=I.mostRecentCall.args;expect(H[0]).toBe(C);expect(H[1]).toBe("foo");expect(H[2]).toBe("Sample Text")});it("should not fire canceledit if not editing",function(){var H=jasmine.createSpy();D();C.on("canceledit",H);C.cancelEdit();expect(H).not.toHaveBeenCalled()})})})})