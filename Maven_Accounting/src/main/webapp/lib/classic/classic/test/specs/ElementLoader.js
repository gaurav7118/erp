describe("Ext.ElementLoader",function(){var B,F,G,D,C,A,E;beforeEach(function(){MockAjaxManager.addMethods();E=Ext.getBody().createChild({id:"elementloader"});C=function(H){H=H||{};Ext.applyIf(H,{url:"url",target:E});A=new Ext.ElementLoader(H)};D=function(I,H){Ext.Ajax.mockComplete({status:H||200,responseText:I||"response"})};F=function(I,H){A.load(H);D(I)};G=function(I,H){A.load(H);D(I,500)};B=function(){return Ext.Ajax.mockGetRequestXHR().options}});afterEach(function(){MockAjaxManager.removeMethods();if(E){E.remove()}if(A){A.destroy()}B=G=F=D=C=A=E=null});describe("defaults",function(){beforeEach(function(){A=new Ext.ElementLoader()});it("should have a null url",function(){expect(A.url).toBeNull()});it("should have null params",function(){expect(A.params).toBeNull()});it("should have null baseParams",function(){expect(A.baseParams).toBeNull()});it("should have autoLoad set as false",function(){expect(A.autoLoad).toBeFalsy()});it("should have a null target",function(){expect(A.target).toBeNull()});it("should set loadMask to false",function(){expect(A.loadMask).toBeFalsy()});it("should have null ajax options",function(){expect(A.ajaxOptions).toBeNull()});it("should not have a callback function",function(){expect(A.callback).toBeUndefined()});it("should not have a success function",function(){expect(A.success).toBeUndefined()});it("should not have a failure function",function(){expect(A.failure).toBeUndefined()});it("should not have a scope",function(){expect(A.scope).toBeUndefined()});it("should default scripts to false",function(){expect(A.scripts).toBeFalsy()})});describe("masking",function(){it("should not mask by default",function(){C();A.load();expect(E.isMasked()).toBe(false)});xit("should unmask after the request completes",function(){C({loadMask:true});A.load();expect(E.isMasked()).toBe(true);D();expect(E.isMasked()).toBe(false)});it("should accept a masking message",function(){C({loadMask:"Waiting"});A.load();expect(E.down(".x-mask-msg",true).firstChild.firstChild).hasHTML("Waiting");D()});xit("should use the masking load option",function(){C();A.load({loadMask:true});expect(E.isMasked()).toBe(true);D()});it("should give precedence to the load option",function(){C({loadMask:"Waiting"});A.load({loadMask:"Other"});expect(E.down(".x-mask-msg",true).firstChild.firstChild).hasHTML("Other");D()})});describe("url",function(){it("should throw an exception if there's no url",function(){A=new Ext.ElementLoader({target:E});expect(function(){A.load()}).toRaiseExtError("You must specify the URL from which content should be loaded")});it("should use the url in the config",function(){C();A.load();expect(B().url).toEqual("url")});it("should use the url in the load options",function(){A=new Ext.ElementLoader({target:E});A.load({url:"other"});expect(B().url).toEqual("other")});it("should give precedence to the url in the load options",function(){C();A.load({url:"other"});expect(B().url).toEqual("other")})});describe("params/baseParams",function(){var H;beforeEach(function(){H=function(I,J,K){C(J||{});A.load(K||{});expect(B().params).toEqual(I)}});afterEach(function(){H=false});it("should send no params by default",function(){H({})});it("should send along baseParams",function(){H({p1:1,p2:"param2"},{baseParams:{p1:1,p2:"param2"}})});it("should send along params",function(){H({p1:2,p2:"param1"},{params:{p1:2,p2:"param1"}})});it("should combine params and baseParams",function(){H({p1:1,p2:2},{baseParams:{p2:2},params:{p1:1}})});it("should favour baseParams over params",function(){H({p1:1},{baseParams:{p1:1},params:{p1:2}})});it("should use params specified in the options",function(){H({p1:1},null,{params:{p1:1}})});it("should combine baseParams with load params",function(){H({p1:"some",p2:"param"},{baseParams:{p1:"some"}},{params:{p2:"param"}})});it("should combine config params with load params",function(){H({p1:"some",p2:"param"},{params:{p1:"some"}},{params:{p2:"param"}})});it("should favour the load params over the config params",function(){H({p1:"param"},{params:{p1:"some"}},{params:{p1:"param"}})});it("should prefer baseParams over load params",function(){H({p1:"favoured"},{baseParams:{p1:"favoured"}},{params:{p1:"other"}})});it("should combine all 3 together",function(){H({p1:1,p2:2,p3:3},{baseParams:{p1:1},params:{p2:2}},{params:{p3:3}})})});describe("autoLoad",function(){it("should automatically load when autoLoad is set",function(){C({autoLoad:true});D();expect(E.dom).hasHTML("response")});it("should accept options for the request",function(){C({autoLoad:{params:{p1:1}}});expect(B().params).toEqual({p1:1})})});describe("ajaxOptions",function(){it("should pass no options by default",function(){C();A.load();expect(B().timeout).toBeUndefined()});it("should include any default options",function(){C({ajaxOptions:{timeout:10000}});A.load();expect(B().timeout).toEqual(10000)});it("should include any options specified in the load",function(){C();A.load({ajaxOptions:{timeout:10000}});expect(B().timeout).toEqual(10000)});it("should combine options from the config and on the load",function(){C({ajaxOptions:{username:"user"}});A.load({ajaxOptions:{timeout:10000}});expect(B().timeout).toEqual(10000);expect(B().username).toEqual("user")});it("should give precedence to ajax options on the load",function(){C({ajaxOptions:{timeout:10000}});A.load({ajaxOptions:{timeout:5000}});expect(B().timeout).toEqual(5000)})});describe("target",function(){var H;beforeEach(function(){H=Ext.ElementLoader});afterEach(function(){H=null});it("should take the target from the config object",function(){C();expect(A.getTarget()).toEqual(E)});it("should take a string config",function(){A=new H({target:"elementloader"});expect(A.getTarget()).toEqual(E)});it("should take a dom object config",function(){A=new H({target:E.dom});expect(A.getTarget()).toEqual(E)});it("should assign the target",function(){A=new H();A.setTarget(E);expect(A.getTarget()).toEqual(E)});it("should assign a new target",function(){var I=Ext.getBody().createChild();C();A.setTarget(I);expect(A.getTarget()).toEqual(I);I.remove()});it("should assign a new target via id",function(){A=new H();A.setTarget("elementloader");expect(A.getTarget()).toEqual(E)});it("should assign a new target via DOM element",function(){A=new H();A.setTarget(E.dom);expect(A.getTarget()).toEqual(E)});it("should return null if there is no target",function(){A=new H();expect(A.getTarget()).toBeNull()});it("should abort any active request if the target changes",function(){var I=Ext.getBody().createChild(),J={fn:function(){}};spyOn(J,"fn").andCallThrough();C();A.load({success:J.fn});A.setTarget(I);expect(J.fn).not.toHaveBeenCalled();I.remove()});it("should throw an exception if no target is specified",function(){A=new H({url:"url"});expect(function(){A.load()}).toRaiseExtError("A valid target is required when loading content")})});describe("renderers",function(){it("should update the target with the response text",function(){C();F("New content");expect(E.dom).hasHTML("New content")});describe("scripts",function(){afterEach(function(){try{delete window.ElementLoaderTest}catch(H){window.ElementLoaderTest=undefined}});it("should process inline scripts",function(){C({scripts:true});runs(function(){F('<script type="text/javascript">window.ElementLoaderTest = true;<\/script>')});waitsFor(function(){return window.ElementLoaderTest===true},"Script never executed")});it("should process external scripts",function(){C({scripts:true});runs(function(){F('<script type="text/javascript" src="../resources/ExternalScript.js"><\/script>')});waitsFor(function(){return window.ElementLoaderTest===true},"Script never executed")});it("should use the scripts load option and give it precedence",function(){C();runs(function(){F('<script type="text/javascript">window.ElementLoaderTest = true;<\/script>',{scripts:true})});waitsFor(function(){return window.ElementLoaderTest===true},"Script never executed")})});describe("custom renderer",function(){it("should use a custom renderer if one is specified",function(){var H={fn:function(I,J,K){I.getTarget().update("This is the "+J.responseText)}};spyOn(H,"fn").andCallThrough();C({renderer:H.fn});F("response");expect(H.fn).toHaveBeenCalled();expect(E.dom).hasHTML("This is the response")});it("should fail if the renderer returns false",function(){var H;C({renderer:function(){return false},callback:function(I,J){H=J}});F();expect(H).toBeFalsy();expect(E.dom).hasHTML("")})});describe("scope",function(){var H;beforeEach(function(){H=jasmine.createSpy()});it("should default the scope to the loader",function(){C({renderer:H});F();expect(H.mostRecentCall.object).toBe(A)});it("should use a passed scope",function(){var I={};C({renderer:H,rendererScope:I});F();expect(H.mostRecentCall.object).toBe(I)});it("should favour the load scope over a config scope",function(){var J={},I={};C({renderer:H,rendererScope:J});F("",{rendererScope:I});expect(H.mostRecentCall.object).toBe(I)})})});describe("events",function(){var H;beforeEach(function(){H={trueFn:function(I){},falseFn:function(){}};spyOn(H,"trueFn");spyOn(H,"falseFn").andReturn(false)});afterEach(function(){H=null});describe("beforeload",function(){it("should fire the beforeload event",function(){C({listeners:{beforeload:H.trueFn}});A.load();expect(H.trueFn).toHaveBeenCalled()});it("should cancel the load if beforeload returns false",function(){C({listeners:{beforeload:H.falseFn}});A.load();expect(H.falseFn).toHaveBeenCalled();expect(E.dom).hasHTML("")})});describe("load",function(){it("should fire the load event",function(){C({listeners:{load:H.trueFn}});F();expect(H.trueFn).toHaveBeenCalled()});it("should not fire if beforeload returns false",function(){C({listeners:{beforeload:H.falseFn,load:H.trueFn}});A.load();expect(H.trueFn).not.toHaveBeenCalled()});it("should not fire if the ajax request fails",function(){C({listeners:{load:H.trueFn}});G();expect(H.trueFn).not.toHaveBeenCalled()});it("should not fire if the renderer returns false",function(){C({renderer:H.falseFn,listeners:{load:H.trueFn}});F();expect(H.trueFn).not.toHaveBeenCalled()})});describe("exception",function(){it("should fire the exception event",function(){C({listeners:{exception:H.trueFn}});G();expect(H.trueFn).toHaveBeenCalled()});it("should not fire if beforeload returns false",function(){C({listeners:{beforeload:H.falseFn,exception:H.trueFn}});A.load();expect(H.trueFn).not.toHaveBeenCalled()});it("should not fire if the ajax request is successful",function(){C({listeners:{exception:H.trueFn}});F();expect(H.trueFn).not.toHaveBeenCalled()});it("should fire if the renderer returns false",function(){C({renderer:H.falseFn,listeners:{exception:H.trueFn}});F();expect(H.trueFn).toHaveBeenCalled()})})});describe("callbacks",function(){var H,I;beforeEach(function(){I={callback:function(){H=this},success:function(){H=this},failure:function(){H=this},other:function(){}};spyOn(I,"callback").andCallThrough();spyOn(I,"success").andCallThrough();spyOn(I,"failure").andCallThrough();spyOn(I,"other").andCallThrough()});afterEach(function(){H=I=null});describe("scope",function(){it("should default to the loader instance",function(){C({callback:I.callback});F();expect(H).toEqual(A)});it("should use the scope specified on the instance",function(){var J={};C({callback:I.callback,scope:J});F();expect(H).toEqual(J)});it("should use the scope specified in the load options",function(){var J={};C({callback:I.callback});F("",{scope:J});expect(H).toEqual(J)});it("should give precedence to the scope in the options",function(){var K={},J={};C({scope:K,callback:I.callback});F("",{scope:J});expect(H).toEqual(J)})});describe("success",function(){it("should get called with a scope",function(){var J={};C({success:I.success,scope:J});F();expect(H).toEqual(J)});it("should use the function specified in the class config",function(){C({success:I.success});F();expect(I.success).toHaveBeenCalled()});it("should use the function specified in the load options",function(){C();F("",{success:I.success});expect(I.success).toHaveBeenCalled()});it("should give precedence to the function specified in the options",function(){C({success:I.other});F("",{success:I.success});expect(I.success).toHaveBeenCalled();expect(I.other).not.toHaveBeenCalled()});it("should not fire success is the request fails",function(){C({success:I.success});G();expect(I.success).not.toHaveBeenCalled()});it("should not fire success if the renderer returns false",function(){C({success:I.success,renderer:function(){return false}});F();expect(I.success).not.toHaveBeenCalled()});it("should never fire in conjunction with failure",function(){C({success:I.success,failure:I.failure});F();expect(I.success).toHaveBeenCalled();expect(I.failure).not.toHaveBeenCalled()})});describe("failure",function(){it("should get called with a scope",function(){var J={};C({failure:I.failure,scope:J});G();expect(H).toEqual(J)});it("should use the function specified in the class config",function(){C({failure:I.failure});G();expect(I.failure).toHaveBeenCalled()});it("should use the function specified in the load options",function(){C();G("",{failure:I.failure});expect(I.failure).toHaveBeenCalled()});it("should give precedence to the function specified in the options",function(){C({failure:I.other});G("",{failure:I.failure});expect(I.failure).toHaveBeenCalled();expect(I.other).not.toHaveBeenCalled()});it("should not fire failure is the request succeeds",function(){C({failure:I.failure});F();expect(I.failure).not.toHaveBeenCalled()});it("should fire failure if the renderer returns false",function(){C({failure:I.failure,renderer:function(){return false}});F();expect(I.failure).toHaveBeenCalled()});it("should never fire in conjunction with success",function(){C({success:I.success,failure:I.failure});G();expect(I.failure).toHaveBeenCalled();expect(I.success).not.toHaveBeenCalled()})});describe("callback",function(){it("should get called with a scope",function(){var J={};C({callback:I.callback,scope:J});F();expect(H).toEqual(J)});it("should use the function specified in the class config",function(){C({callback:I.callback});F();expect(I.callback).toHaveBeenCalled()});it("should use the function specified in the load options",function(){C();F("",{callback:I.callback});expect(I.callback).toHaveBeenCalled()});it("should give precedence to the function specified in the options",function(){C({callback:I.other});F("",{callback:I.callback});expect(I.callback).toHaveBeenCalled();expect(I.other).not.toHaveBeenCalled()});it("should fire whenever success is fired",function(){C({success:I.success,callback:I.callback});F();expect(I.success).toHaveBeenCalled();expect(I.callback).toHaveBeenCalled()});it("should fire whenever failure is fired",function(){C({failure:I.failure,callback:I.callback});G();expect(I.failure).toHaveBeenCalled();expect(I.callback).toHaveBeenCalled()})})});describe("auto refresh",function(){var H;beforeEach(function(){H=function(I){I.baseObj[I.methodName]=I.originalValue}});afterEach(function(){H=null});it("should pass the options to the load method",function(){C({url:"url"});var J=spyOn(A,"load").andCallFake(function(K){H(J);A.load(K);I=true}),I;A.startAutoRefresh(50,{url:"other"});waitsFor(function(){return I});runs(function(){expect(B().url).toBe("other")})});it("should return false when not auto refreshing",function(){C();expect(A.isAutoRefreshing()).toBe(false)});it("should return true when auto refreshing",function(){C();A.startAutoRefresh(50);expect(A.isAutoRefreshing()).toBe(true)});it("should stop auto refreshing when destroyed",function(){C();A.startAutoRefresh(50);A.destroy();expect(A.isAutoRefreshing()).toBe(false)});it("should stop refreshing when stopAutoRefresh is called",function(){C();A.startAutoRefresh(50);A.stopAutoRefresh();expect(A.isAutoRefreshing()).toBe(false)})})})