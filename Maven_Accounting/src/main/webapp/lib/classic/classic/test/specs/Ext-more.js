describe("Ext-more",function(){describe("Ext.id",function(){var A;describe("if element passed as first argument is different of document or window",function(){beforeEach(function(){A=document.createElement("div");document.body.appendChild(A)});afterEach(function(){Ext.getBody().dom.removeChild(A)});it("should generate an unique id for the element with default prefix ext-element-",function(){expect(Ext.id(A)).toEqual("ext-element-"+Ext.idSeed)});it("should generate an unique id for the element with custom prefix",function(){var B="nico-yhwh";expect(Ext.id(A,B)).toEqual(B+Ext.idSeed)});it("should not override existing id",function(){var B="unchanged";A.id=B;expect(Ext.id(A)).toEqual(B)})})});describe("Ext.getBody",function(){it("should return current document body as an Ext.Element",function(){expect(Ext.getBody()).toEqual(Ext.get(document.body))})});describe("Ext.getHead",function(){it("should return current document head as an Ext.Element",function(){expect(Ext.getHead()).toEqual(Ext.get(document.getElementsByTagName("head")[0]))})});describe("Ext.getDoc",function(){it("should return the current HTML document object as an Ext.element",function(){expect(Ext.getDoc()).toEqual(Ext.get(document))})});if(Ext.Component){describe("Ext.getCmp",function(){it("should return a component",function(){var A=new Ext.Component({id:"foobar"});expect(Ext.getCmp("foobar")).toBe(A);A.destroy()})})}if(!Ext.isWindows&&!Ext.isMac&&!Ext.isLinux){describe("Ext.getOrientation",function(){it("should return the current orientation of the mobile device",function(){if(window.innerHeight<=window.innerWidth){expect(Ext.getOrientation()).toEqual("landscape")}else{expect(Ext.getOrientation()).toEqual("portrait")}})})}describe("Ext.destroy",function(){var C,B,A;beforeEach(function(){C=jasmine.createSpyObj("o1",["destroy"]);B=jasmine.createSpyObj("o2",["destroy"]);A=jasmine.createSpyObj("o3",["dest"])});it("should destroy an object",function(){Ext.destroy(C);expect(C.destroy).toHaveBeenCalled()});it("should not destroy an object without a destroy method",function(){Ext.destroy(A);expect(A.dest).not.toHaveBeenCalled()});it("should destroy an array of objects",function(){Ext.destroy([C,B,A]);expect(C.destroy).toHaveBeenCalled();expect(B.destroy).toHaveBeenCalled();expect(A.dest).not.toHaveBeenCalled()});it("should destroy multiple objects",function(){Ext.destroy(C,B,A);expect(C.destroy).toHaveBeenCalled();expect(B.destroy).toHaveBeenCalled();expect(A.dest).not.toHaveBeenCalled()});it("should remove dom if object is an Ext.element",function(){var D=Ext.getBody().createChild({id:"to_destroy"});Ext.destroy(D);expect(Ext.fly("to_destroy")).toBeNull()})});describe("Ext.urlAppend",function(){var A="http://example.com/";it("should manage question mark",function(){expect(Ext.urlAppend(A,"test=1")).toEqual("http://example.com/?test=1")});it("should manage ampersand",function(){expect(Ext.urlAppend(A+"?test=1","foo=2")).toEqual("http://example.com/?test=1&foo=2")});it("should return directly url if content is empty",function(){expect(Ext.urlAppend(A)).toEqual(A)})});describe("Ext.getDom",function(){var A;beforeEach(function(){A=Ext.getBody().createChild({id:"elone"})});afterEach(function(){A.destroy()});it("should return a dom element if an Ext.element is passed as first argument",function(){expect(Ext.getDom(A)).toEqual(A.dom)});it("should return a dom element if the string (id) passed as first argument",function(){expect(Ext.getDom("elone")).toEqual(A.dom)})});describe("Ext.removeNode",function(){var A,C,B;beforeEach(function(){A=Ext.getBody().createChild({tag:"span",html:"foobar"});C=A.id;B=A.dom});afterEach(function(){A=C=B=null});if(Ext.isIE8){it("should schedule element for garbage collection",function(){var E=Ext.Element.destroyQueue,D=E.length;Ext.removeNode(B);expect(E.length).toBe(D+1);expect(E[D]).toBe(B)});it("should finally destroy the element after a timeout",function(){runs(function(){Ext.removeNode(B)});waits(32);runs(function(){expect(B.parentNode).toBeFalsy()})})}else{it("should remove a dom element from document",function(){Ext.removeNode(B);expect(B.parentNode).toBeFalsy()})}it("should delete the cache reference",function(){expect(Ext.cache[C]).toBeDefined();Ext.removeNode(A.dom);expect(Ext.cache[C]).toBeUndefined()});it("should remove all listeners from the dom element",function(){var D=jasmine.createSpy();A.on("mouseup",D);Ext.removeNode(B);jasmine.fireMouseEvent(B,"mouseup");expect(D).not.toHaveBeenCalled()})});describe("Ext.addBehaviors",function(){var D,B,A,C;beforeEach(function(){B=Ext.getBody().createChild({tag:"span"});A=Ext.getBody().createChild({tag:"span"});C=Ext.getBody().createChild({cls:"foo"});D=jasmine.createSpy()});afterEach(function(){B.destroy();A.destroy();C.destroy()});it("should apply event listeners to elements by selectors",function(){Ext.addBehaviors({"span @mouseup":D});jasmine.fireMouseEvent(B.dom,"mouseup");jasmine.fireMouseEvent(A.dom,"mouseup");jasmine.fireMouseEvent(C.dom,"mouseup");expect(D.calls.length).toEqual(2)});it("should manage multiple selectors",function(){Ext.addBehaviors({"span, div.foo @mouseup":D});jasmine.fireMouseEvent(B.dom,"mouseup");jasmine.fireMouseEvent(A.dom,"mouseup");jasmine.fireMouseEvent(C.dom,"mouseup");expect(D.calls.length).toEqual(3)})});xdescribe("Ext.getScrollBarWidth",function(){it("should return a number between 10 and 40 (we assume that document is loaded)",function(){expect(Ext.getScrollBarWidth()>10).toBe(true);expect(Ext.getScrollBarWidth()<40).toBe(true)})});describe("Ext.copyToIf",function(){it("should not overwrite defined properties",function(){var A={a:1,b:undefined};Ext.copyToIf(A,{a:2,b:3,c:4},"a,b,c");expect(A.a).toBe(1);expect(A.b).toBe(3);expect(A.c).toBe(4)})});describe("Ext.copyIf",function(){it("should not overwrite existing properties",function(){var A={a:1,b:undefined};Ext.copyIf(A,{a:2,b:3,c:4},"a,b,c");expect(A.a).toBe(1);expect(A.b).toBeUndefined();expect(A.c).toBe(4)})});describe("Ext.copyTo",function(){var B,A;beforeEach(function(){B={a:1,b:2,c:3,d:4};A={}});afterEach(function(){B=null;A=null});describe("with an array of named properties",function(){it("should copy a set of named properties fom the source object to the destination object.",function(){Ext.copyTo(A,B,["a","b","e"]);expect(A).toEqual({a:1,b:2})})});describe("with a string list of named properties",function(){it("should copy a set of named properties fom the source object to the destination object.",function(){Ext.copyTo(A,B,"c,b,e");expect(A).toEqual({b:2,c:3})})});describe("including prototype properties",function(){var C=function(D){Ext.apply(this,D)};C.prototype={prototypeProperty:"I'm from the prototype"};beforeEach(function(){B=new C({a:1,b:2,c:3,d:4})});it("should not copy prototype properties unless asked",function(){Ext.copyTo(A,B,"a,nonExistent,prototypeProperty");expect(A).toEqual({a:1})});it("should copy prototype properties when asked",function(){Ext.copyTo(A,B,"a,nonExistent,prototypeProperty",true);expect(A).toEqual({a:1,prototypeProperty:"I'm from the prototype"});expect("nonExistent" in A).toBe(true);expect(A.nonExistent).toBeUndefined()})})});describe("Ext.copy",function(){var B,A;beforeEach(function(){B={a:1,b:2,c:3,d:4};A={}});afterEach(function(){B=null;A=null});describe("with an array of named properties",function(){it("should copy a set of named properties fom the source object to the destination object.",function(){Ext.copy(A,B,["a","b","e"]);expect(A).toEqual({a:1,b:2})})});describe("with a string list of named properties",function(){it("should copy a set of named properties fom the source object to the destination object.",function(){Ext.copy(A,B,"c,b,e");expect(A).toEqual({b:2,c:3})})});describe("including prototype properties",function(){var C=function(D){Ext.apply(this,D)};C.prototype={prototypeProperty:"I'm from the prototype"};beforeEach(function(){B=new C({a:1,b:2,c:3,d:4})});it("should not copy prototype properties unless asked",function(){Ext.copy(A,B,"a,nonExistent,prototypeProperty");expect(A).toEqual({a:1})});it("should copy prototype properties when asked",function(){Ext.copy(A,B,"a,nonExistent,prototypeProperty",true);expect(A).toEqual({a:1,prototypeProperty:"I'm from the prototype"});expect("nonExistent" in A).toBe(false)})})});describe("Ext.destroyMembers",function(){var B,A;beforeEach(function(){A={destroy:jasmine.createSpy()};B={a:1,b:2,c:3,d:4,me:A}});it("should remove named properties from a passed object",function(){Ext.destroyMembers(B,"a","c","i");expect(B).toEqual({a:null,b:2,c:null,d:4,me:A})});it("should attempt to destroy passed properties",function(){Ext.destroyMembers(B,"a","c","me");expect(A.destroy).toHaveBeenCalled()})});describe("Ext.escapeId",function(){it("should escape element id sequences with special characters",function(){expect(Ext.escapeId("abcdef")).toBe("abcdef");expect(Ext.escapeId(".abcdef")).toBe("\\.abcdef");expect(Ext.escapeId("0a...")).toBe("\\0030 a\\.\\.\\.");expect(Ext.escapeId("12345")).toBe("\\0031 2345");expect(Ext.escapeId(".abc-def")).toBe("\\.abc\\-def");expect(Ext.escapeId("<12345/>")).toBe("\\<12345\\/\\>");expect(Ext.escapeId("1<>234.567")).toBe("\\0031 \\<\\>234\\.567")})});describe("Ext.application",function(){beforeEach(function(){spyOn(Ext.Loader,"setPath").andReturn()});afterEach(function(){Ext.undefine("Test.$application");Ext.undefine("Test");try{delete window.Test}catch(A){window.Test=undefined}});it("should set application path",function(){Ext.application({name:"Test",appFolder:"fooFolder"});expect(Ext.Loader.setPath).toHaveBeenCalledWith("Test","fooFolder")});it("should process appFolder and paths array",function(){Ext.application({name:"Test",appFolder:"barFolder",paths:{baz:"bazFolder",qux:"quxFolder"}});var A=Ext.Loader.setPath.argsForCall;expect(A).toEqual([["Test","barFolder"],["baz","bazFolder"],["qux","quxFolder"]])})});describe("Ext.splitAndUnescape",function(){var B=Ext.splitAndUnescape,A;it("should return an empty array when origin string is empty",function(){A=B("",",");expect(A).toEqual([])});it("should return the origin when delimiter is empty",function(){A=B("foo","");expect(A).toEqual(["foo"])});it("should split on delimiter",function(){A=B("foo,bar",",");expect(A).toEqual(["foo","bar"])});it("should not split on escaped delimiter",function(){A=B("foo\\,bar",",");expect(A).toEqual(["foo,bar"])});it("should not choke on a mix of escaped and unescaped delimiters",function(){A=B("foo\\,bar,baz\\,qux",",");expect(A).toEqual(["foo,bar","baz,qux"])});it("should allow front unescaped delimiter",function(){A=B(",foo",",");expect(A).toEqual(["","foo"])});it("should allow dangling unescaped delimiter",function(){A=B("foo,",",");expect(A).toEqual(["foo",""])});it("should allow front escaped delimiter",function(){A=B("\\,foo",",");expect(A).toEqual([",foo"])});it("should allow dangling escaped delimiter",function(){A=B("foo\\,",",");expect(A).toEqual(["foo,"])})})})