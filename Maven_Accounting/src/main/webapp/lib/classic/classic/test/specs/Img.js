describe("Ext.Img",function(){var B,A;function C(F){B=new Ext.Img(Ext.apply({},F))}function E(F){B=new Ext.Img(Ext.apply({renderTo:Ext.getBody(),alt:"Image"},F))}function D(F,G){jasmine.expectAriaAttr(B,F,G)}beforeEach(function(){A=Ext._glyphFontFamily;Ext._glyphFontFamily="FooFont"});afterEach(function(){Ext._glyphFontFamily=A;Ext.destroy(B);A=B=null});describe("glyph",function(){function G(H){expect(B.el.dom.innerHTML.charCodeAt(0)).toBe(H)}function F(H){expect(B.el.getStyle("font-family")).toBe(H)}describe("initial configuration",function(){it("should set a numeric glyph & use the default font family",function(){E({glyph:1234});G(1234);F("FooFont")});it("should accept a string glyph & use the default font family",function(){E({glyph:"2345"});G(2345);F("FooFont")});it("should accept a string glyph with the font family",function(){E({glyph:"3456@BarFont"});G(3456);F("BarFont")});it("should not override other font styles",function(){E({glyph:"1234@BarFont",style:"font-size: 40px;"});G(1234);F("BarFont");expect(B.el.getStyle("font-size")).toBe("40px")});it("should have img role",function(){E({glyph:"1234"});D("role","img")})});describe("setGlyph",function(){describe("before render",function(){it("should be able to overwrite a glyph",function(){E({renderTo:null,glyph:"4321"});B.setGlyph(1234);B.render(Ext.getBody());G(1234);F("FooFont")});it("should be able to overwrite a glyph with a font family",function(){E({renderTo:null,glyph:"4321@BarFont"});B.setGlyph("1234@BazFont");B.render(Ext.getBody());G(1234);F("BazFont")});it("should not overwrite other font styles",function(){E({renderTo:null,glyph:"4321",style:"font-size: 32px;"});B.setGlyph("1234@BarFont");B.render(Ext.getBody());G(1234);F("BarFont");expect(B.el.getStyle("font-size")).toBe("32px")})});describe("after render",function(){it("should be able to overwrite a glyph",function(){E({glyph:"4321"});B.setGlyph(1234);G(1234);F("FooFont")});it("should be able to overwrite a glyph with a font family",function(){E({glyph:"4321@BarFont"});B.setGlyph("1234@BazFont");G(1234);F("BazFont")});it("should use the default font if initially configured with a font and a new one is not provided",function(){E({glyph:"4321@BarFont"});B.setGlyph("1234");G(1234);F("FooFont")});it("should not overwrite other font styles",function(){E({glyph:"4321",style:"font-size: 32px;"});B.setGlyph("1234@BarFont");G(1234);F("BarFont");expect(B.el.getStyle("font-size")).toBe("32px")})})})});describe("img tag",function(){beforeEach(function(){spyOn(Ext.log,"warn");B=new Ext.Img({renderTo:Ext.getBody()})});it("should have default alt attribute",function(){expect(B.el.dom.hasAttribute("alt")).toBe(true)});it("should not have role attribute",function(){expect(B.el.dom.hasAttribute("role")).toBe(false)})});describe("getters and setters",function(){describe("before render",function(){describe("alt attribute",function(){it("should not have default alt value",function(){C();expect(B.getAlt()).toBe("")});it("should be able to set alt value",function(){C();B.setAlt("Test Alt");expect(B.getAlt()).toBe("Test Alt");B.render(document.body);expect(B.el.dom.alt).toBe("Test Alt")})});describe("title attribute",function(){it("should not have default title value",function(){C();expect(B.getTitle()).toBe("")});it("should be able to set title value",function(){C();B.setTitle("Test Title");expect(B.getTitle()).toBe("Test Title");spyOn(Ext.log,"warn");B.render(document.body);expect(B.el.dom.title).toBe("Test Title")})});describe("src attribute",function(){it("should be able to set src value",function(){C();B.setSrc("sencha.png");expect(B.getSrc()).toBe("sencha.png");spyOn(Ext.log,"warn");B.render(document.body);expect(B.el.dom.src.indexOf("sencha.png")).not.toBe(-1)})});describe("configured values",function(){it("should be created with configured values",function(){C({title:"Testing Initial",alt:"Testing Alt"});expect(B.getTitle()).toBe("Testing Initial");expect(B.getAlt()).toBe("Testing Alt")});it("should be able to clear configured values",function(){C({title:"Testing Initial",alt:"Testing Alt"});B.setTitle();B.setAlt();expect(B.getTitle()).toBe("");expect(B.getAlt()).toBe("");spyOn(Ext.log,"warn");B.render(document.body);expect(B.el.dom.alt).toBe("");expect(B.el.dom.title).toBe("")})})});describe("after render",function(){describe("alt attribute",function(){it("should not have default alt value",function(){spyOn(Ext.log,"warn");B=new Ext.Img({renderTo:document.body});expect(B.el.dom.alt).toBe("")});it("should be able to set alt value",function(){spyOn(Ext.log,"warn");B=new Ext.Img({renderTo:document.body});B.setAlt("Test Alt");expect(B.getAlt()).toBe("Test Alt");expect(B.el.dom.alt).toBe("Test Alt")})});describe("title attribute",function(){it("should not have default title attribute",function(){E();expect(B.el.dom.hasAttribute("title")).toBe(false)});it("should be able to set title value",function(){E();B.setTitle("Test Title");expect(B.getTitle()).toBe("Test Title");expect(B.el.dom.title).toBe("Test Title")})});describe("src attribute",function(){it("should be able to set src value",function(){E();B.setSrc("sencha.png");expect(B.getSrc()).toBe("sencha.png");expect(B.el.dom.src.indexOf("sencha.png")).not.toBe(-1)})});describe("configured values",function(){it("should be created with configured values",function(){E({title:"Testing Initial",alt:"Testing Alt"});expect(B.el.dom.title).toBe("Testing Initial");expect(B.el.dom.alt).toBe("Testing Alt");B.destroy()});it("should be able to clear configured values",function(){E({title:"Testing Initial",alt:"Testing Alt"});B.setTitle();B.setAlt();expect(B.getTitle()).toBe("");expect(B.getAlt()).toBe("");expect(B.el.dom.alt).toBe("");expect(B.el.dom.title).toBe("");B.destroy()})})})})})