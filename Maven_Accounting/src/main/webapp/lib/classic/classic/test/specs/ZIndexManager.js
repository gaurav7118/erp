describe("Ext.ZIndexManager",function(){function A(){var B=Ext.focusTask;if(B){B.cancel()}}describe("z-index stacking",function(){var D,C,B;beforeEach(function(){D=new Ext.window.Window({title:"c1",id:"c1",height:100,width:100,focusOnToFront:false});C=new Ext.window.Window({title:"c2",id:"c2",height:100,width:100,focusOnToFront:false});B=new Ext.window.Window({title:"c3",id:"c3",height:100,width:100,focusOnToFront:false})});afterEach(function(){Ext.destroy(D,C,B)});it("should order the windows as they are rendered",function(){D.show();C.show();B.show();A();expect(B.el.getZIndex()).toBeGreaterThan(C.el.getZIndex());expect(C.el.getZIndex()).toBeGreaterThan(D.el.getZIndex())});it("should re-order the windows on mousedown",function(){D.showAt(0,0);C.showAt(50,0);B.showAt(100,0);A();D.onMouseDown({target:D.el.dom});expect(D.el.getZIndex()).toBeGreaterThan(B.el.getZIndex());expect(B.el.getZIndex()).toBeGreaterThan(C.el.getZIndex())});it("should honour alwaysOnTop",function(){D.setAlwaysOnTop(true);D.showAt(0,0);C.showAt(50,0);B.showAt(100,0);A();expect(D.el.getZIndex()).toBeGreaterThan(B.el.getZIndex());expect(B.el.getZIndex()).toBeGreaterThan(C.el.getZIndex());C.onMouseDown({target:C.el.dom});expect(D.el.getZIndex()).toBeGreaterThan(B.el.getZIndex());expect(B.el.getZIndex()).toBeGreaterThan(C.el.getZIndex())});it("should sort to the bottom of the ZIndexStack if alwaysOnTop === -1",function(){B.setAlwaysOnTop(-1);D.showAt(0,0);C.showAt(50,0);B.showAt(100,0);A();expect(C.el.getZIndex()).toBeGreaterThan(D.el.getZIndex());expect(D.el.getZIndex()).toBeGreaterThan(B.el.getZIndex())});it("should order parents",function(){C.add(B);D.showAt(0,0);C.showAt(50,0);B.showAt(25,25);A();D.onMouseDown({target:D.el.dom});expect(D.el.getZIndex()).toBeGreaterThan(B.el.getZIndex());expect(B.el.getZIndex()).toBeGreaterThan(C.el.getZIndex());C.onMouseDown({target:C.el.dom});A();expect(B.el.getZIndex()).toBeGreaterThan(C.el.getZIndex());expect(C.el.getZIndex()).toBeGreaterThan(D.el.getZIndex())});it("should assign a z-index to a floater that is rendered visible",function(){var E=new Ext.Component({renderTo:Ext.getBody(),floating:true,html:"Foo"});E.show();expect(E.getEl().getZIndex()).toBe(Ext.WindowManager.zseed);E.destroy()})});describe("modal masking",function(){var C,B;afterEach(function(){Ext.destroy(C);B=C=null});function D(E){C=new Ext.window.Window(Ext.applyIf(E||{},{width:200,height:200,title:"Foo",autoShow:true,modal:true}))}describe("mask visibility",function(){beforeEach(function(){D();B=C.zIndexManager.mask});function E(){return parseInt(C.zIndexManager.mask.getStyle("z-index"),10)}it("should show the mask below the floater when open",function(){expect(B.isVisible()).toBe(true);expect(E()).toBeLessThan(C.getEl().getZIndex())});it("should re-show the mask after hiding then showing",function(){C.hide();C.show();expect(B.isVisible()).toBe(true)});it("should hide the modal mask when hiding the last floater",function(){C.hide();expect(B.isVisible()).toBe(false)});it("should hide the modal mask when destroying the last floater",function(){C.destroy();expect(B.isVisible()).toBe(false)})});describe("element tabbability",function(){var E,F;beforeEach(function(){E=new Ext.button.Button({renderTo:Ext.getBody(),text:"foo"})});afterEach(function(){Ext.destroy(E);E=null});describe("components below mask",function(){beforeEach(function(){D()});it("button should become untabbable on mask show",function(){F=Ext.getBody().findTabbableElements({skipSelf:true,excludeRoot:C.el});expect(F.length).toBe(0)});it("button should become tabbable on mask hide",function(){C.hide();F=Ext.getBody().findTabbableElements({skipSelf:true,excludeRoot:C.el});expect(F).toEqual([E.getFocusEl().dom])});it("button should become untabbable on mask show/hide/show",function(){C.hide();C.show();F=Ext.getBody().findTabbableElements({skipSelf:true,excludeRoot:C.el});expect(F.length).toBe(0)})});describe("components above mask",function(){beforeEach(function(){D({items:[{xtype:"textfield",fieldLabel:"Login"},{xtype:"textfield",fieldLabel:"Password"}],buttons:[{text:"OK"}]})});it("should keep items above the mask tabbable",function(){F=C.getEl().findTabbableElements({skipSelf:true});expect(F.length).toBe(6)})})});describe("mask size",function(){it("should size the mask to the body if the manager is global",function(){D();B=C.zIndexManager.mask;expect(B.getSize()).toEqual(Ext.Element.getViewSize());expect(B).toHaveCls(Ext.Component.prototype.borderBoxCls)});it("should set the mask to the size of the container",function(){var E=new Ext.container.Container({renderTo:Ext.getBody(),width:400,height:400});C=E.add({xtype:"window",width:100,height:100,modal:true,title:"Foo"});C.show();B=C.zIndexManager.mask;expect(B.getSize()).toEqual({width:400,height:400});E.destroy()});xit("should resize the mask when the container resizes",function(){var E=new Ext.container.Container({renderTo:Ext.getBody(),width:400,height:400});C=E.add({xtype:"panel",floating:true,width:100,height:100,modal:true,title:"Foo"});C.show();B=C.zIndexManager.mask;E.setSize(200,200);expect(B.getSize()).toEqual({width:200,height:200});E.destroy()})})});describe("hideAll",function(){it("should hide all visible items",function(){var C=new Ext.window.Window({width:100,height:100,autoShow:true});var B=new Ext.window.Window({width:100,height:100,autoShow:true});var D=new Ext.window.Window({width:100,height:100,autoShow:true});Ext.WindowManager.hideAll();expect(C.isVisible()).toBe(false);expect(B.isVisible()).toBe(false);expect(D.isVisible()).toBe(false);Ext.destroy(C,B,D)});it("should be able to show/hide the modal mask after a hideAll call",function(){var D=new Ext.window.Window({width:100,height:100,autoShow:true});var B=new Ext.window.Window({width:100,height:100,autoShow:true});var F=new Ext.window.Window({width:100,height:100,autoShow:true});Ext.WindowManager.hideAll();expect(D.isVisible()).toBe(false);expect(B.isVisible()).toBe(false);expect(F.isVisible()).toBe(false);var C=D.zIndexManager.mask;expect(C.isVisible()).toBe(false);var E=new Ext.window.Window({width:100,height:100,modal:true,autoShow:true});expect(C.isVisible()).toBe(true);E.hide();expect(C.isVisible()).toBe(false);Ext.destroy(D,B,F,E)})});describe("picker field's pickers should stick to back if alwaysOnTop is set to -1",function(){it("should keep pickers below all other floating components",function(){var D,E=new Ext.form.ComboBox({store:["A","b","C"],editable:false,fieldLabel:"Combo",renderTo:Ext.getBody(),listConfig:{alwaysOnTop:-1}}),B=new Ext.form.Date({editable:false,fieldLabel:"Date",renderTo:Ext.getBody()}),C=new Ext.window.Window({autoShow:true,title:"Test",x:200,y:0,width:400,height:400,items:[D=new Ext.form.ComboBox({store:["A","b","C"],editable:false,listCOnfig:{alwaysOnTop:-1}})]});B.getPicker().setAlwaysOnTop(-1);E.expand();expect(E.getPicker().el.getZIndex()).toBeLessThan(C.el.getZIndex());E.collapse();B.expand();expect(B.getPicker().el.getZIndex()).toBeLessThan(C.el.getZIndex());B.collapse();D.expand();expect(D.getPicker().el.getZIndex()).toBeGreaterThan(C.el.getZIndex());D.collapse();E.expand();expect(E.getPicker().el.getZIndex()).toBeLessThan(C.el.getZIndex());Ext.destroy(E,B,C)})});describe("bringToFront",function(){it("should return false when bringing to front a non-rendered window, when passing id",function(){var B=new Ext.window.Window({title:"Win",id:"theWin",width:100,height:100});expect(Ext.WindowManager.bringToFront("theWin")).toBe(false);B.destroy()})});describe("focus handling",function(){var H=jasmine.focusAndWait,C=jasmine.waitForFocus,F=jasmine.expectFocused,E,G,D,B;beforeEach(function(){E=new Ext.button.Button({renderTo:Ext.getBody(),text:"foo"});G=new Ext.window.Window({title:"bar",width:200,height:100,x:30,y:30,closeAction:"hide",items:[{xtype:"textfield",itemId:"input1"},{xtype:"textfield",itemId:"input2",allowBlank:false}]});D=G.down("#input1");B=G.down("#input2");H(E)});afterEach(function(){Ext.destroy(G,E);E=G=D=B=null});describe("focusable floater show/hide with no animation",function(){beforeEach(function(){G.show();C(G)});it("should focus the window on show",function(){F(G)});it("should focus the button back on window hide",function(){G.close();F(E)})});describe("focusable floater show/hide with animation",function(){beforeEach(function(){G.show(E);C(G)});it("should focus the window on show",function(){F(G)});it("should focus the button back on window hide",function(){G.close(E);F(E)})});describe("non-focusable floater show/hide",function(){var I;beforeEach(function(){I=new Ext.panel.Panel({floating:true,title:"floating",width:100,height:100,x:300,y:30,html:"floating panel"});G.show();H(B)});afterEach(function(){Ext.destroy(I)});it("should not steal focus on floater show",function(){I.show();F(B)});it("should not munge focus on floater hide",function(){I.show();I.hide();F(B)})});describe("event order",function(){it("should fire floater hide event after sorting zIndexStack",function(){var I=Ext.WindowManager.onCollectionSort,J=[],K;K=new Ext.window.Window({title:"foo",width:300,height:200,x:10,y:10,closeAction:"hide",listeners:{hide:function(){J.push("hide")}}}).show();Ext.WindowManager.onCollectionSort=function(){J.push("sort");I.call(Ext.WindowManager)};K.close();expect(J).toEqual(["sort","hide"]);Ext.WindowManager.onCollectionSort=I;K.destroy();K=null})})});describe("focus restoration after window drag",function(){var B;afterEach(function(){B.destroy();B=null});it("should restore focus after showing",function(){var D,C,F,E;B=new Ext.window.Window({title:"Test Window",width:410,height:400});B.show();D=B.getXY();C=B.header.getX();F=new Ext.window.Window({width:200,height:100,items:{xtype:"textfield"}});B.add(F);F.show();E=F.items.first();E.focus();jasmine.waitForFocus(E);runs(function(){expect(E.hasFocus).toBe(true);jasmine.fireMouseEvent(B.header.el,"mousedown",C);jasmine.fireMouseEvent(B.header.el,"mousemove",C+100);expect(F.isVisible()).toBe(false);jasmine.fireMouseEvent(Ext.getBody(),"mouseup");D[0]+=100;expect(B.getXY()).toEqual(D)});jasmine.waitForFocus(E);runs(function(){expect(E.hasFocus).toBe(true)})})})})