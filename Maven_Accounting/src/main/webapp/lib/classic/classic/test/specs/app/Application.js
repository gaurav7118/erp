xdescribe("Ext.app.Application",function(){var A,D,C,B;beforeEach(function(){this.addMatchers({toBeFunction:function(E){var F=this.actual;return E?Ext.isFunction(F)&&F===E:Ext.isFunction(F)}});Ext.app.addNamespaces("TestApplication");Ext.define("TestApplication.controller.Foo",{extend:"Ext.app.Controller",id:"Foo",initialized:false,launched:false,init:function(){this.initialized=true},onLaunch:function(){this.launched=true}});Ext.define("TestApplication.view.Viewport",{create:function(){}});spyOn(Ext.Loader,"require").andCallThrough();spyOn(Ext.Loader,"injectScriptElement").andReturn();spyOn(Ext.Loader,"onFileLoadError").andReturn();A=Ext.define("TestApplication.Application",{extend:"Ext.app.Application",name:"TestApplication",namespaces:["TestApplication.Foo","TestApplication.Bar"],controllers:["Foo"],autoCreateViewport:true,init:function(){C=true},launch:function(){B=true}})});afterEach(function(){Ext.app.clearNamespaces();if(Ext.isIE){window.TestApplication=undefined}else{delete window.TestApplication}});describe("resolves global namespaces upon class creation",function(){it("has TestApplication namespace",function(){expect(Ext.app.namespaces["TestApplication"]).toBeTruthy()});it("has TestApplication.Foo namespace",function(){expect(Ext.app.namespaces["TestApplication.Foo"]).toBeTruthy()});it("has TestApplication.Bar namespace",function(){expect(Ext.app.namespaces["TestApplication.Bar"]).toBeTruthy()})});describe("resolves class names",function(){it("resolves Viewport when autoCreateViewport is true",function(){var E=Ext.Loader.require.argsForCall[1][0];expect(E).toEqual(["TestApplication.view.Viewport"])});it("defaults to 'app' when appFolder is not set",function(){var E=Ext.Loader.config.paths.TestApplication;expect(E).toBe("app")});describe("when appFolder is set",function(){beforeEach(function(){Ext.define("TestApplication.AbstractApplication",{extend:"Ext.app.Application",appFolder:"foo"});Ext.define("TestApplication.Application",{extend:"TestApplication.AbstractApplication",name:"Foo",autoCreateViewport:true})});it("resolves Viewport path",function(){var E=Ext.Loader.config.paths.Foo;expect(E).toBe("foo")})})});it("is constructable",function(){D=new TestApplication.Application();expect(D).toBeDefined()});it("adds getApplication method...",function(){expect(D.getApplication).toBeFunction()});it("... which returns Application instance",function(){var E=D.getApplication();expect(E).toEqual(D)});it("inits itself as a Controller",function(){expect(D._initialized).toBeTruthy()});it("inits dependent Controllers and sets their id",function(){var E=D.getController("Foo");expect(E.initialized).toBeTruthy();expect(E.getId()).toBe("Foo")});it("calls onLaunch on dependent Controllers",function(){var E=D.getController("Foo");expect(E.launched).toBeTruthy()});it("calls its init() method",function(){expect(C).toBeTruthy()});it("calls its launch() method",function(){expect(B).toBeTruthy()});it("fires launch event",function(){var E=false;new TestApplication.Application({listeners:{launch:function(){E=true}}});expect(E).toBeTruthy()});it("inits QuickTips",function(){spyOn(Ext.tip.QuickTipManager,"init");new TestApplication.Application();expect(Ext.tip.QuickTipManager.init).toHaveBeenCalled()});it("inits Viewport when autoCreateViewport is true",function(){spyOn(TestApplication.view.Viewport,"create");new TestApplication.Application();expect(TestApplication.view.Viewport.create).toHaveBeenCalled()});it("should init Ext.util.History",function(){D=new TestApplication.Application();return expect(Ext.util.History.ready).toEqual(true)});describe("should handle default hash",function(){var E=Ext.util.History;beforeEach(function(){E.useTopWindow=false});afterEach(function(){E.useTopWindow=true});it("adds defaultToken",function(){D=new TestApplication.Application({defaultToken:"foo"});expect(E.getToken()).toEqual("foo")});it("already has a token",function(){if(!E.getToken()){E.add("foo")}D=new TestApplication.Application({defaultToken:"bar"});expect(E.getToken()).toEqual("foo")})})})