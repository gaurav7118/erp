describe("Ext.app.Controller",function(){var C=false,D=false,F=Ext.app.Controller,B,G,A,E;beforeEach(function(){this.addMatchers({toBeFunction:function(H){var I=this.actual;return H?Ext.isFunction(I)&&I===H:Ext.isFunction(I)}});Ext.define("TestController.view.FooPanel",{extend:"Ext.panel.Panel",xtype:"foopanel"});Ext.define("TestController.view.BarPanel",{extend:"Ext.panel.Panel",xtype:"barpanel"});Ext.define("TestController.view.BazPanel",{extend:"Ext.panel.Panel",xtype:"bazpanel"});Ext.define("TestController.model.Test",{extend:"Ext.data.Model",fields:[]});Ext.define("TestController.store.Test",{extend:"Ext.data.Store",model:"TestController.model.Test"});Ext.define("TestController.controller.Events",{extend:"Ext.app.Controller",init:function(){this.control({"foopanel":{resize:this.onPanelFooResize,UPPERCUSTOM:this.onCustomEvent}})},onPanelFooResize:function(){C=true},onCustomEvent:function(){D=true}});G=new TestController.view.FooPanel({id:"fooPanel",prop:"foo",width:100,height:100,renderTo:document.body})});afterEach(function(){Ext.app.clearNamespaces();if(G){G.destroy()}E=null;if(Ext.isIE){window.TestController=undefined;window.NonexistingNamespace=undefined;window.AnotherNonexistingNamespace=undefined;window.YetAnotherNonexistingNamespace=undefined}else{delete window.TestController;delete window.NonexistingNamespace;delete window.AnotherNonexistingNamespace;delete window.YetAnotherNonexistingNamespace}Ext.undefine("TestController.view.FooPanel");Ext.undefine("TestController.view.BarPanel");Ext.undefine("TestController.view.BazPanel");Ext.undefine("TestController.model.Test");Ext.undefine("TestController.store.Test");Ext.undefine("TestController.controller.Events");Ext.data.Model.schema.clear()});describe("handles namespaces:",function(){beforeEach(function(){spyOn(Ext.log,"warn")});it("resolves class name from Model@Name.space",function(){var H=F.getFullName("Model@Name.space.foo","model","Nonexisting");expect(H).toEqual({absoluteName:"Name.space.foo.Model",shortName:"Model"})});it("resolves class name from space.Model@Name",function(){var H=F.getFullName("foo.Model@Name.space","model","Nonexisting");expect(H).toEqual({absoluteName:"Name.space.foo.Model",shortName:"foo.Model"})});it("kinda resolves class name when it's already defined",function(){Ext.define("TestController.DefinedModel",{},function(){var H=F.getFullName("TestController.DefinedModel","model","TestController");expect(H).toEqual({absoluteName:"TestController.DefinedModel",shortName:"TestController.DefinedModel"})})});it("resolves non-dotted class name when namespace and kind are provided",function(){var H=F.getFullName("StoreNotLoadedYet","store","TestController");expect(H).toEqual({absoluteName:"TestController.store.StoreNotLoadedYet",shortName:"StoreNotLoadedYet"})});it("resolves dotted class name when namespace and kind are provided",function(){var H=F.getFullName("Dotted.Foo","view","TestController");expect(H).toEqual({absoluteName:"TestController.view.Dotted.Foo",shortName:"Dotted.Foo"})});it("falls back to assuming class is fully qualified when there's no other choice",function(){var H=F.getFullName("Some.bogus.Class","view",undefined);expect(H).toEqual({absoluteName:"Some.bogus.Class",shortName:"Some.bogus.Class"})});it("resolves modules when namespace is deduced from class name",function(){runs(function(){spyOn(Ext.Loader,"require").andReturn();B=Ext.define("TestController.controller.Single",{extend:"Ext.app.Controller",models:"Foo",views:"Foo",stores:"Foo",controllers:"Bar"})});waits(50);runs(function(){var H=Ext.Loader.require.argsForCall[0][0];expect(H).toEqual(["TestController.model.Foo","TestController.view.Foo","TestController.store.Foo","TestController.controller.Bar"])})});it("creates correct getter for Model Foo",function(){expect(B.prototype.getFooModel).toBeFunction()});it("creates correct getter for View Foo",function(){expect(B.prototype.getFooView).toBeFunction()});it("creates correct getter for Store Foo",function(){expect(B.prototype.getFooStore).toBeFunction()});it("creates correct getter for Controller Bar",function(){expect(B.prototype.getBarController).toBeFunction()});it("resolves modules when namespace is set via Ext.app.addNamespaces",function(){runs(function(){Ext.app.addNamespaces("TestController");spyOn(Ext.Loader,"require").andReturn();B=Ext.define("TestController.Nonconforming.Class",{extend:"Ext.app.Controller",models:["Bar"],views:["Bar"],stores:["Bar"],controllers:["Baz"]})});waits(50);runs(function(){var H=Ext.Loader.require.argsForCall[0][0];expect(H).toEqual(["TestController.model.Bar","TestController.view.Bar","TestController.store.Bar","TestController.controller.Baz"]);Ext.app.clearNamespaces()})});it("creates correct getter for Model Bar",function(){expect(B.prototype.getBarModel).toBeFunction()});it("creates correct getter for View Bar",function(){expect(B.prototype.getBarView).toBeFunction()});it("creates correct getter for Store Bar",function(){expect(B.prototype.getBarStore).toBeFunction()});it("creates correct getter for Controller Baz",function(){expect(B.prototype.getBazController).toBeFunction()});it("resolves modules when namespace is set via Loader.setConfig/setPath",function(){runs(function(){Ext.Loader.setPath("TestController","/testcontroller");spyOn(Ext.Loader,"require").andReturn();B=Ext.define("TestController.AnotherNonconforming.Class",{extend:"Ext.app.Controller",models:["Baz"],views:["Baz"],stores:["Baz"],controllers:["Qux"]})});waits(50);runs(function(){var H=Ext.Loader.require.argsForCall[0][0];expect(H).toEqual(["TestController.model.Baz","TestController.view.Baz","TestController.store.Baz","TestController.controller.Qux"])})});it("creates correct getter for Model Baz",function(){expect(B.prototype.getBazModel).toBeFunction()});it("creates correct getter for View Baz",function(){expect(B.prototype.getBazView).toBeFunction()});it("creates correct getter for Store Baz",function(){expect(B.prototype.getBazStore).toBeFunction()});it("creates correct getter for Controller Qux",function(){expect(B.prototype.getQuxController).toBeFunction()});it("uses $namespace shortcut to resolve modules if provided",function(){runs(function(){spyOn(Ext.Loader,"require").andReturn();B=Ext.define("NonexistingNamespace.controller.Fubaru",{extend:"Ext.app.Controller","$namespace":"Foo",models:["Plugh"],views:["Plugh"],stores:["Plugh"],controllers:["Xyzzy"]})});waits(50);runs(function(){var H=Ext.Loader.require.argsForCall[0][0];expect(H).toEqual(["Foo.model.Plugh","Foo.view.Plugh","Foo.store.Plugh","Foo.controller.Xyzzy"])})});it("creates correct getter for Model Plugh",function(){expect(B.prototype.getPlughModel).toBeFunction()});it("creates correct getter for View Plugh",function(){expect(B.prototype.getPlughView).toBeFunction()});it("creates correct getter for Store Plugh",function(){expect(B.prototype.getPlughStore).toBeFunction()});it("creates correct getter for Controller Xyzzy",function(){expect(B.prototype.getXyzzyController).toBeFunction()});it("resolves module names using @-notation if provided",function(){runs(function(){spyOn(Ext.Loader,"require").andReturn();B=Ext.define("AnotherNonexistingNamespace.Foobaroo",{extend:"Ext.app.Controller",models:["Splurge@TestController.model"],views:["Splurge@TestController.view"],stores:["Splurge@TestController.store"],controllers:["Mymse@TestController.controller"]})});waits(50);runs(function(){var H=Ext.Loader.require.argsForCall[0][0];expect(H).toEqual(["TestController.model.Splurge","TestController.view.Splurge","TestController.store.Splurge","TestController.controller.Mymse"])})});it("creates correct getter for Model Splurge",function(){expect(B.prototype.getSplurgeModel).toBeFunction()});it("creates correct getter for View Splurge",function(){expect(B.prototype.getSplurgeView).toBeFunction()});it("creates correct getter for Store Splurge",function(){expect(B.prototype.getSplurgeStore).toBeFunction()});it("creates correct getter for Controller Mymse",function(){expect(B.prototype.getMymseController).toBeFunction()});it("assumes fully qualified module names if there's no way know them",function(){runs(function(){spyOn(Ext.Loader,"require").andReturn();B=Ext.define("YetAnotherNonexistingNamespace.Mymse",{extend:"Ext.app.Controller",models:["Fully.qualified.model.Flob"],views:["Fully.qualified.view.Flob"],stores:["Fully.qualified.store.Flob"],controllers:["Fully.qualified.controller.Flob"]})});waits(50);runs(function(){var H=Ext.Loader.require.argsForCall[0][0];expect(H).toEqual(["Fully.qualified.model.Flob","Fully.qualified.view.Flob","Fully.qualified.store.Flob","Fully.qualified.controller.Flob"])})});it("creates correct getter for Model Flob",function(){expect(B.prototype.getFullyQualifiedModelFlobModel).toBeFunction()});it("creates correct getter for View Flob",function(){expect(B.prototype.getFullyQualifiedViewFlobView).toBeFunction()});it("creates correct getter for Store Flob",function(){expect(B.prototype.getFullyQualifiedStoreFlobStore).toBeFunction()});it("creates correct getter for Controller Flob",function(){expect(B.prototype.getFullyQualifiedControllerFlobController).toBeFunction()})});describe("works with refs:",function(){beforeEach(function(){Ext.define("TestController.controller.Refs",{extend:"Ext.app.Controller",refs:[{ref:"fooPanel",selector:"foopanel"},{ref:"barPanel",selector:"barpanel",xtype:"barpanel",autoCreate:true},{ref:"bazPanel",selector:"bazpanel",xtype:"bazpanel",forceCreate:true},{ref:"quxPanel",xtype:"barpanel",autoCreate:true},{ref:"fredComponent",autoCreate:true}]});E=new TestController.controller.Refs({id:"foo"})});afterEach(function(){var H=E.refCache;for(var I in H){Ext.destroy(H[I])}Ext.undefine("TestController.controller.Refs")});it("should be able to instantiate",function(){expect(E.getId()).toBe("foo")});it("creates ref getters 1",function(){expect(E.getFooPanel).toBeFunction()});it("creates ref getters 2",function(){expect(E.getBarPanel).toBeFunction()});it("creates ref getters 3",function(){expect(E.getBazPanel).toBeFunction()});it("returns existing component by ref",function(){var H=E.getFooPanel();expect(H).toEqual(G)});it("creates component when ref has autoCreate flag",function(){var H=E.getBarPanel();expect(H.xtype).toBe("barpanel")});it("doesn't require selector when ref has autoCreate flag",function(){var H=E.getQuxPanel();expect(H.xtype).toBe("barpanel")});it("creates Component by default with autoCreate",function(){var H=E.getFredComponent();expect(H.xtype).toBe("component")});it("creates component when ref has forceCreate flag",function(){var H=E.getBazPanel();expect(H.xtype).toBe("bazpanel");A=H.getId();H.destroy()});it("creates component every time when ref has forceCreate flag",function(){var H=E.getBazPanel();expect(H.xtype).toBe("bazpanel");expect(H.getId()).not.toBe(A);H.destroy()})});describe("handles init():",function(){it("should survive init() on itself",function(){expect(function(){new TestController.controller.Events().init()}).not.toThrow();expect(TestController.controller.Events).toBeDefined()});it("should init() child Controllers",function(){var J=false,I=false,H=false;spyOn(Ext.Loader,"require").andCallFake(function(K,L){L()});Ext.define("TestController.controller.Child3",{extend:"Ext.app.Controller",init:function(){H=true}});Ext.define("TestController.controller.Child2",{extend:"Ext.app.Controller",controllers:["Child3"],init:function(){I=true}});Ext.define("TestController.controller.Child1",{extend:"Ext.app.Controller",controllers:["Child2"],init:function(){J=true}});Ext.define("TestController.controller.Parent",{extend:"Ext.app.Controller",controllers:["Child1"]});Ext.define("TestController.Application",{extend:"Ext.app.Application",name:"TestController",controllers:["Parent"]});new TestController.Application();expect(J).toBeTruthy();expect(I).toBeTruthy();expect(H).toBeTruthy()})});describe("handles View events:",function(){beforeEach(function(){D=C=false;E=new TestController.controller.Events();E.init()});it("should control newly created Views",function(){G.setSize(50,50);expect(C).toBeTruthy()});describe("should ignore case",function(){function H(I){it("should accept "+I.specName,function(){G.fireEvent(I.eventName,G);expect(D).toBe(true)})}Ext.Array.forEach([{specName:"lowercase",eventName:"uppercustom"},{specName:"uppercase",eventName:"UPPERCUSTOM"},{specName:"camelCase",eventName:"upperCustom"},{specName:"mixed case",eventName:"UpPErCustoM"}],function(I){H(I)})})});describe("handles getters:",function(){beforeEach(function(){E=new TestController.controller.Events({id:"foo"});E.init()});it("should return self on getController(self-id)",function(){var H=E.getController("foo");expect(H).toEqual(E)});it("should return nothing on getController(foreign-id)",function(){var H=E.getController("bar");expect(H).toBeFalsy()});it("should return Store on getStore()",function(){var H=E.getStore("Test");expect(H.isInstance).toBeTruthy()});it("should return model class on getModel()",function(){var H=E.getModel("Test");expect(H.$isClass).toBeTruthy()});it("should return View class on getView()",function(){var H=E.getView("FooPanel");expect(H.$isClass).toBeTruthy()})});describe("allows unit testing:",function(){beforeEach(function(){E=new TestController.controller.Events({id:"bar"});spyOn(E,"onPanelFooResize");E.init()});it("should fire the spy on the instance",function(){G.setSize(10,10);expect(E.onPanelFooResize).toHaveBeenCalled()})})})