describe("Ext.app.ViewController",function(){var D,A,C,B;function E(F){F=F||{};Ext.applyIf(F,{controller:"test1"});D=new Ext.container.Container(F);A=D.getController()}beforeEach(function(){Ext.define("spec.TestController1",{extend:"Ext.app.ViewController",alias:"controller.test1",beforeInit:function(F){if(B){B(this)}},init:function(F){if(C){C(this)}},method1:function(){},method2:function(){}});Ext.define("spec.TestController2",{extend:"Ext.app.ViewController",alias:"controller.test2",init:function(){},method1:function(){},method2:function(){}});Ext.define("spec.TestController3",{extend:"Ext.app.ViewController",alias:"controller.test3",method1:function(){},method2:function(){}})});afterEach(function(){Ext.destroy(D);Ext.undefine("spec.TestController1");Ext.undefine("spec.TestController2");Ext.undefine("spec.TestController3");B=C=A=D=null});describe("initializing",function(){it("should set the view on the controller",function(){E();expect(A.getView()).toBe(D)});it("should should call init once the container has initialized its items",function(){var F=0;C=function(G){F=G.getView().items.getCount()};E({items:{xtype:"component"}});expect(F).toBe(1)});it("should call the init method and pass the component",function(){var F=new spec.TestController2();spyOn(F,"init");var G=new Ext.Component({controller:F});expect(F.init).toHaveBeenCalledWith(G);Ext.destroy(G)});it("should call the beforeInit method before initComponent of the component",function(){var G=false,F;var H=Ext.define(null,{extend:"Ext.Component",initComponent:function(){G=true;this.callParent()}});B=function(J){F=!!G};var I=new H({controller:{type:"test1"}});I.destroy()});it("should call the beforeInit method and pass the component",function(){var F=new spec.TestController2();spyOn(F,"beforeInit");var G=new Ext.Component({controller:F});expect(F.beforeInit).toHaveBeenCalledWith(G);G.destroy()})});describe("template methods",function(){describe("initViewModel",function(){it("should not get called if there is no viewModel",function(){var G=new spec.TestController1(),F=spyOn(G,"initViewModel");E({controller:G});D.getViewModel();expect(F).not.toHaveBeenCalled()});it("should get called with the view model as an argument",function(){var H=new spec.TestController1(),G=new Ext.app.ViewModel(),F=spyOn(H,"initViewModel");E({controller:H,viewModel:G});D.getViewModel();expect(F).toHaveBeenCalledWith(G)});it("should be able to call getViewModel",function(){var I=new spec.TestController1(),H=new Ext.app.ViewModel(),G=spyOn(I,"initViewModel").andCallFake(function(){F=this.getViewModel()}),F;E({controller:I,viewModel:H});D.getViewModel();expect(F).toBe(H)})})});describe("references",function(){it("should get the same reference as the view",function(){E({items:{xtype:"component",itemId:"compA",reference:"a"}});var F=A.lookupReference("a");expect(F).toBe(D.down("#compA"))})});describe("accessing via the view",function(){it("should return null when the view has no view controller",function(){E();expect(A.getViewModel()).toBeNull()});it("should return the view model of the view directly",function(){var F=new Ext.app.ViewModel();E({viewModel:F});expect(A.getViewModel()).toBe(F)});it("should return an inherited view model if not specified on the view",function(){var F=new Ext.app.ViewModel();E({viewModel:F,items:[{xtype:"container",controller:"test2"}]});expect(D.items.first().getController().getViewModel()).toBe(F)})});describe("getStore",function(){it("should return null when no named store exists on the view model",function(){E({viewModel:true,renderTo:Ext.getBody(),items:[{xtype:"container",controller:"test2"}]});expect(A.getStore("users")).toBe(null)});it("should return null if there is no viewModel attached to the view",function(){E({renderTo:Ext.getBody(),items:[{xtype:"container",controller:"test2"}]});expect(D.getViewModel()).toBeNull();expect(A.getStore("users")).toBeNull()});it("should return the named store from the view model",function(){var F=new Ext.app.ViewModel({stores:{users:{fields:["name"]}}});E({renderTo:Ext.getBody(),viewModel:F});expect(A.getStore("users")).toBe(F.getStore("users"))})});describe("getSession",function(){it("should return a session attached the view",function(){var F=new Ext.data.Session();E({renderTo:Ext.getBody(),session:F});expect(A.getSession()).toBe(F)});it("should find a session higher in the hierarchy",function(){var F=new Ext.app.ViewController(),G=new Ext.data.Session();E({controller:null,session:G,items:{xtype:"container",items:{xtype:"container",items:{xtype:"container",items:{xtype:"container",controller:F}}}}});expect(F.getSession()).toBe(G)});it("should return the closest session in the hierarchy",function(){var F=new Ext.app.ViewController(),H=new Ext.data.Session(),G=new Ext.data.Session();E({controller:null,session:H,items:{xtype:"container",items:{xtype:"container",session:G,items:{xtype:"container",items:{xtype:"container",controller:F}}}}});expect(F.getSession()).toBe(G)});it("should return null when no session is attached to the view",function(){E({renderTo:Ext.getBody()});expect(A.getSession()).toBeNull()});it("should return null when no session exists in the hierarchy",function(){var F=new Ext.app.ViewController();E({controller:null,items:{xtype:"container",items:{xtype:"container",items:{xtype:"container",items:{xtype:"container",controller:F}}}}});expect(F.getSession()).toBeNull()})});describe("getViewModel",function(){it("should return a viewModel attached the view",function(){var F=new Ext.app.ViewModel();E({renderTo:Ext.getBody(),viewModel:F});expect(A.getViewModel()).toBe(F)});it("should find a view model higher in the hierarchy",function(){var F=new Ext.app.ViewController(),G=new Ext.app.ViewModel();E({controller:null,viewModel:G,items:{xtype:"container",items:{xtype:"container",items:{xtype:"container",items:{xtype:"container",controller:F}}}}});expect(F.getViewModel()).toBe(G)});it("should return the closest viewModel in the hierarchy",function(){var F=new Ext.app.ViewController(),H=new Ext.app.ViewModel(),G=new Ext.app.ViewModel();E({controller:null,viewModel:H,items:{xtype:"container",items:{xtype:"container",viewModel:G,items:{xtype:"container",items:{xtype:"container",controller:F}}}}});expect(F.getViewModel()).toBe(G)});it("should return null when no viewModel is attached to the view",function(){E({renderTo:Ext.getBody()});expect(A.getViewModel()).toBeNull()});it("should return null when no viewModel exists in the hierarchy",function(){var F=new Ext.app.ViewController();E({controller:null,items:{xtype:"container",items:{xtype:"container",items:{xtype:"container",items:{xtype:"container",controller:F}}}}});expect(F.getViewModel()).toBeNull()})});describe("listen",function(){it("should ensure any control listeners get scoped to the controller",function(){E({controller:{type:"test1",listen:{component:{container:{custom:"method1"}}}},items:{xtype:"container"}});spyOn(A,"method1");var F=new Ext.container.Container();F.fireEvent("custom");expect(A.method1).not.toHaveBeenCalled();D.items.first().fireEvent("custom");expect(A.method1).toHaveBeenCalled();Ext.destroy(F)})});describe("listeners",function(){describe("direct events",function(){it("should call a method on the controller",function(){E({items:[{xtype:"container",listeners:{custom:"method1"}}]});spyOn(A,"method1");D.items.first().fireEvent("custom");expect(A.method1).toHaveBeenCalled()});it("should not call a method if events are suspended",function(){E({items:[{xtype:"container",listeners:{custom:"method1"}}]});spyOn(A,"method1");var F=D.items.first();F.suspendEvents();F.fireEvent("custom");expect(A.method1).not.toHaveBeenCalled()});it("should encapsulate events",function(){E({renderTo:Ext.getBody(),items:[{xtype:"container",controller:"test2",items:[{xtype:"component",listeners:{custom:"method1"}}]}]});var F=D.items.first().getController();spyOn(A,"method1");spyOn(F,"method1");F.getView().items.first().fireEvent("custom");expect(F.method1).toHaveBeenCalled();expect(A.method1).not.toHaveBeenCalled()})});describe("on the event bus",function(){it("should react to matching selectors",function(){E({controller:{type:"test1",control:{"container":{custom:"method1"}}},items:[{xtype:"container",items:{xtype:"container",itemId:"a"}}]});var F=D.down("#a");spyOn(A,"method1");F.fireEvent("custom");expect(A.method1).toHaveBeenCalled()});it("should not react to non matching selectors",function(){E({controller:{type:"test1",control:{"container":{custom:"method1"}}},items:[{xtype:"container",items:{xtype:"button",itemId:"a"}}]});var F=D.down("#a");spyOn(A,"method1");F.fireEvent("custom");expect(A.method1).not.toHaveBeenCalled()});it("should react to events on itself",function(){E({controller:{type:"test1",control:{"container":{custom:"method1"}}}});spyOn(A,"method1");D.fireEvent("custom");expect(A.method1).toHaveBeenCalled()});it("should not react to events outside the hierarchy",function(){E({controller:{type:"test1",control:{"container":{custom:"method1"}}}});spyOn(A,"method1");var F=new Ext.container.Container();F.fireEvent("custom");expect(A.method1).not.toHaveBeenCalled();F.destroy()});it("should remove listeners when the controller is destroyed",function(){E({controller:{type:"test1",control:{"container":{custom:"method1"}}},items:{xtype:"container"}});spyOn(A,"method1");A.destroy();D.items.first().fireEvent("custom");expect(A.method1).not.toHaveBeenCalled()});it("should use the '#' selector to match the reference holder",function(){E({controller:{type:"test1",control:{"#":{custom:"method1"}}},items:{xtype:"component",itemId:"compA"}});spyOn(A,"method1");D.items.first().fireEvent("custom");expect(A.method1).not.toHaveBeenCalled();D.fireEvent("custom");expect(A.method1).toHaveBeenCalled()});it("should not react if the controller gets destroyed during event firing",function(){E({controller:{type:"test1",control:{"#":{custom:"method1"}}}});D.on("custom",function(){D.destroy()});spyOn(A,"method1");D.fireEvent("custom");expect(A.method1).not.toHaveBeenCalled()});describe("hierarchy",function(){var F=function(G,H){return{type:"test"+G,control:H||{"container":{custom:"method1"}}}};it("should fire matched events up the hierarchy",function(){E({controller:F(1),items:{xtype:"container",controller:F(2),items:{xtype:"container",controller:F(3),items:{xtype:"container",itemId:"compA"}}}});var I=D.down("#compA"),K=I.up().getController(),L=I.up().up().getController(),G=I.up().up().up().getController(),H=[],J=function(){H.push(this.type)};spyOn(G,"method1").andCallFake(J);spyOn(L,"method1").andCallFake(J);spyOn(K,"method1").andCallFake(J);I.fireEvent("custom");expect(H).toEqual(["test3","test2","test1"])});it("should fire parents even if the deepest child doesn't match",function(){E({controller:F(1),items:{xtype:"container",controller:F(2),items:{xtype:"container",controller:F(3,{}),items:{xtype:"container",itemId:"compA"}}}});var H=D.down("#compA"),I=H.up().getController(),J=H.up().up().getController(),G=H.up().up().up().getController();spyOn(G,"method1");spyOn(J,"method1");spyOn(I,"method1");H.fireEvent("custom");expect(G.method1).toHaveBeenCalled();expect(J.method1).toHaveBeenCalled();expect(I.method1).not.toHaveBeenCalled()});it("should be able to continue up when a controller in the hierarchy doesn't match",function(){E({controller:F(1),items:{xtype:"container",controller:F(2,{}),items:{xtype:"container",controller:F(3),items:{xtype:"container",itemId:"compA"}}}});var H=D.down("#compA"),I=H.up().getController(),J=H.up().up().getController(),G=H.up().up().up().getController();spyOn(G,"method1");spyOn(J,"method1");spyOn(I,"method1");H.fireEvent("custom");expect(G.method1).toHaveBeenCalled();expect(J.method1).not.toHaveBeenCalled();expect(I.method1).toHaveBeenCalled()});it("should not fire parent events if a lower event returns false",function(){E({controller:F(1),items:{xtype:"container",controller:F(2),items:{xtype:"container",controller:F(3),items:{xtype:"container",itemId:"compA"}}}});var H=D.down("#compA"),I=H.up().getController(),J=H.up().up().getController(),G=H.up().up().up().getController();spyOn(G,"method1");spyOn(J,"method1");spyOn(I,"method1").andReturn(false);H.fireEvent("custom");expect(G.method1).not.toHaveBeenCalled();expect(J.method1).not.toHaveBeenCalled();expect(I.method1).toHaveBeenCalled()})})});describe("mixture of both",function(){it("should fire direct events first",function(){E({controller:{type:"test1",control:{"container":{custom:"method1"}}},items:{xtype:"container",listeners:{custom:"method2"}}});var H=D.items.first(),G=D.getController(),F=[];spyOn(G,"method1").andCallFake(function(){F.push(1)});spyOn(G,"method2").andCallFake(function(){F.push(2)});H.fireEvent("custom");expect(F).toEqual([2,1])});it("should not fire bus events if direct handlers return false",function(){E({controller:{type:"test1",control:{"container":{custom:"method1"}}},items:{xtype:"container",listeners:{custom:"method2"}}});var G=D.items.first(),F=D.getController();spyOn(F,"method1");spyOn(F,"method2").andReturn(false);G.fireEvent("custom");expect(F.method1).not.toHaveBeenCalled()})})});describe("fireViewEvent",function(){it("view should be first argument",function(){E({controller:{type:"test1",control:{"#":{custom:"method1"}}}});spyOn(A,"method1");A.fireViewEvent("custom","foo");expect(A.method1).toHaveBeenCalled();expect(A.method1.mostRecentCall.args[0]).toEqual(D)});it("view should not add view as first argument",function(){E({controller:{type:"test1",control:{"#":{custom:"method1"}}}});spyOn(A,"method1");A.fireViewEvent("custom",D,"foo");expect(A.method1).toHaveBeenCalled();expect(A.method1.mostRecentCall.args[0]).toEqual(D)})})})