describe("Ext.app.domain.Controller",function(){var C,A,E,D,B;beforeEach(function(){Ext.define("spec.AliasController",{extend:"Ext.app.Controller",alias:"controller.test","namespace":"spec"});C=new Ext.app.Controller({id:"foo"});A=new Ext.app.Controller({id:"bar"});E=new spec.AliasController();D=jasmine.createSpy("event handler foo");B=jasmine.createSpy("event handler bar")});afterEach(function(){Ext.undefine("spec.AliasController");E=C=A=D=B=null});it("should ignore case on event names",function(){C.listen({controller:{"#bar":{foo:D}}});A.fireEvent("FOO");expect(D).toHaveBeenCalled()});describe("id selector",function(){it("listens to other Controllers' events by #id",function(){C.listen({controller:{"#bar":{foo:D}}});A.fireEvent("foo");expect(D).toHaveBeenCalled()});it("doesn't listen to other Controllers' events when selector doesn't match",function(){C.listen({controller:{"#foo":{bar:D},"#bar":{bar:B}}});C.fireEvent("bar");expect(D).toHaveBeenCalled();expect(B).not.toHaveBeenCalled()})});describe("alias selector",function(){it("should match based on alias",function(){C.listen({controller:{"test":{custom:D}}});E.fireEvent("custom");expect(D).toHaveBeenCalled()});it("should not listen when the alias does not match",function(){C.listen({controller:{"other":{custom:D}}});E.fireEvent("custom");expect(D).not.toHaveBeenCalled()})});describe("# selector",function(){var F;beforeEach(function(){F=new Ext.app.Application({name:"ControllerDomainSpec"})});afterEach(function(){F.destroy();F=null;try{delete window.ControllerDomainSpec}catch(G){window.ControllerDomainSpec=undefined}});it("should match an application",function(){C.listen({controller:{"#":{custom:D}}});F.fireEvent("custom");expect(D).toHaveBeenCalled()});it("should not match a controller",function(){C.listen({controller:{"#":{custom:D}}});A.fireEvent("custom");expect(D).not.toHaveBeenCalled()})});describe("* selector",function(){it("listens to other Controllers' events when selector is '*'",function(){C.listen({controller:{"*":{baz:D}}});A.fireEvent("baz");expect(D).toHaveBeenCalled()});it("listens to its own events when selector is '*'",function(){C.listen({controller:{"*":{qux:D}}});C.fireEvent("qux");expect(D).toHaveBeenCalled()});it("passes event arguments correctly",function(){C.listen({controller:{"*":{fred:D}}});A.fireEvent("fred","foo",["bar","baz"]);expect(D).toHaveBeenCalledWith("foo",["bar","baz"])})})})