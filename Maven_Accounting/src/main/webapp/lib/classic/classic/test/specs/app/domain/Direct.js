describe("Ext.app.domain.Direct",function(){var E,D,B,C,A;beforeEach(function(){spyOn(Ext.Ajax,"request").andReturn();D=new Ext.direct.RemotingProvider({id:"foo",url:"/foo"});B=new Ext.direct.PollingProvider({id:"bar",url:"/bar"});C=jasmine.createSpy("event handler foo");A=jasmine.createSpy("event handler bar");E=new Ext.app.Controller({id:"foo"})});it("should ignore case on event names",function(){E.listen({direct:{"#foo":{foo:C}}});D.fireEvent("FOO");expect(C).toHaveBeenCalled()});it("listens to Providers' events by #id",function(){E.listen({direct:{"#foo":{foo:C}}});D.fireEvent("foo");expect(C).toHaveBeenCalled()});it("doesn't listen to other Providers' events when selector doesn't match",function(){E.listen({direct:{"#foo":{bar:C},"#bar":{bar:A}}});B.fireEvent("bar");expect(A).toHaveBeenCalled();expect(C).not.toHaveBeenCalled()});it("listens to all Providers' events when selector is '*'",function(){E.listen({direct:{"*":{baz:C}}});D.fireEvent("baz");B.fireEvent("baz");expect(C.callCount).toBe(2)});it("passes event arguments correctly",function(){var F={responseText:Ext.encode([{type:"event",name:"foo",data:"bar"}])};E.listen({direct:{"*":{data:C}}});B.onData({},true,F);expect(C).toHaveBeenCalledWith(B,new Ext.direct.Event({type:"event",name:"foo",data:"bar"}))})})