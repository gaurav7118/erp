describe("Ext.app.domain.Global",function(){var C,A,B;beforeEach(function(){B=jasmine.createSpy();C=new Ext.app.Controller({id:"foo"})});afterEach(function(){B=C=A=Ext.destroy(A,C)});it("should ignore case on event names",function(){C.listen({global:{foo:B}});Ext.GlobalEvents.fireEvent("FOO");expect(B).toHaveBeenCalled()});it("listens to global events by id",function(){C.listen({global:{afterlayout:B}});A=new Ext.panel.Panel({height:100,width:100,html:"foo",renderTo:Ext.getBody()});expect(B).toHaveBeenCalled()});it("should pass the event data & default the scope to the controller",function(){var D=[{foo:1,bar:2},{foo:3,bar:4}];C.listen({global:{bar:B}});Ext.GlobalEvents.fireEvent("bar",D);expect(B.mostRecentCall.args[0]).toBe(D);expect(B.mostRecentCall.object).toBe(C)});it("should be able to listen over multiple listen calls",function(){var D=jasmine.createSpy();C.listen({global:{foo:B}});C.listen({global:{bar:D}});Ext.GlobalEvents.fireEvent("foo");expect(B.callCount).toBe(1);expect(D).not.toHaveBeenCalled();B.reset();D.reset();Ext.GlobalEvents.fireEvent("bar");expect(D.callCount).toBe(1);expect(B).not.toHaveBeenCalled()});it("should remove all listeners when the controller is destroyed",function(){C.listen({global:{foo:B}});C.listen({global:{bar:B}});C.destroy();Ext.GlobalEvents.fireEvent("foo");Ext.GlobalEvents.fireEvent("bar");expect(B).not.toHaveBeenCalled()});it("should only remove listeners for the controller on unlisten",function(){var E=new Ext.app.Controller({id:"other"}),D=jasmine.createSpy();C.listen({global:{foo:B}});E.listen({global:{bar:D}});Ext.GlobalEvents.fireEvent("foo");Ext.GlobalEvents.fireEvent("bar");expect(B.callCount).toBe(1);expect(D.callCount).toBe(1);E.destroy();B.reset();D.reset();Ext.GlobalEvents.fireEvent("foo");Ext.GlobalEvents.fireEvent("bar");expect(B.callCount).toBe(1);expect(D).not.toHaveBeenCalled()})})