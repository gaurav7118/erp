describe("Ext.app.domain.Store",function(){var D,B,E,C,A;beforeEach(function(){B=new Ext.data.Store({storeId:"foo",fields:["foo","bar"]});E=new Ext.data.Store({storeId:"bar",fields:["baz","qux"]});C=jasmine.createSpy("event handler foo");A=jasmine.createSpy("event handler bar");Ext.define("spec.CustomStore",{extend:"Ext.data.Store",alias:"store.customstore"});D=new Ext.app.Controller({id:"foo"})});afterEach(function(){Ext.destroy(B,E);D.destroy();Ext.undefine("spec.CustomStore");D=B=E=null});it("should ignore case on event names",function(){D.listen({store:{"#foo":{foo:C}}});B.fireEvent("FOO");expect(C).toHaveBeenCalled()});it("listens to Stores' events by #id",function(){D.listen({store:{"#foo":{foo:C}}});B.fireEvent("foo");expect(C).toHaveBeenCalled()});it("doesn't listen to other Stores' events when selector doesn't match",function(){D.listen({store:{"#foo":{bar:C},"#bar":{bar:A}}});E.fireEvent("bar");expect(A).toHaveBeenCalled();expect(C).not.toHaveBeenCalled()});it("listens to all Stores' events when selector is '*'",function(){D.listen({store:{"*":{baz:C}}});B.fireEvent("baz");E.fireEvent("baz");expect(C.callCount).toBe(2)});it("should listen by alias",function(){spyOn(Ext.log,"warn");var F=new spec.CustomStore();D.listen({store:{"customstore":{baz:C}}});F.fireEvent("baz");expect(C).toHaveBeenCalled();F.destroy()});it("passes event arguments correctly",function(){var F=[{foo:1,bar:2},{foo:3,bar:4}];D.listen({store:{"*":{datachanged:C}}});B.loadData(F);expect(C).toHaveBeenCalledWith(B)})})