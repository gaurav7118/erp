describe("Ext.app.route.Route",function(){var E=false,A=false,D=0,F=0,C="foo/bar",B;beforeEach(function(){B=new Ext.app.Controller({beforeHandleRoute:function(){F+=arguments.length;A=true;var G=arguments[arguments.length-1];G.resume()},beforeHandleRouteBlock:function(){F+=arguments.length;A=true;var G=arguments[arguments.length-1];G.stop()},handleRoute:function(){D=arguments.length;E=true}})});afterEach(function(){B=null;E=false;A=false;D=0;F=0});describe("should recognize tokens",function(){it("recognize 'foo/bar'",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",url:"foo/bar"});expect(G.recognize(C)).toBeTruthy()});describe("optional parameters",function(){it("recognize 'foo/:id'",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",url:"foo/:id"});expect(G.recognize("foo/123")).toBeTruthy()});it("recognize 'foo/:id' using condition for :id",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",url:"foo:id",conditions:{":id":"(?:(?:/){1}([%a-zA-Z0-9-_s,]+))?"}});expect(G.recognize("foo/123")).toBeTruthy()})})});describe("should fire action",function(){it("fires action",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",url:"foo/bar"}),H=G.recognize(C);G.execute(C,H);expect(E).toEqual(true)});it("fires using caseInsensitve",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",url:"foo/bar",caseInsensitive:true}),H=G.recognize("FoO/bAr");G.execute(C,H);expect(E).toEqual(true)})});describe("handle before action",function(){it("show continue action execution",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",before:"beforeHandleRoute",url:"foo/bar"}),H=G.recognize(C);G.execute(C,H);expect(A&&E).toEqual(true)});it("show block action execution",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",before:"beforeHandleRouteBlock",url:"foo/bar"}),H=G.recognize(C);G.execute(C,H);expect(A&&!E).toEqual(true)})});it("should execute callback in route.execute call",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",url:"foo/bar"}),H=G.recognize(C),I=false;G.execute(C,H,function(){I=true});expect(I).toEqual(true)});describe("number of arguments",function(){it("with a before action",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",before:"beforeHandleRoute",url:"foo/:bar"}),H=G.recognize(C);G.execute(C,H);expect(F+D).toBe(3)});it("without a before action",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",url:"foo/:bar"}),H=G.recognize(C);G.execute(C,H);expect(F+D).toBe(1)})});describe("controller activity",function(){it("should not recognize if the controller is inactive",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",url:"foo/:bar"});B.deactivate();expect(G.recognize(C)).toBe(false)});it("should recognize if the controller is inactive & the allowInactive flag is set",function(){var G=new Ext.app.route.Route({controller:B,action:"handleRoute",url:"foo/:bar",allowInactive:true});B.deactivate();expect(G.recognize(C)).not.toBe(false)})})})