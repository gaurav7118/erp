describe("Ext.app.route.Router",function(){var A=Ext.app.route.Router,D=false,E=false,B=0,H=0,C="foo/bar",G="foo2/:id",F,I;beforeEach(function(){F=new Ext.app.Controller({beforeHandleRoute:function(K){H+=arguments.length;E=true;var J=arguments[arguments.length-1];J.resume()},handleRoute:function(){B+=arguments.length;D=true}});I=new Ext.app.Controller({handleRoute:Ext.emptyFn})});afterEach(function(){I=F=null;D=false;E=false;B=0;H=0;A.queueRoutes=true;A.routes=[]});it("should init Ext.util.History",function(){expect(Ext.util.History.ready).toBe(true)});describe("should connect route",function(){it("connect simple route",function(){A.connect("foo/bar","handleRoute",F);A.connect("foo/bar","handleRoute",F);return expect(A.routes.length).toBe(2)});it("connect complex route",function(){A.connect("foo/bar",{action:"handleRoute",before:"beforeHandleRoute",controller:F});A.connect("foo/bar",{action:"handleRoute",before:"beforeHandleRoute",controller:F});A.connect("foo/bar",{action:"handleRoute",before:"beforeHandleRoute",controller:F});expect(A.routes.length).toBe(3)});it("connect using draw method",function(){A.draw(function(J){J.connect("foo/bar",{controller:F,action:"handleRoute"});J.connect("foo/bar",{controller:F,action:"handleRoute"})});expect(A.routes.length).toBe(2)})});it("should clear routes",function(){A.connect("foo/bar","handleRoute",F);A.connect("foo/baz","handleRoute",F);A.clear();expect(A.routes.length).toBe(0)});it("should disconnect routes for a controller",function(){A.connect("foo/bar","handleRoute",F);A.connect("foo/bar","handleRoute",I);A.disconnectAll(I);expect(A.routes.length).toBe(1)});describe("should recognize token",function(){it("recognize 'foo/bar'",function(){A.connect(C,"handleRoute",F);A.connect(C+"/boom","handleRoute",F);expect(A.recognize(C)).toBeDefined()})});it("should fire the unmatchedroute event if no matching routes are found",function(){A.connect("foo","handleRoute",F);A.application=new Ext.util.Observable();spyOn(A.application,"fireEvent");A.onStateChange("bar");expect(A.application.fireEvent).toHaveBeenCalledWith("unmatchedroute","bar")});it("should execute multiple tokens",function(){A.connect(C,"handleRoute",F);A.connect(G,{action:"handleRoute",before:"beforeHandleRoute"},F);A.onStateChange("foo/bar|foo2/2");expect(H+B).toBe(3)});it("should execute on History change",function(){A.queueRoutes=false;A.connect("foo/bar","handleRoute",F);A.onStateChange(C);expect(D).toBe(true)})})