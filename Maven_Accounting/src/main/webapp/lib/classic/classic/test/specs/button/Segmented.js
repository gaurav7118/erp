describe("Ext.button.Segmented",function(){var A;function B(D){A=Ext.create(Ext.apply({xtype:"segmentedbutton",renderTo:document.body},D))}function C(D){jasmine.fireMouseEvent(A.items.getAt(D).el,"click")}afterEach(function(){A.destroy()});describe("value",function(){describe("allowMultiple:false",function(){function D(E){A=Ext.create(Ext.apply({xtype:"segmentedbutton",renderTo:document.body,items:[{text:"Foo",value:"foo"},{text:"Bar"}]},E))}it("should initialize with a null value",function(){D();expect(A.getValue()).toBeNull();expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(false)});it("should initialize with a value",function(){D({value:"foo"});expect(A.getValue()).toBe("foo");expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false)});it("should initialize with an index value",function(){D({value:1});expect(A.getValue()).toBe(1);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(true)});it("should set a null value",function(){D({value:"foo"});A.setValue(null);expect(A.getValue()).toBe(null);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(false)});it("should set a value",function(){D();A.setValue("foo");expect(A.getValue()).toBe("foo");expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false)});it("should set an index value",function(){D();A.setValue(1);expect(A.getValue()).toBe(1);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(true)});it("should set the value if a button is initialized with pressed:true",function(){D({items:[{text:"Foo",value:"foo",pressed:true}]});expect(A.getValue()).toBe("foo");expect(A.items.getAt(0).pressed).toBe(true)});it("should set the index value if a button with no value is initialized with pressed:true",function(){D({items:[{text:"Foo"},{text:"Bar",pressed:true}]});expect(A.getValue()).toBe(1);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(true)});it("should set the value when a button is pressed by the user",function(){D();C(0);expect(A.getValue()).toBe("foo");expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false);C(1);expect(A.getValue()).toBe(1);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(true)});it("should transform an index into a value if button value is available",function(){D();A.setValue(0);expect(A.getValue()).toBe("foo");expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false)});it("should throw an error if multiple values are set",function(){D();expect(function(){A.setValue(["foo",1])}).toThrow("Cannot set multiple values when allowMultiple is false")});it("should throw an error if no button value is matched",function(){D({id:"my-button"});expect(function(){A.setValue("blah")}).toThrow("Invalid value 'blah' for segmented button: 'my-button'")});it("should thow an error if index value is out of bounds",function(){D({id:"my-button"});expect(function(){A.setValue(2)}).toThrow("Invalid value '2' for segmented button: 'my-button'")});it("should error if multiple items have the same value",function(){D({id:"my-button"});expect(function(){A.add({text:"Foo2",value:"foo"})}).toThrow("Segmented button 'my-button' cannot contain multiple items with value: 'foo'");Ext.resumeLayouts()});describe("allowDepress:true",function(){it("should set the value to null when a button is depressed",function(){D({allowDepress:true,items:[{text:"Foo",pressed:true}]});C(0);expect(A.getValue()).toBe(null);expect(A.items.getAt(0).pressed).toBe(false)})})});describe("allowMultiple:true",function(){function D(E){A=Ext.create(Ext.apply({xtype:"segmentedbutton",allowMultiple:true,renderTo:document.body,items:[{text:"Seg",value:"seg"},{text:"Men"},{text:"Ted",value:"ted"}]},E))}it("should initialize with a null value",function(){D();expect(A.getValue()).toEqual([]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(false)});it("should initialize with an empty array",function(){D({value:[]});expect(A.getValue()).toEqual([]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(false)});it("should initialize with a single value",function(){D({value:["seg"]});expect(A.getValue()).toEqual(["seg"]);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(false)});it("should initialize with a single index value",function(){D({value:[1]});expect(A.getValue()).toEqual([1]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(true);expect(A.items.getAt(2).pressed).toBe(false)});it("should initialize with multiple values",function(){D({value:["seg","ted"]});expect(A.getValue()).toEqual(["seg","ted"]);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(true)});it("should initialize with multiple index values",function(){D({value:[0,1]});expect(A.getValue()).toEqual(["seg",1]);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(true);expect(A.items.getAt(2).pressed).toBe(false)});it("should set a null value",function(){D({value:["seg","ted"]});A.setValue(null);expect(A.getValue()).toEqual([]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(false)});it("should set the value to emtpy array",function(){D({value:["seg","ted"]});A.setValue([]);expect(A.getValue()).toEqual([]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(false)});it("should set a single value",function(){D();A.setValue(["ted"]);expect(A.getValue()).toEqual(["ted"]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(true)});it("should set a single index value",function(){D();A.setValue([1]);expect(A.getValue()).toEqual([1]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(true);expect(A.items.getAt(2).pressed).toBe(false)});it("should set multiple values",function(){D();A.setValue(["seg","ted"]);expect(A.getValue()).toEqual(["seg","ted"]);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(true)});it("should set multiple index values",function(){D();A.setValue([1,2]);expect(A.getValue()).toEqual([1,"ted"]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(true);expect(A.items.getAt(2).pressed).toBe(true)});it("should set values for buttons that are initialized with pressed:true",function(){D({items:[{text:"Seg",value:"seg",pressed:true},{text:"Men",pressed:true},{text:"Ted",value:"ted"}]});expect(A.getValue()).toEqual(["seg",1]);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(true);expect(A.items.getAt(2).pressed).toBe(false)});it("should set the value when a button is pressed by the user",function(){D();C(0);expect(A.getValue()).toEqual(["seg"]);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(false);C(1);expect(A.getValue()).toEqual(["seg",1]);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(true);expect(A.items.getAt(2).pressed).toBe(false);C(0);expect(A.getValue()).toEqual([1]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(true);expect(A.items.getAt(2).pressed).toBe(false);C(1);expect(A.getValue()).toEqual([]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(false)});it("should accept a non-array value",function(){D({value:"seg"});expect(A.getValue()).toEqual(["seg"]);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(false)});it("should accept a non-array index value",function(){D({value:2});expect(A.getValue()).toEqual(["ted"]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(true)});it("should throw an error if no button value is matched",function(){D({id:"my-button"});expect(function(){A.setValue(["seg","blah"])}).toThrow("Invalid value 'blah' for segmented button: 'my-button'")});it("should thow an error if an index value is out of bounds",function(){D({id:"my-button"});expect(function(){A.setValue(["seg",3,"ted"])}).toThrow("Invalid value '3' for segmented button: 'my-button'")});it("should fire a change event",function(){var F=[],E=[];D({listeners:{change:function(G,I,H){F[F.length]=I;E[E.length]=H}}});A.setValue([1,2]);expect(A.getValue()).toEqual([1,"ted"]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(true);expect(A.items.getAt(2).pressed).toBe(true);C(1);expect(A.getValue()).toEqual(["ted"]);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(true);expect(F[0]).toEqual([1,"ted"]);expect(E[0]).toEqual([]);expect(F[1]).toEqual(["ted"]);expect(E[1]).toEqual([1,"ted"])});describe("forceSelection",function(){it("should initialize with the value of the first button if none configured pressed",function(){D({forceSelection:true});expect(A.getValue()).toEqual(["seg"]);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(false);C(0);expect(A.getValue()).toEqual(["seg"]);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false);expect(A.items.getAt(2).pressed).toBe(false)})})});describe("with a viewmodel",function(){function D(E){A=Ext.create(Ext.apply({xtype:"segmentedbutton",renderTo:document.body,items:[{text:"Foo",value:"foo"},{text:"Bar",value:"bar"},{text:"Baz",value:"baz"}]},E))}it("should have the defaultBindProperty be value",function(){D();expect(A.defaultBindProperty).toBe("value")});it("should be able to set an initial value from the view model",function(){var E=new Ext.app.ViewModel({data:{value:"baz"}});D({viewModel:E,bind:"{value}"});E.notify();expect(A.getValue()).toBe("baz")});it("should react to view model changes",function(){var E=new Ext.app.ViewModel();D({viewModel:E,bind:"{value}"});E.set("value","foo");E.notify();expect(A.getValue()).toBe("foo")});it("should update the value in the view model",function(){var E=new Ext.app.ViewModel();D({viewModel:E,bind:"{value}"});A.setValue("bar");expect(E.get("value")).toBe("bar")})})});describe("the toggle event",function(){var D;beforeEach(function(){D=jasmine.createSpy();B({allowMultiple:true,items:[{text:"Seg"},{text:"Men"},{text:"Ted",pressed:true}],listeners:{toggle:D}})});it("should fire the toggle event when a child button is pressed",function(){var E=A.items.getAt(1);E.setPressed(true);expect(D.callCount).toBe(1);expect(D.mostRecentCall.args[0]).toBe(A);expect(D.mostRecentCall.args[1]).toBe(E);expect(D.mostRecentCall.args[2]).toBe(true)});it("should fire the toggle event when a child button is depressed",function(){var E=A.items.getAt(2);E.setPressed(false);expect(D.callCount).toBe(1);expect(D.mostRecentCall.args[0]).toBe(A);expect(D.mostRecentCall.args[1]).toBe(E);expect(D.mostRecentCall.args[2]).toBe(false)})});describe("allowToggle",function(){it("should allow buttons to be toggled when allowToggle is true",function(){B({items:[{text:"Seg"},{text:"Men"},{text:"Ted"}]});expect(A.items.getAt(0).enableToggle).toBe(true);expect(A.items.getAt(1).enableToggle).toBe(true);expect(A.items.getAt(2).enableToggle).toBe(true);C(0);expect(A.items.getAt(0).pressed).toBe(true);C(1);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(true)});it("should not allow toggling when allowToggle is false",function(){B({allowToggle:false,items:[{text:"Seg"},{text:"Men"},{text:"Ted"}]});expect(A.items.getAt(0).enableToggle).toBe(false);expect(A.items.getAt(1).enableToggle).toBe(false);expect(A.items.getAt(2).enableToggle).toBe(false);C(0);expect(A.items.getAt(0).pressed).toBe(false)})});describe("allowMultiple",function(){describe("when false",function(){it("should use a toggleGroup",function(){B({items:[{text:"Seg"},{text:"Men"},{text:"Ted"}]});expect(A.items.getAt(0).toggleGroup).toBe(A.getId());expect(A.items.getAt(1).toggleGroup).toBe(A.getId());expect(A.items.getAt(2).toggleGroup).toBe(A.getId())});it("should not use a toggleGroup when allowToggle is false",function(){B({allowToggle:false,items:[{text:"Seg"},{text:"Men"},{text:"Ted"}]});expect(A.items.getAt(0).toggleGroup).toBeUndefined();expect(A.items.getAt(1).toggleGroup).toBeUndefined();expect(A.items.getAt(2).toggleGroup).toBeUndefined()});it("should only allow one button to be pressed at a time",function(){B({items:[{text:"Seg"},{text:"Men"}]});C(0);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false);C(1);expect(A.items.getAt(0).pressed).toBe(false);expect(A.items.getAt(1).pressed).toBe(true)});it("should not allow buttons to be depressed",function(){B({items:[{text:"Seg"},{text:"Men"}]});C(0);expect(A.items.getAt(0).pressed).toBe(true);C(0);expect(A.items.getAt(0).pressed).toBe(true)})});describe("when true",function(){beforeEach(function(){B({allowMultiple:true,items:[{text:"Seg"},{text:"Men"}]})});it("should not use a toggleGroup",function(){expect(A.items.getAt(0).toggleGroup).toBeUndefined();expect(A.items.getAt(1).toggleGroup).toBeUndefined()});it("should allow multiple buttons to be pressed",function(){C(0);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(false);C(1);expect(A.items.getAt(0).pressed).toBe(true);expect(A.items.getAt(1).pressed).toBe(true)});it("should allow buttons to be depressed",function(){C(0);expect(A.items.getAt(0).pressed).toBe(true);C(0);expect(A.items.getAt(0).pressed).toBe(false)})})});describe("allowDepress",function(){function D(E){A=Ext.create(Ext.apply({xtype:"segmentedbutton",renderTo:document.body,items:[{text:"Seg"},{text:"Men"},{text:"Ted"}]},E))}describe("when true",function(){it("should allow buttons to be depressed",function(){D({allowDepress:true});C(0);expect(A.items.getAt(0).pressed).toBe(true);C(0);expect(A.items.getAt(0).pressed).toBe(false)})});describe("when false",function(){it("should not allow buttons to be depressed",function(){D();C(0);expect(A.items.getAt(0).pressed).toBe(true);C(0);expect(A.items.getAt(0).pressed).toBe(true)});it("should have no effect when allowMultiple is true",function(){D({allowMultiple:true,allowDepress:false});C(0);expect(A.items.getAt(0).pressed).toBe(true);C(0);expect(A.items.getAt(0).pressed).toBe(false)})})});describe("disable/enable",function(){it("should disable the child buttons when disable() is called",function(){B({items:[{text:"foo"},{text:"bar"}]});expect(A.items.getAt(0).disabled).toBe(false);expect(A.items.getAt(1).disabled).toBe(false);A.disable();expect(A.items.getAt(0).disabled).toBe(true);expect(A.items.getAt(1).disabled).toBe(true)});it("should enable the child buttons when enable() is called",function(){B({disabled:true,items:[{text:"foo"},{text:"bar"}]});expect(A.items.getAt(0).disabled).toBe(true);expect(A.items.getAt(1).disabled).toBe(true);A.enable();expect(A.items.getAt(0).disabled).toBe(false);expect(A.items.getAt(1).disabled).toBe(false)});it("should not mask the element when disabled",function(){B();expect(A.maskOnDisable).toBe(false)})});describe("defaultUI",function(){it("should default to 'default'",function(){B({items:[{text:"Foo"}]});expect(A.getDefaultUI()).toBe("default");expect(A.items.getAt(0).ui).toBe("default-small")});it("should allow buttons to configure their own UI",function(){B({items:[{text:"Foo",ui:"bar"}]});expect(A.getDefaultUI()).toBe("default");expect(A.items.getAt(0).ui).toBe("bar-small")});it("should use the defaultUI as the UI of the items",function(){B({defaultUI:"bob",items:[{text:"Foo"}]});expect(A.items.getAt(0).ui).toBe("bob-small")});it("should not use the defaultUI for items that have a ui on the item instance",function(){B({defaultUI:"bob",items:[{text:"Foo",ui:"hooray"}]});expect(A.items.getAt(0).ui).toBe("hooray-small")});it("should not use the defaultUI for items that have a ui on the item class",function(){Ext.define("spec.Btn",{extend:"Ext.button.Button",ui:"baz"});B({defaultUI:"bob",items:[{xclass:"spec.Btn",text:"Foo"}]});expect(A.items.getAt(0).ui).toBe("baz-small");Ext.undefine("spec.Btn")});it("should not use the defaultUI for items that have a ui of 'default' on the item instance",function(){B({defaultUI:"bob",items:[{text:"Foo",ui:"default"}]});expect(A.items.getAt(0).ui).toBe("default-small")})});describe("item classes",function(){var E="x-segmented-button-first",F="x-segmented-button-middle",G="x-segmented-button-last";function D(H){var J,I;H=H||A.items.items;J=H.length;if(J===1){I=H[0].getEl();expect(I.hasCls(E)).toBe(false);expect(I.hasCls(F)).toBe(false);expect(I.hasCls(G)).toBe(false)}else{Ext.each(H,function(L,K){I=L.getEl();if(K===0){expect(I.hasCls(E)).toBe(true);expect(I.hasCls(F)).toBe(false);expect(I.hasCls(G)).toBe(false)}else{if(K===J-1){expect(I.hasCls(E)).toBe(false);expect(I.hasCls(F)).toBe(false);expect(I.hasCls(G)).toBe(true)}else{expect(I.hasCls(E)).toBe(false);expect(I.hasCls(F)).toBe(true);expect(I.hasCls(G)).toBe(false)}}})}}it("should have the correct classes when there is only one item",function(){B({items:[{text:"Seg"}]});D()});it("should have the correct classes when there are two items",function(){B({items:[{text:"Seg"},{text:"Men"}]});D()});it("should have the correct classes when there are three items",function(){B({items:[{text:"Seg"},{text:"Men"},{text:"Ted"}]});D()});it("should have the correct classes when there are four items",function(){B({items:[{text:"Seg"},{text:"Men"},{text:"Ted"},{text:"Btn"}]});D()});it("should have the correct classes when items are added or removed",function(){B({items:[{text:"Seg"}]});A.add({text:"Men"});D();A.insert(0,{text:"Ted"});D();A.insert(1,{text:"Btn"});D();A.remove(2);D();A.remove(2);D();A.remove(0);D()});it("should have the correct classes when items are shown or hidden",function(){B({items:[{text:"Seg",hidden:true},{text:"Men"},{text:"Ted",hidden:true},{text:"Btn",hidden:true}]});var H=A.items;H.getAt(3).show();D([H.getAt(1),H.getAt(3)]);H.getAt(0).show();D([H.getAt(0),H.getAt(1),H.getAt(3)]);H.getAt(2).show();D([H.getAt(0),H.getAt(1),H.getAt(2),H.getAt(3)]);H.getAt(1).hide();D([H.getAt(0),H.getAt(2),H.getAt(3)]);H.getAt(3).hide();D([H.getAt(0),H.getAt(2)]);H.getAt(0).hide();D([H.getAt(2)])})});describe("layout",function(){var H={1:"width",2:"height",3:"width and height"},I={0:"",1:"width:87px;",2:"height:94px;",3:"width:87px;height:94px;"},G={0:"",1:"width:86px;",2:"height:95px;",3:"width:86px;height:95px;"},F={0:"",1:"width:86px;",2:"height:94px;",3:"width:86px;height:94px;"},E={0:"",1:"width:86px;",2:"height:94px;",3:"width:86px;height:94px;"};function D(K){function J(L){var N=L.vertical,M='<div style="display:inline-block;background:red;'+(N?G:I)[K]+'">&nbsp</div>',O='<div style="display:inline-block;background:red;'+(N?E:F)[K]+'">&nbsp</div>';A=Ext.create(Ext.apply({xtype:"segmentedbutton",renderTo:document.body,width:(K&1)?null:N?100:300,height:(K&2)?null:N?300:100,items:[{text:O},{text:M},{text:M}]},L))}describe((K?("shrink wrap "+H[K]):"fixed width and height"),function(){it("should layout horizontal",function(){J({});expect(A).toHaveLayout({el:{w:300,h:100},items:{0:{el:{x:0,y:0,w:100,h:100}},1:{el:{x:100,y:0,w:100,h:100}},2:{el:{x:200,y:0,w:100,h:100}}}})});it("should layout vertical",function(){J({vertical:true});var L=(K&2);expect(A).toHaveLayout({el:{w:100,h:300},items:{0:{el:{x:0,y:0,w:100,h:L?100:[100,104]}},1:{el:{x:0,y:L?100:[100,103],w:100,h:L?100:[98,100]}},2:{el:{x:0,y:L?200:[200,202],w:100,h:L?100:[98,100]}}}})})})}D(0);D(1);D(2);D(3);describe("horizontal",function(){it("should divide width evenly among non-widthed items",function(){B({width:300,height:100,items:[{text:"Seg",width:50},{text:"Men"},{text:"Ted"}]});expect(A).toHaveLayout({el:{w:300,h:100},items:{0:{el:{x:0,y:0,w:50,h:100}},1:{el:{x:50,y:0,w:125,h:100}},2:{el:{x:175,y:0,w:125,h:100}}}})});it("should stretch all items to the height of the largest item",function(){B({width:300,items:[{text:"Seg",height:100},{text:"Men"},{text:"Ted"}]});expect(A).toHaveLayout({el:{w:300,h:100},items:{0:{el:{x:0,y:0,w:100,h:100}},1:{el:{x:100,y:0,w:100,h:100}},2:{el:{x:200,y:0,w:100,h:100}}}})});if(!Ext.supports.CSS3BorderRadius){it("should stretch the frameBody when the width of the segmented button is stretched",function(){B({width:300,items:[{text:"Foo"},{text:"Bar"}]});var J=A.items.getAt(1);expect(J.frameBody.getWidth()).toBe(150-J.getFrameInfo().right)})}});describe("vertical",function(){it("should divide height evenly among non-heighted items",function(){B({vertical:true,width:100,height:300,items:[{text:"Seg",height:50},{text:"Men"},{text:"Ted"}]});expect(A).toHaveLayout({el:{w:100,h:300},items:{0:{el:{x:0,y:0,w:100,h:Ext.isIE8?51:50}},1:{el:{x:0,y:Ext.isIE8?51:50,w:100,h:125}},2:{el:{x:0,y:175,w:100,h:125}}}})});it("should stretch all items to the width of the largest item",function(){B({vertical:true,items:[{text:"Seg",width:100},{text:"Men"},{text:"Ted"}]});expect(A).toHaveLayout({el:{w:100},items:{0:{el:{x:0,y:0,w:100,h:22}},1:{el:{x:0,y:22,w:100,h:21}},2:{el:{x:0,y:43,w:100,h:21}}}})})})})})