describe("Ext.container.Monitor",function(){var F,B,I,G,J,H,A,E,D,C;beforeEach(function(){E=new Ext.Component({foo:true});D=new Ext.Component();C=new Ext.Component({foo:true});F=new Ext.container.Container({defaultType:"container"});I=function(K){B=new Ext.container.Monitor(K||{selector:"[foo]",addHandler:J,removeHandler:H,invalidateHandler:A});B.bind(F);B.getItems()};G=function(M,N){var K={xtype:"container"},L=K;while(M>1){L.items={xtype:"container"};L=L.items;--M}if(N){L.items=N}return K};J=jasmine.createSpy();H=jasmine.createSpy();A=jasmine.createSpy()});afterEach(function(){Ext.destroy(F,E,D,C);G=I=B=J=H=null});describe("initialization",function(){it("should match direct children of the target",function(){F.add(E,D,C);I();expect(J.calls.length).toBe(2);expect(J.calls[0].args[0]).toBe(E);expect(J.calls[1].args[0]).toBe(C)});it("should match docked items",function(){F.destroy();F=new Ext.panel.Panel({dockedItems:[{xtype:"toolbar",items:E}]});I();expect(J.calls.length).toBe(1);expect(J.calls[0].args[0]).toBe(E)});it("should match Queryable items that aren't containers",function(){F.add(new Ext.button.Button({menu:{items:E}}));I();expect(J.calls.length).toBe(1);expect(J.calls[0].args[0]).toBe(E)});it("should match items inside direct containers of the target",function(){F.add(G(1,E),G(1,D),G(1,C));I();expect(J.calls.length).toBe(2);expect(J.calls[0].args[0]).toBe(E);expect(J.calls[1].args[0]).toBe(C)});it("should match items inside deep containers of the target",function(){F.add(G(4,E),G(5,D),G(10,C));I();expect(J.calls.length).toBe(2);expect(J.calls[0].args[0]).toBe(E);expect(J.calls[1].args[0]).toBe(C)})});describe("dynamic adding",function(){var K=function(L){expect(B.getItems().contains(L)).toBe(true)};it("should match a direct item of the target",function(){I();F.add(E);expect(J.calls.length).toBe(1);expect(J.calls[0].args[0]).toBe(E);K(E)});it("should match docked items",function(){F.destroy();F=new Ext.panel.Panel();I();F.addDocked({xtype:"toolbar",items:E});expect(J.calls.length).toBe(1);expect(J.calls[0].args[0]).toBe(E);K(E)});it("should match items inside direct children of the target",function(){I();var L=F.add({});L.add(E);expect(J.calls.length).toBe(1);expect(J.calls[0].args[0]).toBe(E);K(E)});it("should match Queryable items that aren't containers",function(){I();F.add(new Ext.button.Button({menu:{items:E}}));expect(J.calls.length).toBe(1);expect(J.calls[0].args[0]).toBe(E);K(E)});it("should match items inside deep containers of the target",function(){I();var L=new Ext.container.Container();F.add(G(10,L));L.add(E);expect(J.calls.length).toBe(1);expect(J.calls[0].args[0]).toBe(E);K(E)});it("should match items directly inside dynamically added containers",function(){I();F.add(G(1,E));expect(J.calls.length).toBe(1);expect(J.calls[0].args[0]).toBe(E);K(E)});it("should match deep items inside dynamically added containers",function(){I();F.add(G(5,E));expect(J.calls.length).toBe(1);expect(J.calls[0].args[0]).toBe(E);K(E)});it("should match items inside dynamic containers",function(){I();var L=new Ext.container.Container();F.add(G(2,L));L.add(G(3,E));expect(J.calls.length).toBe(1);expect(J.calls[0].args[0]).toBe(E);K(E)})});describe("removing",function(){var K=function(L){expect(B.getItems().contains(L)).toBe(false)};it("should handle removal of direct children of the target",function(){F.add(E);I();F.remove(E);expect(H.calls.length).toBe(1);expect(H.calls[0].args[0]).toBe(E);K(E)});it("should handle the removal of docked items",function(){F.destroy();F=new Ext.panel.Panel({dockedItems:[{xtype:"toolbar",items:E}]});I();F.getDockedItems()[0].remove(E);expect(H.calls.length).toBe(1);expect(H.calls[0].args[0]).toBe(E);K(E)});it("should handle the removal of Queryable items that aren't containers",function(){F.add(new Ext.button.Button({menu:{items:E}}));I();F.remove(0);expect(J.calls.length).toBe(1);expect(J.calls[0].args[0]).toBe(E);K(E)});it("should handle removal of items inside direct children of the target",function(){F.add({xtype:"container",items:E});I();F.items.first().remove(E);expect(H.calls.length).toBe(1);expect(H.calls[0].args[0]).toBe(E);K(E)});it("should handle the removal of items in deep containers",function(){var L=new Ext.container.Container({items:E});F.add(G(10,L));I();L.remove(E);expect(H.calls.length).toBe(1);expect(H.calls[0].args[0]).toBe(E);K(E)});it("should handle the removal of a container that contains an item",function(){var L=new Ext.container.Container({items:E});F.add(L);I();F.remove(L,false);expect(H.calls.length).toBe(1);expect(H.calls[0].args[0]).toBe(E);K(E);L.destroy()});it("should handle the removal of a deep container that contains an item",function(){var L=new Ext.container.Container({items:E});F.add(G(10,L));I();L.ownerCt.remove(L,false);expect(H.calls.length).toBe(1);expect(H.calls[0].args[0]).toBe(E);K(E);L.destroy()});it("should update the collection when removing children that contain items matching the selector",function(){F.add({xtype:"container",items:E});I();F.remove(0);K(E)});it("should update the collection when destroying a container that contains items",function(){F.add({xtype:"container",items:E});I();F.items.first().destroy();K(E)});describe("container listeners",function(){it("should remove the listeners on a direct child ct",function(){var L=new Ext.container.Container({items:E});F.add(L);I();F.remove(L,false);expect(L.hasListener("add")).toBe(false);expect(L.hasListener("remove")).toBe(false);L.destroy()});it("should remove listeners on all child containers",function(){var M=new Ext.container.Container(),L=new Ext.container.Container(),P=new Ext.container.Container(),O=new Ext.container.Container(),N=new Ext.container.Container();O.add(N);P.add(O);L.add(P);M.add(L);F.add(M);I();P.remove(O,false);expect(O.hasListener("add")).toBe(false);expect(O.hasListener("remove")).toBe(false);expect(N.hasListener("add")).toBe(false);expect(N.hasListener("remove")).toBe(false);Ext.destroy(M,L,P,O,N)})});it("should call the invalidateHandler when destroying a container",function(){var L=new Ext.container.Container({items:E});F.add(L);I();F.remove(L);expect(A).toHaveBeenCalledWith(B)})})})