describe("Ext.form.CheckboxGroup",function(){var B;function A(C){C=C||{};B=new Ext.form.CheckboxGroup(C)}afterEach(function(){if(B){B.destroy()}B=null});describe("initial value",function(){it("should set its originalValue to the aggregated value of its sub-checkboxes",function(){A({items:[{name:"one",checked:true},{name:"two",checked:true,inputValue:"two-1"},{name:"two",checked:false,inputValue:"two-2"},{name:"two",checked:true,inputValue:"two-3"}]});expect(B.originalValue).toEqual({one:"on",two:["two-1","two-3"]})});it("should set the values of its sub-checkboxes if the value config is specified",function(){A({items:[{name:"one",checked:true},{name:"two",checked:true,inputValue:"two-1"},{name:"two",checked:false,inputValue:"two-2"},{name:"two",checked:true,inputValue:"two-3"}],value:{two:["two-1","two-2"]}});expect(B.originalValue).toEqual({two:["two-1","two-2"]});expect(B.items.getAt(0).getValue()).toBe(false);expect(B.items.getAt(1).getValue()).toBe(true);expect(B.items.getAt(2).getValue()).toBe(true);expect(B.items.getAt(3).getValue()).toBe(false)})});describe("sizing",function(){it("should respect a configured height",function(){A({renderTo:Ext.getBody(),height:100,width:300,vertical:true,columns:2,scrollable:"y",items:(function(){var D=[],C;for(C=0;C<50;++C){D.push({xtype:"checkbox"})}return D})()});expect(B.getHeight()).toBe(100)})});it("should fire the change event when a sub-checkbox is changed",function(){A({items:[{name:"foo",checked:true}]});var C=jasmine.createSpy();B.on("change",C);B.items.getAt(0).setValue(false);expect(C.calls[0].args).toEqual([B,{},{foo:"on"}]);B.items.getAt(0).setValue(true);expect(C.calls[1].args).toEqual([B,{foo:"on"},{}])});describe("getValue",function(){it("should return an object with keys matching the names of checked items",function(){A({items:[{name:"one",checked:true},{name:"two"}]});var C=B.getValue();expect(C.one).toBeDefined();expect(C.two).not.toBeDefined()});it("should give the inputValue of a single checked item with a given name",function(){A({items:[{name:"one",checked:true,inputValue:"foo"},{name:"two"}]});expect(B.getValue().one).toEqual("foo")});it("should give an array of inputValues of multiple checked items with the same name",function(){A({items:[{name:"one",checked:true,inputValue:"1"},{name:"one",checked:true,inputValue:"2"},{name:"one"}]});expect(B.getValue().one).toEqual(["1","2"])})});describe("getSubmitData",function(){it("should return null",function(){A({value:{foo:true},items:[{name:"foo",inputValue:"bar"}]});expect(B.getSubmitData()).toBeNull()})});describe("getModelData",function(){it("should return null",function(){A({value:{foo:true},items:[{name:"foo",inputValue:"bar"}]});expect(B.getModelData()).toBeNull()})});describe("reset",function(){it("should reset each checkbox to its initial checked state",function(){A({items:[{name:"one",checked:true},{name:"two"},{name:"three",checked:true}]});B.setValue({one:false,two:true});B.reset();expect(B.items.getAt(0).getValue()).toBe(true);expect(B.items.getAt(1).getValue()).toBe(false);expect(B.items.getAt(2).getValue()).toBe(true)})});describe("allowBlank = false",function(){it("should return a validation error when no sub-checkboxes are checked",function(){A({allowBlank:false,items:[{name:"one"}]});expect(B.isValid()).toBe(false)});it("should not return an error when a sub-checkbox is checked",function(){A({allowBlank:false,items:[{name:"one",checked:true}]});expect(B.isValid()).toBe(true)});it("should fire the validitychange event with true when checking a box previously undefined",function(){A({allowBlank:false,items:[{name:"one"}]});var C;B.on("validitychange",function(E,D){C=D});B.setValue({one:true});expect(C).toBe(true)});it("should fire the validitychange event with true when unchecking a box",function(){A({allowBlank:false,items:[{name:"one",checked:true}]});var C;B.on("validitychange",function(E,D){C=D});B.setValue({one:false});expect(C).toBe(false)})});describe("setValue",function(){describe("with a view model",function(){it("should be able to set the value with inline data",function(){var C=new Ext.app.ViewModel({data:{theValue:{foo:true,baz:true}}});A({renderTo:Ext.getBody(),items:[{name:"foo"},{name:"bar"},{name:"baz"}],viewModel:C,bind:{value:"{theValue}"}});C.notify();expect(B.getValue()).toEqual({foo:"on",baz:"on"})});it("should be able to set the value with a defined viewmodel",function(){Ext.define("spec.Bar",{extend:"Ext.app.ViewModel",alias:"viewmodel.bar",data:{theValue:{foo:true,baz:true}}});A({renderTo:Ext.getBody(),items:[{name:"foo"},{name:"bar"},{name:"baz"}],viewModel:{type:"bar"},bind:{value:"{theValue}"}});B.getViewModel().notify();expect(B.getValue()).toEqual({foo:"on",baz:"on"});Ext.undefine("spec.Bar");Ext.Factory.viewModel.instance.clearCache()})})});describe("ARIA",function(){function C(D,E){jasmine.expectAriaAttr(B,D,E)}beforeEach(function(){A({renderTo:Ext.getBody(),items:[{name:"foo"},{name:"bar"},{name:"baz"}]})});describe("ariaEl",function(){it("should have containerEl as ariaEl",function(){expect(B.ariaEl).toBe(B.containerEl)})});describe("attributes",function(){it("should have group role",function(){C("role","group")});it("should have aria-owns",function(){var F=B.down("[name=foo]").inputEl,D=B.down("[name=bar]").inputEl,E=B.down("[name=baz]").inputEl;C("aria-owns",F.id+" "+D.id+" "+E.id)})})})})