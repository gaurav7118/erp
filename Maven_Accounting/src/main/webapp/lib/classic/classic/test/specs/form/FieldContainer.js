describe("Ext.form.FieldContainer",function(){var B,A;beforeEach(function(){A=function(C){C=C||{};B=new Ext.form.FieldContainer(C)}});afterEach(function(){if(B){B.destroy()}B=A=null});describe("FieldAncestor",function(){it("should fire an event whenever validitychange fires on a child item",function(){var C;A({items:[{xtype:"textfield",allowBlank:false}]});B.on("fieldvaliditychange",function(){C=true});B.items.first().setValue("Foo");expect(C).toBe(true)});it("should fire an event whenever errorchange fires on a child item",function(){var C;A({items:[{xtype:"textfield",allowBlank:false}]});B.on("fielderrorchange",function(){C=true});B.items.first().markInvalid("Foo");expect(C).toBe(true)})});describe("label",function(){it("should not hide child labels when the field container label is not visible",function(){A({renderTo:Ext.getBody(),items:[{xtype:"textfield",fieldLabel:"SomeLabel"}]});expect(B.items.first().labelEl.isVisible()).toBe(true)})});describe("using box layout",function(){it("should add its layout's targetCls to its containerEl",function(){A({renderTo:Ext.getBody(),layout:"hbox",items:[{xtype:"textfield",fieldLabel:"SomeLabel"}]});expect(B.containerEl.hasCls(B.layout.targetCls)).toBe(true)})});describe("combineLabels",function(){it("should combine the labels of its sub-fields",function(){A({defaultType:"textfield",combineLabels:true,items:[{fieldLabel:"One"},{fieldLabel:"Two"}]});expect(B.getFieldLabel()).toEqual("One, Two")});it("should use the labelConnector to combine the labels",function(){A({defaultType:"textfield",combineLabels:true,labelConnector:" - ",items:[{fieldLabel:"One"},{fieldLabel:"Two"}]});expect(B.getFieldLabel()).toEqual("One - Two")});it("should update the combined label when a field is added to the tree",function(){A({defaultType:"textfield",combineLabels:true,items:[{fieldLabel:"One"},{fieldLabel:"Two"}]});B.add({fieldLabel:"Three"});expect(B.getFieldLabel()).toEqual("One, Two, Three")});it("should update the combined label when a field is removed from the tree",function(){A({defaultType:"textfield",combineLabels:true,items:[{fieldLabel:"One"},{fieldLabel:"Two"},{fieldLabel:"Three"}]});B.remove(B.items.getAt(1));expect(B.getFieldLabel()).toEqual("One, Three")});it("should use the fieldLabel config rather than combining",function(){A({defaultType:"textfield",combineLabels:true,fieldLabel:"Main Label",items:[{fieldLabel:"One"},{fieldLabel:"Two"}]});expect(B.getFieldLabel()).toEqual("Main Label")});it("should not combine labels if combineLabels is false",function(){A({defaultType:"textfield",combineLabels:false,items:[{fieldLabel:"One"},{fieldLabel:"Two"}]});expect(B.getFieldLabel()).toEqual("")})});xdescribe("combineErrors",function(){it("should display no error when there are no sub-field errors",function(){runs(function(){A({renderTo:Ext.getBody(),combineErrors:true,defaultType:"textfield",items:[{fieldLabel:"One"},{fieldLabel:"Two"}]})});waits(20);runs(function(){expect(B.errorEl.dom).hasHTML("")})});it("should display a combined error when there are sub-field errors",function(){runs(function(){A({renderTo:Ext.getBody(),combineErrors:true,defaultType:"textfield",items:[{fieldLabel:"One",allowBlank:false},{fieldLabel:"Two",allowBlank:false}]});B.items.getAt(0).validate();B.items.getAt(1).validate()});waitsFor(function(){return B.getActiveError().length>0},"population of errorEl");runs(function(){expect(B.getActiveError()).toEqual('<ul><li>One: This field is required</li><li class="last">Two: This field is required</li></ul>')})});it("should remove the combined error when sub-field errors are removed",function(){runs(function(){A({renderTo:Ext.getBody(),combineErrors:true,defaultType:"textfield",items:[{fieldLabel:"One",allowBlank:false},{fieldLabel:"Two",allowBlank:false}]});B.items.getAt(0).validate();B.items.getAt(1).validate()});waitsFor(function(){return B.getActiveError().length>0},"population of errorEl");runs(function(){B.items.getAt(0).setValue("a");B.items.getAt(1).setValue("b")});waitsFor(function(){return B.getActiveError().length===0},"clearing of errorEl")});it("should not combine errors when combineErrors is false",function(){runs(function(){A({renderTo:Ext.getBody(),combineErrors:true,defaultType:"textfield",items:[{fieldLabel:"One"},{fieldLabel:"Two"}]});B.items.getAt(0).validate();B.items.getAt(1).validate()});waits(20);runs(function(){expect(B.errorEl.dom).hasHTML("")})})})})