describe("Ext.form.FieldSet",function(){var B;function A(D,E){D=D||{};Ext.apply(D,{renderTo:E?undefined:Ext.getBody(),name:"test"});B=new Ext.form.FieldSet(D)}function C(D,E){jasmine.expectAriaAttr(B,D,E)}afterEach(function(){if(B){B.destroy()}B=null});describe("collapsibility",function(){var D,E;beforeEach(function(){E=Ext.failedLayouts});afterEach(function(){Ext.destroy(D);D=null});it("should update the hierarchy state when expanding",function(){var F=new Ext.Component();A({collapsed:true,collapsible:true,title:"Foo",items:F});expect(F.isVisible(true)).toBe(false);B.expand();expect(F.isVisible(true)).toBe(true)});it("should update the hierarchy state when collapsing",function(){var F=new Ext.Component();A({collapsible:true,title:"Foo",items:F});expect(F.isVisible(true)).toBe(true);B.collapse();expect(F.isVisible(true)).toBe(false)});it("should allow creating as collapsed",function(){D=Ext.widget({xtype:"window",title:"Test",autoShow:true,shadow:false,items:{xtype:"fieldset",collapsed:true,collapsible:true,title:"Text",items:{width:100,height:100}}});if(E!=Ext.failedLayouts){expect("failedLayout=true").toBe("false")}});it("should be able to start collapsed with a minHeight",function(){D=new Ext.container.Container({width:550,height:300,items:[{xtype:"fieldset",title:"Show Panel",collapsible:true,collapsed:true,minHeight:200,items:[{xtype:"textfield",fieldLabel:"Text"}]}],renderTo:Ext.getBody()});if(E!=Ext.failedLayouts){expect("failedLayout=true").toBe("false")}D.destroy()});it("should be able to collapse with a minHeight",function(){D=new Ext.container.Container({width:550,height:300,items:[{xtype:"fieldset",title:"Show Panel",collapsible:true,collapsed:true,minHeight:200,items:[{xtype:"textfield",fieldLabel:"Text"}]}],renderTo:Ext.getBody()});D.items.first().collapse();if(E!=Ext.failedLayouts){expect("failedLayout=true").toBe("false")}D.destroy()});it("should expand to the minHeight after being collapsed",function(){D=new Ext.container.Container({width:550,height:300,items:[{xtype:"fieldset",title:"Show Panel",collapsible:true,collapsed:true,minHeight:200,items:[{xtype:"textfield",fieldLabel:"Text"}]}],renderTo:Ext.getBody()});var F=D.items.first();F.collapse();F.expand();expect(F.getHeight()).toBe(200);D.destroy()});it("should be able to be shrink wrap collapsed in a box layout",function(){var H=new Ext.container.Container({renderTo:Ext.getBody(),layout:"vbox",items:[{xtype:"fieldset",title:'<div style="width: 180px;">a</div>',collapsed:true}],});var F=H.items.first(),I=F.legend;var G=180+I.getEl().getPadding("lr");expect(I.getWidth()).toBe(G);expect(F.getWidth()).toBe(G+F.getEl().getPadding("lr")+F.getEl().getBorderWidth("lr"));H.destroy()})});describe("defaults",function(){beforeEach(function(){A({})});it("should default to no title",function(){expect(B.title).not.toBeDefined()});it("should default to falsy checkboxToggle",function(){expect(B.checkboxToggle).toBeFalsy()});it("should default to no checkboxName",function(){expect(B.checkboxName).not.toBeDefined()});it("should default to not collapsible",function(){expect(B.collapsible).toBeFalsy()});it("should default to not collapsed",function(){expect(B.collapsed).toBeFalsy()});it("should default to anchor layout",function(){expect(B.layout.type).toEqual("anchor")})});describe("rendering",function(){beforeEach(function(){A({title:"foo"})});it("should have a fieldset as the main element",function(){expect(B.el.dom.tagName.toLowerCase()).toEqual("fieldset")});it("should give the fieldset a class of 'x-fieldset'",function(){expect(B.el.dom.tagName.toLowerCase()).toEqual("fieldset")});it("should create a body element with class 'x-fieldset-body'",function(){expect(B.body).toBeDefined();expect(B.body.hasCls("x-fieldset-body")).toBeTruthy()});it("should have the group role",function(){C("role","group")});it("should have aria-label",function(){C("aria-label","foo field set")});it("should have aria-expanded",function(){C("aria-expanded","true")})});describe("legend",function(){it("should not create the legend component by default",function(){A({});expect(B.legend).not.toBeDefined()});it("should create a legend component when the 'title' config is set",function(){A({title:"Foo"});expect(B.legend).toBeDefined()});it("should create a legend component when the 'checkboxToggle' config is true",function(){A({checkboxToggle:true});expect(B.legend).toBeDefined()});it("should create a legend element for the legend component",function(){A({title:"Foo"});expect(B.legend.el.dom.tagName.toLowerCase()).toEqual("legend")});it("should give the legend element a class of 'x-fieldset-header'",function(){A({title:"Foo"});expect(B.legend.el.hasCls("x-fieldset-header")).toBeTruthy()});describe("title",function(){it("should create a title component when title config is used",function(){A({title:"Foo"});expect(B.titleCmp).toBeDefined()});it("should set the title component's content to the title config value",function(){A({title:"Foo"});expect(B.titleCmp.el.dom).hasHTML("Foo")});it("should give the title component's element a class of 'x-fieldset-header-text'",function(){A({title:"Foo"});expect(B.titleCmp.el.hasCls("x-fieldset-header-text")).toBeTruthy()});it("should set a new title if not rendered and configured with a title",function(){A({title:"Foo"},true);B.setTitle("Bar");B.render(Ext.getBody());expect(B.titleCmp.el.dom).hasHTML("Bar");expect(B.hasCls("x-fieldset-with-title")).toBe(true);expect(B.hasCls("x-fieldset-with-legend")).toBe(true)});it("should set a new title if not rendered and configured without a title",function(){A({},true);B.setTitle("Foo");B.render(Ext.getBody());expect(B.titleCmp.el.dom).hasHTML("Foo");expect(B.hasCls("x-fieldset-with-title")).toBe(true);expect(B.hasCls("x-fieldset-with-legend")).toBe(true)});it("should set a new title if rendered and configured with a title",function(){A({title:"Foo"},true);B.setTitle("Bar");B.render(Ext.getBody());expect(B.titleCmp.el.dom).hasHTML("Bar");expect(B.hasCls("x-fieldset-with-title")).toBe(true);expect(B.hasCls("x-fieldset-with-legend")).toBe(true)});it("should set a new title if rendered and configured without a title",function(){A({},true);B.setTitle("Foo");B.render(Ext.getBody());expect(B.titleCmp.el.dom).hasHTML("Foo");expect(B.hasCls("x-fieldset-with-title")).toBe(true);expect(B.hasCls("x-fieldset-with-legend")).toBe(true)})});describe("checkbox",function(){it("should allow the checkbox value to be set before render",function(){B=new Ext.form.FieldSet({checkboxToggle:true,checkboxName:"a"});B.checkboxCmp.setValue(false);B.render(Ext.getBody());expect(B.checkboxCmp.getValue()).toBe(false)});it("should not create a checkbox component by default",function(){A({title:"Foo"});expect(B.legend.down("checkboxfield")).toBeNull()});it("should create a checkbox component when the checkboxToggle config is true",function(){A({title:"Foo",checkboxToggle:true});expect(B.legend.down("checkboxfield")).not.toBeNull()});it("should give the checkbox a class of 'x-fieldset-header-checkbox'",function(){A({title:"Foo",checkboxToggle:true});expect(B.legend.down("checkboxfield").el.hasCls("x-fieldset-header-checkbox")).toBeTruthy()});it("should set the checkbox's name to the 'checkboxName' config",function(){A({title:"Foo",checkboxToggle:true,checkboxName:"theCheckboxName"});expect(B.legend.down("checkboxfield").name).toEqual("theCheckboxName")});it("should set the checkbox's name to '[fieldset_id]-checkbox' if the 'checkboxName' config is not set",function(){A({title:"Foo",checkboxToggle:true});expect(B.legend.down("checkboxfield").name).toEqual(B.id+"-checkbox")});it("should set the checkbox to checked by default if the collapsed config is not true",function(){A({title:"Foo",checkboxToggle:true});expect(B.legend.down("checkboxfield").getValue()).toBeTruthy()});it("should set the checkbox to unchecked by default if the collapsed config is true",function(){A({title:"Foo",checkboxToggle:true,collapsed:true});expect(B.legend.down("checkboxfield").getValue()).toBeFalsy()});it("should set checkbox aria-label",function(){A({checkboxToggle:true});var D=B.legend.down("checkboxfield");jasmine.expectAriaAttr(D,"aria-label","Expand field set")})});describe("toggle tool",function(){var D;function E(F,G){jasmine.expectAriaAttr(D,F,G)}beforeEach(function(){A({title:"foo",collapsible:true});D=B.legend.down("tool")});afterEach(function(){D=null});it("should have checkbox role",function(){E("role","checkbox")});it("should have aria-label",function(){E("aria-label","Expand field set")});it("should have aria-checked",function(){E("aria-checked","true")});it("should update aria-checked when fieldset is collapsed",function(){B.collapse();E("aria-checked","false")})});it("should be included in ComponentQuery searches from the fieldset container",function(){A({title:"Foo",checkboxToggle:true,checkboxName:"theCheckboxName"});expect(B.down("[name=theCheckboxName]")).not.toBeNull()});it("should be available before the component is rendered",function(){var D=Ext.create("Ext.window.Window",{width:400,height:300,items:[{xtype:"form",items:[{id:"myFieldSet",xtype:"fieldset",checkboxToggle:true,checkboxName:"a",title:"test"}]}]});expect(Ext.getCmp("myFieldSet").legend).toBeDefined();D.destroy()})});describe("collapse method",function(){it("should set the 'collapsed' property to true",function(){A({collapsed:false});B.collapse();expect(B.collapsed).toBeTruthy()});it("should uncheck the checkboxToggle",function(){A({collapsed:false,checkboxToggle:true});B.collapse();expect(B.legend.down("checkboxfield").getValue()).toBeFalsy()});it("should give the main element a class of 'x-fieldset-collapsed'",function(){A({collapsed:false});B.collapse();expect(B.el.hasCls("x-fieldset-collapsed")).toBeTruthy()});it("should set aria-expanded attribute",function(){A({collapsed:false});B.collapse();C("aria-expanded","false")})});describe("expand method",function(){it("should set the 'collapsed' property to false",function(){A({collapsed:true});B.expand();expect(B.collapsed).toBeFalsy()});it("should check the checkboxToggle",function(){A({collapsed:true,checkboxToggle:true});B.expand();expect(B.legend.down("checkboxfield").getValue()).toBeTruthy()});it("should remove the 'x-fieldset-collapsed' class from the main element",function(){A({collapsed:true});B.expand();expect(B.el.hasCls("x-fieldset-collapsed")).toBeFalsy()});it("should set aria-expanded attribute",function(){A({collapsed:true});B.expand();C("aria-expanded","true")})});describe("toggle method",function(){it("should collapse the fieldset if it is expanded",function(){A({collapsed:false});B.toggle();expect(B.el.hasCls("x-fieldset-collapsed")).toBeTruthy()});it("should expand the fieldset if it is collapsed",function(){A({collapsed:true});B.toggle();expect(B.el.hasCls("x-fieldset-collapsed")).toBeFalsy()})});describe("FieldAncestor",function(){it("should fire an event whenever validitychange fires on a child item",function(){var D;A({items:[{xtype:"textfield",allowBlank:false}]});B.on("fieldvaliditychange",function(){D=true});B.items.first().setValue("Foo");expect(D).toBe(true)});it("should fire an event whenever errorchange fires on a child item",function(){var D;A({items:[{xtype:"textfield",allowBlank:false}]});B.on("fielderrorchange",function(){D=true});B.items.first().markInvalid("Foo");expect(D).toBe(true)})});xdescribe("setTitle method",function(){it("should set the legend title to the argument value",function(){A({title:"Old and busted"});B.setTitle("New hotness");expect(B.titleCmp.el.dom).hasHTML("New hotness")})})})