describe("Ext.form.Panel",function(){var A;function B(C){C=C||{};A=new Ext.form.Panel(C)}afterEach(function(){if(A){A.destroy();A=undefined}});describe("creation",function(){it("should extend Ext.Panel",function(){expect(Ext.form.Panel.superclass).toBe(Ext.Panel.prototype)});it("should be registered with the 'form' xtype",function(){var C=Ext.create("Ext.form.Panel",{name:"test"});expect(C instanceof Ext.form.Panel).toBe(true);expect(Ext.getClass(C).xtype).toBe("form");C.destroy()})});describe("form property",function(){it("should instantiate a Ext.form.Basic as its 'form' property",function(){B();expect(A.form instanceof Ext.form.Basic).toBeTruthy()});it("should return the BasicForm when calling the getForm() method",function(){B();expect(A.getForm() instanceof Ext.form.Basic).toBeTruthy()})});describe("default configs",function(){var E,F,D;function C(G,H){it("should default the '"+D+"' config to "+F[D],function(){B();expect(A[G]).toBe(H)})}F={hideLabels:E,labelPad:E,labelSeparator:E,labelWidth:E,labelAlign:E,ariaRole:"presentation",bodyAriaRole:"form"};for(D in F){if(F.hasOwnProperty(D)){C.call(this,D,F[D])}}});describe("event relaying",function(){function C(D){var E=jasmine.createSpy(D+" handler");B();A.on(D,E);A.getForm().fireEvent(D);expect(E).toHaveBeenCalled()}it("should relay 'beforeaction' events from the BasicForm",function(){C("beforeaction")});it("should relay 'actionfailed' events from the BasicForm",function(){C("actionfailed")});it("should relay 'actioncomplete' events from the BasicForm",function(){C("actioncomplete")});it("should relay 'validitychange' events from the BasicForm",function(){C("validitychange")});it("should relay 'dirtychange' events from the BasicForm",function(){C("dirtychange")})});describe("destroying",function(){it("should call it's form object's destroy method",function(){B();spyOn(A.getForm(),"destroy");A.destroy();expect(A.getForm().destroy).toHaveBeenCalled()})});describe("fieldDefaults",function(){it("should copy properties to a sub-field if those properties are not already configured on the field",function(){B({fieldDefaults:{dummyConfig:"foo"},renderTo:Ext.getBody()});var C=A.add({xtype:"textfield",name:"myfield"});expect(C.dummyConfig).toBe("foo")});it("should not copy properties to a sub-field if those properties are already configured on the field",function(){B({fieldDefaults:{dummyConfig:"foo"}});var C=A.add({xtype:"textfield",name:"myfield",dummyConfig:"bar"});expect(C.dummyConfig).toBe("bar")});it("should copy fieldDefaults deep",function(){B({renderTo:Ext.getBody(),fieldDefaults:{dummyConfig:"foo"},items:{xtype:"container",items:{xtype:"container",items:{xtype:"container",items:{xtype:"textfield",itemId:"foo"}}}}});var C=A.down("#foo");expect(C.dummyConfig).toBe("foo")})});describe("minButtonWidth config",function(){it("should copy to items in the 'buttons' legacy toolbar config",function(){var C={minButtonWidth:1234,buttons:[{text:"foo"}]};B(C);var D=A.getDockedItems();expect(D[D.length-1].child("button").minWidth).toBe(1234)});it("should not copy to items in the 'buttons' legacy toolbar config with an explicit minWidth",function(){var C={minButtonWidth:1234,buttons:[{text:"foo",minWidth:2345}]};B(C);var D=A.getDockedItems();expect(D[D.length-1].child("button").minWidth).toBe(2345)})});describe("load method",function(){it("should call the load method of the BasicForm",function(){B();spyOn(A.getForm(),"load");A.load({foo:"bar"});expect(A.getForm().load).toHaveBeenCalledWith({foo:"bar"})})});describe("submit method",function(){it("should call the submit method of the BasicForm",function(){B();spyOn(A.getForm(),"submit");A.submit({foo:"bar"});expect(A.getForm().submit).toHaveBeenCalledWith({foo:"bar"})})});describe("polling",function(){it("should call the startPolling method if the 'pollForChanges' config is true",function(){B({pollForChanges:true,startPolling:jasmine.createSpy()});expect(A.startPolling).toHaveBeenCalled()});it("should pass the 'pollInterval' config to the startPolling method",function(){B({pollForChanges:true,pollInterval:12345,startPolling:jasmine.createSpy()});expect(A.startPolling).toHaveBeenCalledWith(12345)});it("should start running the 'checkChange' method on an interval",function(){runs(function(){B();spyOn(A,"checkChange");A.startPolling(1)});waitsFor(function(){return A.checkChange.callCount>1},"did not start polling")})});describe("ARIA",function(){beforeEach(function(){B({renderTo:Ext.getBody()})});describe("attributes",function(){it("should have form role on the body",function(){jasmine.expectAriaAttr(A.body,"role","form")})})})})