describe("Ext.form.action.DirectLoad",function(){var C;function B(F,G,E){F=F||{};if(!F.form){F.form={}}var I=function(){},H=function(){},D;G=Ext.apply({},G);E=Ext.apply({},E);D=Ext.applyIf(G,{ordered:true,len:0});I.directCfg={method:new Ext.direct.RemotingMethod(D)};D=Ext.applyIf(E,{ordered:true,len:0});H.directCfg={method:new Ext.direct.RemotingMethod(D)};TestDirect={load:I,submit:H};Ext.applyIf(F.form,{clearInvalid:Ext.emptyFn,setValues:Ext.emptyFn,afterAction:Ext.emptyFn,api:{load:F.stringMethods?"TestDirect.load":I,submit:F.stringMethods?"TestDirect.submit":H}});C=new Ext.form.action.DirectLoad(F);return C}function A(E,D,F){B(E);var G=C.form.api.load;spyOn(C.form.api,"load").andCallFake(function(){var H=arguments[arguments.length-2],I=arguments[arguments.length-1];H.call(I,D,F)});C.form.api.load.directCfg=G.directCfg}afterEach(function(){Ext.direct.Manager.clearAllMethods();try{delete window.TestDirect}catch(D){window.TestDirect=undefined}if(C){Ext.destroy(C)}});it("should be registered in the action manager under the alias 'formaction.directload'",function(){var D=Ext.ClassManager.instantiateByAlias("formaction.directload",{});expect(D instanceof Ext.form.action.DirectLoad).toBeTruthy()});describe("run",function(){it("should not resolve 'load' method before first invocation",function(){B({stringMethods:true});expect(C.form.api.load).toBe("TestDirect.load")});it("should resolve 'load' method on first invocation",function(){B({stringMethods:true});C.run();expect(Ext.isFunction(C.form.api.load)).toBeTruthy()});it("should raise an error if it cannot resolve 'load' method",function(){B({stringMethods:true});TestDirect=null;var D="Cannot resolve Ext Direct API method TestDirect.load";expect(function(){C.run()}).toThrow(D)});it("should invoke the 'load' function in the BasicForm's 'api' config",function(){B();var D=C.form.api.load;spyOn(C.form.api,"load");C.form.api.load.directCfg=D.directCfg;C.run();expect(C.form.api.load).toHaveBeenCalled()});it("should pass the params as a single object argument if 'paramsAsHash' is true",function(){B({form:{paramsAsHash:true},params:{foo:"bar"}},{len:1});var D=C.form.api.load;spyOn(C.form.api,"load");C.form.api.load.directCfg=D.directCfg;C.run();expect(C.form.api.load.mostRecentCall.args[0]).toEqual({foo:"bar"})});it("should pass the param values as separate arguments in the 'paramOrder' order if specified",function(){B({form:{paramOrder:["one","two"]},params:{one:"foo",two:"bar"}},{len:2});var E=C.form.api.load;spyOn(C.form.api,"load");C.form.api.load.directCfg=E.directCfg;C.run();var D=C.form.api.load.mostRecentCall.args;expect(D[0]).toEqual("foo");expect(D[1]).toEqual("bar")});it("should grab params from the action's 'params' config and the BasicForm's 'baseParams' config",function(){B({form:{paramsAsHash:true,baseParams:{baseOne:"1",baseTwo:"2"}},params:{one:"1",two:"2"}},{len:1});var D=C.form.api.load;spyOn(C.form.api,"load");C.form.api.load.directCfg=D.directCfg;C.run();expect(C.form.api.load.mostRecentCall.args[0]).toEqual({baseOne:"1",baseTwo:"2",one:"1",two:"2"})});it("should pass the onSuccess callback function and the callback scope as the final 2 arguments",function(){B({form:{paramsAsHash:true},params:{foo:"bar"}},{len:1});var E=C.form.api.load;spyOn(C.form.api,"load");C.form.api.load.directCfg=E.directCfg;C.run();var D=C.form.api.load.mostRecentCall.args;expect(typeof D[D.length-2]).toEqual("function");expect(D[D.length-1]).toBe(C)});describe("metadata",function(){var D;beforeEach(function(){B({form:{metadata:{foo:42,bar:false}}},{metadata:{params:["foo","bar"]}});var E=C.form.api.load;D=spyOn(C.form.api,"load");D.directCfg=E.directCfg});it("should override form metadata with options values",function(){Ext.apply(C,{metadata:{foo:-1,bar:true}});C.run();expect(D.mostRecentCall.args[2]).toEqual({metadata:{foo:-1,bar:true}})});it("should default to form metadata",function(){C.run();expect(D.mostRecentCall.args[2]).toEqual({metadata:{foo:42,bar:false}})})})});describe("load failure",function(){it("should set the Action's failureType property to LOAD_FAILURE",function(){A({},{},{});C.run();expect(C.failureType).toEqual(Ext.form.action.Action.LOAD_FAILURE)});it("should call the BasicForm's afterAction method with a false success param",function(){A({},{},{});spyOn(C.form,"afterAction");C.run();expect(C.form.afterAction).toHaveBeenCalledWith(C,false)});it("should fail if the callback is passed an exception with type=Ext.direct.Manager.exceptions.SERVER",function(){A({},{},{type:Ext.direct.Manager.exceptions.SERVER});C.run();expect(C.failureType).toEqual(Ext.form.action.Action.LOAD_FAILURE)});it("should fail if the result object does not have success=true",function(){A({},{success:false,data:{}},{});C.run();expect(C.failureType).toEqual(Ext.form.action.Action.LOAD_FAILURE)});it("should fail if the result object does not have a data member",function(){A({},{success:true},{});C.run();expect(C.failureType).toEqual(Ext.form.action.Action.LOAD_FAILURE)})});describe("load success",function(){beforeEach(function(){A({},{success:true,data:{foo:"bar"}},{})});it("should call the BasicForm's clearInvalid method",function(){spyOn(C.form,"clearInvalid");C.run();expect(C.form.clearInvalid).toHaveBeenCalled()});it("should call the BasicForm's setValues method with the result data object",function(){spyOn(C.form,"setValues");C.run();expect(C.form.setValues).toHaveBeenCalledWith({foo:"bar"})});it("should invoke the BasicForm's afterAction method with a true success param",function(){spyOn(C.form,"afterAction");C.run();expect(C.form.afterAction).toHaveBeenCalledWith(C,true)})})})