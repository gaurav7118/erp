describe("Ext.form.action.DirectSubmit",function(){var D,F,C,A,I;function H(J){D=Ext.apply({"namespace":"spec",type:"remoting",url:"fake"},J);F=Ext.direct.Manager.addProvider(D)}function B(J){var L=spec.TestDirect[J].directCfg,K=spyOn(spec.TestDirect,J);K.directCfg=L;return K}function E(J){J=J||{};if(!J.form){J.form={}}Ext.applyIf(J.form,{clearInvalid:Ext.emptyFn,markInvalid:Ext.emptyFn,getValues:Ext.emptyFn,getFields:function(){return Ext.create("Ext.util.MixedCollection")},afterAction:Ext.emptyFn,isValid:function(){return true},timeout:Ext.form.Basic.prototype.timeout,api:{load:"spec.TestDirect.load",submit:"spec.TestDirect.submit"}});C=new Ext.form.action.DirectSubmit(J);return C}function G(K,J,L){E(K);I.andCallFake(function(){var M=arguments[1],N=arguments[2];M.call(N,J,L)})}beforeEach(function(){H({actions:{TestDirect:[{name:"load",len:1},{name:"submit",formHandler:true}]}});A=B("load");I=B("submit")});afterEach(function(){if(F){Ext.direct.Manager.removeProvider(F)}Ext.direct.Manager.clearAllMethods();try{delete window.spec}catch(J){window.spec=null}A=I=null});it("should be registered in the action manager under the alias 'formaction.directsubmit'",function(){var J=Ext.ClassManager.instantiateByAlias("formaction.directsubmit",{});expect(J instanceof Ext.form.action.DirectSubmit).toBeTruthy()});describe("run",function(){it("should not resolve 'submit' method before first invocation",function(){E();expect(C.form.api.submit).toBe("spec.TestDirect.submit")});it("should resolve 'submit' method on first invocation",function(){E();C.run();expect(Ext.isFunction(C.form.api.submit)).toBeTruthy()});it("should raise an error if it cannot resolve 'submit' method",function(){spec=null;E();expect(function(){C.run()}).toThrow("Cannot resolve Ext Direct API method spec.TestDirect.submit for submit action")});it("should invoke the 'submit' function in the BasicForm's 'api' config",function(){E();C.run();expect(I).toHaveBeenCalled()});it("should pass a form element containing all the field values and configured base params as the first argument",function(){var N={one:"1",two:"2",three:"3"},P=Ext.apply({},N,{fromParams:"1",fromBaseParams:"1"});E({params:{fromParams:"1"},form:{baseParams:{fromBaseParams:"1"},getValues:function(){return N}}});spyOn(Ext,"removeNode");C.run();var O=Ext.removeNode.mostRecentCall.args[0];expect(O).toBeDefined();expect(O.tagName).toEqual("FORM");var L={},K=O.getElementsByTagName("*"),M=0,J=K.length;for(;M<J;M++){L[K[M].name]=K[M].value}expect(L).toEqual(P);Ext.removeNode.andCallThrough();Ext.removeNode(O)});it("should pass the callback function as the second argument",function(){E();C.run();var J=I.mostRecentCall.args;expect(typeof J[1]).toEqual("function")});it("should pass the callback scope as the third argument",function(){E();C.run();var J=I.mostRecentCall.args;expect(J[2]).toBe(C)});describe("timeouts",function(){beforeEach(function(){E()});it("should pass default timeout",function(){C.run();var J=I.mostRecentCall.args;expect(J[3].timeout).toBe(30000)});it("should pass timeout parameter if it is specified in a form",function(){E({form:{timeout:42}});C.run();var J=I.mostRecentCall.args;expect(J[3].timeout).toBe(42000)})});describe("metadata",function(){beforeEach(function(){E({form:{metadata:{foo:42,bar:false}}})});it("should override form metadata with options values",function(){Ext.apply(C,{metadata:{foo:-1,bar:true}});C.run();expect(I.mostRecentCall.args[3]).toEqual({timeout:30000,metadata:{foo:-1,bar:true}})});it("should default to form metadata",function(){C.run();expect(I.mostRecentCall.args[3]).toEqual({timeout:30000,metadata:{foo:42,bar:false}})})})});describe("validation",function(){beforeEach(function(){spyOn(Ext.Ajax,"request")});it("should validate by default",function(){E();spyOn(C.form,"isValid");C.run();expect(C.form.isValid).toHaveBeenCalled()});it("should not validate if the 'clientValidation' config is false",function(){E({clientValidation:false});spyOn(C.form,"isValid");C.run();expect(C.form.isValid).not.toHaveBeenCalled()});it("should set the failureType to CLIENT_INVALID if validation fails",function(){E({form:{isValid:function(){return false}}});C.run();expect(C.failureType).toEqual(Ext.form.action.Action.CLIENT_INVALID)});it("should call the BasicForm's afterAction method with success=false if validation fails",function(){E({form:{isValid:function(){return false}}});spyOn(C.form,"afterAction");C.run();expect(C.form.afterAction).toHaveBeenCalledWith(C,false)})});describe("submit failure",function(){it("should fail if the callback is passed an exception with type=Ext.direct.Manager.exceptions.SERVER",function(){G({},{},{type:Ext.direct.Manager.exceptions.SERVER});C.run();expect(C.failureType).toBeDefined()});it("should fail if the result object does not have success=true",function(){G({},{success:false},{});C.run();expect(C.failureType).toBeDefined()});it("should set the Action's failureType property to SERVER_INVALID",function(){G({},{},{});C.run();expect(C.failureType).toEqual(Ext.form.action.Action.SERVER_INVALID)});it("should call the BasicForm's afterAction method with a false success param",function(){G({},{},{});spyOn(C.form,"afterAction");C.run();expect(C.form.afterAction).toHaveBeenCalledWith(C,false)});it("should call the BasicForm's markInvalid method with any errors in the result",function(){G({},{success:false,errors:{foo:"bar"}},{});spyOn(C.form,"markInvalid");C.run();expect(C.form.markInvalid).toHaveBeenCalledWith({foo:"bar"})})});describe("submit success",function(){beforeEach(function(){G({},{success:true},{})});it("should treat a result with success:true as success",function(){expect(C.failureType).not.toBeDefined()});it("should invoke the BasicForm's afterAction method with a true success param",function(){spyOn(C.form,"afterAction");C.run();expect(C.form.afterAction).toHaveBeenCalledWith(C,true)})})})