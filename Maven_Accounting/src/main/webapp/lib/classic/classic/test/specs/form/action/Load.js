describe("Ext.form.action.Load",function(){var B;function A(C){C=C||{};if(!C.form){C.form={}}B=new Ext.form.action.Load(C)}afterEach(function(){B=undefined});it("should be registered in the action manager under the alias 'formaction.load'",function(){var C=Ext.ClassManager.instantiateByAlias("formaction.load",{});expect(C instanceof Ext.form.action.Load).toBeTruthy()});describe("AJAX call parameters",function(){var C;beforeEach(function(){spyOn(Ext.Ajax,"request").andCallFake(function(){expect(arguments.length).toEqual(1);C=arguments[0]})});it("should invoke Ext.Ajax.request",function(){A();B.run();expect(Ext.Ajax.request).toHaveBeenCalled()});it("should use 'POST' as the ajax call method by default",function(){A();B.run();expect(C.method).toEqual("POST")});it("should use the BasicForm's 'method' config as the ajax call method if specified",function(){A({form:{method:"FORMMETHOD"}});B.run();expect(C.method).toEqual("FORMMETHOD")});it("should use the Action's 'method' config as the ajax call method if specified",function(){A({method:"actionmethod"});B.run();expect(C.method).toEqual("ACTIONMETHOD")});it("should use the BasicForm's 'url' config as the ajax call url if specified",function(){A({form:{url:"/url-from-form"}});B.run();expect(C.url).toEqual("/url-from-form")});it("should use the Action's 'url' config as the ajax call url if specified",function(){A({url:"/url-from-action"});B.run();expect(C.url).toEqual("/url-from-action")});it("should use the Action's 'headers' config as the ajax call headers if specified",function(){var D={foo:"bar"};A({headers:D});B.run();expect(C.headers).toBe(D)});it("should default to sending no params to the ajax call",function(){A();B.run();expect(C.params).toEqual({})});it("should add the BasicForm's 'baseParams' config to the ajax call params if specified",function(){var D={one:"1",two:"2"};A({form:{baseParams:D}});B.run();expect(C.params).toEqual(D)});it("should use the Action's 'params' config for the ajax call params if specfied (as an Object)",function(){var D={one:"1",two:"2"};A({params:D});B.run();expect(C.params).toEqual(D)});it("should use the Action's 'params' config for the ajax call params if specfied (as a String)",function(){var D="one=1&two=2";A({params:D});B.run();expect(C.params).toEqual({one:"1",two:"2"})});it("should concatenate the Action's 'params' config (as an Object) with the BasicForm's 'baseParams' config",function(){A({params:{one:"1",two:"2"},form:{baseParams:{three:"3",four:"4"}}});B.run();expect(C.params).toEqual({one:"1",two:"2",three:"3",four:"4"})});it("should concatenate the Action's 'params' config (as a String) with the BasicForm's 'baseParams' config",function(){A({params:"one=1&two=2",form:{baseParams:{three:"3",four:"4"}}});B.run();expect(C.params).toEqual({one:"1",two:"2",three:"3",four:"4"})});it("should use the BasicForm's 'timeout' config as the ajax call timeout if specified",function(){A({form:{timeout:123}});B.run();expect(C.timeout).toEqual(123000)});it("should use the Action's 'timeout' config as the ajax call timeout if specified",function(){A({timeout:123});B.run();expect(C.timeout).toEqual(123000)});it("should use the Action instance as the ajax call 'scope' parameter",function(){A();B.run();expect(C.scope).toBe(B)})});describe("ajax request error",function(){var C={responseText:"{}"};function D(E,F){E=E||C;spyOn(Ext.Ajax,"request").andCallFake(function(G){G.failure.call(G.scope,E)});A({form:Ext.apply({afterAction:jasmine.createSpy("afterAction")},F)});B.run()}it("should set the Action's failureType property to CONNECT_FAILURE",function(){D();expect(B.failureType).toEqual(Ext.form.action.Action.CONNECT_FAILURE)});it("should set the Action's response property to the ajax response",function(){D();expect(B.response).toEqual(C)});it("should call the BasicForm's afterAction method with a false success param",function(){D();expect(B.form.afterAction).toHaveBeenCalledWith(B,false)});it("should not call afterAction if the form is destroying",function(){D(null,{destroying:true});expect(B.form.afterAction).not.toHaveBeenCalled()});it("should not call afterAction if the form is already destroyed",function(){D(null,{destroyed:true});expect(B.form.afterAction).not.toHaveBeenCalled()})});describe("load failure",function(){function C(D,E){spyOn(Ext.Ajax,"request").andCallFake(function(F){F.success.call(F.scope,D)});A({form:Ext.apply({afterAction:jasmine.createSpy("afterAction")},E)});B.run()}it("should set the Action's failureType property to LOAD_FAILURE",function(){C({});expect(B.failureType).toEqual(Ext.form.action.Action.LOAD_FAILURE)});it("should call the BasicForm's afterAction method with a false success param",function(){C({});expect(B.form.afterAction).toHaveBeenCalledWith(B,false)});it("should fail if either the responseText or responseXML are populated",function(){C({});expect(B.failureType).toBeDefined()});it("should require the result object to have success=true",function(){C({responseText:'{"success":false, "data":{}}'});expect(B.failureType).toBeDefined()});it("should require the result object to have a data property",function(){C({responseText:'{"success":true}'});expect(B.failureType).toBeDefined()});it("should not call afterAction if the form is destroying",function(){C({},{destroying:true});expect(B.form.afterAction).not.toHaveBeenCalled()});it("should not call afterAction if the form is already destroyed",function(){C({},{destroyed:true});expect(B.form.afterAction).not.toHaveBeenCalled()})});describe("load success",function(){function C(E,D,F){spyOn(Ext.Ajax,"request").andCallFake(function(G){G.success.call(G.scope,E)});A({form:Ext.apply({reader:D,clearInvalid:jasmine.createSpy(),setValues:jasmine.createSpy(),afterAction:jasmine.createSpy("afterAction")},F)});B.run()}it("should call the BasicForm's clearInvalid method",function(){C({responseText:'{"success":true,"data":{"from":"responseText"}}'});expect(B.form.clearInvalid).toHaveBeenCalled()});it("should call the BasicForm's setValues method",function(){C({responseText:'{"success":true,"data":{"from":"responseText"}}'});expect(B.form.setValues).toHaveBeenCalled()});it("should invoke the BasicForm's afterAction method with a true success param",function(){C({responseText:'{"success":true,"data":{"from":"responseText"}}'});expect(B.form.afterAction).toHaveBeenCalledWith(B,true)});it("should parse the responseText as JSON",function(){C({responseText:'{"success":true,"data":{"from":"responseText"}}'});expect(B.form.setValues).toHaveBeenCalledWith({from:"responseText"})});it("should use the BasicForm's configured Reader to parse the response if present",function(){var D={responseText:"{}"};C(D,{read:jasmine.createSpy().andReturn({success:true,records:[{data:{from:"reader"}}]})});expect(B.form.reader.read).toHaveBeenCalledWith(D);expect(B.form.setValues).toHaveBeenCalledWith({from:"reader"})});it("should not call afterAction if the form is destroying",function(){C({responseText:'{"success":true,"data":{"from":"responseText"}}'},undefined,{destroying:true});expect(B.form.afterAction).not.toHaveBeenCalled()});it("should not call afterAction if the form is already destroyed",function(){C({responseText:'{"success":true,"data":{"from":"responseText"}}'},undefined,{destroyed:true});expect(B.form.afterAction).not.toHaveBeenCalled()})})})