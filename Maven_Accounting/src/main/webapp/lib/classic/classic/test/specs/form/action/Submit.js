describe("Ext.form.action.Submit",function(){var B;function A(C){C=C||{};if(!C.form){C.form={}}Ext.applyIf(C.form,{isValid:function(){return true},afterAction:Ext.emptyFn,getValues:Ext.emptyFn,hasUpload:function(){return false},markInvalid:Ext.emptyFn});B=new Ext.form.action.Submit(C)}afterEach(function(){B=undefined});it("should be registered in the action manager under the alias 'formaction.submit'",function(){var C=Ext.ClassManager.instantiateByAlias("formaction.submit",{});expect(C instanceof Ext.form.action.Submit).toBeTruthy()});describe("validation",function(){beforeEach(function(){spyOn(Ext.Ajax,"request")});it("should validate by default",function(){A();spyOn(B.form,"isValid");B.run();expect(B.form.isValid).toHaveBeenCalled()});it("should not validate if the 'clientValidation' config is false",function(){A({clientValidation:false});spyOn(B.form,"isValid");B.run();expect(B.form.isValid).not.toHaveBeenCalled()});it("should set the failureType to CLIENT_INVALID if validation fails",function(){A({form:{isValid:function(){return false}}});B.run();expect(B.failureType).toEqual(Ext.form.action.Action.CLIENT_INVALID)});it("should call the BasicForm's afterAction method with success=false if validation fails",function(){A({form:{isValid:function(){return false}}});spyOn(B.form,"afterAction");B.run();expect(B.form.afterAction).toHaveBeenCalledWith(B,false)})});describe("AJAX call options",function(){var C,D;beforeEach(function(){D={getValues:function(){return{field1:"foo",field2:"bar"}}};spyOn(Ext.Ajax,"request").andCallFake(function(){expect(arguments.length).toEqual(1);C=arguments[0]})});it("should invoke Ext.Ajax.request",function(){A({form:D});B.run();expect(Ext.Ajax.request).toHaveBeenCalled()});it("should use 'POST' as the ajax call method by default",function(){A({form:D});B.run();expect(C.method).toEqual("POST")});it("should use the BasicForm's 'method' config as the ajax call method if specified",function(){A({form:Ext.apply({},{method:"FORMMETHOD"},D)});B.run();expect(C.method).toEqual("FORMMETHOD")});it("should use the Action's 'method' config as the ajax call method if specified",function(){A({method:"actionmethod",form:D});B.run();expect(C.method).toEqual("ACTIONMETHOD")});it("should use the BasicForm's 'url' config as the ajax call url if specified",function(){A({form:Ext.apply({},{url:"/url-from-form"},D)});B.run();expect(C.url).toEqual("/url-from-form")});it("should use the Action's 'url' config as the ajax call url if specified",function(){A({url:"/url-from-action",form:D});B.run();expect(C.url).toEqual("/url-from-action")});it("should use the Action's 'headers' config as the ajax call headers if specified",function(){var E={foo:"bar"};A({headers:E,form:D});B.run();expect(C.headers).toBe(E)});describe("params",function(){it("should add all the form's field values to the ajax call params",function(){A({form:D});B.run();expect(C.params).toEqual({field1:"foo",field2:"bar"})});it("should add the BasicForm's 'baseParams' config to the ajax call params if specified",function(){var E={one:"1",two:"2"};A({form:Ext.apply({},{baseParams:E},D)});B.run();expect(C.params).toEqual({field1:"foo",field2:"bar",one:"1",two:"2"})});it("should use the Action's 'params' config for the ajax call params if specfied (as an Object)",function(){var E={one:"1",two:"2"};A({params:E,form:D});B.run();expect(C.params).toEqual({field1:"foo",field2:"bar",one:"1",two:"2"})});it("should use the Action's 'params' config for the ajax call params if specfied (as a String)",function(){var E="one=1&two=2";A({params:E,form:D});B.run();expect(C.params).toEqual({field1:"foo",field2:"bar",one:"1",two:"2"})});it("should concatenate the Action's 'params' config (as an Object) with the BasicForm's 'baseParams' config",function(){A({params:{one:"1",two:"2"},form:Ext.apply({},{baseParams:{three:"3",four:"4"}},D)});B.run();expect(C.params).toEqual({field1:"foo",field2:"bar",one:"1",two:"2",three:"3",four:"4"})});it("should concatenate the Action's 'params' config (as a String) with the BasicForm's 'baseParams' config",function(){A({params:"one=1&two=2",form:Ext.apply({},{baseParams:{three:"3",four:"4"}},D)});B.run();expect(C.params).toEqual({field1:"foo",field2:"bar",one:"1",two:"2",three:"3",four:"4"})});it("should set the jsonData if using jsonSubmit",function(){A({form:D,jsonSubmit:true});B.run();expect(C.jsonData).toEqual({field1:"foo",field2:"bar"})})});it("should use the BasicForm's 'timeout' config as the ajax call timeout if specified",function(){A({form:Ext.apply({},{timeout:123},D)});B.run();expect(C.timeout).toEqual(123000)});it("should use the Action's 'timeout' config as the ajax call timeout if specified",function(){A({timeout:123,form:D});B.run();expect(C.timeout).toEqual(123000)});it("should use the Action instance as the ajax call 'scope' parameter",function(){A({form:D});B.run();expect(C.scope).toBe(B)});describe("jsonSubmit",function(){it("should bind the BasicForm's field values to ajaxRequestCfg.jsonData",function(){A({form:Ext.apply({jsonSubmit:true},D)});B.run();expect(C.params).toBe(undefined);expect(C.jsonData).not.toBe(undefined)});it("should not bind the BasicForm's field values to ajaxRequestCfg.jsonData",function(){A({form:Ext.apply({jsonSubmit:false},D)});B.run();expect(C.params).not.toBe(undefined);expect(C.jsonData).toBe(undefined)});it("should not bind the BasicForm's field values to ajaxRequestCfg.params",function(){A({form:Ext.apply({jsonSubmit:true},D)});B.run();expect(C.jsonData).not.toBe(undefined);expect(C.params).toBe(undefined)});it("should add all the BasicForm's field values to the ajax call parameters",function(){A({form:Ext.apply({jsonSubmit:true},D)});B.run();expect(C.jsonData).toEqual({field1:"foo",field2:"bar"})});it("should concatenate the Action's 'params' config (as an Object) with the BasicForm's 'baseParams' config",function(){A({params:{one:"1",two:"2"},form:Ext.apply({jsonSubmit:true,baseParams:{three:"3",four:"4"}},D)});B.run();expect(C.jsonData).toEqual({field1:"foo",field2:"bar",one:"1",two:"2",three:"3",four:"4"})});it("should concatenate the Action's 'params' config (as a String) with the BasicForm's 'baseParams' config",function(){A({params:"one=1&two=2",form:Ext.apply({jsonSubmit:true,baseParams:{three:"3",four:"4"}},D)});B.run();expect(C.jsonData).toEqual({field1:"foo",field2:"bar",one:"1",two:"2",three:"3",four:"4"})})})});describe("ajax request error",function(){var C={responseText:"{}"};function D(E,F){E=E||C;spyOn(Ext.Ajax,"request").andCallFake(function(G){G.failure.call(G.scope,E)});A({form:Ext.apply({afterAction:jasmine.createSpy("afterAction"),getValues:function(){return""}},F)});B.run()}it("should set the Action's failureType property to CONNECT_FAILURE",function(){D();expect(B.failureType).toEqual(Ext.form.action.Action.CONNECT_FAILURE)});it("should set the Action's response property to the ajax response",function(){D();expect(B.response).toEqual(C)});it("should call the BasicForm's afterAction method with a false success param",function(){D();expect(B.form.afterAction).toHaveBeenCalledWith(B,false)});it("should not call afterAction if the form is destroying",function(){D(null,{destroying:true});expect(B.form.afterAction).not.toHaveBeenCalled()});it("should not call afterAction if the form is already destroyed",function(){D(null,{destroyed:true});expect(B.form.afterAction).not.toHaveBeenCalled()})});describe("response parsing",function(){function C(E,D){spyOn(Ext.Ajax,"request").andCallFake(function(F){F.success.call(F.scope,E)});A({form:{markInvalid:jasmine.createSpy(),errorReader:D}});B.run()}it("should parse the responseText as JSON if no errorReader is configured",function(){C({responseText:'{"success":false,"errors":{"from":"responseText"}}'},undefined);expect(B.form.markInvalid).toHaveBeenCalledWith({from:"responseText"})});it("should use the configured errorReader to parse the response if present",function(){var D={responseText:'{"success":false,"errors":[]}'};C(D,{read:jasmine.createSpy().andReturn({success:false,records:[{data:{id:"field1",msg:"message 1"}},{data:{id:"field2",msg:"message 2"}}]})});expect(B.form.errorReader.read).toHaveBeenCalledWith(D);expect(B.form.markInvalid).toHaveBeenCalledWith([{id:"field1",msg:"message 1"},{id:"field2",msg:"message 2"}])})});describe("submit failure",function(){function C(D,E){spyOn(Ext.Ajax,"request").andCallFake(function(F){F.success.call(F.scope,D)});A({form:Ext.apply({markInvalid:jasmine.createSpy(),afterAction:jasmine.createSpy("afterAction"),getValues:function(){return""}},E)});B.run()}it("should require the result object to have success=true",function(){C({responseText:'{"success":false}'});expect(B.failureType).toBeDefined()});it("should set the Action's failureType property to SERVER_INVALID",function(){C({responseText:'{"success":false}'});expect(B.failureType).toEqual(Ext.form.action.Action.SERVER_INVALID)});it("should call the BasicForm's afterAction method with a false success param",function(){C({responseText:'{"success":false}'});expect(B.form.afterAction).toHaveBeenCalledWith(B,false)});it("should call the BasicForm's markInvalid method with any errors in the result",function(){C({responseText:'{"success":false,"errors":{"foo":"bar"}}'});expect(B.form.markInvalid).toHaveBeenCalledWith({foo:"bar"})});it("should not call afterAction if the form is destroying",function(){C({responseText:'{"success":false}'},{destroying:true});expect(B.form.afterAction).not.toHaveBeenCalled()});it("should not call afterAction if the form is already destroyed",function(){C({responseText:'{"success":false}'},{destroyed:true});expect(B.form.afterAction).not.toHaveBeenCalled()})});describe("submit success",function(){function C(D,E){spyOn(Ext.Ajax,"request").andCallFake(function(F){F.success.call(F.scope,D)});A({form:Ext.apply({afterAction:jasmine.createSpy("afterAction"),getValues:function(){return""}},E)});B.run()}it("should treat empty responseText and responseXML as success",function(){C({responseText:"",responseXML:""});expect(B.failureType).not.toBeDefined()});it("should treat a result with success:true as success",function(){C({responseText:'{"success":true}'});expect(B.failureType).not.toBeDefined()});it("should invoke the BasicForm's afterAction method with a true success param",function(){C({responseText:'{"success":true,"data":{"from":"responseText"}}'});expect(B.form.afterAction).toHaveBeenCalledWith(B,true)});it("should not call afterAction if the form is destroying",function(){C({responseText:'{"success":true,"data":{"from":"responseText"}}'},{destroying:true});expect(B.form.afterAction).not.toHaveBeenCalled()});it("should not call afterAction if the form is already destroyed",function(){C({responseText:'{"success":true,"data":{"from":"responseText"}}'},{destroyed:true});expect(B.form.afterAction).not.toHaveBeenCalled()})});describe("file uploads",function(){var D;function C(E){D=new Ext.container.Container({items:E})}afterEach(function(){Ext.destroy(D);D=null});describe("doSubmit method",function(){var E,F;beforeEach(function(){spyOn(Ext.Ajax,"request").andCallFake(function(){expect(arguments.length).toEqual(1);if(Ext.isIE8){F=Ext.clone(arguments[0])}else{F=arguments[0]}})});afterEach(function(){E=F=null});it("should call buildForm and through to the getParams method",function(){C([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.File({name:"field2"})]);A({form:new Ext.form.Basic(D)});spyOn(B,"buildForm").andCallThrough();spyOn(B,"getParams");E=B.doSubmit();expect(B.buildForm).toHaveBeenCalled();expect(B.getParams).toHaveBeenCalled()});it("should return an object that contains the form dom element",function(){C([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.File({name:"field2"})]);A({form:new Ext.form.Basic(D)});E=B.doSubmit();expect(F.form).toBeDefined();expect(F.form.nodeName.toLowerCase()).toBe("form")});it("should return an object with a form that contains the form elements",function(){C([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.File({name:"field2"})]);A({form:new Ext.form.Basic(D)});E=B.doSubmit();expect(F.form.childNodes.length).toBe(2)});it("should add an isUpload property that is used by Connection",function(){C([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.File({name:"field2"})]);A({form:new Ext.form.Basic(D)});E=B.doSubmit();expect(F.isUpload).toBe(true)})});describe("getParams method",function(){var E;afterEach(function(){E=null});it("should not include any file fields",function(){C([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.File({name:"field2"})]);A({form:new Ext.form.Basic(D)});E=B.getParams();expect(E).toEqual({field1:"foo"})});it("should call getValues method on the form",function(){C([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.File({name:"field2"})]);A({form:new Ext.form.Basic(D)});spyOn(B.form,"getValues");E=B.getParams();expect(B.form.getValues).toHaveBeenCalled()});it("should call through to getSubmitData on each field",function(){C([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.File({name:"field2"})]);spyOn(Ext.form.field.Base.prototype,"getSubmitData");A({form:new Ext.form.Basic(D)});E=B.getParams();expect(Ext.form.field.Base.prototype.getSubmitData).toHaveBeenCalled();expect(Ext.form.field.Base.prototype.getSubmitData.callCount).toBe(2)});it("should not call through to getModelData on each field",function(){C([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.File({name:"field2"})]);spyOn(Ext.form.field.Base.prototype,"getModelData");A({form:new Ext.form.Basic(D)});E=B.getParams();expect(Ext.form.field.Base.prototype.getModelData).not.toHaveBeenCalled();expect(Ext.form.field.Base.prototype.getModelData.callCount).toBe(0)})});describe("specifying a target config",function(){var E;afterEach(function(){E.formEl.parentNode.removeChild(E.formEl);E=null});it("should honor the config",function(){C([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.File({name:"field2"})]);A({form:new Ext.form.Basic(D),target:"foo"});E=B.buildForm();expect(E.formEl.target).toBe("foo")});it('should use the "name" property if passed a dom node',function(){var F=document.createElement("iframe");F.setAttribute("name","foo");C([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.File({name:"field2"})]);A({form:new Ext.form.Basic(D),target:F});E=B.buildForm();expect(E.formEl.target).toBe("foo")})})})})