describe("Ext.form.field.Base",function(){var D,B;function A(E,F){jasmine.expectAriaAttr(D,E,F)}function C(E){E=Ext.apply({ariaRole:"foo",renderTo:Ext.getBody(),},E);return D=new Ext.form.field.Base(E)}beforeEach(function(){B=function(E){E=E||{};D=new Ext.form.field.Base(E)}});afterEach(function(){Ext.destroy(D);B=D=null});it("should encode the input value in the template",function(){B({renderTo:Ext.getBody(),value:'test "  <br/> test'});expect(D.inputEl.dom.value).toBe('test "  <br/> test')});describe("readOnly",function(){it("should be readOnly false by default",function(){B();expect(D.readOnly).toBe(false)});it("should add the readOnlyCls if configured with readOnly: true",function(){B({readOnly:true,renderTo:Ext.getBody()});expect(D.el.hasCls(D.readOnlyCls)).toBe(true)});it("should add readOnly to the inputEl if configured with readOnly: true",function(){B({readOnly:true,renderTo:Ext.getBody()});expect(D.inputEl.dom.readOnly).toBe(true)});it("should use a custom readOnlyCls if provided",function(){B({readOnly:true,renderTo:Ext.getBody(),readOnlyCls:"myCustomReadOnlyCls"});expect(D.el.hasCls("myCustomReadOnlyCls")).toBe(true)});it("should be able to set readOnly: true at runtime",function(){B({renderTo:Ext.getBody()});D.setReadOnly(true);expect(D.el.hasCls(D.readOnlyCls)).toBe(true);expect(D.inputEl.dom.readOnly).toBe(true)});it("should be able to set readOnly: false at runtime",function(){B({renderTo:Ext.getBody(),readOnly:true});D.setReadOnly(false);expect(D.el.hasCls(D.readOnlyCls)).toBe(false);expect(D.inputEl.dom.readOnly).toBe(false)})});describe("fieldLabel",function(){describe("hasVisibleLabel",function(){it("should always return false when hideLabel: true",function(){B({hideLabel:true,fieldLabel:"Foo"});expect(D.hasVisibleLabel()).toBe(false)});it("should return false with an empty label and hideEmptyLabel: true",function(){B({hideEmptyLabel:true});expect(D.hasVisibleLabel()).toBe(false)});it("should return true when we specify a label, even if it's empty",function(){B({fieldLabel:"",hideEmptyLabel:false});expect(D.hasVisibleLabel()).toBe(true)});it("should return true when we have a label and hideEmptyLabel: true",function(){B({fieldLabel:"Foo",hideEmptyLabel:true});expect(D.hasVisibleLabel()).toBe(true)})});it("should be able to set the label before being rendered",function(){B({labelSeparator:""});D.setFieldLabel("Foo");D.render(Ext.getBody());expect(D.labelEl.dom.firstChild).hasHTML("Foo")});it("should set a configured label",function(){B({labelSeparator:"",fieldLabel:"Foo",renderTo:Ext.getBody()});expect(D.labelEl.dom.firstChild).hasHTML("Foo")});it("should not hide an empty label with hideEmptyLabel: false",function(){B({fieldLabel:"",hideEmptyLabel:false,renderTo:Ext.getBody()});expect(D.labelEl.isVisible()).toBe(true)});it("should hide an empty label with hideEmptyLabel: true",function(){B({fieldLabel:"",hideEmptyLabel:true,renderTo:Ext.getBody()});expect(D.labelEl.isVisible()).toBe(false)});it("should always hide the label with hideLabel: true",function(){B({fieldLabel:"Foo",hideLabel:true,renderTo:Ext.getBody()});expect(D.labelEl.isVisible()).toBe(false)});it("should set the label after render",function(){B({labelSeparator:"",renderTo:Ext.getBody(),fieldLabel:"Foo"});D.setFieldLabel("Bar");expect(D.labelEl.dom.firstChild).hasHTML("Bar")});it("should append the separator when explicitly set",function(){B({labelSeparator:":",renderTo:Ext.getBody(),fieldLabel:"Foo"});D.setFieldLabel("Bar");expect(D.labelEl.dom.firstChild).hasHTML("Bar:")});it("should only append the separator if the label doesn't end with the separator when explicitly set",function(){B({labelSeparator:":",renderTo:Ext.getBody(),fieldLabel:"Foo"});D.setFieldLabel("Bar:");expect(D.labelEl.dom.firstChild).hasHTML("Bar:")});it("should append the separator when implicitly set",function(){B({labelSeparator:":",renderTo:Ext.getBody(),fieldLabel:"Foo"});expect(D.labelEl.dom.firstChild).hasHTML("Foo:")});it("should only append the separator if the label doesn't end with the separator when implicitly set",function(){B({labelSeparator:":",renderTo:Ext.getBody(),fieldLabel:"Foo:"});expect(D.labelEl.dom.firstChild).hasHTML("Foo:")});it("should hide the label if an empty one is set with hideEmptyLabel: true",function(){B({fieldLabel:"Foo",hideEmptyLabel:true,renderTo:Ext.getBody()});D.setFieldLabel("");expect(D.labelEl.isVisible()).toBe(false)});it("should show the label if an non-empty one is set with hideEmptyLabel: true",function(){B({fieldLabel:"",hideEmptyLabel:true,renderTo:Ext.getBody()});D.setFieldLabel("Foo");expect(D.labelEl.isVisible()).toBe(true)})});describe("validitychange",function(){var F,G;function E(H){B(Ext.apply({renderTo:Ext.getBody(),listeners:{validitychange:G},getErrors:function(){return F===null?[]:[F]}},H))}beforeEach(function(){F=null;G=jasmine.createSpy()});afterEach(function(){G=F=null});describe("starting disabled",function(){describe("initialization",function(){it("should not fire the event with a valid value",function(){E({disabled:true});expect(G).not.toHaveBeenCalled()});it("should not fire the event with an invalid value",function(){F="Foo";E({disabled:true});expect(G).not.toHaveBeenCalled()})});describe("enabling before having validated",function(){it("should not fire the event with a valid value",function(){E({disabled:true});D.enable();expect(G).not.toHaveBeenCalled()});it("should not fire the event with an invalid value",function(){F="Foo";E({disabled:true});D.enable();expect(G).not.toHaveBeenCalled()})});describe("enabling after having validated",function(){beforeEach(function(){E({disabled:true})});describe("after validating with an invalid value",function(){beforeEach(function(){F="Foo";D.validate();G.reset()});it("should not fire the event with a valid value",function(){F=null;D.enable();expect(G).not.toHaveBeenCalled()});it("should fire the event with an invalid value",function(){D.enable();expect(G.callCount).toBe(1);expect(G.mostRecentCall.args[0]).toBe(D);expect(G.mostRecentCall.args[1]).toBe(false)})});describe("after validating with a valid value",function(){beforeEach(function(){D.validate();G.reset()});it("should not fire the event with a valid value",function(){D.enable();expect(G).not.toHaveBeenCalled()});it("should fire the event with an invalid value",function(){F="Foo";D.enable();expect(G.callCount).toBe(1);expect(G.mostRecentCall.args[0]).toBe(D);expect(G.mostRecentCall.args[1]).toBe(false)})})})});describe("starting enabled",function(){describe("initialization",function(){it("should not fire the event with a valid value",function(){E();expect(G).not.toHaveBeenCalled()});it("should not fire the event with an invalid value",function(){F="Foo";E();expect(G).not.toHaveBeenCalled()})});describe("disabling before having validated",function(){it("should not fire the event with a valid value",function(){E();D.disable();expect(G).not.toHaveBeenCalled()});it("should not fire the event with an invalid value",function(){F="Foo";E();D.disable();expect(G).not.toHaveBeenCalled()})});describe("disabling after having validated",function(){beforeEach(function(){E()});describe("after validating with an invalid value",function(){beforeEach(function(){F="Foo";D.validate();G.reset()});it("should fire the event with a valid value",function(){F=null;D.disable();expect(G.callCount).toBe(1);expect(G.mostRecentCall.args[0]).toBe(D);expect(G.mostRecentCall.args[1]).toBe(true)});it("should fire the event with an invalid value",function(){D.disable();expect(G.callCount).toBe(1);expect(G.mostRecentCall.args[0]).toBe(D);expect(G.mostRecentCall.args[1]).toBe(true)})});describe("after validating with a valid value",function(){beforeEach(function(){D.validate();G.reset()});it("should not fire the event with a valid value",function(){D.disable();expect(G).not.toHaveBeenCalled()});it("should fire the event with an invalid value",function(){F="Foo";D.disable();expect(G).not.toHaveBeenCalled()})})})})});describe("errors",function(){describe("enabling/disabling",function(){beforeEach(function(){B({renderTo:Ext.getBody(),allowBlank:false,getErrors:function(){return["Some error"]}})});it("should remove any active errors during a disable",function(){D.validate();D.disable();expect(D.hasActiveError()).toBe(false)});it("should should revalidate when enabled if invalid when disabled",function(){D.validate();D.disable();D.enable();expect(D.hasActiveError()).toBe(true)});it("should should not revalidate when enabled if clearInvalid is called",function(){D.validate();D.disable();D.clearInvalid();D.enable();expect(D.hasActiveError()).toBe(false)})})});describe("ARIA",function(){describe("ariaEl",function(){it("should be inputEl",function(){C();expect(D.ariaEl).toBe(D.inputEl)})});describe("attributes",function(){describe("in general",function(){it("should not be applied when !ariaRole",function(){C({ariaRole:undefined});expect(D.ariaEl.dom.hasAttribute("role")).toBe(false)});it("should be applied when ariaRole is defined",function(){C();A("role","foo")})});describe("aria-hidden",function(){it("should be false when visible",function(){C();A("aria-hidden","false")});it("should be true when hidden",function(){C({hidden:true});A("aria-hidden","true")})});describe("aria-disabled",function(){it("should be false when enabled",function(){C();A("aria-disabled","false")});it("should be true when disabled",function(){C({disabled:true});A("aria-disabled","true")})});describe("aria-readonly",function(){it("should be false by default",function(){C();A("aria-readonly","false")});it("should be true when readOnly",function(){C({readOnly:true});A("aria-readonly","true")})});describe("aria-invalid",function(){it("should be false by default",function(){C();A("aria-invalid","false")})});describe("aria-label",function(){it("should not exist by default",function(){C();A("aria-label",null)});it("should be rendered when set",function(){C({ariaLabel:"foo"});A("aria-label","foo")})});describe("title",function(){it("should be set to formatText",function(){C({format:"foo",formatText:"{0} bar"});A("title","foo bar")})});describe("via config",function(){it("should set aria-foo",function(){C({ariaAttributes:{"aria-foo":"bar"}});A("aria-foo","bar")})})});describe("state",function(){beforeEach(function(){C()});describe("aria-readonly",function(){beforeEach(function(){D.setReadOnly(true)});it("should change to true",function(){A("aria-readonly","true")});it("should change to false",function(){D.setReadOnly(false);A("aria-readonly","false")})});describe("aria-invalid",function(){beforeEach(function(){D.markInvalid(["foo"])});it("should change to true",function(){A("aria-invalid","true")});it("should change to false",function(){D.clearInvalid();A("aria-invalid","false")})})})})})