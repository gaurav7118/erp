describe("Ext.form.field.Checkbox",function(){var B,A;function C(D,E){jasmine.expectAriaAttr(B.inputEl,D,E)}beforeEach(function(){A=function(D){D=D||{};Ext.applyIf(D,{name:"test",renderTo:Ext.getBody()});B=new Ext.form.field.Checkbox(D)}});afterEach(function(){if(B){B.destroy()}B=A=null});it("should be registered with the 'checkboxfield' xtype",function(){B=Ext.create("Ext.form.field.Checkbox",{name:"test"});expect(B instanceof Ext.form.field.Checkbox).toBe(true);expect(Ext.getClass(B).xtype).toBe("checkboxfield")});describe("configuring",function(){it("should accept a value config",function(){A({value:true});expect(B.checked).toBe(true)})});describe("rendering",function(){describe("bodyEl",function(){beforeEach(function(){A({value:"foo"})});it("should exist",function(){expect(B.bodyEl).toBeDefined()});it("should have the class 'x-form-item-body'",function(){expect(B.bodyEl.hasCls("x-form-item-body")).toBe(true)});it("should have the id '[id]-bodyEl'",function(){expect(B.bodyEl.dom.id).toEqual(B.id+"-bodyEl")})});describe("inputEl (checkbox element)",function(){beforeEach(function(){A({value:"foo"})});it("should exist",function(){expect(B.inputEl).toBeDefined()});it("should be a child of the div wrapper",function(){expect(B.inputEl.dom.parentNode.tagName.toLowerCase()).toBe("div")});it("should be an ancestor of the bodyEl",function(){expect(B.inputEl.dom.parentNode.parentNode).toBe(B.bodyEl.dom)});it("should be an input element",function(){expect(B.inputEl.dom.tagName.toLowerCase()).toEqual("input")});it("should have type='checkbox'",function(){expect(B.inputEl.dom.tagName.toLowerCase()).toEqual("input")});it("should have the component's inputId as its id",function(){expect(B.inputEl.dom.id).toEqual(B.inputId)});it("should have the 'fieldCls' config as a class",function(){expect(B.displayEl.hasCls(B.fieldCls)).toBe(true)});describe("ARIA attributes",function(){it("should have checkbox role",function(){C("role","checkbox")});it("should have aria-hidden",function(){C("aria-hidden","false")});it("should have aria-disabled",function(){C("aria-disabled","false")});it("should have aria-invalid",function(){C("aria-invalid","false")});it("should have aria-checked",function(){C("aria-checked","false")});describe("aria-readonly",function(){it("should false by default",function(){C("aria-readonly","false")});it("should be true when readOnly",function(){var D=new Ext.form.field.Checkbox({renderTo:Ext.getBody(),name:"cb2",readOnly:true});jasmine.expectAriaAttr(D.inputEl,"aria-readonly","true");Ext.destroy(D)})})})});describe("box label",function(){it("should not be created by default",function(){A({});expect(B.bodyEl.child("label")).toBeNull()});it("should be created if the boxLabel config is defined",function(){A({boxLabel:"the box label"});expect(B.bodyEl.down("label")).not.toBeNull()});it("should be stored as a 'boxLabelEl' reference",function(){A({boxLabel:"the box label"});expect(B.bodyEl.down("label").dom).toBe(B.boxLabelEl.dom)});it("should have the class 'x-form-cb-label' by default",function(){A({boxLabel:"the box label"});expect(B.boxLabelEl.hasCls("x-form-cb-label")).toBe(true)});it("should be given the configured boxLabelCls",function(){A({boxLabel:"the box label",boxLabelCls:"my-custom-boxLabelCls"});expect(B.boxLabelEl.hasCls("my-custom-boxLabelCls")).toBe(true)});it("should have a 'for' attribute set to the inputId",function(){A({boxLabel:"the box label"});expect(B.boxLabelEl.getAttribute("for")).toEqual(B.inputId)});it("should contain the boxLabel as its inner text node",function(){A({boxLabel:"the box label"});expect(B.boxLabelEl.dom).hasHTML("the box label")});it("should be set to aria-labelledby",function(){A({boxLabel:"foo"});C("aria-labelledby",B.boxLabelEl.id)});describe("boxLabelAlign",function(){it("should render the label after the checkbox by default",function(){A({boxLabel:"the box label"});expect(B.boxLabelEl.prev().prev().dom).toBe(B.inputEl.dom)});it("should render the label after the checkbox when boxLabelAlign='after'",function(){A({boxLabel:"the box label",boxLabelAlign:"after"});expect(B.boxLabelEl.prev().prev().dom).toBe(B.inputEl.dom)});it("should give the 'after' label a class of {boxLabelCls}-after",function(){A({boxLabel:"the box label",boxLabelAlign:"after"});expect(B.boxLabelEl.hasCls(B.boxLabelCls+"-after")).toBe(true)});it("should render the label before the checkbox when boxLabelAlign='before'",function(){A({boxLabel:"the box label",boxLabelAlign:"before"});expect(B.boxLabelEl.next().dom).toBe(B.inputEl.dom)});it("should give the 'before' label a class of {boxLabelCls}-before",function(){A({boxLabel:"the box label",boxLabelAlign:"before"});expect(B.boxLabelEl.hasCls(B.boxLabelCls+"-before")).toBe(true)})});describe("noBoxLabelCls",function(){it("should add the class when there is no boxLabel",function(){A();expect(B.el.down("."+B.noBoxLabelCls,true)).not.toBeNull()});it("should not add the class when there is a boxLabel",function(){A({boxLabel:"Foo"});expect(B.el.down("."+B.noBoxLabelCls,true)).toBeNull()})})})});describe("setting value",function(){it("should accept the checked attribute",function(){A({checked:true});expect(B.getValue()).toBeTruthy();B.destroy();A();expect(B.getValue()).toBeFalsy()});it("should allow the value to be set while not rendered",function(){A({renderTo:null});B.setValue(true);B.render(Ext.getBody());expect(B.getValue()).toBeTruthy()});it("should support different values for setValue",function(){A();B.setValue("true");expect(B.getValue()).toBeTruthy();B.destroy();A();B.setValue("1");expect(B.getValue()).toBeTruthy();B.destroy();A();B.setValue("on");expect(B.getValue()).toBeTruthy();B.destroy();A({inputValue:"foo"});B.setValue("foo");expect(B.getValue()).toBeTruthy();B.setValue("bar");expect(B.getValue()).toBeFalsy()});it("should fire the handler, with the correct scope",function(){var F={fn:function(){}},E={},D=spyOn(F,"fn");A({handler:F.fn});B.setValue(true);expect(F.fn).toHaveBeenCalledWith(B,true);expect(D.calls[0].object).toBe(B);B.destroy();A({handler:F.fn,scope:F});B.setValue(true);expect(F.fn).toHaveBeenCalledWith(B,true);expect(D.calls[1].object).toBe(F);B.destroy();A({handler:F.fn,scope:E});B.setValue(true);expect(F.fn).toHaveBeenCalledWith(B,true);expect(D.calls[2].object).toBe(E)});it("should not fire the handler if the value doesn't change",function(){A({handler:function(){}});spyOn(B,"handler");B.setValue(false);expect(B.handler).not.toHaveBeenCalled()});it("should allow the handler to route to a view controller",function(){var E=new Ext.app.ViewController();E.someMethod=function(){};spyOn(E,"someMethod");var D=new Ext.container.Container({controller:E,renderTo:Ext.getBody(),items:{xtype:"checkbox",handler:"someMethod"}});D.items.first().setValue(true);expect(E.someMethod).toHaveBeenCalled();D.destroy()});it("should update aria-checked",function(){A();B.setValue(true);C("aria-checked","true")})});describe("readOnly",function(){it("should set the checkbox to disabled=true",function(){A({readOnly:true,renderTo:Ext.getBody()});expect(B.inputEl.dom.disabled).toBe(true)});describe("setReadOnly method",function(){it("should set disabled=true when the arg is true",function(){A({readOnly:false,renderTo:Ext.getBody()});B.setReadOnly(true);expect(B.inputEl.dom.disabled).toBe(true)});it("should set disabled=false when the arg is false",function(){A({readOnly:true,renderTo:Ext.getBody()});B.setReadOnly(false);expect(B.inputEl.dom.disabled).toBe(false)});it("should set disabled=true when the arg is false but the component is disabled",function(){A({readOnly:true,disabled:true,renderTo:Ext.getBody()});B.setReadOnly(false);expect(B.inputEl.dom.disabled).toBe(true)})})});describe("submit value",function(){it("should submit the inputValue when checked",function(){A({name:"cb-name",inputValue:"the-input-value",checked:true});expect(B.getSubmitData()).toEqual({"cb-name":"the-input-value"})});it("should submit nothing when unchecked",function(){A({name:"cb-name",inputValue:"the-input-value",checked:false});expect(B.getSubmitData()).toBeNull()});it("should submit the uncheckedValue when unchecked, if defined",function(){A({name:"cb-name",inputValue:"the-input-value",uncheckedValue:"the-unchecked-value",checked:false});expect(B.getSubmitData()).toEqual({"cb-name":"the-unchecked-value"})})});describe("getModelData",function(){it("should return true when checked",function(){A({name:"cb-name",inputValue:"the-input-value",checked:true});expect(B.getModelData()).toEqual({"cb-name":true})});it("should return false when unchecked",function(){A({name:"cb-name",inputValue:"the-input-value",uncheckedValue:"the-unchecked-value",checked:false});expect(B.getModelData()).toEqual({"cb-name":false})})});describe("setRawValue",function(){it("should be able to fire the change event when checking after calling setRawValue",function(){var D;A();B.setRawValue(true);B.on("change",function(F,E){D=E});jasmine.fireMouseEvent(B.inputEl.dom,"click");expect(D).toBe(false)});it("should be dirty after calling setRawValue",function(){A();B.setRawValue(true);expect(B.isDirty()).toBe(true)})});describe("setBoxLabel",function(){var F=0,E=0,D='<div style="width: 100px;">a</div>';beforeEach(function(){var G;if(F===0){G=new Ext.form.field.Checkbox({renderTo:Ext.getBody()});F=G.getWidth();G.destroy();G=new Ext.form.field.Checkbox({renderTo:Ext.getBody(),boxLabel:D});E=G.getWidth();G.destroy()}});describe("before render",function(){describe("with an existing label",function(){it("should clear the label when passing an empty string",function(){A({boxLabel:"Foo",renderTo:null});B.setBoxLabel("");B.render(Ext.getBody());expect(B.getWidth()).toBe(F)});it("should change the label when passing an empty string",function(){A({boxLabel:"Foo",renderTo:null});B.setBoxLabel("");B.render(Ext.getBody());expect(B.getWidth()).toBe(F)})});describe("with no label configured",function(){it("should show the label",function(){A({renderTo:null});B.setBoxLabel(D);B.render(Ext.getBody());expect(B.getWidth()).toBe(E)})})});describe("after render",function(){describe("with an existing label",function(){it("should clear the label when passing an empty string",function(){A({boxLabel:"Foo",liquidLayout:false});var G=B.componentLayoutCounter;B.setBoxLabel("");expect(B.getWidth()).toBe(F);expect(B.componentLayoutCounter).toBe(G+1)});it("should change the label when passing an empty string",function(){A({boxLabel:"Foo",liquidLayout:false});var G=B.componentLayoutCounter;B.setBoxLabel(D);expect(B.getWidth()).toBe(E);expect(B.componentLayoutCounter).toBe(G+1)})});describe("with no label configured",function(){it("should show the label",function(){A({liquidLayout:false});var G=B.componentLayoutCounter;B.setBoxLabel(D);expect(B.getWidth()).toBe(E);expect(B.componentLayoutCounter).toBe(G+1)})})})})})