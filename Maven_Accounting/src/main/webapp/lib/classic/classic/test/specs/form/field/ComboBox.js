describe("Ext.form.field.ComboBox",function(){var J,K,A,G=Ext.isIE?xit:it,M=true,F=Ext.data.Store.prototype.load,L=Ext.data.Store.prototype.flushLoad,H;function B(N,O){jasmine.expectAriaAttr(J,N,O)}function D(O,N,Q){var R={fn:Q||Ext.emptyFn},P=spyOn(R,"fn");O.addListener(N,R.fn);return P}function C(O,N){J.inputEl.dom.value=O;J.onFieldMutation({type:"change",getKey:function(){return N?Ext.event.Event.DELETE:0},isSpecialKey:function(){return !!N},DELETE:Ext.event.Event.DELETE,BACKSPACE:Ext.event.Event.BACKSPACE});if(O){J.doQueryTask.cancel();J.doRawQuery();J.getPicker().hide()}}function E(N,O){N=N||{};if(!N.name){N.name="test"}if(!N.store&&!O){N.store=K}J=new Ext.form.field.ComboBox(N)}beforeEach(function(){H=Ext.data.Store.prototype.load=function(){F.apply(this,arguments);if(M){this.flushLoad.apply(this,arguments)}return this};A=Ext.define(null,{extend:"Ext.data.Model",fields:[{type:"string",name:"text"},{type:"string",name:"val"}]});K=new Ext.data.Store({proxy:{type:"memory"},model:A,data:[{id:1,text:"text 1",val:"value 1"},{id:2,text:"text 2",val:"value 2"},{id:3,text:"text 3",val:"value 3"},{id:4,text:"text 31",val:"value 31"},{id:5,text:"text 32",val:"value 32"},{id:6,text:"text 33",val:"value 33"},{id:7,text:"text 34",val:"value 34"},{id:8,text:"Foo",val:"foo1"},{id:9,text:"Foo",val:"foo2"}]})});afterEach(function(){Ext.data.ProxyStore.prototype.load=F;if(J){J.destroy()}if(K){K.destroy()}J=K=null});function I(P,N){var O;N=N||K;N.each(function(Q){if(Q.get("val")===P){O=Q;return false}});J.expand();jasmine.fireMouseEvent(J.getPicker().getNode(O),"click")}describe("checkChangeBuffer",function(){function N(P,O){runs(function(){C(P,O)})}it("should respect the checkChangeBuffer when typing a value",function(){E({renderTo:Ext.getBody(),checkChangeBuffer:500,forceSelection:false});var O=jasmine.createSpy();J.on("change",O);N("t");waits(100);N("te");waits(100);N("tex");waits(100);N("text");waits(100);runs(function(){expect(O).not.toHaveBeenCalled()});waits(300);runs(function(){expect(O).not.toHaveBeenCalled()});waits(300);runs(function(){expect(O.callCount).toBe(1);expect(O.mostRecentCall.args[1]).toBe("text");expect(O.mostRecentCall.args[2]).toBeNull()})});it("should respect checkChangeBuffer when deleting values",function(){E({renderTo:Ext.getBody(),checkChangeBuffer:500,forceSelection:false,value:"text"});var O=jasmine.createSpy();J.on("change",O);N("tex",true);waits(100);N("te",true);waits(100);N("t");waits(100);N("t",true);waits(100);N("",true);waits(100);runs(function(){expect(O).not.toHaveBeenCalled()});waits(300);runs(function(){expect(O).not.toHaveBeenCalled()});waits(300);runs(function(){expect(O.callCount).toBe(1);expect(O.mostRecentCall.args[1]).toBeNull();expect(O.mostRecentCall.args[2]).toBe("text")})})});it("should encode the input value in the template",function(){E({renderTo:Ext.getBody(),value:'test "  <br/> test'});expect(J.inputEl.dom.value).toBe('test "  <br/> test')});describe("store shortcuts",function(){describe("with 1-dimensional array",function(){it("should set the valueField/displayField on an auto created store",function(){J=new Ext.form.field.ComboBox({store:["Item 1","Item 2","Item 3"]});expect(J.valueField).toBe("field1");expect(J.displayField).toBe("field1")});it("should set the value & raw value correctly",function(){J=new Ext.form.field.ComboBox({store:["Item 1","Item 2","Item 3"]});J.setValue("Item 1");expect(J.getValue()).toBe("Item 1");expect(J.getRawValue()).toBe("Item 1")});it("should not overwrite a configured displayTpl",function(){J=new Ext.form.field.ComboBox({store:["Item 1","Item 2","Item 3"],displayTpl:'<tpl for=".">Value is {field1}</tpl>'});J.setValue("Item 1");expect(J.getRawValue()).toBe("Value is Item 1")})});describe("with 2-dimensional array",function(){it("should set the valueField/displayField on an auto created store",function(){J=new Ext.form.field.ComboBox({store:[[1,"Item 1"],[2,"Item 2"],[3,"Item 3"]]});expect(J.valueField).toBe("field1");expect(J.displayField).toBe("field2")});it("should set the value & raw value correctly",function(){J=new Ext.form.field.ComboBox({store:[[1,"Item 1"],[2,"Item 2"],[3,"Item 3"]]});J.setValue(2);expect(J.getValue()).toBe(2);expect(J.getRawValue()).toBe("Item 2")});it("should not overwrite a configured displayTpl",function(){J=new Ext.form.field.ComboBox({store:[[1,"Item 1"],[2,"Item 2"],[3,"Item 3"]],displayTpl:'<tpl for=".">Value is {field2}</tpl>'});J.setValue(1);expect(J.getRawValue()).toBe("Value is Item 1")})})});describe("hiddenName",function(){it("should create a hidden element that gets synced with the value",function(){E({renderTo:Ext.getBody(),value:"value 1",hiddenName:"foo"});var N=J.getEl().down("[name=foo]",true);expect(N.type.toLowerCase()).toBe("hidden");expect(N.value).toBe("value 1");J.setValue("value 34");expect(N.value).toBe("value 34")})});describe("defaults",function(){describe("normal",function(){beforeEach(function(){E()});it("should have triggerCls = 'x-form-arrow-trigger'",function(){expect(J.triggerCls).toEqual("x-form-arrow-trigger")});it("should have multiSelect = false",function(){expect(J.multiSelect).toBe(false)});it("should have delimiter = ', '",function(){expect(J.delimiter).toEqual(", ")});it("should have displayField = 'text'",function(){expect(J.displayField).toEqual("text")});it("should have valueField = displayField",function(){expect(J.valueField).toEqual("text")});it("should have triggerAction = 'all'",function(){expect(J.triggerAction).toEqual("all")});it("should have allQuery = ''",function(){expect(J.allQuery).toEqual("")});it("should have queryParam = 'query'",function(){expect(J.queryParam).toEqual("query")});it("should have queryMode = 'remote'",function(){expect(J.queryMode).toEqual("remote")});it("should have queryDelay = 500",function(){expect(J.queryDelay).toEqual(500)});it("should have minChars = 4",function(){expect(J.minChars).toEqual(4)});it("should have autoSelect = true",function(){expect(J.autoSelect).toBe(true)});it("should have typeAhead = false",function(){expect(J.typeAhead).toBe(false)});it("should have typeAheadDelay = 250",function(){expect(J.typeAheadDelay).toEqual(250)});it("should have forceSelection = false",function(){expect(J.forceSelection).toBe(false)});it("should have listConfig = undefined",function(){expect(J.listConfig).not.toBeDefined()});describe("rendered",function(){beforeEach(function(){J.render(Ext.getBody())});it("should have combobox role",function(){B("role","combobox")});it("should have aria-autocomplete",function(){B("aria-autocomplete","list")})})});describe("with queryMode = 'local'",function(){beforeEach(function(){E({queryMode:"local"})});it("should have queryDelay = 10",function(){expect(J.queryDelay).toEqual(10)});it("should have minChars = 0",function(){expect(J.minChars).toEqual(0)})})});describe("emptyText",function(){if(!Ext.supports.Placeholder){it("should be able to set a value equal to emptyText",function(){E({valueField:"val",displayField:"text",emptyText:"text 1",renderTo:document.body});J.setValue("value 1");J.focus();jasmine.waitForFocus(J);runs(function(){expect(J.inputEl.dom.value).toBe("text 1");expect(J.getRawValue()).toBe("text 1")})})}});describe("value initialization",function(){describe("without a value",function(){it("should have value = null by default",function(){E();expect(J.value).toBeNull()});it("should return null when calling getValue()",function(){E();expect(J.value).toBeNull()})})});describe("getSubmitValue",function(){it("should get the underlying field value",function(){E({queryMode:"local",value:"val 2"});expect(J.getSubmitValue()).toBe("val 2")});it("should return an empty string if the value is null",function(){E({queryMode:"local"});expect(J.getSubmitValue()).toBe("")})});describe("getModelData",function(){it("should get the underlying field value",function(){E({queryMode:"local",name:"comboName",value:"val 2"});expect(J.getModelData()).toEqual({comboName:"val 2"})})});describe("onExpand",function(){var N=function(){return"foo"};beforeEach(function(){E({renderTo:Ext.getBody(),displayField:"val",listConfig:{width:234,maxHeight:345,loadingText:"gazingazang",emptyText:"buffoopaloo",getInnerTpl:N},matchFieldWidth:false,value:"value 2"});J.expand()});it("should create a Ext.view.BoundList as the picker",function(){expect(J.picker).toBeDefined();expect(J.picker instanceof Ext.view.BoundList).toBe(true)});it("should pass the configured store to the BoundList",function(){expect(J.picker.store).toBe(J.store)});it("should pass the configured displayField to the BoundList",function(){expect(J.picker.displayField).toEqual(J.displayField)});it("should pass the configured listConfig.width to the BoundList",function(){expect(J.picker.width).toEqual(234)});it("should pass the configured listConfig.maxHeight to the BoundList",function(){expect(J.picker.maxHeight).toEqual(345)});it("should pass the configured listConfig.loadingText to the BoundList",function(){expect(J.picker.loadingText).toEqual("gazingazang")});it("should pass the configured listConfig.emptyText to the BoundList",function(){expect(J.picker.emptyText).toEqual("buffoopaloo")});it("should pass a configured listConfig.getInnerTpl method to the BoundList config",function(){expect(J.picker.getInnerTpl).toBe(N)});it("should set the BoundList's selection to match the current value",function(){expect(J.picker.selModel.getSelection().length).toEqual(1);expect(J.picker.selModel.getSelection()[0].get("val")).toEqual(J.value)});it("should initialize a BoundListKeyNav on the BoundList",function(){expect(J.keyNav).toBeDefined();expect(J.keyNav instanceof Ext.util.KeyNav).toBe(true);expect(J.getPicker().getNavigationModel() instanceof Ext.view.BoundListKeyNav).toBe(true)});it("should enable the BoundListKeyNav",function(){waitsFor(function(){return J.getPicker().getNavigationModel().disabled===false})});it("should set aria-owns",function(){B("aria-owns",J.picker.listEl.id)})});describe("onCollapse",function(){it("should disable the BoundListKeyNav",function(){runs(function(){E({renderTo:Ext.getBody()});J.expand()});waitsFor(function(){return J.getPicker().getNavigationModel().disabled===false});runs(function(){J.collapse();expect(J.getPicker().getNavigationModel().disabled).toBe(true)})})});describe("setting value",function(){describe("value config",function(){it("should accept a single string",function(){E({value:"value 2",valueField:"val"});expect(J.value).toEqual("value 2")});it("should accept an array of string values",function(){E({multiSelect:true,value:["value 3","not in store"],valueField:"val"});expect(J.value).toEqual(["value 3","not in store"])});it("should accept a single Ext.data.Model",function(){E({value:K.getAt(0),valueField:"val"});expect(J.value).toEqual("value 1")});it("should accept an array of Ext.data.Model objects",function(){E({multiSelect:true,value:[K.getAt(0),K.getAt(2)],valueField:"val"});expect(J.value).toEqual(["value 1","value 3"])});it("should display the values separated by the configured delimiter",function(){E({multiSelect:true,value:["value 1","value 2"],valueField:"val",renderTo:Ext.getBody(),delimiter:"|"});expect(J.inputEl.dom.value).toEqual("text 1|text 2")})});describe("setValue method",function(){it("should return the combo",function(){E({valueField:"val"});expect(J.setValue("value 2")).toBe(J)});it("should accept a single string",function(){E({valueField:"val"});J.setValue("value 2");expect(J.value).toEqual("value 2")});it("should accept an array of string values",function(){E({multiSelect:true,valueField:"val"});J.setValue(["value 3","not in store"]);expect(J.value).toEqual(["value 3","not in store"])});it("should accept a single Ext.data.Model",function(){E({valueField:"val"});J.setValue(K.getAt(0));expect(J.value).toEqual("value 1")});it("should accept an array of Ext.data.Model objects",function(){E({multiSelect:true,valueField:"val"});J.setValue([K.getAt(0),K.getAt(2)]);expect(J.value).toEqual(["value 1","value 3"])});it("should only display the first value if not multiSelect",function(){E({valueField:"val",renderTo:Ext.getBody(),delimiter:"|"});J.setValue(["value 1","value 2"]);expect(J.inputEl.dom.value).toEqual("text 1")});it("should display the values separated by the configured delimiter if multiSelect",function(){E({valueField:"val",multiSelect:true,renderTo:Ext.getBody(),delimiter:"|"});J.setValue(["value 1","value 2"]);expect(J.inputEl.dom.value).toEqual("text 1|text 2")});it("should display the valueNotFoundText for values not in the store if multiSelect",function(){E({valueField:"val",forceSelection:true,multiSelect:true,valueNotFoundText:"oops!",renderTo:Ext.getBody()});J.setValue(["value 1","value not in store"]);expect(J.inputEl.dom.value).toEqual("text 1, oops!")});it("should not display the valueNotFoundText for values not in the store if not multiSelect",function(){E({valueField:"val",forceSelection:true,valueNotFoundText:"oops!",renderTo:Ext.getBody()});J.setValue(["value 1","value not in store"]);expect(J.inputEl.dom.value).toEqual("text 1")});it("should update the expanded dropdown's selection - single select",function(){E({valueField:"val",renderTo:Ext.getBody()});J.expand();waits(1);runs(function(){J.setValue("value 2");expect(J.picker.getSelectionModel().getSelection()).toEqual([K.getAt(1)])})});it("should update the expanded dropdown's selection - multi select",function(){E({valueField:"val",renderTo:Ext.getBody(),multiSelect:true});J.expand();waits(1);runs(function(){J.setValue(["value 1","value 3"]);expect(J.picker.getSelectionModel().getSelection()).toEqual([K.getAt(0),K.getAt(2)])})});describe("change event",function(){it("should not fire the change event when the value stays the same - single value",function(){var N=jasmine.createSpy();E({valueField:"val",value:"value1",renderTo:Ext.getBody(),listeners:{change:N}});J.setValue("value1");expect(N).not.toHaveBeenCalled()});it("should fire the change event when the value changes - single value",function(){var N=jasmine.createSpy();E({valueField:"val",value:"value1",renderTo:Ext.getBody(),listeners:{change:N}});J.setValue("value2");expect(N).toHaveBeenCalled();expect(N.mostRecentCall.args[0]).toBe(J);expect(N.mostRecentCall.args[1]).toEqual("value2");expect(N.mostRecentCall.args[2]).toEqual("value1")});it("should not fire the change event when the value stays the same - multiple values",function(){var N=jasmine.createSpy();E({multiSelect:true,valueField:"val",value:["value1","value2"],renderTo:Ext.getBody(),listeners:{change:N}});J.setValue(["value1","value2"]);expect(N).not.toHaveBeenCalled()});it("should fire the change event when the value changes - multiple values",function(){var N=jasmine.createSpy();E({multiSelect:true,valueField:"val",value:["value1","value2"],renderTo:Ext.getBody(),listeners:{change:N}});J.setValue(["value1","value3"]);expect(N).toHaveBeenCalled();expect(N.mostRecentCall.args[0]).toBe(J);expect(N.mostRecentCall.args[1]).toEqual(["value1","value3"]);expect(N.mostRecentCall.args[2]).toEqual(["value1","value2"])})})})});describe("getting value",function(){beforeEach(function(){E({valueField:"val",renderTo:Ext.getBody()})});it("should return the raw text field value if no selection has been made",function(){J.inputEl.dom.value="not-in-store";expect(J.getValue()).toEqual("not-in-store")});it("should return the valueField for an item selected from the list",function(){J.inputEl.dom.value="not-in-store";J.expand();waits(1);runs(function(){J.picker.getSelectionModel().select([K.findRecord("text","text 2")]);expect(J.getValue()).toEqual("value 2")})});it("should return the raw text field value if it is changed after selection",function(){J.inputEl.dom.value="not-in-store";J.expand();waits(1);runs(function(){J.picker.getSelectionModel().select([K.findRecord("text","text 2")]);J.inputEl.dom.value="text 2a";expect(J.getValue()).toEqual("text 2a")})})});describe("finding records",function(){beforeEach(function(){E({valueField:"val",displayField:"text"})});describe("findRecordByValue",function(){it("should return the matching record",function(){expect(J.findRecordByValue("value 2")).toBe(K.getAt(1))});it("should return the first matching record",function(){var N=K.insert(0,{val:"value 2"})[0];expect(J.findRecordByValue("value 2")).toBe(N)});it("should return false if no record is found",function(){expect(J.findRecordByValue("bar")).toBe(false)});describe("store updates",function(){it("should react to adds",function(){expect(J.findRecordByValue("bar")).toBe(false);var N=K.add({val:"bar"})[0];expect(J.findRecordByValue("bar")).toBe(N)});it("should react to removes",function(){expect(J.findRecordByValue("value 1")).toBe(K.getAt(0));K.removeAt(0);expect(J.findRecordByValue("value 1")).toBe(false)});it("should react to updates",function(){expect(J.findRecordByValue("value 1")).toBe(K.getAt(0));K.getAt(0).set("val","bar");expect(J.findRecordByValue("value 1")).toBe(false)})})});describe("findRecordByDisplay",function(){it("should return the matching record",function(){expect(J.findRecordByDisplay("text 2")).toBe(K.getAt(1))});it("should return the first matching record",function(){var N=K.insert(0,{text:"text 2"})[0];expect(J.findRecordByDisplay("text 2")).toBe(N)});it("should return false if no record is found",function(){expect(J.findRecordByDisplay("bar")).toBe(false)});describe("store updates",function(){it("should react to adds",function(){expect(J.findRecordByDisplay("bar")).toBe(false);var N=K.add({text:"bar"})[0];expect(J.findRecordByDisplay("bar")).toBe(N)});it("should react to removes",function(){expect(J.findRecordByDisplay("text 1")).toBe(K.getAt(0));K.removeAt(0);expect(J.findRecordByDisplay("text 1")).toBe(false)});it("should react to updates",function(){expect(J.findRecordByDisplay("text 1")).toBe(K.getAt(0));K.getAt(0).set("text","bar");expect(J.findRecordByDisplay("text 1")).toBe(false)})})})});describe("modifications via the text input",function(){it("should be able to requery when typing a value, choosing from a list then retyping the same value",function(){E({renderTo:Ext.getBody(),valueField:"val",displayField:"text",queryMode:"local"});var N=K.getFilters();C("text 12");jasmine.fireMouseEvent(J.getTriggers().picker.el,"click");I("value 1");expect(N.getCount()).toBe(0);C("text 12");expect(N.first().getValue()).toBe("text 12")});describe("with queryMode: local",function(){it("should filter the store via the raw value",function(){E({renderTo:Ext.getBody(),valueField:"val",displayField:"text",queryMode:"local"});C("text 3");var O=K.getFilters();expect(O.getCount()).toBe(1);var N=O.getAt(0);expect(N.getProperty()).toBe("text");expect(N.getValue()).toBe("text 3");expect(J.getValue()).toBe("text 3")});it("should clear the value & any filters when all text is removed",function(){E({renderTo:Ext.getBody(),valueField:"val",displayField:"text",queryMode:"local",value:"text 3"});C("",true);var N=K.getFilters();expect(N.getCount()).toBe(0);expect(J.getValue()).toBeNull()})});describe("clearing the value",function(){it("should set the value to null",function(){E({renderTo:Ext.getBody(),valueField:"val",displayField:"text",queryMode:"local",value:"text 3"});C("",true);expect(J.getValue()).toBeNull()});it("should be able to select after clearing the value",function(){E({renderTo:Ext.getBody(),valueField:"val",displayField:"text",queryMode:"local",value:"text 3"});C("",true);I("value 2");expect(J.getValue()).toBe("value 2");expect(J.getRawValue()).toBe("text 2")});it("should be able to select after clearing a cached value",function(){E({renderTo:Ext.getBody(),valueField:"val",displayField:"text",queryMode:"local",value:"value 1"});C("",true);C("text 2");C("",true);C("text 2");I("value 2");expect(J.getValue()).toBe("value 2");expect(J.getRawValue()).toBe("text 2");expect(J.isExpanded).toBe(false)})})});describe("growToLongestValue",function(){var O,S,P,R,Q="foo",T="this text is veeeeeeeeeeeeeeeeeeeeeeeeeeeery long",N="this text is much, much, much, much, much, much, much, much, much much, much, much, much, much, much, much, much too long";describe("when true",function(){describe("adding a value to store",function(){it("should not grow when a longer record is added to store when not set to grow",function(){E({grow:false,growToLongestValue:true,renderTo:Ext.getBody()});O=J.bodyEl;P=O.getWidth();K.add({text:T,val:"value 4"});R=O.getWidth();expect(P).toEqual(R)});it("should grow when a longer record is added to store",function(){E({grow:true,growToLongestValue:true,renderTo:Ext.getBody()});O=J.bodyEl;P=O.getWidth();K.add({text:T,val:"value 4"});R=O.getWidth();expect(R).toBeGreaterThan(P)});it("should not grow when a shorter record is added to store",function(){E({grow:true,growToLongestValue:true,renderTo:Ext.getBody()});var U=J.inputEl;P=U.getWidth();K.add({text:Q,val:"value 4"});R=U.getWidth();expect(P).toEqual(R)});it("should grow when growToLongestValue is set",function(){E({grow:true,growToLongestValue:true,renderTo:Ext.getBody()});O=J.bodyEl;P=O.getWidth();K.add({text:T,val:"value 4"});R=O.getWidth();expect(R).toBeGreaterThan(P)});it("should not grow when growToLongestValue isn't set",function(){E({grow:true,growToLongestValue:false,renderTo:Ext.getBody()});O=J.bodyEl;P=O.getWidth();K.add({text:T,val:"value 4"});R=O.getWidth();expect(P).toEqual(R)});it("should not grow larger than growMax when growMax is exceeded",function(){E({grow:true,growMax:200,growToLongestValue:true,renderTo:Ext.getBody()});K.add({text:N,val:"value 4"});expect(J.bodyEl.getWidth()).toEqual(J.growMax)})});describe("removing store values",function(){it("should shrink when largest item is removed",function(){E({grow:true,growToLongestValue:true,renderTo:Ext.getBody()});O=J.bodyEl;K.add({text:T,val:"value 4"});P=O.getWidth();K.removeAt(K.getCount()-1);R=O.getWidth();expect(R).toBeLessThan(P)});it("should not shrink when item other than largest item is removed",function(){E({grow:true,growToLongestValue:true,renderTo:Ext.getBody()});O=J.bodyEl;K.add({text:T,val:"value 4"});P=O.getWidth();K.removeAt(0);R=O.getWidth();expect(R).toEqual(P)});it("should not shrink below growMin width",function(){E({grow:true,growMin:100,growToLongestValue:true,renderTo:Ext.getBody()});O=J.bodyEl;K.add({text:T,val:"value 4"});P=O.getWidth();K.removeAll();R=O.getWidth();expect(R).toEqual(J.growMin)})})});describe("when false",function(){beforeEach(function(){Ext.util.CSS.createStyleSheet(".x-form-text { font:15px monospace;letter-spacing:0px; }","growStyleSheet")});afterEach(function(){Ext.util.CSS.removeStyleSheet("growStyleSheet")});it("should start out at growMin",function(){E({renderTo:document.body,grow:true,growToLongestValue:false,growMin:50});expect(J.getWidth()).toBe(50)});it("should initially render at the width of the text",function(){E({renderTo:document.body,value:"mmmmmmmmmm",grow:true,growToLongestValue:false,growMin:50});expect(J.getWidth()).toBe(J.bodyEl.getWidth())});it("should initially render with a width of growMax if initial text width exceeds growMax",function(){E({renderTo:document.body,value:"mmmmmmmmmmmmmmmmmmmmmmmmmmmmmm",grow:true,growToLongestValue:false,growMax:200});expect(J.getWidth()).toBe(200)});it("should grow and shrink",function(){E({renderTo:document.body,grow:true,growToLongestValue:false,triggers:{foo:{}},growMin:100,growMax:200});expect(J.getWidth()).toBe(100);J.setValue("mmmmmmmmmmmmmm");expect(J.getWidth()).toBe(J.bodyEl.getWidth());J.setValue("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmm");expect(J.getWidth()).toBe(200);J.setValue("mmmmmmmmmmmmmm");expect(J.getWidth()).toBe(J.bodyEl.getWidth());J.setValue("m");expect(J.getWidth()).toBe(100)})})});describe("doQuery method",function(){it("should set the lastQuery property",function(){E();J.doQuery("foobar");expect(J.lastQuery).toEqual("foobar")});it("should not clear remote store's filter",function(){E();spyOn(J.store,"clearFilter");J.doQuery("foobar");expect(J.store.clearFilter).not.toHaveBeenCalled()});describe("local queryMode",function(){it("should auto select if the last query is the same",function(){E({renderTo:document.body,queryMode:"local",displayField:"val",lastQuery:"value 2"});spyOn(J,"doAutoSelect");J.doQuery("value 2");expect(J.doAutoSelect).toHaveBeenCalled()});it("should filter the store based on the displayField",function(){E({queryMode:"local",displayField:"val"});var O=jasmine.createSpy(),N=J.getStore();N.on("filterchange",O);J.doQuery("value 2");expect(O.callCount).toBe(1);expect(N.getCount()).toBe(1);expect(N.getAt(0).get("val")).toBe("value 2")});it("should not filter the store if forceAll = true",function(){E({queryMode:"local",displayField:"val"});J.doQuery("value 2",true);expect(J.getStore().getCount()).toEqual(1)});it("should add to existing filters",function(){E({queryMode:"local",displayField:"val"});K.filter("val","value");J.doQuery("value 3");expect(K.getCount()).toBe(5)});it("should remove only the filters added by the combo",function(){E({queryMode:"local",displayField:"val"});K.filter("val","value");J.doQuery("value 3");J.doQuery("");expect(K.getCount()).toBe(7)});it("should clear any active filters on destroy",function(){E({queryMode:"local",displayField:"val"});K.filter("val","value");J.doQuery("value 3");expect(K.getCount()).toBe(5);J.destroy();expect(K.getCount()).toBe(7)})});describe("remote queryMode",function(){it("should call the store's load method",function(){E({queryMode:"remote",displayField:"val"});spyOn(J.store,"load");J.doQuery("foobar");expect(J.store.load.callCount).toEqual(1);expect(J.store.load.calls[0].args[0].params.query).toEqual("foobar")});it("should pass the query string using the 'queryParam' as the parameter name",function(){E({queryMode:"remote",displayField:"val",queryParam:"customparam"});spyOn(J.store,"load");J.doQuery("foobar");expect(J.store.load.callCount).toEqual(1);expect(J.store.load.calls[0].args[0].params.customparam).toEqual("foobar")})});describe("beforequery event",function(){it("should fire the 'beforequery' event",function(){E();var N=jasmine.createSpy();J.on("beforequery",N);J.doQuery("foobar",true);expect(N).toHaveBeenCalledWith({query:"foobar",forceAll:true,combo:J,cancel:false});expect(J.lastQuery).toBeDefined()});it("should not query if a 'beforequery' handler returns false",function(){E();J.on("beforequery",function(){return false});expect(J.lastQuery).not.toBeDefined()});it("should not query if a 'beforequery' handler sets the query event object's cancel property to true",function(){E();J.on("beforequery",function(N){N.cancel=true});expect(J.lastQuery).not.toBeDefined()})});describe("minChars config",function(){it("should not query if the number of entered chars is less than the minChars config",function(){E({minChars:100});J.doQuery("foobar");expect(J.lastQuery).not.toBeDefined()});it("should ignore the minChars if forceAll = true",function(){E({minChars:100});J.doQuery("foobar",true);expect(J.lastQuery).toBeDefined()})});it("should expand the dropdown",function(){E();spyOn(J,"expand");J.doQuery("foobar");expect(J.expand).toHaveBeenCalled()})});describe("doAutoSelect method",function(){it("should highlight the selected item",function(){var N;E({queryMode:"local",displayField:"val",renderTo:Ext.getBody()});J.expand();J.setValue("value 32");N=J.picker.getNode(J.picker.selModel.lastSelected);spyOn(J.picker.getNavigationModel(),"setPosition").andCallThrough();J.doAutoSelect();expect(J.picker.getNavigationModel().setPosition).toHaveBeenCalled();expect(Ext.fly(N).hasCls("x-boundlist-item-over")).toBe(true)});it("should scroll the selected item into view",function(){E({queryMode:"local",displayField:"val",renderTo:Ext.getBody()});J.expand();spyOn(J.picker.getScrollable(),"scrollIntoView");J.setValue("value 32");J.doAutoSelect();expect(J.picker.getScrollable().scrollIntoView).toHaveBeenCalled()})});describe("doRawQuery method",function(){it("should call the doQuery method with the contents of the field",function(){E({renderTo:Ext.getBody()});spyOn(J,"doQuery");J.inputEl.dom.value="foobar";J.doRawQuery();expect(J.doQuery).toHaveBeenCalledWith("foobar",false,true)})});describe("trigger click",function(){it("should perform an 'all' query with the allQuery config if triggerAction='all'",function(){E({renderTo:Ext.getBody(),triggerAction:"all",allQuery:"the-all-query"});spyOn(J,"doQuery");J.onTriggerClick();expect(J.doQuery).toHaveBeenCalledWith("the-all-query",true)});it("should perform a query with the current field value if triggerAction='query'",function(){E({renderTo:Ext.getBody(),triggerAction:"query",allQuery:"the-all-query",value:"value 2",valueField:"val"});spyOn(J,"doQuery");J.onTriggerClick();expect(J.doQuery).toHaveBeenCalledWith("text 2",false,true)});describe("emptyText list config and no store data",function(){var O=false,N;beforeEach(function(){N={queryMode:"local",store:new Ext.data.Store({proxy:{type:"memory"},model:A,data:[]}),renderTo:Ext.getBody()}});afterEach(function(){O=false});it("should expand the bound list and display the empty text if configured",function(){E(Ext.apply(N,{listConfig:{emptyText:"derp"}}));spyOn(J,"expand").andCallThrough();J.onTriggerClick();expect(J.expand).toHaveBeenCalled();expect(J.picker.emptyText).toBe("derp")});it("should not expand the bound list and display the empty text if not configured",function(){E(N);spyOn(J,"expand");J.onTriggerClick();expect(J.expand).not.toHaveBeenCalled()});it("should expand the bound list and fire the `expand` event if configured",function(){E(Ext.apply(N,{listConfig:{emptyText:"derp"},listeners:{expand:function(){O=true}}}));spyOn(J,"expand").andCallThrough();J.onTriggerClick();expect(O).toBe(true)})})});describe("keyboard input",function(){beforeEach(function(){E({renderTo:Ext.getBody(),queryMode:"local",valueField:"val",queryDelay:1})});it("should initiate a query after the queryDelay",function(){runs(function(){spyOn(J,"doQuery");J.inputEl.dom.value="foob";jasmine.fireKeyEvent(J.inputEl.dom,"keyup",66)});waitsFor(function(){return J.doQuery.callCount>0},"query not executed");runs(function(){expect(J.doQuery.mostRecentCall.args).toEqual(["foob",false,true])})});it("should not respond to special keys",function(){runs(function(){spyOn(J,"doQuery");J.inputEl.dom.value="foob";jasmine.fireKeyEvent(J.inputEl.dom,"keyup",Ext.event.Event.DOWN)});waits(10);runs(function(){expect(J.doQuery).not.toHaveBeenCalled()})});it("should respond to backspace",function(){runs(function(){spyOn(J,"doQuery");J.inputEl.dom.value="foob";jasmine.fireKeyEvent(J.inputEl.dom,"keyup",Ext.event.Event.BACKSPACE)});waitsFor(function(){return J.doQuery.callCount>0},"query not executed")});it("should respond to delete",function(){runs(function(){spyOn(J,"doQuery");J.inputEl.dom.value="foob";jasmine.fireKeyEvent(J.inputEl.dom,"keyup",Ext.event.Event.DELETE)});waitsFor(function(){return J.doQuery.callCount>0},"query not executed")});G("should select the value upon tab",function(){J.inputEl.dom.focus();jasmine.fireKeyEvent(J.inputEl,"keydown",Ext.event.Event.DOWN);var N=J.picker.getSelectionModel();expect(J.picker.isVisible()).toBe(true);expect(N.getSelection().length).toBe(0);J.inputEl.dom.focus();jasmine.fireKeyEvent(J.inputEl,"keydown",Ext.event.Event.TAB);waitsFor(function(){return J.picker.isVisible()===false});runs(function(){expect(N.getSelection()[0]===K.getAt(0)).toBe(true);expect(J.getRawValue()).toBe(N.getSelection()[0].get(J.displayField))})});describe("keyboard interaction",function(){var O,N;function Q(S,R){jasmine.asyncPressKey(J.inputEl,S,R)}function P(R){runs(function(){var S=J.picker.getNavigationModel(),U=S.getRecord(),T=U&&U.get("text");expect(T).toBe(R)})}beforeEach(function(){O=jasmine.createSpy("expand");N=jasmine.createSpy("collapse");J.on({expand:O,collapse:N})});afterEach(function(){O=N=null});beforeEach(function(){Q("down");waitForSpy(O,"expand",1000)});describe("expand/collapse",function(){it("should expand on down arrow",function(){expect(J.isExpanded).toBe(true)});it("should collapse on Esc",function(){Q("esc");waitForSpy(N,"collapse",1000);runs(function(){expect(J.isExpanded).toBe(false)})})});describe("arrow keys",function(){describe("down arrow",function(){describe("initial",function(){it("should select first item",function(){P("text 1")});it("should set aria-activedescendant to first item",function(){var R=J.picker.getNode(0);B("aria-activedescendant",R.id)})});describe("subsequent",function(){beforeEach(function(){Q("down");jasmine.waitAWhile()});it("should select 2nd item",function(){P("text 2")});it("should set aria-activedescendant to 2nd item",function(){var R=J.picker.getNode(1);B("aria-activedescendant",R.id)})})});describe("up arrow",function(){beforeEach(function(){Q("down");Q("down");Q("down");Q("up")});it("should select 3rd item",function(){P("text 3")});it("should set aria-activedescendant to 3rd item",function(){var R=J.picker.getNode(2);B("aria-activedescendant",R.id)})})})})});describe("keyboard input with multiSelect",function(){beforeEach(function(){E({renderTo:Ext.getBody(),queryMode:"local",valueField:"val",multiSelect:true})});it("should select the value upon tab with multiSelect",function(){var P,N,O="";jasmine.fireKeyEvent(J.inputEl,"keydown",Ext.event.Event.DOWN);expect(J.picker.isVisible()).toBe(true);P=J.picker.selModel;expect(P.getSelection().length).toBe(0);jasmine.fireKeyEvent(J.inputEl,"keydown",Ext.event.Event.ENTER);N=P.getSelection();expect(N.length).toBe(1);expect(N[0]===K.getAt(0)).toBe(true);jasmine.fireKeyEvent(J.inputEl,"keydown",Ext.event.Event.ENTER);jasmine.fireKeyEvent(J.inputEl,"keydown",Ext.event.Event.DOWN);jasmine.fireKeyEvent(J.inputEl,"keydown",Ext.event.Event.ENTER);jasmine.fireKeyEvent(J.inputEl,"keydown",Ext.event.Event.DOWN);jasmine.fireKeyEvent(J.inputEl,"keydown",Ext.event.Event.ENTER);N=P.getSelection();expect(N.length).toBe(2);expect(N[0]===K.getAt(1)).toBe(true);expect(N[1]===K.getAt(2)).toBe(true);jasmine.fireKeyEvent(J.inputEl,"keydown",Ext.event.Event.DOWN);jasmine.fireKeyEvent(J.inputEl,"keydown",Ext.event.Event.TAB);waitsFor(function(){return J.picker.isVisible()===false});runs(function(){N=P.getSelection();expect(N.length).toBe(3);expect(N[2]===K.getAt(3)).toBe(true);for(var R=0,Q=N.length;R<Q;R++){if(R>0){O+=", "}O+=N[R].get(J.displayField)}expect(J.getRawValue()).toEqual(O)})})});describe("forceSelection",function(){it("should not clear the raw value",function(){K.load();E({displayField:"text",valueField:"val",forceSelection:true,typeAhead:true,queryMode:"local",renderTo:Ext.getBody()});var N=spyOn(J,"onTypeAhead").andCallThrough();J.setRawValue("t");J.doRawQuery();waitsFor(function(){return N.callCount>0});runs(function(){expect(J.inputEl.dom.value).toBe("text 1")})});describe("setting value to a value not in the Store with forceSelection: false",function(){it("should set passed value",function(){E({renderTo:Ext.getBody(),forceSelection:false});J.setValue("NOT IN STORE");expect(J.getValue()).toBe("NOT IN STORE")});it("should not collapse the list if there are items in the store",function(){E({renderTo:Ext.getBody(),forceSelection:false,queryMode:"remote"});J.expand();J.setValue("asdf");expect(J.getPicker().isVisible()).toBe(true)})});describe("not multi",function(){describe("with no value",function(){beforeEach(function(){E({displayField:"text",valueField:"val",forceSelection:true,queryMode:"local",renderTo:Ext.getBody()})});it("should set the underlying value on blur",function(){jasmine.focusAndWait(J);runs(function(){C("text 2")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("text 2");expect(J.getValue()).toBe("value 2")})});it("should find the first matching text value",function(){jasmine.focusAndWait(J);runs(function(){C("Foo")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("Foo");expect(J.getValue()).toBe("foo1")})});it("should empty the value if nothing matches",function(){jasmine.focusAndWait(J);runs(function(){C("bar")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("");expect(J.getValue()).toBeNull()})})});describe("with a current value",function(){describe("via configuration",function(){function N(O){E({displayField:"text",valueField:"val",forceSelection:true,queryMode:"local",value:O,renderTo:Ext.getBody()})}it("should set the underlying value on blur",function(){N("value 31");jasmine.focusAndWait(J);runs(function(){C("text 2")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("text 2");expect(J.getValue()).toBe("value 2")})});it("should find the first matching text value",function(){N("value 31");jasmine.focusAndWait(J);runs(function(){C("Foo")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("Foo");expect(J.getValue()).toBe("foo1")})});it("should restore the previous value if nothing matches",function(){N("value 31");jasmine.focusAndWait(J);runs(function(){C("bar")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("text 31");expect(J.getValue()).toBe("value 31")})});it("should not overwrite a known value with a matching display value",function(){N("foo2");jasmine.focusAndWait(J);runs(function(){C("Foo")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("Foo");expect(J.getValue()).toBe("foo2")})});it("should restore the value if it has been cleared",function(){N("foo2");J.allowBlank=false;jasmine.focusAndWait(J);runs(function(){C("",true)});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("Foo");expect(J.getValue()).toBe("foo2")})});it("should not restore the value if it has been cleared and allowBlank true",function(){N("foo2");jasmine.focusAndWait(J);runs(function(){C("",true)});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("");expect(J.getValue()).toBe(null)})})});describe("value via selecting from the list",function(){beforeEach(function(){E({displayField:"text",valueField:"val",forceSelection:true,queryMode:"local",renderTo:Ext.getBody()})});it("should set the underlying value on blur",function(){I("value 31");jasmine.focusAndWait(J);runs(function(){C("text 2")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("text 2");expect(J.getValue()).toBe("value 2")})});it("should find the first matching text value",function(){I("value 31");jasmine.focusAndWait(J);runs(function(){C("Foo")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("Foo");expect(J.getValue()).toBe("foo1")})});it("should restore the previous value if nothing matches",function(){I("value 31");jasmine.focusAndWait(J);runs(function(){C("bar")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("text 31");expect(J.getValue()).toBe("value 31")})});it("should not overwrite a known value with a matching display value",function(){I("foo2");jasmine.focusAndWait(J);runs(function(){C("Foo")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("Foo");expect(J.getValue()).toBe("foo2")})});it("should restore the value if it has been cleared",function(){I("foo2");J.allowBlank=false;jasmine.focusAndWait(J);runs(function(){C("",true)});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("Foo");expect(J.getValue()).toBe("foo2")})});it("should not restore the value if it has been cleared and allowBlank is true",function(){I("foo2");jasmine.focusAndWait(J);runs(function(){C("",true)});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("");expect(J.getValue()).toBe(null)})})});describe("value via setValue",function(){beforeEach(function(){E({displayField:"text",valueField:"val",forceSelection:true,queryMode:"local",renderTo:Ext.getBody()})});it("should set the underlying value on blur",function(){J.setValue("value 31");jasmine.focusAndWait(J);runs(function(){C("text 2")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("text 2");expect(J.getValue()).toBe("value 2")})});it("should find the first matching text value",function(){J.setValue("value 31");jasmine.focusAndWait(J);runs(function(){C("Foo")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("Foo");expect(J.getValue()).toBe("foo1")})});it("should restore the previous value if nothing matches",function(){J.setValue("value 31");jasmine.focusAndWait(J);runs(function(){C("bar")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("text 31");expect(J.getValue()).toBe("value 31")})});it("should not overwrite a known value with a matching display value",function(){J.setValue(K.last());jasmine.focusAndWait(J);runs(function(){C("Foo")});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("Foo");expect(J.getValue()).toBe("foo2")})});it("should restore the value if it has been cleared",function(){J.setValue("value 31");J.allowBlank=false;jasmine.focusAndWait(J);runs(function(){C("",true)});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("text 31");expect(J.getValue()).toBe("value 31")})});it("should not restore the value if it has been cleared and allowBlank is true",function(){J.setValue("value 31");jasmine.focusAndWait(J);runs(function(){C("",true)});jasmine.blurAndWait(J);runs(function(){expect(J.getRawValue()).toBe("");expect(J.getValue()).toBe(null)})})});describe("clearing the value",function(){beforeEach(function(){E({displayField:"text",valueField:"val",forceSelection:true,queryMode:"local",renderTo:Ext.getBody()})});it("should not set the value after calling clearValue",function(){J.setValue("value 1");J.clearValue();jasmine.focusAndWait(J);jasmine.blurAndWait(J);runs(function(){expect(J.getValue()).toBeNull()})});it("should not set the value after calling setValue(null)",function(){J.setValue("value 1");J.setValue(null);jasmine.focusAndWait(J);jasmine.blurAndWait(J);runs(function(){expect(J.getValue()).toBeNull()})})})});describe("with remote loading",function(){beforeEach(function(){MockAjaxManager.addMethods()});afterEach(function(){MockAjaxManager.removeMethods()});(Ext.isGecko?xit:it)("should clear an unmatched value when the store loads",function(){K.destroy();K=new Ext.data.Store({model:A,proxy:{type:"ajax",url:"foo"}});E({store:K,displayField:"text",valueField:"val",forceSelection:true,queryMode:"remote",renderTo:Ext.getBody()});J.focus();waitsFor(function(){return J.hasFocus},"Never focused");runs(function(){J.setRawValue("foobar");J.doRawQuery();J.collapse();J.blur()});waitsFor(function(){return !J.hasFocus},"Never blurred");runs(function(){Ext.Ajax.mockComplete({status:200,responseText:"[]"});expect(J.getValue()).toBeNull()})})})});describe("with remote loading",function(){beforeEach(function(){MockAjaxManager.addMethods()});afterEach(function(){MockAjaxManager.removeMethods()});G("should clear an unmatched value when the store loads, second version!",function(){K.destroy();K=new Ext.data.Store({model:A,proxy:{type:"ajax",url:"foo"}});E({store:K,displayField:"text",valueField:"val",forceSelection:true,queryMode:"remote",renderTo:Ext.getBody()});J.focus();waitsFor(function(){return J.hasFocus},"Waiting for field focus");runs(function(){J.setRawValue("foobar");J.doRawQuery();J.collapse();J.blur()});waitsFor(function(){return !J.hasFocus},"Waiting for field blur");runs(function(){Ext.Ajax.mockComplete({status:200,responseText:"[]"});expect(J.getValue()).toBeNull()})})})});describe("Always refilter if dropdown is visible, regardless of minChars threshold",function(){var N;beforeEach(function(){N=Ext.create("Ext.form.field.ComboBox",{renderTo:Ext.getBody(),store:["first-1","first-2","first-3","first-4","first-5","does not match query"],queryMode:"local",allowBlank:false,forceSelection:true,minChars:7,beforeQuery:function(){var O=Ext.form.field.ComboBox.prototype.beforeQuery.apply(this,arguments);if(this.picker&&this.picker.isVisible){O.cancel=false}return O}})});afterEach(function(){N.destroy()});it("should refilter when querystring length < minChars if dropdown is visible",function(){N.doQuery("first-1");expect(N.store.getCount()).toEqual(1);N.doQuery("first");expect(N.store.getCount()).toEqual(5)})});describe('Using the "anyMatch" filter config',function(){var N;beforeEach(function(){N=Ext.create("Ext.form.field.ComboBox",{renderTo:Ext.getBody(),store:["first-1","first-2","first-3","first-4","first-5","does not match query"],queryMode:"local",allowBlank:false,forceSelection:true,minChars:2,anyMatch:true})});afterEach(function(){N.destroy()});it("should show all values which contain the query string",function(){N.doQuery("rs");expect(N.store.getCount()).toEqual(5)})});describe('Using the "caseSensitive" filter config',function(){var N;beforeEach(function(){N=Ext.create("Ext.form.field.ComboBox",{renderTo:Ext.getBody(),store:["first-1","first-2","first-3","first-4","first-5","does not match query"],queryMode:"local",allowBlank:false,forceSelection:true,minChars:2,caseSensitive:true})});afterEach(function(){N.destroy()});it("should fail to match because caseSensitive is set",function(){N.doQuery("FIRST");expect(N.store.getCount()).toEqual(0)})});describe("clearValue",function(){function N(P){var O={displayField:"text",valueField:"val",renderTo:Ext.getBody()};if(P){O.value=P}E(O)}describe("with no value",function(){it("should have an empty value",function(){N();J.clearValue();expect(J.getRawValue()).toBe("");expect(J.getValue()).toBeNull()})});describe("with a current value",function(){describe("via configuration",function(){it("should have an empty value",function(){N("value 31");J.clearValue();expect(J.getRawValue()).toBe("");expect(J.getValue()).toBeNull()})});describe("value via selecting from the list",function(){it("should have an empty value",function(){N();I("value 31");J.clearValue();expect(J.getRawValue()).toBe("");expect(J.getValue()).toBeNull()})});describe("value via setValue",function(){it("should have an empty value",function(){N();J.setValue("value 31");J.clearValue();expect(J.getRawValue()).toBe("");expect(J.getValue()).toBeNull()})})})});describe("reset",function(){describe("with no configured value",function(){beforeEach(function(){E({displayField:"text",valueField:"val",renderTo:Ext.getBody()})});it("should restore the original value",function(){J.reset();expect(J.getRawValue()).toBe("");expect(J.getValue()).toBeNull()});it("should restore the original value after selecting a list item",function(){I("value 1");J.reset();expect(J.getRawValue()).toBe("");expect(J.getValue()).toBeNull()});it("should restore the original value after setting the value with setValue",function(){J.setValue("value 1");J.reset();expect(J.getRawValue()).toBe("");expect(J.getValue()).toBeNull()})});describe("with a configured value",function(){beforeEach(function(){E({displayField:"text",valueField:"val",value:"value 31",renderTo:Ext.getBody()})});it("should restore the original value",function(){J.reset();expect(J.getRawValue()).toBe("text 31");expect(J.getValue()).toBe("value 31")});it("should restore the original value after selecting a list item",function(){I("value 1");J.reset();expect(J.getRawValue()).toBe("text 31");expect(J.getValue()).toBe("value 31")});it("should restore the original value after setting the value with setValue",function(){J.setValue("value 1");J.reset();expect(J.getRawValue()).toBe("text 31");expect(J.getValue()).toBe("value 31")})})});describe("transform",function(){var P="ABC".split(""),O;function N(R,Q,T){O=document.createElement("select");var S=1;for(S=1;S<=P.length;++S){O.options[S-1]=new Option(P[S-1],S)}O.id="mySelect";if(Q){O.name=Q}if(T){O.value=T}if(R){Ext.getBody().appendChild(O)}}describe("transform option",function(){it("should accept a string id and remove the select",function(){N(true);J=new Ext.form.field.ComboBox({transform:"mySelect"});expect(Ext.getDom("mySelect")==null).toBe(true);expect(J.rendered).toBe(true)});it("should accept a DOM element and remove the select",function(){N(true);J=new Ext.form.field.ComboBox({transform:O});expect(Ext.getDom("mySelect")==null).toBe(true);expect(J.rendered).toBe(true)});it("should accept an Ext.dom.Element and remove the select",function(){N(true);J=new Ext.form.field.ComboBox({transform:Ext.get(O)});expect(Ext.getDom("mySelect")==null).toBe(true);expect(J.rendered).toBe(true)})});describe("name",function(){it("should use the combo name over a name on the select",function(){N(true,"selName");J=new Ext.form.field.ComboBox({transform:O,name:"comboName"});expect(J.getName()).toBe("comboName")});it("should use the select name if no name is specified on the combo",function(){N(true,"selName");J=new Ext.form.field.ComboBox({transform:O});expect(J.getName()).toBe("selName")})});describe("value",function(){it("should use the combo value over the value on the select",function(){N(true,undefined,"2");J=new Ext.form.field.ComboBox({transform:O,value:"3"});expect(J.getValue()).toBe("3")});it("should use the select value if no value is specified on the combo",function(){N(true,undefined,"2");J=new Ext.form.field.ComboBox({transform:O});expect(J.getValue()).toBe("2")})});it("should use the options in the select field",function(){N(true);J=new Ext.form.field.ComboBox({transform:"mySelect"});var Q=J.getStore();expect(Q.getAt(0).get("field1")).toBe("1");expect(Q.getAt(0).get("field2")).toBe("A");expect(Q.getAt(1).get("field1")).toBe("2");expect(Q.getAt(1).get("field2")).toBe("B");expect(Q.getAt(2).get("field1")).toBe("3");expect(Q.getAt(2).get("field2")).toBe("C")});describe("rendering",function(){it("should render in place",function(){var Q=Ext.getBody().appendChild({tag:"div",id:"myRoot"});N(false);Q.appendChild(O);J=new Ext.form.field.ComboBox({transform:"mySelect"});expect(J.el.dom.parentNode.id).toBe("myRoot");J.destroy();Q.remove()});it("should render using renderTo with transformInPlace: false",function(){N(true);var Q=Ext.getBody().appendChild({tag:"div",id:"myRoot"});J=new Ext.form.field.ComboBox({transform:"mySelect",transformInPlace:false,renderTo:Q});expect(J.el.dom.parentNode.id).toBe("myRoot");J.destroy();Q.remove()});it("should render as part of a layout with transformInPlace: false",function(){N(true);var R=new Ext.form.Panel({renderTo:Ext.getBody(),items:{itemId:"combo",xtype:"combobox",transform:"mySelect",transformInPlace:false}}),Q=R.down("#combo");expect(Q.ownerCt).toBe(R);R.destroy()})})});(Ext.isWebkit?describe:xdescribe)("clearFilterOnBlur",function(){it("should clear a filter applied on blur with clearFilterOnBlur: true",function(){E({queryMode:"local",renderTo:Ext.getBody()});var N=K.getCount();J.setRawValue("text 3");J.expand();J.doRawQuery();expect(K.getCount()).toBe(5);J.blur();expect(K.getCount()).toBe(N)});it("should clear a only the combo filter applied on blur with clearFilterOnBlur: true",function(){E({queryMode:"local",renderTo:Ext.getBody()});K.filter({property:"text",value:"text"});var N=K.getCount();J.setRawValue("text 3");J.expand();J.doRawQuery();expect(K.getCount()).toBe(5);J.blur();expect(K.getCount()).toBe(N)});it("should requery the store on focus with clearFilterOnBlur: true",function(){E({queryMode:"local",renderTo:Ext.getBody()});var N=K.getCount();J.setRawValue("text 3");J.expand();J.doRawQuery();expect(K.getCount()).toBe(5);J.blur();expect(K.getCount()).toBe(N);J.focus();expect(K.getCount()).toBe(5)});it("should not modify the filter with clearFilterOnBlur: false",function(){E({queryMode:"local",renderTo:Ext.getBody(),clearFilterOnBlur:false});J.setRawValue("text 3");J.expand();J.doRawQuery();expect(K.getCount()).toBe(5);J.blur();expect(K.getCount()).toBe(5)})});describe("displayTpl",function(){describe("should create default",function(){beforeEach(function(){E()});it("displayTpl should be an XTemplate",function(){expect(J.displayTpl.isTemplate).toBe(true)});it("displayTpl html match",function(){expect(J.displayTpl.html).toBe('<tpl for=".">{[typeof values === "string" ? values : values["text"]]}<tpl if="xindex < xcount">, </tpl></tpl>')})});describe("should create from string",function(){beforeEach(function(){E({displayTpl:'<tpl for=".">{[typeof values === "string" ? values : values["foo"]]}</tpl>'})});it("displayTpl should be an XTemplate",function(){expect(J.displayTpl.isTemplate).toBe(true)});it("displayTpl html match",function(){expect(J.displayTpl.html).toBe('<tpl for=".">{[typeof values === "string" ? values : values["foo"]]}</tpl>')})});describe("should create from array of strings",function(){beforeEach(function(){E({displayTpl:['<tpl for=".">','{[typeof values === "string" ? values : values["foo"]]}',"</tpl>"]})});it("displayTpl should be an XTemplate",function(){expect(J.displayTpl.isTemplate).toBe(true)});it("displayTpl html match",function(){expect(J.displayTpl.html).toBe('<tpl for=".">{[typeof values === "string" ? values : values["foo"]]}</tpl>')})})});describe("events",function(){var N;beforeEach(function(){N=jasmine.createSpy()});afterEach(function(){N=null});function O(P){E(Ext.apply({renderTo:Ext.getBody(),valueField:"val",displayField:"text"},P))}describe("change",function(){function P(S,Q){var R=N.mostRecentCall.args;expect(R[0]).toBe(J);expect(R[1]).toBe(S);expect(R[2]).toBe(Q)}describe("via setValue",function(){it("should not fire when configured with a value",function(){O({value:"value 2",listeners:{change:N}});expect(N).not.toHaveBeenCalled()});it("should fire once when setting an initial value",function(){O();J.on("change",N);J.setValue("value 1");expect(N.callCount).toBe(1);P("value 1",null)});it("should fire once when modifying an existing value",function(){O();J.setValue("value 2");J.on("change",N);J.setValue("value 1");expect(N.callCount).toBe(1);P("value 1","value 2")});it("should fire once when nulling the value",function(){O();J.setValue("value 2");J.on("change",N);J.setValue(null);expect(N.callCount).toBe(1);P(null,"value 2")})});describe("via user interaction",function(){it("should fire once when selecting an initial value",function(){O();J.on("change",N);I("value 1");expect(N.callCount).toBe(1);P("value 1",null)});it("should fire once when modifying an existing value",function(){O();J.setValue("value 2");J.on("change",N);I("value 1");expect(N.callCount).toBe(1);P("value 1","value 2")})})});describe("select",function(){describe("via setValue",function(){it("should not fire when configured with a value",function(){O({value:"value 2",listeners:{select:N}});expect(N).not.toHaveBeenCalled()});it("should not fire when setting an initial value",function(){O();J.on("select",N);J.setValue("value 1");expect(N).not.toHaveBeenCalled()});it("should not fire when modifying an existing value",function(){O();J.setValue("value 2");J.on("select",N);J.setValue("value 1");expect(N).not.toHaveBeenCalled()})});describe("via user interaction",function(){it("should fire once when setting an initial value",function(){O();J.on("select",N);I("value 1");expect(N.callCount).toBe(1);expect(N.mostRecentCall.args[0]).toBe(J);expect(N.mostRecentCall.args[1]).toBe(K.getAt(0))});it("should fire once when modifying an existing value",function(){O();J.setValue("value 2");J.on("select",N);I("value 1");expect(N.mostRecentCall.args[0]).toBe(J);expect(N.mostRecentCall.args[1]).toBe(K.getAt(0))})});describe("records param",function(){function P(Q){return K.getAt(Q)}it("should be a single record with multiSelect: false",function(){O({multiSelect:false});J.on("select",N);I("value 1");I("value 2");I("value 3");expect(N.calls[0].args[1]).toBe(P(0));expect(N.calls[1].args[1]).toBe(P(1));expect(N.calls[2].args[1]).toBe(P(2))});it("should be an array of records with multiSelect: true",function(){O({multiSelect:true});J.on("select",N);I("value 1");I("value 2");I("value 3");expect(N.calls[0].args[1]).toEqual([P(0)]);expect(N.calls[1].args[1]).toEqual([P(0),P(1)]);expect(N.calls[2].args[1]).toEqual([P(0),P(1),P(2)])});it("should not deselect selections on container events",function(){var Q,R;O({multiSelect:true});I("value 1");I("value 2");Q=J.picker;R=Q.selModel;expect(R.getSelected().length).toBe(2);jasmine.fireMouseEvent(Q.el.dom,"click");expect(R.getSelected().length).toBe(2)})})})});describe("binding",function(){var O,P;beforeEach(function(){P=jasmine.createSpy();O=new Ext.app.ViewModel()});afterEach(function(){P=O=null});function N(Q){E(Ext.apply({displayField:"text",valueField:"val",viewModel:O,renderTo:Ext.getBody()},Q))}describe("view model selection",function(){function Q(T){var S=K.findExact("val",T);return K.getAt(S)}function R(S){J.expand();J.getPicker().getSelectionModel().select(S);O.notify();J.collapse()}describe("reference",function(){describe("no initial value",function(){beforeEach(function(){O.bind("{userList.selection}",P);N({reference:"userList"});O.notify()});it("should publish null by default",function(){var S=P.mostRecentCall.args;expect(S[0]).toBeNull();expect(S[1]).toBeUndefined()});it("should publish the value when selected",function(){var T=Q("value 1");R(T);var S=P.mostRecentCall.args;expect(S[0]).toBe(T);expect(S[1]).toBeNull();expect(J.getValue()).toBe("value 1")});it("should publish when the selection is changed",function(){var U=Q("value 1"),T=Q("value 2");R(U);P.reset();R(T);var S=P.mostRecentCall.args;expect(S[0]).toBe(T);expect(S[1]).toBe(U);expect(J.getValue()).toBe("value 2")});it("should publish the record when setting the value",function(){J.setValue("value 1");O.notify();var S=P.mostRecentCall.args;expect(S[0]).toBe(Q("value 1"));expect(S[1]).toBeNull()});it("should publish the record when the value is changed",function(){J.setValue("value 1");O.notify();P.reset();J.setValue("value 2");O.notify();var S=P.mostRecentCall.args;expect(S[0]).toBe(Q("value 2"));expect(S[1]).toBe(Q("value 1"))});it("should publish the record when the value is cleared",function(){J.setValue("value 1");O.notify();P.reset();J.setValue(null);O.notify();var S=P.mostRecentCall.args;expect(S[0]).toBeNull();expect(S[1]).toBe(Q("value 1"))})});describe("with initial value",function(){beforeEach(function(){O.bind("{userList.selection}",P);N({reference:"userList",value:"value 2"});O.notify()});it("should publish the record",function(){var S=P.mostRecentCall.args;expect(S[0]).toBe(Q("value 2"));expect(S[1]).toBeUndefined()})})});describe("two way binding",function(){describe("no initial value",function(){beforeEach(function(){O.bind("{foo}",P);N({bind:{selection:"{foo}"}});O.notify()});describe("changing the selection",function(){it("should trigger the binding when adding a selection",function(){var T=Q("value 1");R(T);var S=P.mostRecentCall.args;expect(S[0]).toBe(T);expect(S[1]).toBeUndefined()});it("should trigger the binding when changing the selection",function(){var U=Q("value 1"),T=Q("value 2");R(U);P.reset();R(T);var S=P.mostRecentCall.args;expect(S[0]).toBe(T);expect(S[1]).toBe(U)});it("should trigger the binding when setting the value",function(){J.setValue("value 1");O.notify();var S=P.mostRecentCall.args;expect(S[0]).toBe(Q("value 1"));expect(S[1]).toBeUndefined()});it("should trigger the binding when the value is changed",function(){J.setValue("value 1");O.notify();P.reset();J.setValue("value 2");O.notify();var S=P.mostRecentCall.args;expect(S[0]).toBe(Q("value 2"));expect(S[1]).toBe(Q("value 1"))});it("should trigger the binding when the value is cleared",function(){J.setValue("value 1");O.notify();P.reset();J.setValue(null);O.notify();var S=P.mostRecentCall.args;expect(S[0]).toBeNull();expect(S[1]).toBe(Q("value 1"))})});describe("changing the view model value",function(){it("should set the value when setting the record",function(){var S=Q("value 1");O.set("foo",S);O.notify();expect(J.getValue()).toBe("value 1")});it("should set the value when updating the record",function(){O.set("foo",Q("value 1"));O.notify();O.set("foo",Q("value 2"));O.notify();expect(J.getValue()).toBe("value 2")});it("should deselect when clearing the value",function(){O.set("foo",Q("value 1"));O.notify();O.set("foo",null);O.notify();expect(J.getValue()).toBeNull()})})});xdescribe("with initial value",function(){it("should trigger the binding with an initial value in the combo",function(){O.bind("{foo}",P);N({value:"value 2",bind:{selection:"{foo}"}});O.notify();var S=P.mostRecentCall.args;expect(S[0]).toBe(Q("value 2"));expect(S[1]).toBeUndefined()})});describe("reloading the store",function(){beforeEach(function(){MockAjaxManager.addMethods();O.bind("{foo}",P);N({bind:{selection:"{foo}"}});O.notify();R(Q("value 1"));P.reset();K.setProxy({type:"ajax",url:"fake"});K.load()});afterEach(function(){MockAjaxManager.removeMethods()});describe("when the selected record is in the result set",function(){it("should trigger the selection binding",function(){Ext.Ajax.mockComplete({status:200,responseText:Ext.encode([{id:1,text:"text 1",val:"value 1"},{id:2,text:"text 2",val:"value 2"}])});O.notify();expect(P.callCount).toBe(1);expect(P.mostRecentCall.args[0]).toBe(K.getAt(0))})});describe("when the selected record is not in the result set",function(){it("should trigger the selection binding",function(){Ext.Ajax.mockComplete({status:200,responseText:"[]"});O.notify();expect(P.callCount).toBe(1);expect(P.mostRecentCall.args[0]).toBeNull()})})})})})});describe("bindStore",function(){var O,N;beforeEach(function(){O=[{text:"text 1",val:1},{text:"text 2",val:2},{text:"text 3",val:3},{text:"text 4",val:4},{text:"text 5",val:5}]});afterEach(function(){N=Ext.destroy(N)});it("should apply a filter when binding a new store",function(){E({queryMode:"local",renderTo:Ext.getBody()});J.doQuery("text 3");N=new Ext.data.Store({model:A,data:O});J.bindStore(N);expect(N.getCount()).toBe(1)});it("should be able to filter the store after binding a new one",function(){E({queryMode:"local",renderTo:Ext.getBody()});J.doQuery("text 3");N=new Ext.data.Store({model:A,data:O});J.bindStore(N);J.doQuery("text 2");expect(N.getCount()).toBe(1)});it("should not apply active filters if the param is passed",function(){E({queryMode:"local",renderTo:Ext.getBody()});J.doQuery("text 3");N=new Ext.data.Store({model:A,data:O});J.bindStore(N,true);expect(N.getCount()).toBe(5)});it("should be able to select after binding a new store",function(){E({renderTo:Ext.getBody(),queryMode:"local",displayField:"text",valueField:"val"});N=new Ext.data.Store({model:A,data:O});J.bindStore(N);J.expand();I("2",N);expect(J.getValue()).toBe("2")});it("should be able to select after binding a store when one wasn't configured",function(){E({renderTo:Ext.getBody(),queryMode:"local",displayField:"text",valueField:"val"},true);N=new Ext.data.Store({model:A,data:O});J.bindStore(N);J.expand();I("2",N);expect(J.getValue()).toBe("2")})});describe("setting value with different store states",function(){describe("with a store not bound",function(){it("should not display the raw value and resolve when the store is bound",function(){E({renderTo:Ext.getBody(),queryMode:"local",displayField:"text",valueField:"val"},true);J.setValue("value 3");expect(J.getValue()).toBe("value 3");expect(J.getRawValue()).toBe("");J.bindStore(K);expect(J.getValue()).toBe("value 3");expect(J.getRawValue()).toBe("text 3")})});describe("with a store not bound",function(){it("should not display the raw value and resolve when the store is bound",function(){E({renderTo:Ext.getBody(),queryMode:"local",displayField:"text",valueField:"val"},true);J.setValue("value 3");expect(J.getValue()).toBe("value 3");expect(J.getRawValue()).toBe("");J.bindStore(K);expect(J.getValue()).toBe("value 3");expect(J.getRawValue()).toBe("text 3")})});describe("with a store populated via adding records",function(){it("should resolve the display value",function(){K.destroy();K=new Ext.data.Store({model:A});K.add([{text:"text 1",val:"value 1"},{text:"text 2",val:"value 2"},{text:"text 3",val:"value 3"}]);E({renderTo:Ext.getBody(),queryMode:"local",displayField:"text",valueField:"val"});J.setValue("value 2");expect(J.getValue()).toBe("value 2");expect(J.getRawValue()).toBe("text 2")})});describe("setting a value with a remote store",function(){var R,N,Q;function O(S){N=new Ext.data.Store(Ext.apply({model:Q,proxy:{type:"ajax",url:"/fake"}},S))}function P(S){Ext.Ajax.mockComplete({status:200,responseText:Ext.JSON.encode(S||R)})}beforeEach(function(){MockAjaxManager.addMethods();Q=Ext.define(null,{extend:"Ext.data.Model",fields:["id","name"]});R=[{id:1,name:"Foo"},{id:2,name:"Bar"},{id:3,name:"Baz"}]});afterEach(function(){Ext.destroy(N);MockAjaxManager.removeMethods();Q=null});describe("while the store is loading",function(){function S(U,T){E(Ext.apply({displayField:"name",valueField:U?"name":"id",store:N,renderTo:Ext.getBody()},T))}beforeEach(function(){O()});it("should not trigger a second load",function(){S();N.load();spyOn(N,"load");J.setValue(1);expect(N.load).not.toHaveBeenCalled()});it("should not trigger a second load with autoLoadOnValue",function(){S({autoLoadOnValue:true});N.load();spyOn(N,"load");J.setValue(1);expect(N.load).not.toHaveBeenCalled()});describe("display value",function(){it("should not put the id as the display value while loading",function(){S();N.load();J.setValue(1);expect(J.getRawValue()).toBe("")});it("should use the model raw value as the display value while loading if a model is passed",function(){S();N.load();J.setValue(new Q({id:1,name:"Foo"}));expect(J.getRawValue()).toBe("Foo");expect(J.getValue()).toBe(1)});it("should update the display value when the store loads",function(){S();N.load();J.setValue(1);P();expect(J.getRawValue()).toBe("Foo")});it("should leave the value when displayField === valueField",function(){S(true);N.load();J.setValue("foo");expect(J.getRawValue()).toBe("foo")})})});describe("while having a pending auto load",function(){var S;beforeEach(function(){M=false;var T=Ext.asap;S=spyOn(Ext.data.Store.prototype,"flushLoad").andCallThrough();Ext.asap=function(V,U){return Ext.defer(V,100,U)};O({autoLoad:true});E({displayField:"name",valueField:"id",store:N,renderTo:Ext.getBody()});Ext.asap=T});afterEach(function(){M=true;Ext.data.Store.prototype.flushLoad=L});it("should not trigger a load",function(){spyOn(N,"load");J.setValue(1);expect(N.load).not.toHaveBeenCalled()});it("should not trigger a load with autoLoadOnValue",function(){J.autoLoadOnValue=true;spyOn(N,"load");J.setValue(1);expect(N.load).not.toHaveBeenCalled()});it("should not put the id as the raw value while loading",function(){spyOn(N,"load");J.setValue(1);expect(J.getRawValue()).toBe("")});it("should update the display value when the store loads",function(){J.setValue(1);waitsFor(function(){return S.callCount>0});runs(function(){P();expect(J.getRawValue()).toBe("Foo")})})});describe("not loading & without autoLoad",function(){beforeEach(function(){O();E({autoLoadOnValue:true,displayField:"name",valueField:"id",store:N,renderTo:Ext.getBody()})});it("should not trigger a load with autoLoadOnValue: false",function(){J.autoLoadOnValue=false;spyOn(N,"load");J.setValue(1);expect(N.load).not.toHaveBeenCalled()});it("should not trigger a load if the value is undefined",function(){spyOn(N,"load");J.setValue(undefined);expect(N.load).not.toHaveBeenCalled()});it("should not trigger a load if the value is null",function(){spyOn(N,"load");J.setValue(null);expect(N.load).not.toHaveBeenCalled()});it("should trigger a load",function(){spyOn(N,"load");J.setValue(1);expect(N.load).toHaveBeenCalled()});it("should not put the id as the raw value while loading",function(){J.setValue(1);expect(J.getRawValue()).toBe("")});it("should update the display value when the store loads",function(){J.setValue(1);P();expect(J.getRawValue()).toBe("Foo")});it("should not update the display value when the store loads if the value is already set",function(){J.setValue(new Q({id:4,name:"Not in payload"}));var S=spyOn(J,"setValue").andCallThrough();P();expect(S).not.toHaveBeenCalled();expect(J.getRawValue()).toBe("Not in payload")});it("should not update the display value when the store loads if the value is already set, and selected value should be the newly matched record",function(){var S=new Q({id:3,name:"Baz"});J.setValue(S);var T=spyOn(J,"setValue").andCallThrough();P();expect(T).not.toHaveBeenCalled();expect(J.getRawValue()).toBe("Baz");expect(J.getSelectedRecord()===S).toBe(false)})});describe("while not having a store bound",function(){beforeEach(function(){O();E({displayField:"name",valueField:"id",renderTo:Ext.getBody()},true)});it("should not put the id as the raw value when nothing is bound",function(){J.setValue(1);expect(J.getRawValue()).toBe("")});it("should update the display value when a loaded store is bound",function(){N.load();P();J.setValue(1);J.bindStore(N);expect(J.getRawValue()).toBe("Foo")});it("should update the display value when a loading store is bound",function(){N.load();J.setValue(1);J.bindStore(N);P();expect(J.getRawValue()).toBe("Foo")});describe("with unloaded store",function(){it("should not trigger a load with autoLoadOnValue: false",function(){J.autoLoadOnValue=false;J.setValue(1);spyOn(N,"load");J.bindStore(N);expect(N.load).not.toHaveBeenCalled()});it("should not trigger a load with autoLoadOnValue: true",function(){J.autoLoadOnValue=true;J.setValue(1);spyOn(N,"load");J.bindStore(N);expect(N.load).toHaveBeenCalled()})})});describe("chained stores",function(){var S;it("should not update the display value if the source is loading",function(){O();S=new Ext.data.ChainedStore({source:N});N.load();E({displayField:"name",valueField:"id",renderTo:Ext.getBody(),store:S,value:2});expect(J.getRawValue()).toBe("");P();S.destroy()});it("should not update the display value if the source has a pending autoLoad",function(){O({autoLoad:true});S=new Ext.data.ChainedStore({source:N});E({displayField:"name",valueField:"id",renderTo:Ext.getBody(),store:S,value:2});expect(J.getRawValue()).toBe("");S.destroy()});it("should update the display value when the source store loads",function(){O();S=new Ext.data.ChainedStore({source:N});N.load();E({displayField:"name",valueField:"id",renderTo:Ext.getBody(),store:S,value:2});P();expect(J.getRawValue()).toBe("Bar");S.destroy()})})})});describe("store modifications",function(){describe("remove",function(){describe("with forceSelection: true",function(){it("should not change the value if the removed record is not selected",function(){E({renderTo:Ext.getBody(),forceSelection:true,displayField:"text",valueField:"val",value:"value 3"});K.removeAt(0);expect(J.getValue()).toBe("value 3")});it("should clear the value when removing the selected record",function(){E({renderTo:Ext.getBody(),forceSelection:true,displayField:"text",valueField:"val",value:"value 3"});K.removeAt(2);expect(J.getRawValue()).toBe("");expect(J.getValue()).toBeNull()})});describe("with forceSelection: false",function(){it("should not clear the value when removing the selected record",function(){E({renderTo:Ext.getBody(),forceSelection:false,displayField:"text",valueField:"val",value:"value 3"});K.removeAt(2);expect(J.getValue()).toBe("value 3")})})});describe("update",function(){it("should update the raw value when the selected record text is changed",function(){E({renderTo:Ext.getBody(),forceSelection:true,displayField:"text",valueField:"val",value:"value 3"});K.getAt(2).set("text","Foo!");expect(J.getRawValue()).toBe("Foo!");expect(J.getValue()).toBe("value 3")})});describe("filtering",function(){it("should clear the selected value when the record is filtered out",function(){E({renderTo:Ext.getBody(),forceSelection:true,displayField:"text",valueField:"val",value:"value 3"});K.getFilters().add(function(N){return N.get("val")!=="value 3"});expect(J.getRawValue()).toBe("");expect(J.getValue()).toBeNull()})})});describe("chained stores",function(){it("should allow a non-record value to be used with forceSelection: false",function(){var N=new Ext.data.ChainedStore({source:K});E({store:N,displayField:"text",valueField:"val",forceSelection:false});J.setValue("Foo");expect(J.getValue()).toBe("Foo")})});describe("alternate components as the picker",function(){var P,N,O;describe("grid as picker",function(){beforeEach(function(){P=new Ext.form.field.ComboBox({createPicker:function(){N=new Ext.grid.Panel({id:"foo",columns:[{dataIndex:"company",text:"Company"},{dataIndex:"price",text:"Price"}],store:new Ext.data.ArrayStore({storeId:"baz",fields:[{name:"company"},{name:"price",type:"float"}],data:[["3m Co",71.72],["Alcoa Inc",29.01],["Boeing Co.",75.43]]}),width:250,draggable:true,simpleDrag:true,floating:true});return N},renderTo:Ext.getBody()});P.expand()});afterEach(function(){Ext.destroy(P);P=N=O=null});it("should have an ownerCmp reference to the combo",function(){expect(N.ownerCmp===P).toBe(true)});it("should be able to be looked up by CQ",function(){expect(P.owns(N.el)).toBe(true)});it("should be able to use the ghost panel in the CQ hierarchy when dragging",function(){O=P.getPicker().header.el.dom;jasmine.fireMouseEvent(O,"mousedown");jasmine.fireMouseEvent(O,"mousemove",0,1000);O=Ext.getCmp("foo-ghost").el.dom;expect(P.owns(Ext.fly(O))).toBe(true)});it("should inject a getRefOwner API that returns a reference to the combo",function(){O=P.getPicker().header.el.dom;jasmine.fireMouseEvent(O,"mousedown");jasmine.fireMouseEvent(O,"mousemove",0,1000);expect(Ext.getCmp("foo-ghost").getRefOwner()).toBe(P)});it("should share the same reference between the picker and the ghost panel",function(){O=P.getPicker().header.el.dom;jasmine.fireMouseEvent(O,"mousedown");jasmine.fireMouseEvent(O,"mousemove",0,1000);expect(Ext.getCmp("foo-ghost").getRefOwner()).toBe(N.ownerCmp)})})});describe("EXTJS-15045",function(){function N(O){Ext.Ajax.mockComplete({status:200,responseText:Ext.JSON.encode(O)})}beforeEach(function(){MockAjaxManager.addMethods()});afterEach(function(){MockAjaxManager.removeMethods()});it("should allow mouse selection",function(){K=new Ext.data.Store({proxy:{type:"ajax",url:"fakeUrl"},model:A});E({renderTo:Ext.getBody(),minChars:0,valueField:"val",queryDelay:1});jasmine.focusAndWait(J);C("t",false);N([{text:"text 10",val:"value 10"},{text:"text 11",val:"value 11"},{text:"text 12",val:"value 12"},{text:"text 31",val:"value 31"},{text:"text 32",val:"value 32"},{text:"text 33",val:"value 33"},{text:"text 34",val:"value 34"}]);expect(J.getPicker().getNodes().length).toBe(7);C("text 1",false);N([{text:"text 10",val:"value 10"},{text:"text 11",val:"value 11"},{text:"text 12",val:"value 12"}]);expect(J.getPicker().getNodes().length).toBe(3);I("value 10");expect(J.getPicker().isVisible()).toBe(false);expect(J.getValue()).toBe("value 10")})});describe("getRecordDisplayData",function(){it("should call getRecordDisplayData to display the data",function(){E({renderTo:Ext.getBody(),displayField:"text",valueField:"val",getRecordDisplayData:function(N){var O=Ext.apply({},N.data);O.text+="foo";return O}});J.setValue("value 2");expect(J.getRawValue()).toBe("text 2foo");expect(K.getAt(1).get("text")).toBe("text 2")})});describe("readOnly",function(){describe("should not react to mutation events",function(){function N(P,Q,O){it(P,function(){E(Ext.apply({readOnly:true,renderTo:Ext.getBody()},O));spyOn(J,Q);jasmine.fireKeyEvent(J.inputEl.dom,"keyup",65);waits(10);runs(function(){expect(J[Q].callCount).toBe(0)})})}N("should not call checkChange","checkChange",{checkChangeBuffer:0});N("should not query","doQuery",{queryDelay:0,queryMode:"local",value:"Permanent Waves"});N("should not expand the picker","expand",{listConfig:{emptyText:"Exit... Stage Left"},queryDelay:0,queryMode:"local",value:"Moving Pictures"})})});describe("checkValueOnChange triggered before store is loaded",function(){it("should NOT clear the combobox value if setValueOnChange is triggered before the store is loaded",function(){var Q=Ext.define(null,{extend:"Ext.data.Model",fields:["name"]}),N=new Ext.panel.Panel({title:"Combo test",renderTo:document.body,frame:true,height:400,width:600,items:[{xtype:"combobox",fieldLabel:"Chosen color",queryMode:"local",forceSelection:true,store:{autoLoad:false,model:Q,proxy:{type:"memory",data:[{id:"0xff0000",name:"Red"},{id:"0x00ff00",name:"Green"},{id:"0x0000ff",name:"Blue"}]}},displayField:"name",valueField:"name",value:"Red"}]}),P=N.child("combobox"),O=P.getStore();expect(P.getValue()).toBe("Red");O.addFilter({property:"name",value:"Blue"});expect(P.getValue()).toBe("Red");O.load();expect(P.getValue()).toBe(null);N.destroy()})});describe("complex binding",function(){var P=Ext.define(null,{extend:"Ext.data.Model",fields:["name"]}),O,N;beforeEach(function(){O=[{id:"0xff0000",name:"Red"},{id:"0x00ff00",name:"Green"},{id:"0x0000ff",name:"Blue"}]});afterEach(function(){N.destroy();N=O=null});it("should publish a selection when store provided by a bind is NOT autoloaded, value is configured and displayField === valueField",function(){N=new Ext.panel.Panel({renderTo:document.body,height:400,width:600,viewModel:{stores:{colors:{autoLoad:false,model:P,proxy:{type:"memory",data:O}}},data:{color:null}},items:[{xtype:"combobox",autoLoadOnValue:true,queryMode:"local",forceSelection:true,bind:{store:"{colors}",selection:"{color}"},displayField:"name",valueField:"name",value:"Red"},{itemId:"target-comp",xtype:"component",bind:{data:"{color}"},tpl:"{name}"}]});var S=N.child("#target-comp"),R=N.getViewModel(),Q=R.getStore("colors");waitsFor(function(){return S.el.dom.innerHTML==="Red"&&R.get("color")===Q.byText.get("Red")})});it("should publish a selection when store provided by a bind is autoloaded, value is configured and displayField === valueField",function(){N=new Ext.panel.Panel({renderTo:document.body,height:400,width:600,viewModel:{stores:{colors:{autoLoad:true,model:P,proxy:{type:"memory",data:O}}},data:{color:null}},items:[{xtype:"combobox",autoLoadOnValue:true,queryMode:"local",forceSelection:true,bind:{store:"{colors}",selection:"{color}"},displayField:"name",valueField:"name",value:"Red"},{itemId:"target-comp",xtype:"component",bind:{data:"{color}"},tpl:"{name}"}]});var S=N.child("#target-comp"),R=N.getViewModel(),Q=R.getStore("colors");waitsFor(function(){return S.el.dom.innerHTML==="Red"&&R.get("color")===Q.byText.get("Red")})});it("should publish a selection when store provided by a bind is NOT autoloaded, value is set post construction and displayField === valueField",function(){N=new Ext.panel.Panel({renderTo:document.body,height:400,width:600,viewModel:{stores:{colors:{autoLoad:false,model:P,proxy:{type:"memory",data:O}}},data:{color:null}},items:[{xtype:"combobox",autoLoadOnValue:true,queryMode:"local",forceSelection:true,bind:{store:"{colors}",selection:"{color}"},displayField:"name",valueField:"name"},{itemId:"target-comp",xtype:"component",bind:{data:"{color}"},tpl:"{name}"}]});var T=N.child("combobox"),S=N.child("#target-comp"),R=N.getViewModel(),Q=R.getStore("colors");T.setValue("Red");waitsFor(function(){return S.el.dom.innerHTML==="Red"&&R.get("color")===Q.byText.get("Red")})});it("should publish a selection when store provided by a bind is autoloaded, value is set post construction and displayField === valueField",function(){N=new Ext.panel.Panel({renderTo:document.body,height:400,width:600,viewModel:{stores:{colors:{autoLoad:true,model:P,proxy:{type:"memory",data:O}}},data:{color:null}},items:[{xtype:"combobox",autoLoadOnValue:true,queryMode:"local",forceSelection:true,bind:{store:"{colors}",selection:"{color}"},displayField:"name",valueField:"name"},{itemId:"target-comp",xtype:"component",bind:{data:"{color}"},tpl:"{name}"}]});var T=N.child("combobox"),S=N.child("#target-comp"),R=N.getViewModel(),Q=R.getStore("colors");T.setValue("Red");waitsFor(function(){return S.el.dom.innerHTML==="Red"&&R.get("color")===Q.byText.get("Red")})});it("should publish a selection when store provided by a bind is NOT autoloaded, value is configured and displayField !== valueField",function(){N=new Ext.panel.Panel({renderTo:document.body,height:400,width:600,viewModel:{stores:{colors:{autoLoad:false,model:P,proxy:{type:"memory",data:O}}},data:{color:null}},items:[{xtype:"combobox",autoLoadOnValue:true,queryMode:"local",forceSelection:true,bind:{store:"{colors}",selection:"{color}"},displayField:"name",valueField:"id",value:"0xff0000"},{itemId:"target-comp",xtype:"component",bind:{data:"{color}"},tpl:"{name}"}]});var S=N.child("#target-comp"),R=N.getViewModel(),Q=R.getStore("colors");waitsFor(function(){return S.el.dom.innerHTML==="Red"&&R.get("color")===Q.byText.get("Red")})});it("should publish a selection when store provided by a bind is autoloaded, value is configured and displayField !== valueField",function(){N=new Ext.panel.Panel({renderTo:document.body,height:400,width:600,viewModel:{stores:{colors:{autoLoad:true,model:P,proxy:{type:"memory",data:O}}},data:{color:null}},items:[{xtype:"combobox",autoLoadOnValue:true,queryMode:"local",forceSelection:true,bind:{store:"{colors}",selection:"{color}"},displayField:"name",valueField:"id",value:"0xff0000"},{itemId:"target-comp",xtype:"component",bind:{data:"{color}"},tpl:"{name}"}]});var S=N.child("#target-comp"),R=N.getViewModel(),Q=R.getStore("colors");waitsFor(function(){return S.el.dom.innerHTML==="Red"&&R.get("color")===Q.byText.get("Red")})});it("should publish a selection when store provided by a bind is NOT autoloaded, value is set post construction and displayField !== valueField",function(){N=new Ext.panel.Panel({renderTo:document.body,height:400,width:600,viewModel:{stores:{colors:{autoLoad:false,model:P,proxy:{type:"memory",data:O}}},data:{color:null}},items:[{xtype:"combobox",autoLoadOnValue:true,queryMode:"local",forceSelection:true,bind:{store:"{colors}",selection:"{color}"},displayField:"name",valueField:"id"},{itemId:"target-comp",xtype:"component",bind:{data:"{color}"},tpl:"{name}"}]});var T=N.child("combobox"),S=N.child("#target-comp"),R=N.getViewModel(),Q=R.getStore("colors");T.setValue("0xff0000");waitsFor(function(){return S.el.dom.innerHTML==="Red"&&R.get("color")===Q.byText.get("Red")})});it("should publish a selection when store provided by a bind is autoloaded, value is set post construction and displayField !== valueField",function(){N=new Ext.panel.Panel({renderTo:document.body,height:400,width:600,viewModel:{stores:{colors:{autoLoad:true,model:P,proxy:{type:"memory",data:O}}},data:{color:null}},items:[{xtype:"combobox",autoLoadOnValue:true,queryMode:"local",forceSelection:true,bind:{store:"{colors}",selection:"{color}"},displayField:"name",valueField:"id"},{itemId:"target-comp",xtype:"component",bind:{data:"{color}"},tpl:"{name}"}]});var T=N.child("combobox"),S=N.child("#target-comp"),R=N.getViewModel(),Q=R.getStore("colors");T.setValue("0xff0000");waitsFor(function(){return S.el.dom.innerHTML==="Red"&&R.get("color")===Q.byText.get("Red")})})});describe("destroy",function(){it("should not throw an exception when destroying on select",function(){E({renderTo:Ext.getBody()});J.on("select",function(){J.destroy()});expect(function(){I("value 2")}).not.toThrow()})});describe("editable",function(){it("should expand on inputEl click when NOT editable",function(){E({renderTo:document.body,editable:false});jasmine.fireMouseEvent(J.inputEl,"click");expect(J.isExpanded).toBe(true);J.collapse();J.setEditable(true);jasmine.fireMouseEvent(J.inputEl,"click");expect(J.isExpanded).toBe(false);J.setEditable(false);jasmine.fireMouseEvent(J.inputEl,"click");expect(J.isExpanded).toBe(true)})});describe("collapse on scroll",function(){it("should collapse when the field scrolls out of view",function(){J=new Ext.panel.Panel({renderTo:document.body,title:"Framed panel with normal child",width:300,manageHeight:false,html:null,autoScroll:true,frame:true,layout:"fit",items:[{xtype:"panel",itemId:"formPanel",manageHeight:false,height:170,autoScroll:true,width:100,title:"Non-framed child",items:[{xtype:"textfield"},{xtype:"combobox",itemId:"combo1",typeAhead:true,triggerAction:"all",editable:true,selectOnTab:true,store:[["AA","AA"],["B Shady","B Shady"],["C or Shade","C or Shade"],["D Sunny","D Sunny"],["E","E"]],lazyRender:true,listClass:"x-combo-list-small"},{xtype:"textfield"},{xtype:"textfield"},{xtype:"textfield"},{xtype:"textfield"},{xtype:"textfield"},{xtype:"combobox",typeAhead:true,triggerAction:"all",editable:true,selectOnTab:true,store:[["AA","AA"],["B Shady","B Shady"],["C or Shade","C or Shade"],["D Sunny","D Sunny"],["E","E"]],lazyRender:true,listClass:"x-combo-list-small",listeners:{"select":function(){alert(5)}}}]}]});var P=J.down("#combo1"),O=J.down("#formPanel"),N=O.getScrollable();P.expand();N.scrollBy(0,10);waits(50);runs(function(){expect(P.getPicker().isVisible()).toBe(true);N.scrollBy(0,100)});waitsFor(function(){return P.getPicker().isVisible()===false})})})})