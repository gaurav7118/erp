describe("Ext.form.field.Date",function(){var B,A;function D(){var E=B.getTrigger("picker").getEl(),F=E.getXY();jasmine.fireMouseEvent(E.dom,"click",F[0],F[1])}function C(E,F){jasmine.expectAriaAttr(B,E,F)}beforeEach(function(){A=function(E){E=E||{};Ext.applyIf(E,{name:"test",width:100});B=new Ext.form.field.Date(E)}});afterEach(function(){if(B){B.destroy()}B=A=null});it("should be registered with xtype 'datefield'",function(){B=Ext.create("Ext.form.field.Date",{name:"test"});expect(B instanceof Ext.form.field.Date).toBe(true);expect(Ext.getClass(B).xtype).toBe("datefield")});describe("keyboard interaction",function(){var E=(new Date()).setHours(0,0,0,0),G;function F(H,J){var I=H.getValue();if(J){expect(I.getTime()).toBe(J)}else{expect(I).toBe(J)}}beforeEach(function(){A({renderTo:Ext.getBody()})});afterEach(function(){G=null});describe("focus remains in picker",function(){beforeEach(function(){D();G=B.picker});describe("Space key",function(){it("should set the current date in the field",function(){jasmine.fireKeyEvent(B.picker.keyNav.map.target,"keydown",Ext.event.Event.SPACE);F(B,E)})});describe("Escape key",function(){it("should close the picker",function(){expect(G.hidden).toBe(false);jasmine.fireKeyEvent(B.inputEl,"keydown",Ext.event.Event.ESC);expect(G.hidden).toBe(true)})})});describe("Tab key",function(){var H=jasmine.waitForFocus,K=jasmine.expectFocused,I=jasmine.syncPressTabKey,J;beforeEach(function(){J=new Ext.button.Button({renderTo:Ext.getBody(),text:"foo"})});afterEach(function(){Ext.destroy(J);J=null});describe("on enabled dates",function(){beforeEach(function(){D();G=B.picker;I(G.eventEl,true);H(J)});it("should close the picker",function(){expect(G.hidden).toBe(true)});it("should focus the button",function(){K(J)});it("should select the date",function(){F(B,E)})});describe("on disabled dates",function(){beforeEach(function(){B.setDisabledDates([Ext.Date.format(new Date(),"m/d/Y")]);D();G=B.picker;I(G.eventEl,true);H(J)});it("should close the picker",function(){expect(G.hidden).toBe(true)});it("should focus the button",function(){K(J)});it("should not select the date",function(){F(B,null)})})})});describe("defaults",function(){var H={format:"m/d/Y",altFormats:"m/d/Y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-y|m-d-Y|m/d|m-d|md|mdy|mdY|d|Y-m-d|n-j|n/j",disabledDaysText:"Disabled",disabledDatesText:"Disabled",minText:"The date in this field must be equal to or after {0}",maxText:"The date in this field must be equal to or before {0}",invalidText:"{0} is not a valid date - it must be in the format {1}",triggerCls:"x-form-date-trigger",showToday:true},F=["minValue","maxValue","disabledDays","disabledDates"];for(var E in H){(function(I){it("should have "+I+" = "+H[I],function(){A();expect(B[I]).toEqual(H[I])})})(E)}for(var G=F.length;G--;){(function(I){it("should have "+I+" = undefined",function(){A();expect(B[I]).not.toBeDefined()})})(F[G])}});describe("rendering",function(){beforeEach(function(){A({renderTo:Ext.getBody()})});it("should give the trigger a class of 'x-form-date-trigger'",function(){expect(B.getTrigger("picker").el).toHaveCls("x-form-date-trigger")});it("should have combobox role",function(){C("role","combobox")});it("should have title",function(){C("title","Expected date format: m/d/Y")})});describe("value initialization",function(){describe("without a value",function(){it("should have value = null by default",function(){A();expect(B.value).toBeNull()});it("should return null when calling getValue()",function(){A();expect(B.value).toBeNull()})})});describe("setting values",function(){describe("parsing",function(){it("should parse a value according to the format 1",function(){A({format:"Y/m/d",value:"2008/05/06"});expect(B.getValue()).toEqual(new Date(2008,4,6))});it("should parse a value according to the format 2",function(){A({format:"d/m/Y",value:"03/03/1986"});expect(B.getValue()).toEqual(new Date(1986,2,3))})});describe("setValue",function(){it("should accept a date object",function(){A();B.setValue(new Date(2010,10,5));expect(B.getValue()).toEqual(new Date(2010,10,5))});it("should accept a string value",function(){A({format:"Y/m/d"});B.setValue("2006/01/01");expect(B.getValue()).toEqual(new Date(2006,0,1))});it("should accept a null value",function(){A();B.setValue(null);expect(B.getValue()).toBeNull()});it("should set null if an invalid date string is passed",function(){A({format:"Y/m/d"});B.setValue("03.03.2000");expect(B.getValue()).toBeNull()})})});describe("trigger click",function(){beforeEach(function(){A({renderTo:Ext.getBody(),value:"01/11/2011"})});it("should create a Ext.picker.Date object as the 'picker' property",function(){D();expect(B.picker).toBeDefined();expect(B.picker instanceof Ext.picker.Date).toBe(true)});it("should set the date picker's value to the current field value",function(){D();expect(B.picker.value.getFullYear()).toEqual(2011);expect(B.picker.value.getMonth()).toEqual(0);expect(B.picker.value.getDate()).toEqual(11)});it("should show the picker",function(){D();expect(B.picker.hidden).toBe(false)})});describe("DateField inside a floating component",function(){var E;beforeEach(function(){A({value:"01/11/2011",anchor:"100%"});E=new Ext.window.Window({height:100,width:200,title:"DateField test",layout:"anchor",items:B,autoShow:true})});afterEach(function(){E.destroy()});it("should not constrain the picker inside the window",function(){D();expect(B.picker.getY()).toEqual(B.getY()+B.getHeight())})});describe("safeParse method",function(){beforeEach(function(){A()});it("should parse a value matching the format",function(){var E=B.safeParse("02/04/1978","m/d/Y");expect(E.getFullYear()).toEqual(1978);expect(E.getMonth()).toEqual(1);expect(E.getDate()).toEqual(4)});it("should use the time in the value if the format contains a time",function(){var E=B.safeParse("02/04/1978 13:14","m/d/Y H:i");expect(E.getHours()).toEqual(13);expect(E.getMinutes()).toEqual(14)});it("should use 12:00am as the time if the value has no time",function(){var E=B.safeParse("02/04/1978","m/d/Y");expect(E.getHours()).toEqual(0)});it("should return null if the value cannot be parsed",function(){var E=B.safeParse("foo/bar","m/d/Y");expect(E).toBeNull()})});describe("submit value",function(){it("should use the format as the default",function(){A({value:new Date(2010,0,15)});expect(B.getSubmitValue()).toBe("01/15/2010")});it("should give precedence to submitFormat",function(){A({value:new Date(2010,0,15),submitFormat:"Y-m-d"});expect(B.getSubmitValue()).toBe("2010-01-15")});it("should return null if the value isn't a valid date",function(){A({value:"wontparse",submitFormat:"Y-m-d"});expect(B.getSubmitValue()).toBe("")})});describe("getModelData",function(){it("should use the format as the default",function(){A({name:"myname",value:new Date(2010,0,15)});var E=B.getModelData();expect(E.myname).toBeTruthy();expect(E.myname.getFullYear()).toEqual(2010);expect(E.myname.getMonth()).toEqual(0);expect(E.myname.getDate()).toEqual(15)});it("should return null if the value isn't a valid date",function(){A({name:"myname",value:"wontparse",submitFormat:"Y-m-d"});expect(B.getModelData()).toEqual({myname:null})})});describe("errors",function(){describe("allowBlank",function(){it("should have no errors with allowBlank true",function(){A({allowBlank:true});expect(B.getErrors()).toEqual([])});it("should have an error with allowBlank false and no value",function(){A({allowBlank:false});expect(B.getErrors()).toContain(B.blankText)})});describe("invalid dates",function(){it("should have no error if the date is valid according to the format",function(){A({format:"Y/m/d",value:"2000/01/01"});expect(B.getErrors()).toEqual([])});it("should have an error if the date is not in a required format",function(){A({format:"Y/m/d",renderTo:Ext.getBody()});var F="2004.05.01",E=Ext.String.format(B.invalidText,F,B.format);B.inputEl.dom.value=F;expect(B.getErrors()).toContain(E)})});describe("minValue",function(){it("should have no errors if a min value is not specified",function(){A({value:new Date(1500,0,1)});expect(B.getErrors()).toEqual([])});it("should have no errors if the value is greater than the minimum",function(){A({format:"Y/m/d",value:"2006/07/22",minValue:"2004/07/09"});expect(B.getErrors()).toEqual([])});it("should have an error if the value is less than the minimum",function(){var F="2006/07/09",E;A({format:"Y/m/d",value:"2004/07/22",minValue:F});E=Ext.String.format(B.minText,F);expect(B.getErrors()).toContain(E)});it("should respond to setMinValue",function(){var F="2009/07/09",E;A({format:"Y/m/d",value:"2008/07/22",minValue:"2006/07/09"});E=Ext.String.format(B.minText,F);expect(B.getErrors()).toEqual([]);B.setMinValue(F);expect(B.getErrors()).toContain(E)});it("should not throw an error when the value is equal to the min value",function(){A({format:"Y/m/d",value:"2008/05/01",minValue:"2008/05/01"});expect(B.getErrors()).toEqual([])})});describe("maxValue",function(){it("should have no errors if a max value is not specified",function(){A({value:new Date(3000,0,1)});expect(B.getErrors()).toEqual([])});it("should have no errors if the value is less than the maximum",function(){A({format:"Y/m/d",value:"2006/07/22",maxValue:"2008/07/09"});expect(B.getErrors()).toEqual([])});it("should have an error if the value is bigger than the maximum",function(){var F="2006/07/09",E;A({format:"Y/m/d",value:"2008/07/22",maxValue:F});E=Ext.String.format(B.maxText,F);expect(B.getErrors()).toContain(E)});it("should respond to setMaxValue",function(){var F="2008/05/09",E;A({format:"Y/m/d",value:"2008/07/22",maxValue:"2009/07/09"});E=Ext.String.format(B.maxText,F);expect(B.getErrors()).toEqual([]);B.setMaxValue(F);expect(B.getErrors()).toContain(E)});it("should not throw an error when the value is equal to the max value",function(){A({format:"Y/m/d",value:"2008/05/01",maxValue:"2008/05/01"});expect(B.getErrors()).toEqual([])})});describe("disabledDays",function(){it("should throw no error if disabledDays is not defined",function(){A({format:"Y/m/d",value:"2008/06/06"});expect(B.getErrors()).toEqual([])});it("should not throw an error if the date doesn't match the disabled days",function(){A({format:"Y/m/d",value:"2010/11/05",disabledDays:[0,6]});expect(B.getErrors()).toEqual([])});it("should throw an error if the date does match the disabled days",function(){A({format:"Y/m/d",value:"2010/11/05",disabledDays:[1,5]});expect(B.getErrors()).toContain(B.disabledDaysText)});describe("setDisabledDays method",function(){it("should set the disabledDays property",function(){A();B.setDisabledDays([2,6]);expect(B.disabledDays).toEqual([2,6])});it("should call the date picker's setDisabledDays method",function(){A({renderTo:Ext.getBody()});D();var E=spyOn(B.picker,"setDisabledDays");B.setDisabledDays([3,6]);expect(B.picker.setDisabledDays).toHaveBeenCalledWith([3,6])})})});describe("disabledDates",function(){it("should not throw an error if there's no regex",function(){A({format:"Y/m/d",value:new Date()});expect(B.getErrors()).toEqual([])});it("should not throw an error if the value does not match the regex",function(){A({format:"Y/m/d",value:"2006/04/17",disabledDates:["2006/04/2"]});expect(B.getErrors()).toEqual([])});it("should throw an error if the value matches the regex",function(){A({format:"Y/m/d",value:"2006/04/17",disabledDates:["2006/04/1"]});expect(B.getErrors()).toContain(B.disabledDatesText)});describe("setDisabledDates method",function(){it("should set the disabledDates property",function(){A({format:"Y/m/d"});B.setDisabledDates(["1978/02/04"]);expect(B.disabledDates).toEqual(["1978/02/04"])});it("should set the disabledDatesRE property",function(){A();B.setDisabledDates(["1978/02/04"]);expect(B.disabledDatesRE+"").toEqual(new RegExp("(?:1978/02/04)")+"")});it("should call the date picker's setDisabledDates method",function(){A({renderTo:Ext.getBody()});D();var E=spyOn(B.picker,"setDisabledDates");B.setDisabledDates(["1978/02/04"]);expect(B.picker.setDisabledDates).toHaveBeenCalledWith(B.disabledDatesRE)})})})});describe("blur",function(){var E=Ext.isWebKit?it:xit;E("should call rawToValue inside blur",function(){A({renderTo:Ext.getBody(),format:"Y-m-d",rawToValue:function(H){var G=this.parseDate(H)||H||null;return(Ext.isDate(G)?Ext.Date.add(G,Ext.Date.DAY,1):G)},valueToRaw:function(H){var G=this.parseDate(H);return(Ext.isDate(G)?this.formatDate(Ext.Date.add(G,Ext.Date.DAY,-1)):"")}});B.setValue("2010-04-15");B.focus();B.blur();var F=Ext.Date.format(B.getValue(),"Y-m-d");expect(F).toBe("2010-04-15")});E("should not blank the textfield for an invalid date",function(){A({renderTo:Ext.getBody(),format:"Y-m-d"});B.inputEl.dom.value="foo";B.focus();B.blur();expect(B.inputEl.getValue()).toBe("foo")})})})