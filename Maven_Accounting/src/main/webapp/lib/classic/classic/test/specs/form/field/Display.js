describe("Ext.form.field.Display",function(){var B,A;beforeEach(function(){A=function(C){C=C||{};if(!C.name){C.name="fieldname"}if(!C.renderTo){C.renderTo=Ext.getBody()}B=new Ext.form.field.Display(C)}});afterEach(function(){if(B&&B.destroy){B.destroy()}B=null});it("should be registered as xtype 'displayfield'",function(){B=Ext.create("Ext.form.field.Display",{name:"test"});expect(B instanceof Ext.form.field.Display).toBe(true);expect(Ext.getClass(B).xtype).toBe("displayfield")});describe("defaults",function(){beforeEach(function(){A()});it("should have a fieldCls of 'x-form-display-field'",function(){expect(B.fieldCls).toEqual("x-form-display-field")});it("should have htmlEncode set to false",function(){expect(B.htmlEncode).toBeFalsy()})});describe("rendering",function(){beforeEach(function(){A({value:"foo"})});describe("bodyEl",function(){it("should exist",function(){expect(B.bodyEl).toBeDefined()});it("should have the class 'x-form-item-body'",function(){expect(B.bodyEl.hasCls("x-form-item-body")).toBe(true)});it("should have the id '[id]-bodyEl'",function(){expect(B.bodyEl.dom.id).toEqual(B.id+"-bodyEl")})});describe("inputEl",function(){it("should exist",function(){expect(B.inputEl).toBeDefined()});it("should be a child of the bodyEl",function(){expect(B.inputEl.dom.parentNode).toBe(B.bodyEl.dom)});it("should be a div",function(){expect(B.inputEl.dom.tagName.toLowerCase()).toEqual("div")});it("should have the 'fieldCls' config as a class",function(){expect(B.inputEl.hasCls(B.fieldCls)).toBe(true)});it("should have the field value as its innerHTML",function(){expect(B.inputEl.dom).hasHTML(B.value)})})});describe("validation",function(){beforeEach(function(){A()});it("should always return true from the validate method",function(){expect(B.validate()).toBe(true)});it("should always return true from the isValid method",function(){expect(B.isValid()).toBe(true)})});describe("value getters",function(){describe("getValue",function(){it("should return the field's value",function(){A({value:"the field value"});expect(B.getValue()).toEqual("the field value")});it("should return the same value when htmlEncode is true",function(){A({value:"<p>the field value</p>",htmlEncode:true});expect(B.getValue()).toEqual("<p>the field value</p>")});it("should keep an array value",function(){var C=[];A({value:C});expect(B.getValue()).toBe(C)});it("should keep an object value",function(){var C={};A({value:C});expect(B.getValue()).toBe(C)});it("should keep a numeric value",function(){A({value:50});expect(B.getValue()).toBe(50)});it("should keep a boolean value",function(){A({value:true});expect(B.getValue()).toBe(true)});it("should keep false",function(){A({value:false});expect(B.getValue()).toBe(false)});it("should keep 0",function(){A({value:0});expect(B.getValue()).toBe(0)})});describe("getRawValue",function(){it("should return the field's value",function(){A({value:"the field value"});expect(B.getRawValue()).toEqual("the field value")});it("should return the same value when htmlEncode is true",function(){A({value:"<p>the field value</p>",htmlEncode:true});expect(B.getRawValue()).toEqual("<p>the field value</p>")})});describe("getSubmitData",function(){it("should return null",function(){A({value:"the field value"});expect(B.getSubmitData()).toBeNull()})});describe("getModelData",function(){it("should return the value",function(){A({value:"the field value",name:"myfield"});expect(B.getModelData()).toEqual({myfield:"the field value"})})})});describe("setting value",function(){describe("setRawValue",function(){it("should set the inputEl's innerHTML to the specified value",function(){A({value:"the field value"});B.setRawValue("the new value");expect(B.inputEl.dom).hasHTML("the new value")});it("should not html-encode the value by default",function(){A({value:"the field value"});B.setRawValue("<p>the new value</p>");expect(B.inputEl.dom).hasHTML("<p>the new value</p>")});it("should html-encode the value when htmlEncode config is true",function(){A({value:"the field value",htmlEncode:true});B.setRawValue("<p>the new value</p>");expect(B.inputEl.dom).hasHTML("&lt;p&gt;the new value&lt;/p&gt;")})});describe("setValue",function(){it("should set the inputEl's innerHTML to the specified value",function(){A({value:"the field value"});B.setValue("the new value");expect(B.inputEl.dom).hasHTML("the new value")});it("should not html-encode the value by default",function(){A({value:"the field value"});B.setValue("<p>the new value</p>");expect(B.inputEl.dom).hasHTML("<p>the new value</p>")});it("should html-encode the value when htmlEncode config is true",function(){A({value:"the field value",htmlEncode:true});B.setValue("<p>the new value</p>");expect(B.inputEl.dom).hasHTML("&lt;p&gt;the new value&lt;/p&gt;")});it("should accept 0",function(){A({value:0});expect(B.inputEl.dom).hasHTML("0")});it("should accept false",function(){A({value:false});expect(B.inputEl.dom).hasHTML("false")});it("should accept setting an array value",function(){A({value:[1,2,3,4],renderer:function(C){return C.join(",")}});expect(B.inputEl.dom).hasHTML("1,2,3,4")});it("should accept setting an object value",function(){A({value:{foo:true,bar:true,baz:true},renderer:function(C){return Ext.Object.getKeys(C).join(",")}});expect(B.inputEl.dom).hasHTML("foo,bar,baz")})})});describe("renderer",function(){it("should set the innerHTML to the value specified by the renderer",function(){A({value:"foo",renderer:function(C){return C+"bar"}});expect(B.inputEl.dom).hasHTML("foobar")});it("should not change the raw value",function(){A({value:"foo",renderer:function(C){return C+"bar"}});expect(B.rawValue).toBe("foo")});it("should default the scope to the field",function(){var C;A({value:"foo",renderer:function(D){C=this}});expect(C).toBe(B)});it("should use the passed scope",function(){var D={},C;A({value:"foo",scope:D,renderer:function(E){C=this}});expect(C).toBe(D)});it("should pass the raw value and the field to the renderer",function(){var D,C;A({value:"foo",renderer:function(F,E){D=F;C=E}});expect(D).toBe("foo");expect(C).toBe(B)});it("should pass an empty string to the renderer if the value is undefined",function(){var C;A({value:undefined,renderer:function(D){C=D}});expect(C).toBe("")})});describe("layout",function(){it("should vertically align the value to the top when the height of the field is stretched",function(){A({height:100,fieldLabel:"foo",value:"bar"});expect(B.inputEl.getY()).toBe(B.bodyEl.getY()+B.inputEl.getMargin("t"))});it("should be able to auto height with multi line text",function(){A({value:"foo"});var C=B.getHeight();B.destroy();A({value:"foo<br>bar<br>baz"});expect(B.getHeight()).toBeGreaterThan(C)})})})