describe("Ext.form.field.Field",function(){var A,B,E,D;function F(G){B=new Ext.container.Container({items:G})}function C(G){G=G||{};if(!G.form){G.form={}}Ext.applyIf(G.form,{isValid:function(){return true},afterAction:Ext.emptyFn,getValues:Ext.emptyFn,hasUpload:function(){return false},markInvalid:Ext.emptyFn});E=new Ext.form.action.Submit(G)}afterEach(function(){Ext.destroy(B,E,D);B=E=D=A=null});describe("data binding",function(){var G,I;function H(J){J=Ext.apply({viewModel:G},J);I=new Ext.form.field.Base(J)}beforeEach(function(){G=new Ext.app.ViewModel()});afterEach(function(){Ext.destroy(I);I=null});describe("valuePublishEvent",function(){it("should accept a string",function(){H({valuePublishEvent:"foo",renderTo:Ext.getBody(),bind:"{theValue}"});I.setValue("XXX");I.fireEvent("foo");expect(G.get("theValue")).toBe("XXX")});it("should accept an array",function(){H({valuePublishEvent:["foo","bar"],renderTo:Ext.getBody(),bind:"{theValue}"});I.setValue("XXX");I.fireEvent("foo");expect(G.get("theValue")).toBe("XXX");I.setValue("YYY");I.fireEvent("bar");expect(G.get("theValue")).toBe("YYY");I.setValue("ZZZ");I.fireEvent("baz");expect(G.get("theValue")).toBe("YYY")})});describe("valid values",function(){it("should publish a valid value",function(){H({renderTo:Ext.getBody(),bind:"{theValue}"});I.getErrors=function(){return[]};I.setValue("abc");expect(G.get("theValue")).toBe("abc")});it("should not publish an invalid value",function(){H({renderTo:Ext.getBody(),bind:"{theValue}"});I.getErrors=function(){var J=this.getValue();return J==="abc"?["Invalid"]:[]};I.setValue("abc");expect(G.get("theValue")).toBeNull();I.setValue("def");expect(G.get("theValue")).toBe("def")})});describe("with records",function(){var J;beforeEach(function(){Ext.define("spec.Person",{extend:"Ext.data.Model",fields:[{name:"name",validators:{type:"length",min:3}},"age"]});J=new spec.Person({name:"FooBar",age:10});G.set("thePerson",J)});afterEach(function(){Ext.undefine("spec.Person");Ext.data.Model.schema.clear(true)});it("should not validate model fields without modelValidation",function(){H({renderTo:Ext.getBody(),bind:"{thePerson.name}"});G.notify();I.setValue("");expect(I.getErrors()).toEqual([])});it("should not attempt to model validate when the field is not in the model",function(){H({renderTo:Ext.getBody(),modelValidation:true,bind:"{thePerson.something}"});expect(I.getErrors()).toEqual([])});it("should not include results for fields that do not have validators",function(){H({renderTo:Ext.getBody(),modelValidation:true,bind:"{thePerson.age}"});G.notify();expect(I.getErrors()).toEqual([])});it("should validate using the model validator",function(){H({renderTo:Ext.getBody(),modelValidation:true,bind:"{thePerson.name}"});G.notify();I.setValue("");expect(I.getErrors()).toEqual(["Must be present"])});it("should combine with field validations",function(){H({renderTo:Ext.getBody(),modelValidation:true,bind:"{thePerson.name}"});G.notify();Ext.override(I,{getErrors:function(){var K=this.callParent(arguments);K.push("Fail");return K}});I.setValue("");expect(I.getErrors()).toEqual(["Must be present","Fail"])})})});describe("getModelData",function(){var G;afterEach(function(){Ext.destroy(G);G=null});it("should return filefield data",function(){var H=new Ext.form.field.Display({name:"field1",value:"foo"});var I=new Ext.form.field.File({name:"field2",value:"bar"});expect(H.getModelData()).toEqual({field1:"foo"});expect(I.getModelData()).toEqual({field2:""});Ext.destroy(H,I)});describe("in a form with jsonSubmit",function(){it("should return values for fields in a form regardless of submitValue (not submitting)",function(){F([new Ext.form.field.Base({name:"field1",value:"foo",submitValue:true}),new Ext.form.field.File({name:"field2",value:"bar"}),new Ext.form.field.Display({name:"field3",value:"baz",submitValue:false})]);G=new Ext.form.Basic(B,{jsonSubmit:true});expect(G.getFieldValues()).toEqual({field1:"foo",field2:"",field3:"baz"})})})});describe("getSubmitData",function(){var G;afterEach(function(){Ext.destroy(G);G=null});it("should not be able to get the submit data for a filefield by default, non-submission",function(){G=new Ext.form.field.File({name:"foo"});expect(G.getSubmitData()).toBe(null)});it("should be able to get the submit data for a filefield when configured with submitValue: true, non-submission",function(){G=new Ext.form.field.File({name:"foo",submitValue:true});expect(G.getSubmitData()).toEqual({foo:""})});it("should not be able to get the submit data for a filefield on form submission",function(){F([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.File({name:"field2"})]);C({form:new Ext.form.Basic(B)});expect(B.items.getAt(0).getSubmitData()).toEqual({field1:"foo"});expect(B.items.getAt(1).getSubmitData()).toBe(null)})});describe("submitValue config",function(){beforeEach(function(){spyOn(Ext.Ajax,"request").andCallFake(function(){expect(arguments.length).toEqual(1);A=arguments[0]})});it("should add all of the BasicForm's field values marked as submitValue: true to the ajax call parameters",function(){F([new Ext.form.field.Base({name:"field1",value:"foo",submitValue:true}),new Ext.form.field.Base({name:"field2",value:"bar"})]);D=new Ext.form.Basic(B,{jsonSubmit:true});C({form:D});E.run();expect(A.jsonData).toEqual({field1:"foo",field2:"bar"})});it("should not add any of the BasicForm's field values marked as submitValue: false to the ajax call parameters",function(){F([new Ext.form.field.Base({name:"field1",value:"foo",submitValue:true}),new Ext.form.field.Base({name:"field2",value:"bar",submitValue:false})]);D=new Ext.form.Basic(B,{jsonSubmit:true});C({form:D});E.run();expect(A.jsonData).toEqual({field1:"foo"})});it("should not include any displayfields in the form submit",function(){F([new Ext.form.field.Base({name:"field1",value:"foo",submitValue:true}),new Ext.form.field.Display({name:"field2",value:"bar"})]);D=new Ext.form.Basic(B,{jsonSubmit:true});C({form:D});E.run();expect(A.jsonData).toEqual({field1:"foo"})});it("should submit any fields with submitValue: true in the form submit",function(){F([new Ext.form.field.Base({name:"field1",value:"foo"}),new Ext.form.field.Display({name:"field2",value:"bar"}),new Ext.form.field.Display({name:"field3",value:"baz",submitValue:true})]);D=new Ext.form.Basic(B,{jsonSubmit:true});C({form:D});E.run();expect(A.jsonData).toEqual({field1:"foo",field3:"baz"})})})})