describe("Ext.form.field.Hidden",function(){var B,A,C;beforeEach(function(){A=function(D){D=D||{};B=new Ext.form.field.Hidden(D);return B}});afterEach(function(){if(B){B.destroy()}B=A=null});it("should not take up any height",function(){var D=new Ext.container.Container({renderTo:Ext.getBody(),items:A()});expect(D.getHeight()).toBe(0);D.destroy()});it("should be registered with the 'hiddenfield' xtype",function(){B=Ext.create("Ext.form.field.Hidden",{name:"test"});expect(B instanceof Ext.form.field.Hidden).toBe(true);expect(Ext.getClass(B).xtype).toBe("hiddenfield")});it("should render as input hidden",function(){A({name:"test",renderTo:Ext.getBody()});expect(B.inputEl.dom.type).toEqual("hidden")});describe("getSubmitData",function(){it("should return the field's value",function(){A({name:"myname",value:"myvalue"});expect(B.getSubmitData()).toEqual({myname:"myvalue"})});it("should return empty string for an empty value",function(){A({name:"myname",value:""});expect(B.getSubmitData()).toEqual({myname:""})})});describe("getModelData",function(){it("should return the field's value",function(){A({name:"myname",value:"myvalue"});expect(B.getModelData()).toEqual({myname:"myvalue"})});it("should return empty string for an empty value",function(){A({name:"myname",value:""});expect(B.getModelData()).toEqual({myname:""})})})})