describe("Ext.form.field.Number",function(){var B,A;function C(D,E){jasmine.expectAriaAttr(B,D,E)}beforeEach(function(){A=function(D){D=D||{};Ext.applyIf(D,{name:"test"});B=new Ext.form.field.Number(D)}});afterEach(function(){if(B){B.destroy()}B=A=null});describe("defaults",function(){beforeEach(function(){A()});it("should have an inputType of 'text'",function(){expect(B.inputType).toEqual("text")});it("should have allowDecimals = true",function(){expect(B.allowDecimals).toBe(true)});it("should have decimalSeparator = '.'",function(){expect(B.decimalSeparator).toEqual(".")});it("should have decimalPrecision = 2",function(){expect(B.decimalPrecision).toEqual(2)});it("should have minValue = NEGATIVE_INFINITY",function(){expect(B.minValue).toEqual(Number.NEGATIVE_INFINITY)});it("should have maxValue = MAX_VALUE",function(){expect(B.maxValue).toEqual(Number.MAX_VALUE)});it("should have step = 1",function(){expect(B.step).toEqual(1)});it("should have minText = 'The minimum value for this field is {0}'",function(){expect(B.minText).toEqual("The minimum value for this field is {0}")});it("should have maxText = 'The maximum value for this field is {0}'",function(){expect(B.maxText).toEqual("The maximum value for this field is {0}")});it("should have nanText = '{0} is not a valid number'",function(){expect(B.nanText).toEqual("{0} is not a valid number")});it("should have negativeText = 'The value cannot be negative'",function(){expect(B.negativeText).toEqual("The value cannot be negative")});it("should have baseChars = '0123456789'",function(){expect(B.baseChars).toEqual("0123456789")});it("should have autoStripChars = false",function(){expect(B.autoStripChars).toBe(false)});describe("rendered",function(){beforeEach(function(){B.render(Ext.getBody())});it("should have spinbutton role",function(){C("role","spinbutton")});it("should not have aria-valuemin",function(){C("aria-valuemin",null)});it("should not have aria-valuemax",function(){C("aria-valuemax",null)});it("should not have aria-valuenow",function(){C("aria-valuenow",null)});it("should not have aria-valuetext",function(){C("aria-valuetext",null)})})});describe("ARIA attributes",function(){beforeEach(function(){A({renderTo:Ext.getBody(),minValue:1,maxValue:100,value:50})});it("should have aria-valuemin",function(){C("aria-valuemin","1")});it("should have aria-valuemax",function(){C("aria-valuemax","100")});it("should have aria-valuenow",function(){C("aria-valuenow","50")})});describe("setMinValue",function(){it("should set the minValue property to the argument",function(){A({renderTo:Ext.getBody(),minValue:-10});B.setMinValue(-5);expect(B.minValue).toEqual(-5)});it("should default a non-numeric argument to NEGATIVE_INFINITY",function(){A({renderTo:Ext.getBody(),minValue:-10});B.setMinValue("foobar");expect(B.minValue).toEqual(Number.NEGATIVE_INFINITY)});it("should recalculate any maskRe/stripCharsRe",function(){A({renderTo:Ext.getBody(),minValue:0,autoStripChars:true});var D=B.maskRe,E=B.stripCharsRe;B.setMinValue(-1);expect(B.maskRe).not.toBe(D);expect(B.stripCharsRe).not.toBe(E)});it("should update aria-valuemin",function(){A({renderTo:Ext.getBody(),minValue:-10});B.setMinValue(-1);C("aria-valuemin","-1")})});describe("setMaxValue",function(){beforeEach(function(){A({renderTo:Ext.getBody(),maxValue:10})});it("should set the maxValue property to the argument",function(){B.setMaxValue(25);expect(B.maxValue).toEqual(25)});it("should default a non-numeric argument to MAX_VALUE",function(){B.setMaxValue("foobar");expect(B.maxValue).toEqual(Number.MAX_VALUE)});it("should update aria-valuemax",function(){B.setMaxValue(25);C("aria-valuemax","25")})});describe("parsing invalid values",function(){it("should be null if configured with no value",function(){A();expect(B.getValue()).toBeNull()});it("should be null if configured with an invalid value",function(){A({value:"foo"});expect(B.getValue()).toBeNull()});it("should set the field value to the parsed value on blur",function(){A({inputType:"text",renderTo:Ext.getBody()});jasmine.focusAndWait(B);runs(function(){B.inputEl.dom.value="15foo"});jasmine.blurAndWait(B);runs(function(){expect(B.inputEl.dom.value).toEqual("15")})});it("should remove aria-valuenow",function(){A({renderTo:Ext.getBody(),value:10});B.setValue("fubar");C("aria-valuenow",null)})});describe("respecting allowDecimals",function(){it("should round any decimals when allowDecimals is false",function(){A({allowDecimals:false});B.setValue(1.2345);expect(B.getValue()).toEqual(1);B.setValue(7.9);expect(B.getValue()).toEqual(8);B.setValue(2);expect(B.getValue()).toEqual(2)});it("should round any decimals when decimalPrecision is 0",function(){A({decimalPrecision:0});B.setValue(3.14);expect(B.getValue()).toEqual(3);B.setValue(19);expect(B.getValue()).toEqual(19)});it("should round values correctly",function(){A({decimalPrecision:3});B.setValue(3.14159);expect(B.getValue()).toEqual(3.142);B.decimalPrecision=1;B.setValue(1.94430194859);expect(B.getValue()).toEqual(1.9)})});describe("respecting decimalSeparator",function(){it("should parse values containing the separator",function(){A({decimalSeparator:",",decimalPrecision:2});B.setValue("1,3");expect(B.getValue()).toEqual(1.3);B.setValue(4);expect(B.getValue()).toEqual(4);B.setValue("1,728");expect(B.getValue()).toEqual(1.73)})});describe("submitLocaleSeparator",function(){it("should use the locale separator by default",function(){A({decimalSeparator:",",value:0.4});expect(B.getSubmitValue()).toBe("0,4")});it("should replace the separator with the default number",function(){A({decimalSeparator:",",value:0.4,submitLocaleSeparator:false});expect(B.getSubmitValue()).toBe("0.4")});it("should have no effect if we specify no custom separator",function(){A({value:0.4});expect(B.getSubmitValue()).toBe("0.4")})});describe("validation",function(){it("should have an error when the number is outside the bounds",function(){A({minValue:5,maxValue:30});expect(B.getErrors(3)).toContain("The minimum value for this field is 5");expect(B.getErrors(100)).toContain("The maximum value for this field is 30");expect(B.getErrors(7.2)).toEqual([])});it("should have an error when the number is invalid",function(){A();expect(B.getErrors("foo")).toContain("foo is not a valid number");expect(B.getErrors(17).length).toEqual(0)});it("should have an error if the value is negative and minValue is 0",function(){A({minValue:0});expect(B.getErrors(-3)).toContain("The value cannot be negative")})});describe("autoStripChars",function(){beforeEach(function(){A({autoStripChars:true,inputType:"text",renderTo:Ext.getBody()})});it("should remove non-numeric characters from the input's raw value",function(){B.inputEl.dom.value="123abc45de";expect(B.getValue()).toEqual(12345)});it("should support scientific number notation",function(){jasmine.focusAndWait(B);runs(function(){B.inputEl.dom.value="10000000000000000000000000000000000000"});jasmine.blurAndWait(B);runs(function(){expect(B.getValue()).toEqual(1e+37)})})});describe("enforceMaxLength",function(){beforeEach(function(){A({renderTo:Ext.getBody(),maxLength:2,enforceMaxLength:true})});it("should enforce the max length when spinning up",function(){B.setValue(99);B.spinUp();expect(B.getValue()).toBe(99)});it("should enforce the max length when spinning down",function(){B.setValue(-9);B.spinDown();expect(B.getValue()).toBe(-9)})});describe("spinner buttons",function(){describe("spin up",function(){beforeEach(function(){A({renderTo:Ext.getBody(),value:5,step:2,maxValue:8})});it("should increment the value by the step config",function(){B.onSpinUp();expect(B.getValue()).toEqual(7)});it("should not increment past the maxValue",function(){B.onSpinUp();B.onSpinUp();expect(B.getValue()).toEqual(8);B.onSpinUp();expect(B.getValue()).toEqual(8)});it("should disable the up button when at the maxValue",function(){B.onSpinUp();expect(B.spinUpEnabled).toBe(true);B.onSpinUp();expect(B.spinUpEnabled).toBe(false)});it("should update aria-valuenow",function(){B.onSpinUp();C("aria-valuenow","7")})});describe("spin down",function(){beforeEach(function(){A({renderTo:Ext.getBody(),value:5,step:2,minValue:2})});it("should decrement the value by the step config",function(){B.onSpinDown();expect(B.getValue()).toEqual(3)});it("should not decrement past the minValue",function(){B.onSpinDown();B.onSpinDown();expect(B.getValue()).toEqual(2);B.onSpinDown();expect(B.getValue()).toEqual(2)});it("should disable the down button when at the minValue",function(){B.onSpinDown();expect(B.spinDownEnabled).toBe(true);B.onSpinDown();expect(B.spinDownEnabled).toBe(false)});it("should update aria-valuenow",function(){B.onSpinDown();C("aria-valuenow","3")})})});describe("getSubmitData",function(){it("should return the field's numeric value",function(){A({name:"myname",value:123});expect(B.getSubmitData()).toEqual({myname:"123"})});it("should return empty string for an empty value",function(){A({name:"myname"});expect(B.getSubmitData()).toEqual({myname:""})});it("should return empty string for a non-numeric",function(){A({name:"myname",value:"asdf"});expect(B.getSubmitData()).toEqual({myname:""})})});describe("getModelData",function(){it("should return the field's numeric value",function(){A({name:"myname",value:123});expect(B.getModelData()).toEqual({myname:123})});it("should return null for an empty value",function(){A({name:"myname",value:""});expect(B.getModelData()).toEqual({myname:null})});it("should return null for a non-numeric value",function(){A({name:"myname",value:""});expect(B.getModelData()).toEqual({myname:null})})});describe("blur",function(){it("should call rawToValue inside blur",function(){A({renderTo:Ext.getBody(),rawToValue:function(D){return Ext.form.field.Number.prototype.rawToValue.call(this,D/2)},valueToRaw:function(D){return Ext.form.field.Number.prototype.valueToRaw.call(this,D*2)}});B.setValue(50);jasmine.focusAndWait(B);jasmine.blurAndWait(B);runs(function(){expect(B.getValue()).toBe(50)})})});describe("with binding",function(){it("should leave the user typed value intact",function(){A({renderTo:Ext.getBody(),viewModel:{},decimalPrecision:4,bind:"{val}"});var D=B.getViewModel();jasmine.focusAndWait(B);runs(function(){B.inputEl.dom.value="1.23456";B.checkChange();D.notify();expect(B.inputEl.dom.value).toBe("1.23456");expect(D.get("val")).toBe(1.2346);expect(B.getValue()).toBe(1.2346)})})})})