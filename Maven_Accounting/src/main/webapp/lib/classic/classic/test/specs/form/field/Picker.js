describe("Ext.form.field.Picker",function(){var B,A;beforeEach(function(){A=function(E){E=E||{};Ext.applyIf(E,{ariaRole:"foo",name:"test",width:300,hideEmptyLabel:false,createPicker:function(){return new Ext.Component({hidden:true,renderTo:Ext.getBody(),floating:true,html:"foo"})}});B=new Ext.form.field.Picker(E)}});afterEach(function(){if(B){B.destroy()}B=A=null});function D(){var E=B.getTrigger("picker").el,F=E.getXY();jasmine.fireMouseEvent(E.dom,"click",F[0],F[1])}function C(E,F){jasmine.expectAriaAttr(B,E,F)}describe("defaults",function(){beforeEach(function(){A()});it("should have matchFieldWidth = true",function(){expect(B.matchFieldWidth).toBe(true)});it("should have pickerAlign = 'tl-bl?'",function(){expect(B.pickerAlign).toEqual("tl-bl?")});it("should have pickerOffset = undefined",function(){expect(B.pickerOffset).not.toBeDefined()});describe("rendered",function(){beforeEach(function(){B.render(Ext.getBody())});it("should have aria-haspopup attribute",function(){C("aria-haspopup","true")});it("should have aria-expanded attribute",function(){C("aria-expanded","false")})})});describe("expand",function(){beforeEach(function(){A({renderTo:Ext.getBody()})});it("should create the picker component",function(){expect(B.picker).not.toBeDefined();B.expand();expect(B.picker).toBeDefined();expect(B.picker instanceof Ext.Component).toBe(true)});it("should show the picker component",function(){B.expand();expect(B.picker.hidden).toBe(false)});it("should align the picker to the field",function(){B.expand();expect(B.picker.el.getX()).toEqual(B.bodyEl.getX())});it("should set the picker's width to the width of the field",function(){B.expand();expect(B.picker.getWidth()).toEqual(B.bodyEl.getWidth())});it("should not set the picker's width if matchFieldWidth is false",function(){Ext.destroy(B);A({renderTo:Ext.getBody(),matchFieldWidth:false});B.expand();expect(B.picker.getWidth()).not.toEqual(B.inputEl.getWidth())});it("should fire the 'expand' event",function(){var E=jasmine.createSpy();B.on("expand",E);B.expand();expect(E).toHaveBeenCalledWith(B)});it("should call the onExpand method",function(){spyOn(B,"onExpand");B.expand();expect(B.onExpand).toHaveBeenCalledWith()});it("should set aria-expanded to true",function(){B.expand();C("aria-expanded","true")});it("should set aria-owns attribute",function(){B.expand();C("aria-owns",B.picker.el.id)});xit("should monitor mousedown events on the document",function(){});xit("should monitor mousewheel events on the document",function(){})});describe("collapse",function(){beforeEach(function(){A({renderTo:Ext.getBody()});B.expand()});it("should hide the picker component",function(){B.collapse();expect(B.picker.hidden).toBe(true)});it("should fire the 'collapse' event",function(){var E=jasmine.createSpy();B.on("collapse",E);B.collapse();expect(E).toHaveBeenCalledWith(B)});it("should call the onCollapse method",function(){spyOn(B,"onCollapse");B.collapse();expect(B.onCollapse).toHaveBeenCalledWith()});it("should set aria-expanded to false",function(){B.collapse();C("aria-expanded","false")});it("should not remove aria-owns",function(){B.collapse();C("aria-owns",B.picker.el.id)});xit("should stop monitoring mousedown events on the document",function(){});xit("should stop monitoring mousewheel events on the document",function(){})});describe("trigger click",function(){beforeEach(function(){A({renderTo:Ext.getBody()})});it("should expand the picker if not already expanded",function(){spyOn(B,"expand");D();expect(B.expand).toHaveBeenCalled()});it("should collapse the picker if already expanded",function(){B.expand();spyOn(B,"collapse");D();expect(B.collapse).toHaveBeenCalled()});it("should not blur the field",function(){B.focus();waitsFor(function(){return B.hasFocus});runs(function(){D()});waitsFor(function(){return B.hasFocus})});it("should do nothing if the field is readOnly",function(){B.setReadOnly(true);spyOn(B,"expand");D();expect(B.expand).not.toHaveBeenCalled()});it("should do nothing if the field is disabled",function(){B.setDisabled(true);spyOn(B,"expand");D();expect(B.expand).not.toHaveBeenCalled()})});describe("keyboard access",function(){beforeEach(function(){A({renderTo:Ext.getBody()})});function E(F){jasmine.fireKeyEvent(B.inputEl,"keydown",F);jasmine.fireKeyEvent(B.inputEl,"keypress",F)}it("should invoke the trigger click when the down key is pressed",function(){spyOn(B,"onTriggerClick").andCallThrough();E(40);expect(B.onTriggerClick).toHaveBeenCalled()});it("should collapse the picker when the escape key is pressed",function(){spyOn(B.keyNav.map.bindings[1],"handler").andCallThrough();E(27);expect(B.keyNav.map.bindings[1].handler).toHaveBeenCalled()})});(Ext.isWebKit?describe:xdescribe)("focus/blur",function(){var E,F;beforeEach(function(){A({renderTo:Ext.getBody(),createPicker:function(){return new Ext.Container({hidden:true,renderTo:Ext.getBody(),floating:true,html:"foo",items:[{xtype:"component",autoEl:"a"}]})}})});describe("blur event",function(){beforeEach(function(){F=Ext.widget({renderTo:document.body,xtype:"textfield"});E=false});afterEach(function(){F.destroy()});it("should fire the blur event when another component is programmatically focused",function(){B.focus();B.on("blur",function(){E=true});F.focus();expect(E).toBe(true)});it("should not fire the blur event when the input loses focus due to the picker receiving focus",function(){B.on("blur",function(){E=true});B.expand();B.picker.items.getAt(0).focus();expect(E).toBe(false)})});it("should re-focus the input if focus is lost due to a mousedown on the picker",function(){B.focus();B.expand();jasmine.fireMouseEvent(B.picker.el.dom,"mousedown");expect(B.hasFocus).toBe(true);expect(Ext.Element.getActiveElement()).toBe(B.inputEl.dom)})});(Ext.isIE9m?xdescribe:describe)("Using PickerField as a cell editor where the picker dropdown is itself an editable grid!",function(){var H,I,G,E;afterEach(function(){H.destroy();I.destroy()});function J(L,N,P,O,M,K,R){var Q=L.getCellByPosition({row:P,column:O},true);jasmine.fireMouseEvent(Q,N,K,R,M)}function F(K,M,O,N,L){var P=K.getCellByPosition({row:O,column:N},true);jasmine.fireKeyEvent(P,M,L)}it("should work",function(){G=Ext.define(null,{extend:"Ext.data.Model",fields:["id","text",{name:"value",type:"int"}]});E=Ext.define(null,{extend:"Ext.form.field.Picker",createPicker:function(){var T=this;R=new Ext.grid.plugin.CellEditing();K=new Ext.grid.Panel({store:new Ext.data.Store({fields:[{type:"int",name:"a"},"b"],data:[{a:123,b:"123 Text"},{a:456,b:"456 Text"},{a:789,b:"789 Text"}]}),floating:true,width:100,plugins:R,columns:[{text:"Value",width:70,editor:{xtype:"numberfield"},dataIndex:"a",resizable:false},{text:"Description",dataIndex:"b",resizable:false,flex:1,editor:{xtype:"textfield"}}],selType:"checkboxmodel",selModel:{checkOnly:true,allowDeselect:false},listeners:{selectionchange:function(V,U){if(U.length){T.setValue(U[0].get("a"))}}}});return K},setValue:function(T){var U=this.getPicker(),V=U.getStore(),W=V.findRecord("a",T);if(W!=null){U.getSelectionModel().select(W,false,true)}this.callParent(arguments)},getValue:function(){return parseInt(this.callParent())}});var K,R,O,L,P=new Ext.grid.plugin.CellEditing(),M,S,N=Ext.create("Ext.tree.Panel",{rowLines:true,columnLines:true,rootVisible:false,plugins:P,store:Ext.create("Ext.data.TreeStore",{autoLoad:false,model:G,root:{id:"root",children:[{id:1,text:"Node 1",value:123,children:[{id:11,text:"Child Of Node 1",leaf:true,value:456}]},{id:2,text:"Node 2",value:123,children:[{id:22,text:"Child Of Node 2",leaf:true,value:456}]},{id:3,text:"Node 3",value:123,children:[{id:33,text:"Child Of Node 3",leaf:true,value:456}]},{id:4,text:"Node 4",value:123,children:[{id:44,text:"Child Of Node 4",leaf:true,value:456}]},{id:5,text:"Node 5",value:123,children:[{id:55,text:"Child Of Node 5",leaf:true,value:456}]},{id:6,text:"Node 6",value:123,children:[{id:66,text:"Child Of Node 6",leaf:true,value:456}]},{id:7,text:"Node 7",value:123,children:[{id:77,text:"Child Of Node 7",leaf:true,value:456}]},{id:8,text:"Node 8",value:123,children:[{id:88,text:"Child Of Node 8",leaf:true,value:456}]},{id:9,text:"Node 9",value:123,children:[{id:99,text:"Child Of Node 9",leaf:true,value:456}]}]}}),columns:[{xtype:"treecolumn",dataIndex:"id",text:"ID",width:170},{text:"Second ",dataIndex:"text"},{text:"Value",flex:1,dataIndex:"value",editor:new E()},{text:"Any Column 2",width:150},{text:"Any Column 3",width:50}],bbar:[{xtype:"button",text:"To TOP ???",tooltip:"Go To SELECTED Record?"}]}),Q;I=new Ext.form.field.Text({renderTo:document.body,fieldLabel:"Test Field"});Ext.QuickTips.init();H=Ext.create("Ext.window.Window",{layout:"fit",autoShow:true,x:100,y:100,items:N,title:"List...",height:300,width:700,listeners:{boxready:function(){Q=N.getView();N.expandAll();Q.focusRow(0)}}});waitsFor(function(){return Q&&Ext.Element.getActiveElement()===Q.getCellByPosition({row:0,column:0},true)},"the cell to be focused");runs(function(){J(Q,"dblclick",0,2);M=P.getActiveEditor();expect(M!=null).toBe(true);S=M.field;expect(Ext.Element.getActiveElement()===S.inputEl.dom).toBe(true);Q.getNavigationModel().setPosition(0,3)});waitsFor(function(){return M.isVisible()===false},"the CellEditor to be visible");runs(function(){expect(Ext.Element.getActiveElement()===Q.getCellByPosition({row:0,column:3},true)).toBe(true);J(Q,"dblclick",0,2);expect(M.isVisible()).toBe(true);I.inputEl.dom.focus()});waitsFor(function(){return !M.isVisible()},"the CellEditor to be hidden");runs(function(){expect(Ext.Element.getActiveElement()===I.inputEl.dom).toBe(true);J(Q,"dblclick",0,2);expect(M.isVisible()).toBe(true)});waitsFor(function(){return S.hasFocus},"the CellEditor field to be focused");runs(function(){jasmine.fireKeyEvent(S.inputEl.dom,"keydown",Ext.event.Event.DOWN);expect(S.picker.isVisible()).toBe(true);I.inputEl.dom.focus()});waitsFor(function(){return Ext.Element.getActiveElement()===I.inputEl.dom&&!M.isVisible()&&!S.picker.isVisible()},"the CellEditor and its picker to be hidden and the external input field to be focused");runs(function(){expect(Ext.Element.getActiveElement()===I.inputEl.dom).toBe(true);J(Q,"dblclick",0,2);expect(M.isVisible()).toBe(true);jasmine.fireKeyEvent(S.inputEl.dom,"keydown",Ext.event.Event.DOWN);expect(S.picker.isVisible()).toBe(true);J(K.getView(),"dblclick",0,2);O=R.getActiveEditor();expect(O!=null).toBe(true);L=O.field;expect(Ext.Element.getActiveElement()===L.inputEl.dom);I.inputEl.dom.focus()});waitsFor(function(){return !M.isVisible()&&!S.picker.isVisible()&&!O.isVisible()},"the CellEditor, and its picker, and its picker's CellEditor to be hidden for the first time");runs(function(){expect(Ext.Element.getActiveElement()===I.inputEl.dom).toBe(true);J(Q,"dblclick",0,2);expect(M.isVisible()).toBe(true);jasmine.fireKeyEvent(S.inputEl.dom,"keydown",Ext.event.Event.DOWN);expect(S.picker.isVisible()).toBe(true);J(K.getView(),"dblclick",0,2);O=R.getActiveEditor();expect(O!=null).toBe(true);L=O.field;expect(Ext.Element.getActiveElement()===L.inputEl.dom);J(Q,"click",0,3)});waitsFor(function(){return !M.isVisible()&&!S.picker.isVisible()&&!O.isVisible()},"the CellEditor, and its picker, and its picker's CellEditor to be hidden for the second time");runs(function(){expect(Ext.Element.getActiveElement()===Q.getCellByPosition({row:0,column:3},true)).toBe(true)})})})})