describe("Ext.form.field.Spinner",function(){var B,A;beforeEach(function(){A=function(C){C=C||{};Ext.applyIf(C,{name:"test",onSpinUp:jasmine.createSpy(),onSpinDown:jasmine.createSpy()});B=new Ext.form.field.Spinner(C)}});afterEach(function(){if(B){B.destroy()}B=A=null});describe("defaults",function(){beforeEach(function(){A()});it("should have spinUpEnabled = true",function(){expect(B.spinUpEnabled).toBe(true)});it("should have spinDownEnabled = true",function(){expect(B.spinDownEnabled).toBe(true)});it("should have keyNavEnabled = true",function(){expect(B.keyNavEnabled).toBe(true)})});describe("rendering",function(){beforeEach(function(){A({renderTo:Ext.getBody()})});it("should create a 'spinUpEl' trigger button",function(){expect(B.spinUpEl).toBeDefined()});it("should give the spinUpEl class='x-form-spinner-up'",function(){expect(B.spinUpEl.hasCls("x-form-spinner-up")).toBe(true)});it("should create a 'spinDownEl' trigger button",function(){expect(B.spinDownEl).toBeDefined()});it("should give the spinDownEl class='x-form-spinner-down'",function(){expect(B.spinDownEl.hasCls("x-form-spinner-down")).toBe(true)})});describe("trigger click",function(){function C(D){jasmine.fireMouseEvent(D,"click")}it("should invoke the 'onSpinUp' method when clicking the up trigger",function(){A({renderTo:Ext.getBody()});C(B.spinUpEl);expect(B.onSpinUp).toHaveBeenCalled()});it("should not invoke the 'onSpinUp' method if spinUpEnabled = false",function(){A({renderTo:Ext.getBody(),spinUpEnabled:false});C(B.spinUpEl);expect(B.onSpinUp).not.toHaveBeenCalled()});it("should invoke the 'onSpinDown' method when clicking the down trigger",function(){A({renderTo:Ext.getBody()});C(B.spinDownEl);expect(B.onSpinDown).toHaveBeenCalled()});it("should not invoke the 'onSpinDown' method if spinDownEnabled = false",function(){A({renderTo:Ext.getBody(),spinDownEnabled:false});C(B.spinDownEl);expect(B.onSpinDown).not.toHaveBeenCalled()})});describe("setSpinUpEnabled",function(){describe("false",function(){beforeEach(function(){A({spinUpEnabled:true,renderTo:Ext.getBody()});B.setSpinUpEnabled(false)});it("should set the spinUpEnabled property to false",function(){expect(B.spinUpEnabled).toBe(false)});it("should add the 'x-form-spinner-up-disabled' class",function(){expect(B.spinUpEl.hasCls("x-form-spinner-up-disabled")).toBe(true)})});describe("true",function(){beforeEach(function(){A({spinUpEnabled:false,renderTo:Ext.getBody()});B.setSpinUpEnabled(true)});it("should set the spinUpEnabled property to true",function(){expect(B.spinUpEnabled).toBe(true)});it("should remove the 'x-form-spinner-up-disabled' class",function(){expect(B.spinUpEl.hasCls("x-form-spinner-up-disabled")).toBe(false)})})});describe("setSpinDownEnabled",function(){describe("false",function(){beforeEach(function(){A({spinDownEnabled:true,renderTo:Ext.getBody()});B.setSpinDownEnabled(false)});it("should set the spinDownEnabled property to false",function(){expect(B.spinDownEnabled).toBe(false)});it("should add the 'x-form-spinner-down-disabled' class",function(){expect(B.spinDownEl.hasCls("x-form-spinner-down-disabled")).toBe(true)})});describe("true",function(){beforeEach(function(){A({spinDownEnabled:false,renderTo:Ext.getBody()});B.setSpinDownEnabled(true)});it("should set the spinDownEnabled property to true",function(){expect(B.spinDownEnabled).toBe(true)});it("should remove the 'x-form-spinner-down-disabled' class",function(){expect(B.spinDownEl.hasCls("x-form-spinner-down-disabled")).toBe(false)})})});describe("key nav",function(){function C(D){jasmine.fireKeyEvent(B.inputEl,"keydown",D);jasmine.fireKeyEvent(B.inputEl,"keypress",D)}it("should call onSpinUp when the up arrow is pressed",function(){A({renderTo:Ext.getBody()});C(Ext.event.Event.UP);expect(B.onSpinUp).toHaveBeenCalled()});it("should not call onSpinUp if keyNavEnabled = false",function(){A({renderTo:Ext.getBody(),keyNavEnabled:false});C(Ext.event.Event.UP);expect(B.onSpinUp).not.toHaveBeenCalled()});it("should not call onSpinUp if spinUpEnabled = false",function(){A({renderTo:Ext.getBody(),spinUpEnabled:false});C(Ext.event.Event.UP);expect(B.onSpinUp).not.toHaveBeenCalled()});it("should call onSpinDown when the down arrow is pressed",function(){A({renderTo:Ext.getBody()});C(Ext.event.Event.DOWN);expect(B.onSpinDown).toHaveBeenCalled()});it("should not call onSpinDown if keyNavEnabled = false",function(){A({renderTo:Ext.getBody(),keyNavEnabled:false});C(Ext.event.Event.DOWN);expect(B.onSpinDown).not.toHaveBeenCalled()});it("should not call onSpinDown if spinDownEnabled = false",function(){A({renderTo:Ext.getBody(),spinDownEnabled:false});C(Ext.event.Event.DOWN);expect(B.onSpinDown).not.toHaveBeenCalled()})});describe("spin events",function(){describe("spinning up",function(){beforeEach(function(){A({renderTo:Ext.getBody()});spyOn(B,"fireEvent").andCallThrough();B.spinUp()});it("should fire the 'spin' event with the 'up' direction parameter",function(){expect(B.fireEvent).toHaveBeenCalledWith("spin",B,"up")});it("should fire the 'spinup' event",function(){expect(B.fireEvent).toHaveBeenCalledWith("spinup",B)})});describe("spinning down",function(){beforeEach(function(){A({renderTo:Ext.getBody()});spyOn(B,"fireEvent").andCallThrough();B.spinDown()});it("should fire the 'spin' event with the 'down' direction parameter",function(){expect(B.fireEvent).toHaveBeenCalledWith("spin",B,"down")});it("should fire the 'spindown' event",function(){expect(B.fireEvent).toHaveBeenCalledWith("spindown",B)})})})})