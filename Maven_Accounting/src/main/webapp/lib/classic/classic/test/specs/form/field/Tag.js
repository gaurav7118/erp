describe("Ext.form.field.Tag",function(){var K,F,Q,R=Ext.isIE9||Ext.isIE10?xdescribe:describe;var H=Ext.define(null,{extend:"Ext.data.Model",fields:["display","value"]});function B(T,S){K.inputEl.dom.value=T;K.onFieldMutation({type:"change",getKey:function(){return S?Ext.event.Event.DELETE:0},isSpecialKey:function(){return !!S},DELETE:Ext.event.Event.DELETE,BACKSPACE:Ext.event.Event.BACKSPACE})}function P(T,S,U){K.inputEl.dom.focus;jasmine.fireKeyEvent(K.inputEl.dom,"keydown",T,S,U)}function L(U,T){var S=I(U);if(T){S=Ext.fly(S).down(K.tagItemCloseSelector,true)}jasmine.fireMouseEvent(S,"click")}function O(U){var T=[],S;for(S=1;S<=U;++S){T.push({display:"Item"+S,value:S})}return T}function G(S,T){if(!S){S=20}if(Ext.isNumber(S)){S=O(S)}return new Ext.data.Store({model:H,data:S,storeId:T})}function C(S,T){if(T!==null){F=T||G()}K=new Ext.form.field.Tag(Ext.apply({store:F,renderTo:Ext.getBody(),displayField:"display",valueField:"value",queryMode:"local"},S))}function A(S,T){C(S,T);M()}function D(S){var T=K.getEl().query(K.tagItemSelector);expect(K.getValue()).toEqual(S);expect(T.length).toBe(S.length);Ext.Array.forEach(S,function(V,U){expect(N(T[U]).get(K.valueField)).toBe(V)})}function N(S){var T=parseInt(S.getAttribute("data-recordId"),10);return K.store.getByInternalId(T)}function I(X){var U=K.getEl().query(K.tagItemSelector),T=U.length,S,V,W;for(V=0;V<T;++V){S=U[V];W=N(S);if(W.get(K.valueField)===X){return S}}}function J(U,S,T){T=T||1;S=S||[];expect(Q.callCount).toBe(T);expect(Q.mostRecentCall.args[1]).toEqual(U);expect(Q.mostRecentCall.args[2]).toEqual(S)}function M(){Q=jasmine.createSpy();K.on("change",Q)}function E(T){K.expand();var S=K.getPicker().getNode(T);jasmine.fireMouseEvent(S,"click")}afterEach(function(){K=F=Ext.destroy(K,F)});describe("the store",function(){it("should be able to be created without a store",function(){C(null,null)});it("should accept a store instance",function(){var S=G();C(null,S);expect(K.getStore()).toBe(S)});it("should accept a store config",function(){C({store:{model:H,data:[{}]}},null);expect(K.getStore().getCount()).toBe(1);F=K.getStore()});it("should accept a store id",function(){F=G(1,"foo");C({store:"foo"},null);expect(K.getStore()).toBe(F)})});describe("setting values",function(){describe("configuring with a value",function(){it("should return an empty array if no value is configured",function(){C();D([])});it("should return an empty array if value is configured as null",function(){C({value:null});D([])});it("should accept a single value",function(){C({value:3});D([3])});it("should accept an array of values",function(){C({value:[2,5,11]});D([2,5,11])});it("should accept a single record",function(){var S=G();C({value:S.getAt(9)},S);D([10])});it("should accept an array of records",function(){var S=G();C({value:[S.getAt(4),S.getAt(8),S.getAt(13)]},S);D([5,9,14])});it("should retain the order",function(){C({value:[10,6,8,7,4,5]});D([10,6,8,7,4,5])})});describe("viewmodel",function(){it("should be able to set the value via the viewmodel",function(){var S=new Ext.app.ViewModel({data:{value:[1,2]}});C({viewModel:S,bind:"{value}"});S.notify();D([1,2])})});describe("setValue",function(){it("should be empty when setting to null",function(){A();K.setValue(null);D([]);expect(Q).not.toHaveBeenCalled()});it("should clear a value when setting null",function(){A({value:3});K.setValue(null);D([]);J([],[3])});it("should accept a single value",function(){A();K.setValue(3);D([3]);J([3])});it("should accept an array of values",function(){A();K.setValue([2,5,11]);D([2,5,11]);J([2,5,11])});it("should accept a single record",function(){var S=G();A(null,S);K.setValue(S.getAt(9));D([10]);J([10])});it("should accept an array of records",function(){var S=G();A(null,S);K.setValue([S.getAt(4),S.getAt(8),S.getAt(13)]);D([5,9,14]);J([5,9,14])});it("should retain the order",function(){A();K.setValue([10,6,8,7,4,5]);D([10,6,8,7,4,5]);J([10,6,8,7,4,5])});it("should write over existing values",function(){A({value:[1,3,5,7]});K.setValue([2,4,6,8]);D([2,4,6,8]);J([2,4,6,8],[1,3,5,7])})});describe("addValue",function(){it("should be able to add a value",function(){A();K.addValue(1);D([1]);J([1])});it("should be able to add an array of values",function(){A();K.addValue([3,6,7]);D([3,6,7]);J([3,6,7])});it("should accept a single record",function(){A();K.addValue(F.getAt(15));D([16]);J([16])});it("should accept an array of records",function(){A();K.addValue([F.getAt(1),F.getAt(5)]);D([2,6]);J([2,6])});it("should append to the existing values",function(){A({value:[7,4,12]});K.addValue([3]);D([7,4,12,3]);J([7,4,12,3],[7,4,12])});it("should leave existing values in place",function(){A({value:[7,4,12]});K.addValue([7]);D([7,4,12]);expect(Q).not.toHaveBeenCalled()});it("should only append non-existent values",function(){A({value:[7,4,12]});K.addValue([7,3]);D([7,4,12,3]);J([7,4,12,3],[7,4,12])})});describe("removeValue",function(){it("should be able to remove a value",function(){A({value:[1]});K.removeValue(1);D([]);J([],[1])});it("should be able to remove an array of values",function(){A({value:[3,6,7]});K.removeValue([3,6,7]);D([]);J([],[3,6,7])});it("should accept a single record",function(){A({value:[16]});K.removeValue(F.getAt(15));D([]);J([],[16])});it("should accept an array of records",function(){A({value:[2,6]});K.removeValue([F.getAt(1),F.getAt(5)]);D([]);J([],[2,6])});it("should ignore not selected values",function(){A({value:[18,3,14]});K.removeValue(1);D([18,3,14]);expect(Q).not.toHaveBeenCalled()})});describe("list selection",function(){var S;beforeEach(function(){C();S=K.pickerSelectionModel});afterEach(function(){S=null});describe("changing value with the list collapsed",function(){it("should have the value selected and not fire a change event on expand",function(){K.setValue([1,3,5]);M();K.expand();expect(Q).not.toHaveBeenCalled();expect(S.isSelected(F.getAt(0))).toBe(true);expect(S.isSelected(F.getAt(2))).toBe(true);expect(S.isSelected(F.getAt(4))).toBe(true)})});describe("changing the value with the list expanded",function(){it("should select records when setting a value",function(){K.expand();K.setValue([1,10,13]);expect(S.isSelected(F.getAt(0))).toBe(true);expect(S.isSelected(F.getAt(9))).toBe(true);expect(S.isSelected(F.getAt(12))).toBe(true)});it("should deselect records when unsetting a value",function(){K.setValue([1,10,13]);K.expand();K.setValue([10]);expect(S.isSelected(F.getAt(0))).toBe(false);expect(S.isSelected(F.getAt(9))).toBe(true);expect(S.isSelected(F.getAt(12))).toBe(false)})});describe("clicking list items",function(){it("should add a value when clicking an unselected item and fire change for each item",function(){M();K.expand();expect(Q).not.toHaveBeenCalled();E(F.getAt(2));J([3],[],1);E(4);J([3,5],[3],2);E(11);J([3,5,12],[3,5],3)});it("should remove a value when clicking a selected item and fire change for each item",function(){K.setValue([1,2,3,4,5]);M();K.expand();expect(Q).not.toHaveBeenCalled();E(F.getAt(2));J([1,2,4,5],[1,2,3,4,5],1);E(F.getAt(0));J([2,4,5],[1,2,4,5],2);E(F.getAt(4));J([2,4],[2,4,5],3)})})})});describe("tags",function(){function T(U){expect(I(U)).toHaveCls(K.tagSelectedCls)}function S(U){expect(I(U)).not.toHaveCls(K.tagSelectedCls)}describe("rendering",function(){describe("tag label",function(){function U(Y,X){var W=I(Y),V="."+K.tagItemTextCls;expect(Ext.fly(W).down(V,true)).hasHTML(X)}it("should use the the displayField by default",function(){C({value:[1,4,6]});U(1,"Item1");U(4,"Item4");U(6,"Item6")});it("should htmlEncode by default",function(){F=new Ext.data.Store({model:H,data:[{display:"Foo<div></div>Bar",value:1}]});C({value:[1]},F);U(1,"Foo&lt;div&gt;&lt;/div&gt;Bar")});it("should accept a custom tpl",function(){C({value:[1],labelTpl:"Prefix{display}{value}"});U(1,"PrefixItem11")});it("should encode a custom tpl",function(){F=new Ext.data.Store({model:H,data:[{display:"Foo<div></div>Bar",value:1}]});C({value:[1],labelTpl:"Prefix{display}{value}"},F);U(1,"PrefixFoo&lt;div&gt;&lt;/div&gt;Bar1")})});describe("tag tip",function(){function U(X,V){var W=I(X).getAttribute("data-qtip")||"";expect(W).toBe(V)}it("should default to nothing",function(){C({value:[1,4,6]});U(1,"");U(4,"");U(6,"")});it("should accept a tpl",function(){C({value:[1],tipTpl:"Prefix{display}{value}"});U(1,"PrefixItem11")});it("should encode a tpl",function(){F=new Ext.data.Store({model:H,data:[{display:"Foo<div></div>Bar",value:1}]});C({value:[1],tipTpl:"Prefix{display}{value}"},F);U(1,"PrefixFoo<div></div>Bar1")})})});describe("key handling",function(){var U=Ext.event.Event;beforeEach(function(){A({value:[6,4,10,13,2]})});R("from the input",function(){it("should remove a tag when backspace is pressed and the field value is empty",function(){P(U.BACKSPACE);D([6,4,10,13]);J([6,4,10,13],[6,4,10,13,2])});it("should not remove the tag when backspace is pressed and there is text in the field",function(){var V=K.inputEl.dom;V.value="asdf";K.focus([4,4]);P(U.BACKSPACE);D([6,4,10,13,2]);expect(Q).not.toHaveBeenCalled()});it("should remove a tag when delete is pressed and the field value is empty",function(){P(U.DELETE);D([6,4,10,13]);J([6,4,10,13],[6,4,10,13,2])});it("should not remove the tag when delete is pressed and there is text in the field",function(){var V=K.inputEl.dom;V.value="asdf";K.focus([4,4]);P(U.DELETE);D([6,4,10,13,2]);expect(Q).not.toHaveBeenCalled()});it("should select the right most tag when pressing left and the field value is empty",function(){P(U.LEFT);T(2)})});describe("navigation of tags",function(){beforeEach(function(){P(U.LEFT)});it("should move to the left when using the left key",function(){P(U.LEFT);S(2);T(13);P(U.LEFT);S(13);T(10)});it("should not wrap left",function(){for(var V=0;V<=20;++V){P(U.LEFT)}T(6)});it("should keep selections when using the shift key",function(){T(2);S(13);S(10);S(4);S(6);P(U.LEFT,true);T(2);T(13);S(10);S(4);S(6);P(U.LEFT,true);T(2);T(13);T(10);S(4);S(6);P(U.LEFT,true);T(2);T(13);T(10);T(4);S(6);P(U.LEFT,true);T(2);T(13);T(10);T(4);T(6)});it("should move to the right when using the right key",function(){P(U.LEFT);P(U.LEFT);P(U.LEFT);P(U.LEFT);P(U.LEFT);T(6);P(U.RIGHT);S(6);T(4);P(U.RIGHT);S(4);T(10)});it("shouldnot keep selections when going off the right edge",function(){P(U.LEFT);T(13);P(U.RIGHT);S(13);T(2);P(U.RIGHT);S(2);S(6)});it("should keep selections when using the shift key",function(){P(U.LEFT);P(U.LEFT);P(U.LEFT);P(U.LEFT);P(U.LEFT);S(2);S(13);S(10);S(4);T(6);P(U.RIGHT,true);S(2);S(13);S(10);T(4);T(6);P(U.RIGHT,true);S(2);S(13);T(10);T(4);T(6);P(U.RIGHT,true);S(2);T(13);T(10);T(4);T(6);P(U.RIGHT,true);T(2);T(13);T(10);T(4);T(6)});it("should select all when pressing ctrl+A",function(){P(U.A,false,true);T(6);T(4);T(10);T(13);T(2)})});describe("modifying tags",function(){beforeEach(function(){P(U.LEFT)});it("should remove the selected item when pressing backspace",function(){P(U.LEFT);P(U.LEFT);P(U.BACKSPACE);D([6,4,13,2]);J([6,4,13,2],[6,4,10,13,2])});it("should remove the selected item when pressing delete",function(){P(U.LEFT);P(U.LEFT);P(U.DELETE);D([6,4,13,2]);J([6,4,13,2],[6,4,10,13,2])});it("should select the previous item after deleting",function(){P(U.DELETE);D([6,4,10,13]);J([6,4,10,13],[6,4,10,13,2]);T(13);P(U.DELETE);D([6,4,10]);J([6,4,10],[6,4,10,13],2);T(10)});it("should select the last item when deleting the first",function(){P(U.LEFT);P(U.LEFT);P(U.LEFT);P(U.LEFT);P(U.DELETE);D([4,10,13,2]);J([4,10,13,2],[6,4,10,13,2]);T(2)});it("should remove all selected items",function(){P(U.LEFT,true);P(U.LEFT,true);P(U.DELETE);D([6,4]);J([6,4],[6,4,10,13,2])});it("should be able to remove all items",function(){P(U.A,false,true);P(U.DELETE);D([]);J([],[6,4,10,13,2])})})});describe("mouse interaction",function(){beforeEach(function(){A({value:[6,4,10,13,2]})});it("should select a tag when clicking",function(){L(4);P(Ext.event.Event.DELETE);D([6,10,13,2]);J([6,10,13,2],[6,4,10,13,2])});describe("clicking the close icon",function(){it("should remove an item",function(){L(4,true);D([6,10,13,2]);J([6,10,13,2],[6,4,10,13,2]);L(13,true);D([6,10,2]);J([6,10,2],[6,10,13,2],2)});it("should remove an item when used as an editor",function(){var V,U;K=F=Ext.destroy(K,F);C({store:{model:H,data:O(10)},displayField:"display",valueField:"display",queryMode:"local"});F=new Ext.data.Store({model:H,data:O(10)});V=Ext.widget("grid",{title:"Simpsons",store:F,columns:[{dataIndex:"value"},{dataIndex:"display",width:150,editor:K}],selModel:"cellmodel",plugins:{ptype:"cellediting",clicksToEdit:1},height:200,width:500,renderTo:Ext.getBody()});V.editingPlugin.startEdit(F.getAt(4),V.columns[1]);U=K.getEl().query(K.tagItemSelector)[0];U=Ext.fly(U).down(K.tagItemCloseSelector,true);jasmine.fireMouseEvent(U,"click");D([]);V=Ext.destroy(V)})})})});describe("pinList",function(){it("should keep the list open when selecting from the list with pinList: true",function(){C({pinList:true});K.expand();K.getPicker().select(0);expect(K.isExpanded).toBe(true)});it("should collapse the list when selecting from the list with pinList: false",function(){C({pinList:false});K.expand();K.getPicker().select(0);expect(K.isExpanded).toBe(false)})});describe("triggerOnClick",function(){describe("with triggerOnClick: true",function(){it("should not expand when clicking on an item",function(){C({triggerOnClick:true,value:[1]});L(1);expect(K.isExpanded).toBe(false)});it("should expand when clicking on an empty area",function(){C({triggerOnClick:true,value:[1]});jasmine.fireMouseEvent(K.inputEl,"click");expect(K.isExpanded).toBe(true)})});describe("with triggerOnClick: false",function(){it("should not expand when clicking on an item",function(){C({triggerOnClick:false,value:[1]});L(1);expect(K.isExpanded).toBe(false)});it("should not expand when clicking on an empty area",function(){C({triggerOnClick:false,value:[1]});jasmine.fireMouseEvent(K.inputEl,"click");expect(K.isExpanded).toBe(false)})})});describe("stacked",function(){describe("with stacked: true",function(){it("should put each item on a new line",function(){C({value:1,stacked:true});var S=K.getHeight();K.addValue(2);expect(K.getHeight()).toBeGreaterThan(S);S=K.getHeight();K.addValue(3);expect(K.getHeight()).toBeGreaterThan(S);S=K.getHeight();K.addValue(4);expect(K.getHeight()).toBeGreaterThan(S);S=K.getHeight();K.addValue(5);expect(K.getHeight()).toBeGreaterThan(S)});it("should decrease the height when removing items",function(){C({value:[1,2,3,4,5],stacked:true});var S=K.getHeight();K.removeValue(1);expect(K.getHeight()).toBeLessThan(S);S=K.getHeight();K.removeValue(2);expect(K.getHeight()).toBeLessThan(S);S=K.getHeight();K.removeValue(3);expect(K.getHeight()).toBeLessThan(S);S=K.getHeight();K.removeValue(4);expect(K.getHeight()).toBeLessThan(S)})});describe("with stacked: false",function(){it("should put multiple items per rows",function(){C({value:1,stacked:false});var S=K.getHeight();K.addValue([2,3]);expect(K.getHeight()).toBe(S)});it("should wrap when required",function(){C({value:1,stacked:false,width:400});var V=Ext.fly(I(1)).getWidth(),U=Math.floor((K.itemList.getWidth()-V)/V),S=K.getHeight(),T;for(T=0;T<U;++T){K.addValue(T+2)}expect(K.getHeight()).toBeGreaterThan(S)})})});describe("filterPickList",function(){it("should filter the list when configured with values",function(){C({filterPickList:true,value:[1,4,7]});K.expand();var V=K.valueStore,U=V.getAt(0),T=V.getAt(1),S=V.getAt(2);expect(F.getCount()).toBe(17);expect(F.indexOf(U)).toBe(-1);expect(F.indexOf(T)).toBe(-1);expect(F.indexOf(S)).toBe(-1)});it("should filter the list when setting the value",function(){C({filterPickList:true});K.expand();var S=F.getAt(16);expect(F.getCount()).toBe(20);K.setValue(17);expect(F.getCount()).toBe(19);expect(F.indexOf(S)).toBe(-1)});it("should filter the list when adding a value",function(){C({filterPickList:true,value:[1,4,7]});K.expand();var W=K.valueStore,V=W.getAt(0),T=W.getAt(1),S=W.getAt(2),U=F.getAt(0);expect(F.getCount()).toBe(17);expect(F.indexOf(V)).toBe(-1);expect(F.indexOf(T)).toBe(-1);expect(F.indexOf(S)).toBe(-1);K.addValue(2);expect(F.getCount()).toBe(16);expect(F.indexOf(U)).toBe(-1)});it("should filter the list when removing a value",function(){C({filterPickList:true,value:[1,4,7]});K.expand();var S=K.valueStore.getAt(0);expect(F.getCount()).toBe(17);expect(F.indexOf(S)).toBe(-1);K.removeValue(1);expect(F.getCount()).toBe(18);expect(F.indexOf(S)).toBe(0)});it("should preserve the scroll position of the bould list when selecting a value",function(){var S;C({filterPickList:true});K.expand();S=K.getPicker();S.scrollBy(0,1000);expect(S.getScrollY()).not.toBe(0);E(F.getAt(19));expect(S.getScrollY()).not.toBe(0)})});R("creating new values",function(){it("should add a new record when ENTER is pressed if createNewOnEnter",function(){C({createNewOnEnter:true,value:[1,4,7]});K.inputEl.dom.value="200";jasmine.fireKeyEvent(K.inputEl.dom,"keyup",Ext.event.Event.ENTER);var S=K.getValue();expect(S.length).toBe(4);expect(S[3]).toBe("200")});it("should add a new record on blur if createNewOnBlur",function(){C({createNewOnBlur:true,value:[1,4,7]});K.focus();jasmine.waitForFocus(K);runs(function(){K.inputEl.dom.value="200";Ext.getBody().createChild({tag:"input",type:"text"}).focus().remove()});jasmine.waitAWhile();runs(function(){var S=K.getValue();expect(S.length).toBe(4);expect(S[3]).toBe("200")})})});describe("allowBlank: false",function(){beforeEach(function(){C({allowBlank:false})});it("should be invalid when blank, and valid when a value is selected",function(){expect(K.isValid()).toBe(false);K.setValue(1);expect(K.isValid()).toBe(true)});it("should not show in the errors list",function(){E(0);expect(K.getErrors().length).toBe(0)})});describe("Erasing back to zero length input",function(){it("should not clear the value on erase back to zero length with no query",function(){var S;C({value:[1,4,7]});B("foo");B("",true);S=K.getValue();expect(S.length).toBe(3);expect(S[0]).toBe(1);expect(S[1]).toBe(4);expect(S[2]).toBe(7)});it("should not clear the value on erase back to zero length after a query",function(){var S;C({value:[1,4,7]});B("I");waitsFor(function(){return K.picker&&K.picker.isVisible()});runs(function(){B("",true);S=K.getValue();expect(S.length).toBe(3);expect(S[0]).toBe(1);expect(S[1]).toBe(4);expect(S[2]).toBe(7)})})});describe("sizing",function(){it("should publish the height correctly when the set width in the container will cause wrapping while collapsed",function(){C({renderTo:null,flex:1});var S=new Ext.panel.Panel({width:200,border:false,bodyStyle:"border: 0",collapsed:true,renderTo:Ext.getBody(),layout:"hbox",items:K});K.setValue([1,4,7,9]);S.expand(false);expect(S.getHeight()).toBe(K.getHeight());S.destroy()})});describe("picker position",function(){it("should realign the picker when adding a value causing the field to grow in height",function(){C({width:100});var S=K.getPicker();K.expand();var T=S.getBox().top;expect(T).toBe(K.triggerWrap.getBox().bottom);E(F.getAt(0));var U=S.getBox().top;expect(U).toBe(K.triggerWrap.getBox().bottom);expect(U).toBeGreaterThan(T)});it("should realign the picker when removing a value causing the field to shrink in height",function(){C({width:100,value:[1,2]});var S=K.getPicker();K.expand();var T=S.getBox().top;expect(T).toBe(K.triggerWrap.getBox().bottom);K.setValue([1]);var U=S.getBox().top;expect(U).toBe(K.triggerWrap.getBox().bottom);expect(U).toBeLessThan(T)})});describe("destruction",function(){it("should not throw an exception when destroying with an autoCreated store and filterPickList: true",function(){C({filterPickList:true,store:[[1,"Foo"],[2,"Bar"]]},null);E(K.getStore().getAt(0));expect(function(){K.destroy()}).not.toThrow()})});describe("emptyText",function(){var U,T,S;describe("elements and classes",function(){beforeEach(function(){C({emptyText:"little Roo",store:[[1,"Foo"],[2,"Bar"]]},null);U=K.emptyCls;T=K.emptyEl;S=K.emptyInputCls});afterEach(function(){U=T=S=null});it("should apply the emptyText when configured",function(){expect(K.emptyEl.dom.innerHTML).toBe("little Roo")});it("should hide the emptyText when an item is selected",function(){E(K.getStore().getAt(0));expect(T.getStyle("display")).toBe("none")});it("should add the emptyText classes to the appropriate elements",function(){expect(T.hasCls(S)).toBe(false);expect(T.hasCls(U)).toBe(true);expect(K.inputEl.hasCls(S)).toBe(true);expect(K.listWrapper.hasCls(U)).toBe(true)});describe("on value selection/deselection",function(){it("should remove the emptyText classes when selected",function(){E(K.getStore().getAt(0));expect(T.hasCls(S)).toBe(true);expect(T.hasCls(U)).toBe(false);expect(K.inputEl.hasCls(S)).toBe(false);expect(K.listWrapper.hasCls(U)).toBe(false)});it("should add the emptyText classes when emptied of selections",function(){E(K.getStore().getAt(0));K.removeValue(1);expect(T.hasCls(S)).toBe(false);expect(T.hasCls(U)).toBe(true);expect(K.inputEl.hasCls(S)).toBe(true);expect(K.listWrapper.hasCls(U)).toBe(true)})})});describe("placeholder",function(){var V="The Owl's Nest Farm";function W(a){var Z=K.inputEl,X=K.emptyEl,b=K.emptyInputCls,Y=K.emptyCls;if(!a){expect(Z.hasCls(S)).toBe(false);expect(Z.dom.value).toBe("")}else{expect(Z.hasCls(Y)).toBe(false);expect(X.dom.innerHTML).toBe(a)}}beforeEach(function(){C({emptyText:V})});it("should work",function(){W(V)});it("should remove the emptyText when a selection is made",function(){E(F.getAt(5));W()});it("should reapply the emptyText when all selections are removed",function(){E(F.getAt(5));E(F.getAt(2));W();L(6,true);L(3,true);W(V)})})});describe("grow",function(){describe("growMax",function(){it("should work",function(){var S;C({growMax:90,store:[[0,"Foo"],[1,"Bar"],[2,"Baz"],[3,"Cat"],[4,"Dog"],[5,"Owl"],[6,"Roo"],[7,"Utz"],[8,"Grr"],[9,"Pff"]],width:100},null);for(S=0;S<10;S++){E(S)}expect(K.getHeight()).toBeApprox(90,5)})})})})