describe("Ext.form.field.Text",function(){var B;function A(F){F=F||{};if(!F.name){F.name="test"}return B=new Ext.form.field.Text(F)}function C(F){B.render(F||Ext.getBody())}function D(F,G){jasmine.expectAriaAttr(B,F,G)}function E(F){F=Ext.apply({name:"fieldName",value:"fieldValue",tabIndex:5,size:12,renderTo:Ext.getBody()},F);spyOn(Ext.log,"warn");return A(F)}afterEach(function(){if(B){B.destroy();B=null}});it("should be registered as 'textfield' xtype",function(){B=Ext.create("Ext.form.field.Text",{name:"test"});expect(B instanceof Ext.form.field.Text).toBe(true);expect(Ext.getClass(B).xtype).toBe("textfield")});describe("defaults",function(){beforeEach(function(){A()});it("should have inputType = 'text'",function(){expect(B.inputType).toBe("text")});it("should have vtypeText = undefined",function(){expect(B.vtypeText).not.toBeDefined()});it("should have stripCharsRe = undefined",function(){expect(B.stripCharsRe).not.toBeDefined()});it("should have grow = falsy",function(){expect(B.grow).toBeFalsy()});it("should have growMin = 30",function(){expect(B.growMin).toBe(30)});it("should have growMax = 800",function(){expect(B.growMax).toBe(800)});it("should have vtype = undefined",function(){expect(B.vtype).not.toBeDefined()});it("should have maskRe = undefined",function(){expect(B.maskRe).not.toBeDefined()});it("should have disableKeyFilter = falsy",function(){expect(B.disableKeyFilter).toBeFalsy()});it("should have allowBlank = true",function(){expect(B.allowBlank).toBe(true)});it("should have minLength = 0",function(){expect(B.minLength).toBe(0)});it("should have maxLength = MAX_VALUE",function(){expect(B.maxLength).toBe(Number.MAX_VALUE)});it("should have enforceMaxLength = falsy",function(){expect(B.enforceMaxLength).toBeFalsy()});it("should have minLengthText = 'The minimum length for this field is {0}'",function(){expect(B.minLengthText).toBe("The minimum length for this field is {0}")});it("should have maxLengthText = 'The maximum length for this field is {0}'",function(){expect(B.maxLengthText).toBe("The maximum length for this field is {0}")});it("should have selectOnFocus = falsy",function(){expect(B.selectOnFocus).toBeFalsy()});it("should have blankText = 'This field is required'",function(){expect(B.blankText).toBe("This field is required")});it("should have validator = undefined",function(){expect(B.vtypeText).not.toBeDefined()});it("should have regex = undefined",function(){expect(B.regex).not.toBeDefined()});it("should have regexText = ''",function(){expect(B.regexText).toBe("")});it("should have emptyText = ''",function(){expect(B.emptyText).toBe("")});it("should have emptyCls = 'x-form-empty-field'",function(){expect(B.emptyCls).toBe("x-form-empty-field")});it("should have enableKeyEvents = falsy",function(){expect(B.enableKeyEvents).toBeFalsy()})});it("should encode the input value in the template",function(){A({renderTo:Ext.getBody(),value:'test "  <br/> test'});expect(B.inputEl.dom.value).toBe('test "  <br/> test')});it("should be able to set a numeric value",function(){A({renderTo:Ext.getBody()});B.setValue(100);expect(B.getValue()).toBe("100")});describe("rendering",function(){describe("should work",function(){beforeEach(function(){E({afterSubTpl:['<h1 id="{id}-afterSubEl" data-ref="afterSubEl">afterSubTpl</h1>'],childEls:["afterSubEl"]})});describe("afterSubEl",function(){it("should exist",function(){expect(B.afterSubEl.dom.tagName.toUpperCase()).toBe("H1")});it("should have proper id",function(){expect(B.afterSubEl.id).toBe(B.id+"-afterSubEl")})});describe("bodyEl",function(){it("should have the class 'x-form-item-body'",function(){expect(B.bodyEl.hasCls("x-form-item-body")).toBe(true)});it("should have the id '[id]-bodyEl'",function(){expect(B.bodyEl.dom.id).toEqual(B.id+"-bodyEl")})});describe("inputEl",function(){it("should be an input element",function(){expect(B.inputEl.dom.tagName.toLowerCase()).toEqual("input")});it("should have type = the inputType config of the element",function(){expect(B.inputEl.dom.type).toEqual(B.inputType)});it("should have the component's inputId as its id",function(){expect(B.inputEl.dom.id).toEqual(B.inputId)});it("should be cached by its dom id",function(){expect(Ext.cache[B.inputEl.dom.id]).not.toBe(undefined)});it("should be cached by its component inputId",function(){expect(Ext.cache[B.inputId]).not.toBe(undefined)});it("should have the 'fieldCls' config as a class",function(){expect(B.inputEl.hasCls(B.fieldCls)).toBe(true)});it("should have a class of 'x-form-[inputType]'",function(){expect(B.inputEl.hasCls("x-form-"+B.inputType)).toBe(true)});it("should have its name set to the 'name' config",function(){expect(B.inputEl.dom.name).toEqual("fieldName")});it("should have its value set to the 'value' config",function(){expect(B.inputEl.dom.value).toEqual("fieldValue")});it("should have autocomplete = 'off'",function(){expect(B.inputEl.dom.getAttribute("autocomplete")).toEqual("off")});it("should have tabindex set to the tabIndex config",function(){expect(""+B.inputEl.dom.getAttribute("tabIndex")).toEqual("5")});it("should set the size attribute",function(){expect(+B.inputEl.dom.getAttribute("size")).toEqual(1)})});describe("ariaEl",function(){it("should be inputEl",function(){expect(B.ariaEl).toBe(B.inputEl)})});xdescribe("sizing",function(){it("should have the size property affect size when shrink wrapping",function(){var F=B.getWidth();B.destroy();A({size:20,renderTo:Ext.getBody()});expect(B.getWidth()).toBeGreaterThan(F);B.destroy();A({size:5,renderTo:Ext.getBody()});expect(B.getWidth()).toBeLessThan(F)});it("should give preference to a calculated/configured width",function(){B.destroy();A({size:12,width:500,renderTo:Ext.getBody()});expect(B.getWidth()).toBe(500)})})});describe("ARIA attributes",function(){describe("in general",function(){it("should not render when !ariaRole",function(){E({ariaRole:undefined});expect(B.ariaEl.dom.hasAttribute("role")).toBe(false)});it("should render when ariaRole is defined",function(){E();D("role","textbox")})});describe("aria-hidden",function(){it("should be false when visible",function(){E();D("aria-hidden","false")});it("should be true when hidden",function(){E({hidden:true});D("aria-hidden","true")})});describe("aria-disabled",function(){it("should be false when enabled",function(){E();D("aria-disabled","false")});it("should be true when disabled",function(){E({disabled:true});D("aria-disabled","true")})});describe("aria-readonly",function(){it("should be false by default",function(){E();D("aria-readonly","false")});it("should be true when readOnly",function(){E({readOnly:true});D("aria-readonly","true")})});describe("aria-invalid",function(){it("should be false by default",function(){E();D("aria-invalid","false")})});describe("aria-label",function(){it("should not exist by default",function(){E();D("aria-label",null)});it("should be rendered when set",function(){E({ariaLabel:"foo"});D("aria-label","foo")})});describe("title",function(){it("should be set to formatText",function(){E({format:"foo",formatText:"{0} bar"});D("title","foo bar")})});describe("via config",function(){it("should set aria-foo",function(){E({ariaAttributes:{"aria-foo":"bar"}});D("aria-foo","bar")})})});describe("labelPad",function(){it("should set a default right padding",function(){A({fieldLabel:"Name",renderTo:Ext.getBody()});expect(B.labelEl.dom.style.paddingRight).toBe("5px")});it("should set the labelPad property on the field component",function(){A({fieldLabel:"Name",renderTo:Ext.getBody()});expect(B.labelPad).toBe(5)});it("should set a right padding when labelAlign === left",function(){A({fieldLabel:"Name",labelAlign:"left",labelPad:100,renderTo:Ext.getBody()});expect(B.labelEl.dom.style.paddingRight).toBe("100px")});it("should set a right padding when labelAlign === right",function(){A({fieldLabel:"Name",labelAlign:"right",labelPad:100,renderTo:Ext.getBody()});expect(B.labelEl.dom.style.paddingRight).toBe("100px")});it("should set a bottom padding when labelAlign === top",function(){A({fieldLabel:"Name",labelAlign:"top",labelPad:20,renderTo:Ext.getBody()});expect(B.labelEl.dom.firstChild.style.paddingBottom).toBe("20px")})})});describe("readOnly",function(){describe("readOnly config",function(){describe("readOnly: true",function(){it("should set the readOnly on the inputEl",function(){A({readOnly:true,renderTo:Ext.getBody()});expect(B.inputEl.dom.readOnly).toBe(true)});it("should have triggers hidden",function(){A({readOnly:true,triggers:{foo:{},bar:{}},renderTo:Ext.getBody()});expect(B.getTrigger("foo").hidden).toBe(true);expect(B.getTrigger("bar").hidden).toBe(true)});it("should not fire the writeablechange event",function(){var F=jasmine.createSpy();A({readOnly:true,renderTo:Ext.getBody(),listeners:{writeablechange:F}});expect(F).not.toHaveBeenCalled()});it("should set aria-readonly to true",function(){E({readOnly:true});D("aria-readonly","true")})});describe("readOnly: false",function(){it("should not set the readOnly on the inputEl",function(){A({readOnly:false,renderTo:Ext.getBody()});expect(B.inputEl.dom.readOnly).toBe(false)});it("should have triggers visible",function(){A({readOnly:false,triggers:{foo:{},bar:{}},renderTo:Ext.getBody()});expect(B.getTrigger("foo").hidden).toBe(false);expect(B.getTrigger("bar").hidden).toBe(false)});it("should not fire the writeablechange event",function(){var F=jasmine.createSpy();A({readOnly:false,renderTo:Ext.getBody(),listeners:{writeablechange:F}});expect(F).not.toHaveBeenCalled()});it("should set aria-readonly to false",function(){E({readOnly:false});D("aria-readonly","false")})})});describe("setReadOnly method",function(){describe("before render",function(){describe("readOnly: true",function(){it("should set readOnly on the inputEl when rendered",function(){A();B.setReadOnly(true);B.render(Ext.getBody());expect(B.inputEl.dom.readOnly).toBe(true)});it("should hide triggers when rendered",function(){A({triggers:{foo:{},bar:{}}});B.setReadOnly(true);B.render(Ext.getBody());expect(B.getTrigger("foo").hidden).toBe(true);expect(B.getTrigger("bar").hidden).toBe(true)});it("should fire the writeablechange event",function(){var F=jasmine.createSpy();A();B.on("writeablechange",F);B.setReadOnly(true);expect(F.callCount).toBe(1);expect(F.mostRecentCall.args[0]).toBe(B);expect(F.mostRecentCall.args[1]).toBe(true)});it("should set aria-readonly to true",function(){A();B.setReadOnly(true);B.render(Ext.getBody());D("aria-readonly","true")})});describe("readOnly: false",function(){it("should not set readOnly on the inputEl when rendered",function(){A({readOnly:true});B.setReadOnly(false);B.render(Ext.getBody());expect(B.inputEl.dom.readOnly).toBe(false)});it("should not hide triggers when rendered",function(){A({readOnly:true,triggers:{foo:{},bar:{}}});B.setReadOnly(false);B.render(Ext.getBody());expect(B.getTrigger("foo").hidden).toBe(false);expect(B.getTrigger("bar").hidden).toBe(false)});it("should fire the writeablechange event",function(){var F=jasmine.createSpy();A({readOnly:true});B.on("writeablechange",F);B.setReadOnly(false);expect(F.callCount).toBe(1);expect(F.mostRecentCall.args[0]).toBe(B);expect(F.mostRecentCall.args[1]).toBe(false)});it("should set aria-readonly to false",function(){A({readOnly:true});B.setReadOnly(false);B.render(Ext.getBody());D("aria-readonly","false")})})});describe("after render",function(){describe("readOnly: true",function(){it("should set readOnly on the inputEl",function(){A({renderTo:Ext.getBody()});B.setReadOnly(true);expect(B.inputEl.dom.readOnly).toBe(true)});it("should hide triggers when rendered",function(){A({renderTo:Ext.getBody(),triggers:{foo:{},bar:{}}});B.setReadOnly(true);expect(B.getTrigger("foo").hidden).toBe(true);expect(B.getTrigger("bar").hidden).toBe(true)});it("should fire the writeablechange event",function(){var F=jasmine.createSpy();A({renderTo:Ext.getBody()});B.on("writeablechange",F);B.setReadOnly(true);expect(F.callCount).toBe(1);expect(F.mostRecentCall.args[0]).toBe(B);expect(F.mostRecentCall.args[1]).toBe(true)});it("should set aria-readonly to true",function(){E();B.setReadOnly(true);D("aria-readonly","true")})});describe("readOnly: false",function(){it("should not set readOnly on the inputEl when rendered",function(){A({renderTo:Ext.getBody(),readOnly:true});B.setReadOnly(false);expect(B.inputEl.dom.readOnly).toBe(false)});it("should not hide triggers when rendered",function(){A({renderTo:Ext.getBody(),readOnly:true,triggers:{foo:{},bar:{}}});B.setReadOnly(false);expect(B.getTrigger("foo").hidden).toBe(false);expect(B.getTrigger("bar").hidden).toBe(false)});it("should fire the writeablechange event",function(){var F=jasmine.createSpy();A({renderTo:Ext.getBody(),readOnly:true});B.on("writeablechange",F);B.setReadOnly(false);expect(F.callCount).toBe(1);expect(F.mostRecentCall.args[0]).toBe(B);expect(F.mostRecentCall.args[1]).toBe(false)});it("should set aria-readonly to false",function(){E({readOnly:true});B.setReadOnly(false);D("aria-readonly","false")})})})});it("should not react to mutation events",function(){A({checkChangeBuffer:0,readOnly:true,renderTo:Ext.getBody()});spyOn(B,"checkChange");jasmine.fireKeyEvent(B.inputEl.dom,"keyup",65);waits(10);runs(function(){expect(B.checkChange.callCount).toBe(0)})})});describe("emptyText",function(){if("placeholder" in document.createElement("input")){it("should set the input's placeholder attribute",function(){A({emptyText:"empty",renderTo:Ext.getBody()});expect(B.inputEl.dom.placeholder).toEqual("empty")});it("should be able to be added with setEmptyText",function(){A({renderTo:Ext.getBody()});B.setEmptyText("Foo");expect(B.emptyText).toBe("Foo");expect(B.inputEl.dom.placeholder).toEqual("Foo")});it("should be able to be removed with setEmptyText",function(){A({emptyText:"Bar",renderTo:Ext.getBody()});B.setEmptyText("");expect(B.emptyText).toBe("");expect(B.inputEl.dom.hasAttribute("placeholder")).toBe(false)})}else{describe("when the value is empty",function(){beforeEach(function(){A({emptyText:"empty",renderTo:Ext.getBody()})});it("should set the input field's value to the emptyText",function(){expect(B.inputEl.dom.value).toEqual("empty")});it("should add the emptyCls to the input element",function(){expect(B.inputEl.hasCls(B.emptyCls)).toBe(true)});it("should return empty string from the value getters",function(){expect(B.getValue()).toEqual("");expect(B.getRawValue()).toEqual("")})});describe("when the value is not empty",function(){beforeEach(function(){A({emptyText:"empty",value:"value",renderTo:Ext.getBody()})});it("should set the input field's value to the specified value",function(){expect(B.inputEl.dom.value).toEqual("value")});it("should remove the emptyCls from the input element",function(){expect(B.inputEl.hasCls(B.emptyCls)).toBe(false)});it("should return the value from the value getters",function(){expect(B.getValue()).toEqual("value");expect(B.getRawValue()).toEqual("value")})});describe("when the value is equal to the placeholder/emptyText",function(){beforeEach(function(){A({emptyText:"value",value:"value",renderTo:Ext.getBody()})});it("should set the input field's value to the specified value",function(){expect(B.inputEl.dom.value).toEqual("value")});it("should remove the emptyCls from the input element",function(){expect(B.inputEl.hasCls(B.emptyCls)).toBe(false)});it("should return the value from the value getters",function(){expect(B.getValue()).toEqual("value");expect(B.getRawValue()).toEqual("value")})});describe("using setEmptyText",function(){describe("when value is empty",function(){it("should be able to add empty text",function(){A({renderTo:Ext.getBody()});B.setEmptyText("Foo");expect(B.emptyText).toBe("Foo");expect(B.inputEl.dom.value).toBe("Foo");expect(B.inputEl).toHaveCls(B.emptyCls)});it("should be able to remove empty text",function(){A({emptyText:"Bar",renderTo:Ext.getBody()});B.setEmptyText("");expect(B.emptyText).toBe("");expect(B.inputEl.dom.value).toBe("");expect(B.inputEl).not.toHaveCls(B.emptyCls)})});describe("when value is not empty",function(){it("should be able to add empty text",function(){A({value:"value",renderTo:Ext.getBody()});B.setEmptyText("Foo");expect(B.emptyText).toEqual("Foo");expect(B.inputEl.dom.value).toEqual("value");expect(B.inputEl.hasCls(B.emptyCls)).toBe(false);B.setValue();expect(B.inputEl.dom.value).toEqual("Foo");expect(B.inputEl.hasCls(B.emptyCls)).toBe(true)});it("should be able to remove empty text",function(){A({emptyText:"Bar",value:"value",renderTo:Ext.getBody()});B.setEmptyText();expect(B.emptyText).toBe("");expect(B.inputEl.dom.value).toEqual("value");B.setValue();expect(B.inputEl.dom.value).toEqual("");expect(B.inputEl.hasCls(B.emptyCls)).toBe(false)})})})}});describe("validation",function(){describe("minLength",function(){it("should ignore minLength when allowBlank is set",function(){A({minLength:5,allowBlank:true});expect(B.getErrors()).toEqual([])});it("should have an error if the value is less than the minLength",function(){A({minLength:5,allowBlank:false,value:"four"});expect(B.getErrors()).toContain("The minimum length for this field is 5")});it("should not have an error if the value length exceeds minLength",function(){A({minLength:5,allowBlank:false,value:"more than 5"});expect(B.getErrors()).toEqual([])})});describe("maxLength",function(){it("should have an error if the value is more than the maxLength",function(){A({maxLength:5,value:"more than 5"});expect(B.getErrors()).toContain("The maximum length for this field is 5")});it("should not have an error if the value length is less than the maxLength",function(){A({maxLength:5,value:"foo"});expect(B.getErrors()).toEqual([])});it("should set the maxlength attribute when enforceMaxLength is used",function(){A({maxLength:5,enforceMaxLength:true,renderTo:Ext.getBody()});expect(B.inputEl.dom.maxLength).toEqual(5)});it("should ignore enforceMaxLength if the max is the default",function(){A({enforceMaxLength:true,renderTo:Ext.getBody()});var G=document.createElement("input"),F;G.type="text";F=G.maxLength;G=null;expect(B.inputEl.dom.maxLength).toEqual(F)})});describe("allowBlank",function(){it("should have no errors if allowBlank is true and the field is empty",function(){A();expect(B.getErrors()).toEqual([])});it("should have no errors if allowBlank is false and the field is not empty",function(){A({allowBlank:false,value:"not empty"});expect(B.getErrors()).toEqual([])});it("should have an error if allowBlank is false and the field is empty",function(){A({allowBlank:false});expect(B.getErrors()).toContain("This field is required")});it("should set allowBlank to false when using allowOnlyWhitespace: false",function(){A({allowOnlyWhitespace:false});expect(B.allowBlank).toBe(false)});it("should not allow only whitespace when allowOnlyWhitespace: false",function(){A({allowOnlyWhitespace:false,value:"     "});expect(B.getErrors()).toContain("This field is required")})});describe("regex",function(){it("should have an error if the value doesn't match the regex",function(){A({value:"bar",regex:/foo/,regexText:"regex error"});expect(B.getErrors()).toContain("regex error")});it("should not have an error if the value matches the regex",function(){A({regex:/foo/,regexText:"foo"});expect(B.getErrors()).toEqual([])})});describe("validator",function(){it("should have an error if the value doesn't match the validator",function(){A({allowBlank:false,validator:function(F){return F=="foo"?true:"error message"},value:"bar"});expect(B.getErrors()).toContain("error message")});it("should not have an error if the value matches the validator",function(){A({allowBlank:false,validator:function(F){return F=="foo"?true:"error message"},value:"foo"});expect(B.getErrors()).toEqual([])})});describe("aria-invalid",function(){beforeEach(function(){A({renderTo:Ext.getBody(),allowBlank:false,value:"foo"})});it("should be false when valid",function(){D("aria-invalid","false")});it("should be true when invalid",function(){B.setValue("");D("aria-invalid","true")});it("should be false when invalid mark is cleared",function(){B.setValue("");B.setValue("bar");D("aria-invalid","false")})})});describe("isDirty",function(){it("should return true when the value is different than the original value",function(){A({renderTo:Ext.getBody(),value:"foo"});B.setValue("bar");expect(B.isDirty()).toBe(true)});it("should return false when the value is equal to the original value",function(){A({renderTo:Ext.getBody(),value:"foo"});B.setValue("bar");B.setValue("foo");expect(B.isDirty()).toBe(false)});it("should fire the dirtychange event",function(){A({renderTo:Ext.getBody(),value:"foo"});var F=jasmine.createSpy();B.on("dirtychange",F);B.setValue("bar");expect(F.calls.length).toEqual(1);expect(F.mostRecentCall.args).toEqual([B,true]);B.setValue("foo");expect(F.calls.length).toEqual(2);expect(F.mostRecentCall.args).toEqual([B,false])});it("should add the dirtyCls to the main element",function(){A({renderTo:Ext.getBody(),value:"foo",dirtyCls:"dirrrrrty"});expect(B.el.hasCls("dirrrrrty")).toBe(false);B.setValue("bar");expect(B.el.hasCls("dirrrrrty")).toBe(true)})});describe("enableKeyEvents",function(){describe("enableKeyEvents=false",function(){beforeEach(function(){A({enableKeyEvents:false,renderTo:Ext.getBody()})});it("should not fire the keydown event",function(){var F=jasmine.createSpy();B.on("keydown",F);jasmine.fireKeyEvent(B.inputEl.dom,"keydown");expect(F).not.toHaveBeenCalled()});it("should not fire the keypress event",function(){var F=jasmine.createSpy();B.on("keypress",F);jasmine.fireKeyEvent(B.inputEl.dom,"keypress");expect(F).not.toHaveBeenCalled()});it("should not fire the keyup event",function(){var F=jasmine.createSpy();B.on("keyup",F);jasmine.fireKeyEvent(B.inputEl.dom,"keyup");expect(F).not.toHaveBeenCalled()})});describe("enableKeyEvents=true",function(){beforeEach(function(){A({enableKeyEvents:true,renderTo:Ext.getBody()})});it("should not fire the keydown event",function(){var F=jasmine.createSpy();B.on("keydown",F);jasmine.fireKeyEvent(B.inputEl.dom,"keydown");expect(F).toHaveBeenCalled()});it("should not fire the keypress event",function(){var F=jasmine.createSpy();B.on("keypress",F);jasmine.fireKeyEvent(B.inputEl.dom,"keypress");expect(F).toHaveBeenCalled()});it("should not fire the keyup event",function(){var F=jasmine.createSpy();B.on("keyup",F);jasmine.fireKeyEvent(B.inputEl.dom,"keyup");expect(F).toHaveBeenCalled()})})});describe("disable/enable",function(){describe("disabled config",function(){beforeEach(function(){A({disabled:true,renderTo:Ext.getBody()})});it("should set the input element's disabled property to true",function(){expect(B.inputEl.dom.disabled).toBe(true)});it("should set aria-disabled to true",function(){D("aria-disabled","true")});if(Ext.isIE){it("should set the input element's unselectable property to 'on'",function(){expect(B.inputEl.dom.unselectable).toEqual("on")})}});describe("disable method",function(){beforeEach(function(){A({renderTo:Ext.getBody()});B.disable()});it("should set the input element's disabled property to true",function(){expect(B.inputEl.dom.disabled).toBe(true)});it("should set aria-disabled to true",function(){D("aria-disabled","true")});if(Ext.isIE){it("should set the input element's unselectable property to 'on'",function(){expect(B.inputEl.dom.unselectable).toEqual("on")})}});describe("enable method",function(){beforeEach(function(){A({disabled:true,renderTo:Ext.getBody()});B.enable()});it("should set the input element's disabled property to false",function(){expect(B.inputEl.dom.disabled).toBe(false)});it("should set aria-disabled to false",function(){D("aria-disabled","false")});if(Ext.isIE){it("should set the input element's unselectable property to ''",function(){expect(B.inputEl.dom.unselectable).toEqual("")})}})});describe("maskRe",function(){});describe("stripCharsRe",function(){beforeEach(function(){A({stripCharsRe:/[B9]/gi,renderTo:Ext.getBody()});B.setRawValue("ab9 cB9d")});it("should remove characters matching the RE from the value that is returned",function(){expect(B.getValue()).toEqual("a cd")});it("should remove all occurences that match RE from the value that is returned without specifying the global flag",function(){B.destroy();A({stripCharsRe:/[B9]/i,renderTo:Ext.getBody()});B.setRawValue("TB9hib9s iB9s testing tB9he mB9aB9sk witB9hb9ouB9tb9 tb9hb9e gB9 fB9B9lab9g");expect(B.getValue()).toBe("This is testing the mask without the g flag")});it("should update the raw field value with the stripped value",function(){expect(B.inputEl.dom.value).toEqual("ab9 cB9d");B.getValue();expect(B.inputEl.dom.value).toEqual("a cd")})});describe("selectText method",function(){function F(){var G=B.inputEl.dom;return G.setSelectionRange?G.value.substring(G.selectionStart,G.selectionEnd):document.selection.createRange().text}beforeEach(function(){A({renderTo:Ext.getBody()})});it("should select the entire value by default",function(){B.setValue("field value");B.selectText();expect(F()).toEqual("field value")});it("should select from the 'start' argument",function(){B.setValue("field value");B.selectText(3);expect(F()).toEqual("ld value")});it("should select to the 'end' argument",function(){B.setValue("field value");B.selectText(3,8);expect(F()).toEqual("ld va")})});describe("autoSize method and = configs",function(){describe("with an auto width",function(){beforeEach(function(){A({grow:true,growMin:30,growMax:100,renderTo:Ext.getBody()})});it("should auto height with an initial value",function(){B.destroy();A({grow:true,growMin:10,growMax:300,renderTo:Ext.getBody(),value:"abcdefghijk"});expect(B.getWidth()).toBeLessThan(300);expect(B.getWidth()).toBeGreaterThan(10)});it("should set the initial width to growMin",function(){expect(B.getWidth()).toBe(30)});it("should increase the width of the input as the value becomes longer",function(){B.setValue("value A");var G=B.getWidth();B.setValue("value AB");var F=B.getWidth();expect(F).toBeGreaterThan(G)});it("should decrease the width of the input as the value becomes shorter",function(){B.setValue("value AB");var G=B.getWidth();B.setValue("value A");var F=B.getWidth();expect(F).toBeLessThan(G)});it("should not increase the width above the growMax config",function(){B.setValue("a really long value that would go above the growMax config");var F=B.getWidth();expect(F).toBe(100)});it("should not decrease the width below the growMin config",function(){B.setValue(".");var F=B.getWidth();expect(F).toBe(30)});it("should work with markup",function(){B.setValue("<fake tag appears here");expect(B.getWidth()).toBeGreaterThan(30)})});describe("with a fixed width",function(){it("should have no affect on a configured wdith",function(){A({renderTo:Ext.getBody(),grow:true,growMin:50,width:150,growMax:600});B.setValue("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz");expect(B.getWidth()).toBe(150)});it("should have no affect on a calculated height",function(){A({grow:true,growMin:100,growMax:700,flex:1});var F=new Ext.container.Container({renderTo:Ext.getBody(),layout:"hbox",width:150,height:150,items:B});B.setValue("abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz");expect(B.getWidth()).toBe(150);F.destroy()})})});describe("fieldStyle",function(){function F(G){if(G!="red red red red"&&G!="#ff0000"&&G!=="rgb(255, 0, 0)"){expect(G).toBe("red")}}it("should set the style of the inputEl when rendered",function(){A({fieldStyle:"border-left-color:red;",renderTo:Ext.getBody()});var G=B.inputEl.getStyle("border-left-color");F(G)});describe("setFieldStyle method",function(){it("should apply the argument as the style of the rendered inputEl",function(){A({renderTo:Ext.getBody()});B.setFieldStyle("border-left-color:red;");var G=B.inputEl.getStyle("border-left-color");F(G)});it("should store the argument as the fieldStyle and apply it when rendered",function(){A({});B.setFieldStyle("border-left-color:red;");B.render(Ext.getBody());var G=B.inputEl.getStyle("border-left-color");F(G)})})});describe("label hiding",function(){describe("hideEmptyLabel",function(){it("should render a label when fieldLabel is empty",function(){A({renderTo:Ext.getBody(),hideEmptyLabel:true});expect(B.labelEl).not.toBeNull()});it("should render an empty label when set to false",function(){A({renderTo:Ext.getBody(),hideEmptyLabel:false});expect(B.labelEl).not.toBeNull()})});describe("hideLabel",function(){it("should render a label when true",function(){A({renderTo:Ext.getBody(),hideLabel:true,fieldLabel:"foo"});expect(B.labelEl).not.toBeNull()});it("should render a label when false",function(){A({renderTo:Ext.getBody(),hideLabel:false,fieldLabel:"foo"});expect(B.labelEl).not.toBeNull()})})});describe("setRawValue",function(){it("should not fire the change event when called",function(){var F=false;runs(function(){A();C();B.checkChangeBuffer=0;B.on("change",function(){F=true});B.setRawValue("foo")});waits(50);runs(function(){expect(F).toBe(false)})})});describe("getSubmitData",function(){it("should return the field's value",function(){A({name:"myname",value:"myvalue"});expect(B.getSubmitData()).toEqual({myname:"myvalue"})});it("should return empty string for an empty value",function(){A({name:"myname",value:""});expect(B.getSubmitData()).toEqual({myname:""})})});describe("getModelData",function(){it("should return the field's value",function(){A({name:"myname",value:"myvalue"});expect(B.getModelData()).toEqual({myname:"myvalue"})});it("should return empty string for an empty value",function(){A({name:"myname",value:""});expect(B.getModelData()).toEqual({myname:""})})});describe("binding",function(){var F;afterEach(function(){F=Ext.destroy(F)});describe("fields to data model",function(){var K,J,G,I;function H(L){Ext.Ajax.mockComplete({status:200,responseText:Ext.encode(L)})}beforeEach(function(){MockAjaxManager.addMethods();J=new Ext.data.Session({scheduler:{tickDelay:1000000}});Ext.data.Model.schema.setNamespace("spec");K=Ext.define("spec.User",{extend:Ext.data.Model,fields:[{name:"first",type:"string",convert:null},{name:"last",type:"string",convert:null},{name:"email",type:"string",convert:null},{name:"formatField",type:"string",convert:null},{name:"phone",type:"string",convert:null},{name:"color",type:"string",convert:null},{name:"description",type:"string",convert:null},{name:"initial",type:"string",convert:null}],validators:{last:{type:"length",min:1},description:{type:"length",min:10,max:200},color:{type:"inclusion",list:["red","white","blue"]},first:{type:"exclusion",list:["Ed"]},formatField:{type:"format",matcher:/123/},email:"email",phone:{type:"presence",message:"Phone number required"},initial:{type:"length",min:1}},doValidate:function(){}});F=Ext.widget({xtype:"panel",renderTo:Ext.getBody(),modelValidation:true,viewModel:{id:"rootVM",session:J},defaults:{xtype:"textfield"},items:[{itemId:"description",bind:"{theUser.description}"},{itemId:"last",bind:"{theUser.last}"},{itemId:"formatField",bind:"{theUser.formatField}"},{itemId:"color",bind:"{theUser.color}"},{itemId:"first",bind:"{theUser.first}"},{itemId:"email",bind:"{theUser.email}"},{itemId:"phone",bind:"{theUser.phone}"},{itemId:"initial",bind:"{theUser.initial}"},{itemId:"extraStuff",bind:"{theUser.extraStuff}"}]});G=F.getViewModel();I=G.getScheduler();G.linkTo("theUser",{reference:"User",id:42})});afterEach(function(){Ext.undefine("spec.User");Ext.destroy(G,J);J=I=G=null;expect(Ext.util.Scheduler.instances.length).toBe(0);MockAjaxManager.removeMethods();Ext.data.Model.schema.clear(true)});describe("delivering validation messages",function(){beforeEach(function(){H({id:42,description:"too short",color:"not a valid color",first:"Ed",formatField:"abc",email:"abc",initial:"X",extraStuff:42})});describe("for invalid fields",function(){var L=Ext.data.validator.Validator.all;it("should report description too short",function(){var M=F.child("#description");I.notify();var O=M.getErrors();expect(I.passes).toBe(1);expect(O.length).toBe(1);expect(O[0]).toBe("Length must be between 10 and 200");var N=J.getRecord("User",42);N.set("description","1234567890");I.notify();O=M.getErrors();expect(I.passes).toBe(2);expect(O.length).toBe(0)});it("should report missing last name",function(){var M=F.child("#last");I.notify();var O=M.getErrors();expect(I.passes).toBe(1);expect(O.length).toBe(1);expect(O[0]).toBe("Length must be at least 1");var N=J.getRecord("User",42);N.set("last","Spencer");I.notify();O=M.getErrors();expect(I.passes).toBe(2);expect(O.length).toBe(0)});it("should have the correct bad format message",function(){var M=F.child("#formatField");I.notify();var O=M.getErrors();expect(I.passes).toBe(1);expect(O.length).toBe(1);expect(O[0]).toBe(L.format.config.message);var N=J.getRecord("User",42);N.set("formatField","123");I.notify();O=M.getErrors();expect(I.passes).toBe(2);expect(O.length).toBe(0)});it("should have the correct non-inclusion message",function(){var M=F.child("#color");I.notify();var O=M.getErrors();expect(I.passes).toBe(1);expect(O.length).toBe(1);expect(O[0]).toBe(L.inclusion.config.message);var N=J.getRecord("User",42);N.set("color","red");I.notify();O=M.getErrors();expect(I.passes).toBe(2);expect(O.length).toBe(0)});it("should have the correct non-exclusion message",function(){var M=F.child("#first");I.notify();var O=M.getErrors();expect(I.passes).toBe(1);expect(O.length).toBe(1);expect(O[0]).toBe(L.exclusion.config.message);var N=J.getRecord("User",42);N.set("first","Edward");I.notify();O=M.getErrors();expect(I.passes).toBe(2);expect(O.length).toBe(0)});it("should have the correct bad email format message",function(){var M=F.child("#email");I.notify();var O=M.getErrors();expect(I.passes).toBe(1);expect(O.length).toBe(1);expect(O[0]).toBe(L.email.config.message);var N=J.getRecord("User",42);N.set("email","ed@sencha.com");I.notify();O=M.getErrors();expect(I.passes).toBe(2);expect(O.length).toBe(0)});it("should allow user-defined error messages",function(){var M=F.child("#phone");I.notify();var O=M.getErrors();expect(I.passes).toBe(1);expect(O.length).toBe(1);expect(O[0]).toBe("Phone number required");var N=J.getRecord("User",42);N.set("phone","555-1212");I.notify();O=M.getErrors();expect(I.passes).toBe(2);expect(O.length).toBe(0)})});describe("for valid fields",function(){it("should report initial as valid",function(){var L=F.child("#initial");I.notify();var N=L.getErrors();expect(I.passes).toBe(1);expect(N.length).toBe(0);var M=J.getRecord("User",42);M.set("initial","");I.notify();N=L.getErrors();expect(I.passes).toBe(2);expect(N.length).toBe(1);expect(N[0]).toBe("Length must be at least 1")})});describe("for undeclared fields",function(){it("should report extraStuff as undefined",function(){var L=F.child("#extraStuff");I.notify();var M=L.getErrors();expect(I.passes).toBe(1);expect(M.length).toBe(0)})})})});describe("use cases",function(){it("should bind value of field to panel title",function(){F=Ext.widget({xtype:"panel",renderTo:Ext.getBody(),viewModel:{formulas:{bar:function(J){return"Brave Sir "+J("foo")}}},referenceHolder:true,defaultListenerScope:true,wow:function(J){return J+"!!"},items:[{xtype:"panel",reference:"subPanel",bind:{title:"Hello {bar:this.wow}!"},items:[{xtype:"textfield",reference:"fld",bind:"{foo}"}]}]});var H=F.getViewModel(),G=F.lookupReference("subPanel"),I=F.lookupReference("fld");I.setValue("Robin");H.getScheduler().notify();expect(G.title).toBe("Hello Brave Sir Robin!!!")});it("should be disabled by binding to a checkbox checked state",function(){F=Ext.widget({xtype:"panel",renderTo:Ext.getBody(),viewModel:true,referenceHolder:true,items:[{xtype:"checkbox",reference:"chk"},{xtype:"textfield",reference:"textfld",bind:{disabled:"{!chk.checked}"}}]});var G=F.lookupReference("chk");var J=F.lookupReference("textfld");var H=F.getViewModel();var I=H.getScheduler();I.notify();expect(J.disabled).toBe(true);expect(I.passes).toBe(1);G.setValue(true);I.notify();expect(J.disabled).toBe(false);expect(I.passes).toBe(2)});it("should be disabled by binding to a button pressed state",function(){F=Ext.widget({xtype:"panel",renderTo:Ext.getBody(),viewModel:true,referenceHolder:true,items:[{xtype:"button",reference:"btn",enableToggle:true,publishes:["disabled"]},{xtype:"textfield",reference:"textfld",bind:{disabled:"{btn.pressed}"}}]});var I=F.lookupReference("btn");var J=F.lookupReference("textfld");var G=F.getViewModel();var H=G.getScheduler();H.notify();expect(J.disabled).toBe(false);expect(H.passes).toBe(1);I.setPressed();H.notify();expect(J.disabled).toBe(true);expect(H.passes).toBe(2)});it("should be able to publish its value for others to use",function(){F=Ext.widget({xtype:"panel",renderTo:Ext.getBody(),viewModel:true,referenceHolder:true,items:[{xtype:"textfield",reference:"textfld",publishes:["value"]},{xtype:"displayfield",reference:"display",bind:"Hello {textfld.value}!"}]});var K=F.lookupReference("display"),J=F.lookupReference("textfld"),G=F.getViewModel(),H=G.getScheduler();H.notify();var I=K.getValue();expect(I).toBe("Hello !");expect(H.passes).toBe(1);J.setValue("World");H.notify();I=K.getValue();expect(I).toBe("Hello World!");expect(H.passes).toBe(2)});it("should be able to publish value, rawValue and dirty ",function(){F=Ext.widget({xtype:"panel",renderTo:Ext.getBody(),viewModel:true,referenceHolder:true,items:[{xtype:"textfield",reference:"txt",publishes:["value","rawValue","dirty"]},{xtype:"displayfield",reference:"display",bind:"R: {txt.rawValue} / V: {txt.value} / D: {!txt.dirty}"}]});var K=F.lookupReference("display"),J=F.lookupReference("txt"),G=F.getViewModel(),H=G.getScheduler();H.notify();var I=K.getValue();expect(I).toBe("R:  / V:  / D: true");expect(H.passes).toBe(1);J.setValue("World");H.notify();I=K.getValue();expect(I).toBe("R: World / V: World / D: false");expect(H.passes).toBe(2)})})});describe("triggers",function(){var F=jasmine.createSpy(),K=jasmine.createSpy(),L={},M,I,J,G;function H(N){B=Ext.widget(Ext.merge({xtype:"textfield",renderTo:document.body,triggers:{foo:{cls:"foo-trigger",handler:F},bar:{cls:"bar-trigger",handler:K,scope:L}}},N));M=B.getTrigger("foo");I=B.getTrigger("bar");J=M.getEl();G=I.getEl()}it("should create Trigger instances",function(){H();expect(M instanceof Ext.form.trigger.Trigger).toBe(true);expect(I instanceof Ext.form.trigger.Trigger).toBe(true)});it("should render triggers",function(){H();expect(B.triggerWrap.selectNode(".foo-trigger",false)).toBe(J);expect(B.triggerWrap.selectNode(".bar-trigger",false)).toBe(G)});it("should call trigger handlers",function(){var N;H();jasmine.fireMouseEvent(J,"click");N=F.mostRecentCall.args;expect(N[0]).toBe(B);expect(N[1]).toBe(M);expect(N[2] instanceof Ext.event.Event).toBe(true);expect(F.mostRecentCall.object).toBe(B);jasmine.fireMouseEvent(G,"click");N=K.mostRecentCall.args;expect(N[0]).toBe(B);expect(N[1]).toBe(I);expect(N[2] instanceof Ext.event.Event).toBe(true)});it("should create a triggerEl composite element for 4.x compat",function(){H();expect(B.triggerEl instanceof Ext.CompositeElement).toBe(true);expect(B.triggerEl.elements[0]).toBe(J);expect(B.triggerEl.elements[1]).toBe(G)});it("should create a triggerCell composite element for 4.x compat",function(){H();expect(B.triggerCell).toBe(B.triggerEl)});it("should order the triggers by weight",function(){H({triggers:{foo:{weight:1}}});expect(G.next()).toBe(J)});it("should hide triggers on render if hideTrigger is true",function(){H({hideTrigger:true});expect(M.hidden).toBe(true);expect(I.hidden).toBe(true);expect(J.isStyle("display","none")).toBe(true);expect(G.isStyle("display","none")).toBe(true)});it("should hide/show all triggers after render using setHideTrigger",function(){H();B.setHideTrigger(true);expect(M.hidden).toBe(true);expect(I.hidden).toBe(true);expect(J.isStyle("display","none")).toBe(true);expect(G.isStyle("display","none")).toBe(true);B.setHideTrigger(false);expect(M.hidden).toBe(false);expect(I.hidden).toBe(false);expect(J.isStyle("display","none")).toBe(false);expect(G.isStyle("display","none")).toBe(false)})});describe("grow",function(){beforeEach(function(){Ext.util.CSS.createStyleSheet(".x-form-text { font:15px monospace;letter-spacing:0px; }","growStyleSheet")});afterEach(function(){Ext.util.CSS.removeStyleSheet("growStyleSheet")});function F(){var J=B.inputEl,G=J.getTextWidth(J.dom.value+B.growAppend),I=B.inputWrap.getBorderWidth("lr")+B.triggerWrap.getBorderWidth("lr"),H=0;Ext.Object.each(B.getTriggers(),function(L,K){H+=K.el.getWidth()});return G+I+H}it("should start out at growMin",function(){A({renderTo:document.body,grow:true,growMin:50});expect(B.getWidth()).toBe(50)});it("should initially render at the width of the text",function(){A({renderTo:document.body,value:"mmmmmmmmmm",grow:true,growMin:50});expect(B.getWidth()).toBe(F())});it("should initially render with a width of growMax if initial text width exceeds growMax",function(){A({renderTo:document.body,value:"mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm",grow:true,growMax:200});expect(B.getWidth()).toBe(200)});it("should grow and shrink",function(){A({renderTo:document.body,grow:true,triggers:{foo:{}},growMin:100,growMax:200});expect(B.getWidth()).toBe(100);B.setValue("mmmmmmmmmmmmmm");expect(B.getWidth()).toBe(F());B.setValue("mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm");expect(B.getWidth()).toBe(200);B.setValue("mmmmmmmmmmmmmm");expect(B.getWidth()).toBe(F());B.setValue("m");expect(B.getWidth()).toBe(100)})});describe("layout",function(){var G={1:"width",2:"height",3:"width and height"};function F(I,H){describe((I?("shrink wrap "+G[I]):"fixed width and height")+" autoFitErrors: "+H,function(){var N=(I&1),Q=(I&2),O=18,S=20,a=16,J=1,Y=105,c=5,P=[3,4],U=Y-c,d=1,Z=150,V=Q?22:100,K=23,b,M,W,T;function R(e){e=e||{};b=e.hideLabel;M=(e.labelAlign==="top");W=Z;T=V;if(!b&&!M){W+=Y}if(!b&&M){T+=K}if(e.msgTarget==="side"){W+=O}if(e.msgTarget==="under"){T+=S}B=Ext.create("Ext.form.field.Text",Ext.apply({renderTo:document.body,height:Q?null:T,width:N?null:W,autoFitErrors:H,fieldLabel:'<span style="display:inline-block;width:'+U+'px;background-color:red;box-sizing:border-box;">&nbsp;</span>',labelSeparator:""},e))}function L(e){B.setActiveError(e||"Error Message")}function X(e){describe(e+" label",function(){var f=(e==="left");(Ext.isIE8?xit:it)("should layout",function(){R({labelAlign:e});expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{x:0,y:0,w:Y,h:T},".x-form-item-label-inner":{x:f?0:Y-c-U,y:P,w:U},bodyEl:{x:Y,y:0,w:Z,h:V},inputEl:{x:Y+d,y:d,w:Z-(d*2),h:V-(d*2)}});expect(B.errorWrapEl).toBeNull()});(Ext.isIE8?xit:it)("should layout with side error",function(){R({labelAlign:e,msgTarget:"side"});L();expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{x:0,y:0,w:Y,h:T},".x-form-item-label-inner":{x:f?0:Y-c-U,y:P,w:U},bodyEl:{x:Y,y:0,w:Z,h:V},inputEl:{x:Y+d,y:d,w:Z-(d*2),h:V-(d*2)},errorWrapEl:{x:W-O,y:0,w:O,h:T},errorEl:{x:W-O+J,y:(V-a)/2,w:a,h:a}})});(Ext.isIE8?xit:it)("should layout with hidden side error",function(){R({labelAlign:e,msgTarget:"side"});var g=(H&&!N)?Z+O:Z;expect(B).toHaveLayout({el:{w:(N&&H)?W-O:W,h:T},labelEl:{x:0,y:0,w:Y,h:T},".x-form-item-label-inner":{x:f?0:Y-c-U,y:P,w:U},bodyEl:{x:Y,y:0,w:g,h:V},inputEl:{x:Y+d,y:d,w:g-(d*2),h:V-(d*2)},errorWrapEl:{x:H?0:W-O,y:H?0:0,w:H?0:O,h:H?0:T},errorEl:{x:H?0:W-O+J,y:H?0:(V-a)/2,w:H?0:a,h:H?0:a}})});(Ext.isIE10m&&!Q?xit:it)("should layout with under error",function(){R({labelAlign:e,msgTarget:"under"});L();expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{x:0,y:0,w:Y,h:V},".x-form-item-label-inner":{x:f?0:Y-c-U,y:P,w:U},bodyEl:{x:Y,y:0,w:Z,h:V},inputEl:{x:Y+d,y:d,w:Z-(d*2),h:V-(d*2)},errorWrapEl:{x:0,y:V,w:W,h:S},errorEl:{x:Y,y:V,w:Z,h:S}})});(Ext.isIE8?xit:it)("should layout with hidden label",function(){R({labelAlign:e,hideLabel:true});expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{xywh:"0 0 0 0"},bodyEl:{x:0,y:0,w:Z,h:V}});expect(B.errorWrapEl).toBeNull()});(Ext.isIE8?xit:it)("should layout with hidden label and side error",function(){R({labelAlign:e,hideLabel:true,msgTarget:"side"});L();expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{xywh:"0 0 0 0"},bodyEl:{x:0,y:0,w:Z,h:V},inputEl:{x:d,y:d,w:Z-(d*2),h:V-(d*2)},errorWrapEl:{x:Z,y:0,w:O,h:T},errorEl:{x:Z+J,y:(V-a)/2,w:a,h:a}})});(Ext.isIE8?xit:it)("should layout with hidden label and hidden side error",function(){R({labelAlign:e,hideLabel:true,msgTarget:"side"});var g=(H&&!N)?Z+O:Z;expect(B).toHaveLayout({el:{w:(N&&H)?W-O:W,h:T},labelEl:{xywh:"0 0 0 0"},bodyEl:{x:0,y:0,w:g,h:V},inputEl:{x:d,y:d,w:g-(d*2),h:V-(d*2)},errorWrapEl:{x:H?0:Z,y:H?0:0,w:H?0:O,h:H?0:T},errorEl:{x:H?0:Z+J,y:H?0:(V-a)/2,w:H?0:a,h:H?0:a}})});(Ext.isIE10m&&!Q?xit:it)("should layout with hidden label and under error",function(){R({labelAlign:e,hideLabel:true,msgTarget:"under"});L();expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{xywh:"0 0 0 0"},bodyEl:{x:0,y:0,w:Z,h:V},inputEl:{x:d,y:d,w:Z-(d*2),h:V-(d*2)},errorWrapEl:{x:0,y:V,w:W,h:S},errorEl:{x:0,y:V,w:W,h:S}})})})}X("left");X("right");(Ext.isIE10m&&!Q?xdescribe:describe)("top label",function(){it("should layout",function(){R({labelAlign:"top"});expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{x:0,y:0,w:W,h:K},".x-form-item-label-inner":{x:0,y:0,w:W,h:K},bodyEl:{x:0,y:K,w:Z,h:V},inputEl:{x:d,y:K+d,w:Z-(d*2),h:V-(d*2)}});expect(B.errorWrapEl).toBeNull()});it("should layout with side error",function(){R({labelAlign:"top",msgTarget:"side"});L();expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{x:0,y:0,w:W,h:K},".x-form-item-label-inner":{x:0,y:0,w:Z,h:K},bodyEl:{x:0,y:K,w:Z,h:V},inputEl:{x:d,y:K+d,w:Z-(d*2),h:V-(d*2)},errorWrapEl:{x:Z,y:K,w:O,h:V},errorEl:{x:Z+J,y:K+((V-a)/2),w:a,h:a}})});it("should layout with hidden side error",function(){R({labelAlign:"top",msgTarget:"side"});W=(N&&H)?W-O:W;var e=(H&&!N)?Z+O:Z;expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{x:0,y:0,w:W,h:K},".x-form-item-label-inner":{x:0,y:0,w:e,h:K},bodyEl:{x:0,y:K,w:e,h:V},inputEl:{x:d,y:K+d,w:e-(d*2),h:V-(d*2)},errorWrapEl:{x:H?0:Z,y:H?0:K,w:H?0:O,h:H?0:V},errorEl:{x:H?0:Z+J,y:H?0:K+((V-a)/2),w:H?0:a,h:H?0:a}})});it("should layout with under error",function(){R({labelAlign:"top",msgTarget:"under"});L();expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{x:0,y:0,w:W,h:K},".x-form-item-label-inner":{x:0,y:0,w:W,h:K},bodyEl:{x:0,y:K,w:Z,h:V},inputEl:{x:d,y:K+d,w:Z-(d*2),h:V-(d*2)},errorWrapEl:{x:0,y:K+V,w:W,h:S},errorEl:{x:0,y:K+V,w:W,h:S}})});it("should layout with hidden label",function(){R({labelAlign:"top",hideLabel:true});expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{xywh:"0 0 0 0"},bodyEl:{x:0,y:0,w:Z,h:V},inputEl:{x:d,y:d,w:Z-(d*2),h:V-(d*2)}});expect(B.errorWrapEl).toBeNull()});it("should layout with hidden label and side error",function(){R({labelAlign:"top",hideLabel:true,msgTarget:"side"});L();expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{xywh:"0 0 0 0"},bodyEl:{x:0,y:0,w:Z,h:V},inputEl:{x:d,y:d,w:Z-(d*2),h:V-(d*2)},errorWrapEl:{x:Z,y:0,w:O,h:T},errorEl:{x:Z+J,y:(V-a)/2,w:a,h:a}})});it("should layout with hidden label and hidden side error",function(){R({labelAlign:"top",hideLabel:true,msgTarget:"side"});var e=(H&&!N)?Z+O:Z;expect(B).toHaveLayout({el:{w:(N&&H)?W-O:W,h:T},labelEl:{xywh:"0 0 0 0"},bodyEl:{x:0,y:0,w:e,h:V},inputEl:{x:d,y:d,w:e-(d*2),h:V-(d*2)},errorWrapEl:{x:H?0:Z,y:H?0:0,w:H?0:O,h:H?0:T},errorEl:{x:H?0:Z+J,y:H?0:(V-a)/2,w:H?0:a,h:H?0:a}})});it("should layout with hidden label and under error",function(){R({labelAlign:"top",hideLabel:true,msgTarget:"under"});L();expect(B).toHaveLayout({el:{w:W,h:T},labelEl:{xywh:"0 0 0 0"},bodyEl:{x:0,y:0,w:Z,h:V},inputEl:{x:d,y:d,w:Z-(d*2),h:V-(d*2)},errorWrapEl:{x:0,y:V,w:W,h:S},errorEl:{x:0,y:V,w:W,h:S}})})})})}F(0,false);F(1,true);F(2,false);F(2,true);F(3,false);F(3,true);it("should work around the webkit min-width table-cell bug",function(){var I=Ext.widget({xtype:"textfield",renderTo:document.body});var H=I.el.offsetWidth;I.setWidth(50);expect(I.getWidth()).toBe(50);I.destroy()});it("should not stretch the triggerWrap height if the field height expands due to wrapping text in the label",function(){var H=Ext.widget({xtype:"textfield",renderTo:Ext.getBody(),fieldLabel:'<div style="width: 30px; height: 100px;"></div>'});expect(H.triggerWrap.getHeight()).toBe(22);expect(H.triggerWrap.getY()-H.bodyEl.getY()).toBe(48);H.destroy()})})})