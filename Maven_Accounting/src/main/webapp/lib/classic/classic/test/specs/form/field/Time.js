describe("Ext.form.field.Time",function(){var B,A;beforeEach(function(){A=function(D){D=D||{};Ext.applyIf(D,{name:"test",width:100});B=new Ext.form.field.Time(D)}});afterEach(function(){if(B){B.destroy()}B=A=null});function C(){var D=B.getTrigger("picker").getEl(),E=D.getXY();jasmine.fireMouseEvent(D.dom,"click",E[0],E[1])}it("should be registered with xtype 'timefield'",function(){B=Ext.create("Ext.form.field.Time",{name:"test"});expect(B instanceof Ext.form.field.Time).toBe(true);expect(Ext.getClass(B).xtype).toBe("timefield")});describe("initialization",function(){describe("initializing value as string",function(){it("should not mark component as dirty",function(){A({value:"11:00 AM"});expect(B.isDirty()).toBeFalsy()})})});describe("defaults",function(){beforeEach(function(){A()});it("should have triggerCls = 'x-form-time-trigger'",function(){expect(B.triggerCls).toEqual("x-form-time-trigger")});it("should have multiSelect = false",function(){expect(B.multiSelect).toBe(false)});it("should have delimiter = ', '",function(){expect(B.delimiter).toEqual(", ")});it("should have minValue = undefined",function(){expect(B.minValue).not.toBeDefined()});it("should have maxValue = undefined",function(){expect(B.maxValue).not.toBeDefined()});it("should have minText = 'The time in this field must be equal to or after {0}'",function(){expect(B.minText).toEqual("The time in this field must be equal to or after {0}")});it("should have maxText = 'The time in this field must be equal to or before {0}'",function(){expect(B.maxText).toEqual("The time in this field must be equal to or before {0}")});it("should have invalidText = '{0} is not a valid time'",function(){expect(B.invalidText).toEqual("{0} is not a valid time")});it("should have format = 'g:i A'",function(){expect(B.format).toEqual("g:i A")});it("should have altFormats = 'g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H|gi a|hi a|giA|hiA|gi A|hi A'",function(){expect(B.altFormats).toEqual("g:ia|g:iA|g:i a|g:i A|h:i|g:i|H:i|ga|ha|gA|h a|g a|g A|gi|hi|gia|hia|g|H|gi a|hi a|giA|hiA|gi A|hi A")});it("should have increment = 15",function(){expect(B.increment).toEqual(15)})});describe("rendering",function(){beforeEach(function(){A({renderTo:Ext.getBody()})});it("should give the trigger a class of 'x-form-time-trigger'",function(){expect(B.getTrigger("picker").el).toHaveCls("x-form-time-trigger")})});describe("trigger",function(){beforeEach(function(){A({renderTo:Ext.getBody()});C()});it("should open a Ext.picker.Time",function(){expect(B.picker instanceof Ext.picker.Time).toBe(true);expect(B.picker.hidden).toBe(false)});it("should clear the value when text which cannot be matched to a value is entered",function(){waits(1);runs(function(){expect(B.picker.highlightedItem).toBeDefined();B.setValue("ASAP");expect(B.getValue()).toBeNull();expect(B.getRawValue()).toBe("ASAP")})})});describe("setting values",function(){describe("parsing",function(){it("should parse a string value using the format config",function(){A({format:"g:iA",value:"8:32PM"});expect(B.getValue()).toEqualTime(20,32)});it("should parse a string value using the altFormats config",function(){A({format:"g:i.A",altFormats:"g.i a",value:"8.32 pm"});expect(B.getValue()).toEqualTime(20,32)});it("should parse a string value using the format config and snap to increment",function(){A({snapToIncrement:true,format:"g:iA",value:"8:32PM"});expect(B.getValue()).toEqualTime(20,30)});it("should parse a string value using the altFormats config and snap to increment",function(){A({snapToIncrement:true,format:"g:i.A",altFormats:"g.i a",value:"8.32 pm"});expect(B.getValue()).toEqualTime(20,30)})});describe("setValue",function(){it("should accept a date object",function(){A();B.setValue(new Date(2010,10,5,9,46));expect(B.getValue()).toEqualTime(9,46)});it("should accept an array of date objects",function(){A({multiSelect:true});B.setValue([new Date(2008,0,1,10,30),new Date(2008,0,1,23,15)]);expect(B.getValue()[0]).toEqualTime(10,30);expect(B.getValue()[1]).toEqualTime(23,15)});it("should accept a string value",function(){A();B.setValue("9:46 AM");expect(B.getValue()).toEqualTime(9,46)});it("should accept an array of string values",function(){A({multiSelect:true,value:["10:30AM","11:15PM"]});expect(B.value[0]).toEqualTime(10,30);expect(B.value[1]).toEqualTime(23,15)});it("should accept a date object and snap to increment",function(){A({snapToIncrement:true});B.setValue(new Date(2010,10,5,9,46));expect(B.getValue()).toEqualTime(9,45)});it("should accept a string value and snap to increment",function(){A({snapToIncrement:true});B.setValue("9:46 AM");expect(B.getValue()).toEqualTime(9,45)});it("should accept a null value",function(){A();B.setValue(null);expect(B.getValue()).toBeNull()});it("should set null if an invalid time string is passed",function(){A();B.setValue("6:::37");expect(B.getValue()).toBeNull()});it("should ignore the date part when setting the value",function(){A({minValue:"9:00 AM",maxValue:"5:00 PM"});var D=new Date();D.setHours(12,0);B.setValue(D);expect(B.isValid()).toBe(true)});it("should update the expanded dropdown's selection - multi select",function(){A({renderTo:Ext.getBody(),multiSelect:true});B.expand();waits(1);runs(function(){B.setValue([new Date(2008,0,1,0,0),new Date(2008,0,1,0,15)]);expect(B.picker.getSelectionModel().getSelection()[0]).toEqual(B.store.getAt(0));expect(B.picker.getSelectionModel().getSelection()[1]).toEqual(B.store.getAt(1))})});describe("selecting a value",function(){it("should be able to select a value when the current value is not in the store",function(){A({increment:15,format:"H:i",increment:15,allowBlank:false,value:"15:03",renderTo:document.body});B.expand();jasmine.fireMouseEvent(B.getPicker().getNode(B.store.getAt(0)),"click");expect(B.getValue()).toEqualTime(0,0)})});describe("inputEl",function(){it("should accept a model",function(){A({minValue:"6:00 AM",maxValue:"8:00 PM",renderTo:document.body});B.setValue(B.store.getAt(0));expect(B.inputEl.getValue()).toBe("6:00 AM")});it("should parse a string value to lookup a record in the store",function(){A({minValue:"6:00 AM",maxValue:"8:00 PM",renderTo:document.body});B.setValue("15");expect(B.inputEl.getValue()).toBe("3:00 PM")});it("should display same value given to setValue when no lookups in the store",function(){A({minValue:"6:00 AM",maxValue:"8:00 PM",renderTo:document.body});B.setValue("21");expect(B.inputEl.getValue()).toBe("21")})});describe("change event",function(){it("should not fire the change event when the value stays the same - single value",function(){var D=jasmine.createSpy();A({renderTo:Ext.getBody(),value:"10:00AM",listeners:{change:D}});B.setValue("10:00AM");expect(D).not.toHaveBeenCalled()});it("should fire the change event when the value changes - single value",function(){var D=jasmine.createSpy();A({value:"10:00AM",renderTo:Ext.getBody(),listeners:{change:D}});B.setValue("11:15PM");expect(D).toHaveBeenCalled();expect(D.mostRecentCall.args[0]).toBe(B);expect(D.mostRecentCall.args[1]).toEqualTime(23,15)});it("should not fire the change event when the value stays the same - multiple values",function(){var D=jasmine.createSpy();A({multiSelect:true,valueField:"val",value:["10:00AM","11:15PM"],renderTo:Ext.getBody(),listeners:{change:D}});B.setValue(["10:00AM","11:15PM"]);expect(D).not.toHaveBeenCalled()});it("should fire the change event when the value changes - multiple values",function(){var D=jasmine.createSpy();A({multiSelect:true,valueField:"val",value:["10:00AM","11:15PM"],renderTo:Ext.getBody(),listeners:{change:D}});B.setValue(["3:00PM","4:30PM"]);expect(D).toHaveBeenCalled();expect(D.mostRecentCall.args[0]).toBe(B);expect(D.mostRecentCall.args[2][0]).toEqualTime(10);expect(D.mostRecentCall.args[2][1]).toEqualTime(23,15);expect(D.mostRecentCall.args[1][0]).toEqualTime(15);expect(D.mostRecentCall.args[1][1]).toEqualTime(16,30)})})})});describe("submit value",function(){it("should use the format as the default",function(){A({value:new Date(2010,0,15,15,30),format:"H:i"});expect(B.getSubmitValue()).toBe("15:30")});it("should give precedence to submitFormat",function(){A({value:new Date(2010,0,15,15,45),submitFormat:"H:i"});expect(B.getSubmitValue()).toBe("15:45")});it("should still return null if the value isn't a valid date",function(){A({value:"wontparse",submitFormat:"H:i"});expect(B.getSubmitValue()).toBeNull()})});describe("getModelData",function(){it("should use the format as the default",function(){A({name:"myname",value:new Date(2010,0,15,15,45)});var D=B.getModelData();expect(D.myname).toEqualTime(15,45)});it("should return null if the value isn't a valid date",function(){A({name:"myname",value:"wontparse",submitFormat:"H:i"});expect(B.getModelData()).toEqual({myname:null})})});describe("minValue",function(){describe("minValue config",function(){it("should allow a string, parsed according to the format config",function(){A({format:"g:i.A",minValue:"8:30.AM"});expect(B.minValue).toEqualTime(8,30)});it("should allow times after it to pass validation",function(){A({minValue:"8:45 AM",value:"9:15 AM"});expect(B.getErrors().length).toEqual(0)});it("should cause times before it to fail validation",function(){A({minValue:"10:45 AM",value:"9:15 AM"});expect(B.getErrors().length).toEqual(1);expect(B.getErrors()[0]).toEqual("The time in this field must be equal to or after 10:45 AM")});it("should fall back to 12AM if the string cannot be parsed",function(){A({minValue:"foopy",value:"12:00 AM"});expect(B.getErrors().length).toEqual(0)});it("should allow a Date object",function(){A({minValue:new Date(2010,1,1,8,30)});expect(B.minValue).toEqualTime(8,30)});it("should be passed to the time picker object",function(){A({minValue:"8:45 AM"});B.expand();expect(B.getPicker().minValue).toEqualTime(8,45)})});describe("setMinValue method",function(){it("should allow a string, parsed according to the format config",function(){A({format:"g:i A"});B.setMinValue("1:15 PM");expect(B.minValue).toEqualTime(13,15)});it("should allow times after it to pass validation",function(){A({value:"9:15 AM"});B.setMinValue("7:45 AM");expect(B.getErrors().length).toEqual(0)});it("should cause times before it to fail validation",function(){A({value:"9:15 AM"});B.setMinValue("10:45 AM");expect(B.getErrors().length).toEqual(1);expect(B.getErrors()[0]).toEqual("The time in this field must be equal to or after 10:45 AM")});it("should fall back to 12AM if the string cannot be parsed",function(){A({value:"12:00 AM"});B.setMinValue("foopy");expect(B.getErrors().length).toEqual(0)});it("should allow a Date object",function(){A();B.setMinValue(new Date(2010,1,1,8,30));expect(B.minValue).toEqualTime(8,30)});it("should call the time picker's setMinValue method",function(){A();B.expand();var D=spyOn(B.getPicker(),"setMinValue");B.setMinValue("11:15 AM");expect(D).toHaveBeenCalled();expect(D.mostRecentCall.args[0]).toEqualTime(11,15)})})});describe("maxValue",function(){describe("maxValue config",function(){it("should allow a string, parsed according to the format config",function(){A({format:"g:i.A",maxValue:"8:30.PM"});expect(B.maxValue).toEqualTime(20,30)});it("should allow times before it to pass validation",function(){A({maxValue:"8:45 PM",value:"7:15 PM"});expect(B.getErrors().length).toEqual(0)});it("should cause times after it to fail validation",function(){A({maxValue:"8:45 PM",value:"9:15 PM"});expect(B.getErrors().length).toEqual(1);expect(B.getErrors()[0]).toEqual("The time in this field must be equal to or before 8:45 PM")});it("should fall back to the end of the day if the string cannot be parsed",function(){A({maxValue:"foopy",value:"11:59 PM"});expect(B.getErrors().length).toEqual(0)});it("should allow a Date object",function(){A({maxValue:new Date(2010,1,1,20,30)});expect(B.maxValue).toEqualTime(20,30)});it("should be passed to the time picker object",function(){A({maxValue:"8:45 PM"});B.expand();expect(B.getPicker().maxValue).toEqualTime(20,45)})});describe("setMaxValue method",function(){it("should allow a string, parsed according to the format config",function(){A({format:"g:i A"});B.setMaxValue("1:15 PM");expect(B.maxValue).toEqualTime(13,15)});it("should allow times before it to pass validation",function(){A({value:"5:15 PM"});B.setMaxValue("7:45 PM");expect(B.getErrors().length).toEqual(0)});it("should cause times after it to fail validation",function(){A({value:"9:15 PM"});B.setMaxValue("7:45 PM");expect(B.getErrors().length).toEqual(1);expect(B.getErrors()[0]).toEqual("The time in this field must be equal to or before 7:45 PM")});it("should fall back to the end of the day if the string cannot be parsed",function(){A({value:"11:59 PM"});B.setMaxValue("foopy");expect(B.getErrors().length).toEqual(0)});it("should allow a Date object",function(){A();B.setMaxValue(new Date(2010,1,1,20,30));expect(B.maxValue).toEqualTime(20,30)});it("should call the time picker's setMaxValue method",function(){A();B.expand();var D=spyOn(B.getPicker(),"setMaxValue");B.setMaxValue("11:15 PM");expect(D).toHaveBeenCalled();expect(D.mostRecentCall.args[0]).toEqualTime(23,15)})})});describe("onBlur",function(){beforeEach(function(){A({renderTo:Ext.getBody()})});it("should format the raw value",function(){jasmine.focusAndWait(B);runs(function(){B.setRawValue("123");Ext.getBody().createChild({tag:"button"}).focus().remove()});waitsFor(function(){return !B.hasFocus},"the TimeField to blur",1000);runs(function(){expect(B.getRawValue()).toEqual("1:23 AM")})});it("should not reset the hours, minutes or seconds",function(){var D,E;D=B.initDateParts;E=new Date(D[0],D[1],D[2],13,22,42);jasmine.focusAndWait(B);runs(function(){B.setValue(E);B.blur()});waitsFor(function(){return !B.hasFocus},"the TimeField to blur",1000);runs(function(){expect(B.getValue()).toEqual(E)})})});describe("validation",function(){it("should return the invalidText if an invalid time string is entered via text",function(){A();B.setRawValue("01:000 AM");expect(B.getErrors()[0]).toBe(Ext.String.format(B.invalidText,"01:000 AM"))})});describe("syncSelection",function(){it("should call select on the selection model with the new value record if there are no valid selections and forceSelect is false",function(){A({minValue:"7:00 PM",maxValue:"9:15 PM"});spyOn(B.picker.selModel,"select");B.setValue("1");expect(B.picker.selModel.select).toHaveBeenCalled()})});describe("forceSelection",function(){function D(E){A({forceSelection:true,minValue:"7:00 PM",maxValue:"9:15 PM",value:E})}it("should work with a legitimate value",function(){var E="9:00 PM";D(E);expect(B.selection.data.disp).toBe(E)});it("should work with an illegitimate value",function(){D("9:01 PM");expect(B.selection).toBe(null)})})})