describe("Ext.form.field.Trigger",function(){var B,A;beforeEach(function(){A=function(D){D=D||{};Ext.applyIf(D,{name:"test",width:100});spyOn(Ext.log,"warn");B=new Ext.form.field.Trigger(D)}});afterEach(function(){if(B){B.destroy()}B=A=null});function C(D){var E=Ext.fly(D).getXY();jasmine.fireMouseEvent(D,"click",E[0],E[1])}it("should be registered with xtype 'triggerfield'",function(){spyOn(Ext.log,"warn");B=Ext.create("Ext.form.field.Trigger",{name:"test"});expect(B instanceof Ext.form.field.Trigger).toBe(true);expect(Ext.getClass(B).xtype).toBe("triggerfield")});describe("defaults",function(){beforeEach(function(){A()});it("should have hideTrigger = false",function(){expect(B.hideTrigger).toBe(false)});it("should have editable = true",function(){expect(B.editable).toBe(true)});it("should have readOnly = false",function(){expect(B.readOnly).toBe(false)})});describe("rendering",function(){beforeEach(function(){A({triggerCls:"my-triggerCls",renderTo:Ext.getBody()})});describe("triggerWrap",function(){it("should be defined",function(){expect(B.triggerWrap).toBeDefined()});it("should be a child of the bodyEl",function(){expect(B.triggerWrap.dom.parentNode===B.bodyEl.dom).toBe(true)});it("should have a class of 'x-form-trigger-wrap'",function(){expect(B.triggerWrap.hasCls("x-form-trigger-wrap")).toBe(true)})});describe("triggerEl",function(){it("should be defined",function(){expect(B.triggerEl).toBeDefined()});it("should be a CompositeElement",function(){expect(B.triggerEl instanceof Ext.CompositeElement).toBe(true)});it("should give the trigger a class of 'x-form-trigger'",function(){expect(B.getTrigger("trigger1").el).toHaveCls("x-form-trigger")});it("should give the trigger a class matching the 'triggerCls' config",function(){expect(B.getTrigger("trigger1").el).toHaveCls("my-triggerCls")})})});describe("onTriggerClick method",function(){var D;beforeEach(function(){A({renderTo:Ext.getBody(),onTriggerClick:(D=jasmine.createSpy())})});it("should be called when the trigger is clicked",function(){C(B.getTrigger("trigger1").el.dom);expect(D).toHaveBeenCalled()});it("should be passed the Ext.EventObject for the click",function(){C(B.getTrigger("trigger1").el.dom);expect(D.mostRecentCall.args[2].browserEvent).toBeDefined()})});describe("trigger hiding",function(){var G,F,D,E;describe("hideTrigger config",function(){it("should hide the trigger elements when set to true",function(){A({hideTrigger:true,renderTo:Ext.getBody()});G=true;B.triggerEl.each(function(H){if(H.isVisible()){G=false;return false}});expect(G).toBe(true)});it("should not hide the trigger elements when set to false",function(){A({hideTrigger:false,renderTo:Ext.getBody()});G=true;B.triggerEl.each(function(H){if(H.isVisible()){G=false;return false}});expect(G).toBe(false)});it("should override any trigger elements when set to true",function(){A({hideTrigger:true,id:"foo-field",renderTo:Ext.getBody(),triggers:{trigger1:{hidden:false},trigger2:{hidden:false},trigger3:{hidden:false}}});G=true;B.triggerEl.each(function(H){if(H.isVisible()){G=false;return false}});expect(G).toBe(true)});it("should override any trigger elements when set to false",function(){A({hideTrigger:false,id:"foo-field",renderTo:Ext.getBody(),triggers:{trigger1:{hidden:true},trigger2:{hidden:true},trigger3:{hidden:true}}});F=true;B.triggerEl.each(function(H){if(!H.isVisible()){F=false;return false}});expect(F).toBe(true)})});describe("triggers config",function(){it("should hide all trigger elements except the second one",function(){A({id:"foo-field",renderTo:Ext.getBody(),triggers:{trigger1:{hidden:true},trigger2:{hidden:false},trigger3:{hidden:true}}});E="Failed";B.triggerEl.each(function(H){if(H.isVisible()){E=H.id}});expect(E).toBe("foo-field-trigger-trigger2")});it("should not hide all the trigger elements except second trigger",function(){A({id:"foo-field",renderTo:Ext.getBody(),triggers:{trigger1:{},trigger2:{hidden:true},trigger3:{}}});D="Failed";B.triggerEl.each(function(H){if(!H.isVisible()){D=H.id}});expect(D).toBe("foo-field-trigger-trigger2")})});describe("setHideTrigger method",function(){it("should hide the trigger elements when passed true",function(){A({hideTrigger:false,renderTo:Ext.getBody()});B.setHideTrigger(true);G=true;B.triggerEl.each(function(H){if(H.isVisible()){G=false;return false}});expect(G).toBe(true)});it("should hide the trigger elements when passed true, with triggers config",function(){A({renderTo:Ext.getBody(),triggers:{trigger1:{hidden:false},trigger2:{hidden:false},trigger3:{hidden:false}}});B.setHideTrigger(true);G=true;B.triggerEl.each(function(H){if(H.isVisible()){G=false;return false}});expect(G).toBe(true)});it("should unhide the trigger elements when passed false",function(){A({hideTrigger:true,renderTo:Ext.getBody()});B.setHideTrigger(false);F=true;B.triggerEl.each(function(H){if(!H.isVisible()){F=false;return false}});expect(F).toBe(true)});describe("before render",function(){it("should hide the trigger if set in initComponent",function(){A({hideTrigger:false,xhooks:{initComponent:function(){this.setHideTrigger(true);this.callParent()}},renderTo:Ext.getBody()});G=true;B.triggerEl.each(function(H){if(H.isVisible()){G=false;return false}});expect(G).toBe(true)});it("should unhide the trigger if set in initComponent",function(){A({hideTrigger:true,xhooks:{initComponent:function(){this.setHideTrigger(false);this.callParent()}},renderTo:Ext.getBody()});F=true;B.triggerEl.each(function(H){if(!H.isVisible()){F=false;return false}});expect(F).toBe(true)})})})});describe("editable",function(){describe("editable config",function(){it("should set the input to readOnly when set to false",function(){A({renderTo:Ext.getBody(),editable:false});expect(B.inputEl.dom.readOnly+"").toEqual("true")});it("should not set the input to readOnly when set to true",function(){A({renderTo:Ext.getBody(),editable:true});expect(B.inputEl.dom.readOnly+"").toEqual("false")})});describe("setEditable method",function(){it("should set the input to readOnly when passed false",function(){A({renderTo:Ext.getBody(),editable:true});B.setEditable(false);expect(B.inputEl.dom.readOnly+"").toEqual("true")});it("should not set the input to readOnly when passed true",function(){A({renderTo:Ext.getBody(),editable:false});B.setEditable(true);expect(B.inputEl.dom.readOnly+"").toEqual("false")})})});describe("readOnly",function(){var D;describe("readOnly config",function(){it("should set the input to readOnly when set to true",function(){A({renderTo:Ext.getBody(),readOnly:true});expect(B.inputEl.dom.readOnly+"").toEqual("true")});it("should not call the onTriggerClick method upon clicking the trigger, when set to true",function(){A({renderTo:Ext.getBody(),readOnly:true,onTriggerClick:(D=jasmine.createSpy())});var E=B.getTrigger("trigger1");expect(E.isVisible()).toBe(false);C(E.el.dom);expect(D).not.toHaveBeenCalled()});it("should not set the input to readOnly when set to false",function(){A({renderTo:Ext.getBody(),readOnly:false});expect(B.inputEl.dom.readOnly+"").toEqual("false")});it("should hide trigger when readOnly when set to true",function(){A({renderTo:Ext.getBody(),readOnly:true});expect(B.getTrigger("trigger1").isVisible()).toBe(false)});it("should not hide trigger when readOnly set to true, but trigger configured not to do so",function(){A({renderTo:Ext.getBody(),readOnly:true,triggers:{trigger1:{hideOnReadOnly:false}}});expect(B.getTrigger("trigger1").isVisible()).toBe(true)});it("should call the onTriggerClick method upon clicking the trigger, when set to false",function(){var E;A({renderTo:Ext.getBody(),readOnly:false,onTriggerClick:(E=jasmine.createSpy())});C(B.getTrigger("trigger1").el.dom);expect(E).toHaveBeenCalled()})});describe("setReadOnly method",function(){it("should set the input to readOnly when passing true",function(){A({renderTo:Ext.getBody(),readOnly:false});B.setReadOnly(true);expect(B.inputEl.dom.readOnly+"").toEqual("true")});it("should not call the onTriggerClick method upon clicking the trigger, when passing true",function(){A({renderTo:Ext.getBody(),readOnly:false,onTriggerClick:(D=jasmine.createSpy())});B.setReadOnly(true);C(B.getTrigger("trigger1").el.dom);expect(D).not.toHaveBeenCalled()});it("should not set the input to readOnly when passing false",function(){A({renderTo:Ext.getBody(),readOnly:true});B.setReadOnly(false);expect(B.inputEl.dom.readOnly+"").toEqual("false")});it("should not hide trigger when readOnly set to true, but trigger configured not to do so",function(){A({renderTo:Ext.getBody(),readOnly:false,triggers:{trigger1:{hideOnReadOnly:false}}});B.setReadOnly(true);expect(B.getTrigger("trigger1").isVisible()).toBe(true)});it("should call the onTriggerClick method upon clicking the trigger, when passing false",function(){A({renderTo:Ext.getBody(),readOnly:true,onTriggerClick:(D=jasmine.createSpy())});B.setReadOnly(false);C(B.getTrigger("trigger1").el.dom);expect(D).toHaveBeenCalled()})})});(Ext.isWebKit?describe:xdescribe)("focus/blur",function(){it("should blur when focusing another field",function(){var D=false,E;A({renderTo:Ext.getBody(),listeners:{blur:function(){D=true}}});E=new Ext.form.field.Text({renderTo:Ext.getBody()});B.focus();expect(B.hasFocus).toBe(true);E.focus();waits(1);runs(function(){expect(D).toBe(true);expect(B.hasFocus).toBe(false);expect(Ext.Element.getActiveElement()).toBe(E.inputEl.dom);E.destroy()})});it("should not blur when the trigger element is clicked.",function(){var D=false;A({renderTo:Ext.getBody()});B.focus();B.on("blur",function(){D=true});jasmine.fireMouseEvent(B.getTrigger("trigger1").el.dom,"click");expect(D).toBe(false);expect(B.hasFocus).toBe(true);expect(Ext.Element.getActiveElement()).toBe(B.inputEl.dom)})});describe("trigger classes",function(){function G(M,J,I,N,K){var L=B.triggerEl.item(J);jasmine.fireMouseEvent(L.dom,M,I,N,K)}function D(J,I){return B.triggerEl.item(I).hasCls(J)}var H=Ext.supports.MouseEnterLeave?"mouseenter":"mouseover",E=Ext.supports.MouseEnterLeave?"mouseleave":"mouseout",F=Ext.form.trigger.Trigger.prototype.baseCls;describe("single trigger",function(){beforeEach(function(){A({renderTo:Ext.getBody()})});it("should add the base overCls on mouseover",function(){G(H,0);expect(D(F+"-over",0)).toBe(true)});it("should remove the base overCls on mouseout",function(){G(H,0);G(E,0);expect(D(F+"-over",0)).toBe(false)});it("should add the base clickCls on mousedown",function(){G("mousedown",0);expect(D(F+"-click",0)).toBe(true)});it("should remove the base clickCls on mouseup",function(){G("mousedown",0);G("mouseup",0);expect(D(F+"-click",0)).toBe(false)})});describe("multi trigger",function(){beforeEach(function(){A({renderTo:Ext.getBody(),trigger2Cls:"foo",onTrigger2Click:Ext.emptyFn})});it("should add the base overCls on mouseover to the 2nd trigger",function(){G(H,1);expect(D(F+"-over",1)).toBe(true)});it("should remove the base overCls on mouseout",function(){G(H,1);G(E,1);expect(D(F+"-over",1)).toBe(false)});it("should add the base clickCls on mousedown",function(){G("mousedown",1);expect(D(F+"-click",1)).toBe(true)});it("should remove the base clickCls on mouseup",function(){G("mousedown",1);G("mouseup",1);expect(D(F+"-click",1)).toBe(false)})});describe("custom trigger cls",function(){it("should add a custom overCls on mouseover if specified",function(){A({renderTo:Ext.getBody(),triggerCls:"bar"});G(H,0);expect(D("bar-over",0)).toBe(true)});it("should remove a custom overCls on mouseout if specified",function(){A({renderTo:Ext.getBody(),triggerCls:"bar"});G(H,0);G(E,0);expect(D("bar-over",0)).toBe(false)});it("should add a custom clickCls on mousedown if specified",function(){A({renderTo:Ext.getBody(),triggerCls:"bar"});G("mousedown",0);expect(D("bar-click",0)).toBe(true)});it("should remove a custom clickCls on mouseup if specified",function(){A({renderTo:Ext.getBody(),triggerCls:"bar"});G("mousedown",0);G("mouseup",0);expect(D("bar-click",0)).toBe(false)});it("should not attempt to add an overCls if none exists",function(){A({renderTo:Ext.getBody()});G(H,0);expect(D("undefined-over",0)).toBe(false)});it("should not attempt to add a clickCls if none exists",function(){A({renderTo:Ext.getBody()});G("mousedown",0);expect(D("undefined-over",0)).toBe(false)})})})})