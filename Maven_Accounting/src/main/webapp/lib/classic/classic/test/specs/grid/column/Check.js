describe("Ext.grid.column.Check",function(){var A,H,B;function G(){return{xtype:"checkcolumn",text:"Checked",dataIndex:"val"}}function F(J){H=new Ext.data.Store({model:spec.CheckColumnModel,data:[{val:true},{val:true},{val:false},{val:true},{val:false}]});if(!J){J=[G()]}A=new Ext.grid.Panel({width:200,height:100,renderTo:Ext.getBody(),store:H,columns:J});B=A.getColumnManager().getFirst()}function E(L,N,M,K,J,P){var O=C(N,M);jasmine.fireMouseEvent(O,L,J,P,K)}function I(J){return A.getView().getCellInclusive({row:J,column:0})}function C(K){var J=I(K);return Ext.fly(J).down(".x-grid-checkcolumn")}function D(K,J){return Ext.fly(K).hasCls(J)}beforeEach(function(){Ext.define("spec.CheckColumnModel",{extend:"Ext.data.Model",fields:["val"]})});afterEach(function(){Ext.destroy(A,H);B=A=H=null;Ext.undefine("spec.CheckColumnModel");Ext.data.Model.schema.clear()});describe("check rendering",function(){it("should add the x-grid-checkcolumn class to the checkbox element",function(){F();expect(D(C(0),"x-grid-checkcolumn")).toBe(true)});it("should set the x-grid-checkcolumn-checked class on checked items",function(){F();expect(D(C(0),"x-grid-checkcolumn-checked")).toBe(true);expect(D(C(2),"x-grid-checkcolumn-checked")).toBe(false)})});describe("enable/disable",function(){describe("during config",function(){it("should not include the disabledCls if the column is not disabled",function(){F();expect(D(I(0),B.disabledCls)).toBe(false)});it("should include the disabledCls if the column is disabled",function(){var J=G();J.disabled=true;F([J]);expect(D(I(0),B.disabledCls)).toBe(true)})});describe("after render",function(){it("should add the disabledCls if disabling",function(){F();B.disable();expect(D(I(0),B.disabledCls)).toBe(true);expect(D(I(1),B.disabledCls)).toBe(true);expect(D(I(2),B.disabledCls)).toBe(true);expect(D(I(3),B.disabledCls)).toBe(true);expect(D(I(4),B.disabledCls)).toBe(true)});it("should remove the disabledCls if enabling",function(){var J=G();J.disabled=true;F([J]);B.enable();expect(D(I(0),B.disabledCls)).toBe(false);expect(D(I(1),B.disabledCls)).toBe(false);expect(D(I(2),B.disabledCls)).toBe(false);expect(D(I(3),B.disabledCls)).toBe(false);expect(D(I(4),B.disabledCls)).toBe(false)})})});describe("interaction",function(){describe("stopSelection",function(){describe("stopSelection: false",function(){it("should select when a full row update is required",function(){var J=G();J.stopSelection=false;F([J,{xtype:"templatecolumn",dataIndex:"val",tpl:"{val}"}]);E("click",0);expect(A.getSelectionModel().isSelected(H.getAt(0))).toBe(true)});it("should select when a full row update is not required",function(){var J=G();J.stopSelection=false;F([J,{dataIndex:"val"}]);E("click",0);expect(A.getSelectionModel().isSelected(H.getAt(0))).toBe(true)})});describe("stopSelection: true",function(){it("should not select when a full row update is required",function(){var J=G();J.stopSelection=true;F([J,{xtype:"templatecolumn",dataIndex:"val",tpl:"{val}"}]);E("click",0);expect(A.getSelectionModel().isSelected(H.getAt(0))).toBe(false)});it("should not select when a full row update is not required",function(){var J=G();J.stopSelection=true;F([J,{dataIndex:"val"}]);E("click",0);expect(A.getSelectionModel().isSelected(H.getAt(0))).toBe(false)})})});describe("events",function(){it("should pass the column, record index & new checked state for beforecheckchange",function(){var L,K,J;F();B.on("beforecheckchange",function(N,M,O){L=N;K=M;J=O});E("mousedown",0);expect(L).toBe(B);expect(K).toBe(0);expect(J).toBe(false)});it("should pass the column, record index & new checked state for checkchange",function(){var L,K,J;F();B.on("checkchange",function(N,M,O){L=N;K=M;J=O});E("mousedown",2);expect(L).toBe(B);expect(K).toBe(2);expect(J).toBe(true)});it("should not fire fire checkchange if beforecheckchange returns false",function(){var J=false;F();B.on("checkchange",function(L,K,M){J=true});B.on("beforecheckchange",function(){return false});E("mousedown",2);expect(J).toBe(false)})});it("should invert the record value",function(){F();E("mousedown",0);expect(H.getAt(0).get("val")).toBe(false);E("mousedown",2);expect(H.getAt(2).get("val")).toBe(true)});it("should not trigger any changes when disabled",function(){var J=G();J.disabled=true;F([J]);E("mousedown",0);expect(H.getAt(0).get("val")).toBe(true);E("mousedown",2);expect(H.getAt(2).get("val")).toBe(false)})})})