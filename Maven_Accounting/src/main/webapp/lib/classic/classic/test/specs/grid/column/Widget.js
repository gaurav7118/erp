describe("Ext.grid.column.Widget",function(){var H=Ext.isWebKit?it:xit,P=true,F=Ext.data.ProxyStore.prototype.load,J;var D=Ext.define(null,{extend:"Ext.data.Model",fields:["a","b","c"]});var B,M,O,N,C;function E(Q){var S=[],R;Q=Q||10;for(R=1;R<=Q;R++){S.push({id:"rec"+R,a:R+"a",b:R+"b",c:R+"c"})}return S}function L(Q){return{text:"Button",xtype:"widgetcolumn",width:200,dataIndex:"a",widget:Q}}function I(R,S,Q){R=R||[L({xtype:"button"})];S=S||E(4);O=new Ext.data.Store({model:D,data:S,proxy:{type:"memory",data:S}});B=new Ext.grid.Panel(Ext.apply({renderTo:Ext.getBody(),columns:R,width:1000,height:500,border:false,store:O,viewConfig:{mouseOverOutBuffer:0}},Q));M=B.getView();C=M.getNavigationModel();N=B.getColumnManager().getColumns()}beforeEach(function(){J=Ext.data.ProxyStore.prototype.load=function(){F.apply(this,arguments);if(P){this.flushLoad.apply(this,arguments)}return this}});afterEach(function(){Ext.data.ProxyStore.prototype.load=F;Ext.destroy(B);B=O=N=null});function A(R,Q){Q=Q||N[0];return Q.getWidget(O.getAt(R))}function K(){var Q=B.getView().getEl().down(N[0].getCellInnerSelector());return parseInt(Q.getStyle("padding-left"),10)+parseInt(Q.getStyle("padding-right"),10)}describe("refocusing after using a column widget to trigger a delete",function(){it("should refocus the next row upon deletion",function(){I([{text:"Button",xtype:"widgetcolumn",width:200,dataIndex:"a",widget:{xtype:"button",text:"Delete row",handler:function(W){var X=W.getWidgetRecord();O.remove(X)}}}]);var S=A(0),U=O.getAt(0),T=O.getAt(1),Q=S.getWidgetRecord(),R=A(1).getWidgetRecord(),V=O.getCount();expect(Q).toBe(U);expect(R).toBe(T);jasmine.fireMouseEvent(S.focusEl,"mousedown");S.focusEl.focus();jasmine.fireKeyEvent(S.focusEl,"keydown",Ext.event.Event.SPACE);expect(O.getCount()).toBe(V-1);expect(O.contains(Q)).toBe(false);waitsFor(function(){S=A(0);return S.hasFocus});runs(function(){expect(S.getWidgetRecord()).toBe(R)})})});describe("Widget recycling across refresh",function(){it("should recycle widgets",function(){var S={xtype:"button",cls:"foo"};I([L(S)]);var R=A(0),Q=A(1),U=A(2),T=A(3);O.reload();expect(A(0)===R).toBe(true);expect(A(1)===Q).toBe(true);expect(A(2)===U).toBe(true);expect(A(3)===T).toBe(true)})});describe("construction",function(){it("should not modify the widget config",function(){var Q={xtype:"button",cls:"foo"};I([L(Q)]);expect(Q).toEqual({xtype:"button",cls:"foo"})})});describe("widget refocus on row delete",function(){H("should not cause an error when deleting the focused row using an actionable widget",function(){I([{itemId:"ct",columns:[L({xtype:"button",handler:function(R){var S=R.getWidgetRecord();O.remove(S)}})]}]);var Q=N[0].getWidget(O.last());jasmine.fireMouseEvent(Q.el.dom,"click");expect(M.all.getCount()).toBe(3);expect(N[0].getWidget(O.last()).hasFocus).toBe(true)})});describe("stopSelection",function(){beforeEach(function(){I()});it("should not select the row on click of the widget with stopSelection: true",function(){jasmine.fireMouseEvent(A(0).getEl().dom,"click");expect(B.getSelectionModel().isSelected(0)).toBe(false)});it("should select the row on click of the widget with stopSelection: false",function(){N[0].stopSelection=false;C.setPosition(new Ext.grid.CellContext(B.view).setPosition(0,0));waitsFor(function(){return M.containsFocus});runs(function(){jasmine.fireMouseEvent(A(0).getEl().dom,"click");expect(B.getSelectionModel().isSelected(0)).toBe(true)})})});describe("widget scope resolution",function(){it("should resolve to a view controller",function(){var R=Ext.define(null,{extend:"Ext.app.ViewController",onButtonClick:function(){}});var Q=new R();I([L({xtype:"button",handler:"onButtonClick"})],undefined,{controller:Q});spyOn(Q,"onButtonClick");jasmine.fireMouseEvent(A(0).getEl().dom,"click");expect(Q.onButtonClick).toHaveBeenCalled()});it("should handle scope: 'this'",function(){Ext.define("spec.Button",{extend:"Ext.button.Button",alias:"widget.subbutton",onButtonClick:function(){}});I([L({xtype:"subbutton",handler:"onButtonClick",scope:"this"})]);var Q=A(0);spyOn(Q,"onButtonClick");jasmine.fireMouseEvent(A(0).getEl().dom,"click");expect(Q.onButtonClick).toHaveBeenCalled();Ext.undefine("spec.Button")})});function G(Q){describe(Q?"with buffered rendering":"without buffered rendering",function(){function S(U,V,T){T=T||{};T.bufferedRenderer=!!Q;I(U,V,T)}function R(Z){Z=Z||0;var X=B.down("widgetcolumn"),V=B.getView(),U,W,T,Y;if(X&&V.viewReady){U=X.getCellInnerSelector();W=V.getEl().select(U,true);T=W.getCount();for(Y=Z;Y<T;++Y){expect(A(Y,X).getEl().dom.parentNode).toBe(W.item(Y).dom)}}}describe("basic functionality",function(){it("should render a widget for each row",function(){S();expect(A(0).isComponent).toBe(true);expect(A(1).isComponent).toBe(true);expect(A(2).isComponent).toBe(true);expect(A(3).isComponent).toBe(true);R()});it("should not bust the row height when showing a button",function(){var T=[L({xtype:"button"}),{text:"Data",dataIndex:"b"}],U;T[0].hidden=true;S(T);U=B.view.getNode(0).offsetHeight;N[0].show();expect(B.view.getNode(0).offsetHeight).toBe(U);R()});it("should render the matching xtype",function(){S();expect(A(0).getXType()).toBe("button");R()});it("should pass in other configurations",function(){S([L({xtype:"button",enableToggle:true,pressed:true})]);var T=A(0);expect(T.pressed).toBe(true);expect(T.enableToggle).toBe(true);R()});it("should create a new instance for each row",function(){S();var U=A(0),T=A(1),W=A(2),V=A(3);expect(T).not.toBe(U);expect(W).not.toBe(U);expect(V).not.toBe(U);expect(W).not.toBe(T);expect(V).not.toBe(T);expect(V).not.toBe(W);R()});it("should set the value of the defaultBindProperty on the widget to the dataIndex",function(){S();expect(A(0).getText()).toBe("1a");expect(A(1).getText()).toBe("2a");expect(A(2).getText()).toBe("3a");expect(A(3).getText()).toBe("4a");R()});it("should not modify the defaultBindProperty if there is no dataIndex",function(){S([{xtype:"widgetcolumn",width:200,widget:{xtype:"button",text:"Foo"}}]);expect(A(0).getText()).toBe("Foo");expect(A(1).getText()).toBe("Foo");expect(A(2).getText()).toBe("Foo");expect(A(3).getText()).toBe("Foo");R()})});describe("tdCls",function(){it("should get the tdCls from the widget",function(){S([L({xtype:"button",getTdCls:function(){return"foo"}})]);expect(M.getCellByPosition({row:0,column:0})).toHaveCls("foo");expect(M.getCellByPosition({row:1,column:0})).toHaveCls("foo");expect(M.getCellByPosition({row:2,column:0})).toHaveCls("foo");expect(M.getCellByPosition({row:3,column:0})).toHaveCls("foo")});it("should combine a tdCls on the column with the tdCls on the widget",function(){var T=L({xtype:"button",getTdCls:function(){return"foo"}});T.tdCls="bar";S([T]);expect(M.getCellByPosition({row:0,column:0})).toHaveCls("foo");expect(M.getCellByPosition({row:0,column:0})).toHaveCls("bar");expect(M.getCellByPosition({row:1,column:0})).toHaveCls("foo");expect(M.getCellByPosition({row:1,column:0})).toHaveCls("bar");expect(M.getCellByPosition({row:2,column:0})).toHaveCls("foo");expect(M.getCellByPosition({row:2,column:0})).toHaveCls("bar");expect(M.getCellByPosition({row:3,column:0})).toHaveCls("foo");expect(M.getCellByPosition({row:3,column:0})).toHaveCls("bar")})});describe("onWidgetAttach",function(){var T;beforeEach(function(){T=jasmine.createSpy()});afterEach(function(){T=null});it("should call the method during render",function(){var U=L({xtype:"button"});U.onWidgetAttach=T;S([U]);expect(T.callCount).toBe(O.getCount())});it("should pass the column, the widget instance and the record",function(){var U=L({xtype:"button"});U.onWidgetAttach=T;S([U]);expect(T.calls[0].args[0]).toBe(N[0]);expect(T.calls[0].args[1].isButton).toBe(true);expect(T.calls[0].args[2]).toBe(O.getAt(0));expect(T.calls[1].args[0]).toBe(N[0]);expect(T.calls[1].args[1].isButton).toBe(true);expect(T.calls[1].args[2]).toBe(O.getAt(1));expect(T.calls[2].args[0]).toBe(N[0]);expect(T.calls[2].args[1].isButton).toBe(true);expect(T.calls[2].args[2]).toBe(O.getAt(2));expect(T.calls[3].args[0]).toBe(N[0]);expect(T.calls[3].args[1].isButton).toBe(true);expect(T.calls[3].args[2]).toBe(O.getAt(3))});it("should get called when a new record is added",function(){var U=L({xtype:"button"});U.onWidgetAttach=T;S([U]);T.reset();var W=O.insert(2,{})[0],V=T.mostRecentCall;expect(T.callCount).toBe(1);expect(V.args[0]).toBe(N[0]);expect(V.args[1].isButton).toBe(true);expect(V.args[2]).toBe(W)});if(Q){it("should only be called for records in the view",function(){var W=L({xtype:"button"});W.onWidgetAttach=T;var Z=[],Y=0,b=10000;for(Y=1;Y<=b;++Y){Z.push({id:"rec"+Y})}S([W],Z);var V=B.getView(),X=V.getNodes(),a=X[0],U=X.length;expect(T.callCount).toBeLessThan(b);for(Y=0;Y<U;++Y){expect(T.calls[Y].args[2]).toBe(O.getAt(Y))}R();T.reset();B.bufferedRenderer.scrollTo(b*100);waitsFor(function(){return V.getNodes()[0]!==a});runs(function(){X=V.getNodes();U=X.length;var c=b-U;for(Y=0;Y<U;++Y){expect(T.calls[Y].args[2]).toBe(O.getAt(Y+c))}R(c)})})}describe("scope",function(){it("should default the scope to the column",function(){var U=L({xtype:"button"});U.onWidgetAttach=T;S([U]);expect(T.mostRecentCall.object).toBe(N[0])});it("should use a passed scope",function(){var U=L({xtype:"button"}),V={};U.onWidgetAttach=T;U.scope=V;S([U]);expect(T.mostRecentCall.object).toBe(V)});it("should be able to resolve to a view controller method",function(){var U=L({xtype:"button"});var V=new Ext.app.ViewController();V.doSomething=T;U.onWidgetAttach="doSomething";S([U],null,{controller:V});expect(T.callCount).toBe(4)})})});describe("add/remove column",function(){it("should render widgets when adding the column dynamically",function(){S([]);B.headerCt.add(L({xtype:"button"}));N=B.getColumnManager().getColumns();expect(A(0).getText()).toBe("1a");expect(A(1).getText()).toBe("2a");expect(A(2).getText()).toBe("3a");expect(A(3).getText()).toBe("4a");R()});it("should not cause an error when removing",function(){S();expect(function(){B.headerCt.remove(N[0])}).not.toThrow()});it("should be able to re-use the column",function(){S();B.headerCt.remove(N[0],false);B.headerCt.add(N[0]);expect(A(0).getText()).toBe("1a");expect(A(1).getText()).toBe("2a");expect(A(2).getText()).toBe("3a");expect(A(3).getText()).toBe("4a");R()});it("should be able to move a column to the left",function(){S([{},L({xtype:"button"})]);B.headerCt.moveBefore(N[0],N[1]);R()});it("should be able to move a column to the right",function(){S([L({xtype:"button"}),{}]);B.headerCt.moveAfter(N[1],N[0]);R()})});describe("widget sizing",function(){it("should not cause an error if the view is not rendered",function(){S(undefined,undefined,{renderTo:null});expect(function(){N[0].setWidth(400)}).not.toThrow()});it("should not cause an error if the store is empty",function(){expect(function(){S(undefined,[])}).not.toThrow()});it("should not cause an error if there are no records in the view",function(){S();O.removeAll();expect(function(){N[0].setWidth(400)}).not.toThrow()});it("should not modify the width if the widget is configured with a width",function(){S([L({xtype:"button",width:50})]);N=B.getColumnManager().getColumns();expect(A(0).getWidth()).toBe(50);expect(A(1).getWidth()).toBe(50);expect(A(2).getWidth()).toBe(50);expect(A(3).getWidth()).toBe(50)});it("should set the width to the column size minus the padding by on initial render",function(){S();var T=K();expect(A(0).getWidth()).toBe(200-T);expect(A(1).getWidth()).toBe(200-T);expect(A(2).getWidth()).toBe(200-T);expect(A(3).getWidth()).toBe(200-T)});it("should modify the widget size dynamically",function(){S();var T=K();N[0].setWidth(400);expect(A(0).getWidth()).toBe(400-T);expect(A(1).getWidth()).toBe(400-T);expect(A(2).getWidth()).toBe(400-T);expect(A(3).getWidth()).toBe(400-T)});it("should modify the size with a flexed column",function(){var T=L({xtype:"button"});delete T.width;T.flex=1;S([T]);var U=K();expect(A(0).getWidth()).toBe(1000-U);expect(A(1).getWidth()).toBe(1000-U);expect(A(2).getWidth()).toBe(1000-U);expect(A(3).getWidth()).toBe(1000-U);B.setWidth(600);expect(A(0).getWidth()).toBe(600-U);expect(A(1).getWidth()).toBe(600-U);expect(A(2).getWidth()).toBe(600-U);expect(A(3).getWidth()).toBe(600-U)});it("should run layouts on components initially and when they are sized",function(){var T=L({xtype:"container",layout:"hbox",defaultType:"component",items:[{flex:1,html:"A"},{flex:1,html:"B"}]}),U;delete T.dataIndex;S([T],E(2));var V=K(),X=200-V;function W(a,Z,Y){expect(a.getWidth()).toBe(Z);expect(a.componentLayoutCounter).toBe(Y)}U=A(0);W(U,X,1);W(U.items.getAt(0),X/2,1);W(U.items.getAt(1),X/2,1);U=A(1);W(U,X,1);W(U.items.getAt(0),X/2,1);W(U.items.getAt(1),X/2,1);N[0].setWidth(400);X=400-V;U=A(0);W(U,X,2);W(U.items.getAt(0),X/2,2);W(U.items.getAt(1),X/2,2);U=A(1);W(U,X,2);W(U.items.getAt(0),X/2,2);W(U.items.getAt(1),X/2,2)});it("should run layouts when the grid has a pending layout",function(){var T=L({xtype:"component"}),V,U;S([T],E(2));V=A(0);U=V.componentLayoutCounter;Ext.suspendLayouts();B.setWidth(B.getWidth()+100);N[0].setWidth(400);Ext.resumeLayouts(true);expect(V.componentLayoutCounter).toBe(U+1)})});describe("store modifications",function(){describe("before render",function(){beforeEach(function(){S(undefined,undefined,{renderTo:null})});it("should not cause an error when adding records",function(){expect(function(){var T=O.add({})}).not.toThrow()});it("should not cause an error when removing items",function(){expect(function(){var T=O.removeAt(0)}).not.toThrow()});it("should not cause an error when updating items",function(){expect(function(){var T=O.first().set("a","X")}).not.toThrow()});it("should not cause an error when clearing the store",function(){expect(function(){O.removeAll()}).not.toThrow()})});describe("after render",function(){beforeEach(function(){S()});it("should add a new widget when adding a record",function(){O.add({a:"New"});expect(A(4).getText()).toBe("New");R()});it("should remove the widget when removing a record",function(){O.removeAt(3);expect(A(3)).toBeNull();R()});it("should update the defaultBindProperty when changing a value",function(){O.first().set("a","NewValue");expect(A(0).getText()).toBe("NewValue");R()});it("should add the cell dirty class when changing a value, and remove it when reverting that change",function(){var T=O.first().get("a");O.first().set("a","NewValue");expect(M.getCellByPosition({row:0,column:0}).hasCls(M.dirtyCls)).toBe(true);O.first().set("a",T);expect(M.getCellByPosition({row:0,column:0}).hasCls(M.dirtyCls)).toBe(false)});it("should render with a cell dirty class set if the record is already modified",function(){B.destroy();S(null,null,{renderTo:null});O.first().set("a","NewValue");B.render(document.body);expect(M.getCellByPosition({row:0,column:0}).hasCls(M.dirtyCls)).toBe(true)});it("should remove all widgets when calling removeAll",function(){O.removeAll();expect(A(0)).toBeNull();R()})})});describe("widget decoration",function(){it("should add a method to get the column from the widget",function(){S();expect(A(0).getWidgetColumn()).toBe(N[0]);expect(A(1).getWidgetColumn()).toBe(N[0]);expect(A(2).getWidgetColumn()).toBe(N[0]);expect(A(3).getWidgetColumn()).toBe(N[0])});it("should add a method to get the record from the widget",function(){S();expect(A(0).getWidgetRecord()).toBe(O.getAt(0));expect(A(1).getWidgetRecord()).toBe(O.getAt(1));expect(A(2).getWidgetRecord()).toBe(O.getAt(2));expect(A(3).getWidgetRecord()).toBe(O.getAt(3))});it("should have the record/column available before the bind is called",function(){var V,U,T;Ext.define("spec.Button",{extend:"Ext.button.Button",alias:"widget.specbutton",updateText:function(W){T=this.getWidgetColumn();if(W==="foo"){V=this.getWidgetRecord()}else{if(W==="bar"){U=this.getWidgetRecord()}}this.callParent(arguments)}});S([L({xtype:"specbutton"})],[]);O.suspendEvents();O.add({a:"foo"});O.resumeEvents();B.getView().refresh();O.add({a:"bar"});expect(T).toBe(N[0]);expect(V).toBe(O.getAt(0));expect(U).toBe(O.getAt(1));Ext.undefine("spec.Button")});describe("getWidgetRecord",function(){it("should have the correct reference when an update causes the view to change",function(){S();O.getSorters().add({property:"a"});O.first().set("a","5a");expect(A(0).getWidgetRecord().getId()).toBe("rec2");expect(A(1).getWidgetRecord().getId()).toBe("rec3");expect(A(2).getWidgetRecord().getId()).toBe("rec4");expect(A(3).getWidgetRecord().getId()).toBe("rec1")});it("should have the correct references when removing records",function(){S();O.removeAt(1);expect(A(0).getWidgetRecord().getId()).toBe("rec1");expect(A(1).getWidgetRecord().getId()).toBe("rec3");expect(A(2).getWidgetRecord().getId()).toBe("rec4")});it("should have the correct references when adding records",function(){S();O.insert(1,[{},{},{}]);expect(A(0).getWidgetRecord().getId()).toBe("rec1");expect(A(4).getWidgetRecord().getId()).toBe("rec2");expect(A(5).getWidgetRecord().getId()).toBe("rec3");expect(A(6).getWidgetRecord().getId()).toBe("rec4")})})});describe("reconfigure",function(){it("should be able to reconfigure with adding a column",function(){S([]);B.reconfigure(undefined,[L({xtype:"button"})]);N=B.getColumnManager().getColumns();expect(A(0).getText()).toBe("1a");expect(A(1).getText()).toBe("2a");expect(A(2).getText()).toBe("3a");expect(A(3).getText()).toBe("4a");R()});it("should be able to reconfigure with removing a column",function(){S();expect(function(){B.reconfigure(undefined,[{dataIndex:"a"}])}).not.toThrow()})});describe("destroy",function(){it("should destroy components",function(){S();var U=Ext.ComponentManager.getCount(),T=1+O.getCount();B.headerCt.remove(N[0]);expect(Ext.ComponentManager.getCount()).toBe(U-T)})});describe("on refresh",function(){describe("beforerefresh",function(){it("should recycle the widget dom tree hierarchy when refreshed",function(){var T=E(100),U;S(null,T,{height:100});U=A(1).el.dom.childNodes;expect(U.length).toBe(1);B.store.loadData(T);expect(U.length).toBe(1)})})});describe("item removal",function(){it("should recycle dom nodes when items are removed",function(){var T=E(100),U;S(null,T,{height:100});U=A(1).el.dom.childNodes;expect(U.length).toBe(1);O.removeAt(1);expect(U.length).toBe(1)})});describe("hide/show",function(){it("should not create widgets initially when hidden",function(){var U=0;Ext.define("spec.Foo",{extend:"Ext.Component",alias:"widget.foo",initComponent:function(){++U;this.callParent()}});var T=L({xtype:"foo"});T.hidden=true;S([T]);expect(U).toBe(1);Ext.undefine("spec.Foo")});it("should size the widgets when hidden initially and then shown",function(){var T=L({xtype:"button"});T.hidden=true;S([T]);N[0].show();var U=K();expect(A(0).getWidth()).toBe(200-U);expect(A(1).getWidth()).toBe(200-U);expect(A(2).getWidth()).toBe(200-U);expect(A(3).getWidth()).toBe(200-U)});it("should not cause an error when hiding the last leaf column in a grouped header",function(){S([{columns:[L({xtype:"button"})]}]);expect(function(){N[0].hide()}).not.toThrow()});it("should not cause an error when hiding the group header that contains this widget",function(){S([{itemId:"ct",columns:[L({xtype:"button"})]}]);expect(function(){B.down("#ct").hide()}).not.toThrow()})})});describe("RadioGroup as a widget",function(){var R;afterEach(function(){R.destroy()});it("should be able to update value from column's dataIndex",function(){var T=Ext.create("Ext.data.Store",{fields:["name","progress",{name:"radio",isEqual:function(Y,X){return String(Y.value)===String(X.value)}}],data:[{name:"Test 1",progress:0.1,radio:{"value":2}},{name:"Test 2",progress:0.23,radio:{"value":1}},{name:"Test 3",progress:0.86,radio:{"value":2}},{name:"Test 4",progress:0.31,radio:{"value":1}}]}),S,V,U,W=T.getAt(0);R=Ext.create({xtype:"grid",title:"Widget Column Demo",store:T,columns:[{text:"Test Number",dataIndex:"name",width:150},{text:"Progress",dataIndex:"progress",width:100},{xtype:"widgetcolumn",header:"Radio Group",dataIndex:"radio",width:170,widget:{xtype:"radiogroup",local:true,columns:1,vertical:true,items:[{boxLabel:"Item 1",name:"value",inputValue:"1"},{boxLabel:"Item 2",name:"value",inputValue:"2"}],listeners:{change:function(Y,Z,X){Y.getWidgetRecord().set("radio",Z)}}}}],height:400,width:600,renderTo:Ext.getBody()});S=R.down("widgetcolumn");V=S.getWidget(W);U=V.child("radio[inputValue=1]");jasmine.fireMouseEvent(U.inputEl,"click");expect(W.get("radio").value).toBe("1")})})}G(false);G(true)})