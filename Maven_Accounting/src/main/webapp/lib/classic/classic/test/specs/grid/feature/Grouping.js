describe("Ext.grid.feature.Grouping",function(){var A,I,F,C,M,K,E=true,B=Ext.data.ProxyStore.prototype.load,R;function N(T){Ext.Ajax.mockComplete({status:200,responseText:Ext.JSON.encode(T)})}function Q(U,V,T){E=false;A=new Ext.grid.Panel(Ext.apply({renderTo:Ext.getBody(),store:new Ext.data.Store(Ext.apply({model:spec.Restaurant,data:[]},U)),width:200,height:200,features:[Ext.apply({ftype:"grouping"},V)],columns:[{text:"Name",dataIndex:"name"},{text:"Cuisine",dataIndex:"cuisine"}]},T));F=A.store;I=A.view;K=I.summaryFeature;E=true;F.flushLoad()}function H(V,T){var U;J(T);U=L().down("#"+V);jasmine.fireMouseEvent(U.el,"click")}function L(){return(C=A.headerCt.getMenu())}function P(T){return F.getAt(T)}function O(U,T){return A.getView().getCellInclusive({row:U,column:T},true)}function J(T){var U=A.headerCt;T=T||A.visibleColumnManager.getColumns()[0];U.showMenuBy(null,T.triggerEl,T);C=U.menu}function G(V,X,W,U,T,Z){var Y=O(X,W);jasmine.fireMouseEvent(Y,V,T,Z,U)}function D(U,W,V,T){var X=O(W,V);jasmine.fireKeyEvent(X,U,T)}beforeEach(function(){MockAjaxManager.addMethods();R=Ext.data.ProxyStore.prototype.load=function(){B.apply(this,arguments);if(E){this.flushLoad.apply(this,arguments)}return this};M=Ext.data.Model.schema;Ext.define("spec.Restaurant",{extend:"Ext.data.Model",fields:["name","cuisine"]})});afterEach(function(){MockAjaxManager.removeMethods();Ext.data.ProxyStore.prototype.load=B;Ext.undefine("spec.Restaurant");M.clear(true);A=I=F=C=M=K=Ext.destroy(A)});describe("init",function(){it("should have the show in groups header unchecked when there's no groupField",function(){A=new Ext.grid.Panel({renderTo:Ext.getBody(),store:new Ext.data.Store({model:spec.Restaurant,data:[]}),width:200,height:200,title:"Restaurants",features:{ftype:"grouping"},columns:[{text:"Name",dataIndex:"name"},{text:"Cuisine",dataIndex:"cuisine"}]});expect(A.headerCt.getMenu().child("#groupToggleMenuItem").checked).toBe(false)});it("should have the show in groups header checked when there's a groupField",function(){A=new Ext.grid.Panel({renderTo:Ext.getBody(),store:new Ext.data.Store({model:spec.Restaurant,groupField:"cuisine",data:[]}),width:200,height:200,title:"Restaurants",features:{ftype:"grouping"},columns:[{text:"Name",dataIndex:"name"},{text:"Cuisine",dataIndex:"cuisine"}]});expect(A.headerCt.getMenu().child("#groupToggleMenuItem").checked).toBe(true)});it("should retain the direction when grouping is disabled then enabled",function(){var U=Ext.create("Ext.grid.feature.Grouping",{}),T=false;A=new Ext.grid.Panel({renderTo:Ext.getBody(),store:new Ext.data.Store({model:spec.Restaurant,groupField:"cuisine",groupDir:"DESC",data:[{name:"Beardog's",cuisine:"Home cooking"},{name:"World Service",cuisine:"Poncy"}]}),width:200,height:200,title:"Restaurants",features:[U],columns:[{text:"Name",dataIndex:"name"},{text:"Cuisine",dataIndex:"cuisine"}]});expect(A.store.getAt(0).get("cuisine")).toEqual("Poncy");expect(A.store.getAt(1).get("cuisine")).toEqual("Home cooking");A.view.on({refresh:function(){T=true},single:true});U.disable();expect(T).toBe(true);expect(A.store.getAt(0).get("cuisine")).toEqual("Poncy");expect(A.store.getAt(1).get("cuisine")).toEqual("Home cooking");U.enable();expect(A.store.getAt(0).get("cuisine")).toEqual("Poncy");expect(A.store.getAt(1).get("cuisine")).toEqual("Home cooking")});it("should clear groupers when the feature is configured as disabled",function(){A=new Ext.grid.Panel({renderTo:Ext.getBody(),store:new Ext.data.Store({model:spec.Restaurant,groupField:"cuisine",data:[]}),width:200,height:200,features:[new Ext.grid.feature.Grouping({disabled:true})],columns:[{text:"Name",dataIndex:"name"},{text:"Cuisine",dataIndex:"cuisine"}]});expect(A.getStore().getGrouper()).toBeNull()});it("should disable the show in groups header when the feature is configured as disabled",function(){A=new Ext.grid.Panel({renderTo:Ext.getBody(),store:new Ext.data.Store({model:spec.Restaurant,groupField:"cuisine",data:[]}),width:200,height:200,features:[new Ext.grid.feature.Grouping({disabled:true})],columns:[{text:"Name",dataIndex:"name"},{text:"Cuisine",dataIndex:"cuisine"}]});var T=A.headerCt.items.getAt(0);A.headerCt.showMenuBy(null,T.triggerEl,T);expect(A.headerCt.getMenu().child("#groupToggleMenuItem").isDisabled()).toBe(true)});describe("view.isGrouping property",function(){it("should be set on the view if `groupField` is configured",function(){Q({groupField:"cuisine"});expect(I.isGrouping).toBe(true)});it("should not be set on the view if `groupField` is not configured",function(){Q();expect(I.isGrouping).toBe(false)});it("should be set on the view if `grouper` is configured",function(){Q({grouper:"cuisine"});expect(I.isGrouping).toBe(true)});it("should not be set on the view if `grouper` is not configured",function(){Q();expect(I.isGrouping).toBe(false)})});it("should not be collapsed",function(){Q({data:[{name:"Germanicus",cuisine:"Roman"},{name:"Alexander",cuisine:"Greek"}],groupField:"cuisine"});expect(K.getMetaGroup("Roman").isCollapsed).toBe(false);expect(K.getMetaGroup("Greek").isCollapsed).toBe(false)})});describe("mouse interaction",function(){var a,X=[{projectId:100,project:"Ext Forms: Field Anchoring",taskId:112,description:"Integrate 2.0 Forms with 2.0 Layouts",estimate:6,rate:150,due:"06/24/2007"},{projectId:100,project:"Ext Forms: Field Anchoring",taskId:113,description:"Implement AnchorLayout",estimate:4,rate:150,due:"06/25/2007"},{projectId:100,project:"Ext Forms: Field Anchoring",taskId:114,description:"Add support for multiple<br>types of anchors",estimate:4,rate:150,due:"06/27/2007"},{projectId:100,project:"Ext Forms: Field Anchoring",taskId:115,description:"Testing and debugging",estimate:8,rate:0,due:"06/29/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:101,description:'Add required rendering "hooks" to GridView',estimate:6,rate:100,due:"07/01/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:102,description:"Extend GridView and override rendering functions",estimate:6,rate:100,due:"07/03/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:103,description:"Extend Store with grouping functionality",estimate:4,rate:100,due:"07/04/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:121,description:"Default CSS Styling",estimate:2,rate:100,due:"07/05/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:104,description:"Testing and debugging",estimate:6,rate:100,due:"07/06/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:105,description:"Ext Grid plugin integration",estimate:4,rate:125,due:"07/01/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:106,description:"Summary creation during rendering phase",estimate:4,rate:125,due:"07/02/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:107,description:"Dynamic summary updates in editor grids",estimate:6,rate:125,due:"07/05/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:108,description:"Remote summary integration",estimate:4,rate:125,due:"07/05/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:109,description:"Summary renderers and calculators",estimate:4,rate:125,due:"07/06/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:110,description:"Integrate summaries with GroupingView",estimate:10,rate:125,due:"07/11/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:111,description:"Testing and debugging",estimate:8,rate:125,due:"07/15/2007"}],T,W,U,Z,Y=function(){W=!W;var b=a.lockedGrid.getView();b.getFeature("group").toggleSummaryRow(W);b.refresh();b=a.normalGrid.getView();b.getFeature("group").toggleSummaryRow(W);b.refresh()},V=false;afterEach(function(){a.destroy();T.destroy();Ext.undefine("spec.Task");V=false});beforeEach(function(){Ext.define("spec.Task",{extend:"Ext.data.Model",idProperty:"taskId",fields:[{name:"projectId",type:"int"},{name:"project",type:"string"},{name:"taskId",type:"int"},{name:"description",type:"string"},{name:"estimate",type:"float"},{name:"rate",type:"float"},{name:"due",type:"date",dateFormat:"m/d/Y"}]});T=new Ext.data.Store({model:"spec.Task",data:X,sorters:{property:"due",direction:"ASC"},groupField:"project"});W=true;a=new Ext.grid.Panel({width:800,height:450,frame:true,title:"Sponsored Projects",iconCls:"icon-grid",renderTo:document.body,columnLines:true,store:T,features:[{id:"group",ftype:"groupingsummary",groupHeaderTpl:"{name}",hideGroupedHeader:true,enableGroupingMenu:false},{ftype:"summary",dock:"bottom"}],columns:[{text:"Task",width:300,locked:true,tdCls:"task",sortable:true,dataIndex:"description",variableRowHeight:true,hideable:false,summaryType:"count",summaryRenderer:function(d,b,c){return((d===0||d>1)?"("+d+" Tasks)":"(1 Task)")},field:{xtype:"textfield"}},{header:"Project",width:180,sortable:true,dataIndex:"project"},{header:"Schedule",columns:[{header:"Due Date",width:125,sortable:true,dataIndex:"due",summaryType:"max",renderer:Ext.util.Format.dateRenderer("m/d/Y"),summaryRenderer:Ext.util.Format.dateRenderer("m/d/Y")},{header:"Estimate",width:125,sortable:true,dataIndex:"estimate",summaryType:"sum",renderer:function(g,d,c,f,h,e,b){return g+" hours"},summaryRenderer:function(d,b,c){return d+" hours"}},{header:"Rate",width:125,sortable:true,renderer:Ext.util.Format.usMoney,summaryRenderer:Ext.util.Format.usMoney,dataIndex:"rate",summaryType:"average"},{header:"Cost",width:114,flex:true,sortable:false,groupable:false,renderer:function(g,d,c,f,h,e,b){return Ext.util.Format.usMoney(c.get("estimate")*c.get("rate"))},summaryType:function(d,c){var e=0,g=d.length,f=0,b;for(;e<g;++e){b=d[e];f+=b.get("estimate")*b.get("rate")}return f},summaryRenderer:Ext.util.Format.usMoney}]}],viewConfig:{listeners:{viewready:function(){V=true}}}});U=a.lockedGrid.view.getFeature("group")});it("should disable grouping without throwing an error",function(){var b=a.normalGrid.getView().el.query("tr").length;expect(a.normalGrid.getView().hasVariableRowHeight()).toBe(true);U.disable();expect(a.normalGrid.getView().el.query("tr").length).toBeLessThan(b)});(Ext.isIE?xit:it)("should respond to mouse events",function(){var b,c;waitsFor(function(){return V});runs(function(){Z=U.getRecordGroup(a.store.getAt(0));U.collapse(Z.getGroupKey());expect(a.normalGrid.view.all.getCount()).toBe(13);Y();b=a.normalGrid.headerCt;c=b.items.items[1];c.move(0,3);var f=a.store.data.findBy(function(h){return h.data.description==='Add required rendering "hooks" to GridView'});var e=a.normalGrid.view.getNode(f);var d=a.normalGrid.view.getRow(f);expect(Ext.fly(e).hasCls("x-grid-item")).toBe(true);expect(Ext.fly(e).hasCls("x-grid-item-alt")).toBe(true);expect((d.innerText||d.textContent).replace(/\r/g,"").replace(/\n/g,"")).toEqual("6 hours$100.00$600.0007/01/2007");Y();var g=a.normalGrid.view.all.item(0).dom;expect(Ext.fly(g).hasCls("x-grid-item")).toBe(true);c.move(3,0)});waits(50);runs(function(){var e=a.normalGrid.view.all.item(0).dom;var d=Ext.fly(e).down("tr.x-grid-row-summary",true);expect((d.innerText||d.textContent).replace(/\n/g,"").replace(/\r/g,"")).toBe("06/29/200722 hours$112.50$2,100.00")})});it("should collapse all other groups when CRTL/click on group header",function(){waitsFor(function(){return V});runs(function(){var d=a.lockedGrid.view.findFeature("groupingsummary"),c=d.dataSource,b=d.getGroup(T.getAt(0)),e=b.getGroupKey();groupHeader=d.getHeaderNode(e);expect(c.getCount()).toEqual(T.getCount());d.collapse(e);expect(c.getCount()).toEqual(T.getCount()-b.getRange().length+1);d.onGroupClick(a.lockedGrid.view,groupHeader,e,{ctrlKey:true});expect(c.getCount()).toEqual(Ext.Object.getKeys(d.getCache().map).length-1+b.getRange().length)})})});describe("reconfiguring and destruction",function(){var U;function T(){return new Ext.data.Store({model:spec.Restaurant,data:[],autoDestroy:true})}beforeEach(function(){U=new Ext.grid.feature.Grouping({});A=new Ext.grid.Panel({renderTo:Ext.getBody(),store:T(),width:200,height:200,features:[U],columns:[{text:"Name",dataIndex:"name"},{text:"Cuisine",dataIndex:"cuisine"}]})});afterEach(function(){Ext.destroy(U);U=null});it("should retain the store when the grid is reconfigured with a null store",function(){var V=U.dataSource;A.reconfigure(null,[{text:"Foo"}]);expect(U.dataSource).toBe(V)});it("should not call the Grouping's dataSource (GroupStore) bindStore method when reconfigured with a new store",function(){var V=new Ext.data.Store({model:spec.Restaurant,data:[]}),W;W=U.dataSource;spyOn(W,"bindStore");A.reconfigure(V);expect(W.bindStore).toHaveBeenCalled()});it("should create the proper groups when reconfigured with a new store",function(){var Y=[{name:"Cheesecake Factory",cuisine:"American"},{name:"University Cafe",cuisine:"American"},{name:"Nola's",cuisine:"Cajun"},{name:"House of Bagels",cuisine:"Bagels"},{name:"The Prolific Oven",cuisine:"Sandwiches"},{name:"La Strada",cuisine:"Italian"},{name:"Buca di Beppo",cuisine:"Italian"},{name:"Pasta?",cuisine:"Italian"}],X={fields:["name","cuisine"],groupField:"cuisine",sorters:["cuisine","name"],data:Y},W=new Ext.data.Store(X),V=new Ext.data.Store(X),Z;A.reconfigure(V);Z=W.getGroups().getByKey("American");expect(Z).toBeDefined();expect(Z.items.length).toBe(2)});it("reconfiguring a grid using buffered rendering and grouping should bind the groupStore to the plugin",function(){var V=new Ext.grid.Panel({width:100,height:100,store:T(),features:U,columns:[{text:"Name",dataIndex:"name",width:100}],renderTo:Ext.getBody()});V.reconfigure(T());expect(V.view.bufferedRenderer.store.isFeatureStore).toBe(true);V.destroy()});it("should unwind all listeners set on the dataSource after grid destruction",function(){var V=U.dataSource;spyOn(V,"bindStore");A.destroy();expect(V.bindStore).toHaveBeenCalledWith(null);expect((V.store||{destroyed:true}).destroyed).toBe(true)})});describe("grouping + RowExpander plugin",function(){it("should return the model associated by the data node",function(){var V=new Ext.grid.feature.Grouping({ftype:"grouping",startCollapsed:true}),T,U;A=new Ext.grid.Panel({renderTo:Ext.getBody(),store:new Ext.data.Store({model:spec.Restaurant,groupField:"cuisine",groupDir:"DESC",data:[{name:"Beardog's",cuisine:"Home cooking"},{name:"World Service",cuisine:"Poncy"}]}),width:200,height:200,title:"Restaurants",deferRowRender:false,features:V,plugins:[{ptype:"rowexpander",rowBodyTpl:["<p>{name}</p>"]}],columns:[{text:"Name",dataIndex:"name"},{text:"Cuisine",dataIndex:"cuisine"}]});T=A.view;U=T.body.down(".x-group-hd-container",true);expect(T.getRecord(U).isModel).toBe(true)})});describe("sending to server",function(){describe("remoteRoot",function(){it("should work when there are no groups",function(){var T=new Ext.data.Store({fields:["name","seniority","department"],groupField:"department",data:{root:[]},proxy:{type:"memory",data:{root:[]},reader:{type:"json",rootProperty:"root"}}}),V=new Ext.grid.feature.Grouping({ftype:"grouping",showSummaryRow:true,remoteRoot:"summaryData"}),U=false;A=new Ext.grid.Panel({store:T,width:500,height:275,renderTo:Ext.getBody(),columns:[{text:"Name",dataIndex:"name"},{text:"Seniority",dataIndex:"seniority"}],features:V});T.proxy.data={total:0,summaryData:[{name:"Test",seniority:1}],root:[]};T.load({callback:function(){U=true}});waitsFor(function(){return U});runs(function(){expect(V.refreshData.summaryData).toBeDefined()})})})});describe("use of groupFn",function(){var T,U;beforeEach(function(){T=new Ext.grid.Panel({renderTo:document.body,width:600,height:300,columns:[{dataIndex:"text",flex:1}],features:[{ftype:"grouping"}],store:{data:[{text:"a"}],fields:["text"],grouper:{groupFn:function(V){if(V.get("text")==="a"){return 0}}},xtype:"store"},xtype:"grid"});U=T.view.findFeature("grouping")});afterEach(function(){T.destroy()});it("should collapse correctly",function(){U.collapse(T.store.getGroups().first().getGroupKey())})});describe("stateful",function(){var b,U,g,h,W,Y,Z,d,c,X;function e(i,l,k,j){b=[{student:"Student 1",subject:"Math",mark:84,allowance:15.5},{student:"Student 1",subject:"Science",mark:72,allowance:10.75},{student:"Student 2",subject:"Math",mark:96,allowance:100.75},{student:"Student 2",subject:"Science",mark:68,allowance:1.55}];Ext.define("spec.Grouping",{extend:"Ext.data.Model",fields:["student","subject",{name:"mark",type:"int"},{name:"allowance",type:"float"}]});h=new Ext.data.Store(Ext.apply({model:"spec.Grouping",data:b,groupField:"subject",autoDestroy:true},j));W=new Ext.grid.feature.Grouping(Ext.apply({ftype:"grouping"},l));k=k||[{itemId:"studentColumn",dataIndex:"student",text:"Name",summaryType:"count",summaryRenderer:function(n,m,o){Z=arguments;return Ext.String.format("{0} student{1}",n,n!==1?"s":"")}},{itemId:"markColumn",dataIndex:"mark",text:"Mark",summaryType:"average"},{itemId:"noDataIndexColumn",summaryType:function(o,n){var p=0,r=o.length,q=0,m;for(;p<r;++p){m=o[p];q+=m.get("allowance")}return q},summaryRenderer:Ext.util.Format.usMoney,renderer:function(r,o,n,q,s,p,m){return Ext.util.Format.usMoney(n.get("allowance"))}}];U=new Ext.grid.Panel(Ext.apply({store:h,columns:k,width:600,height:300,features:W,renderTo:Ext.getBody()},i));g=U.view;X=W.summaryRowSelector}function V(){U.destroy();U=g=h=W=Y=Z=c=null;Ext.undefine("spec.Grouping");Ext.data.Model.schema.clear()}function a(i){e({stateful:true,stateId:d.toString()},null,null,i||{})}function T(k,j){var i=k.groupField;a(k);c=U.headerCt.down('[dataIndex="'+(i||"student")+'"]');if(!j){expect(U.store.isGrouped()).toBe(!!i);jasmine.fireMouseEvent(c.triggerEl.dom,"click");jasmine.fireMouseEvent(c.ownerCt.menu.down("#groupMenuItem").itemEl.dom,"click")}else{c.sort(j)}U.saveState();f(i,j);f(i,j)}function f(i,j){V();a({groupField:i});if(!j){expect(U.store.isGrouped()).toBe(true);if(i){expect(U.getState().storeState.grouper.property).toBe(i)}}else{expect(U.getState().storeState.sorters[0].direction).toBe(j)}U.saveState()}beforeEach(function(){new Ext.state.Provider();d=new Date().getTime()});afterEach(function(){Ext.state.Manager.getProvider().clear();V()});describe("groupField",function(){function i(j){var k=!j?"not":"";describe("when groupField is "+k+" defined",function(){it("should maintain the grouping",function(){T({groupField:j},"ASC")});it("should maintain the sort direction",function(){T({groupField:j},"DESC")});describe("autoLoad",function(){it("should render the groups correctly when not auto-loading",function(){T({autoLoad:false,groupField:j},"ASC")});it("should render the groups correctly when auto-loading",function(){T({autoLoad:true,groupField:j},"ASC")})});describe("sorting",function(){it("should render the groups correctly when local sorting",function(){T({autoLoad:false,groupField:j,remoteSort:false},"ASC")})})})}i("student");i(null)});it("should lookup the correct record for a row when clicked when groups are collapsed",function(){var j,i;a();c=U.headerCt.down('[dataIndex="student"]');jasmine.fireMouseEvent(c.triggerEl.dom,"click");jasmine.fireMouseEvent(c.ownerCt.menu.down("#groupMenuItem").itemEl.dom,"click");U.saveState();V();a();W.collapse("Student 1");j=g.getRowByRecord(W.dataSource.getAt(2)).firstChild;jasmine.fireMouseEvent(j,"click");i=U.selModel.getSelection();expect(Ext.fly(j).up(g.getItemSelector()).hasCls("x-grid-item-selected")).toBe(true);expect(i.length).toBe(1);expect(i[0]===g.getRecord(j)).toBe(true)});it("should persist the .isGrouping property on the view when grouped",function(){var j,i;a();c=U.headerCt.down('[dataIndex="student"]');jasmine.fireMouseEvent(c.triggerEl.dom,"click");jasmine.fireMouseEvent(c.ownerCt.menu.down("#groupMenuItem").itemEl.dom,"click");expect(g.isGrouping).toBe(true);U.saveState();V();a();expect(g.isGrouping).toBe(true)})});describe("collapsed state",function(){var U=Ext.grid.feature.Grouping.prototype.hdCollapsedCls,W,X,V;function T(a,Z,Y){Q(Ext.apply({data:[{name:"Sulla",cuisine:"Roman"},{name:"Pericles",cuisine:"Greek"}],groupField:"cuisine"},a),Z,Y);V=I.body;X=K.getMetaGroup("Greek");W=K.getMetaGroup("Roman")}afterEach(function(){W=X=V=null});describe("init",function(){describe("startCollapsed",function(){function Y(a,Z){it("should honor the `startCollapsed` config when "+a,function(){T(null,{startCollapsed:a},{bufferedRenderer:Z});expect(W.isCollapsed).toBe(a);expect(X.isCollapsed).toBe(a);expect(!!V.down(I.itemSelector).down("."+U)).toBe(a)})}Y(false,true);Y(false,false);Y(true,true);Y(true,false)})});describe("collapse state after grid store operations",function(){describe("initial collapse state",function(){function Y(Z,a){it("should retain its collapsed state of "+a+" after the grid store is filtered and cleared",function(){T(null,{startCollapsed:Z});expect(W.isCollapsed).toBe(Z);expect(X.isCollapsed).toBe(Z);F.addFilter({property:"cuisine",value:a});F.clearFilter();expect(W.isCollapsed).toBe(Z);expect(X.isCollapsed).toBe(Z)})}Y(true,"Roman");Y(false,"Roman");Y(true,"Greek");Y(false,"Greek")});describe("expanding and collapsing",function(){function Y(a,c,b){var Z=c==="expand";it("should retain its state of "+!Z,function(){T(null,{startCollapsed:Z});K[c](a);F.addFilter({property:"cuisine",value:b});F.clearFilter();expect(K.getMetaGroup(a).isCollapsed).toBe(!Z)});it("should have the "+(Z?"collapseTip":"expandTip")+" tooltip",function(){var d;T(null,{startCollapsed:Z});K[c](a);d=I.body.query("."+K.ctCls+">div div",true)[a==="Greek"?0:1];expect(d.getAttribute("data-qtip")).toEqual(Z?K.collapseTip:K.expandTip)})}describe("when group is expanded before store operations",function(){describe("when expanded group is filtered",function(){Y("Greek","expand","Roman");Y("Roman","expand","Greek")});describe("when expanded group is not filtered",function(){Y("Greek","expand","Greek");Y("Roman","expand","Roman")})});describe("when group is collapsed before store operations",function(){describe("when collapsed group is filtered",function(){Y("Greek","collapse","Roman");Y("Roman","collapse","Greek")});describe("when collapsed group is not filtered",function(){Y("Greek","collapse","Greek");Y("Roman","collapse","Roman")})})})})});describe("referencing the groups and metaGroups",function(){var U,V;function T(X,W){Q(Ext.apply({data:[{name:"Cincinnatus",cuisine:"Roman"},{name:"Cleisthenes",cuisine:"Greek"}],groupField:"cuisine"},X),W);V=K.getMetaGroup("Greek");U=K.getMetaGroup("Roman")}afterEach(function(){U=V=null});describe("init",function(){function W(Y){Q({data:[{name:"Cincinnatus",cuisine:"Roman"},{name:"Cleisthenes",cuisine:"Greek"}],groupField:Y})}function X(Z){var a=Z?"":"not",Y=Z?"cuisine":null;describe("when store is "+a+" grouped",function(){it("should be able to lookup a store group",function(){W(Y);expect(!!K.getGroup("Roman")).toBe(Z);expect(!!K.getGroup("Greek")).toBe(Z)});it("should "+a+" be able to lookup a metaGroup",function(){var b;W(Y);b=K.getCache();expect(!!b["Roman"]).toBe(Z);expect(!!b["Greek"]).toBe(Z)})})}X(true);X(false)});describe("after store operations",function(){function X(b,a,Z,Y){it(a,function(){T();A.store.addFilter({property:"cuisine",value:"Roman"});if(b==="getGroup"){expect(!!K.getGroup(Z)).toBe(Y)}else{expect(K.getCache(Z)[Z]).toBeDefined()}})}function W(a,Z,Y){it(Z,function(){T();A.store.setGrouper(null);if(a==="getGroup"){expect(K.getGroup(Y)).toBeUndefined()}else{expect(K.getCache(Y)[Y]).toBeUndefined()}})}describe("looking up groups",function(){describe("when groups are filtered",function(){X("getGroup","should not be able to lookup the group if filtered","Greek",false);X("getGroup","should be able to lookup the group if not filtered","Roman",true)});describe("when the grouper is removed",function(){W("getGroup","should not be able to lookup the group if removed","Greek");W("getGroup","should not be able to lookup the group if removed","Roman")})});describe("looking up metaGroups",function(){describe("when groups are filtered",function(){X("getCache","should not remove the metaGroup if it is not among the filtered values","Greek",false);X("getCache","should not remove the metaGroup if it is among the filtered values","Roman",false)});describe("when the grouper is removed",function(){W("getCache","should remove the metaGroup if the grouper is removed","Greek");W("getCache","should remove the metaGroup if the grouper is removed","Roman")})});describe("groupFn and types",function(){var Y;beforeEach(function(){Ext.define("spec.Movie",{extend:"Ext.data.Model",fields:["name","type",{name:"released",type:"date"}]})});afterEach(function(){Ext.undefine("spec.Movie");Y=null});it("should be able to work for complex types",function(){Q({model:"spec.Movie",grouper:{property:"released",groupFn:function(Z){return Ext.Date.format(Z.get("released"),"Y-m-d")}},data:[{name:"Star Wars",genre:"fantasy",released:new Date("May 25, 1977")},{name:"The Godfather",genre:"drama",released:new Date("March 14, 1972")}]},null,{width:400,columns:[{text:"Name",dataIndex:"name"},{text:"Genre",dataIndex:"genre"},{text:"Released",dataIndex:"released"}]});Y=F.getAt(0);Y.set("genre","Sci-Fi");expect(K.getGroup(Y)).toBeDefined();expect(K.getMetaGroup(Y)).toBeDefined()})})})});describe("the metaGroupCache",function(){it("should create a metaGroupCache object",function(){Q();expect(K.metaGroupCache).toBeDefined()});it("should create a metaGroupCache.map object",function(){Q();expect(K.metaGroupCache.map).toEqual({})});it("should destroy this object when destroyed",function(){Q();A.destroy();expect(K.metaGroupCache).toBe(null)});describe("preserving state across operations",function(){describe("sorting",function(){beforeEach(function(){Q({data:[{name:"Utley",cuisine:"Please"}],groupField:"name"});A.headerCt.visibleColumnManager.getColumns()[0].sort()});it("should preserve the group",function(){expect(K.getCache().Utley).toBeDefined()});it("should preserve the group in the metaGroupCache map",function(){expect(K.getCache().map.Utley).toBeDefined()})})});describe("locked grids",function(){var T,U;beforeEach(function(){Q(null,null,{enableLocking:true});T=I.lockedView.summaryFeature;U=I.normalView.summaryFeature});afterEach(function(){T=U=null});it("should share this object with any locking partner",function(){expect(T.lockingPartner.metaGroupCache).toBe(T.metaGroupCache);expect(U.lockingPartner.metaGroupCache).toBe(U.metaGroupCache)});it("should destroy this object and that of its locking partner when destroyed",function(){A.destroy();expect(T.metaGroupCache).toBe(null);expect(U.metaGroupCache).toBe(null);expect(T.lockingPartner.metaGroupCache).toBe(null);expect(U.lockingPartner.metaGroupCache).toBe(null)})})});describe("the hideGroupedHeader config",function(){it("should default to false",function(){Q({groupField:"cuisine"});expect(K.hideGroupedHeader).toBe(false)});it("should honor a given config",function(){Q({groupField:"cuisine"},{hideGroupedHeader:true});expect(K.hideGroupedHeader).toBe(true)});it("should enable both of the Grouping's menu items",function(){var T;Q({groupField:"name"});T=L();expect(T.down("#groupMenuItem").disabled).toBe(false);expect(T.down("#groupToggleMenuItem").disabled).toBe(false)});it("should check the 'Show in groups' menu item by default when shown",function(){Q({groupField:"name"},{enableGroupingMenu:true,enableNoGroups:true});J();expect(C.down("#groupToggleMenuItem").checked).toBe(true)});it("should disable the 'Show in groups' menu item when it's unchecked",function(){Q({groupField:"name"});J();H("groupToggleMenuItem");expect(C.down("#groupToggleMenuItem").disabled).toBe(true)});describe("when false",function(){it("should not hide the column whose dataIndex maps to the store.groupField",function(){var T="cuisine";Q({groupField:T});expect(A.columnManager.getHeaderByDataIndex(T).hidden).toBe(false)})});describe("when true",function(){var T;afterEach(function(){T=null});it("should hide the column whose dataIndex maps to the store.groupField",function(){T="cuisine";Q({groupField:T},{hideGroupedHeader:true});expect(A.columnManager.getHeaderByDataIndex(T).hidden).toBe(true)});it("should show the column whose dataIndex maps to the store.groupField when toggled",function(){var U;T="cuisine";Q({groupField:T},{hideGroupedHeader:true});U=A.columnManager;expect(U.getHeaderByDataIndex(T).hidden).toBe(true);H("groupToggleMenuItem");expect(U.getHeaderByDataIndex(T).hidden).toBe(false);H("groupMenuItem",U.getHeaderByDataIndex(T));expect(U.getHeaderByDataIndex(T).hidden).toBe(true)})})});function S(T){describe("groupers and "+(T?"buffered":"data")+" store",function(){var V=Ext.Array.contains,X,W,U;beforeEach(function(){X=[{cuisine:"Tuna Delight",name:{first:"Bob",middle:"The",last:"Cat"}},{cuisine:"Beef Gizzards",name:{first:"Chuck",middle:"The",last:"Cat"}}];U={buffered:T,data:!T?X:null};if(T){U.pageSize=20;U.proxy={type:"ajax",url:"fakeUrl"}}});afterEach(function(){X=W=U=null});describe("no defined groupers",function(){it("should still group on init when grouping by a groupField with a complex type",function(){Q(Ext.apply({groupField:"name"},U));if(T){F.load();N(X)}expect(K.metaGroupCache["name"]).toBeDefined()});it("should still group when grouping by a groupField with a complex type",function(){Q(Ext.apply({groupField:"cuisine"},U));if(T){F.load();N(X)}H("groupMenuItem");expect(K.metaGroupCache["name"]).toBeDefined()})});describe("defined groupers",function(){describe("startCollapsed",function(){function Y(Z){describe("when "+Z,function(){describe("init",function(){it("should not have any groupers by default",function(){Q(U);if(T){F.load();N(X)}expect(K.groupers).toBe(null)});it("should honor configured groupers",function(){Q(U,{groupers:[{property:"name",groupFn:Ext.emptyFn},{property:"cuisine",groupFn:Ext.emptyFn}]});W=K.groupers;if(T){F.load();N(X)}expect(W).toBeDefined();expect(W.length).toBe(2);expect(W[0].property).toBe("name");expect(W[1].property).toBe("cuisine")})});describe("after init",function(){var a=[],c=[],b;beforeEach(function(){Q({groupField:"name",data:X},{groupers:[{property:"name",groupFn:function(f){var e=f.data.name,d=[e.first,e.middle,e.last].join(" ");if(!V(a,d)){a.push(d)}return d}}],startCollapsed:Z},{columns:[{text:"Name",dataIndex:"name",renderer:function(d){if(!V(c,d)){c.push(d)}return[d.first,d.middle,d.last].join(" ")}}]});b=K.metaGroupCache});afterEach(function(){a.length=c.length=0;b=null});describe("metaGroupCache",function(){it("should have a named reference to each group that was determined by the groupFn",function(){expect(!!b[a[0]]).toBe(true);expect(!!b[a[1]]).toBe(true)});describe("tpl values",function(){var d="Chuck The Cat";it('should have a "name" value computed by the column renderer',function(){expect(b.name).toBe(d)});it('should have a "renderedGroupValue" value computed by the column renderer',function(){expect(b.renderedGroupValue).toBe(d)});it('should have the same value for "name" and "renderedGroupValue"',function(){expect(b.name).toBe(b.renderedGroupValue)});it('should have a "groupValue" value determined by looking up the groupField on the record',function(){expect(b.groupValue).toBe(P(1).get(b.groupField))})})});describe("column renderers",function(){it("should be passed a complex data type as the value",function(){expect(Ext.isObject(c[0])).toBe(true);expect(Ext.isObject(c[1])).toBe(true)})});describe("the UI",function(){var d;afterEach(function(){d=null});describe("group container rows",function(){it("should create a group container row for each group with the correct group name",function(){d=I.body.query("."+K.ctCls,true);expect((d[0].textContent||d[0].innerText).replace(/\s/g,"")).toBe("Name:BobTheCat");expect((d[1].textContent||d[1].innerText).replace(/\s/g,"")).toBe("Name:ChuckTheCat")})});if(!Z){describe("data rows",function(){it("should correctly render the cell value",function(){d=I.body.query(".x-grid-row");expect((d[0].textContent||d[0].innerText).replace(/\s/g,"")).toBe("BobTheCat");expect((d[1].textContent||d[1].innerText).replace(/\s/g,"")).toBe("ChuckTheCat")})})}})})})}Y(true);Y(false)});describe("grouping via the UI",function(){beforeEach(function(){Q({groupField:"cuisine",data:X},{groupers:[{property:"name",groupFn:function(Z){var Y=Z.data.name;return[Y.first,Y.middle,Y.last].join(" ")}}]},{columns:[{text:"Name",dataIndex:"name",renderer:function(Y){return[Y.first,Y.middle,Y.last].join(" ")}},{text:"Cuisine",dataIndex:"cuisine"}]})});describe('the "Group by this field" menu item',function(){function Y(){expect(K.metaGroupCache.groupField).toBe("cuisine");expect(K.metaGroupCache.groupValue).toBe(X[0].cuisine);H("groupMenuItem");waits(100);runs(function(){expect(K.metaGroupCache.groupField).toBe("name");expect(K.metaGroupCache.groupValue).toBe(X[1].name)})}it("should work when grouping by a complex data type",function(){Y()});it("should work when toggling",function(){Y();H("groupMenuItem",A.columns[1]);Y()})});describe('the "Show in groups" check menu item',function(){function Y(){H("groupMenuItem");expect(K.metaGroupCache.groupField).toBe("name");expect(K.metaGroupCache.groupValue).toBe(X[1].name)}it("should work when toggling",function(){Y();H("groupToggleMenuItem",A.columns[1]);Y()})})})})})}S(true);S(false);describe("groupKey values",function(){var T;function U(V){Q({data:[{name:"Pericles",cuisine:V},{name:"Sulla",cuisine:"Roman"}],groupField:"cuisine"})}afterEach(function(){T=null});describe("non-empty string values",function(){beforeEach(function(){T="5th Century Athens"});it("should work for string values",function(){U(T);expect(F.getGroups().getAt(0).getGroupKey()).toBe(T)});it("should create a metaGroup",function(){U(T);expect(!!K.metaGroupCache[T]).toBe(true)})});describe("empty string values",function(){beforeEach(function(){T=""});it("should work for empty string",function(){U("");expect(F.getGroups().getAt(0).getGroupKey()).toBe("")});it("should create a metaGroup",function(){U("");expect(!!K.metaGroupCache[T]).toBe(true)})});describe("null values",function(){beforeEach(function(){T=null});it("should work for null values",function(){U(T);expect(F.getGroups().getAt(0).getGroupKey()).toBe("")});it("should create a metaGroup with an empty string key",function(){U(T);expect(!!K.metaGroupCache[""]).toBe(true)})});describe("undefined values",function(){beforeEach(function(){T=undefined});it("should work for undefined values",function(){U(T);expect(F.getGroups().getAt(0).getGroupKey()).toBe("")});it("should create a metaGroup with an empty string key",function(){U(T);expect(!!K.metaGroupCache[""]).toBe(true)})})});describe("clearing the bound data store",function(){var U,T;beforeEach(function(){A=Ext.create("Ext.grid.Panel",{renderTo:Ext.getBody(),store:Ext.create("Ext.data.Store",{model:spec.Restaurant,groupField:"cuisine",groupDir:"DESC",data:[{name:"Beardog's",cuisine:"Home cooking"},{name:"World Service",cuisine:"Poncy"}]}),width:200,height:200,title:"Restaurants",deferRowRender:false,features:[{ftype:"grouping"}],columns:[{text:"Name",dataIndex:"name"},{text:"Cuisine",dataIndex:"cuisine"}]});U=A.store;T=A.view});afterEach(function(){U=T=null});it("should work",function(){expect(function(){U.removeAll()}).not.toThrow()});it("should clear the view",function(){expect(T.all.count).toBe(U.getCount());U.removeAll();expect(T.all.count).toBe(0)})});describe("update operations on the GroupStore",function(){describe("operating on the last field in a group",function(){function T(V){Q({model:spec.Restaurant,groupField:V||"cuisine",data:[{name:"Beardog's",cuisine:true}],filters:[{property:"cuisine",value:true}]});expect(F.data.length).toBe(1)}function U(V,W){describe(V,function(){it("should work when filtering the store",function(){T(W);expect(function(){F.filter("cuisine",false)}).not.toThrow();expect(F.data.length).toBe(0)});it("should work when setting the model",function(){T(W);expect(function(){F.getAt(0).set("cuisine",false)}).not.toThrow();expect(F.data.length).toBe(0)})})}U("when updated field is different than groupField","name");U("when updated field is the same as the groupField")})});describe("reconfiguring",function(){it("should update the view when a record is added after reconfiguring with a grouped store",function(){var U={fields:["name","type"],data:[{"name":"Larry","type":"user"},{"name":"Curly","type":"employee"}]},W=Ext.apply({groupField:"type"},U),T=new Ext.data.Store(U),X=new Ext.data.Store(W);var V=Ext.create({xtype:"grid",renderTo:document.body,columns:[{dataIndex:"name",text:"Name"}],features:{ftype:"grouping"},store:T});V.reconfigure(X);V.getStore().add({name:"Moe",type:"employee"});expect(V.getView().getNodes().length).toBe(3);V.destroy()})});describe("on store reload",function(){var T;beforeEach(function(){T=[{cuisine:"Tuna Delight",name:"Bob The Cat"},{cuisine:"Beef Gizzards",name:"Chuck The Cat"}]});afterEach(function(){T=null});it("should maintain the groupKey property to lookup the current group",function(){var U="Beef Gizzards",V;Q({data:T,groupField:"cuisine"});K.collapse(U);K.expand(U);V=K.getMetaGroup(U).placeholder.groupKey;F.load();N(T);K.collapse(U);expect(K.getMetaGroup(U).placeholder.groupKey).toBe(V)})});describe("adding new record to group",function(){describe("inserting in first position",function(){function T(V){Q({model:spec.Restaurant,groupField:"cuisine",sorters:{property:"name",direction:"ASC"},data:[{name:"Chicks' Ciao",cuisine:"Fine Dining"},{name:"Molly's Table",cuisine:"Fine Dining"},{name:"Pete's Place",cuisine:"Fine Dining"},{name:"World of Utley",cuisine:"Fine Dining"},{name:"Lily's Leapers",cuisine:"Fine Dining"},{name:"Who? Roo?",cuisine:"Fine Dining"}]},null,{height:500,bufferedRenderer:V});F.insert(0,{name:"Beardog's",cuisine:"Fine Dining"})}function U(V){it("should not create a new group in store, buffered rendering = "+V,function(){T(V);expect(F.getGroups().length).toBe(1)});it("should not create a new group in view, buffered rendering = "+V,function(){T(V);expect(I.body.el.query(".x-grid-group-hd").length).toBe(1)})}U(true);U(false)})})})