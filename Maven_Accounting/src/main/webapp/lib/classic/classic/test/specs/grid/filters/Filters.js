describe("Ext.grid.filters.Filters",function(){var A,L,I,G,C,K=false,J,D;function H(M){Ext.Ajax.mockComplete({status:200,responseText:Ext.encode(M||C)})}function B(){return Ext.Ajax.mockGetRequestXHR().options.operation.getFilters()}function F(N,M){K=false;I=new Ext.data.Store(Ext.apply({asynchronousLoad:true,autoDestroy:true,fields:["name","email","phone","age","dob"],data:C},N));G=new Ext.grid.filters.Filters({updateBuffer:0});A=new Ext.grid.Panel(Ext.apply({store:I,columns:[{header:"Name",dataIndex:"name",width:100},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100},{header:"Age",dataIndex:"age",width:100},{header:"DOB",dataIndex:"dob",width:100,type:"date",dateFormat:"m/d/Y"}],autoLoad:true,plugins:G,deferRowRender:false,viewConfig:{mouseOverOutBuffer:false,deferHighlight:false},height:200,width:500,renderTo:Ext.getBody()},M));K=true;if(I.hasPendingLoad()){I.flushLoad()}}function E(M,N){I=new Ext.data.TreeStore(Ext.apply({root:{name:"root",descr:"root",expanded:true,children:[{name:"Test 1",description:"My first text",leaf:true},{name:"Test 2",description:"The second text",leaf:true},{name:"Test 3",description:"The third text",leaf:true}]}},M));L=new Ext.tree.Panel(Ext.apply({columns:[{header:"Name",dataIndex:"name",filter:{type:"string"}},{header:"Description",dataIndex:"description",filter:{type:"string"}}],store:I,plugins:"gridfilters",rootVisible:false,renderTo:Ext.getBody()},N))}beforeEach(function(){J=Ext.data.Store.prototype.flushLoad;D=Ext.data.Store.prototype.load;Ext.data.Store.override({load:function(){this.callParent(arguments);if(K){this.flushLoad.apply(this,arguments)}return this},flushLoad:function(){if(!this.destroyed){this.flushCallCount=(this.flushCallCount||0)+1;this.callParent()}}});MockAjaxManager.addMethods();C=[{name:"Jimmy Page",email:"jimmy@page.com",phone:"555-111-1224",age:69,dob:new Date("1/22/1944")},{name:"Stevie Ray Vaughan",email:"stevieray@vaughan.com",phone:"555-222-1234",age:35,dob:new Date("1/22/1955")},{name:"John Scofield",email:"john@scofield.com",phone:"555-222-1234",age:59,dob:new Date("1/22/1954")},{name:"Robben Ford",email:"robben@ford.com",phone:"555-222-1244",age:60,dob:new Date("1/22/1953")},{name:"Wes Montgomery",email:"wes@montgomery.com",phone:"555-222-1244",age:45,dob:new Date("1/22/1923")},{name:"Jimmy Herring",email:"jimmy@herring.com",phone:"555-222-1254",age:50,dob:new Date("1/22/1962")},{name:"Alex Lifeson",email:"alex@lifeson.com",phone:"555-222-1254",age:60,dob:new Date("1/22/1953")},{name:"Kenny Burrell",email:"kenny@burrell.com",phone:"555-222-1254",age:82,dob:new Date("1/22/1930")}]});afterEach(function(){Ext.data.Store.prototype.load=D;Ext.data.Store.prototype.flushLoad=J;MockAjaxManager.removeMethods();A=L=G=Ext.destroy(A,L);I=Ext.destroy(I)});describe("initializing",function(){it('should set "local" to be true',function(){F();expect(G.local).toBe(true)});it("should create a filter when the data index does not map to an actual column",function(){F({},{columns:[{dataIndex:"bogus",filter:true}]});expect(A.columnManager.getHeaderByDataIndex("bogus").filter).toBeDefined()});describe("the store",function(){beforeEach(function(){F({},{columns:[{header:"Name",dataIndex:"name",width:100,filter:true},{header:"Email",dataIndex:"email",width:100,filter:{value:"stevie"}}]})});it("should bind the store to the feature",function(){expect(G.store).toBeDefined();expect(G.store).toBe(I)});it("should be a pointer to the grid store",function(){expect(G.store).toBe(G.grid.store)});it('should create a store filter on creation for each active filter (has a "value" property)',function(){expect(I.getFilters().getCount()).toBe(1)});it("should create a store filter id for each active filter",function(){expect(I.getFilters().getAt(0).getId()).toBe("x-gridfilter-email")})});describe("filter creation",function(){it("should be the type it was configured with",function(){F({},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"list"}},{header:"DOB",dataIndex:"dob",width:100,filter:{type:"date"}}]});expect(A.columnManager.getHeaderByDataIndex("dob").filter.type).toBe("date")});it('should be inactive if not filtered (no "value" property)',function(){F({},{columns:[{header:"Name",dataIndex:"name",width:100,filter:true}]});expect(A.columnManager.getHeaderByDataIndex("name").filter.active).toBe(false)});it('should be active if filtered (has a "value" property)',function(){F({},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{value:"kenny"}}]});expect(A.columnManager.getHeaderByDataIndex("name").filter.active).toBe(true)});describe("when filter = true",function(){var M;beforeEach(function(){F({},{columns:[{header:"Name",dataIndex:"name",filter:true},{header:"DOB",dataIndex:"dob",filter:true}]});M=A.columnManager});afterEach(function(){M=null});it("should create an inactive filter",function(){expect(M.getHeaderByDataIndex("dob").filter.active).toBe(false)});it("should create a default String filter type",function(){expect(M.getHeaderByDataIndex("dob").filter.type).toBe("string")})})})});describe("column cls decoration",function(){var M=Ext.grid.filters.Filters.prototype.filterCls,N;afterEach(function(){N=null});describe("works for both non-nested and nested columns",function(){it("should add the cls for columns configured with a value",function(){F(null,{columns:[{dataIndex:"name",filter:{value:"Ford"}},{columns:[{dataIndex:"age",filter:{type:"number",value:{lt:80}}}]},{dataIndex:"dob",filter:{type:"date"}},{dataIndex:"phone",filter:{type:"string"}}]});N=A.getColumnManager().getColumns();expect(N[0].getEl()).toHaveCls(M);expect(N[1].getEl()).toHaveCls(M);expect(N[2].getEl()).not.toHaveCls(M);expect(N[3].getEl()).not.toHaveCls(M)});it("should add the cls for columns when setting a value",function(){F(null,{columns:[{dataIndex:"name",filter:true},{columns:[{dataIndex:"age",filter:{type:"number"}}]}]});N=A.getColumnManager().getColumns();expect(N[0].getEl()).not.toHaveCls(M);N[0].filter.setValue("Foo");expect(N[0].getEl()).toHaveCls(M);expect(N[1].getEl()).not.toHaveCls(M);N[1].filter.setValue({eq:43});expect(N[1].getEl()).toHaveCls(M)});it("should add the cls for columns with a value restored from state",function(){Ext.state.Manager.getProvider().clear();F({saveStatefulFilters:true},{stateful:true,stateId:"filtersCls",columns:[{dataIndex:"name",filter:{type:"string"}},{columns:[{dataIndex:"email",filter:true}]}]});N=A.getColumnManager().getColumns();N[0].filter.setValue("stevie ray");N[1].filter.setValue("stevieray@vaughan.com");A.saveState();A.destroy();F({saveStatefulFilters:true},{stateful:true,stateId:"filtersCls",columns:[{dataIndex:"name",filter:{type:"string"}},{columns:[{dataIndex:"email",filter:true}]}]});N=A.getColumnManager().getColumns();expect(N[0].getEl()).toHaveCls(M);expect(N[1].getEl()).toHaveCls(M)});it("should remove the cls for columns when clearing a value",function(){F(null,{columns:[{dataIndex:"name",filter:{value:"x"}},{columns:[{dataIndex:"age",filter:{type:"number",value:{eq:43}}}]}]});N=A.getColumnManager().getColumns();expect(N[0].getEl()).toHaveCls(M);N[0].filter.setActive(false);expect(N[0].getEl()).not.toHaveCls(M);expect(N[1].getEl()).toHaveCls(M);N[1].filter.setActive(false);expect(N[1].getEl()).not.toHaveCls(M)})})});describe("store filtering",function(){var M;afterEach(function(){M=null});it("should not clear any filters added directly by the store when removing a feature filter",function(){var N=/scofield/,O;F({},{columns:[{dataIndex:"name",filter:{value:"lifeson"}}]});O=I.getFilters();M=A.columnManager.getHeaderByDataIndex("name").filter;expect(O.getCount()).toBe(1);expect(M.filter.getValue()).toBe("lifeson");I.addFilter({property:"name",value:N});expect(O.getCount()).toBe(2);M.setActive(false);expect(O.getCount()).toBe(1);expect(O.getAt(0).getValue()).toBe(N)});describe("filtering the store",function(){function N(O){F({},{columns:[{dataIndex:"name",filter:O?{value:"jimmy"}:undefined}]})}it("should not throw an error when removing a non-header filter",function(){N(true);var O=new Ext.util.Filter({property:"age",value:60});var P=I.getCount();I.getFilters().add(O);expect(I.getCount()).toBe(0);expect(function(){I.getFilters().remove(O)}).not.toThrow();expect(I.getCount()).toBe(P)});it("should not throw an error when removing a filter for a grid column that does not have a filter UI",function(){N(false);var O=new Ext.util.Filter({property:"name",value:"invalid"});var P=I.getCount();I.getFilters().add(O);expect(I.getCount()).toBe(0);expect(function(){I.getFilters().remove(O)}).not.toThrow();expect(I.getCount()).toBe(P)})})});describe("autoLoad on gridpanel (defaults to true)",function(){describe("local filtering",function(){describe("initializing",function(){it("should keep local as `true`",function(){F({data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/autoLoad"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}]});H();expect(G.local).toBe(true)})});describe("if true",function(){it("should not make more than one request when filtering on an autoLoad store and autoLoad gridpanel",function(){F({autoLoad:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/autoLoad"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}]});H();expect(I.flushCallCount).toBe(1)});it("should not send filter data in the params for any active filter",function(){F({data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/autoLoad"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"ray"}},{header:"Email",dataIndex:"email",width:100,filter:{type:"string",value:"robben"}},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}]});var M=B();H();expect(M).not.toBeDefined()});it("should not send filter data in the params of any inactive filter",function(){F({data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/autoLoad"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}]});var M=B();H();expect(M).not.toBeDefined()})});describe("if false on the grid store",function(){it('should still make a request if any filter has a "value" property',function(){F({autoLoad:false,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/autoLoad"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"kenny"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}]});H();expect(I.flushCallCount).toBe(1)})})})});describe("remote filtering",function(){describe("initializing",function(){it('should set "local" to `false`',function(){F({remoteFilter:true},{},{filters:[{dataIndex:"name"}]});expect(G.local).toBe(false)})});describe("autoLoad",function(){describe("if true",function(){it("should not make more than one request when filtering on an autoLoad store and autoLoad gridpanel",function(){F({remoteFilter:true,autoLoad:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/remoteFiltering"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}]});waitsFor(function(){return I.flushCallCount>0});runs(function(){H();expect(I.flushCallCount).toBe(1)})});it("should send filter data in the params for any active filter",function(){F({remoteFilter:true,autoLoad:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/remoteFiltering"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"ray"}},{header:"Email",dataIndex:"email",width:100,filter:{type:"string",value:"robben"}},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}]});waitsFor(function(){return I.flushCallCount>0});runs(function(){var M=B();expect(M.length).toBe(2);expect(M[0].getProperty()).toBe("name");expect(M[1].getProperty()).toBe("email")})});it("should not send filter data in the params for any inactive filter",function(){F({remoteFilter:true,autoLoad:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/remoteFiltering"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}]});waitsFor(function(){return I.flushCallCount>0});runs(function(){expect(B()).not.toBeDefined()})})});describe("if false",function(){it("should not cause the store to load",function(){var M=Ext.data.ProxyStore.prototype;spyOn(M,"flushLoad").andCallThrough;F({remoteFilter:true,autoLoad:false,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/remoteFiltering"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}]});expect(I.hasPendingLoad()).toBe(true);expect(M.flushLoad).not.toHaveBeenCalled()})});describe("applying state, normal grid",function(){beforeEach(function(){new Ext.state.Provider();F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{stateful:true,stateId:"yobe",columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string",value:"555"}}]})});it("should not make more than one request when applying state",function(){A.saveState();Ext.destroy(A,I);F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{stateful:true,stateId:"yobe",columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string",value:"555"}}]});H();expect(I.flushCallCount).toBe(1)})});describe("locked grid",function(){beforeEach(function(){new Ext.state.Provider();F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/remoteFiltering"}},{stateful:true,stateId:"yobe",columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",locked:true,width:100},{header:"Phone",dataIndex:"phone",locked:true,width:100,filter:{type:"string",value:"555"}}]})});it("should not make more than one request when applying state",function(){A.saveState();Ext.destroy(A,I);F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/remoteFiltering"}},{stateful:true,stateId:"yobe",columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",locked:true,width:100},{header:"Phone",dataIndex:"phone",locked:true,width:100,filter:{type:"string",value:"555"}}]});H();expect(I.flushCallCount).toBe(1)});it("should include all filters from locking partners in the request",function(){var M=B();expect(M.length).toBe(2);H()})})});describe("no autoLoad",function(){it("should not send multiple requests",function(){F({remoteFilter:true,autoLoad:false,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/remoteFiltering"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}]});waitsFor(function(){return I.flushCallCount>0});runs(function(){expect(I.flushCallCount).toBe(1)})});describe("applying state, normal grid",function(){beforeEach(function(){new Ext.state.Provider();F({remoteFilter:true,autoLoad:false,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{stateful:true,stateId:"yobe",columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string",value:"555"}}]})});it("should not make more than one request when applying state",function(){A.saveState();Ext.destroy(A,I);F({remoteFilter:true,autoLoad:false,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{stateful:true,stateId:"yobe",columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}]});waitsFor(function(){return I.flushCallCount>0});runs(function(){expect(I.flushCallCount).toBe(1)})})});describe("locked grid",function(){beforeEach(function(){new Ext.state.Provider();F({remoteFilter:true,autoLoad:false,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{stateful:true,stateId:"yobe",columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",locked:true,width:100},{header:"Phone",dataIndex:"phone",locked:true,width:100,filter:{type:"string",value:"555"}}]})});it("should not make more than one request when applying state",function(){A.saveState();Ext.destroy(A,I);F({remoteFilter:true,autoLoad:false,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{stateful:true,stateId:"yobe",columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",locked:true,width:100},{header:"Phone",dataIndex:"phone",locked:true,width:100,filter:{type:"string",value:"555"}}]});waitsFor(function(){return I.flushCallCount>0});runs(function(){expect(I.flushCallCount).toBe(1)})})})})});describe("adding filters",function(){var O,N,M,Q,P;afterEach(function(){O=N=M=Q=P=null});describe("addFilter - single",function(){it("should add a single filter",function(){M="name";F();O=A.columnManager.getHeaderByDataIndex(M);expect(O.filter).toBeUndefined();G.addFilter({dataIndex:M});expect(O.filter.isGridFilter).toBe(true)});it("should turn the filter config into a filter instance",function(){M="dob";F();G.addFilter({dataIndex:M,type:"date"});expect(A.columnManager.getHeaderByDataIndex(M).filter.isGridFilter).toBe(true)});it("should not add if it does not map to an exiting column (filter config)",function(){F();G.addFilter({dataIndex:"vanhalen",value:"jimmy"});expect(I.getFilters().getCount()).toBe(0)});it("should not add if it does not map to an exiting column (filter instance)",function(){F();P=A.getStore().getFilters();expect(P.getCount()).toBe(0);G.addFilter({dataIndex:"vanhalen",value:"jimmy"});expect(P.getCount()).toBe(0)});describe("replacing a filter",function(){beforeEach(function(){F(null,{columns:[{header:"Name",dataIndex:"name",filter:{value:"jimmy"},width:100}]})});it("should work, replacing once",function(){var R,S;P=A.getStore().getFilters();R=P.getAt(0);expect(P.getCount()).toBe(1);expect(R.getValue()).toBe("jimmy");G.addFilter({dataIndex:"name",value:"alex"});S=P.getAt(0);expect(P.getCount()).toBe(1);expect(S.getValue()).toBe("alex");expect(S).not.toBe(R)});it("should work, replacing more than once",function(){var R,S;P=A.getStore().getFilters();R=P.getAt(0);expect(P.getCount()).toBe(1);expect(R.getValue()).toBe("jimmy");G.addFilter({dataIndex:"name",value:"alex"});S=P.getAt(0);expect(P.getCount()).toBe(1);expect(S.getValue()).toBe("alex");expect(S).not.toBe(R);R=S;G.addFilter({dataIndex:"name",value:"kenny"});S=P.getAt(0);expect(P.getCount()).toBe(1);expect(S.getValue()).toBe("kenny");expect(S).not.toBe(R)});it("should remove the reference to the old menu on the Filters menuItem",function(){var R=A.columnManager.getColumns()[0];jasmine.fireMouseEvent(R[R.clickTargetName].dom,"mouseover");jasmine.fireMouseEvent(R.triggerEl.dom,"click");expect(A.headerCt.menu.items.getByKey("filters").menu).toBeDefined();A.headerCt.menu.hide();G.addFilter({dataIndex:"name",value:"alex"});expect(A.headerCt.menu.items.getByKey("filters").menu).toBeNull()});it("should replace the reference to the old menu with the new menu",function(){var T=A.columnManager.getColumns()[0],S,R,U;jasmine.fireMouseEvent(T.triggerEl.dom,"click");S=A.headerCt.menu.items.getByKey("filters");R=S.menu;A.headerCt.menu.hide();G.addFilter({dataIndex:"name",value:"alex"});jasmine.fireMouseEvent(T.triggerEl.dom,"click");U=S.menu;expect(U).not.toBe(R);expect(U).toBe(T.filter.menu)})});describe("remote filtering",function(){beforeEach(function(){F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/addingFilters"}},{filters:[{dataIndex:"name",value:"alex"}]})});it("should send a network request when adding an active filter config",function(){G.addFilter({dataIndex:"email",value:"albuquerque@newmexico.com"});waitsFor(function(){return I.flushCallCount===2});runs(function(){expect(I.flushCallCount).toBe(2)})});it("should not send a network request when adding an inactive filter",function(){G.addFilter({dataIndex:"email"});waits(10);runs(function(){expect(I.flushCallCount).toBe(1)})});it("should not send a network request when adding an inactive filter instance",function(){G.addFilter(Ext.grid.filters.filter.String({dataIndex:"email"}));waits(10);runs(function(){expect(I.flushCallCount).toBe(1)})})})});describe("addFilters - batch",function(){var R,U,T,S;afterEach(function(){R=U=T=S=null});it("should add a multiple filters configs",function(){F();R=A.columnManager;U=R.getHeaderByDataIndex("name");T=R.getHeaderByDataIndex("email");S=R.getHeaderByDataIndex("phone");expect(U.filter).toBeUndefined();expect(T.filter).toBeUndefined();expect(S.filter).toBeUndefined();G.addFilters([{dataIndex:"name"},{dataIndex:"email"},{dataIndex:"phone"}]);expect(U.filter.isGridFilter).toBe(true);expect(T.filter.isGridFilter).toBe(true);expect(S.filter.isGridFilter).toBe(true)});it("should not add duplicate filters configs to store filters collection",function(){M="email";F();O=A.columnManager.getHeaderByDataIndex(M);P=A.getStore().getFilters();expect(P.getCount()).toBe(0);G.addFilters([{dataIndex:"email",value:"ben@sencha.com"},{dataIndex:"email",value:"toll@sencha.com"}]);expect(P.getCount()).toBe(1);expect(O.filter.value).toBe("toll@sencha.com")});it("should not add column filters that do not map to a column",function(){M="foo";F();O=A.columnManager.getHeaderByDataIndex(M);expect(O).toBeNull();G.addFilters([{dataIndex:M}]);expect(O).toBeNull()});it("should not add store filters when data index does not map to a column",function(){M="foo";F();P=A.store.filters;expect(P.getCount()).toBe(0);G.addFilters([{dataIndex:M,value:"bar"}]);expect(P.getCount()).toBe(0)});it("should not add column filters that do not map to a column (mixed with legitimate data indices)",function(){M="foo";F();O=A.columnManager.getHeaderByDataIndex(M);expect(O).toBeNull();G.addFilters([{dataIndex:M},{dataIndex:"phone"}]);expect(O).toBeNull()});it("should add column filters that do map to a column (mixed with illegitimate data indices)",function(){M="phone";F();O=A.columnManager.getHeaderByDataIndex(M);expect(O).toBeDefined();G.addFilters([{dataIndex:"foo"},{dataIndex:M}]);expect(O.filter.isGridFilter).toBe(true)});it("should not add store filters that do not map to a column (mixed with legitimate data indices)",function(){Q="717-737-8879";F();P=A.getStore().getFilters();expect(P.getCount()).toBe(0);G.addFilters([{dataIndex:"foo",value:"bar"},{dataIndex:"phone",value:Q}]);expect(P.getCount()).toBe(1);expect(P.getAt(0).getValue()).toBe(Q)});it("should turn the filter config into a filter instance",function(){M="age";F();O=A.columnManager.getHeaderByDataIndex("age");expect(O.filter).toBeUndefined();G.addFilters([{dataIndex:"age",type:"numeric"}]);expect(O.filter.isGridFilter).toBe(true)});it("should replace existing filters",function(){var X,W,Y,V;F(null,{columns:[{header:"Name",dataIndex:"name",filter:{value:"jimmy"},width:100},{header:"Email",dataIndex:"email",filter:{value:"jimmy@"},width:100}]});P=A.getStore().getFilters();X=P.getAt(0);W=P.getAt(1);expect(P.getCount()).toBe(2);expect(X.getValue()).toBe("jimmy");expect(W.getValue()).toBe("jimmy@");G.addFilters([{dataIndex:"name",value:"Stevie Ray"},{dataIndex:"email",value:"vaughan.com"}]);Y=P.getAt(0);V=P.getAt(1);expect(P.getCount()).toBe(2);expect(Y.getValue()).toBe("Stevie Ray");expect(V.getValue()).toBe("vaughan.com");expect(Y).not.toBe(X);expect(V).not.toBe(W)});it("should call the addFilter() implementation",function(){F();spyOn(G,"addFilter");G.addFilters([{dataIndex:"name"},{dataIndex:"email"},{dataIndex:"phone"}]);expect(G.addFilter).toHaveBeenCalled()});describe("remote filtering",function(){beforeEach(function(){F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/addingFilters"}})});it("should send a network request when adding at least one active filter config",function(){G.addFilters([{dataIndex:"name"},{dataIndex:"email",value:"jack"},{dataIndex:"phone"}]);waitsFor(function(){return I.flushCallCount===2});runs(function(){expect(I.flushCallCount).toBe(2)})});it("should send only one network request no matter how many active filters configs are added",function(){G.addFilters([{dataIndex:"name",value:"ginger"},{dataIndex:"email",value:"suzy"},{dataIndex:"phone",value:"717"}]);waitsFor(function(){return I.flushCallCount===2});runs(function(){expect(I.flushCallCount).toBe(2)})});it("should not send a network request when not adding an active filter config",function(){G.addFilters([{dataIndex:"name"},{dataIndex:"email"},{dataIndex:"phone"}]);waits(10);runs(function(){expect(I.flushCallCount).toBe(1)})})})})});describe("adding to headerCt",function(){var O,N,M,Q,P;afterEach(function(){O=N=M=Q=P=null});describe("normal grid",function(){beforeEach(function(){F({},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"jimmy"}},{header:"Email",dataIndex:"email",width:100,filter:{type:"string",value:"ben@sencha.com"}},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string",value:"717-555-1212"}}]})});it("should create a column filter instance with a default `String` type when no type is given",function(){M="dob";A.headerCt.add({dataIndex:M,text:"DOB",filter:{value:{on:new Date("8/8/1992")}}});expect(A.columnManager.getHeaderByDataIndex(M).filter.type).toBe("string")});it("should create a column filter instance with the specified filter type when a type is given",function(){M="dob";A.headerCt.add({dataIndex:M,text:"DOB",filter:{type:"date",value:{on:new Date("8/8/1992")}}});expect(A.columnManager.getHeaderByDataIndex(M).filter.type).toBe("date")});it('should create a column filter instance when adding a new column with a "filter" config',function(){M="dob";A.headerCt.add({dataIndex:M,text:"DOB",filter:{value:{on:new Date("8/8/1992")}}});expect(A.columnManager.getHeaderByDataIndex(M).filter.isGridFilter).toBe(true)});it('should not create a column filter instance when adding a new column without a "filter" config',function(){M="dob";A.headerCt.add({dataIndex:M,text:"DOB"});expect(A.columnManager.getHeaderByDataIndex(M).filter).toBeUndefined()})});describe("remote filtering",function(){beforeEach(function(){F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/remoteFiltering"}},{columns:[{header:"Name",dataIndex:"name",width:100},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100}]});H()});it("should make a request that includes the new filter when adding a column with an active filter",function(){A.headerCt.add({dataIndex:"age",text:"Age",filter:{type:"numeric",value:{gt:5}}});var R=B();expect(R.length).toBe(1);expect(R[0].getProperty()).toBe("age")})});describe("locked grid",function(){describe("local filtering",function(){beforeEach(function(){F({},{columns:[{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",locked:true,width:100}]})});it("should add a new store filter when called on a locking partner (lockedGrid)",function(){var R=A.getStore().getFilters();expect(R.getCount()).toBe(0);G.grid.lockedGrid.headerCt.add({dataIndex:"age",text:"Age",locked:true,filter:{type:"numeric",value:{eq:10}}});expect(R.getCount()).toBe(1)});it("should add a new store filter when called on a locking partner (normalGrid)",function(){var R=A.getStore().getFilters();expect(R.getCount()).toBe(0);G.grid.normalGrid.headerCt.add({dataIndex:"age",text:"Age",locked:true,filter:{type:"numeric",value:{eq:10}}});expect(R.getCount()).toBe(1)});it('should filter if the filter config contains a "value" property',function(){var R=A.getStore().getFilters();A.lockedGrid.headerCt.add({dataIndex:"age",text:"Age",locked:true,filter:{type:"numeric",value:{eq:10}}});expect(R.getCount()).toBe(1);A.normalGrid.headerCt.add({dataIndex:"dob",text:"DOB",filter:{type:"numeric",value:{lt:new Date("9/26/2009")}}});expect(R.getCount()).toBe(2);A.lockedGrid.headerCt.add({dataIndex:"name",text:"Name",locked:true,filter:{value:"motley"}});expect(R.getCount()).toBe(3)})});describe("remote filtering",function(){beforeEach(function(){F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/remoteFiltering"}},{columns:[{header:"Name",dataIndex:"name",locked:true,width:100},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100}]})});describe("normalGrid",function(){it("should not make a request when adding a column with an inactive filter",function(){var R=I.flushCallCount;G.grid.normalGrid.headerCt.add({dataIndex:"age",text:"Age",filter:{type:"numeric"}});expect(I.flushCallCount).toBe(R)});it("should make a request that includes the new filter when adding a column with an active filter",function(){var R=I.flushCallCount;G.grid.normalGrid.headerCt.add({dataIndex:"age",text:"Age",filter:{type:"numeric",value:{gt:5}}});expect(I.flushCallCount).toBe(R+1)})});describe("lockedGrid",function(){it("should not make a request when adding a column with an inactive filter",function(){var R=I.flushCallCount;G.grid.lockedGrid.headerCt.add({dataIndex:"age",text:"Age",locked:true,filter:{type:"numeric"}});expect(I.flushCallCount).toBe(R)});it("should make a request that includes the new filter when adding a column with an active filter",function(){G.grid.lockedGrid.headerCt.add({dataIndex:"age",text:"Age",locked:true,filter:{type:"numeric",value:{gt:5}}});expect(I.flushCallCount).toBe(2)})})})});describe("stateful",function(){})});describe("setActive",function(){var N,M;afterEach(function(){N=M=null});describe("local filtering",function(){beforeEach(function(){F({remoteFilter:false,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/setActive"}},{columns:[{dataIndex:"name",filter:{value:"alex"}},{dataIndex:"age"}]})});describe("when setting active to `false`",function(){it("should filter the store",function(){N=I.getFilters();expect(N.getCount()).toBe(1);A.columnManager.getHeaderByDataIndex("name").filter.setActive(false);H();expect(N.getCount()).toBe(0)});it("should not send a network request",function(){A.columnManager.getHeaderByDataIndex("name").setActive(false);H();expect(I.flushCallCount).toBe(1)})});describe("when setting active to `true`",function(){it("should filter the store",function(){M=A.columnManager.getHeaderByDataIndex("name").filter;N=I.getFilters();expect(N.getCount()).toBe(1);M.setActive(false);expect(N.getCount()).toBe(0);M.setActive(true);expect(N.getCount()).toBe(1)});it("should not send a network request",function(){G.addFilter({dataIndex:"age",type:"numeric"});A.columnManager.getHeaderByDataIndex("age").setActive(true);waitsFor(function(){return I.flushCallCount===1});runs(function(){expect(I.flushCallCount).toBe(1)})})})});describe("remote filtering",function(){var O;beforeEach(function(){F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/setActive"}},{columns:[{header:"Name",dataIndex:"name",locked:true,filter:{value:"alex"},width:100},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100},{header:"Age",dataIndex:"age",width:100}]});H()});describe("when setting active to `false`",function(){it("should not send the filter data in the request",function(){A.columnManager.getHeaderByDataIndex("name").filter.setActive(false);expect(B()).toBeUndefined()});it("should filter the store",function(){var P=I.getFilters();expect(P.getCount()).toBe(1);A.columnManager.getHeaderByDataIndex("name").filter.setActive(false);expect(P.getCount()).toBe(0)})});describe("when setting active to `true`",function(){it("should send the filter data in the request",function(){G.addFilter({dataIndex:"age",type:"numeric"});O=A.columnManager.getHeaderByDataIndex("age").filter;O.createMenu();O.setValue({eq:42});expect(B().length).toBe(2)});it("should filter the store",function(){var P=I.getFilters();expect(P.getCount()).toBe(1);G.addFilter({dataIndex:"age",type:"numeric"});O=A.columnManager.getHeaderByDataIndex("age").filter;O.createMenu();O.setValue({eq:42});expect(B().length).toBe(2)})})})});describe("getting the column filter",function(){it("should get the specified filter",function(){F({},{columns:[{header:"Name",dataIndex:"name",filter:true,width:100},{header:"Email",dataIndex:"email",width:100,filter:{type:"string",value:"ben@sencha.com"}},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string",value:"717-555-1212"}}]});expect(A.columnManager.getHeaderByDataIndex("name").filter).toBeDefined()});describe("locked grid",function(){beforeEach(function(){F({},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"ben@sencha.com"}},{header:"Email",dataIndex:"email",locked:true,width:100,filter:{type:"string",value:"ben@sencha.com"}},{header:"Phone",dataIndex:"phone",locked:true,width:100,filter:{type:"string",value:"717-555-1212"}}]})});it("should get the specified filter",function(){expect(A.columnManager.getHeaderByDataIndex("phone").filter.isGridFilter).toBe(true)})})});describe("locked grid",function(){var N,M,O;afterEach(function(){N=M=O=null});describe("initialization",function(){it('should create an "isLocked" property',function(){F({},{columns:[{header:"Name",dataIndex:"name",locked:true,width:100}]});expect(G.isLocked).toBe(true)})});describe("the store",function(){it("should bind the grid store to the feature",function(){F({},{columns:[{header:"Name",dataIndex:"name",locked:true,width:100}]});expect(G.store).toBe(I)});it("should add each filter to the store",function(){F({},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",locked:true,width:100,filter:{type:"string",value:"ben@sencha.com"}},{header:"Phone",dataIndex:"phone",locked:true,width:100,filter:{type:"string",value:"717-555-1212"}}]});expect(I.getFilters().getCount()).toBe(3)})});describe("adding filters",function(){beforeEach(function(){F({},{columns:[{header:"Name",dataIndex:"name",locked:true,width:100},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100}]},{})});describe("addFilter - single",function(){it("should work",function(){N=A.columnManager.getHeaderByDataIndex("name");expect(N.filter).toBeUndefined();G.addFilter({dataIndex:"name"});expect(N.filter).toBeDefined()});it('should not add a new filter to the store if not configured with a "value" property',function(){G.addFilter({dataIndex:"name"});expect(I.getFilters().getCount()).toBe(0)});it('should add the filter to the store if config has a "value" property',function(){G.addFilter({dataIndex:"name",value:"jimmy"});expect(I.getFilters().getCount()).toBe(1)});it("should not add if it does not map to an exiting column (filter config)",function(){G.addFilter({dataIndex:"vanhalen",value:"jimmy",locked:true});expect(I.getFilters().getCount()).toBe(0)})});describe("addFilters - batch",function(){it('should not add the store filters to the store (no "value" property)',function(){G.addFilters([{dataIndex:"name"},{dataIndex:"email"},{dataIndex:"phone"}]);expect(G.store.getFilters().getCount()).toBe(0)});it('should add the filters to their store if configured with a "value" property',function(){G.addFilters([{dataIndex:"name",value:"john"},{dataIndex:"email",value:"utley"},{dataIndex:"phone",value:"717-555-1212"}]);expect(G.store.getFilters().getCount()).toBe(3)});it("should not add any filters to their store that do not map to a column",function(){G.addFilters([{dataIndex:"ledzeppelin",value:"john"},{dataIndex:"rush",value:"utley"},{dataIndex:"phone",value:"717-555-1212"}]);expect(G.store.getFilters().getCount()).toBe(1)})})});describe("setActive",function(){var P;afterEach(function(){P=null});describe("local filtering",function(){describe("when setting active to `false`",function(){it("should filter the store, locked grid",function(){F({},{columns:[{header:"Name",filter:{value:"ford"},dataIndex:"name",locked:true,width:100}]});P=I.getFilters();expect(P.getCount()).toBe(1);A.columnManager.getHeaderByDataIndex("name").filter.setActive(false);expect(P.getCount()).toBe(0)})});describe("when setting active to `true`",function(){it("should filter the store",function(){F({},{columns:[{header:"Name",dataIndex:"name",filter:{value:"sco"},locked:true,width:100},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100}]});M=A.columnManager.getHeaderByDataIndex("name").filter;P=I.getFilters();expect(P.getCount()).toBe(1);M.setActive(false);expect(P.getCount()).toBe(0);M.setActive(true);expect(P.getCount()).toBe(1)})})});describe("remote filtering",function(){beforeEach(function(){F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"fake"}},{columns:[{header:"Name",dataIndex:"name",locked:true,filter:{value:"john"},width:100},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100}]});H()});describe("when setting active to `false`",function(){it("should not send the filter data in the request",function(){A.columnManager.getHeaderByDataIndex("name").filter.setActive(false);expect(B()).toBeUndefined()})});describe("when setting active to `true`",function(){it("should send the filter data in the request",function(){G.addFilter({dataIndex:"email",value:"ben"});expect(B().length).toBe(2)})})})});describe("no autoLoad",function(){it("should not send multiple requests",function(){F({remoteFilter:true,autoLoad:false,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",locked:true,width:100,filter:{type:"string",value:"717-555-8879"}}]});waits(10);runs(function(){expect(I.flushCallCount).toBe(1)})});it("should include all the store filters from both locking partners in the request",function(){F({remoteFilter:true,autoLoad:false,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"stevie ray"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",locked:true,width:100,filter:{type:"string",value:"717-555-8879"}}]},{filters:[{dataIndex:"name",value:"herring"}]});waitsFor(function(){return I.flushCallCount===1});runs(function(){expect(B().length).toBe(2);expect(I.flushCallCount).toBe(1)})})})});describe("stateful",function(){var N,M;afterEach(function(){Ext.state.Manager.set(A.getStateId(),null);N=M=null});describe("remoteFilter",function(){describe("if `true`",function(){it("should still make a network request if it has state information and the grid store autoLoad = false",function(){F({autoLoad:false,remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{value:"jimmy"}}],stateful:true,stateId:"remote-filter-true-1"});A.saveState();Ext.destroy(A,I);F({autoLoad:false,remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{value:"jimmy"}}],stateful:true,stateId:"remote-filter-true-1"});waitsFor(function(){return I.flushCallCount===1});runs(function(){expect(I.flushCallCount).toBe(1)})});it("should not make more than one network request if it has state information",function(){F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{value:"jimmy"}}],stateful:true,stateId:"remote-filter-true-2"});A.saveState();Ext.destroy(A,I);F({remoteFilter:true,data:null,proxy:{type:"ajax",url:"/grid/filters/Feature/noAutoLoad"}},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{value:"jimmy"}}],stateful:true,stateId:"remote-filter-true-2"});waitsFor(function(){return I.flushCallCount===1});runs(function(){expect(I.flushCallCount).toBe(1)})})});describe("if `false`",function(){it("should not make a network request if it has state information and autoLoad = false on the grid store",function(){F({autoLoad:false,remoteFilter:false},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{value:"jimmy"}}],stateful:true,stateId:"remote-filter-false-1"});A.columnManager.getHeaderByDataIndex("name").filter.setValue("pagey");A.saveState();Ext.destroy(A,I);F({autoLoad:false,remoteFilter:false},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{value:"jimmy"}}],stateful:true,stateId:"remote-filter-false-1"});waitsFor(function(){return I.flushCallCount===1});runs(function(){expect(I.flushCallCount).toBe(1)})});it("should not make more than one network request if it has state information and autoLoad = true on the grid store",function(){F({autoLoad:true,remoteFilter:false,asynchronousLoad:true},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{value:"jimmy"}}],stateful:true,stateId:"remote-filter-false-2"});A.columnManager.getHeaderByDataIndex("name").filter.setValue("pagey");A.saveState();Ext.destroy(A,I);F({autoLoad:true,remoteFilter:false},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{value:"jimmy"}}],stateful:true,stateId:"remote-filter-false-2"});waitsFor(function(){return I.flushCallCount===1});runs(function(){expect(I.flushCallCount).toBe(1)})})})});describe("initialization",function(){it("should not save state information for any initialized active filters",function(){var O;F({},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{value:"jimmy"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100,filter:{type:"string"}}],stateful:true,stateId:"foo"});A.saveState();expect(A.getState().storeFilters).toBeUndefined()});it("should replace any existing values when setting value",function(){var O=[{header:"Name",dataIndex:"name",width:100,filter:{value:"lifeson"}}];F({},{columns:O,stateful:true,stateId:"foo"});A.saveState();M=A.columnManager.getHeaderByDataIndex("name").filter;expect(M.filter.getValue()).toBe("lifeson");M.setValue("page");waits(1);runs(function(){A.saveState();Ext.destroy(A,I);F({},{columns:O,stateful:true,stateId:"foo"});M=A.columnManager.getHeaderByDataIndex("name").filter;expect(M.filter.getValue()).toBe("page")})})});describe("changing filter values",function(){it("should retain proper filtering when setting active",function(){var O=[{header:"Name",dataIndex:"name",filter:true,width:100},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100}];F({},{columns:O,stateful:true,stateId:"foo"});expect(A.store.getCount()).toBe(C.length);var P=A.columnManager.getHeaderByDataIndex("name").filter;P.setActive(true);P.setValue("jimmy");waits(1);runs(function(){expect(A.store.getCount()).toBe(2)});waits(1);runs(function(){A.saveState();Ext.destroy(A,I);F({},{columns:O,stateful:true,stateId:"foo"});expect(A.store.getCount()).toBe(2)})});it("should update state information when setting active",function(){var O=[{header:"Name",dataIndex:"name",filter:true,width:100},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100}];F({},{columns:O,stateful:true,stateId:"foo"});var P=A.columnManager.getHeaderByDataIndex("name").filter;P.setActive(true);P.setValue("jimmy");waits(1);runs(function(){expect(A.store.getCount()).toBe(2)});waits(1);runs(function(){A.saveState();Ext.destroy(A,I);F({},{columns:O,stateful:true,stateId:"foo"});P=A.columnManager.getHeaderByDataIndex("name").filter;expect(A.getState().storeState.filters[0].value).toBe("jimmy");expect(P.filter.getValue()).toBe("jimmy")})});it("should retain proper filtering when setting inactive",function(){var O=[{header:"Name",dataIndex:"name",width:100,filter:{value:"jimmy"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100}];F({},{columns:O,stateful:true,stateId:"foo"});expect(I.getCount()).toBe(2);A.columnManager.getHeaderByDataIndex("name").filter.setActive(false);waits(1);runs(function(){expect(I.getCount()).toBe(C.length);A.saveState();Ext.destroy(A,I);F({},{columns:O,stateful:true,stateId:"foo"});expect(I.getCount()).toBe(C.length)})});it("should update state information when setting inactive",function(){var O=[{header:"Name",dataIndex:"name",width:100,filter:{value:"herring",type:"string"}},{header:"Email",dataIndex:"email",width:100},{header:"Phone",dataIndex:"phone",width:100}];F({},{columns:O,stateful:true,stateId:"foo"});A.saveState();A.columnManager.getHeaderByDataIndex("name").filter.setActive(false);waits(1);runs(function(){expect(A.store.getCount()).toBe(C.length);A.saveState();Ext.destroy(A,I);F({},{columns:O,stateful:true,stateId:"foo"});expect(A.getState().storeState.filters.length).toBe(0)})});it("should keep track of state information when changing values",function(){var P=[{header:"Name",dataIndex:"name",filter:true,width:100},{header:"DOB",dataIndex:"dob",width:100,filter:{type:"date",value:{before:new Date("8/8/1992")}}}],O=new Date("1/22/1962");F({},{columns:P,stateful:true,stateId:"foo"});var Q=A.columnManager.getHeaderByDataIndex("dob").filter;Q.createMenu();Q.setValue({eq:O});A.saveState();waits(1);runs(function(){A.saveState();Ext.destroy(A,I);F({},{columns:P,stateful:true,stateId:"foo"});expect(A.getState().storeState.filters[0].value).toEqual(O);expect(A.columnManager.getHeaderByDataIndex("dob").filter.filter.eq.getValue()).toEqual(O)})})});describe("locked grid",function(){})});describe("showing the headerCt menu",function(){beforeEach(function(){F({},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"ben"}},{header:"Email",dataIndex:"email",width:100}]});jasmine.fireMouseEvent(A.columnManager.getColumns()[0].triggerEl.dom,"click")});it('should create the "Filters" menuItem',function(){expect(A.headerCt.menu.items.getByKey("filters")).toBeDefined()});it("should create the column filter menu",function(){expect(A.headerCt.menu.items.getByKey("filters").menu).toBeDefined()})});xdescribe("hasActiveFilter",function(){it("should return false if there are no active filters",function(){F();expect(G.hasActiveFilter()).toBe(false)});it("should return true if there are active filters",function(){F({},{columns:[{header:"Name",dataIndex:"name",width:100,filter:{type:"string",value:"ben"}},{header:"Email",dataIndex:"email",width:100}]});expect(G.hasActiveFilter()).toBe(true)});describe("locked grid",function(){it("should return false if there are no active filters",function(){F({},{columns:[{header:"Name",dataIndex:"name",locked:true,width:100},{header:"Email",dataIndex:"email",width:100}]});expect(G.hasActiveFilter()).toBe(false)});it("should return true if there are active filters",function(){F({},{columns:[{header:"Name",dataIndex:"name",locked:true,width:100,filter:{type:"string",value:"ben"}},{header:"Email",dataIndex:"email",width:100}]});expect(G.hasActiveFilter()).toBe(true)})})});describe("buffered store",function(){});describe("reconfigure",function(){var M,N;beforeEach(function(){M=new Ext.data.Store({autoDestroy:true,fields:["name"],data:[{name:"Foo"},{name:"Bar"},{name:"Baz"}]})});afterEach(function(){M=N=Ext.destroy(M)});describe("should work",function(){describe("the Filters menu item",function(){describe("removing the reference to the old menu on the Filters menu item",function(){it("should work for normal grids",function(){F(null,{columns:[{dataIndex:"name",filter:true}]});N=A.columnManager.getColumns()[0];jasmine.fireMouseEvent(N.triggerEl.dom,"click");expect(A.headerCt.menu.items.getByKey("filters").menu).toBeDefined();A.reconfigure(M);expect(A.headerCt.menu.items.getByKey("filters").menu).toBe(null)});it("should work for locking grids",function(){var T,R,S,P,O,Q,U;F(null,{columns:[{dataIndex:"name",filter:true,locked:true},{dataIndex:"email",filter:true}]});T=A.lockedGrid;R=T.headerCt;S=A.normalGrid;P=S.headerCt;N=T.columnManager.getColumns()[0];jasmine.fireMouseEvent(N.triggerEl.dom,"click");N=S.columnManager.getColumns()[0];jasmine.fireMouseEvent(N.triggerEl.dom,"click");O=G.filterMenuItem;Q=R.menu;U=P.menu;expect(O[T.id].menu).toBe(Q.down("#filters").menu);expect(O[S.id].menu).toBe(U.down("#filters").menu);A.reconfigure(M);expect(Q.items.getByKey("filters").menu).toBe(null);expect(U.items.getByKey("filters").menu).toBe(null)})})})});describe("stores",function(){it("should bind the new store to the plugin",function(){F(null,{columns:[{dataIndex:"name",filter:true}]});expect(G.store).toBe(I);A.reconfigure(M);expect(G.store).toBe(M)});describe("store only",function(){it("should have filters react when the store is changed",function(){F(null,{columns:[{dataIndex:"name",filter:true}]});A.reconfigure(M);expect(M.getCount()).toBe(3);A.columnManager.getHeaderByDataIndex("name").filter.setValue("B");expect(M.getCount()).toBe(2)})})});describe("columns",function(){function O(P){describe(P?"locking grid":"non-locking grid",function(){describe("with a store",function(){it("should filter the store if configured with a filter.value",function(){F(null,{columns:[{dataIndex:"name",locked:P,filter:true}]});expect(I.getCount()).toBe(C.length);expect(I.isFiltered()).toBe(false);A.reconfigure(M,[{header:"Name",dataIndex:"name",locked:P,filter:{type:"string",value:"Baz"}}]);expect(M.getCount()).toBe(1);expect(M.isFiltered()).toBe(true)})});describe("null store",function(){it("should filter the store if configured with a filter.value",function(){F(null,{columns:[{dataIndex:"name",locked:P,filter:true}]});expect(I.getCount()).toBe(C.length);expect(I.isFiltered()).toBe(false);A.reconfigure(null,[{header:"Name",dataIndex:"name",locked:P,filter:{type:"string",value:"Jimmy"}},{header:"Email",dataIndex:"email",width:100,filter:{type:"string",value:"jimmy@page.com"}}]);expect(I.getCount()).toBe(1);expect(I.isFiltered()).toBe(true)});it("should not react",function(){var Q;F(null,{columns:[{dataIndex:"name",locked:P,filter:true}]});A.columnManager.getHeaderByDataIndex("name").filter.setValue("Jimmy");Q=I.getCount();A.reconfigure(null,[{header:"Name",dataIndex:"name",locked:P,filter:true}]);expect(I.getCount()).toBe(Q)})})})}O(true);O(false)})});describe("destroy",function(){it("should not destroy the store when the plugin is destroyed with autoDestroy: false",function(){F({autoDestroy:false});spyOn(I,"destroy");A.destroy();expect(I.destroy).not.toHaveBeenCalled()})});describe("treepanel",function(){function M(){var N=L.headerCt,O=L.getColumnManager().getLast();N.showMenuBy(null,O.triggerEl.dom,O)}it("should not throw when showing the header menu",function(){E();expect(function(){M()}).not.toThrow()})});describe("onCheckChange",function(){var N;function M(O){O.ownerCt.showMenuBy(null,O.triggerEl.dom,O)}afterEach(function(){N=null});describe("looking up headerCt",function(){describe("grids",function(){function O(P){it("should not throw, locking = "+P,function(){F(null,{columns:[{header:"Name",dataIndex:"name",locked:P,filter:true,width:100},{header:"Email",dataIndex:"email",filter:true,width:100}]});N=A.headerCt.columnManager.getHeaderByDataIndex("name");M(N);expect(function(){N.filter.setActive(true)}).not.toThrow()})}O(true);O(false)});describe("trees",function(){function O(P){it("should not throw, locking = "+P,function(){E(null,{columns:[{header:"Name",dataIndex:"name",filter:{type:"string"}},{header:"Description",dataIndex:"description",locked:P,filter:{type:"string"}}]});N=L.headerCt.columnManager.getHeaderByDataIndex("description");M(N);expect(function(){N.filter.setActive(true)}).not.toThrow()})}O(true);O(false)})})})})