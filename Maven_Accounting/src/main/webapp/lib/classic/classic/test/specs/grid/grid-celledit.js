describe("grid-celledit",function(){var F=Ext.isWebKit?it:xit,A,B=Ext.define(null,{extend:"Ext.data.Model",fields:["field1","field2","field3","field4","field5","field6","field7","field8","field9","field10"]}),J=true,D=Ext.data.ProxyStore.prototype.load,G;function H(L,K){return A.getView().getCellInclusive({row:L,column:K},true)}function E(M,O,N,L,K,Q){var P=H(O,N);jasmine.fireMouseEvent(P,M,K,Q,L)}function I(L,N,M,K){var O=H(N,M);jasmine.fireKeyEvent(O,L,K)}beforeEach(function(){G=Ext.data.ProxyStore.prototype.load=function(){D.apply(this,arguments);if(J){this.flushLoad.apply(this,arguments)}return this}});afterEach(function(){Ext.data.ProxyStore.prototype.load=D});function C(K){describe(K?"with buffered rendering":"without buffered rendering",function(){var P=[],U,R,N,W;var M=9,S=13,e=27,V=33,Y=34,Q=35,L=36,X=37,O=38,T=39,Z=40;function d(h,f,g){runs(function(){E("dblclick",h,f)});if(!g){waitsFor(function(){return !!N.activeEditor},"editing to start",1000);runs(function(){jasmine.waitForFocus(N.getActiveEditor().field)})}}function c(f){var g=N.getActiveEditor().field.inputEl.dom;jasmine.fireKeyEvent(g,"keydown",f);jasmine.fireKeyEvent(g,"keyup",f);jasmine.fireKeyEvent(g,"keypress",f)}function b(f){return R.getAt(f)}function a(k,h,f){var l=[],g=[],j;if(!k){for(j=1;j<=5;++j){g.push({name:"F"+j,dataIndex:"field"+j,field:{xtype:"textfield",id:"field"+j,name:"field"+j}})}}for(j=1;j<=10;++j){l.push({field1:j+"."+1,field2:j+"."+2,field3:j+"."+3,field4:j+"."+4,field5:j+"."+5,field6:j+"."+6,field7:j+"."+7,field8:j+"."+8,field9:j+"."+9,field10:j+"."+10})}R=new Ext.data.Store({model:B,data:l});if(h!==null){N=new Ext.grid.plugin.CellEditing(h)}A=new Ext.grid.Panel(Ext.apply({columns:k||g,store:R,selType:"cellmodel",plugins:N?[N]:undefined,width:1000,height:500,bufferedRenderer:K,viewConfig:{mouseOverOutBuffer:0},renderTo:Ext.getBody()},f));U=A.getView();P=A.getColumnManager().getColumns()}afterEach(function(){Ext.destroy(A,R);N=A=R=U=null;P.length=0;Ext.data.Model.schema.clear()});describe("plugin configuration",function(){it("should be able to add the plugin after rendering the grid",function(){a(null,null);N=new Ext.grid.plugin.CellEditing();A.addPlugin(N);E("dblclick",0,0);expect(N.editing).toBe(true);expect(N.getActiveColumn()).toBe(P[0]);expect(N.getActiveRecord()).toBe(R.getAt(0))})});describe("resolveListenerScope",function(){it("should resolve the scope to the grid",function(){var f={someFn:function(){}};spyOn(f,"someFn");a(null,{listeners:{"beforeedit":"someFn"}});A.resolveSatelliteListenerScope=function(){return f};E("dblclick",0,0);expect(f.someFn).toHaveBeenCalled()})});describe("basic editing",function(){var f;beforeEach(function(){a();f=U.getCellByPosition({row:0,column:0},true)});it("should scroll a record that is outside the rendered block into view and edit it",function(){var h=[],g;for(g=11;g<=1000;++g){h.push({field1:g+"."+1,field2:g+"."+2,field3:g+"."+3,field4:g+"."+4,field5:g+"."+5,field6:g+"."+6,field7:g+"."+7,field8:g+"."+8,field9:g+"."+9,field10:g+"."+10})}R.add(h);N.startEdit(900,0);expect(N.editing).toBe(true);expect(N.getEditor(N.context.record,N.context.column).isVisible()).toBe(true);expect(N.getActiveColumn()).toBe(P[0]);expect(N.getActiveRecord()).toBe(R.getAt(900))});it("should trigger the edit on cell interaction",function(){E("dblclick",0,0);expect(N.editing).toBe(true);expect(N.getActiveColumn()).toBe(P[0]);expect(N.getActiveRecord()).toBe(R.getAt(0));expect(N.getActiveEditor().el.dom.parentNode).toBe(f)});it("should be able to be trigger by passing a position",function(){N.startEditByPosition({row:0,column:2});expect(N.editing).toBe(true);expect(N.getActiveColumn()).toBe(P[2]);expect(N.getActiveRecord()).toBe(R.getAt(0))});it("should be able to be trigger by passing a record/header",function(){N.startEdit(R.getAt(1),P[3]);expect(N.editing).toBe(true);expect(N.getActiveColumn()).toBe(P[3]);expect(N.getActiveRecord()).toBe(R.getAt(1))});it("should use the specified column field",function(){E("dblclick",0,0);expect(N.getActiveEditor().field.getId()).toBe("field1")});it("should get the underlying record value",function(){E("dblclick",0,1);expect(N.getActiveEditor().field.getValue()).toBe("1.2")});it("should cancel editing on removing a column",function(){var g;E("dblclick",0,0);g=N.getActiveEditor();expect(g.isVisible()).toBe(true);A.headerCt.remove(P[0]);expect(g.isVisible()).toBe(false)});it("should continue editing after a refresh",function(){E("dblclick",0,0);expect(N.editing).toBe(true);expect(N.getActiveEditor().isVisible()).toBe(true);expect(N.getActiveEditor().field.getValue()).toBe("1.1");A.view.refresh();waits(100);runs(function(){expect(N.editing).toBe(true);expect(N.getActiveEditor().isVisible()).toBe(true);expect(N.getActiveEditor().field.getValue()).toBe("1.1")})})});describe("clean up",function(){function f(g){describe(g?"with locking":"without locking",function(){var h;beforeEach(function(){h=Ext.ComponentManager});afterEach(function(){h=null});describe("not activated",function(){function i(j){describe(j?"before render":"after render",function(){it("should destroy an editor instance",function(){var k=h.getCount();a([{dataIndex:"field1",locked:g,editor:new Ext.form.field.Text()},{dataIndex:"field2"}],{},{renderTo:j?null:Ext.getBody()});A.destroy();expect(h.getCount()).toBe(k)});it("should destroy a field instance",function(){var k=h.getCount();a([{dataIndex:"field1",locked:g,field:new Ext.form.field.Text()},{dataIndex:"field2"}],{},{renderTo:j?null:Ext.getBody()});A.destroy();expect(h.getCount()).toBe(k)});it("should not leave an instance with an editor config",function(){var k=h.getCount();a([{dataIndex:"field1",locked:g,editor:{xtype:"textfield"}},{dataIndex:"field2"}],{},{renderTo:j?null:Ext.getBody()});A.destroy();expect(h.getCount()).toBe(k)});it("should not leave an instance with a field config",function(){var k=h.getCount();a([{dataIndex:"field1",locked:g,field:{xtype:"textfield"}},{dataIndex:"field2"}],{},{renderTo:j?null:Ext.getBody()});A.destroy();expect(h.getCount()).toBe(k)})})}i(false);i(true)});describe("after activation",function(){it("should destroy an editor instance",function(){var i=h.getCount();a([{dataIndex:"field1",locked:g,editor:new Ext.form.field.Text()},{dataIndex:"field2"}]);E("click",0,0);A.destroy();expect(h.getCount()).toBe(i)});it("should destroy a field instance",function(){var i=h.getCount();a([{dataIndex:"field1",locked:g,field:new Ext.form.field.Text()},{dataIndex:"field2"}]);E("click",0,0);A.destroy();expect(h.getCount()).toBe(i)});it("should destroy an editor config",function(){var i=h.getCount();a([{dataIndex:"field1",locked:g,editor:{xtype:"textfield"}},{dataIndex:"field2"}]);E("click",0,0);A.destroy();expect(h.getCount()).toBe(i)});it("should destroy a field instance",function(){var i=h.getCount();a([{dataIndex:"field1",locked:g,field:{xtype:"textfield"}},{dataIndex:"field2"}]);E("click",0,0);A.destroy();expect(h.getCount()).toBe(i)})})})}f(false);f(true)});describe("non-editable cells",function(){function f(){var g=1,h=[];for(;g<=10;g++){if(g%2===0){h.push(new Ext.grid.column.Column({name:"F"+g,dataIndex:"field"+g,field:{xtype:"textfield",id:"field"+g,name:"field"+g}}))}else{h.push(new Ext.grid.column.Column({name:"F"+g,dataIndex:"field"+g}))}P[g-1]=h[g-1]}return h}it("should not trigger a call to .startEdit() if a non-editable cell is clicked",function(){a(f());spyOn(N,"startEdit");E("dblclick",0,0);expect(N.startEdit).not.toHaveBeenCalled()});describe("using checkboxmodel as selType",function(){beforeEach(function(){a(f(),{clicksToEdit:1},{selType:"checkboxmodel"})});it("should not trigger a call to startEdit() if the checkboxmodel is clicked",function(){spyOn(N,"startEdit");E("click",0,0);expect(N.startEdit).not.toHaveBeenCalled()});xit("should move to the next editable cell when tabbing",function(){E("click",0,2);c(M);expect(N.getActiveColumn()).toBe(P[3])})})});describe("events",function(){beforeEach(function(){a()});describe("beforeedit",function(){it("should fire the event",function(){var f=false;runs(function(){N.on("beforeedit",function(){f=true});d(0,0)});runs(function(){expect(f).toBe(true)})});it("should fire the event with the plugin & an event context",function(){var g,f;runs(function(){N.on("beforeedit",function(i,h){g=i;f=h});d(0,0)});runs(function(){expect(g).toBe(N);expect(f.colIdx).toBe(0);expect(f.column).toBe(P[0]);expect(f.field).toBe("field1");expect(f.grid).toBe(A);expect(f.originalValue).toBe("1.1");expect(f.record).toBe(b(0));expect(f.row).toBe(U.getRow(0));expect(f.rowIdx).toBe(0);expect(f.store).toBe(R);expect(f.value).toBe("1.1")})});it("should prevent editing if false is returned from the plugin's beforeedit event",function(){runs(function(){N.on("beforeedit",function(g,f){return f.rowIdx>0});d(0,0,true)});runs(function(){expect(N.editing).toBeFalsy();d(1,0)});runs(function(){expect(N.editing).toBeTruthy()})});it("should prevent editing if false is returned from the CellEditor's beforestartedit event",function(){runs(function(){N.getEditor(R.getAt(0),P[0]).on("beforestartedit",function(g,f,h){return g.context.rowIdx>0});d(0,0,true)});runs(function(){expect(N.editing).toBeFalsy();d(1,0)});runs(function(){expect(N.editing).toBeTruthy()})});it("should prevent editing if context.cancel is set",function(){runs(function(){N.on("beforeedit",function(g,f){f.cancel=true});d(0,0,true)});runs(function(){expect(N.editing).toBeFalsy()})})});describe("canceledit",function(){it("should fire the event when editing is cancelled",function(){var f=false;runs(function(){N.on("canceledit",function(h,g){f=true});d(0,0)});runs(function(){N.cancelEdit();expect(f).toBe(true);expect(N.editing).toBe(false)})});it("should pass the plugin and the context",function(){var g,f;runs(function(){N.on("canceledit",function(i,h){g=i;f=h});d(0,0)});runs(function(){N.cancelEdit();expect(g).toBe(N);expect(f.colIdx).toBe(0);expect(f.column).toBe(P[0]);expect(f.field).toBe("field1");expect(f.grid).toBe(A);expect(f.originalValue).toBe("1.1");expect(f.record).toBe(b(0));expect(f.row).toBe(U.getRow(0));expect(f.rowIdx).toBe(0);expect(f.store).toBe(R);expect(f.value).toBe("1.1")})})});describe("validateedit",function(){it("should fire the validateedit event before edit",function(){var f=false,g=false;runs(function(){N.on("validateedit",function(){f=!g});N.on("edit",function(i,h){g=true});d(0,0)});runs(function(){N.completeEdit();expect(f).toBe(true)})});it("should pass the plugin and the context",function(){var g,f;runs(function(){N.on("validateedit",function(i,h){g=i;f=h});d(0,0)});runs(function(){N.getActiveEditor().field.setValue("foo");N.completeEdit();expect(g).toBe(N);expect(f.colIdx).toBe(0);expect(f.column).toBe(P[0]);expect(f.field).toBe("field1");expect(f.grid).toBe(A);expect(f.originalValue).toBe("1.1");expect(f.record).toBe(b(0));expect(f.row).toBe(U.getRow(0));expect(f.rowIdx).toBe(0);expect(f.store).toBe(R);expect(f.value).toBe("foo");expect(U.refreshing).toBe(false)})});it("should cancel the edit if we return false",function(){var f=false;runs(function(){N.on("validateedit",function(){return false});N.on("edit",function(h,g){f=true});d(0,0)});runs(function(){N.completeEdit();expect(N.editing).toBe(false);expect(f).toBe(false)})});it("should cancel the edit if we set context.cancel",function(){var f=false;N.on("validateedit",function(h,g){g.cancel=true});N.on("edit",function(h,g){f=true});E("dblclick",0,0);N.completeEdit();expect(N.editing).toBe(false);expect(f).toBe(false)})});describe("edit",function(){it("should fire the edit event",function(){var f=false;N.on("edit",function(h,g){f=true});E("dblclick",0,0);N.completeEdit();expect(N.editing).toBe(false);expect(f).toBe(true)});it("should pass the plugin and the context",function(){var g,f;N.on("edit",function(i,h){g=i;f=h});E("dblclick",0,0);N.getActiveEditor().field.setValue("foo");N.completeEdit();expect(g).toBe(N);expect(f.colIdx).toBe(0);expect(f.column).toBe(P[0]);expect(f.field).toBe("field1");expect(f.grid).toBe(A);expect(f.originalValue).toBe("1.1");expect(f.record).toBe(b(0));expect(f.row).toBe(U.getRow(0));expect(f.rowIdx).toBe(0);expect(f.store).toBe(R);expect(f.value).toBe("foo")});it("should update the value in the model",function(){E("dblclick",0,0);N.getActiveEditor().field.setValue("foo");N.completeEdit();expect(b(0).get("field1")).toBe("foo")})});describe("beforerefresh",function(){it("should check for the presence of dom.parentNode before executing beforeViewRefresh callback",function(){var f=A.visibleColumnManager.getColumns()[0],g=jasmine.createSpy("dummy");R.on("sort",g);N.startEdit(0,0);f.sort();f.sort();expect(g.callCount).toBe(2);R.un("sort",g)})})});describe("positioning",function(){function f(g,h){return Ext.fly(U.getCell(R.getAt(g),P[h])).getXY()}it("should position correctly on first render",function(){a();E("dblclick",0,3);expect(N.getActiveEditor().getXY()).toEqual(f(0,3))});it("should position correctly on subsequent shows",function(){a();E("dblclick",0,3);N.getActiveEditor().completeEdit();E("dblclick",0,0);expect(N.getActiveEditor().getXY()).toEqual(f(0,0));N.completeEdit();E("dblclick",2,1);expect(N.getActiveEditor().getXY()).toEqual(f(2,1))})});describe("dynamic editors",function(){beforeEach(function(){spyOn(Ext.log,"warn")});it("should allow the editor to change dynamically",function(){a();P[0].setEditor(new Ext.form.field.Trigger());E("dblclick",0,0);expect(N.getActiveEditor().field.getXType()).toBe("triggerfield")});it("should allow the editor to change in the beforeedit event",function(){a();N.on("beforeedit",function(){P[0].setEditor(new Ext.form.field.Trigger())});E("dblclick",0,0);expect(N.getActiveEditor().field.getXType()).toBe("triggerfield")});it("should allow us to set an editor if one wasn't there before",function(){var f=false;a([{dataIndex:"field1"},{dataIndex:"field2",field:"textfield"}]);P=A.getColumnManager().getColumns();P[0].setEditor(new Ext.form.field.Text());N.on("beforeedit",function(){f=true});E("dblclick",0,0);expect(f).toBe(true)});it("should allow us to clear out an editor",function(){var f=false;a();P[0].setEditor(null);N.on("beforeedit",function(){f=true});E("dblclick",0,0);expect(f).toBe(false)});it("should destroy the old field",function(){var f=new Ext.form.field.Text();a([{dataIndex:"field1",field:f}]);P=A.getColumnManager().getColumns();P[0].setEditor(new Ext.form.field.Text());expect(f.destroyed).toBe(true)})});describe("hidden columns",function(){beforeEach(function(){a([{dataIndex:"field1",field:{xtype:"textfield",itemId:"field1"}},{hidden:true,dataIndex:"field2",field:{xtype:"textfield",itemId:"field2"}},{hidden:true,dataIndex:"field3",field:{xtype:"textfield",itemId:"field3"}},{dataIndex:"field4",field:{xtype:"textfield",itemId:"field4"}},{dataIndex:"field5",field:{xtype:"textfield",itemId:"field5"}},{hidden:true,dataIndex:"field6",field:{xtype:"textfield",itemId:"field6"}},{dataIndex:"field7",field:{xtype:"textfield",itemId:"field7"}}]);P=A.getColumnManager().getColumns()});it("should start the edit before any hidden columns",function(){var f;N.on("beforeedit",function(h,g){f=g});E("dblclick",0,0);expect(f.column).toBe(P[0]);expect(f.value).toBe("1.1")});it("should start the edit in between hidden columns",function(){var f;N.on("beforeedit",function(h,g){f=g});E("dblclick",0,3);expect(f.column).toBe(P[3]);expect(f.value).toBe("1.4")});it("should start the edit after hidden columns",function(){var f;N.on("beforeedit",function(h,g){f=g});E("dblclick",0,6);expect(f.column).toBe(P[6]);expect(f.value).toBe("1.7")});describe("calling on a hidden column",function(){it("should choose the next visible column when called on a hidden column",function(){var f;N.on("beforeedit",function(h,g){f=g});N.startEditByPosition({row:0,column:1});expect(f.column).toBe(P[3])});it("should use a previous visible column if next is not available",function(){P[6].hide();var f;N.on("beforeedit",function(h,g){f=g});N.startEditByPosition({row:0,column:5});expect(f.column).toBe(P[4])})});describe("dynamic",function(){it("should trigger an edit after showing the column",function(){P[2].show();var f;N.on("beforeedit",function(h,g){f=g});E("dblclick",0,2);expect(f.column).toBe(P[2]);expect(f.value).toBe("1.3")});it("should trigger an edit after hiding a column",function(){P[3].hide();var f;N.on("beforeedit",function(h,g){f=g});E("dblclick",0,4);expect(f.column).toBe(P[4]);expect(f.value).toBe("1.5")})})});describe("locking",function(){beforeEach(function(){a([{locked:true,dataIndex:"field1",field:{xtype:"textfield"}},{locked:true,dataIndex:"field2",field:{xtype:"textfield"}},{dataIndex:"field3",field:{xtype:"textfield"}},{dataIndex:"field4",field:{xtype:"textfield"}}]);P=A.getColumnManager().getColumns()});it("should trigger an edit on the locked part",function(){var g,f=A.lockedGrid.getView();N=A.plugins[0];N.on("beforeedit",function(i,h){g=h});E("dblclick",0,0);expect(g.colIdx).toBe(0);expect(g.column).toBe(P[0]);expect(g.field).toBe("field1");expect(g.grid).toBe(A.lockedGrid);expect(g.originalValue).toBe("1.1");expect(g.record).toBe(b(0));expect(g.row).toBe(f.getRow(0));expect(g.rowIdx).toBe(0);expect(g.store).toBe(R);expect(g.value).toBe("1.1");expect(N.getActiveEditor().el.dom.parentNode).toBe(g.cell)});it("should trigger an edit on the unlocked part",function(){var g,f=A.normalGrid.getView();N=A.plugins[0];N.on("beforeedit",function(i,h){g=h});E("dblclick",0,3);expect(g.colIdx).toBe(1);expect(g.column).toBe(P[3]);expect(g.field).toBe("field4");expect(g.grid).toBe(A.normalGrid);expect(g.originalValue).toBe("1.4");expect(g.record).toBe(b(0));expect(g.row).toBe(f.getRow(0));expect(g.rowIdx).toBe(0);expect(g.store).toBe(R);expect(g.value).toBe("1.4");expect(N.getActiveEditor().el.dom.parentNode).toBe(g.cell)});it("should move the editor when a column is locked",function(){var g,f=A.normalGrid.getView();N=A.plugins[0];N.on({beforeedit:function(i,h){g=h}});E("dblclick",0,2);expect(N.getActiveEditor().el.dom.parentNode).toBe(g.cell);N.completeEdit();A.lock(P[2]);f=A.lockedGrid.getView();E("dblclick",0,2);expect(g.colIdx).toBe(2);expect(g.column).toBe(P[2]);expect(g.field).toBe("field3");expect(g.grid).toBe(A.lockedGrid);expect(g.originalValue).toBe("1.3");expect(g.record).toBe(b(0));expect(g.row).toBe(f.getRow(f.all.first()));expect(g.rowIdx).toBe(0);expect(g.store).toBe(R);expect(g.value).toBe("1.3");expect(N.getActiveEditor().el.dom.parentNode).toBe(g.cell)})});describe("reconfigure",function(){var f;beforeEach(function(){a();f=[];Ext.Array.forEach(A.getColumnManager().getColumns(),function(g){f.push(g.getEditor())});A.reconfigure(null,[{dataIndex:"field1",field:{id:"newEd"}},{dataIndex:"field2"}]);P=A.getColumnManager().getColumns()});it("should destroy old editors",function(){Ext.Array.forEach(f,function(g){expect(g.destroyed).toBe(true)})});it("should update columns with no editors",function(){E("dblclick",0,1);expect(N.editing).toBeFalsy()});it("should use new editors",function(){E("dblclick",0,0);expect(N.getActiveEditor().field.getId()).toBe("newEd");expect(N.editing).toBe(true)})});describe("key handling",function(){beforeEach(function(){a()});it("should move to the next cell when tabbing",function(){d(0,0);runs(function(){N.getActiveEditor().field.setValue("foobar");c(M)});waits(100);waitsFor(function(){return N.getActiveColumn()===P[1]&&Ext.Element.getActiveElement()===N.getActiveEditor().field.inputEl.dom})});it("should move to the next row if at the last cell",function(){d(0,4);runs(function(){c(M)});waitsFor(function(){return N.getActiveColumn()===P[0]&&N.getActiveRecord()===b(1)})});it("should complete the edit on enter",function(){d(1,1);runs(function(){N.getActiveEditor().field.setValue("foo");N.getActiveEditor().specialKeyDelay=0;c(S);expect(b(1).get("field2")).toBe("foo")})});it("should cancel the edit on ESC",function(){d(1,1);runs(function(){N.getActiveEditor().field.setValue("foo");N.getActiveEditor().specialKeyDelay=0;c(e);expect(b(1).get("field2")).toBe("2.2")})});it("should navigate to the other side when tabbing at a locking boundary",function(){A.destroy();a([{locked:true,dataIndex:"field1",field:{xtype:"textfield"}},{dataIndex:"field4",field:{xtype:"textfield"}}]);d(0,0);runs(function(){expect(N.getActiveEditor().context.view===A.lockedGrid.view).toBe(true);expect(N.getActiveEditor().context.isEqual(A.lockedGrid.view.actionPosition)).toBe(true);c(M)});waitsFor(function(){return N.getActiveEditor().context.view===A.normalGrid.view});runs(function(){expect(A.lockedGrid.view.actionPosition).toBeNull();expect(N.getActiveEditor().context.isEqual(A.normalGrid.view.actionPosition)).toBe(true)})})});describe("misc",function(){it("should not have the editors participate as part of a form",function(){a(undefined,undefined,{renderTo:null});var g=new Ext.form.Panel({renderTo:Ext.getBody(),items:[{name:"foo",xtype:"textfield",value:"v1"},{name:"bar",xtype:"textfield",value:"v2"},A]});E("dblclick",0,0);var f=g.getForm().getValues();expect(f).toEqual({foo:"v1",bar:"v2"});g.destroy()})});describe("locking with group headers",function(){it("should start edit after moving a locked column to a group header in the unlocked view (EXTJSIV-11294)",function(){a([{dataIndex:"name",locked:true,editor:"textfield"},{itemId:"ct",columns:[{dataIndex:"email",flex:1},{dataIndex:"phone"}]}]);var f=A.headerCt;A.unlock(f.getHeaderAtIndex(0),1,A.down("#ct"));N=A.view.editingPlugin;N.startEdit(0,1);expect(N.editing).toBe(true);expect(N.getActiveColumn()).toBe(f.getHeaderAtIndex(1));expect(N.getActiveRecord()).toBe(R.getAt(0))})});describe("Autorepeat TAB in ungrouped grid",function(){function f(i,h){return N.editing&&N.activeColumn===P[h]&&N.activeRecord===R.getAt(i)}var g=false;beforeEach(function(){a();A.addDocked({dock:"top",xtype:"toolbar",items:[{text:"button",listeners:{focus:function(){g=true}}}]});delete P[4].field});F("should not lose track of editing position during repeated tabbing",function(){E("dblclick",0,0);waitsFor(function(){return f(0,0)});runs(function(){expect(N.editing).toBe(true);jasmine.fireKeyEvent(Ext.Element.getActiveElement(),"keydown",M)});waitsFor(function(){return f(0,1)},"move to cell 0, 1");runs(function(){jasmine.fireKeyEvent(Ext.Element.getActiveElement(),"keydown",M)});waitsFor(function(){return f(0,2)},"move to cell 0, 2");runs(function(){jasmine.fireKeyEvent(Ext.Element.getActiveElement(),"keydown",M)});waitsFor(function(){return f(0,3)},"move to cell 0, 3");runs(function(){jasmine.fireKeyEvent(Ext.Element.getActiveElement(),"keydown",M)});waitsFor(function(){return f(1,0)},"move to cell 1, 0");runs(function(){jasmine.fireKeyEvent(Ext.Element.getActiveElement(),"keydown",M)});waitsFor(function(){return f(1,1)},"move to cell 1, 1");runs(function(){jasmine.fireKeyEvent(Ext.Element.getActiveElement(),"keydown",M)});waitsFor(function(){return f(1,2)},"move to cell 1, 2");runs(function(){jasmine.fireKeyEvent(Ext.Element.getActiveElement(),"keydown",M)});waitsFor(function(){return f(1,3)},"move to cell 1, 3");runs(function(){jasmine.fireKeyEvent(Ext.Element.getActiveElement(),"keydown",M)});waitsFor(function(){return f(2,0)},"move to cell 2, 0");runs(function(){expect(g).toBe(false);expect(N.getActiveColumn()).toBe(P[0]);expect(N.getActiveRecord()).toBe(R.getAt(2))})})});describe("Autorepeat TAB in grouped grid",function(){F("should not lose track of editing position when autotabbing over group headers",function(){a([{dataIndex:"field1",editor:"textfield"},{dataIndex:"field2",editor:"textfield"},{dataIndex:"field3",editor:"textfield"}],{},{features:{ftype:"grouping"}});N.startEdit(0,0);expect(N.editing).toBe(true);expect(N.getActiveColumn()).toBe(P[0]);expect(N.getActiveRecord()).toBe(R.getAt(0));jasmine.fireKeyEvent(Ext.Element.getActiveElement(),"keydown",M);waits(20);runs(function(){jasmine.fireKeyEvent(Ext.Element.getActiveElement(),"keydown",M)});waits(20);runs(function(){jasmine.fireKeyEvent(Ext.Element.getActiveElement(),"keydown",M)});waits(20);runs(function(){expect(N.getActiveColumn()).toBe(P[0]);expect(N.getActiveRecord()).toBe(R.getAt(1))})})});describe("refreshing view",function(){beforeEach(function(){waits(10);runs(function(){a()})});it("CellEditor should survive a refresh in active state",function(){var f;N.startEdit(0,0);expect(N.editing).toBe(true);expect(N.getActiveEditor().isVisible()).toBe(true);f=U.refreshCounter;U.refresh();expect(U.refreshCounter).toEqual(f+1);expect(N.editing).toBe(true);expect(N.getActiveEditor().isVisible()).toBe(true)})});describe("Dragging out of an active cell editor in a locking view, and mouseup in the locking partner view",function(){it("should not throw an error when dragging out of an active cell editor in a locking view, and mouseup in the locking partner view",function(){a([{locked:true,dataIndex:"field1",field:{xtype:"textfield"}},{locked:true,dataIndex:"field2",field:{xtype:"textfield"}},{dataIndex:"field3",field:{xtype:"textfield"}},{dataIndex:"field4",field:{xtype:"textfield"}}]);N=A.view.editingPlugin;P=A.getColumnManager().getColumns();var i=H(0,0),f=Ext.fly(i).getAnchorXY("c"),h,g;N.startEdit(0,0);expect(N.editing).toBe(true);expect(N.getActiveEditor().isVisible()).toBe(true);h=N.getActiveEditor().field.inputEl.dom;g=Ext.fly(h).getAnchorXY("c");jasmine.fireMouseEvent(h,"mousedown",g[0],g[1]);jasmine.fireMouseEvent(h,"mousemove",g[0],g[1]);jasmine.fireMouseEvent(i,"mousemove",f[0],f[1]);jasmine.fireMouseEvent(i,"mouseup",f[0],f[1])})});describe("Single column editing using a single editor",function(){function f(h,g){return N.editing&&N.activeColumn===P[g]&&N.activeRecord===R.getAt(h)}F("should use the same editor for same typed cells, and not blur between edits",function(){A=new Ext.grid.property.Grid({renderTo:document.body,width:300,source:{"(name)":"Properties Grid",autoFitColumns:true,borderWidth:1,created:Ext.Date.parse("10/15/2006","m/d/Y"),grouping:false,productionQuality:false,tested:false,version:0.01}});P=A.getColumnManager().getColumns();N=A.view.editingPlugin;R=A.store;var h,g;N.startEdit(3,1);waitsFor(function(){return f(3,1)},"move to cell 3, 1");runs(function(){expect(N.editing).toBe(true);h=N.getActiveEditor();expect(h.isVisible()).toBe(true);jasmine.fireKeyEvent(h.field.inputEl,"keydown",M)});waitsFor(function(){return f(4,1)},"move to cell 4, 1");runs(function(){expect(N.getActiveEditor()).not.toBe(h);h=N.getActiveEditor();expect(h.isVisible()).toBe(true);expect(h.field.getValue()).toEqual(false);h.on({complete:function(){g=h}});jasmine.fireKeyEvent(h.field.inputEl,"keydown",M)});waitsFor(function(){return f(5,1)},"move to cell 5, 1");runs(function(){expect(N.getActiveEditor()).toBe(h);expect(h.isVisible()).toBe(true);expect(h.field.getValue()).toEqual(false);jasmine.fireKeyEvent(h.field.inputEl,"keydown",M)});waitsFor(function(){return f(6,1)},"move to cell 6, 1");runs(function(){expect(N.getActiveEditor()).toBe(h);expect(h.isVisible()).toBe(true);expect(h.field.getValue()).toEqual(false);jasmine.fireKeyEvent(h.field.inputEl,"keydown",M)});waitsFor(function(){return f(7,1)},"move to cell 7, 1");runs(function(){expect(N.getActiveEditor()).not.toBe(h);h=N.getActiveEditor();expect(h.isVisible()).toBe(true);expect(h.field.getValue()).toEqual(0.01);expect(g.isVisible()).toBe(false)})})});describe("with combos",function(){it("should retain the value when tabbing and not modifying the value after reusing the editor",function(){a([{dataIndex:"field1",editor:{xtype:"combobox",store:["Foo","Bar","Baz"]}}]);N.startEditByPosition({row:0,column:0});var f=N.getActiveEditor().field;jasmine.waitForFocus(f);runs(function(){jasmine.fireKeyEvent(f.inputEl,"keydown",Ext.event.Event.DOWN);jasmine.fireKeyEvent(f.inputEl,"keydown",Ext.event.Event.DOWN);jasmine.fireKeyEvent(f.inputEl,"keydown",Ext.event.Event.DOWN);jasmine.fireKeyEvent(f.inputEl,"keydown",Ext.event.Event.TAB);expect(R.getAt(0).get("field1")).toBe("Baz")});jasmine.waitForFocus(f);runs(function(){jasmine.fireKeyEvent(f.inputEl,"keydown",Ext.event.Event.TAB);expect(R.getAt(1).get("field1")).toBe("2.1")})})})})}C(false);C(true);describe("misc",function(){describe("property grid editing with textfield and triggerfield - blurring test",function(){var K,L;beforeEach(function(){K=new Ext.tree.Panel({height:100,root:{text:"node1",expanded:true,children:[{text:"node2",leaf:true}]},width:200,viewConfig:{plugins:{pluginId:"ddPlug",ptype:"treeviewdragdrop"}},renderTo:document.body});A=new Ext.grid.property.Grid({width:200,height:200,renderTo:document.body,source:{text:"abc",autoFitColumns:true}});L=A.findPlugin("cellediting")});afterEach(function(){Ext.destroy(K,A)});F("should blur and hide the cell editor on focusing the tree",function(){var M;waitsFor(function(){return A.view.all.getCount()});runs(function(){E("click",0,1)});waitsFor(function(){M=L.editors.items[0];return M.isVisible()&&M.editing});runs(function(){K.getView().getNavigationModel().setPosition(0)});waitsFor(function(){return M.isVisible()===false},"grid cell editor to hide");runs(function(){jasmine.fireMouseEvent(K.view.getNode(1),"mouseup");E("click",1,1);expect(L.editors.items[1].isVisible()).toBe(true);K.getNavigationModel().setPosition(0,0)});waitsFor(function(){return L.editors.items[1].isVisible()===false},"second grid cell editor to hide");runs(function(){jasmine.fireMouseEvent(K.view.getNode(1),"mouseup")})})})})})