describe("grid-columns",function(){function A(B){describe(B?"with buffered rendering":"without buffered rendering",function(){var E=4,J=1000,C,M,O,P,G;function K(X,S,T,R){var W,U,V;S=S||{};O=[];if(!X||typeof X==="number"){W=[];X=X||E;for(V=0;V<X;++V){U={itemId:"col"+V,text:"Col"+V,dataIndex:"field"+V};if(T&&T(V)){U.hidden=true}if(R&&R(V)){U.locked=true}U=new Ext.grid.column.Column(U);W.push(U)}}else{W=X}P=new Ext.data.Store({model:spec.TestModel,data:[{field0:"val1",field1:"val2",field2:"val3",field3:"val4",field4:"val5"}]});C=new Ext.grid.Panel(Ext.apply({renderTo:Ext.getBody(),columns:W,width:J,height:500,border:false,store:P,bufferedRenderer:B,viewConfig:{mouseOverOutBuffer:0}},S));M=C.view;O=C.getColumnManager().getColumns()}function Q(R,S){return C.getView().getCellInclusive({row:R,column:S})}function I(R,S){return L(R,S).innerHTML}function L(S,T){var R=Q(S,T);return Ext.fly(R).down(C.getView().innerSelector).dom}function H(S,R){return Ext.fly(S).hasCls(R)}function N(R){jasmine.fireMouseEvent(R.titleEl,"click",10)}function F(){Ext.define("spec.TestModel",{extend:"Ext.data.Model",fields:["field0","field1","field2","field3","field4"]})}function D(){Ext.destroy(C,P,G);C=M=P=O=G=null;Ext.undefine("spec.TestModel");Ext.data.Model.schema.clear()}beforeEach(F);afterEach(D);describe("as containers",function(){var S="x-leaf-column-header",R;afterEach(function(){R=null});describe("group headers",function(){beforeEach(function(){K([{itemId:"main1",columns:[{itemId:"child1"},{itemId:"child2"},{itemId:"child3"}]}]);R=C.down("#main1")});it("should be stamped as a container",function(){expect(R.isContainer).toBe(true)});it("should not give the titleEl the leaf column class",function(){expect(R.titleEl.hasCls(S)).toBe(false)})});describe("contains child items",function(){beforeEach(function(){K([{text:"Foo",dataIndex:"field0",items:[{xtype:"textfield",itemId:"foo"}]}]);R=C.visibleColumnManager.getHeaderByDataIndex("field0")});it("should be stamped as a container",function(){expect(R.isContainer).toBe(true)});it("should not give the titleEl the leaf column class",function(){expect(R.titleEl.hasCls(S)).toBe(false)});describe("focusing",function(){it("should not throw when focusing",function(){expect(function(){C.down("#foo").onFocus()}).not.toThrow()});it("should return the items collection",function(){var T=C.visibleColumnManager.getHeaderByDataIndex("field0");expect(T.getFocusables()).toBe(T.items.items)})})})});describe("cell sizing",function(){it("should size the cells to match fixed header sizes",function(){K([{width:200},{width:500}]);expect(Q(0,0).getWidth()).toBe(200);expect(Q(0,1).getWidth()).toBe(500)});it("should size the cells to match flex header sizes",function(){K([{flex:8},{flex:2}]);expect(Q(0,0).getWidth()).toBe(800);expect(Q(0,1).getWidth()).toBe(200)});it("should size the cells to match an the text size in the header",function(){K([{width:null,text:'<div style="width: 25px;"></div>'},{width:null,text:'<div style="width: 75px;"></div>'}]);expect(Q(0,0).getWidth()).toBe(O[0].titleEl.getWidth()+O[0].el.getBorderWidth("lr"));expect(Q(0,1).getWidth()).toBe(O[1].titleEl.getWidth()+O[1].el.getBorderWidth("lr"))})});describe("initializing",function(){describe("normal",function(){it("should accept a column array",function(){K([{text:"Foo",dataIndex:"field0"}]);expect(C.getColumnManager().getHeaderAtIndex(0).text).toBe("Foo")});it("should accept a header config",function(){K({margin:5,items:[{text:"Foo",dataIndex:"field0"}]});expect(C.getColumnManager().getHeaderAtIndex(0).text).toBe("Foo");expect(C.headerCt.margin).toBe(5)})});describe("locking",function(){it("should accept a column array, enabling locking if a column is configured with locked: true",function(){K([{text:"Foo",dataIndex:"field0",locked:true},{text:"Bar",dataIndex:"field1"}]);expect(C.lockable).toBe(true)});it("should accept a header config, enabling locking if any column is configured with locked: true",function(){K({items:[{text:"Foo",dataIndex:"field0",locked:true},{text:"Bar",dataIndex:"field1"}]});expect(C.lockable).toBe(true);expect(C.getVisibleColumns().length).toBe(2);expect(C.getColumns().length).toBe(2)})})});describe("column manager",function(){function T(){return C.getColumnManager().getColumns()}function S(){return C.getColumnManager()}function U(){return C.getVisibleColumnManager().getColumns()}function R(){return C.getVisibleColumnManager()}it("should provide a getColumnManager method",function(){K();expect(S().$className).toBe("Ext.grid.ColumnManager")});it("should provide a getVisibleColumnManager method",function(){K();expect(R().$className).toBe("Ext.grid.ColumnManager")});describe("simple grid",function(){beforeEach(function(){K()});it("should return all leaf columns",function(){expect(U().length).toBe(E)});it("should have the correct column order",function(){var X=U(),W=0,V=X.length;for(;W<V;++W){expect(X[W]).toBe(O[W])}});it("should update the order when moving columns",function(){C.headerCt.move(3,1);var V=U();expect(V[0]).toBe(O[0]);expect(V[1]).toBe(O[3]);expect(V[2]).toBe(O[1]);expect(V[3]).toBe(O[2])});it("should update the columns when removing a column",function(){C.headerCt.remove(1);var V=U();expect(V[0]).toBe(O[0]);expect(V[1]).toBe(O[2]);expect(V[2]).toBe(O[3])});it("should update the columns when adding a column",function(){C.headerCt.add({text:"Col4"});expect(U()[4].text).toBe("Col4")});describe("functions",function(){describe("getHeaderIndex",function(){it("should return the correct index for the header",function(){expect(S().getHeaderIndex(O[3])).toBe(3)});it("should return -1 if the column doesn't exist",function(){G=new Ext.grid.column.Column();expect(S().getHeaderIndex(G)).toBe(-1)})});describe("getHeaderAtIndex",function(){it("should return the column reference",function(){expect(S().getHeaderAtIndex(2)).toBe(O[2])});it("should return null if the index is out of bounds",function(){expect(S().getHeaderAtIndex(10)).toBeNull()})});describe("getHeaderById",function(){it("should return the column reference by id",function(){expect(S().getHeaderById("col1")).toBe(O[1])});it("should return null if the id doesn't exist",function(){expect(S().getHeaderById("foo")).toBeNull()})});it("should return the first item",function(){expect(S().getFirst()).toBe(O[0])});it("should return the last item",function(){expect(S().getLast()).toBe(O[3])});describe("getNextSibling",function(){it("should return the next sibling",function(){expect(S().getNextSibling(O[1])).toBe(O[2])});it("should return the null if the next sibling doesn't exist",function(){expect(S().getNextSibling(O[3])).toBeNull()})});describe("getPreviousSibling",function(){it("should return the previous sibling",function(){expect(S().getPreviousSibling(O[2])).toBe(O[1])});it("should return the null if the previous sibling doesn't exist",function(){expect(S().getPreviousSibling(O[0])).toBeNull()})})})});describe("getHeaderIndex",function(){var V,W;beforeEach(function(){K([{text:"Name",width:100,dataIndex:"name",hidden:true},{text:"Email",width:100,dataIndex:"email"},{text:"Stock Price",columns:[{text:"Price",width:75,dataIndex:"price"},{text:"Phone",width:80,dataIndex:"phone",hidden:true},{text:"% Change",width:40,dataIndex:"pctChange"}]},{text:"Foo",columns:[{text:"Foo Price",width:75,dataIndex:"price",hidden:true},{text:"Foo Phone",width:80,dataIndex:"phone"},{text:"Foo % Change",width:40,dataIndex:"pctChange"}]}]);W=C.headerCt.items});afterEach(function(){V=W=null});describe("all columns",function(){describe("when argument is a column",function(){it("should return a valid index",function(){V=S().getHeaderIndex(W.items[0]);expect(V).not.toBe(-1);expect(V).toBe(0)});it("should return the header regardless of visibility",function(){var X;X=W.items[0];V=S().getHeaderIndex(X);expect(X.hidden).toBe(true);expect(V).toBe(0)});it("should return the index of the header in its owner stack - rootHeader",function(){V=S().getHeaderIndex(W.items[3].items.items[0]);expect(V).toBe(5)});it("should return the index of the header in its owner stack - groupHeader",function(){var X=W.items[3];V=X.columnManager.getHeaderIndex(X.items.items[0]);expect(V).toBe(0)})});describe("when argument is a group header",function(){it("should return a valid index",function(){V=S().getHeaderIndex(W.items[2]);expect(V).not.toBe(-1);expect(V).toBe(2)});it("should return an index of the first leaf of group header",function(){var X;V=S().getHeaderIndex(W.items[2]);X=S().getHeaderAtIndex(V);expect(V).toBe(2);expect(X.hidden).toBe(false);expect(X.dataIndex).toBe("price")});it("should be a reference to the first leaf header in the grouped header's columnn manager",function(){var X,Y,Z;X=W.items[2];Z=X.columnManager.getHeaderAtIndex(0);V=S().getHeaderIndex(X);Y=S().getHeaderAtIndex(V);expect(Y).toBe(Z);expect(Y.hidden).toBe(Z.hidden);expect(Y.dataIndex).toBe(Z.dataIndex)});it("should return first sub-header regardless of visibility",function(){var X,Y,Z;X=W.items[3];Z=X.columnManager.getHeaderAtIndex(0);V=S().getHeaderIndex(X);Y=S().getHeaderAtIndex(V);expect(Y).toBe(Z);expect(Y.hidden).toBe(true);expect(Y.text).toBe("Foo Price")})})});describe("visible only",function(){describe("when argument is a column",function(){it("should return the correct index for the header",function(){expect(R().getHeaderIndex(W.items[1])).toBe(0)});it("should return -1 if the column doesn't exist",function(){G=new Ext.grid.column.Column();expect(R().getHeaderIndex(G)).toBe(-1)});it("should not return a hidden sub-header",function(){var X;X=W.items[0];V=R().getHeaderIndex(X);expect(X.hidden).toBe(true);expect(V).toBe(-1)});it("should return a valid index",function(){V=R().getHeaderIndex(W.items[1]);expect(V).not.toBe(-1);expect(V).toBe(0)});it("should return the index of the header in its owner stack - rootHeader",function(){V=R().getHeaderIndex(W.items[3].items.items[2]);expect(V).toBe(4)});it("should return the index of the header in its owner stack - groupHeader",function(){var X=W.items[3];V=X.visibleColumnManager.getHeaderIndex(X.items.items[2]);expect(V).toBe(1)})});describe("when argument is a group header",function(){it("should return a valid index",function(){V=R().getHeaderIndex(W.items[2]);expect(V).not.toBe(-1);expect(V).toBe(1)});it("should return an index of the first leaf of group header",function(){var X;V=R().getHeaderIndex(W.items[2]);X=R().getHeaderAtIndex(V);expect(V).toBe(1);expect(X.hidden).toBe(false);expect(X.dataIndex).toBe("price")});it("should be a reference to the first leaf header in the grouped header's columnn manager",function(){var X,Y,Z;X=W.items[2];Z=W.items[2].visibleColumnManager.getHeaderAtIndex(0);V=R().getHeaderIndex(X);Y=R().getHeaderAtIndex(V);expect(Y).toBe(Z);expect(Y.hidden).toBe(Z.hidden);expect(Y.dataIndex).toBe(Z.dataIndex)});it("should not return a hidden sub-header",function(){var X,Y,Z;X=W.items[3];Z=X.visibleColumnManager.getHeaderAtIndex(0);V=R().getHeaderIndex(X);Y=R().getHeaderAtIndex(V);expect(Y).toBe(Z);expect(Y.hidden).toBe(false);expect(Y.text).toBe("Foo Phone")})})})});describe("getHeaderAtIndex",function(){var W,V;beforeEach(function(){K([{text:"Name",width:100,dataIndex:"name",hidden:true},{text:"Email",width:100,dataIndex:"email"},{text:"Stock Price",columns:[{text:"Price",width:75,dataIndex:"price"},{text:"Phone",width:80,dataIndex:"phone",hidden:true},{text:"% Change",width:40,dataIndex:"pctChange"}]},{text:"Foo",columns:[{text:"Foo Price",width:75,dataIndex:"price",hidden:true},{text:"Foo Phone",width:80,dataIndex:"phone"},{text:"Foo % Change",width:40,dataIndex:"pctChange"}]}]);V=C.headerCt.items});afterEach(function(){W=V=null});describe("all columns",function(){it("should return a valid header",function(){W=S().getHeaderAtIndex(0);expect(W).not.toBe(null);expect(W.dataIndex).toBe("name")});it("should return the correct header from the index",function(){expect(S().getHeaderAtIndex(0).dataIndex).toBe("name")});it("should return null if the column doesn't exist",function(){expect(S().getHeaderAtIndex(50)).toBe(null)});it("should return the header regardless of visibility",function(){var X;W=S().getHeaderAtIndex(0);X=S().getHeaderAtIndex(1);expect(W).not.toBe(null);expect(W.hidden).toBe(true);expect(X).not.toBe(null);expect(X.hidden).toBe(false)});it("should return the header in its owner stack - rootHeader",function(){W=S().getHeaderAtIndex(0);expect(W.text).toBe("Name")});it("should return the index of the header in its owner stack - groupHeader",function(){W=V.items[3].columnManager.getHeaderAtIndex(0);expect(W.text).toBe("Foo Price")})});describe("visible only",function(){it("should return the correct header from the index",function(){expect(R().getHeaderAtIndex(0).dataIndex).toBe("email")});it("should return null if the column doesn't exist",function(){expect(R().getHeaderAtIndex(50)).toBe(null)});it("should not return a hidden sub-header",function(){W=R().getHeaderAtIndex(2);expect(W.hidden).toBe(false);expect(W.dataIndex).toBe("pctChange")});it("should return a valid header",function(){W=R().getHeaderAtIndex(0);expect(W).not.toBe(null);expect(W.dataIndex).toBe("email")});it("should return the header in its owner stack - rootHeader",function(){W=R().getHeaderAtIndex(0);expect(W.text).toBe("Email")});it("should return the index of the header in its owner stack - groupHeader",function(){var X=V.items[3];W=V.items[3].visibleColumnManager.getHeaderAtIndex(0);expect(W.text).toBe("Foo Phone")})})});describe("hidden columns",function(){beforeEach(function(){K(8,null,function(V){return V>0&&V%3===0})});it("should return all columns when using getColumnManager",function(){expect(T().length).toBe(8)});it("should return only visible columns when using getVisibleColumnManager",function(){expect(U().length).toBe(6)});it("should update the collection when hiding a column",function(){O[0].hide();expect(U().length).toBe(5)});it("should update the collection when showing a column",function(){O[3].show();expect(U().length).toBe(7)});describe("getHeaderAtIndex",function(){it("should return the column reference",function(){expect(R().getHeaderAtIndex(3)).toBe(O[4])});it("should return null if the index is out of bounds",function(){expect(R().getHeaderAtIndex(7)).toBeNull()})});describe("getHeaderById",function(){it("should return the column reference by id",function(){expect(R().getHeaderById("col1")).toBe(O[1])});it("should return null if the id doesn't exist",function(){expect(R().getHeaderById("col3")).toBeNull()})});it("should return the first item",function(){expect(R().getFirst()).toBe(O[0])});it("should return the last item",function(){expect(R().getLast()).toBe(O[7])});describe("getNextSibling",function(){it("should return the next sibling",function(){expect(R().getNextSibling(O[2])).toBe(O[4])});it("should return the null if the next sibling doesn't exist",function(){expect(R().getNextSibling(O[3])).toBeNull()})});describe("getPreviousSibling",function(){it("should return the previous sibling",function(){expect(R().getPreviousSibling(O[7])).toBe(O[5])});it("should return the null if the previous sibling doesn't exist",function(){expect(R().getPreviousSibling(O[6])).toBeNull()})})});describe("locking",function(){beforeEach(function(){K(10,null,null,function(V){return V<=3})});describe("global manager",function(){it("should return both sets of columns",function(){expect(T().length).toBe(10)});it("should update the collection when adding to the locked side",function(){C.lockedGrid.headerCt.add({text:"Foo"});expect(T().length).toBe(11)});it("should update the collection when adding to the unlocked side",function(){C.normalGrid.headerCt.add({text:"Foo"});expect(T().length).toBe(11)});it("should update the collection when removing from the locked side",function(){C.lockedGrid.headerCt.remove(0);expect(T().length).toBe(9)});it("should update the collection when removing from the unlocked side",function(){C.normalGrid.headerCt.remove(0);expect(T().length).toBe(9)});it("should maintain the same size when locking an item",function(){C.lock(O[4]);expect(T().length).toBe(10)});it("should maintain the same size when unlocking an item",function(){C.unlock(O[0]);expect(T().length).toBe(10)})});describe("locked side",function(){var V=function(){return C.lockedGrid.getColumnManager()};it("should only return the columns for this side",function(){expect(V().getColumns().length).toBe(4)});it("should update the collection when adding an item to this side",function(){C.lock(O[9]);expect(V().getColumns().length).toBe(5)});it("should update the collection when removing an item from this side",function(){C.unlock(O[0]);expect(V().getColumns().length).toBe(3)});describe("function",function(){describe("getHeaderIndex",function(){it("should return the correct index for the header",function(){expect(V().getHeaderIndex(O[2])).toBe(2)});it("should return -1 if the column doesn't exist",function(){expect(V().getHeaderIndex(O[5])).toBe(-1)})});describe("getHeaderAtIndex",function(){it("should return the column reference",function(){expect(V().getHeaderAtIndex(3)).toBe(O[3])});it("should return null if the index is out of bounds",function(){expect(V().getHeaderAtIndex(6)).toBeNull()})});describe("getHeaderById",function(){it("should return the column reference by id",function(){expect(V().getHeaderById("col1")).toBe(O[1])});it("should return null if the id doesn't exist",function(){expect(V().getHeaderById("col5")).toBeNull()})})})});describe("unlocked side",function(){var V=function(){return C.normalGrid.getColumnManager()};it("should only return the columns for this side",function(){expect(V().getColumns().length).toBe(6)});it("should update the collection when adding an item to this side",function(){C.unlock(O[1]);expect(V().getColumns().length).toBe(7)});it("should update the collection when removing an item from this side",function(){C.lock(O[7]);expect(V().getColumns().length).toBe(5)});describe("function",function(){var W=4;describe("getHeaderIndex",function(){it("should return the correct index for the header",function(){expect(V().getHeaderIndex(O[W+2])).toBe(2)});it("should return -1 if the column doesn't exist",function(){expect(V().getHeaderIndex(O[0])).toBe(-1)})});describe("getHeaderAtIndex",function(){it("should return the column reference",function(){expect(V().getHeaderAtIndex(3)).toBe(O[3+W])});it("should return null if the index is out of bounds",function(){expect(V().getHeaderAtIndex(6)).toBeNull()})});describe("getHeaderById",function(){it("should return the column reference by id",function(){expect(V().getHeaderById("col6")).toBe(O[6])});it("should return null if the id doesn't exist",function(){expect(V().getHeaderById("col2")).toBeNull()})})})})})});describe("sorting",function(){it("should sort by dataIndex when clicking on the header with sortable: true",function(){K([{dataIndex:"field0",sortable:true}]);N(O[0]);var R=P.getSorters();expect(R.getCount()).toBe(1);expect(R.first().getProperty()).toBe("field0");expect(R.first().getDirection()).toBe("ASC")});it("should invert the sort order when clicking on a sorted column",function(){K([{dataIndex:"field0",sortable:true}]);N(O[0]);var R=P.getSorters();N(O[0]);expect(R.getCount()).toBe(1);expect(R.first().getProperty()).toBe("field0");expect(R.first().getDirection()).toBe("DESC");N(O[0]);expect(R.getCount()).toBe(1);expect(R.first().getProperty()).toBe("field0");expect(R.first().getDirection()).toBe("ASC")});it("should not sort when configured with sortable false",function(){K([{dataIndex:"field0",sortable:false}]);N(O[0]);expect(P.getSorters().getCount()).toBe(0)});it("should not sort when the grid is configured with sortableColumns: false",function(){K([{dataIndex:"field0"}],{sortableColumns:false});N(O[0]);expect(P.getSorters().getCount()).toBe(0)})});describe("grouped columns",function(){var T;function S(V,U){if(C){C.destroy();C=null}K(V,{renderTo:null,stateful:U,stateId:"foo"})}function R(U){return C.down("#"+U)}describe("when stateful",function(){var U;beforeEach(function(){new Ext.state.Provider();K([{itemId:"main1",columns:[{itemId:"child1"},{itemId:"child2"},{itemId:"child3"}]},{itemId:"main2",columns:[{itemId:"child4"},{itemId:"child5"},{itemId:"child6"}]}],{stateful:true,stateId:"foo"})});afterEach(function(){Ext.state.Manager.getProvider().clear();U=null});it("should work when toggling visibility on the groups",function(){U=C.down("#main2");U.hide();C.saveState();U.show();expect(C.down("#child6").hidden).toBe(false)});it("should not show a previously hidden subheader when the visibility of its group header is toggled",function(){var V=C.down("#child4");V.hide();U=C.down("#main2");U.hide();U.show();expect(V.hidden).toBe(true)})});describe("column visibility",function(){var U;afterEach(function(){U=null});describe("hiding/show during construction",function(){it("should be able to show a column during construction",function(){expect(function(){K([{dataIndex:"field1",hidden:true,listeners:{added:function(V){V.show()}}}])}).not.toThrow();expect(C.getVisibleColumnManager().getColumns()[0]).toBe(O[0])});it("should be able to hide a column during construction",function(){expect(function(){K([{dataIndex:"field1",listeners:{added:function(V){V.hide()}}}])}).not.toThrow();expect(C.getVisibleColumnManager().getColumns().length).toBe(0)})});describe("when groupheader parent is hidden",function(){describe("hidden at config time",function(){beforeEach(function(){K([{itemId:"main1"},{itemId:"main2",hidden:true,columns:[{itemId:"child1"},{itemId:"child2"}]}]);U=C.view.body.query(".x-grid-row td")});it("should hide child columns at config time if the parent is hidden",function(){expect(C.down("#child1").getInherited().hidden).toBe(true);expect(C.down("#child2").getInherited().hidden).toBe(true);expect(U.length).toBe(1)});it("should not explicitly hide any child columns (they will be hierarchically hidden)",function(){expect(C.down("#child1").hidden).toBe(false);expect(C.down("#child2").hidden).toBe(false);expect(U.length).toBe(1)})});describe("hidden at run time",function(){beforeEach(function(){K([{itemId:"main1"},{itemId:"main2",columns:[{itemId:"child1"},{itemId:"child2"}]}]);C.down("#main2").hide();U=C.view.body.query(".x-grid-row td")});it("should hide child columns at runtime if the parent is hidden",function(){expect(C.down("#child1").getInherited().hidden).toBe(true);expect(C.down("#child2").getInherited().hidden).toBe(true);expect(U.length).toBe(1)});it("should not explicitly hide any child columns (they will be hierarchically hidden)",function(){expect(C.down("#child1").hidden).toBe(false);expect(C.down("#child2").hidden).toBe(false);expect(U.length).toBe(1)})})});describe("when groupheader parent is shown",function(){describe("shown at config time",function(){beforeEach(function(){K([{itemId:"main1"},{itemId:"main2",columns:[{itemId:"child1"},{itemId:"child2"}]}]);U=C.view.body.query(".x-grid-row td")});it("should not hide child columns at config time if the parent is shown",function(){expect(C.down("#child1").getInherited().hidden).not.toBeDefined();expect(C.down("#child2").getInherited().hidden).not.toBeDefined();expect(U.length).toBe(3)});it("should not explicitly hide any child columns (they will be hierarchically shown)",function(){expect(C.down("#child1").hidden).toBe(false);expect(C.down("#child2").hidden).toBe(false);expect(U.length).toBe(3)})});describe("shown at run time",function(){beforeEach(function(){K([{itemId:"main1"},{itemId:"main2",hidden:true,columns:[{itemId:"child1"},{itemId:"child2"}]}]);C.down("#main2").show();U=C.view.body.query(".x-grid-row td")});it("should show child columns at runtime if the parent is shown",function(){expect(C.down("#child1").getInherited().hidden).not.toBeDefined();expect(C.down("#child2").getInherited().hidden).not.toBeDefined();expect(U.length).toBe(3)});it("should not explicitly hide any child columns (they will be hierarchically shown)",function(){expect(C.down("#child1").hidden).toBe(false);expect(C.down("#child2").hidden).toBe(false);expect(U.length).toBe(3)})})});describe("hiding/showing children",function(){beforeEach(function(){T=[{itemId:"col1",columns:[{itemId:"col11"},{itemId:"col12"},{itemId:"col13"}]},{itemId:"col2",columns:[{itemId:"col21"},{itemId:"col22"},{itemId:"col23"}]}]});it("should not show a previously hidden subheader when the visibility of its group header is toggled",function(){var V,W;K([{itemId:"main1"},{itemId:"main2",columns:[{itemId:"child1"},{itemId:"child2"}]}]);V=C.down("#child1");V.hide();W=C.down("#main2");W.hide();W.show();expect(V.hidden).toBe(true)});it("should allow any subheader to be reshown when all subheaders are currently hidden",function(){var V;K([{itemId:"main1"},{itemId:"main2",columns:[{itemId:"child1"},{itemId:"child2"},{itemId:"child3"}]}]);C.down("#child1").hide();C.down("#child2").hide();V=C.down("#child3");V.hide();expect(V.hidden).toBe(true);V.show();expect(V.hidden).toBe(false)});it("should show the last hidden subheader if all subheaders are currently hidden when the group is reshown",function(){var V,Y,X,W;K([{itemId:"main1"},{itemId:"main2",columns:[{itemId:"child1"},{itemId:"child2"},{itemId:"child3"}]}]);V=C.down("#main2");Y=C.down("#child1").hide();W=C.down("#child3").hide();X=C.down("#child2");X.hide();expect(X.hidden).toBe(true);V.show();expect(X.hidden).toBe(false);expect(Y.hidden).toBe(true);expect(W.hidden).toBe(true)});describe("initial configuration",function(){it("should not hide the parent by default",function(){S(T);expect(R("col1").hidden).toBe(false)});it("should not hide the parent if not all children are hidden",function(){T[1].columns[2].hidden=T[1].columns[0].hidden=true;S(T);expect(R("col2").hidden).toBe(false)});it("should hide the parent if all children are hidden",function(){T[1].columns[2].hidden=T[1].columns[1].hidden=T[1].columns[0].hidden=true;S(T);expect(R("col2").hidden).toBe(true)})});describe("before render",function(){it("should hide the parent when hiding all children",function(){S(T);R("col21").hide();R("col22").hide();R("col23").hide();C.render(Ext.getBody());expect(R("col2").hidden).toBe(true)});it("should show the parent when showing a hidden child",function(){T[1].columns[2].hidden=T[1].columns[1].hidden=T[1].columns[0].hidden=true;S(T);R("col22").show();C.render(Ext.getBody());expect(R("col2").hidden).toBe(false)})});describe("after render",function(){it("should hide the parent when hiding all children",function(){S(T);C.render(Ext.getBody());R("col21").hide();R("col22").hide();R("col23").hide();expect(R("col2").hidden).toBe(true)});it("should show the parent when showing a hidden child",function(){T[1].columns[2].hidden=T[1].columns[1].hidden=T[1].columns[0].hidden=true;S(T);C.render(Ext.getBody());R("col22").show();expect(R("col2").hidden).toBe(false)});it("should only trigger a single layout when hiding the last leaf in a group",function(){T[0].columns.splice(1,2);S(T);C.render(Ext.getBody());var V=C.componentLayoutCounter;R("col11").hide();expect(C.componentLayoutCounter).toBe(V+1)});it("should only trigger a single refresh when hiding the last leaf in a group",function(){T[0].columns.splice(1,2);S(T);C.render(Ext.getBody());var V=C.getView(),W=V.refreshCounter;R("col11").hide();expect(V.refreshCounter).toBe(W+1)})});describe("nested stacked columns",function(){function V(X,W){while(X){expect(R("col"+X).hidden).toBe(W);--X}}describe("on hide",function(){beforeEach(function(){T=[{itemId:"col1",columns:[{itemId:"col2",columns:[{itemId:"col3",columns:[{itemId:"col4",columns:[{itemId:"col41"},{itemId:"col42"},{itemId:"col43"},{itemId:"col44"}]}]}]}]},{itemId:"col5"}]});it("should hide every group header above the target group header",function(){S(T);R("col4").hide();V(4,true);D();F();S(T);R("col3").hide();V(3,true);D();F();S(T);R("col2").hide();V(2,true)});it("should reshow every group header above the target group header when toggled",function(){S(T);R("col4").hide();V(4,true);R("col4").show();V(4,false);D();F();S(T);R("col3").hide();V(3,true);R("col3").show();V(3,false);D();F();S(T);R("col2").hide();V(2,true);R("col2").show();V(2,false)});describe("subheaders",function(){it("should hide all ancestor group headers when hiding all subheaders in lowest group header",function(){S(T);R("col41").hide();R("col42").hide();R("col43").hide();R("col44").hide();V(4,true)})})});describe("on show",function(){beforeEach(function(){T=[{itemId:"col1",hidden:true,columns:[{itemId:"col2",hidden:true,columns:[{itemId:"col3",hidden:true,columns:[{itemId:"col4",hidden:true,columns:[{itemId:"col41"},{itemId:"col42"},{itemId:"col43"},{itemId:"col44"}]}]}]}]},{itemId:"col5"}]});it("should show every group header above the target group header",function(){S(T);R("col4").show();V(4,false);D();F();S(T);R("col3").show();V(3,false);D();F();S(T);R("col2").show();V(2,false)});it("should show every group header in the chain no matter which group header is checked",function(){S(T);R("col4").show();V(4,false);D();F();S(T);R("col3").show();V(4,false);D();F();S(T);R("col2").show();V(4,false);D();F();S(T);R("col1").show();V(4,false)});it("should rehide every group header above the target group header when toggled",function(){S(T);R("col4").show();V(4,false);R("col4").hide();V(4,true);D();F();S(T);R("col3").show();V(3,false);R("col3").hide();V(3,true);D();F();S(T);R("col2").show();V(2,false);R("col2").hide();V(2,true)});describe("subheaders",function(){it("should not show any ancestor group headers when hiding all subheaders in lowest group header",function(){S(T);R("col41").hide();R("col42").hide();R("col43").hide();R("col44").hide();V(4,true)});it("should show all ancestor group headers when hiding all subheaders in lowest group header and then showing one",function(){S(T);R("col41").hide();R("col42").hide();R("col43").hide();R("col44").hide();V(4,true);R("col42").show();V(4,false)});it("should remember which subheader was last checked and restore its state when its group header is rechecked",function(){var X,W,Y;K(T);X=R("col4");W=R("col43");Y=C.headerCt;R("col41").hide();R("col42").hide();R("col44").hide();W.hide();expect(X.hidden).toBe(true);Y.getMenuItemForHeader(Y.menu,X).setChecked(true);expect(W.hidden).toBe(false);D();F();K(T);X=R("col4");W=R("col42");Y=C.headerCt;R("col41").hide();R("col43").hide();R("col44").hide();W.hide();expect(X.hidden).toBe(true);Y.getMenuItemForHeader(Y.menu,X).setChecked(true);expect(W.hidden).toBe(false)});it("should only show visible subheaders when all group headers are shown",function(){var W;S(T);W=R("col4");W.show();expect(W.visibleColumnManager.getColumns().length).toBe(4);W.hide();R("col42").hide();R("col43").hide();W.show();expect(W.visibleColumnManager.getColumns().length).toBe(2)})})})})});describe("adding/removing children",function(){beforeEach(function(){T=[{itemId:"col1",columns:[{itemId:"col11"},{itemId:"col12"},{itemId:"col13"}]},{itemId:"col2",columns:[{itemId:"col21"},{itemId:"col22"},{itemId:"col23"}]}]});describe("before render",function(){it("should hide the parent if removing the last hidden item",function(){T[0].columns[0].hidden=T[0].columns[1].hidden=true;S(T);R("col13").destroy();C.render(Ext.getBody());expect(R("col1").hidden).toBe(true)});it("should show the parent if adding a visible item and all items are hidden",function(){T[0].columns[0].hidden=T[0].columns[1].hidden=T[0].columns[2].hidden=true;S(T);R("col1").add({itemId:"col14"});C.render(Ext.getBody());expect(R("col1").hidden).toBe(false)})});describe("after render",function(){it("should hide the parent if removing the last hidden item",function(){T[0].columns[0].hidden=T[0].columns[1].hidden=true;S(T);C.render(Ext.getBody());R("col13").destroy();expect(R("col1").hidden).toBe(true)});it("should show the parent if adding a visible item and all items are hidden",function(){T[0].columns[0].hidden=T[0].columns[1].hidden=T[0].columns[2].hidden=true;S(T);C.render(Ext.getBody());R("col1").add({itemId:"col14"});expect(R("col1").hidden).toBe(false)})})})});describe("removing columns from group",function(){beforeEach(function(){T=[{itemId:"col1",columns:[{itemId:"col11"},{itemId:"col12"},{itemId:"col13"}]},{itemId:"col2",columns:[{itemId:"col21"},{itemId:"col22"},{itemId:"col23"}]}];S(T)});describe("before render",function(){it("should destroy the group header when removing all columns",function(){var V=C.headerCt,U=R("col2");expect(V.items.indexOf(U)).toBe(1);R("col21").destroy();R("col22").destroy();R("col23").destroy();expect(U.destroyed).toBe(true);expect(V.items.indexOf(U)).toBe(-1)})});describe("after render",function(){it("should destroy the group header when removing all columns",function(){S(T);C.render(Ext.getBody());var V=C.headerCt,U=R("col2");expect(V.items.indexOf(U)).toBe(1);R("col21").destroy();R("col22").destroy();R("col23").destroy();expect(U.destroyed).toBe(true);expect(V.items.indexOf(U)).toBe(-1)})})})});describe("column operations & the view",function(){describe("",function(){beforeEach(function(){K()});it("should update the view when adding a new header",function(){C.headerCt.insert(0,{dataIndex:"field4"});expect(I(0,0)).toBe("val5")});it("should update the view when moving an existing header",function(){C.headerCt.insert(0,O[1]);expect(I(0,0)).toBe("val2")});it("should update the view when removing a header",function(){C.headerCt.remove(1);expect(I(0,1)).toBe("val3")});it("should not refresh the view when doing a drag/drop move",function(){var R=false,S;C.getView().on("refresh",function(){R=true});S=O[0];C.headerCt.move(0,3);expect(I(0,3)).toBe("val1");expect(R).toBe(false)})});describe("toggling column visibility",function(){var R;beforeEach(function(){K();R=M.refreshCounter});afterEach(function(){R=null});describe("hiding",function(){it("should update the view",function(){O[0].hide();expect(M.refreshCounter).toBe(R+1)})});describe("showing",function(){it("should update the view",function(){O[0].hide();R=M.refreshCounter;O[0].show();expect(M.refreshCounter).toBe(R+1)})})})});describe("locked/normal grid visibility",function(){function R(T,U){expect(C.lockedGrid.isVisible()).toBe(T);expect(C.normalGrid.isVisible()).toBe(U)}var S;beforeEach(function(){S=Ext.failedLayouts});afterEach(function(){expect(S).toBe(Ext.failedLayouts);S=null});describe("initial",function(){it("should have both sides visible",function(){K([{locked:true},{}],{syncTaskDelay:0});R(true,true)});it("should have only the normal side visible if there are no locked columns",function(){K([{},{}],{enableLocking:true,syncTaskDelay:0});R(false,true)});it("should have only the locked side visible if there are no normal columns",function(){K([{locked:true},{locked:true}],{syncTaskDelay:0});R(true,false)})});describe("dynamic",function(){beforeEach(function(){K([{locked:true,itemId:"col0"},{locked:true,itemId:"col1"},{itemId:"col2"},{itemId:"col3"}],{syncTaskDelay:0})});describe("normal side",function(){it("should not hide when removing a column but there are other normal columns",function(){C.normalGrid.headerCt.remove("col2");R(true,true)});it("should hide when removing the last normal column",function(){C.normalGrid.headerCt.remove("col2");C.normalGrid.headerCt.remove("col3");R(true,false)});it("should not hide when hiding a column but there are other visible normal columns",function(){O[2].hide();R(true,true)});it("should hide when hiding the last normal column",function(){O[2].hide();O[3].hide();R(true,false)})});describe("locked side",function(){it("should not hide when removing a column but there are other locked columns",function(){C.lockedGrid.headerCt.remove("col0");R(true,true)});it("should hide when removing the last locked column",function(){C.lockedGrid.headerCt.remove("col0");C.lockedGrid.headerCt.remove("col1");R(false,true)});it("should not hide when hiding a column but there are other visible locked columns",function(){O[0].hide();R(true,true)});it("should hide when hiding the last locked column",function(){O[0].hide();O[1].hide();R(false,true)})})})});describe("rendering",function(){beforeEach(function(){K()});describe("first/last",function(){it("should stamp x-grid-cell-first on the first column cell",function(){var R=C.getView().firstCls;expect(H(Q(0,0),R)).toBe(true);expect(H(Q(0,1),R)).toBe(false);expect(H(Q(0,2),R)).toBe(false);expect(H(Q(0,3),R)).toBe(false)});it("should stamp x-grid-cell-last on the last column cell",function(){var R=C.getView().lastCls;expect(H(Q(0,0),R)).toBe(false);expect(H(Q(0,1),R)).toBe(false);expect(H(Q(0,2),R)).toBe(false);expect(H(Q(0,3),R)).toBe(true)});it("should update the first class when moving the first column",function(){C.headerCt.insert(0,O[1]);var R=Q(0,0),T=C.getView(),S=T.firstCls;expect(I(0,0)).toBe("val2");expect(H(R,S)).toBe(true);expect(H(Q(0,1),S)).toBe(false)});it("should update the last class when moving the last column",function(){spyOn(Ext.log,"warn");C.headerCt.add(O[1]);var R=Q(0,3),T=C.getView(),S=T.lastCls;expect(I(0,3)).toBe("val2");expect(H(R,S)).toBe(true);expect(H(Q(0,2),S)).toBe(false)})});describe("id",function(){it("should stamp the id of the column in the cell",function(){expect(H(Q(0,0),"x-grid-cell-col0")).toBe(true);expect(H(Q(0,1),"x-grid-cell-col1")).toBe(true);expect(H(Q(0,2),"x-grid-cell-col2")).toBe(true);expect(H(Q(0,3),"x-grid-cell-col3")).toBe(true)})})});describe("hiddenHeaders",function(){it("should lay out the hidden items so cells obtain correct width",function(){K([{width:100},{flex:1},{width:200}],{hiddenHeaders:true});expect(Q(0,0).getWidth()).toBe(100);expect(Q(0,1).getWidth()).toBe(J-200-100);expect(Q(0,2).getWidth()).toBe(200)});it("should lay out grouped column headers",function(){K([{width:100},{columns:[{width:200},{width:400},{width:100}]},{width:200}],{hiddenHeaders:true});expect(Q(0,0).getWidth()).toBe(100);expect(Q(0,1).getWidth()).toBe(200);expect(Q(0,2).getWidth()).toBe(400);expect(Q(0,3).getWidth()).toBe(100);expect(Q(0,4).getWidth()).toBe(200)})});describe("emptyCellText config",function(){function R(U,V,W){var S=L(V,W),T=document.createElement("div");T.innerHTML=U.emptyCellText;expect(S.textContent||S.innerText).toBe(T.textContent||T.innerText)}describe("rendering",function(){beforeEach(function(){K([{width:100},{emptyCellText:"derp",width:200}])});it("should use the default html entity for when there is no emptyCellText given",function(){R(O[0],0,0)});it("should use the value of emptyCellText when configured",function(){R(O[1],0,1)})});describe("column update",function(){describe("full row update",function(){it("should use the empty text on update",function(){K([{width:100,dataIndex:"field0",renderer:function(S,T,U){return S}}]);P.getAt(0).set("field0","");R(O[0],0,0)})});describe("cell update only",function(){describe("producesHTML: true",function(){it("should use the empty text on update",function(){K([{width:100,producesHTML:true,dataIndex:"field0"}]);P.getAt(0).set("field0","");R(O[0],0,0)});it("should use the empty text on update with a simple renderer",function(){K([{width:100,producesHTML:true,dataIndex:"field0",renderer:Ext.identityFn}]);P.getAt(0).set("field0","");R(O[0],0,0)})});describe("producesHTML: false",function(){it("should use the empty text on update",function(){K([{width:100,producesHTML:false,dataIndex:"field0"}]);P.getAt(0).set("field0","");R(O[0],0,0)});it("should use the empty text on update with a simple renderer",function(){K([{width:100,producesHTML:false,dataIndex:"field0",renderer:Ext.identityFn}]);P.getAt(0).set("field0","");R(O[0],0,0)})})})})});describe("non-column items in the header",function(){it("should show non-columns as children",function(){K([{width:100,items:{xtype:"textfield",itemId:"foo"}}]);expect(C.down("#foo").isVisible(true)).toBe(true)});it("should have the hidden item as visible after showing an initially hidden column",function(){K([{width:100,items:{xtype:"textfield"}},{width:100,hidden:true,items:{xtype:"textfield",itemId:"foo"}}]);var R=C.down("#foo");expect(R.isVisible(true)).toBe(false);R.ownerCt.show();expect(R.isVisible(true)).toBe(true)})});describe("reconfiguring",function(){it("should destroy any old columns",function(){var R={};K(4);Ext.Array.forEach(O,function(S){S.on("destroy",function(T){R[S.getItemId()]=true})});C.reconfigure(null,[]);expect(R).toEqual({col0:true,col1:true,col2:true,col3:true})});describe("with locking",function(){it("should resize the locked part to match the grid size",function(){K(4,null,null,function(S){return S===0});var R=C.lockedGrid.el.getBorderWidth("lr");expect(C.lockedGrid.getWidth()).toBe(100+R);C.reconfigure(null,[{locked:true,width:120},{locked:true,width:170},{},{}]);expect(C.lockedGrid.getWidth()).toBe(120+170+R)})})});describe("column header borders",function(){it("should show header borders by default, and turn them off dynamically",function(){K();expect(O[0].el.getBorderWidth("r")).toBe(1);expect(O[1].el.getBorderWidth("r")).toBe(1);expect(O[2].el.getBorderWidth("r")).toBe(1);C.setHeaderBorders(false);expect(O[0].el.getBorderWidth("r")).toBe(0);expect(O[1].el.getBorderWidth("r")).toBe(0);expect(O[2].el.getBorderWidth("r")).toBe(0)});it("should have no borders if configured false, and should show them dynamically",function(){K(null,{headerBorders:false});expect(O[0].el.getBorderWidth("r")).toBe(0);expect(O[1].el.getBorderWidth("r")).toBe(0);expect(O[2].el.getBorderWidth("r")).toBe(0);C.setHeaderBorders(true);expect(O[0].el.getBorderWidth("r")).toBe(1);expect(O[1].el.getBorderWidth("r")).toBe(1);expect(O[2].el.getBorderWidth("r")).toBe(1)})})})}A(false);A(true)})