describe("grid-rowedit",function(){function A(B){describe(B?"with buffered rendering":"without buffered rendering",function(){var F=13,E=27;var C,L,N,I,M,D=Ext.define(null,{extend:"Ext.data.Model",fields:["field1","field2","field3","field4","field5","field6","field7","field8","field9","field10"]});function H(U,W,V,T,S,Y){var X=O(W,V);jasmine.fireMouseEvent(X,U,S,Y,T)}function Q(T,V,U,S){var W=O(V,U);jasmine.fireKeyEvent(W,T,S)}function G(S){var T=I.getEditor().items.first().inputEl.dom;jasmine.fireKeyEvent(T,"keydown",S);jasmine.fireKeyEvent(T,"keyup",S);jasmine.fireKeyEvent(T,"keypress",S)}function P(S){return N.getAt(S)}function O(T,S){return C.getView().getCellInclusive({row:T,column:S},true)}function K(S){if(!S||!S.isModel){S=N.getAt(S||0)}I.startEdit(S)}function R(){I.getEditor().getForm().taskDelay=0}function J(S,a,X,U){var V=[],Y=[],T,W,Z;if(!S){T=true;M=[];for(W=1;W<=5;++W){Z={text:"F"+W,dataIndex:"field"+W,field:{xtype:"textfield",id:"field"+W,allowBlank:W!==1}};if(X&&W<3){Z.locked=true}Y.push(new Ext.grid.column.Column(Z));M[W-1]=Y[W-1]}}for(W=1;W<=10;++W){V.push({field1:W+"."+1,field2:W+"."+2,field3:W+"."+3,field4:W+"."+4,field5:W+"."+5,field6:W+"."+6,field7:W+"."+7,field8:W+"."+8,field9:W+"."+9,field10:W+"."+10})}N=new Ext.data.Store({model:D,data:V});I=new Ext.grid.plugin.RowEditing(a);C=new Ext.grid.Panel(Ext.apply({columns:S||Y,store:N,selType:"cellmodel",plugins:[I],width:1000,height:500,bufferedRenderer:B,viewConfig:{mouseOverOutBuffer:0},renderTo:Ext.getBody()},U));if(!T){M=C.getColumnManager().getColumns()}L=C.getView()}afterEach(function(){Ext.destroy(C,N);I=C=N=L=null;Ext.data.Model.schema.clear()});describe("resolveListenerScope",function(){it("should resolve the scope to the grid",function(){var S={someFn:function(){}};spyOn(S,"someFn");J(null,{listeners:{"beforeedit":"someFn"}});C.resolveSatelliteListenerScope=function(){return S};H("dblclick",0,0);expect(S.someFn).toHaveBeenCalled()})});describe("Editing in a locked grid",function(){beforeEach(function(){J(null,null,true)});it("should move an editor from one side to another when a column is locked during editing",function(){var S;H("dblclick",0,2);S=M[2].getEditor();expect(I.editing).toBe(true);expect(Ext.Element.getActiveElement()===S.inputEl.dom).toBe(true);expect(S.up("container")===I.editor.items.items[1]).toBe(true);C.lock(M[2]);expect(I.editing).toBe(true);expect(S.up("container")===I.editor.items.items[0]).toBe(true)})});describe("basic editing",function(){it("should scroll a record that is outside the rendered block into view and edit it",function(){J();var T=[],S;for(S=11;S<=1000;++S){T.push({field1:S+"."+1,field2:S+"."+2,field3:S+"."+3,field4:S+"."+4,field5:S+"."+5,field6:S+"."+6,field7:S+"."+7,field8:S+"."+8,field9:S+"."+9,field10:S+"."+10})}N.add(T);K(900);expect(I.editing).toBe(true);expect(I.getEditor().isVisible()).toBe(true)});it("should trigger the edit on cell interaction",function(){J();H("dblclick",0,0);expect(I.editing).toBe(true);expect(I.getEditor().isVisible()).toBe(true)});it("should focus the field for the clicked cell",function(){J();H("dblclick",0,3);expect(I.editing).toBe(true);expect(I.getEditor().isVisible()).toBe(true);var S=I.getEditor().items.getAt(3);jasmine.waitForFocus(S);jasmine.expectFocused(S)});it("should be able to be trigger by record",function(){J();var S=N.first();K(S);expect(I.editing).toBe(true);expect(I.getEditor().getRecord()===S).toBe(true)});it("should trigger the first time when clicking a cell without a defined editor",function(){Ext.destroy(C,N);Ext.data.Model.schema.clear();J([{dataIndex:"field1",editor:"textfield"},{dataIndex:"field2"}]);H("dblclick",0,1);expect(I.editing).toBe(true);expect(I.getEditor().isVisible()).toBe(true)});it("should focus the first visible column if not passed",function(){J();var T=N.first();K(T);var S=I.getEditor().items.getAt(0);jasmine.waitForFocus(S);jasmine.expectFocused(S)});it("should focus the first column that isn't a displayfield",function(){J([{dataIndex:"field1",field:"displayfield"},{dataIndex:"field2",field:"displayfield"},{dataIndex:"field3",field:"displayfield"},{dataIndex:"field4",field:"textfield"}]);H("dblclick",0,0);var S=I.getEditor().items.getAt(3);jasmine.waitForFocus(S);jasmine.expectFocused(S)});it("should focus the passed column",function(){J();var T=N.first();I.startEdit(T,M[2]);expect(I.editing).toBe(true);expect(I.getEditor().getRecord()===T).toBe(true);var S=I.getEditor().items.getAt(2);jasmine.waitForFocus(S);jasmine.expectFocused(S)});it("should scroll horizontally to display the field being edited",function(){J(null,null,null,{width:300});var U=N.first(),S,T=0;if(Ext.isIE8){T=2}L.scrollBy(300,0);waitsFor(function(){return L.getScrollX()>=200});runs(function(){S=L.getScrollX();I.startEdit(U,M[4]);expect(L.getScrollX()).toBe(S-T);I.cancelEdit();expect(L.getScrollX()).toBe(S);I.startEdit(U,M[0]);expect(L.getScrollX()).toBe(T)})});it("should not be dirty when the field has values",function(){J();K(N.first());expect(I.getEditor().isDirty()).toBe(false)})});describe("scrolling while editing",function(){beforeEach(function(){var U=[],T;J([{dataIndex:"field1",field:"displayfield"},{dataIndex:"field2",field:"displayfield"},{dataIndex:"field3",field:"displayfield"},{dataIndex:"field4",field:"textfield"}],{clicksToMoveEditor:1,autoCancel:false},null,{trailingBufferZone:10,leadingBufferZone:10});for(var S=11;S<=100;++S){U.push({field1:S+"."+1,field2:S+"."+2,field3:S+"."+3,field4:S+"."+4,field5:S+"."+5,field6:S+"."+6,field7:S+"."+7,field8:S+"."+8,field9:S+"."+9,field10:S+"."+10})}N.insert(10,U)});it("it should keep the editor active if scrolling out of view",function(){K();runs(function(){setTimeout(function(){L.scrollBy(0,700)},50)});waitsFor(function(){return I.editor._cachedNode||!C.bufferedRenderer},"scroll to the bottom",10000);runs(function(){if(C.bufferedRenderer){expect(I.editor.getLocalY()).not.toBe(0)}setTimeout(function(){L.scrollBy(0,-700)},1000)});waitsFor(function(){return L.getScrollY()===0},10000);runs(function(){expect(I.editor._editedNode).toBeFalsy();expect(I.editor.getLocalY()).toBe(0);expect(I.editing).toBe(true)})})});describe("destroying a grid before editing starts",function(){beforeEach(function(){J([{name:"F0",dataIndex:"field0",field:{xtype:"combobox",id:"field0",initComponent:function(){this.store=this.column.up("tablepanel").store.collect(this.column.dataIndex,false,true);Ext.form.field.ComboBox.prototype.initComponent.apply(this,arguments)}}}])});it("should not throw an error",function(){expect(function(){C.destroy()}).not.toThrow()})});describe("setting widths",function(){function S(V,U){U-=V._marginWidth;expect(V.getWidth()).toBe(U)}function T(){var U=I.getEditor().items;U.each(function(W,V){S(W,M[V].getWidth())})}it("should set fixed column widths",function(){J([{dataIndex:"field1",width:100,field:"textfield"},{dataIndex:"field2",width:200,field:"textfield"}]);K();T()});it("should set flex widths",function(){J([{dataIndex:"field1",flex:1,field:"textfield"},{dataIndex:"field2",flex:1,field:"textfield"}]);K();T()});it("should set width with a mix of flex/configured",function(){J([{dataIndex:"field1",flex:1,field:"textfield"},{dataIndex:"field2",width:300,field:"textfield"},{dataIndex:"field3",width:400,field:"textfield"}]);K();T()});describe("reconfigure",function(){it("should set the widths if the editor has not been shown",function(){J();C.reconfigure(null,[{dataIndex:"field1",width:200,field:"textfield"},{dataIndex:"field2",width:300,field:"textfield"}]);M=C.getColumnManager().getColumns();K();T()});it("should set the widths after the editor has already been shown",function(){J();I.startEdit(N.first());I.cancelEdit();C.reconfigure(null,[{dataIndex:"field1",width:200,field:"textfield"},{dataIndex:"field2",width:300,field:"textfield"}]);M=C.getColumnManager().getColumns();K();T()})})});describe("events",function(){beforeEach(function(){J()});describe("beforeedit",function(){it("should fire the event",function(){var S=false;I.on("beforeedit",function(){S=true});H("dblclick",0,0);expect(S).toBe(true)});it("should fire the event with the plugin & an event context",function(){var T,S;I.on("beforeedit",function(V,U){T=V;S=U});H("dblclick",0,0);expect(T===I).toBe(true);expect(S.colIdx).toBe(0);expect(S.column===M[0]).toBe(true);expect(S.grid===C).toBe(true);expect(S.record===P(0)).toBe(true);expect(S.row===L.getRow(L.all.first())).toBe(true);expect(S.rowIdx).toBe(0);expect(S.store===N).toBe(true)});it("should prevent editing if false is returned",function(){I.on("beforeedit",function(T,S){return false});H("dblclick",0,0);expect(I.editing).toBeFalsy()});it("should prevent editing if context.cancel is set",function(){I.on("beforeedit",function(T,S){S.cancel=true});H("dblclick",0,0);expect(I.editing).toBeFalsy()})});describe("canceledit",function(){it("should fire the event when editing is cancelled",function(){var S=false;I.on("canceledit",function(U,T){S=true});H("dblclick",0,0);I.cancelEdit();expect(S).toBe(true);expect(I.editing).toBe(false)});it("should pass the plugin and the context",function(){var T,S;I.on("canceledit",function(V,U){T=V;S=U});H("dblclick",0,0);I.cancelEdit();expect(T===I).toBe(true);expect(S.colIdx).toBe(0);expect(S.column===M[0]).toBe(true);expect(S.grid===C).toBe(true);expect(S.record===P(0)).toBe(true);expect(S.row===L.getRow(L.all.first())).toBe(true);expect(S.rowIdx).toBe(0);expect(S.store===N).toBe(true)})});describe("validateedit",function(){it("should fire the validateedit event before edit",function(){var S=false,T=false;I.on("validateedit",function(){S=!T});I.on("edit",function(V,U){S=!T});H("dblclick",0,0);I.completeEdit();expect(S).toBe(true)});it("should pass the plugin and the context",function(){var T,S;I.on("validateedit",function(V,U){T=V;S=U});H("dblclick",0,0);I.completeEdit();expect(T===I).toBe(true);expect(S.colIdx).toBe(0);expect(S.column===M[0]).toBe(true);expect(S.grid===C).toBe(true);expect(S.record===P(0)).toBe(true);expect(S.row===L.getRow(L.all.first())).toBe(true);expect(S.rowIdx).toBe(0);expect(S.store===N).toBe(true)});it("should veto the completeEdit if we return false",function(){var S=false;I.on("validateedit",function(){return false});I.on("edit",function(U,T){S=true});H("dblclick",0,0);I.completeEdit();expect(I.editing).toBe(true);expect(S).toBe(false)});it("should veto the completeEdit if we set context.cancel",function(){var S=false;I.on("validateedit",function(U,T){T.cancel=true});I.on("edit",function(U,T){S=true});H("dblclick",0,0);I.completeEdit();expect(I.editing).toBe(true);expect(S).toBe(false)})});describe("edit",function(){it("should fire the edit event",function(){var S=false;I.on("edit",function(U,T){S=true});H("dblclick",0,0);I.completeEdit();expect(I.editing).toBe(false);expect(S).toBe(true)});it("should pass the plugin and the context",function(){var T,S;I.on("edit",function(V,U){T=V;S=U});H("dblclick",0,0);I.completeEdit();expect(T===I).toBe(true);expect(S.colIdx).toBe(0);expect(S.column===M[0]).toBe(true);expect(S.grid===C).toBe(true);expect(S.record===P(0)).toBe(true);expect(S.row===L.getRow(L.all.first())).toBe(true);expect(S.rowIdx).toBe(0);expect(S.store===N).toBe(true)});it("should update the value in the model",function(){H("dblclick",0,0);I.getEditor().items.first().setValue("foo");I.completeEdit();expect(P(0).get("field1")).toBe("foo")})})});describe("dynamic editors",function(){beforeEach(function(){spyOn(Ext.log,"warn")});it("should allow the editor to change dynamically",function(){var S=new Ext.form.field.Trigger();J();M[0].setEditor(S);H("dblclick",0,0);expect(I.getEditor().items.first()===S).toBe(true)});it("should allow the editor to change in the beforeedit event",function(){var S=new Ext.form.field.Trigger();J();I.on("beforeedit",function(){M[0].setEditor(S)});H("dblclick",0,0);expect(I.getEditor().items.first()===S).toBe(true)});it("should correct the width when setting the editor during beforeedit after rendering",function(){var S=new Ext.form.field.Trigger();J([{width:500,field:"textfield"}]);H("dblclick",0,0);I.cancelEdit();I.on("beforeedit",function(){M[0].setEditor(S)});H("dblclick",0,0);expect(I.getEditor().items.first().getWidth()).toBe(500)});it("should allow us to set an editor if one wasn't there before",function(){var S=new Ext.form.field.Text();J([{dataIndex:"field1"},{dataIndex:"field2",field:"textfield"}]);M=C.getColumnManager().getColumns();M[0].setEditor(S);H("dblclick",0,0);expect(I.getEditor().items.first()===S).toBe(true)});it("should allow us to clear out an editor",function(){J();M[0].setEditor(null);H("dblclick",0,0);expect(I.getEditor().items.first().getXType()).toBe("displayfield")});it("should destroy the old field",function(){var S=new Ext.form.field.Text();J([{dataIndex:"field1",field:S}]);M=C.getColumnManager().getColumns();M[0].setEditor(new Ext.form.field.Text());expect(S.destroyed).toBe(true)})});describe("hidden columns",function(){beforeEach(function(){J([{dataIndex:"field1",hidden:true,field:"textfield"},{dataIndex:"field2",field:"textfield"},{dataIndex:"field3",field:"textfield"},{dataIndex:"field4",hidden:true,field:"textfield"},{dataIndex:"field5",field:"textfield"},{dataIndex:"field6",field:"textfield"},{dataIndex:"field7",field:"textfield"}]);M=C.getColumnManager().getColumns()});it("should not show editors for hidden columns",function(){H("dblclick",0,1);expect(I.getEditor().items.getAt(0).isVisible()).toBe(false);expect(I.getEditor().items.getAt(3).isVisible()).toBe(false)});it("should focus the first visible field",function(){K();var S=I.getEditor().items.getAt(1);jasmine.waitForFocus(S);jasmine.expectFocused(S)});it("should show the editor when the column is shown",function(){K();M[0].show();expect(I.getEditor().items.getAt(0).isVisible()).toBe(true)});it("should hide the editor when the column is hidden",function(){K();M[6].show();expect(I.getEditor().items.getAt(6).isVisible()).toBe(true)})});describe("reconfigure",function(){var S;describe("original editor not rendered",function(){beforeEach(function(){J();S=[];Ext.Array.forEach(C.getColumnManager().getColumns(),function(T){S.push(T.getEditor())});C.reconfigure(null,[{dataIndex:"field1",field:{id:"newEd"}},{dataIndex:"field2"}]);M=C.getColumnManager().getColumns()});it("should destroy old editors",function(){Ext.Array.forEach(S,function(T){expect(T.destroyed).toBe(true)})});it("should update columns with no editors",function(){H("dblclick",0,1);expect(I.getEditor().items.getAt(1).getXType()).toBe("displayfield")});it("should use new editors",function(){H("dblclick",0,0);expect(I.getEditor().items.first().getItemId()).toBe("newEd")})});describe("original rendered",function(){it("should cancel editing on reconfigure if visible",function(){J();H("dblclick",0,0);C.reconfigure(null,[{dataIndex:"field1"}]);expect(I.editing).toBe(false);expect(I.getEditor().isVisible()).toBe(false)})})});describe("values/validity",function(){it("should set the values on each field",function(){J();H("dblclick",0,0);var S=I.getEditor().items;expect(S.getAt(0).getValue()).toBe("1.1");expect(S.getAt(1).getValue()).toBe("1.2");expect(S.getAt(2).getValue()).toBe("1.3");expect(S.getAt(3).getValue()).toBe("1.4");expect(S.getAt(4).getValue()).toBe("1.5")});it("should set the correct value if the field name config is specified",function(){J([{dataIndex:"field1",field:{xtype:"textfield",name:"field2"}}]);H("dblclick",0,0);expect(I.getEditor().items.first().getValue()).toBe("1.2")});it("should not retain the value from previous edits if the model value is not defined",function(){J();K(0);var S=I.getEditor().items.getAt(0);expect(S.getValue()).toBe("1.1");I.completeEdit();N.insert(0,{});K(0);expect(S.getValue()).toBe("")});describe("buttons",function(){beforeEach(function(){J()});it("should disable the buttons when starting editing in an invalid state",function(){N.first().set("field1","");H("dblclick",0,0);expect(I.getEditor().down("#update").disabled).toBe(true)});it("should disable the buttons when a value changes the form to a invalid state",function(){H("dblclick",0,0);R();I.getEditor().items.first().setValue("");expect(I.getEditor().down("#update").disabled).toBe(true)});it("should enable the buttons when a value changes the form to a valid state",function(){N.first().set("field1","");H("dblclick",0,0);R();I.getEditor().items.first().setValue("Foo");expect(I.getEditor().down("#update").disabled).toBe(false)});it("should update the state correctly after loading multiple records",function(){N.removeAll();N.insert(0,{});K(0);R();I.getEditor().items.first().setValue("Foo");I.completeEdit();N.insert(0,{});K(0);I.getEditor().items.first().setValue("Foo");expect(I.getEditor().down("#update").disabled).toBe(false)})});describe("tooltip",function(){beforeEach(function(){J()});it("should show the tip when starting editing in an invalid state",function(){N.first().set("field1","");H("dblclick",0,0);expect(I.getEditor().tooltip.isVisible()).toBe(true)});it("should show the tip when a value changes the form to a invalid state",function(){H("dblclick",0,0);R();var S=I.getEditor();S.items.first().setValue("");expect(S.tooltip.isVisible()).toBe(true)});it("should hide the tip when a value changes the form to a valid state",function(){N.first().set("field1","");H("dblclick",0,0);R();var S=I.getEditor();S.items.first().setValue("Foo");expect(S.tooltip.isVisible()).toBe(false)});describe("tip content",function(){function S(Z){var X=I.getEditor(),Y=X.tooltip.getEl().query("."+X.errorCls),T=Y.length,W,V,U;expect(T).toBe(Z.length);for(W=0;W<T;++W){V=Y[W].innerHTML;U=Z[W];expect(V).toBe(U)}}it("should update the tip content with errors for each field",function(){N.first().set("field2","");var U=I.getEditor(),T=U.items.getAt(0),W=U.items.getAt(1),V=U.items.getAt(2);T.minLength=100;W.allowBlank=false;V.maxLength=1;H("dblclick",0,0);R();S(["F1: "+T.getErrors()[0],"F2: "+W.getErrors()[0],"F3: "+V.getErrors()[0]])});it("should add a new field if it becomes invalid",function(){var U=I.getEditor(),T=U.items.getAt(0),W=U.items.getAt(1),V=U.items.getAt(2);T.minLength=100;W.allowBlank=false;V.maxLength=1;H("dblclick",0,0);R();S(["F1: "+T.getErrors()[0],"F3: "+V.getErrors()[0]]);W.setValue("");S(["F1: "+T.getErrors()[0],"F2: "+W.getErrors()[0],"F3: "+V.getErrors()[0]])});it("should remove a existing field if it becomes valid",function(){N.first().set("field2","");var U=I.getEditor(),T=U.items.getAt(0),W=U.items.getAt(1),V=U.items.getAt(2);T.minLength=100;W.allowBlank=false;V.maxLength=1;H("dblclick",0,0);R();S(["F1: "+T.getErrors()[0],"F2: "+W.getErrors()[0],"F3: "+V.getErrors()[0]]);W.setValue("Foo");S(["F1: "+T.getErrors()[0],"F3: "+V.getErrors()[0]])});it("should only render the first error from the field",function(){var U=I.getEditor(),T=U.items.getAt(0);T.getErrors=function(){return["Foo","Bar"]};H("dblclick",0,0);R();S(["F1: Foo"])});it("should not prefix the error with the column name if the text is empty",function(){var U=I.getEditor(),T=U.items.getAt(0),V=U.items.getAt(1);T.getErrors=function(){return["Foo"]};V.getErrors=function(){return["Bar"]};M[0].text="";H("dblclick",0,0);R();S(["Foo","F2: Bar"])})})})});describe("field types",function(){it("should set values with a fieldcontainer",function(){J([{dataIndex:"field1",field:{xtype:"fieldcontainer",items:{name:"field1",xtype:"textfield"}}}]);H("dblclick",0,0);expect(I.getEditor().items.first().items.first().getValue()).toBe("1.1")})});describe("key events",function(){it("should cancel editing on ESC",function(){J();H("dblclick",0,0);G(E);expect(I.editing).toBe(false)});it("should complete on edit if the form is valid",function(){J();H("dblclick",0,0);I.getEditor().items.first().setValue("Foo");G(F);expect(I.editing).toBe(false);expect(N.first().get("field1")).toBe("Foo")});it("should not finish editing if enter is pressed and the form is invalid",function(){J();H("dblclick",0,0);I.getEditor().items.first().setValue("");G(F);expect(I.editing).toBe(true)});it("should be able to cancel after pressing enter and the form is invalid",function(){J();H("dblclick",0,0);I.getEditor().items.first().setValue("");G(F);G(E);expect(I.editing).toBe(false);expect(N.first().get("field1")).toBe("1.1")})});describe("adding/removing/moving columns",function(){function T(d,e,a){var b=d.el.getBox(),W=b.x+b.width/2,V=b.y+b.height/2,Z=e.el.getBox(),f=Z.x,c=Z.y+Z.height/2,Y=a?Z.width-6:5,U=f+Y,X=a?Ext.dd.DragDropManager.clickPixelThresh+1:-Ext.dd.DragDropManager.clickPixelThresh-1;jasmine.fireMouseEvent(d.el.dom,"mouseover",W,V);jasmine.fireMouseEvent(d.titleEl.dom,"mousedown",W,V);jasmine.fireMouseEvent(d.el.dom,"mousemove",W+X,V);jasmine.fireMouseEvent(e.el.dom,"mousemove",U,c);jasmine.fireMouseEvent(e.el.dom,"mouseup",U,c)}describe("modification while visible with the grid pending layouts",function(){it("should update the layout appropriately",function(){J();K();var U=I.getEditor(),V=U.componentLayoutCounter;T(M[3],M[0],false);expect(U.componentLayoutCounter).toBe(V+1)})});function S(U){describe(U?"before first show":"after first show",function(){describe("basic operations",function(){beforeEach(function(){J()});it("should add a new field",function(){if(!U){K()}C.headerCt.add({dataIndex:"field6",field:{xtype:"textfield",id:"field6"}});if(U){K()}expect(I.getEditor().getComponent("field6").getValue()).toBe("1.6")});it("should remove an existing field & destroy it",function(){if(!U){K()}C.headerCt.remove(1);if(U){K()}expect(I.getEditor().getComponent("field2")).toBeFalsy();expect(Ext.getCmp("field2")).toBeFalsy()});it("should move the field in the editor",function(){if(!U){K()}C.headerCt.move(0,5);if(U){K()}expect(I.getEditor().items.last().getItemId()).toBe("field1")});it("should remove all fields",function(){if(!U){K()}C.headerCt.removeAll();if(U){K()}expect(I.getEditor().items.getCount()).toBe(0)})});describe("moving with hidden columns",function(){function V(Z){var W=Z.length,X=[],Y;for(Y=1;Y<=W;++Y){X.push({name:"F"+Y,dataIndex:"field"+Y,hidden:Z[Y],field:{xtype:"textfield",id:"field"+Y}})}return X}it("should insert after the first hidden column",function(){J(V([true,false,false,false,false]));if(!U){K()}C.headerCt.move(4,1);if(U){K()}expect(I.getEditor().items.getAt(1).getItemId()).toBe("field5")});it("should insert before the last hidden column",function(){J(V([false,false,false,false,true]));if(!U){K()}C.headerCt.move(0,3);if(U){K()}expect(I.getEditor().items.getAt(3).getItemId()).toBe("field1")});it("should position properly with hidden columns in the middle",function(){J(V([false,false,true,false,true,true,false]));if(!U){K()}C.headerCt.move(0,3);C.headerCt.insert(1,M[6]);if(U){K()}expect(I.getEditor().items.getAt(1).getItemId()).toBe("field7");expect(I.getEditor().items.getAt(4).getItemId()).toBe("field1")})});describe("moving grouped columns",function(){beforeEach(function(){J([{text:"Locked",dataIndex:"field10",locked:true},{columns:[{dataIndex:"field1",field:{id:"field1"}},{dataIndex:"field2",field:{id:"field2"}},{dataIndex:"field3",field:{id:"field3"}}]},{columns:[{dataIndex:"field4",field:{id:"field4"}},{dataIndex:"field5",field:{id:"field5"}},{dataIndex:"field6",field:{id:"field6"}}]},{columns:[{dataIndex:"field7",field:{id:"field7"}},{dataIndex:"field8",field:{id:"field8"}},{dataIndex:"field9",field:{id:"field9"}}]}])});function V(X){var Y=I.getEditor().items.items[1].items,W=X.length,Z;for(Z=0;Z<W;++Z){expect(Y.getAt(Z).getItemId()).toBe(X[Z])}}it("should move all leaf columns to the left",function(){if(!U){K()}C.normalGrid.headerCt.move(1,0);if(U){K()}V(["field4","field5","field6","field1","field2","field3","field7","field8","field9"])});it("should move all leaf columns to the right",function(){if(!U){K()}C.normalGrid.headerCt.move(1,2);if(U){K()}V(["field1","field2","field3","field7","field8","field9","field4","field5","field6"])})})})}S(true);S(false)})})}A(false);A(true)})