describe("Ext.grid.plugin.RowEditing",function(){var H,D,A,G,B,I=true,C=Ext.data.ProxyStore.prototype.load,F;function E(M,K,L){var N=K&&K.plugins,J;H=new Ext.data.Store(Ext.apply({fields:["name","email","phone"],data:[{"name":"Lisa","email":"lisa@simpsons.com","phone":"555-111-1224"},{"name":"Bart","email":"bart@simpsons.com","phone":"555-222-1234"},{"name":"Homer","email":"homer@simpsons.com","phone":"555-222-1244"},{"name":"Marge","email":"marge@simpsons.com","phone":"555-222-1254"}],autoDestroy:true},L));D=new Ext.grid.plugin.RowEditing(M);if(N){J=[].concat(D,N);delete K.plugins}A=new Ext.grid.Panel(Ext.apply({columns:[{header:"Name",dataIndex:"name",editor:"textfield"},{header:"Email",dataIndex:"email",editor:{xtype:"textfield",allowBlank:false}},{header:"Phone",dataIndex:"phone"}],store:H,plugins:J||[D],width:400,height:400,renderTo:document.body},K));G=A.view}beforeEach(function(){F=Ext.data.ProxyStore.prototype.load=function(){C.apply(this,arguments);if(I){this.flushLoad.apply(this,arguments)}return this}});afterEach(function(){Ext.data.ProxyStore.prototype.load=C;H=D=A=G=B=Ext.destroy(A)});describe("Widget column",function(){it("should work",function(){E({clicksToEdit:2},{columns:[{header:"Name",dataIndex:"name",editor:"textfield"},{header:"Email",dataIndex:"email",editor:{xtype:"textfield",allowBlank:false}},{header:"Phone",dataIndex:"phone"},{xtype:"widgetcolumn",widget:{xtype:"button",text:"Delete",handler:L}}]});var M=H.getCount(),K=new Ext.grid.CellContext(G).setPosition(0,3),J=K.getCell(true);function L(N){var O=N.getWidgetRecord();H.remove(O)}G.getNavigationModel().setPosition(K);jasmine.fireMouseEvent(J.firstChild.firstChild,"dblclick");expect(H.getCount()).toBeLessThan(M);expect(D.editing).not.toBe(true)})});describe("should work",function(){var J;afterEach(function(){J=null});it("should display the row editor for the grid in editing mode",function(){E();J=A.view.getNode(0);jasmine.fireMouseEvent(Ext.fly(J).down(".x-grid-cell-inner",true),"dblclick");expect(D.editor).toBeDefined();expect(D.editing).toBe(true)})});describe("renderers",function(){it("should be called with the correct scope for the defaultRenderer (column)",function(){var J,K;E(null,{columns:[{text:"Foo",width:50,defaultRenderer:function(){K=this;return"some text"}},{header:"Name",dataIndex:"name",editor:"textfield"},{header:"Email",dataIndex:"email",editor:{xtype:"textfield",allowBlank:false}},{header:"Phone",dataIndex:"phone"}]});J=A.store.getAt(0);B=A.columns[0];D.startEdit(J,B);expect(K===A.columns[0]).toBe(true)})});describe("starting the edit",function(){var M,L,J,K;describe("should work",function(){beforeEach(function(){M=new Ext.form.field.ComboBox({queryMode:"local",valueField:"name",displayField:"name",store:{fields:["name"],data:[{name:"Lisa"},{name:"Bart"},{name:"Homer"},{name:"Marge"}]}});L=new Ext.form.field.Text();E(null,{columns:[{header:"Name",dataIndex:"name",editor:M},{header:"Email",dataIndex:"email",editor:{xtype:"textfield",allowBlank:false}},{header:"Phone",dataIndex:"phone",editor:L}]});J=A.store.getAt(0);B=A.columns[0];D.startEdit(J,B)});afterEach(function(){J=K=null});describe("initial values",function(){it("should give each editor a dataIndex property",function(){K=D.editor.items;expect(K.getAt(0).dataIndex).toBe("name");expect(K.getAt(1).dataIndex).toBe("email");expect(K.getAt(2).dataIndex).toBe("phone")});it("should start the editor with values taken from the model",function(){K=D.editor.items;expect(K.getAt(0).getValue()).toBe("Lisa");expect(K.getAt(1).getValue()).toBe("lisa@simpsons.com");expect(K.getAt(2).getValue()).toBe("555-111-1224")})});describe("using an existing component as an editor",function(){it("should be able to lookup its value from the corresponding model field",function(){K=D.editor.items;expect(K.getAt(0).getValue()).toBe("Lisa");expect(K.getAt(2).getValue()).toBe("555-111-1224")})})});describe("calling startEdit with different columnHeader values",function(){it("should allow columnHeader to be a Number",function(){E();J=A.store.getAt(0);expect(D.startEdit(J,0)).toBe(true)});it("should allow columnHeader to be a Column instance",function(){E();J=A.store.getAt(0);B=A.columns[0];expect(D.startEdit(J,B)).toBe(true)});it("should default to the first visible column if unspecified",function(){E();J=A.store.getAt(0);expect(D.startEdit(J)).toBe(true)})});describe("adding new rows to the view",function(){var R,Q,O,P;function N(S){var T;D.cancelEdit();H.insert(S,{name:"Homer",email:"homer@simpsons.com",phone:"555-222-1244"});O=H.getAt(S?S-1:0);D.startEdit(O,0);P=D.editor;T=Ext.fly(G.getNode(O));return new Ext.util.Point(T.getX(),T.getY())}afterEach(function(){Q=R=O=P=null});it("should be contained by and visible in the view",function(){E(null,{height:100});Q=H.getCount();R=G.getEl();expect(N(0).isContainedBy(R)).toBe(true);expect(N(0).isContainedBy(R)).toBe(true);expect(N(0).isContainedBy(R)).toBe(true);expect(N(0).isContainedBy(R)).toBe(true);expect(N(Q).isContainedBy(R)).toBe(true);expect(N(Q).isContainedBy(R)).toBe(true);expect(N(Q).isContainedBy(R)).toBe(true);expect(N(Q).isContainedBy(R)).toBe(true)});describe("scrolling into view",function(){function S(T){describe("buffered renderer = "+T,function(){beforeEach(function(){E(null,{buffered:T,height:100});Q=H.getCount();R=G.getEl()});it("should scroll when adding to the beginning",function(){N(0);expect(P.isVisible()).toBe(true);expect(P.context.record).toBe(O)});it("should scroll when adding to the end",function(){N(H.getCount());expect(P.isVisible()).toBe(true);expect(P.context.record).toBe(O)})})}S(false);S(true)})})});describe("completing the edit",function(){var L,J,K;beforeEach(function(){L=new Ext.form.field.ComboBox({queryMode:"local",valueField:"name",displayField:"name",store:{fields:["name"],data:[{name:"Lisa"},{name:"Bart"},{name:"Homer"},{name:"Marge"}]}});E(null,{columns:[{header:"Name",dataIndex:"name",editor:L},{header:"Email",dataIndex:"email",editor:{xtype:"textfield",allowBlank:false}}]});J=A.store.getAt(0);B=A.columns[0];D.startEdit(J,B)});afterEach(function(){L=J=K=null});describe("using an existing component as an editor",function(){it("should update the underlying cell and the record",function(){B.getEditor().setValue("utley");D.editor.completeEdit();expect(Ext.fly(A.view.getNode(J)).down(".x-grid-cell-inner",true).innerHTML).toBe("utley");expect(H.getAt(0).get("name")).toBe("utley")})})});describe("canceledit",function(){var J={},K;beforeEach(function(){E({listeners:{canceledit:function(M,L){J=L}}});K=A.store.getAt(0);B=A.columns[0];D.startEdit(K,B)});afterEach(function(){J=K=null});it("should be able to get the original value when canceling the edit",function(){B.getEditor().setValue("baz");D.cancelEdit();expect(J.originalValues.name).toBe("Lisa")});it("should be able to get the edited value when canceling the edit",function(){B.getEditor().setValue("foo");D.cancelEdit();expect(J.newValues.name).toBe("foo")});it("should have different values for edited value and original value when canceling",function(){B.getEditor().setValue("foo");D.cancelEdit();expect(J.newValues.name).not.toBe(J.originalValues.name)});it("should be able to capture falsey values when canceled",function(){B.getEditor().setValue("");D.cancelEdit();expect(J.newValues.name).toBe("")})});describe("locked grid",function(){var J={columns:[{header:"Name",dataIndex:"name",width:100,locked:true,editor:true},{header:"Email",dataIndex:"email",width:100,editor:true},{header:"Phone",dataIndex:"phone",width:100,editor:true}],plugins:{ptype:"rowediting"}},K;beforeEach(function(){E(null,J)});afterEach(function(){K=null});it("should display the row editor for the locked grid in editing mode",function(){K=A.lockedGrid.view.getNode(0);jasmine.fireMouseEvent(Ext.fly(K).down(".x-grid-cell-inner",true),"dblclick");D=A.findPlugin("rowediting");expect(D.editor!==null).toBe(true);expect(D.editing).toBe(true)});it("should display the row editor for the normal grid in editing mode",function(){K=A.normalGrid.view.getNode(0);jasmine.fireMouseEvent(Ext.fly(K).down(".x-grid-cell-inner",true),"dblclick");D=A.findPlugin("rowediting");expect(D.editor!==null).toBe(true);expect(D.editing).toBe(true)});describe("with grouping feature",function(){describe("when the activeRecord of the activeEditor has been filtered",function(){var M,N,L;beforeEach(function(){A.destroy();E(null,Ext.applyIf({features:{ftype:"groupingsummary",groupHeaderTpl:"{name}"},plugins:["bufferedrenderer"],lockedGridConfig:null,normalGridConfig:null},J),{groupField:"name"});M=A.normalGrid.view;N=A.lockedGrid.view});afterEach(function(){M=N=L=null});describe("activating the editor from the normal view",function(){beforeEach(function(){K=M.getNode(0);jasmine.fireMouseEvent(Ext.fly(K).down(".x-grid-cell-inner",true),"dblclick");H.filter("email",/home/);L=M.getRecord(K)});it("should still be able to lookup the record in the datastore when filtered",function(){expect(L).toBeDefined();expect(L.get("email")).toBe("bart@simpsons.com")});it("should close the editor",function(){expect(D.editing).toBe(false)})});describe("activating the editor from the locked view",function(){beforeEach(function(){K=N.getNode(0);jasmine.fireMouseEvent(Ext.fly(K).down(".x-grid-cell-inner",true),"dblclick");H.filter("email",/home/);L=N.getRecord(K)});it("should still be able to lookup the record in the datastore when filtered",function(){expect(L).toBeDefined();expect(L.get("email")).toBe("bart@simpsons.com")});it("should close the editor",function(){expect(D.editing).toBe(false)})})})})});describe("clicksToEdit",function(){var K,J;afterEach(function(){K=J=null});describe("2 clicks",function(){beforeEach(function(){E()});it("should default to 2",function(){expect(D.clicksToEdit).toBe(2)});it("should begin editing when double-clicked",function(){J=A.store.getAt(0);K=A.view.getNodeByRecord(J);jasmine.fireMouseEvent(Ext.fly(K).down(".x-grid-cell"),"dblclick");expect(D.editor).not.toBeFalsy()});it("should not begin editing when single-clicked",function(){J=A.store.getAt(0);K=A.view.getNodeByRecord(J);jasmine.fireMouseEvent(Ext.fly(K).down(".x-grid-cell"),"click");expect(D.editor).toBeFalsy()})});describe("1 click",function(){beforeEach(function(){E({clicksToEdit:1})});it("should honor a different number than the default",function(){expect(D.clicksToEdit).toBe(1)});it("should begin editing when single-clicked",function(){J=A.store.getAt(0);K=A.view.getNodeByRecord(J);jasmine.fireMouseEvent(Ext.fly(K).down(".x-grid-cell"),"click");expect(D.editor).not.toBeFalsy()});it("should not begin editing when double-clicked",function(){J=A.store.getAt(0);K=A.view.getNodeByRecord(J);jasmine.fireMouseEvent(Ext.fly(K).down(".x-grid-cell"),"dblclick");expect(D.editor).not.toBeFalsy()})})});describe("the RowEditor",function(){var J;afterEach(function(){J=null});describe("as textfield",function(){beforeEach(function(){E();B=A.columns[0];D.startEdit(H.getAt(0),B);J=B.field});it("should start the edit when ENTER is pressed",function(){var K;D.completeEdit();expect(D.editing).toBe(false);K=G.body.query("td",true)[0];jasmine.fireKeyEvent(K,"keydown",13);waitsFor(function(){return D.editing});runs(function(){expect(D.editing).toBe(true)})});describe("when currently editing",function(){it("should complete the edit when ENTER is pressed",function(){var L="Utley is Top Dog",K=H.getAt(0);expect(K.get("name")).toBe("Lisa");J.setValue(L);jasmine.fireKeyEvent(J.inputEl,"keydown",13);waitsFor(function(){return K.get("name")===L});runs(function(){expect(K.get("name")).toBe(L)})});it("should cancel the edit when ESCAPE is pressed",function(){spyOn(D,"cancelEdit");jasmine.fireKeyEvent(J.inputEl,"keydown",27);expect(D.cancelEdit).toHaveBeenCalled()})})});describe("as textarea",function(){beforeEach(function(){E();B=A.columns[1];D.startEdit(H.getAt(0),B);J=B.field});it("should start the edit when ENTER is pressed",function(){var K;D.completeEdit();expect(D.editing).toBe(false);K=G.body.query("td",true)[1];jasmine.fireKeyEvent(K,"keydown",13);expect(D.editing).toBe(true)});describe("when currently editing",function(){it("should complete the edit when ENTER is pressed",function(){spyOn(D,"completeEdit");jasmine.fireKeyEvent(J.inputEl,"keydown",13);expect(D.completeEdit).toHaveBeenCalled()});it("should not cancel the edit when ENTER is pressed",function(){spyOn(D,"cancelEdit");jasmine.fireKeyEvent(J.inputEl,"keydown",13);expect(D.cancelEdit).not.toHaveBeenCalled()});it("should cancel the edit when ESCAPE is pressed",function(){spyOn(D,"cancelEdit");jasmine.fireKeyEvent(J.inputEl,"keydown",27);expect(D.cancelEdit).toHaveBeenCalled()})})})})})