describe("Ext.layout.component.Dock",function(){var A;afterEach(function(){Ext.destroy(A);A=null});function B(D,C){var E=Ext.failedLayouts;A=Ext.widget(Ext.apply({xtype:"panel",renderTo:Ext.getBody()},D));if(E!=Ext.failedLayouts){expect("failedLayout=true").toBe("false")}}describe("shrink wrapping around docked items",function(){var F="top",E="left",D;var C=function(K,G,J,H){var I={};if(G){I.width=G+"px"}if(J){I.height=J+"px"}return new Ext.Component({dock:K,shrinkWrap:true,style:I,html:H})};describe("width",function(){var G=function(H){return B(Ext.apply({shrinkWrap:true,border:false,bodyBorder:false,shrinkWrapDock:2},H))};it("should stretch the body width if the docked item is larger",function(){G({dockedItems:[C(F,100,D)],html:"a"});expect(A.getWidth()).toBe(100);expect(A.body.getWidth()).toBe(100)});it("should stretch the docked width if the body is larger",function(){G({dockedItems:[C(F,D,D,"a")],html:'<div style="width: 100px;"></div>'});expect(A.getWidth()).toBe(100);expect(A.getDockedItems()[0].getWidth()).toBe(100)});it("should stretch other docked items to the size of the largest docked item if it is bigger than the body",function(){G({dockedItems:[C(F,100,D),C(F,D,D,"b")],html:"a"});expect(A.getDockedItems()[1].getWidth()).toBe(100)});it("should stretch all docked items to the size of the body if the body is largest",function(){G({dockedItems:[C(F,D,D,"a"),C(F,D,D,"b")],html:'<div style="width: 100px;"></div>'});expect(A.getDockedItems()[0].getWidth()).toBe(100);expect(A.getDockedItems()[1].getWidth()).toBe(100)});it("should stretch all items if the body and a single docked item are the largest & same size",function(){G({dockedItems:[C(F,50,D,D),C(F,100,D,D)],html:'<div style="width: 100px;"></div>'});expect(A.getDockedItems()[0].getWidth()).toBe(100);expect(A.getDockedItems()[1].getWidth()).toBe(100)})});describe("height",function(){var G=function(H){return B(Ext.apply({shrinkWrap:true,border:false,bodyBorder:false,shrinkWrapDock:1},H))};it("should stretch the body height if the docked item is larger",function(){G({dockedItems:[C(E,D,100)],html:"a"});expect(A.getHeight()).toBe(100);expect(A.body.getHeight()).toBe(100)});it("should stretch the docked height if the body is larger",function(){G({dockedItems:[C(E,D,D,"a")],html:'<div style="height: 100px;"></div>'});expect(A.getHeight()).toBe(100);expect(A.getDockedItems()[0].getHeight()).toBe(100)});it("should stretch other docked items to the size of the largest docked item if it is bigger than the body",function(){G({dockedItems:[C(E,D,100),C(E,D,D,"b")],html:"a"});expect(A.getDockedItems()[1].getHeight()).toBe(100)});it("should stretch all docked items to the size of the body if the body is largest",function(){G({dockedItems:[C(E,D,D,"a"),C(E,D,D,"b")],html:'<div style="height: 100px;"></div>'});expect(A.getDockedItems()[0].getHeight()).toBe(100);expect(A.getDockedItems()[1].getHeight()).toBe(100)});it("should stretch all items if the body and a single docked item are the largest & same size",function(){G({dockedItems:[C(E,D,50,D),C(E,D,100,D)],html:'<div style="height: 100px;"></div>'});expect(A.getDockedItems()[0].getHeight()).toBe(100);expect(A.getDockedItems()[1].getHeight()).toBe(100)})});describe("combination",function(){var G=function(H){return B(Ext.apply({shrinkWrap:true,border:false,bodyBorder:false,shrinkWrapDock:true},H))};it("should stretch the body in both dimensions if the docked items are larger",function(){G({dockedItems:[C(F,100,D),C(E,D,75)],html:"a"});expect(A.getWidth()).toBe(100);expect(A.body.getWidth()).toBe(100);expect(A.getHeight()).toBe(75);expect(A.body.getHeight()).toBe(75)});it("should only stretch the width the dimension where the body is smaller",function(){G({dockedItems:[C(F,100,D),C(E,D,75)],html:'<div style="width: 50px; height: 100px;">'});expect(A.getWidth()).toBe(100);expect(A.body.getWidth()).toBe(100);expect(A.getHeight()).toBe(100);expect(A.body.getHeight()).toBe(100);expect(A.getDockedItems()[1].getHeight()).toBe(100)});it("should only stretch the height the dimension where the body is smaller",function(){G({dockedItems:[C(F,100,D),C(E,D,75)],html:'<div style="width: 200px; height: 50px;">'});expect(A.getHeight()).toBe(75);expect(A.body.getHeight()).toBe(75);expect(A.getWidth()).toBe(200);expect(A.body.getWidth()).toBe(200);expect(A.getDockedItems()[0].getWidth()).toBe(200)});it("should not stretch the body if neither docked item is bigger",function(){G({dockedItems:[C(F,100,D),C(E,D,75)],html:'<div style="width: 200px; height: 100px;">'});expect(A.getWidth()).toBe(200);expect(A.body.getWidth()).toBe(200);expect(A.getHeight()).toBe(100);expect(A.body.getHeight()).toBe(100);expect(A.getDockedItems()[0].getWidth()).toBe(200);expect(A.getDockedItems()[1].getHeight()).toBe(100)})});describe("min/max constraints",function(){describe("width",function(){var G=function(H){return B(Ext.apply({shrinkWrap:true,border:false,bodyBorder:false,shrinkWrapDock:2},H))};it("should constrain to a minWidth",function(){G({minWidth:200,dockedItems:[C(F,100,D)]});expect(A.getWidth()).toBe(200);expect(A.getDockedItems()[0].getWidth()).toBe(200)});it("should constrain to a maxWidth",function(){G({maxWidth:100,dockedItems:[C(F,200,D)]});expect(A.getWidth()).toBe(100);expect(A.getDockedItems()[0].getWidth()).toBe(100)})});describe("height",function(){var G=function(H){return B(Ext.apply({shrinkWrap:true,border:false,bodyBorder:false,shrinkWrapDock:1},H))};it("should constrain to a minHeight",function(){G({minHeight:200,dockedItems:[C(E,D,100)]});expect(A.getHeight()).toBe(200);expect(A.getDockedItems()[0].getHeight()).toBe(200)});it("should constrain to a maxWidth",function(){G({maxHeight:100,dockedItems:[C(E,D,200)]});expect(A.getHeight()).toBe(100);expect(A.getDockedItems()[0].getHeight()).toBe(100)})});describe("combination",function(){var G=function(H){return B(Ext.apply({shrinkWrap:true,border:false,bodyBorder:false,shrinkWrapDock:true},H))};it("should constrain a minHeight & maxWidth",function(){G({minHeight:100,maxWidth:100,dockedItems:[C(F,200,D),C(E,D,50)]});expect(A.getWidth()).toBe(100);expect(A.getHeight()).toBe(100);expect(A.getDockedItems()[0].getWidth()).toBe(100);expect(A.getDockedItems()[1].getHeight()).toBe(100)});it("should constrain a maxHeight & minWidth",function(){G({maxHeight:100,minWidth:100,dockedItems:[C(F,50,D),C(E,D,200)]});expect(A.getWidth()).toBe(100);expect(A.getHeight()).toBe(100);expect(A.getDockedItems()[0].getWidth()).toBe(100);expect(A.getDockedItems()[1].getHeight()).toBe(100)});it("should constrain a minHeight and minWidth",function(){G({minHeight:100,minWidth:100,dockedItems:[C(F,50,D),C(E,D,50)]});expect(A.getWidth()).toBe(100);expect(A.getHeight()).toBe(100);expect(A.getDockedItems()[0].getWidth()).toBe(100);expect(A.getDockedItems()[1].getHeight()).toBe(100)});it("should constrain a maxHeight and maxWidth",function(){G({maxHeight:100,maxWidth:100,dockedItems:[C(F,200,D),C(E,D,200)]});expect(A.getWidth()).toBe(100);expect(A.getHeight()).toBe(100);expect(A.getDockedItems()[0].getWidth()).toBe(100);expect(A.getDockedItems()[1].getHeight()).toBe(100)})})})});describe("interaction within box layout",function(){it("should handle stretchmax and minHeight together",function(){B({width:100,border:false,layout:{type:"hbox",align:"stretchmax"},items:[{xtype:"panel",border:false,items:{xtype:"component",width:20,height:20,style:"background-color: red"},dockedItems:[{xtype:"component",height:20,dock:"bottom",style:"background-color: blue"}],minHeight:100},{xtype:"component",style:"background-color: yellow",height:200,width:20}]});expect(A).toHaveLayout({el:{w:100,h:200},items:{0:{el:{xywh:"0 0 20 200"},items:{0:{el:{xywh:"0 0 20 20"}}},dockedItems:{0:{el:{xywh:"0 180 20 20"}}}},1:{el:{xywh:"20 0 20 200"}}}})})});describe("DOM element order",function(){describe("framed",function(){var C,D;beforeEach(function(){C=Ext.supports.CSS3BorderRadius;Ext.supports.CSS3BorderRadius=false;B({frame:true,title:"foo",closable:true,items:[{xtype:"textfield"}],buttons:[{text:"OK"}]});D=A.el.findTabbableElements()});afterEach(function(){D=null;Ext.supports.CSS3BorderRadius=C});it("should place header above body",function(){expect(D[0]).toBe(A.header.el.dom)});it("should place the body in the middle",function(){var E=A.down("textfield");expect(D[1]).toBe(E.inputEl.dom)});it("should place toolbar below the body",function(){var E=A.down("toolbar");expect(D[2]).toBe(E.el.dom)})});describe("not framed",function(){var C;beforeEach(function(){C=new Ext.panel.Panel({title:"Test",tbar:{itemId:"top-toolbar",items:[{text:"Top Button"}]},bbar:{itemId:"bottom-toolbar",items:[{text:"Bottom Button"}]},height:100,width:100,renderTo:document.body})});afterEach(function(){C.destroy()});it("should not find that isValidParent returns false during a layout when docked items use itemId",function(){spyOn(C.componentLayout,"isValidParent").andCallThrough();C.updateLayout();var F=C.componentLayout.isValidParent.calls,D=F.length,E;for(E=0;E<D;E++){expect(F[E].result).toBe(true)}})})})})