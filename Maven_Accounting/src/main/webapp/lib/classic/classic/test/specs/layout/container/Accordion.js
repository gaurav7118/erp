describe("Ext.layout.container.Accordion",function(){describe("single item",function(){var B,C;function A(E,D){B=new Ext.panel.Panel({width:100,height:100,layout:{type:"accordion",animate:false,multi:E,fill:D===false?false:true},items:[{title:"Child Panel"}],renderTo:Ext.getBody()});C=B.items.getAt(0)}afterEach(function(){B.destroy()});describe("single collapse",function(){beforeEach(function(){A()});it("should not allow the item to collapse",function(){C.collapse();expect(C.collapsed).toBe(false)})});describe("multi collapse",function(){beforeEach(function(){A(true)});it("should not allow the item to collapse",function(){C.collapse();expect(C.collapsed).toBe(false)})})});describe("dynamic items",function(){var A,C,B,D;beforeEach(function(){C=function(E,F){A=new Ext.container.Container({renderTo:document.body,width:200,height:400,layout:{type:"accordion",animate:false,multi:F},items:E})};B=function(E){expect(A.items.getAt(E).collapsed).toBeTruthy()};D=function(E){expect(A.items.getAt(E).collapsed).toBeFalsy()}});afterEach(function(){Ext.destroy(A);C=A=D=B=null});describe("single",function(){it("should collapse a dynamic item by default",function(){C([{title:"Default"}]);var E=new Ext.panel.Panel({title:"Dynamic"});A.add(E);B(1)});it("should be able to expand items that were added dynamically",function(){C([{title:"Default"}]);var E=new Ext.panel.Panel({title:"Dynamic"});A.add(E);E.expand();B(0);D(1)});it("should be able to expand items that were added dynamically",function(){C([{title:"Default"}]);var E=new Ext.panel.Panel({title:"Dynamic"});A.add(E);E.expand();E.collapse();D(0);B(1)});it("should not expand other items when adding",function(){C([{title:"Expanded"},{title:"Static - Collapsed"}]);A.add({title:"Dynamic"});D(0);B(1);B(2)})});describe("multi",function(){it("should leave an item expanded by default",function(){C([{title:"Default"}],true);var E=new Ext.panel.Panel({title:"Dynamic"});A.add(E);D(1)});it("should collapse the item if we specify it explicitly",function(){C([{title:"Default"}],true);var E=new Ext.panel.Panel({title:"Dynamic",collapsed:true});A.add(E);B(1)});it("should be able to expand items that were added dynamically",function(){C([{title:"Default"}],true);var E=new Ext.panel.Panel({title:"Dynamic",collapsed:true});A.add(E);E.expand();D(0);D(1)});it("should be able to collapse items that were added dynamically",function(){C([{title:"Default"}],true);var E=new Ext.panel.Panel({title:"Dynamic",collapsed:true});A.add(E);E.expand();E.collapse();D(0);B(1)})})});describe("expand/collapse",function(){var A,D,C,E;beforeEach(function(){D=function(F,H,G){A=new Ext.container.Container({renderTo:document.body,width:200,height:400,layout:{type:"accordion",animate:false,multi:H,fill:G===false?false:true},items:F})};C=function(F){var G=A.items.getAt(F);expect(G.collapsed).toBeTruthy()};E=function(F){var G=A.items.getAt(F);expect(G.collapsed).toBeFalsy()}});afterEach(function(){Ext.destroy(A);D=A=E=C=null});var B=function(F){describe("single",function(){it("should expand the first item by default if none are collapsed: false",function(){D([{title:"P1"},{title:"P2"},{title:"P3"}],false,F);E(0)});it("should expand a collapsed: false item by default",function(){D([{title:"P1"},{title:"P2",collapsed:false},{title:"P3"}],false,F);E(1)});it("should expand the first collapsed: false item by default",function(){D([{title:"P1"},{title:"P2",collapsed:false},{title:"P3"}],false,F);E(1);C(2)});it("should expand the next item when collapsing an item",function(){D([{title:"P1"},{title:"P2"},{title:"P3"}],false,F);A.items.first().collapse();C(0);E(1)});it("should expand the previous item when collapsing an item and next is not available",function(){D([{title:"P1"},{title:"P2"},{title:"P3",collapsed:false}],false,F);A.items.last().collapse();C(2);E(1)});it("should collapse the expanded item when expanding an item",function(){D([{title:"P1"},{title:"P2"},{title:"P3"}],false,F);A.items.last().expand();C(0);E(2)})});describe("multi",function(){it("should have each item expanded unless specified as collapsed",function(){D([{title:"P1"},{title:"P2"},{title:"P3"}],true,F);E(0);E(1);E(2)});it("should collapse any items with collapsed: true",function(){D([{title:"P1",collapsed:true},{title:"P2"},{title:"P3",collapsed:true}],true,F);E(1)});it("should not modify other items when collapsing an item",function(){D([{title:"P1"},{title:"P2"},{title:"P3"}],true,F);A.items.getAt(1).collapse();E(0);C(1);E(2)});it("should not modify other items when expanding an item",function(){D([{title:"P1",collapsed:true},{title:"P2"},{title:"P3",collapsed:true}],true,F);A.items.first().expand();E(0);E(1);C(2)})})};describe("fill: true",function(){B(true)});describe("fill: false",function(){B(false)})});describe("show/hide",function(){var A,C,B,D;beforeEach(function(){C=function(E){A=new Ext.container.Container({renderTo:document.body,width:200,height:400,layout:{type:"accordion",animate:false},items:E})};B=function(E){var F=A.items.getAt(E);expect(F.collapsed).toBeTruthy();expect(F.getInherited().collapsed).toBeTruthy()};D=function(E){var F=A.items.getAt(E);expect(F.collapsed).toBeFalsy();expect(F.getInherited().collapsed).toBeFalsy()}});afterEach(function(){Ext.destroy(A);C=A=D=B=null});it("should retain the same state when hidden",function(){C([{title:"P1"},{title:"P2",collapsed:true},{title:"P3",collapsed:true}]);A.items.first().hide();D(0);A.items.last().hide();B(2)});it("should not expand when shown when not the first item",function(){C([{title:"P1",collapsed:true,hidden:true},{title:"P2",collapsed:true},{title:"P3",hidden:true}]);A.items.getAt(1).show();B(1);A.items.last().show();B(2)})});describe("filling",function(){var A,B=300;function C(D,F,E){A=new Ext.container.Container({width:100,height:B,layout:{type:"accordion",animate:false,multi:F,fill:E===false?false:true},items:D,renderTo:Ext.getBody()})}afterEach(function(){A.destroy();A=null});describe("fill: true",function(){describe("single",function(){it("should stretch the item to the height",function(){C([{title:"Item 1",html:"I1"}],false,true);expect(A.items.first().getHeight()).toBe(B)});it("should stretch the item to the height - the other panel headers",function(){C([{title:"Item 1",html:"I1"},{title:"Item 2",html:"I2"}],false,true);var D=A.items.last().getHeight();expect(A.items.first().getHeight()).toBe(B-D)})});describe("multi",function(){it("should stretch the item to the height",function(){C([{title:"Item 1",html:"I1"}],true,true);expect(A.items.first().getHeight()).toBe(B)});it("should stretch the item to the height - the other panel headers",function(){C([{title:"Item 1",html:"I1"},{title:"Item 2",html:"I2"}],true,true);var D=A.items.last().getHeight();expect(A.items.first().getHeight()).toBe(B-D)});it("should stretch the both items evenly",function(){C([{title:"Item 1",html:"I1",collapsed:false},{title:"Item 2",html:"I2",collapsed:false}],true,true);expect(A.items.first().getHeight()).toBe(B/2);expect(A.items.last().getHeight()).toBe(B/2)})})});describe("fill: false",function(){describe("single",function(){it("should not stretch the item to the height",function(){C([{title:"Item 1",html:"I1"}],false,false);expect(A.items.first().getHeight()).toBeLessThan(100)});it("should not stretch either item height",function(){C([{title:"Item 1",html:"I1"},{title:"Item 2",html:"I2"}],false,false);expect(A.items.first().getHeight()).toBeLessThan(100);expect(A.items.last().getHeight()).toBeLessThan(100)})});describe("multi",function(){it("should not stretch the item to the height",function(){C([{title:"Item 1",html:"I1"}],true,false);expect(A.items.first().getHeight()).toBeLessThan(100)});it("should not stretch either item height",function(){C([{title:"Item 1",html:"I1"},{title:"Item 2",html:"I2"}],true,false);expect(A.items.first().getHeight()).toBeLessThan(100);expect(A.items.last().getHeight()).toBeLessThan(100)});it("should not stretch either item",function(){C([{title:"Item 1",html:"I1",collapsed:false},{title:"Item 2",html:"I2",collapsed:false}],true,false);expect(A.items.first().getHeight()).toBeLessThan(100);expect(A.items.last().getHeight()).toBeLessThan(100)})})})});describe("collapseFirst",function(){var A,B,C=[{type:"print"},{type:"refresh"}];beforeEach(function(){A=function(D,E){B=new Ext.panel.Panel({width:100,height:100,layout:{type:"accordion",animate:false,collapseFirst:E},items:D,renderTo:Ext.getBody()})}});afterEach(function(){Ext.destroy(B);A=B=null});it("should use the collapseFirst option on the child items as a default",function(){A([{collapseFirst:true,title:"A",tools:C},{collapseFirst:false,title:"B",tools:C}]);var E=B.items.first(),D=B.items.last();expect(E.tools[0].type).toBe("collapse-top");expect(E.tools[1].type).toBe("print");expect(E.tools[2].type).toBe("refresh");expect(D.tools[0].type).toBe("print");expect(D.tools[1].type).toBe("refresh");expect(D.tools[2].type).toBe("expand-bottom")});it("should use the collapseFirst: false on the layout",function(){A([{title:"A",tools:C},{title:"B",tools:C}],false);var E=B.items.first(),D=B.items.last();expect(E.tools[0].type).toBe("print");expect(E.tools[1].type).toBe("refresh");expect(E.tools[2].type).toBe("collapse-top");expect(D.tools[0].type).toBe("print");expect(D.tools[1].type).toBe("refresh");expect(D.tools[2].type).toBe("expand-bottom")});it("should use the collapseFirst: true on the layout",function(){A([{title:"A",tools:C},{title:"B",tools:C}],true);var E=B.items.first(),D=B.items.last();expect(E.tools[0].type).toBe("collapse-top");expect(E.tools[1].type).toBe("print");expect(E.tools[2].type).toBe("refresh");expect(D.tools[0].type).toBe("expand-bottom");expect(D.tools[1].type).toBe("print");expect(D.tools[2].type).toBe("refresh")})});describe("activeOnTop",function(){var A,B;beforeEach(function(){A=function(C,D){B=new Ext.panel.Panel({width:100,height:100,layout:{type:"accordion",animate:false,activeOnTop:true},items:C,renderTo:Ext.getBody()})}});afterEach(function(){Ext.destroy(B);A=B=null});it("should move initial active item to the top",function(){var E=new Ext.panel.Panel({title:"A"}),D=new Ext.panel.Panel({title:"B"}),C=new Ext.panel.Panel({title:"C",collapsed:false});A([E,D,C]);expect(B.items.indexOf(C)).toBe(0)});it("should move the item to the top when expanded",function(){var E=new Ext.panel.Panel({title:"A"}),D=new Ext.panel.Panel({title:"B"}),C=new Ext.panel.Panel({title:"C"});A([E,D,C]);C.expand();expect(B.items.indexOf(C)).toBe(0)});it("should move the active item to the top when a new item is inserted above it",function(){var F=new Ext.panel.Panel({title:"A"}),E=new Ext.panel.Panel({title:"B"}),C=new Ext.panel.Panel({title:"C"}),D;A([F,E,C]);D=B.insert(0,{});expect(B.items.indexOf(F)).toBe(0);expect(B.items.indexOf(D)).toBe(1)})});describe("removing items",function(){it("should expand the first item with multi: false & removing the expanded item",function(){var A=new Ext.container.Container({width:200,height:200,layout:{type:"accordion",animate:false},items:[{title:"A"},{title:"B"},{title:"C"}]});A.remove(0);expect(A.items.first().collapsed).toBe(false);A.destroy()});it("should not attempt to expand any items when destroying the container",function(){var B=0;var A=new Ext.container.Container({width:200,height:200,layout:{type:"accordion",animate:false},items:[{title:"A"},{title:"B"},{title:"C"}]});A.items.each(function(C){C.on("expand",function(){++B})});A.destroy();expect(B).toBe(0)})});describe("misc",function(){it("should expand inside a panel",function(){var B=new Ext.panel.Panel({layout:{type:"accordion",animate:false},items:[{title:"P1"},{title:"P2"},{title:"P3"}]});var A=new Ext.panel.Panel({width:200,height:200,layout:"fit",renderTo:Ext.getBody(),items:B});B.getComponent(1).expand();expect(B.getComponent(0).collapsed).toBe("top");A.destroy()})});describe("ARIA attributes",function(){var C=jasmine.expectAriaAttr,A=jasmine.expectNoAriaAttr;function B(F,D,E){describe(F+", animate: "+!!D,function(){var I,M,K,H,J,G,L;beforeEach(function(){G=jasmine.createSpy("collapse");L=jasmine.createSpy("expand");I=new Ext.container.Container({renderTo:Ext.getBody(),width:400,height:200,style:{border:"1px solid red"},layout:{type:"accordion",animate:D},items:[{title:"foo",collapsible:true,animCollapse:D,tools:[{type:"pin"}],listeners:{collapse:G,expand:L}},{title:"bar",collapsible:true,animCollapse:D,closable:true}]});M=I.down("[title=foo]");K=I.down("[title=bar]");H=M.down("tool[type=pin]");J=K.down("tool[type=close]");if(E&&E.collapse){runs(function(){M.collapse()});waitsForSpy(G,"collapse",1000)}if(E&&E.expand){runs(function(){M.expand()});waitsForSpy(L,"expand",1000)}});afterEach(function(){Ext.destroy(I);I=M=K=H=J=null;G=L=null});describe("container",function(){it("should have presentation role",function(){C(I,"role","presentation")});describe("innerCt",function(){it("should have tablist role",function(){C(I.layout.innerCt,"role","tablist")});it("should have aria-multiselectable",function(){C(I.layout.innerCt,"aria-multiselectable","true")})})});describe("foo panel",function(){it("should have presentation role on main el",function(){C(M.el,"role","presentation")});describe("header",function(){describe("title",function(){it("should have tab role",function(){C(M.header.titleCmp,"role","tab")});it("should have tabindex",function(){expect(M.header.titleCmp.ariaEl.isTabbable()).toBe(true)});it("should have aria-expanded",function(){C(M.header.titleCmp,"aria-expanded",!M.collapsed+"")})});describe("collapse tool",function(){it("should have presentation role",function(){C(M.collapseTool,"role","presentation")});it("should not be tabbable",function(){expect(M.collapseTool.el.isTabbable()).toBe(false)});it("should not be focusable, either",function(){expect(M.collapseTool.isFocusable()).toBe(false)})});describe("pin tool",function(){it("should have button role",function(){C(H,"role","button")});it("should be tabbable",function(){expect(H.el.isTabbable()).toBe(true)})})});describe("body",function(){it("should have tabpanel role",function(){C(M.body,"role","tabpanel")});it("should be aria-labelledby the header title",function(){C(M.body,"aria-labelledby",M.header.titleCmp.id)});it("should have aria-hidden",function(){C(M.body,"aria-hidden",!!M.collapsed+"")});it("should not have tabindex",function(){A(M.body,"tabIndex")})})});describe("bar panel",function(){it("should have presentation role on main el",function(){C(K.el,"role","presentation")});describe("header",function(){describe("title",function(){it("should have tab role",function(){C(K.header.titleCmp,"role","tab")});it("should have tabindex",function(){expect(K.header.titleCmp.ariaEl.isTabbable()).toBe(true)});it("should have aria-expanded",function(){C(K.header.titleCmp,"aria-expanded",!K.collapsed+"")})});describe("collapse tool",function(){it("should have presentation role",function(){C(K.collapseTool,"role","presentation")});it("should not be tabbable",function(){expect(K.collapseTool.el.isTabbable()).toBe(false)});it("should not be focusable, either",function(){expect(K.collapseTool.isFocusable()).toBe(false)})});describe("close tool",function(){it("should have presentation role",function(){C(J,"role","presentation")});it("should not be tabbable",function(){expect(J.ariaEl.isTabbable()).toBe(false)});it("should not be focusable, either",function(){expect(J.ariaEl.isFocusable()).toBe(false)})})});describe("body",function(){it("should have tabpanel role",function(){C(K.body,"role","tabpanel")});it("should be aria-labelledby the header title",function(){C(K.body,"aria-labelledby",K.header.titleCmp.id)});it("should have aria-hidden",function(){C(K.body,"aria-hidden",!!K.collapsed+"")});it("should not have tabindex",function(){A(K.body,"tabIndex")})})})})}B("rendered",false);B("collapsed",100,{collapse:true});B("collapsed",false,{collapse:true});B("expanded",100,{collapse:true,expand:true});B("expanded",false,{collapse:true,expand:true})});describe("interaction",function(){var D=jasmine.focusAndWait,C=jasmine.expectFocused,E=jasmine.asyncPressKey,A=jasmine.asyncPressTabKey;function B(F){describe("animate: "+!!F,function(){var K,P,O,N,Q,G,S,I,H,M,L,J,R;beforeEach(function(){J=jasmine.createSpy("collapse");R=jasmine.createSpy("expand");I=new Ext.form.field.Text({renderTo:Ext.getBody(),fieldLabel:"before"});K=new Ext.container.Container({renderTo:Ext.getBody(),width:400,height:150,style:{border:"1px solid red"},layout:{type:"accordion",animate:F},items:[{title:"foo",collapsible:true,animCollapse:F,tools:[{type:"pin"}],listeners:{collapse:J,expand:R},items:[{xtype:"textfield",fieldLabel:"foo inner"}]},{title:"bar",collapsible:true,animCollapse:F,closable:true,items:[{xtype:"textfield",fieldLabel:"bar inner"}]}]});H=new Ext.form.field.Text({renderTo:Ext.getBody(),fieldLabel:"after"});P=K.down("[title=foo]");O=K.down("[title=bar]");N=P.header;Q=O.header;G=P.down("tool[type=pin]");S=O.down("tool[type=close]");M=P.down("textfield");L=O.down("textfield")});afterEach(function(){Ext.destroy(I,K,H);K=P=O=G=S=null;I=H=M=L=null;J=R=null});describe("pointer interaction",function(){describe("title collapse",function(){beforeEach(function(){runs(function(){jasmine.fireMouseEvent(Q,"click")});waitsForSpy(J,"collapse",1000)});it("should collapse foo",function(){expect(!!P.collapsed).toBe(true)});it("should expand bar",function(){expect(!!O.collapsed).toBe(false)});describe("expand",function(){beforeEach(function(){runs(function(){jasmine.fireMouseEvent(Q,"click")});waitsForSpy(R,"expand",1000)});it("should expand foo",function(){expect(!!P.collapsed).toBe(false)});it("should collapse bar",function(){expect(!!O.collapsed).toBe(true)})})});describe("tool collapse",function(){beforeEach(function(){runs(function(){jasmine.fireMouseEvent(P.collapseTool,"click")});waitsForSpy(J,"collapse",1000)});it("should collapse foo",function(){expect(!!P.collapsed).toBe(true)});it("should expand bar",function(){expect(!!O.collapsed).toBe(false)})});describe("tool close",function(){it("should close bar",function(){jasmine.fireMouseEvent(S,"click");expect(K.items.length).toBe(1)})})});describe("keyboard interaction",function(){var T,U;beforeEach(function(){T=P.header.titleCmp;U=O.header.titleCmp});afterEach(function(){T=U=null});describe("arrow keys",function(){describe("down arrow",function(){it("should go from foo to bar",function(){E(T,"down");C(U)});it("should wrap over from bar to foo",function(){E(U,"down");C(T)})});describe("right arrow",function(){it("should go from foo to bar",function(){E(T,"right");C(U)});it("should wrap over from bar to foo",function(){E(U,"right");C(T)})});describe("up arrow",function(){it("should go from bar to foo",function(){E(U,"up");C(T)});it("should wrap over from foo to bar",function(){E(T,"up");C(U)})});describe("left arrow",function(){it("should go from bar to foo",function(){E(U,"left");C(T)});it("should wrap over from foo to bar",function(){E(T,"left");C(U)})})});describe("home/end keys",function(){it("should go to foo",function(){E(U,"home");C(T)});it("should stay on foo",function(){E(T,"home");C(T)});it("should go to bar",function(){E(T,"end");C(U)});it("should stay on bar",function(){E(U,"end");C(U)})});describe("del key",function(){describe("no modifiers",function(){it("should not close foo",function(){E(T,"delete");runs(function(){expect(K.items.length).toBe(2);expect(P.destroyed).toBe(false)})});it("should not close bar",function(){E(U,"delete");runs(function(){expect(K.items.length).toBe(2);expect(O.destroyed).toBe(false)})})});describe("alt-del",function(){it("should not close foo",function(){E(T,"delete",{alt:true});runs(function(){expect(K.items.length).toBe(2);expect(P.destroyed).toBe(false)})});it("should close bar",function(){E(U,"delete",{alt:true});runs(function(){expect(K.items.length).toBe(1);expect(O.destroyed).toBe(true)})})})});describe("tab key",function(){describe("forward",function(){describe("foo expanded",function(){it("should go from before input to foo title",function(){A(I,true);C(T)});it("should go from foo title to pin tool",function(){A(T,true);C(G)});it("should go from pin tool to foo inner input",function(){A(G,true);C(M)});it("should go from foo inner input to bar title",function(){A(M,true);C(U)});it("should go from bar title to after input",function(){A(U,true);C(H)})});describe("foo collapsed",function(){beforeEach(function(){runs(function(){P.collapse()});waitForSpy(J,"collapse",1000)});it("should go from before input to foo title",function(){A(I,true);C(T)});it("should go from foo title to pin tool",function(){A(T,true);C(G)});it("should go from pin tool to bar title",function(){A(G,true);C(U)});it("should go from bar title to bar inner input",function(){A(U,true);C(L)});it("should go from bar inner input to after input",function(){A(L,true);C(H)})})});describe("backward",function(){describe("foo expanded",function(){it("should go from after input to bar title",function(){A(H,false);C(U)});it("should go from bar title to foo inner input",function(){A(U,false);C(M)});it("should go from foo inner input to pin tool",function(){A(M,false);C(G)});it("should go from pin tool to foo title",function(){A(G,false);C(T)});it("should go from foo title to before input",function(){A(T,false);C(I)})});describe("foo collapsed",function(){beforeEach(function(){runs(function(){P.collapse()});waitForSpy(J,"collapse",1000)});it("should go from after input to bar inner input",function(){A(H,false);C(L)});it("should go from bar inner input to bar title",function(){A(L,false);C(U)});it("should go from bar title to pin tool",function(){A(U,false);C(G)});it("should go from pin tool to foo title",function(){A(G,false);C(T)});it("should go from foo title to before input",function(){A(T,false);C(I)})})})})})})}B(100);B(false)})})