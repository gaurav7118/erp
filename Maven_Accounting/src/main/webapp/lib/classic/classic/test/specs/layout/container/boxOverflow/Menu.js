describe("Ext.layout.container.boxOverflow.Menu",function(){var A;function B(C){A=new Ext.toolbar.Toolbar(Ext.apply({enableOverflow:true,width:1,renderTo:Ext.getBody(),items:[{xtype:"checkboxfield",name:"check1",itemId:"check1"}]},C||{}))}afterEach(function(){Ext.destroy(A);A=null});it("should be able to show a button menu after being overflowed",function(){B({items:[{xtype:"button",text:"Foo",menu:{items:{text:"Some Menu"}}}]});var D=A.layout.overflowHandler.menu,C=A.items.first();D.show();D.hide();A.setWidth(300);C.showMenu();expect(C.getMenu().isVisible(true)).toBe(true)});describe("addComponentToMenu",function(){it("should create an overflowClone bound to each toolbar item",function(){B();A.layout.overflowHandler.menu.show();expect(A.items.getAt(0).overflowClone).toBeDefined()});it("should create an overflowClone bound to each toolbar item that is a reference to each menu item",function(){var D,C;B();D=A.layout.overflowHandler.menu;D.show();C=D.items.getAt(0);expect(A.items.getAt(0).overflowClone).toBe(C);expect(C.name).toBe("check1")})});describe("createMenuConfig",function(){it("should have same state as its complement toolbar item",function(){var E,C,D;B({items:[{xtype:"checkboxfield",name:"check1",itemId:"check1"},{xtype:"checkboxfield",name:"check2",itemId:"check2",checked:true}]});E=A.items;E.getAt(0).setValue(true);E.getAt(1).setValue(false);C=A.layout.overflowHandler;D=C.menu.items;C.menu.show();expect(D.getAt(0).checked).toBe(true);expect(D.getAt(1).checked).toBe(false)});it("should not overwrite listeners config defined on the original component",function(){var D=false,C;B({items:[{xtype:"button",listeners:{click:function(){D=true}}}]});C=A.layout.overflowHandler.menu;C.show();jasmine.fireMouseEvent(C.items.getAt(0).el,"click");expect(D).toBe(true)})});describe("form fields in toolbar",function(){it("should sync the value both ways on change",function(){var C,D,E;B({items:[{xtype:"textfield",name:"text1",itemId:"text1"}]});C=A.layout.overflowHandler;D=A.down("#text1");C.menu.show();E=C.menu.down("[name=text1]");D.setValue("foo");expect(E.getValue()).toBe("foo");E.setValue("bar");expect(D.getValue()).toBe("bar")})})})