describe("Ext.menu.CheckItem",function(){var E,F;function B(G){E=Ext.widget({xtype:"menu",renderTo:document.body,items:[Ext.apply({xtype:"menucheckitem",text:"foo"},G)]});F=E.items.getAt(0)}function C(G,H){jasmine.expectAriaAttr(F,G,H)}function A(G){jasmine.expectNoAriaAttr(F,G)}afterEach(function(){Ext.destroy(E);F=null});function D(G){jasmine.fireMouseEvent(F,G||"click")}describe("initial config",function(){describe("normal",function(){beforeEach(function(){B()});it("should have the checked property as false by default",function(){expect(F.checked).toBe(false)});describe("rendered",function(){beforeEach(function(){E.show()});it("should have itemEl as ariaEl",function(){expect(F.ariaEl).toBe(F.itemEl)});it("should have menuitemcheckbox role",function(){C("role","menuitemcheckbox")});it("should not have aria-label",function(){A("aria-label")});describe("aria-checked",function(){it("should be false when not checked",function(){C("aria-checked","false")});it("should be true when checked",function(){Ext.destroy(E);B({checked:true});C("aria-checked","true")})})})});describe("plain",function(){beforeEach(function(){B({plain:true});E.show()});it("should have el as ariaEl",function(){expect(F.ariaEl).toBe(F.el)});it("should have menuitemcheckbox role",function(){C("role","menuitemcheckbox")});it("should have no aria-label",function(){A("aria-label")});describe("aria-checked",function(){it("should be false when not checked",function(){C("aria-checked","false")});it("should be true when checked",function(){Ext.destroy(E);B({plain:true,checked:true});E.show();C("aria-checked","true")})})});describe("with submenu",function(){beforeEach(function(){B({menu:{items:[{text:"bar"}]}});E.show()});it("should have aria-haspopup",function(){C("aria-haspopup","true")});it("should have aria-owns",function(){C("aria-owns",F.menu.id)});it("should have aria-checked",function(){C("aria-checked","mixed")});it("should have aria-label",function(){C("aria-label","foo submenu")})})});describe("setChecked",function(){it("should set the checked state on the component",function(){B();F.setChecked(true);expect(F.checked).toBe(true);F.setChecked(false);expect(F.checked).toBe(false)});describe("aria-checked attribute",function(){beforeEach(function(){B();E.show();F.setChecked(true)});it("should set aria-checked attribute",function(){C("aria-checked","true")});it("should reset aria-checked attribute",function(){F.setChecked(false);C("aria-checked","false")})});describe("element classes",function(){it("should add the checkedCls and remove uncheckedCls when checking",function(){B();F.setChecked(true);expect(F.el.hasCls(F.checkedCls)).toBe(true);expect(F.el.hasCls(F.uncheckedCls)).toBe(false)});it("should add the uncheckedCls and remove checkedCls when unchecking",function(){B({checked:true});F.setChecked(false);expect(F.el.hasCls(F.uncheckedCls)).toBe(true);expect(F.el.hasCls(F.checkedCls)).toBe(false)})});describe("events",function(){describe("no state change",function(){it("should not fire any events setting checked: false when not checked",function(){var G=false;B();F.on("beforecheckchange",function(){G=true});F.setChecked(false);expect(G).toBe(false)});it("should not fire any events setting checked: true when checked",function(){var G=false;B({checked:true});F.on("beforecheckchange",function(){G=true});F.setChecked(true);expect(G).toBe(false)})});describe("supressEvents",function(){it("should not fire beforecheckchange",function(){var G=false;B();F.on("beforecheckchange",function(){G=true});F.setChecked(true,true);expect(G).toBe(false)});it("should not fire checkchange",function(){var G=false;B();F.on("checkchange",function(){G=true});F.setChecked(true,true);expect(G).toBe(false)});it("should not trigger a checkHandler",function(){var G=false;B({checkHandler:function(){G=true}});F.setChecked(true,true);expect(G).toBe(false)})});describe("veto",function(){it("should not trigger a change if beforecheckchange returns false",function(){B();F.on("beforecheckchange",function(){return false});F.setChecked(true);expect(F.checked).toBe(false)})});describe("params",function(){it("should fire beforecheckchange with the item and the new checked state",function(){var G,H;B();F.on("beforecheckchange",function(J,I){G=J;H=I});F.setChecked(true);expect(G).toBe(F);expect(H).toBe(true)});it("should fire checkchange with the item and the new checked state",function(){var G,H;B();F.on("checkchange",function(J,I){G=J;H=I});F.setChecked(true);expect(G).toBe(F);expect(H).toBe(true)});it("should trigger checkHandler with the item and the new checked state",function(){var G,H;B({checkHandler:function(J,I){G=J;H=I}});F.setChecked(true);expect(G).toBe(F);expect(H).toBe(true)});describe("checkHandler scope",function(){it("should default the scope to the component",function(){var G;B({checkHandler:function(){G=this}});F.setChecked(true);expect(G).toBe(F)});it("should use a passed scope",function(){var H={},G;B({scope:H,checkHandler:function(){G=this}});F.setChecked(true);expect(G).toBe(H)});it("should be able to resolve to a ViewController",function(){B({checkHandler:"doFoo"});var I=new Ext.app.ViewController({doFoo:function(){return true}});var G=spyOn(I,"doFoo");var H=new Ext.container.Container({renderTo:Ext.getBody(),controller:I,items:F});F.setChecked(true);expect(G).toHaveBeenCalled();H.destroy();G=null})})})})});describe("handler",function(){it("should default the scope to the component",function(){var G;B({handler:function(){G=this}});D();expect(G).toBe(F)});it("should use a passed scope",function(){var H={},G;B({scope:H,handler:function(){G=this}});D();expect(G).toBe(H)});it("should be able to resolve to a ViewController",function(){B({handler:"doFoo"});var I=new Ext.app.ViewController({doFoo:function(){return true}});var G=spyOn(I,"doFoo");var H=new Ext.container.Container({renderTo:Ext.getBody(),controller:I,items:E});D();expect(G).toHaveBeenCalled();H.destroy();G=null})});describe("setText",function(){describe("with submenu",function(){beforeEach(function(){B({menu:{items:[{text:"bar"}]}});E.show()});it("should set aria-label",function(){F.setText("frob");C("aria-label","frob submenu")})})});describe("pointer interaction",function(){beforeEach(function(){B();E.show()});it("should not close the menu when clicked on textEl",function(){runs(function(){D()});waits(50);runs(function(){expect(F.isVisible()).toBe(true)})});it("should not close the menu when clicked on checkEl",function(){runs(function(){D()});waits(50);runs(function(){expect(F.isVisible()).toBe(true)})})})})