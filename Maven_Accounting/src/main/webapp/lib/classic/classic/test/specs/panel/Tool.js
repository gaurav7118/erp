describe("Ext.panel.Tool",function(){var B,C;function E(F){F=Ext.apply({renderTo:Ext.getBody()},F);B=new Ext.panel.Tool(F);C=B.el;return B}function D(F,G){jasmine.expectAriaAttr(B,F,G)}function A(F){jasmine.expectNoAriaAttr(B,F)}afterEach(function(){Ext.destroy(B);B=null});describe("ARIA attributes",function(){describe("rendered with no tooltip",function(){beforeEach(function(){E({type:"collapse"})});it("should have el as ariaEl",function(){expect(B.ariaEl).toBe(B.el)});it("should have button role",function(){D("role","button")});it("should not have title",function(){A("title")});it("should not have aria-label",function(){A("aria-label")});describe("setTooltip",function(){describe("default type",function(){beforeEach(function(){B.setTooltip("foo")});it("should set aria-label",function(){D("aria-label","foo")});it("should not set title",function(){A("title")})});describe("forced type",function(){beforeEach(function(){B.setTooltip("bar","title")});it("should set title",function(){D("title","bar")});it("should not set aria-label",function(){A("aria-label")})})})});describe("rendered with tooltip",function(){beforeEach(function(){E({type:"expand",tooltip:"frob"})});it("should set aria-label",function(){D("aria-label","frob")});it("should not set title",function(){A("title")})})});describe("interaction",function(){var G,F,K,J,H,I;beforeEach(function(){G=jasmine.createSpy("callback");F=jasmine.createSpy("handler");K=jasmine.createSpy("click");J={};H={};I={};E({type:"close",callback:G,handler:F,scope:J,listeners:{click:K},renderTo:undefined});spyOn(B,"onClick").andCallThrough();B.render(Ext.getBody());C=B.el;B.toolOwner=H});afterEach(function(){G=F=K=J=null;H=I=null});describe("pointer",function(){describe("mouseover",function(){beforeEach(function(){jasmine.fireMouseEvent(C,"mouseover",1,1)});it("should add toolOverCls on over",function(){expect(C.hasCls(B.toolOverCls)).toBe(true)});it("should remove toolOverCls on out",function(){jasmine.fireMouseEvent(C,"mouseout",1,1);expect(C.hasCls(B.toolOveCls)).toBe(false)})});describe("mousedown",function(){beforeEach(function(){jasmine.fireMouseEvent(C,"mousedown",1,1)});it("should add toolPressedCls",function(){expect(C.hasCls(B.toolPressedCls)).toBe(true)});it("should prevent focusing the tool",function(){expect(B.hasFocus).toBe(false)})});describe("click",function(){var L,N,Q,P,M;function O(R){R=R||B;jasmine.fireMouseEvent(R.el,"click",1,1);L=G.mostRecentCall.args;N=G.mostRecentCall.scope;Q=F.mostRecentCall.args;P=F.mostRecentCall.scope;M=K.mostRecentCall.args}describe("enabled",function(){beforeEach(function(){B.ownerCt=I;O()});afterEach(function(){L=N=Q=P=M=null});it("should remove toolPressedCls",function(){expect(C.hasCls(B.toolPressedCls)).toBe(false)});describe("stopEvent",function(){it("should stop the event by default",function(){var R=B.onClick.mostRecentCall.args[0];expect(R.isStopped).toBe(true)});it("should not stop event when stopEvent is false",function(){B.stopEvent=false;O(B);var R=B.onClick.mostRecentCall.args[0];expect(!!R.isStopped).toBe(false)})});describe("callback",function(){beforeEach(function(){B.handler=null;O()});it("should fire",function(){expect(G).toHaveBeenCalled()});it("should fire in the specified scope",function(){expect(N).toBe(J)});it("should pass event as the last argument",function(){var R=L.pop();expect(R.isEvent).toBe(true)});it("should pass expected arguments with toolOwner",function(){L.pop();expect(L).toEqual([H,B])});it("should pass expected arguments w/o toolOwner",function(){B.toolOwner=null;O(B);L.pop();expect(L).toEqual([I,B])})});describe("handler",function(){it("should fire",function(){expect(F).toHaveBeenCalled()});it("should fire in the specified scope",function(){expect(P).toBe(J)});it("should pass event as first argument",function(){var R=Q[0];expect(R.isEvent).toBe(true)});it("should pass expected arguments",function(){Q.shift();expect(Q).toEqual([C.dom,I,B])})});describe("click event",function(){it("should fire",function(){expect(K).toHaveBeenCalled()});it("should pass the tool as first argument",function(){expect(M[0]).toBe(B)});it("should pass event as the second argument",function(){expect(M[1].isEvent).toBe(true)});it("should pass toolOwner as the third argument",function(){expect(M[2]).toBe(H)});it("should pass ownerCt as the third argument w/o toolOwner",function(){B.toolOwner=null;O(B);expect(M[2]).toBe(I)})})});describe("disabled",function(){beforeEach(function(){B.disable();O()});it("should not fire callback",function(){expect(G).not.toHaveBeenCalled()});it("should not fire handler",function(){expect(F).not.toHaveBeenCalled()});it("should not fire click event",function(){expect(K).not.toHaveBeenCalled()});it("should not stop event by default",function(){var R=B.onClick.mostRecentCall.args[0];expect(!!R.isStopped).toBe(false)})})})});describe("keyboard",function(){var L=jasmine.asyncPressKey;it("should be tabbable by default",function(){expect(C.isTabbable()).toBe(true)});describe("Space key",function(){beforeEach(function(){L(B,"space")});it("should call onClick when Space key is pressed",function(){expect(B.onClick).toHaveBeenCalled()});it("should stop event by default",function(){var M=B.onClick.mostRecentCall.args[0];expect(M.isStopped).toBe(true)})});describe("Enter key",function(){beforeEach(function(){L(B,"enter")});it("should call onClick when Enter key is pressed",function(){expect(B.onClick).toHaveBeenCalled()});it("should stop the event by default",function(){var M=B.onClick.mostRecentCall.args[0];expect(M.isStopped).toBe(true)})})})})})