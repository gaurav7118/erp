describe("Ext.plugin.Viewport",function(){var C,B=Ext.supports.touchScroll?xdescribe:describe;function A(D,E){C=new (E||Ext.Component)(Ext.apply({renderTo:Ext.getBody(),plugins:"viewport"},D))}afterEach(function(){C=Ext.destroy(C)});describe("size model",function(){it("should be configured before render",function(){var D;A({listeners:{beforerender:function(E){D=E.getSizeModel()}}});expect(D.width.configured).toBe(true);expect(D.height.configured).toBe(true)});it("should be configured after render",function(){A();var D=C.getSizeModel();expect(D.width.configured).toBe(true);expect(D.height.configured).toBe(true)})});describe("inherited state",function(){describe("viewmodel",function(){var D;beforeEach(function(){D=new Ext.app.ViewModel({data:{foo:"bar"}});A({viewModel:D})});afterEach(function(){D=Ext.destroy(D)});it("should use the viewmodel on the rootInheritedState",function(){expect(Ext.rootInheritedState.viewModel).toBe(D)});it("should allow non children of the viewport to inherit the viewmodel",function(){var E=new Ext.Component({bind:"{foo}",renderTo:Ext.getBody()});expect(E.lookupViewModel()).toBe(D);E.destroy()})});describe("session",function(){var D;beforeEach(function(){D=new Ext.data.Session();A({session:D})});afterEach(function(){D=Ext.destroy(D)});it("should use the session on the rootInheritedState",function(){expect(Ext.rootInheritedState.session).toBe(D)});it("should allow non children of the viewport to inherit the session",function(){var E=new Ext.Component({renderTo:Ext.getBody()});expect(E.lookupSession()).toBe(D);E.destroy()})});describe("controller",function(){var D;beforeEach(function(){D=new Ext.app.ViewController();A({controller:D})});afterEach(function(){D=null});it("should use the controller on the rootInheritedState",function(){expect(Ext.rootInheritedState.controller).toBe(D)});it("should allow non children of the viewport to inherit the controller",function(){var E=new Ext.Component({renderTo:Ext.getBody()});expect(E.lookupController()).toBe(D);E.destroy()})})});describe("destruction",function(){it("should not pollute the rootInheritedState with a viewmodel",function(){var D=new Ext.app.ViewModel();A({viewModel:D});C.destroy();expect(Ext.rootInheritedState.viewModel).toBeUndefined()});it("should not pollute the rootInheritedState with a session",function(){var D=new Ext.data.Session();A({session:D});C.destroy();expect(Ext.rootInheritedState.session).toBeUndefined();D.destroy()});it("should not pollute the rootInheritedState with a controller",function(){var D=new Ext.app.ViewController();A({controller:D});C.destroy();expect(Ext.rootInheritedState.controller).toBeUndefined()})});describe("ARIA attributes",function(){beforeEach(function(){A()});it("should assign role=application to the document body",function(){expect(Ext.getBody().dom.getAttribute("role")).toBe("application")})});describe("scroll events on auto layout Container viewport",function(){var F=Ext.scroll.DomScroller,E=0,D=0;beforeEach(function(){if(!F.document){F.document=new F({x:true,y:true,element:document.body})}document.documentElement.style.height="500px";document.documentElement.style.overflow="auto";F.document.on("scroll",function(){D++});A({scrollable:true,style:"background-color:red",items:{xtype:"component",style:"background-color:green",height:5000,width:100}},Ext.Container);C.getScrollable().on({scroll:function(){E++}})});afterEach(function(){document.documentElement.style.height=document.documentElement.style.overflow=document.body.style.backgroundColor=""});it("should only fire one global scroll event per scroll",function(){C.scrollTo(null,500);waits(100);runs(function(){expect(F.document==null).toBe(true);expect(E).toBe(1);expect(D).toBe(0)})})});describe("scroll events on auto layout Panel Viewport",function(){var F=Ext.scroll.DomScroller,E=0,D=0;beforeEach(function(){if(!F.document){F.document=new F({x:true,y:true,element:document.body})}document.documentElement.style.height="500px";document.documentElement.style.overflow="auto";F.document.on("scroll",function(){D++});A({scrollable:true,items:{xtype:"component",height:5000,width:100}},Ext.panel.Panel);C.getScrollable().on({scroll:function(){E++}})});afterEach(function(){document.documentElement.style.height=document.documentElement.style.overflow=document.body.style.backgroundColor=""});it("should only fire one global scroll event per scroll",function(){C.scrollTo(null,500);waits(100);runs(function(){expect(F.document==null).toBe(true);expect(E).toBe(1);expect(D).toBe(0)})})});B("Global DOM scroll events on auto layout Container viewport",function(){var F=Ext.scroll.DomScroller,E=0,D=0;beforeEach(function(){if(!F.document){F.document=new F({x:true,y:true,element:document.body})}F.document.on("scroll",function(){D++});Ext.on("scroll",function(){E++});A({scrollable:true,items:{xtype:"component",height:5000,width:100}},Ext.Container)});it("should only fire one global scroll event per scroll",function(){C.scrollTo(null,500);waits(100);runs(function(){expect(F.document==null).toBe(true);expect(E).toBe(1);expect(D).toBe(0)})})});B("Global DOM scroll events on auto layout Panel Viewport",function(){var F=Ext.scroll.DomScroller,E=0,D=0;beforeEach(function(){if(!F.document){F.document=new F({x:true,y:true,element:document.body})}F.document.on("scroll",function(){D++});Ext.on("scroll",function(){E++});A({scrollable:true,items:{xtype:"component",height:5000,width:100}},Ext.panel.Panel)});it("should only fire one global scroll event per scroll",function(){C.scrollTo(null,500);waits(100);runs(function(){expect(F.document==null).toBe(true);expect(E).toBe(1);expect(D).toBe(0)})})})})