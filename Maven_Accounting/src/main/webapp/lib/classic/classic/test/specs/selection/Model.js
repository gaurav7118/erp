describe("Ext.selection.Model",function(){var O,P,J,F,A="MULTI";beforeEach(function(){O=jasmine.createSpy();Ext.define("spec.Model",{extend:"Ext.data.Model",fields:["id","name"]})});afterEach(function(){Ext.undefine("spec.Model");Ext.data.Model.schema.clear();if(P){P.clearData()}if(J){J.destroy()}J=P=null});function D(T,S){var R;P=new Ext.data.Store({model:spec.Model});if(Ext.isObject(T)){Ext.applyIf(T,{mode:F})}else{T={mode:T||F||A}}if(Ext.isArray(S)){P.loadData(S)}else{S=S||10;for(R=0;R<S;++R){P.add({id:R+1,name:"Name "+(R+1)})}}J=new Ext.selection.Model(T);J.bindStore(P,true)}function L(T){var S,R;if(arguments.length===1){if(typeof T=="number"){T=P.getAt(T)}expect(J.isSelected(T)).toBe(true)}else{for(S=0,R=arguments.length;S<R;++S){L(arguments[S])}}}function B(T){var S,R;if(arguments.length===1){if(typeof T=="number"){T=P.getAt(T)}expect(J.isSelected(T)).toBe(false)}else{for(S=0,R=arguments.length;S<R;++S){B(arguments[S])}}}function G(){expect(J.getCount()).toBe(0)}function C(R){return P.getAt(R)}function H(S,R){return P.getRange(S,R)}function I(){return false}function N(){J.select.apply(J,arguments)}function M(){J.deselect.apply(J,arguments)}function E(R){J.selectAll(R)}function K(R){J.deselectAll(R)}function Q(S,R){return P.indexOf(R)%2===0}describe("select",function(){describe("passed selection (`records` function arg)",function(){beforeEach(function(){D();spyOn(J,"doSelect")});it("should allow a number",function(){N(1);expect(J.doSelect).toHaveBeenCalled()});it("should allow a model instance",function(){N(C(2));expect(J.doSelect).toHaveBeenCalled()});it("should allow a non-empty array",function(){N(H(4,6));expect(J.doSelect).toHaveBeenCalled()});it("should not allow an empty array",function(){N([]);expect(J.doSelect).not.toHaveBeenCalled()})});describe("single",function(){beforeEach(function(){F="SINGLE";D()});it("should select a record by index",function(){N(1);L(1)});it("should select a record instance",function(){N(C(2));L(2)});it("should ignore an index not in the store",function(){N(100);G()});it("should select the first in an array",function(){N(H(4,6));L(4);B(5,6)});it("should always deselect an existing item",function(){N(1);N(2);L(2);B(1)});it("should stop selection if any deselect is vetoed",function(){N(1);J.on("beforedeselect",I);N(2);L(1);B(2)});describe("events",function(){describe("select",function(){it("should fire an event",function(){J.on("select",O);N(1);expect(O).toHaveBeenCalled()});it("should pass the selModel & the selected record",function(){J.on("select",O);N(1);expect(O.mostRecentCall.args[0]).toBe(J);expect(O.mostRecentCall.args[1]).toBe(C(1))});it("should not fire an event if suppressEvent is passed",function(){J.on("select",O);N(1,undefined,true);expect(O).not.toHaveBeenCalled()});it("should not fire the event if the record is selected",function(){N(1);J.on("select",O);N(1);expect(O).not.toHaveBeenCalled()});it("should not fire the event if beforeselect vetoes the selection",function(){J.on("select",O);J.on("beforeselect",I);N(1);expect(O).not.toHaveBeenCalled()})});describe("beforeselect",function(){it("should fire the beforeselect event",function(){J.on("beforeselect",O);N(1);expect(O).toHaveBeenCalled()});it("should pass the selModel & the record",function(){J.on("beforeselect",O);N(1);expect(O.mostRecentCall.args[0]).toBe(J);expect(O.mostRecentCall.args[1]).toBe(C(1))});it("should return false to veto the selection",function(){J.on("beforeselect",I);N(1);B(1)});it("should not fire the event if suppressEvent is passed",function(){J.on("beforeselect",O);N(1,undefined,true);expect(O).not.toHaveBeenCalled()});it("should not fire the event if the record is selected",function(){N(1);J.on("beforeselect",O);N(1);expect(O).not.toHaveBeenCalled()})});describe("selectionchange",function(){it("should fire the selection change event when an item is selected",function(){J.on("selectionchange",O);N(1);expect(O).toHaveBeenCalled()});it("should not fire if suppressEvent is passed",function(){J.on("selectionchange",O);N(1,undefined,true);expect(O).not.toHaveBeenCalled()});it("should not fire if the beforeselect event is vetoed",function(){J.on("selectionchange",O);J.on("beforeselect",I);N(1);expect(O).not.toHaveBeenCalled()});it("should not fire if the item is selected",function(){N(1);J.on("selectionchange",O);N(1);expect(O).not.toHaveBeenCalled()});it("should fire once if deselecting an existing selection",function(){N(1);J.on("selectionchange",O);N(2);expect(O.callCount).toBe(1)});it("should not fire if deselecting as part of a select and the deselect it vetoed",function(){N(1);J.on("selectionchange",O);J.on("beforedeselect",I);N(2);expect(O).not.toHaveBeenCalled()})})});it("should do nothing if locked",function(){J.setLocked(true);N(1);G()})});describe("multi",function(){beforeEach(function(){F="MULTI";D()});it("should select a record by index",function(){N(1);L(1)});it("should select a record instance",function(){N(C(2));L(2)});it("should ignore an index not in the store",function(){N(100);G()});it("should select all items in an array",function(){N(H(4,6));L(4,5,6)});it("should select a discontinuous range",function(){N([C(1),C(4),C(7)]);L(1,4,7)});describe("events",function(){describe("select",function(){it("should fire an event",function(){J.on("select",O);N(1);expect(O).toHaveBeenCalled()});it("should pass the selModel & the selected record",function(){J.on("select",O);N(1);expect(O.mostRecentCall.args[0]).toBe(J);expect(O.mostRecentCall.args[1]).toBe(C(1))});it("should fire the event for each item",function(){J.on("select",O);N(H(0,2));expect(O.calls[0].args[1]).toBe(C(0));expect(O.calls[1].args[1]).toBe(C(1));expect(O.calls[2].args[1]).toBe(C(2))});it("should not fire an event if suppressEvent is passed",function(){J.on("select",O);N(1,undefined,true);expect(O).not.toHaveBeenCalled()});it("should not fire the event if the record is selected",function(){N(1);J.on("select",O);N(1);expect(O).not.toHaveBeenCalled()});it("should fire the event only for unselected records",function(){N(H(0,3));J.on("select",O);N(H(0,5));expect(O.calls[0].args[1]).toBe(C(4));expect(O.calls[1].args[1]).toBe(C(5))})});describe("beforeselect",function(){it("should fire the beforeselect event",function(){J.on("beforeselect",O);N(1);expect(O).toHaveBeenCalled()});it("should pass the selModel & the record",function(){J.on("beforeselect",O);N(1);expect(O.mostRecentCall.args[0]).toBe(J);expect(O.mostRecentCall.args[1]).toBe(C(1))});it("should return false to veto the selection",function(){J.on("beforeselect",I);N(1);B(1)});it("should fire the event for each selection",function(){J.on("beforeselect",O);N(H(1,3));expect(O.calls[0].args[1]).toBe(C(1));expect(O.calls[1].args[1]).toBe(C(2));expect(O.calls[2].args[1]).toBe(C(3))});it("should be able to veto multiple items",function(){J.on("beforeselect",Q);N(H(0,3));L(0,2);B(1,3)});it("should not fire the event if suppressEvent is passed",function(){J.on("beforeselect",O);N(1,undefined,true);expect(O).not.toHaveBeenCalled()});it("should not fire the event if the record is selected",function(){N(1);J.on("beforeselect",O);N(1);expect(O).not.toHaveBeenCalled()});it("should not fire the event for any selected records",function(){N([C(1),C(3)]);J.on("beforeselect",O);N(H(0,3));expect(O.calls[0].args[1]).toBe(C(0));expect(O.calls[1].args[1]).toBe(C(2))})});describe("selectionchange",function(){it("should fire the selection change event when an item is selected",function(){J.on("selectionchange",O);N(1);expect(O).toHaveBeenCalled()});it("should not fire if suppressEvent is passed",function(){J.on("selectionchange",O);N(1,undefined,true);expect(O).not.toHaveBeenCalled()});it("should not fire if the beforeselect event is vetoed",function(){J.on("selectionchange",O);J.on("beforeselect",I);N(1);expect(O).not.toHaveBeenCalled()});it("should not fire if all items are selected",function(){N(H(0,2));J.on("selectionchange",O);N(H(0,2));expect(O).not.toHaveBeenCalled()});it("should fire once if deselecting an existing selection",function(){N(1);J.on("selectionchange",O);N(2);expect(O.callCount).toBe(1)});it("should fire once when selecting multiple items",function(){J.on("selectionchange",O);N(H(1,3));expect(O.callCount).toBe(1)});it("should fire once when selecting and deselecting multiple items",function(){N(H(1,3));J.on("selectionchange",O);N(H(5,7));expect(O.callCount).toBe(1)});it("should not fire if deselecting as part of a select and all deselects are vetoed",function(){N(H(0,3));J.on("selectionchange",O);J.on("beforedeselect",I);N(H(4,8));expect(O).not.toHaveBeenCalled()});it("should fire if deselecting as part of a select and any deselection occurs",function(){N(H(0,5));J.on("selectionchange",O);J.on("beforedeselect",Q);N(H(7,9));expect(O).toHaveBeenCalled()});it("should fire if the selection is a subset of an existing set",function(){E();J.on("selectionchange",O);N(H(0,3));expect(O).toHaveBeenCalled()})})});describe("keepExisting",function(){it("should remove a selection when not passing keepExisting",function(){N(1);N(2);L(2);B(1)});it("should remove all selections when not passing keepExisting",function(){N(H(0,2));N(6);L(6);B(0,1,2)});it("should keep a single selection with keepExisting: true",function(){N(1);N(H(2,4),true);L(1,2,3,4)});it("should keep multiple selections with keepExisting: true",function(){N(H(0,2));N(H(3,5),true);L(0,1,2,3,4,5)})});it("should do nothing if locked",function(){J.setLocked(true);N(1);G()})})});describe("deselect",function(){beforeEach(function(){F="MULTI";D()});it("should deselect a record by index",function(){N(1);M(1);B(1)});it("should deselect a record instance",function(){N(2);M(C(2));B(2)});it("should ignore an index not in the store",function(){M(100);G()});it("should deselect an array of records",function(){N(H(0,2));M(H(0,2));G()});it("should do nothing if the record is not selected",function(){M(0);G()});it("should stop a deselect is vetoed",function(){N(1);J.on("beforedeselect",I);M(1);L(1)});it("should stop any vetoed deselects",function(){N(H(0,3));J.on("beforedeselect",Q);M(H(0,3));B(0,2);L(1,3)});describe("events",function(){describe("beforedeselect",function(){it("should fire the event",function(){N(1);J.on("beforedeselect",O);M(1);expect(O).toHaveBeenCalled()});it("should pass the selModel & the record",function(){N(1);J.on("beforedeselect",O);M(1);expect(O.mostRecentCall.args[0]).toBe(J);expect(O.mostRecentCall.args[1]).toBe(C(1))});it("should return false to veto the deselection",function(){N(1);J.on("beforedeselect",I);M(1);L(1)});it("should fire the event for each deselection",function(){N(H(1,3));J.on("beforedeselect",O);M(H(1,3));expect(O.calls[0].args[1]).toBe(C(1));expect(O.calls[1].args[1]).toBe(C(2));expect(O.calls[2].args[1]).toBe(C(3))});it("should be able to veto multiple items",function(){N(H(0,3));J.on("beforedeselect",Q);M(H(0,3));B(0,2);L(1,3)});it("should not fire the event if suppressEvent is passed",function(){N(1);J.on("beforedeselect",O);M(1,true);expect(O).not.toHaveBeenCalled()});it("should not fire the event if the record is not selected",function(){J.on("beforedeselect",O);M(1);expect(O).not.toHaveBeenCalled()});it("should not fire the event for any deselected records",function(){N([C(1),C(3)]);J.on("beforedeselect",O);M(H(0,3));expect(O.calls[0].args[1]).toBe(C(1));expect(O.calls[1].args[1]).toBe(C(3))})});describe("deselect",function(){it("should fire an event",function(){N(1);J.on("deselect",O);M(1);expect(O).toHaveBeenCalled()});it("should pass the selModel & the selected record",function(){N(1);J.on("deselect",O);M(1);expect(O.mostRecentCall.args[0]).toBe(J);expect(O.mostRecentCall.args[1]).toBe(C(1))});it("should fire the event for each item",function(){N(H(0,2));J.on("deselect",O);M(H(0,2));expect(O.calls[0].args[1]).toBe(C(0));expect(O.calls[1].args[1]).toBe(C(1));expect(O.calls[2].args[1]).toBe(C(2))});it("should not fire an event if suppressEvent is passed",function(){N(1);J.on("deselect",O);M(1,true);expect(O).not.toHaveBeenCalled()});it("should not fire the event if the record is not selected",function(){J.on("deselect",O);M(1);expect(O).not.toHaveBeenCalled()});it("should fire the event only for selected records",function(){N(H(0,3));J.on("deselect",O);M(H(0,5));expect(O.calls[0].args[1]).toBe(C(0));expect(O.calls[1].args[1]).toBe(C(1));expect(O.calls[2].args[1]).toBe(C(2));expect(O.calls[3].args[1]).toBe(C(3))})});describe("selectionchange",function(){it("should fire the selection change event when an item is deselected",function(){N(1);J.on("selectionchange",O);M(1);expect(O).toHaveBeenCalled()});it("should not fire if suppressEvent is passed",function(){N(1);J.on("selectionchange",O);M(1,true);expect(O).not.toHaveBeenCalled()});it("should not fire if the beforedeselect event is vetoed",function(){N(1);J.on("selectionchange",O);J.on("beforedeselect",I);M(1);expect(O).not.toHaveBeenCalled()});it("should not fire if all items are deselected",function(){J.on("selectionchange",O);M(H(0,2));expect(O).not.toHaveBeenCalled()});it("should fire once when deselecting multiple items",function(){N(H(1,3));J.on("selectionchange",O);M(H(1,3));expect(O.callCount).toBe(1)})})});it("should do nothing when locked",function(){N(1);J.setLocked(true);M(1);L(1)})});describe("isSelected",function(){beforeEach(function(){D()});it("should return false when nothing is selected",function(){B(0)});it("should return false when that record is not selected",function(){N(1);B(2)});it("should return true when the record is selected",function(){N(1);L(1)});it("should return true when the index is selected",function(){N(1);expect(J.isSelected(1)).toBe(true)});it("should be up to date after a series of operations",function(){N(H(2,4));B(0);L(3);M(3);B(3);N(H(7,9));L(8);M(4);B(4)})});describe("getCount",function(){function R(S){return expect(J.getCount()).toBe(S)}beforeEach(function(){D()});it("should return 0 when nothing is selected",function(){R(0)});it("should return 1 when a single item is selected",function(){N(1);R(1)});it("should return the correct amount when multiple items are selected",function(){N(H(2,7));R(6)});it("should maintain the count during operations",function(){N(H(1,5));R(5);M(1);M(3);R(3);N(1,true);R(4);N(H(7,9),true);R(7);M(H(8,9));R(5)})});describe("hasSelection",function(){beforeEach(function(){D()});it("should return true when there is 1 selection",function(){N(1);expect(J.hasSelection()).toBe(true)});it("should return true when there is more than 1 selection",function(){N(H(2,4));expect(J.hasSelection()).toBe(true)});it("should return false when there are no selections",function(){expect(J.hasSelection()).toBe(false)})});describe("selectRange",function(){function R(U,T,S){J.selectRange(U,T,S)}beforeEach(function(){D()});it("should not create a range if we have not selected a range",function(){spyOn(J,"selectRange");J.selectWithEvent(P.getAt(4),{shiftKey:true});expect(J.selectRange).not.toHaveBeenCalled()});it("should select items in the given range",function(){R(3,7);L(3,4,5,6,7)});it("should accept a record as a start point",function(){R(C(1),4);L(1,2,3,4)});it("should accept a record as an end point",function(){R(1,C(3));L(1,2,3)});it("should limit the start to 0 if passed less than 0",function(){R(-5,3);L(0,1,2,3)});it("should limit the end to the store count if greater than the total",function(){R(6,100);L(6,7,8,9)});it("should select a single record if the start == end",function(){R(3,3);L(3)});it("should swap start/end if start > end",function(){R(5,2);L(2,3,4,5)});it("should do nothing if the model is locked",function(){J.setLocked(true);R(4,7);G()});it("should only select unselected items",function(){var S=[];N(2);J.on("select",function(U,T){S.push(T)});R(1,3);expect(S).toEqual([C(1),C(3)])});it("should fire a single selectionchange event",function(){D();N(H(0,3));J.on("selectionchange",O);R(4,7);expect(O.callCount).toBe(1)});it("should fire a selectionchange event if only deselections happen",function(){J.selectAll();J.on("selectionchange",O);R(0,3);expect(O.callCount).toBe(1)});describe("keepExisting",function(){it("should deselect other records by default",function(){N(H(0,1));R(4,7);B(0,1)});it("should keep any selections if keepExisting is passed",function(){N(H(0,1));R(4,7,true);L(0,1,4,5,6,7)});it("should allow a subset of the current selection to be selected",function(){N(H(0,3));R(0,1,true);L(0,1,2,3)})})});describe("deselectRange",function(){function R(U,T){J.selectRange(U,T)}function S(U,T){J.deselectRange(U,T)}beforeEach(function(){D()});it("should deselect items in the given range",function(){R(3,7);S(3,7);B(3,4,5,6,7)});it("should accept a record as a start point",function(){R(1,4);S(C(1),4);B(1,2,3,4)});it("should accept a record as an end point",function(){R(1,3);S(1,C(3));B(1,2,3)});it("should limit the start to 0 if passed less than 0",function(){R(0,3);S(-5,3);B(0,1,2,3)});it("should limit the end to the store count if greater than the total",function(){R(6,9);S(6,100);B(6,7,8,9)});it("should deselect a single record if the start == end",function(){N(3);S(3,3);B(3)});it("should swap start/end if start > end",function(){R(2,5);S(5,2);B(2,3,4,5)});it("should do nothing if the model is locked",function(){R(4,7);J.setLocked(true);S(4,7);L(4,5,6,7)});it("should only deselect selected items",function(){N([C(1),C(3)]);J.on("deselect",O);S(1,3);expect(O.calls[0].args[1]).toBe(C(1));expect(O.calls[1].args[1]).toBe(C(3))});it("should fire a single selectionchange event",function(){N(H(0,7));J.on("selectionchange",O);S(4,7);expect(O.callCount).toBe(1)})});describe("isRangeSelected",function(){function S(U,T){expect(J.isRangeSelected(U,T)).toBe(true)}function R(U,T){expect(J.isRangeSelected(U,T)).toBe(false)}beforeEach(function(){D()});it("should return true if all items in the range are selected",function(){N(H(3,6));S(3,6)});it("should return false if not all items in the range are selected",function(){N(1);N(3);N(4);R(1,4)});it("should accept a range where start = end",function(){N(1);S(1,1)});it("should accept a record as a start value",function(){N(H(1,4));S(C(1),4)});it("should accept a record as an end value",function(){N(H(1,4));S(1,C(4))});it("should limit the start to 0 if passed less than 0",function(){N(H(0,3));S(-5,3)});it("should limit the end to the store count if greater than the total",function(){N(H(6,9));S(6,100)})});describe("selectAll",function(){beforeEach(function(){D()});it("should do nothing when the model is locked",function(){J.setLocked(true);E();G()});it("should select all items",function(){E();L(0,1,2,3,4,5,6,7,8,9)});it("should only fire select events for unselected items",function(){N(H(1,8));J.on("select",O);E();expect(O.calls[0].args[1]).toBe(C(0));expect(O.calls[1].args[1]).toBe(C(9))});it("should fire a single selectionchange event",function(){J.on("selectionchange",O);E();expect(O.callCount).toBe(1)});it("should not fire select events if suppressEvent is passed",function(){J.on("select",O);E(true);expect(O).not.toHaveBeenCalled()});it("should not fire selectionchange if suppressEvent is passed",function(){J.on("selectionchange",O);E(true);expect(O).not.toHaveBeenCalled()});describe("event vetoing",function(){it("should only select items that were not vetoed",function(){J.on("beforeselect",Q);E();L(0,2,4,6,8);B(1,3,5,7,9)});it("should fire selectionchange once if any selections change",function(){J.on("beforeselect",Q);J.on("selectionchange",O);E();expect(O.callCount).toBe(1)});it("should not fire selectionchange if the selection did not change",function(){J.on("beforeselect",I);J.on("selectionchange",O);E();expect(O.callCount).toBe(0)})})});describe("deselectAll",function(){beforeEach(function(){D()});it("should do nothing when the model is locked",function(){E();J.setLocked(true);K();L(0,1,2,3,4,5,6,7,8,9)});it("should deselect all items",function(){E();K();G()});it("should only fire select events for selected items",function(){N([C(0),C(9)]);J.on("deselect",O);K();expect(O.calls[0].args[1]).toBe(C(0));expect(O.calls[1].args[1]).toBe(C(9))});it("should fire a single selectionchange event",function(){E();J.on("selectionchange",O);K();expect(O.callCount).toBe(1)});it("should not fire deselect events if suppressEvent is passed",function(){E();J.on("deselect",O);K(true);expect(O).not.toHaveBeenCalled()});it("should not fire selectionchange if suppressEvent is passed",function(){E();J.on("selectionchange",O);K(true);expect(O).not.toHaveBeenCalled()});describe("event vetoing",function(){it("should only deselect items that were not vetoed",function(){E();J.on("beforedeselect",Q);K();L(1,3,5,7,9);B(0,2,4,6,8)});it("should fire selectionchange once if any selections change",function(){E();J.on("beforedeselect",Q);J.on("selectionchange",O);K();expect(O.callCount).toBe(1)});it("should not fire selectionchange if the selection did not change",function(){E();J.on("beforedeselect",I);J.on("selectionchange",O);K();expect(O).not.toHaveBeenCalled()})})});describe("key navigation in SINGLE mode with allowDeselect",function(){beforeEach(function(){F="SINGLE";D()});it("should NOT deselect when uparrowing at the top",function(){J.allowDeselect=true;N(0);J.onNavigate({record:P.getAt(0),recordIndex:0,keyEvent:new Ext.event.Event({charCode:Ext.event.Event.UP})});L(0)});it("should NOT deselect when downarrowing at the bottom",function(){var R=P.getCount()-1;J.allowDeselect=true;N(R);J.onNavigate({record:P.getAt(R),recordIndex:R,keyEvent:new Ext.event.Event({charCode:Ext.event.Event.DOWN})});L(R)})});describe("selectWithEvent",function(){function S(U,V){if(typeof U==="number"){U=P.getAt(U)}J.selectWithEvent(U,V||{})}var R={shiftKey:true},T={ctrlKey:true};describe("SINGLE",function(){beforeEach(function(){F="SINGLE";D()});it("should select the item when nothing is selected",function(){S(1);L(1)});it("should overwrite an existing selection",function(){N(1);S(2);L(2);B(1)});describe("with allowDeselect",function(){it("should deselect a selected model",function(){J.allowDeselect=true;N(1);S(1);B(1)});it("should select the model if not selected",function(){J.allowDeselect=true;N(1);S(2);L(2);B(1)});describe("with toggleOnClick",function(){it("should not select the record if ctrlKey isn't pressed",function(){J.toggleOnClick=false;J.allowDeselect=true;N(1);S(1);L(1)});it("should deselect the record if ctrlKey is pressed",function(){J.toggleOnClick=false;J.allowDeselect=true;N(1);S(1,T);B(1)})})})});describe("SIMPLE",function(){beforeEach(function(){F="SIMPLE";D()});it("should select a record if none are selected",function(){S(1);L(1)});it("should deselect a record if it's selected",function(){N(1);S(1);B(1)});it("should select a new record and keep existing selections",function(){N(1);S(2);L(1,2);S(3);L(1,2,3)});it("should deselect a selected record but keep other selections",function(){N(H(1,3));S(2);B(2);L(1,3)})});describe("MULTI",function(){beforeEach(function(){F="MULTI";D()});it("should select a range if we have a selection start point and shift is pressed",function(){S(0);S(4,R);L(0,1,2,3,4)});it("should return the single selection if we have not selected a range",function(){S(3,R);L(3)});it("should deselect the record if it's selected and ctrl is pressed",function(){N(1);S(1,T);B(1)});it("should add to the selection if ctrl is pressed and the record is not selected",function(){S(1,T);L(1);S(4,T);L(1,4);S(9,T);L(1,4,9)});it("should deselect all other records if the record id selected, with no ctrl/shift",function(){N(4);S(1);L(1);B(4)});it("should add and keep to the selection if none of the above are met",function(){S(7);L(7)});it("should maintain selection with a complex sequence",function(){S(2);L(2);S(5,R);L(2,3,4,5);S(4);L(4);S(8,T);L(4,8);S(4,T);L(8);S(1);L(1)})})});describe("model id change",function(){it("should be selected when the id changes",function(){D();var R=P.getAt(3);N(R);R.set("id",100);L(R)});it("should be able to remove the selection",function(){D();var R=P.getAt(3);N(R);R.set("id",100);M(R);G()})});describe("store events",function(){beforeEach(function(){F="MULTI";D()});it("should clear selections when the store is cleared",function(){E();P.removeAll();G()});describe("store remove",function(){describe("pruneRemoved: true",function(){it("should remove a selection if it's removed from the store",function(){E();P.removeAt(0);expect(J.getCount()).toBe(9)});it("should fire the deselect event",function(){E();J.on("deselect",O);P.removeAt(0);expect(O).toHaveBeenCalled()});it("should fire the selectionchange event",function(){E();J.on("selectionchange",O);P.removeAt(0);expect(O).toHaveBeenCalled()})});describe("pruneRemoved: false",function(){beforeEach(function(){J.pruneRemoved=false});it("should not remove a selection if it's removed from the store",function(){E();P.removeAt(0);expect(J.getCount()).toBe(10)});it("should not fire the deselect event",function(){E();J.on("deselect",O);P.removeAt(0);expect(O).not.toHaveBeenCalled()});it("should not fire the selectionchange event",function(){E();J.on("selectionchange",O);P.removeAt(0);expect(O).not.toHaveBeenCalled()})})});describe("updating that triggers a sort",function(){it("should not fire any events & should remain selected",function(){P.sort("name");var R=P.first();N(R);J.on({select:O,deselect:O,selectionchange:O});R.set("name","zzzzzz");expect(O).not.toHaveBeenCalled();L(R)})});describe("insert of an existing record",function(){it("should not fire any events & should remain selected",function(){var R=P.last();N(R);J.on({select:O,deselect:O,selectionchange:O});P.insert(0,R);expect(O).not.toHaveBeenCalled();L(R)})});describe("store reload",function(){it("should retain selections",function(){N(0);var R=J.getSelection()[0];expect(R.getId()).toBe(1);P.loadData([{id:1,name:"Foo"},{id:2,name:"Bar"}]);R=J.getSelection()[0];expect(R.getId()).toBe(1);expect(R).toBe(P.getById(1));expect(J.getCount()).toBe(1)});it("should update the selected model data",function(){N(0);var R=J.getSelection()[0];expect(R.get("name")).toBe("Name 1");P.loadData([{id:1,name:"Foo"},{id:2,name:"Bar"}]);R=J.getSelection()[0];expect(R.get("name")).toBe("Foo");expect(R).toBe(P.getById(1))});it("should update the last selected",function(){N(1);var R=J.getLastSelected();expect(R.get("name")).toBe("Name 2");P.loadData([{id:1,name:"Foo"},{id:2,name:"Bar"}]);R=J.getLastSelected();expect(R.get("name")).toBe("Bar");expect(R).toBe(P.getById(2))})});describe("pruneRemoved: true",function(){it("should remove items no longer in the store",function(){N(1);P.loadData([{id:101},{id:102}]);expect(J.getSelection()).toEqual([])});it("should only remove items no longer in the store",function(){N([C(0),C(1)]);P.loadData([{id:1},{id:102}]);var R=J.getSelection();expect(R).toEqual([P.getById(1)])});it("should not fire the deselect event",function(){N(1);J.on("deselect",O);P.loadData([{id:101}]);expect(O).not.toHaveBeenCalled()});it("should fire the selectionchange event",function(){N(1);J.on("selectionchange",O);P.loadData([{id:101}]);expect(O.callCount).toBe(1)});it("should not fire selectionchange if nothing is removed",function(){N([C(0),C(1)]);J.on("selectionchange",O);P.loadData([{id:1},{id:2}]);expect(O).not.toHaveBeenCalled()})});describe("pruneRemoved: false",function(){beforeEach(function(){J.pruneRemoved=false});it("should not remove selections",function(){N(1);var R=J.getSelection()[0];P.loadData([{id:101},{id:102}]);expect(J.getSelection()).toEqual([R])});it("should not fire the deselect or selectionchange event",function(){N(1);J.on("selectionchange",O);J.on("deselect",O);P.loadData([{id:101},{id:102}]);expect(O).not.toHaveBeenCalled()})})});describe("destruction",function(){describe("during events",function(){var R,S,T;beforeEach(function(){S=jasmine.createSpy().andCallFake(function(V,U){if(P.indexOf(U)===T){J.destroy()}});R=jasmine.createSpy()});afterEach(function(){T=R=S=null});describe("with single",function(){beforeEach(function(){D("SINGLE");J.on("selectionchange",R)});describe("select",function(){it("should not cause an exception or fire the selectionchange event",function(){J.on("select",S);T=0;expect(function(){N(0)}).not.toThrow();expect(S.callCount).toBe(1);expect(R.callCount).toBe(0)});it("should not fire the select event if deselect is vetoed",function(){var U=jasmine.createSpy();N(0);J.on("deselect",S);J.on("select",U);T=0;R.reset();expect(function(){J.select(1)}).not.toThrow();expect(U).not.toHaveBeenCalled();expect(R).not.toHaveBeenCalled()})});describe("deselect",function(){it("should not cause an exception or fire the selectionchange event",function(){N(0);R.reset();J.on("deselect",S);T=0;expect(function(){J.deselect(0)}).not.toThrow();expect(S.callCount).toBe(1);expect(R).not.toHaveBeenCalled()})})});describe("with multi",function(){beforeEach(function(){D();J.on("selectionchange",R)});describe("select",function(){it("should stop firing events if destroyed on the first record",function(){J.on("select",S);T=0;expect(function(){N(H(0,4))}).not.toThrow();expect(S.callCount).toBe(1);expect(R).not.toHaveBeenCalled()});it("should stop firing events if destroyed on a middle record",function(){J.on("select",S);T=2;expect(function(){N(H(0,4))}).not.toThrow();expect(S.callCount).toBe(3);expect(R).not.toHaveBeenCalled()});it("should stop firing events if destroyed on a middle record",function(){J.on("select",S);T=4;expect(function(){N(H(0,4))}).not.toThrow();expect(S.callCount).toBe(5);expect(R).not.toHaveBeenCalled()});it("should not fire any select events if deselection is vetoed",function(){var U=jasmine.createSpy();N(H(0,2));J.on("deselect",S);J.on("select",U);T=0;R.reset();expect(function(){J.select(H(3,5))}).not.toThrow();expect(U).not.toHaveBeenCalled();expect(R).not.toHaveBeenCalled()})});describe("deselect",function(){it("should stop firing events if destroyed on the first record",function(){N(H(0,4));R.reset();J.on("deselect",S);T=0;expect(function(){M(H(0,4))}).not.toThrow();expect(S.callCount).toBe(1);expect(R).not.toHaveBeenCalled()});it("should stop firing events if destroyed on a middle record",function(){N(H(0,4));R.reset();J.on("deselect",S);T=2;expect(function(){M(H(0,4))}).not.toThrow();expect(S.callCount).toBe(3);expect(R).not.toHaveBeenCalled()});it("should stop firing events if destroyed on a middle record",function(){N(H(0,4));R.reset();J.on("deselect",S);T=4;expect(function(){M(H(0,4))}).not.toThrow();expect(S.callCount).toBe(5);expect(R).not.toHaveBeenCalled()})});describe("selectAll",function(){it("should not throw an exception or fire selectionchange if a select is vetoed",function(){J.on("select",S);T=0;expect(function(){J.selectAll()}).not.toThrow();expect(S.callCount).toBe(1);expect(R).not.toHaveBeenCalled()})});describe("deselectAll",function(){it("should not throw an exception or fire selectionchange if a deselection is vetoed",function(){J.selectAll();R.reset();J.on("deselect",S);T=0;expect(function(){J.deselectAll()}).not.toThrow();expect(S.callCount).toBe(1);expect(R).not.toHaveBeenCalled()})});describe("selectRange",function(){it("should not throw an exception or fire selectionchange if a select is vetoed",function(){J.on("select",S);T=0;expect(function(){J.selectRange(0,9)}).not.toThrow();expect(S.callCount).toBe(1);expect(R).not.toHaveBeenCalled()});it("should not throw an exception or fire selectionchange if a deselection is vetoed",function(){N(H(0,3));R.reset();J.on("deselect",S);T=0;expect(function(){J.selectRange(4,6)}).not.toThrow();expect(S.callCount).toBe(1);expect(R).not.toHaveBeenCalled()})})})})})})