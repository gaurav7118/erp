describe("Ext.slider.Multi",function(){var C=jasmine.expectAriaAttr,B,A;beforeEach(function(){A=function(D){B=new Ext.slider.Multi(Ext.apply({renderTo:Ext.getBody(),name:"test",width:219,labelWidth:0,hideEmptyLabel:false,minValue:0,maxValue:100,animate:false},D))}});afterEach(function(){if(B){B.destroy()}B=null});describe("component initialization",function(){describe("keyIncrement",function(){describe("if keyIncrement > increment",function(){it("should equal passed keyIncrement",function(){A({keyIncrement:10,increment:4});expect(B.keyIncrement).toEqual(10)})});describe("if keyIncrement < increment",function(){it("should equal passed keyIncrement",function(){A({keyIncrement:7,increment:11});expect(B.keyIncrement).toEqual(11)})})});describe("if horizontal",function(){beforeEach(function(){A()});it("should set aria-orientation attribute",function(){C(B,"aria-orientation","horizontal")})});describe("if vertical",function(){beforeEach(function(){A({vertical:true,height:214})});specFor(Ext.slider.Multi.Vertical,function(D,E){it("should override "+D+" method",function(){expect(B[D]).toBe(E)})});it("should set aria-orientation attribute",function(){C(B,"aria-orientation","vertical")})});describe("thumbs",function(){describe("if there is no value in configuration",function(){beforeEach(function(){A()});it("should create one thumb",function(){expect(B.thumbs.length).toEqual(1)});it("should set the thumb value to 0",function(){expect(B.thumbs[0].value).toEqual(0)})});describe("if there is an array of values in configuration",function(){describe("with values [0, 10, 20, 30]",function(){var D=[0,10,20,30];beforeEach(function(){A({values:D})});specFor(D,function(F,E){it("should set the thumb "+F+" value to "+E,function(){expect(B.thumbs[F].value).toEqual(E)})})})})});describe("ARIA attributes",function(){beforeEach(function(){A({value:42})});it("should set aria-valuemin",function(){C(B,"aria-valuemin","0")});it("should set aria-valuemax",function(){C(B,"aria-valuemax","100")});it("should set aria-valuenow",function(){C(B,"aria-valuenow","42")})})});describe("addThumbs",function(){beforeEach(function(){A();spyOn(B,"addThumb").andCallThrough();spyOn(Ext.slider.Thumb.prototype,"render").andCallThrough()});it("should return the thumb",function(){expect(B.addThumb(17) instanceof Ext.slider.Thumb).toBe(true)});it("should add the thumb to the slider",function(){B.addThumb(17);expect(B.thumbs.length).toEqual(2)});it("should render the thumb if slider is rendered",function(){B.addThumb(17);expect(Ext.slider.Thumb.prototype.render).toHaveBeenCalled()});it("should not render the thumb is slider isn't rendered",function(){var D;B.rendered=false;D=B.addThumb(17);expect(Ext.slider.Thumb.prototype.render).not.toHaveBeenCalled();B.rendered=true;D.render()})});(Ext.isIE9m?xdescribe:describe)("thumb slide",function(){describe("horizontal",function(){var D,F,G,E=function(H){A(Ext.apply({values:[0,60,90]},H));D=B.thumbs[0];F=B.thumbs[1];G=B.thumbs[2];spyOn(B,"fireEvent").andCallThrough()};describe("mouse events",function(){describe("on slider mousedown",function(){describe("on thumb",function(){describe("no drag (mousedown/mouseup)",function(){beforeEach(function(){E();var I=D.el.getXY();jasmine.fireMouseEvent(D.el,"mousedown",I[0],I[1]);jasmine.fireMouseEvent(D.el,"mouseup",I[0],I[1])});it("should not fire any events",function(){var I=B.fireEvent.calls,J=I.length;expect(J).toEqual(0)})});var H={};H["drag without snapping"]={config:{},expected:3};H["drag with snapping"]={config:{increment:5},expected:5};specFor(H,function(I,J){describe(I,function(){beforeEach(function(){E(J.config);var N=D.el.getXY(),M=B.innerEl,K=M.getWidth(),L=K*(B.calculateThumbPosition(J.expected-B.getValue(0))/100);jasmine.fireMouseEvent(D.el,"mousedown",N[0],N[1]);N[0]+=L;jasmine.fireMouseEvent(D.el.dom.ownerDocument,"mousemove",N[0],N[1]);jasmine.fireMouseEvent(D.el.dom.ownerDocument,"mouseup",N[0],N[1])});it("should call dragstart event",function(){expect(B.fireEvent.calls[0].args[0]).toBe("dragstart");expect(B.fireEvent.calls[0].args[1].id).toBe(B.id);expect(B.fireEvent.calls[0].args[3].el.id).toBe(D.el.id)});it("should fire beforechange event",function(){expect(B.fireEvent.calls[1].args[0]).toBe("beforechange");expect(B.fireEvent.calls[1].args[1].id).toBe(B.id);expect(B.fireEvent.calls[1].args[2]).toBe(J.expected);expect(B.fireEvent.calls[1].args[4].el.id).toBe(D.el.id)});it("should fire change event",function(){expect(B.fireEvent.calls[2].args[0]).toBe("change");expect(B.fireEvent.calls[2].args[1].id).toBe(B.id);expect(B.fireEvent.calls[2].args[2]).toBe(J.expected);expect(B.fireEvent.calls[2].args[3].el.id).toBe(D.el.id)});it("should fire the dirtychange event",function(){expect(B.fireEvent.calls[3].args[0]).toBe("dirtychange");expect(B.fireEvent.calls[3].args[1].id).toBe(B.id);expect(B.fireEvent.calls[3].args[2]).toBe(true)});it("should call drag event",function(){expect(B.fireEvent.calls[4].args[0]).toBe("drag");expect(B.fireEvent.calls[4].args[1].id).toBe(B.id);expect(B.fireEvent.calls[4].args[3].el.id).toBe(D.el.id)});it("should call dragend event",function(){expect(B.fireEvent.calls[5].args[0]).toBe("dragend");expect(B.fireEvent.calls[5].args[1].id).toBe(B.id)});it("should fire changecomplete event",function(){expect(B.fireEvent.calls[6].args[0]).toBe("changecomplete");expect(B.fireEvent.calls[6].args[1].id).toBe(B.id);expect(B.fireEvent.calls[6].args[2]).toBe(J.expected);expect(B.fireEvent.calls[6].args[3].el.id).toBe(D.el.id)})})})});describe("outside thumbs",function(){beforeEach(function(){E()});describe("if slider enabled",function(){beforeEach(function(){var H=B.innerEl.getXY();jasmine.fireMouseEvent(B.el,"click",H[0]+100,H[1]+8)});it("should fire beforechange event",function(){expect(B.fireEvent).toHaveBeenCalledWith("beforechange",B,50,60,F)});it("should fire change event",function(){expect(B.fireEvent).toHaveBeenCalledWith("change",B,50,F)});it("should fire changecomplete event",function(){expect(B.fireEvent).toHaveBeenCalledWith("changecomplete",B,50,F)})});describe("if slider disabled",function(){beforeEach(function(){B.disable();var H=B.innerEl.getXY();jasmine.fireMouseEvent(B.el,"mousedown",H[0]+10,H[1]+10)});it("should not fire any *change* events",function(){var I=B.fireEvent.calls,K=I.length,J,H;for(H=0;H<K;H++){J=I[H];expect(J.args[0].search("change")).toEqual(-1)}})})})})})});describe("vertical",function(){var D,F,G,E=function(H){A(Ext.apply({values:[0,60,90],height:214,vertical:true},H));D=B.thumbs[0];F=B.thumbs[1];G=B.thumbs[2];spyOn(B,"fireEvent").andCallThrough()};describe("mouse events",function(){describe("on slider mousedown",function(){describe("on thumb",function(){describe("no drag (mousedown/mouseup)",function(){beforeEach(function(){E();var I=D.el.getXY();jasmine.fireMouseEvent(D.el,"mousedown",I[0],I[1]-17);jasmine.fireMouseEvent(D.el,"mouseup",I[0],I[1]-17)});it("should not fire any events",function(){var I=B.fireEvent.calls,J=I.length;expect(J).toEqual(0)})});var H={};H["drag without snapping"]={config:{},expected:12};H["drag with snapping"]={config:{increment:10},expected:10};specFor(H,function(I,J){describe(I,function(){beforeEach(function(){E(J.config);var M=D.el.getXY(),L=B.innerEl,K=L.getHeight(),N=K*(B.calculateThumbPosition(B.getValue(0)-J.expected)/100);jasmine.fireMouseEvent(D.el,"mousedown",M[0],M[1]);M[1]+=N;jasmine.fireMouseEvent(D.el.dom.ownerDocument,"mousemove",M[0],M[1]);jasmine.fireMouseEvent(D.el.dom.ownerDocument,"mouseup",M[0],M[1])});it("should call dragstart event",function(){expect(B.fireEvent.calls[0].args[0]).toBe("dragstart");expect(B.fireEvent.calls[0].args[1].id).toBe(B.id);expect(B.fireEvent.calls[0].args[3].el.id).toBe(D.el.id)});it("should fire beforechange event",function(){expect(B.fireEvent.calls[1].args[0]).toBe("beforechange");expect(B.fireEvent.calls[1].args[1].id).toBe(B.id);expect(B.fireEvent.calls[1].args[2]).toBe(J.expected);expect(B.fireEvent.calls[1].args[4].el.id).toBe(D.el.id)});it("should fire change event",function(){expect(B.fireEvent.calls[2].args[0]).toBe("change");expect(B.fireEvent.calls[2].args[1].id).toBe(B.id);expect(B.fireEvent.calls[2].args[2]).toBe(J.expected);expect(B.fireEvent.calls[2].args[3].el.id).toBe(D.el.id)});it("should fire dirtychange event",function(){expect(B.fireEvent.calls[3].args[0]).toBe("dirtychange");expect(B.fireEvent.calls[3].args[1].id).toBe(B.id);expect(B.fireEvent.calls[3].args[2]).toBe(true)});it("should call drag event",function(){expect(B.fireEvent.calls[4].args[0]).toBe("drag");expect(B.fireEvent.calls[4].args[1].id).toBe(B.id);expect(B.fireEvent.calls[4].args[3].el.id).toBe(D.el.id)});it("should call dragend event",function(){expect(B.fireEvent.calls[5].args[0]).toBe("dragend");expect(B.fireEvent.calls[5].args[1].id).toBe(B.id)});it("should fire changecomplete event",function(){expect(B.fireEvent.calls[6].args[0]).toBe("changecomplete");expect(B.fireEvent.calls[6].args[1].id).toBe(B.id);expect(B.fireEvent.calls[6].args[2]).toBe(J.expected);expect(B.fireEvent.calls[6].args[3].el.id).toBe(D.el.id)})})})});describe("outside thumbs",function(){beforeEach(function(){E()});describe("if slider enabled",function(){beforeEach(function(){var H=B.innerEl.getXY(),I=Math.floor(B.innerEl.getHeight()/2);jasmine.fireMouseEvent(B.el,"click",H[0]+8,H[1]+I)});it("should fire the focus event",function(){expect(B.fireEvent.calls[0].args[0]).toBe("focus")});it("should fire the focusenter event",function(){expect(B.fireEvent.calls[1].args[0]).toBe("focusenter")});it("should fire beforechange event",function(){expect(B.fireEvent.calls[2].args[0]).toBe("beforechange");expect(B.fireEvent.calls[2].args[1].id).toBe(B.id);expect(B.fireEvent.calls[2].args[2]).toBe(50);expect(B.fireEvent.calls[2].args[3]).toBe(60);expect(B.fireEvent.calls[2].args[4].el.id).toBe(F.el.id)});it("should fire change event",function(){expect(B.fireEvent.calls[3].args[0]).toBe("change");expect(B.fireEvent.calls[3].args[1].id).toBe(B.id);expect(B.fireEvent.calls[3].args[2]).toBe(50);expect(B.fireEvent.calls[3].args[3].el.id).toBe(F.el.id)});it("should fire dirtychange event",function(){expect(B.fireEvent.calls[4].args[0]).toBe("dirtychange");expect(B.fireEvent.calls[4].args[1].id).toBe(B.id);expect(B.fireEvent.calls[4].args[2]).toBe(true)});it("should fire changecomplete event",function(){expect(B.fireEvent.calls[5].args[0]).toBe("changecomplete");expect(B.fireEvent.calls[5].args[1].id).toBe(B.id);expect(B.fireEvent.calls[5].args[2]).toBe(50);expect(B.fireEvent.calls[5].args[3].el.id).toBe(F.el.id)});it("should change the thumb value",function(){expect(F.value).toEqual(50)})});describe("if slider disabled",function(){beforeEach(function(){B.disable();var H=B.innerEl.getXY();jasmine.fireMouseEvent(B.el,"mousedown",H[0],H[1]-93)});it("should not fire any *change* events",function(){var I=B.fireEvent.calls,K=I.length,J,H;for(H=0;H<K;H++){J=I[H];expect(J.args[0].search("change")).toEqual(-1)}});it("should not change the thumb value",function(){expect(D.value).toEqual(0)})})})})})})});describe("readOnly",function(){it("should disable the thumb if configured with readOnly: true",function(){A({renderTo:Ext.getBody(),readOnly:true,value:0});expect(B.thumbs[0].disabled).toBe(true)});it("should disable all thumbs if configured with readOnly: true",function(){A({renderTo:Ext.getBody(),readOnly:true,values:[1,2,3]});expect(B.thumbs[0].disabled).toBe(true);expect(B.thumbs[1].disabled).toBe(true);expect(B.thumbs[2].disabled).toBe(true)});it("should disable thumbs if setReadOnly(true) is called after render",function(){A({renderTo:Ext.getBody(),values:[1,2,3]});B.setReadOnly(true);expect(B.thumbs[0].disabled).toBe(true);expect(B.thumbs[1].disabled).toBe(true);expect(B.thumbs[2].disabled).toBe(true)});it("should enable thumbs if setReadOnly(false) is called after render",function(){A({renderTo:Ext.getBody(),readOnly:true,values:[1,2,3]});B.setReadOnly(false);expect(B.thumbs[0].disabled).toBe(false);expect(B.thumbs[1].disabled).toBe(false);expect(B.thumbs[2].disabled).toBe(false)})});describe("snapping",function(){it("should not alter the max value when specifying an increment",function(){A({width:200,value:1000,increment:100,minValue:50,maxValue:1000,renderTo:Ext.getBody()});expect(B.maxValue).toBe(1000)})});describe("setting and getting values",function(){beforeEach(function(){A({values:[10,20,30],minValue:5,maxValue:100,decimalPrecision:2})});describe("getValue",function(){it("should return the value for the thumb at the given index",function(){expect(B.getValue(1)).toEqual(20)});it("should return an array of all thumb values if no index passed",function(){expect(B.getValue()).toEqual([10,20,30])})});describe("getValues",function(){it("should return an array of all thumb values",function(){expect(B.getValues()).toEqual([10,20,30])})});describe("getSubmitValue",function(){it("should return an array of all thumb values",function(){expect(B.getSubmitValue()).toEqual([10,20,30])});it("should return null if the field is disabled",function(){B.disable();expect(B.getSubmitValue()).toBeNull()});it("should return null if the field has submitValue:false",function(){B.submitValue=false;expect(B.getSubmitValue()).toBeNull()})});describe("setValue",function(){describe("single value",function(){it("should set the value of the thumb at the given index",function(){B.setValue(1,50);expect(B.thumbs[1].value).toEqual(50)});it("should normalize the value according to the minValue",function(){B.setValue(1,2);expect(B.thumbs[1].value).toEqual(5)});it("should normalize the value according to the maxValue",function(){B.setValue(1,200);expect(B.thumbs[1].value).toEqual(100)});it("should round the value according to the decimalPrecision",function(){B.setValue(1,20.253764);expect(B.thumbs[1].value).toEqual(20.25)});xit("should set the aria-valuenow attribute",function(){B.setValue(1,23);expect(B.inputEl.dom.getAttribute("aria-valuenow")+"").toEqual("23")});xit("should set the aria-valuetext attribute",function(){B.setValue(1,23);expect(B.inputEl.dom.getAttribute("aria-valuetext")+"").toEqual("23")});it("should fire the beforechange event",function(){var D=jasmine.createSpy("beforechange handler");B.on("beforechange",D);B.setValue(1,23);expect(D.calls[0].args[0].id).toBe(B.id);expect(D.calls[0].args[1]).toBe(23);expect(D.calls[0].args[2]).toBe(20);expect(D.calls[0].args[3].el.id).toBe(B.thumbs[1].el.id)});it("should fire the change event",function(){var D=jasmine.createSpy("change handler");B.on("change",D);B.setValue(1,23);expect(D.calls[0].args[0].id).toBe(B.id);expect(D.calls[0].args[1]).toBe(23);expect(D.calls[0].args[2].el.id).toBe(B.thumbs[1].el.id);expect(D).toHaveBeenCalledWith(B,23,B.thumbs[1])});it("should move the thumb",function(){var D=spyOn(B.thumbs[1],"move");B.setValue(1,23);expect(D).toHaveBeenCalled()});it("should not perform the change if the beforechange handler returns false",function(){var E=jasmine.createSpy("change handler"),D=spyOn(B.thumbs[1],"move");B.on("beforechange",function(){return false});B.on("change",E);B.setValue(1,23);expect(B.thumbs[1].value).toEqual(20);expect(E).not.toHaveBeenCalled();expect(D).not.toHaveBeenCalled()})});describe("multiple values",function(){it("should set the value for multiple thumbs",function(){B.setValue([40,50,60]);var D=B.thumbs;expect(D[0].value).toBe(40);expect(D[1].value).toBe(50);expect(D[2].value).toBe(60)});it("should only set the values passed",function(){B.setValue([40,50]);var D=B.thumbs;expect(D[0].value).toBe(40);expect(D[1].value).toBe(50);expect(D[2].value).toBe(30)});it("should ignore extraneous values",function(){B.setValue([40,50,60,70,80]);var D=B.thumbs;expect(D[0].value).toBe(40);expect(D[1].value).toBe(50);expect(D[2].value).toBe(60)})})});describe("reset",function(){it("should reset all values to the original value",function(){B.setValue(0,40);B.setValue(1,50);B.setValue(2,60);B.reset();expect(B.thumbs[0].value).toEqual(10);expect(B.thumbs[1].value).toEqual(20);expect(B.thumbs[2].value).toEqual(30)})});describe("dirty",function(){it("should fire the dirtychange event when the value is modified",function(){var D=0;B.on("dirtychange",function(){++D});B.setValue(0,40);expect(D).toBe(1)});it("should fire the dirtychange event when the value is reset",function(){var D=0;B.on("dirtychange",function(){++D});B.setValue(0,40);expect(D).toBe(1);B.setValue(0,10);expect(D).toBe(2)})})});describe("setMinValue/setMaxValue",function(){var D=function(){return parseFloat(B.thumbs[0].el.getStyle("left"))};describe("setMinValue",function(){it("should limit the value to the minimum",function(){A();B.setMinValue(50);B.setValue(0,25);expect(B.getValue()[0]).toBe(50)});it("should adjust existing values",function(){A();B.setValue(0,50);B.setMinValue(60);expect(B.getValue()[0]).toBe(60)});it("should update the thumb position if value is < minValue",function(){A();B.setValue(0,50);var F=D();B.setMinValue(60);var E=D();expect(E).toBeLessThan(F)});it("should update the thumb position for values > minValue",function(){A();B.setValue(0,50);var F=D();B.setMinValue(-50);var E=D();expect(E).toBeGreaterThan(F)});it("should not fire the change event if the value stays the same",function(){var E=false;A();B.setValue(0,50);B.on("change",function(){E=true});B.setMinValue(10);expect(E).toBe(false)});it("should fire the change event if the value changes",function(){var E=false;A();B.setValue(0,50);B.on("change",function(){E=true});B.setMinValue(60);expect(E).toBe(true)});it("should set aria-valuemin attribute",function(){A();B.setMinValue(42);C(B,"aria-valuemin","42")})});describe("setMaxValue",function(){it("should limit the value to the maximum",function(){A();B.setMaxValue(50);B.setValue(0,75);expect(B.getValue()[0]).toBe(50)});it("should adjust existing values",function(){A();B.setValue(0,50);B.setMaxValue(40);expect(B.getValue()[0]).toBe(40)});it("should update the thumb position if value is < minValue",function(){A();B.setValue(0,50);var F=D();B.setMaxValue(40);var E=D();expect(E).toBeGreaterThan(F)});it("should update the thumb position for values < maxValue",function(){A();B.setValue(0,50);var F=D();B.setMaxValue(150);var E=D();expect(E).toBeLessThan(F)});it("should not fire the change event if the value stays the same",function(){var E=false;A();B.setValue(0,50);B.on("change",function(){E=true});B.setMaxValue(90);expect(E).toBe(false)});it("should fire the change event if the value changes",function(){var E=false;A();B.setValue(0,50);B.on("change",function(){E=true});B.setMaxValue(40);expect(E).toBe(true)});it("should set aria-valuemax attribute",function(){A();B.setMaxValue(42);C(B,"aria-valuemax","42")})})});describe("getNearest should always keep thumbs in order",function(){it("should work when all thumbs have the max value and we click on the left",function(){A({values:[30,70],minValue:0,maxValue:100});B.setValue([100,100]);jasmine.fireMouseEvent(B.el,"click",0,0);waitsFor(function(){return B.getValue(0)===0},"Slider value incorrect")});it("should work when all thumbs have the min value and we click on the right",function(){A({values:[30,70],minValue:0,maxValue:100});B.setValue([0,0]);jasmine.fireMouseEvent(B.el,"click",B.el.getWidth(),0);waitsFor(function(){return B.getValue(1)===100},"Slider value incorrect")})});describe("configuring invalid values",function(){it("should constrain configured value within minimum",function(){A({value:-10});expect(B.getValue(0)).toBe(0)});it("should constrain configured value within maximum",function(){A({value:120});expect(B.getValue(0)).toBe(100)});it("should constrain configured value to snap points",function(){A({increment:2,value:3});expect(B.getValue(0)).toBe(4)})})})