describe("Ext.state.Stateful",function(){var D,B,C,A={};beforeEach(function(){D=Ext.state.Manager;Ext.state.Manager={get:function(E){return A[E]},set:function(F,E){A[F]=E}};B=function(E){E=E||{};C=new Ext.Component(E)}});afterEach(function(){Ext.state.Manager=D;if(C){C.destroy()}B=C=null});describe("initialization",function(){beforeEach(function(){B()});it("should not have a stateId",function(){expect(C.stateId).toBeUndefined()});it("should have an autoGenId",function(){expect(C.autoGenId).toBe(true)});it("should have stateEvents as an empty array",function(){expect(C.stateEvents).toEqual([])});it("should not be stateful",function(){expect(C.stateful).toBe(false)});it("should set the saveDelay to 100",function(){expect(C.saveDelay).toBe(100)})});describe("state restore",function(){it("should not restore state if the component isn't stateful",function(){B({stateful:false,stateId:"comp"});var G={f1:function(){},f2:function(){}};var F=spyOn(G,"f1"),E=spyOn(G,"f2");C.on({beforestaterestore:G.f1,staterestore:G.f2});C.initState();expect(F).not.toHaveBeenCalled();expect(E).not.toHaveBeenCalled()});it("should not restore state if there is no stateId or autoGenId",function(){B({stateful:true});var G={f1:function(){},f2:function(){}};var F=spyOn(G,"f1"),E=spyOn(G,"f2");C.on({beforestaterestore:G.f1,staterestore:G.f2});C.initState();expect(F).not.toHaveBeenCalled();expect(E).not.toHaveBeenCalled()});it("should not restore if there is no state data and stateful",function(){B({stateId:"comp",stateful:true});var G={f1:function(){},f2:function(){}};var F=spyOn(G,"f1"),E=spyOn(G,"f2");C.on({beforestaterestore:G.f1,staterestore:G.f2});C.initState();expect(F).not.toHaveBeenCalled();expect(E).not.toHaveBeenCalled()});it("should not restore the state if beforestaterestore returns false and stateful",function(){B({stateId:"comp",stateful:true});Ext.state.Manager.set("comp",{someVar:true});var G={f1:function(){},f2:function(){}};var F=spyOn(G,"f1").andReturn(false),E=spyOn(G,"f2");C.on({beforestaterestore:G.f1,staterestore:G.f2});C.initState();expect(F).toHaveBeenCalled();expect(E).not.toHaveBeenCalled()});it("should restore the state if all the appropriate conditions are met",function(){B({id:"comp",stateful:true});Ext.state.Manager.set("comp",{someVar:true});var G={f1:function(){},f2:function(){}};var F=spyOn(G,"f1"),E=spyOn(G,"f2");C.on({beforestaterestore:G.f1,staterestore:G.f2});C.initState();expect(F).toHaveBeenCalled();expect(E).toHaveBeenCalled();expect(C.someVar).toBe(true)})});describe("state save",function(){var E=function(){return{param:1}};it("should not save if the component isn't stateful",function(){B({stateful:false,stateId:"comp",getState:E});var H={f1:function(){},f2:function(){}};var G=spyOn(H,"f1"),F=spyOn(H,"f2");C.on({beforestatesave:H.f1,statesave:H.f2});C.saveState();expect(G).not.toHaveBeenCalled();expect(F).not.toHaveBeenCalled()});it("should not save state if there is no stateId or autoGenId",function(){B({getState:E,stateful:true});var H={f1:function(){},f2:function(){}};var G=spyOn(H,"f1"),F=spyOn(H,"f2");C.on({beforestatesave:H.f1,statesave:H.f2});C.saveState();expect(G).not.toHaveBeenCalled();expect(F).not.toHaveBeenCalled()});it("should not save the state if beforestatesave returns false",function(){B({stateId:"comp",stateful:true,getState:E});Ext.state.Manager.set("comp",{someVar:true});var H={f1:function(){},f2:function(){}};var G=spyOn(H,"f1").andReturn(false),F=spyOn(H,"f2");C.on({beforestatesave:H.f1,statesave:H.f2});C.saveState();expect(G).toHaveBeenCalled();expect(F).not.toHaveBeenCalled()});it("should save the state if all the appropriate conditions are met",function(){B({stateId:"comp",stateful:true,getState:E});var H={f1:function(){},f2:function(){}};var G=spyOn(H,"f1"),F=spyOn(H,"f2");C.on({beforestatesave:H.f1,statesave:H.f2});C.saveState();expect(G).toHaveBeenCalled();expect(F).toHaveBeenCalled();expect(Ext.state.Manager.get("comp")).toEqual({param:1})})});describe("stateEvents",function(){it("should fire the statesave event when a stateEvent is fired",function(){B({stateEvents:["enable","disable"],stateId:"comp",stateful:true,saveDelay:0});var E={fn:function(){}};spyOn(E,"fn");C.on("statesave",E.fn);C.disable();expect(E.fn).toHaveBeenCalled()});it("should not fire the statesave event when an event not in the stateEvents is fired",function(){B({stateEvents:["enable"],stateId:"comp",stateful:true,saveDelay:0});var E={fn:function(){}};spyOn(E,"fn");C.on("statesave",E.fn);C.disable();expect(E.fn).not.toHaveBeenCalled()});it("should buffer the saves",function(){B({stateEvents:["disable"],stateId:"comp",stateful:true,saveDelay:1});var F={fn:function(){}};spyOn(F,"fn");C.on("statesave",F.fn);for(var E=0;E<10;++E){C.disable()}waits(15);runs(function(){expect(F.fn.callCount).toBe(1)})})});describe("getStateId",function(){it("should return a stateId if specified",function(){B({stateId:"foo"});expect(C.getStateId()).toBe("foo")});it("should return null if the component id is auto generated (implicitID = false)",function(){B();expect(C.getStateId()).toBeNull()});it("should return the id if the id is not auto generated (implicitID = true)",function(){B({id:"bar"});expect(C.getStateId()).toBe("bar")})});xdescribe("itemState Plugin",function(){var E,F,G=function(H){H=H||{};E=new Ext.Container(H)};A={};beforeEach(function(){G({stateId:"foo",plugins:{ptype:"stateitems",id:"stateplug"},layout:{type:"vbox",align:"stretch"},saveDelay:10,defaults:{flex:1},items:[{xtype:"panel",html:"first item",itemId:"first"},{xtype:"panel",html:"second item",itemId:"second"}]})});afterEach(function(){if(E){E.destroy()}E=F=null});it("should have 'add, move and remove' in the container's stateEventsByName and be stateful with itemstate plugin specified",function(){expect(E.stateful).toBe(true);expect(E.stateEventsByName.add).toBe(1);expect(E.stateEventsByName.remove).toBe(1);expect(E.stateEventsByName.move).toBe(1);E.add({xtype:"label",text:"Newcomer"});waits(E.saveDelay+10)});it("should have item count of 3 after re-instantiation ",function(){expect(E.items.getCount()).toBe(3);E.remove("second");waits(E.saveDelay+10)});it("should have item count of 2 after 'remove' of second item after re-instantiation",function(){expect(E.items.getCount()).toBe(2);F=E.getComponent("first");expect(F&&F.isPanel).toBe(true);expect(E.move(F,1)).not.toBe(false);waits(E.saveDelay+10)});it("should see the moved 'label' to first item after re-instantiation ",function(){expect(E.items.getAt(0).getXType()).toBe("label");E.removeAll();waits(E.saveDelay+10)});it("should have NO items after re-instantiation ",function(){expect(E.items.getCount()).toBe(0)})})})