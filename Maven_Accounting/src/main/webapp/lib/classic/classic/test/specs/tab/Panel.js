describe("Ext.tab.Panel",function(){var D,C;function A(E){D=Ext.create(Ext.apply({xtype:"tabpanel",renderTo:Ext.getBody()},E));return D}function B(H,F){var G,E=[];for(G=0;G<H;G++){E[G]={xtype:"panel",html:"test "+(G+1),title:"test "+(G+1),itemId:"item"+(G+1)}}return A(Ext.apply({},F,{items:E}))}afterEach(function(){if(D){D=Ext.destroy(D)}});describe("active tab config on init",function(){it("should ignore the activeTab as a string ID if it doesn't exist",function(){B(3,{activeTab:"foo"});expect(D.getActiveTab()).toBeUndefined()});it("should ignore the activeTab as a numeric index if it doesn't exist",function(){B(3,{activeTab:4});expect(D.getActiveTab()).toBeUndefined()});it("should activate the activeTab by string ID if it does exist",function(){var F=Ext.id(null,"foo-"),E=Ext.id(null,"bar-");B(3,{items:[{id:E},{id:F}],activeTab:F});expect(D.getActiveTab().id).toEqual(F)});it("should activate the activeTab by index if it does exist",function(){var F=Ext.id(null,"foo-"),E=Ext.id(null,"bar-");B(3,{items:[{id:E},{id:F}],activeTab:1});expect(D.getActiveTab().id).toEqual(F)});it("should not set an active tab if null",function(){B(3,{activeTab:null});expect(D.getActiveTab()).toBeUndefined()});it("should set the first child tab as the active tab if none is configured",function(){B(3,{});expect(D.getActiveTab()).toBe(D.items.getAt(0))})});describe("activating other tabs on tab close",function(){var E;it("should activate the next tab",function(){B(6,{renderTo:document.body,activeTab:4});E=D.tabBar;E.closeTab(E.items.items[4]);expect(D.items.indexOf(D.getActiveTab())).toEqual(4)});it("should activate the previously active tab",function(){B(6,{renderTo:document.body,activeTab:5});E=D.tabBar;D.setActiveTab(0);D.setActiveTab(4);D.tabBar.closeTab(E.items.items[4]);expect(D.items.indexOf(D.getActiveTab())).toEqual(0)});it("should activate the new first tab when closing the first",function(){B(6,{renderTo:document.body,activeTab:0});E=D.tabBar;D.tabBar.closeTab(E.items.items[0]);expect(D.items.indexOf(D.getActiveTab())).toEqual(0)})});describe("the tabBar",function(){beforeEach(function(){C={something:"yea"}});it("should be referenced as .tabBar",function(){A();expect(D.tabBar).toBeDefined()});it("should be docked to the top",function(){A();expect(D.tabBar.dock).toEqual("top")});it("should be accessible through getTabBar()",function(){A();expect(D.getTabBar()).toBeDefined()});it("should accept additional config",function(){A({tabBar:{someConfig:"something"}});expect(D.tabBar.someConfig).toEqual("something")});xdescribe("if there were no other dockedItems",function(){beforeEach(function(){A()});it("should create the dockedItems MixedCollection",function(){expect(D.dockedItems instanceof Ext.util.MixedCollection).toBe(true)});it("should place the tabBar in the array",function(){expect(D.dockedItems.items[0]).toEqual(D.tabBar)})});describe("if there was an array of dockedItems",function(){beforeEach(function(){A({dockedItems:[{xtype:"panel",html:"test",dock:"top"}]})});it("should add the tabBar to the dockedItems",function(){expect(D.dockedItems.length).toEqual(2)});it("should place the tabBar as the last item in the array",function(){expect(D.dockedItems.items[1]).toEqual(D.tabBar)})});describe("if there was a single dockedItem, not in an array",function(){beforeEach(function(){A({dockedItems:{xtype:"panel",html:"test",dock:"top"}})});xit("should turn the dockedItems into an array",function(){expect(D.dockedItems instanceof Ext.util.MixedCollection).toBe(true)});it("should add the tabBar to the dockedItems",function(){expect(D.dockedItems.length).toEqual(2)});it("should place the tabBar as the last item in the array",function(){expect(D.dockedItems.items[1]).toEqual(D.tabBar)})});describe("non tab items",function(){it("should not cause an error",function(){expect(function(){A({tabBar:{items:[{xtype:"button",text:"Foo"}]},items:[{title:"Bar"},{title:"Baz"}]})}).not.toThrow();var E=D.tabBar.items;expect(E.getCount()).toBe(3);expect(E.last().getText()).toBe("Foo")});it("should not cause an error when using tabPosition",function(){expect(function(){A({tabPosition:"bottom",tabBar:{items:[{xtype:"button",text:"Foo"}]},items:[{title:"Bar"},{title:"Baz"}]})}).not.toThrow();var E=D.tabBar.items;expect(E.getCount()).toBe(3);expect(E.last().getText()).toBe("Foo")});it("should allow a click on a button",function(){var F=jasmine.createSpy("click"),E;runs(function(){A({tabBar:{items:[{xtype:"button",itemId:"theButton",text:"Foo"}]},items:[{title:"Bar"},{title:"Baz"}]});E=D.down("#theButton");E.on("click",F)});runs(function(){expect(function(){jasmine.fireMouseEvent(E.getEl(),"click")}).not.toThrow()});waitsFor(function(){return !!F.callCount},"spy to be called",100);runs(function(){expect(F).toHaveBeenCalled()})})})});describe("the layout",function(){beforeEach(function(){A({layout:{someConfig:"something"}})});it("should be a card layout",function(){expect(D.layout instanceof Ext.layout.CardLayout).toBe(true)});it("should accept additional config",function(){expect(D.layout.someConfig).toEqual("something")})});describe("after initialization",function(){it("should have created a tab for each child component",function(){var E=0;B(2);D.getTabBar().items.each(function(F){if(F.is("tab")){E=E+1}});expect(E).toEqual(2)});describe("activeTab config",function(){it("if none, should set the first tab as active by default",function(){B(2);expect(D.getActiveTab()).toEqual(D.items.items[0])});it("if undefined, should call setActiveTab with the correct item",function(){B(2,{activeTab:undefined});expect(D.getActiveTab()).toEqual(D.items.items[0])});it("if set, should call setActiveTab with the correct item",function(){B(2,{activeTab:1});expect(D.getActiveTab()).toEqual(D.items.items[1])});it("if null, should not call setActiveTab",function(){B(2,{activeTab:null});expect(D.getActiveTab()).toEqual(null)});it("if called when there are no tabs it should set activeTab as undefined",function(){B(0);D.setActiveTab(5);expect(D.getActiveTab()).toEqual(undefined);expect(D.activeTab).toBeUndefined()})})});describe("modifying items",function(){describe("tab configuration",function(){var E;function F(G){return D.add(Ext.apply({xtype:"panel",title:"new",html:"New Panel",itemId:"newItem"},G))}beforeEach(function(){A();E=D.getTabBar()});it("should give the tab a reference to the card",function(){var G=F(),H=E.items.first();expect(H.card).toEqual(G)});it("should give the tab a reference to the tabBar",function(){var G=F(),H=E.items.first();expect(H.tabBar).toEqual(E)});it("should not overwrite closeText with undefined",function(){var G=F().tab;expect(G.closeText).toBe("Close Tab")});it("should overwrite closeText when specified in tab config",function(){var G=F({closeText:"foo bar"}).tab;expect(G.closeText).toBe("foo bar")})});it("should append a tab to the end",function(){B(3);var G=D.add({title:"foo"}),F,E;E=D.getTabBar().items;F=E.getAt(3);expect(E.getCount()).toBe(4);expect(F.text).toBe("foo");expect(G.tab).toBe(F)});it("should insert a tab at the specified index",function(){B(3);var G=D.insert(1,{title:"foo"}),E,F;E=D.getTabBar().items;F=E.getAt(1);expect(E.getCount()).toBe(4);expect(F.text).toBe("foo");expect(G.tab).toBe(F)});it("should move the tab when using moveBefore",function(){B(5);var G=D.down("#item1"),E,F;D.moveBefore(G,D.down("#item4"));E=D.getTabBar().items;F=E.getAt(2);expect(E.getCount()).toBe(5);expect(F.text).toBe("test 1");expect(G.tab).toBe(F)});it("should move the tab when using moveAfter",function(){B(5);var G=D.down("#item1"),E,F;D.moveAfter(G,D.down("#item3"));E=D.getTabBar().items;F=E.getAt(2);expect(E.getCount()).toBe(5);expect(F.text).toBe("test 1");expect(G.tab).toBe(F)});it("should remove the tab when removing",function(){B(3);D.remove(1);var E=D.getTabBar().items;expect(E.getCount()).toBe(2);expect(E.getAt(0).text).toBe("test 1");expect(E.getAt(1).text).toBe("test 3")})});describe("setting the active tab",function(){var N=jasmine.waitForFocus,F=jasmine.pressArrowKey,I=jasmine.expectFocused,P=jasmine.pressKey,L,J,G,E,O,M,K,H;beforeEach(function(){B(4);L=D.items.getAt(0);J=D.items.getAt(1);G=D.items.getAt(2);E=D.items.getAt(3);O=L.tab;M=J.tab;K=G.tab;H=E.tab});afterEach(function(){O=M=K=H=null;L=J=G=E=null});describe("programmatically",function(){describe("parameter types",function(){it("should accept a component index",function(){D.setActiveTab(2);expect(D.getActiveTab()).toBe(G)});it("should accept an itemId",function(){D.setActiveTab("item2");expect(D.getActiveTab()).toBe(J)});it("should accept an instance",function(){D.setActiveTab("item2");expect(D.getActiveTab()).toBe(D.down("#item2"))});it("should accept an object config and add it",function(){D.setActiveTab({itemId:"item5"});expect(D.getActiveTab()).toBe(D.down("#item5"))});it("should leave the current active tab if the component is not found",function(){D.setActiveTab(9);expect(D.getActiveTab()).toBe(L)})});describe("return value",function(){it("should return the current tab if the component could not be found",function(){expect(D.setActiveTab(9)).toBe(L)});it("should return the same tab if setting the current tab active",function(){expect(D.setActiveTab(L)).toBe(L)});it("should return the current tab if the tab change is vetoed",function(){D.on("beforetabchange",function(){return false});expect(D.setActiveTab(G)).toBe(L)});it("should return the new active item",function(){expect(D.setActiveTab(E)).toBe(E)});it("should return a newly added item",function(){var Q=D.setActiveTab({itemId:"item5"});expect(Q).toBe(D.down("#item5"))})});describe("events",function(){var R,Q;beforeEach(function(){R=jasmine.createSpy();Q=jasmine.createSpy();D.on("beforetabchange",R);D.on("tabchange",Q)});afterEach(function(){R=Q=null});describe("when the tab cannot be found",function(){it("should not fire beforetabchange or tabchange",function(){D.setActiveTab(9);expect(R).not.toHaveBeenCalled();expect(Q).not.toHaveBeenCalled()})});describe("when setting the same tab",function(){it("should not fire beforetabchange or tabchange",function(){D.setActiveTab(L);expect(R).not.toHaveBeenCalled();expect(Q).not.toHaveBeenCalled()})});describe("when setting a new (existing) tab",function(){it("should fire beforetabchange and pass the tabpanel, new tab & old tab",function(){D.setActiveTab(J);expect(R.callCount).toBe(1);var S=R.mostRecentCall.args;expect(S[0]).toBe(D);expect(S[1]).toBe(J);expect(S[2]).toBe(L)});it("should not modify the activeTab if beforetabchange returns false",function(){R.andReturn(false);D.setActiveTab(J);expect(Q).not.toHaveBeenCalled();expect(D.getActiveTab()).toBe(L)});it("should fire the tabchange event and pass the tabpanel, new tab & old tab",function(){D.setActiveTab(G);expect(Q.callCount).toBe(1);var S=Q.mostRecentCall.args;expect(S[0]).toBe(D);expect(S[1]).toBe(G);expect(S[2]).toBe(L)})});describe("when setting a new (config) tab",function(){it("should pass the new item instance",function(){D.setActiveTab({itemId:"item5"});var S=D.down("#item5");expect(R.mostRecentCall.args[1]).toBe(S);expect(Q.mostRecentCall.args[1]).toBe(S)})});describe("tab visibility",function(){it("should not have the new tab visible when beforetabchange fires",function(){var S,T;R.andCallFake(function(){S=J.isVisible();T=D.getTabBar().activeTab});D.setActiveTab(J);expect(S).toBe(false);expect(T).toBe(L.tab)});it("should have the new tab visible when tabchange fires",function(){var S,T;Q.andCallFake(function(){S=J.isVisible();T=D.getTabBar().activeTab});D.setActiveTab(J);expect(S).toBe(true);expect(T).toBe(J.tab)})});it("should not affect layouts if beforetabchange is vetoed",function(){var S=new Ext.Component({renderTo:Ext.getBody(),width:50,height:50});D.on("beforetabchange",function(){S.setSize(100,100);return false});D.setActiveTab(J);expect(S.getWidth()).toBe(100);expect(S.getHeight()).toBe(100);S.destroy()})});describe("tab bar",function(){var Q;beforeEach(function(){Q=D.getTabBar()});afterEach(function(){Q=null});it("should set the active item on the tab bar",function(){D.setActiveTab(J);expect(Q.activeTab).toBe(J.tab)});it("should not modify the tab bar item if the item cannot be found",function(){D.setActiveTab(9);expect(Q.activeTab).toBe(L.tab)});it("should set the active item when adding a new item",function(){D.setActiveTab({itemId:"item5"});expect(Q.activeTab).toBe(D.down("#item5").tab)});it("should not modify the tab bar item when beforetabchange returns false",function(){D.on("beforetabchange",function(){return false});D.setActiveTab(G);expect(Q.activeTab).toBe(L.tab)})})});describe("via the ui",function(){function U(V){runs(function(){var W=V.tab.getEl().dom;jasmine.fireMouseEvent(W,"click")});jasmine.waitAWhile()}function T(V){runs(function(){var W=D.getActiveTab();expect(W).toBe(V)})}var S,R;beforeEach(function(){S=jasmine.createSpy().andReturn(true);R=jasmine.createSpy();D.on("beforetabchange",S);D.on("tabchange",R)});afterEach(function(){S=R=null});describe("mouse",function(){describe("interaction",function(){it("should set the active tab",function(){U(J);N(M);T(J)});it("should not set the active tab if the beforetabchange event returns false",function(){runs(function(){S.andReturn(false)});U(G);T(L)});it("should not set the active tab if the tab is disabled",function(){J.setDisabled(true);U(J);T(L)})});describe("focus handling",function(){describe("during tab activate event",function(){var W,V,X;beforeEach(function(){V=jasmine.createSpy("tab focus");X=jasmine.createSpy("textfield focus");W=G.add({xtype:"textfield",listeners:{focus:X}});G.on("activate",function(){jasmine.waitAWhile();runs(function(){K.getFocusEl().on("focus",V);W.focus()})})});it("should not force focus back to the tab",function(){U(G);waitForSpy(X);jasmine.waitAWhile();runs(function(){expect(V).not.toHaveBeenCalled()})})})});describe("events",function(){it("should fire no events if clicking on the active tab",function(){U(L);N(O);runs(function(){expect(S).not.toHaveBeenCalled();expect(R).not.toHaveBeenCalled()})});it("should fire the beforetabchange event, passing the tab panel, new tab & old tab",function(){U(J);N(M);runs(function(){expect(S.callCount).toBe(1);var V=S.mostRecentCall.args;expect(V[0]).toBe(D);expect(V[1]).toBe(J);expect(V[2]).toBe(L)})});it("should fire the tabchange event, passing the tab panel, new tab & old tab",function(){U(J);N(M);runs(function(){expect(R.callCount).toBe(1);var V=R.mostRecentCall.args;expect(V[0]).toBe(D);expect(V[1]).toBe(J);expect(V[2]).toBe(L)})});it("should not fire the tabchange event if beforetabchange returns false",function(){U(J);N(M);runs(function(){S.andReturn(false);R=jasmine.createSpy()});U(G);N(K);runs(function(){expect(R).not.toHaveBeenCalled()})})})});var Q=(Ext.isMac&&(Ext.isGecko||Ext.isSafari)?xdescribe:describe);Q("keys",function(){describe("arrows",function(){it("should go right from 1 to 2",function(){F(O,"right");T(J)});it("should loop over right from 4 to 1",function(){F(H,"right");T(L)});it("should go left from 2 to 1",function(){F(M,"left");T(L)});it("should loop over left to 4 from 1",function(){F(O,"left");T(E)})});describe("Space/Enter",function(){it("should activate card on Space key",function(){P(M,"space");T(J)});it("should activate card on Enter key",function(){P(K,"enter");T(G)})});describe("activation",function(){describe("activateOnFocus == true (default)",function(){beforeEach(function(){F(O,"right")});it("should focus navigated-to tab",function(){I(M)});it("should activate navigated-to item",function(){T(J)});it("should set active flag on navigated-to tab",function(){runs(function(){expect(O.active).toBeFalsy();expect(M.active).toBe(true)})});it("should not attempt to activate a child that is not a Tab",function(){var V;runs(function(){V=new Ext.button.Button({text:"foo",activate:jasmine.createSpy("activate")});D.getTabBar().insert(2,V)});F(M,"right");runs(function(){N(V)});runs(function(){expect(V.activate).not.toHaveBeenCalled()})})});describe("activateOnFocus == false",function(){beforeEach(function(){runs(function(){D.getTabBar().setActivateOnFocus(false)});F(O,"right")});it("should focus navigated-to tab",function(){I(M)});it("should not activate navigated-to item",function(){T(L)});it("should not set active flag on navigated-to tab",function(){runs(function(){expect(O.active).toBe(true);expect(M.active).toBeFalsy()})})})});describe("events",function(){beforeEach(function(){U(J);N(M)});describe("beforetabchange",function(){beforeEach(function(){F(M,"right");N(K)});it("should fire the event",function(){runs(function(){expect(S.callCount).toBe(2)})});it("should pass the tab panel, new and old tab",function(){runs(function(){var V=S.mostRecentCall.args;expect(V[0]).toBe(D);expect(V[1]).toBe(G);expect(V[2]).toBe(J)})})});describe("tabchange",function(){beforeEach(function(){F(M,"left");N(O)});it("should fire the event",function(){runs(function(){expect(R.callCount).toBe(2)})});it("should pass the tab panel, new and old tab",function(){runs(function(){var V=R.mostRecentCall.args;expect(V[0]).toBe(D);expect(V[1]).toBe(L);expect(V[2]).toBe(J)})})});describe("canceling beforetabchange",function(){beforeEach(function(){S.andReturn(false);R=jasmine.createSpy();F(M,"right");N(K)});it("should move focus to tab3",function(){I(K)});it("should not fire tabchange event",function(){expect(R).not.toHaveBeenCalled()})});describe("focusing non-Tab children",function(){var W,V,X;beforeEach(function(){runs(function(){W=new Ext.button.Button({text:"foo"});D.getTabBar().insert(2,W);V=S.callCount;X=R.callCount});F(M,"right");runs(function(){N(W)})});it("should not fire beforetabchange event",function(){expect(S.callCount).toBe(V)});it("should not fire tabchange event",function(){expect(R.callCount).toBe(X)})})})})})});describe("removing child components",function(){it("should remove the corresponding tab from the tabBar",function(){B(2);var G=D.items.last(),E=D.getTabBar(),F=E.items.length;D.remove(G);expect(E.items.length).toEqual(F-1)});describe("if the removed child is the currently active tab",function(){var F,E,G;describe("and there is at least one tab after it",function(){beforeEach(function(){B(3,{renderTo:document.body,activeTab:1});F=D.items.first();E=D.items.getAt(1);G=D.items.last()});it("should activate the next tab",function(){D.remove(E);expect(D.getActiveTab().title).toEqual(G.title)})});describe("and there is no tab before it but at least one after it",function(){beforeEach(function(){B(2,{renderTo:document.body,activeTab:0});F=D.items.items[0];E=D.items.items[1]});it("should activate the next tab",function(){D.remove(F);expect(D.getActiveTab().title).toEqual(E.title)})});describe("and there are no other tabs",function(){beforeEach(function(){B(1);F=D.items.first()});it("should not activate any other tabs",function(){D.remove(F);expect(D.getActiveTab()).toBeUndefined()})})})});describe("AutoSizing",function(){beforeEach(function(){A({width:600,items:[{title:"200 hi",height:200},{title:"400 hi",height:400}],renderTo:document.body})});it("should activate the first tab, and size to accommodate it",function(){expect(D.body.getViewSize().height).toBe(200)});it("should activate the second tab, and size to accommodate it",function(){D.setActiveTab(1);expect(D.body.getViewSize().height).toBe(400)})});xdescribe("TabPanel's minTabWidth/maxTabWidth",function(){it("Should create a single tab with width of 200",function(){A({renderTo:document.body,minTabWidth:200,items:{title:"Short"}});expect(D.down("tab").getWidth()).toBe(200)});it("Should create a single tab with width of 20",function(){A({renderTo:document.body,maxTabWidth:20,items:{title:"A very long title, but the tab must only be 20 wide"}});expect(D.down("tab").getWidth()).toBe(20)})});describe("ui",function(){it("should use the TabPanel's ui as the default UI for the Tab Bar and Tab",function(){A({renderTo:undefined,ui:"foo",items:[{title:"A"}]});expect(D.tabBar.ui).toBe("foo");expect(D.items.getAt(0).tab.ui).toBe("foo")});it("should use the Tab Bar's ui as the default UI for Tabs",function(){A({renderTo:undefined,ui:"foo",tabBar:{ui:"bar"},items:[{title:"A"}]});expect(D.tabBar.ui).toBe("bar");expect(D.items.getAt(0).tab.ui).toBe("bar")});it("should allow the tab to override the default UI",function(){A({renderTo:undefined,ui:"foo",tabBar:{ui:"bar"},items:[{title:"A",tabConfig:{ui:"baz"}}]});expect(D.tabBar.ui).toBe("bar");expect(D.items.getAt(0).tab.ui).toBe("baz")})});describe("bind",function(){it("should be able to bind the tab title when the view model is on the tab panel",function(){A({renderTo:Ext.getBody(),viewModel:{data:{tab1:"Foo",tab2:"Bar"}},items:[{bind:"{tab1}"},{bind:"{tab2}"}]});D.getViewModel().notify();var E=D.getTabBar();expect(E.items.first().getText()).toBe("Foo");expect(E.items.last().getText()).toBe("Bar")});it("should be able to bind the tab title when the view model is on the tab item",function(){A({renderTo:Ext.getBody(),items:[{bind:"{title}",viewModel:{data:{title:"Foo"}}},{bind:"{title}",viewModel:{data:{title:"Bar"}}}]});var E=D.getTabBar();D.items.first().getViewModel().notify();D.items.last().getViewModel().notify();expect(E.items.first().getText()).toBe("Foo");expect(E.items.last().getText()).toBe("Bar")});it("should not instance a view model inside an inactive tab when binding the title to a view model on the tab",function(){A({renderTo:Ext.getBody(),items:[{title:"Foo"},{bind:"{title}",viewModel:{data:{title:"Bar"}},items:{xtype:"component",viewModel:{data:{}}}}]});var E=D.items.last();E.getViewModel().notify();expect(E.items.first().getConfig("viewModel",true).isViewModel).not.toBe(true)})});describe("removeAll",function(){it("should not activate any items",function(){var E=jasmine.createSpy();D=new Ext.tab.Panel({renderTo:Ext.getBody(),items:[{title:"Item 1"},{title:"Item 2",listeners:{activate:E}},{title:"Item 3",listeners:{activate:E}}]});D.removeAll();expect(E).not.toHaveBeenCalled()});it("should not render any items during destroy",function(){var E=jasmine.createSpy();D=new Ext.tab.Panel({renderTo:Ext.getBody(),items:[{title:"Item 1"},{title:"Item 2",listeners:{afterrender:E}},{title:"Item 3",listeners:{afterrender:E}}]});D.removeAll();expect(E).not.toHaveBeenCalled()})});describe("cleanup",function(){it("should leave no orphans",function(){var E=Ext.ComponentManager.getCount();D=new Ext.tab.Panel({renderTo:Ext.getBody(),items:[{title:"Item 1",closable:true},{title:"Item 2",closable:true},{title:"Item 3",closable:true}]});D.destroy();expect(Ext.ComponentManager.getCount()).toBe(E)});it("should not activate any items during destroy",function(){var E=jasmine.createSpy();D=new Ext.tab.Panel({renderTo:Ext.getBody(),items:[{title:"Item 1"},{title:"Item 2",listeners:{activate:E}},{title:"Item 3",listeners:{activate:E}}]});D.destroy();expect(E).not.toHaveBeenCalled()});it("should not render any items during destroy",function(){var E=jasmine.createSpy();D=new Ext.tab.Panel({renderTo:Ext.getBody(),items:[{title:"Item 1"},{title:"Item 2",listeners:{afterrender:E}},{title:"Item 3",listeners:{afterrender:E}}]});D.destroy();expect(E).not.toHaveBeenCalled()})});describe("Loader",function(){var E;function F(H){E=A(Ext.apply({renderTo:document.body,deferredRender:false,items:[{title:"Tab 1"},{title:"Tab 2"}],loader:{url:"url",renderer:"component"}},H||{}))}function G(I,H){Ext.Ajax.mockComplete({status:H||200,responseText:I||"response"})}beforeEach(function(){MockAjaxManager.addMethods()});afterEach(function(){E.destroy();E=null;MockAjaxManager.removeMethods()});it("should add to the number of tabs",function(){F();D.loader.load();G("[{title: 'Tab 3'}, {title: 'Tab 4'}]");expect(D.tabBar.items.length).toEqual(4)});describe("setActiveTab",function(){describe("pre-existing tabs",function(){it("should not call setActiveTab",function(){F();spyOn(D,"setActiveTab");D.loader.load();G("[{title: 'Tab 3'}, {title: 'Tab 4'}]");expect(D.setActiveTab).wasNotCalled()});it("should not call setActiveTab when activeItem is null",function(){F({activeTab:null});spyOn(D,"setActiveTab");D.loader.load();G("[{title: 'Tab 3'}, {title: 'Tab 4'}]");expect(D.setActiveTab).wasNotCalled()})});describe("no pre-existing tabs",function(){it("should call setActiveTab",function(){F({items:null});spyOn(D,"setActiveTab");D.loader.load();G("[{title: 'Tab 1'}, {title: 'Tab 2'}]");expect(D.tabBar.items.length).toEqual(2);expect(D.setActiveTab).toHaveBeenCalled()});it("should not call setActiveTab when activeItem is null",function(){F({activeTab:null,items:null});spyOn(D,"setActiveTab");D.loader.load();G("[{title: 'Tab 3'}, {title: 'Tab 4'}]");expect(D.setActiveTab).wasNotCalled()})});describe("during a pending load",function(){beforeEach(function(){F({items:null});D.setActiveTab(1)});it("should not set the activeTab as null",function(){expect(D.getActiveTab()).not.toBeNull();D.loader.load();G("[{title: 'Tab 1'}, {title: 'Tab 2'}]")});it("should set the activeTab as undefined",function(){expect(D.getActiveTab()).toBeUndefined();D.loader.load();G("[{title: 'Tab 1'}, {title: 'Tab 2'}]")});it("should set a default tab as active when load returns",function(){D.loader.load();G("[{title: 'Tab 1'}, {title: 'Tab 2'}]");expect(D.getActiveTab()).toBeDefined()})})});describe("loading new tabs",function(){it("should not set an active item when activeItem is null (pre-existing tabs)",function(){F({activeTab:null});D.loader.load();G("[{title: 'Tab 3'}, {title: 'Tab 4'}]");expect(D.layout.getActiveItem()===null).toBe(true)});it("should not set an active item when activeItem is null (no pre-existing tabs)",function(){F({activeTab:null,items:null});D.loader.load();G("[{title: 'Tab 1'}, {title: 'Tab 2'}]");expect(D.layout.getActiveItem()===null).toBe(true)})});describe("tabchange event",function(){var H=false;afterEach(function(){H=false});describe("pre-existing tabs",function(){it("should not fire",function(){F();D.on("tabchange",function(){H=true},this);D.loader.load();G("[{title: 'Tab 3'}, {title: 'Tab 4'}]");expect(H).toBe(false)});it("should not fire when activeItem is null",function(){F({activeTab:null});D.on("tabchange",function(){H=true},this);D.loader.load();G("[{title: 'Tab 3'}, {title: 'Tab 4'}]");expect(H).toBe(false)})});describe("no pre-existing tabs",function(){it("should fire",function(){F({items:null});D.on("tabchange",function(){H=true},this);D.loader.load();G("[{title: 'Tab 1'}, {title: 'Tab 2'}]");expect(D.tabBar.items.length).toEqual(2);expect(H).toBe(true)});it("should not fire when activeItem is null",function(){F({activeTab:null,items:null});D.on("tabchange",function(){H=true},this);D.loader.load();G("[{title: 'Tab 3'}, {title: 'Tab 4'}]");expect(H).toBe(false)})})})});describe("tabRotation",function(){it("should not override the rotation config of indiviual tabs",function(){A({tabRotation:2,items:[{tabConfig:{rotation:0}}]});expect(D.tabBar.items.getAt(0).rotation).toBe(0)});it("should not override the rotation config of indiviual tabs, when tabPosition is configured",function(){A({tabPosition:"right",items:[{tabConfig:{rotation:0}}]});expect(D.tabBar.items.getAt(0).rotation).toBe(0)});it("should allow rotation to be configured on the tabBar",function(){B(1,{tabBar:{tabRotation:2}});expect(D.tabBar.items.getAt(0).rotation).toBe(2)});it("should pass configured tabRotation on to the tabs",function(){B(1,{tabRotation:2});expect(D.tabBar.items.getAt(0).rotation).toBe(2)});describe("default behavior",function(){it("should not have rotation classes for tabPosition:top",function(){B(1);expect(D.tabBar.items.getAt(0).el).not.toHaveCls("x-tab-rotate-left");expect(D.tabBar.items.getAt(0).el).not.toHaveCls("x-tab-rotate-right")});it("should default to 0 for tabPosition:bottom",function(){B(1,{tabPosition:"bottom"});expect(D.tabBar.items.getAt(0).el).not.toHaveCls("x-tab-rotate-left");expect(D.tabBar.items.getAt(0).el).not.toHaveCls("x-tab-rotate-right")});it("should have right rotation cls for tabPosition:right",function(){B(1,{tabPosition:"right"});expect(D.tabBar.items.getAt(0).el).not.toHaveCls("x-tab-rotate-left");expect(D.tabBar.items.getAt(0).el).toHaveCls("x-tab-rotate-right")});it("should have left rotation cls for tabPosition:left",function(){B(1,{tabPosition:"left"});expect(D.tabBar.items.getAt(0).el).toHaveCls("x-tab-rotate-left");expect(D.tabBar.items.getAt(0).el).not.toHaveCls("x-tab-rotate-right")})})});describe("tabBarHeaderPosition",function(){it("should render the tabBar as a docked item if tabBarHeaderPosition is unspecified",function(){B(1);expect(D.getDockedItems()[0]).toBe(D.tabBar)});it("should render the tabBar as a header item if tabBarHeaderPosition is specified",function(){B(1,{tabBarHeaderPosition:0});expect(D.getDockedItems().length).toBe(1);expect(D.getDockedItems()[0]).toBe(D.header);expect(D.tabBar.ownerCt).toBe(D.header)});it("should render the tabBar before the title",function(){B(1,{ariaRole:"tabpanel",title:"Foo",tabBarHeaderPosition:0});expect(D.getDockedItems().length).toBe(1);expect(D.getDockedItems()[0]).toBe(D.header);expect(D.tabBar.ownerCt).toBe(D.header);expect(D.header.items.getAt(0)).toBe(D.tabBar);expect(D.header.items.getAt(1)).toBe(D.header.getTitle())});it("should render the tabBar after the title",function(){B(1,{ariaRole:"tabpanel",title:"Foo",tabBarHeaderPosition:1});expect(D.getDockedItems().length).toBe(1);expect(D.getDockedItems()[0]).toBe(D.header);expect(D.tabBar.ownerCt).toBe(D.header);expect(D.header.items.getAt(0)).toBe(D.header.getTitle());expect(D.header.items.getAt(1)).toBe(D.tabBar)});it("should default the tabBar's 'dock' config to 'top' when inside a top header",function(){B(1,{tabBarHeaderPosition:0});expect(D.tabBar.dock).toBe("top")});it("should default the tabBar's 'dock' config to 'right' when inside a right header",function(){B(1,{headerPosition:"right",tabBarHeaderPosition:0});expect(D.tabBar.dock).toBe("right")});it("should default the tabBar's 'dock' config to 'bottom' when inside a bottom header",function(){B(1,{headerPosition:"bottom",tabBarHeaderPosition:0});expect(D.tabBar.dock).toBe("bottom")});it("should default the tabBar's 'dock' config to 'left' when inside a left header",function(){B(1,{headerPosition:"left",tabBarHeaderPosition:0});expect(D.tabBar.dock).toBe("left")});it("should render the tabBar after any existing header items",function(){B(1,{header:{items:[{xtype:"button",text:"hi"}]},tabBarHeaderPosition:0});expect(D.header.items.getAt(0) instanceof Ext.button.Button).toBe(true);expect(D.header.items.getAt(1)).toBe(D.tabBar)});it("should not mutate the header config",function(){var E={title:"Foo",items:[{xtype:"button",text:"hi"}]};B(1,{header:E,tabBarHeaderPosition:1});expect(E.items.length).toBe(1);expect(D.header.items.getCount()).toBe(3)})});describe("tabPosition",function(){it("should dock the tabBar to the top when tabPosition is 'top'",function(){B(1);expect(D.tabBar.dock).toBe("top")});it("should dock the tabBar to the right when tabPosition is 'right'",function(){B(1,{tabPosition:"right"});expect(D.tabBar.dock).toBe("right")});it("should dock the tabBar to the bottom when tabPosition is 'bottom'",function(){B(1,{tabPosition:"bottom"});expect(D.tabBar.dock).toBe("bottom")});it("should dock the tabBar to the left when tabPosition is 'left'",function(){B(1,{tabPosition:"left"});expect(D.tabBar.dock).toBe("left")});it("should ignore tabPosition when tabBarHeaderPosition is specified",function(){B(1,{tabPosition:"left",headerPosition:"bottom",tabBarHeaderPosition:0});expect(D.tabBar.dock).toBe("bottom")});it("should set tabPosition after rendering",function(){B(1);D.setTabPosition("left");expect(D.tabBar.dock).toBe("left")});it("should not allow setting of tabPosition after rendering if tabBarHeaderPosition was specified",function(){B(1,{headerPosition:"bottom",tabBarHeaderPosition:0});D.setTabPosition("left");expect(D.tabBar.dock).toBe("bottom")})});describe("ARIA",function(){var H=jasmine.expectAriaAttr,E=jasmine.expectNoAriaAttr,G,F,J,I;beforeEach(function(){B(2);J=D.items.getAt(0);I=D.items.getAt(1);G=J.tab;F=I.tab});afterEach(function(){G=F=J=I=null});describe("attributes",function(){it("should have tab role on the tab",function(){H(G,"role","tab")});it("should have tabpanel role on the card",function(){H(J,"role","tabpanel")});it("should have aria-selected='true' on tab1",function(){H(G,"aria-selected","true")});it("should have aria-selected='false' on tab2",function(){H(F,"aria-selected","false")});it("should have aria-labelledby on card1",function(){H(J,"aria-labelledby",G.id)});it("should not have aria-label on card1",function(){E(J,"aria-label")});it("should have aria-expanded='true' on card1",function(){H(J,"aria-expanded","true")});it("should have aria-hidden='false' on card1",function(){H(J,"aria-hidden","false")});describe("dynamically added panel",function(){var K,L;beforeEach(function(){L=D.add(new Ext.panel.Panel({title:'<span style="background-color: red">foo</span>',html:"blerg"}));K=L.tab;D.setActiveTab(2)});afterEach(function(){K=L=null});it("should have correct aria-labelledby on card1",function(){H(L,"aria-labelledby",K.id)});it("should not have aria-label on card1",function(){E(L,"aria-label")})});describe("dynamically moved panel",function(){var L,K;beforeEach(function(){L=new Ext.tab.Panel({renderTo:Ext.getBody()});K=G.id;D.remove(J,false);L.add(J);G=J.tab});afterEach(function(){L.destroy();L=K=null});it("should have new tab id on card1",function(){expect(G.id).not.toBe(K)});it("should have correct aria-labelledby on card1",function(){H(J,"aria-labelledby",G.id)});it("should not have aria-label on card1",function(){E(J,"aria-label")})})});describe("tab switching",function(){beforeEach(function(){D.setActiveTab(1)});describe("aria-selected",function(){it("should be true on tab2",function(){H(F,"aria-selected","true")});it("should be false on tab1",function(){H(G,"aria-selected","false")})});describe("aria-expanded",function(){it("should be true on card2",function(){H(I,"aria-expanded","true")});it("should be false on card1",function(){H(J,"aria-expanded","false")})});describe("aria-hidden",function(){it("should be true on card1",function(){H(J,"aria-hidden","true")});it("should be false on card2",function(){H(I,"aria-hidden","false")})})})})})