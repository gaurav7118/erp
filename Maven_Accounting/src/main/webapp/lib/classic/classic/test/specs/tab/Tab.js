describe("Ext.tab.Tab",function(){var C,B;function A(D){if(C){C.destroy();C=null}C=new Ext.tab.Tab(Ext.apply({},D));return C}beforeEach(function(){B={title:"Some title",iconCls:"some-iconCls"}});afterEach(function(){Ext.destroy(C,B);C=B=null});describe("if a card is specified",function(){beforeEach(function(){spyOn(Ext.tab.Tab.prototype,"setCard").andCallThrough()});it("should call setCard during initialization",function(){A({card:B});expect(Ext.tab.Tab.prototype.setCard).toHaveBeenCalledWith(B)})});describe("setting a card",function(){beforeEach(function(){C=A();spyOn(C,"setText").andReturn(true);spyOn(C,"setIconCls").andReturn(true);C.setCard(B)});it("should set the title text",function(){expect(C.setText).toHaveBeenCalledWith(B.title)});it("should set the icon class",function(){expect(C.setIconCls).toHaveBeenCalledWith(B.iconCls)});describe("setting the title text",function(){describe("if the tab has a specific title",function(){beforeEach(function(){C=A({title:"Specific title"});spyOn(C,"setText").andReturn(true)});it("should retain that title",function(){C.setCard(B);expect(C.setText).toHaveBeenCalledWith("Specific title")})});describe("if the tab does not have a specific title",function(){it("should use the title of the new card",function(){C.setCard(B);expect(C.setText).toHaveBeenCalledWith(B.title)})})});describe("setting the icon class",function(){describe("if the tab has a specific title",function(){beforeEach(function(){C=A({iconCls:"specificCls"});spyOn(C,"setIconCls").andReturn(true)});it("should retain that title",function(){C.setCard(B);expect(C.setIconCls).toHaveBeenCalledWith("specificCls")})});describe("if the tab does not have a specific title",function(){it("should use the title of the new card",function(){C.setCard(B);expect(C.setIconCls).toHaveBeenCalledWith(B.iconCls)})})})});describe("activating",function(){beforeEach(function(){C=A()});it("should set active to true",function(){C.activate();expect(C.active).toBe(true)});it("should fire the activate event with a reference to the tab",function(){var D;C.on("activate",function(){D=arguments},this);C.activate();expect(D[0]).toEqual(C)})});describe("deactivating",function(){beforeEach(function(){C=A()});it("should set active to false",function(){C.deactivate();expect(C.active).toBe(false)});xit("should remove the activeCls from the element",function(){C.deactivate();expect(C.additionalCls).not.toContain(C.activeCls)});it("should fire the deactivate event with a reference to the tab",function(){var D;C.on("deactivate",function(){D=arguments},this);C.deactivate();expect(D[0]).toEqual(C)})});describe("setting closable",function(){beforeEach(function(){C=A()});it("should set closable to true",function(){delete C.closable;C.setClosable(true);expect(C.closable).toBe(true)})});describe("setting not closable",function(){beforeEach(function(){C=A()});it("should set closable to false",function(){delete C.closable;C.setClosable(false);expect(C.closable).toBe(false)});xit("should remove the closable class from the tab",function(){C.setClosable(false);expect(C.additionalCls).not.toContain(C.closableCls)})});describe("when the close button is clicked",function(){beforeEach(function(){C=A()});it("should fire the beforeclose event",function(){var D=false;C.on("beforeclose",function(){D=true},this);C.onCloseClick();expect(D).toBe(true)});it("should fire a close event",function(){var D=false;C.on("close",function(){D=true},this);C.onCloseClick();expect(D).toBe(true)});describe("if a listener returned false to beforeclose",function(){beforeEach(function(){C.on("beforeclose",function(){return false},this)});it("should not fire a close event",function(){var D=false;C.on("close",function(){D=true},this);C.onCloseClick();expect(D).toBe(false)})});describe("if there is a configured tabBar",function(){var D;beforeEach(function(){D={closeTab:jasmine.createSpy()};C=A({tabBar:D})});it("should call the tabBar's closeTab function",function(){C.onCloseClick();expect(D.closeTab).toHaveBeenCalledWith(C)})})});describe("keyboard interaction",function(){var D,F,E,G;beforeEach(function(){A({renderTo:undefined});D=spyOn(C,"onEnterKey").andCallThrough();F=spyOn(C,"onDeleteKey").andCallThrough();E=spyOn(C,"onCloseClick").andCallThrough();G=jasmine.createSpy("onClick");C.tabBar={onClick:G,closeTab:Ext.emptyFn};C.render(Ext.getBody())});afterEach(function(){C.tabBar=null;D=F=E=G=null});describe("Space key",function(){beforeEach(function(){jasmine.pressKey(C.el,"space");waitForSpy(D)});it("should call tabBar.onClick",function(){expect(G).toHaveBeenCalled()});it("should stop the keydown event",function(){var H=D.mostRecentCall.args;expect(H[0].isStopped).toBe(true)});it("should return false to stop Event propagation loop",function(){expect(D.mostRecentCall.result).toBe(false)})});describe("Enter key",function(){beforeEach(function(){jasmine.pressKey(C.el,"enter");waitForSpy(D)});it("should call tabBar.onClick",function(){expect(G).toHaveBeenCalled()});it("should stop the keydown event",function(){var H=D.mostRecentCall.args;expect(H[0].isStopped).toBe(true)});it("should return false to stop Event propagation loop",function(){expect(D.mostRecentCall.result).toBe(false)})});describe("Delete key",function(){beforeEach(function(){jasmine.pressKey(C.el,"delete");waitForSpy(F)});it("should call onCloseClick",function(){expect(E).toHaveBeenCalled()});it("should stop the keydown event",function(){var H=F.mostRecentCall.args;expect(H[0].isStopped).toBe(true)});it("should return false to stop Event propagation loop",function(){expect(F.mostRecentCall.result).toBe(false)})})})})