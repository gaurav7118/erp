describe("Ext.tip.QuickTip",function(){var E,D;function A(F){E=Ext.getBody().insertHtml("beforeEnd",'<a href="#" '+F+">x</a>",true)}function B(){jasmine.fireMouseEvent(E,"mouseover",E.getX(),E.getY())}function C(F){D=new Ext.tip.QuickTip(Ext.apply({},F,{showDelay:1}))}afterEach(function(){if(E){E.destroy()}if(D){D.destroy()}});describe("element attributes",function(){function F(G){runs(function(){A(G);C();B()});waitsFor(function(){return D.isVisible()},"QuickTip never showed")}it("should display a tooltip containing the ext:qtip attribute's value",function(){F('data-qtip="tip text"');runs(function(){expect(D.layout.innerCt.dom).hasHTML("tip text")})});it("should display the ext:qtitle attribute as the tooltip title",function(){F('data-qtip="tip text" data-qtitle="tip title"');runs(function(){expect(D.title).toEqual("tip title")})});it("should use the ext:qwidth attribute as the tooltip width",function(){F('data-qtip="tip text" data-qwidth="234"');runs(function(){expect(D.el.getWidth()).toEqual(234)})});it("should add the ext:qclass attribute as a className on the tooltip element",function(){F('data-qtip="tip text" data-qclass="test-class"');runs(function(){expect(D.el.hasCls("test-class")).toBeTruthy()})});it("should add the ext:qshowDelay attribute on the tooltip element",function(){F('data-qtip="tip text" data-qshowDelay="300"');runs(function(){expect(D.activeTarget.el.getAttribute("data-qshowDelay")).toBe("300")})});it("should use the ext:hide attribute as an autoHide switch for the tooltip",function(){F('data-qtip="tip text" data-hide="user"');runs(function(){expect(D.autoHide).toBeFalsy()})})});describe("register",function(){function F(I,H,G){runs(function(){A(G||"");C({maxWidth:400});D.register(Ext.apply({},I||{},{target:H||E,text:"tip text"}));B()});waitsFor(function(){return D.isVisible()},"QuickTip never showed")}it("should use the 'target' parameter as a new target",function(){F()});it("should show when registering tooltip as string",function(){F({text:"test text"},"foobar",'id="foobar"');runs(function(){expect(D.isVisible()).toBe(true)})});it("should show when registering tooltip as HTMLElement",function(){F({text:"test text"},E.dom);runs(function(){expect(D.isVisible()).toBe(true)})});it("should show when registering tooltip as Ext.Element",function(){F({text:"test text"});runs(function(){expect(D.isVisible()).toBe(true)})});it("should use the 'text' parameter as the tooltip content",function(){F({text:"test text"});runs(function(){expect(D.layout.innerCt.dom).hasHTML("test text")})});it("should use the 'title' parameter as the tooltip title",function(){F({title:"tip title"});runs(function(){expect(D.title).toEqual("tip title")})});it("should use the 'width' parameter as the tooltip width",function(){F({width:345});runs(function(){expect(D.el.getWidth()).toEqual(345)})});it("should add the 'cls' parameter to the tooltip element's className",function(){F({cls:"test-class-name"});runs(function(){expect(D.el.hasCls("test-class-name")).toBeTruthy()})});it("should use the 'autoHide' parameter as the tooltip's autoHide value",function(){F({autoHide:false});runs(function(){expect(D.autoHide).toBeFalsy()})});it("should use the 'dismissDelay' parameter for the tooltip's dismissDelay value",function(){F({dismissDelay:123});runs(function(){expect(D.dismissDelay).toEqual(123)})});it("should accept a dismissDelay of 0",function(){F({dismissDelay:0});runs(function(){expect(D.dismissDelay).toEqual(0)})});it("should default to the main tip dismissDelay",function(){F({dismissDelay:null});runs(function(){expect(D.dismissDelay).toEqual(5000)})})});describe("unregister",function(){it("should unregister the element as a target",function(){A("");C();var F=spyOn(D,"delayShow");D.register({target:E,text:"tip text"});D.unregister(E);B();expect(F).not.toHaveBeenCalled()})});describe("interceptTitles",function(){it("should remove the title attribute from the target",function(){var F;A('title="tip text"');F=E.dom;expect(F.getAttribute("title")).toBe("tip text");C({interceptTitles:true});B();expect(F.getAttribute("title")).toBe(null)});it("should use the title attribute value for the quicktip",function(){A('title="tip text"');C({interceptTitles:true});B();waitsFor(function(){return D.isVisible()},"QuickTip never showed",2000);runs(function(){expect(D.layout.innerCt.dom).hasHTML("tip text")})});it("should use the title attribute value rather than the qtip value when both are set",function(){A('data-qtip="foobar" title="tip text"');C({interceptTitles:true});B();waitsFor(function(){return D.isVisible()},"QuickTip never showed",2000);runs(function(){expect(D.layout.innerCt.dom).hasHTML("tip text")})})});describe("size",function(){it("should size to the title of the title is larger than the text",function(){var F=Ext.htmlEncode('<div style="width: 50px;">a</div>'),G=Ext.htmlEncode('<div style="width: 100px;">a</div>');runs(function(){A('data-qtip="'+F+'" data-qtitle="'+G+'"');C();B()});waitsFor(function(){return D.isVisible()},"QuickTip never showed");runs(function(){expect(D.getWidth()).toBeGreaterThan(100)})})})})