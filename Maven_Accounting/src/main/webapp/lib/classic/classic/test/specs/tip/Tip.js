describe("Ext.tip.Tip",function(){var B;function A(C){B=new Ext.tip.Tip(C||{});return B}afterEach(function(){if(B){B.destroy();B=null}});describe("basic",function(){it("should extend Ext.Panel",function(){A();expect(B instanceof Ext.Panel).toBeTruthy()});it("should be automatically rendered when shown",function(){A().show();expect(B.el).toBeDefined();expect(B.el.dom.parentNode).toBe(Ext.getBody().dom)});it("should be given a class of 'x-tip' on its main element",function(){A().show();expect(B.el).toHaveCls("x-tip")})});describe("showAt",function(){it("should show the tip at the specified x/y coordinates",function(){var C=A();C.showAt([100,50]);var D=C.el.getXY();expect(D[0]).toEqual(100);expect(D[1]).toEqual(50)});it("should not be constrained to the viewport if constrainPosition config is false",function(){var C=Ext.Element.getViewportWidth(),D=Ext.Element.getViewportHeight();A({constrainPosition:false}).showAt([C+1,D+1]);var E=B.el.getXY();expect(E[0]).toEqual(C+1);expect(E[1]).toEqual(D+1)});it("should be constrained to the viewport by default",function(){var C=Ext.Element.getViewportWidth(),D=Ext.Element.getViewportHeight();A({}).showAt([C+1,D+1]);var E=B.el.getXY();expect(E[0]).not.toEqual(C+1);expect(E[1]).not.toEqual(D+1)})});describe("draggable",function(){it("should attach a Ext.util.ComponentDragger instance to the tip",function(){A({draggable:true,title:"Title"}).showAt(0,0);expect(B.dd).toBeDefined();expect(B.dd instanceof Ext.util.ComponentDragger).toBeTruthy();expect(B.dd.handle.id).toEqual(B.header.el.id)});it("should add an 'x-header-draggable' class to the tip header",function(){A({draggable:true,title:"Title"}).show();expect(B.header.el).toHaveCls("x-header-draggable")})});describe("closable",function(){it("should not have a close button by default",function(){A().show();expect(B.header).not.toBeDefined()});it("should add a close button when 'closable' config is true",function(){A({closable:true}).show();expect(B.header).toBeDefined();expect(B.header.items.findBy(function(C){return C.toolEl&&C.type==="close"})).not.toBeNull()});it("should give the main tip element a class of 'x-tip-closable'",function(){A({closable:true}).show();expect(B.el).toHaveCls("x-tip-closable")})});describe("title",function(){it("should have no title by default",function(){A().show();expect(B.header).not.toBeDefined()});it("should display a configured title as header text",function(){A({title:"Tip Title"}).show();expect(B.header.getTitle().textEl.dom).hasHTML("Tip Title")})});xdescribe("content",function(){it("should display the configured html value",function(){A({html:"Tip Body Text"}).show();expect(B.body.dom).hasHTML("Tip Body Text")})});xdescribe("widths",function(){it("should allow setting an explicit width",function(){A({width:200}).show();expect(B.el.getWidth()).toEqual(200)});it("should default to automatic width",function(){A({html:'<div style="width: 200px;">x</div>'}).show();expect(B.body.getWidth(true)+B.body.getBorderWidth("lr")).toEqual(200)});it("should constrain the automatic width to at or above the configured minWidth",function(){A({html:'<div style="width: 20px;">x</div>',minWidth:60}).show();expect(B.el.getWidth()).toEqual(B.minWidth)});it("should constrain the automatic width to at or below the configured maxWidth",function(){A({html:'<div style="width: 2000px;">x</div>'}).show();expect(B.el.getWidth()).toEqual(B.maxWidth)})});describe("layout",function(){it("should shrinkwrap width when html is set after initial layout",function(){A().show();B.setHtml('<div style="height:100px;width:200px;"></div>');expect(B.getWidth()).toBe(212)})})})