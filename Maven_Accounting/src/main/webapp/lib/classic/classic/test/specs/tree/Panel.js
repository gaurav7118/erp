describe("Ext.tree.Panel",function(){var A=Ext.define(null,{extend:"Ext.data.TreeModel",fields:["id","text","secondaryId"],proxy:{type:"memory"}}),K,F,D,I,G,B,J=true,H=Ext.data.TreeStore.prototype.load,E;function C(M,L,O){var P={fn:O||Ext.emptyFn},N=spyOn(P,"fn");M.addListener(L,P.fn);return N}beforeEach(function(){E=Ext.data.TreeStore.prototype.load=function(){H.apply(this,arguments);if(J){this.flushLoad.apply(this,arguments)}return this};MockAjaxManager.addMethods();I=[{id:"A",text:"A",secondaryId:"AA",children:[{id:"B",text:"B",secondaryId:"BB",children:[{id:"C",text:"C",secondaryId:"C",leaf:true},{id:"D",text:"D",secondaryId:"D",leaf:true}]},{id:"E",text:"E",secondaryId:"EE",leaf:true},{id:"F",text:"F",secondaryId:"FF",children:[{id:"G",text:"G",secondaryId:"GG",children:[{id:"H",text:"H",secondaryId:"HH",leaf:true}]}]}]},{id:"I",text:"I",secondaryId:"II",children:[{id:"J",text:"J",secondaryId:"JJ",children:[{id:"K",text:"K",secondaryId:"KK",leaf:true}]},{id:"L",text:"L",secondaryId:"LL",leaf:true}]},{id:"M",text:"M",secondaryId:"MM",children:[{id:"N",text:"N",secondaryId:"NN",leaf:true}]}];D=function(N,M,O,L){M=M||{};Ext.applyIf(M,{animate:false,renderTo:Ext.getBody(),viewConfig:{loadMask:false},store:G=new Ext.data.TreeStore(Ext.apply({model:A,root:Ext.apply({secondaryId:"root",id:"root",text:"Root",children:N},L)},O))});K=new Ext.tree.Panel(M);F=K.view;B=K.getRootNode()}});afterEach(function(){Ext.data.TreeStore.prototype.load=H;Ext.destroy(K);K=D=null;MockAjaxManager.removeMethods()});describe("Checkbox tree nodes",function(){var N,L,O,M;beforeEach(function(){N=null;D(I,{listeners:{checkchange:function(P){N=P}}});G.getRoot().cascadeBy(function(P){P.set("checked",false)});K.expandAll();L=G.getAt(1);O=Ext.get(F.getRow(L));M=O.down(F.checkboxSelector,true)});it("should fire the checkchange event",function(){jasmine.fireMouseEvent(M,"click");expect(N).toBe(L);expect(L.get("checked")).toBe(true)});it("should veto checkchange if false is returned from a beforecheckchange handler",function(){K.on({beforecheckchange:function(P){N=P;return false}});jasmine.fireMouseEvent(M,"click");expect(N).toBe(L);expect(L.get("checked")).toBe(false)})});describe("record with a cls field",function(){it("should set the cls on the TD element",function(){D(I);var L=spyOn(F,"createRowElement").andCallThrough();B.childNodes[0].set("cls","foobar");B.expand();expect(F.all.item(1).down("td").hasCls("foobar")).toBe(true);B.childNodes[0].set("cls","bletch");expect(L).toHaveBeenCalled();expect(F.all.item(1).down("td").hasCls("foobar")).toBe(false);expect(F.all.item(1).down("td").hasCls("bletch")).toBe(true)})});describe("construction",function(){it("should render while the root node is loading",function(){expect(function(){D(null,null,{proxy:{type:"ajax",url:"fake"}},{expanded:true})}).not.toThrow()})});describe("setting the root node",function(){it("should set the nodes correctly when setting root on the store",function(){D();G.setRootNode({expanded:true,children:I});expect(G.getCount()).toBe(4);expect(G.getAt(0).id).toBe("root");expect(G.getAt(1).id).toBe("A");expect(G.getAt(2).id).toBe("I");expect(G.getAt(3).id).toBe("M")});it("should set the nodes correctly when setting root on the tree",function(){D();K.setRootNode({expanded:true,children:I});expect(G.getCount()).toBe(4);expect(G.getAt(0).id).toBe("root");expect(G.getAt(1).id).toBe("A");expect(G.getAt(2).id).toBe("I");expect(G.getAt(3).id).toBe("M")});it("should preserve events",function(){var M=jasmine.createSpy();var L={expanded:true,children:I};D();K.on({beforeitemcollapse:M,beforeitemexpand:M,itemcollapse:M,itemexpand:M});K.setRootNode(L);B=K.getRootNode();B.childNodes[0].expand();B.childNodes[0].collapse();expect(M.callCount).toBe(4)})});describe("Binding to a TreeStore",function(){it("should bind to a TreeStore in the ViewModel",function(){K=new Ext.panel.Panel({renderTo:document.body,height:400,width:600,layout:"fit",viewModel:{stores:{nodes:{type:"tree",model:A,root:{secondaryId:"root",id:"root",text:"Root",children:I,expanded:true}}}},items:{xtype:"treepanel",bind:{store:"{nodes}"}}});var L=K.down("treepanel");expect(L.getRootNode().childNodes.length).toBe(0);waitsFor(function(){return L.getRootNode().childNodes.length===3&&L.getView().all.getCount()===4},"new store to be bound to")})});describe("mouse click to expand/collapse",function(){function L(M,N){D(N,{animate:M},null,{expanded:true})}describe("Clicking on expander",function(){it("should not fire a click event on click of expnder",function(){L(true,[{id:"a",expanded:false,children:[{id:"b"}]}]);var Q=jasmine.createSpy(),O=jasmine.createSpy(),P=jasmine.createSpy(),N=K.getHeight(),R=F.getCell(1,0).down(F.expanderSelector),M=new Ext.grid.CellContext(F).setPosition(1,0);K.on("expand",function(){expect(Ext.Element.getActiveElement).toBe(M.getCell(true))});K.on("afteritemexpand",Q);K.on("cellclick",O);K.on("itemclick",P);jasmine.fireMouseEvent(R,"click");waitsFor(function(){return Q.callCount>0});runs(function(){expect(K.getHeight()).toBeGreaterThan(N);expect(O).not.toHaveBeenCalled();expect(P).not.toHaveBeenCalled()})})})});describe("auto height with expand/collapse",function(){function L(M,N){D(N,{animate:M},null,{expanded:true})}describe("with animate: true",function(){it("should update the height after an expand animation",function(){L(true,[{id:"a",expanded:false,children:[{id:"b"}]}]);var N=jasmine.createSpy(),M=K.getHeight();K.on("afteritemexpand",N);K.getRootNode().firstChild.expand();waitsFor(function(){return N.callCount>0});runs(function(){expect(K.getHeight()).toBeGreaterThan(M)})});it("should update the height after a collapse animation",function(){L(true,[{id:"a",expanded:true,children:[{id:"b"}]}]);var N=jasmine.createSpy(),M=K.getHeight();K.on("afteritemcollapse",N);K.getRootNode().firstChild.collapse();waitsFor(function(){return N.callCount>0});runs(function(){expect(K.getHeight()).toBeLessThan(M)})})});describe("with animate: false",function(){it("should update the height after an expand animation",function(){L(false,[{id:"a",expanded:false,children:[{id:"b"}]}]);var M=K.getHeight();K.getRootNode().firstChild.expand();expect(K.getHeight()).toBeGreaterThan(M)});it("should update the height after a collapse animation",function(){L(false,[{id:"a",expanded:true,children:[{id:"b"}]}]);var M=K.getHeight();K.getRootNode().firstChild.collapse();expect(K.getHeight()).toBeLessThan(M)})})});describe("collapsing when collapse zone overflows the rendered zone",function(){beforeEach(function(){for(var L=0;L<100;L++){I[0].children.push({text:"Extra node "+L,id:"extra-node-"+L})}I[0].expanded=true;D(I,{renderTo:document.body,height:200,width:400},null,{expanded:true})});it("should collapse correctly, leaving the collapsee's siblings visible",function(){K.getRootNode().childNodes[0].collapse();expect(K.getView().all.getCount()).toBe(4)})});describe("sortchange",function(){it("should only fire a single sortchange event",function(){var L=jasmine.createSpy();D(I,{columns:[{xtype:"treecolumn",dataIndex:"text"}]});K.on("sortchange",L);jasmine.fireMouseEvent(K.down("treecolumn").titleEl.dom,"click",20,10);expect(L).toHaveBeenCalled();expect(L.callCount).toBe(1)})});describe("reconfigure",function(){beforeEach(function(){D(I,{rootVisible:false,singleExpand:true,height:200},null,{expanded:true})});it("should preserve singleExpand:true",function(){B.childNodes[0].expand();expect(B.childNodes[0].isExpanded()).toBe(true);B.childNodes[1].expand();expect(B.childNodes[0].isExpanded()).toBe(false);expect(B.childNodes[1].isExpanded()).toBe(true);expect(G.getCount()).toBe(5);var L=new Ext.data.TreeStore({model:A,root:{secondaryId:"root",id:"root",text:"Root",children:I,expanded:true}});K.reconfigure(L);B=L.getRootNode();expect(L.getCount()).toBe(3);B.childNodes[0].expand();expect(B.childNodes[0].isExpanded()).toBe(true);B.childNodes[1].expand();expect(B.childNodes[0].isExpanded()).toBe(false);expect(B.childNodes[1].isExpanded()).toBe(true);expect(L.getCount()).toBe(5)})});describe("autoexpand collapsed ancestors",function(){beforeEach(function(){D(I,{height:250})});it("should expand the whole path down to 'G' as well as 'G'",function(){expect(G.getCount()).toBe(1);K.getStore().getNodeById("G").expand();expect(G.getCount()).toBe(9)})});describe("removeAll",function(){beforeEach(function(){D(I,{height:100})});it("should only refresh once when removeAll called",function(){var M=K.getStore().getNodeById("A"),L;expect(K.view.refreshCounter).toBe(1);K.expandAll();L=F.bufferedRenderer&&F.all.getCount>=F.bufferedRenderer.viewSize;expect(F.refreshCounter).toBe(2);M.removeAll();expect(F.refreshCounter).toBe(L?3:2)})});describe("Getting owner tree",function(){beforeEach(function(){D(I)});it("should find the owner tree",function(){var L=K.getStore(),M=L.getNodeById("H");expect(M.getOwnerTree()).toBe(K)})});describe("updating row attributes",function(){beforeEach(function(){D(I)});it("should set the data-qtip attribute",function(){var M=K.view.getRow(B),L=M.className;B.set("qtip","Foo");expect(M.className).toBe(L);expect(M.getAttribute("data-qtip")).toBe("Foo")});it("should add the expanded class on expand",function(){var M=K.getView(),L=M.expandedCls;expect(M.getRow(B)).not.toHaveCls(L);B.expand();expect(M.getRow(B)).toHaveCls(L)});it("should remove the expanded class on collapse",function(){var M=K.getView(),L=M.expandedCls;B.expand();expect(M.getRow(B)).toHaveCls(L);B.collapse();expect(M.getRow(B)).not.toHaveCls(L)})});describe("expandPath/selectPath",function(){describe("expandPath",function(){var M,L;beforeEach(function(){M=false;D(I)});describe("callbacks",function(){describe("empty path",function(){it("should fire the callback with success false & a null node",function(){K.expandPath("",null,null,function(O,N){M=O;L=N});expect(M).toBe(false);expect(L).toBeNull()});it("should default the scope to the tree",function(){var N;K.expandPath("",null,null,function(){N=this});expect(N).toBe(K)});it("should use any specified scope",function(){var O={},N;K.expandPath("",null,null,function(){N=this},O);expect(N).toBe(O)})});describe("invalid root",function(){it("should fire the callback with success false & the root",function(){K.expandPath("/NOTROOT",null,null,function(O,N){M=O;L=N});expect(M).toBe(false);expect(L).toBe(K.getRootNode())});it("should default the scope to the tree",function(){var N;K.expandPath("/NOTROOT",null,null,function(){N=this});expect(N).toBe(K)});it("should use any specified scope",function(){var O={},N;K.expandPath("/NOTROOT",null,null,function(){N=this},O);expect(N).toBe(O)})});describe("fully successful expand",function(){describe("Old API",function(){it("should fire the callback with success true and the last node",function(){K.expandPath("/root/A/B",null,null,function(O,N){M=O;L=N});expect(M).toBe(true);expect(L).toBe(K.getStore().getNodeById("B"));expect(F.all.getCount()).toBe(9)});it("should default the scope to the tree",function(){var N;K.expandPath("/root/A/B",null,null,function(P,O){N=this});expect(N).toBe(K)});it("should use any specified scope",function(){var O={},N;K.expandPath("/root/A/B",null,null,function(Q,P){N=this},O);expect(N).toBe(O)});it("should be able to start from any existing node",function(){K.expandPath("G",null,null,function(O,N){M=O;L=N});expect(M).toBe(true);expect(L).toBe(G.getNodeById("G"));expect(F.all.getCount()).toBe(9)})});describe("New API",function(){var N;it("should fire the callback with success true and the last node",function(){K.expandPath("/root/A/B",{callback:function(Q,O,P){M=Q;L=O;N=P},select:true});waitsFor(function(){return M});runs(function(){expect(L).toBe(K.getStore().getNodeById("B"));expect(F.all.getCount()).toBe(9);expect(K.getSelectionModel().getSelection()[0]).toBe(L);expect(N).toBe(F.getNode(K.getStore().getNodeById("B")))})});it("should default the scope to the tree",function(){var O;K.expandPath("/root/A/B",{callback:function(Q,P){O=this}});waitsFor(function(){return O===K})});it("should use any specified scope",function(){var P={},O;K.expandPath("/root/A/B",{callback:function(R,Q){O=this},scope:P});waitsFor(function(){return O===P})});it("should be able to start from any existing node",function(){K.expandPath("G",{callback:function(P,O){M=P;L=O}});waitsFor(function(){return M});runs(function(){expect(L).toBe(G.getNodeById("G"));expect(F.all.getCount()).toBe(9)})})})});describe("partial expand",function(){it("should fire the callback with success false and the last successful node",function(){K.expandPath("/root/A/FAKE",null,null,function(O,N){M=O;L=N});expect(M).toBe(false);expect(L).toBe(K.getStore().getById("A"))});it("should default the scope to the tree",function(){var N;K.expandPath("/root/A/FAKE",null,null,function(){N=this});expect(N).toBe(K)});it("should use any specified scope",function(){var O={},N;K.expandPath("/root/A/FAKE",null,null,function(){N=this},O);expect(N).toBe(O)})})});describe("custom field",function(){it("should default the field to the idProperty",function(){K.expandPath("/root/M");expect(K.getStore().getById("M").isExpanded()).toBe(true)});it("should accept a custom field from the model",function(){K.expandPath("/root/AA/FF/GG","secondaryId");expect(K.getStore().getById("G").isExpanded()).toBe(true)})});describe("custom separator",function(){it("should default the separator to /",function(){K.expandPath("/root/A");expect(K.getStore().getById("A").isExpanded()).toBe(true)});it("should accept a custom separator",function(){K.expandPath("|root|A|B",null,"|");expect(K.getStore().getById("B").isExpanded()).toBe(true)})});describe("various path tests",function(){it("should expand the root node",function(){K.expandPath("/root");expect(K.getRootNode().isExpanded()).toBe(true)});it("should fire success if the ending node is a leaf",function(){K.expandPath("/root/I/L",null,null,function(O,N){M=O;L=N});expect(M).toBe(true);expect(L).toBe(K.getStore().getById("L"))})})});describe("selectPath",function(){var L=function(P){var O=K.getStore().getById(P);return K.getSelectionModel().isSelected(O)};var N,M;beforeEach(function(){N=false;D(I)});describe("callbacks",function(){describe("empty path",function(){it("should fire the callback with success false & a null node",function(){var P,O;K.selectPath("",null,null,function(R,Q){P=R;O=Q});expect(P).toBe(false);expect(O).toBeNull()});it("should default the scope to the tree",function(){var O;K.selectPath("",null,null,function(){O=this});expect(O).toBe(K)});it("should use any specified scope",function(){var P={},O;K.selectPath("",null,null,function(){O=this},P);expect(O).toBe(P)})});describe("root",function(){it("should fire the callback with success true & the root",function(){var P,O;K.selectPath("/root",null,null,function(R,Q){P=R;O=Q});expect(P).toBe(true);expect(O).toBe(K.getRootNode())});it("should default the scope to the tree",function(){var O;K.selectPath("/root",null,null,function(){O=this});expect(O).toBe(K)});it("should use any specified scope",function(){var P={},O;K.selectPath("/root",null,null,function(){O=this},P);expect(O).toBe(P)})});describe("fully successful expand",function(){it("should fire the callback with success true and the last node",function(){var P,O;K.selectPath("/root/A/B",null,null,function(R,Q){P=R;O=Q});expect(P).toBe(true);expect(O).toBe(K.getStore().getById("B"))});it("should default the scope to the tree",function(){var O;K.selectPath("/root/A/B",null,null,function(){O=this});expect(O).toBe(K)});it("should use any specified scope",function(){var P={},O;K.selectPath("/root/A/B",null,null,function(){O=this},P);expect(O).toBe(P)})});describe("partial expand",function(){it("should fire the callback with success false and the last successful node",function(){var P,O;K.selectPath("/root/A/FAKE",null,null,function(R,Q){P=R;O=Q});expect(P).toBe(false);expect(O).toBe(K.getStore().getById("A"))});it("should default the scope to the tree",function(){var O;K.selectPath("/root/A/FAKE",null,null,function(){O=this});expect(O).toBe(K)});it("should use any specified scope",function(){var P={},O;K.selectPath("/root/A/FAKE",null,null,function(){O=this},P);expect(O).toBe(P)})})});describe("custom field",function(){it("should default the field to the idProperty",function(){K.selectPath("/root/M");expect(L("M")).toBe(true)});it("should accept a custom field from the model",function(){K.selectPath("/root/AA/FF/GG","secondaryId");expect(L("G")).toBe(true)})});describe("custom separator",function(){it("should default the separator to /",function(){K.selectPath("/root/A");expect(L("A")).toBe(true)});it("should accept a custom separator",function(){K.selectPath("|root|A|B",null,"|");expect(L("B")).toBe(true)})});describe("various paths",function(){it("should be able to select the root",function(){K.selectPath("/root");expect(L("root")).toBe(true)});it("should select a leaf node",function(){K.selectPath("/root/I/L");expect(L("L")).toBe(true)});it("should not select a node if the full path isn't resolved",function(){K.selectPath("/root/I/FAKE");expect(K.getSelectionModel().getSelection().length).toBe(0)})})});describe("special cases",function(){it("should be able to select a path where the values are numeric",function(){var L=Ext.define(null,{extend:"Ext.data.TreeModel",fields:[{name:"id",type:"int"}]});D([{id:1,text:"A"},{id:2,text:"B",children:[{id:3,text:"B1",children:[{id:4,text:"B1_1"}]},{id:5,text:"B2",children:[{id:6,text:"B2_1"}]}]}],null,null,{id:-1});K.selectPath("2/3/4");expect(K.getSelectionModel().isSelected(G.getNodeById(4)))});it("should be able to select a path when subclassing Ext.tree.Panel",function(){var L=Ext.define(null,{extend:"Ext.tree.Panel",animate:false,viewConfig:{loadMask:false}});K=new L({renderTo:Ext.getBody(),store:G=new Ext.data.TreeStore({model:A,root:{secondaryId:"root",id:"root",text:"Root",children:I}})});K.selectPath("/root/A/B/C");expect(K.getSelectionModel().isSelected(G.getNodeById("C")))})})});describe("expand/collapse",function(){var L;beforeEach(function(){D(I);L=K.layoutCounter});describe("expandAll",function(){describe("callbacks",function(){it("should pass the direct child nodes of the root",function(){var O,N=0,M=K.getStore();K.expandAll(function(P){O=P;N++});expect(N).toEqual(1);expect(O[0]).toBe(M.getById("A"));expect(O[1]).toBe(M.getById("I"));expect(O[2]).toBe(M.getById("M"));expect(K.layoutCounter).toBe(L+1)});it("should default the scope to the tree",function(){var M;K.expandAll(function(){M=this});expect(M).toBe(K)});it("should use a passed scope",function(){var N={},M;K.expandAll(function(){M=this},N);expect(M).toBe(N)})});it("should expand all nodes",function(){K.expandAll();Ext.Array.forEach(K.store.getRange(),function(M){if(!M.isLeaf()){expect(M.isExpanded()).toBe(true)}})});it("should continue down the tree even if some nodes are expanded",function(){var M=K.getStore();M.getNodeById("A").expand();M.getNodeById("I").expand();K.expandAll();Ext.Array.forEach(K.store.getRange(),function(N){if(!N.isLeaf()){expect(N.isExpanded()).toBe(true)}})})});describe("collapseAll",function(){describe("callbacks",function(){it("should pass the direct child nodes of the root",function(){var N,M=K.getStore();K.collapseAll(function(O){N=O});expect(N[0]).toBe(M.getNodeById("A"));expect(N[1]).toBe(M.getNodeById("I"));expect(N[2]).toBe(M.getNodeById("M"))});it("should default the scope to the tree",function(){var M;K.collapseAll(function(){M=this});expect(M).toBe(K)});it("should use a passed scope",function(){var N={},M;K.expandAll(function(){M=this},N);expect(M).toBe(N)})});it("should collapse all nodes",function(){K.expandAll();K.collapseAll();Ext.Array.forEach(K.store.getRange(),function(M){if(!M.isLeaf()){expect(M.isExpanded()).toBe(false)}})});it("should collapse all nodes all the way down the tree",function(){K.expandPath("/root/A/B/C");K.getRootNode().collapse();K.collapseAll();Ext.Array.forEach(K.store.getRange(),function(M){if(!M.isLeaf()){expect(M.isExpanded()).toBe(false)}})})});describe("expand",function(){describe("callbacks",function(){it("should pass the nodes directly under the expanded node",function(){var N,M=K.getStore();K.expandNode(K.getRootNode(),false,function(O){N=O});expect(N[0]).toBe(M.getNodeById("A"));expect(N[1]).toBe(M.getNodeById("I"));expect(N[2]).toBe(M.getNodeById("M"))});it("should default the scope to the tree",function(){var M;K.expandNode(K.getRootNode(),false,function(){M=this});expect(M).toBe(K)});it("should use a passed scope",function(){var N={},M;K.expandNode(K.getRootNode(),false,function(){M=this},N);expect(M).toBe(N)})});describe("deep",function(){it("should only expand a single level if deep is not specified",function(){var M=K.getStore();K.expandNode(K.getRootNode());expect(M.getNodeById("A").isExpanded()).toBe(false);expect(M.getNodeById("I").isExpanded()).toBe(false);expect(M.getNodeById("M").isExpanded()).toBe(false)});it("should expand all nodes underneath the expanded node if deep is set",function(){var M=K.getStore();K.expandPath("/root/A");K.expandNode(M.getNodeById("A"),true);expect(M.getNodeById("B").isExpanded()).toBe(true);expect(M.getNodeById("F").isExpanded()).toBe(true);expect(M.getNodeById("G").isExpanded()).toBe(true)})})});describe("collapse",function(){describe("callbacks",function(){it("should pass the nodes directly under the expanded node",function(){var N,M=K.getStore();K.collapseNode(K.getRootNode(),false,function(O){N=O});expect(N[0]).toBe(M.getNodeById("A"));expect(N[1]).toBe(M.getNodeById("I"));expect(N[2]).toBe(M.getNodeById("M"))});it("should default the scope to the tree",function(){var M;K.collapseNode(K.getRootNode(),false,function(){M=this});expect(M).toBe(K)});it("should use a passed scope",function(){var N={},M;K.collapseNode(K.getRootNode(),false,function(){M=this},N);expect(M).toBe(N)})});describe("deep",function(){it("should only collapse a single level if deep is not specified",function(){var M=K.getStore();K.expandAll();K.collapseNode(K.getRootNode());expect(M.getNodeById("A").isExpanded()).toBe(true);expect(M.getNodeById("I").isExpanded()).toBe(true);expect(M.getNodeById("M").isExpanded()).toBe(true)});it("should expand all nodes underneath the expanded node if deep is set",function(){var M=K.getStore();K.expandPath("/root/A");K.expandNode(M.getNodeById("A"),true);K.collapseNode(M.getNodeById("A"),true);expect(M.getNodeById("B").isExpanded()).toBe(false);expect(M.getNodeById("F").isExpanded()).toBe(false);expect(M.getNodeById("G").isExpanded()).toBe(false)})})})});describe("animations",function(){var L=Ext.enableFx;beforeEach(function(){D=function(N,M){M=M||{};Ext.applyIf(M,{renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{secondaryId:"root",id:"root",text:"Root",children:N}})});K=new Ext.tree.Panel(M)}});afterEach(function(){Ext.enableFx=L});it("should enable animations when Ext.enableFx is true",function(){Ext.enableFx=true;D();expect(K.enableAnimations).toBeTruthy()});it("should disable animations when Ext.enableFx is false",function(){Ext.enableFx=false;D();expect(K.enableAnimations).toBeFalsy()})});describe("event order",function(){it("should fire 'beforeitemexpand' before 'beforeload'",function(){var M=0,N,O,L,P;D(null,{store:new Ext.data.TreeStore({proxy:{type:"ajax",url:"fakeUrl"},root:{text:"Ext JS",id:"src"},folderSort:true,sorters:[{property:"text",direction:"ASC"}]}),listeners:{beforeitemexpand:function(){N=M;M++},beforeload:function(){O=M;M++},load:function(){L=M}}});P=K.layoutCounter;K.getStore().getRoot().expand();Ext.Ajax.mockComplete({status:200,responseText:Ext.encode(I)});expect(N).toBe(0);expect(O).toBe(1);expect(L).toBe(2);expect(K.layoutCounter).toBe(P+1)})});describe("selected/focused/hover css classes",function(){var P=Ext.view.Table.prototype,N=P.selectedItemCls,O=P.focusedItemCls,L,M,Q;beforeEach(function(){D(I,{rowLines:true,selModel:{selType:"rowmodel",mode:"MULTI"}});K.getRootNode().expand();L=K.view;M=K.store});function R(){Ext.getBody().focus()}it("should preserve the selected classes when nodes are expanded",function(){K.selModel.select([M.getNodeById("A"),M.getNodeById("M")]);M.getNodeById("A").expand();M.getNodeById("I").expand();expect(L.getNodeByRecord(M.getNodeById("A"))).toHaveCls(N);expect(L.getNodeByRecord(M.getNodeById("M"))).toHaveCls(N)});it("should preserve the focused classes when nodes are expanded",function(){Q=M.getNodeById("I");K.getView().getNavigationModel().setPosition(Q);M.getNodeById("A").expand();expect(L.getCell(Q,L.getVisibleColumnManager().getColumns()[0])).toHaveCls(O)});it("should update the selected classes when rows are collapsed",function(){M.getNodeById("A").expand();M.getNodeById("M").expand();K.selModel.select([M.getNodeById("B"),M.getNodeById("M")]);R();M.getNodeById("A").collapse();M.getNodeById("M").collapse();expect(L.getNodeByRecord(M.getNodeById("M"))).toHaveCls(N)})});describe("renderer",function(){var L=Ext.define(null,{extend:"Ext.tree.Column",renderColText:function(P){return P+"NoScope"},renderer:"renderColText"}),N=Ext.define(null,{extend:"Ext.tree.Column",renderColText:function(P){return P+"ScopeThis"},renderer:"renderColText",scope:"this"}),M=Ext.define(null,{extend:"Ext.tree.Column",scope:"controller"}),O=Ext.define(null,{extend:"Ext.app.ViewController",renderColText:function(P){return P+"ViewController"}});describe("String renderer in a column subclass",function(){it("should be able to use a named renderer in the column with no scope",function(){K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[new L({flex:1,dataIndex:"text"})]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootNoScope")});it("should be able to use a named renderer in the column with scope: 'this'",function(){K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[new N({flex:1,dataIndex:"text"})]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootScopeThis")});xit("should not be able to use a named renderer in the column with scope: 'controller'",function(){expect(function(){K=new Ext.tree.Panel({animate:false,store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[new M({flex:1,dataIndex:"text",renderer:"renderColText",scope:"controller"})]});K.render(document.body)}).toThrow()});it("should be able to use a named renderer in a ViewController",function(){K=new Ext.tree.Panel({controller:new O(),animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[new L({flex:1,dataIndex:"text",renderer:"renderColText"})]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootViewController");K.destroy();K=new Ext.tree.Panel({controller:new O(),animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[new M({flex:1,dataIndex:"text",renderer:"renderColText"})]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootViewController");K.destroy();K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[new L({controller:new O(),flex:1,dataIndex:"text",renderer:"renderColText",scope:"self.controller"})]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootViewController")});it("should be able to use a named renderer in the Column with no scope when Column uses defaultListenerScope: true",function(){K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[new L({defaultListenerScope:true,flex:1,dataIndex:"text",renderColText:function(P){return P+"ColDefaultScope"},renderer:"renderColText"})]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootColDefaultScope")});it("should be able to use a named renderer in the Panel with no scope when Panel uses defaultListenerScope: true",function(){K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),defaultListenerScope:true,panelRenderColText:function(P){return P+"PanelDefaultScope"},columns:[new L({flex:1,dataIndex:"text",renderer:"panelRenderColText"})]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootPanelDefaultScope")})});describe("String renderer in a column definition",function(){it("should be able to use a named renderer in the column with no scope",function(){K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[{xtype:"treecolumn",flex:1,dataIndex:"text",renderColText:function(P){return P+"NoScope"},renderer:"renderColText"}]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootNoScope")});it("should be able to use a named renderer in the column with scope: 'this'",function(){K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[{xtype:"treecolumn",flex:1,dataIndex:"text",renderColText:function(P){return P+"ScopeThis"},renderer:"renderColText",scope:"this"}]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootScopeThis")});xit("should not be able to use a named renderer in the column with scope: 'controller'",function(){expect(function(){K=new Ext.tree.Panel({animate:false,store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[{xtype:"treecolumn",flex:1,dataIndex:"text",renderColText:function(P){return P+"Foo"},renderer:"renderColText",scope:"controller"}]});K.render(document.body)}).toThrow()});it("should be able to use a named renderer in a ViewController",function(){K=new Ext.tree.Panel({controller:new O(),animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[{xtype:"treecolumn",flex:1,dataIndex:"text",renderer:"renderColText"}]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootViewController");K.destroy();K=new Ext.tree.Panel({controller:new O(),animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[{xtype:"treecolumn",flex:1,dataIndex:"text",renderer:"renderColText",scope:"controller"}]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootViewController");K.destroy();K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[{controller:new O(),xtype:"treecolumn",flex:1,dataIndex:"text",renderer:"renderColText",scope:"self.controller"}]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootViewController")});it("should be able to use a named renderer in the Column with no scope when Column uses defaultListenerScope: true",function(){K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[{xtype:"treecolumn",defaultListenerScope:true,flex:1,dataIndex:"text",renderColText:function(P){return P+"ColDefaultScope"},renderer:"renderColText"}]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootColDefaultScope")});it("should be able to use a named renderer in the Panel with no scope when Panel uses defaultListenerScope: true",function(){K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),defaultListenerScope:true,panelRenderColText:function(P){return P+"PanelDefaultScope"},columns:[{xtype:"treecolumn",flex:1,dataIndex:"text",renderer:"panelRenderColText"}]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootPanelDefaultScope")})});it("should be able to use a renderer to render the value",function(){K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[{xtype:"treecolumn",flex:1,dataIndex:"text",renderer:function(P){return P+"Foo"}}]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("RootFoo")});it("should be able to use a string renderer that maps to Ext.util.Format",function(){K=new Ext.tree.Panel({animate:false,renderTo:Ext.getBody(),store:new Ext.data.TreeStore({model:A,root:{id:"root",text:"Root"}}),columns:[{xtype:"treecolumn",flex:1,formatter:"uppercase",dataIndex:"text"}]});expect(K.el.down(".x-tree-node-text").dom.innerHTML).toEqual("ROOT")})});describe("programmatic load",function(){beforeEach(function(){Ext.define("spec.Foo",{extend:"Ext.data.Model",fields:["Name","Id"],idProperty:"Id"})});afterEach(function(){Ext.undefine("spec.Foo");Ext.data.Model.schema.clear(true)});function L(){return[{"BaselineEndDate":"2010-02-01","Id":1,"Name":"Planning","PercentDone":50,"StartDate":"2010-01-18","BaselineStartDate":"2010-01-13","Duration":11,"expanded":true,"TaskType":"Important","children":[{"BaselineEndDate":"2010-01-28","Id":11,"leaf":true,"Name":"Investigate","PercentDone":50,"TaskType":"LowPrio","StartDate":"2010-01-18","BaselineStartDate":"2010-01-20","Duration":10},{"BaselineEndDate":"2010-02-01","Id":12,"leaf":true,"Name":"Assign resources","PercentDone":50,"StartDate":"2010-01-18","BaselineStartDate":"2010-01-25","Duration":10},{"BaselineEndDate":"2010-02-01","Id":13,"leaf":true,"Name":"Gather documents (not resizable)","Resizable":false,"PercentDone":50,"StartDate":"2010-01-18","BaselineStartDate":"2010-01-25","Duration":10},{"BaselineEndDate":"2010-02-04","Id":17,"leaf":true,"Name":"Report to management","TaskType":"Important","PercentDone":0,"StartDate":"2010-02-02","BaselineStartDate":"2010-02-04","Duration":0}]}]}it("should reload the root node",function(){var M=new Ext.data.TreeStore({model:"spec.Foo",proxy:{type:"ajax",url:"/data/AjaxProxy/treeLoadData"},root:{Name:"ROOOOOOOOT",expanded:true}}),N;K=new Ext.tree.Panel({renderTo:Ext.getBody(),width:600,height:400,store:M,viewConfig:{loadMask:false},columns:[{xtype:"treecolumn",header:"Tasks",dataIndex:"Name",locked:true,width:200},{width:200,dataIndex:"Id"}]});Ext.Ajax.mockComplete({status:200,responseText:Ext.encode(L())});var P=K.lockedGrid.view,O=K.normalGrid.view;N=C(M,"refresh");M.load();Ext.Ajax.mockComplete({status:200,responseText:Ext.encode(L())});expect(N.callCount).toBe(1);expect(P.getNodes().length).toBe(6);expect(O.getNodes().length).toBe(6)})});describe("filtering",function(){var M=[{text:"Top 1",children:[{text:"foo",leaf:true},{text:"bar",leaf:true},{text:"Second level 1",children:[{text:"foo",leaf:true},{text:"bar",leaf:true}]}]},{text:"Top 2",children:[{text:"foo",leaf:true},{text:"wonk",leaf:true},{text:"Second level 2",children:[{text:"foo",leaf:true},{text:"wonk",leaf:true}]}]},{text:"Top 3",children:[{text:"zarg",leaf:true},{text:"bar",leaf:true},{text:"Second level 3",children:[{text:"zarg",leaf:true},{text:"bar",leaf:true}]}]}];beforeEach(function(){D(M,{rootVisible:false})});function L(N,O){return F.store.getAt(N).get("text")===O}it("should only show nodes which pass a filter",function(){var O,N=spyOn(F,"handleUpdate").andCallThrough();expect(F.all.getCount()).toBe(3);expect(F.store.getCount()).toBe(3);expect(L(0,"Top 1")).toBe(true);expect(L(1,"Top 2")).toBe(true);expect(L(2,"Top 3")).toBe(true);G.filter({filterFn:function(S){var R=S.childNodes,P=R&&R.length,T=S.isLeaf()?S.get("text")==="foo":false,Q;for(Q=0;Q<P&&!(T=R[Q].get("visible"));Q++){}return T},id:"testFilter"});expect(N.callCount).toBe(0);B.childNodes[0].expand();expect(F.all.getCount()).toBe(4);expect(F.store.getCount()).toBe(4);expect(L(0,"Top 1")).toBe(true);expect(L(1,"foo")).toBe(true);expect(L(2,"Second level 1")).toBe(true);expect(L(3,"Top 2")).toBe(true);B.childNodes[0].childNodes[2].expand();expect(F.all.getCount()).toBe(5);expect(F.store.getCount()).toBe(5);expect(L(0,"Top 1")).toBe(true);expect(L(1,"foo")).toBe(true);expect(L(2,"Second level 1")).toBe(true);expect(L(3,"foo")).toBe(true);expect(L(4,"Top 2")).toBe(true);O=N.callCount;G.filter({filterFn:function(S){var R=S.childNodes,P=R&&R.length,T=S.isLeaf()?S.get("text")==="bar":false,Q;for(Q=0;Q<P&&!(T=R[Q].get("visible"));Q++){}return T},id:"testFilter"});expect(N.callCount).toBe(O);expect(F.all.getCount()).toBe(5);expect(F.store.getCount()).toBe(5);expect(L(0,"Top 1")).toBe(true);expect(L(1,"bar")).toBe(true);expect(L(2,"Second level 1")).toBe(true);expect(L(3,"bar")).toBe(true);expect(L(4,"Top 3")).toBe(true);B.childNodes[2].expand();expect(F.all.getCount()).toBe(7);expect(F.store.getCount()).toBe(7);expect(L(0,"Top 1")).toBe(true);expect(L(1,"bar")).toBe(true);expect(L(2,"Second level 1")).toBe(true);expect(L(3,"bar")).toBe(true);expect(L(4,"Top 3")).toBe(true);expect(L(5,"bar")).toBe(true);expect(L(6,"Second level 3")).toBe(true);B.childNodes[2].collapse();expect(F.all.getCount()).toBe(5);expect(F.store.getCount()).toBe(5);expect(L(0,"Top 1")).toBe(true);expect(L(1,"bar")).toBe(true);expect(L(2,"Second level 1")).toBe(true);expect(L(3,"bar")).toBe(true);expect(L(4,"Top 3")).toBe(true);B.collapseChildren();expect(F.all.getCount()).toBe(2);expect(F.store.getCount()).toBe(2);expect(L(0,"Top 1")).toBe(true);expect(L(1,"Top 3")).toBe(true)})});describe("sorting",function(){it("should sort nodes",function(){var L;D(I,null,{folderSort:true,sorters:[{property:"text",direction:"ASC"}]});K.expandAll();L=K.store.getNodeById("B");L.insertChild(0,{text:"Z",leaf:true});expect(L.childNodes[0].get("text")).toBe("Z");expect(L.childNodes[1].get("text")).toBe("C");expect(L.childNodes[2].get("text")).toBe("D");L.sort();expect(L.childNodes[0].get("text")).toBe("C");expect(L.childNodes[1].get("text")).toBe("D");expect(L.childNodes[2].get("text")).toBe("Z");L.sort(function(N,M){return N.get("text")>M.get("text")?-1:1});expect(L.childNodes[0].get("text")).toBe("Z");expect(L.childNodes[1].get("text")).toBe("D");expect(L.childNodes[2].get("text")).toBe("C")})});describe("Buffered rendering large, expanded root node",function(){function L(){var N=[],Q,P,S,O,R;for(Q=0;Q<50;Q++){S=Q+1;R={id:"n"+S,text:"Node"+S,children:[]};for(P=0;P<50;P++){O=P+1;R.children.push({id:"n"+S+"."+O,text:"Node"+S+"/"+O,leaf:true})}N.push(R)}return N}function M(){Ext.Ajax.mockComplete({status:200,responseText:Ext.encode(L())})}it("should maintain scroll position on reload",function(){D(null,{height:400,width:350},{proxy:{type:"ajax",url:"/tree/Panel/load"},root:{id:"root",text:"Root",expanded:true}});M();F.setScrollY(500);G.reload();M();expect(F.getScrollY()).toBe(500)});it("should negate the animate flag and not throw an error",function(){D(null,{height:400,width:350,animate:true},{proxy:{type:"ajax",url:"/tree/Panel/load"},root:{id:"root",text:"Root",expanded:true}});M();expect(K.view.bufferedRenderer instanceof Ext.grid.plugin.BufferedRenderer).toBe(true)});it("should scroll to unloaded nodes by absolute path",function(){D(null,{height:400,width:350},{lazyFill:true,proxy:{type:"ajax",url:"/tree/Panel/load"},root:{id:"root",text:"Root",expanded:false}});G.load();M();K.ensureVisible("/root/n50/n50.50");expect(Ext.fly(F.getNode(G.getById("n50.50"))).getBox().bottom).toBeLessThanOrEqual(F.getBox().bottom)});it("should throw an error when being asked to scroll to an invisible root node",function(){D(null,{height:400,width:350,rootVisible:false},{lazyFill:true,proxy:{type:"ajax",url:"/tree/Panel/load"},root:{id:"root",text:"Root",expanded:true}});G.load();M();runs(function(){expect(function(){K.ensureVisible(B)}).toThrow("Unknown record passed to BufferedRenderer#scrollTo")})});it("should scroll to loaded nodes by relative path",function(){D(null,{height:400,width:350},{proxy:{type:"ajax",url:"/tree/Panel/load"},root:{id:"root",text:"Root",expanded:false}});G.load();M();runs(function(){K.ensureVisible("n50.50");expect(Ext.fly(F.getNode(G.getById("n50.50"))).getBox().bottom).toBeLessThanOrEqual(F.getBox().bottom)})})});describe("multi append node",function(){var M,L;beforeEach(function(){D(I,null,null,{expanded:true});M=F.componentLayoutCounter});it("should only update the view once when an array of nodes is passed",function(){L=K.getHeight();expect(F.all.getCount()).toEqual(4);K.getRootNode().appendChild([{id:"append-1",text:"append-1",secondaryId:"append-1"},{id:"append-2",text:"append-2",secondaryId:"append-2"},{id:"append-3",text:"append-3",secondaryId:"append-3"},{id:"append-4",text:"append-4",secondaryId:"append-4"},{id:"append-5",text:"append-5",secondaryId:"append-5"}]);expect(F.all.getCount()).toEqual(9);expect(K.getHeight()).toBeGreaterThan(L);expect(F.componentLayoutCounter).toEqual(M+1)})});describe("tracking removed nodes",function(){it("should not add nodes removed by virtue of their parent collapsing to the removed list",function(){var L=false;D(I,null,{trackRemoved:true});K.expandAll(function(){K.collapseAll(function(){L=true})});waitsFor(function(){return L});runs(function(){expect(K.store.getRemovedRecords().length).toBe(0)})});it("should add descendants of collapsed nodes to the removed list",function(){D(I,null,{trackRemoved:true});runs(function(){K.store.getRootNode().drop();expect(K.store.getRemovedRecords().length).toBe(14)})});it("should add descendants of filtered out nodes to the removed list",function(){var L=false;D(I,null,{trackRemoved:true});K.expandAll(function(){L=true});waitsFor(function(){return L});runs(function(){K.store.filter("id","all_nodes_filtered_out");expect(K.store.getRemovedRecords().length).toBe(0);K.store.getRootNode().drop();expect(K.store.getRemovedRecords().length).toBe(14)})})});describe("Changing root node",function(){it("should remove all listeners from old root node",function(){K=new Ext.tree.Panel({title:"Test",height:200,width:400,root:{text:"Root",expanded:true,children:[{text:"A",leaf:true},{text:"B",leaf:true}]}});var L=K.getRootNode();expect(Ext.Object.getKeys(L.hasListeners).length).toBeGreaterThan(0);K.store.setRoot({text:"NewRoot",expanded:true,children:[{text:"New A",leaf:true},{text:"New B",leaf:true}]});expect(Ext.Object.getKeys(L.hasListeners).length).toBe(0)})});describe("sorting a collapsed node",function(){it("should not expand a collapsed node upon sort",function(){D(I,null,{folderSort:true,sorters:[{property:"text",direction:"ASC"}]});B.expand();var L=K.store.getNodeById("A");L.sort(function(N,M){return N.get("text").localeCompare(M.get("text"))});expect(K.store.indexOf(L.childNodes[0])).toBe(-1);expect(K.store.indexOf(L.childNodes[1])).toBe(-1);expect(K.store.indexOf(L.childNodes[2])).toBe(-1)})})})