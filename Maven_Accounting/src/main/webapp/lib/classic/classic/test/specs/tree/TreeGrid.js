describe("Ext.tree.TreeGrid",function(){var C=Ext.define(null,{extend:"Ext.data.Model",fields:["f1","f2"],proxy:{type:"memory"}}),J,E,F,B,H={f1:"root1",f2:"root.a",cls:"test-EXTJS-16367",children:[{f1:"1",f2:"a",children:[{f1:"1.1",f2:"a.a",leaf:true},{f1:"1.2",f2:"a.b",leaf:true},{f1:"1.3",f2:"a.c",leaf:true},{f1:"1.4",f2:"a.d",leaf:true}]},{f1:"2",f2:"b",children:[{f1:"2.1",f2:"b.a",leaf:true},{f1:"2.2",f2:"b.b",leaf:true},{f1:"2.3",f2:"b.c",leaf:true},{f1:"2.4",f2:"b.d",leaf:true}]},{f1:"3",f2:"c",children:[{f1:"3.1",f2:"c.a",leaf:true},{f1:"3.2",f2:"c.b",leaf:true},{f1:"3.3",f2:"c.c",leaf:true},{f1:"3.4",f2:"c.d",leaf:true}]},{f1:"4",f2:"d",children:[{f1:"4.1",f2:"d.a",leaf:true},{f1:"4.2",f2:"d.b",leaf:true},{f1:"4.3",f2:"d.c",leaf:true},{f1:"4.4",f2:"d.d",leaf:true}]},{f1:"5",f2:"e",children:[{f1:"5.1",f2:"e.a",leaf:true},{f1:"5.2",f2:"e.b",leaf:true},{f1:"5.3",f2:"e.c",leaf:true},{f1:"5.4",f2:"e.d",leaf:true}]},{f1:"6",f2:"f",children:[{f1:"6.1",f2:"f.a",leaf:true},{f1:"6.2",f2:"f.b",leaf:true},{f1:"6.3",f2:"f.c",leaf:true},{f1:"6.4",f2:"f.d",leaf:true}]}]},I=true,G=Ext.data.TreeStore.prototype.load,D;function A(K,L){J=new Ext.tree.Panel(Ext.apply({animate:false,renderTo:Ext.getBody(),store:F=new Ext.data.TreeStore(Ext.apply({model:C,root:Ext.clone(H)},L)),trailingBufferZone:1000,leadingBufferZone:1000,width:200,columns:[{xtype:"treecolumn",text:"F1",dataIndex:"f1",width:100},{text:"F2",dataIndex:"f2",flex:1}]},K));E=J.getView()}beforeEach(function(){D=Ext.data.TreeStore.prototype.load=function(){G.apply(this,arguments);if(I){this.flushLoad.apply(this,arguments)}return this}});afterEach(function(){Ext.data.TreeStore.prototype.load=G;Ext.destroy(J)});describe("Model mutation",function(){it("should not have to render a whole row, it should update innerHTML of cell",function(){A();expect(E.getCellByPosition({row:0,column:0}).hasCls("test-EXTJS-16367")).toBe(true);var K=spyOn(E,"createRowElement").andCallThrough();F.getAt(0).set({f1:"ploot",f2:"gronk"});expect(K).not.toHaveBeenCalled()})});describe("autoloading",function(){it("should not autoload the store if the root is visible",function(){var K=0;A({columns:[{xtype:"treecolumn",text:"F1",dataIndex:"f1",width:100}],store:{listeners:{load:function(){K++}}}});expect(K).toBe(0)});it("should not autoload the store if the root is visible and there is a locked column",function(){var K=0;A({columns:[{xtype:"treecolumn",text:"F1",dataIndex:"f1",width:100,locked:true}],store:{listeners:{load:function(){K++}}}});expect(K).toBe(0)});it("should autoload the store if the root is visible",function(){var K=0;A({rootVisible:false,columns:[{xtype:"treecolumn",text:"F1",dataIndex:"f1",width:100}],store:{proxy:"memory",listeners:{load:function(){K++}}}});expect(K).toBe(1)});it("should autoload the store if the root is visible and there is a locked column",function(){var K=0;A({rootVisible:false,columns:[{xtype:"treecolumn",text:"F1",dataIndex:"f1",width:100,locked:true}],store:{proxy:"memory",listeners:{load:function(){K++}}}});expect(K).toBe(1)})});describe("Buffered rendering",function(){var K;beforeEach(function(){A({height:45,plugins:Ext.create("Ext.grid.plugin.BufferedRenderer",{trailingBufferZone:1,leadingBufferZone:1})});J.expandAll();B=J.view.store.getCount();K=J.getRootNode()});it("should not render every node",function(){expect(B).toEqual(31);expect(J.view.all.getCount()).toBeLessThan(B)});it("should not not scroll upon node expand",function(){J.collapseAll();K.expand();J.view.setScrollY(40);J.getRootNode().childNodes[1].expand();expect(J.view.getScrollY()).toEqual(40)})});describe("buffered rendering with locking and rootVisible: false",function(){var K;beforeEach(function(){A({renderTo:Ext.getBody(),height:120,store:new Ext.data.TreeStore({model:C,root:{f1:"Root",f2:"root",children:[{f1:"c0",f2:"c0",leaf:true},{f1:"c1",f2:"c1",leaf:true},{f1:"c2",f2:"c2",leaf:true}]}}),plugins:Ext.create("Ext.grid.plugin.BufferedRenderer",{trailingBufferZone:1,leadingBufferZone:1}),columns:[{xtype:"treecolumn",text:"F1",dataIndex:"f1",width:100,locked:true},{text:"F2",dataIndex:"f2",flex:1}],rootVisible:false});B=J.lockedGrid.view.store.getCount();K=J.getRootNode()});it("should work when inserting a node at the top",function(){expect(J.lockedGrid.view.all.getCount()).toEqual(3);expect(J.normalGrid.view.all.getCount()).toEqual(3);K.insertBefore({text:"Top"},K.childNodes[0]);expect(J.lockedGrid.view.all.getCount()).toEqual(4);expect(J.normalGrid.view.all.getCount()).toEqual(4)})});describe("Buffered rendering and locking",function(){var K;beforeEach(function(){A({height:45,plugins:Ext.create("Ext.grid.plugin.BufferedRenderer",{trailingBufferZone:1,leadingBufferZone:1}),columns:[{xtype:"treecolumn",text:"F1",dataIndex:"f1",width:100,locked:true},{text:"F2",dataIndex:"f2",flex:1}]});J.expandAll();B=J.lockedGrid.view.store.getCount();K=J.getRootNode()});it("should not render every node",function(){var L=J.lockedGrid,M=J.normalGrid,N=L.view.all.getCount();expect(B).toEqual(31);expect(N).toBeLE(B);expect(M.view.all.getCount()).toEqual(N)});it("should sync scroll positions between the two sides",function(){var M=J.lockedGrid,O=J.normalGrid,N=M.view,L=O.view;J.collapseAll();K.expand();L.setScrollY(30);waits(200);runs(function(){expect(N.getScrollY()).toEqual(30);J.setHeight(120);L.setScrollY(45);waits(200);runs(function(){expect(N.getScrollY()).toEqual(45);K.childNodes[2].expand();expect(L.store.getCount()).toEqual(11);expect(N.el.dom.scrollTop).toEqual(45)})})})});describe("reconfigure",function(){it("should allow reconfigure",function(){var P=[{xtype:"treecolumn",text:"Task",flex:1,dataIndex:"task"},{text:"URL",flex:1,sortable:false,dataIndex:"url"}];var O=[{xtype:"treecolumn",text:"New Task",flex:1,dataIndex:"new_task"},{text:"New URL",flex:1,sortable:false,dataIndex:"new_url"}];Ext.define("ReconfigureTestTask",{extend:"Ext.data.Model",fields:[{name:"task",type:"string"},{name:"url",type:"string"}]});Ext.define("ReconfigureTestNewTask",{extend:"Ext.data.Model",fields:[{name:"new_task",type:"string"},{name:"new_url",type:"string"}]});var N=Ext.create("Ext.data.TreeStore",{model:"ReconfigureTestTask",root:{expanded:true,children:[{task:"task1",url:"url1",expanded:true,children:[{task:"task1.1",url:"url1.1",leaf:true}]},{task:"task2",url:"url2",expanded:true,children:[{task:"task2.1",url:"url2.1",leaf:true}]}]}});var L=Ext.create("Ext.data.TreeStore",{model:"ReconfigureTestNewTask",root:{expanded:true,children:[{new_task:"new-task1",new_url:"new-url1",expanded:true,children:[{new_task:"new-task1.1",new_url:"new-url1.1",leaf:true}]},{new_task:"new-task2",new_url:"new-url2",expanded:true,children:[{new_task:"new-task2.1",new_url:"new-url2.1",leaf:true}]}]}});var K=Ext.create("Ext.tree.Panel",{title:"treegrid",width:600,height:300,renderTo:Ext.getBody(),collapsible:true,rootVisible:false,useArrows:true,store:N,multiSelect:true,columns:P}),M=K.getRootNode();expect(M.childNodes[0].data.task).toEqual("task1");expect(M.childNodes[0].data.url).toEqual("url1");expect(M.childNodes[0].childNodes[0].data.task).toEqual("task1.1");expect(M.childNodes[0].childNodes[0].data.url).toEqual("url1.1");expect(M.childNodes[1].data.task).toEqual("task2");expect(M.childNodes[1].data.url).toEqual("url2");expect(M.childNodes[1].childNodes[0].data.task).toEqual("task2.1");expect(M.childNodes[1].childNodes[0].data.url).toEqual("url2.1");K.reconfigure(L,O);M=K.getRootNode();expect(M.childNodes[0].data.new_task).toEqual("new-task1");expect(M.childNodes[0].data.new_url).toEqual("new-url1");expect(M.childNodes[0].childNodes[0].data.new_task).toEqual("new-task1.1");expect(M.childNodes[0].childNodes[0].data.new_url).toEqual("new-url1.1");expect(M.childNodes[1].data.new_task).toEqual("new-task2");expect(M.childNodes[1].data.new_url).toEqual("new-url2");expect(M.childNodes[1].childNodes[0].data.new_task).toEqual("new-task2.1");expect(M.childNodes[1].childNodes[0].data.new_url).toEqual("new-url2.1");K.destroy();Ext.undefine("ReconfigureTestTask");Ext.undefine("ReconfigureTestNewTask")})})})