describe("Ext.util.KeyMap",function(){var D,G,B,F,C,E,A={A:65,B:66,C:67,X:88,Y:89,Z:90};beforeEach(function(){D=Ext.getBody().createChild({id:"test-keyMap-el"});B=function(I,H){G=new Ext.KeyMap(D,I,H)};C=function(J,H,I){jasmine.fireKeyEvent(D,H||"keydown",J,I||null)};F=jasmine.createSpy("defaultKeyNavHandler");E=Ext.util.KeyMap.prototype.processEvent});afterEach(function(){if(G){G.disable()}D.destroy();Ext.util.KeyMap.prototype.processEvent=E;E=C=F=G=B=D=null});describe("constructor",function(){describe("receiving element",function(){it("should take a string id",function(){G=new Ext.util.KeyMap("test-keyMap-el");G.addBinding({key:A.A,handler:F});C(A.A);expect(F).toHaveBeenCalled()});it("should take a dom element",function(){G=new Ext.util.KeyMap(D);G.addBinding({key:A.X,handler:F});C(A.X);expect(F).toHaveBeenCalled()});it("should take an Ext.Element",function(){G=new Ext.util.KeyMap(Ext.get(D));G.addBinding({key:A.Z,handler:F});C(A.Z);expect(F).toHaveBeenCalled()})});it("should pass the config to addBinding",function(){B({key:A.Z,handler:F});C(A.Z);expect(F).toHaveBeenCalled()});it("should default the eventName to keydown",function(){B({key:A.C,handler:F});C(A.C,"keydown");expect(F).toHaveBeenCalled()});it("should accept an eventName argument",function(){B({key:A.B,handler:F},"keyup");C(A.B,"keyup");expect(F).toHaveBeenCalled()})});describe("addBinding",function(){describe("single binding",function(){it("should listen to a single keycode",function(){B();G.addBinding({key:A.A,handler:F});C(A.A);expect(F).toHaveBeenCalled()});it("should accept an array of keycodes",function(){B();G.addBinding({key:[A.A,A.Z],handler:F});C(A.A);C(A.Z);expect(F.callCount).toEqual(2)});it("should accept a single character as a string",function(){B();G.addBinding({key:"b",handler:F});C(A.B);expect(F).toHaveBeenCalled()});it("should accept multiple characters as a string",function(){B();G.addBinding({key:"xyz",handler:F});C(A.X);C(A.Y);C(A.Z);expect(F.callCount).toEqual(3)});it("should accept an array of characters",function(){B();G.addBinding({key:["c","y"],handler:F});C(A.C);C(A.Y);expect(F.callCount).toEqual(2)})});describe("array binding",function(){it("should support an array of mixed bindings",function(){B();G.addBinding([{key:A.A,handler:F},{key:"b",handler:F}]);C(A.A);C(A.B);expect(F.callCount).toEqual(2)});it("should process all bindings",function(){B();G.addBinding([{key:A.A,handler:F},{key:A.A,handler:F}]);C(A.A);expect(F.callCount).toEqual(2)})});it("should support multiple addBinding calls",function(){B();G.addBinding({key:A.A,handler:F});G.addBinding({key:A.B,handler:F});C(A.A);C(A.B);expect(F.callCount).toEqual(2)})});describe("ctrl/alt/shift",function(){var H=function(J,K,I){Ext.util.KeyMap.prototype.processEvent=function(L){L.altKey=J||false;L.ctrlKey=K||false;L.shiftKey=I||false;return L}};describe("alt",function(){it("should fire the event if the alt key is not pressed and the alt option is undefined",function(){H();B({key:A.A,handler:F});C(A.A);expect(F).toHaveBeenCalled()});it("should fire the event if the alt key is pressed and the alt option is undefined",function(){H(true);B({key:A.A,handler:F});C(A.A);expect(F).toHaveBeenCalled()});it("should fire the event if the alt key is not pressed and the alt option is false",function(){H();B({key:A.B,handler:F,alt:false});C(A.B);expect(F).toHaveBeenCalled()});it("should not fire the event if the alt key is pressed and the alt option is true",function(){H();B({key:A.C,handler:F,alt:true});C(A.C);expect(F).not.toHaveBeenCalled()});it("should not fire the event if the alt key is pressed and the alt option is false",function(){H(true);B({key:A.X,handler:F,alt:false});C(A.X);expect(F).not.toHaveBeenCalled()});it("should fire the event if the alt key is pressed and the alt option is true",function(){H(true);B({key:A.X,handler:F,alt:true});C(A.X);expect(F).toHaveBeenCalled()})});describe("ctrl",function(){it("should fire the event if the ctrl key is not pressed and the ctrl option is undefined",function(){H();B({key:A.A,handler:F});C(A.A);expect(F).toHaveBeenCalled()});it("should fire the event if the ctrl key is pressed and the ctrl option is undefined",function(){H(false,true);B({key:A.A,handler:F});C(A.A);expect(F).toHaveBeenCalled()});it("should fire the event if the ctrl key is not pressed and the ctrl option is false",function(){H();B({key:A.A,handler:F,ctrl:false});C(A.A);expect(F).toHaveBeenCalled()});it("should not fire the event if the ctrl key is pressed and the ctrl option is true",function(){H();B({key:A.C,handler:F,ctrl:true});C(A.C);expect(F).not.toHaveBeenCalled()});it("should not fire the event if the ctrl key is pressed and the ctrl option is false",function(){H(false,true);B({key:A.X,handler:F,ctrl:false});C(A.X);expect(F).not.toHaveBeenCalled()});it("should fire the event if the ctrl key is pressed and the ctrl option is true",function(){H(false,true);B({key:A.X,handler:F,ctrl:true});C(A.X);expect(F).toHaveBeenCalled()})});describe("shift",function(){it("should fire the event if the shift key is not pressed and the shift option is undefined",function(){H();B({key:A.A,handler:F});C(A.A);expect(F).toHaveBeenCalled()});it("should fire the event if the shift key is pressed and the shift option is undefined",function(){H(false,false,true);B({key:A.A,handler:F});C(A.A);expect(F).toHaveBeenCalled()});it("should fire the event if the shift key is not pressed and the shift option is false",function(){H();B({key:A.B,handler:F,shift:false});C(A.B);expect(F).toHaveBeenCalled()});it("should not fire the event if the shift key is pressed and the shift option is true",function(){H();B({key:A.C,handler:F,shift:true});C(A.C);expect(F).not.toHaveBeenCalled()});it("should not fire the event if the shift key is pressed and the shift option is false",function(){H(false,false,true);B({key:A.X,handler:F,shift:false});C(A.X);expect(F).not.toHaveBeenCalled()});it("should fire the event if the shift key is pressed and the shift option is true",function(){H(false,false,true);B({key:A.X,handler:F,shift:true});C(A.X);expect(F).toHaveBeenCalled()})});describe("combinations",function(){it("should not fire the event if alt & ctrl are set to true but only alt is pressed",function(){H(true);B({key:A.Y,handler:F,alt:true,ctrl:true});C(A.Y);expect(F).not.toHaveBeenCalled()});it("should not fire the event if alt, ctrl & shift are set but only shift and ctrl are pressed",function(){H(false,true,true);B({key:A.Y,handler:F,alt:true,ctrl:true,shift:true});C(A.Y);expect(F).not.toHaveBeenCalled()});it("should fire the event if alt & shift are set and alt, ctrl & shift are pressed",function(){H(true,true,true);B({key:A.Z,handler:F,alt:true,shift:true});C(A.Z);expect(F).toHaveBeenCalled()})})});describe("params/scope",function(){describe("scope",function(){it("should default the scope to the map",function(){var H;B({key:A.A,handler:function(){H=this}});C(A.A);expect(H).toEqual(G)});it("should execute the callback in the passed scope",function(){var H={},I;B({key:A.Y,scope:H,handler:function(){I=this}});C(A.Y);expect(I).toBe(H)});it("should execute each matched binding in the specified scope",function(){var K={},J={},I,H;B([{key:A.B,scope:K,handler:function(){I=this}},{key:A.X,scope:J,handler:function(){H=this}}]);C(A.B);C(A.X);expect(I).toBe(K);expect(H).toBe(J)})});it("should execute the handler with the key and an event",function(){var H,I;B({key:A.Z,handler:function(J,K){H=J;I=K}});C(A.Z);expect(H).toEqual(A.Z);expect(I.getXY()).toBeTruthy();expect(I.type).toBeTruthy();expect(I.getTarget()).toBeTruthy()})});describe("disable/enabling",function(){it("should be enabled by default",function(){B({key:A.B,fn:F});C(A.B);expect(F).toHaveBeenCalled()});it("should not fire any events when disabled",function(){B({key:A.C,fn:F});G.disable();C(A.C);expect(F).not.toHaveBeenCalled()});it("should fire events after being disabled/enabled",function(){B({key:A.Z,fn:F});G.disable();C(A.Z);expect(F).not.toHaveBeenCalled();G.enable();C(A.Z);expect(F).toHaveBeenCalled()})});describe("event propagation",function(){var I,H;beforeEach(function(){I=jasmine.createSpy("Agent 001");H=jasmine.createSpy("Agent 002");B([{key:[A.A,A.A],fn:I},{key:A.A,fn:H}])});describe("stopping",function(){beforeEach(function(){I.andReturn(false);spyOn(G,"processBinding").andCallThrough();G.disable();spyOn(G,"handleTargetEvent").andCallThrough();G.enable();C(A.A)});it("should not call subsequent handlers in processBinding",function(){expect(I.callCount).toBe(1)});it("should not call processBinding more than once",function(){expect(G.processBinding.callCount).toBe(1)});it("should not call subsequent bindings' handlers",function(){expect(H).not.toHaveBeenCalled()});it("should return false from the main event handler",function(){var J=G.handleTargetEvent.mostRecentCall.result;expect(J).toBe(false)})})});describe("destroying",function(){it("should unbind any events on the element",function(){B({key:A.A});G.destroy();C(A.A);expect(F).not.toHaveBeenCalled()});xit("should remove the element if removeEl is specified",function(){B({key:A.A});G.destroy(true);expect(jasmine.util.argsToArray(Ext.getBody().dom.childNodes)).not.toContain(D)})})})