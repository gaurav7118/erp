describe("Ext.util.KeyNav",function(){var D,F,C,B,E,A=Ext.util.KeyNav.keyOptions;beforeEach(function(){D=Ext.getBody().createChild({id:"test-keyNav-el"});C=function(G){F=new Ext.KeyNav(D,G)};B=function(I,G,H){jasmine.fireKeyEvent(D,F.getKeyEvent(),I)};E=jasmine.createSpy("defaultKeyNavHandler")});afterEach(function(){if(F){F.disable()}D.destroy();B=D=F=C=E=null});describe("keys",function(){describe("key options",function(){it("should fire for the left key",function(){C({left:E});B(A.left);expect(E).toHaveBeenCalled()});it("should fire for the right key",function(){C({right:E});B(A.right);expect(E).toHaveBeenCalled()});it("should fire for the up key",function(){C({up:E});B(A.up);expect(E).toHaveBeenCalled()});it("should fire for the down key",function(){C({down:E});B(A.down);expect(E).toHaveBeenCalled()});it("should fire for the pageUp key",function(){C({pageUp:E});B(A.pageUp);expect(E).toHaveBeenCalled()});it("should fire for the pageDown key",function(){C({pageDown:E});B(A.pageDown);expect(E).toHaveBeenCalled()});it("should fire for the del key",function(){C({del:E});B(A.del);expect(E).toHaveBeenCalled()});it("should fire for the home key",function(){C({home:E});B(A.home);expect(E).toHaveBeenCalled()});it("should fire for the end key",function(){C({end:E});B(A.end);expect(E).toHaveBeenCalled()});it("should fire for the enter key",function(){C({enter:E});B(A.enter);expect(E).toHaveBeenCalled()});it("should fire for the esc key",function(){C({esc:E});B(A.esc);expect(E).toHaveBeenCalled()});it("should fire for the tab key",function(){C({tab:E});B(A.tab);expect(E).toHaveBeenCalled()})});it("should bind multiple keys at once",function(){C({left:E,right:E});B(A.left);B(A.right);expect(E.callCount).toEqual(2)})});describe("scope/params",function(){it("should default the scope to the nav",function(){var G;C({left:function(){G=this}});B(A.left);expect(G).toBe(F)});it("should use the passed scope",function(){var G={},H;C({scope:G,left:function(){H=this}});B(A.left);expect(H).toBe(G)});it("should receive an event object as only argument",function(){var G;C({enter:function(H){G=H}});B(A.enter);expect(G.getXY()).toBeTruthy();expect(G.type).toBeTruthy();expect(G.target).toBeTruthy()})});describe("enable/disable",function(){beforeEach(function(){C({esc:E})});it("should be enabled by default",function(){B(A.esc);expect(E).toHaveBeenCalled()});it("should not fire any events when disabled",function(){F.disable();B(A.esc);expect(E).not.toHaveBeenCalled()});it("should fire events after being disabled then enabled",function(){F.disable();B(A.esc);expect(E).not.toHaveBeenCalled();F.enable();B(A.esc);expect(E).toHaveBeenCalled()})});describe("defaultEventAction",function(){var G;beforeEach(function(){C({tab:function(H){G=H}})});it("should not prevent default event action by default",function(){B(A.tab);var H=Ext.isIE9m?G.browserEvent.returnValue===false:G.browserEvent.defaultPrevented;expect(H).toBe(false)})})})