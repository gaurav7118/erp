describe("Ext.util.KeyboardInteractive",function(){var I=Ext.event.Event,C=jasmine.createSpy,A=jasmine.focusAndWait,J=jasmine.waitAWhile,E=jasmine.pressArrowKey,H=jasmine.fireKeyEvent,G,F;function B(K){return Ext.apply({xtype:"component",renderTo:Ext.getBody(),width:100,height:100,focusable:true,tabIndex:0,getFocusEl:function(){return this.el},onKeyDefault:Ext.emptyFn},K)}function D(K){var L=B(K);G=new Ext.Component(L);return G}afterEach(function(){if(G){G.destroy()}G=null});describe("config handling",function(){beforeEach(function(){D()});it("should accept binding as function",function(){spyOn(Ext.log,"warn");G.setKeyHandlers({UP:Ext.emptyFn});expect(Ext.log.warn).not.toHaveBeenCalled();var K=G.getKeyHandlers();expect(K.UP).toBe(Ext.emptyFn)});it("should accept binding as fn name",function(){G.setKeyHandlers({DOWN:"onKeyDefault"});var K=G.getKeyHandlers();expect(K.DOWN).toBe(Ext.emptyFn)});it("should throw on unknown keycode",function(){var K="Unknown key: FOO in keyHandlers config for "+G.id+". Key names should be in UPPER CASE.";expect(function(){G.setKeyHandlers({FOO:"onKeyFoo"})}).toThrow(K)});it("should warn on undefined binding",function(){spyOn(Ext.log,"warn");G.setKeyHandlers({UP:"onKeyUp"});var K=Ext.log.warn.mostRecentCall.args[0],L="Undefined binding onKeyUp for UP key in keyHandlers config for "+G.id;expect(K).toBe(L)})});describe("keydown listener",function(){describe("w/o config",function(){beforeEach(function(){D();F=G.getFocusEl()});it("should not attach listener initially",function(){expect(F.hasListener("keydown")).toBe(false)});it("should attach listener on config update",function(){G.setKeyHandlers({HOME:"onKeyDefault"});expect(F.hasListener("keydown")).toBe(true)})});describe("with config",function(){beforeEach(function(){D({keyHandlers:{LEFT:"onKeyDefault"}});F=G.getFocusEl()});it("should attach listener after render",function(){expect(F.hasListener("keydown")).toBe(true)});it("should not attach listener more than once",function(){G.setKeyHandlers({RIGHT:"onKeyDefault"});expect(F.hasListeners.keydown).toBe(1)})})});describe("handlers",function(){var L,K;beforeEach(function(){L=C("left");K=C("right");D({keyHandlers:{LEFT:"onKeyLeft",RIGHT:"onKeyRight"},onKeyLeft:L,onKeyRight:K})});afterEach(function(){L=K=null});describe("resolving",function(){it("should resolve handler name to function",function(){var M=G.getKeyHandlers();expect(M.LEFT).toBe(L)})});describe("invoking",function(){describe("matching a handler",function(){it("should invoke the handler",function(){E(G,"left");runs(function(){expect(L).toHaveBeenCalled()})});it("should pass the key event",function(){A(G);runs(function(){H(G.getFocusEl(),"keydown",I.RIGHT)});J();runs(function(){var M=K.mostRecentCall.args,N=M[0];expect(N.getKey()).toBe(I.RIGHT)})})});describe("not matching a handler",function(){it("should not throw",function(){A(G);runs(function(){expect(function(){H(G.getFocusEl(),"keydown",I.UP)}).not.toThrow()})})})})})})