describe("Exet.util.ProtoElement",function(){var B,A;beforeEach(function(){B=function(C){A=new Ext.util.ProtoElement(C||{})}});afterEach(function(){B=A=null});describe("defaults",function(){beforeEach(function(){B()});it("should set the clsProp to 'cls'",function(){expect(A.clsProp).toBe("cls")});it("should set the styleProp to 'style'",function(){expect(A.styleProp).toBe("style")});it("should set the removedProp to 'removed'",function(){expect(A.removedProp).toBe("removed")})});describe("initialization",function(){describe("cls",function(){it("should accept an array of classes",function(){B({cls:["foo","bar"]});expect(A.writeTo({}).cls).toBe("foo bar")});it("should accept a single class name",function(){B({cls:"foo"});expect(A.writeTo({}).cls).toBe("foo")});it("should accept a string of classes",function(){B({cls:"foo bar baz"});expect(A.writeTo({}).cls).toBe("foo bar baz")})});describe("style",function(){it("should accept a style string",function(){B({style:"border: 1px solid red; color: blue;"});expect(A.writeTo({}).style).toEqual({border:"1px solid red",color:"blue"})});it("should accept a style object",function(){B({style:{color:"red",margin:"5px"}});expect(A.writeTo({}).style).toEqual({color:"red",margin:"5px"})});it("should accept a function for styles",function(){B({style:function(){return{color:"yellow",padding:"2px"}}});expect(A.writeTo({}).style).toEqual({color:"yellow",padding:"2px"})})})});describe("classes",function(){describe("setting classes dynamically",function(){describe("addCls",function(){beforeEach(function(){B()});it("should accept an array of classes",function(){A.addCls(["foo","bar"]);expect(A.writeTo({}).cls).toBe("foo bar")});it("should accept a single class name",function(){A.addCls("foo");expect(A.writeTo({}).cls).toBe("foo")});it("should accept a string of classes",function(){A.addCls("foo bar baz");expect(A.writeTo({}).cls).toBe("foo bar baz")});it("should ignore an already added class",function(){A.addCls("foo");A.addCls("foo");expect(A.writeTo({}).cls).toBe("foo")});it("should return itself",function(){expect(A.addCls("foo")).toBe(A)})});describe("removeCls",function(){beforeEach(function(){B({cls:"foo bar baz"})});it("should accept an array of classes",function(){A.removeCls(["foo","bar"]);expect(A.writeTo({}).cls).toBe("baz")});it("should accept a single class name",function(){A.removeCls("foo");expect(A.writeTo({}).cls).toBe("bar baz")});it("should accept a string of classes",function(){A.removeCls("bar baz");expect(A.writeTo({}).cls).toBe("foo")});it("should ignore a class that doesn't exist",function(){A.removeCls("fake");expect(A.writeTo({}).cls).toBe("foo bar baz")});it("should return itself",function(){expect(A.removeCls("foo")).toBe(A)})})});describe("hasCls",function(){beforeEach(function(){B()});it("should return false when just created",function(){expect(A.hasCls("foo")).toBe(false)});it("should return false when the class doesn't exist",function(){expect(A.addCls("foo").hasCls("bar")).toBe(false)});it("should return true when the class exists",function(){expect(A.addCls("foo").hasCls("foo")).toBe(true)})})});describe("styles",function(){beforeEach(function(){B()});it("should accept a style string",function(){A.setStyle("color: red; margin: 3px;");expect(A.writeTo({}).style).toEqual({color:"red",margin:"3px"})});it("should accept a prop/value",function(){A.setStyle("color","green");expect(A.writeTo({}).style).toEqual({color:"green"})});it("should accept a style object",function(){A.setStyle({color:"blue",padding:"1px"});expect(A.writeTo({}).style).toEqual({color:"blue",padding:"1px"})})});describe("writeTo",function(){beforeEach(function(){B()});it("should modify the passed object",function(){var C={};A.addCls("foo");A.writeTo(C);expect(C.cls).toBe("foo")});it("should return the passed object",function(){var D={},C;A.addCls("foo");C=A.writeTo(D);expect(C).toBe(D)});it("should write out the class list",function(){A.addCls("foo bar");expect(A.writeTo({}).cls).toBe("foo bar")});it("should write out the styles as an object if styleIsText is false",function(){A.setStyle("color","red");expect(A.writeTo({}).style).toEqual({color:"red"})});it("should write out the styles as a string if styleIsText is true",function(){A.setStyle("color","green");A.styleIsText=true;expect(A.writeTo({}).style).toBe("color:green;")})});describe("flushing",function(){beforeEach(function(){B()});describe("addCls",function(){it("should return only added classes after flushing",function(){A.addCls("foo");A.flush();A.addCls("bar");expect(A.writeTo({}).cls).toBe("bar")});it("should ignore already added classes",function(){A.addCls("foo");A.flush();A.addCls("foo");expect(A.writeTo({}).cls).toBe("")});it("should be able to flush multiple times",function(){A.addCls("foo");A.flush();A.addCls("bar");A.flush();A.addCls("baz");expect(A.writeTo({}).cls).toBe("baz")})});describe("hasCls",function(){it("should still keep a class list after flushing",function(){A.addCls("foo");A.flush();A.addCls("bar");expect(A.hasCls("foo")).toBe(true)});it("should keep the class when removed and re-added",function(){A.addCls("foo");A.flush();A.removeCls("foo");A.addCls("foo");expect(A.hasCls("foo")).toBe(true)});it("should respect removed classes removed after a flush",function(){A.addCls("foo");A.flush();A.removeCls("foo");expect(A.hasCls("foo")).toBe(false)})});describe("removeCls",function(){it("should ignore classes that don't exist",function(){A.addCls("foo");A.flush();A.removeCls("bar");expect(A.writeTo({}).removed).toBeUndefined()});it("should remove an existing class",function(){A.addCls("foo");A.flush();A.removeCls("foo");expect(A.writeTo({}).removed).toEqual("foo")})});describe("styles",function(){it("should overwrite any style",function(){A.setStyle("color","red");A.flush();A.setStyle("color","blue");expect(A.writeTo({}).style).toEqual({color:"blue"})});it("should only contain new styles",function(){A.setStyle("color","red");A.flush();A.setStyle("margin","2px");expect(A.writeTo({}).style).toEqual({margin:"2px"})})})})})