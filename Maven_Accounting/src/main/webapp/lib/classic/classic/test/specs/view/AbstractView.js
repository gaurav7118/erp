describe("Ext.view.AbstractView",function(){var D,B,A=true,E=Ext.data.ProxyStore.prototype.load,C;function F(G){G=Ext.apply({renderTo:Ext.getBody(),width:300,height:100,x:10,y:10,store:D,itemTpl:"{field}",itemSelector:"div"},G);return B=new Ext.view.AbstractView(G)}beforeEach(function(){C=Ext.data.ProxyStore.prototype.load=function(){E.apply(this,arguments);if(A){this.flushLoad.apply(this,arguments)}return this};D=new Ext.data.Store({fields:["field"]})});afterEach(function(){Ext.data.ProxyStore.prototype.load=E;if(B){B.destroy()}D.destroy();D=B=null});describe("without any select config",function(){it("should give selection model mode 'SINGLE'",function(){B=new Ext.view.AbstractView({tpl:null,store:D,itemSelector:null});expect(B.getSelectionModel().mode).toEqual("SINGLE")})});describe("with single select config",function(){it("should give selection model mode 'SINGLE'",function(){B=new Ext.view.AbstractView({tpl:null,store:D,itemSelector:null,singleSelect:true});expect(B.getSelectionModel().mode).toEqual("SINGLE")})});describe("with simple select config",function(){it("should give selection model mode 'SIMPLE'",function(){B=new Ext.view.AbstractView({tpl:null,store:D,itemSelector:null,simpleSelect:true});expect(B.getSelectionModel().mode).toEqual("SIMPLE")})});describe("with multi select config",function(){it("should give selection model mode 'MULTI'",function(){B=new Ext.view.AbstractView({tpl:null,store:D,itemSelector:null,multiSelect:true});expect(B.getSelectionModel().mode).toEqual("MULTI")})});describe("Initial layout call",function(){it("should lay out once",function(){var I=Ext.layout.Context.prototype.run,G,H=0;Ext.layout.Context.prototype.run=Ext.Function.createInterceptor(I,function(){H++});G=new Ext.view.AbstractView({tpl:'<tpl for="."><div>{field}</div></tpl>',itemSelector:"div",store:{type:"array",fields:["field"],data:[["datum"]]},renderTo:document.body});waits(100);runs(function(){expect(H).toEqual(1);Ext.layout.Context.prototype.run=I;G.destroy()})})});describe("events",function(){it("should fire itemadd when adding an item to an empty view",function(){var G=false;var H=new Ext.view.AbstractView({itemTpl:"{field}",store:D,renderTo:Ext.getBody(),listeners:{itemadd:function(){G=true}}});D.add({field:"a"});expect(G).toBe(true);H.destroy()});it("should fire focuschange when changing focus in a view",function(){var G=false;var H=new Ext.view.AbstractView({itemTpl:"{field}",store:D,renderTo:Ext.getBody(),listeners:{focuschange:function(){G=true}}});D.add({field:"a"});expect(G).toBe(false);H.getNavigationModel().setPosition(0);expect(G).toBe(true);H.destroy()})});describe("ARIA",function(){function H(I,J){jasmine.expectAriaAttr(B,I,J)}function G(I){jasmine.expectNoAriaAttr(B,I)}describe("role",function(){beforeEach(function(){F()});it("should have listbox role",function(){H("role","listbox")})});describe("aria-multiselectable",function(){it("should not be set when mode == SINGLE",function(){F({singleSelect:true});G("aria-multiselectable")});it("should be set to true when mode == SIMPLE",function(){F({simpleSelect:true});H("aria-multiselectable","true")});it("should be set to true when mode == MULTI",function(){F({multiSelect:true});H("aria-multiselectable","true")})});describe("item attributes",function(){var L,J;function K(M,N){jasmine.expectAriaAttr(L,M,N)}function I(M){jasmine.expectNoAriaAttr(L,M)}beforeEach(function(){F({tpl:'<tpl for="."><div>{field}</div></tpl>',itemTpl:null});D.add({field:"foo"});J=B.getSelectionModel();L=B.all.item(0)});afterEach(function(){L=J=null});describe("role",function(){it("should have option role",function(){K("role","option")})});describe("aria-selected",function(){it("should not set aria-selected when rendering",function(){I("aria-selected")});it("should set aria-selected to true when selected",function(){J.select(0);K("aria-selected","true")});it("should remove aria-selected when deselected",function(){J.select(0);J.deselectAll();I("aria-selected")})})})})})