describe("Ext.window.Window",function(){var B,A;function C(D,E){D=Ext.apply(D||{},{width:200,height:200,x:10,y:10});B=new Ext.window.Window(D);if(!E){B.show()}return B}afterEach(function(){if(B){B.hide();Ext.destroy(B);B=null}if(A){Ext.destroy(A);A=null}});describe("expandOnShow",function(){it("should expand a collapsed window on show with expandOnShow: true",function(){B=new Ext.window.Window({title:"Foo",collapsible:true,collapsed:true,width:200,height:100,expandOnShow:true});B.show();expect(B.getHeight()).toBe(100);expect(B.collapsed).toBe(false)});it("should leave a collapsed window on show with expandOnShow: false",function(){B=new Ext.window.Window({title:"Foo",collapsible:true,collapsed:true,width:200,height:100,expandOnShow:false});B.show();expect(B.getHeight()).toBe(B.header.getHeight());expect(B.collapsed).toBe(true)})});describe("toFront on mousedown",function(){it("should bring to front on mousedown on the header",function(){var D=new Ext.window.Window({title:"Foo",collapsible:true,collapsed:true,width:200,height:100,expandOnShow:true});B=new Ext.window.Window({title:"Foo",collapsible:true,collapsed:true,width:200,height:100,expandOnShow:true});B.show();D.show();expect(D.zIndexManager.getActive()===D);jasmine.fireMouseEvent(B.header.el.dom,"mousedown");expect(D.zIndexManager.getActive()===B);Ext.destroy(D)})});describe("shadow",function(){it("should sync the shadow on layout",function(){B=new Ext.window.Window({title:"Window",items:[{xtype:"textfield",width:200}]});B.showAt([0,0]);B.updateLayout();var E=B.getWidth();var D=B.el.shadow.el.getWidth();if(Ext.isIE8){expect(D).toBe(E+9)}else{expect(D).toBe(E)}});it("should hide the shadow on hide to a target",function(){var D=Ext.getBody().appendChild({}),E=false;B=new Ext.window.Window({title:"Window",items:[{xtype:"textfield",width:200}]});B.showAt([0,0]);expect(B.el.shadow.hidden).toBe(false);B.hide(D,function(){E=true});waitsFor(function(){return E});runs(function(){expect(B.el.shadow.hidden).toBe(true);D.destroy()})})});describe("animations & setPagePosition",function(){it("should normalize position to 'renderTo' element",function(){var D;runs(function(){A=Ext.widget({xtype:"panel",x:20,y:10,width:500,height:500,renderTo:Ext.getBody(),layout:"fit",items:[{id:"panel",tbar:[{id:"button",text:"Go"}]}]});B=new Ext.window.Window({renderTo:Ext.getCmp("panel").body.dom,title:"window",width:300,height:300,x:0,y:0}).show(Ext.getCmp("button").getEl().dom);D=Ext.fx.Manager.getFxQueue(B.ghostPanel.id)});waitsFor(function(){return D.length===0});runs(function(){var I=B.el.getXY(),H=A.el.getXY(),G=A.items.first().dockedItems.first(),E=2,F=2;expect(I[0]).toBe(H[0]+F);expect(I[1]).toBe(H[1]+G.getHeight()+E)})})});describe("autoShow in a Panel",function(){it("Should show the Window inside the Panel",function(){A=Ext.create("Ext.panel.Panel",{renderTo:document.body,height:200,width:200,title:"Panel",items:[{id:"constrainedWin",xtype:"window",title:"Constrained Window",height:100,width:100,constrain:true,autoShow:true}]});B=Ext.getCmp("constrainedWin");expect(A.body.getRegion().contains(B.el.getRegion())).toBe(true)})});describe("constrained in a Panel",function(){it("Should not move when the container or window is resized",function(){var D;A=Ext.create("Ext.panel.Panel",{renderTo:document.body,height:200,width:200,title:"Panel",items:[{id:"constrainedWin",xtype:"window",title:"Constrained Window",height:100,width:100,constrain:true,autoShow:true}]});B=Ext.getCmp("constrainedWin");D=B.el.getXY();A.setHeight(220);expect(B.el.getXY()).toEqual(D);Ext.globalEvents.fireResize();expect(B.el.getXY()).toEqual(D);B.constrainHeader=true;A.setHeight(240);expect(B.el.getXY()).toEqual(D);Ext.globalEvents.fireResize();expect(B.el.getXY()).toEqual(D)});it("Should apply constraint insets and not allow moving past them",function(){var E,H,D,I,F,G;A=Ext.create("Ext.panel.Panel",{renderTo:document.body,height:200,width:200,items:[{id:"constrainedWin",xtype:"window",title:"Constrained Window",height:100,width:100,constraintInsets:"20 -20 -20 20",constrain:true,autoShow:true}]});B=Ext.getCmp("constrainedWin");B.setPosition([0,0]);D=B.getLocalX();I=B.getLocalY();E=A.getWidth();H=B.getWidth(),F=Ext.Element.parseBox(B.constraintInsets);G=(E-H-D-1);B.setPosition([-500,-500]);expect(B.getLocalXY()).toEqual([D,I]);B.setPosition([500,-500]);expect(B.getLocalXY()).toEqual([D+G-F.left,I]);B.setPosition([-500,500]);expect(B.getLocalXY()).toEqual([D,I+G-F.top]);B.setPosition([500,500]);expect(B.getLocalXY()).toEqual([D+G+F.right,I+G+F.bottom])})});describe("maximize/restore",function(){it("should not throw an error if maximizing with no header",function(){B=new Ext.window.Window({height:100,width:100,header:false,maximized:true});expect(function(){B.show()}).not.toThrow()});it("should be able to configured as maximized with no dimensions",function(){B=new Ext.window.Window({title:"Foo",maximized:true});B.show();expect(B.getWidth()).toBe(Ext.dom.Element.getViewportWidth());expect(B.getHeight()).toBe(Ext.dom.Element.getViewportHeight())});it("should not cause an exception when configuring with maximized: true & constrainHeader: true",function(){B=new Ext.window.Window({title:"Foo",maximized:true,constrainHeader:true});expect(function(){B.show()}).not.toThrow();expect(B.getWidth()).toBe(Ext.dom.Element.getViewportWidth());expect(B.getHeight()).toBe(Ext.dom.Element.getViewportHeight())});describe("tools",function(){beforeEach(function(){B=new Ext.window.Window({width:100,height:100,title:"Win",collapsible:true,maximizable:true,autoShow:true});B.maximize()});describe("maximizing",function(){it("should change the maximize tool's type to 'restore'",function(){expect(B.tools.maximize.type).toBe("restore")});it("should hide the collapse tool",function(){expect(B.collapseTool.isVisible()).toBe(false)})});describe("restoring",function(){it("should change the maximize tool's type back to 'mazimize'",function(){B.restore();expect(B.tools.maximize.type).toBe("maximize")});it("should show the collapse tool",function(){B.restore();expect(B.collapseTool.isVisible()).toBe(true)})})});describe("events",function(){beforeEach(function(){B=new Ext.window.Window({width:100,height:100,title:"Win",collapsible:true,maximizable:true,autoShow:true})});it("should fire a maximize event and pass the window",function(){var D;B.on("maximize",function(E){D=E});B.maximize();expect(D).toBe(B)});it("should not fire an event if the window is already maximized",function(){var D=false;B.maximize();B.on("maximize",function(){D=true});B.maximize();expect(D).toBe(false)});it("should fire a restore event and pass the window",function(){var D;B.on("restore",function(E){D=E});B.setPosition(100,100);B.maximize();expect(B.getPosition()).toEqual([0,0]);B.restore();expect(B.getPosition()).toEqual([100,100]);expect(D).toBe(B)});it("should not fire an event if the window is already restored",function(){var D=false;B.maximize();B.restore();B.on("restore",function(){D=true});B.restore();expect(D).toBe(false)})});describe("sizing",function(){it("should fill the container when maximizing",function(){B=new Ext.window.Window({width:100,height:100,title:"Win",maximizable:true,autoShow:true});B.maximize();expect(B.getSize()).toEqual(Ext.getBody().getViewSize())});it("should restore to the previous size when configured",function(){B=new Ext.window.Window({width:100,height:100,title:"Win",maximizable:true,autoShow:true});B.maximize();B.restore();var D=B.getSize();expect(D.width).toBe(100);expect(D.height).toBe(100)});(Ext.isIE8?xit:it)("should restore to the previous percentage size when configured",function(){B=new Ext.window.Window({width:"60%",height:"30%",title:"Win",maximizable:true,autoShow:true});var E=B.getSize();B.maximize();B.restore();var D=B.getSize();expect(D.width).toBe(E.width);expect(D.height).toBe(E.height)});it("should restore a shrink wrapped height",function(){B=new Ext.window.Window({width:100,title:"Win",maximizable:true,autoShow:true,items:[{xtype:"component",style:"border: 1px solid red;",html:'<div style="height: 98px;"></div>'},{xtype:"component",style:"border: 1px solid blue;",html:'<div style="height: 98px;"></div>'}]});var D=B.getHeight()-200;B.maximize();B.items.last().hide();B.restore();expect(B.getHeight()).toBe(D+100)});it("should restore a shrink wrapped width",function(){B=new Ext.window.Window({height:100,title:"Win",maximizable:true,autoShow:true,items:[{xtype:"component",style:"border: 1px solid red;",html:'<div style="width: 48px;"></div>'},{xtype:"component",style:"border: 1px solid blue;",html:'<div style="width: 98px;"></div>'}]});var D=B.getWidth()-100;B.maximize();B.items.last().hide();B.restore();expect(B.getWidth()).toBe(D+50)});it("should restore the position",function(){B=new Ext.window.Window({width:100,height:100,title:"Win",maximizable:true,autoShow:true,x:40,y:70});B.maximize();B.restore();var D=B.getPosition();expect(D[0]).toBe(40);expect(D[1]).toBe(70)})});describe("in a panel",function(){var F,G,H,E;function D(I){while(I){expect(E).toEqual(B.getXY());B.maximize();B.restore();expect(E).toEqual(B.getXY());I--}}beforeEach(function(){F=Ext.widget({xtype:"panel",title:"mypanel",style:{position:"absolute",top:100,left:100},height:500,width:500,items:[{xtype:"window",width:100,height:100,title:"Win",constrainHeader:true,maximizable:true,autoShow:true}],renderTo:Ext.getBody()});G=F.body;B=F.down("window");H=parseInt(B.header.el.getStyle("border-top"))});afterEach(function(){F=G=H=E=Ext.destroy(F)});it("should not inherit absolute positions from its floatParent when maximized",function(){B.maximize();expect(B.getY()).toBe(G.getY()+G.getBorderWidth("t"))});it("should retain the same resize position when toggling maximize/restore",function(){E=B.getXY();D(8)})})});describe("destruction during dragging",function(){beforeEach(function(){B=new Ext.window.Window({title:"Drag Me",height:100,width:300,x:0,y:0});B.show()});it("should tolerate destruction during dragging",function(){var D=5;runs(function(){jasmine.fireMouseEvent(B.header.el,"mouseover",D,D);jasmine.fireMouseEvent(B.header.el,"mousedown",D,D);jasmine.fireMouseEvent(B.header.el,"mousemove",100,0)});waits(1);runs(function(){B.destroy();jasmine.fireMouseEvent(document.body,"mousemove",100,0);jasmine.fireMouseEvent(document.body,"mouseup",200,0)});waits(1);runs(function(){expect(B.destroyed).toBe(true)})})});it("should maintain the correct titlePosition while dragging",function(){B=Ext.widget({xtype:"window",renderTo:Ext.getBody(),height:100,width:300,closable:true,maximizable:true,tools:[{type:"pin"}],header:{title:"Title",titlePosition:2}}).show();B.ghost();var D=B.ghostPanel.header;expect(D.items.indexOf(D.titleCmp)).toBe(2);B.destroy()});it("should correctly render the minimize/maximize tools when there is an iconCls present",function(){B=Ext.create({xtype:"window",renderTo:document.body,title:"Window",iconCls:"foo",height:200,width:200,maximizable:true,minimizable:true}).show();var D=B.header;expect(D.items.getAt(1).type).toBe("minimize");expect(D.items.getAt(2).type).toBe("maximize")});describe("defaultFocus",function(){var D=jasmine.waitForFocus,G=jasmine.focusAndWait,E=jasmine.expectFocused,F;afterEach(function(){F=null});it("should accept a component instance",function(){F=new Ext.form.field.Text();C({defaultFocus:F,items:F});D(F);E(F)});describe("with a number",function(){it("should focus the nth button",function(){C({defaultFocus:1,buttons:[{text:"A"},{text:"B",itemId:"b"}]},true);F=B.down("#b");B.show();D(F);E(F)});it("should focus the window if there is no button index",function(){C({defaultFocus:10,defaultType:"textfield",buttons:[{text:"Foo"}]});D(B);E(B)})});describe("with a string",function(){it("should match the itemId of a child component",function(){C({defaultFocus:"bar",defaultType:"textfield",items:[{itemId:"foo"},{itemId:"bar"},{itemId:"baz"}]});F=B.down("#bar");D(F);E(F)});it("should match a child selector",function(){C({defaultFocus:"[foo=3]",defaultType:"textfield",items:[{itemId:"foo",foo:1},{itemId:"bar",foo:2},{itemId:"baz",foo:3}]});F=B.down("#baz");D(F);E(F)});it("should allow an xtype#id selector",function(){C({defaultFocus:"textfield#bar",defaultType:"textfield",items:[{itemId:"foo",foo:1},{itemId:"bar",foo:2},{itemId:"baz",foo:3}]});F=B.down("#bar");D(F);E(F)});it("should focus the window if the selector does not match",function(){C({defaultFocus:"#notthere",defaultType:"textfield",items:[{itemId:"foo"},{itemId:"bar"},{itemId:"baz"}]});D(B);E(B)})});it("it should not throw an error when the defaultFocus is a component and a loadmask is shown",function(){C({defaultFocus:"username",items:[{xtype:"textfield",itemId:"username"}]});F=B.down("#username");D(F);runs(function(){expect(function(){B.setLoading(true)}).not.toThrow()})});describe("when header is clicked",function(){var H;beforeEach(function(){H=new Ext.button.Button({renderTo:Ext.getBody(),text:"button"});C({draggable:false,defaultFocus:"textfield",items:[{xtype:"textfield",fieldLabel:"foo",itemId:"foo"}]});F=B.down("#foo");G(H)});afterEach(function(){Ext.destroy(H);H=null});it("should focus defaultFocus when header is clicked",function(){runs(function(){jasmine.fireMouseEvent(B.header.el,"click")});E(F)})})});describe("tab guards",function(){var E=Ext.getBody(),F,G;afterEach(function(){Ext.destroy(F,G);F=G=null});describe("initTabGuards",function(){function H(J){var I=B.el.findTabbableElements({skipSelf:true});expect(I.length).toBe(J)}describe("initially empty window",function(){beforeEach(function(){C({title:"frobbe",closable:false})});it("should not set up tab guards",function(){H(0)});it("should add tab guards when tool is added",function(){B.addTool({type:"pin"});H(3)});it("should add tab guards when an item is docked",function(){B.addDocked({xtype:"button",text:"foo"});H(3)});it("should add tab guards when a child component is added",function(){B.add({xtype:"textfield",fieldLabel:"Throbbe"});H(3)})});describe("window becoming empty",function(){describe("removing items",function(){it("should disarm tab guards when last item is removed",function(){C({title:"guzzard",closable:false,items:[{xtype:"button",text:"frobbe"}]});var I=B.down("button");B.remove(I,true);H(0)});it("should disarm tab guards when last docked item is removed",function(){C({title:"blerg",closable:false,dockedItems:[{xtype:"button",text:"sploosh!"}]});var I=B.down("button");B.removeDocked(I,true);H(0)})})})});describe("ARIA attributes",function(){beforeEach(function(){C()});function H(I){describe(I+" guard",function(){var L;function K(M,N){jasmine.expectAriaAttr(L,M,N)}function J(M){jasmine.expectNoAriaAttr(L,M)}beforeEach(function(){L=I==="top"?B.tabGuardBeforeEl:B.tabGuardAfterEl});it("should have tabindex",function(){expect(L.isTabbable()).toBe(true)});it("should have button role on the top guard",function(){K("role","button")});it("should have aria-busy on the top guard",function(){K("aria-busy","true")});it("should have no title",function(){J("title")});it("should not have aria-label",function(){J("aria-label")});it("should not have aria-labelledby",function(){J("aria-labelledby")});it("should have no aria-describedby",function(){J("aria-describedby")})})}H("top");H("bottom")});function D(L){var N=jasmine.pressTabKey,K=jasmine.expectFocused,H,J,M,I;describe("tabbing with focusables inside, modal: "+L,function(){beforeEach(function(){F=new Ext.button.Button({renderTo:E,id:"beforeButton",text:"before"});C({title:"foo",modal:L,minimizable:true,maximizable:true,layout:"form",items:[{xtype:"textfield",name:"foo",fieldLabel:"foo"},{xtype:"textfield",name:"bar",fieldLabel:"bar"}],buttons:[{text:"OK"},{text:"Cancel"}]});H=B.down("tool");J=B.down("textfield[name=foo]");M=B.down("textfield[name=bar]");I=B.down("button[text=OK]");G=new Ext.button.Button({renderTo:E,id:"afterButton",text:"after"})});describe("from outside the window",function(){it("should tab from before button to the first tool",function(){N(F,true);K(H)});it("should shift-tab from after button to the OK button",function(){N(G,false);K(I)})});describe("from window",function(){it("should tab to the first tool",function(){N(B,true);K(H)})});describe("within window",function(){describe("forward",function(){it("should tab from first tool to the foo field",function(){N(H,true);K(J)});it("should tab from foo field to bar field",function(){N(J,true);K(M)});it("should tab from bar field to OK button",function(){N(M,true);K(I)});it("should tab from OK button back to the first tool",function(){N(I,true);K(H)})});describe("backward",function(){it("should shift-tab from Ok button to bar field",function(){N(I,false);K(M)});it("should shift-tab from bar field to foo field",function(){N(M,false);K(J)});it("should shift-tab from foo field to the firs tool",function(){N(J,false);K(H)});it("should shift-tab from the first tool back to OK button",function(){N(H,false);K(I)})})})});if(!L){describe("tabbing with no focusables",function(){beforeEach(function(){F=new Ext.button.Button({renderTo:E,id:"beforeButton",text:"before"});C({title:"bar",modal:L,closable:false,draggable:false});G=new Ext.button.Button({renderTo:E,id:"afterButton",text:"after"})});describe("from outside the window",function(){it("should tab from before button to the after button",function(){N(F,true);K(G)});it("should shift-tab from after button to the before button",function(){N(G,false);K(F)})})})}}if(!Ext.isIE9){D(false);D(true)}})})