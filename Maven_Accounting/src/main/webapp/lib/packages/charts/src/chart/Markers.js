Ext.define("Ext.chart.Markers",{extend:"Ext.draw.sprite.Instancing",isMarkers:true,defaultCategory:"default",constructor:function(){this.callParent(arguments);this.categories={};this.revisions={}},destroy:function(){this.categories=null;this.revisions=null;this.callParent()},getMarkerFor:function(B,A){if(B in this.categories){var C=this.categories[B];if(A in C){return this.get(C[A])}}},clear:function(A){A=A||this.defaultCategory;if(!(A in this.revisions)){this.revisions[A]=1}else{this.revisions[A]++}},putMarkerFor:function(E,B,C,H,F){E=E||this.defaultCategory;var D=this,G=D.categories[E]||(D.categories[E]={}),A;if(C in G){D.setAttributesFor(G[C],B,H)}else{G[C]=D.getCount();D.createInstance(B,H)}A=D.get(G[C]);if(A){A.category=E;if(!F){A.revision=D.revisions[E]||(D.revisions[E]=1)}}},getMarkerBBoxFor:function(C,A,B){if(C in this.categories){var D=this.categories[C];if(A in D){return this.getBBoxFor(D[A],B)}}},getBBox:function(){return null},render:function(A,K,B){var F=this,J=F.revisions,I=F.attr.matrix,H=F.getTemplate(),D=H.attr,G,C,E;I.toContext(K);H.preRender(A,K,B);H.useAttributes(K,B);for(C=0,E=F.instances.length;C<E;C++){G=F.get(C);if(G.hidden||G.revision!==J[G.category]){continue}K.save();H.attr=G;H.useAttributes(K,B);H.render(A,K,B);K.restore()}H.attr=D}})