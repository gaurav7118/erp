Ext.define("Ext.draw.Point",{requires:["Ext.draw.Draw","Ext.draw.Matrix"],isPoint:true,x:0,y:0,length:0,angle:0,angleUnits:"degrees",statics:{fly:(function(){var A=null;return function(B,C){if(!A){A=new Ext.draw.Point()}A.constructor(B,C);return A}})()},constructor:function(A,C){var B=this;if(typeof A==="number"){B.x=A;if(typeof C==="number"){B.y=C}else{B.y=A}}else{if(Ext.isArray(A)){B.x=A[0];B.y=A[1]}else{if(A){B.x=A.x;B.y=A.y}}}B.calculatePolar()},calculateCartesian:function(){var B=this,A=B.length,C=B.angle;if(B.angleUnits==="degrees"){C=Ext.draw.Draw.rad(C)}B.x=Math.cos(C)*A;B.y=Math.sin(C)*A},calculatePolar:function(){var B=this,A=B.x,C=B.y;B.length=Math.sqrt(A*A+C*C);B.angle=Math.atan2(C,A);if(B.angleUnits==="degrees"){B.angle=Ext.draw.Draw.degrees(B.angle)}},setX:function(A){this.x=A;this.calculatePolar()},setY:function(A){this.y=A;this.calculatePolar()},set:function(A,B){this.constructor(A,B)},setAngle:function(A){this.angle=A;this.calculateCartesian()},setLength:function(A){this.length=A;this.calculateCartesian()},setPolar:function(B,A){this.angle=B;this.length=A;this.calculateCartesian()},clone:function(){return new Ext.draw.Point(this.x,this.y)},add:function(A,C){var B=Ext.draw.Point.fly(A,C);return new Ext.draw.Point(this.x+B.x,this.y+B.y)},sub:function(A,C){var B=Ext.draw.Point.fly(A,C);return new Ext.draw.Point(this.x-B.x,this.y-B.y)},mul:function(A){return new Ext.draw.Point(this.x*A,this.y*A)},div:function(A){return new Ext.draw.Point(this.x/A,this.y/A)},dot:function(A,C){var B=Ext.draw.Point.fly(A,C);return this.x*B.x+this.y*B.y},equals:function(A,C){var B=Ext.draw.Point.fly(A,C);return this.x===B.x&&this.y===B.y},rotate:function(F,C){var D,E,B,G,A;if(this.angleUnits==="degrees"){F=Ext.draw.Draw.rad(F);D=Math.sin(F);E=Math.cos(F)}if(C){B=C.x;G=C.y}else{B=0;G=0}A=Ext.draw.Matrix.fly([E,D,-D,E,B-E*B+G*D,G-E*G+B*-D]).transformPoint(this);return new Ext.draw.Point(A)},transform:function(A){if(A&&A.isMatrix){return new Ext.draw.Point(A.transformPoint(this))}else{if(arguments.length===6){return new Ext.draw.Point(Ext.draw.Matrix.fly(arguments).transformPoint(this))}else{Ext.raise("Invalid parameters.")}}},round:function(){return new Ext.draw.Point(Math.round(this.x),Math.round(this.y))},ceil:function(){return new Ext.draw.Point(Math.ceil(this.x),Math.ceil(this.y))},floor:function(){return new Ext.draw.Point(Math.floor(this.x),Math.floor(this.y))},abs:function(A,B){return new Ext.draw.Point(Math.abs(this.x),Math.abs(this.y))},normalize:function(C){var B=this.x,F=this.y,A,E,D;C=C||1;if(B===0){A=0;E=C*Ext.Number.sign(F)}else{D=F/B;A=C/Math.sqrt(1+D*D);E=A*D}return new Ext.draw.Point(A,E)},getDistanceToLine:function(C,B){if(arguments.length===4){C=new Ext.draw.Point(arguments[0],arguments[1]);B=new Ext.draw.Point(arguments[2],arguments[3])}var D=B.sub(C).normalize(),A=C.sub(this);return A.sub(D.mul(A.dot(D)))},isZero:function(){return this.x===0&&this.y===0},isNumber:function(){return Ext.isNumber(this.x+this.y)}})