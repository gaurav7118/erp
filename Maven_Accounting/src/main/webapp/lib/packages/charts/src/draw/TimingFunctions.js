Ext.define("Ext.draw.TimingFunctions",function(){var G=Math.pow,I=Math.sin,L=Math.cos,K=Math.sqrt,E=Math.PI,B=["quad","cube","quart","quint"],C={pow:function(O,N){return G(O,N||6)},expo:function(N){return G(2,8*(N-1))},circ:function(N){return 1-K(1-N*N)},sine:function(N){return 1-I((1-N)*E/2)},back:function(N,O){O=O||1.616;return N*N*((O+1)*N-O)},bounce:function(P){for(var O=0,N=1;1;O+=N,N/=2){if(P>=(7-4*O)/11){return N*N-G((11-6*O-11*P)/4,2)}}},elastic:function(O,N){return G(2,10*--O)*L(20*O*E*(N||1)/3)}},J={},A,F,D;function H(N){return function(O){return G(O,N)}}function M(N,O){J[N+"In"]=function(P){return O(P)};J[N+"Out"]=function(P){return 1-O(1-P)};J[N+"InOut"]=function(P){return(P<=0.5)?O(2*P)/2:(2-O(2*(1-P)))/2}}for(D=0,F=B.length;D<F;++D){C[B[D]]=H(D+2)}for(A in C){M(A,C[A])}J.linear=Ext.identityFn;J.easeIn=J.quadIn;J.easeOut=J.quadOut;J.easeInOut=J.quadInOut;return{singleton:true,easingMap:J}},function(A){Ext.apply(A,A.easingMap)})