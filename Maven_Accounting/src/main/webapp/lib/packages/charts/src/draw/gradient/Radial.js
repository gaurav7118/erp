Ext.define("Ext.draw.gradient.Radial",{extend:"Ext.draw.gradient.Gradient",type:"radial",config:{start:{x:0,y:0,r:0},end:{x:0,y:0,r:1}},applyStart:function(A,B){if(!B){return A}var C={x:B.x,y:B.y,r:B.r};if("x" in A){C.x=A.x}else{if("centerX" in A){C.x=A.centerX}}if("y" in A){C.y=A.y}else{if("centerY" in A){C.y=A.centerY}}if("r" in A){C.r=A.r}else{if("radius" in A){C.r=A.radius}}return C},applyEnd:function(B,A){if(!A){return B}var C={x:A.x,y:A.y,r:A.r};if("x" in B){C.x=B.x}else{if("centerX" in B){C.x=B.centerX}}if("y" in B){C.y=B.y}else{if("centerY" in B){C.y=B.centerY}}if("r" in B){C.r=B.r}else{if("radius" in B){C.r=B.radius}}return C},generateGradient:function(L,K){var A=this.getStart(),B=this.getEnd(),I=K.width*0.5,D=K.height*0.5,H=K.x+I,F=K.y+D,G=L.createRadialGradient(H+A.x*I,F+A.y*D,A.r*Math.max(I,D),H+B.x*I,F+B.y*D,B.r*Math.max(I,D)),J=this.getStops(),E=J.length,C;for(C=0;C<E;C++){G.addColorStop(J[C].offset,J[C].color)}return G}})