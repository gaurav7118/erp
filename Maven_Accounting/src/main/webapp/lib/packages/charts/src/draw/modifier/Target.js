Ext.define("Ext.draw.modifier.Target",{requires:["Ext.draw.Matrix"],extend:"Ext.draw.modifier.Modifier",alias:"modifier.target",statics:{uniqueId:0},prepareAttributes:function(A){var B=this.getPrevious();if(B){B.prepareAttributes(A)}A.attributeId="attribute-"+Ext.draw.modifier.Target.uniqueId++;if(!A.hasOwnProperty("canvasAttributes")){A.bbox={plain:{dirty:true},transform:{dirty:true}};A.dirty=true;A.pendingUpdaters={};A.canvasAttributes={};A.matrix=new Ext.draw.Matrix();A.inverseMatrix=new Ext.draw.Matrix()}},applyChanges:function(F,I){Ext.apply(F,I);var J=this.getSprite(),M=F.pendingUpdaters,H=J.self.def.getTriggers(),N,A,K,B,E,L,D,C,G;for(B in I){E=true;if((N=H[B])){J.scheduleUpdaters(F,N,[B])}if(F.template&&I.removeFromInstance&&I.removeFromInstance[B]){delete F[B]}}if(!E){return }if(M.canvas){L=M.canvas;delete M.canvas;for(D=0,G=L.length;D<G;D++){B=L[D];F.canvasAttributes[B]=F[B]}}if(F.hasOwnProperty("children")){A=F.children;for(D=0,G=A.length;D<G;D++){K=A[D];Ext.apply(K.pendingUpdaters,M);if(L){for(C=0;C<L.length;C++){B=L[C];K.canvasAttributes[B]=K[B]}}J.callUpdaters(K)}}J.setDirty(true);J.callUpdaters(F)},popUp:function(A,B){this.applyChanges(A,B)},pushDown:function(A,B){var C=this.getPrevious();if(C){B=C.pushDown(A,B)}this.applyChanges(A,B);return B}})