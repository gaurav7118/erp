Ext.define("Ext.draw.sprite.AttributeParser",{singleton:true,attributeRe:/^url\(#([a-zA-Z\-]+)\)$/,requires:["Ext.draw.Color","Ext.draw.gradient.GradientDefinition"],"default":Ext.identityFn,string:function(A){return String(A)},number:function(A){if(Ext.isNumber(+A)){return A}},angle:function(A){if(Ext.isNumber(A)){A%=Math.PI*2;if(A<-Math.PI){A+=Math.PI*2}else{if(A>=Math.PI){A-=Math.PI*2}}return A}},data:function(A){if(Ext.isArray(A)){return A.slice()}else{if(A instanceof Float32Array){return new Float32Array(A)}}},bool:function(A){return !!A},color:function(A){if(A instanceof Ext.draw.Color){return A.toString()}else{if(A instanceof Ext.draw.gradient.Gradient){return A}else{if(!A){return Ext.draw.Color.NONE}else{if(Ext.isString(A)){if(A.substr(0,3)==="url"){A=Ext.draw.gradient.GradientDefinition.get(A);if(Ext.isString(A)){return A}}else{return Ext.draw.Color.fly(A).toString()}}}}}if(A.type==="linear"){return Ext.create("Ext.draw.gradient.Linear",A)}else{if(A.type==="radial"){return Ext.create("Ext.draw.gradient.Radial",A)}else{if(A.type==="pattern"){return Ext.create("Ext.draw.gradient.Pattern",A)}else{return Ext.draw.Color.NONE}}}},limited:function(A,B){return function(C){C=+C;return Ext.isNumber(C)?Math.min(Math.max(C,A),B):undefined}},limited01:function(A){A=+A;return Ext.isNumber(A)?Math.min(Math.max(A,0),1):undefined},enums:function(){var D={},A=Array.prototype.slice.call(arguments,0),B,C;for(B=0,C=A.length;B<C;B++){D[A[B]]=true}return function(E){return E in D?E:undefined}}})