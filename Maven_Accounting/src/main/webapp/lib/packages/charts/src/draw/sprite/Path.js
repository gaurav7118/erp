Ext.define("Ext.draw.sprite.Path",{extend:"Ext.draw.sprite.Sprite",requires:["Ext.draw.Draw","Ext.draw.Path"],alias:["sprite.path","Ext.draw.Sprite"],type:"path",isPath:true,inheritableStatics:{def:{processors:{path:function(B,A){if(!(B instanceof Ext.draw.Path)){B=new Ext.draw.Path(B)}return B}},aliases:{d:"path"},triggers:{path:"bbox"},updaters:{path:function(A){var B=A.path;if(!B||B.bindAttr!==A){B=new Ext.draw.Path();B.bindAttr=A;A.path=B}B.clear();this.updatePath(B,A);this.scheduleUpdater(A,"bbox",["path"])}}}},updatePlainBBox:function(A){if(this.attr.path){this.attr.path.getDimension(A)}},updateTransformedBBox:function(A){if(this.attr.path){this.attr.path.getDimensionWithTransform(this.attr.matrix,A)}},render:function(B,C){var E=this.attr.matrix,A=this.attr;if(!A.path||A.path.params.length===0){return }E.toContext(C);C.appendPath(A.path);C.fillStroke(A);var D=A.debug||this.statics().debug||Ext.draw.sprite.Sprite.debug;if(D){D.bbox&&this.renderBBox(B,C);D.xray&&this.renderXRay(B,C)}},renderXRay:function(A,K){var H=this.attr,J=H.matrix,F=H.inverseMatrix,M=H.path,B=M.commands,C=M.params,I=B.length,G=Math.PI*2,L=2,E,D;J.toContext(K);K.beginPath();for(E=0,D=0;E<I;E++){switch(B[E]){case"M":K.moveTo(C[D]-L,C[D+1]-L);K.rect(C[D]-L,C[D+1]-L,L*2,L*2);D+=2;break;case"L":K.moveTo(C[D]-L,C[D+1]-L);K.rect(C[D]-L,C[D+1]-L,L*2,L*2);D+=2;break;case"C":K.moveTo(C[D]+L,C[D+1]);K.arc(C[D],C[D+1],L,0,G,true);D+=2;K.moveTo(C[D]+L,C[D+1]);K.arc(C[D],C[D+1],L,0,G,true);D+=2;K.moveTo(C[D]+L*2,C[D+1]);K.rect(C[D]-L,C[D+1]-L,L*2,L*2);D+=2;break;default:}}F.toContext(K);K.strokeStyle="black";K.strokeOpacity=1;K.lineWidth=1;K.stroke();J.toContext(K);K.beginPath();for(E=0,D=0;E<I;E++){switch(B[E]){case"M":K.moveTo(C[D],C[D+1]);D+=2;break;case"L":K.moveTo(C[D],C[D+1]);D+=2;break;case"C":K.lineTo(C[D],C[D+1]);D+=2;K.moveTo(C[D],C[D+1]);D+=2;K.lineTo(C[D],C[D+1]);D+=2;break;default:}}F.toContext(K);K.lineWidth=0.5;K.stroke()},updatePath:function(B,A){}})