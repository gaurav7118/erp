describe("Ext.chart.AbstractChart",function(){var C,B;var D=Ext.define(null,{extend:"Ext.data.Model",fields:["label","value"]});function A(G){var F=[],E;for(E=1;E<=G;++E){F.push({label:"Item"+E,value:E})}B=new Ext.data.Store({model:D,data:F})}afterEach(function(){B=C=Ext.destroy(C,B)});it("is defined",function(){expect(Ext.chart.AbstractChart).toBeDefined()});describe("stores",function(){function F(H,J,I){var G=Ext.apply({xtype:"cartesian",axes:[{type:"numeric",position:"left"},{type:"category",position:"bottom"}],animation:false,series:Ext.apply({type:"bar",xField:"label",yField:"value"},I)},J);if(H){if(!G.series.store){G.series.store=A(3)}}else{if(!G.store){G.store=A(3)}}C=new Ext.chart.CartesianChart(G)}function E(I){var G={},H;for(H in I){G[H]=I[H]}delete G._decr_;delete G._incr_;return G}describe("store on the chart",function(){function G(I,H){F(false,I,H)}describe("configuration",function(){it("should accept a store id",function(){B=new Ext.data.Store({model:D,storeId:"foo"});G({store:"foo"});expect(C.getStore()).toBe(B)});it("should accept a store config",function(){G({store:{model:D,data:[{}]}});expect(C.getStore().getCount()).toBe(1);expect(C.getStore().getModel()).toBe(D)});it("should accept a store instance",function(){A(10);G({store:B});expect(C.getStore()).toBe(B)})});describe("destruction",function(){it("should remove all listeners",function(){A(3);var H=E(B.hasListeners);G({store:B});C.destroy();expect(E(B.hasListeners)).toEqual(H)});it("should not destroy the store by default",function(){A(3);G({store:B});C.destroy();expect(B.destroyed).toBe(false)});it("should destroy the store when the store has autoDestroy: true",function(){A(3);B.setAutoDestroy(true);G({store:B});C.destroy();expect(B.destroyed).toBe(true)})});describe("change",function(){it("should fire 'storechange' event",function(){var M=false,I=new Ext.data.Store({model:D}),H=new Ext.data.Store({model:D}),L,K,J;G({store:I});C.on("storechange",function(O,N,P){M=true;L=O;K=N;J=P});C.setStore(H);expect(M).toEqual(true);expect(L).toEqual(C);expect(K).toEqual(H);expect(J).toEqual(I)})})});describe("store on the series",function(){function G(I,H){F(true,I,H)}describe("configuration",function(){it("should accept a store id",function(){B=new Ext.data.Store({model:D,storeId:"foo"});G(null,{store:"foo"});expect(C.getStore().isEmptyStore).toBe(true);expect(C.getSeries()[0].getStore()).toBe(B)});it("should accept a store config",function(){G(null,{store:{model:D,data:[{}]}});expect(C.getStore().isEmptyStore).toBe(true);expect(C.getSeries()[0].getStore().getCount()).toBe(1);expect(C.getSeries()[0].getStore().getModel()).toBe(D)});it("should accept a store instance",function(){A(10);G(null,{store:B});expect(C.getStore().isEmptyStore).toBe(true);expect(C.getSeries()[0].getStore()).toBe(B)})});describe("destruction",function(){it("should remove all listeners",function(){A(3);var H=E(B.hasListeners);G(null,{store:B});C.destroy();expect(E(B.hasListeners)).toEqual(H)});it("should not destroy the store by default",function(){A(3);G(null,{store:B});C.destroy();expect(B.destroyed).toBe(false)});it("should destroy the store when the store has autoDestroy: true",function(){A(3);B.setAutoDestroy(true);G(null,{store:B});C.destroy();expect(B.destroyed).toBe(true)});it("should not destroy the store when destroying the series by default",function(){A(3);G(null,{store:B});C.setSeries([{type:"bar",xField:"label",yField:"value"}]);expect(B.destroyed).toBe(false)});it("should destroy the store when destroying the series when the store has autoDestroy: true",function(){A(3);B.setAutoDestroy(true);G(null,{store:B});C.setSeries([{type:"bar",xField:"label",yField:"value"}]);expect(B.destroyed).toBe(true)})});describe("change",function(){it("should fire 'storechange' event",function(){var N=false,I=new Ext.data.Store({model:D}),H=new Ext.data.Store({model:D}),J,M,L,K;G(null,{store:I});J=C.getSeries()[0];J.on("storechange",function(P,O,Q){N=true;M=P;L=O;K=Q});J.setStore(H);expect(N).toEqual(true);expect(M).toEqual(J);expect(L).toEqual(H);expect(K).toEqual(I)})})})});describe("adding and removing series",function(){beforeEach(function(){B=new Ext.data.Store({fields:["x","y","z"],data:[{x:0,y:0,z:0},{x:1,y:1,z:1}]});C=new Ext.chart.CartesianChart({store:B,axes:[{position:"left",type:"numeric"},{position:"bottom",type:"numeric"}]})});it("should start with no series",function(){expect(C.getSeries().length).toBe(0)});it("should add and remove series using setSeries",function(){var E;C.setSeries([{type:"line",xField:"x",yField:"y",id:"xySeries"}]);E=C.getSeries();expect(E.length).toBe(1);expect(E[0].getId()).toBe("xySeries");C.setSeries([{type:"line",xField:"x",yField:"z",id:"xzSeries"}]);E=C.getSeries();expect(E.length).toBe(1);expect(E[0].getId()).toBe("xzSeries")});it("should add series using addSeries",function(){var E;C.addSeries([{type:"line",xField:"x",yField:"y",id:"xySeries"}]);E=C.getSeries();expect(E.length).toBe(1);expect(E[0].getId()).toBe("xySeries");C.addSeries({type:"line",xField:"x",yField:"z",id:"xzSeries"});E=C.getSeries();expect(E.length).toBe(2);expect(E[0].getId()).toBe("xySeries");expect(E[1].getId()).toBe("xzSeries")});it("should remove series using removeSeries",function(){var E;C.addSeries([{type:"line",xField:"x",yField:"y",id:"xySeries"},{type:"line",xField:"x",yField:"z",id:"xzSeries"}]);E=C.getSeries();expect(E.length).toBe(2);expect(E[0].getId()).toBe("xySeries");expect(E[1].getId()).toBe("xzSeries");C.removeSeries("xySeries");E=C.getSeries();expect(E.length).toBe(1);expect(E[0].getId()).toBe("xzSeries");C.removeSeries(E[0]);expect(C.getSeries().length).toBe(0)})});describe("getInteraction",function(){it("should return a correct interaction based on its type",function(){A(3);C=new Ext.chart.CartesianChart({store:B,interactions:[{type:"itemhighlight"},{type:"itemedit"},{type:"crosszoom"}],axes:[{type:"numeric",position:"left"},{type:"category",position:"bottom"}],series:{type:"bar",xField:"label",yField:"value"}});var G=C.getInteraction("itemhighlight"),F=C.getInteraction("crosszoom"),E=C.getInteraction("itemedit");expect(G.isItemHighlight).toBe(true);expect(F.isCrossZoom).toBe(true);expect(E.isItemEdit).toBe(true)})})})