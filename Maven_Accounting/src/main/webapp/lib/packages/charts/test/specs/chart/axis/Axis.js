describe("Ext.chart.axis.Axis",function(){describe("getRange",function(){it("linked axes should always return the range of the master axis",function(){var D={renderTo:Ext.getBody(),width:400,height:200,store:{fields:["name","value"],data:[{name:"one",value:10},{name:"two",value:7},{name:"three",value:5},{name:"four",value:2},{name:"five",value:27}]},series:{type:"bar",xField:"name",yField:"value"}},F=Ext.Object.merge({},D,{axes:[{id:"left",type:"numeric",position:"left"},{id:"bottom",type:"category",position:"bottom"},{position:"right",linkedTo:"left"},{position:"top",linkedTo:"bottom"}]}),A=Ext.Object.merge({},D,{flipXY:true,axes:[{id:"left",type:"category",position:"left"},{id:"bottom",type:"numeric",position:"bottom"},{position:"top",linkedTo:"bottom"},{position:"right",linkedTo:"left"}]});var C=Ext.chart.axis.Axis.prototype,B=C.getRange;function E(){var I=B.apply(this,arguments),J=this.masterAxis;if(J){expect(I[0]).toEqual(J.range[0]);expect(I[1]).toEqual(J.range[1])}return I}C.getRange=E;var H=new Ext.chart.CartesianChart(F);H.performLayout();H.destroy();var G=new Ext.chart.CartesianChart(A);G.performLayout();G.destroy();C.getRange=B})});describe("resolveListenerScope",function(){var F;function A(){F=this}var I={setTestScope:A};var G=Ext.create("Ext.data.Store",{fields:["x","y"],data:[{x:0,y:0},{x:1,y:1}]});var D={type:"numeric",position:"bottom"};function E(L){var K={width:400,height:400,layout:"fit"};Ext.apply(K,L);var J=Ext.create("Ext.container.Container",K);J.setTestScope=A;return J}function H(){return Ext.create("Ext.app.ViewController",{setTestScope:A})}function C(K){var J={store:G,axes:D};Ext.apply(J,K);var L=Ext.create("Ext.chart.CartesianChart",J);L.setTestScope=A;return L}function B(J){return Ext.define(null,{extend:"Ext.chart.axis.Numeric",setTestScope:A,listeners:{test:{fn:"setTestScope",scope:J}}})}describe("axis instance listener",function(){describe("no chart controller, chart container controller",function(){var L,K,J,M;beforeEach(function(){F=undefined;M=H();L=C();J=E({controller:M});J.add(L);K=L.getAxes()[0];K.setTestScope=A});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K.on({test:"setTestScope",scope:"this"});K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K.on({test:"setTestScope",scope:I});K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to chart container controller",function(){K.on({test:"setTestScope",scope:"controller"});K.fireEvent("test",K);expect(F).toBe(M)});it("listener with no explicit scope should be scoped to chart container controller",function(){K.on("test","setTestScope");K.fireEvent("test",K);expect(F).toBe(M)})});describe("chart controller, no chart container controller",function(){var L,K,J,M;beforeEach(function(){F=undefined;M=H();L=C({controller:M});J=E();J.add(L);K=L.getAxes()[0];K.setTestScope=A});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K.on({test:"setTestScope",scope:"this"});K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K.on({test:"setTestScope",scope:I});K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to chart controller",function(){K.on({test:"setTestScope",scope:"controller"});K.fireEvent("test",K);expect(F).toBe(M)});it("listener with no explicit scope should be scoped to chart controller",function(){K.on("test","setTestScope");K.fireEvent("test",K);expect(F).toBe(M)})});describe("chart controller, chart container controller",function(){var L,J,K,N,M;beforeEach(function(){F=undefined;N=H();M=H();L=C({controller:N});J=E({controller:M});J.add(L);K=L.getAxes()[0];K.setTestScope=A});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K.on({test:"setTestScope",scope:"this"});K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K.on({test:"setTestScope",scope:I});K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to chart controller",function(){K.on({test:"setTestScope",scope:"controller"});K.fireEvent("test",K);expect(F).toBe(N)});it("listener with no explicit scope should be scoped to chart controller",function(){K.on("test","setTestScope");K.fireEvent("test",K);expect(F).toBe(N)})});describe("no chart controller, no chart container controller",function(){var L,K,J;beforeEach(function(){F=undefined;L=C();J=E();J.add(L);K=L.getAxes()[0];K.setTestScope=A});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K.on({test:"setTestScope",scope:"this"});K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K.on({test:"setTestScope",scope:I});K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should fail",function(){K.on({test:"setTestScope",scope:"controller"});expect(function(){K.fireEvent("test",K)}).toThrow()});it("listener with no explicit scope should be scoped to the chart",function(){K.on("test","setTestScope");K.fireEvent("test",K);expect(F).toBe(L)})});describe("chart inside container with defaultListenerScope: true (no controllers)",function(){var L,K,J;beforeEach(function(){F=undefined;L=C();J=E({defaultListenerScope:true});J.add(L);K=L.getAxes()[0];K.setTestScope=A});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K.on({test:"setTestScope",scope:"this"});K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K.on({test:"setTestScope",scope:I});K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should fail",function(){K.on({test:"setTestScope",scope:"controller"});expect(function(){K.fireEvent("test",K)}).toThrow()});it("listener with no explicit scope should be scoped to the container",function(){K.on("test","setTestScope");K.fireEvent("test",K);expect(F).toBe(J)})});describe("chart with a controller and defaultListenerScope: true",function(){var K,J,L;beforeEach(function(){F=undefined;L=H();K=C({controller:L,defaultListenerScope:true});J=K.getAxes()[0];J.setTestScope=A});afterEach(function(){K.destroy()});it("listener scoped to 'this' should refer to the axis",function(){J.on({test:"setTestScope",scope:"this"});J.fireEvent("test",J);expect(F).toBe(J)});it("listener scoped to an arbitrary object should refer to that object",function(){J.on({test:"setTestScope",scope:I});J.fireEvent("test",J);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to the chart controller",function(){J.on({test:"setTestScope",scope:"controller"});J.fireEvent("test",J);expect(F).toBe(L)});it("listener with no explicit scope should be scoped to the chart",function(){J.on("test","setTestScope");J.fireEvent("test",J);expect(F).toBe(K)})});describe("chart with a controller",function(){var K,J,L;beforeEach(function(){F=undefined;L=H();K=C({controller:L});J=K.getAxes()[0];J.setTestScope=A});afterEach(function(){K.destroy()});it("listener scoped to 'this' should refer to the axis",function(){J.on({test:"setTestScope",scope:"this"});J.fireEvent("test",J);expect(F).toBe(J)});it("listener scoped to an arbitrary object should refer to that object",function(){J.on({test:"setTestScope",scope:I});J.fireEvent("test",J);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to the chart controller",function(){J.on({test:"setTestScope",scope:"controller"});J.fireEvent("test",J);expect(F).toBe(L)});it("listener with no explicit scope should be scoped to the chart controller",function(){J.on("test","setTestScope");J.fireEvent("test",J);expect(F).toBe(L)})});describe("chart with defaultListenerScope: true (container, no controllers)",function(){var L,J,K,M;beforeEach(function(){F=undefined;M=H();L=C({controller:M,defaultListenerScope:true});J=E();J.add(L);K=L.getAxes()[0];K.setTestScope=A});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K.on({test:"setTestScope",scope:"this"});K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K.on({test:"setTestScope",scope:I});K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to the chart controller",function(){K.on({test:"setTestScope",scope:"controller"});K.fireEvent("test",K);expect(F).toBe(M)});it("listener with no explicit scope should be scoped to the chart",function(){K.on("test","setTestScope");K.fireEvent("test",K);expect(F).toBe(L)})})});describe("axis class listener",function(){describe("no chart controller, chart container controller",function(){var L,K,J,M;beforeEach(function(){F=undefined;M=H();L=C({axes:[]});J=E({controller:M});J.add(L)});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K=new (B("this"))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K=new (B(I))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to chart container controller",function(){K=new (B("controller"))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(M)});it("listener with no explicit scope should be scoped to chart container controller",function(){K=new (B())();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(M)})});describe("chart controller, no chart container controller",function(){var L,K,J,M;beforeEach(function(){F=undefined;M=H();L=C({axes:[],controller:M});J=E();J.add(L)});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K=new (B("this"))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K=new (B(I))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to chart controller",function(){K=new (B("controller"))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(M)});it("listener with no explicit scope should be scoped to chart controller",function(){K=new (B())();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(M)})});describe("chart controller, chart container controller",function(){var L,J,K,N,M;beforeEach(function(){F=undefined;N=H();M=H();L=C({axes:[],controller:N});J=E({controller:M});J.add(L)});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K=new (B("this"))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K=new (B(I))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to chart controller",function(){K=new (B("controller"))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(N)});it("listener with no explicit scope should be scoped to chart controller",function(){K=new (B())();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(N)})});describe("no chart controller, no chart container controller",function(){var L,K,J;beforeEach(function(){F=undefined;L=C({axes:[]});J=E();J.add(L)});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K=new (B("this"))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K=new (B(I))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should fail",function(){K=new (B("controller"))();L.setAxes(K);expect(function(){K.fireEvent("test",K)}).toThrow()});it("listener with no explicit scope should be scoped to the axis",function(){K=new (B())();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(K)})});describe("chart inside container with defaultListenerScope: true (no controllers)",function(){var L,K,J;beforeEach(function(){F=undefined;L=C({axes:[]});J=E({defaultListenerScope:true});J.add(L)});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K=new (B("this"))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K=new (B(I))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should fail",function(){K=new (B("controller"))();L.setAxes(K);expect(function(){K.fireEvent("test",K)}).toThrow()});it("listener with no explicit scope should be scoped to chart container",function(){K=new (B())();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(J)})});describe("chart with a controller and defaultListenerScope: true",function(){var K,J,L;beforeEach(function(){F=undefined;L=H();K=C({axes:[],controller:L,defaultListenerScope:true})});afterEach(function(){K.destroy()});it("listener scoped to 'this' should refer to the axis",function(){J=new (B("this"))();K.setAxes(J);J.fireEvent("test",J);expect(F).toBe(J)});it("listener scoped to an arbitrary object should refer to that object",function(){J=new (B(I))();K.setAxes(J);J.fireEvent("test",J);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to chart controller",function(){J=new (B("controller"))();K.setAxes(J);J.fireEvent("test",J);expect(F).toBe(L)});it("listener with no explicit scope should be scoped to chart",function(){J=new (B())();K.setAxes(J);J.fireEvent("test",J);expect(F).toBe(K)})});describe("chart with a controller (no container)",function(){var K,J,L;beforeEach(function(){F=undefined;L=H();K=C({axes:[],controller:L})});afterEach(function(){K.destroy()});it("listener scoped to 'this' should refer to the axis",function(){J=new (B("this"))();K.setAxes(J);J.fireEvent("test",J);expect(F).toBe(J)});it("listener scoped to an arbitrary object should refer to that object",function(){J=new (B(I))();K.setAxes(J);J.fireEvent("test",J);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to chart controller",function(){J=new (B("controller"))();K.setAxes(J);J.fireEvent("test",J);expect(F).toBe(L)});it("listener with no explicit scope should be scoped to chart controller",function(){J=new (B())();K.setAxes(J);J.fireEvent("test",J);expect(F).toBe(L)})});describe("chart with defaultListenerScope: true (container, no controllers)",function(){var L,J,K,M;beforeEach(function(){F=undefined;M=H();L=C({axes:[],controller:M,defaultListenerScope:true});J=E();J.add(L)});afterEach(function(){L.destroy();J.destroy()});it("listener scoped to 'this' should refer to the axis",function(){K=new (B("this"))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(K)});it("listener scoped to an arbitrary object should refer to that object",function(){K=new (B(I))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(I)});it("listener scoped to 'controller' should refer to chart controller",function(){K=new (B("controller"))();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(M)});it("listener with no explicit scope should be scoped to chart",function(){K=new (B())();L.setAxes(K);K.fireEvent("test",K);expect(F).toBe(L)})})})})})