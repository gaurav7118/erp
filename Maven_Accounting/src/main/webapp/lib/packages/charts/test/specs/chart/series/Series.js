describe("Ext.chart.series.Series",function(){var D=Ext.chart.series.Series.prototype,A=true,C=Ext.data.ProxyStore.prototype.load,B;beforeEach(function(){B=Ext.data.ProxyStore.prototype.load=function(){C.apply(this,arguments);if(A){this.flushLoad.apply(this,arguments)}return this}});afterEach(function(){Ext.data.ProxyStore.prototype.load=C});describe("resolveListenerScope",function(){var I;function E(){I=this}var L={setTestScope:E};var J=Ext.create("Ext.data.Store",{fields:["x","y"],data:[{x:0,y:0},{x:1,y:1}]});var F={type:"bar",xField:"x",yField:"y"};function H(P){var O={width:400,height:400,layout:"fit"};Ext.apply(O,P);var N=Ext.create("Ext.container.Container",O);N.setTestScope=E;return N}function K(){return Ext.create("Ext.app.ViewController",{setTestScope:E})}function G(O){var N={store:J,series:F};Ext.apply(N,O);var P=Ext.create("Ext.chart.CartesianChart",N);P.setTestScope=E;return P}function M(N){return Ext.define(null,{extend:"Ext.chart.series.Bar",xField:"x",yField:"y",setTestScope:E,listeners:{test:{fn:"setTestScope",scope:N}}})}describe("series instance listener",function(){describe("no chart controller, chart container controller",function(){var P,O,N,Q;beforeEach(function(){I=undefined;Q=K();P=G();N=H({controller:Q});N.add(P);O=P.getSeries()[0];O.setTestScope=E});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O.on({test:"setTestScope",scope:"this"});O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O.on({test:"setTestScope",scope:L});O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to chart container controller",function(){O.on({test:"setTestScope",scope:"controller"});O.fireEvent("test",O);expect(I).toBe(Q)});it("listener with no explicit scope should be scoped to chart container controller",function(){O.on("test","setTestScope");O.fireEvent("test",O);expect(I).toBe(Q)})});describe("chart controller, no chart container controller",function(){var P,O,N,Q;beforeEach(function(){I=undefined;Q=K();P=G({controller:Q});N=H();N.add(P);O=P.getSeries()[0];O.setTestScope=E});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O.on({test:"setTestScope",scope:"this"});O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O.on({test:"setTestScope",scope:L});O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to chart controller",function(){O.on({test:"setTestScope",scope:"controller"});O.fireEvent("test",O);expect(I).toBe(Q)});it("listener with no explicit scope should be scoped to chart controller",function(){O.on("test","setTestScope");O.fireEvent("test",O);expect(I).toBe(Q)})});describe("chart controller, chart container controller",function(){var P,N,O,R,Q;beforeEach(function(){I=undefined;R=K();Q=K();P=G({controller:R});N=H({controller:Q});N.add(P);O=P.getSeries()[0];O.setTestScope=E});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O.on({test:"setTestScope",scope:"this"});O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O.on({test:"setTestScope",scope:L});O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to chart controller",function(){O.on({test:"setTestScope",scope:"controller"});O.fireEvent("test",O);expect(I).toBe(R)});it("listener with no explicit scope should be scoped to chart controller",function(){O.on("test","setTestScope");O.fireEvent("test",O);expect(I).toBe(R)})});describe("no chart controller, no chart container controller",function(){var P,O,N;beforeEach(function(){I=undefined;P=G();N=H();N.add(P);O=P.getSeries()[0];O.setTestScope=E});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O.on({test:"setTestScope",scope:"this"});O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O.on({test:"setTestScope",scope:L});O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should fail",function(){O.on({test:"setTestScope",scope:"controller"});expect(function(){O.fireEvent("test",O)}).toThrow()});it("listener with no explicit scope should be scoped to the chart",function(){O.on("test","setTestScope");O.fireEvent("test",O);expect(I).toBe(P)})});describe("chart inside container with defaultListenerScope: true (no controllers)",function(){var P,O,N;beforeEach(function(){I=undefined;P=G();N=H({defaultListenerScope:true});N.add(P);O=P.getSeries()[0];O.setTestScope=E});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O.on({test:"setTestScope",scope:"this"});O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O.on({test:"setTestScope",scope:L});O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should fail",function(){O.on({test:"setTestScope",scope:"controller"});expect(function(){O.fireEvent("test",O)}).toThrow()});it("listener with no explicit scope should be scoped to the container",function(){O.on("test","setTestScope");O.fireEvent("test",O);expect(I).toBe(N)})});describe("chart with a controller and defaultListenerScope: true",function(){var O,N,P;beforeEach(function(){I=undefined;P=K();O=G({controller:P,defaultListenerScope:true});N=O.getSeries()[0];N.setTestScope=E});afterEach(function(){O.destroy()});it("listener scoped to 'this' should refer to the series",function(){N.on({test:"setTestScope",scope:"this"});N.fireEvent("test",N);expect(I).toBe(N)});it("listener scoped to an arbitrary object should refer to that object",function(){N.on({test:"setTestScope",scope:L});N.fireEvent("test",N);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to the chart controller",function(){N.on({test:"setTestScope",scope:"controller"});N.fireEvent("test",N);expect(I).toBe(P)});it("listener with no explicit scope should be scoped to the chart",function(){N.on("test","setTestScope");N.fireEvent("test",N);expect(I).toBe(O)})});describe("chart with a controller (no container)",function(){var O,N,P;beforeEach(function(){I=undefined;P=K();O=G({controller:P});N=O.getSeries()[0];N.setTestScope=E});afterEach(function(){O.destroy()});it("listener scoped to 'this' should refer to the series",function(){N.on({test:"setTestScope",scope:"this"});N.fireEvent("test",N);expect(I).toBe(N)});it("listener scoped to an arbitrary object should refer to that object",function(){N.on({test:"setTestScope",scope:L});N.fireEvent("test",N);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to the chart controller",function(){N.on({test:"setTestScope",scope:"controller"});N.fireEvent("test",N);expect(I).toBe(P)});it("listener with no explicit scope should be scoped to the chart controller",function(){N.on("test","setTestScope");N.fireEvent("test",N);expect(I).toBe(P)})});describe("chart with defaultListenerScope: true (container, no controllers)",function(){var P,N,O,Q;beforeEach(function(){I=undefined;P=G({defaultListenerScope:true});N=H();N.add(P);O=P.getSeries()[0];O.setTestScope=E});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O.on({test:"setTestScope",scope:"this"});O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O.on({test:"setTestScope",scope:L});O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to the chart controller",function(){O.on({test:"setTestScope",scope:"controller"});expect(function(){O.fireEvent("test",O)}).toThrow()});it("listener with no explicit scope should be scoped to the chart",function(){O.on("test","setTestScope");O.fireEvent("test",O);expect(I).toBe(P)})})});describe("series class listener",function(){describe("no chart controller, chart container controller",function(){var P,O,N,Q;beforeEach(function(){I=undefined;Q=K();P=G({series:[]});N=H({controller:Q});N.add(P)});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O=new (M("this"))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O=new (M(L))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to chart container controller",function(){O=new (M("controller"))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(Q)});it("listener with no explicit scope should be scoped to chart container controller",function(){O=new (M())();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(Q)})});describe("chart controller, no chart container controller",function(){var P,O,N,Q;beforeEach(function(){I=undefined;Q=K();P=G({series:[],controller:Q});N=H();N.add(P)});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O=new (M("this"))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O=new (M(L))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to chart controller",function(){O=new (M("controller"))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(Q)});it("listener with no explicit scope should be scoped to chart controller",function(){O=new (M())();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(Q)})});describe("chart controller, chart container controller",function(){var P,N,O,R,Q;beforeEach(function(){I=undefined;R=K();Q=K();P=G({series:[],controller:R});N=H({controller:Q});N.add(P)});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O=new (M("this"))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O=new (M(L))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to chart controller",function(){O=new (M("controller"))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(R)});it("listener with no explicit scope should be scoped to chart controller",function(){O=new (M())();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(R)})});describe("no chart controller, no chart container controller",function(){var P,O,N;beforeEach(function(){I=undefined;P=G({series:[]});N=H();N.add(P)});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O=new (M("this"))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O=new (M(L))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should fail",function(){O=new (M("controller"))();P.setSeries(O);expect(function(){O.fireEvent("test",O)}).toThrow()});it("listener with no explicit scope should be scoped to the series",function(){O=new (M())();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(O)})});describe("chart inside container with defaultListenerScope: true (no controllers)",function(){var P,O,N;beforeEach(function(){I=undefined;P=G({series:[]});N=H({defaultListenerScope:true});N.add(P)});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O=new (M("this"))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O=new (M(L))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should fail",function(){O=new (M("controller"))();P.setSeries(O);expect(function(){O.fireEvent("test",O)}).toThrow()});it("listener with no explicit scope should be scoped to chart container",function(){O=new (M())();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(N)})});describe("chart with a controller and defaultListenerScope: true",function(){var O,N,P;beforeEach(function(){I=undefined;P=K();O=G({series:[],controller:P,defaultListenerScope:true})});afterEach(function(){O.destroy()});it("listener scoped to 'this' should refer to the series",function(){N=new (M("this"))();O.setSeries(N);N.fireEvent("test",N);expect(I).toBe(N)});it("listener scoped to an arbitrary object should refer to that object",function(){N=new (M(L))();O.setSeries(N);N.fireEvent("test",N);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to chart controller",function(){N=new (M("controller"))();O.setSeries(N);N.fireEvent("test",N);expect(I).toBe(P)});it("listener with no explicit scope should be scoped to chart",function(){N=new (M())();O.setSeries(N);N.fireEvent("test",N);expect(I).toBe(O)})});describe("chart with a controller (no container)",function(){var O,N,P;beforeEach(function(){I=undefined;P=K();O=G({series:[],controller:P})});afterEach(function(){O.destroy()});it("listener scoped to 'this' should refer to the series",function(){N=new (M("this"))();O.setSeries(N);N.fireEvent("test",N);expect(I).toBe(N)});it("listener scoped to an arbitrary object should refer to that object",function(){N=new (M(L))();O.setSeries(N);N.fireEvent("test",N);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to chart controller",function(){N=new (M("controller"))();O.setSeries(N);N.fireEvent("test",N);expect(I).toBe(P)});it("listener with no explicit scope should be scoped to chart controller",function(){N=new (M())();O.setSeries(N);N.fireEvent("test",N);expect(I).toBe(P)})});describe("chart with defaultListenerScope: true (container, no controllers)",function(){var P,N,O,Q;beforeEach(function(){I=undefined;Q=K();P=G({series:[],controller:Q,defaultListenerScope:true});N=H();N.add(P)});afterEach(function(){P.destroy();N.destroy()});it("listener scoped to 'this' should refer to the series",function(){O=new (M("this"))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(O)});it("listener scoped to an arbitrary object should refer to that object",function(){O=new (M(L))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(L)});it("listener scoped to 'controller' should refer to chart controller",function(){O=new (M("controller"))();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(Q)});it("listener with no explicit scope should be scoped to chart",function(){O=new (M())();P.setSeries(O);O.fireEvent("test",O);expect(I).toBe(P)})})})});describe("coordinateData",function(){it("should handle empty strings as valid discrete axis values",function(){var E=D.coordinateData,F;D.coordinateData=function(H,J,I){var G=E.apply(this,arguments);if(J==="xfield"){F=G}return G};Ext.create("Ext.chart.CartesianChart",{store:{fields:["xfield","a","b","c"],data:[{xfield:"",a:10,b:20,c:30}]},axes:[{type:"numeric",position:"left",fields:["a","b","c"]},{type:"category",position:"bottom"}],series:{type:"bar",stacked:true,xField:"xfield",yField:["a","b","c"]}}).destroy();D.coordinateData=E;expect(F).toEqual([0])})});describe("updateChart",function(){it("should remove sprites from the old chart, destroying them",function(){var F=new Ext.chart.CartesianChart({store:{fields:["xfield","a","b","c"],data:[{xfield:"A",a:10,b:20,c:30},{xfield:"B",a:30,b:20,c:10}]},axes:[{type:"numeric",position:"left",fields:["a","b","c"]},{type:"category",position:"bottom"}],series:{type:"bar",stacked:true,xField:"xfield",yField:["a","b","c"]}});var E=F.getSeries()[0];E.setChart(null);expect(F.getSurface("series").getItems().length).toBe(0);F.destroy()})});describe("showMarkers config",function(){var F,E;beforeEach(function(){F=new Ext.chart.CartesianChart({renderTo:Ext.getBody(),width:300,height:200,innerPadding:10,animation:false,store:{fields:["x","y1","y2"],data:[{x:0,y1:1,y2:2},{x:1,y1:5,y2:4},{x:2,y1:2,y2:3}]},axes:[{type:"numeric",position:"left"},{type:"category",position:"bottom"}],series:[{type:"line",xField:"x",yField:"y1",marker:{type:"square"},showMarkers:false},{type:"line",xField:"x",yField:"y2",marker:{type:"arrow"},showMarkers:true}]});F.performLayout();E=F.getSeries()});afterEach(function(){E=F=Ext.destroy(F)});it("should work with initial value of 'false'",function(){var G=E[0].getSprites()[0],I=G.getMarker("markers"),H=I.getTemplate();expect(H.attr.hidden).toBe(true)});it("should toggle properly from false to true",function(){var G=E[0],H=G.getSprites()[0],J=H.getMarker("markers"),I=J.getTemplate();expect(I.attr.hidden).toBe(true);G.setShowMarkers(true);expect(I.attr.hidden).toBe(false)});it("should toggle properly from true to false",function(){var G=E[1],H=G.getSprites()[0],J=H.getMarker("markers"),I=J.getTemplate();expect(I.attr.hidden).toBe(false);G.setShowMarkers(false);expect(I.attr.hidden).toBe(true)});it("should remain 'false' after series itself are hidden and shown again",function(){var G=E[0],H=G.getSprites()[0],J=H.getMarker("markers"),I=J.getTemplate();expect(I.attr.hidden).toBe(true);G.setHiddenByIndex(0,true);G.setHiddenByIndex(0,false);expect(I.attr.hidden).toBe(true)});it("should remain 'true' after series itself are hidden and shown again",function(){var G=E[1],H=G.getSprites()[0],J=H.getMarker("markers"),I=J.getTemplate();expect(I.attr.hidden).toBe(false);G.setHiddenByIndex(0,true);G.setHiddenByIndex(0,false);expect(I.attr.hidden).toBe(false)})})})