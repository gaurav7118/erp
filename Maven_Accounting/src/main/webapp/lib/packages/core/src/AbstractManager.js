Ext.define("Ext.AbstractManager",{requires:["Ext.util.HashMap"],typeName:"type",constructor:function(A){Ext.apply(this,A||{});this.all=new Ext.util.HashMap();this.types={}},get:function(A){return this.all.get(A)},register:function(B){var A=this.all.getKey(B);if(A===undefined){Ext.raise("Key is undefined. Please ensure the item has a key before registering the item.")}if(this.all.containsKey(A)){Ext.raise('Registering duplicate id "'+A+'" with '+this.$className)}this.all.add(B)},unregister:function(A){this.all.remove(A)},registerType:function(B,A){this.types[B]=A;A[this.typeName]=B},isRegistered:function(A){return this.types[A]!==undefined},create:function(A,D){var B=A[this.typeName]||A.type||D,C=this.types[B];if(C===undefined){Ext.raise("The '"+B+"' type has not been registered with this manager")}return new C(A)},onAvailable:function(F,C,B){var A=this.all,D,E;if(A.containsKey(F)){D=A.get(F);C.call(B||D,D)}else{E=function(I,G,H){if(G==F){C.call(B||H,H);A.un("add",E)}};A.on("add",E)}},each:function(B,A){this.all.each(B,A||this)},getCount:function(){return this.all.getCount()}})