Ext.define("Ext.TaskQueue",{requires:"Ext.AnimationQueue",singleton:true,pending:false,mode:true,constructor:function(){this.readQueue=[];this.writeQueue=[];this.run=Ext.Function.bind(this.run,this);if(Ext.os.is.iOS){Ext.interval(this.watch,500,this)}},requestRead:function(C,B,A){this.request(true);this.readQueue.push(arguments)},requestWrite:function(C,B,A){this.request(false);this.writeQueue.push(arguments)},request:function(A){if(!this.pending){this.pendingTime=Date.now();this.pending=true;this.mode=A;if(A){Ext.defer(this.run,1,this)}else{Ext.Function.requestAnimationFrame(this.run)}}},watch:function(){if(this.pending&&Date.now()-this.pendingTime>=500){this.run()}},run:function(){this.pending=false;var I=this.readQueue,E=this.writeQueue,C=null,F;if(this.mode){F=I;if(E.length>0){C=false}}else{F=E;if(I.length>0){C=true}}var B=F.slice(),D,G,A,H,J;F.length=0;for(D=0,G=B.length;D<G;D++){A=B[D];H=A[0];J=A[1];if(typeof H==="string"){H=J[H]}if(A.length>2){H.apply(J,A[2])}else{H.call(J)}}B.length=0;if(C!==null){this.request(C)}},privates:{flush:function(){while(this.readQueue.length||this.writeQueue.length){this.run()}}}})