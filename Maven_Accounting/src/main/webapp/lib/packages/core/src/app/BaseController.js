Ext.define("Ext.app.BaseController",{requires:["Ext.app.EventBus","Ext.app.domain.Global"],uses:["Ext.app.domain.Controller"],mixins:["Ext.mixin.Observable"],isController:true,config:{id:null,control:null,listen:null,routes:null,before:null},constructor:function(A){var B=this;Ext.apply(B,A);delete B.control;delete B.listen;B.eventbus=Ext.app.EventBus;B.mixins.observable.constructor.call(B,A);B.ensureId()},applyListen:function(A){if(Ext.isObject(A)){A=Ext.clone(A)}return A},applyControl:function(A){if(Ext.isObject(A)){A=Ext.clone(A)}return A},updateControl:function(A){this.ensureId();if(A){this.control(A)}},updateListen:function(A){this.ensureId();if(A){this.listen(A)}},updateRoutes:function(B){if(B){var E=this,F=E.getBefore()||{},A=Ext.app.route.Router,D,C,G;for(D in B){C=B[D];if(Ext.isString(C)){C={action:C}}G=C.action;if(!C.before){C.before=F[G]}else{if(F[G]){Ext.log.warn('You have a before method configured on a route ("'+D+'") and in the before object property also in the "'+E.self.getName()+'" controller. Will use the before method in the route and disregard the one in the before property.')}}A.connect(D,C,E)}}},isActive:function(){return true},control:function(B,C,A){var D=this,E=A,F;if(Ext.isString(B)){F={};F[B]=C}else{F=B;E=C}D.eventbus.control(F,E||D)},listen:function(B,A){this.eventbus.listen(B,A||this)},destroy:function(){var B=this,A=B.eventbus;Ext.app.route.Router.disconnectAll(B);if(A){A.unlisten(B);B.eventbus=null}B.callParent()},redirectTo:function(B,C){if(B.isModel){B=B.toUrl()}if(!C){var A=Ext.util.History.getToken();if(A===B){return false}}else{Ext.app.route.Router.onStateChange(B)}Ext.util.History.add(B);return true}})