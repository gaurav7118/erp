Ext.define("Ext.app.Controller",{extend:"Ext.app.BaseController",requires:["Ext.app.Util","Ext.data.StoreManager","Ext.ComponentManager","Ext.app.domain.Component","Ext.app.domain.Store","Ext.app.route.Router"],statics:{strings:{model:{getter:"getModel",upper:"Model"},view:{getter:"getView",upper:"View"},controller:{getter:"getController",upper:"Controller"},store:{getter:"getStore",upper:"Store"},profile:{getter:"getProfile",upper:"Profiles"}},controllerRegex:/^(.*)\.controller\./,profileRegex:/^(.*)\.profile\./,createGetter:function(A,B){return function(){return this[A](B)}},getGetterName:function(C,A){var D="get",E=C.split("."),F=E.length,B;for(B=0;B<F;B++){D+=Ext.String.capitalize(E[B])}D+=A;return D},resolveNamespace:function(A,F){var G=Ext.app.Controller,E=A.prototype.isProfile?G.profileRegex:G.controllerRegex,D,C,B;D=Ext.getClassName(A);C=F.$namespace||F.namespace||Ext.app.getNamespace(D)||((B=E.exec(D))&&B[1]);if(!C){Ext.log.warn("Missing namespace for "+D+", please define it in namespaces property of your Application class.")}return C},processDependencies:function(O,P,D,E,I,B){if(!I||!I.length){return }var J=this,N=J.strings[E],C,M,L,A,F,G,K,H;if(!Ext.isArray(I)){I=[I]}for(F=0,G=I.length;F<G;F++){A=I[F];C=J.getFullName(A,E,D,B);I[F]=M=C.absoluteName;L=C.shortName;P.push(M);K=J.getGetterName(L,N.upper);if(!O[K]){O[K]=H=J.createGetter(N.getter,A)}else{if(K==="getMainView"){Ext.log.warn("Cannot have a view named 'Main' - getter conflicts with mainView config.")}}if(H&&E!=="controller"){H["Ext.app.getter"]=true}}},getFullName:function(C,F,E,D){var A=C,B,G;if((B=C.indexOf("@"))>0){A=C.substring(0,B);G=C.substring(B+1)+"."+A}else{if(C.indexOf(".")>0&&(Ext.ClassManager.isCreated(C)||this.hasRegisteredPrefix(C))){G=C}else{if(!E){Ext.log.warn("Cannot find namespace for "+F+" "+C+", assuming it is fully qualified class name")}if(E){G=E+"."+F+"."+(D?D+"."+C:C);A=C}else{G=C}}}return{absoluteName:G,shortName:A}},hasRegisteredPrefix:function(A){var C=Ext.ClassManager,B=C.getPrefix(A);return B&&B!==A}},models:null,views:null,stores:null,controllers:null,config:{application:null,refs:null,active:true,moduleClassName:null},onClassExtended:function(B,C,A){var D=A.onBeforeCreated;A.onBeforeCreated=function(E,I){var J=Ext.app.Controller,G=[],F,H;H=E.prototype;F=J.resolveNamespace(E,I);if(F){H.$namespace=F}J.processDependencies(H,G,F,"model",I.models);J.processDependencies(H,G,F,"view",I.views);J.processDependencies(H,G,F,"store",I.stores);J.processDependencies(H,G,F,"controller",I.controllers);Ext.require(G,Ext.Function.pass(D,arguments,this))}},constructor:function(A){this.initAutoGetters();this.callParent(arguments)},normalizeRefs:function(B){var C=this,A=[];if(B){if(Ext.isObject(B)){Ext.Object.each(B,function(D,E){if(Ext.isString(E)){E={selector:E}}E.ref=D;A.push(E)})}else{if(Ext.isArray(B)){A=Ext.Array.merge(A,B)}}}B=C.refs;if(B){C.refs=null;B=C.normalizeRefs(B);if(B){A=Ext.Array.merge(A,B)}}return A},getRefMap:function(){var F=this,C=F._refMap,A,E,D,B;if(!C){A=F.getRefs();C=F._refMap={};if(A){for(B=0,D=A.length;B<D;B++){E=A[B];C[E.ref]=E.selector}}}return C},applyRefs:function(A){return this.normalizeRefs(Ext.clone(A))},updateRefs:function(A){if(A){this.ref(A)}},initAutoGetters:function(){var B=this.self.prototype,C,A;for(C in B){A=B[C];if(A&&A["Ext.app.getter"]){A.call(this)}}},doInit:function(B){var A=this;if(!A._initialized){A.init(B);A._initialized=true}},finishInit:function(F){var D=this,E=D.controllers,B,C,A;if(D._initialized&&E&&E.length){for(C=0,A=E.length;C<A;C++){B=D.getController(E[C]);B.finishInit(F)}}},init:Ext.emptyFn,onLaunch:Ext.emptyFn,activate:function(){this.setActive(true)},deactivate:function(){this.setActive(false)},isActive:function(){return this.getActive()},ref:function(A){var F=this,B=0,E=A.length,G,D,C;A=Ext.Array.from(A);F.references=F.references||[];for(;B<E;B++){G=A[B];D=G.ref;C="get"+Ext.String.capitalize(D);if(!F[C]){F[C]=Ext.Function.pass(F.getRef,[D,G],F)}F.references.push(D.toLowerCase())}},addRef:function(A){this.ref(A)},getRef:function(D,F,A){var C=this,E=C.refCache||(C.refCache={}),B=E[D];F=F||{};A=A||{};Ext.apply(F,A);if(F.forceCreate){return Ext.ComponentManager.create(F,"component")}if(!B){if(F.selector){E[D]=B=Ext.ComponentQuery.query(F.selector)[0]}if(!B&&F.autoCreate){E[D]=B=Ext.ComponentManager.create(F,"component")}if(B){B.on("beforedestroy",function(){E[D]=null})}}return B},hasRef:function(B){var A=this.references;return A&&Ext.Array.indexOf(A,B.toLowerCase())!==-1},getController:function(B){var A=this.getApplication();if(B===this.getId()){return this}return A&&A.getController(B)},getStore:function(C){var A,B;A=(C.indexOf("@")===-1)?C:C.split("@")[0];B=Ext.StoreManager.get(A);if(!B){C=Ext.app.Controller.getFullName(C,"store",this.$namespace);if(C){B=Ext.create(C.absoluteName,{id:A})}}return B},getModel:function(C){var B=Ext.app.Controller.getFullName(C,"model",this.$namespace),A=Ext.ClassManager.get(B.absoluteName);if(!A){A=Ext.data.schema.Schema.lookupEntity(C)}return A},getProfile:function(A){A=Ext.app.Controller.getFullName(A,"profile",this.$namespace);return A},getView:function(A){var B=Ext.app.Controller.getFullName(A,"view",this.$namespace);return B&&Ext.ClassManager.get(B.absoluteName)},ensureId:function(){var A=this.getId();if(!A){this.setId(this.getModuleClassName(this.$className,"controller"))}},destroy:function(A,B){var D=this,F=D.application,E,C;if(!B&&F){F.unregister(D)}D.application=null;if(A){E=D.refCache;for(C in E){if(E.hasOwnProperty(C)){Ext.destroy(E[C])}}}D.callParent()}})