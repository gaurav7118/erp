Ext.define("Ext.app.route.Route",{action:null,conditions:null,controller:null,allowInactive:false,url:null,before:null,caseInsensitive:false,matcherRegex:null,paramMatchingRegex:null,paramsInMatchString:null,constructor:function(B){var C=this,A;Ext.apply(C,B,{conditions:{}});A=C.url;C.paramMatchingRegex=new RegExp(/:([0-9A-Za-z\_]*)/g);C.paramsInMatchString=A.match(C.paramMatchingRegex)||[];C.matcherRegex=C.createMatcherRegex(A)},recognize:function(C){var D=this,A=D.controller,E,B;if((D.allowInactive||A.isActive())&&D.recognizes(C)){E=D.matchesFor(C);B=C.match(D.matcherRegex);B.shift();return Ext.applyIf(E,{controller:A,action:D.action,historyUrl:C,args:B})}return false},recognizes:function(A){return this.matcherRegex.test(A)},execute:function(C,G,H,D){var B=G.args||[],F=this.before,A=this.controller,E=this.createCallback(G,H,D);if(F){B.push(E);if(Ext.isString(F)){F=this.before=A[F]}if(F){F.apply(A,B)}else{Ext.log.warn("The before action: "+this.before+" was not found on the controller. The action method will not be executed.")}}else{E.resume()}},matchesFor:function(C){var F={},E=this.paramsInMatchString,B=C.match(this.matcherRegex),D=0,A=E.length;B.shift();for(;D<A;D++){F[E[D].replace(":","")]=B[D]}return F},createMatcherRegex:function(A){var C=this.paramsInMatchString,H=this.conditions,D=0,F=C.length,I=Ext.util.Format.format,J=this.caseInsensitive?"i":"",B,G,E;for(;D<F;D++){B=C[D];G=H[B];E=I("{0}",G||"([%a-zA-Z0-9\\-\\_\\s,]+)");A=A.replace(new RegExp(B),E)}return new RegExp("^"+A+"$",J)},createCallback:function(A,D,B){var C=this;B=B||C;return{resume:function(){var E=C.controller,G=C.action,F;if(Ext.isString(G)){G=E[G]}A=A&&A.args?A.args:[];F=A.pop();if(F&&!Ext.isObject(F)){A.push(F)}if(G){C.action=G;G.apply(E,A)}else{Ext.log.warn("The action: "+C.action+" was not found on the controller.")}if(D){D.call(B)}},stop:function(E){if(D){D.call(B,E)}}}}})