Ext.define("Ext.app.route.Router",{singleton:true,requires:["Ext.app.route.Queue","Ext.app.route.Route","Ext.util.History"],multipleToken:"|",queueRoutes:true,constructor:function(){var A=Ext.util.History;if(!A.ready){A.init()}A.on("change",this.onStateChange,this);this.clear()},onStateChange:function(D){var J=this,C=J.application,L=J.routes,G=L.length,N=J.queueRoutes,I=D.split(J.multipleToken),M=0,B=I.length,E,F,K,H,A;for(;M<B;M++){D=I[M];A=false;if(N){F=new Ext.app.route.Queue({token:D})}for(E=0;E<G;E++){K=L[E];H=K.recognize(D);if(H){A=true;if(N){F.queueAction(K,H)}else{K.execute(D,H)}}}if(N){F.runQueue()}if(!A&&C){C.fireEvent("unmatchedroute",D)}}},connect:function(C,D,A){var B={url:C,action:D,controller:A};if(Ext.isObject(D)){Ext.merge(B,D)}this.routes.push(new Ext.app.route.Route(B))},disconnectAll:function(C){var B=this.routes,A=B.length,E=[],F,D;for(F=0;F<A;++F){D=B[F];if(D.controller!==C){E.push(D)}}this.routes=E},recognize:function(E){var B=this.routes||[],F=0,A=B.length,C,D;for(;F<A;F++){C=B[F];D=C.recognize(E);if(D){return{route:C,args:D}}}return false},draw:function(A){A.call(this,this)},clear:function(){this.routes=[]}})