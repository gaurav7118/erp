Ext.define("Ext.Mixin",function(A){return{statics:{addHook:function(H,E,C,D){var G=Ext.isFunction(H),F=function(){var J=arguments,K=G?H:D[H],I=this.callParent(J);K.apply(this,J);return I},B=E.hasOwnProperty(C)&&E[C];if(G){H.$previous=Ext.emptyFn}F.$name=C;F.$owner=E.self;if(B){F.$previous=B.$previous;B.$previous=F}else{E[C]=F}}},onClassExtended:function(K,D){var F=D.mixinConfig,I=D.xhooks,H=K.superclass,E=D.onClassMixedIn,B,G,J,C;if(I){delete D.xhooks;(F||(D.mixinConfig=F={})).on=I}if(F){B=H.mixinConfig;if(B){D.mixinConfig=F=Ext.merge({},B,F)}D.mixinId=F.id;if(F.beforeHooks){Ext.raise('Use of "beforeHooks" is deprecated - use "before" instead')}if(F.hooks){Ext.raise('Use of "hooks" is deprecated - use "after" instead')}if(F.afterHooks){Ext.raise('Use of "afterHooks" is deprecated - use "after" instead')}G=F.before;J=F.after;I=F.on;C=F.extended}if(G||J||I||C){D.onClassMixedIn=function(O){var L=this.prototype,N=O.prototype,M;if(G){Ext.Object.each(G,function(P,Q){O.addMember(P,function(){if(L[Q].apply(this,arguments)!==false){return this.callParent(arguments)}})})}if(J){Ext.Object.each(J,function(P,Q){O.addMember(P,function(){var R=this.callParent(arguments);L[Q].apply(this,arguments);return R})})}if(I){for(M in I){A.addHook(I[M],N,M,L)}}if(C){O.onExtended(function(){var P=Ext.Array.slice(arguments,0);P.unshift(O);return C.apply(this,P)},this)}if(E){E.apply(this,arguments)}}}}}})