Ext.define("Ext.data.ChainedStore",{extend:"Ext.data.AbstractStore",alias:"store.chained",config:{source:null,remoteFilter:false,remoteSort:false},mixins:["Ext.data.LocalStore"],constructor:function(){this.callParent(arguments);this.getData().addObserver(this)},updateRemoteFilter:function(A,B){if(A){Ext.raise("Remote filtering cannot be used with chained stores.")}this.callParent([A,B])},updateRemoteSort:function(B,A){if(B){Ext.raise("Remote sorting cannot be used with chained stores.")}this.callParent([B,A])},remove:function(){var A=this.getSource();return A.remove.apply(A,arguments)},removeAll:function(){var A=this.getSource();return A.removeAll()},getData:function(){var A=this,B=A.data;if(!B){A.data=B=A.constructDataCollection()}return B},getSession:function(){return this.getSource().getSession()},applySource:function(C){if(C){var A=C,B;C=Ext.data.StoreManager.lookup(C);if(!C){B="Invalid source {0}specified for Ext.data.ChainedStore";B=Ext.String.format(B,typeof A==="string"?'"'+A+'" ':"");Ext.raise(B)}}return C},updateSource:function(D,B){var A=this,C;if(B){B.removeObserver(A)}if(D){C=A.getData();C.setSource(D.getData());if(!A.isInitializing){A.fireEvent("refresh",A);A.fireEvent("datachanged",A)}D.addObserver(A)}},getModel:function(){return this.getSource().getModel()},getProxy:function(){return null},onCollectionAdd:function(D,C){var B=this,A=C.items,E=!C.next;if(B.ignoreCollectionAdd){return }B.fireEvent("add",B,A,C.at);if(E){B.fireEvent("datachanged",B)}},onCollectionItemChange:function(F,E){var D=this,A=E.item,C=E.modified||null,B=E.meta;D.onUpdate(A,B,C,E);D.fireEvent("update",D,A,B,C,E)},onUpdate:Ext.emptyFn,onCollectionRemove:function(D,C){var B=this,A=C.items,E=!C.next;if(B.ignoreCollectionRemove){return }B.fireEvent("remove",B,A,C.at,false);if(E){B.fireEvent("datachanged",B)}},onSourceBeforeLoad:function(B,A){this.fireEvent("beforeload",this,A)},onSourceAfterLoad:function(C,B,D,A){this.fireEvent("load",this,B,D,A)},onFilterEndUpdate:function(){this.callParent(arguments);this.callObservers("Filter")},onSourceBeforePopulate:function(){this.ignoreCollectionAdd=true;this.callObservers("BeforePopulate")},onSourceAfterPopulate:function(){var A=this;A.ignoreCollectionAdd=false;A.fireEvent("datachanged",A);A.fireEvent("refresh",A);this.callObservers("AfterPopulate")},onSourceBeforeClear:function(){this.ignoreCollectionRemove=true;this.callObservers("BeforeClear")},onSourceAfterClear:function(){this.ignoreCollectionRemove=false;this.callObservers("AfterClear")},onSourceBeforeRemoveAll:function(){this.ignoreCollectionRemove=true;this.callObservers("BeforeRemoveAll")},onSourceAfterRemoveAll:function(C,A){var B=this;B.ignoreCollectionRemove=false;if(!A){B.fireEvent("clear",B);B.fireEvent("datachanged",B)}this.callObservers("AfterRemoveAll",[A])},onSourceFilter:function(){var A=this;A.fireEvent("refresh",A);A.fireEvent("datachanged",A)},hasPendingLoad:function(){return this.getSource().hasPendingLoad()},isLoaded:function(){return this.getSource().isLoaded()},isLoading:function(){return this.getSource().isLoading()},onDestroy:function(){var A=this;A.observers=null;A.setSource(null);A.getData().destroy(true);A.data=null},privates:{isMoving:function(){var A=this.getSource();return A.isMoving?A.isMoving.apply(A,arguments):false},loadsSynchronously:function(){return this.getSource().loadsSynchronously()}}})