Ext.define("Ext.data.StoreManager",{extend:"Ext.util.MixedCollection",alternateClassName:["Ext.StoreMgr","Ext.data.StoreMgr","Ext.StoreManager"],singleton:true,requires:["Ext.data.ArrayStore"],register:function(){for(var A=0,B;(B=arguments[A]);A++){this.add(B)}},unregister:function(){for(var A=0,B;(B=arguments[A]);A++){this.remove(this.lookup(B))}},lookup:function(C,G){if(Ext.isArray(C)){var B=["field1"],E=!Ext.isArray(C[0]),F=C,D,A;if(E){F=[];for(D=0,A=C.length;D<A;++D){F.push([C[D]])}}else{for(D=2,A=C[0].length;D<=A;++D){B.push("field"+D)}}return new Ext.data.ArrayStore({data:F,fields:B,autoDestroy:true,autoCreated:true,expanded:E})}if(Ext.isString(C)){return this.get(C)}else{return Ext.Factory.store(C,G)}},getKey:function(A){return A.storeId}},function(){Ext.regStore=function(D,C){var B;if(Ext.isObject(D)){C=D}else{if(Ext.data.StoreManager.containsKey(D)){return Ext.data.StoreManager.lookup(D)}C.storeId=D}if(C instanceof Ext.data.Store){B=C}else{B=new Ext.data.Store(C)}Ext.data.StoreManager.register(B);return B};Ext.getStore=function(B){return Ext.data.StoreManager.lookup(B)};var A=Ext.regStore("ext-empty-store",{proxy:"memory",useModelWarning:false});A.isEmptyStore=true;A.add=A.remove=A.insert=A.loadData=function(){Ext.raise("Cannot modify ext-empty-store")}})