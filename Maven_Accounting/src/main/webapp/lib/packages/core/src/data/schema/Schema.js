Ext.define("Ext.data.schema.Schema",{mixins:["Ext.mixin.Factoryable"],requires:["Ext.util.ObjectTemplate","Ext.data.schema.OneToOne","Ext.data.schema.ManyToOne","Ext.data.schema.ManyToMany","Ext.data.schema.Namer"],alias:"schema.default",aliasPrefix:"schema.",isSchema:true,type:"default",statics:{instances:{},get:function(D){var F=this,C=F.instances,G="default",B=D&&Ext.isString(D),A,E;if(D){if(D.isSchema){return D}G=B?D:(D.id||G)}if(!(A=C[G])){C[G]=A=F.create(D);A.id=G}else{if(D&&!B){if(G!=="default"){Ext.raise("Only the default Schema instance can be reconfigured")}E=Ext.merge({},A.config);Ext.merge(E,D);A.setConfig(E);A.config=E;A.setConfig=function(){Ext.raise("The schema can only be reconfigured once")}}}return A},lookupEntity:function(A){var D=null,F=this.instances,C,B,E;if(A){if(A.isEntity){D=A.self}else{if(Ext.isFunction(A)){D=A}else{if(Ext.isString(A)){D=Ext.ClassManager.get(A);if(D&&(!D.prototype||!D.prototype.isEntity)){D=null}if(!D){for(B in F){E=F[B];C=E.getEntity(A);if(C){if(D){Ext.raise('Ambiguous entity name "'+A+'". Defined by schema "'+D.schema.type+'" and "'+B+'"')}D=C}}}if(!D){Ext.raise('No such Entity "'+A+'".')}}}}}return D}},assocCount:0,entityCount:0,config:{defaultIdentifier:null,keyCheckDelay:10,namer:"default",namespace:null,proxy:{type:"ajax",url:"{prefix}/{entityName}"},urlPrefix:""},onClassExtended:function(A,C){var B=C.alias;if(B&&!C.type){if(!Ext.isString(B)){B=B[0]}A.prototype.type=B.substring(this.prototype.aliasPrefix.length)}},constructor:function(A){this.initConfig(A);this.clear()},applyDefaultIdentifier:function(A){return A&&Ext.Factory.dataIdentifier(A)},applyNamer:function(B){var A=Ext.data.schema.Namer.create(B);A.schema=this;return A},applyNamespace:function(B){if(B){var A=B.length-1;if(B.charAt(A)!=="."){B+="."}}return B},applyProxy:function(A){return Ext.util.ObjectTemplate.create(A)},eachAssociation:function(D,C){var B=this.associations,A;for(A in B){if(B.hasOwnProperty(A)){if(D.call(C,A,B[A])===false){break}}}},eachEntity:function(C,B){var D=this.entities,A;for(A in D){if(D.hasOwnProperty(A)){if(C.call(B,A,D[A].cls)===false){break}}}},getAssociation:function(A){var B=this.associations[A];return B||null},getEntity:function(A){var B=this.entityClasses[A]||this.entities[A];return(B&&B.cls)||null},getEntityName:function(A){var D=this.getNamespace(),C,B;if(typeof A==="string"){B=A}else{B=A.$className||null}if(B){if(D){C=D.length;if(B.substring(0,C)!==D){return B}}if(C){B=B.substring(C)}}return B},hasAssociations:function(A){A=A.entityName||A;return !!this.associationEntityMap[A]},hasEntity:function(A){var B=this.getEntityName(A);return !!(this.entities[B]||this.entityClasses[B])},addMatrix:function(M,G,D,C,Q){var R=this,K=R.getNamer(),O=R.associations,A=R.entities,F=C.type,P=Q.type,E=C.field||K.apply("idField",F),I=Q.field||K.apply("idField",P),B=C.role||K.matrixRole(D,F),L=Q.role||K.matrixRole(D,P),N,H,J;H=A[F]||(A[F]={cls:null,name:F,associations:{}});J=A[P]||(A[P]={cls:null,name:P,associations:{}});++R.assocCount;O[G]=N=new Ext.data.schema.ManyToMany({name:G,schema:R,definedBy:M,left:{cls:H.cls,type:F,role:B,field:E,associationKey:C.associationKey},right:{cls:J.cls,type:P,role:L,field:I,associationKey:Q.associationKey}});H.associations[N.right.role]=N.right;J.associations[N.left.role]=N.left;if(H.cls){R.associationEntityMap[H.cls.entityName]=true}if(J.cls){R.associationEntityMap[J.cls.entityName]=true}R.decorateModel(N)},addReference:function(Q,A,O,B){var U=this,M=U.getNamer(),D=U.entities,R=U.associations,L=Q.entityName,E=O.association,P=!!O.legacy,I=O.child,K=O.parent,N=O.role,S=O.type||K||I,J=O.inverse,H=Ext.isString(J)?{role:J}:J,G=H&&H.role,C,F;if(!N){if(P){N=M.apply("uncapitalize",S)}else{N=M.apply("fieldRole",A.name)}}if(!G){G=M.inverseFieldRole(L,B,N,S)}if(!E){if(B){E=M.oneToOne(Q,G,S,N)}else{E=M.manyToOne(Q,G,S,N)}}if(E in R){Ext.raise('Duplicate association: "'+E+'" declared by '+L+(A?("."+A.name):"")+" (collides with "+R[E].definedBy.entityName+")")}if(A&&A.definedBy===D[S]){Ext.raise("ForeignKey reference should not be owned by the target model")}C=D[S]||(D[S]={cls:null,name:S,associations:{}});F=B?Ext.data.schema.OneToOne:Ext.data.schema.ManyToOne;E=new F({name:E,owner:I?"left":(K?"right":null),definedBy:Q,schema:U,field:A,nullable:A?!!A.allowBlank:true,legacy:O.legacy,left:{cls:Q,type:L,role:G,extra:H},right:{cls:C.cls,type:S,role:N,extra:O}});Q.associations[N]=E.right;C.associations[G]=E.left;if(A){A.reference=E.right;Q.references.push(A)}++U.assocCount;U.associationEntityMap[L]=true;if(C.cls){U.associationEntityMap[C.cls.entityName]=true}R[E.name]=E;if(E.right.cls){U.decorateModel(E)}},privates:{addEntity:function(D){var H=this,G=H.entities,J=D.entityName,K=G[J],F=D.fields,C,I,E,B,A;if(!K){G[J]=K={name:J,associations:{}}}else{if(K.cls){Ext.raise('Duplicate entity name "'+J+'": '+K.cls.$className+" and "+D.$className)}else{C=K.associations;for(A in C){C[A].inverse.cls=D;H.associationEntityMap[J]=true;H.decorateModel(C[A].association)}}}K.cls=D;D.prototype.associations=D.associations=K.associations;H.entityClasses[D.$className]=K;++H.entityCount;for(E=0,B=F.length;E<B;++E){I=F[E];if(I.reference){H.addReferenceDescr(D,I)}}},addMatrices:function(F,A){var E=this,B,D,C;if(Ext.isString(A)){E.addMatrixDescr(F,null,A)}else{if(A[0]){for(B=0,D=A.length;B<D;++B){E.addMatrixDescr(F,null,A[B])}}else{for(C in A){E.addMatrixDescr(F,C,A[C])}}}},addMatrixDescr:function(F,B,G){var H=this,K=F.entityName,E=H.associations,I=H.getNamer(),D=G.left,N=G.right,M,C;if(Ext.isString(G)){if(G.charAt(0)==="#"){D={type:K};N={type:G.substring(1)}}else{if(G.charAt(M=G.length-1)==="#"){D={type:G.substring(0,M)};N={type:K}}else{if(I.apply("multiRole",K)<I.apply("multiRole",G)){D={type:K};N={type:G}}else{D={type:G};N={type:K}}}}}else{Ext.Assert.isString(G.type,'No "type" for manyToMany in '+K);C=G.relation;if(D||(!N&&I.apply("multiRole",K)<I.apply("multiRole",G.type))){if(!D||D===true){D={type:K}}else{D=Ext.apply({type:K},D)}N=G}else{if(!N||N===true){N={type:K}}else{N=Ext.apply({type:K},N)}D=G}}if(!B){B=I.manyToMany(C,D.type,N.type)}if(!(B in E)){H.addMatrix(F,B,C,D,N)}else{var L=E[B],J=[L.kind,L.left.type,L.left.role,L.left.field,L.right.type,L.right.role,L.right.field].join("|");delete E[B];H.addMatrix(F,B,C,D,N);var A=E[B];E[B]=L;L.left.cls.associations[L.right.role]=L.right;L.right.cls.associations[L.left.role]=L.left;--H.assocCount;A=[A.kind,A.left.type,A.left.role,A.left.field,A.right.type,A.right.role,A.right.field].join("|");if(J!=A){Ext.log.warn(B+"("+L.definedBy.entityName+"): "+J);Ext.log.warn(B+"("+K+"): "+A);Ext.raise('Conflicting association: "'+B+'" declared by '+K+" was previously declared by "+L.definedBy.entityName)}}},addReferenceDescr:function(B,D){var A=this,C=D.$reference;if(Ext.isString(C)){C={type:C}}else{C=Ext.apply({},C)}if(C.legacy){if(C.single){A.addLegacySingle(B,C)}else{A.addLegacyHasMany(B,C)}}else{A.addReference(B,D,C,D.unique)}},addPending:function(A,C,E,B){var D=this.pending;if(!D[A]){D[A]=[]}D[A].push([C,E,B])},addLegacyBelongsTo:function(A,B){this.addLegacySingle(A,B)},addLegacyHasOne:function(A,B){this.addLegacySingle(A,B)},addLegacySingle:function(C,E){var B,A,D;E=this.constructLegacyAssociation(C,E);E.single=true;A=E.type;B=E.foreignKey||(A.toLowerCase()+"_id");D=C.getField(B);if(D){D.$reference=E}this.addReference(C,D,E,true)},addLegacyHasMany:function(D,I){var J=this,F=J.entities,C=J.pending,A=I.associationKey,L,B,K,H,G,E;I=this.constructLegacyAssociation(D,I);B=I.type;H=F[B];if(H&&H.cls){I.type=D.entityName;G=I.foreignKey||(I.type.toLowerCase()+"_id");L=H.cls;K=L.getField(G);I.inverse=I||{};E=I.name;if(E||A){if(E){I.inverse.role=E}if(A){I.inverse.associationKey=A}}if(K){K.$reference=I}J.addReference(L,K,I,false)}else{if(!C[B]){C[B]=[]}C[B].push([D,I])}},constructLegacyAssociation:function(B,C){if(Ext.isString(C)){C={model:C}}C.legacy=true;C.type=this.getEntityName(C.model);var A=C.associatedName||C.name;if(A){C.role=A}return C},afterLegacyAssociations:function(B){var F=this.pending,C=B.entityName,E=F[C],D,A;if(E){for(D=0,A=E.length;D<A;++D){this.addLegacyHasMany.apply(this,E[D])}delete F[C]}},clear:function(B){var A=this,C=A.timer;delete A.setConfig;if(C){window.clearTimeout(C);A.timer=null}A.associations={};A.associationEntityMap={};A.entities={};A.entityClasses={};A.pending={};A.assocCount=A.entityCount=0;if(B){A.setNamespace(null)}},constructProxy:function(D){var B=this,C=Ext.Object.chain(D),A=B.getProxy();C.schema=B;C.prefix=B.getUrlPrefix();return A.apply(C)},applyDecoration:function(G){var E=this,A=G.inverse.cls,F=E.getNamer(),C,B,D;if(A&&!G.decorated){G.decorated=true;D=A.prototype;if(!(C=G.getterName)){G.getterName=C=F.getterName(G)}D[C]=G.createGetter();if(G.createSetter){if(!(B=G.setterName)){G.setterName=B=F.setterName(G)}D[B]=G.createSetter()}}},decorateModel:function(A){this.applyDecoration(A.left);this.applyDecoration(A.right)},processKeyChecks:function(D){var F=this,B=F.keyCheckQueue,G=F.timer,A,C,E;if(G){window.clearTimeout(G);F.timer=null}if(!B){return }do{B=F.keyCheckQueue;F.keyCheckQueue=[];for(C=0,A=B.length;C<A;++C){E=B[C];E.role.checkKeyForDrop(E.record)}}while(D&&F.keyCheckQueue.length)},queueKeyCheck:function(A,E){var C=this,B=C.keyCheckQueue,D=C.timer;if(!B){C.keyCheckQueue=B=[]}B.push({record:A,role:E});if(!D){C.timer=D=Ext.Function.defer(C.processKeyChecks,C.getKeyCheckDelay(),C)}},rankEntities:function(){var E=this,F=E.entities,A=Ext.Object.getKeys(F),D=A.length,C,B;E.nextRank=1;A.sort();for(B=0;B<D;++B){C=F[A[B]].cls;if(!C.rank){E.rankEntity(C)}}E.topoStack=null},rankEntity:function(E){var C=E.associations,G,F,A;var D=this.topoStack||(this.topoStack=[]),B=E.entityName;D.push(B);if(E.rank===0){Ext.raise(B+" has circular foreign-key references: "+D.join(" --> "))}E.rank=0;for(A in C){F=C[A];if(!F.left&&F.association.field){G=F.cls;if(!G.rank){this.rankEntity(G)}}}E.rank=this.nextRank++;D.pop()}}})