Ext.define("Ext.data.validator.Bound",{extend:"Ext.data.validator.Validator",alias:"data.validator.bound",type:"bound",config:{min:undefined,max:undefined,emptyMessage:"Must be present",minOnlyMessage:null,maxOnlyMessage:null,bothOnlyMessage:null},constructor:function(){var A=this;A.preventConfigure=true;A.callParent(arguments);delete A.preventConfigure;A.configure()},setConfig:function(){var A=this;A.preventConfigure=true;A.callParent(arguments);delete A.preventConfigure;A.configure()},configure:function(){var D=this,B,E,C,A;if(D.preventConfigure){return }C=D.getMin();A=D.getMax();B=D.hasMin=C!==undefined;E=D.hasMax=A!==undefined;if(B&&E){D._bothMsg=Ext.String.format(D.getBothMessage(),C,A)}else{if(B){D._minMsg=Ext.String.format(D.getMinOnlyMessage(),C)}else{if(E){D._maxMsg=Ext.String.format(D.getMaxOnlyMessage(),A)}}}},updateMin:function(){this.configure()},updateMax:function(){this.configure()},updateMinOnlyMessage:function(A){this.configure()},updateMaxOnlyMessage:function(){this.configure()},updateBothMessage:function(){this.configure()},validate:function(F){var E=this,C=E.hasMin,H=E.hasMax,D=E.getMin(),B=E.getMax(),G=this.validateValue(F),A;if(G!==true){return G}F=E.getValue(F);if(C&&H){if(F<D||F>B){G=E._bothMsg}}else{if(C){if(F<D){G=E._minMsg}}else{if(H){if(F>B){G=E._maxMsg}}}}return G},validateValue:function(A){if(A===undefined||A===null){return this.getEmptyMessage()}return true},getValue:Ext.identityFn})