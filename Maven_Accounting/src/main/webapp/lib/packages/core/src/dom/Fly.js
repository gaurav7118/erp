Ext.define("Ext.dom.Fly",{extend:"Ext.dom.Element",alternateClassName:"Ext.dom.Element.Fly",validNodeTypes:{1:1,9:1,11:1},isFly:true,constructor:function(A){this.dom=A;this.el=this},attach:function(B){var A=this;if(!B){return A.detach()}A.dom=B;if(!Ext.cache[B.id]){A.getData().isSynchronized=false}return A},detach:function(){this.dom=null},addListener:function(){Ext.raise("Cannot use addListener() on Ext.dom.Fly instances. Please use Ext.get() to retrieve an Ext.dom.Element instance instead.")}||null,removeListener:function(){Ext.raise("Cannot use removeListener() on Ext.dom.Fly instances. Please use Ext.get() to retrieve an Ext.dom.Element instance instead.")}||null},function(A){var B={};A.cache=B;Ext.fly=function(H,D){var F=null,E=Ext.fly,C,G;D=D||(E.caller&&E.caller.$name)||"_global";H=Ext.getDom(H);if(H){C=H.nodeType;if(A.prototype.validNodeTypes[C]||(!C&&(H.window==H))){F=Ext.cache[H.id];if(!F||F.dom!==H){F=B[D]||(B[D]=new A());F.dom=H;G=F.getData(true);if(G){G.isSynchronized=false}}}}return F}})