Ext.define("Ext.event.publisher.ElementSize",{extend:"Ext.event.publisher.Publisher",requires:["Ext.util.SizeMonitor"],type:"size",handledEvents:["resize"],constructor:function(){this.monitors={};this.subscribers={};this.callParent(arguments)},subscribe:function(B){var D=B.id,C=this.subscribers,A=this.monitors;if(C[D]){++C[D]}else{C[D]=1;A[D]=new Ext.util.SizeMonitor({element:B,callback:this.onElementResize,scope:this,args:[B]})}B.on("painted","forceRefresh",A[D]);return true},unsubscribe:function(C){var E=C.id,D=this.subscribers,B=this.monitors,A;if(D[E]&&!--D[E]){delete D[E];A=B[E];C.un("painted","forceRefresh",A);A.destroy();delete B[E]}},onElementResize:function(A,B){Ext.TaskQueue.requestRead("fire",this,[A,"resize",[A,B]])},privates:{syncRefresh:function(E){E=Ext.Array.from(E);var B=E.length,C=0,D,A;for(C=0;C<B;++C){D=E[C];if(typeof D!=="string"){D=D.id}A=this.monitors[D];if(A){A.forceRefresh()}}Ext.TaskQueue.flush()}}},function(A){A.instance=new A()})