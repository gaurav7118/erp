Ext.Array=(function(){var C=Array.prototype,J=C.slice,L=(function(){var U=[],S,T=20;if(!U.splice){return false}while(T--){U.push("A")}U.splice(15,0,"F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F","F");S=U.length;U.splice(13,0,"XXX");if(S+1!==U.length){return false}return true}()),K="indexOf" in C,F=true;function I(W,T){var S=W.length,V=new Array(S),U;for(U=0;U<S;U++){V[U]=U}V.sort(function(Y,X){return T(W[Y],W[X])||(Y-X)});for(U=0;U<S;U++){V[U]=W[V[U]]}for(U=0;U<S;U++){W[U]=V[U]}return W}try{if(typeof document!=="undefined"){J.call(document.getElementsByTagName("body"))}}catch(N){F=false}var H=function(T,S){return(S<0)?Math.max(0,T.length+S):Math.min(T.length,S)},R=function(a,Z,T,d){var e=d?d.length:0,V=a.length,b=H(a,Z);if(b===V){if(e){a.push.apply(a,d)}}else{var Y=Math.min(T,V-b),c=b+Y,U=c+e-Y,S=V-c,W=V-Y,X;if(U<c){for(X=0;X<S;++X){a[U+X]=a[c+X]}}else{if(U>c){for(X=S;X--;){a[U+X]=a[c+X]}}}if(e&&b===W){a.length=W;a.push.apply(a,d)}else{a.length=W+e;for(X=0;X<e;++X){a[b+X]=d[X]}}}return a},E=function(V,S,U,T){if(T&&T.length){if(S===0&&!U){V.unshift.apply(V,T)}else{if(S<V.length){V.splice.apply(V,[S,U].concat(T))}else{V.push.apply(V,T)}}}else{V.splice(S,U)}return V},B=function(U,S,T){return R(U,S,T)},M=function(U,S,T){U.splice(S,T);return U},G=function(W,S,U){var V=H(W,S),T=W.slice(S,H(W,V+U));if(arguments.length<4){R(W,V,U)}else{R(W,V,U,J.call(arguments,3))}return T},D=function(S){return S.splice.apply(S,J.call(arguments,1))},Q=L?M:B,O=L?E:R,P=L?D:G,A={binarySearch:function(Z,W,U,S,Y){var V=Z.length,T,X;if(U instanceof Function){Y=U;U=0;S=V}else{if(S instanceof Function){Y=S;S=V}else{if(U===undefined){U=0}if(S===undefined){S=V}Y=Y||A.lexicalCompare}}--S;while(U<=S){T=(U+S)>>1;X=Y(W,Z[T]);if(X>=0){U=T+1}else{if(X<0){S=T-1}}}return U},defaultCompare:function(S,T){return(S<T)?-1:((S>T)?1:0)},lexicalCompare:function(S,T){S=String(S);T=String(T);return(S<T)?-1:((S>T)?1:0)},each:function(X,V,U,S){X=A.from(X);var T,W=X.length;if(S!==true){for(T=0;T<W;T++){if(V.call(U||X[T],X[T],T,X)===false){return T}}}else{for(T=W-1;T>-1;T--){if(V.call(U||X[T],X[T],T,X)===false){return T}}}return true},forEach:("forEach" in C)?function(U,T,S){return U.forEach(T,S)}:function(W,U,T){for(var S=0,V=W.length;S<V;S++){U.call(T,W[S],S,W)}},indexOf:K?function(U,S,T){return C.indexOf.call(U,S,T)}:function(W,U,V){var S,T=W.length;for(S=(V<0)?Math.max(0,T+V):V||0;S<T;S++){if(W[S]===U){return S}}return -1},contains:K?function(T,S){return C.indexOf.call(T,S)!==-1}:function(V,U){var S,T;for(S=0,T=V.length;S<T;S++){if(V[S]===U){return true}}return false},toArray:function(U,W,S){if(!U||!U.length){return[]}if(typeof U==="string"){U=U.split("")}if(F){return J.call(U,W||0,S||U.length)}var V=[],T;W=W||0;S=S?((S<0)?U.length+S:S):U.length;for(T=W;T<S;T++){V.push(U[T])}return V},pluck:function(X,S){var T=[],U,W,V;for(U=0,W=X.length;U<W;U++){V=X[U];T.push(V[S])}return T},map:("map" in C)?function(U,T,S){Ext.Assert.isFunction(T,"Ext.Array.map must have a callback function passed as second argument.");return U.map(T,S)}:function(X,W,V){Ext.Assert.isFunction(W,"Ext.Array.map must have a callback function passed as second argument.");var U=[],S=X.length,T;for(T=0;T<S;T++){U[T]=W.call(V,X[T],T,X)}return U},every:("every" in C)?function(U,T,S){Ext.Assert.isFunction(T,"Ext.Array.every must have a callback function passed as second argument.");return U.every(T,S)}:function(W,U,T){Ext.Assert.isFunction(U,"Ext.Array.every must have a callback function passed as second argument.");var S=0,V=W.length;for(;S<V;++S){if(!U.call(T,W[S],S,W)){return false}}return true},some:("some" in C)?function(U,T,S){Ext.Assert.isFunction(T,"Ext.Array.some must have a callback function passed as second argument.");return U.some(T,S)}:function(W,U,T){Ext.Assert.isFunction(U,"Ext.Array.some must have a callback function passed as second argument.");var S=0,V=W.length;for(;S<V;++S){if(U.call(T,W[S],S,W)){return true}}return false},equals:function(W,V){var T=W.length,S=V.length,U;if(W===V){return true}if(T!==S){return false}for(U=0;U<T;++U){if(W[U]!==V[U]){return false}}return true},clean:function(W){var T=[],S=0,V=W.length,U;for(;S<V;S++){U=W[S];if(!Ext.isEmpty(U)){T.push(U)}}return T},unique:function(W){var V=[],S=0,U=W.length,T;for(;S<U;S++){T=W[S];if(A.indexOf(V,T)===-1){V.push(T)}}return V},filter:("filter" in C)?function(U,T,S){Ext.Assert.isFunction(T,"Ext.Array.filter must have a filter function passed as second argument.");return U.filter(T,S)}:function(X,V,U){Ext.Assert.isFunction(V,"Ext.Array.filter must have a filter function passed as second argument.");var T=[],S=0,W=X.length;for(;S<W;S++){if(V.call(U,X[S],S,X)){T.push(X[S])}}return T},findBy:function(W,V,U){var T=0,S=W.length;for(;T<S;T++){if(V.call(U||W,W[T],T)){return W[T]}}return null},from:function(U,T){if(U===undefined||U===null){return[]}if(Ext.isArray(U)){return(T)?J.call(U):U}var S=typeof U;if(U&&U.length!==undefined&&S!=="string"&&(S!=="function"||!U.apply)){return A.toArray(U)}return[U]},remove:function(U,T){var S=A.indexOf(U,T);if(S!==-1){Q(U,S,1)}return U},removeAt:function(V,T,U){var S=V.length;if(T>=0&&T<S){U=U||1;U=Math.min(U,S-T);Q(V,T,U)}return V},include:function(T,S){if(!A.contains(T,S)){T.push(S)}},clone:function(S){return J.call(S)},merge:function(){var S=J.call(arguments),V=[],T,U;for(T=0,U=S.length;T<U;T++){V=V.concat(S[T])}return A.unique(V)},intersect:function(){var S=[],U=J.call(arguments),f,d,Z,c,g,V,T,b,e,W,a,Y,X;if(!U.length){return S}f=U.length;for(a=g=0;a<f;a++){V=U[a];if(!c||V.length<c.length){c=V;g=a}}c=A.unique(c);Q(U,g,1);T=c.length;f=U.length;for(a=0;a<T;a++){b=c[a];W=0;for(Y=0;Y<f;Y++){d=U[Y];Z=d.length;for(X=0;X<Z;X++){e=d[X];if(b===e){W++;break}}}if(W===f){S.push(b)}}return S},difference:function(T,S){var Y=J.call(T),W=Y.length,V,U,X;for(V=0,X=S.length;V<X;V++){for(U=0;U<W;U++){if(Y[U]===S[V]){Q(Y,U,1);U--;W--}}}return Y},reduce:Array.prototype.reduce?function(U,T,S){if(arguments.length===3){return Array.prototype.reduce.call(U,T,S)}return Array.prototype.reduce.call(U,T)}:function(X,W,S){X=Object(X);if(!Ext.isFunction(W)){Ext.raise("Invalid parameter: expected a function.")}var U=0,V=X.length>>>0,T=S;if(arguments.length<3){while(true){if(U in X){T=X[U++];break}if(++U>=V){throw new TypeError("Reduce of empty array with no initial value")}}}for(;U<V;++U){if(U in X){T=W(T,X[U],U,X)}}return T},slice:([1,2].slice(1,undefined).length?function(U,T,S){return J.call(U,T,S)}:function(U,T,S){if(typeof T==="undefined"){return J.call(U)}if(typeof S==="undefined"){return J.call(U,T)}return J.call(U,T,S)}),sort:function(T,S){return I(T,S||A.lexicalCompare)},flatten:function(U){var T=[];function S(V){var X,Y,W;for(X=0,Y=V.length;X<Y;X++){W=V[X];if(Ext.isArray(W)){S(W)}else{T.push(W)}}return T}return S(U)},min:function(X,W){var T=X[0],S,V,U;for(S=0,V=X.length;S<V;S++){U=X[S];if(W){if(W(T,U)===1){T=U}}else{if(U<T){T=U}}}return T},max:function(X,W){var S=X[0],T,V,U;for(T=0,V=X.length;T<V;T++){U=X[T];if(W){if(W(S,U)===-1){S=U}}else{if(U>S){S=U}}}return S},mean:function(S){return S.length>0?A.sum(S)/S.length:undefined},sum:function(W){var T=0,S,V,U;for(S=0,V=W.length;S<V;S++){U=W[S];T+=U}return T},toMap:function(W,S,U){var V={},T=W.length;if(!S){while(T--){V[W[T]]=T+1}}else{if(typeof S==="string"){while(T--){V[W[T][S]]=T+1}}else{while(T--){V[S.call(U,W[T])]=T+1}}}return V},toValueMap:function(Y,V,d,X){var S={},U=Y.length,T,W,b,Z,c,a;if(!V){while(U--){a=Y[U];S[a]=a}}else{if(!(Z=(typeof V!=="string"))){X=d}W=X===1;T=X===2;while(U--){a=Y[U];c=Z?V.call(d,a):a[V];if(W){if(c in S){S[c].push(a)}else{S[c]=[a]}}else{if(T&&(c in S)){if((b=S[c]) instanceof Array){b.push(a)}else{S[c]=[b,a]}}else{S[c]=a}}}}return S},_replaceSim:R,_spliceSim:G,erase:Q,insert:function(U,T,S){return O(U,T,0,S)},move:function(X,T,V){if(V===T){return }var U=X[T],W=V>T?1:-1,S;for(S=T;S!=V;S+=W){X[S]=X[S+W]}X[V]=U},replace:O,splice:P,push:function(V){var S=arguments.length,U=1,T;if(V===undefined){V=[]}else{if(!Ext.isArray(V)){V=[V]}}for(;U<S;U++){T=arguments[U];Array.prototype.push[Ext.isIterable(T)?"apply":"call"](V,T)}return V},numericSortFn:function(T,S){return T-S}};Ext.each=A.each;A.union=A.merge;Ext.min=A.min;Ext.max=A.max;Ext.sum=A.sum;Ext.mean=A.mean;Ext.flatten=A.flatten;Ext.clean=A.clean;Ext.unique=A.unique;Ext.pluck=A.pluck;Ext.toArray=function(){return A.toArray.apply(A,arguments)};return A}())