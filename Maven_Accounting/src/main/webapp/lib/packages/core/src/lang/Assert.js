Ext.Assert={falsey:function(A,B){if(A){Ext.raise(B||("Expected a falsey value but was "+A))}},falseyProp:function(B,C){Ext.Assert.truthy(B);var A=B[C];if(A){if(B.$className){C=B.$className+"#"+C}Ext.raise("Expected a falsey value for "+C+" but was "+A)}},truthy:function(A,B){if(!A){Ext.raise(B||("Expected a truthy value but was "+typeof A))}},truthyProp:function(B,C){Ext.Assert.truthy(B);var A=B[C];if(!A){if(B.$className){C=B.$className+"#"+C}Ext.raise("Expected a truthy value for "+C+" but was "+typeof A)}}};(function(){function B(G,H){var J=Ext[G],I;return function(K,L){if(!J(K)){Ext.raise(L||I||(I="Expected value to be "+H))}}}function E(G,H){var J=Ext[G],I;return function(K,L){Ext.Assert.truthy(K);if(!J(K[L])){Ext.raise(I||(I="Expected "+(K.$className?K.$className+"#":"")+L+" to be "+H))}}}function F(G,H){var J=Ext[G],I;return function(K,L){if(J(K)){Ext.raise(L||I||(I="Expected value to NOT be "+H))}}}function A(G,H){var J=Ext[G],I;return function(K,L){Ext.Assert.truthy(K);if(J(K[L])){Ext.raise(I||(I="Expected "+(K.$className?K.$className+"#":"")+L+" to NOT be "+H))}}}for(var C in Ext){if(C.substring(0,2)=="is"&&Ext.isFunction(Ext[C])){var D=C.substring(2);Ext.Assert[C]=B(C,D);Ext.Assert[C+"Prop"]=E(C,D);Ext.Assert["isNot"+D]=F(C,D);Ext.Assert["isNot"+D+"Prop"]=A(C,D)}}}())