Ext.define("Ext.mixin.Bindable",{mixinId:"bindable",config:{bind:{$value:null,lazy:true},controller:null,defaultListenerScope:false,publishes:{$value:null,lazy:true,merge:function(B,A){return this.mergeSets(B,A)}},reference:null,session:{$value:null,lazy:true},twoWayBindable:{$value:null,lazy:true,merge:function(B,A){return this.mergeSets(B,A)}},viewModel:{$value:null,lazy:true}},defaultBindProperty:null,validRefRe:/^[a-z_][a-z0-9_]*$/i,initInheritedState:function(D){var E=this,A=E.getReference(),B=E.getController(),C=E.getConfig("viewModel",true),G=E.getConfig("session",true),F=E.getDefaultListenerScope();if(B){D.controller=B}if(F){D.defaultListenerScope=E}else{if(B){D.defaultListenerScope=B}}if(C){if(!C.isViewModel){C=E}D.viewModel=C}if(G){if(!G.isSession){G=E}D.session=G}if(A){E.referenceKey=(D.referencePath||"")+A;E.viewModelKey=(D.viewModelPath||"")+A}},lookupController:function(A){return this.getInheritedConfig("controller",A)||null},lookupSession:function(A){var B=A?null:this.getSession();if(!B){B=this.getInheritedConfig("session",A);if(B&&!B.isSession){B=B.getInherited().session=B.getSession()}}return B||null},lookupViewModel:function(A){var B=A?null:this.getViewModel();if(!B){B=this.getInheritedConfig("viewModel",A);if(B&&!B.isViewModel){B=B.getInherited().viewModel=B.getViewModel()}}return B||null},publishState:function(J,I){var H=this,B=H.publishedState,E=H.getBind(),G=E&&J&&E[J],F=0,C,A,D,K;if(G&&!G.syncing&&!G.isReadOnly()){if(!(G.calls===0&&(I==null||I===H.getInitialConfig()[J]))){G.setValue(I)}}if(!(A=H.getPublishes())){return }if(!(D=H.lookupViewModel())){return }if(!(K=H.viewModelKey)){return }if(J&&B){if(!A[J]){return }if(!(I&&I.constructor===Object)&&!(I instanceof Array)){if(B[J]===I){return }}K+=".";K+=J}else{B=B||(H.publishedState={});for(C in A){++F;if(C===J){B[C]=I}else{B[C]=H[C]}}if(!F){return }I=B}D.set(K,I)},privates:{addBindableUpdater:function(C){var B=this,D=B.self.$config.configs,A=D[C],E;if(A&&!B.hasOwnProperty(E=A.names.update)){B[E]=A.bindableUpdater||(A.root.bindableUpdater=B.makeBindableUpdater(A))}},applyBind:function(C,I){if(!C){return C}var E=this,G=E.lookupViewModel(),D=E.getTwoWayBindable(),A=E._getBindTemplateScope,F,H,B;if(!I||typeof I==="string"){I={}}if(!G){Ext.raise("Cannot use bind config without a viewModel")}if(Ext.isString(C)){if(!E.defaultBindProperty){Ext.raise(E.$className+" has no defaultBindProperty - Please specify a bind object")}F=C;C={};C[E.defaultBindProperty]=F}for(H in C){B=C[H];F=I[H];if(F&&typeof F!=="string"){F.destroy();F=null}if(B){F=G.bind(B,E.onBindNotify,E);F._config=Ext.Config.get(H);F.getTemplateScope=A;if(!E[F._config.names.set]){Ext.raise("Cannot bind "+H+" on "+E.$className+" - missing a "+F._config.names.set+" method.")}}I[H]=F;if(D&&D[H]&&!F.isReadOnly()){E.addBindableUpdater(H)}}return I},applyController:function(A){if(A){A=Ext.Factory.controller(A);A.setView(this)}return A},applyPublishes:function(A){if(this.lookupViewModel()){for(var B in A){this.addBindableUpdater(B)}}return A},applyReference:function(A){var B=this.validRefRe||Ext.validIdRe;if(A&&!B.test(A)){Ext.raise('Invalid reference "'+A+'" for '+this.getId()+" - not a valid identifier")}return A},applySession:function(C){if(!C){return null}if(!C.isSession){var B=this.lookupSession(true),A=(C===true)?{}:C;if(B){C=B.spawn(A)}else{C=new Ext.data["Session"](A)}}return C},applyViewModel:function(B){var C=this,A,D;if(!B){return null}if(!B.isViewModel){A={parent:C.lookupViewModel(true)};A.session=C.getSession();if(!D&&!A.parent){A.session=C.lookupSession()}if(B){if(B.constructor===Object){Ext.apply(A,B)}else{if(typeof B==="string"){A.type=B}}}B=Ext.Factory.viewModel(A)}return B},_getBindTemplateScope:function(){return this.scope.resolveListenerScope()},destroyBindable:function(){var C=this,B=C.getConfig("viewModel",true),D=C.getConfig("session",true),A=C.getController();if(B&&B.isViewModel){B.destroy();C.setViewModel(null)}if(D&&D.isSession){if(D.getAutoDestroy()){D.destroy()}C.setSession(null)}if(A){C.setController(null);A.destroy()}},initBindable:function(){this.initBindable=Ext.emptyFn;this.getBind();this.getPublishes()},makeBindableUpdater:function(A){var B=A.names.update;return function(E,C){var D=this,F=D.self.prototype[B];if(F){F.call(D,E,C)}D.publishState(A.name,E)}},isSyncing:function(B){var D=this.getBind(),A=false,C;if(D){C=D[B];if(C){A=C.syncing>0}}return A},onBindNotify:function(B,A,C){C.syncing=(C.syncing+1)||1;this[C._config.names.set](B);--C.syncing},removeBindings:function(){var B=this,D,A,C;if(!B.destroying){D=B.getBind();if(D&&typeof D!=="string"){for(A in D){C=D[A];C.destroy();C._config=C.getTemplateScope=null}}}B.setBind(null)},updateSession:function(B){var A=this.getInherited();if(B){A.session=B}else{delete A.session}},updateViewModel:function(B){var C=this.getInherited(),A=this.getController();if(B){C.viewModel=B;B.setView(this);if(A){A.initViewModel(B)}}else{delete C.viewModel}}}})