Ext.define("Ext.promise.Consequence",function(A){return{promise:null,deferred:null,onFulfilled:null,onRejected:null,onProgress:null,constructor:function(E,B,D){var C=this;C.onFulfilled=E;C.onRejected=B;C.onProgress=D;C.deferred=new Ext.promise.Deferred();C.promise=C.deferred.promise},trigger:function(E,D){var C=this,B=C.deferred;switch(E){case"fulfill":C.propagate(D,C.onFulfilled,B,B.resolve);break;case"reject":C.propagate(D,C.onRejected,B,B.reject);break}},update:function(B){if(Ext.isFunction(this.onProgress)){B=this.onProgress(B)}this.deferred.update(B)},propagate:function(D,E,B,C){if(Ext.isFunction(E)){this.schedule(function(){try{B.resolve(E(D))}catch(F){B.reject(F)}})}else{C.call(this.deferred,D)}},schedule:function(C){var B=A.queueSize++;A.queue[B]=C;if(!B){Ext.asap(A.dispatch)}},statics:{queue:new Array(10000),queueSize:0,dispatch:function(){var B=A.queue,D,C;for(C=0;C<A.queueSize;++C){D=B[C];B[C]=null;D()}A.queueSize=0}}}})