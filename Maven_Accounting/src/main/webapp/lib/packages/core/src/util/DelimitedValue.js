Ext.define("Ext.util.DelimitedValue",{dateFormat:"C",delimiter:"\t",lineBreak:"\n",quote:'"',parseREs:{},quoteREs:{},lineBreakRe:/\r?\n/g,constructor:function(A){if(A){Ext.apply(this,A)}},decode:function(J,B){var H=this,C=(B||H.delimiter),M=[],N=[M],A=H.quote,F=H.quoteREs,K=H.parseREs,L=K[C]||(K[C]=new RegExp("(\\"+C+"|\\r?\\n|\\r|^)(?:\\"+A+"([^\\"+A+"]*(?:\\"+A+"\\"+A+"[^\\"+A+"]*)*)\\"+A+'|([^"\\'+C+"\\r\\n]*))","gi")),E=F[A]||(F[A]=new RegExp("\\"+A+"\\"+A,"g")),G,D,I;while(G=L.exec(J)){D=G[1];if(D.length&&D!==C){N.push(M=[])}if(G[2]){I=G[2].replace(E,'"')}else{I=G[3]}M.push(I)}return N},encode:function(L,C){var I=this,E=C||I.delimiter,D=I.dateFormat,B=I.quote,J=B+B,K=L.length,G=I.lineBreakRe,N=[],A=[],F,H,M;while(K-->0){M=L[K];A.length=H=M.length;while(H-->0){F=M[H];if(F==null){F=""}else{if(typeof F==="string"){if(F){if(F.indexOf(B)>-1){F=B+F.split(B).join(J)+B}else{if(F.indexOf(E)>-1||G.test(F)){F=B+F+B}}}}else{if(Ext.isDate(F)){F=Ext.Date.format(F,D)}else{if(F&&(isNaN(F)||Ext.isArray(F))){Ext.raise("Cannot serialize "+Ext.typeOf(F)+" into CSV")}}}}A[H]=F}N[K]=A.join(E)}return N.join(I.lineBreak)}})