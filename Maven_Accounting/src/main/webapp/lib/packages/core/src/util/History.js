Ext.define("Ext.util.History",{singleton:true,alternateClassName:"Ext.History",mixins:{observable:"Ext.util.Observable"},useTopWindow:false,constructor:function(){var A=this;A.hiddenField=null;A.ready=false;A.currentToken=null;A.mixins.observable.constructor.call(A)},getHash:function(){return this.win.location.hash.substr(1)},setHash:function(B){try{this.win.location.hash=B;this.currentToken=B}catch(A){}},handleStateChange:function(A){this.currentToken=A;this.fireEvent("change",A)},startUp:function(){var A=this;A.currentToken=A.getHash();if(Ext.supports.Hashchange){Ext.get(A.win).on("hashchange",A.onHashChange,A)}else{Ext.TaskManager.start({fireIdleEvent:false,run:A.onHashChange,interval:50,scope:A})}A.ready=true;A.fireEvent("ready",A)},onHashChange:function(){var B=this,A=B.getHash();if(A!==B.hash){B.hash=A;B.handleStateChange(A)}},init:function(C,A){var B=this;if(B.ready){Ext.callback(C,A,[B]);return }if(!Ext.isReady){Ext.onInternalReady(function(){B.init(C,A)});return }B.win=B.useTopWindow?window.top:window;B.hash=B.getHash();if(C){B.on("ready",C,A,{single:true})}B.startUp()},add:function(A,B){var C=this,D=false;if(B===false||C.getToken()!==A){C.setHash(A);D=true}return D},back:function(){var A=this.useTopWindow?window.top:window;A.history.go(-1)},forward:function(){var A=this.useTopWindow?window.top:window;A.history.go(1)},getToken:function(){return this.ready?this.currentToken:this.getHash()}})