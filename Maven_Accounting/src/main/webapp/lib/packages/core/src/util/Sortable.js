Ext.define("Ext.util.Sortable",{isSortable:true,$configPrefixed:false,$configStrict:false,config:{sorters:null},defaultSortDirection:"ASC",requires:["Ext.util.Sorter"],multiSortLimit:3,statics:{createComparator:function(A){return A&&A.length?function(D,C){var B=A[0].sort(D,C),F=A.length,E=1;for(;!B&&E<F;E++){B=A[E].sort.call(A[E],D,C)}return B}:function(){return 0}}},applySorters:function(C){var B=this,A=B.getSorters()||new Ext.util.MixedCollection(false,Ext.returnId);if(C){A.addAll(B.decodeSorters(C))}return A},sort:function(G,F,A,E){var B=this,H,D,C=B.getSorters();if(!C){B.setSorters(null);C=B.getSorters()}if(Ext.isArray(G)){E=A;A=F}else{if(Ext.isObject(G)){G=[G];E=A;A=F}else{if(Ext.isString(G)){H=C.get(G);if(!H){H={property:G,direction:F}}else{if(F==null){H.toggle()}else{H.setDirection(F)}}G=[H]}}}if(G&&G.length){G=B.decodeSorters(G);switch(A){case"multi":C.insert(0,G[0]);D=C.getCount()-B.multiSortLimit;if(D>0){C.removeRange(B.multiSortLimit,D)}break;case"prepend":C.insert(0,G);break;case"append":C.addAll(G);break;case undefined:case null:case"replace":C.clear();C.addAll(G);break;default:Ext.raise('Sorter insertion point must be "multi", "prepend", "append" or "replace"')}}if(E!==false){B.fireEvent("beforesort",B,G);B.onBeforeSort(G);if(B.getSorterCount()){B.doSort(B.generateComparator())}}return G},getSorterCount:function(){return this.getSorters().items.length},generateComparator:function(){var A=this.getSorters().getRange();return A.length?this.createComparator(A):this.emptyComparator},emptyComparator:function(){return 0},onBeforeSort:Ext.emptyFn,decodeSorters:function(F){if(!Ext.isArray(F)){if(F===undefined){F=[]}else{F=[F]}}var D=F.length,G=Ext.util.Sorter,B=this.getModel?this.getModel():this.model,E,A,C;for(C=0;C<D;C++){A=F[C];if(!(A instanceof G)){if(Ext.isString(A)){A={property:A}}Ext.applyIf(A,{root:this.sortRoot,direction:"ASC"});if(A.fn){A.sorterFn=A.fn}if(typeof A=="function"){A={sorterFn:A}}if(B&&!A.transform){E=B.getField(A.property);A.transform=E&&E.sortType!==Ext.identityFn?E.sortType:undefined}F[C]=new Ext.util.Sorter(A)}}return F},getFirstSorter:function(){var C=this.getSorters().items,A=C.length,B=0,D;for(;B<A;++B){D=C[B];if(!D.isGrouper){return D}}return null}},function(){this.prototype.createComparator=this.createComparator})