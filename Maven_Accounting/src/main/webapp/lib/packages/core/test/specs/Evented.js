describe("Ext.Evented",function(){function A(C){function B(D){var E;D=D||{};if(C==="extension"){E={extend:"Ext.Evented",eventedConfig:{foo:"foo"}}}else{E={extend:"Ext.mixin.Observable",config:{foo:{$value:"foo",evented:true}}}}Ext.merge(D,E);return Ext.define(null,D)}describe("Evented Config via "+C,function(){describe("Getter/Setter",function(){var D;beforeEach(function(){D=B()});it("getter should should return initial value",function(){var E=Ext.create(D,{});expect(E.getFoo()).toBe("foo")});it("getter should return value set by setter",function(){var E=Ext.create(D,{});E.setFoo("bar");expect(E.getFoo()).toBe("bar")})});describe("Config Lifecycle",function(){var D;beforeEach(function(){var E={applyFoo:function(G,F){return G},updateFoo:function(F){}};D=B(E)});it("applier should be called with proper new and old values",function(){var E=Ext.create(D,{});spyOn(E,"applyFoo");E.setFoo("bar");expect(E.applyFoo).toHaveBeenCalledWith("bar","foo")});it("updater should be called with proper new and old values",function(){var E=Ext.create(D,{});spyOn(E,"updateFoo");E.setFoo("bar");expect(E.updateFoo).toHaveBeenCalledWith("bar","foo")});it("should run each lifecycle function once when set",function(){var E=Ext.create(D,{});spyOn(E,"setFoo").andCallThrough();spyOn(E,"applyFoo").andCallThrough();spyOn(E,"updateFoo").andCallThrough();E.setFoo("bar");expect(E.setFoo.callCount).toEqual(1);expect(E.applyFoo.callCount).toEqual(1);expect(E.updateFoo.callCount).toEqual(1)})});describe("Evented Events listeners via listener config",function(){var D;beforeEach(function(){var E={listeners:{foochange:"onFooChange",beforefoochange:"onBeforeFooChange"},onFooChange:function(G,H,F){},onBeforeFooChange:function(G,H,F){}};D=B(E)});it("setter should trigger change listener once with proper args and scope",function(){var E=Ext.create(D,{});spyOn(E,"onFooChange");E.setFoo("bar");expect(E.onFooChange.callCount).toEqual(1);expect(E.onFooChange.mostRecentCall.object).toBe(E);expect(E.onFooChange.mostRecentCall.args[0]).toBe(E);expect(E.onFooChange.mostRecentCall.args[1]).toBe("bar");expect(E.onFooChange.mostRecentCall.args[2]).toBe("foo")});it("setter should trigger beforechange listener once with proper args and scope",function(){var E=Ext.create(D,{});spyOn(E,"onBeforeFooChange");E.setFoo("bar");expect(E.onBeforeFooChange.callCount).toEqual(1);expect(E.onBeforeFooChange.mostRecentCall.object).toBe(E);expect(E.onBeforeFooChange.mostRecentCall.args[0]).toBe(E);expect(E.onBeforeFooChange.mostRecentCall.args[1]).toBe("bar");expect(E.onBeforeFooChange.mostRecentCall.args[2]).toBe("foo")})});describe("Evented Event listeners via on with order options",function(){it("setter should trigger beforechange, before change, change, after change in proper order",function(){var F=B({}),E=Ext.create(F,{}),D=[];E.on("beforefoochange",function(){D.push(1)});E.on("foochange",function(){D.push(2)},this,null,"before");E.on("foochange",function(){D.push(3)});E.on("foochange",function(){D.push(4)},this,null,"after");E.setFoo("bar");expect(D).toEqual([1,2,3,4])})});describe("Evented Event listeners via on, onBefore & onAfter",function(){it("setter should trigger beforechange, before change, change, after change in proper order",function(){var F=B({}),E=Ext.create(F,{}),D=[];E.on("beforefoochange",function(){D.push(1)});E.onBefore("foochange",function(){D.push(2)});E.on("foochange",function(){D.push(3)});E.onAfter("foochange",function(){D.push(4)});E.setFoo("bar");expect(D).toEqual([1,2,3,4])})});describe("Evented config beforeChange Listener",function(){it("beforeChange event should be given a controller as the 4th parameter with resume/pause functions",function(){var E={listeners:{beforefoochange:"onBeforeFooChange"},onBeforeFooChange:function(K,L,J,I){},updateFoo:function(J,I){}},H=B(E),G=Ext.create(H,{}),D,F;spyOn(G,"onBeforeFooChange");G.setFoo("bar");F=G.onBeforeFooChange.mostRecentCall.args;expect(F.length).toBeGreaterThan(3);D=F[3];expect(D.pause).toBeDefined();expect(D.resume).toBeDefined()});it("controller pause should delay updater until resume is called",function(E){var D={listeners:{beforefoochange:"onBeforeFooChange"},onBeforeFooChange:function(J,K,I,H){H.pause();setTimeout(function(){H.resume();expect(J.updateFoo.callCount).toBe(1);E()},500)},updateFoo:function(I,H){}},G=B(D),F=Ext.create(G,{});spyOn(F,"updateFoo");F.setFoo("bar");expect(F.updateFoo.callCount).toBe(0)})})})}A("extension");A("metadata")})