describe("Ext.JSON",function(){var A;beforeEach(function(){A=Ext.USE_NATIVE_JSON;Ext.USE_NATIVE_JSON=false});afterEach(function(){Ext.USE_NATIVE_JSON=A});describe("encode",function(){var B=Ext.JSON.encode;describe("numbers encoding",function(){it("should convert integer to string",function(){expect(B(15)).toEqual("15")});it("should convert float to string",function(){expect(B(14.7)).toEqual("14.7")});it("should convert Infinity to null string",function(){expect(B(Infinity)).toEqual("null")});it("should convert NaN to null string",function(){expect(B(NaN)).toEqual("null")})});describe("encoding of not defined values",function(){it("should convert undefined to null string",function(){expect(B(undefined)).toEqual("null")});it("should convert null to null string",function(){expect(B(null)).toEqual("null")})});describe("encoding function",function(){it("should convert function to null string",function(){expect(B(Ext.emptyFn)).toEqual("null")})});describe("boolean encoding",function(){it("should convert true to 'true'' string",function(){expect(B(true)).toEqual("true")});it("should convert null to 'false' string",function(){expect(B(false)).toEqual("false")})});describe("array encoding",function(){it("should convert empty array",function(){expect(B([])).toEqual("[]")});it("should convert array of numbers to string",function(){expect(B([1,2,3])).toEqual("[1,2,3]")});it("should convert array of strings to string",function(){expect(B(["a","b","c"])).toEqual('["a","b","c"]')});it("should encode array including function member to string",function(){expect(B([1,Ext.emptyFn,3])).toEqual("[1,null,3]")});it("should convert array including undefined member to string",function(){expect(B([1,undefined,3])).toEqual("[1,null,3]")});it("should convert array including null member to string",function(){expect(B([1,null,3])).toEqual("[1,null,3]")})});describe("string encoding",function(){it("should convert string",function(){expect(B("You're fired!")).toEqual('"You\'re fired!"')});it("should convert string with international character",function(){expect(B("You're fired!")).toEqual('"You\'re fired!"')});it("should convert string with tab character",function(){expect(B("a\tb")).toEqual('"a\\tb"')});it("should convert string with carriage return character",function(){expect(B("a\rb")).toEqual('"a\\rb"')});it("should convert string with form feed character",function(){expect(B("a\fb")).toEqual('"a\\fb"')});it("should convert string with new line character",function(){expect(B("a\nb")).toEqual('"a\\nb"')});it("should convert string with vertical tab character",function(){expect(B("a\x0bb")).toEqual('"a\\u000bb"')});it("should convert string with backslash character",function(){expect(B("a\\b")).toEqual('"a\\\\b"')})});describe("object encoding",function(){it("should convert empty object",function(){expect(B({})).toEqual("{}")});it("should ignore undefined properties",function(){expect(B({foo:"bar",bar:undefined})).toEqual('{"foo":"bar"}')});it("should convert empty object with null property",function(){expect(B({foo:"bar",bar:null})).toEqual('{"foo":"bar","bar":null}')});it("should ignore function properties",function(){expect(B({foo:"bar",bar:Ext.emptyFn})).toEqual('{"foo":"bar"}')});it("should not encode dom object",function(){expect(B(document.body)).toBe("undefined")});it("should handle encoding unknown child objects",function(){expect(B({prop:document.body})).toBe('{"prop":undefined}')})});describe("encodeDate",function(){var C;it("should encode a date object",function(){C=new Date("October 13, 1983 04:04:00");expect(B(C)).toEqual('"1983-10-13T04:04:00"')});it("should format integers to have at least two digits",function(){C=new Date("August 9, 1983 06:03:02");expect(B(C)).toEqual('"1983-08-09T06:03:02"')})});describe("mix all possibilities",function(){it("should encode data",function(){expect(B({arr:[1,Ext.emptyFn,undefined,2,[1,2,3],{a:1,b:null}],foo:"bar",woo:{chu:"a\tb"}})).toEqual('{"arr":[1,null,null,2,[1,2,3],{"a":1,"b":null}],"foo":"bar","woo":{"chu":"a\\tb"}}')})})});describe("decode",function(){it("should decode data",function(){expect(Ext.decode('{"arr":[1,null,null,2,[1,2,3],{"a":1,"b":null}],"foo":"bar","woo":{"chu":"a\\tb"}}')).toEqual({arr:[1,null,null,2,[1,2,3],{a:1,b:null}],foo:"bar",woo:{chu:"a\tb"}})});it("should raise an Ext.Error with invalid data",function(){expect(function(){Ext.decode('{foo:"bar", x}')}).toRaiseExtError()});describe("with safe param",function(){it("should decode valid data",function(){expect(Ext.decode('{"foo":"bar"}',true)).toEqual({foo:"bar"})});it("should return null with invalid data",function(){expect(Ext.decode('{foo+"bar"}',true)).toBeNull()})})});it("should encode and decode an object",function(){var B={a:[0,1,2],s:"It's-me-Jacky!!",ss:"!@#$%^&*()~=_-+][{};:?/.,<>'\"",u:"\x01",i:1,f:3.14,b:false,n:null,tree:{sub:{subMore:{subEvenMore:{arr:[5,6,7,{complex:true}]}}}}};expect(Ext.JSON.decode(Ext.JSON.encode(B))).toEqual(B)});describe("aliases",function(){it("should alias Ext.JSON.decode with Ext.decode",function(){expect(Ext.decode).toBe(Ext.JSON.decode)});it("should alias Ext.JSON.encode with Ext.encode",function(){expect(Ext.encode).toBe(Ext.JSON.encode)})})})