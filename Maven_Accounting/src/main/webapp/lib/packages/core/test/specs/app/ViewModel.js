describe("Ext.app.ViewModel",function(){var N,G,J,L;function I(R,T,S){var U=N.bind(R,T||L,S);U.deep=true;N.notify();return U}function F(R,T,S){var U=N.bind(R,T||L,S);N.notify();return U}function K(R,S){N.set(R,S);N.notify()}function Q(){N.notify()}function H(){for(var S=0,R=arguments.length;S<R;++S){arguments[S].reset()}}function E(S,R){if(arguments.length===1){P(L.mostRecentCall,S)}else{P(L.mostRecentCall,S,R)}}function P(U,T,R){var S=U.args;expect(S[0]).toBe(T);if(arguments.length>2){expect(S[1]).toBe(R)}}function A(R,T,S){S=Ext.apply({id:T},S);return new R(S,J)}function O(){J=new Ext.data.Session({scheduler:{tickDelay:9999}})}function C(S,R){if(S&&!J){O()}N=new Ext.app.ViewModel(Ext.apply({id:"rootVM",session:J},R));G=N.getScheduler()}function B(R){Ext.Ajax.mockComplete({status:200,responseText:Ext.encode(R)})}function M(R){B(R);Q()}beforeEach(function(){Ext.data.Store.prototype.config.asynchronousLoad=false;Ext.data.Model.schema.setNamespace("spec");MockAjaxManager.addMethods();L=jasmine.createSpy()});afterEach(function(){Ext.data.Store.prototype.config.asynchronousLoad=undefined;Ext.destroy(N);Ext.destroy(J);J=G=L=N=null;MockAjaxManager.removeMethods();Ext.data.Model.schema.clear(true)});describe("getting/setting values",function(){beforeEach(function(){C()});describe("set",function(){it("should set a root value if the param is an object",function(){N.set({foo:{bar:1},baz:2});expect(N.getData().foo.bar).toBe(1);expect(N.getData().baz).toBe(2)});it("should set an object at a path",function(){N.set("foo.bar",{baz:1});expect(N.getData().foo.bar.baz).toBe(1)});it("should set a path + primitive",function(){N.set("foo.bar",100);expect(N.getData().foo.bar).toBe(100)});it("should be able to set object instances and not descend into them",function(){var R=Ext.define(null,{foo:1});var S=new R();N.set("obj",S);expect(N.getData().obj).toBe(S)})});describe("get",function(){it("should be able to retrieve a value at the root",function(){N.set("foo",1);expect(N.get("foo")).toBe(1)});it("should descend into a path",function(){N.set({foo:{bar:{baz:100}}});expect(N.get("foo.bar.baz")).toBe(100)});it("should return null if the value has not presented",function(){expect(N.get("something")).toBeNull()})})});describe("bind/set for non records/stores",function(){beforeEach(function(){C()});function R(S){function T(V,U){if(S){V();U()}else{U();V()}}describe(S?"bind before set":"set before bind",function(){describe("setting simple value types",function(){it("should set a number",function(){T(function(){F("{age}",L)},function(){K("age",3)});E(3,undefined)});it("should set a string",function(){T(function(){F("{name}",L)},function(){K("name","Kenneth")});E("Kenneth",undefined)});it("should set a bool",function(){T(function(){F("{active}",L)},function(){K("active",true)});E(true,undefined)});it("should set an array",function(){var U=[18,22,13];T(function(){F("{scores}",L)},function(){K("scores",U)});E(U,undefined)});it("should set a date",function(){var U=new Date(1980,0,1);T(function(){F("{dob}",L)},function(){K("dob",U)});E(U,undefined)});it("should set an object instance",function(){var U=new Ext.util.HashMap();T(function(){F("{myMap}",L)},function(){K("myMap",U)});E(U,undefined)})});describe("using bind options",function(){it("should set a value using bindTo",function(){T(function(){F({bindTo:"{age}"},L)},function(){K("age",3);K("age",5)});if(S){P(L.calls[0],3,undefined);P(L.calls[1],5,3)}else{E(5,undefined)}});it("should set the value once when using single: true",function(){T(function(){F({bindTo:"{age}",single:true},L)},function(){K("age",3);K("age",5)});expect(L.callCount).toBe(1);if(S){E(3,undefined)}else{E(5,undefined)}});it("should bind deep",function(){T(function(){F({bindTo:"{foo}",deep:true},L)},function(){K({foo:{bar:1}});K("foo.bar",2)});if(S){expect(L.callCount).toBe(2)}else{expect(L.mostRecentCall.args[0]).toEqual({bar:2})}})});describe("setting objects",function(){it("should set to the root if there's no name",function(){T(function(){F("{name}",L)},function(){K("",{name:"Bar"})});E("Bar",undefined)});it("should be able to set simple nested properties",function(){T(function(){F("{user.name}",L)},function(){K("user",{name:"Foo"})});E("Foo",undefined)});it("should set deeply nested properties",function(){T(function(){F("{a.b.c.d.e.f.g}",L)},function(){K("a",{b:{c:{d:{e:{f:{g:"val"}}}}}})});E("val",undefined)});it("should be able to set mixes of values/objects",function(){var U=jasmine.createSpy();T(function(){N.bind("{user.name}",L);N.bind("{user.address.city}",U);Q()},function(){K("user",{name:"Foo",address:{city:"Paris"}})});E("Foo",undefined);P(U.mostRecentCall,"Paris")})});describe("callback settings",function(){it("should pass the old and new value",function(){T(function(){F("{name}",L)},function(){K("name","Foo");K("name","Bar")});if(S){P(L.calls[0],"Foo",undefined);P(L.calls[1],"Bar","Foo")}else{E("Bar",undefined)}});it("should default the scope to the session",function(){T(function(){F("{name}",L)},function(){K("name","X")});expect(L.mostRecentCall.object).toBe(N)});it("should use the passed scope",function(){var U={};T(function(){F("{name}",L,U)},function(){K("name","X")});expect(L.mostRecentCall.object).toBe(U)})});describe("timing of callbacks",function(){it("should not trigger the callback if the value doesn't change",function(){T(function(){F("{name}",L)},function(){K("name","Foo")});L.reset();K("name","Foo");expect(L).not.toHaveBeenCalled()});it("should not trigger any parent nodes if the leaf value doesn't change",function(){var U=jasmine.createSpy();T(function(){N.bind("{foo}",L);N.bind("{foo.bar}",U)},function(){N.set("foo.bar.baz.x","Foo")});Q();H(L,U);K("foo.bar.baz.x","Foo");expect(L).not.toHaveBeenCalled();expect(U).not.toHaveBeenCalled()});it("should be able to bind twice to the same stub",function(){var U=jasmine.createSpy();T(function(){F("{name}",L);F("{name}",U)},function(){K("name","A")});P(L.mostRecentCall,"A",undefined);P(U.mostRecentCall,"A",undefined)});it("should trigger a new binding when there is a set pending",function(){var U=jasmine.createSpy();T(function(){F("{name}",L)},function(){N.set("name","A")});F("{name}",U);expect(U).toHaveBeenCalled()});it("should only fire a single callback inside the timer resolution",function(){T(function(){F("{name}",L)},function(){N.set("name","A");N.set("name","B");N.set("name","C");N.set("name","D");Q()});expect(L.callCount).toBe(1);E("D",undefined)});it("should only pass the last value since the last fired change",function(){T(function(){F("{name}",L)},function(){K("name","A")});N.set("name","B");N.set("name","C");N.set("name","D");N.set("name","E");Q();E("E","A")});if(S){it("should not trigger the binding initially if a value is not set",function(){F("{name}",L);expect(L).not.toHaveBeenCalled()});it("should suspend the initial binding if the value is set within the tick window",function(){N.bind("{name}",L);K("name","Foo");E("Foo",undefined)})}else{it("should trigger the binding initially if a value exists",function(){N.set("name","Foo");F("{name}",L);expect(L).toHaveBeenCalled();E("Foo",undefined)})}});describe("binding on nested values",function(){it("should trigger a new long chain binding",function(){T(function(){F("{user.address.city}",L)},function(){K("user.address.city","Sydney")});E("Sydney",undefined)});it("should trigger a deep parent binding when a child changes",function(){var V=jasmine.createSpy(),U=jasmine.createSpy();T(function(){F("{user.address.city}",V);I("{user.address}",U)},function(){K("user.address.city","Berlin")});P(V.mostRecentCall,"Berlin",undefined);expect(U.mostRecentCall.args[0]).toEqual({city:"Berlin"})});it("should trigger all deep parent bindings when a child changes",function(){var W=jasmine.createSpy(),U=jasmine.createSpy(),V=jasmine.createSpy();T(function(){F("{user.address.city}",W);I("{user.address}",U);I("{user}",V)},function(){K("user.address.city","Jakarta")});expect(W).toHaveBeenCalled();expect(U).toHaveBeenCalled();expect(V).toHaveBeenCalled()});it("should trigger parent bindings even if a node in the hierarchy is skipped",function(){var V=jasmine.createSpy(),U=jasmine.createSpy();T(function(){F("{user.address.city}",V);I("{user}",U)},function(){K("user.address.city","London")});expect(V).toHaveBeenCalled();expect(U).toHaveBeenCalled()});it("should only trigger the parent binding once if several direct children change",function(){T(function(){I("{user.address}",L)},function(){N.set("user.address.street","1 Foo St");N.set("user.address.city","Moscow");N.set("user.address.zip",12345);N.set("user.address.country","Russia");Q()});expect(L.callCount).toBe(1)});it("should only trigger the parent once even if several indirect children change",function(){T(function(){I("{user}",L)},function(){N.set("user.homeAddress.street","Foo");N.set("user.homeAddress.city","Florida");N.set("user.postalAddress.street","Bar");N.set("user.postalAddress.city","Baltimore");Q()});expect(L.callCount).toBe(1)});describe("modifying hierarchies",function(){function U(V){return{foo:{bar:{baz:{xxx:V}}}}}it("should trigger changes on the children when hierarchy is overwritten with a primitive",function(){var V=jasmine.createSpy(),X=jasmine.createSpy(),W=jasmine.createSpy();T(function(){N.bind("{foo.bar.baz.xxx}",V);N.bind("{foo.bar.baz}",X);N.bind("{foo.bar}",W);Q()},function(){K("foo.bar.baz.xxx",1)});H(V,X,W);K("foo",1);expect(V).toHaveBeenCalled();expect(X).toHaveBeenCalled();expect(W).toHaveBeenCalled()});it("should trigger changes on the children when hierarchy is overwritten with null",function(){T(function(){N.bind("{foo.bar}",L);Q()},function(){N.set({foo:{bar:1}});Q()});L.reset();K("foo",null);E(null,1)});it("should set the child value correctly when changing a hierarchy in a single tick",function(){T(function(){N.bind("{foo.bar.baz.xxx}",L)},function(){N.set(U(123));N.set(U(456));N.set(U(789))});Q();expect(L.callCount).toBe(1);E(789)});it("should set the child value correctly when changing a hierarchy over multiple ticks",function(){T(function(){N.bind("{foo.bar.baz.xxx}",L)},function(){N.set(U(123))});Q();E(123);N.set(U(456));Q();E(456);N.set(U(789));Q();E(789)});it("should set the child value correctly when overwriting a hierarchy in a single tick",function(){T(function(){N.bind("{foo.bar.baz.xxx}",L)},function(){N.set(U(123));N.set(U(456));N.set({foo:null})});Q();expect(L.callCount).toBe(1);E(null,undefined)});it("should set the child value correctly when overwriting a hierarchy over multiple ticks",function(){T(function(){N.bind("{foo.bar.baz.xxx}",L)},function(){N.set(U(123))});Q();E(123);N.set(U(456));Q();E(456);N.set({foo:null});Q();E(null)});it("should be able to expand a primitive into a hierarchy",function(){var V=jasmine.createSpy(),X=jasmine.createSpy(),W=jasmine.createSpy();T(function(){N.bind("{foo.bar.baz.xxx}",V,null,{deep:true});N.bind("{foo.bar.baz}",X,null,{deep:true});N.bind("{foo.bar}",W,null,{deep:true})},function(){N.set("foo",1)});Q();H(V,X,W);K("foo.bar.baz.xxx",1);expect(V).toHaveBeenCalled();expect(X).toHaveBeenCalled();expect(W).toHaveBeenCalled()});it("should be able to expand an existing object path",function(){T(function(){F("{foo.bar.baz.xxx}",L)},function(){N.set({foo:null})});Q();K("foo.bar.baz.xxx",1);expect(L.callCount).toBe(1);E(1,undefined)});if(S){it("should set the child value correctly when expanding a hierarchy in a single tick",function(){N.bind("{foo.bar.baz.xxx}",L);Q();N.set({foo:null});N.set({foo:{bar:null}});N.set({foo:{bar:{baz:null}}});N.set({foo:{bar:{baz:{xxx:100}}}});Q();expect(L.callCount).toBe(1);E(100)});it("should set the child value correctly when expanding a hierarchy over multiple ticks",function(){N.bind("{foo.bar.baz.xxx}",L);Q();N.set({foo:null});Q();expect(L).not.toHaveBeenCalled();N.set({foo:{bar:null}});Q();expect(L).not.toHaveBeenCalled();N.set({foo:{bar:{baz:null}}});Q();expect(L).not.toHaveBeenCalled();N.set({foo:{bar:{baz:{xxx:100}}}});Q();E(100);N.set({foo:null});Q();E(null)})}})})})}R(false);R(true);describe("firing order",function(){it("should fire children before parents",function(){var S=[];N.bind("{address}",function(T){S.push("address: "+Ext.encode(T))}).deep=true;N.bind("{address.city}",function(T){S.push("address.city: "+T)});Q();expect(S).toEqual([]);N.set("address.city","Melbourne");Q();expect(S[0]).toBe("address.city: Melbourne");expect(S[1]).toBe('address: {"city":"Melbourne"}')});it("should fire a single binding at the depth of it's stub",function(){K("foo.bar.baz.x",1);var T=[],S=function(U){T.push(U)};N.bind("{foo.bar.baz.x}",S);N.bind("{foo.bar.y}",S);N.set("foo.bar.y",3);N.set("foo.bar.baz.x",2);Q();expect(T[0]).toBe(2);expect(T[1]).toBe(3)});it("should fire complex hierarchies in depth order",function(){var V={key1:{key11:{key111:{key1111:"a",key1112:"b"},key112:"c"},key12:{key121:"d",key122:"e"}},key2:{key21:{key211:"f"},key22:{key221:{key2211:{key22111:"g"}},key222:{key2221:"h"}},key23:{key231:"i"}},key3:{key31:"j",key32:{key321:"k"},key33:{key331:{key3311:"l"},key332:"m"}},key4:{key41:"n"},key5:"o",key6:{key61:{key611:{key6111:{key61111:{key611111:{key6111111:"p"},key611112:"q"}}},key612:{key6121:{key61211:{key61211:"r"}}},key613:{key6131:{key61311:{key613111:{key6131111:"s"}}}}}}};var S={};var Y=[];var T=[];var W=[];function a(e,c,f){var d={id:Y.length+1,path:f,parent:c,value:e};Y.push(S[f]=d);if(f){N.bind("{"+f+"}",function(g){T.push(d);W.push(g);for(var h=c;h;h=h.parent){expect(Ext.Array.contains(T,h)).toBe(false)}})}if(e&&e.constructor===Object){var b=f?f+".":"";Ext.Object.each(e,function(h,g){a(g,d,b+h)})}return d}var Z=a(V,null,""),X,U;Q();for(U=0;U<W.length;++U){X=T[U].path+"=";expect(X+W[U]).toEqual(X+"null")}T.length=W.length=0;K("",V);Q();for(U=0;U<W.length;++U){expect(W[U]).toBe(T[U].value)}})})});describe("parsing formulas",function(){var S;function R(U){var V=S.getStub(U);return V.formula}function T(U){var W=R(U),V=Ext.apply({},W.get.$expressions);delete V.$literal;return Ext.Object.getKeys(V)}beforeEach(function(){C()});afterEach(function(){S.destroy();S=null});describe("simple formulas",function(){it("should recognize property access",function(){S=new Ext.app.ViewModel({formulas:{foo:function(V){return V("x.y")+V("z")}}});var U=T("foo");expect(U).toEqual(["x.y","z"])});it("should ignore method calls",function(){S=new Ext.app.ViewModel({formulas:{foo:function(V){return V("x.y").substring(1)+V("z").toLowerCase()}}});var U=T("foo");expect(U).toEqual(["x.y","z"])});it("should recognize data as method parameters",function(){S=new Ext.app.ViewModel({formulas:{foo:function(V){return this.foo(V("x")+V("y.z"))}}});var U=T("foo");expect(U).toEqual(["x","y.z"])});it("should ignore data used in suffix expression",function(){S=new Ext.app.ViewModel({formulas:{foo:function(V){return this.get.foo(V("x")+V("y.z"))}}});var U=T("foo");expect(U).toEqual(["x","y.z"])})});describe("formula config objects",function(){it("should recognize property access",function(){S=new Ext.app.ViewModel({formulas:{foo:{get:function(V){return V("x.y")+V("z")}}}});var U=T("foo");expect(U).toEqual(["x.y","z"])});it("should ignore method calls",function(){S=new Ext.app.ViewModel({formulas:{foo:{get:function(V){return V("x.y").substring(1)+V("z").toLowerCase()}}}});var U=T("foo");expect(U).toEqual(["x.y","z"])});it("should allow for bind options",function(){S=new Ext.app.ViewModel({data:{x:"XYZ"},formulas:{foo:{bind:{bindTo:"{x}",single:true},get:function(W){return W}}}});var U=T("foo");expect(U).toEqual([]);G=S.getScheduler();S.notify();expect(G.passes).toBe(1);var V=S.getData();expect(V.foo).toBe("XYZ");S.set("x","ABC");S.notify();expect(G.passes).toBe(2);expect(V.foo).toBe("XYZ")});it("should promote single:true to bind options",function(){S=new Ext.app.ViewModel({data:{x:"XYZ"},formulas:{foo:{bind:"{x}",single:true,get:function(W){return W}}}});var U=T("foo");expect(U).toEqual([]);G=S.getScheduler();S.notify();expect(G.passes).toBe(1);var V=S.getData();expect(V.foo).toBe("XYZ");S.set("x","ABC");S.notify();expect(G.passes).toBe(2);expect(V.foo).toBe("XYZ")})})});function D(R){describe(R?"with session":"without a session",function(){beforeEach(function(){C(R)});describe("records",function(){var U,S;beforeEach(function(){U=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name","age","group",{name:"addressId",reference:"Address",unique:true}]})});afterEach(function(){U=S=null;Ext.undefine("spec.User")});function T(W,V){S=A(U,W,V)}describe("local modifications",function(){it("should publish when setting a record instance",function(){T(1);F("{user}",L);K("user",S);E(S)});it("should publish when binding to a record field",function(){T(1,{name:"Foo"});F("{user.name}",L);K("user",S);E("Foo")});it("should publish even if the field value is undefined",function(){T(1);F("{user.name}",L);K("user",S);E(undefined)});it("should not publish an undefined value if it's a known association key",function(){Ext.define("spec.Post",{extend:"Ext.data.Model",fields:["content",{name:"userId",reference:"User"}]});var V=new spec.Post({id:1});F("{post.user}",L);K("post",V);expect(L).not.toHaveBeenCalled();Ext.undefine("spec.Post")});it("should react to a change on the field",function(){T(1,{name:"Foo"});F("{user.name}",L);K("user",S);S.set("name","Bar");Q();E("Bar","Foo")});it("should react to multiple field changes",function(){T(1);F("{user.name}",L);F("{user.age}",L);F("{user.group}",L);K("user",S);L.reset();S.set({name:"Foo",age:100,group:"Coders"});Q();expect(L.callCount).toBe(3)});it("should not react if the value changes then is reverted to the original value",function(){T(1,{name:"Foo"});F("{user.name}",L);K("user",S);L.reset();S.set("name","Bar");S.set("name","Foo");Q();expect(L).not.toHaveBeenCalled()});it("should react if the value changes, notifies, then is reverted to the original value",function(){T(1,{name:"Foo"});F("{user.name}",L);K("user",S);L.reset();S.set("name","Bar");Q();E("Bar","Foo");S.set("name","Foo");Q();E("Foo","Bar")});it("should react to changes via reject",function(){T(1,{name:"Foo"});F("{user.name}",L);K("user",S);S.set("name","Bar");Q();L.reset();S.reject();Q();E("Foo","Bar")});it("should react to changes via commit",function(){T(1,{name:"Foo"});F("{user.name}",L);K("user",S);L.reset();S.set("name","Bar",{silent:true});Q();expect(L).not.toHaveBeenCalled();S.commit();Q();E("Bar","Foo")});it("should publish when setting a new model",function(){T(1);F("{user}",L);K("user",S);var V=new U({id:2});K("user",V);E(V,S)});it("should publish a child field when changing the model",function(){T(1,{name:"Foo"});F("{user.name}",L);K("user",S);var V=new U({id:2,name:"Bar"});K("user",V);E("Bar","Foo")});it("should not publish when setting a new model but the field value remains",function(){T(1,{name:"Foo"});F("{user.name}",L);K("user",S);var V=new U({id:2,name:"Foo"});L.reset();K("user",V);expect(L).not.toHaveBeenCalled()});it("should attach if a record is set as part of a hierarchy",function(){T(1,{name:"Foo"});F("{foo.bar.baz.user.name}",L);K({foo:{bar:{baz:{user:S}}}});L.reset();S.set("name","Bar");Q();expect(L).toHaveBeenCalled()});it("should publish a field when the model is cleared",function(){T(1,{name:"Foo"});F("{user.name}",L);K("user",S);L.reset();K("user",null);E(null,"Foo")})});describe("remote loading",function(){it("should not react when bound and loading",function(){T(1);F("{user}",L);S.load();K("user",S);expect(L).not.toHaveBeenCalled()});it("should react once loading has completed",function(){T(1);F("{user}",L);S.load();K("user",S);M({});expect(L).toHaveBeenCalled()});it("should not publish a field while loading",function(){T(1);F("{user.name}",L);S.load();K("user",S);expect(L).not.toHaveBeenCalled()})});describe("values via binding",function(){it("should be able to change fields via binding",function(){T(1,{name:"Foo"});var V=N.bind("{user.name}",L);K("user",S);L.reset();V.setValue("Bar");Q();E("Bar","Foo")});it("should fail to set values on readonly bindings",function(){var V=N.bind("Hello {user.name}",L);expect(function(){V.setValue("Bar")}).toThrow()});describe("associations",function(){var V,W;beforeEach(function(){V=Ext.define("spec.Comment",{extend:"Ext.data.Model",fields:["id","text",{name:"userId",reference:"User"}]});W=Ext.define("spec.Address",{extend:"Ext.data.Model",fields:["id","street"]})});afterEach(function(){Ext.undefine("spec.Comment");Ext.undefine("spec.Address");W=V=null});it("should be able to set association keys",function(){var Y=A(V,101,{userId:1});var X=N.bind("{comment.user}",L);K("comment",Y);L.reset();X.setValue(3);Q();expect(Y.get("userId")).toBe(3);expect(L).not.toHaveBeenCalled()});it("should be able to set association record",function(){var Y=A(V,101,{userId:1});T(3);var X=N.bind("{comment.user}",L);K("comment",Y);L.reset();X.setValue(S);Q();expect(Y.get("userId")).toBe(3);expect(L).toHaveBeenCalled();E(S)});it("should be able to set an association field",function(){var Z=A(V,101,{userId:1});T(3);Z.setUser(S);var Y=N.bind("{comment.user.name}",L);K("comment",Z);L.reset();Y.setValue("aNewName");Q();expect(S.get("name")).toBe("aNewName");Y.destroy();L.reset();var X=A(W,201);S.setAddress(X);Y=N.bind("{comment.user.address.street}",L);L.reset();Y.setValue("newStreet");Q();expect(X.get("street")).toBe("newStreet")})})})});describe("stores",function(){var S;beforeEach(function(){S=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name","age","group"]});Ext.define("spec.Comment",{extend:"Ext.data.Model",fields:["id","text",{name:"userId",reference:"User"}]})});afterEach(function(){S=null;Ext.undefine("spec.User");Ext.undefine("spec.Comment")});describe("publishing",function(){var T;beforeEach(function(){T=new Ext.data.Store({model:S,proxy:{type:"ajax",url:"foo"}})});afterEach(function(){T.destroy();T=null});it("should publish when setting the value",function(){F("{store}",L);K("store",T);E(T,undefined)});it("should not publish if loading when attached",function(){F("{store}",L);T.load();K("store",T);expect(L).not.toHaveBeenCalled()});it("should not publish if the store is loading during a notify",function(){F("{store}",L);N.set("store",T);T.load();Q();expect(L).not.toHaveBeenCalled()});it("should publish when the store completes the load",function(){F("{store}",L);T.load();K("store",T);M([]);E(T,undefined)})});describe("loading associated stores",function(){var T;beforeEach(function(){T=new S({id:1},J)});afterEach(function(){T=null});it("should create/load the store if it's never been loaded",function(){var U=spyOn(Ext.data.ProxyStore.prototype,"load").andCallThrough();F("{user.comments}",Ext.emptyFn);K("user",T);expect(U).toHaveBeenCalled();expect(U.mostRecentCall.object.getModel().$className).toBe("spec.Comment")});it("should not load if the store is loading",function(){var U=T.comments();U.load();spyOn(U,"load");F("{user.comments}",Ext.emptyFn);K("user",T);expect(U.load).not.toHaveBeenCalled();B([])});it("should not load if the store has been loaded",function(){var U=T.comments();U.load();B([]);spyOn(U,"load");F("{user.comments}",Ext.emptyFn);K("user",T);expect(U.load).not.toHaveBeenCalled()});it("should not load if the record is a phantom",function(){var U=spyOn(Ext.data.ProxyStore.prototype,"load").andCallThrough();T=new S({},J);F("{user.comments}",Ext.emptyFn);K("user",T);expect(U).not.toHaveBeenCalled()});it("should not load if the data has been load via nested-loading",function(){var U=new Ext.data.Store({model:"spec.User"});U.loadRawData([{id:100,comments:[{id:1,userId:100,text:"Foo"},{id:2,userId:100,text:"Bar"}]}]);T=U.first();var V=T.comments();spyOn(V,"load");F("{user.comments}",Ext.emptyFn);K("user",T);expect(V.load).not.toHaveBeenCalled();U.destroy()});if(R){it("should load if the store has been filled with data from session but not loaded",function(){J.createRecord("Comment",{id:1,userId:1,text:"Foo"});var U=T.comments();expect(U.getCount()).toBe(1);spyOn(U,"load");F("{user.comments}",Ext.emptyFn);K("user",T);expect(U.load).toHaveBeenCalled()})}})});describe("associations",function(){describe("many to one",function(){var T,U,V,Y,S;beforeEach(function(){Y=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name",{name:"organizationId",reference:"Organization"}]});Ext.define("spec.Organization",{extend:"Ext.data.Model",fields:["id","name"]});S=Ext.define("spec.Post",{extend:"Ext.data.Model",fields:["id","content",{name:"userId",reference:"User"}]})});afterEach(function(){Ext.undefine("spec.User");Ext.undefine("spec.Post");Ext.undefine("spec.Organization");Y=S=T=U=V=null});function W(a,Z){T=A(Y,a,Z)}function X(a,Z){U=A(S,a,Z)}describe("the one",function(){it("should not make a request there is no FK value",function(){var Z=spyOn(Y.getProxy(),"read");X(1);F("{post.user}",L);K("post",U);expect(Z).not.toHaveBeenCalled()});it("should load from the server and not publish until the value is retrieved",function(){X(1,{userId:17});F("{post.user}",L);K("post",U);expect(L).not.toHaveBeenCalled();M({id:17});expect(L).toHaveBeenCalled()});it("should not publish if attached while loading and should publish when the load completes",function(){X(1,{userId:17});F("{post.user}",L);U.getUser();K("post",U);expect(L).not.toHaveBeenCalled();M({id:17});expect(L).toHaveBeenCalled()});it("should publish immediately if the record has already loaded via the API",function(){X(1,{userId:17});F("{post.user}",L);U.getUser();B({id:17});K("post",U);expect(L).toHaveBeenCalled()});it("should cascade the load if waiting on the one",function(){X(1);F("{post.user}",L);U.load();K("post",U);M({id:1,userId:17});expect(L).not.toHaveBeenCalled();M({id:17});expect(L).toHaveBeenCalled()});if(R){it("should use an existing record from the session and not trigger a load",function(){var Z=spyOn(Y.getProxy(),"read"),a=J.createRecord("User",{id:17});X(1,{userId:17});F("{post.user}",L);K("post",U);expect(Z).not.toHaveBeenCalled();expect(L).toHaveBeenCalled();E(a)});it("should create a record in the session if it does not exist and load it",function(){X(1,{userId:17});F("{post.user}",L);K("post",U);T=U.getUser();expect(T.isLoading()).toBe(true);expect(T).toBe(J.getRecord("User",17))})}else{it("should fire if the record instance is different",function(){X(1,{userId:17});F("{post.user}",L);K("post",U);M({id:17});expect(L).toHaveBeenCalled();L.reset();X(2,{userId:17});K("post",U);M({id:17});expect(L).toHaveBeenCalled()});it("should not fire if the underlying value is the same",function(){X(1,{userId:17});F("{post.user.name}",L);K("post",U);M({id:17,name:"Foo"});expect(L).toHaveBeenCalled();L.reset();X(2,{userId:100});K("post",U);M({id:100,name:"Foo"});expect(L).not.toHaveBeenCalled()})}it("should be able to load multiple levels",function(){X(1,{userId:17});F("{post.user.organization.name}",L);K("post",U);M({id:17,organizationId:34});expect(L).not.toHaveBeenCalled();M({id:34,name:"Org1"});E("Org1")})});describe("the many",function(){it("should create the store and load it if it doesn't exist",function(){W(1);F("{user.posts}",L);var Z=spyOn(S.getProxy(),"read");K("user",T);expect(Z).toHaveBeenCalled()});it("should not load the store if it's already been loaded",function(){W(1);F("{user.posts}",L);T.posts().load();B([]);var Z=spyOn(S.getProxy(),"read");K("user",T);expect(Z).not.toHaveBeenCalled()});it("should not load the store if the record is a phantom",function(){W();F("{user.posts}",L);var Z=spyOn(S.getProxy(),"read");K("user",T);expect(Z).not.toHaveBeenCalled()});it("should not trigger a load if the store is loading",function(){W(1);F("{user.posts}",L);T.posts().load();var Z=spyOn(S.getProxy(),"read");K("user",T);expect(Z).not.toHaveBeenCalled()});it("should not trigger a load if the store has data in it already",function(){W(1);T.posts().load();B([{id:2000}]);F("{user.posts}",L);var Z=spyOn(S.getProxy(),"read");K("user",T);expect(Z).not.toHaveBeenCalled()});it("should not publish if the attached store is loading, it should wait until the load completes",function(){W(1);F("{user.posts}",L);K("user",T);expect(L).not.toHaveBeenCalled();M([]);expect(L).toHaveBeenCalled()});it("should publish if the store has been loaded before",function(){W(1);F("{user.posts}",L);T.posts().load();B([]);K("user",T);expect(L).toHaveBeenCalled()});it("should publish if the store instance changes",function(){W(1);F("{user.posts}",L);K("user",T);M([]);L.reset();W(2);K("user",T);M([]);expect(L).toHaveBeenCalled()});if(R){it("should use existing records from the session",function(){var b=J.getRecord("Post",1),a=J.getRecord("Post",3);B({id:1,userId:1});B({id:3,userId:1});W(1);F("{user.posts}",L);T.posts().load();B([{id:1,userId:1},{id:2,userId:1},{id:3,userId:1}]);K("user",T);expect(L).toHaveBeenCalled();var Z=L.mostRecentCall.args[0];expect(Z.getAt(0)).toBe(b);expect(Z.getAt(2)).toBe(a)});it("should push any new records into the session",function(){var b=J.getRecord("Post",1),a=J.getRecord("Post",3);B({id:1,userId:1});B({id:3,userId:1});W(1);F("{user.posts}",L);T.posts().load();B([{id:1,userId:1},{id:2,userId:1},{id:3,userId:1}]);K("user",T);expect(L).toHaveBeenCalled();var Z=L.mostRecentCall.args[0];expect(Z.getAt(1)).toBe(J.getRecord("Post",2))})}})});describe("one to one",function(){var X,W,S,V;beforeEach(function(){X=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name",{name:"passportId",reference:"Passport",unique:true}]});W=Ext.define("spec.Passport",{extend:"Ext.data.Model",fields:["id","expires",{name:"addressId",reference:"Address",unique:true}]})});afterEach(function(){Ext.undefine("spec.User");Ext.undefine("spec.Passport");X=W=S=V=null});function U(Z,Y){S=A(X,Z,Y)}function T(Z,Y){V=A(W,Z,Y)}describe("the key holder",function(){it("should not make a request there is no FK value",function(){var Y=spyOn(W.getProxy(),"read");U(1);F("{user.passport}",L);K("user",S);expect(Y).not.toHaveBeenCalled()});it("should load from the server and not publish until the value is retrieved",function(){U(1,{passportId:17});F("{user.passport}",L);K("user",S);expect(L).not.toHaveBeenCalled();M({id:17});expect(L).toHaveBeenCalled()});it("should not publish if attached while loading and should publish when the load completes",function(){U(1,{passportId:17});F("{user.passport}",L);S.getPassport();K("user",S);expect(L).not.toHaveBeenCalled();M({id:17});expect(L).toHaveBeenCalled()});it("should publish immediately if the record has already loaded via the API",function(){U(1,{passportId:17});F("{user.passport}",L);S.getPassport();B({id:17});K("user",S);expect(L).toHaveBeenCalled()});it("should cascade the load if waiting on the one",function(){U(1);F("{user.passport}",L);S.load();K("user",S);M({id:1,passportId:17});expect(L).not.toHaveBeenCalled();M({id:17});expect(L).toHaveBeenCalled()});if(R){it("should use an existing record from the session and not trigger a load",function(){var Y=spyOn(W.getProxy(),"read"),Z=J.createRecord("Passport",{id:17});U(1,{passportId:17});F("{user.passport}",L);K("user",S);expect(Y).not.toHaveBeenCalled();expect(L).toHaveBeenCalled();E(Z)});it("should create a record in the session if it does not exist and load it",function(){U(1,{passportId:17});F("{user.passport}",L);K("user",S);V=S.getPassport();expect(V.isLoading()).toBe(true);expect(V).toBe(J.getRecord("Passport",17))})}else{it("should fire if the record instance is different",function(){U(1,{passportId:17});F("{user.passport}",L);K("user",S);M({id:17});expect(L).toHaveBeenCalled();L.reset();U(2,{passportId:17});K("user",S);M({id:17});expect(L).toHaveBeenCalled()});it("should not fire if the underlying value is the same",function(){U(1,{passportId:17});F("{user.passport.expiry}",L);K("user",S);M({id:17,expiry:"2000-01-01"});expect(L).toHaveBeenCalled();L.reset();U(2,{passportId:100});K("user",S);M({id:100,expiry:"2000-01-01"});expect(L).not.toHaveBeenCalled()})}it("should be able to load multiple levels",function(){Ext.define("spec.Address",{extend:"Ext.data.Model",fields:["id","city"]});U(1,{passportId:17});F("{user.passport.address.city}",L);K("user",S);M({id:17,addressId:34});expect(L).not.toHaveBeenCalled();M({id:34,city:"Sydney"});E("Sydney");Ext.undefine("spec.Address")})});describe("the non-key holder",function(){it("should not publish unless there is an instance set",function(){T(1);F("{passport.user}",L);K("passport",V);expect(L).not.toHaveBeenCalled()});it("should publish if an instance is already set",function(){T(13);U(1,{passportId:13});V.setUser(S);F("{passport.user}",L);K("passport",V);expect(L).toHaveBeenCalled()})})});describe("many to many",function(){var X,T,S,W;beforeEach(function(){X=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"],manyToMany:"Group"});T=Ext.define("spec.Group",{extend:"Ext.data.Model",fields:["id","name"]})});afterEach(function(){Ext.undefine("spec.User");Ext.undefine("spec.Group");X=T=S=W=null});function V(Z,Y){S=A(X,Z,Y)}function U(Z,Y){W=A(T,Z,Y)}describe("the left",function(){it("should create the store and load it if it doesn't exist",function(){V(1);F("{user.groups}",L);var Y=spyOn(T.getProxy(),"read");K("user",S);expect(Y).toHaveBeenCalled()});it("should not load the store if the record is a phantom",function(){V();F("{user.groups}",L);var Y=spyOn(T.getProxy(),"read");K("user",S);expect(Y).not.toHaveBeenCalled()});it("should not load the store if it's already been loaded",function(){V(1);F("{user.groups}",L);S.groups().load();B([]);var Y=spyOn(T.getProxy(),"read");K("user",S);expect(Y).not.toHaveBeenCalled()});it("should not trigger a load if the store is loading",function(){V(1);F("{user.groups}",L);S.groups().load();var Y=spyOn(T.getProxy(),"read");K("user",S);expect(Y).not.toHaveBeenCalled()});it("should not trigger a load if the store has data in it already",function(){V(1);S.groups().load();B([{id:3000}]);F("{user.groups}",L);var Y=spyOn(T.getProxy(),"read");K("user",S);expect(Y).not.toHaveBeenCalled()});it("should not publish if the attached store is loading, it should wait until the load completes",function(){V(1);F("{user.groups}",L);K("user",S);expect(L).not.toHaveBeenCalled();M([]);expect(L).toHaveBeenCalled()});it("should publish if the store has been loaded before",function(){V(1);F("{user.groups}",L);S.groups().load();B([]);K("user",S);expect(L).toHaveBeenCalled()});it("should publish if the store instance changes",function(){V(1);F("{user.groups}",L);K("user",S);M([]);L.reset();V(2);K("user",S);M([]);expect(L).toHaveBeenCalled()});if(R){it("should use existing records from the session",function(){var Y=J.getRecord("Group",1,false),a=J.getRecord("Group",3,false);V(1);F("{user.groups}",L);S.groups().load();B([{id:1},{id:2},{id:3}]);K("user",S);expect(L).toHaveBeenCalled();var Z=L.mostRecentCall.args[0];expect(Z.getAt(0)).toBe(Y);expect(Z.getAt(2)).toBe(a)});it("should push any new records into the session",function(){var Y=J.getRecord("Group",1,false),a=J.getRecord("Group",3,false);V(1);F("{user.groups}",L);S.groups().load();B([{id:1},{id:2},{id:3}]);K("user",S);expect(L).toHaveBeenCalled();var Z=L.mostRecentCall.args[0];expect(Z.getAt(1)).toBe(J.getRecord("Group",2))})}});describe("the right",function(){it("should create the store and load it if it doesn't exist",function(){U(1);F("{group.users}",L);var Y=spyOn(X.getProxy(),"read");K("group",W);expect(Y).toHaveBeenCalled()});it("should not load the store if the record is a phantom",function(){U();F("{group.users}",L);var Y=spyOn(X.getProxy(),"read");K("group",W);expect(Y).not.toHaveBeenCalled()});it("should not load the store if it's already been loaded",function(){U(1);F("{group.users}",L);W.users().load();B([]);var Y=spyOn(X.getProxy(),"read");K("group",W);expect(Y).not.toHaveBeenCalled()});it("should not trigger a load if the store is loading",function(){U(1);F("{group.users}",L);W.users().load();var Y=spyOn(X.getProxy(),"read");K("group",W);expect(Y).not.toHaveBeenCalled()});it("should not trigger a load if the store has data in it already",function(){U(1);W.users().load();B([{id:1234}]);F("{group.users}",L);var Y=spyOn(X.getProxy(),"read");K("group",W);expect(Y).not.toHaveBeenCalled()});it("should not publish if the attached store is loading, it should wait until the load completes",function(){U(1);F("{group.users}",L);K("group",W);expect(L).not.toHaveBeenCalled();M([]);expect(L).toHaveBeenCalled()});it("should publish if the store has been loaded before",function(){U(1);F("{group.users}",L);W.users().load();B([]);K("group",W);expect(L).toHaveBeenCalled()});it("should publish if the store instance changes",function(){U(1);F("{group.users}",L);K("group",W);M([]);L.reset();U(2);K("group",W);M([]);expect(L).toHaveBeenCalled()});if(R){it("should use existing records from the session",function(){var a=J.getRecord("User",1,false),Z=J.getRecord("User",3,false);U(1);F("{group.users}",L);W.users().load();B([{id:1},{id:2},{id:3}]);K("group",W);expect(L).toHaveBeenCalled();var Y=L.mostRecentCall.args[0];expect(Y.getAt(0)).toBe(a);expect(Y.getAt(2)).toBe(Z)});it("should push any new records into the session",function(){var a=J.getRecord("User",1,false),Z=J.getRecord("User",3,false);U(1);F("{group.users}",L);W.users().load();B([{id:1},{id:2},{id:3}]);K("group",W);expect(L).toHaveBeenCalled();var Y=L.mostRecentCall.args[0];expect(Y.getAt(1)).toBe(J.getRecord("User",2))})}})})})})}D(false);D(true);describe("nesting viewmodels",function(){var U,V,R,S;function T(X,W){Ext.Ajax.mockComplete({status:200,responseText:Ext.encode(Ext.apply({id:X,name:"Name1",age:20,description:"Desc1"},W))})}beforeEach(function(){V=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name","age","description"]});C(true);R=new Ext.app.ViewModel({id:"subVM",parent:N});S=new Ext.app.ViewModel({id:"grandSubVM",parent:R})});afterEach(function(){S.destroy();R.destroy();Ext.undefine("spec.User");S=R=V=U=null});it("should inherit data from parent view models",function(){var X=0,W=0;R.bind("{foo.bar}",function(Y){X=Y;++W});N.set("foo",{bar:42});Q();expect(W).toBe(1);expect(X).toBe(42)});it("should inherit data from grandparent view models",function(){var X=0,W=0;S.bind("{foo.bar}",function(Y){X=Y;++W});N.set("foo",{bar:42});Q();expect(W).toBe(1);expect(X).toBe(42)});it("should maintain indirection with multiple view models",function(){var a=0,W=0,b=0,Z=0,Y=0,X=0;N.bind("{foo.bar}",function(c){a=c;++Z});R.bind("{foo.bar}",function(c){W=c;++Y});S.bind("{foo.bar}",function(c){b=c;++X});N.set("foo",{bar:42});Q();expect(G.passes).toBe(1);expect(Z).toBe(1);expect(a).toBe(42);expect(Y).toBe(1);expect(W).toBe(42);expect(X).toBe(1);expect(b).toBe(42);R.set("foo",{bar:427});Q();expect(G.passes).toBe(2);expect(Z).toBe(1);expect(a).toBe(42);expect(Y).toBe(2);expect(W).toBe(427);expect(X).toBe(2);expect(b).toBe(427);R.set("foo",undefined);Q();expect(G.passes).toBe(3);expect(Z).toBe(1);expect(a).toBe(42);expect(Y).toBe(3);expect(W).toBe(42);expect(X).toBe(3);expect(b).toBe(42)});it("should modify parent VM instances",function(){var a=0,W=0,b=0,Z=0,Y=0,X=0;N.bind("{foo.bar}",function(c){a=c;++Z});R.bind("{foo.bar}",function(c){W=c;++Y});S.bind("{foo.bar}",function(c){b=c;++X});N.set("foo",{bar:42});Q();expect(G.passes).toBe(1);expect(Z).toBe(1);expect(a).toBe(42);expect(Y).toBe(1);expect(W).toBe(42);expect(X).toBe(1);expect(b).toBe(42);R.set("foo.bar",427);Q();expect(G.passes).toBe(2);expect(Z).toBe(2);expect(a).toBe(427);expect(Y).toBe(2);expect(W).toBe(427);expect(X).toBe(2);expect(b).toBe(427)});describe("overwriting values from parent to child",function(){it("should be able to modify a value when the binding is scheduled",function(){N.set("value",1);R.bind("{value}",L);R.set("value",2);N.notify();expect(L.callCount).toBe(1);E(2,undefined)});it("should be able to modify a value when the binding is unscheduled",function(){N.set("value",1);R.bind("{value}",L);N.notify();R.set("value",2);N.notify();expect(L.callCount).toBe(2);E(2,1)})});describe("with formulas",function(){var c=0,Y=0,b=0,W=0,X=0,a=0,Z;beforeEach(function(){N.set({firstName:"Don",lastName:"Griffin",abc:{v:"abc"},xyz:"xyz"});N.setFormulas({foo:function(d){return d("abc.v")+d("xyz")},fullName:{get:function(d){return d("firstName")+" "+d("lastName")},set:function(e){var d=e.split(" ");this.set({firstName:d[0],lastName:d[1]})}}});R.set({xyz:"XYZ"});R.setFormulas({bar:{get:function(d){return d("abc.v")+d("xyz")}},explicit:{get:function(d){return"("+d.foo.v+"/"+d.foo.x+")"},bind:{foo:{v:"{abc.v}",x:"{xyz}"}}}});S.set({abc:{v:"ABC"}});S.setFormulas({baz:function(d){return d("abc.v")+d("xyz")},welcome:function(d){return"Hello "+d("fullName")+"!"}});Z=N.bind("{foo}",function(d){c=d;++W});R.bind("{bar} - {foo}",function(d){Y=d;++X});S.bind("{baz} - {bar} - {foo} - {explicit}",function(d){b=d;++a});Q()});it("should bind formulas to values in ancestor viewmodels",function(){expect(G.passes).toBe(1);expect(c).toBe("abcxyz");expect(Y).toBe("abcXYZ - abcxyz");expect(b).toBe("ABCXYZ - abcXYZ - abcxyz - (abc/XYZ)")});it("should not allow setting the value of a formula",function(){expect(function(){Z.setValue(10)}).toThrow()});it("should update when values change in ancestor viewmodels",function(){N.set("abc.v","~abc~");N.set("xyz","~xyz~");Q();expect(G.passes).toBe(2);expect(c).toBe("~abc~~xyz~");expect(Y).toBe("~abc~XYZ - ~abc~~xyz~");expect(b).toBe("ABCXYZ - ~abc~XYZ - ~abc~~xyz~ - (~abc~/XYZ)")});it("should react to formula dependencies in base view models",function(){var g,d,f;expect(G.passes).toBe(1);N.bind("{lastName}, {firstName}",function(h){d=h});var e=N.bind("{fullName}",function(h){g=h});S.bind("{welcome}",function(h){f=h});Q();expect(G.passes).toBe(2);expect(g).toBe("Don Griffin");expect(d).toBe("Griffin, Don");expect(f).toBe("Hello Don Griffin!");e.setValue("Evan Trimboli");Q();expect(G.passes).toBe(3);expect(g).toBe("Evan Trimboli");expect(d).toBe("Trimboli, Evan");expect(f).toBe("Hello Evan Trimboli!")});it("should work with fields on records",function(){R.setFormulas({fromRecord:function(g){return g("rec.fld")}});var f=Ext.define(null,{extend:"Ext.data.Model",fields:["fld"]});U=new f({fld:42});N.set("rec",U);var e,d=0;S.bind("The answer is {fromRecord}",function(g){e=g;++d});Q();expect(G.passes).toBe(2);expect(d).toBe(1);expect(e).toBe("The answer is 42")});it("should track field changes based on record fields",function(){R.setFormulas({fromRecord:function(f){return f("rec.name")}});N.linkTo("rec",{type:"User",id:1});var e,d=0;S.bind("Greetings {fromRecord}!",function(f){e=f;++d});T(1,{name:"Don"});Q();expect(G.passes).toBe(2);expect(d).toBe(1);expect(e).toBe("Greetings Don!");J.getRecord("User",1).set("name","Evan");Q();expect(G.passes).toBe(3);expect(d).toBe(2);expect(e).toBe("Greetings Evan!")});it("should call the setter in the parent viewmodel when setting the value on a binding bound to a formula in a parent viewmodel",function(){var e=jasmine.createSpy();N.bind("{firstName} {lastName}",e);var d=S.bind("{fullName}",Ext.emptyFn);Q();d.setValue("Foo Bar");Q();expect(e).toHaveBeenCalled();expect(e.mostRecentCall.args[0]).toBe("Foo Bar")});it("should call the setter in the parent viewmodel when setting the value on a stub bound to a formula in a parent viewmodel",function(){var d=jasmine.createSpy();N.bind("{firstName} {lastName}",d);S.bind("{fullName}",Ext.emptyFn);S.set("fullName","Foo Bar");Q();expect(d).toHaveBeenCalled();expect(d.mostRecentCall.args[0]).toBe("Foo Bar")})})});describe("validation binding",function(){var S;function R(T){Ext.Ajax.mockComplete({status:200,responseText:Ext.encode(T)})}beforeEach(function(){C(true);S=Ext.define("spec.User",{extend:Ext.data.Model,fields:[{name:"first",type:"string",convert:null},{name:"last",type:"string",convert:null},{name:"email",type:"string",convert:null},{name:"formatField",type:"string",convert:null},{name:"phone",type:"string",convert:null},{name:"color",type:"string",convert:null},{name:"description",type:"string",convert:null},{name:"initial",type:"string",convert:null}],validators:{last:"presence",description:{type:"length",min:10,max:200},color:{type:"inclusion",list:["red","white","blue"]},first:{type:"exclusion",list:["Ed"]},formatField:{type:"format",matcher:/123/},email:"email",phone:{type:"presence",message:"Phone number required"},initial:{type:"length",min:1}},doValidate:function(){}});N.linkTo("theUser",{type:"User",id:42})});afterEach(function(){Ext.undefine("spec.User")});describe("delivering validation messages",function(){beforeEach(function(){R({id:42,description:"too short",color:"not a valid color",first:"Ed",formatField:"abc",email:"abc",initial:"X",extraStuff:42})});describe("for invalid fields",function(){var T=Ext.data.validator.Validator.all;it("should report description too short",function(){var U=0,V;N.bind("{theUser.validation.description}",function(X){V=X;++U});Q();expect(G.passes).toBe(1);expect(U).toBe(1);expect(V).toBe("Length must be between 10 and 200");var W=J.getRecord("User",42);W.set("description","1234567890");Q();expect(G.passes).toBe(2);expect(U).toBe(2);expect(V).toBe(true)});it("should report missing last name",function(){var V;var U=0;N.bind("{theUser.validation.last}",function(X){V=X;++U});Q();expect(G.passes).toBe(1);expect(U).toBe(1);expect(V).toBe(T.presence.config.message);var W=J.getRecord("User",42);W.set("last","Spencer");Q();expect(G.passes).toBe(2);expect(U).toBe(2);expect(V).toBe(true)});it("should have the correct bad format message",function(){var V;var U=0;N.bind("{theUser.validation.formatField}",function(X){V=X;++U});Q();expect(G.passes).toBe(1);expect(U).toBe(1);expect(V).toEqual(T.format.config.message);var W=J.getRecord("User",42);W.set("formatField","123");Q();expect(G.passes).toBe(2);expect(U).toBe(2);expect(V).toBe(true)});it("should have the correct non-inclusion message",function(){var V;var U=0;N.bind("{theUser.validation.color}",function(X){V=X;++U});Q();expect(G.passes).toBe(1);expect(U).toBe(1);expect(V).toEqual(T.inclusion.config.message);var W=J.getRecord("User",42);W.set("color","red");Q();expect(G.passes).toBe(2);expect(U).toBe(2);expect(V).toBe(true)});it("should have the correct non-exclusion message",function(){var V;var U=0;N.bind("{theUser.validation.first}",function(X){V=X;++U});Q();expect(G.passes).toBe(1);expect(U).toBe(1);expect(V).toEqual(T.exclusion.config.message);var W=J.getRecord("User",42);W.set("first","Edward");Q();expect(G.passes).toBe(2);expect(U).toBe(2);expect(V).toBe(true)});it("should have the correct bad email format message",function(){var V;var U=0;N.bind("{theUser.validation.email}",function(X){V=X;++U});Q();expect(G.passes).toBe(1);expect(U).toBe(1);expect(V).toEqual(T.email.config.message);var W=J.getRecord("User",42);W.set("email","ed@sencha.com");Q();expect(G.passes).toBe(2);expect(U).toBe(2);expect(V).toBe(true)});it("should allow user-defined error messages",function(){var V;var U=0;N.bind("{theUser.validation.phone}",function(X){V=X;++U});Q();expect(G.passes).toBe(1);expect(U).toBe(1);expect(V).toEqual("Phone number required");var W=J.getRecord("User",42);W.set("phone","555-1212");Q();expect(G.passes).toBe(2);expect(U).toBe(2);expect(V).toBe(true)})});describe("for valid fields",function(){it("should report initial as valid",function(){var U;var T=0;N.bind("{theUser.validation.initial}",function(W){U=W;++T});Q();expect(G.passes).toBe(1);expect(T).toBe(1);expect(U).toBe(true);var V=J.getRecord("User",42);V.set("initial","");Q();expect(G.passes).toBe(2);expect(T).toBe(2);expect(U).toBe("Length must be at least 1")})})})});describe("multi binding",function(){var R;beforeEach(function(){C();R=jasmine.createSpy()});describe("basic static bindings",function(){describe("objects",function(){it("should bind to a simple object",function(){N.bind({aProp:"static"},R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual({aProp:"static"})});it("should be able to bind to numeric values",function(){N.bind({aProp:1},R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual({aProp:1})});it("should be able to bind to boolean values",function(){N.bind({aProp:true},R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual({aProp:true})});it("should allow null values",function(){N.bind({aProp:null},R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual({aProp:null})})});describe("arrays",function(){it("should bind to a simple array",function(){N.bind(["static1","static2"],R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual(["static1","static2"])});it("should be able to bind to numeric values",function(){N.bind([1],R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual([1])});it("should be able to bind to boolean values",function(){N.bind([true],R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual([true])});it("should be able to bind to null values",function(){N.bind([null],R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual([null])})})});describe("basic dynamic bindings",function(){describe("objects",function(){it("should resolve a binding for an object",function(){N.set("aBind","val");N.bind({foo:"{aBind}"},R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual({foo:"val"})});it("should resolve multiple bindings for an object",function(){N.set("aBind1","val1");N.set("aBind2","val2");N.bind({foo:"{aBind1}",bar:"{aBind2}"},R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual({foo:"val1",bar:"val2"})})});describe("arrays",function(){it("should resolve a binding for an array",function(){N.set("aBind","val");N.bind(["{aBind}"],R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual(["val"])});it("should resolve multiple bindings for an array",function(){N.set("aBind1","val1");N.set("aBind2","val2");N.bind(["{aBind1}","{aBind2}"],R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual(["val1","val2"])})})});describe("nested bindings",function(){beforeEach(function(){N.set("aBind1","val1");N.set("aBind2","val2");N.set("aBind3","val3")});it("should resolve a nested object binding",function(){N.bind({bind1:"{aBind1}",nest1:{bind2:"{aBind2}",nest2:{bind3:"{aBind3}"}}},R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual({bind1:"val1",nest1:{bind2:"val2",nest2:{bind3:"val3"}}})});it("should resolved nested array bindings",function(){N.bind(["{aBind1}",["{aBind2}"],[["{aBind3}"]]],R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual(["val1",["val2"],[["val3"]]])});it("should resolve arrays inside objects",function(){N.bind({bind1:["{aBind1}"],nest1:{bind2:["{aBind2}"],nest2:{bind3:["{aBind3}"]}}},R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual({bind1:["val1"],nest1:{bind2:["val2"],nest2:{bind3:["val3"]}}})});it("should resolve objects inside arrays",function(){N.bind([{bind1:"{aBind1}"},[{bind2:"{aBind2}"}],[[{bind3:"{aBind3}"}]]],R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual([{bind1:"val1"},[{bind2:"val2"}],[[{bind3:"val3"}]]])})});describe("with formulas",function(){it("should not deliver until formulas is processed",function(){N.setFormulas({b:function(S){return S("a")+"b"},c:function(S){return S("b")+"c"},d:function(S){return S("c")+"d"}});N.set("a","a");N.bind(["{d}","{c}","{b}","{a}"],R);Q();expect(R).toHaveBeenCalled();expect(R.mostRecentCall.args[0]).toEqual(["abcd","abc","ab","a"])})});describe("with async data",function(){function T(V,U){S({id:V},U)}function S(U,V){Ext.Ajax.mockComplete({status:200,responseText:Ext.encode(U)},V)}beforeEach(function(){Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"]});Ext.define("spec.Post",{extend:"Ext.data.Model",fields:["id","content",{name:"userId",reference:"User"}]})});afterEach(function(){Ext.undefine("spec.User");Ext.undefine("spec.Post")});it("should not deliver until a record is loaded",function(){N.linkTo("aUser",{type:"User",id:1});N.bind({theUser:"{aUser}"},R);Q();expect(R).not.toHaveBeenCalled();T(1);Q();expect(R).toHaveBeenCalled();var U=R.mostRecentCall.args[0];expect(U.theUser.$className).toBe("spec.User");expect(U.theUser.getId()).toBe(1)});it("should not deliver until all records are loaded",function(){N.linkTo("aUser1",{type:"User",id:1});N.linkTo("aUser2",{type:"User",id:2});N.linkTo("aUser3",{type:"User",id:3});N.bind({user1:"{aUser1}",user2:"{aUser2}",user3:"{aUser3}"},R);Q();expect(R).not.toHaveBeenCalled();T(2,2);Q();expect(R).not.toHaveBeenCalled();T(3,3);Q();expect(R).not.toHaveBeenCalled();T(1,1);Q();expect(R).toHaveBeenCalled();var U=R.mostRecentCall.args[0];expect(U.user1.$className).toBe("spec.User");expect(U.user1.getId()).toBe(1);expect(U.user2.$className).toBe("spec.User");expect(U.user2.getId()).toBe(2);expect(U.user3.$className).toBe("spec.User");expect(U.user3.getId()).toBe(3)});it("should not deliver until nested dependencies are loaded",function(){N.linkTo("aUser",{type:"User",id:1});N.bind({user:"{aUser}",posts:"{aUser.posts}"},R);Q();expect(R).not.toHaveBeenCalled();T(1);Q();expect(R).not.toHaveBeenCalled();S([{id:1},{id:2}]);Q();expect(R).toHaveBeenCalled();var U=R.mostRecentCall.args[0];expect(U.user.$className).toBe("spec.User");expect(U.user.getId()).toBe(1);expect(U.posts.isStore).toBe(true);expect(U.posts.getCount()).toBe(2)})});describe("trackStatics",function(){var S={trackStatics:true};describe("root level",function(){it("should prune static string values",function(){var T=N.bind({a:"foo",b:"bar"},R,null,S);Q();expect(T.pruneStaticKeys()).toEqual({})});it("should prune static numeric values",function(){var T=N.bind({a:1,b:Math.PI},R,null,S);Q();expect(T.pruneStaticKeys()).toEqual({})});it("should prune static boolean values",function(){var T=N.bind({a:true,b:false},R,null,S);Q();expect(T.pruneStaticKeys()).toEqual({})});it("should prune static arrays",function(){var T=N.bind({a:[1,2,3],b:["a","b","c"]},R,null,S);Q();expect(T.pruneStaticKeys()).toEqual({})});it("should prune static objects",function(){var T=N.bind({a:{p:1,q:2},b:{r:"a",s:"b"}},R,null,S);Q();expect(T.pruneStaticKeys()).toEqual({})});it("should not prune a dynamic value",function(){var T=N.bind({a:"{value}"},R,null,S);K("value","foo");expect(T.pruneStaticKeys()).toEqual({a:"foo"})})});describe("nested values",function(){it("should prune deeply nested static objects",function(){var T=N.bind({a:{b:{x:{q:1,r:{s:2}}},c:{y:{z:100}},d:[100,200,300,400]}},R,null,S);Q();expect(T.pruneStaticKeys()).toEqual({})});it("should not prune an array of objects where the objects are dynamic",function(){var T=N.bind({root:[{property:"foo",value:"{value}"},{property:"bar",value:"{value}"},{property:"baz",value:"{value}"}]},R,null,S);K("value",1);expect(T.pruneStaticKeys()).toEqual({root:[{property:"foo",value:1},{property:"bar",value:1},{property:"baz",value:1}]})});it("should not prune nested objects where the children are dynamic",function(){var T=N.bind({root:{a:{property:"foo",value:"{value}"},b:{property:"bar",value:"{value}"},c:{property:"baz",value:"{value}"}}},R,null,S);K("value",1);expect(T.pruneStaticKeys()).toEqual({root:{a:{property:"foo",value:1},b:{property:"bar",value:1},c:{property:"baz",value:1}}})})})})});describe("stores",function(){var R;beforeEach(function(){C();R=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name",{name:"projectId",reference:"Project"}]})});afterEach(function(){Ext.undefine("spec.User");R=null});it("should create a simple store",function(){N.setStores({users:{model:"spec.User"}});Q();var S=N.getStore("users");expect(S.isStore).toBe(true);expect(S.getModel()).toBe(R)});it("should bind multiple stores",function(){N.setStores({users1:{model:"spec.User"},users2:{model:"spec.User",filters:[{property:"name",value:"Foo"}]}});Q();var T=N.getStore("users1"),S=N.getStore("users2");expect(T.isStore).toBe(true);expect(T.getModel()).toBe(R);expect(S.isStore).toBe(true);expect(S.getModel()).toBe(R);expect(S.getFilters().getCount()).toBe(1)});it("should accept a store instance",function(){var S=new Ext.data.Store({model:"spec.User"});N.setStores({users:S});Q();var T=N.getStore("users");expect(T).toBe(S)});it("should not attach the store to the session by default",function(){N.setStores({users:{model:"spec.User"}});Q();var S=N.getStore("users");expect(S.getSession()).toBeNull()});it("should attach to the session if session: true is specified",function(){N.destroy();C(true);N.setStores({users:{model:"spec.User",session:true}});Q();var S=N.getStore("users");expect(S.getSession()).toBe(J)});describe("immediate creation",function(){it("should have a store configuration with no dynamic bindings available before notify",function(){N.setStores({users:{model:"spec.User"}});var S=N.getStore("users");expect(S.isStore).toBe(true);expect(S.getModel()).toBe(R)});it("should have a store instance available before notify",function(){var S=new Ext.data.Store({model:"spec.User"});N.setStores({users:S});expect(N.getStore("users")).toBe(S)})});describe("when destroying the view model",function(){describe("store config",function(){it("should not set autoDestroy on the store",function(){N.setStores({users:{model:"spec.User"}});Q();var S=N.getStore("users");expect(S.getAutoDestroy()).toBeUndefined()});it("should destroy the stores when the view model is destroyed",function(){N.setStores({users1:{model:"spec.User"},users2:{model:"spec.User"}});Q();var T=N.getStore("users1"),S=N.getStore("users2");spyOn(T,"destroy");spyOn(S,"destroy");N.destroy();expect(T.destroy).toHaveBeenCalled();expect(S.destroy).toHaveBeenCalled()});it("should not destroy if configured with autoDestroy: false",function(){N.setStores({users:{autoDestroy:false,model:"spec.User"}});Q();var S=N.getStore("users");spyOn(S,"destroy");N.destroy();expect(S.destroy).not.toHaveBeenCalled()})});describe("store instance",function(){it("should not set autoDestroy on the store",function(){var S=new Ext.data.Store({model:"spec.User"});N.setStores({users:S});Q();var T=N.getStore("users");expect(T.getAutoDestroy()).toBeUndefined()});it("should not auto destroy by default",function(){var S=new Ext.data.Store({model:"spec.User"});N.setStores({users:S});Q();var T=N.getStore("users");spyOn(T,"destroy");N.destroy();expect(T.destroy).not.toHaveBeenCalled()});it("should auto destroy if configured with autoDestroy: true",function(){var S=new Ext.data.Store({model:"spec.User",autoDestroy:true});N.setStores({users:S});Q();var T=N.getStore("users");spyOn(T,"destroy");N.destroy();expect(T.destroy).toHaveBeenCalled()})})});describe("bindings",function(){function S(U,T){Ext.Ajax.mockComplete({status:200,responseText:Ext.encode(Ext.apply({id:U},T))})}describe("initial",function(){it("should not create the store until a required binding is present",function(){N.setStores({users:{model:"spec.User",proxy:{type:"ajax",url:"{theUrl}"}}});Q();expect(N.getStore("users")).toBeNull();K("theUrl","/foo");var T=N.getStore("users");expect(T.isStore).toBe(true);expect(T.getProxy().getUrl()).toBe("/foo")});it("should wait for all required bindings",function(){N.setStores({users:{model:"spec.User",proxy:{type:"ajax",url:"{theUrl}",extraParams:{id:"{theId}"}}}});Q();expect(N.getStore("users")).toBeNull();K("theUrl","/foo");expect(N.getStore("users")).toBeNull();K("theId",12);var T=N.getStore("users");expect(T.isStore).toBe(true);expect(T.getProxy().getUrl()).toBe("/foo");expect(T.getProxy().getExtraParams().id).toBe(12)})});describe("special bindings",function(){it("should be able to bind filters",function(){K("id",1);N.setStores({users:{model:"spec.User",filters:[{property:"someFilter",value:"{id}"}]}});Q();expect(N.getStore("users").getFilters().first().getValue()).toBe(1)});it("should be able to bind sorters",function(){K("someField","name");N.setStores({users:{model:"spec.User",sorters:[{property:"{someField}",direction:"ASC"}]}});Q();expect(N.getStore("users").getSorters().first().getProperty()).toBe("name")});it("should be able to bind extraParams",function(){K("someParam","val");N.setStores({users:{model:"spec.User",proxy:{type:"ajax",extraParams:{someParam:"{someParam}"}}}});Q();expect(N.getStore("users").getProxy().getExtraParams().someParam).toBe("val")})});describe("post-creation bindings",function(){it("should not change the store instance",function(){K("remote",true);N.setStores({users:{model:"spec.User",remoteFilter:"{remote}"}});Q();var T=N.getStore("users");expect(T.getRemoteFilter()).toBe(true);K("remote",false);expect(T.getRemoteFilter()).toBe(false);expect(N.getStore("users")).toBe(T)});it("should update the proxy instance",function(){K("theUrl","/urlA");N.setStores({users:{model:"spec.User",proxy:{type:"ajax",url:"{theUrl}"}}});Q();var T=N.getStore("users"),U=N.getStore("users").getProxy();expect(U.getUrl()).toBe("/urlA");K("theUrl","/urlB");expect(U.getUrl()).toBe("/urlB");expect(T.getProxy()).toBe(U)});describe("filters",function(){it("should update the existing filter with the new value",function(){K("filterVal",1);N.setStores({users:{model:"spec.User",filters:[{property:"id",value:"{filterVal}"}]}});Q();var T=N.getStore("users").getFilters(),U=T.first();expect(T.getCount()).toBe(1);expect(U.getProperty()).toBe("id");expect(U.getValue()).toBe(1);K("filterVal",2);expect(T.getCount()).toBe(1);U=T.first();expect(U.getProperty()).toBe("id");expect(U.getValue()).toBe(2)});it("should maintain existing filters",function(){K("filterVal",1);N.setStores({users:{model:"spec.User",filters:[{property:"id",value:"{filterVal}"},{property:"name",value:"foo"}]}});Q();var T=N.getStore("users").getFilters(),U=T.first();expect(T.getCount()).toBe(2);expect(U.getProperty()).toBe("id");expect(U.getValue()).toBe(1);U=T.last();expect(U.getProperty()).toBe("name");expect(U.getValue()).toBe("foo");K("filterVal",2);expect(T.getCount()).toBe(2);U=T.first();expect(U.getProperty()).toBe("id");expect(U.getValue()).toBe(2);U=T.last();expect(U.getProperty()).toBe("name");expect(U.getValue()).toBe("foo")})});describe("sorters",function(){it("should update the existing sorter with the new direction",function(){K("sorterVal","ASC");N.setStores({users:{model:"spec.User",sorters:[{property:"id",direction:"{sorterVal}"}]}});Q();var U=N.getStore("users").getSorters(),T=U.first();expect(U.getCount()).toBe(1);expect(T.getProperty()).toBe("id");expect(T.getDirection()).toBe("ASC");K("sorterVal","DESC");expect(U.getCount()).toBe(1);T=U.first();expect(T.getProperty()).toBe("id");expect(T.getDirection()).toBe("DESC")});it("should maintain existing sorters",function(){K("sorterVal","ASC");N.setStores({users:{model:"spec.User",sorters:[{property:"id",direction:"{sorterVal}"},{property:"name",direction:"DESC"}]}});Q();var U=N.getStore("users").getSorters(),T=U.first();expect(U.getCount()).toBe(2);expect(T.getProperty()).toBe("id");expect(T.getDirection()).toBe("ASC");T=U.last();expect(T.getProperty()).toBe("name");expect(T.getDirection()).toBe("DESC");K("sorterVal","DESC");expect(U.getCount()).toBe(2);T=U.first();expect(T.getProperty()).toBe("id");expect(T.getDirection()).toBe("DESC");T=U.last();expect(T.getProperty()).toBe("name");expect(T.getDirection()).toBe("DESC")})});describe("filters + sorters with remoteSort & remoteFilter",function(){beforeEach(function(){Ext.data.Store.prototype.config.asynchronousLoad=true});afterEach(function(){Ext.data.Store.prototype.config.asynchronousLoad=false});it("should only trigger a single load",function(){N.set("prop","a");N.setStores({users:{model:"spec.User",remoteFilter:true,remoteSort:true,sorters:[{property:"{prop}",direction:"ASC"}],filters:[{property:"foo",value:"{prop}"}]}});Q();var T=N.getStore("users");spyOn(T,"flushLoad");K("prop","b");waits(100);runs(function(){expect(T.flushLoad.callCount).toBe(1)})})})})});describe("chained stores",function(){it("should create a chained store",function(){N.setStores({parent:{model:"spec.User"},child:{source:"{parent}"}});Q();var S=N.getStore("child");expect(S instanceof Ext.data.ChainedStore).toBe(true)});it("should be able to set the source to an expression",function(){N.setStores({parent:{model:"spec.User"},child:{source:"{parent}"}});Q();var S=N.getStore("parent"),T=N.getStore("child");expect(T.getSource()).toBe(S)});it("should bind if the source is a string",function(){N.setStores({parent:{model:"spec.User"},child:"{parent}"});Q();var S=N.getStore("parent"),T=N.getStore("child");expect(T.getSource()).toBe(S)});it("should wait until the source binds",function(){N.setStores({parent:{model:"spec.User",remoteSort:"{remoteSort}"},child:{source:"{parent}"}});Q();expect(N.getStore("child")).toBeNull();N.set("remoteSort",false);Q();var S=N.getStore("parent"),T=N.getStore("child");expect(T.getSource()).toBe(S)});describe("bindings",function(){it("should be able to bind to chained store configs",function(){N.setStores({parent:{model:"spec.User"},child:{source:"{parent}",filters:[{property:"foo",value:"{foo}"}]}});Q();K("foo",1);var S=N.getStore("child");expect(S.getFilters().getAt(0).getValue()).toBe(1);K("foo",2);expect(S.getFilters().getAt(0).getValue()).toBe(2)})})});describe("listeners",function(){var S=Ext.define(null,{extend:"Ext.app.ViewController",someFn:function(){}});it("should resolve listener scope to the view controller",function(){var T=new S();var U=new Ext.Component({controller:T,viewModel:N});N.setView(U);N.setStores({test:{model:"spec.User",listeners:{beforeload:"someFn"}}});Q();spyOn(T,"someFn").andReturn();N.getStore("test").load();expect(T.someFn).toHaveBeenCalled();Ext.destroy(U)});it("should resolve listener scope to the component",function(){var T=new Ext.Component({viewModel:N,defaultListenerScope:true,someFn:function(){}});N.setView(T);N.setStores({test:{model:"spec.User",listeners:{beforeload:"someFn"}}});Q();spyOn(T,"someFn").andReturn();N.getStore("test").load();expect(T.someFn).toHaveBeenCalled();Ext.destroy(T)});it("should be able to resolve up the hierarchy",function(){var U=new S();var T=new Ext.container.Container({controller:U,items:{xtype:"container",items:{xtype:"container",items:{xtype:"component",itemId:"c",viewModel:N}}}});N.setView(T.down("#c"));N.setStores({test:{model:"spec.User",listeners:{beforeload:"someFn"}}});Q();spyOn(U,"someFn").andReturn();N.getStore("test").load();expect(U.someFn).toHaveBeenCalled();Ext.destroy(T)})})});describe("linking",function(){var S;function R(U,T){return A(S,U,T)}beforeEach(function(){S=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"]})});afterEach(function(){Ext.undefine("spec.User");S=null});describe("links",function(){function T(U){C(null,U)}it("should accept the entityName",function(){T({links:{theUser:{type:"User",id:18}}});F("{theUser}",L);M({});var U=L.mostRecentCall.args[0];expect(U.$className).toBe("spec.User");expect(U.getId()).toBe(18)});it("should accept the full class name",function(){T({links:{theUser:{type:"spec.User",id:18}}});F("{theUser}",L);M({});var U=L.mostRecentCall.args[0];expect(U.$className).toBe("spec.User");expect(U.getId()).toBe(18)});it("should accept a model type",function(){T({links:{theUser:{type:spec.User,id:18}}});F("{theUser}",L);M({});var U=L.mostRecentCall.args[0];expect(U.$className).toBe("spec.User");expect(U.getId()).toBe(18)});it("should accept a model instance but create a new instance of the same type/id",function(){var V=new spec.User({id:18});T({links:{theUser:V}});F("{theUser}",L);M({});var U=L.mostRecentCall.args[0];expect(U.$className).toBe("spec.User");expect(U.getId()).toBe(18);expect(U).not.toBe(V)});it("should raise an exception if id is not specified",function(){expect(function(){T({links:{theUser:{type:"spec.User"}}})}).toThrow()});describe("with the create option",function(){describe("with create: true",function(){it("should create a phantom record",function(){T({links:{theUser:{type:"spec.User",create:true}}});F("{theUser}",L);expect(L.mostRecentCall.args[0].phantom).toBe(true)});it("should not load from the server",function(){L=spyOn(S.getProxy(),"read");T({links:{theUser:{type:"spec.User",create:true}}});Q();expect(L).not.toHaveBeenCalled()});describe("with session",function(){it("should push the phantom into the session",function(){C(true,{links:{theUser:{type:"spec.User",create:true}}});F("{theUser}",L);var U=L.mostRecentCall.args[0];expect(U.session).toBe(J)})})});describe("with create as an object",function(){it("should create a phantom record with the passed data",function(){T({links:{theUser:{type:"spec.User",create:{name:"Foo",group:"Bar"}}}});F("{theUser}",L);var U=L.mostRecentCall.args[0];expect(U.phantom).toBe(true);expect(U.get("name")).toBe("Foo");expect(U.get("group")).toBe("Bar")});it("should not load from the server",function(){L=spyOn(S.getProxy(),"read");T({links:{theUser:{type:"spec.User",create:{name:"Foo",group:"Bar"}}}});Q();expect(L).not.toHaveBeenCalled()});describe("with session",function(){it("should push the phantom into the session",function(){C(true,{links:{theUser:{type:"spec.User",create:{name:"Foo",group:"Bar"}}}});F("{theUser}",L);var U=L.mostRecentCall.args[0];expect(U.session).toBe(J)})})})});it("should request the data from the server",function(){L=spyOn(S.getProxy(),"read");T({links:{theUser:{type:"spec.User",id:18}}});expect(L.mostRecentCall.args[0].getId()).toBe(18)});it("should not publish until the record returns",function(){T({links:{theUser:{type:"spec.User",id:18}}});F("{theUser}",L);expect(L).not.toHaveBeenCalled();M({});expect(L.mostRecentCall.args[0].getId()).toBe(18)});it("should be able to change the link at runtime",function(){T({links:{theUser:{type:"spec.User",id:18}}});F("{theUser}",L);M({});L.reset();N.linkTo("theUser",{type:"User",id:34});M({});expect(L.mostRecentCall.args[0].getId()).toBe(34)});describe("with sessions",function(){it("should use an existing record in the session and not query the server",function(){var U=spyOn(S.getProxy(),"read");O();R(22);C(true,{links:{theUser:{type:"User",id:22}}});F("{theUser}",L);expect(L.mostRecentCall.args[0]).toBe(J.getRecord("User",22));expect(U).not.toHaveBeenCalled()});it("should create a non-existent record in the session and load it",function(){C(true,{links:{theUser:{type:"User",id:89}}});var U=J.getRecord("User",89);expect(U.isLoading()).toBe(true)})})});describe("linkTo",function(){it("should accept the entityName",function(){C();F("{theUser}",L);N.linkTo("theUser",{type:"User",id:18});M({});var T=L.mostRecentCall.args[0];expect(T.$className).toBe("spec.User");expect(T.getId()).toBe(18)});it("should accept the full class name",function(){C();F("{theUser}",L);N.linkTo("theUser",{type:"spec.User",id:18});M({});var T=L.mostRecentCall.args[0];expect(T.$className).toBe("spec.User");expect(T.getId()).toBe(18)});it("should accept a model type",function(){C();F("{theUser}",L);N.linkTo("theUser",{type:spec.User,id:18});M({});var T=L.mostRecentCall.args[0];expect(T.$className).toBe("spec.User");expect(T.getId()).toBe(18)});it("should accept a model instance but create a copy of the same type/id",function(){C();var U=new spec.User({id:18});F("{theUser}",L);N.linkTo("theUser",U);M({});var T=L.mostRecentCall.args[0];expect(T.$className).toBe("spec.User");expect(T.getId()).toBe(18);expect(T).not.toBe(U)});it("should create a record with the matching id",function(){C();F("{theUser}",L);N.linkTo("theUser",{type:"spec.User",id:18});M({});expect(L.mostRecentCall.args[0].getId()).toBe(18)});it("should raise an exception if id is not specified",function(){C();expect(function(){N.linkTo("theUser",{type:"spec.User"})}).toThrow()});describe("with the create option",function(){describe("with create: true",function(){it("should create a phantom record",function(){C();F("{theUser}",L);N.linkTo("theUser",{type:"spec.User",create:true});Q();expect(L.mostRecentCall.args[0].phantom).toBe(true)});it("should not load from the server",function(){C();L=spyOn(S.getProxy(),"read");N.linkTo("theUser",{type:"spec.User",create:true});Q();expect(L).not.toHaveBeenCalled()});describe("with session",function(){it("should push the phantom into the session",function(){C(true);F("{theUser}",L);N.linkTo("theUser",{type:"spec.User",create:true});Q();var T=L.mostRecentCall.args[0];expect(T.session).toBe(J)})})});describe("with create as an object",function(){it("should create a phantom record with the passed data",function(){C();F("{theUser}",L);N.linkTo("theUser",{type:"spec.User",create:{name:"Foo",group:"Bar"}});Q();var T=L.mostRecentCall.args[0];expect(T.phantom).toBe(true);expect(T.get("name")).toBe("Foo");expect(T.get("group")).toBe("Bar")});it("should not load from the server",function(){C();L=spyOn(S.getProxy(),"read");N.linkTo("theUser",{type:"spec.User",create:{name:"Foo",group:"Bar"}});Q();expect(L).not.toHaveBeenCalled()});describe("with session",function(){it("should push the phantom into the session",function(){C(true);F("{theUser}",L);N.linkTo("theUser",{type:"spec.User",create:{name:"Foo",group:"Bar"}});Q();var T=L.mostRecentCall.args[0];expect(T.session).toBe(J)})})})});it("should request the data from the server",function(){C();L=spyOn(S.getProxy(),"read");N.linkTo("theUser",{type:"spec.User",id:18});expect(L.mostRecentCall.args[0].getId()).toBe(18)});it("should not publish until the record returns",function(){C();F("{theUser}",L);N.linkTo("theUser",{type:"User",id:18});expect(L).not.toHaveBeenCalled()});it("should be able to change the link at runtime",function(){C();F("{theUser}",L);N.linkTo("theUser",{type:"User",id:18});M({});L.reset();N.linkTo("theUser",{type:"User",id:34});M({});expect(L.mostRecentCall.args[0].getId()).toBe(34)});describe("with session",function(){it("should use an existing record in the session and not query the server",function(){C(true);var T=spyOn(S.getProxy(),"read");R(22);F("{theUser}",L);N.linkTo("theUser",{type:"User",id:22});Q();expect(L.mostRecentCall.args[0]).toBe(J.getRecord("User",22));expect(T).not.toHaveBeenCalled()});it("should create a non-existent record in the session and load it",function(){C(true);expect(J.peekRecord("User",89)).toBeNull();N.linkTo("theUser",{type:"User",id:89});var T=J.getRecord("User",89);expect(T.isLoading()).toBe(true)})});describe("with a parent viewmodel",function(){it("should create new model instances in the child view model when linking after binding",function(){C();var U=new Ext.app.ViewModel({parent:N}),T=new Ext.app.ViewModel({parent:N});U.bind("{theUser}",L);T.bind("{theUser}",L);Q();U.linkTo("theUser",{type:"User",id:100});T.linkTo("theUser",{type:"User",id:100});B({});B({});Q();expect(L.callCount).toBe(2);var W=L.calls[0].args[0],V=L.calls[1].args[0];expect(W).not.toBe(V);expect(W.getId()).toBe(V.getId());expect(W.$className).toBe(V.$className);Ext.destroy(U,T)})})})});describe("formulas",function(){beforeEach(function(){C()});describe("configuring",function(){var R;afterEach(function(){R.destroy()});describe("class definition",function(){describe("sub classing",function(){it("should inherit formulas from the superclass",function(){var T=function(){};var S=Ext.define(null,{extend:"Ext.app.ViewModel",formulas:{foo:T}});var U=Ext.define(null,{extend:S});R=new U();expect(R.getFormulas().foo).toBe(T)});it("should merge keys",function(){var U=function(){},T=function(){};var S=Ext.define(null,{extend:"Ext.app.ViewModel",formulas:{foo:U}});var V=Ext.define(null,{extend:S,formulas:{bar:T}});R=new V();expect(R.getFormulas()).toEqual({foo:U,bar:T})});it("should favour the subclass on collision",function(){var U=function(){},T=function(){};var S=Ext.define(null,{extend:"Ext.app.ViewModel",formulas:{foo:U}});var V=Ext.define(null,{extend:S,formulas:{foo:T}});R=new V();expect(R.getFormulas().foo).toBe(T)});it("should not attempt to merge a function with an object definition",function(){var T=function(){};var S=Ext.define(null,{extend:"Ext.app.ViewModel",formulas:{foo:{get:function(){},set:function(){}}}});var U=Ext.define(null,{extend:S,formulas:{foo:T}});R=new U();expect(R.getFormulas().foo).toBe(T)})});describe("mixin",function(){afterEach(function(){Ext.undefine("spec.Mixin")});it("should copy formulas from the mixin",function(){var T=function(){};var S=Ext.define("spec.Mixin",{config:{formulas:{foo:T}}});var U=Ext.define(null,{extend:"Ext.app.ViewModel",mixins:[S]});R=new U();expect(R.getFormulas().foo).toBe(T)});it("should merge keys",function(){var U=function(){},T=function(){};var S=Ext.define("spec.Mixin",{config:{formulas:{foo:U}}});var V=Ext.define(null,{extend:"Ext.app.ViewModel",mixins:[S],formulas:{bar:T}});R=new V();expect(R.getFormulas()).toEqual({foo:U,bar:T})});it("should favour the class on collision",function(){var U=function(){},T=function(){};var S=Ext.define("spec.Mixin",{config:{formulas:{foo:U}}});var V=Ext.define(null,{extend:"Ext.app.ViewModel",mixins:[S],formulas:{foo:T}});R=new V();expect(R.getFormulas().foo).toBe(T)});it("should not attempt to merge a function with an object definition",function(){var T=function(){};var S=Ext.define("spec.Mixin",{config:{formulas:{foo:{get:function(){},set:function(){}}}}});var U=Ext.define(null,{extend:"Ext.app.ViewModel",mixins:[S],formulas:{foo:T}});R=new U();expect(R.getFormulas().foo).toBe(T)})})});describe("instance",function(){it("should inherit formulas from the class",function(){var T=function(){};var S=Ext.define(null,{extend:"Ext.app.ViewModel",formulas:{foo:T}});R=new S();expect(R.getFormulas().foo).toBe(T)});it("should merge keys",function(){var U=function(){},T=function(){};var S=Ext.define(null,{extend:"Ext.app.ViewModel",formulas:{foo:U}});R=new S({formulas:{bar:T}});expect(R.getFormulas()).toEqual({foo:U,bar:T})});it("should favour the instance on collision",function(){var U=function(){},T=function(){};var S=Ext.define(null,{extend:"Ext.app.ViewModel",formulas:{foo:U}});R=new S({formulas:{foo:T}});expect(R.getFormulas().foo).toBe(T)});it("should not attempt to merge a function with an object definition",function(){var T=function(){};var S=Ext.define(null,{extend:"Ext.app.ViewModel",formulas:{foo:{get:function(){},set:function(){}}}});R=new S({formulas:{foo:T}});expect(R.getFormulas().foo).toBe(T)})})});it("should deliver a value if it's static",function(){N.bind("{formula1}",L);N.setFormulas({formula1:function(){return 1}});Q();expect(L).toHaveBeenCalled();expect(L.mostRecentCall.args[0]).toBe(1)});it("should wait until values are delivered before evaluating",function(){N.bind("{f1}",L);N.setFormulas({f1:function(R){return R("foo")+R("bar")}});Q();expect(L).not.toHaveBeenCalled();K("foo",100);expect(L).not.toHaveBeenCalled();K("bar",300);expect(L).toHaveBeenCalled();expect(L.mostRecentCall.args[0]).toBe(400)});it("should allow formulas to depend on other formulas",function(){N.bind("{f1}",L);N.setFormulas({f1:function(R){return R("f2")+1},f2:function(R){return R("f3")+1},f3:function(R){return R("value")+1}});K("value",100);expect(L).toHaveBeenCalled();expect(L.mostRecentCall.args[0]).toBe(103)})});describe("the scheduler",function(){it("should create a scheduler if there is no parent",function(){C();expect(N.getScheduler() instanceof Ext.util.Scheduler).toBe(true)});it("should use the scheduler of the parent VM",function(){C();var R=new Ext.app.ViewModel({parent:N});expect(R.getScheduler()).toBe(N.getScheduler());R.destroy();R=null})});describe("collect",function(){function S(X,U){U=U||N;var W=U.getRoot(),V=X.split("."),T;while(V.length){T=V.shift();W=W.children&&W.children[T];if(!W){return null}}return W}function R(T){T=T||N;T.collectTimeout=0;T.collect()}beforeEach(function(){C()});it("should not collect a stub with a binding",function(){var T=F("{foo}",Ext.emptyFn);R();expect(S("foo")).not.toBeNull()});it("should collect a stub when the only binding is destroyed",function(){var T=F("{foo}",Ext.emptyFn);T.destroy();R();expect(S("foo")).toBeNull()});it("should not collect a stub where only one of many bindings are destroyed",function(){var U=N.bind("{foo}",Ext.emptyFn),T=N.bind("{foo}",Ext.emptyFn);Q();U.destroy();R();expect(S("foo")).not.toBeNull()});it("should not collect a stub that has a pending store binding",function(){N.setStores({foo:{filters:[{property:"name",value:"{value}"}]}});R();expect(S("foo")).not.toBeNull()});it("should not collect formulas",function(){N.setFormulas({foo:function(T){return 1}});R();expect(S("foo")).not.toBeNull()});it("should not collect parent stubs if there are any bindings below it",function(){var T=F("{foo.bar.baz.x}",Ext.emptyFn);R();expect(S("foo")).not.toBeNull();expect(S("foo.bar")).not.toBeNull();expect(S("foo.bar.baz")).not.toBeNull();expect(S("foo.bar.baz.x")).not.toBeNull()});it("should collect parent stubs when all child bindings are destroyed",function(){var T=F("{foo.bar.baz.x}",Ext.emptyFn);T.destroy();R();expect(S("foo")).toBeNull();expect(S("foo.bar")).toBeNull();expect(S("foo.bar.baz")).toBeNull();expect(S("foo.bar.baz.x")).toBeNull()});it("should collect up to the point where no child bindings exist",function(){var U=F("{foo.bar.baz.x}",Ext.emptyFn),T=F("{foo.bar}");U.destroy();R();expect(S("foo")).not.toBeNull();expect(S("foo.bar")).not.toBeNull();expect(S("foo.bar.baz")).toBeNull();expect(S("foo.bar.baz.x")).toBeNull()});it("should not collect stubs with bindings to a parent viewmodel",function(){N.set("foo",1);var U=new Ext.app.ViewModel({parent:N});var T=U.bind("{foo}",Ext.emptyFn);T.destroy();R(U);expect(S("foo",U)).not.toBeNull();U.destroy()});it("should auto collect on destroy",function(){N.collectTimeout=0;var T=F("{foo}",Ext.emptyFn);T.destroy();expect(S("foo")).toBeNull()})});describe("destruction",function(){it("should destroy any child view models",function(){C();var R=new Ext.app.ViewModel({parent:N});N.destroy();expect(R.isDestroyed).toBe(true)});describe("bindings",function(){beforeEach(function(){C()});it("should destroy expression bindings",function(){var R=N.bind("{foo}",Ext.emptyFn);N.destroy();expect(R.destroyed).toBe(true)});it("should destroy template bindings",function(){var R=N.bind("Hello {foo}",Ext.emptyFn);N.destroy();expect(R.destroyed).toBe(true)});it("should destroy multi bindings",function(){var R=N.bind({a:"{foo}",b:"{bar}",c:"{baz}"},Ext.emptyFn);N.destroy();expect(R.destroyed).toBe(true)})})})})