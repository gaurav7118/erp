describe("Ext.app.bind.Template",function(){var A;function C(D){var F=0;for(var E=D.buffer.length;E-->0;){if(D.buffer[E]){++F}}return F}function B(D){var F=0;for(var E=D.slots.length;E-->0;){if(D.slots[E]){++F}}return F}beforeEach(function(){A=Ext.app.bind.Template});describe("tokens",function(){it("should parse on first use",function(){var D=new A("Hello {foo}");expect(D.tokens).toBe(null);var E=D.getTokens();expect(E).toEqual(["foo"]);expect(C(D)).toBe(1);expect(B(D)).toBe(1)});it("should parse simple names",function(){var D=new A("Hello {foo} {bar}");var E=D.getTokens();expect(E).toEqual(["foo","bar"]);expect(C(D)).toBe(2);expect(B(D)).toBe(2)});it("should parse dotted names",function(){var D=new A("Hello {foo.bar} {bar.foo}");var E=D.getTokens();expect(E).toEqual(["foo.bar","bar.foo"]);expect(C(D)).toBe(2);expect(B(D)).toBe(2)});it("should parse indexes",function(){var D=new A("Hello {1} {0}");var E=D.getTokens();expect(E).toEqual(["1","0"]);expect(C(D)).toBe(2);expect(B(D)).toBe(2)});it("should consolidate tokens",function(){var D=new A("Hello {foo.bar} {bar} {foo.bar} {bar}");var E=D.getTokens();expect(E).toEqual(["foo.bar","bar"]);expect(C(D)).toBe(4);expect(B(D)).toBe(4)});it("should match slots to consolidated tokens",function(){var D=new A("Hello {foo.bar}{bar} - {foo.bar}{bar}");D.parse();expect(C(D)).toBe(2);expect(D.slots[1].pos).toBe(0);expect(D.slots[2].pos).toBe(1);expect(D.slots[4].pos).toBe(0);expect(D.slots[5].pos).toBe(1)})});describe("default formatters",function(){it("should parse",function(){var D=new A("Hello {foo:number} {bar.foo:date}");var F=D.getTokens();expect(F).toEqual(["foo","bar.foo"]);expect(B(D)).toBe(2);var E=0,G;expect(D.buffer[E++]).toBe("Hello ");G=D.slots[E++];expect(G.fmt).toBe("number");expect(G.scope).toBe(Ext.util.Format);expect(D.buffer[E++]).toBe(" ");G=D.slots[E++];expect(G.fmt).toBe("date");expect(G.scope).toBe(Ext.util.Format)});it("should parse arguments",function(){var D=new A('Hello {foo:number(4)} {bar.foo:date(2,"true")}');var F=D.getTokens();expect(F).toEqual(["foo","bar.foo"]);expect(B(D)).toBe(2);var E=0,G;expect(D.buffer[E++]).toBe("Hello ");G=D.slots[E++];expect(G.fmt).toBe("number");expect(G.scope).toBe(Ext.util.Format);expect(G.args.slice(1)).toEqual([4]);expect(D.buffer[E++]).toBe(" ");G=D.slots[E++];expect(G.fmt).toBe("date");expect(G.scope).toBe(Ext.util.Format);expect(G.args.slice(1)).toEqual([2,"true"])});it("should parse boolean arguments",function(){var D=new A("Hello {foo:number(false)} {bar.foo:date(null,true)}");var F=D.getTokens();expect(F).toEqual(["foo","bar.foo"]);expect(B(D)).toBe(2);var E=0,G;expect(D.buffer[E++]).toBe("Hello ");G=D.slots[E++];expect(G.fmt).toBe("number");expect(G.scope).toBe(Ext.util.Format);expect(G.args.slice(1)).toEqual([false]);expect(D.buffer[E++]).toBe(" ");G=D.slots[E++];expect(G.fmt).toBe("date");expect(G.scope).toBe(Ext.util.Format);expect(G.args.slice(1)).toEqual([null,true])});it("should apply simple formatting",function(){var D=new A('Hello {foo:number} {bar.foo:date("Y-m-d")} -- {foo:number("0.00")}');var E=D.apply([123.456,new Date(2013,2,2)]);expect(E).toBe("Hello 123.456 2013-03-02 -- 123.46")});it("should apply complex formatting",function(){var D=new A('Hello {foo:number} {bar.foo:date("Y-m-d")} -- {foo:number("0,000.00")}');var E=D.apply([123456.789,new Date(2013,2,2)]);expect(E).toBe("Hello 123456.789 2013-03-02 -- 123,456.79")})});describe("scoped formatters",function(){it("should parse",function(){var D=new A("Hello {foo:this.number} {bar.foo:this.date}");var F=D.getTokens();expect(F).toEqual(["foo","bar.foo"]);expect(B(D)).toBe(2);var E=0,G;expect(D.buffer[E++]).toBe("Hello ");G=D.slots[E++];expect(G.fmt).toBe("number");expect(G.scope).toBe(undefined);expect(D.buffer[E++]).toBe(" ");G=D.slots[E++];expect(G.fmt).toBe("date");expect(G.scope).toBe(undefined)});it("should parse arguments",function(){var D=new A('Hello {foo:this.number(4)} {bar.foo:this.date(2,"true")}');var F=D.getTokens();expect(F).toEqual(["foo","bar.foo"]);expect(B(D)).toBe(2);var E=0,G;expect(D.buffer[E++]).toBe("Hello ");G=D.slots[E++];expect(G.fmt).toBe("number");expect(G.scope).toBe(undefined);expect(G.args.slice(1)).toEqual([4]);expect(D.buffer[E++]).toBe(" ");G=D.slots[E++];expect(G.fmt).toBe("date");expect(G.scope).toBe(undefined);expect(G.args.slice(1)).toEqual([2,"true"])});it("should apply simple formatting",function(){var D=new A('Hello {foo:number} {bar.foo:date("Y-m-d")} -- {foo:this.number("0.00")}');var E=D.apply([123.456,new Date(2013,2,2)],{scale:2,number:function(F,G){return"[["+Ext.util.Format.number(F*this.scale,G)+"]]"}});expect(E).toBe("Hello 123.456 2013-03-02 -- [[246.91]]")});it("should apply complex formatting",function(){var D=new A('Hello {foo:number} {bar.foo:date("Y-m-d")} -- {foo:this.thing(Ext.versions.core)}');var E=D.apply([123.456,new Date(2013,2,2)],{text:"::",thing:function(F,G){return this.text+F+"="+G+this.text}});expect(E).toBe("Hello 123.456 2013-03-02 -- ::123.456="+Ext.getVersion("core")+"::")})});describe("parseFormat",function(){it("should parse basic formats",function(){var D=A.prototype.parseFormat("round");var E=D.format(3.14);expect(E).toBe(3)});it("should parse formats with basic arguments",function(){var D=A.prototype.parseFormat("round(2)");var E=D.format(3.139);expect(E).toBe(3.14)});it("should parse formats with string arguments",function(){var D=A.prototype.parseFormat('date("Y-m-d")');var E=D.format(new Date(2013,2,2));expect(E).toBe("2013-03-02")})})})