xdescribe("Ext.Loader",function(){var B=Ext.Loader,A=Ext.app;it("should set single namespace with setPath call",function(){B.setPath("ExtLoaderTestNamespace1","/foo1");expect(ExtLoaderTestNamespace1.foo.Bar).not.toBeUndefined();expect(ns).toBe("ExtLoaderTestNamespace1")});it("should set multiple namespaces with setPath call",function(){B.setPath({ExtLoaderTestNamespace2:"/foo2",ExtLoaderTestNamespace3:"/foo3"});var D=A.getNamespace("ExtLoaderTestNamespace2.foo.Bar"),C=A.getNamespace("ExtLoaderTestNamespace3.foo.Bar");expect(D).toBe("ExtLoaderTestNamespace2");expect(C).toBe("ExtLoaderTestNamespace3")});it("should set namespaces with setConfig object",function(){B.setConfig({paths:{ExtLoaderTestNamespace4:"/foo4"}});var C=A.getNamespace("ExtLoaderTestNamespace4.foo.Bar");expect(C).toBe("ExtLoaderTestNamespace4")});it("should set namespaces with setConfig name/value pair",function(){B.setConfig("paths",{ExtLoaderTestNamespace5:"/foo5"});var C=A.getNamespace("ExtLoaderTestNamespace5.foo.Bar");expect(C).toBe("ExtLoaderTestNamespace5")});it("should allow nested namespaces 1",function(){B.setPath({"ExtLoaderTestNamespace1.foo":"/foobar1"});var C=A.getNamespace("ExtLoaderTestNamespace1.foo.Bar");expect(C).toBe("ExtLoaderTestNamespace1.foo")});it("should allow nested namespaces 2",function(){B.setPath({"ExtLoaderTestNamespace1.foo.Bar":"/foobaroo1"});var C=A.getNamespace("ExtLoaderTestNamespace1.foo.Bar.Baz");expect(C).toBe("ExtLoaderTestNamespace1.foo.Bar")});it("should clean up namespaces (not a test)",function(){var C=B.config.paths;delete C.ExtLoaderTestNamespace1;delete C.ExtLoaderTestNamespace2;delete C.ExtLoaderTestNamespace3;delete C.ExtLoaderTestNamespace4;delete C.ExtLoaderTestNamespace5;A.clearNamespaces()});describe("duplicate namespaces",function(){var D=false,C=false;beforeEach(function(){var E=function(){};E.prototype=Ext;Foo=new E();B.setPath("Foo.spec","resources/spec");B.setPath("Ext.spec","resources/spec");spyOn(B,"loadScriptFile").andCallThrough();Ext.require("Foo.spec.LoaderTest",function(){D=true});Ext.require("Ext.spec.LoaderTest",function(){C=true});waits(20)});afterEach(function(){D=C=false;Foo=null});it("should not load the same file twice",function(){expect(B.loadScriptFile.callCount).toBe(1)});it("should still call each require's callback regardless of duplication",function(){expect(D).toBe(true);expect(C).toBe(true)});it("should not have a non-zero file counter",function(){expect(B.numPendingFiles).toBe(0)})});describe("creating the loadScript src",function(){it("should append the cache-busting query param to the querystring in case there is already a querystring",function(){var C;Ext.Loader.injectScriptElement=function(F,E,D){C=F};Ext.Loader.loadScript({url:"script.js?key=value"});expect(C.indexOf("?key=value&")>-1).toBe(true)})})})