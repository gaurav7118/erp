describe("Ext.data.Batch",function(){var D,G,E,C,F;function A(I,H){I=Ext.String.capitalize(I||"create");var J=new Ext.data.operation[I](H);J.doExecute=function(){return new Ext.data.Request()};return J}function B(H){D=new Ext.data.Batch(H)}afterEach(function(){D=G=E=C=F=null});describe("instantiation",function(){beforeEach(function(){B()});it("should have current equal to null",function(){expect(D.getCurrent()).toBeNull()});it("should have total equal to 0",function(){expect(D.getTotal()).toBe(0)});it("should have isRunning equal to false",function(){expect(D.isRunning()).toBe(false)});it("should have isComplete equal to false",function(){expect(D.isComplete()).toBe(false)});it("should have hasException equal to false",function(){expect(D.hasException()).toBe(false)});it("should have pauseOnException equal to false",function(){expect(D.getPauseOnException()).toBe(false)});it("should have no operations",function(){expect(D.getOperations()).toEqual([])});it("should have no exceptions",function(){expect(D.getExceptions()).toEqual([])})});describe("add",function(){describe("single",function(){beforeEach(function(){G=A();B();D.add(G)});it("should increment total property",function(){expect(D.getTotal()).toBe(1)});it("should set operation batch",function(){expect(G.getBatch()).toBe(D)});it("should add operation to operations array",function(){expect(D.getOperations()[0]).toBe(G)})});describe("arrays",function(){beforeEach(function(){G=A();E=A();C=A();F=[G,E,C];B();D.add(F)});it("should set the total",function(){expect(D.getTotal()).toBe(3)});it("should set the batch on each operation",function(){expect(G.getBatch()).toBe(D);expect(E.getBatch()).toBe(D);expect(C.getBatch()).toBe(D)});it("should add them in order",function(){var H=D.getOperations();expect(H[0]).toBe(G);expect(H[1]).toBe(E);expect(H[2]).toBe(C)})})});describe("start",function(){beforeEach(function(){B()});it("should not run if there are no operations",function(){D.start();expect(D.isRunning()).toBe(false)});it("should set isRunning to true",function(){D.add(A());D.start();expect(D.isRunning()).toBe(true)});it("should execute the operation",function(){G=A();D.add(G);spyOn(G,"execute");D.start();expect(G.execute).toHaveBeenCalled()})});describe("running multiple operations",function(){beforeEach(function(){F=[];for(var H=1;H<=4;++H){F.push(A("destroy",{id:H}))}B();D.add(F)});describe("basic processing",function(){it("should execute in order",function(){var H=[];Ext.Array.forEach(F,function(I){spyOn(I,"execute").andCallFake(function(){H.push(this.getId());this.execute.originalValue.apply(this,arguments);this.setSuccessful(true)})});D.start();expect(H).toEqual([1,2,3,4])});it("should wait until the previous operation completes before continuing",function(){var H=[];Ext.Array.forEach(F,function(I){spyOn(I,"execute").andCallFake(function(){H.push(this.getId());this.execute.originalValue.apply(this,arguments)})});D.start();expect(H).toEqual([1]);F[0].setSuccessful(true);expect(H).toEqual([1,2]);F[1].setSuccessful(true);expect(H).toEqual([1,2,3]);F[2].setSuccessful(true);expect(H).toEqual([1,2,3,4])});it("should be able to run an operation added during the batch start",function(){var H=A();spyOn(H,"execute");D.start();F[0].setSuccessful(true);F[1].setSuccessful(true);D.add(H);F[2].setSuccessful(true);F[3].setSuccessful(true);expect(H.execute).toHaveBeenCalled()});it("should keep track of exceptions and continue on",function(){D.start();F[0].setException("Failed1");F[1].setSuccessful(true);F[2].setSuccessful(true);F[3].setException("Failed2");expect(D.isComplete()).toBe(true);expect(D.getExceptions()).toEqual([F[0],F[3]])})});describe("events",function(){it("should fire the operationcomplete event when an operation completes",function(){var H=jasmine.createSpy();D.on("operationcomplete",H);D.start();F[0].setSuccessful(true);expect(H.mostRecentCall.args[0]).toBe(D);expect(H.mostRecentCall.args[1]).toBe(F[0]);F[1].setSuccessful(true);expect(H.mostRecentCall.args[0]).toBe(D);expect(H.mostRecentCall.args[1]).toBe(F[1])});it("should fire the complete event when we have completed",function(){var H=jasmine.createSpy();D.on("complete",H);D.start();Ext.Array.forEach(F,function(I){I.setSuccessful(true)});expect(H.mostRecentCall.args[0]).toBe(D);expect(H.mostRecentCall.args[1]).toBe(F[3])});it("should fire the exception event when an operation fails",function(){var H=jasmine.createSpy();D.on("exception",H);D.start();F[0].setSuccessful(true);F[1].setException("Failed1");expect(H.mostRecentCall.args[0]).toBe(D);expect(H.mostRecentCall.args[1]).toBe(F[1]);F[2].setSuccessful(true);F[3].setException("Failed2");expect(H.mostRecentCall.args[0]).toBe(D);expect(H.mostRecentCall.args[1]).toBe(F[3])})})});describe("getCurrent",function(){beforeEach(function(){B()});it("should return null if the batch has not started",function(){expect(D.getCurrent()).toBeNull()});it("should return null if the batch is complete",function(){G=A();E=A();D.add([G,E]);D.start();G.setSuccessful(true);E.setSuccessful(true);expect(D.getCurrent()).toBeNull()});it("should return the active operation",function(){G=A();E=A();D.add([G,E]);D.start();expect(D.getCurrent()).toBe(G);G.setSuccessful(true);expect(D.getCurrent()).toBe(E);E.setSuccessful(true)});it("should return the operation even if paused",function(){G=A();E=A();D.add([G,E,A()]);D.start();G.setSuccessful(true);D.pause();expect(D.getCurrent()).toBe(E)})});describe("pause",function(){it("should set isRunning to false",function(){B();D.add(A());D.start();D.pause();expect(D.isRunning()).toBe(false)});it("should not continue running if paused",function(){G=A();E=A();spyOn(E,"execute");B();D.add(G);D.add(E);D.start();D.pause();G.setSuccessful(true);expect(E.execute).not.toHaveBeenCalled()});it("should continue on after we start after pausing",function(){G=A();E=A();spyOn(E,"execute");B();D.add(G);D.add(E);D.start();D.pause();G.setSuccessful(true);D.start();expect(E.execute).toHaveBeenCalled()})});describe("pauseOnException/retry",function(){beforeEach(function(){B({pauseOnException:true})});it("should pause if an operation has an exception",function(){G=A();D.start();G.setException("Failed");expect(D.isRunning()).toBe(false)});it("should have the current item as the failed operation",function(){G=A();D.add(G);D.start();G.setException("Failed");expect(D.getCurrent()).toBe(G)});it("should be able to retry on exception",function(){G=A();D.add(G);D.start();G.setException("Failed");spyOn(G,"execute");D.retry();expect(G.execute).toHaveBeenCalled()})})})