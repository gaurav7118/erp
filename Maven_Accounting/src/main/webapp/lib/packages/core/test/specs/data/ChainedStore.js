describe("Ext.data.ChainedStore",function(){var H={},R,N,P,A,C,Q,B,G,L,I,E;function F(){L.add(B,C,Q,G);P=L.getAt(0);R=L.getAt(1);N=L.getAt(2);A=L.getAt(3)}function O(S,T){if(Ext.isObject(S)){T=S}else{T=T||{};if(!T.email){T.email=S}}return new E(T)}function J(S){S=S||{};L=new Ext.data.Store(Ext.applyIf(S,{asynchronousLoad:false,model:"spec.User"}))}function M(S){I=new Ext.data.ChainedStore(Ext.apply({source:L},S))}function K(S){Ext.Ajax.mockComplete({status:200,responseText:Ext.JSON.encode(S)})}function D(V,U){var S=V.length,T;for(T=0;T<S;++T){expect(U.getAt(T)).toBe(V[T])}}beforeEach(function(){Ext.data.Model.schema.setNamespace("spec");MockAjaxManager.addMethods();B={name:"Ed Spencer",email:"ed@sencha.com",evilness:100,group:"code",old:false,age:25,valid:"yes"};C={name:"Abe Elias",email:"abe@sencha.com",evilness:70,group:"admin",old:false,age:20,valid:"yes"};Q={name:"Aaron Conran",email:"aaron@sencha.com",evilness:5,group:"admin",old:true,age:26,valid:"yes"};G={name:"Tommy Maintz",email:"tommy@sencha.com",evilness:-15,group:"code",old:true,age:70,valid:"yes"};E=Ext.define("spec.User",{extend:"Ext.data.Model",idProperty:"email",fields:[{name:"name",type:"string"},{name:"email",type:"string"},{name:"evilness",type:"int"},{name:"group",type:"string"},{name:"old",type:"boolean"},{name:"valid",type:"string"},{name:"age",type:"int"}]});J();F()});afterEach(function(){MockAjaxManager.removeMethods();Ext.data.Model.schema.clear();Ext.undefine("spec.User");if(L){L.destroy()}I.destroy();E=L=I=null;Ext.data.Model.schema.clear(true)});describe("constructing",function(){it("should inherit the model from the backing store",function(){M();expect(I.getModel()).toBe(E)});it("should have the data from the backing store",function(){M();var U=L.getRange(),V=I.getRange(),S=U.length,T;expect(V.length).toBe(U.length);for(T=0;T<S;++T){expect(V[T]).toBe(U[T])}});it("should not fire a refresh or datachanged event",function(){var S=jasmine.createSpy();M({listeners:{refresh:S,datachanged:S}});expect(S).not.toHaveBeenCalled()});it("should accept an id of a store as the source",function(){var S=new Ext.data.Store({model:"spec.User",storeId:"sourceId"});L="sourceId";M();L=null;expect(I.getSource()).toBe(S);S.destroy()});it("should accept a chained store as the source",function(){M();var S=new Ext.data.ChainedStore({source:I});expect(S.getCount()).toBe(4);expect(S.getModel()).toBe(E);S.destroy()})});it("should not join the records to the store",function(){M();var S=P.joined;expect(S.length).toBe(1);expect(S[0]).toBe(L)});describe("getting records",function(){beforeEach(function(){M();F()});describe("first",function(){it("should return the first record",function(){expect(I.first()).toBe(P)});it("should return the record if there is only 1",function(){I.remove([P,R,A]);expect(I.first()).toBe(N)});it("should return null with an empty store",function(){I.removeAll();expect(I.first()).toBeNull()});it("should be affected by filters",function(){I.getFilters().add({property:"group",value:"admin"});expect(I.first()).toBe(R)})});describe("last",function(){it("should return the last record",function(){expect(I.last()).toBe(A)});it("should return the record if there is only 1",function(){I.remove([P,R,A]);expect(I.last()).toBe(N)});it("should return null with an empty store",function(){I.removeAll();expect(I.last()).toBeNull()});it("should be affected by filters",function(){I.getFilters().add({property:"group",value:"admin"});expect(I.last()).toBe(N)})});describe("getAt",function(){it("should return the record at the specified index",function(){expect(I.getAt(1)).toBe(R)});it("should return null when the index is outside the store bounds",function(){expect(I.getAt(100)).toBe(null)});it("should return null when the store is empty",function(){I.removeAll();expect(I.getAt(0)).toBe(null)})});describe("getById",function(){it("should return the record with the matching id",function(){expect(I.getById("tommy@sencha.com")).toBe(A)});it("should return null if a matching id is not found",function(){expect(I.getById("foo@sencha.com")).toBe(null)});it("should return null when the store is empty",function(){I.removeAll();expect(I.getById("ed@sencha.com")).toBe(null)});it("should ignore filters",function(){I.filter("email","ed@sencha.com");expect(I.getById("aaron@sencha.com")).toBe(N)})});describe("getByInternalId",function(){it("should return the record with the matching id",function(){expect(I.getByInternalId(A.internalId)).toBe(A)});it("should return null if a matching id is not found",function(){expect(I.getByInternalId("foo@sencha.com")).toBe(null)});it("should return null when the store is empty",function(){I.removeAll();expect(I.getByInternalId("ed@sencha.com")).toBe(null)});it("should ignore filters",function(){I.filter("email","ed@sencha.com");expect(I.getByInternalId(N.internalId)).toBe(N)});it("should work correctly if not called before filtering",function(){I.filter("email","ed@sencha.com");expect(I.getByInternalId(N.internalId)).toBe(N)});it("should work correctly if called before & after filtering",function(){expect(I.getByInternalId(N.internalId)).toBe(N);I.filter("email","ed@sencha.com");expect(I.getByInternalId(N.internalId)).toBe(N)})});describe("getRange",function(){it("should default to the full store range",function(){expect(I.getRange()).toEqual([P,R,N,A])});it("should return from the start index",function(){expect(I.getRange(2)).toEqual([N,A])});it("should use the end index, and include it",function(){expect(I.getRange(0,2)).toEqual([P,R,N])});it("should ignore an end index greater than the store range",function(){expect(I.getRange(1,100)).toEqual([R,N,A])})});describe("query",function(){var T,S;it("should return records with group: 'coder'",function(){T=I.query("group","code");expect(T.length).toBe(2);expect(T.contains(P)).toBe(true);expect(T.contains(A)).toBe(true);expect(T.contains(N)).toBe(false);expect(T.contains(R)).toBe(false)});it("should return null if a matching id is not found",function(){S=I.query("group","slackers");expect(S.length).toBe(0)});it("should return null when the store is empty",function(){I.removeAll();T=I.query("group","code");expect(T.length).toBe(0)});it("should ignore filters",function(){I.filter("email","ed@sencha.com");expect(I.getCount()).toBe(1);T=I.query("group","code");expect(T.length).toBe(2);expect(T.contains(P)).toBe(true);expect(T.contains(A)).toBe(true);expect(T.contains(N)).toBe(false);expect(T.contains(R)).toBe(false)})})});describe("sorting",function(){describe("initial values",function(){it("should default to having no sorters",function(){M();expect(I.getSorters().getCount()).toBe(0)});it("should not inherit sorters from the source store",function(){L.sort("age","DESC");M();expect(I.getSorters().getCount()).toBe(0)});it("should have the data in order of the source store by default",function(){L.sort("age","DESC");M();expect(I.getAt(0)).toBe(L.getAt(0));expect(I.getAt(1)).toBe(L.getAt(1));expect(I.getAt(2)).toBe(L.getAt(2));expect(I.getAt(3)).toBe(L.getAt(3))})});describe("sorting the source",function(){it("should not change the sort order in the store",function(){M();L.sort("name","DESC");D([A,P,R,N],L);D([P,R,N,A],I)})});describe("sorting the store",function(){it("should not change the sort order in the source store",function(){M();I.sort("name","DESC");D([A,P,R,N],I);D([P,R,N,A],L)})})});describe("filtering",function(){describe("filtering the source",function(){it("should also filter the store",function(){M();L.filter("group","code");expect(I.getCount()).toBe(2);D(L.getRange(),I)});it("should not affect the store filter collection",function(){M();L.filter("group","code");expect(I.getFilters().getCount()).toBe(0)});it("should also unfilter the store",function(){M();L.filter("group","code");L.getFilters().removeAll();expect(I.getCount()).toBe(4);D(L.getRange(),I)});it("should have a record present in the store when added to the source but filtered out",function(){M();L.filter("group","code");var S=O("foo@sencha.com",{group:"admin"});L.add(S);L.getFilters().removeAll();expect(I.indexOf(S)).toBe(4)});describe("events",function(){var S;beforeEach(function(){S=jasmine.createSpy();M()});afterEach(function(){S=null});it("should fire the refresh event on the store",function(){I.on("refresh",S);L.filter("group","code");expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1)});it("should fire the datachanged event on the store",function(){I.on("datachanged",S);L.filter("group","code");expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1)});it("should not fire the filterchange event",function(){I.on("filterchange",S);L.filter("group","code");expect(S).not.toHaveBeenCalled()});describe("when the source is a chained store",function(){var T;beforeEach(function(){T=new Ext.data.ChainedStore({source:I})});afterEach(function(){T.destroy();T=null});it("should fire the refresh event on the store",function(){T.on("refresh",S);I.filter("group","code");expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1)});it("should fire the datachanged event on the store",function(){T.on("datachanged",S);I.filter("group","code");expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1)});it("should not fire the filterchange event",function(){T.on("filterchange",S);I.filter("group","code");expect(S).not.toHaveBeenCalled()})})})});describe("filtering the store",function(){it("should not filter the source",function(){M();I.filter("group","code");expect(I.getCount()).toBe(2);expect(L.getCount()).toBe(4)});it("should not affect the source filter collection",function(){M();I.filter("group","code");expect(L.getFilters().getCount()).toBe(0)});it("should filter based off source filters when the source is filtered",function(){M();L.filter("group","code");I.filter("name","Tommy");expect(I.getCount()).toBe(1);expect(I.getAt(0)).toBe(A)});it("should apply source filters over current filters",function(){M();I.getFilters().add({property:"age",value:70,operator:"<"});expect(I.getCount()).toBe(3);L.filter("group","admin");expect(I.getCount()).toBe(2);D([R,N],I)});describe("events",function(){it("should fire the refresh event",function(){var S=jasmine.createSpy();M();I.on("refresh",S);I.filter("group","code");expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1)});it("should fire the datachanged event",function(){var S=jasmine.createSpy();M();I.on("datachanged",S);I.filter("group","code");expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1)});it("should fire the filterchange event",function(){var S=jasmine.createSpy();M();I.on("filterchange",S);I.filter("group","code");expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1)});it("should fire the update event on both source and chained Stores",function(){I=new Ext.data.ArrayStore({fields:["f1"],data:[["f1value"]]});var U=new Ext.data.ChainedStore({source:I}),S,T,V=I.getAt(0);I.on("update",function(){S=true});U.on("update",function(){T=true});expect(I.getCount()).toBe(1);expect(U.getCount()).toBe(1);V.set("f1","f1 updated");expect(I.getCount()).toBe(1);expect(U.getCount()).toBe(1);expect(S).toBe(true);expect(T).toBe(true);U.destroy()});it("should NOT fire the update event on the chained Store if the record is filtered out of the source",function(){I=new Ext.data.ArrayStore({fields:["f1"],data:[["f1value"]],filters:{property:"f1",value:"f1Value"}});var U=new Ext.data.ChainedStore({source:I}),S,T,V=I.getAt(0);I.on("update",function(){S=true});U.on("update",function(){T=true});expect(I.getCount()).toBe(1);expect(U.getCount()).toBe(1);V.set("f1","f1 updated");expect(I.getCount()).toBe(0);expect(U.getCount()).toBe(0);expect(S).toBe(true);expect(T).toBeFalsy();U.destroy()})})})});describe("loading",function(){describe("via load",function(){it("should populate the store",function(){L.removeAll();M();L.load();K([C,G,B,Q]);D(L.getRange(),I)});it("should clear any existing data",function(){M();L.load();K([{id:"foo@sencha.com"}]);expect(I.getCount()).toBe(1);expect(I.getAt(0)).toBe(L.getAt(0))});describe("events",function(){it("should not fire the add, remove or clear events",function(){L.removeAll();M();var S=jasmine.createSpy();I.on("add",S);I.on("remove",S);I.on("clear",S);L.load();K([C,G,B,Q]);expect(S).not.toHaveBeenCalled()});it("should relay the beforeload event",function(){var S=spyOn(E.getProxy(),"read").andCallThrough();L.removeAll();M();var T=jasmine.createSpy();I.on("beforeload",T);L.load();K([C,G,B,Q]);expect(T).toHaveBeenCalled();expect(T.mostRecentCall.args[0]).toBe(I);expect(T.mostRecentCall.args[1]).toBe(S.mostRecentCall.args[0])});it("should relay the load event",function(){var S=spyOn(E.getProxy(),"read").andCallThrough();L.removeAll();M();var T=jasmine.createSpy();I.on("load",T);L.load();K([C,G,B,Q]);expect(T).toHaveBeenCalled();expect(T.mostRecentCall.args[0]).toBe(I);expect(T.mostRecentCall.args[1]).toEqual([L.getAt(0),L.getAt(1),L.getAt(2),L.getAt(3)]);expect(T.mostRecentCall.args[2]).toBe(true);expect(T.mostRecentCall.args[3]).toBe(S.mostRecentCall.args[0])});it("should fire the refresh and datachanged event",function(){M();var T=jasmine.createSpy(),S=jasmine.createSpy();I.on("refresh",S);I.on("datachanged",T);L.load();K([C,G,B,Q]);expect(S).toHaveBeenCalled();expect(S.mostRecentCall.args[0]).toBe(I);expect(T).toHaveBeenCalled();expect(T.mostRecentCall.args[0]).toBe(I)})})});describe("via loadData",function(){it("should populate the store",function(){L.removeAll();M();L.loadData([B,G,Q,C]);D(L.getRange(),I)});it("should clear any existing data",function(){M();L.loadData([{id:"foo@sencha.com"}]);expect(I.getCount()).toBe(1);expect(I.getAt(0)).toBe(L.getAt(0))});it("should not fire the add event",function(){L.removeAll();M();var S=jasmine.createSpy();I.on("add",S);L.loadData([B,G,Q,C]);expect(S).not.toHaveBeenCalled()});it("should not fire the remove event",function(){M();var S=jasmine.createSpy();I.on("remove",S);L.loadData([B,G,Q,C]);expect(S).not.toHaveBeenCalled()});it("should fire the refresh and datachanged event",function(){M();var T=jasmine.createSpy(),S=jasmine.createSpy();I.on("refresh",S);I.on("datachanged",T);L.loadData([B,G,Q,C]);expect(S).toHaveBeenCalled();expect(S.mostRecentCall.args[0]).toBe(I);expect(T).toHaveBeenCalled();expect(T.mostRecentCall.args[0]).toBe(I)})});describe("via loadRawData",function(){it("should populate the store",function(){L.removeAll();M();L.loadRawData([B,G,Q,C]);D(L.getRange(),I)});it("should clear any existing data",function(){M();L.loadRawData([{id:"foo@sencha.com"}]);expect(I.getCount()).toBe(1);expect(I.getAt(0)).toBe(L.getAt(0))});it("should not fire the add event",function(){L.removeAll();M();var S=jasmine.createSpy();I.on("add",S);L.loadRawData([B,G,Q,C]);expect(S).not.toHaveBeenCalled()});it("should not fire the remove event",function(){M();var S=jasmine.createSpy();I.on("remove",S);L.loadRawData([B,G,Q,C]);expect(S).not.toHaveBeenCalled()});it("should fire the refresh and datachanged event",function(){M();var T=jasmine.createSpy(),S=jasmine.createSpy();I.on("refresh",S);I.on("datachanged",T);L.loadRawData([B,G,Q,C]);expect(S).toHaveBeenCalled();expect(S.mostRecentCall.args[0]).toBe(I);expect(T).toHaveBeenCalled();expect(T.mostRecentCall.args[0]).toBe(I)})});describe("with sorters",function(){it("should apply sorters from the store",function(){L.removeAll();M();I.sort("name","DESC");L.load();K([C,B,G,Q]);expect(I.getAt(0).id).toBe("tommy@sencha.com");expect(I.getAt(1).id).toBe("ed@sencha.com");expect(I.getAt(2).id).toBe("abe@sencha.com");expect(I.getAt(3).id).toBe("aaron@sencha.com")})});describe("filters",function(){it("should apply filters from the store",function(){L.removeAll();M();I.getFilters().add({property:"group",value:"code"});L.load();K([C,B,G,Q]);expect(I.getCount()).toBe(2);expect(I.getAt(0).id).toBe("ed@sencha.com");expect(I.getAt(1).id).toBe("tommy@sencha.com")})})});describe("adding",function(){beforeEach(function(){M()});describe("adding to the source",function(){it("should also add to the store",function(){var S=L.add({id:"new@sencha.com"})[0];expect(I.getAt(4)).toBe(S)});describe("events",function(){it("should fire the add/datachanged event on the store",function(){var U=jasmine.createSpy(),T=jasmine.createSpy(),V,S;I.on("add",U);I.on("datachanged",T);V=L.add({id:"new@sencha.com"})[0];expect(U).toHaveBeenCalled();S=U.mostRecentCall.args;expect(S[0]).toBe(I);expect(S[1]).toEqual([V]);expect(S[2]).toBe(4);expect(T).toHaveBeenCalled();expect(T.mostRecentCall.args[0]).toBe(I)});it("should fire add on the source, then the store",function(){var S=[];L.on("add",function(){S.push("source")});I.on("add",function(){S.push("store")});L.add({id:"foo@sencha.com"});expect(S).toEqual(["source","store"])})});describe("with sorting",function(){describe("with the source sorted",function(){it("should use the position from the source",function(){L.sort("email");var S=L.add({email:"aaaa@sencha.com"})[0];expect(L.getAt(0)).toBe(S);expect(I.getAt(0)).toBe(S)})});describe("with the store sorted",function(){it("should add to the end of the source and insert into the sorted position in the store",function(){I.sort("email");var S=L.add({email:"bbb@sencha.com"})[0];expect(L.getAt(4)).toBe(S);expect(I.getAt(2)).toBe(S)})});describe("with both sorted",function(){it("should insert into the correct sorted position",function(){I.sort("email");L.sort("email","desc");var S=L.add({email:"aazzon@sencha.com"})[0];expect(L.getAt(3)).toBe(S);expect(I.getAt(1)).toBe(S)})})});describe("with filtering",function(){it("should filter out non-matching records",function(){I.filter("group","admin");var S=L.add({email:"new@sencha.com",group:"code"})[0];expect(I.indexOf(S)).toBe(-1)});it("should include the filtered out record when filters are cleared",function(){I.filter("group","admin");var S=L.add({email:"new@sencha.com",group:"code"})[0];I.getFilters().removeAll();expect(I.getAt(4)).toBe(S)})})});describe("adding to the store",function(){it("should also add the record to the source",function(){var S=I.add({id:"new@sencha.com"})[0];expect(L.getAt(4)).toBe(S)});describe("events",function(){it("should fire the add/datachanged event on the source",function(){var U=jasmine.createSpy(),T=jasmine.createSpy();L.on("add",U);L.on("datachanged",T);var V=I.add({id:"new@sencha.com"})[0],S;expect(U).toHaveBeenCalled();S=U.mostRecentCall.args;expect(S[0]).toBe(L);expect(S[1]).toEqual([V]);expect(S[2]).toBe(4);expect(T).toHaveBeenCalled();expect(T.mostRecentCall.args[0]).toBe(L)});it("should fire add on the source, then the store",function(){var S=[];L.on("add",function(){S.push("source")});I.on("add",function(){S.push("store")});I.add({id:"foo@sencha.com"});expect(S).toEqual(["source","store"])})});describe("with sorting",function(){describe("with the source sorted",function(){it("should append to the store and add to the sorted position in the source",function(){L.sort("email");var S=I.add({email:"aaaa@sencha.com"})[0];expect(L.getAt(0)).toBe(S);expect(I.getAt(4)).toBe(S)})});describe("with the store sorted",function(){it("should append to the source and add to the sorted position in the store",function(){I.sort("email");var S=L.add({email:"aaaa@sencha.com"})[0];expect(I.getAt(0)).toBe(S)})});describe("with both sorted",function(){it("should insert into the correct sorted position",function(){I.sort("email");L.sort("email","desc");var S=L.add({email:"aazzon@sencha.com"})[0];expect(L.getAt(3)).toBe(S);expect(I.getAt(1)).toBe(S)})})})})});describe("inserting",function(){beforeEach(function(){M()});describe("inserting in the source",function(){it("should also add to the store",function(){var S=L.insert(0,{id:"new@sencha.com"})[0];expect(L.getAt(0)).toBe(S);expect(I.getAt(0)).toBe(S)});describe("events",function(){it("should fire the add/datachanged event on the store",function(){var U=jasmine.createSpy(),T=jasmine.createSpy(),V,S;I.on("add",U);I.on("datachanged",T);V=L.insert(0,{id:"new@sencha.com"})[0];expect(U).toHaveBeenCalled();S=U.mostRecentCall.args;expect(S[0]).toBe(I);expect(S[1]).toEqual([V]);expect(S[2]).toBe(0);expect(T).toHaveBeenCalled();expect(T.mostRecentCall.args[0]).toBe(I)});it("should fire add on the source, then the store",function(){var S=[];L.on("add",function(){S.push("source")});I.on("add",function(){S.push("store")});L.insert(0,{id:"foo@sencha.com"});expect(S).toEqual(["source","store"])})});describe("with sorting",function(){describe("with the source sorted",function(){it("should use the position from the source",function(){L.sort("email");var S=L.insert(2,{email:"aaaa@sencha.com"})[0];expect(L.getAt(0)).toBe(S);expect(I.getAt(0)).toBe(S)})});describe("with the store sorted",function(){it("should insert into the specified position in the source and the sorted position in the store",function(){I.sort("email");var S=L.insert(3,{email:"aaaa@sencha.com"})[0];expect(L.getAt(3)).toBe(S);expect(I.getAt(0)).toBe(S)})});describe("with both sorted",function(){it("should insert into the sorted position in both stores",function(){I.sort("email");L.sort("email","desc");var S=L.insert(3,{email:"aazzon@sencha.com"})[0];expect(L.getAt(3)).toBe(S);expect(I.getAt(1)).toBe(S)})})});describe("with filtering",function(){it("should filter out non-matching records",function(){I.filter("group","admin");var S=L.insert(0,{email:"new@sencha.com",group:"code"})[0];expect(I.indexOf(S)).toBe(-1)});it("should include the filtered out record when filters are cleared",function(){I.filter("group","admin");var S=L.insert(0,{email:"new@sencha.com",group:"code"})[0];I.getFilters().removeAll();expect(L.getAt(0)).toBe(S)});it("should position the item correctly when filtered out",function(){I.filter("group","admin");var S=L.insert(2,{email:"new@sencha.com",group:"code"})[0];I.getFilters().removeAll();expect(I.getAt(2)).toBe(S)})})});describe("inserting in the store",function(){it("should also add the record to the source",function(){var S=I.insert(0,{id:"new@sencha.com"})[0];expect(L.getAt(0)).toBe(S)});describe("events",function(){it("should fire the add/datachanged event on the source",function(){var U=jasmine.createSpy(),T=jasmine.createSpy();L.on("add",U);L.on("datachanged",T);var V=I.insert(2,{id:"new@sencha.com"})[0],S;expect(U).toHaveBeenCalled();S=U.mostRecentCall.args;expect(S[0]).toBe(L);expect(S[1]).toEqual([V]);expect(S[2]).toBe(2);expect(T).toHaveBeenCalled();expect(T.mostRecentCall.args[0]).toBe(L)});it("should fire add on the source, then the store",function(){var S=[];L.on("add",function(){S.push("source")});I.on("add",function(){S.push("store")});I.insert(1,{id:"foo@sencha.com"});expect(S).toEqual(["source","store"])})});describe("with sorting",function(){describe("with the source sorted",function(){it("should insert into the correct sorted position in the source and use the specified position in the store",function(){L.sort("email");var S=I.insert(2,{email:"aaaa@sencha.com"})[0];expect(L.getAt(0)).toBe(S);expect(I.getAt(2)).toBe(S)})});describe("with the store sorted",function(){it("should insert into the specified position in the source and the sorted position in the store",function(){I.sort("email");var S=I.insert(3,{email:"aaaa@sencha.com"})[0];expect(L.getAt(3)).toBe(S);expect(I.getAt(0)).toBe(S)})});describe("with both sorted",function(){it("should insert into the sorted position in both stores",function(){I.sort("email");L.sort("email","desc");var S=I.insert(3,{email:"aazzon@sencha.com"})[0];expect(L.getAt(3)).toBe(S);expect(I.getAt(1)).toBe(S)})})})})});describe("removing",function(){beforeEach(function(){M()});describe("remove",function(){describe("removing from the source",function(){it("should also remove from the store",function(){L.removeAt(0);expect(I.indexOf(P)).toBe(-1)});it("should fire the remove/datachanged event on the store",function(){var U=jasmine.createSpy(),T=jasmine.createSpy(),S;I.on("remove",U);I.on("datachanged",T);I.remove(P);expect(U).toHaveBeenCalled();S=U.mostRecentCall.args;expect(S[0]).toBe(I);expect(S[1]).toEqual([P]);expect(S[2]).toBe(0);expect(T).toHaveBeenCalled();expect(T.mostRecentCall.args[0]).toBe(I)});it("should fire remove on the source, then the store",function(){var S=[];L.on("remove",function(){S.push("source")});I.on("remove",function(){S.push("store")});L.removeAt(0);expect(S).toEqual(["source","store"])});describe("with filtering",function(){it("should remove from the store when record is filtered out",function(){I.filter("group","admin");L.remove(P);I.getFilters().removeAll();expect(I.indexOf(P)).toBe(-1)})})});describe("removing from the store",function(){it("should also remove the record from the source",function(){I.remove(P);expect(L.indexOf(P)).toBe(-1)});it("should fire the add/datachanged event on the source",function(){var U=jasmine.createSpy(),T=jasmine.createSpy(),S;L.on("remove",U);L.on("datachanged",T);I.remove(P);expect(U).toHaveBeenCalled();S=U.mostRecentCall.args;expect(S[0]).toBe(L);expect(S[1]).toEqual([P]);expect(S[2]).toBe(0);expect(T).toHaveBeenCalled();expect(T.mostRecentCall.args[0]).toBe(L)});it("should fire add on the source, then the store",function(){var S=[];L.on("remove",function(){S.push("source")});I.on("remove",function(){S.push("store")});I.remove(P);expect(S).toEqual(["source","store"])})})});describe("removeAll",function(){it("should not fire a remove event",function(){var S=jasmine.createSpy();I.on("remove",S);L.removeAll();expect(S).not.toHaveBeenCalled()});it("should fire the clear event",function(){var S=jasmine.createSpy();I.on("clear",S);L.removeAll();expect(S).toHaveBeenCalled();expect(S.mostRecentCall.args[0]).toBe(I)});it("should fire the datachanged event",function(){var S=jasmine.createSpy();I.on("datachanged",S);L.removeAll();expect(S).toHaveBeenCalled();expect(S.mostRecentCall.args[0]).toBe(I)});describe("with silent: true",function(){it("should not fire the clear event",function(){var S=jasmine.createSpy();I.on("clear",S);L.removeAll(true);expect(S).not.toHaveBeenCalled()});it("should not fire the datachanged event",function(){var S=jasmine.createSpy();I.on("datachanged",S);L.removeAll(true);expect(S).not.toHaveBeenCalled()})})})});describe("updating",function(){var S;beforeEach(function(){M();S=jasmine.createSpy()});describe("via set",function(){it("should fire the update event on the source & pass the store, record, type & modified fields",function(){var T;L.on("update",S);R.set("name","foo");expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1);T=S.mostRecentCall.args;expect(T[0]).toBe(L);expect(T[1]).toBe(R);expect(T[2]).toBe(Ext.data.Model.EDIT);expect(T[3]).toEqual(["name"])});it("should fire the update event on the store & pass the store, record, type & modified fields",function(){var T;I.on("update",S);R.set("name","foo");expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1);T=S.mostRecentCall.args;expect(T[0]).toBe(I);expect(T[1]).toBe(R);expect(T[2]).toBe(Ext.data.Model.EDIT);expect(T[3]).toEqual(["name"])});it("should fire the event on the source first, then the store",function(){var T=[];L.on("update",function(){T.push("source")});I.on("update",function(){T.push("store")});P.set("name","foo");expect(T).toEqual(["source","store"])});it("should not fire the event if the record is filtered out of the store",function(){L.filter("name","Aaron");I.on("update",S);R.set("name","Foo");expect(S).not.toHaveBeenCalled()})});describe("via commit",function(){it("should fire the update event on the source & pass the store, record, type & modified fields",function(){var T;R.set("name","foo");L.on("update",S);R.commit();expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1);T=S.mostRecentCall.args;expect(T[0]).toBe(L);expect(T[1]).toBe(R);expect(T[2]).toBe(Ext.data.Model.COMMIT);expect(T[3]).toBeNull()});it("should fire the update event on the store & pass the store, record, type & modified fields",function(){var T;R.set("name","foo");I.on("update",S);R.commit();expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1);T=S.mostRecentCall.args;expect(T[0]).toBe(I);expect(T[1]).toBe(R);expect(T[2]).toBe(Ext.data.Model.COMMIT);expect(T[3]).toBeNull()});it("should fire the event on the source first, then the store",function(){var T=[];P.set("name","foo");L.on("update",function(){T.push("source")});I.on("update",function(){T.push("store")});P.commit();expect(T).toEqual(["source","store"])});it("should not fire the event if the record is filtered out of the store",function(){L.filter("name","Aaron");R.set("name","Foo");I.on("update",S);R.commit();expect(S).not.toHaveBeenCalled()})});describe("via reject",function(){it("should fire the update event on the source & pass the store, record, type & modified fields",function(){var T;R.set("name","foo");L.on("update",S);R.reject();expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1);T=S.mostRecentCall.args;expect(T[0]).toBe(L);expect(T[1]).toBe(R);expect(T[2]).toBe(Ext.data.Model.REJECT);expect(T[3]).toBeNull()});it("should fire the update event on the store & pass the store, record, type & modified fields",function(){var T;R.set("name","foo");I.on("update",S);R.reject();expect(S).toHaveBeenCalled();expect(S.callCount).toBe(1);T=S.mostRecentCall.args;expect(T[0]).toBe(I);expect(T[1]).toBe(R);expect(T[2]).toBe(Ext.data.Model.REJECT);expect(T[3]).toBeNull()});it("should fire the event on the source first, then the store",function(){var T=[];P.set("name","foo");L.on("update",function(){T.push("source")});I.on("update",function(){T.push("store")});P.reject();expect(T).toEqual(["source","store"])});it("should not fire the event if the record is filtered out of the store",function(){L.filter("name","Aaron");R.set("name","Foo");I.on("update",S);R.reject();expect(S).not.toHaveBeenCalled()})})});describe("misc",function(){it("should allow adding when chained to an associated store and the chained store is sorted",function(){var U=Ext.define("spec.Order",{extend:"Ext.data.Model",fields:["id"]});var S=Ext.define("spec.OrderItem",{extend:"Ext.data.Model",fields:["id",{name:"orderId",reference:"Order"}]});var T=new Ext.data.Store({model:U});T.loadRawData([{id:1,orderItems:[{id:1,orderId:1},{id:3,orderId:1}]}]);L=T.first().orderItems();M({sorters:["id"]});var V=L.add({id:2})[0];expect(I.getAt(0)).toBe(L.getById(1));expect(I.getAt(1)).toBe(L.getById(2));expect(I.getAt(2)).toBe(L.getById(3));Ext.undefine("spec.Order");Ext.undefine("spec.OrderItem")})})})