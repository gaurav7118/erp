describe("Ext.data.Connection",function(){var A,B,C,D;beforeEach(function(){MockAjaxManager.addMethods();B=function(E){E=E||{};C=new Ext.data.Connection(E)};A=Ext.asap;Ext.asap=function(F,E,G){if(E!=null||G!=null){F=Ext.Function.bind(F,E,G)}F()}});afterEach(function(){Ext.asap=A;MockAjaxManager.removeMethods();D=C=B=A=null});describe("beforerequest",function(){it("should fire a beforerequest event",function(){B();var F={fn:Ext.emptyFn},E={url:"foo"};spyOn(F,"fn");C.on("beforerequest",F.fn);C.request(E);expect(F.fn).toHaveBeenCalled()});it("should abort the request if false is returned",function(){B();C.on("beforerequest",function(){return false});D=C.request({url:"foo"});expect(Ext.promise.Promise.is(D)).toBe(true)});it("should fire the callback with scope even if we abort",function(){B();var G={fn:function(){F=this}},E,F;spyOn(G,"fn").andCallThrough();E={url:"foo",callback:G.fn,scope:G};C.on("beforerequest",function(){return false});C.request(E);expect(G.fn).toHaveBeenCalledWith(E,undefined,undefined);expect(F).toEqual(G)})});describe("method",function(){it("should always use POST if specified in the options",function(){B();D=C.request({url:"foo",method:"POST"});expect(D.xhr.ajaxOptions.method).toEqual("POST")});it("should always use GET if specified in the options",function(){B();D=C.request({url:"foo",method:"GET"});expect(D.xhr.ajaxOptions.method).toEqual("GET")});it("should use the class default if specified",function(){B({method:"POST"});D=C.request({url:"foo"});expect(D.xhr.ajaxOptions.method).toEqual("POST")});it("should default to POST if we specify jsonData",function(){B();D=C.request({url:"foo",jsonData:"json"});expect(D.xhr.ajaxOptions.method).toEqual("POST")});it("should default to POST if we specify xmlData",function(){B();D=C.request({url:"foo",xmlData:"xml"});expect(D.xhr.ajaxOptions.method).toEqual("POST")});it("should default to POST if we specify rawData",function(){B();D=C.request({url:"foo",rawData:"raw"});expect(D.xhr.ajaxOptions.method).toEqual("POST")});it("should default to POST if we specify params",function(){B();D=C.request({url:"foo",params:{foo:"bar"}});expect(D.xhr.ajaxOptions.method).toEqual("POST")});it("should default to POST if we specify extraParams",function(){B({extraParams:{foo:"bar"}});D=C.request({url:"foo"});expect(D.xhr.ajaxOptions.method).toEqual("POST")})});describe("url",function(){it("should throw an exception if no url is specified",function(){B();expect(function(){C.request()}).toRaiseExtError("No URL specified")});it("should use the url specified in the config",function(){B();D=C.request({disableCaching:false,url:"foo"});expect(D.xhr.ajaxOptions.url).toEqual("foo")});it("should default to the connection url if one isn't specified in the config",function(){B({url:"bar"});D=C.request({disableCaching:false});expect(D.xhr.ajaxOptions.url).toEqual("bar")});it("should put any urlParams in the url",function(){B();D=C.request({disableCaching:false,url:"foo",urlParams:{x:1,y:"a"}});expect(D.xhr.ajaxOptions.url).toEqual("foo?x=1&y=a")});it("should put params in the url if we specify method GET",function(){B();D=C.request({disableCaching:false,url:"foo",params:{x:"a",y:"b"},method:"GET"});expect(D.xhr.ajaxOptions.url).toEqual("foo?x=a&y=b")});it("should put the params in the url if we have jsonData",function(){B();D=C.request({disableCaching:false,url:"foo",jsonData:"asdf",params:{x:"a",y:"b"}});expect(D.xhr.ajaxOptions.url).toEqual("foo?x=a&y=b")});it("should put the params in the url if we have xmlData",function(){B();D=C.request({disableCaching:false,url:"foo",xmlData:"xml",params:{x:"a",y:"b"}});expect(D.xhr.ajaxOptions.url).toEqual("foo?x=a&y=b")});it("should put the params in the url if we have rawData",function(){B();D=C.request({disableCaching:false,url:"foo",rawData:"asdf",params:{x:"a",y:"b"}});expect(D.xhr.ajaxOptions.url).toEqual("foo?x=a&y=b")});it("should allow for a function to be passed",function(){B();D=C.request({disableCaching:false,url:function(){return"foo"}});expect(D.xhr.ajaxOptions.url).toEqual("foo")});it("should use the passed scope and should have the options passed",function(){B();var G={},E={url:function(){F=this;return"foo;"},scope:G,disableCaching:false},F;spyOn(E,"url").andCallThrough();C.request(E);expect(E.url).toHaveBeenCalledWith(E);expect(F).toEqual(G)})});describe("caching",function(){it("should disable caching by default",function(){B();D=C.request({url:"foo"});expect(D.xhr.ajaxOptions.url).toMatch(/foo\?_dc=\d+/)});it("should only include caching when the method is GET",function(){B();D=C.request({url:"foo",method:"POST"});expect(D.xhr.ajaxOptions.url).toEqual("foo")});it("should not include caching if set to false",function(){B();D=C.request({url:"foo",disableCaching:false});expect(D.xhr.ajaxOptions.url).toEqual("foo")});it("should use the default caching if not specified",function(){B({disableCaching:false});D=C.request({url:"foo"});expect(D.xhr.ajaxOptions.url).toEqual("foo")});it("should respect the cache param name",function(){B();D=C.request({url:"foo",disableCachingParam:"_bar"});expect(D.xhr.ajaxOptions.url).toMatch(/foo\?_bar=\d+/)});it("should use the default cache param name if not specified",function(){B({disableCachingParam:"_bar"});D=C.request({url:"foo"});expect(D.xhr.ajaxOptions.url).toMatch(/foo\?_bar=\d+/)})});describe("params",function(){describe("urlParams",function(){it("should add urlParams to the url",function(){B();D=C.request({url:"foo",disableCaching:false,urlParams:"a=b&x=y"});expect(D.xhr.ajaxOptions.url).toEqual("foo?a=b&x=y")});it("should encode any non-primitive value",function(){B();D=C.request({url:"foo",disableCaching:false,urlParams:{a:"b",x:"y"}});expect(D.xhr.ajaxOptions.url).toEqual("foo?a=b&x=y")})});describe("params",function(){it("should pass params to the request",function(){B();D=C.request({url:"foo",params:"foo=bar"});expect(D.xhr.ajaxOptions.data).toEqual("foo=bar")});it("should encode any non primitive value",function(){B();D=C.request({url:"foo",params:{a:"b",x:"y"}});expect(D.xhr.ajaxOptions.data).toEqual("a=b&x=y")});it("should allow a function to be passed",function(){B();D=C.request({url:"foo",params:function(){return"x=y"}});expect(D.xhr.ajaxOptions.data).toEqual("x=y")});it("should use the passed scope and should have the options passed",function(){B();var G={},E={url:"foo",params:function(){F=this;return"foo;"},scope:G},F;spyOn(E,"params").andCallThrough();C.request(E);expect(E.params).toHaveBeenCalledWith(E);expect(F).toEqual(G)})});describe("extraParams",function(){it("should get appended to the params",function(){B({extraParams:{x:"y"}});D=C.request({url:"foo",params:"a=b"});expect(D.xhr.ajaxOptions.data).toEqual("a=b&x=y")});it("should get appended even if we have no params",function(){B({extraParams:{x:"y"}});D=C.request({url:"foo"});expect(D.xhr.ajaxOptions.data).toEqual("x=y")})})});describe("data",function(){it("should use rawData",function(){B();D=C.request({url:"foo",rawData:"raw"});expect(D.xhr.ajaxOptions.data).toEqual("raw")});it("should give rawData precedence",function(){B();D=C.request({url:"foo",rawData:"raw",jsonData:"json"});expect(D.xhr.ajaxOptions.data).toEqual("raw")});it("should use jsonData",function(){B();D=C.request({url:"foo",jsonData:"json"});expect(D.xhr.ajaxOptions.data).toEqual("json")});it("should encode non-primitive json",function(){B();D=C.request({url:"foo",jsonData:{x:"y"}});expect(D.xhr.ajaxOptions.data).toEqual('{"x":"y"}')});it("should use xmlData",function(){B();D=C.request({url:"foo",xmlData:"xml"});expect(D.xhr.ajaxOptions.data).toEqual("xml")});it("should have data take precedence over params",function(){B();D=C.request({url:"foo",rawData:"data",params:"x=y"});expect(D.xhr.ajaxOptions.data).toEqual("data")})});describe("username/password",function(){it("should not send if there is no username",function(){B();D=C.request({url:"foo"});expect(D.xhr.ajaxOptions.username).toBeUndefined();expect(D.xhr.ajaxOptions.password).toBeUndefined()});it("should pass the username/password",function(){B();D=C.request({url:"foo",username:"evan",password:"javascript"});expect(D.xhr.ajaxOptions.username).toEqual("evan");expect(D.xhr.ajaxOptions.password).toEqual("javascript")});it("should default to username/password specified on the object",function(){B({username:"evan",password:"javascript"});D=C.request({url:"foo"});expect(D.xhr.ajaxOptions.username).toEqual("evan");expect(D.xhr.ajaxOptions.password).toEqual("javascript")})});describe("async",function(){it("should default to true",function(){B();D=C.request({url:"foo"});expect(D.xhr.ajaxOptions.async).toBeTruthy()});it("should use whatever is specified in the options",function(){B();var E=C.request({url:"foo",async:false});expect(E.request.async).toBeFalsy()});it("should give precedence to the value in the options",function(){B({async:false});D=C.request({url:"foo",async:true});expect(D.xhr.ajaxOptions.async).toBeTruthy()});it("should fall back on the instance default",function(){B({async:false});var E=C.request({url:"foo"});expect(E.request.async).toBeFalsy()})});describe("headers",function(){describe("defaultXhrHeader",function(){it("should use the defaultXhrHeader by default",function(){B();D=C.request({url:"foo"});expect(D.xhr.headers["X-Requested-With"]).toEqual("XMLHttpRequest")});it("should not attach the default header if set to false",function(){B({useDefaultXhrHeader:false});D=C.request({url:"foo"});expect(D.xhr.headers["X-Requested-With"]).toBeUndefined()});it("should not attach the default header if explicitly specified in the headers",function(){B();D=C.request({url:"foo",headers:{"X-Requested-With":"header"}});expect(D.xhr.headers["X-Requested-With"]).toEqual("header")});it("should use the defaultXhrHeader option",function(){B({defaultXhrHeader:"bar"});D=C.request({url:"foo"});expect(D.xhr.headers["X-Requested-With"]).toEqual("bar")});it("should have the request option take precedence over the class option",function(){B({useDefaultXhrHeader:true});D=C.request({url:"foo",useDefaultXhrHeader:false});expect(D.xhr.headers["X-Requested-With"]).toBeUndefined()})});describe("content type",function(){it("should use the content type if explicitly specified",function(){B();D=C.request({url:"foo",headers:{"Content-Type":"type"}});expect(D.xhr.headers["Content-Type"]).toEqual("type")});it("should not set the content type if we have no data/params",function(){B();D=C.request({url:"foo"});expect(D.xhr.headers["Content-Type"]).toBeUndefined()});it("should not set the content type if we explicitly set null",function(){B();D=C.request({url:"foo",rawData:"raw",headers:{"Content-Type":null}});expect(D.xhr.headers["Content-Type"]).toBeUndefined()});it("should not set the content type if we explicitly set undefined",function(){B();D=C.request({url:"foo",rawData:"raw",headers:{"Content-Type":undefined}});expect(D.xhr.headers["Content-Type"]).toBeUndefined()});it("should use text/plain if we have rawData",function(){B();D=C.request({url:"foo",rawData:"raw"});expect(D.xhr.headers["Content-Type"]).toEqual("text/plain")});it("should use text/xml if we have xmlData",function(){B();D=C.request({url:"foo",xmlData:"xml"});expect(D.xhr.headers["Content-Type"]).toEqual("text/xml")});it("should use application/json if we have jsonData",function(){B();D=C.request({url:"foo",jsonData:"json"});expect(D.xhr.headers["Content-Type"]).toEqual("application/json")});it("should use the default content type if we have params and no data",function(){B();D=C.request({url:"foo",params:"x=y"});expect(D.xhr.headers["Content-Type"]).toEqual("application/x-www-form-urlencoded; charset=UTF-8")});it("should use the defaultPostHeader",function(){B({defaultPostHeader:"header"});D=C.request({url:"foo",params:"x=y"});expect(D.xhr.headers["Content-Type"]).toEqual("header")})});describe("normal headers",function(){beforeEach(function(){B({useDefaultXhrHeader:false})});it("should apply no headers if none are passed",function(){D=C.request({url:"foo"});expect(D.xhr.headers).toEqual({})});it("should apply any headers",function(){D=C.request({url:"foo",headers:{a:"a",b:"b"}});expect(D.xhr.headers.a).toEqual("a");expect(D.xhr.headers.b).toEqual("b")})});describe("defaultHeaders",function(){beforeEach(function(){B({useDefaultXhrHeader:false,defaultHeaders:{a:"a",b:"b"}})});it("should apply any defaultHeaders even if no headers are passed",function(){D=C.request({url:"foo"});expect(D.xhr.headers.a).toEqual("a");expect(D.xhr.headers.b).toEqual("b")});it("should always have headers take precedence",function(){D=C.request({url:"foo",headers:{a:"x",b:"y"}});expect(D.xhr.headers.a).toEqual("x");expect(D.xhr.headers.b).toEqual("y")});it("should combine headers/defaults",function(){D=C.request({url:"foo",headers:{x:"x",y:"y"}});expect(D.xhr.headers.a).toEqual("a");expect(D.xhr.headers.b).toEqual("b");expect(D.xhr.headers.x).toEqual("x");expect(D.xhr.headers.y).toEqual("y")})})});describe("isLoading",function(){it("should return false if no requests have been made",function(){B();expect(C.isLoading()).toBe(false)});it("should use the most recent request if one is not passed",function(){B();C.request({url:"foo"});expect(C.isLoading()).toBe(true)});it("should return false if the most recent request has loaded",function(){B();D=C.request({url:"foo"});C.mockComplete({status:200});expect(C.isLoading()).toBe(false)});it("should return true if the request is loading",function(){B();D=C.request({url:"foo"});expect(C.isLoading(D)).toBe(true)});it("should return false if the request has loaded",function(){B();D=C.request({url:"foo"});C.mockComplete({status:200});expect(C.isLoading(D)).toBe(false)});it("should return false if the request has been aborted",function(){B();D=C.request({url:"foo"});C.abort(D);expect(C.isLoading(D)).toBe(false)})});describe("aborting",function(){it("should abort a specific request",function(){B();D=C.request({url:"foo"});C.abort(D);expect(D.aborted).toBe(true)});it("should abort the most recent request if a specific one isn't specified",function(){B();var F=C.request({url:"r1"});var E=C.request({url:"r2"});C.abort();expect(F.aborted).not.toBe(true);expect(E.aborted).toBe(true)});it("should fire failure/callback",function(){B();var F={fn:Ext.emptyFn},E=spyOn(F,"fn");D=C.request({url:"foo",failure:F.fn,callback:F.fn});C.abort(D);expect(E.callCount).toEqual(2)});it("should set options in the response",function(){var E,F,G={fn:function(H){E=H.status;F=H.statusText}};B();D=C.request({url:"foo",failure:G.fn});C.abort(D);expect(E).toEqual(-1);expect(F).toEqual("transaction aborted")});it("should fire the requestexception event when aborted",function(){var E=jasmine.createSpy("request aborted");B();C.on("requestexception",E);D=C.request({url:"foo"});C.abort(D);expect(E).toHaveBeenCalled()})});describe("abortAll",function(){it("should do nothing if there's no active requests",function(){B();D=C.request({url:"foo"});C.mockComplete({status:200});C.abortAll();expect(D.aborted).toBeFalsy()});it("should abort all active requests",function(){B();var F=C.request({url:"r1"});var E=C.request({url:"r2"});C.abortAll();expect(F.aborted).toBe(true);expect(E.aborted).toBe(true)})});describe("timeout",function(){it("should timeout if the request runs longer than the timeout period",function(){B();D=C.request({url:"foo",timeout:1});waitsFor(function(){return D.timedout===true},"timeout never reached")});it("should not fire the timeout if the request succeeds within the period",function(){var E=jasmine.createSpy("request failure");runs(function(){B();D=C.request({url:"foo",timeout:1,failure:E});D.xhr.complete({status:200})});waits(1);runs(function(){expect(E).not.toHaveBeenCalled()})});it("should fire failure/callback",function(){var E=jasmine.createSpy("failure and callback");runs(function(){B();D=C.request({url:"foo",timeout:1,failure:E,callback:E})});waitsFor(function(){return E.callCount===2},"fn was never called");runs(function(){expect(E.callCount).toBe(2)})});it("should set the options on the response",function(){var E,F;B();D=C.request({url:"foo",timeout:1,failure:function(G){E=G.status;F=G.statusText}});waitsFor(function(){return E===0&&F==="communication failure"},"options in response wasn't set")});it("should fire the requestexception event when timed out",function(){var E=jasmine.createSpy("request timed out");B();C.on("requestexception",E);D=C.request({url:"foo",timeout:1});waits(10);runs(function(){expect(E).toHaveBeenCalled()})})});describe("successful requests",function(){beforeEach(function(){B()});it("should fire the success handler on a successful request",function(){var F={fn:function(){E=this}},E;spyOn(F,"fn").andCallThrough();D=C.request({url:"foo",success:F.fn,scope:F});C.mockComplete({status:200});expect(F.fn).toHaveBeenCalled();expect(E).toEqual(F)});it("should fire the callback",function(){var F={fn:function(){E=this}},E;spyOn(F,"fn").andCallThrough();D=C.request({url:"foo",callback:F.fn,scope:F});C.mockComplete({status:200});expect(F.fn).toHaveBeenCalled();expect(E).toEqual(F)});it("should fire the requestcomplete event",function(){var F={fn:Ext.emptyFn},E;spyOn(F,"fn");C.on("requestcomplete",F.fn);D=C.request({url:"foo",callback:F.fn,scope:F});C.mockComplete({status:200});expect(F.fn).toHaveBeenCalled()});it("should copy properties to response",function(){var E={};D=C.request({url:"foo",success:function(F){E.statusText=F.statusText;E.status=F.status;E.responseText=F.responseText;E.responseXML=F.responseXML}});C.mockComplete({status:200,statusText:"statusText",responseText:"response",responseXML:{}});expect(E.statusText).toEqual("statusText");expect(E.status).toEqual(200);expect(E.responseText).toEqual("response");expect(E.responseXML).toEqual({})});it("should not fire the requestexception event",function(){var E=jasmine.createSpy("request successful");C.on("requestexception",E);D=C.request({url:"foo"});C.mockComplete({status:200});expect(E).not.toHaveBeenCalled()});describe("response headers",function(){var E;beforeEach(function(){C.request({url:"foo",success:function(F){E=F}});C.mockComplete({status:200,statusText:"statusText",responseText:"response",responseHeaders:{foo:"bar",baz:"qux"},responseXML:{}})});afterEach(function(){E=null});it("should have getAllResponseHeaders method",function(){var F=E.getAllResponseHeaders();expect(F).toEqual({foo:"bar",baz:"qux"})});it("should have getResponseHeader method",function(){var F=E.getResponseHeader("FOO");expect(F).toBe("bar")})})});describe("failures",function(){beforeEach(function(){B()});it("should fire the failure handler on a failed request",function(){var F={fn:function(){E=this}},E;spyOn(F,"fn").andCallThrough();D=C.request({url:"foo",failure:F.fn,scope:F});C.mockComplete({status:404});expect(F.fn).toHaveBeenCalled();expect(E).toEqual(F)});it("should fire the callback",function(){var F={fn:function(){E=this}},E;spyOn(F,"fn").andCallThrough();D=C.request({url:"foo",callback:F.fn,scope:F});C.mockComplete({status:404});expect(F.fn).toHaveBeenCalled();expect(E).toEqual(F)});it("should fire the requestexception event",function(){var F={fn:Ext.emptyFn},E;spyOn(F,"fn");C.on("requestexception",F.fn);D=C.request({url:"foo",callback:F.fn,scope:F});C.mockComplete({status:404});expect(F.fn).toHaveBeenCalled()});describe("response headers",function(){var E;beforeEach(function(){C.request({url:"foo",failure:function(F){E=F}});C.mockComplete({status:404,statusText:"statusText",responseText:"response",responseHeaders:{foo:"bar",baz:"qux"},responseXML:{}})});afterEach(function(){E=null});it("should have getAllResponseHeaders method",function(){var F=E.getAllResponseHeaders();expect(F).toEqual({foo:"bar",baz:"qux"})});it("should have getResponseHeader method",function(){var F=E.getResponseHeader("FOO");expect(F).toBe("bar")})})});xdescribe("uploads",function(){var J,F,I;function E(K){J=document.createElement("form");if(K){Ext.fly(J).set(K)}F=spyOn(J,"submit")}function H(K){K=Ext.apply({url:"frobbe",form:J,isUpload:true},K);I=C.request(K);return I}beforeEach(function(){B()});afterEach(function(){if(I){I.destroy()}if(J){J.submit=null;Ext.removeNode(J)}J=F=I=null});describe("creating",function(){it("should create Form request when isUpload flag is set",function(){E();H();expect(I instanceof Ext.data.request.Form).toBe(true)});it("should create Form request when form has multipart enoding",function(){E({isUpload:false,enctype:"multipart/form-data"});H();expect(I instanceof Ext.data.request.Form).toBe(true)})});describe("submitting",function(){describe("params",function(){var K;beforeEach(function(){E();F.andCallFake(function(){var N=this.childNodes;K=[];for(var M=0,L=N.length;M<L;M++){K[M]={name:N[M].getAttribute("name"),value:N[M].getAttribute("value")}}})});afterEach(function(){K=null});it("should pass params as hidden input fields",function(){H({params:{foo:"bar"}});expect(K[0].name).toBe("foo");expect(K[0].value).toBe("bar")});it("should pass array params",function(){H({params:{frobbe:["throbbe","durgle"]}});expect(K[0].name).toBe("frobbe");expect(K[0].value).toBe("throbbe");expect(K[1].name).toBe("frobbe");expect(K[1].value).toBe("durgle")});it("should clean up child nodes after submitting",function(){H({params:{bonzo:"xyzzy"}});expect(K[0].name).toBe("bonzo");expect(J.childNodes.length).toBe(0)})})});describe("cleaning up",function(){var L;function K(){I.onComplete()}beforeEach(function(){E()});afterEach(function(){L=null});describe("after onComplete",function(){beforeEach(function(){H();L=I.frame;K()});it("should null iframe reference",function(){expect(I.frame).toBe(null)});it("should remove iframe DOM node",function(){expect(L.dom).toBe(null)})});describe("after abort",function(){beforeEach(function(){H();L=I.frame;I.abort()});it("should null iframe reference",function(){expect(I.frame).toBe(null)});it("should remove iframe DOM node",function(){expect(L.dom).toBe(null)})});describe("after timeout",function(){beforeEach(function(){runs(function(){H({timeout:1});L=I.frame});jasmine.waitAWhile()});it("should null iframe reference",function(){expect(I.frame).toBe(null)});it("should remove iframe DOM node",function(){expect(L.dom).toBe(null)})})});describe("successful requests",function(){var O,M,K,N;function L(P){if(P){I.frame.dom.contentDocument.body.innerText=Ext.JSON.encode(P)}I.onComplete()}beforeEach(function(){runs(function(){E();M=jasmine.createSpy("success");K=jasmine.createSpy("callback");N={};H({success:M,callback:K,scope:N});O=I.frame});jasmine.waitAWhile()});afterEach(function(){if(O){O.destroy()}O=M=K=N=null});describe("success handler",function(){it("should fire the handler",function(){L("foo");expect(M).toHaveBeenCalled()});it("should call the handler in proper scope",function(){L("bar");expect(M.mostRecentCall.scope).toBe(N)});it("should pass response as the first argument",function(){L("bonzo");var P=M.mostRecentCall.args[0];expect(P.status).toBe(200);expect(P.responseText).toBe('"bonzo"')});it("should pass the original options as the second argument",function(){L("mymse");var P=M.mostRecentCall.args[1];expect(P).toEqual({url:"frobbe",isUpload:true,form:J,callback:K,success:M,scope:N})})});describe("callback",function(){it("should fire the callback",function(){L("frob");expect(K).toHaveBeenCalled()});it("should fire callback in the proper scope",function(){L("qux");expect(K.mostRecentCall.scope).toBe(N)});it("should pass original options as the first argument",function(){L("xyzzy");var P=K.mostRecentCall.args[0];expect(P).toEqual({form:J,isUpload:true,url:"frobbe",callback:K,success:M,scope:N})});it("should pass success flag as the second argument",function(){L("zymbo");var P=K.mostRecentCall.args[1];expect(P).toBe(true)});it("should pass response as the third argument",function(){L("blergo");var P=K.mostRecentCall.args[2];delete P.responseXML;expect(P).toEqual({status:200,responseText:'"blergo"'})})});describe("events",function(){var P;beforeEach(function(){P=jasmine.createSpy("requestcomplete");C.on("requestcomplete",P);L("foo")});afterEach(function(){C.un("requestcomplete",P);P=null});it("should fire requestcomplete event",function(){expect(P).toHaveBeenCalled()});it("should pass the connection as the first argument",function(){var Q=P.mostRecentCall.args[0];expect(Q).toBe(C)});it("should pass response as the second argument",function(){var Q=P.mostRecentCall.args[1];delete Q.responseXML;expect(Q).toEqual({status:200,responseText:'"foo"'})});it("should pass original options as the third argument",function(){var Q=P.mostRecentCall.args[2];expect(Q).toEqual({form:J,isUpload:true,url:"frobbe",callback:K,success:M,scope:N})})});describe("promises",function(){var P,Q;beforeEach(function(){P=jasmine.createSpy("resolve");Q=jasmine.createSpy("reject");I.then(P,Q);runs(function(){L("frumble")});waitsForSpy(P,"promise to resolve",1000)});afterEach(function(){P=Q=null});it("should resolve promise",function(){expect(P).toHaveBeenCalled()});it("should not reject promise",function(){expect(Q).not.toHaveBeenCalled()});it("should pass response to the resolve callback",function(){var R=P.mostRecentCall.args[0];delete R.responseXML;expect(R).toEqual({status:200,responseText:'"frumble"'})})})});function G(N){var M=N.name,K=N.options,L=N.want,O=N.failFn;describe(M,function(){var Q,P,S,T,Z,U,W;function R(){spyOn(Ext,"log");spyOn(I,"getDoc");I.onComplete()}function Y(a,b){b=Ext.apply({request:I,requestId:I.id,responseXML:null,getResponseHeader:I._getHeader,getAllResponseHeaders:I._getHeaders},b);expect(a).toEqual(b)}function X(a,b){b=Ext.apply({form:J,isUpload:true,url:"frobbe"},b,K);expect(a).toEqual(b)}function V(a){if(O){O(a)}else{R()}}beforeEach(function(){runs(function(){E()});runs(function(){P=jasmine.createSpy("failure");S=jasmine.createSpy("callback");T={};Z=jasmine.createSpy("requestexception");C.on("requestexception",Z);U=jasmine.createSpy("resolve");W=jasmine.createSpy("reject");H(Ext.apply({failure:P,callback:S,scope:T},K));I.then(U,W);Q=I.frame});jasmine.waitAWhile()});afterEach(function(){if(Q){Q.destroy()}C.un("requestexception",Z);Q=P=S=T=null;Z=U=W=null});describe("failure handler",function(){beforeEach(function(){runs(function(){V(I)});waitsForSpy(P,"failure handler",1000)});it("should fire the handler",function(){expect(P).toHaveBeenCalled()});it("should fire the handler in the proper scope",function(){expect(P.mostRecentCall.scope).toBe(T)});it("should pass response as the first argument",function(){var a=P.mostRecentCall.args[0];Y(a,L)});it("should pass original options as the second argument",function(){var a=P.mostRecentCall.args[1];X(a,{callback:S,failure:P,scope:T})})});describe("callback",function(){beforeEach(function(){runs(function(){V(I)});waitsForSpy(S,"callback",1000)});it("should fire the callback",function(){expect(S).toHaveBeenCalled()});it("should fire the callback in the proper scope",function(){expect(S.mostRecentCall.scope).toBe(T)});it("should pass original options as the first argument",function(){var a=S.mostRecentCall.args[0];X(a,{callback:S,failure:P,scope:T})});it("should pass success flag as the second argument",function(){var a=S.mostRecentCall.args[1];expect(a).toBe(false)});it("should pass response as the third argument",function(){var a=S.mostRecentCall.args[2];Y(a,L)})});describe("events",function(){beforeEach(function(){runs(function(){V(I)});waitsForSpy(Z,"requestexception event",1000)});it("should fire requestexception event",function(){expect(Z).toHaveBeenCalled()});it("should pass the connection as the first argument",function(){var a=Z.mostRecentCall.args[0];expect(a).toBe(C)});it("should pass response as the second argument",function(){var a=Z.mostRecentCall.args[1];Y(a,L)});it("should pass original options as the third argument",function(){var a=Z.mostRecentCall.args[2];X(a,{callback:S,failure:P,scope:T})})});describe("promises",function(){beforeEach(function(){runs(function(){V(I)});waitsForSpy(W,"promise to be rejected",1000)});it("should not resolve promise",function(){expect(U).not.toHaveBeenCalled()});it("should reject promise",function(){expect(W).toHaveBeenCalled()});it("should pass response to the reject callback",function(){var a=W.mostRecentCall.args[0];Y(a,L)})})})}G({name:"failed requests",want:{status:400,statusText:"Could not acquire a suitable connection for the file upload service.",responseText:'{success:false,message:"Could not acquire a suitable connection for the file upload service."}'}});G({name:"aborted requests",want:{aborted:true,status:-1,statusText:"transaction aborted",responseText:'{success:false,message:"transaction aborted"}'},failFn:function(K){K.abort()}});G({name:"timed out requests",options:{timeout:1},want:{timedout:true,status:0,statusText:"communication failure",responseText:'{success:false,message:"communication failure"}'},failFn:Ext.emptyFn})});describe("promises",function(){var G,E,F;function H(K,J,I){K=Ext.applyIf(K||{},{url:"foo"});G=C.request(K);G.then(E,F);if(J){C.mockComplete({status:I||200})}}beforeEach(function(){B();E=jasmine.createSpy("resolve");F=jasmine.createSpy("reject")});afterEach(function(){if(G){G.destroy()}G=E=F=null});describe("success",function(){beforeEach(function(){runs(function(){H({},true)});waitsForSpy(E,"promise to resolve",1000)});it("should resolve promise",function(){expect(E).toHaveBeenCalled()});it("should not reject promise",function(){expect(F).not.toHaveBeenCalled()});it("should pass result to the resolve callback",function(){var I=E.mostRecentCall.args[0];expect(I.status).toBe(200)})});describe("beforerequest handler returning false",function(){var I;beforeEach(function(){runs(function(){I={};C.on("beforerequest",function(){return false});H(I)});waitsForSpy(F,"promise to be rejected",1000)});afterEach(function(){I=null});it("should reject promise",function(){expect(F).toHaveBeenCalled()});it("should not resolve promise",function(){expect(E).not.toHaveBeenCalled()});it("should pass options to the reject callback",function(){var J=F.mostRecentCall.args[0];expect(J).toEqual([I,undefined,undefined])})});describe("timeout",function(){beforeEach(function(){runs(function(){H({timeout:1})});waitsForSpy(F,"promise to be rejected",1000)});it("should reject promise",function(){expect(F).toHaveBeenCalled()});it("should not resolve promise",function(){expect(E).not.toHaveBeenCalled()});it("should pass result to the reject callback",function(){var I=F.mostRecentCall.args[0];expect(I.timedout).toBe(true)})});describe("abort",function(){beforeEach(function(){runs(function(){H({timeout:1000});G.abort()});waitsForSpy(F,"promise to be rejected",1000)});it("should reject promise",function(){expect(F).toHaveBeenCalled()});it("should not resolve promise",function(){expect(E).not.toHaveBeenCalled()});it("should pass result to the reject callback",function(){var I=F.mostRecentCall.args[0];expect(I.aborted).toBe(true)})});describe("failure",function(){beforeEach(function(){runs(function(){H({timeout:1000},true,404)});waitsForSpy(F,"promise to be rejected",1000)});it("should reject promise",function(){expect(F).toHaveBeenCalled()});it("should not resolve promise",function(){expect(E).not.toHaveBeenCalled()});it("should pass result to the reject callback",function(){var I=F.mostRecentCall.args[0];expect(I.status).toBe(404)})})});describe("synchronous requests",function(){it("should return the response object",function(){B({async:false});var E=C.request({url:"foo"}),F=MockAjax.prototype.syncDefaults;expect(E.responseText).toEqual(F.responseText);expect(E.status).toEqual(F.status);expect(E.statusText).toEqual(F.statusText)})});("swfobject" in window?describe:xdescribe)("binaryData",function(){var E=Ext.isChrome||(Ext.isSafari&&Ext.isDefined(window.Uint8Array))||(Ext.isGecko&&Ext.isDefined(window.Uint8Array));it("should create the correct XHR object depending on the browser",function(){B();D=C.request({url:"foo",binaryData:[0,1,2,3]});if(E){expect(D.xhr).not.toEqual(jasmine.any(Ext.data.flash.BinaryXhr))}else{expect(D.xhr).toEqual(jasmine.any(Ext.data.flash.BinaryXhr));Ext.data.flash.BinaryXhr.flashPolyfillEl.remove()}});if(E){it("should create a typed array",function(){B();D=C.request({url:"foo",binaryData:[0,1,2,3]});expect([jasmine.any(ArrayBuffer),jasmine.any(Uint8Array)]).toContain(D.xhr.ajaxOptions.data)})}})})