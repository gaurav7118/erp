describe("Ext.data.NodeStore",function(){var D=Ext.define(null,{extend:"Ext.data.TreeModel"});var C;function B(I,F,G){var H=new D({id:I,leaf:!!F});if(G){Ext.Array.forEach(G,function(J){H.appendChild(J)})}return H}function A(F,G){if(!G&&G!==null){G=B("root")}C=new Ext.data.NodeStore(Ext.apply({model:D,node:G},F))}afterEach(function(){C=Ext.destroy(C)});function E(G){var F=Ext.Array.pluck(C.getRange(),"id");expect(F).toEqual(G)}describe("folderSort",function(){var F;beforeEach(function(){F=B("root",false,[B(2,true),B(6),B(1,true),B(5),B(4,true),B(3)])});afterEach(function(){F=null});describe("with no sorters",function(){describe("configuration",function(){describe("with folderSort: true",function(){it("should sort nodes",function(){A({folderSort:true},F);E([6,5,3,2,1,4])})});describe("with folderSort: false",function(){it("should leave nodes in place",function(){A({folderSort:false},F);E([2,6,1,5,4,3])})})});describe("setting dynamically",function(){describe("setting folderSort: true",function(){it("should sort nodes",function(){A({folderSort:false},F);C.setFolderSort(true);E([6,5,3,2,1,4])})});describe("setting folderSort: false",function(){it("should leave nodes in place",function(){A({folderSort:true},F);C.setFolderSort(false);E([6,5,3,2,1,4])})})})});describe("with sorters",function(){describe("configuration",function(){describe("with folderSort: true",function(){it("should sort and give priority to folderSort",function(){A({folderSort:true,sorters:[{property:"id",direction:"DESC"}]},F);E([6,5,3,4,2,1])})});describe("with folderSort: false",function(){it("should sort according to the sorter",function(){A({folderSort:false,sorters:[{property:"id",direction:"DESC"}]},F);E([6,5,4,3,2,1])})})});describe("setting sorters dynamically",function(){describe("with folderSort: true",function(){beforeEach(function(){A({folderSort:true},F);C.getSorters().add({property:"id",direction:"DESC"})});describe("adding a sorter",function(){it("should sort and give priority to folderSort",function(){E([6,5,3,4,2,1])})});describe("removing a sorter",function(){it("should leave nodes in place",function(){C.getSorters().removeAll();E([6,5,3,4,2,1])})})});describe("with folderSort: false",function(){beforeEach(function(){A({folderSort:false},F);C.getSorters().add({property:"id",direction:"DESC"})});describe("adding a sorter",function(){it("should sort nodes",function(){E([6,5,4,3,2,1])})});describe("removing a sorter",function(){it("should leave nodes in place",function(){C.getSorters().removeAll();E([6,5,4,3,2,1])})})})});describe("setting folderSort dynamically",function(){describe("setting folderSort: true",function(){it("should sort and give priority to folderSort",function(){A({folderSort:false,sorters:[{property:"id",direction:"DESC"}]},F);C.setFolderSort(true);E([6,5,3,4,2,1])})});describe("setting folderSort: false",function(){it("should sort nodes",function(){A({folderSort:false,sorters:[{property:"id",direction:"DESC"}]},F);C.setFolderSort(false);E([6,5,4,3,2,1])})})})})});describe("node",function(){it("should accept an object",function(){A({node:{id:"foo"}},null);var F=C.getNode();expect(F.isNode).toBe(true);expect(F.id).toBe("foo")});it("should accept a node instance",function(){var F=B();A({node:F});expect(C.getNode()).toBe(F)})});describe("store content",function(){describe("configuring with a node",function(){it("should load node children",function(){var F=B("root",false,[B(1),B(2),B(3)]);A(null,F);E([1,2,3])});it("should only include children of the node",function(){var F=B("root",false,[B(1,false,[B(2),B(3)]),B(4,false,[B(5),B(6)]),B(7,false,[B(8),B(9)])]);A(null,F);E([1,4,7])})});describe("dynamic updates",function(){it("should add a child that is appended to the node",function(){A();var F=B();C.getNode().appendChild(F);expect(C.getCount()).toBe(1);expect(C.getAt(0)).toBe(F)});it("should insert a child that is inserted into the node",function(){var H=B(1);var G=B("root",false,[H]);var F=B(2);A(null,G);G.insertChild(0,F);expect(C.getCount()).toBe(2);expect(C.getAt(0)).toBe(F);expect(C.getAt(1)).toBe(H)});it("should remove a child removed from the node",function(){var G=B(1);var F=B("root",false,[G]);A(null,F);F.removeChild(G);expect(C.getCount()).toBe(0)});it("should not add granchildren of the node",function(){var G=B(1);var F=B("root",false,[G]);A(null,F);G.appendChild({});expect(C.getCount()).toBe(1)});it("should not cause an error when removing grandchildren of the node",function(){var H=B(2);var G=B(1,false,[H]);var F=B("root",false,[G]);A(null,F);expect(function(){G.removeChild(H)}).not.toThrow()})})})})