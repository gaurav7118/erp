describe("Ext.data.Store",function(){var H={},D,R,B,G,U,O,Q,A,I,E,T,C;function N(V){return V*-1}function F(W,V,Y){var Z={fn:Y||Ext.emptyFn},X=spyOn(Z,"fn");W.addListener(V,Z.fn);return X}function K(){I.add(B,D,R,G);S()}function S(){Q=I.getAt(0);U=I.getAt(1);O=I.getAt(2);A=I.getAt(3)}function P(V,W){if(Ext.isObject(V)){W=V}else{W=W||{};if(!W.email){W.email=V}}return new E(W)}function M(V,W){V=V||{};I=new Ext.data.Store(Ext.applyIf(V,{asynchronousLoad:false,model:E,data:W?[B,D,R,G]:null}));if(W){S()}T=I.data}function L(V){Ext.Ajax.mockComplete({status:200,responseText:Ext.JSON.encode(V)})}function J(V,W){Ext.Ajax.mockComplete({status:V,responseText:""})}beforeEach(function(){MockAjaxManager.addMethods();E=Ext.define("spec.User",{extend:"Ext.data.Model",idProperty:"email",fields:[{name:"name",type:"string"},{name:"email",type:"string"},{name:"evilness",type:"int"},{name:"group",type:"string"},{name:"old",type:"boolean"},{name:"valid",type:"string"},{name:"age",type:"int",sortType:N},{name:"validField",validators:"presence"}]});B={name:"Ed Spencer",email:"ed@sencha.com",evilness:100,group:"code",old:false,age:25,valid:"yes"};D={name:"Abe Elias",email:"abe@sencha.com",evilness:70,group:"admin",old:false,age:20,valid:"yes"};R={name:"Aaron Conran",email:"aaron@sencha.com",evilness:5,group:"admin",old:true,age:26,valid:"yes"};G={name:"Tommy Maintz",email:"tommy@sencha.com",evilness:-15,group:"code",old:true,age:70,valid:"yes"}});afterEach(function(){MockAjaxManager.removeMethods();Ext.undefine("spec.User");Ext.data.Model.schema.clear();I=C=E=T=Ext.destroy(I);B=Q=D=U=R=O=G=A=null});describe("initializing",function(){describe("store manager",function(){it("should register if a storeId is passed",function(){M({storeId:"foo"});expect(Ext.data.StoreManager.get("foo")).toBe(I)})});describe("proxy",function(){describe("configured on the store",function(){it("should create from a string",function(){M({proxy:"jsonp"});expect(I.getProxy() instanceof Ext.data.proxy.JsonP).toBe(true)});it("should create from a config",function(){M({proxy:{type:"ajax",url:"foo"}});var V=I.getProxy();expect(V instanceof Ext.data.proxy.Ajax);expect(V.getUrl()).toBe("foo")});it("should accept an instance",function(){var V=new Ext.data.proxy.Memory();M({proxy:V});expect(I.getProxy()).toBe(V)})});describe("configured on the model",function(){it("should use the proxy from the model",function(){Ext.define("spec.ProxyWithModel",{extend:"Ext.data.Model",fields:[],proxy:{type:"ajax"}});M({model:"spec.ProxyWithModel"});expect(I.getProxy()).toBe(spec.ProxyWithModel.getProxy());Ext.undefine("spec.ProxyWithModel")})});describe("configured on both",function(){it("should favour the store proxy",function(){Ext.define("spec.ProxyWithModel",{extend:"Ext.data.Model",fields:[],proxy:{type:"ajax"}});var V=new Ext.data.proxy.Ajax();M({model:"spec.ProxyWithModel",proxy:V});expect(I.getProxy()).toBe(V);Ext.undefine("spec.ProxyWithModel")})});describe("memory with data",function(){it("should load the data instantly",function(){M({proxy:{type:"memory"},data:[B,D]});expect(I.getCount()).toBe(2)})});describe("using an implicit model",function(){it("should use the model's memory proxy when no proxy is defined on the store",function(){I=new Ext.data.Store({fields:["id","height","width"]});expect(I.getProxy().isMemoryProxy).toBe(true);expect(I.getProxy()).toBe(I.getModel().getProxy())});it("should set the store's proxy on the model",function(){I=new Ext.data.Store({fields:["id","height","width"],proxy:{type:"ajax",url:"foo"}});expect(I.getProxy().isAjaxProxy).toBe(true);expect(I.getProxy().url).toBe("foo");expect(I.getProxy()).toBe(I.getModel().getProxy())});it("should have the model set on the proxy & the reader",function(){I=new Ext.data.Store({fields:["id","height","width"],proxy:{type:"ajax",url:"foo"}});expect(I.getProxy().getModel()).toBe(I.getModel());expect(I.getProxy().getReader().getModel()).toBe(I.getModel())});it("should extend Ext.data.Model",function(){I=new Ext.data.Store({fields:["id","height","width"]});expect(I.getModel().superclass.self).toBe(Ext.data.Model)})})});describe("autoLoad",function(){it("should not auto load by default",function(){spyOn(Ext.data.Store.prototype,"flushLoad").andReturn();M({asynchronousLoad:true});waits(50);runs(function(){expect(I.flushLoad).not.toHaveBeenCalled()})});describe("autoLoad: true",function(){it("should load the store",function(){spyOn(Ext.data.Store.prototype,"flushLoad").andCallThrough();M({asynchronousLoad:true,autoLoad:true});waitsFor(function(){return I.flushLoad.callCount>0},"Load never called");runs(function(){expect(I.flushLoad.callCount).toBe(1)})});it("should pass the options if autoLoad is an object",function(){var W={foo:"bar"},X={params:W},V;M({autoLoad:X,asynchronousLoad:false,listeners:{beforeload:function(Z,Y){V=Y.getParams()}}});waitsFor(function(){return V.foo==="bar"})})})});describe("fields",function(){it("should create a model with the configured fields",function(){M({fields:["id","height","width"]});var W=I.getModel(),V=W.getFields();expect(W.prototype.isModel).toBe(true);expect(V[0].getName()).toBe("id");expect(V[1].getName()).toBe("height");expect(V[2].getName()).toBe("width")});it("should not be created with a class name",function(){M({fields:["id","height","width"]});var V=I.getModel();expect(V.$className).toBe(null)})});describe("data",function(){describe("with no proxy",function(){it("should add any inline data",function(){M({data:[B,D]});expect(I.first().id).toBe("ed@sencha.com");expect(I.last().id).toBe("abe@sencha.com")});it("should not fire any events",function(){var V=jasmine.createSpy();M({listeners:{clear:V,add:V,load:V,datachanged:V,refresh:V},data:[B,D,G]});expect(V).not.toHaveBeenCalled()})});describe("with a proxy",function(){describe("with a memory proxy",function(){it("should load the data and call proxy.read",function(){var V=new Ext.data.proxy.Memory();spyOn(V,"read").andCallThrough();M({proxy:V,data:[D,G]});expect(I.first().id).toBe("abe@sencha.com");expect(I.last().id).toBe("tommy@sencha.com");expect(V.read.callCount).toBe(1)});it("should not fire any events",function(){var W=jasmine.createSpy();var V=new Ext.data.proxy.Memory();M({proxy:V,data:[D,G],listeners:{clear:W,add:W,load:W,datachanged:W,refresh:W}});expect(W).not.toHaveBeenCalled()})});describe("with a server proxy",function(){it("should load the data and not call proxy.read",function(){var V=new Ext.data.proxy.Ajax();spyOn(V,"read").andCallThrough();M({proxy:V,data:[R,B]});expect(I.first().id).toBe("aaron@sencha.com");expect(I.last().id).toBe("ed@sencha.com");expect(V.read).not.toHaveBeenCalled()});it("should not fire any events",function(){var W=jasmine.createSpy();var V=new Ext.data.proxy.Ajax();M({proxy:V,data:[R,B],listeners:{clear:W,add:W,load:W,datachanged:W,refresh:W}});expect(W).not.toHaveBeenCalled()})})})});describe("buffered stores",function(){it("should create a BufferedStore if given buffered:true",function(){M({buffered:true});expect(I.isBufferedStore).toBe(true);expect(I instanceof Ext.data.BufferedStore).toBe(true)});it("should create a BufferedStore if given type:buffered",function(){spyOn(Ext.log,"warn");I=Ext.Factory.store({type:"buffered"});expect(I.isBufferedStore).toBe(true);expect(I instanceof Ext.data.BufferedStore).toBe(true)})})});describe("getting records",function(){beforeEach(function(){M();K()});describe("first",function(){it("should return the first record",function(){expect(I.first()).toBe(Q)});it("should return the record if there is only 1",function(){I.remove([Q,U,A]);expect(I.first()).toBe(O)});it("should return null with an empty store",function(){I.removeAll();expect(I.first()).toBeNull()});it("should be affected by filters",function(){I.getFilters().add({property:"group",value:"admin"});expect(I.first()).toBe(U)})});describe("last",function(){it("should return the last record",function(){expect(I.last()).toBe(A)});it("should return the record if there is only 1",function(){I.remove([Q,U,A]);expect(I.last()).toBe(O)});it("should return null with an empty store",function(){I.removeAll();expect(I.last()).toBeNull()});it("should be affected by filters",function(){I.getFilters().add({property:"group",value:"admin"});expect(I.last()).toBe(O)})});describe("getAt",function(){it("should return the record at the specified index",function(){expect(I.getAt(1)).toBe(U)});it("should return null when the index is outside the store bounds",function(){expect(I.getAt(100)).toBe(null)});it("should return null when the store is empty",function(){I.removeAll();expect(I.getAt(0)).toBe(null)})});describe("getById",function(){it("should return the record with the matching id",function(){expect(I.getById("tommy@sencha.com")).toBe(A)});it("should return null if a matching id is not found",function(){expect(I.getById("foo@sencha.com")).toBe(null)});it("should return null when the store is empty",function(){I.removeAll();expect(I.getById("ed@sencha.com")).toBe(null)});it("should ignore filters",function(){I.filter("email","ed@sencha.com");expect(I.getById("aaron@sencha.com")).toBe(O)})});describe("getByInternalId",function(){it("should return the record with the matching id",function(){expect(I.getByInternalId(A.internalId)).toBe(A)});it("should return null if a matching id is not found",function(){expect(I.getByInternalId("foo@sencha.com")).toBe(null)});it("should return null when the store is empty",function(){I.removeAll();expect(I.getByInternalId("ed@sencha.com")).toBe(null)});it("should ignore filters",function(){I.filter("email","ed@sencha.com");expect(I.getByInternalId(O.internalId)).toBe(O)});it("should work correctly if not called before filtering",function(){I.filter("email","ed@sencha.com");expect(I.getByInternalId(O.internalId)).toBe(O)});it("should work correctly if called before & after filtering",function(){expect(I.getByInternalId(O.internalId)).toBe(O);I.filter("email","ed@sencha.com");expect(I.getByInternalId(O.internalId)).toBe(O)})});describe("getRange",function(){it("should default to the full store range",function(){expect(I.getRange()).toEqual([Q,U,O,A])});it("should return from the start index",function(){expect(I.getRange(2)).toEqual([O,A])});it("should use the end index, and include it",function(){expect(I.getRange(0,2)).toEqual([Q,U,O])});it("should ignore an end index greater than the store range",function(){expect(I.getRange(1,100)).toEqual([U,O,A])})});describe("query",function(){var W,V;it("should return records with group: 'coder'",function(){W=I.query("group","code");expect(W.length).toBe(2);expect(W.contains(Q)).toBe(true);expect(W.contains(A)).toBe(true);expect(W.contains(O)).toBe(false);expect(W.contains(U)).toBe(false)});it("should return null if a matching id is not found",function(){V=I.query("group","slackers");expect(V.length).toBe(0)});it("should return null when the store is empty",function(){I.removeAll();W=I.query("group","code");expect(W.length).toBe(0)});it("should ignore filters",function(){I.filter("email","ed@sencha.com");expect(I.getCount()).toBe(1);W=I.query("group","code");expect(W.length).toBe(2);expect(W.contains(Q)).toBe(true);expect(W.contains(A)).toBe(true);expect(W.contains(O)).toBe(false);expect(W.contains(U)).toBe(false)})})});describe("finding",function(){beforeEach(function(){M();K()});describe("find",function(){it("should find by the field",function(){expect(I.find("email","tommy@sencha.com")).toBe(3)});it("should find the first matching index",function(){expect(I.find("group","admin")).toBe(1)});it("should return -1 if value is empty",function(){expect(I.find("id",null)).toBe(-1);expect(I.find("id","")).toBe(-1);expect(I.find("id",undefined)).toBe(-1);expect(I.find("id",[])).toBe(-1);expect(I.find("id","foo")).toBe(-1)});it("should match the start of strings as a default",function(){expect(I.find("email","to")).toBe(3)})});describe("findRecord",function(){it("should return the record instance",function(){expect(I.findRecord("name","Ed Spencer")).toBe(Q)});it("should find the first matching record",function(){expect(I.findRecord("group","code")).toBe(Q)});it("should return null when not found",function(){expect(I.findRecord("name","Derp")).toBeNull()})});describe("finding exact",function(){it("should find the first exact matching record",function(){expect(I.findExact("name","Aaron Conran")).toBe(2)});it("should return -1 if there is no match",function(){expect(I.findExact("name","Bed Spencer")).toBe(-1)});it("should honor the start index",function(){expect(I.findExact("group","admin",1)).toBe(1)});it("should not do any type coercion",function(){expect(I.findExact("evilness","70")).toBe(-1)})});describe("findBy",function(){it("should find by the matching FN",function(){var V=I.findBy(function(W){return W.get("email")==="abe@sencha.com"});expect(V).toBe(1)})});describe("collect",function(){it("should collect values in order",function(){expect(I.collect("age")).toEqual([25,20,26,70])});it("should ignore filtered out values",function(){I.filter("group","code");expect(I.collect("age")).toEqual([25,70])});it("should bypass the filter if we pass the bypass param",function(){I.filter("group","code");expect(I.collect("age",true,true)).toEqual([25,20,26,70])})})});describe("iterating",function(){var V;beforeEach(function(){M();K();V=jasmine.createSpy()});describe("each",function(){it("should iterate over each record",function(){I.each(V);expect(V.callCount).toBe(4)});it("should pass the record, index & total length",function(){I.each(V);var W=V.calls[0].args;expect(W[0]).toBe(Q);expect(W[1]).toBe(0);expect(W[2]).toBe(4);W=V.calls[1].args;expect(W[0]).toBe(U);expect(W[1]).toBe(1);expect(W[2]).toBe(4);W=V.calls[2].args;expect(W[0]).toBe(O);expect(W[1]).toBe(2);expect(W[2]).toBe(4);W=V.calls[3].args;expect(W[0]).toBe(A);expect(W[1]).toBe(3);expect(W[2]).toBe(4)});it("should stop iterating if false is returned",function(){var W=0;I.each(function(Y,X){if(X>1){return false}++W});expect(W).toBe(2)});it("should default the scope to the record",function(){I.each(V);expect(V.mostRecentCall.object).toBe(I.last())});it("should use the passed scope",function(){I.each(V,H);expect(V.mostRecentCall.object).toBe(H)})})});describe("index",function(){beforeEach(function(){M();K()});describe("indexOf",function(){it("should return the index of a record that exists in the store",function(){expect(I.indexOf(U)).toBe(1)});it("should return -1 when the record does not exist in the store",function(){expect(I.indexOf(P("foo@sencha.com"))).toBe(-1)});it("should return -1 when the store is empty",function(){I.removeAll();expect(I.indexOf(Q)).toBe(-1)});it("should return -1 when the passed record is null",function(){expect(I.indexOf(null)).toBe(-1)})});describe("indexOfId",function(){it("should return the record with matching index",function(){expect(I.indexOfId("aaron@sencha.com")).toBe(2)});it("should return -1 when the id does not exist in the store",function(){expect(I.indexOfId("foo@sencha.com")).toBe(-1)});it("should return -1 when the store is empty",function(){I.removeAll();expect(I.indexOfId("ed@sencha.com")).toBe(-1)})})});describe("counting",function(){describe("getCount",function(){beforeEach(function(){M()});it("should return 0 when the store is empty",function(){expect(I.getCount()).toBe(0)});it("should return the number of records currently in the store",function(){K();expect(I.getCount()).toBe(4)})});describe("getTotalCount",function(){it("should default to 0",function(){M();expect(I.getTotalCount()).toBe(0)});it("should set a value returned from a proxy read",function(){M({proxy:{type:"memory",data:{total:1234},reader:"json"}});I.load();expect(I.getTotalCount()).toBe(1234)})})});describe("adding records",function(){describe("add",function(){beforeEach(function(){M()});describe("position",function(){it("should add to the end of the store",function(){K();var V=P("foo@sencha.com");I.add(V);expect(I.getAt(4)).toBe(V)})});describe("arg values",function(){it("should add a model instance",function(){var V=P("foo@sencha.com");I.add(V);expect(I.first()).toBe(V)});it("should create a model from an object config",function(){I.add({email:"foo@sencha.com",name:"Foo"});var V=I.first();expect(V.isModel).toBe(true);expect(V.get("name")).toBe("Foo")})});describe("adding multiple",function(){it("should add an array of records",function(){I.add([{email:"personA@sencha.com",name:"Person A"},{email:"personB@sencha.com",name:"Person B"}]);expect(I.first().get("name")).toBe("Person A");expect(I.last().get("name")).toBe("Person B")});it("should add multiple arguments",function(){I.add({email:"personA@sencha.com",name:"Person A"},{email:"personB@sencha.com",name:"Person B"});expect(I.first().get("name")).toBe("Person A");expect(I.last().get("name")).toBe("Person B")})});describe("return value",function(){it("should return an array when adding a single item",function(){var V=P("foo@sencha.com");expect(I.add(V)).toEqual([V])});it("should return an array when adding an array, should not mutate the array",function(){var X=P("foo@sencha.com"),W=[X],V=I.add(W);expect(V).toEqual([X]);expect(V).not.toBe(W)});it("should return an array when adding multiple args",function(){var W=P("user1@sencha.com"),V=P("user2@sencha.com");expect(I.add(W,V)).toEqual([W,V])});it("should return an empty array if nothing was passed",function(){expect(I.add()).toEqual([])});it("should return an empty array if an empty array was passed",function(){expect(I.add([])).toEqual([])})});describe("events",function(){var V,X,W;beforeEach(function(){K();V=jasmine.createSpy();X=P("user1@sencha.com");W=P("user2@sencha.com")});describe("a single item",function(){it("should fire the add event, passing the store, the records & the added index",function(){I.on("add",V);I.add(X);var Y=V.mostRecentCall.args;expect(V.callCount).toBe(1);expect(Y[0]).toBe(I);expect(Y[1]).toEqual([X]);expect(Y[2]).toBe(4)});it("should fire the datachanged event",function(){I.on("datachanged",V);I.add(X,W);var Y=V.mostRecentCall.args;expect(V.callCount).toBe(1);expect(Y[0]).toBe(I)})});describe("multiple items",function(){describe("contiguous range",function(){it("should fire the add event, passing the store, the records & the added index",function(){I.on("add",V);I.add(X,W);var Y=V.mostRecentCall.args;expect(V.callCount).toBe(1);expect(Y[0]).toBe(I);expect(Y[1]).toEqual([X,W]);expect(Y[2]).toBe(4)});it("should fire the datachanged event",function(){I.on("datachanged",V);I.add(X,W);var Y=V.mostRecentCall.args;expect(V.callCount).toBe(1);expect(Y[0]).toBe(I)})});describe("discontiguous range",function(){var Y;beforeEach(function(){I.removeAll();I.sort("email");I.add(P("e@sencha.com"),P("j@sencha.com"),P("o@sencha.com"),P("t@sencha.com"));Y=[P("a@sencha.com"),P("b@sencha.com"),P("f@sencha.com"),P("g@sencha.com"),P("h@sencha.com"),P("l@sencha.com"),P("p@sencha.com"),P("q@sencha.com"),P("r@sencha.com"),P("s@sencha.com")]});it("should fire the add event, passing the store, the records & the added index for each chunk",function(){I.on("add",V);I.add(Y[6],Y[1],Y[9],Y[4],Y[3],Y[7],Y[5],Y[2],Y[8],Y[0]);expect(V.callCount).toBe(4);var Z=V.calls[0].args;expect(Z[0]).toBe(I);expect(Z[1]).toEqual([Y[0],Y[1]]);expect(Z[2]).toBe(0);Z=V.calls[1].args;expect(Z[0]).toBe(I);expect(Z[1]).toEqual([Y[2],Y[3],Y[4]]);expect(Z[2]).toBe(3);Z=V.calls[2].args;expect(Z[0]).toBe(I);expect(Z[1]).toEqual([Y[5]]);expect(Z[2]).toBe(7);Z=V.calls[3].args;expect(Z[0]).toBe(I);expect(Z[1]).toEqual([Y[6],Y[7],Y[8],Y[9]]);expect(Z[2]).toBe(9)});it("should fire the datachanged event",function(){I.on("datachanged",V);I.add(Y[6],Y[1],Y[9],Y[4],Y[3],Y[7],Y[5],Y[2],Y[8],Y[0]);var Z=V.mostRecentCall.args;expect(V.callCount).toBe(1);expect(Z[0]).toBe(I)})})});describe("invalid cases",function(){it("should not call the event when the record is null",function(){I.on({add:V,datachanged:V});I.add(null);expect(V).not.toHaveBeenCalled()});it("should not call the event when the array is empty",function(){I.on({add:V,datachanged:V});I.add([]);expect(V).not.toHaveBeenCalled()})})})});describe("insert",function(){beforeEach(function(){M()});describe("position",function(){it("should add at the specified position",function(){K();var V=P("foo@sencha.com");I.insert(2,V);expect(I.getAt(2)).toBe(V)});it("should add to the end if the index is larger than the bounds",function(){var V=P("foo@sencha.com");I.insert(100,V);expect(I.first()).toBe(V)})});describe("arg values",function(){it("should add a model instance",function(){var V=P("foo@sencha.com");I.insert(0,V);expect(I.first()).toBe(V)});it("should create a model from an object config",function(){I.insert(0,{email:"foo@sencha.com",name:"Foo"});var V=I.first();expect(V.isModel).toBe(true);expect(V.get("name")).toBe("Foo")})});describe("adding multiple",function(){it("should add an array of records",function(){I.insert(0,[{email:"personA@sencha.com",name:"Person A"},{email:"personB@sencha.com",name:"Person B"}]);expect(I.first().get("name")).toBe("Person A");expect(I.last().get("name")).toBe("Person B")})});describe("return value",function(){it("should return an array when adding a single item",function(){var V=P("foo@sencha.com");expect(I.insert(0,V)).toEqual([V])});it("should return an array when adding an array, should not mutate the array",function(){var X=P("foo@sencha.com"),W=[X],V=I.insert(0,W);expect(V).toEqual([X]);expect(V).not.toBe(W)});it("should return an empty array if nothing was passed",function(){expect(I.insert(0)).toEqual([])});it("should return an empty array if an empty array was passed",function(){expect(I.insert(0,[])).toEqual([])})});describe("when filtered",function(){beforeEach(function(){K()});it("should insert at the correct position",function(){I.filter("group","code");var V=I.insert(0,{email:"foo@sencha.com",group:"code"})[0];expect(I.getAt(0)).toBe(V)});it("should retain the relative position when filters are cleared",function(){I.filter("group","code");var V=I.insert(1,{email:"foo@sencha.com",group:"code"})[0];I.getFilters().removeAll();expect(I.indexOf(V)).toBe(3)});it("should have the correct position when inserted but filtered out",function(){I.filter("group","code");var V=I.insert(0,{email:"foo@sencha.com",group:"admin"})[0];I.getFilters().removeAll();expect(I.indexOf(V)).toBe(0)})});describe("events",function(){var V,X,W;beforeEach(function(){K();V=jasmine.createSpy();X=P("user1@sencha.com");W=P("user2@sencha.com")});it("should fire the add event, passing the store, the records & the added index",function(){I.on("add",V);I.insert(0,[X,W]);var Y=V.mostRecentCall.args;expect(V.callCount).toBe(1);expect(Y[0]).toBe(I);expect(Y[1]).toEqual([X,W]);expect(Y[2]).toBe(0)});it("should correct the added index when it exceeds the bounds of the store",function(){I.on("add",V);I.insert(50,[X,W]);var Y=V.mostRecentCall.args;expect(Y[2]).toBe(4)});it("should fire the datachanged event",function(){I.on("datachanged",V);I.insert(0,[X,W]);var Y=V.mostRecentCall.args;expect(V.callCount).toBe(1);expect(Y[0]).toBe(I)});describe("invalid cases",function(){it("should not call the event when the record is null",function(){I.on({add:V,datachanged:V});I.insert(0,null);expect(V).not.toHaveBeenCalled()});it("should not call the event when the array is empty",function(){I.on({add:V,datachanged:V});I.insert(0,[]);expect(V).not.toHaveBeenCalled()})})})});describe("moving records",function(){var W,X;beforeEach(function(){M();K();W=jasmine.createSpy()});afterEach(function(){X=W=null});function Y(a,Z){Ext.Array.forEach(Z,function(b){if(I.isMoving(b)){a[b.id]=true}})}function V(){X={};I.on("refresh",function(Z){X=Ext.clone(Z.moveMap)})}describe("via add",function(){describe("a single record",function(){it("should move the record to the end of the collection",function(){I.add(Q);expect(I.indexOf(Q)).toBe(3)});it("should be moving during the add & remove event",function(){V();I.add(Q);var Z={"ed@sencha.com":1};expect(X).toEqual(Z);expect(I.isMoving([Q])).toBe(0);expect(I.isMoving()).toBe(0)})});describe("multiple records",function(){describe("existing records only",function(){describe("in a contiguous range",function(){it("should move the records to the end of the collection",function(){I.add([Q,U]);expect(I.indexOf(Q)).toBe(2);expect(I.indexOf(U)).toBe(3)});it("should be moving during the add & remove event",function(){V();I.add([Q,U]);var Z={"ed@sencha.com":1,"abe@sencha.com":1};expect(X).toEqual(Z);expect(I.isMoving([Q,U])).toBe(0);expect(I.isMoving()).toBe(0)})});describe("in a discontiguous range",function(){var b,a,Z;beforeEach(function(){b=P("foo@sencha.com");a=P("bar@sencha.com");Z=P("baz@sencha.com");I.add([b,a,Z])});afterEach(function(){b=a=Z=null});it("should move the records to the end of the collection",function(){I.add([U,A,a]);expect(I.indexOf(U)).toBe(4);expect(I.indexOf(A)).toBe(5);expect(I.indexOf(a)).toBe(6)});it("should be moving during the add & remove event",function(){V();I.add([U,A,a]);var c={"abe@sencha.com":1,"tommy@sencha.com":1,"bar@sencha.com":1};expect(X).toEqual(c);expect(I.isMoving([U,A,a])).toBe(0);expect(I.isMoving()).toBe(0)})})});describe("mixture of new/existing records",function(){var b,a,Z;beforeEach(function(){b=P("foo@sencha.com");a=P("bar@sencha.com");Z=P("baz@sencha.com")});afterEach(function(){b=a=Z=null});it("should add the records to the end",function(){I.add([b,Q]);expect(I.indexOf(b)).toBe(3);expect(I.indexOf(Q)).toBe(4)});it("should only mark existing records as moving",function(){V();I.add([b,Q]);var c={"ed@sencha.com":1};expect(X).toEqual(c);expect(I.isMoving([b,Q])).toBe(0);expect(I.isMoving()).toBe(0)})})})});describe("via insert",function(){describe("a single record",function(){it("should move the record to the specified position",function(){I.insert(0,A);expect(I.indexOf(A)).toBe(0)});it("should be moving during the add & remove event",function(){V();I.insert(0,A);var Z={"tommy@sencha.com":1};expect(X).toEqual(Z);expect(I.isMoving(A)).toBe(0);expect(I.isMoving()).toBe(0)})});describe("multiple records",function(){describe("existing records only",function(){describe("in a contiguous range",function(){it("should move the records to the specified position",function(){I.insert(0,[O,A]);expect(I.indexOf(O)).toBe(0);expect(I.indexOf(A)).toBe(1)});it("should be moving during the add & remove event",function(){V();I.insert(0,[O,A]);var Z={"aaron@sencha.com":1,"tommy@sencha.com":1};expect(X).toEqual(Z);expect(I.isMoving([O,A])).toBe(0);expect(I.isMoving()).toBe(0)})});describe("in a discontiguous range",function(){var b,a,Z;beforeEach(function(){b=P("foo@sencha.com");a=P("bar@sencha.com");Z=P("baz@sencha.com");I.add([b,a,Z])});afterEach(function(){b=a=Z=null});it("should move the records to the specified position",function(){I.insert(0,[U,A,a]);expect(I.indexOf(U)).toBe(0);expect(I.indexOf(A)).toBe(1);expect(I.indexOf(a)).toBe(2)});it("should be moving during the add & remove event",function(){V();I.insert(0,[U,A,a]);var c={"abe@sencha.com":1,"tommy@sencha.com":1,"bar@sencha.com":1};expect(X).toEqual(c);expect(I.isMoving([U,A,a])).toBe(0);expect(I.isMoving()).toBe(0)})})});describe("mixture of new/existing records",function(){var b,a,Z;beforeEach(function(){b=P("foo@sencha.com");a=P("bar@sencha.com");Z=P("baz@sencha.com")});afterEach(function(){b=a=Z=null});it("should move the records to the specified position",function(){I.insert(2,[b,Q]);expect(I.indexOf(b)).toBe(1);expect(I.indexOf(Q)).toBe(2)});it("should only mark existing records as moving",function(){V();I.insert(2,[b,Q]);var c={"ed@sencha.com":1};expect(X).toEqual(c);expect(I.isMoving([b,Q])).toBe(0);expect(I.isMoving()).toBe(0)})})})});describe("via edits that cause position changes",function(){beforeEach(function(){I.getSorters().add({property:"name",direction:"ASC"})});it("should move the record to the correct position",function(){A.set("name","cccc");expect(I.indexOf(A)).toBe(2)});it("should be moving during the add & remove event",function(){V();A.set("name","cccc");var Z={"tommy@sencha.com":1};expect(X).toEqual(Z);expect(I.isMoving(A)).toBe(0);expect(I.isMoving()).toBe(0)})});describe("isMoving",function(){describe("no records",function(){it("should return 0 when no records are moving",function(){expect(I.isMoving()).toBe(0)});it("should return 1 when a single record is moving",function(){var Z;I.on("refresh",function(){Z=I.isMoving()});I.add(Q);expect(Z).toBe(1)});it("should return the amount of moving records",function(){var Z;I.on("refresh",function(){Z=I.isMoving()});I.add([Q,U]);expect(Z).toBe(2)})});describe("single record",function(){it("should return 0 when the record is not moving",function(){expect(I.isMoving(Q)).toBe(0)});it("should return 1 when the record is moving",function(){var Z;I.on("refresh",function(){Z=I.isMoving(Q)});I.add(Q);expect(Z).toBe(1)})});describe("multiple records",function(){it("should return 0 for an empty array",function(){expect(I.isMoving([])).toBe(0)});it("should return the number of moving records",function(){var Z;I.on("refresh",function(){Z=I.isMoving([Q,U,O,A])});I.add([Q,U]);expect(Z).toBe(2)})})})})});describe("removing",function(){beforeEach(function(){M();K()});describe("remove",function(){describe("single record",function(){it("should remove a single record",function(){I.remove(U);expect(I.getCount()).toBe(3);expect(I.indexOf(U)).toBe(-1)});it("should return an array",function(){expect(I.remove(O)).toEqual([O])});it("should return an empty array if the item is not in the store",function(){var V=P("foo@sencha.com");expect(I.remove(V)).toEqual([])})});describe("array of records",function(){it("should remove an array",function(){I.remove([U,A]);expect(I.getCount()).toBe(2);expect(I.indexOf(U)).toBe(-1);expect(I.indexOf(A)).toBe(-1)});it("should return an array, not mutated",function(){var W=[Q,O],V=I.remove(W);expect(V).toEqual([Q,O]);expect(V).not.toBe(W)});it("should return an empty array if the array is empty",function(){expect(I.remove([])).toEqual([])});it("should only return records that could be removed",function(){var V=P("foo@sencha.com");expect(I.remove([Q,V,A])).toEqual([Q,A])})});it("should shift other items into the correct position",function(){I.remove([Q,A]);expect(I.indexOf(U)).toBe(0);expect(I.indexOf(O)).toBe(1)});describe("events",function(){var V;beforeEach(function(){V=jasmine.createSpy()});describe("a single record",function(){it("should fire the remove event, passing the store, array of records & index",function(){I.on("remove",V);I.remove(O);expect(V.callCount).toBe(1);var W=V.mostRecentCall.args;expect(W[0]).toBe(I);expect(W[1]).toEqual([O]);expect(W[2]).toBe(2)});it("should fire the datachanged event",function(){I.on("datachanged",V);I.remove(Q);expect(V.callCount).toBe(1);var W=V.mostRecentCall.args;expect(W[0]).toBe(I)});describe("invalid cases",function(){it("should not fire an event if the record is null",function(){I.on("remove",V);I.remove(null);expect(V).not.toHaveBeenCalled()});it("should not fire an event if the record is not in the store",function(){I.on("remove",V);I.remove(P("foo@sencha.com"));expect(V).not.toHaveBeenCalled()})})});describe("multiple records",function(){describe("contiguous range",function(){it("should fire the remove event, passing the store, array of records & index",function(){I.on("remove",V);I.remove([U,O]);expect(V.callCount).toBe(1);var W=V.mostRecentCall.args;expect(W[0]).toBe(I);expect(W[1]).toEqual([U,O]);expect(W[2]).toBe(1)});it("should fire the datachanged event",function(){I.on("datachanged",V);I.remove([U,O]);expect(V.callCount).toBe(1);var W=V.mostRecentCall.args;expect(W[0]).toBe(I)})});describe("discontiguous range",function(){var W;beforeEach(function(){I.removeAll();W=[];for(var X=0;X<10;++X){W.push(P("user"+X+"@sencha.com"))}I.add(W)});it("should fire a remove event for each contiguous chunk, with highest indexes first",function(){I.on("remove",V);I.remove([W[1],W[4],W[2],W[6],W[7],W[0]]);expect(V.callCount).toBe(3);var X=V.calls[0].args;expect(X[0]).toBe(I);expect(X[1]).toEqual([W[6],W[7]]);expect(X[2]).toBe(6);X=V.calls[1].args;expect(X[0]).toBe(I);expect(X[1]).toEqual([W[4]]);expect(X[2]).toBe(4);X=V.calls[2].args;expect(X[0]).toBe(I);expect(X[1]).toEqual([W[0],W[1],W[2]]);expect(X[2]).toBe(0)});it("should fire a single datachanged event",function(){I.on("datachanged",V);I.remove([W[1],W[4],W[2],W[6],W[7],W[0]]);expect(V.callCount).toBe(1)})});describe("invalid cases",function(){it("should not fire when the array is empty",function(){I.on({remove:V,datachanged:V});I.on("remove",V);I.remove([]);expect(V).not.toHaveBeenCalled()});it("should not fire when the array is stripped of items not in the store",function(){I.on({remove:V,datachanged:V});I.remove([P("foo@sencha.com")]);expect(V).not.toHaveBeenCalled()})})})})});describe("removeAt",function(){it("should remove the record at the specified index",function(){I.removeAt(1);expect(I.indexOf(U)).toBe(-1)});it("should do nothing if the index is larger than the store size",function(){I.removeAt(100);expect(I.getCount()).toBe(4)});describe("with count",function(){it("should remove a single item with count = 1",function(){I.removeAt(2,1);expect(I.getCount()).toBe(3);expect(I.indexOf(O)).toBe(-1)});it("should remove the counted amount of items",function(){I.removeAt(0,3);expect(I.getCount()).toBe(1);expect(I.indexOf(Q)).toBe(-1);expect(I.indexOf(U)).toBe(-1);expect(I.indexOf(O)).toBe(-1)});it("should clip the count to the collection size",function(){I.removeAt(2,50);expect(I.getCount()).toBe(2);expect(I.indexOf(O)).toBe(-1);expect(I.indexOf(A)).toBe(-1)})});describe("events",function(){var V;beforeEach(function(){V=jasmine.createSpy()});it("should fire a remove event with the removed records",function(){I.on("remove",V);I.removeAt(1,2);expect(V.callCount).toBe(1);var W=V.mostRecentCall.args;expect(W[0]).toBe(I);expect(W[1]).toEqual([U,O]);expect(W[2]).toBe(1)});it("should fire a datachanged event",function(){I.on("datachanged",V);I.removeAt(1,2);expect(V.callCount).toBe(1);var W=V.mostRecentCall.args;expect(W[0]).toBe(I)});describe("invalid cases",function(){it("should not fire when the index is greater than the store bounds",function(){I.on({remove:V,datachanged:V});I.removeAt(100);expect(V).not.toHaveBeenCalled()})})})});describe("removeAll",function(){it("should remove all records from the store",function(){I.removeAll();expect(I.getCount()).toBe(0)});it("should do nothing if the store is empty",function(){I.destroy();M();I.removeAll();expect(I.getCount()).toBe(0)});describe("when filtered",function(){it("should only remove items in the active collection",function(){I.filter("group","code");I.removeAll();expect(I.getCount()).toBe(0);I.getFilters().removeAll();expect(I.getCount()).toBe(2);expect(I.getAt(0)).toBe(U);expect(I.getAt(1)).toBe(O)})});it("should return the removed records",function(){M();var V=I.getRange();expect(I.removeAll()).toEqual(V)});it("should return an empty array if the store is empty",function(){M();I.removeAll();expect(I.removeAll()).toEqual([])});describe("events",function(){var V;beforeEach(function(){V=jasmine.createSpy()});it("should not fire any remove events",function(){I.on("remove",V);I.removeAll();expect(V).not.toHaveBeenCalled()});it("should fire the clear event and pass the current records",function(){var W=I.getRange();I.on("clear",V);I.removeAll();expect(V.callCount).toBe(1);expect(V.mostRecentCall.args[0]).toBe(I);expect(V.mostRecentCall.args[1]).toEqual(W)});it("should fire the datachanged event",function(){I.on("datachanged",V);I.removeAll();expect(V.callCount).toBe(1)});describe("with silent: true",function(){it("should not fire the clear event",function(){I.on("clear",V);I.removeAll(true);expect(V).not.toHaveBeenCalled()});it("should not fire the datachanged event",function(){I.on("datachanged",V);I.removeAll(true);expect(V).not.toHaveBeenCalled()})});it("should be able to fire remove events after calling removeAll",function(){I.removeAll();I.add({},{},{});I.on("remove",V);I.removeAt(0);expect(V.callCount).toBe(1)})})});describe("getRemovedRecords",function(){it("should be empty by default",function(){expect(I.getRemovedRecords()).toEqual([])});it("should return removed records",function(){I.remove(Q);I.remove(O);expect(I.getRemovedRecords()).toEqual([Q,O])});it("should return a copy of the records, modifying the value should not mutate the records",function(){I.remove(Q);I.remove(O);var V=I.getRemovedRecords();V.splice(0,2);expect(V).toEqual([]);expect(I.getRemovedRecords()).toEqual([Q,O])});it("should exclude phantom records",function(){var V=new spec.User();I.add(V);I.remove(V);expect(I.getRemovedRecords()).toEqual([])});it("should exclude re-added records",function(){I.remove(Q);I.add(Q);expect(I.getRemovedRecords()).toEqual([])});it("should be cleared after calling rejectChanges",function(){I.remove(Q);I.rejectChanges();expect(I.getRemovedRecords()).toEqual([])});it("should be cleared after calling commitChanges",function(){I.remove(Q);I.commitChanges();expect(I.getRemovedRecords()).toEqual([])});describe("clearRemovedOnLoad",function(){describe("clearRemovedOnLoad: true",function(){it("should clear removed records",function(){I.setClearRemovedOnLoad(true);I.remove(Q);I.loadData([]);expect(I.getRemovedRecords()).toEqual([])})});describe("clearRemovedOnLoad: false",function(){it("should not clear removed records",function(){I.setClearRemovedOnLoad(false);I.remove(Q);I.loadData([]);expect(I.getRemovedRecords()).toEqual([Q])})})})})});describe("loading",function(){describe("an empty store",function(){it("should allow an empty store to load",function(){expect(function(){Ext.StoreMgr.get("ext-empty-store").load()}).not.toThrow()});it("should return an empty result set",function(){expect(Ext.StoreMgr.get("ext-empty-store").load().getCount()).toBe(0)})});describe("loadCount",function(){it("should default to 0",function(){M();expect(I.loadCount).toBe(0)});describe("construction",function(){it("should increment the loadCount when passing data with no proxy",function(){M({data:[D]});expect(I.loadCount).toBe(1)});it("should increment the loadCount when passing data with a memory proxy",function(){M({proxy:{type:"memory"},data:[D]});expect(I.loadCount).toBe(1)})});describe("with no proxy",function(){beforeEach(function(){M()});it("should increment when using loadRecords",function(){I.loadRecords([P("foo@sencha.com")]);expect(I.loadCount).toBe(1)});it("should increment when using loadData",function(){I.loadData([G]);expect(I.loadCount).toBe(1)})});describe("with a proxy",function(){beforeEach(function(){M({proxy:{type:"ajax",url:"/foo"}})});it("should increment on a successful load with no records",function(){I.load();L([]);expect(I.loadCount).toBe(1)});it("should increment on a successful load with records",function(){I.load();L([D,R]);expect(I.loadCount).toBe(1)});it("should not increment on an unsuccessful load",function(){I.load();J(500);expect(I.loadCount).toBe(0)})});it("should increment for each load",function(){M({proxy:{type:"ajax",url:"/foo"}});for(var V=0;V<5;++V){I.load();L([])}expect(I.loadCount).toBe(5)})});describe("local data",function(){describe("loadData",function(){beforeEach(function(){M()});it("should create model instances",function(){I.loadData([B,D]);expect(I.first().get("name")).toBe("Ed Spencer");expect(I.last().get("name")).toBe("Abe Elias");expect(I.getCount()).toBe(2)});it("should accept model instances",function(){Q=P(B);U=P(D);O=P(R);I.loadData([Q,U,O]);expect(I.first()).toBe(Q);expect(I.getAt(1)).toBe(U);expect(I.last()).toBe(O);expect(I.getCount()).toBe(3)});it("should clear existing records by default",function(){K();I.loadData([{email:"foo@sencha.com"}]);expect(I.first().get("email")).toBe("foo@sencha.com");expect(I.getCount()).toBe(1)});it("should append records to the end when using append: true",function(){K();I.loadData([{email:"foo@sencha.com"}],true);expect(I.last().get("email")).toBe("foo@sencha.com");expect(I.getCount()).toBe(5)});describe("when filtered",function(){it("should clear filtered out records",function(){K();I.getFilters().add({property:"email",value:"ed@sencha.com"});expect(I.getCount()).toBe(1);I.loadData([{email:"a@sencha.com"},{email:"b@sencha.com"}]);expect(I.getCount()).toBe(0);I.getFilters().removeAll();expect(I.getCount()).toBe(2);expect(I.getAt(0).getId()).toBe("a@sencha.com");expect(I.getAt(1).getId()).toBe("b@sencha.com");expect(I.indexOf(Q)).toBe(-1)});it("should include only matching records",function(){K();I.getFilters().add({property:"group",value:"code"});expect(I.getCount()).toBe(2);I.loadData([{email:"a@sencha.com",group:"admin"},{email:"b@sencha.com",group:"code"}]);expect(I.getCount()).toBe(1);expect(I.getAt(0).getId()).toBe("b@sencha.com");I.getFilters().removeAll();expect(I.getCount()).toBe(2);expect(I.getAt(0).getId()).toBe("a@sencha.com");expect(I.getAt(1).getId()).toBe("b@sencha.com");expect(I.indexOf(Q)).toBe(-1);expect(I.indexOf(A)).toBe(-1)})});describe("events",function(){var V;beforeEach(function(){V=jasmine.createSpy()});it("should fire a datachanged event",function(){I.on("datachanged",V);I.loadData([B]);expect(V.callCount).toBe(1);expect(V.mostRecentCall.args[0]).toBe(I)});it("should fire a refresh event",function(){I.on("refresh",V);I.loadData([B]);expect(V.callCount).toBe(1);expect(V.mostRecentCall.args[0]).toBe(I)});it("should not fire any add events",function(){I.on("add",V);I.loadData([G]);expect(V).not.toHaveBeenCalled()});it("should not fire any remove event when records are being cleared",function(){I.on("remove",V);I.loadData([G]);expect(V).not.toHaveBeenCalled()})})});describe("loadRecords",function(){beforeEach(function(){M()});it("should accept model instances",function(){Q=P(B);U=P(D);O=P(R);I.loadRecords([Q,U,O]);expect(I.first()).toBe(Q);expect(I.getAt(1)).toBe(U);expect(I.last()).toBe(O);expect(I.getCount()).toBe(3)});it("should clear existing records by default",function(){K();var V=P("foo@sencha.com");I.loadRecords([V]);expect(I.first().get("email")).toBe("foo@sencha.com");expect(I.getCount()).toBe(1)});it("should append records to the end when using append: true",function(){K();var V=P("foo@sencha.com");I.loadRecords([V],{addRecords:true});expect(I.last()).toBe(V);expect(I.getCount()).toBe(5)});describe("when filtered",function(){it("should clear filtered out records",function(){K();I.getFilters().add({property:"email",value:"ed@sencha.com"});expect(I.getCount()).toBe(1);I.loadRecords([P("a@sencha.com"),P("b@sencha.com")]);expect(I.getCount()).toBe(0);I.getFilters().removeAll();expect(I.getCount()).toBe(2);expect(I.getAt(0).getId()).toBe("a@sencha.com");expect(I.getAt(1).getId()).toBe("b@sencha.com");expect(I.indexOf(Q)).toBe(-1)});it("should include only matching records",function(){K();I.getFilters().add({property:"group",value:"code"});expect(I.getCount()).toBe(2);I.loadRecords([P("a@sencha.com",{group:"admin"}),P("b@sencha.com",{group:"code"})]);expect(I.getCount()).toBe(1);expect(I.getAt(0).getId()).toBe("b@sencha.com");I.getFilters().removeAll();expect(I.getCount()).toBe(2);expect(I.getAt(0).getId()).toBe("a@sencha.com");expect(I.getAt(1).getId()).toBe("b@sencha.com");expect(I.indexOf(Q)).toBe(-1);expect(I.indexOf(A)).toBe(-1)})});describe("events",function(){var V;beforeEach(function(){V=jasmine.createSpy()});it("should fire a datachanged event",function(){I.on("datachanged",V);I.loadRecords([P(B)]);expect(V.callCount).toBe(1);expect(V.mostRecentCall.args[0]).toBe(I)});it("should fire a refresh event",function(){I.on("refresh",V);I.loadRecords([P(B)]);expect(V.callCount).toBe(1);expect(V.mostRecentCall.args[0]).toBe(I)});it("should not fire any add events",function(){I.on("add",V);I.loadRecords([P(G)]);expect(V).not.toHaveBeenCalled()});it("should not fire any remove event when records are being cleared",function(){I.on("remove",V);I.loadRecords([P(G)]);expect(V).not.toHaveBeenCalled()})})});describe("loadRawData",function(){beforeEach(function(){Ext.define("spec.UserWithReader",{extend:"Ext.data.Model",idProperty:"email",fields:["email",{name:"name",mapping:"person"}],proxy:{type:"memory",reader:{type:"json",rootProperty:"data",successProperty:"success",totalProperty:"myTotal"}}});M({model:"spec.UserWithReader"})});afterEach(function(){Ext.undefine("spec.UserWithReader")});describe("reader processing",function(){it("should pass the data through the proxy reader",function(){I.loadRawData({success:true,data:[{email:"foo@sencha.com",person:"The name"}]});var V=I.first();expect(V.$className).toBe("spec.UserWithReader");expect(V.get("name")).toBe("The name")});it("should read the totalCount",function(){I.loadRawData({success:true,myTotal:9876,data:[]});expect(I.getTotalCount()).toBe(9876)});it("should return true when the records are read",function(){var V=I.loadRawData({success:true,data:[{email:"foo@sencha.com",person:"The name"}]});expect(V).toBe(true)});it("should return false if the reader can't read the data and load no records",function(){var V=I.loadRawData({success:false,data:[{email:"foo@sencha.com",person:"Name1"}]});expect(V).toBe(false);expect(I.getCount()).toBe(0)})});it("should clear existing records by default",function(){K();I.loadRawData({success:true,data:[{email:"foo@sencha.com"}]});expect(I.first().get("email")).toBe("foo@sencha.com");expect(I.getCount()).toBe(1)});it("should append records to the end when using append: true",function(){K();I.loadRawData({success:true,data:[{email:"foo@sencha.com"}]},{addRecords:true});expect(I.last().get("email")).toBe("foo@sencha.com");expect(I.getCount()).toBe(5)});describe("when filtered",function(){it("should clear filtered out records",function(){K();I.getFilters().add({property:"email",value:"ed@sencha.com"});expect(I.getCount()).toBe(1);I.loadRawData([{email:"a@sencha.com"},{email:"b@sencha.com"}]);expect(I.getCount()).toBe(0);I.getFilters().removeAll();expect(I.getCount()).toBe(2);expect(I.getAt(0).getId()).toBe("a@sencha.com");expect(I.getAt(1).getId()).toBe("b@sencha.com");expect(I.indexOf(Q)).toBe(-1)});it("should include only matching records",function(){K();I.getFilters().add({property:"group",value:"code"});expect(I.getCount()).toBe(2);I.loadRawData([{email:"a@sencha.com",group:"admin"},{email:"b@sencha.com",group:"code"}]);expect(I.getCount()).toBe(1);expect(I.getAt(0).getId()).toBe("b@sencha.com");I.getFilters().removeAll();expect(I.getCount()).toBe(2);expect(I.getAt(0).getId()).toBe("a@sencha.com");expect(I.getAt(1).getId()).toBe("b@sencha.com");expect(I.indexOf(Q)).toBe(-1);expect(I.indexOf(A)).toBe(-1)})});describe("events",function(){var V,W;beforeEach(function(){V=jasmine.createSpy();W={success:true,data:[{email:"foo@sencha.com"}]}});it("should fire a datachanged event",function(){I.on("datachanged",V);I.loadRawData(W);expect(V.callCount).toBe(1);expect(V.mostRecentCall.args[0]).toBe(I)});it("should fire a refresh event",function(){I.on("refresh",V);I.loadRawData(W);expect(V.callCount).toBe(1);expect(V.mostRecentCall.args[0]).toBe(I)});it("should not fire any add events",function(){I.on("add",V);I.loadRawData(W);expect(V).not.toHaveBeenCalled()});it("should not fire any remove event when records are being cleared",function(){I.on("remove",V);I.loadRawData(W);expect(V).not.toHaveBeenCalled()})})})});describe("loading remote data",function(){var V;beforeEach(function(){V={success:true,data:[{email:"foo@sencha.com"}]};M({proxy:{type:"ajax",url:"foo",reader:{type:"json",successProperty:"success",rootProperty:"data"}}})});describe("setting options on the operation",function(){var W,X;function Y(){return W.mostRecentCall.args[0]}beforeEach(function(){W=spyOn(I.getProxy(),"read").andReturn();X=spyOn(I.getData(),"sortItems").andCallThrough()});describe("sorters",function(){function Z(b,a){return{property:b,direction:a}}it("should pass along sorters if remoteSort: true",function(){var a=F(I,"beforesort"),b;I.setRemoteSort(true);I.getSorters().add(Z("email","ASC"));expect(a.callCount).toBe(1);expect(a.calls[0].args[1]).toEqual(I.getSorters().getRange());I.getSorters().add(Z("evilness","DESC"));expect(a.callCount).toBe(2);expect(a.calls[1].args[1]).toEqual(I.getSorters().getRange());I.load();expect(a.callCount).toBe(3);expect(a.calls[2].args[1]).toEqual(I.getSorters().getRange());b=Y().getSorters();expect(b[0].getProperty()).toBe("email");expect(b[0].getDirection()).toBe("ASC");expect(b[1].getProperty()).toBe("evilness");expect(b[1].getDirection()).toBe("DESC");expect(X).not.toHaveBeenCalled()});it("should not pass sorters if there are none",function(){I.setRemoteSort(true);I.load();expect(Y().getSorters()).toBeUndefined();expect(X).not.toHaveBeenCalled()});it("should not pass sorters if remoteSort: false",function(){var a=F(I,"beforesort");I.setRemoteSort(false);I.getSorters().add(Z("email","ASC"));expect(a.callCount).toBe(1);expect(a.calls[0].args[1]).toEqual(I.getSorters().getRange());I.getSorters().add(Z("evilness","DESC"));expect(a.callCount).toBe(2);expect(a.calls[1].args[1]).toEqual(I.getSorters().getRange());I.load();expect(Y().getSorters()).toBeUndefined();expect(X.callCount).toBe(2)})});describe("grouper",function(){function Z(b,a){return{property:b,direction:a}}it("should pass along the grouper if remoteSort: true",function(){I.setRemoteSort(true);I.setGrouper(Z("group","ASC"));I.load();var a=Y().getGrouper();expect(a.getProperty()).toBe("group");expect(a.getDirection()).toBe("ASC")});it("should pass the grouper if there isn't one",function(){I.setRemoteSort(true);I.load();expect(Y().getGrouper()).toBeUndefined()});it("should pass the grouper if remoteSort: false",function(){I.setRemoteSort(false);I.setGrouper(Z("group","ASC"));I.load();expect(Y().getGrouper()).toBeUndefined()});it("should sort a grouped store according to the group field and then sorters",function(){var a=0,c=Ext.define(null,{extend:"Ext.data.Model",idProperty:"taskId",fields:[{name:"projectId",type:"int"},{name:"project",type:"string"},{name:"taskId",type:"int"},{name:"description",type:"string"},{name:"estimate",type:"float"},{name:"rate",type:"float"},{name:"due",type:"date",dateFormat:"m/d/Y"}]});var b=[{projectId:100,project:"Ext Forms: Field Anchoring",taskId:112,description:"Integrate 2.0 Forms with 2.0 Layouts",estimate:6,rate:150,due:"06/24/2007"},{projectId:100,project:"Ext Forms: Field Anchoring",taskId:113,description:"Implement AnchorLayout",estimate:4,rate:150,due:"06/25/2007"},{projectId:100,project:"Ext Forms: Field Anchoring",taskId:114,description:"Add support for multiple<br>types of anchors",estimate:4,rate:150,due:"06/27/2007"},{projectId:100,project:"Ext Forms: Field Anchoring",taskId:115,description:"Testing and debugging",estimate:8,rate:0,due:"06/29/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:101,description:'Add required rendering "hooks" to GridView',estimate:6,rate:100,due:"07/01/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:102,description:"Extend GridView and override rendering functions",estimate:6,rate:100,due:"07/03/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:103,description:"Extend Store with grouping functionality",estimate:4,rate:100,due:"07/04/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:121,description:"Default CSS Styling",estimate:2,rate:100,due:"07/05/2007"},{projectId:101,project:"Ext Grid: Single-level Grouping",taskId:104,description:"Testing and debugging",estimate:6,rate:100,due:"07/06/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:105,description:"Ext Grid plugin integration",estimate:4,rate:125,due:"07/01/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:106,description:"Summary creation during rendering phase",estimate:4,rate:125,due:"07/02/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:107,description:"Dynamic summary updates in editor grids",estimate:6,rate:125,due:"07/05/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:108,description:"Remote summary integration",estimate:4,rate:125,due:"07/05/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:109,description:"Summary renderers and calculators",estimate:4,rate:125,due:"07/06/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:110,description:"Integrate summaries with GroupingView",estimate:10,rate:125,due:"07/11/2007"},{projectId:102,project:"Ext Grid: Summary Rows",taskId:111,description:"Testing and debugging",estimate:8,rate:125,due:"07/15/2007"}];I=Ext.create("Ext.data.Store",{model:c,data:b,sorters:{property:"due",direction:"ASC"},groupField:"project"});expect(I.getAt(0).get("taskId")).toBe(112);expect(I.getAt(1).get("taskId")).toBe(113);expect(I.getAt(2).get("taskId")).toBe(114);expect(I.getAt(3).get("taskId")).toBe(115);expect(I.getAt(4).get("taskId")).toBe(101);expect(I.getAt(5).get("taskId")).toBe(102);expect(I.getAt(6).get("taskId")).toBe(103);expect(I.getAt(7).get("taskId")).toBe(121);expect(I.getAt(8).get("taskId")).toBe(104);expect(I.getAt(9).get("taskId")).toBe(105);expect(I.getAt(10).get("taskId")).toBe(106);expect(I.getAt(11).get("taskId")).toBe(107);expect(I.getAt(12).get("taskId")).toBe(108);expect(I.getAt(13).get("taskId")).toBe(109);expect(I.getAt(14).get("taskId")).toBe(110);expect(I.getAt(15).get("taskId")).toBe(111);I.on({sort:function(){expect(I.getAt(0).get("taskId")).toBe(113);expect(I.getAt(1).get("taskId")).toBe(114);expect(I.getAt(2).get("taskId")).toBe(112);expect(I.getAt(3).get("taskId")).toBe(115);expect(I.getAt(4).get("taskId")).toBe(121);expect(I.getAt(5).get("taskId")).toBe(103);expect(I.getAt(6).get("taskId")).toBe(101);expect(I.getAt(7).get("taskId")).toBe(102);expect(I.getAt(8).get("taskId")).toBe(104);expect(I.getAt(9).get("taskId")).toBe(105);expect(I.getAt(10).get("taskId")).toBe(106);expect(I.getAt(11).get("taskId")).toBe(108);expect(I.getAt(12).get("taskId")).toBe(109);expect(I.getAt(13).get("taskId")).toBe(107);expect(I.getAt(14).get("taskId")).toBe(111);expect(I.getAt(15).get("taskId")).toBe(110);a++}});I.sort("estimate",undefined,"replace");expect(a).toBe(1)})});describe("filters",function(){function Z(b,a){return{property:b,value:a}}it("should pass along filters if remoteFilter: true",function(){I.setRemoteFilter(true);I.getFilters().add(Z("email","ed@sencha.com"));I.getFilters().add(Z("evilness",100));I.load();var a=Y().getFilters();expect(a[0].getProperty()).toBe("email");expect(a[0].getValue()).toBe("ed@sencha.com");expect(a[1].getProperty()).toBe("evilness");expect(a[1].getValue()).toBe(100)});it("should not pass filters if there are none",function(){I.setRemoteFilter(true);I.load();expect(Y().getFilters()).toBeUndefined()});it("should not pass filters if remoteFilter: false",function(){I.setRemoteFilter(false);I.getFilters().add(Z("email","ed@sencha.com"));I.getFilters().add(Z("evilness",100));I.load();expect(Y().getFilters()).toBeUndefined()})});describe("params",function(){it("should pass along params",function(){I.load({params:{foo:"bar"}});expect(Y().getParams()).toEqual({foo:"bar"})})});describe("paging",function(){describe("page",function(){it("should use the passed page",function(){I.load({page:7});expect(Y().getPage()).toBe(7)});it("should set the store currentPage",function(){I.load({page:7});expect(I.currentPage).toBe(7)});it("should default to the current page in the store",function(){I.load();expect(Y().getPage()).toBe(I.currentPage)})});describe("start",function(){it("should use the passed start",function(){I.load({start:100});expect(Y().getStart()).toBe(100)});it("should calculate the start based on the page & pageSize",function(){I.setPageSize(50);I.currentPage=13;I.load();expect(Y().getStart()).toBe(600)})});describe("limit",function(){it("should used the passed limit",function(){I.load({limit:12});expect(Y().getLimit()).toBe(12)});it("should default to the page size",function(){I.load();expect(Y().getLimit()).toBe(I.getPageSize())})});describe("with paging disabled",function(){beforeEach(function(){I.setPageSize(0)});describe("page",function(){it("should use the passed page",function(){I.load({page:7});expect(Y().getPage()).toBe(7)});it("should not default a page param",function(){I.load();expect(Y().getPage()).toBeUndefined()})});describe("start",function(){it("should use the passed start",function(){I.load({start:100});expect(Y().getStart()).toBe(100)});it("should not default the start",function(){I.load();expect(Y().getStart()).toBeUndefined()})});describe("limit",function(){it("should used the passed limit",function(){I.load({limit:12});expect(Y().getLimit()).toBe(12)});it("should not default the limit",function(){I.load();expect(Y().getLimit()).toBeUndefined()})})})})});describe("isLoading",function(){it("should not be loading by default",function(){expect(I.isLoading()).toBe(false)});it("should be loading once a remote request is triggered",function(){I.load();expect(I.isLoading()).toBe(true)});it("should not be loading when the server returns a successful response",function(){I.load();L(V);expect(I.isLoading()).toBe(false)});it("should not be loading when the server returns a failed response",function(){I.load();L({success:false});expect(I.isLoading()).toBe(false)})});describe("callbacks",function(){var W;beforeEach(function(){W=jasmine.createSpy()});describe("function paramter",function(){it("should accept a function",function(){I.load(W);L(V);expect(W.callCount).toBe(1)});it("should default the scope to the store",function(){I.load(W);L(V);expect(W.mostRecentCall.object).toBe(I)})});describe("object paramter",function(){it("should take a callback parameter",function(){I.load({callback:W});L(V);expect(W.callCount).toBe(1)});it("should use a passed scope",function(){I.load({callback:W,scope:H});L(V);expect(W.mostRecentCall.object).toBe(H)});it("should default the scope to the store",function(){I.load({callback:W});L(V);expect(W.mostRecentCall.object).toBe(I)})});describe("arguments",function(){var X;beforeEach(function(){X=spyOn(I.getProxy(),"read").andCallThrough()});describe("on success",function(){it("should pass the records, the operation and success status",function(){I.load(W);L({success:true,data:[{email:"user1@sencha.com"},{email:"user2@sencha.com"}]});var Y=W.mostRecentCall.args;expect(Y[0][0].get("email")).toBe("user1@sencha.com");expect(Y[0][1].get("email")).toBe("user2@sencha.com");expect(Y[1]).toBe(X.mostRecentCall.args[0]);expect(Y[2]).toBe(true)})});describe("on failure",function(){it("should pass empty records, the operation and success status",function(){I.load(W);L({success:false});var Y=W.mostRecentCall.args;expect(Y[0]).toEqual([]);expect(Y[1]).toBe(X.mostRecentCall.args[0]);expect(Y[2]).toBe(false)})})});describe("when the callback is triggered",function(){it("should not have the store loading",function(){var X;I.load(function(){X=I.isLoading()});L(V);expect(X).toBe(false)});it("should have populated the store",function(){var X;I.load(function(){X=I.getCount()});L(V);expect(X).toBe(1)});it("should fire after the load event",function(){var Y,X=jasmine.createSpy();I.on("load",X);I.load(function(){Y=X.callCount===1});L(V);expect(Y).toBe(true)})})});describe("events",function(){var X,W;beforeEach(function(){X=jasmine.createSpy();W=spyOn(I.getProxy(),"read").andCallThrough()});describe("beforeload",function(){it("should fire the beforeload event",function(){I.on("beforeload",X);I.load();expect(X.callCount).toBe(1)});it("should pass the store and the operation",function(){I.on("beforeload",X);I.load();var Y=X.mostRecentCall.args;expect(Y[0]).toBe(I);expect(Y[1] instanceof Ext.data.operation.Read).toBe(true)});it("should not be loading when the beforeload event is fired",function(){var Y;I.on("beforeload",function(){Y=I.isLoading()});I.load();expect(Y).toBe(false)});it("should not continue with the load if false is returned",function(){I.on("beforeload",function(){return false});I.load();expect(I.isLoading()).toBe(false);expect(W).not.toHaveBeenCalled()})});describe("load",function(){describe("on success",function(){it("should fire with the store, records and the success param",function(){I.on("load",X);I.load();L(V);var Y=X.mostRecentCall.args;expect(Y[0]).toBe(I);expect(Y[1][0].get("email")).toBe("foo@sencha.com");expect(Y[2]).toBe(true)})});describe("on failure",function(){it("should fire with the store, an empty record array and the success param",function(){I.on("load",X);I.load();L({success:false});var Y=X.mostRecentCall.args;expect(Y[0]).toBe(I);expect(Y[1]).toEqual([]);expect(Y[2]).toBe(false)})});describe("when the event is triggered",function(){it("should not be loading",function(){var Y;I.on("load",function(){Y=I.isLoading()});I.load();L(V);expect(Y).toBe(false)});it("should be populated with records",function(){var Y;I.on("load",function(){Y=I.getCount()});I.load();L(V);expect(Y).toBe(1)})})})});describe("after the load completes",function(){it("should clear existing records by default",function(){K();I.load();L(V);expect(I.first().get("email")).toBe("foo@sencha.com");expect(I.getCount()).toBe(1)});it("should append records to the end when using append: true",function(){K();I.load({addRecords:true});L(V);expect(I.last().get("email")).toBe("foo@sencha.com");expect(I.getCount()).toBe(5)});describe("events",function(){var W;beforeEach(function(){W=jasmine.createSpy()});it("should fire a datachanged event",function(){I.on("datachanged",W);I.load();L(V);expect(W.callCount).toBe(1);expect(W.mostRecentCall.args[0]).toBe(I)});it("should fire a refresh event",function(){I.on("refresh",W);I.load();L(V);expect(W.callCount).toBe(1);expect(W.mostRecentCall.args[0]).toBe(I)});it("should not fire any add events",function(){I.on("add",W);I.load();L(V);expect(W).not.toHaveBeenCalled()});it("should not fire any remove event when records are being cleared",function(){I.on("remove",W);I.load();L(V);expect(W).not.toHaveBeenCalled()})})});describe("reload",function(){it("should be able to be called if load was never called",function(){var W=jasmine.createSpy();I.reload({callback:W});L(V);expect(W.callCount).toBe(1)});it("should use the params from the last load",function(){I.load({params:{foo:"bar"}});L(V);var W=spyOn(I.getProxy(),"read").andReturn();I.reload();expect(W.mostRecentCall.args[0].getParams()).toEqual({foo:"bar"})})})})});describe("paging",function(){var W,V;function X(){return V.mostRecentCall.args[0]}beforeEach(function(){W={success:true,data:[{email:"foo@sencha.com"}]};M({proxy:{type:"ajax",url:"foo",reader:{type:"json",successProperty:"success",rootProperty:"data"}}});V=spyOn(I.getProxy(),"read").andCallThrough()});it("should default the current page to 1",function(){expect(I.currentPage).toBe(1)});describe("previousPage",function(){it("should call loadPage with the current page - 1 and pass the options",function(){var Y={};spyOn(I,"loadPage").andReturn();I.currentPage=9;I.previousPage(Y);expect(I.loadPage).toHaveBeenCalledWith(8,Y);expect(I.loadPage.callCount).toBe(1)})});describe("nextPage",function(){it("should call loadPage with the current page + 1 and pass the options",function(){var Y={};spyOn(I,"loadPage").andReturn();I.currentPage=3;I.nextPage(Y);expect(I.loadPage).toHaveBeenCalledWith(4,Y);expect(I.loadPage.callCount).toBe(1)})});describe("params passed to the proxy",function(){describe("page",function(){it("should favour a passed page param",function(){I.loadPage(10,{page:1234});expect(X().getPage()).toBe(1234)});it("should use the passed the page",function(){I.loadPage(10);expect(X().getPage()).toBe(10)})});describe("start",function(){it("should favour a passed start param",function(){I.loadPage(3,{start:789});expect(X().getStart()).toBe(789)});it("should calculate the start based off the pageSize",function(){I.loadPage(2);expect(X().getStart()).toBe(25)})});describe("limit",function(){it("should favour a passed limit param",function(){I.loadPage(3,{limit:456});expect(X().getLimit()).toBe(456)});it("should set the limit to be the pageSize",function(){I.loadPage(2);expect(X().getLimit()).toBe(I.getPageSize())})});describe("other params",function(){it("should pass the params object",function(){I.loadPage(1,{params:{custom:true}});expect(X().getParams()).toEqual({custom:true})})})});describe("after load",function(){it("should set the currentPage",function(){I.loadPage(12);expect(I.currentPage).toBe(12)});it("should clear existing records when using clearOnPageLoad: true",function(){I.setClearOnPageLoad(true);I.setPageSize(1);I.loadPage(1);L({success:true,data:[{email:"user1@sencha.com"}]});I.loadPage(2);L({success:true,data:[{email:"user2@sencha.com"}]});expect(I.getCount()).toBe(1);expect(I.indexOfId("user1@sencha.com")).toBe(-1);expect(I.indexOfId("user2@sencha.com")).toBe(0)});it("should not clear existing records when using clearOnPageLoad: false",function(){I.setClearOnPageLoad(false);I.setPageSize(1);I.loadPage(1);L({success:true,data:[{email:"user1@sencha.com"}]});I.loadPage(2);L({success:true,data:[{email:"user2@sencha.com"}]});expect(I.getCount()).toBe(2);expect(I.indexOfId("user1@sencha.com")).toBe(0);expect(I.indexOfId("user2@sencha.com")).toBe(1)})})});describe("sorting",function(){function V(Y,W,X){expect(Y.getProperty()).toBe(W);expect(Y.getDirection()).toBe(X)}describe("the sorter collection",function(){it("should be an instance of Ext.util.SorterCollection",function(){M();expect(I.getSorters() instanceof Ext.util.SorterCollection).toBe(true)});it("should be empty by default",function(){M();expect(I.getSorters().getCount()).toBe(0)});it("should add any sorters passed in the constructor",function(){M({sorters:[{property:"foo",direction:"DESC"},{property:"bar",direction:"ASC"}]});V(I.getSorters().getAt(0),"foo","DESC");V(I.getSorters().getAt(1),"bar","ASC")});it("should not set the rootProperty as data on the sorter collection",function(){M();expect(I.getSorters().getRootProperty()).not.toBe("data")});it("should not trigger events when asking for the collection and it has not been created",function(){var W=jasmine.createSpy();M({listeners:{beforesort:W,sort:W}});I.getSorters();expect(W).not.toHaveBeenCalled()})});describe("sort method",function(){beforeEach(function(){M()});it("should accept a field name, default direction to ASC",function(){I.sort("name");V(I.getSorters().getAt(0),"name","ASC")});it("should accept a field nameand direction",function(){I.sort("name","DESC");V(I.getSorters().getAt(0),"name","DESC")});it("should toggle the direction if we pass a string name and no direction for an existing sorter",function(){I.sort("name");I.sort("name");V(I.getSorters().getAt(0),"name","DESC")});it("should clear any existing sorters",function(){I.sort("name");I.sort("evilness");expect(I.getSorters().getCount()).toBe(1);V(I.getSorters().getAt(0),"evilness","ASC")});it("should not throw an error when the store has no model",function(){I.destroy();spyOn(Ext.log,"warn");I=new Ext.data.Store();expect(function(){I.sort("something","ASC")}).not.toThrow()})});describe("isSorted",function(){beforeEach(function(){M()});it("should default to false",function(){expect(I.isSorted()).toBe(false)});it("should return true when sorters are added",function(){I.sort("evilness");expect(I.isSorted()).toBe(true)});it("should return false when all sorters are removed",function(){I.sort("evilness");I.getSorters().remove("evilness");expect(I.isSorted()).toBe(false)});it("should return true if there are groupers and no sorters",function(){I.setGrouper({property:"group"});expect(I.isSorted()).toBe(true)})});describe("setRemoteSort",function(){describe("setting to true",function(){beforeEach(function(){M({remoteSort:false});K();spyOn(I.getProxy(),"read").andCallThrough()});describe("with sorters",function(){it("should not trigger a load and not alter the sort order",function(){I.getSorters().add("name");I.setRemoteSort(true);expect(I.getProxy().read).not.toHaveBeenCalled();expect(I.getAt(0)).toBe(O);expect(I.getAt(1)).toBe(U);expect(I.getAt(2)).toBe(Q);expect(I.getAt(3)).toBe(A)});it("should use the order provided by the server",function(){I.getSorters().add("name");I.setRemoteSort(true);I.load();L([{name:"Z"},{name:"Y"},{name:"A"}]);expect(I.getAt(0).get("name")).toBe("Z");expect(I.getAt(1).get("name")).toBe("Y");expect(I.getAt(2).get("name")).toBe("A")})});describe("with no sorters",function(){it("should not trigger a load",function(){I.setRemoteSort(true);expect(I.getProxy().read).not.toHaveBeenCalled()})})});describe("setting to false",function(){describe("with sorters",function(){it("should sort the local data",function(){M({remoteSort:true,sorters:"name"});K();I.setRemoteSort(false);expect(I.getAt(0)).toBe(O);expect(I.getAt(1)).toBe(U);expect(I.getAt(2)).toBe(Q);expect(I.getAt(3)).toBe(A)})});describe("with no sorters",function(){it("should not sort the data",function(){M({remoteSort:true});K();I.setRemoteSort(false);expect(I.getAt(0)).toBe(Q);expect(I.getAt(1)).toBe(U);expect(I.getAt(2)).toBe(O);expect(I.getAt(3)).toBe(A)})})})});describe("local",function(){describe("during construction",function(){it("should sort an initial data set",function(){M({remoteSort:false,sorters:[{property:"email"}],data:[B,G,R,D]});expect(I.first().get("email")).toBe("aaron@sencha.com")})});describe("dynamic sorters",function(){beforeEach(function(){M({remoteSort:false});K()});it("should sort the dataset when adding sorters",function(){I.sort("email");expect(I.first().get("email")).toBe("aaron@sencha.com")});it("should be able to use multiple sorters",function(){I.getSorters().add({property:"group"},{property:"evilness",direction:"DESC"});expect(I.first().get("email")).toBe("abe@sencha.com")});it("should trigger a sort when removing a sorter that is not the final sorter",function(){I.getSorters().add({property:"group"},{property:"evilness",direction:"DESC"});I.getSorters().remove("group");expect(I.first().get("email")).toBe("ed@sencha.com")});it("should ignore invalid fields",function(){I.sort("name","ASC");I.sort("someUnknownField");expect(I.getAt(0).get("name")).toBe("Aaron Conran");expect(I.getAt(1).get("name")).toBe("Abe Elias");expect(I.getAt(2).get("name")).toBe("Ed Spencer");expect(I.getAt(3).get("name")).toBe("Tommy Maintz")});describe("sortType",function(){it("should not pass the default sortType for the field",function(){I.sort("name","ASC");var W=I.getSorters().first();expect(W.getTransform()).toBe(Ext.data.SortTypes.asUCString)});it("should pass any custom sort for the field",function(){I.sort("age","ASC");var W=I.getSorters().first();expect(W.getTransform()).toBe(N)});it("should not apply a transform if the field doesn't exist",function(){I.sort("someUnknownField");var W=I.getSorters().first();expect(W.getTransform()).toBeNull()})});describe("with loadData",function(){it("should sort data",function(){I.sort("email");I.loadData([G,D,B,R]);expect(I.first().get("email")).toBe("aaron@sencha.com")});it("should not fire extra datachanged/refresh events",function(){var W=jasmine.createSpy();I.sort("email");I.on("refresh",W);I.on("datachanged",W);I.loadData([G,D,B,R]);expect(W.callCount).toBe(2)});it("should not sort the data with sortOnLoad: false",function(){I.sort("email");I.setSortOnLoad(false);I.loadData([G,D,B,R]);expect(I.first().get("email")).toBe("tommy@sencha.com")})});describe("with add",function(){it("should sort data",function(){I.sort("email");I.add({email:"aaa@sencha.com"});expect(I.first().get("email")).toBe("aaa@sencha.com")});it("should not fire extra datachanged events",function(){var W=jasmine.createSpy();I.sort("email");I.on("datachanged",W);I.add({email:"aaa@sencha.com"});expect(W.callCount).toBe(1)})});describe("when the field changes",function(){it("should move the record to the correct place when the sorted field is modified",function(){I.sort("evilness","DESC");A.set("evilness",1234);expect(I.indexOf(A)).toBe(0)})});describe("the sort method",function(){it("should sort the data after toggling an existing sorter",function(){I.getSorters().add("name");var W=I.getRange();W.reverse();I.sort("name");expect(I.getRange()).toEqual(W);expect(I.getSorters().getCount()).toBe(1)});it("shouldsort the data when adding a new sorter",function(){I.getSorters().add("group");I.sort("name","DESC");expect(I.getSorters().getCount()).toBe(1);expect(I.getAt(0)).toBe(A);expect(I.getAt(1)).toBe(Q);expect(I.getAt(2)).toBe(U);expect(I.getAt(3)).toBe(O)})})})});describe("remote",function(){describe("during construction",function(){it("should not trigger a load when creating with sorters",function(){var W=spyOn(Ext.data.ProxyStore.prototype,"load");M({remoteSort:true,sorters:[{property:"evilness"}]});expect(W).not.toHaveBeenCalled()})});describe("addSorted",function(){it("should insert the record into the correct position",function(){M({remoteSort:true});I.sort("email");I.loadData([R,D,B,G]);I.addSorted(P("aaz@sencha.com"));expect(I.getAt(1).get("email")).toBe("aaz@sencha.com")})});describe("modifying the sorters",function(){beforeEach(function(){M({remoteSort:true})});describe("the sorter collection",function(){it("should trigger a load when adding a sorter",function(){spyOn(I,"load");I.getSorters().add("name");expect(I.load.callCount).toBe(1)});it("should trigger a load when adding to an existing sorter",function(){I.getSorters().add("name");spyOn(I,"load");I.getSorters().add("evilness");expect(I.load.callCount).toBe(1)});it("should not trigger a load when removing the only sorter",function(){I.getSorters().add("name");spyOn(I,"load");I.getSorters().remove("name");expect(I.load).not.toHaveBeenCalled()});it("should trigger a load when removing a sorter and there are others remaining",function(){I.getSorters().add("name");I.getSorters().add("evilness");spyOn(I,"load");I.getSorters().remove("name");expect(I.load.callCount).toBe(1)})});describe("the sort method",function(){it("should trigger a load without modifying the sorters if called with no params",function(){I.getSorters().add("name");spyOn(I,"load");I.sort();expect(I.load.callCount).toBe(1);expect(I.getSorters().getCount()).toBe(1)});it("should trigger a load when toggling an existing sorter",function(){I.getSorters().add("name");spyOn(I,"load");I.sort("name");expect(I.load.callCount).toBe(1);expect(I.getSorters().getCount()).toBe(1)});it("should trigger a load when adding a new sorter",function(){I.getSorters().add("name");spyOn(I,"load");I.sort("age","DESC");expect(I.load.callCount).toBe(1);expect(I.getSorters().getCount()).toBe(1)})})});describe("store data",function(){it("should ignore sortOnLoad",function(){M({remoteSort:true,sorters:["name"],sortOnLoad:false,proxy:{type:"ajax",url:"fakeurl"}});I.load();L([{name:"ZZZ"},{name:"AAA"}]);expect(I.first().get("name")).toBe("ZZZ")});it("should not sort the data when the store load has completed",function(){M({remoteSort:true,proxy:{type:"ajax",url:"fakeurl"}});I.getSorters().add("name");L([{name:"ZZZ"},{name:"AAA"}]);expect(I.first().get("name")).toBe("ZZZ")});it("should not sort the data when adding a record",function(){M({remoteSort:true,proxy:{type:"ajax",url:"fakeurl"}});I.getSorters().add("name");K();expect(I.first().get("name")).toBe("Ed Spencer")})})});describe("events",function(){var W;beforeEach(function(){M({proxy:"memory",remoteSort:true});W=jasmine.createSpy()});it("should fire the sort event when adding a sorter to an empty collection",function(){I.on("sort",W);I.getSorters().add("name");expect(W.callCount).toBe(1);var X=W.mostRecentCall.args;expect(X[0]).toBe(I);expect(X[1].length).toBe(1);expect(X[1][0].getProperty()).toBe("name");expect(X[1][0].getDirection()).toBe("ASC")});it("should fire the sort event when adding a sorter to existing sorters",function(){I.getSorters().add("name");I.on("sort",W);I.getSorters().add("evilness");expect(W.callCount).toBe(1);var X=W.mostRecentCall.args;expect(X[0]).toBe(I);expect(X[1].length).toBe(2);expect(X[1][0].getProperty()).toBe("name");expect(X[1][0].getDirection()).toBe("ASC");expect(X[1][1].getProperty()).toBe("evilness");expect(X[1][1].getDirection()).toBe("ASC")});it("should fire when removing a sorter from existing sorters",function(){I.getSorters().add("name");I.getSorters().add("evilness");I.on("sort",W);I.getSorters().remove("name");expect(W.callCount).toBe(1);var X=W.mostRecentCall.args;expect(X[0]).toBe(I);expect(X[1].length).toBe(1);expect(X[1][0].getProperty()).toBe("evilness");expect(X[1][0].getDirection()).toBe("ASC")});it("should fire when removing the last sorter",function(){I.getSorters().add("name");I.on("sort",W);I.getSorters().remove("name");expect(W.callCount).toBe(1);var X=W.mostRecentCall.args;expect(X[0]).toBe(I);expect(X[1].length).toBe(0)});describe("local",function(){beforeEach(function(){I.setRemoteSort(false)});describe("adding",function(){it("should fire the refresh event",function(){I.on("refresh",W);I.getSorters().add("name");expect(W.callCount).toBe(1);expect(W.mostRecentCall.args[0]).toBe(I)});it("should fire the datachanged event",function(){I.on("datachanged",W);I.getSorters().add("name");expect(W.callCount).toBe(1);expect(W.mostRecentCall.args[0]).toBe(I)})});describe("removing",function(){it("should fire the refresh event when we remove the non-last sorter",function(){I.getSorters().add("name");I.getSorters().add("evilness");I.on("refresh",W);I.getSorters().remove("name");expect(W.callCount).toBe(1);expect(W.mostRecentCall.args[0]).toBe(I)});it("should fire the datachanged event when we remove the non-last sorter",function(){I.getSorters().add("name");I.getSorters().add("evilness");I.on("datachanged",W);I.getSorters().remove("name");expect(W.callCount).toBe(1);expect(W.mostRecentCall.args[0]).toBe(I)});it("should not fire either event if we remove the last sorter",function(){I.getSorters().add("name");I.on("refresh",W);I.on("datachanged",W);I.getSorters().remove("name");expect(W).not.toHaveBeenCalled()})})});describe("remote",function(){describe("adding",function(){it("should fire refresh when adding a sorter",function(){I.on("refresh",W);I.sort("email");expect(W.callCount).toBe(1)});it("should fire datachanged when adding a sorter",function(){I.on("datachanged",W);I.sort("email");expect(W.callCount).toBe(1)})});describe("removing",function(){it("should fire refresh when removing a the non-last sorter",function(){I.sort("email");I.sort("evilness",null,"append");I.on("refresh",W);I.getSorters().remove("email");expect(W.callCount).toBe(1)});it("should fire datachanged when removing the non-last sorter",function(){I.sort("email");I.sort("evilness",null,"append");I.on("datachanged",W);I.getSorters().remove("email");expect(W.callCount).toBe(1)})})});describe("remote async",function(){beforeEach(function(){M({remoteSort:true});W=jasmine.createSpy()});describe("adding",function(){it("should not fire refresh when adding a sorter",function(){I.on("refresh",W);I.sort("email");expect(W).not.toHaveBeenCalled()});it("should not fire datachanged when adding a sorter",function(){I.on("datachanged",W);I.sort("email");expect(W).not.toHaveBeenCalled()})});describe("removing",function(){it("should not fire refresh when removing a the non-last sorter",function(){I.sort("email");I.sort("evilness");I.on("refresh",W);I.getSorters().remove("email");expect(W).not.toHaveBeenCalled()});it("should not fire datachanged when removing the non-last sorter",function(){I.sort("email");I.sort("evilness");I.on("datachanged",W);I.getSorters().remove("email");expect(W).not.toHaveBeenCalled()})})})})});describe("remote sorting and filtering, and callbacks therein",function(){var W=0,X,V,Y;beforeEach(function(){M({asynchronousLoad:true,remoteSort:true,remoteFilter:true,listeners:{sort:function(){X=++W},groupchange:function(){V=++W}}});spyOn(I,"load").andCallThrough();spyOn(I,"flushLoad").andCallThrough()});it("should not fire all the callbacks of superceded loads",function(){I.group("group");I.sort("email");I.filter({property:"old",value:true});expect(I.load.callCount).toBe(3);expect(I.flushLoad.callCount).toBe(0);I.load(function(){Y=!V&&!X});waits(100);runs(function(){L([R,G])});waitsFor(function(){return Y&&I.getCount()===2},"the store to load");runs(function(){expect(I.load.callCount).toBe(4);expect(I.flushLoad.callCount).toBe(1)})})});describe("grouping",function(){var W;function Y(a,b){I.setGrouper({property:a||"group",direction:b})}function X(){I.setGrouper(null)}function Z(a,b){I.getSorters().add({property:a,direction:b})}function V(b,a){I.getFilters().add({property:b,value:a})}describe("groupDir and the group() method",function(){it('should default to "ASC"',function(){M();expect(I.getGroupDir()).toBe("ASC")});it('should default to "ASC" when calling group()',function(){M();I.group("name");expect(I.getGrouper().getDirection()).toBe("ASC")});it("should use whatever was set in the config when calling group()",function(){M({groupDir:"DESC"});I.group("email");expect(I.getGrouper().getDirection()).toBe("DESC")})});describe("getGroupField",function(){beforeEach(function(){M()});it("should default to ''",function(){expect(I.getGroupField()).toBe("")});it("should return the field name when grouped",function(){I.group("evilness");expect(I.getGroupField()).toBe("evilness")});it("should return '' when grouping is cleared",function(){I.group("evilness");I.clearGrouping();expect(I.getGroupField()).toBe("")})});describe("group method",function(){beforeEach(function(){M()});it("should accept a field name & direction",function(){I.group("group","DESC");var a=I.getGrouper();expect(a.getProperty()).toBe("group");expect(a.getDirection()).toBe("DESC")});it("should overwrite an existing grouper",function(){I.group("group","ASC");I.group("evilness","DESC");var a=I.getGrouper();expect(a.getProperty()).toBe("evilness");expect(a.getDirection()).toBe("DESC")})});describe("clearGrouping method",function(){it("should clear existing groupers",function(){M();I.group("evilness");I.clearGrouping();expect(I.getGrouper()).toBe(null)})});describe("isGrouped",function(){beforeEach(function(){M()});it("should default to false",function(){expect(I.isGrouped()).toBe(false)});it("should return true when the store has a grouper",function(){I.group("evilness");expect(I.isGrouped()).toBe(true)});it("should return false when the grouper is removed",function(){I.group("evilness");I.setGrouper(null);expect(I.isGrouped()).toBe(false)})});describe("local",function(){beforeEach(function(){M({remoteSort:false});K()});describe("during construction",function(){it("should create groups",function(){M({remoteSort:false,grouper:{property:"group"}});K();W=I.getGroups();expect(W.getCount()).toBe(2)})});it("should group by the specified key",function(){Y();W=I.getGroups();expect(W.getCount()).toBe(2)});it("should have the appropriate item in each group",function(){Y();W=I.getGroups();expect(W.first().getGroupKey()).toBe("admin");expect(W.last().getGroupKey()).toBe("code")});describe("clearing groups",function(){it("should return no groups by default",function(){expect(I.getGroups()).toBeNull()});it("should return no groups once the grouper has cleared",function(){Y();I.getGroups();X();expect(I.getGroups()).toBeNull()})});describe("dynamic manipulation",function(){describe("adding",function(){it("should add to an existing group",function(){Y();I.add({email:"new@sencha.com",group:"admin"});var a=I.getGroups().get("admin");expect(a.getCount()).toBe(3);expect(a.indexOfKey("new@sencha.com")).toBe(2)});it("should create a new group",function(){Y();expect(I.getGroups().get("test")).toBeUndefined();I.add({email:"new@sencha.com",group:"test"});var a=I.getGroups().get("test");expect(a.getCount()).toBe(1);expect(a.indexOfKey("new@sencha.com")).toBe(0)});it("should add to an existing group before add event",function(){Y();var a=I.getGroups().get("admin");I.on({add:function(){expect(a.getCount()).toBe(3);expect(a.indexOfKey("new@sencha.com")).toBe(2)}});I.add({email:"new@sencha.com",group:"admin"})});it("should position items correctly when adding multiple items",function(){Y();var b=P("new1@sencha.com",{group:"code"}),a=P("new2@sencha.com",{group:"admin"});I.add([b,a]);expect(I.indexOf(b)).toBe(5);expect(I.indexOf(a)).toBe(2)})});describe("removing",function(){it("should remove from an existing group",function(){Y();I.remove(U);var a=I.getGroups().get("admin");expect(a.getCount()).toBe(1);expect(a.contains(U)).toBe(false)});it("should remove a group",function(){I.remove(U);Y();I.remove(O);expect(I.getGroups().get("admin")).toBeUndefined()});it("should remove from an existing group before remove event",function(){Y();var a=I.getGroups().get("admin");I.on({remove:function(){expect(a.getCount()).toBe(1);expect(a.contains(U)).toBe(false)}});I.remove(U)});describe("using removeAt",function(){it("should remove the record from its group",function(){var a;Y();a=I.getGroups().get("admin");expect(a.contains(U)).toBe(true);I.removeAt(0);expect(a.contains(U)).toBe(false)});it("should remove a range of records from their groups",function(){var b,a;Y();b=I.getGroups().get("admin");a=I.getGroups().get("code");expect(a.contains(Q)).toBe(true);expect(a.contains(A)).toBe(true);expect(b.contains(O)).toBe(true);I.removeAt(1,3);expect(a.contains(Q)).toBe(false);expect(a.contains(A)).toBe(false);expect(b.contains(O)).toBe(false);expect(I.getGroups().length).toBe(1)})});describe("using removeAll",function(){it("should remove the groups",function(){var b,a;Y();a=I.getGroups();b=a.get("admin");expect(a.length).toBe(2);I.removeAll();expect(a.length).toBe(0)})});describe("phantom group records",function(){it("should remove phantoms from their groups",function(){var b;Y();b=I.getGroups().get("admin");var c=[{name:"Phil"},{name:"Evan"},{name:"Nige"},{name:"Alex"}],a;I.destroy();I=new Ext.data.Store({fields:["name"],data:c,groupField:"name",proxy:{type:"ajax"}});a=I.getAt(0);expect(a.phantom).toBe(true);I.remove(a);expect(I.getGroups().getAt(0).contains(a)).toBe(false)})})});describe("updating",function(){it("should move the item if the group changes but the record does not change position",function(){Y();var a=I.indexOf(O);O.set("group","code");var b=I.getGroups().get("admin"),c=I.getGroups().get("code");expect(b.getCount()).toBe(1);expect(b.contains(O)).toBe(false);expect(c.getCount()).toBe(3);expect(c.contains(O)).toBe(true);expect(I.indexOf(O)).toBe(a)});it("should move the item if the group changes and the record changes position",function(){Y();var a=I.indexOf(U);U.set("group","code");var b=I.getGroups().get("admin"),c=I.getGroups().get("code");expect(b.getCount()).toBe(1);expect(b.contains(U)).toBe(false);expect(c.getCount()).toBe(3);expect(c.contains(U)).toBe(true);expect(I.indexOf(U)).not.toBe(a)})})});describe("sorting",function(){function a(e,d){var b=e.length,c;d=d||I;for(c=0;c<b;++c){expect(d.getAt(c)).toBe(e[c])}}it("should sort the items in the collection by group",function(){I.removeAll();I.add(A,O,Q,U);Y("group","ASC");a([O,U,A,Q])});it("should sort the groups according to the group direction",function(){I.removeAll();I.add(U,O,A,Q);Y("group","DESC");a([A,Q,U,O])});it("should use the natural order inside the groups",function(){I.removeAll();I.add(A,O,Q,U);Y();a([O,U,A,Q]);var b=I.getGroups();a([O,U],b.get("admin"));a([A,Q],b.get("code"))});it("should insert the record into the correct collection position",function(){I.removeAll();I.add(O,A);Y("email");I.add(Q);expect(I.indexOf(Q)).toBe(1)});it("should sort the groups by the sorterFn",function(){I.setGrouper({property:"group",sorterFn:function(d,c){d=d.get("group");c=c.get("group");if(d===c){return 0}return d<c?1:-1}});var b=I.getGroups();expect(b.getAt(0).getGroupKey()).toBe("code");expect(b.getAt(1).getGroupKey()).toBe("admin")});describe("with sorters",function(){it("should sort the collection by grouper first",function(){Z("evilness");Y();a([O,U,A,Q])});it("should sort the new groups by the sorter",function(){Z("evilness","DESC");Y();var b=I.getGroups();a([U,O],b.get("admin"));a([Q,A],b.get("code"))});it("should sort existing groups by the sorter",function(){Y();Z("evilness","DESC");var b=I.getGroups();a([U,O],b.get("admin"));a([Q,A],b.get("code"))});it("should sort by the sorter after the groups have been cleared",function(){Z("evilness");Y();X();a([A,O,U,Q])})})});describe("filters",function(){it("should respect existing filters while grouping",function(){V("old",true);Y();var a=I.getGroups().get("admin"),b=I.getGroups().get("code");expect(a.getCount()).toBe(1);expect(a.first()).toBe(O);expect(b.getCount()).toBe(1);expect(b.first()).toBe(A)});it("should filter existing groups",function(){Y();V("old",true);var a=I.getGroups().get("admin"),b=I.getGroups().get("code");expect(a.getCount()).toBe(1);expect(a.first()).toBe(O);expect(b.getCount()).toBe(1);expect(b.first()).toBe(A)});it("should update groups when filters are cleared",function(){V("old",true);Y();I.clearFilter();var a=I.getGroups();expect(a.get("admin").getCount()).toBe(2);expect(a.get("code").getCount()).toBe(2)});it("should remove groups when required",function(){Y();I.getFilters().add({filterFn:function(b){return b.get("name")==="Ed Spencer"}});var a=I.getGroups();expect(a.get("admin")).toBeUndefined();expect(a.get("code").getCount()).toBe(1)});it("should add groups when required",function(){Y();var b=I.getFilters();b.add({filterFn:function(c){return Ext.Array.indexOf(["Ed Spencer","Aaron Conran"],c.get("name"))>-1}},{filterFn:function(c){return c.get("name")==="Aaron Conran"}});var a=I.getGroups();expect(a.get("admin").getCount()).toBe(1);expect(a.get("code")).toBeUndefined();b.remove(b.last());a=I.getGroups();expect(a.get("admin").getCount()).toBe(1);expect(a.get("code").getCount()).toBe(1)})})});describe("remote",function(){describe("during construction",function(){it("should not trigger a load",function(){var b=spyOn(Ext.data.ProxyStore.prototype,"load"),a=spyOn(Ext.data.Store.prototype,"flushLoad");M({remoteSort:true,asynchronousLoad:true,grouper:{property:"group"}});expect(b).toHaveBeenCalled();expect(a).not.toHaveBeenCalled()})});describe("dynamic groupers",function(){beforeEach(function(){M({remoteSort:true})});describe("via group",function(){it("should trigger a load when adding a grouper",function(){spyOn(I,"load");I.group("group");expect(I.load.callCount).toBe(1)});it("should not trigger a load when removing the grouper",function(){I.group("group");spyOn(I,"load");I.group(null);expect(I.load).not.toHaveBeenCalled()});describe("with sorters",function(){it("should only load once when adding a grouper and there are sorters",function(){I.sort("name");spyOn(I,"load");I.group("group");expect(I.load.callCount).toBe(1)});it("should trigger a load when removing the grouper",function(){I.getSorters().add("name");I.group("group");spyOn(I,"load");I.group(null);expect(I.load.callCount).toBe(1)})})});describe("via setGrouper",function(){it("should trigger a load when adding a grouper",function(){spyOn(I,"load");I.setGrouper({property:"group"});expect(I.load.callCount).toBe(1)});it("should not trigger a load when removing the grouper",function(){I.setGrouper({property:"group"});spyOn(I,"load");I.setGrouper(null);expect(I.load).not.toHaveBeenCalled()});describe("with sorters",function(){it("should only load once when adding a grouper and there are sorters",function(){I.getSorters().add("name");spyOn(I,"load");I.setGrouper({property:"group"});expect(I.load.callCount).toBe(1)});it("should trigger a load when removing the grouper",function(){I.getSorters().add("name");I.setGrouper({property:"group"});spyOn(I,"load");I.setGrouper(null);expect(I.load.callCount).toBe(1)})})})});describe("with remoteSort",function(){beforeEach(function(){M({remoteSort:true,groupField:"group"});B.group="bots"});it("should leave the items in group order",function(){I.load();L([B,G,D,R]);expect(I.getAt(0).getId()).toBe("ed@sencha.com");expect(I.getAt(1).getId()).toBe("tommy@sencha.com");expect(I.getAt(2).getId()).toBe("abe@sencha.com");expect(I.getAt(3).getId()).toBe("aaron@sencha.com")});it("should leave groups in order",function(){I.load();L([B,G,D,R]);var a=I.getGroups(),b;expect(a.getCount()).toBe(3);b=a.getAt(0);expect(b.getGroupKey()).toBe("bots");expect(b.getCount()).toBe(1);expect(b.getAt(0).getId()).toBe("ed@sencha.com");b=a.getAt(1);expect(b.getGroupKey()).toBe("code");expect(b.getCount()).toBe(1);expect(b.getAt(0).getId()).toBe("tommy@sencha.com");b=a.getAt(2);expect(b.getGroupKey()).toBe("admin");expect(b.getCount()).toBe(2);expect(b.getAt(0).getId()).toBe("abe@sencha.com");expect(b.getAt(1).getId()).toBe("aaron@sencha.com")})})});describe("events",function(){var a;beforeEach(function(){a=jasmine.createSpy()});afterEach(function(){a=null});describe("local",function(){beforeEach(function(){M({remoteSort:false})});describe("adding",function(){describe("with no sorters",function(){it("should trigger the groupchange event and pass the store & grouper",function(){I.on("groupchange",a);I.group("group");expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1].getProperty()).toBe("group");expect(b[1].getDirection()).toBe("ASC")});it("should trigger the refresh event",function(){I.on("refresh",a);I.group("group");expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should trigger the datachanged event",function(){I.on("datachanged",a);I.group("group");expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should not trigger the sort event",function(){I.on("sort",a);I.group("group");expect(a).not.toHaveBeenCalled()})});describe("with sorters",function(){beforeEach(function(){I.getSorters().add("name")});it("should trigger the groupchange event and pass the store & grouper",function(){I.on("groupchange",a);I.group("group");expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1].getProperty()).toBe("group");expect(b[1].getDirection()).toBe("ASC")});it("should trigger the refresh event",function(){I.on("refresh",a);I.group("group");expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should trigger the datachanged event",function(){I.on("datachanged",a);I.group("group");expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should not trigger the sort event",function(){I.on("sort",a);I.group("group");expect(a).not.toHaveBeenCalled()})})});describe("removing",function(){describe("with no sorters",function(){it("should trigger the groupchange event",function(){I.group("group");I.on("groupchange",a);I.group(null);expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1]).toBeNull()});it("should not trigger the refresh event",function(){I.group("group");I.on("refresh",a);I.group(null);expect(a).not.toHaveBeenCalled()});it("should trigger the datachanged event",function(){I.group("group");I.on("datachanged",a);I.group(null);expect(a).not.toHaveBeenCalled()});it("should not trigger the sort event",function(){I.group("group");I.on("sort",a);I.group(null);expect(a).not.toHaveBeenCalled()})});describe("with sorters",function(){beforeEach(function(){I.getSorters().add("email")});it("should trigger the groupchange event",function(){I.group("group");I.on("groupchange",a);I.group(null);expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1]).toBeNull()});it("should trigger the refresh event",function(){I.group("group");I.on("refresh",a);I.group(null);expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should trigger the datachanged event",function(){I.group("group");I.on("datachanged",a);I.group(null);expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should not trigger the sort event",function(){I.group("group");I.on("sort",a);I.group(null);expect(a).not.toHaveBeenCalled()})})})});describe("remote",function(){describe("with a synchronous proxy",function(){beforeEach(function(){M({remoteSort:true,proxy:{type:"memory"}})});describe("adding",function(){describe("with no sorters",function(){it("should trigger the groupchange event and pass the store & grouper",function(){I.on("groupchange",a);I.group("group");expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1].getProperty()).toBe("group");expect(b[1].getDirection()).toBe("ASC")});it("should trigger the refresh event",function(){I.on("refresh",a);I.group("group");expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should trigger the datachanged event",function(){I.on("datachanged",a);I.group("group");expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should not trigger the sort event",function(){I.on("sort",a);I.group("group");expect(a).not.toHaveBeenCalled()})});describe("with sorters",function(){beforeEach(function(){I.getSorters().add("name")});it("should trigger the groupchange event and pass the store & grouper",function(){I.on("groupchange",a);I.group("group");expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1].getProperty()).toBe("group");expect(b[1].getDirection()).toBe("ASC")});it("should trigger the refresh event",function(){I.on("refresh",a);I.group("group");expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should trigger the datachanged event",function(){I.on("datachanged",a);I.group("group");expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should not trigger the sort event",function(){I.on("sort",a);I.group("group");expect(a).not.toHaveBeenCalled()})})});describe("removing",function(){describe("with no sorters",function(){it("should trigger the groupchange event",function(){I.group("group");I.on("groupchange",a);I.group(null);expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1]).toBeNull()});it("should not trigger the refresh event",function(){I.group("group");I.on("refresh",a);I.group(null);expect(a).not.toHaveBeenCalled()});it("should trigger the datachanged event",function(){I.group("group");I.on("datachanged",a);I.group(null);expect(a).not.toHaveBeenCalled()});it("should not trigger the sort event",function(){I.group("group");I.on("sort",a);I.group(null);expect(a).not.toHaveBeenCalled()})});describe("with sorters",function(){beforeEach(function(){I.getSorters().add("email")});it("should trigger the groupchange event",function(){I.group("group");I.on("groupchange",a);I.group(null);expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1]).toBeNull()});it("should trigger the refresh event",function(){I.group("group");I.on("refresh",a);I.group(null);expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should trigger the datachanged event",function(){I.group("group");I.on("datachanged",a);I.group(null);expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should not trigger the sort event",function(){I.group("group");I.on("sort",a);I.group(null);expect(a).not.toHaveBeenCalled()})})})});describe("with an asynchronous proxy",function(){beforeEach(function(){M({remoteSort:true,proxy:{type:"ajax",url:"foo"}})});describe("adding",function(){describe("with no sorters",function(){it("should trigger the groupchange event and pass the store & grouper after the load completes",function(){I.on("groupchange",a);I.group("group");expect(a).not.toHaveBeenCalled();L([]);expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1].getProperty()).toBe("group");expect(b[1].getDirection()).toBe("ASC")});it("should trigger the refresh event after the load completes",function(){I.on("refresh",a);I.group("group");expect(a).not.toHaveBeenCalled();L([]);expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should trigger the datachanged event after the load completes",function(){I.on("datachanged",a);I.group("group");expect(a).not.toHaveBeenCalled();L([]);expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should not trigger the sort event",function(){I.on("sort",a);I.group("group");expect(a).not.toHaveBeenCalled();L([]);expect(a).not.toHaveBeenCalled()})});describe("with sorters",function(){beforeEach(function(){I.getSorters().add("name");L([])});it("should trigger the groupchange event and pass the store & grouper after the load completes",function(){I.on("groupchange",a);I.group("group");expect(a).not.toHaveBeenCalled();L([]);expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1].getProperty()).toBe("group");expect(b[1].getDirection()).toBe("ASC")});it("should trigger the refresh event",function(){I.on("refresh",a);I.group("group");expect(a).not.toHaveBeenCalled();L([]);expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should trigger the datachanged event",function(){I.on("datachanged",a);I.group("group");expect(a).not.toHaveBeenCalled();L([]);expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should not trigger the sort event",function(){I.on("sort",a);I.group("group");expect(a).not.toHaveBeenCalled();L([]);expect(a).not.toHaveBeenCalled()})})});describe("removing",function(){beforeEach(function(){I.group("group");L([])});describe("with no sorters",function(){it("should trigger the groupchange event without loading",function(){I.on("groupchange",a);I.group(null);expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1]).toBeNull()});it("should not trigger the refresh event without loading",function(){I.on("refresh",a);I.group(null);expect(a).not.toHaveBeenCalled()});it("should trigger the datachanged event without loading",function(){I.on("datachanged",a);I.group(null);expect(a).not.toHaveBeenCalled()});it("should not trigger the sort event",function(){I.on("sort",a);I.group(null);expect(a).not.toHaveBeenCalled()})});describe("with sorters",function(){beforeEach(function(){I.getSorters().add("email");L([])});it("should trigger the groupchange event after the load completes",function(){I.on("groupchange",a);I.group(null);expect(a).not.toHaveBeenCalled();L([]);expect(a.callCount).toBe(1);var b=a.mostRecentCall.args;expect(b[0]).toBe(I);expect(b[1]).toBeNull()});it("should trigger the refresh event after the load completes",function(){I.on("refresh",a);I.group(null);expect(a).not.toHaveBeenCalled();L([]);expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should trigger the datachanged event after the load completes",function(){I.on("datachanged",a);I.group(null);expect(a).not.toHaveBeenCalled();L([]);expect(a.callCount).toBe(1);expect(a.mostRecentCall.args[0]).toBe(I)});it("should not trigger the sort event",function(){I.on("sort",a);I.group(null);expect(a).not.toHaveBeenCalled();L([]);expect(a).not.toHaveBeenCalled()})})})})})})});describe("filtering",function(){describe("the filter collection",function(){it("should be an instance of Ext.util.FilterCollection",function(){M();expect(I.getFilters() instanceof Ext.util.FilterCollection).toBe(true)});it("should be empty by default",function(){M();expect(I.getFilters().getCount()).toBe(0)});it("should add any filters passed in the constructor",function(){M({filters:[{property:"foo",value:"a"},{property:"bar",value:"b"}]});var V=I.getFilters().getAt(0);expect(V.getProperty()).toBe("foo");expect(V.getValue()).toBe("a");V=I.getFilters().getAt(1);expect(V.getProperty()).toBe("bar");expect(V.getValue()).toBe("b")});it("should not set the rootProperty as data on the filter collection",function(){M();expect(I.getFilters().getRootProperty()).not.toBe("data")});it("should not trigger events when asking for the collection and it has not been created",function(){var V=jasmine.createSpy();M({listeners:{filterchange:V}});I.getFilters();expect(V).not.toHaveBeenCalled()})});describe("filter method",function(){beforeEach(function(){M()});it("should accept a field name & value",function(){I.filter("name","Ed Spencer");var V=I.getFilters().first();expect(V.getProperty()).toBe("name");expect(V.getValue()).toBe("Ed Spencer")});it("should add to existing filters",function(){I.filter("group","code");I.filter("evilness",100);var V=I.getFilters().first();expect(I.getFilters().getCount()).toBe(2);expect(V.getProperty()).toBe("group");expect(V.getValue()).toBe("code");V=I.getFilters().last();expect(V.getProperty()).toBe("evilness");expect(V.getValue()).toBe(100)})});describe("filterBy",function(){var V;beforeEach(function(){M();K();V=jasmine.createSpy()});it("should add a persistent filter",function(){I.filterBy(V);expect(I.getFilters().getCount()).toBe(1)});it("should pass along the filter fn",function(){I.filterBy(V);expect(I.getFilters().first().getFilterFn()).toBe(V)});it("should execute in the passed scope",function(){I.filterBy(V,H);expect(V.mostRecentCall.object).toBe(H)});it("should default the scope to the store",function(){I.filterBy(V);expect(V.mostRecentCall.object).toBe(I)})});describe("clearFilter method",function(){beforeEach(function(){M()});it("should remove all filters",function(){I.filter("evilness",100);I.clearFilter();expect(I.getFilters().getCount()).toBe(0)});it("should trigger a load when using remoteFilter: true",function(){I.setRemoteFilter(true);I.filter("evilness",100);spyOn(I,"load");I.clearFilter();expect(I.load.callCount).toBe(1)});it("should trigger a load when using remoteFilter: true & passing suppressEvent",function(){I.setRemoteFilter(true);I.filter("evilness",100);spyOn(I,"load");I.clearFilter(true);expect(I.load).not.toHaveBeenCalled()});describe("events",function(){it("should not fire datachanged and refresh when suppress is passed",function(){var V=jasmine.createSpy();I.filter("evilness",100);I.on("refresh",V);I.on("datachanged",V);I.clearFilter(true);expect(V).not.toHaveBeenCalled()})})});describe("isFiltered",function(){beforeEach(function(){M()});it("should default to false",function(){expect(I.isFiltered()).toBe(false)});it("should return true when filters are added",function(){I.filter("evilness",100);expect(I.isFiltered()).toBe(true)});it("should return false when all filters are removed",function(){I.filter("evilness",100);I.getFilters().remove("evilness");expect(I.isFiltered()).toBe(false)})});describe("local",function(){describe("during construction",function(){it("should filter an initial data set",function(){M({remoteFilter:false,filters:[{property:"group",value:"code"}],data:[R,B,G,D]});expect(I.getCount()).toBe(2);expect(I.first().get("email")).toBe("ed@sencha.com")})});describe("dynamic filters",function(){beforeEach(function(){M({remoteFilter:false});K()});it("should filter the dataset when adding filters",function(){I.filter("evilness",100);expect(I.first().get("email")).toBe("ed@sencha.com");expect(I.getCount()).toBe(1)});it("should be able to use multiple filter",function(){I.getFilters().add({property:"group",value:"code"},{property:"evilness",value:100});expect(I.first().get("email")).toBe("ed@sencha.com");expect(I.getCount()).toBe(1)});it("should unfilter when removing a filter",function(){I.getFilters().add({property:"group",value:"code"},{property:"evilness",value:100});I.getFilters().remove("evilness");expect(I.getCount()).toBe(2)});it("should push records that are changed to match the filter to the end with no sort",function(){I.removeAll();I.add(O,U,Q,A);I.filter("group","code");O.set("group","code");U.set("group","code");expect(I.indexOf(O)).toBe(2);expect(I.indexOf(U)).toBe(3)});describe("store methods while filtered",function(){describe("getCount",function(){it("should update the count to the filtered count",function(){I.filter("group","code");expect(I.getCount()).toBe(2)})});describe("indexOf",function(){it("should report filtered out records as not being in the store",function(){I.filter("group","admin");expect(I.indexOf(Q)).toBe(-1)})});describe("getRange",function(){it("should only return the filtered records",function(){I.filter("group","admin");expect(I.getRange().length).toBe(2)})});describe("each",function(){it("should only iterate the filtered items",function(){I.filter("evilness",100);var V=jasmine.createSpy();I.each(V);expect(V.callCount).toBe(1)})});describe("add",function(){it("should be included in the active set if it matches the filter",function(){I.filter("group","code");I.add(P("foo@sencha.com",{group:"code"}));expect(I.getCount()).toBe(3);expect(I.indexOfId("foo@sencha.com")).toBe(2)});it("should not be included in the active set if it doesn't match the filter or fire the add event",function(){var V=jasmine.createSpy();I.filter("group","code");I.on("add",V);I.add(P("foo@sencha.com",{group:"admin"}));expect(I.getCount()).toBe(2);expect(I.indexOfId("foo@sencha.com")).toBe(-1);expect(V).not.toHaveBeenCalled()});it("should include unmatched added records when removing the filter",function(){I.filter("group","code");I.add(P("foo@sencha.com",{group:"admin"}));I.clearFilter();expect(I.getCount()).toBe(5);expect(I.indexOfId("foo@sencha.com")).toBe(4)})});describe("remove",function(){it("should not include a removed record after a filter is cleared",function(){I.filter("group","code");I.remove(Q);I.clearFilter();expect(I.indexOf(Q)).toBe(-1)});it("should still remove any records filtered out",function(){I.filter("group","code");I.remove(U);I.clearFilter();expect(I.indexOf(U)).toBe(-1)})});describe("removeAll",function(){it("should only remove the filtered items",function(){I.filter("group","code");I.removeAll();I.clearFilter();expect(I.getCount()).toBe(2)})})});describe("sorting",function(){it("should restore any sort order when clearing a filter",function(){I.sort("email","DESC");I.getFilters().add({filterFn:function(V){return V.get("group")==="code"}});I.clearFilter();expect(I.indexOf(A)).toBe(0);expect(I.indexOf(Q)).toBe(1);expect(I.indexOf(U)).toBe(2);expect(I.indexOf(O)).toBe(3)})})});describe("removal from collection",function(){beforeEach(function(){M();K()});it("should not add records to the removed collection when filtering the store",function(){I.filter("group","code");expect(I.getRemovedRecords()).toEqual([])});it("should not add records to the removed collection when changing an item to be filtered",function(){I.filter("group","code");Q.set("group","admin");expect(I.getRemovedRecords()).toEqual([])})});describe("joined status",function(){beforeEach(function(){M();K()});it("should remain joined when filtering the store",function(){I.filter("group","code");expect(U.joined).toEqual([I])});it("should remain joined when changing an item to be filtered",function(){I.filter("group","code");Q.set("group","admin");expect(Q.joined).toEqual([I])});it("should be joined when adding to the store but the item will be filtered",function(){I.filter("group","code");var V=P("new@sencha.com",{group:"admin"});I.add(V);expect(V.joined).toEqual([I])})})});describe("remote",function(){describe("errors",function(){beforeEach(function(){M({remoteFilter:true});K()});it("should raise an exception when calling filterBy",function(){expect(function(){I.filterBy(function(){})}).toThrow()});it("should raise an exception when calling addFilter with a filterFn",function(){expect(function(){I.addFilter({filterFn:function(){}})}).toThrow()});it("should raise an exception when adding a filter with a filterFn",function(){expect(function(){I.getFilters().add({filterFn:function(){}})}).toThrow()})});describe("during construction",function(){it("should not trigger a load when applying initial filters",function(){var V=spyOn(Ext.data.ProxyStore.prototype,"load");M({remoteFilter:true,filters:[{property:"group",value:"code"}]});expect(V).not.toHaveBeenCalled()})});describe("modifying the filters",function(){beforeEach(function(){M({remoteFilter:true})});describe("the filter collection",function(){it("should trigger a load when adding a filter",function(){spyOn(I,"load");I.getFilters().add({property:"group",value:"code"});expect(I.load.callCount).toBe(1)});it("should trigger a load when adding to an existing filter",function(){I.getFilters().add({property:"group",value:"code"});spyOn(I,"load");I.getFilters().add({property:"evilness",value:100});expect(I.load.callCount).toBe(1)});it("should trigger a load when removing the only filter",function(){I.getFilters().add({property:"group",value:"code"});spyOn(I,"load");I.getFilters().remove("group");expect(I.load.callCount).toBe(1)});it("should trigger a load when removing a filter and there are others remaining",function(){I.getFilters().add({property:"group",value:"code"});I.getFilters().add({property:"evilness",value:100});spyOn(I,"load");I.getFilters().remove("evilness");expect(I.load.callCount).toBe(1)})})});describe("store data",function(){beforeEach(function(){M({remoteFilter:true,proxy:{type:"ajax",url:"fakeurl"}})});it("should not filter the data when the store load has completed",function(){I.getFilters().add({property:"group",value:"code"});L([R,D]);expect(I.getCount()).toBe(2)});it("should not filter the data when adding a record",function(){I.getFilters().add({property:"group",value:"admin"});I.add(B);expect(I.getCount()).toBe(1)})})});describe("events",function(){beforeEach(function(){M({remoteFilter:true})});it("should fire when adding a filter to an empty collection",function(){var W=jasmine.createSpy();I.on("filterchange",W);I.getFilters().add({property:"group",value:"code"});expect(W.callCount).toBe(1);var V=W.mostRecentCall.args;expect(V[0]).toBe(I);expect(V[1].length).toBe(1);expect(V[1][0].getProperty()).toBe("group");expect(V[1][0].getValue()).toBe("code")});it("should fire when adding a filter to existing filters",function(){var W=jasmine.createSpy();I.getFilters().add({property:"group",value:"code"});I.on("filterchange",W);I.getFilters().add({property:"evilness",value:100});expect(W.callCount).toBe(1);var V=W.mostRecentCall.args;expect(V[0]).toBe(I);expect(V[1].length).toBe(2);expect(V[1][0].getProperty()).toBe("group");expect(V[1][0].getValue()).toBe("code");expect(V[1][1].getProperty()).toBe("evilness");expect(V[1][1].getValue()).toBe(100)});it("should fire when removing a filter from existing filter",function(){var W=jasmine.createSpy();I.getFilters().add({property:"group",value:"code"});I.getFilters().add({property:"evilness",value:100});I.on("filterchange",W);I.getFilters().remove("group");expect(W.callCount).toBe(1);var V=W.mostRecentCall.args;expect(V[0]).toBe(I);expect(V[1].length).toBe(1);expect(V[1][0].getProperty()).toBe("evilness");expect(V[1][0].getValue()).toBe(100)});it("should fire when removing the last sorter",function(){var W=jasmine.createSpy();I.getFilters().add({property:"group",value:"admin"});I.on("filterchange",W);I.getFilters().remove("group");expect(W.callCount).toBe(1);var V=W.mostRecentCall.args;expect(V[0]).toBe(I);expect(V[1].length).toBe(0)});describe("local only",function(){beforeEach(function(){I.setRemoteFilter(false)});describe("adding",function(){it("should fire the refresh event",function(){var W=jasmine.createSpy();I.on("refresh",W);I.getFilters().add({property:"group",value:"code"});expect(W.callCount).toBe(1);var V=W.mostRecentCall.args;expect(V[0]).toBe(I)});it("should fire the datachanged event",function(){var W=jasmine.createSpy();I.on("datachanged",W);I.getFilters().add({property:"group",value:"code"});expect(W.callCount).toBe(1);var V=W.mostRecentCall.args;expect(V[0]).toBe(I)})});describe("removing",function(){it("should fire the refresh event",function(){var W=jasmine.createSpy();I.getFilters().add({property:"group",value:"code"});I.on("refresh",W);I.getFilters().remove("group");expect(W.callCount).toBe(1);var V=W.mostRecentCall.args;expect(V[0]).toBe(I)});it("should fire the datachanged event",function(){var W=jasmine.createSpy();I.getFilters().add({property:"group",value:"code"});I.on("datachanged",W);I.getFilters().remove("group");expect(W.callCount).toBe(1);var V=W.mostRecentCall.args;expect(V[0]).toBe(I)})})})})});describe("aggregation",function(){beforeEach(function(){M({remoteSort:false,grouper:{property:"group"},sorters:[{property:"email"}]});K();O=I.getAt(0);U=I.getAt(1);Q=I.getAt(2);A=I.getAt(3)});describe("first",function(){it("should ignore the grouped parameter if there's no group field",function(){I.clearGrouping();expect(I.first(true)).toBe(O)});it("should return in the correct grouped format",function(){expect(I.first(true)).toEqual({admin:O,code:Q})});it("should return an empty object if grouped and no items",function(){I.removeAll();expect(I.first(true)).toEqual({})})});describe("last",function(){it("should ignore the grouped parameter if there's no group field",function(){I.clearGrouping();expect(I.last(true)).toBe(A)});it("should return in the correct grouped format",function(){expect(I.last(true)).toEqual({admin:U,code:A})});it("should return an empty object if grouped and no items",function(){I.removeAll();expect(I.last(true)).toEqual({})})});describe("sum",function(){it("should return 0 if the store is empty",function(){I.removeAll();expect(I.sum("evilness")).toBe(0)});it("should sum the values specified by the property",function(){expect(I.sum("evilness")).toBe(160)});it("should ignore the grouped parameter if there's no group field",function(){I.clearGrouping();expect(I.sum("evilness",true)).toBe(160)});it("should return in the correct grouped format",function(){expect(I.sum("evilness",true)).toEqual({admin:75,code:85})});it("should return an empty object if grouped and no items",function(){I.removeAll();expect(I.sum("evilness",true)).toEqual({})})});describe("count",function(){it("should return 0 if the store is empty",function(){I.removeAll();expect(I.count()).toBe(0)});it("should count the values in the store",function(){expect(I.count()).toBe(4)});it("should ignore the grouped parameter if there's no group field",function(){I.clearGrouping();expect(I.count(true)).toBe(4)});it("should return in the correct grouped format",function(){expect(I.count(true)).toEqual({admin:2,code:2})});it("should return an empty object if grouped and no items",function(){I.removeAll();expect(I.count(true)).toEqual({})})});describe("min",function(){it("should return undefined if there are no items",function(){I.removeAll();expect(I.min("age")).toBeUndefined()});it("should return the minimum value",function(){expect(I.min("age")).toBe(20)});it("should ignore the grouped parameter if there's no group field",function(){I.clearGrouping();expect(I.min("age",true)).toBe(20)});it("should return in the correct grouped format",function(){expect(I.min("age",true)).toEqual({admin:20,code:25})});it("should return an empty object if grouped and no items",function(){I.removeAll();expect(I.min("age",true)).toEqual({})})});describe("max",function(){it("should return undefined if there are no items",function(){I.removeAll();expect(I.max("age")).toBeUndefined()});it("should return the maximum value",function(){expect(I.max("age")).toBe(70)});it("should ignore the grouped parameter if there's no group field",function(){I.clearGrouping();expect(I.max("age",true)).toBe(70)});it("should return in the correct grouped format",function(){expect(I.max("age",true)).toEqual({admin:26,code:70})});it("should return an empty object if grouped and no items",function(){I.removeAll();expect(I.max("age",true)).toEqual({})})});describe("average",function(){it("should return 0 if there are no items",function(){I.removeAll();expect(I.average("evilness")).toBe(0)});it("should return the correct average",function(){expect(I.average("evilness")).toBe(40)});it("should ignore the grouped parameter if there's no groupField",function(){I.clearGrouping();expect(I.average("evilness")).toBe(40)});it("should return in the correct grouped format",function(){expect(I.average("evilness",true)).toEqual({admin:37.5,code:42.5})});it("should return an empty object if grouped and no items",function(){I.removeAll();expect(I.average("evilness",true)).toEqual({})})});describe("aggregate",function(){it("should default the scope to the store",function(){var V=jasmine.createSpy();I.aggregate(V);expect(V.mostRecentCall.object).toBe(I)});it("should use any custom scope",function(){var V=jasmine.createSpy();I.aggregate(V,H);expect(V.mostRecentCall.object).toBe(H)});it("should call the custom function with an array of values & records",function(){var V=true;I.aggregate(function(X,W){V=V&&Ext.isArray(W)&&Ext.isArray(X)},null,false,"email");expect(V).toBe(true)});it("should allow the field parameter to be optional",function(){var V;I.aggregate(function(X,W){V=W[0]});expect(V).toBeUndefined()});it("should pass the field values",function(){var V;I.aggregate(function(X,W){V=W},null,true,"email");expect(V).toEqual(["ed@sencha.com","tommy@sencha.com"])});describe("grouped",function(){it("should return an empty object if there are no groups",function(){I.removeAll();expect(I.aggregate(Ext.emptyFn,null,true)).toEqual({})});it("should return undefined if there is no groupField",function(){I.clearGrouping();expect(I.aggregate(Ext.emptyFn,null,true)).toBeUndefined()});it("should return the groups with the aggregated value",function(){var V=I.aggregate(function(X,W){return W.join("")},null,true,"email");expect(V).toEqual({admin:"aaron@sencha.comabe@sencha.com",code:"ed@sencha.comtommy@sencha.com"})})})})});describe("updating records",function(){var V;beforeEach(function(){M();K();V=jasmine.createSpy()});describe("via set",function(){describe("a single value",function(){it("should fire the update event but not the datachanged event",function(){var W=jasmine.createSpy();I.on("update",V);I.on("datachanged",W);Q.set("name","Ned Spencer");expect(V.callCount).toBe(1);expect(W).not.toHaveBeenCalled()});it("should pass the store, model, type & modified field",function(){I.on("update",V);Q.set("name","Ned Spencer");var W=V.mostRecentCall.args;expect(W[0]).toBe(I);expect(W[1]).toBe(Q);expect(W[2]).toBe(Ext.data.Model.EDIT);expect(W[3]).toEqual(["name"])});it("should not fire an event if the record was removed from the store",function(){I.on("update",V);I.remove(Q);Q.set("name","Ned Spencer");expect(V).not.toHaveBeenCalled()})});describe("multiple values",function(){it("should fire update once but not the datachanged event",function(){var W=jasmine.createSpy();I.on("update",V);I.on("datachanged",W);Q.set({name:"Ned Spencer",evilness:9000});expect(V.callCount).toBe(1);expect(W).not.toHaveBeenCalled()});it("should pass the store, model, type & modified fields",function(){I.on("update",V);Q.set({name:"Ned Spencer",evilness:9000});var W=V.mostRecentCall.args;expect(W[0]).toBe(I);expect(W[1]).toBe(Q);expect(W[2]).toBe(Ext.data.Model.EDIT);expect(W[3]).toEqual(["name","evilness"])});it("should not fire an event if the record was removed from the store",function(){I.on("update",V);I.remove(Q);Q.set({name:"Ned Spencer",evilness:9000});expect(V).not.toHaveBeenCalled()})});describe("changing the id",function(){it("should remap the id value",function(){Q.setId("ted@sencha.com");expect(I.getById("ted@sencha.com")).toBe(Q)});it("should remap the id even when filtered out",function(){I.filterBy(function(W){return W!==Q});Q.setId("red@sencha.com");I.clearFilter();expect(I.getById("red@sencha.com")).toBe(Q)})});describe("when sorted",function(){it("should move the record into the correct position",function(){I.sort("email");A.set("email","aaa@sencha.com");expect(I.indexOf(A)).toBe(0)});it("should not be moving if the position is changed",function(){I.on("add",V);I.on("remove",V);I.sort("email");A.set("name","Foo");expect(V).not.toHaveBeenCalled()});it("should be moving in the refresh event if changing position",function(){var W;I.sort("email");I.on("refresh",function(){W=I.isMoving(A)});A.set("email","aaa@sencha.com");expect(W).toBe(1)})});describe("when filtered",function(){describe("change causes the record to be excluded",function(){it("should remove the record active set",function(){I.filter("group","code");Q.set("group","admin");expect(I.indexOf(Q)).toBe(-1)});it("should still fire the update event",function(){I.on("update",V);I.filter("group","code");Q.set("group","admin");expect(V.callCount).toBe(1)})});describe("change causes the record to be included",function(){it("should add the record to the active set if changed to match",function(){I.filter("group","code");O.set("group","code");expect(I.indexOf(O)).toBe(2)});it("should fire the update event",function(){I.on("update",V);I.filter("group","code");O.set("group","code");expect(V.callCount).toBe(1)})})})});describe("via commit",function(){it("should fire the update event",function(){Q.set("name","Foo");I.on("update",V);Q.commit();expect(V.callCount).toBe(1)});it("should pass the store, model, type & null (modified fields)",function(){Q.set("name","Foo");Q.set("age",40);I.on("update",V);Q.commit();var W=V.mostRecentCall.args;expect(W[0]).toBe(I);expect(W[1]).toBe(Q);expect(W[2]).toBe(Ext.data.Model.COMMIT);expect(W[3]).toBeNull()});it("should still fire the update event if the record is filtered out",function(){Q.set("name","Foo");I.on("update",V);I.filter("name","Aaron");Q.commit();expect(V.callCount).toBe(1)});it("should not fire the update event when removed",function(){Q.set("name","Foo");I.on("update",V);I.remove(Q);Q.commit();expect(V).not.toHaveBeenCalled()})});describe("via reject",function(){it("should fire the update event",function(){Q.set("name","Foo");I.on("update",V);Q.reject();expect(V.callCount).toBe(1)});it("should pass the store, model, type & null (modified fields)",function(){Q.set("name","Foo");I.on("update",V);Q.reject();var W=V.mostRecentCall.args;expect(W[0]).toBe(I);expect(W[1]).toBe(Q);expect(W[2]).toBe(Ext.data.Model.REJECT);expect(W[3]).toBeNull()});it("should still fire the update event if the record is filtered out",function(){Q.set("name","Foo");I.on("update",V);I.filter("name","Aaron");Q.reject();expect(V.callCount).toBe(1)});it("should not fire the update event when removed",function(){Q.set("name","Foo");I.on("update",V);I.remove(Q);Q.reject();expect(V).not.toHaveBeenCalled()})});describe("via erase",function(){it("should remove the record from the store",function(){Q.erase();expect(I.indexOf(Q)).toBe(-1);expect(I.needsSync).toBe(false);expect(I.getRemovedRecords().length).toBe(0)});it("should fire the remove event",function(){I.on("remove",V);Q.erase();expect(V.callCount).toBe(1)})});describe("via drop",function(){it("should remove the record from the store",function(){Q.drop();expect(I.indexOf(Q)).toBe(-1)});it("should remove the record from the store",function(){I.on("remove",V);Q.drop();expect(V.callCount).toBe(1)})})});describe("commitChanges",function(){beforeEach(function(){M();K()});describe("committing records",function(){it("should commit valid phantoms",function(){var V=I.add({validField:"Foo"})[0];spyOn(V,"commit");I.commitChanges();expect(V.commit.callCount).toBe(1)});it("should not commit invalid phantoms",function(){var V=I.add({validField:null})[0];spyOn(V,"commit");I.commitChanges();expect(V.commit).not.toHaveBeenCalled()});it("should commit valid dirty non-phantoms",function(){Q.set("validField","Foo");spyOn(Q,"commit");I.commitChanges();expect(Q.commit.callCount).toBe(1)});it("should not commit invalid dirty non-phantoms",function(){Q.set("validField",null);spyOn(Q,"commit");I.commitChanges();expect(Q.commit).not.toHaveBeenCalled()});it("should not commit non-dirty records",function(){Q.set("validField","foo");Q.commit();spyOn(Q,"commit");I.commitChanges();expect(Q.commit).not.toHaveBeenCalled()})});describe("removed collection",function(){it("should clear the removed collection",function(){I.remove(U);I.remove(O);expect(I.getCount()).toBe(2);expect(I.removed.length).toBe(2);I.commitChanges();expect(I.removed.length).toBe(0);expect(I.getCount()).toBe(2)})});describe("events",function(){it("should fire an update event for each record",function(){var V=jasmine.createSpy();Q.set("validField","A");O.set("validField","B");A.set("validField","C");I.on("update",V);I.commitChanges();expect(V.callCount).toBe(3);expect(V.calls[0].args[1]).toBe(Q);expect(V.calls[1].args[1]).toBe(O);expect(V.calls[2].args[1]).toBe(A)})})});describe("rejectChanges",function(){beforeEach(function(){M();K()});describe("rejecting records",function(){it("should reject dirty records",function(){Q.set("name","Foo");var V=spyOn(Q,"reject");I.rejectChanges();expect(V.callCount).toBe(1)});it("should reject phantom records",function(){var V=I.add({name:"X"})[0];var W=spyOn(V,"reject");I.rejectChanges();expect(W.callCount).toBe(1)});it("should reject phantom + dirty records",function(){var V=I.add({name:"X"})[0];V.set("name","Y");var W=spyOn(V,"reject");I.rejectChanges();expect(W.callCount).toBe(1)});it("should not reject non-phantom non-dirty records",function(){var Y=spyOn(Q,"reject"),X=spyOn(U,"reject"),V=spyOn(O,"reject"),W=spyOn(A,"reject");I.rejectChanges();expect(Y).not.toHaveBeenCalled();expect(X).not.toHaveBeenCalled();expect(V).not.toHaveBeenCalled();expect(W).not.toHaveBeenCalled()})});describe("rejecting non-filtered records",function(){it("should reject dirty records",function(){I.filter("name","Ed Spencer");expect(T.getAt(0)).toBe(Q);Q.set("name","Utley Spencer");expect(T.length).toBe(0);I.rejectChanges();expect(T.getAt(0)).toBe(Q)});it("should reject phantom records",function(){var V=I.getDataSource().length,W=I.add({name:"X"})[0];I.filter("name","Pete");I.rejectChanges();expect(I.getDataSource().length).toBe(V)});it("should reject phantom + dirty records",function(){var V=I.getDataSource().length,W=I.add({name:"X"})[0];I.filter("name","Molly");W.set("name","Y");I.rejectChanges();expect(I.getDataSource().length).toBe(V)})});describe("removing phantoms",function(){it("should remove phantoms",function(){var W=I.insert(2,{name:"X"})[0];var V=I.add({name:"Y"})[0];expect(I.getCount()).toBe(6);I.rejectChanges();expect(I.getCount()).toBe(4);expect(I.indexOf(W)).toBe(-1);expect(I.indexOf(V)).toBe(-1)})});describe("re-adding removed records",function(){it("should re-insert removed records",function(){I.remove(U);expect(I.getCount()).toBe(3);I.rejectChanges();expect(I.getAt(1)).toBe(U)});it("should clear the removed queue",function(){I.remove(U);expect(I.removed.length).toBe(1);I.rejectChanges();expect(I.removed.length).toBe(0)});describe("with and without sorters",function(){function V(X){var W;beforeEach(function(){if(X){I.sort(X)}W=I.count});afterEach(function(){W=null});it("should reject dropped records",function(){I.getAt(0).drop();I.rejectChanges();expect(I.count).toBe(W)});it("should reject erased records",function(){I.getAt(0).erase();I.rejectChanges();expect(I.count).toBe(W)})}V(null);V({property:"name",direction:"DESC"})})});describe("events",function(){it("should not fire an update event for phantom records",function(){var W=I.insert(2,{name:"X"})[0];var V=jasmine.createSpy();I.on("update",V);I.rejectChanges();expect(V).not.toHaveBeenCalled()});it("should fire a remove event for phantom records",function(){var X=I.insert(0,{name:"X"})[0];var W=I.add({name:"Y"})[0];var V=jasmine.createSpy();I.on("remove",V);I.rejectChanges();expect(V.callCount).toBe(2);expect(V.calls[0].args[1]).toEqual([W]);expect(V.calls[1].args[1]).toEqual([X])});it("should fire an update event for non-phantom records",function(){Q.set("name","A");A.set("name","B");var V=jasmine.createSpy();I.on("update",V);I.rejectChanges();expect(V.callCount).toBe(2);expect(V.calls[0].args[1]).toBe(Q);expect(V.calls[1].args[1]).toBe(A)});it("should not fire an update event for removed records",function(){var V=jasmine.createSpy();I.remove(Q);I.on("update",V);I.rejectChanges();expect(V).not.toHaveBeenCalled()});it("should not fire an update event for removed records, with sorters",function(){var V=jasmine.createSpy();I.sort("name","DESC");I.remove(Q);I.on("update",V);I.rejectChanges();expect(V).not.toHaveBeenCalled()});it("should fire add events for readded records",function(){var V=jasmine.createSpy();I.remove(Q);I.on("add",V);I.rejectChanges();expect(V.callCount).toBe(1);expect(V.mostRecentCall.args[1]).toEqual([Q])})})});describe("metachange event",function(){var X=false,Z={success:true,data:[{name:"alex"},{name:"ben"},{name:"don"},{name:"evan"},{name:"nige"},{name:"phil"}],metaData:{root:"data"}},W,V,Y;beforeEach(function(){M({proxy:{type:"ajax",url:"foo"},listeners:{metachange:function(a,b){X=true;W=arguments;V=a;Y=b}}});I.load();L(Z)});afterEach(function(){X=false;W=V=Y=null});it("should call the listener",function(){expect(X).toBe(true)});it("should return the store",function(){expect(V).toBe(I)});it("should return the meta data",function(){expect(Y).toEqual(Z.metaData)});it("should return the store as the first arg",function(){expect(W[0]).toBe(I)});it("should return the meta data as the second arg",function(){expect(W[1]).toBe(Y)});describe("disableMetaChangeEvent (for associated models)",function(){var a=false;afterEach(function(){a=false});it("should not be set by default",function(){M({proxy:{type:"ajax",url:"foo"},listeners:{metachange:function(b,c){a=true}}});I.load();L(Z);expect(a).toBe(true)});it("should not fire the event if `true`",function(){M({disableMetaChangeEvent:true,proxy:{type:"ajax",url:"foo"},listeners:{metachange:function(b,c){a=true}}});I.load();L(Z);expect(a).toBe(false)});it("should fire the event if `false`",function(){M({disableMetaChangeEvent:false,proxy:{type:"ajax",url:"foo"},listeners:{metachange:function(b,c){a=true}}});I.load();L(Z);expect(a).toBe(true)})})});describe("autoSync",function(){var V;beforeEach(function(){M({autoSync:true},true);spyOn(I,"sync").andCallFake(function(){if(V){I.self.prototype.sync.apply(I,arguments);V=false}else{I.needsSync=false}})});describe("adding",function(){it("should trigger a sync if the record is a phantom",function(){I.add({});expect(I.sync.callCount).toBe(1)});it("should trigger a sync if the record is dirty",function(){var W=P("foo@sencha.com");W.set("name","foo");I.add(W);expect(I.sync.callCount).toBe(1)});it("should not trigger a sync if the record is not a phantom or dirty",function(){var W=P("foo@sencha.com");I.add(W);expect(I.sync).not.toHaveBeenCalled()});it("should only trigger a single sync when adding multiple records",function(){I.add([{},{},{},{}]);expect(I.sync.callCount).toBe(1)});describe("with sorting",function(){it("should only trigger a single sync when adding multiple records in a discontiguous range",function(){I.sort("email");var W=[P("aaa@sencha.com"),P("foo@sencha.com"),P("zzz@sencha.com")];Ext.Array.forEach(W,function(Y,X){Y.set("name","foo"+X)});I.add(W);expect(I.sync.callCount).toBe(1)})});describe("with filtering",function(){it("should trigger a sync if the record is filtered out",function(){I.filter("name","Foo");I.add({name:"Bar"});expect(I.sync.callCount).toBe(1)})})});describe("removing",function(){it("should not trigger a sync if the record is a phantom",function(){var W=I.add({})[0];I.sync.reset();I.remove(W);expect(I.sync).not.toHaveBeenCalled()});it("should trigger when removing a record",function(){I.remove(Q);expect(I.sync.callCount).toBe(1)});it("should only trigger a single sync when removing multiple records",function(){I.remove([Q,A]);expect(I.sync.callCount).toBe(1)})});describe("updating",function(){it("should not trigger a sync if the record is not dirty",function(){Q.set("name","Foo");I.sync.reset();Q.set("name","Ed Spencer");expect(I.sync).not.toHaveBeenCalled()});it("should trigger a sync if the record is dirty",function(){Q.set("name","Foo");expect(I.sync.callCount).toBe(1)})});describe("removing with sync response",function(){it("should trigger when removing a record",function(){V=true;I.remove(Q);expect(I.sync.callCount).toBe(1);expect(I.getRemovedRecords().length).toBe(1);L('"{"success":true,"records":[{"id":"ed@sencha.com"}]}"');expect(I.getRemovedRecords().length).toBe(0)});it("should only trigger a single sync when removing multiple records",function(){V=true;I.remove([Q,A]);expect(I.sync.callCount).toBe(1);expect(I.getRemovedRecords().length).toBe(2);L('"{"success":true,"records":[{"id":"tommy@sencha.com"},{"id":"ed@sencha.com"}]}"');expect(I.getRemovedRecords().length).toBe(0)})})});describe("joining/unjoining the the store",function(){function V(Y){var X=Y.joined||[];expect(Ext.Array.indexOf(X,I)).not.toBe(-1)}function W(Y){var X=Y.joined||[];expect(Ext.Array.indexOf(X,I)).toBe(-1)}describe("loading",function(){it("should join when loaded as part of the constructor",function(){M({data:[D]});V(I.getAt(0))});it("should join when loading records",function(){M();I.loadData([B,G]);V(I.getAt(0));V(I.getAt(1))});it("should unjoin existing records when loading a new data set",function(){M();I.loadData([B,G]);Q=I.getAt(0);A=I.getAt(1);I.loadData([D,R]);W(Q);W(A)})});describe("adding",function(){beforeEach(function(){M()});it("should join when adding model data",function(){Q=I.add(B)[0];V(Q)});it("should join when adding a model instance",function(){Q=P(B);I.add(Q);V(Q)});it("should join inserting adding model data",function(){Q=I.insert(0,B)[0];V(Q)});it("should join when inserting a model instance",function(){Q=P(B);I.insert(0,Q);V(Q)});it("should join even when filtered out",function(){I.filter("group","admin");Q=I.add(B)[0];V(Q)})});describe("removing",function(){describe("with trackRemoved: true",function(){beforeEach(function(){M({trackRemoved:true});K()});it("should not unjoin when removing a non phantom record",function(){I.removeAt(0);V(Q)});it("should unjoin when removing a phantom",function(){var X=I.add({})[0];I.remove(X);W(X)});it("should only unjoin items not in the removed collection when calling removeAll",function(){var X=I.add({})[0];I.removeAll();V(Q);V(U);V(O);V(A);W(X)})});describe("with trackRemoved: false",function(){beforeEach(function(){M({trackRemoved:false});K()});it("should unjoin when removing a non phantom record",function(){I.removeAt(0);W(Q)});it("should unjoin when removing a phantom",function(){var X=I.add({})[0];I.remove(X);W(X)});it("should unjoin when calling removeAll",function(){var X=I.add({})[0];I.removeAll();W(Q);W(U);W(O);W(A);W(X)})})});describe("via record changes",function(){describe("with trackRemoved: true",function(){it("should keep the record joined until erased",function(){M({trackRemoved:true});K();Q.drop();V(Q);Q.erase();L({success:true});W(Q)})});describe("with trackRemoved: false",function(){it("should not keep the record joined when dropped",function(){M({trackRemoved:false});K();Q.drop();W(Q)})})});describe("destroying",function(){beforeEach(function(){M();K()});it("should unjoin all records",function(){I.destroy();W(Q);W(U);W(O);W(A)});it("should unjoin all records even when filtered",function(){I.filter("group","code");I.destroy();W(Q);W(U);W(O);W(A)})})});describe("with a session",function(){var W;beforeEach(function(){W=new Ext.data.Session()});afterEach(function(){W.destroy();W=null});function V(X){X=Ext.apply({session:W},X);M(X)}describe("loading data",function(){it("should pass the session record creator when using load",function(){V({proxy:{type:"ajax"}});var X=spyOn(I.getProxy(),"read").andReturn();I.load();expect(X.mostRecentCall.args[0].getRecordCreator()).toBe(W.recordCreator)});it("should pass the record creator when using loadRawData",function(){V({proxy:{type:"ajax"}});var X=spyOn(I.getProxy().getReader(),"read").andCallThrough();I.loadRawData([]);expect(X.mostRecentCall.args[1].recordCreator).toBe(W.recordCreator)})});describe("for records",function(){function X(Y){expect(Y.session).toBe(W)}describe("loading",function(){it("should set the session when loaded as part of the constructor",function(){V({data:[D]});X(I.getAt(0))});it("should set the session when loading records",function(){V();I.loadData([B,G]);X(I.getAt(0));X(I.getAt(1))});it("should not clear the session when loading a new data set",function(){V();I.loadData([B,G]);Q=I.getAt(0);A=I.getAt(1);I.loadData([D,R]);X(Q);X(A)})});describe("adding",function(){beforeEach(function(){V()});it("should set the session when adding model data",function(){Q=I.add(B)[0];X(Q)});it("should set the session when adding a model instance",function(){Q=P(B);I.add(Q);X(Q)});it("should set the session inserting adding model data",function(){Q=I.insert(0,B)[0];X(Q)});it("should set the session when inserting a model instance",function(){Q=P(B);I.insert(0,Q);X(Q)});it("should set the session even when filtered out",function(){I.filter("group","admin");Q=I.add(B)[0];X(Q)})});describe("removing",function(){beforeEach(function(){V();K()});it("should not clear the session when removing a record",function(){I.removeAt(0);X(Q)});it("should not clear the session when calling removeAll",function(){I.removeAll();X(Q);X(U);X(O);X(A)})});describe("destroying",function(){beforeEach(function(){V();K()});it("should not clear the session on any records",function(){I.destroy();X(Q);X(U);X(O);X(A)})})})});describe("destroying",function(){it("should cancel a pending autoLoad",function(){M({autoLoad:true});spyOn(I,"load").andReturn();I.destroy();waits(50);runs(function(){expect(I.load).not.toHaveBeenCalled()})});it("should not fire a remove or clear event",function(){M();K();var V=jasmine.createSpy();I.on("remove",V);I.on("clear",V);I.destroy();expect(V).not.toHaveBeenCalled()});describe("proxy",function(){function V(Y){var W=Y.hasListeners,Z={},X;for(X in W){if(W.hasOwnProperty(X)){Z[X]=W[X]}}return Z}describe("proxy created by the store",function(){it("should destroy a stringified proxy and clear it from the store",function(){M({proxy:"ajax"});var W=I.getProxy(),X=spyOn(W,"destroy").andCallThrough();I.destroy();expect(X).toHaveBeenCalled();expect(I.getProxy()).toBeNull()});it("should destroy an object config proxy and clear it from the store",function(){M({proxy:{type:"ajax"}});var W=I.getProxy(),X=spyOn(W,"destroy").andCallThrough();I.destroy();expect(X).toHaveBeenCalled();expect(I.getProxy()).toBeNull()})});describe("proxy from model",function(){it("should clear any listeners and detach from the store, but not destroy it",function(){var X=E.getProxy(),W=V(X),Y;M();Y=spyOn(X,"destroy").andCallThrough();I.destroy();expect(Y).not.toHaveBeenCalled();expect(I.getProxy()).toBeNull();expect(V(X.hasListeners)).toEqual(W)})});describe("proxy instance",function(){it("should clear any listeners and detach from the store, but not destroy it",function(){var X=new Ext.data.proxy.Ajax(),W=V(X),Y;M({proxy:X});Y=spyOn(X,"destroy").andCallThrough();I.destroy();expect(Y).not.toHaveBeenCalled();expect(I.getProxy()).toBeNull();expect(V(X.hasListeners)).toEqual(W)})})})});describe("extraKeys",function(){describe("setting after initialization",function(){beforeEach(function(){M();K();I.setExtraKeys({byAge:{property:"age",rootProperty:"data"}})});it("should have the extraKeys updated when add fires",function(){var V=P("foo@sencha.com",{age:100});I.on("add",function(){expect(I.byAge.get(100)).toBe(V)});I.add(V)});it("should have the extraKeys updated when remove fires",function(){I.on("remove",function(){expect(I.byAge.get(25)).toBeNull()});I.remove(Q)});it("should have the extraKeys updated when update fires",function(){I.on("update",function(){expect(I.byAge.get(1)).toBe(Q)});Q.set("age",1)});it("should have the extraKeys updated when clear fires",function(){I.on("clear",function(){expect(I.byAge.get(20)).toBeNull();expect(I.byAge.get(25)).toBeNull();expect(I.byAge.get(26)).toBeNull();expect(I.byAge.get(70)).toBeNull()});I.removeAll()})})});describe("Reactive grouping",function(){var V,Z,W;function Y(b,d,c,a){W++;expect(b.getRange()).toEqual([O,U,A,Q]);d=b.getSorters();V=b.getGroups();expect(V.items[0].getSorters().items.length).toBe(1);expect(V.items[0].getSorters().items[0].getProperty()).toBe("age");expect(V.items[0].getSorters().items[0]===d.items[0]).toBe(true);expect(V.items[1].getSorters().items[0]===d.items[0]).toBe(true);expect(V.items[0].items).toEqual([O,U]);expect(V.items[1].items).toEqual([A,Q])}function X(){W++;expect(I.getRange()).toEqual([O,Q,U,A]);expect(V.items[0].items).toEqual([O,Q,U]);expect(V.items[1].items).toEqual([A])}describe("Test state of groups' sort at the time the sort event fires",function(){it("should work going from no sorters to some sorters",function(){M({groupField:"group",data:[D,B,G,R]});O=I.getById("aaron@sencha.com");U=I.getById("abe@sencha.com");Q=I.getById("ed@sencha.com");A=I.getById("tommy@sencha.com");expect(I.getRange()).toEqual([U,O,Q,A]);W=0;I.on({datachanged:Y,refresh:Y,sort:Y,single:true});I.sort("age");expect(W).toBe(3);W=0;I.on({refresh:X,single:true});Q.set("group","admin");expect(W).toBe(1)});it("should work changing sorters",function(){M({groupField:"group",data:[D,B,G,R],sorters:[{property:"evilness",direction:"DESC"}]});O=I.getById("aaron@sencha.com");U=I.getById("abe@sencha.com");Q=I.getById("ed@sencha.com");A=I.getById("tommy@sencha.com");expect(I.getRange()).toEqual([U,O,Q,A]);Z=I.getSorters();V=I.getGroups();expect(V.items[0].getSorters().items.length).toBe(1);expect(V.items[0].getSorters().items[0].getProperty()).toBe("evilness");expect(V.items[0].getSorters().items[0]===Z.items[0]).toBe(true);expect(V.items[1].getSorters().items[0]===Z.items[0]).toBe(true);expect(V.items[0].items).toEqual([U,O]);expect(V.items[1].items).toEqual([Q,A]);W=0;I.on({datachanged:Y,refresh:Y,sort:Y,single:true});I.sort("age");expect(W).toBe(3);W=0;I.on({refresh:X,single:true});Q.set("group","admin");expect(W).toBe(1)})})})})