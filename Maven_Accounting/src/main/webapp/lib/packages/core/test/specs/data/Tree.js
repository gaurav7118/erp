xdescribe("Ext.data.Tree",function(){var A,C,B;beforeEach(function(){A=new Ext.data.Tree();Ext.define("spec.Node",{extend:"Ext.data.TreeModel",fields:[{name:"text",type:"string"}],proxy:{type:"memory"}});Ext.data.NodeInterface.decorate(spec.Node);C=new spec.Node({id:42})});afterEach(function(){Ext.data.Model.schema.clear();Ext.undefine("spec.Node")});describe("instantiation",function(){it("should mix in Ext.util.Observable",function(){expect(A.mixins.observable).toBe(Ext.util.Observable.prototype)})});describe("methods",function(){describe("setting the root node",function(){beforeEach(function(){B=spyOn(A,"registerNode");A.setRootNode(C)});describe("setRootNode",function(){it("should set the root node for the tree",function(){expect(A.root).toBe(C)});it("should set the node as root",function(){expect(C.isRoot()).toBe(true)});it("should register node",function(){expect(B).toHaveBeenCalledWith(C,true)})});describe("getRootNode",function(){it("should return the root node",function(){expect(A.getRootNode()).toBe(C)})})});describe("registering and unregistering nodes",function(){beforeEach(function(){A.setRootNode(C)});describe("register node",function(){it("should add node to nodeHash",function(){var D=new spec.Node({id:10});A.registerNode(D);expect(A.getNodeById(10)).toBe(D)})});describe("unregisterNode",function(){it("should remove node from nodeHash",function(){A.registerNode(C);A.unregisterNode(C);expect(A.getNodeById(42)).not.toBeDefined()})})});describe("updating id in the node hash when a node's id changes",function(){beforeEach(function(){A.setRootNode(C)});it("should update the node hash",function(){var D=C.getId();C.setId(9000);expect(A.getNodeById(D)).toBeUndefined();expect(A.getNodeById(9000)).toBe(C)})});describe("Nodes using a sequential idgen",function(){beforeEach(function(){Ext.define("spec.SequentialIdModel",{extend:"Ext.data.TreeModel",idgen:{type:"sequential",seed:1000},fields:[{name:"id",type:"integer",required:true,label:"Id"},{name:"text",type:"string",required:true,label:"Text"}]})});it("should register new nodes using sequential IDs starting at 1000",function(){var D=new spec.SequentialIdModel({});A.setRootNode(D);expect(D.getId()).toBe(1000);expect(A.getNodeById(1000)===D).toBe(true)})})})})