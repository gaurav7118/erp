describe("Ext.data.Types",function(){var A=function(D,C,E){var B=Ext.apply(C||{},{getAllowNull:function(){return C?C.allowNull:false},getDateFormat:function(){return C?C.dateFormat:null},getDateReadFormat:function(){return C?C.dateReadFormat:null}});return D.convert.call(B,E)};describe("AUTO",function(){var B=Ext.data.Types.AUTO;it("should have a type property equal to auto",function(){expect(B.type).toEqual("auto")});it("should not have a sortType",function(){expect(B.sortType).toEqual(Ext.data.SortTypes.none)});describe("convert",function(){it("should not be defined (because it's faster to create models this way)",function(){expect(B.convert).toBeUndefined()})})});describe("STRING",function(){var B=Ext.data.Types.STRING;it("should have a type property equal to string",function(){expect(B.type).toEqual("string")});it("should have a sortType equal to asUCString",function(){expect(B.sortType).toEqual(Ext.data.SortTypes.asUCString)});describe("convert",function(){it("should not convert undefined",function(){expect(A(B,null,undefined)).toEqual("")});it("should convert null",function(){expect(A(B,null,null)).toEqual("")});it("should convert number",function(){expect(A(B,null,1)).toEqual("1")});it("should convert float",function(){expect(A(B,null,37.2)).toEqual("37.2")});it("should not convert string",function(){expect(A(B,null,"sencha banzai!")).toEqual("sencha banzai!")});it("should not convert empty string",function(){expect(A(B,null,"")).toEqual("")});it("should convert date",function(){var C=new Date();expect(A(B,null,C)).toEqual(C.toString())});it("should convert a boolean value",function(){expect(A(B,null,true)).toEqual("true")});it("should set to null with allowNull and an undefined value",function(){expect(A(B,{allowNull:true}),undefined).toBeNull()});it("should set to null with allowNull and a null value",function(){expect(A(B,{allowNull:true}),undefined).toBeNull()})})});describe("INT",function(){var B=Ext.data.Types.INT;it("should have a type property equal to int",function(){expect(B.type).toEqual("int")});it("should have an alias named INTEGER",function(){expect(B).toEqual(Ext.data.Types.INTEGER)});it("should not have a sortType",function(){expect(B.sortType).toEqual(Ext.data.SortTypes.none)});describe("convert",function(){describe("invalid",function(){it("should convert undefined in 0",function(){expect(A(B,null,undefined)).toEqual(0)});it("should convert null in 0",function(){expect(A(B,null,null)).toEqual(0)});it("should convert empty string in 0",function(){expect(A(B,null,"")).toEqual(0)});it("should convert undefined to null",function(){expect(A(B,{allowNull:true},undefined)).toBeNull()});it("should convert null to null",function(){expect(A(B,{allowNull:true},null)).toBeNull()});it("should convert empty string to null",function(){expect(A(B,{allowNull:true},"")).toBeNull()})});describe("expected",function(){it("should convert numeric string value",function(){expect(A(B,null,"42")).toEqual(42)});it("should convert integer",function(){expect(A(B,null,42)).toEqual(42)});it("should convert negative integer",function(){expect(A(B,null,-42)).toEqual(-42)})});describe("floats",function(){it("should convert float string value",function(){expect(A(B,null,"42.20")).toEqual(42)});it("should convert float",function(){expect(A(B,null,42.99)).toEqual(42)});it("should convert negative float",function(){expect(A(B,null,-42.5)).toEqual(-42)})});describe("stripRe",function(){it("should convert string with $",function(){expect(A(B,null,"$42")).toEqual(42)});it("should convert string with %",function(){expect(A(B,null,"-42%")).toEqual(-42)});it("should convert string with , seperating numbers",function(){expect(A(B,null,"123,456.00")).toEqual(123456)});it("should convert string with custom stripRe",function(){var C=Ext.data.Types.stripRe;Ext.data.Types.stripRe=/[!]/g;expect(A(B,null,"987!654.34")).toEqual(987654);Ext.data.Types.stripRe=C})})})});describe("FLOAT",function(){var B=Ext.data.Types.FLOAT;it("should have a type property equal to float",function(){expect(B.type).toEqual("float")});it("should have an alias named NUMBER",function(){expect(B).toEqual(Ext.data.Types.NUMBER)});it("should not have a sortType",function(){expect(B.sortType).toEqual(Ext.data.SortTypes.none)});describe("convert",function(){describe("invalid",function(){it("should convert undefined in 0",function(){expect(A(B,null,undefined)).toEqual(0)});it("should convert null in 0",function(){expect(A(B,null,null)).toEqual(0)});it("should convert empty string in 0",function(){expect(A(B,null,"")).toEqual(0)});it("should convert undefined to null",function(){expect(A(B,{allowNull:true},undefined)).toBeNull()});it("should convert null to null",function(){expect(A(B,{allowNull:true},null)).toBeNull()});it("should convert empty string to null",function(){expect(A(B,{allowNull:true},"")).toBeNull()})});describe("expected",function(){describe("int",function(){it("should convert numeric string value",function(){expect(A(B,null,"42")).toEqual(42)});it("should convert integer",function(){expect(A(B,null,42)).toEqual(42)});it("should convert negative integer",function(){expect(A(B,null,-42)).toEqual(-42)})});describe("floats",function(){it("should convert float string value",function(){expect(A(B,null,"42.03")).toEqual(42.03)});it("should convert float",function(){expect(A(B,null,42.78)).toEqual(42.78)});it("should convert negative float",function(){expect(A(B,null,-42.55)).toEqual(-42.55)})})});describe("stripRe",function(){it("should convert string with $",function(){expect(A(B,null,"$42.56")).toEqual(42.56)});it("should convert string with %",function(){expect(A(B,null,"-42.66%")).toEqual(-42.66)});it("should convert string with , seperating numbers",function(){expect(A(B,null,"123,456.78")).toEqual(123456.78)});it("should convert string with custom stripRe",function(){var C=Ext.data.Types.stripRe;Ext.data.Types.stripRe=/[!]/g;expect(A(B,null,"987!654.34")).toEqual(987654.34);Ext.data.Types.stripRe=C})})})});describe("BOOL",function(){var B=Ext.data.Types.BOOL;it("should have a type property equal to bool",function(){expect(B.type).toEqual("bool")});it("should have an alias named BOOLEAN",function(){expect(B).toEqual(Ext.data.Types.BOOLEAN)});it("should not have a sortType",function(){expect(B.sortType).toEqual(Ext.data.SortTypes.none)});describe("convert",function(){describe("the true things",function(){it("should convert true",function(){expect(A(B,null,true)).toBe(true)});it("should convert true string",function(){expect(A(B,null,"true")).toBe(true)});it("should convert integer",function(){expect(A(B,null,1)).toBe(true)});it("should convert integer string",function(){expect(A(B,null,"1")).toBe(true)})});describe("the false things",function(){it("should convert false",function(){expect(A(B,null,false)).toBe(false)});it("should convert integer",function(){expect(A(B,null,7)).toBe(false)});it("should convert string",function(){expect(A(B,null,"foo")).toBe(false)});it("should convert object",function(){expect(A(B,null,{})).toBe(false)});it("should convert array",function(){expect(A(B,null,[])).toBe(false)});it("should convert date",function(){expect(A(B,null,new Date())).toBe(false)})});describe("allowNull",function(){it("should convert undefined to null if allowNull is specified",function(){expect(A(B,{allowNull:true},undefined)).toBeNull()});it("should convert null to null if allowNull is specified",function(){expect(A(B,{allowNull:true},null)).toBeNull()});it("should convert empty string to null if allowNull is specified",function(){expect(A(B,{allowNull:true},"")).toBeNull()})})})});describe("DATE",function(){var B=Ext.data.Types.DATE;it("should have a type property equal to date",function(){expect(B.type).toEqual("date")});it("should not a sortType equal to asDate",function(){expect(B.sortType).toEqual(Ext.data.SortTypes.asDate)});describe("convert",function(){describe("invalid",function(){it("should convert undefined",function(){expect(A(B,null,undefined)).toBeNull()});it("should convert null",function(){expect(A(B,null,null)).toBeNull()});it("should convert false",function(){expect(A(B,null,false)).toBeNull()});it("should convert a string",function(){expect(A(B,null,"will fail")).toBeNull()})});describe("expected",function(){it("should convert date",function(){var C=new Date();expect(A(B,null,C)).toEqual(C)});it("should convert timestamp",function(){var D=1234567890,C=new Date(D*1000);expect(A(B,{dateFormat:"timestamp"},D).getTime()).toEqual(C.getTime())});it("should convert time",function(){var D=11111111110000,C=new Date(D);expect(A(B,{dateFormat:"time"},D).getTime()).toEqual(C.getTime())});it("should convert custom date format",function(){var C="Y-m-d",E="1986-03-03",D=Ext.Date.parse(E,C);expect(A(B,{dateFormat:C},E).getTime()).toEqual(D.getTime())})})})})})