describe("Ext.data.field.Date",function(){var B;function A(C){B=new Ext.data.field.Date(C)}afterEach(function(){B=null});describe("defaults",function(){beforeEach(function(){A()});it("should configure the type",function(){expect(B.getType()).toBe("date")});it("should default dateFormat to null",function(){expect(B.getDateFormat()).toBeNull()});it("should default dateReadFormat to null",function(){expect(B.getDateReadFormat()).toBeNull()});it("should default dateWriteFormat to timestamp",function(){expect(B.getDateWriteFormat()).toBe("timestamp")});it("should default the sorting to date",function(){expect(B.getSortType()).toBe(Ext.data.SortTypes.asDate)})});describe("configuring",function(){it("should configure dateFormat",function(){A({dateFormat:"Y/m/d"});expect(B.getDateFormat()).toBe("Y/m/d")});it("should configure dateReadFormat",function(){A({dateReadFormat:"Y-m-d"});expect(B.getDateReadFormat()).toBe("Y-m-d")});it("should configure dateWriteFormat",function(){A({dateWriteFormat:"Y m d"});expect(B.getDateWriteFormat()).toBe("Y m d")})});describe("compare",function(){var E=new Date(2000,0,1),D=new Date(2005,0,1),C=new Date(2010,0,1);beforeEach(function(){A()});describe("mixed types",function(){it("should return 0 if both values are not dates",function(){expect(B.compare(null,null)).toBe(0)});it("should return -1 if a is not a date and b is a date",function(){expect(B.compare(null,E)).toBe(-1)});it("should return 1 if a is a date and b is not a date",function(){expect(B.compare(E,null)).toBe(1)})});describe("2 dates",function(){it("should return 0 if the date values are equal",function(){expect(B.compare(E,E)).toBe(0)});it("should return -1 a < b",function(){expect(B.compare(E,D)).toBe(-1)});it("should return 1 a > b",function(){expect(B.compare(C,D)).toBe(1)})})});describe("convert",function(){it("should return the same date instance if passed",function(){A();var C=new Date();expect(B.convert(C)).toBe(C)});describe("falsy values",function(){beforeEach(function(){A()});it("should return null if false is passed",function(){expect(B.convert(false)).toBeNull()});it("should return null if undefined is passed",function(){expect(B.convert(undefined)).toBeNull()});it("should return null if null is passed",function(){expect(B.convert(null)).toBeNull()});it("should return null if '' is passed",function(){expect(B.convert("")).toBeNull()});it("should return null if 0 is passed",function(){expect(B.convert(0)).toBeNull()})});describe("with format",function(){it("should use the dateFormat",function(){var E=new Date();A({dateFormat:"Y-m-d"});var C,D;spyOn(Ext.Date,"parse").andCallFake(function(G,F){C=G;D=F;return E});expect(B.convert("2000-01-01")).toBe(E);expect(C).toBe("2000-01-01");expect(D).toBe("Y-m-d")});it("should use the dateReadFormat",function(){var E=new Date();A({dateReadFormat:"Y-m-d"});var C,D;spyOn(Ext.Date,"parse").andCallFake(function(G,F){C=G;D=F;return E});expect(B.convert("2000-01-01")).toBe(E);expect(C).toBe("2000-01-01");expect(D).toBe("Y-m-d")});it("should prefer dateReadFormat over dateFormat",function(){var E=new Date();A({dateReadFormat:"Y-m-d",dateFormat:"Y/m/d"});var C,D;spyOn(Ext.Date,"parse").andCallFake(function(G,F){C=G;D=F;return E});expect(B.convert("2000-01-01")).toBe(E);expect(C).toBe("2000-01-01");expect(D).toBe("Y-m-d")})});describe("without format",function(){it("should call native Date.parse",function(){A();expect(+B.convert("Sat Jan 01 2000 00:00:00 GMT-0700 (MST)")).toBe(946710000000)});it("should return null if native parsing can't parse the date",function(){A();expect(B.convert("foo")).toBeNull()})})});describe("isEqual",function(){beforeEach(function(){A()});it("should return false if a is a date and b is not",function(){expect(B.isEqual(new Date(),null)).toBe(false)});it("should return false if b is a date and a is not",function(){expect(B.isEqual(null,new Date())).toBe(false)});it("should return true if 2 dates have the same value",function(){var D=new Date(1984,3,15),C=new Date(1984,3,15);expect(B.isEqual(D,C)).toBe(true)});it("should return false if 2 dates have different values",function(){var D=new Date(1984,3,15),C=new Date(1984,3,17);expect(B.isEqual(D,C)).toBe(false)})});describe("serialize",function(){it("should return null if the value is not a date",function(){A();expect(B.serialize("")).toBeNull()});it("should use the default if there is no specified format",function(){A();var C=new Date();expect(B.serialize(C)).toBe(Ext.Date.format(C,"timestamp"))});describe("with format",function(){it("should use dateFormat",function(){var E=new Date();A({dateFormat:"Y-m-d"});var C,D;spyOn(Ext.Date,"format").andCallFake(function(G,F){C=G;D=F;return"formatted"});expect(B.serialize(E)).toBe("formatted");expect(C).toBe(E);expect(D).toBe("Y-m-d")});it("should use dateWriteFormat",function(){var E=new Date();A({dateWriteFormat:"Y-m-d"});var C,D;spyOn(Ext.Date,"format").andCallFake(function(G,F){C=G;D=F;return"formatted"});expect(B.serialize(E)).toBe("formatted");expect(C).toBe(E);expect(D).toBe("Y-m-d")});it("should should favour dateWriteFormat over dateFormat",function(){var E=new Date();A({dateFormat:"Y/m/d",dateWriteFormat:"Y-m-d"});var C,D;spyOn(Ext.Date,"format").andCallFake(function(G,F){C=G;D=F;return"formatted"});expect(B.serialize(E)).toBe("formatted");expect(C).toBe(E);expect(D).toBe("Y-m-d")})})})})