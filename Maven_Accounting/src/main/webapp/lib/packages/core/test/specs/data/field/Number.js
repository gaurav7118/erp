describe("Ext.data.field.Number",function(){var B;function A(D){B=new Ext.data.field.Number(D)}function C(D){return B.convert(D)}afterEach(function(){B=null});describe("defaults",function(){it("should configure the type",function(){A();expect(B.getType()).toBe("float")})});describe("convert",function(){it("should call return the number if passed",function(){A();expect(C(12.345)).toBe(12.345)});describe("''/null/undefined",function(){describe("with allowNull: true",function(){beforeEach(function(){A({allowNull:true})});it("should return null with ''",function(){expect(C("")).toBeNull()});it("should return null with null",function(){expect(C(null)).toBeNull()});it("should return null with undefined",function(){expect(C(undefined)).toBeNull()})});describe("without allowNull: false",function(){beforeEach(function(){A({allowNull:false})});it("should return 0 with ''",function(){expect(C("")).toBe(0)});it("should return 0 with null",function(){expect(C(null)).toBe(0)});it("should return 0 with undefined",function(){expect(C(undefined)).toBe(0)})})});describe("other values",function(){describe("invalid values",function(){describe("with allowNull: true",function(){beforeEach(function(){A({allowNull:true})});it("should return null where a value can't be parsed",function(){expect(C("asdf")).toBeNull()})});describe("with allowNull: false",function(){beforeEach(function(){A({allowNull:false})});it("should return NaN where a value can't be parsed",function(){expect(isNaN(C("asdf"))).toBe(true)})})});it("should parse a number string",function(){A();expect(C("34")).toBe(34)});it("should parse a number string and round it",function(){A();expect(C("42.123")).toBe(42.123)})});describe("stripRe",function(){it("should strip the value with the stripRe",function(){A();expect(C("$100,000.12%")).toBe(100000.12)});it("should accept a custom stripRe",function(){A({stripRe:/\u20ac/});expect(C("\u20ac200.65")).toBe(200.65)})})})})