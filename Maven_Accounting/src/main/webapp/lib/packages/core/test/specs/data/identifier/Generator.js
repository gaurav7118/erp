describe("Ext.data.identifier.Generator",function(){var A=Ext.data.identifier.Generator,B;afterEach(function(){B=null;A.all={uuid:A.all.uuid}});describe("factory",function(){describe("creating",function(){describe("sequential",function(){var C=Ext.data.identifier.Sequential;it("should create a with a string",function(){B=Ext.Factory.dataIdentifier("sequential");expect(B instanceof C)});it("should create a with a config",function(){B=Ext.Factory.dataIdentifier({type:"sequential"});expect(B instanceof C)});it("should return the same instance",function(){B=new C();expect(Ext.Factory.dataIdentifier(B)).toBe(B)});it("should return an existing id",function(){B=new C({id:"foo"});expect(Ext.Factory.dataIdentifier("foo")).toBe(B)})});describe("uuid",function(){var C=Ext.data.identifier.Uuid;it("should create with a string",function(){B=Ext.Factory.dataIdentifier("uuid");expect(B instanceof C)});it("should create a with a config",function(){B=Ext.Factory.dataIdentifier({type:"uuid"});expect(B instanceof C)});it("should return the same instance",function(){B=new C();expect(Ext.Factory.dataIdentifier(B)).toBe(B)});it("should return an existing id",function(){B=new C({id:"foo"});expect(Ext.Factory.dataIdentifier("foo")).toBe(B)})})})})})