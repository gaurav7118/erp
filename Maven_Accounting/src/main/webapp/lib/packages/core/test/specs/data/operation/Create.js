describe("Ext.data.operation.Create",function(){var F,C,E,B,D;function A(G){F=new Ext.data.operation.Create(G)}beforeEach(function(){Ext.define("spec.Alien",{extend:"Ext.data.Model",fields:["name","age","planet"]});C=new spec.Alien({name:"Thor",age:5000,planet:"Orilla"});B=new spec.Alien({name:"Teal'c",age:130,planet:"Chulak"});E={id:5,name:"Baal",age:3000,planet:"P3X-888"};D={id:12,name:"Jolinar",age:1500,planet:"Vorash"}});afterEach(function(){F=C=E=B=D=null;Ext.data.Model.schema.clear();Ext.undefine("spec.Alien")});describe("execute",function(){it("should call the proxy create method and pass itself",function(){var G=new Ext.data.proxy.Proxy();spyOn(G,"create").andReturn(new Ext.data.Request());A({proxy:G});F.execute();expect(G.create).toHaveBeenCalledWith(F)})});describe("creating records",function(){describe("single record",function(){beforeEach(function(){C.dirty=true;A({records:[C]});F.process(new Ext.data.ResultSet({success:true,records:[E]}),{},{})});it("should update the client record with the server record's data",function(){expect(C.get("id")).toBe(E.id);expect(C.get("name")).toBe(E.name);expect(C.get("age")).toBe(E.age);expect(C.get("planet")).toBe(E.planet)});it("should mark the client record as not dirty",function(){expect(C.dirty).toBe(false)});it("should mark the client record as not phantom",function(){expect(C.phantom).toBe(false)})});describe("multiple records without using clientIdProperty",function(){beforeEach(function(){C.dirty=true;B.dirty=true;A({records:[C,B]});F.process(new Ext.data.ResultSet({success:true,records:[E,D]}))});it("should update the client records with the server records' data",function(){expect(C.get("id")).toBe(E.id);expect(C.get("name")).toBe(E.name);expect(C.get("age")).toBe(E.age);expect(C.get("planet")).toBe(E.planet);expect(B.get("id")).toBe(D.id);expect(B.get("name")).toBe(D.name);expect(B.get("age")).toBe(D.age);expect(B.get("planet")).toBe(D.planet)});it("should mark the client records as not dirty",function(){expect(C.dirty).toBe(false);expect(B.dirty).toBe(false)});it("should mark the client records as not phantom",function(){expect(C.phantom).toBe(false);expect(B.phantom).toBe(false)})});describe("multiple records with a clientIdProperty",function(){beforeEach(function(){C.dirty=true;B.dirty=true;E.clientId=B.id;D.clientId=C.id;A({records:[C,B]});spec.Alien.prototype.clientIdProperty="clientId";F.process(new Ext.data.ResultSet({success:true,records:[D,E]}))});it("should update the client records with the server records' data",function(){expect(C.get("id")).toBe(D.id);expect(C.get("name")).toBe(D.name);expect(C.get("age")).toBe(D.age);expect(C.get("planet")).toBe(D.planet);expect(B.get("id")).toBe(E.id);expect(B.get("name")).toBe(E.name);expect(B.get("age")).toBe(E.age);expect(B.get("planet")).toBe(E.planet)});it("should mark the client records as not dirty",function(){expect(C.dirty).toBe(false);expect(B.dirty).toBe(false)});it("should mark the client records as not phantom",function(){expect(C.phantom).toBe(false);expect(B.phantom).toBe(false)})})})})