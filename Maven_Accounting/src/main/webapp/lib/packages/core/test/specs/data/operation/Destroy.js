describe("Ext.data.operation.Destroy",function(){var B;function A(C){B=new Ext.data.operation.Destroy(C)}afterEach(function(){B=null;Ext.data.Model.schema.clear();Ext.undefine("spec.User")});describe("execute",function(){it("should call the proxy erase method and pass itself",function(){var C=new Ext.data.proxy.Proxy();spyOn(C,"erase").andReturn(new Ext.data.Request());A({proxy:C});B.execute();expect(C.erase).toHaveBeenCalledWith(B)})});describe("process",function(){var E,D,C;beforeEach(function(){E=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"]});D=new E();C=new E();A({records:[D,C]});spyOn(D,"setErased");spyOn(C,"setErased")});afterEach(function(){Ext.undefine("spec.User");E=D=C=null});it("should erase all records if successful",function(){B.process(new Ext.data.ResultSet({success:true}),new Ext.data.Request(),{});expect(D.setErased).toHaveBeenCalled();expect(C.setErased).toHaveBeenCalled()});it("should not erase records if not successful",function(){B.process(new Ext.data.ResultSet({success:false}),new Ext.data.Request(),{});expect(D.setErased).not.toHaveBeenCalled();expect(C.setErased).not.toHaveBeenCalled()})})})