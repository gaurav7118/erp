describe("Ext.data.proxy.Proxy",function(){var D,H=Ext.data.proxy.Proxy,C="spec.Alien",B={extend:"Ext.data.Model",fields:[{name:"name",type:"string"},{name:"age",type:"int"},{name:"planet",type:"string"}]},E,A,G="spec.Human",F={extend:"Ext.data.Model",fields:[{name:"name",type:"string"},{name:"age",type:"int"},{name:"planet",type:"string",defaultValue:"Earth"}]};beforeEach(function(){Ext.ClassManager.enableNamespaceParseCache=false;D=new H({});E=Ext.define(C,B);A=Ext.define(G,F)});afterEach(function(){Ext.ClassManager.enableNamespaceParseCache=true;Ext.data.Model.schema.clear();Ext.undefine("spec.Alien");Ext.undefine("spec.Human");if(D){D.destroy()}D=null});it("should mixin Ext.mixins.Observable",function(){expect(D.mixins.observable).toEqual(Ext.mixin.Observable.prototype)});describe("instantiation",function(){it("should default the batch order to create/update/destroy",function(){expect(D.getBatchOrder()).toBe("create,update,destroy")})});describe("methods",function(){describe("getModel",function(){it("should return the proxy model",function(){D.setModel(E);expect(D.getModel()).toEqual(E)})});describe("setModel",function(){it("should have a model equal to AlienModel",function(){D.setModel(E);expect(D.getModel()).toEqual(E)});describe("if the Reader has already been instantiated",function(){beforeEach(function(){D.setReader(new Ext.data.reader.Reader({model:null}));spyOn(D.getReader(),"setModel").andReturn(true)});it("should set the Reader's Model",function(){D.setModel(E);expect(D.getReader().setModel).toHaveBeenCalledWith(E)})})});describe("batch",function(){var J,I={create:[E,A],update:[E]},K={complete:{fn:Ext.emptyFn,scope:this}};it("should run Ext.data.Batch.prototype.add 2 times",function(){J=spyOn(Ext.data.Batch.prototype,"add").andCallThrough();D.batch(I,K);expect(J.callCount).toEqual(2)});it("should run Ext.data.Batch.prototype.start 1 times",function(){J=spyOn(Ext.data.Batch.prototype,"start").andCallThrough();D.batch(I,K);expect(J.callCount).toEqual(1)})})});describe("metachange event",function(){var J=false,M={success:true,data:[{name:"alex"},{name:"ben"},{name:"don"},{name:"evan"},{name:"nige"},{name:"phil"}],metaData:{root:"data",fields:["occupation"]}},I,L,K;beforeEach(function(){D=new H({listeners:{metachange:function(N,O){J=true;I=arguments;L=N;K=O}}});D.getReader().readRecords(M)});afterEach(function(){J=false;I=L=K=null});it("should call the listener",function(){expect(J).toBe(true)});it("should return the proxy",function(){expect(L).toBe(D)});it("should return the meta data",function(){expect(K).toEqual(M.metaData)});it("should return the proxy as the first arg",function(){expect(I[0]).toBe(D)});it("should return the meta data as the second arg",function(){expect(I[1]).toBe(K)})});describe("pending operations",function(){var J,I;beforeEach(function(){J=new Ext.data.operation.Operation();I=new Ext.data.operation.Operation();spyOn(J,"abort");spyOn(I,"abort");D.pendingOperations[J._internalId]=J;D.pendingOperations[I._internalId]=I});afterEach(function(){J=I=D=null});describe("aborting",function(){beforeEach(function(){J.execute();D.destroy()});it("should abort running operations",function(){expect(J.abort).toHaveBeenCalled()});it("should not abort non-running operations",function(){expect(I.abort).not.toHaveBeenCalled()})});describe("cleanup",function(){beforeEach(function(){D.destroy()});it("should null pendingOperations",function(){expect(D.pendingOperations).toBe(null)})})})})