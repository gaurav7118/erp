describe("Ext.data.reader.Json",function(){var B,A,F,E,D,C;beforeEach(function(){Ext.ClassManager.enableNamespaceParseCache=false;Ext.data.Model.schema.setNamespace("spec");Ext.define("spec.JsonReader",{extend:"Ext.data.Model",fields:[{name:"inter",type:"int"}]});B=new Ext.data.JsonReader({rootProperty:"data",totalProperty:"totalProp",messageProperty:"messageProp",successProperty:"successProp",model:"spec.JsonReader"})});afterEach(function(){if(B){B.destroy()}B=null;Ext.ClassManager.enableNamespaceParseCache=true;Ext.undefine("spec.JsonReader");Ext.data.Model.schema.clear(true)});describe("raw data",function(){var G,H;beforeEach(function(){G={inter:1}});afterEach(function(){H=null});it("should not set raw data reference by default",function(){H=B.readRecords([G]).getRecords()[0];expect(H.raw).not.toBeDefined()});it("should set raw data reference for a TreeStore record",function(){spec.JsonReader.prototype.isNode=true;H=B.readRecords([G]).getRecords()[0];expect(H.raw).toBe(G)})});describe("copyFrom",function(){var G,H;beforeEach(function(){G=Ext.define(null,{extend:"Ext.data.Model"});B.destroy();B=null});afterEach(function(){H.destroy();G=H=null});it("should copy the model",function(){B=new Ext.data.reader.Json({model:G});H=new Ext.data.reader.Json();H.copyFrom(B);expect(H.getModel()).toBe(G)});it("should copy the record",function(){B=new Ext.data.reader.Json({model:G,record:"foo"});H=new Ext.data.reader.Json();H.copyFrom(B);expect(H.getRecord()).toBe("foo");var I=B.read([{foo:{x:1}}]);expect(I.getRecords()[0].get("x")).toBe(1)});it("should copy the totalProperty",function(){B=new Ext.data.reader.Json({model:G,totalProperty:"aTotal"});H=new Ext.data.reader.Json();H.copyFrom(B);expect(H.getTotalProperty()).toBe("aTotal");var I=B.read({aTotal:1000});expect(I.getTotal()).toBe(1000)});it("should copy the successProperty",function(){B=new Ext.data.reader.Json({model:G,successProperty:"aSuccess"});H=new Ext.data.reader.Json();H.copyFrom(B);expect(H.getSuccessProperty()).toBe("aSuccess");var I=B.read({aSuccess:false});expect(I.getSuccess()).toBe(false)});it("should copy the messageProperty",function(){B=new Ext.data.reader.Json({model:G,messageProperty:"aMessage"});H=new Ext.data.reader.Json();H.copyFrom(B);expect(H.getMessageProperty()).toBe("aMessage");var I=B.read({aMessage:"Some Message"});expect(I.getMessage()).toBe("Some Message")});it("should copy the rootProperty",function(){B=new Ext.data.reader.Json({model:G,rootProperty:"aRoot"});H=new Ext.data.reader.Json();H.copyFrom(B);expect(H.getRootProperty()).toBe("aRoot");var I=B.read({aRoot:[{},{},{},{}]});expect(I.getCount()).toBe(4)})});describe("preserveRawData",function(){it("should not use the raw data object for the model if set to true",function(){B.setPreserveRawData(true);var H={inter:1};var G=B.readRecords([H]).getRecords()[0];G.set("inter",2);expect(H.inter).toBe(1)});it("should be able to modify the raw data object for the model if set to false",function(){B.setPreserveRawData(false);var H={inter:1};var G=B.readRecords([H]).getRecords()[0];G.set("inter",2);expect(H.inter).toBe(2)})});describe("extractors",function(){var G;beforeEach(function(){G=function(H){H=H||{};B=new Ext.data.reader.Json(Ext.applyIf({model:"spec.JsonReader"},H));B.buildExtractors(true)}});afterEach(function(){G=null});it("should run function extractors in the reader scope",function(){var H;G({successProperty:function(){H=this;return true}});B.getSuccess({success:true});expect(H).toBe(B)});describe("getTotal",function(){it("should default to total",function(){G();expect(B.getTotal({total:5})).toBe(5)});it("should have no getTotal method if the totalProperty isn't specified",function(){G({totalProperty:""});expect(B.getTotal).toBeUndefined()});it("should read the specified property name",function(){G({totalProperty:"foo"});expect(B.getTotal({foo:10})).toBe(10)});it("should accept a function configuration",function(){G({totalProperty:function(H){return H.big.chain.total}});expect(B.getTotal({big:{chain:{total:65}}})).toBe(65)});describe("JSON",function(){it("should read dot notation",function(){G({totalProperty:"big.chain.total"});expect(B.getTotal({big:{chain:{total:43}}})).toBe(43)});it("should read array notation for numeric values",function(){G({totalProperty:"values[0]"});expect(B.getTotal({values:[9]})).toBe(9)});it("should read array notation for property names",function(){G({totalProperty:'["foo-bar"]'});expect(B.getTotal({"foo-bar":16})).toBe(16)});it("should read array/dot notation",function(){G({totalProperty:"big[0].chain.total"});expect(B.getTotal({big:[{chain:{total:17}}]})).toBe(17)});it("should not read dot chains if simple accessors are used",function(){G({totalProperty:"some.big.chain",useSimpleAccessors:true});expect(B.getTotal({"some.big.chain":88})).toBe(88)})})});describe("success",function(){it("should default to success",function(){G();expect(B.getSuccess({success:true})).toBe(true)});it("should have no getSuccess method if the successProperty isn't specified",function(){G({successProperty:""});expect(B.getSuccess).toBeUndefined()});it("should read the specified property name",function(){G({successProperty:"foo"});expect(B.getSuccess({foo:false})).toBe(false)});it("should accept a function configuration",function(){G({successProperty:function(H){return H.big.chain.success}});expect(B.getSuccess({big:{chain:{success:true}}})).toBe(true)});describe("JSON",function(){it("should read dot notation",function(){G({successProperty:"big.chain.success"});expect(B.getSuccess({big:{chain:{success:true}}})).toBe(true)});it("should read array notation for numeric values",function(){G({successProperty:"values[0]"});expect(B.getSuccess({values:[false]})).toBe(false)});it("should read array notation for property names",function(){G({successProperty:'["foo-bar"]'});expect(B.getSuccess({"foo-bar":false})).toBe(false)});it("should read array/dot notation",function(){G({successProperty:"big[0].chain.success"});expect(B.getSuccess({big:[{chain:{success:true}}]})).toBe(true)});it("should not read dot chains if simple accessors are used",function(){G({successProperty:"some.big.chain",useSimpleAccessors:true});expect(B.getSuccess({"some.big.chain":true})).toBe(true)})})});describe("message",function(){it("should default to undefined",function(){G();expect(B.getMessage).toBeUndefined()});it("should have no getMessage method if the messageProperty isn't specified",function(){G({successProperty:""});expect(B.getSuccess).toBeUndefined()});it("should read the specified property name",function(){G({messageProperty:"foo"});expect(B.getMessage({foo:false})).toBe(false)});it("should accept a function configuration",function(){G({messageProperty:function(H){return H.big.chain.message}});expect(B.getMessage({big:{chain:{message:"msg"}}})).toBe("msg")});describe("JSON",function(){it("should read dot notation",function(){G({messageProperty:"big.chain.message"});expect(B.getMessage({big:{chain:{message:"some message"}}})).toBe("some message")});it("should read array notation for numeric values",function(){G({messageProperty:"values[0]"});expect(B.getMessage({values:["a message"]})).toBe("a message")});it("should read array notation for property names",function(){G({messageProperty:'["foo-bar"]'});expect(B.getMessage({"foo-bar":"new msg"})).toBe("new msg")});it("should read array/dot notation",function(){G({messageProperty:"big[0].chain.message"});expect(B.getMessage({big:[{chain:{message:"stuff"}}]})).toBe("stuff")});it("should not read dot chains if simple accessors are used",function(){G({messageProperty:"some.big.chain",useSimpleAccessors:true});expect(B.getMessage({"some.big.chain":"data"})).toBe("data")})})});describe("root",function(){it("should default to a function returning the main object",function(){var H=[];G();expect(B.getRoot(H)).toBe(H)});it("default to a function returning the main object root isn't specified",function(){var H=[];G({rootProperty:""});expect(B.getRoot(H)).toBe(H)});it("should read the specified property name",function(){var H=[];G({rootProperty:"foo"});expect(B.getRoot({foo:H})).toBe(H)});it("should accept a function configuration",function(){var H=[];G({rootProperty:function(I){return I.big.chain.root}});expect(B.getRoot({big:{chain:{root:H}}})).toBe(H)});describe("JSON",function(){it("should read dot notation",function(){var H=[];G({rootProperty:"big.chain.root"});expect(B.getRoot({big:{chain:{root:H}}})).toBe(H)});it("should read array notation for numeric values",function(){var H=[];G({rootProperty:"values[0]"});expect(B.getRoot({values:[H]})).toBe(H)});it("should read array notation for property names",function(){var H=[];G({rootProperty:'["foo-bar"]'});expect(B.getRoot({"foo-bar":H})).toBe(H)});it("should read array/dot notation",function(){var H=[];G({rootProperty:"big[0].chain.root"});expect(B.getRoot({big:[{chain:{root:H}}]})).toBe(H)});it("should not read dot chains if simple accessors are used",function(){var H=[];G({rootProperty:"some.big.chain",useSimpleAccessors:true});expect(B.getRoot({"some.big.chain":H})).toBe(H)})})});describe("fields",function(){var H={recordCreator:Ext.identityFn};beforeEach(function(){G=function(I,J){Ext.define("spec.JsonFieldTest",{extend:"Ext.data.Model",fields:I});B=new Ext.data.reader.Json({model:"spec.JsonFieldTest",fields:I,useSimpleAccessors:J||false})}});afterEach(function(){Ext.undefine("spec.JsonFieldTest")});it("should read the name if no mapping is specified",function(){G(["field"]);var I=B.readRecords([{field:"val"}],H).getRecords()[0];expect(I.field).toBe("val")});it("should give precedence to the mapping",function(){G([{name:"field",mapping:"somethingElse"}]);var I=B.readRecords([{somethingElse:"a value"}],H).getRecords()[0];expect(I.field).toEqual("a value")});it("should accept a function",function(){G([{name:"field",mapping:function(J){return J.complex.chain.value}}]);var I=B.readRecords([{complex:{chain:{value:2}}}],H).getRecords()[0];expect(I.field).toBe(2)});it("should ignore certain falsy mapping values",function(){G([{name:"field",mapping:undefined},{name:"field2",mapping:null},{name:"field3",mapping:""}]);var I=B.readRecords([{field:"val",field2:"val2",field3:"val3"}],H).getRecords()[0];expect(I.field).toBe("val");expect(I.field2).toBe("val2");expect(I.field3).toBe("val3")});it("should allow zero value for mapping",function(){G([{name:"field",mapping:0}]);var J=B.readRecords([{0:"woo"}],H).getRecords()[0];var I=B.readRecords([["T"]],H).getRecords()[0];expect(J.field).toBe("woo");expect(I.field).toBe("T")});it("should not include a mapping where the value doesn't exist",function(){G([{name:"field",mapping:"foo"}]);var I=B.readRecords([{notFoo:"x"}],H).getRecords()[0];expect(I).toEqual({notFoo:"x"});expect(I.hasOwnProperty("field")).toBe(false)});describe("JSON",function(){it("should read dot notation",function(){G([{name:"field",mapping:"some.value"}]);var I=B.readRecords([{some:{value:"mapped"}}],H).getRecords()[0];expect(I.field).toBe("mapped")});it("should handle dot notation with an undefined property",function(){G([{name:"field",mapping:"some.value"}]);var I=B.readRecords([{some:{}}],H).getRecords()[0];expect(I.field).toBeUndefined()});it("should handle dot notation with nested undefined properties",function(){G([{name:"field",mapping:"some.deep.nested.value"}]);var I=B.readRecords([{some:{}}],H).getRecords()[0];expect(I.field).toBeUndefined()});it("should read array notation for numeric values",function(){G([{name:"field",mapping:"values[0]"}]);var I=B.readRecords([{values:["a"]}],H).getRecords()[0];expect(I.field).toBe("a")});it("should read array notation for property names",function(){G([{name:"field",mapping:'["a-prop"]'}]);var I=B.readRecords([{"a-prop":"woo"}],H).getRecords()[0];expect(I.field).toBe("woo")});it("should read array/dot notation",function(){G([{name:"field",mapping:"big[0].chain.value"}]);var I=B.readRecords([{big:[{chain:{value:45}}]}],H).getRecords()[0];expect(I.field).toBe(45)});it("should handle array/dot notation with nested undefined properties",function(){G([{name:"field",mapping:"big[0].deep.chain.value"}]);var I=B.readRecords([{big:[{deep:{}}]}],H).getRecords()[0];expect(I.field).toBeUndefined()});it("should not read dot chains if simple accessors are used",function(){G([{name:"field",mapping:"a.long.name"}],true);var I=B.readRecords([{"a.long.name":"sixty"}],H).getRecords()[0];expect(I.field).toBe("sixty")});it("should handle dot chains with undefined values if simple accessors are used",function(){G([{name:"field",mapping:"a.long.name"}],true);var I=B.readRecords([{}],H).getRecords()[0];expect(I.field).toBeUndefined()});it("should read dotted properties inside a bracketed block",function(){G([{name:"field",mapping:'["foo.bar.baz"]'}]);var I=B.readRecords([{"foo.bar.baz":"x"}],H).getRecords()[0];expect(I.field).toBe("x")});it("should read [arrayIndex].property",function(){G([{name:"field",mapping:"[2].foo"}]);var I=B.readRecords([[1,2,{foo:"x"}]],H).getRecords()[0];expect(I.field).toBe("x")});it("should read [arrayIndex]['property']",function(){G([{name:"field",mapping:'[2]["complex-name"]'}]);var I=B.readRecords([[1,2,{"complex-name":"x"}]],H).getRecords()[0];expect(I.field).toBe("x")});it("should read [arrayIndex][arrayIndex]",function(){G([{name:"field",mapping:"[2][1]"}]);var I=B.readRecords([[1,2,[3,4,5,6]]],H).getRecords()[0];expect(I.field).toBe(4)});it("should read property.property",function(){G([{name:"field",mapping:"foo.bar"}]);var I=B.readRecords([{foo:{bar:"x"}}],H).getRecords()[0];expect(I.field).toBe("x")});it("should read property['property']",function(){G([{name:"field",mapping:'foo["complex-name"]'}]);var I=B.readRecords([{foo:{"complex-name":"x"}}],H).getRecords()[0];expect(I.field).toBe("x")});it("should read property[arrayIndex]",function(){G([{name:"field",mapping:"foo[2]"}]);var I=B.readRecords([{foo:[1,2,3,4]}],H).getRecords()[0];expect(I.field).toBe(3)});it("should read ['property'].property",function(){G([{name:"field",mapping:'["complex-name"].foo'}]);var I=B.readRecords([{"complex-name":{foo:"x"}}],H).getRecords()[0];expect(I.field).toBe("x")});it("should read ['property']['property']",function(){G([{name:"field",mapping:'["complex-name"]["other-prop"]'}]);var I=B.readRecords([{"complex-name":{"other-prop":"x"}}],H).getRecords()[0];expect(I.field).toBe("x")});it("should read ['property'][arrayIndex]",function(){G([{name:"field",mapping:'["complex-name"][1]'}]);var I=B.readRecords([{"complex-name":[1,2,3,4]}],H).getRecords()[0];expect(I.field).toBe(2)});it("should read property['property'][arrayIndex]",function(){G([{name:"field",mapping:'foo["complex-name"][2]'}]);var I=B.readRecords([{foo:{"complex-name":[1,2,3,4]}}],H).getRecords()[0];expect(I.field).toBe(3)});it("should handle property[arrayIndex]['property']",function(){G([{name:"field",mapping:'foo[1]["complex-name"]'}]);var I=B.readRecords([{foo:[1,{"complex-name":"x"}]}],H).getRecords()[0];expect(I.field).toBe("x")});it("should handle ['property'].property[arrayIndex]",function(){G([{name:"field",mapping:'["complex-name"].foo[1]'}]);var I=B.readRecords([{"complex-name":{foo:[1,2,3]}}],H).getRecords()[0];expect(I.field).toBe(2)});it("should handle ['property'][arrayIndex].property",function(){G([{name:"field",mapping:'["complex-name"][1].foo'}]);var I=B.readRecords([{"complex-name":[1,{foo:"x"}]}],H).getRecords()[0];expect(I.field).toBe("x")});it("should handle [arrayIndex].property['property']",function(){G([{name:"field",mapping:'[1].foo["complex-name"]'}]);var I=B.readRecords([[1,{foo:{"complex-name":"x"}}]],H).getRecords()[0];expect(I.field).toBe("x")});it("should handle [arrayIndex]['property'].property",function(){G([{name:"field",mapping:'[1]["complex-name"].foo'}]);var I=B.readRecords([[1,{"complex-name":{foo:"x"}}]],H).getRecords()[0];expect(I.field).toBe("x")})})})});describe("reading records",function(){beforeEach(function(){Ext.define("spec.JsonReaderTest",{extend:"Ext.data.Model",fields:[{name:"id"},{name:"floater",type:"float"},{name:"bool",type:"boolean"},{name:"inter",type:"integer"},{name:"class",type:"string"},{name:"string",type:"string",convert:function(G){return"modified/"+G}},{name:"withMap",mapping:"someMap"}]});B.destroy();B=new Ext.data.reader.Json({rootProperty:"data",idProperty:"id",successProperty:"successProp",totalProperty:"totalProp",messageProperty:"message",model:"spec.JsonReaderTest"});A={id:1,bool:true,inter:8675,floater:1.23,string:"Ed","class":"person"};F={id:2,bool:false,inter:309,floater:4.56,string:"Nick","class":"person"};E=B.readRecords({data:[A],successProp:true,totalProp:2});D=B.readRecords({data:[F],successProp:false,totalProp:6,message:"Failed"});C=B.readRecords({data:F,successProp:true,totalProp:6})});afterEach(function(){Ext.undefine("spec.JsonReaderTest")});it("should read the success property",function(){expect(E.getSuccess()).toBe(true);expect(D.getSuccess()).toBe(false)});it("should read the total record count",function(){expect(E.getTotal()).toBe(2);expect(D.getTotal()).toBe(6)});it("should read records correctly",function(){var G=E.getRecords()[0].getData();expect(G.id).toBe(A.id);expect(G.floater).toBe(A.floater);expect(G.bool).toBe(A.bool);expect(G.inter).toBe(A.inter)});it("should be able to have fields as reserved words",function(){var G=E.getRecords()[0].getData();expect(G["class"]).toBe("person")});it("should read records correctly if there was just a single object instead of an array of data",function(){var G=C.getRecords()[0].getData();expect(G.id).toBe(F.id);expect(G.floater).toBe(F.floater);expect(G.bool).toBe(F.bool);expect(G.inter).toBe(F.inter)});it("should still read on failure by default",function(){expect(D.getRecords()[0].getId()).toBe(2)});it("should ignore values records/total when success is false & readRecordsOnFailure is false",function(){B.setReadRecordsOnFailure(false);D=B.readRecords({data:[F],successProp:false,totalProp:6,message:"Failed"});expect(D.getRecords()).toEqual([]);expect(D.getTotal()).toBe(0);expect(D.getMessage()).toBe("Failed")});it("should respect the field's convert function",function(){var G=E.getRecords()[0].getData();expect(G.string).toBe("modified/Ed")});it("should be able to load a single record",function(){var G=B.readRecords({data:A}).getRecords()[0].getData();expect(G.id).toBe(A.id);expect(G.floater).toBe(A.floater);expect(G.bool).toBe(A.bool);expect(G.inter).toBe(A.inter)});it("should handle record instances being in the data",function(){var G=B.readRecords({data:[A,new spec.JsonReaderTest(F)],successProp:true}).getRecords()[1].getData();expect(G.id).toBe(F.id);expect(G.floater).toBe(F.floater);expect(G.bool).toBe(F.bool);expect(G.inter).toBe(F.inter)});describe("readOptions",function(){it("should return what we construct when we pass recordCreator",function(){var G=B.readRecords({data:[A,F]},{recordCreator:function(H){return H}}).getRecords();expect(G[0]).toEqual(A);expect(G[1]).toEqual(F)});it("should process mappings",function(){var G=B.readRecords({data:[{someMap:"foo"}]},{recordCreator:function(H){return H}}).getRecords();expect(G[0]).toEqual({withMap:"foo",someMap:"foo"})})})});describe("loading with a 'record' property",function(){var H,G;beforeEach(function(){Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name","email"]});B.destroy();B=new Ext.data.reader.Json({model:"spec.User",rootProperty:"users",record:"user"});H={users:[{user:{id:1,name:"Ed Spencer",email:"ed@sencha.com"}},{user:{id:2,name:"Abe Elias",email:"abe@sencha.com"}}]};G=B.readRecords(H)});afterEach(function(){Ext.undefine("spec.User")});it("should parse the correct number of results",function(){expect(G.getCount()).toEqual(2)});it("should parse each record correctly",function(){var K=G.getRecords(),J=K[0],I=K[1];expect(J.get("name")).toBe("Ed Spencer");expect(I.get("name")).toBe("Abe Elias")})});describe("calling model onLoad",function(){beforeEach(function(){Ext.define("spec.User",{extend:"Ext.data.Model",fields:["name"],onLoad:function(){}});B.destroy()});afterEach(function(){Ext.undefine("spec.User")});it("should call the template method for each record",function(){var G=spyOn(spec.User.prototype,"onLoad");B=new Ext.data.reader.Json({model:"spec.User"});B.read([{id:1},{id:2},{id:3},{id:4},{id:5},{id:6},{id:7}]);expect(G.callCount).toBe(7)});it("should call the template method after processing associations",function(){var G;spyOn(spec.User.prototype,"onLoad").andCallFake(function(){G=this.orders().getCount()});Ext.define("spec.Order",{extend:"Ext.data.Model",fields:[{name:"userId",reference:"User"}]});B=new Ext.data.reader.Json({model:"spec.User"});B.read([{id:1,orders:[{id:1}]}]);expect(G).toBe(1);Ext.undefine("spec.Order")})});describe("loading nested data",function(){var G={"users":[{"id":123,"name":"Ed","addresses":[{"line1":"525 University Avenue","line2":"Suite 23","town":"Palo Alto"}],"orders":[{"id":50,"total":100,"order_items":[{"id":20,"price":40,"quantity":2,"product":{"id":1000,"name":"MacBook Pro"}},{"id":21,"price":20,"quantity":1,"product":{"id":1001,"name":"iPhone"}}]},{"id":51,"total":10,"order_items":[{"id":22,"price":10,"quantity":1,"product":{"id":1002,"name":"iPad"}}]}]}]};beforeEach(function(){Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"],hasMany:[{model:"spec.Order",name:"orders"},{model:"spec.Address",name:"addresses"}],proxy:{type:"rest",reader:{type:"json",rootProperty:"users"}}});spyOn(Ext.log,"warn");Ext.define("spec.Address",{extend:"Ext.data.Model",fields:["id","line1","line2","town"],belongsTo:"spec.User"});Ext.define("spec.Order",{extend:"Ext.data.Model",fields:["id","total"],hasMany:{model:"spec.OrderItem",name:"orderItems",associationKey:"order_items"},belongsTo:"spec.User"});Ext.define("spec.OrderItem",{extend:"Ext.data.Model",fields:["id","price","quantity","order_id","product_id"],belongsTo:["spec.Order",{model:"spec.Product",getterName:"getProduct",associationKey:"product"}]});Ext.define("spec.Product",{extend:"Ext.data.Model",fields:["id","name"],hasMany:{model:"spec.OrderItem",name:"orderItems"}});B.destroy()});afterEach(function(){Ext.undefine("spec.User");Ext.undefine("spec.Address");Ext.undefine("spec.Order");Ext.undefine("spec.OrderItem");Ext.undefine("spec.Product")});function H(I){return new Ext.data.reader.Json(Ext.apply({},I,{model:"spec.User",rootProperty:"users"}))}it("should set implicitIncludes to true by default",function(){B=H();expect(B.getImplicitIncludes()).toBe(true)});it("should not parse includes if implicitIncludes is set to false",function(){B=H({implicitIncludes:false});var K=B.read(Ext.clone(G)),I=K.getRecords()[0],J=I.orders();expect(J.getCount()).toBe(0)});describe("when reading nested data",function(){var L,I,K,J,M,N;beforeEach(function(){B=H();L=B.read(Ext.clone(G));I=L.getRecords()[0];N=I.addresses();K=I.orders();J=K.first().orderItems();M=J.first().getProduct()});it("should populate first-order associations",function(){expect(K.getCount()).toBe(2);expect(N.getCount()).toBe(1)});it("should populate second-order associations",function(){expect(J.getCount()).toBe(2)});it("should populate belongsTo associations",function(){expect(M.get("name")).toBe("MacBook Pro")});it("should ignore associations where the model isn't yet loaded",function(){Ext.define("spec.Employee",{extend:"Ext.data.Model",fields:["id","name",{name:"projectId",reference:"Project"}]});B=new Ext.data.reader.Json({model:"spec.Employee"});expect(function(){B.read({id:1,name:"Foo"})}).not.toThrow()})})});describe("reconfiguring via metadata",function(){it("should call onMetaChange",function(){var G={some:"meta data"};spyOn(B,"onMetaChange").andReturn();spyOn(B,"getRoot").andReturn([]);B.readRecords({metaData:G});expect(B.onMetaChange).toHaveBeenCalledWith(G)});it("should accept a custom meta property",function(){B.setMetaProperty("foo.bar.baz");B.buildExtractors(true);spyOn(B,"onMetaChange").andReturn();spyOn(B,"getRoot").andReturn([]);var H={};var G={foo:{bar:{baz:H}}};B.readRecords(G);expect(B.onMetaChange).toHaveBeenCalledWith(H)})});describe("reading xhr",function(){var H={responseText:'{ "success": true, "users": [{"name": "Ben", "location": "Boston"}, {"name": "Mike", "location": "Redwood City"}, {"name": "Nick", "location": "Kansas City"}] }'},I={responseText:"this is not JSON"};beforeEach(function(){Ext.define("spec.User",{extend:"Ext.data.Model",fields:["name","location"]});B.destroy();B=new Ext.data.reader.Json({rootProperty:"users",model:"spec.User",listeners:{exception:function(J,K,M,L){}}})});afterEach(function(){Ext.undefine("spec.User")});function G(J){return B.read(J)}describe("if there is a responseText property",function(){describe("if there is valid JSON",function(){it("should be successful",function(){expect(G(H).getSuccess()).toBe(true)});it("should return the expected number of records",function(){expect(G(H).getCount()).toBe(3)});it("should not return a non-empty dataset",function(){expect(G(H).getRecords().length).toBe(3)})});describe("if there is invalid JSON",function(){beforeEach(function(){spyOn(Ext,"log");spyOn(Ext.Logger,"warn")});it("should not be successful",function(){expect(G(I).getSuccess()).toBe(false)});it("should not return any records",function(){expect(G(I).getTotal()).toBe(0)});it("should return any empty dataset",function(){expect(G(I).getRecords().length).toBe(0)});it("should fire the exception event",function(){var J=jasmine.createSpy();B.on("exception",J);G(I);expect(J.callCount).toBe(1)})})});describe("if there is no responseText property",function(){it("should return an empty dataset",function(){expect(G("something").getCount()).toBe(0)})})})})