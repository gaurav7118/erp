describe("Ext.data.reader.Reader",function(){var A,C;afterEach(function(){Ext.data.Model.schema.clear();Ext.undefine("spec.User")});function B(D){Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id"]});C={setModel:Ext.emptyFn};D=Ext.apply({rootProperty:null,totalProperty:null,messageProperty:null,successProperty:null,proxy:C},D);A=new Ext.data.reader.Reader(D);A.buildExtractors=Ext.emptyFn;A.setModel(spec.User);return A}it("should have the nullResultSet defined on the prototype",function(){expect(Ext.data.reader.Reader.prototype.nullResultSet).toBeDefined()});describe("reading",function(){var E,F;beforeEach(function(){B()});function D(){return A.read(E)}describe("if there is a responseText property",function(){beforeEach(function(){E={responseText:"something"};F={something:"else"};spyOn(A,"readRecords").andReturn({});spyOn(A,"getResponseData").andCallFake(function(){return F});D()});it("should first call getResponseData with the response object",function(){expect(A.getResponseData).toHaveBeenCalledWith(E)})});describe("if there is no responseText property",function(){beforeEach(function(){spyOn(A,"readRecords").andReturn({});spyOn(A,"getResponseData").andCallFake(function(){return F});E="something";D()});it("should not call getResponseData",function(){expect(A.getResponseData).not.toHaveBeenCalled()});it("should call readRecords with the response",function(){expect(A.readRecords.mostRecentCall.args[0]).toBe(E)})});describe("if the response was falsy",function(){var G=Ext.data.reader.Reader.prototype.nullResultSet;it("should return the nullResultSet if the response is undefined",function(){E=undefined;expect(D()).toBe(G)});it("should return the nullResultSet if the response is null",function(){E=null;expect(D()).toBe(G)});it("should return the nullResultSet if the response is false",function(){E=false;expect(D()).toBe(G)})})});describe("transform",function(){it("should invoke the transform function",function(){var F={id:1};var D=function(G){G[0]={id:2};return G};B({transform:D});A.extractData=function(G,H){return G};var E=A.readRecords([F]).getRecords()[0];expect(E.id).not.toEqual(F.id);expect(E.id).toEqual(2)});it("should invoke the transform function with the specified scope",function(){var G={id:1};var D={};var E=function(H){expect(this).toEqual(D);H[0]={id:2};return H};B({transform:{fn:E,scope:D}});A.extractData=function(H,I){return H};var F=A.readRecords([G]).getRecords()[0];expect(F.id).not.toEqual(G.id);expect(F.id).toEqual(2)});it("should accept method name instead of function",function(){var F={id:1};var D=function(G){G[0]={id:2};return G};B({fooFn:D,transform:"fooFn"});A.extractData=function(G,H){return G};var E=A.readRecords([F]).getRecords()[0];expect(E.id).not.toEqual(F.id);expect(E.id).toEqual(2)})});describe("raw data",function(){beforeEach(function(){B()});it("should NOT keep rawData by default",function(){A.readRecords([{foo:"bar"}]);expect(A.rawData).not.toBeDefined()});it("should keep rawData when told to",function(){A.setKeepRawData(true);A.readRecords([{foo:"bar"}]);expect(A.rawData).toEqual([{foo:"bar"}])})});describe("onMetaChange",function(){var D;beforeEach(function(){B();D={root:"someRootProperty",totalProperty:"someTotalProperty",successProperty:"someSuccessProperty"};spyOn(A,"buildExtractors").andCallThrough()});afterEach(function(){Ext.data.Model.schema.clear();Ext.undefine("spec.User")});it("should set the root property",function(){A.onMetaChange(D);expect(A.getRootProperty()).toBe("someRootProperty")});it("should set the totalProperty",function(){A.onMetaChange(D);expect(A.getTotalProperty()).toBe("someTotalProperty")});it("should set the successProperty",function(){A.onMetaChange(D);expect(A.getSuccessProperty()).toBe("someSuccessProperty")});it("should rebuild the extractor functions",function(){A.onMetaChange(D);expect(A.buildExtractors).toHaveBeenCalled()});describe("if fields are present in the meta data",function(){beforeEach(function(){Ext.apply(D,{fields:[{name:"uniqueId",type:"int"},{name:"name",type:"string"}]});spyOn(C,"setModel").andReturn()});it("should create a new model with fields",function(){var E=A.getModel().getFields();expect(E.length).toBe(1);expect(E.items[0].getName()).toBe("id");A.onMetaChange(D);E=A.getModel().getFields();expect(E.length).toBe(3);expect(E.items[0].getName()).toBe("uniqueId");expect(E.items[1].getName()).toBe("name")})});describe("if fields are not present in the meta data",function(){it("should leave the existing model in place",function(){var E=A.getModel();A.onMetaChange(D);expect(A.getModel()).toBe(E)})})})})