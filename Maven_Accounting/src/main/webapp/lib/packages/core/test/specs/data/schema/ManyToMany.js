describe("Ext.data.schema.ManyToMany",function(){describe("configuring",function(){var J,H,I,F,G,A,E,M,D,L,C,K,B;beforeEach(function(){var N=Ext.define("spec.many2many.Base",{extend:"Ext.data.Model",schema:{namespace:"spec.many2many"}});B=N.schema;B.clear();J=Ext.define("spec.many2many.User",{extend:"spec.many2many.Base",manyToMany:"Group"});H=Ext.define("spec.many2many.Group",{extend:"spec.many2many.Base"});G=Ext.define("spec.many2many.User2",{extend:"spec.many2many.Base",manyToMany:"#Group2"});A=Ext.define("spec.many2many.Group2",{extend:"spec.many2many.Base",manyToMany:"User2#"});E=Ext.define("spec.many2many.User3",{extend:"spec.many2many.Base",manyToMany:[{type:"Group3",left:true}]});M=Ext.define("spec.many2many.Group3",{extend:"spec.many2many.Base",manyToMany:[{type:"User3",right:true}]});D=Ext.define("spec.many2many.User4",{extend:"spec.many2many.Base",manyToMany:[{type:"Group4",role:"groups",field:"groupId",left:{role:"users",field:"userId"}}]});L=Ext.define("spec.many2many.Group4",{extend:"spec.many2many.Base",manyToMany:[{type:"User4",role:"users",field:"userId",right:{role:"groups",field:"groupId"}}]});C=Ext.define("spec.many2many.User5",{extend:"spec.many2many.Base",manyToMany:{foo:{type:"Group5",role:"theGroups",field:"theGroup_id",left:{role:"theUsers",field:"theUser_id"}}}});K=Ext.define("spec.many2many.Group5",{extend:"spec.many2many.Base",manyToMany:{foo:{type:"User5",role:"theUsers",field:"theUser_id",right:{role:"theGroups",field:"theGroup_id"}}}});N=Ext.define("spec.many2many.FooBase",{extend:"Ext.data.Model",schema:{namespace:"spec.many2many"}});I=Ext.define("spec.many2many.foo.bar.Thing",{extend:"spec.many2many.FooBase",manyToMany:"foo.Goo"});F=Ext.define("spec.many2many.foo.Goo",{extend:"spec.many2many.FooBase",manyToMany:"foo.bar.Thing"});Ext.data.Model.schema.setNamespace("spec.many2many")});afterEach(function(){Ext.data.Model.schema.clear(true);Ext.undefine("spec.many2many.Base");Ext.undefine("spec.many2many.User");Ext.undefine("spec.many2many.Group");Ext.undefine("spec.many2many.User2");Ext.undefine("spec.many2many.Group2");Ext.undefine("spec.many2many.User3");Ext.undefine("spec.many2many.Group3");Ext.undefine("spec.many2many.User4");Ext.undefine("spec.many2many.Group4");Ext.undefine("spec.many2many.User5");Ext.undefine("spec.many2many.Group5");Ext.undefine("spec.many2many.FooBase");Ext.undefine("spec.many2many.foo.bar.Thing");Ext.undefine("spec.many2many.foo.Goo")});describe("Simple Association",function(){var R,P,O,Q,N;beforeEach(function(){R=J;P=H;N=R.associations.groups;Q=P.associations.users;O=N.association});describe("users role",function(){it("should have a role name",function(){expect(Q.role).toBe("users")});it("should have an id field",function(){expect(Q.field).toBe("userId")});it("should have the proper inverse role",function(){expect(Q.inverse).toBe(N)});it("should have the proper class",function(){expect(Q.cls).toBe(R)});it("should have a reference back to the association",function(){expect(Q.association.isManyToMany).toBe(true);expect(N.association).toBe(Q.association)})});describe("groups role",function(){it("should have a role name",function(){expect(N.role).toBe("groups")});it("should have an id field",function(){expect(N.field).toBe("groupId")});it("should have the proper inverse role",function(){expect(N.inverse).toBe(Q)});it("should have the proper class",function(){expect(N.cls).toBe(P)})});describe("Common properties",function(){it("should set the assoc name",function(){expect(O.name).toBe("GroupUsers")});it("should have a schema set",function(){expect(O.schema).toBe(B)});it("should have no reference field set",function(){expect(O.field).toBeNull()});it("should set definedBy to the key holder",function(){expect(O.definedBy).toBe(R)});it("should have the owner as null",function(){expect(O.owner).toBeNull()})});describe("Getter/setter methods",function(){it("should generate getGroups",function(){expect(typeof R.prototype.groups).toBe("function")});it("should generate getUsers",function(){expect(typeof P.prototype.users).toBe("function")})})});describe("Side-specified Association",function(){var R,P,O,Q,N;beforeEach(function(){R=G;P=A;N=R.associations.group2s;Q=P.associations.user2s;O=N.association});describe("users role",function(){it("should have a role name",function(){expect(Q.role).toBe("user2s")});it("should have an id field",function(){expect(Q.field).toBe("user2Id")});it("should have the proper inverse role",function(){expect(Q.inverse).toBe(N)});it("should have the proper class",function(){expect(Q.cls).toBe(R)});it("should have a reference back to the association",function(){expect(Q.association.isManyToMany).toBe(true);expect(N.association).toBe(Q.association)})});describe("groups role",function(){it("should have a role name",function(){expect(N.role).toBe("group2s")});it("should have an id field",function(){expect(N.field).toBe("group2Id")});it("should have the proper inverse role",function(){expect(N.inverse).toBe(Q)});it("should have the proper class",function(){expect(N.cls).toBe(P)})});describe("Common properties",function(){it("should set the assoc name",function(){expect(O.name).toBe("User2Group2s")});it("should have a schema set",function(){expect(O.schema).toBe(B)});it("should have no reference field set",function(){expect(O.field).toBeNull()});it("should set definedBy to the key holder",function(){expect(O.definedBy).toBe(R)});it("should have the owner as null",function(){expect(O.owner).toBeNull()})})});describe("Simple Object-Form Association",function(){var R,P,O,Q,N;beforeEach(function(){R=E;P=M;N=R.associations.group3s;Q=P.associations.user3s;O=N.association});describe("users role",function(){it("should have a role name",function(){expect(Q.role).toBe("user3s")});it("should have an id field",function(){expect(Q.field).toBe("user3Id")});it("should have the proper inverse role",function(){expect(Q.inverse).toBe(N)});it("should have the proper class",function(){expect(Q.cls).toBe(R)});it("should have a reference back to the association",function(){expect(Q.association.isManyToMany).toBe(true);expect(N.association).toBe(Q.association)})});describe("groups role",function(){it("should have a role name",function(){expect(N.role).toBe("group3s")});it("should have an id field",function(){expect(N.field).toBe("group3Id")});it("should have the proper inverse role",function(){expect(N.inverse).toBe(Q)});it("should have the proper class",function(){expect(N.cls).toBe(P)})});describe("Common properties",function(){it("should set the assoc name",function(){expect(O.name).toBe("User3Group3s")});it("should have a schema set",function(){expect(O.schema).toBe(B)});it("should have no reference field set",function(){expect(O.field).toBeNull()});it("should set definedBy to the key holder",function(){expect(O.definedBy).toBe(R)});it("should have the owner as null",function(){expect(O.owner).toBeNull()})})});describe("Full Object-Form Association",function(){var R,P,O,Q,N;beforeEach(function(){R=D;P=L;N=R.associations.groups;Q=P.associations.users;O=N.association});describe("users role",function(){it("should have a role name",function(){expect(Q.role).toBe("users")});it("should have an id field",function(){expect(Q.field).toBe("userId")});it("should have the proper inverse role",function(){expect(Q.inverse).toBe(N)});it("should have the proper class",function(){expect(Q.cls).toBe(R)});it("should have a reference back to the association",function(){expect(Q.association.isManyToMany).toBe(true);expect(N.association).toBe(Q.association)})});describe("groups role",function(){it("should have a role name",function(){expect(N.role).toBe("groups")});it("should have an id field",function(){expect(N.field).toBe("groupId")});it("should have the proper inverse role",function(){expect(N.inverse).toBe(Q)});it("should have the proper class",function(){expect(N.cls).toBe(P)})});describe("Common properties",function(){it("should set the assoc name",function(){expect(O.name).toBe("User4Group4s")});it("should have a schema set",function(){expect(O.schema).toBe(B)});it("should have no reference field set",function(){expect(O.field).toBeNull()});it("should set definedBy to the key holder",function(){expect(O.definedBy).toBe(R)});it("should have the owner as null",function(){expect(O.owner).toBeNull()})})});describe("Named Full Object-Form Association",function(){var R,P,O,Q,N;beforeEach(function(){R=C;P=K;N=R.associations.theGroups;Q=P.associations.theUsers;O=N.association});describe("users role",function(){it("should have a role name",function(){expect(Q.role).toBe("theUsers")});it("should have an id field",function(){expect(Q.field).toBe("theUser_id")});it("should have the proper inverse role",function(){expect(Q.inverse).toBe(N)});it("should have the proper class",function(){expect(Q.cls).toBe(R)});it("should have a reference back to the association",function(){expect(Q.association.isManyToMany).toBe(true);expect(N.association).toBe(Q.association)})});describe("groups role",function(){it("should have a role name",function(){expect(N.role).toBe("theGroups")});it("should have an id field",function(){expect(N.field).toBe("theGroup_id")});it("should have the proper inverse role",function(){expect(N.inverse).toBe(Q)});it("should have the proper class",function(){expect(N.cls).toBe(P)})});describe("Common properties",function(){it("should set the assoc name",function(){expect(O.name).toBe("foo")});it("should have a schema set",function(){expect(O.schema).toBe(B)});it("should have no reference field set",function(){expect(O.field).toBeNull()});it("should set definedBy to the key holder",function(){expect(O.definedBy).toBe(R)});it("should have the owner as null",function(){expect(O.owner).toBeNull()})})});describe("Nested Namespace Association",function(){var P,N,O;beforeEach(function(){O=I.associations.fooGoos;N=F.associations.fooBarThings;P=O.association});it("should have proper left name",function(){expect(N.association.left.role).toBe("fooBarThings")});it("should have proper right name",function(){expect(N.association.right.role).toBe("fooGoos")});it("should have proper left getter",function(){expect(typeof I.prototype.fooGoos).toBe("function")});it("should have proper right getter",function(){expect(typeof F.prototype.fooBarThings).toBe("function")})})});describe("nested loading",function(){var D,B;function C(E){B=Ext.define("spec.Group",{extend:"Ext.data.Model",fields:["id","name"],manyToMany:E||"User"});D=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"]})}beforeEach(function(){Ext.data.Model.schema.setNamespace("spec");MockAjaxManager.addMethods()});afterEach(function(){MockAjaxManager.removeMethods();Ext.undefine("spec.Group");Ext.undefine("spec.User");Ext.data.Model.schema.clear(true);D=B=null});function A(E){Ext.Ajax.mockComplete({status:200,responseText:Ext.JSON.encode(E)})}describe("associationKey",function(){beforeEach(function(){C({GroupUsers:{type:"Group",role:"groups",associationKey:"groups.data",right:{type:"User",role:"users",associationKey:"users.data"}}})});it("should use the associatioKey when loading the left",function(){var E=B.load(1);A({id:1,users:{data:[{id:101},{id:102}]}});var F=E.users();expect(F.getCount()).toBe(2);expect(F.getAt(0).getId()).toBe(101);expect(F.getAt(1).getId()).toBe(102)});it("should use the associatioKey when loading the right",function(){var F=D.load(1);A({id:1,groups:{data:[{id:101},{id:102}]}});var E=F.groups();expect(E.getCount()).toBe(2);expect(E.getAt(0).getId()).toBe(101);expect(E.getAt(1).getId()).toBe(102)})});describe("without session",function(){beforeEach(function(){C()});it("should load child records of the left",function(){var E=B.load(1);A({id:1,users:[{id:101,name:"User1"},{id:102,name:"User2"},{id:103,name:"User3"}]});var F=E.users();expect(F.getCount()).toBe(3);expect(F.getAt(0).getId()).toBe(101);expect(F.getAt(1).getId()).toBe(102);expect(F.getAt(2).getId()).toBe(103)});it("should load child records of the right",function(){var F=D.load(1);A({id:1,groups:[{id:101,name:"Group1"},{id:102,name:"Group2"},{id:103,name:"Group3"}]});var E=F.groups();expect(E.getCount()).toBe(3);expect(E.getAt(0).getId()).toBe(101);expect(E.getAt(1).getId()).toBe(102);expect(E.getAt(2).getId()).toBe(103)})});describe("with session",function(){var E;beforeEach(function(){C();E=new Ext.data.Session()});afterEach(function(){E.destroy();E=null});it("should load child records of the left",function(){var F=B.load(1,{},E);A({id:1,users:[{id:101,name:"User1"},{id:102,name:"User2"},{id:103,name:"User3"}]});var G=F.users();expect(G.getCount()).toBe(3);expect(G.getAt(0).getId()).toBe(101);expect(G.getAt(1).getId()).toBe(102);expect(G.getAt(2).getId()).toBe(103)});it("should set up reflexive relationships for right records",function(){var G=B.load(1,{},E);A({id:1,users:[{id:101,name:"User1"},{id:102,name:"User2"},{id:103,name:"User3"}]});var H=G.users(),F=H.getAt(0).groups();expect(F.getCount()).toBe(1);expect(F.getAt(0)).toBe(G);F=H.getAt(1).groups();expect(F.getCount()).toBe(1);expect(F.getAt(0)).toBe(G);F=H.getAt(2).groups();expect(F.getCount()).toBe(1);expect(F.getAt(0)).toBe(G)});it("should load child records of the right",function(){var G=D.load(1,{},E);A({id:1,groups:[{id:101,name:"Group1"},{id:102,name:"Group2"},{id:103,name:"Group3"}]});var F=G.groups();expect(F.getCount()).toBe(3);expect(F.getAt(0).getId()).toBe(101);expect(F.getAt(1).getId()).toBe(102);expect(F.getAt(2).getId()).toBe(103)});it("should set up reflexive relationships for left records",function(){var G=D.load(1,{},E);A({id:1,groups:[{id:101,name:"Group1"},{id:102,name:"Group2"},{id:103,name:"Group3"}]});var F=G.groups(),H=F.getAt(0).users();expect(H.getCount()).toBe(1);expect(H.getAt(0)).toBe(G);H=F.getAt(1).users();expect(H.getCount()).toBe(1);expect(H.getAt(0)).toBe(G);H=F.getAt(2).users();expect(H.getCount()).toBe(1);expect(H.getAt(0)).toBe(G)})})});describe("store membership",function(){var C,A,B;beforeEach(function(){Ext.data.Model.schema.setNamespace("spec");A=Ext.define("spec.Group",{extend:"Ext.data.Model",fields:["id","name"],manyToMany:"User"});C=Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"]});B=new Ext.data.Session()});afterEach(function(){Ext.undefine("spec.Group");Ext.undefine("spec.User");Ext.data.Model.schema.clear(true);B.destroy();B=C=A=null});describe("adding",function(){describe("with the inverse store not created",function(){it("should exist in the inverse store",function(){var D=B.createRecord("User",1),E=B.createRecord("Group",1),F;D.groups().add(E);F=E.users();expect(F.getCount()).toBe(1);expect(F.getAt(0)).toBe(D)})});describe("with the inverse store created",function(){it("should exist in the inverse store",function(){var D=B.createRecord("User",1),E=B.createRecord("Group",1),F=E.users();D.groups().add(E);expect(F.getCount()).toBe(1);expect(F.getAt(0)).toBe(D)})})});describe("removing",function(){describe("with the inverse store not created",function(){it("should not exist in the inverse store",function(){var E=B.createRecord("User",1),F=B.createRecord("Group",1),D=E.groups(),G;D.add(F);D.remove(F);G=F.users();expect(G.getCount()).toBe(0)})});describe("with the inverse store created",function(){it("should not exist in the inverse store",function(){var E=B.createRecord("User",1),F=B.createRecord("Group",1),D=E.groups(),G=F.users();D.add(F);D.remove(F);expect(G.getCount()).toBe(0)})})})})})