describe("Ext.data.association.BelongsTo_legacy",function(){var D;function E(F){Ext.define("spec.Job",{extend:"Ext.data.Model",fields:["id","user_id","aField"],belongsTo:Ext.apply({model:"spec.User"},F)})}function C(F,G,H){return D.setUser(F,G,H)}function B(F,G){return D.getUser(F,G)}function A(G,F){Ext.Ajax.mockComplete({status:F||200,responseText:Ext.JSON.encode(G)})}beforeEach(function(){MockAjaxManager.addMethods();Ext.data.Model.schema.setNamespace("spec");Ext.define("spec.User",{extend:"Ext.data.Model",fields:["id","name"]});spyOn(Ext.log,"warn");Ext.define("spec.Post",{extend:"Ext.data.Model",fields:["id","title","content","user_id"],belongsTo:"spec.User"})});afterEach(function(){MockAjaxManager.removeMethods();Ext.undefine("spec.User");Ext.undefine("spec.Post");Ext.undefine("spec.Job");Ext.data.Model.schema.clear(true);D=null});describe("declarations",function(){afterEach(function(){Ext.undefine("spec.Foo")});var F=function(H,G){var I=spec.Foo.prototype;expect(Ext.isFunction(I[H])).toBe(true);expect(Ext.isFunction(I[G])).toBe(true)};it("should read a single string",function(){Ext.define("spec.Foo",{extend:"Ext.data.Model",belongsTo:"spec.User"});F("getUser","setUser")});it("should read an array of strings",function(){Ext.define("spec.Bar",{extend:"Ext.data.Model"});Ext.define("spec.Foo",{extend:"Ext.data.Model",belongsTo:["spec.User","spec.Bar"]});F("getUser","setUser");F("getBar","setBar");Ext.undefine("spec.Bar")});it("should read a single object",function(){Ext.define("spec.Foo",{extend:"Ext.data.Model",belongsTo:{model:"spec.User"}});F("getUser","setUser")});it("should read an array of objects",function(){Ext.define("spec.Bar",{extend:"Ext.data.Model"});Ext.define("spec.Foo",{extend:"Ext.data.Model",belongsTo:[{model:"spec.User"},{model:"spec.Bar"}]});F("getUser","setUser");F("getBar","setBar");Ext.undefine("spec.Bar")});it("should read an associations array",function(){Ext.define("spec.Bar",{extend:"Ext.data.Model"});Ext.define("spec.Foo",{extend:"Ext.data.Model",associations:[{type:"belongsTo",model:"spec.User"},{type:"belongsTo",model:"spec.Bar"}]});F("getUser","setUser");F("getBar","setBar");Ext.undefine("spec.Bar")});it("should use the name parameter as the role",function(){Ext.define("spec.Foo",{extend:"Ext.data.Model",belongsTo:{model:"spec.User",name:"snoozer"}});F("getSnoozer","setSnoozer")})});describe("getter",function(){var F,G;beforeEach(function(){G=jasmine.createSpy()});afterEach(function(){G=null});describe("instance already set",function(){beforeEach(function(){D=new spec.Post({id:2});F=new spec.User({id:4});C(F)});afterEach(function(){F=null});it("should return the same instance",function(){expect(B()).toBe(F)});it("should not attempt to load",function(){G=spyOn(spec.User.getProxy(),"read");B();expect(G).not.toHaveBeenCalled()});it("should attempt to reload if called with options.reload",function(){G=spyOn(spec.User.getProxy(),"read").andReturn();B({reload:true});expect(G).toHaveBeenCalled()});describe("callbacks",function(){it("should accept a function and default the scope to the model",function(){var I,J;B(G);var H=G.mostRecentCall;expect(H.args[0]).toBe(F);expect(H.object).toBe(D)});it("should accept a function with a scope",function(){var H={};B(G,H);expect(G.mostRecentCall.object).toBe(H)});it("should accept an options object and call success",function(){B({success:G});var H=G.mostRecentCall;expect(H.args[0]).toBe(F);expect(H.object).toBe(D)});it("should accept an options object and call callback",function(){B({callback:G});var H=G.mostRecentCall;expect(H.args[0]).toBe(F);expect(H.object).toBe(D)})})});describe("instance not set",function(){describe("keys",function(){it("should default the primaryKey to 'id' and set it on the model",function(){D=new spec.Post({"user_id":10});F=B();expect(F.get("id")).toBe(10)});it("should use a custom foreign key",function(){E({foreignKey:"aField"});D=new spec.Job({"aField":12});F=B();expect(F.get("id")).toBe(12)})});describe("callbacks",function(){it("should accept a function and the scope should default to the model",function(){D=new spec.Post({"user_id":3});F=B(G);A({});var H=G.mostRecentCall;expect(H.args[0]).toBe(F);expect(H.object).toBe(D)});it("should accept a function and a scope",function(){D=new spec.Post({"user_id":3});var I={},H;F=B(G,I);A({});H=G.mostRecentCall;expect(H.args[0]).toBe(F);expect(H.object).toBe(I)});it("should pass the options to the operation",function(){D=new spec.Post({"user_id":3});G=spyOn(spec.User.getProxy(),"read");B({params:{someKey:1}});expect(G.mostRecentCall.args[0].getParams()).toEqual({someKey:1})})});it("should return null if the foreignKey value is empty",function(){D=new spec.Post();expect(B()).toBeNull()})})});describe("setter",function(){var F;beforeEach(function(){F=jasmine.createSpy();D=new spec.Post({id:7})});afterEach(function(){F=null});describe("instance",function(){it("should have the same record reference",function(){var G=new spec.User({id:3});C(G);expect(B()).toBe(G)});it("should set the underlying key value",function(){var G=new spec.User({id:3});C(G);expect(D.get("user_id")).toBe(3)})});describe("value",function(){it("should set the underlying key",function(){C(16);expect(D.get("user_id")).toBe(16)});it("should keep the same reference if setting the value with a matching id",function(){var G=new spec.User({id:3});C(G);C(3);expect(B()).toBe(G)});it("should clear the reference if a model is already set and a new id is passed",function(){var G=new spec.User({id:3});C(G);C(13);F=spyOn(spec.User.getProxy(),"read");B();expect(F.mostRecentCall.args[0].getId()).toBe(13)});it("should set a custom foreignKey",function(){E({foreignKey:"aField"});D=new spec.Job({id:1});C(13);expect(D.get("aField")).toBe(13)})});describe("callbacks",function(){it("should accept a function as the second arg, scope should default to the model",function(){C(16,F);A({});var G=F.mostRecentCall;expect(G.args[0]).toBe(D);expect(G.object).toBe(D)});it("should accept a function with a scope",function(){var G={};C(16,F,G);A({});expect(F.mostRecentCall.object).toBe(G)});describe("options object",function(){var I,G,H;beforeEach(function(){I=jasmine.createSpy();G=jasmine.createSpy();H=jasmine.createSpy()});afterEach(function(){I=G=H=null});describe("on success",function(){it("should call success/callback and scope should default to the model",function(){C(16,{success:I,callback:H,failure:G});A({});expect(G).not.toHaveBeenCalled();expect(I).toHaveBeenCalled();expect(H).toHaveBeenCalled();expect(I.mostRecentCall.object).toBe(D);expect(H.mostRecentCall.object).toBe(D)});it("should use a passed scope",function(){var J={};C(16,{scope:J,success:I,callback:H});A({});expect(I.mostRecentCall.object).toBe(J);expect(H.mostRecentCall.object).toBe(J)})});describe("on failure",function(){it("should call failure/callback and scope should default to the model",function(){C(16,{success:I,callback:H,failure:G});A(null,500);expect(I).not.toHaveBeenCalled();expect(G).toHaveBeenCalled();expect(H).toHaveBeenCalled();expect(G.mostRecentCall.object).toBe(D);expect(H.mostRecentCall.object).toBe(D)});it("should use a passed scope",function(){var J={};C(16,{scope:J,failure:G,callback:H});A(null,500);expect(G.mostRecentCall.object).toBe(J);expect(H.mostRecentCall.object).toBe(J)})})})})});describe("reading nested with assocationKey",function(){it("should default the key to the association name",function(){var F=new Ext.data.reader.Json({model:spec.Post});D=F.read([{id:1,"user":{id:3}}]).getRecords()[0];expect(B().getId()).toBe(3)});it("should read a complex association",function(){E({associationKey:"nested.another[1].two"});var F=new Ext.data.reader.Json({model:spec.Job});D=F.read([{id:1,nested:{another:[{},{two:{id:65}}]}}]).getRecords()[0];expect(B().getId()).toBe(65)})})})