describe("Ext.data.validator.Inclusion",function(){var A;function B(D,C){A=new Ext.data.validator.Inclusion({list:C});return A.validate(D)}afterEach(function(){A=null});it("should throw an error when configured without a list",function(){expect(function(){A=new Ext.data.validator.Exclusion()}).toThrow()});describe("invalid values",function(){it("should not validate if the value is not in the list",function(){expect(B(5,[1,2,3,4])).toBe(A.getMessage())});it("should use strict type checking",function(){expect(B("3",[1,2,3,4])).toBe(A.getMessage())})});describe("valid values",function(){it("should validate if the value is in the list",function(){expect(B(3,[1,2,3,4])).toBe(true)})});describe("messages",function(){it("should accept a custom message",function(){A=new Ext.data.validator.Inclusion({message:"Foo",list:[]});expect(A.validate(undefined)).toBe("Foo")})});describe("runtime changes",function(){it("should be able to have a new list applied",function(){A=new Ext.data.validator.Inclusion({list:[1,2,3]});expect(A.validate(5)).toBe(A.getMessage());A.setList([3,4,5]);expect(A.validate(5)).toBe(true)})})})