describe("Ext.data.validator.Presence",function(){var A;function B(D,C){A=new Ext.data.validator.Presence(C);return A.validate(D)}afterEach(function(){A=null});describe("invalid values",function(){it("should not validate if the value is undefined",function(){expect(B(undefined)).toBe(A.getMessage())});it("should not validate if the value is null",function(){expect(B(null)).toBe(A.getMessage())});describe("with allowEmpty: false",function(){it("should not validate if passed an empty string",function(){expect(B("")).toBe(A.getMessage())})})});describe("valid values",function(){describe("with allowEmpty: true",function(){it("should validate if passed an empty string",function(){expect(B("",{allowEmpty:true})).toBe(true)})});it("should validate if passed false",function(){expect(B(false)).toBe(true)});it("should validate if passed 0",function(){expect(B(0)).toBe(true)});it("should validate a string",function(){expect(B("foo")).toBe(true)});it("should validate a number",function(){expect(B(100)).toBe(true)});it("should validate an array",function(){expect(B([])).toBe(true)});it("should validate an object",function(){expect(B({})).toBe(true)});it("should validate a date",function(){expect(B(new Date())).toBe(true)})});describe("messages",function(){it("should accept a custom message",function(){A=new Ext.data.validator.Presence({message:"Foo"});expect(A.validate(undefined)).toBe("Foo")})})})