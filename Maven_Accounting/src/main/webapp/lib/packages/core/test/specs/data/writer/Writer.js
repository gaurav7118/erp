describe("Ext.data.writer.Writer",function(){var D,B,C,E,A;beforeEach(function(){Ext.ClassManager.enableNamespaceParseCache=false;B=function(F){F=Ext.apply({writeAllFields:true},F);F=Ext.apply(F,{model:spec.Article});D=new Ext.data.writer.Writer(F)};C=Ext.define("spec.Article",{extend:"Ext.data.Model",fields:[{name:"id",type:"int"},{name:"title",type:"string"},{name:"body",type:"string",writeName:"content"},{name:"isRead",type:"boolean",persist:false}]});E=new C({id:1,title:"Foo",body:"Bar"});A=new Ext.data.operation.Create({records:[E]})});afterEach(function(){Ext.ClassManager.enableNamespaceParseCache=true;Ext.data.Model.schema.clear();Ext.undefine("spec.Article")});describe("initialization",function(){it("should default writeAllFields to false",function(){var F=new Ext.data.writer.Writer();expect(F.getWriteAllFields()).toBe(false)});it("should default nameProperty to 'name'",function(){B();expect(D.getNameProperty()).toBe("name")})});describe("getRecordData",function(){it("should return undeclared fields in the model",function(){B();E.data.something=1;var F=D.getRecordData(E,A);expect(F.something).toBe(1)});it("should write all fields in the model",function(){B();var F=D.getRecordData(E,A);expect(F).toEqual({id:1,title:"Foo",body:"Bar"})});it("should ignore any fields with persist: false",function(){B();var F=D.getRecordData(E,A);expect(F.isRead).toBeUndefined()});it("should write the id as the clientIdProperty if the record is a phantom",function(){B({clientIdProperty:"cid"});E=new C({title:"Foo",body:"Bar"});A.setRecords([E]);var F=D.getRecordData(E,A);expect(F).toEqual({cid:E.id,title:"Foo",body:"Bar"})});it("should write the generated id if the record is a phantom",function(){B();C.prototype.clientIdProperty="clientId";E=new C({title:"Foo",body:"Bar"});A.setRecords([E]);var F=D.getRecordData(E,A);C.prototype.clientIdProperty=null;expect(F).toEqual({id:E.id,title:"Foo",body:"Bar"})});it("should write the idProperty for all non-phantom records by default",function(){B();E=new C({id:1,title:"Foo",body:"Bar"});var F=D.getRecordData(E,A);expect(F).toEqual({id:1,title:"Foo",body:"Bar"})});describe("delete",function(){var F;beforeEach(function(){E=new C({id:1,title:"Foo",body:"Bar"});F=new Ext.data.operation.Destroy({records:[E]})});it("should return an object containing all fields",function(){B();var G=D.getRecordData(E,F);expect(G).toEqual({id:1,title:"Foo",body:"Bar"})});it("should return an object with only the id if writeAllFields is false",function(){B({writeAllFields:false});var G=D.getRecordData(E,F);expect(G).toEqual({id:1})})});describe("writeAllFields: false",function(){beforeEach(function(){B({writeAllFields:false})});it("should return an object with only the id if nothing is modified",function(){var F=D.getRecordData(E,A);expect(F).toEqual({id:1})});it("should return an empty object if nothing is modified when writeRecordId = false",function(){B({writeAllFields:false,writeRecordId:false});var F=D.getRecordData(E,A);expect(F).toEqual({})});it("should return only the modified fields and the id",function(){E.set("title","other");var F=D.getRecordData(E,A);expect(F).toEqual({id:1,title:"other"})});it("should return the modified fields except id if the record is a non-phantom and writeRecordId = false",function(){B({writeAllFields:false,writeRecordId:false});E.set("title","other");var F=D.getRecordData(E,A);expect(F).toEqual({title:"other"})});it("should write all fields if the record is a phantom",function(){E=new C({title:"Foo",body:"Bar"});var F=D.getRecordData(E,A);expect(F).toEqual({id:E.id,title:"Foo",body:"Bar"})});describe("dates",function(){beforeEach(function(){Ext.define("MyModel",{extend:"Ext.data.Model",fields:[{name:"myDate",type:"date",dateFormat:"Y/m/d"},{name:"timestamp",type:"date",dateFormat:"timestamp"},{name:"time",type:"date",dateFormat:"time"},{name:"dateWriteFormat",type:"date",dateWriteFormat:"Y-m-d",dateFormat:"Y|M|D"}]})});afterEach(function(){Ext.undefine("MyModel")});it("should serialize Dates using the dateFormat",function(){var G=new MyModel({myDate:new Date(1962,5,17)}),H=new Ext.data.operation.Create({records:[G]}),I=new Ext.data.writer.Writer({}),F=I.getRecordData(G,H);expect(F.myDate).toBe("1962/06/17")});it("should respect the timestamp format",function(){var I=new Date();var G=new MyModel({timestamp:new Date(Ext.Date.format(I,"U")*1000)}),H=new Ext.data.operation.Create({records:[G]}),J=new Ext.data.writer.Writer({}),F=J.getRecordData(G,H);expect(F.timestamp).toBe(Ext.Date.format(I,"U"))});it("should respect the time format",function(){var I=new Date();var G=new MyModel({time:new Date(I.getTime())}),H=new Ext.data.operation.Create({records:[G]}),J=new Ext.data.writer.Writer({}),F=J.getRecordData(G,H);expect(F.time).toBe(I.getTime().toString())});it("should send null for dates when the date is null",function(){var G=new MyModel({}),H=new Ext.data.operation.Create({records:[G]}),I=new Ext.data.writer.Writer({}),F=I.getRecordData(G,H);expect(F.myDate).toBe(null)});it("should give precedence to writeFormat",function(){var G=new MyModel({dateWriteFormat:new Date(2012,0,1)}),H=new Ext.data.operation.Create({records:[G]}),I=new Ext.data.writer.Writer({dateFormat:"Y/m/d"}),F=I.getRecordData(G,H);expect(F.dateWriteFormat).toBe("2012/01/01")});it("should give precedence to the writer dateFormat",function(){var G=new MyModel({myDate:new Date(2012,0,1)}),H=new Ext.data.operation.Create({records:[G]}),I=new Ext.data.writer.Writer({dateFormat:"Y/m/d"}),F=I.getRecordData(G,H);expect(F.myDate).toBe("2012/01/01")})});it("should serialize using the Field's serialize",function(){Ext.define("MyModel",{extend:"Ext.data.Model",fields:[{name:"myDate",type:"date",dateFormat:"Y/m/d",serialize:function(){return"test"}}]});var G=new MyModel({myDate:"1962/06/17"}),H=new Ext.data.operation.Create({records:[G]}),I=new Ext.data.writer.Writer({}),F=I.getRecordData(G,H);delete F.id;expect(F).toEqual({myDate:"test"});Ext.undefine("MyModel")})});describe("nameProperty",function(){function F(){Ext.data.Model.schema.clear();Ext.undefine("spec.Article");C=Ext.define("spec.Article",{extend:"Ext.data.Model",fields:[{name:"id",type:"int",writeName:"mapped_id"},{name:"title",type:"string",writeName:"mapped_title"},{name:"body",type:"string",writeName:"mapped_body"}]})}describe("destroy",function(){describe("with writeAllFields: false",function(){beforeEach(function(){A=new Ext.data.operation.Destroy({records:[E]});B({nameProperty:"writeName",writeAllFields:false})});it("should use the nameProperty",function(){F();E=new C({id:123,title:"Foo",body:"Bar",phantom:false});A.setRecords([E]);var G=D.getRecordData(E,A);expect(G).toEqual({mapped_id:123})});it("should fallback to the name",function(){var G=D.getRecordData(E,A);expect(G).toEqual({id:1})})})});describe("update",function(){beforeEach(function(){A=new Ext.data.operation.Update({records:[E]})});it("should use the nameProperty",function(){B({writeAllFields:false,nameProperty:"writeName"});E.set("body","new body");var G=D.getRecordData(E,A);expect(G).toEqual({id:1,content:"new body"})});it("should fall back to the name property",function(){B({nameProperty:"writeName"});var G=D.getRecordData(E,A);expect(G).toEqual({id:1,title:"Foo",content:"Bar"})})});describe("create",function(){it("should use the nameProperty",function(){B({writeAllFields:false,nameProperty:"writeName"});E.set("body","new body");var G=D.getRecordData(E,A);expect(G).toEqual({id:1,content:"new body"})});it("should fall back to the name property",function(){B({nameProperty:"writeName"});var G=D.getRecordData(E,A);expect(G).toEqual({id:1,title:"Foo",content:"Bar"})});it("should write mapped names correctly when phantom = false",function(){B({writeAllFields:true,nameProperty:"writeName"});F();E=new C({id:123,title:"Foo",body:"Bar",phantom:false});A.setRecords([E]);var G=D.getRecordData(E,A);expect(G).toEqual({mapped_id:123,mapped_title:"Foo",mapped_body:"Bar",phantom:false})})})})})})