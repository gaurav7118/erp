describe("Ext.data.writer.Xml",function(){var G,C,A,F,D,H={id:1,title:"Article 1",body:"content1"},B="<record><id>1</id><title>Article 1</title><body>content1</body></record>",E="<xmlData>"+B+"</xmlData>";beforeEach(function(){Ext.ClassManager.enableNamespaceParseCache=false;C=function(I){I=Ext.apply({writeAllFields:true},I);G=new Ext.data.writer.Xml(I)};D=Ext.define("spec.Article",{extend:"Ext.data.Model",fields:[{name:"id",type:"int"},{name:"title",type:"string"},{name:"body",type:"string",writeName:"content"}]});F=function(J){var I=[];Ext.each(J,function(K){I.push(new D(K))});return I};A=function(I){return new Ext.data.operation.Create({records:I})}});afterEach(function(){G=C=F=A=null;Ext.ClassManager.enableNamespaceParseCache=true;Ext.data.Model.schema.clear();Ext.undefine("spec.Article")});describe("initialization",function(){it("should default documentRoot to xmlData",function(){C();expect(G.getDocumentRoot()).toBe("xmlData")});it("should default header to ''",function(){C();expect(G.getHeader()).toBe("")});it("should default record to record",function(){C();expect(G.getRecord()).toBe("record")})});describe("header",function(){it("should not push a header if one is not specified",function(){C();var I=G.write(new Ext.data.Request({operation:A(F([H]))}));expect(I.getXmlData()).toBe(E)});it("should append any header",function(){C({header:"foo"});var I=G.write(new Ext.data.Request({operation:A(F([H]))}));expect(I.getXmlData()).toBe("foo"+E)})});describe("root",function(){it("should include the root by default",function(){C();var I=G.write(new Ext.data.Request({operation:A(F([H]))}));expect(I.getXmlData()).toBe(E)});it("should use any custom root specified",function(){C({documentRoot:"customRoot"});var I=G.write(new Ext.data.Request({operation:A(F([H]))}));expect(I.getXmlData()).toBe(E.replace(/xmlData/g,"customRoot"))});it("should exclude the root if the root is empty and there's 1 record",function(){C({documentRoot:""});var I=G.write(new Ext.data.Request({operation:A(F([H]))}));expect(I.getXmlData()).toBe(B)});it("should force the defaultDocumentRoot if root is empty and there's more than 1 record",function(){C({documentRoot:""});var J=G.write(new Ext.data.Request({operation:A(F([H,{id:2,title:"Article 2",body:"content2"}]))}));var I=["<xmlData>",B,B.replace(/1/g,"2"),"</xmlData>"];expect(J.getXmlData()).toBe(I.join(""))});it("should respect a custom defaultDocumentRoot",function(){C({documentRoot:"",defaultDocumentRoot:"otherRoot"});var J=G.write(new Ext.data.Request({operation:A(F([H,{id:2,title:"Article 2",body:"content2"}]))}));var I=["<otherRoot>",B,B.replace(/1/g,"2"),"</otherRoot>"];expect(J.getXmlData()).toBe(I.join(""))})});describe("transform",function(){it("should invoke the transform function",function(){var J=function(L){return[{id:10,title:"Article 10",body:"content10"}]};C({transform:J});var I=G.write(new Ext.data.Request({operation:A(F([H]))}));var K="<xmlData><record><id>10</id><title>Article 10</title><body>content10</body></record></xmlData>";expect(I.getXmlData()).not.toBe(E);expect(I.getXmlData()).toEqual(K)});it("should invoke the transform function with the specified scope",function(){var I={};var K=function(M){expect(this).toEqual(I);return[{id:10,title:"Article 10",body:"content10"}]};C({transform:{fn:K,scope:I}});var J=G.write(new Ext.data.Request({operation:A(F([H]))}));var L="<xmlData><record><id>10</id><title>Article 10</title><body>content10</body></record></xmlData>";expect(J.getXmlData()).not.toBe(E);expect(J.getXmlData()).toEqual(L)})});describe("Nested XML",function(){it('should rebuild fully nested XML from mappings if nameProperty: "mapping" is used',function(){var L=Ext.define("",{extend:"Ext.data.Model",fields:[{name:"systemNumber",mapping:"@SystemNumber"},{name:"systemName",mapping:"SystemName"},{name:"assetId",mapping:"SystemMaster>AssetId"},{name:"agilentModel",mapping:"SystemMaster>AgilentModel"},{name:"serialNumber",mapping:"SystemMaster>SerialNumber"},{name:"OCN",mapping:"SystemMaster>OCN"}]}),K=new Ext.data.writer.Xml({record:"SystemCatalog>SystemInfo",writeRecordId:false,documentRoot:false,writeAllFields:true,nameProperty:"mapping"}),I=[new L({systemNumber:"10118795",systemName:"Phase Noise Measurement System",assetId:"DE3208",agilentModel:"E5505A",serialNumber:"US44101357",OCN:"DES-0653"}),new L({systemNumber:"73645514",systemName:"Positronic Discombobulator",assetId:"PD123456",agilentModel:"X1234Z",serialNumber:"US12345678",OCN:"FOO-1234"})],J=K.write(new Ext.data.Request({operation:A(I)}));expect(J.getXmlData()).toBe('<SystemCatalog><SystemInfo SystemNumber="10118795"><SystemName>Phase Noise Measurement System</SystemName><SystemMaster><AssetId>DE3208</AssetId><AgilentModel>E5505A</AgilentModel><SerialNumber>US44101357</SerialNumber><OCN>DES-0653</OCN></SystemMaster></SystemInfo><SystemInfo SystemNumber="73645514"><SystemName>Positronic Discombobulator</SystemName><SystemMaster><AssetId>PD123456</AssetId><AgilentModel>X1234Z</AgilentModel><SerialNumber>US12345678</SerialNumber><OCN>FOO-1234</OCN></SystemMaster></SystemInfo></SystemCatalog>')})})})