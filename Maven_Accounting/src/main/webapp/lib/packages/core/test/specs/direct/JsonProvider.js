describe("Ext.direct.JsonProvider",function(){var B,A=[{type:"event",name:"foo",data:{foo:"bar"}},{type:"event",name:"bar",data:null},{type:"event",name:"baz",data:["foo","bar"]},{type:"event",name:"qux",data:"plugh"}];beforeEach(function(){B=new Ext.direct.JsonProvider({id:"foo"})});afterEach(function(){if(B){B.destroy()}Ext.direct.Manager.clearAllMethods()});it("should parse encoded responses",function(){var E,D,C=[];E=Ext.encode(A);D=B.createEvents({responseText:E});Ext.Array.each(D,function(F){C.push({type:F.type,name:F.getName(),data:F.getData()})});expect(C).toEqual(A)});it("should handle already decoded responses",function(){var D,C;D=B.createEvents({responseText:Ext.merge({},A[0])});C={type:D[0].type,name:D[0].getName(),data:D[0].getData()};expect(C).toEqual(A[0])});it("should handle empty responses",function(){var C=B.createEvents({responseText:[]});expect(C).toEqual([])});it("should handle invalid responses",function(){var E,D,C;spyOn(Ext,"log");E={responseText:"blow up!"};D=B.createEvents(E);C={status:D[0].status,xhr:D[0].xhr,code:D[0].code,message:D[0].message};expect(C).toEqual({status:false,xhr:E,code:Ext.direct.Manager.exceptions.PARSE,message:"Error parsing json response: \n\n Ext.JSON.decode(): You're trying to decode an invalid JSON String: blow up!"})})})