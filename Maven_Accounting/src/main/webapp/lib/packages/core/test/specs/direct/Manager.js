describe("Ext.direct.Manager",function(){var A=Ext.direct.Manager,C,B;beforeEach(function(){C=new Ext.direct.Provider({id:"foo"});B=jasmine.createSpy("event handler")});afterEach(function(){A.providers.clear();A.transactions.clear();A.clearListeners()});it("should be a singleton",function(){expect(A.isInstance).toBeTruthy()});it("should init default varName",function(){expect(A.getVarName()).toBe("Ext.REMOTING_API")});describe("handles Providers:",function(){it("adds provider as instance",function(){A.addProvider(C);expect(A.providers.getCount()).toBe(1)});it("adds provider as config object",function(){A.addProvider({id:"bar",type:""});expect(A.getProvider("bar")).toBeDefined()});it("subscribes to provider's 'data' event",function(){spyOn(A,"onProviderData").andReturn();A.addProvider(C);C.fireEvent("data");expect(A.onProviderData).toHaveBeenCalled()});it("connects the provider if it's not alredy connected",function(){spyOn(C,"connect");A.addProvider(C);expect(C.connect).toHaveBeenCalled()});it("relays provider events if requested",function(){C.relayedEvents=["foo"];A.addProvider(C);A.on("foo",B);C.fireEvent("foo");expect(B).toHaveBeenCalled()});it("returns provider by id",function(){A.addProvider(C);var D=A.getProvider("foo");expect(D.id).toBe("foo")});it("removes provider by id",function(){A.addProvider(C);A.removeProvider("foo");expect(A.providers.getCount()).toBe(0)});it("removes provider by instance",function(){A.addProvider(C);A.removeProvider(C);expect(A.providers.getCount()).toBe(0)});it("stops relaying 'data' event on removed provider",function(){A.on("data",B);A.addProvider(C);A.removeProvider("foo");C.fireEvent("data");expect(B).not.toHaveBeenCalled()});it("stops relaying specified provider events on removed provider",function(){C.relayedEvents=["foo"];A.addProvider(C);A.on("foo",B);A.removeProvider(C);C.fireEvent("foo");expect(B).not.toHaveBeenCalled()})});describe("handles Transactions:",function(){var D;beforeEach(function(){D=new Ext.direct.Transaction({provider:C})});it("adds transaction",function(){A.addTransaction(D);expect(A.transactions.getCount()).toBe(1)});it("finds transaction by tid",function(){A.addTransaction(D);var E=A.getTransaction(D.tid);expect(E).toEqual(D)});it("finds transaction by instance",function(){A.addTransaction(D);var E=A.getTransaction(D);expect(E).toEqual(D)});it("removes transaction by tid",function(){A.addTransaction(D);A.removeTransaction(D.tid);expect(A.transactions.getCount()).toBe(0)});it("removes transaction by instance",function(){A.addTransaction(D);A.removeTransaction(D);expect(A.transactions.getCount()).toBe(0)})});describe("handles provider data:",function(){var G,E,F,D;beforeEach(function(){G=new Ext.direct.Event({name:"foo",data:{foo:"bar"}});E=new Ext.direct.ExceptionEvent({data:"bar is closed"});F=jasmine.createSpy("handler foo");D=jasmine.createSpy("handler bar")});it("fires events with name 'event' only once",function(){G.name="event";A.on("event",B);A.on("exception",F);A.onProviderData(C,G);expect(B).toHaveBeenCalled();expect(F).not.toHaveBeenCalled()});it("fires events with name 'exception' only once",function(){G.name="exception";A.on("event",B);A.on("exception",F);A.onProviderData(C,G);expect(B).toHaveBeenCalled();expect(F).not.toHaveBeenCalled()});it("fires unnamed exceptions twice",function(){A.on("exception",B);A.on("event",F);A.onProviderData(C,E);expect(B).toHaveBeenCalled();expect(F).toHaveBeenCalled()});it("fires other events twice",function(){A.on("foo",B);A.on("event",F);A.on("exception",D);A.onProviderData(C,G);expect(B).toHaveBeenCalled();expect(F).toHaveBeenCalled();expect(D).not.toHaveBeenCalled()})});describe("handles method resolving:",function(){var E={actions:{TestAction:[{name:"foo",len:0}],"TestAction.Foo":[{name:"bar",len:0}],"TestAction.Foo.Bar":[{name:"baz",len:0}],"TestAction.Foo.Bar.Baz":[{name:"qux",len:0}]},namespace:"Direct",type:"remoting",url:"/router"};function D(F){return Ext.isFunction(F)&&F.$directCfg}beforeEach(function(){A.addProvider(E)});afterEach(function(){try{delete Ext.global.Direct}catch(F){Ext.global.Direct=undefined}});it("forwards methods passed as function",function(){var F=A.parseMethod(B);expect(F).toEqual(B)});it("parses methods of a first level Actions",function(){var F=A.parseMethod("TestAction.foo");expect(D(F)).toBeTruthy()});it("parses methods of a nested Action",function(){var F=A.parseMethod("TestAction.Foo.bar");expect(D(F)).toBeTruthy()});it("parses methods of a deeply nested Action",function(){var F=A.parseMethod("TestAction.Foo.Bar.baz");expect(D(F)).toBeTruthy()});it("parses methods of a really truly deeply nested Action",function(){var F=A.parseMethod("TestAction.Foo.Bar.Baz.qux");expect(D(F)).toBeTruthy()});it("parses methods of a nested Action with namespace included",function(){var F=A.parseMethod("Direct.TestAction.Foo.Bar.Baz.qux");expect(D(F)).toBeTruthy()})});describe("loadProvider",function(){var H,G,E,F,D;beforeEach(function(){Ext.define("test.Provider",{extend:"Ext.direct.Provider",alias:"direct.testprovider",type:"test",inheritableStatics:{checkConfig:Ext.returnTrue}});G=jasmine.createSpy("success");E=jasmine.createSpy("failure");F=jasmine.createSpy("callback");A.on({providerload:G,providerloaderror:E});D={}});afterEach(function(){if(H){H.destroy()}A.un({providerload:G,providerloaderror:E});G=E=F=D=null;Ext.undefine("test.Provider");A.providerClasses.test=H=null;test=undefined;delete Ext.REMOTING_API});describe("passing array",function(){beforeEach(function(){A.loadProvider([{type:"test",url:"test1"},{type:"test",url:"test2"},{type:"test",url:"test3"}],F)});afterEach(function(){A.providers.each(function(I){I.destroy()})});it("should create 3 providers",function(){expect(A.providers.getCount()).toBe(3)});it("should fire providerload event thrice",function(){expect(G.callCount).toBe(3)});it("should fire callback thrice",function(){expect(F.callCount).toBe(3)})});describe("fast track",function(){beforeEach(function(){A.loadProvider({type:"test",url:"test"},F,D);H=A.providers.getAt(0)});it("should add provider immediately",function(){expect(H.type).toBe("test")});it("should fire providerload event",function(){var I=Ext.Array.slice(G.mostRecentCall.args,0,2);expect(I).toEqual(["test",H])});it("should not fire providerloaderror event",function(){expect(E).not.toHaveBeenCalled()});it("should fire callback",function(){expect(F).toHaveBeenCalledWith("test",H)});it("should pass scope to callback",function(){expect(F.mostRecentCall.object).toBe(D)})});describe("remote load",function(){var I,L,M,J,K;beforeEach(function(){spyOn(Ext.Loader,"loadScript").andCallFake(function(){M=arguments[0];if(M){I=M.onLoad;L=M.onError}})});afterEach(function(){I=L=M=null;J=K=null});describe("configuration passing via closures",function(){var N;beforeEach(function(){spyOn(A,"onApiLoadSuccess").andCallFake(function(){J=arguments[0]});spyOn(A,"onApiLoadFailure").andCallFake(function(){K=arguments[0]});Ext.Loader.loadScript.andCallFake(function(){if(N==="load"){arguments[0].onLoad.call(A)}else{if(N==="error"){arguments[0].onError.call(A)}}})});afterEach(function(){N=null});describe("url",function(){it("should throw if no url is provided",function(){expect(function(){A.loadProvider({})}).toThrow("Need API discovery URL to load a Remoting provider!")});describe("onLoad",function(){beforeEach(function(){N="load";A.loadProvider({url:"foo"})});it("should pass url to onLoad callback",function(){expect(J.url).toBe("foo")});it("should clear original url value from config",function(){expect("url" in J.config).toBe(false)})});describe("onError",function(){beforeEach(function(){N="error";A.loadProvider({url:"bar"})});it("should pass url to onError callback",function(){expect(K.url).toBe("bar")});it("should not pass config to onError callback",function(){expect(K.config).toBe(undefined)})})});describe("variable name",function(){beforeEach(function(){N="load"});it("should use default if not configured",function(){A.loadProvider({url:"foo"});expect(J.varName).toBe(A.getVarName())});it("should use passed value",function(){A.loadProvider({url:"foo",varName:"blerg"});expect(J.varName).toBe("blerg")})});describe("callback and scope",function(){var O=function(){},P={};it("should pass both to onLoad callback",function(){N="load";A.loadProvider({url:"foo"},O,P);expect(J.callback).toBe(O);expect(J.scope).toBe(P)});it("should pass both to onError callback",function(){N="error";A.loadProvider({url:"bar"},O,P);expect(K.callback).toBe(O);expect(K.scope).toBe(P)})})});describe("onApiLoadSuccess",function(){describe("success",function(){describe("new provider",function(){beforeEach(function(){A.onApiLoadSuccess({url:"foo",varName:{},config:{type:"test"},callback:F,scope:D});H=A.providers.getAt(0)});it("should create new provider",function(){expect(H.type).toBe("test")});it("should fire providerload event",function(){expect(G).toHaveBeenCalled()});it("should pass url and provider with providerload event",function(){var N=Ext.Array.slice(G.mostRecentCall.args,0,2);expect(N).toEqual(["foo",H])});it("should fire callback",function(){expect(F).toHaveBeenCalled()});it("should apply scope to callback",function(){expect(F.mostRecentCall.object).toBe(D)});it("should pass url and provider to callback",function(){var N=F.mostRecentCall.args;expect(N).toEqual(["foo",H])})});describe("variable resolution",function(){it("should eval nested variable",function(){test.foo={bar:{baz:"qux"}};A.onApiLoadSuccess({url:"bar",varName:"test.foo.bar",config:{type:"test"}});H=A.providers.getAt(0);expect(H.baz).toBe("qux")})})});describe("failure",function(){var N=["blerg",Ext.isIE8?"TypeError: 'nonexistent' is undefined":Ext.isIE?"ReferenceError: 'nonexistent' is undefined":Ext.isSafari?"ReferenceError: Can't find variable: nonexistent":"ReferenceError: nonexistent is not defined"];beforeEach(function(){A.onApiLoadSuccess({url:"blerg",varName:"nonexistent.variable.name",config:{type:"test"},callback:F,scope:D});H=A.providers.getAt(0)});it("should not create provider when eval fails",function(){expect(H).toBe(undefined)});it("should fire providerloaderror event",function(){expect(E).toHaveBeenCalled()});it("should pass url and error with providerloaderror event",function(){var O=Ext.Array.slice(E.mostRecentCall.args,0,2);expect(O).toEqual(N)});it("should fire callback",function(){expect(F).toHaveBeenCalled()});it("should apply scope to callback",function(){expect(F.mostRecentCall.object).toBe(D)});it("should pass url and error to callback",function(){var O=F.mostRecentCall.args;expect(O).toEqual(N)})})});describe("onApiLoadFailure",function(){beforeEach(function(){A.onApiLoadFailure({url:"fred",callback:F,scope:D})});it("should fire providerloaderror event",function(){expect(E).toHaveBeenCalled()});it("should pass url and error with providerloaderror event",function(){var N=Ext.Array.slice(E.mostRecentCall.args,0,2);expect(N).toEqual(["fred","Ext Direct API was not found at fred"])});it("should fire callback",function(){expect(F).toHaveBeenCalled()});it("should apply scope to callback",function(){expect(F.mostRecentCall.object).toBe(D)});it("should pass url and error to callback",function(){var N=F.mostRecentCall.args;expect(N).toEqual(["fred","Ext Direct API was not found at fred"])})})})})})