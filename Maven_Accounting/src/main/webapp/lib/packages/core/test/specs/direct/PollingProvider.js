describe("Ext.direct.PollingProvider",function(){var E,C;function D(F){F=Ext.apply({},F,{url:"/foo",baseParams:{foo:"bar"}});E=new Ext.direct.PollingProvider(F)}function B(F){var H=spec.DirectSpecs[F].directCfg,G=spyOn(spec.DirectSpecs,F);G.directCfg=H;return G}function A(F){return{type:F.type,name:F.name,data:F.data}}beforeEach(function(){C=Ext.direct.Manager.addProvider({type:"remoting",url:"/bar","namespace":"spec",actions:{DirectSpecs:[{name:"pollFn",params:["foo"]}]}});D()});afterEach(function(){if(E){E.disconnect();E.destroy();E=null}if(C){Ext.direct.Manager.removeProvider(C);C.disconnect();C.destroy();C=null}Ext.direct.Manager.clearAllMethods();window.spec=null;Ext.util.TaskManager.stopAll()});describe("construction",function(){it("should create pollTask",function(){expect(E.pollTask.isTask).toBe(true)});it("should not start pollTask",function(){expect(E.pollTask.stopped).toBe(true)})});describe("should handle connect:",function(){beforeEach(function(){spyOn(E,"runPoll").andReturn()});it("starts poll task",function(){E.connect();expect(E.pollTask.pending).toBe(true)});it("fires 'connect' event",function(){var F=jasmine.createSpy("connect handler");E.on("connect",F);E.connect();expect(F).toHaveBeenCalled()});describe("polling with direct fn",function(){it("should warn when url is a function",function(){var F=spyOn(Ext.log,"warn");E.url=Ext.emptyFn;E.connect();expect(F).toHaveBeenCalledWith("Using a function for url is deprecated, use pollFn instead.")});it("should resolve string pollFn",function(){E.pollFn="spec.DirectSpecs.pollFn";E.connect();expect(E.pollFn).toBe(spec.DirectSpecs.pollFn)})})});describe("should handle disconnect:",function(){beforeEach(function(){spyOn(E,"runPoll").andReturn();E.connect()});it("stops polling task",function(){E.disconnect();expect(E.pollTask.stopped).toBe(true)});it("fires 'disconnect' event",function(){var F=jasmine.createSpy("disconnect handler");E.on("disconnect",F);E.disconnect();expect(F).toHaveBeenCalled()})});describe("should handle polling:",function(){beforeEach(function(){spyOn(Ext.Ajax,"request").andReturn();E.connect()});it("should fire 'beforepoll' event",function(){var F=jasmine.createSpy("beforepoll handler");E.on("beforepoll",F);E.runPoll();expect(F).toHaveBeenCalled()});it("should make Ajax request if url is a string",function(){E.runPoll();expect(Ext.Ajax.request).toHaveBeenCalledWith({url:"/foo",params:{foo:"bar"},scope:E,callback:E.onData})});it("should fire 'poll' event",function(){var F=jasmine.createSpy("poll handler");E.on("poll",F);E.runPoll();expect(F).toHaveBeenCalled()});describe("direct functions",function(){var F;beforeEach(function(){F=B("pollFn");spyOn(Ext.log,"warn");E=null});afterEach(function(){E.disconnect()});describe("url as function",function(){beforeEach(function(){D({url:F,baseParams:undefined});E.connect()});it("runs url() without baseParams by default",function(){E.runPoll();var G=F.mostRecentCall.args;expect(G[0]).toEqual({})});it("runs url() with baseParams when it is defined",function(){E.baseParams={foo:"bar"};E.runPoll();var G=F.mostRecentCall.args;expect(G[0]).toEqual({foo:"bar"})})});describe("pollFn",function(){beforeEach(function(){D({pollFn:F,url:undefined,baseParams:undefined});E.connect()});it("runs pollFn without baseParams by default",function(){E.runPoll();var G=F.mostRecentCall.args;expect(G[0]).toEqual({})});it("runs pollFn with baseParams with it is defined",function(){E.baseParams={bar:"baz"};E.runPoll();var G=F.mostRecentCall.args;expect(G[0]).toEqual({bar:"baz"})})})})});describe("getInterval",function(){it("should return default interval",function(){expect(E.getInterval()).toBe(3000)});it("should return actual pollTask interval",function(){E.pollTask.interval=5000;expect(E.getInterval()).toBe(5000)})});describe("setInterval",function(){it("should raise error when interval is too short",function(){expect(function(){E.setInterval(10)}).toThrow("Attempting to configure PollProvider "+E.id+" with interval that is less than 100ms.")});it("should set new interval config",function(){E.setInterval(5000);expect(E.interval).toBe(5000)});it("should set pollTask interval",function(){E.setInterval(10000);expect(E.pollTask.interval).toBe(10000)});it("should restart pollTask if connected",function(){E.connect();spyOn(E.pollTask,"restart");E.setInterval(15000);expect(E.pollTask.restart).toHaveBeenCalled()})});describe("Ajax responses",function(){var F;beforeEach(function(){F=jasmine.createSpy("data handler");E.on("data",F)});it("fires exception when poll is unsuccessful",function(){E.onData({},false,{foo:"bar"});var G=F.argsForCall[0],H=new Ext.direct.ExceptionEvent({data:null,code:Ext.direct.Manager.exceptions.TRANSPORT,message:"Unable to connect to the server.",xhr:{foo:"bar"}});expect(G[1]).toEqual(H)});it("doesn't fire 'data' event when dataset is empty",function(){spyOn(E,"createEvents").andCallThrough();E.onData({},true,{});expect(E.createEvents).toHaveBeenCalled();expect(F).not.toHaveBeenCalled()});it("fires 'data' event when dataset contains events",function(){var H=Ext.direct.Event,J=[{type:"event",name:"foo",data:{foo:"bar"}},{type:"event",name:"bar",data:null},{type:"event",name:"baz",data:["foo","bar"]},{type:"event",name:"qux",data:"plugh"}],I,G;E.onData({},true,{responseText:Ext.encode(J)});I=Ext.Array.map(J,function(K){return new H(K)});G=Ext.Array.map(F.argsForCall,function(K){return K[1]});expect(G).toEqual(I)})});describe("Ajax errors",function(){var F;beforeEach(function(){F=jasmine.createSpy("data handler");E.on("data",F)});it("doesn't break on undefined response",function(){E.onData({},true,{responseText:undefined});expect(F).not.toHaveBeenCalled()});it("doesn't break on null response",function(){E.onData({},true,{responseText:null});expect(F).not.toHaveBeenCalled()});it("doesn't break on empty string response",function(){E.onData({},true,{responseText:""});expect(F).not.toHaveBeenCalled()});it("doesn't break on empty dataset returned",function(){E.onData({},true,{responseText:Ext.JSON.encode([])});expect(F).not.toHaveBeenCalled()});it("raises exception on garbled json response",function(){spyOn(Ext,"log");E.onData({},true,{responseText:"invalid json"});var H=F.argsForCall[0][1],G={code:H.code,message:H.message};expect(G).toEqual({code:Ext.direct.Manager.exceptions.PARSE,message:"Error parsing json response: \n\n Ext.JSON.decode(): You're trying to decode an invalid JSON String: invalid json"})});it("raises exception on invalid payload data",function(){E.onData({},true,{responseText:Ext.JSON.encode({foo:"bar"})});var H=F.argsForCall[0][1],G={code:H.code,message:H.message};expect(G).toEqual({code:Ext.direct.Manager.exceptions.DATA,message:"Invalid data: event type is not specified"})});it("lets returned exception pass through",function(){var I={type:"exception",message:"Fubar"},J=Ext.JSON.encode(I);E.onData({},true,{responseText:J});var H=F.argsForCall[0][1],G={type:H.type,message:H.message};expect(F.argsForCall.length).toBe(1);expect(G).toEqual(I)})});describe("pollFn responses",function(){var G,F;beforeEach(function(){E.url=undefined;E.pollFn="spec.DirectSpecs.pollFn";F=B("pollFn");G=jasmine.createSpy("handler");E.on("data",G);E.connect()});afterEach(function(){E.disconnect()});it("doesn't fire data event when dataset is empty",function(){spyOn(E,"createEvents").andCallThrough();F.andCallFake(function(J,H,I){H.call(I,null,null,true)});E.runPoll();expect(E.createEvents).toHaveBeenCalled();expect(G).not.toHaveBeenCalled()});it("should fire single event",function(){F.andCallFake(function(L,J,K){J.call(K,{type:"event",name:"blerg",data:L},{},true)});E.runPoll();var H=G.mostRecentCall.args;var I=A(H[1]);expect(I).toEqual({type:"event",name:"blerg",data:{foo:"bar"}})});it("should fire multiple events",function(){F.andCallFake(function(N,J,L){var I=[],M;for(var K=1;K<4;K++){M={type:"event",name:"blam"+K,data:N};I.push(M)}J.call(L,I,{},true)});E.runPoll();var H=Ext.Array.map(G.argsForCall,function(I){return A(I[1])});expect(H).toEqual([{type:"event",name:"blam1",data:{foo:"bar"}},{type:"event",name:"blam2",data:{foo:"bar"}},{type:"event",name:"blam3",data:{foo:"bar"}}])})})})