describe("Ext.direct.Provider",function(){var D,A,B;function C(E){D=new Ext.direct.Provider(E);return D}beforeEach(function(){C();spyOn(D,"doConnect");spyOn(D,"doDisconnect");A=jasmine.createSpy("connect");B=jasmine.createSpy("disconnect");D.on("connect",A);D.on("disconnect",B)});afterEach(function(){if(D){D.destroy()}Ext.direct.Manager.clearAllMethods();D=A=B=null});describe("ids",function(){it("should auto-assign id when not configured with one",function(){expect(/^provider-/.test(D.id)).toBe(true)});it("should not assign auto id when configured",function(){D.destroy();C({id:"foo"});expect(D.id).toBe("foo")})});describe("destroy",function(){var E;beforeEach(function(){spyOn(D,"disconnect").andCallThrough();D.destroy()});it("should disconnect when called first time",function(){expect(D.disconnect).toHaveBeenCalled()});it("should force disconnect",function(){var F=D.disconnect.mostRecentCall.args;expect(F[0]).toBe(true)});it("should set destroyed flag",function(){expect(D.destroyed).toBe(true)});it("should not disconnect when called more than once",function(){D.destroy();expect(D.disconnect.callCount).toBe(1)})});describe("isConnected",function(){it("should return false when subscribers === 0",function(){expect(D.isConnected()).toBe(false)});it("should return true when subscribers > 0",function(){D.subscribers=1;expect(D.isConnected()).toBe(true)})});describe("connect",function(){describe("first time",function(){beforeEach(function(){D.connect()});it("should call doConnect",function(){expect(D.doConnect).toHaveBeenCalled()});it("should fire connect event",function(){expect(A).toHaveBeenCalled()});it("should increment subscribers",function(){expect(D.subscribers).toBe(1)})});describe("after first time",function(){beforeEach(function(){D.subscribers=1;D.connect()});it("should not call doConnect",function(){expect(D.doConnect).not.toHaveBeenCalled()});it("should not fire connect event",function(){expect(A).not.toHaveBeenCalled()});it("should increment subscribers",function(){expect(D.subscribers).toBe(2)})})});describe("disconnect",function(){describe("when subscribers == 2",function(){beforeEach(function(){D.subscribers=2});describe("not forced",function(){beforeEach(function(){D.disconnect()});it("should not call doDisconnect",function(){expect(D.doDisconnect).not.toHaveBeenCalled()});it("should not fire disconnect event",function(){expect(B).not.toHaveBeenCalled()});it("should decrement subscribers",function(){expect(D.subscribers).toBe(1)})});describe("forced",function(){beforeEach(function(){D.disconnect(true)});it("should call doDisconnect",function(){expect(D.doDisconnect).toHaveBeenCalled()});it("should fire disconnect event",function(){expect(B).toHaveBeenCalled()});it("should reset subscribers to 0",function(){expect(D.subscribers).toBe(0)})})});describe("when subscribers == 1",function(){beforeEach(function(){D.subscribers=1;D.disconnect()});it("should call doDisconnect",function(){expect(D.doDisconnect).toHaveBeenCalled()});it("should fire disconnect event",function(){expect(B).toHaveBeenCalled()});it("should decrement subscribers",function(){expect(D.subscribers).toBe(0)})});describe("when subscribers == 0",function(){beforeEach(function(){D.disconnect()});it("should not call doDisconnect",function(){expect(D.doDisconnect).not.toHaveBeenCalled()});it("should not fire disconnect event",function(){expect(B).not.toHaveBeenCalled()});it("should not decrement subscribers",function(){expect(D.subscribers).toBe(0)})})})})