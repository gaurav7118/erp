describe("Ext.direct.RemotingMethod",function(){var A=jasmine.createSpy("callback"),C={timeout:10},D;function B(E){D=new Ext.direct.RemotingMethod(E||{})}afterEach(function(){D=null});describe("Ordered parameters",function(){beforeEach(function(){B({name:"foo",len:2})});it("should instantiate",function(){expect(D).toBeDefined()});it("should set ordered property",function(){expect(D.ordered).toBe(true)});it("should return call data",function(){var E=D.getCallData(["foo","bar",A,D,C]);expect(E).toEqual({data:["foo","bar"],metadata:undefined,callback:A,scope:D,options:C})})});describe("Named parameters",function(){beforeEach(function(){B({name:"bar",params:["foo","bar"]})});it("should instantiate",function(){expect(D).toBeDefined()});it("should accept parameter names as array of strings",function(){expect(D.params).toEqual({foo:true,bar:true})});it("should accept parameter names as array of objects",function(){B({name:"baz",params:[{name:"foo"},{name:"bar"}]});expect(D.params).toEqual({foo:true,bar:true})});it("should return call data with less than specified params",function(){var E=D.getCallData([{foo:"foo"},A,D,C]);expect(E).toEqual({data:{foo:"foo"},metadata:undefined,callback:A,scope:D,options:C})});it("should filter out unspecified params",function(){B({name:"baz",params:["foo"]});var E=D.getCallData([{foo:"bar",bar:"qux"},A,D,C]);expect(E).toEqual({data:{foo:"bar"},metadata:undefined,callback:A,scope:D,options:C})});it("should not filter params with strict: false",function(){B({name:"blerg",params:[],strict:false});var E=D.getCallData([{foo:"bar",qux:"fred"},A,D,C]);expect(E).toEqual({data:{foo:"bar",qux:"fred"},metadata:undefined,callback:A,scope:D,options:C})})});describe("metadata",function(){describe("declaration",function(){var E;describe("ordered meta-params",function(){beforeEach(function(){B({name:"metaOrdered",len:0,metadata:{len:42}});E=D.metadata});it("should define metadata property",function(){expect(E).toBeDefined()});it("should set metadata.len to 42",function(){expect(E.len).toBe(42)});it("should not set metadata.params",function(){expect(E.params).not.toBeDefined()});it("should not set metadata.strict",function(){expect(E.strict).not.toBeDefined()})});describe("named meta-params",function(){beforeEach(function(){B({name:"metaNamed",len:0,metadata:{params:["foo","bar"]}});E=D.metadata});it("should define metadata property",function(){expect(E).toBeDefined()});it("should set metadata.params",function(){expect(E.params).toEqual({foo:true,bar:true})});it("should set metadata.strict to true",function(){expect(E.strict).toBe(true)});it("should set metadata.strict to false",function(){D=null;B({name:"metaNamed2",len:0,metadata:{params:["foo","bar"],strict:false}});expect(D.metadata.strict).toBe(false)})})});describe("getCallData",function(){describe("ordered",function(){beforeEach(function(){B({name:"metaOrdered",len:1,metadata:{len:1}})});it("should return required number of metadata params",function(){var E=D.getCallData([1,A,null,{metadata:[42]}]);expect(E).toEqual({data:[1],metadata:[42],callback:A,scope:null,options:{}})});it("should not return more than len metadata params",function(){var E=D.getCallData([1,A,null,{metadata:[42,43]}]);expect(E).toEqual({data:[1],metadata:[42],callback:A,scope:null,options:{}})});it("should throw exception when there is not enough metadata params",function(){spyOn(Ext,"log");expect(function(){D.getCallData([1,A,null,{metadata:[]}])}).toThrow("Not enough parameters in options.metadata for Ext Direct method metaOrdered")})});describe("named strict",function(){beforeEach(function(){B({name:"metaNamedStrict",len:0,metadata:{params:["foo","bar"]}})});it("should return all required metadata params",function(){var E=D.getCallData([A,null,{metadata:{foo:1,bar:2}}]);expect(E).toEqual({data:null,metadata:{foo:1,bar:2},callback:A,scope:null,options:{}})});it("should strip non-required metadata params",function(){var E=D.getCallData([A,null,{metadata:{foo:1,bar:2,baz:3}}]);expect(E).toEqual({data:null,metadata:{foo:1,bar:2},callback:A,scope:null,options:{}})});it("should throw exception when there is not enough required params",function(){spyOn(Ext,"log");expect(function(){D.getCallData([A,null,{metadata:{foo:1}}])}).toThrow("Named parameter bar is missing in options.metadata for Ext Direct method metaNamedStrict")})});describe("named non-strict",function(){beforeEach(function(){B({name:"metaNamedNonStrict",len:0,metadata:{params:["foo"],strict:false}})});it("should return all required metadata params",function(){var E=D.getCallData([A,null,{metadata:{foo:1}}]);expect(E).toEqual({data:null,metadata:{foo:1},callback:A,scope:null,options:{}})});it("should not strip non-required metadata params",function(){var E=D.getCallData([A,null,{metadata:{foo:1,bar:2}}]);expect(E).toEqual({data:null,metadata:{foo:1,bar:2},callback:A,scope:null,options:{}})});it("should throw exception when there is not enough required params",function(){spyOn(Ext,"log");expect(function(){D.getCallData([A,null,{metadata:{bar:2}}])}).toThrow("Named parameter foo is missing in options.metadata for Ext Direct method metaNamedNonStrict")})})})})})