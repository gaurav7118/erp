describe("Ext.Element.insertion",function(){var C,B,E,D,A;beforeEach(function(){C=Ext.getBody().createChild({id:"ExtElementHelper",children:[{id:"child1"},{id:"child2"},{id:"child3"}]});B=Ext.getBody().createChild({id:"ExtElementSpanHelper",tag:"span"});E=Ext.get("child1");D=Ext.get("child2");A=Ext.get("child3")});afterEach(function(){spyOn(Ext.Logger,"log");C.destroy();B.destroy();E.destroy();D.destroy();A.destroy()});describe("appendChild",function(){it("should append the child",function(){expect(C.contains(B)).toBeFalsy();C.appendChild(B);expect(C.contains(B)).toBeTruthy()})});describe("appendTo",function(){it("should append the el to the specified el",function(){expect(B.contains(C)).toBeFalsy();C.appendTo(B);expect(B.contains(C)).toBeTruthy()})});describe("insertBefore",function(){it("should insert the el before the specified el",function(){var F=Ext.getDom(E).parentNode.childNodes,G=Ext.toArray(F);expect(Ext.Array.indexOf(G,Ext.getDom(D))).toEqual(1);D.insertBefore(E);F=Ext.getDom(E).parentNode.childNodes;G=Ext.toArray(F);expect(Ext.Array.indexOf(G,Ext.getDom(D))).toEqual(0)})});describe("insertAfter",function(){it("should insert the el after the specified el",function(){var F=Ext.getDom(E).parentNode.childNodes,G=Ext.toArray(F);expect(Ext.Array.indexOf(G,Ext.getDom(D))).toEqual(1);D.insertAfter(A);F=Ext.getDom(E).parentNode.childNodes;G=Ext.toArray(F);expect(Ext.Array.indexOf(G,Ext.getDom(D))).toEqual(2)})});describe("insertFirst",function(){it("should insert the el into the specified el",function(){var F=Ext.getDom(D).childNodes;expect(F.length).toEqual(0);D.insertFirst(E);F=Ext.getDom(D).childNodes;expect(F.length).toEqual(1)})});describe("insertSibling",function(){afterEach(function(){var G=Ext.get("sibling1"),F=Ext.get("sibling2");if(G){G.destroy()}if(F){F.destroy()}});describe("when array",function(){describe("after",function(){it("should create each of the elements and add them to the el parent",function(){var F=Ext.getDom(C).childNodes;expect(F.length).toEqual(3);E.insertSibling([{id:"sibling1"},{id:"sibling2"}],"after");F=Ext.getDom(C).childNodes;expect(F.length).toEqual(5)})});describe("before",function(){it("should create each of the elements and add them to the el parent",function(){var F=Ext.getDom(C).childNodes;expect(F.length).toEqual(3);E.insertSibling([{id:"sibling1"},{id:"sibling2"}],"before");F=Ext.getDom(C).childNodes;expect(F.length).toEqual(5)})})});describe("when Ext.Element",function(){describe("after",function(){it("should move the element next to the el",function(){var F=Ext.getDom(C).childNodes;expect(F.length).toEqual(3);E.insertSibling(B,"after");F=Ext.getDom(C).childNodes;expect(F.length).toEqual(4)})});describe("before",function(){it("should move the element next to the el",function(){var F=Ext.getDom(C).childNodes;expect(F.length).toEqual(3);E.insertSibling(B,"before");F=Ext.getDom(C).childNodes;expect(F.length).toEqual(4)})})});describe("other",function(){describe("after",function(){it("should move the element next to the el",function(){var F=Ext.getDom(C).childNodes;expect(F.length).toEqual(3);E.insertSibling({id:"sibling1"},"after");F=Ext.getDom(C).childNodes;expect(F.length).toEqual(4)})});describe("before",function(){it("should move the element next to the el",function(){var F=Ext.getDom(C).childNodes;expect(F.length).toEqual(3);E.insertSibling({id:"sibling1"},"before");F=Ext.getDom(C).childNodes;expect(F.length).toEqual(4)});describe("return dom",function(){it("should move the element next to the el",function(){var F=Ext.getDom(C).childNodes,G;expect(F.length).toEqual(3);G=E.insertSibling({id:"sibling1"},"before",true);F=Ext.getDom(C).childNodes;expect(F.length).toEqual(4);expect(G).toBeDefined()})})})})});describe("replace",function(){it("should replace the passed element with this element",function(){var F=Ext.getDom(C).childNodes;expect(F.length).toEqual(3);E.replace(D);F=Ext.getDom(C).childNodes;expect(F.length).toEqual(2)})});describe("replaceWith",function(){it("should replace this element with the passed element config",function(){var F=Ext.getDom(C).childNodes;expect(F.length).toEqual(3);E.replaceWith({tag:"div",cls:"childtestdiv"});expect(E.hasCls("childtestdiv"));F=Ext.getDom(C).childNodes;expect(F.length).toEqual(3)});it("should replace this element with the passed Ext.Element",function(){var F=C.insertSibling({tag:"div",cls:"newNode"});E.replaceWith(F);expect(F.dom.parentNode).toBe(C.dom);expect(Ext.getDom(C).childNodes.length).toEqual(3)});it("should replace this element with the passed dom element",function(){var F=C.insertSibling({tag:"div",cls:"newNode"});E.replaceWith(F.dom);expect(F.dom.parentNode).toBe(C.dom);expect(Ext.getDom(C).childNodes.length).toEqual(3)});it("should replace this element with the passed element id",function(){var F=C.insertSibling({tag:"div",cls:"newNode",id:"replaceWithId"});E.replaceWith("replaceWithId");expect(F.dom.parentNode).toBe(C.dom);expect(Ext.getDom(C).childNodes.length).toEqual(3)})});describe("createChild",function(){afterEach(function(){Ext.get("child4").destroy()});it("should create a child",function(){var F=Ext.getDom(C).childNodes;expect(F.length).toEqual(3);C.createChild({id:"child4"});F=Ext.getDom(C).childNodes;expect(F.length).toEqual(4)});it("should create a child before an el",function(){var F=Ext.getDom(C).childNodes,G=Ext.toArray(F);expect(F.length).toEqual(3);expect(Ext.Array.indexOf(G,Ext.getDom(D))).toEqual(1);C.createChild({id:"child4"},D);F=Ext.getDom(C).childNodes;G=Ext.toArray(F);expect(F.length).toEqual(4);expect(Ext.Array.indexOf(G,Ext.getDom(D))).toEqual(2)})});describe("wrap",function(){it("should wrap the element",function(){var G=Ext.getDom(E).parentNode;var F=E.wrap({cls:"wrapper"});expect(Ext.getDom(E).parentNode.parentNode).toEqual(G);expect(Ext.getDom(E).parentNode.className).toEqual("wrapper");F.destroy()});it("return the el",function(){var F=E.wrap({cls:"wrapper"});expect(Ext.isElement(F)).toBeFalsy();F.destroy()});it("return the dom",function(){var F=E.wrap({cls:"wrapper"},true);expect(Ext.isElement(F)).toBeTruthy()})});describe("insertHtml",function(){describe("beforeBegin",function(){it("should insert the html",function(){expect(Ext.getDom(C).childNodes.length).toEqual(3);E.insertHtml("beforeBegin","<div></div>");expect(Ext.getDom(C).childNodes.length).toEqual(4)})});describe("afterBegin",function(){it("should insert the html",function(){expect(Ext.getDom(E).childNodes.length).toEqual(0);E.insertHtml("afterBegin","<div></div>");expect(Ext.getDom(E).childNodes.length).toEqual(1)})});describe("beforeEnd",function(){it("should insert the html",function(){expect(Ext.getDom(E).childNodes.length).toEqual(0);E.insertHtml("beforeEnd","<div></div>");expect(Ext.getDom(E).childNodes.length).toEqual(1)})});describe("afterEnd",function(){it("should insert the html",function(){expect(Ext.getDom(C).childNodes.length).toEqual(3);E.insertHtml("afterEnd","<div></div>");expect(Ext.getDom(C).childNodes.length).toEqual(4)})});it("should return a dom",function(){var F=E.insertHtml("afterEnd","<div></div>");expect(Ext.isElement(F)).toBeTruthy()});it("should return an el",function(){var F=E.insertHtml("afterEnd","<div></div>",true);expect(Ext.isElement(F)).toBeFalsy();F.destroy()})})},"/src/dom/Element.insertion.js")