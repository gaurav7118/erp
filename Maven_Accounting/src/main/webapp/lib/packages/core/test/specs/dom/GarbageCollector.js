describe("Ext.dom.GarbageCollector",function(){var A;beforeEach(function(){A=Ext.dom.Element.prototype.skipGarbageCollection;Ext.dom.Element.prototype.skipGarbageCollection=false});afterEach(function(){Ext.dom.Element.prototype.skipGarbageCollection=A});it("should collect an orphan element",function(){var B=Ext.get(document.createElement("div")),C=B.id;expect(C in Ext.cache).toBe(true);spyOn(B,"clearListeners").andCallThrough();Ext.dom.GarbageCollector.collect();expect(B.clearListeners).toHaveBeenCalled();expect(C in Ext.cache).toBe(false);spyOn(Ext.Logger,"warn");B.destroy()});it("should not collect an element that is in the body",function(){var B=Ext.get(document.createElement("div")),C=B.id;Ext.getBody().appendChild(B);spyOn(B,"clearListeners").andCallThrough();Ext.dom.GarbageCollector.collect();expect(B.clearListeners).not.toHaveBeenCalled();expect(C in Ext.cache).toBe(true);B.destroy()});(Ext.getDetachedBody?it:xit)("should not collect an element that is in the detached body",function(){var B=Ext.get(document.createElement("div")),C=B.id;Ext.getDetachedBody().appendChild(B);spyOn(B,"clearListeners").andCallThrough();Ext.dom.GarbageCollector.collect();expect(B.clearListeners).not.toHaveBeenCalled();expect(C in Ext.cache).toBe(true);B.destroy()});it("should return the ids of collected elements",function(){var C,B;Ext.Element.create({id:"one"});B=Ext.getBody().createChild({id:"two"});Ext.Element.create({tag:"a",id:"three"});C=Ext.dom.GarbageCollector.collect();expect(C instanceof Array).toBe(true);expect(Ext.Array.contains(C,"DIV#one")).toBe(true);expect(Ext.Array.contains(C,"DIV#two")).toBe(false);expect(Ext.Array.contains(C,"A#three")).toBe(true);B.destroy()})})