describe("Ext.Error",function(){var A;beforeEach(function(){A=Ext.global;Ext.global={console:{dir:function(B){return B},log:function(B){return B},error:function(B){return B},warn:function(B){return B}}};Ext.global.console.dir.$emptyFn=Ext.global.console.log.$emptyFn=true;Ext.global.console.error.$emptyFn=Ext.global.console.warn.$emptyFn=true});afterEach(function(){Ext.global=A});describe("raising an error via Ext.Error.raise",function(){describe("passing a string",function(){it("should throw an error with a msg property",function(){var B;try{Ext.raise("foo")}catch(C){B=C}expect(B.msg).toEqual("foo")});it("should log an error to the console",function(){spyOn(Ext.global.console,"error");try{Ext.raise("foo")}catch(B){}expect(Ext.global.console.error).toHaveBeenCalledWith("[E] foo")});it("should log the error object to the console",function(){spyOn(Ext.global.console,"dir").andCallFake(function(C){expect(C.msg).toEqual("foo")});try{Ext.raise("foo")}catch(B){}});it("should do nothing when Ext.Error.ignore = true",function(){spyOn(Ext.global.console,"warn");Ext.Error.ignore=true;try{Ext.raise("foo")}catch(B){expect("Error should not have been caught").toBe(true)}expect(Ext.global.console.warn).not.toHaveBeenCalled();Ext.Error.ignore=false});it("should not throw an error if handled by Ext.Error.handle",function(){spyOn(Ext.global.console,"warn");var B=Ext.Error.handle;Ext.Error.handle=function(D){expect(D.msg).toEqual("foo");return true};try{Ext.raise("foo")}catch(C){expect("Error should not have been caught").toBe(true)}expect(Ext.global.console.warn).not.toHaveBeenCalled();Ext.Error.handle=B})});describe("passing an object with a msg property",function(){it("should throw an error with a msg property",function(){var B;try{Ext.raise({msg:"foo"})}catch(C){B=C}expect(B.msg).toEqual("foo")});it("should log an error to the console",function(){spyOn(Ext.global.console,"error");try{Ext.raise({msg:"foo"})}catch(B){}expect(Ext.global.console.error).toHaveBeenCalledWith("[E] foo")});it("should log the error object to the console",function(){spyOn(Ext.global.console,"dir").andCallFake(function(C){expect(C.msg).toEqual("foo")});try{Ext.raise({msg:"foo"})}catch(B){}});it("should do nothing when Ext.Error.ignore = true",function(){spyOn(Ext.global.console,"warn");Ext.Error.ignore=true;try{Ext.raise({msg:"foo"})}catch(B){expect("Error should not have been caught").toBe(true)}expect(Ext.global.console.warn).not.toHaveBeenCalled();Ext.Error.ignore=false});it("should not throw an error if handled by Ext.Error.handle",function(){spyOn(Ext.global.console,"warn");var B=Ext.Error.handle;Ext.Error.handle=function(D){expect(D.msg).toEqual("foo");return true};try{Ext.raise({msg:"foo"})}catch(C){expect("Error should not have been caught").toBe(true)}expect(Ext.global.console.warn).not.toHaveBeenCalled();Ext.Error.handle=B})});describe("passing an object with custom metadata",function(){it("should throw an error with matching metadata",function(){var B;try{Ext.raise({msg:"Custom error",data:{foo:"bar"}})}catch(C){B=C}expect(B.msg).toEqual("Custom error");expect(B.data).not.toBe(null);expect(B.data.foo).toEqual("bar")});it("should log the complete metadata to the console",function(){spyOn(Ext.global.console,"dir").andCallFake(function(C){expect(C.msg).toEqual("Custom error");expect(C.data).not.toBe(null);expect(C.data.foo).toEqual("bar")});try{Ext.raise({msg:"Custom error",data:{foo:"bar"}})}catch(B){}})});describe("originating from within a class defined by Ext",function(){var B;beforeEach(function(){Ext.define("spec.CustomClass",{doSomething:function(C){Ext.raise({msg:"Custom error",data:C,foo:"bar"})}});B=Ext.create("spec.CustomClass")});afterEach(function(){Ext.undefine("spec.CustomClass")});it("should throw an error containing the source class and method",function(){var C;try{B.doSomething({extraData:"extra"})}catch(D){C=D}expect(C.msg).toEqual("Custom error");expect(C.sourceClass).toEqual("spec.CustomClass");expect(C.sourceMethod).toEqual("doSomething");expect(C.toString()).toBe("spec.CustomClass.doSomething(): Custom error")});it("should log the complete metadata to the console",function(){spyOn(Ext.global.console,"dir").andCallFake(function(D){expect(D.msg).toEqual("Custom error");expect(D.sourceClass).toEqual("spec.CustomClass");expect(D.sourceMethod).toEqual("doSomething");expect(D.data).not.toBe(null);expect(D.data.extraData).not.toBe(null);expect(D.data.extraData).toEqual("extra");expect(D.foo).toEqual("bar")});try{B.doSomething({extraData:"extra"})}catch(C){}})})});describe("Throwing an an Ext.Error directly intantiated",function(){describe("Passing an string as constructor argument",function(){it("should contain a msg property with the given string as value",function(){expect(function(){throw new Ext.Error("expected message")}).toRaiseExtError("expected message")})})});xdescribe("Ext.deprecated",function(){it("should return a function that raises an error with the given suggestion",function(){Ext.ClassManager.enableNamespaceParseCache=false;Ext.define("spec.MyClass",{deprecatedMethod:Ext.deprecated("use another function")});expect(function(){new spec.ThisClassContainsADeprecatedMethod().deprecatedMethod()}).toThrow('The method "spec.MyClass.deprecatedMethod" has been removed. use another function');Ext.undefine("spec.MyClass");Ext.ClassManager.enableNamespaceParseCache=true})})})