describe("Ext.Function",function(){var C,H,A,D,G,F=function(I,K,J){J=J||1;waitsFor(function(){return I.calls.length>=J});runs(K)},E=function(){A=[];D=[];G=[];C=window.setTimeout;window.setTimeout=function(I,J){A.push(J);var K=C.apply(this,arguments);D.push(K);return K};H=window.clearTimeout;window.clearTimeout=function(I){G.push(I);H.apply(this,arguments)}},B=function(){A=undefined;D=undefined;G=undefined;window.setTimeout=C;window.clearTimeout=H};describe("bind",function(){var I,J;beforeEach(function(){I=jasmine.createSpy("bindSpy")});it("should return a function if a function is passed as first argument",function(){J=Ext.Function.bind(I,this);expect(typeof J==="function").toBe(true)});it("should use the correct scope",function(){J=Ext.Function.bind(I,fakeScope);J();expect(I.calls[0].object).toBe(fakeScope)});it("should call the first function when it is executed",function(){J=Ext.Function.bind(I,this);J();expect(I).toHaveBeenCalled()});describe("argument passing",function(){it("should use default args if none are passed",function(){J=Ext.Function.bind(I,this,["a","b"]);J();expect(I).toHaveBeenCalledWith("a","b")});it("should use passed args if they are present",function(){J=Ext.Function.bind(I,this);J("c","d");expect(I).toHaveBeenCalledWith("c","d")});it("should append args",function(){J=Ext.Function.bind(I,this,["a","b"],true);J("c","d");expect(I).toHaveBeenCalledWith("c","d","a","b")});it("should append args at the given index",function(){J=Ext.Function.bind(I,this,["a","b"],0);J("c","d");expect(I).toHaveBeenCalledWith("a","b","c","d")})})});describe("pass",function(){it("should pass the specified array of arguments as the first arguments to the given function",function(){var J=jasmine.createSpy(),I=[0,1,2],K=Ext.Function.pass(J,I);K(3,4,5);expect(J).toHaveBeenCalledWith(0,1,2,3,4,5)});it("should pass the specified string argument as the first argument to the given function",function(){var J=jasmine.createSpy(),I="a",K=Ext.Function.pass(J,I);K("b","c");expect(J).toHaveBeenCalledWith("a","b","c")});it("should pass the specified numeric argument as the first argument to the given function",function(){var J=jasmine.createSpy(),I=0,K=Ext.Function.pass(J,I);K(1);expect(J).toHaveBeenCalledWith(0,1)});it("should pass the specified 'arguments' argument as the first argument to the given funciton",function(){var I=function(){var K=jasmine.createSpy(),J=arguments,L=Ext.Function.pass(K,J);L(3,4,5);expect(K).toHaveBeenCalledWith(0,1,2,3,4,5)};I(0,1,2)});it("should discard the argument if it's undefined",function(){var J=jasmine.createSpy(),I=undefined,K=Ext.Function.pass(J,I);K(1);expect(J).toHaveBeenCalledWith(1)});it("should use 'this' as default scope",function(){var K="a",I=jasmine.createSpy().andCallFake(function(){K=this.foo}),J=Ext.Function.pass(I,"c");J("d");expect(I).toHaveBeenCalledWith("c","d");expect(K).toBeUndefined()});it("should override 'this' with the specified scope",function(){var L="a",J={foo:"b"},I=jasmine.createSpy().andCallFake(function(){L=this.foo}),K=Ext.Function.pass(I,"c",J);K("d");expect(I).toHaveBeenCalledWith("c","d");expect(L).toBe("b")})});describe("clone",function(){it("should clone the given function",function(){var K=jasmine.createSpy().andCallFake(function(L){return"bar"}),J=Ext.Function.clone(K),I=J("foo");expect(I).toBe("bar");expect(K).toHaveBeenCalledWith("foo")})});describe("createInterceptor",function(){var M,L,K,J,I;beforeEach(function(){J=false;I=false;L=jasmine.createSpy("interceptorSpy").andCallFake(function(){J=true});K=jasmine.createSpy("interceptedSpy").andCallFake(function(){I=J})});describe("if no function is passed",function(){it("should return the same function",function(){expect(Ext.Function.createInterceptor(K)).toEqual(K)})});describe("if a function is passed",function(){beforeEach(function(){M=Ext.Function.createInterceptor(K,L,fakeScope);M()});it("should return a new function",function(){expect(typeof M==="function").toBe(true);expect(M).not.toEqual(K)});it("should set the correct scope for the interceptor function",function(){expect(L.calls[0].object).toBe(fakeScope)});it("should call the interceptor function first",function(){expect(I).toBe(true)})});describe("if the interceptor function returns false",function(){it("should not execute the original function",function(){M=Ext.Function.createInterceptor(K,function(){return false});M();expect(K).not.toHaveBeenCalled()})});describe("returnValue",function(){beforeEach(function(){K=function(){return"Original"};L=function(){return false}});describe("when interceptorFn returns false",function(){it("should return null as a default",function(){M=Ext.Function.createInterceptor(K,L);expect(M()).toBeNull()});it("should accept a custom returnValue",function(){M=Ext.Function.createInterceptor(K,L,null,"Custom");expect(M()).toBe("Custom")});it("should accept a falsy returnValue",function(){M=Ext.Function.createInterceptor(K,L,null,false);expect(M()).toBe(false)})});it("should return the value of the original function if false is not returned",function(){L=function(){return };M=Ext.Function.createInterceptor(K,L);expect(M()).toBe("Original")})})});describe("createDelayed",function(){(Ext.isIE8?xit:it)("should create bind to the given function to be called after x milliseconds",function(){E();var J=jasmine.createSpy(),I=Ext.Function.createDelayed(J,2);I("foo");expect(A.shift()).toBe(2);expect(J).not.toHaveBeenCalled();F(J,function(){expect(J).toHaveBeenCalledWith("foo")});B()});it("should use the specified scope as 'this'",function(){var K={x:"foo"},J=jasmine.createSpy().andCallFake(function(){this.x="bar"}),I=Ext.Function.createDelayed(J,2,K);I();expect(J).not.toHaveBeenCalled();expect(K.x).toBe("foo");F(J,function(){expect(K.x).toBe("bar")})});it("should override the call arguments with the specified arguments",function(){var L={},J=[0,1,2],K=jasmine.createSpy(),I=Ext.Function.createDelayed(K,2,L,J);I(3,4,5);expect(K).not.toHaveBeenCalled();F(K,function(){expect(K).toHaveBeenCalledWith(0,1,2)})});it("should append the specified arguments to the call arguments when appendArgs is true",function(){var L={},J=[0,1,2],K=jasmine.createSpy(),I=Ext.Function.createDelayed(K,2,L,J,true);I(3,4,5);expect(K).not.toHaveBeenCalled();F(K,function(){expect(K).toHaveBeenCalledWith(3,4,5,0,1,2)})});it("should insert the specified arguments into the call arguments at the position specified by appendArgs",function(){var L={},J=[0,1,2],K=jasmine.createSpy(),I=Ext.Function.createDelayed(K,2,L,J,2);I(3,4,5);expect(K).not.toHaveBeenCalled();F(K,function(){expect(K).toHaveBeenCalledWith(3,4,0,1,2,5)})})});describe("defer",function(){var I;beforeEach(function(){I=jasmine.createSpy("deferSpy")});it("should execute the function after the specified number of milliseconds",function(){Ext.defer(I,10);waitsFor(function(){return I.calls.length===1},"fn was never called");runs(function(){expect(I).toHaveBeenCalled()})});it("should execute the function directly if the specified number of milliseconds is <= 0",function(){Ext.defer(I,0);expect(I).toHaveBeenCalled()});it("should set the correct scope",function(){Ext.defer(I,10,fakeScope);waitsFor(function(){return I.calls.length===1},"fn was never called");runs(function(){expect(I.calls[0].object).toBe(fakeScope)})});it("should pass the correct arguments",function(){Ext.defer(I,10,this,[1,2,3]);waitsFor(function(){return I.calls.length===1},"fn was never called");runs(function(){expect(I).toHaveBeenCalledWith(1,2,3)})});it("should return a timeout number",function(){expect(typeof Ext.defer(function(){},10)==="number").toBe(true)})});describe("createSequence",function(){var M,L,K,J,I;beforeEach(function(){J=false;I=false;K=jasmine.createSpy("interceptedSpy").andCallFake(function(){J=true});L=jasmine.createSpy("sequenceSpy").andCallFake(function(){I=J})});describe("if no function is passed",function(){it("should return the same function",function(){expect(Ext.Function.createSequence(K)).toEqual(K)})});describe("if a function is passed",function(){beforeEach(function(){M=Ext.Function.createSequence(K,L,fakeScope);M()});it("should return a new function",function(){expect(typeof M==="function").toBe(true);expect(M).not.toEqual(K)});it("should set the correct scope for the sequence function",function(){expect(L.calls[0].object).toBe(fakeScope)});it("should call the sequence function first",function(){expect(I).toBe(true)})})});describe("createBuffered",function(){(Ext.isIE8?xit:it)("should prevent the execution of multiple calls of the buffered function within the timeout period",function(){E();var I=jasmine.createSpy(),J=Ext.Function.createBuffered(I,2);J();expect(A.shift()).toBe(2);J();expect(G.shift()).toBe(D.shift());expect(A.shift()).toBe(2);expect(I).not.toHaveBeenCalled();F(I,function(){expect(I.calls.length).toBe(1)});B()});it("should use the specified scope as 'this'",function(){var J={x:1},I=jasmine.createSpy().andCallFake(function(){this.x++}),K=Ext.Function.createBuffered(I,20,J);K();expect(J.x).toBe(1);K();F(I,function(){expect(J.x).toBe(2)})});it("should override the call arguments with the specified ones",function(){var K={},I=["bar1","bar2"],J=jasmine.createSpy(),L=Ext.Function.createBuffered(J,20,K,I);L("foo1","foo2");expect(J).not.toHaveBeenCalled();F(J,function(){expect(J).toHaveBeenCalledWith("bar1","bar2")})})});(Ext.isIE8?xdescribe:xdescribe)("createThrottled",function(){it("should execute only once per each specified time interval",function(){E();var J=jasmine.createSpy(),I=Ext.Function.createThrottled(J,10);expect(J).not.toHaveBeenCalled();I();expect(G.shift()).toBeUndefined();expect(J.calls.length).toBe(1);I();expect(A.shift()).not.toBeGreaterThan(10);expect(G.shift()).toBeUndefined();I();expect(A.shift()).not.toBeGreaterThan(10);expect(G.shift()).toBe(D.shift());I();expect(A.shift()).not.toBeGreaterThan(10);expect(G.shift()).toBe(D.shift());expect(J.calls.length).toBe(1);F(J,function(){expect(J.calls.length).toEqual(2);I();expect(J.calls.length).not.toBeLessThan(2);expect(J.calls.length).not.toBeGreaterThan(3)},2);B()});it("should use the specified scope as 'this'",function(){var K={},J=jasmine.createSpy().andCallFake(function(L){this.x=L}),I=Ext.Function.createThrottled(J,10,K);I("foo");I("bar");I("baz");I("qux");expect(J).toHaveBeenCalledWith("foo");expect(K.x).toBe("foo");expect(J.calls.length).toBe(1)})});describe("interceptAfter",function(){it("should execute interceptor after each method call",function(){var I={phrases:[],addPhrase:function(K){this.phrases.push(K)}},J=jasmine.createSpy().andCallFake(function(K){this.phrases.push(K+" too")});Ext.Function.interceptAfter(I,"addPhrase",J);I.addPhrase("I like you");I.addPhrase("I love you");expect(I.phrases).toEqual(["I like you","I like you too","I love you","I love you too"]);expect(J).toHaveBeenCalledWith("I like you");expect(J).toHaveBeenCalledWith("I love you")});it("should execute interceptor after each method call with the specified scope as 'this'",function(){var J={phrases:[],addPhrase:function(L){this.phrases.push(L)}},K={phrases:[]},I=jasmine.createSpy().andCallFake(function(L){this.phrases.push("He said: "+L)});Ext.Function.interceptAfter(J,"addPhrase",I,K);J.addPhrase("I like you");J.addPhrase("I love you");expect(J.phrases).toEqual(["I like you","I love you"]);expect(K.phrases).toEqual(["He said: I like you","He said: I love you"]);expect(I).toHaveBeenCalledWith("I like you");expect(I).toHaveBeenCalledWith("I love you")})});describe("asap",function(){it("should call the passed function",function(){var I=false;Ext.asap(function(){I=true});waitsFor(function(){return I},"the asap function to call the passed function")});it("should not call the passed function if asapCancel called",function(){var I=false,J;J=Ext.asap(function(){I=true});Ext.asapCancel(J);waits(150);runs(function(){expect(I).toBe(false)})})})})