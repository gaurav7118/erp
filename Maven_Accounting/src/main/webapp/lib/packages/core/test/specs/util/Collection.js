describe("Ext.util.Collection",function(){var C,B={};function A(D,E,F){F=F||"id";D.on({beginupdate:function(G){expect(G===D).toBe(true);E.push("beginupdate")},add:function(H,G){expect(H===D).toBe(true);E.push("add "+Ext.encode(Ext.Array.pluck(G.items,F))+" at "+G.at);if(G.keys){E[E.length-1]+=" w/keys "+Ext.encode(G.keys)}},remove:function(H,G){expect(H===D).toBe(true);E.push("remove "+Ext.encode(Ext.Array.pluck(G.items,F))+" at "+G.at);if(G.keys){E[E.length-1]+=" w/keys "+Ext.encode(G.keys)}},endupdate:function(G){expect(G===D).toBe(true);E.push("endupdate")}})}describe("constructor",function(){it("should provide a default getKey implementation",function(){C=new Ext.util.Collection();var E={id:1,data:"first item"},D={id:2,data:"second item"};C.add(E);C.add(D);expect(C.get(1)).toBe(E);expect(C.get(2)).toBe(D)});it("should allow a custom getKey implementation",function(){C=new Ext.util.Collection({keyFn:function(F){return F.myKey}});var E={myKey:"a",data:"first item"},D={myKey:"b",data:"second item"};C.add(E,D);expect(C.get("a")).toBe(E);expect(C.get("b")).toBe(D)});it("should contain the source items when configured with a source",function(){var D=new Ext.util.Collection();D.add({id:1},{id:2},{id:3});C=new Ext.util.Collection({source:D});expect(C.getCount()).toBe(3)})});describe("iterators",function(){var G,H,F,E,D;beforeEach(function(){C=new Ext.util.Collection();G=jasmine.createSpy("fn");F={id:1,name:"first"};E={id:2,name:"second"};D={id:3,name:"third"};C.add([F,E,D])});describe("each",function(){it("should call with the correct scope",function(){C.each(function(){H=this},B);expect(H).toBe(B)});it("should call the correct number of times",function(){C.each(G);expect(G.callCount).toBe(3)});it("should be called with each item",function(){C.each(G);expect(G).toHaveBeenCalledWith(F,0,3);expect(G).toHaveBeenCalledWith(E,1,3);expect(G).toHaveBeenCalledWith(D,2,3)})});describe("eachKey",function(){it("should be called with the correct scope",function(){C.eachKey(function(){H=this},B);expect(H).toBe(B)});it("should call the correct number of times",function(){C.eachKey(G);expect(G.callCount).toBe(3)});it("should be called with each key",function(){C.eachKey(G);expect(G).toHaveBeenCalledWith(1,F,0,3);expect(G).toHaveBeenCalledWith(2,E,1,3);expect(G).toHaveBeenCalledWith(3,D,2,3)})})});describe("adding items",function(){var F,E,D,G;beforeEach(function(){C=new Ext.util.Collection();F={id:1};E={id:2};D={id:3};G={id:4}});afterEach(function(){F=E=D=G=null});it("should get the correct count when adding an array",function(){C.add([F,E]);expect(C.getCount()).toBe(2);expect(C.length).toBe(2);expect(C.getAt(0)).toBe(F);expect(C.getAt(1)).toBe(E)});it("should get the correct count when adding varargs",function(){C.add(F,E);expect(C.getCount()).toBe(2);expect(C.length).toBe(2);expect(C.getAt(0)).toBe(F);expect(C.getAt(1)).toBe(E)});it("should get the correct count when adding sequentially",function(){C.add(F);C.add(E);expect(C.getCount()).toBe(2);expect(C.length).toBe(2);expect(C.getAt(0)).toBe(F);expect(C.getAt(1)).toBe(E)});it("should fire the add event",function(){var H=false;C.on("add",function(){H=true});C.add(F);expect(H).toBe(true)});describe("with replaceAll",function(){it("should add when the collection is empty",function(){C.replaceAll(F);expect(C.getCount()).toBe(1)});it("should remove all existing items",function(){C.add(F,E,D);C.replaceAll(G);expect(C.getCount()).toBe(1);expect(C.first()).toBe(G)});it("should remove even when no items are added",function(){C.add(F,E,D);C.setDecoder(function(){return false});C.replaceAll(G);expect(C.getCount()).toBe(0)})});describe("when sorted",function(){var I,H;beforeEach(function(){C.getSorters().add("id");I=jasmine.createSpy();C.on("sort",I)});afterEach(function(){expect(I).not.toHaveBeenCalled();H=I=null});describe("a single item",function(){describe("with no items",function(){it("should add the item",function(){H=function(){expect(C.length).toBe(1);expect(C.getAt(0)).toBe(F);expect(C.indexOfKey(1)).toBe(0)};C.on("add",H);C.add(F);H()});describe("with items",function(){it("should put the item in the correct position",function(){C.add(F,D);H=function(){expect(C.length).toBe(3);expect(C.getAt(1)).toBe(E);expect(C.indexOfKey(1)).toBe(0);expect(C.indexOfKey(2)).toBe(1);expect(C.indexOfKey(3)).toBe(2)};C.on("add",H);C.add(E);H()})})})});describe("multiple items",function(){describe("with no items",function(){it("should insert the items",function(){H=function(){expect(C.length).toBe(3);expect(C.getAt(0)).toBe(F);expect(C.getAt(1)).toBe(E);expect(C.getAt(2)).toBe(D);expect(C.indexOfKey(1)).toBe(0);expect(C.indexOfKey(2)).toBe(1);expect(C.indexOfKey(3)).toBe(2)};C.on("add",H);C.add([F,E,D]);H()});it("should sort the added items",function(){H=function(){expect(C.length).toBe(3);expect(C.getAt(0)).toBe(F);expect(C.getAt(1)).toBe(E);expect(C.getAt(2)).toBe(D)};C.on("add",H);C.add([D,F,E]);H()})});describe("with items",function(){it("should insert the items into the correct position",function(){C.add(D);H=function(){expect(C.length).toBe(3);expect(C.getAt(0)).toBe(F);expect(C.getAt(1)).toBe(E);expect(C.getAt(2)).toBe(D);expect(C.indexOfKey(1)).toBe(0);expect(C.indexOfKey(2)).toBe(1);expect(C.indexOfKey(3)).toBe(2)};C.on("add",H);C.add(F,E);H()});it("should sort the added items",function(){C.add(D);H=function(){expect(C.length).toBe(3);expect(C.getAt(0)).toBe(F);expect(C.getAt(1)).toBe(E);expect(C.getAt(2)).toBe(D);expect(C.indexOfKey(1)).toBe(0);expect(C.indexOfKey(2)).toBe(1);expect(C.indexOfKey(3)).toBe(2)};C.on("add",H);C.add(E,F);H()});it("should insert items in a discontiguous range",function(){C.add(F,D);var J=0;H=function(){expect(C.length).toBe(4);expect(C.getAt(0)).toBe(F);expect(C.getAt(1)).toBe(E);expect(C.getAt(2)).toBe(D);expect(C.getAt(3)).toBe(G);expect(C.indexOfKey(1)).toBe(0);expect(C.indexOfKey(2)).toBe(1);expect(C.indexOfKey(3)).toBe(2);expect(C.indexOfKey(4)).toBe(3)};C.on("add",function(){if(J===0){expect(C.length).toBe(4);expect(C.getAt(0)).toBe(F);expect(C.getAt(1)).toBe(E);expect(C.getAt(2)).toBe(D);expect(C.indexOfKey(1)).toBe(0);expect(C.indexOfKey(2)).toBe(1);expect(C.indexOfKey(3)).toBe(2)}else{H()}++J});C.add(G,E);H()})})})})});describe("removing items",function(){var L={id:1,name:"one"},K={id:2,name:"two"},J={id:3,name:"three"},I={id:4,name:"four"},H={id:5,name:"five"},G={id:6,name:"six"},F={id:7,name:"seven"},E={id:8,name:"eight"},D={id:9,name:"nine"};beforeEach(function(){C=new Ext.util.Collection();C.add([L,K,J,I,H,G,F,E,D])});describe("remove",function(){it("should remove a single item",function(){C.remove(L);expect(C.getCount()).toBe(8)});it("should return the removed item count",function(){expect(C.remove(L)).toBe(1)});it("should the passed items array",function(){C.remove([K,J]);expect(C.getCount()).toBe(7)});it("should fire the remove event when passing items array",function(){var N=[],M=[];C.on("remove",function(P,O){N.push(P);M.push(O)});C.remove([K,J,G]);expect(N.length).toBe(2);expect(N[0]===C).toBe(true);expect(N[1]===C).toBe(true);expect(M[0].at).toBe(5);expect(M[0].items.length).toBe(1);expect(M[0].items[0]).toBe(G);expect(M[0].keys.length).toBe(1);expect(M[0].keys[0]).toBe(6);expect(M[1].at).toBe(1);expect(M[1].items.length).toBe(2);expect(M[1].items[0]).toBe(K);expect(M[1].items[1]).toBe(J);expect(M[1].keys.length).toBe(2);expect(M[1].keys[0]).toBe(2);expect(M[1].keys[1]).toBe(3)});it("should return 0 if no item was found",function(){expect(C.remove({id:0})).toBe(0)});it("should fire the remove event",function(){var N,M;C.on("remove",function(P,O){N=P;M=O});C.remove(L);expect(N).toBe(C);expect(M.at).toBe(0);expect(M.items.length).toBe(1);expect(M.items[0]).toBe(L)});it("should only fire a single event if the items are in a large contiguous range",function(){var O=jasmine.createSpy(),M=[],N;for(N=0;N<1000;++N){M.push({id:N+1})}C.add(M);C.on("remove",O);C.remove(C.getRange());expect(O.callCount).toBe(1)})});describe("removeAt",function(){it("should remove a single item",function(){C.removeAt(1);expect(C.getCount()).toBe(8)});it("should return the removed item",function(){expect(C.removeAt(1)).toBe(K)});it("should return false if no item was found",function(){expect(C.removeAt(9)).toBeFalsy()});describe("event",function(){it("should fire the remove event",function(){var N,M;C.on("remove",function(P,O){N=P;M=O});C.removeAt(1);expect(N).toBe(C);expect(M.at).toBe(1);expect(M.items.length).toBe(1);expect(M.items[0]).toBe(K);expect(M.keys.length).toBe(1);expect(M.keys[0]).toBe(2)});it("should update the collection during a remove",function(){var N,M;C.on("remove",function(){N=C.getCount();M=C.getByKey(1)});C.removeAt(0);expect(N).toBe(8);expect(M).toBeUndefined()})});describe("when filtered",function(){it("should remove the correct item with an all inclusive filter",function(){C.getFilters().add(function(){return true});C.removeAt(1);expect(C.getAt(0)).toBe(L);expect(C.getAt(1)).toBe(J);expect(C.getCount()).toBe(8)})})});describe("bulkRemove",function(){it("should limit the length to that of the collection",function(){C.removeAt(4,100);expect(C.getCount()).toBe(4)});it("should remove the correct items",function(){C.removeAt(3,2);expect(C.getCount()).toBe(7);expect(C.getAt(2)).toBe(J);expect(C.getAt(3)).toBe(G)})});describe("removeByKey",function(){it("should remove a single item",function(){C.removeByKey(1);expect(C.getCount()).toBe(8)});it("should return the removed item",function(){expect(C.removeByKey(1)).toBe(L)});it("should return false if no item was found",function(){expect(C.removeByKey(10)).toBeFalsy()});it("should fire the remove event",function(){var N,M;C.on("remove",function(P,O){N=P;M=O});C.removeByKey(2);expect(N).toBe(C);expect(M.at).toBe(1);expect(M.items.length).toBe(1);expect(M.items[0]).toBe(K);expect(M.keys.length).toBe(1);expect(M.keys[0]).toBe(2)})});describe("removeAll",function(){it("should remove all items",function(){C.removeAll();expect(C.getCount()).toBe(0)});it("should fire the remove event with no passed items",function(){var N=0,O,M;C.on("remove",function(Q,P){O=Q;M=P;++N});C.removeAll();expect(N).toBe(1);expect(O).toBe(C);expect(M.at).toBe(0);expect(M.items.length).toBe(9);expect(M.items).toEqual([L,K,J,I,H,G,F,E,D]);expect(M.keys.length).toBe(9);expect(M.keys).toEqual([1,2,3,4,5,6,7,8,9])})})});describe("clearing items",function(){beforeEach(function(){C=new Ext.util.Collection();C.add([{id:1},{id:2}])});it("should remove all items",function(){expect(C.length).toBe(2);C.clear();expect(C.length).toBe(0)});it("should not fire the remove event",function(){var D=0;C.on("remove",function(){++D});C.clear();expect(D).toBe(0)})});describe("determining insertion index in a sorted Collection",function(){var G={id:2,name:"Michael"},E={id:3,name:"Yanto"},D={id:1,name:"Bill"},K={id:4,name:"Albert"},J={id:5,name:"Fred"},I={id:6,name:"Robert"},H={id:7,name:"Zebedee"};beforeEach(function(){C=new Ext.util.Collection();C.add([G,E,D])});function F(M){C.add(M);var L=C.indexOf(M);C.remove(M);return L}describe("Sorted ascending",function(){it("should find correct insertion indices",function(){C.sort("name");expect(F(K)).toBe(0);expect(F(J)).toBe(1);expect(F(I)).toBe(2);expect(F(H)).toBe(3)})});describe("Sorted descending",function(){it("should find correct insertion indices",function(){C.sort("name","DESC");expect(F(K)).toBe(3);expect(F(J)).toBe(2);expect(F(I)).toBe(1);expect(F(H)).toBe(0)})})});describe("an existing Collection",function(){var L={id:1,name:"first"},K={id:2,name:"second"},J={id:3,name:"third"},I={id:4,name:"fourth"},H={id:5,name:"fifth"},G={id:6,name:"sixth"},F={id:7,name:"seventh"},E={id:8,name:"eighth"},D={id:9,name:"ninth"};function N(){C.clear();C.add([L,K,J,I,H,G,F,E,D])}var M;beforeEach(function(){C=new Ext.util.Collection();C.add([L,K,J]);M=C.generation});describe("updateKey",function(){it("should do nothing if the old key doesn't exist for member item",function(){C.updateKey(L,"bar");expect(C.getByKey("bar")).toBeUndefined();expect(C.getByKey(L.id)).toBe(L);expect(C.generation).toBe(M)});it("should do nothing if the old key doesn't exist for non-member item",function(){C.updateKey(I,"bar");expect(C.getByKey("bar")).toBeUndefined();expect(C.getByKey(I.id)).toBe(undefined);expect(C.generation).toBe(M)});it("should throw if old key is a different item",function(){expect(function(){C.updateKey(I,L.id)}).toThrow();expect(C.getByKey(I.id)).toBe(undefined);expect(C.generation).toBe(M)});it("should throw if new key collides with a different item",function(){var O=Ext.apply({},L);C.add(O);M=C.generation;O.id=J.id;expect(function(){C.updateKey(O,L.id)}).toThrow();expect(C.getByKey(J.id)).toBe(J);expect(C.generation).toBe(M)});it("should update the key for the item",function(){var O=Ext.apply({},L);C.clear();C.add(O,K,J);O.id=20;C.updateKey(O,1);expect(C.getByKey(1)).toBeUndefined();expect(C.getByKey(20)).toBe(O);expect(C.indexOfKey(1)).toBe(-1);expect(C.indexOfKey(20)).toBe(0)})});describe("inserting items",function(){it("should insert a new item",function(){var O=C.getCount();C.insert(0,I);expect(C.getCount()).toBe(O+1)});it("should fire the add event",function(){var P=0,Q,O;C.on("add",function(R,S){++P;Q=R;O=S});C.insert(0,I);expect(P).toBe(1);expect(Q).toBe(C);expect(O.at).toBe(0);expect(O.items.length).toBe(1);expect(O.items[0]).toBe(I);expect(O.keys.length).toBe(1);expect(O.keys[0]).toBe(4)});it("should insert the item at the correct location",function(){expect(C.items[0]).toBe(L);C.insert(0,I);expect(C.items[0]).toBe(I)});describe("with a source",function(){var P,O;beforeEach(function(){N();P=new Ext.util.Collection();P.setSource(C);O={id:100,name:"Foo"}});afterEach(function(){P.destroy();O=P=null});describe("inserting into the source",function(){it("should have the correct position when inserting at the start",function(){C.insert(0,O);expect(P.getAt(0)).toBe(O)});it("should have the correct position when inserting into the middle",function(){C.insert(4,O);expect(P.getAt(4)).toBe(O)});it("should have the correct position when inserting at the end",function(){C.insert(100,O);expect(C.getAt(9)).toBe(O)});describe("with source sorted",function(){it("should take the sorted position from the source",function(){C.getSorters().add(function(R,Q){var T=R.name,S=Q.name;if(T===S){return 0}return T<S?-1:1});O.name="a";C.insert(100,O);expect(P.getAt(0)).toBe(O)})});describe("with the child filtered",function(){it("hould have the correct position when inserting at the start",function(){P.getFilters().add(function(Q){return Q.name==="third"||Q.name==="seventh"||Q.name==="Foo"});C.insert(0,O);expect(P.getAt(0)).toBe(O)});it("should have the correct position when inserting into the middle",function(){P.getFilters().add(function(Q){return Q.name==="third"||Q.name==="seventh"||Q.name==="Foo"});C.insert(5,O);expect(P.getAt(1)).toBe(O)});it("should have the correct position when inserting at the end",function(){P.getFilters().add(function(Q){return Q.name==="third"||Q.name==="seventh"||Q.name==="Foo"});C.insert(100,O);expect(P.getAt(2)).toBe(O)});it("should have the correct position when the nearest item in the child is the first item in the source",function(){P.getFilters().add(function(Q){return Q.name==="first"||Q.name==="seventh"||Q.name==="Foo"});C.insert(3,O);expect(P.getAt(1)).toBe(O)});it("should have the correct position when there is no nearest item in the source",function(){P.getFilters().add(function(Q){return Q.name==="seventh"||Q.name==="Foo"});C.insert(3,O);expect(P.getAt(0)).toBe(O)})})});describe("inserting into the child",function(){it("should have the correct position when inserting at the start",function(){P.insert(0,O);expect(C.getAt(0)).toBe(O)});it("should have the correct position when inserting into the middle",function(){P.insert(4,O);expect(C.getAt(4)).toBe(O)});it("should have the correct position when inserting at the end",function(){P.insert(100,O);expect(C.getAt(9)).toBe(O)});describe("with the source sorted",function(){it("should use the specified position",function(){C.sort("name");var Q={id:100,name:"zzzz"};P.insert(0,Q);expect(P.getAt(0)).toBe(Q);expect(C.getAt(9)).toBe(Q)})});describe("when filtered",function(){it("should adjust the position for the source collection",function(){P.getFilters().add(function(Q){return Q.name!=="first"&&Q.name!=="second"});P.insert(0,O);expect(C.indexOf(O)).toBe(2)})})});it("should not cause an exception when modifying the item in the source onCollectionAdd & the child is sorted",function(){var Q={observerPriority:-1000,onCollectionAdd:function(T,R){var S=R.items[0];S.name="asdf";expect(function(){C.itemChanged(S,["name"])}).not.toThrow()}};P.getSorters().add("name");C.addObserver(Q);C.add({id:1000,name:"q"})})})});describe("replacing items",function(){it("should replace the correct item",function(){C.splice(1,1,[I]);expect(C.getAt(1)).toBe(I)});it("should not change the count",function(){var O=C.getCount();C.splice(1,1,[I]);expect(C.getCount()).toBe(O)});it("should fire the proper events",function(){var O=[];A(C,O,"name");C.splice(1,1,[I]);expect(O).toEqual(["beginupdate",'remove ["second"] at 1 w/keys [2]','add ["fourth"] at 1 w/keys [4]',"endupdate"])})});describe("cloning",function(){it("should copy all items into the new Collection",function(){var O=C.clone();expect(O.getCount()).toBe(3);expect(O.items[0]).toBe(L);expect(O.items[1]).toBe(K);expect(O.items[2]).toBe(J)});it("should keep the getKey fn",function(){var O=function(R){return R.id},Q=new Ext.util.Collection({keyFn:O});var P=Q.clone();expect(P.getKey).toBe(O);Q=P=null})});describe("getting items",function(){it("should get an item's key",function(){expect(C.getKey(L)).toBe(1)});describe("first",function(){it("should get the first item",function(){expect(C.first()).toBe(L)});it("should return undefined if the collection is empty",function(){C=new Ext.util.Collection();expect(C.first()).toBeUndefined()})});describe("last",function(){it("should get the last item",function(){expect(C.last()).toBe(J)});it("should return undefined if the collection is empty",function(){C=new Ext.util.Collection();expect(C.last()).toBeUndefined()})});describe("get",function(){it("should get by key",function(){expect(C.get(2)).toBe(K)});it("should return undefined if the key doesn't exist",function(){expect(C.get(100)).toBeUndefined()});it("should get an newly added item",function(){var O={id:"a",name:"fifth item"};C.add(O);expect(C.get("a")).toBe(O)})});describe("indexOf",function(){it("should return the correct indexOf an item",function(){expect(C.indexOf(L)).toBe(0)});it("should return -1 if the item does not exist in the collection",function(){expect(C.indexOf({id:73})).toBe(-1)});it("should handle null",function(){expect(C.indexOf(null)).toBe(-1)})});describe("indexOfKey",function(){it("should return the correct indexOfKey",function(){expect(C.indexOfKey(2)).toBe(1)});it("should return -1 if the key does not exist",function(){expect(C.indexOfKey(42)).toBe(-1)})});describe("get by key",function(){it("should return the correct key",function(){expect(C.getByKey(3)).toBe(J)});it("should return undefined if the key does not exist",function(){expect(C.getByKey(1200)).toBeUndefined()})});describe("getAt",function(){it("should get an item by index",function(){expect(C.getAt(2)).toBe(J)});it("should return undefined if the index is out of bounds",function(){expect(C.getAt(33)).toBeUndefined()})});describe("when getting a range",function(){it("should honor the start and limit params",function(){N();var O=C.getRange(1,3);expect(O.length).toBe(2);expect(O[0]).toBe(K);expect(O[1]).toBe(J)});it("should return all items if no params are given",function(){N();var O=C.getRange();expect(O.length).toBe(9);expect(O[0]).toBe(L);expect(O[1]).toBe(K);expect(O[2]).toBe(J);expect(O[8]).toBe(D)});it("should return all items to the end if only the start param is given",function(){N();var O=C.getRange(1);expect(O.length).toBe(8);expect(O[0]).toBe(K);expect(O[1]).toBe(J);expect(O[7]).toBe(D)});it("should wrap the start value if negative",function(){N();var O=C.getRange(-6,6);expect(O.length).toBe(3);expect(O[0]).toBe(I);expect(O[1]).toBe(H);expect(O[2]).toBe(G)});it("should normalize the end value the collection max",function(){N();var O=C.getRange(6,200);expect(O.length).toBe(3);expect(O[0]).toBe(F)});it("should return empty if start > length",function(){N();var O=C.getRange(10,15);expect(O.length).toBe(0)})})});describe("finding items",function(){describe("findBy",function(){beforeEach(function(){N()});it("should find an item using a passed function",function(){var O=C.findBy(function(P){return P.name==="third"});expect(O).toBe(J)});it("should stop iterating once a match is found",function(){var O=0;C.findBy(function(P){++O;return P.name==="third"});expect(O).toBe(3)});it("should return null if the item is not matched",function(){var O=C.findBy(function(P){return false});expect(O).toBeNull()});it("should pass the item and the key",function(){var O=jasmine.createSpy().andReturn(true);C.findBy(O);expect(O).toHaveBeenCalledWith(L,1)});describe("scope",function(){it("should default the scope to the collection",function(){var O;C.findBy(function(){O=this;return true});expect(O).toBe(C)});it("should use the passed scope",function(){var O;C.findBy(function(){O=this;return true},B);expect(O).toBe(B)})});describe("start",function(){it("should not iterate at all if start > length",function(){var O=0;C.findBy(function(){++O},null,1000);expect(O).toBe(0)});it("should start from the passed index",function(){var O=[];C.findBy(function(Q,P){O.push(P)},null,4);expect(O.join(",")).toBe("5,6,7,8,9")});it("should not wrap around",function(){var O=C.findBy(function(P){return P.name==="second"},null,6);expect(O).toBeNull()});it("should find an item after the start",function(){var O=C.findBy(function(P){return P.name==="third"||P.name==="ninth"},null,5);expect(O).toBe(D)})})});describe("findIndexBy",function(){beforeEach(function(){N()});it("should find an item using a passed function",function(){var O=C.findIndexBy(function(P){return P.name==="third"});expect(O).toBe(2)});it("should stop iterating once a match is found",function(){var O=0;C.findIndexBy(function(P){++O;return P.name==="third"});expect(O).toBe(3)});it("should return -1 if the item is not matched",function(){var O=C.findIndexBy(function(P){return false});expect(O).toBe(-1)});it("should pass the item and the key",function(){var O=jasmine.createSpy().andReturn(true);C.findIndexBy(O);expect(O).toHaveBeenCalledWith(L,1)});describe("scope",function(){it("should default the scope to the collection",function(){var O;C.findIndexBy(function(){O=this;return true});expect(O).toBe(C)});it("should use the passed scope",function(){var O;C.findIndexBy(function(){O=this;return true},B);expect(O).toBe(B)})});describe("start",function(){it("should not iterate at all if start > length",function(){var O=0;C.findIndexBy(function(){++O},null,1000);expect(O).toBe(0)});it("should start from the passed index",function(){var O=[];C.findIndexBy(function(Q,P){O.push(P)},null,4);expect(O.join(",")).toBe("5,6,7,8,9")});it("should not wrap around",function(){var O=C.findIndexBy(function(P){return P.name==="second"},null,6);expect(O).toBe(-1)});it("should find an item after the start",function(){var O=C.findIndexBy(function(P){return P.name==="third"||P.name==="ninth"},null,5);expect(O).toBe(8)})})});describe("findIndex",function(){beforeEach(function(){N()});it("should find an item's index",function(){var O=C.findIndex("name","third");expect(O).toBe(2)});it("should return -1 if there is no match",function(){var O=C.findIndex("name","foo");expect(O).toBe(-1)});it("should respect the root property",function(){C=new Ext.util.Collection({rootProperty:"root"});C.add({id:1,root:{name:"A"}},{id:2,root:{name:"B"}},{id:3,root:{name:"C"}});var O=C.findIndex("name","B");expect(O).toBe(1)});describe("options",function(){describe("startIndex",function(){it("should match from the startIndex, including the start",function(){var O=C.findIndex("name","s",6,null,false);expect(O).toBe(6)});it("should find items after the startIndex",function(){var O=C.findIndex("name","s",4,null,false);expect(O).toBe(5)});it("should return -1 if the startIndex is larger than the length",function(){var O=C.findIndex("name","s",100);expect(O).toBe(-1)});it("should not 'wrap' over the collection",function(){var O=C.findIndex("name","one",2);expect(O).toBe(-1)})});describe("regex options",function(){describe("startsWith/endsWith",function(){it("should default startsWith & endsWith to true",function(){var O=C.findIndex("name","second");expect(O).toBe(1);O=C.findIndex("name","secon");expect(O).toBe(-1);O=C.findIndex("name","econd");expect(O).toBe(-1)});it("should match the start of the string when passing endsWith: false",function(){var O=C.findIndex("name","second",null,null,false);expect(O).toBe(1);O=C.findIndex("name","secon",null,null,false);expect(O).toBe(1);O=C.findIndex("name","econd",null,null,false);expect(O).toBe(-1)});it("should match the end of the string when passing startsWith: false",function(){var O=C.findIndex("name","second",null,false);expect(O).toBe(1);O=C.findIndex("name","econd",null,false);expect(O).toBe(1);O=C.findIndex("name","secon",null,false);expect(O).toBe(-1)});it("should match anywhere in the string when using startsWith/endsWith false",function(){var O=C.findIndex("name","con",null,false,false);expect(O).toBe(1)})});describe("case",function(){it("should be case insensitive by default",function(){var O=C.findIndex("name","SEVENTH");expect(O).toBe(6)});it("should respect case when passing the ignoreCase flag",function(){var O=C.findIndex("name","SEVENTH",null,null,null,false);expect(O).toBe(-1)})})})})})});describe("contains",function(){it("should contain items that have been added",function(){expect(C.contains(L)).toBe(true)});it("should not contain items that have not been added",function(){expect(C.contains({id:0})).toBe(false)});it("should contain an item by key",function(){expect(C.containsKey(1)).toBe(true)});it("should not contain a non-contained item by key",function(){expect(C.containsKey(100)).toBe(false)})})});describe("createFiltered",function(){var E,D;beforeEach(function(){C=new Ext.util.Collection({keyFn:function(F){return F.name}});C.add([{id:1,name:"Ed",code:"C",modifier:10},{id:2,name:"Abe",code:"A",modifier:100},{id:3,name:"Edward",code:"B",modifier:5}]);E=new Ext.util.Filter({filterFn:function(F){return F.name.charAt(0)==="E"}})});describe("copying",function(){it("should return a new Collection",function(){D=C.createFiltered("name","Ed");expect(D instanceof Ext.util.Collection).toBe(true);expect(D).not.toBe(C)});it("should keep the getKey function when using filter",function(){var F=function(I){return I.id},H=new Ext.util.Collection({keyFn:F});var G=H.createFiltered("name","Ed");expect(G.getKey).toBe(F);H=G=null});it("should keep the getKey function when using filterBy",function(){var F=function(I){return I.id},H=new Ext.util.Collection({keyFn:F});var G=H.createFiltered(function(){return true});expect(G.getKey).toBe(F);H=G=null})});describe("when filtering on a key and value pair",function(){it("should filter correctly",function(){D=C.createFiltered("name","Edward");expect(D.items[0].name).toBe("Edward");expect(D.length).toBe(1)});it("should use anyMatch by default",function(){D=C.createFiltered("name","Ed");expect(D.length).toBe(2)});it("should respect the root property",function(){C=new Ext.util.Collection({rootProperty:"root"});C.add({id:1,root:{name:"A"}},{id:2,root:{name:"B"}});D=C.createFiltered("name","A");expect(D.getCount()).toBe(1)})});describe("when filtering using Filter object",function(){it("should accept a single Filter",function(){D=C.createFiltered(E);expect(D.length).toBe(2)});it("should respect the root property",function(){C=new Ext.util.Collection({rootProperty:"root"});C.add({id:1,root:{name:"A"}},{id:2,root:{name:"B"}});D=C.createFiltered(new Ext.util.Filter({property:"name",value:"A"}));expect(D.getCount()).toBe(1)});describe("array of filters",function(){it("should accept an array of Filters",function(){D=C.createFiltered([E]);expect(D.length).toBe(2)});it("should respect the root property",function(){C=new Ext.util.Collection({rootProperty:"root"});C.add({id:1,root:{name:"A"}},{id:2,root:{name:"B"}});D=C.createFiltered([new Ext.util.Filter({property:"name",value:"A"})]);expect(D.getCount()).toBe(1)})})})});describe("filters collection management",function(){var N={id:0,name:"abba"},M={id:1,name:"aaa"},L={id:2,name:"bad"},K={id:3,name:"ccc"},J={id:4,name:"abc"},I={id:5,name:"bcd"},G={id:6,name:"cde"},F={id:7,name:"xyz"},E={id:8,name:"ddd"},D={id:9,name:"dad"},H={id:10,name:"dood"};beforeEach(function(){C=new Ext.util.Collection();C.add(M,L,K,J,I,G,F,E,D)});describe("single filter",function(){it("should save original items on filter and restore on clear",function(){var O=0,P=C.getFilters();C.on("refresh",function(){++O});expect(C.length).toBe(9);expect(P.length).toBe(0);expect(C.filtered).toBe(false);P.add({property:"name",value:"a"});expect(O).toBe(1);expect(P.length).toBe(1);expect(C.filtered).toBe(true);expect(C.length).toBe(2);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(J);P.removeAll();expect(O).toBe(2);expect(P.length).toBe(0);expect(C.filtered).toBe(false);expect(C.length).toBe(9);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(L);expect(C.items[2]).toBe(K);expect(C.items[3]).toBe(J);expect(C.items[4]).toBe(I);expect(C.items[5]).toBe(G);expect(C.items[6]).toBe(F);expect(C.items[7]).toBe(E);expect(C.items[8]).toBe(D)});it("should add items even when filtered",function(){var O=0,P=C.getFilters();C.on("refresh",function(){++O});expect(C.length).toBe(9);expect(P.length).toBe(0);expect(C.filtered).toBe(false);P.add({property:"name",value:"a"});expect(O).toBe(1);expect(P.length).toBe(1);expect(C.filtered).toBe(true);expect(C.length).toBe(2);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(J);C.add(N,H);expect(C.length).toBe(3);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(J);expect(C.items[2]).toBe(N);P.removeAll();expect(O).toBe(2);expect(P.length).toBe(0);expect(C.filtered).toBe(false);expect(C.length).toBe(11);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(L);expect(C.items[2]).toBe(K);expect(C.items[3]).toBe(J);expect(C.items[4]).toBe(I);expect(C.items[5]).toBe(G);expect(C.items[6]).toBe(F);expect(C.items[7]).toBe(E);expect(C.items[8]).toBe(D);expect(C.items[9]).toBe(N);expect(C.items[10]).toBe(H)});it("should sort the filtered items",function(){var O=0,P=C.getFilters();C.on("refresh",function(){++O});expect(C.length).toBe(9);expect(P.length).toBe(0);expect(C.filtered).toBe(false);P.add({property:"name",value:"a"});expect(O).toBe(1);expect(P.length).toBe(1);expect(C.filtered).toBe(true);expect(C.length).toBe(2);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(J);C.add(N,H);expect(C.length).toBe(3);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(J);expect(C.items[2]).toBe(N);C.sort("name");expect(C.length).toBe(3);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(N);expect(C.items[2]).toBe(J);P.removeAll();expect(O).toBe(2);expect(P.length).toBe(0);expect(C.filtered).toBe(false);expect(C.length).toBe(11);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(N);expect(C.items[2]).toBe(J);expect(C.items[3]).toBe(L);expect(C.items[4]).toBe(I);expect(C.items[5]).toBe(K);expect(C.items[6]).toBe(G);expect(C.items[7]).toBe(D);expect(C.items[8]).toBe(E);expect(C.items[9]).toBe(H);expect(C.items[10]).toBe(F)})});describe("configurable and detachable",function(){it("should allow filters to be configured",function(){var O=0;C=new Ext.util.Collection({filters:{property:"name",value:"a"},listeners:{refresh:function(){++O}}});expect(C.filtered).toBe(true);expect(C.length).toBe(0);var P=C.getFilters();expect(P.length).toBe(1);C.add(M,L,K,J,I,G,F,E,D);expect(O).toBe(0);expect(P.length).toBe(1);expect(C.filtered).toBe(true);expect(C.length).toBe(2);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(J);C.add(N,H);expect(C.length).toBe(3);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(J);expect(C.items[2]).toBe(N)});it("should allow filters to be detached",function(){var O=0;C=new Ext.util.Collection({filters:{property:"name",value:"a"},listeners:{refresh:function(){++O}}});expect(C.filtered).toBe(true);expect(C.length).toBe(0);var P=C.getFilters();expect(P.length).toBe(1);C.add(M,L,K,J,I,G,F,E,D);C.add(N,H);C.setFilters(null);expect(O).toBe(1);expect(P.length).toBe(1);expect(C.filtered).toBe(false);expect(C.length).toBe(11);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(L);expect(C.items[2]).toBe(K);expect(C.items[3]).toBe(J);expect(C.items[4]).toBe(I);expect(C.items[5]).toBe(G);expect(C.items[6]).toBe(F);expect(C.items[7]).toBe(E);expect(C.items[8]).toBe(D);expect(C.items[9]).toBe(N);expect(C.items[10]).toBe(H);C.setFilters(P);expect(O).toBe(2);expect(P.length).toBe(1);expect(C.filtered).toBe(true);expect(C.length).toBe(3);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(J);expect(C.items[2]).toBe(N)});it("should allow detached filters to be manipulated",function(){var O=0;C=new Ext.util.Collection({filters:{property:"name",value:"a"},listeners:{refresh:function(){++O}}});expect(C.filtered).toBe(true);expect(C.length).toBe(0);var P=C.getFilters();expect(P.length).toBe(1);C.add(M,L,K,J,I,G,F,E,D);C.add(N,H);C.setFilters(null);expect(O).toBe(1);expect(P.length).toBe(1);expect(C.filtered).toBe(false);expect(C.length).toBe(11);expect(C.items[0]).toBe(M);expect(C.items[1]).toBe(L);expect(C.items[2]).toBe(K);expect(C.items[3]).toBe(J);expect(C.items[4]).toBe(I);expect(C.items[5]).toBe(G);expect(C.items[6]).toBe(F);expect(C.items[7]).toBe(E);expect(C.items[8]).toBe(D);expect(C.items[9]).toBe(N);expect(C.items[10]).toBe(H);P.removeAll();expect(O).toBe(1);expect(P.length).toBe(0);expect(C.filtered).toBe(false);expect(C.length).toBe(11);P.add({property:"name",value:"d"});expect(O).toBe(1);expect(P.length).toBe(1);expect(C.filtered).toBe(false);expect(C.length).toBe(11);C.setFilters(P);expect(O).toBe(2);expect(P.length).toBe(1);expect(C.filtered).toBe(true);expect(C.length).toBe(3);expect(C.items[0]).toBe(E);expect(C.items[1]).toBe(D);expect(C.items[2]).toBe(H)})});describe("events",function(){it("should fire the filter event after filtering has taken place",function(){var O;C.on("filter",function(){O=C.getCount()});C.getFilters().add({filterFn:function(P){return Ext.String.startsWith(P.name,"a")}});expect(O).toBe(2)})})});describe("grouping",function(){var O,N,M,K,J,I,H,G,F,D,E;function R(S,T){C.setGrouper({property:S||"group",direction:T})}function L(){C.setGrouper(null)}function Q(S,T){C.getSorters().add({property:S||"sortKey",direction:T})}function P(T,S){C.getFilters().add({property:T||"isFilter",value:Ext.isDefined(S)?S:true})}beforeEach(function(){C=new Ext.util.Collection();C.add((O={id:0,name:"Item0",group:"A",sortKey:3,groupOrder:3,isFilter:false,age:10}),(N={id:1,name:"Item1",group:"A",sortKey:1,groupOrder:3,isFilter:true,age:30}),(M={id:2,name:"Item2",group:"A",sortKey:2,groupOrder:3,isFilter:false,age:20}),(K={id:3,name:"Item3",group:"B",sortKey:2,groupOrder:1,isFilter:true,age:60}),(J={id:4,name:"Item4",group:"B",sortKey:3,groupOrder:1,isFilter:false,age:50}),(I={id:5,name:"Item5",group:"B",sortKey:1,groupOrder:1,isFilter:true,age:40}),(H={id:6,name:"Item6",group:"C",sortKey:1,groupOrder:4,isFilter:false,age:80}),(G={id:7,name:"Item7",group:"C",sortKey:2,groupOrder:4,isFilter:true,age:70}),(F={id:8,name:"Item8",group:"C",sortKey:3,groupOrder:4,isFilter:false,age:90}),(D={id:9,name:"Item9",group:"D",sortKey:1,groupOrder:2,isFilter:true,age:100}))});afterEach(function(){E=O=M=K=J=I=H=G=F=D=null});it("should return an Ext.util.GroupCollection",function(){R();E=C.getGroups();expect(E instanceof Ext.util.GroupCollection).toBe(true)});it("should group by the specified key",function(){R();E=C.getGroups();expect(E.length).toBe(4)});it("should have the appropriate item in each group",function(){R();E=C.getGroups();E.each(function(T){var S=T.getGroupKey();T.each(function(U){expect(U.group).toBe(S)})})});describe("clearing groups",function(){it("should return no groups by default",function(){C=new Ext.util.Collection();expect(C.getGroups()).toBeNull()});it("should return no groups once the grouper has cleared",function(){R();C.getGroups();L();expect(C.getGroups()).toBeNull()})});describe("dynamic manipulation",function(){describe("adding",function(){it("should add to an existing group",function(){R();var T={id:"new",group:"D"},S;C.add(T);S=C.getGroups().get("D");expect(S.length).toBe(2);expect(S.contains(T)).toBe(true)});it("should create a new group",function(){R();expect(C.getGroups().get("E")).toBeUndefined();var T={id:"new",group:"E"},S;C.add(T);S=C.getGroups().get("E");expect(S.length).toBe(1);expect(S.contains(T)).toBe(true)});it("should position correctly when adding multiple items",function(){R();var T={id:"new1",group:"D"},S={id:"new2",group:"C"};C.add([T,S]);expect(C.indexOf(T)).toBe(11);expect(C.indexOf(S)).toBe(9)})});describe("removing",function(){it("should remove from an existing group",function(){R();C.remove(O);var S=C.getGroups().get("A");expect(S.length).toBe(2);expect(S.contains(O)).toBe(false)});it("should remove a group",function(){R();C.remove(D);expect(C.getGroups().get("D")).toBeUndefined()})});describe("updating",function(){it("should move the item if the group changes",function(){R();O.group="D";C.itemChanged(O);var S=C.getGroups().get("A"),T=C.getGroups().get("D");expect(T.length).toBe(2);expect(T.contains(O)).toBe(true);expect(S.length).toBe(2);expect(S.contains(O)).toBe(false)});it("should position the item correctly in the group",function(){R();M.group="B";C.itemChanged(M);expect(C.getGroups().get("B").indexOf(M)).toBe(0)});it("should position if the update is caused by an id change",function(){R();M.group="B";M.id=100;C.updateKey(M,2);expect(C.getGroups().get("B").indexOf(M)).toBe(0)});it("should not exist in the group during a remove if the record is changing position",function(){var W,V,U,T,S;R();S=C.getGroups();D.group="B";C.on("remove",function(){W=S.get("A").contains(D);V=S.get("B").contains(D)});C.on("add",function(){U=S.get("A").contains(D);T=S.get("B").contains(D)});C.itemChanged(D);expect(W).toBe(false);expect(V).toBe(false);expect(U).toBe(false);expect(T).toBe(true)})})});describe("sorting",function(){function S(U,W){var T=U.length,V;W=W||C;for(V=0;V<T;++V){expect(W.getAt(V)).toBe(U[V])}}describe("the groups",function(){function T(X){var V=C.getGroups(),U=X.length,W;for(W=0;W<U;++W){expect(V.getAt(W).getGroupKey()).toBe(X[W])}}it("should sort the groups",function(){C=new Ext.util.Collection();C.add(H,J,M,N,K,D,F,O,I,G);R("group");T("A","B","C","D")});it("should sort the groups according to the group direction",function(){C=new Ext.util.Collection();C.add(H,J,M,N,K,D,F,O,I,G);R("group","DESC");T("D","C","B","A")});it("should update the group order when the grouper changes",function(){C=new Ext.util.Collection();C.add(H,J,M,N,K,D,F,O,I,G);R("group");R("group","DESC");T("D","C","B","A")});it("should add new groups in the correct position",function(){C=new Ext.util.Collection();R("group");C.add(K);T(["B"]);C.add(D);T(["B","D"]);C.add(H);T(["B","C","D"]);C.add(M);T(["A","B","C","D"])});it("should sort based on the sortProperty",function(){C.setGrouper({property:"group",sortProperty:"groupOrder"});T(["B","D","A","C"])});it("should sort based on the sorterFn",function(){C.setGrouper({property:"group",sorterFn:function(V,U){V=V.groupOrder;U=U.groupOrder;if(V===U){return 0}return V<U?1:-1}});T(["C","A","D","B"])})});describe("inside the groups",function(){it("should sort the items in the collection by group",function(){C=new Ext.util.Collection();C.add(D,H,K,O);R("group","ASC");S([O,K,H,D])});it("should sort the groups according to the group direction",function(){C=new Ext.util.Collection();C.add(O,K,H,D);R("group","DESC");S([D,H,K,O])});it("should use the natural order inside the groups",function(){C=new Ext.util.Collection();C.add(I,J,K,M,N,O);R();S([M,N,O,I,J,K]);var T=C.getGroups();S([M,N,O],T.get("A"));S([I,J,K],T.get("B"))});it("should insert the record into the correct collection position",function(){C=new Ext.util.Collection();C.add({id:1,name:"Abe"},{id:2,name:"Tommy"});var T={id:3,name:"Nige"};R("name");C.add(T);expect(C.indexOf(T)).toBe(1)})});describe("with sorters",function(){it("should sort the collection by grouper first",function(){Q();R();S([N,M,O,I,K,J,H,G,F,D])});it("should sort the new groups by the sorter",function(){Q();R();var T=C.getGroups();S([N,M,O],T.get("A"));S([I,K,J],T.get("B"));S([H,G,F],T.get("C"));S([D],T.get("D"))});it("should sort existing groups by the sorter",function(){R();Q();var T=C.getGroups();S([N,M,O],T.get("A"));S([I,K,J],T.get("B"));S([H,G,F],T.get("C"));S([D],T.get("D"))});it("should sort by the sorter after the groups have been cleared",function(){Q();R();L();S([N,I,H,D,M,K,G,O,J,F])})})});describe("filters",function(){it("should respect existing filters while grouping",function(){P();R();var T=C.getGroups(),U=T.get("A"),S=T.get("B"),W=T.get("C"),V=T.get("D");expect(U.length).toBe(1);expect(U.first()).toBe(N);expect(S.length).toBe(2);expect(S.first()).toBe(K);expect(S.last()).toBe(I);expect(W.length).toBe(1);expect(W.first()).toBe(G);expect(V.length).toBe(1);expect(V.first()).toBe(D)});it("should filter existing groups",function(){R();P();var T=C.getGroups(),U=T.get("A"),S=T.get("B"),W=T.get("C"),V=T.get("D");expect(U.length).toBe(1);expect(U.first()).toBe(N);expect(S.length).toBe(2);expect(S.first()).toBe(K);expect(S.last()).toBe(I);expect(W.length).toBe(1);expect(W.first()).toBe(G);expect(V.length).toBe(1);expect(V.first()).toBe(D)});it("should update groups when filters are cleared",function(){P();R();C.getFilters().removeAll();var S=C.getGroups();expect(S.get("A").length).toBe(3);expect(S.get("B").length).toBe(3);expect(S.get("C").length).toBe(3);expect(S.get("D").length).toBe(1)});it("should remove groups when required",function(){R();C.getFilters().add({filterFn:function(T){return T.name==="Item0"}});var S=C.getGroups();expect(S.get("A").length).toBe(1);expect(S.get("B")).toBeUndefined();expect(S.get("C")).toBeUndefined();expect(S.get("D")).toBeUndefined()});it("should add groups when required",function(){R();var T=C.getFilters();T.add({filterFn:function(U){return Ext.Array.indexOf(["Item0","Item9"],U.name)>-1}},{filterFn:function(U){return U.name==="Item0"}});var S=C.getGroups();expect(S.get("A").length).toBe(1);expect(S.get("D")).toBeUndefined();T.remove(T.last());S=C.getGroups();expect(S.get("A").length).toBe(1);expect(S.get("D").length).toBe(1)})});describe("aggregation",function(){describe("first",function(){it("should return the first item in each group",function(){R();expect(C.first(true)).toEqual({A:O,B:K,C:H,D:D})});it("should ignore the group paramter if not grouped",function(){expect(C.first(true)).toBe(O)})});describe("last",function(){it("should return the last item in each group",function(){R();expect(C.last(true)).toEqual({A:M,B:I,C:F,D:D})});it("should ignore the group paramter if not grouped",function(){expect(C.last(true)).toBe(D)})});describe("average",function(){it("should get the average for each group",function(){R();expect(C.averageByGroup("age")).toEqual({A:20,B:50,C:80,D:100})})});describe("bounds",function(){it("should return the bounds for each group",function(){R();expect(C.boundsByGroup("age")).toEqual({A:[10,30],B:[40,60],C:[70,90],D:[100,100]})})});describe("count",function(){it("should return the number of items in each group",function(){R();expect(C.countByGroup()).toEqual({A:3,B:3,C:3,D:1})})});describe("extremes",function(){it("should return the extremes for each group",function(){R();expect(C.extremesByGroup("age")).toEqual({A:[O,N],B:[I,K],C:[G,F],D:[D,D]})})});describe("max",function(){it("should return the max for each group",function(){R();expect(C.maxByGroup("age")).toEqual({A:30,B:60,C:90,D:100})})});describe("maxItem",function(){it("should return the maxItem for each group",function(){R();expect(C.maxItemByGroup("age")).toEqual({A:N,B:K,C:F,D:D})})});describe("min",function(){it("should return the min for each group",function(){R();expect(C.minByGroup("age")).toEqual({A:10,B:40,C:70,D:100})})});describe("minItem",function(){it("should return the minItem for each group",function(){R();expect(C.minItemByGroup("age")).toEqual({A:O,B:I,C:G,D:D})})});describe("sum",function(){it("should return the sum for each group",function(){R();expect(C.sumByGroup("age")).toEqual({A:60,B:150,C:240,D:100})})});describe("with a custom aggregator",function(){var T=function(W,V){var Y=0,U=V.length,X;for(X=0;X<U;++X){Y+=(V[X]*2)}S=this;return Y},S;it("should call the custom aggregator",function(){R();expect(C.aggregateByGroup("age",T)).toEqual({A:120,B:300,C:480,D:200})});it("should use the passed scope",function(){R();C.aggregateByGroup("age",T,B);expect(S).toBe(B)})})})});describe("sorting",function(){var F={id:1,name:"Ed",code:"C",modifier:10,firstInitial:"E"},G={id:2,name:"Abe",code:"A",modifier:100,firstInitial:"A"},D={id:3,name:"Edward",code:"B",modifier:5,firstInitial:"E"};function E(H){H.add(F,G,D)}beforeEach(function(){C=new Ext.util.Collection({keyFn:function(H){return H.name}});E(C)});it("should respect the sorters upon insertion at any index",function(){C.sort("code");expect(C.sorted).toBe(true);C.insert(0,{id:4,name:"Nige",code:"D",modifier:75,firstInitial:"N"});expect(C.items[0].code).toBe("A");expect(C.items[1].code).toBe("B");expect(C.items[2].code).toBe("C");expect(C.items[3].code).toBe("D")});it("should clear the sorted flag, and respect insertion point when sorters collection is cleared",function(){C.sort("code");expect(C.items[0].code).toBe("A");expect(C.items[1].code).toBe("B");expect(C.items[2].code).toBe("C");C.getSorters().clear();expect(C.sorted).toBe(false);C.insert(0,{id:4,name:"Nige",code:"D",modifier:75,firstInitial:"N"});expect(C.items[0].code).toBe("D");expect(C.items[1].code).toBe("A");expect(C.items[2].code).toBe("B");expect(C.items[3].code).toBe("C")});it("should sort ASC by default",function(){C.sort("code");expect(C.items[0].code).toBe("A");expect(C.items[1].code).toBe("B");expect(C.items[2].code).toBe("C")});it("should accept a DESC sort",function(){C.sort("code","DESC");expect(C.items[2].code).toBe("A");expect(C.items[1].code).toBe("B");expect(C.items[0].code).toBe("C")});it("should sort with an Ext.util.Sorter",function(){C.sort(new Ext.util.Sorter({sorterFn:function(I,H){return(I.id*I.modifier)-(H.id*H.modifier)}}));expect(C.items[0].code).toBe("C");expect(C.items[1].code).toBe("B");expect(C.items[2].code).toBe("A")});it("should perform a directional sort with an Ext.util.Sorter",function(){C.sort(new Ext.util.Sorter({direction:"DESC",sorterFn:function(I,H){return(I.id*I.modifier)-(H.id*H.modifier)}}));expect(C.items[2].code).toBe("C");expect(C.items[1].code).toBe("B");expect(C.items[0].code).toBe("A")});it("should respect configured sorters",function(){var H=0;C=new Ext.util.Collection({sorters:"name"});expect(C.sorted).toBe(true);C.on("sort",function(){++H});E(C);expect(H).toBe(0);expect(C.length).toBe(3);expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Edward");expect(C.getByKey(G.id)).toBe(G);expect(C.getByKey(F.id)).toBe(F);expect(C.getByKey(D.id)).toBe(D)});it("should merge new items not resort",function(){var I=[],H=0;C=new Ext.util.Collection({sorters:"name"});expect(C.sorted).toBe(true);C.on({add:function(K,J){I.push(J.items.length+" at "+J.at)},sort:function(){++H}});E(C);expect(I.length).toBe(1);expect(I.join(" / ")).toBe("3 at 0");C.add([{id:10,name:"Nige"},{id:20,name:"Evan"},{id:30,name:"Don"}]);expect(I.length).toBe(3);expect(I.join(" / ")).toBe("3 at 0 / 1 at 1 / 2 at 4");expect(H).toBe(0);expect(C.length).toBe(6);expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Don");expect(C.items[2].name).toBe("Ed");expect(C.items[3].name).toBe("Edward");expect(C.items[4].name).toBe("Evan");expect(C.items[5].name).toBe("Nige")});it("should fire a sort event",function(){var H=0;C.on("sort",function(){++H});C.sort("name");expect(H).toBe(1)});it("should sort when sorters is manipulated",function(){expect(C.sorted).toBe(false);expect(C.items[0].name).toBe("Ed");expect(C.items[1].name).toBe("Abe");expect(C.items[2].name).toBe("Edward");C.getSorters().add("name");expect(C.sorted).toBe(true);expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Edward");C.getSorters().remove("name");expect(C.getSorters().length).toBe(0);expect(C.sorted).toBe(false);expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Edward")});it("should not fire the sort event when removing all the sorters",function(){var H=jasmine.createSpy();C.getSorters().add("name");C.on("sort",H);C.getSorters().remove("name");expect(H).not.toHaveBeenCalled()});it("should sort once per sorter manipulation",function(){var H=0,I=C.getSorters();C.on("sort",function(){++H});expect(C.sorted).toBe(false);expect(C.items[0].name).toBe("Ed");expect(C.items[1].name).toBe("Abe");expect(C.items[2].name).toBe("Edward");I.add({property:"firstInitial",direction:"DESC"},"name");expect(H).toBe(1);expect(I.length).toBe(2);expect(C.sorted).toBe(true);expect(C.items[0].name).toBe("Ed");expect(C.items[1].name).toBe("Edward");expect(C.items[2].name).toBe("Abe");I.remove("firstInitial");expect(H).toBe(2);expect(I.length).toBe(1);expect(C.sorted).toBe(true);expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Edward");I.insert(0,{property:"firstInitial",direction:"DESC"});expect(H).toBe(3);expect(I.length).toBe(2);expect(C.sorted).toBe(true);expect(C.items[0].name).toBe("Ed");expect(C.items[1].name).toBe("Edward");expect(C.items[2].name).toBe("Abe")});it("should enforce multiSortLimit",function(){var H=0,I=C.getSorters();C.on("sort",function(){++H});C.setMultiSortLimit(2);C.sort("name",null,"multi");expect(H).toBe(1);expect(I.length).toBe(1);expect(C.sorted).toBe(true);expect(I.items[0].getProperty()).toBe("name");expect(I.items[0].getDirection()).toBe("ASC");expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Edward");C.sort("firstInitial","DESC","multi");expect(H).toBe(2);expect(I.length).toBe(2);expect(C.sorted).toBe(true);expect(I.items[0].getProperty()).toBe("firstInitial");expect(I.items[0].getDirection()).toBe("DESC");expect(I.items[1].getProperty()).toBe("name");expect(I.items[1].getDirection()).toBe("ASC");expect(C.items[0].name).toBe("Ed");expect(C.items[1].name).toBe("Edward");expect(C.items[2].name).toBe("Abe");C.sort("firstInitial",null,"multi");expect(H).toBe(3);expect(I.length).toBe(2);expect(C.sorted).toBe(true);expect(I.items[0].getProperty()).toBe("firstInitial");expect(I.items[0].getDirection()).toBe("ASC");expect(I.items[1].getProperty()).toBe("name");expect(I.items[1].getDirection()).toBe("ASC");expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Edward");C.sort("firstInitial","ASC","multi");expect(H).toBe(4);expect(I.length).toBe(2);expect(C.sorted).toBe(true);expect(I.items[0].getProperty()).toBe("firstInitial");expect(I.items[0].getDirection()).toBe("ASC");expect(I.items[1].getProperty()).toBe("name");expect(I.items[1].getDirection()).toBe("ASC");expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Edward");C.sort("name",null,"multi");expect(H).toBe(5);expect(I.length).toBe(2);expect(C.sorted).toBe(true);expect(I.items[0].getProperty()).toBe("name");expect(I.items[0].getDirection()).toBe("ASC");expect(I.items[1].getProperty()).toBe("firstInitial");expect(I.items[1].getDirection()).toBe("ASC");expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Edward");C.sort("name",null,"multi");expect(H).toBe(6);expect(I.length).toBe(2);expect(C.sorted).toBe(true);expect(I.items[0].getProperty()).toBe("name");expect(I.items[0].getDirection()).toBe("DESC");expect(I.items[1].getProperty()).toBe("firstInitial");expect(I.items[1].getDirection()).toBe("ASC");expect(C.items[0].name).toBe("Edward");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Abe");C.sort("code",null,"multi");expect(H).toBe(7);expect(I.length).toBe(2);expect(C.sorted).toBe(true);expect(I.items[0].getProperty()).toBe("code");expect(I.items[0].getDirection()).toBe("ASC");expect(I.items[1].getProperty()).toBe("name");expect(I.items[1].getDirection()).toBe("DESC");expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Edward");expect(C.items[2].name).toBe("Ed")});it("should allow sorter collection removal",function(){var H=jasmine.createSpy(),I=C.getSorters();C.on("sort",H);C.sort("name");expect(C._sorters===I).toBe(true);expect(H.callCount).toBe(1);expect(C.sorted).toBe(true);expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Edward");C.setSorters(null);expect(C._sorters===null).toBe(true);expect(C.sorted).toBe(false);expect(H.callCount).toBe(1);expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Edward");C.sort("code");expect(C._sorters!==I).toBe(true);expect(C._sorters!==null).toBe(true);expect(H.callCount).toBe(2);expect(C.sorted).toBe(true);expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Edward");expect(C.items[2].name).toBe("Ed");I.addSort("name");expect(H.callCount).toBe(2);expect(C.sorted).toBe(true);expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Edward");expect(C.items[2].name).toBe("Ed");C.setSorters(I);expect(C._sorters===I).toBe(true);expect(C.sorted).toBe(true);expect(H.callCount).toBe(3);expect(C.items[0].name).toBe("Edward");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Abe");C.sort("name");expect(C._sorters===I).toBe(true);expect(H.callCount).toBe(4);expect(C.sorted).toBe(true);expect(C.items[0].name).toBe("Abe");expect(C.items[1].name).toBe("Ed");expect(C.items[2].name).toBe("Edward")});it("should add items in sorted order when the new items need cloning",function(){C.removeAll();C.sort("name","DESC");C.add([G,F,D]);expect(C.getAt(0)).toBe(D);expect(C.getByKey("Edward")).toBe(D);expect(C.getAt(1)).toBe(F);expect(C.getByKey("Ed")).toBe(F);expect(C.getAt(2)).toBe(G);expect(C.getByKey("Abe")).toBe(G)});it("should be able to get items by key after inserting multiple items into a sorted collection",function(){C.getSorters().add("name");var I={id:4,name:"Brian"},K={id:5,name:"Aaron"},J={id:6,name:"Fred"},H={id:7,name:"Fredward"};C.add(H,I,K,J);expect(C.getByKey("Aaron")).toBe(K);expect(C.getByKey("Brian")).toBe(I);expect(C.getByKey("Fred")).toBe(J);expect(C.getByKey("Fredward")).toBe(H);expect(C.getAt(0)).toBe(K);expect(C.getAt(1)).toBe(G);expect(C.getAt(2)).toBe(I);expect(C.getAt(3)).toBe(F);expect(C.getAt(4)).toBe(D);expect(C.getAt(5)).toBe(J);expect(C.getAt(6)).toBe(H)});it("should be able to remove a sorter instance",function(){var I=new Ext.util.Sorter({property:"name"});var H=C.getSorters();H.add(I);H.remove(I);expect(H.getCount()).toBe(0)})});describe("rootProperty",function(){var F={id:1,data:{name:"Ed",code:"C",modifier:10,firstInitial:"E"}},G={id:2,data:{name:"Abe",code:"A",modifier:100,firstInitial:"A"}},D={id:3,data:{name:"Edward",code:"B",modifier:5,firstInitial:"E"}};function E(H){H.add(D,G,F)}describe("with extraKeys",function(){it("should properly extract keys",function(){C=new Ext.util.Collection({rootProperty:"data",extraKeys:{byName:{property:"name"}}});E(C);expect(C.length).toBe(3);expect(C.byName.get(G.data.name)).toBe(G);expect(C.byName.get(F.data.name)).toBe(F);expect(C.byName.get(D.data.name)).toBe(D);C.clear();expect(C.byName.get(G.data.name)).toBe(null)})});describe("with configured sorters",function(){it("should use the rootProperty",function(){C=new Ext.util.Collection({rootProperty:"data",sorters:"name"});E(C);expect(C.length).toBe(3);expect(C.items[0]).toBe(G);expect(C.items[1]).toBe(F);expect(C.items[2]).toBe(D)})});describe("with dynamic sorters",function(){it("should use the rootProperty",function(){C=new Ext.util.Collection({rootProperty:"data"});E(C);C.sort("name");expect(C.length).toBe(3);expect(C.items[0]).toBe(G);expect(C.items[1]).toBe(F);expect(C.items[2]).toBe(D)})});describe("with configured filters",function(){it("should use the rootProperty",function(){C=new Ext.util.Collection({rootProperty:"data",filters:{property:"name",value:"E"}});E(C);expect(C.length).toBe(2);expect(C.items[0]).toBe(D);expect(C.items[1]).toBe(F)})});describe("with dynamic filters",function(){it("should use the rootProperty",function(){C=new Ext.util.Collection({rootProperty:"data"});E(C);C.setFilters({property:"name",value:"E"});expect(C.length).toBe(2);expect(C.items[0]).toBe(D);expect(C.items[1]).toBe(F)})});describe("with configured filters and sorters",function(){it("should use the rootProperty",function(){C=new Ext.util.Collection({rootProperty:"data",filters:{property:"name",value:"E"},sorters:"name"});E(C);expect(C.length).toBe(2);expect(C.items[0]).toBe(F);expect(C.items[1]).toBe(D)})});describe("with dynamic filters and sorters",function(){it("should use the rootProperty",function(){C=new Ext.util.Collection({rootProperty:"data"});E(C);C.setFilters({property:"name",value:"E"});C.sort("name");expect(C.length).toBe(2);expect(C.items[0]).toBe(F);expect(C.items[1]).toBe(D)})})});describe("extraKeys",function(){var N,M,L,K,J,I,G,F,E,D,H;beforeEach(function(){N={id:0,name:"abba",uid:"123",foo:12};M={id:1,name:"aaa",uid:"234",foo:12};L={id:2,name:"bad",uid:"345",foo:34};K={id:3,name:"ccc",uid:"456",foo:34};J={id:4,name:"abc",uid:"678",foo:24};I={id:5,name:"bcd",uid:"789",foo:67};G={id:6,name:"cde",uid:"890",foo:78};F={id:7,name:"xyz",uid:"012",foo:34};E={id:8,name:"ddd",uid:"246",foo:34};D={id:9,name:"dad",uid:"468",foo:24};H={id:10,name:"dood",uid:"680",foo:24};C=new Ext.util.Collection({extraKeys:{byUid:"uid",byFoo:{property:"foo",unique:false}}});C.add(N,M,L,K,J,I,G,F,E,D,H)});it("should add items and track unique extraKeys",function(){expect(C.length).toBe(11);expect(C.byUid.get(N.uid)).toBe(N);expect(C.byUid.get(M.uid)).toBe(M);expect(C.byUid.get(L.uid)).toBe(L);expect(C.byUid.get(K.uid)).toBe(K);expect(C.byUid.get(J.uid)).toBe(J);expect(C.byUid.get(I.uid)).toBe(I);expect(C.byUid.get(G.uid)).toBe(G);expect(C.byUid.get(F.uid)).toBe(F);expect(C.byUid.get(E.uid)).toBe(E);expect(C.byUid.get(D.uid)).toBe(D);expect(C.byUid.get(H.uid)).toBe(H)});it("should update items on itemChanged",function(){expect(C.length).toBe(11);expect(C.byUid.get(N.uid)).toBe(N);expect(C.byUid.get(M.uid)).toBe(M);expect(C.byUid.get(L.uid)).toBe(L);expect(C.byUid.get(K.uid)).toBe(K);expect(C.byUid.get(J.uid)).toBe(J);expect(C.byUid.get(I.uid)).toBe(I);expect(C.byUid.get(G.uid)).toBe(G);expect(C.byUid.get(F.uid)).toBe(F);expect(C.byUid.get(E.uid)).toBe(E);expect(C.byUid.get(D.uid)).toBe(D);expect(C.byUid.get(H.uid)).toBe(H);N.uid+="a";C.itemChanged(N);expect(C.byUid.get(N.uid)).toBe(N)});it("should add items and track non-unique extraKeys",function(){var P=C.byFoo.get(12),O=C.byFoo.get(24),Q=C.byFoo.get(34);expect(P.length).toBe(2);expect(P[0]).toBe(N);expect(P[1]).toBe(M);expect(O.length).toBe(3);expect(O[0]).toBe(J);expect(O[1]).toBe(D);expect(O[2]).toBe(H);expect(Q.length).toBe(4);expect(Q[0]).toBe(L);expect(Q[1]).toBe(K);expect(Q[2]).toBe(F);expect(Q[3]).toBe(E);expect(C.byFoo.get(I.foo)).toBe(I);expect(C.byFoo.get(G.foo)).toBe(G)});it("should iterate all indices of non-unique extraKeys",function(){var O;O=C.byFoo.indexOf(34);expect(O).toBe(2);O=C.byFoo.indexOf(34,O);expect(O).toBe(3);O=C.byFoo.indexOf(34,O);expect(O).toBe(7);O=C.byFoo.indexOf(34,O);expect(O).toBe(8);O=C.byFoo.indexOf(34,O);expect(O).toBe(-1)});it("should iterate one index of unique extraKeys",function(){var O;O=C.byFoo.indexOf(I.foo);expect(O).toBe(5);O=C.byFoo.indexOf(I.foo,O);expect(O).toBe(-1)});it("should return -1 from indexOf if not found",function(){var O;O=C.byFoo.indexOf(1234);expect(O).toBe(-1)});it("should reflect filter state in unique extraKeys",function(){var O=C.getFilters();expect(C.length).toBe(11);expect(O.length).toBe(0);expect(C.filtered).toBe(false);expect(C.byUid.get(N.uid)).toBe(N);expect(C.byUid.get(M.uid)).toBe(M);expect(C.byUid.get(L.uid)).toBe(L);expect(C.byUid.get(K.uid)).toBe(K);expect(C.byUid.get(J.uid)).toBe(J);expect(C.byUid.get(I.uid)).toBe(I);expect(C.byUid.get(G.uid)).toBe(G);expect(C.byUid.get(F.uid)).toBe(F);expect(C.byUid.get(E.uid)).toBe(E);expect(C.byUid.get(D.uid)).toBe(D);expect(C.byUid.get(H.uid)).toBe(H);function P(Q){return Q.id%2===0}O.add(P);expect(O.length).toBe(1);expect(C.filtered).toBe(true);expect(C.length).toBe(6);expect(C.items[0]).toBe(N);expect(C.items[1]).toBe(L);expect(C.items[2]).toBe(J);expect(C.items[3]).toBe(G);expect(C.items[4]).toBe(E);expect(C.items[5]).toBe(H);expect(C.byUid.get(N.uid)).toBe(N);expect(C.byUid.get(M.uid)).toBe(null);expect(C.byUid.get(L.uid)).toBe(L);expect(C.byUid.get(K.uid)).toBe(null);expect(C.byUid.get(J.uid)).toBe(J);expect(C.byUid.get(I.uid)).toBe(null);expect(C.byUid.get(G.uid)).toBe(G);expect(C.byUid.get(F.uid)).toBe(null);expect(C.byUid.get(E.uid)).toBe(E);expect(C.byUid.get(D.uid)).toBe(null);expect(C.byUid.get(H.uid)).toBe(H);O.remove(P);expect(O.length).toBe(0);expect(C.filtered).toBe(false);expect(C.length).toBe(11);expect(C.byUid.get(N.uid)).toBe(N);expect(C.byUid.get(M.uid)).toBe(M);expect(C.byUid.get(L.uid)).toBe(L);expect(C.byUid.get(K.uid)).toBe(K);expect(C.byUid.get(J.uid)).toBe(J);expect(C.byUid.get(I.uid)).toBe(I);expect(C.byUid.get(G.uid)).toBe(G);expect(C.byUid.get(F.uid)).toBe(F);expect(C.byUid.get(E.uid)).toBe(E);expect(C.byUid.get(D.uid)).toBe(D);expect(C.byUid.get(H.uid)).toBe(H)});it("should reflect filter state in non-unique extraKeys",function(){var O=C.getFilters();expect(C.length).toBe(11);expect(O.length).toBe(0);expect(C.filtered).toBe(false);var R=C.byFoo.get(12),Q=C.byFoo.get(24),S=C.byFoo.get(34);expect(R.length).toBe(2);expect(R[0]).toBe(N);expect(R[1]).toBe(M);expect(Q.length).toBe(3);expect(Q[0]).toBe(J);expect(Q[1]).toBe(D);expect(Q[2]).toBe(H);expect(S.length).toBe(4);expect(S[0]).toBe(L);expect(S[1]).toBe(K);expect(S[2]).toBe(F);expect(S[3]).toBe(E);expect(C.byFoo.get(I.foo)).toBe(I);expect(C.byFoo.get(G.foo)).toBe(G);function P(T){return T.id%2===0}O.add(P);expect(O.length).toBe(1);expect(C.filtered).toBe(true);expect(C.length).toBe(6);expect(C.items[0]).toBe(N);expect(C.items[1]).toBe(L);expect(C.items[2]).toBe(J);expect(C.items[3]).toBe(G);expect(C.items[4]).toBe(E);expect(C.items[5]).toBe(H);R=C.byFoo.get(12);Q=C.byFoo.get(24);S=C.byFoo.get(34);expect(R).toBe(N);expect(Q.length).toBe(2);expect(Q[0]).toBe(J);expect(Q[1]).toBe(H);expect(S.length).toBe(2);expect(S[0]).toBe(L);expect(S[1]).toBe(E);expect(C.byFoo.get(I.foo)).toBe(null);expect(C.byFoo.get(G.foo)).toBe(G);O.remove(P);expect(O.length).toBe(0);expect(C.filtered).toBe(false);expect(C.length).toBe(11);R=C.byFoo.get(12);Q=C.byFoo.get(24);S=C.byFoo.get(34);expect(R.length).toBe(2);expect(R[0]).toBe(N);expect(R[1]).toBe(M);expect(Q.length).toBe(3);expect(Q[0]).toBe(J);expect(Q[1]).toBe(D);expect(Q[2]).toBe(H);expect(S.length).toBe(4);expect(S[0]).toBe(L);expect(S[1]).toBe(K);expect(S[2]).toBe(F);expect(S[3]).toBe(E);expect(C.byFoo.get(I.foo)).toBe(I);expect(C.byFoo.get(G.foo)).toBe(G)})});describe("aggregation",function(){describe("simple objects",function(){var G={id:0,amount:40},F={id:1,amount:20},E={id:2,amount:10},D={id:3,amount:30};beforeEach(function(){C=new Ext.util.Collection();C.add(G,F,E,D)});describe("bounds",function(){it("should operate on all items",function(){expect(C.bounds("amount")).toEqual([10,40])});it("should support a start index",function(){expect(C.bounds("amount",2)).toEqual([10,30])});it("should support a range",function(){expect(C.bounds("amount",0,2)).toEqual([20,40])})});describe("count",function(){it("should return the count",function(){expect(C.count()).toBe(4)})});describe("extremes",function(){it("should operate on all items",function(){var H=C.extremes("amount");expect(H[0]).toBe(E);expect(H[1]).toBe(G)});it("should support a start index",function(){var H=C.extremes("amount",2);expect(H[0]).toBe(E);expect(H[1]).toBe(D)});it("should support a range",function(){var H=C.extremes("amount",0,2);expect(H[0]).toBe(F);expect(H[1]).toBe(G)})});describe("max",function(){it("should operate on all items",function(){expect(C.max("amount")).toBe(40)});it("should support a start index",function(){expect(C.max("amount",2)).toBe(30)});it("should support a range",function(){expect(C.max("amount",1,3)).toBe(20)})});describe("maxItem",function(){it("should operate on all items",function(){expect(C.maxItem("amount")).toBe(G)});it("should support a start index",function(){expect(C.maxItem("amount",2)).toBe(D)});it("should support a range",function(){expect(C.maxItem("amount",1,3)).toBe(F)})});describe("min",function(){it("should operate on all items",function(){expect(C.min("amount")).toBe(10)});it("should support a start index",function(){expect(C.min("amount",2)).toBe(10)});it("should support a range",function(){expect(C.min("amount",0,2)).toBe(20)})});describe("minItem",function(){it("should operate on all items",function(){expect(C.minItem("amount")).toBe(E)});it("should support a start index",function(){expect(C.minItem("amount",2)).toBe(E)});it("should support a range",function(){expect(C.minItem("amount",0,2)).toBe(F)})});describe("sum",function(){it("should operate on all items",function(){expect(C.sum("amount")).toBe(100)});it("should support a start index",function(){expect(C.sum("amount",2)).toBe(40)});it("should support a range",function(){expect(C.sum("amount",1,3)).toBe(30)})})});describe("complex objects",function(){var G={id:0,data:{amount:40}},F={id:1,data:{amount:20}},E={id:2,data:{amount:10}},D={id:3,data:{amount:30}};beforeEach(function(){C=new Ext.util.Collection({rootProperty:"data"});C.add(G,F,E,D)});describe("bounds",function(){it("should operate on all items",function(){expect(C.bounds("amount")).toEqual([10,40])});it("should support a start index",function(){expect(C.bounds("amount",2)).toEqual([10,30])});it("should support a range",function(){expect(C.bounds("amount",0,2)).toEqual([20,40])})});describe("extremes",function(){it("should operate on all items",function(){var H=C.extremes("amount");expect(H[0]).toBe(E);expect(H[1]).toBe(G)});it("should support a start index",function(){var H=C.extremes("amount",2);expect(H[0]).toBe(E);expect(H[1]).toBe(D)});it("should support a range",function(){var H=C.extremes("amount",0,2);expect(H[0]).toBe(F);expect(H[1]).toBe(G)})});describe("max",function(){it("should operate on all items",function(){expect(C.max("amount")).toBe(40)});it("should support a start index",function(){expect(C.max("amount",2)).toBe(30)});it("should support a range",function(){expect(C.max("amount",1,3)).toBe(20)})});describe("maxItem",function(){it("should operate on all items",function(){expect(C.maxItem("amount")).toBe(G)});it("should support a start index",function(){expect(C.maxItem("amount",2)).toBe(D)});it("should support a range",function(){expect(C.maxItem("amount",1,3)).toBe(F)})});describe("min",function(){it("should operate on all items",function(){expect(C.min("amount")).toBe(10)});it("should support a start index",function(){expect(C.min("amount",2)).toBe(10)});it("should support a range",function(){expect(C.min("amount",0,2)).toBe(20)})});describe("minItem",function(){it("should operate on all items",function(){expect(C.minItem("amount")).toBe(E)});it("should support a start index",function(){expect(C.minItem("amount",2)).toBe(E)});it("should support a range",function(){expect(C.minItem("amount",0,2)).toBe(F)})});describe("sum",function(){it("should operate on all items",function(){expect(C.sum("amount")).toBe(100)});it("should support a start index",function(){expect(C.sum("amount",2)).toBe(40)});it("should support a range",function(){expect(C.sum("amount",1,3)).toBe(30)})})})});describe("itemChanged",function(){var M={add:0,beforeitemchange:0,beginupdate:0,endupdate:0,itemchange:0,filtereditemchange:0,refresh:0,remove:0,sort:0,updatekey:0};var D,F,L;var I,E,G,K,J;function H(){var N={};D=[];F=[];Ext.Object.each(M,function(O){M[O]=0;N[O]=function(){++M[O];L=Ext.Array.slice(arguments,0);L[1]=Ext.apply({},L[1]);D.push(L);F.push(O)}});return N}beforeEach(function(){I={id:1,name:"Don",foo:10};E={id:2,name:"Evan",foo:100};G={id:3,name:"Nige",foo:50};K={id:4,name:"Phil",foo:30};J={id:5,name:"Kevin",foo:30}});describe("unsorted and unfiltered",function(){beforeEach(function(){C=new Ext.util.Collection({listeners:H()});C.add(I,E,G);H()});it("should not fire add, remove or updatekey when not changed",function(){I.name="Donald";C.itemChanged(I);expect(F.join(",")).toBe("beginupdate,beforeitemchange,itemchange,endupdate");var O=D[1][1],N=D[2][1];expect(O).toEqual(N);expect(O.item).toBe(I);expect(O.filterChanged).toBe(false);expect(O.keyChanged).toBe(false);expect(O.indexChanged).toBe(false);expect(O.modified).toBe(undefined);expect(O.filtered).toBe(false);expect(O.newIndex).toBe(undefined);expect(O.oldIndex).toBe(undefined);expect(O.oldKey).toBe(undefined);expect(O.wasFiltered).toBe(false)});it("should fire updatekey and not fire add or remove",function(){var P=I.id;I.name="Donald";I.id=10;C.itemChanged(I,null,P);expect(F.join(",")).toBe("beginupdate,beforeitemchange,updatekey,itemchange,endupdate");var O=D[1][1],N=D[3][1];expect(O).toEqual(N);expect(O.item).toBe(I);expect(O.filterChanged).toBe(false);expect(O.keyChanged).toBe(true);expect(O.indexChanged).toBe(false);expect(O.modified).toBe(undefined);expect(O.filtered).toBe(false);expect(O.newIndex).toBe(undefined);expect(O.oldIndex).toBe(undefined);expect(O.oldKey).toBe(P);expect(O.wasFiltered).toBe(false)})});describe("sorted and unfiltered",function(){beforeEach(function(){C=new Ext.util.Collection({listeners:H(),sorters:"name"});C.add(I,G,E,K,J);H()});it("should fire add and remove not updatekey",function(){I.name="Wayne";C.itemChanged(I);expect(F.join(",")).toBe("beginupdate,beforeitemchange,remove,add,itemchange,endupdate");var N=D[1][1];expect(N.item).toBe(I);expect(N.filterChanged).toBe(false);expect(N.keyChanged).toBe(false);expect(N.indexChanged).toBe(true);expect(N.modified).toBe(undefined);expect(N.filtered).toBe(false);expect(N.newIndex).toBe(5);expect(N.oldIndex).toBe(0);expect(N.oldKey).toBe(undefined);expect(N.wasFiltered).toBe(false);expect(C.items).toEqual([E,J,G,K,I])});it("should fire updatekey and not fire add or remove",function(){var P=I.id;I.name="Donald";I.id=10;C.itemChanged(I,null,P);expect(F.join(",")).toBe("beginupdate,beforeitemchange,updatekey,itemchange,endupdate");var O=D[1][1],N=D[3][1];expect(O).toEqual(N);expect(O.item).toBe(I);expect(O.filterChanged).toBe(false);expect(O.keyChanged).toBe(true);expect(O.indexChanged).toBe(false);expect(O.modified).toBe(undefined);expect(O.filtered).toBe(false);expect(O.newIndex).toBe(undefined);expect(O.oldIndex).toBe(undefined);expect(O.oldKey).toBe(P);expect(O.wasFiltered).toBe(false)});it("should order correctly after a sort field change moving to last position",function(){var O;I.name="Zaphod";C.on({add:function(Q,R){O=R.at},single:true});C.itemChanged(I);expect(F.join(",")).toBe("beginupdate,beforeitemchange,remove,add,itemchange,endupdate");var P=D[1][1],N=D[4][1];expect(P.item).toBe(I);expect(P.filterChanged).toBe(false);expect(P.keyChanged).toBe(false);expect(P.indexChanged).toBe(true);expect(P.modified).toBe(undefined);expect(P.filtered).toBe(false);expect(P.newIndex).toBe(5);expect(O).toBe(4);expect(P.oldIndex).toBe(0);expect(P.oldKey).toBe(undefined);expect(P.wasFiltered).toBe(false);expect(N.newIndex).toBe(4);expect(C.items).toEqual([E,J,G,K,I])});it("should order correctly after a sort field change moving to penultimate position",function(){var O;I.name="Owen";C.on({add:function(Q,R){O=R.at},single:true});C.itemChanged(I);expect(F.join(",")).toBe("beginupdate,beforeitemchange,remove,add,itemchange,endupdate");var P=D[1][1],N=D[4][1];expect(P.item).toBe(I);expect(P.filterChanged).toBe(false);expect(P.keyChanged).toBe(false);expect(P.indexChanged).toBe(true);expect(P.modified).toBe(undefined);expect(P.filtered).toBe(false);expect(P.newIndex).toBe(4);expect(O).toBe(3);expect(P.oldIndex).toBe(0);expect(P.oldKey).toBe(undefined);expect(P.wasFiltered).toBe(false);expect(N.newIndex).toBe(3);expect(C.items).toEqual([E,J,G,I,K])});it("should order correctly after a sort field change moving to first position",function(){var O;E.name="Aaron";C.on({add:function(Q,R){O=R.at},single:true});C.itemChanged(E);expect(F.join(",")).toBe("beginupdate,beforeitemchange,remove,add,itemchange,endupdate");var P=D[1][1],N=D[4][1];expect(P.item).toBe(E);expect(P.filterChanged).toBe(false);expect(P.keyChanged).toBe(false);expect(P.indexChanged).toBe(true);expect(P.modified).toBe(undefined);expect(P.filtered).toBe(false);expect(P.newIndex).toBe(0);expect(O).toBe(0);expect(P.oldIndex).toBe(1);expect(P.oldKey).toBe(undefined);expect(P.wasFiltered).toBe(false);expect(N.oldIndex).toBe(2);expect(C.items).toEqual([E,I,J,G,K])});it("should order correctly after a sort field change moving to second position",function(){var O;K.name="Edgar";C.on({add:function(Q,R){O=R.at},single:true});C.itemChanged(K);expect(F.join(",")).toBe("beginupdate,beforeitemchange,remove,add,itemchange,endupdate");var P=D[1][1],N=D[4][1];expect(P.item).toBe(K);expect(P.filterChanged).toBe(false);expect(P.keyChanged).toBe(false);expect(P.indexChanged).toBe(true);expect(P.modified).toBe(undefined);expect(P.filtered).toBe(false);expect(P.newIndex).toBe(1);expect(O).toBe(1);expect(P.oldIndex).toBe(4);expect(P.oldKey).toBe(undefined);expect(P.wasFiltered).toBe(false);expect(N.oldIndex).toBe(5);expect(C.items).toEqual([I,K,E,J,G])});it("should return the correct index when asking for an index during the remove",function(){C.on("remove",function(){C.indexOf(K)});I.name="ZZZ";C.itemChanged(I);expect(C.indexOf(I)).toBe(4)})});describe("unsorted and filtered",function(){beforeEach(function(){C=new Ext.util.Collection({listeners:H(),filters:{property:"foo",value:50,operator:"<="}});C.add(I,G,E);H()});it("should remove item once filter applies",function(){expect(C.length).toBe(2);expect(C.items[0]).toBe(I);expect(C.items[1]).toBe(G);I.foo=75;C.itemChanged(I);expect(C.length).toBe(1);expect(C.items[0]).toBe(G);expect(F.join(",")).toBe("beginupdate,beforeitemchange,remove,filtereditemchange,endupdate");var O=D[1][1],N=D[3][1];expect(O).toEqual(N);expect(O.item).toBe(I);expect(O.filterChanged).toBe(true);expect(O.keyChanged).toBe(false);expect(O.indexChanged).toBe(false);expect(O.modified).toBe(undefined);expect(O.filtered).toBe(true);expect(O.newIndex).toBe(-1);expect(O.oldIndex).toBe(0);expect(O.oldKey).toBe(undefined);expect(O.wasFiltered).toBe(false)});it("should restore item once filter no longer applies",function(){E.foo=5;C.itemChanged(E);expect(C.length).toBe(3);expect(C.items[0]).toBe(I);expect(C.items[1]).toBe(G);expect(C.items[2]).toBe(E);expect(F.join(",")).toBe("beginupdate,beforeitemchange,add,itemchange,endupdate");var O=D[1][1],N=D[3][1];expect(O).toEqual(N);expect(O.item).toBe(E);expect(O.filterChanged).toBe(true);expect(O.keyChanged).toBe(false);expect(O.indexChanged).toBe(false);expect(O.modified).toBe(undefined);expect(O.filtered).toBe(false);expect(O.newIndex).toBe(2);expect(O.oldIndex).toBe(-1);expect(O.oldKey).toBe(undefined);expect(O.wasFiltered).toBe(true)});it("should pass along the modified fields",function(){var N=jasmine.createSpy();C.on("beforeitemchange",N);C.itemChanged(E,["foo","bar"]);expect(N.mostRecentCall.args[1].modified).toEqual(["foo","bar"])})});describe("sorted and filtered",function(){beforeEach(function(){C=new Ext.util.Collection({listeners:H(),filters:{property:"foo",value:50,operator:"<="},sorters:{property:"name",direction:"DESC"}});C.add(I,G,E);H()});it("should remove item once filter applies",function(){expect(C.length).toBe(2);expect(C.items[0]).toBe(G);expect(C.items[1]).toBe(I);I.foo=75;C.itemChanged(I);expect(C.length).toBe(1);expect(C.items[0]).toBe(G);expect(F.join(",")).toBe("beginupdate,beforeitemchange,remove,filtereditemchange,endupdate");var O=D[1][1],N=D[3][1];expect(O).toEqual(N);expect(O.item).toBe(I);expect(O.filterChanged).toBe(true);expect(O.keyChanged).toBe(false);expect(O.indexChanged).toBe(false);expect(O.modified).toBe(undefined);expect(O.filtered).toBe(true);expect(O.newIndex).toBe(-1);expect(O.oldIndex).toBe(1);expect(O.oldKey).toBe(undefined);expect(O.wasFiltered).toBe(false)});it("should restore item once filter no longer applies",function(){E.foo=5;C.itemChanged(E);expect(C.length).toBe(3);expect(C.items[0]).toBe(G);expect(C.items[1]).toBe(E);expect(C.items[2]).toBe(I);expect(F.join(",")).toBe("beginupdate,beforeitemchange,add,itemchange,endupdate");var O=D[1][1],N=D[3][1];expect(O).toEqual(N);expect(O.item).toBe(E);expect(O.filterChanged).toBe(true);expect(O.keyChanged).toBe(false);expect(O.indexChanged).toBe(false);expect(O.modified).toBe(undefined);expect(O.filtered).toBe(false);expect(O.newIndex).toBe(2);expect(O.oldIndex).toBe(-1);expect(O.oldKey).toBe(undefined);expect(O.wasFiltered).toBe(true)});it("should restore item and position once filter no longer applies",function(){E.foo=5;E.name="ZEvan";C.itemChanged(E);expect(C.length).toBe(3);expect(C.items[0]).toBe(E);expect(C.items[1]).toBe(G);expect(C.items[2]).toBe(I);expect(F.join(",")).toBe("beginupdate,beforeitemchange,add,itemchange,endupdate");var O=D[1][1],N=D[3][1];expect(O).toEqual(N);expect(O.item).toBe(E);expect(O.filterChanged).toBe(true);expect(O.keyChanged).toBe(false);expect(O.indexChanged).toBe(false);expect(O.modified).toBe(undefined);expect(O.filtered).toBe(false);expect(O.newIndex).toBe(2);expect(O.oldIndex).toBe(-1);expect(O.oldKey).toBe(undefined);expect(O.wasFiltered).toBe(true)})});describe("with a source",function(){it("should pass along the onCollectionItemChanged to the child",function(){var P=new Ext.util.Collection(),O=jasmine.createSpy(),N;P.add(I);C=new Ext.util.Collection({source:P});C.onCollectionItemChange=O;P.itemChanged(I,["name"]);N=O.mostRecentCall.args;expect(N[0]).toBe(P);expect(N[1].modified).toEqual(["name"])})})});describe("collecting",function(){describe("simple objects",function(){beforeEach(function(){C=new Ext.util.Collection();C.add([{id:1,amount:10,name:"Ed"},{id:2,amount:20,name:"Abe"},{id:3,amount:20,name:"Ed"}])});it("should collect the unique properties from each item",function(){var D=C.collect("name");expect(D.length).toBe(2)})});describe("complex objects",function(){beforeEach(function(){C=new Ext.util.Collection();C.add([{id:1,data:{amount:10,name:"Ed"}},{id:2,data:{amount:20,name:"Abe"}},{id:3,data:{amount:20,name:"Ed"}}])});it("should collect the unique properties from each item",function(){var D=C.collect("name","data");expect(D.length).toBe(2)})})});describe("adding a Collection to a Collection",function(){it("Should add a Collection as a single new item",function(){var E=new Ext.util.Collection({keyFn:function(F){return F}}),D=new Ext.util.Collection();E.add("b","c");D.add(E);expect(D.get(E.getId()).indexOf("c")).toBe(1)})});describe("adding duplicate items",function(){it("should overwrite duplicates",function(){var E=new Ext.util.Collection();var D=[];A(E,D,"text");E.add({id:1,text:"foo"},{id:2,text:"bar"},{id:1,text:"bletch"},{id:2,text:"zarg"});expect(D).toEqual(["beginupdate",'add ["bletch","zarg"] at 0 w/keys [1,2]',"endupdate"]);expect(E.getCount()).toBe(2);expect(E.getAt(0).text).toBe("bletch");expect(E.getAt(1).text).toBe("zarg")})});describe("item decoder",function(){it("Should decode new items",function(){var E=Ext.define(null,{isItem:true,config:{id:null},constructor:function(H){this.initConfig(H)}});var F=0;var D=0;var G=new Ext.util.Collection({decoder:function(H){++F;if(!H.isItem){++D;H=new E(H)}return H}});G.add({id:42},new E({id:"abc"}));expect(F).toBe(2);expect(D).toBe(1);expect(G.items[0].isItem).toBe(true);expect(G.items[0].getId()).toBe(42);expect(G.items[1].isItem).toBe(true);expect(G.items[1].getId()).toBe("abc")})})})