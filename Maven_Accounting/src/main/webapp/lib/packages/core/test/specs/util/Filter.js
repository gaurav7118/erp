describe("Ext.util.Filter",function(){var A;describe("construction",function(){var B=function(C){return function(){new Ext.util.Filter(C)}};it("should accept a property and value",function(){expect(B({property:"test",value:"a"})).not.toThrow()});it("should accept a false",function(){expect(B({property:"test",value:false})).not.toThrow()});it("should accept a 0",function(){expect(B({property:"test",value:0})).not.toThrow()});it("should accept a ''",function(){expect(B({property:"test",value:""})).not.toThrow()});it("should accept a filter function",function(){expect(B({filterFn:Ext.emptyFn})).not.toThrow()});it("should require at least a filter function or a property/value combination",function(){expect(B()).toThrow()})});describe("disableOnEmpty",function(){var B;function C(D){B=new Ext.util.Filter({disableOnEmpty:true,property:"foo",value:D})}it("should disable when the value is ''",function(){C("");expect(B.getDisabled()).toBe(true)});it("should disable when the value is null",function(){C(null);expect(B.getDisabled()).toBe(true)})});describe("creating filter functions",function(){var B={name:"Ed"},E={name:"Ted"},C={name:"Abe"},D={name:"Edward"};it("should honor a simple property matcher",function(){A=new Ext.util.Filter({property:"name",value:"Ed"});var F=A.getFilterFn();expect(F(B)).toBe(true);expect(F(D)).toBe(true);expect(F(E)).toBe(false);expect(F(C)).toBe(false)});it("should honor anyMatch",function(){A=new Ext.util.Filter({anyMatch:true,property:"name",value:"Ed"});var F=A.getFilterFn();expect(F(B)).toBe(true);expect(F(D)).toBe(true);expect(F(E)).toBe(true);expect(F(C)).toBe(false)});it("should honor exactMatch",function(){A=new Ext.util.Filter({exactMatch:true,property:"name",value:"Ed"});var F=A.getFilterFn();expect(F(B)).toBe(true);expect(F(D)).toBe(false);expect(F(E)).toBe(false);expect(F(C)).toBe(false)});it("should honor case sensitivity",function(){A=new Ext.util.Filter({caseSensitive:true,property:"name",value:"Ed"});var F=A.getFilterFn();expect(F(B)).toBe(true);expect(F(D)).toBe(true);expect(F(E)).toBe(false)});it("should honor case sensitivity and anyMatch",function(){A=new Ext.util.Filter({caseSensitive:true,anyMatch:true,property:"name",value:"ed"});var F=A.getFilterFn();expect(F(E)).toBe(true);expect(F(B)).toBe(false);expect(F(D)).toBe(false)});it("should honor the root property",function(){var H=[{data:{name:"Ed"}},{data:{name:"Ted"}},{data:{name:"Edward"}},{data:{name:"Abe"}}];var G=new Ext.util.Filter({root:"data",property:"name",value:"Ed"});var F=G.getFilterFn();expect(F(H[0])).toBe(true);expect(F(H[2])).toBe(true);expect(F(H[1])).toBe(false);expect(F(H[3])).toBe(false)})});describe("operators",function(){var C;function D(E){C=new Ext.util.Filter(Ext.apply({property:"value"},E))}function B(G,F,H,E){D(Ext.apply({operator:G,value:H},E));return C.filter({value:F})}afterEach(function(){C=null});describe("<",function(){describe("numbers",function(){it("should match when the candidate is smaller than the value",function(){expect(B("<",7,10)).toBe(true)});it("should not match when the candidate is equal to the value",function(){expect(B("<",10,10)).toBe(false)});it("should not match when the candidate is larger than the value",function(){expect(B("<",100,10)).toBe(false)})});describe("strings",function(){it("should match when the candidate is smaller than the value",function(){expect(B("<","a","f")).toBe(true)});it("should not match when the candidate is equal to the value",function(){expect(B("<","j","j")).toBe(false)});it("should not match when the candidate is larger than the value",function(){expect(B("<","z","q")).toBe(false)})});describe("dates",function(){it("should match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("<",F,E)).toBe(true)});it("should not match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("<",F,E)).toBe(false)});it("should not match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("<",F,E)).toBe(false)});it("should match on the full date",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10);expect(B("<",F,E)).toBe(false)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("<",F,E,{convert:G})).toBe(false)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B("<","7",10)).toBe(true)})})});describe("lt",function(){describe("numbers",function(){it("should match when the candidate is smaller than the value",function(){expect(B("lt",7,10)).toBe(true)});it("should not match when the candidate is equal to the value",function(){expect(B("lt",10,10)).toBe(false)});it("should not match when the candidate is larger than the value",function(){expect(B("lt",100,10)).toBe(false)})});describe("strings",function(){it("should match when the candidate is smaller than the value",function(){expect(B("lt","a","f")).toBe(true)});it("should not match when the candidate is equal to the value",function(){expect(B("lt","j","j")).toBe(false)});it("should not match when the candidate is larger than the value",function(){expect(B("lt","z","q")).toBe(false)})});describe("dates",function(){it("should match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("lt",F,E)).toBe(true)});it("should not match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("lt",F,E)).toBe(false)});it("should not match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("lt",F,E)).toBe(false)});it("should match on the full date",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10);expect(B("lt",F,E)).toBe(false)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("lt",F,E,{convert:G})).toBe(false)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B("lt","7",10)).toBe(true)})})});describe("<=",function(){describe("numbers",function(){it("should match when the candidate is smaller than the value",function(){expect(B("<=",7,10)).toBe(true)});it("should match when the candidate is equal to the value",function(){expect(B("<=",10,10)).toBe(true)});it("should not match when the candidate is larger than the value",function(){expect(B("<=",100,10)).toBe(false)})});describe("strings",function(){it("should match when the candidate is smaller than the value",function(){expect(B("<=","a","f")).toBe(true)});it("should match when the candidate is equal to the value",function(){expect(B("<=","j","j")).toBe(true)});it("should not match when the candidate is larger than the value",function(){expect(B("<=","z","q")).toBe(false)})});describe("dates",function(){it("should match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("<=",F,E)).toBe(true)});it("should match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("<=",F,E)).toBe(true)});it("should not match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("<=",F,E)).toBe(false)});it("should match on the full date",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10);expect(B("<=",F,E)).toBe(false)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("<=",F,E,{convert:G})).toBe(true)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B("<=","7",10)).toBe(true)})})});describe("le",function(){describe("numbers",function(){it("should match when the candidate is smaller than the value",function(){expect(B("le",7,10)).toBe(true)});it("should match when the candidate is equal to the value",function(){expect(B("le",10,10)).toBe(true)});it("should not match when the candidate is larger than the value",function(){expect(B("le",100,10)).toBe(false)})});describe("strings",function(){it("should match when the candidate is smaller than the value",function(){expect(B("le","a","f")).toBe(true)});it("should match when the candidate is equal to the value",function(){expect(B("le","j","j")).toBe(true)});it("should not match when the candidate is larger than the value",function(){expect(B("le","z","q")).toBe(false)})});describe("dates",function(){it("should match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("le",F,E)).toBe(true)});it("should match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("le",F,E)).toBe(true)});it("should not match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("le",F,E)).toBe(false)});it("should match on the full date",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10);expect(B("le",F,E)).toBe(false)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("le",F,E,{convert:G})).toBe(true)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B("le","7",10)).toBe(true)})})});describe("=",function(){describe("numbers",function(){it("should not match when the candidate is smaller than the value",function(){expect(B("=",7,10)).toBe(false)});it("should match when the candidate is equal to the value",function(){expect(B("=",10,10)).toBe(true)});it("should not match when the candidate is larger than the value",function(){expect(B("=",100,10)).toBe(false)})});describe("strings",function(){it("should not match when the candidate is smaller than the value",function(){expect(B("=","a","f")).toBe(false)});it("should match when the candidate is equal to the value",function(){expect(B("=","j","j")).toBe(true)});it("should not match when the candidate is larger than the value",function(){expect(B("=","z","q")).toBe(false)})});describe("dates",function(){it("should not match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("=",F,E)).toBe(false)});it("should match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("=",F,E)).toBe(true)});it("should not match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("=",F,E)).toBe(false)});it("should match on the full date",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12);expect(B("=",F,E)).toBe(false)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("=",F,E,{convert:G})).toBe(true)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B("=","10",10)).toBe(true)})})});describe("eq",function(){describe("numbers",function(){it("should not match when the candidate is smaller than the value",function(){expect(B("eq",7,10)).toBe(false)});it("should match when the candidate is equal to the value",function(){expect(B("eq",10,10)).toBe(true)});it("should not match when the candidate is larger than the value",function(){expect(B("eq",100,10)).toBe(false)})});describe("strings",function(){it("should not match when the candidate is smaller than the value",function(){expect(B("eq","a","f")).toBe(false)});it("should match when the candidate is equal to the value",function(){expect(B("eq","j","j")).toBe(true)});it("should not match when the candidate is larger than the value",function(){expect(B("eq","z","q")).toBe(false)})});describe("dates",function(){it("should not match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("eq",F,E)).toBe(false)});it("should match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("eq",F,E)).toBe(true)});it("should not match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("eq",F,E)).toBe(false)});it("should match on the full date",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12);expect(B("eq",F,E)).toBe(false)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("eq",F,E,{convert:G})).toBe(true)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B("eq","10",10)).toBe(true)})})});describe("===",function(){describe("numbers",function(){it("should not match when the candidate is smaller than the value",function(){expect(B("===",7,10)).toBe(false)});it("should match when the candidate is equal to the value",function(){expect(B("===",10,10)).toBe(true)});it("should not match when the candidate is larger than the value",function(){expect(B("===",100,10)).toBe(false)})});describe("strings",function(){it("should not match when the candidate is smaller than the value",function(){expect(B("===","a","f")).toBe(false)});it("should match when the candidate is equal to the value",function(){expect(B("===","j","j")).toBe(true)});it("should not match when the candidate is larger than the value",function(){expect(B("===","z","q")).toBe(false)})});describe("dates",function(){it("should not match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("===",F,E)).toBe(false)});it("should match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("===",F,E)).toBe(true)});it("should not match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("===",F,E)).toBe(false)});it("should match on the full date",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12);expect(B("===",F,E)).toBe(false)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("===",F,E,{convert:G})).toBe(true)})});describe("value coercion",function(){it("should not coerce the candidate value based on the value",function(){expect(B("===","10",10)).toBe(false)})})});describe(">",function(){describe("numbers",function(){it("should not match when the candidate is smaller than the value",function(){expect(B(">",7,10)).toBe(false)});it("should not match when the candidate is equal to the value",function(){expect(B(">",10,10)).toBe(false)});it("should match when the candidate is larger than the value",function(){expect(B(">",100,10)).toBe(true)})});describe("strings",function(){it("should not match when the candidate is smaller than the value",function(){expect(B(">","a","f")).toBe(false)});it("should not match when the candidate is equal to the value",function(){expect(B(">","j","j")).toBe(false)});it("should match when the candidate is larger than the value",function(){expect(B(">","z","q")).toBe(true)})});describe("dates",function(){it("should not match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B(">",F,E)).toBe(false)});it("should not match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B(">",F,E)).toBe(false)});it("should match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B(">",F,E)).toBe(true)});it("should match on the full date",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12);expect(B(">",F,E)).toBe(false)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B(">",F,E,{convert:G})).toBe(false)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B(">","10",7)).toBe(true)})})});describe("gt",function(){describe("numbers",function(){it("should not match when the candidate is smaller than the value",function(){expect(B("gt",7,10)).toBe(false)});it("should not match when the candidate is equal to the value",function(){expect(B("gt",10,10)).toBe(false)});it("should match when the candidate is larger than the value",function(){expect(B("gt",100,10)).toBe(true)})});describe("strings",function(){it("should not match when the candidate is smaller than the value",function(){expect(B("gt","a","f")).toBe(false)});it("should not match when the candidate is equal to the value",function(){expect(B("gt","j","j")).toBe(false)});it("should match when the candidate is larger than the value",function(){expect(B("gt","z","q")).toBe(true)})});describe("dates",function(){it("should not match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("gt",F,E)).toBe(false)});it("should not match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("gt",F,E)).toBe(false)});it("should match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("gt",F,E)).toBe(true)});it("should match on the full date",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12);expect(B("gt",F,E)).toBe(false)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("gt",F,E,{convert:G})).toBe(false)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B("gt","10",7)).toBe(true)})})});describe(">=",function(){describe("numbers",function(){it("should not match when the candidate is smaller than the value",function(){expect(B(">=",7,10)).toBe(false)});it("should match when the candidate is equal to the value",function(){expect(B(">=",10,10)).toBe(true)});it("should match when the candidate is larger than the value",function(){expect(B(">=",100,10)).toBe(true)})});describe("strings",function(){it("should not match when the candidate is smaller than the value",function(){expect(B(">=","a","f")).toBe(false)});it("should match when the candidate is equal to the value",function(){expect(B(">=","j","j")).toBe(true)});it("should match when the candidate is larger than the value",function(){expect(B(">=","z","q")).toBe(true)})});describe("dates",function(){it("should not match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B(">=",F,E)).toBe(false)});it("should match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B(">=",F,E)).toBe(true)});it("should match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B(">=",F,E)).toBe(true)});it("should match on the full date",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12);expect(B(">=",F,E)).toBe(false)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B(">=",F,E,{convert:G})).toBe(true)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B(">=","10",7)).toBe(true)})})});describe("ge",function(){describe("numbers",function(){it("should not match when the candidate is smaller than the value",function(){expect(B("ge",7,10)).toBe(false)});it("should match when the candidate is equal to the value",function(){expect(B("ge",10,10)).toBe(true)});it("should match when the candidate is larger than the value",function(){expect(B("ge",100,10)).toBe(true)})});describe("strings",function(){it("should not match when the candidate is smaller than the value",function(){expect(B("ge","a","f")).toBe(false)});it("should match when the candidate is equal to the value",function(){expect(B("ge","j","j")).toBe(true)});it("should match when the candidate is larger than the value",function(){expect(B("ge","z","q")).toBe(true)})});describe("dates",function(){it("should not match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("ge",F,E)).toBe(false)});it("should match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("ge",F,E)).toBe(true)});it("should match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("ge",F,E)).toBe(true)});it("should match on the full date",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12);expect(B("ge",F,E)).toBe(false)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("ge",F,E,{convert:G})).toBe(true)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B("ge","10",7)).toBe(true)})})});describe("!=",function(){describe("numbers",function(){it("should match when the candidate is smaller than the value",function(){expect(B("!=",7,10)).toBe(true)});it("should not match when the candidate is equal to the value",function(){expect(B("!=",10,10)).toBe(false)});it("should match when the candidate is larger than the value",function(){expect(B("!=",100,10)).toBe(true)})});describe("strings",function(){it("should match when the candidate is smaller than the value",function(){expect(B("!=","a","f")).toBe(true)});it("should not match when the candidate is equal to the value",function(){expect(B("!=","j","j")).toBe(false)});it("should match when the candidate is larger than the value",function(){expect(B("!=","z","q")).toBe(true)})});describe("dates",function(){it("should match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("!=",F,E)).toBe(true)});it("should not match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("!=",F,E)).toBe(false)});it("should match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("!=",F,E)).toBe(true)});it("should match on the full date",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12);expect(B("!=",F,E)).toBe(true)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("!=",F,E,{convert:G})).toBe(false)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B("!=","10",10)).toBe(false)})})});describe("ne",function(){describe("numbers",function(){it("should match when the candidate is smaller than the value",function(){expect(B("ne",7,10)).toBe(true)});it("should not match when the candidate is equal to the value",function(){expect(B("ne",10,10)).toBe(false)});it("should match when the candidate is larger than the value",function(){expect(B("ne",100,10)).toBe(true)})});describe("strings",function(){it("should match when the candidate is smaller than the value",function(){expect(B("ne","a","f")).toBe(true)});it("should not match when the candidate is equal to the value",function(){expect(B("ne","j","j")).toBe(false)});it("should match when the candidate is larger than the value",function(){expect(B("ne","z","q")).toBe(true)})});describe("dates",function(){it("should match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("ne",F,E)).toBe(true)});it("should not match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("ne",F,E)).toBe(false)});it("should match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("ne",F,E)).toBe(true)});it("should match on the full date",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12);expect(B("ne",F,E)).toBe(true)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("ne",F,E,{convert:G})).toBe(false)})});describe("value coercion",function(){it("should coerce the candidate value based on the value",function(){expect(B("ne","10",10)).toBe(false)})})});describe("!==",function(){describe("numbers",function(){it("should match when the candidate is smaller than the value",function(){expect(B("!==",7,10)).toBe(true)});it("should not match when the candidate is equal to the value",function(){expect(B("!==",10,10)).toBe(false)});it("should match when the candidate is larger than the value",function(){expect(B("!==",100,10)).toBe(true)})});describe("strings",function(){it("should match when the candidate is smaller than the value",function(){expect(B("!==","a","f")).toBe(true)});it("should not match when the candidate is equal to the value",function(){expect(B("!==","j","j")).toBe(false)});it("should match when the candidate is larger than the value",function(){expect(B("!==","z","q")).toBe(true)})});describe("dates",function(){it("should match when the candidate is smaller than the value",function(){var F=new Date(2008,0,1),E=new Date(2010,0,1);expect(B("!==",F,E)).toBe(true)});it("should not match when the candidate is equal to the value",function(){var F=new Date(2010,0,1),E=new Date(2010,0,1);expect(B("!==",F,E)).toBe(false)});it("should match when the candidate is larger than the value",function(){var F=new Date(2012,0,1),E=new Date(2010,0,1);expect(B("!==",F,E)).toBe(true)});it("should match on the full date",function(){var F=new Date(2010,0,1,10),E=new Date(2010,0,1,12);expect(B("!==",F,E)).toBe(true)})});describe("with convert",function(){it("should call the convert fn",function(){var F=new Date(2010,0,1,12),E=new Date(2010,0,1,10),G=function(H){return Ext.Date.clearTime(H,true).getTime()};expect(B("!==",F,E,{convert:G})).toBe(false)})});describe("value coercion",function(){it("should not coerce the candidate value based on the value",function(){expect(B("!==","10",10)).toBe(true)})})});describe("in",function(){it("should match when the candidate exists in the value",function(){expect(B("in",2,[1,2,3,4])).toBe(true)});it("should not match when the candidate does not exist in the value",function(){expect(B("in",5,[1,2,3,4])).toBe(false)});it("should call the convert fn",function(){var E=function(F){return F+1};expect(B("in",0,[1,2,3,4],{convert:E})).toBe(true)})});describe("notin",function(){it("should not match when the candidate exists in the value",function(){expect(B("notin",2,[1,2,3,4])).toBe(false)});it("should match when the candidate does not exist in the value",function(){expect(B("notin",5,[1,2,3,4])).toBe(true)});it("should call the convert fn",function(){var E=function(F){return F+1};expect(B("notin",0,[1,2,3,4],{convert:E})).toBe(false)})});describe("like",function(){it("should match when the candidate matches the value",function(){expect(B("like","foo","foo")).toBe(true)});it("should match when the candidate is at the start of the value ",function(){expect(B("like","food","foo")).toBe(true)});it("should match when the candidate is at the end of the value ",function(){expect(B("like","food","ood")).toBe(true)});it("should match when the candidate is in the middle of the value ",function(){expect(B("like","foobar","oob")).toBe(true)});it("should not match when the candidate does not exist in the value",function(){expect(B("like","foo","bar")).toBe(false)})})})})