describe("Ext.util.LruCache",function(){var B,I={objIdx:1},H={objIdx:2},G={objIdx:3},F={objIdx:4},E={objIdx:5},D={objIdx:6},C={objIdx:7},A={objIdx:8},L={objIdx:9},J={objIdx:10};function K(M){B=new Ext.util.LruCache(M)}describe("Adding",function(){it("should create an empty cache",function(){K();expect(B.length).toBe(0);expect(B.first).toBeNull;expect(B.last).toBeNull();expect(B.getValues()).toEqual([]);expect(B.getKeys()).toEqual([])});it("should contain 1 entry",function(){K();B.add(1,I);expect(B.length).toEqual(1);expect(B.first.value).toBe(I);expect(B.last.value).toBe(I);expect(B.getValues()).toEqual([I]);expect(B.getKeys()).toEqual([1])});it("should contain 2 entries",function(){K();B.add(1,I);B.add(2,H);expect(B.length).toEqual(2);expect(B.first.value).toBe(I);expect(B.last.value).toBe(H);expect(B.getValues()).toEqual([I,H]);expect(B.getKeys()).toEqual([1,2])});it("should be able to add existing keys",function(){K();B.add(1,I);B.add(2,H);B.add(1,G);expect(B.length).toEqual(2);expect(B.first.value).toBe(H);expect(B.last.value).toBe(G);expect(B.getValues()).toEqual([H,G]);expect(B.getKeys()).toEqual([2,1])})});describe("Sort on access",function(){it("should move accessed items to the end",function(){K();B.add(1,I);B.add(2,H);expect(B.getValues()).toEqual([I,H]);expect(B.getKeys()).toEqual([1,2]);B.get(1);expect(B.getValues()).toEqual([H,I]);expect(B.getKeys()).toEqual([2,1])})});describe("Inserting",function(){it("should insert at the requested point",function(){K();B.add(1,I);B.insertBefore(2,H,I);expect(B.getValues()).toEqual([H,I]);expect(B.getKeys()).toEqual([2,1])})});describe("Iterating",function(){it("should iterate in order",function(){var M=[];K();B.add(1,I);B.add(2,H);B.each(function(N,P,O){M.push(N,P)});expect(M).toEqual([1,I,2,H])});it("should iterate in reverse order",function(){var M=[];K();B.add(1,I);B.add(2,H);B.each(function(N,P,O){M.push(N,P)},null,true);expect(M).toEqual([2,H,1,I])})});describe("Removing",function(){it("should remove by key and re-link",function(){K();B.add(1,I);B.add(2,H);B.add(3,G);B.removeAtKey(2);expect(B.getValues()).toEqual([I,G]);expect(B.getKeys()).toEqual([1,3])});it("should remove by value and re-link",function(){K();B.add(1,I);B.add(2,H);B.add(3,G);B.remove(H);expect(B.getValues()).toEqual([I,G]);expect(B.getKeys()).toEqual([1,3])})});describe("Clearing",function(){it("should remove all",function(){K();B.add(1,I);B.add(2,H);B.clear();expect(B.getValues()).toEqual([]);expect(B.getKeys()).toEqual([])})});describe("Purging",function(){it("should only contain the last 5 added",function(){K({maxSize:5});B.add(1,I);B.add(2,H);B.add(3,G);B.add(4,F);B.add(5,E);expect(B.getValues()).toEqual([I,H,G,F,E]);expect(B.getKeys()).toEqual([1,2,3,4,5]);B.add(6,D);expect(B.getValues()).toEqual([H,G,F,E,D]);expect(B.getKeys()).toEqual([2,3,4,5,6]);B.add(7,C);expect(B.getValues()).toEqual([G,F,E,D,C]);expect(B.getKeys()).toEqual([3,4,5,6,7]);B.add(8,A);expect(B.getValues()).toEqual([F,E,D,C,A]);expect(B.getKeys()).toEqual([4,5,6,7,8]);B.add(9,L);expect(B.getValues()).toEqual([E,D,C,A,L]);expect(B.getKeys()).toEqual([5,6,7,8,9]);B.add(10,J);expect(B.getValues()).toEqual([D,C,A,L,J]);expect(B.getKeys()).toEqual([6,7,8,9,10])})})})