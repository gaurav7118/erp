describe("Ext.util.MixedCollection",function(){var A;it("should get the correct count",function(){A=new Ext.util.MixedCollection();A.addAll([{id:1},{id:2}]);expect(A.getCount()).toEqual(2)});describe("adding with separate key",function(){it("should find using a linear search if the key is not found",function(){A=new Ext.util.MixedCollection();var C={id:1,data:"first item"},B={id:2,data:"second item"};A.add("item1Key",C);A.add("item2Key",B);expect(A.indexOf(C)).toBe(0);expect(A.indexOf(B)).toBe(1);A.remove(C);expect(A.indexOf(C)).toBe(-1);expect(A.indexOf(B)).toBe(0)})});describe("constructor",function(){it("should provide a default getKey implementation",function(){A=new Ext.util.MixedCollection();var C={id:1,data:"first item"},B={id:2,data:"second item"};A.add(C);A.add(B);expect(A.get(1)).toEqual(C);expect(A.get(2)).toEqual(B)});it("should allow a custom getKey implementation",function(){A=new Ext.util.MixedCollection(false,function(D){return D.myKey});var C={myKey:"a",data:"first item"},B={myKey:"b",data:"second item"};A.add(C);A.add(B);expect(A.get("a")).toEqual(C);expect(A.get("b")).toEqual(B)})});describe("iterators",function(){var E,F,G,D,C,B;beforeEach(function(){A=new Ext.util.MixedCollection();E=jasmine.createSpy("fn");G=0;D={id:1,name:"first"};C={id:2,name:"second"};B={id:3,name:"third"};A.addAll([D,C,B])});describe("each",function(){it("should call with the correct scope",function(){A.each(function(){F=this},fakeScope);expect(F).toBe(fakeScope)});it("should call the correct number of times",function(){A.each(function(){G++});expect(G).toEqual(3)});it("should be called with each item",function(){A.each(E);expect(E).toHaveBeenCalledWith(D,0,3);expect(E).toHaveBeenCalledWith(C,1,3);expect(E).toHaveBeenCalledWith(B,2,3)})});describe("eachKey",function(){it("should be called with the correct scope",function(){A.eachKey(function(){F=this},fakeScope);expect(F).toBe(fakeScope)});it("should call the correct number of times",function(){A.eachKey(function(){G++});expect(G).toEqual(3)});it("should be called with each key",function(){A.eachKey(E);expect(E).toHaveBeenCalledWith(1,D,0,3);expect(E).toHaveBeenCalledWith(2,C,1,3);expect(E).toHaveBeenCalledWith(3,B,2,3)})})});describe("adding items",function(){beforeEach(function(){A=new Ext.util.MixedCollection()});it("should add an array of items",function(){expect(A.length).toEqual(0);A.addAll([{id:1},{id:2}]);expect(A.length).toEqual(2)});it("should fire the add event",function(){var B=false;A.on("add",function(){B=true});A.add({id:1});expect(B).toBe(true)});describe("falsy values",function(){it("should be able to add a 0",function(){A.add("mykey",0);expect(A.containsKey("mykey")).toBe(true);expect(A.get("mykey")).toBe(0)});it("should be able to add an empty string",function(){A.add("mykey","");expect(A.containsKey("mykey")).toBe(true);expect(A.get("mykey")).toBe("")});it("should be able to add null",function(){A.add("mykey",null);expect(A.containsKey("mykey")).toBe(true);expect(A.get("mykey")).toBeNull()});it("should be able to add undefined",function(){A.add("mykey",undefined);expect(A.containsKey("mykey")).toBe(true);expect(A.get("mykey")).toBeUndefined()})})});describe("removing items",function(){var J={id:1,name:"one"},I={id:2,name:"two"},H={id:3,name:"three"},G={id:4,name:"four"},F={id:5,name:"five"},E={id:6,name:"six"},D={id:7,name:"seven"},C={id:8,name:"eeight"},B={id:9,name:"nine"};beforeEach(function(){A=new Ext.util.MixedCollection();A.addAll([J,I,H,G,F,E,D,C,B])});describe("remove",function(){it("should remove a single item",function(){A.remove(J);expect(A.getCount()).toEqual(8)});it("should return the removed item",function(){expect(A.remove(J)).toBe(J)});it("should return false if no item was found",function(){expect(A.remove({})).toBe(false)});it("should fire the remove event",function(){var L,K;A.on("remove",function(N,M){L=N;K=M});A.remove(J);expect(L).toBe(J);expect(K).toBe(1)})});describe("removeAt",function(){it("should remove a single item",function(){A.removeAt(1);expect(A.getCount()).toEqual(8)});it("should return the removed item",function(){expect(A.removeAt(1)).toBe(I)});it("should return false if no item was found",function(){expect(A.removeAt(9)).toBe(false)});describe("event",function(){it("should fire the remove event",function(){var L,K;A.on("remove",function(N,M){L=N;K=M});A.removeAt(1);expect(L).toBe(I);expect(K).toBe(2)});it("should update the collection during a remove",function(){var L,K;A.on("remove",function(){L=A.getCount();K=A.getByKey(1)});A.removeAt(0);expect(L).toBe(8);expect(K).toBeUndefined()})})});describe("bulkRemove",function(){it("should limit the length to that of the collection",function(){A.removeRange(4,100);expect(A.getCount()).toBe(4)});it("should remove the correct items",function(){A.removeRange(3,2);expect(A.getCount()).toBe(7);expect(A.getAt(2)).toBe(H);expect(A.getAt(3)).toBe(E)})});describe("removeAtKey",function(){it("should remove a single item",function(){A.removeAtKey(1);expect(A.getCount()).toEqual(8)});it("should return the removed item",function(){expect(A.removeAtKey(1)).toBe(J)});it("should return false if no item was found",function(){expect(A.removeAtKey(10)).toBe(false)});it("should fire the remove event",function(){var L,K;A.on("remove",function(N,M){L=N;K=M});A.removeAtKey(2);expect(L).toBe(I);expect(K).toBe(2)})});describe("removeAll",function(){it("should remove all items",function(){A.removeAll();expect(A.getCount()).toBe(0)});it("should the passed items",function(){A.removeAll([I]);expect(A.getCount()).toBe(8)});it("should fire the remove event with no passed items",function(){var K=0;A.on("remove",function(){++K});A.removeAll();expect(K).toBe(9)});it("should fire the remove event when passing items",function(){var K=0;A.on("remove",function(){++K});A.removeAll([I]);expect(K).toBe(1)})})});describe("clearing items",function(){beforeEach(function(){A=new Ext.util.MixedCollection();A.addAll([{id:1},{id:2}])});it("should remove all items",function(){expect(A.length).toEqual(2);A.clear();expect(A.length).toEqual(0)});it("should fire the clear event",function(){var B=false;A.on("clear",function(){B=true});A.clear();expect(B).toBe(true)})});describe("determining insertion index in a sorted MixedCollection",function(){var D={id:2,name:"Michael"},C={id:3,name:"Yanto"},B={id:1,name:"Bill"},H={id:4,name:"Albert"},G={id:5,name:"Fred"},F={id:6,name:"Robert"},E={id:7,name:"Zebedee"};beforeEach(function(){A=new Ext.util.MixedCollection();A.addAll([D,C,B])});describe("Sorted ascending",function(){it("should find correct insertion indices",function(){A.sort("name");expect(A.findInsertionIndex(H)).toEqual(0);expect(A.findInsertionIndex(G)).toEqual(1);expect(A.findInsertionIndex(F)).toEqual(2);expect(A.findInsertionIndex(E)).toEqual(3)})});describe("Sorted descending",function(){it("should find correct insertion indices",function(){A.sort("name","DESC");expect(A.findInsertionIndex(H)).toEqual(3);expect(A.findInsertionIndex(G)).toEqual(2);expect(A.findInsertionIndex(F)).toEqual(1);expect(A.findInsertionIndex(E)).toEqual(0)})})});describe("an existing MixedCollection",function(){var J={id:1,name:"first"},I={id:2,name:"second"},H={id:3,name:"third"},G={id:4,name:"fourth"},F={id:5,name:"fifth"},E={id:6,name:"sixth"},D={id:7,name:"seventh"},C={id:8,name:"eighth"},B={id:9,name:"ninth"};beforeEach(function(){A=new Ext.util.MixedCollection();A.addAll([J,I,H])});describe("updateKey",function(){it("should do nothing if the old key doesn't exist",function(){A.updateKey("foo","bar");expect(A.getByKey("bar")).toBeUndefined()});it("should update the key for the item",function(){A.updateKey(1,20);expect(A.getByKey(1)).toBeUndefined();expect(A.getByKey(20)).toBe(J);expect(A.indexMap[1]).toBe(undefined)});it("should update the key for the item when the indexMap needs rebuilding",function(){A.insert(0,"first","new");A.updateKey(1,20);expect(A.getByKey(1)).toBeUndefined();expect(A.getByKey(20)).toBe(J);expect(A.indexMap[1]).toBe(undefined)})});describe("inserting items",function(){it("should insert a new item",function(){var K=A.getCount();A.insert(0,G);expect(A.getCount()).toEqual(K+1)});it("should fire the add event",function(){var K=false;A.on("add",function(){K=true});A.insert(0,G);expect(K).toBe(true)});it("should insert the item at the correct location",function(){expect(A.items[0]).toEqual(J);A.insert(0,G);expect(A.items[0]).toEqual(G)});describe("falsy values",function(){it("should be able to insert a 0",function(){A.insert(0,"mykey",0);expect(A.containsKey("mykey")).toBe(true);expect(A.get("mykey")).toBe(0)});it("should be able to insert an empty string",function(){A.insert(0,"mykey","");expect(A.containsKey("mykey")).toBe(true);expect(A.get("mykey")).toBe("")});it("should be able to insert null",function(){A.insert(0,"mykey",null);expect(A.containsKey("mykey")).toBe(true);expect(A.get("mykey")).toBeNull()});it("should be able to insert undefined",function(){A.insert(0,"mykey",undefined);expect(A.containsKey("mykey")).toBe(true);expect(A.get("mykey")).toBeUndefined()})})});describe("replacing items",function(){it("should replace the correct item",function(){A.replace(2,G);expect(A.getAt(1).name).toEqual("fourth")});it("should not change the count",function(){var K=A.getCount();A.replace(2,G);expect(A.getCount()).toEqual(K)});it("should fire the replace event",function(){var K=false;A.on("replace",function(){K=true},this);A.replace(2,G);expect(K).toBe(true)})});describe("cloning",function(){it("should copy all items into the new MixedCollection",function(){var K=A.clone();expect(K.getCount()).toEqual(3);expect(K.items[0]).toEqual(J);expect(K.items[1]).toEqual(I);expect(K.items[2]).toEqual(H)});it("should keep the getKey fn",function(){var K=function(N){return N.id},M=new Ext.util.MixedCollection({getKey:K});var L=M.clone();expect(L.getKey).toBe(K);M=L=null})});describe("getting items",function(){it("should get the first item",function(){expect(A.first()).toEqual(J)});it("should get the last item",function(){expect(A.last()).toEqual(H)});it("should get by index",function(){expect(A.get(2)).toEqual(I)});it("should get an item's key",function(){expect(A.getKey(J)).toEqual(1)});it("should return the correct indexOf an item",function(){expect(A.indexOf(J)).toEqual(0)});it("should return the correct indexOfKey",function(){expect(A.indexOfKey(2)).toEqual(1)});it("should return the correct key",function(){expect(A.getByKey(3)).toEqual(H)});it("should get an item by index",function(){expect(A.getAt(2)).toEqual(H)});it("should get an item by key",function(){var K={id:"a",name:"fifth item"};A.add(K);expect(A.get("a")).toEqual(K)});it("should return the correct getAt",function(){expect(A.getAt(2)).toEqual(H)});describe("when getting a range",function(){var K=function(){A.clear();A.addAll([J,I,H,G,F,E,D,C,B])};it("should honor the start and limit params",function(){K();var L=A.getRange(1,2);expect(L.length).toEqual(2);expect(L[0]).toEqual(I);expect(L[1]).toEqual(H)});it("should return all items if no params are given",function(){K();var L=A.getRange();expect(L.length).toEqual(9);expect(L[0]).toEqual(J);expect(L[1]).toEqual(I);expect(L[2]).toEqual(H);expect(L[8]).toBe(B)});it("should return all items to the end if only the start param is given",function(){K();var L=A.getRange(1);expect(L.length).toEqual(8);expect(L[0]).toEqual(I);expect(L[1]).toEqual(H);expect(L[7]).toEqual(B)});it("should normalize the start value if < 0",function(){K();var L=A.getRange(-3,2);expect(L.length).toBe(3);expect(L[0]).toEqual(J)});it("should normalize the end value the collection max",function(){K();var L=A.getRange(6,200);expect(L.length).toBe(3);expect(L[0]).toBe(D)});it("should return empty if start > length",function(){K();var L=A.getRange(10,15);expect(L.length).toBe(0)});it("should return in reverse order when start > end",function(){K();var L=A.getRange(6,3);expect(L.length).toBe(4);expect(L[0]).toBe(D)})})});describe("finding items",function(){it("should find an item using a passed function",function(){var K=A.findBy(function(L){return L.name=="third"});expect(K).toEqual(H)});it("should find an item's index",function(){var K=A.findIndex("name","third");expect(K).toEqual(2)});it("should find an item's index by a function",function(){var K=A.findIndexBy(function(L){return L.name=="second"});expect(K).toEqual(1)})});describe("contains",function(){it("should contain items that have been added",function(){expect(A.contains(J)).toBe(true)});it("should not contain items that have not been added",function(){expect(A.contains({some:"object"})).toBe(false)});it("should contain an item by key",function(){expect(A.containsKey(1)).toBe(true)});it("should not contain a non-contained item by key",function(){expect(A.containsKey(100)).toBe(false)})})});describe("filtering",function(){var C,B;beforeEach(function(){A=new Ext.util.MixedCollection(false,function(D){return D.name});A.addAll([{id:1,name:"Ed",code:"C",modifier:10},{id:2,name:"Abe",code:"A",modifier:100},{id:3,name:"Edward",code:"B",modifier:5}]);C=new Ext.util.Filter({filterFn:function(D){return D.name.charAt(0)=="E"}})});describe("copying",function(){it("should return a new MixedCollection",function(){B=A.filter("name","Ed");expect(B instanceof Ext.util.MixedCollection).toBe(true);expect(B).not.toEqual(A)});it("should keep the getKey function when using filter",function(){var D=function(G){return G.id},F=new Ext.util.MixedCollection({getKey:D});var E=F.filter("name","Ed");expect(E.getKey).toBe(D);F=E=null});it("should keep the getKey function when using filterBy",function(){var D=function(G){return G.id},F=new Ext.util.MixedCollection({getKey:D});var E=F.filterBy(function(){return true});expect(E.getKey).toBe(D);F=E=null})});describe("when filtering on a key and value pair",function(){it("should filter correctly",function(){B=A.filter("name","Edward");expect(B.items[0].name).toEqual("Edward");expect(B.length).toEqual(1)});it("should use anyMatch by default",function(){B=A.filter("name","Ed");expect(B.length).toEqual(2)})});describe("when filtering using Filter object",function(){it("should accept a single Filter",function(){B=A.filter(C);expect(B.length).toEqual(2)});it("should accept an array of Filters",function(){B=A.filter([C]);expect(B.length).toEqual(2)})})});describe("sorting",function(){beforeEach(function(){A=new Ext.util.MixedCollection(false,function(B){return B.name});A.addAll([{id:1,name:"Ed",code:"C",modifier:10},{id:2,name:"Abe",code:"A",modifier:100},{id:3,name:"Edward",code:"B",modifier:5}])});it("should sort ASC by default",function(){A.sort("code");expect(A.items[0].code).toEqual("A");expect(A.items[1].code).toEqual("B");expect(A.items[2].code).toEqual("C")});it("should accept a DESC sort",function(){A.sort("code","DESC");expect(A.items[2].code).toEqual("A");expect(A.items[1].code).toEqual("B");expect(A.items[0].code).toEqual("C")});it("should sort with an Ext.util.Sorter",function(){A.sort(new Ext.util.Sorter({sorterFn:function(C,B){return(C.id*C.modifier)-(B.id*B.modifier)}}));expect(A.items[0].code).toEqual("C");expect(A.items[1].code).toEqual("B");expect(A.items[2].code).toEqual("A")});it("should perform a directional sort with an Ext.util.Sorter",function(){A.sort(new Ext.util.Sorter({direction:"DESC",sorterFn:function(C,B){return(C.id*C.modifier)-(B.id*B.modifier)}}));expect(A.items[2].code).toEqual("C");expect(A.items[1].code).toEqual("B");expect(A.items[0].code).toEqual("A")});it("should fire a sort event",function(){var B=false;A.on("sort",function(){B=true},this);A.sort("name");expect(B).toBe(true)})});describe("summing",function(){describe("simple objects",function(){beforeEach(function(){A=new Ext.util.MixedCollection();A.addAll([{amount:10,name:"Cool things"},{amount:20,name:"Other cool things"},{amount:30,name:"Other cool things"},{amount:40,name:"Other cool things"}])});it("should sum the given property from each item",function(){expect(A.sum("amount")).toEqual(100)});it("should support a start index",function(){expect(A.sum("amount",undefined,2)).toEqual(70)});it("should support an end index",function(){expect(A.sum("amount",undefined,0,2)).toEqual(60)})});describe("complex objects",function(){beforeEach(function(){A=new Ext.util.MixedCollection();A.addAll([{data:{amount:10,name:"Cool things"}},{data:{amount:20,name:"Other cool things"}}])});it("should sum the given property from each item",function(){expect(A.sum("amount","data")).toEqual(30)})})});describe("collecting",function(){describe("simple objects",function(){beforeEach(function(){A=new Ext.util.MixedCollection();A.addAll([{amount:10,name:"Ed"},{amount:20,name:"Abe"},{amount:20,name:"Ed"}])});it("should collect the unique properties from each item",function(){var B=A.collect("name");expect(B.length).toEqual(2)})});describe("complex objects",function(){beforeEach(function(){A=new Ext.util.MixedCollection();A.addAll([{data:{amount:10,name:"Ed"}},{data:{amount:20,name:"Abe"}},{data:{amount:20,name:"Ed"}}])});it("should collect the unique properties from each item",function(){var B=A.collect("name","data");expect(B.length).toEqual(2)})})});describe("reordering",function(){beforeEach(function(){A=new Ext.util.MixedCollection(false,function(B){return B.name});A.addAll([{id:1,name:"Ed",code:"C",modifier:10},{id:2,name:"Abe",code:"A",modifier:100},{id:3,name:"Edward",code:"B",modifier:5}])});it("should reorder correctly",function(){A.reorder({1:2,2:0});expect(A.items[0].code).toEqual("B");expect(A.items[1].code).toEqual("C");expect(A.items[2].code).toEqual("A")});it("should fire a sort event",function(){var B=false;A.on("sort",function(){B=true},this);A.reorder({1:2,2:0});expect(B).toBe(true)})});describe("adding a MixedCollection to a MixedCollection",function(){it("Should add a MixedCollection as a single new item",function(){var C=new Ext.util.MixedCollection(false,function(D){return D.specialName}),B=new Ext.util.MixedCollection();B.specialName="mc2Id";B.add("b","c");C.add(B);expect(C.get("mc2Id").get("b")).toEqual("c")})});describe("adding duplicate items",function(){it("should overwrite duplicates",function(){var C=new Ext.util.MixedCollection(false,function(D){return D.id}),B=[{id:1,text:"foo"},{id:2,text:"bar"},{id:1,text:"bletch"},{id:2,text:"zarg"}];C.add(B);expect(C.getCount()).toEqual(2);expect(C.getAt(0).text).toEqual("bletch");expect(C.getAt(1).text).toEqual("zarg")})})})