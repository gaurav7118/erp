describe("Ext.util.ObjectTemplate",function(){var F,D,H=Ext.Object.chain({direct:false,object:{property:456}});H.text="Don";var G=function(){},E=function(){},C=function(){},B=function(){},A=function(){};beforeEach(function(){F=new Ext.util.ObjectTemplate({foo:42,rootFn:G,bar:"Hello {text}",baz:"{direct}",array:[427,"Hey {text} {object.property}","{object.property}","{direct}",E,null,0,false],object:{prop:3,objFn:C,tpl:"Yo {text}",value:"{direct}",items:[77,"{direct}",{v:"{direct}",x:1,s:"-- {text}",innerFn:B},"Oy {text}",A],aNull:null,aZero:0,aBool:false},aNull:null,aZero:0,aBool:false});D=F.apply(H)});describe("the root",function(){it("should pass through numbers",function(){expect(D.foo).toBe(42)});it("should apply Ext.Template",function(){expect(D.bar).toBe("Hello Don")});it("should map values",function(){expect(D.baz).toBe(false)});it("should pass through functions",function(){expect(D.rootFn).toBe(G)});it("should pass through null",function(){expect(D.aNull).toBeNull()});it("should pass through 0",function(){expect(D.aZero).toBe(0)});it("should pass through false",function(){expect(D.aBool).toBe(false)})});describe("array on the root",function(){it("should have the correct length",function(){expect(D.array.length).toBe(8)});it("should pass through numbers",function(){expect(D.array[0]).toBe(427)});it("should apply templates",function(){expect(D.array[1]).toBe("Hey Don 456")});it("should pull single values through dotted template expansions",function(){expect(D.array[2]).toBe(456)});it("should pull primitives through simple name expansions",function(){expect(D.array[3]).toBe(false)});it("should pass through functions",function(){expect(D.array[4]).toBe(E)});it("should pass through null",function(){expect(D.array[5]).toBeNull()});it("should pass through 0",function(){expect(D.array[6]).toBe(0)});it("should pass through false",function(){expect(D.array[7]).toBe(false)})});describe("object off the root",function(){describe("properties",function(){it("should pass through numbers",function(){expect(D.object.prop).toBe(3)});it("should apply XTemplate",function(){expect(D.object.tpl).toBe("Yo Don")});it("should map values",function(){expect(D.object.value).toBe(false)});it("should pass through functions",function(){expect(D.object.objFn).toBe(C)});it("should pass through null",function(){expect(D.object.aNull).toBeNull()});it("should pass through 0",function(){expect(D.object.aZero).toBe(0)});it("should pass through false",function(){expect(D.object.aBool).toBe(false)})});describe("an array property",function(){it("should have the correct length",function(){expect(D.object.items.length).toBe(5)});it("should pass through numbers",function(){expect(D.object.items[0]).toBe(77)});it("should pull primitives through simple name expansions",function(){expect(D.object.items[1]).toBe(false)});it("should apply XTemplate",function(){expect(D.object.items[3]).toBe("Oy Don")});it("should pass through functions",function(){expect(D.object.items[4]).toBe(A)})});describe("an object element of an array property",function(){it("should pull primitives through simple name expansions",function(){expect(D.object.items[2].v).toBe(false)});it("should pass through numbers",function(){expect(D.object.items[2].x).toBe(1)});it("should apply XTemplate",function(){expect(D.object.items[2].s).toBe("-- Don")});it("should pass through numbers",function(){expect(D.object.items[2].innerFn).toBe(B)})})})})