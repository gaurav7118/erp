describe("Ext.util.Scheduler",function(){var D,B,E;var G,C;var F=0;function A(){A=Ext.emptyFn;B=Ext.define(null,{extend:Ext.util.Schedulable,constructor:function(H){this.name=H;this.scheduler=D;this.callParent()},react:function(){E.push(this.name)},privates:{sort:function(){this.scheduler.sortItems(this.depends)}}})}beforeEach(function(){A();D=new Ext.util.Scheduler({listeners:{busy:function(){++G},idle:function(){++C}}});G=C=0;var H=D.sort;D.sort=function(){++F;return H.apply(this,arguments)};E=[];F=0});afterEach(function(){if(D){D.destroy();D=null}expect(Ext.util.Scheduler.instances.length).toBe(0)});describe("notify",function(){it("should suspend/resume on notify",function(){var H=spyOn(Ext,"suspendLayouts").andCallThrough(),I=spyOn(Ext,"resumeLayouts").andCallThrough();D.notify();expect(H.callCount).toBe(1);expect(I.callCount).toBe(1)})});describe("ordering",function(){it("should order items only on first notification",function(){expect(F).toBe(0);var I=new B("item1");var H=new B("item2");H.depends=[I];D.add(H);I.schedule();H.schedule();expect(F).toBe(0);D.notify();expect(F).toBe(1);expect(E.join("/")).toBe("item1/item2");I.schedule();D.notify();expect(F).toBe(1);expect(E.join("/")).toBe("item1/item2/item1")});it("should react to only what was scheduled",function(){var I=new B("item1");var H=new B("item2");H.depends=[I];D.add(H);I.schedule();D.notify();expect(E.join("/")).toBe("item1");H.schedule();D.notify();expect(F).toBe(1);expect(E.join("/")).toBe("item1/item2")});it("should reorder items if new items are added",function(){expect(F).toBe(0);var J=new B("item1");var I=new B("item2");I.depends=[J];D.add(I);J.schedule();I.schedule();expect(F).toBe(0);D.notify();expect(F).toBe(1);expect(E.join("/")).toBe("item1/item2");var H=new B("item3");J.depends=[H];E.length=0;J.schedule();I.schedule();H.schedule();expect(F).toBe(1);D.notify();expect(F).toBe(2);expect(E.join("/")).toBe("item3/item1/item2")});it("should detect dependency cycles",function(){var I=new B("item1");var H=new B("item2");H.depends=[I];I.depends=[H];D.add(H);H.schedule();expect(function(){D.notify()}).toThrow();Ext.Component.layoutSuspendCount=0})});describe("multiple pass notifications",function(){it("should trigger dependent items in single pass",function(){var I=new B("item1");var H=new B("item2");H.depends=[I];D.add(H);I.schedule();Ext.override(I,{react:function(){H.schedule();return this.callParent()}});expect(D.passes).toBe(0);expect(F).toBe(0);D.notify();expect(D.passes).toBe(1);expect(F).toBe(1);expect(E.join("/")).toBe("item1/item2");D.notify();expect(D.passes).toBe(1);expect(F).toBe(1);expect(E.join("/")).toBe("item1/item2")});it("should trigger anti-dependent items in two passes",function(){var I=new B("item1");var H=new B("item2");H.depends=[I];D.add(H);H.schedule();Ext.override(H,{react:function(){I.schedule();return this.callParent()}});expect(D.passes).toBe(0);expect(F).toBe(0);D.notify();expect(D.passes).toBe(2);expect(F).toBe(1);expect(E.join("/")).toBe("item2/item1");D.notify();expect(D.passes).toBe(2);expect(F).toBe(1);expect(E.join("/")).toBe("item2/item1")});it("should trigger self in two passes",function(){var I=new B("item1");var H=new B("item2");H.depends=[I];D.add(H);H.schedule();Ext.override(H,{react:function(){delete this.react;H.schedule();return this.callParent()}});expect(D.passes).toBe(0);expect(F).toBe(0);D.notify();expect(D.passes).toBe(2);expect(F).toBe(1);expect(E.join("/")).toBe("item2/item2");D.notify();expect(D.passes).toBe(2);expect(F).toBe(1);expect(E.join("/")).toBe("item2/item2")});it("should limit number of cycles",function(){var J=new B("A");var I=new B("B");var H=100;I.depends=[J];D.add(I);D.setCycleLimit(4);I.schedule();Ext.override(I,{react:function(){if(H--<0){return }J.schedule();return this.callParent()}});Ext.override(J,{react:function(){if(H--<0){return }I.schedule();return this.callParent()}});expect(D.passes).toBe(0);expect(F).toBe(0);var K;D.onCycleLimitExceeded=function(){K=true};D.notify();expect(K).toBe(true);expect(D.passes).toBe(4);expect(F).toBe(1);expect(E.join("")).toBe("BABABAB");K=false;D.notify();expect(K).toBe(true);expect(D.passes).toBe(8);expect(F).toBe(1);expect(E.join("")).toBe("BABABABABABABAB")})});describe("busy / idle",function(){it("should fire nothing initially",function(){expect(G).toBe(0);expect(C).toBe(0);expect(D.isBusy()).toBe(false);expect(D.isIdle()).toBe(true);D.notify();expect(G).toBe(0);expect(C).toBe(0);expect(D.isBusy()).toBe(false);expect(D.isIdle()).toBe(true)});it("should fire busy event",function(){expect(G).toBe(0);expect(C).toBe(0);D.adjustBusy(1);expect(G).toBe(1);expect(C).toBe(0);expect(D.isBusy()).toBe(true);expect(D.isIdle()).toBe(false)});it("should not fire the idle event when busy",function(){expect(G).toBe(0);expect(C).toBe(0);D.adjustBusy(1);expect(G).toBe(1);expect(C).toBe(0);D.notify();expect(G).toBe(1);expect(C).toBe(0);expect(D.isBusy()).toBe(true);expect(D.isIdle()).toBe(false);D.notify();expect(G).toBe(1);expect(C).toBe(0);expect(D.isBusy()).toBe(true);expect(D.isIdle()).toBe(false)});it("should fire idle event",function(){expect(G).toBe(0);expect(C).toBe(0);D.adjustBusy(1);expect(G).toBe(1);expect(C).toBe(0);D.adjustBusy(-1);expect(G).toBe(1);expect(C).toBe(0);for(var H=0;H<2;++H){D.notify();expect(G).toBe(1);expect(C).toBe(1);expect(D.isBusy()).toBe(false);expect(D.isIdle()).toBe(true)}});it("should wait to fire the idle event",function(){expect(G).toBe(0);expect(C).toBe(0);var H=new B("A");Ext.override(H,{react:function(){D.adjustBusy(1);return this.callParent()}});H.schedule();D.notify();expect(G).toBe(1);expect(C).toBe(0);expect(D.isBusy()).toBe(true);expect(D.isIdle()).toBe(false);for(var I=0;I<2;++I){D.adjustBusy(-1);H.schedule();D.notify();expect(G).toBe(1);expect(C).toBe(0);expect(D.isBusy()).toBe(true);expect(D.isIdle()).toBe(false);D.notify();expect(G).toBe(1);expect(C).toBe(0);expect(D.isBusy()).toBe(true);expect(D.isIdle()).toBe(false)}D.adjustBusy(-1);D.notify();expect(G).toBe(1);expect(C).toBe(1);expect(D.isBusy()).toBe(false);expect(D.isIdle()).toBe(true)})})})