describe("Ext.util.Sorter",function(){var A;describe("instantiation",function(){var B=function(C){return function(){new Ext.util.Sorter(C)}};it("should require either a property or a function",function(){expect(B({})).toRaiseExtError()});it("should accept a property config",function(){expect(B({property:"test"})).not.toRaiseExtError()});it("should accept a sorter function",function(){expect(B({sorterFn:Ext.emptyFn})).not.toRaiseExtError()});it("should have no transform method",function(){expect(B().transform).toBeUndefined()})});describe("building sorter functions",function(){it("should default to sorting ASC",function(){A=new Ext.util.Sorter({property:"age"});var D={age:24},C={age:25},B=A.sort(D,C);expect(B).toEqual(-1)});it("should accept DESC direction",function(){A=new Ext.util.Sorter({property:"age",direction:"DESC"});var D={age:24},C={age:25},B=A.sort(D,C);expect(B).toEqual(1)});it("should allow specification of the root property",function(){A=new Ext.util.Sorter({root:"data",property:"age"});var D={data:{age:24}},C={data:{age:25}},B=A.sort(D,C);expect(B).toEqual(-1)})});it("should accept some custom transform function",function(){A=new Ext.util.Sorter({property:"age",transform:function(E){return E*-1}});var D={age:18},C={age:21},B=A.sort(D,C);expect(B).toBe(1)});it("should sort an array of Records by multiple sorters where the first returns equality",function(){var F={name:"Ed Spencer",email:"ed@sencha.com",evilness:100,group:"code",old:false,age:25,valid:"yes"},D={name:"Abe Elias",email:"abe@sencha.com",evilness:70,group:"admin",old:false,age:20,valid:"yes"},H={name:"Aaron Conran",email:"aaron@sencha.com",evilness:5,group:"admin",old:true,age:26,valid:"yes"},C={name:"Tommy Maintz",email:"tommy@sencha.com",evilness:-15,group:"code",old:true,age:70,valid:"yes"},G=Ext.define(null,{extend:"Ext.data.Model",idProperty:"email",fields:[{name:"name",type:"string"},{name:"email",type:"string"},{name:"evilness",type:"int"},{name:"group",type:"string"},{name:"old",type:"boolean"},{name:"valid",type:"string"},{name:"age",type:"int"}]}),B=[new G(F),new G(D),new G(H),new G(C)],E=[new Ext.util.Sorter({sorterFn:function(){return 0}}),new Ext.util.Sorter({root:"data",property:"age"})];Ext.Array.sort(B,Ext.util.Sortable.createComparator(E))});describe("sorting null values",function(){var G=Ext.data.SortTypes;function B(H,I){var J=new Ext.util.Sorter({nullFirst:I,sorterFn:C,transform:H.transform});return function(L,K){return J.sort(L,K)}}function D(H){return function(J,I){if(J===null){return H?-1:1}else{if(I===null){return H?1:-1}else{return J>I?1:(J<I?-1:0)}}}}function C(K,J){var I=this,H=I.transform;if(K===J){return 0}if(K===null){return I.nullFirst?-1:1}else{if(J===null){return I.nullFirst?1:-1}else{if(H){K=H(K);J=H(J)}}}return K>J?1:(K<J?-1:0)}var F={asFloat:{test:[5.3,null,2.4,null],transform:G.asFloat},asInt:{test:[5,null,2,null],transform:G.asInt},asText:{test:["<p>hello, <span>world!</span></p>",null,"<div>i am <p>in</p>a block</div>",null],transform:G.asText},asUCString:{test:["z",null,"a",null],transform:G.asUCString},asUCText:{test:["<p>hello, <span>world!</span></p>",null,"<div>i am <p>in</p>a block</div>",null],transform:G.asUCText}};function E(L,K){var H=F[L],I=H.test,J=B(F[L],K);describe(L,function(){it("should sort null values "+(K?"first":"last"),function(){expect(I.concat().sort(D(K))).toEqual(I.concat().sort(J))})})}describe("asUCString",function(){E("asUCString");E("asUCString",true)});describe("numbers",function(){E("asFloat");E("asInt");E("asFloat",true);E("asInt",true)});describe("text",function(){E("asText");E("asUCText");E("asText",true);E("asUCText",true)})})})