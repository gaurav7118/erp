describe("Ext.util.TSV",function(){var C=Ext.util.TSV;var A='foo "bar"\t, \n\r\nbletch';var B='"foo ""bar""\t, \n\r\nbletch"';describe("encode",function(){it("should encode valid data types to TSV representation",function(){var E=new Date(1262382332004),D=C.encode([[A,"Normal String",E],[Math.PI,1,false]]);expect(D).toEqual(B+"\tNormal String\t2010-01-01T21:45:32.004Z"+C.lineBreak+"3.141592653589793\t1\tfalse")});it("should handle empty rows",function(){expect(C.encode([[]])).toBe("")});it("should handle null cell",function(){expect(C.encode([[null]])).toBe("")});it("should not encode arrays in cells",function(){expect(function(){C.encode([[[]]])}).toThrow()});it("should not encode objects in cells",function(){expect(function(){C.encode([[{}]])}).toThrow()});it("should not encode HTMLDocument in a cell",function(){expect(function(){C.encode([[document]])}).toThrow()});it("should not encode HTMLBody in a cell",function(){expect(function(){C.encode([[document.body]])}).toThrow()});it("should not encode NodeList in a cell",function(){expect(function(){C.encode([[document.body.childNodes]])}).toThrow()});it("should not encode window in a cell",function(){expect(function(){C.encode([[Ext.global]])}).toThrow()})});describe("decode",function(){it("should decode TSV back into an array of string arrays",function(){var D=C.decode(B+"\tNormal String\t2010-01-01T21:45:32.004Z"+C.lineBreak+"3.141592653589793\t1\tfalse");expect(D).toEqual([[A,"Normal String","2010-01-01T21:45:32.004Z"],["3.141592653589793","1","false"]])})})})