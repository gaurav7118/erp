Ext.define("Ext.ux.event.RecorderManager",{extend:"Ext.panel.Panel",alias:"widget.eventrecordermanager",uses:["Ext.ux.event.Recorder","Ext.ux.event.Player"],layout:"fit",buttonAlign:"left",eventsToIgnore:{mousemove:1,mouseover:1,mouseout:1},bodyBorder:false,playSpeed:1,initComponent:function(){var B=this;B.recorder=new Ext.ux.event.Recorder({attachTo:B.attachTo,listeners:{add:B.updateEvents,coalesce:B.updateEvents,buffer:200,scope:B}});B.recorder.eventsToRecord=Ext.apply({},B.recorder.eventsToRecord);function C(E,D){return{text:E,speed:D,group:"speed",checked:D==B.playSpeed,handler:B.onPlaySpeed,scope:B}}B.tbar=[{text:"Record",xtype:"splitbutton",whenIdle:true,handler:B.onRecord,scope:B,menu:B.makeRecordButtonMenu()},{text:"Play",xtype:"splitbutton",whenIdle:true,handler:B.onPlay,scope:B,menu:[C("Qarter Speed (0.25x)",0.25),C("Half Speed (0.5x)",0.5),C("3/4 Speed (0.75x)",0.75),"-",C("Recorded Speed (1x)",1),C("Double Speed (2x)",2),C("Quad Speed (4x)",4),"-",C("Full Speed",1000)]},{text:"Clear",whenIdle:true,handler:B.onClear,scope:B},"->",{text:"Stop",whenActive:true,disabled:true,handler:B.onStop,scope:B}];var A=B.attachTo&&B.attachTo.testEvents;B.items=[{xtype:"textarea",itemId:"eventView",fieldStyle:"font-family: monospace",selectOnFocus:true,emptyText:"Events go here!",value:A?B.stringifyEvents(A):"",scrollToBottom:function(){var D=this.inputEl.dom;D.scrollTop=D.scrollHeight}}];B.fbar=[{xtype:"tbtext",text:"Attached To: "+(B.attachTo&&B.attachTo.location.href)}];B.callParent()},makeRecordButtonMenu:function(){var B=[],C={},E=this.recorder.eventsToRecord,D=this.eventsToIgnore;Ext.Object.each(E,function(F,H){var G=C[H.kind];if(!G){C[H.kind]=G=[];B.push({text:H.kind,menu:G})}G.push({text:F,checked:true,handler:function(I){if(I.checked){E[F]=H}else{delete E[F]}}});if(D[F]){G[G.length-1].checked=false;Ext.Function.defer(function(){delete E[F]},1)}});function A(F,G){return(F.text<G.text)?-1:((G.text<F.text)?1:0)}B.sort(A);Ext.Array.each(B,function(F){F.menu.sort(A)});return B},getEventView:function(){return this.down("#eventView")},onClear:function(){var A=this.getEventView();A.setValue("")},onPlay:function(){var C=this,A=C.getEventView(),B=A.getValue();if(B){B=Ext.decode(B);if(B.length){C.player=Ext.create("Ext.ux.event.Player",{attachTo:window.opener,eventQueue:B,speed:C.playSpeed,listeners:{stop:C.onPlayStop,scope:C}});C.player.start();C.syncBtnUI()}}},onPlayStop:function(){this.player=null;this.syncBtnUI()},onPlaySpeed:function(A){this.playSpeed=A.speed},onRecord:function(){this.recorder.start();this.syncBtnUI()},onStop:function(){var A=this;if(A.player){A.player.stop();A.player=null}else{A.recorder.stop()}A.syncBtnUI();A.updateEvents()},syncBtnUI:function(){var C=this,B=!C.player&&!C.recorder.active;Ext.each(C.query("[whenIdle]"),function(D){D.setDisabled(!B)});Ext.each(C.query("[whenActive]"),function(D){D.setDisabled(B)});var A=C.getEventView();A.setReadOnly(!B)},stringifyEvents:function(C){var B,A=[];Ext.each(C,function(D){B=[];Ext.Object.each(D,function(E,F){if(B.length){B.push(", ")}else{B.push("  { ")}B.push(E,": ");B.push(Ext.encode(F))});B.push(" }");A.push(B.join(""))});return"[\n"+A.join(",\n")+"\n]"},updateEvents:function(){var B=this,C=B.stringifyEvents(B.recorder.getRecordedEvents()),A=B.getEventView();A.setValue(C);A.scrollToBottom()}})