
/*< COMPONENT USED FOR >
 *      1.Delivery Order
 *          callDeliveryOrder(isEdit,rec,winid) --- < Create delivery Order > 
 *          [isEdit=true/false, isCustomer=true, isOrder=true, record]
 *      Note -: callDeliveryOrder(isEdit,rec,winid) function defined in WtfTransactionManager.js    
 */

Wtf.account.DeliveryOrderPanel=function(config){
    this.id=config.id;
    //Rounding Off Calculation
    this.applyRoundingAdjustmentToDocument =false;
    this.roundingAdjustmentFlag = CompanyPreferenceChecks.getRoundingAdjustmentFlag();//This flag used to handle rounding adjustment for totla amount of transaction
    this.titlel = config.title!=undefined?config.title:"null";
    this.isEdit=config.isEdit;
    this.productOptimizedFlag=Wtf.account.companyAccountPref.productOptimizedFlag;
    this.custVenOptimizedFlag = Wtf.account.companyAccountPref.custvenloadtype;
    this.label=config.label;
    this.copyInv = config.copyInv;
    this.sendMailFlag = false;
    this.mailFlag = false;
    this.handleEmptyText=false; //To handle empty text after clicking on save button
    this.heplmodeid = config.heplmodeid;
    this.response="";
    this.request="";
    this.isGST=WtfGlobal.GSTApplicableForCompany()==Wtf.GSTStatus.NEW?true:false;   //ERP-32829 
     /**
     * Below variable is used to keep term details of source document 
     * in linking case and edit case when source document contains flat tax value
     * i.e. he has changed tax value manually
     */
    this.keepTermDataInLinkCase=false;   // Used to keep term term details as it is i.e. dont recalculate
    this.isShipping=CompanyPreferenceChecks.getGSTCalCulationType();
    this.addressMappingRec="";   // ERP-32829 
    this.uniqueCase=0; 
    this.sezfromdate=0; 
    this.seztodate=0; 
    this.transactiondateforgst=null;
    this.amountdue=0;
    this.exchangeRateInRetainCase=false;
    this.CustomStore="";
    this.nameBeforeSelect="";
    this.currentAddressDetailrec="";
    this.record=config.record;
    this.inputValue=config.inputValue;
    var help=getHelpButton(this,config.heplmodeid);
    this.WarnMessage=true; // to be used in Negative Stock-warn case
    this.businessPerson=(config.isCustomer?'Customer':'Vendor');
    this.modeName = config.modeName;
    this.moduleid=config.moduleid;
    //Flag to indicate whether Avalara integration is enabled and module is enabled for Avalara Integration or not
    this.isModuleForAvalara = (Wtf.account.companyAccountPref.avalaraIntegration && (config.moduleid == Wtf.Acc_Delivery_Order_ModuleId)) ? true : false;
    this.readOnly=config.readOnly;
    this.uPermType=(config.isCustomer?Wtf.UPerm.deliveryreport:Wtf.UPerm.goodsreceiptreport);
    this.permType=(config.isCustomer?Wtf.Perm.deliveryreport:Wtf.Perm.goodsreceiptreport);
    this.isOrder=config.isOrder;
    this.stateAsComboFlag=true;
    this.isRCMApplicableInPreferences = Wtf.account.companyAccountPref.RCMApplicable != undefined ? Wtf.account.companyAccountPref.RCMApplicable : false;
    this.purchaseFromURD = false;
    this.CustomerVendorTypeId="";
    this.GSTINRegistrationTypeId="";
    this.gstin="";
    this.gstdochistoryid="";
    this.ignoreHistory=false;
    this.checkgststatus=false;
    this.isIndiaGST=WtfGlobal.isIndiaCountryAndGSTApplied();  
         /*
     * flag used while generating Sales/Purchase Invoice from Sales/Purchase Order
     */
    this.invoicefromorder=(config.invoicefromorder!=undefined?config.invoicefromorder:false);
    this.invoicefromorderrec=config.invoicefromorderrec;
    
    //    this.isJobWorkOutReciever=config.isJobWorkOutReciever;
    this.printPermType=this.isConsignment?true:(config.isFixedAsset?(config.isCustomer?this.permType.printfado:this.permType.printfagr):(config.isCustomer?(this.isOrder?this.permType.printdo:false):(this.isOrder?this.permType.printgr:false)));
    this.exportPermType=(config.isCustomer?this.permType.exportdatado:this.permType.exportdatagr); 
    this.saveOnlyFlag = false;
    this.saveandcreateBtn=false; //ERP-18517
    /*This check is added to disable Generate PI/SI button on SaveAndCreate New.*/
    this.isFromSaveAndCreateNew=false;   // SDP-14034
    this.prodname="";
    this.linkedDocumentId="";
    this.isLinkedTransaction = (config.isLinkedTransaction == null || config.isLinkedTransaction == undefined)? false : config.isLinkedTransaction;
    this.originallyLinkedDocuments = '';
    this.isautogenerateddo = (this.record && this.record.data)?this.record.data.isautogenerateddo:false;
    this.includeDeactivatedTax = this.isEdit != undefined? (this.copyInv ? false : this.isEdit): false
    //    this.CUSTOM_KEY = "customfield";
    (this.businessPerson == "Customer")? Wtf.DOStatusStore.load() : Wtf.GROStatusStore.load();
    this.isFromPurchaseOrder = (config.invoicefromorderrec != undefined ? (config.invoicefromorderrec.isFromPurchaseOrder != undefined ? config.invoicefromorderrec.isFromPurchaseOrder : false) : false);
   
    this.pendingapprovalTransaction = (config.pendingapproval == null || config.pendingapproval == undefined)? false : config.pendingapproval;//To identify whether edited document is pending document
    /**
    * @type Boolean isAllProductHavingQAApprovalFlow : purpose of this flag is to check if all products have QA Approval Flow on as in case of 
    * Perpetual Inventory we need to post JE of Delivery Order so this flag will decide wether to Post JE or not. ERM-801
    */
    this.isAllProductHavingQAApprovalFlow = true;
    //    this.updateStoreConfig();
    Wtf.apply(this, config);
    //    this.custUPermType=config.isCustomer?Wtf.UPerm.customer:Wtf.UPerm.vendor;
    //    this.custPermType=config.isCustomer?Wtf.Perm.customer:Wtf.Perm.vendor;
    //    this.soUPermType=(config.isCustomer?Wtf.UPerm.invoice:Wtf.UPerm.vendorinvoice);
    //    this.soPermType=(config.isCustomer?Wtf.Perm.invoice.createso:Wtf.Perm.vendorinvoice.createpo);
    var tranType=null;
    if(config.moduleid==28||config.moduleid==27){
        if(config.moduleid==27){
            tranType=Wtf.autoNum.DeliveryOrder;
        }else{
            tranType=Wtf.autoNum.GoodsReceiptOrder;
        }   
    }
    if(!WtfGlobal.EnableDisable(this.uPermType, this.printPermType) || !WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)){    
        var singlePDFtext = null;
        if(this.isQuotation)
            singlePDFtext = WtfGlobal.getLocaleText("acc.accPref.autoQN");
        else
            singlePDFtext = config.isCustomer?(config.isOrder?WtfGlobal.getLocaleText("acc.accPref.autoSO"):WtfGlobal.getLocaleText("acc.accPref.autoInvoice")):(config.isOrder?WtfGlobal.getLocaleText("acc.accPref.autoPO"):WtfGlobal.getLocaleText("acc.accPref.autoVI"));
  
        this.singlePrint=new Wtf.exportButton({
            obj:this,
            id:"exportpdf" + this.id,
            iconCls: 'pwnd printButtonIcon',
            text: WtfGlobal.getLocaleText("acc.rem.236"),
            tooltip: WtfGlobal.getLocaleText("acc.rem.236.single"), //'Print Single Record Details',
            disabled : this.readOnly ? false : true,
            isEntrylevel:true,
            exportRecord:this.exportRecord,
            hidden:false,
            menuItem: {
                rowPdf: (this.isSalesCommissionStmt) ? false : true,
                rowPdfPrint:(this.isSalesCommissionStmt) ? false : true,
                rowPdfTitle: WtfGlobal.getLocaleText("acc.rem.39") + " " + singlePDFtext
            },
            get:tranType,
            moduleid:config.moduleid  
        });   
    }
   
//    if (!WtfGlobal.EnableDisable(this.uPermType, this.printPermType)) {
//        this.singleRowPrint = new Wtf.exportButton({
//            obj: this,
//            id: "printSingleRecord"+ config.id,
//            iconCls: 'pwnd printButtonIcon',
//            text: WtfGlobal.getLocaleText("acc.rem.236"),
//            tooltip: WtfGlobal.getLocaleText("acc.rem.236.single"), //'Print Single Record Details',
//            disabled: this.readOnly?false:true,
//            isEntrylevel: false,
//            exportRecord:this.exportRecord,
//            menuItem: {rowPrint: true},
//            get: tranType,
//            moduleid: config.moduleid
//        });
//    }
   
    this.saveBttn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.common.saveBtn"),  //'Save',
        tooltip:WtfGlobal.getLocaleText("acc.rem.175"),
        id:"save"+config.heplmodeid+this.id,
        hidden:this.readOnly,
        scope:this,
        handler:function(){
            this.mailFlag = true;
            this.saveOnlyFlag = true;
            this.disableSaveButtons()
            if(this.isEdit && !this.copyInv){
                var documentNo=this.Number.getValue();
                if(documentNo==null || documentNo==undefined || documentNo==""){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.NumberBlankAlert")], 2);
                    this.enableSaveButtons();
                    return ;
                }
            }
            if(this.isLinkedTransaction && !this.isCopy) {
                this.update();
            } else {
                this.beforeSave();
            }
        },
        iconCls :'pwnd save'
    });
    this.savencreateBttn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.field.SaveAndCreateNew"),
        tooltip:WtfGlobal.getLocaleText("acc.field.SaveAndCreateNewToolTip"),
        id:"savencreate"+config.heplmodeid+this.id,
        scope:this,
        hidden : this.isEdit || this.copyInv,
        handler:function(){
            this.mailFlag = false;
            this.saveOnlyFlag = false;
            this.saveandcreateBtn = true; //ERP-18517
            this.isFromSaveAndCreateNew=true;
            this.disableSaveButtons()
            if(this.isEdit && !this.copyInv){
                var documentNo=this.Number.getValue();
                if(documentNo==null || documentNo==undefined || documentNo==""){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.NumberBlankAlert")], 2);
                    this.enableSaveButtons();
                    return ;
                }
            }
            this.save();
        },
        iconCls :'pwnd save'
    });
     
    this.pushToPlannerBttn = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.field.pushToPlanner"), // "Push to Planner",
        tooltip: WtfGlobal.getLocaleText("acc.field.pushToPlanner"), // "Push to Planner",
        style:" padding-left: 15px;",
        cls: 'pwnd add',
        hidden: !(Wtf.account.companyAccountPref.deliveryPlanner && (config.moduleid == Wtf.Acc_Delivery_Order_ModuleId)),
        disabled: this.isViewTemplate? false : true,
        scope: this,
        handler: function() {
            this.pushToPlanner();
        }
    });
     
    this.showAddrress=new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.field.ShowAddress"),  //WtfGlobal.getLocaleText("acc.template.posttext") , //'<b>Post Text</b>',
        cls: 'pwnd add',
        id: "showaddress" + this.id,                
        tooltip : WtfGlobal.getLocaleText("acc.field.UseShowAddressoptiontoinsertAddresses"),       
        style:" padding-left: 15px;",
        scope: this,
        disabled : true,
        handler:this.getAddressWindow 
    });
    
    //Add Attachments button
    this.attachFilesBtn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.Lease.addAttach"),
        scope:this,
        id:"attachments" + this.id,
        //Visible in DO and Goods Receipt Report.
        hidden: !(config.moduleid == Wtf.Acc_Delivery_Order_ModuleId || config.moduleid == Wtf.Acc_Goods_Receipt_ModuleId),
        handler:this.showAttachmentsWindow,
        style: "padding-left: 15px;",
        cls : 'pwndbar1 uploadDoc',//getButtonIconCls(Wtf.etype.save),
        disabled : ((config.invoicefromorderrec!=undefined && config.invoicefromorderrec!="" && config.invoicefromorderrec.isFromPurchaseOrder != undefined && config.invoicefromorderrec.isFromPurchaseOrder==true) ? false : true)   //SDP-12945
    });
    /**
    *This method is used to save already attached documents to new document in Copy Case.
    */
    if(this.copyInv && this.record.data.billid != undefined && this.record.data.billid != "" &&(config.moduleid == Wtf.Acc_Delivery_Order_ModuleId || config.moduleid == Wtf.Acc_Goods_Receipt_ModuleId)){
        Wtf.Ajax.requestEx({
            method:'POST',
            url:"ACCInvoiceCMN/saveAttachedDocumentInCopyCase.do?transactionID="+this.record.data.billid,
            params:{
                dummy:1
            }
        },
        this,
        function(response){
            var res = response[0];
            if(res.success){
                this.savedFilesMappingId = res.savedFilesMappingId;
                /*
                 *In copy case assigning fileids to attachFileStr.
                 */
                this.attachedFilesStr = res.fileids;    
            }
        },
        function(response){
        });
    }
    
        /*
     * Button for generating Sales/Purchase Invoice from Goods Receipt/Delivery  Order Form
     */
    
    this.generatePI = new Wtf.Toolbar.Button({
        text: (config.isCustomer ? WtfGlobal.getLocaleText("acc.field.generatesalesinvoice") : WtfGlobal.getLocaleText("acc.field.generatepurchaseinvoice")),
        cls: 'pwnd add',
        id: "generateinvoice" + this.id,
        hidden: !(config.moduleid == Wtf.Acc_Delivery_Order_ModuleId || config.moduleid == Wtf.Acc_Goods_Receipt_ModuleId),
        tooltip: (config.isCustomer ? WtfGlobal.getLocaleText("acc.field.generatesalesinvoice") : WtfGlobal.getLocaleText("acc.field.generatepurchaseinvoice")),
        style: " padding-left: 15px;",
        scope: this,
        //disabled: true,
        disabled:(this.isViewTemplate? (this.record.data.isLinkedTransaction || this.record.data.invoiceno !="" || this.pendingapprovalTransaction) :true),       //Button is disabled in case if allready Pi is Linkd to document
        
        handler: function () {
            /**
             * Moved code from below if condition as it is also used for else condition.
             * Passing billing and shipping address in rec for SI/PI.
             */
                if(this.currentAddressDetailrec != "") {
                    this.exportRecord['currentAddressDetailrec'] = this.currentAddressDetailrec;
                } else if (this.linkRecord != undefined) {
                    this.linkRecord.data.billingAddrsCombo = this.linkRecord.data.billingAddressType;
                    this.linkRecord.data.shippingAddrsCombo = this.linkRecord.data.shippingAddressType;
                    this.exportRecord['currentAddressDetailrec'] = this.linkRecord.data;
                }
            if (this.isCustomer) {
                if(this.readOnly && !this.record.data.isLinkedTransaction && this.exportRecord == undefined){                       //Additional reqired  information is sent in case of view mode
                    this.exportRecord = this.record.data;
                    this.exportRecord["billid"] = this.record.data.billid;                                          
                     this.exportRecord["billno"] = this.record.data.billno;
                      this.exportRecord["term"] = this.record.data.termid;
                    this.exportRecord["ispercentdiscount"]=false;
                    this.exportRecord["isfromviewmode"]=this.isViewTemplate;
                    this.exportRecord['isTaxable']=this.isTaxable;
                    this.exportRecord['Tax']=this.Tax; 
                    /**
                     * Sending including GST as accepted by Transactional Panel, in case of Viewing DO
                     */
                    this.exportRecord['includingGST'] = (this.includingGST.getValue()?"on":"false");
                }
                this.exportRecord['isfromdeliveryorder'] = true;
                 this.exportRecord['isapplytaxtoterms']=this.applyTaxToTermsChk.getValue();
                  callInvoice(false, undefined, undefined, false, false, true, this.exportRecord);
            } else {
                if(this.readOnly && !this.record.data.isLinkedTransaction && this.exportRecord == undefined){                     //Additional reqired  information is sent in case of view mode
                    this.exportRecord = this.record.data;
                    this.exportRecord["billid"] = this.record.data.billid;
                     this.exportRecord["billno"] = this.record.data.billno;
                     this.exportRecord["term"] = this.record.data.termid;

                    this.exportRecord["ispercentdiscount"]=false;
                    this.exportRecord["isfromviewmode"]=this.isViewTemplate;
                }
                this.exportRecord['isfromgoodsreceipt'] = true;
                 this.exportRecord['isapplytaxtoterms']=this.applyTaxToTermsChk.getValue();
                callGoodsReceipt(false, undefined, undefined, undefined, false, false, false, false, false, true, this.exportRecord);
            }
                                          
            if (Wtf.getCmp("generateinvoice" + this.id)) {
                Wtf.getCmp("generateinvoice" + this.id).disable();
            }
        }
    });
     
    Wtf.apply(this,{
        bbar:[this.saveBttn, this.savencreateBttn, this.pushToPlannerBttn, {
            text:WtfGlobal.getLocaleText("acc.common.email"),  // "Email",
            tooltip : WtfGlobal.getLocaleText("acc.common.emailTT"),  //"Email",
            id: "emailbut" + this.id,
            scope: this,
            hidden:this.readOnly,
            disabled : true,
        handler: function(){this.callEmailWindowFunction(this.response, this.request)},
            iconCls: "accountingbase financialreport"
        },(!WtfGlobal.EnableDisable(this.uPermType, this.printPermType) || !WtfGlobal.EnableDisable(this.uPermType, this.exportPermType))?this.singlePrint:"",
//        (!WtfGlobal.EnableDisable(this.uPermType, this.printPermType))?this.singleRowPrint:"",
        {
            text:  WtfGlobal.getLocaleText("acc.template.posttext") , //'<b>Post Text</b>',
            cls: 'pwnd add',
            id: "posttext" + this.id,              // Post Text
            hidden:this.readOnly,
            tooltip : WtfGlobal.getLocaleText("acc.field.UsePostTextoptiontoinserttextafterSignature"),       
            style:" padding-left: 15px;",
            scope: this,
            handler: function() {
                this.getPostTextEditor(this.postText);
            }   
        },this.showAddrress,this.attachFilesBtn,this.generatePI,'->']
    });
    Wtf.account.DeliveryOrderPanel.superclass.constructor.call(this,config);
    this.addEvents({
        'update':true
    });
   this.on('populateGlobalDimensionValue',this.setCustomdimensionFields,this);
   /**
    * Product Grid not showing properly after Expanding/Collapsing Navigation Panel.
    */
   this.on('resize', function (panel) {
        panel.doLayout();
        if (panel.Grid) {
            panel.Grid.doLayout();
            panel.Grid.getView().refresh();
        }
    }, this);
}
/**
 *Moved this function to wtfmain-ex.js
 */
//function editInvoiceExchangeRates(winid,basecurrency,foreigncurrency,exchangerate,exchangeratetype){
//    function showInvoiceExternalExchangeRate(btn,txt){
//        if(btn == 'ok'){
//            if(txt.indexOf('.')!=-1)
//                var decLength=(txt.substring(txt.indexOf('.'),txt.length-1)).length;
//            if(isNaN(txt)||txt.length>15||decLength>7||txt==0){
//                Wtf.MessageBox.show({
//                    title: WtfGlobal.getLocaleText("acc.setupWizard.curEx"), //'Exchange Rate',
//                    msg: WtfGlobal.getLocaleText("acc.nee.55")+
//                    "<br>"+WtfGlobal.getLocaleText("acc.nee.56")+
//                    "<br>"+WtfGlobal.getLocaleText("acc.nee.57"),
//                    buttons: Wtf.MessageBox.OK,
//                    icon: Wtf.MessageBox.WARNING,
//                    //                    width: 300,
//                    scope: this,
//                    fn: function(){
//                        if(btn=="ok"){
//                            editInvoiceExchangeRates(winid,basecurrency,foreigncurrency,exchangerate,exchangeratetype);
//                        }
//                    }
//                });
//            }else{
//                if(exchangeratetype!=undefined)
//                    Wtf.getCmp(winid).exchangeratetype=exchangeratetype
//                if(exchangeratetype!=undefined&&exchangeratetype=='foreigntobase'){
//                    if((txt*1)>0) {
//                        Wtf.getCmp(winid).revexternalcurrencyrate=txt;
//                        var exchangeRateNormal = 1/((txt*1)-0);
//                        exchangeRateNormal = (Math.round(exchangeRateNormal*Wtf.Round_Off_Number))/Wtf.Round_Off_Number;
//                        Wtf.getCmp(winid).externalcurrencyrate=exchangeRateNormal;
//                    } 
//                }else{
//                    Wtf.getCmp(winid).externalcurrencyrate=txt;
//                }
//                Wtf.getCmp(winid).updateFormCurrency();
//            }
//        }
//    }
//    Wtf.MessageBox.prompt(WtfGlobal.getLocaleText("acc.setupWizard.curEx"),'<b>'+WtfGlobal.getLocaleText("acc.nee.58")+'</b> 1 '+basecurrency+' = '+exchangerate+' '+foreigncurrency +
//        '<br><b>'+WtfGlobal.getLocaleText("acc.nee.59")+'</b>', showInvoiceExternalExchangeRate);
//}

Wtf.extend(Wtf.account.DeliveryOrderPanel,Wtf.account.ClosablePanel,{
    autoScroll: true,// layout:'border',//Bug Fixed: 14871[SK]
    bodyStyle: {background:"#DFE8F6 none repeat scroll 0 0"},
    border:'false',
    externalcurrencyrate:0,
    isCurrencyLoad:false,
    currencyid:null,
    exchangeratetype:"",
    revexternalcurrencyrate:0,
    //isMultiSelectFlag:false,
    custdatechange:false,
    closable : true,
    cash:false,
    
    //    fromOrder:false,
    loadRecord:function(){
        if(this.record!=null&&!this.dataLoaded){
            this.fromLinkCombo.disable();
            this.PO.disable();  
            var data=this.record.data;
            this.externalcurrencyrate=this.record.data.externalcurrencyrate;
            this.NorthForm.getForm().loadRecord(this.record);
            this.currencyStore.on('load',function () {
                this.Currency.setValue(data.currencyid);
                this.updateFormCurrency();
            },this);
           
            if(this.copyInv){//iF COPY AND SEQUENCE FORMAT IS NA
                this.Number.setValue("");                
            }else{
                this.Number.setValue(data.billno);
            }
            var store=(this.isCustomer?Wtf.customerAccStore:Wtf.vendorAccStore)
            var index=store.findBy( function(rec){
                var parentname=rec.data['accid'];
                if(parentname==data.personid)
                    return true;
                else
                    return false;
            })
            var prodTaxSet = (this.record.data.includeprotax != undefined && this.record.data.includeprotax != "") ? this.record.data.includeprotax : false;
        if (prodTaxSet) {
            this.applyTaxToTermsChkHideShow(true);
            this.applyTaxToTermsChk.setValue(data.isapplytaxtoterms);
        } else {
             this.applyTaxToTermsChkHideShow(false);
        }
            if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
                if (!this.record.data.isInterstateParty ) {
                    WtfGlobal.hideFormElement(this.FormType);                
                } else {
                    if (this.record.data.formtypeid != undefined && this.record.data.formtypeid == 0) {
                        this.FormType.setValue(1);
                    } else {
                        this.FormType.setValue(this.record.data.formtypeid);
                    }
                }
                //ERP-34970(ERM-534)
                if(this.record && this.record.data['gtaapplicable']){
                    this.GTAApplicable.setValue(this.record.data['gtaapplicable']);
                    updateTermDetails(this.Grid);
                }
                if(this.record && this.record.data['ewayapplicable']){
                    this.isEWayCheck.setValue(this.record.data['ewayapplicable']);                    
                }
                if (!this.isCustomer) {
                    if (this.record.data.GSTINRegTypeDefaultMstrID != undefined && this.record.data.GSTINRegTypeDefaultMstrID !== "" && this.record.data.GSTINRegTypeDefaultMstrID === Wtf.GSTRegMasterDefaultID.Unregistered) {
                        this.purchaseFromURD = true;
                    } else {
                        this.purchaseFromURD = false;
                    }
                }
                if (this.isIndiaGST) {
                    if (this.record.data.CustomerVendorTypeId != undefined) {
                        this.CustomerVendorTypeId = this.record.data.CustomerVendorTypeId;
                    }
                    if (this.record.data.GSTINRegistrationTypeId != undefined) {
                        this.GSTINRegistrationTypeId = this.record.data.GSTINRegistrationTypeId;
                    }
                     if (this.record.data.gstin != undefined) {
                        this.gstin = this.record.data.gstin;
                    }
                    if (this.record.data.gstdochistoryid != undefined) {
                        this.gstdochistoryid = this.record.data.gstdochistoryid;
                    }
                    /**
                     * Set GST default master item id  
                     */
                    if (this.GSTINRegTypeDefaultMstrID==undefined && this.record.data.GSTINRegTypeDefaultMstrID != undefined) {
                        this.GSTINRegTypeDefaultMstrID = this.record.data.GSTINRegTypeDefaultMstrID;
                    }
                    if (this.CustVenTypeDefaultMstrID==undefined && this.record.data.CustVenTypeDefaultMstrID != undefined) {
                        this.CustVenTypeDefaultMstrID = this.record.data.CustVenTypeDefaultMstrID;
                    }
                }
            }
//            if(index>=0) {
//                this.Name.setValue(data.personid);
//            }
            
            this.includingGST.reset();
            if(this.isViewTemplate==true){
                this.includingGST.disable()
            }else{
                this.includingGST.enable();
            }
            
            /*check/uncheck include GST on load record edit/view case*/
           
            if(this.record.data.gstIncluded!=undefined){
                this.includingGST.setValue(this.record.data.gstIncluded);
                if(this.record.data.gstIncluded){
                    this.includeProTax.setValue(true);
                    this.includeProTax.disable();
                    var rowRateIncludingGstAmountIndex = this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
                    if (rowRateIncludingGstAmountIndex != -1) {
                        if (this.includingGST.getValue()) {
                            this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex, !this.includingGST.getValue());
                        }
                    }
                }
            }
            if (prodTaxSet) {
                this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                this.applyTaxToTermsChk.setValue(data.isapplytaxtoterms);
            } else {
                this.applyTaxToTermsChkHideShow(false);
            }
            this.Name.setValForRemoteStore(data.personid, data.personname,data.hasAccess); // create record and set value
            if(this.Grid.getStore().data.items.length>0){  // for showing multiple link numbers in number field 
                var linkType=-1;
                var storeData = [],linkNumbers=[],linkIDS=[];
                this.POStore.removeAll();
                this.Grid.getStore().each(function(rec){
                    if(this.copyInv) { 
                        rec.data.linkid=""; 
                        rec.data.rowid=""; 
                        rec.data.linktype="";
                        rec.data.linkto="";
                        if(rec.data.isBatchForProduct || rec.data.isSerialForProduct){
                            rec.data.batchdetails=""; //in copy case batchdetails made empty
                        }
                    } else {
                        if((rec.data.linkto!=""&&rec.data.linkto!=undefined) && (rec.data.linktype!=-1 && rec.data.linktype!=undefined)){
                            var isExistFlag=false;
                            for(var count=0;count<linkNumbers.length;count++){
                                if(rec.data.linkto==linkNumbers[count]){
                                    isExistFlag=true;
                                    break;
                                }
                            }
                            if(isExistFlag==false){
                                linkNumbers.push(rec.data.linkto);
                                linkIDS.push(rec.data.linkid);
                            }                                                        
                            linkType=rec.data.linktype;                            
                            var newRec=new this.PORec({
                                billid:rec.data.linkid,
                                billno:rec.data.linkto,
                                /*ERM-1037
                                 * Get the date of linked document to restrict linking of future dated document
                                 */
                                date:rec.data.linkDate    
                            });
                            storeData.push(newRec);
                        }
                    }
                    
                    if (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId && rec.json !=undefined && rec.json.partamount!=undefined && rec.json.partamount>0) {
                      /* Disabling following fields when DO(linked with partial invoice) is edited*/
                            var unitPrice = this.Grid.getColumnModel().findColumnIndex("rate")
                            this.Grid.getColumnModel().setEditable(unitPrice, false)
                            var discountType = this.Grid.getColumnModel().findColumnIndex("discountispercent")
                            this.Grid.getColumnModel().setEditable(discountType, false)
                            var discount = this.Grid.getColumnModel().findColumnIndex("prdiscount")
                            this.Grid.getColumnModel().setEditable(discount, false)
                            var productTax = this.Grid.getColumnModel().findColumnIndex("prtaxid")
                            this.Grid.getColumnModel().setEditable(productTax, false)
                            var deliveredQuantity = this.Grid.getColumnModel().findColumnIndex("dquantity")
                            this.Grid.getColumnModel().setEditable(deliveredQuantity, false)
                            var actualQuantity = this.Grid.getColumnModel().findColumnIndex("quantity")
                            this.Grid.getColumnModel().setEditable(actualQuantity, false)   
                    }
                },this);
                if(storeData.length>0){
                    this.POStore.add(storeData);
                }
                if(linkIDS.length>0){
                    this.originallyLinkedDocuments = linkIDS.toString();
                    this.Name.disable();
                    this.fromPO.disable();
                    this.fromLinkCombo.disable();
                    this.PO.disable();
                    this.fromPO.setValue(true);                
                    this.PO.setValue(linkIDS);
                    if(this.isTaxable != undefined && this.isTaxable.getValue() == true){
                        this.includingGST.disable(); 
                    }
                }
                if(linkType!=-1){
                    this.fromLinkCombo.setValue(linkType);
                }
            }            
            if((this.copyInv || this.isEdit)){
                //ERP-41011
                if(this.isCustomer){
                    // In edit and copy case setting remote store. ['hasAccess] is important else it won't save in copy case 
                    if(this.record.data.salesPerson!="" && this.record.data.salespersonname!=""){
                        this.users.setValForRemoteStore(this.record.data.salesPerson , this.record.data.mapSalesPersonName,this.record.data.hasAccess);
                    }else{ //setting None as record is not present
                        this.users.setValForRemoteStore("None" ,"None",true);
                    }
                }else{ //Purchase Side
                    // In edit and copy case setting remote store. ['hasAccess] is important else it won't save in copy case 
                    if(this.record.data.agent!="" && this.record.data.agentname!=""){
                        this.users.setValForRemoteStore(this.record.data.agent , this.record.data.agentname,this.record.data.hasAccess);
                    }else{ //setting None as record is not present
                        this.users.setValForRemoteStore("None" ,"None",true);
                    }
                }   
            }
            if(data.termid!="" && data.termid!=null && data.termid!=undefined){
                this.termds.on("load", function(){
                    if(this.isCustomer && this.invoicefromorder ){
                        this.Term.setValue(this.invoicefromorderrec.term);
                    }else{
                        this.Term.setValue(data.termid);
                    } 
                }, this);
                this.termds.load();
            }
            this.Memo.setValue(data.memo);
            this.billDate.setValue(new Date(data.date)); 
            if(this.challanNumber && data.challannumber){
                this.challanNumber.setValue(data.challannumber);                                                            
            }
            if (data.customerporefno != null) {
                this.CustomerPORefNo.setValue(data.customerporefno);
            }
            this.CostCenter.setValue(data.costcenterid);
            this.editedBy.setValue(data.lasteditedby);
            this.postText = (this.record.json!=undefined) ? this.record.json.posttext : "";
            /*
             * IF DO created from Cash sales with Auto DO then hide the Credit Term and make it as non-mandatory.
             */
            if (this.moduleid === Wtf.Acc_Delivery_Order_ModuleId) {
                if (!this.copyInv && data.isdofromautocashsales !== "" && data.isdofromautocashsales != null && data.isdofromautocashsales != undefined && data.isdofromautocashsales) {
                    this.Term.allowBlank = true;
                    WtfGlobal.hideFormElement(this.Term);
                }
            }
            //ERP-35380 for Copying Pick Pack DO status should always be Picked for new DO
            if (!(this.copyInv && Wtf.account.companyAccountPref.pickpackship && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId)) {
                this.DOStatusCombo.setValue(data.statusID);
            }
            if (!Wtf.account.companyAccountPref.deliveryPlanner && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
                //                this.driverStore.on('load', function() {
                //                    this.driverNo.setValue(data.driver);
                //                }, this);
                this.driverStore.load();
            }
            if (data.includeprotax) {
                this.includeProTax.setValue(true);
                this.isTaxable.setValue(false);//when selecting record with product tax.Tax should get disabled.
                this.isTaxable.disable();
                this.Tax.setValue("");
                this.Tax.disable();
            }else {
                this.includeProTax.setValue(false);
                if (this.isCustomer) {
                    if (Wtf.account.companyAccountPref.unitPriceInDO) {
                        this.showGridTax(null, null, true);
                    }
                } else {
                    if (Wtf.account.companyAccountPref.unitPriceInGR) {
                        this.showGridTax(null, null, true);
                    }
                }
                this.Tax.enable();//required because when selected multiple records & changing to select single record.Before it was getting disabled.
                this.isTaxable.enable();
            }
            if ((data.taxid == "")) {//generate so or po it should not show taxid
                this.isTaxable.setValue(false);
                this.Tax.setValue("");
                this.Tax.disable();
            }else if(!data.includeprotax){
                this.Tax.setValue(data.taxid);
                this.isTaxable.enable();
                this.Tax.enable();//enable the tax when taxid is present-for edit case it was not required but for copy its is required.
                this.isTaxable.setValue(true);
            }
                 
            this.dataLoaded=true;
            if(this.Grid){
                this.Grid.forCurrency =data.currencyid;
                this.Grid.affecteduser=data.personid;
                this.Grid.billDate=data.date;
            }
            if(this.copyInv && this.Grid){
                this.Grid.billDate=Wtf.serverDate;
            }
            
            this.setTermValues(data.termdetails);
            this.updateSubtotal();
        
            if (this.isLinkedTransaction && !this.copyInv) {
                if (this.NorthForm.getForm().items != undefined && this.NorthForm.getForm().items != null) {
                    for (var i = 0; i < this.NorthForm.getForm().items.length; i++) {
                        this.NorthForm.getForm().items.item(i).disable();
                    }
                }
                this.isTaxable.disable();
                this.Tax.disable();
                this.toggleBtnPanel.disable();
                this.includingGST.disable(); 
                if (Wtf.getCmp("posttext" + this.id)) {
                    Wtf.getCmp("posttext" + this.id).disable();
                }
                this.showAddrress.disable();
                this.attachFilesBtn.disable();
                /*Enabling the required fields*/
                this.CostCenter.enable();
                this.Memo.enable();
                this.shipDate.enable();
                this.DOStatusCombo.enable();
                this.shipvia.enable();
                this.fob.enable();
                if (this.CustomerPORefNo && (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId)) {
                    this.CustomerPORefNo.enable();
                }
                this.permitNumber.enable();
                this.users.enable();

            }
            if(this.record.data.isFreeGift){
                if(this.includingGST){
                    this.includingGST.disable();
                }
                if(this.includeProTax){
                    this.includeProTax.disable();
                }
                if(this.isTaxable){
                    this.isTaxable.disable();
                }
                if(this.Tax){
                    this.Tax.disable();
                }
                if(this.PO){
                    this.PO.disable();
                }
                if(this.fromPO){
                    this.fromPO.disable();
                }
            }
        /**
         * Populate Customer/ Vendor GST details in Edit/   Copy Case
         */
            this.populateGSTDataOnEditCopy();
        }
              
           /*
          * Populate data while generating Sales/Purchase Invoice from Sales/Purchase Order
          */
        if(this.invoicefromorder){
            if (this.isCustomer) {
                if (this.invoicefromorderrec.isEdit && this.invoicefromorderrec.personid!=undefined && this.invoicefromorderrec.personid!="") {
                    this.Name.setValForRemoteStore(this.invoicefromorderrec.personid, this.invoicefromorderrec.personname,this.invoicefromorderrec.hasAccess);
                } else {
                    this.Name.setValue(this.invoicefromorderrec.customer);
                }

            } else {
                if (this.invoicefromorderrec.isEdit && this.invoicefromorderrec.personid!=undefined && this.invoicefromorderrec.personid!="") {
                    this.Name.setValForRemoteStore(this.invoicefromorderrec.personid, this.invoicefromorderrec.personname,this.invoicefromorderrec.hasAccess);
                } else {
                    this.Name.setValue(this.invoicefromorderrec.vendor);
                }
            }
            
            var index=this.Name.store.find('accid',this.Name.getValue());
            var rec=this.Name.store.getAt(index);
            this.onNameSelect(this.Name,rec,index)
            this.fromPO.setValue(true);
           
            this.billid = this.invoicefromorderrec.billid;
           
               var recIndex = 0;
                this.fromLinkCombo.setValue(0);
                
                /* DO/GR document currency will set according to Source document SO/PO*/
               this.Currency.setValue(this.invoicefromorderrec.currencyid)
        
             this.enableNumber(this.fromLinkCombo, this.fromLinkCombo.store.getAt(recIndex));
     
            /* Setting default fields in Invoice from*/
            this.includeProTax.setValue((this.invoicefromorderrec.includeprotax=="true" || this.invoicefromorderrec.includeprotax==true) ? true : false);
            this.Memo.setValue(this.invoicefromorderrec.memo); 
            //ERP-41011:Above this code is handled already
//            this.users.setValue(this.isCustomer ? this.invoicefromorderrec.salesPerson : this.invoicefromorderrec.agent);
            this.shipDate.setValue(this.invoicefromorderrec.shipdate);
            this.shipvia.setValue(this.invoicefromorderrec.shipvia);
            this.CostCenter.setValue(this.invoicefromorderrec.costcenter);
            this.fob.setValue(this.invoicefromorderrec.fob);
            if (this.invoicefromorderrec.term != undefined) 
            {
                this.Term.setValue(this.invoicefromorderrec.term);
            }
            this.SupplierInvoiceNo.setValue(this.invoicefromorderrec.supplierinvoiceno);
            this.PO.setValue(this.invoicefromorderrec.billid);
            this.CustomerPORefNo.setValue(this.invoicefromorderrec.customerporefno);
            this.includingGST.setValue(this.invoicefromorderrec.includingGST=="on" ? true :false);
            if (this.invoicefromorderrec.taxid != undefined && this.invoicefromorderrec.taxid != "") {
                this.Tax.setValue(this.invoicefromorderrec.taxid);
                this.isTaxable.enable();
                this.Tax.enable();
                this.isTaxable.setValue(true);
                //disabling gst and product tax
                this.includingGST.setValue(false);
                this.includingGST.disable();
                this.includeProTax.setValue(false);
                this.includeProTax.disable();
                var productTax = this.Grid.getColumnModel().findColumnIndex("prtaxid");
                this.Grid.getColumnModel().setHidden(productTax, true);
                var taxamount = this.Grid.getColumnModel().findColumnIndex("taxamount");
                this.Grid.getColumnModel().setHidden(taxamount, true);
            } else {
                this.Tax.setValue("");
                this.isTaxable.setValue(false);
                this.isTaxable.disable();
            }
            //Setting invoice term values given in SO/DO/SI/GR/PO/PI to SO/DO/SI/GR/PO/PI     ERP-33441
            if (this.invoicefromorderrec.termdetails != undefined) {
                this.setTermValues(this.invoicefromorderrec.termdetails);
            }
        }
        
        if(this.isTaxable != undefined && this.isTaxable.getValue()){
            /*This block will execute only when Global Level tax is applied
            *True means Hidden False
            *This function written in CommonERPComponent.js
            */
            this.HideShowLinkedTermTaxAndTermTaxAmountCol(true);
        }
        if(this.readOnly){
            this.isTaxable.disable();
            this.Tax.disable();
        }
        this.termds.on("load", function() {
            if (this.invoicefromorder) {
                if (this.invoicefromorderrec.term != undefined)
                {
                    this.Term.setValue(this.invoicefromorderrec.term);
                }
            else{
                this.Term.setValue(data.termid);
            }
                
            }
        }, this);        
    },
    onRender:function(config){                
        this.add(this.NorthForm,this.formpPanelOfbutton,this.Grid,this.southPanel);                       
        Wtf.account.DeliveryOrderPanel.superclass.onRender.call(this, config);
        this.isClosable=false
        if(!this.isCustomer){
            this.permitNumber.hideLabel=false;
            this.permitNumber.hidden=false;
        }
        this.initForClose();   
        if( this.isEdit || this.invoicefromorder ){
            this.isClosable=false          // Set Closable flag for edit and copy case
            this.loadEditableGrid();
        }
        if(this.invoicefromorder){
         /*Loading Grid */
            this.loadGridForSetFromForms();
        }
        if(this.isEdit || this.copyInv){
            this.showAddrress.enable();
            this.attachFilesBtn.enable();
        }
        // hide form fields
        this.hideFormFields();
        /**
         * ERP-32829 
         * set GST flag based on Date 
         */
//        if(WtfGlobal.GSTApplicableForCompany()==Wtf.GSTStatus.OLDNEW || WtfGlobal.GSTApplicableForCompany()==Wtf.GSTStatus.NEW){
//            this.setGSTFlagUsingApplicableDate(Wtf.serverDate);
//        }
        if (Wtf.account.companyAccountPref.countryid === Wtf.CountryID.MALAYSIA) {
            this.enableDisableTaxUsingGSTActivationDate(); // enable/disble tax
        }
        this.on("activate",function(){
            if (this.includeProTax && this.includeProTax.getValue()) {
                this.applyTaxToTermsChkHideShow(true);
            }else if(!this.isEdit){
                this.applyTaxToTermsChkHideShow(false);
            }
        },this);
        
        /*---If check "Map taxes at product level" true then by default "Include Product Tax" field will be Yes--------  */
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
            this.includeProTax.setValue(true);
        }      
    },
    enableDisableTaxUsingGSTActivationDate: function() {
        var date = this.billDate.getValue() === "" ? new Date() : new Date(this.billDate.getValue());
        var isTaxShouldBeEnable = WtfGlobal.isTaxShouldBeEnable(date.clearTime());
        if(this.isFreeGift && this.isFreeGift.getValue()){
                isTaxShouldBeEnable = false;
        }
        if (!isTaxShouldBeEnable) {
            if (this.isTaxable) { // include total tax
                this.isTaxable.setDisabled(true);
            }
            if (this.includeProTax) {
                this.includeProTax.setDisabled(true);
            }
        } else {
            if (this.isTaxable) {// include total tax
                this.isTaxable.setDisabled(false);
            }
            if (this.includeProTax) { // include product tax
                this.includeProTax.setDisabled(false);
            }
        }
    },
    calCulateNonTaxableTermAmount: function () {
        var OtherTermNonTaxableAmount = 0;
        if (Wtf.account.companyAccountPref.isLineLevelTermFlag == 1) {   // Term Amount of line item showing as tax in  Line level terms Company.
            var store = this.Grid.store;
            var totalCnt = store.getCount();
            for (var cnt = 0; cnt < totalCnt; cnt++) {
                var lineAmt = store.getAt(cnt).data.OtherTermNonTaxableAmount;
                if (typeof lineAmt == 'number')
                    OtherTermNonTaxableAmount += getRoundedAmountValue(lineAmt);
            }
        }
        return getRoundedAmountValue(OtherTermNonTaxableAmount);
    },
    hideFormFields:function(){
        if(this.isCustomer){
            this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.deliveryOrder);
        }else{
            this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.goodsReceipt);
        }
    },
    addSalesPerson:function(){
        this.isCustomer ? addMasterItemWindow('15') : addMasterItemWindow('20');
    },
    addDriver:function(){
        addMasterItemWindow('26');
    },
    onNameSelect:function(combo,rec,index){
        if(combo.getValue()==this.nameBeforeSelect){ //If same name selected no need to do any action 
            return;
        }
                   if (this.isGST) {
                this.addressMappingRec=rec.data.addressMappingRec;
                /**
                 * ERP-32829 
                 * code for New GST  i.e. populate dimension using dimension
                 */
       
                if (rec.data.currentAddressDetailrec != undefined) {
                    this.addressDetailRecForGST=rec.data.currentAddressDetailrec[0];
                     if (this.isIndiaGST) {
                        this.applyGSTFieldsBasedOnDate();
                    } else {
                        if (rec.data.uniqueCase != undefined) {
                            this.uniqueCase = rec.data.uniqueCase;
                            this.sezfromdate = rec.data.sezfromdate;
                            this.seztodate = rec.data.seztodate;
                            this.transactiondateforgst = this.billDate.getValue();
                        }
                    }
               
                    if (!this.isModuleForAvalara) {
                        var obj = {};
                        obj.tagsFieldset=this.tagsFieldset;
                        obj.currentAddressDetailrec=this.addressDetailRecForGST;
                        obj.mappingRec=this.addressMappingRec;
                        obj.isCustomer=this.isCustomer;
                        obj.isShipping=this.isShipping;
                        populateGSTDimensionValues(obj)
                    }
                }
                /**
                 * Check and show alert GST details for Customer and Vendor if not available 
                 */
//                var cust_Vendparams = {};
//                cust_Vendparams.rec = rec;
//                cust_Vendparams.isCustomer = this.isCustomer;
//                checkAndAlertCustomerVendor_GSTDetails(cust_Vendparams);
//                
//            if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
//                if (!this.isCustomer && rec.data.GSTINRegTypeDefaultMstrID != undefined && rec.data.GSTINRegTypeDefaultMstrID !== "") {
//                    if (rec.data.GSTINRegTypeDefaultMstrID === Wtf.GSTRegMasterDefaultID.Unregistered) {
////                        this.GTAApplicable.setValue(false);
////                        this.GTAApplicable.setDisabled(true);
//                        this.purchaseFromURD = true;
//                    } else {
////                        this.GTAApplicable.setValue(false);
////                        this.GTAApplicable.setDisabled(false);
//                        this.purchaseFromURD = false;
//                    }
//                } 
//            }
        } 
        this.doOnNameSelect(combo,rec,index);
          
    },
    /**
     * Function to get GST fields data based on date.
     */
    applyGSTFieldsBasedOnDate: function(isAddressChanged) {
      if (this.Name.getValue() == undefined || this.Name.getValue() == ''){
          return;
      }
        Wtf.Ajax.requestEx({
            url: this.isCustomer ? "ACCCustomerCMN/getCustomerGSTHistory.do" : "ACCVendorCMN/getVendorGSTHistory.do",
            params: {
                customerid: this.Name.getValue(),
                vendorid: this.Name.getValue(),
                returnalldata: true,
                isfortransaction: true,
                transactiondate: WtfGlobal.convertToGenericDate(this.billDate.getValue())

            }
        }, this, function(response) {
            if (response.success) {
                /**
                 * Validate GST details
                 */
                isGSTDetailsPresnetOnTransactionDate(response,this, this.Grid,this.Name);
                this.ignoreHistory = true;
                this.GSTINRegistrationTypeId = response.data[0].GSTINRegistrationTypeId;
                this.gstin = response.data[0].gstin;
                this.CustomerVendorTypeId = response.data[0].CustomerVendorTypeId;
                this.uniqueCase = response.data[0].uniqueCase;
                this.transactiondateforgst = this.billDate.getValue();
                this.CustVenTypeDefaultMstrID=response.data[0].CustVenTypeDefaultMstrID;
                this.GSTINRegTypeDefaultMstrID=response.data[0].GSTINRegTypeDefaultMstrID;
                /**
                 * IDNIA country if Merchant Exporter check on then check GST Registration type and Customer/Vendor Type
                 * is Merhcant Exporter allow in for "Registered" and "NA" type
                 */
                onGSTDetailsChangeValidateMerchantExporterApplicability(this);
                var cust_Vendparams = {};
                var record = {};
                record.data = response.data[0];
                cust_Vendparams.rec = record;
                cust_Vendparams.isCustomer = this.isCustomer;
                checkAndAlertCustomerVendor_GSTDetails(cust_Vendparams);
                if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
                    if (!this.isCustomer) {
                        if (response.data[0].GSTINRegTypeDefaultMstrID != undefined && response.data[0].GSTINRegTypeDefaultMstrID !== "" && response.data[0].GSTINRegTypeDefaultMstrID === Wtf.GSTRegMasterDefaultID.Unregistered) {
                            this.purchaseFromURD = true;
                        } else {
                            this.purchaseFromURD = false;
                        }
                    }
                }
                if (this.isPurchasesTransaction && this.purchaseFromURD) {
                    /*** If purchases is from Unregistered dealer ***/
                    if (this.isRCMApplicableInPreferences && this.GTAApplicable.getValue()) {
                    /**
                     * Appy GST for URD >> RCM
                     */    
                    this.uniqueCase = Wtf.GSTCustVenStatus.APPLYGST;
                    } else {
                        /**
                         * Apply NO GST for URD>> NON RCM
                         */
                        this.uniqueCase = Wtf.GSTCustVenStatus.NOGST;
                    }
                }
                /**
                 * On Address Changes done then need to make getGSTForProduct Request to update tax Details
                 */
                if(this.keepTermDataInLinkCase==false || isAddressChanged){
                    processGSTRequest(this, this.Grid);
                }
            }
        });
    },
/**
 * ERP-34199
 * On Edit/ Copy case set GST details
 */
    populateGSTDataOnEditCopy: function () {
        // this.copyInv - in VQ  copy 
        if (this.isGST && (this.isEdit || this.copyInv)) {
            //  var perStore = this.isCustomer ? Wtf.customerAccRemoteStore : Wtf.vendorAccRemoteStore;
            this.individualPersonDetails = new Wtf.data.Store({
                url: this.isCustomer ? "ACCCustomer/getCustomersForCombo.do" : "ACCVendor/getVendorsForCombo.do",
                baseParams: {
                    mode: 2,
                    group: this.isCustomer ? 10 : 13,
                    deleted: false,
                    nondeleted: true,
                    common: '1'
                },
                reader: new Wtf.data.KwlJsonReader({
                    root: "data"
                }, Wtf.personRec)
            });
            this.individualPersonDetails.on('load', function (storeObj, recArr) {
                var index = this.individualPersonDetails.find('accid', this.record.data.personid);
                if (index != -1) {
                    var record = this.individualPersonDetails.getAt(index);
                    this.setGSTDetailsOnEditCase(record);
                }
            }, this);
            if (this.isCustomer) {
                this.individualPersonDetails.load({
                    params: {
                        selectedCustomerIds: this.record.data.personid
                    },
                    scope: this
                });
            } else {
                this.individualPersonDetails.load({
                    params: {
                        vendorid: this.record.data.personid
                    },
                    scope: this
                });
            }
        }
    },
/**
 * ERP-34199
 * On Edit/ Copy case set GST details
 */    
    setGSTDetailsOnEditCase: function (record) {
        this.addressMappingRec = record.data.addressMappingRec;
//        if (record.data.currentAddressDetailrec != undefined) {
//            if (record.data.uniqueCase != undefined) {
//                this.uniqueCase = record.data.uniqueCase;
//                this.sezfromdate = record.data.sezfromdate;
//                this.seztodate = record.data.seztodate;
//                this.transactiondateforgst = this.billDate.getValue();
//            }
//            this.addressDetailRecForGST = record.data.currentAddressDetailrec[0];
//        }
    },   
    /**
     * ERP-32829 
     * Function to check whether transaction created using New GST or Old GST
     */
    setGSTFlagUsingApplicableDate: function(date) {
        if (date != undefined) {
            var gstapplieddate = Wtf.account.companyAccountPref.gstapplieddate;
            if (date >= gstapplieddate) {
                if (!this.isGST && this.Grid.getStore().getCount() > 1) {
                    this.Grid.getStore().removeAll();
                    this.Grid.addBlankRow();
                    this.Grid.productComboStore.load();
                }
                this.isGST = true;
                this.Grid.isGST = true;
            } else {
                if(this.isGST && this.Grid.getStore().getCount() > 1){
                    this.Grid.getStore().removeAll();
                    this.Grid.addBlankRow();
                    this.Grid.productComboStore.load();
                }
                this.isGST = false;
                this.Grid.isGST = false;
            }
            if (this.Grid.getStore().getCount() > 1) {
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoice.gridDataWillCleared"), function(btn) {
                    if (btn == "yes") {
                        this.Grid.getStore().removeAll();
                        this.Grid.addBlankRow();
                        this.Grid.productComboStore.load();
                        this.updateSubtotal(this, true);
                        this.Grid.updateTermDetails();

                    } else {

                    }
                }, this);
            } else {
            }
        }
    },
    doOnNameSelect:function(combo,rec,index){
        this.externalcurrencyrate=0;
        if (!this.isFromPurchaseOrder) {
            this.changeTemplateSymbol();
        }
        var customer= this.Name.getValue();
        if(Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && !this.isCustomer){
            this.updateVATNumbers(rec);
        }
        
        if (this.isCustomer) {
            if (Wtf.account.companyAccountPref.unitPriceInDO) {
                this.showGridTax(null, null, true);
            }
//            Wtf.salesPersonFilteredByCustomer.load(); //ERP-41011 commenting as we are using remote store
        } else {
            if (Wtf.account.companyAccountPref.unitPriceInGR) {
                this.showGridTax(null, null, true);
            }
//            Wtf.agentStore.load();/ERP-41011 commenting as we are using remote store
        }
        var perstore= null;
        if(this.custVenOptimizedFlag) {
            perstore = this.isCustomer? Wtf.customerAccRemoteStore:Wtf.vendorAccRemoteStore;
        } else {
            perstore=this.isCustomer? Wtf.customerAccStore:Wtf.vendorAccStore
        }
        var index = perstore.find('accid',this.Name.getValue());
        if(index != -1){
            var storerec=perstore.getAt(index);                        
            this.Term.setValue(storerec.data['termid']);
        }else if(rec.data['termid']){
            this.Term.setValue(rec.data['termid']);
        }
        this.updateData();
        if (this.isCustomer) {
            this.setSalesPerson(combo, rec, index);
        } else {
            this.setAgent(combo, rec, index);
        }
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
            if(rec.data.interstateparty == true){
                this.FormType.allowBlank=false;//If Vendor/Customer is "InsterState Party" enable then "Form to Issue" will be Mandatory.
                WtfGlobal.showFormElement(this.FormType);
                if(rec.data.cformapplicable == true){//If Selected Vendor/Customer has C form applicable, then by Default C form will populate.
                    this.FormType.setValue(this.FormSelectionStore.getAt(1).data.id);
                }else{
                    this.FormType.setValue(this.FormSelectionStore.getAt(0).data.id);
                }
            }else{
                this.FormType.allowBlank=true;
                WtfGlobal.hideFormElement(this.FormType);
            }
        }

        this.Grid.setDisabled(false);
           
    },
     onBeforesalesPersonLoad: function(store, obj) {
        if (!obj.params) {
            obj.params = {};
        }
            obj.params.customerid = this.Name.getValue();
    },
     onBeforeAgentLoad: function(store, obj) {
        if (!obj.params) {
            obj.params = {};
        }
            obj.params.vendorid = this.Name.getValue();
    },
    
    updateVATNumbers: function(rec){//India Country Secific
       this.INDCountryCenterTplSummary.overwrite(this.INDCountryCenterTpl.body,{CompanyVATNumber: rec.data.vattinno, CompanyCSTNumber: rec.data.csttinno, CompanyPANNumber: rec.data.panno, CompanyServiceTaxRegNumber: rec.data.servicetaxno, CompanyTANNumber: rec.data.tanno,CompanyECCNumber: rec.data.eccno});
    },
    updateData:function(){
        var currentTaxItem=WtfGlobal.searchRecord(this.Name.store, this.Name.getValue(), 'accid');
        var actualTaxId=currentTaxItem!=null?currentTaxItem.get('taxId'):"";
        
      
      
        if(actualTaxId== undefined || actualTaxId == "" ||  actualTaxId == null){// if customer/vendor is not mapped with tax then check that is their mapping account is mapped with tax or not, if it is mapped take account tax
            actualTaxId=currentTaxItem!=null?currentTaxItem.get('mappedAccountTaxId'):"";
        }
        /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
         *  Then we ignore Customer/Vendor mapped taxes
         *  Consider Only Product mapped taxes i.e - only line level taxes(create new case)
         */
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
            actualTaxId = "";
        }
        
        if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null ){
            this.isTaxable.setValue(true);
            this.Tax.enable();
            this.isTaxable.enable();
            this.Tax.setValue(actualTaxId);
        } else {
            this.isTaxable.setValue(false);
            this.Tax.setValue('');
            this.Tax.disable();
        }
        var customer= this.Name.getValue();
        Wtf.Ajax.requestEx({
            url:"ACC"+this.businessPerson+"CMN/getCurrencyInfo.do",
            params:{
                mode:4,
                customerid:customer,
                isBilling : this.isCustBill
            }
        }, this,this.setCurrencyInfo);  
    },
    setCurrencyInfo: function(response) {
        if (response.success) {
            this.amountdue = 0;
            this.amountdue = response.amountdue;
            if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
               this.tplSummary.overwrite(this.southCalTemp.body, {subtotal: Wtf.UpriceAndAmountDisplayValue, discount: Wtf.UpriceAndAmountDisplayValue, totalamount: Wtf.UpriceAndAmountDisplayValue, tax: Wtf.UpriceAndAmountDisplayValue,nontaxableamount: Wtf.UpriceAndAmountDisplayValue, aftertaxamt: Wtf.UpriceAndAmountDisplayValue, totalAmtInBase: Wtf.UpriceAndAmountDisplayValue, termtotal: Wtf.UpriceAndAmountDisplayValue, amountdue: Wtf.UpriceAndAmountDisplayValue,amountbeforetax: Wtf.UpriceAndAmountDisplayValue}) 
            } else{
                /* Not reseting subtotal when DO/GR is created from SO/PO forms*/
              if(!this.invoicefromorder)
                this.tplSummary.overwrite(this.southCalTemp.body, {subtotal: WtfGlobal.currencyRenderer(0), discount: WtfGlobal.currencyRenderer(0), totalamount: WtfGlobal.currencyRenderer(0), tax: WtfGlobal.currencyRenderer(0),nontaxableamount: WtfGlobal.currencyRenderer(0), aftertaxamt: WtfGlobal.currencyRenderer(0), totalAmtInBase: WtfGlobal.currencyRenderer(0), termtotal: WtfGlobal.currencyRenderer(0), amountbeforetax:WtfGlobal.currencyRenderer(0), amountdue: WtfGlobal.addCurrencySymbolOnly(this.amountdue, this.symbol)})
            }            
        }
    },
    setSalesPerson:function(c,rec,ind){
        this.users.setValForRemoteStore(rec.data['masterSalesPerson'],rec.data['masterSalesPersonName'],rec.data['hasAccess']);
    },
    setAgent:function(c,rec,ind){
        this.users.setValForRemoteStore(rec.data['masteragent'],rec.data['masteragentname'],rec.data['hasAccess']);
    },
    hideTransactionFormFields:function(array){
        if(array){
            for(var i=0;i<array.length;i++){
                var fieldArray = array[i];
                if(Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id)){
                    if(fieldArray.fieldId=="ShowOnlyOneTime" && ((this.isEdit !=undefined ?this.isEdit:false) || (this.copyInv !=undefined ?this.copyInv:false))){
                        continue;
                    }
                    Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).hideLabel = fieldArray.isHidden;
                    Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).hidden = fieldArray.isHidden;
                    Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).disabled = fieldArray.isReadOnly;
                    if(fieldArray.isUserManadatoryField && Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel != undefined){
                        Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).allowBlank = !fieldArray.isUserManadatoryField;
                        var fieldLabel="";
                        if(fieldArray.fieldLabelText!="" && fieldArray.fieldLabelText!=null && fieldArray.fieldLabelText!=undefined){
                            fieldLabel= fieldArray.fieldLabelText+" *";
                        }else{
                            fieldLabel=(Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel) + " *";
                        }
                        Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel = fieldLabel;
                    }else{
                        if( fieldArray.fieldLabelText!=null && fieldArray.fieldLabelText!=undefined && fieldArray.fieldLabelText!=""){
                            if(fieldArray.isManadatoryField && fieldArray.isFormField )
                                Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel=fieldArray.fieldLabelText +"*";
                            else
                                Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel=fieldArray.fieldLabelText;
                        }
                    }
                }
            }
        }
    },
    SetLocationwarehouseWindow: function(){
        
        this.recArr = this.Grid.getSelectionModel().getSelections();
        var quantityNonSetProductCount=0;
        var productwithLocationWarehouse=0;
        for(var k=0;k< this.recArr.length;k++){
            var proRecord=this.recArr[k];
            if(proRecord.data.isLocationForProduct && proRecord.data.isWarehouseForProduct && !proRecord.data.isSerialForProduct && !proRecord.data.isBatchForProduct){
                productwithLocationWarehouse++;
                if(proRecord.data.dquantity ==""){
                    quantityNonSetProductCount++;
                }
            }
            
        }
        
        if(productwithLocationWarehouse ==0){
            //            var msg="Selected Records don't  have Product's having Warehouse/Location enabled."
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.window.noRecordwithWarhouselocation")],2);
            return false;
        }else if ((Wtf.account.companyAccountPref.isAutoFillBatchDetails != undefined && Wtf.account.companyAccountPref.isAutoFillBatchDetails == true ) && this.isCustomer){
             var msg1="You can't set Warehouse/Location if auto fill batch details option set for company."
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg1],2);
            return false;
        }else if (quantityNonSetProductCount > 0){
            //             msg="Quantity is not set for some Products from  Selected Records."
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.grid.noquanitysetforProduct")],2);
            return false;
        }else{
            this.SetLocationwarehouseWindow = new Wtf.account.SetLocationwarehouseWindow({
                id: 'setLocationwarehouseWindow'+this.id,
                title: WtfGlobal.getLocaleText("acc.SetWarehouseLocation"),
                border: false,
                isCustomer:this.isCustomer,
                grid:this.Grid,
                scope:this,
                closable: true,
                modal: true,
                iconCls :getButtonIconCls(Wtf.etype.deskera),
                resizable: false,
                renderTo: document.body
            });
            this.SetLocationwarehouseWindow.show(); 
        }
    }, 
    getPostTextToSetPostText:function(){
        Wtf.Ajax.requestEx({
            url: "ACCCommon/getPDFTemplateRow.do",
            params:{
                module:this.moduleid
            }
        }, this, function(response) {
            if (response.success) {
                this.postText=response.posttext;
            }
        });
    
    },
    initComponent:function(config){
        Wtf.account.DeliveryOrderPanel.superclass.initComponent.call(this,config);
        //Load Stores which is assigned to user 
        //chkWarehouseload();
        var isEditORisCopy=(this.isEdit !=undefined ?this.isEdit:false) || (this.copyInv !=undefined ?this.copyInv:false);// Load All Customers in Edit and Copy case
        Wtf.customerAccStore.on('beforeload', function(s,o){
            if(!o.params)o.params={};
            var currentBaseParams = Wtf.customerAccStore.baseParams;
            if(isEditORisCopy){
                currentBaseParams.isPermOrOnetime=""; // Empty to Load all Customers.
            }else{
                if(this.ShowOnlyOneTime != undefined && this.ShowOnlyOneTime.getValue() == true){
                    currentBaseParams.isPermOrOnetime=true; // True to Load One Time Customers.
                }else{
                    currentBaseParams.isPermOrOnetime=false; // False to Load Permanent Customers
                }
            }
            Wtf.customerAccStore.baseParams=currentBaseParams;
        }, this);  
        //        WtfGlobal.loadpersonacc(this.isCustomer);
        //chkcustaccload();// Global Customer store  
        
        //this.isCustomer ? chkproductSalesload() : chkproductload() ; // Global Product store for product sales
        
        this.loadCurrFlag = true;
        
        this.GridRec = Wtf.data.Record.create ([
            {name:'id'},
            {name:'number'}
        ]);
        Wtf.customerAccRemoteStore.on('beforeload', function(s, o) {
            if (!o.params)
                o.params = {};
            var currentBaseParams = Wtf.customerAccRemoteStore.baseParams;
            if (isEditORisCopy) {
                currentBaseParams.isPermOrOnetime = "";
            } else {
                if (this.ShowOnlyOneTime != undefined && this.ShowOnlyOneTime.getValue() == true) {
                    currentBaseParams.isPermOrOnetime = true;
                } else {
                    currentBaseParams.isPermOrOnetime = false;
                }
            }
            Wtf.customerAccRemoteStore.baseParams = currentBaseParams;
        }, this);
        //        this.currencyRec = new Wtf.data.Record.create([
        //            {name: 'currencyid',mapping:'tocurrencyid'},
        //            {name: 'symbol'},
        //            {name: 'currencyname',mapping:'tocurrency'},
        //            {name: 'exchangerate'},
        //            {name: 'htmlcode'}
        //         ]);
        //         this.currencyStore = new Wtf.data.Store({
        //            reader: new Wtf.data.KwlJsonReader({
        //                root: "data",
        //                totalProperty:"count"
        //            },this.currencyRec),
        //    //        url:Wtf.req.account+'CompanyManager.jsp'
        //            url:"ACCCurrency/getCurrencyExchange.do"
        //         });

        //var transdate=(this.isEdit?WtfGlobal.convertToGenericDate(this.record.data.date):WtfGlobal.convertToGenericDate(new Date()));

        //         this.Currency= new Wtf.form.FnComboBox({
        //            fieldLabel:WtfGlobal.getLocaleText("acc.currency.cur"),  //'Currency',
        //            hiddenName:'currencyid',
        //            id:"currency"+this.heplmodeid+this.id,
        //            anchor: '94%',
        //            disabled:true,
        //            store:this.currencyStore,
        //            valueField:'currencyid',
        //            forceSelection: true,
        //            displayField:'currencyname',
        //            scope:this,
        //            selectOnFocus:true
        //        });
        
        this.sequenceFormatStoreRec = new Wtf.data.Record.create([
        {
            name: 'id'
        },

        {
            name: 'value'
        },
        {
            name: 'oldflag'
        }
        ]);
        this.sequenceFormatStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                totalProperty:'count',
                root: "data"
            },this.sequenceFormatStoreRec),
            //        url: Wtf.req.account +'CompanyManager.jsp',
            url : "ACCCompanyPref/getSequenceFormatStore.do",
            baseParams:{
                mode:this.modeName,
                isEdit: this.copyInv ? false : this.isEdit
            }
        });
        this.sequenceFormatStore.on('load',this.setNextNumber,this);
        this.sequenceFormatStore.load();
     
        var isShowOneTime=(this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) && !((this.isEdit !=undefined ?this.isEdit:false) || (this.copyInv !=undefined ?this.copyInv:false));
        this.ShowOnlyOneTime= new Wtf.form.Checkbox({
            name:'ShowOnlyOneTime',
            fieldLabel:WtfGlobal.getLocaleText("acc.cust.ShowOnlyOneTime"),
            id:'ShowOnlyOneTime'+this.heplmodeid+this.id,
            checked:false,
            hideLabel:!isShowOneTime, // Show only in new case
            hidden:!isShowOneTime,
            cls : 'custcheckbox',
            width: 10
        });  
        this.ShowOnlyOneTime.on('check',function(obj,isChecked){
            this.Name.reset();
            this.Name.store.load();
        },this); 
    
        if(this.custVenOptimizedFlag){
            this.Name= new Wtf.form.ExtFnComboBox({
                fieldLabel:(this.isCustomer)?"<span wtf:qtip='"+  WtfGlobal.getLocaleText("acc.invoiceList.cust.tt") +"'>"+ WtfGlobal.getLocaleText("acc.invoiceList.cust") +"</span>":"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.invoiceList.ven.tt") +"'>"+ WtfGlobal.getLocaleText("acc.invoiceList.ven") +"</span>",//this.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.cust"):WtfGlobal.getLocaleText("acc.invoiceList.ven") , //this.businessPerson+"*",
                hiddenName:this.businessPerson.toLowerCase(),
                id:"customer"+this.heplmodeid+this.id,
                store: this.isCustomer?Wtf.customerAccRemoteStore:Wtf.vendorAccRemoteStore, // remote store
                valueField:'accid',
                displayField:'accname',
                allowBlank:false,
                extraComparisionField:'acccode',// type ahead search on acccode as well.
                extraFields:Wtf.account.companyAccountPref.accountsWithCode?['acccode']:[],
                listWidth:Wtf.account.companyAccountPref.accountsWithCode?500:400,
                hirarchical:true,
                emptyText:this.isCustomer?WtfGlobal.getLocaleText("acc.inv.cus"):WtfGlobal.getLocaleText("acc.inv.ven") , //'Select a '+this.businessPerson+'...',
                mode: 'remote', 
                typeAheadDelay:30000,
                minChars:1,
                typeAhead: true,
                forceSelection: true,
                isVendor:!(this.isCustomer),
                isCustomer:this.isCustomer,
                selectOnFocus:true,
                width:240,
                triggerAction:'all',
                ctCls : 'optimizedclass',
                hideTrigger:true,
                listeners:{
                    'select':{
                        fn:function(obj,rec,index){
                            this.singleLink = false;
                            if (this.isEdit || this.isCopy) {
                                this.isVenOrCustSelect = true;
                            }
                            this.currentAddressDetailrec="";//If customer/vendor change in this case,previously stored addresses in this.currentAddressDetailrec will be clear    
                            var customer= this.Name.getValue();
                            if(rec.data.currencyid!=this.Currency.getValue()){//update currency field with vendor currency if vendor currency is different
                                this.Currency.setValue(rec.data.currencyid);
                                this.currencychanged = true;
                                this.updateFormCurrency();   
                            }
                            this.isClosable=false          // Set Closable flag after selecting Customer/Vendor
                            this.fromLinkCombo.clearValue();
                            this.PO.clearValue();
                            this.CostCenter.clearValue();
                            //                     this.DOStatusCombo.clearValue();  
                            if(!this.isEdit && !this.copyInv){
                                this.Grid.getStore().removeAll();
                                this.Grid.addBlankRow();
                            }    
                            this.showAddrress.enable();
                            this.attachFilesBtn.enable();
                            this.fromLinkCombo.disable();
                            this.PO.disable();
                            this.PO.reset();
                            this.fromPO.setValue(false);
                            this.Memo.setValue('');
                            if(!this.record){
                                this.getPostTextToSetPostText();
                            }else{
                                this.postText=this.record.data.posttext;
                            }
                            this.SupplierInvoiceNo.setValue('');
                            this.shipDate.setValue('');
                            this.shipvia.setValue('');
                            this.fob.setValue('');                                                  
                            this.permitNumber.setValue('');                                                
                            this.CostCenter.setValue('');
                            this.Name.setValue(customer);
                            if(this.Grid){
                                this.Grid.affecteduser=this.Name.getValue();
                            }
                            this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body,{productname:"&nbsp;&nbsp;&nbsp;&nbsp;",qty:0,soqty:0,poqty:0});
                            if(this.fromPO)
                                this.fromPO.enable();   
                        var moduleid = this.isCustomer ? Wtf.Acc_Customer_ModuleId : Wtf.Acc_Vendor_ModuleId;
                        if (this.isEdit || this.copyInv) {
                            var showMsg = this.isCustomer ? WtfGlobal.getLocaleText("acc.invoice.customer"):WtfGlobal.getLocaleText("acc.invoice.vendor");
                            showMsg = showMsg +" "+ WtfGlobal.getLocaleText("acc.wm.beforecustomervendorchange");
                            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),showMsg, function(btn) {
                                if (btn == "yes") {
                                      this.tagsFieldset.setValuesForCustomer(moduleid, customer);
                                }
                            }, this);
                        } else {
                             this.tagsFieldset.resetCustomComponents();
                             this.tagsFieldset.setValuesForCustomer(moduleid, customer);
                        }
                       
                        if (Wtf.account.companyAccountPref.autoPopulateFieldsForDeliveryPlanner && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
                            // For set Delivery Date of Delivery Planner
                            var billDate = new Date(this.billDate.getValue());
                            var weekDay = rec.data.deliveryDate;
                            var isNextDay = (weekDay == 7) ? true : false;
                            var nextDate = WtfGlobal.getNextDateForWeekDay(billDate, weekDay, isNextDay);
                            this.shipDate.setValue(nextDate);
                        }
                    },
                    scope:this                    
                }
            }
            });
    }else{
        this.Name= new Wtf.form.ExtFnComboBox({
            fieldLabel:(this.isCustomer)?"<span wtf:qtip='"+  WtfGlobal.getLocaleText("acc.invoiceList.cust.tt") +"'>"+ WtfGlobal.getLocaleText("acc.invoiceList.cust") +"</span>":"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.invoiceList.ven.tt") +"'>"+ WtfGlobal.getLocaleText("acc.invoiceList.ven") +"</span>",//this.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.cust"):WtfGlobal.getLocaleText("acc.invoiceList.ven") , //this.businessPerson+"*",
            hiddenName:this.businessPerson.toLowerCase(),
            id:"customer"+this.heplmodeid+this.id,
            //            store: this.isCustomer ? Wtf.customerAccStore : Wtf.vendorAccStore,
            store: this.isCustomer?Wtf.customerAccRemoteStore:Wtf.vendorAccRemoteStore, // remote store
            valueField:'accid',
            displayField:'accname',
            allowBlank:false,
            extraComparisionField:'acccode',// type ahead search on acccode as well.
            extraFields:Wtf.account.companyAccountPref.accountsWithCode?['acccode']:[],
            listWidth:Wtf.account.companyAccountPref.accountsWithCode?500:400,
            hirarchical:true,
            emptyText:this.isCustomer?WtfGlobal.getLocaleText("acc.inv.cus"):WtfGlobal.getLocaleText("acc.inv.ven") , //'Select a '+this.businessPerson+'...',
            //            mode: 'local',
            mode: 'remote', 
            typeAheadDelay:30000,
            minChars:1,
            typeAhead: true,
            forceSelection: true,
            isVendor:!(this.isCustomer),
            isCustomer:this.isCustomer,
            selectOnFocus:true,
            width:240,
            triggerAction:'all',
            //           addNewFn:this.addPerson.createDelegate(this,[false,null,this.businessPerson+"window",this.isCustomer],true),
            //  scope:this
            listeners:{
                'select':{
                    fn:function(obj,rec,index){
                        this.singleLink = false;
                        if (this.isEdit || this.isCopy) {
                            this.isVenOrCustSelect = true;
                        }
                        this.currentAddressDetailrec="";//If customer/vendor change in this case,previously stored addresses in this.currentAddressDetailrec will be clear    
                        var customer= this.Name.getValue();
                        if(rec.data.currencyid!=this.Currency.getValue()){//update currency field with vendor currency if vendor currency is different
                            this.Currency.setValue(rec.data.currencyid);
                                             
//                       if (Wtf.account.companyAccountPref.currid != this.Currency.getValue()) {
//                        this.applyTaxToTermsChkHideShow(false);
//                        } else  if (Wtf.account.companyAccountPref.currid == this.Currency.getValue() && CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
//                        /*
//                         * If base currency and transaction currency are same and "Map taxes at product level" is true in company preferences "Apply tax to terms"  check box is shown 
//                         */
//                        this.applyTaxToTermsChkHideShow(true);
//                        }
                            this.currencychanged = true;
                            this.updateFormCurrency();   
                        }
                        this.isClosable=false          // Set Closable flag after selecting Customer/Vendor
                        this.fromLinkCombo.clearValue();
                        this.PO.clearValue();
                        this.CostCenter.clearValue();
                        //                     this.DOStatusCombo.clearValue();  
                        if(!this.isEdit && !this.copyInv){
                            this.Grid.getStore().removeAll();
                            this.Grid.addBlankRow();
                        }    
                        this.showAddrress.enable();
                        this.attachFilesBtn.enable();
                        this.fromLinkCombo.disable();
                        this.PO.disable();
                        this.PO.reset();
                        this.fromPO.setValue(false);
                        this.Memo.setValue('');
                        if(!this.record){
                            this.getPostTextToSetPostText();
                        }else{
                            this.postText=this.record.data.posttext;
                        }
                        this.SupplierInvoiceNo.setValue('');
                        this.shipDate.setValue('');
                        this.shipvia.setValue('');
                        this.fob.setValue('');                                                  
                        this.permitNumber.setValue('');                                                
                        this.CostCenter.setValue('');
                        this.includingGST.reset(); // Reset when Customer selection changes
                        if(!(this.isFreeGift && this.isFreeGift.getValue())){
                            this.includingGST.enable();
                        }    
                        this.Name.setValue(customer);
                        if(this.Grid){
                            this.Grid.affecteduser=this.Name.getValue();
                        }
                            this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body,{productname:"&nbsp;&nbsp;&nbsp;&nbsp;",qty:0,soqty:0,poqty:0});
                        if(this.fromPO)
                            this.fromPO.enable();   
                   var moduleid = this.isCustomer ? Wtf.Acc_Customer_ModuleId : Wtf.Acc_Vendor_ModuleId;
                   if (this.isEdit || this.copyInv) {
                        var showMsg = this.isCustomer ? WtfGlobal.getLocaleText("acc.invoice.customer"):WtfGlobal.getLocaleText("acc.invoice.vendor");
                        showMsg = showMsg +" "+ WtfGlobal.getLocaleText("acc.wm.beforecustomervendorchange");
                        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),showMsg, function(btn) {
                            if (btn == "yes") {
                                  this.tagsFieldset.setValuesForCustomer(moduleid, customer);
                            }
                        }, this);
                    } else{
                         this.tagsFieldset.resetCustomComponents();
                         this.tagsFieldset.setValuesForCustomer(moduleid, customer);
                    }
                   
                    if (Wtf.account.companyAccountPref.autoPopulateFieldsForDeliveryPlanner && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
                        // For set Delivery Date of Delivery Planner
                        var billDate = new Date(this.billDate.getValue());
                        var weekDay = rec.data.deliveryDate;
                        var isNextDay = (weekDay == 7) ? true : false;
                        var nextDate = WtfGlobal.getNextDateForWeekDay(billDate, weekDay, isNextDay);
                        this.shipDate.setValue(nextDate);
                    }
                },
                scope:this                    
            }
        }
        });       
}
this.currencyRec = new Wtf.data.Record.create([
            {name: 'currencyid',mapping:'tocurrencyid'},
            {name: 'symbol'},
            {name: 'currencyname',mapping:'tocurrency'},
            {name: 'exchangerate'},
            {name: 'htmlcode'},
            {name: 'erdid',mapping:'id'},
            {name: 'companyid'},
            {name: 'fromcurrencyid'},
            {name: 'fromcurrency'},
            {name: 'currencycode'},
            {name: 'ismaxnearestexchangerate'}
]);
this.currencyStore = new Wtf.data.Store({
    reader: new Wtf.data.KwlJsonReader({
        root: "data",
        totalProperty:"count"
    },this.currencyRec),
    url:"ACCCurrency/getCurrencyExchange.do"
});
         this.currencyStore.load({params:{mode:201,transactiondate:WtfGlobal.convertToGenericDate(new Date())}});

    this.Currency = new Wtf.form.FnComboBox({
    fieldLabel: "<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.currency.tt")+"'>"+ WtfGlobal.getLocaleText("acc.currency.cur") +"</span>",//    WtfGlobal.getLocaleText("acc.currency.cur"),  //'Currency',
    hiddenName:'currencyid',
    id:"currency"+this.heplmodeid+this.id,
    width : 240,
    store:this.currencyStore,
    valueField:'currencyid',
    allowBlank : false,
    forceSelection: true,
    displayField:'currencyname',
    scope:this,
    selectOnFocus:true
});
        
this.currencyStore.on('load',this.changeTemplateSymbol,this);

    this.Currency.on('select', function(combo, record, index){
        if(Wtf.account.companyAccountPref.activateToDateforExchangeRates){
            checkForNearestExchangeRate(this,record,this.billDate.getValue());
        }
        this.externalcurrencyrate=0;
        this.currencychanged = true;
        if(this.includingGST.getValue()!=false){
            this.includingGST.setValue(false);   
            this.applyTaxToTermsChkHideShow(false);
        }
        if(this.termgrid != undefined){
            this.termgrid.getStore().rejectChanges();
        }
        this.onCurrencyChangeOnly();
        this.updateFormCurrency();
        if(this.Grid){
            this.Grid.forCurrency = this.Currency.getValue();
        }
//        if(Wtf.account.companyAccountPref.currid != this.Currency.getValue()) {
//                this.applyTaxToTermsChkHideShow(false);
//            }else if(Wtf.account.companyAccountPref.currid == this.Currency.getValue()&&CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
//            /*
//            * If base currency and transaction currency are same and "Map taxes at product level" is true in company preferences "Apply tax to terms"  check box is shown 
//            */
//            this.applyTaxToTermsChkHideShow(true);
//             }

    }, this);
        
    //if(!WtfGlobal.EnableDisable(this.custUPermType,this.custPermType.create))
    this.Name.addNewFn=this.addPerson.createDelegate(this,[false,null,this.businessPerson+"window",this.isCustomer],true);
        
    this.fromPOStore = new Wtf.data.SimpleStore({
            fields:[{name:'name'},{name:'value',type:'boolean'}],
        data:[['Yes',true],['No',false]]
    });
        
        
    var fromLinkStoreRec = new Array();
    //        if (this.isJobWorkOutReciever) {
    //            fromLinkStoreRec.push(['Job Work Order','0']);
    //        } else {
    if(this.isCustomer){
        fromLinkStoreRec.push(['Sales Order','0']);
        fromLinkStoreRec.push(['Sales Invoice','1']);
        if (Wtf.jobWorkInFlowFlag) {
            fromLinkStoreRec.push(['Job Work Order','2']); // To select Job work order in Delivey order.
        }
    } else {
        fromLinkStoreRec.push([WtfGlobal.getLocaleText("acc.module.name.18"),'0']);
        fromLinkStoreRec.push([WtfGlobal.getLocaleText("acc.pi.PurchaseInvoice"),'1']);
        if(Wtf.account.companyAccountPref.securityGateEntryFlag){
            fromLinkStoreRec.push([WtfGlobal.getLocaleText("acc.securitygate.title"),'3']);
        }
        if (Wtf.account.companyAccountPref.jobWorkOutFlow) {
            fromLinkStoreRec.push(['Job Work Out Order', '2']); // To select Job work order in order.
       }
    } 
    //        }
        
        
        
    this.fromlinkStore = new Wtf.data.SimpleStore({
            fields:[{name:'name'},{name:'value'}],
        data:fromLinkStoreRec
    });
        
         /**
         * Create separate store for DO status 
         */
       

this.DOStatusStore=new Wtf.data.Store({
    reader: new Wtf.data.KwlJsonReader({
        root: "data"
    },Wtf.DORec),
    url:"ACCMaster/getMasterItems.do",
    baseParams:{
        mode:112,
        groupid:10
    }
});
this.DOStatusStore.load();
        
    this.DOStatusCombo =  new Wtf.form.FnComboBox({
        fieldLabel:WtfGlobal.getLocaleText("acc.invoiceList.status"),
        name:"statuscombo",     
        id:'statuscomboId'+this.heplmodeid+this.id,
        store:(this.businessPerson == "Customer")? this.DOStatusStore : Wtf.GROStatusStore,
        anchor:"94%",
        allowBlank:true,
        valueField:'id',
        displayField:'name',
        mode: 'local',
        triggerAction:'all',
        forceSelection:true,
        addNoneRecord: true
    });
     

    this.DOStatusCombo.addNewFn=this.addDOStatus.createDelegate(this);
   
        this.DOStatusStore.on('load',function(){
            var value="Picked";
            var masterstatus = WtfGlobal.searchRecord(this.DOStatusStore,value, 'name');
            if(masterstatus!=undefined && masterstatus!=null){
                var defaultstatus=masterstatus.data.id;
                this.DOStatusCombo.setValue(defaultstatus);
                if(Wtf.account.companyAccountPref.pickpackship && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId){
                    this.DOStatusCombo.disable();
                }
            }
            else{
             if(Wtf.account.companyAccountPref.pickpackship && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId){
                this.DOStatusCombo.disable();
             }  
          }
        },this);
           
    this.sequenceFormatCombobox = new Wtf.form.ComboBox({            
        //        labelSeparator:'',
        //        labelWidth:0,
        triggerAction:'all',
        mode: 'local',
        fieldLabel:"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.Sequenceformat.tip")+"'>"+ WtfGlobal.getLocaleText("acc.MissingAutoNumber.SequenceFormat")+"</span>",
        id:'sequenceFormatCombobox'+this.heplmodeid+this.id,
        valueField:'id',
        displayField:'value',
        store:this.sequenceFormatStore,
        disabled:(this.isEdit&&!this.copyInv&&!this.isPOfromSO&&!this.isSOfromPO?true:false),  
        width:240,
        typeAhead: true,
        forceSelection: true,
        name:'sequenceformat',
        hiddenName:'sequenceformat',
        allowBlank:false,
        listeners:{
            'select':{
                fn:this.getNextSequenceNumber,
                scope:this
            }
        }
            
    });
        
    this.Number=new Wtf.form.TextField({
        fieldLabel:(this.isEdit?this.label:this.titlel) + " " + WtfGlobal.getLocaleText("acc.common.number"),  //,  //this.label+' Number*',
        name: 'number',
        disabled:(this.isEdit&&!this.copyInv?true:false),
        id:"invoiceNo"+this.heplmodeid+this.id,
        width:240,
        maxLength:50,
        scope:this,
        allowBlank:this.checkin
    });
    this.challanNumber=new Wtf.form.TextField({
        fieldLabel: "Challan " +WtfGlobal.getLocaleText("acc.common.number"),
        name: 'challannumber',
        id:"challannumber"+this.heplmodeid+this.id,
        hidden: ( Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.account.companyAccountPref.stateid==Wtf.StateName.DELHI && !this.isCustomer )?false:true,
        hideLabel: ( Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.account.companyAccountPref.stateid==Wtf.StateName.DELHI && !this.isCustomer )?false:true,
        disabled:this.readOnly,
        width:240,
        maxLength:50,
        scope:this
    });
    this.includeTaxStore = new Wtf.data.SimpleStore({
            fields:[{name:'name'},{name:'value',type:'boolean'}],
        data:[['Yes',true],['No',false]]
    });
    this.includeProTax= new Wtf.form.ComboBox({
        triggerAction:'all',
        mode: 'local',
        valueField:'value',
        displayField:'name',
        store:this.includeTaxStore,
        //            id: "linkToOrder"+this.id+this.heplmodeid,
        fieldLabel:"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.includeprodtax.tip")+"'>"+WtfGlobal.getLocaleText("acc.invoice.productTax") +"</span>",//"Include Product Tax",
        id:"includeprotax"+this.heplmodeid+this.id,
        //  allowBlank:this.isOrder,
        value:(this.isEdit?true:false),
        anchor:'94%',
        // width : 240,
        typeAhead: true,
        forceSelection: true,
        hideLabel: (WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied()) ? true :  !(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInDO:Wtf.account.companyAccountPref.unitPriceInGR) || (Wtf.account.companyAccountPref.countryid == '137' && !Wtf.account.companyAccountPref.enableGST),// hide if company is malaysian and GST is not enabled for it
        hidden: (WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied()) ? true :  !(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInDO:Wtf.account.companyAccountPref.unitPriceInGR) || (Wtf.account.companyAccountPref.countryid == '137' && !Wtf.account.companyAccountPref.enableGST),// hide if company is malaysian and GST is not enabled for it
        name:'includeprotax',
        hiddenName:'includeprotax',
        listeners:{
            'change':{
                fn:this.includeProTaxHandler,
                scope:this
            }
        }
    });
    
        this.applyTaxToTermsChk = new Wtf.form.Checkbox({
            fieldLabel: "Apply Tax to Terms"
        }),
    
//    this.applyTaxToTermsChk.on("check", function () {
//        this.updateSubtotal();
//    }, this);
    
    this.Memo=new Wtf.form.TextArea({
        fieldLabel:Wtf.account.companyAccountPref.descriptionType,  //'Memo',
        name: 'memo',
        id:"memo"+this.heplmodeid+this.id,
        height:40,
        anchor:'94%',
        maxLength:2048,        
        readOnly:this.readOnly,
        qtip:(this.record==undefined)?' ':this.record.data.memo,
        listeners: {
            render: function(c){
                Wtf.QuickTips.register({
                    target: c.getEl(),
                    text: c.qtip
                });
            }
        }

    });
        
    this.PORec = Wtf.data.Record.create ([
            {name:'billid'},
            {name:'journalentryid'},
            {name:'entryno'},
            {name:'billto'},
            {name:'discount'},
            {name:'shipto'},
            {name:'mode'},
            {name:'billno'},
            {name:'date', type:'date'},
            {name:'duedate', type:'date'},
            {name:'shipdate', type:'date'},
            {name:'termid'},
            {name:'personname'},
            {name:'creditoraccount'},
            {name:'personid'},
            {name:'shipping'},
            {name:'othercharges'},
            {name:'taxid'},
            {name:'currencyid'},
            {name:'amount'},
            {name:'amountinbase'},
            {name:'shipvia'},
            {name:'fob'},
            {name:'permitNumber'},
            {name:'amountdue'},
            {name:'contractstatus'},
            {name:'contract'},
            {name:'costcenterid'},
            {name:'customerporefno'},
            {name:'porefno'},
            {name:'costcenterName'},
            {name:'externalcurrencyrate'},
            {name:'memo'},
            {name:'posttext'},
            {name:'salesPerson'},
            {name:'salespersonname'},
            {name:'agent'},
            {name:'agentname'},
            {name: 'gstapplicable'},
            {name: 'billingAddressType'},
            {name: 'billingAddress'},
            {name: 'billingCountry'},
            {name: 'billingState'},
            {name: 'billingPostal'},
            {name: 'billingEmail'},
            {name: 'billingFax'},
            {name: 'billingMobile'},
            {name: 'billingPhone'},
            {name: 'billingContactPerson'},
            {name: 'billingRecipientName'},
            {name: 'billingContactPersonNumber'},
            {name: 'billingContactPersonDesignation'},
            {name: 'billingWebsite'},
            {name: 'billingCounty'},
            {name: 'billingCity'},
            {name: 'shippingAddressType'},
            {name: 'shippingAddress'},
            {name: 'shippingCountry'},
            {name: 'shippingState'},
            {name: 'shippingCounty'},
            {name: 'shippingCity'},
            {name: 'shippingEmail'},
            {name: 'shippingFax'},
            {name: 'shippingMobile'},
            {name: 'shippingPhone'},
            {name: 'shippingPostal'},
            {name: 'shippingContactPersonNumber'},
            {name: 'shippingContactPersonDesignation'},
            {name: 'shippingWebsite'},
            {name: 'shippingRecipientName'},
            {name: 'shippingContactPerson'},
            {name: 'shippingRoute'} , 
            {name: 'vendcustShippingAddress'},
            {name: 'vendcustShippingCountry'},
            {name: 'vendcustShippingState'},
            {name: 'vendcustShippingCounty'},
            {name: 'vendcustShippingCity'},
            {name: 'vendcustShippingEmail'},
            {name: 'vendcustShippingFax'},
            {name: 'vendcustShippingMobile'},
            {name: 'vendcustShippingPhone'},
            {name: 'vendcustShippingPostal'},
            {name: 'vendcustShippingContactPersonNumber'},
            {name: 'vendcustShippingContactPersonDesignation'},
            {name: 'vendcustShippingWebsite'},
            {name: 'vendcustShippingContactPerson'},
            {name: 'vendcustShippingRecipientName'},
            {name: 'vendcustShippingAddressType'},
            /**
             * If Show Vendor Address in purchase side document and India country 
             * then this Fields used to store Vendor Billing Address
             */
            {name: 'vendorbillingAddressTypeForINDIA'},
            {name: 'vendorbillingAddressForINDIA'},
            {name: 'vendorbillingCountryForINDIA'},
            {name: 'vendorbillingStateForINDIA'},
            {name: 'vendorbillingPostalForINDIA'},
            {name: 'vendorbillingEmailForINDIA'},
            {name: 'vendorbillingFaxForINDIA'},
            {name: 'vendorbillingMobileForINDIA'},
            {name: 'vendorbillingPhoneForINDIA'},
            {name: 'vendorbillingContactPersonForINDIA'},
            {name: 'vendorbillingRecipientNameForINDIA'},
            {name: 'vendorbillingContactPersonNumberForINDIA'},
            {name: 'vendorbillingContactPersonDesignationForINDIA'},
            {name: 'vendorbillingWebsiteForINDIA'},
            {name: 'vendorbillingCountyForINDIA'},
            {name: 'vendorbillingCityForINDIA'},
            {name: 'taxid'} , 
            {name: 'includeprotax'},
            {name: 'termdetails'},
            {name: 'termamount'},
            {name: 'gtaapplicable'},
            {name: 'ewayapplicable'},
            {name: 'isMerchantExporter'},
            {name: 'gstIncluded'},
            {name:'dostatus'},
            {name:'supplierinvoiceno'},//SDP-4510
            {name:'isapplytaxtoterms'},
            {name: 'isRoundingAdjustmentApplied'}
    ]);
    this.POStoreUrl = "";
    if(this.businessPerson=="Customer"){
        //mode:(this.isCustBill?52:42)
        this.POStoreUrl = "ACCSalesOrderCMN/getSalesOrders.do";
    }else if(this.businessPerson=="Vendor"){
        this.POStoreUrl = "ACCPurchaseOrderCMN/getPurchaseOrders.do";
    }
    this.POStore = new Wtf.data.Store({
        url:this.POStoreUrl,
        //        url: Wtf.req.account+this.businessPerson+'Manager.jsp',
        baseParams:{
            mode:42,
            closeflag:true,
            doflag : true,
            requestModuleid:this.moduleid
        },
        reader: new Wtf.data.KwlJsonReader({
            root: "data",
            totalProperty:'count'
        },this.PORec)
    });     
    this.POStore.on('beforeload',function(){
        WtfGlobal.setAjaxTimeOut();
    }, this);
    this.POStore.on('load',function(){
        WtfGlobal.resetAjaxTimeOut();
    },this);
    this.POStore.on('loadexception',function(){
        WtfGlobal.resetAjaxTimeOut();
    },this);
    var DimensionCustomFielsArray = GlobalDimensionCustomFieldModel[this.moduleid];
    if( DimensionCustomFielsArray){
        for(var cnt = 0;cnt < DimensionCustomFielsArray.length;cnt++){
            if(DimensionCustomFielsArray[cnt] != undefined){
                var fieldname = DimensionCustomFielsArray[cnt].fieldname;
                var newField = new Wtf.data.ExtField({
                    name:fieldname.replace(".",""),
                    //                   sortDir:'ASC',
                    type:DimensionCustomFielsArray[cnt].fieldtype == 3 ?  'date' : (DimensionCustomFielsArray[cnt].fieldtype == 2?'float':'auto'),
                    dateFormat:DimensionCustomFielsArray[cnt].fieldtype == 3 ?  'time' : undefined
                });
                this.POStore.fields.items.push(newField);
                this.POStore.fields.map[fieldname]=newField;
                this.POStore.fields.keys.push(fieldname);
            }
               
        }
        this.POStore.reader = new Wtf.data.KwlJsonReader(this.POStore.reader.meta, this.POStore.fields.items);
    }
    this.fromPO= new Wtf.form.ComboBox({
        triggerAction:'all',
        hideLabel:false,
        hidden:false,
        mode: 'local',
        valueField:'value',
        displayField:'name',
        disabled:this.isEdit?false:true,
        store:this.fromPOStore,
        id: "linkToOrder"+this.heplmodeid+this.id,
        fieldLabel: WtfGlobal.getLocaleText("acc.field.Link"),  //"Link to "+(this.isCustomer?"Sales":"Purchase")+" Order",
        allowBlank:this.isOrder,
        value:false,
        width:50,
        typeAhead: true,
        forceSelection: true,
        name:'prdiscount',
        hiddenName:'prdiscount',
        listeners:{
            'select':{
                fn:this.enablePO,
                scope:this
            }
        }
    });
    this.fromLinkCombo= new Wtf.form.ComboBox({
        triggerAction:'all',
        name:"fromLinkCombo",
        hideLabel:false,
        hidden:false,
        mode: 'local',
        valueField:'value',
        displayField:'name',
        disabled:true,
        store:this.fromlinkStore,                        
        emptyText: this.isCustomer ? WtfGlobal.getLocaleText("acc.field.SelectaSO/SI") : Wtf.account.companyAccountPref.securityGateEntryFlag?WtfGlobal.getLocaleText("acc.field.SelectaPO/PI/SGE"):WtfGlobal.getLocaleText("acc.field.SelectaPO/PI"),
        fieldLabel: WtfGlobal.getLocaleText("acc.field.Linkto"),  //"Link to "+(this.isCustomer?"Sales":"Purchase")+" Order",
        allowBlank:false,     
        id:'fromLinkComboId'+this.heplmodeid+this.id,
        //            value:false,            
        typeAhead: true,            
        width:135,
        forceSelection: true,                        
        selectOnFocus:true,           
        scope:this,
        listeners:{
            'select':{
                fn:this.enableNumber,
                scope:this
            }
        }
    });
        
    //        this.PO= new Wtf.form.FnComboBox({
    //            fieldLabel:WtfGlobal.getLocaleText("acc.field.Number") ,  //(this.isCustomer?"SO":"PO")+" Number",
    //            hiddenName:"ordernumber",
    //            id:"orderNumber"+this.heplmodeid+this.id,
    //            allowBlank:false, 
    //            store: this.POStore,
    //            valueField:'billid',
    //            hideLabel:false,
    //            hidden:false,
    //            displayField:'billno',
    //            disabled:true,
    //            emptyText: this.isCustomer ? "Select a SO/CI" : "Select a PO/VI",
    //            mode: 'local',
    //            typeAhead: true,
    //            forceSelection: true,
    //            selectOnFocus:true,            
    //            width:240,
    //            triggerAction:'all',
    ////            addNewFn:this.addOrder.createDelegate(this,[false,null,this.businessPerson+"PO"],true),
    //            scope:this,
    //            listeners:{
    //                'select':{
    //                    fn:this.populateData,
    //                    scope:this
    //                }
    //            }
    //        });

    this.MSComboconfig = {  //multiselect combo
        hiddenName:"ordernumber",
        //id:"orderNumber"+this.heplmodeid+this.id,
        allowBlank:false, 
        store: this.POStore,
        valueField:'billid',
        hideLabel:false,
        hidden:false,
        displayField:'billno',
        disabled:true,
        clearTrigger:this.isEdit ? false : true,
        emptyText: this.isJobWorkOutReciever?WtfGlobal.getLocaleText("acc.jobWorkOrder.selectjobworkorder"):(this.isCustomer ? WtfGlobal.getLocaleText("acc.field.SelectaSO/SI") : Wtf.account.companyAccountPref.securityGateEntryFlag?WtfGlobal.getLocaleText("acc.field.SelectaPO/PI/SGE"):WtfGlobal.getLocaleText("acc.field.SelectaPO/PI")),
        mode: 'local',
        typeAhead: true,
        forceSelection: true,
        selectOnFocus:true,                        
        triggerAction:'all',
        scope:this
    //            listeners:{                       
    //                'blur':{
    //                    fn:this.populateData,
    //                    scope:this
    //                }
    //            }
    };

    this.PO = new Wtf.common.Select(Wtf.applyIf({
        multiSelect:true,
        fieldLabel:WtfGlobal.getLocaleText("acc.field.Number") ,
        id:"poNumberID"+this.heplmodeid+this.id,
        forceSelection:true,
        addCreateOpt:true,
        addNewFn:this.addSelectedDocument.createDelegate(this),
        hideTrigger1:true,
        width:240
    },this.MSComboconfig));
        
    this.PO.on("clearval",function(){
        if(this.PO.getValue()=="" && !this.isEdit && !this.handleEmptyText){            
          //ERP-41011
          //this.users.clearValue();
            this.Grid.getStore().removeAll();            
            this.Grid.addBlankRow();
            if(this.termgrid != undefined && this.termgrid != null){
                this.termgrid.getStore().rejectChanges();
            }
        }
        this.handleEmptyText=false;
    },this);                
    
    //            this.PO.addNewFn=this.addOrder.createDelegate(this,[false,null,this.businessPerson+"PO"],true)
            
    this.POSelected="";
        
    this.billDate= new Wtf.form.DateField({
        fieldLabel:(this.isEdit?this.label:this.titlel) +' '+WtfGlobal.getLocaleText("acc.invoice.date"),
        id:"invoiceDate"+this.heplmodeid+this.id,
        format:WtfGlobal.getOnlyDateFormat(),
        name: 'billdate',
        width:240,
        //            listeners:{
        //                'change':{
        //                    fn:this.updateDueDate,
        //                    scope:this
        //                }
        //},
        allowBlank:false
    ////            disabled: true
    //            maxValue: new Date(Wtf.serverDate),
    //            minValue: new Date(Wtf.account.companyAccountPref.fyfrom)
    });
    this.CustomerPORefNoConfig = {
        fieldLabel:WtfGlobal.getLocaleText("acc.invoice.CustomerPOrefNo"),  //Customer PO Reference No.',
        name: 'customerporefno',
        hiddenName: 'customerporefno',
        id:"customerporefno"+this.heplmodeid+this.id,
        hidden: !(this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) ,
        hideLabel:!(this.moduleid == Wtf.Acc_Delivery_Order_ModuleId)
    };
    this.CustomerPORefNo = WtfGlobal.createTextfield(this.CustomerPORefNoConfig, false, true, 2048, this);
    
    this.SupplierInvoiceNo = new Wtf.form.TextField({
        fieldLabel: "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.invoice.SupplierInvoiceNumber") +"'>"+ WtfGlobal.getLocaleText("acc.invoice.SupplierInvoiceNo") +"</span>",//Supplier Invoice No - SDP-4510
        name: 'supplierinvoiceno',
        id:"supplierinvoiceno"+this.heplmodeid+this.id,
        hidden: !(this.moduleid === Wtf.Acc_Goods_Receipt_ModuleId),
        hideLabel: !(this.moduleid === Wtf.Acc_Goods_Receipt_ModuleId),
        disabled: this.readOnly,
        width: 240,
        labelWidth: 160,
        maxLength: 50,
        scope: this,
         qtip:(WtfGlobal.isIndiaCountryAndGSTApplied())?WtfGlobal.getLocaleText("acc.gst.SINErrorMsg"):"",
            listeners: {
                render: function(c){
                    Wtf.QuickTips.register({
                        target: c.getEl(),
                        text: c.qtip
                    });
                }    
            }
        });
        if ((this.moduleid === Wtf.Acc_Goods_Receipt_ModuleId) && WtfGlobal.isIndiaCountryAndGSTApplied()) {
            this.SupplierInvoiceNo.on('change', this.validateSIN, this);
        }
    //ERP-34970(ERM-534)
    var isApplyRCMOnSAles = false;
    if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.isCustomer && (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId || this.moduleid == Wtf.Acc_Sales_Return_ModuleId)) {
        isApplyRCMOnSAles = true;
    } 
        this.applyRCMOnPurchase = false;
        this.isPurchasesTransaction = (this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId);
        if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.isRCMApplicableInPreferences && this.isPurchasesTransaction) {
            this.applyRCMOnPurchase = true;
        }
        /**
         * isMerchantExporter check for IDNIA country only
         */
        var isMerchantExporterVisible = false;
        if(WtfGlobal.isIndiaCountryAndGSTApplied() && ( Wtf.isMerchantExporterVisible.indexOf(parseInt(this.moduleid))> -1)){
            isMerchantExporterVisible =true;
        }
        this.isMerchantExporter= new Wtf.form.Checkbox({
            name:'isMerchantExporter',
            id:"isMerchantExporter"+this.id,
            fieldLabel:"<span wtf:qtip="+WtfGlobal.getLocaleText("acc.gstrr.gstrule.isMerchantExporter.qtip")+">"+WtfGlobal.getLocaleText("acc.gstrr.gstrule.isMerchantExporter")+"</span>", // is MerchantExporter?
            checked: false,
            hideLabel: !isMerchantExporterVisible,// Only for Indian company
            hidden: !isMerchantExporterVisible,
            cls : 'custcheckbox',
            width: 10
        });
        /**
         * isEWayValidationDoc check for IDNIA country only
         */
        var isEWayValidationDoc = false;
        if(WtfGlobal.isIndiaCountryAndGSTApplied() && CompanyPreferenceChecks.activateEWayBill()){
            isEWayValidationDoc =true;
        }
        this.isEWayCheck= new Wtf.form.Checkbox({
            name:'isEWayCheck',
            id:"isEWayCheck"+this.id,
            fieldLabel:WtfGlobal.getLocaleText("acc.GST.eway.ewayDocumentLevelChk")+WtfGlobal.addLabelHelp(WtfGlobal.getLocaleText("acc.GST.eway.ewayDocHelpQtip")),
            checked: false,
            hideLabel: !isEWayValidationDoc,// Only for Indian company
            hidden: !isEWayValidationDoc,
            cls : 'custcheckbox',
            width: 10
        });                               
        /**
         * In Edit case set EWAY Applicable check
         */
        if (isEWayValidationDoc) {

            if (this.record && this.record.data['ewayapplicable']) {
                this.isEWayCheck.setValue(this.record.data['ewayapplicable']);
            }
        }
        this.isEWayCheck.on('change',this.EwayFieldsEnableDisable,this);
        this.GTAApplicable = new Wtf.form.Checkbox({
            name: "gtaapplicable",
            id: "gtaapplicable" + this.id,
            fieldLabel: "<span wtf:qtip=" + WtfGlobal.getLocaleText("acc.compref.india.rcm.applicable") + ">" + WtfGlobal.getLocaleText("acc.compref.india.rcm.applicable") + "</span>",
            checked: false,
//            hideLabel: Wtf.account.companyAccountPref.countryid != Wtf.Country.INDIA || this.isCustomer || !(this.moduleid === Wtf.Acc_Goods_Receipt_ModuleId),
//            hidden: Wtf.account.companyAccountPref.countryid != Wtf.Country.INDIA || this.isCustomer || !(this.moduleid === Wtf.Acc_Goods_Receipt_ModuleId),
            hideLabel: Wtf.account.companyAccountPref.countryid != Wtf.Country.INDIA || /*this.isCustomer ||*/ !(this.applyRCMOnPurchase || isApplyRCMOnSAles),
            hidden: Wtf.account.companyAccountPref.countryid != Wtf.Country.INDIA || /*this.isCustomer ||*/ !(this.applyRCMOnPurchase || isApplyRCMOnSAles),
            cls: 'custcheckbox',
            width: 10
        });
     
    this.isFreeGift= new Wtf.form.Checkbox({
        name:'isFreeGift',
        hiddenName:'isFreeGift',
        id:"isfreegift"+this.heplmodeid+this.id,
        hideLabel:Wtf.account.companyAccountPref.countryid != Wtf.Country.MALAYSIA,
        hidden:Wtf.account.companyAccountPref.countryid != Wtf.Country.MALAYSIA,
        fieldLabel:WtfGlobal.getLocaleText("acc.malaysiangst.isFreeGift"),
        cls : 'custcheckbox',
        scope: this,
        width: 10
    }); 
    this.isFreeGift.on('change',this.onFreeGiftOptionChanged,this);
    
    var shipDateFieldLabel = (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId && Wtf.account.companyAccountPref.deliveryPlanner) ? WtfGlobal.getLocaleText("acc.field.deliveryDate") : WtfGlobal.getLocaleText("acc.field.ShipDate");
    var shipDateFieldLabelToolTip = (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId && Wtf.account.companyAccountPref.deliveryPlanner) ? WtfGlobal.getLocaleText("acc.field.deliveryDate.tip") : WtfGlobal.getLocaleText("acc.field.ShipDate.tip");
        
    this.shipDate = new Wtf.form.DateField({
        fieldLabel: "<span wtf:qtip='"+ shipDateFieldLabelToolTip +"'>"+ shipDateFieldLabel +"</span>",
        id:"shipdate"+this.heplmodeid+this.id,
        format:WtfGlobal.getOnlyDateFormat(),
        name: 'shipdate',
        anchor:'94%'
    });
        
    this.termRec = new Wtf.data.Record.create([
            {name: 'termname'},
            {name: 'termdays'},
            {name: 'termid'}
    ]);
    this.termds = new Wtf.data.Store({
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        },this.termRec),
        url : "ACCTerm/getTerm.do",
        baseParams:{
            mode:91
        }
    });        
    this.Term = new Wtf.form.FnComboBox({
        fieldLabel: this.getTermLabel(),
        allowBlank: this.cash,
        id: "creditTerm" + this.heplmodeid + this.id,
        hiddenName: 'term',
        anchor:'94%',
        store: this.termds,
        valueField: 'termid',
        emptyText: this.getTermEmptyText(),
        forceSelection: true,
        displayField: 'termname',
        scope: this,
        selectOnFocus: true
    });
    if (!WtfGlobal.EnableDisable(Wtf.UPerm.creditterm, Wtf.Perm.creditterm.edit)) {
        this.Term.addNewFn = this.addCreditTerm.createDelegate(this);
    }
        
    this.shipvia = new Wtf.form.TextField({
        fieldLabel: WtfGlobal.getLocaleText("acc.field.ShipVia"),
        name: 'shipvia',
        id:"shipvia"+this.heplmodeid+this.id,
        anchor:'94%',
        maxLength: 255,
        scope: this
    });
        
    this.fob = new Wtf.form.TextField({
        fieldLabel:"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.fob.tip")+"'>"+WtfGlobal.getLocaleText("acc.field.FOB") +"</span>",
        name: 'fob',
        id:"fob"+this.heplmodeid+this.id,
        anchor:'94%',
        maxLength: 255,
        scope: this
    });        
    
    var hideIncludingGSTForAvalara = this.isModuleForAvalara
    var hideIncludingGSTCheck = hideIncludingGSTForAvalara || ((SATSCOMPANY_ID==companyid )?true:(!(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInDO:Wtf.account.companyAccountPref.unitPriceInGR) || (Wtf.account.companyAccountPref.countryid == '137' && !Wtf.account.companyAccountPref.enableGST)));
    this.includingGST= new Wtf.form.Checkbox({
        name:'includingGST',
        id:"includingGST"+this.heplmodeid+this.id,
        hideLabel: hideIncludingGSTCheck,
        hidden: hideIncludingGSTCheck,
        fieldLabel:(Wtf.account.companyAccountPref.countryid!= Wtf.Country.INDONESIA)?"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.includeGST.tooltip")+"'>"+WtfGlobal.getLocaleText("acc.cust.includingGST")+"</span>":"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.includeVAT.tooltip")+"'>"+WtfGlobal.getLocaleText("acc.cust.includingVAT")+"</span>",
        cls : 'custcheckbox',
        scope: this,
        width: 10
    }); 
        
          this.includingGST.on('focus',function(o,newval,oldval){
                var includeGstCount=0;
                var excludeGstCount=0;
                var selectedids=this.PO.getValue();
                var selectedValuesArr = selectedids.split(',');
                for(var cntGst=0;cntGst<selectedValuesArr.length;cntGst++){
                    var rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cntGst]));
                    if(rec!=undefined){
                        if(rec.data["gstIncluded"]){
                            includeGstCount++;
                        }else if(!rec.data["gstIncluded"]){
                            excludeGstCount++;
                        }
                    }
                }
        if(this.fromPO.getValue() !=undefined && this.fromPO.getValue()==true&&this.PO.getValue()!=""){
            var message=""
            if(selectedValuesArr.length==includeGstCount&&this.includingGST.getValue()){
                message=WtfGlobal.getLocaleText("acc.inclidingGST");
            }else if(selectedValuesArr.length==excludeGstCount&&!this.includingGST.getValue()){
                message=WtfGlobal.getLocaleText("acc.excludingGST");
            }
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.je.confirm"),message,function(btn){
                if(btn!="yes") {
                    return;
                }
                //When including gst is edited in linking case-ERP-38278
                if(!((selectedValuesArr.length==includeGstCount&&!this.includingGST.getValue())||(selectedValuesArr.length==excludeGstCount&&this.includingGST.getValue()))){
                    if(this.fromPO!=undefined && this.fromPO!=null){
                        this.fromPO.setValue(false);
                        this.fromPO.enable();
                    }
                    if(this.fromLinkCombo!=undefined && this.fromLinkCombo!=null){
                        this.fromLinkCombo.clearValue();
                        this.fromLinkCombo.disable();
                    }
                    
                    if(this.PO!=undefined && this.PO!=null){
                        this.PO.clearValue();
                        this.PO.disable();
                        this.PO.setValue("");
                    }

                    var rowRateIncludingGstAmountIndex=this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
                    if(rowRateIncludingGstAmountIndex!=-1){
                            if(selectedValuesArr.length==excludeGstCount&&!this.includingGST.getValue()){
                                this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,false);
                            }else{
                                this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,true);
                            }
                    }
                }
                var value=this.includingGST.getValue()
                this.includingGST.setValue(!value);
            },this);
        }
    },this);  
        
    this.includingGST.on('change',this.includingGSTOnChnage,this);
    
    this.permitNumber = new Wtf.form.TextField({
        fieldLabel: WtfGlobal.getLocaleText("acc.field.PermitNumber"),
        name: 'permitNumber',
        id:'permitNumberId'+this.heplmodeid+this.id,
        anchor:'94%',
        hidden:true,
        hideLabel:true,
        maxLength: 255,
        scope: this
    });
    //       if(this.isCustomer){        
    //          WtfGlobal.hideFormElement(this.NumberField);
    //       }
            
    chkFormCostCenterload();
    this.tplSummary=new Wtf.XTemplate(
        '<div class="currency-view">',
        '<table width="100%">',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.invoice.subTotal")+' </b></td><td align=right>{subtotal}</td></tr>',
        '</table>',
        '<table width="100%">',
        //olde code of below line:  '<tr><td><b>+ '+WtfGlobal.getLocaleText("acc.invoice.Tax")+': </b></td><td align=right>{tax}</td></tr>',
        '<tr><td><b>+ '+WtfGlobal.getLocaleText("acc.field.InvoiceTerm")+' </b></td><td align=right>{termtotal}</td></tr>',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.field.AmountBeforeTax")+' </b></td><td align=right>{amountbeforetax}</td></tr>',
        '<tr><td><b>+ '+WtfGlobal.getLocaleText("acc.invoice.Tax")+': </b></td><td align=right>{tax}</td></tr>',
        '<tr style=\"display:'+ (Wtf.account.companyAccountPref.isLineLevelTermFlag && WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.NONE ? 'table-row' : 'none') +'\" ><td><b>+ '+WtfGlobal.getLocaleText("acc.master.invoiceterm.nontaxablecharges")+': </b></td><td align=right>{nontaxableamount}</td></tr>',
        //old code of below line : '<tr><td><b>+ '+WtfGlobal.getLocaleText("acc.field.InvoiceTerm")+' </b></td><td align=right>{termtotal}</td></tr>',                
        '</table>',
        '<table width="100%">',
        '<tr style=\"display:'+ (this.roundingAdjustmentFlag ? 'table-row' : 'none') +'\" ><td><b>+ '+WtfGlobal.getLocaleText("acc.field.RoundingAdjustment")+'</b></td><td align=right>{roundingAdjustmentAmount}</td></tr>',
        '</table>',
        '<table width="100%">',
        '</table>',
        '<hr class="templineview">',
        '<table width="100%">',
        '<tr><td ><b>'+WtfGlobal.getLocaleText("acc.invoice.totalAmt")+' </b></td><td align=right>{aftertaxamt}</td></tr>',
        '</table>',
        '<table width="100%">',
        '<tr><td ><b>'+WtfGlobal.getLocaleText("acc.invoice.totalAmtInBase")+' </b></td><td align=right>{totalAmtInBase}</td></tr>',
        '</table>',
        '<hr class="templineview">',
        '</table>',
        '<table width="100%">',
        '<tr><td ><b>'+WtfGlobal.getLocaleText("acc.inv.amountdue")+' </b></td><td align=right>{amountdue}</td></tr>',
        '</table>',
        '<hr class="templineview">',
        '<hr class="templineview">',
        '</div>'
        );
//    this.addInvoiceTermGrid(this.isEdit);
        
    this.southCalTemp=new Wtf.Panel({  
        border:false,
        baseCls:'tempbackgroundview',
            html:this.tplSummary.apply({subtotal:WtfGlobal.currencyRenderer(0),tax:WtfGlobal.currencyRenderer(0),aftertaxamt:WtfGlobal.currencyRenderer(0),totalAmtInBase:WtfGlobal.currencyRenderer(0),amountdue:WtfGlobal.currencyRenderer(0)})
    });
        
    this.CostCenter= new Wtf.form.ExtFnComboBox({
        fieldLabel:"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.common.costCenter.tip") +"'>"+ WtfGlobal.getLocaleText("acc.common.costCenter")+"</span>",//WtfGlobal.getLocaleText("acc.common.costCenter"),//"Cost Center",
        hiddenName:"costcenter",
        id:"costcenter"+this.heplmodeid+this.id,
        store: Wtf.FormCostCenterStore,
        valueField:'id',
        displayField:'name',
        extraComparisionField:'ccid', 
        extraFields:Wtf.account.companyAccountPref.accountsWithCode?['ccid']:[],
        listWidth:Wtf.account.companyAccountPref.accountsWithCode?500:400,
        isProductCombo:true,
        isCostCenterCombo:true,
        mode: 'local',
        typeAhead: true,
        forceSelection: true,
        selectOnFocus:true,
        anchor:'94%',          
        triggerAction:'all',
        addNewFn:this.addCostCenter,
        scope:this,
        hidden: this.quotation,
        hideLabel: this.quotation
    }); 
    this.editedBy = new Wtf.form.TextField({
        //fieldLabel: WtfGlobal.getLocaleText("acc.field.ShipVia"),
        fieldLabel:  WtfGlobal.getLocaleText("acc.field.LastEditedBy"),
        name: 'lasteditedby',
        id:"lasteditedby"+this.heplmodeid+this.id,
        //            anchor: '94%',
        disabled:true,
        width : 240,
        maxLength: 255,
        scope: this,
        hidden: this.isEdit?false:true,
        hideLabel:this.isEdit?false:true
    });
        this.FormSelectionStore = new Wtf.data.SimpleStore({
            fields: [{
                name:'id',
                type:'string'
            }, 'name'],
            data :[["1","Without Form"],
            ["2","C Form"],
            ["3","E1 Form"],
            ["4","E2 Form"],
            ["5","F Form"],
            ["6","H Form"],
            ["7","I Form"],
            ["8","J Form"]]
        });
        this.FormType=new Wtf.form.ComboBox({
            fieldLabel:!this.isCustomer? WtfGlobal.getLocaleText("acc.invoice.formtoIssue"): WtfGlobal.getLocaleText("acc.invoice.formtoreceive"), 
            name:'formtypeid',
            store:this.FormSelectionStore,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            width : 240,
            hidden:WtfGlobal.GSTApplicableForCompany()!=Wtf.GSTStatus.OLDNEW,
            hideLabel:WtfGlobal.GSTApplicableForCompany()!=Wtf.GSTStatus.OLDNEW ,
            listWidth:400,
            hiddenName:'formtypeid',
            emptyText:!this.isCustomer? WtfGlobal.getLocaleText("acc.invoice.selectformtoIssue"):WtfGlobal.getLocaleText("acc.invoice.selectformtoreceive"),
            forceSelection:true,
            triggerAction:'all'
        });
         this.FormType.on('select',function(){
            this.Grid.getStore().removeAll();
            this.Grid.addBlankRow(); 
        },this);
    this.driverRec = new Wtf.data.Record.create([
            {name: 'id'},
            {name: 'name'},
            {name:'hasAccess'}
    ]);

    this.driverStore = new Wtf.data.Store({
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        }, this.driverRec),
        url: "ACCMaster/getMasterItems.do",
        baseParams: {
            mode:112,
            groupid: 26
        }
    });
    this.driver = new Wtf.form.ExtFnComboBox({
        fieldLabel: WtfGlobal.getLocaleText("acc.field.driver"), // "Driver",
        name: 'name',
        hiddenName: 'driver',
        triggerAction: 'all',
        id:"driver"+this.heplmodeid+this.id,
        store: this.driverStore,
        mode: 'remote',
        valueField: 'id',
        displayField: 'name',
        anchor:'94%',
        extraFields:[],
        addNewFn:this.addDriver.createDelegate(this),
        typeAhead: true,
        forceSelection: true,
        hidden: !(!Wtf.account.companyAccountPref.deliveryPlanner && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId),
        hideLabel: !(!Wtf.account.companyAccountPref.deliveryPlanner && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId),
        commonFlagforDimAndCustomeField: this.isCustomer ? true : false
    });
    this.driver.on('beforeselect', function (combo, record, index) {
        return validateSelection(combo, record, index);
    }, this);
    
    
    //ERP-41011:Setting remote store to Sales Person 
    this.users =CommonERPComponent.createSalesPersonAgentComboBox(240,400,30,this,false,false);//false for hidden
    this.users.anchor='94%';
    if(this.isCustomer){
        this.users.store.on('beforeload',this.onBeforesalesPersonLoad,this);
    }else{
        this.users.store.on('beforeload',this.onBeforeAgentLoad,this);
    }
    this.users.on('beforeselect', function (combo, record, index) {
        if (this.isCustomer) {
            return validateSelection(combo, record, index);
        } else {
            return true;
        }
    }, this);
        
    this.users.addNewFn=this.addSalesPerson.createDelegate(this);
    this.Name.on('select',this.onNameSelect,this);
    this.Name.on('beforeselect', function(combo, record, index) {
        this.nameBeforeSelect = combo.getValue();
        return validateSelection(combo, record, index);                
    }, this);
    if (!Wtf.account.companyAccountPref.deliveryPlanner && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
        this.driverStore.load();
    }
        
        
    this.INDCountryCenterTplSummary=new Wtf.XTemplate(
        '<div> &nbsp;</div>',
        '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',            
        '<div><hr class="templineview"></div>',
        '<div>',
        '<table width="100%">'+
        '<tr>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.vat")+'</b></td>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.cst")+'</b></td>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.pan")+'</b></td>'+
        '</tr>'+
        '<tr>'+
        '<td style="width:20%;" text-align=left>{CompanyVATNumber}</td>'+
        '<td style="width:20%;" text-align=right>{CompanyCSTNumber}</td>'+  
        '<td style="width:20%;" text-align=right>{CompanyPANNumber}</td>'+ 
        '</tr>'+
        '<tr>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.service")+'</b></td>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.tan")+'</b></td>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.ecc")+'</b></td>'+
        '</tr>'+
        '<tr>'+
        '<td style="width:20%;" text-align=right>{CompanyServiceTaxRegNumber}</td>'+ 
        '<td style="width:20%;" text-align=right>{CompanyTANNumber}</td>'+ 
        '<td style="width:20%;" text-align=right>{CompanyECCNumber}</td>'+ 
        '</tr>'+
        '</table>'+
        '</div>',            
        '<div><hr class="templineview"></div>',                        
        '</div>'
        );
        
    this.INDCountryCenterTpl=new Wtf.Panel({
        id:'INDCountryCenterTpl'+this.id,
        border:false,
        width:'95%',
        baseCls:'tempbackgroundview',
        hidden: WtfGlobal.GSTApplicableForCompany()!=Wtf.GSTStatus.OLDNEW,
        html:this.INDCountryCenterTplSummary.apply({
            CompanyVATNumber:this.isCustomer?Wtf.CompanyVATNumber:"",
            CompanyCSTNumber:this.isCustomer?Wtf.CompanyCSTNumber:"",
            CompanyPANNumber:this.isCustomer?Wtf.CompanyPANNumber:"",
            CompanyServiceTaxRegNumber:this.isCustomer?Wtf.CompanyServiceTaxRegNumber:"",
            CompanyTANNumber:this.isCustomer?Wtf.CompanyTANNumber:"",
            CompanyECCNumber:this.isCustomer?Wtf.CompanyECCNumber:""

        })
    }); 
    
    var taxAmountPlaceHolder = '{taxAmount}';
    var totalTaxAmountPlaceHolder = '{TotalTaxAmt}';
    if (this.isCustomer ? !Wtf.dispalyUnitPriceAmountInSales : !Wtf.dispalyUnitPriceAmountInPurchase) {
        /**
         * To hide tax amounts for user who doesn't have permission to see unit price in transactions
         */
        taxAmountPlaceHolder = Wtf.UpriceAndAmountDisplayValue;
        totalTaxAmountPlaceHolder = Wtf.UpriceAndAmountDisplayValue;
    }
    this.LineLevelTermTplSummary = new Wtf.XTemplate(
        '<div> &nbsp;</div>',
        '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',    
        '<div><hr class="templineview"></div>',
        '<div class ="currency-view">',
        '<table width="95%">',
        '<tpl for="lineLevelArray">',
        '<tr><td><b>{name} Amount </b></td><td style="text-align:right;">' + taxAmountPlaceHolder + '</td></tr>',
        '</tpl>',
        '</table>',
        '<div><hr class="templineview"></div>',
        '<table width="95%">',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.invoice.TotalTaxAmt")+' </b></td><td style="text-align:right;">' + totalTaxAmountPlaceHolder + '</td></tr>',
        '</table>',
        '<div><hr class="templineview"></div>',
        '</div>'
        );

    var lineLevelArray = [];
    if(WtfGlobal.GSTApplicableForCompany()==Wtf.GSTStatus.OLDNEW){
           for(var i=0; i<Wtf.LineTermsMasterStore.getRange().length; i++){
        var temp = Wtf.LineTermsMasterStore.getRange()[i].data;
        temp['taxAmount'] = WtfGlobal.currencyRenderer(0);
        lineLevelArray.push(temp);
    } 
    }

    this.LineLevelTermTpl=new Wtf.Panel({  
        border:false,
        hidden: !Wtf.account.companyAccountPref.isLineLevelTermFlag,
        baseCls:'tempbackgroundview',
        html:this.LineLevelTermTplSummary.apply({
            lineLevelArray : lineLevelArray,
            TotalTaxAmt:WtfGlobal.currencyRenderer(0)
        })
    });
    if(Wtf.account.companyAccountPref.openPOandSO){
        this.productDetailsTplSummary=new Wtf.XTemplate(
            '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',            
            '<div><hr class="templineview"></div>',
            '<div>',
            '<table width="100%">'+
            '<tr>'+
            '<td style="width:25%;"><b>'+WtfGlobal.getLocaleText("acc.field.ProductName")+'</b></td><td style="width:55%;"><span wtf:qtip="{productname}">'+Wtf.util.Format.ellipsis('{productname}',60)+'</span></td>'+                   
            '</tr>'+
            '<tr>'+
            '<td><b>'+WtfGlobal.getLocaleText("acc.field.InStock")+': </b></td><td style="width:10%;">{qty}</td>'+
            '<td><b>'+WtfGlobal.getLocaleText("acc.field.OpenPO")+': </b></td><td style="width:10%;">{poqty}</td>'+
            '<td><b>'+WtfGlobal.getLocaleText("acc.field.OpenSO")+': </b></td><td style="width:40%;">{soqty}</td>'+                        
            '</tr>'+
            '</table>'+
            '</div>',            
            '<div><hr class="templineview"></div>',                        
            '</div>'
            );   
    }else{
        this.productDetailsTplSummary=new Wtf.XTemplate(
            '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',            
            '<div><hr class="templineview"></div>',
            '<div>',
            '<table width="100%">'+
            '<tr>'+
            '<td style="width:25%;"><b>'+WtfGlobal.getLocaleText("acc.field.ProductName")+'</b></td><td style="width:55%;"><span wtf:qtip="{productname}">'+Wtf.util.Format.ellipsis('{productname}',60)+'</span></td>'+                   
            '</tr>'+
            '<tr>'+
            '<td><b>'+WtfGlobal.getLocaleText("acc.field.InStock")+': </b></td><td style="width:10%;">{qty}</td>'+
            '</tr>'+
            '</table>'+
            '</div>',            
            '<div><hr class="templineview"></div>',                        
            '</div>'
            );
    }
            
    this.productWeightDetailsTplSummary=new Wtf.XTemplate(
        '<div> &nbsp;</div>',
        '<div style="padding: 5px; border: solid rgb(153, 187, 232);border-width: 1px 1px 1px 1px;">', 
        '<div><hr class="templineview"></div>',
        '<div>',
        '<table width="100%">',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductWeight")+': </b></td><td text-align=right>{totalprdweight}</td></tr>',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductWeightWithPackaging")+': </b></td><td text-align=right>{totalprdweightwithpack}</td></tr>',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductVolume")+': </b></td><td text-align=right>{totalprdvolume}</td></tr>',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductVolumeWithPackaging")+': </b></td><td text-align=right>{totalprdvolumewithpack}</td></tr>',
        '</table>',
        '</div>',            
        '<div><hr class="templineview"></div>',                        
        '</div>'
        );
            
    var blockSpotRateLink_first = "";
    var blockSpotRateLink_second = "";
    if(!Wtf.account.companyAccountPref.activateToBlockSpotRate && !this.isLinkedTransaction){ // If activateToBlockSpotRate is set then block the Spot Rate Links and when transaction already linked in another transaction.
        blockSpotRateLink_first = WtfGlobal.getLocaleText("acc.invoice.msg9")+"</div><div style='padding-left:30px;padding-top:5px;padding-bottom:10px;'><a class='tbar-link-text' href='#' onClick='javascript: editInvoiceExchangeRates(\""+this.id+"\",\"{foreigncurrency}\",\"{basecurrency}\",\"{revexchangerate}\",\"foreigntobase\")'wtf:qtip=''>{foreigncurrency} to {basecurrency}</a>";
        blockSpotRateLink_second = WtfGlobal.getLocaleText("acc.invoice.msg9")+"</div> <div style='padding-left:30px;padding-top:5px;'><a class='tbar-link-text' href='#' onClick='javascript: editInvoiceExchangeRates(\""+this.id+"\",\"{basecurrency}\",\"{foreigncurrency}\",\"{exchangerate}\",\"basetoforeign\")'wtf:qtip=''>{basecurrency} to {foreigncurrency}</a></div>";
    }
    this.southCenterTplSummary=new Wtf.XTemplate(
        "<div> &nbsp;</div>",  //Currency:
        '<tpl if="editable==true">',
        "<b>"+WtfGlobal.getLocaleText("acc.invoice.msg8")+"</b>",  //Applied Exchange Rate for the current transaction:
        "<div style='line-height:18px;padding-left:30px;'>1 {foreigncurrency} "+WtfGlobal.getLocaleText("acc.inv.for")+" = {revexchangerate} {basecurrency} "+WtfGlobal.getLocaleText("acc.inv.hom")+". "+
        blockSpotRateLink_first,
        "</div><div style='line-height:18px;padding-left:30px;'>1 {basecurrency} "+WtfGlobal.getLocaleText("acc.inv.hom")+" = {exchangerate} {foreigncurrency} "+WtfGlobal.getLocaleText("acc.inv.for")+". "+    
        blockSpotRateLink_second,
        '</tpl>'
        );    
            
    this.southCenterTpl=new Wtf.Panel({
        border:false,
            html:this.southCenterTplSummary.apply({basecurrency:WtfGlobal.getCurrencyName(),exchangerate:'x',foreigncurrency:"Foreign Currency", editable:false})
    });
        
    this.productDetailsTpl=new Wtf.Panel({
        border:false,
        baseCls:'tempbackgroundview',
        width:'95%',            
            html:this.productDetailsTplSummary.apply({productname:"&nbsp;&nbsp;&nbsp;&nbsp;",qty:0,soqty:0,poqty:0})
    });

    this.productWeightDetailsTpl=new Wtf.Panel({
        id:'productWeightDetailsTpl'+this.id,
        border:false,
        baseCls:'tempbackgroundview',
        width:'95%',
        hidden:(this.moduleid == Wtf.Acc_Delivery_Order_ModuleId && Wtf.account.companyAccountPref.calculateproductweightmeasurment)?false:true,
        html:this.productWeightDetailsTplSummary.apply({
            totalprdweight:0,
            totalprdweightwithpack:0
        })
    });
        
    var itemArr={};
    itemArr = [this.ShowOnlyOneTime,this.Name,this.Currency,{
        layout:'column',
        border:false,
                defaults:{border:false},items:[ {
            layout:'form',
            ctCls : "",
            width:235,
            items:this.fromPO             
        },
        {
            width:250,
            layout:'form',
            labelWidth:45,
            items:this.fromLinkCombo
        }
           ]},this.PO,this.sequenceFormatCombobox,this.Number,this.billDate,this.challanNumber,this.CustomerPORefNo,this.SupplierInvoiceNo,this.GTAApplicable,this.isMerchantExporter,this.isEWayCheck,this.isFreeGift,this.editedBy,this.FormType];
   
    this.tagsFieldset = new Wtf.account.CreateCustomFields({
        border: false,
        compId:"northForm"+this.id,
        parentObjScope: this,
        autoHeight: true,
        parentcompId:this.id,
        moduleid: this.moduleid,
        isEdit: this.isEdit,
        record: this.record,
        isViewMode:this.readOnly,
        iscallFromTransactionsForm: this.invoicefromorder
    });
        
    this.NorthForm=new Wtf.form.FormPanel({
        region:'north',
        autoHeight:true,
        id:"northForm"+this.id,
        //disabled:this.readOnly,
        disabledClass:"newtripcmbss",
        border:false,
        items:[{
            layout:'form',
            baseCls:'northFormFormat',
            labelWidth:175,
            cls:"visibleDisabled",
            items:[{
                layout:'column',
                border:false,
                    defaults:{border:false},
                items:[{
                    layout:'form',
                    columnWidth:0.65,
                    border:false,
                    items:itemArr
                },{
                    layout:'form',
                    columnWidth:0.35,
                    border:false,
                        items:[this.CostCenter,this.DOStatusCombo,this.Memo, this.shipDate, this.Term, this.shipvia, this.fob,this.includingGST, this.includeProTax,this.applyTaxToTermsChk,this.permitNumber,this.driver,this.users]
                }]
            },this.tagsFieldset]
        }]
    });
    this.NorthForm.on('render',function(){
        this.termds.load({
            params: {               
                cash_Invoice: this.cash
            }
        });
    },this);
    this.helpMessage= new Wtf.Button({
        text:WtfGlobal.getLocaleText("acc.dashboard.help"),  //'Help',
        handler:this.helpmessage,
        scope:this,
        tooltip: WtfGlobal.getLocaleText("acc.common.click"),  //'Click for help',
        iconCls: 'help'
    });
        if (this.invoicefromorderrec != undefined && this.invoicefromorderrec != '') {
            this.POdate = this.invoicefromorderrec.date != undefined?this.invoicefromorderrec.date:(new Date(this.invoicefromorderrec.billdate));
        }
    this.addGrid();

    this.NorthForm.doLayout();
    // this.POStore.on('load',this.updateSubtotal,this)
    this.billDate.on('change',this.onDateChange,this);
    this.GTAApplicable.on('change', this.onRCMApplicableChange, this);    
    this.isMerchantExporter.on('change', this.onMerchantExporterChange, this);    
    if (Wtf.account.companyAccountPref.enableLinkToSelWin && (this.moduleid === Wtf.Acc_Delivery_Order_ModuleId || this.moduleid === Wtf.Acc_Goods_Receipt_ModuleId )) {
            
            this.POStore.on('load',function(){addMoreOptions(this.PO,this.PORec)}, this);                     
            
            this.POStore.on('datachanged',function(){addMoreOptions(this.PO,this.PORec)}, this);                      
            
        this.PO.on("select", function () {
            var billid = this.PO.getValue();
            if (billid.indexOf("-1") != -1) {
                var url = "";
                if (this.fromLinkCombo.getValue() == 0 && this.isOrder) {
                    url = this.isCustomer ?  "ACCSalesOrderCMN/getSalesOrders.do" :"ACCPurchaseOrderCMN/getPurchaseOrders.do" ;
                }else if(this.fromLinkCombo.getValue() == 1){
                    url = this.isCustomer ? "ACCInvoiceCMN/getInvoices.do" : "ACCGoodsReceiptCMN/getGoodsReceiptListForLinking.do"      
                }else if(this.fromLinkCombo.getValue() == 2){ // Job Work ORDERS
                    url = this.isCustomer ?  "ACCSalesOrderCMN/getSalesOrders.do" :"ACCPurchaseOrderCMN/getPurchaseOrders.do" ;   
                }else if(this.fromLinkCombo.getValue() == 3){ 
                 /* 
                  *Security Gate Entry
                  */
                    url = "ACCPurchaseOrderCMN/getSecurityGateEntry.do" ;   
                }
                this.PO.collapse();
                this.PO.clearValue();
                this.showPONumbersGrid(url);
                
            }
        }, this);
    }
    
        var isGlobalLevelTaxHidden = false;

        /*----Condition to hide global level tax in transaction form------ */

        if (this.isEdit && this.record != null) {//For Edit , Copy & View Case
            if (this.record.data.taxid != undefined && this.record.data.taxid != null && this.record.data.taxid != "") {

                isGlobalLevelTaxHidden = false;
            } else {
                /*---Copy/Edit/View Case ----  */
                if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {//Check is true only for malaysian company
                    isGlobalLevelTaxHidden = true;
                } else if ((Wtf.account.companyAccountPref.countryid == '137' && !Wtf.account.companyAccountPref.enableGST) || Wtf.account.companyAccountPref.isLineLevelTermFlag == 1) {
                    isGlobalLevelTaxHidden = true;

                }
            }
        } else {
            /*---Create New Case----  */
            if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {//Check is true only for malaysian company
                isGlobalLevelTaxHidden = true;
            } else if ((Wtf.account.companyAccountPref.countryid == '137' && !Wtf.account.companyAccountPref.enableGST) || Wtf.account.companyAccountPref.isLineLevelTermFlag == 1) {
                isGlobalLevelTaxHidden = true;

            }
        }
        
    this.isTaxable= new Wtf.form.ComboBox({
        triggerAction:'all',
        mode: 'local',
        valueField:'value',
        displayField:'name',
        id:"includetax"+this.heplmodeid+this.id,
        store:this.fromPOStore,
        listWidth:50,
        fieldLabel:WtfGlobal.getLocaleText("acc.inv.totax"),  //"Include Total Tax",
        allowBlank:this.isOrder,
        value:false,
        hideLabel:isGlobalLevelTaxHidden,// hide if company is malaysian and GST is not enabled for it
        hidden:isGlobalLevelTaxHidden,// hide if company is malaysian and GST is not enabled for it
        width:50,
        typeAhead: true,
        forceSelection: true,
        name:'includetax',
        hiddenName:'includetax',
        listeners:{
            'select':{
                fn:this.enabletax,
                scope:this
            }
        }
    });
    this.Tax= new Wtf.form.ExtFnComboBox({
        fieldLabel:WtfGlobal.getLocaleText("acc.invoice.Tax"),  //'Tax',
        id:"tax"+this.heplmodeid+this.id,
        disabled:!this.isEdit,
        hiddenName:'tax',
        anchor: '97%',
        store:this.Grid.taxStore,
        hideLabel:isGlobalLevelTaxHidden,// hide if company is malaysian and GST is not enabled for it
        hidden:isGlobalLevelTaxHidden,// hide if company is malaysian and GST is not enabled for it
        valueField:'prtaxid',
        forceSelection: true,
        //            labelWidth:50,
        displayField:'prtaxname',
        //            addNewFn:this.addTax.createDelegate(this),
        scope:this,
        extraFields:[],
        isTax: true,
        listeners:{
            'select':{
                fn:this.callGSTCurrencyRateandUpdateSubtotal,
                scope:this
            },
            'beforeselect': {
                fn: function (combo, record, index) {
                    return validateSelection(combo, record, index);
                },
                scope: this
            }
        },
        selectOnFocus:true
    });
    
    var southPanelItemsArr = [this.productDetailsTpl,this.productWeightDetailsTpl,this.INDCountryCenterTpl,this.LineLevelTermTpl, this.southCenterTpl];
    
    //We do not show Invoice Term Grid in case of Avalara integration (ERP-33833)
    if (!this.isModuleForAvalara) {
        this.termgrid = CommonERPComponent.addInvoiceTermGrid(this);
         this.termgrid.on('render', function(){
               this.termgrid.getView().getRowClass = WtfGlobal.getRowClass.createDelegate(this, [this.termgrid], 1);
            }, this);
        southPanelItemsArr.push(this.termgrid);
    }
    
    this.southPanel=new Wtf.Panel({
        hidden: !(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInDO:Wtf.account.companyAccountPref.unitPriceInGR),
        region:'center',
        border:false,
//        disabled:this.readOnly,
        disabledClass:"newtripcmbss",
        style:'padding:0px 10px 10px 10px',
        layout:'column',//layout:'border',//Bug Fixed: 14871[SK] Scrolling issue : changed layout from border to column
        height:(Wtf.isIE?350:290)+180,
        items:[{
            columnWidth: .45,// width: 570,//region:'center',
            border:false,
            items : southPanelItemsArr
        },{
            columnWidth: .30,
            layout:'column',// width: 570,//region:'center',
            items:[
            {
                columnWidth:0.55,
                layout:'form',
                border:false,
                items:[this.isTaxable]
            }, {
                columnWidth:0.43,
                layout:'form',
                labelWidth:30,
                border:false,
                items:[this.Tax]
                        
            }], 
            border:false
        },{
            columnWidth:.25,
            layout:'form',
            cls:'bckgroundcolor',
            bodyStyle:'padding:10px',
            labelWidth:70,
            items:[this.southCalTemp]
        }]            
    });
        
    this.toggleBtnPanel = new Wtf.Panel({
        style: 'padding: 10px 10px 0;',
        border : false,
        autoScroll: true,
        hidden:true,
        items : [{
            xtype: 'button',
            enableToggle: true,
            id:"setButton"+this.heplmodeid+this.id,
            hidden: this.readOnly,
            disabled:true,
            cls : 'setlocationwarehousebtn',
            text: WtfGlobal.getLocaleText("acc.SetWarehouseLocation"),
            toggleGroup: 'massupdate',
            handler: this.SetLocationwarehouseWindow.createDelegate(this)
        }]
    });
        
        
    this.deleteSelectedPanel = new Wtf.Panel({
        style: 'padding: 10px 10px 0;',
        border: false,
        autoScroll: true,
        hidden: true,
        items: [{
            xtype: 'button',
            id: "deleteButton" + this.heplmodeid + this.id,
            disabled: true,
            cls: 'setlocationwarehousebtn',
            text: WtfGlobal.getLocaleText("acc.common.deleteselected"),
            handler: this.deleteSelectedRecord.createDelegate(this)
        }]
    });
        
    if (!this.readOnly) {
        this.deleteSelectedPanel.show();
    }
        
    this.formpPanelOfbutton = new Wtf.Panel({
        border: false,
        autoScroll: true,
        layout: 'table',
        items: [this.toggleBtnPanel, this.deleteSelectedPanel]

    });
    
        this.Grid.on("onselection", function () {
            if (this.Grid.sModel.getCount() >= 1) {
                if (Wtf.getCmp("setButton" + this.heplmodeid + this.id)) {
                    Wtf.getCmp("setButton" + this.heplmodeid + this.id).enable();
                }
            } else {
                if (Wtf.getCmp("setButton" + this.heplmodeid + this.id)) {
                    Wtf.getCmp("setButton" + this.heplmodeid + this.id).disable();
                }
            }
            if (this.Grid.sModel.getCount() >= 1 && !this.isLinkedTransaction) {
                if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id)) {
                    Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).enable();
                }
            } else {
                if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id)) {
                    Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).disable();
                }
            }
        }, this);    
    
     this.Grid.sModel.on("rowselect", this.setProductDetailsTplSummaryOptimised, this);//Delivery Order & GRO
     this.Grid.sModel.on("rowdeselect", this.resetProductDetailsTplSummary, this);
    if(Wtf.account.companyAccountPref.isWarehouseCompulsory && Wtf.account.companyAccountPref.isLocationCompulsory ){
        this.toggleBtnPanel.show();
    }
    this.NorthForm.doLayout();
    this.southPanel.doLayout();
        
    this.setTransactionNumber();     
},
validateSIN : function(){
        var SupplierInvoiceNo =this.SupplierInvoiceNo.getValue();
        if(SupplierInvoiceNo!='' && WtfGlobal.isIndiaCountryAndGSTApplied()){
            if(SupplierInvoiceNo.length > 16){
                 Wtf.MessageBox.confirm("Warning",WtfGlobal.getLocaleText("acc.gst.SINSequenceformatErrorMsg1") + SupplierInvoiceNo + WtfGlobal.getLocaleText("acc.gst.SINSequenceformatErrorMsg2") + Wtf.SeqenceFormatMaxLengthForIndianCompany + WtfGlobal.getLocaleText("acc.gst.SINSequenceformatErrorMsg3"), function(btn){
                                if(btn == 'yes') {  
                                    this.SupplierInvoiceNo.setValue(SupplierInvoiceNo);
                                }else if(btn == 'no') {
                                    this.SupplierInvoiceNo.reset();
                                    return;           
                                }
                            },this);
        }
      }
   },
onFreeGiftOptionChanged:function(obj,newval,oldval){
        if(obj.getValue()){
            var account = Wtf.account.companyAccountPref.freeGiftJEAccount;
            if(account == '' || account == undefined || account == null){
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.alert.setFeeGiftAccount")], 2);
                obj.setValue(false)
                return;
            }
            /*
             * Auto generated DOs can not be set as Free Gift Type transactions
             */
            if(this.isautogenerateddo && (this.isEdit && !this.copyInv)){
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.malaysiangst.blockEditAutoGeneratedDO")], 2);
                obj.setValue(false)
                return;
            }
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.freeGift.canNotApplyGst"), function(btn){
                if(btn == 'yes') {  
                    /*
                     * Resetting all the tax related fields.
                     */
                    if(this.includingGST){
                        this.includingGST.setValue(false);
                        this.includingGST.disable();
                    }
                    if(this.includeProTax){
                        this.includeProTax.setValue(false);
                        this.showGridTax(null,null,true);
                        this.includeProTax.disable();
                    }
                    if(this.isTaxable){
                        this.isTaxable.setValue(false);
                        this.isTaxable.disable();
                    }
                    if(this.Tax){
                        this.Tax.setValue("");
                        this.Tax.disable();
                    }
                    this.fromLinkCombo.disable();
                    this.fromLinkCombo.clearValue();
                    this.PO.disable();
                    this.PO.reset();
                    this.fromPO.setValue(false);
                    this.fromPO.disable();
                    this.Grid.fireEvent('datachanged', this);
                }else if(btn == 'no') {
                    obj.setValue(oldval);                    
                    return;           
                }
            },this); 
        } else {
            this.fromPO.enable();
            var date = this.billDate.getValue() === "" ? new Date() : new Date(this.billDate.getValue());
            var isTaxShouldBeEnable = WtfGlobal.isTaxShouldBeEnable(date.clearTime());
            if(isTaxShouldBeEnable){
                if(this.includingGST){
                    this.includingGST.enable();
                }
                if(this.includeProTax){
                    this.includeProTax.enable();
                }
                if(this.isTaxable){
                    this.isTaxable.enable();
                }
            }
        }   
    },
addSelectedDocument:function(){
    var url="";
    if(this.moduleid==Wtf.Acc_Goods_Receipt_ModuleId){
        if(this.fromLinkCombo.getValue() == 0 || this.fromLinkCombo.getValue() == 2){
            url = "ACCPurchaseOrderCMN/getPurchaseOrders.do"  ;
        }else if(this.fromLinkCombo.getValue() == 1){
            url = "ACCGoodsReceiptCMN/getGoodsReceiptListForLinking.do";
        }else if(this.fromLinkCombo.getValue() == 3){
          /* 
           *Security Gate Entry
           */
            url = "ACCPurchaseOrderCMN/getSecurityGateEntry.do"  ;
        }   
    }else if(this.moduleid==Wtf.Acc_Delivery_Order_ModuleId){
        if(this.fromLinkCombo.getValue() == 0 || this.fromLinkCombo.getValue() == 2 ){
            url = "ACCSalesOrderCMN/getSalesOrders.do"  ;
        }else if(this.fromLinkCombo.getValue() == 1){
            url = "ACCInvoiceCMN/getInvoices.do";
        }
    }
    this.showPONumbersGrid(url);
},
addCreditTerm:function(){
    callCreditTerm('credittermwin');
        Wtf.getCmp('credittermwin').on('update', function(){this.termds.reload();}, this);
},
getTermLabel: function(){
    var termLabel = '';
    if(this.isCustomer){
        termLabel = "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.invoice.creditTerm.tip")+"'>"+ WtfGlobal.getLocaleText("acc.invoice.creditTerm")+"</span>";
    }else{
        termLabel = "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.invoice.debitTerm.tip")+"'>"+ WtfGlobal.getLocaleText("acc.invoice.debitTerm")+"</span>";
    }
    termLabel += ' *';
        
    return termLabel;
},
getTermEmptyText: function(){
    var termEmptyText = '';
    if(this.isCustomer){
        termEmptyText = WtfGlobal.getLocaleText("acc.inv.ct");
    }else{
        termEmptyText = WtfGlobal.getLocaleText("acc.inv.dt");
    }
        
    return termEmptyText;
},
    
//addInvoiceTermGrid : function() {
//    this.termcm = [{
//        header: WtfGlobal.getLocaleText("acc.field.Term"),
//        dataIndex: 'term'
//    }, {
//        header: WtfGlobal.getLocaleText("acc.field.Percentage"),
//        dataIndex: 'termpercentage',
//        editor: new Wtf.form.NumberField({
//            xtype: "numberfield",
//            maxLength: 15,
//            allowNegative: false,
//            minValue: 0,
//            maxValue: 100,
//            regexText: Wtf.MaxLengthText + "15"
//        })
//    }, {
//        header: WtfGlobal.getLocaleText("acc.dnList.gridAmt"),
//        dataIndex: 'termamount',
//        renderer: function(val, meta, rec) {
//            if (typeof val == 'number' && val >= 0 && rec.data.sign == 0) {
//                rec.set('termamount', val * (-1));
//                return val * (-1)
//            } else {
//                return val;
//            }
//        },
//        editor: new Wtf.form.NumberField({
//            xtype: "numberfield",
//            maxLength: 15,
//            allowNegative: true,
//            regexText: Wtf.MaxLengthText + "15"
//        })
//    }];
//        
//    this.termRec = new Wtf.data.Record.create([
//            {name: 'id'},
//            {name: 'term'},
//            {name: 'glaccount'},
//            {name: 'sign'},
//            {name: 'formula'},
//            {name: 'formulaids'},
//            {name: 'termamount'},
//            {name: 'termpercentage'},
//            {name: 'termtaxamount'},
//            {name: 'termtax'},
//            {name: 'termtaxamountinbase'}
//    ]);
//    this.termStore = new Wtf.data.Store({
//        reader: new Wtf.data.KwlJsonReader({
//            root: "data"
//        },this.termRec),
//        url: 'ACCAccount/getInvoiceTermsSales.do',
//        baseParams:{
//            isSalesOrPurchase:this.isCustomer?true:false
//        }
//    });
//    this.termStore.load();
//    this.termStore.on('load',this.closeTermGrid,this);
//        
//    this.termgrid = new Wtf.grid.EditorGridPanel({
//        clicksToEdit:1,
//        store: this.termStore,
//        height:100,
//        autoScroll : true,
//        disabledClass:"newtripcmbss",
//        cm: new Wtf.grid.ColumnModel(this.termcm),
//        border : false,
//        loadMask : true,
//        viewConfig: {
//            forceFit:true,
//            emptyText:WtfGlobal.getLocaleText("acc.common.norec")
//        }
//    });
//        
//    this.InvoiceTermGridPanel  = new Wtf.Panel({ 
//        id: "invoicetermgridpanel" + this.id,
//        hidden:Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA,
//        height:130,
//        border:false,
//        style:'padding-top:10px;',
//        items: [
//        {
//            border:false,
//            layout:'table',
//            /*
//                     *  Due to new improvement for Invoice terms below setting is removed from system
//                     *  i.e. from system control also.
//                     */
//            items: [{
//                width:150,
//                border:false,
//                bodyStyle : 'padding-top:10px;',
//                html: 'Terms Inclusive of GST:',
//                hidden:true
//            },this.TermsIncludeGST_YES = new Wtf.form.Radio({
//                xtype: 'radio',
//                //  boxLabel: 'Yes',
//                disabled : true,
//                checked:Wtf.account.companyAccountPref.termsincludegst==true,
//                width:50,
//                fieldLabel: 'Terms Inclusive of GST',
//                hidden:true                          
//            }), this.TermsIncludeGST_NO = new Wtf.form.Radio({
//                xtype: 'radio',
//                //  boxLabel: 'No',
//                disabled : true,
//                checked:Wtf.account.companyAccountPref.termsincludegst==false,
//                width:50,
//                fieldLabel: 'Terms Inclusive of GST1',
//                hidden:true                          
//            })
//            ]
//        },
//        this.termgrid
//        ]
//    });
//        
//    this.termgrid.on('afteredit',function(obj) {
//        if(obj.field=='termamount') {
//            obj.record.set('termpercentage','');
//        } else if(obj.field=='termpercentage' && obj.value==0) {
//            obj.record.set('termpercentage','');
//        }
//        this.updateSubtotalOnTermChange(true);
//    },this);
//    this.termgrid.on('cellclick', function(grid, rowIndex, columnIndex, e) {
//        var fieldName = grid.getColumnModel().getDataIndex(columnIndex); // Get field name
//        if (this.isViewTemplate || (this.isLinkedTransaction && this.isEdit)) {
//            if (fieldName == 'termamount' || fieldName == 'termpercentage') {
//                return false;
//            }
//        }
//    }, this);
//},
//closeTermGrid : function(obj){
//    var store = this.termgrid.store;
//    if(this.termStore.data.length==0){
//        this.InvoiceTermGridPanel.hide();
//    }
//},
updateSubtotalOnTermChange : function(updateTotalSummary) {
    for(var i=0; i<this.termStore.getCount(); i++) {
        var recdata = this.termStore.getAt(i).data;
        var store = this.termStore;
        var subtotal = this.calProdSubtotalWithoutDiscount();
        var formula = recdata.formulaids.split(",");
        var termtotal = 0;
        for(var cnt=0; cnt<formula.length; cnt++){
            if(formula[cnt]=='Basic') {
                termtotal +=(subtotal);
            }
            var record = store.queryBy(function(record){
                return (record.get('id') == formula[cnt]);
            }, this).items[0];
            if(record && (typeof record.data.termamount=='number')) {
                termtotal +=(record.data.termamount);
            }
        }
        if(typeof (recdata.termpercentage) != "string" && parseInt(recdata.termpercentage) >= 0) {
            var opmod = recdata.sign==0 ? -1 : 1;
            var this_termTotal = ((Math.abs(termtotal) * recdata.termpercentage*1) / 100)*opmod;
            this.termStore.getAt(i).set('termamount',getRoundedAmountValue(this_termTotal));
        }
    }
    if(updateTotalSummary) {
        this.updateSubtotal();
    }
},
calProdSubtotalWithoutDiscount:function(){
    var subtotal=0;
    var count=this.Grid.store.getCount();
    var store = this.Grid.store;
    for(var i=0;i<count;i++){
        if(this.isExpenseInv){
            var total=store.getAt(i).data.amount;
        }else{
            //                var total=store.getAt(i).data.amountwithouttax;
            var total=store.getAt(i).data.amountWithoutTax;
        }
        subtotal+=total;
    }
        
    /*
         *  If preference set to include GST amount in base then in subtotal add GST tax amount
         */
//    if(this.termsincludegst) {
//        subtotal +=this.caltax();
//    }
    return subtotal;
},
findTermsTotal : function() {
    var termTotal = 0;
    if(this.termgrid) {
        var store = this.termgrid.store;
        var totalCnt = store.getCount();
        for(var cnt=0; cnt<totalCnt; cnt++) {
            var lineAmt = store.getAt(cnt).data.termamount;
            if(typeof lineAmt=='number'){
                termTotal += getRoundedAmountValue(lineAmt);
            }
        }
    }
    /*
    * In case of "Inclusive of Tax" Term Amount is considered as Including Tax.
    * So in case of Including GST we are calculating term amount as below,
    * Total Term Amount minus Total tax calculate on term amount.
    */
    if(this.includingGST && this.includingGST.getValue()){
        termTotal = termTotal - this.addTermAmountInTax();
    }
    return getRoundedAmountValue(termTotal);
},
getInvoiceTermDetails : function() {
    var arr=[];
    if(this.termgrid) {
        var store = this.termgrid.store;
        store.each(function(rec){
            /*
             * If "None" selected in tax combo then send empty taxid
             */
            if(rec.data.termtax == "None"){
                   rec.set("termtax", "");
                }
            var lineAmt = rec.data.termamount;
            if(typeof lineAmt=='number' && lineAmt !=0) {
                arr.push(store.indexOf(rec));
            }            
        }, this);
        return WtfGlobal.getJSONArray(this.termgrid,true,arr)
        }
},
getInvoiceTermWithoutEncode: function () {
        var termRecArr = new Array();
        for (var i = 0; i < this.termStore.getTotalCount(); i++) {
            termRecArr.push(this.termStore.getAt(i).data);
        }
        if (termRecArr.length > 0) {
            return JSON.stringify(termRecArr);
        } else {
            return "";
        }
    },
setTermValues: function(termDetails) {
    if( this.termgrid!=undefined && this.termgrid!=null){
    if (termDetails != "" && termDetails != null && termDetails != undefined) {
        var detailArr = eval(termDetails);
        for (var cnt = 0; cnt < detailArr.length; cnt++) {
            var jObj = detailArr[cnt];

            var record = this.termStore.queryBy(function(record) {
                return (record.get('id') == jObj.id);
            }, this).items[0];
            if (record) {
                record.set('termamount', jObj.termamount);
                record.set('termpercentage', jObj.termpercentage == 0 ? "" : jObj.termpercentage);
             /*
              * ERP-40242 : The below check is to avoid load tax and tax amount in copy case if tax is  deactivated.
              */
              if(jObj.isActivated || !(this.copyInv || (this.fromPO != undefined && this.fromPO.getValue()))){
                if (!this.readOnly) {
                    this.linkedTaxDummyStore.insert(cnt, new this.linkedTaxDummyStore.recordType({
                        termtax:jObj.termtax,
                        linkedtaxname:jObj.linkedtaxname,
                        linkedtaxpercentage:jObj.linkedtaxpercentage
                    }));
                    record.set('termtax',jObj.termtax);
                } else {
                    record.set('termtax',jObj.linkedtaxname);
                }
                record.set('linkedtaxpercentage',jObj.linkedtaxpercentage);
                record.set('termtaxamount',jObj.termtaxamount);
              }
            }
            
           }
        }       
   WtfGlobal.fliterNonUsedDeactivatedTerms(this);
   }
},
summarizeInvoiceTermAmount: function(selectedValuesArr){
        
        Wtf.Ajax.requestEx({
                url: "kwlCommonTables/getSourceDocumentTermsInLinkingDocument.do",
                params: {
                    ids : selectedValuesArr.toString(),
                    fromlinkcombovalue : this.fromLinkCombo.getValue(),
                    isCustomer : this.isCustomer,
                    isFromDelivery : true
                }
        }, this, function(response) {
            if(response != null && response != undefined && response.success){
                this.setTermValues(response.termDetails);
            }
        },function(response) {
            
        });        
    },
addMoreOptions:function(){
    var recordIndex = this.PO.store.findBy(
        function (record, id) {
            if (record.get('billid') === '-1') {
                return true;  // a record with this data exists
            }
            return false;  // there is no record in the store with this data
        }
        );
    if (recordIndex == -1 && this.PO.store.getCount()) {
        this.PO.store.insert(this.PO.store.getCount(), new this.PORec({
            billno: "<a href=#>More</a>",
            billid: '-1'
        })); // created record for "More"
    }
},
getAddressWindow:function(){
    var custvendorid=this.Name.getValue();
    var addressRecord="";
    if(this.linkRecord && this.singleLink){      //when user link single record
        addressRecord=this.linkRecord;
    } else {
        addressRecord=this.record;
    }
    var isCopy = this.copyInv;
    var isEdit = this.isEdit;
    if (this.isVenOrCustSelect) {
        isEdit = false;
        isCopy = false;
    }
     /*
        For India GST State As Combo in customer and vendor masters if Customer/Vendor type is Export (WPAY),Export (WOPAY),Import
     */
    
    
        this.stateAsComboFlag = false;
        if (WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied()) {

            this.stateAsComboFlag = true;
            if (WtfGlobal.isIndiaCountryAndGSTApplied()) {
                this.custVenId = Wtf.GSTCUSTVENTYPE.NA;
                this.personstore = this.isCustomer ? Wtf.customerAccRemoteStore : Wtf.vendorAccRemoteStore;
                var index = this.personstore.find('accid', this.Name.getValue());
                if (index != -1) {
                    var storerec = this.personstore.getAt(index);
                    this.custVenId = storerec.data.CustVenTypeDefaultMstrID;
                }
                this.stateAsComboFlag = (this.custVenId == undefined || !(this.custVenId == Wtf.GSTCUSTVENTYPE.Export || this.custVenId == Wtf.GSTCUSTVENTYPE.ExportWOPAY || this.custVenId == Wtf.GSTCUSTVENTYPE.Import)) ? true : false
            }
        }
    callAddressDetailWindow(addressRecord,isEdit,isCopy,custvendorid,this.currentAddressDetailrec,this.isCustomer,this.readOnly,"",this.singleLink,undefined,WtfGlobal.getModuleId(this),false,"",false,false,this.stateAsComboFlag); 
    Wtf.getCmp('addressDetailWindow').on('update',function(config){
        this.currentAddressDetailrec=config.currentaddress;
            /**
             * auto poulate dimension values
             */
            if (this.isGST) {
                /**
                 * ERP-32829 
                 * code for New GST 
                 */
                this.ignoreHistory=true;
                this.addressDetailRecForGST=this.currentAddressDetailrec;
                if (this.isModuleForAvalara) {
                    var productRecordsArr = [];
                    this.Grid.store.each(function (record, recordIndex, totalRecordCount) {
                        var tempObj = record.data;
                        if ((tempObj.pid || tempObj.productid) && tempObj.quantity) {
                            tempObj.rowIndex = recordIndex;
                            productRecordsArr.push(tempObj);
                        }
                    });
                    getTaxFromAvalaraAndUpdateGrid(this.Grid, undefined, productRecordsArr);
                } else {
                    var obj = {};
                    obj.tagsFieldset=this.tagsFieldset;
                    obj.currentAddressDetailrec=this.addressDetailRecForGST;
                    obj.mappingRec=this.addressMappingRec;
                    obj.isCustomer=this.isCustomer;
                    obj.isShipping=this.isShipping;
                    obj.stateAsComboFlag = this.stateAsComboFlag;
                        var invalid = populateGSTDimensionValues(obj)
                    if (this.isIndiaGST) {
                        /**
                         * On Address Changes done then need to make getGSTForProduct Request to update tax Details
                         */
                        var isAddressChanged = true; 
                        this.applyGSTFieldsBasedOnDate(isAddressChanged);
                    } else {
                        processGSTRequest(this, this.Grid);
                    }
            }
            }
    },this);
},
//Open attachments window after click on Add Attachments button
showAttachmentsWindow: function(){
    openAttachmentsWindow(this);
},
addDOStatus: function(){
    (this.businessPerson == "Customer")? addMasterItemWindow('10') : addMasterItemWindow('11');
},
/**
 * On Merchant Export check Change
 */
onMerchantExporterChange: function (o, val, oldval) {
    if (this.Name.getValue() == '') {
        this.isMerchantExporter.setValue(oldval);
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), this.isCustomer ? WtfGlobal.getLocaleText("acc.mp.selectCustFirst") : WtfGlobal.getLocaleText("acc.mp.selectVenFirst")], 2);
        return;
    }
    /**
     * If customer/Vendor GST Registration Type is 'Registered' and Customer/Vendor type is 'NA'
     * then only allow to create merchant exporter transaction
     */
    if (!(this.CustVenTypeDefaultMstrID!=undefined && this.GSTINRegTypeDefaultMstrID!=undefined 
            && this.CustVenTypeDefaultMstrID==Wtf.GSTCUSTVENTYPE.NA 
            && this.GSTINRegTypeDefaultMstrID==Wtf.GSTRegMasterDefaultID.Regular)) {
        this.isMerchantExporter.setValue(oldval);
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), this.isCustomer ? WtfGlobal.getLocaleText("acc.gstrr.isMerchantExporter.error.customer") : WtfGlobal.getLocaleText("acc.gstrr.isMerchantExporter.error.vendor")], 2);
        return;
    }
    if (this.Grid.getStore().getCount() > 1) {
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoice.gridDataWillCleared"), function (btn) {
            if (btn == "yes") {
                this.Grid.getStore().removeAll();
                this.Grid.addBlankRow();
                this.updateSubtotal(this, true);
                this.Grid.updateTermDetails();
            } else {
                o.setValue(oldval);
            }
        }, this);
    }
},
//ERP-34970(ERM-534)
onRCMApplicableChange: function(o, val, oldval) {
    /**
     * Show Alert On RCM check enable and Including GST check already ON
     */
        if (WtfGlobal.isIndiaCountryAndGSTApplied()) {
            if (this.includingGST && this.includingGST.getValue()) {
                this.GTAApplicable.setValue(oldval);
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.common.rcm.applicable.including.gst.notallowed")], 2);
                return;
            }
        }
        if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.GTAApplicable.getValue() && this.isCustomer) {
            var extraparams = {};
            /**
             * If custmer / Vendor Not selected then RCM check changes
             */
            if (this.Name.getValue() == '') {
                this.GTAApplicable.setValue(oldval);
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), this.isCustomer ? WtfGlobal.getLocaleText("acc.mp.selectCustFirst") : WtfGlobal.getLocaleText("acc.mp.selectVenFirst")], 2);
                return;
            }
            if (this.Name.store.getCount() > 0) {
                var recordid = this.Name.getValue();
                var index = this.Name.store.find('accid', recordid);
                if (index != -1) {
                    var record = this.Name.store.getAt(index);
                    extraparams.record = record;
                    var isValid = isRCMValidCustomer(this, extraparams);
                    if (!isValid) {
                        return;
                    }
                }
            }
        }
        if (this.Grid.getStore().getCount() > 1) {
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoice.gridDataWillCleared"), function(btn) {
                if (btn == "yes") {
                    this.Grid.getStore().removeAll();
                    this.Grid.addBlankRow();
                    this.updateSubtotal(this, true);
                    updateTermDetails(this.Grid);

                } else {
                    o.setValue(oldval);
                }
            }, this);
        }
    },
onDateChange:function(a,val,oldval){
        /**
         * ERP-32829 
         */
//        if (WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.OLDNEW || WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.NEW) {
//            this.setGSTFlagUsingApplicableDate(val);
//        }
    this.transactiondateforgst=this.billDate.getValue();
//    /*
//     *ERM-1037
//     *On date change call function to restrict linking of future dated document 
//     */
//    var selectedBillIds= this.PO.getValue().toString();
//        if (selectedBillIds != "") {
//            var selectedValuesArr = selectedBillIds.split(',');
//            WtfGlobal.checkForFutureDate(this, selectedValuesArr)
//        }
        if(this.isIndiaGST){
            /**
             * Apply GST fields 
             */
            if((this.isEdit && !this.copyInv && !this.checkgststatus)){
                /**
                 * Show pop up in Edit  case
                 */
                checkGSTDataOnDateCase(this, this.Grid,oldval);
            }else if (this.PO.getValue()!=undefined && this.PO.getValue()!="" && !this.checkgststatus){
                /**
                 * get link document date and Show pop up in 
                 */
                getLinkDateTocheckGSTDataOnDateCase(this, this.Grid);
            } else{
                /**
                 * Apply GST based on date
                 */
                this.applyGSTFieldsBasedOnDate();
            }
            this.checkgststatus=false;
        }
    this.val=val;
    this.oldval=oldval;
    if(this.Grid){
        this.Grid.billDate=this.billDate.getValue();
    }
    //        this.loadTax(val);
    if(this.Currency.getValue()==WtfGlobal.getCurrencyID()){ //when tranaction in base currency for all cases (edit,copy, create new)
        this.doOnDateChanged(val,oldval);
    } else if((this.isEdit && !this.copyInv) && Wtf.account.companyAccountPref.retainExchangeRate){ //edit case: when user want to retain exchange rate        
        this.exchangeRateInRetainCase = true;
            this.currencyStore.load({params: {mode: 201, transactiondate: WtfGlobal.convertToGenericDate(this.billDate.getValue())}});
            
//            return;                                       
} else if(this.isEdit || this.copyInv) { //1.Edit case when user do not want to retain exchange rate 2.copy case
    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.invoice.exchangeRateMsg"),function(btn){
        if(btn=="yes"){
            this.doOnDateChanged(val,oldval); 
        } else{
            this.billDate.setValue(oldval);
            return;
        }
    },this);
} else { //Normal Create New Case           
    this.doOnDateChanged(val,oldval);        
} 
//        this.externalcurrencyrate=0;
if (Wtf.account.companyAccountPref.countryid === Wtf.CountryID.MALAYSIA) {
    this.enableDisableTaxUsingGSTActivationDate(); // enable/disble tax
}
this.custdatechange=true;
//        this.Grid.loadPriceStoreOnly(val,this.Grid.priceStore);

if (Wtf.account.companyAccountPref.autoPopulateFieldsForDeliveryPlanner && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
    var rec = WtfGlobal.searchRecord(this.Name.store, this.Name.getValue(), 'accid');
    if (rec != null && rec != undefined) {
        // For set Delivery Date of Delivery Planner
        var billDate = new Date(this.billDate.getValue());
        var weekDay = rec.data.deliveryDate;
        var isNextDay = (weekDay == 7) ? true : false;
        var nextDate = WtfGlobal.getNextDateForWeekDay(billDate, weekDay, isNextDay);
        this.shipDate.setValue(nextDate);
    }
}
},
doOnDateChanged:function(val,oldval){
    this.externalcurrencyrate=0;
       this.currencyStore.on('load',function(store){this.onDateChangeVendorCurrencyExchangeRate();},this);
        this.currencyStore.load({params:{mode:201,transactiondate:WtfGlobal.convertToGenericDate(this.billDate.getValue())}});
},
onDateChangeVendorCurrencyExchangeRate : function(){
    var count=this.Grid.store.getCount();
    for(var i=0;i< count;i++){
        var rec = this.Grid.store.getAt(i);
        if(rec!=null && rec.data.vendorcurrencyid!="" && rec.data.vendorcurrencyid!=null && rec.data.productid!=""){
            var currRec=WtfGlobal.searchRecord(this.currencyStore, rec.data.vendorcurrencyid, 'currencyid');
            if(currRec!=null){
                this.setVendorCurrExchangeRate(rec,currRec);
            }
        }
    }
},
    
setVendorCurrExchangeRate : function(rec,currRec){
    if(currRec!=null){
        var baseToVenCurr = currRec.data.exchangerate;
        var revExchangeRate = 1/(baseToVenCurr-0);
        revExchangeRate = getRoundofValueWithValues(revExchangeRate,10);
        rec.data.vendorcurrexchangerate = revExchangeRate;
    }
},
    hideLoading:function(){Wtf.MessageBox.hide();},
    
addCostCenter:function(){
    callCostCenter('addCostCenterWin');
},
enabletax:function(c,rec){
    if(rec.data['value']==true){
        this.Tax.enable();   
        this.includingGST.setValue(false);
        this.includingGST.disable();
        this.includeProTax.setValue(false);
        this.includeProTax.disable();
    }else{
        this.Tax.disable();
        this.Tax.setValue("");
        this.includingGST.enable();
        this.includeProTax.enable();
    }
    /*If rec.data['value'] = True means Hidden False
    *If rec.data['value'] = False means Hidden True
    *This function written in CommonERPComponent.js
    */
    this.HideShowLinkedTermTaxAndTermTaxAmountCol(rec.data['value']);
    this.setSingleMappedTaxToInvoiceTerm(rec.data['value']);
    if(rec.data['value']==false){
        this.resetLinkedTaxNameAndTermTaxAmount(rec.data['value']);
    }
    this.updateSubtotal();
},
getPostTextEditor: function(posttext)
{
    var _tw=new Wtf.EditorWindowQuotation({
        val:this.postText
    });
        
    _tw.on("okClicked", function(obj){
        this.postText = obj.getEditorVal().textVal;
        var styleExpression  =  new RegExp("<style.*?</style>");
        this.postText=this.postText.replace(styleExpression,"");
                 
             
    }, this);
    _tw.show();
    return this.postText;
},
    
addGrid:function(){    
    this.Grid=new Wtf.account.DeliveryOrderGrid({
        height: 300,//region:'center',//Bug Fixed: 14871[SK]
        cls:'gridFormat',
        layout:'fit',
        viewConfig:{forceFit:false},
        isCustomer:this.isCustomer,
        editTransaction:this.isEdit,
        readOnly:this.isViewTemplate ||this.readOnly,
        disabledClass:"newtripcmbss",
        isCustBill:false,
        id:this.id+"billingproductdetailsgrid",
        moduleid:this.moduleid,
        currencyid:this.Currency.getValue(),
        fromOrder:true,
        isOrder:this.isOrder,
        isGST:this.isGST,
        isEdit:this.isEdit,
        copyTrans:this.copyInv, 
        forceFit:true,
        loadMask : true,
        heplmodeid:this.heplmodeid,
        parentid:this.id,
        parentObj :this,
        prComboId : this.PO.id,
        linkTo: this.fromLinkCombo.id,
        link:   this.fromPO.id,
        isViewTemplate: this.isViewTemplate,
        isLinkedTransaction:this.isLinkedTransaction,
        disabled:!(this.isEdit ||this.copyInv)?true:false
    });
    this.Grid.on("productdeleted", this.removeTransStore, this);
    this.Grid.on("datachanged", function(){
        //                    this.applyCurrencySymbol();
        this.updateSubtotal();
        this.isClosable=false          // Set Closable flag on grid data change
    },this);
    this.Grid.on("gridconfigloaded", function(){
        if(this.moduleid== Wtf.Acc_Delivery_Order_ModuleId){
            this.hideShowProductWeightColumns();
        }
        if (this.isCustomer) {
            if (Wtf.account.companyAccountPref.unitPriceInDO) {
                this.showGridTax(null, null, !this.includeProTax.getValue());
            }
        } else {
            if (Wtf.account.companyAccountPref.unitPriceInGR) {
                this.showGridTax(null, null, !this.includeProTax.getValue());
            }
        }
    },this);
    // this.Name.on('select',this.setTerm,this)
    this.NorthForm.on('render',this.setDate,this);
    if (this.readOnly) {
        this.disabledbutton();  //  disabled button in view case
        if (this.NorthForm) {
            this.NorthForm.disable();
        }
    }       
    this.Grid.getStore().on('load',function(store){            
        this.Grid.addBlank(store);
        this.updateFormCurrency();
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
            updateTermDetails(this.Grid);
        }
            
        //ERP-23618 copy case bug fix
        if(this.isEdit && this.copyInv && !this.isConsignment && this.moduleid === Wtf.Acc_Delivery_Order_ModuleId){
            var rowCount=this.Grid.getStore().data.length;
            for (var i = 0; i < rowCount; i++) {
                var curRow = this.Grid.getStore().getAt(i);
                var deliveredQtyValue = curRow.data.dquantity;
                var isAutoAssembly=curRow.data.isAutoAssembly;
                var productType=curRow.data.type;
                if (productType == "Inventory Assembly" && isAutoAssembly && deliveredQtyValue != undefined && deliveredQtyValue != "" && Number(deliveredQtyValue) > 0) {
                    var delQtyColumnIndex = this.Grid.getStore().getAt(i).fields.keys.indexOf("dquantity");
                    if (delQtyColumnIndex != -1) {
                        var rowObject = new Object();
                        rowObject['column'] = delQtyColumnIndex;
                        rowObject['field'] = "dquantity";
                        rowObject['grid'] = this.Grid;
                        rowObject['originalValue'] = deliveredQtyValue;
                        rowObject['value'] = deliveredQtyValue;
                        rowObject['row'] = i;
                        rowObject['record'] = curRow;
                        this.Grid.updateRow(rowObject);
                    }
                }
            }
        }
        
        /**
         *  if in company preferences Show Products on type ahead or Product Id as free text is selected then we do not load 
         *  this.productComboStore in case of linking product was not available global product combo store so when 
         *  Allow editing UOM conversion rate check is enable in company preferences than loading the product records 
         *  in this.productComboStore. ERM-319
         */
        if (CompanyPreferenceChecks.differentUOM() && (this.isEdit || this.copyInv) && this.productOptimizedFlag!=Wtf.Show_all_Products) {
            var rowCount = this.Grid.getStore().data.length;
            var productIds = "";
            for (var i = 0; i < rowCount; i++) {
                var curRow = this.Grid.getStore().getAt(i);
                productIds += curRow.data.productid + ",";
            }
            productIds.substring(0, (productIds.length - 1));
            if(productIds!=""){
                this.Grid.productComboStore.load({
                    params: {
                        selectedProductIds: productIds,
                        ismultiselectProductids: true
                    }
                });
            }
        }
    }.createDelegate(this),this);
},
   
hideShowProductWeightColumns:function(){
    var productweightperstockuom=this.Grid.getColumnModel().findColumnIndex("productweightperstockuom");
    var productweightincludingpakagingperstockuom=this.Grid.getColumnModel().findColumnIndex("productweightincludingpakagingperstockuom");
    var productvolumeperstockuom=this.Grid.getColumnModel().findColumnIndex("productvolumeperstockuom");
    var productvolumeincludingpakagingperstockuom=this.Grid.getColumnModel().findColumnIndex("productvolumeincludingpakagingperstockuom");
    if(Wtf.account.companyAccountPref.calculateproductweightmeasurment){// If option is true in the company need to show unit product column
        this.Grid.getColumnModel().setHidden( productweightperstockuom,false) ;
        this.Grid.getColumnModel().setHidden( productweightincludingpakagingperstockuom,false) ;
        this.Grid.getColumnModel().setHidden( productvolumeperstockuom,false) ;
        this.Grid.getColumnModel().setHidden( productvolumeincludingpakagingperstockuom,false) ;
    } else {//If option is false in the company need to hide unit product column
        this.Grid.getColumnModel().setHidden( productweightperstockuom,true) ;
        this.Grid.getColumnModel().setHidden( productweightincludingpakagingperstockuom,true) ;
        this.Grid.getColumnModel().setHidden( productvolumeperstockuom,true) ;
        this.Grid.getColumnModel().setHidden( productvolumeincludingpakagingperstockuom,true) ;
    }
},
disabledbutton:function()
{
    this.CostCenter.setDisabled(true);
    this.DOStatusCombo.setDisabled(true);
    this.shipDate.setDisabled(true);
    this.Term.setDisabled(true);
    this.shipvia.setDisabled(true);
    this.fob.setDisabled(true);
    this.permitNumber.setDisabled(true);
    this.driver.setDisabled(true); 
    this.ShowOnlyOneTime.setDisabled(true); 
    this.Name.setDisabled(true); 
    this.Currency.setDisabled(true); 
    this.fromPO.setDisabled(true);
    this.fromLinkCombo.setDisabled(true);
    this.PO.setDisabled(true);
    this.sequenceFormatCombobox.setDisabled(true);
    this.Number.setDisabled(true);
    this.billDate.setDisabled(true);
    this.editedBy.setDisabled(true);
    this.users.setDisabled(true);
    this.includeProTax.setDisabled(true);
    this.applyTaxToTermsChk.setDisabled(true);
},
addOrder:function(){
    var tabid = "ordertab";
    if(this.isCustomer){
        tabid = "salesorder";
        if (this.POSelected == 'sales')
            callSalesOrder(false, null, tabid);
        else if (this.POSelected == 'invoice')
            callInvoice();
            
    }else{
            
        tabid = "purchaseorder";
        if (this.POSelected == 'sales')
            callPurchaseOrder(false, null, tabid);
        else if (this.POSelected == 'invoice')
            callGoodsReceipt(false,null);
                
            
    }
    if(Wtf.getCmp(tabid)!=undefined) {
            Wtf.getCmp(tabid).on('update',function(){this.POStore.reload();},this);
    }
},
includeProTaxHandler : function(c,rec,val){
    if(this.includeProTax.getValue() == true){
        this.isTaxable.setValue(false);
        this.isTaxable.disable();
        this.Tax.setValue("");
        this.Tax.disable();
        this.applyTaxToTermsChkHideShow(true);
    }else{
        this.isTaxable.reset();
        this.isTaxable.enable();
        this.applyTaxToTermsChkHideShow(false);
        /*-------If "Map taxes at product level" check is ON then restricting to change "Include Product Tax" value from Yes to No----------  */
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
            this.includeProTax.setValue(true);
            this.applyTaxToTermsChkHideShow(true);
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.maptaxesatproductlevel.activated")], 2);
        }
    }
    if (this.isCustomer) {
        if (Wtf.account.companyAccountPref.unitPriceInDO) {
            this.showGridTax(c, rec, val);
        }
    } else {
        if (Wtf.account.companyAccountPref.unitPriceInGR) {
            this.showGridTax(c, rec, val);
        }
    }
        
},
 applyTaxToTermsChkHideShow : function(show){
       if(show) {
           //this.applyTaxToTermsChk.setValue(true);
            this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
       } else {
           this.applyTaxToTermsChk.setValue(false);
           this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(false);
       }
    
   },   
showGridTax:function(c,rec,val,isCallForTaxMappedAtProductLevel){
        var hide = (val == null || undefined ? !rec.data['value'] : val);
     
        /* ----If "Include Product Tax" value is Yes then keeping hide as false whatever the "val" is coming from calling destination-------*/
        if (this.includeProTax && this.includeProTax.getValue()) {
            hide = false;
        }
        /* ----If "Map taxes at product level" check is ON & "Include Product Tax" value is Yes then keeping hide as false whatever the "val" is coming from calling destination-------*/
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel() && this.isTaxable.getValue()) {
            hide = true;
        }
    var id=this.Grid.getId()
    var rowtaxindex=this.Grid.getColumnModel().findColumnIndex("prtaxid");
    var rowtaxamountindex=this.Grid.getColumnModel().findColumnIndex("taxamount");
    /**
     * Product tax and tax amount not used if GST (INDIA)
     */
    if((WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied())){
        this.Grid.getColumnModel().setHidden( rowtaxindex,true) ;
        this.Grid.getColumnModel().setHidden( rowtaxamountindex,true) ;
    }else{
        this.Grid.getColumnModel().setHidden( rowtaxindex,hide) ;
        this.Grid.getColumnModel().setHidden( rowtaxamountindex,hide) ;
    }
    var rowRateIncludingGstAmountIndex=this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
    var rowprDiscountIndex=this.Grid.getColumnModel().getIndexById(id+"prdiscount");
    var rowDiscountIsPercentIndex=this.Grid.getColumnModel().getIndexById(id+"discountispercent");
    var rowRateAmountIndex=this.Grid.getColumnModel().getIndexById(id+"rate");
    if(rowprDiscountIndex!=-1&&rowDiscountIsPercentIndex!=-1&&rowRateIncludingGstAmountIndex!=-1){
        if(this.includingGST.getValue()){
            this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,!this.includingGST.getValue());
            this.Grid.getColumnModel().setEditable(this.Grid.getColumnModel().findColumnIndex("rate"), false);
//            this.Grid.getColumnModel().setHidden(rowprDiscountIndex,!hide);
//            this.Grid.getColumnModel().setHidden(rowDiscountIsPercentIndex,!hide);
        }else if(!this.Grid.getColumnModel().config[rowRateIncludingGstAmountIndex].hidden){
            this.Grid.getColumnModel().setEditable(this.Grid.getColumnModel().findColumnIndex("rate"), true);
            this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,!this.includingGST.getValue());
//            this.Grid.getColumnModel().setHidden(rowprDiscountIndex,hide);
//            this.Grid.getColumnModel().setHidden(rowDiscountIsPercentIndex,hide);
        }
    }
        
    this.Grid.getStore().each(function(rec){
        if(rec.data.prtaxid != "None"){
        if(this.includeProTax && this.includeProTax.getValue() == true
            && (rec.data.prtaxid == "" || rec.data.prtaxid == undefined)) {//In Edit, values are resetting after selection Product level Tax value as No
            //                if(this.ExpenseGrid && this.ExpenseGrid.isVisible()) {//(!this.isCustBill && !(this.isEdit && !this.isOrder) && !(this.isCustomer||this.isOrder))
            //                    var index=this.ExpenseGrid.accountStore.find('accountid',rec.data.accountid);
            //                    var taxid = index > 0 ? this.ExpenseGrid.accountStore.getAt(index).data["acctaxcode"]:"";
            //                    var taxamount = this.ExpenseGrid.setTaxAmountAfterSelection(rec);
            //                    rec.set('prtaxid',taxid);
            //                    rec.set('taxamount',taxamount);
            //                } else {
            //                    index=this.ProductGrid.productComboStore.find('productid',rec.data.productid);
            //                    var acctaxcode = (this.isCustomer)?"salesacctaxcode":"purchaseacctaxcode";
            //                    taxid = index > 0 ? this.ProductGrid.productComboStore.getAt(index).data[acctaxcode]:"";
            //                    rec.set('prtaxid',taxid);
            //                    taxamount = this.ProductGrid.setTaxAmountAfterSelection(rec);
            //                    rec.set('taxamount',taxamount);
            //                }
            var taxid = "";
            var taxamount = 0;
            if(!(rec.data.productid == "" || rec.data.productid == undefined)){// for excluding last empty row
               
                     /*------If tax is mapped with product then set product mapped tax at line level --------------- */

                    if (isCallForTaxMappedAtProductLevel != undefined && isCallForTaxMappedAtProductLevel) {
                      var taxId="";
                      var invoiceStore=false;
                        var productComboIndex = WtfGlobal.searchRecordIndex(this.Grid.productComboStore, rec.data.productid, 'productid');
                          if(productComboIndex==-1){
                           productComboIndex=WtfGlobal.searchRecordIndex(this.productComboStore, rec.data.productid, 'productid'); 
                           invoiceStore=true;
                        }
                        if (productComboIndex >= 0) {
                            var prorec =invoiceStore?this.productComboStore.getAt(productComboIndex) : this.Grid.productComboStore.getAt(productComboIndex);
                            taxId = this.isCustomer ? prorec.data['salestaxId'] : prorec.data['purchasetaxId'];
                            if (taxId != undefined && taxId!="") {
                              taxid=  taxId;
                              this.isCustomer ? rec.set('salestaxId',taxid) : rec.set('purchasetaxId',taxid);
                            }

                        }
                    }else{
                    
                    
                    if(taxid == ""){// if tax is mapped to customer or vendor then it will come default populated
                    var currentTaxItem=WtfGlobal.searchRecord(this.Name.store, this.Name.getValue(), 'accid');
                    var actualTaxId=currentTaxItem!=null?currentTaxItem.get('taxId'):"";

                    if(actualTaxId== undefined || actualTaxId == "" ||  actualTaxId == null){// if customer/vendor is not mapped with tax then check that is their mapping account is mapped with tax or not, if it is mapped take account tax
                        actualTaxId=currentTaxItem!=null?currentTaxItem.get('mappedAccountTaxId'):"";
                    }
                    
                                /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
                                 *  Then we ignore Customer/Vendor mapped taxes
                                 *  Consider Only Product mapped taxes i.e - only line level taxes(create new case)
                                 */
                                if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                                    actualTaxId = "";
                                }

                    if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null){
                        taxid = actualTaxId;
                        rec.set('prtaxid',taxid);
                        taxamount = this.Grid.setTaxAmountAfterSelection(rec);
                    }
                }
            }
            }
            if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null){
                taxid = actualTaxId;
                rec.set('prtaxid',taxid);
                taxamount = this.Grid.setTaxAmountAfterSelection(rec);
            }
            rec.set('prtaxid',taxid);
            rec.set('taxamount',taxamount);
            rec.set("isUserModifiedTaxAmount", false);
        } else if(this.includeProTax && this.includeProTax.getValue() != true){
            rec.set('prtaxid','');
            rec.set('taxamount',0);
        }
    }
        if(this.includingGST&&this.includingGST.getValue()){
//            rec.set('discountispercent',1);
//            rec.set('prdiscount',0);
//            rec.set('rateIncludingGst',rec.get('rate'));
//            rec.set('rateIncludingGst',rec.get('taxamount'));
//            var taxamount= 0;
//            var unitAmount= 0;
//            var unitTax= 0;
//            var unitVal= 0;
//            var amount=rec.get('rate')!=null?getRoundedAmountValue(rec.get('rate')):0;
//            var quantity=rec.get('quantity')!=null?getRoundofValue(rec.get('quantity')):0;
//            var tax=rec.get('taxamount')!=null?getRoundofValue(rec.get('taxamount')):0;
//            if(quantity!=0){
//                unitAmount=getRoundedAmountValue(amount);
//                unitTax=getRoundedAmountValue(tax/quantity);
//            }
//            if(unitAmount+unitTax!=0){
//                rec.set('rateIncludingGst',unitAmount+unitTax);
//            }else{
//                rec.set('rateIncludingGst',rec.get('rate'));
//            }
/*
 *Above lines commented as we have rateincluding gst available in the record
 **/
             rec.set('rateIncludingGst',rec.get('rateIncludingGst'));
        }else if(rowRateIncludingGstAmountIndex!=-1&&this.Grid.getColumnModel().config[rowRateIncludingGstAmountIndex].hidden && rec.data.prdiscount==0)//if column unit price column is hidden. Works for all case except when include gst is checked.
        {
            rec.set('discountispercent',1);
            rec.set('prdiscount',0);
            rec.set('rateIncludingGst',0);
        }
        /**
         * Recalculate GST Term taxes on Grid Column show/hide
         */
         if((WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied())){
            var rowAmountIndex=this.Grid.getColumnModel().findColumnIndex("amount");            
            if(rec.get('LineTermdetails') != undefined && rec.get('LineTermdetails') != ''){
                var termStore = this.Grid.getTaxJsonOfIndia(rec);
                if(this.includingGST && this.includingGST.getValue() == true) {
                    this.Grid.getColumnModel().setRenderer(rowAmountIndex,WtfGlobal.withoutRateCurrencySymbol);
                    termStore = this.Grid.calculateTermLevelTaxesInclusive(termStore, rec);
                } else {
                    this.Grid.getColumnModel().setRenderer(rowAmountIndex,this.Grid.calAmountWithoutExchangeRate.createDelegate(this.Grid));
                    termStore = this.Grid.calculateTermLevelTaxes(termStore, rec);
                }

                rec.set('LineTermdetails',JSON.stringify(termStore));
                updateTermDetails(this.Grid);
            }
        }
    },this);
    if(this.includeProTax && this.includeProTax.getValue() == true){
        WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, false);//ERM-1085
    }
    //         if(hide)
    this.updateSubtotal();
},

enablePO:function(c,rec){
    this.fromLinkCombo.clearValue();
    this.PO.clearValue();
    this.CostCenter.clearValue();
    this.DOStatusCombo.clearValue();
    //this.Name.clearValue();
    this.Memo.setValue("");
    this.singleLink = false;
    var record = "";
    if (this.isCustomer) {
        record = Wtf.customerAccRemoteStore.getAt(Wtf.customerAccRemoteStore.find('accname', this.Name.getRawValue()));
    } else {
        record = Wtf.vendorAccRemoteStore.getAt(Wtf.vendorAccRemoteStore.find('accname', this.Name.getRawValue()));
    }
    
    /* Setting Credit/Debit Term of default Customer if link combo is select as NO i.e DO or GR is not linked with any document*/
    if (!this.fromPO.getValue()) {
        this.Term.setValue(record.data.termid);
    }
       
    if(rec.data['value']==true){                                                
        this.fromLinkCombo.enable();                        
        this.fromOrder=true;
    }
    else{
        this.Grid.getStore().removeAll();            
        this.Grid.addBlankRow();
        this.fromLinkCombo.disable();
        this.PO.disable();
        this.PO.reset();
    }
    if(Wtf.account.companyAccountPref.pickpackship && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId){
        var value = "Picked";
        var masterstatus = WtfGlobal.searchRecord(this.DOStatusStore, value, 'name');
        if (masterstatus != undefined && masterstatus != null) {
            var defaultstatus = masterstatus.data.id;
            this.DOStatusCombo.setValue(defaultstatus);
        }
    }
//this.currencyStore.load(); 	       // Currency id issue 20018
},

enableNumber:function(c,rec){
    /* After saving DO from SO form , further code should not be required to execute*/   
    if (this.response.success && this.invoicefromorder) {
            return;
        }    
    this.PO.clearValue();
    this.CostCenter.clearValue();
    //ERP-41011
//    this.users.clearValue();
    //this.DOStatusCombo.clearValue();
    //this.Name.clearValue();
    this.Memo.setValue("");
    this.Grid.getStore().removeAll();
    if(!this.invoicefromorder){
        this.Grid.addBlankRow();
    }
        
    if(rec.data['value']==0){
        //this.PO.multiSelect=true;
        //this.isMultiSelectFlag=true;
        //this.PO.removeListener("select",this.populateData,this);
        this.PO.addListener("blur",this.populateData,this);
        this.POStore.proxy.conn.url = this.isCustomer ? "ACCSalesOrderCMN/getSalesOrders.do" : "ACCPurchaseOrderCMN/getPurchaseOrders.do";
                    this.POStore.load({params:{id:this.Name.getValue(),exceptFlagORD:true, currencyfilterfortrans:this.Currency.getValue()}});        
    this.PO.enable(); 
    this.POSelected="sales";
} else if(rec.data['value']==2){ // FOR JOB WORK ORDERS
    //this.PO.multiSelect=true;
    //this.isMultiSelectFlag=true;
    //this.PO.removeListener("select",this.populateData,this);
    this.PO.addListener("blur",this.populateData,this);
    this.POStore.proxy.conn.url = this.isCustomer ? "ACCSalesOrderCMN/getSalesOrders.do" : "ACCPurchaseOrderCMN/getPurchaseOrders.do";
                this.POStore.load({params:{id:this.Name.getValue(),exceptFlagORD:true, currencyfilterfortrans:this.Currency.getValue(),isJobWorkOrderReciever:true,isForJobWorkOutLinkingInGRN:true}});        
this.PO.enable(); 
this.POSelected="sales";
}else if(rec.data['value']==1){
    //this.PO.multiSelect=false;
    //this.isMultiSelectFlag=false;
    //this.PO.removeListener("blur",this.populateData,this);
    this.PO.addListener("blur",this.populateData,this);
    //this.PO.addListener("select",this.populateData,this);                
    this.POStore.proxy.conn.url = this.isCustomer ? "ACCInvoiceCMN/getInvoices.do" : "ACCGoodsReceiptCMN/getGoodsReceiptListForLinking.do";
                var params={cashonly:false,creditonly:true,currencyfilterfortrans:this.Currency.getValue(),nondeleted:true,avoidRecursiveLink:true,onlyexpenseinv:false};
    if(this.isCustomer) {                        
        params.customerid=this.Name.getValue();                    
    }else{
        params.vendorid=this.Name.getValue();                    
    }
    params.CashAndInvoice=true;//   CashAndInvoice  true to select both Cash Sale and Invoice/Cash Purchase and Vendor Invoice  
    params.ignoreCashPurchase=true; //ingnoreCashPurchase to select only purchase invoices in GR From
                this.POStore.load({params:params});        
    this.PO.enable();       
    this.POSelected="invoice";
    /*
     * In goods receipt 3 is used for security gate entry
     */
}else if(rec.data['value']==3){
    this.PO.addListener("blur",this.populateData,this);
    this.POStore.proxy.conn.url = "ACCPurchaseOrderCMN/getSecurityGateEntry.do";
    this.POStore.load({
        params:{
            id:this.Name.getValue(),
            exceptFlagORD:true, 
            currencyfilterfortrans:this.Currency.getValue()
        }
    });        
    this.PO.enable(); 
    this.POSelected="security";
    }

   this.POStore.on("load",function(){
           if(this.invoicefromorder){
            this.PO.setValue(this.invoicefromorderrec.billid);
            this.setCustomdimensionFields();
            
        }
      
       
   },this);
   
},
    
loadEditableGrid:function(){
    this.subGridStoreUrl = "";
    this.subGridStoreUrl = this.isCustomer ? "ACCInvoiceCMN/getDeliveryOrderRows.do" : "ACCGoodsReceiptCMN/getGoodsReceiptOrderRows.do";
    var colModelArrayProduct = GlobalColumnModelForProduct[this.moduleid];
    WtfGlobal.updateStoreConfig(colModelArrayProduct,this.Grid.getStore());    
        if (this.invoicefromorder) {
            this.billid = this.invoicefromorderrec.billid;

        } else {
            this.billid = this.record.data.billid;
        }
   
    this.Grid.getStore().proxy.conn.url = this.subGridStoreUrl;
    this.Grid.getStore().on("load", function(){
        this.loadRecord();
    }, this);
    this.loadMask1 = new Wtf.LoadMask(this.id, {
        msg: WtfGlobal.getLocaleText("acc.msgbox.50"),
        msgCls: "x-mask-loading acc-goodsReceipt-form-mask"
    });
    this.Grid.getStore().on("beforeload", function() {
        WtfGlobal.setAjaxTimeOut();
        if (this.loadMask1 !== undefined) {
            this.loadMask1.show();
        }
    }, this);
    this.Grid.getStore().on("load", function() {
        WtfGlobal.resetAjaxTimeOut();
        if (this.loadMask1!==undefined) {
            this.loadMask1.hide();
        }
        this.loadRecord();
    }, this);
    this.Grid.getStore().on("loadexception", function() {
        WtfGlobal.resetAjaxTimeOut();
        if (this.loadMask1!==undefined) {
            this.loadMask1.hide();
        }
        this.loadRecord();
    }, this);
            this.Grid.getStore().load({params:{bills:this.billid,moduleid:this.moduleid,isEdit:this.isEdit,copyInv:this.copyInv,readOnly:this.readOnly}});
},

EwayFieldsEnableDisable:function(){
    this.tagsFieldset.EnableDisableEwayRelatedFields(this); 
},
loadGridForSetFromForms: function(){
 var url = this.isCustomer ? 'ACCSalesOrderCMN/getSalesOrderRows.do' : "ACCPurchaseOrderCMN/getPurchaseOrderRows.do";
    this.Grid.getStore().proxy.conn.url = url;
        this.Grid.loadPOGridStore(this.invoicefromorderrec.billid,false,true,true);  
},


   /*Setting custom/ Dimension  fields value when generating Invoices from Transaction form of PO/SO/GR/DO */
    setCustomdimensionFields: function() {

        var billid = this.invoicefromorderrec.billid;
        var fieldArr = this.POStore.fields.items;
     
   

        var record = this.POStore.getAt(this.POStore.find('billid', billid));
        if (record != undefined && record != "") {
            for (var fieldCnt = 0; fieldCnt < fieldArr.length; fieldCnt++) {
                var fieldN = fieldArr[fieldCnt];
                var component = Wtf.getCmp(fieldN.name + this.tagsFieldset.id);
                if (component && record.data[fieldN.name] != "") {
                    if (component.getXType() == 'datefield') {
                        component.setValue(record.data[fieldN.name]);
                    } else if (component.xtype == 'fncombo' || component.getXType() == 'fncombo') {
                        var ComboValue = record.data[fieldN.name];

                        if (ComboValue) {
                            //                                    ComboValueID=recCustomCombo.data.id;
                            component.setValue(ComboValue);
                            var parent = component.parentid;
                            var displayValue = record.json[fieldN.name + "_linkValue"];
                            if (parent != undefined && displayValue != undefined && parent.length > 0) {
                                if (displayValue) {
                                    component.setValForChildComboStore(ComboValue, displayValue); // create record and set value
                                }
                            }
                            var childid = component.childid;
                            if (childid.length > 0) {
                                var childidArray = childid.split(",");
                                for (var i = 0; i < childidArray.length; i++) {
                                    var currentBaseParams = Wtf.getCmp(childidArray[i] + this.tagsFieldset.id).store.baseParams;
                                    currentBaseParams.parentid = ComboValue;
                                    Wtf.getCmp(childidArray[i] + this.tagsFieldset.id).store.baseParams = currentBaseParams;
                                    Wtf.getCmp(childidArray[i] + this.tagsFieldset.id).store.load();
                                }
                            }
                        }
                    } else {
                        component.setValue(record.data[fieldN.name]);
                    }
                } else if (component && (this.invoicefromorderrec.isEdit || component.isessential == 1) && component.fieldtype == "4" ) {
                          component.setValue("1234");
               }
                if (fieldN.name.indexOf("Custom_") == 0) {
                    var fieldname = fieldN.name.substring(7, fieldN.name.length);
                    if (Wtf.getCmp(fieldname + this.tagsFieldset.id) && record.data[fieldN.name] != "") {
                        if (Wtf.getCmp(fieldname + this.tagsFieldset.id).getXType() == 'fieldset') {
                            var ComboValue = record.json[fieldN.name];
                            if (ComboValue !== undefined && ComboValue !== null && ComboValue != "") {
                                var ComboValueArrya = ComboValue.split(',');
                                var ComboValueID = "";
                                var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray;
                                for (var i = 0; i < ComboValueArrya.length; i++) {
                                    for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
                                        if (checkListCheckBoxesArray[checkitemcnt].id.indexOf(ComboValueArrya[i]) != -1)
                                            if (Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id) != undefined) {
                                                Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id).setValue(true);
                                            }
                                    }
                                }
                            }
                        } else if (Wtf.getCmp(fieldname + this.tagsFieldset.id).getXType() == 'select') {
                            var ComboValue = record.json[fieldN.name];


                            if (ComboValue != "" && ComboValue != undefined)
                                Wtf.getCmp(fieldname + this.tagsFieldset.id).setValue(ComboValue);
                        }

                    }
                }
            }
        }
        
       

    },

populateData:function(c,rec) {
    this.singleLink = false;
    if(this.PO.getValue()!=""){
        if (Wtf.account.companyAccountPref.enableLinkToSelWin && (this.moduleid === Wtf.Acc_Delivery_Order_ModuleId || this.moduleid === Wtf.Acc_Goods_Receipt_ModuleId )) {
            var billid = this.PO.getValue();
            if (billid.indexOf("-1") != -1) {
                var selectedValuesArr = billid.split(',');
                var arr = [];
                for (var cnt = 0; cnt < selectedValuesArr.length; cnt++) {
                    if (selectedValuesArr[cnt] != "-1") {
                        arr.push(selectedValuesArr[cnt]);
                    }
                }
                this.PO.setValue(arr);
                var url = "";
                if (this.fromLinkCombo.getValue() ==0 && this.isOrder) {
                    url = this.isCustomer ? "ACCSalesOrderCMN/getSalesOrders.do":"ACCPurchaseOrderCMN/getPurchaseOrders.do" ;
                } else if(this.fromLinkCombo.getValue() == 1){
                    url = this.isCustomer ? "ACCInvoiceCMN/getInvoices.do" : "ACCGoodsReceiptCMN/getGoodsReceipts.do"              
                }
                this.showPONumbersGrid(url);
            }
        }
        this.Grid.fromPO=true;
        var billid=this.PO.getValue();
        var selectedValuesArr = billid.split(',');
        var taxDiff=false;
        
        if(this.moduleid === Wtf.Acc_Goods_Receipt_ModuleId && this.fromLinkCombo.getValue()==1){//PI linked in GR
            this.POStore1 = new Wtf.data.Store({
                url:"ACCGoodsReceiptCMN/getGoodsReceipts.do",
                baseParams:{
                    cashonly:false,creditonly:true,currencyfilterfortrans:this.Currency.getValue(),nondeleted:true,avoidRecursiveLink:true,onlyexpenseinv:false,
                    vendorid:this.Name.getValue(),CashAndInvoice:true,billids:billid,
                    doflag : true
                },
                reader: new Wtf.data.KwlJsonReader({
                    root: "data",
                    totalProperty:'count'
                },this.PORec)
            });                
            this.POStore1.on('beforeload',function(){
                WtfGlobal.setAjaxTimeOut();
            }, this);
            
            var DimensionCustomFielsArray = GlobalDimensionCustomFieldModel[this.moduleid];
            if (DimensionCustomFielsArray) {
                for (var cnt = 0; cnt < DimensionCustomFielsArray.length; cnt++) {
                    if (DimensionCustomFielsArray[cnt] != undefined) {
                        var fieldname = DimensionCustomFielsArray[cnt].fieldname;
                        var newField = new Wtf.data.Field({
                            name: fieldname.replace(".", ""),
                            //                   sortDir:'ASC',
                            type: DimensionCustomFielsArray[cnt].fieldtype == 3 ? 'date' : (DimensionCustomFielsArray[cnt].fieldtype == 2 ? 'float' : 'auto'),
                            dateFormat: DimensionCustomFielsArray[cnt].fieldtype == 3 ? null : undefined
                        });
                        this.POStore1.fields.items.push(newField);
                        this.POStore1.fields.map[fieldname] = newField;
                        this.POStore1.fields.keys.push(fieldname);
                    }

                }
                this.POStore1.reader = new Wtf.data.KwlJsonReader(this.POStore1.reader.meta, this.POStore1.fields.items);
            }
            
            this.POStore1.on('load',function(){
                WtfGlobal.resetAjaxTimeOut();

        if(billid.indexOf(",")==-1){  //In MultiSelection if the user select only one                            
                    rec=this.POStore1.getAt(this.POStore1.find('billid',billid));
//                    if (rec != undefined) {
//                        /*
//                         *ERM-1037
//                         *If rec is not undefined send id of selected linked document to restrict linking of future dated document
//                         */
//                        var isFutureDatedDocumentLinked = WtfGlobal.checkForFutureDate(this, selectedValuesArr);
//                        if (isFutureDatedDocumentLinked) {
//                            return;
//                        }
//                    }
                    if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
                         if (rec.data['gtaapplicable']) {//If Selected Vendor/Customer has GTA applicable, then by Default value will be populate.
                             this.GTAApplicable.setValue(true);
                         } else {
                             this.GTAApplicable.setValue(false);
                         }                        
                         /**
                          * In Linking case set select document merchant value
                          */
                         if (rec.data['isMerchantExporter']) {
                             this.isMerchantExporter.setValue(true);
                         } else {
                             this.isMerchantExporter.setValue(false);
                         }
                     }
                    this.Memo.setValue(rec.data['memo']);
                    this.postText=rec.data['posttext'];
                    if (this.fromLinkCombo.getValue() == 0) {
                        this.CustomerPORefNo.setValue(rec.data['customerporefno']);
                    }else{
                        this.CustomerPORefNo.setValue(rec.data['porefno']);
                    }
                    //this.Name.setValue(rec.data['personid']);   
                    this.shipDate.setValue(rec.data['shipdate']);
                    if(rec.data['termid']!=""){ //ERP-16831
                        this.Term.setValue(rec.data['termid']);
                    }
                    this.SupplierInvoiceNo.setValue(rec.data['supplierinvoiceno']);
                    this.shipvia.setValue(rec.data['shipvia']);
                    this.fob.setValue(rec.data['fob']);
                    this.permitNumber.setValue(rec.data['permitNumber']);
                    this.Currency.setValue(rec.data['currencyid']);
                    var perstore=this.isCustomer? Wtf.customerAccStore:Wtf.vendorAccStore
                    var storerec=perstore.getAt(perstore.find('accid',rec.data['personid']));        
                    this.CostCenter.setValue(rec.data.costcenterid);  

                    var record=this.POStore1.getAt(this.POStore1.find('billid',billid));
                    this.linkRecord=this.POStore1.getAt(this.POStore1.find('billid',billid));
                    this.singleLink=true;
                    this.resetCustomFields();
                    var fieldArr = this.POStore1.fields.items;
                    for(var fieldCnt=0; fieldCnt < fieldArr.length; fieldCnt++) {
                        var fieldN = fieldArr[fieldCnt];

                        if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id) && record.data[fieldN.name] !="") {
                            if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).getXType()=='datefield'){
                                Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(record.data[fieldN.name]);
                            }else if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).xtype == 'fncombo' || Wtf.getCmp(fieldN.name+this.tagsFieldset.id).getXType()=='fncombo'){
                                var ComboValue=record.data[fieldN.name];
                                //                                var ComboValueID="";
                                //                                var recCustomCombo =WtfGlobal.searchRecord(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).store,ComboValue,"name");
                                if(ComboValue){
                                    //                                    ComboValueID=recCustomCombo.data.id;
                                    Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(ComboValue);
                                    var parent = Wtf.getCmp(fieldN.name + this.tagsFieldset.id).parentid;
                                    var displayValue = record.json[fieldN.name + "_linkValue"];
                                    if (parent != undefined && displayValue != undefined && parent.length > 0) {
                                        if (displayValue) {
                                            Wtf.getCmp(fieldN.name + this.tagsFieldset.id).setValForChildComboStore(ComboValue, displayValue); // create record and set value
                                        }
                                    } 
                                    var  childid= Wtf.getCmp(fieldN.name+this.tagsFieldset.id).childid;
                                    if(childid.length>0){
                                        var childidArray=childid.split(",");
                                        for(var i=0;i<childidArray.length;i++){
                                            var currentBaseParams = Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.baseParams;
                                            currentBaseParams.parentid=ComboValue;
                                            Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.baseParams=currentBaseParams;
                                            Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.load();
                                        }
                                    }  
                                }
                            }else{
                                if(record.data[fieldN.name]!= undefined) {
                                    Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(record.data[fieldN.name]);
                                }else if (record.json[fieldN.name]!= undefined){
                                    Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(record.json[fieldN.name]);
                                }
                            }
                        }
                        if(fieldN.name.indexOf("Custom_") == 0){
                            var fieldname=fieldN.name.substring(7,fieldN.name.length);
                            if(Wtf.getCmp(fieldname+this.tagsFieldset.id) && record.data[fieldN.name] !="") {
                                if(Wtf.getCmp(fieldname+this.tagsFieldset.id).getXType()=='fieldset'){
                                    var ComboValue=record.json[fieldN.name];
                                    var ComboValueArrya=ComboValue.split(',');
                                    var ComboValueID="";
                                    var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray; 
                                    for(var i=0 ;i < ComboValueArrya.length ; i++){
                                        for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
                                            if(checkListCheckBoxesArray[checkitemcnt].id.indexOf(ComboValueArrya[i]) != -1 )
                                                if (Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id) != undefined) {
                                                    Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id).setValue(true);
                                                }
                                        } 
                                    }
                                }else if(Wtf.getCmp(fieldname+this.tagsFieldset.id).getXType()=='select'){
                                    var ComboValue=record.json[fieldN.name];
                                    //                                    var ComboValueArrya=ComboValue.split(',');
                                    //                                    var ComboValueID="";
                                    //                                    for(var i=0 ;i < ComboValueArrya.length ; i++){
                                    //                                        var recCustomCombo =WtfGlobal.searchRecord(Wtf.getCmp(fieldname+this.tagsFieldset.id).store,ComboValueArrya[i],"name");
                                    //                                        ComboValueID+=recCustomCombo.data.id+","; 
                                    //                                    }
                                    //                                    if(ComboValueID.length > 1){
                                    //                                        ComboValueID=ComboValueID.substring(0,ComboValueID.length - 1);
                                    //                                    }
                                    if(ComboValue!="" && ComboValue!=undefined)
                                        Wtf.getCmp(fieldname+this.tagsFieldset.id).setValue(ComboValue);
                                }

                            }
                        }
                    }
                    /* Enable check Including or Excluding GST  */
                    if(rec.data["gstIncluded"]){
                        this.includeProTax.setValue(true);
                        this.includingGST.setValue(true);
                        this.includingGST.enable();
                    }else{
                        this.includeProTax.setValue(false);
                        this.includingGST.setValue(false);
                    }
                    
                    if (rec.data.taxid == "") {
                        this.isTaxable.setValue(false);
                        this.Tax.setValue("");
                        this.Tax.disable();
                    }else{
                        this.isTaxable.enable();
                        this.isTaxable.setValue(true);
                        this.Tax.enable();
                        this.Tax.setValue(rec.data.taxid);

                        this.includingGST.setValue(false);
                        this.includingGST.disable();
                        this.includeProTax.setValue(false);
                        this.includeProTax.setDisabled(true);
                        this.applyTaxToTermsChk.setValue(false);
                        this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(false);
                        this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
                    }

                    this.setTermValues(rec.data.termdetails);
                    var linkedRecordExternalCurrencyRate=rec.data["externalcurrencyrate"];
                    if(this.Currency.getValue()!=WtfGlobal.getCurrencyID && linkedRecordExternalCurrencyRate!="" && linkedRecordExternalCurrencyRate!=undefined){ //If selected currency is foreign currency then currency exchange rate will be exchange rate of linked document 
                        this.externalcurrencyrate=linkedRecordExternalCurrencyRate;
                    }

                }else{// for multiple selections
                    var taxRecords=0;
                    this.previusTaxId="";
                    var productLevelTax=false;  
                    var isGSTTax=false;
                    var isInvoiceLevelTax=false;
                    var withoutTax=false;
                    this.previusTaxId="";
                    var isInvoiceTaxDiff=false;
                    var invoiceLevelTaxRecords=0;
                    
                    /* Check all linked transcation are either Including or Excluding GST  */
                    this.checkIncludeGStForLinkedTranscation(selectedValuesArr);   

                    for(var cnt=0;cnt<selectedValuesArr.length;cnt++){
                        var rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cnt]));
                        var rec1=this.POStore1.getAt(this.POStore1.find('billid',selectedValuesArr[cnt]));
                        if(rec.data.contract!=undefined && rec.data.contract!=""){// in case of multiple linking if linked transactions are containing different different contract ids or similar contract ids then we will not allow linking
                            var dataMsg = "";
                            if(this.fromLinkCombo.getValue() == 0){// linked from SO
                                dataMsg = WtfGlobal.getLocaleText("acc.linking.so.selection.msg");
                            } else if(this.fromLinkCombo.getValue() == 1){// linked from CI
                                dataMsg = WtfGlobal.getLocaleText("acc.linking.ci.selection.msg");
                            }

                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),dataMsg], 2);
                            this.PO.clearValue();
                            return;
                            }
                            /**
                             * If user select multiple link document 
                             * if cusrrent transaction is RCM Applicalble 
                             *  then All Link Document selected should be RCM Applicable
                             *  else if cusrrent transaction is Not RCM Applicalble 
                             *  then All Link Document selected should be Non RCM Applicable.
                             *  This condition is only for INDIA country
                             */
                            if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
                                if (this.GTAApplicable.getValue()) {
                                    if (!rec1.data['gtaapplicable']) {
                                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.common.rcm.transaction.invalid.rcmapplicable")], 2);
                                        this.PO.clearValue();
                                        return;
                                    }
                                } else {
                                    if (rec1.data['gtaapplicable']) {
                                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.common.rcm.transaction.invalid.rcmnotapplicable")], 2);
                                        this.PO.clearValue();
                                        return;
                                    }
                                }
                                /**
                                 *  In Linking case user can select only merchant exporter or non merchant exporter 
                                 *  Both value document cant select
                                 */
                                if (this.isMerchantExporter.getValue()) {
                                    if (!rec1.data['isMerchantExporter']) {
                                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.common.merchantexport.transaction.invalid.merchantexportapplicable")], 2);
                                        this.PO.clearValue();
                                        return;
                                    }
                                } else {
                                    if (rec1.data['isMerchantExporter']) {
                                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.common.merchantexport.transaction.invalid.notmerchantexportapplicable")], 2);
                                        this.PO.clearValue();
                                        return;
                                    }
                                }
                            }
                        if(rec1.data["gstIncluded"]){ //checks for GST Tax
                            isGSTTax=true;
                        }else if(rec1.data["includeprotax"]){ //checks for product level tax
                            productLevelTax=true;
                        }else if(rec1.data["taxid"]!="" && rec1.data["taxid"]!=undefined && rec1.data["taxid"] != "None"){ //checks for invoice level tax 
                            isInvoiceLevelTax=true;                        
                            if(invoiceLevelTaxRecords!=0 && this.previusTaxId!=rec1.data["taxid"]){
                                isInvoiceTaxDiff=true;
                            }
                            this.previusTaxId=rec1.data["taxid"];
                            this.includeProTax.setValue(false);
                            this.showGridTax(null,null,true);//updating include product tax
                            invoiceLevelTaxRecords++;
                        }else{
                            withoutTax=true;//applicable for both no tax and diff tax
                        }
//                        if(taxRecords!=0 && this.previusTaxId!=rec1.data["taxid"]){
//                            taxDiff=true;
//                        }
//                        taxRecords++;
//                        this.previusTaxId=rec1.data["taxid"];
                    }
                    
                    if(isGSTTax){ //case when any linked record have GST Tax
                        var includeGstCount=0;
                        var excludeGstCount=0;
                        var enableApplyTaxtoTermCount=0;
                        var disableApplyTaxtoTermCount=0;
                        for(var cntGst=0;cntGst<selectedValuesArr.length;cntGst++){
                            rec=this.POStore1.getAt(this.POStore1.find('billid',selectedValuesArr[cntGst]));
                            if(rec.data["gstIncluded"]){
                                includeGstCount++;
                            }else if(!rec.data["gstIncluded"]){
                                excludeGstCount++;
                            }
                            /*Check all records have enable apply tax to terms or not*/
                            if(rec.data["isapplytaxtoterms"]){
                                enableApplyTaxtoTermCount++;
                            }else if(!rec.data["isapplytaxtoterms"]){
                                disableApplyTaxtoTermCount++;
                            }
                        }

                        if(!((selectedValuesArr.length==includeGstCount)||(selectedValuesArr.length==excludeGstCount))){
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                            this.PO.clearValue();
                            return;
                        }else if(!((selectedValuesArr.length==enableApplyTaxtoTermCount) || (selectedValuesArr.length==disableApplyTaxtoTermCount))){
                            //pop up
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                            this.PO.clearValue();
                            return;
                        }else if((selectedValuesArr.length==enableApplyTaxtoTermCount) || (selectedValuesArr.length==disableApplyTaxtoTermCount)){
                            if(selectedValuesArr.length==includeGstCount){
                                this.includeProTax.setValue(true);
                                this.includeProTax.setDisabled(true);
                                this.includingGST.setValue(true);
                                this.includingGST.enable();
                                this.showGridTax(null,null,false);
                                this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                                if(selectedValuesArr.length==enableApplyTaxtoTermCount){
                                    this.applyTaxToTermsChk.setValue(true); 
                                }else{
                                    this.applyTaxToTermsChk.setValue(false);
                                }
                            }else if(selectedValuesArr.length==excludeGstCount){
                                this.includeProTax.setValue(false);
                                this.includingGST.setValue(false);
                                this.showGridTax(null,null,true);
                            }
                            //Check all linked documents have same taxes,percetage to invoice term and set Invoice term.
                            this.summarizeInvoiceTermAmount(selectedValuesArr);
                        }else{
                            if(selectedValuesArr.length==includeGstCount){
                                this.includeProTax.setValue(true);
                                this.includingGST.setValue(true);
                            }else if(selectedValuesArr.length==excludeGstCount){
                                this.includeProTax.setValue(false);
                                this.includingGST.setValue(false);
                            }
                        }
                    }else if(productLevelTax){//case when any linked record have product tax without GST Tax
                        var enableApplyTaxtoTermCnt=0;
                        var disableApplyTaxtoTermCnt=0;
                        for(var cntterm=0;cntterm<selectedValuesArr.length;cntterm++){
                            rec=this.POStore1.getAt(this.POStore1.find('billid',selectedValuesArr[cntterm]));
                            /*Check all records have enable apply tax to terms or not*/
                            if(rec.data["isapplytaxtoterms"]){
                                enableApplyTaxtoTermCnt++;
                            }else if(!rec.data["isapplytaxtoterms"]){
                                disableApplyTaxtoTermCnt++;
                            }
                        }
                        if(isInvoiceLevelTax){
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                            this.PO.clearValue();
                            return;
                        }else if(!((selectedValuesArr.length==enableApplyTaxtoTermCnt) || (selectedValuesArr.length==disableApplyTaxtoTermCnt))){
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                            this.PO.clearValue();
                            return;
                        }else if((selectedValuesArr.length==enableApplyTaxtoTermCnt) || (selectedValuesArr.length==disableApplyTaxtoTermCnt)){
                            this.includeProTax.setValue(true);
                            this.includingGST.setValue(false);
                            this.showGridTax(null,null,false);
                            this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                            this.isTaxable.setValue(false);
                            this.isTaxable.disable();
                            this.Tax.setValue("");
                            this.Tax.disable();
                            if(selectedValuesArr.length==enableApplyTaxtoTermCnt){
                                this.applyTaxToTermsChk.setValue(true); 
                            }else{
                                this.applyTaxToTermsChk.setValue(false);
                            }
                            //Check all linked documents have same taxes,percetage to invoice term and set Invoice term.
                            this.summarizeInvoiceTermAmount(selectedValuesArr);
                        }else{//no tax and producttax
                            this.includeProTax.setValue(true);
                            this.showGridTax(null,null,false); 
                            this.isTaxable.setValue(false);//when selcting record with product tax.Tax should get disabled.
                            this.isTaxable.disable();
                            this.Tax.setValue("");
                            this.Tax.disable();
                        }                   
                    }else if(isInvoiceLevelTax){
                        if(withoutTax || isInvoiceTaxDiff){//for different tax and empty tax
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2); 
                            this.PO.clearValue();
                            return;
                        }else{
                            this.Tax.enable();
                            this.isTaxable.enable();
                            this.isTaxable.setValue(true);
                            this.Tax.setValue(this.previusTaxId);                            
                            this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(false);
                            this.applyTaxToTermsChk.setValue(false);
                            this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
                            this.summarizeInvoiceTermAmount(selectedValuesArr);
                        }
                        this.includingGST.setValue(false);
                        this.includingGST.disable();
                        this.includeProTax.setValue(false);
                        this.includeProTax.setDisabled(true); //update include product tax
                        this.showGridTax(null,null,true);
                    }else {
                        this.Tax.disable();
                        this.isTaxable.enable();
                        this.isTaxable.setValue(false);
                        this.Tax.setValue("");
                        this.includeProTax.setValue(false); //update include product tax
                        this.showGridTax(null,null,true);
                        this.summarizeInvoiceTermAmount(selectedValuesArr);
                    }
                    
//                    /*
//                    *	ERM-1037
//                    *	send id of selected document to function to restrict linking of future dated document
//                    */
//                    WtfGlobal.checkForFutureDate(this, selectedValuesArr);
                    var isLinkedDocumentHaveSameER=true;           
                    var linkedExternalRate=0;
                    if(this.Currency.getValue()!=WtfGlobal.getCurrencyID){ // Foreign currency linking case. In this case we have to borrow Linked document Exchange Rate in current document.                  
                        for(var count=0;count<selectedValuesArr.length;count++){
                            var tempRec =WtfGlobal.searchRecord(this.POStore,selectedValuesArr[count],"billid");                        
                            if(count==0){
                                linkedExternalRate = tempRec.data["externalcurrencyrate"]; // taking externalcurrencyrate of first record and then comparing it with other records external currency rate
                            } else if(tempRec.data["externalcurrencyrate"]!=linkedExternalRate) {
                                isLinkedDocumentHaveSameER =false;  
                                break;
                            }
                        } 
                        if(isLinkedDocumentHaveSameER){ //if exchange rate same for all linked document then applying it for current record by assigning here 
                            this.externalcurrencyrate=linkedExternalRate;
                        } else { //if exchange rate different then reassigning exchange rate of that date and giving below information message 
                            var index=this.getCurrencySymbol();
                            var exchangeRate = this.currencyStore.getAt(index).data['exchangerate'];
                            this.externalcurrencyrate=exchangeRate;
                            var msg = WtfGlobal.getLocaleText("acc.invoiceform.exchangeratemessage1")+"<b> "+this.externalcurrencyrate+" </b>"+WtfGlobal.getLocaleText("acc.invoiceform.exchangeratemessage2");                        
                            WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.information'),msg],3);
                        }
                    }
                    var isCreditTermHaveSameValue=true;           
                    var creditTerm=0;

                    for(var count=0;count<selectedValuesArr.length;count++){
                        var tempRec =WtfGlobal.searchRecord(this.POStore,selectedValuesArr[count],"billid");                        
                        if(count==0){
                            creditTerm = tempRec.data["termid"]; // taking externalcurrencyrate of first record and then comparing it with other records external currency rate
                        } else if(tempRec.data["termid"]!=creditTerm) {
                            isCreditTermHaveSameValue =false;  
                            break;
                        }
                    } 
                    if(isCreditTermHaveSameValue && rec.data['termid']!=""){ //if exchange rate same for all linked document then applying it for current record by assigning here 
                        this.Term.setValue(rec.data['termid']);
                    } else { //if exchange rate different then reassigning exchange rate of that date and giving below information message 

                    }

                    this.Memo.setValue('');
                    this.SupplierInvoiceNo.setValue('');
                    this.shipDate.setValue('');
                    //                this.Term.reset();;    
                    this.shipvia.setValue('');
                    this.fob.setValue('');                                                
                    this.permitNumber.setValue('');                                                
                    this.CostCenter.setValue('');
                }
                if (rec.data["includeprotax"]) {
                    this.includeProTax.setValue(true);
                    this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                    this.applyTaxToTermsChk.setValue(rec.data['isapplytaxtoterms']);
                    if (this.isCustomer) {
                        if (Wtf.account.companyAccountPref.unitPriceInDO) {
                            this.showGridTax(null, null, false);
                        }
                    } else {
                        if (Wtf.account.companyAccountPref.unitPriceInGR) {
                            this.showGridTax(null, null, false);
                        }
                    }

                    this.isTaxable.setValue(false);//when selecting record with product tax.Tax should get disabled.
                    this.isTaxable.disable();
                    this.Tax.setValue("");
                    this.Tax.disable();
                    
                        /*----If "Map Taxes at product level" check is ON from system preferences 
                         * For malaysian company then we show Line level tax
                         * at the time of linking documents if parent documents is created with line level Tax
                         ----------*/
                        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {//and also check record data is mapped with product level taxes but how here (for normal transaction created with line level taxes)
                            this.Tax.hide();
                            WtfGlobal.hideFormLabel(this.Tax);
                            this.isTaxable.hide();
                            WtfGlobal.hideFormLabel(this.isTaxable);
                        }
                } else {
                    this.includeProTax.setValue(false);
                    if (this.isCustomer) {
                        if (Wtf.account.companyAccountPref.unitPriceInDO) {
                            this.showGridTax(null, null, true);
                        }
                    } else {
                        if (Wtf.account.companyAccountPref.unitPriceInGR) {
                            this.showGridTax(null, null, true);
                        }
                    }
                    this.Tax.enable();//required because when selected multiple records & changing to select single record.Before it was getting disabled.
                    this.isTaxable.enable();
                    
                        /*----If "Map Taxes at product level" check is ON from system preferences 
                         * For malaysian company then we show Global level tax
                         * at the time of linking documents if parent documents is created with global level Tax
                         ----------*/
                        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                            this.Tax.show();
                            WtfGlobal.showLabel(this.Tax);
                            this.isTaxable.show();
                            WtfGlobal.showLabel(this.isTaxable);
                        }
                
                }
//                if ((rec.data.taxid == "")) {//generate so or po it should not show taxid
//                    if (taxDiff) {//for different tax
//                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.alert.includingDifferentTaxAtGlobalLevel")], 2);
//                        this.PO.clearValue();
//                        return;
//                    }
//                    this.isTaxable.setValue(false);
//                    this.Tax.setValue("");
//                    this.Tax.disable();
//        //            this.includingGST.setValue(true);
//        //            this.includingGST.enable(); 
//                }else{
//                    //                this.includeProTax.setValue(false);
//                    if (taxDiff) {//for different tax
//                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.alert.includingDifferentTaxAtGlobalLevel")], 2);
//                        this.PO.clearValue();
//                        return;
//                    }
//                    //ERP-38656
////                    if (isTaxActivate(this.Grid.taxStore, rec.data.taxid, "prtaxid")) {
//                        this.Tax.setValue(rec.data.taxid);
////                    } else {
////                        this.Tax.setValue("");
////                    }
//                    this.isTaxable.enable();            
//                    this.Tax.enable();//enable the tax when taxid is present-for edit case it was not required but for copy its is required.
//                    this.isTaxable.setValue(true);
//                    this.includingGST.setValue(false);
//                    this.includingGST.disable();
//                    this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
//                }
                if (rec!=undefined && this.users != null && this.users != undefined && selectedValuesArr.length==1) {//if multiselection value is one then it will set value to Sales Person/Agent else blank-ERP-19289
                    if(this.isCustomer){
                        if(rec.data['salesPerson'] != undefined && rec.data['salesPerson'] != ""){
                            this.users.setValForRemoteStore(record.data.salesPerson ,record.data.salespersonname,true);
//                            this.users.setValue(rec.data['salesPerson']) 
                        }
                    }else{
                        if(rec.data['agent'] != undefined && rec.data['agent'] != ""){
                            this.users.setValForRemoteStore(record.data.agent ,record.data.agentname,true);
//                            this.users.setValue(rec.data['agent']);
                        }
                    }                         
                }else if (this.users != null && this.users != undefined && selectedValuesArr.length>1) {
                    this.users.setValForRemoteStore("" ,"",true);
                }
                rec=this.PO.getValue();
                //this.updateDueDate();
                var url = "";
                //(this.isCustBill?53:43)
                var linkingFlag = false;   //For removing cross reference of DO-CI or GR-VI     
                var isForDOGROLinking = true;// if DO/GRO is being create with Linking to SO/PO/CI/VI
                if(this.fromLinkCombo.getValue()==0 || this.fromLinkCombo.getValue()==2){ // For JOB WORK ORDERS
                    /*
                         * if Job Work Order is Selected 
                         * then setting Jobworkorderid in Deliveryordergrid.js
                         */
                    if (this.fromLinkCombo.getValue()==2) {
                        var isJobworkOrder =true;
                        this.Grid.setJobworkorderid(this.PO.getValue(),isJobworkOrder);
                    }
                    url = this.isCustomer ? 'ACCSalesOrderCMN/getSalesOrderRows.do' : "ACCPurchaseOrderCMN/getPurchaseOrderRows.do";
                }else if(this.fromLinkCombo.getValue()==3){
                /*
                 * In goods receipt 3 is used for security gate entry
                 */
                    url ="ACCPurchaseOrderCMN/getSecurityGateEntryRows.do";
                }
                else if(this.fromLinkCombo.getValue()==1){
                    url = this.isCustomer ? "ACCInvoiceCMN/getInvoiceRows.do" : "ACCGoodsReceiptCMN/getGoodsReceiptRows.do";
                    var linkingFlag =true;
                }
                this.Grid.getStore().proxy.conn.url = url;
                this.Grid.getStore().on('beforeload', function() {
                    WtfGlobal.setAjaxTimeOut();
                }, this);

                this.Grid.getStore().on('load', function() {
                    WtfGlobal.resetAjaxTimeOut();
                }, this);

                this.Grid.getStore().on('loadexception', function() {
                    WtfGlobal.resetAjaxTimeOut();
                }, this);
                this.Grid.loadPOGridStore(rec,linkingFlag,isForDOGROLinking,false);

            },this);
            this.POStore1.on('loadexception',function(){
                WtfGlobal.resetAjaxTimeOut();
            },this);
            this.POStore1.load();
        }else{
            if(billid.indexOf(",")==-1){  //In MultiSelection if the user select only one                            
            rec=this.POStore.getAt(this.POStore.find('billid',billid));
//            if (rec != undefined) {
//                /*
//                *	ERM-1037
//                *	send id of selected document to function to restrict linking of future dated document
//                */
//                var isFutureDatedDocumentLinked = WtfGlobal.checkForFutureDate(this, selectedValuesArr);
//                if (isFutureDatedDocumentLinked) {
//                    return;
//                }
//            }
            if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
                if (rec.data['gtaapplicable']) {//If Selected Vendor/Customer has GTA applicable, then by Default value will be populate.
                    this.GTAApplicable.setValue(true);
                } else {
                    this.GTAApplicable.setValue(false);
                }
                /**
                 * Set Merchant Exporter value in Linking case
                 */
                if (rec.data['isMerchantExporter']) {
                    this.isMerchantExporter.setValue(true);
                } else {
                    this.isMerchantExporter.setValue(false);
                }
            }
            this.Memo.setValue(rec.data['memo']);
            this.postText=rec.data['posttext'];
            if (this.fromLinkCombo.getValue() == 0) {
                this.CustomerPORefNo.setValue(rec.data['customerporefno']);
            }else{
                this.CustomerPORefNo.setValue(rec.data['porefno']);
            }
            //this.Name.setValue(rec.data['personid']);   
            this.shipDate.setValue(rec.data['shipdate']);
            if(rec.data['termid']!=""){ //ERP-16831
                this.Term.setValue(rec.data['termid']);
            }
            this.SupplierInvoiceNo.setValue(rec.data['supplierinvoiceno']);
            this.shipvia.setValue(rec.data['shipvia']);
            this.fob.setValue(rec.data['fob']);
            this.permitNumber.setValue(rec.data['permitNumber']);
            this.Currency.setValue(rec.data['currencyid']);
            if(rec.data["includeprotax"]){
                this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                this.applyTaxToTermsChk.setValue(rec.data['isapplytaxtoterms']);
            }
            var perstore=this.isCustomer? Wtf.customerAccStore:Wtf.vendorAccStore
            var storerec=perstore.getAt(perstore.find('accid',rec.data['personid']));        
            this.CostCenter.setValue(rec.data.costcenterid);  
                
            var record=this.POStore.getAt(this.POStore.find('billid',billid));
            this.linkRecord=this.POStore.getAt(this.POStore.find('billid',billid));
            this.singleLink=true;
            this.tagsFieldset.resetCustomComponents();
            var fieldArr = this.POStore.fields.items;
            for(var fieldCnt=0; fieldCnt < fieldArr.length; fieldCnt++) {
                var fieldN = fieldArr[fieldCnt];
                   
                if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id) && record.data[fieldN.name] !="") {
                    if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).getXType()=='datefield'){
                        Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(record.data[fieldN.name]);
                    }else if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).xtype == 'fncombo' || Wtf.getCmp(fieldN.name+this.tagsFieldset.id).getXType()=='fncombo'){
                        var ComboValue=record.data[fieldN.name];
                        //                                var ComboValueID="";
                        //                                var recCustomCombo =WtfGlobal.searchRecord(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).store,ComboValue,"name");
                        if(ComboValue){
                            //                                    ComboValueID=recCustomCombo.data.id;
                            Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(ComboValue);
                            var parent = Wtf.getCmp(fieldN.name + this.tagsFieldset.id).parentid;
                            var displayValue = record.json[fieldN.name + "_linkValue"];
                            if (parent != undefined && displayValue != undefined && parent.length > 0) {
                                if (displayValue) {
                                    Wtf.getCmp(fieldN.name + this.tagsFieldset.id).setValForChildComboStore(ComboValue, displayValue); // create record and set value
                                }
                            } 
                            var  childid= Wtf.getCmp(fieldN.name+this.tagsFieldset.id).childid;
                            if(childid.length>0){
                                var childidArray=childid.split(",");
                                for(var i=0;i<childidArray.length;i++){
                                    var currentBaseParams = Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.baseParams;
                                    currentBaseParams.parentid=ComboValue;
                                    Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.baseParams=currentBaseParams;
                                    Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.load();
                                }
                            }  
                        }
                    }else{
                        if(record.data[fieldN.name]!= undefined) {
                            Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(record.data[fieldN.name]);
                        }else if (record.json[fieldN.name]!= undefined){
                            Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(record.json[fieldN.name]);
                        }
                    }
                }
                if(fieldN.name.indexOf("Custom_") == 0){
                    var fieldname=fieldN.name.substring(7,fieldN.name.length);
                    if(Wtf.getCmp(fieldname+this.tagsFieldset.id) && record.data[fieldN.name] !="") {
                        if(Wtf.getCmp(fieldname+this.tagsFieldset.id).getXType()=='fieldset'){
                            var ComboValue=record.json[fieldN.name];
                            var ComboValueArrya=ComboValue.split(',');
                            var ComboValueID="";
                            var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray; 
                            for(var i=0 ;i < ComboValueArrya.length ; i++){
                                for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
                                    if(checkListCheckBoxesArray[checkitemcnt].id.indexOf(ComboValueArrya[i]) != -1 )
                                        if (Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id) != undefined) {
                                            Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id).setValue(true);
                                        }
                                } 
                            }
                        }else if(Wtf.getCmp(fieldname+this.tagsFieldset.id).getXType()=='select'){
                            var ComboValue=record.json[fieldN.name];
                            //                                    var ComboValueArrya=ComboValue.split(',');
                            //                                    var ComboValueID="";
                            //                                    for(var i=0 ;i < ComboValueArrya.length ; i++){
                            //                                        var recCustomCombo =WtfGlobal.searchRecord(Wtf.getCmp(fieldname+this.tagsFieldset.id).store,ComboValueArrya[i],"name");
                            //                                        ComboValueID+=recCustomCombo.data.id+","; 
                            //                                    }
                            //                                    if(ComboValueID.length > 1){
                            //                                        ComboValueID=ComboValueID.substring(0,ComboValueID.length - 1);
                            //                                    }
                            if(ComboValue!="" && ComboValue!=undefined)
                                Wtf.getCmp(fieldname+this.tagsFieldset.id).setValue(ComboValue);
                        }

                    }
                    /**
                     * Set value of exemption code dimension in case of Avalara Integration
                     */
                    if (this.isModuleForAvalara && fieldname == Wtf.integration.avalaraExemptionCode && Wtf.getCmp(fieldN.name+this.tagsFieldset.id) && (!record.data[fieldN.name] || billid.indexOf(",") != -1)) {
                        Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue("1234");//Set 'None' if no value is selected
                    }
                }
            }
            /* Enable check Including or Excluding GST  */
            if(rec.data["gstIncluded"]){
                this.includeProTax.setValue(true);
                this.includingGST.setValue(true);
                this.includeProTax.setDisabled(true);
                this.includingGST.enable();
            }else{
                this.includeProTax.setDisabled(false);
                this.includeProTax.setValue(false);
                this.includingGST.setValue(false);
            }
            
            if (rec.data.taxid == "") {
                this.isTaxable.setValue(false);
                this.Tax.setValue("");
                this.Tax.disable();
            }else{
                this.isTaxable.enable();
                this.isTaxable.setValue(true);
                this.Tax.enable();
                this.Tax.setValue(rec.data.taxid);
                
                this.includingGST.setValue(false);
                this.includingGST.disable();
                this.includeProTax.setValue(false);
                this.includeProTax.setDisabled(true);
                this.applyTaxToTermsChk.setValue(false);
                this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(false);
                this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
            }
        
            this.setTermValues(rec.data.termdetails);
            var linkedRecordExternalCurrencyRate=rec.data["externalcurrencyrate"];
            if(this.Currency.getValue()!=WtfGlobal.getCurrencyID && linkedRecordExternalCurrencyRate!="" && linkedRecordExternalCurrencyRate!=undefined){ //If selected currency is foreign currency then currency exchange rate will be exchange rate of linked document 
                this.externalcurrencyrate=linkedRecordExternalCurrencyRate;
            }

        }else{// for multiple selections
            var taxRecords=0;
            this.previusTaxId="";
            var productLevelTax=false;  
            var isGSTTax=false;
            var isInvoiceLevelTax=false;
            var withoutTax=false;
            this.previusTaxId="";
            var isInvoiceTaxDiff=false;
            var invoiceLevelTaxRecords=0;
            
            /* Check all linked transcation are either Including or Excluding GST  */
            this.checkIncludeGStForLinkedTranscation(selectedValuesArr);   
                  
            for(var cnt=0;cnt<selectedValuesArr.length;cnt++){
                var rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cnt]));
                if(rec.data.contract!=undefined && rec.data.contract!=""){// in case of multiple linking if linked transactions are containing different different contract ids or similar contract ids then we will not allow linking
                    var dataMsg = "";
                    if(this.fromLinkCombo.getValue() == 0){// linked from SO
                        dataMsg = WtfGlobal.getLocaleText("acc.linking.so.selection.msg");
                    } else if(this.fromLinkCombo.getValue() == 1){// linked from CI
                        dataMsg = WtfGlobal.getLocaleText("acc.linking.ci.selection.msg");
                    }

                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),dataMsg], 2);
                    this.PO.clearValue();
                    return;
                }
                if(rec.data["gstIncluded"]){ //checks for GST Tax
                    isGSTTax=true;
                }else if(rec.data["includeprotax"]){ //checks for product level tax
                    productLevelTax=true;
                }else if(rec.data["taxid"]!="" && rec.data["taxid"]!=undefined && rec.data["taxid"] != "None"){ //checks for invoice level tax 
                    isInvoiceLevelTax=true;                        
                    if(invoiceLevelTaxRecords!=0 && this.previusTaxId!=rec.data["taxid"]){
                        isInvoiceTaxDiff=true;
                    }
                    this.previusTaxId=rec.data["taxid"];
                    this.includeProTax.setValue(false);
                    this.showGridTax(null,null,true);//updating include product tax
                    invoiceLevelTaxRecords++;
                }else{
                    withoutTax=true;//applicable for both no tax and diff tax
                }
                
//                if(taxRecords!=0 && this.previusTaxId!=rec.data["taxid"]){
//                    taxDiff=true;
//                }
//                taxRecords++;
//                this.previusTaxId=rec.data["taxid"];
                /**
                 * If user select multiple link document 
                 * if cusrrent transaction is RCM Applicalble 
                 *  then All Link Document selected should be RCM Applicable
                 *  else if cusrrent transaction is Not RCM Applicalble 
                 *  then All Link Document selected should be Non RCM Applicable.
                 *  This condition is only for INDIA country
                 */
                if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
                    if(this.GTAApplicable.getValue()){
                        if(!rec.data['gtaapplicable']){
                           WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.common.rcm.transaction.invalid.rcmapplicable")], 2); 
                           this.PO.clearValue();
                           return;
                        }
                    }else{
                        if(rec.data['gtaapplicable']){
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.common.rcm.transaction.invalid.rcmnotapplicable")], 2);
                            this.PO.clearValue();
                            return;
                        }
                    }
                    /**
                    *  In Linking case user can select only merchant exporter or non merchant exporter 
                    *  Both value document cant select
                    */
                    if(this.isMerchantExporter.getValue()){
                        if(!rec.data['isMerchantExporter']){
                           WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.common.merchantexport.transaction.invalid.merchantexportapplicable")], 2); 
                           this.PO.clearValue();
                           return;
                        }
                    }else{
                        if(rec.data['isMerchantExporter']){
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.common.merchantexport.transaction.invalid.notmerchantexportapplicable")], 2);
                            this.PO.clearValue();
                            return;
                        }
                    }
                }
            }
            
            if(isGSTTax){ //case when any linked record have GST Tax
                var includeGstCount=0;
                var excludeGstCount=0;
                var enableApplyTaxtoTermCount=0;
                var disableApplyTaxtoTermCount=0;
                for(var cntGst=0;cntGst<selectedValuesArr.length;cntGst++){
                    rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cntGst]));
                    if(rec.data["gstIncluded"]){
                        includeGstCount++;
                    }else if(!rec.data["gstIncluded"]){
                        excludeGstCount++;
                    }
                    /*Check all records have enable apply tax to terms or not*/
                    if(rec.data["isapplytaxtoterms"]){
                        enableApplyTaxtoTermCount++;
                    }else if(!rec.data["isapplytaxtoterms"]){
                        disableApplyTaxtoTermCount++;
                    }
                }

                if(!((selectedValuesArr.length==includeGstCount)||(selectedValuesArr.length==excludeGstCount))){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                    this.PO.clearValue();
                    return;
                }else if(!((selectedValuesArr.length==enableApplyTaxtoTermCount) || (selectedValuesArr.length==disableApplyTaxtoTermCount))){
                    //pop up
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                    this.PO.clearValue();
                    return;
                }else if((selectedValuesArr.length==enableApplyTaxtoTermCount) || (selectedValuesArr.length==disableApplyTaxtoTermCount)){
                    if(selectedValuesArr.length==includeGstCount){
                        this.includeProTax.setValue(true);
                        this.includeProTax.setDisabled(true);
                        this.includingGST.setValue(true);
                        this.includingGST.enable();
                        this.showGridTax(null,null,false);
                        this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                        if(selectedValuesArr.length==enableApplyTaxtoTermCount){
                            this.applyTaxToTermsChk.setValue(true); 
                        }else{
                            this.applyTaxToTermsChk.setValue(false);
                        }
                    }else if(selectedValuesArr.length==excludeGstCount){
                        this.includeProTax.setValue(false);
                        this.includingGST.setValue(false);
                        this.showGridTax(null,null,true);
                    }
                    //Check all linked documents have same taxes,percetage to invoice term and set Invoice term.
                    this.summarizeInvoiceTermAmount(selectedValuesArr);
                }else{
                    if(selectedValuesArr.length==includeGstCount){
                        this.includeProTax.setValue(true);
                        this.includingGST.setValue(true);
                    }else if(selectedValuesArr.length==excludeGstCount){
                        this.includeProTax.setValue(false);
                        this.includingGST.setValue(false);
                    }
                }
            }else if(productLevelTax){//case when any linked record have product tax without GST Tax
                var enableApplyTaxtoTermCnt=0;
                var disableApplyTaxtoTermCnt=0;
                for(var cntGst=0;cntGst<selectedValuesArr.length;cntGst++){
                    rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cntGst]));
                    /*Check all records have enable apply tax to terms or not*/
                    if(rec.data["isapplytaxtoterms"]){
                        enableApplyTaxtoTermCnt++;
                    }else if(!rec.data["isapplytaxtoterms"]){
                        disableApplyTaxtoTermCnt++;
                    }
                }
                if(isInvoiceLevelTax){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                    this.PO.clearValue();
                    return;
                }else if(!((selectedValuesArr.length==enableApplyTaxtoTermCnt) || (selectedValuesArr.length==disableApplyTaxtoTermCnt))){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                    this.PO.clearValue();
                    return;
                }else if((selectedValuesArr.length==enableApplyTaxtoTermCnt) || (selectedValuesArr.length==disableApplyTaxtoTermCnt)){
                    this.includeProTax.setValue(true);
                    this.includingGST.setValue(false);
                    this.showGridTax(null,null,false);
                    this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                    this.isTaxable.setValue(false);//when selcting record with product tax.Tax should get disabled.
                    this.isTaxable.disable();
                    this.Tax.setValue("");
                    this.Tax.disable();
                    if(selectedValuesArr.length==enableApplyTaxtoTermCnt){
                        this.applyTaxToTermsChk.setValue(true); 
                    }else{
                        this.applyTaxToTermsChk.setValue(false);
                    }
                    //Check all linked documents have same taxes,percetage to invoice term and set Invoice term.
                    this.summarizeInvoiceTermAmount(selectedValuesArr);
                }else{//no tax and producttax
                    this.includeProTax.setValue(true);
                    this.showGridTax(null,null,false); 
                    this.isTaxable.setValue(false);//when selcting record with product tax.Tax should get disabled.
                    this.isTaxable.disable();
                    this.Tax.setValue("");
                    this.Tax.disable();
                }                   
            }else if(isInvoiceLevelTax){
                if(withoutTax || isInvoiceTaxDiff){//for different tax and empty tax
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2); 
                    this.PO.clearValue();
                    return;
                }else{
                    this.Tax.enable();
                    this.isTaxable.enable();
                    this.isTaxable.setValue(true);
                    this.Tax.setValue(this.previusTaxId);                            
                    this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
                    this.summarizeInvoiceTermAmount(selectedValuesArr);
                }
                this.includingGST.setValue(false);
                this.includingGST.disable();
                this.includeProTax.setValue(false);
                this.includeProTax.setDisabled(true);
                this.showGridTax(null,null,true);
            }else {
                this.Tax.disable();
                this.isTaxable.enable();
                this.isTaxable.setValue(false);
                this.Tax.setValue("");
                this.includeProTax.setValue(false); //update include product tax
                this.showGridTax(null,null,true);
                this.summarizeInvoiceTermAmount(selectedValuesArr);
            }
//            /*
//            *	ERM-1037
//            *	send id of selected document to function to restrict linking of future dated document
//            */
//            WtfGlobal.checkForFutureDate(this,selectedValuesArr);
            var isLinkedDocumentHaveSameER=true;           
            var linkedExternalRate=0;
            if(this.Currency.getValue()!=WtfGlobal.getCurrencyID){ // Foreign currency linking case. In this case we have to borrow Linked document Exchange Rate in current document.                  
                for(var count=0;count<selectedValuesArr.length;count++){
                    var tempRec =WtfGlobal.searchRecord(this.POStore,selectedValuesArr[count],"billid");                        
                    if(count==0){
                        linkedExternalRate = tempRec.data["externalcurrencyrate"]; // taking externalcurrencyrate of first record and then comparing it with other records external currency rate
                    } else if(tempRec.data["externalcurrencyrate"]!=linkedExternalRate) {
                        isLinkedDocumentHaveSameER =false;  
                        break;
                    }
                } 
                if(isLinkedDocumentHaveSameER){ //if exchange rate same for all linked document then applying it for current record by assigning here 
                    this.externalcurrencyrate=linkedExternalRate;
                } else { //if exchange rate different then reassigning exchange rate of that date and giving below information message 
                    var index=this.getCurrencySymbol();
                    var exchangeRate = this.currencyStore.getAt(index).data['exchangerate'];
                    this.externalcurrencyrate=exchangeRate;
                    var msg = WtfGlobal.getLocaleText("acc.invoiceform.exchangeratemessage1")+"<b> "+this.externalcurrencyrate+" </b>"+WtfGlobal.getLocaleText("acc.invoiceform.exchangeratemessage2");                        
                    WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.information'),msg],3);
                }
            }
            var isCreditTermHaveSameValue=true;           
            var creditTerm=0;
                
            for(var count=0;count<selectedValuesArr.length;count++){
                var tempRec =WtfGlobal.searchRecord(this.POStore,selectedValuesArr[count],"billid");                        
                if(count==0){
                    creditTerm = tempRec.data["termid"]; // taking externalcurrencyrate of first record and then comparing it with other records external currency rate
                } else if(tempRec.data["termid"]!=creditTerm) {
                    isCreditTermHaveSameValue =false;  
                    break;
                }
            } 
            if(isCreditTermHaveSameValue && rec.data['termid']!=""){ //if exchange rate same for all linked document then applying it for current record by assigning here 
                this.Term.setValue(rec.data['termid']);
            } else { //if exchange rate different then reassigning exchange rate of that date and giving below information message 
                        
            }
                
            this.Memo.setValue('');
            this.SupplierInvoiceNo.setValue('');
            this.shipDate.setValue('');
            //                this.Term.reset();;    
            this.shipvia.setValue('');
            this.fob.setValue('');                                                
            this.permitNumber.setValue('');                                                
            this.CostCenter.setValue('');
        }
        if (rec.data["includeprotax"]) {
            this.includeProTax.setValue(true);
            if(rec.data["gstIncluded"]){
                this.includingGST.setValue(true);
            }
            this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
            this.applyTaxToTermsChk.setValue(rec.data['isapplytaxtoterms']);
            if (this.isCustomer) {
                if (Wtf.account.companyAccountPref.unitPriceInDO) {
                    this.showGridTax(null, null, false);
                }
            } else {
                if (Wtf.account.companyAccountPref.unitPriceInGR) {
                    this.showGridTax(null, null, false);
                }
            }
                
            this.isTaxable.setValue(false);//when selecting record with product tax.Tax should get disabled.
            this.isTaxable.disable();
            this.Tax.setValue("");
            this.Tax.disable();
            
                    /*----If "Map Taxes at product level" check is ON from system preferences 
                     * For malaysian company then we show Line level tax
                     * at the time of linking documents if parent documents is created with line level Tax
                     ----------*/
                    if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {//and also check record data is mapped with product level taxes but how here (for normal transaction created with line level taxes)
                        this.Tax.hide();
                        WtfGlobal.hideFormLabel(this.Tax);
                        this.isTaxable.hide();
                        WtfGlobal.hideFormLabel(this.isTaxable);
                    }
        } else {
            this.includeProTax.setValue(false);
            if (this.isCustomer) {
                if (Wtf.account.companyAccountPref.unitPriceInDO) {
                    this.showGridTax(null, null, true);
                }
            } else {
                if (Wtf.account.companyAccountPref.unitPriceInGR) {
                    this.showGridTax(null, null, true);
                }
            }
            this.Tax.enable();//required because when selected multiple records & changing to select single record.Before it was getting disabled.
            this.isTaxable.enable();
            
                    /*----If "Map Taxes at product level" check is ON from system preferences 
                     * For malaysian company then we show Global level tax
                     * at the time of linking documents if parent documents is created with global level Tax
                     ----------*/
                    if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                        this.Tax.show();
                        WtfGlobal.showLabel(this.Tax);
                        this.isTaxable.show();
                        WtfGlobal.showLabel(this.isTaxable);
                    }
        }
//        if ((rec.data.taxid == "")) {//generate so or po it should not show taxid
//            if (taxDiff) {//for different tax
//                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.alert.includingDifferentTaxAtGlobalLevel")], 2);
//                this.PO.clearValue();
//                return;
//            }
//            this.isTaxable.setValue(false);
//            this.Tax.setValue("");
//            this.Tax.disable();
////            this.includingGST.setValue(true);
////            this.includingGST.enable(); 
//        }else{
//            //                this.includeProTax.setValue(false);
//            if (taxDiff) {//for different tax
//                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.alert.includingDifferentTaxAtGlobalLevel")], 2);
//                this.PO.clearValue();
//                return;
//            }
//            
//            //ERP-38656
////            if (isTaxActivate(this.Grid.taxStore, rec.data.taxid, "prtaxid")) {
//                this.Tax.setValue(rec.data.taxid);
////            } else {
////                this.Tax.setValue("");
////            }
//            this.isTaxable.enable();
//            this.Tax.enable();//enable the tax when taxid is present-for edit case it was not required but for copy its is required.
//            this.isTaxable.setValue(true);
//            this.includingGST.setValue(false);
//            this.includingGST.disable();
//            this.includeProTax.setValue(false);
//            this.includeProTax.setDisabled(true);
//            this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
//        }
            if (rec!=undefined && this.users != null && this.users != undefined ) {//if multiselection value is one then it will set value to Sales Person/Agent else blank-ERP-19289
                if(selectedValuesArr.length==1){
                    if(this.isCustomer){
                        if(rec.data['salesPerson'] != undefined && rec.data['salesPerson'] != ""){
                            //ERP-41011 setting remote store value for salesperson or agent
                            this.users.setValForRemoteStore(record.data.salesPerson ,record.data.salespersonname,true);
                        //                            this.users.setValue(rec.data['salesPerson']) 
                        }
                    }else{
                        if(rec.data['agent'] != undefined && rec.data['agent'] != ""){
                            this.users.setValForRemoteStore(record.data.agent ,record.data.agentname,true);
                        //                            this.users.setValue(rec.data['agent']);
                        }
                    }   
                }else{
                    //If more than one record are selected then set to blank as it is done in Invoice
                    this.users.setValForRemoteStore("" ,"",true);
                }
            }
        rec=this.PO.getValue();
        //this.updateDueDate();
        var url = "";
        //(this.isCustBill?53:43)
        var linkingFlag = false;   //For removing cross reference of DO-CI or GR-VI     
        var isForDOGROLinking = true;// if DO/GRO is being create with Linking to SO/PO/CI/VI
        if(this.fromLinkCombo.getValue()==0 || this.fromLinkCombo.getValue()==2){ // For JOB WORK ORDERS
            /*
                 * if Job Work Order is Selected 
                 * then setting Jobworkorderid in Deliveryordergrid.js
                 */
                var isJobWorkOutLinkedWithGRN = false;
            if (this.fromLinkCombo.getValue()==2) {
                var isJobworkOrder =true;
                this.Grid.setJobworkorderid(this.PO.getValue(),isJobworkOrder);
                isJobWorkOutLinkedWithGRN=true;
            }
            url = this.isCustomer ? 'ACCSalesOrderCMN/getSalesOrderRows.do' : "ACCPurchaseOrderCMN/getPurchaseOrderRows.do";
        }else if(this.fromLinkCombo.getValue()==3){
        /*
         * In goods receipt 3 is used for security gate entry
         */
            url ="ACCPurchaseOrderCMN/getSecurityGateEntryRows.do";
        }
        else if(this.fromLinkCombo.getValue()==1){
            url = this.isCustomer ? "ACCInvoiceCMN/getInvoiceRows.do" : "ACCGoodsReceiptCMN/getGoodsReceiptRows.do";
            var linkingFlag =true;
        }
        this.Grid.getStore().proxy.conn.url = url;
        this.Grid.getStore().on('beforeload', function() {
            WtfGlobal.setAjaxTimeOut();
        }, this);

        this.Grid.getStore().on('load', function() {
            WtfGlobal.resetAjaxTimeOut();
        }, this);
        
        this.Grid.getStore().on('loadexception', function() {
            WtfGlobal.resetAjaxTimeOut();
        }, this);
        this.Grid.loadPOGridStore(rec,linkingFlag,isForDOGROLinking,false,isJobWorkOutLinkedWithGRN);
    }   
    }   
},

getDates:function(start){
    var d=new Date();
    var monthDateStr=d.format('M d');
    if(Wtf.account.companyAccountPref.fyfrom)
        monthDateStr=Wtf.account.companyAccountPref.fyfrom.format('M d');
    var fd=new Date(monthDateStr+', '+d.getFullYear()+' 12:00:00 AM');
    if(d<fd)
        fd=new Date(monthDateStr+', '+(d.getFullYear()-1)+' 12:00:00 AM');
    if(start)
        return fd;

    return fd.add(Date.YEAR, 1).add(Date.DAY, -1);
},

setDate:function(){
    var height = 0;
    if(this.isOrder)
        height=140;
        
    //if(height>=140) this.NorthForm.setHeight(height);

    if(!this.isEdit){            
        this.billDate.setValue(new Date());//(Wtf.serverDate);      //For GR creation date.      
    }
},        
addPerson:function(isEdit,rec,winid,isCustomer){
    callBusinessContactWindow(isEdit, rec, winid, isCustomer);
    var tabid=isCustomer?'contactDetailCustomerTab':'contactDetailVendorTab';
    Wtf.getCmp(tabid).on('update', function(){
        this.isCustomer?Wtf.customerAccStore.reload():Wtf.vendorAccStore.reload();
    }, this);
},
onCurrencyChangeOnly:function(){
    this.fromPO.reset();
    this.fromLinkCombo.reset();
    this.fromLinkCombo.setDisabled(true);
    this.PO.reset();
    this.PO.setDisabled(true);
    /*
    *    If check from companypreferences  "Map taxes at product level" is true then by default "Include Product Tax" field will be Yes
    * 
    */
    if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
        this.includeProTax.setValue(true);
        this.applyTaxToTermsChkHideShow(true);
        this.showGridTax(null,null,false);
    } else{
        this.includeProTax.setValue(false);
        this.applyTaxToTermsChkHideShow(false);
        this.showGridTax(null,null,true);
    }
    this.includeProTax.enable();
    this.Grid.getStore().removeAll();
    this.Grid.addBlankRow();
},
changeTemplateSymbol:function(){
    // check wheather exchange rate is set for currency on selected date while retaining exchange rate.
    if (this.exchangeRateInRetainCase) {
        if (this.Currency.getValue() != "" && WtfGlobal.searchRecord(this.currencyStore, this.Currency.getValue(), "currencyid") == null) {
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Pleasesetthecurrencyrate") + " " + WtfGlobal.getLocaleText("acc.field.fortheselecteddate") + "<b>" + WtfGlobal.convertToGenericDate(this.val) + "</b>"], 0);
            this.exchangeRateInRetainCase = false;
            this.billDate.setValue("");
        }
        return;
    }
    if(this.loadCurrFlag && Wtf.account.companyAccountPref.currencyid && !this.isEdit){
        this.Currency.setValue(Wtf.account.companyAccountPref.currencyid);
        this.loadCurrFlag = false;
    }
        
    if(this.currencyStore.getCount()==0){
        callCurrencyExchangeWindow();
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.invoice.msg3")+" <b>"+WtfGlobal.convertToGenericDate(this.val)+"</b>"], 0);
        this.billDate.setValue("");
    } else
        this.updateFormCurrency();
},
updateFormCurrency:function(){
    //       this.applyCurrencySymbol();
    //       var calTermTotal = WtfGlobal.addCurrencySymbolOnly(this.findTermsTotal(),this.symbol);
    //       this.tplSummary.overwrite(this.southCalTemp.body,{subtotal:WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol),discount:WtfGlobal.addCurrencySymbolOnly(this.getDiscount(),this.symbol),totalamount:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount(),this.symbol),tax:WtfGlobal.addCurrencySymbolOnly(this.caltax(),this.symbol),termtotal:calTermTotal,aftertaxamt:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount()+this.caltax()+this.findTermsTotal(),this.symbol),totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol()),amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol())});
    //        this.tplSummary.overwrite(this.southCalTemp.body,{
    //            subtotal:WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol),
    //            tax:(this.moduleid == 28 || this.moduleid ==27) ? WtfGlobal.addCurrencySymbolOnly(this.Grid.calLineLevelTaxNew(),this.symbol) : WtfGlobal.addCurrencySymbolOnly(this.Grid.calTaxtotal(),this.symbol),
    //            aftertaxamt:(this.moduleid == 28 || this.moduleid ==27) ? WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calLineLevelTaxNew(),this.symbol):WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calTaxtotal(),this.symbol)
    //        });
    this.updateSubtotal();
    /**
         * Update India Terms as Tax Summary after change currency from Currency combo
         */
    if (Wtf.account.companyAccountPref.isLineLevelTermFlag) {
        updateTermDetails(this.Grid);
    }
//        this.tplSummary.overwrite(this.southCalTemp.body,{
//            subtotal:WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol),
//            tax:(this.moduleid == 28 || this.moduleid ==27) ? WtfGlobal.addCurrencySymbolOnly(this.Grid.calLineLevelTaxNew(),this.symbol) : WtfGlobal.addCurrencySymbolOnly(this.Grid.calTaxtotal(),this.symbol),
//            aftertaxamt:(this.moduleid == 28 || this.moduleid ==27) ? WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calLineLevelTaxNew(),this.symbol):WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calTaxtotal(),this.symbol)
//        });

},    
getCurrencySymbol:function(){
    var index=null;
    //        this.currencyStore.clearFilter(true); //ERP-9962
    var recordCurrencyid=this.record !=null?this.record.data.currencyid:"";//    ERP-10464
    var FIND = this.Currency.getValue()!=""?this.Currency.getValue():recordCurrencyid;//this.Currency.getValue();
    if(FIND == "" || FIND == undefined || FIND == null) {
        FIND = WtfGlobal.getCurrencyID();
    }
    index=this.currencyStore.findBy( function(rec){
        var parentname=rec.data['currencyid'];
        if(parentname == FIND)
            return true;
        else
            return false
    })
    this.currencyid=this.Currency.getValue();
    return index;
},
calTotalAmountInBase:function(){
    var subtotal=this.Grid.calSubtotalInBase(); 
    var taxVal = this.calAmountInBase(this.caltax()+this.addTermAmountInTax());
    var nontaxableamount = this.calAmountInBase(this.calCulateNonTaxableTermAmount());
    var returnValInOriginalCurr = subtotal + this.findTermsTotalInBase()+taxVal + nontaxableamount; //-discount;
    returnValInOriginalCurr = getRoundedAmountValue(returnValInOriginalCurr);
    return returnValInOriginalCurr; 
},
findTermsTotalInBase : function() {
    var termTotal = 0;
    if(this.termgrid) {
        var store = this.termgrid.store;
        var totalCnt = store.getCount();
        for(var cnt=0; cnt<totalCnt; cnt++) {
            var lineAmt = store.getAt(cnt).data.termamount;
            if(typeof lineAmt=='number'){
                var termVal = getRoundedAmountValue(lineAmt);
                termTotal += this.calAmountInBase(termVal);
            } 
        }
    }
    
    /*
    * In case of "Inclusive of Tax" Term Amount is considered as Including Tax.
    * So in case of Including GST we are calculating term amount as below,
    * Total Term Amount minus Total tax calculate on term amount.
    */
    if(this.includingGST && this.includingGST.getValue()){
        termTotal = termTotal - this.calAmountInBase(this.addTermAmountInTax());
    }
    return getRoundedAmountValue(termTotal);
},
calAmountInBase:function(val){
    var returnVal = getRoundedAmountValue(val*this.getExchangeRate());
    return returnVal; 
}, 
getExchangeRate:function(){
    var index=this.getCurrencySymbol();
    var rate=this.externalcurrencyrate;
    var revExchangeRate = 0;
    if(index>=0){
        var exchangeRate = this.currencyStore.getAt(index).data['exchangerate'];
        if(this.externalcurrencyrate>0) {
            exchangeRate = this.externalcurrencyrate;
        }
        revExchangeRate = 1/(exchangeRate);
        revExchangeRate = (Math.round(revExchangeRate*Wtf.Round_Off_Number))/Wtf.Round_Off_Number;
    }
    return revExchangeRate;
}, 
applyTemplate:function(store,index){
    var editable=this.Currency.getValue()!=WtfGlobal.getCurrencyID()&&this.Currency.getValue()!=""//&&!this.isOrder;
    var exchangeRate = store.getAt(index).data['exchangerate'];
    if(this.externalcurrencyrate>0) {
        exchangeRate = this.externalcurrencyrate;
    } else if(this.isEdit && this.record.data.externalcurrencyrate && !(this.custdatechange || this.currencychanged)){
        var externalCurrencyRate = this.record.data.externalcurrencyrate-0;//??[PS]
        if(externalCurrencyRate>0){
            exchangeRate = externalCurrencyRate;
        }
    }
    this.externalcurrencyrate = exchangeRate;
    var revExchangeRate = 1/(exchangeRate-0);
    if(this.exchangeratetype!=undefined&&this.exchangeratetype=="foreigntobase"&&this.revexternalcurrencyrate!=undefined&&this.revexternalcurrencyrate!=0)
    {
        revExchangeRate=this.revexternalcurrencyrate
        this.revexternalcurrencyrate=0;
    }
    revExchangeRate = (Math.round(revExchangeRate*Wtf.Round_Off_Number))/Wtf.Round_Off_Number;
        this.southCenterTplSummary.overwrite(this.southCenterTpl.body,{foreigncurrency:store.getAt(index).data['currencyname'],exchangerate:exchangeRate,basecurrency:WtfGlobal.getCurrencyName(),editable:editable,revexchangerate:revExchangeRate         
    });
},

applyCurrencySymbol:function() {
    var index = this.getCurrencySymbol();
    var rate = this.externalcurrencyrate;
    if(index >= 0){
        rate = (rate == "" ? this.currencyStore.getAt(index).data.exchangerate : rate);
        this.symbol =  this.currencyStore.getAt(index).data.symbol;
        this.Grid.setCurrencyid(this.currencyid,rate,this.symbol,index);
        this.applyTemplate(this.currencyStore,index);
    }
    var calTermTotal = WtfGlobal.addCurrencySymbolOnly(this.findTermsTotal(),this.symbol);  
    var amountbeforetax = WtfGlobal.addCurrencySymbolOnly((this.Grid.calSubtotal()+this.findTermsTotal()),this.symbol);  
    if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
        this.tplSummary.overwrite(this.southCalTemp.body,{
            subtotal:Wtf.UpriceAndAmountDisplayValue,
            tax:Wtf.UpriceAndAmountDisplayValue,
            nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
            termtotal:Wtf.UpriceAndAmountDisplayValue,
            amountbeforetax:Wtf.UpriceAndAmountDisplayValue,
            aftertaxamt:Wtf.UpriceAndAmountDisplayValue,
            totalAmtInBase:Wtf.UpriceAndAmountDisplayValue,
            amountdue:Wtf.UpriceAndAmountDisplayValue
        }); 
    } else{
        this.tplSummary.overwrite(this.southCalTemp.body,{
            subtotal:WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol),
            tax:(this.moduleid == 28 || this.moduleid ==27)? WtfGlobal.addCurrencySymbolOnly(this.Grid.calLineLevelTaxNew(),this.symbol) : WtfGlobal.addCurrencySymbolOnly(this.Grid.calTaxtotal(),this.symbol),
            nontaxableamount: WtfGlobal.addCurrencySymbolOnly(this.calCulateNonTaxableTermAmount(),this.symbol),
            termtotal:calTermTotal,
            amountbeforetax:amountbeforetax,
            aftertaxamt:(this.moduleid == 28 || this.moduleid ==27) ? WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calLineLevelTaxNew()+this.findTermsTotal()+this.calCulateNonTaxableTermAmount(),this.symbol):WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calTaxtotal()+this.calCulateNonTaxableTermAmount(),this.symbol),
            totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol()),
            amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol())
        });
    }
    return this.symbol;
},
callGSTCurrencyRateandUpdateSubtotal:function(a,val){
    if(WtfGlobal.singaporecountry()&&WtfGlobal.getCurrencyID()!=Wtf.Currency.SGD&&this.isInvoice && this.Grid.forCurrency!=Wtf.Currency.SGD){
        callGstCurrencyRateWin(this.id,"SGD ",undefined,this.gstCurrencyRate);
    }
    this.updateSubtotal(a,val);
},
updateSubtotal: function(a,val) {
    this.applyCurrencySymbol();
    if(this.roundingAdjustmentFlag){
        var summaryAmtArray = this.getSummaryDetailAmountArray();
        var subTotalAmt = summaryAmtArray[0];
        var taxValue = summaryAmtArray[1];
        var nonTaxableAmt = summaryAmtArray[2];
        var termTotalAmt = summaryAmtArray[3];
        var tdsAmt = summaryAmtArray[4];
        var discountAmt = summaryAmtArray[5];
        var totalAmount = summaryAmtArray[6];
        var changedToBeReturnedAmt = summaryAmtArray[7];
        var totalInBaseAmt = summaryAmtArray[8];
        var afterAddtaxamt = summaryAmtArray[9];
        var roundingAdjustmentAmount = summaryAmtArray[10];

        this.tplSummary.overwrite(this.southCalTemp.body,{
            subtotal:WtfGlobal.addCurrencySymbolOnly(subTotalAmt,this.symbol),
            tax:WtfGlobal.addCurrencySymbolOnly(taxValue,this.symbol),
            termtotal:WtfGlobal.addCurrencySymbolOnly(termTotalAmt,this.symbol),
            amountbeforetax:WtfGlobal.addCurrencySymbolOnly((subTotalAmt+termTotalAmt),this.symbol),
            nontaxableamount: WtfGlobal.addCurrencySymbolOnly(nonTaxableAmt,this.symbol),
            aftertaxamt:WtfGlobal.addCurrencySymbolOnly(afterAddtaxamt,this.symbol),
            roundingAdjustmentAmount:WtfGlobal.addCurrencySymbolOnly(roundingAdjustmentAmount,this.symbol),
            totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(totalInBaseAmt,this.symbol),
            amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol())
        });
    }else{
        var aftertaxamt=0.00;
        var tax=0.00;
        var taxAndSubtotal=this.Grid.calLineLevelTax();
        /**
        * For  GST terms tax then Elese condition used to clculated taxe and show in summary
        */
        if(this.includeProTax.getValue() && !(WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied())){
            if (this.record && this.record.json && this.record.json.isTaxRowLvlAndFromTaxGlobalLvl) {
                tax = (this.moduleid == 28 || this.moduleid ==27)? WtfGlobal.addCurrencySymbolOnly(this.Grid.calLineLevelTaxNew(),this.symbol) : WtfGlobal.addCurrencySymbolOnly(this.Grid.calTaxtotal(),this.symbol);
                aftertaxamt = (this.moduleid == 28 || this.moduleid ==27) ? WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calLineLevelTaxNew()+this.findTermsTotal(),this.symbol):WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calTaxtotal(),this.symbol);
            } else {
                var invoicetertax=0;
                if(this.includeProTax.getValue() && this.applyTaxToTermsChk.getValue()){
                    invoicetertax = this.addTermAmountInTax();
                }
                tax = taxAndSubtotal[1]+invoicetertax;
                tax=WtfGlobal.addCurrencySymbolOnly(tax,this.symbol);

                aftertaxamt=WtfGlobal.addCurrencySymbolOnly(taxAndSubtotal[0]+this.findTermsTotal()+invoicetertax,this.symbol)
            }
        }else {
            aftertaxamt=WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal() + this.caltax()+this.addTermAmountInTax()+this.findTermsTotal()+ this.calCulateNonTaxableTermAmount(),this.symbol)
            tax=WtfGlobal.addCurrencySymbolOnly(this.caltax()+this.addTermAmountInTax(),this.symbol);
        } 
        var calTermTotal = WtfGlobal.addCurrencySymbolOnly(this.findTermsTotal(),this.symbol); 
        var amountbeforetax = WtfGlobal.addCurrencySymbolOnly((this.Grid.calSubtotal()+this.findTermsTotal()),this.symbol); 
        if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:Wtf.UpriceAndAmountDisplayValue,
                tax:Wtf.UpriceAndAmountDisplayValue,
                nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
                termtotal:Wtf.UpriceAndAmountDisplayValue,
                amountbeforetax:Wtf.UpriceAndAmountDisplayValue,
                aftertaxamt:Wtf.UpriceAndAmountDisplayValue,
                totalAmtInBase:Wtf.UpriceAndAmountDisplayValue,
                amountdue:Wtf.UpriceAndAmountDisplayValue
            });
        }else { 
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol),
                tax:tax,
                nontaxableamount: WtfGlobal.addCurrencySymbolOnly(this.calCulateNonTaxableTermAmount(),this.symbol),
                termtotal:calTermTotal,
                amountbeforetax:amountbeforetax,
                aftertaxamt:aftertaxamt,
                roundingAdjustmentAmount:WtfGlobal.currencyRenderer(0),
                totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol()),
                amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol())
            });
        }    
    }//end of else
    if(this.moduleid == Wtf.Acc_Delivery_Order_ModuleId && Wtf.account.companyAccountPref.calculateproductweightmeasurment){
        this.updateProductTotalWeightTemplate();
    }
},
getSummaryDetailAmountArray:function(){
    var subtotal= 0;
    var taxValue = 0;
    var nonTaxableAmt= 0;
    var termTotalAmt=0;
    var tdsAmt = 0;
    var discountAmt = 0;
    var totalAmount = 0;
    var changedToBeReturnedAmt = 0;
    var totalAmountAftertax=0;
    var roundedTotalAmountAftertax =0;
    var totalInBaseAmt=0;
    var roundingAdjustmentAmount=0;
    
    if((this.isEdit && !this.copyInv) || this.readOnly){// For Edit and View Mode if rounding not applied it will not show rounding adjustment
        if((!Wtf.isEmpty(this.record)&&this.record!=null)){
            this.applyRoundingAdjustmentToDocument = this.record.data.isRoundingAdjustmentApplied;
        }
    } else if(this.PO && this.PO.getValue()!=""){//New or Copy case with Linking Document
        // We check if there is any document linked to current document has rounding or not. 
        // If multiple document then current document working will be depend upon the company setting only.
        var poRecord = this.PO.getValue().split(",");
        var applyRounding =false;
        for(var cnt=0;cnt<poRecord.length;cnt++){
            var foundPORecord= WtfGlobal.searchRecord(this.POStore,poRecord[cnt],"billid");
            if(!Wtf.isEmpty(foundPORecord) && foundPORecord!=null && foundPORecord.data.isRoundingAdjustmentApplied){
                applyRounding =true;
                break;
            }
        }
        this.applyRoundingAdjustmentToDocument = applyRounding; 
        
    } else{//new or copy case without linking
        this.applyRoundingAdjustmentToDocument = this.roundingAdjustmentFlag;
    }
    
    var taxAndSubtotal=this.Grid.calLineLevelTax();
    nonTaxableAmt =  this.calCulateNonTaxableTermAmount();
    termTotalAmt= this.findTermsTotal();
//    tdsAmt =  this.calculateTDSAmount();
    totalAmount = this.calTotalAmount();
    
    /**
     * for INDIA and US GST else condition used to calcualte tax and subtotal
     * and for non INDIA and US GST both condition used depend on "includeProTax"
     */
    if(this.includeProTax.getValue() && Wtf.account.companyAccountPref.isLineLevelTermFlag==0){
        subtotal=taxAndSubtotal[0]-taxAndSubtotal[1];
//        taxValue = taxAndSubtotal[1];
    }else{
        subtotal=this.Grid.calSubtotal();
//        taxValue = this.caltax();
    }
    
     /**
     * For  GST terms tax then Elese condition used to clculated taxe and show in summary
     */
    //WtfGlobal.isIndiaCountryAndGSTApplied() && WtfGlobal.isUSCountryAndGSTApplied() means Wtf.account.companyAccountPref.isLineLevelTermFlag=1
    if(this.includeProTax.getValue() && Wtf.account.companyAccountPref.isLineLevelTermFlag==0){
        if (this.record && this.record.json && this.record.json.isTaxRowLvlAndFromTaxGlobalLvl) {
            taxValue = (this.moduleid == 28 || this.moduleid ==27)? this.Grid.calLineLevelTaxNew(): this.Grid.calTaxtotal();
            totalAmountAftertax = (this.moduleid == 28 || this.moduleid ==27) ? this.Grid.calSubtotal()+this.Grid.calLineLevelTaxNew()+termTotalAmt:this.Grid.calSubtotal()+this.Grid.calTaxtotal();
        } else {
            var invoicetertax=0;
            if(this.includeProTax.getValue() && this.applyTaxToTermsChk.getValue()){
                invoicetertax = this.addTermAmountInTax();
            }
            taxValue = taxAndSubtotal[1]+invoicetertax;
            totalAmountAftertax=taxAndSubtotal[0]+termTotalAmt+invoicetertax
        }
    }else {
        totalAmountAftertax=subtotal + this.caltax()+this.addTermAmountInTax()+termTotalAmt+ nonTaxableAmt;
        taxValue=this.caltax()+this.addTermAmountInTax();
    }
    
    if(this.applyRoundingAdjustmentToDocument){
        roundedTotalAmountAftertax = Math.round(totalAmountAftertax);
        totalInBaseAmt = getRoundedAmountValue(roundedTotalAmountAftertax*this.getExchangeRate());
        roundingAdjustmentAmount = roundedTotalAmountAftertax - totalAmountAftertax; 
    } else{
        roundedTotalAmountAftertax = totalAmountAftertax;
        totalInBaseAmt = getRoundedAmountValue(totalAmountAftertax*this.getExchangeRate());
        roundingAdjustmentAmount = 0;
    }
    var summaryAmtArray = [subtotal,taxValue,nonTaxableAmt,termTotalAmt,tdsAmt,discountAmt,totalAmount,changedToBeReturnedAmt,totalInBaseAmt,roundedTotalAmountAftertax,roundingAdjustmentAmount]; 
    return summaryAmtArray;
},
   
/*Below method updateProductTotalWeightTemplate is used for updating products Total weight in Templte*/
updateProductTotalWeightTemplate : function(){
    var totalProductsWeight = 0;
    var totalProductsWeightwithPackaging = 0;
    var totalProductsVolume = 0;
    var totalProductsVolumeWithPackaging = 0;
    for(var i=0;i<this.Grid.getStore().getCount();i++){
        var rowRecord=this.Grid.getStore().getAt(i);
        if(rowRecord){
            var prdWtPeruom=rowRecord.data.productweightperstockuom;
            var prdPackagingWtPeruom=rowRecord.data.productweightincludingpakagingperstockuom;
            var prodVolumePerUOM=rowRecord.data.productvolumeperstockuom;
            var prodVolumeWithPackaging=rowRecord.data.productvolumeincludingpakagingperstockuom;
            var baseQuantity=rowRecord.data.baseuomquantity;
            if(baseQuantity){
                if(prdWtPeruom){
                    totalProductsWeight +=prdWtPeruom*baseQuantity;
                }
                if(prdPackagingWtPeruom){
                    totalProductsWeightwithPackaging +=prdPackagingWtPeruom*baseQuantity;
                }
                if(prodVolumePerUOM){
                    totalProductsVolume +=prodVolumePerUOM*baseQuantity;
                }
                if(prodVolumeWithPackaging){
                    totalProductsVolumeWithPackaging +=prodVolumeWithPackaging*baseQuantity;
                }
            }
        }
    }
    this.productWeightDetailsTplSummary.overwrite(this.productWeightDetailsTpl.body, {
        totalprdweight: parseFloat(totalProductsWeight).toFixed(3) + "  "+WtfGlobal.getLocaleText("acc.field.weighingunit"),
        totalprdweightwithpack: parseFloat(totalProductsWeightwithPackaging).toFixed(3) + "  "+WtfGlobal.getLocaleText("acc.field.weighingunit"),
        totalprdvolume: parseFloat(totalProductsVolume).toFixed(3) + "  Cubic",
        totalprdvolumewithpack: parseFloat(totalProductsVolumeWithPackaging).toFixed(3) + "  Cubic"
    });
},
    
caltax:function(){
//    var totalamount=this.calTotalAmount();
    var rec= this.Grid.taxStore.getAt(this.Grid.taxStore.find('prtaxid',this.Tax.getValue()));
//    var totalterm = 0;
//    if (rec != null && rec.data.prtaxid != "None") {
//        for (var i = 0; i < this.termStore.getCount(); i++) {
//            var recdata = this.termStore.getAt(i).data; //  var recdata = obj.record.data;
//            var store = this.termStore;
//            var subtotal = this.calProdSubtotalWithoutDiscount();
//            var formula = recdata.formulaids.split(",");
//            var termtotal = 0;
//            var terms = rec.data.termid;
//            terms = terms.split(",");
//            terms = "[" + terms.join(',') + "]";
//            if (terms.indexOf(recdata.id)!=-1) {
//                for (var cnt = 0; cnt < formula.length; cnt++) {
//                    if (formula[cnt] == 'Basic') {
//                        termtotal += (subtotal);
//                    }
//                    var record = store.queryBy(function (record) {
//                        return (record.get('id') == formula[cnt]);
//                    }, this).items[0];
//                    if (record && (typeof record.data.termamount == 'number')) {
//                        //                termtotal +=(record.data.termamount*(record.data.sign==1 ? 1 : -1 ));
//                        termtotal += (record.data.termamount);
//                    }
//                }
//                var this_termTotal = 0;
//                if (typeof (recdata.termpercentage) != "string" && parseInt(recdata.termpercentage) >= 0) {
//                    var opmod = recdata.sign == 0 ? -1 : 1;
//                    this_termTotal = ((Math.abs(termtotal) * recdata.termpercentage * 1) / 100) * opmod;
//                }
//                else if (typeof (recdata.termamount) != "string") {     // for term charges 
//                    parseInt(recdata.termamount)
//                    this_termTotal = recdata.termamount;
//                }
//                totalterm = totalterm + this_termTotal;
//            }
//        }
//    }
    var taxamount=0;
    var totalamount=0;
    if(this.isTaxable != undefined && this.isTaxable.getValue()){
        totalamount=getRoundedAmountValue(this.calTotalAmount());
        if (rec != null && rec.data.prtaxid != "None"){
            taxamount = ((totalamount)*rec.data["percent"])/100;
        }
//        taxamount += this.addTermAmountInTax();
    }
//    if(this.includeProTax.getValue()){
//        if(this.includeProTax.getValue() && this.applyTaxToTermsChk.getValue()){
//            taxamount += this.addTermAmountInTax();
//        }
//    }
    //        var taxamount=(rec==null?0:(totalamount*rec.data["percent"])/100);
    if(Wtf.account.companyAccountPref.isLineLevelTermFlag==1){   // Term Amount of line item showing as tax in  Indian Company.
        var taxamount=0;
        var store = this.Grid.store;
        var totalCnt = store.getCount();
        for(var cnt=0; cnt<totalCnt; cnt++) {
            var lineAmt = store.getAt(cnt).data.recTermAmount;
            if(typeof lineAmt=='number')
                taxamount += getRoundedAmountValue(lineAmt);
        }
    }
    return getRoundedAmountValue(taxamount);
},
addTermAmountInTax: function () {
        var taxamount = 0;
//        var termAmountMapping = {};
//        if (this.applyTaxToTermsChk.getValue() &&this.includeProTax && this.includeProTax.getValue() == true) {
//            for (var i = 0; i < this.termStore.getCount(); i++) {
//                var recdata = this.termStore.getAt(i).data;
//                if (typeof recdata.termamount == 'number' && (recdata.termamount != 0 || recdata.termamount != 0)) {
//                    termAmountMapping[recdata.id] = recdata.termamount;
//                }
//            }
//
//            var store = this.Grid.store;
//            var totalCnt = store.getCount();
//            var lineleveltaxtermamount = 0;
//            var alreadyCalucalatedTaxIds = '';
//            for (var cnt = 0; cnt < totalCnt; cnt++) {
//                var productRec1 = store.getAt(cnt);
//                var productRec = productRec1.data;
//                var productTaxId = productRec.prtaxid;
//                if (productTaxId) {
//                    if (Object.keys(termAmountMapping).length > 0 && alreadyCalucalatedTaxIds.indexOf(productTaxId) == -1) {
//                        alreadyCalucalatedTaxIds += productTaxId + ",";
//                        var productTaxRec = this.Grid.taxStore.getAt(this.Grid.taxStore.find('prtaxid', productTaxId));
//                        if (productTaxRec && productTaxRec.data.termid) {
//                            var productTaxTermIds = productTaxRec.data.termid.split(',');
//                            var productTaxTermIdsAmount = 0;
//                            for (var productTaxTermIds_cnt = 0; productTaxTermIds_cnt < productTaxTermIds.length; productTaxTermIds_cnt++) {
//                                var productTaxTermId = productTaxTermIds[productTaxTermIds_cnt];
//                                if (termAmountMapping[productTaxTermId]) {
//                                    productTaxTermIdsAmount += termAmountMapping[productTaxTermId];
//                                }
//                            }
//                            var individualtaxAmount = ((productTaxTermIdsAmount) * productTaxRec.data.percent / 100);
//                            lineleveltaxtermamount += individualtaxAmount;
//                            productRec1.set('lineleveltaxtermamount',individualtaxAmount);
//                        }
//                    }
//                }
//                if (lineleveltaxtermamount == 0) {
//                    productRec1.set('lineleveltaxtermamount', lineleveltaxtermamount);
//                }
//            }
//            taxamount += lineleveltaxtermamount;
//        }
        
        for (var term = 0; term < this.termStore.getCount(); term++) {
            var termRec = this.termStore.getAt(term);
            var termData = this.termStore.getAt(term).data;
            if (typeof termData.termamount == 'number') {
                var individualTermTaxAmount = 0;
                if (this.includingGST && this.includingGST.getValue()) {
                    /*
                    * Reverse calculate tax in case of Including GST
                    */
                    individualTermTaxAmount = getRoundedAmountValue((termData.termamount) * termData.linkedtaxpercentage / (100 + termData.linkedtaxpercentage));
                    termRec.set('termAmountExcludingTax',getRoundedAmountValue(termData.termamount - individualTermTaxAmount));
                    termRec.set('termAmountExcludingTaxInBase',getRoundedAmountValue((termData.termamount - individualTermTaxAmount) * this.getExchangeRate()));
                } else {
                    individualTermTaxAmount = getRoundedAmountValue((termData.termamount) * termData.linkedtaxpercentage / 100);
                    termRec.set('termAmountExcludingTax',getRoundedAmountValue(termData.termamount));
                    termRec.set('termAmountExcludingTaxInBase',getRoundedAmountValue(termData.termamount * this.getExchangeRate()));
                }
                taxamount += individualTermTaxAmount;
                termRec.set('termamountinbase',getRoundedAmountValue(termData.termamount * this.getExchangeRate()));
                termRec.set('termtaxamount',individualTermTaxAmount);
                termRec.set('termtaxamountinbase',getRoundedAmountValue(individualTermTaxAmount * this.getExchangeRate()));
            }
        }

        return taxamount;
    },
    
    addTermAmountInTaxForMALAYSIA: function(){
        var taxamount = 0;
        for (var i = 0; i < this.termStore.getCount(); i++) {
            var termRec = this.termStore.getAt(i);
            var termData = this.termStore.getAt(i).data;
            var indexes=[];
            if (typeof termData.termamount == 'number' && (termData.termamount != 0)) {
                this.Grid.taxStore.each(function(rec){
                    var termids=rec.data.termid != undefined ? rec.data.termid.split(',') : '';
                    for (var termIds_cnt = 0; termIds_cnt < termids.length; termIds_cnt++) {
                        if(termids[termIds_cnt]==termData.id){
                            indexes.push(rec);
                        }
                    }
                });
                if(indexes.length == 1){
                    var individualTermTaxAmount = ((termData.termamount) * indexes[0].data.percent / 100);
                    taxamount += individualTermTaxAmount;
                    termRec.set('termtaxamount',individualTermTaxAmount);
                    termRec.set('termtaxamountinbase',getRoundedAmountValue(individualTermTaxAmount*this.getExchangeRate()));
                    termRec.set('termtax',indexes[0].data.prtaxid);
                }
                if(indexes.length > 1){
                    var store = this.Grid.store;
                    var lineLevelTotalCnt = store.getCount();
                    var alreadyCalucalatedTaxIds = '';
                    var isTermTaxAvailAtLineLevel = 0;
                    var index;
                    for (var termTax_cnt = 0; termTax_cnt < indexes.length; termTax_cnt++) {
                        for (var cnt = 0; cnt < lineLevelTotalCnt; cnt++) {
                            var productRec = store.getAt(cnt);
                            var productData = productRec.data;
                            var productTaxId = productData.prtaxid;
                            if (productTaxId && (indexes[termTax_cnt].data.prtaxid === productTaxId) && alreadyCalucalatedTaxIds.indexOf(productTaxId) == -1) {
                                alreadyCalucalatedTaxIds += productTaxId + "," ;
                                isTermTaxAvailAtLineLevel++;
                                index = termTax_cnt;
            }
        }
                    }
                    if(isTermTaxAvailAtLineLevel==1){
                        var individualTermTaxAmt = ((termData.termamount) * indexes[index].data.percent / 100);
                        taxamount += individualTermTaxAmt;
                        termRec.set('termtaxamount',individualTermTaxAmt);
                        termRec.set('termtaxamountinbase',getRoundedAmountValue(individualTermTaxAmt*this.getExchangeRate()));
                        termRec.set('termtax',indexes[index].data.prtaxid);
                    }
                }
            }
        }
        return taxamount;
    },
    
calTotalAmount:function(){
    var subtotal=this.Grid.calSubtotal();
    //        var discount=this.getDiscount();
    //        return subtotal-discount + this.findTermsTotal();
    return subtotal;
},
resetCustomFields : function(){ // For reset Custom Fields, Check List and Custom Dimension
    var customFieldArray = this.tagsFieldset.customFieldArray;  // Reset Custom Fields
    for (var itemcnt = 0; itemcnt < customFieldArray.length; itemcnt++) {
        var fieldId = customFieldArray[itemcnt].id
        if (Wtf.getCmp(fieldId) != undefined && customFieldArray[itemcnt].getXType()!='fieldset') {
            Wtf.getCmp(fieldId).reset();
        }
    }
        
    var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray;  // Reset Check List
    for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
        var checkfieldId = checkListCheckBoxesArray[checkitemcnt].id
        if (Wtf.getCmp(checkfieldId) != undefined) {
            Wtf.getCmp(checkfieldId).reset();
        }
    }
        
    var customDimensionArray = this.tagsFieldset.dimensionFieldArray;  // Reset Custom Dimension
    for (var itemcnt1 = 0; itemcnt1 < customDimensionArray.length; itemcnt1++) {
        var fieldId1 = customDimensionArray[itemcnt1].id
        if (Wtf.getCmp(fieldId1) != undefined) {
            Wtf.getCmp(fieldId1).reset();
        }
    }
},
setTransactionNumber:function(isSelectNoFromCombo){
    if(this.isEdit && !this.copyInv)
        this.Number.setValue(this.record.data.billno);
    else{
        var format= this.isCustomer ? Wtf.account.companyAccountPref.autodo : Wtf.account.companyAccountPref.autogro;
        var temp2=this.isCustomer ? Wtf.autoNum.DeliveryOrder : Wtf.autoNum.GoodsReceiptOrder;
    }
    if(isSelectNoFromCombo){
        this.fromnumber = temp2;
    } else if(format&&format.length>0){
        WtfGlobal.fetchAutoNumber(temp2, function(resp){
            if(this.isEdit)this.Number.setValue(resp.data)
                }, this);
    }
},   
   
initForClose:function(){
    this.cascade(function(comp){
        if(comp.isXType('field')){
            comp.on('change', function(){
                this.isClosable=false;
            },this);
        }
    },this);
},
    
setNextNumber:function(){
    if(this.sequenceFormatStore.getCount()>0){
        if(this.isEdit || this.copyInv){
            var sequenceformatid=(this.record && this.record.data && this.record.data.sequenceformatid)?this.record.data.sequenceformatid:"";
            if(sequenceformatid=="" || sequenceformatid==undefined){
                this.sequenceFormatCombobox.setValue("NA"); 
                if(!this.copyInv){
                    this.sequenceFormatCombobox.disable();
                }
                if(this.readOnly!=undefined && !this.readOnly){
                    this.Number.enable();
                }
                if(this.copyInv){//for copy NA enable disable number field
                    this.getNextSequenceNumber(this.sequenceFormatCombobox);
                }
                
            } else{
                var index=this.sequenceFormatStore.find('id',sequenceformatid);
                if(index!=-1){
                    this.sequenceFormatCombobox.setValue(sequenceformatid);                                               
                    if(!this.copyInv){//edit case
                        this.sequenceFormatCombobox.disable();
                        this.Number.disable(); 
                    }else {//copy case if sequenceformatid present then hide number field
                        // this.Number.setValue(sequenceformatid);
                        this.Number.disable();
                        WtfGlobal.hideFormElement(this.Number);
                        this.getNextSequenceNumber(this.sequenceFormatCombobox);
                    }
                }else{  //sequence format get deleted then NA is set
                    this.sequenceFormatCombobox.setValue("NA");  
                    if(!this.copyInv){ // In Edit case only disable the sequence format combo.
                        this.sequenceFormatCombobox.disable();
                    }
                    if (this.copyInv) {//copy case show number field 
                        if(sequenceformatid!="" && sequenceformatid!=null && sequenceformatid!=undefined){
                            if (this.sequenceFormatStore.getCount() > 1) {
                                var count = this.sequenceFormatStore.getCount();
                                for (var i = 0; i < count; i++) {
                                    var seqRec = this.sequenceFormatStore.getAt(i)
                                    if (seqRec.json.isdefaultformat == "Yes") {
                                        this.sequenceFormatCombobox.setValue(seqRec.data.id)
                                        break;
                                    }
                                }
                            }
                            this.getNextSequenceNumber(this.sequenceFormatCombobox);
                        }
                    }
                }    
                        
            }
        }else{
            var count=this.sequenceFormatStore.getCount();
            for(var i=0;i<count;i++){
                var seqRec=this.sequenceFormatStore.getAt(i);
                if(seqRec.json.isdefaultformat=="Yes"){
                    this.sequenceFormatCombobox.setValue(seqRec.data.id);
                    break;
                }
            }
            if(this.sequenceFormatCombobox.getValue()!=""){
                this.getNextSequenceNumber(this.sequenceFormatCombobox);
            } else{
                this.Number.setValue("");
                WtfGlobal.hideFormElement(this.Number); 
            }
        }                                 
    }
},
    
getNextSequenceNumber:function(a,val){
    if(!(a.getValue()=="NA")){
        WtfGlobal.hideFormElement(this.Number);
        this.setTransactionNumber(true);
        var rec=WtfGlobal.searchRecord(this.sequenceFormatStore, a.getValue(), 'id');
        var oldflag=rec!=null?rec.get('oldflag'):true;
        Wtf.Ajax.requestEx({
            url:"ACCCompanyPref/getNextAutoNumber.do",
            params:{
                from:this.fromnumber,
                sequenceformat:a.getValue(),
                oldflag:oldflag
            }
        }, this,function(resp){            
            if(resp.data=="NA"){
                WtfGlobal.showFormElement(this.Number);
                this.Number.reset();
                this.Number.enable();
            }else {
                this.Number.setValue(resp.data);
                //                this.Number.enable();
                this.Number.disable();
                WtfGlobal.hideFormElement(this.Number);
            }
            
        });
    }else {
        WtfGlobal.showFormElement(this.Number);
        this.Number.reset();
        this.Number.enable();
    }
},
    /*
    *Below Check Included for SDP-4676
    *User can't select one SO created without including GST and one SO created with Including GST options
    */
checkIncludeGStForLinkedTranscation:function(selectedValuesArr){
    var includeGstCount=0;
    var excludeGstCount=0;
    for(var cntGst=0;cntGst<selectedValuesArr.length;cntGst++){
       var rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cntGst]));
        if(rec.data["gstIncluded"]){
            includeGstCount++;
        }else if(!rec.data["gstIncluded"]){
            excludeGstCount++;
        }
    }
    if(!((selectedValuesArr.length==includeGstCount)||(selectedValuesArr.length==excludeGstCount))){
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.alert.includingGST")], 2);
        this.PO.clearValue();
        return ;
    }else{
        if(selectedValuesArr.length==includeGstCount){
            this.includeProTax.setValue(true);
            this.includingGST.setValue(true);
        }else if(selectedValuesArr.length==excludeGstCount){
            this.includeProTax.setValue(false);
            this.includingGST.setValue(false);
        }
    }
},

beforeSave:function(){
    this.Grid.getStore().each(function(rec){
        if(rec.data.dquantity!="" && rec.data.isAutoAssembly && rec.data.type == "Inventory Assembly"){
            Wtf.Ajax.requestEx({
                url: "ACCReports/getPriceCalculationForAsseblyProduct.do",
                params: {
                    productid: rec.data.productid,
                    buildquantity: rec.data.dquantity
                }
            }, this, function(res,req) {
                var bomValuationArray = [];
                for (var i=0; i<res.valuationArray.length; i++) {
                    var rowObject = new Object();
                    var bomRec = res.valuationArray[i];
                    rowObject['productid'] = bomRec.productid;
                    rowObject['buildcost'] = bomRec.buildcost;
                    bomValuationArray.push(rowObject);
                }
                rec.data.bomValuationArray = JSON.stringify(bomValuationArray);
            //                        this.save();  // SDP-1623
            },function(res,req){

                });
        }else{
        //                   this.save(); 
        }
    },this);
    this.save(); 
},
update: function() {
    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.savdat"),WtfGlobal.getLocaleText("acc.invoice.msg7"),function(btn){
        if(btn!="yes") {
            this.saveOnlyFlag=false;
            this.enableSaveButtons();
            return;
        }
        this.mailFlag = true;
        var incash = this.cash;
        var rec = this.NorthForm.getForm().getValues();
        rec.GTAApplicable = this.GTAApplicable.getValue();
        rec.EWAYApplicable = this.isEWayCheck.getValue();
        /**
         * Send value to back end on document save/Edit
         */
        rec.isMerchantExporter = this.isMerchantExporter.getValue();
        rec.taxid = this.Tax.getValue();
        this.ajxurl = "";
        if (this.businessPerson == "Customer") {
            this.ajxurl = "ACCInvoice/updateDeliveryOrder.do";
        } else {
            this.ajxurl = "ACCGoodsReceipt/updateGoodsReceiptOrder.do";
        }
        var detail = this.Grid.getProductDetails();
        rec.detail = detail;
        rec.billdate = WtfGlobal.convertToGenericDate(this.billDate.getValue());
        rec.creationdate = WtfGlobal.convertToGenericDate(this.billDate.getValue());
        rec.cntype = this.inputValue;
        var custFieldArr = this.tagsFieldset.createFieldValuesArray();
        rec.posttext = this.postText;
        if (custFieldArr.length > 0) {
            rec.customfield = JSON.stringify(custFieldArr);
        }

        rec.customerporefno = this.CustomerPORefNo.getValue();
        rec.shipdate = WtfGlobal.convertToGenericDate(this.shipDate.getValue());
        rec.doid = this.copyInv ? "" : this.billid;
        rec.mode = (this.isOrder ? 41 : 11);
        rec.incash = incash;
        rec.isfavourite = false;
        rec.statuscombo=this.DOStatusCombo.getValue();
        rec.posttext = this.postText;
        rec.isLinkedTransaction = this.isLinkedTransaction;
        rec.isEdit=this.isEdit;
        rec.GSTApplicable=this.isGST; // ERP-32829 
        rec.copyInv=this.copyInv;
        var isCopy = this.copyInv;
        var isEdit = this.isEdit;
        rec = WtfGlobal.getAddressRecordsForSave(rec, this.record, this.linkRecord, this.currentAddressDetailrec, this.isCustomer, this.singleLink, isEdit, isCopy, this.GENERATE_PO, this.GENERATE_SO, this.isQuotationFromPR);
        WtfGlobal.setAjaxTimeOut();
        Wtf.Ajax.requestEx({
            url: this.ajxurl,
            params: rec
        }, this, this.genSuccessResponse, this.genFailureResponse);
    },this);
},
save:function(){
    var incash=false;
    /*
     * ERP-39774 Total amount should not be negative
     * */
//    var amountTotal=this.Grid.calSubtotal() + this.caltax()+this.findTermsTotal()+ this.calCulateNonTaxableTermAmount();
//    if (amountTotal <= 0){
//        this.enableSaveButtons();
//        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.TotalamountshouldbegreaterthanZero")], 2);
//        return;
//    }
    this.PO.setValue(this.PO.getValue().trim());
    if (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId && this.WarnMessage) {
        /* check negative stock for SO/SI
             */
        if (Wtf.account.companyAccountPref.negativestock == 1 || Wtf.account.companyAccountPref.negativestock == 2) {
            if (!this.showNegativeStockWarnOrBlockMsg()) {
                return;
            }
        }
    }
    this.Number.setValue(this.Number.getValue().trim());
    //this.billTo.setValue(this.billTo.getValue().trim());
    var isValidCustomFields=this.tagsFieldset.checkMendatoryCombo();
    if(this.NorthForm.getForm().isValid() && isValidCustomFields){
        //            if(Wtf.account.companyAccountPref.invAccIntegration && Wtf.account.companyAccountPref.isUpdateInvLevel){
        //                var validstore=WtfGlobal.isValidInventoryInfo(this.Grid.getStore(),'invstore');
        //                if(!validstore){
        //                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.Pleaseselectvalidinventorystore")], 2);
        //                    return;
        //                }
        //                var validloc=WtfGlobal.isValidInventoryInfo(this.Grid.getStore(),'invlocation');
        //                if(!validloc){
        //                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.Pleaseselectvalidinventorylocation")], 2);
        //                    return;
        //                }
        //            }
        // Checking for deactivated products
            if (Wtf.account.companyAccountPref.pickpackship && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId && this.DOStatusCombo.getValue() == "") {
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.deliveryorder.pickisnotset")]);
                this.enableSaveButtons();
                return;
            }
            /*
             * Validate GST dimension values present or Not
             */
            if (WtfGlobal.isIndiaCountryAndGSTApplied() && Wtf.isShowAlertOnDimValueNotPresent.indexOf(parseInt(this.moduleid))> -1) {
                if (!isGSTDimensionValuePresent(this, this.Grid)) {
                    this.enableSaveButtons();
                    return false;
                }
                /**
                 * Show alert on Save document if GST details not presnet 
                 * ERP-39257
                 */
                if (!isGSTHistoryPresentOnDocumentCreation(this)) {
                    this.enableSaveButtons();
                    return false;
                 }
            }
            /**
             * Block Document creation if Eway related fileds are invalid
             * ERP-39530 - (ERM-1108)
             */
            if (WtfGlobal.isIndiaCountryAndGSTApplied() && (this.moduleid != undefined && this.moduleid != '' && Wtf.EwayUnitDimCustmFieldsActivatedModules.indexOf(parseInt(this.moduleid)) > -1)) {               
                if(this.isEWayCheck!=undefined && this.isEWayCheck.getValue()){
                    var ValidationOptArr = this.tagsFieldset.validateEwayRelatedFields(this);     
                        if(ValidationOptArr[0]==true){
                           this.enableSaveButtons();
                            return;
                        }
                }
                
            }
        var inValidProducts=this.checkForDeActivatedProductsAdded();
        if(inValidProducts!=''){
            inValidProducts = inValidProducts.substring(0, inValidProducts.length-2);
            Wtf.MessageBox.show({
                title: WtfGlobal.getLocaleText("acc.common.warning"), 
                msg: WtfGlobal.getLocaleText("acc.common.followingProductsAreDeactivated")+'</br>'+'<b>'+inValidProducts+'<b>',
                buttons: Wtf.MessageBox.OK,
                icon: Wtf.MessageBox.WARNING,
                scope: this,
                scopeObj :this,
                fn: function(btn){
                    if(btn=="ok"){
                        this.enableSaveButtons();
                        return;
                    }
                }
            });
            return;
        }
        
        this.removeBlankQtyOnlyFlag=false;
        /**
         *isAtLeastOneProductHavingNonZeroQty:purpose of this flag is check atleast one of the product is having non zero quantity. 
        */
        var  isAtLeastOneProductHavingNonZeroQty=false;
        /**
        *this method check the allow zero quantity functionality is activated
        * or nor in system preferences
        **/
        this.allowZeroQuantity = WtfGlobal.checkAllowZeroQuantityForProduct(this.moduleid);
        for(var i=0;i<this.Grid.getStore().getCount()-1;i++){// excluding last row
            var prodrec = this.Grid.getStore().getAt(i);
            var quantity=prodrec.data['quantity'];
            var deliverquantity=prodrec.data['dquantity'];
            if(quantity == '' || quantity == undefined || quantity<=0){
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.AQuantityforProduct")+" "+prodrec.data['productname']+" "+WtfGlobal.getLocaleText("acc.field.shouldbegreaterthanZero")], 2);
                this.enableSaveButtons();
                return;
            }
            /**
              * if  Amend fuctionalityuser has activated for that user and purchase should 
              * be greater that sales price,If not then system shows pop up msg.
              */
           if (this.isCustomer && Wtf.productPriceEditPerm.priceEditPerm.BlockAmendingPrice) {
                        var prodObj = {};
                        prodObj.originalValue=prodrec.data['rate'];
                       //ERP-40390
                       var includingGst=(this.includingGST!=undefined && this.includingGST.getValue())?true:false;
                        if(includingGst){
                            prodObj.originalValue=this.Grid.getStore().getAt(i).data['rateIncludingGst'];
                        }
                            if (this.Grid.getamendprice(prodrec,prodObj,includingGst,this.saveOnlyFlag==true?this.saveOnlyFlag:this.saveandcreateBtn)){
                                this.enableSaveButtons();
                                return;
                            }
                    }
            if(deliverquantity>0){
                 /**
                  *This flag is true when product is having greater than zero qty. 
                  */
                 isAtLeastOneProductHavingNonZeroQty=true;
            }
             if(deliverquantity===""){
                 /**
                  *This flag is true when product is having blank qty. 
                  */
                this.removeBlankQtyOnlyFlag=true;
            }
            /*
             * For free gift type transactions, unit price and delivered quantity will not be zero irrespective of the settings in company preferences.
             */
            if(this.isFreeGift && this.isFreeGift.getValue()){
                var rate = this.Grid.getStore().getAt(i).data['rate'];
                var quantity=this.Grid.getStore().getAt(i).data['dquantity'];
                if (!Wtf.account.companyAccountPref.unitPriceInDO || rate === "" || rate == undefined || rate <= 0 || quantity == '' || quantity == undefined || quantity<=0) {
                    var msg = WtfGlobal.getLocaleText("acc.malaysiangst.blockZeroRateForGreeGift");
                    if(!Wtf.account.companyAccountPref.unitPriceInDO){
                        msg += ' '+WtfGlobal.getLocaleText("acc.malaysiangst.displayUnitPriceinDO");
                    }
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg], 2);
                    this.enableSaveButtons();
                    return;
                }
            }
                
            if (this.isCustomer) {
                if (Wtf.account.companyAccountPref.unitPriceInDO && !Wtf.account.companyAccountPref.allowZeroUntiPriceForProduct) {
                    var rate = this.Grid.getStore().getAt(i).data['rate'];
                    if (rate === "" || rate == undefined || rate <= 0) {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.UnitPriceforProduct") + " " + this.Grid.getStore().getAt(i).data['productname'] + " " + WtfGlobal.getLocaleText("acc.field.shouldbegreaterthanZero")], 2);
                        this.enableSaveButtons();
                        return;
                    }
                }
            } else {
                if (Wtf.account.companyAccountPref.unitPriceInGR && !Wtf.account.companyAccountPref.allowZeroUntiPriceForProduct) {
                    var rate = this.Grid.getStore().getAt(i).data['rate'];
                    if (rate === "" || rate == undefined || rate <= 0) {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.UnitPriceforProduct") + " " + this.Grid.getStore().getAt(i).data['productname'] + " " + WtfGlobal.getLocaleText("acc.field.shouldbegreaterthanZero")], 2);
                        this.enableSaveButtons();
                        return;
                    }
                }
            }
             if((deliverquantity == '' && !this.allowZeroQuantity) || deliverquantity == undefined || (deliverquantity<=0 && !this.allowZeroQuantity)){
                /**
                 *method to remove product with zero or blank qty.
                 */
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.invoicelist.alertmsgforblankorzeroqty")+'</center>' ,function(btn){
                    var store= this.Grid.getStore();
                    var quantity;
                    if(btn=="yes") {
                        if(store!=undefined && store.getCount()>0){
                            for(var p=0;p<this.Grid.getStore().getCount()-1;p++){// excluding last row
                                quantity=this.Grid.getStore().getAt(p).data['dquantity'];
                                if((quantity==="" || quantity===0)){//For checking products with  blank or zero quantity 
                                    this.Grid.getStore().remove(this.Grid.getStore().getAt(p));
                                    p--;
                                }
                            }
                        }
                        this.enableSaveButtons();
                    }else{
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);
                        this.enableSaveButtons();
                    }
                },this);
                return;      
            }
           
            /**
             *method to remove the products with blank qty.
             */
            if(this.removeBlankQtyOnlyFlag && this.allowZeroQuantity){
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.invoicelist.alertmsgforblankqty")+'</center>' ,function(btn){
                    var store= this.Grid.getStore();
                    var quantity;
                    if(btn=="yes") {
                        if(store!=undefined && store.getCount()>0 ){
                            for(var p=0;p<this.Grid.getStore().getCount()-1;p++){// excluding last row
                                quantity=this.Grid.getStore().getAt(p).data['dquantity'];
                                if(quantity==="" ){//For checking products with  blank quantity 
                                    this.Grid.getStore().remove(this.Grid.getStore().getAt(p));
                                    p--;
                                }
                            }
                        }
                    }else{
                        /**
                         *if use clicks on no button then set the quantity to zero if product is having blank qty. 
                         */
                        if(store!=undefined && store.getCount()>0){
                            for(var p=0;p<this.Grid.getStore().getCount()-1;p++){// excluding last row
                                quantity=this.Grid.getStore().getAt(p).data['dquantity'];
                                if((quantity==="")){//For checking products with  blank quantity 
                                    this.Grid.getStore().getAt(p).set('dquantity',0);
//                                    p--;
                                }else if(quantity>0){
                                    /**
                                      *isAtLeastOneProductHavingNonZeroQty:purpose of this flag is check atleast one of the product is having non zero quantity. 
                                     */
                                    isAtLeastOneProductHavingNonZeroQty = true;
                                 }
                            }
                            /**
                               *this block used to restrict that transaction with zero qty for all products.
                               * i.e we cannot save document if all the products having zero quantity. 
                               */
                                if (this.allowZeroQuantity && !isAtLeastOneProductHavingNonZeroQty && Wtf.account.companyAccountPref.inventoryValuationType=="1") {//&& (prorec.data.type == 'assembly' || prorec.data.type == 'invpart' || prorec.data.type == 'customerAssembly' || prorec.data.type == 'customerInventory')
                                     WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);//You cannot make Transaction with Zero or Blank Quantity.
                                     this.enableSaveButtons();
                                     return ;
                         }
                        }
                        this.enableSaveButtons();
                        this.formValidationBeforeSave();
                    }
                },this);
                this.enableSaveButtons();
                return;
            }
            var isQAEnable = this.Grid.getStore().getAt(i).data['isQAEnable'];
            if (!isQAEnable) {
                this.isAllProductHavingQAApprovalFlow = false;
            }
        }
        /**
         *this block used to restrict that transaction with zero qty for all products.
         * i.e we cannot save document if all the products having zero quantity. 
         */
        if (this.allowZeroQuantity && !isAtLeastOneProductHavingNonZeroQty && Wtf.account.companyAccountPref.inventoryValuationType=="1") {//&& (prorec.data.type == 'assembly' || prorec.data.type == 'invpart' || prorec.data.type == 'customerAssembly' || prorec.data.type == 'customerInventory')
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);//You cannot make Transaction with Zero or Blank Quantity.
            this.enableSaveButtons();
            return ;
        }
        this.formValidationBeforeSave();
    }else{
        this.enableSaveButtons();
        this.WarnMessage=true;
        WtfComMsgBox(2, 2);
    } 
},
formValidationBeforeSave:function(){
var count=this.Grid.getStore().getCount();
        if(count<=1){
            WtfComMsgBox(33, 2);
            this.enableSaveButtons();
            return;
        }
        //            if(this.getDiscount()>this.Grid.calSubtotal()){  ***************** Check for delivered quantity greater than actual Quantity *********8
        //                WtfComMsgBox(12, 2);
        //                return;
        //            }
        incash=this.cash;
        var rec=this.NorthForm.getForm().getValues();
        rec.taxid=this.Tax.getValue();
        /*
         * In copy case, deactivated tax not shown.Hence, empty taxid set in record.          
         */                                    
         if (rec.taxid != '' && (this.copyInv || (this.fromPO != undefined && this.fromPO.getValue()))) {
                var taxActivatedRec = WtfGlobal.searchRecord(this.Grid.taxStore, this.Tax.getValue(), "prtaxid");
                if (taxActivatedRec == null || taxActivatedRec == undefined || taxActivatedRec == "") {
                    rec.taxid='';
                 }
           }
        rec.GTAApplicable=this.GTAApplicable.getValue();
        rec.EWAYApplicable = this.isEWayCheck.getValue();
        /**
         * Send value to back end on document save/Edit
         */
        rec.isMerchantExporter=this.isMerchantExporter.getValue();
        rec.isFreeGift = (this.isFreeGift)?this.isFreeGift.getValue():false;
        rec.isAllProductHavingQAApprovalFlow = this.isAllProductHavingQAApprovalFlow;
        rec.isRoundingAdjustmentApplied = this.applyRoundingAdjustmentToDocument;//Sending this variable from JS so that we can reduce calculation on java side and other stuff
        this.ajxurl = "";
        if(this.businessPerson=="Customer") {
            this.ajxurl = "ACCInvoice/saveDeliveryOrder.do";            
        } else {
            this.ajxurl = "ACCGoodsReceipt/saveGoodsReceiptOrder.do";            
        }
        if (this.isIndiaGST) {
            rec.CustomerVendorTypeId = this.CustomerVendorTypeId;
            rec.GSTINRegistrationTypeId = this.GSTINRegistrationTypeId;
            rec.gstin = this.gstin;
            if (this.isEdit && !this.copyInv) {
                rec.gstdochistoryid = this.gstdochistoryid;
            }
            if (this.purchaseFromURD != undefined) {
                rec.isUnRegisteredDealer = this.purchaseFromURD;
            } else {
                rec.isUnRegisteredDealer = false;
            }
        }
        
//        var warehouseStore = Wtf.inventoryStore;
//        if (warehouseStore.data.items.length==0){
//            //None of the store is assigned to current user  
//            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.storenottouser")],2);   //"Product(s) details are not valid."
//            this.enableSaveButtons();
//            return;
//        }

        var detail = this.Grid.getProductDetails();
        var validLineItem = this.Grid.checkDetails(this.Grid);
        if (validLineItem != "" && validLineItem != undefined) {
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), (WtfGlobal.getLocaleText("acc.msgbox.lineitem") + validLineItem)], 2);
            this.enableSaveButtons();
            return;
        }
        if(detail == undefined || detail == "[]"){
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoice.msg12")],2);   //"Product(s) details are not valid."
            this.enableSaveButtons();
            return;
        }
        var prodLength=this.Grid.getStore().data.items.length;
        var batchfilledqty = {};
        var availqty = {};        
           for(var i=0;i<prodLength-1;i++)
        { 
            
            /*
             * Checking Job Order Details. 
             */
            var prodRec = this.Grid.getStore().getAt(i);
            if (!this.isCustomer && this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId) { // For GRN
                if (this.fromLinkCombo && this.fromLinkCombo.getValue() === '2') { // When Linking to a Job work Out Order
                    var joborderdetails = prodRec.data.joborderdetails;
                    /*
                     * If Job Order details are present
                     */
                    if (joborderdetails === undefined || joborderdetails === null || joborderdetails === '') { 
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.grn.joborderdetail")+" "+WtfGlobal.getLocaleText("acc.jobworkoutwarning.ItemDetailsNSerialDetails")],2);   //Batch and serial no details are not valid.
                        this.enableSaveButtons();
                        return;
                    }
                }
            }
            
            var prodID=this.Grid.getStore().getAt(i).data['productid'];
            var isSerialForProduct=this.Grid.getStore().getAt(i).data['isSerialForProduct'];
            var isBatchForProduct=this.Grid.getStore().getAt(i).data['isBatchForProduct'];
            var prorec=this.Grid.productComboStore.getAt(this.Grid.productComboStore.find('productid',prodID));
            if(prorec==undefined){
                prorec=this.Grid.getStore().getAt(i);
            }
            if(Wtf.account.companyAccountPref.isBatchCompulsory || Wtf.account.companyAccountPref.isSerialCompulsory || Wtf.account.companyAccountPref.isLocationCompulsory || Wtf.account.companyAccountPref.isWarehouseCompulsory || Wtf.account.companyAccountPref.isRowCompulsory || Wtf.account.companyAccountPref.isRackCompulsory || Wtf.account.companyAccountPref.isBinCompulsory){ //if company level option is on then only check batch and serial details
                if(prorec.data.isBatchForProduct || prorec.data.isSerialForProduct || prorec.data.isLocationForProduct || prorec.data.isWarehouseForProduct || prorec.data.isRowForProduct || prorec.data.isRackForProduct  || prorec.data.isBinForProduct){ 
                    if(prorec.data.type!='Service' && prorec.data.type!='Non-Inventory Part'){
                        var batchDetail= this.Grid.getStore().getAt(i).data['batchdetails'];
                        var productQty= this.Grid.getStore().getAt(i).data['dquantity'];
                        var baseUOMRateQty= this.Grid.getStore().getAt(i).data['baseuomrate'];
                        var isLooseSellingBlockedProduct= this.Grid.getStore().getAt(i).data['blockLooseSell'];
                       /*
                        * Need to set array blank to handle edit case as well
                        */
                        if((productQty<=0 && this.allowZeroQuantity)){
                           batchDetail=[];
                       }
                        if(batchDetail == undefined || batchDetail == "" || batchDetail=="[]"){
                        if((productQty>0)){
                            var validLineItem=this.Grid.checkbatchDetails(this.Grid);
                            if(validLineItem!="" && validLineItem!=undefined){
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),(WtfGlobal.getLocaleText("acc.invoice.bsdetail")+validLineItem)],2); 
                                this.enableSaveButtons();
                                return false;
                            }
                        }
                    }else{
                            var jsonBatchDetails= eval(batchDetail);
                            var batchQty=0;
                            for(var batchCnt=0;batchCnt<jsonBatchDetails.length;batchCnt++){
//                                var storeAssignedtoUser = !Wtf.isEmpty(warehouseStore) ? WtfGlobal.searchRecordIndex(warehouseStore, jsonBatchDetails[batchCnt].warehouse, 'id') : "";
//                                if (storeAssignedtoUser == -1) {
//                                    //Default Store for this product is not assigned to current user
//                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), "Default Store for product " +prorec.data.pid+ " is not assigned to current user." ], 2);   //"Product(s) details are not valid."
//                                    this.enableSaveButtons();
//                                    return;
//                                }
                                
                                if(jsonBatchDetails[batchCnt].quantity>0){
                                    if(prorec.data.isSerialForProduct){
                                        batchQty=batchQty+ parseInt(jsonBatchDetails[batchCnt].quantity);
                                    }else{
                                        batchQty=batchQty+ parseFloat(jsonBatchDetails[batchCnt].quantity);
                                    }
                                }
                                var currentRowSrl=jsonBatchDetails[batchCnt].serialno;
                                var currentRowBatch=jsonBatchDetails[batchCnt].batch;
                                if(this.ajxurl == "ACCGoodsReceipt/saveGoodsReceiptOrder.do" && (isSerialForProduct|| isBatchForProduct)){//ie. it is GRN
                                    var currentRowProd=jsonBatchDetails[batchCnt].productid;
                                    for(var prevRow=0;prevRow<i;prevRow++){
                                        if(Wtf.account.companyAccountPref.columnPref.restrictDuplicateBatch && isBatchForProduct){               // check for  batch already exist
                                            var prevRowbatchDetail= this.Grid.getStore().getAt(prevRow).data['batchdetails'];  
                                            if(prevRowbatchDetail != undefined && prevRowbatchDetail != "" && prevRowbatchDetail !="[]"){
                                                    var prevRowjsonBatchDetails= eval(prevRowbatchDetail);
                                                    for (var prevBatchcnt = 0; prevBatchcnt < prevRowjsonBatchDetails.length; prevBatchcnt++) {
                                                        var prevBatch = prevRowjsonBatchDetails[prevBatchcnt].batch;
                                                        if (prevBatch == currentRowBatch) {
                                                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.batch.duplicatebatchname")], 2);
                                                            this.enableSaveButtons();
                                                            return;
                                                        }
                                                    }

                                            }
                                        }
                                        if(this.Grid.getStore().getAt(prevRow).data['productid'] == currentRowProd && isSerialForProduct){
                                            var prevRowbatchDetail= this.Grid.getStore().getAt(prevRow).data['batchdetails'];
                                            if(prevRowbatchDetail != undefined && prevRowbatchDetail != "" && prevRowbatchDetail !="[]"){
                                                var prevRowjsonBatchDetails= eval(prevRowbatchDetail);
                                                for (var prevBatchcnt = 0; prevBatchcnt < prevRowjsonBatchDetails.length; prevBatchcnt++) {
                                                    var prevSrl = prevRowjsonBatchDetails[prevBatchcnt].serialno;
                                                    if (prevSrl == currentRowSrl) {
                                                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.msgbox.523")], 2);  
                                                        this.enableSaveButtons();
                                                        return;
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                else if((Wtf.account.companyAccountPref.negativestock == 1 || !Wtf.account.companyAccountPref.isnegativestockforlocwar) && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId && jsonBatchDetails!=undefined && jsonBatchDetails[batchCnt].purchasebatchid && !(isSerialForProduct)){
                                var batchfilledquantity = 0;
                                var batchavialblequantity = 0;
                                var batchid = jsonBatchDetails[batchCnt].purchasebatchid;
                                if(jsonBatchDetails[batchCnt].quantity!=undefined && jsonBatchDetails[batchCnt].quantity!=""){
                                batchfilledquantity = parseFloat(getRoundofValue(jsonBatchDetails[batchCnt].quantity).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL));    
                                }                                
                                if (Wtf.account.companyAccountPref.isAutoFillBatchDetails != undefined && Wtf.account.companyAccountPref.isAutoFillBatchDetails == true && jsonBatchDetails[batchCnt].avialblequantity!=undefined && jsonBatchDetails[batchCnt].avialblequantity!=""){
                                batchavialblequantity = parseFloat(getRoundofValue(jsonBatchDetails[batchCnt].avialblequantity).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL));
                                } else if(jsonBatchDetails[batchCnt].avlquantity!=undefined && jsonBatchDetails[batchCnt].avlquantity!=""){
                                batchavialblequantity = parseFloat(getRoundofValue(jsonBatchDetails[batchCnt].avlquantity).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL));
                                }
                                if (batchfilledqty[batchid]){
                                batchfilledqty[batchid] += batchfilledquantity;
                                } else {
                                batchfilledqty[batchid] = batchfilledquantity;
                                }
                                availqty[batchid] = parseFloat(batchavialblequantity);
                                        if (availqty[batchid] < batchfilledqty[batchid]){                                
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable")], 2);
                                        this.enableSaveButtons();
                                        return;                                
                                }
                               }
                         } 
                                     
                            var comparisionQty = 0;
                                     
                            if(isLooseSellingBlockedProduct){
                                comparisionQty = productQty;
                            }else{
                                comparisionQty = productQty*baseUOMRateQty;
                            }
                                     
                            if((batchQty).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) != (comparisionQty).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL)){
                            //                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoice.bsdetail")],2);
                            //                                this.enableSaveButtons();
                            //                                return;
                            var validLineItem=this.Grid.checkBatchDetailQty(this.Grid);
                            if(validLineItem!="" && validLineItem!=undefined){
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),("quantity does not match with batch quantity"+validLineItem)],2); 
                                this.enableSaveButtons();
                                return;
                            }
                        }   
                        }
                    }
                }
            }
            var quantity=this.Grid.getStore().getAt(i).data['quantity'];
            if (prorec.data.type != 'Service' && prorec.data.type != 'Non-Inventory Part') { // serial no for only inventory type of product
                if (prorec.data.isSerialForProduct) {
                    var v = quantity;
                    v = String(v);
                    var ps = v.split('.');
                    var sub = ps[1];
                    if (sub!=undefined && sub.length > 0) {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.msg.exceptionMsgForDecimalQty")], 2);
                        this.enableSaveButtons();
                        return;
                    }
                }
            }
            
            var dquantity=this.Grid.getStore().getAt(i).data['dquantity'];
            if (prorec.data.type != 'Service' && prorec.data.type != 'Non-Inventory Part') { // serial no for only inventory type of product
                if (prorec.data.isSerialForProduct) {
                    var v = dquantity;
                    v = String(v);
                    var ps = v.split('.');
                    var sub = ps[1];
                    if (sub!=undefined && sub.length > 0) {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.msg.exceptionMsgForDecimalQty")], 2);
                        this.enableSaveButtons();
                        return;
                    }
                }
            }
           /**
//            *this block checks the product type so that the JE for that product is posted 
//            *through backend. and the JE is posted backendly the we restrict that transaction with zero qty
            */
//            if (this.Grid.calSubtotal() <=0 && Wtf.account.companyAccountPref.inventoryValuationType=="1" && this.allowZeroQuantity) {//&& (prorec.data.type == 'assembly' || prorec.data.type == 'invpart' || prorec.data.type == 'customerAssembly' || prorec.data.type == 'customerInventory')
//                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);//You cannot make Transaction with Zero or Blank Quantity.
//                //                            this.enableSaveButtons();
//                return ;
//            }
        } 
                
        var soselectValue=this.PO.getValue();
        if(this.isCustomer && soselectValue!=undefined&& soselectValue!=""){// for delivery order
                
            var poindex=this.POStore.findBy( function(rec){
                var parentname=rec.data['billid'];
                if(parentname==soselectValue)
                    return true;
                else
                    return false;
            });
            if(poindex>=0) {
                var soRec= this.POStore.getAt(poindex);
                var datamsg = "";
                if(this.fromLinkCombo.getValue()==0){// if linked from so
                    datamsg = WtfGlobal.getLocaleText("acc.msgbox.salescontractalertso");
                }else if(this.fromLinkCombo.getValue()==1){// if linked from ci
                    datamsg = WtfGlobal.getLocaleText("acc.msgbox.salescontractalertci");
                }
                if(soRec.data.contractstatus==2){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),datamsg], 3);
                    this.enableSaveButtons();
                    return false;
                }
            }
        }
        //check if is there duplicate product in transaction
        var isDuplicate=false;
        var duplicateval=", ";
        if(Wtf.account.companyAccountPref.isDuplicateItems){
            var prodLength=this.Grid.getStore().data.items.length;
            for(var i=0;i<prodLength-1;i++)
            { 
                var prodID=this.Grid.getStore().getAt(i).data['productid'];
                for(var j=i+1;j<prodLength-1;j++){
                    var productid=this.Grid.getStore().getAt(j).data['productid'];
                    if(prodID==productid){
                        isDuplicate = true;
                        prorec=this.Grid.getStore().getAt(this.Grid.getStore().find('productid',prodID));
                        if(duplicateval.indexOf(", "+prorec.data.pid+",")==-1){
                            duplicateval += prorec.data.pid+", ";//Add duplicate product id 
            
                        }
                    }
                }
            }
        }
        if(isDuplicate == true){
            duplicateval = duplicateval.substring(2,(duplicateval.length - 2));
        }
        var confirmMsg ="";
        if(Wtf.account.companyAccountPref.negativestock==2 && isDuplicate==true){//Warn case and duplicate product case
            confirmMsg = duplicateval+" "+WtfGlobal.getLocaleText("acc.field.duplicateproduct")+" and "+WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable")+'<br>'+WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed");
        } else if(Wtf.account.companyAccountPref.negativestock==2) {//Warn case
            confirmMsg = WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable")+'<br>'+WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed");
        } else if(isDuplicate==true) {//duplicate product case
            confirmMsg =duplicateval+" "+ WtfGlobal.getLocaleText("acc.field.duplicateproduct")+". "+WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed");
        }
        if(this.isCustomer && !Wtf.account.companyAccountPref.isnegativestockforlocwar && (Wtf.account.companyAccountPref.isLocationCompulsory 
            || Wtf.account.companyAccountPref.isWarehouseCompulsory) && prorec.data.type != "Service" && prorec.data.type != 'Non-Inventory Part' ){
            Wtf.Ajax.requestEx({
                url: "ACCInvoice/getBatchRemainingQuantity.do",
                params: {
                    detail:detail,
                    transType:this.moduleid,
                    isEdit:this.isEdit,
                    fromSubmit:false,
                    linkflag:this.fromPO.getValue(),
                    isfromdo:true
                }
            },this,function(res,req){
            this.AvailableQuantity=res.quantity; 
            var maxBuildQty=res.maxBuildQty; // will be set for only assembly type product
            var isQtySufficient=res.isQtySufficient;// will be set for only assembly type product
            if(res.prodname){
                this.prodname=res.prodname;
            }
            if(((this.prodname=="" ||this.prodname==undefined || res.nolocationwarehouse || isQtySufficient == undefined) && (res.quantity !="" && res.quantity != undefined  && Number(res.quantity) > 0 )||(res.isBatchForProduct||res.isSerialForProduct))|| (this.prodname != "" && this.prodname != undefined && maxBuildQty != "" && maxBuildQty != undefined && isQtySufficient != "" && isQtySufficient != undefined && isQtySufficient == true)){
                this.Callfinalsavedetails(rec,detail,incash,confirmMsg,isDuplicate,duplicateval);
                return;
            }else if (res.allowtosave !="" && res.allowtosave !=undefined && res.allowtosave && WtfGlobal.checkAllowZeroQuantityForProduct(this.moduleid) && res.quantity==0){
                this.Callfinalsavedetails(rec,detail,incash,confirmMsg,isDuplicate,duplicateval);
                return;
            }else{
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.quantityforprod")+" <b>"+this.prodname+"</b> " + WtfGlobal.getLocaleText("acc.field.isnotvalid")], 2);
                this.enableSaveButtons();
                return false;
            }
                
        },function(res,req){
                this.enableSaveButtons();
                return false;
            });
        }else{
        this.Callfinalsavedetails(rec,detail,incash,confirmMsg,isDuplicate,duplicateval);
    }
},
showNegativeStockWarnOrBlockMsg:function(){
    var success=true;
    for (var i = 0; i < this.Grid.getStore().getCount(); i++) {
        var record = this.Grid.getStore().data.items[i];
        if (record.data.productid !== undefined && record.data.productid !== "") {
            var prorec = WtfGlobal.searchRecord(this.Grid.productComboStore,record.data.productid,'productid');
            var useStoreRec = false;
            if (prorec == undefined || prorec==null) {
                useStoreRec = true;
                prorec = record;
            }
            var availableQuantity=0,lockQuantity=0;
            if (this.isEdit) {  //In Edit Case Check product quantity is greater than available quantity when selecting product
                availableQuantity = prorec.data.quantity;    //This is in base UOM
                lockQuantity = prorec.data.lockquantity;
                if (useStoreRec && prorec.data.availablequantity!=undefined && prorec.data.availablequantity!="" && prorec.data.availablequantity!=null) {
                    availableQuantity = prorec.data.availablequantity;
                    lockQuantity = prorec.data.lockquantity;
                }
                var copyquantity = 0;
                var quantity = 0;
                for (var j = 0; j < this.Grid.getStore().getCount(); j++) {
                    var subrecord = this.Grid.getStore().data.items[j];
                    if (subrecord.data.productid === record.data.productid) {
                        copyquantity = copyquantity + (this.copyInv?record.data.copyquantity * record.data.baseuomrate:subrecord.data.copyquantity * subrecord.data.baseuomrate);
                        quantity = quantity + (this.copyInv?record.data.dquantity * record.data.baseuomrate:subrecord.data.dquantity * subrecord.data.baseuomrate);
                    }
                }
                if (this.isEdit && !this.copyInv) {
                    availableQuantity = availableQuantity + copyquantity;
                }
                if (this.isCustomer && record.data.type != 'Service' && record.data.type != 'Non-Inventory Part' && !this.isQuotation) {
                    if ((availableQuantity - lockQuantity) < quantity && prorec.data.isAutoAssembly != true) {
                        if (Wtf.account.companyAccountPref.negativestock == 1) { // Block case
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.block"), WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable") + ' ' + WtfGlobal.getLocaleText("acc.nee.54") + ' ' + prorec.data.productname +' '+ WtfGlobal.getLocaleText("acc.field.is") + (availableQuantity - lockQuantity) + '. ' + WtfGlobal.getLocaleText("acc.field.Soyoucannotproceed") ], 2);
                            this.enableSaveButtons();
                            success = false;
                            return;
                        } else if (Wtf.account.companyAccountPref.negativestock == 2 && !Wtf.account.companyAccountPref.isnegativestockforlocwar) {     // Warn Case
                            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable") + '<br>' + WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed") + '</center>', function(btn) {
                                if (btn == "yes") {
                                    this.WarnMessage = false;
                                    this.save();
                                } else {
                                    this.enableSaveButtons();
                                    success = false;
                                    return;
                                }
                            }, this);
                            success = false;
                            return; 
                        }
                    }
                } else if (this.isCustomer && availableQuantity < quantity && prorec.data.type != 'Service' && prorec.data.type != 'Non-Inventory Part' && !this.isQuotation && prorec.data.isAutoAssembly != true) {
                    if (Wtf.account.companyAccountPref.negativestock == 1) { // Block case
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.block"), WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable") + ' ' + WtfGlobal.getLocaleText("acc.nee.54") + ' ' + record.data['productname'] +' '+ WtfGlobal.getLocaleText("acc.field.is") + ((record.data['quantity']) - (record.data['lockquantity'])) + '. ' + WtfGlobal.getLocaleText("acc.field.Soyoucannotproceed")], 2);
                        this.enableSaveButtons();
                        success = false;
                        return;
                    } else if (Wtf.account.companyAccountPref.negativestock == 2) {     // Warn Case
                        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable") + '<br>' + WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed") + '</center>', function(btn) {
                            if (btn == "yes") {
                                this.WarnMessage = false;
                                this.save();
                            }else {
                                this.enableSaveButtons();
                                success = false;
                                return;
                            }
                        }, this);
                        success = false;
                        return;
                    }
                }
            } else {
                if (this.isCustomer && record.data.type != 'Service' && record.data.type != 'Non-Inventory Part' && !this.isQuotation) {
                    var quantity = 0;
                    availableQuantity = prorec.data.quantity;    //This is in base UOM
                    lockQuantity = prorec.data.lockquantity;
                    if (useStoreRec && prorec.data.availablequantity != undefined && prorec.data.availablequantity != "" && prorec.data.availablequantity != null) {
                        availableQuantity = prorec.data.availablequantity;
                        lockQuantity = prorec.data.lockquantity;
                    }else if (useStoreRec && prorec != undefined && prorec != null && prorec.data != undefined && prorec.data.availableQtyInSelectedUOM != undefined && prorec.data.availableQtyInSelectedUOM != null) {
                        availableQuantity = prorec.data.availableQtyInSelectedUOM;
                    }
                    for (var j = 0; j < this.Grid.getStore().getCount(); j++) {
                        var subrecord = this.Grid.getStore().data.items[j];
                        if (subrecord.data.productid === record.data.productid) {
//                            quantity = quantity + subrecord.data.dquantity;
                            var uomrate = subrecord.data.baseuomrate ? subrecord.data.baseuomrate : 1 ; 
                            quantity = quantity + (subrecord.data.dquantity * uomrate );
                        }
                    }
                    //To do - Need to check this
                    if (availableQuantity < quantity && prorec.data.isAutoAssembly != true) {
                        if (Wtf.account.companyAccountPref.negativestock == 1) { // Block case
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.block"), WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable") + ' ' + WtfGlobal.getLocaleText("acc.nee.54") + ' ' + record.data['productname'] + ' ' + WtfGlobal.getLocaleText("acc.field.is") + ((availableQuantity - lockQuantity)) + '. ' + WtfGlobal.getLocaleText("acc.field.Soyoucannotproceed")], 2);
                            this.enableSaveButtons();
                            success = false;
                            return;
                        } else if (Wtf.account.companyAccountPref.negativestock == 2 && !Wtf.account.companyAccountPref.isnegativestockforlocwar) {     // Warn Case
                            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable") + '<br>' + WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed") + '</center>', function(btn) {
                                if (btn == "yes") {
                                    this.WarnMessage = false;
                                    this.save();
                                } else {
                                    this.enableSaveButtons();
                                    success = false;
                                    return;
                                }
                            }, this);
                            success = false;
                            return;
                        }
                    }
                } else if (this.isCustomer && (availableQuantity - lockQuantity) < record.data['dquantity'] && prorec.data.type != "Service" && prorec.data.type != 'Non-Inventory Part' && !this.isQuotation && prorec.data.isAutoAssembly != true) {
                    if (Wtf.account.companyAccountPref.negativestock == 1) { // Block case
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.block"), WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable") + ' ' + WtfGlobal.getLocaleText("acc.nee.54") + ' ' + record.data['productname'] + ' ' + WtfGlobal.getLocaleText("acc.field.is") + ((availableQuantity - lockQuantity)) + '. ' + WtfGlobal.getLocaleText("acc.field.Soyoucannotproceed")], 2);
                        this.enableSaveButtons();
                        success = false;                    //obj.cancel=true;
                        return;
                    } else if (Wtf.account.companyAccountPref.negativestock == 2 && !Wtf.account.companyAccountPref.isnegativestockforlocwar) {     // Warn Case
                        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable") + '<br>' + WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed") + '</center>', function(btn) {
                            if (btn == "yes") {
                                this.WarnMessage = false;
                                this.save();
                            } else {
                                this.enableSaveButtons();
                                success = false;
                                return;
                            }
                        }, this);
                        success = false;
                        return;
                    }
                }
            }
        }
    }  
    return success;
},
Callfinalsavedetails:function(rec,detail,incash,confirmMsg,isDuplicate,duplicateval){
    if(rec.fromLinkCombo!=undefined  && this.moduleid==27)  //in link case check available quantity should be greater than delivered quantity
    {
        var prodLength=this.Grid.getStore().data.length;
        for(var i=0;i<prodLength;i++)
        {
            var prodID=this.Grid.getStore().getAt(i).data['productid'];
            var prorec=this.Grid.productComboStore.getAt(this.Grid.productComboStore.find('productid',prodID));
            if(prorec != undefined)
            {
                var prodName=prorec.data.productname;
                var availableQuantity = prorec.data.quantity;
                var lockQuantity = prorec.data.lockquantity;
                var quantity= this.Grid.getStore().getAt(i).data['dquantity'];
                var soLockFlag=this.Grid.getStore().getAt(i).data['islockQuantityflag']
                if(rec.fromLinkCombo="Sales Order" && soLockFlag==true)  ///for DO which is linked with salesorder which is locked
                {  
                    var soLockQuantity=this.Grid.getStore().getAt(i).data['lockquantity'];
                    if((availableQuantity-(lockQuantity-soLockQuantity))<quantity && prorec.data.isAutoAssembly != true && prorec.data.type != "Service"){
                        if(Wtf.account.companyAccountPref.negativestock==1){ // Block case
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.block"),WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable")+'<br>'+WtfGlobal.getLocaleText("acc.nee.54")+' '+prodName+WtfGlobal.getLocaleText("acc.field.is")+(availableQuantity-lockQuantity)+'<br><br><center>'+WtfGlobal.getLocaleText("acc.field.Soyoucannotproceed")+'</center>'], 2);
                            this.enableSaveButtons();
                            return true;
                        }else if(confirmMsg!=""){     // Warn Case
                            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),confirmMsg+'</center>' , function(btn){
                                if(btn=="yes"){
                                    this.showConfirmAndSave(rec,detail,incash);
                                    return;
                                }else{
                                    this.enableSaveButtons();
                                    return true;
                                }
                            },this);
                            return;
                        }       
                    }else{
                        this.showConfirmAndSave(rec,detail,incash); 
                        return
                    }
                }else  if((availableQuantity-lockQuantity)<quantity && prorec.data.isAutoAssembly != true && prorec.data.type != "Service"){  //for DO for linked with SO which is not linked and for Invoice
                    if(Wtf.account.companyAccountPref.negativestock==1){ // Block case
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.block"),WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable")+'<br>'+WtfGlobal.getLocaleText("acc.nee.54")+' '+prodName+WtfGlobal.getLocaleText("acc.field.is")+(availableQuantity-lockQuantity)+'<br><br><center>'+WtfGlobal.getLocaleText("acc.field.Soyoucannotproceed")+'</center>'], 2);
                        this.enableSaveButtons();
                        return true;
                    }else if(confirmMsg!=""){     // Warn Case
                        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),confirmMsg+'</center>' , function(btn){
                            if(btn=="yes"){
                                this.showConfirmAndSave(rec,detail,incash);
                                return ;  //
                            }else{
                                this.enableSaveButtons();
                                return true;
                            }
                        },this);
                        return;
                    }else{  //in ingnore case directly save the record
                        this.showConfirmAndSave(rec,detail,incash);  
                        return ;
                    }
                }
            }
        }
        if(prodLength>0 || isDuplicate == true){  //in case of all product delivered quantity is available then directly save transaction
            if(isDuplicate == true){
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),duplicateval+" "+ WtfGlobal.getLocaleText("acc.field.duplicateproduct")+". "+WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed")+'</center>' , function(btn){
                    if(btn=="yes"){
                        this.showConfirmAndSave(rec,detail,incash);  
                        return ;  //
                    }else{
                        this.enableSaveButtons();
                        return true;
                    }
                },this);
                return;
            }else if(prodLength>0){
                this.showConfirmAndSave(rec,detail,incash);  
            }
        }
                
    }else   //if DO is made normal without linking
        {
        if(isDuplicate == true){
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),duplicateval+" "+ WtfGlobal.getLocaleText("acc.field.duplicateproduct")+". "+WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed")+'</center>' , function(btn){
                if(btn=="yes"){
                    this.showConfirmAndSave(rec,detail,incash);
                    return ;  //
                }else{
                    this.enableSaveButtons();
                    return true;
                        }
            },this);
                    return;
        }else{
            this.showConfirmAndSave(rec,detail,incash);
                }
            }
},
checklastproduct:function(rec,detail,incash,count){
    if(this.Grid.getStore().getAt(count-1).data['pid']!="" && this.Grid.getStore().getAt(count-1).data['productid']==""){
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.common.productWithSpecifiedId")+" "+this.Grid.getStore().getAt(count-1).data['pid']+" "+WtfGlobal.getLocaleText("acc.common.productDoesNotExistsOrInDormantState")+". "+WtfGlobal.getLocaleText("acc.accPref.productnotFoundonSave")+'</center>' ,function(btn){
            if(btn=="yes") {
                this.showConfirmAndSave(rec,detail,incash);
            }else{
                this.enableSaveButtons();
                return;
            } 
        },this);                
    }else{
        this.showConfirmAndSave(rec,detail,incash);
    } 
         
},
showConfirmAndSave: function(rec,detail,incash){
    var promptmessage = "";
    /**
     * append pop up message while saving document for E-Way related fields. 
     * No need to show separate message i.e. add message in the before save pop up itself.
     * ERP-39530
     */
    if (WtfGlobal.isIndiaCountryAndGSTApplied() && this.isEWayCheck.getValue() && (this.moduleid !=undefined && this.moduleid != '' && Wtf.EwayUnitDimCustmFieldsActivatedModules.indexOf(parseInt(this.moduleid)) > -1)) {
        promptmessage += WtfGlobal.getLocaleText("acc.invoice.msg7")
        var ValidationOptArr = this.tagsFieldset.validateEwayRelatedFields(this);     
        if(ValidationOptArr[1]!=undefined &&ValidationOptArr[1] > 0){
          promptmessage += WtfGlobal.getLocaleText("acc.save.document.eway.fields.confirm.msg");
        }
    } else if (Wtf.Countryid == Wtf.CountryID.MALAYSIA && WtfGlobal.isNonZeroRatedTaxCodeUsedInTransaction(this)){
        promptmessage = WtfGlobal.getLocaleText("acc.tax.nonZeroTaxcode.alert");
    } else{
        promptmessage = WtfGlobal.getLocaleText("acc.invoice.msg7");
    }
    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.savdat"),promptmessage,function(btn){
        if(btn!="yes") {
            this.saveOnlyFlag=false;
            this.enableSaveButtons();
            return;
        }
        rec.detail=detail;
       /* Is include GST-*/
        rec.includingGST = (this.includingGST)? this.includingGST.getValue() : false;
        /* Deleted Linked Document ID(s)*/
        rec.deletedLinkedDocumentId=this.linkedDocumentId.slice(0,-3);
        rec.externalcurrencyrate=this.externalcurrencyrate;
        this.msg= WtfComMsgBox(27,4,true);
        //rec.currencyid=this.Currency.getValue();
        rec.number=this.Number.getValue();
        rec.batchDetails=this.Grid.batchDetails;
        rec.statuscombo=this.DOStatusCombo.getValue();
        rec.fromLinkCombo=this.fromLinkCombo.getRawValue();
        if(this.Grid != undefined && this.Grid.deleteStore!=undefined && this.Grid.deleteStore.data.length>0){  //for geting store to delete.
            rec.deletedData = this.getJSONArray(this.Grid.deleteStore,false,0);
        }
        var custFieldArr=this.tagsFieldset.createFieldValuesArray();
        if (custFieldArr.length > 0)
            rec.customfield = JSON.stringify(custFieldArr);
        rec.linkNumber=(this.PO != undefined && this.PO.getValue()!="")?this.PO.getValue():"";
        rec.billdate=WtfGlobal.convertToGenericDate(this.billDate.getValue());
        rec.customerporefno=this.CustomerPORefNo.getValue();
        rec.shipdate=WtfGlobal.convertToGenericDate(this.shipDate.getValue());
        rec.doid=(this.copyInv || this.invoicefromorder)?"":this.billid;                
        rec.mode=(this.isOrder?41:11);
        rec.incash=incash;
        rec.isJobWorkOutReciever=this.isJobWorkOutReciever;
        rec.isfavourite=false;
        rec.posttext=this.postText;
        var seqFormatRec=WtfGlobal.searchRecord(this.sequenceFormatStore, this.sequenceFormatCombobox.getValue(), 'id');
        rec.seqformat_oldflag=seqFormatRec!=null?seqFormatRec.get('oldflag'):false;
        rec.sequenceformat=this.sequenceFormatCombobox.getValue();
        rec.tostore=Wtf.account.companyAccountPref.packingstore;
        rec.toLocationId=Wtf.account.companyAccountPref.packinglocation;
        rec.pickpacklocation = (this.pickpacklocation!=undefined && this.pickpacklocation!=null)?this.pickpacklocation:"";
        rec.isPickPackShipActivated=Wtf.account.companyAccountPref.pickpackship;
        rec.interloconpickActivated=Wtf.account.companyAccountPref.interloconpick;
        if(!this.copyInv){
            if((this.record && this.record !== undefined) && (this.record.get('isfavourite') !== null || this.record.get('isfavourite') !== undefined)){
                rec.isfavourite = this.record.get('isfavourite');
            }
        }
        rec.isRoundingAdjustmentApplied = this.applyRoundingAdjustmentToDocument;//Sending this variable from JS so that we can reduce calculation on java side and other stuff
        rec.currencyid=this.Currency.getValue();
        if (!Wtf.account.companyAccountPref.deliveryPlanner && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
            rec.driver = this.driver.getValue();
        }
        rec.isEdit=this.isEdit;
        rec.GSTApplicable=this.isGST; // ERP-32829 
        rec.copyInv=this.copyInv;
        rec.savedFilesMappingId = this.savedFilesMappingId;//Saved documents id
        rec.moduleid=this.moduleid;
        rec.invoicetermsmap = this.getInvoiceTermDetails();
        rec.isApplyTaxToTerms = (this.includeProTax && this.includeProTax.getValue()==true && this.applyTaxToTermsChk.getValue());
        rec.GTAApplicable = (this.GTAApplicable)? this.GTAApplicable.getValue() : false;
        /**
         * Send value to back end on document save/Edit
         */
        rec.isMerchantExporter = this.isMerchantExporter.getValue();
        if (this.copyInv) {

            var hasAccessFlag = false;
            var Name = "";
            var title = "";
            var personId = this.Name.getValue();
            var personRec = WtfGlobal.searchRecord(this.Name.store, personId, this.Name.valueField);
            if (personRec != null) {
                var hasAccess = personRec.get('hasAccess');
                if (!hasAccess) {
                    Name = personRec.get('accname');
                    hasAccessFlag = true;
                }
            }
            if (hasAccessFlag) {
                if (this.businessPerson == "Customer") {
                    title = WtfGlobal.getLocaleText("acc.customer.customerName");
                } else {
                    title = WtfGlobal.getLocaleText("acc.vendor.vendorName");
                }
                Wtf.MessageBox.show({
                    title: WtfGlobal.getLocaleText("acc.common.warning"), //'Warning',
                    msg: title + Name + " " + WtfGlobal.getLocaleText("acc.field.iscurrentlydeactivated"),
                    width: 370,
                    buttons: Wtf.MessageBox.OK,
                    icon: Wtf.MessageBox.WARNING,
                    scope: this
                });
                this.enableSaveButtons();
                return;
            }

        }
        if (this.users != undefined) {
            var isSaledpersonDeactivated = WtfGlobal.isSaledpersonDeactivated(this.users, this.businessPerson);
            if (isSaledpersonDeactivated) {
                this.enableSaveButtons();
                return;
            }
        }
           
        var isCopy = this.copyInv;
        var isEdit = this.isEdit;
        if (this.isVenOrCustSelect) {
            isEdit = false;
            isCopy = false;
        }
            /*-----If Pending document is edited----------  */
            if (this.pendingapprovalTransaction) {//sent from GR
                rec.isEditedPendingDocument = true;
            }
        
        rec=WtfGlobal.getAddressRecordsForSave(rec,this.record,this.linkRecord,this.currentAddressDetailrec,this.isCustomer,this.singleLink,isEdit,isCopy);
        WtfGlobal.setAjaxTimeOut();
            if (Wtf.account.companyAccountPref.isQaApprovalFlow && this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId) {
                 Wtf.Msg.show({
                    title: WtfGlobal.getLocaleText("acc.common.confirm"),
                    msg: WtfGlobal.getLocaleText("acc.goodsreceiptorder.sendforqa"),
                    buttons: Wtf.Msg.YESNOCANCEL,
                    scope: this,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            rec.sendForQAApproval = true;
                            this.saveRequest(rec);
                        } else if (btn == 'no') {
                            this.saveRequest(rec);
                        } else {
                            this.enableSaveButtons();
                            return;
                        }
                    },
                    icon: Wtf.MessageBox.QUESTION
                });
                
//                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"), WtfGlobal.getLocaleText("acc.goodsreceiptorder.sendforqa"), function (btn) {
//                    if (btn == 'yes') {
//                        rec.sendForQAApproval = true;
//                        this.saveRequest(rec);
//                    } else {
//                        this.saveRequest(rec);
//                    }
//                }, this);
            } else if (Wtf.account.companyAccountPref.isQaApprovalFlowInDO && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
                 Wtf.Msg.show({
                    title: WtfGlobal.getLocaleText("acc.common.confirm"),
                    msg: WtfGlobal.getLocaleText("acc.deliveryorder.sendforqa"),
                    buttons: Wtf.Msg.YESNOCANCEL,
                    scope: this,
                    fn: function (btn) {
                        if (btn == 'yes') {
                            rec.sendForQAApproval = true;
                            this.saveRequest(rec);
                        } else if (btn == 'no') {
                            this.saveRequest(rec);
                        } else {
                            this.enableSaveButtons();
                            return;
                        }
                    },
                    icon: Wtf.MessageBox.QUESTION
                });
                
//                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"), WtfGlobal.getLocaleText("acc.deliveryorder.sendforqa"), function(btn) {
//                    if (btn == 'yes') {
//                        rec.sendForQAApproval = true;
//                        this.saveRequest(rec);
//                    } else {
//                        this.saveRequest(rec);
//                    }
//                }, this);
            } else {
                this.saveRequest(rec);
            }
    },this);
},
saveRequest:function(rec){
        Wtf.Ajax.requestEx({
            url: this.ajxurl,
            params: rec
        }, this, this.genSuccessResponse, this.genFailureResponse);  
},
genSuccessResponse:function(response, request){
    WtfGlobal.resetAjaxTimeOut();
    this.enableSaveButtons();   
    if(response.success){
        while(Wtf.dupsrno.length>0){
                Wtf.dupsrno.pop();
            }
        if (Wtf.account.companyAccountPref.deliveryPlanner && (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId)) {
            this.pushToPlannerBttn.enable();
            this.fullShippingAddress = response.fullShippingAddress;
        }
        this.RecordID = response.billid;
        
        //ERP-27428 : In case of DO, Line level grid will be update with Auto generated Build Assembly no.
        if(Wtf.Acc_Delivery_Order_ModuleId==this.moduleid&&!this.saveandcreateBtn){
            this.Grid.getStore().proxy.conn.url = "ACCInvoiceCMN/getDeliveryOrderRows.do";
            this.Grid.getStore().load({params:{bills:this.RecordID,moduleid:this.moduleid,isEdit:false,copyInv:false}});
        }

        if (response.pendingApproval || this.isFromSaveAndCreateNew || (this.isEdit && !this.copyInv) || (this.fromLinkCombo.getValue() == 1)) { // disabling Generate SI button if creating DO by linking SI.
//        generating Sales/Purchase Invoice from Goods Receipt/Delivery Order. When GR/DO is pending for for approval at that time keep this.generatePI disableds.
            this.generatePI.setDisabled(true);
        } else {
            this.generatePI.setDisabled(false);
        }
        this.isFromSaveAndCreateNew=false;
        Wtf.dupsrno.length=0;
        if(this.moduleid==Wtf.Acc_Delivery_Order_ModuleId && Wtf.getCmp("DeliveryOrderListEntry") != undefined && Wtf.isAutoRefershReportonDocumentSave){
            var title = this.titlel;//scope not available in on load function of store
            Wtf.getCmp("DeliveryOrderListEntry").Store.on('load', function() {
                WtfComMsgBox([title,response.msg],response.success*2+1);
            }, Wtf.getCmp("DeliveryOrderListEntry").Store, {
                single : true
            });

        }else if (this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId && Wtf.getCmp("GoodsReceiptDeliveryOrderListEntry") != undefined && Wtf.isAutoRefershReportonDocumentSave) {
            var title = this.titlel;//scope not available in on load function of store
            Wtf.getCmp("GoodsReceiptDeliveryOrderListEntry").Store.on('load', function() {
                WtfComMsgBox([title, response.msg], response.success * 2 + 1);
            }, Wtf.getCmp("GoodsReceiptDeliveryOrderListEntry").Store, {
                single: true
            });
        } else {
            WtfComMsgBox([this.titlel,response.msg],response.success*2+1);
        } 
            
        var rec=this.NorthForm.getForm().getValues();
        this.exportRecord=rec;
        this.exportRecord['billid']=response.billid||response.invoiceid;
        this.exportRecord['billno']=response.billno||response.invoiceNo;
        this.exportRecord['amount']=response.amount||"";
        this.exportRecord['isNoteAlso']=this.isNoteAlso;
        this.exportRecord['isexpenseinv']=response.isExpenseInv!=undefined? response.isExpenseInv:false; //To export the good receipt of Expense Type.
        //Adding invoice term record to populate on SO/DO/SI/GR/PO/PI      ERP-33441
        this.exportRecord['termdetails'] = this.getInvoiceTermWithoutEncode();
        this.exportRecord['isTaxable']=this.isTaxable;
        this.exportRecord['Tax']=this.Tax;        /*
         *If Base Currency is changed by user
         */
        this.exportRecord['externalcurrencyrate']=this.externalcurrencyrate;
        if(this.singlePrint){
            this.singlePrint.exportRecord=this.exportRecord;//Reload all product information to reflect new quantity, price etc       
        }
//        if (this.singleRowPrint) {
//            this.singleRowPrint.exportRecord = this.exportRecord;      
//        }
        if(this.mailFlag){
            this.loadUserStore(response, request);
            this.disableComponent();
            //                Wtf.getCmp("emailbut" + this.id).enable();
            //                Wtf.getCmp("exportpdf" + this.id).enable();
            this.response = response;
            this.request = request;
            return;
        }
        this.currentAddressDetailrec="";
        this.singleLink = false;
        this.isVenOrCustSelect=false;
        this.Grid.getStore().removeAll();
        this.fromLinkCombo.disable();
        this.fromPO.disable();
        this.PO.setDisabled(true);
        this.NorthForm.getForm().reset();
        this.setTransactionNumber();
        this.sequenceFormatStore.load();
        this.Currency.setValue(Wtf.account.companyAccountPref.currencyid);
        this.Grid.updateRow(null);
            //        Add to set default staus picked when pickpackship flow is on im company when we click save and create button 
            if (this.saveandcreateBtn && Wtf.account.companyAccountPref.pickpackship && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
                var value = "Picked";
                var masterstatus = WtfGlobal.searchRecord(this.DOStatusStore, value, 'name');
                if (masterstatus != undefined && masterstatus != null) {
                    var defaultstatus = masterstatus.data.id;
                    this.DOStatusCombo.setValue(defaultstatus);
                }
            }
        if(this.saveandcreateBtn){   //ERP-18517
            this.Grid.getStore().removeAll();
            this.saveandcreateBtn=false;
            this.includeProTax.enable();
            this.isTaxable.enable();
            this.isTaxable.setValue(false);
            this.Tax.enable();
            this.Tax.setValue("");
        }
        this.fromPO.setValue(false); 
        //            this.Grid.priceStore.purgeListeners();
        //            this.Grid.loadPriceStoreOnly(new Date(),this.Grid.priceStore);
        this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body,{
            productname:"&nbsp;&nbsp;&nbsp;&nbsp;",
            qty:0,
            soqty:0,
            poqty:0
        });
        this.fireEvent('update',this);
        this.externalcurrencyrate=0; //Reset external exchange rate for new Transaction.
        this.isClosable= true;       //Reset Closable flag to avoid unsaved Message.
        this.postText="";
        if(!this.mailFlag){//Clear custom columns in save and create new case
            this.resetCustomFields();
        }
    }else{
        if(response.accException){
            Wtf.MessageBox.hide();
            this.newdowin = new Wtf.Window({
                title: WtfGlobal.getLocaleText("acc.common.success"),
                closable: true,
                iconCls: getButtonIconCls(Wtf.etype.deskera),
                width: 330,
                autoHeight: true,
                modal: true,
                bodyStyle: "background-color:#f1f1f1;",
                closable:false,
                buttonAlign: 'right',
                items: [new Wtf.Panel({
                    border:false,
                    html:"<br>" + response.msg,
                    height:50,
                    bodyStyle:"background-color:white; padding: 7px; font-size: 11px; border-bottom: 1px solid #bfbfbf;"
                }),
                this.newdoForm = new Wtf.form.FormPanel({
                    labelWidth: 190,
                    border: false,
                    autoHeight: true,
                    bodyStyle: 'padding:10px 5px 3px; ',
                    autoWidth: true,
                    defaultType: 'textfield',
                    items: [this.newdono = new Wtf.form.TextField({
                        fieldLabel:(this.businessPerson == "Customer")? WtfGlobal.getLocaleText("acc.DO.newdeliveryorderno"):WtfGlobal.getLocaleText("acc.GR.newgoodsreceiptno"),
                        allowBlank: false,
                        labelSeparator:'',
                        width:90,
                        itemCls:'nextlinetextfield',
                        name: 'newdono',
                        id: 'newdono'
                    })],
                    buttons: [{
                        text: WtfGlobal.getLocaleText("acc.common.saveBtn"),
                        handler: function () {
                            if(this.newdono.validate()){
                                Wtf.getCmp("invoiceNo" + this.heplmodeid + this.id).setValue(this.newdono.getValue());
                                this.beforeSave();
                                this.newdowin.close();
                            }
                        },
                        scope: this
                    }, {
                        text: WtfGlobal.getLocaleText("acc.common.cancelBtn"), //"Cancel",
                        scope: this,
                        handler: function () {
                            this.newdowin.close();
                        }
                    }]
                })]
            });
            this.newdowin.show();
    }
        else if(response.msg!=undefined && response.msg!=''){
            WtfComMsgBox([this.titlel,response.msg],response.success*2+2);
        }else{
            WtfComMsgBox([this.titlel,WtfGlobal.getLocaleText("acc.common.msg1")],response.success*2+1);
    }
    }
},
genFailureResponse:function(response){
    WtfGlobal.resetAjaxTimeOut();
    this.enableSaveButtons();
    Wtf.MessageBox.hide();
    var msg=WtfGlobal.getLocaleText("acc.common.msg1");//"Failed to make connection with Web Server";
    if(response.msg)msg=response.msg;
    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg],2);
},
removeTransStore:function(){
        this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body,{productname:"&nbsp;&nbsp;&nbsp;&nbsp;",qty:0,soqty:0,poqty:0});
},
    
callEmailWindowFunction : function(response, request){
    if (response.pendingApproval) {
        var titleMsg = this.getLables();
        WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.information'), titleMsg + ' ' + WtfGlobal.getLocaleText("acc.field.ispendingforapprovalSoyoucannotsendmailrightnow")], 3);
        return;
    }
    if (this.CustomStore != null) {
//        var rec = this.CustomStore.getAt(0);
        var rec = "";
        if (response.billid != undefined || response.billid != '') {
         rec = this.CustomStore.getAt(this.CustomStore.find('billid', response.billid));
        }
        var label = "";
        if (this.isCustomer) {
            label = WtfGlobal.getLocaleText("acc.accPref.autoDO");
            if (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
                callEmailForMultipleRecords('', rec, this.label, 53, true, '', this.label, 'pdf', 24, undefined, false, true, "", Wtf.Acc_Delivery_Order_ModuleId);
            } else {
                callEmailWin("emailwin", rec, label, 53, true, false, false, false, false, true);
            }
        } else {
            label = WtfGlobal.getLocaleText("acc.accPref.autoGRO");
            if (this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId) {
                callEmailForMultipleRecords('', rec, this.label, 54, true, '', this.label, 'pdf', 24, undefined, false, true, "", Wtf.Acc_Goods_Receipt_ModuleId);
            } else {
                callEmailWin("emailwin", rec, label, 54, false, false, false, false, false, true);
            }
        }
    }
},
getLables : function(){
    var label = "";
    if (this.isCustomer) {
        label = WtfGlobal.getLocaleText("acc.accPref.autoDO");
    } else {
        label = WtfGlobal.getLocaleText("acc.accPref.autoGRO");
    }
    return label;
},
disableComponent: function(){  // disable following component in case of save button press.
    
    if(this.fromLinkCombo && this.fromLinkCombo.getValue() === ''){
        //       this.fromLinkCombo.emptyText = "";
        this.fromLinkCombo.clearValue();
    }
    
    if(this.PO && this.PO.getValue() === ''){
        this.handleEmptyText=true;
        //  this.PO.emptyText = "";
        this.PO.clearValue();
    }
        
    if(this.saveBttn){
        this.saveBttn.disable();
    }
    if(this.savencreateBttn){
        this.savencreateBttn.disable();
    }
    if(this.showAddrress){
        this.showAddrress.disable();
    }
    if(this.attachFilesBtn){
        this.attachFilesBtn.disable();
    }
        
    if(Wtf.getCmp("posttext" + this.id)){
        Wtf.getCmp("posttext" + this.id).disable();
    }
    if(this.Grid){
        var GridStore = this.Grid.getStore();
        var count2 = GridStore.getCount();
        var lastRec2 = GridStore.getAt(count2-1);
        GridStore.remove(lastRec2);
        this.Grid.purgeListeners();
    }
    
    if(this.NorthForm){
        this.NorthForm.disable();
    }
    if(this.southPanel){
        this.southPanel.disable();
    }
    if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id)){
        Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).disable();
    }
},

loadUserStore : function(response, request){
    var GridRec = Wtf.data.Record.create ([
        {name:'billid'},
        {name:'companyid'},
        {name:'companyname'},
        {name:'journalentryid'},
        {name:'entryno'},
        {name:'billto'},
        {name:'orderamount'},
        {name:'shipto'},
        {name:'mode'},
        {name:'billno'},
        {name:'date', type:'date'},
        {name:'shipdate', type:'date'},
        {name:'personname'},
        {name:'personemail'},
        {name:'billingEmail'},
        {name:'personid'},
        {name:'shipping'},
        {name:'deleted'},
        {name:'memo'},
        {name:'costcenterid'},
        {name:'costcenterName'},
        {name:'statusID'},
        {name:'shipvia'},
        {name:'fob'},
        {name:'status'},
        {name:'withoutinventory',type:'boolean'},
        {name:'isfavourite'},
        {name:'isprinted'},
        {name:'sequenceformatid'},
        {name:'isConsignment'},
        {name:'custWarehouse'},
        {name:'customerporefno'},
        {name:'movementtype'},
        {name:'termdetails'},
        {name:'termamount'}
    ]);
    
    var StoreUrl = "";
    if(this.businessPerson=="Customer"){
        StoreUrl = "ACCInvoiceCMN/getDeliveryOrdersMerged.do";
    } else {
        StoreUrl = "ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
    }
    
    this.CustomStore = new Wtf.data.GroupingStore({
        url:StoreUrl,
        baseParams:{
            costCenterId: this.CostCenter.getValue(),
            deleted:false,
            nondeleted:false,
            consolidateFlag:false,
            enddate:'',
            pendingapproval:this.pendingapproval,
            startdate:'',
            companyids:companyids,
            gcurrencyid:gcurrencyid,
            isfavourite:false,
            userid:loginid,
            ss:request.params.number
        },
        sortInfo : {
            field : 'companyname',
            direction : 'ASC'
        },
        groupField : 'companyname',
        reader: new Wtf.data.KwlJsonReader({
            root: "data",
            totalProperty:'count'
        },GridRec)
    });
        
    this.CustomStore.on('load', this.enableButtons(), this);
        
    this.CustomStore.load();
   
},

        enableButtons: function () {
        if (Wtf.getCmp("emailbut" + this.id)) {
    Wtf.getCmp("emailbut" + this.id).enable();
        }
        if (Wtf.getCmp("exportpdf" + this.id)) {
            Wtf.getCmp("exportpdf" + this.id).enable();
        }
        if (Wtf.getCmp("printSingleRecord" + this.id)) {

    Wtf.getCmp("printSingleRecord" + this.id).enable();
        }
},
enableSaveButtons:function(){
    this.saveBttn.enable();
    this.savencreateBttn.enable();
},
disableSaveButtons:function(){
    this.saveBttn.disable();
    this.savencreateBttn.disable(); 
},
exportPdfFunction : function(){
    if(this.CustomStore != null){
        var rec = this.CustomStore.getAt(0);
        var recData = rec.data;
        var selRec = "&amount="+0+"&bills="+recData.billid;
        var fileName = "";
        var mode = "";
        if(this.isCustomer){
            fileName = "Delivery Order "+recData.billno;
            mode = 53;
        }else{
            fileName="Goods Receipt "+recData.billno;
            mode = 54;
        }
        Wtf.get('downloadframe').dom.src = "ACCExportRecord/exportRecords.do?mode="+mode+"&rec="+selRec+"&personid="+recData.personid+"&filename="+fileName+"&filetype=pdf";
    }
},

getJSONArray:function(store, includeLast, idxArr){
    var indices="";
    if(idxArr)
        indices=":"+idxArr.join(":")+":";        
    var arr=[];
    var fields=store.fields;
    var len=store.getCount();
    //if(includeLast)len++;
        
    for(var i=0;i<len;i++){
        if(idxArr&&indices.indexOf(":"+i+":")<0) continue;
        var rec=store.getAt(i);
        var recarr=[];
        for(var j=0;j<fields.length;j++){
            var value=rec.data[fields.get(j).name];
            switch(fields.get(j).type){
                    case "auto":if(value!=undefined){value=(value+"").trim();}value=encodeURI(value);value="\""+value+"\"";break;
                    case "date":value="'"+WtfGlobal.convertToGenericDate(value)+"'";break;
                }
            recarr.push(fields.get(j).name+":"+value);
        }
        recarr.push("modified:"+rec.dirty);
        arr.push("{"+recarr.join(",")+"}");
    }
    return "["+arr.join(',')+"]";
},
showPONumbersGrid: function (url) {
    this.PONumberSelectionWin = new Wtf.account.PONumberSelectionWindow({
        renderTo: document.body,
        height: 500,
        id: this.id + 'PONumbersSelectionWindowDO',
        width: 1200,
        title: WtfGlobal.getLocaleText("acc.gr.DocumentSelectionWindow"),
        layout: 'fit',
        modal: true,
        resizable: false,
        url: url,
        moduleid: this.moduleid,
        columnHeader:this.fromLinkCombo.getRawValue(),
        invoice: this,
        storeBaseParams: this.POStore.baseParams,
        storeParams: this.POStore.lastOptions.params,
        PORec: this.PORec,
        fromLinkComboValue:this.fromLinkCombo.getValue()
    });
    this.PONumberSelectionWin.show();
} ,
resetProductDetailsTplSummary: function(scope,rowindex,record) {
    if(Wtf.getCmp("setButton"+this.heplmodeid+this.id))Wtf.getCmp("setButton"+this.heplmodeid+this.id).disable();
    if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id)){
        Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).disable();
    }
            
    if (this.Grid.getSelectionModel().getSelections().length == 0) {
        this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body, {
            productname: "&nbsp;&nbsp;&nbsp;&nbsp;", 
            qty: 0, 
            soqty: 0, 
            poqty: 0
        });
    }
},
setProductDetailsTplSummaryOptimised: function(scope,rowindex,record){
        if(this.Grid.sModel.getCount()>=1){
            if(Wtf.getCmp("setButton"+this.heplmodeid+this.id))Wtf.getCmp("setButton"+this.heplmodeid+this.id).enable();
        }
        if (this.Grid.sModel.getCount() >= 1 && !this.isLinkedTransaction) {
            if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id))
                Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).enable();
        } 
    
        if (this.Grid.getSelectionModel().getSelections().length == 1) {
            this.tplRec = Wtf.data.Record.create ([
           {name:'quantity'},
           {name:'openpocount'},
           {name:'sicount'},
           {name:'socount'},
           {name:'pocount'},
           {name:'type'},
           {name:'opensocount'},
           {name:'lockquantity'},
           {name:'reservestock'},
           {name:'pocountinselecteduom'},
           {name:'socountinselecteduom'},
           {name:'uomname'},
           {name:'availableQtyInSelectedUOM'},
           {name:'blockLooseSell'}
            ]);

                this.tplRecStore = new Wtf.data.Store({
                    reader: new Wtf.data.KwlJsonReader({
                        root: "data",
                        totalProperty:"totalCount"
                    },this.tplRec),
                    baseParams:{
                        ids:record.data.productid,
                        getSOPOflag:true,
                        moduleid:this.moduleid,
                        startdate:WtfGlobal.convertToGenericDate(WtfGlobal.getDates(true)),
                        enddate:    WtfGlobal.convertToGenericDate(WtfGlobal.getDates(false))
                    },
                    url:"ACCProductCMN/getOutstandingPOSOCount.do"
                }); 
                
                this.tplRecStore.on('load', function(store) {
                    if(store.getTotalCount()>0){
                    var prorec=store.getAt(0);
                    if(prorec!=undefined&&prorec!=-1&&prorec!=""){

                        var  productType;
                        if(prorec.data!=undefined && prorec.data!=null){
                            productType=prorec.data.type;
                        }

                        if(productType!=undefined && productType!=null && productType!="" && productType!="Service"){


                            var availableQuantityInBaseUOM = prorec.data['quantity'];

                            var isBlockLooseSell = prorec.data['blockLooseSell'];

                            var availableQuantityInSelectedUOM = availableQuantityInBaseUOM;

                            var pocountinselecteduom = prorec.data['openpocount'];

                            var socountinselecteduom = prorec.data['opensocount'];

                            if(isBlockLooseSell && record.get('isAnotherUOMSelected')){//
                                availableQuantityInSelectedUOM = record.get('availableQtyInSelectedUOM');

                                pocountinselecteduom = prorec.data['pocountinselecteduom'];

                                socountinselecteduom = prorec.data['socountinselecteduom'];

                            }

                            var selectedUOMName = '';

                            if(isBlockLooseSell){
                                selectedUOMName = record.get('uomname');
                            }

                            if(selectedUOMName == undefined || selectedUOMName == null || selectedUOMName == ''){
                                selectedUOMName = prorec.data['uomname'];
                            }

                            this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body,{
                                productname:record.get('productname')+" ",
                                qty:parseFloat(getRoundofValue(availableQuantityInSelectedUOM)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL)+"  "+selectedUOMName,
                                soqty:parseFloat(getRoundofValue(socountinselecteduom)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL)+"  "+selectedUOMName,
                                poqty:parseFloat(getRoundofValue(pocountinselecteduom)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL)+"  "+selectedUOMName               
                            });        

                        }else{
                            this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body, {
                                productname: "&nbsp;&nbsp;&nbsp;&nbsp;", 
                                qty: 0, 
                                soqty: 0, 
                                poqty: 0
                            });
                        }

                    } 
                }else{
                    this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body, {
                        productname: "&nbsp;&nbsp;&nbsp;&nbsp;", 
                        qty: 0, 
                        soqty: 0, 
                        poqty: 0
                    });
                }
            }, this);
            this.tplRecStore.load();
    }
},        
    
deleteSelectedRecord: function() {
    var store = this.Grid.getStore();
    var arr = [];
    var arrLinked1=[];
    var component = "";
    var deletedData = [];
    var value = "";
    var arrLinked = [];
    var arrNotLinked = [];
    var message = "Link Information of ";
    /* Link to  Combo*/
    var linkToComponent = Wtf.getCmp(this.fromLinkCombo.id);
    /* Link combo*/
    var linkComponent = Wtf.getCmp(this.fromPO.id);
    var count = 0;
    var rowindex = 0;
    var isLastProductDeletedFlag = false;
    var isNotLinkedFlag = false;
    var selectedCount = this.Grid.sModel.getCount();
    var flagType=0;
        
    for (rowindex = 0; rowindex < selectedCount; rowindex++) {

        var addFlag = false;
        var editFlag = false;
        var copyFlag = false;
          
        var record = this.Grid.sModel.getSelections()[rowindex];
        arrLinked[rowindex] = "";
        arrNotLinked[rowindex] = "";
        /* Checking Cases whether it is Add , Edit or Copy Case*/
           
        if (!this.isEdit && this.fromLinkCombo.getRawValue() != "" && (record.data.billno && record.data.billid)) {
            addFlag = true;
            flagType = 1;
        } else if (this.isEdit && this.fromLinkCombo.getRawValue() != "" && !this.copyInv) {
               
            /* In Edit case if unlinking transaction through deleting line level product 
                 * 
                 * & linking transaction with another document*/
                
            if (!this.fromPO.disabled) {//Link combo is disabled in Edit mode initially,if linked transaction is not unlinked
                addFlag = true;
                flagType = 1;
            } else {
                editFlag = true;
                flagType = 2;
            }

        } else if (this.copyInv && this.fromLinkCombo.getRawValue() != "" && (record.data.billno && record.data.billid)) {
            copyFlag = true;
            flagType = 3
        }
       


        /* Function is used to check whether selected linked product is last product or not*/

        var lastProductDeleted = false;
           
        if (editFlag) {
            lastProductDeleted = isLinkedProduct(store, record, true);
        } else if (addFlag) {
            lastProductDeleted = isLinkedProduct(store, record, false);
        } else if (copyFlag) {
            lastProductDeleted = isLinkedProduct(store, record, false);
        }
        

        if (lastProductDeleted) {
            count++;
            isLastProductDeletedFlag = true;
            if (Wtf.Acc_RFQ_ModuleId == this.moduleid & count == 1) {
                message += "Purchase Requisition <b>";
            } else {

                if (count == 1) {
                    if (editFlag) {
                        message += linkToComponent.lastSelectionText;
                    }else {
                        message += linkToComponent.lastSelectionText;
                    }
                }
            }

            if (this.PO.id) {
                if (count == 1) {
                    component = Wtf.getCmp(this.PO.id);
                    value = component.getValue();
                    arr = value.split(",");
                    arrLinked1=value.split(",");
                }

                /* Block is used to remove linked document from combo */
                if (arr.length > 1) {
                    this.linkedDocumentId += editFlag ? record.data.linkid + " , " : record.data.billid + " , ";//appending ID of removed document
                    arr.remove(editFlag ? record.data.linkid : record.data.billid);

                }else {
                    /* Reseting Link &  Link to combo if all linked document is getting removed*/
                    if (!(Wtf.Acc_RFQ_ModuleId == this.moduleid)) {
                        this.linkedDocumentId += editFlag ? record.data.linkid + " , " : record.data.billid + " , ";
                        arr.remove(editFlag ? record.data.linkid : record.data.billid);

                    } 

                }

            }
            
            var qty = record.data.quantity;
            qty = (qty == "NaN" || qty == undefined || qty == null) ? 0 : qty;

            if (record.data.copyquantity != undefined) {

                var newRec = new this.Grid.deleteRec({
                    productid: record.data.productid,
                    productname: record.data.productname,
                    productquantity: qty,
                    productbaseuomrate: record.data.baseuomrate,
                    productbaseuomquantity: record.data.baseuomquantity,
                    productuomid: record.data.uomid,
                    productrate: record.data.rate
                });
                deletedData.push(newRec);
            }
            /* Preparing array of linked product*/
            arrLinked[rowindex] = this.Grid.sModel.getSelections()[rowindex];



        }else {
            /* Block is used to delete  line level Product if they have not been linked*/
            var qty = record.data.quantity;
            qty = (qty == "NaN" || qty == undefined || qty == null) ? 0 : qty;

            if (record.data.copyquantity != undefined) {

                var newRec = new this.Grid.deleteRec({
                    productid: record.data.productid,
                    productname: record.data.productname,
                    productquantity: qty,
                    productbaseuomrate: record.data.baseuomrate,
                    productbaseuomquantity: record.data.baseuomquantity,
                    productuomid: record.data.uomid,
                    productrate: record.data.rate

                });
                deletedData.push(newRec);
            }
            isNotLinkedFlag=true;
            arrNotLinked[rowindex] = this.Grid.sModel.getSelections()[rowindex];

        }
    }
       
      
    var showPromptFlag = false;
    var linkid="";
    var message1="";
    /* Checking whether Last Product is deleted from linked documents*/
    if (isLastProductDeletedFlag) {
        for (var j = 0; j < arrLinked1.length; j++) {
                
            var recordCount = 0;
            var recordCountInLinkedArray = 0;
            var counter=0;
            /* calculating count of selected linked product*/
            for (var l = 0; l < arrLinked.length; l++) {
                if (arrLinked[l] != "") {
                    
                    linkid= (flagType==2)?arrLinked[l].data.linkid:arrLinked[l].data.billid ;
                       
                    if (linkid == arrLinked1[j]) {
                        if (counter == 0) {
                            counter++;
                            message1 += (flagType==2) ? " <b>" + arrLinked[l].data.linkto + "</b>" + " , " : " <b>" + arrLinked[l].data.billno + "</b>" + " , ";
                        }
                        recordCountInLinkedArray++;
                    }
                }
            }
            /* calculating count from store with selected linkid product*/
            store.each(function(rec) {
                  
                linkid= (flagType==2)?rec.data.linkid:rec.data.billid;
                   
                if (arrLinked1[j] == linkid) {
                    recordCount++;
                }

            }, this)

            /* checking that all linked product of particular linked transaction is selcted, if yes then showing prompt i.e showPromptFlag=true*/
            if (recordCount - recordCountInLinkedArray == 0) {
                message += message1;
                showPromptFlag = true;
            } else {
                arr[j] = arrLinked1[j];
            }
            message1="";
        }
    }

    /* Block is used to Delete Line level product after confirmation if they linked with any other document */
    if (((isLastProductDeletedFlag && isNotLinkedFlag) || isLastProductDeletedFlag) && showPromptFlag) {
        message = message.slice(0, -3);
        message += "</b> will be Removed. </br>" + WtfGlobal.getLocaleText("acc.nee.48")
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), message, function(btn) {
            if (btn != "yes")
                return;

            /* Deleting linked product by ID*/
            for (var i = 0; i < arrLinked.length; i++) {
                if (arrLinked[i] != "") {
                    var id = arrLinked[i].id;
                    store.remove(store.getById(id));
                }

            }
            if (arr.length == 0) {
                this.fromLinkCombo.disable();//Disabling "Link to" if all linked transaction is deleted 
                this.PO.disable();//Disabling "Number" if all linked transaction is deleted 
                linkToComponent.setValue("");
                linkComponent.setValue("");
                this.fromPO.enable();//Enabling "Link" combo if all linked transaction is getting deleted

            }
            component.setValue(arr);
                
            /* Block is used to Delete Line level product if they are not linked with any other document */
            if (isNotLinkedFlag) {

                /* Deleting linked product by ID*/
                for (var i = 0; i < arrNotLinked.length; i++) {
                    if (arrNotLinked[i] != "") {
                        var id = arrNotLinked[i].id;
                        store.remove(store.getById(id));
                    }

                }
            }

            this.Grid.deleteStore.add(deletedData);
            if (this.includeProTax && this.includeProTax.getValue() == true) {
                /*
                 * Recalculated Tax Amount using adaptive rounding algo on delete selected products.
                 * ERM-1085
                 */
                WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, false);
            }
            this.Grid.fireEvent('datachanged', this);
            this.Grid.fireEvent('productdeleted', this);
        }, this);
    }else{
        /* Block is used to Delete Line level product if they cannot affect linking information of that document*/
           
        /* Deleting linked product by ID*/
        for (var i = 0; i < arrLinked.length; i++) {
            if (arrLinked[i] != "") {
                var id = arrLinked[i].id;
                store.remove(store.getById(id));
            }

        }
                
        /* Deleting linked product by ID*/
        for (var i = 0; i < arrNotLinked.length; i++) {
            if (arrNotLinked[i] != "") {
                var id = arrNotLinked[i].id;
                store.remove(store.getById(id));
            }

        }
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
            updateTermDetails(this.Grid);
        }
        this.Grid.deleteStore.add(deletedData);
        if (this.includeProTax && this.includeProTax.getValue() == true) {
            /*
             * Recalculated Tax Amount using adaptive rounding algo on delete selected products.
             * ERM-1085
             */
            WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, false);
        }
        this.Grid.fireEvent('datachanged', this);
        this.Grid.fireEvent('productdeleted', this);

    }              
},
checkForDeActivatedProductsAdded:function(){
    var invalidProducts='';
    if(this.isEdit && !this.copyInv){  //Edit case
        var linkedDocuments = this.PO.getValue();
        var linkedDocsArray=[];
        if(linkedDocuments != ''){
            linkedDocsArray = linkedDocuments.split(',');
            var areDocumentsChanged = false;
            for(var x=0;x<linkedDocsArray.length;x++){
                var docId = linkedDocsArray[x];
                if(this.originallyLinkedDocuments.indexOf(docId) == -1){
                    areDocumentsChanged = true;
                    break;
                }
            }
            if(areDocumentsChanged){
                invalidProducts = this.checkDeactivatedProductsInGrid();
            }
        }
    } else { // Create New and Copy
        invalidProducts = this.checkDeactivatedProductsInGrid();
    }
    return invalidProducts;
},
checkDeactivatedProductsInGrid :function(){
    var inValidProducts=''
    var rec = null;
    var productId = null;
    var productRec = null;
    for(var count=0;count<this.Grid.store.getCount();count++){
        rec = this.Grid.store.getAt(count);
        productId = rec.data.productid;
        if(productId!= undefined && productId != null && productId != ''){
                
            if(!this.fromPO.getValue() && !this.copyInv){
                productRec = WtfGlobal.searchRecord(this.Grid.productComboStore, productId, "productid");
            } else {
                productRec = rec;
            }
            if(productRec && (productRec.data.hasAccess === false)){
                inValidProducts+=productRec.data.productname+', ';
            }    
        }
    }
    return inValidProducts; // List of deactivated products
},
    
pushToPlanner: function() {
    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.areYouSureYouWantToPushToPlanner"), function(btn) {
        if (btn == "yes") {
            this.remarkWin = new Wtf.Window({
                height: 270,
                width: 360,
                maxLength: 1000,
                title: (this.moduleid == Wtf.Acc_Purchase_Order_ModuleId) ? WtfGlobal.getLocaleText("acc.field.RemarksByPurchase") : WtfGlobal.getLocaleText("acc.field.RemarksBySales"), // "Remarks By Purchase" : "Remarks By Sales",
                bodyStyle: 'padding:5px;background-color:#f1f1f1;',
                iconCls: getButtonIconCls(Wtf.etype.deskera),
                autoScroll: true,
                allowBlank: false,
                layout: 'border',
                items: [{
                    region: 'north',
                    border: false,
                    height: 70,
                    bodyStyle: 'background-color:#ffffff;border-bottom:1px solid #bfbfbf;',
                    html: getTopHtml((this.moduleid == Wtf.Acc_Purchase_Order_ModuleId) ? WtfGlobal.getLocaleText("acc.field.RemarksByPurchase") : WtfGlobal.getLocaleText("acc.field.RemarksBySales"), "", "../../images/link2.jpg", true, "10px 0 0 5px", "7px 0px 0px 10px")
                }, {
                    region: 'center',
                    border: false,
                    layout: 'form',
                    bodyStyle: 'padding:5px;',
                    items: [this.remarkField = new Wtf.form.TextArea({
                        fieldLabel: WtfGlobal.getLocaleText("acc.field.AddRemark*"),
                        width: 200,
                        height: 100,
                        allowBlank: !this.isEdit || this.copyInv || this.isViewTemplate,
                        maxLength: 1024
                    })]
                }],
                modal: true,
                buttons: [{
                    text: WtfGlobal.getLocaleText("acc.OK"), // "OK",
                    id: 'savePushToDeliveryPlanner' + this.heplmodeid + this.id,
                    scope: this,
                    handler: function() {
                        Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).disable();

                        if (this.remarkField.getValue().trim() == ""&& this.isEdit && !this.copyInv && !this.isViewTemplate) {
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Pleaseenterremark")], 2);
                            Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable();  // ERP-10529
                            return;
                        }

                        if (!this.remarkField.isValid()) {
                            this.remarkField.markInvalid(WtfGlobal.getLocaleText("acc.field.Maximumlengthofthisfieldis1024"));
                            Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable();  // ERP-10529
                            return;
                        }
                        var deliveryLocation = this.isViewTemplate? this.record.data.getFullShippingAddress : this.fullShippingAddress
                        deliveryLocation = deliveryLocation.replace(/(<([^>]+)>)/ig," ");
                        deliveryLocation = deliveryLocation.replace(/[\n\r\t]/g," ");

                        Wtf.Ajax.requestEx({
                            url: "ACCDeliveryPlanner/savePushToDeliveryPlanner.do",
                            params: {
                                docID: this.isViewTemplate? this.record.data.billid : this.RecordID,
                                deliveryLocation: deliveryLocation,
                                pushTime: WtfGlobal.convertToGenericDate(new Date()),
                                deliveryDate: WtfGlobal.convertToGenericDate(this.shipDate.getValue()),
                                //                                    deliveryTime: this.deliveryTime.getValue(),
                                remarksBySales: this.remarkField.getValue(),
                                moduleid: this.moduleid
                            }
                        }, this, function (response) {
                            if (response.success) {
                                this.remarkWin.close();
                                this.pushToPlannerBttn.disable();
                                getDeliveryPlannerTabView(this.moduleid);
                            } else {
                                Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable();
                                var msg = WtfGlobal.getLocaleText("acc.common.msg1"); // "Failed to make connection with Web Server";
                                if(response.msg) {
                                    msg = response.msg;
                                }
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), msg], 2);
                            }
                        }, function (response) {
                            Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable();
                            var msg = WtfGlobal.getLocaleText("acc.common.msg1"); // "Failed to make connection with Web Server";
                            if(response.msg) {
                                msg = response.msg;
                            }
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), msg], 2);
                        });
                    }
                }, {
                    text: WtfGlobal.getLocaleText("acc.common.cancelBtn"),
                    scope: this,
                    handler: function() {
                        this.remarkWin.close();
                    }
                }]
            });
            this.remarkWin.show();
        }
    }, this);
    },
     /* Refresh Grid on Including GST Checked / Un- checked*/
    includingGSTOnChnage:function(obj,newval,oldval){
                /**
               * Show Alert Including GST  check enable and RCM check already ON
               */
                if (WtfGlobal.isIndiaCountryAndGSTApplied()) {
                    if (this.GTAApplicable && this.GTAApplicable.getValue()) {
                        this.includingGST.setValue(oldval);
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.common.rcm.applicable.including.gst.notallowed")], 2);
                        return;
                    }
                }
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoice.gridDataWillCleared"),function(btn){
                if(btn=="yes") {
                    this.Grid.getStore().removeAll();
                    this.Grid.addBlankRow();
                    if(this.termgrid != undefined && this.termgrid != null){
                        this.termgrid.getStore().rejectChanges();
                    }
                    
                    this.Grid.fireEvent('datachanged', this);
                    if(newval){
                        this.includeProTax.disable();
                        this.includeProTax.setValue(true);
                    }else {
                        this.isViewTemplate==true?this.includeProTax.disable():this.includeProTax.enable();
                        this.includeProTax.enable();
                        /*False means Hidden True*/
                        /*This function written in CommonERPComponent.js*/
                        this.HideShowTermAmountExcludingTaxCol(false);
                    }
                    var rec=WtfGlobal.searchRecord(this.includeProTax.store, true, 'value');
                    if(rec!=null){
                        this.includeProTaxHandler(this.includeProTax,rec,!this.includeProTax.getValue());            
                    }
                }else {
                    /**
                     *set hidden to  rateIncludingGst column from grid when
                     *including gst checkbox is unchecked.
                     */
                var rowRateIncludingGstAmountIndex = this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
                if (rowRateIncludingGstAmountIndex != -1) {
                    if (this.includingGST) {
                        this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex, true);
                    }
                }
                    obj.setValue(oldval);
            }
                },this);
      }
      
});

/*< COMPONENT USED FOR >
 *      1.Sales Retrn
 *          
 */


Wtf.account.SalesReturnPanel=function(config){
    this.modeName = config.modeName;
    this.isNoteAlso = (config.isNoteAlso)?config.isNoteAlso:false;// this.isNoteAlso flag will be true if you are creating Sale/Purchase Return with Credit/Debit Note also
    /*
     * isPayment is true while payment is creating from sales return
     */ 
    this.isPayment = (config.isPayment)?config.isPayment:false;
    Wtf.apply(this, config);
    this.sendMailFlag = false;
    this.mailFlag = false;
    this.response="";
    /*
     * For Malaysian Company 
     * isCN =true then Credit Note
     * isCN =false then Debit Note
     */
    this.isCN=config.isCN;
    this.productOptimizedFlag=Wtf.account.companyAccountPref.productOptimizedFlag;
    this.custVenOptimizedFlag = Wtf.account.companyAccountPref.custvenloadtype;
    this.request="";
    this.amountdue=0;
    this.linkedDocumentId="";
    this.isGST=WtfGlobal.GSTApplicableForCompany()==Wtf.GSTStatus.NEW?true:false;   //ERP-32829 
     /**
     * Below variable is used to keep term details of source document 
     * in linking case and edit case when source document contains flat tax value
     * i.e. he has changed tax value manually
     */
    this.keepTermDataInLinkCase=false; // Used to keep term term details as it is i.e. dont recalculate
    this.uniqueCase=0; 
    this.sezfromdate=0; 
    this.seztodate=0; 
    this.transactiondateforgst=null;
    this.isShipping=CompanyPreferenceChecks.getGSTCalCulationType();
    this.addressMappingRec="";   // ERP-32829 
    this.linkedInvoiceTotalAmountDue=0;
    this.isViewTemplate=config.isViewTemplate;
    this.CustomStore="";
    this.uPermType=(config.isCustomer?Wtf.UPerm.salesreturn:Wtf.UPerm.purchasereturn);
    this.permType=(config.isCustomer?Wtf.Perm.salesreturn:Wtf.Perm.purchasereturn);
    this.exportPermType=config.isCustomer?this.permType.exportsret:(this.permType.exportpret);
    this.printPermType=config.isCustomer?this.permType.printsret:(this.permType.printpret);
    this.moduleid=config.moduleid;
    //Flag to indicate whether Avalara integration is enabled and module is enabled for Avalara Integration or not
    this.isModuleForAvalara = (Wtf.account.companyAccountPref.avalaraIntegration && (config.moduleid == Wtf.Acc_Sales_Return_ModuleId)) ? true : false;
    this.salesPurchaseReturnflag = false;
    this.cnAgainstVenGstflag = false;
    this.saveOnlyFlag = false;
    this.saveandcreateBtn = false; //ERP-18517
    var help=getHelpButton(this,config.heplmodeid);
    this.businessPerson=this.isCustomer?'Customer':"Vendor";
    this.isLeaseFixedAsset = (config.isLeaseFixedAsset)?config.isLeaseFixedAsset:false;
    this.record=config.record;
    this.copyInv=config.copyInv;
    this.remainingQuantity=0;
    this.isCurrencyStoreLoaded = false;
    this.originallyLinkedDocuments = '';
    this.CustomerVendorTypeId="";
    this.GSTINRegistrationTypeId="";
    this.gstin="";
    this.gstdochistoryid="";
    this.isIndiaGST=WtfGlobal.isIndiaCountryAndGSTApplied();  
    this.ignoreHistory=false;
    this.currencyBeforeSelect="";
    this.includeDeactivatedTax = this.isEdit != undefined? (this.copyInv ? false : this.isEdit): false
    this.personRec = new Wtf.data.Record.create ([
    {
        name:'accid'
    },

    {
        name:'accname'
    },
    {
        name:'acccode'
    },

    //        {name: 'level'},

    {
        name: 'termdays'
    },

    {
        name: 'billto'
    },

    {
        name: 'currencysymbol'
    },

    {
        name: 'currencyname'
    },

    {
        name: 'currencyid'
    },

    {
        name:'deleted'
    }
    ]);
    
    var tranType= (this.isCN != undefined && !this.isCN) ? Wtf.autoNum.DebitNote : (this.isCN != undefined && this.isCN) ? Wtf.autoNum.CreditNote : (this.isCustomer)?Wtf.autoNum.SalesReturn:Wtf.autoNum.PurchaseReturn;
    this.customerAccStore =  new Wtf.data.Store({
        //    url:Wtf.req.account+'CustomerManager.jsp',        
        url:this.isCustomer?"ACCCustomer/getCustomersForCombo.do":"ACCVendor/getVendorsForCombo.do",
        baseParams:{
            mode:2,
            group:this.isCustomer?10:13,
            deleted:false,
            nondeleted:true,
            combineData:this.isCustomer?1:-1  //Send For Seprate Request
        },
        reader: new  Wtf.data.KwlJsonReader({
            root: "data",
            autoLoad:false
        },this.personRec)
    });

    var isEditORisCopy=(this.isEdit !=undefined ?this.isEdit:false) || (this.copyInv !=undefined ?this.copyInv:false); // Load All Customers in Edit and Copy case
    this.customerAccStore.on('beforeload', function(s,o){
        if(!o.params)o.params={};
        var currentBaseParams = this.customerAccStore.baseParams;
        if(isEditORisCopy){
            currentBaseParams.isPermOrOnetime=""; // Empty to Load all Customers.
        }else{
            if(this.ShowOnlyOneTime != undefined && this.ShowOnlyOneTime.getValue() == true){
                currentBaseParams.isPermOrOnetime=true; // True to load One Time Customers
            }else{
                currentBaseParams.isPermOrOnetime=false; // False To load Permanent Customers
            }
        }
        this.customerAccStore.baseParams=currentBaseParams;
    }, this);
    this.customerAccStore.load();
    Wtf.customerAccRemoteStore.on('beforeload', function(s, o) {
        if (!o.params)
            o.params = {};
        var currentBaseParams = Wtf.customerAccRemoteStore.baseParams;
        if (isEditORisCopy) {
            currentBaseParams.isPermOrOnetime = "";
        } else {
            if (this.ShowOnlyOneTime != undefined && this.ShowOnlyOneTime.getValue() == true) {
                currentBaseParams.isPermOrOnetime = true;
            } else {
                currentBaseParams.isPermOrOnetime = false;
            }
        }
        Wtf.customerAccRemoteStore.baseParams = currentBaseParams;
    }, this);
//    if(!WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)){
        this.singlePrint=new Wtf.exportButton({		
            text: WtfGlobal.getLocaleText("acc.rem.236"),
            tooltip: WtfGlobal.getLocaleText("acc.rem.236.single"), //'Print Single Record Details',		
            scope:this,
            id:"exportpdf" + this.id,
            iconCls: 'pwnd printButtonIcon',
            hidden:!this.readOnly || WtfGlobal.EnableDisable(this.uPermType, this.printPermType) || WtfGlobal.EnableDisable(this.uPermType, this.exportPermType),
            disabled: this.readOnly ? false : true,
            obj:this,
            exportRecord:this.exportRecord,
            menuItem:{
                rowPdf:true,
                rowPdfPrint:true,
                rowPdfTitle:WtfGlobal.getLocaleText("acc.rem.39")
            },// + " "+ singlePDFtext},
            get:tranType,
            moduleid:config.moduleid
        });
//    }
    

//    if (!WtfGlobal.EnableDisable(this.uPermType, this.printPermType)) {
//        this.singleRowPrint = new Wtf.exportButton({
//            obj: this,
//            id: "printSingleRecord" +this.id,
//            iconCls: 'pwnd printButtonIcon',
//            text: WtfGlobal.getLocaleText("acc.rem.236"),
//            tooltip: WtfGlobal.getLocaleText("acc.rem.236.single"), //'Print Single Record Details',
//            disabled: this.readOnly ? false : true,
//            hidden:WtfGlobal.EnableDisable(this.uPermType, this.exportPermType),
//            isEntrylevel: false,
//            exportRecord: this.exportRecord,
//            menuItem: {
//                rowPrint: true
//            },
//            get: tranType,
//            moduleid: config.moduleid
//        });
//    }
    this.saveBttn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.common.saveBtn"),  //'Save',
        tooltip:WtfGlobal.getLocaleText("acc.rem.175"),
        id:"save"+this.id,
        scope:this,
        hidden:this.readOnly,
        disabled:(this.contractStatus==3),
        handler:function(){
            this.mailFlag = true;
            this.saveOnlyFlag = true;
            if(this.isEdit && !this.copyInv){
                var documentNo=this.Number.getValue();
                if(documentNo==null || documentNo==undefined || documentNo==""){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.NumberBlankAlert")], 2);
                    this.enableSaveButtons();
                    return ;
                }
            }
            this.save();
        },
        iconCls :'pwnd save'
    });
     
    this.savencreateBttn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.field.SaveAndCreateNew"),     //Save & Create
        tooltip:WtfGlobal.getLocaleText("acc.field.SaveAndCreateNewToolTip"),
        id:"savencreate"+config.heplmodeid+this.id,
        scope:this,
        disabled:(this.contractStatus==3),
        hidden : this.isEdit || this.copyInv,
        handler:function(){
            this.mailFlag = false;
            this.saveOnlyFlag = false;
            this.saveandcreateBtn =true; //ERP-18517
            if(this.isEdit && !this.copyInv){
                var documentNo=this.Number.getValue();
                if(documentNo==null || documentNo==undefined || documentNo==""){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.NumberBlankAlert")], 2);
                    this.enableSaveButtons();
                    return ;
                }
            }
            this.save();
        },
        iconCls :'pwnd save'
    });
    
    this.pushToPlannerBttn=new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.field.pushToPlanner"), // "Push to Planner",
        tooltip: WtfGlobal.getLocaleText("acc.field.pushToPlanner"), // "Push to Planner",
        id: "pushtoplanner" + config.heplmodeid + this.id,
        style:" padding-left: 15px;",
        cls: 'pwnd add',
        hidden: !(Wtf.account.companyAccountPref.deliveryPlanner && (config.moduleid == Wtf.Acc_Sales_Return_ModuleId)),
        disabled: this.isViewTemplate? false : true,
        scope: this,
        handler: function() {
            this.pushToPlanner();
        }
    });
    this.email=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.common.email"),  // "Email",
        tooltip : WtfGlobal.getLocaleText("acc.common.emailTT"),  //"Email",
        id: "emailbut" + this.id,
        scope: this,
        disabled : true,
        hidden:this.readOnly,
        handler: function(){
            this.callEmailWindowFunction(this.response, this.request)
            },
        iconCls: "accountingbase financialreport"
    });
    
    this.posttextbtn = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.template.posttext"), //'<b>Post Text</b>',
        cls: 'pwnd add',
        disabled: (this.contractStatus == 3),
        id: "posttext" + this.id, // Post Text
        hidden: this.readOnly,
        tooltip: WtfGlobal.getLocaleText("acc.field.UsePostTextoptiontoinserttextafterSignature"),
        style: " padding-left: 15px;",
        scope: this,
        handler: function () {
            this.getPostTextEditor(this.postText);
        }
    });
    
    this.showAddrress=new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.field.ShowAddress"), 
        cls: 'pwnd add',
        id: "showaddress" + this.id,                
        tooltip : WtfGlobal.getLocaleText("acc.field.UseShowAddressoptiontoinsertAddresses"),       
        style:" padding-left: 15px;",
        scope: this,
        handler:this.getAddressWindow 
    });
    
    var bottombtnArray=new Array();
    //CnType =5 is for Credit note Against Vendor for Gst
    if(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA||this.inputValue==Wtf.NoteForOvercharge){
        bottombtnArray.push(this.saveBttn,this.showAddrress);
    }else{
        bottombtnArray.push(this.saveBttn,this.savencreateBttn,this.email,this.pushToPlannerBttn,this.posttextbtn);
    }
    if(!WtfGlobal.EnableDisable(this.uPermType, this.printPermType) || !WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)){
        bottombtnArray.push(this.singlePrint);
    }
//    if(!WtfGlobal.EnableDisable(this.uPermType, this.printPermType)){
//        bottombtnArray.push(this.singleRowPrint);
//    }
    Wtf.apply(this,{
        bbar:[bottombtnArray,{
            text:  WtfGlobal.getLocaleText("acc.common.close") , //'<b>Close</b>',
            cls: 'pwnd add',
            id: "posttext" + this.id,              // Close
            hidden:(this.contractStatus == null || this.contractStatus == undefined || this.contractStatus==2 ||this.contractStatus==4 ||this.readOnly),        
            tooltip : WtfGlobal.getLocaleText("acc.common.closebtn.Tooltip"),        
            style:" padding-left: 15px;",
            scope: this,
            handler: this.closeContract
        },'->']
    });
    Wtf.account.SalesReturnPanel.superclass.constructor.call(this,config);
    this.addEvents({
        'update':true
    });
    /**
    * Product Grid not showing properly after Expanding/Collapsing Navigation Panel.
    */
    this.on('resize', function (panel) {
        if (panel.Grid) {
            panel.doLayout();
            panel.Grid.doLayout();
            panel.Grid.getView().refresh();
        } else {
            panel.doLayout();
}
    }, this);
}

Wtf.extend(Wtf.account.SalesReturnPanel,Wtf.account.ClosablePanel,{
    autoScroll: true,// layout:'border',//Bug Fixed: 14871[SK]
    bodyStyle: {
        background:"#DFE8F6 none repeat scroll 0 0"
    },
    border:'false',
    externalcurrencyrate:0,
    isCurrencyLoad:false,
    currencyid:null,
    custdatechange:false,
    closable : true,
    cash:false,
    exchangeratetype:"",
    revexternalcurrencyrate:0,

    loadRecord:function(){
        if(this.record!=null&&!this.dataLoaded){
            var data=this.record.data;
            this.NorthForm.getForm().loadRecord(this.record);
            this.externalcurrencyrate=data.externalcurrencyrate;
            if (this.isCurrencyStoreLoaded) {
                this.Currency.setValue(data.currencyid);
                this.updateFormCurrency();
            } else {
                this.currencyStore.on('load',function () {
                    this.Currency.setValue(data.currencyid);
                    this.updateFormCurrency();
                },this);
            }
            
            if(this.copyInv){//iF COPY AND SEQUENCE FORMAT IS NA
                this.Number.setValue("");                
            }else{
                if(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue==Wtf.NoteForOvercharge){
                    this.Number.setValue(data.noteno);
                }else{
                    this.Number.setValue(data.billno);
                }
            }
            if(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA||this.inputValue==Wtf.NoteForOvercharge){
                this.includeProTax.disable();
                this.Tax.disable();
                this.isTaxable.disable();
            }
            if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
                if (!this.record.data.isInterstateParty ) {
                    WtfGlobal.hideFormElement(this.FormType);                
                } else {
                    if (this.record.data.formtypeid != undefined && this.record.data.formtypeid == 0) {
                        this.FormType.setValue(1);
                    } else {
                        this.FormType.setValue(this.record.data.formtypeid);
                    }
                }
                if (this.isIndiaGST) {
                    if (this.record.data.CustomerVendorTypeId != undefined) {
                        this.CustomerVendorTypeId = this.record.data.CustomerVendorTypeId;
                    }
                    if (this.record.data.GSTINRegistrationTypeId != undefined) {
                        this.GSTINRegistrationTypeId = this.record.data.GSTINRegistrationTypeId;
                    }
                    if (this.record.data.gstin != undefined) {
                        this.gstin = this.record.data.gstin;
                    }
                    if (this.record.data.gstdochistoryid != undefined) {
                        this.gstdochistoryid = this.record.data.gstdochistoryid;
                    }
                }
                }
            //            var store=this.isCustomer ? Wtf.customerAccStore : Wtf.vendorAccStore;
            //            var index=store.findBy( function(rec){
            //                var parentname=rec.data['accid'];
            //                if(parentname==data.personid)
            //                    return true;
            //                 else
            //                    return false;
            //            })
            //            if(index>=0) {
            //                this.Name.setValue(data.personid);
            //            }
            this.Name.setValForRemoteStore(data.personid, data.personname,data.hasAccess); // create record and set value
            //Need to check this.
            if(this.Grid.getStore().data.items.length>0){  // for showing multiple link numbers in number field 
                var linkType=-1;
                var storeData = [],linkNumbers=[],linkIDS=[];
                this.POStore.removeAll();
                this.Grid.getStore().each(function(rec){
                    if(this.copyInv) { 
                        rec.data.linkid=""; 
                        rec.data.rowid=""; 
                        rec.data.linktype=linkType;
                        rec.data.linkto="";
                        if(rec.data.isBatchForProduct || rec.data.isSerialForProduct){
                            rec.data.batchdetails=""; //in copy case batchdetails made empty
                        }
                    } else {
                        var dataRec="";
                            dataRec=rec.data;
                        if((dataRec.linkto!=""&&dataRec.linkto!=undefined) && (dataRec.linktype!=-1 && dataRec.linktype!=undefined)){
                            var isExistFlag=false;
                            for(var count=0;count<linkNumbers.length;count++){
                                if(dataRec.linkto==linkNumbers[count]){
                                    isExistFlag=true;
                                    break;
                                }
                            }
                            if(isExistFlag==false){
                                linkNumbers.push(dataRec.linkto);
                                linkIDS.push(dataRec.linkid);
                            }                                                        
                            linkType=dataRec.linktype;                            
                            var newRec=new this.PORec({
                                billid: dataRec.linkid,
                                billno: dataRec.linkto,
                                date: dataRec.invcreationdate,
                                journalentryid: dataRec.invjournalentryid,
                                entryno: dataRec.invjeentryno,
                                billto: dataRec.invbillto,
                                discount: dataRec.invdiscount,
                                amountinbase: dataRec.invamountinbase,
                                amountdue: dataRec.invamountdue,
                                amount : dataRec.invamount,
                                gstIncluded : dataRec.gstIncluded
                            });
                            storeData.push(newRec);
                        }
                    }
                    
                    
                    if (this.moduleid == Wtf.Acc_Sales_Return_ModuleId && rec.json != undefined && rec.json.partamount != undefined && rec.json.partamount > 0) {
                        /* Disabling following fields when SR(linked with partial invoice) is edited*/
                        var unitPrice = this.Grid.getColumnModel().findColumnIndex("rate")
                        this.Grid.getColumnModel().setEditable(unitPrice, false)
                        var discountType = this.Grid.getColumnModel().findColumnIndex("discountispercent")
                        this.Grid.getColumnModel().setEditable(discountType, false)
                        var discount = this.Grid.getColumnModel().findColumnIndex("prdiscount")
                        this.Grid.getColumnModel().setEditable(discount, false)
                        var productTax = this.Grid.getColumnModel().findColumnIndex("prtaxid")
                        this.Grid.getColumnModel().setEditable(productTax, false)
                        var deliveredQuantity = this.Grid.getColumnModel().findColumnIndex("dquantity")
                        this.Grid.getColumnModel().setEditable(deliveredQuantity, false)
                        var actualQuantity = this.Grid.getColumnModel().findColumnIndex("quantity")
                        this.Grid.getColumnModel().setEditable(actualQuantity, false)
                    }
                },this);
                if(storeData.length>0){
                    this.POStore.add(storeData);
                }
                if(linkIDS.length>0){                    
                    this.Name.disable();
                    this.fromPO.disable();
                    this.fromLinkCombo.disable();
                    this.PO.disable();
                    this.fromPO.setValue(true);                
                    this.PO.setValue(linkIDS);
                }
                if(linkType!=-1){
                    this.fromLinkCombo.setValue(linkType);
                    }
                }
            if ((this.copyInv || this.isEdit)) {
                this.isCustomer ? Wtf.salesPersonFilteredByCustomer.load() : Wtf.agentStore.load();
            }
            this.Memo.setValue(data.memo);
            this.billDate.setValue(data.date); 
            this.CostCenter.setValue(data.costcenterid);
            this.editedBy.setValue(data.lasteditedby);
            this.postText = (this.record && this.record.json && this.record.json.posttext )?this.record.json.posttext:(this.record && this.record.data && this.record.data.posttext )?this.record.data.posttext :"";
            
            this.includingGST.reset();
            if(this.isViewTemplate==true){
                this.includingGST.disable()
            }else{
                this.includingGST.enable();
            }
            if(this.record && this.record.data['ewayapplicable']){
                this.isEWayCheck.setValue(this.record.data['ewayapplicable']);                    
            }
            /*check/uncheck include GST on load record edit/view case*/
           
            if(this.record.data.gstIncluded!=undefined){
                this.includingGST.setValue(this.record.data.gstIncluded);
                if(this.record.data.gstIncluded){
                    this.includeProTax.setValue(true);
                    this.includeProTax.disable();
                    var rowRateIncludingGstAmountIndex = this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
                    if (rowRateIncludingGstAmountIndex != -1) {
                        if (this.includingGST.getValue()) {
                            this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex, !this.includingGST.getValue());
                        }
                    }
                }
            }
            if (data.includeprotax) {
                this.includeProTax.setValue(true);
                this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                this.applyTaxToTermsChk.setValue(data.isapplytaxtoterms);
                
                if (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue==Wtf.NoteForOvercharge) {
                    this.showGridTax(null, null, false);
                } else {
                    if (this.isCustomer) {
                        if (Wtf.account.companyAccountPref.unitPriceInSR) {
                            this.showGridTax(null, null, false);
                        }
                    } else {
                        if (Wtf.account.companyAccountPref.unitPriceInPR) {
                            this.showGridTax(null, null, false);
                        }
                    }
                }

                /**
                 * Commented below code due to no need to call showGridTax() function in edit call/loadRecord call case.
                 */
//                if (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue==Wtf.NoteForOvercharge) {
//                    this.showGridTax(null, null, false);
//                } else {
//                    if (this.isCustomer) {
//                        if (Wtf.account.companyAccountPref.unitPriceInSR) {
//                            this.showGridTax(null, null, false);
//                        }
//                    } else {
//                        if (Wtf.account.companyAccountPref.unitPriceInPR) {
//                            this.showGridTax(null, null, false);
//                        }
//                    }
//                }
                this.isTaxable.setValue(false);//when selecting record with product tax.Tax should get disabled.
                this.isTaxable.disable();
                this.Tax.setValue("");
                this.Tax.disable();
            } else {
                this.includeProTax.setValue(false);
                this.applyTaxToTermsChkHideShow(false);
                if (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA) {
                   this.showGridTax(null, null, true);
                } else {
                     if (this.isCustomer) {
                        if (Wtf.account.companyAccountPref.unitPriceInSR) {
                            this.showGridTax(null, null, true);
                        }
                    } else {
                        if (Wtf.account.companyAccountPref.unitPriceInPR) {
                            this.showGridTax(null, null, true);
                        }
                    }
                }
                //CnType =5 is for Credit note Against Vendor for Gst
                if(this.inputValue!=Wtf.CNDN_TYPE_FOR_MALAYSIA && this.inputValue!=Wtf.NoteForOvercharge){
                    this.Tax.enable();//required because when selected multiple records & changing to select single record.Before it was getting disabled.
                    this.isTaxable.enable();
                }
                
            }
            if ((data.taxid == "")) {//generate so or po it should not show taxid
                this.isTaxable.setValue(false);
                this.Tax.setValue("");
                this.Tax.disable();
            } else {
                
                if(this.inputValue!=Wtf.CNDN_TYPE_FOR_MALAYSIA && this.inputValue!=Wtf.NoteForOvercharge){
                    this.isTaxable.enable();
                    this.Tax.enable();//enable the tax when taxid is present-for edit case it was not required but for copy its is required.
                }
                
                /*
                 Input Value  : 5  : Credit not against vendor, Debit note against Customer
                  */
                if(data.taxid!=undefined&&data.taxid!=""&&this.inputValue!=Wtf.CNDN_TYPE_FOR_MALAYSIA && this.inputValue!=Wtf.NoteForOvercharge){
//                    if (this.copyInv) {
//                        if (isTaxActivate(this.Grid.taxStore, data.taxid, "prtaxid")) {
//                            this.Tax.setValue(data.taxid);
//                        } else {
//                            this.Tax.setValue("");
//                        }
//                    } else {
                        this.Tax.setValue(data.taxid);
//                    }
                    this.isTaxable.setValue(true);
                    }
                /*
                 * For Global Tax If Debit Note against customer
                 */
                if((this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA||this.inputValue==Wtf.NoteForOvercharge) && data.gTaxId!=""){
                    this.includeProTax.setValue(false);
                    this.Tax.setValue(data.gTaxId);
                    this.isTaxable.setValue(true);
                    
                }
            }
            if(this.isTaxable != undefined && this.isTaxable.getValue()){
                /*This block will execute only when Global Level tax is applied
                *True means Hidden False
                *This function written in CommonERPComponent.js
                */
               if(!(this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)){
                    this.HideShowLinkedTermTaxAndTermTaxAmountCol(true);
               }
            }
            if(this.readOnly){
                this.isTaxable.disable();
                this.Tax.disable();
            }
            if (WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.OLDNEW || WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.NEW) {
                /**
                 * ERP-32829 
                 * GST flag based on saved value in Edit case
                 */
                /*As discussed with Swapnil K. sir following code(8291-8297) is added in comment beacause "In Edit and copy case of purchase/sales return tax amount was not displayed ERP-37918"*/
//                if (this.record.data.gstapplicable) {
//                    this.isGST = true;
//                    this.Grid.isGST = true;
//                }else {
//                    this.isGST = false;
//                    this.Grid.isGST = false;
//                }
            }
            this.dataLoaded=true;
            //            this.Grid.priceStore.load({params:{transactiondate:WtfGlobal.convertToGenericDate(this.billDate.getValue())}});
            //this.bankTypeStore.load();            
            if(this.Grid){
                this.Grid.forCurrency =data.currencyid;
                this.Grid.affecteduser=data.personid;
                this.Grid.billDate=data.date;
            }
            if(this.copyInv && this.Grid){
                this.Grid.billDate=Wtf.serverDate;
            }
            this.setTermValues(data.termdetails);
            //            if(this.copyInv){
            //            	this.billDate.setValue(data.date);
            ////            	this.updateDueDate();
            //            }
            this.val=this.billDate.getValue();
            this.updateSubtotal();
            
            //ERP-41011:In Edit & Copy case setting remote store without loading salesperson/agent store
            //Case1 : Over undercharged Debit Note/Credit Note
            if((this.inputValue==5 || this.inputValue == Wtf.NoteForOvercharge)&& !this.isCustomer && this.record!=undefined){
                this.users.setValForRemoteStore(this.record.data.agentid , this.record.data.agent,this.record.data.hasAccess);
            }
            //Case 2: For overcharged case Debit Note/Credit Note
            else if((this.inputValue==5 || this.inputValue == Wtf.NoteForOvercharge)&& this.isCustomer && this.record!=undefined){
                this.users.setValForRemoteStore(this.record.data.salesPersonID , this.record.data.salesPerson,this.record.data.hasAccess);
            }//Case 3 :For Sales Return.In Purchase Return, we don't have agent combo field 
            else if((this.copyInv || this.isEdit)){
                if(this.isCustomer){
                    // In edit and copy case setting remote store. ['hasAccess] is important else it won't save in copy case 
                    if(this.record.data.salesPerson!="" && this.record.data.mapSalesPersonName!=""){
                        this.users.setValForRemoteStore(this.record.data.salesPerson , this.record.data.mapSalesPersonName,this.record.data.hasAccess);
                    }else{ //setting None as record is not present
                        this.users.setValForRemoteStore("None" ,"None",true);
                    }
                }else{ //Purchase Side
                    // In edit and copy case setting remote store. ['hasAccess] is important else it won't save in copy case 
                    if(this.record.data.agent!="" && this.record.data.agentname!=""){
                        this.users.setValForRemoteStore(this.record.data.agent , this.record.data.agentname,this.record.data.hasAccess);
                    }else{ //setting None as record is not present
                        this.users.setValForRemoteStore("None" ,"None",true);
                    }
                }   
            }
            
            // Copied below code from invoice.js to handle same case in open TDS window in Edit case of Purchase return with debit note. ERM-443
             /*
              * In Edit case Tax mapped in vendor master not loaded at Line level Grid that's why we loaded data of perticular vendor -SDP-7500
             */
            if(Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Purchase_Return_ModuleId && this.isNoteAlso){
                Wtf.vendorAccRemoteStore.load({
                    params: {
                        vendorid: data.personid
                    }
                });
            }
            /**
             * Populate Customer/ Vendor GST details in Edit/   Copy Case
             */
            this.populateGSTDataOnEditCopy()
        }        
    },
    onRender:function(config){
        this.add(this.NorthForm,this.formpPanelOfbutton,this.Grid,this.southPanel);                       
        Wtf.account.SalesReturnPanel.superclass.onRender.call(this, config);
        this.isClosable=false    
        this.initForClose();
        // hide form fields
        if( this.isEdit ){
            this.isClosable=false          // Set Closable flag for edit and copy case
        }
        if(this.readOnly == true){
            this.isClosable =true;
        }
        this.hideFormFields();
        /**
         * ERP-32829 
         * set GST flag based on Date 
         */
//        if (WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.OLDNEW || WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.NEW) {
//            this.setGSTFlagUsingApplicableDate(Wtf.serverDate);
//        }
        if (Wtf.account.companyAccountPref.countryid === Wtf.CountryID.MALAYSIA) {
            this.enableDisableTaxUsingGSTActivationDate(); // enable/disble tax
        }
        this.on("activate",function(){
           /*---Apply tax to term will be Yes--------  */
            if (this.includeProTax && this.includeProTax.getValue()) {
                if(!(this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)){
                    this.applyTaxToTermsChkHideShow(true);
                }
            } else if (!this.isEdit) {
                this.applyTaxToTermsChkHideShow(false);
            }
        },this);
        
        /*---If check "Map taxes at product level" true then by default "Include Product Tax" field will be Yes--------  */
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
            this.includeProTax.setValue(true);
        }   
    },
    calCulateNonTaxableTermAmount: function () {
        var OtherTermNonTaxableAmount = 0;
        if (Wtf.account.companyAccountPref.isLineLevelTermFlag == 1) {   // Term Amount of line item showing as tax in  Line level terms Company.
            var store = this.Grid.store;
            var totalCnt = store.getCount();
            for (var cnt = 0; cnt < totalCnt; cnt++) {
                var lineAmt = store.getAt(cnt).data.OtherTermNonTaxableAmount;
                if (typeof lineAmt == 'number')
                    OtherTermNonTaxableAmount += getRoundedAmountValue(lineAmt);
            }
        }
        return getRoundedAmountValue(OtherTermNonTaxableAmount);
    },
    calculateTDSAmount : function(){ // Calculate TDS amount
        var tdsAmount=0;
        if(Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Purchase_Return_ModuleId && this.isNoteAlso){
            tdsAmount = this.calTotalTDSAmount();//TDS assessable value which is same as lines total amount. currently we have provided this feture in expense not for product invoice
        }
//        if(Wtf.isTDSApplicable){
//            tdsAmount -= this.TotalAdvanceTDSAdjustmentAmt;
//        }
        return getRoundedAmountValue(tdsAmount); 
     },
    hideFormFields:function(){
        if(this.isCustomer){
            this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.salesReturn);
        }else{
            this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.purchaseReturn);
        }
    },
    hideTransactionFormFields:function(array){
        if(array){
            for(var i=0;i<array.length;i++){
                var fieldArray = array[i];
                if(Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id)){
                    if(fieldArray.fieldId=="ShowOnlyOneTime" && ((this.isEdit !=undefined ?this.isEdit:false) || (this.copyInv !=undefined ?this.copyInv:false))){
                        continue;
                    }
                    Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).hideLabel = fieldArray.isHidden;
                    Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).hidden = fieldArray.isHidden;
                    if(fieldArray.isReadOnly){
                        Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).disabled = fieldArray.isReadOnly;
                    }
                    if(fieldArray.isUserManadatoryField  && Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel != undefined){
                        Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).allowBlank = !fieldArray.isUserManadatoryField;
                        var fieldLabel="";
                        if(fieldArray.fieldLabelText!="" && fieldArray.fieldLabelText!=null && fieldArray.fieldLabelText!=undefined){
                            fieldLabel= fieldArray.fieldLabelText+" *";
                        }else{
                            fieldLabel=(Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel) + " *";
                        }
                        Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel = fieldLabel;
                    }else{
                        if( fieldArray.fieldLabelText!=null && fieldArray.fieldLabelText!=undefined && fieldArray.fieldLabelText!=""){
                            if(fieldArray.isManadatoryField && fieldArray.isFormField )
                                Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel=fieldArray.fieldLabelText +"*";
                            else
                                Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel=fieldArray.fieldLabelText;
                        }
                    }
                }
            }
        }
    },
    enableDisableTaxUsingGSTActivationDate: function() {
        var date = this.billDate.getValue() === "" ? new Date() : new Date(this.billDate.getValue());
        var isTaxShouldBeEnable = WtfGlobal.isTaxShouldBeEnable(date.clearTime());
        if (!isTaxShouldBeEnable) {
            if (this.isTaxable) { // include total tax
                this.isTaxable.setDisabled(true);
            }
            if (this.includeProTax) {
                this.includeProTax.setDisabled(true);
            }
        } else {
            if (this.isTaxable) {// include total tax
                this.isTaxable.setDisabled(false);
            }
            if (this.includeProTax) { // include product tax
                this.includeProTax.setDisabled(false);
            }
        }
    },
    initComponent:function(config){
        Wtf.account.SalesReturnPanel.superclass.initComponent.call(this,config);
        //Load Stores which is assigned to user 
        //chkWarehouseload();
         this.beforeSaveReasonCheck();
        this.tplSummary=new Wtf.XTemplate(
            '<div class="currency-view">',
            '<table width="100%">',
            '<tr><td><b>'+WtfGlobal.getLocaleText("acc.invoice.subTotal")+' </b></td><td align=right>{subtotal}</td></tr>',
            '</table>',
            '<table width="100%">',
            '<tr><td><b>+ '+WtfGlobal.getLocaleText("acc.field.InvoiceTerm")+' </b></td><td align=right>{termtotal}</td></tr>',
            '<tr><td><b>'+WtfGlobal.getLocaleText("acc.field.AmountBeforeTax")+' </b></td><td align=right>{amountbeforetax}</td></tr>',
            '<tr><td><b>+ '+WtfGlobal.getLocaleText("acc.invoice.Tax")+': </b></td><td align=right>{tax}</td></tr>',
            '<tr style=\"display:'+ (Wtf.account.companyAccountPref.isLineLevelTermFlag ? 'table-row' : 'none') +'\" ><td><b>+ '+WtfGlobal.getLocaleText("Other Charges")+': </b></td><td align=right>{nontaxableamount}</td></tr>',
            '<tr style=\"display:'+ (Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Purchase_Return_ModuleId && this.isNoteAlso ? 'table-row' : 'none') +'\" ><td><b>- '+WtfGlobal.getLocaleText("acc.invoice.tds")+': </b></td><td align=right>{tdsamount}</td></tr>',
            '</table>',
            '<table width="100%">',
            '</table>',
            '<hr class="templineview">',
            '<table width="100%">',
            '<tr><td ><b>'+WtfGlobal.getLocaleText("acc.invoice.totalAmt")+' </b></td><td align=right>{aftertaxamt}</td></tr>',
            '</table>',
            '<table width="100%">',
            '<tr><td ><b>'+WtfGlobal.getLocaleText("acc.invoice.totalAmtInBase")+' </b></td><td align=right>{totalAmtInBase}</td></tr>',
            '</table>',
            '<hr class="templineview">',
            '</table>',
            '<table width="100%">',
            //                '<tpl if="'+(!this.isOrder || this.quotation)+'">',
            '<tr><td ><b>'+WtfGlobal.getLocaleText("acc.inv.amountdue")+' </b></td><td align=right>{amountdue}</td></tr>',
            '</table>',
            '<hr class="templineview">',
            '<hr class="templineview">',
            '</div>'
            );
        
        
        //chkcustaccload();// Global Customer store  
        this.isCustomer ? chkproductSalesload() : chkproductload() ; // Global Product store for product sales
        
       
        this.loadCurrFlag = true;
        
        this.GridRec = Wtf.data.Record.create ([
        {
            name:'id'
        },

        {
            name:'number'
        }
        ]);
        this.sequenceFormatStoreRec = new Wtf.data.Record.create([
        {
            name: 'id'
        },

        {
            name: 'value'
        },
        {
            name: 'oldflag'
        }
        ]);
        this.sequenceFormatStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                totalProperty:'count',
                root: "data"
            },this.sequenceFormatStoreRec),
            //        url: Wtf.req.account +'CompanyManager.jsp',
            url : "ACCCompanyPref/getSequenceFormatStore.do",
            baseParams:{
                mode:this.modeName,
                isEdit: this.copyInv ? false : this.isEdit
            }
        });        
        this.sequenceFormatStore.on('load',this.setNextNumber,this);
        this.sequenceFormatStore.load();
        
        this.CnDnSequenceFormatStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                totalProperty:'count',
                root: "data"
            },this.sequenceFormatStoreRec), 
            url : "ACCCompanyPref/getSequenceFormatStore.do",
            baseParams:{
                mode:this.isCustomer?"autocreditmemo":"autodebitnote"
            }
        });
        
         this.paymentSequenceFormatStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                totalProperty:'count',
                root: "data"
            },this.sequenceFormatStoreRec), 
            url : "ACCCompanyPref/getSequenceFormatStore.do",
            baseParams:{
                mode:"autopayment"
            }
        });
       
        this.CnDnSequenceFormatStore.on('load',this.setCnDnSequenceFormatAndNumber,this);       
        this.paymentSequenceFormatStore.on('load',this.setpaymentSequenceFormatStore,this);       
        if(this.isNoteAlso){
            this.CnDnSequenceFormatStore.load();
        }
        /*
         * isPayment is true while payment is creating from sales return
         */ 
        if(this.isPayment){
            this.paymentSequenceFormatStore.load();
        }
       
        //       if(this.isCustomer){
        //            Wtf.customerAccStore.load();
        //       }else{
        //            Wtf.vendorAccStore.load();
        //        }

        var isShowOneTime=(this.moduleid == Wtf.Acc_Sales_Return_ModuleId) && !((this.isEdit !=undefined ?this.isEdit:false) || (this.copyInv !=undefined ?this.copyInv:false)); 
        this.ShowOnlyOneTime= new Wtf.form.Checkbox({
            name:'ShowOnlyOneTime',
            fieldLabel:"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.cust.ShowOnlyOneTime.tt") +"'>"+ WtfGlobal.getLocaleText("acc.cust.ShowOnlyOneTime")  +"</span>",//WtfGlobal.getLocaleText("acc.cust.onetime"),
            // fieldLabel:WtfGlobal.getLocaleText("acc.cust.ShowOnlyOneTime"),
            id:'ShowOnlyOneTime'+this.heplmodeid+this.id,
            checked:false,
            hideLabel:!isShowOneTime, // Show Only in new case
            hidden:!isShowOneTime,
            cls : 'custcheckbox',
            width: 10
        });  
    
        this.ShowOnlyOneTime.on('check',function(obj,isChecked){
            this.Name.reset();
            this.Name.store.load();
        },this); 
        if(this.custVenOptimizedFlag){
            this.Name= new Wtf.form.ExtFnComboBox({
                fieldLabel:(this.isCustomer)?"<span wtf:qtip='"+  WtfGlobal.getLocaleText("acc.invoiceList.cust.tt") +"'>"+ WtfGlobal.getLocaleText("acc.invoiceList.cust") +"</span>":"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.invoiceList.ven.tt") +"'>"+ WtfGlobal.getLocaleText("acc.invoiceList.ven") +"</span>",//this.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.cust"):WtfGlobal.getLocaleText("acc.invoiceList.ven") , //this.businessPerson+"*",
                hiddenName:this.businessPerson.toLowerCase(),
                id:"customer"+this.heplmodeid+this.id,
                store: this.isCustomer?  Wtf.customerAccRemoteStore:Wtf.vendorAccRemoteStore,
                valueField:'accid',
                displayField:'accname',
                extraFields:Wtf.account.companyAccountPref.accountsWithCode?['acccode']:[],
                listWidth:Wtf.account.companyAccountPref.accountsWithCode?500:400,
                allowBlank:false,
                hirarchical:true,
                emptyText:this.isCustomer?WtfGlobal.getLocaleText("acc.inv.cus"):WtfGlobal.getLocaleText("acc.inv.ven") , //'Select a '+this.businessPerson+'...',
                mode: 'remote',
                typeAheadDelay:30000,
                extraComparisionField:'acccode',// type ahead search on acccode as well.
                minChars:1,
                typeAhead: true,
                forceSelection: true,
                isVendor:!(this.isCustomer),
                isCustomer:this.isCustomer,
                selectOnFocus:true,
                width:240,
                triggerAction:'all',
                ctCls : 'optimizedclass',
                hideTrigger:true,
                listeners:{
                    'select':{
                        fn:function(obj,rec,index){
                            if(rec.data.currencyid!=this.Currency.getValue()){//update currency field with vendor currency if vendor currency is different
                                this.Currency.setValue(rec.data.currencyid);
                                this.currencychanged = true;
                                this.updateFormCurrency();   
                            } 
                            var currentTaxItem = WtfGlobal.searchRecord(this.Name.store, this.Name.getValue(), 'accid');
                            var actualTaxId = currentTaxItem != null ? currentTaxItem.get('taxId') : "";
                                               
        
                            if (actualTaxId == undefined || actualTaxId == "" || actualTaxId == null) {// if customer/vendor is not mapped with tax then check that is their mapping account is mapped with tax or not, if it is mapped take account tax
                                actualTaxId = currentTaxItem != null ? currentTaxItem.get('mappedAccountTaxId') : "";
                            }
                            
                            /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
                             *  Then we ignore Customer/Vendor mapped taxes
                             *  Consider Only Product mapped taxes i.e - only line level taxes(Create new case)
                             */
                            if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                                actualTaxId = "";
                            }

                            if (actualTaxId != undefined && actualTaxId != "" && actualTaxId != null) {
                                this.isTaxable.setValue(true);
                                this.Tax.enable();
                                this.isTaxable.enable();
                                this.Tax.setValue(actualTaxId);
                            } else {
                                this.isTaxable.setValue(false);
                                this.Tax.setValue('');
                                this.Tax.disable();
                            }
                            this.externalcurrencyrate=0;
                            this.changeTemplateSymbol();
                            this.isClosable=false;          // Set Closable flag after selecting Customer/Vendor
                            this.fromLinkCombo.clearValue();
                            this.PO.clearValue();
                            if(!this.isEdit && !this.copyInv){
                                this.Grid.getStore().removeAll();
                                this.Grid.addBlankRow();
                            }
                            this.fromLinkCombo.disable();
                            this.PO.disable();
                            this.PO.reset();
                            this.fromPO.setValue(false);
                            this.Memo.setValue('');
                            this.SupplierInvoiceNo.setValue('');
                            this.shipDate.setValue('');
                            this.shipvia.setValue('');
                            this.fob.setValue(''); 
                            this.CostCenter.setValue('');
                            if(this.fromPO)
                                this.fromPO.enable();
                            if(this.Grid){
                                this.Grid.affecteduser=this.Name.getValue();
                            }
                           var customer=this.Name.getValue();
                           var moduleid = this.isCustomer ? Wtf.Acc_Customer_ModuleId : Wtf.Acc_Vendor_ModuleId;
                           if (this.isEdit || this.copyInv) {
                                var showMsg = this.isCustomer ? WtfGlobal.getLocaleText("acc.invoice.customer"):WtfGlobal.getLocaleText("acc.invoice.vendor");
                                showMsg = showMsg +" "+ WtfGlobal.getLocaleText("acc.wm.beforecustomervendorchange");
                                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),showMsg, function(btn) {
                                    if (btn == "yes") {
                                          this.tagsFieldset.setValuesForCustomer(moduleid, customer);
                                    }
                                }, this);
                            } else{
                                 this.tagsFieldset.resetCustomComponents();
                                 this.tagsFieldset.setValuesForCustomer(moduleid, customer);
                            }
                            
                        },
                        scope:this                    
                    }
                }
            })
        }else{
            this.Name= new Wtf.form.ExtFnComboBox({
                fieldLabel:(this.isCustomer)?"<span wtf:qtip='"+  WtfGlobal.getLocaleText("acc.invoiceList.cust.tt") +"'>"+ WtfGlobal.getLocaleText("acc.invoiceList.cust") +"</span>":"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.invoiceList.ven.tt") +"'>"+ WtfGlobal.getLocaleText("acc.invoiceList.ven") +"</span>",//this.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.cust"):WtfGlobal.getLocaleText("acc.invoiceList.ven") , //this.businessPerson+"*",
                hiddenName:this.businessPerson.toLowerCase(),
                id:"customer"+this.heplmodeid+this.id,
                //            store: this.isCustomer? Wtf.customerAccStore : Wtf.vendorAccStore,
                store: this.isCustomer?  Wtf.customerAccRemoteStore:Wtf.vendorAccRemoteStore,
                valueField:'accid',
                displayField:'accname',
                extraFields:Wtf.account.companyAccountPref.accountsWithCode?['acccode']:[],
                listWidth:Wtf.account.companyAccountPref.accountsWithCode?500:400,
                allowBlank:false,
                hirarchical:true,
                emptyText:this.isCustomer?WtfGlobal.getLocaleText("acc.inv.cus"):WtfGlobal.getLocaleText("acc.inv.ven") , //'Select a '+this.businessPerson+'...',
                //            mode: 'local',
                mode: 'remote',
                typeAheadDelay:30000,
                extraComparisionField:'acccode',// type ahead search on acccode as well.
                minChars:1,
                typeAhead: true,
                forceSelection: true,
                isVendor:!(this.isCustomer),
                isCustomer:this.isCustomer,
                selectOnFocus:true,
                width:240,
                triggerAction:'all',
                listeners:{
                    'select':{
                        fn:function(obj,rec,index){
                            if(rec.data.currencyid!=this.Currency.getValue()){//update currency field with vendor currency if vendor currency is different
                                this.Currency.setValue(rec.data.currencyid);
                                this.currencychanged = true;
                                this.updateFormCurrency();   
                            } 
                            var currentTaxItem = WtfGlobal.searchRecord(this.Name.store, this.Name.getValue(), 'accid');
                            var actualTaxId = currentTaxItem != null ? currentTaxItem.get('taxId') : "";

                            if (actualTaxId == undefined || actualTaxId == "" || actualTaxId == null) {// if customer/vendor is not mapped with tax then check that is their mapping account is mapped with tax or not, if it is mapped take account tax
                                actualTaxId = currentTaxItem != null ? currentTaxItem.get('mappedAccountTaxId') : "";
                            }
                            
                            /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
                             *  Then we ignore Customer/Vendor mapped taxes
                             *  Consider Only Product mapped taxes i.e - only line level taxes(create new case)
                             */
                            if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                                actualTaxId = "";
                            }

                            if (actualTaxId != undefined && actualTaxId != "" && actualTaxId != null) {
                                this.isTaxable.setValue(true);
                                this.Tax.enable();
                                this.isTaxable.enable();
                                this.Tax.setValue(actualTaxId);
                            } else {
                                this.isTaxable.setValue(false);
                                this.Tax.setValue('');
                                this.Tax.disable();
                            }
                            this.externalcurrencyrate=0;
                            this.changeTemplateSymbol();
                            this.isClosable=false;          // Set Closable flag after selecting Customer/Vendor
                            this.fromLinkCombo.clearValue();
                            this.PO.clearValue();
                            if(!this.isEdit && !this.copyInv){
                                this.Grid.getStore().removeAll();
                                this.Grid.addBlankRow();
                            }
                            this.fromLinkCombo.disable();
                            this.PO.disable();
                            this.PO.reset();
                            this.fromPO.setValue(false);
                            this.Memo.setValue('');
                            this.SupplierInvoiceNo.setValue('');
                            this.shipDate.setValue('');
                            this.shipvia.setValue('');
                            this.fob.setValue(''); 
                            this.CostCenter.setValue('');
                            if(this.fromPO)
                                this.fromPO.enable();
                            if(this.Grid){
                                this.Grid.affecteduser=this.Name.getValue();
                            }
                            var customer=this.Name.getValue();
                            var moduleid = this.isCustomer ? Wtf.Acc_Customer_ModuleId : Wtf.Acc_Vendor_ModuleId;
                             if (this.isEdit || this.copyInv) {
                                var showMsg = this.isCustomer ? WtfGlobal.getLocaleText("acc.invoice.customer"):WtfGlobal.getLocaleText("acc.invoice.vendor");
                                showMsg = showMsg +" "+ WtfGlobal.getLocaleText("acc.wm.beforecustomervendorchange");
                                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),showMsg, function(btn) {
                                    if (btn == "yes") {
                                          this.tagsFieldset.setValuesForCustomer(moduleid, customer);
                                    }
                                }, this);
                            } else{
                                 this.tagsFieldset.resetCustomComponents();
                                 this.tagsFieldset.setValuesForCustomer(moduleid, customer);
                            }
                        },
                        scope:this                    
                    }
                }
            });
        }
        if(this.isSalesFromDo){
            this.customerAccStore.on("load",function(){
                this.Name.setValue(this.dopersonid)
                this.fromPO.setValue(true);
                this.fromLinkCombo.enable();                        
                this.fromOrder=true;
                this.fromLinkCombo.setValue(0);
                this.enableNumber(undefined,this.fromlinkStore.getAt(0));
                this.POStore.on("load",function(){

                    var index=this.POStore.find("billid",this.dolinkid);

                    if(index==-1){
                        var custindex=this.customerAccStore.find("accid",this.dopersonid);
                        var custrec=this.POStore.getAt(custindex);
                        var newRec=new this.PORec({
                            billid:this.dolinkid,
                            billno:this.billlink,    
                            personid:this.dopersonid,
                            currencyid:custrec.data.currencyid   
                        });
                        this.POStore.add(newRec);    
                        index=this.POStore.getCount()-1;
                    }
                    this.PO.setValue(this.dolinkid);
                    this.populateData(undefined,this.POStore.getAt(index));
                },this);
            },this)
        }
        
       
        this.Name.addNewFn=this.addPerson.createDelegate(this,[false,null,this.businessPerson+"window",this.isCustomer],true);
        
        this.fromPOStore = new Wtf.data.SimpleStore({
            fields:[{name:'name'},{name:'value',type:'boolean'}],
            data:[['Yes',true],['No',false]]
        });
        
        
        var fromLinkStoreRec = new Array();
        if(this.isNoteAlso){
            //            fromLinkStoreRec.push([this.isCustomer?'Delivery Order':"Goods Receipt", '0']);
            fromLinkStoreRec.push([this.isCustomer?'Sales Invoice':WtfGlobal.getLocaleText("acc.pi.PurchaseInvoice"), '1']);
        }else{
            if (Wtf.account.companyAccountPref.pickpackship && this.isCustomer) {
                fromLinkStoreRec.push([this.isCustomer ? 'Sales Invoice' : WtfGlobal.getLocaleText("acc.pi.PurchaseInvoice"), '1']);
            } else {
            /*
             * isPayment is true while payment is creating from sales return
             */ 
                if(this.isPayment){
                    fromLinkStoreRec.push(['Cash Sales', '1']);
                }else{
                    fromLinkStoreRec.push([this.isCustomer ? 'Delivery Order' : "Goods Receipt", '0']);
                    fromLinkStoreRec.push([this.isCustomer ? 'Sales Invoice' : WtfGlobal.getLocaleText("acc.pi.PurchaseInvoice"), '1']);
                }
            }
        }
        
        
        
        
        this.fromlinkStore = new Wtf.data.SimpleStore({
            fields:[{name:'name'},{name:'value'}],
            data:fromLinkStoreRec
        });

        this.sequenceFormatCombobox = new Wtf.form.ComboBox({            
            //        labelSeparator:'',
            //        labelWidth:0,
            triggerAction:'all',
            mode: 'local',
            id:'sequenceFormatCombobox'+this.heplmodeid+this.id,
            fieldLabel:"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.Sequenceformat.tip")+"'>"+ WtfGlobal.getLocaleText("acc.MissingAutoNumber.SequenceFormat")+"</span>",
            valueField:'id',
            displayField:'value',
            store:this.sequenceFormatStore,
            disabled:(this.isEdit&&!this.copyInv&&!this.isPOfromSO&&!this.isSOfromPO?true:false),  
            width:240,
            typeAhead: true,
            forceSelection: true,
            name:'sequenceformat',
            hiddenName:'sequenceformat',
            allowBlank:false,
            listeners:{
                'select':{
                    fn:this.getNextSequenceNumber,
                    scope:this
                }
            }
            
        });
    
        this.AssignSRNumberntocn= new Wtf.form.Checkbox({
            name:'AssignSRNumberntocn',
            fieldLabel:WtfGlobal.getLocaleText("acc.salesreturn.assigncn"),
            id:'AssignSRNumberntocn'+this.heplmodeid+this.id,
            checked:false,
            hideLabel:!this.isNoteAlso||!this.isCustomer, // Show Only in new case
            hidden:!this.isNoteAlso||!this.isCustomer,
            disabled:this.isEdit&&!this.copyInv,
            // cls : 'srcheckbox',
            width: 10
        });  
 
        this.CnDnSequenceFormatCombobox = new Wtf.form.ComboBox({            
            triggerAction:'all',
            mode: 'local',
            id:'CnDnSequenceFormatCombobox'+this.heplmodeid+this.id,
            fieldLabel:this.isCustomer?WtfGlobal.getLocaleText("acc.MissingAutoNumber.SequenceFormatCN")+"*":WtfGlobal.getLocaleText("acc.MissingAutoNumber.SequenceFormatDN")+"*",
            valueField:'id',
            displayField:'value',
            store:this.CnDnSequenceFormatStore, 
            anchor:'94%',
            hidden:!this.isNoteAlso,
            hideLabel:!this.isNoteAlso,
            typeAhead: true,
            forceSelection: true,
            name:'cndnsequenceformat',
            hiddenName:'cndnsequenceformat',
            allowBlank:!this.isNoteAlso,
            listeners:{
                'select':{
                    fn:this.showHideCnDnNumber,
                    scope:this
                }
            }            
        });
        this.paymentSequenceFormatCombobox = new Wtf.form.ComboBox({            
            triggerAction:'all',
            mode: 'local',
            id:'paymentSequenceFormatCombobox'+this.heplmodeid+this.id,
            fieldLabel:WtfGlobal.getLocaleText("acc.MissingAutoNumber.SequenceFormatMp")+"*",
            valueField:'id',
            displayField:'value',
            store:this.paymentSequenceFormatStore, 
            anchor:'94%',
            hidden:!this.isPayment,
            hideLabel:!this.isPayment,
            typeAhead: true,
            forceSelection: true,
            name:'paymentSequenceFormatStore',
            hiddenName:'paymentSequenceFormatStore',
            allowBlank:!this.isPayment,
            listeners:{
                'select':{
                    fn:this.showHidePaymentNumber,
                    scope:this
                }
            }            
        });
    
        this.CnDnNumber=new Wtf.form.TextField({
            fieldLabel:this.isCustomer?WtfGlobal.getLocaleText("acc.cnList.gridNoteNo")+"*":WtfGlobal.getLocaleText("acc.dnList.gridNoteNo")+"*",
            name: 'cndnNumber',            
            id:"cndnNumber"+this.heplmodeid+this.id,
            hidden:!this.isNoteAlso,
            hideLabel:!this.isNoteAlso,
            anchor:'94%',
            maxLength:50,
            scope:this
        });
        this.pmtRec = new Wtf.data.Record.create([
{
            name: 'methodid'
        },

        {
            name: 'methodname'
        },

        {
            name: 'accountid'
        },

        {
            name: 'acccurrency'
        },

        {
            name: 'accountname'
        },

        {
            name: 'isIBGBankAccount',
            type: 'boolean'
        },

        {
            name: 'isdefault'
        },

        {
            name: 'detailtype',
            type: 'int'
        },

        {
            name: 'acccustminbudget'
        },

        {
            name: 'autopopulate'
        },

        {
            name:'bankType'
        }
        ]);
        this.pmtStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            }, this.pmtRec),
            url: "ACCPaymentMethods/getPaymentMethods.do",
            baseParams: {
                mode: 51,
                paymentAccountType:0        //To populate only Cash type accounts in Payment Method. (0 : Cash)
            }
        });
        this.pmtMethod = new Wtf.form.FnComboBox({
            fieldLabel: WtfGlobal.getLocaleText("acc.mp.payMethod"),
            name: "pmtmethod",
            hiddenName:'pmtmethod',
            store: this.pmtStore,
            id: "paymentMethod" + this.hemodeid + this.id,
            valueField: 'methodid',
            displayField: 'methodname',
            allowBlank: !this.isPayment,
            hidden:!this.isPayment,
            hideLabel:!this.isPayment,
            disabled: false,
            emptyText: WtfGlobal.getLocaleText("acc.mp.selpayacc"),
            anchor: '85%',
            //        mode: 'remote',
            triggerAction: 'all',
            typeAhead: true,
            forceSelection: true//,
        });
        this.pmtStore.on('load', this.setPMData, this);
        this.pmtMethod.on('change',this.setPaymentAccData,this);
        if(this.isPayment){
            this.pmtStore.load();
        }
        this.pmtMethodAcc = new Wtf.form.TextField({
            name: "paymentmethodaccname",
            disabled: true,
            hidden:!this.isPayment,
            hideLabel:!this.isPayment,
            id: "pmtmethodacc" + this.heplmodeid+this.id,
            fieldLabel: WtfGlobal.getLocaleText("acc.field.PaymentAccount"),
            anchor: '85%'
        });
        this.paymentNumber=new Wtf.form.TextField({
            fieldLabel:WtfGlobal.getLocaleText("acc.pmList.gridPaymentNo")+"*",
            name: 'paymentNumber',            
            id:"paymentNumber"+this.heplmodeid+this.id,
            hidden:!this.isPayment,
            hideLabel:!this.isPayment,
            anchor:'94%',
            maxLength:50,
            scope:this
        });
        
        this.currencyRec = new Wtf.data.Record.create([
            {name: 'currencyid',mapping:'tocurrencyid'},
            {name: 'symbol'},
            {name: 'currencyname',mapping:'tocurrency'},
            {name: 'exchangerate'},
            {name: 'htmlcode'},
            {name: 'erdid',mapping:'id'},
            {name: 'companyid'},
            {name: 'fromcurrencyid'},
            {name: 'fromcurrency'},
            {name: 'currencycode'},
            {name: 'ismaxnearestexchangerate'}
        ]);
        this.currencyStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:"count"
            },this.currencyRec),
            url:"ACCCurrency/getCurrencyExchange.do"
        });
         this.currencyStore.load({params:{mode:201,transactiondate:WtfGlobal.convertToGenericDate(new Date())}});

    this.Currency = new Wtf.form.FnComboBox({
        fieldLabel:WtfGlobal.getLocaleText("acc.currency.cur"),  // 'Currency',
        hiddenName:'currencyid',
        id:"currency"+this.heplmodeid+this.id,
        width : 240,
        store:this.currencyStore,
        valueField:'currencyid',
        allowBlank : false,
        forceSelection: true,
        displayField:'currencyname',
        scope:this,
        selectOnFocus:true
    });

    this.currencyStore.on('load',this.changeTemplateSymbol,this);

    this.Currency.on('beforeselect', function (combo, record, index) {
        this.currencyBeforeSelect = combo.getValue();
    }, this);
    
    this.Currency.on('select', function(combo, record, index){
        if(Wtf.account.companyAccountPref.activateToDateforExchangeRates){
            checkForNearestExchangeRate(this,record,this.billDate.getValue());
        }
        if(combo.getValue()==this.currencyBeforeSelect){
            return;
        } else if (Wtf.productDetailsGridIsEmpty(this.Grid)) {
            this.externalcurrencyrate=0;
            this.currencychanged = true;
            if(this.includingGST.getValue()!=false){
                this.includingGST.setValue(false);   
                this.applyTaxToTermsChkHideShow(false);
            }
            if(this.termgrid != undefined){
                this.termgrid.getStore().rejectChanges();
            }
            this.onCurrencyChangeOnly();
            this.updateFormCurrency();
            this.fromPO.setValue(false);
            this.fromLinkCombo.clearValue();
            this.PO.clearValue();
            this.fromLinkCombo.disable();//Link to: should disabled if Link value is "NO"
            this.PO.disable();//Number: should disabled if Link value is "NO"
            return;
        }
        Wtf.MessageBox.confirm("Warning", WtfGlobal.getLocaleText("acc.wm.beforechange"), function (btn) {
            if (btn == 'yes') {
                this.externalcurrencyrate = 0;
                this.currencychanged = true;
                if(this.includingGST.getValue()!=false){
                    this.includingGST.setValue(false);   
                    this.applyTaxToTermsChkHideShow(false);
                }
                if(this.termgrid != undefined){
                    this.termgrid.getStore().rejectChanges();
                }
                this.onCurrencyChangeOnly();
                this.updateFormCurrency();
                if(this.Grid){
                    this.Grid.forCurrency = this.Currency.getValue();
                }
                this.fromPO.enable();
                this.fromLinkCombo.disable();//Link to: should disabled if Link value is "NO"
                this.PO.disable();//Number: should disabled if Link value is "NO"
            }else{
                combo.setValue(this.currencyBeforeSelect);
                return;
            }
        }, this);
    }, this);
        
    this.Number=new Wtf.form.TextField({
        fieldLabel:this.label + " " + WtfGlobal.getLocaleText("acc.common.number"),  //,  //this.label+' Number*',
        name: 'number',
        disabled:(this.isEdit&&!this.copyInv?true:false),
        id:"invoiceNo"+this.heplmodeid+this.id,
        width:240,
        maxLength:50,
        scope:this,
        allowBlank:this.checkin
    });
    this.Number.on('change', this.AssignSRNumberntocnCheckHandler, this);
    this.AssignSRNumberntocn.on('check',this.AssignSRNumberntocnCheckHandler, this);
    this.Memo=new Wtf.form.TextArea({
        fieldLabel:Wtf.account.companyAccountPref.descriptionType,  //'Memo',
        name: 'memo',
        id:"memo"+this.heplmodeid+this.id,
        height:40,
        anchor:'94%',
        maxLength:2048,
        readOnly:this.readOnly,
        // qtip:(this.record==undefined)?' ':this.record.data.memo,
        listeners: {
            render: function(c){
                Wtf.QuickTips.register({
                    target: c.getEl(),
                    text: c.qtip
                });
            }
        }

    });

    this.PORec = Wtf.data.Record.create ([
            {name:'billid'},
            {name:'journalentryid'},
            {name:'entryno'},
            {name:'billto'},
            {name:'discount'},
            {name:'shipto'},
            {name:'mode'},
            {name:'externalcurrencyrate'},
            {name:'billno'},
            {name:'date', type:'date'},
            {name:'duedate', type:'date'},
            {name:'shipdate', type:'date'},
            {name:'personname'},
            {name:'creditoraccount'},
            {name:'personid'},
            {name:'shipping'},
            {name:'othercharges'},
            {name:'taxid'},
            {name:'currencyid'},
            {name:'currencysymbol'},
            {name:'amount'},
            {name:'amountdue'},
            {name:'amountinbase'},
            {name: 'gstapplicable'},
            {name:'shipvia'},
            {name:'fob'},
            {name:'amountdue'},
            {name:'costcenterid'},
            {name:'costcenterName'},
            {name:'customerporefno'},
            {name:'lasteditedby'},
            {name:'memo'},
            {name:'posttext'} ,  
            {name:'isFromVendorConsign'},
            {name: 'taxid'} , 
            {name: 'includeprotax'},
            {name:'isapplytaxtoterms'},
            {name:'gstIncluded'},
            {name: 'termdetails'},
            {name: 'salesPerson'},
            {name:'salespersonname'},
            {name: 'gtaapplicable'},
            {name: 'ewayapplicable'},
            {name:'agent'},
            {name:'agentname'},
            {name:'formtypeid'},
            {name:'isInterstateParty',type:'boolean'},
            {name:'CustomerVendorTypeId'},
            {name:'GSTINRegistrationTypeId'},
            {name:'gstin'},
            {name:'supplierinvoiceno'},//SDP-4510,
            {name: 'isRoundingAdjustmentApplied'}

    ]);
    this.POStoreUrl =(this.isCustomer)?"ACCInvoiceCMN/getDeliveryOrdersMerged.do":"ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
          
    var linkingFlag = false;
    this.POStore = new Wtf.data.Store({
        url:this.POStoreUrl,
        baseParams:{
            mode:42,
            closeflag:true,
            dropDownData:true,
            srflag : true,
            linkingFlag :linkingFlag,
            requestModuleid:this.moduleid,
            cntype:this.inputValue
        },
        reader: new Wtf.data.KwlJsonReader({
            root: "data",
            totalProperty:'count'
        },this.PORec)
    });                
    this.POStore.on('beforeload',function(){
        WtfGlobal.setAjaxTimeOut();
    }, this);
    this.POStore.on('load',function(){
        WtfGlobal.resetAjaxTimeOut();
    },this);
    this.POStore.on('loadexception',function(){
        WtfGlobal.resetAjaxTimeOut();
    },this);
    var DimensionCustomFielsArray = GlobalDimensionCustomFieldModel[this.moduleid];
    if( DimensionCustomFielsArray){
        for(var cnt = 0;cnt < DimensionCustomFielsArray.length;cnt++){
            if(DimensionCustomFielsArray[cnt] != undefined){
                var fieldname = DimensionCustomFielsArray[cnt].fieldname;
                var newField = new Wtf.data.Field({
                    name:fieldname.replace(".",""),
                    //                   sortDir:'ASC',
                    type:DimensionCustomFielsArray[cnt].fieldtype == 3 ?  'date' : (DimensionCustomFielsArray[cnt].fieldtype == 2?'float':'auto'),
                    dateFormat:DimensionCustomFielsArray[cnt].fieldtype == 3 ?  'time' : undefined
                });
                this.POStore.fields.items.push(newField);
                this.POStore.fields.map[fieldname]=newField;
                this.POStore.fields.keys.push(fieldname);
            }
               
        }
        this.POStore.reader = new Wtf.data.KwlJsonReader(this.POStore.reader.meta, this.POStore.fields.items);
    }
    this.fromPO= new Wtf.form.ComboBox({
        triggerAction:'all',
        hideLabel:false,
        hidden:false,
        mode: 'local',
        valueField:'value',
        displayField:'name',
        disabled:this.isEdit?false:true,
        store:this.fromPOStore,
        id: "linkToOrder"+this.heplmodeid+this.id,
        fieldLabel:WtfGlobal.getLocaleText("acc.field.Link"),  //"Link to "+(this.isCustomer?"Sales":"Purchase")+" Order",
        allowBlank:this.isOrder,
        value:false,
        width:50,
        typeAhead: true,
        forceSelection: true,
        name:'prdiscount',
        hiddenName:'prdiscount',
        listeners:{
            'select':{
                fn:this.enablePO,
                scope:this
            }
        }
    });
    var emptyText="";
    if(this.isNoteAlso){
        emptyText=this.isCustomer?WtfGlobal.getLocaleText("acc.field.SelectaCI"):WtfGlobal.getLocaleText("acc.field.SelectaPI");
    }else{
            if (Wtf.account.companyAccountPref.pickpackship) {
            if(this.isPayment){
                emptyText = WtfGlobal.getLocaleText("acc.salesreturn.withPaymentLinkCashSalesPrompt");
            }else{
                emptyText = this.isCustomer ? WtfGlobal.getLocaleText("acc.field.SelectaCI") : WtfGlobal.getLocaleText("acc.field.SelectaPI/GR");
            }
        } else {
            if(this.isPayment){
                emptyText = WtfGlobal.getLocaleText("acc.salesreturn.withPaymentLinkCashSalesPrompt");
            }else{
            emptyText = this.isCustomer ? WtfGlobal.getLocaleText("acc.field.SelectaCI/DO") : WtfGlobal.getLocaleText("acc.field.SelectaPI/GR");
            }
        }
    }
    this.fromLinkCombo= new Wtf.form.ComboBox({
        triggerAction:'all',
        name:"fromLinkCombo",
        hideLabel:false,
        hidden:false,
        mode: 'local',
        valueField:'value',
        displayField:'name',
        disabled:true,
        id:'fromLinkComboId'+this.heplmodeid+this.id,
        store:this.fromlinkStore,                        
        emptyText:emptyText, 
        fieldLabel:WtfGlobal.getLocaleText("acc.field.Linkto"),  //"Link to "+(this.isCustomer?"Sales":"Purchase")+" Order",
        allowBlank:false,            
        //            value:false,            
        typeAhead: true,            
        width:135,
        forceSelection: true,                        
        selectOnFocus:true,           
        scope:this,
        listeners:{
            'select':{
                fn:this.enableNumber,
                scope:this
            }
        }
    });
        
    //        this.PO= new Wtf.form.FnComboBox({
    //            fieldLabel:WtfGlobal.getLocaleText("acc.field.Number") ,  //(this.isCustomer?"SO":"PO")+" Number",
    //            hiddenName:"ordernumber",
    //            //id:"orderNumber"+this.heplmodeid+this.id,
    //            id:"poNumberID"+this.heplmodeid+this.id,
    //            allowBlank:false, 
    //            store: this.POStore,
    //            valueField:'billid',
    //            hideLabel:false,
    //            hidden:false,
    //            displayField:'billno',
    //            disabled:true,
    //            emptyText: emptyText, //this.isCustomer?WtfGlobal.getLocaleText("acc.field.SelectaCI/DO"):WtfGlobal.getLocaleText("acc.field.SelectaVI/GR"),
    //            mode: 'local',
    //            typeAhead: true,
    //            forceSelection: true,
    //            selectOnFocus:true,            
    //            width:240,
    //            triggerAction:'all',
    ////            addNewFn:this.addOrder.createDelegate(this,[false,null,this.businessPerson+"PO"],true),
    //            scope:this,
    //            listeners:{
    //                'select':{
    //                    fn:this.populateData,
    //                    scope:this
    //                }
    //            }
    //        });
        
    //            this.PO.addNewFn=this.addOrder.createDelegate(this,[false,null,this.businessPerson+"PO"],true)
            
    this.POSelected="";
        
    this.MSComboconfig= {
        //            fieldLabel:WtfGlobal.getLocaleText("acc.field.Number") ,  //(this.isCustomer?"SO":"PO")+" Number",
        hiddenName:"ordernumber",
        //id:"orderNumber"+this.heplmodeid+this.id,
        //            id:"poNumberID"+this.heplmodeid+this.id,
        allowBlank:false, 
        store: this.POStore,
        valueField:'billid',
        hideLabel:false,
        hidden:false,
        displayField:'billno',
        disabled:true,
        clearTrigger:this.isEdit ? false : true,
        emptyText: emptyText, //this.isCustomer?WtfGlobal.getLocaleText("acc.field.SelectaCI/DO"):WtfGlobal.getLocaleText("acc.field.SelectaVI/GR"),
        mode: 'local',
        typeAhead: true,
        forceSelection: true,
        selectOnFocus:true,            
        width:240,
        triggerAction:'all',
        //            addNewFn:this.addOrder.createDelegate(this,[false,null,this.businessPerson+"PO"],true),
        scope:this
    //            listeners:{
    //                'select':{
    //                    fn:this.populateData,
    //                    scope:this
    //                }
    //            }
    };
        
    this.PO = new Wtf.common.Select(Wtf.applyIf({
        multiSelect:true,
        fieldLabel:WtfGlobal.getLocaleText("acc.field.Number") ,
        id:"poNumberID"+this.heplmodeid+this.id ,
        forceSelection:true,
        addCreateOpt:true,
        addNewFn:this.addSelectedDocument.createDelegate(this),
        width:240
    },this.MSComboconfig));
       
    this.PO.on("clearval",function(){
        if(this.PO.getValue()=="" && !this.isEdit && !this.handleEmptyText){            
            this.Grid.getStore().removeAll(); 
            this.Grid.addBlankRow();           
            this.gstCurrencyRate = 0;
            if(this.termgrid != undefined && this.termgrid != null){
                this.termgrid.getStore().rejectChanges();
            }
//            var fieldArr = this.POStore.fields.items;
//            for(var fieldCnt=0; fieldCnt < fieldArr.length; fieldCnt++) {
//                var fieldN = fieldArr[fieldCnt];
//                if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id)) {
//                    Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue('');
//                }
//            }
        }
        this.handleEmptyText=false;
    },this);
        
    //            this.PO.addNewFn=this.addOrder.createDelegate(this,[false,null,this.businessPerson+"PO"],true)
            
    this.POSelected="";
        
    this.billDate= new Wtf.form.DateField({
        fieldLabel:this.label +' '+WtfGlobal.getLocaleText("acc.invoice.date"),
        id:"invoiceDate"+this.heplmodeid+this.id,
        format:WtfGlobal.getOnlyDateFormat(),
        name: 'billdate',
        width:240,
        allowBlank:false
    });
    this.SupplierInvoiceNo = new Wtf.form.TextField({
        fieldLabel: "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.invoice.SupplierInvoiceNumber") +"'>"+ WtfGlobal.getLocaleText("acc.invoice.SupplierInvoiceNo") +"</span>",//Supplier Invoice No - SDP-4510
        name: 'supplierinvoiceno',
        id:"supplierinvoiceno"+this.heplmodeid+this.id,
        hidden: !(this.moduleid === Wtf.Acc_Purchase_Return_ModuleId),
        hideLabel: !(this.moduleid === Wtf.Acc_Purchase_Return_ModuleId),
        disabled: this.readOnly,
        width: 240,
        labelWidth: 160,
        maxLength: 50,
        scope: this,
        qtip:(WtfGlobal.isIndiaCountryAndGSTApplied())?WtfGlobal.getLocaleText("acc.gst.SINErrorMsg"):"",
            listeners: {
                render: function(c){
                    Wtf.QuickTips.register({
                        target: c.getEl(),
                        text: c.qtip
                    });
                }    
            }
        });
        if ((this.moduleid === Wtf.Acc_Purchase_Return_ModuleId) && WtfGlobal.isIndiaCountryAndGSTApplied()) {
            this.SupplierInvoiceNo.on('change', this.validateSIN, this);
        }
    this.shipDate= new Wtf.form.DateField({
        fieldLabel:"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.ShipDate.tip")+"'>"+ WtfGlobal.getLocaleText("acc.field.ShipDate")+"</span>",
        id:"shipdate"+this.heplmodeid+this.id,
        format:WtfGlobal.getOnlyDateFormat(),
        name: 'shipdate',
        anchor:'94%'
    });
    this.shipvia = new Wtf.form.TextField({
        fieldLabel: WtfGlobal.getLocaleText("acc.field.ShipVia"),
        id:"shipvia"+this.heplmodeid+this.id,
        name: 'shipvia',
        anchor:'94%',
        maxLength: 255,
        scope: this
    });

        /**
         * isEWayValidationDoc check for IDNIA country only
         */
        var isEWayValidationDoc = false;
        if(WtfGlobal.isIndiaCountryAndGSTApplied() && CompanyPreferenceChecks.activateEWayBill()){
            isEWayValidationDoc =true;
        }
        this.isEWayCheck= new Wtf.form.Checkbox({
            name:'isEWayCheck',
            id:"isEWayCheck"+this.id,
            fieldLabel:WtfGlobal.getLocaleText("acc.GST.eway.ewayDocumentLevelChk")+WtfGlobal.addLabelHelp(WtfGlobal.getLocaleText("acc.GST.eway.ewayDocHelpQtip")), 
            checked: false,
            hideLabel: !isEWayValidationDoc,// Only for Indian company
            hidden: !isEWayValidationDoc,
            cls : 'custcheckbox',
            width: 10
        });
        
    /**
     * In Edit case set EWAY Applicable check
     */
    if (isEWayValidationDoc) {

        if (this.record && this.record.data['ewayapplicable']) {
            this.isEWayCheck.setValue(this.record.data['ewayapplicable']);
        }
    }
    this.isEWayCheck.on('check',this.EwayFieldsEnableDisable,this);
    var hideIncludingGSTForAvalara = this.isModuleForAvalara
    var hideIncludingGSTCheck = (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge) || hideIncludingGSTForAvalara || ((SATSCOMPANY_ID==companyid )?true:(!(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInDO:Wtf.account.companyAccountPref.unitPriceInGR) || (Wtf.account.companyAccountPref.countryid == '137' && !Wtf.account.companyAccountPref.enableGST)));
    this.includingGST= new Wtf.form.Checkbox({
//        name:'includingGST',
        id:"includingGST"+this.heplmodeid+this.id,
        hideLabel: hideIncludingGSTCheck,
        hidden: hideIncludingGSTCheck,
        fieldLabel:(Wtf.account.companyAccountPref.countryid!= Wtf.Country.INDONESIA)?"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.includeGST.tooltip")+"'>"+WtfGlobal.getLocaleText("acc.cust.includingGST")+"</span>":"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.includeVAT.tooltip")+"'>"+WtfGlobal.getLocaleText("acc.cust.includingVAT")+"</span>",
        cls : 'custcheckbox',
        scope: this,
        width: 10
    }); 

    this.includingGST.on('focus',function(o,newval,oldval){
        var includeGstCount=0;
        var excludeGstCount=0;
        var selectedids=this.PO.getValue();
        var selectedValuesArr = selectedids.split(',');
        for(var cntGst=0;cntGst<selectedValuesArr.length;cntGst++){
            var rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cntGst]));
            if(rec!=undefined){
                if(rec.data["gstIncluded"]){
                    includeGstCount++;
                }else if(!rec.data["gstIncluded"]){
                    excludeGstCount++;
                }
            }
        }
        if(this.fromPO.getValue() !=undefined && this.fromPO.getValue()==true&&this.PO.getValue()!=""){
            var message=""
            if(selectedValuesArr.length==includeGstCount&&this.includingGST.getValue()){
                message=WtfGlobal.getLocaleText("acc.inclidingGST");
            }else if(selectedValuesArr.length==excludeGstCount&&!this.includingGST.getValue()){
                message=WtfGlobal.getLocaleText("acc.excludingGST");
            }
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.je.confirm"),message,function(btn){
                if(btn!="yes") {
                    return;
                }
                //When including gst is edited in linking case-ERP-38278
                if(!((selectedValuesArr.length==includeGstCount&&!this.includingGST.getValue())||(selectedValuesArr.length==excludeGstCount&&this.includingGST.getValue()))){
                    if(this.fromPO!=undefined && this.fromPO!=null){
                        this.fromPO.setValue(false);
                        this.fromPO.enable();
                    }
                    if(this.fromLinkCombo!=undefined && this.fromLinkCombo!=null){
                        this.fromLinkCombo.clearValue();
                        this.fromLinkCombo.disable();
                    }

                    if(this.PO!=undefined && this.PO!=null){
                        this.PO.clearValue();
                        this.PO.disable();
                        this.PO.setValue("");
                    }

                    var rowRateIncludingGstAmountIndex=this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
                    if(rowRateIncludingGstAmountIndex!=-1){
                        if(selectedValuesArr.length==excludeGstCount&&!this.includingGST.getValue()){
                            this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,false);
                        }else{
                            this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,true);
                        }
                    }
                }
                var value=this.includingGST.getValue()
                this.includingGST.setValue(!value);
            },this);
        }
    },this);  
        
    this.includingGST.on('change',this.includingGSTOnChnage,this);
    

    /*
     * Flag for transaction from purchase side ERP-40813
     */
    this.isPurchasesTransaction = (this.moduleid == Wtf.Acc_Purchase_Return_ModuleId);
    /**
     * 
     *RCM applicable check for INDIA with Credit not only
     */
    var isApplyRCMOnSAles = false;
    if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.isNoteAlso && this.isCustomer && (this.moduleid == Wtf.Acc_Sales_Return_ModuleId)) {
        isApplyRCMOnSAles = true;
    }
    this.GTAApplicable = new Wtf.form.Checkbox({
        name: "gtaapplicable",
        id: "gtaapplicable" + this.id,
        fieldLabel: "<span wtf:qtip=" + WtfGlobal.getLocaleText("acc.compref.india.rcm.applicable") + ">" + WtfGlobal.getLocaleText("acc.compref.india.rcm.applicable") + "</span>",
        checked: false,
        hideLabel: !isApplyRCMOnSAles,
        hidden: !isApplyRCMOnSAles,
        cls: 'custcheckbox',
        width: 10
    });
    /**
     * In Edit case set RCM Applicable check
     */
    if (isApplyRCMOnSAles) {
        //ERP-34970(ERM-534)
        if (this.record && this.record.data['gtaapplicable']) {
            this.GTAApplicable.setValue(this.record.data['gtaapplicable']);
        }
    }
    this.GTAApplicable.on('change', this.onRCMApplicableChange, this);    
    this.includeTaxStore = new Wtf.data.SimpleStore({
        fields: [{
            name: 'name'
        }, {
            name: 'value', 
            type: 'boolean'
        }],
        data: [['Yes', true], ['No', false]]
    });
    this.includeProTax = new Wtf.form.ComboBox({
        triggerAction: 'all',
        mode: 'local',
        valueField: 'value',
        displayField: 'name',
        store: this.includeTaxStore,
        fieldLabel: "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.field.includeprodtax.tip") + "'>" + WtfGlobal.getLocaleText("acc.invoice.productTax") + "</span>", //"Include Product Tax",
        id: "includeprotax" + this.heplmodeid + this.id,
        value: (this.isEdit ? true : false),
        //            width: 240,
        anchor:'94%',
        typeAhead: true,
        forceSelection: true,
        hideLabel: (WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied()) ? true : ((!(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInSR:Wtf.account.companyAccountPref.unitPriceInPR))?(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA||this.inputValue==Wtf.NoteForOvercharge)?false:true:false) || (Wtf.account.companyAccountPref.countryid == '137' && !Wtf.account.companyAccountPref.enableGST), // hide if company is malaysian and GST is not enabled for it
        hidden: (WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied()) ? true : ((!(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInSR:Wtf.account.companyAccountPref.unitPriceInPR))?(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA||this.inputValue==Wtf.NoteForOvercharge)?false:true:false) ||(Wtf.account.companyAccountPref.countryid == '137' && !Wtf.account.companyAccountPref.enableGST), // hide if company is malaysian and GST is not enabled for it
        name: 'includeprotax',
        hiddenName: 'includeprotax',
        listeners: {
            'change': {
                fn: this.includeProTaxHandler,
                scope: this
            }
        }
    });
    this.applyTaxToTermsChk = new Wtf.form.Checkbox({
        fieldLabel: "Apply Tax to Terms",
        hideLabel: (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge),
        hidden: (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)
    });
    var MVATAnnexureCodesRec=new Wtf.data.Record.create([
{
        name: 'mvatannexurecode'
    },

    { 
        name: 'mvatdescription'
    }
    ]);
    this.MVATAnnexureCodesStore=new Wtf.data.Store({
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        },MVATAnnexureCodesRec),
        url:"ACCAccount/getMVATAnnexureCodeForAccount.do",
         baseParams:{
            moduleid:this.moduleid,
            isNoteAlso:this.isNoteAlso
        }
    });
    
    if((Wtf.Countryid==Wtf.Country.INDIA && Wtf.Stateid==Wtf.StateName.MAHARASHTRA) &&  Wtf.account.companyAccountPref.enablevatcst){
        this.MVATAnnexureCodesStore.load();
    }
     
    this.MVATAnnexureCodeCombo = new Wtf.form.ExtFnComboBox(Wtf.applyIf({        
        extraFields:['mvatannexurecode'],
        extraComparisionField:'mvatannexurecode', 
        extraComparisionFieldArray:['mvatdescription','mvatannexurecode'],
        addNoneRecord: true,
        listWidth:400,
        anchor:'94%',
        fieldLabel: this.isCustomer?WtfGlobal.getLocaleText('acc.field.mvatannexureSalescode'):WtfGlobal.getLocaleText('acc.field.mvatannexurePurchasecode'),//Select MVAT Annexure Code
        hiddenName:'mvattransactionno',
        name: 'mvattransactionno',
        store: this.MVATAnnexureCodesStore,
        valueField:'mvatannexurecode',
        displayField:'mvatdescription',
        mode: 'local',
        allowBlank:true,
        //emptyText:'Select MVAT Annexure Code',
        typeAhead: true,                  
        triggerAction:'all',
        hideLabel: Wtf.Countryid != Wtf.Country.INDIA ?  true :( Wtf.Stateid != Wtf.StateName.MAHARASHTRA ? true : (Wtf.account.companyAccountPref.enablevatcst ? false : true)),
        hidden: Wtf.Countryid != Wtf.Country.INDIA ?  true :( Wtf.Stateid != Wtf.StateName.MAHARASHTRA ? true : (Wtf.account.companyAccountPref.enablevatcst ? false : true)),            
        scope:this
    }));
    this.fob = new Wtf.form.TextField({
        fieldLabel:"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.fob.tip")+"'>"+WtfGlobal.getLocaleText("acc.field.FOB") +"</span>",
        name: 'fob',
        id:"fob"+this.heplmodeid+this.id,
        anchor:'94%',
        maxLength: 255,
        scope: this
    });        
    chkFormCostCenterload();
        
    this.southCalTemp=new Wtf.Panel({  
        border:false,
        baseCls:'tempbackgroundview',
        html:this.tplSummary.apply({
            subtotal:WtfGlobal.currencyRenderer(0),
            tax:WtfGlobal.currencyRenderer(0),
            nontaxableamount:WtfGlobal.currencyRenderer(0),
            tdsamount:WtfGlobal.currencyRenderer(0),
            aftertaxamt:WtfGlobal.currencyRenderer(0),
            totalAmtInBase:WtfGlobal.currencyRenderer(0),
            termtotal:WtfGlobal.currencyRenderer(0),
            amountbeforetax:WtfGlobal.currencyRenderer(0),
            amountdue:WtfGlobal.currencyRenderer(0)
            })
    });
        
    
    //ERP-41011:Setting remote store to Sales Person. Also called for Debit Note/Credit Note Overcharged and Debit Note/Credit Note Undercharged
    this.users =CommonERPComponent.createSalesPersonAgentComboBox('',600,30,this,this.moduleid==Wtf.Acc_Purchase_Return_ModuleId,this.moduleid==Wtf.Acc_Purchase_Return_ModuleId);//false for invoicelist
    if(this.inputValue != Wtf.CNDN_TYPE_FOR_MALAYSIA && this.inputValue != Wtf.NoteForOvercharge){
    }
    this.users.anchor='94%';
    if(this.isCustomer){
        this.users.store.on('beforeload',this.onBeforesalesPersonLoad,this);
    }else{
        this.users.store.on('beforeload',this.onBeforeAgentLoad,this);
    }
        
    this.users.on('beforeselect', function (combo, record, index) {
        if (this.isCustomer) {
            return validateSelection(combo, record, index);
        } else {
            return true;
        }
    }, this);
    this.users.addNewFn = (this.inputValue != Wtf.CNDN_TYPE_FOR_MALAYSIA && this.inputValue != Wtf.NoteForOvercharge) ? this.addSalesPerson.createDelegate(this) : this.isCustomer ? this.addSalesPerson.createDelegate(this) : this.addAgent.createDelegate(this);
        
    this.CostCenter= new Wtf.form.ExtFnComboBox({
        fieldLabel:"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.common.costCenter.tip") +"'>"+ WtfGlobal.getLocaleText("acc.common.costCenter")+"</span>",//WtfGlobal.getLocaleText("acc.common.costCenter"),//"Cost Center",
        hiddenName:"costcenter",
        id:"costcenter"+this.heplmodeid+this.id,
        width:240,
        store: Wtf.FormCostCenterStore,
        valueField:'id',
        displayField:'name',
        extraComparisionField:'ccid', 
        extraFields:Wtf.account.companyAccountPref.accountsWithCode?['ccid']:[],
        listWidth:Wtf.account.companyAccountPref.accountsWithCode?500:400,
        isProductCombo:true,
        mode: 'local',
        typeAhead: true,
        forceSelection: true,
        selectOnFocus:true,
        //            anchor:"50%",            
        triggerAction:'all',
        addNewFn:this.addCostCenter,
        scope:this,
        hidden: this.quotation,
        hideLabel: this.quotation
    }); 
    this.editedBy = new Wtf.form.TextField({
        //fieldLabel: WtfGlobal.getLocaleText("acc.field.ShipVia"),
        fieldLabel:  WtfGlobal.getLocaleText("acc.field.LastEditedBy"),
        name: 'lasteditedby',
        id:"lasteditedby"+this.heplmodeid+this.id,
        //            anchor: '94%',
        disabled:true,
        width : 240,
        maxLength: 255,
        scope: this,
        hidden: this.isEdit||this.readOnly?false:true,
        hideLabel:this.isEdit||this.readOnly?false:true
    }); 
        this.FormSelectionStore = new Wtf.data.SimpleStore({
            fields: [{
                name:'id',
                type:'string'
            }, 'name'],
            data :[["1","Without Form"],
            ["2","C Form"],
            ["3","E1 Form"],
            ["4","E2 Form"],
            ["5","F Form"],
            ["6","H Form"],
            ["7","I Form"],
            ["8","J Form"]]
        });
        this.FormType=new Wtf.form.ComboBox({
            fieldLabel:!this.isCustomer? WtfGlobal.getLocaleText("acc.invoice.formtoIssue"): WtfGlobal.getLocaleText("acc.invoice.formtoreceive"), 
            name:'formtypeid',
            store:this.FormSelectionStore,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            width : 240,
            hidden:WtfGlobal.GSTApplicableForCompany()!=Wtf.GSTStatus.OLDNEW,
            hideLabel:WtfGlobal.GSTApplicableForCompany()!=Wtf.GSTStatus.OLDNEW ,
            listWidth:400,
            hiddenName:'formtypeid',
            emptyText:!this.isCustomer? WtfGlobal.getLocaleText("acc.invoice.selectformtoIssue"):WtfGlobal.getLocaleText("acc.invoice.selectformtoreceive"),
            forceSelection:true,
            triggerAction:'all'
        });
         this.FormType.on('select',function(){
            this.Grid.getStore().removeAll();
            this.Grid.addBlankRow(); 
        },this);

    var blockSpotRateLink_first = "";
    var blockSpotRateLink_second = "";
    if(!Wtf.account.companyAccountPref.activateToBlockSpotRate){ // If activateToBlockSpotRate is set then block the Spot Rate Links
        blockSpotRateLink_first = WtfGlobal.getLocaleText("acc.invoice.msg9")+"</div><div style='padding-left:30px;padding-top:5px;padding-bottom:10px;'><a class='tbar-link-text' href='#' onClick='javascript: editInvoiceExchangeRates(\""+this.id+"\",\"{foreigncurrency}\",\"{basecurrency}\",\"{revexchangerate}\",\"foreigntobase\")'wtf:qtip=''>{foreigncurrency} to {basecurrency}</a>";
        blockSpotRateLink_second = WtfGlobal.getLocaleText("acc.invoice.msg9")+"</div> <div style='padding-left:30px;padding-top:5px;'><a class='tbar-link-text' href='#' onClick='javascript: editInvoiceExchangeRates(\""+this.id+"\",\"{basecurrency}\",\"{foreigncurrency}\",\"{exchangerate}\",\"basetoforeign\")'wtf:qtip=''>{basecurrency} to {foreigncurrency}</a></div>";
    }
    this.southCenterTplSummary=new Wtf.XTemplate(
        "<div> &nbsp;</div>",  //Currency:
        '<tpl if="editable==true">',
        "<b>"+WtfGlobal.getLocaleText("acc.invoice.msg8")+"</b>",  //Applied Exchange Rate for the current transaction:
        "<div style='line-height:18px;padding-left:30px;'>1 {foreigncurrency} "+WtfGlobal.getLocaleText("acc.inv.for")+" = {revexchangerate} {basecurrency} "+WtfGlobal.getLocaleText("acc.inv.hom")+". "+
        blockSpotRateLink_first,
        "</div><div style='line-height:18px;padding-left:30px;'>1 {basecurrency} "+WtfGlobal.getLocaleText("acc.inv.hom")+" = {exchangerate} {foreigncurrency} "+WtfGlobal.getLocaleText("acc.inv.for")+". "+    
        blockSpotRateLink_second,
        '</tpl>'
        );    
    this.INDCountryCenterTplSummary=new Wtf.XTemplate(
        '<div> &nbsp;</div>',
        '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',            
        '<div><hr class="templineview"></div>',
        '<div>',
        '<table width="100%">'+
        '<tr>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.vat")+'</b></td>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.cst")+'</b></td>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.pan")+'</b></td>'+
        '</tr>'+
        '<tr>'+
        '<td style="width:20%;" text-align=left>{CompanyVATNumber}</td>'+
        '<td style="width:20%;" text-align=right>{CompanyCSTNumber}</td>'+  
        '<td style="width:20%;" text-align=right>{CompanyPANNumber}</td>'+ 
        '</tr>'+
        '<tr>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.service")+'</b></td>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.tan")+'</b></td>'+
        '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.ecc")+'</b></td>'+
        '</tr>'+
        '<tr>'+
        '<td style="width:20%;" text-align=right>{CompanyServiceTaxRegNumber}</td>'+ 
        '<td style="width:20%;" text-align=right>{CompanyTANNumber}</td>'+ 
        '<td style="width:20%;" text-align=right>{CompanyECCNumber}</td>'+ 
        '</tr>'+
        '</table>'+
        '</div>',            
        '<div><hr class="templineview"></div>',                        
        '</div>'
        );
        
    this.INDCountryCenterTpl=new Wtf.Panel({
        id:'INDCountryCenterTpl'+this.id,
        border:false,
        width:'95%',
        baseCls:'tempbackgroundview',
        hidden: WtfGlobal.GSTApplicableForCompany()!=Wtf.GSTStatus.OLDNEW,
        html:this.INDCountryCenterTplSummary.apply({
            CompanyVATNumber:this.isCustomer?Wtf.CompanyVATNumber:"",
            CompanyCSTNumber:this.isCustomer?Wtf.CompanyCSTNumber:"",
            CompanyPANNumber:this.isCustomer?Wtf.CompanyPANNumber:"",
            CompanyServiceTaxRegNumber:this.isCustomer?Wtf.CompanyServiceTaxRegNumber:"",
            CompanyTANNumber:this.isCustomer?Wtf.CompanyTANNumber:"",
            CompanyECCNumber:this.isCustomer?Wtf.CompanyECCNumber:""
        })
    });        
    
    var taxAmountPlaceHolder = '{taxAmount}';
    var totalTaxAmountPlaceHolder = '{TotalTaxAmt}';
    if (this.isCustomer ? !Wtf.dispalyUnitPriceAmountInSales : !Wtf.dispalyUnitPriceAmountInPurchase) {
        /**
         * To hide tax amounts for user who doesn't have permission to see unit price in transactions
         */
        taxAmountPlaceHolder = Wtf.UpriceAndAmountDisplayValue;
        totalTaxAmountPlaceHolder = Wtf.UpriceAndAmountDisplayValue;
    }
    this.LineLevelTermTplSummary = new Wtf.XTemplate(
        '<div> &nbsp;</div>',
        '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',    
        '<div><hr class="templineview"></div>',
        '<div class ="currency-view">',
        '<table width="95%">',
        '<tpl for="lineLevelArray">',
        '<tr><td><b>{name} Amount </b></td><td style="text-align:right;">' + taxAmountPlaceHolder + '</td></tr>',
        '</tpl>',    
        '</table>',
        '<div><hr class="templineview"></div>',
        '<table width="95%">',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.invoice.TotalTaxAmt")+' </b></td><td style="text-align:right;">' + totalTaxAmountPlaceHolder + '</td></tr>',
        '</table>',
        '<div><hr class="templineview"></div>',
        '</div>'
        );
        
    var lineLevelArray = [];
    if(WtfGlobal.GSTApplicableForCompany()==Wtf.GSTStatus.OLDNEW){
        for(var i=0; i<Wtf.LineTermsMasterStore.getRange().length; i++){
        var temp = Wtf.LineTermsMasterStore.getRange()[i].data;
        temp['taxAmount'] = WtfGlobal.currencyRenderer(0);
        lineLevelArray.push(temp);
    }    
    }

    this.LineLevelTermTpl=new Wtf.Panel({  
        border:false,
        width:'95%',
        hidden: !Wtf.account.companyAccountPref.isLineLevelTermFlag,
        baseCls:'tempbackgroundview',
        html:this.LineLevelTermTplSummary.apply({
            lineLevelArray : lineLevelArray,
            TotalTaxAmt:WtfGlobal.currencyRenderer(0)
        })
    });
                    
    this.southCenterTpl=new Wtf.Panel({
        border:false,
            html:this.southCenterTplSummary.apply({basecurrency:WtfGlobal.getCurrencyName(),exchangerate:'x',foreigncurrency:"Foreign Currency", editable:false})
    });
        
    this.productWeightDetailsTplSummary=new Wtf.XTemplate(
        '<div style="padding: 5px; border: solid rgb(153, 187, 232);border-width: 1px 1px 1px 1px;">', 
        '<div><hr class="templineview"></div>',
        '<div>',
        '<table width="100%">',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductWeight")+': </b></td><td text-align=right>{totalprdweight}</td></tr>',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductWeightWithPackaging")+': </b></td><td text-align=right>{totalprdweightwithpack}</td></tr>',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductVolume")+': </b></td><td text-align=right>{totalprdvolume}</td></tr>',
        '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductVolumeWithPackaging")+': </b></td><td text-align=right>{totalprdvolumewithpack}</td></tr>',
        '</table>',
        '</div>',            
        '<div><hr class="templineview"></div>',                        
        '</div>'
        );
    this.productWeightDetailsTpl=new Wtf.Panel({
        id:'productWeightDetailsTpl'+this.id,
        border:false,
        baseCls:'tempbackgroundview',
        width:'95%',
        hidden:(this.moduleid == Wtf.Acc_Sales_Return_ModuleId && Wtf.account.companyAccountPref.calculateproductweightmeasurment)?false:true,
        html:this.productWeightDetailsTplSummary.apply({
            totalprdweight:0,
            totalprdweightwithpack:0
        })
    });

    var itemArr={};
    itemArr = [this.ShowOnlyOneTime,this.Name, this.Currency,{
        layout:'column',
        border:false,
                defaults:{border:false},items:[ {
            layout:'form',
            ctCls : "",
            width:215,
            items:this.fromPO
        },
        {
            width:250,
            layout:'form',
            labelWidth:45,
            items:this.fromLinkCombo
        }
           ]},this.PO,this.sequenceFormatCombobox,this.Number,this.billDate, this.SupplierInvoiceNo,this.CostCenter,this.GTAApplicable,this.editedBy,this.FormType];
   
    this.tagsFieldset = new Wtf.account.CreateCustomFields({
        border: false,
        compId:"northForm"+this.id,
        parentObjScope: this,
        autoHeight: true,
        parentcompId:this.id,
        moduleid: this.moduleid,
        isEdit: this.isEdit,
        record: this.record,
        isViewMode:this.readOnly
    });
    var globalItemsArray=new Array();
    if ((this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)) {
        globalItemsArray.push(this.Memo, this.users,this.includingGST,this.includeProTax,this.applyTaxToTermsChk);
    }else{
        globalItemsArray.push(this.Memo, this.shipDate, this.shipvia, this.fob,this.users,this.AssignSRNumberntocn, this.CnDnSequenceFormatCombobox,this.pmtMethod,this.pmtMethodAcc,this.paymentSequenceFormatCombobox,this.paymentNumber, this.CnDnNumber,this.includingGST,this.isEWayCheck,this.includeProTax, this.applyTaxToTermsChk,this.MVATAnnexureCodeCombo);
        
    }
    this.NorthForm=new Wtf.form.FormPanel({
        region:'north',
        autoHeight:true,
        id:"northForm"+this.id,
        //disabled:this.readOnly,
        disabledClass:"newtripcmbss",
        border:false,
        items:[{
            layout:'form',
            baseCls:'northFormFormat',
            labelWidth:155,
            cls:"visibleDisabled",
            items:[{
                layout:'column',
                border:false,
                defaults:{
                    border:false
                },
                items:[{
                    layout:'form',
                    columnWidth:0.65,
                    border:false,
                    items:itemArr
                },{
                    layout:'form',
                    columnWidth:0.35,
                    border:false,
                    items:globalItemsArray
                }]
            },this.tagsFieldset]
        }]
    });

    this.helpMessage= new Wtf.Button({
        text:WtfGlobal.getLocaleText("acc.dashboard.help"),  //'Help',
        handler:this.helpmessage,
        scope:this,
        tooltip: WtfGlobal.getLocaleText("acc.common.click"),  //'Click for help',
        iconCls: 'help'
    });
       if (this.invoicefromorderrec != undefined && this.invoicefromorderrec != '') {
            this.POdate = this.invoicefromorderrec.date != undefined?this.invoicefromorderrec.date:(new Date(this.invoicefromorderrec.billdate));
        }
    this.addGrid();

    this.NorthForm.doLayout();
    
        var isGlobalLevelTaxHidden = false;

        /*----Condition to hide global level tax in transaction form------ */
        if (this.isEdit && this.record != null) {//For Edit , Copy & View Case
            if (this.record.data.taxid != undefined && this.record.data.taxid != null && this.record.data.taxid != "") {

                isGlobalLevelTaxHidden = false;
            } else {
                /*---Copy/Edit/View Case ----  */
                if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {//Check is true only for malaysian company
                    isGlobalLevelTaxHidden = true;
                } else if ((Wtf.account.companyAccountPref.countryid == '137' && !Wtf.account.companyAccountPref.enableGST) || Wtf.account.companyAccountPref.isLineLevelTermFlag == 1) {
                    isGlobalLevelTaxHidden = true;

                }
            }
        } else {
            /*---Create New Case----  */
            if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {//Check is true only for malaysian company
                isGlobalLevelTaxHidden = true;
            } else if ((Wtf.account.companyAccountPref.countryid == '137' && !Wtf.account.companyAccountPref.enableGST) || Wtf.account.companyAccountPref.isLineLevelTermFlag == 1) {
                isGlobalLevelTaxHidden = true;

            }
        }

    this.isTaxable = new Wtf.form.ComboBox({
        triggerAction: 'all',
        mode: 'local',
        valueField: 'value',
        displayField: 'name',
        id: "includetax" + this.heplmodeid + this.id,
        store: this.fromPOStore,
        listWidth: 50,
        fieldLabel: WtfGlobal.getLocaleText("acc.inv.totax"), //"Include Total Tax",
        allowBlank: this.isOrder,
        value: false,
        hideLabel:isGlobalLevelTaxHidden,// hide if company is malaysian and GST is not enabled for it
        hidden: isGlobalLevelTaxHidden, // hide if company is malaysian and GST is not enabled for it
        width: 50,
        typeAhead: true,
        forceSelection: true,
        name: 'includetax',
        hiddenName: 'includetax',
        listeners: {
            'select': {
                fn:this.enabletax,
                scope: this
            }
        }
    });
    this.Tax = new Wtf.form.ExtFnComboBox({
        fieldLabel: WtfGlobal.getLocaleText("acc.invoice.Tax"), //'Tax',
        id: "tax" + this.heplmodeid + this.id,
        disabled: !this.isEdit,
        hiddenName: 'tax',
        anchor: '97%',
        store: this.Grid.taxStore,
        hideLabel: isGlobalLevelTaxHidden, // hide if company is malaysian and GST is not enabled for it
        hidden: isGlobalLevelTaxHidden, // hide if company is malaysian and GST is not enabled for it
        valueField: 'prtaxid',
        forceSelection: true,
        //            labelWidth:50,
        displayField: 'prtaxname',
        //            addNewFn:this.addTax.createDelegate(this),
        scope: this,
        extraFields:[],
        isTax: true,
        listeners: {
            'select': {
                fn: function (a, val) {
                    if (WtfGlobal.singaporecountry() && WtfGlobal.getCurrencyID() != Wtf.Currency.SGD && this.isInvoice && this.Grid.forCurrency != Wtf.Currency.SGD) {
                        callGstCurrencyRateWin(this.id, "SGD ", undefined, this.gstCurrencyRate);
                    }
                    this.updateSubtotal(a, val);
                },
                scope: this
            },
            'beforeselect': {
                fn: function (combo, record, index) {
                    return validateSelection(combo, record, index);
                },
                scope: this
            }
        },
        selectOnFocus: true
    });
    var southPanelItemsArr = [this.productWeightDetailsTpl,this.INDCountryCenterTpl,this.LineLevelTermTpl,this.southCenterTpl];
    if (!this.isModuleForAvalara && !(this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)) {
        this.termgrid = CommonERPComponent.addInvoiceTermGrid(this);
         this.termgrid.on('render', function(){
                this.termgrid.getView().getRowClass = WtfGlobal.getRowClass.createDelegate(this, [this.termgrid], 1);
                }, this);
        southPanelItemsArr.push(this.termgrid);
    }
    this.southPanel = new Wtf.Panel({
//        hidden: !(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInSR:Wtf.account.companyAccountPref.unitPriceInPR),
        hidden: (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge) ? false : !(this.isCustomer ? Wtf.account.companyAccountPref.unitPriceInSR : Wtf.account.companyAccountPref.unitPriceInPR),
        region: 'center',
        border: false,
        //            hidden:!(this.isNoteAlso),//  Wtf.account.companyAccountPref.unitPriceConfiguration ||  !this.isNoteAlso,// this.isNoteAlso flag will be true if you are creating Sale/Purchase Return with Credit/Debit Note also
        disabled: this.readOnly,
        disabledClass: "newtripcmbss",
        style: 'padding:0px 10px 10px 10px',
        layout: 'column',
        height: (Wtf.isIE ? 350 : 290),
        items: [{
            columnWidth: .45, // width: 570,//region:'center',
            border: false,
            //                    cls:'bckgroundcolor',
            items: southPanelItemsArr
        }, {
            columnWidth: .55,
            layout: 'column', // width: 570,//region:'center',
            items: [
            {
                width:170,
                labelWidth:100,
                layout: 'form',
                border: false,
                items: [this.isTaxable]
            }, {
                columnWidth: 0.4,
                layout: 'form',
                labelWidth: 30,
                border: false,
                items: [this.Tax]

            }, {
                columnWidth: .6, // width: 570,//region:'center',
                cls: 'bckgroundcolor',
                items: [this.southCalTemp]
            }],
            border: false
        }]
    });

    this.toggleBtnPanel = new Wtf.Panel({
        style: 'padding: 10px 10px 0;',
        border : false,
        autoScroll: true,
        hidden:true,
        items : [{
            xtype: 'button',
            enableToggle: true,
            id:"setButton"+this.heplmodeid+this.id,
            hidden: this.readOnly,
            disabled:true,
            cls : 'setlocationwarehousebtn',
            text: WtfGlobal.getLocaleText("acc.SetWarehouseLocation"),
            toggleGroup: 'massupdate',
            handler: this.SetLocationwarehouseWindow.createDelegate(this)
        }]
    });
          
    this.deleteSelectedPanel = new Wtf.Panel({
        style: 'padding: 10px 10px 0;',
        border: false,
        autoScroll: true,
        hidden: true,
        items: [{
            xtype: 'button',
            id: "deleteButton" + this.heplmodeid + this.id,
            disabled: true,
            cls: 'setlocationwarehousebtn',
            text: WtfGlobal.getLocaleText("acc.common.deleteselected"),
            handler: this.deleteSelectedRecord.createDelegate(this)
        }]
    });
        
    if (!this.readOnly) {
        this.deleteSelectedPanel.show();
    }

    this.formpPanelOfbutton = new Wtf.Panel({
        border: false,
        autoScroll: true,
        layout: 'table',
        items: [this.toggleBtnPanel, this.deleteSelectedPanel]

    })
        
    this.Grid.on("onselection", function(){
        if(this.Grid.sModel.getCount()>=1){
            if(Wtf.getCmp("setButton"+this.heplmodeid+this.id))Wtf.getCmp("setButton"+this.heplmodeid+this.id).enable();
        }else{
            if(Wtf.getCmp("setButton"+this.heplmodeid+this.id))Wtf.getCmp("setButton"+this.heplmodeid+this.id).disable();
        }
        if (this.Grid.sModel.getCount() >= 1 && !this.isLinkedTransaction) {
            if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id))
                Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).enable();
        } else {
            if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id))
                Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).disable();
        }
    },this);
    if(Wtf.account.companyAccountPref.isWarehouseCompulsory && Wtf.account.companyAccountPref.isLocationCompulsory && (this.inputValue!=Wtf.CNDN_TYPE_FOR_MALAYSIA && this.inputValue!=Wtf.NoteForOvercharge && Wtf.account.companyAccountPref.countryid != Wtf.Country.MALAYSIA)){
        this.toggleBtnPanel.show();
    }
    if (!WtfGlobal.EnableDisable(Wtf.UPerm.tax, Wtf.Perm.tax.view))
        this.Tax.addNewFn = this.addTax.createDelegate(this);
    // this.POStore.on('load',this.updateSubtotal,this)
    this.billDate.on('change',this.onDateChange,this);
        
    if (Wtf.account.companyAccountPref.enableLinkToSelWin && (this.moduleid === Wtf.Acc_Sales_Return_ModuleId || this.moduleid ===Wtf.Acc_Purchase_Return_ModuleId)) {
            
        this.POStore.on('load',function(){
            addMoreOptions(this.PO,this.PORec)
            }, this);                       
            
        this.POStore.on('datachanged',function(){
            addMoreOptions(this.PO,this.PORec)
            }, this);                   
            
        this.PO.on("select", function () {
            var billid = this.PO.getValue();
            if (billid.indexOf("-1") != -1) {
                var url = "";
                if(this.id=="purchasereturn"){
                    if (this.fromLinkCombo.getValue() == 0) {
                        url = (this.isCustomer)?"ACCInvoiceCMN/getDeliveryOrdersMerged.do":"ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
                    } else if (this.fromLinkCombo.getValue() == 1){
                        url =  this.isCustomer ? "ACCInvoiceCMN/getInvoices.do" : "ACCGoodsReceiptCMN/getGoodsReceipts.do";
                    }  
                       
                }else if(this.id=="salesreturn"){
                    if (this.fromLinkCombo.getValue() == 0 || this.fromLinkCombo.getValue() == 3) {
                        url = (this.isCustomer)?"ACCInvoiceCMN/getDeliveryOrdersMerged.do":"ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
                    } else if (this.fromLinkCombo.getValue() == 1){
                        url =  this.isCustomer ? "ACCInvoiceCMN/getInvoices.do" : "ACCGoodsReceiptCMN/getGoodsReceipts.do";
                    }
                }
                this.PO.collapse();
                this.PO.clearValue();
                this.showPONumbersGrid(url);
            }
        }, this);
    }    
           
  
        
    this.setTransactionNumber();        
    if(this.isEdit) {
        //            this.loadRecord();
        this.loadEditableGrid();
    }
           
},
    shouldTaxBeHidden: function () {
        var date = this.billDate.getValue() === "" ? new Date() : new Date(this.billDate.getValue());
        var isTaxShouldBeEnable = WtfGlobal.isTaxShouldBeEnable(date.clearTime());
        return isTaxShouldBeEnable;
    },
/**
 * 
 * @param {type} o
 * @param {type} val
 * @param {type} oldval
   RCM Applicable Check changes method
 */
onRCMApplicableChange: function (o, val, oldval) {
    if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.GTAApplicable.getValue() && this.isCustomer) {
        var extraparams = {};
         /**
         * If custmer / Vendor Not selected then RCM check changes
         */
        if (this.Name.getValue() == '') {
            this.GTAApplicable.setValue(oldval);
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), this.isCustomer ? WtfGlobal.getLocaleText("acc.mp.selectCustFirst") : WtfGlobal.getLocaleText("acc.mp.selectVenFirst")], 2);
            return;
        }
        if (this.Name.store.getCount() > 0) {
            var recordid = this.Name.getValue();
            var index = this.Name.store.find('accid', recordid);
            if (index != -1) {
                var record = this.Name.store.getAt(index);
                extraparams.record = record;
                var isValid = isRCMValidCustomer(this, extraparams);
                if (!isValid) {
                    return;
                }
            }
        }
    }
    if (this.Grid.getStore().getCount() > 1) {
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoice.gridDataWillCleared"), function (btn) {
            if (btn == "yes") {
                this.Grid.getStore().removeAll();
                this.Grid.addBlankRow();
                this.updateSubtotal(this, true);
                updateTermDetails(this.Grid);

            } else {
                o.setValue(oldval);
            }
        }, this);
    }
},
validateSIN : function(){
        var SupplierInvoiceNo =this.SupplierInvoiceNo.getValue();
        if(SupplierInvoiceNo!='' && WtfGlobal.isIndiaCountryAndGSTApplied()){
            if(SupplierInvoiceNo.length > 16){
                 Wtf.MessageBox.confirm("Warning",WtfGlobal.getLocaleText("acc.gst.SINSequenceformatErrorMsg1") + SupplierInvoiceNo + WtfGlobal.getLocaleText("acc.gst.SINSequenceformatErrorMsg2") + Wtf.SeqenceFormatMaxLengthForIndianCompany + WtfGlobal.getLocaleText("acc.gst.SINSequenceformatErrorMsg3"), function(btn){
                                if(btn == 'yes') {  
                                    this.SupplierInvoiceNo.setValue(SupplierInvoiceNo);
                                }else if(btn == 'no') {
                                    this.SupplierInvoiceNo.reset();
                                    return;           
                                }
                            },this);
        }
      }
   },
setPMData: function() {  
        var rec;
        var methodid ;
        var rowIndex;
        if(!this.isEdit && !this.copyInv && !this.readOnly){
            rowIndex = this.pmtStore.find("detailtype", "0");
            if (rowIndex != -1) {
                rec = this.pmtStore.getAt(rowIndex);                
                methodid = rec.get('methodid');
                this.pmtMethod.setValue(methodid);
                this.ShowCheckDetails(this.pmtMethod, rec);
            }
        }
        if(this.isEdit || this.readOnly || this.copyInv){
            this.pmtMethod.setValue(this.record!=null?this.record.data.methodid:"");
            this.ShowCheckDetails(this.pmtMethod, this.record);
        }
    },
    ShowCheckDetails: function(combo, rec,isBankToBankMethodChange) {
        var methodAccindx = this.pmtStore.find('methodid', rec.data['methodid']);
        if (methodAccindx != -1) {
            this.pmtMethodAcc.setValue(this.pmtStore.getAt(methodAccindx).get("accountname"));
        }
    },
    setPaymentAccData:function(comboObject,newValue,oldValue){
        if(newValue != oldValue){
            var newrec = WtfGlobal.searchRecord(this.pmtStore, newValue, "methodid");
            this.ShowCheckDetails(comboObject,newrec);
        }
    },
SetLocationwarehouseWindow: function(){
        
    this.recArr = this.Grid.getSelectionModel().getSelections();
    var quantityNonSetProductCount=0;
    var productwithLocationWarehouse=0;
    for(var k=0;k< this.recArr.length;k++){
        var proRecord=this.recArr[k];
        if(proRecord.data.isLocationForProduct  && proRecord.data.isWarehouseForProduct  && !proRecord.data.isSerialForProduct && !proRecord.data.isBatchForProduct){
            productwithLocationWarehouse++;
            if(proRecord.data.dquantity ==""){
                quantityNonSetProductCount++;
            }
        }
            
    }
        
    if(productwithLocationWarehouse ==0){
        //            var msg="Selected Records don't  have Product's having Warehouse/Location enabled."
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.window.noRecordwithWarhouselocation")],2);
        return false;
    }else if (quantityNonSetProductCount > 0){
        //             msg="Quantity is not set for some Products from  Selected Records."
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.grid.noquanitysetforProduct")],2);
        return false;
    }else{
        this.SetLocationwarehouseWindow = new Wtf.account.SetLocationwarehouseWindow({
            id: 'setLocationwarehouseWindow'+this.id,
            title: WtfGlobal.getLocaleText("acc.SetWarehouseLocation"),
            border: false,
            isCustomer:this.isCustomer,
            grid:this.Grid,
            scope:this,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            resizable: false,
            renderTo: document.body
        });
        this.SetLocationwarehouseWindow.show(); 
    }
}, 
     
deleteSelectedRecord: function() {
    var store = this.Grid.getStore();
    var arr = [];
    var arrLinked1=[];
    var component = "";
    var deletedData = [];
    var value = "";
    var arrLinked = [];
    var arrNotLinked = [];
    var message = "Link Information of ";
    /* Link to  Combo*/
    var linkToComponent = Wtf.getCmp(this.fromLinkCombo.id);
    /* Link combo*/
    var linkComponent = Wtf.getCmp(this.fromPO.id);
    var count = 0;
    var rowindex = 0;
    var isLastProductDeletedFlag = false;
    var isNotLinkedFlag = false;
    var selectedCount = this.Grid.sModel.getCount();
        
    for (rowindex = 0; rowindex < selectedCount; rowindex++) {

        var addFlag = false;
        var editFlag = false;
        var copyFlag = false;
          
        var record = this.Grid.sModel.getSelections()[rowindex];
        arrLinked[rowindex] = "";
        arrNotLinked[rowindex] = "";
        /* Checking Cases whether it is Add , Edit or Copy Case*/
           
        if (!this.isEdit && this.fromLinkCombo.getRawValue() != "" && (record.data.billno && record.data.billid)) {
            addFlag = true;
        } else if (this.isEdit && this.fromLinkCombo.getRawValue() != "" && (record.data.linkto && record.data.linkid)) {
            editFlag = true;
        } else if (this.copyInv && this.fromLinkCombo.getRawValue() != "" && (record.data.billno && record.data.billid)) {
            copyFlag = true;
        }
       


        /* Function is used to check whether selected linked product is last product or not*/

        var lastProductDeleted = false;
           
        if (editFlag) {
            lastProductDeleted = isLinkedProduct(store, record, true);
        } else if (addFlag) {
            lastProductDeleted = isLinkedProduct(store, record, false);
        } else if (copyFlag) {
            lastProductDeleted = isLinkedProduct(store, record, false);
        }
        

        if (lastProductDeleted) {
            count++;
            isLastProductDeletedFlag = true;
            if (Wtf.Acc_RFQ_ModuleId == this.moduleid & count == 1) {
                message += "Purchase Requisition <b>";
            } else {

                if (count == 1) {
                    if (editFlag) {
                        message += linkToComponent.lastSelectionText;
                    } else {
                        message += linkToComponent.lastSelectionText;
                    }
                }
            }

            if (this.PO.id) {
                if (count == 1) {
                    component = Wtf.getCmp(this.PO.id);
                    value = component.getValue();
                    arr = value.split(",");
                    arrLinked1=value.split(",");
                }

                /* Block is used to remove linked document from combo */
                if (arr.length > 1) {
                    this.linkedDocumentId += editFlag ? record.data.linkid + " , " : record.data.billid + " , ";//appending ID of removed document
                    arr.remove(editFlag ? record.data.linkid : record.data.billid);

                } else {
                    /* Reseting Link &  Link to combo if all linked document is getting removed*/
                    if (!(Wtf.Acc_RFQ_ModuleId == this.moduleid)) {
                        this.linkedDocumentId += editFlag ? record.data.linkid + " , " : record.data.billid + " , ";
                        arr.remove(editFlag ? record.data.linkid : record.data.billid);

                    } 

                }

            }
            
            var qty = record.data.quantity;
            qty = (qty == "NaN" || qty == undefined || qty == null) ? 0 : qty;

            if (record.data.copyquantity != undefined) {

                var newRec = new this.Grid.deleteRec({
                    productid: record.data.productid,
                    productname: record.data.productname,
                    productquantity: qty,
                    productbaseuomrate: record.data.baseuomrate,
                    productbaseuomquantity: record.data.baseuomquantity,
                    productuomid: record.data.uomid,
                    productrate: record.data.rate
                });
                deletedData.push(newRec);
            }
            /* Preparing array of linked product*/
            arrLinked[rowindex] = this.Grid.sModel.getSelections()[rowindex];



        } else {
            /* Block is used to delete  line level Product if they have not been linked*/
            var qty = record.data.quantity;
            qty = (qty == "NaN" || qty == undefined || qty == null) ? 0 : qty;

            if (record.data.copyquantity != undefined) {

                var newRec = new this.Grid.deleteRec({
                    productid: record.data.productid,
                    productname: record.data.productname,
                    productquantity: qty,
                    productbaseuomrate: record.data.baseuomrate,
                    productbaseuomquantity: record.data.baseuomquantity,
                    productuomid: record.data.uomid,
                    productrate: record.data.rate

                });
                deletedData.push(newRec);
            }
            isNotLinkedFlag=true;
            arrNotLinked[rowindex] = this.Grid.sModel.getSelections()[rowindex];

        }
    }
       
      
    var showPromptFlag = false;
    var linkid="";
    var message1="";
    /* Checking whether Last Product is deleted from linked documents*/
    if (isLastProductDeletedFlag) {
        for (var j = 0; j < arrLinked1.length; j++) {
                
            var recordCount = 0;
            var recordCountInLinkedArray = 0;
            var counter=0;
            /* calculating count of selected linked product*/
            for (var l = 0; l < arrLinked.length; l++) {
                if (arrLinked[l] != "") {
                    
                    linkid= this.isEdit?arrLinked[l].data.linkid:arrLinked[l].data.billid ;
                       
                    if (linkid == arrLinked1[j]) {
                        if (counter == 0) {
                            counter++;
                            message1 += this.isEdit ? " <b>" + arrLinked[l].data.linkto + "</b>" + " , " : " <b>" + arrLinked[l].data.billno + "</b>" + " , ";
                        }
                        recordCountInLinkedArray++;
                    }
                }
            }
            /* calculating count from store with selected linkid product*/
            store.each(function(rec) {
                  
                linkid= this.isEdit?rec.data.linkid:rec.data.billid;
                   
                if (arrLinked1[j] == linkid) {
                    recordCount++;
                }

            }, this)

            /* checking that all linked product of particular linked transaction is selcted, if yes then showing prompt i.e showPromptFlag=true*/
            if (recordCount - recordCountInLinkedArray == 0) {
                message += message1;
                showPromptFlag = true;
            } else {
                arr[j] = arrLinked1[j];
            }
            message1="";
        }
    }

    /* Block is used to Delete Line level product after confirmation if they linked with any other document */
    if (((isLastProductDeletedFlag && isNotLinkedFlag) || isLastProductDeletedFlag) && showPromptFlag) {
        message = message.slice(0, -3);
        message += "</b> will be Removed. </br>" + WtfGlobal.getLocaleText("acc.nee.48")
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), message, function(btn) {
            if (btn != "yes")
                return;

            /* Deleting linked product by ID*/
            for (var i = 0; i < arrLinked.length; i++) {
                if (arrLinked[i] != "") {
                    var id = arrLinked[i].id;
                    store.remove(store.getById(id));
                }

            }
            component.setValue(arr);
            if (arr.length == 0) {
                linkToComponent.setValue("");
                linkComponent.setValue("");
                /* After removing all linked documents, All the linking combo is setting enable in Edit mode*/
                this.fromLinkCombo.disable();//Link to: should disabled if Link value is "NO"
                this.fromPO.enable();
                this.PO.disable();//Number: should disabled if Link value is "NO"
            }
                
            /* Block is used to Delete Line level product if they are not linked with any other document */
            if (isNotLinkedFlag) {

                /* Deleting linked product by ID*/
                for (var i = 0; i < arrNotLinked.length; i++) {
                    if (arrNotLinked[i] != "") {
                        var id = arrNotLinked[i].id;
                        store.remove(store.getById(id));
                    }

                }
            }

            this.Grid.deleteStore.add(deletedData);
            if (this.includeProTax && this.includeProTax.getValue() == true) {
                /*
                 * Recalculated Tax Amount using adaptive rounding algo on delete selected products.
                 * ERM-1085
                 */
                WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, false);
            }
            this.Grid.fireEvent('datachanged', this);
            this.Grid.fireEvent('productdeleted', this);
        }, this);
    }else{
        /* Block is used to Delete Line level product if they cannot affect linking information of that document*/
           
        /* Deleting linked product by ID*/
        for (var i = 0; i < arrLinked.length; i++) {
            if (arrLinked[i] != "") {
                var id = arrLinked[i].id;
                store.remove(store.getById(id));
            }

        }
                
        /* Deleting linked product by ID*/
        for (var i = 0; i < arrNotLinked.length; i++) {
            if (arrNotLinked[i] != "") {
                var id = arrNotLinked[i].id;
                store.remove(store.getById(id));
            }

        }
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
            updateTermDetails(this.Grid);
        }
        this.Grid.deleteStore.add(deletedData);
        if (this.includeProTax && this.includeProTax.getValue() == true) {
            /*
             * Recalculated Tax Amount using adaptive rounding algo on delete selected products.
             * ERM-1085
             */
            WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, false);
        }
        this.Grid.fireEvent('datachanged', this);
        this.Grid.fireEvent('productdeleted', this);

    }              
},
addSelectedDocument:function(){
    var url="";
    if(this.moduleid==Wtf.Acc_Purchase_Return_ModuleId||this.moduleid==Wtf.Acc_Credit_Note_ModuleId){
            if (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA) {
                url = "ACCGoodsReceiptCMN/getGoodsReceipts.do";
            } else if (this.inputValue == Wtf.NoteForOvercharge) {
                url = "ACCInvoiceCMN/getInvoices.do";
            } else {
                if (this.fromLinkCombo.getValue() == 0) {
                    url = "ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
                } else if (this.fromLinkCombo.getValue() == 1) {
                    url = "ACCGoodsReceiptCMN/getGoodsReceipts.do";
                }
            }
        } else if (this.moduleid == Wtf.Acc_Sales_Return_ModuleId || this.moduleid == Wtf.Acc_Debit_Note_ModuleId) {
            if (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA) {
                url = "ACCInvoiceCMN/getInvoices.do";
            } else if (this.inputValue == Wtf.NoteForOvercharge) {
                url = "ACCGoodsReceiptCMN/getGoodsReceipts.do";
            } else {
                if (this.fromLinkCombo.getValue() == 0) {
                    url = "ACCInvoiceCMN/getDeliveryOrdersMerged.do";
                } else if (this.fromLinkCombo.getValue() == 1) {
                    url = "ACCInvoiceCMN/getInvoices.do";
                }
            }
        }
     Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"), WtfGlobal.getLocaleText("acc.DSW.WM"), function (btn) {
            if (btn == "yes") {
                Wtf.Ajax.abort(this.POStore.proxy.activeRequest);
                this.showPONumbersGrid(url);
            } else {
                return;
            }
        }, this);
},
addMoreOptions:function(){
    var recordIndex = this.PO.store.findBy(
        function (record, id) {
            if (record.get('billid') === '-1') {
                return true;  // a record with this data exists
            }
            return false;  // there is no record in the store with this data
        }
        );
    if (recordIndex == -1 && this.PO.store.getCount()) {
        this.PO.store.insert(this.PO.store.getCount(), new this.PORec({
            billno: "<a href=#>More</a>",
            billid: '-1'
        })); // created record for "More"
    }
},
getPostTextEditor: function(posttext)
{
    var _tw=new Wtf.EditorWindowQuotation({
        val:this.postText
    });
        
    _tw.on("okClicked", function(obj){
        this.postText = obj.getEditorVal().textVal;
        var styleExpression  =  new RegExp("<style.*?</style>");
        this.postText=this.postText.replace(styleExpression,"");
                 
             
    }, this);
    _tw.show();
    return this.postText;
},
    getAddressWindow:function(){
        var addressRecord="";
        var isCopy=false;
        var isEdit=false;
        var custvendorid=this.Name.getValue();
        
        if(this.isCopy || this.isEdit ){//edit or copy case
            isCopy=this.isCopy;
            isEdit=this.isEdit;
            addressRecord=this.record; 
        }if(this.singleLink){//new case when single invoice is linked
            addressRecord=this.linkRecord;
        }
       
        callAddressDetailWindow(addressRecord,isEdit,isCopy,custvendorid,this.currentAddressDetailrec,this.isCustomer,this.readOnly,"",this.singleLink,undefined,WtfGlobal.getModuleId(this)); 
//        callAddressDetailWindow(addressRecord,isEdit,isCopy,custvendorid,this.currentAddressDetailrec,this.isCustomer,this.readOnly,"",this.singleLink,undefined,WtfGlobal.getModuleId(this),false,"",false,false,this.stateAsComboFlag); 
        Wtf.getCmp('addressDetailWindow').on('update',function(config){
//            this.currentAddressDetailrec=config.currentaddress;
            if (WtfGlobal.isIndiaCountryAndGSTApplied()) {
                this.populateGSTDataOnAddressChange();
            }
        },this);
    },
    populateGSTDataOnAddressChange: function () {
        /**
         * auto poulate dimension values
         */
        if (WtfGlobal.isIndiaCountryAndGSTApplied()) {
            var obj = {};
            obj.tagsFieldset = this.tagsFieldset;
            this.addressDetailRecForGST=this.currentAddressDetailrec;
            obj.currentAddressDetailrec = this.addressDetailRecForGST;
            /**
             * On Edit case this.addressMappingRec not defined 
             */
            var person = this.Name.getValue();
            if(person!='' && this.addressMappingRec==undefined){
                var personIndex = this.Name.store.find('accid',person);
                if(personIndex!=-1){
                    var personRec = this.Name.store.getAt(personIndex);
                   this.addressMappingRec =  personRec.data && personRec.data.addressMappingRec ? personRec.data.addressMappingRec : "";
                }
            }
            obj.mappingRec = this.addressMappingRec;
            obj.isCustomer = this.isCustomer;
            obj.isShipping = this.isShipping;
            obj.stateAsComboFlag = this.stateAsComboFlag;
            var invalid = populateGSTDimensionValues(obj)
            /**
             * On Address Changes done then need to make getGSTForProduct Request to update tax Details
             */
            var isAddressChanged = true;
            this.applyGSTFieldsBasedOnDate(isAddressChanged); //isAddressChanged = true if address changes
        }
    },

calTotalAmountInBase:function(){
    var subtotal=this.Grid.calSubtotalInBase(); 
    var taxVal = this.calAmountInBase(this.caltax()+this.addTermAmountInTax());
    var nontaxableamount = this.calAmountInBase(this.calCulateNonTaxableTermAmount());
    var tdsamount = this.calAmountInBase(this.calculateTDSAmount());
    var returnValInOriginalCurr = subtotal + this.findTermsTotalInBase()+taxVal + nontaxableamount - tdsamount;//-discount;
    returnValInOriginalCurr = getRoundedAmountValue(returnValInOriginalCurr);
    return returnValInOriginalCurr; 
},
findTermsTotalInBase : function() {
    var termTotal = 0;
    if(this.termgrid) {
        var store = this.termgrid.store;
        var totalCnt = store.getCount();
        for(var cnt=0; cnt<totalCnt; cnt++) {
            var lineAmt = store.getAt(cnt).data.termamount;
            if(typeof lineAmt=='number'){
                var termVal = getRoundedAmountValue(lineAmt);
                termTotal += this.calAmountInBase(termVal);
            } 
        }
    }
    /*
    * In case of "Inclusive of Tax" Term Amount is considered as Including Tax.
    * So in case of Including GST we are calculating term amount as below,
    * Total Term Amount minus Total tax calculate on term amount.
    */
    if(this.includingGST && this.includingGST.getValue()){
        termTotal = termTotal - this.calAmountInBase(this.addTermAmountInTax());
    }
    return getRoundedAmountValue(termTotal);
},
calAmountInBase:function(val){
    var returnVal = getRoundedAmountValue(val*this.getExchangeRate());
    return returnVal; 
}, 
getExchangeRate:function(){
    var index=this.getCurrencySymbol();
    var rate=this.externalcurrencyrate;
    var revExchangeRate = 0;
    if(index>=0){
        var exchangeRate = this.currencyStore.getAt(index).data['exchangerate'];
        if(this.externalcurrencyrate>0) {
            exchangeRate = this.externalcurrencyrate;
        }
        revExchangeRate = 1/(exchangeRate);
        revExchangeRate = (Math.round(revExchangeRate*Wtf.Round_Off_Number))/Wtf.Round_Off_Number;
    }
    return revExchangeRate;
}, 
applyTemplate:function(store,index){
    var editable=this.Currency.getValue()!=WtfGlobal.getCurrencyID()&&this.Currency.getValue()!=""//&&!this.isOrder;
    var exchangeRate = store.getAt(index).data['exchangerate'];
    if(this.externalcurrencyrate>0) {
        exchangeRate = this.externalcurrencyrate;
    } else if(this.isEdit && this.record.data.externalcurrencyrate && !(this.custdatechange || this.currencychanged)){
        var externalCurrencyRate = this.record.data.externalcurrencyrate-0;//??[PS]
        if(externalCurrencyRate>0){
            exchangeRate = externalCurrencyRate;
        }
    }
    this.externalcurrencyrate = exchangeRate;
    var revExchangeRate = 1/(exchangeRate-0);
    if(this.exchangeratetype!=undefined&&this.exchangeratetype=="foreigntobase"&&this.revexternalcurrencyrate!=undefined&&this.revexternalcurrencyrate!=0)
    {
        revExchangeRate=this.revexternalcurrencyrate
        this.revexternalcurrencyrate=0;
    }
    revExchangeRate = (Math.round(revExchangeRate*Wtf.Round_Off_Number))/Wtf.Round_Off_Number;
        this.southCenterTplSummary.overwrite(this.southCenterTpl.body,{foreigncurrency:store.getAt(index).data['currencyname'],exchangerate:exchangeRate,basecurrency:WtfGlobal.getCurrencyName(),editable:editable,revexchangerate:revExchangeRate         
    });
},
    
closeContract : function(){
    var contractStatus=1;
    //       ['1','Pending'],['2','Pending & Closed'],['3','Done'],['4','Done & Closed']] 
    if(this.contractStatus==1)
        contractStatus=2;
    else if(this.contractStatus==3)
        contractStatus=4;

    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.contractReoprt.closeContract")+"?",function(btn){
        if(btn=="yes") {
            Wtf.Ajax.requestEx({
                url: "ACCContract/changeContractSRStatus.do",
                params: {
                    contractid : this.contractid,
                    status : contractStatus
                }
            },this,this.genSuccessResponseClosed,this.genFailureResponseClosed);

        }
    }, this)
},
genSuccessResponseClosed : function(response){
    Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.success"), response.msg, function(){
        if(Wtf.getCmp('normalcontractorderreport') && Wtf.getCmp('normalcontractorderreport').ContractStore){
            Wtf.getCmp('normalcontractorderreport').ContractStore.reload();
        }
    }, this);
},
genFailureResponseClosed : function(response){
    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.Erroroccurredwhileupdatingstatus")],2);
},
    
onDateChange:function(a,val,oldval){
        /**
         * ERP-32829 
         */
//        if (WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.OLDNEW || WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.NEW) {
//            this.setGSTFlagUsingApplicableDate(val);
//        }
     this.transactiondateforgst=this.billDate.getValue();
     /*
    *	ERM-1037
    *	On date change send id of selected document to function to restrict linking of future dated document
    */
     var selectedBillIds= this.PO.getValue().toString();
        if (selectedBillIds != "") {
            var selectedValuesArr = selectedBillIds.split(',');
            WtfGlobal.checkForFutureDate(this, selectedValuesArr)
        }
    if (this.isIndiaGST) {
        /**
         * Apply GST fields 
         */
        if ((this.isEdit && !this.copyInv && !this.checkgststatus)) {
            /**
             * Show pop up in Edit  case
             */
            checkGSTDataOnDateCase(this, this.Grid, oldval);
        } else if (this.PO.getValue() != undefined && this.PO.getValue() != "" && !this.checkgststatus) {
            /**
             * get link document date and Show pop up in 
             */
            getLinkDateTocheckGSTDataOnDateCase(this, this.Grid);
        } else {
            /**
             * Apply GST based on date
             */
            this.applyGSTFieldsBasedOnDate();
        }
        this.checkgststatus = false;
    }
    this.val=val;
    this.oldval=oldval;
    if(this.Grid){
        this.Grid.billDate=this.billDate.getValue();
    }
    //        this.loadTax(val);
    if(this.Currency.getValue()==WtfGlobal.getCurrencyID()){ //when tranaction in base currency for all cases (edit,copy, create new)
        this.doOnDateChanged(val,oldval);
    } else if((this.isEdit && !this.copyInv) && Wtf.account.companyAccountPref.retainExchangeRate){ //edit case: when user want to retain exchange rate        
        this.exchangeRateInRetainCase = true;
        this.currencyStore.load({
            params: {
                mode: 201, 
                transactiondate: WtfGlobal.convertToGenericDate(this.billDate.getValue())
                }
            });
            
//            return;                                       
} else if(this.isEdit || this.copyInv) { //1.Edit case when user do not want to retain exchange rate 2.copy case
    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.invoice.exchangeRateMsg"),function(btn){
        if(btn=="yes"){
            this.doOnDateChanged(val,oldval); 
        } else{
            this.billDate.setValue(oldval);
            return;
        }
    },this);
} else { //Normal Create New Case           
    this.doOnDateChanged(val,oldval);        
} 
//        this.externalcurrencyrate=0;
this.custdatechange=true;
//        this.Grid.loadPriceStoreOnly(val,this.Grid.priceStore);
        
},
doOnDateChanged:function(val,oldval){
    this.externalcurrencyrate=0;
       this.currencyStore.on('load',function(store){this.onDateChangeVendorCurrencyExchangeRate();},this);
        this.currencyStore.load({params:{mode:201,transactiondate:WtfGlobal.convertToGenericDate(this.billDate.getValue())}});
},
onDateChangeVendorCurrencyExchangeRate : function(){
    var count=this.Grid.store.getCount();
    for(var i=0;i< count;i++){
        var rec = this.Grid.store.getAt(i);
        if(rec!=null && rec.data.vendorcurrencyid!="" && rec.data.vendorcurrencyid!=null && rec.data.productid!=""){
            var currRec=WtfGlobal.searchRecord(this.currencyStore, rec.data.vendorcurrencyid, 'currencyid');
            if(currRec!=null){
                this.setVendorCurrExchangeRate(rec,currRec);
            }
        }
    }
},
    
setVendorCurrExchangeRate : function(rec,currRec){
    if(currRec!=null){
        var baseToVenCurr = currRec.data.exchangerate;
        var revExchangeRate = 1/(baseToVenCurr-0);
        revExchangeRate = getRoundofValueWithValues(revExchangeRate,10);
        rec.data.vendorcurrexchangerate = revExchangeRate;
    }
},
    hideLoading:function(){Wtf.MessageBox.hide();},
    
addCostCenter:function(){
    callCostCenter('addCostCenterWin');
},
EwayFieldsEnableDisable:function(){
    this.tagsFieldset.EnableDisableEwayRelatedFields(this); 
},
addGrid:function(){
    this.Grid=new Wtf.account.SalesReturnGrid({
        height: 300,//region:'center',//Bug Fixed: 14871[SK]
        cls:'gridFormat',
        layout:'fit',
                    viewConfig:{forceFit:false},
        isCustomer:this.isCustomer,
        isNoteAlso:this.isNoteAlso,
        editTransaction:this.isEdit,
        readOnly:this.isViewTemplate ||this.readOnly,
        disabledClass:"newtripcmbss",
        isCustBill:false,
        id:this.id+"billingproductdetailsgrid",
        moduleid:this.moduleid,
        currencyid:this.Currency.getValue(),
        fromOrder:true,
        isOrder:this.isOrder,
        isEdit:this.isEdit,
        isPayment:this.isPayment,
        copyTrans:this.copyInv, 
        isGST:this.isGST,
        forceFit:true,
        loadMask : true,
        heplmodeid:this.heplmodeid,
        parentid:this.id,
        parentObj :this,
        inputValue:this.inputValue,
        prComboId : this.PO.id,
        linkTo: this.fromLinkCombo.id,
        link:   this.fromPO.id,
        isViewTemplate: this.isViewTemplate,
        disabled:!(this.isEdit ||this.copyInv)?true:false
                    
    });
    this.Name.on('select',this.onNameSelect,this)
    this.Name.on('beforeselect', function(combo, record, index) {
        this.nameBeforeSelect = combo.getValue();
        return validateSelection(combo, record, index);
            
    }, this);
    this.NorthForm.on('render',this.setDate,this);
    if (this.readOnly) {
        this.disabledbutton();  //  disabled button in view case
        if (this.NorthForm) { 
            this.NorthForm.disable();
        }
    }  
    this.Grid.getStore().on('load',function(store){            
        this.Grid.addBlank(store);
        this.updateFormCurrency();
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
            updateTermDetails(this.Grid);
        }
    }.createDelegate(this),this);
    this.Grid.on("datachanged", function(){
        //           this.applyCurrencySymbol();
        this.updateSubtotal();
        this.isClosable=false          // Set Closable flag on grid data change
    },this);
    this.Grid.on("gridconfigloaded", function(){
        if(this.moduleid== Wtf.Acc_Sales_Return_ModuleId){
            this.hideShowProductWeightColumns();
        }
        if (this.isCustomer) {
            if (Wtf.account.companyAccountPref.unitPriceInSR) {
                this.showGridTax(null, null, !this.includeProTax.getValue());
            }
        } else {
            if (Wtf.account.companyAccountPref.unitPriceInPR) {
                this.showGridTax(null, null, !this.includeProTax.getValue());
            }
        }
    },this);
},

enabletax:function(c,rec){
    if(rec.data['value']==true){
        this.Tax.enable();   
        this.includingGST.setValue(false);
        this.includingGST.disable();
        this.includeProTax.setValue(false);
        this.includeProTax.disable();
    }else{
        this.Tax.disable();
        this.Tax.setValue("");
        this.includingGST.enable();
        this.includeProTax.enable();
    }
    /*If rec.data['value'] = True means Hidden False
    *If rec.data['value'] = False means Hidden True
    *This function written in CommonERPComponent.js
    */
    if(!(this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)){
        this.HideShowLinkedTermTaxAndTermTaxAmountCol(rec.data['value']);
        this.setSingleMappedTaxToInvoiceTerm(rec.data['value']);
    }
    if(rec.data['value']==false && !(this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)){
        this.resetLinkedTaxNameAndTermTaxAmount(rec.data['value']);
    }
    this.updateSubtotal();
},
disabledbutton:function(){
    this.shipDate.setDisabled(true);
    this.shipvia.setDisabled(true);
    this.fob.setDisabled(true);
    this.CnDnSequenceFormatCombobox.setDisabled(true);
    this.CnDnNumber.setDisabled(true);
    this.fromLinkCombo.setDisabled(true);
    this.fromPO.setDisabled(true); 
    this.PO.setDisabled(true);
    this.sequenceFormatCombobox.setDisabled(true);
    this.Number.setDisabled(true);
    this.billDate.setDisabled(true);
    this.editedBy.setDisabled(true);    
    this.CostCenter.setDisabled(true);
    this.Currency.setDisabled(true);
    this.Name.setDisabled(true);
    if(this.users){
        this.users.setDisabled(true);
    }
    this.includingGST.setDisabled(true);
},
addSalesPerson:function(){
    addMasterItemWindow('15');// Master Group Sales Person ID=15
},
addAgent:function(){
    addMasterItemWindow('20');// Master Group Agent ID=20
},
 onBeforesalesPersonLoad: function(store, obj) {
        if (!obj.params) {
            obj.params = {};
        }
            obj.params.customerid = this.Name.getValue();
    },
onBeforeAgentLoad: function(store, obj) {
    if (!obj.params) {
        obj.params = {};
    }
    obj.params.vendorid = this.Name.getValue();
},
setSalesPerson:function(c,rec,ind){
    if(this.users){
        this.users.setValForRemoteStore(rec.data['masterSalesPerson'],rec.data['masterSalesPersonName'],rec.data['hasAccess']);
//        this.users.setValue(rec.data['masterSalesPerson']);
    }
},
setAgent:function(c,rec,ind){
    if(this.users){
        this.users.setValForRemoteStore(rec.data['masteragent'],rec.data['masteragentname'],rec.data['hasAccess']);
//        this.users.setValue(rec.data['masteragent']);
    }
},
onNameSelect:function(combo,rec,index){
    this.enableGrid();
        if (this.isGST) {
            this.addressMappingRec = rec.data.addressMappingRec;
            /**
             * ERP-32829 
             * code for New GST  i.e. populate dimension using dimension
             */

            if (rec.data.currentAddressDetailrec != undefined) {
                this.addressDetailRecForGST = rec.data.currentAddressDetailrec[0];
                if (this.isIndiaGST) {
                    this.applyGSTFieldsBasedOnDate();
                } else if (rec.data.uniqueCase != undefined) {
                    this.uniqueCase = rec.data.uniqueCase;
                    this.sezfromdate = rec.data.sezfromdate;
                    this.seztodate = rec.data.seztodate;
                    this.transactiondateforgst = this.billDate.getValue();
                }
                if (!this.isModuleForAvalara) {
                    var obj = {};
                    obj.tagsFieldset = this.tagsFieldset;
                    obj.currentAddressDetailrec = this.addressDetailRecForGST;
                    obj.mappingRec = this.addressMappingRec;
                    obj.isCustomer = this.isCustomer;
                    obj.isShipping = this.isShipping;
                    populateGSTDimensionValues(obj)
                }
            }
            /**
             * Check and show alert GST details for Customer and Vendor if not available 
             */
//            var cust_Vendparams = {};
//            cust_Vendparams.rec = rec;
//            cust_Vendparams.isCustomer = this.isCustomer;
//            checkAndAlertCustomerVendor_GSTDetails(cust_Vendparams);
//            this.GSTINRegistrationTypeId=rec.data.GSTINRegistrationTypeId;
//            this.gstin=rec.data.gstin;
//            this.CustomerVendorTypeId=rec.data.CustomerVendorTypeId;
//            this.ignoreHistory=true;
//                        
//            if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
//                if (!this.isCustomer && rec.data.GSTINRegTypeDefaultMstrID != undefined && rec.data.GSTINRegTypeDefaultMstrID !== "") {
//                    if (rec.data.GSTINRegTypeDefaultMstrID === Wtf.GSTRegMasterDefaultID.Unregistered) {
//                        this.GTAApplicable.setValue(true);
//                        this.GTAApplicable.setDisabled(true);
//                    } else {
//                        this.GTAApplicable.setDisabled(false);
//                    }
//                }
//            }
        }
    if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
            if(rec.data.interstateparty == true){
                this.FormType.allowBlank=false;//If Vendor/Customer is "InsterState Party" enable then "Form to Issue" will be Mandatory.
                WtfGlobal.showFormElement(this.FormType);
                if(rec.data.cformapplicable == true){//If Selected Vendor/Customer has C form applicable, then by Default C form will populate.
                    this.FormType.setValue(this.FormSelectionStore.getAt(1).data.id);
                }else{
                    this.FormType.setValue(this.FormSelectionStore.getAt(0).data.id);
                }
            }else{
                this.FormType.allowBlank=true;
                WtfGlobal.hideFormElement(this.FormType);
            }
    }
    if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && !this.isCustomer){
        this.updateVATNumbers(rec);
    }
    if (this.isCustomer) {
        this.setSalesPerson(combo, rec, index);
    } else {
        this.setAgent(combo, rec, index);
    }
},
    /**
     * Function to get GST fields data based on date.
     */
    applyGSTFieldsBasedOnDate: function (isAddressChanged) {
         if (this.Name.getValue() == undefined || this.Name.getValue() == ''){
           return;
        }
        Wtf.Ajax.requestEx({
            url: this.isCustomer ? "ACCCustomerCMN/getCustomerGSTHistory.do" : "ACCVendorCMN/getVendorGSTHistory.do",
            params: {
                customerid: this.Name.getValue(),
                vendorid: this.Name.getValue(),
                returnalldata: true,
                isfortransaction: true,
                transactiondate: WtfGlobal.convertToGenericDate(this.billDate.getValue())

            }
        }, this, function (response) {
            if (response.success) {
                /**
                 * Validate GST details
                 */
                isGSTDetailsPresnetOnTransactionDate(response, this, this.Grid, this.Name);
                this.ignoreHistory = true;
                this.GSTINRegistrationTypeId = response.data[0].GSTINRegistrationTypeId;
                this.gstin = response.data[0].gstin;
                this.CustomerVendorTypeId = response.data[0].CustomerVendorTypeId;
                this.uniqueCase = response.data[0].uniqueCase;
                this.transactiondateforgst = this.billDate.getValue();
                this.CustVenTypeDefaultMstrID=response.data[0].CustVenTypeDefaultMstrID;
                this.GSTINRegTypeDefaultMstrID=response.data[0].GSTINRegTypeDefaultMstrID;
                var cust_Vendparams = {};
                var record = {};
                record.data = response.data[0];
                cust_Vendparams.rec = record;
                cust_Vendparams.isCustomer = this.isCustomer;
                checkAndAlertCustomerVendor_GSTDetails(cust_Vendparams);
                if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
                    if (!this.isCustomer) {
                        if (response.data[0].GSTINRegTypeDefaultMstrID != undefined && response.data[0].GSTINRegTypeDefaultMstrID !== "" && response.data[0].GSTINRegTypeDefaultMstrID === Wtf.GSTRegMasterDefaultID.Unregistered) {
                            this.purchaseFromURD = true;
                        } else {
                            this.purchaseFromURD = false;
                        }
                    } 
                    /*** If purchases is from Unregistered dealer ERP-40813 ***/ 
                    if (this.isPurchasesTransaction && this.purchaseFromURD) {
                       
                        this.uniqueCase = Wtf.GSTCustVenStatus.NOGST;                        
                    }
                }
                /**
                 * On Address Changes done then need to make getGSTForProduct Request to update tax Details
                 */
                if(this.keepTermDataInLinkCase==false || isAddressChanged){
                    processGSTRequest(this, this.Grid);
                }
            }
        });
    },
/**
 * ERP-34199
 * On Edit/ Copy case set GST details
 * Populate Customer/ Vendor GST details in Edit/   Copy Case
 */
    populateGSTDataOnEditCopy: function () {
        // this.copyInv - in VQ  copy 
        if (this.isGST && (this.isEdit || this.copyInv)) {
            //  var perStore = this.isCustomer ? Wtf.customerAccRemoteStore : Wtf.vendorAccRemoteStore;
            this.individualPersonDetails = new Wtf.data.Store({
                url: this.isCustomer ? "ACCCustomer/getCustomersForCombo.do" : "ACCVendor/getVendorsForCombo.do",
                baseParams: {
                    mode: 2,
                    group: this.isCustomer ? 10 : 13,
                    deleted: false,
                    nondeleted: true,
                    common: '1'
                },
                reader: new Wtf.data.KwlJsonReader({
                    root: "data"
                }, Wtf.personRec)
            });
            this.individualPersonDetails.on('load', function (storeObj, recArr) {
                var index = this.individualPersonDetails.find('accid', this.record.data.personid);
                if (index != -1) {
                    var record = this.individualPersonDetails.getAt(index);
                    this.setGSTDetailsOnEditCase(record);
                }
            }, this);
            if (this.isCustomer) {
                this.individualPersonDetails.load({
                    params: {
                        selectedCustomerIds: this.record.data.personid
                    },
                    scope: this
                });
            } else {
                this.individualPersonDetails.load({
                    params: {
                        vendorid: this.record.data.personid
                    },
                    scope: this
                });
            }
        }
    },
/**
 * ERP-34199
 * On Edit/ Copy case set GST details
 * Populate Customer/ Vendor GST details in Edit/   Copy Case
 */
    setGSTDetailsOnEditCase: function (record) {
        this.addressMappingRec = record.data.addressMappingRec;
//        if (record.data.currentAddressDetailrec != undefined) {
//            if (record.data.uniqueCase != undefined) {
//                this.uniqueCase = record.data.uniqueCase;
//                this.sezfromdate = record.data.sezfromdate;
//                this.seztodate = record.data.seztodate;
//                this.transactiondateforgst = this.billDate.getValue();
//            }
//            this.addressDetailRecForGST = record.data.currentAddressDetailrec[0];
//        }
    }, 
    /**
     * ERP-32829 
     * Function to check whether transaction created using New GST or Old GST
     */
    setGSTFlagUsingApplicableDate: function(date) {
        if (date != undefined) {
            var gstapplieddate = Wtf.account.companyAccountPref.gstapplieddate;
            if (date >= gstapplieddate) {
                if (!this.isGST && this.Grid.getStore().getCount() > 1) {
                    this.Grid.getStore().removeAll();
                    this.Grid.addBlankRow();
                    this.Grid.productComboStore.load();
                }
                this.isGST = true;
                this.Grid.isGST = true;
            } else {
                if(this.isGST && this.Grid.getStore().getCount() > 1){
                    this.Grid.getStore().removeAll();
                    this.Grid.addBlankRow();
                    this.Grid.productComboStore.load();
                }
                this.isGST = false;
                this.Grid.isGST = false;
            }
            if (this.Grid.getStore().getCount() > 1) {
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoice.gridDataWillCleared"), function(btn) {
                    if (btn == "yes") {
                        this.Grid.getStore().removeAll();
                        this.Grid.addBlankRow();
                        this.Grid.productComboStore.load();
                        this.updateSubtotal(this, true);
                        this.Grid.updateTermDetails();

                    } else {

                    }
                }, this);
            } else {
            }
        }
    },
updateVATNumbers: function(rec){
    this.INDCountryCenterTplSummary.overwrite(this.INDCountryCenterTpl.body,{
        CompanyVATNumber: rec.data.vattinno, 
        CompanyCSTNumber: rec.data.csttinno, 
        CompanyPANNumber: rec.data.panno, 
        CompanyServiceTaxRegNumber: rec.data.servicetaxno, 
        CompanyTANNumber: rec.data.tanno,
        CompanyECCNumber: rec.data.eccno
        });
},
enableGrid:function(){
    this.Grid.setDisabled(false);  
},
addOrder:function(){
    var tabid = "deliveryorder";
    callDeliveryOrder(false,null, tabid);
    if(Wtf.getCmp(tabid)!=undefined) {
        Wtf.getCmp(tabid).on('update',function(){
            this.POStore.reload();
        },this);
    }
},

enablePO:function(c,rec){
    this.fromLinkCombo.clearValue();
    this.PO.clearValue();
    this.CostCenter.clearValue();
        
    //        this.Name.clearValue();
    this.Memo.setValue("");

    if(rec.data['value']==true){                                                
        this.fromLinkCombo.enable();                        
        this.fromOrder=true;
    }
    else{
        this.Grid.getStore().removeAll();            
        this.Grid.addBlankRow();
        this.fromLinkCombo.disable();
        this.PO.disable();            
    }
    if (this.isCustomer) {
        if (Wtf.account.companyAccountPref.unitPriceInSR || this.isNoteAlso) {
            this.enableGridComponent(rec);
        }
    } else {
        if (Wtf.account.companyAccountPref.unitPriceInPR || this.isNoteAlso) {
            this.enableGridComponent(rec);
        }
    }
//this.currencyStore.load(); 	       // Currency id issue 20018
},
enableGridComponent: function (rec) {     // function to hide line level tax 
    var id = this.Grid.getId()
    var rowtaxindex = this.Grid.getColumnModel().getIndexById(id + "prtaxid");
    var rowtaxamountindex = this.Grid.getColumnModel().getIndexById(id + "taxamount");
    if (rec != null && rec.data['value'] == true) {     // hide in linking records 
        this.Grid.getColumnModel().setEditable(rowtaxindex, false);
        this.Grid.getColumnModel().setEditable(rowtaxamountindex, false);
    }else if(rec != null && rec.data['value'] == false){
        this.Grid.getColumnModel().setEditable(rowtaxindex, true);
        this.Grid.getColumnModel().setEditable(rowtaxamountindex, true);
    }

},
enableNumber:function(c,rec){        
    
    this.PO.clearValue();
    this.CostCenter.clearValue();
    this.Memo.setValue("");
    this.Grid.getStore().removeAll();            
    this.Grid.addBlankRow();
    this.updateFormCurrency();
        
    if(rec.data['value']==0){   
        this.PO.multiSelect=true;
        this.isMultiSelectFlag=true;
        this.POStore.proxy.conn.url = (this.isCustomer)?"ACCInvoiceCMN/getDeliveryOrdersMerged.do":"ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
                this.POStore.load({params:{id:this.Name.getValue(),currencyfilterfortrans:this.Currency.getValue(),nondeleted:true,linkFlag:true}});        
    this.PO.enable(); 
    this.POSelected=(this.isCustomer)?"sales":"purchase";
    this.PO.removeListener("select",this.populateData,this);  // for selection of multiple sales order 
    this.PO.addListener("blur",this.populateData,this);
}else if(rec.data['value']==1){
    this.POStore.proxy.conn.url = this.isCustomer ? "ACCInvoiceCMN/getInvoices.do" : "ACCGoodsReceiptCMN/getGoodsReceipts.do";
    var params="";
    if(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA){
        params={
            cashonly:false,
            creditonly:true, 
            cnAgainstVenGstflag:true, 
            currencyfilterfortrans:this.Currency.getValue(),
            nondeleted:true,
            linkFlag:true,
            openingTrans:false,
            onlyexpenseinv:false,
            islinkPItoCN:true
        };
    }else{
        params={
            cashonly:false,
            creditonly:true, 
            salesPurchaseReturnflag:true, 
            currencyfilterfortrans:this.Currency.getValue(),
            nondeleted:true,
            linkFlag:true,
            openingTrans:false,
            onlyexpenseinv:false,
            isPIlinktoPR:true
        };
    }
    /**
     * For US country Debit and Credit note Overcharge and Undercharge case, for getting custom dimension 
     * linking data value, this flag used
     * ERP-36971
     */
    if (( Wtf.account.companyAccountPref.countryid == Wtf.Country.US) && (this.inputValue == Wtf.NoteForUnderCharge || this.inputValue == Wtf.NoteForOvercharge)) {
        params.isLinkOverUnderCharge = true;
    }
    this.isMultiSelectFlag=true;
    this.PO.multiSelect=true;
    if(this.isCustomer) {                        
        params.customerid=this.Name.getValue();
        if(this.isPayment){
            params.cashonly=true;
            params.isPayment=this.isPayment;
        }else{
            params.CashAndInvoice=true;
        }
    }else{
        params.vendorid=this.Name.getValue();                    
    }
    this.salesPurchaseReturnflag = true,
    this.cnAgainstVenGstflag = true,
    this.POStore.load({
        params:params
    });        
    this.PO.enable();       
    this.POSelected="invoice";
    this.PO.removeListener("select",this.populateData,this);  // for selection of multiple sales order 
    this.PO.addListener("blur",this.populateData,this);
}
},
    
loadEditableGrid:function(){
       
    this.subGridStoreUrl = "";
    if(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue==Wtf.NoteForOvercharge){
        if(!this.isCN){
            this.subGridStoreUrl = "ACCDebitNote/getDebitNoteRows.do";
        }else{
            this.subGridStoreUrl = "ACCCreditNoteCMN/getCreditNoteRows.do";
        }
        
    }else{
        this.subGridStoreUrl = (this.isCustomer)?"ACCInvoiceCMN/getSalesReturnRows.do":"ACCGoodsReceiptCMN/getPurchaseReturnRows.do";
             
    }
    this.billid=this.record.data.billid;
    this.Grid.getStore().proxy.conn.url = this.subGridStoreUrl;
    this.Grid.getStore().on("load", function(){
        this.loadRecord();
    }, this);
    this.Grid.getStore().load({
        params:{
            bills:this.billid,
            isEdit:this.isEdit,
            moduleid:this.moduleid,
            copyInv:this.copyInv
            }
        });
    this.Grid.store.on('load', this.onGridStoreLoad, this);     
//        this.Grid.store.on('load', function (store1, record) {
//            var productids = "";
//            for (var count = 0; count < record.length; count++) {
//                var rec = record[count];
//                if (rec != undefined && rec != null && rec.data != undefined && rec.data != null && rec.data != "") {
//                    productids = productids + rec.data.productid + ",";
//                }
//            }
//            if (this.moduleid == Wtf.Acc_Purchase_Return_ModuleId && this.copyInv && productids != "") {
//                var product_ids = productids.substring(0, productids.length - 1);
//                this.Grid.productComboStore.load({params: {ismultiselectProductids: true, selectedProductIds: product_ids}});
//            }
//    },this);
},
 
onGridStoreLoad: function (store1, record) {
    if (this.productOptimizedFlag != Wtf.Show_all_Products && this.moduleid == Wtf.Acc_Purchase_Return_ModuleId && this.copyInv) {
        var productids = "";
        for (var count = 0; count < record.length; count++) {
            var rec = record[count];
            if (rec != undefined && rec != null && rec.data != undefined && rec.data != null && rec.data != "") {
                productids = productids + rec.data.productid + ",";
            }
        }
        var product_ids = productids.substring(0, productids.length - 1);
        if (productids != "") {
            this.Grid.productComboStore.on('load', function () {
                this.Grid.store.un('load', this.onGridStoreLoad, this);
            }, this);
            this.Grid.productComboStore.load({params: {ismultiselectProductids: true, selectedProductIds: product_ids}});
        }
    }
}, 
 
populateData:function(c,rec) {
    if(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue==Wtf.NoteForOvercharge){
        this.includeProTax.disable();
        this.Tax.disable();
        this.isTaxable.disable();
    }
    var billid = this.PO.getValue();
    if(billid !=""){  
        if (Wtf.account.companyAccountPref.enableLinkToSelWin && (this.moduleid === Wtf.Acc_Sales_Return_ModuleId || this.moduleid === Wtf.Acc_Purchase_Return_ModuleId)) {           
            if (billid.indexOf("-1") != -1) {
                var selectedValuesArr = billid.split(',');
                var arr = [];
                for (var cnt = 0; cnt < selectedValuesArr.length; cnt++) {
                    if (selectedValuesArr[cnt] != "-1") {
                        arr.push(selectedValuesArr[cnt]);
                    }
                }
                this.PO.setValue(arr);
                var url = "";
                if (this.fromLinkCombo.getValue() == 0) {
                    url = (this.isCustomer)?"ACCInvoiceCMN/getDeliveryOrdersMerged.do":"ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
                }
                else if (this.fromLinkCombo.getValue() == 1){
                    url =  this.isCustomer ? "ACCInvoiceCMN/getInvoices.do" : "ACCGoodsReceiptCMN/getGoodsReceipts.do";
                }
                this.showPONumbersGrid(url);
            }
        }  
        if(billid!=-1){
            if(this.isMultiSelectFlag){ //For MultiSelection 
                var selectedids=this.PO.getValue();
                var multiRecords=false;
                var isInvoiceLevelTax=false;
                var selectedValuesArr = selectedids.split(',');
                var productLevelTax=false;
                var isGSTTax=false;
                
                var withoutTax=false;
                this.previusTaxId="";
                var isInvoiceTaxDiff=false;
                var invoiceLevelTaxRecords=0;
          
                for(var cnt=0;cnt<selectedValuesArr.length;cnt++){
                    rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cnt]));
                    if(this.isIndiaGST){
                        this.ignoreHistory=false;
                        /**
                         * set GST fields in Linking case
                         */
                        if (rec.data.CustomerVendorTypeId != undefined && rec.data.CustomerVendorTypeId!='') {
                            this.CustomerVendorTypeId = rec.data.CustomerVendorTypeId;
                        }
                        if (rec.data.GSTINRegistrationTypeId != undefined && rec.data.GSTINRegistrationTypeId!='') {
                            this.GSTINRegistrationTypeId = rec.data.GSTINRegistrationTypeId;
                        }
                        if (rec.data.gstin != undefined && rec.data.gstin!='') {
                            this.gstin = rec.data.gstin;
                        }
                    }
                       
                    //        rec=this.POStore.getAt(this.POStore.find('billid',billid));  
                    /**
                     * RCM Applicable only Sales Return with Credit Note
                     */
                    if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.moduleid == Wtf.Acc_Sales_Return_ModuleId) {
                        if (this.isNoteAlso) { // IF Sales Return with Credit note 
                            if (selectedValuesArr.length == 1) {
                                if (rec.data['gtaapplicable']) {//If Selected Vendor/Customer has GTA applicable, then by Default value will be populate.
                                    this.GTAApplicable.setValue(true);
                                } else {
                                    this.GTAApplicable.setValue(false);
                                }
                            } else {
                                if (this.GTAApplicable.getValue()) {
                                    if (!rec.data['gtaapplicable']) {
                                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.common.rcm.transaction.invalid.rcmapplicable")], 2);
                                        this.PO.clearValue();
                                        return;
                                    }
                                } else {
                                    if (rec.data['gtaapplicable']) {
                                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.common.rcm.transaction.invalid.rcmnotapplicable")], 2);
                                        this.PO.clearValue();
                                        return;
                                    }
                                }
                            }
                        }else{ // IF sales return without Credit note then restrict add RCM Applicable linking transaction
                            if (rec.data['gtaapplicable']) {
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.common.rcm.transaction.invalid.rcmnotapplicable")], 2);
                                this.PO.clearValue();
                                return;
                            }
                        }
                    }
                    this.linkedInvoiceTotalAmountDue+=rec.data['amountdue'];
                    this.Grid.fromPO=true;                
                    this.Memo.setValue(rec.data['memo']);
                    this.SupplierInvoiceNo.setValue(rec.data['supplierinvoiceno']);
                    this.postText=rec.data['posttext'];
                    this.Name.setValue(rec.data['personid']); 
                    this.shipDate.setValue(rec.data['shipdate']);
                    this.shipvia.setValue(rec.data['shipvia']);
                    this.fob.setValue(rec.data['fob']);
                    this.Currency.setValue(rec.data['currencyid']);
                    var perstore=this.isCustomer? Wtf.customerAccStore : Wtf.vendorAccStore;
                    var storerec=perstore.getAt(perstore.find('accid',rec.data['personid']));
                    this.setTermValues(rec.data.termdetails);
                    this.CostCenter.setValue(rec.data.costcenterid);
                    if(selectedValuesArr.length==1){
                        if (this.isNoteAlso) {
                            this.salesPersonID = rec.data["salesPerson"];
                        }
                        if (rec!=undefined && this.users != null && this.users != undefined) {//if multiselection value is one then it will set value to Sales Person/Agent else blank-ERP-19289
                            if(this.isCustomer){
                                if(rec.data['salesPerson'] != undefined && rec.data['salesPerson'] != ""){
                                    //ERP-41011: Setting Remote Store
                                    this.users.setValForRemoteStore(rec.data.salesPerson ,rec.data.salespersonname,true);
//                                    this.users.setValue(rec.data['salesPerson']) 
                                }
                            }                       
                        }
                        
                        if (rec!=undefined && this.users != null && this.users != undefined) {
                            if(!this.isCustomer && (this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA||this.inputValue==Wtf.NoteForOvercharge)){
                                if(rec.data['agent'] != undefined && rec.data['agent'] != ""){
                                    //ERP-41011: Sales Person Combo changed to Remote store
                                    this.users.setValForRemoteStore(rec.data.agent ,rec.data.agentname,true);
//                                    this.users.setValue(rec.data['agent']) 
                                }
                            }                       
                        }
                        
                        if (rec.data["includeprotax"]) {
                            this.includeProTax.setValue(true);
                            if(rec.data["gstIncluded"]){
                                this.includingGST.setValue(true);
                                this.includeProTax.setDisabled(true);
                            }else{
                                this.includingGST.setValue(false);
                            }
                            if(!(this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)){
                                this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                                this.applyTaxToTermsChk.setValue(rec.data['isapplytaxtoterms']);
                            }
                            if (this.inputValue != Wtf.CNDN_TYPE_FOR_MALAYSIA) {
                                if (this.isCustomer) {
                                    if (Wtf.account.companyAccountPref.unitPriceInSR) {
                                        this.showGridTax(null, null, false);
                                    }
                                } else {
                                    if (Wtf.account.companyAccountPref.unitPriceInPR) {
                                        this.showGridTax(null, null, false);
                                    }
                                }
                            } else {
                                this.showGridTax(null, null, false);
                            }
                            this.isTaxable.setValue(false);//when selecting record with product tax.Tax should get disabled.
                            this.isTaxable.disable();
                            this.Tax.setValue("");
                            this.Tax.disable();
                            
                                /*----If "Map Taxes at product level" check is ON from system preferences 
                                 * For malaysian company then we show Line level tax
                                 * at the time of linking documents if parent documents is created with line level Tax
                                 ----------*/
                                if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {//and also check record data is mapped with product level taxes but how here (for normal transaction created with line level taxes)
                                    this.Tax.hide();
                                    WtfGlobal.hideFormLabel(this.Tax);
                                    this.isTaxable.hide();
                                    WtfGlobal.hideFormLabel(this.isTaxable);
                                }
                            
                        } else {
                            this.includeProTax.setValue(false);
                            this.includingGST.setValue(false);
                            if (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA) {
                                 this.showGridTax(null, null, true);
                            } else {
                                if (this.isCustomer) {
                                    if (Wtf.account.companyAccountPref.unitPriceInSR) {
                                        this.showGridTax(null, null, true);
                                    }
                                } else {
                                    if (Wtf.account.companyAccountPref.unitPriceInPR) {
                                        this.showGridTax(null, null, true);
                                    }
                                }
                            }
                            if(this.inputValue!=Wtf.CNDN_TYPE_FOR_MALAYSIA && this.inputValue!=Wtf.NoteForOvercharge){
                                this.Tax.enable();
                                this.isTaxable.enable();
                            }
                            
                            
                                /*----If "Map Taxes at product level" check is ON from system preferences +                                 * For malaysian company then we show Global level tax
                                 * at the time of linking documents if parent documents is created with global level Tax
                                 ----------*/
                                if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                                    this.Tax.show();
                                    WtfGlobal.showLabel(this.Tax);
                                    this.isTaxable.show();
                                    WtfGlobal.showLabel(this.isTaxable);
                                }
                        }
                        if ((rec.data.taxid == "")) {//generate so or po it should not show taxid
                            this.isTaxable.setValue(false);
                            this.Tax.setValue("");
                            this.Tax.disable();
                        } else {
//                                if (isTaxActivate(this.Grid.taxStore, rec.data.taxid, "prtaxid")) {
                                    this.Tax.setValue(rec.data.taxid);
//                                } else {
//                                    this.Tax.setValue("");
//                                }
                                if(this.inputValue!=Wtf.CNDN_TYPE_FOR_MALAYSIA && this.inputValue!=Wtf.NoteForOvercharge){
                                    this.isTaxable.enable();
                                    this.Tax.enable();//enable the tax when taxid is present-for edit case it was not required but for copy its is required.
                                }
                                this.isTaxable.setValue(true);
                                if(!(this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)){
                                    this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
                                }
                        }
                    }else if(selectedValuesArr.length>1){
                        multiRecords=true;
                        //If more than one record are selected then set to blank as it is done in Invoice
                        if (this.users != null && this.users != undefined) {
                            this.users.setValForRemoteStore("" ,"",true);
                        }
                        if(rec.data["gstIncluded"]){ //checks for GST Tax 
                            isGSTTax=true;
                        }else if(rec.data["includeprotax"]){ //checks for product level tax
                            productLevelTax=true;
                        }else if(rec.data["taxid"]!="" && rec.data["taxid"]!=undefined && rec.data["taxid"] != "None"){ //checks for invoice level tax 
                            isInvoiceLevelTax=true;                        
                            if(invoiceLevelTaxRecords!=0 && this.previusTaxId!=rec.data["taxid"]){
                                isInvoiceTaxDiff=true;
                            }
                            this.previusTaxId=rec.data["taxid"];
                            this.includeProTax.setValue(false);
                            this.showGridTax(null,null,true);//updating include product tax
                            invoiceLevelTaxRecords++;
                        }else{
                            withoutTax=true;//applicable for both no tax and diff tax
                        }
            
                    }
                    //this.updateDueDate();
                    var billid = this.PO.getValue();
                    var record=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cnt]));
                    if(Wtf.account.companyAccountPref.countryid !=Wtf.Country.MALAYSIA){
                        this.resetCustomFields();
                    }
                    var fieldArr = this.POStore.fields.items;
                    for(var fieldCnt=0; fieldCnt < fieldArr.length; fieldCnt++) {
                        var fieldN = fieldArr[fieldCnt];

                        if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id) && record.data[fieldN.name] !="") {
                            if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).getXType()=='datefield'){
                                Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(new Date(record.json[fieldN.name + "_Value"]));
                            }else if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).xtype=='fncombo' || Wtf.getCmp(fieldN.name+this.tagsFieldset.id).getXType()=='fncombo'){
                                var ComboValue=record.data[fieldN.name];
                                //                                var ComboValueID="";
                                //                                var recCustomCombo =WtfGlobal.searchRecord(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).store,ComboValue,"name");
                                if(ComboValue){
                                    //                                    ComboValueID=recCustomCombo.data.id;
                                    Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(ComboValue);
                                    var parent = Wtf.getCmp(fieldN.name + this.tagsFieldset.id).parentid;
                                    var displayValue = record.json[fieldN.name + "_linkValue"];
                                    if (parent != undefined && displayValue != undefined && parent.length > 0) {
                                        if (displayValue) {
                                            Wtf.getCmp(fieldN.name + this.tagsFieldset.id).setValForChildComboStore(ComboValue, displayValue); // create record and set value
                                        }
                                    } 
                                    var  childid= Wtf.getCmp(fieldN.name+this.tagsFieldset.id).childid;
                                    if(childid.length>0){
                                        var childidArray=childid.split(",");
                                        for(var i=0;i<childidArray.length;i++){
                                            var currentBaseParams = Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.baseParams;
                                            currentBaseParams.parentid=ComboValue;
                                            Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.baseParams=currentBaseParams;
                                            Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.load();
                                        }
                                    }  
                                }
                            }else{
                                Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(record.data[fieldN.name]);
                            }
                        }
                        if(fieldN.name.indexOf("Custom_") == 0){
                            var fieldname=fieldN.name.substring(7,fieldN.name.length);
                            if(Wtf.getCmp(fieldname+this.tagsFieldset.id) && record.data[fieldN.name] !="") {
                                if(Wtf.getCmp(fieldname+this.tagsFieldset.id).getXType()=='fieldset'){
                                    var ComboValue=record.json[fieldN.name];
                                    var ComboValueArrya=ComboValue.split(',');
                                    var ComboValueID="";
                                    var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray; 
                                    for(var i=0 ;i < ComboValueArrya.length ; i++){
                                        for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
                                            if(checkListCheckBoxesArray[checkitemcnt].id.indexOf(ComboValueArrya[i]) != -1 )
                                                if (Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id) != undefined) {
                                                    Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id).setValue(true);
                                                }
                                        } 
                                    }
                                }else if(Wtf.getCmp(fieldname+this.tagsFieldset.id).getXType()=='select'){
                                    var ComboValue=record.json[fieldN.name];
                                    //                                    var ComboValueArrya=ComboValue.split(',');
                                    //                                    var ComboValueID="";
                                    //                                    for(var i=0 ;i < ComboValueArrya.length ; i++){
                                    //                                        var recCustomCombo =WtfGlobal.searchRecord(Wtf.getCmp(fieldname+this.tagsFieldset.id).store,ComboValueArrya[i],"name");
                                    //                                        ComboValueID+=recCustomCombo.data.id+","; 
                                    //                                    }
                                    //                                    if(ComboValueID.length > 1){
                                    //                                        ComboValueID=ComboValueID.substring(0,ComboValueID.length - 1);
                                    //                                    }
                                    if(ComboValue!="" && ComboValue!=undefined)
                                        Wtf.getCmp(fieldname+this.tagsFieldset.id).setValue(ComboValue);
                                }
                
                            }
                            /**
                             * Set value of exemption code dimension in case of Avalara Integration
                             */
                            if (this.isModuleForAvalara && fieldname == Wtf.integration.avalaraExemptionCode && Wtf.getCmp(fieldN.name+this.tagsFieldset.id) && (!record.data[fieldN.name] || billid.indexOf(",") != -1)) {
                                Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue("1234");//Set 'None' if no value is selected
                            }
                        }
                    //            var linkedRecordExternalCurrencyRate=rec.data["externalcurrencyrate"];
                    //                if(this.Currency.getValue()!=WtfGlobal.getCurrencyID && linkedRecordExternalCurrencyRate!="" && linkedRecordExternalCurrencyRate!=undefined){ //If selected currency is foreign currency then currency exchange rate will be exchange rate of linked document 
                    //                    this.externalcurrencyrate=linkedRecordExternalCurrencyRate;
                    //        }
                    }
                    var url = "";
                    var linkingFlag = false;
                    var islinkPItoCN = false;
                    if(this.fromLinkCombo.getValue()==0){
                        url = this.isCustomer ? "ACCInvoiceCMN/getDeliveryOrderRows.do" : "ACCGoodsReceiptCMN/getGoodsReceiptOrderRows.do";
                        linkingFlag=true;
                    } else if(this.fromLinkCombo.getValue()==1){
                        url = this.isCustomer ? "ACCInvoiceCMN/getInvoiceRows.do" : "ACCGoodsReceiptCMN/getGoodsReceiptRows.do";
                        linkingFlag =true;
                        islinkPItoCN = true;
                    }
                        
                    //        var url = this.isCustomer ? "ACCInvoiceCMN/getDeliveryOrderRows.do" : "ACCGoodsReceiptCMN/getGoodsReceiptOrderRows.do";
                    //(this.isCustBill?53:43)

                    rec=this.PO.getValue();
                    this.Grid.getStore().proxy.conn.url = url;      
                    if(this.salesPurchaseReturnflag){
                        this.Grid.getStore().baseParams.salesPurchaseReturnflag = this.salesPurchaseReturnflag;
                    }
                    if(this.cnAgainstVenGstflag && this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA){
                        this.Grid.getStore().baseParams.cnAgainstVenGstflag = this.cnAgainstVenGstflag;
                    }
                }
                /*
                *ERM-1037
                *send id of selected document to function to restrict linking of future dated document
                */
                var isFutureDatedDocumentLinked = WtfGlobal.checkForFutureDate(this, selectedValuesArr);
                if (isFutureDatedDocumentLinked) {
                    return;
                }
                if(multiRecords){
                    
                    if(isGSTTax){ //case when any linked record have GST Tax
                        var includeGstCount=0;
                        var excludeGstCount=0;
                        var enableApplyTaxtoTermCount=0;
                        var disableApplyTaxtoTermCount=0;
                        for(var cntGst=0;cntGst<selectedValuesArr.length;cntGst++){
                            var temprec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cntGst]));
                            if(temprec.data["gstIncluded"]){
                                includeGstCount++;
                            }else if(!temprec.data["gstIncluded"]){
                                excludeGstCount++;
                            }
                            /*Check all records have enable apply tax to terms or not*/
                            if(temprec.data["isapplytaxtoterms"]){
                                enableApplyTaxtoTermCount++;
                            }else if(!temprec.data["isapplytaxtoterms"]){
                                disableApplyTaxtoTermCount++;
                            }
                        }

                        if(!((selectedValuesArr.length==includeGstCount)||(selectedValuesArr.length==excludeGstCount))){
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                            this.PO.clearValue();
                            return;
                        }else if(!((selectedValuesArr.length==enableApplyTaxtoTermCount) || (selectedValuesArr.length==disableApplyTaxtoTermCount))){
                            //pop up
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                            this.PO.clearValue();
                            return;
                        }else if((selectedValuesArr.length==enableApplyTaxtoTermCount) || (selectedValuesArr.length==disableApplyTaxtoTermCount)){
                            if(selectedValuesArr.length==includeGstCount){
                                this.includeProTax.setValue(true);
                                this.includeProTax.setDisabled(true);
                                this.includingGST.setValue(true);
                                this.includingGST.enable();
                                this.showGridTax(null,null,false);
                                this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                                if(selectedValuesArr.length==enableApplyTaxtoTermCount){
                                    this.applyTaxToTermsChk.setValue(true); 
                                }else{
                                    this.applyTaxToTermsChk.setValue(false);
                                }
                            }else if(selectedValuesArr.length==excludeGstCount){
                                this.includeProTax.setValue(false);
                                this.includingGST.setValue(false);
                                this.showGridTax(null,null,true);
                            }
                            //Check all linked documents have same taxes,percetage to invoice term and set Invoice term.
                            this.summarizeInvoiceTermAmount(selectedValuesArr);
                        }else{
                            if(selectedValuesArr.length==includeGstCount){
                                this.includeProTax.setValue(true);
                                this.includingGST.setValue(true);
                            }else if(selectedValuesArr.length==excludeGstCount){
                                this.includeProTax.setValue(false);
                                this.includingGST.setValue(false);
                            }
                        }
                    }else if(productLevelTax){//case when any linked record have product tax without GST Tax
                        var enableApplyTaxtoTermCnt=0;
                        var disableApplyTaxtoTermCnt=0;
                        for(var cntTerm=0;cntTerm<selectedValuesArr.length;cntTerm++){
                            var temprec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cntTerm]));
                            /*Check all records have enable apply tax to terms or not*/
                            if(temprec.data["isapplytaxtoterms"]){
                                enableApplyTaxtoTermCnt++;
                            }else if(!temprec.data["isapplytaxtoterms"]){
                                disableApplyTaxtoTermCnt++;
                            }
                        }
                        if(isInvoiceLevelTax){
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                            this.PO.clearValue();
                            return;
                        }else if(!((selectedValuesArr.length==enableApplyTaxtoTermCnt) || (selectedValuesArr.length==disableApplyTaxtoTermCnt))){
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                            this.PO.clearValue();
                            return;
                        }else if((selectedValuesArr.length==enableApplyTaxtoTermCnt) || (selectedValuesArr.length==disableApplyTaxtoTermCnt)){
                            this.includeProTax.setValue(true);
                            this.includingGST.setValue(false);
                            this.showGridTax(null,null,false);
                            this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                            this.isTaxable.setValue(false);//when selcting record with product tax.Tax should get disabled.
                            this.isTaxable.disable();
                            this.Tax.setValue("");
                            this.Tax.disable();
                            if(selectedValuesArr.length==enableApplyTaxtoTermCnt){
                                this.applyTaxToTermsChk.setValue(true); 
                            }else{
                                this.applyTaxToTermsChk.setValue(false);
                            }
                            //Check all linked documents have same taxes,percetage to invoice term and set Invoice term.
                            this.summarizeInvoiceTermAmount(selectedValuesArr);
                        }else{//no tax and producttax
                            this.includeProTax.setValue(true);
                            this.showGridTax(null,null,false); 
                            this.isTaxable.setValue(false);//when selcting record with product tax.Tax should get disabled.
                            this.isTaxable.disable();
                            this.Tax.setValue("");
                            this.Tax.disable();
                        }                   
                    }else if(isInvoiceLevelTax){
                        if(withoutTax || isInvoiceTaxDiff){//for different tax and empty tax
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2); 
                            this.PO.clearValue();
                            return;
                        }else{
                            /*
                             * Commenting below code as no need to check cross module (SR only link SI and DO and same for PR side)
                             */
                            //                            if(this.fromLinkCombo.getValue()!==2 && ((!this.isCustomer)?this.fromLinkCombo.getValue()==0:this.fromLinkCombo.getValue()!==0)){
                            //                                WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.alert'),WtfGlobal.getLocaleText('acc.invoiceform.linkTax')],2);  
                            //                            }
                            if (this.inputValue != Wtf.CNDN_TYPE_FOR_MALAYSIA && this.inputValue!=Wtf.NoteForOvercharge) {
                                this.Tax.enable();
                                this.isTaxable.enable();
                            }
                            this.isTaxable.setValue(true);
                            this.Tax.setValue(this.previusTaxId);
                            this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(false);
                            this.applyTaxToTermsChk.setValue(false);
                            this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
                            this.summarizeInvoiceTermAmount(selectedValuesArr);
                        }
                        this.includingGST.setValue(false);
                        this.includingGST.disable();
                        this.includeProTax.setDisabled(true);
                        this.includeProTax.setValue(false); //update include product tax
                        this.showGridTax(null,null,true);
                    }else {//for goodsreceiptorder and deliveryorder
                        this.Tax.disable();
                        this.isTaxable.enable();
                        this.isTaxable.setValue(false);
                        this.Tax.setValue("");
                        this.includeProTax.setValue(false); //update include product tax
                        this.showGridTax(null,null,true);
                        this.summarizeInvoiceTermAmount(selectedValuesArr);
                    }
                }
                var isLinkedDocumentHaveSameER=true;           
                var linkedExternalRate=0;
                if(this.Currency.getValue()!=WtfGlobal.getCurrencyID){ // Foreign currency linking case. In this case we have to borrow Linked document Exchange Rate in current document.                  
                    for(var count=0;count<selectedValuesArr.length;count++){
                        var tempRec =WtfGlobal.searchRecord(this.POStore,selectedValuesArr[count],"billid");                        
                        if(count==0){
                            linkedExternalRate = tempRec.data["externalcurrencyrate"]; // taking externalcurrencyrate of first record and then comparing it with other records external currency rate
                        } else if(tempRec.data["externalcurrencyrate"]!=linkedExternalRate) {
                            isLinkedDocumentHaveSameER =false;  
                            break;
                        }
                    } 
                    if(isLinkedDocumentHaveSameER){ //if exchange rate same for all linked document then applying it for current record by assigning here 
                        this.externalcurrencyrate=linkedExternalRate;
                    } else { //if exchange rate different then reassigning exchange rate of that date and giving below information message 
                        var index=this.getCurrencySymbol();
                        var exchangeRate = this.currencyStore.getAt(index).data['exchangerate'];
                        this.externalcurrencyrate=exchangeRate;
                        var msg = WtfGlobal.getLocaleText("acc.invoiceform.exchangeratemessage1")+"<b> "+this.externalcurrencyrate+" </b>"+WtfGlobal.getLocaleText("acc.invoiceform.exchangeratemessage2");                        
                        WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.information'),msg],3);
                    }
                }
                this.Grid.loadPOGridStore(rec,linkingFlag,islinkPItoCN);
                }  
            }
        }
},
    
getDates:function(start){
    var d=new Date();
    var monthDateStr=d.format('M d');
    if(Wtf.account.companyAccountPref.fyfrom)
        monthDateStr=Wtf.account.companyAccountPref.fyfrom.format('M d');
    var fd=new Date(monthDateStr+', '+d.getFullYear()+' 12:00:00 AM');
    if(d<fd)
        fd=new Date(monthDateStr+', '+(d.getFullYear()-1)+' 12:00:00 AM');
    if(start)
        return fd;

    return fd.add(Date.YEAR, 1).add(Date.DAY, -1);
},

setDate:function(){
    var height = 0;
    if(this.isOrder)
        height=140;
        
    //if(height>=140) this.NorthForm.setHeight(height);

    if(!this.isEdit){            
        this.billDate.setValue(new Date());//(new Date());            
    }
},        
addPerson:function(isEdit,rec,winid,isCustomer){
    callBusinessContactWindow(isEdit, rec, winid, isCustomer);
    var tabid=isCustomer?'contactDetailCustomerTab':'contactDetailVendorTab';
    Wtf.getCmp(tabid).on('update', function(){
        this.isCustomer?Wtf.customerAccStore.reload():Wtf.vendorAccStore.reload();
    }, this);
},
onCurrencyChangeOnly:function(){
    this.fromPO.reset();
    this.fromLinkCombo.reset();
    this.fromLinkCombo.setDisabled(true);
    this.PO.reset();    
    this.gstCurrencyRate = 0;
    this.PO.setDisabled(true);
    if(this.includeProTax.getValue()!=false){
        this.includeProTax.setValue(false);
        this.applyTaxToTermsChkHideShow(false);
        this.showGridTax(null,null,true);
    }
    this.includeProTax.enable();
    this.Grid.getStore().removeAll();
    this.Grid.addBlankRow();
},
changeTemplateSymbol:function(){
    this.isCurrencyStoreLoaded = true;
    this.val=this.billDate.getValue();
    // check wheather exchange rate is set for currency on selected date while retaining exchange rate.
    if (this.exchangeRateInRetainCase) {
        if (this.Currency.getValue() != "" && WtfGlobal.searchRecord(this.currencyStore, this.Currency.getValue(), "currencyid") == null) {
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Pleasesetthecurrencyrate") + " " + WtfGlobal.getLocaleText("acc.field.fortheselecteddate") + "<b>" + WtfGlobal.convertToGenericDate(this.val) + "</b>"], 0);
            this.exchangeRateInRetainCase = false;
            this.billDate.setValue("");
        }
        return;
    }
    if(this.loadCurrFlag && Wtf.account.companyAccountPref.currencyid){
        this.Currency.setValue(Wtf.account.companyAccountPref.currencyid);
        this.loadCurrFlag = false;
    }
        
    if(this.currencyStore.getCount()==0){
        callCurrencyExchangeWindow();
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.invoice.msg3")+" <b>"+WtfGlobal.convertToGenericDate(this.val)+"</b>"], 0);
        this.billDate.setValue("");
    } else
        this.updateFormCurrency();
},
updateFormCurrency:function(){
    //       this.applyCurrencySymbol();
    ////       var calTermTotal = WtfGlobal.addCurrencySymbolOnly(this.findTermsTotal(),this.symbol);
    //       this.tplSummary.overwrite(this.southCalTemp.body,{
    //            subtotal:WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol),
    //            tax:(this.moduleid == 28 || this.moduleid ==27) ? WtfGlobal.addCurrencySymbolOnly(this.Grid.calLineLevelTaxNew(),this.symbol) : WtfGlobal.addCurrencySymbolOnly(this.Grid.calTaxtotal(),this.symbol),
    //            aftertaxamt:(this.moduleid == 28 || this.moduleid ==27) ? WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calLineLevelTaxNew(),this.symbol):WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calTaxtotal(),this.symbol),
    //            totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol()),
    //            amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol())
    //        });
    this.updateSubtotal();
    /**
         * Update India Terms as Tax Summary after change currency from Currency combo
         */
    if (Wtf.account.companyAccountPref.isLineLevelTermFlag) {
        updateTermDetails(this.Grid);
    }
},
getCurrencySymbol:function(){
    var index=null;
    //        this.currencyStore.clearFilter(true); //ERP-9962
    var FIND = this.Currency.getValue();
    if(FIND == "" || FIND == undefined || FIND == null) {
        FIND = WtfGlobal.getCurrencyID();
    }
    index=this.currencyStore.findBy( function(rec){
        var parentname=rec.data['currencyid'];
        if(parentname == FIND)
            return true;
        else
            return false
    })
    this.currencyid=this.Currency.getValue();
    return index;
},
applyCurrencySymbol:function() {
    var index = this.getCurrencySymbol();
    var rate = this.externalcurrencyrate;
    if(index >= 0){
        rate = (rate == "" ? this.currencyStore.getAt(index).data.exchangerate : rate);
        this.symbol =  this.currencyStore.getAt(index).data.symbol;
        this.Grid.setCurrencyid(this.currencyid,rate,this.symbol,index);
        this.applyTemplate(this.currencyStore,index);
    }
    var calTermTotal = WtfGlobal.addCurrencySymbolOnly(this.findTermsTotal(),this.symbol);
    var amountbeforetax = WtfGlobal.addCurrencySymbolOnly((this.Grid.calSubtotal()+this.findTermsTotal()),this.symbol);
    if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
        this.tplSummary.overwrite(this.southCalTemp.body,{
            subtotal:Wtf.UpriceAndAmountDisplayValue,
            tax:Wtf.UpriceAndAmountDisplayValue,
            termtotal:Wtf.UpriceAndAmountDisplayValue,
            amountbeforetax:Wtf.UpriceAndAmountDisplayValue,
            nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
            tdsamount:Wtf.UpriceAndAmountDisplayValue,
            aftertaxamt:Wtf.UpriceAndAmountDisplayValue,
            totalAmtInBase:Wtf.UpriceAndAmountDisplayValue,
            amountdue:Wtf.UpriceAndAmountDisplayValue
        });
    } else{
        this.tplSummary.overwrite(this.southCalTemp.body,{
            subtotal:WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol),
            tax:(this.moduleid ==28 || this.moduleid ==27)? WtfGlobal.addCurrencySymbolOnly(this.Grid.calLineLevelTaxNew(),this.symbol) : WtfGlobal.addCurrencySymbolOnly(this.Grid.calTaxtotal(),this.symbol),
            termtotal:calTermTotal,
            amountbeforetax:amountbeforetax,
            nontaxableamount: WtfGlobal.addCurrencySymbolOnly(this.calCulateNonTaxableTermAmount(),this.symbol),
            tdsamount: WtfGlobal.addCurrencySymbolOnly(this.calculateTDSAmount(),this.symbol),
            aftertaxamt:(this.moduleid == 28 || this.moduleid ==27)? WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calLineLevelTaxNew()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount(),this.symbol):WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+this.Grid.calTaxtotal()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount(),this.symbol),
            totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol()),
            amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol())
        });
    }
    return this.symbol;
},
resetCustomFields : function(){ // For reset Custom Fields, Check List and Custom Dimension
    var customFieldArray = this.tagsFieldset.customFieldArray;  // Reset Custom Fields
    for (var itemcnt = 0; itemcnt < customFieldArray.length; itemcnt++) {
        var fieldId = customFieldArray[itemcnt].id
        if (Wtf.getCmp(fieldId) != undefined && customFieldArray[itemcnt].getXType()!='fieldset') {
            Wtf.getCmp(fieldId).reset();
        }
    }
        
    var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray;  // Reset Check List
    for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
        var checkfieldId = checkListCheckBoxesArray[checkitemcnt].id
        if (Wtf.getCmp(checkfieldId) != undefined) {
            Wtf.getCmp(checkfieldId).reset();
        }
    }
        
    var customDimensionArray = this.tagsFieldset.dimensionFieldArray;  // Reset Custom Dimension
    for (var itemcnt1 = 0; itemcnt1 < customDimensionArray.length; itemcnt1++) {
        var fieldId1 = customDimensionArray[itemcnt1].id
        if (Wtf.getCmp(fieldId1) != undefined) {
            Wtf.getCmp(fieldId1).reset();
        }
    }
},
setTransactionNumber:function(isSelectNoFromCombo){
    if(this.isEdit && !this.copyInv)
        this.Number.setValue(this.record.data.billno);
    else{
        var format= Wtf.account.companyAccountPref.autosr ;
        var temp2=(this.isCustomer)? Wtf.autoNum.SalesReturn:Wtf.autoNum.PurchaseReturn ;
    }
    if(isSelectNoFromCombo){
        this.fromnumber = temp2;
    } else if(format&&format.length>0){
                WtfGlobal.fetchAutoNumber(temp2, function(resp){if(this.isEdit)this.Number.setValue(resp.data)}, this);
    }
},  
        
setNextNumber: function(){
    if(this.sequenceFormatStore.getCount()>0){
        if(this.isEdit || this.copyInv){
            var formatID= this.record.data.sequenceformatid;
            var index=WtfGlobal.searchRecordIndex(this.sequenceFormatStore,formatID,"id");
            if(index!=-1 && formatID!="NA"){
                this.sequenceFormatCombobox.setValue(formatID); 
                        
                if(!this.copyInv){//edit
                    this.sequenceFormatCombobox.disable();
                    this.Number.disable(); 
                }else{//copy case if sequenceformat id hide number
                    this.Number.disable();
                    WtfGlobal.hideFormElement(this.Number);
                    this.getNextSequenceNumber(this.sequenceFormatCombobox);
                }
              
            }else {
                this.sequenceFormatCombobox.setValue("NA"); 
                if(!this.copyInv){
                    this.sequenceFormatCombobox.disable();
                }
                if (!this.isViewTemplate) {   // in view mode, keep this.Number field disabled.
                    this.Number.enable();  
                }
                if (this.copyInv) {//copy case show number field 
                    if(formatID!="" && formatID!="NA" && formatID!=null && formatID!=undefined){
                        if (this.sequenceFormatStore.getCount() > 1) {
                            var count = this.sequenceFormatStore.getCount();
                            for (var i = 0; i < count; i++) {
                                var seqRec = this.sequenceFormatStore.getAt(i)
                                if (seqRec.json.isdefaultformat == "Yes") {
                                    this.sequenceFormatCombobox.setValue(seqRec.data.id)
                                    break;
                                }
                            }
                        }
                        this.getNextSequenceNumber(this.sequenceFormatCombobox);
                    }
                }
            }
        }else{
            /*
             *Set Defalult sequence format to sequence format combo box
             */
            var count = this.sequenceFormatStore.getCount();
            for(var i=0;i<count;i++){
                var seqRec=this.sequenceFormatStore.getAt(i);
                if(seqRec.json.isdefaultformat=="Yes"){
                    this.sequenceFormatCombobox.setValue(seqRec.data.id);
                    break;
                }
            }
            if(this.sequenceFormatCombobox.getValue()!=""){
                this.getNextSequenceNumber(this.sequenceFormatCombobox);
            } else{
                this.Number.setValue("");
                WtfGlobal.hideFormElement(this.Number);
            }
        }                                 
    } 
},
  setpaymentSequenceFormatStore:function(){
       var count=this.paymentSequenceFormatStore.getCount();
    if(count>0){
        if(this.isEdit || this.copyInv){
            var payemntSequenceformatid=(this.record && this.record.data && this.record.data.paymentSequenceformatId)?this.record.data.paymentSequenceformatId:"";
            var paymentNumber=(this.record && this.record.data && this.record.data.paymentNumber)?this.record.data.paymentNumber:"";
            if(payemntSequenceformatid=="" || payemntSequenceformatid==undefined){
                this.paymentSequenceFormatCombobox.setValue("NA"); 
                this.paymentSequenceFormatCombobox.disable();
                if(this.copyInv){
                    this.paymentNumber.setValue("");                   
                } else {
                    this.paymentNumber.setValue(paymentNumber);
                }
                this.paymentNumber.allowBlank=false;
            } else {
                this.paymentSequenceFormatCombobox.setValue(payemntSequenceformatid); 
                if(this.copyInv){                   
                    this.showHidePaymentNumber(this.paymentSequenceFormatCombobox);            
                } else {
                    this.paymentSequenceFormatCombobox.disable();
                    this.paymentNumber.disable();
                    this.paymentNumber.setValue(paymentNumber);
                    this.paymentNumber.allowBlank=false;
                }                
            }
        }else{
            for(var i=0;i<count;i++){     //this loop used to set default sequence format if any
                var seqRec=this.paymentSequenceFormatStore.getAt(i);
                if(seqRec.json.isdefaultformat=="Yes"){
                    this.paymentSequenceFormatCombobox.setValue(seqRec.data.id); 
                    break;
                }                   
            }
            this.showHidePaymentNumber(this.paymentSequenceFormatCombobox);  
        }
    }
},
  
setCnDnSequenceFormatAndNumber:function(){
    var count=this.CnDnSequenceFormatStore.getCount();
    if(count>0){
        if(this.isEdit || this.copyInv){ //edit and copy case of CD/DN Credit Note
            var cndnsequenceformatid=(this.record && this.record.data && this.record.data.cndnsequenceformatid)?this.record.data.cndnsequenceformatid:"";
            this.AssignSRNumberntocn.setValue((this.record && this.record.data && this.record.data.isAssignSRNumberntocn)?this.record.data.isAssignSRNumberntocn:"");
            var cndnnumber=(this.record && this.record.data && this.record.data.cndnnumber)?this.record.data.cndnnumber:"";
            if(cndnsequenceformatid=="" || cndnsequenceformatid==undefined){
                this.CnDnSequenceFormatCombobox.setValue("NA");
                if(this.copyInv){
                    this.CnDnNumber.setValue("");   
                   this.showHideCnDnNumber(this.CnDnSequenceFormatCombobox);
                } else {
                    this.CnDnSequenceFormatCombobox.disable();
                    this.CnDnNumber.setValue(cndnnumber);
                }
                this.CnDnNumber.allowBlank=false;
            } else {
                this.CnDnSequenceFormatCombobox.setValue(cndnsequenceformatid); 
                if(this.copyInv){                   
                    this.showHideCnDnNumber(this.CnDnSequenceFormatCombobox);            
                } else {
                    this.CnDnSequenceFormatCombobox.disable();
                    this.CnDnNumber.disable();
                    this.CnDnNumber.setValue(cndnnumber);
                    this.CnDnNumber.allowBlank=false;
                }                
            }
        }else { //in create new case just setting seq format  and showing/hiding seq number 
            for(var i=0;i<count;i++){     //this loop used to set default sequence format if any
                var seqRec=this.CnDnSequenceFormatStore.getAt(i);
                if(seqRec.json.isdefaultformat=="Yes"){
                    this.CnDnSequenceFormatCombobox.setValue(seqRec.data.id); 
                    break;
                }                   
            }
            this.showHideCnDnNumber(this.CnDnSequenceFormatCombobox);
        }
    }
},

showHideCnDnNumber:function(combo){
    if(combo.getValue()=='NA'){
        WtfGlobal.showFormElement(this.CnDnNumber);
        this.CnDnNumber.allowBlank=false;
    } else {
        if(this.isViewTemplate || (this.isEdit && !this.copyInv)){
            WtfGlobal.showFormElement(this.CnDnNumber);
        }else{
            WtfGlobal.hideFormElement(this.CnDnNumber);
        }
        this.CnDnNumber.allowBlank=true;
    }
},
showHidePaymentNumber:function(combo){
    if(combo.getValue()=='NA'){
        WtfGlobal.showFormElement(this.paymentNumber);
        this.paymentNumber.allowBlank=false;
    } else {
        if(this.isViewTemplate){
            WtfGlobal.showFormElement(this.paymentNumber);
        }else{
            WtfGlobal.hideFormElement(this.paymentNumber);
        }
        this.paymentNumber.allowBlank=true;
    }
},

getNextSequenceNumber:function(a,val){
    if(!(a.getValue()=="NA")){
        WtfGlobal.hideFormElement(this.Number);
        this.setTransactionNumber(true);
        var rec=WtfGlobal.searchRecord(this.sequenceFormatStore, a.getValue(), 'id');
        var oldflag=rec!=null?rec.get('oldflag'):true;
        Wtf.Ajax.requestEx({
            url:"ACCCompanyPref/getNextAutoNumber.do",
            params:{
                from:this.fromnumber,
                sequenceformat:a.getValue(),
                oldflag:oldflag
            }
        }, this,function(resp){
            if(resp.data=="NA"){
                WtfGlobal.showFormElement(this.Number);
                this.Number.reset();
                this.Number.enable();
            }else {
                this.Number.setValue(resp.data);
                this.Number.disable();
                WtfGlobal.hideFormElement(this.Number);
            }
            
        }); 
    } else {
        WtfGlobal.showFormElement(this.Number);
        this.Number.reset();
        this.Number.enable();
    }
},
AssignSRNumberntocnCheckHandler:function()
{
    if(!(this.sequenceFormatCombobox.getValue()=="NA")){
        if (!(this.isEdit || this.isViewTemplate)) {
            WtfGlobal.hideFormElement(this.Number)
        }
        if(this.AssignSRNumberntocn.getValue()==true){
            this.CnDnSequenceFormatCombobox.setValue('NA');
            this.CnDnSequenceFormatCombobox.disable();
            this.CnDnNumber.disable();                   
            WtfGlobal.hideFormElement(this.CnDnNumber);
        }
        else
        {
            var count=this.CnDnSequenceFormatStore.getCount();
            var seqRec=this.CnDnSequenceFormatStore.getAt(0);
            if (seqRec) {
                this.CnDnSequenceFormatCombobox.setValue(seqRec.data.id); 
                for(var i=0;i<count;i++){     //this loop used to set default sequence format if any
                    seqRec=this.CnDnSequenceFormatStore.getAt(i);
                    if(seqRec.json.isdefaultformat=="Yes"){
                        this.CnDnSequenceFormatCombobox.setValue(seqRec.data.id) 
                        break;
                    }                   
                }
                this.showHideCnDnNumber(this.CnDnSequenceFormatCombobox);
                this.CnDnSequenceFormatCombobox.enable();
                this.CnDnNumber.enable();
            }
        }
    } else {
       
        if(this.AssignSRNumberntocn.getValue()==true){
            this.CnDnSequenceFormatCombobox.setValue('NA');
            this.CnDnSequenceFormatCombobox.disable();
            WtfGlobal.hideFormElement(this.CnDnNumber);
            this.CnDnNumber.setValue(this.Number.getValue());
            this.CnDnNumber.disable();
        }
        else if(!this.isEdit){
            var count=this.CnDnSequenceFormatStore.getCount();
            var seqRec=this.CnDnSequenceFormatStore.getAt(0);
            if (seqRec) {
                this.CnDnSequenceFormatCombobox.setValue(seqRec.data.id); 
                for(var i=0;i<count;i++){     //this loop used to set default sequence format if any
                    seqRec=this.CnDnSequenceFormatStore.getAt(i);
                    if(seqRec.json.isdefaultformat=="Yes"){
                        this.CnDnSequenceFormatCombobox.setValue(seqRec.data.id) 
                        break;
                    }                   
                }
                this.showHideCnDnNumber(this.CnDnSequenceFormatCombobox);
                this.CnDnSequenceFormatCombobox.enable();
                this.CnDnNumber.reset();
                this.CnDnNumber.enable();
            }
            
        }
     
    }
    if(this.isViewTemplate && this.isNoteAlso){
        this.CnDnSequenceFormatCombobox.disable();
        this.CnDnNumber.disable();
    }
    
},
initForClose:function(){
    this.cascade(function(comp){
        if(comp.isXType('field')){
            comp.on('change', function(){
                if(!this.readOnly){
                    this.isClosable=false;
                }
            },this);
        }
    },this);
},
    
save:function(){
    var incash=false;
    this.PO.setValue(this.PO.getValue().trim());
//    if(this.PO.getValue()==""&&this.isPayment){
//        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.salesreturn.withPaymentLinkCashSales")], 2);
//        return ;
//    }
    this.Number.setValue(this.Number.getValue().trim());
    //this.billTo.setValue(this.billTo.getValue().trim());
    /*
     * ERP-39774 Total amount should not be negative
     * */
//    var amountTotal=this.Grid.calSubtotal()+this.Grid.calLineLevelTaxNew()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount();
//    if (amountTotal <= 0){
//        this.enableSaveButtons();
//        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.TotalamountshouldbegreaterthanZero")], 2);
//        return;
//    }
    var isValidCustomFields=true;
//    if(Wtf.account.companyAccountPref.countryid !=Wtf.Country.MALAYSIA){ 
        isValidCustomFields=this.tagsFieldset.checkMendatoryCombo();
//    }
    /*
     * Validate GST dimension values present or Not
     */
    if (WtfGlobal.isIndiaCountryAndGSTApplied() && Wtf.isShowAlertOnDimValueNotPresent.indexOf(parseInt(this.moduleid))> -1) {
        if (!isGSTDimensionValuePresent(this, this.Grid)) {
            this.enableSaveButtons();
            return false;
        }
        /**
         * Show alert on Save document if GST details not presnet 
         * ERP-39257
         */
        if (!isGSTHistoryPresentOnDocumentCreation(this)) {
            if(typeof this.enableSaveButtons == 'function'){ // if type function means function present in this scope
                this.enableSaveButtons();
            }
            return false;
         }
    }
    /**
     * Block Document creation if Eway related fileds are invalid
     * ERP-39530(ERM-1108)
     */
    if(WtfGlobal.isIndiaCountryAndGSTApplied() && (this.moduleid !=undefined && this.moduleid !='' && Wtf.EwayUnitDimCustmFieldsActivatedModules.indexOf(parseInt(this.moduleid))> -1)){
       if(this.isEWayCheck!=undefined && this.isEWayCheck.getValue()){
                var ValidationOptArr = this.tagsFieldset.validateEwayRelatedFields(this);     
                    if(ValidationOptArr[0]==true){
                        this.enableSaveButtons();
                        return;
                    }
            }
    }
    if (this.NorthForm.getForm().isValid() && isValidCustomFields) {
        if ((this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge) && this.POStore != undefined && this.POStore.data.items.length > 0) {
            var cnt=0;
            var maxDate;
            var date;
            var currentDate=new Date(this.billDate.getValue());
            var checkDate=false;
            var recordArr= this.PO.getValue().split(",");
            while(cnt<recordArr.length && recordArr[cnt]!=""){//There should be a prompt while we delete all product and trying to save. Currently system is not responding if we clicking on save button after delete all product.
                var index = this.POStore.find('billid', recordArr[cnt]);
                date=new Date(this.POStore.data.items[index].data.date);
                if(cnt==0){
                    maxDate=date;
                }
                if(date>currentDate){
                    checkDate=true;
                    if(date>=maxDate){
                        maxDate=date;
                    }
                }
                cnt++;
            }
            if(checkDate){
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoice.invoicedate")], 2);
                return;
            }
        }
    
    
//    if(this.NorthForm.getForm().isValid() && isValidCustomFields){
        //            if(Wtf.account.companyAccountPref.invAccIntegration && Wtf.account.companyAccountPref.isUpdateInvLevel){
        //                var validstore=WtfGlobal.isValidInventoryInfo(this.Grid.getStore(),'invstore');
        //                if(!validstore){
        //                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.Pleaseselectvalidinventorystore")], 2);
        //                    return;
        //                }
        //                var validloc=WtfGlobal.isValidInventoryInfo(this.Grid.getStore(),'invlocation');
        //                if(!validloc){
        //                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.Pleaseselectvalidinventorylocation")], 2);
        //                    return;
        //                }
        //            }
        // Checking for deactivated products
        var inValidProducts=this.checkForDeActivatedProductsAdded();
        if(inValidProducts!=''){
            inValidProducts = inValidProducts.substring(0, inValidProducts.length-2);
            Wtf.MessageBox.show({
                title: WtfGlobal.getLocaleText("acc.common.warning"), 
                msg: WtfGlobal.getLocaleText("acc.common.followingProductsAreDeactivated")+'</br>'+'<b>'+inValidProducts+'<b>',
                buttons: Wtf.MessageBox.OK,
                icon: Wtf.MessageBox.WARNING,
                scope: this,
                scopeObj :this,
                fn: function(btn){
                    if(btn=="ok"){
                        return;
                    }
                }
            });
            return;
        }
        /**
         *checks the allow zero quantity functionality is activated or not from  company preference
         */
        this.allowZeroQuantity = WtfGlobal.checkAllowZeroQuantityForProduct(this.moduleid);
        this.allowZeroQuantityForProduct=false;
        this.removeBlankQtyOnlyFlag=false;
        /**
         *isAtLeastOneProductHavingNonZeroQty:purpose of this flag is check atleast one of the product is having non zero quantity. 
        */
        var  isAtLeastOneProductHavingNonZeroQty=false;
        for(var i=0;i<this.Grid.getStore().getCount()-1;i++){// excluding last row
            var quantity=this.Grid.getStore().getAt(i).data['quantity'];
            if(quantity==""||quantity==undefined||quantity<=0){
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.AQuantityforProduct")+" "+this.Grid.getStore().getAt(i).data['productname']+" "+WtfGlobal.getLocaleText("acc.field.shouldbegreaterthanZero")], 2);
                return;
            } 
            var dquantity=this.Grid.getStore().getAt(i).data['dquantity'];
             if(dquantity===""){
                 /**
                  *This flag is true when product is having blank qty. 
                  */
                this.removeBlankQtyOnlyFlag=true;
            }
            if(dquantity>0){
                 /**
                  *This flag is true when product is having greater than zero qty. 
                  */
                isAtLeastOneProductHavingNonZeroQty=true;
            }
            if (this.isCustomer) {
                if (Wtf.account.companyAccountPref.unitPriceInSR || this.isNoteAlso) {
                    var rate = this.Grid.getStore().getAt(i).data['rate'];
                    var reason = this.Grid.getStore().getAt(i).data['reason'];
                    if ((rate === "" || rate == undefined || rate < 0) && dquantity!=="" ) {
                        var msg="";
                        if(!Wtf.dispalyUnitPriceAmountInSales){// When user have no permission to dispaly unit price
                            msg = WtfGlobal.getLocaleText("acc.field.DefaultUnitPriceIsnotset")+" "+this.Grid.getStore().getAt(i).data['productname']+WtfGlobal.getLocaleText("acc.msgbox.462");
                        } else{
                            msg = WtfGlobal.getLocaleText("acc.field.RateforProduct") + " " + this.Grid.getStore().getAt(i).data['productname'] + " " + WtfGlobal.getLocaleText("acc.field.cannotbeempty");
                        }
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), msg], 2);
                        return;
                    }
                    /*
                     * Check for setting intial purchase price or current sales price when display unit
                     * price in SR and allow zero unit price is disabled from system controls.
                     */
                    if (this.isNoteAlso && rate == 0 && !Wtf.account.companyAccountPref.allowZeroUntiPriceForProduct && !Wtf.account.companyAccountPref.unitPriceInSR) {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), ((this.isCustomer) ? WtfGlobal.getLocaleText("acc.product.initialsalesprice") : WtfGlobal.getLocaleText("acc.product.initialpurchaseprice")) + " " + this.Grid.getStore().getAt(i).data['productname'] + "."], 2);
                        return;
                    }

                    if (this.isNoteAlso && rate == 0 && !Wtf.account.companyAccountPref.allowZeroUntiPriceForProduct) {//if creating CN/DN with Retrurn
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.RateforProduct") + " " + this.Grid.getStore().getAt(i).data['productname'] + " " + WtfGlobal.getLocaleText("acc.field.shouldbegreaterthanZero")], 2);
                        return;
                    }
                    if (this.isNoteAlso && (reason == "" || reason == undefined)) {//if creating CN/DN with Retrurn reason should be mandatory
                        
                        if(this.isHideRemarkColumn && (this.reasonFieldName!==undefined && this.reasonFieldName!=='') ){
                            
                               WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.mandatory.prwithdn")+ " "+this.reasonFieldName], 2);
                               return;
                        }else{
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.cndn.pleaseselectareason")], 2);
                    }
                        return;
                    }
                    if (this.isPayment && (reason == "" || reason == undefined)) {//if creating CN/DN with Retrurn reason should be mandatory
                        if(this.isHideRemarkColumn && (this.reasonFieldName!==undefined && this.reasonFieldName!=='') ){
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.mandatory.prwithdn")+ " "+this.reasonFieldName], 2);
                            return;
                        }else{
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.cndn.pleaseselectareason")], 2);
                            return;
                        }
                    }
                }
            } else {
                if (Wtf.account.companyAccountPref.unitPriceInPR || this.isNoteAlso) {
                    var rate = this.Grid.getStore().getAt(i).data['rate'];
                    var reason = this.Grid.getStore().getAt(i).data['reason'];
                    if ((rate === "" || rate == undefined || rate < 0) && dquantity!=="") {
                        var msg="";
                        if(!Wtf.dispalyUnitPriceAmountInPurchase){// When user have no permission to dispaly unit price
                            msg = WtfGlobal.getLocaleText("acc.field.DefaultUnitPriceIsnotset")+" "+this.Grid.getStore().getAt(i).data['productname']+WtfGlobal.getLocaleText("acc.msgbox.462");
                        } else{
                            msg = ((this.isCustomer) ? WtfGlobal.getLocaleText("acc.product.initialsalesprice") : WtfGlobal.getLocaleText("acc.purchasereturn.purchaseprice")+ " " + this.Grid.getStore().getAt(i).data['productname']);
                        }
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), msg], 2);
                        return;
                    }
                    /*
                     * Check for setting intial purchase price or current sales price when display unit
                     * price in PR and allow zero unit price is disabled from system controls.
                     */
                    if (this.isNoteAlso && rate == 0 && !Wtf.account.companyAccountPref.allowZeroUntiPriceForProduct && !Wtf.account.companyAccountPref.unitPriceInPR) {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), ((this.isCustomer) ? WtfGlobal.getLocaleText("acc.product.initialsalesprice") : WtfGlobal.getLocaleText("acc.purchasereturn.purchaseprice")) + " " + this.Grid.getStore().getAt(i).data['productname'] + "."], 2);
                        return;
                    }

                    if (this.isNoteAlso && rate == 0 && !Wtf.account.companyAccountPref.allowZeroUntiPriceForProduct) {//if creating CN/DN with Retrurn
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.RateforProduct") + " " + this.Grid.getStore().getAt(i).data['productname'] + " " + WtfGlobal.getLocaleText("acc.field.shouldbegreaterthanZero")], 2);
                        return;
                    }
                    if (this.isNoteAlso && (reason == "" || reason == undefined)) {//if creating CN/DN with Retrurn reason should be mandatory
                         if(this.isHideRemarkColumn && (this.reasonFieldName!==undefined && this.reasonFieldName!=='') ){
                            
                               WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.mandatory.prwithdn")+ " "+this.reasonFieldName], 2);
                               return;
                        }else{
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.cndn.pleaseselectareason")], 2);
                        return;
                    }
                    }
                }
            }
            if((dquantity == '' && !this.allowZeroQuantity) || dquantity == undefined || (dquantity<=0 && !this.allowZeroQuantity)){
                /**
                 *method to remove product with zero or blank qty.
                 */
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.invoicelist.alertmsgforblankorzeroqty")+'</center>' ,function(btn){
                    var store= this.Grid.getStore();
                    var quantity;
                    if(btn=="yes") {
                        if(store!=undefined && store.getCount()>0){
                            for(var p=0;p<this.Grid.getStore().getCount()-1;p++){// excluding last row
                                quantity=this.Grid.getStore().getAt(p).data['dquantity'];
                                if((quantity==="" || quantity===0)){//For checking products with  blank or zero quantity 
                                    this.Grid.getStore().remove(this.Grid.getStore().getAt(p));
                                    p--;
                                }
                            }
                        }
                        this.enableSaveButtons();
                    }else{
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);
                    }
                },this);
                return;      
            }
           
            /**
             *method to remove the products with blank qty.
             */
            if(this.removeBlankQtyOnlyFlag && this.allowZeroQuantity){
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.invoicelist.alertmsgforblankqty")+'</center>' ,function(btn){
                    var store= this.Grid.getStore();
                    var quantity;
                    if(btn=="yes") {
                        if(store!=undefined && store.getCount()>0 ){
                            for(var p=0;p<this.Grid.getStore().getCount()-1;p++){// excluding last row
                                quantity=this.Grid.getStore().getAt(p).data['dquantity'];
                                if(quantity==="" ){//For checking products with  blank quantity 
                                    this.Grid.getStore().remove(this.Grid.getStore().getAt(p));
                                    p--;
                                }
                            }
                        }
                    }else{
                        /**
                         *if use clicks on no button then set the quantity to zero if product is having blank qty. 
                         */
                        if(store!=undefined && store.getCount()>0){
                            for(var p=0;p<this.Grid.getStore().getCount()-1;p++){// excluding last row
                                quantity=this.Grid.getStore().getAt(p).data['dquantity'];
                                if((quantity==="")){//For checking products with  blank quantity 
                                    this.Grid.getStore().getAt(p).set('dquantity',0);
//                                    p--;
                                }else if(quantity>0){
                                    /**
                                      *isAtLeastOneProductHavingNonZeroQty:purpose of this flag is check atleast one of the product is having non zero quantity. 
                                      */
                                    isAtLeastOneProductHavingNonZeroQty=true;
                                 }
                            }
                            /**
                              *this block used to restrict that transaction with zero qty for all products.
                              * i.e we cannot save document if all the products having zero quantity. 
                             */
                            if(this.allowZeroQuantity && !isAtLeastOneProductHavingNonZeroQty && this.isNoteAlso &&(this.moduleid==Wtf.Acc_Sales_Return_ModuleId || this.moduleid == Wtf.Acc_Purchase_Return_ModuleId)){
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);//You cannot make Transaction with Zero Quantity.
                                return ;
                            }
                        }
                        this.validationBeforeSave();
                    }
                },this);
                return;
            }
            
        }
        /**
          *this block used to restrict that transaction with zero qty for all products.
          * i.e we cannot save document if all the products having zero quantity. 
         */
        if(this.allowZeroQuantity && !isAtLeastOneProductHavingNonZeroQty && this.isNoteAlso &&(this.moduleid==Wtf.Acc_Sales_Return_ModuleId || this.moduleid == Wtf.Acc_Purchase_Return_ModuleId)){
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);//You cannot make Transaction with Zero Quantity.
            return ;
        }
                                             

            /*
             * Below code to check whether line level or globel level tax used or not,
             * if used then GST currency rate window populate for the company where ountry currency is SGD and 
             * base currency other than SGD
             */

            if ((this.inputValue == Wtf.NoteForOvercharge || this.inputValue == Wtf.NoteForUnderCharge) && this.Currency.getValue() != Wtf.Currency.SGD && WtfGlobal.singaporecountry() && this.Grid.getStore().getCount() > 1 && WtfGlobal.getCurrencyID() != Wtf.Currency.SGD) {
                var count = this.Grid.getStore().getCount();
                if (this.isEdit) {
                    this.gstCurrencyRate = this.record.data.gstCurrencyRate;
                }

                var productTaxFlag = false;

                //Loop to check whether tax used at line level or not
                for (var cnt = 0; cnt < count; cnt++) {
                    var rec = this.Grid.getStore().getAt(cnt);
                    if (rec.data['prtaxid'] != null && rec.data['prtaxid'] != undefined && rec.data['prtaxid'] != 'None' && rec.data['prtaxid'] != '') {
                        productTaxFlag = true;
                        break;
                    }

                }

                /*
                 * Call function to give GST currency rate pop up when country is singapore and base currency is
                 * other than SGD.
                 */
                if ((productTaxFlag || (this.Tax.getValue() != undefined && this.Tax.getValue() != null && this.Tax.getValue() != '' && this.Tax.getValue() != 'None'))) {
                    this.gstCurrencyRateOnSave();
                    return;
                }
            }
        this.validationBeforeSave();   
    }else{
        WtfComMsgBox(131, 2);
    }
},   
    beforeSaveReasonCheck: function () {
          this.customizeRec = new Wtf.data.Record.create([
            {name: "id"},
            {name: "hidecol"},
            {name: "fieldlabeltext"}
        ]);
        this.customizeReader = new Wtf.data.KwlJsonReader({
            root: "data",
            totalProperty: "count"
        }, this.customizeRec);
        this.customizeStore = new Wtf.data.Store({
            url: "ACCAccountCMN/getTransactionFormFields.do",
            reader: this.customizeReader,
            baseParams: {
                flag: 35,
                moduleid: (this.isCustomer) ? Wtf.Acc_Sales_Return_ModuleId : Wtf.Acc_Purchase_Return_ModuleId,
                reportId: 1
            }
        });
        
        this.customizeStore.on('load', this.checkReasonAlternatename, this);
        this.customizeStore.load();
        
    },
    checkReasonAlternatename:function(){
        this.isHideRemarkColumn = false;
        
        var reasonFieldID="";
        this.reasonFieldName="";
        var remarkFieldId='';
        if (this.moduleid === Wtf.Acc_Sales_Return_ModuleId) {
            remarkFieldId = Wtf.SALES_RETURN_REMARK_FIELDID;
            reasonFieldID = Wtf.SALES_RETURN_REASON_FIELDID;
        } else if (this.moduleid === Wtf.Acc_Purchase_Return_ModuleId) {
            remarkFieldId = Wtf.PURCHASE_RETURN_REMARK_FIELDID;
            reasonFieldID = Wtf.PURCHASE_RETURN_REASON_FIELDID;
        }
        var index = this.customizeStore.find('id', remarkFieldId);
        if (index !== -1) {
            var rec = this.customizeStore.getAt(index);
            if (rec.data.hidecol) {
                this.isHideRemarkColumn = true;
            }
        }
        
         var resonIndex = this.customizeStore.find('id', reasonFieldID);
          if (resonIndex !== -1) {
            var rec = this.customizeStore.getAt(resonIndex);
            if (rec.data.fieldlabeltext!== undefined  || rec.data.fieldlabeltext!== '') {
                this.reasonFieldName = rec.data.fieldlabeltext;
            }
        }
    },
    
    /*
     *Function for GST Currecy Rate Window
     */
    gstCurrencyRateOnSave: function () {

        /*
         *GSTCurrency rate pop up only enable when gstWinFlag=false.         
         */

        if (WtfGlobal.singaporecountry() && WtfGlobal.getCurrencyID() != Wtf.Currency.SGD) {
            var record = WtfGlobal.searchRecord(this.currencyStore, this.Currency.getValue(), "currencyid");            
            callGstCurrencyRateWin(this.id, record.data.currencyname, undefined, this.gstCurrencyRate, true);

        }


    },
validationBeforeSave:function(){
    var count=this.Grid.getStore().getCount();
    if(count<=1){
            WtfComMsgBox(33, 2);
            return;
        }
    /**
     *this block checks restrict the transaction with zero qty if JE is posted backendly.
     * i.e for SR with CN and PR with DN.
     */
//    if(this.Grid.calSubtotal()<=0 && this.isNoteAlso &&(this.moduleid==Wtf.Acc_Sales_Return_ModuleId || this.moduleid == Wtf.Acc_Purchase_Return_ModuleId)){
//        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);//You cannot make Transaction with Zero Quantity.
//        return ;
//    }
    if (this.copyInv) {
        var hasAccessFlag = false;
        var Name = "";
        var title = "";
        var personId = this.Name.getValue();
        var personRec = WtfGlobal.searchRecord(this.Name.store, personId, this.Name.valueField);
        if (personRec != null) {
            var hasAccess = personRec.get('hasAccess');
            if (!hasAccess) {
                Name = personRec.get('accname');
                hasAccessFlag = true;
            }
        }
        if (hasAccessFlag) {
            if (this.businessPerson == "Customer") {
                title = WtfGlobal.getLocaleText("acc.customer.customerName");
            } else {
                title = WtfGlobal.getLocaleText("acc.vendor.vendorName");
            }
            Wtf.MessageBox.show({
                title: WtfGlobal.getLocaleText("acc.common.warning"), //'Warning',
                msg: title + Name + " " + WtfGlobal.getLocaleText("acc.field.iscurrentlydeactivated"),
                width: 370,
                buttons: Wtf.MessageBox.OK,
                icon: Wtf.MessageBox.WARNING,
                scope: this
            });
            this.enableSaveButtons();
            return;
        }
    }
    if (this.users != undefined) {
        var isSaledpersonDeactivated = WtfGlobal.isSaledpersonDeactivated(this.users, this.businessPerson);
        if (isSaledpersonDeactivated) {
            this.enableSaveButtons();
            return;
        }
    }
            
    incash=this.cash;
    var rec=this.NorthForm.getForm().getValues();
        rec.GTAApplicable = this.GTAApplicable.getValue();
    rec.taxid = this.Tax.getValue();
        if (this.isIndiaGST) {
            rec.CustomerVendorTypeId = this.CustomerVendorTypeId;
            rec.GSTINRegistrationTypeId = this.GSTINRegistrationTypeId;
            rec.gstin = this.gstin;
            if (this.isEdit && !this.copyInv) {
                rec.gstdochistoryid = this.gstdochistoryid;
            }
            if (this.purchaseFromURD != undefined) {
                rec.isUnRegisteredDealer = this.purchaseFromURD;
            } else {
                rec.isUnRegisteredDealer = false;
            }
        }

    if(this.Tax.getValue()!=''){
        var taxRec = WtfGlobal.searchRecord(this.Grid.taxStore, this.Tax.getValue(), 'prtaxid');
        if(taxRec!==null){
            rec.globalTaxPercent = taxRec.data["percent"];
        }
        /*
         * ERP-40242 : In copy case, deactivated tax not shown.Hence, empty taxid set in record.          
         */
        if((this.copyInv || (this.fromPO != undefined && this.fromPO.getValue())) && (taxRec == null || taxRec == undefined)){
           rec.taxid = "";
        }
    }
    if(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA||this.inputValue==Wtf.NoteForOvercharge){
        if(this.isCN){
            this.ajxurl = "ACCCreditNote/saveCreditNote.do";            
        }else{
            this.ajxurl = "ACCDebitNote/saveDebitNote.do";            
        }
    }else{
        this.ajxurl = this.isCustomer?"ACCSalesReturnCMN/saveSalesReturn.do":"ACCSalesReturnCMN/savePurchaseReturn.do";            
    }    
        
            
    var detail = this.Grid.getProductDetails();
    var validLineItem = this.Grid.checkDetails(this.Grid);
    if (validLineItem != "" && validLineItem != undefined) {
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), (WtfGlobal.getLocaleText("acc.msgbox.lineitem") + validLineItem)], 2);
        this.enableSaveButtons();
        return;
    }
    if(detail == undefined || detail == "[]"){
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoice.msg12")],2);   //"Product(s) details are not valid."
        return;
    }
    //For Malesian country do not allow to save without linking to invoice
    if(this.isNoteAlso && (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)){
        /**
         * add accountID respective selected perosn in case of CN/DN Overchaged, Undercharged. 
         */
        var personRec = WtfGlobal.searchRecord(this.Name.store, this.Name.getValue(), this.Name.valueField);
        if (!this.isEdit && personRec && personRec.data.accountid) {
            rec.personaccid = personRec.data.accountid;
        }
        if(!this.fromPO.getValue()){
            var Msg=this.isCustomer?WtfGlobal.getLocaleText("acc.srCN.linkedinvoice"):WtfGlobal.getLocaleText("acc.prCN.linkedinvoice");
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),Msg], 4);
            return;
        }
    }
          
    if(this.isCustomer && !Wtf.account.companyAccountPref.isnegativestockforlocwar && (Wtf.account.companyAccountPref.isLocationCompulsory || Wtf.account.companyAccountPref.isWarehouseCompulsory) && this.moduleid!=Wtf.Acc_Sales_Return_ModuleId && this.inputValue!=Wtf.CNDN_TYPE_FOR_MALAYSIA && this.inputValue!=Wtf.NoteForOvercharge){
        Wtf.Ajax.requestEx({
            url: "ACCInvoice/getBatchRemainingQuantity.do",
            params: {
                detail:detail,
                transType:this.moduleid,
                isEdit:this.isEdit,
                fromSubmit:false,
                isfromdo:true,
                isforReturn:true
            }
        },this,function(res,req){
            this.AvailableQuantity=res.quantity;   
            if(res.prodname){
                var prodname=res.prodname;
            }
            if(prodname=="" ||prodname==undefined){
                this.Callfinalsavedetails(rec,detail,incash);
                return;
            }else{
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.quantityforprod")+" <b>"+prodname+"</b> " + WtfGlobal.getLocaleText("acc.field.isnotvalid")], 2);
                this.enableSaveButtons();
                return false;
            }
                
        },function(res,req){
            this.enableSaveButtons();
            return false;
        });
    }else{
        this.Callfinalsavedetails(rec,detail,incash,count);
    }  
  
},
Callfinalsavedetails:function(rec,detail,incash,count){
    if(this.fromPO.getValue() && this.isNoteAlso){//linking case with invoice. in this case check wheather sum of linked invoice amount due id less than resulting DN 
        this.getInvoiceDetails(rec,detail,incash,count);
    } else {
        this.checkAvailableQuantity(rec,detail,incash,count);
    }
},

getInvoiceDetails:function(rec,detail,incash,count){
    var arr=[];
    var invoiceids="";
    var utilizedAmounts="";
    var invoiceDueAmounts="";//this variable used in java side to handle the case when many user try to perform same action at the same time
    var selectedValuesArr = this.PO.getValue().split(',');
    var remainingAmt=0;
    var totatamountdue=0;
    var totalsubtotal=0;
    for(var cnt=0;cnt<selectedValuesArr.length;cnt++){
        var invoiceRecord=WtfGlobal.searchRecord(this.POStore,selectedValuesArr[cnt],'billid');
        var amountdue=invoiceRecord.data['amountdue'];
        totatamountdue+=amountdue;
        var total=0;
        var subtotal=0;
        var taxamount=0;
        var gsttermamt=0;
        for (var i = 0; i < this.Grid.getStore().getCount() - 1; i++) {
            var billid = this.Grid.getStore().getAt(i).data['billid'];
            var invbillid = this.Grid.getStore().getAt(i).data['invbillid'];
            if (billid != undefined && billid != null && billid == selectedValuesArr[cnt]) {
                if (this.includeProTax.getValue()) {
                    total = parseFloat(this.Grid.getStore().getAt(i).data['amount']);
                    subtotal += getRoundedAmountValue(total);
                } else {
                    total = (parseFloat(this.Grid.getStore().getAt(i).data['amount']) - parseFloat(this.Grid.getStore().getAt(i).data['taxamount']));
                    subtotal += getRoundedAmountValue(total);
                }
                if(WtfGlobal.isIndiaCountryAndGSTApplied()){
                    gsttermamt+=getRoundedAmountValue(parseFloat(this.Grid.getStore().getAt(i).data['recTermAmount']));
                }
                /**
                 * block used to get amount from invoice linked to PR in Edit case only.
                 */
            }else if(this.isEdit && invbillid != undefined && invbillid != null && invbillid == selectedValuesArr[cnt]){
                 if (this.includeProTax.getValue()) {
                    total = parseFloat(this.Grid.getStore().getAt(i).data['invamount']);
                    subtotal += getRoundedAmountValue(total);
                } else {
                    total = (parseFloat(this.Grid.getStore().getAt(i).data['invamount']) - parseFloat(this.Grid.getStore().getAt(i).data['taxamount']));
                    subtotal += getRoundedAmountValue(total);
                }
            }
            else {
                continue;
            }
        }
        /*Term amount and its taxes added in sub total.Previously Invoice term was not implemented in SR and PR*/
        if(this.termgrid != undefined){
            for (var term = 0; term < this.termgrid.getStore().getCount(); term++) {
                var termData = this.termStore.getAt(term).data;
                if (typeof termData.termamount == 'number') {
                    if (this.includingGST && this.includingGST.getValue()) {
                        subtotal += termData.termamount;
                    }else{
                        subtotal += termData.termamount + termData.termtaxamount;
                    }
                }
            }
        }
        if (!this.includeProTax.getValue()) {
            var totalamount = subtotal;
            var rectax = this.Grid.taxStore.getAt(this.Grid.taxStore.find('prtaxid', this.Tax.getValue()));
            var totalterm = 0;
            var taxamount = 0;
            if (rectax != null) {
                taxamount = ((totalamount + totalterm) * rectax.data["percent"]) / 100;
            }
            subtotal+=getRoundedAmountValue(taxamount); 
        }
        
        // Terms as tax for India company 
        if(WtfGlobal.isIndiaCountryAndGSTApplied()){
            /**
             * Add tax amount for adjustment with invoice
             */
            subtotal+=gsttermamt;//getRoundedAmountValue(this.findTermsTotal());
        }
         
        var recarr =[]; 
        var fields=this.POStore.fields;
        for(var recCount=0;recCount<fields.length;recCount++){
            var value=invoiceRecord.data[fields.get(recCount).name]!=undefined?invoiceRecord.data[fields.get(recCount).name]:"";
            switch(fields.get(recCount).type){
                case "auto":
                    if(value!=undefined){
                        value=(value+"").trim();
                    }
                    value = value.replace(/\%/ig,"%25");
                    value = value.replace(/\+/ig,"%2b");
                    value=encodeURI(value);
                    value="\""+value+"\"";
                    break;
                case "date":
                    value="'"+WtfGlobal.convertToGenericDate(value)+"'";
                    break;
                case "boolean":
                    value="'"+value+"'";
                    break;
            }
            recarr.push(fields.get(recCount).name+":"+value);
        }
        arr.push("{"+recarr.join(",")+"}");

        totalsubtotal+=subtotal;
        remainingAmt = subtotal;
        if(remainingAmt<=amountdue){
            invoiceids+=invoiceRecord.data['billid']+",";
            utilizedAmounts+=remainingAmt+",";
            invoiceDueAmounts+=amountdue+",";
        } else {
            invoiceids+=invoiceRecord.data['billid']+",";
            utilizedAmounts+=amountdue+",";
            invoiceDueAmounts+=0+",";
        }
    //        amountdue-=remainingAmt;
        
    //        if(cnt!=0){
    //            invoiceids+=",";
    //            utilizedAmounts+=",";
    //            invoiceDueAmounts+=",";
    //        } 
        
    //        if(amountdue>=0){//still there is amount to utilise by invoice
    //            invoiceids+=invoiceRecord.data['billid']+",";
    //            utilizedAmounts+=remainingAmt+",";
    //            invoiceDueAmounts+=amountdue+",";
    //        } else {
    //            utilizedAmounts+=0+",";
    //            invoiceDueAmounts+=0+",";
    //        }
    }
    if (totalsubtotal < totatamountdue && (!this.isEdit || this.copyInv) && this.inputValue!=Wtf.CNDN_TYPE_FOR_MALAYSIA && this.inputValue != Wtf.NoteForOvercharge) {//This message only for Create new  and copy case when total invoice due is less than resulting DN/CN  
        var confMsg="";
//        if(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA){
//            confMsg = this.isCustomer ?  WtfGlobal.getLocaleText("acc.field.dnamountduenotfullyutilizedbysalesinvoice"):WtfGlobal.getLocaleText("acc.field.cnamountduenotfullyutilizedbypurchaseinvoice") ;
//        }else{
            confMsg = this.isCustomer ? WtfGlobal.getLocaleText("acc.field.cnamountduenotfullyutilizedbysalesinvoice") : WtfGlobal.getLocaleText("acc.field.dnamountduenotfullyutilizedbypurchaseinvoice");
//        }
        rec.isEdit = this.isEdit;
        Wtf.MessageBox.show({
            title: WtfGlobal.getLocaleText("acc.common.confirm"),
            msg: confMsg,
            width:470,
            closable : false,
            buttons: Wtf.MessageBox.YESNO,
            fn:function(btn){
                if(btn!="yes"){
                    return;
                }
                else{
                    rec.invoicedetails = "[" + arr.join(',') + "]";
                    rec.invoiceids = invoiceids;
                    rec.amounts = utilizedAmounts;
                    rec.invoiceDueAmounts = invoiceDueAmounts;
                    this.checkAvailableQuantity(rec,detail,incash,count); 
                }
            },
            icon: Wtf.MessageBox.QUESTION,
            scope: this
        });
    }
    else {
        rec.invoicedetails = "[" + arr.join(',') + "]";
        rec.invoiceids = invoiceids;
        rec.amounts = utilizedAmounts;
        rec.invoiceDueAmounts = invoiceDueAmounts;
        if (this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge) {//No Need to check Available Quantity in Debit Note case.
            this.showConfirmAndSave(rec, detail, incash);
        } else {
            this.checkAvailableQuantity(rec, detail, incash, count);
        }
    }
},

checkAvailableQuantity:function(rec,detail,incash,count){
    var prodLength=this.Grid.getStore().data.items.length;
    var i=0;
    var prorecavail = false;
    for(;i<prodLength-1;i++)
    { 
        var prodID=this.Grid.getStore().getAt(i).data['productid'];
        var prorec=this.Grid.productComboStore.getAt(this.Grid.productComboStore.find('productid',prodID));
        prorecavail = false;
        if(prorec==undefined){
            prorec=this.Grid.getStore().getAt(i);
            prorecavail=true;
        }
        if(this.inputValue!=Wtf.CNDN_TYPE_FOR_MALAYSIA){
            if(Wtf.account.companyAccountPref.isBatchCompulsory || Wtf.account.companyAccountPref.isSerialCompulsory || Wtf.account.companyAccountPref.isLocationCompulsory || Wtf.account.companyAccountPref.isWarehouseCompulsory || Wtf.account.companyAccountPref.isRowCompulsory || Wtf.account.companyAccountPref.isRackCompulsory || Wtf.account.companyAccountPref.isBinCompulsory){ //if company level option is on then only check batch and serial details
                if(prorec.data.isBatchForProduct || prorec.data.isSerialForProduct || prorec.data.isLocationForProduct || prorec.data.isWarehouseForProduct || prorec.data.isRowForProduct || prorec.data.isRackForProduct  || prorec.data.isBinForProduct){ 
                    if(prorec.data.type!='Service' && prorec.data.type!='Non-Inventory Part'){
                        var batchDetail= this.Grid.getStore().getAt(i).data['batchdetails'];
                        var productQty= this.Grid.getStore().getAt(i).data['dquantity'];
                        var baseUOMRateQty= this.Grid.getStore().getAt(i).data['baseuomrate'];
                        if(prorecavail && this.copyInv && this.moduleid == Wtf.Acc_Purchase_Return_ModuleId){
                            var availableQuantity = prorec.data.availablequantity;
                        }else{
                            var availableQuantity = prorec.data.quantity;
                        }                     
       
                        availableQuantity=availableQuantity
                        var lockQuantity = prorec.data.lockquantity; 
                        var quantity= this.Grid.getStore().getAt(i).data['dquantity'];
                    
                        if(!this.isCustomer&&Wtf.account.companyAccountPref.negativeStockPR==2&&(batchDetail == undefined || batchDetail == "" || batchDetail=="[]")&&this.isEdit&& ((availableQuantity-lockQuantity)<quantity)){
                            var msg="";
                            var validBatchdetails=this.Grid.checkbatchDetails(this.Grid);
                            if(validBatchdetails!="" && validBatchdetails!=undefined){  // validating batch serial window 
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),(WtfGlobal.getLocaleText("acc.invoice.bsdetail")+validLineItem)],2); 
                                this.enableSaveButtons();
                                return;
                            }
                            if(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA){
                                msg=WtfGlobal.getLocaleText("acc.field.QuantitygiveninCNareexceedingthequantityavailable");
                            }else{
                                msg=WtfGlobal.getLocaleText("acc.field.QuantitygiveninPRareexceedingthequantityavailable");
                            }
                            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),msg+' '+WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed"), function(btn){
                                if(btn=="yes"){
                                    this.showConfirmAndSave(rec,detail,incash);
                                    return ;  //
                                }else{
                                    return true;
                                }
                            },this);
                        }
                        else if(batchDetail == undefined || batchDetail == "" || batchDetail=="[]"){
                             var validLineItem=this.Grid.checkbatchDetails(this.Grid);
                            if(validLineItem!="" && validLineItem!=undefined){
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),(WtfGlobal.getLocaleText("acc.invoice.bsdetail")+validLineItem)],2); 
                                this.enableSaveButtons();
                                return;
                            }
                        }else{
                            var jsonBatchDetails= eval(batchDetail);
                            var batchQty=0;
                            for(var batchCnt=0;batchCnt<jsonBatchDetails.length;batchCnt++){
                                if(jsonBatchDetails[batchCnt].quantity>0){
                                    if(prorec.data.isSerialForProduct){
                                        batchQty=batchQty+ parseInt(jsonBatchDetails[batchCnt].quantity);
                                    }else{
                                        batchQty=batchQty+ parseFloat(jsonBatchDetails[batchCnt].quantity);
                                    }
                                }
                            }
                            if((batchQty).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) != (productQty*baseUOMRateQty).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL)){
                                var validLineItem=this.Grid.checkBatchDetailQty(this.Grid);
                                if(validLineItem!="" && validLineItem!=undefined){
                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),("quantity does not match with batch quantity  "+validLineItem)],2); 
                                    this.enableSaveButtons();
                                    return;
                                }
                            }                       
                        }
                    }
                }
            }
            /**
             *this block checks the product type so that the JE for that product is posted 
             *through backend. and the JE is posted backendly the we restrict that transaction with zero qty
            */
            if (this.Grid.calSubtotal()<=0 && Wtf.account.companyAccountPref.inventoryValuationType=="1" && this.allowZeroQuantity) {//&& (prorec.data.type == 'assembly' || prorec.data.type == 'invpart' || prorec.data.type == 'customerAssembly' || prorec.data.type == 'customerInventory')
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);//You cannot make Transaction with Zero or Blank Quantity.
                this.enableSaveButtons();
                return ;
            }
        }
        if(prorec != undefined) {
            //                    var copyQuantity=0;
            var prodName=prorec.data.productname;
            if(prorecavail && this.copyInv && this.moduleid == Wtf.Acc_Purchase_Return_ModuleId){
                var availableQuantity = prorec.data.availablequantity;
            }else{
                var availableQuantity = prorec.data.quantity;
            }
            
            //                  copyQuantity=this.Grid.getStore().getAt(i).data['copyquantity'];
            //                  availableQuantity=availableQuantity+copyQuantity;
            availableQuantity=availableQuantity
            var lockQuantity = prorec.data.lockquantity; 
            var quantity= this.Grid.getStore().getAt(i).data['dquantity'];
            //                   
            if(!this.isCustomer && ((availableQuantity-lockQuantity)<quantity)){  //for DO for linked with SO which is not linked and for Invoice
                var msg="";
                if(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA||this.inputValue==Wtf.NoteForOvercharge){
                    msg=WtfGlobal.getLocaleText("acc.field.QuantitygiveninCNareexceedingthequantityavailable");
                }else{
                    msg=WtfGlobal.getLocaleText("acc.field.QuantitygiveninPRareexceedingthequantityavailable");
                }
                if(Wtf.account.companyAccountPref.negativeStockPR==1){ // Block case
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.block"),msg+' '+WtfGlobal.getLocaleText("acc.nee.54")+' '+prodName+' '+WtfGlobal.getLocaleText("acc.field.is")+' '+(availableQuantity-lockQuantity)+'. '+WtfGlobal.getLocaleText("acc.field.Soyoucannotproceed")], 2);
                    return true;
                }else if(Wtf.account.companyAccountPref.negativeStockPR==2){     // Warn Case
                    if(prorec.data.isBatchForProduct || prorec.data.isSerialForProduct){
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.negativeStockNotAllowedForBatchSerial")], 2);
                        return true;
                    }
                    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),msg+' '+WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed"), function(btn){
                        if(btn=="yes"){
                            this.showConfirmAndSave(rec,detail,incash);
                            return ;  //
                        }else{
                            return true;
                        }
                    },this);
                    return;
                }else{  //in ingnore case directly save the record
                    this.showConfirmAndSave(rec,detail,incash);  
                    return ;
                }       
            }
        }
    }
    if(prodLength>0){  //in case of all product delivered quantity is available then directly save transaction
        this.showConfirmAndSave(rec,detail,incash);  

                
        var quantity=this.Grid.getStore().getAt(i).data['quantity'];
        if (prorec.data.type != 'Service' && prorec.data.type != 'Non-Inventory Part') { // serial no for only inventory type of product
            if (prorec.data.isSerialForProduct) {
                var v = quantity;
                v = String(v);
                var ps = v.split('.');
                var sub = ps[1];
                if (sub!=undefined && sub.length > 0) {
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.msg.exceptionMsgForDecimalQty")], 2);
                    return;
                }
            }

        }

    }else{

                
        var dquantity=this.Grid.getStore().getAt(i).data['dquantity'];
        if (prorec.data.type != 'Service' && prorec.data.type != 'Non-Inventory Part') { // serial no for only inventory type of product
            if (prorec.data.isSerialForProduct) {
                var v = dquantity;
                v = String(v);
                var ps = v.split('.');
                var sub = ps[1];
                if (sub!=undefined && sub.length > 0) {
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.msg.exceptionMsgForDecimalQty")], 2);
                    return;
                }
            }
        }
    }
         
    if(this.productOptimizedFlag==Wtf.Products_on_Submit){
        this.checklastproduct(rec,detail,incash,count);
    }else{
        this.showConfirmAndSave(rec,detail,incash);
    }   
},
checklastproduct:function(rec,detail,incash,count){
    if(this.Grid.getStore().getAt(count-1).data['pid']!="" && this.Grid.getStore().getAt(count-1).data['productid']==""){
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.common.productWithSpecifiedId")+" "+this.Grid.getStore().getAt(count-1).data['pid']+" "+WtfGlobal.getLocaleText("acc.common.productDoesNotExistsOrInDormantState")+". "+WtfGlobal.getLocaleText("acc.accPref.productnotFoundonSave")+'</center>' ,function(btn){
            if(btn=="yes") {
                this.showConfirmAndSave(rec,detail,incash);
            }else{
                this.enableSaveButtons();
                return;
            } 
        },this);                
    }else{
        this.showConfirmAndSave(rec,detail,incash);
    } 
         
},
    
showConfirmAndSave: function(rec,detail,incash){
    var promptmessage = "";
    /**
     * append pop up message while saving document for E-Way related fields. 
     * No need to show separate message i.e. add message in the before save pop up itself.
     * ERP-39530
     */
    if (WtfGlobal.isIndiaCountryAndGSTApplied()&& this.isEWayCheck.getValue() && (this.moduleid !=undefined && this.moduleid !='' && Wtf.EwayUnitDimCustmFieldsActivatedModules.indexOf(parseInt(this.moduleid)) > -1)) {
       promptmessage += WtfGlobal.getLocaleText("acc.invoice.msg7") 
       var ValidationOptArr = this.tagsFieldset.validateEwayRelatedFields(this);     
        if(ValidationOptArr[1]!=undefined &&ValidationOptArr[1] > 0){            
        promptmessage += WtfGlobal.getLocaleText("acc.save.document.eway.fields.confirm.msg");
        }
    } else if (Wtf.Countryid == Wtf.CountryID.MALAYSIA && WtfGlobal.isNonZeroRatedTaxCodeUsedInTransaction(this)){
        promptmessage = WtfGlobal.getLocaleText("acc.tax.nonZeroTaxcode.alert");
    } else{
        promptmessage = WtfGlobal.getLocaleText("acc.invoice.msg7");
    }
    /**
     * Append message If Return with Note created without Linking Invoice for India
     * reverting this changes because such documents showing in GST reports as well.
     */
//    if(WtfGlobal.isIndiaCountryAndGSTApplied() && this.isNoteAlso && this.fromLinkCombo.getValue() != 1){
//        promptmessage += WtfGlobal.getLocaleText("acc.save.GSTReport.CNDN.fields.confirm.msg");
//    }
    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.savdat"),promptmessage,function(btn){
        if(btn!="yes") {
            this.saveOnlyFlag=false;
            return;
        }
        rec.detail=detail;
        rec.includingGST = (this.includingGST)? this.includingGST.getValue() : false;      
        /* Deleted Linked Document ID(s)*/
        rec.deletedLinkedDocumentId=this.linkedDocumentId.slice(0,-3);
        rec.externalcurrencyrate=this.externalcurrencyrate;
        this.msg= WtfComMsgBox(27,4,true);
        //rec.currencyid=this.Currency.getValue();
        rec.number=this.Number.getValue();
        rec.fromLinkCombo=this.fromLinkCombo.getRawValue();
        var custFieldArr=0;
//        if(Wtf.account.companyAccountPref.countryid !=Wtf.Country.MALAYSIA){ 
            custFieldArr=this.tagsFieldset.createFieldValuesArray();
//        }
        if (custFieldArr.length > 0)
            rec.customfield = JSON.stringify(custFieldArr);        
        if(this.Grid != undefined && this.Grid.deleteStore!=undefined && this.Grid.deleteStore.data.length>0){  //for geting store to delete.
            rec.deletedData = this.getJSONArray(this.Grid.deleteStore,false,0);
        }
        if(this.contractid && this.contractid!=undefined){
            rec.contractid=this.contractid;
        }
        rec.billdate=WtfGlobal.convertToGenericDate(this.billDate.getValue());
        rec.creationdate = WtfGlobal.convertToGenericDate(this.billDate.getValue());
        rec.cntype = this.inputValue;
        rec.includeprotax = (this.includeProTax)? this.includeProTax.getValue() : false;
        rec.invoicetermsmap = this.getInvoiceTermDetails();        
        rec.isApplyTaxToTerms = (this.includeProTax && this.includeProTax.getValue()==true && this.applyTaxToTermsChk.getValue());
        rec.shipdate=WtfGlobal.convertToGenericDate(this.shipDate.getValue());
        rec.srid=this.copyInv?"":this.billid; 
        rec.isNoteAlso=this.isNoteAlso; 
        rec.isPayment=this.isPayment; 
        if (this.isNoteAlso && this.salesPersonID) {
            rec.salesPersonID = this.salesPersonID;
        }
        rec.batchDetails=this.Grid.batchDetails;
        rec.mode=(this.isOrder?41:11);
        rec.posttext=this.postText;
        rec.isfavourite=false;
        rec.moduleid=this.moduleid;
        var seqFormatRec=WtfGlobal.searchRecord(this.sequenceFormatStore, this.sequenceFormatCombobox.getValue(), 'id');
        rec.seqformat_oldflag=seqFormatRec!=null?seqFormatRec.get('oldflag'):false;
        rec.sequenceformat=this.sequenceFormatCombobox.getValue();
        if(this.isNoteAlso){                    
            rec.cndnsequenceformat=this.CnDnSequenceFormatCombobox.getValue();
            rec.cndnnumber=this.CnDnNumber.getValue();
        }
        if(this.isPayment){                    
            rec.paymentSequenceFormat=this.paymentSequenceFormatCombobox.getValue();
            rec.paymentNumber=this.paymentNumber.getValue();
            rec.pmtmethod=this.pmtMethod.getValue();
        }
        if(Wtf.account.companyAccountPref.countryid !=Wtf.Country.MALAYSIA){  
            if(!this.copyInv){
                if((this.record && this.record !== undefined) && (this.record.get('isfavourite') !== null || this.record.get('isfavourite') !== undefined)){
                    rec.isfavourite = this.record.get('isfavourite');
                }
            }
        }
        rec.currencyid=this.Currency.getValue();
        rec.isEdit=this.isEdit;
        rec.GSTApplicable=this.isGST; // ERP-32829 
        rec.copyInv=this.copyInv;
        rec.linkNumber = (this.PO != undefined && this.PO.getValue() != "")? this.PO.getValue() : "";
        rec.subTotal=this.Grid.calSubtotal();
        rec.taxamount=this.caltax();
        rec.tdsamount=Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Purchase_Return_ModuleId && this.isNoteAlso ? this.calculateTDSAmount() : "";
        rec.GTAApplicable = (this.GTAApplicable)? this.GTAApplicable.getValue() : false;
        rec.EWAYApplicable= (this.isEWayCheck)? this.isEWayCheck.getValue() : false;
        rec.gstCurrencyRate = this.gstCurrencyRate;// ERP-39555
                
        WtfGlobal.setAjaxTimeOut();        
        Wtf.Ajax.requestEx({
            url:this.ajxurl,
            params: rec                    
        },this,this.genSuccessResponse,this.genFailureResponse);
    },this);
},
genSuccessResponse:function(response, request){
    WtfGlobal.resetAjaxTimeOut();
    if(response.success){
        while(Wtf.dupsrno.length>0){    // removing serials from dupsrno global array (ERP-34112)
                Wtf.dupsrno.pop();
            }
        if (Wtf.account.companyAccountPref.deliveryPlanner && (this.moduleid == Wtf.Acc_Sales_Return_ModuleId)) {
            Wtf.getCmp("pushtoplanner" + this.heplmodeid + this.id).enable();
        }
        this.RecordID = response.billid;
        if (this.moduleid == Wtf.Acc_Sales_Return_ModuleId && Wtf.getCmp("SalesReturnListEntry") != undefined && response.success && Wtf.isAutoRefershReportonDocumentSave) {
            var msgTitle = this.title;//ERP-12682
            Wtf.getCmp("SalesReturnListEntry").Store.on('load', function() {
                WtfComMsgBox([msgTitle, response.msg], response.success * 2 + 1);
            }, Wtf.getCmp("SalesReturnListEntry").Store, {
                single: true
            });
        } else if (this.moduleid == Wtf.Acc_Purchase_Return_ModuleId && Wtf.getCmp("PurchaseReturnListEntry") != undefined && response.success && Wtf.isAutoRefershReportonDocumentSave) {
            var msgTitle = this.title;//ERP-12682
            Wtf.getCmp("PurchaseReturnListEntry").Store.on('load', function() {
                WtfComMsgBox([msgTitle, response.msg], response.success * 2 + 1);
            }, Wtf.getCmp("PurchaseReturnListEntry").Store, {
                single: true
            });
        } else {
            WtfComMsgBox([this.title, response.msg], response.success * 2 + 1);
        }
        var rec=this.NorthForm.getForm().getValues();
        this.exportRecord=rec;
        this.exportRecord['billid']=response.billid||response.invoiceid;
        this.exportRecord['billno']=response.billno||response.invoiceNo;
        this.exportRecord['amount']=response.amount||"";
        this.exportRecord['isNoteAlso']=this.isNoteAlso;
        if(this.singlePrint){
            this.singlePrint.exportRecord = this.exportRecord;//Reload all product information to reflect new quantity, price etc         
        }
//        if (this.singleRowPrint) {
//            this.singleRowPrint.exportRecord = this.exportRecord;
//        }
        if(this.mailFlag){
            if(this.inputValue==Wtf.CNDN_TYPE_FOR_MALAYSIA||this.inputValue==Wtf.NoteForOvercharge){
//                if(!this.isEdit){//Print Record Button is not getting enable in edit case - ERP-37307.
                    this.loadUserStore(response, request);   
//                }
                this.saveBttn.disable();
            }else{
                this.loadUserStore(response, request);   
            }
            this.disableComponent();
            this.response = response;
            this.request = request;
            return;
        }
        this.Grid.getStore().removeAll();
        this.fromLinkCombo.disable();
        this.PO.setDisabled(true);
        this.NorthForm.getForm().reset();
        this.isTaxable.reset();
        this.Tax.reset();
        this.Grid.updateRow(null);
        this.fromPO.setValue(false); 
        if(this.saveandcreateBtn){   //ERP-18517
            this.Grid.getStore().removeAll();
            this.saveandcreateBtn=false;
            this.includeProTax.enable();
            this.isTaxable.enable();
            this.isTaxable.setValue(false);
            this.Tax.enable();
            this.Tax.setValue("");
        }
        //            this.Grid.priceStore.purgeListeners();
        //            this.Grid.loadPriceStoreOnly(new Date(),this.Grid.priceStore);
        this.setTransactionNumber();
        this.sequenceFormatStore.load();
        this.Currency.setValue(Wtf.account.companyAccountPref.currencyid);
        this.fireEvent('update',this);
        this.externalcurrencyrate=0;
        this.isClosable= true;       //Reset Closable flag to avoid unsaved Message.
        this.postText="";
        if(!this.mailFlag){
            this.resetCustomFields();
        }
        this.setCnDnSequenceFormatAndNumber();
    }else if (response.accException) {
        Wtf.MessageBox.hide();
        var label = "";
        switch (this.moduleid) {
            case Wtf.Acc_Sales_Return_ModuleId:
                if (response.srcnflag == 0) {
                    label = WtfGlobal.getLocaleText("acc.SR.newsalesreturnno");
                } else if(response.srPaymentFlag==0) {
                    label = WtfGlobal.getLocaleText("acc.payment.newpaymnetno");
                }else{
                    label = WtfGlobal.getLocaleText("acc.CN.newcreditnoteno");
                }
                break;
            case Wtf.Acc_Purchase_Return_ModuleId:
                if (response.srDnFlag == 0) {
                    label = WtfGlobal.getLocaleText("acc.PR.newpurchasereturnno");
                } else {
                    label = WtfGlobal.getLocaleText("acc.DN.newdebitnoteno");
                }
                break;
        }
        this.newnowin = new Wtf.Window({
            title: WtfGlobal.getLocaleText("acc.common.success"),
            closable: true,
            iconCls: getButtonIconCls(Wtf.etype.deskera),
            width: 330,
            autoHeight: true,
            modal: true,
            bodyStyle: "background-color:#f1f1f1;",
            closable:false,
            buttonAlign: 'right',
            items: [new Wtf.Panel({
                border: false,
                html: (response.msg.length > 60) ? response.msg : "<br>" + response.msg,
                height: 50,
                bodyStyle: "background-color:white; padding: 7px; font-size: 11px; border-bottom: 1px solid #bfbfbf;"
            }),
            this.newdoForm = new Wtf.form.FormPanel({
                labelWidth: 190,
                border: false,
                autoHeight: true,
                bodyStyle: 'padding:10px 5px 3px; ',
                autoWidth: true,
                defaultType: 'textfield',
                items: [this.newdono = new Wtf.form.TextField({
                    fieldLabel: label,
                    allowBlank: false,
                    labelSeparator: '',
                    width: 90,
                    itemCls: 'nextlinetextfield',
                    name: 'newdono',
                    id: 'newdono'
                })],
                buttons: [{
                    text: WtfGlobal.getLocaleText("acc.common.saveBtn"),
                    handler: function () {
                        if (this.newdono.validate()) {
                            switch (this.moduleid) {
                                case Wtf.Acc_Sales_Return_ModuleId:
                                case Wtf.Acc_Purchase_Return_ModuleId:
                                    if (response.srcnflag == 0 || response.srDnFlag == 0) {
                                        Wtf.getCmp("invoiceNo"+this.heplmodeid+this.id).setValue(this.newdono.getValue());
                                    } else if(response.srPaymentFlag==0) {
                                        Wtf.getCmp("paymentNumber"+this.heplmodeid+this.id).setValue(this.newdono.getValue());
                                    }else{
                                        Wtf.getCmp("cndnNumber"+this.heplmodeid+this.id).setValue(this.newdono.getValue());
                                    }
                                    break;
                            }
                            this.save();
                            this.newnowin.close();
                        }
                    },
                    scope: this
                }, {
                    text: WtfGlobal.getLocaleText("acc.common.cancelBtn"), //"Cancel",
                    scope: this,
                    handler: function () {
                        this.newnowin.close();
                    }
                }]
            })]
        });
        this.newnowin.show();
    }else{
        WtfComMsgBox([this.title,response.msg],response.success*2+2);
    }
},

genFailureResponse:function(response){
    Wtf.MessageBox.hide();
    WtfGlobal.resetAjaxTimeOut();
    var msg=WtfGlobal.getLocaleText("acc.common.msg1");//"Failed to make connection with Web Server";
    if(response.msg)msg=response.msg;
    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg],2);
},
    
    
callEmailWindowFunction : function(response, request){
    if(this.CustomStore != null){
        var rec = this.CustomStore.getAt(0);
        var label = (this.isCustomer)?WtfGlobal.getLocaleText("acc.accPref.autoSR"):WtfGlobal.getLocaleText("acc.dimension.module.18");
        var mode=(this.isCustomer)?61:63;
        if (this.moduleid == Wtf.Acc_Sales_Return_ModuleId) {
            callEmailForMultipleRecords('', rec, this.label, 61, true, '', this.label, 'pdf', 24, undefined, false, true, "", Wtf.Acc_Sales_Return_ModuleId);
        }else if(this.moduleid == Wtf.Acc_Purchase_Return_ModuleId) {
            callEmailForMultipleRecords('', rec, this.label, 63, true, '', this.label, 'pdf', 24, undefined, false, true, "", Wtf.Acc_Purchase_Return_ModuleId);
        }
        else {
            callEmailWin("emailwin",rec,this.label,mode,this.isCustomer,false,false,false,false,false, false, true);
        }
    }
},

disableComponent: function(){  // disable following component in case of save button press.
    
    if(this.fromLinkCombo && this.fromLinkCombo.getValue() === ''){
        //   this.fromLinkCombo.emptyText = "";
        this.fromLinkCombo.clearValue();
    }
    
    if(this.PO && this.PO.getValue() === ''){
        this.handleEmptyText=true;//ERP-16619
        //    this.PO.emptyText = "";
        this.PO.clearValue();
    }
    
    if(Wtf.getCmp("save"+this.id)){
        Wtf.getCmp("save"+this.id).disable();
    }
    if(Wtf.getCmp("savencreate" + this.heplmodeid + this.id)){
        Wtf.getCmp("savencreate" + this.heplmodeid + this.id).disable();
    }
    if(Wtf.getCmp("posttext" + this.id)){
        Wtf.getCmp("posttext" + this.id).disable();
    }

    if(this.Grid){
        var GridStore = this.Grid.getStore();
        var count2 = GridStore.getCount();
        var lastRec2 = GridStore.getAt(count2-1);
        GridStore.remove(lastRec2);
        this.Grid.purgeListeners();
    }
    
    if(this.NorthForm){
        this.NorthForm.disable();
    }
    if(this.southPanel){
        this.southPanel.disable();
    }
    if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id)){
        Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).disable();
    }
},

loadUserStore : function(response, request){
    var GridRec = Wtf.data.Record.create ([
        {name:'billid'},
        {name:'companyid'},
        {name:'companyname'},
        {name:'journalentryid'},
        {name:'entryno'},
        {name:'billto'},
        {name:'orderamount'},
        {name:'shipto'},
        {name:'mode'},
        {name:'billno'},
        {name:'date', type:'date'},
        {name:'shipdate', type:'date'},
        {name:'personname'},
        {name:'personemail'},
        {name:'billingEmail'},
        {name:'personid'},
        {name:'shipping'},
        {name:'deleted'},
        {name:'memo'},
        {name:'posttext'},
        {name:'costcenterid'},
        {name:'costcenterName'},
        {name:'statusID'},
        {name:'shipvia'},
        {name:'fob'},
        {name:'status'},
        {name:'withoutinventory',type:'boolean'},
        {name:'isfavourite'},
    ]);
    
    var StoreUrl = (this.isCustomer)?"ACCInvoiceCMN/getSalesReturn.do":"ACCGoodsReceiptCMN/getPurchaseReturn.do";
    
    
    this.CustomStore = new Wtf.data.GroupingStore({
        url:StoreUrl,
        remoteSort:true,
        baseParams:{
            costCenterId: this.CostCenter.getValue(),
            deleted:false,
            nondeleted:false,
            consolidateFlag:false,
            enddate:'',
            startdate:'',
            companyids:companyids,
            gcurrencyid:gcurrencyid,
            isfavourite:false,
            userid:loginid,
            ss:request.params.number,
            moduleid:this.moduleid
        },
        sortInfo : {
            field : 'companyname',
            direction : 'ASC'
        },
        groupField : 'companyname',
        reader: new Wtf.data.KwlJsonReader({
            root: "data",
            totalProperty:'count'
        },GridRec)
    });
        
    this.CustomStore.on('load', this.enableButtons(), this);
        
    this.CustomStore.load();
    
},

enableButtons : function(){
    Wtf.getCmp("emailbut" + this.id).enable();
    Wtf.getCmp("exportpdf" + this.id).enable();
    if (Wtf.getCmp("printSingleRecord" + this.id)) {
        Wtf.getCmp("printSingleRecord" + this.id).enable();
    }
},
hideShowProductWeightColumns:function(){
    var productweightperstockuom=this.Grid.getColumnModel().findColumnIndex("productweightperstockuom");
    var productweightincludingpakagingperstockuom=this.Grid.getColumnModel().findColumnIndex("productweightincludingpakagingperstockuom");
    var productvolumeperstockuom=this.Grid.getColumnModel().findColumnIndex("productvolumeperstockuom");
    var productvolumeincludingpakagingperstockuom=this.Grid.getColumnModel().findColumnIndex("productvolumeincludingpakagingperstockuom");
    if(Wtf.account.companyAccountPref.calculateproductweightmeasurment){// If option is true in the company need to show unit product column
        this.Grid.getColumnModel().setHidden( productweightperstockuom,false) ;
        this.Grid.getColumnModel().setHidden( productweightincludingpakagingperstockuom,false) ;
        this.Grid.getColumnModel().setHidden( productvolumeperstockuom,false) ;
        this.Grid.getColumnModel().setHidden( productvolumeincludingpakagingperstockuom,false) ;
    } else {//If option is false in the company need to hide unit product column
        this.Grid.getColumnModel().setHidden( productweightperstockuom,true) ;
        this.Grid.getColumnModel().setHidden( productweightincludingpakagingperstockuom,true) ;
        this.Grid.getColumnModel().setHidden( productvolumeperstockuom,true) ;
        this.Grid.getColumnModel().setHidden( productvolumeincludingpakagingperstockuom,true) ;
    }
},
    
addTax: function () {
    var p = callTax("taxwin");
    Wtf.getCmp("taxwin").on('update', function () {
        this.Grid.taxStore.reload();
    }, this);
},
includeProTaxHandler: function (c, rec, val) {
    if (this.includeProTax.getValue() == true) {
        this.isTaxable.setValue(false);
        this.isTaxable.disable();
        this.Tax.setValue("");
        this.Tax.disable();
        this.applyTaxToTermsChkHideShow(true);
    } else {
        this.applyTaxToTermsChkHideShow(false);
        /*-------If "Map taxes at product level" check is ON then restricting to change "Include Product Tax" value from Yes to No----------  */
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
            this.includeProTax.setValue(true);
            this.applyTaxToTermsChkHideShow(true);
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.maptaxesatproductlevel.activated")], 2);
        }
        this.isTaxable.reset();
        this.isTaxable.enable();
        if(this.includingGST) {
            this.includingGST.enable();
        }
    }
    if (this.isCustomer) {
        if (Wtf.account.companyAccountPref.unitPriceInSR) {
            this.showGridTax(c, rec, val);
        }
    } else {
        if (Wtf.account.companyAccountPref.unitPriceInPR) {
            this.showGridTax(c, rec, val);
        }
    }
},
applyTaxToTermsChkHideShow : function(show){
    if(show) {
        this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
    } else {
        this.applyTaxToTermsChk.setValue(false);
        this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(false);
    }
},
showGridTax: function (c, rec, val,isCallForTaxMappedAtProductLevel) {
    var hide = (val == null || undefined ? !rec.data['value'] : val);
    
       /* ----If "Map taxes at product level" check is ON & "Include Product Tax" value is Yes then keeping hide as false whatever the "val" is coming from calling destination-------*/
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel() && this.includeProTax && this.includeProTax.getValue()) {
            hide = false;
        }
        /* ----If "Map taxes at product level" check is ON & "Include Product Tax" value is Yes then keeping hide as false whatever the "val" is coming from calling destination-------*/
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel() && this.isTaxable.getValue()) {
            hide = true;
        }
        
    var id = this.Grid.getId()
    var rowtaxindex = this.Grid.getColumnModel().getIndexById(id + "prtaxid");
    var rowtaxamountindex = this.Grid.getColumnModel().getIndexById(id + "taxamount");
    this.Grid.getColumnModel().setHidden(rowtaxindex, hide);
    this.Grid.getColumnModel().setHidden(rowtaxamountindex, hide);
    var rowRateIncludingGstAmountIndex = this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
    var rowprDiscountIndex = this.Grid.getColumnModel().getIndexById(id + "prdiscount");
    var rowDiscountIsPercentIndex = this.Grid.getColumnModel().getIndexById(id + "discountispercent");
    var rowRateAmountIndex = this.Grid.getColumnModel().findColumnIndex("rate");
    if (rowprDiscountIndex != -1 && rowDiscountIsPercentIndex != -1 && rowRateIncludingGstAmountIndex != -1) {
        if (this.includingGST.getValue()) {
            if(this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge){
                this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex, true);
                this.Grid.getColumnModel().findColumnIndex("rate").editable = true;
            }else{
                this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex, !this.includingGST.getValue());
                this.Grid.getColumnModel().findColumnIndex("rate").editable = false;
            }
//            this.Grid.getColumnModel().setHidden(rowprDiscountIndex, !hide);
//            this.Grid.getColumnModel().setHidden(rowDiscountIsPercentIndex, !hide);
        } else if (!this.Grid.getColumnModel().config[rowRateIncludingGstAmountIndex].hidden) {
            this.Grid.getColumnModel().findColumnIndex("rate").editable = true;
            this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex, !this.includingGST.getValue());
//            this.Grid.getColumnModel().setHidden(rowprDiscountIndex, hide);
//            this.Grid.getColumnModel().setHidden(rowDiscountIsPercentIndex, hide);
        }
    }
    this.Grid.getStore().each(function (rec) {
        if (this.includeProTax && this.includeProTax.getValue() == true
            && (rec.data.prtaxid == "" || rec.data.prtaxid == undefined || rec.data.prtaxid=='None')) {//In Edit, values are resetting after selection Product level Tax value as No
            //                if(this.ExpenseGrid && this.ExpenseGrid.isVisible()) {//(!this.isCustBill && !(this.isEdit && !this.isOrder) && !(this.isCustomer||this.isOrder))
            //                    var index=this.ExpenseGrid.accountStore.find('accountid',rec.data.accountid);
            //                    var taxid = index > 0 ? this.ExpenseGrid.accountStore.getAt(index).data["acctaxcode"]:"";
            //                    var taxamount = this.ExpenseGrid.setTaxAmountAfterSelection(rec);
            //                    rec.set('prtaxid',taxid);
            //                    rec.set('taxamount',taxamount);
            //                } else {
            //                    index=this.ProductGrid.productComboStore.find('productid',rec.data.productid);
            //                    var acctaxcode = (this.isCustomer)?"salesacctaxcode":"purchaseacctaxcode";
            //                    taxid = index > 0 ? this.ProductGrid.productComboStore.getAt(index).data[acctaxcode]:"";
            //                    rec.set('prtaxid',taxid);
            //                    taxamount = this.ProductGrid.setTaxAmountAfterSelection(rec);
            //                    rec.set('taxamount',taxamount);
            //                }
            var taxid = "";
            var taxamount = 0;
            if (!(rec.data.productid == "" || rec.data.productid == undefined)) {// for excluding last empty row
                
                    /*------If tax is mapped with product then set product mapped tax at line level --------------- */

                    if (isCallForTaxMappedAtProductLevel != undefined && isCallForTaxMappedAtProductLevel) {
                        var taxId = "";
                        var invoiceStore = false;
                        var productComboIndex = WtfGlobal.searchRecordIndex(this.Grid.productComboStore, rec.data.productid, 'productid');
                        if (productComboIndex == -1) {
                            productComboIndex = WtfGlobal.searchRecordIndex(this.productComboStore, rec.data.productid, 'productid');
                            invoiceStore = true;
                        }
                        if (productComboIndex >= 0) {
                            var prorec = invoiceStore ? this.productComboStore.getAt(productComboIndex) : this.Grid.productComboStore.getAt(productComboIndex);
                            taxId = this.isCustomer ? prorec.data['salestaxId'] : prorec.data['purchasetaxId'];
                            if (taxId != undefined && taxId != "") {
                                taxid = taxId;
                                this.isCustomer ? rec.set('salestaxId', taxid) : rec.set('purchasetaxId', taxid);
                            }

                        }
                        
                }else{
                      if (taxid == "") {// if tax is mapped to customer or vendor then it will come default populated
                    var currentTaxItem = WtfGlobal.searchRecord(this.Name.store, this.Name.getValue(), 'accid');
                    var actualTaxId = currentTaxItem != null ? currentTaxItem.get('taxId') : "";
                    if (actualTaxId == undefined || actualTaxId == "" || actualTaxId == null) {// if customer/vendor is not mapped with tax then check that is their mapping account is mapped with tax or not, if it is mapped take account tax
                        actualTaxId = currentTaxItem != null ? currentTaxItem.get('mappedAccountTaxId') : "";
                    }
                   
                        
                            /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
                             *  Then we ignore Customer/Vendor mapped taxes
                             *  Consider Only Product mapped taxes i.e - only line level taxes(create new case)
                             */
                            if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                                actualTaxId = "";
                            }
                            
                        if (actualTaxId != undefined && actualTaxId != "" && actualTaxId != null) {
                        taxid = actualTaxId;
                        rec.set('prtaxid', taxid);
                        taxamount = this.Grid.setTaxAmountAfterSelection(rec);
                    }
                }
               }
            }
            if (actualTaxId != undefined && actualTaxId != "" && actualTaxId != null) {
                taxid = actualTaxId;
                rec.set('prtaxid', taxid);
                taxamount = this.Grid.setTaxAmountAfterSelection(rec);
            }
            rec.set('prtaxid', taxid);
            rec.set('taxamount', taxamount);
            rec.set("isUserModifiedTaxAmount", false);
        } else if (this.includeProTax && this.includeProTax.getValue() != true) {
            rec.set('prtaxid', '');
            rec.set('taxamount', 0);
        }
        if (this.includingGST && this.includingGST.getValue()) {
//            rec.set('discountispercent', 1);
//            rec.set('prdiscount', 0);
//            rec.set('rateIncludingGst', rec.get('rate'));
//            rec.set('rateIncludingGst', rec.get('taxamount'));
//            var taxamount = 0;
//            var unitAmount = 0;
//            var unitTax = 0;
//            var unitVal = 0;
//            var amount = rec.get('rate') != null ? getRoundedAmountValue(rec.get('rate')) : 0;
//            var quantity = rec.get('quantity') != null ? getRoundofValue(rec.get('quantity')) : 0;
//            var tax = rec.get('taxamount') != null ? getRoundofValue(rec.get('taxamount')) : 0;
//            if (quantity != 0) {
//                unitAmount = getRoundedAmountValue(amount);
//                unitTax = getRoundedAmountValue(tax / quantity);
//            }
//            if (unitAmount + unitTax != 0) {
//                rec.set('rateIncludingGst', unitAmount + unitTax);
//            } else {
//                rec.set('rateIncludingGst', rec.get('rate'));
//            }
            rec.set('rateIncludingGst',rec.get('rateIncludingGst'));
        } else if (rowRateIncludingGstAmountIndex != -1 && this.Grid.getColumnModel().config[rowRateIncludingGstAmountIndex].hidden && rec.data.prdiscount == 0)//if column unit price column is hidden. Works for all case except when include gst is checked.
{
            rec.set('discountispercent', 1);
            rec.set('prdiscount', 0);
            rec.set('rateIncludingGst', 0);
        }
    }, this);
    
        if (this.includeProTax && this.includeProTax.getValue() == true) {
            WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, false);//ERM-1085
        }
    //         if(hide)
        /*----If tax map at product level then not calling updateSubtotal() Function again-----------------   */
        if (!(isCallForTaxMappedAtProductLevel != undefined && isCallForTaxMappedAtProductLevel)) {
            this.updateSubtotal();
        }
    },
updateSubtotal: function (a, val) {
    this.applyCurrencySymbol();
        var aftertaxamt = 0.00;
        var tax = 0.00;
        var invoicetermtax = 0.00;
        var taxAndSubtotal = this.Grid.calLineLevelTax();
        if (this.includeProTax.getValue()) {
            if(this.includeProTax.getValue() && this.applyTaxToTermsChk.getValue()){
                invoicetermtax = this.addTermAmountInTax();
            }
            tax = taxAndSubtotal[1] + invoicetermtax;
            tax = WtfGlobal.addCurrencySymbolOnly(tax, this.symbol);
            aftertaxamt = WtfGlobal.addCurrencySymbolOnly(taxAndSubtotal[0]+this.findTermsTotal()+invoicetermtax, this.symbol);
        } else {
            if(Wtf.account.companyAccountPref.isLineLevelTermFlag){
                aftertaxamt = WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal() + this.caltax()+this.addTermAmountInTax() + this.findTermsTotal()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount(), this.symbol);
                tax = WtfGlobal.addCurrencySymbolOnly(this.caltax()+this.addTermAmountInTax(), this.symbol);
            }else{
                aftertaxamt = WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal()+ this.findTermsTotal() + this.caltax() + this.addTermAmountInTax(), this.symbol)
                tax = WtfGlobal.addCurrencySymbolOnly(this.caltax()+this.addTermAmountInTax(), this.symbol);
            }
            
        }
        var calTermTotal = WtfGlobal.addCurrencySymbolOnly(this.findTermsTotal(),this.symbol); 
        var amountbeforetax = WtfGlobal.addCurrencySymbolOnly((this.Grid.calSubtotal()+this.findTermsTotal()),this.symbol);
        if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
            this.tplSummary.overwrite(this.southCalTemp.body, {
                subtotal: Wtf.UpriceAndAmountDisplayValue,
                tax: Wtf.UpriceAndAmountDisplayValue,
                nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
                termtotal:Wtf.UpriceAndAmountDisplayValue,
                amountbeforetax:Wtf.UpriceAndAmountDisplayValue,
                tdsamount: Wtf.UpriceAndAmountDisplayValue,
                aftertaxamt: Wtf.UpriceAndAmountDisplayValue,
                totalAmtInBase: Wtf.UpriceAndAmountDisplayValue,
                amountdue: Wtf.UpriceAndAmountDisplayValue
            });
        } else{
            this.tplSummary.overwrite(this.southCalTemp.body, {
                subtotal: WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(), this.symbol),
                tax: tax,
                nontaxableamount: WtfGlobal.addCurrencySymbolOnly(this.calCulateNonTaxableTermAmount(),this.symbol),
                termtotal:calTermTotal,
                amountbeforetax:amountbeforetax,
                tdsamount: WtfGlobal.addCurrencySymbolOnly(this.calculateTDSAmount(),this.symbol),
                aftertaxamt: aftertaxamt,
                totalAmtInBase: WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(), WtfGlobal.getCurrencySymbol()),
            amountdue: WtfGlobal.addCurrencySymbolOnly(this.amountdue, WtfGlobal.getCurrencySymbol())
            });
        }
    if(this.moduleid == Wtf.Acc_Sales_Return_ModuleId && Wtf.account.companyAccountPref.calculateproductweightmeasurment){
        this.updateProductTotalWeightTemplate();
    }
},
    
updateProductTotalWeightTemplate : function(){
    var totalProductsWeight = 0;
    var totalProductsWeightwithPackaging = 0;
    var totalProductsVolume = 0;
    var totalProductsVolumeWithPackaging = 0;
    for(var i=0;i<this.Grid.getStore().getCount();i++){
        var rowRecord=this.Grid.getStore().getAt(i);
        if(rowRecord){
            var prdWtPeruom=rowRecord.data.productweightperstockuom;
            var prdPackagingWtPeruom=rowRecord.data.productweightincludingpakagingperstockuom;
            var prodVolumePerUOM=rowRecord.data.productvolumeperstockuom;
            var prodVolumeWithPackaging=rowRecord.data.productvolumeincludingpakagingperstockuom;
            var baseQuantity=rowRecord.data.baseuomquantity;
            if(baseQuantity){
                if(prdWtPeruom){
                    totalProductsWeight +=prdWtPeruom*baseQuantity;
                }
                if(prdPackagingWtPeruom){
                    totalProductsWeightwithPackaging +=prdPackagingWtPeruom*baseQuantity;
                }
                if(prodVolumePerUOM){
                    totalProductsVolume +=prodVolumePerUOM*baseQuantity;
                }
                if(prodVolumeWithPackaging){
                    totalProductsVolumeWithPackaging +=prodVolumeWithPackaging*baseQuantity;
                }
            }
        }
    }
    this.productWeightDetailsTplSummary.overwrite(this.productWeightDetailsTpl.body, {
        totalprdweight: parseFloat(totalProductsWeight).toFixed(3) + "  "+WtfGlobal.getLocaleText("acc.field.weighingunit"),
        totalprdweightwithpack: parseFloat(totalProductsWeightwithPackaging).toFixed(3) + "  "+WtfGlobal.getLocaleText("acc.field.weighingunit"),
        totalprdvolume: parseFloat(totalProductsVolume).toFixed(3) + "  Cubic",
        totalprdvolumewithpack: parseFloat(totalProductsVolumeWithPackaging).toFixed(3) + "  Cubic"
    });
},

updateSubtotalOnTermChange : function(updateTotalSummary,termAmountChanged) {
    for(var i=0; i<this.termStore.getCount(); i++) {
        var recdata = this.termStore.getAt(i).data;
        var store = this.termStore;
        var subtotal = this.calProdSubtotalWithoutDiscount();
        var formula = recdata.formulaids.split(",");
        var termtotal = 0;
        for(var cnt=0; cnt<formula.length; cnt++){
            if(formula[cnt]=='Basic') {
                termtotal +=(subtotal);
            }
            var record = store.queryBy(function(record){
                return (record.get('id') == formula[cnt]);
            }, this).items[0];
            if(record && (typeof record.data.termamount=='number')) {
                termtotal +=(record.data.termamount);
            }
        }
        if(typeof (recdata.termpercentage) != "string" && parseInt(recdata.termpercentage) >= 0) {
            var opmod = recdata.sign==0 ? -1 : 1;
            var this_termTotal = ((Math.abs(termtotal) * recdata.termpercentage*1) / 100)*opmod;
            this.termStore.getAt(i).set('termamount',getRoundedAmountValue(this_termTotal));
        }
    }

    if(this.includeProTax.getValue() && this.applyTaxToTermsChk.getValue()){
        this.addTermAmountInTax();
    }
    if(updateTotalSummary) {
        this.updateSubtotal(this,termAmountChanged);
    }
},

calProdSubtotalWithoutDiscount:function(){
    var subtotal=0;
    var count=this.Grid.store.getCount();
    var store = this.Grid.store;
    for(var i=0;i<count;i++){
        if(this.isExpenseInv){
            var total=store.getAt(i).data.amount;
        }else{
            var total=store.getAt(i).data.amountWithoutTax;
        }
        subtotal+=total;
    }
    return subtotal;
},

findTermsTotal : function() {
    var termTotal = 0;
    if(this.termgrid) {
        var store = this.termgrid.store;
        var totalCnt = store.getCount();
        for(var cnt=0; cnt<totalCnt; cnt++) {
            var lineAmt = store.getAt(cnt).data.termamount;
            if(typeof lineAmt=='number'){
                termTotal += getRoundedAmountValue(lineAmt);
            }
        }
    }
    /*
    * In case of "Inclusive of Tax" Term Amount is considered as Including Tax.
    * So in case of Including GST we are calculating term amount as below,
    * Total Term Amount minus Total tax calculate on term amount.
    */
    if(this.includingGST && this.includingGST.getValue()){
        termTotal = termTotal - this.addTermAmountInTax();
    }    
    return getRoundedAmountValue(termTotal);
},

getInvoiceTermDetails : function() {
    var arr=[];
    if(this.termgrid) {
        var store = this.termgrid.store;
        store.each(function(rec){
            if(rec.data.termtax == "None"){
                   rec.set("termtax", "");
            }
            var lineAmt = rec.data.termamount;
            if(typeof lineAmt=='number' && lineAmt !=0) {
                arr.push(store.indexOf(rec));
            }            
        }, this);
        return WtfGlobal.getJSONArray(this.termgrid,true,arr)
    }
},

setTermValues: function(termDetails) {
  if( this.termgrid!=undefined && this.termgrid!=null){
        if (termDetails != "" && termDetails != null && termDetails != undefined && !(this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)) {
            var detailArr = eval(termDetails);
            for (var cnt = 0; cnt < detailArr.length; cnt++) {
                var jObj = detailArr[cnt];

                var record = this.termStore.queryBy(function(record) {
                    return (record.get('id') == jObj.id);
                }, this).items[0];
                if (record) {
                    record.set('termamount', jObj.termamount);
                    record.set('termpercentage', jObj.termpercentage == 0 ? "" : jObj.termpercentage);
                 /*
                 * ERP-40242 : The below check is to avoid load term record in copy case if tax is  deactivated.
                 */
                if(jObj.isActivated || !(this.copyInv || (this.fromPO != undefined && this.fromPO.getValue()))){
                    if (!this.readOnly) {
                        this.linkedTaxDummyStore.insert(cnt, new this.linkedTaxDummyStore.recordType({
                            termtax:jObj.termtax,
                            linkedtaxname:jObj.linkedtaxname,
                            linkedtaxpercentage:jObj.linkedtaxpercentage
                        }));
                        record.set('termtax',jObj.termtax);
                    } else {
                        record.set('termtax',jObj.linkedtaxname);
                    }
                    record.set('linkedtaxpercentage',jObj.linkedtaxpercentage);
                    record.set('termtaxamount',jObj.termtaxamount);
                }
            }

            }
        }
        WtfGlobal.fliterNonUsedDeactivatedTerms(this);
    }
},

summarizeInvoiceTermAmount: function(selectedValuesArr){
        Wtf.Ajax.requestEx({
                url: "kwlCommonTables/getSourceDocumentTermsInLinkingDocument.do",
                params: {
                    ids : selectedValuesArr.toString(),
                    fromlinkcombovalue : this.fromLinkCombo.getValue(),
                    isCustomer : this.isCustomer,
                    isFromReturn : true
                }
        }, this, function(response) {
            if(response != null && response != undefined && response.success){
                this.setTermValues(response.termDetails);
            }
        },function(response) {    
            
        });        
    },
caltax: function () {
    var rec = this.Grid.taxStore.getAt(this.Grid.taxStore.find('prtaxid', this.Tax.getValue()));
    var taxamount = 0;
    var totalamount = 0;
    if(this.isTaxable != undefined && this.isTaxable.getValue()){
        totalamount=getRoundedAmountValue(this.calTotalAmount());
        if (rec != null && rec.data.prtaxid != "None"){
            taxamount = ((totalamount)*rec.data["percent"])/100;
        }
//        taxamount += this.addTermAmountInTax();
    }
    
//    if(this.includeProTax.getValue() && this.applyTaxToTermsChk.getValue()){
//        taxamount += this.addTermAmountInTax();
//    }
        
    if(Wtf.account.companyAccountPref.isLineLevelTermFlag==1){   // Term Amount of line item showing as tax in  Indian Company.
        var taxamount=0;
        var store = this.Grid.store;
        var totalCnt = store.getCount();
        for(var cnt=0; cnt<totalCnt; cnt++) {
            var lineAmt = store.getAt(cnt).data.recTermAmount;
            if(typeof lineAmt=='number')
                taxamount += getRoundedAmountValue(lineAmt);
        }
    }
    return getRoundedAmountValue(taxamount);
},
addTermAmountInTax: function () {
    var taxamount = 0;
    if(this.termStore != undefined && this.termStore != null){
        for (var term = 0; term < this.termStore.getCount(); term++) {
            var termRec = this.termStore.getAt(term);
            var termData = this.termStore.getAt(term).data;
            if (typeof termData.termamount == 'number') {
                var individualTermTaxAmount = 0;
                if (this.includingGST && this.includingGST.getValue()) {
                    /*
                * Reverse calculate tax in case of Including GST
                */
                    individualTermTaxAmount = getRoundedAmountValue((termData.termamount) * termData.linkedtaxpercentage / (100 + termData.linkedtaxpercentage));
                    termRec.set('termAmountExcludingTax',getRoundedAmountValue(termData.termamount - individualTermTaxAmount));
                    termRec.set('termAmountExcludingTaxInBase',getRoundedAmountValue((termData.termamount - individualTermTaxAmount) * this.getExchangeRate()));
                } else {
                    individualTermTaxAmount = getRoundedAmountValue((termData.termamount) * termData.linkedtaxpercentage / 100);
                    termRec.set('termAmountExcludingTax',getRoundedAmountValue(termData.termamount));
                    termRec.set('termAmountExcludingTaxInBase',getRoundedAmountValue(termData.termamount * this.getExchangeRate()));
                }
                taxamount += individualTermTaxAmount;
                termRec.set('termamountinbase',getRoundedAmountValue(termData.termamount * this.getExchangeRate()));
                termRec.set('termtaxamount',individualTermTaxAmount);
                termRec.set('termtaxamountinbase',getRoundedAmountValue(individualTermTaxAmount * this.getExchangeRate()));
            }
        }
    }
    return taxamount;
},
calTotalAmount: function () {
    var subtotal = this.Grid.calSubtotal();
    return subtotal;
},
calTotalTDSAmount:function(){ // calculate subtotal TDS assessable amount
    var subtotal=this.Grid.calTDSAssasableSubtotal();
//    var discount=this.getDiscount();
//    return subtotal- discount;
    return subtotal;
},
getJSONArray:function(store, includeLast, idxArr){
    var indices="";
    if(idxArr)
        indices=":"+idxArr.join(":")+":";        
    var arr=[];
    var fields=store.fields;
    var len=store.getCount();
    //if(includeLast)len++;
        
    for(var i=0;i<len;i++){
        if(idxArr&&indices.indexOf(":"+i+":")<0) continue;
        var rec=store.getAt(i);
        var recarr=[];
        for(var j=0;j<fields.length;j++){
            var value=rec.data[fields.get(j).name];
            switch(fields.get(j).type){
                    case "auto":if(value!=undefined){value=(value+"").trim();}value=encodeURI(value);value="\""+value+"\"";break;
                    case "date":value="'"+WtfGlobal.convertToGenericDate(value)+"'";break;
                }
            recarr.push(fields.get(j).name+":"+value);
        }
        recarr.push("modified:"+rec.dirty);
        arr.push("{"+recarr.join(",")+"}");
    }
    return "["+arr.join(',')+"]";
},
    
showPONumbersGrid: function (url) {
    this.PONumberSelectionWin = new Wtf.account.PONumberSelectionWindow({
        renderTo: document.body,
        height: 500,
        id: this.id + 'PONumbersSelectionWindowDO',
        width: 1200,
        title: 'Document Selection Window',
        layout: 'fit',
        modal: true,
        resizable: false,
        url: url,
        inputValue:this.inputValue,
        moduleid: this.moduleid,
        columnHeader:this.fromLinkCombo.getRawValue(),
        invoice: this,
        storeBaseParams: this.POStore.baseParams,
        storeParams: this.POStore.lastOptions.params,
        //            singleSelect:true,
        PORec: this.PORec,
        fromLinkComboValue:this.fromLinkCombo.getValue()
    });
    this.PONumberSelectionWin.show();
},
checkForDeActivatedProductsAdded:function(){
    var invalidProducts='';
    if(this.isEdit && !this.copyInv){ // Edit case
        var linkedDocuments = this.PO.getValue();
        var linkedDocsArray=[];
        if(linkedDocuments != ''){
            linkedDocsArray = linkedDocuments.split(',');
            var areDocumentsChanged = false;
            for(var x=0;x<linkedDocsArray.length;x++){
                var docId = linkedDocsArray[x];
                if(this.originallyLinkedDocuments.indexOf(docId) == -1){
                    areDocumentsChanged = true;
                    break;
                }
            }
            if(areDocumentsChanged){
                invalidProducts = this.checkDeactivatedProductsInGrid();
            }
        }
    } else { //Create New and Copy
        invalidProducts = this.checkDeactivatedProductsInGrid();
    }
    return invalidProducts;
},
checkDeactivatedProductsInGrid :function(){
    var inValidProducts=''
    var rec = null;
    var productId = null;
    var productRec = null;
    for(var count=0;count<this.Grid.store.getCount();count++){
        rec = this.Grid.store.getAt(count);
        productId = rec.data.productid;
        if(productId!= undefined && productId != null && productId != ''){
            if(!this.fromPO.getValue() && !this.copyInv){
                productRec = WtfGlobal.searchRecord(this.Grid.productComboStore, productId, "productid");
            } else {
                productRec = rec;
            }
            if(productRec && (productRec.data.hasAccess === false)){
                inValidProducts+=productRec.data.productname+', ';
            }    
        }
    }
    return inValidProducts; // List of deactivated products
},
enableSaveButtons:function(){   // enable save buttons
    this.saveBttn.enable();
    this.savencreateBttn.enable();
},    
pushToPlanner: function() {
    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.areYouSureYouWantToPushToPlanner"), function(btn) {
        if (btn == "yes") {
            this.remarkWin = new Wtf.Window({
                height: 270,
                width: 360,
                maxLength: 1000,
                title: WtfGlobal.getLocaleText("acc.field.RemarksBySales"), // "Remarks By Sales",
                bodyStyle: 'padding:5px;background-color:#f1f1f1;',
                iconCls: getButtonIconCls(Wtf.etype.deskera),
                autoScroll: true,
                allowBlank: false,
                layout: 'border',
                items: [{
                    region: 'north',
                    border: false,
                    height: 70,
                    bodyStyle: 'background-color:#ffffff;border-bottom:1px solid #bfbfbf;',
                    html: getTopHtml(WtfGlobal.getLocaleText("acc.field.RemarksBySales"), "", "../../images/link2.jpg", true, "10px 0 0 5px", "7px 0px 0px 10px")
                }, {
                    region: 'center',
                    border: false,
                    layout: 'form',
                    bodyStyle: 'padding:5px;',
                    items: [this.remarkField = new Wtf.form.TextArea({
                        fieldLabel: WtfGlobal.getLocaleText("acc.field.AddRemark*"),
                        width: 200,
                        height: 100,
                        allowBlank: !this.isEdit || this.copyInv || this.isViewTemplate,
                        maxLength: 1024
                    })]
                }],
                modal: true,
                buttons: [{
                    text: WtfGlobal.getLocaleText("acc.OK"), // "OK",
                    id: 'savePushToDeliveryPlanner' + this.heplmodeid + this.id,
                    scope: this,
                    handler: function() {
                        Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).disable();

                        if (this.remarkField.getValue().trim() == ""&& this.isEdit && !this.copyInv && !this.isViewTemplate) {
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Pleaseenterremark")], 2);
                            Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable(); // ERP-10529
                            return;
                        }

                        if (!this.remarkField.isValid()) {
                            this.remarkField.markInvalid(WtfGlobal.getLocaleText("acc.field.Maximumlengthofthisfieldis1024"));
                            Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable(); // ERP-10529
                            return;
                        }

                        Wtf.Ajax.requestEx({
                            url: "ACCDeliveryPlanner/savePushToDeliveryPlanner.do",
                            params: {
                                docID: this.isViewTemplate ? this.record.data.billid : this.RecordID,
                                pushTime: WtfGlobal.convertToGenericDate(new Date()),
                                deliveryDate: WtfGlobal.convertToGenericDate(this.shipDate.getValue()),
                                remarksBySales: this.remarkField.getValue(),
                                moduleid: this.moduleid
                            }
                        }, this, function (response) {
                            if (response.success) {
                                this.remarkWin.close();
                                Wtf.getCmp("pushtoplanner" + this.heplmodeid + this.id).disable();
                                getDeliveryPlannerTabView(this.moduleid);
                            } else {
                                Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable();
                                var msg = WtfGlobal.getLocaleText("acc.common.msg1"); // "Failed to make connection with Web Server";
                                if(response.msg) {
                                    msg = response.msg;
                                }
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), msg], 2);
                            }
                        }, function (response) {
                            Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable();
                            var msg = WtfGlobal.getLocaleText("acc.common.msg1"); // "Failed to make connection with Web Server";
                            if(response.msg) {
                                msg = response.msg;
                            }
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), msg], 2);
                        });
                    }
                }, {
                    text: WtfGlobal.getLocaleText("acc.common.cancelBtn"),
                    scope: this,
                    handler: function() {
                        this.remarkWin.close();
                    }
                }]
            });
            this.remarkWin.show();
        }
    }, this);
},
  /* Refresh Grid on Including GST Checked / Un- checked*/
  includingGSTOnChnage:function(obj,newval,oldval){
        /**
        * Show Alert Including GST  check enable and RCM check already ON
        */
        if (WtfGlobal.isIndiaCountryAndGSTApplied()) {
            if (this.GTAApplicable && this.GTAApplicable.getValue()) {
                this.includingGST.setValue(oldval);
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.common.rcm.applicable.including.gst.notallowed")], 2);
                return;
            }
        }
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoice.gridDataWillCleared"),function(btn){
        if(btn=="yes") {
            this.Grid.getStore().removeAll();
            this.Grid.addBlankRow();
            
            if(this.termgrid != undefined && this.termgrid != null){
                this.termgrid.getStore().rejectChanges();
            }

            this.Grid.fireEvent('datachanged', this);
            if(newval){
                this.includeProTax.disable();
                this.includeProTax.setValue(true);
            }else {
                this.isViewTemplate==true?this.includeProTax.disable():this.includeProTax.enable();
                this.includeProTax.enable();
                /*False means Hidden True*/
                /*This function written in CommonERPComponent.js*/
                if(!(this.inputValue == Wtf.CNDN_TYPE_FOR_MALAYSIA || this.inputValue == Wtf.NoteForOvercharge)){
                    this.HideShowTermAmountExcludingTaxCol(false);
                }    
            }
            var rec=WtfGlobal.searchRecord(this.includeProTax.store, true, 'value');
            if(rec!=null){
                this.includeProTaxHandler(this.includeProTax,rec,!this.includeProTax.getValue());            
            }
        }else {
            /**
                *set hidden to  rateIncludingGst column from grid when
                *including gst checkbox is unchecked.
                */
            var rowRateIncludingGstAmountIndex = this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
            if (rowRateIncludingGstAmountIndex != -1) {
                if (this.includingGST) {
                    this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex, true);
                }
            }
            obj.setValue(oldval);
        }
    },this);
  }
});

















































/**********************Delivery Order Report And Fixed Asset Delivery Order Report*************************/
Wtf.account.DeliveryListPanel=function(config){
    this.invID=null;
    //    this.exponly=null;
    this.recArr=[];
    this.isCash=true;
    this.isGRorDO = true;
    this.isCustomWidgetReport=config.isCustomWidgetReport||false;
    this.businessPerson=(config.isCustomer?'Customer':'Vendor');
    this.costCenterId = "";
    this.isfavourite=false;
    this.moduleid=config.moduleid;
    //Flag to indicate whether Avalara integration is enabled and module is enabled for Avalara Integration or not
    this.isModuleForAvalara = (Wtf.account.companyAccountPref.avalaraIntegration && (config.moduleid == Wtf.Acc_Delivery_Order_ModuleId)) ? true : false;
    this.isUnInvoiced=(config.isUnInvoiceDOReport==null || config.isUnInvoiceDOReport==undefined)?false:config.isUnInvoiceDOReport;
    this.isUnInvoiceDOReport=(config.isUnInvoiceDOReport==null || config.isUnInvoiceDOReport==undefined)?false:config.isUnInvoiceDOReport;
    this.isJobWorkOutGRO=(config.isJobWorkOutGRO==null || config.isJobWorkOutGRO==undefined)?false:config.isJobWorkOutGRO;
    //    this.isJobWorkOutReciever=(config.isJobWorkOutReciever==null || config.isJobWorkOutReciever==undefined)?false:config.isJobWorkOutReciever;
    this.isPOSRecords=false;
    this.consolidateFlag = config.consolidateFlag;
    this.UomSchemaType=Wtf.account.companyAccountPref.UomSchemaType;
    this.index = "";
    config.pendingapproval =  config.pendingapproval !=undefined ? config.pendingapproval : false;
    this.extraFilters = config.extraFilters;
    if(config.extraFilters != undefined){//Cost Center Report View
        this.costCenterId = config.extraFilters.costcenter?config.extraFilters.costcenter:"";
    }
    config.isFixedAsset = (config.isFixedAsset==null || config.isFixedAsset==undefined)?false:config.isFixedAsset;
    Wtf.apply(this, config);
    //this.withInvMode : Used flag to check inventory mode of selected records.
    (this.businessPerson == "Customer")? Wtf.DOStatusStore.load() : Wtf.GROStatusStore.load();
    this.isLeaseFixedAsset = (config.isLeaseFixedAsset==null || config.isLeaseFixedAsset==undefined)?false:config.isLeaseFixedAsset;
    this.isConsignment = (config.isConsignment==null || config.isConsignment==undefined)?false:config.isConsignment;
    this.label = config.label;
    this.isOrder=config.isOrder;
    //this.isCustBill=config.isCustBill;
    this.nondeleted=false;
    this.deleted=false;
    this.uPermType=this.isLeaseFixedAsset?Wtf.UPerm.leaseorder:config.isFixedAsset?(config.isCustomer?Wtf.UPerm.assetsales:Wtf.UPerm.assetpurchase):this.isConsignment?(config.isCustomer?Wtf.UPerm.consignmentsales:Wtf.UPerm.consignmentpurchase):(config.isCustomer?Wtf.UPerm.deliveryreport:Wtf.UPerm.goodsreceiptreport);
    this.permType=this.isLeaseFixedAsset?Wtf.Perm.leaseorder:config.isFixedAsset?(config.isCustomer?Wtf.Perm.assetsales:Wtf.Perm.assetpurchase):this.isConsignment?(config.isCustomer?Wtf.Perm.consignmentsales:Wtf.Perm.consignmentpurchase):(config.isCustomer?Wtf.Perm.deliveryreport:Wtf.Perm.goodsreceiptreport);
    this.moduleid=config.moduleid;
    //    this.uPaymentPermType=(config.isCustomer?Wtf.UPerm.invoice:Wtf.UPerm.vendorinvoice);
    //    this.createPaymentPermType=(config.isCustomer?Wtf.Perm.invoice.createreceipt:Wtf.Perm.vendorinvoice.createpayment);
    this.exportPermType=config.isLeaseFixedAsset?this.permType.exportldo:this.isConsignment?(config.isCustomer?this.permType.exportsalescondo:this.permType.exportpurchasecondo):(config.isFixedAsset?(config.isCustomer?this.permType.exportfado:this.permType.exportfagr):(config.isCustomer?(this.isOrder?this.permType.exportdatado:false):(this.isOrder?this.permType.exportdatagr:false)));
    this.printPermType=config.isLeaseFixedAsset?this.permType.printldo:this.isConsignment?(config.isCustomer?this.permType.printsalescondo:this.permType.printpurchasecondo):(config.isFixedAsset?(config.isCustomer?this.permType.printfado:this.permType.printfagr):(config.isCustomer?(this.isOrder?this.permType.printdo:false):(this.isOrder?this.permType.printgr:false)));
    this.removePermType=config.isLeaseFixedAsset?this.permType.deleteldo:this.isConsignment?(config.isCustomer?this.permType.deletesalescondo:this.permType.deletepurchasecondo):(config.isFixedAsset?(config.isCustomer?this.permType.deletefado:this.permType.deletefagr):(config.isCustomer?(this.isOrder?this.permType.removedo:false):(this.isOrder?this.permType.removegr:false)));
    this.editPermType=config.isLeaseFixedAsset?this.permType.editldo:this.isConsignment?(config.isCustomer?this.permType.editsalescondo:this.permType.editpurchasecondo):(config.isFixedAsset?(config.isCustomer?this.permType.editfado:this.permType.editfagr):(config.isCustomer?(this.isOrder?this.permType.editdo:false):(this.isOrder?this.permType.editgr:false)));
    this.copyPermType=(config.isCustomer?this.permType.copydo:this.permType.copygr);
    this.emailPermType=(config.isFixedAsset||this.isOrder)?true:false;
    this.reportbtnshwFlag=config.reportbtnshwFlag;
    this.isMovementWarehouseMapping=Wtf.account.companyAccountPref.isMovementWarehouseMapping;
    //    this.recurringPermType=this.permType.recurringinvoice;
    //    this.isQuotation = config.isQuotation;
    //    if(this.isQuotation == undefined || this.isQuotation == null){
    //    	this.isQuotation = false;
    //    }
    if(this.reportbtnshwFlag== undefined || this.reportbtnshwFlag == null)
    {
        this.reportbtnshwFlag=false;
    }
       
    if (dojoInitCount <= 0) {
        dojo.cometd.init("../../bind");
        dojoInitCount++;
    }
    
    var channelName = "";
    
    if (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
        if(this.isLeaseFixedAsset)
            channelName =Wtf.ChannelName.LeaseDeliveryOrderReport;
        else 
            channelName =Wtf.ChannelName.DeliveryOrderReport;
    } else if (this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId) {
        channelName =Wtf.ChannelName.GoodsReceiptReport;
    } else if (this.moduleid == Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId) {
        channelName =Wtf.ChannelName.FixedAssetReceiptList;
    } else if (this.moduleid == Wtf.Acc_FixedAssets_DeliveryOrder_ModuleId) {
        channelName =Wtf.ChannelName.FixedAssetDeliveryList;
    }  
   
    if (channelName != "" && !config.pendingapproval) {
        dojo.cometd.subscribe(channelName, this, "globalInvoiceListGridAutoRefreshPublishHandler");
    }
    
    this.expandRec = Wtf.data.Record.create ([
        {name:'productname'},
        {name:'productdetail'},
        {name:'prdiscount'},
        {name:'amount'},
        {name:'productid'},
        {name:'accountid'},
        {name:'accountname'},
        {name:'partno'},
        {name:'quantity'},
        {name:'dquantity'},
        {name:'unitname'},
        {name:'rate'},
        {name:'rateinbase'},
        {name:'externalcurrencyrate'},
        {name:'prtaxpercent'},
        {name:'orderrate'},
        {name:'desc', convert:WtfGlobal.shortString},
        {name:'productmoved'},
        {name:'currencysymbol'},
        {name:'currencyrate'},
        {name: 'type'},
        {name: 'pid'},
        {name:'carryin'},
        {name:'permit'},
        {name:'description'},
        {name:'remark'},
        {name:'linkto'},
        {name:'movementtype'},
        {name:'bomCode'},
        {name:'autobuildnumber'},
        {name:'customfield'},
        {name:'billid'},
        {name:'isexpenseinv'},
        {name:'lineLevelstatus'},
        {name:'itemqtyLinkedinSR'}, // gives the Item quantity remaming to link in CSR for CDO 
        {name: 'productweightperstockuom'},
        {name: 'productweightincludingpakagingperstockuom'},
        {name: 'productvolumeperstockuom'},
        {name: 'displayUOM'},
        {name: 'productvolumeincludingpakagingperstockuom'}
    ]);
    
    if(this.businessPerson=="Customer"){
        this.expandStoreUrl = "ACCInvoiceCMN/getDeliveryOrderRows.do";
    } else {
        this.expandStoreUrl = "ACCGoodsReceiptCMN/getGoodsReceiptOrderRows.do";
    }
    
    
    this.expandStore = new Wtf.data.Store({
        url:this.expandStoreUrl,
        //        url:Wtf.req.account+this.businessPerson+'Manager.jsp',
        baseParams:{
            mode:14,
            dtype : 'report',//Display type report/transaction, used for quotation
            isFixedAsset:config.isFixedAsset
        },
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        },this.expandRec)
    });
    
    
    this.GridRec = Wtf.data.Record.create ([
        {name:'billid'},
        {name:'companyid'},
        {name:'companyname'},
        {name:'journalentryid'},
        {name:'entryno'},
        {name:'billto'},
        {name:'orderamount'},
        {name:'shipto'},
        {name:'mode'},
        {name:'billno'},
        {name:'date', type:'date'},
        {name:'shipdate', type:'date'},
        {name:'termid'},
        {name:'termdetails'},
        {name:'termamount'},
        {name:'personname'},
        {name:'inventoryjeid'},
        {name:'inventoryentryno'},
        {name:'aliasname'},
        {name:'customerporefno'},
        {name:'personemail'},
        {name:'personid'},
        {name:'shipping'},
        {name:'deleted'},
        {name:'memo'},
        {name:'ordernoreferedformemoaddress'},
        {name:'costcenterid'},
        {name:'costcenterName'},
        {name:'statusID'},
        {name:'shipvia'},
        {name:'fob'},
        {name:'isTransactionSendForQA'},
        {name: 'isLinkedTransaction'},
        {name:'permitNumber'},
        {name:'externalcurrencyrate'},
        {name:'status'},
        {name:'dostatus'},
        {name:'isautogenerateddo'},
        {name:'invoiceno'},
        {name:'approvalstatusinfo'},
        {name:'approvalstatus'},
        {name:'withoutinventory',type:'boolean'},
        {name:'isfavourite'},
        {name:'isprinted'},
        {name:'currencysymbol'},
        {name:'currencyid'},
        {name:'OtherTermNonTaxableAmount'},
        {name:'amount'},
        {name:'amountinbase'},
        {name:'invoicenumber'},
        {name:'sequenceformatid'},
        {name:'lasteditedby'},
        {name:'isConsignment'},
        {name:'isLeaseFixedAsset'},
        {name:'isFixedAsset'},
        {name:'custWarehouse'},
        {name:'movementtype'},
        {name:'movementtypename'},
        {name:'driver'},
        {name:'billingAddressType'},
        {name:'billingAddress'},
        {name:'billingCountry'},
        {name:'billingState'},
        {name:'billingPostal'},
        {name:'billingEmail'},
        {name:'billingFax'},
        {name:'billingMobile'},
        {name:'billingPhone'},
        {name:'billingContactPerson'},
        {name:'billingRecipientName'},
        {name:'billingContactPersonNumber'},
        {name:'billingContactPersonDesignation'},
        {name:'billingWebsite'},
        {name:'billingCounty'},
        {name:'billingCity'},
        {name:'shippingAddressType'},
        {name:'shippingAddress'},
        {name:'shippingCountry'},
        {name:'shippingState'},
        {name:'shippingCounty'},
        {name:'shippingCity'},
        {name:'shippingEmail'},
        {name:'shippingFax'},
        {name:'shippingMobile'},
        {name:'shippingPhone'},
        {name:'shippingPostal'},
        {name:'shippingContactPersonNumber'},
        {name:'shippingContactPersonDesignation'},
        {name:'shippingWebsite'},
        {name:'shippingRecipientName'},
        {name:'shippingContactPerson'},
        {name:'shippingRoute'},  
        {name: 'vendcustShippingAddress'},
        {name: 'vendcustShippingCountry'},
        {name: 'vendcustShippingState'},
        {name: 'vendcustShippingCounty'},
        {name: 'vendcustShippingCity'},
        {name: 'vendcustShippingEmail'},
        {name: 'vendcustShippingFax'},
        {name: 'vendcustShippingMobile'},
        {name: 'vendcustShippingPhone'},
        {name: 'vendcustShippingPostal'},
        {name: 'vendcustShippingContactPersonNumber'},
        {name: 'vendcustShippingContactPersonDesignation'},
        {name: 'vendcustShippingWebsite'},
        {name: 'vendcustShippingContactPerson'},
        {name: 'vendcustShippingRecipientName'},
        {name: 'vendcustShippingAddressType'},
        /**
         * If Show Vendor Address in purchase side document and India country 
         * then this Fields used to store Vendor Billing Address
         */
        {name: 'vendorbillingAddressTypeForINDIA'},
        {name: 'vendorbillingAddressForINDIA'},
        {name: 'vendorbillingCountryForINDIA'},
        {name: 'vendorbillingStateForINDIA'},
        {name: 'vendorbillingPostalForINDIA'},
        {name: 'vendorbillingEmailForINDIA'},
        {name: 'vendorbillingFaxForINDIA'},
        {name: 'vendorbillingMobileForINDIA'},
        {name: 'vendorbillingPhoneForINDIA'},
        {name: 'vendorbillingContactPersonForINDIA'},
        {name: 'vendorbillingRecipientNameForINDIA'},
        {name: 'vendorbillingContactPersonNumberForINDIA'},
        {name: 'vendorbillingContactPersonDesignationForINDIA'},
        {name: 'vendorbillingWebsiteForINDIA'},
        {name: 'vendorbillingCountyForINDIA'},
        {name: 'vendorbillingCityForINDIA'},
        {name:'mapSalesPersonName'},
        {name:'salesPerson'},
        {name:'agent'},
        {name:'agentname'},
        {name:'isTaxRowLvlAndFromTaxGlobalLvl'},
        {name:'taxid'},
        {name:'includeprotax'},
        {name:'isFromPOS'},
        {name:'attachdoc'},
        {name:'attachment'},
        {name:'islinkedtransaction'},
        {name:'hasAccess',type:'boolean'},
        {name:'currencyCode'},
        {name: 'discount'},
        {name: 'getFullShippingAddress'},
        {name:'createdby'},
        {name:'challannumber'},
        {name:'formtypeid'},
        {name:'isInterstateParty',type:'boolean'},
        {name:'gstIncluded'},
        {name:'supplierinvoiceno'},//SDP-4510,
        {name:'isFreeGift',type:'boolean'},
        {name:'ispartialpackedshippeddo',type:'boolean'}, //Check if DO is partially packed/shipped for edit case
        {name:'isNonLatestFreeGiftDO'},
        {name:'taxname'},
        {name:'taxamount'},
        {name:'isjobworkoutrec'},
        {name:'upsTrackingNumbers'},//Tracking Numbers of shipments created with Pick-Pack-Ship process and UPS REST service
        {name:'subtotal'},
        {name:'productTotalAmount'},
        {name:'amountBeforeTax'},
        {name:'gtaapplicable'},
        {name:'ewayapplicable'},
        {name:'GSTINRegTypeDefaultMstrID'},
        {name:'CustVenTypeDefaultMstrID'},
        {name:'CustomerVendorTypeId'},
        {name:'GSTINRegistrationTypeId'},
        {name:'gstin'},
        {name:'gstdochistoryid'},
        {name: 'isMerchantExporter'},
        {name:'isdirectshipped'},
        {name:'isapplytaxtoterms'},
        {name:'personcode'},
        {name:'isFinalLevelApproval'},
        {name: 'isRoundingAdjustmentApplied'},
        {name:'billingAddrsCombo'},
        {name:'shippingAddrsCombo'},
        {name:'isdofromautocashsales'}
        
    ]);
    this.StoreUrl = "";
    if(this.businessPerson=="Customer"){
        this.StoreUrl = "ACCInvoiceCMN/getDeliveryOrdersMerged.do";
    } else {
        this.StoreUrl = "ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
    }

    if(config.consolidateFlag) {
        this.Store = new Wtf.data.GroupingStore({
            url:this.StoreUrl,
            remoteSort: true,
            //        url: Wtf.req.account+this.businessPerson+'Manager.jsp',
            baseParams:{
                //mode:this.isOrder?(this.isCustBill?52:42):(this.isCustBill?16:12),
                costCenterId: this.costCenterId,
                deleted:false,
                nondeleted:false,
                pendingapproval : this.pendingapproval,
                consolidateFlag:config.consolidateFlag,
                isFixedAsset:this.isFixedAsset,
                isLeaseFixedAsset:this.isLeaseFixedAsset,
                isConsignment:this.isConsignment,
                isJobWorkOutReciever:this.isJobWorkOutReciever,
                companyids:companyids,
                gcurrencyid:gcurrencyid,
                isfavourite:false,
                userid:loginid
            //            cashonly:false,
            //            creditonly:false
            },
            sortInfo : {
                field : 'companyname',
                direction : 'ASC'
            },
            groupField : 'companyname',
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:'count'
            },this.GridRec)
        });
    } else {
        this.Store = new Wtf.data.Store({
            url:this.StoreUrl,
            //        url: Wtf.req.account+this.businessPerson+'Manager.jsp',
            remoteSort: true,
            baseParams:{
                //mode:this.isOrder?(this.isCustBill?52:42):(this.isCustBill?16:12),
                costCenterId: this.costCenterId,
                deleted:false,
                nondeleted:false,
                pendingapproval : this.pendingapproval,
                consolidateFlag:config.consolidateFlag,
                isFixedAsset:this.isFixedAsset,
                isJobWorkOutReciever:this.isJobWorkOutReciever,
                isJobWorkOutGRO:this.isJobWorkOutGRO,
                isLeaseFixedAsset:this.isLeaseFixedAsset,
                isConsignment:this.isConsignment,
                companyids:companyids,
                isfavourite:false,
                gcurrencyid:gcurrencyid,
                userid:loginid
            //            cashonly:false,
            //            creditonly:false
            },
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:'count'
            },this.GridRec)
        });
    }

    if(this.extraFilters != undefined){//Cost Center Report View
        var currentBaseParams = this.Store.baseParams;
        currentBaseParams.startdate = this.extraFilters.startdate;
        currentBaseParams.enddate = this.extraFilters.enddate;
        
        this.Store.baseParams=currentBaseParams;
    }

    this.costCenter=CommonERPComponent.createCostCenterPagingComboBox(150,250,30,this);
    this.costCenter.on("select", function(cmb, rec, ind){
        this.costCenterId = rec.data.id;
        var currentBaseParams = this.Store.baseParams;
        currentBaseParams.costCenterId = this.costCenterId;
        this.Store.baseParams=currentBaseParams;
    },this);
    
    this.costCenter.store.on("load", function() {
        if(this.costCenter.getRawValue() == "" || this.costCenter.getRawValue() == undefined ||this.costCenter.getRawValue() == null){
            var record = new Wtf.data.Record({
                id: "",
                name: "All Records"
            });
            this.costCenter.store.insert(0, record);
        }
    }, this);

    this.costCenter.store.on("beforeload", function() {
        var currentBaseParams = this.costCenter.store.baseParams;
        currentBaseParams.isForReport =true;
        this.costCenter.store.baseParams=currentBaseParams;
    }, this);
    
    var sdateSavedSearch;
    var edateSavedSearch;
    if(config.searchJson != undefined && config.searchJson != ""){
        sdateSavedSearch = JSON.parse(config.searchJson).data[0].sdate;
        edateSavedSearch = JSON.parse(config.searchJson).data[0].edate;
    }
    
    this.startDate=new Wtf.ExDateFieldQtip({
        fieldLabel:WtfGlobal.getLocaleText("acc.common.from"),  //'From',
        name:'stdate' + this.id,
        format:WtfGlobal.getOnlyDateFormat(),
        value:WtfGlobal.getDates(true, sdateSavedSearch)
    });
    
    this.endDate=new Wtf.ExDateFieldQtip({
        fieldLabel:WtfGlobal.getLocaleText("acc.common.to"),  //'To',
        format:WtfGlobal.getOnlyDateFormat(),
        name:'enddate' + this.id,
        value:WtfGlobal.getDates(false, edateSavedSearch)
    });
    var productBaseParams={
        mode: 22,
            termSalesOrPurchaseCheck:this.isCustomer,
            onlyProduct:true,
            isFixedAsset:this.isFixedAsset,
            includeBothFixedAssetAndProductFlag:this.isLeaseFixedAsset
    };

this.productname =CommonERPComponent.createProductPagingComboBox(100,150,Wtf.ProductCombopageSize,this,productBaseParams,false);   
 
 this.productname.store.on("load", function() {
    if(this.productname.getRawValue() == "" || this.productname.getRawValue() == undefined ||this.productname.getRawValue() == null){
    
        var record = new Wtf.data.Record({
            productid: "",
            productname: "All Records"
        });
        this.productname.store.insert(0, record);    
    }
    }, this);
    
    this.productCategory =CommonERPComponent.createProductCategoryPagingComboBox(100,250,30,this);
    this.productCategory.store.on("load", function() {
        if(this.productCategory.getRawValue() == "" || this.productCategory.getRawValue() == undefined ||this.productCategory.getRawValue() == null){
        var record = new Wtf.data.Record({
            id: "",
            name: "All Records"
        });
            this.productCategory.store.insert(0, record);
        }
    }, this);
    
    this.custVendCategory =CommonERPComponent.createCustomerVendorCategoryPagingCombobox(80,250,30,this,false);//false for invoicelist
    this.custVendCategory.store.on("load", function() {
         if(this.custVendCategory.getRawValue() == "" || this.custVendCategory.getRawValue() == undefined ||this.custVendCategory.getRawValue() == null){
        var record = new Wtf.data.Record({
            id: "All",
            name: "All Records"
        });
            this.custVendCategory.store.insert(0, record);
        }
    }, this);
    
    this.custVendCategory.on("select", function(cmb, rec, ind) {
        this.person="";
        this.filtercustid = rec.data.id;
        var currentBaseParams = this.Store.baseParams;
        currentBaseParams.customerCategoryid = this.filtercustid;
        this.Store.baseParams = currentBaseParams;
    }, this);
    
    this.personRec = new Wtf.data.Record.create([
    {
        name: 'accid'
    }, {
        name: 'accname'
    }, {
        name: 'acccode'
    }, 
    ]);

    if(this.isCustomer){
        this.custmerCmb =CommonERPComponent.createCustomerPagingComboBox(80,Wtf.account.companyAccountPref.accountsWithCode?350:240,Wtf.CustomerCombopageSize,this);
    }else{
        this.custmerCmb =CommonERPComponent.createVendorPagingComboBox(100,Wtf.account.companyAccountPref.accountsWithCode?350:240,Wtf.VendorCombopageSize,this);
    }

    this.custmerCmb.store.on("load", function() {
        if(this.custmerCmb.getRawValue() == "" || this.custmerCmb.getRawValue() == undefined ||this.custmerCmb.getRawValue() == null){
        var record = new Wtf.data.Record({
            accid: "",
            accname: "All Records",
            acccode:""
        });
            this.custmerCmb.store.insert(0, record);
        }
        if (this.person != "" && this.person != undefined)
            this.custmerCmb.setValue(this.person);
    }, this);

    this.custmerCmb.on("select", function(cmb, rec, ind) {
        this.person = "";
        this.filtercustid = rec.data.accid;
        var currentBaseParams = this.Store.baseParams;
        currentBaseParams.newcustomerid = this.filtercustid;
        this.Store.baseParams = currentBaseParams;
    }, this);
    
    this.submitBttn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.common.fetch"),
        tooltip :WtfGlobal.getLocaleText("acc.invReport.fetchTT"),  
        id: 'submitRec' + this.id,
        scope: this,
        iconCls:'accountingbase fetch',
        disabled :false
    });
    this.expandCollpseButton = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.field.Expand"),
        tooltip: WtfGlobal.getLocaleText("acc.field.Expand/CollapseRecords"),
        iconCls: 'pwnd toggleButtonIcon',
        hidden:(this.moduleid == Wtf.Acc_Delivery_Order_ModuleId || this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId)?false:(this.moduleid == Wtf.Acc_FixedAssets_DeliveryOrder_ModuleId || this.moduleid == Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId)?false:true,
        scope: this,
        handler: function() {
            if (this.expandCollpseButton.getText() == WtfGlobal.getLocaleText("acc.field.Expand")) {
                this.expandButtonClicked = true;
            }
            expandCollapseGrid(this.expandCollpseButton.getText(), this.expandStore, this.grid.plugins, this);
        }
    });
    
    this.approvalHistoryBtn = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.field.ApprovalHistory"),
        scope: this,
        disabled : true,
        tooltip: WtfGlobal.getLocaleText("acc.field.ViewApprovalHistory"),
        handler: this.viewApprovalHistory,
        iconCls: "advanceSearchButton"
    });
    
    this.bulkInv = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.common.bulkInvoices"),
        tooltip: WtfGlobal.getLocaleText("acc.common.bulkInvoices"),
        id: 'bulkInv' + this.id,
        hidden: !(Wtf.account.companyAccountPref.showBulkInvoices && !WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createinvoice) && this.moduleid==Wtf.Acc_Delivery_Order_ModuleId)||this.isCustomWidgetReport,
        scope: this,
        iconCls: getButtonIconCls(Wtf.etype.add),
        handler: function() {
            var panel = null;
            //            panel = (this.businessPerson == "Customer") ? Wtf.getCmp("DeliveryOrderListPending") : Wtf.getCmp("GoodsReceiptOrderListPending");

            Wtf.Ajax.requestEx({
                url: "ACCCompanyPref/getSequenceFormatStore.do",
                params: {
                    mode: "autoinvoice"
                }
            }, this, function(response) {
                if (response.data && response.data.length > 0) {
                    if (response.data[0].id == "NA") {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.common.setSeqNoInvoice")], 2);
                        return;
                    }
                    if (panel == null) {
                        panel = callBulkInvoicesList(this.moduleid,this.Store,false,true);
                    }
                    Wtf.getCmp('as').setActiveTab(panel);
                    Wtf.getCmp('as').doLayout();

                }

            }, function(response) {
                });
        }
    //disabled :false
    });
    
    this.submitBttn.on("click", this.submitHandler, this);
    
    this.closeDelOrderBttn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.field.delOrderBtnLbl"),
        tooltip :WtfGlobal.getLocaleText("acc.field.delOrderBtnTip"),  
        id: 'closeorder' + this.id,
        scope: this,
        iconCls:'accountingbase fetch',
        disabled :true,
        hidden:!Wtf.account.companyAccountPref.closedStatusforDo || !(this.moduleid==Wtf.Acc_ConsignmentDeliveryOrder_ModuleId),
        handler:this.closeDeliveryOrder
    });
    
    this.chartButton = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.common.chart"),
        iconCls: "accountingbase chart",
        scope: this,
        hidden: this.isCustomWidgetReport,
        menu: [
            {
                xtype: "button",
                text: WtfGlobal.getLocaleText("acc.common.PieChart"),
                iconCls: "x-tool-piechartwizard",
                scope: this,
                handler: function () {
                    var params = {}
                    params.chartType = Wtf.chartType.pie;
                    this.showChart(params);
                }
            }
        ]
    })
    
    this.tbar2 = new Array();
    this.tbar3 = new Array();
    this.tbar2.push(WtfGlobal.getLocaleText("acc.common.from"));
    this.tbar2.push(this.startDate);
    this.tbar2.push(WtfGlobal.getLocaleText("acc.common.to"));
    this.tbar2.push(this.endDate);
    if(!this.isCustomWidgetReport){
        this.tbar2.push("-", WtfGlobal.getLocaleText("acc.common.costCenter"), this.costCenter);
        this.tbar2.push("-", WtfGlobal.getLocaleText("acc.invReport.prod"), this.productname);
        this.tbar2.push("-", WtfGlobal.getLocaleText("acc.masterConfig.19"),this.productCategory);
    }
    var label = this.isCustomer ? WtfGlobal.getLocaleText("acc.masterConfig.7") : WtfGlobal.getLocaleText("acc.masterConfig.8") ;
    this.tbar3.push(this.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.cust"):WtfGlobal.getLocaleText("acc.invoiceList.ven"), this.custmerCmb);
    this.tbar3.push("-");
    this.tbar3.push(label,this.custVendCategory);
    this.tbar2.push("-");
    this.tbar2.push(this.submitBttn);
    this.tbar2.push("-", this.expandCollpseButton);
    if(!this.isUnInvoiceDOReport) {
        this.tbar2.push("-", this.approvalHistoryBtn);
    }
    if(!this.pendingapproval && this.isOrder){
        this.tbar2.push("-");
        this.tbar2.push(this.bulkInv);
    }
    if(this.isUnInvoiceDOReport) {
        this.tbar2.push("-", this.chartButton)
    }
    
    
    
    var dataArr = new Array();
    dataArr.push([0,WtfGlobal.getLocaleText("acc.rem.105")],[1,WtfGlobal.getLocaleText("acc.field.FavouriteRecords")], [2, WtfGlobal.getLocaleText("acc.field.UnInvoicedRecords")],[3, WtfGlobal.getLocaleText("acc.field.POSrecords")],[4, WtfGlobal.getLocaleText("acc.field.JobWorkOrderRecords")]);
    this.typeStore = new Wtf.data.SimpleStore({
        fields: [{name:'typeid',type:'int'}, 'name'],
        data :dataArr
    });
    
    this.typeEditor = new Wtf.form.ComboBox({
        store: this.typeStore,
        name:'typeid',
        displayField:'name',
        id:'view'+config.helpmodeid,
        valueField:'typeid',
        mode: 'local',
        defaultValue:0,
        width:160,
        listWidth:160,
        triggerAction: 'all',
        typeAhead:true,
        selectOnFocus:true
    });
    
    this.tbar3.push("->");
    if(!(this.isFixedAsset || this.isLeaseFixedAsset || this.isConsignment || this.pendingapproval || this.isUnInvoiceDOReport)){
        this.tbar3.push("&nbsp;View", this.typeEditor);
    }
    
    this.emptyTextCons=WtfGlobal.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:    callConsignmentDeliveryOrder(false,null,null, false,false,true);'>"+" "+WtfGlobal.getLocaleText("acc.rem.147")+" "+this.label+" "+WtfGlobal.getLocaleText("acc.rem.148")+"</a>");
    if(this.isFixedAsset)
    {
       this.emptyTextCons= WtfGlobal.emptyGridRenderer(WtfGlobal.getLocaleText("acc.common.norec")+" "+"<br>" +" "+WtfGlobal.getLocaleText('acc.common.norec.click.fetchbtn'))
    }else if(this.isLeaseFixedAsset){
        this.emptyTextCons= WtfGlobal.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript: callFixedAssetDeliveryOrder(false,null,null,false,true)'>"+" "+WtfGlobal.getLocaleText("acc.rem.147")+" "+this.label+" "+WtfGlobal.getLocaleText("acc.rem.148")+"</a>")
    }else if(this.isConsignment){
        if(this.isCustomer){
            this.emptyTextCons=WtfGlobal.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:    callConsignmentDeliveryOrder(false,null,null, false,false,true);'>"+" "+WtfGlobal.getLocaleText("acc.rem.147")+" "+this.label+" "+WtfGlobal.getLocaleText("acc.rem.148")+"</a>");
        }else{
            this.emptyTextCons= WtfGlobal.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:  callConsignmentGoodsReceiptOrder(false,null,null, false,false,true);'>"+" "+WtfGlobal.getLocaleText("acc.rem.147")+" "+this.label+" "+WtfGlobal.getLocaleText("acc.rem.148")+"</a>")
        }
    }else {
        if(this.isCustomer){
            this.emptyTextCons= WtfGlobal.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:callDeliveryOrder(false, null)'>"+" "+WtfGlobal.getLocaleText("acc.rem.147")+" "+this.label+" "+WtfGlobal.getLocaleText("acc.rem.148")+"</a>")
        }else{
            this.emptyTextCons= WtfGlobal.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:callGoodsReceiptDelivery(false,null,null)'>"+" "+WtfGlobal.getLocaleText("acc.rem.147")+" "+this.label+" "+WtfGlobal.getLocaleText("acc.rem.148")+"</a>")
        }
    }
    //    if(config.extraFilters == undefined){//Cost Center Report View - Don't show 'cost center' filter
    //        if(!config.isOrder&&!this.isQuotation){// For invoice & Vendor Invoice show 'cost center' and 'view' filters in 2nd tbar applied for grid
    //            this.tbar2 = new Array();
    //            this.tbar2.push(WtfGlobal.getLocaleText("acc.common.costCenter"), this.costCenter);
    ////            this.tbar2.push("&nbsp;View", this.typeEditor);
    //        }
    //    }
    //    this.emptytext1=WtfGlobal.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript: openInvTab("+config.isCustomer+","+config.isOrder+","+config.isCustBill+","+config.isQuotation+")'>"+" "+WtfGlobal.getLocaleText("acc.rem.147")+" "+this.label+" "+WtfGlobal.getLocaleText("acc.rem.148")+"</a>")    ;
    //    this.emptytext2=WtfGlobal.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript: openCashTransTab("+config.isCustomer+","+config.isCustBill+")'>"+WtfGlobal.getLocaleText("acc.rem.147")+" "+cashType+" "+WtfGlobal.getLocaleText("acc.rem.148")+" </a>")    ;
    //    this.emptytext3=WtfGlobal.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript: openQuotationTab()'>"+WtfGlobal.getLocaleText("acc.rem.147")+" "+WtfGlobal.getLocaleText("acc.accPref.autoQN")+" "+WtfGlobal.getLocaleText("acc.rem.148")+"</a>")    ;
    //    this.deletedRecordsEmptyTxt = WtfGlobal.emptyGridRenderer(WtfGlobal.getLocaleText("acc.common.norec"));
    
    this.expander = new Wtf.grid.RowExpander({});
    this.sm = new Wtf.grid.CheckboxSelectionModel({
        singleSelect : false
    });
    this.gridView1 = (config.consolidateFlag||this.isSalesCommissionStmt)?new Wtf.grid.GroupingView({
        forceFit:false,
        showGroupName: true,
        enableNoGroups:false, // REQUIRED!
        hideGroupedColumn: true,
        emptyText:WtfGlobal.emptyGridRenderer(WtfGlobal.getLocaleText("acc.common.norec"))
    }):{
        forceFit:false,
        emptyText: this.emptyTextCons 
    };
        
    this.gridColumnModelArr=[];
    this.gridColumnModelArr.push(this.sm,this.expander,{
        id: 'favoritePrinted',
        header: '',
        //            dataIndex:'isfavourite',
        //            hidden:(this.isSalesCommissionStmt || this.pendingapproval)?true:false,
        width:60,
        renderer : function(val, meta, record, rowIndex){                
            var value = "";
            if(record.data.isfavourite){
                value = '<img id="starValiFlag" class="favourite" style="cursor:pointer" wtf:qtip="'+WtfGlobal.getLocaleText('acc.invoiceList.favourite')+'" src="../../images/star-valid.png">';
            }else{
                value = '<img id="starInvalidFlag" class="favourite" style="cursor:pointer" wtf:qtip="'+WtfGlobal.getLocaleText('acc.invoiceList.notfavourite')+'" src="../../images/star-invalid.png">';
            }
            if(record.data.isprinted){
                value += '<img id="starValiFlag" style="margin-left: 3px;cursor:pointer" wtf:qtip="'+WtfGlobal.getLocaleText('acc.invoiceList.printed')+'" src="../../images/printed.gif">';
            }else{
                value += '<img id="starInvalidFlag" style="margin-left: 3px;cursor:pointer" wtf:qtip="'+WtfGlobal.getLocaleText('acc.invoiceList.notprinted')+'" src="../../images/not-printed.gif">';
            }
            return value;          
        }
    },
    {
        hidden:true,
        header: "",
        dataIndex:'billid',
        hideable:false    //ERP-5269[SJ] 
    },{
        header: WtfGlobal.getLocaleText("acc.field.Company"),  
        dataIndex:'companyname',
        width:20,
        pdfwidth:150,
        //            sortable:true,
        hidden:true
    },{
        header:this.label+" "+WtfGlobal.getLocaleText("acc.cn.9"),
        dataIndex:'billno',
        width:150,
        pdfwidth:75,
        sortable:true,
        //renderer:(config.isQuotation||config.isOrder)?"":WtfGlobal.linkDeletedRenderer
        renderer:WtfGlobal.linkDeletedRenderer
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.jeno"),  //"Journal Entry No",
        dataIndex:'entryno',
        hidden:this.isOrder||this.isQuotation,
        width:150,
        pdfwidth:75,
        renderer:WtfGlobal.linkDeletedRenderer
        });
        
    if (Wtf.account.companyAccountPref.activateMRPManagementFlag || Wtf.account.companyAccountPref.inventoryValuationType == "1") {
        this.gridColumnModelArr.push({
            header: WtfGlobal.getLocaleText("acc.field.inventory.je.number"), 
            dataIndex: 'inventoryentryno',
            width: 150,
            pdfwidth: 75,
            sortable: true,
            renderer: WtfGlobal.linkDeletedRenderer
        });
    }
    
    this.gridColumnModelArr.push({
        header:this.label+" "+WtfGlobal.getLocaleText("acc.inventoryList.date"),
        dataIndex:'date',
        align:'center',
        width:150,
        pdfwidth:80,
        sortable:true,
        renderer:WtfGlobal.onlyDateDeletedRenderer
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.shipdate"),
        dataIndex:'shipdate',
        renderer:WtfGlobal.onlyDateDeletedRenderer,
        hidden:true
    },{
        header:(config.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.cust"):WtfGlobal.getLocaleText("acc.invoiceList.ven")),  //this.businessPerson,
        width:150,
        pdfwidth:75,
        renderer:WtfGlobal.deletedRenderer,
        sortable:true,
        dataIndex:'personname'
    },{
        header:(config.isCustomer?WtfGlobal.getLocaleText("acc.cust.aliasname"):WtfGlobal.getLocaleText("acc.ven.aliasname")),
        width:150,
        pdfwidth:75,
        renderer:WtfGlobal.deletedRenderer,
        dataIndex:'aliasname',
        sortable:true
    },{
        header:WtfGlobal.getLocaleText("acc.common.currencyFilterLable"),
        dataIndex:'currencyCode',
        hidden:true,
        pdfwidth:85
    },{
        header:WtfGlobal.getLocaleText("acc.invoice.CustomerPOrefNo"),  // "Customer PO Ref. No.",    
        pdfwidth:75,
        width:150,
        dataIndex:'customerporefno',
        hidden: !(this.moduleid == Wtf.Acc_Delivery_Order_ModuleId)
    },{
        header: WtfGlobal.getLocaleText("acc.invoice.SupplierInvoiceNo"), //Supplier Invoice No (SDP-4510)
        dataIndex: 'supplierinvoiceno',
        width: 150,
        pdfwidth: 80,
        hidden: !(this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId)
    }, {
        header:WtfGlobal.getLocaleText("acc.invoiceList.discount"),  //"Discount",
        dataIndex:'discount',
        align:'right',
        width:150,
        pdfwidth:75,
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this)
    },{
        header:WtfGlobal.getLocaleText("acc.invoicelist.OtherChargesAmt"),  //"Other Charges Amount",
        dataIndex:'OtherTermNonTaxableAmount',
        align:'right',
        width:150,
        pdfwidth:75,
        hideable: Wtf.account.companyAccountPref.isLineLevelTermFlag,//To also hide it in sortable list
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this),
        hidden: !Wtf.account.companyAccountPref.isLineLevelTermFlag//Hidden if LineLevelTerms are not apllicable.
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.taxName"),  //"Tax Name",
        dataIndex:'taxname',
        width:150,
        pdfwidth:75,
        renderer:WtfGlobal.deletedRenderer,
        hidden:this.isOrder || !(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInSR:Wtf.account.companyAccountPref.unitPriceInPR) 
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.taxAmt"),  //"Tax Amount",
        dataIndex:'taxamount',
        align:'right',
        width:150,
        pdfwidth:75,
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this),
        hidden:this.isOrder || !(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInSR:Wtf.account.companyAccountPref.unitPriceInPR) 
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.terms"),  //"Terms Amount"
        dataIndex:'termamount',
        align:'right',
        width:150,
        pdfwidth:75,
        pdfrenderer: 'rowcurrency',
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this),
        hidden:this.isSalesCommissionStmt|| this.isRequisition|| this.isRFQ
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.totAmt"),  // "Total Amount",
        align:'right',
        dataIndex:'amount',
        width:150,
        pdfwidth:75,
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this),
        hidden:this.isOrder || !(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInSR:Wtf.account.companyAccountPref.unitPriceInPR)
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.totAmtHome") + " ("+WtfGlobal.getCurrencyName()+")",  //"Total Amount (In Home Currency)",
        align:'right',
        dataIndex:'amountinbase',
        width:150,
        pdfwidth:75,
        hidecurrency : true,
        renderer:this.currencyDeletedRendererWithPermissionCheck.createDelegate(this),
        hidden:this.isOrder || !(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInSR:Wtf.account.companyAccountPref.unitPriceInPR)  //hiden column 
    },{
        header:WtfGlobal.getLocaleText("acc.field.PermitNumber"),  
        width:150,
        pdfwidth:75,
        hidden:this.isCustomer,
        renderer:WtfGlobal.deletedRenderer,
        dataIndex:'permitNumber'
    },{
        header:Wtf.account.companyAccountPref.descriptionType,  //"Memo",
        dataIndex:'memo',
        width:150,
        renderer: function (value, metaData, record) {
            return "<span wtf:qtip='" + value + "'>" + value + "</span>";
        },
        pdfwidth:100
    },{
        header:this.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.salesPerson"):WtfGlobal.getLocaleText("acc.field.AgentSalesman"),  //"Sales Person" or Agent,
        dataIndex:this.isCustomer?'mapSalesPersonName':'agentname',
        width:150,
        hidden:!this.isOrder || this.isQuotation ||this.isConsignment ,
        renderer:WtfGlobal.deletedRenderer,
        sortable:true,
        pdfwidth:100
    },
    {
        header:WtfGlobal.getLocaleText("acc.nee.69"),
        dataIndex:'createdby',
        width:150,
        pdfwidth:75
    },
    {
        header:WtfGlobal.getLocaleText("acc.invoiceList.status"),  //"Status",
        dataIndex:'status',
        width:150,
        hidden:!this.isOrder || this.isQuotation,
        renderer:WtfGlobal.deletedRenderer,
        pdfwidth:100
    }
    ,{
        header:WtfGlobal.getLocaleText("acc.field.RequestType"),
        width:150,
        pdfwidth:75,
        renderer:WtfGlobal.deletedRenderer,
        dataIndex:'movementtypename',
        hidden:!this.isConsignment || !this.isMovementWarehouseMapping || !this.isCustomer
    },{
        header:WtfGlobal.getLocaleText("acc.field.Approval") +WtfGlobal.getLocaleText("acc.invoiceList.status"),  //"Status",
        dataIndex:'approvalstatusinfo',
        width:150,
        hidden:this.isConsignment,
        pdfwidth:100
    });
    if(!this.isConsignment) {
        this.gridColumnModelArr.push({
            header:WtfGlobal.getLocaleText("acc.agedPay.gridIno"), //"Invoice Number",
            dataIndex:this.isLeaseFixedAsset?'invoicenumber':'invoiceno',
            hidden:this.isConsignment,
            width:150,
            pdfwidth:100
        });
    }
    this.gridColumnModelArr.push({
        header:WtfGlobal.getLocaleText("acc.invoiceList.attachDocuments"),  //"Attach Documents",
        dataIndex:'attachdoc',
        width:150,
        align:'center',
        renderer : function(val) {
            return "<div style='height:16px;width:16px;'><div class='pwndbar1 uploadDoc' style='cursor:pointer' wtf:qtitle='"
            + WtfGlobal
            .getLocaleText("acc.invoiceList.attachDocuments")
            + "' wtf:qtip='"
            + WtfGlobal
            .getLocaleText("acc.invoiceList.clickToAttachDocuments")
            +"'>&nbsp;</div></div>";
        }
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.attachments"),  //"Attachments",
        dataIndex:'attachment',
        width:150,
        renderer : Wtf.DownloadLink.createDelegate(this)
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.producttotalamount"),  //Gross Total Amount
        dataIndex:'productTotalAmount',
        align:'right',
        width:150,
        pdfwidth:75,
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this)
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.amountbeforetax"),  //Amount before Tax
        dataIndex:'amountBeforeTax',
        align:'right',
        width:150,
        pdfwidth:75,
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this)
    },{
        header: WtfGlobal.getLocaleText("acc.invoiceList.subtotal"), //Sub-total
        dataIndex: 'subtotal',
        align: 'right',
        width: 150,
        pdfwidth: 75,
        renderer: this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this)
    });
    if(Wtf.account.companyAccountPref.upsIntegration && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) { //Addition of column 'Shipment Tracking Number(s)' when UPS REST Integration is enabled
        this.gridColumnModelArr.push({
            header:WtfGlobal.getLocaleText("acc.invoiceList.upsTrackingNumbers"),  //"Shipment Tracking Number", Added only if UPS Integration is activated
            dataIndex:'upsTrackingNumbers',
            align: 'left',
            width:200,
            renderer: function (value, metaData, record) {
                return "<span wtf:qtip='" + value + "'>" + value + "</span>";
            },
            pdfwidth:100
        });
    }
    this.gridColumnModelArr.push({
        header: this.isCustomer ? WtfGlobal.getLocaleText("acc.common.customer.code") : WtfGlobal.getLocaleText("acc.common.vendor.code"), //"Customer Code",
        dataIndex: 'personcode',
        scope: this,
        pdfwidth: 80,
        align: 'left',
        width: 100    
    });
    // appening custom columns
    this.gridColumnModelArr = WtfGlobal.appendCustomColumn(this.gridColumnModelArr,GlobalColumnModelForReports[this.moduleid],true);
    
    this.grid = new Wtf.grid.GridPanel({
        stripeRows :true,
        store:this.Store,
        id:"gridmsg"+config.helpmodeid+config.id,
        border:false,
        sm:this.sm,
        tbar: this.tbar2,
        disabled:this.readOnly,
        disabledClass:"newtripcmbss",
        layout:'fit',
        loadMask:true,
        plugins: this.expander,
        viewConfig:this.gridView1,
        forceFit:true,
        cm:new Wtf.grid.ColumnModel(this.gridColumnModelArr)
    });
    
    this.grid.on("render",function(){
        this.grid.getView().applyEmptyText();
        new Wtf.util.DelayedTask().delay(Wtf.GridStateSaveDelayTimeout, function () {
            this.grid.on('statesave', this.saveMyStateHandler, this);
        }, this);
    },this);
        
    if(!this.isUnInvoiceDOReport){
        this.grid.on('render',
            function(){
            new Wtf.Toolbar({
                renderTo: this.grid.tbar,
                items:  this.tbar3
            });
        },this);
    }
    var colModelArray = GlobalColumnModelForReports[this.moduleid];
    WtfGlobal.updateStoreConfig(colModelArray,this.Store);
    //    this.Store.load();
    this.resetBttn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.common.reset"),  //'Reset',
        tooltip :WtfGlobal.getLocaleText("acc.common.resetTT"),  //'Allows you to add a new search term by clearing existing search terms.',
        id: 'btnRec' + this.id,
        scope: this,
        hidden:this.isCustomWidgetReport,
        iconCls :getButtonIconCls(Wtf.etype.resetbutton),
        disabled :false
    });
    this.resetBttn.on('click',this.handleResetClick,this);
    this.newTabButton=getCreateNewButton(config.consolidateFlag,this,(this.businessPerson=="Customer") ?WtfGlobal.getLocaleText("acc.field.CreateDeliveryOrder"):WtfGlobal.getLocaleText("acc.field.CreateGoodsReceipt"),this.reportbtnshwFlag);
    this.newTabButton.on('click',this.openNewTab,this); 
    
    this.statUpBttn=new Wtf.Toolbar.Button({
        text: (this.businessPerson=="Customer") ? WtfGlobal.getLocaleText("acc.field.UpdateDeliveryStatus") : WtfGlobal.getLocaleText("acc.field.UpdateReceiptStatus"),  //'Reset',
        tooltip :WtfGlobal.getLocaleText("acc.field.UpdateStatusofselectedrecord"),
        id: 'statUpBttn' + this.id,
        scope: this,
        hidden: config.consolidateFlag || this.pendingapproval || this.reportbtnshwFlag || Wtf.account.companyAccountPref.pickpackship,
        iconCls :"pwnd updateStatus",
        disabled :true
    });
    
    this.statUpBttn.on('click',this.handleStatusUpdate,this);
    
    this.pickAndPack=new Wtf.Toolbar.Button({
        text:  WtfGlobal.getLocaleText("erp.do.pickandpack") ,  //'Pick And Pack',
        tooltip :WtfGlobal.getLocaleText("erp.do.pleasepickdosandclicktopack"), //Please Pick the DO's And click here to Pack
        id: 'pickAndPack' + this.id,
        scope: this,
        hidden:this.moduleid!=Wtf.Acc_Delivery_Order_ModuleId || !Wtf.account.companyAccountPref.packingdolist,
        disabled :true,
        iconCls :getButtonIconCls(Wtf.etype.add)
    });  
    this.pickAndPack.on('click',this.handlePickAndPack,this);
    
    this.Pack=new Wtf.Toolbar.Button({
        text:  'Pack' ,  //'Pick And Pack',
        tooltip :'Pack', //Please Pick the DO's And click here to Pack
        id: 'Pack' + this.id,
        scope: this,
        hidden:this.moduleid!=Wtf.Acc_Delivery_Order_ModuleId || !Wtf.account.companyAccountPref.pickpackship,
        disabled :true,
        iconCls :getButtonIconCls(Wtf.etype.add)
    }); 
    
    this.Pack.on('click',this.handlePack,this);
    
    this.Ship=new Wtf.Toolbar.Button({
        text:  'Ship' ,  //'Pick And Pack',
        tooltip :'Ship', //Please Pick the DO's And click here to Pack
        id: 'Ship' + this.id,
        scope: this,
        hidden:this.moduleid!=Wtf.Acc_Delivery_Order_ModuleId || !Wtf.account.companyAccountPref.pickpackship,
        disabled :true,
        iconCls :getButtonIconCls(Wtf.etype.add)
    }); 
    
    this.Ship.on('click',this.handleShip,this);
    
    var btnArr=[];
    var bottombtnArr=[];
    var tranType= (this.businessPerson=="Customer") ?Wtf.autoNum.DeliveryOrder : Wtf.autoNum.GoodsReceiptOrder;
    
    var singlePDFtext = WtfGlobal.getLocaleText("acc.accPref.autoDO");
    
    if(!(this.isFixedAsset || this.isLeaseFixedAsset || this.isConsignment ) && !this.isUnInvoiceDOReport){
        btnArr.push(this.newTabButton);
    }

        //if(config.extraFilters == undefined){//Cost Center Report View - Don't show Buttons
    if((!WtfGlobal.EnableDisable(this.uPermType, this.editPermType) && Wtf.account.companyAccountPref.editTransaction)&& !this.isUnInvoiceDOReport) {				//!this.isOrder&&
        var toolTipMsg=this.getEditButtonToolTipMsg(this.moduleid);
        btnArr.push(this.editBttn=new Wtf.Toolbar.Button({
            text:WtfGlobal.getLocaleText("acc.common.edit"),  //'Edit',
            tooltip :toolTipMsg,
            id: 'btnEdit' + this.id,
            scope: this,
            hidden:this.isQuotation || config.consolidateFlag || this.reportbtnshwFlag,//Showing Edit button in pending tab of DO/GR
            iconCls :getButtonIconCls(Wtf.etype.edit),
            disabled :true
            }));
        this.editBttn.on('click',this.editTransactionCheckBefore,this);
            //        this.editBttn.on('click',this.editTransaction.createDelegate(this,[false]),this);
        }
    if(!WtfGlobal.EnableDisable(this.uPermType,this.copyPermType)&& !this.isUnInvoiceDOReport){
        btnArr.push(this.copyInvBttn=new Wtf.Toolbar.Button({
            text:WtfGlobal.getLocaleText("acc.common.copy"),
            tooltip : WtfGlobal.getLocaleText("acc.field.Copytoselectedrecord"),
            id: 'btnCopy' + this.id,
            scope: this,
            hidden:this.reportbtnshwFlag || this.pendingapproval || this.isFixedAsset || this.isLeaseFixedAsset || this.isConsignment,
            //            hidden:this.isOrder,//this.isCustBill||
            iconCls :getButtonIconCls(Wtf.etype.copy),
            disabled :true
        }));
        this.copyInvBttn.on('click',this.copyTransaction.createDelegate(this,[true]),this);
    }
    var deletebtnArray=[];
    if(!WtfGlobal.EnableDisable(this.uPermType, this.removePermType) && Wtf.account.companyAccountPref.deleteTransaction && !this.pendingapproval && !this.isUnInvoiceDOReport && !(Wtf.account.companyAccountPref.pickpackship &&this.moduleid == Wtf.Acc_Delivery_Order_ModuleId)  && !this.isJobWorkOutGRO){
        deletebtnArray.push(this.deleteTrans=new Wtf.Action({
            text: WtfGlobal.getLocaleText("acc.rem.7")+' '+this.label,
            scope: this,
            hidden:config.consolidateFlag,
            //hidden:config.isOrder,
            tooltip:WtfGlobal.getLocaleText("acc.rem.6"),  //{text:"Select a "+this.label+" to delete.",dtext:"Select a "+this.label+" to delete.", etext:"Delete selected "+this.label+" details."},
            iconCls:getButtonIconCls(Wtf.etype.menudelete),
            disabled :true,
            handler:this.deleteTransactionCheckBefore.createDelegate(this,this.del=["del"])
        }))
    }
    if(!WtfGlobal.EnableDisable(this.uPermType, this.removePermType) && Wtf.account.companyAccountPref.deleteTransaction && !this.isUnInvoiceDOReport){
        deletebtnArray.push(this.deleteTransPerm=new Wtf.Action({
            text: WtfGlobal.getLocaleText("acc.rem.7")+' '+this.label+' '+WtfGlobal.getLocaleText("acc.field.Permanently"),
            scope: this,
            hidden:config.consolidateFlag ||this.reportbtnshwFlag,
            //hidden:config.isOrder,
            tooltip:WtfGlobal.getLocaleText("acc.rem.6")+' '+WtfGlobal.getLocaleText("acc.field.Permanently"),  //{text:"Select a "+this.label+" to delete.",dtext:"Select a "+this.label+" to delete.", etext:"Delete selected "+this.label+" details."},
            iconCls:getButtonIconCls(Wtf.etype.menudelete),
            disabled :true,
            handler:this.deleteTransactionCheckBefore.createDelegate(this,this.del=["delp"])
        }))
    }
    if(deletebtnArray.length>0 && !this.isUnInvoiceDOReport) {
        btnArr.push(this.deleteMenu = new Wtf.Toolbar.Button({
            text:WtfGlobal.getLocaleText("acc.setupWizard.gridDelete"), 
            scope: this,
            tooltip:WtfGlobal.getLocaleText("acc.field.allowsyoutodeletetherecord"), 
            iconCls:getButtonIconCls(Wtf.etype.deletebutton),
            hidden: this.reportbtnshwFlag, 
            menu:deletebtnArray
        }));
    }
    
    if (((!WtfGlobal.EnableDisable(this.uPermType, this.permType.unlinkgrdoc) && this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId) || (!WtfGlobal.EnableDisable(this.uPermType, this.permType.unlinkdodoc) && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId))&& !this.isUnInvoiceDOReport) {
        btnArr.push(this.unlinkDocumentBtn = new Wtf.Toolbar.Button({
            text: WtfGlobal.getLocaleText("acc.field.unlink"), // "Unlink",
            tooltip: WtfGlobal.getLocaleText("acc.field.unlink"), // "Unlink",
            id: 'unlinkDocument' + this.id,
            scope: this,
            hidden: this.pendingapproval || this.reportbtnshwFlag,
            iconCls: 'accountingbase pricelistbutton',
            disabled: true,
            handler: this.handleUnlinkDocument
        }));
    }
    
    if((!WtfGlobal.EnableDisable(this.uPermType, this.emailPermType)||this.isLeaseFixedAsset||this.isFixedAsset) && !this.isUnInvoiceDOReport){
        btnArr.push(this.email=new Wtf.Toolbar.Button({
            text:WtfGlobal.getLocaleText("acc.common.email"),  // "Email",
            tooltip : WtfGlobal.getLocaleText("acc.common.emailTT"),  //"Email",
            scope: this,
            iconCls : "accountingbase financialreport",
            hidden:this.reportbtnshwFlag,
            disabled : true,
            handler : this.sendMail
        }));
    }
    if(this.moduleid==Wtf.Acc_Delivery_Order_ModuleId && !this.isCustomWidgetReport){
        btnArr.push(this.statUpBttn,this.Pack,this.Ship);
    }

    if ((Wtf.account.companyAccountPref.deliveryPlanner && this.moduleid == Wtf.Acc_Delivery_Order_ModuleId)&& !this.isUnInvoiceDOReport) {
        btnArr.push(this.viewDeliveryPlannerBttn = new Wtf.Toolbar.Button({
            text: WtfGlobal.getLocaleText("acc.field.viewDeliveryPlanner"), // "View Delivery Planner",
            tooltip: WtfGlobal.getLocaleText("acc.field.viewDeliveryPlanner"),
            scope: this,
            iconCls: getButtonIconCls(Wtf.etype.reorderreport),
            disabled: true,
            handler: this.handleViewDeliveryPlanner
        }));
    }
  
    this.approveInvoiceBttn=new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.cc.24"),
        tooltip : WtfGlobal.getLocaleText("acc.field.ApprovependingRecord"), //Issue 31009 - [Pending Approval]Window name should be "Approve Pending Invoice" instead of "Approve Pending Approval". it should also have deskera logo
        id: 'approvepending' + this.id,
        scope: this,
        iconCls :this.isRequisition ? "accountingbase prapprove" : getButtonIconCls(Wtf.etype.add),
        disabled :true,
        hidden:this.isFixedAsset || this.isLeaseFixedAsset || this.isConsignment,
        handler : this.approvePendingDO
    });
    
    if(Wtf.account.companyAccountPref.activateGroupCompaniesFlag){
        btnArr.push(this.GROfromDOBttn=new Wtf.Toolbar.Button({
            text: WtfGlobal.getLocaleText("acc.invoiceList.ggrn"),         //Generate GRN
            tooltip :WtfGlobal.getLocaleText("acc.invoiceList.ggrntt"),  //Generate GRN for selected DO.
            scope: this,               
            iconCls :getButtonIconCls(Wtf.etype.edit),               
            disabled :false,
            hidden: this.moduleid==Wtf.Acc_Goods_Receipt_ModuleId?true:false,
            handler : this.createGRNfromDO               
        })); 
    }
    
    this.rejectInvoiceBttn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.field.Reject"),
        tooltip : WtfGlobal.getLocaleText("acc.field.Rejectpending"),
        id: 'rejectpending' + this.id,
        scope: this,
        hidden:this.isFixedAsset || this.isLeaseFixedAsset || this.isConsignment,
        iconCls:getButtonIconCls(Wtf.etype.deletebutton),
        disabled :true,
        handler : this.handleReject
    });
    
    if(!this.isUnInvoiceDOReport){
        btnArr.push(this.pendingApprovalBttn=new Wtf.Toolbar.Button({
            text:WtfGlobal.getLocaleText("acc.field.ViewPendingApprovals"),
            tooltip : WtfGlobal.getLocaleText("acc.field.ViewPendingApprovals"),
        id: 'pendingApprovals' + this.id,
        scope: this,
            hidden : this.isQuotation || config.consolidateFlag || this.reportbtnshwFlag || this.pendingapproval || this.isFixedAsset || this.isLeaseFixedAsset || this.isConsignment,
            iconCls :getButtonIconCls(Wtf.etype.reorderreport)
        }));
        if(this.pendingapproval) {
            btnArr.push(this.approveInvoiceBttn);
            btnArr.push(this.rejectInvoiceBttn);
        } 
        this.pendingApprovalBttn.on('click', function(){
            var panel = null;
            var params={};
            params.consolidateFlag=false;
            params.reportbtnshwFlag=false;
            params.pendingapproval=true;
            panel = (this.businessPerson=="Customer") ? Wtf.getCmp("DeliveryOrderListPending") : Wtf.getCmp("GoodsReceiptOrderListPending");
            if(panel==null) {
                panel = (this.businessPerson=="Customer") ? callDeliveryOrderList(params) : callGoodsReceiptOrderList(false, false, false, true);
            //            Wtf.getCmp('as').add(panel);
            }
            Wtf.getCmp('as').setActiveTab(panel);
            Wtf.getCmp('as').doLayout();
        
        }, this);
    }
    
    this.operationType = tranType;
    this.objsearchComponent = new Wtf.advancedSearchComponent({
        cm: this.grid.colModel,
        moduleid: this.moduleid,
        advSearch: false,
        customerCustomFieldFlag: this.showCustomerCustomFieldFlag(this.moduleid),
        vendorCustomFieldFlag: this.showVendorCustomField(this.moduleid)
    });
    this.objsearchComponent.advGrid.on("filterStore", this.filterStore, this);
    this.objsearchComponent.advGrid.on("clearStoreFilter", this.clearStoreFilter, this); 
    
    if(!this.isUnInvoiceDOReport){
        btnArr.push(this.closeDelOrderBttn);
    }
  
    //    if(this.operationType==Wtf.autoNum.Invoice || this.operationType==Wtf.autoNum.GoodsReceipt || this.operationType==Wtf.autoNum.BillingInvoice || this.operationType==Wtf.autoNum.BillingGoodsReceipt || this.operationType==Wtf.autoNum.Quotation) {
    //        var bText = "";
    //        var bToolTip = "";
    //        if(this.operationType==Wtf.autoNum.Invoice || this.operationType==Wtf.autoNum.BillingInvoice){
    //            bText = WtfGlobal.getLocaleText("acc.invoiceList.recPay");  //"Receive Payment";
    //            bToolTip = WtfGlobal.getLocaleText("acc.invoiceList.recPayTT");  //"Allows you to Receive Payment for invoice.";
    //        }else if(this.operationType==Wtf.autoNum.GoodsReceipt || this.operationType==Wtf.autoNum.BillingGoodsReceipt){
    //            bText = WtfGlobal.getLocaleText("acc.invoiceList.mP");  //"Make Payment";
    //            bToolTip = WtfGlobal.getLocaleText("acc.invoiceList.mPTT");  //"Allows you to Make Payment for vendor invoice.";
    //        }
    //     if(!this.isQuotation&&!this.isOrder&&!WtfGlobal.EnableDisable(this.uPaymentPermType, this.createPaymentPermType)){
    //            btnArr.push(this.paymentButton=new Wtf.Toolbar.Button({
    //                text: bText,
    //                tooltip : bToolTip,
    //                scope: this,
    //                iconCls : "accountingbase financialreport",
    //                disabled : true,
    //                handler : this.makePayment
    //            }));
    //        }
    //   if(!WtfGlobal.EnableDisable(this.uPermType, this.emailPermType)||this.isLeaseFixedAsset||this.isFixedAsset){
    //         btnArr.push(this.email=new Wtf.Toolbar.Button({
    //                text:WtfGlobal.getLocaleText("acc.common.email"),  // "Email",
    //                tooltip : WtfGlobal.getLocaleText("acc.common.emailTT"),  //"Email",
    //                scope: this,
    //                iconCls : "accountingbase financialreport",
    //                hidden:this.reportbtnshwFlag,
    //                disabled : true,
    //                handler : this.sendMail
    //        }));
    //    }
    this.AdvanceSearchBtn = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.editor.advanceSearchBTN"), //"Advanced Search",
        //        id: 'advanced3', // In use, Do not delete
        scope: this,
        hidden:(this.moduleid==undefined)?true:false||this.isCustomWidgetReport,        
        tooltip: WtfGlobal.getLocaleText("acc.editor.advanceSearchBTN.ttip"), //'Search for multiple terms in multiple fields.',
        handler: this.configurAdvancedSearch,
        iconCls: "advanceSearchButton"
    });
    btnArr.push(this.AdvanceSearchBtn);    
    //    }
    //     if(this.operationType==Wtf.autoNum.Invoice || this.operationType==Wtf.autoNum.BillingInvoice) {
    //        if(!WtfGlobal.EnableDisable(this.uPermType, this.recurringPermType)){
    //            btnArr.push(this.RepeateInvoice=new Wtf.Toolbar.Button({
    //                text:WtfGlobal.getLocaleText("acc.invoiceList.recInv"),  // "Recurring Invoice",
    //                tooltip :WtfGlobal.getLocaleText("acc.invoiceList.recInv"),  // "Recurring Invoice",
    //                scope: this,
    //                iconCls : getButtonIconCls(Wtf.etype.copy),
    //                disabled : true,
    //                handler : this.repeateInvoiceHandler
    //            }));
    //        }
    //    }
    //}

    /* Import Button Functionality*/
    if (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId || this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId) {
        var extraConfig = this.getImportExtraConfigForModule(this.moduleid);
        var extraParams = this.getImportExtraParamsForModule(this.moduleid);
        var importBtnArray = Wtf.documentImportMenuArray(this, this.getModuleNameForImport(this.moduleid), this.Store, extraParams, extraConfig);
        /**
         * Import Button for E-wat Fields (Eway bill no and Date)
         * ERP-39530
         */
        if (WtfGlobal.isIndiaCountryAndGSTApplied() && (this.moduleid !=undefined && this.moduleid !='' && Wtf.EwayUnitDimCustmFieldsActivatedModules.indexOf(parseInt(this.moduleid))> -1)) {
            importBtnArray.push(this.createImportEwayFiledsButton());
        }//
        var importButton = Wtf.documentImportMenuButtonA(importBtnArray, this, this.getModuleNameForImport(this.moduleid));
        if(!this.isCustomWidgetReport){
        bottombtnArr.push(importButton);
        }
    }
    
    if(!WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)){
        bottombtnArr.push(' ', 
            this.linkinfoViewBtn = new Wtf.Toolbar.Button({
                text: WtfGlobal.getLocaleText("acc.field.LinkInformationDetails"),     //button for showing link information
                scope: this,
                //                hidden: this.isRequisition || this.isRFQ || this.isQuotation||this.isSalesCommissionStmt || (this.moduleid == Wtf.Acc_FixedAssets_Purchase_Order_ModuleId),  //shown in SO/PO
                disabled : true,
                hidden:this.isCustomWidgetReport,
                tooltip: WtfGlobal.getLocaleText("acc.field.LinkInformationDetails"),
                iconCls:'accountingbase fetch',
                handler:function(){linkinfo(undefined,undefined,undefined,undefined,undefined,undefined,undefined,undefined,this)}
                
            }));
            

        bottombtnArr.push(' ',
            this.relatedTransactionsBtn = new Wtf.Toolbar.Button({
                text: WtfGlobal.getLocaleText("acc.field.RelatedTransaction(s)"), //button for showing all related linking with particular document
                scope: this,
                disabled: true,
                hidden:this.isCustomWidgetReport ||this.isFixedAsset,
                tooltip: WtfGlobal.getLocaleText("acc.field.RelatedTransaction(s).tooltip"),
                handler: function() {
                    linkPurchaseReportTab(this.isCustomer ? 1 : 0, this.moduleid, this.grid.getSelectionModel().getSelected().data.billno);
                },
                iconCls: 'accountingbase fetch'

            }));
    }
    
    if(!WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)){
        bottombtnArr.push('-', this.exportButton=new Wtf.exportButton({
            obj:this,
            filename: this.title+"_v1",
            id:config.pendingapproval ? "exportReports"+config.helpmodeid+config.id :"exportReports"+config.helpmodeid, //+config.id,
            text: WtfGlobal.getLocaleText("acc.common.exportList"),
            tooltip :WtfGlobal.getLocaleText("acc.common.exportTT"),  //'Export report details',
            disabled :true,
            hidden:this.isCustomWidgetReport,
            menuItem:{csv:true,pdf:true,print:true,detailedXls:(this.moduleid == Wtf.Acc_Delivery_Order_ModuleId || this.moduleid ==Wtf.Acc_Goods_Receipt_ModuleId)?true:false,xls:true},
            get:tranType,
            moduleId:config.moduleid
        }));
          
        this.exportButton.setParams({
            costCenterId : this.costCenter.getValue(),
            startdate : WtfGlobal.convertToGenericStartDate(this.startDate.getValue()),
            enddate : WtfGlobal.convertToGenericEndDate(this.endDate.getValue()),
            archieve : this.archieveCombo?this.archieveCombo.getValue() : 0,
            productid : this.productname.getValue(),
            productCategoryid : this.productCategory.getValue(),
            isHideRemarkColumn:this.isHideRemarkColumn
        });
    }
    if(!WtfGlobal.EnableDisable(this.uPermType, this.printPermType) || !WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)){
        bottombtnArr.push('-', this.singlePrint=new Wtf.exportButton({
            obj:this,
            id:"printReports"+config.helpmodeid+config.id,
            iconCls: 'pwnd printButtonIcon',
            text: WtfGlobal.getLocaleText("acc.rem.236"),// + " "+ singlePDFtext,
            tooltip :WtfGlobal.getLocaleText("acc.rem.236.single"),      //'Export selected record(s)',
            disabled :true,
            hidden:this.isCustomWidgetReport,
            exportRecord:this.exportRecord,
            isEntrylevel:false,
            menuItem:{
                rowPdf:true,
                rowPdfPrint:true,
                rowPdfTitle:WtfGlobal.getLocaleText("acc.rem.39") + " "+ this.label
            },// + " "+ singlePDFtext},
            get:tranType,
            moduleid:config.moduleid
        }));
    }
//    if(!WtfGlobal.EnableDisable(this.uPermType, this.printPermType)){
//        bottombtnArr.push('-', this.printButton=new Wtf.exportButton({
//            text:WtfGlobal.getLocaleText("acc.common.print"),  //"Print",
//            obj:this,
//            tooltip :WtfGlobal.getLocaleText("acc.common.printTT"),  //'Print report details',
//            disabled :true,
//            hidden:this.isCustomWidgetReport,
//            label:config.isCustomer?(config.isOrder?WtfGlobal.getLocaleText("acc.accPref.autoSO"):WtfGlobal.getLocaleText("acc.accPref.autoInvoice")):(config.isOrder?WtfGlobal.getLocaleText("acc.accPref.autoPO"):WtfGlobal.getLocaleText("acc.agedPay.venInv")),
//            params:{isexpenseinv:this.isexpenseinv,name:config.isQuotation?WtfGlobal.getLocaleText("acc.qnList.tabTitle"):(config.isCustomer?(config.isOrder?WtfGlobal.getLocaleText("acc.soList.tabTitle"):WtfGlobal.getLocaleText("acc.invoiceList.tabtitle")):(config.isOrder?WtfGlobal.getLocaleText("acc.poList.tabTitle"):WtfGlobal.getLocaleText("acc.grList.tabTitle")))},
//            menuItem:{print:true},
//            get:tranType,
//            moduleId:config.moduleid
//        }));
          
//        this.printButton.setParams({
//            costCenterId : this.costCenter.getValue(),
//            startdate : WtfGlobal.convertToGenericStartDate(this.startDate.getValue()),
//            enddate : WtfGlobal.convertToGenericEndDate(this.endDate.getValue()),
//            archieve : this.archieveCombo?this.archieveCombo.getValue() : 0,
//            productid : this.productname.getValue(),
//            productCategoryid : this.productCategory.getValue()
//        });
//    }
                
//    if(!WtfGlobal.EnableDisable(this.uPermType, this.printPermType)){
//        bottombtnArr.push('-', this.singleRowPrint=new Wtf.exportButton({
//            obj:this,
//            id:"printSingleRecord"+config.helpmodeid+config.id,
//            iconCls: 'pwnd printButtonIcon',
//            text:WtfGlobal.getLocaleText("acc.rem.236"),
//            hidden:this.isCustomWidgetReport,
//            tooltip :WtfGlobal.getLocaleText("acc.rem.236.single"),//'Print Single Record Details',
//            disabled :true,
//            isEntrylevel:false,
//         menuItem:{rowPrint:true},
//            get:tranType,
//            moduleid:config.moduleid
//        }));
//    }
    this.quickPanelSearch = new Wtf.KWLTagSearch({
        emptyText:WtfGlobal.getLocaleText("acc.rem.5")+" "+this.label+", "+WtfGlobal.getLocaleText("Memo")+", "+((this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) ?"Customer":"Vendor"),
        width: 150,
        id:"quickSearch"+config.helpmodeid+config.id,
        field: 'billno',
        Store:this.Store
    })

    this.tbar1 = new Array();
    if(this.isUnInvoiceDOReport){
        this.tbar1.push(this.quickPanelSearch, this.resetBttn, btnArr,"-",this.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.cust"):WtfGlobal.getLocaleText("acc.invoiceList.ven"), this.custmerCmb,"-",label,this.custVendCategory);
    }else{
        this.tbar1.push(this.quickPanelSearch, this.resetBttn, btnArr);
    }
    //this.tbar1.push("-", WtfGlobal.getLocaleText("acc.common.costCenter"), this.costCenter);
    //    if(config.extraFilters == undefined){//Cost Center Report View - Don't show 'cost center' filter
    //        if(config.isOrder && !this.isQuotation){ // For sales/purchase order show 'cost center' filter in main tbar applied for panel
    //            
    //        }
    //    }
    //    else if(config.extraFilters != undefined){//Invoice Report View - Add type filter in main tbar
    //        if(!config.isOrder){this.tbar1.push("&nbsp;View", this.typeEditor);}
    //    }
    if (!config.pendingapproval && !this.isCustomWidgetReport) {
        this.tbar1.push("->", getHelpButton(this, config.helpmodeid));
    }



    this.leadpan = new Wtf.Panel({
        layout: 'border',
        border: false,
        attachDetailTrigger: true,
        items: [this.objsearchComponent
        , {
            region: 'center',
            border:false,
            layout : "fit",
            tbar: this.tbar1,//this.quickPanelSearch,
            //            this.resetBttn,btnArr,'->',(config.isCustomer && !config.isOrder)?'View':'',(!config.isOrder)?this.typeEditor:'',getHelpButton(this,config.helpmodeid)],
            items:[this.grid],
            bbar: this.pagingToolbar = new Wtf.PagingSearchToolbar({
                pageSize: 30,
                id: "pagingtoolbar" + this.id,
                store: this.Store,
                searchField: this.quickPanelSearch,
                displayInfo: true,
                //            displayMsg: 'Displaying records {0} - {1} of {2}',
                emptyMsg: WtfGlobal.getLocaleText("acc.common.nores"),  //"No results to display",
                plugins: this.pP = new Wtf.common.pPageSize({
                    id : "pPageSize_"+this.id
                }),
                items:bottombtnArr
            })
        }]
    }); 
    Wtf.apply(this,{
        border:false,
        layout : "fit",
        items:[ this.leadpan]
    });

    //    Wtf.apply(this,{
    //        border:false,
    //        layout : "fit",
    //        tbar: this.tbar1,//this.quickPanelSearch,
    ////            this.resetBttn,btnArr,'->',(config.isCustomer && !config.isOrder)?'View':'',(!config.isOrder)?this.typeEditor:'',getHelpButton(this,config.helpmodeid)],
    //        items:[this.grid],
    //        bbar: this.pagingToolbar = new Wtf.PagingSearchToolbar({
    //            pageSize: 30,
    //            id: "pagingtoolbar" + this.id,
    //            store: this.Store,
    //            searchField: this.quickPanelSearch,
    //            displayInfo: true,
    ////            displayMsg: 'Displaying records {0} - {1} of {2}',
    //            emptyMsg: WtfGlobal.getLocaleText("acc.common.nores"),  //"No results to display",
    //            plugins: this.pP = new Wtf.common.pPageSize({id : "pPageSize_"+this.id})
    //        })
    //    });
    this.Store.on('beforeload',function(s,o){
        WtfGlobal.setAjaxTimeOut();
        if (!o.params)
            o.params = {};
        this.Store.baseParams = this.getStoreBaseParams();

    },this);
    if(config.filterConjuctionCrit == undefined || config.filterConjuctionCrit == ""){
        this.loadParmStore();
    }    
    this.getMyConfig();
    this.typeEditor.on('select',this.loadTypeStore,this);
    this.expandStore.on('load',this.fillExpanderBody,this);
    this.expander.on("expand",this.onRowexpand,this);
    //this.grid.on('render',this.loadParmStore,this);
    this.Store.on('load',this.expandRow, this);
    this.Store.on('load',this.hideLoading, this);
    this.Store.on('loadexception',this.hideLoading, this);
    Wtf.account.DeliveryListPanel.superclass.constructor.call(this,config);
    this.addEvents({
        'journalentry':true
    });
    this.sm.on("selectionchange",this.enableDisableButtons.createDelegate(this),this);
    this.grid.on('cellclick',this.onCellClick, this);
    this.grid.flag = 0;
    this.grid.on('rowclick', Wtf.callGobalDocFunction, this);
}
Wtf.extend(Wtf.account.DeliveryListPanel,Wtf.Panel,{
    withoutRateCurrencyDeletedSymbolWithPermissionCheck:function(v,m,rec){
        if((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase)) {
            return Wtf.UpriceAndAmountDisplayValue;
        } else{
            return WtfGlobal.withoutRateCurrencyDeletedSymbol(v,m,rec);
        }
    },
    /**
     * Import Button for E-wat Fields (Eway bill no and Date)
     * ERP-39530 
     */
    createImportEwayFiledsButton: function () {
        var extraConfig = {};
        extraConfig.url = "AccEntityGST/importEwayFieldsData.do";
        extraConfig.isExcludeXLS = false;
        extraConfig.ImportModuleId = this.moduleid;
        var extraParams = {};
        extraParams.isCustomer = this.isCustomer;
        var importEwayBtnArray = Wtf.importMenuArray(this, Wtf.EWAY_BILL_IMPORT_MODULENAME, this.Store, extraParams, extraConfig);
        if (importEwayBtnArray.length == 2) {
            importEwayBtnArray.remove(importEwayBtnArray[0]);
        }
        this.importEwayBtn = new Wtf.Action({//
            text: WtfGlobal.getLocaleText("acc.import.document.eway.fieldsdata.txt"),
            scope: this,
            tooltip: WtfGlobal.getLocaleText("acc.import.document.eway.fieldsdata.txt"),
            iconCls: (Wtf.isChrome ? 'pwnd importChrome' : 'pwnd import'),
            menu: importEwayBtnArray
        });
        return this.importEwayBtn;
    },
    currencyDeletedRendererWithPermissionCheck:function(v,m,rec){
        if((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase)) {
            return Wtf.UpriceAndAmountDisplayValue;
        } else{
            return WtfGlobal.currencyDeletedRenderer(v,m,rec);
        }
    },
    
    createGRNfromDO:function(){             
        if(this.grid.getSelectionModel().hasSelection()==false){//avoiding single select for multigroupcompany flag
            WtfComMsgBox(130,2);//No delivery order has been selected. Please select delivery order.
            return;
        }
    
        //If multi group company flag is activated = generating multiple PO on the basis of vendor mapped products
        if(Wtf.account.companyAccountPref.activateGroupCompaniesFlag){  
            this.recordsArr=this.grid.getSelectionModel().getSelections();
            var billidArr=[];
            var billConfig={};
            for(var i=0;i<this.recordsArr.length;i++){
                var rec= this.recordsArr[i];
                if(rec!=null && rec!=undefined && rec.data!=null && rec.data!=undefined){
                    var billid=rec.data.billid;
                    billConfig.billid=billid;
                    billidArr.push(billConfig);    
                    billConfig={};
                } 
            }
        
            Wtf.Ajax.requestEx({
                params:{
                    recs:JSON.stringify(billidArr)
                },
                url:"ACCInvoiceCMN/generateGRNFromMultipleDO.do"
            },this,
            this.genSuccessMsg, this.genFailureMsg);
        }
    },

    genSuccessMsg:function(response, request){
        if(response.success) {
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.field.GoodsReceiptOrder"),response.msg]);
        }else{
            this.genFailureMsg(response);
        }
    },

    genFailureMsg:function(response){
        WtfGlobal.resetAjaxTimeOut();
        Wtf.MessageBox.hide();
        var msg=WtfGlobal.getLocaleText("acc.common.msg1");//"Failed to make connection with Web Server";
        if(response.msg)msg=response.msg;
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg],2);
    },    
    
    submitHandler : function(){
        if(this.startDate.getValue()>this.endDate.getValue()){
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"), WtfGlobal.getLocaleText("acc.fxexposure.datechk")], 3); // "From Date can not be greater than To Date."
            return;
        }
        this.loadStore();
    },
    
    handleReject: function() {
        var data = [];
        var arr = [];
        this.recArr = this.grid.getSelectionModel().getSelections();
        this.grid.getSelectionModel().clearSelections();
        for (var i = 0; i < this.recArr.length; i++) {
            if(this.recArr[i].data.isautogenerateddo){
                var msgforLinkinv=(this.businessPerson=="Customer") ? WtfGlobal.getLocaleText("acc.field.RejectDoLinkInvoice.1")+" " +this.recArr[i].data.invoiceno+" " +WtfGlobal.getLocaleText("acc.field.RejectDoLinkInvoice.2")  :  WtfGlobal.getLocaleText("acc.field.RejectGROLinkVInvoice.1")+" "+this.recArr[i].data.invoiceno+" " +WtfGlobal.getLocaleText("acc.field.RejectGROLinkVInvoice.2");
                WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.information'),msgforLinkinv],3);
                return;
            }
        }
        WtfGlobal.highLightRowColor(this.grid, this.recArr, true, 0, 2);
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.field.Areyousureyouwanttorejectselected") + this.label + "?", function(btn) {
            if (btn != "yes") {
                for (var i = 0; i < this.recArr.length; i++) {
                    var ind = this.Store.indexOf(this.recArr[i])
                    var num = ind % 2;
                    WtfGlobal.highLightRowColor(this.grid, this.recArr[i], false, num, 2, true);
                }
                return;
            }
            for (i = 0; i < this.recArr.length; i++) {
                arr.push(this.Store.indexOf(this.recArr[i]));
            }
            var mode = (this.withInvMode ? 23 : 15);
            if (this.isOrder) {
                mode = (this.withInvMode ? 54 : 44);
            }
            data = WtfGlobal.getJSONArray(this.grid, true, arr);
            
            var ajxUrl = (this.businessPerson=="Customer") ? "ACCInvoice/rejectPendingDO.do" : "ACCGoodsReceipt/rejectPendingGRO.do";
            Wtf.Ajax.requestEx({
                url: ajxUrl,
                //                url: Wtf.req.account+this.businessPerson+'Manager.jsp',
                params: {
                    data: data,
                    mode: mode,
                    totalorderamount:this.recArr[0].data.amountinbase
                }
            }, this, this.genSuccessResponseReject, this.genFailureResponseReject);
        }, this);
    },
    genSuccessResponseReject: function(response) {
        WtfComMsgBox([this.label,response.msg],response.success*2+1);
        for (var i = 0; i < this.recArr.length; i++) {
            var ind = this.Store.indexOf(this.recArr[i])
            var num = ind % 2;
            WtfGlobal.highLightRowColor(this.grid, this.recArr[i], false, num, 2, true);
        }
        if (response.success) {
            (function() {
                this.loadStore();
            }).defer(WtfGlobal.gridReloadDelay(), this);

        }
    },
    genFailureResponseReject: function(response) {
        for (var i = 0; i < this.recArr.length; i++) {
            var ind = this.Store.indexOf(this.recArr[i])
            var num = ind % 2;
            WtfGlobal.highLightRowColor(this.grid, this.recArr[i], false, num, 2, true);
        }
        var msg = WtfGlobal.getLocaleText("acc.common.msg1");  //"Failed to make connection with Web Server";
        if (response.msg) {
            msg = response.msg;
        }
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), msg], 2);
    },
            
    approvePendingDO: function() {
        var formRecord = this.grid.getSelectionModel().getSelected();
        if(formRecord.data.isautogenerateddo){
            var msgforLinkinv=(this.businessPerson=="Customer") ? WtfGlobal.getLocaleText("acc.field.ApproveDoLinkInvoice.1")+" <b>"+formRecord.data.invoiceno+"</b> "+WtfGlobal.getLocaleText("acc.field.ApproveDoLinkInvoice.2")  :  WtfGlobal.getLocaleText("acc.field.ApproveGROLinkVInvoice.1")+" <b>"+formRecord.data.invoiceno+"</b> "+WtfGlobal.getLocaleText("acc.field.ApproveGROLinkVInvoice.2"); //ERP-18065
            WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.information'),msgforLinkinv],3);
            return;
        }
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.field.Areyousureyouwanttoapproveselected") +" "+ this.label + "?", function(btn) {

            if (btn == "yes") {
                var URL = (this.businessPerson=="Customer") ? "ACCInvoice/approveDeliveryOrder.do" : "ACCGoodsReceipt/approveGoodsReceiptOrder.do";
                var formRecord = this.grid.getSelectionModel().getSelected();
                var formRecordData = this.grid.getSelectionModel().getSelected().data;
                var itemsArr = [];
                this.remarkField = new Wtf.form.TextArea({
                    fieldLabel: WtfGlobal.getLocaleText("acc.field.AddRemark*"),
                    width: 200,
                    height: 100,
                    allowBlank: false,
                    maxLength: 1024
                });
                var maxDate = (Wtf.serverDate > this.grid.getSelectionModel().getSelected().data.date) ? Wtf.serverDate : this.grid.getSelectionModel().getSelected().data.date;
                this.postingDate = new Wtf.ExDateFieldQtip({
                    name: 'postingDate',
                    id: 'postingDate',
                    fieldLabel: WtfGlobal.getLocaleText("acc.pending.pstingdate"),
                    width: 200,
                    height: 100,
                    maxLength: 1024,
                    format: WtfGlobal.getOnlyDateFormat(),
                    value: new Date(this.grid.getSelectionModel().getSelected().data.date),
                    maxValue: maxDate,
                    minValue: this.grid.getSelectionModel().getSelected().data.date

                });

                itemsArr.push(this.remarkField);
                if (CompanyPreferenceChecks.isPostingDateCheck() && formRecordData != undefined && formRecordData.isFinalLevelApproval && (Wtf.account.companyAccountPref.inventoryValuationType==Wtf.PERPETUAL_VALUATION_METHOD)) {
                    itemsArr.push(this.postingDate);
                }
                this.postingDate.on('change', function (scope, newVal, oldVal) {
                    var record = this.grid.getSelectionModel().getSelected();
                    var creationDate = record.data.date;
                    var todaysDate = Wtf.serverDate;
                    if (!isFromActiveDateRange(newVal)) {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.pending.pstingdateactivedateerrormsg")], 2);
                        this.postingDate.setValue(oldVal);
                    }if (newVal < creationDate) {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.pending.pstingdateerrormsg")], 2);
                        this.postingDate.setValue(oldVal);
                    } else if (newVal > todaysDate) {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.pending.pstingdateerrortodaymsg")], 2);
                        this.postingDate.setValue(oldVal);
                    }
                }, this);
                this.remarkWin = new Wtf.Window({
                    height: 270,
                    width: 360,
                    maxLength: 1000,
                    title: (this.businessPerson=="Customer") ? WtfGlobal.getLocaleText("acc.field.ApprovependingDeliveryOrder") : WtfGlobal.getLocaleText("acc.field.ApprovependingGoodsReceiptOrder"), // "Approve pending Delivery Order" : Approve Pending Goods Receipt
                    bodyStyle: 'padding:5px;background-color:#f1f1f1;',
                    autoScroll: true,
                    allowBlank: false,
                    layout: 'border',
                    items: [{
                        region: 'north',
                        border: false,
                        height: 70,
                        bodyStyle: 'background-color:#ffffff;border-bottom:1px solid #bfbfbf;',
                        html: getTopHtml(WtfGlobal.getLocaleText("acc.field.ApprovePending") +" "+ this.label, WtfGlobal.getLocaleText("acc.field.ApprovePending") +" "+ this.label + " <b>" + formRecord.data.billno + "</b>", "../../images/link2.jpg", true, "10px 0 0 5px", "7px 0px 0px 10px")
                    }, {
                        region: 'center',
                        border: false,
                        layout: 'form',
                        bodyStyle: 'padding:5px;',
                        items: itemsArr
                    }],
                    modal: true,
                    buttons: [{
                        text: WtfGlobal.getLocaleText("acc.cc.24"),
                        scope: this,
                        handler: function() {
                            //                                if (this.remarkField.getValue().trim() == "") {
                            //                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Pleaseenterremark")], 2);
                            //                                    return;
                            //                                }

                            //                                if (!this.remarkField.isValid()) {
                            //                                    this.remarkField.markInvalid(WtfGlobal.getLocaleText("acc.field.Maximumlengthofthisfieldis1024"));
                            //                                    return;
                            //                                }
                            
                                if (this.postingDate.isValid()) {
                                    Wtf.Ajax.requestEx({
                                        url: URL,
                                        params: {
                                            billid: formRecord.data.billid,
                                            isbilling: formRecord.data.withoutinventory,
                                            remark: this.remarkField.getValue(),
                                            totalorderamount: formRecord.data.amountinbase,
                                            postingDate:WtfGlobal.convertToGenericDate(this.postingDate.getValue())
                                        }
                                    }, this, this.genSuccessResponseApproveInv, this.genFailureResponseApproveInv);
                                } else {
                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.pending.pstingdatevalidationmsg")], 2);
                                }
                            }
                        }, {
                        text: WtfGlobal.getLocaleText("acc.common.cancelBtn"),
                        scope: this,
                        handler: function() {
                            this.remarkWin.close();
                        }
                    }]
                });
                this.remarkWin.show();


            }
        }, this)
    },
    closeDeliveryOrder:function(){
        Wtf.MessageBox.confirm("Confirm","Are you sure you want to close this Delivery Order?", function(btn){
            if(btn == 'yes') { 
                var selected = this.sm.getSelected();
                var arr=[];
                this.recArr = this.grid.getSelectionModel().getSelections();
                for(i=0;i<this.recArr.length;i++){
                    arr.push(this.Store.indexOf(this.recArr[i]));
                }
                var data= WtfGlobal.getJSONArray(this.grid,true,arr);
                var dataArr=new Array();
                //                var isclosed=true;
                //                for (var i=0;i<selected.length;i++){
                //                    var jObj = {};
                //                    var reqId=selected[i].get("billid");
                //                    jObj.id=selected[i].get("billno");
                //                    jObj.quantity=selected[i].get("status");
                //                    dataArr.push(jObj);
                //                }
                //                var finalStr = JSON.stringify(dataArr);
                //        
                WtfGlobal.setAjaxTimeOut();
                Wtf.Ajax.requestEx({
                    url:"ACCInvoice/closeDeliveryOrders.do",
                    params: {
                        jsondata: data
                    }
                },
                this,
                function(result, req){
                    WtfGlobal.resetAjaxTimeOut();
                    if(result.success) {
                        this.loadStore();
                        var msg = result.msg;
                        WtfComMsgBox(["Success",msg],0);
                    }else{
                        WtfComMsgBox(["Failure", result.msg], 1);
                    }
            
                }, function(){
                    WtfGlobal.resetAjaxTimeOut();
                    WtfComMsgBox(["Error", "Error occurred while processing"], 1);
                });
                       
            }else if(btn == 'no') {
                return;           
            }
        },this);
  
    },
    genSuccessResponseApproveInv: function(response) {
        this.remarkWin.close();
        //        Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.success"), response.msg, function(){
        //            this.loadStore();
        //        }, this);
        Wtf.MessageBox.show({
            title: WtfGlobal.getLocaleText("acc.common.success"),
            msg: response.msg,
            width: 600,
            buttons: Wtf.MessageBox.OK,
            animEl: 'mb9',
            scope: this,
            icon: Wtf.MessageBox.INFO,
            fn: function() {
                this.loadStore();
            }
        });
    },
    genFailureResponseApproveInv: function(response) {
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Erroroccurredwhileupdatingstatus")], 2);
    },   
    
  hideLoading:function(){Wtf.MessageBox.hide();},
    loadTypeStore:function(a,rec){
        //        this.cashonly=false;
        //        this.creditonly=false;
        this.deleted=false;
        this.nondeleted=false;
        this.index=rec.data.typeid;
        this.isfavourite=false;
        this.isUnInvoiced=false;
        this.isPOSRecords=false;
        this.isJobWorkOutReciever=false;
        

        //        if(index==1)
        //            this.cashonly=true;
        //        else if(index==2)
        //            this.creditonly=true;
        if(this.index==1){
            this.isfavourite=true;
            
            if (this.editBttn)
                this.editBttn.disable();
            
            if (this.copyInvBttn)
                this.copyInvBttn.disable();

            if (this.deleteTrans)
                this.deleteTrans.disable();
           
            if (this.deleteTransPerm)
                this.deleteTransPerm.disable();

            if (this.statUpBttn)
                this.statUpBttn.disable();            
            
            if (this.pickAndPack)
                this.pickAndPack.disable(); 
            if (this.Pack)
                this.Pack.disable(); 
            if (this.Ship)
                this.Ship.disable(); 
            
        }else if (this.index==2){
            this.isUnInvoiced = true;

            if (this.editBttn)
                this.editBttn.disable();
            
            if (this.copyInvBttn)
                this.copyInvBttn.disable();

            if (this.deleteTrans)
                this.deleteTrans.disable();
           
            if (this.deleteTransPerm)
                this.deleteTransPerm.disable();

            if (this.statUpBttn)
                this.statUpBttn.disable();
        }else if(this.index==3){
            this.isPOSRecords=true;
        }else if(this.index==4){
            this.isJobWorkOutReciever=true;
        }
        //        if(index==4)
        //            this.nondeleted=true;
        //        if(index==3){
        //           this.deleted=true;
        //           if(!WtfGlobal.EnableDisable(this.uPermType, this.removePermType)){
        //                if(this.deleteTrans){this.deleteTrans.disable();}
        //           }
        //        } else{
        //            if(!WtfGlobal.EnableDisable(this.uPermType, this.removePermType)){
        //                if(this.deleteTrans){this.deleteTrans.enable();}
        //            }
        //        }
        this.Store.on('load',this.storeloaded,this);
        this.loadStore();
        WtfComMsgBox(29,4,true);

    },
    
    showChart : function(param) {
        var chartPanelID = "UnprintedDeliveryOrders";
        var chartParams = this.getPieChartParams();
        chartParams.id = chartPanelID;
        chartParams.title = WtfGlobal.getLocaleText("acc.common.UnprintedDeliveryOrders.PieChart");
        chartParams.url = this.getPieChartUrl();
        chartParams.chartConfig = this.getPieChartConfig(chartParams);
        chartParams.tabTipParams = [WtfGlobal.getLocaleText("acc.common.TT.UnprintedDeliveryOrders")];
        var chart = Wtf.getCmp(chartPanelID);
        if(chart){
            Wtf.getCmp('as').remove(chart,true);
        }
        chart = getReportChartPanel(chartParams);
        Wtf.getCmp('as').add(chart);
        Wtf.getCmp('as').setActiveTab(chart);
        Wtf.getCmp('as').doLayout();
    },
    
    getStoreBaseParams: function () {
        var currentBaseParams = this.Store.baseParams;
        currentBaseParams.deleted=this.deleted;
        currentBaseParams.nondeleted=this.nondeleted;
        currentBaseParams.costCenterId = this.costCenter.getValue();
        currentBaseParams.startdate = WtfGlobal.convertToGenericStartDate(this.startDate.getValue());
        currentBaseParams.enddate = WtfGlobal.convertToGenericEndDate(this.endDate.getValue());
        currentBaseParams.isfavourite=this.isfavourite;
        currentBaseParams.isUnInvoiced=this.isUnInvoiced;
        currentBaseParams.isPOSRecords=this.isPOSRecords;
        currentBaseParams.isJobWorkOutReciever=this.isJobWorkOutReciever;
        currentBaseParams.productid = this.productname.getValue();
        currentBaseParams.productCategoryid = this.productCategory.getValue();
        currentBaseParams.isFixedAsset=this.isFixedAsset;
        currentBaseParams.salesPersonFilterFlag=true;
        /*
         *Sets the initial value of newcustomerid to empty to apply no filters 
         */
        currentBaseParams.newcustomerid = this.custmerCmb.getValue();
        /*
         *Sets the initial value of customerCategoryid to empty to apply no filters 
         */
        currentBaseParams.customerCategoryid = this.custVendCategory.getValue();
        currentBaseParams.chartType = undefined;
        return currentBaseParams;
    },
    
    getPieChartParams: function () {
        var chartParams = {
            params: {}
        }
        chartParams.params = this.getStoreBaseParams();
        chartParams.params.chartType = Wtf.chartType.pie;
        chartParams.params.isUnprintedDeliveryOrder=true;
        return chartParams;
    },
    getPieChartUrl: function () {
        return this.Store.url;
    },
    
    getPieChartConfig :function(chartParams){
        
        var params = {};
        params.titleField = "customername";
        params.valueField = "docount";
        params.chartColor = "#50EBEC";
//        params.textColor = "#00ADB5";
        params.title = "Unprinted Delivery Orders Against Customer";
        params.legendPosition = "right";
        params.unit = Wtf.pref.CurrencySymbol;
        params.height = 520;
        
        if(chartParams.params.startdate && chartParams.params.enddate){
            params.subTitle = "From : " + this.startDate.getValue().format("M Y") + "\n" + "To : " + this.endDate.getValue().format("M Y");
        }
        
        var chartConfig = getPieChartConfig(params);
        return chartConfig;
    },
    
    setCostCenter: function(){
        this.costCenter.setValue(this.costCenterId);//Select Default Cost Center
        Wtf.CostCenterStore.un("load", this.setCostCenter, this);
    },
    enableDisableButtons:function(){
        if(!WtfGlobal.EnableDisable(this.uPermType, this.removePermType)){
            if(this.deleteTrans){this.deleteTrans.enable();}
            if(this.deleteTransPerm){
                this.deleteTransPerm.enable();
            }
        }
        var arr=this.grid.getSelectionModel().getSelections();
        if(arr.length==0&&!WtfGlobal.EnableDisable(this.uPermType,this.removePermType)){
            if(this.deleteTrans){this.deleteTrans.disable();}
            if(this.deleteTransPerm){
                this.deleteTransPerm.disable();
            }
        }
        if(!WtfGlobal.EnableDisable(this.uPermType, this.removePermType)){
            for(var i=0;i<arr.length;i++){
                if(arr[i]&&arr[i].data.deleted)
                    if(this.deleteTrans){this.deleteTrans.disable();}
                  if(this.deleteTransPerm){this.deleteTransPerm.enable();}
                    }
                }

        var rec = this.sm.getSelected();
        if((this.sm.getCount()==1 && rec.data.deleted != true)){
            if(this.email)this.email.enable();
            if (this.viewDeliveryPlannerBttn) {
                this.viewDeliveryPlannerBttn.enable();
            }
            if(this.approveInvoiceBttn)this.approveInvoiceBttn.enable();
            if(this.editBttn){
                if(rec.data.isjobworkoutrec && rec.data.isjobworkoutrec==true){
                /**
                 * Disable Edit btn for Job work Out record
                 */
                    this.editBttn.disable();
                }else{
                    this.editBttn.enable();
                }
            }
            if(this.copyInvBttn){
                this.copyInvBttn.enable();
            }
         
            if(this.statUpBttn){
                this.statUpBttn.enable();
            }
            
            if(this.pickAndPack){
                this.pickAndPack.enable();
            }
            if(this.Pack){
                this.Pack.enable();
            }
            if(this.Ship){
                this.Ship.enable();
            }
            
            if (this.deleteTransPerm)
                this.deleteTransPerm.enable();
            if(this.deleteMenu && this.pendingapproval) {
                this.deleteMenu.disable();
            }
            
            if(this.approvalHistoryBtn) {
                this.approvalHistoryBtn.enable();
            }
            
            if (this.unlinkDocumentBtn) {
                Wtf.getCmp('unlinkDocument' + this.id).setDisabled(false);
            }
        //            if(this.copyInvBttn)this.copyInvBttn.enable();
        //            this.withInvMode = rec.data.withoutinventory;
        }else{
            if(this.email)this.email.disable();
            if (this.viewDeliveryPlannerBttn) {
                this.viewDeliveryPlannerBttn.disable();
            } 
            if(this.approveInvoiceBttn)this.approveInvoiceBttn.disable();
            if(this.editBttn){
                this.editBttn.disable();
            }
            if(this.copyInvBttn){
                this.copyInvBttn.disable();
            }
            if(this.statUpBttn){
                this.statUpBttn.disable();
            }

            if(this.sm.getCount()==0){
                if(this.pickAndPack){
                    this.pickAndPack.disable();
                }
            }        
            
            if (this.Pack) {
                this.Pack.disable();
            }

            if (this.Ship) {
                this.Ship.disable();
            }
            
            if(this.approvalHistoryBtn) {
                this.approvalHistoryBtn.disable();
            }
            
//            if(this.sm.getCount()==0){
//                if(this.Pack){
//                    this.Pack.disable();
//                }
//            }        
//            if(this.sm.getCount()==0){
//                if(this.Ship){
//                    this.Ship.disable();
//                }
//            }        
            if(this.deleteMenu && this.pendingapproval) {
                this.deleteMenu.enable();
            }
                
            if (this.unlinkDocumentBtn) {
                Wtf.getCmp('unlinkDocument' + this.id).setDisabled(true);
            }
        //             if (this.deleteTransPerm)
        //                this.deleteTransPerm.disable();

        //            if(this.copyInvBttn)this.copyInvBttn.disable();
        }
        
        /**
         * Enable Pick and ship depends on current status
         */
        var packExist=false;
        var shipExist=false;
//        this.Pack.enable();
//        this.Ship.enable();
                for (var i=0; i<arr.length; i++) {
            if(arr[i]&&arr[i].data.status=="Packed"){
                packExist=true;
            }else if (arr[i]&&arr[i].data.status=="Shipped"){
                shipExist=true;
            }
        }
        if(packExist && this.Pack){
             this.Pack.disable();
        }
        if(shipExist && this.Ship){
            this.Pack.disable();
            this.Ship.disable();
        }
        /* If record is temporary deleted, 
         * 
         * then Linking Information button is being enabled,
         * to see its Linking Information
         */

        if (this.sm.getCount() == 1) {

            if (this.linkinfoViewBtn) {
                this.linkinfoViewBtn.enable();
            }
            if (this.relatedTransactionsBtn) {
                    this.relatedTransactionsBtn.enable();
            }
        } else {

            if (this.linkinfoViewBtn) {
                this.linkinfoViewBtn.disable();
            }
            if (this.relatedTransactionsBtn) {
                this.relatedTransactionsBtn.disable();
            }

        }
        
        if(this.sm.getCount()>=1 ){
                        
            if(this.singlePrint)this.singlePrint.enable();            
//            if(this.singleRowPrint)this.singleRowPrint.enable();
            if(this.rejectInvoiceBttn && rec.data.deleted != true){
                this.rejectInvoiceBttn.enable();
            }         
            if(this.pendingapproval) {
                var deletedCount=0;
                for(var cnt=0;cnt<arr.length;cnt++){
                    if(arr[cnt].data.deleted) {
                        deletedCount++;
                    }
                }
                if(deletedCount==arr.length && this.deleteMenu){
                    this.deleteMenu.enable();
                }else if(this.deleteMenu){
                    this.deleteMenu.disable();
                }
            }
        }else{
            
            if(this.singlePrint)this.singlePrint.disable();
//            if(this.singleRowPrint)this.singleRowPrint.disable();
            if(this.rejectInvoiceBttn)this.rejectInvoiceBttn.disable();
        }
        if(this.pendingapproval && this.deleteMenu && this.sm.getCount() == 1 && rec.data.deleted){
            this.deleteTransPerm.enable();
            this.deleteMenu.enable();
        }
        var closedexist=false;
        for (var i=0; i<arr.length; i++) {
            if(arr[i]&&arr[i].data.status=="Closed"){
                closedexist=true;
            }
        }
        if(closedexist){
            this.closeDelOrderBttn.disable();
            this.editBttn.disable();
            this.deleteTransPerm.disable();
            if(this.moduleid===Wtf.Acc_ConsignmentDeliveryOrder_ModuleId){
                this.deleteTrans.disable();
            }
        }else{
            this.closeDelOrderBttn.enable();
            if (this.deleteTransPerm && this.sm.getCount() > 0){ //ERP-32833
                this.deleteTransPerm.enable();  //ERP-25960
            }
        }
        
        if(this.pendingapproval && this.sm.getCount() > 1){
            if(this.rejectInvoiceBttn) {
                this.rejectInvoiceBttn.disable();
            }
                
        }
    //Commented with reference to discussion with Sagar A. and Jatinder Singh  sir (issue 2594)
    //        if (this.isUnInvoiced){
    //            if (this.editBttn)
    //                this.editBttn.disable();
    //            
    //            if (this.copyInvBttn)
    //                this.copyInvBttn.disable();
    //
    //            if (this.deleteTrans)
    //                this.deleteTrans.disable();
    //
    //           if (this.deleteTransPerm)
    //                this.deleteTransPerm.disable();
    //
    //            if (this.statUpBttn)
    //                this.statUpBttn.disable();
    //        }else{
    //            if (this.editBttn)
    //                this.editBttn.enable();
    //            
    //            if (this.copyInvBttn)
    //                this.copyInvBttn.enable();
    //
    //            if (this.deleteTransPerm)
    //                this.deleteTransPerm.enable();
    //            
    //            if (this.deleteTrans)
    //                this.deleteTrans.enable();
    //             
    //            if (this.statUpBttn)
    //                this.statUpBttn.enable();
    //        }
        
    //        if(this.operationType==Wtf.autoNum.Invoice || this.operationType==Wtf.autoNum.GoodsReceipt || this.operationType==Wtf.autoNum.BillingInvoice || this.operationType==Wtf.autoNum.BillingGoodsReceipt) {
    //            if(this.paymentButton != undefined) {
    //                if(this.sm.getCount()==1 && rec.data.amountdue!=0 && rec.data.incash != true && rec.data.deleted != true){
    //                    this.paymentButton.enable();
    //                } else {
    //                    this.paymentButton.disable();
    //                }
    //            }
    //        }

    //        if(this.operationType==Wtf.autoNum.Invoice || this.operationType==Wtf.autoNum.BillingInvoice) {
    //            if(this.RepeateInvoice != undefined) {
    //                if(this.sm.getCount()==1 && rec.data.incash != true && rec.data.deleted != true){
    //                    this.RepeateInvoice.enable();
    //                } else {
    //                    this.RepeateInvoice.disable();
    //                }
    //            }
    //        }
    },
    
    starCellClickHandler : function(grid, rowIndex, columnIndex,e){
        var event=e;
        if(event.getTarget('img[class="favourite"]')) {    
            var formrec = grid.getSelectionModel().getSelected();
            var isfavourite = formrec.get('isfavourite');
            if(!formrec.data.deleted && !this.consolidateFlag){
                if(isfavourite){
                    this.markUnFavouriteHandler(formrec);
                }else{
                    this.markFavouriteHandler(formrec);
                }
            }
        }
    },
    
    markFavouriteHandler : function(formrec){
        var url = (this.businessPerson == "Customer")?"ACCInvoice/updateDeliveryOrderFavourite.do":"ACCGoodsReceipt/updateGoodsReceiptOrderFavourite.do";
        
        Wtf.Ajax.requestEx({
            url:url,
            params:{
                date: WtfGlobal.convertToGenericDate(formrec.data.date),//used as transaction date
                id:formrec.get('billid'),
                isfavourite:true
            }
        },this,
        function(){
            formrec.set('isfavourite', true);
        },function(){
                
            });
    },

    markUnFavouriteHandler : function(formrec){
        var url = (this.businessPerson == "Customer")?"ACCInvoice/updateDeliveryOrderFavourite.do":"ACCGoodsReceipt/updateGoodsReceiptOrderFavourite.do";
        
        Wtf.Ajax.requestEx({
            url:url,
            params:{
                date: WtfGlobal.convertToGenericDate(formrec.data.date),//uswed as transaction date
                id:formrec.get('billid'),
                isfavourite:false
            }
        },this,
        function(){
            if(this.index == 1){
                this.grid.getStore().remove(formrec);
            }else{
                formrec.set('isfavourite', false);
            }
        },function(){
                
            });
    },
    
    loadParmStore:function(){
        this.typeEditor.setValue(0);
        if(!(Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId == this.moduleid || Wtf.Acc_FixedAssets_DeliveryOrder_ModuleId == this.moduleid)){        
            if(this.invID==null){
                this.Store.load({params:{start:0,limit:30}});
            }
             WtfComMsgBox(29,4,true);
         }
            this.Store.on('datachanged', function() {
                if(this.invID==null){
                    var p = this.pP.combo.value;
                    this.quickPanelSearch.setPage(p);
                    this.expandCollpseButton.setText(WtfGlobal.getLocaleText("acc.field.Expand"));
                    this.expandButtonClicked = false;
                    this.expander.resumeEvents('expand');           // event is suspended while expanding all records.
                }
            }, this);
           
        //}
},
handleResetClick:function(){
    if(this.quickPanelSearch.getValue()){
        this.quickPanelSearch.reset();
    }
    /*
     *Sets default values in comboboxes on reset click
     */
    this.startDate.setValue(WtfGlobal.getDates(true));
    this.endDate.setValue(WtfGlobal.getDates(false));
    this.custmerCmb.setValue(this.customerAccStore.getAt(0).data.accid);
    this.custVendCategory.setValue(this.custVendCategoryStore.getAt(0).data.id);
    this.costCenter.setValue(Wtf.CostCenterStore.getAt(0).data.id);
    this.productname.setValue(this.productStore.getAt(0).data.productid);
    this.productCategory.setValue(this.productCategoryStore.getAt(0).data.id);
    this.loadStore();
},
openNewTab:function(){
    if(this.businessPerson=="Customer")
    {
        callDeliveryOrder(false, null);
    }
    else
    {
        callGoodsReceiptDelivery(false,null,null)
    }
},
    
handleStatusUpdate : function(){
    this.groupid='';
    if(this.businessPerson == "Customer"){
        this.groupid=10
    }else{
        this.groupid=11
    }
    this.Rec = new Wtf.data.Record.create([
    {
        name: 'id'
    },
    {
        name: 'name'
    }]
    );
    this.RecStore = new Wtf.data.Store({
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        }, this.Rec),
        url: "ACCMaster/getMasterItems.do",
        baseParams: {
            mode: 112,
            groupid: this.groupid
        }
    });
        
    //        (this.businessPerson == "Customer")? this.DOStore.load() : this.GROStore.load();
    this.winDO = new Wtf.Window({
        title : (this.businessPerson=="Customer") ? WtfGlobal.getLocaleText("acc.field.UpdateDeliveryStatus") : WtfGlobal.getLocaleText("acc.field.UpdateReceiptStatus"),
        layout : 'form',
        modal : true,
        iconCls :getButtonIconCls(Wtf.etype.deskera),
        bodyStyle : 'padding:5px;background-color:#f1f1f1;',
        items : [this.DOStatusCombo =  new Wtf.form.FnComboBox({
            fieldLabel:WtfGlobal.getLocaleText("acc.field.Status*"),
            name:"statcombo",
            hiddenName:'paymentthrough',
            store:this.RecStore,
            width : 200,
            allowBlank:false,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            triggerAction:'all',
            forceSelection:true
        })],
        height : 100,
        width : 350,
        buttons : [{
            scope : this,
            text : WtfGlobal.getLocaleText("acc.common.saveBtn"),
            handler: function() {
                if (this.DOStatusCombo.getValue() == "") {
                    msg = WtfGlobal.getLocaleText("acc.field.Statusupdatealert");
                    Wtf.MessageBox.show({
                        title: WtfGlobal.getLocaleText("acc.common.alert"),
                        msg: msg,
                        buttons: Wtf.MessageBox.OK,
                        icon: Wtf.MessageBox.WARNING,
                        scope: this
                    });
                    return;
                }
                var msg = WtfGlobal.getLocaleText("acc.field.Areyousureyouwanttoupdatestatusofselectedgoodsreceipt");
                if(this.businessPerson =="Customer"){
                    msg = WtfGlobal.getLocaleText("acc.field.Areyousureyouwanttoupdatestatusofselecteddeliveryorder");
                }
                        
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), msg,function(btn){
                    if(btn=="yes") {
                        var formRecord = this.grid.getSelectionModel().getSelected();
                        Wtf.Ajax.requestEx({
                            url:(this.businessPerson == "Customer")? "ACCInvoice/saveDOStatus.do" : "ACCGoodsReceipt/saveGROStatus.do",
                            params: {
                                dId : formRecord.data.billid,
                                status : this.DOStatusCombo.getValue()
                            }
                        },this,this.genSuccessResponseStat,this.genFailureResponseStat);

                    }
                }, this)
                        
            //this.Store.reload();
            }
        },{
            scope : this,
            text : WtfGlobal.getLocaleText("acc.common.close"),
            handler : function(){
                this.winDO.close();
            }
        }]
    });
    this.DOStatusCombo.addNewFn=this.addDOStatus.createDelegate(this);
    this.winDO.show();
        
    var statusID=this.grid.getSelectionModel().getSelected().data.statusID;
    this.RecStore.on('load', function() {
        if (statusID != undefined && statusID != "") {
            this.DOStatusCombo.setValue(statusID);
        }

    }, this);
        
    this.RecStore.load();
},  

handlePickAndPack: function(){
    var formRecord = null;
    if(this.grid.getSelectionModel().hasSelection()==false){
        WtfComMsgBox(15,2);
        return;
    }
    if(this.sm.getCount()>1){
        if(this.pickAndPack){
            var formRecord1 = this.grid.getSelectionModel().getSelections();
            var personname=formRecord1[0].data.personname;
            for(var i=0;i<formRecord1.length;i++){
                if(formRecord1[i].data.personname!=personname ||formRecord1[i].data.deleted==true ){
                    this.pickAndPack.disable();
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("erp.dopacking.alerttoselectsamecustomer")],2);
                    return;
                }
            }                   
        }
    }
    formRecord = this.grid.getSelectionModel().getSelections();
    callCreatePickingList("CreatePackingDoList",formRecord);
},
handlePack: function(){
    var formRecord = null;
    var formRecord2 = this.grid.getSelectionModel().getSelections();
    var isdirectshipped=formRecord2[0].data.isdirectshipped;
    if(isdirectshipped){
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText('erp.dodirectshippedwarning')],2);
            return;
    }
    if(this.grid.getSelectionModel().hasSelection()==false){
        //WtfComMsgBox(15,2);
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.deliveryorder.nodoselected")],2);
        return;
    }
    if(this.sm.getCount()>1){
        if(this.Pack){
            var formRecord1 = this.grid.getSelectionModel().getSelections();
            var personname=formRecord1[0].data.personname;
            for(var i=0;i<formRecord1.length;i++){
                if(formRecord1[i].data.personname!=personname ||formRecord1[i].data.deleted==true ){
                    this.Pack.disable();
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("erp.dopacking.alerttoselectsamecustomer")],2);
                    return;
                }
            }                   
        }
    }
    formRecord = this.grid.getSelectionModel().getSelections();
    callCreatePackingList("CreatePackingDeliveryorder",formRecord,this.id);
},
 handleShip: function(){
    var formRecord = null;
    if(this.grid.getSelectionModel().hasSelection()==false){
        //WtfComMsgBox(15,2);
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.deliveryorder.nodoselected")],2);
        return;
    }
    if(this.sm.getCount()>1){
        if(this.Ship){
            var formRecord1 = this.grid.getSelectionModel().getSelections();
            var personname=formRecord1[0].data.personname;
            for(var i=0;i<formRecord1.length;i++){
                if(formRecord1[i].data.personname!=personname ||formRecord1[i].data.deleted==true ){
                    this.Ship.disable();
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("erp.dopacking.alerttoselectsamecustomer")],2);
                    return;
                }
            }                   
        }
    }
    formRecord = this.grid.getSelectionModel().getSelections();
    callCreateShippingList("CreatePackingShippingDeliveryorder",formRecord,this.id);
},

addDOStatus: function(){
    (this.businessPerson == "Customer")? addMasterItemWindow('10') : addMasterItemWindow('11');//10 refferes to global store of 'Customer' and 11 refferes to that of 'Vendor'
},
genSuccessResponseStat : function(response){
    this.winDO.close();
    //        Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.success"), response.msg, function(){
    //            this.Store.reload();
    //        }, this);
    Wtf.MessageBox.show({
        title: WtfGlobal.getLocaleText("acc.common.success"),
        msg: response.msg,
        width: 250,
        buttons: Wtf.MessageBox.OK,
        animEl: 'mb9',
        scope: this,
        icon: Wtf.MessageBox.INFO,
        fn: function() {
            this.Store.reload();
        }
    });
},
genFailureResponseStat : function(response){
    this.winDO.close();
    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.Erroroccurredwhileupdatingstatus")],2);
},
storeloaded:function(store){
    //      this.hideLoading();
    this.quickPanelSearch.StorageChanged(store);
},
viewTransection:function(grid, rowIndex, columnIndex){
    var formrec=null;
    if(rowIndex<0&&this.grid.getStore().getAt(rowIndex)==undefined ||this.grid.getStore().getAt(rowIndex)==null ){
        WtfComMsgBox(15,2);
        return;
    }
    formrec = this.grid.getStore().getAt(rowIndex);
    var billid=formrec.get("billid");     

    if(this.isCustomer){
        formrec.data.pendingapproval= this.pendingapproval;
        if(this.isConsignment){
            callViewConsignmentDeliveryOrder(true,formrec,billid,this.isFixedAsset,this.isLeaseFixedAsset,this.isConsignment);
        } else if(this.isFixedAsset ||this.isLeaseFixedAsset){         
            callViewFixedAssetDeliveryOrder(true,formrec,billid,this.isFixedAsset,this.isLeaseFixedAsset);
        }else{
            callViewDeliveryOrder(true,formrec,billid,false,this.isFixedAsset)
        }
    }else{
        formrec.data.pendingapproval= this.pendingapproval;
        if(this.isFixedAsset){       
            callViewFixedAssetGoodsReceiptDelivery(true,formrec,billid,false,this.isFixedAsset);
        }else if(this.isConsignment){
            callViewConsignmentGoodsReceiptDelivery(true,formrec,billid,false,this.isFixedAsset,this.isConsignment)
        }else{
            callViewGoodsReceiptDelivery(true,formrec,billid,false,this.isFixedAsset)
        }
    }
},
    
//     editTransaction:function(copyInv){
//
//        var formrec=null;
//        if(this.grid.getSelectionModel().hasSelection()==false||this.grid.getSelectionModel().getCount()>1){
//                WtfComMsgBox(15,2);
//                return;
//        }
//        formrec = this.grid.getSelectionModel().getSelected();
//        var label=copyInv?"Copy":"Edit";
//        var incash=formrec.get("incash");
//        var billid=formrec.get("billid");
//        this.withInvMode = formrec.get("withoutinventory");
//        label=label+billid;
//        if(this.isCustomer){
//            if(this.withInvMode){
//                if(incash)
//                    callEditBillingSalesReceipt(formrec, label+'BillingCSInvoice',copyInv);
//                else
//                    callEditBillingInvoice(formrec, label+'BillingInvoice',copyInv);
//            }
//            else{
//                if(incash)
//                    callEditCashReceipt(formrec, label+'CashSales',copyInv);
//                else
//                    callEditInvoice(formrec, label+'Invoice',copyInv);
//           }
//        }else{
//            if(this.withInvMode){
//                if(incash)
//                    callEditBillingPurchaseReceipt(formrec, label+'BillingCSInvoice',copyInv);
//                else
//                    callEditBillingGoodsReceipt(formrec,  label+'BillingInvoice',copyInv);
//            }
//            else{
//                if(incash)
//                    callEdiCashPurchase(formrec, label+'PaymentReceipt',copyInv);
//                else
//                    callEditGoodsReceipt(formrec, label+'GoodsReceipt',copyInv);
//            }
//        }
//    },

checkDepreciationPostedOrNot:function(formRecord,billid){
    var url = '';
    if(this.businessPerson == "Customer"){
        url = 'ACCInvoiceCMN/isDOhasDepreciatedAsset.do';
    }else{
        url = 'ACCGoodsReceiptCMN/isGROhasDepreciatedORSoldAsset.do';
    }
    if(this.businessPerson == "Customer"){// no need to check that asset do has depreciated asset or not
        if(this.isConsignment){
             var isLinkedTransaction=false;
            if (formRecord.data.isLinkedTransaction != undefined && formRecord.data.isLinkedTransaction && !this.copyInv) {
                isLinkedTransaction = true;
            }
            if (isLinkedTransaction) {
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invList.linkedInvoice"), function(btn) {
                    if (btn == "yes") {
                        callConsignmentDeliveryOrder(true,formRecord,billid,this.isFixedAsset,this.isLeaseFixedAsset,this.isConsignment,isLinkedTransaction);
                    } else {
                        return;
                    }
                }, this);
            }else{
                callConsignmentDeliveryOrder(true,formRecord,billid,this.isFixedAsset,this.isLeaseFixedAsset,this.isConsignment,isLinkedTransaction);
            }
        }else{
            callFixedAssetDeliveryOrder(true,formRecord,null,this.isFixedAsset,this.isLeaseFixedAsset);
        }
           
    } else{
        Wtf.Ajax.requestEx({
            url:url,
            params:{
                billid:billid
            }
        },this,
        function(res,req){
            if(res.data.isInvoicehasDepreciatedAsset){
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),res.data.msg ], 3);
            }else{
                //                callGoodsReceiptDelivery(true,formRecord,billid,false,this.isFixedAsset);
                callFixedAssetGoodsReceiptDelivery(true,formRecord,billid,false,this.isFixedAsset);
            }
        },function(res,req){

            });
    }
},
editTransactionCheckBefore:function(){    //check whether record from POS or not
    var formrec = this.grid.getSelectionModel().getSelected();
    /*
     *  Do not allow editing non-latest free gift DO 
     */
    if(formrec.data.isNonLatestFreeGiftDO){
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.malaysiangst.blockFreeGiftJEEdit")], 2);
        return;
    }
    if(formrec.data.ispartialpackedshippeddo) //check if a DO is partially packed shipped before allowing editing
    {   
      WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.deliveryOrder.cannot.be.edited")], 2);
      return;
    }
    
    if(formrec.data.isFromPOS){
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.rem.249"),function(btn){
            if(btn=="yes") {
                this.editOrderTransaction();
            }
        },this);
    } else {
        this.editOrderTransaction();
    }
},
editOrderTransaction:function(){			// Editing Sales and Purchase Order with Inventory and Without Inventory
    var formRecord = null;
    var isLinkedTransaction = false;
    if(this.grid.getSelectionModel().hasSelection()==false||this.grid.getSelectionModel().getCount()>1){
        WtfComMsgBox(15,2);
        return;
    }
    formRecord = this.grid.getSelectionModel().getSelected();
    var label=WtfGlobal.getLocaleText("acc.product.edit");
    var findtablabel=WtfGlobal.getLocaleText("acc.common.copy");
    var billid=formRecord.get("billid");
    label=label+billid;
    findtablabel=findtablabel+billid;
    //        if (formRecord.data.islinkedtransaction) {
    //            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.invList.canNotEdit")], 2);
    //            return;
    //        }
    if (formRecord.data.isLinkedTransaction != undefined && formRecord.data.isLinkedTransaction && !this.copyInv) {
        isLinkedTransaction = true;
    }
    var isTransactionSendForQA = false;
        if (formRecord.data.isTransactionSendForQA != undefined && formRecord.data.isTransactionSendForQA && !this.copyInv) {
            isTransactionSendForQA = true;
        }
    if(this.isFixedAsset || this.isLeaseFixedAsset || (this.isConsignment&&this.isCustomer)){
        this.checkDepreciationPostedOrNot(formRecord,billid);
    } else if(Wtf.account.companyAccountPref.isQaApprovalFlowInDO && this.businessPerson == "Customer" && isTransactionSendForQA){
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText({key: "acc.deliveryOrder.cannot.be.deleted.as.stockisaccepted.byQAstore", params: ["edit",formRecord.data.billno]})], 2);
        return;
    } else if(Wtf.account.companyAccountPref.isQaApprovalFlow && this.businessPerson != "Customer" && isTransactionSendForQA){
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText({key: "acc.goodsreceiptnote.cannot.be.deleted.as.stockisaccepted.byQAstore", params: ["edit",formRecord.data.billno]})], 2);
        return;
    } else{
        if (this.businessPerson == "Customer") {
            if (this.checkDuplicateTabOpen('DeliveryOrder' + findtablabel)) {
                if (isLinkedTransaction) {
                    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invList.linkedInvoice"), function(btn) {
                        if (btn == "yes") {
                            callEditDeliveryOrder(true, formRecord, label, false, this.isFixedAsset, isLinkedTransaction);
                        } else {
                            return;
                        }
                    }, this);
                } else {
                    callEditDeliveryOrder(true, formRecord, label, false, this.isFixedAsset,isLinkedTransaction,this.pendingapproval);
                }
            }
        } else {
            if(this.isConsignment){
                callConsignmentGoodsReceiptOrder(true,formRecord,billid,false,false,true)
            }else if(this.checkDuplicateTabOpen('GoodsReceipt'+findtablabel)){
                if (formRecord.data.islinkedtransaction != undefined && formRecord.data.islinkedtransaction && !this.copyInv) {
                        isLinkedTransaction = true;
                    }
                if (isLinkedTransaction) {
                    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invList.linkedInvoice"), function(btn) {
                        if (btn == "yes") {
                            callGoodsReceiptDelivery(true, formRecord, label, false, this.isFixedAsset,isLinkedTransaction);
                        } else {
                            return;
                        }
                    }, this);

                } else {
                    callGoodsReceiptDelivery(true, formRecord, label, false, this.isFixedAsset,isLinkedTransaction,undefined,undefined,this.pendingapproval);
                }

            }
        }
    }
           	
},
    
    
copyTransaction : function(){
    var formRecord = null;
    if(this.grid.getSelectionModel().hasSelection()==false||this.grid.getSelectionModel().getCount()>1){
        WtfComMsgBox(15,2);
        return;
    }
    formRecord = this.grid.getSelectionModel().getSelected();
    var label=WtfGlobal.getLocaleText("acc.common.copy");
    var findtablabel=WtfGlobal.getLocaleText("acc.product.edit");
    var billid=formRecord.get("billid");
    label=label+billid;
    findtablabel=findtablabel+billid;
    if(this.businessPerson == "Customer"){
        if(this.checkDuplicateTabOpen('DeliveryOrder'+findtablabel))
            callEditDeliveryOrder(true,formRecord,label, true,this.isFixedAsset); 
    }else if(this.checkDuplicateTabOpen('GoodsReceipt'+findtablabel)){
        callGoodsReceiptDelivery(true,formRecord,label, true,this.isFixedAsset);
    }
},
    
checkDuplicateTabOpen:function(tabid) {
    var tabpanel = Wtf.getCmp(tabid);
    if(tabpanel!=undefined){ //Alerting user due to ERP-3302,ERP-3303,ERP-3309,ERP-3317
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoicelist.alreadyopentablalert")],2);
        return false;
    } else {
        return true;
    }
},

sendMail:function(){
    var formrec=null;
    if(this.grid.getSelectionModel().hasSelection()==false||this.grid.getSelectionModel().getCount()>1){
        WtfComMsgBox(15,2);
        return;
    }
    formrec = this.grid.getSelectionModel().getSelected();
    if(this.isCustomer){
        if (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
            callEmailForMultipleRecords('', formrec, this.label, 53, true, '', this.label, 'pdf', 24, undefined, false, true, "", Wtf.Acc_Delivery_Order_ModuleId);
        } else {
            this.isConsignment ? callEmailWin("emailwin", formrec, this.label, 53, true, false, false, false, false, true, false, false, false, true) : callEmailWin("emailwin", formrec, this.label, 53, true, false, false, false, false, true, false, false, false, false);
        }
    }else{
        if (this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId) {
            callEmailForMultipleRecords('', formrec, this.label, 54, true, '', this.label, 'pdf', 24, undefined, false, true, "", Wtf.Acc_Goods_Receipt_ModuleId);
        } else{
            callEmailWin("emailwin",formrec,this.label,54,false,false,false,false,false,true);
        }
    }

},
//    repeateInvoiceHandler:function(){
//        var formrec=null;
//        if(this.grid.getSelectionModel().hasSelection()==false||this.grid.getSelectionModel().getCount()>1){
//            WtfComMsgBox(15,2);
//            return;
//        }
//        formrec = this.grid.getSelectionModel().getSelected();
//        if(this.isCustomer){
//            callRepeatedInvoicesWindow(formrec.data.withoutinventory, formrec);
////            callRepeatedInvoicesWindow(this.isCustBill, formrec);
//        }
//    },
onRowexpand:function(scope, record, body){
    var colModelArray = GlobalColumnModel[this.moduleid];
    var colModelArrayProduct = GlobalColumnModelForProduct[this.moduleid];
    colModelArray = colModelArray.concat(colModelArrayProduct);
    WtfGlobal.updateStoreConfig(colModelArray,this.expandStore);
    this.expanderBody=body;
    this.isexpenseinv=!this.isCustomer&&record.data.isexpenseinv;
    this.withInvMode = record.data.withoutinventory;
        this.expandStore.on('beforeload', function() {
            WtfGlobal.setAjaxTimeOut();
        }, this);

        this.expandStore.on('load', function() {
            WtfGlobal.resetAjaxTimeOut();
        }, this);
        this.expandStore.on('loadexception', function() {
            WtfGlobal.resetAjaxTimeOut();
        }, this);
        this.expandStore.load({params:{bills:record.data.billid,isexpenseinv:(!this.isCustomer&&record.data.isexpenseinv),moduleid:this.moduleid,isConsignment:this.isConsignment,isLeaseFixedAsset:this.isLeaseFixedAsset}});
},
//    fillExpanderBody:function(){
//        var disHtml = "";
//        var arr=[];
//        if(this.isexpenseinv){//for vendor expense invoice[PS]
////        arr=['Account Name' ,'Amount','Discount','Tax Percent','Total Amount','                  '];//(this.isCustBill?'':'Remark'),
//        arr=[WtfGlobal.getLocaleText("acc.invoiceList.accName") ,WtfGlobal.getLocaleText("acc.invoiceList.expand.amt"),WtfGlobal.getLocaleText("acc.invoiceList.expand.dsc"),WtfGlobal.getLocaleText("acc.invoiceList.expand.tax"),WtfGlobal.getLocaleText("acc.invoiceList.totAmt"),'                  '];
//        var header = "<span class='gridHeader'>"+WtfGlobal.getLocaleText("acc.invoiceList.expand.accList")+"</span>";   //Account List
//        header += "<span class='gridNo' style='font-weight:bold;'>"+WtfGlobal.getLocaleText("acc.cnList.Sno")+"</span>";
//        for(var i=0;i<arr.length;i++){
//            header += "<span class='headerRow'>" + arr[i] + "</span>";
//        }
//        header += "<span class='gridLine'></span>";
//        for(i=0;i<this.expandStore.getCount();i++){
//            var rec=this.expandStore.getAt(i);
//            var accountname= rec.data['accountname'];
//            header += "<span class='gridNo'>"+(i+1)+".</span>";
//            header += "<span class='gridRow'  wtf:qtip='"+accountname+"'>"+Wtf.util.Format.ellipsis(accountname,15)+"</span>";
//            header += "<span class='gridRow' style='width: 7.5%'>"+WtfGlobal.addCurrencySymbolOnly(rec.data.rate,rec.data['currencysymbol'],[true])+"</span>";
//            header += "<span class='gridRow' style='width: 7.5%'>"+rec.data.prdiscount+"% "+"&nbsp;</span>";
//            header += "<span class='gridRow' style='width: 7.5%'>"+rec.data.prtaxpercent+"% "+"&nbsp;</span>";
//            var amount=rec.data.rate-(rec.data.rate*rec.data.prdiscount)/100;
//            amount+=(amount*rec.data.prtaxpercent/100);
//            header += "<span class='gridRow' style='width: 7.5%'>"+WtfGlobal.addCurrencySymbolOnly(amount,rec.data['currencysymbol'],[true])+"</span>";
//            header +="<br>";
//        }
//        disHtml += "<div class='expanderContainer' style='width:100%'>" + header + "</div>";
//        }else{
////            arr=[(this.isCustBill?'':'Product ID'),(this.isCustBill?'Product Details':'Product Name' ),(this.isCustBill?'':'Product Type'),'Quantity','Unit Price',(this.isOrder||this.isQuotation)?'':'Discount','Tax Percent','Amount',"                  "];//(this.isCustBill?'':'Remark'),
//        	var productTypeText = this.withInvMode?WtfGlobal.getLocaleText("acc.invoiceList.expand.pTypeNonInv") : WtfGlobal.getLocaleText("acc.invoiceList.expand.pType");
//
//            arr=[(this.withInvMode?'':WtfGlobal.getLocaleText("acc.invoiceList.expand.PID")),//PID for Inventory
//                (this.withInvMode?WtfGlobal.getLocaleText("acc.invoiceList.expand.pDetailsNonInv"):WtfGlobal.getLocaleText("acc.invoiceList.expand.pName")),//Product Details or Product Name
//                (this.isCustomer?
//                    productTypeText:(Wtf.account.companyAccountPref.countryid == '203' && !this.isQuotation && !this.isOrder)?
//                     WtfGlobal.getLocaleText("acc.field.PermitNo."):productTypeText),//Product Type
////                WtfGlobal.getLocaleText("acc.do.partno"),//Model/Serial no.
//                WtfGlobal.getLocaleText("acc.invoiceList.expand.qty"),//Quantity
//                (this.businessPerson =="Customer")?WtfGlobal.getLocaleText("acc.accPref.deliQuant"):WtfGlobal.getLocaleText("acc.accPref.recQuant"),//Delivered Quantity
//               "<div>"+((this.isLeaseFixedAsset? WtfGlobal.getLocaleText("acc.field.LoNo") :((this.isConsignment? WtfGlobal.getLocaleText("acc.field.CRNo"): ((this.businessPerson =="Customer")?WtfGlobal.getLocaleText("acc.field.CI/SONo"):WtfGlobal.getLocaleText("acc.field.VI/PONo"))))))+"</div>",
//                 WtfGlobal.getLocaleText("acc.invoice.gridRemark"),//Reason
////                WtfGlobal.getLocaleText("acc.invoiceList.expand.unitPrice"),//Unit Price
////                (this.isOrder && !this.isQuotation)?'':WtfGlobal.getLocaleText("acc.invoiceList.expand.dsc"),//Discount
////                WtfGlobal.getLocaleText("acc.invoiceList.expand.tax"),//Tax
////                WtfGlobal.getLocaleText("acc.invoiceList.expand.amt"),//Amount
//                "                  "];
//        	var gridHeaderText = this.withInvMode?WtfGlobal.getLocaleText("acc.invoiceList.expand.pListNonInv"):WtfGlobal.getLocaleText("acc.invoiceList.expand.pList");
//            header = "<span class='gridHeader'>"+gridHeaderText+"</span>";   //Product List
//            var custArr = [];
//            custArr = WtfGlobal.appendCustomColumn(custArr,GlobalColumnModelForProduct[this.moduleid]);//At line level, first Product & Services related fields are add then other fields
//            custArr = WtfGlobal.appendCustomColumn(custArr,GlobalColumnModel[this.moduleid]);
//            if(this.moduleid==Wtf.Acc_Delivery_Order_ModuleId || this.moduleid==Wtf.Acc_Goods_Receipt_ModuleId || this.moduleid==Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId || this.moduleid==Wtf.Acc_FixedAssets_DeliveryOrder_ModuleId || this.moduleid==Wtf.Acc_ConsignmentDeliveryOrder_ModuleId || this.moduleid==Wtf.Acc_Consignment_GoodsReceiptOrder_ModuleId 
//                    || this.moduleid==Wtf.Acc_Lease_DO){
//                var arrayLength=arr.length;
//                for(var cnt1=0;cnt1<custArr.length;cnt1++){
//                    if(custArr[cnt1].header != undefined )
//                        arr[arrayLength+cnt1]=custArr[cnt1].header;
//                }       
//            }
//            var count=0;
//            for(var i=0;i<arr.length;i++){
//                if(arr[i] != ""){
//                    count++;
//                }
//            }
//            var widthInPercent=100/count;
//            var minWidth = count*100 + 40;
//            header += "<div style='width: 100%;min-width:"+minWidth+"px'>";
//            header += "<span class='gridNo' style='font-weight:bold;'>"+WtfGlobal.getLocaleText("acc.cnList.Sno")+"</span>";
//            for(i=0;i<arr.length;i++){
//                header += "<span class='headerRow' style='width:"+widthInPercent+"% ! important;'>" + arr[i] + "</span>";
//            }
//            header += "</div><div style='width: 100%;min-width:"+minWidth+"px'><span class='gridLine'></span></div>";   
//            header += "<div style='width: 100%;min-width:"+minWidth+"px'>";
//            for(i=0;i<this.expandStore.getCount();i++){
//                rec=this.expandStore.getAt(i);
//                var productname=this.withInvMode?rec.data['productdetail']: rec.data['productname'];
//
//                //Column : S.No.
//                header += "<span class='gridNo'>"+(i+1)+".</span>";
//
//                //Column : Product Id for Inventory
//                if(!this.withInvMode)
//                    var pid=rec.data['pid'];
//                    var productid=rec.data['productid']; // ERP-13247 [SJ]
//                    header += "<span class='gridRow'  wtf:qtip='"+pid+"' style='width:"+widthInPercent+"% ! important;'><a class='jumplink' wtf:qtip='"+pid+"' href='#' onClick='javascript:Wtf.onCellClickProductDetails(\""+productid+"\","+this.isFixedAsset+")'>"+Wtf.util.Format.ellipsis(pid,15)+"</a></span>"; // ERP-13247 [SJ]
//                  //  header += "<span class='gridRow' style='width: 7.5%'>"+rec.data['pid']+"&nbsp;</span>";
//
//                //Column : Product Name
//                header += "<span class='gridRow' style='width:"+widthInPercent+"% ! important;'  wtf:qtip='"+productname+"'><a class='jumplink' wtf:qtip='"+productname+"' href='#' onClick='javascript:Wtf.onCellClickProductDetails(\""+productid+"\","+this.isFixedAsset+")'>"+Wtf.util.Format.ellipsis(productname,15)+"</a></span>"; // ERP-13247 [SJ]
//
//                if(!this.isCustomer && !this.isQuotation && !this.isOrder && Wtf.account.companyAccountPref.countryid == '203')
//                    header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>"+rec.data['permit']+"&nbsp;</span>";
//                else if(!this.withInvMode){
//                    var type = "";
//                    type = rec.data['type']
//                 header += "<span class='gridRow' wtf:qtip='"+type+"' style='width:"+widthInPercent+"% ! important;'>"+Wtf.util.Format.ellipsis(type,15)+"</span>";
//                  //  header += "<span class='gridRow' style='width: 7.5%'>"+type+"</span>";
//                }
//                else {
//                    header += "<span class='gridRow' style='width:"+widthInPercent+"% ! important;'>&nbsp;</span>";
//                }
//
////                //Part No
////                if(rec.data['partno'] != ""){
////                    header += "<span class='gridRow' style='word-wrap:break-word;width: "+widthInPercent+"% ! important;'>"+rec.data['partno']+"</span>";
////                } else {
////                    header += "<span class='gridRow' style='width:"+widthInPercent+"% ! important;'>&nbsp;</span>";
////                }
//                
//                //Quantity
//                header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>"+rec.data['quantity']+" "+rec.data['unitname']+"</span>";
//                
//                //Delivered Quantity
//                header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>"+rec.data['dquantity']+" "+rec.data['unitname']+"</span>";
//
//
//                //Link TO
//                if(rec.data['linkto']!="")
//                    header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>"+rec.data['linkto']+"</span>";
//                else
//                    header += "<span class='gridRow' style='width:"+widthInPercent+"% ! important;'>&nbsp;</span>";
//                
//                //Reason
//               if(rec.data['remark']!="")
//                    header += "<span class='gridRow' style='width:"+widthInPercent+"% ! important;'>"+rec.data['remark']+"</span>";
//                else
//                    header += "<span class='gridRow' style='width:"+widthInPercent+"% ! important;'>&nbsp;</span>";
//               if(this.moduleid==Wtf.Acc_Delivery_Order_ModuleId || this.moduleid==Wtf.Acc_Goods_Receipt_ModuleId ||  this.moduleid==Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId || this.moduleid==Wtf.Acc_FixedAssets_DeliveryOrder_ModuleId || this.moduleid==Wtf.Acc_ConsignmentDeliveryOrder_ModuleId || this.moduleid==Wtf.Acc_Consignment_GoodsReceiptOrder_ModuleId 
//                      || this.moduleid==Wtf.Acc_Lease_DO ){
//                   for(var cnt2=0;cnt2<custArr.length;cnt2++){
//                        if(rec.data[custArr[cnt2].dataIndex]!=undefined && rec.data[custArr[cnt2].dataIndex]!="null")
//                        //    header += "<span class='gridRow' style='width: 7.5% ! important;'>"+rec.data[custArr[cnt2].dataIndex]+"&nbsp;</span>";
//                           header += "<span class='gridRow' wtf:qtip='"+rec.data[custArr[cnt2].dataIndex]+"' style='width:"+widthInPercent+"% ! important;'>"+Wtf.util.Format.ellipsis(rec.data[custArr[cnt2].dataIndex],15)+"&nbsp;</span>";
//                         else
//                            header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>&nbsp;&nbsp;</span>";
//                   }
//               }
//                 header +="<br>";
//            }
//            header +="</div>";
//            disHtml += "<div class='expanderContainer1'>" + header + "</div>";
//        }
//        this.expanderBody.innerHTML = disHtml;
//    },
    
fillExpanderBody: function(){
    var disHtml = "";
    this.custArr = [];
    this.custArr = WtfGlobal.appendCustomColumn(this.custArr, GlobalColumnModelForProduct[this.moduleid]);
    this.custArr = WtfGlobal.appendCustomColumn(this.custArr, GlobalColumnModel[this.moduleid]);
    var expenseInvHeader = this.getExpenseInvoiceHeader();     //expenseInvHeader: HTML text
    var ProductHeader = this.getProductHeader();              //ProductHeader[0]: HTML text,  ProductHeader[1]: minWidth,  ProductHeader[2]:widthInPercent
 
    var prevBillid = "";
    var sameParent = false;
        
    for(var i=0;i<this.expandStore.getCount();i++){
        var header = "";
        var rec = this.expandStore.getAt(i);
        var isexpenseinv = rec.data.isexpenseinv ? rec.data.isexpenseinv : false;
            
        var currentBillid = rec.data['billid'];
        if (prevBillid != currentBillid) {             // Check if last record also has same 'billid'.  
            prevBillid = currentBillid;
            sameParent = false;
        } else {
            sameParent = true;
        }
            
        if (isexpenseinv) {
            header = this.getExpInvoiceExpanderData(rec, sameParent);
        } else {
            header = this.getProductExpanderData(rec, sameParent, ProductHeader[1], ProductHeader[2]);
        }
        var moreIndex = this.grid.getStore().findBy(
            function(record, id) {
                if (record.get('billid') === rec.data['billid']) {
                    return true;  // a record with this data exists 
                }
                return false;  // there is no record in the store with this data
            }, this);
        if (moreIndex != -1) {
            var body = Wtf.DomQuery.selectNode('tr:nth(2) div.x-grid3-row-body', this.grid.getView().getRow(moreIndex));
            if (isexpenseinv) {
                disHtml = "<div class='expanderContainer' style='width:100%'>" + expenseInvHeader + header + "</div>";
            } else {
                disHtml = "<div class='expanderContainer1'>" + ProductHeader[0] + header + "</div>";
            }
            body.innerHTML = disHtml;
            if (this.expandButtonClicked) {
                this.expander.suspendEvents('expand');              //suspend 'expand' event of RowExpander only in case of ExpandAll.
                this.expander.expandRow(moreIndex);                // After data set to Grid Row, expand row forcefully.
            }
        }
    }
},
getExpenseInvoiceHeader:function(){
    var arr = [];
    //        var expInvHeaderArray = [];
    arr = [WtfGlobal.getLocaleText("acc.invoiceList.accName"), WtfGlobal.getLocaleText("acc.invoiceList.expand.amt"), WtfGlobal.getLocaleText("acc.invoiceList.expand.dsc"), WtfGlobal.getLocaleText("acc.invoiceList.expand.tax"), WtfGlobal.getLocaleText("acc.invoiceList.totAmt"), '                  '];
    var header = "<span class='gridHeader'>" + WtfGlobal.getLocaleText("acc.invoiceList.expand.accList") + "</span>";   //Account List
    header += "<span class='gridNo' style='font-weight:bold;'>" + WtfGlobal.getLocaleText("acc.cnList.Sno") + "</span>";
    for (var i = 0; i < arr.length; i++) {
        header += "<span class='headerRow'>" + arr[i] + "</span>";
    }
    header += "<span class='gridLine'></span>";
    return header;
},
getExpInvoiceExpanderData: function(rec, sameParent, minWidth, widthInPercent) {
    var accountname = rec.data['accountname'];
    if (!sameParent) {
        this.expenseHeader = "";
        this.srNumber = 0;
    }
    this.expenseHeader += "<span class='gridNo'>" + (++this.srNumber) + ".</span>";
    this.expenseHeader += "<span class='gridRow'  wtf:qtip='" + accountname + "'>" + Wtf.util.Format.ellipsis(accountname, 15) + "</span>";
    this.expenseHeader += "<span class='gridRow' style='width: 7.5%'>" + WtfGlobal.addCurrencySymbolOnly(rec.data.rate, rec.data['currencysymbol'], [true]) + "</span>";
    this.expenseHeader += "<span class='gridRow' style='width: 7.5%'>" + rec.data.prdiscount + "% " + "&nbsp;</span>";
    this.expenseHeader += "<span class='gridRow' style='width: 7.5%'>" + rec.data.prtaxpercent + "% " + "&nbsp;</span>";
    var amount = rec.data.rate - (rec.data.rate * rec.data.prdiscount) / 100;
    amount += (amount * rec.data.prtaxpercent / 100);
    this.expenseHeader += "<span class='gridRow' style='width: 7.5%'>" + WtfGlobal.addCurrencySymbolOnly(amount, rec.data['currencysymbol'], [true]) + "</span>";
    this.expenseHeader += "<br>";
    return this.expenseHeader;
},
getProductHeader: function(){
    var productTypeText = this.withInvMode ? WtfGlobal.getLocaleText("acc.invoiceList.expand.pTypeNonInv") : WtfGlobal.getLocaleText("acc.invoiceList.expand.pType");
    var productHeaderArray = [];
    var hideShowFlag=false;
    if(this.moduleid== Wtf.Acc_Delivery_Order_ModuleId && Wtf.account.companyAccountPref.calculateproductweightmeasurment){
        hideShowFlag=true;
    }
    var arr = [];
    arr = [(this.withInvMode?'':(this.isFixedAsset)?WtfGlobal.getLocaleText("acc.fixed.asset.id"):WtfGlobal.getLocaleText("acc.invoiceList.expand.PID")), //PID for Inventory
    (this.withInvMode?WtfGlobal.getLocaleText("acc.invoiceList.expand.pDetailsNonInv"):(this.isFixedAsset)?WtfGlobal.getLocaleText("acc.fixed.asset.name"):WtfGlobal.getLocaleText("acc.invoiceList.expand.pName")),//Product Details or Product Name //Product Details or Product Name
    (this.moduleid=== Wtf.Acc_Delivery_Order_ModuleId||this.moduleid=== Wtf.Acc_Goods_Receipt_ModuleId ? WtfGlobal.getLocaleText("acc.masterConfig.taxes.gridDescription"):""),//Product Details or Product Description
    (this.isCustomer ?
        productTypeText : (Wtf.account.companyAccountPref.countryid == '203' && !this.isQuotation && !this.isOrder) ?
        WtfGlobal.getLocaleText("acc.field.PermitNo.") : productTypeText), //Product Type
        
    WtfGlobal.getLocaleText("acc.invoiceList.expand.qty"), //Quantity
    (this.businessPerson == "Customer") ? WtfGlobal.getLocaleText("acc.accPref.deliQuant") : WtfGlobal.getLocaleText("acc.accPref.recQuant"), //Delivered Quantity
    (hideShowFlag?WtfGlobal.getLocaleText("acc.productList.unitWeight"):''),//Unit Weight
    (hideShowFlag?WtfGlobal.getLocaleText("acc.productList.unitWeightWithPackaging"):''),//Unit Weight
    (hideShowFlag?WtfGlobal.getLocaleText("acc.productList.unitVolume"):''),//Unit Volume
    (hideShowFlag?WtfGlobal.getLocaleText("acc.productList.unitVolumeWithPackaging"):''),//Unit Volume with Packageing
    "<div>" + ((this.isLeaseFixedAsset ? WtfGlobal.getLocaleText("acc.field.LoNo") : ((this.isConsignment ? WtfGlobal.getLocaleText("acc.field.CRNo") : ((this.businessPerson == "Customer") ? WtfGlobal.getLocaleText("acc.field.CI/SONo") : WtfGlobal.getLocaleText("acc.field.VI/PONo")))))) + "</div>",
    WtfGlobal.getLocaleText("acc.invoice.gridRemark"), //Reason
    (CompanyPreferenceChecks.displayUOMCheck() === true ? WtfGlobal.getLocaleText("acc.product.displayUoMLabel"):''),//Display UOM,
    (this.isConsignment)? (WtfGlobal.getLocaleText("acc.invoiceList.closedManually")):'',
    "                  "];

    //Add Build Assembly No. column only in Delivery Order Report
    if(this.moduleid==Wtf.Acc_Delivery_Order_ModuleId){
        arr.splice(3, 0, WtfGlobal.getLocaleText("acc.invoiceList.expand.do.bomcode")); //Build Assembly No.
        arr.splice(4, 0, WtfGlobal.getLocaleText("acc.field.bomCode"));     //BOM Code
    }
    
    var gridHeaderText = this.withInvMode ? WtfGlobal.getLocaleText("acc.invoiceList.expand.pListNonInv") : WtfGlobal.getLocaleText("acc.invoiceList.expand.pList");
    var header = "<span class='gridHeader'>" + gridHeaderText + "</span>";   //Product List
    if (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId || this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId || this.moduleid == Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId || this.moduleid == Wtf.Acc_FixedAssets_DeliveryOrder_ModuleId || this.moduleid == Wtf.Acc_ConsignmentDeliveryOrder_ModuleId || this.moduleid == Wtf.Acc_Consignment_GoodsReceiptOrder_ModuleId
        || this.moduleid == Wtf.Acc_Lease_DO) {
        var arrayLength = arr.length;
        for (var cnt1 = 0; cnt1 < this.custArr.length; cnt1++) {
            if (this.custArr[cnt1].header != undefined)
                arr[arrayLength + cnt1] = this.custArr[cnt1].header;
        }
    }
    var count = 0;
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] != "") {
            count++;
        }
    }
    var widthInPercent = 100 / count;
    var minWidth = count * 100 + 40;
    header += "<div style='width: 100%;min-width:" + minWidth + "px'>";
    header += "<span class='gridNo' style='font-weight:bold;'>" + WtfGlobal.getLocaleText("acc.cnList.Sno") + "</span>";
    for (i = 0; i < arr.length; i++) {
        header += "<span class='headerRow' style='width:" + widthInPercent + "% ! important;'>" + arr[i] + "</span>";
    }
    header += "</div><div style='width: 100%;min-width:" + minWidth + "px'><span class='gridLine'></span></div>";
    productHeaderArray.push(header);
    productHeaderArray.push(minWidth);
    productHeaderArray.push(widthInPercent);
    return productHeaderArray;
},
getProductExpanderData: function(rec,sameParent, minWidth, widthInPercent){
    var productname = this.withInvMode ? rec.data['productdetail'] : rec.data['productname'];

    if (!sameParent) {
        this.Repeatheader = "";
        this.serialNumber = 0;
    }
    this.Repeatheader += "<div style='width: 100%;min-width:" + minWidth + "px'>";
    //Column : S.No.
    this.Repeatheader += "<span class='gridNo'>" + (++this.serialNumber) + ".</span>";

    //Column : Product Id for Inventory
    if (!this.withInvMode)
        var pid = rec.data['pid'];
    var productid = rec.data['productid']; // ERP-13247 [SJ]
    this.Repeatheader += "<span class='gridRow'  wtf:qtip='" + pid + "' style='width:" + widthInPercent + "% ! important;'><a class='jumplink' wtf:qtip='" + pid + "' href='#' onClick='javascript:Wtf.onCellClickProductDetails(\"" + productid + "\"," + this.isFixedAsset + ")'>" + Wtf.util.Format.ellipsis(pid, 15) + "</a></span>"; // ERP-13247 [SJ]

    //Column : Product Name
    this.Repeatheader += "<span class='gridRow' style='width:" + widthInPercent + "% ! important;'  wtf:qtip='" + productname + "'><a class='jumplink' wtf:qtip='" + productname + "' href='#' onClick='javascript:Wtf.onCellClickProductDetails(\"" + productid + "\"," + this.isFixedAsset + ")'>" + Wtf.util.Format.ellipsis(productname, 15) + "</a></span>"; // ERP-13247 [SJ]
    
    //Column : Product description
    if(rec.data['description']!=null && rec.data['description']!=""){
        var productdesc=rec.data['description'];
	productdesc = productdesc.replace(/<\/?[^>]+(>|$)/g, "");   
	if(productdesc=="") {
            productdesc='&nbsp';    //If HTML Content is <br> only.
        }
    }else if(rec.data['desc']!=null && rec.data['desc']!=""){
        var productdesc=rec.data['desc'];
	productdesc = productdesc.replace(/<\/?[^>]+(>|$)/g, "");   
	if(productdesc=="") {
            productdesc='&nbsp';    //If HTML Content is <br> only.
        }
    }else{
        var productdesc='&nbsp';
    }
    (this.moduleid=== Wtf.Acc_Delivery_Order_ModuleId||this.moduleid=== Wtf.Acc_Goods_Receipt_ModuleId ? this.Repeatheader += "<span class='gridRow'  wtf:qtip='"+productdesc+"' style='width: "+widthInPercent+"% ! important;'>"+Wtf.util.Format.ellipsis(productdesc,15)+"</a></span>":""); 
    
    //Add Build Assembly No. column only in Delivery Order Report
    if(this.moduleid==Wtf.Acc_Delivery_Order_ModuleId){
        //Auto-Generated Build Assembly No.
        this.Repeatheader += "<span class='gridRow'  style='width: " + widthInPercent + "% ! important;'>" + rec.data['autobuildnumber'] + "&nbsp;</span>";
        //BOM Code
        this.Repeatheader += "<span class='gridRow'  style='width: " + widthInPercent + "% ! important;'>" + rec.data['bomCode'] + "&nbsp;</span>";
    }
   
    if (!this.isCustomer && !this.isQuotation && !this.isOrder && Wtf.account.companyAccountPref.countryid == '203')
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + rec.data['permit'] + "&nbsp;</span>";
    else if (!this.withInvMode) {
        var type = "";
        type = rec.data['type']
        this.Repeatheader += "<span class='gridRow' wtf:qtip='" + type + "' style='width:" + widthInPercent + "% ! important;'>" + Wtf.util.Format.ellipsis(type, 15) + "</span>";
    }
    else {
        this.Repeatheader += "<span class='gridRow' style='width:" + widthInPercent + "% ! important;'>&nbsp;</span>";
    }

    //Quantity
    var v = rec.data['quantity'];
    var quantity = WtfGlobal.convertInDecimalWithDecimalDigit(v,"",Wtf.QUANTITY_DIGIT_AFTER_DECIMAL);
    this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + quantity + " " + rec.data['unitname'] + "</span>";

    //Delivered Quantity
    var v1 = rec.data['dquantity'];
    var dquantity = WtfGlobal.convertInDecimalWithDecimalDigit(v1,"",Wtf.QUANTITY_DIGIT_AFTER_DECIMAL);
    this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + dquantity + " " + rec.data['unitname'] + "</span>";
        
    if(this.moduleid == Wtf.Acc_Delivery_Order_ModuleId && Wtf.account.companyAccountPref.calculateproductweightmeasurment){//when in company prefrences option is true
        //Column : Unit Weight
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + WtfGlobal.weightRenderer(rec.data['productweightperstockuom'])+ "</span>";
        //Column : Unit Weight with Packageing
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + WtfGlobal.weightRenderer(rec.data['productweightincludingpakagingperstockuom']) + "</span>";
        //Column : Unit Weight
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + WtfGlobal.volumeRenderer(rec.data['productvolumeperstockuom'])+ "</span>";
        //Column : Unit Weight with Packageing
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + WtfGlobal.volumeRenderer(rec.data['productvolumeincludingpakagingperstockuom']) + "</span>";
    }
    //Link TO
    if (rec.data['linkto'] != "")
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + rec.data['linkto'] + "</span>";
    else
        this.Repeatheader += "<span class='gridRow' style='width:" + widthInPercent + "% ! important;'>&nbsp;</span>";

   //Reason
    if (rec.data['remark'] != "")
        //    this.Repeatheader += "<span class='gridRow' wtf:qtip='"+ rec.data['remark'] +"' style='width:" + widthInPercent + "% ! important;'>" + Wtf.util.Format.ellipsis(rec.data['remark'],20) + "</span>";
    this.Repeatheader += "<span class='gridRow' wtf:qtip='"+ rec.data['remark'] +"' style='width:" + widthInPercent + "% ! important;'>" + Wtf.util.Format.ellipsis(rec.data['remark'],15) + "</span>";
    else
        this.Repeatheader += "<span class='gridRow' style='width:" + widthInPercent + "% ! important;'>&nbsp;</span>";
    var displayuom = rec.data['displayUOM'];
    if (displayuom == null || displayuom == "") {
        displayuom = '&nbsp';
    }
    if (CompanyPreferenceChecks.displayUOMCheck() === true)
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + displayuom + "&nbsp;</span>";
    
   if(this.isCustomer && this.isConsignment){
        var lineLevelstatus=rec.json.lineLevelstatus;//status of line level
           var itemqtyLinkedinSR=rec.data['itemqtyLinkedinSR'];
        var recordso = WtfGlobal.searchRecord(this.Store, rec.json.billid, 'billid');//Global record
          if(lineLevelstatus != true && recordso.data.dostatus =="Open" && getRoundofValue(itemqtyLinkedinSR) >0 ){ 
            this.Repeatheader += "<span class='gridRow'  wtf:qtip='" + 'Mark Close' + "' style='width: " + widthInPercent + "% ! important;'><a class='jumplink' wtf:qtip='" + 'Mark Item As Closed' + "' href='#' onClick='javascript:Wtf.onCellClickCloseDoDetails(\"" + rec.json.dorowid + "\"," + this.isCustomer + ",\"" + rec.json.billid + "\")'>" + Wtf.util.Format.ellipsis('Mark Close', 10) + "</a></span>"; 
         }else if (lineLevelstatus == true){
          //  this.Repeatheader +="<span class='gridRow' style='width: "+widthInPercent+"% ! important; '><span style='margin:-2px 14px;'>"+Wtf.util.Format.ellipsis('Manually Closed', 25) +"&nbsp;</span></span>";
          this.Repeatheader +="<span class='gridRow' style='width: "+widthInPercent+"% ! important; '><span style='margin:-2px 14px;'>"+Wtf.util.Format.ellipsis('Manually Closed', 20) +"&nbsp;</span></span>";
        }else{
         //  this.Repeatheader +="<span class='gridRow' style='width: "+widthInPercent+"% ! important; '><span style='margin:-2px 14px;'>"+Wtf.util.Format.ellipsis('Closed', 25) +"&nbsp;</span></span>";
        this.Repeatheader +="<span class='gridRow' style='width: "+widthInPercent+"% ! important; '><span style='margin:-2px 14px;'>"+Wtf.util.Format.ellipsis('Closed', 20) +"&nbsp;</span></span>";
        }
    }

    if (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId || this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId || this.moduleid == Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId || this.moduleid == Wtf.Acc_FixedAssets_DeliveryOrder_ModuleId || this.moduleid == Wtf.Acc_ConsignmentDeliveryOrder_ModuleId || this.moduleid == Wtf.Acc_Consignment_GoodsReceiptOrder_ModuleId
        || this.moduleid == Wtf.Acc_Lease_DO) {
        for (var cnt2 = 0; cnt2 < this.custArr.length; cnt2++) {
            if (rec.data[this.custArr[cnt2].dataIndex] != undefined && rec.data[this.custArr[cnt2].dataIndex] != "null" && rec.data[this.custArr[cnt2].dataIndex] !="") {
                if (this.custArr[cnt2].xtype == "datefield") {
                    var linelevel_datefield = WtfGlobal.onlyDateRendererTZ(new Date(rec.data[this.custArr[cnt2].dataIndex] * 1));
                    this.Repeatheader += "<span class='gridRow' wtf:qtip='" + linelevel_datefield + "' style='width:" + widthInPercent + "% ! important;'>" + Wtf.util.Format.ellipsis(linelevel_datefield, 15) + "&nbsp;</span>";
                } else if(this.custArr[cnt2].fieldtype == 1 || this.custArr[cnt2].fieldtype == 13){
                    var regex = /(<([^>]+)>)/ig;
                    var val = rec.data[this.custArr[cnt2].dataIndex];
//                    val = val.replace(/(<([^>]+)>)/ig,"");
                    var tip = val.replace(/"/g,'&rdquo;');
                    this.Repeatheader += "<span class='gridRow' wtf:qtip='" + tip + "' style='width:" + widthInPercent + "% ! important;'>" + Wtf.util.Format.ellipsis(val, 15) + "&nbsp;</span>";
                }
                else
                    this.Repeatheader += "<span class='gridRow' wtf:qtip='" + rec.data[this.custArr[cnt2].dataIndex] + "' style='width:" + widthInPercent + "% ! important;'>" + Wtf.util.Format.ellipsis(rec.data[this.custArr[cnt2].dataIndex], 15) + "&nbsp;</span>";
            }   
            else
                this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>&nbsp;&nbsp;</span>";
        }
    }
    this.Repeatheader += "<br>";
    this.Repeatheader += "</div>";
    return this.Repeatheader;
 
},
onCellClick:function(g,i,j,e){
    //        if (this.isUnInvoiced){
    //            if (this.editBttn)
    //                this.editBttn.disable();
    //            
    //            if (this.copyInvBttn)
    //                this.copyInvBttn.disable();
    //
    //            if (this.deleteTrans)
    //                this.deleteTrans.disable();
    //             
    //             if (this.deleteTransPerm)
    //                this.deleteTransPerm.disable();
    //
    //            if (this.statUpBttn)
    //                this.statUpBttn.disable();
    //        }else{
    //            if (this.editBttn)
    //                this.editBttn.enable();
    //            
    //            if (this.copyInvBttn)
    //                this.copyInvBttn.enable();
    //
    //            if (this.deleteTransPerm)
    //                this.deleteTransPerm.enable();
    ////             
    //             if (this.deleteTrans)
    //                this.deleteTrans.enable();
    //             
    //            if (this.statUpBttn)
    //                this.statUpBttn.enable();
    //        }
    this.starCellClickHandler(g,i,j,e);
    e.stopEvent();
    var el=e.getTarget("a");
    if(el==null)return;
    var header=g.getColumnModel().getDataIndex(j);
    if(header=="entryno"){
        var accid=this.Store.getAt(i).data['journalentryid'];
        this.fireEvent('journalentry',accid,true);
    }
        if (header == "inventoryentryno") {
            var accid = this.Store.getAt(i).data['inventoryjeid'];
            this.fireEvent('journalentry', accid, true, null,null,null,null,this.startDate.getValue(),this.endDate.getValue());
        }
    if(header=="billno"){
        this.viewTransection(g,i,e)
    }
},
saveMyStateHandler: function(grid, state) {
    WtfGlobal.saveGridStateHandler(this, grid, state, this.moduleid, grid.gridConfigId, false);
},
getMyConfig: function() {
    WtfGlobal.getGridConfig (this.grid, this.moduleid, false, false);
    
    var statusForCrossLinkage = this.grid.getColumnModel().findColumnIndex("statusforcrosslinkage");
    if (statusForCrossLinkage != -1) {
        this.grid.getColumnModel().setHidden(statusForCrossLinkage, true);
    }
},
//    expandInvoice:function(id,exponly){
//        this.invID=id
//        if(exponly){
//            this.pagingToolbar.hide();
//            this.exponly=exponly;
//            this.Store.load();
//            this.Store.on('load',this.expandRow, this);
//        }
//    },
expandRow:function(){

    if(this.Store.getCount()==0){
        if(this.exportButton)this.exportButton.disable();
//        if(this.printButton)this.printButton.disable();
        //            var selTypeVal = this.typeEditor.getValue();
        var emptyTxt = "";
    //            if(selTypeVal == 3) {//deleted
    //                emptyTxt = this.deletedRecordsEmptyTxt;
    //            } else if(selTypeVal == 0 || selTypeVal == 4) {//All or Exclude deleted
    //                emptyTxt = this.emptytext1+(this.isOrder?"":"<br>"+this.emptytext2);
    //            } else if(selTypeVal == 1) {//Cash Sales
    //                emptyTxt = this.isOrder?"":"<br>"+this.emptytext2;
    //            } else if(selTypeVal == 2) {//Invoice
    //                emptyTxt = this.emptytext1;
    //            }
    //            if(this.isQuotation){
    //            	emptyTxt = this.emptytext3;
    //            }
    //            this.grid.getView().emptyText=emptyTxt;
    //            this.grid.getView().refresh();
    }else{
        if(this.exportButton)this.exportButton.enable();
//        if(this.printButton)this.printButton.enable();
    }
    this.Store.filter('billid',this.invID);
//        if(this.exponly)
//            this.expander.toggleRow(0);
},
loadStore:function(){
    this.Store.load({
        params : {
            start : 0,
            limit : this.pP.combo.value,
            ss : this.quickPanelSearch.getValue()
        }
    });
    this.Store.on('load',this.storeloaded,this);
},
deleteTransactionCheckBefore:function(del){            //check whether record from POS or not
    this.recArr = this.grid.getSelectionModel().getSelections();
    var biilNo;
    var isFirst=true;
    
    var isNonLatestFreeGiftDO=false;
    var nonDeletedNonLatestFreeGiftDO='';
    
    for(var k=0;k< this.recArr.length;k++){
        if( this.recArr[k].data.isFromPOS  && isFirst ){
            biilNo=this.recArr[k].data.billno;
            isFirst=false;
        }else if(this.recArr[k].data.isFromPOS){
            biilNo+=", "+this.recArr[k].data.billno;
        }
        
        if(this.recArr[k].data.isNonLatestFreeGiftDO){
            isNonLatestFreeGiftDO = true;
            nonDeletedNonLatestFreeGiftDO += this.recArr[k].data.billno+", ";
        }
    }
    /*
     * Do not allow deleting non-latest free gift DO 
     */ 
    if(isNonLatestFreeGiftDO){
        if(nonDeletedNonLatestFreeGiftDO != ''){
           nonDeletedNonLatestFreeGiftDO = nonDeletedNonLatestFreeGiftDO.substring(0,nonDeletedNonLatestFreeGiftDO.length-2);  
           WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.malaysiangst.blockFreeGiftJEDelete")+"<br>"+nonDeletedNonLatestFreeGiftDO ], 2);
           return;
        }
    }
    if(biilNo !=undefined ){
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),""+biilNo+" "+WtfGlobal.getLocaleText("acc.rem.250"),function(btn){
            if(btn=="yes") {
                this.handleDelete(del);
            }
        },this);
    } else {
        this.handleDelete(del);
    }
},
handleDelete:function(del){
    var delFlag=del;
    if(this.grid.getSelectionModel().hasSelection()==false){
        WtfComMsgBox(34,2);
        return;
    }
    var data=[];
    var arr=[];
    this.recArr = this.grid.getSelectionModel().getSelections();
    this.withInvMode = this.recArr[0].data.withoutinventory;
    this.grid.getSelectionModel().clearSelections();
    WtfGlobal.highLightRowColor(this.grid,this.recArr,true,0,2);
    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.rem.146")+" "+this.label+"?",function(btn){
        if(btn!="yes") {
            for(var i=0;i<this.recArr.length;i++){
                var ind=this.Store.indexOf(this.recArr[i])
                var num= ind%2;
                WtfGlobal.highLightRowColor(this.grid,this.recArr[i],false,num,2,true);
            }
            return;
        }
        for(i=0;i<this.recArr.length;i++){
            arr.push(this.Store.indexOf(this.recArr[i]));
        }
        var mode=(this.withInvMode?23:15);
        if(this.isOrder){
            mode=(this.withInvMode?54:44);
        }
        data= WtfGlobal.getJSONArray(this.grid,true,arr);
        if(this.businessPerson=="Customer"){
            if(delFlag=='del' ){
                this.ajxUrl = "ACCInvoice/deleteDeliveryOrders.do";
            }else if(delFlag=='delp' ){
                this.ajxUrl = "ACCInvoice/deleteDeliveryOrdersPermanent.do";  
            }
        } else {
            if(delFlag=='del' ){
                this.ajxUrl = "ACCGoodsReceipt/deleteGoodsReceiptOrders.do";
            }else if(delFlag=='delp' ){
                this.ajxUrl = "ACCGoodsReceipt/deleteGoodsReceiptOrdersPermanent.do";
            }
        }
        
            
        Wtf.Ajax.requestEx({
            url:this.ajxUrl,
            //                url: Wtf.req.account+this.businessPerson+'Manager.jsp',
            params:{
                data:data,
                mode:mode,
                isFixedAsset:this.isFixedAsset,
                isMultiGroupCompanyFlag:Wtf.account.companyAccountPref.activateGroupCompaniesFlag,
                isLeaseFixedAsset:this.isLeaseFixedAsset,
                isConsignment:this.isConsignment
            }
        },this,this.genSuccessResponse,this.genFailureResponse);
    },this);
},
genSuccessResponse:function(response){
        var superThis = this;
        WtfComMsgBox([this.label, response.msg], response.success * 2 + 2, "", "", function (btn) {
            if (btn == "ok") {
                for (var i = 0; i < superThis.recArr.length; i++) {
                    var ind = superThis.Store.indexOf(superThis.recArr[i])
                    var num = ind % 2;
                    WtfGlobal.highLightRowColor(superThis.grid, superThis.recArr[i], false, num, 2, true);

                    var linkingWnd = Wtf.getCmp("linkinginfo_" + superThis.recArr[i].data.billid); //ERP-19925

                    if (linkingWnd != undefined || linkingWnd != null) {

                        linkingWnd.getStore().reload();
                    }
                    var unlinkWnd = Wtf.getCmp("unlinkwin_" + superThis.recArr[i].data.billid);//ERP-19925
                    if (unlinkWnd != undefined || unlinkWnd != null) {
                        unlinkWnd.getStore().reload();
                    }
                }
                if (response.success) {
                    (function () {
                        superThis.loadStore();
                    }).defer(WtfGlobal.gridReloadDelay(), superThis);
                    Wtf.productStore.reload();
                    Wtf.productStoreSales.reload();
                }
            }
        });
    
},
    genFailureResponse:function(response){
    for(var i=0;i<this.recArr.length;i++){
        var ind=this.Store.indexOf(this.recArr[i])
        var num= ind%2;
        WtfGlobal.highLightRowColor(this.grid,this.recArr[i],false,num,2,true);
    }
    var msg=WtfGlobal.getLocaleText("acc.common.msg1");  //"Failed to make connection with Web Server";
    if(response.msg)msg=response.msg;
    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg],2);
},
//    makePayment:function(){
//        if(this.sm.getCount()==1){
//            var invoiceRecord = this.sm.getSelected();
//            this.withInvMode = invoiceRecord.data.withoutinventory;
//            if(this.withInvMode){
//                this.isCustomer? callBillingReceipt(true, invoiceRecord) : callBillingPayment(true, invoiceRecord);
//            } else {
//                this.isCustomer? callReceipt(true, invoiceRecord) : callPayment(true, invoiceRecord);
//            }
//            
//            /*if(this.operationType==Wtf.autoNum.Invoice) {
//                callReceipt(true, invoiceRecord);
//            } else if(this.operationType==Wtf.autoNum.BillingInvoice) {
//                callBillingReceipt(true, invoiceRecord);
//            } else if(this.operationType==Wtf.autoNum.GoodsReceipt) {
//                callPayment(true, invoiceRecord);
//            } else if(this.operationType==Wtf.autoNum.BillingGoodsReceipt) {
//                callBillingPayment(true, invoiceRecord);
//            }*/
//        }
//    },
getTransName:function(type){
    switch(type){
           case Wtf.autoNum.SalesOrder:return "Sales Order";
           case Wtf.autoNum.Invoice:return "Invoice";
           case Wtf.autoNum.PurchaseOrder:return "Purchase Order";
           case Wtf.autoNum.GoodsReceipt:return "Vendor Invoice";
           case Wtf.autoNum.BillingSalesOrder:return "Sales Order";
           case Wtf.autoNum.BillingInvoice:return "Invoice";
           case Wtf.autoNum.BillingPurchaseOrder:return "Purchase Order";
           case Wtf.autoNum.BillingGoodsReceipt:return "Vendor Invoice";
           case Wtf.autoNum.Quotation:return "Quotation";
           case Wtf.autoNum.DeliveryOrder:return "Delivery Order";
    }
    },showAdvanceSearch: function() {
    showAdvanceSearch(this, this.searchparam, this.filterAppend);
    },configurAdvancedSearch: function() {
    this.objsearchComponent.show();
    this.objsearchComponent.advGrid.advSearch = true;
    this.objsearchComponent.advGrid.getComboData();
    this.AdvanceSearchBtn.disable();
    this.doLayout();
        
},
filterStore: function(json, filterConjuctionCriteria) {
    /**
      * ERP-33751 - Start Date Required for saved Search
      */        
    this.objsearchComponent.advGrid.sdate = this.startDate.getValue(); 
    this.objsearchComponent.advGrid.edate = this.endDate.getValue();
    this.searchJson = json;
    this.filterConjuctionCrit = filterConjuctionCriteria;
    this.Store.baseParams = {
        pendingapproval:this.pendingapproval,
        flag: 1,
        searchJson: this.searchJson,
        moduleid: this.moduleid,
        filterConjuctionCriteria: filterConjuctionCriteria,
        isConsignment:this.isConsignment,
        isLeaseFixedAsset:this.isLeaseFixedAsset
    }
        this.Store.load({params: {ss: this.quickPanelSearch.getValue(), start: 0, limit: this.pP.combo.value}});
},
clearStoreFilter: function() {
    this.searchJson = "";
    this.filterConjuctionCrit = "";
    this.Store.baseParams = {
        pendingapproval:this.pendingapproval,
        flag: 1,
        searchJson: this.searchJson,
        moduleid: this.moduleid,
        filterConjuctionCriteria: this.filterConjuctionCrit,
        isConsignment:this.isConsignment,
        isLeaseFixedAsset:this.isLeaseFixedAsset
    }
        this.Store.load({params: {ss: this.quickPanelSearch.getValue(), start: 0, limit: this.pP.combo.value}});
this.objsearchComponent.hide();
this.AdvanceSearchBtn.enable();
this.doLayout();


},
globalInvoiceListGridAutoRefreshPublishHandler: function(response) {
    var res = eval("("+response.data+")");        
    if (res.success && ( Wtf.isAutoRefershReportonDocumentSave || (res.userSessionId != undefined && Wtf.userSessionId==res.userSessionId ))) {
        if (this.Store.baseParams && this.Store.baseParams.searchJson) {
            this.Store.baseParams.searchJson = "";
        }
            this.Store.load({
                params : {
                    start:0,
                    limit:this.pP.combo.value,
                    pagingFlag:true

                }
            });
        
        if (this.moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
            if(this.isLeaseFixedAsset)
                Wtf.notify.msg("", WtfGlobal.getLocaleText("acc.field.LeaseDeliveryOrderReportRefreshedmsg"));
            else 
                Wtf.notify.msg("", WtfGlobal.getLocaleText("acc.field.DOReportRefreshedmsg"));
        } else if (this.moduleid == Wtf.Acc_Goods_Receipt_ModuleId) {
            Wtf.notify.msg("", WtfGlobal.getLocaleText("acc.field.GRReportRefreshedmsg"));
        } else if (this.moduleid == Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId) {
            Wtf.notify.msg("", WtfGlobal.getLocaleText("acc.field.FixedAssetReceiptListRefreshedmsg"));
        } else if (this.moduleid == Wtf.Acc_FixedAssets_DeliveryOrder_ModuleId) {
            Wtf.notify.msg("", WtfGlobal.getLocaleText("acc.field.FixedAssetDeliveryListRefreshedmsg"));
        }
    }
},

handleUnlinkDocument: function() {
    var formrec = this.grid.getSelectionModel().getSelected();
    if(this.moduleid == Wtf.Acc_Delivery_Order_ModuleId || this.moduleid==Wtf.Acc_Goods_Receipt_ModuleId ){
        linkinfo(formrec.get('billid'), this.isOrder, this.businessPerson, formrec.get('billno'), "true", this.isFixedAsset,this.moduleid,true,this);
    }else{
        var url = this.getUnlinkDocURL(this.moduleid);
      
        Wtf.Ajax.requestEx({
            url: url,
            params: {
                billid: formrec.get('billid')
            }
        }, this, this.unlinkDocSuccessResponse , this.unlinkDocFailureResponse);
    }
},

getUnlinkDocURL: function(moduleid) {
    var url = "";
    if (moduleid == Wtf.Acc_Goods_Receipt_ModuleId) {
        url = "ACCGoodsReceiptCMN/unlinkGoodsReceiptDocuments.do";
    } else if (moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
        url = "ACCInvoiceCMN/unlinkDeliveryOrderDocuments.do";
    }
    return url;
},

unlinkDocSuccessResponse: function(response) {
    if (response.success) {
        Wtf.MessageBox.show({
            title: WtfGlobal.getLocaleText("acc.common.success"),
            msg: response.msg,
            buttons: Wtf.MessageBox.OK,
            icon: Wtf.MessageBox.INFO,
            scope: this,
            fn: function(btn ,text, option) {
                this.Store.reload();
            }
        });
    } else {
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),response.msg], 2);
    }
},

unlinkDocFailureResponse: function(response) {
    var msg = WtfGlobal.getLocaleText("acc.common.msg1"); // "Failed to make connection with Web Server";
    if (response.msg) {
        msg = response.msg;
    }
    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg],2);
},
    
showCustomerCustomFieldFlag: function(moduleid){
    var customerCustomFieldFlag = false;
    if(moduleid===Wtf.Acc_Delivery_Order_ModuleId || moduleid===Wtf.Acc_FixedAssets_DeliveryOrder_ModuleId || moduleid===Wtf.Acc_ConsignmentDeliveryOrder_ModuleId
        || moduleid===Wtf.Acc_Lease_DO){
        customerCustomFieldFlag = true;
    }
    return customerCustomFieldFlag;
},
    
showVendorCustomField: function(moduleid){
    var vendorCustomFieldFlag = false;
    if(moduleid===Wtf.Acc_Goods_Receipt_ModuleId || moduleid===Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId || moduleid===Wtf.Acc_Consignment_GoodsReceiptOrder_ModuleId){
        vendorCustomFieldFlag = true;
    }
    return vendorCustomFieldFlag;
},
    
handleViewDeliveryPlanner: function() {
    if (this.grid.getSelectionModel().hasSelection()) {
        var rec = this.grid.getSelectionModel().getSelected();
        getDeliveryPlannerTabView(this.moduleid, rec.data.billid)
    }
},
getImportExtraConfigForModule: function(moduleid) {
    var extraConfig = {};
    if (moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
        extraConfig.url = "ACCInvoice/importDeliveryOrders.do";
        extraConfig.isExcludeXLS = true;
    }else if (moduleid == Wtf.Acc_Goods_Receipt_ModuleId) {
        extraConfig.url = "ACCGoodsReceipt/importGoodsReceiptOrders.do";
        extraConfig.isExcludeXLS = true;
    } 
    return extraConfig;
},
getImportExtraParamsForModule: function(moduleid) {
    var extraParams = "";
    if (moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
        extraParams = "";
    } else if (moduleid == Wtf.Acc_Goods_Receipt_ModuleId) {
        extraParams = "";
    } 
    return extraParams;
},
getModuleNameForImport: function(moduleid) {
    var moduleName = "";
    if (moduleid == Wtf.Acc_Delivery_Order_ModuleId) {
        moduleName = "Delivery Order";
    }else if (moduleid == Wtf.Acc_Goods_Receipt_ModuleId) {
        moduleName = "GoodsReceiptOrder";
    }
    return moduleName;
},
getEditButtonToolTipMsg:function(moduleID){
    var returnMsg="";
    if (moduleID == Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId) {
        returnMsg = WtfGlobal.getLocaleText("acc.fixedasset.editfixedassetreceipt");
    } else {
        returnMsg = WtfGlobal.getLocaleText("acc.invoiceList.editO");
    }     
    return returnMsg;
},

viewApprovalHistory: function () {
    var rec = this.sm.getSelected();
    Wtf.Ajax.requestEx({
        url: "ACCReports/getApprovalhistory.do",
        params: {
            billid: rec.data.billid
        }
    }, this, function (response, request) {
        var historyWin = new Wtf.Window({
            height: 300,
            width: 475,
            iconCls: getButtonIconCls(Wtf.etype.deskera),
            title: WtfGlobal.getLocaleText("acc.field.ApprovalHistory"),
            bodyStyle: 'padding:5px;background-color:#ffffff;',
            layout: 'border',
            items: [
                {
                    region: 'north',
                    border: false,
                    height: 70,
                    bodyStyle: 'background-color:#ffffff;border-bottom:1px solid #bfbfbf;',
                    html: getTopHtml(WtfGlobal.getLocaleText("acc.field.ApprovalHistory"), WtfGlobal.getLocaleText("acc.field.ApproveHistoryof") + this.label + " <b>" + rec.data.billno + "</b>", "../../images/link2.jpg", true, "10px 0 0 5px", "7px 0px 0px 10px")
                },
                {
                    region: 'center',
                    border: false,
                    autoScroll: true,
                    bodyStyle: 'padding:5px;background-color:#f1f1f1;',
                    html: response.msg
                }
            ],
            buttons: [
                {
                    text: WtfGlobal.getLocaleText("acc.common.close"),
                    handler: function () {
                        historyWin.close();
                    }
                }
            ],
            autoScroll: true,
            modal: true
        });

        historyWin.show();

    }, function (response, request) {
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Erroroccurredwhileupdatingstatus")], 2);
    });
}
});









//






/********************** Sales/Purchase Return Order Report*************************/
function reportLink(consolidateFlag,isCustomer,isConsignment,isLeaseFixedAsset,isFixedAsset) {
    if(isConsignment=="true") {   //foor consifnment sales retunn on report get started by adding wizard
        isCustomer=="true"?callConsignmentSalesReturn(false,null,null,false,true):callConsignmentPurchaseReturn(false,null,null,false,true);
    } else if (isFixedAsset == "true") {
        isCustomer=="true"?(!WtfGlobal.EnableDisable(Wtf.UPerm.assetsalesreturn,Wtf.Perm.assetsalesreturn.createasret))?callFixedAssetSalesReturn(false,null,null,true): WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.createasret")): (!WtfGlobal.EnableDisable(Wtf.UPerm.assetpurchasereturn,Wtf.Perm.assetpurchasereturn.createapret))?callFixedAssetPurchaseReturn(false,null,null,true):WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.createapret"));
    }else{
        isCustomer=="true"?(isLeaseFixedAsset=="true"?((!WtfGlobal.EnableDisable(Wtf.UPerm.leaseorder, Wtf.Perm.leaseorder.createlret))?callLeaseSalesReturn(false,null,null,true): WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.createlret"))):callSalesReturnWindow(true)):callSalesReturnWindow(false);
    }
}
Wtf.account.SalesReturnListPanel=function(config){
    this.invID=null;
    //    this.exponly=null;
    this.isSRorPR=true;
    this.recArr=[];
    this.isCash=true;
    this.businessPerson=(config.isCustomer?'Customer':'Vendor');
    this.costCenterId = "";
    this.isfavourite=false;
    //    this.isPRorSR=true;
    this.isNoteReturns=false;
    this.consolidateFlag = config.consolidateFlag;
    this.isLeaseFixedAsset = (config.isLeaseFixedAsset)?config.isLeaseFixedAsset:false;
    this.isConsignment = (config.isConsignment)?config.isConsignment:false;
    this.isFixedAsset = (config.isFixedAsset)? config.isFixedAsset : false;
    this.index = "";
    this.extraFilters = config.extraFilters;
    if(config.extraFilters != undefined){//Cost Center Report View
        this.costCenterId = config.extraFilters.costcenter?config.extraFilters.costcenter:"";
    }
    Wtf.apply(this, config);
    this.moduleid=config.moduleid;
    //Flag to indicate whether Avalara integration is enabled and module is enabled for Avalara Integration or not
    this.isModuleForAvalara = (Wtf.account.companyAccountPref.avalaraIntegration && (config.moduleid == Wtf.Acc_Sales_Return_ModuleId)) ? true : false;
    this.label = config.label;
    this.isOrder=config.isOrder;
    this.nondeleted=false;
    this.deleted=false;
    this.UomSchemaType=Wtf.account.companyAccountPref.UomSchemaType;
    this.uPermType=this.isFixedAsset?(config.isCustomer?Wtf.UPerm.assetsalesreturn:Wtf.UPerm.assetpurchasereturn):config.isLeaseFixedAsset?Wtf.UPerm.leaseorder:this.isConsignment?(config.isCustomer?Wtf.UPerm.consignmentsales:Wtf.UPerm.consignmentpurchase):(config.isCustomer?Wtf.UPerm.salesreturn:Wtf.UPerm.purchasereturn);
    this.permType=this.isFixedAsset?(config.isCustomer?Wtf.Perm.assetsalesreturn:Wtf.Perm.assetpurchasereturn):config.isLeaseFixedAsset?Wtf.Perm.leaseorder:this.isConsignment?(config.isCustomer?Wtf.Perm.consignmentsales:Wtf.Perm.consignmentpurchase):(config.isCustomer?Wtf.Perm.salesreturn:Wtf.Perm.purchasereturn);
    this.exportPermType=config.isLeaseFixedAsset?this.permType.exportlret:this.isFixedAsset?(config.isCustomer?this.permType.exportasret:this.permType.exportapret):this.isConsignment?(config.isCustomer?this.permType.exportsalesconret:this.permType.exportpurchaseconret):config.isCustomer?this.permType.exportsret:(this.permType.exportpret);
    this.printPermType=config.isLeaseFixedAsset?this.permType.printlret:this.isFixedAsset?(config.isCustomer?this.permType.printasret:this.permType.printapret):this.isConsignment?(config.isCustomer?this.permType.printsalesconret:this.permType.printpurchaseconret):config.isCustomer?this.permType.printsret:(this.permType.printpret);
    this.removePermType=config.isLeaseFixedAsset?this.permType.deletelret:this.isFixedAsset?(config.isCustomer?this.permType.deleteasret:this.permType.deleteapret):this.isConsignment?(config.isCustomer?this.permType.deletesalesconret:this.permType.deletepurchaseconret):config.isCustomer?this.permType.deletesret:(this.permType.deletepret);
    this.editPermType=config.isLeaseFixedAsset?this.permType.editlret:this.isFixedAsset?(config.isCustomer?this.permType.editasret:this.permType.editapret):this.isConsignment?(config.isCustomer?this.permType.editsalesconret:this.permType.editpurchaseconret):config.isCustomer?this.permType.editsret:(this.permType.editpret);
    this.copyPermType=config.isCustomer?this.permType.copysret:this.permType.copypret;
    this.emailPermType=true; //=(config.isCustomer?this.permType.emailinvoice:this.permType.emailvendorinvoice);
    this.reportbtnshwFlag=config.reportbtnshwFlag;
    this.isMovementWarehouseMapping=Wtf.account.companyAccountPref.isMovementWarehouseMapping;
    if(this.reportbtnshwFlag== undefined || this.reportbtnshwFlag == null)
    {
        this.reportbtnshwFlag=false;
    }
       
    if (dojoInitCount <= 0) {
        dojo.cometd.init("../../bind");
        dojoInitCount++;
    }
    
    var channelName = "";
    if (this.moduleid == Wtf.Acc_Purchase_Return_ModuleId) {
        var tooltipmsg=WtfGlobal.getLocaleText("acc.ven.name")
        channelName =Wtf.ChannelName.PurchaseReturnReport;
    }else if(this.moduleid == Wtf.Acc_Sales_Return_ModuleId){
        var tooltipmsg=WtfGlobal.getLocaleText("acc.cnList.gridCustomerName")
        channelName = Wtf.ChannelName.SalesReturnReport;
    } else if (this.moduleid == Wtf.Acc_ConsignmentPurchaseReturn_ModuleId) {
        channelName =Wtf.ChannelName.ConsignmentPurchaseReturnReport;
    } 
    if (channelName != "") {
        dojo.cometd.subscribe(channelName, this, "globalInvoiceListGridAutoRefreshPublishHandler");
    }   
       
    this.expandRec = Wtf.data.Record.create ([
        {name:'productname'},
        {name:'productdetail'},
        {name:'prdiscount'},
        {name:'amount'},
        {name:'productid'},
        {name:'accountid'},
        {name:'accountname'},
        {name:'partno'},
        {name:'quantity'},
        {name:'dquantity'},
        {name:'unitname'},
        {name:'rate'},
        {name:'rateinbase'},
        {name:'externalcurrencyrate'},
        {name:'prtaxpercent'},
        {name:'orderrate'},
        {name:'desc', convert:WtfGlobal.shortString},
        {name:'productmoved'},
        {name:'currencysymbol'},
        {name:'currencyrate'},
        {name: 'type'},
        {name: 'pid'},
        {name:'carryin'},
        {name:'permit'},
        {name:'description'},
        {name:'remark'},
        {name:'linkto'},
        {name:'customfield'},
        {name:'isNoteAlso'},
        {name:'billid'},
        {name: 'productweightperstockuom'},
        {name: 'productweightincludingpakagingperstockuom'},
        {name: 'productvolumeperstockuom'},
        {name: 'displayUOM'},
        {name: 'productvolumeincludingpakagingperstockuom'}
    ]);
    
    this.expandStoreUrl = (this.isCustomer)?"ACCInvoiceCMN/getSalesReturnRows.do":"ACCGoodsReceiptCMN/getPurchaseReturnRows.do";
    
    
    
    this.expandStore = new Wtf.data.Store({
        url:this.expandStoreUrl,
        //        url:Wtf.req.account+this.businessPerson+'Manager.jsp',
        baseParams:{
            mode:14,
            dtype : 'report'//Display type report/transaction, used for quotation
        },
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        },this.expandRec)
    });

   
    this.GridRec = Wtf.data.Record.create ([
        {name:'billid'},
        {name:'companyid'},
        {name:'companyname'},
        {name:'journalentryid'},
        {name:'entryno'},
        {name:'billto'},
        {name:'orderamount'},
        {name:'shipto'},
        {name:'mode'},
        {name:'billno'},
        {name: 'inventoryjeid'},
        {name: 'inventoryentryno'},
        {name:'date', type:'date'},
        {name:'shipdate', type:'date'},
        {name:'personname'},
        {name:'aliasname'},
        {name:'personemail'},
        {name:'billingEmail'},
        {name:'personid'},
        {name:'shipping'},
        {name:'deleted'},
        {name:'externalcurrencyrate'},
        {name:'memo'},
        {name:'costcenterid'},
        {name:'GSTINRegTypeDefaultMstrID'},
        {name:'CustomerVendorTypeId'},
        {name:'GSTINRegistrationTypeId'},
        {name:'gstin'},
        {name:'gstIncluded'},
        {name:'gstdochistoryid'},
        {name:'costcenterName'},
        {name:'statusID'},
        {name:'shipvia'},
        {name:'fob'},
        {name:'status'},
        {name:'withoutinventory',type:'boolean'},
        {name:'isfavourite'},
        {name:'currencyid'},
        {name:'currencysymbol'},
        {name:'amount'},
        {name:'amountinbase'},
        {name:'discountamountinbase'},
        {name:'sequenceformatid'},
        {name:'isTaxCommittedOnAvalara'},
        {name:'lasteditedby'},
        {name:'isConsignment'},
        {name:'isNoteAlso'},
        {name:'isAssignSRNumberntocn'},
        {name:'isdeletable'},
        {name:'cndnsequenceformatid'},
        {name:'cndnnumber'},
        {name:'isSaleReturnWithPay'},
        {name:'paymentmethod'},
        {name:'paymentaccount'},
        {name:'methodid'},
        {name:'paymentSequenceformatId'},
        {name:'paymentNumber'},
        {name:'movementtype'},
        {name:'custWarehouse'},
        {name:'movementtype'},
        {name:'movementtypename'},
        {name:'includeprotax'},
        {name:'attachdoc'}, //SJ[ERP-16331]
        {name:'attachment'},//SJ[ERP-16331]
        {name:'taxid'},
        {name:'totaltaxamount'},
        {name:'OtherTermNonTaxableAmount'},
        {name:'amountwithouttax'},
        {name:'hasAccess',type:'boolean'},
        {name:'currencycode'},
        {name:'mapSalesPersonName'},
        {name:'salesPerson'},
        {name:'formtypeid'},
        {name:'isInterstateParty',type:'boolean'},
        {name:'supplierinvoiceno'},//SDP-4510,
        {name:'subtotal'},
        {name:'productTotalAmount'},
        {name:'amountBeforeTax'},
        {name:'termamount'},
        {name:'gtaapplicable'},//ERP-34970(ERM-534)
        {name:'ewayapplicable'},//ERP-34970(ERM-534)
        {name:'mvattransactionno'},
        {name:'isapplytaxtoterms'},
        {name:'termdetails'},
        {name:'personcode'},
        {name: 'isRoundingAdjustmentApplied'}
    ]);
    this.StoreUrl = (this.isCustomer)?"ACCInvoiceCMN/getSalesReturn.do":"ACCGoodsReceiptCMN/getPurchaseReturn.do";

    this.customizeRec = new Wtf.data.Record.create([
        {name: "id"},
        {name:"hidecol"},
        {name:"fieldlabeltext"}
    ]);
    this.customizeReader = new Wtf.data.KwlJsonReader({
        root: "data",
        totalProperty: "count"
    }, this.customizeRec);
    this.customizeStore = new Wtf.data.Store({
        url: "ACCAccountCMN/getTransactionFormFields.do",
        reader: this.customizeReader,
        baseParams: {
            flag: 35,
            moduleid: (this.isCustomer) ? Wtf.Acc_Sales_Return_ModuleId : Wtf.Acc_Purchase_Return_ModuleId,
            reportId: 1
        }
    });
    this.customizeStore.on('load', this.checkRemarkCol, this);
    this.customizeStore.load();
    
    if(config.consolidateFlag) {
        this.Store = new Wtf.data.GroupingStore({
            url:this.StoreUrl,
            remoteSort: true,
            //        url: Wtf.req.account+this.businessPerson+'Manager.jsp',
            baseParams:{
                //mode:this.isOrder?(this.isCustBill?52:42):(this.isCustBill?16:12),
                costCenterId: this.costCenterId,
                deleted:false,
                nondeleted:false,
                consolidateFlag:config.consolidateFlag,
                isLeaseFixedAsset:this.isLeaseFixedAsset,
                isFixedAsset: this.isFixedAsset,
                isConsignment:this.isConsignment,
                companyids:companyids,
                gcurrencyid:gcurrencyid,
                isfavourite:false,
                userid:loginid,
                moduleid:this.moduleid
            //            cashonly:false,
            //            creditonly:false
            },
            sortInfo : {
                field : 'companyname',
                direction : 'ASC'
            },
            groupField : 'companyname',
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:'count'
            },this.GridRec)
        });
    } else {
        this.Store = new Wtf.data.Store({
            url:this.StoreUrl,
            remoteSort: true,
            //        url: Wtf.req.account+this.businessPerson+'Manager.jsp',
            baseParams:{
                //mode:this.isOrder?(this.isCustBill?52:42):(this.isCustBill?16:12),
                costCenterId: this.costCenterId,
                deleted:false,
                nondeleted:false,
                consolidateFlag:config.consolidateFlag,
                companyids:companyids,
                isLeaseFixedAsset:this.isLeaseFixedAsset,
                isFixedAsset: this.isFixedAsset,
                isConsignment:this.isConsignment,
                isfavourite:false,
                gcurrencyid:gcurrencyid,
                userid:loginid,
                moduleid:this.moduleid
            //            cashonly:false,
            //            creditonly:false
            },
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:'count'
            },this.GridRec)
        });
    }

    if(this.extraFilters != undefined){//Cost Center Report View
        var currentBaseParams = this.Store.baseParams;
        currentBaseParams.startdate = this.extraFilters.startdate;
        currentBaseParams.enddate = this.extraFilters.enddate;
        
        this.Store.baseParams=currentBaseParams;
    }

    this.costCenter=CommonERPComponent.createCostCenterPagingComboBox(150,250,30,this);
    this.costCenter.on("select", function(cmb, rec, ind){
        this.costCenterId = rec.data.id;

        var currentBaseParams = this.Store.baseParams;
        currentBaseParams.costCenterId = this.costCenterId;
        this.Store.baseParams=currentBaseParams;

    },this);
    
    this.costCenter.store.on("load", function() {
        if(this.costCenter.getRawValue() == "" || this.costCenter.getRawValue() == undefined ||this.costCenter.getRawValue() == null){
            var record = new Wtf.data.Record({
                id: "",
                name: "All Records"
            });
            this.costCenter.store.insert(0, record);
        }
    }, this);

    this.costCenter.store.on("beforeload", function() {
        var currentBaseParams = this.costCenter.store.baseParams;
        currentBaseParams.isForReport =true;
        this.costCenter.store.baseParams=currentBaseParams;
    }, this);
    
    var sdateSavedSearch;
    var edateSavedSearch;
    if(config.searchJson != undefined && config.searchJson != ""){
        sdateSavedSearch = JSON.parse(config.searchJson).data[0].sdate;
        edateSavedSearch = JSON.parse(config.searchJson).data[0].edate;
    }
    
    this.startDate=new Wtf.ExDateFieldQtip({
        fieldLabel:WtfGlobal.getLocaleText("acc.common.from"),  //'From',
        name:'stdate' + this.id,
        format:WtfGlobal.getOnlyDateFormat(),
        value:WtfGlobal.getDates(true, sdateSavedSearch)
    });
    
    this.endDate=new Wtf.ExDateFieldQtip({
        fieldLabel:WtfGlobal.getLocaleText("acc.common.to"),  //'To',
        format:WtfGlobal.getOnlyDateFormat(),
        name:'enddate' + this.id,
        value:WtfGlobal.getDates(false, edateSavedSearch)
    });
    
  var baseParams={
        mode: 22,
            termSalesOrPurchaseCheck:this.isCustomer,
            onlyProduct:true,
            isFixedAsset:this.isFixedAsset,
            includeBothFixedAssetAndProductFlag:this.isLeaseFixedAsset
    }
    this.productname =CommonERPComponent.createProductPagingComboBox(100,150,Wtf.ProductCombopageSize,this,baseParams,false);
    this.productname.store.on("load", function() {
        if(this.productname.getRawValue() == "" || this.productname.getRawValue() == undefined ||this.productname.getRawValue() == null){

        var record = new Wtf.data.Record({
            productid: "",
            productname: "All Records"
        });
            this.productname.store.insert(0, record);    
        }
    }, this);
    this.productCategory =CommonERPComponent.createProductCategoryPagingComboBox(100,250,30,this);
    this.productCategory.store.on("load", function() {
        if(this.productCategory.getRawValue() == "" || this.productCategory.getRawValue() == undefined ||this.productCategory.getRawValue() == null){
        var record = new Wtf.data.Record({
            id: "",
            name: "All Records"
        });
            this.productCategory.store.insert(0, record);
        }
    }, this);
    
    this.custVendCategoryRec = Wtf.data.Record.create([
        {name: 'id'},
        {name: 'name'},
    ]);
    
    this.custVendCategory =CommonERPComponent.createCustomerVendorCategoryPagingCombobox(100,250,30,this,false);//true for customer/vendor report
    this.custVendCategory.store.on("load", function() {
        if(this.custVendCategory.getRawValue() == "" || this.custVendCategory.getRawValue() == undefined ||this.custVendCategory.getRawValue() == null){
        var record = new Wtf.data.Record({
            id: "All",
            name: "All Records"
        });
            this.custVendCategory.store.insert(0, record);
        }
    }, this);
    
    this.custVendCategory.on("select", function(cmb, rec, ind) {
        this.person="";
        this.filtercustid = rec.data.id;
        var currentBaseParams = this.Store.baseParams;
        currentBaseParams.customerCategoryid = this.filtercustid;
        this.Store.baseParams = currentBaseParams;
    }, this);
    
    this.submitBttn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.common.fetch"),
        tooltip :WtfGlobal.getLocaleText("acc.invReport.fetchTT"),  
        id: 'submitRec' + this.id,
        scope: this,
        iconCls:'accountingbase fetch',
        disabled :false
    });
    this.expandCollpseButton = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.field.Expand"),
        tooltip: WtfGlobal.getLocaleText("acc.field.Expand/CollapseRecords"),
        iconCls: 'pwnd toggleButtonIcon',
        hidden:(this.moduleid == Wtf.Acc_Sales_Return_ModuleId || this.moduleid == Wtf.Acc_Purchase_Return_ModuleId)?false:(this.moduleid == Wtf.Acc_FixedAssets_Sales_Return_ModuleId || this.moduleid == Wtf.Acc_FixedAssets_Purchase_Return_ModuleId)?false:true,
        scope: this,
        handler: function() {
            if (this.expandCollpseButton.getText() == WtfGlobal.getLocaleText("acc.field.Expand")) {
                this.expandButtonClicked = true;
            }
            expandCollapseGrid(this.expandCollpseButton.getText(), this.expandStore, this.grid.plugins, this);
        }
    });
    this.submitBttn.on("click", this.submitHandler, this);
    
    this.tbar2 = new Array();
    this.tbar3 = new Array();
    this.tbar2.push(WtfGlobal.getLocaleText("acc.common.from"));
    this.tbar2.push(this.startDate);
    this.tbar2.push(WtfGlobal.getLocaleText("acc.common.to"));
    this.tbar2.push(this.endDate);
    
    this.tbar2.push("-", WtfGlobal.getLocaleText("acc.common.costCenter"), this.costCenter);
    this.tbar2.push("-", WtfGlobal.getLocaleText("acc.invReport.prod"), this.productname);
    this.tbar2.push("-", WtfGlobal.getLocaleText("acc.masterConfig.19"),this.productCategory);
    var label = this.isCustomer ? WtfGlobal.getLocaleText("acc.masterConfig.7") : WtfGlobal.getLocaleText("acc.masterConfig.8") ;
    this.tbar3.push(label,this.custVendCategory);
    
    this.tbar2.push("-");
    this.tbar2.push(this.submitBttn);
    this.tbar2.push(this.expandCollpseButton);
    
    
    var dataArr = new Array();
    dataArr.push([0,WtfGlobal.getLocaleText("acc.rem.105")],[1,WtfGlobal.getLocaleText("acc.rem.220")],
        [2,this.isCustomer?WtfGlobal.getLocaleText("acc.rem.248"):WtfGlobal.getLocaleText("acc.rem.247")],
        [Wtf.INDEX_MOBILE_TRANSACTIONS ,WtfGlobal.getLocaleText("acc.field.mobiletransactions")]);
    this.typeStore = new Wtf.data.SimpleStore({
        fields: [{name:'typeid',type:'int'}, 'name'],
        data :dataArr
    });
    
    var fieldId="";
    if(this.isFixedAsset){
        fieldId='view'+config.id;
    }
    
    this.typeEditor = new Wtf.form.ComboBox({
        store: this.typeStore,
        name:'typeid',
        displayField:'name',
        id:(this.isFixedAsset?fieldId:'view'+config.helpmodeid),
        valueField:'typeid',
        mode: 'local',
        defaultValue:0,
        width:160,
        listWidth:160,
        triggerAction: 'all',
        typeAhead:true,
        selectOnFocus:true
    });
    
    this.tbar3.push("->");
    this.tbar3.push(WtfGlobal.getLocaleText("acc.rem.view"), this.typeEditor);
    
    this.expander = new Wtf.grid.RowExpander({});
    this.sm = new Wtf.grid.CheckboxSelectionModel({
        singleSelect : false
    });
    this.gridView1 = (config.consolidateFlag||this.isSalesCommissionStmt)?new Wtf.grid.GroupingView({
        forceFit:false,
        showGroupName: true,
        enableNoGroups:false, // REQUIRED!
        hideGroupedColumn: true,
        emptyText:WtfGlobal.emptyGridRenderer(WtfGlobal.getLocaleText("acc.common.norec"))
    }):{
        forceFit:false,
        emptyText:WtfGlobal.emptyGridRenderer("<a class='grid-link-text' href='#' onClick='javascript:reportLink(\""+this.consolidateFlag+"\",\""+config.isCustomer+"\",\""+this.isConsignment+"\",\""+this.isLeaseFixedAsset+"\",\""+this.isFixedAsset+"\")'> "+WtfGlobal.getLocaleText("acc.rem.147")+" "+this.label+" "+WtfGlobal.getLocaleText("acc.rem.148")+"</a>")            
    };
    this.gridColumnModelArr=[];
    this.gridColumnModelArr.push(this.sm,this.expander,{
        id: 'favoritePrinted',
        header:"",
        //            dataIndex:'isfavourite',
        //            hidden:(this.isSalesCommissionStmt || this.pendingapproval)?true:false,
        width:60,
        renderer : function(val, meta, record, rowIndex){
            var value="";
            if(record.data.isfavourite){
                value= '<img id="starValiFlag" style="cursor:pointer" wtf:qtip="'+WtfGlobal.getLocaleText('acc.invoiceList.favourite')+'" src="../../images/star-valid.png">';
            }else{
                value= '<img id="starInvalidFlag" style="cursor:pointer" wtf:qtip="'+WtfGlobal.getLocaleText('acc.invoiceList.notfavourite')+'" src="../../images/star-invalid.png">'
            }
            if(record.json.isprinted){
                value += '<img id="printValiFlag" style="margin-left: 3px;cursor:pointer" wtf:qtip="'+WtfGlobal.getLocaleText('acc.invoiceList.printed')+'" src="../../images/printed.gif">';
            }else{
                value += '<img id="printInValiFlag" style="margin-left: 3px;cursor:pointer" wtf:qtip="'+WtfGlobal.getLocaleText('acc.invoiceList.notprinted')+'" src="../../images/not-printed.gif">'
            }
            return value;
        }
    },{
        hidden:true,
        header: "",
        dataIndex:'billid',
        hideable:false     //ERP-5269[SJ] 
    },{
        header:"Company",  
        dataIndex:'companyname',
        width:20,
        pdfwidth:150,
        //            sortable:true,
        hidden:true
    },{
        header:this.label+" "+WtfGlobal.getLocaleText("acc.cn.9"),
        dataIndex:'billno',
        width:150,
        pdfwidth:75,
        sortable:true,
        //renderer:(config.isQuotation||config.isOrder)?"":WtfGlobal.linkDeletedRenderer
        renderer:WtfGlobal.linkDeletedRenderer
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.jeno"),  //"Journal Entry No",
        dataIndex:'entryno',
        hidden:(this.moduleid != Wtf.Acc_Purchase_Return_ModuleId && this.moduleid!= Wtf.Acc_Sales_Return_ModuleId),// will be hidden when module other that Purchase return and Sales Return
        width:150,
        pdfwidth:75,
        sortable:true,
        renderer:WtfGlobal.linkDeletedRenderer
        });
        
    if (Wtf.account.companyAccountPref.activateMRPManagementFlag || Wtf.account.companyAccountPref.inventoryValuationType == "1") {
        this.gridColumnModelArr.push({
            header:  WtfGlobal.getLocaleText("acc.field.inventory.je.number"), 
            dataIndex: 'inventoryentryno',
            width: 150,
            pdfwidth: 75,
            sortable: true,
            renderer: WtfGlobal.linkDeletedRenderer
        });
    }
    
    this.gridColumnModelArr.push({
        header:config.isCustomer?WtfGlobal.getLocaleText("acc.cnList.gridNoteNo"):WtfGlobal.getLocaleText("acc.dnList.gridNoteNo"),  //"Credit Note No:Debit Note No",
        dataIndex:'cndnnumber',
        hidden:(this.moduleid != Wtf.Acc_Purchase_Return_ModuleId && this.moduleid!= Wtf.Acc_Sales_Return_ModuleId),// will be hidden when module other that Purchase return and Sales Return
        width:150,
        pdfwidth:75,
        sortable:true,
        renderer:WtfGlobal.linkDeletedRenderer
    });
    if(config.isCustomer){
        this.gridColumnModelArr.push({
            header:WtfGlobal.getLocaleText("acc.pmList.gridPaymentNo"),
            dataIndex:'paymentNumber',
            hidden:this.moduleid!= Wtf.Acc_Sales_Return_ModuleId,
            width:150,
            pdfwidth:75,
            sortable:true,
            renderer:WtfGlobal.linkDeletedRenderer
        });
    }
   this.gridColumnModelArr.push({
        header:this.label+" "+WtfGlobal.getLocaleText("acc.inventoryList.date"),
        dataIndex:'date',
        align:'center',
        sortable:true,
        width:150,
        pdfwidth:80,
        renderer:WtfGlobal.onlyDateDeletedRenderer
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.shipdate"),
        dataIndex:'shipdate',
        hidden:true,
        renderer:WtfGlobal.onlyDateDeletedRenderer
    },{
        header:(config.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.cust"):WtfGlobal.getLocaleText("acc.invoiceList.ven")),  //this.businessPerson,
        width:150,
        pdfwidth:75,
        renderer:WtfGlobal.deletedRenderer,
        dataIndex:'personname',
        sortable:true
    },{
        header:(config.isCustomer?WtfGlobal.getLocaleText("acc.cust.aliasname"):WtfGlobal.getLocaleText("acc.ven.aliasname")),
        width:150,
        pdfwidth:75,
        renderer:WtfGlobal.deletedRenderer,
        dataIndex:'aliasname',
        sortable:true
    },
    {
        header:WtfGlobal.getLocaleText("acc.common.currencyFilterLable"),
        dataIndex:'currencycode',
        hidden:true,
        pdfwidth:85
    },{
        header: WtfGlobal.getLocaleText("acc.invoice.SupplierInvoiceNo"), //Supplier Invoice No (SDP-4510)
        dataIndex: 'supplierinvoiceno',
        width: 150,
        pdfwidth: 80,
        hidden: !(this.moduleid == Wtf.Acc_Purchase_Return_ModuleId)
    },
    {
        header: WtfGlobal.getLocaleText("acc.invoice.gridTaxAmount"), //"Tax Amount",
        dataIndex: 'totaltaxamount',
        align: 'right',
        pdfwidth: 100,
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this),
        hidden:!(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInSR:Wtf.account.companyAccountPref.unitPriceInPR)
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.terms"),  //"Terms Amount"
        dataIndex:'termamount',
        align:'right',
        width:150,
        pdfwidth:75,
        pdfrenderer: 'rowcurrency',
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this),
        hidden:this.isSalesCommissionStmt|| this.isRequisition|| this.isRFQ
    },{
        header:WtfGlobal.getLocaleText("acc.invoicelist.OtherChargesAmt"),  //"Other Charges Amount",
        dataIndex:'OtherTermNonTaxableAmount',
        align:'right',
        width:150,
        pdfwidth:75,
        hideable: Wtf.account.companyAccountPref.isLineLevelTermFlag ,//To also hide it in sortable list
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this),
        hidden: !Wtf.account.companyAccountPref.isLineLevelTermFlag//Hidden if LineLevelTerms are not apllicable.
    },
    {
        header: WtfGlobal.getLocaleText("acc.invoice.amountWithoutTax"), //"Amount without Tax",
        dataIndex: 'amountwithouttax',
        align: 'right',
        pdfwidth: 100,
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this),
        hidden:!(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInSR:Wtf.account.companyAccountPref.unitPriceInPR)
    },
    {
        header:WtfGlobal.getLocaleText("acc.invoiceList.discountAmtInBase")+" ("+WtfGlobal.getCurrencyName()+")",  // Discount Amount in Base
        align:'right',
        dataIndex:'discountamountinbase',
        width:150,
        pdfwidth:75,
        hidecurrency : true,
        renderer:this.currencyDeletedRendererWithPermissionCheck.createDelegate(this)
    },
    {
        header:WtfGlobal.getLocaleText("acc.invoiceList.totAmt"),  // "Total Amount",
        align:'right',
        dataIndex:'amount',
        width:150,
        pdfwidth:75,
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this),
        hidden:!(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInSR:Wtf.account.companyAccountPref.unitPriceInPR)
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.totAmtHome") + " ("+WtfGlobal.getCurrencyName()+")",  //"Total Amount (In Home Currency)",
        align:'right',
        dataIndex:'amountinbase',
        width:150,
        pdfwidth:75,
        hidecurrency : true,
        renderer:this.currencyDeletedRendererWithPermissionCheck.createDelegate(this),
        hidden:!(this.isCustomer?Wtf.account.companyAccountPref.unitPriceInSR:Wtf.account.companyAccountPref.unitPriceInPR)
    },{
        header:Wtf.account.companyAccountPref.descriptionType,  //"Memo",
        dataIndex:'memo',
        width:150,
        renderer: function (value, metaData, record) {
            return "<span wtf:qtip='" + value + "'>" + value + "</span>";
        },
        pdfwidth:100
    },
    {
        header:WtfGlobal.getLocaleText("acc.field.RequestType"),
        width:150,
        pdfwidth:75,
        renderer:WtfGlobal.deletedRenderer,
        dataIndex:'movementtypename',
            hidden:!this.isConsignment || !this.isMovementWarehouseMapping || !this.isCustomer},
        {
        header:WtfGlobal.getLocaleText("acc.field.CostCenter"),
        width:150,
        pdfwidth:75,
        dataIndex:'costcenterName',
        hidden:this.moduleid!=Wtf.Acc_ConsignmentSalesReturn_ModuleId
    }
    );
       
    if(this.moduleid==Wtf.Acc_Sales_Return_ModuleId || this.moduleid ==Wtf.Acc_ConsignmentSalesReturn_ModuleId){
        this.gridColumnModelArr.push({
            header:WtfGlobal.getLocaleText("acc.invoiceList.salesPerson"),  //"Memo",
            dataIndex:'mapSalesPersonName',
            width:150,
            pdfwidth:100,
            hidden:this.moduleid!=Wtf.Acc_Sales_Return_ModuleId || this.moduleid!= Wtf.Acc_ConsignmentSalesReturn_ModuleId
        })};
    // appening custom columns
    //* Attachment Document in grid report Column model   SJ[ERP-16331]   
    this.gridColumnModelArr.push({
        header:WtfGlobal.getLocaleText("acc.invoiceList.attachDocuments"),  //"Attach Documents",
        dataIndex:'attachdoc',
        width:150,
        align:'center',
        renderer : function(val) {
            return "<div style='height:16px;width:16px;'><div class='pwndbar1 uploadDoc' style='cursor:pointer' wtf:qtitle='"
            + WtfGlobal
            .getLocaleText("acc.invoiceList.attachDocuments")
            + "' wtf:qtip='"
            + WtfGlobal
            .getLocaleText("acc.invoiceList.clickToAttachDocuments")
            +"'>&nbsp;</div></div>";
        }
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.attachments"),  //"Attachments",
        dataIndex:'attachment',
        width:150,
        renderer : Wtf.DownloadLink.createDelegate(this)
    }, {
        header:WtfGlobal.getLocaleText("acc.invoiceList.producttotalamount"),  //Gross Total Amount
        dataIndex:'productTotalAmount',
        align:'right',
        width:150,
        pdfwidth:75,
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this)
//        hidden:false
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.amountbeforetax"),  //Amount before Tax
        dataIndex:'amountBeforeTax',
        align:'right',
        width:150,
        pdfwidth:75,
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this)
    },{
        header:WtfGlobal.getLocaleText("acc.invoiceList.subtotal"),  //Sub-Total
        dataIndex:'subtotal',
        align:'right',
        width:150,
        pdfwidth:75,
        renderer:this.withoutRateCurrencyDeletedSymbolWithPermissionCheck.createDelegate(this)
    }); 
    this.gridColumnModelArr = WtfGlobal.appendCustomColumn(this.gridColumnModelArr,GlobalColumnModelForReports[this.moduleid],true);

    this.grid = new Wtf.grid.GridPanel({
        stripeRows :true,
        store:this.Store,
        id:"gridmsg"+config.helpmodeid+config.id,
        border:false,
        sm:this.sm,
        tbar: this.tbar2,
        disabled:this.readOnly,
        disabledClass:"newtripcmbss",
        layout:'fit',
        loadMask:true,
        plugins: this.expander,
        viewConfig:this.gridView1,
        forceFit:true,
        cm:new Wtf.grid.ColumnModel(this.gridColumnModelArr)
    });
    this.grid.on('render', 
        function(){
        this.grid.getView().applyEmptyText();
        new Wtf.Toolbar({
            renderTo: this.grid.tbar,
            items:  this.tbar3
        });
        new Wtf.util.DelayedTask().delay(Wtf.GridStateSaveDelayTimeout, function () {
            this.grid.on('statesave',this.saveMyStateHandler,this);
        }, this);
    }, this);
    this.resetBttn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.common.reset"),  //'Reset',
        tooltip :WtfGlobal.getLocaleText("acc.common.resetTT"),  //'Allows you to add a new search term by clearing existing search terms.',
        id: 'btnRec' + this.id,
        scope: this,
        iconCls :getButtonIconCls(Wtf.etype.resetbutton),
        disabled :false
    });
    this.resetBttn.on('click',this.handleResetClick,this);
    
    var colModelArray = GlobalColumnModelForReports[this.moduleid];
    WtfGlobal.updateStoreConfig(colModelArray,this.Store);
   
    var btnArr=[];
    var bottombtnArr=[];
    var tranType= (this.isCustomer)?Wtf.autoNum.SalesReturn:Wtf.autoNum.PurchaseReturn;
    if(!this.isLeaseFixedAsset && !this.isConsignment){
        btnArr.push(this.newTabButton=getCreateNewButton(config.consolidateFlag,this,this.businessPerson=='Customer'?WtfGlobal.getLocaleText("acc.WI.53"):WtfGlobal.getLocaleText("acc.WI.50"),this.reportbtnshwFlag));
        this.newTabButton.on('click',this.openNewTab,this); 
    }

    //if(config.extraFilters == undefined){//Cost Center Report View - Don't show Buttons
    if(!WtfGlobal.EnableDisable(this.uPermType, this.editPermType) && Wtf.account.companyAccountPref.editTransaction){				//!this.isOrder&&
        var toolTipMsg=this.getEditButtonToolTipMsg(this.moduleid);
        btnArr.push(this.editBttn=new Wtf.Toolbar.Button({
            text:WtfGlobal.getLocaleText("acc.common.edit"),  //'Edit',
            tooltip :toolTipMsg,
            id: 'btnEdit' + this.id,
            scope: this,
            hidden:this.isQuotation || config.consolidateFlag ||this.reportbtnshwFlag,
            iconCls :getButtonIconCls(Wtf.etype.edit),
            disabled :true
        }));
        this.editBttn.on('click',this.editTransactionCheckBefore,this);
    //        this.editBttn.on('click',this.editTransaction.createDelegate(this,[false]),this);
    }
    if(!WtfGlobal.EnableDisable(this.uPermType, this.copyPermType)){
        btnArr.push(this.copyInvBttn=new Wtf.Toolbar.Button({
            text:WtfGlobal.getLocaleText("acc.lp.copydor"),
            tooltip :WtfGlobal.getLocaleText("acc.field.Copytoselectedrecord"),
            id: 'btnCopy' + this.id,
            scope: this,
            hidden:this.reportbtnshwFlag || this.isLeaseFixedAsset || this.isConsignment || this.isFixedAsset,
            //            hidden:this.isOrder,//this.isCustBill||
            iconCls :getButtonIconCls(Wtf.etype.copy),
            disabled :true
        }));
        this.copyInvBttn.on('click',this.copyTransaction.createDelegate(this,[true]),this);
    }
    var deletebtnArray=[];
    if(!WtfGlobal.EnableDisable(this.uPermType, this.removePermType) && Wtf.account.companyAccountPref.deleteTransaction){
        deletebtnArray.push(this.deleteTrans=new Wtf.Action({
            text: WtfGlobal.getLocaleText("acc.rem.7")+' '+this.label,
            scope: this,
            hidden:config.consolidateFlag,
            //hidden:config.isOrder,
            tooltip:WtfGlobal.getLocaleText("acc.rem.6"),  //{text:"Select a "+this.label+" to delete.",dtext:"Select a "+this.label+" to delete.", etext:"Delete selected "+this.label+" details."},
            iconCls:getButtonIconCls(Wtf.etype.menudelete),
            disabled :true,
            handler:this.handleDelete.createDelegate(this,this.del=["del"])
        }))
    }
    if(!WtfGlobal.EnableDisable(this.uPermType, this.removePermType) && Wtf.account.companyAccountPref.deleteTransaction){
        deletebtnArray.push(this.deleteTransPerm=new Wtf.Action({
            text: WtfGlobal.getLocaleText("acc.rem.7")+' '+this.label+' '+WtfGlobal.getLocaleText("acc.field.Permanently"),
            scope: this,
            hidden:(config.consolidateFlag|| this.reportbtnshwFlag) || (this.isModuleForAvalara),//Disbale permanent deletion of sales return in case of Avalara Integration,
            //hidden:config.isOrder,
            tooltip:WtfGlobal.getLocaleText("acc.rem.6")+' '+WtfGlobal.getLocaleText("acc.field.Permanently"),  //{text:"Select a "+this.label+" to delete.",dtext:"Select a "+this.label+" to delete.", etext:"Delete selected "+this.label+" details."},
            iconCls:getButtonIconCls(Wtf.etype.menudelete),
            disabled :true,
            handler:this.handleDelete.createDelegate(this,this.del=["delp"])
        }))
    }
    if(deletebtnArray.length>0) {
        btnArr.push({
            text:WtfGlobal.getLocaleText("acc.setupWizard.gridDelete"), 
            scope: this,
            tooltip:WtfGlobal.getLocaleText("acc.field.allowsyoutodeletetherecord"), 
            iconCls:getButtonIconCls(Wtf.etype.deletebutton),
            hidden: this.reportbtnshwFlag, 
            menu:deletebtnArray
        });
    }
    
    if ((!WtfGlobal.EnableDisable(this.uPermType, this.permType.unlinkprdoc) && this.moduleid == Wtf.Acc_Purchase_Return_ModuleId) || (!WtfGlobal.EnableDisable(this.uPermType, this.permType.unlinksrdoc) && this.moduleid == Wtf.Acc_Sales_Return_ModuleId)) {
        btnArr.push(this.unlinkDocumentBtn = new Wtf.Toolbar.Button({
            text: WtfGlobal.getLocaleText("acc.field.unlink"), // "Unlink",
            tooltip: WtfGlobal.getLocaleText("acc.field.unlink"), // "Unlink",
            id: 'unlinkDocument' + this.id,
            scope: this,
            hidden: this.reportbtnshwFlag,
            iconCls: 'accountingbase pricelistbutton',
            disabled: true,
            handler: this.handleUnlinkDocument
        }));
    }
    this.operationType = tranType;
    this.objsearchComponent = new Wtf.advancedSearchComponent({
        cm: this.grid.colModel,
        moduleid: this.moduleid,
        advSearch: false,
        customerCustomFieldFlag: this.showCustomerCustomFieldFlag(this.moduleid),
        vendorCustomFieldFlag: this.showVendorCustomField(this.moduleid)
    });
    this.objsearchComponent.advGrid.on("filterStore", this.filterStore, this);
    this.objsearchComponent.advGrid.on("clearStoreFilter", this.clearStoreFilter, this); 
    
    if(this.isConsignment||!WtfGlobal.EnableDisable(this.uPermType, this.emailPermType)||config.isLeaseFixedAsset){
        btnArr.push(this.email=new Wtf.Toolbar.Button({
            text:WtfGlobal.getLocaleText("acc.common.email"),  // "Email",
            tooltip : WtfGlobal.getLocaleText("acc.common.emailTT"),  //"Email",
            scope: this,
            iconCls : "accountingbase financialreport",
            hidden: this.reportbtnshwFlag,
            disabled : true,
            handler : this.sendMail
        }));
    }
    
    if (Wtf.account.companyAccountPref.deliveryPlanner && this.moduleid == Wtf.Acc_Sales_Return_ModuleId) {
        btnArr.push(this.viewDeliveryPlannerBttn = new Wtf.Toolbar.Button({
            text: WtfGlobal.getLocaleText("acc.field.viewDeliveryPlanner"), // "View Delivery Planner",
            tooltip: WtfGlobal.getLocaleText("acc.field.viewDeliveryPlanner"),
            scope: this,
            iconCls: getButtonIconCls(Wtf.etype.reorderreport),
            disabled: true,
            handler: this.handleViewDeliveryPlanner
        }));
    }
    
    this.AdvanceSearchBtn = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.editor.advanceSearchBTN"), //"Advanced Search",
        //        id: 'advanced3', // In use, Do not delete
        scope: this,
        hidden:(this.moduleid==undefined)?true:false,        
        tooltip: WtfGlobal.getLocaleText("acc.editor.advanceSearchBTN.ttip"), //'Search for multiple terms in multiple fields.',
        handler: this.configurAdvancedSearch,
        iconCls: "advanceSearchButton"
    });
    btnArr.push(this.AdvanceSearchBtn);
    //    if(!WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)){
    //        bottombtnArr.push('-', this.linkinfoViewBtn = new Wtf.Toolbar.Button({
    //                text: WtfGlobal.getLocaleText("acc.field.LinkInformationDetails"),     //button for showing link information
    //                scope: this,
    ////                hidden: this.isRequisition || this.isRFQ || this.isQuotation||this.isSalesCommissionStmt || (this.moduleid == Wtf.Acc_FixedAssets_Purchase_Order_ModuleId),  //shown in SO/PO
    //                disabled : true,
    //                tooltip: WtfGlobal.getLocaleText("acc.field.LinkInformationDetails"),
    //                iconCls:'accountingbase fetch',
    //                handler:linkinfo
    //            }));
    //    }
    
    
    if (!WtfGlobal.EnableDisable(this.uPermType, this.exportPermType) && (this.moduleid == Wtf.Acc_Purchase_Return_ModuleId || this.moduleid == Wtf.Acc_Sales_Return_ModuleId || this.moduleid == Wtf.Acc_FixedAssets_Purchase_Return_ModuleId || this.moduleid == Wtf.Acc_FixedAssets_Sales_Return_ModuleId)) {
        bottombtnArr.push(' ',
            this.linkinfoViewBtn = new Wtf.Toolbar.Button({
                text: WtfGlobal.getLocaleText("acc.field.LinkInformationDetails"), //button for showing link information
                scope: this,
                disabled: true,
                tooltip: WtfGlobal.getLocaleText("acc.field.LinkInformationDetails"),
                iconCls: 'accountingbase fetch',
                handler: function() {
                    linkinfo(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, this)
                }

            }));
       
    }
    if (!WtfGlobal.EnableDisable(this.uPermType, this.exportPermType) && (this.moduleid == Wtf.Acc_Purchase_Return_ModuleId || this.moduleid == Wtf.Acc_Sales_Return_ModuleId)) {
        bottombtnArr.push(' ',
            this.relatedTransactionsBtn = new Wtf.Toolbar.Button({
                text: WtfGlobal.getLocaleText("acc.field.RelatedTransaction(s)"), //button for showing all related linking with particular document
                scope: this,
                disabled: true,
                tooltip: WtfGlobal.getLocaleText("acc.field.RelatedTransaction(s).tooltip"),
                handler: function() {
                    linkPurchaseReportTab(this.isCustomer ? 1 : 0, this.moduleid, this.grid.getSelectionModel().getSelected().data.billno);
                },
                iconCls: 'accountingbase fetch'

            }));
    }
    
    if(!WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)){
        bottombtnArr.push('-', this.exportButton=new Wtf.exportButton({
            obj:this,
            filename: this.title+"_v1",
            id:(this.isFixedAsset?'exportReports'+fieldId:"exportReports"+config.helpmodeid), //+config.id,
            text: WtfGlobal.getLocaleText("acc.common.exportList"),
            tooltip :WtfGlobal.getLocaleText("acc.common.exportTT"),  //'Export report details',
            disabled :true,
            menuItem:{csv:true,pdf:true,print:true,detailedXls:true,xls:true},
            get:tranType,
            moduleId:config.moduleid
        }));

        this.exportButton.setParams({
            costCenterId : this.costCenter.getValue(),
            startdate : WtfGlobal.convertToGenericStartDate(this.startDate.getValue()),
            enddate : WtfGlobal.convertToGenericEndDate(this.endDate.getValue()),
            archieve : this.archieveCombo?this.archieveCombo.getValue() : 0,
            productid : this.productname.getValue(),
            productCategoryid : this.productCategory.getValue()
        });
    }
    /**
     * Import Button for E-wat Fields (Eway bill no and Date)
     * ERP-39530
     */
    if (WtfGlobal.isIndiaCountryAndGSTApplied() && (this.moduleid !=undefined && this.moduleid != '' && Wtf.EwayUnitDimCustmFieldsActivatedModules.indexOf(parseInt(this.moduleid))> -1)) {
          var menuArray=[];
          menuArray.push(this.createImportEwayFiledsButton());
          var importButton = Wtf.documentImportMenuButtonA(menuArray, this, "");
          bottombtnArr.push(importButton);
    }//
    if(!WtfGlobal.EnableDisable(this.uPermType, this.printPermType) || !WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)){
        bottombtnArr.push('-', this.singlePrint=new Wtf.exportButton({
            obj:this,
            id:"printReports"+config.helpmodeid+config.id,
            iconCls: 'pwnd printButtonIcon',
            text: WtfGlobal.getLocaleText("acc.rem.236"),// + " "+ singlePDFtext,
            tooltip :WtfGlobal.getLocaleText("acc.rem.236.single"),  //'Export selected record(s)',
            disabled :true,
            menuItem:{
                rowPdf:true,
                rowPdfPrint:true,
                rowPdfTitle:WtfGlobal.getLocaleText("acc.rem.39") + " "+ this.label
            },// + " "+ singlePDFtext},
            get:tranType,
            moduleId:config.moduleid
        }));
    }
//    if(!WtfGlobal.EnableDisable(this.uPermType, this.printPermType)){
//        bottombtnArr.push('-', this.printButton=new Wtf.exportButton({
//            text:WtfGlobal.getLocaleText("acc.common.print"),  //"Print",
//            obj:this,
//            tooltip :WtfGlobal.getLocaleText("acc.common.printTT"),  //'Print report details',
//            disabled :true,
//            label:config.isCustomer?(config.isOrder?WtfGlobal.getLocaleText("acc.accPref.autoSO"):WtfGlobal.getLocaleText("acc.accPref.autoInvoice")):(config.isOrder?WtfGlobal.getLocaleText("acc.accPref.autoPO"):WtfGlobal.getLocaleText("acc.agedPay.venInv")),
//            params:{isexpenseinv:this.isexpenseinv,name:config.isQuotation?WtfGlobal.getLocaleText("acc.qnList.tabTitle"):(config.isCustomer?(config.isOrder?WtfGlobal.getLocaleText("acc.soList.tabTitle"):WtfGlobal.getLocaleText("acc.invoiceList.tabtitle")):(config.isOrder?WtfGlobal.getLocaleText("acc.poList.tabTitle"):WtfGlobal.getLocaleText("acc.grList.tabTitle")))},
//            menuItem:{print:true},
//            get:tranType,
//            moduleId:config.moduleid
//        }));
//          
//        this.printButton.setParams({
//            costCenterId : this.costCenter.getValue(),
//            startdate : WtfGlobal.convertToGenericStartDate(this.startDate.getValue()),
//            enddate : WtfGlobal.convertToGenericEndDate(this.endDate.getValue()),
//            archieve : this.archieveCombo?this.archieveCombo.getValue() : 0,
//            productid : this.productname.getValue(),
//            productCategoryid : this.productCategory.getValue()
//        });
//    }
//    if(!WtfGlobal.EnableDisable(this.uPermType, this.printPermType)){
//        bottombtnArr.push('-', this.singleRowPrint=new Wtf.exportButton({
//            obj:this,
//            id:"printSingleRecord"+config.helpmodeid+config.id,
//            iconCls: 'pwnd printButtonIcon',
//            text:WtfGlobal.getLocaleText("acc.rem.236"),
//            tooltip :WtfGlobal.getLocaleText("acc.rem.236.single"),//'Print Single Record Details',
//            disabled :true,
//            isEntrylevel:false,
//         menuItem:{rowPrint:true},
//            get:tranType,
//            moduleid:config.moduleid
//        }));
//    }
    
    /* 
     * Below code is for to auto refresh the grid view when print flag updated.
     * */
    if (this.singleRowPrint != undefined) {
        for (var i = 0; i < this.singleRowPrint.printMenu.items.items.length; i++) {
            this.singleRowPrint.printMenu.items.items[i].on('click', function() {
                var gridSelections = this.grid.getSelectionModel().getSelections();
                for (var gridRecCount = 0; gridRecCount < gridSelections.length; gridRecCount++) {
                    gridSelections[gridRecCount].data.isprinted = true;
                }
                this.grid.getView().refresh();
            }, this);
        }
    }
    
    this.quickPanelSearch = new Wtf.KWLTagSearch({  
        emptyText:WtfGlobal.getLocaleText("acc.rem.5")+" "+this.label+","+tooltipmsg+","+WtfGlobal.getLocaleText("Memo"),
        width: 150,
        id:"quickSearch"+config.helpmodeid, //+config.id,
        field: 'billno',
        Store:this.Store
    })

    this.tbar1 = new Array();
    this.tbar1.push(this.quickPanelSearch, this.resetBttn, btnArr);
    
    if ((this.moduleid != Wtf.Acc_FixedAssets_Sales_Return_ModuleId && this.moduleid != Wtf.Acc_FixedAssets_Purchase_Return_ModuleId)) {
        this.tbar1.push("->", getHelpButton(this, config.helpmodeid));
    }


    this.leadpan = new Wtf.Panel({
        layout: 'border',
        border: false,
        attachDetailTrigger: true,
        items: [this.objsearchComponent
        , {
            region: 'center',
            border:false,
            layout : "fit",
            tbar: this.tbar1,
            items:[this.grid],
            bbar: this.pagingToolbar = new Wtf.PagingSearchToolbar({
                pageSize: 30,
                id: "pagingtoolbar" + this.id,
                store: this.Store,
                searchField: this.quickPanelSearch,
                displayInfo: true,
                emptyMsg: WtfGlobal.getLocaleText("acc.common.nores"),
            plugins: this.pP = new Wtf.common.pPageSize({id : "pPageSize_"+this.id}),
                items:bottombtnArr
            })
        }]
    }); 
    Wtf.apply(this,{
        border:false,
        layout : "fit",
        items:[ this.leadpan]
    });


    //    Wtf.apply(this,{
    //        border:false,
    //        layout : "fit",
    //        tbar: this.tbar1,
    //        items:[this.grid],
    //        bbar: this.pagingToolbar = new Wtf.PagingSearchToolbar({
    //            pageSize: 30,
    //            id: "pagingtoolbar" + this.id,
    //            store: this.Store,
    //            searchField: this.quickPanelSearch,
    //            displayInfo: true,
    //            emptyMsg: WtfGlobal.getLocaleText("acc.common.nores"),
    //            plugins: this.pP = new Wtf.common.pPageSize({id : "pPageSize_"+this.id})
    //        })
    //    });
    this.Store.on('beforeload',function(s,o){
        if(!o.params)o.params={};
        var currentBaseParams = this.Store.baseParams;
        currentBaseParams.deleted=this.deleted;
        currentBaseParams.nondeleted=this.nondeleted;
        currentBaseParams.costCenterId = this.costCenter.getValue();
        currentBaseParams.startdate = WtfGlobal.convertToGenericStartDate(this.startDate.getValue());
        currentBaseParams.enddate = WtfGlobal.convertToGenericEndDate(this.endDate.getValue());
        currentBaseParams.isfavourite=this.isfavourite;
        currentBaseParams.isNoteReturns=this.isNoteReturns;
        currentBaseParams.isLeaseFixedAsset=this.isLeaseFixedAsset;
        currentBaseParams.isFixedAsset = this.isFixedAsset;
        currentBaseParams.isConsignment=this.isConsignment;
        currentBaseParams.productid = this.productname.getValue();
        currentBaseParams.productCategoryid = this.productCategory.getValue();
        /*Mobile Transactions*/
        if(this.generatedSource!=undefined &&  this.generatedSource!="undefined"&& this.generatedSource!=null){
            currentBaseParams.generatedSource=this.generatedSource;
        }
        this.Store.baseParams=currentBaseParams;

    },this);
    this.loadParmStore();
    this.typeEditor.on('select',this.loadTypeStore,this);
    this.expandStore.on('load',this.fillExpanderBody,this);
    this.expander.on("expand",this.onRowexpand,this);
    //this.grid.on('render',this.loadParmStore,this);
    this.Store.on('load',this.expandRow, this);
    this.Store.on('load',this.hideLoading, this);
    this.Store.on('loadexception',this.hideLoading, this);
    Wtf.account.DeliveryListPanel.superclass.constructor.call(this,config);
    this.addEvents({
        'journalentry':true
    });
    this.sm.on("selectionchange",this.enableDisableButtons.createDelegate(this),this);
    this.grid.on('cellclick',this.onCellClick, this);
    // * Attachment document in Grid SJ[ERP-16331]
    this.grid.flag = 0;
    this.grid.on('rowclick', Wtf.callGobalDocFunction, this);
    this.getMyConfig();
// * Attachment document in Grid SJ[ERP-16331]
}
Wtf.extend(Wtf.account.SalesReturnListPanel,Wtf.Panel,{
    withoutRateCurrencyDeletedSymbolWithPermissionCheck:function(v,m,rec){
        if((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase)) {
            return Wtf.UpriceAndAmountDisplayValue;
        } else{
            return WtfGlobal.withoutRateCurrencyDeletedSymbol(v,m,rec);
        }
    },
    /**
     * Import Button for E-wat Fields (Eway bill no and Date)
     * ERP-39530
     */
    createImportEwayFiledsButton: function () {
        var extraConfig = {};
        extraConfig.url = "AccEntityGST/importEwayFieldsData.do";
        extraConfig.isExcludeXLS = false;
        extraConfig.ImportModuleId = this.moduleid;
        var extraParams = {};
        extraParams.isCustomer = this.isCustomer;
        var importEwayBtnArray = Wtf.importMenuArray(this, Wtf.EWAY_BILL_IMPORT_MODULENAME, this.Store, extraParams, extraConfig);
        if (importEwayBtnArray.length == 2) {
            importEwayBtnArray.remove(importEwayBtnArray[0]);
        }
        this.importEwayBtn = new Wtf.Action({//
            text: WtfGlobal.getLocaleText("acc.import.document.eway.fieldsdata.txt"),
            scope: this,
            tooltip: WtfGlobal.getLocaleText("acc.import.document.eway.fieldsdata.txt"),
            iconCls: (Wtf.isChrome ? 'pwnd importChrome' : 'pwnd import'),
            menu: importEwayBtnArray
        });
        return this.importEwayBtn;
    },
    currencyDeletedRendererWithPermissionCheck:function(v,m,rec){
        if((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase)) {
            return Wtf.UpriceAndAmountDisplayValue;
        } else{
            return WtfGlobal.currencyDeletedRenderer(v,m,rec);
        }
    },
    submitHandler : function(){
        this.loadStore();
    },
   checkRemarkCol: function () {
        this.isHideRemarkColumn = false;
        
        var reasonFieldID="";
        this.reasonFieldName="";
        var remarkFieldId='';
        if (this.moduleid === Wtf.Acc_Sales_Return_ModuleId) {
            remarkFieldId = Wtf.SALES_RETURN_REMARK_FIELDID;
            reasonFieldID = Wtf.SALES_RETURN_REASON_FIELDID;
        } else if (this.moduleid === Wtf.Acc_Purchase_Return_ModuleId) {
            remarkFieldId = Wtf.PURCHASE_RETURN_REMARK_FIELDID;
            reasonFieldID = Wtf.PURCHASE_RETURN_REASON_FIELDID;
        }
        var index = this.customizeStore.find('id', remarkFieldId);
        if (index !== -1) {
            var rec = this.customizeStore.getAt(index);
            if (rec.data.hidecol) {
                this.isHideRemarkColumn = true;
            }
        }
        
         var resonIndex = this.customizeStore.find('id', reasonFieldID);
          if (resonIndex !== -1) {
            var rec = this.customizeStore.getAt(resonIndex);
            if (rec.data.fieldlabeltext!== undefined  || rec.data.fieldlabeltext!== '') {
                this.reasonFieldName = rec.data.fieldlabeltext;
            }
        }
    }, 
  hideLoading:function(){Wtf.MessageBox.hide();},
    loadTypeStore:function(a,rec){  

        this.deleted=false;
        this.nondeleted=false;
        this.index=rec.data.typeid;
        this.isfavourite=false;
        if(this.index==1){
            this.isfavourite=true;
        }
        this.isNoteReturns=false;
        if(this.index==2){
            this.isNoteReturns=true;
        }
        if (this.index == Wtf.INDEX_MOBILE_TRANSACTIONS ) {
            this.generatedSource = Wtf.RECORD_Mobile_Application;
        }else{
            this.generatedSource="";
        }
 
        this.Store.on('load',this.storeloaded,this);
        this.loadStore();
        WtfComMsgBox(29,4,true);

    },
    setCostCenter: function(){
        this.costCenter.setValue(this.costCenterId);
        Wtf.CostCenterStore.un("load", this.setCostCenter, this);
    },
    enableDisableButtons:function(){
        if(!WtfGlobal.EnableDisable(this.uPermType, this.removePermType)){
            if(this.deleteTrans){this.deleteTrans.enable();}
              if(this.deleteTransPerm){this.deleteTransPerm.enable();}
            }
        var arr=this.grid.getSelectionModel().getSelections();
        if(arr.length==0&&!WtfGlobal.EnableDisable(this.uPermType,this.removePermType)){
           if(this.deleteTrans){this.deleteTrans.disable();}
                if(this.deleteTransPerm){this.deleteTransPerm.disable();}
            }
        if(!WtfGlobal.EnableDisable(this.uPermType, this.removePermType)){
            for(var i=0;i<arr.length;arr++){
                if(arr[i]&&arr[i].data.deleted)
                    if(this.deleteTrans){this.deleteTrans.disable();}
                if(this.deleteTransperm){this.deleteTransperm.enable();}
                    }
                }

        var rec = this.sm.getSelected();
        if((this.sm.getCount()==1 && rec.data.deleted != true)){
            if(this.email)this.email.enable();
            if (this.viewDeliveryPlannerBttn) {
                this.viewDeliveryPlannerBttn.enable();
            }
            if(this.editBttn){
                this.editBttn.enable();
            }
            if(this.copyInvBttn){
                this.copyInvBttn.enable();
            }
            
            if (this.unlinkDocumentBtn) {
                this.unlinkDocumentBtn.enable();
            }

        }else{
            if(this.email)this.email.disable();
            if (this.viewDeliveryPlannerBttn) {
                this.viewDeliveryPlannerBttn.disable();
            }
            if(this.editBttn){
                this.editBttn.disable();
            }
                
            if(this.copyInvBttn){
                this.copyInvBttn.disable();
            }
            
            if (this.unlinkDocumentBtn) {
                this.unlinkDocumentBtn.disable();
            }
        }
        
        /* If record is temporary deleted, 
         * 
         * then Linking Information button is being enabled,
         * to see its Linking Information
         * */
        if (this.sm.getCount() == 1) {
            if (this.linkinfoViewBtn) {
                this.linkinfoViewBtn.enable();
            }
            if (this.relatedTransactionsBtn) {
                this.relatedTransactionsBtn.enable();
            }

        } else {
            if (this.linkinfoViewBtn) {
                this.linkinfoViewBtn.disable();
            }
            if (this.relatedTransactionsBtn) {
                this.relatedTransactionsBtn.disable();
            }
        }
        
        if(this.sm.getCount()>=1 ){
            if(this.singlePrint)this.singlePrint.enable();
            //if(this.singlePrint)this.singlePrint.enable();
//            if(this.singleRowPrint)this.singleRowPrint.enable();
        }else {
            if(this.singlePrint)this.singlePrint.disable();
            // if(this.singlePrint)this.singlePrint.disable();
//            if(this.singleRowPrint)this.singleRowPrint.disable();
        }

    },
    
    starCellClickHandler : function(grid, rowIndex, columnIndex,e){
        if(grid.colModel.getDataIndex(columnIndex) == 'isfavourite'){
            var formrec = grid.getSelectionModel().getSelected();
            var isfavourite = formrec.get('isfavourite');
            if(!formrec.data.deleted && !this.consolidateFlag){
                if(isfavourite){
                    this.markUnFavouriteHandler(formrec);
                }else{
                    this.markFavouriteHandler(formrec);
                }
            }
        }
    },
    
    markFavouriteHandler : function(formrec){
        var url =(this.isCustomer)?"ACCInvoice/updateSalesReturnFavourite.do":"ACCGoodsReceiptCMN/updatePurchaseReturnFavourite.do";
        
        Wtf.Ajax.requestEx({
            url:url,
            params:{ 
                date: WtfGlobal.convertToGenericDate(formrec.data.date),//used as transaction date
                id:formrec.get('billid'),
                isfavourite:true
            }
        },this,
        function(){
            formrec.set('isfavourite', true);
        },function(){
                
            });
    },

    markUnFavouriteHandler : function(formrec){
        var url =(this.isCustomer)?"ACCInvoice/updateSalesReturnFavourite.do":"ACCGoodsReceiptCMN/updatePurchaseReturnFavourite.do";
        
        Wtf.Ajax.requestEx({
            url:url,
            params:{
                date: WtfGlobal.convertToGenericDate(formrec.data.date),
                id:formrec.get('billid'),
                isfavourite:false
            }
        },this,
        function(){
            if(this.index == 1){
                this.grid.getStore().remove(formrec);
            }else{
                formrec.set('isfavourite', false);
            }
        },function(){
                
            });
    },
    
    loadParmStore:function(){
        this.typeEditor.setValue(0);
        if(!(Wtf.Acc_FixedAssets_Purchase_Return_ModuleId==this.moduleid || Wtf.Acc_FixedAssets_Sales_Return_ModuleId==this.moduleid)){
            if(this.invID==null)
            {
            this.Store.load({params:{start:0,limit:30}});
            }
            WtfComMsgBox(29,4,true);        
        }        
            this.Store.on('load',this.expandRow, this);
            this.Store.on('datachanged', function() {
                if(this.invID==null){
                    var p = this.pP.combo.value;
                    this.quickPanelSearch.setPage(p);
                    this.expandCollpseButton.setText(WtfGlobal.getLocaleText("acc.field.Expand"));
                    this.expandButtonClicked = false;
                    this.expander.resumeEvents('expand');           // event is suspended while expanding all records.
                }
            //            this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body,{productname:"&nbsp;&nbsp;&nbsp;&nbsp;",qty:0,soqty:0,poqty:0});
            }, this);
        //}
},
handleResetClick:function(){
    if(this.quickPanelSearch.getValue()){
        this.quickPanelSearch.reset();
        this.loadStore();
        this.Store.on('load',this.storeloaded,this);
    }
},
   
storeloaded:function(store){
    this.quickPanelSearch.StorageChanged(store);
},
openNewTab:function(){
     
    //     if(this.businessPerson=='Customer'){
    if (this.isConsignment) {
        callConsignmentSalesReturn(false,null,null,false,true,false);
    } else if (this.isFixedAsset) {
        this.isCustomer?(!WtfGlobal.EnableDisable(Wtf.UPerm.assetsalesreturn,Wtf.Perm.assetsalesreturn.createasret))?callFixedAssetSalesReturn(false,null,null,true): WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.createasret")): (!WtfGlobal.EnableDisable(Wtf.UPerm.assetpurchasereturn,Wtf.Perm.assetpurchasereturn.createapret))?callFixedAssetPurchaseReturn(false,null,null,true):WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.createapret"));
    }else{
        callSalesReturnWindow(this.businessPerson=='Customer');
    //            callSalesReturn();
    }
//     }
//     else{
//      callPurchaseReturn(); 
//     }
},

    /**
     * Function to perform any check/validation before allowing to edit a transaction
     * @returns {undefined}
     */
    editTransactionCheckBefore: function () {
        if (this.isModuleForAvalara) {
            /**
             * In case of Avalara Integration, we first check if SR should be allowed to edit or not
             * After checking the same in function 'validateTransactionWithAvalaraAndCallBack', the function 'this.editOrderTransaction' is called back
             */
            var selectedRec = this.grid.getSelectionModel().getSelected();
            if (selectedRec && selectedRec.data.isTaxCommittedOnAvalara) {
                validateTransactionWithAvalaraAndCallBack(this, selectedRec, undefined);
            } else {
                this.editOrderTransaction();
            }
        } else {
            this.editOrderTransaction();
        }
    },

/**
 * Please note that this function is also called from function 'validateTransactionWithAvalaraAndCallBack' in AvalaraIntegration.js
 * @returns {undefined}
 */
editOrderTransaction:function(){			// Editing Sales and Purchase Order with Inventory and Without Inventory
    var formRecord = null;
    if(this.grid.getSelectionModel().hasSelection()==false||this.grid.getSelectionModel().getCount()>1){
        WtfComMsgBox(15,2);
        return;
    }
    var isNoteAlso=false;
    var isSaleReturnWithPay=false;
    formRecord = this.grid.getSelectionModel().getSelected();
    isNoteAlso=formRecord.get("isNoteAlso");
    isSaleReturnWithPay=formRecord.get("isSaleReturnWithPay");
//        if (isNoteAlso) {
//            if (this.isCustomer) {
//                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.dn.CNlinkedintransactionSoCanNotbeEdited")], 2);
//                return;
//            } else {
//                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.dn.DNlinkedintransactionSoCanNotbeEdited")], 2);
//                return;
//            }
//        }
    var label=WtfGlobal.getLocaleText("acc.product.edit");
    var findtablabel=WtfGlobal.getLocaleText("acc.common.copy");
    var billid=formRecord.get("billid");
    label=label+billid;
    findtablabel=findtablabel+billid;
    if(this.isLeaseFixedAsset){
        callEditSalesFixedAssetSalesReturn(true,formRecord,billid,false,this.isLeaseFixedAsset)
    }
   else if(this.isConsignment){
        //        this.isCustomer?callConsignmentSalesReturn(true,formRecord,billid,this.isLeaseFixedAsset,this.isConsignment):callConsignmentPurchaseReturn(true,formRecord,billid,this.isLeaseFixedAsset,this.isConsignment);
        if(this.isCustomer){
            this.checkforValidForEditOrNot(formRecord,billid,this.isLeaseFixedAsset,this.isConsignment);
        }else{
            callConsignmentPurchaseReturn(true,formRecord,billid,this.isLeaseFixedAsset,this.isConsignment);
        }
    }
    else{
        if(this.isCustomer){
            if (this.checkDuplicateTabOpen('SalesReturn'+findtablabel)) {
                if (this.isFixedAsset) {
                    callEditFixedAssetSalesReturn(true,formRecord,label,false,isNoteAlso,this.isFixedAsset);
                } else {
                    callEditSalesReturn(true,formRecord,label,false,isNoteAlso,isSaleReturnWithPay);
                }
            }
        }else if(this.checkDuplicateTabOpen('PurchaseReturn'+findtablabel)){
            if (this.isFixedAsset) {
                callEditFixedAssetPurchaseReturn(true,formRecord,label,false,isNoteAlso,this.isFixedAsset);
            } else {
                    callEditPurchaseReturn(true,formRecord,label,false,isNoteAlso);
            }
        }
    }	
},
    
checkforValidForEditOrNot:function(formRecord,billid,isLeaseFixedAsset,isConsignment){
    Wtf.Ajax.requestEx({
        url:"ACCSalesReturnCMN/ValidForEditOrNot.do",
        params: {
            formRecord: formRecord,
            billid: billid,
            isConsignment:isConsignment
        }
    },this,
    function(res,action){
        if(res.success==true){     
            callConsignmentSalesReturn(true,formRecord,billid,this.isLeaseFixedAsset,this.isConsignment,false);//set isLinkedTransaction =false as this is not used in other transaction
        } else if(res.success==false){  
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invList.linkedReturn"), function(btn) {
                if (btn == "yes") {
                    callConsignmentSalesReturn(true,formRecord,billid,this.isLeaseFixedAsset,this.isConsignment,true); //set isLinkedTransaction =true as this is used in other transaction
                } else {
                    return;
                }
            }, this); 
          

//            WtfComMsgBox(["Error", res.msg],0);
//            return false;
        }
    },
    function() {
        WtfComMsgBox(["Error", "Error occurred while processing"],1);
    }
    );  
},
copyTransaction : function(){
    var formRecord = null;
    if(this.grid.getSelectionModel().hasSelection()==false||this.grid.getSelectionModel().getCount()>1){
        WtfComMsgBox(15,2);
        return;
    }
    formRecord = this.grid.getSelectionModel().getSelected();
    var label=WtfGlobal.getLocaleText("acc.common.copy");
    var findtablabel=WtfGlobal.getLocaleText("acc.product.edit");
    var billid=formRecord.get("billid");
    label=label+billid;
    findtablabel=findtablabel+billid;
    var isNoteAlso = formRecord.get("isNoteAlso");
    var isPaymentAlso = formRecord.get("isSaleReturnWithPay");
    if(isNoteAlso && Wtf.account.companyAccountPref.countryid ==Wtf.Country.MALAYSIA){  
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),WtfGlobal.getLocaleText("acc.field.linkinfo.cantcopy")], 4);
        return;      
    }
    if(this.isCustomer){
        if (this.checkDuplicateTabOpen('SalesReturn'+findtablabel))
            callEditSalesReturn(true,formRecord,label, true,isNoteAlso,isPaymentAlso)
    }else if(this.checkDuplicateTabOpen('PurchaseReturn'+findtablabel)){
        callEditPurchaseReturn(true,formRecord,label, true,isNoteAlso);
    }
},

checkDuplicateTabOpen:function(tabid) {
    var tabpanel = Wtf.getCmp(tabid);
    if(tabpanel!=undefined){ //Alerting user due to ERP-3302,ERP-3303,ERP-3309,ERP-3317
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoicelist.alreadyopentablalert")],2);
        return false;
    } else {
        return true;
    }
},
    
sendMail:function(){
    var formrec=null;
    if(this.grid.getSelectionModel().hasSelection()==false||this.grid.getSelectionModel().getCount()>1){
        WtfComMsgBox(15,2);
        return;
    }
    formrec = this.grid.getSelectionModel().getSelected();
    var mode=(this.isCustomer)?61:63;
    if (this.moduleid == Wtf.Acc_Sales_Return_ModuleId) {
        callEmailForMultipleRecords('', formrec, this.label, 61, true, '', this.label, 'pdf', 24, undefined, false, true, "", Wtf.Acc_Sales_Return_ModuleId);
    }else if(this.moduleid == Wtf.Acc_Purchase_Return_ModuleId) {
        callEmailForMultipleRecords('', formrec, this.label, 63, true, '', this.label, 'pdf', 24, undefined, false, true, "", Wtf.Acc_Purchase_Return_ModuleId);
    }
    else {
        formrec.set("moduleid",this.moduleid);
        this.isConsignment?callEmailWin("emailwin",formrec,this.label,mode,this.isCustomer,false,false,false,false,false, false, true,false,true):callEmailWin("emailwin",formrec,this.label,mode,this.isCustomer,false,false,false,false,false, false, true);
    }
       
        
},

onRowexpand:function(scope, record, body){
    var colModelArray = GlobalColumnModel[this.moduleid];
    var colModelArrayProduct = GlobalColumnModelForProduct[this.moduleid];
    colModelArray = colModelArray.concat(colModelArrayProduct);
    WtfGlobal.updateStoreConfig(colModelArray,this.expandStore);
    this.expanderBody=body;
    this.isexpenseinv=!this.isCustomer&&record.data.isexpenseinv;
    this.withInvMode = record.data.withoutinventory;
        this.expandStore.load({params:{bills:record.data.billid,isexpenseinv:(!this.isCustomer&&record.data.isexpenseinv),isConsignment:this.isConsignment,isLeaseFixedAsset:this.isLeaseFixedAsset,isFixedAsset:this.isFixedAsset}});
},
//    fillExpanderBody:function(){
//        var disHtml = "";
//        var arr=[];
//        var header ;
////            arr=[(this.isCustBill?'':'Product ID'),(this.isCustBill?'Product Details':'Product Name' ),(this.isCustBill?'':'Product Type'),'Quantity','Unit Price',(this.isOrder||this.isQuotation)?'':'Discount','Tax Percent','Amount',"                  "];//(this.isCustBill?'':'Remark'),
//        	var productTypeText = this.withInvMode?WtfGlobal.getLocaleText("acc.invoiceList.expand.pTypeNonInv") : WtfGlobal.getLocaleText("acc.invoiceList.expand.pType");
//
//            arr=[(this.withInvMode?'':WtfGlobal.getLocaleText("acc.invoiceList.expand.PID")),//PID for Inventory
//                (this.withInvMode?WtfGlobal.getLocaleText("acc.invoiceList.expand.pDetailsNonInv"):WtfGlobal.getLocaleText("acc.invoiceList.expand.pName")),//Product Details or Product Name
//                (this.isCustomer?
//                    productTypeText:(Wtf.account.companyAccountPref.countryid == '203' && !this.isQuotation && !this.isOrder)?
//                     WtfGlobal.getLocaleText("acc.field.PermitNo."):productTypeText),//Product Type
////                WtfGlobal.getLocaleText("acc.do.partno"),//Model/Serial no.
//                WtfGlobal.getLocaleText("acc.invoiceList.expand.qty"),//Quantity
//                WtfGlobal.getLocaleText("acc.accPref.returnQuant"),
//                WtfGlobal.getLocaleText("acc.invoice.gridRemark"),//Reason
//                (this.businessPerson =="Customer")?(this.isLeaseFixedAsset? WtfGlobal.getLocaleText("acc.field.LeaseDONO"):((this.isConsignment?WtfGlobal.getLocaleText("acc.field.CDONo"):WtfGlobal.getLocaleText("acc.field.CI/DONo")))):(this.isConsignment?WtfGlobal.getLocaleText("acc.field.CGRNo"):WtfGlobal.getLocaleText("acc.field.VI/GRNo"))];
//        	var gridHeaderText = this.withInvMode?WtfGlobal.getLocaleText("acc.invoiceList.expand.pListNonInv"):WtfGlobal.getLocaleText("acc.invoiceList.expand.pList");
//            header = "<span class='gridHeader'>"+gridHeaderText+"</span>";   //Product List
//            var custArr = [];
//            custArr = WtfGlobal.appendCustomColumn(custArr,GlobalColumnModel[this.moduleid]);
//            var arrayLength=arr.length;
//            for(i=0;i<custArr.length;i++){
//                if(custArr[i].header != undefined )
//                    arr[arrayLength+i]=custArr[i].header;
//            }
//            var count=0;
//            for(var i=0;i<arr.length;i++){
//                if(arr[i] != ""){
//                    count++;
//                }
//            }
//            count++;
//            var widthInPercent=100/count;
//            var minWidth = count*100 ;
//            header += "<div style='width: 100%;min-width:"+minWidth+"px'>";
//            header += "<span class='gridNo' style='font-weight:bold;'>"+WtfGlobal.getLocaleText("acc.cnList.Sno")+"</span>";
//            for(var i=0;i<arr.length;i++){
//                header += "<span class='headerRow' style='width:"+widthInPercent+"% ! important;' wtf:qtip='"+arr[i]+"'>" + Wtf.util.Format.ellipsis(arr[i],15) + "</span>";
//            }
//            header += "</div><div style='width: 100%;min-width:"+minWidth+"px'><span class='gridLine'></span></div>";   
//            header += "<div style='width: 100%;min-width:"+minWidth+"px'>";
//            for(i=0;i<this.expandStore.getCount();i++){
//                var rec=this.expandStore.getAt(i);
//                var productname=this.withInvMode?rec.data['productdetail']: rec.data['productname'];
//
//                //Column : S.No.
//                header += "<span class='gridNo'>"+(i+1)+".</span>";
//
//                //Column : Product Id for Inventory
//                if(!this.withInvMode)
//                    header += "<span class='gridRow' wtf:qtip='"+rec.data['pid']+"' style='width: "+widthInPercent+"% ! important;'><a class='jumplink' wtf:qtip='"+rec.data['pid']+"' href='#' onClick='javascript:Wtf.onCellClickProductDetails(\""+rec.data['productid']+"\","+this.isFixedAsset+")'>"+rec.data['pid']+"&nbsp;</a></span>"; // ERP-13247 [SJ]
//
//                //Column : Product Name
//                header += "<span class='gridRow'  style='width: "+widthInPercent+"% ! important;' wtf:qtip='"+productname+"'><a class='jumplink' wtf:qtip='"+productname+"' href='#' onClick='javascript:Wtf.onCellClickProductDetails(\""+rec.data['productid']+"\","+this.isFixedAsset+")'>"+Wtf.util.Format.ellipsis(productname,15)+"</a></span>"; // ERP-13247 [SJ]
//
//                if(!this.isCustomer && !this.isQuotation && !this.isOrder && Wtf.account.companyAccountPref.countryid == '203')
//                    header += "<span class='gridRow'  style='width: "+widthInPercent+"% ! important;'>"+rec.data['permit']+"&nbsp;</span>";
//                else if(!this.withInvMode){
//                    var type = "";
//                    type = rec.data['type']
//                    header += "<span class='gridRow'  style='width: "+widthInPercent+"% ! important;'>"+type+"</span>";
//                }
//                else {
//                    header += "<span class='gridRow'  style='width: "+widthInPercent+"% ! important;'>&nbsp;</span>";
//                }
//
//                //Part No
////                if(rec.data['partno'] != ""){
////                    header += "<span class='gridRow' style='word-wrap:break-word;width: "+widthInPercent+"% ! important;'>"+rec.data['partno']+"</span>";
////                } else {
////                    header += "<span class='gridRow'  style='width: "+widthInPercent+"% ! important;'>&nbsp;</span>";
////                }
//                 
//                //Quantity
//                header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>"+rec.data['quantity']+" "+rec.data['unitname']+"</span>";
//                
//                //Delivered Quantity
//                header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>"+rec.data['dquantity']+" "+rec.data['unitname']+"</span>";
//
//                //Reason
//                if(rec.data['remark']!="")
//                    header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>"+rec.data['remark']+"</span>";
//                else
//                    header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>&nbsp;</span>";
//                    
//                //VI/GR
//                if(rec.data['linkto']!="")
//                 {
//                    header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>"+rec.data['linkto']+"</span>";       
//                 }else{
//                    header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>&nbsp;</span>";             
//                 }                
//                for(var j=0;j<custArr.length;j++){
//                    if(rec.data[custArr[j].dataIndex]!=undefined && rec.data[custArr[j].dataIndex]!="null" && rec.data[custArr[j].dataIndex]!="")
//                        header += "<span class='gridRow'style='width: "+widthInPercent+"% ! important;'  wtf:qtip='"+rec.data[custArr[j].dataIndex]+"'>"+Wtf.util.Format.ellipsis(rec.data[custArr[j].dataIndex],15)+"&nbsp;</span>";
//                    else
//                        header += "<span class='gridRow' style='width: "+widthInPercent+"% ! important;'>&nbsp;&nbsp;</span>";
//                }
//               header +="<br>";
//            }
//            header +="</div>";
//            disHtml += "<div class='expanderContainer1'>" + header + "</div>";
//        
//        this.expanderBody.innerHTML = disHtml;
//    },
    
fillExpanderBody:function(){
    var disHtml = "";
    this.custArr = [];
    this.custArr = WtfGlobal.appendCustomColumn(this.custArr, GlobalColumnModel[this.moduleid]);
    this.custArr = WtfGlobal.appendCustomColumn(this.custArr, GlobalColumnModelForProduct[this.moduleid]);
    var ProductHeader = this.getProductHeader();              //ProductHeader[0]: HTML text,  ProductHeader[1]: minWidth,  ProductHeader[2]:widthInPercent

    var prevBillid = "";
    var sameParent = false;
    for (var i = 0; i < this.expandStore.getCount(); i++) {
        var header = "";
        var rec = this.expandStore.getAt(i);

        var currentBillid = rec.data['billid'];
        if (prevBillid != currentBillid) {             // Check if last record also has same 'billid'.  
            prevBillid = currentBillid;
            sameParent = false;
        } else {
            sameParent = true;
        }
        header = this.getProductExpanderData(rec, sameParent, ProductHeader[1], ProductHeader[2]);
        var moreIndex = this.grid.getStore().findBy(
            function(record, id) {
                if (record.get('billid') === rec.data['billid']) {
                    return true;  // a record with this data exists 
                }
                return false;  // there is no record in the store with this data
            }, this);
        if (moreIndex != -1) {
            var body = Wtf.DomQuery.selectNode('tr:nth(2) div.x-grid3-row-body', this.grid.getView().getRow(moreIndex));
            disHtml = "<div class='expanderContainer1'>" + ProductHeader[0] + header + "</div>";
            body.innerHTML = disHtml;
            if (this.expandButtonClicked) {
                this.expander.suspendEvents('expand');              //suspend 'expand' event of RowExpander only in case of ExpandAll.
                this.expander.expandRow(moreIndex);                // After data set to Grid Row, expand row forcefully.
            }
        }
    }
},
    
getProductHeader: function(){
    var productHeaderArray = [];
    var arr = [];
    var header;
    var hideShowFlag = false;
    if (this.moduleid == Wtf.Acc_Sales_Return_ModuleId && Wtf.account.companyAccountPref.calculateproductweightmeasurment) {
        hideShowFlag = true;
    }
    //            arr=[(this.isCustBill?'':'Product ID'),(this.isCustBill?'Product Details':'Product Name' ),(this.isCustBill?'':'Product Type'),'Quantity','Unit Price',(this.isOrder||this.isQuotation)?'':'Discount','Tax Percent','Amount',"                  "];//(this.isCustBill?'':'Remark'),
    var productTypeText = this.withInvMode ? WtfGlobal.getLocaleText("acc.invoiceList.expand.pTypeNonInv") : WtfGlobal.getLocaleText("acc.invoiceList.expand.pType");
        
    arr = [(this.withInvMode?'':(this.isFixedAsset)?WtfGlobal.getLocaleText("acc.fixed.asset.id"):WtfGlobal.getLocaleText("acc.invoiceList.expand.PID")),//PID for Inventory
     (this.withInvMode?WtfGlobal.getLocaleText("acc.invoiceList.expand.pDetailsNonInv"):(this.isFixedAsset)?WtfGlobal.getLocaleText("acc.fixed.asset.name"):WtfGlobal.getLocaleText("acc.invoiceList.expand.pName")),//Product Details or Product Name
 //Product Details or Product Name
    (this.moduleid=== Wtf.Acc_Sales_Return_ModuleId||this.moduleid=== Wtf.Acc_Purchase_Return_ModuleId ? WtfGlobal.getLocaleText("acc.masterConfig.taxes.gridDescription"):""),//Product Details or Product Description
    (this.isCustomer ?
        productTypeText : (Wtf.account.companyAccountPref.countryid == '203' && !this.isQuotation && !this.isOrder) ?
        WtfGlobal.getLocaleText("acc.field.PermitNo.") : productTypeText), //Product Type
    //                WtfGlobal.getLocaleText("acc.do.partno"),//Model/Serial no.
    WtfGlobal.getLocaleText("acc.invoiceList.expand.qty"), //Quantity
    WtfGlobal.getLocaleText("acc.accPref.returnQuant"),
    (hideShowFlag ?WtfGlobal.getLocaleText("acc.productList.unitWeight"):''),//Unit Weight
    (hideShowFlag?WtfGlobal.getLocaleText("acc.productList.unitWeightWithPackaging"):''),//Unit Weight
    (hideShowFlag?WtfGlobal.getLocaleText("acc.productList.unitVolume"):''),//Unit Volume
    (hideShowFlag?WtfGlobal.getLocaleText("acc.productList.unitVolumeWithPackaging"):''),//Unit Volume with Packageing
    (CompanyPreferenceChecks.displayUOMCheck() === true ? WtfGlobal.getLocaleText("acc.product.displayUoMLabel"):''),//Display UOM,
    (!this.isHideRemarkColumn ? WtfGlobal.getLocaleText("acc.invoice.gridRemark") :''), //Reason
    (this.businessPerson == "Customer") ? (this.isLeaseFixedAsset ? WtfGlobal.getLocaleText("acc.field.LeaseDONO") : ((this.isConsignment ? WtfGlobal.getLocaleText("acc.field.CDONo") : WtfGlobal.getLocaleText("acc.field.CI/DONo")))) : (this.isConsignment ? WtfGlobal.getLocaleText("acc.field.CGRNo") : WtfGlobal.getLocaleText("acc.field.VI/GRNo"))];
    var gridHeaderText = this.withInvMode ? WtfGlobal.getLocaleText("acc.invoiceList.expand.pListNonInv") : WtfGlobal.getLocaleText("acc.invoiceList.expand.pList");
    header = "<span class='gridHeader'>" + gridHeaderText + "</span>";   //Product List
    var arrayLength = arr.length;
    for (i = 0; i < this.custArr.length; i++) {
        if (this.custArr[i].header != undefined)
            arr[arrayLength + i] = this.custArr[i].header;
    }
    var count = 0;
    for (var i = 0; i < arr.length; i++) {
        if (arr[i] != "") {
            count++;
        }
    }
    count++;
    var widthInPercent = 100 / count;
    var minWidth = count * 100;
    header += "<div style='width: 100%;min-width:" + minWidth + "px'>";
    header += "<span class='gridNo' style='font-weight:bold;'>" + WtfGlobal.getLocaleText("acc.cnList.Sno") + "</span>";
    for (var i = 0; i < arr.length; i++) {
        header += "<span class='headerRow' style='width:" + widthInPercent + "% ! important;' wtf:qtip='" + arr[i] + "'>" + Wtf.util.Format.ellipsis(arr[i], 15) + "</span>";
    }
    header += "</div><div style='width: 100%;min-width:" + minWidth + "px'><span class='gridLine'></span></div>";
    productHeaderArray.push(header);
    productHeaderArray.push(minWidth);
    productHeaderArray.push(widthInPercent);
    return productHeaderArray;
},
    
getProductExpanderData: function(rec,sameParent, minWidth, widthInPercent){
        
    if (!sameParent) {
        this.Repeatheader = "";
        this.serialNumber = 0;
    }
    this.Repeatheader += "<div style='width: 100%;min-width:" + minWidth + "px'>";
    var productname = this.withInvMode ? rec.data['productdetail'] : rec.data['productname'];

    //Column : S.No.
    this.Repeatheader += "<span class='gridNo'>" + (++this.serialNumber) + ".</span>";

    //Column : Product Id for Inventory
    if (!this.withInvMode)
        this.Repeatheader += "<span class='gridRow' wtf:qtip='" + rec.data['pid'] + "' style='width: " + widthInPercent + "% ! important;'><a class='jumplink' wtf:qtip='" + rec.data['pid'] + "' href='#' onClick='javascript:Wtf.onCellClickProductDetails(\"" + rec.data['productid'] + "\"," + this.isFixedAsset + ")'>" + rec.data['pid'] + "&nbsp;</a></span>"; // ERP-13247 [SJ]

    //Column : Product Name
    this.Repeatheader += "<span class='gridRow'  style='width: " + widthInPercent + "% ! important;' wtf:qtip='" + productname + "'><a class='jumplink' wtf:qtip='" + productname + "' href='#' onClick='javascript:Wtf.onCellClickProductDetails(\"" + rec.data['productid'] + "\"," + this.isFixedAsset + ")'>" + Wtf.util.Format.ellipsis(productname, 15) + "</a></span>"; // ERP-13247 [SJ]
    
    //Column : Product description
    if(rec.data['description']!=null && rec.data['description']!=""){
        var productdesc=rec.data['description'];
	productdesc = productdesc.replace(/<\/?[^>]+(>|$)/g, "");   
	if(productdesc=="") {
            productdesc='&nbsp';    //If HTML Content is <br> only.
        }
    }else if(rec.data['desc']!=null && rec.data['desc']!=""){
        var productdesc=rec.data['desc'];
	productdesc = productdesc.replace(/<\/?[^>]+(>|$)/g, "");   
	if(productdesc=="") {
            productdesc='&nbsp';    //If HTML Content is <br> only.
        }
    }else{
        var productdesc='&nbsp';
    }
    (this.moduleid=== Wtf.Acc_Sales_Return_ModuleId||this.moduleid=== Wtf.Acc_Purchase_Return_ModuleId ? this.Repeatheader += "<span class='gridRow'  wtf:qtip='"+productdesc+"' style='width: "+widthInPercent+"% ! important;'>"+Wtf.util.Format.ellipsis(productdesc,15)+"</a></span>":""); 
    
    if (!this.isCustomer && !this.isQuotation && !this.isOrder && Wtf.account.companyAccountPref.countryid == '203')
        this.Repeatheader += "<span class='gridRow'  style='width: " + widthInPercent + "% ! important;'>" + rec.data['permit'] + "&nbsp;</span>";
    else if (!this.withInvMode) {
        var type = "";
        type = rec.data['type']
        this.Repeatheader += "<span class='gridRow'  style='width: " + widthInPercent + "% ! important;'>" + type + "</span>";
    }
    else {
        this.Repeatheader += "<span class='gridRow'  style='width: " + widthInPercent + "% ! important;'>&nbsp;</span>";
    }

    //Part No
    //                if(rec.data['partno'] != ""){
    //                    this.Repeatheader += "<span class='gridRow' style='word-wrap:break-word;width: "+widthInPercent+"% ! important;'>"+rec.data['partno']+"</span>";
    //                } else {
    //                    this.Repeatheader += "<span class='gridRow'  style='width: "+widthInPercent+"% ! important;'>&nbsp;</span>";
    //                }

    //Quantity
    this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + rec.data['quantity'] + " " + rec.data['unitname'] + "</span>";

    //Delivered Quantity
    this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + rec.data['dquantity'] + " " + rec.data['unitname'] + "</span>";

    if(this.moduleid == Wtf.Acc_Sales_Return_ModuleId && Wtf.account.companyAccountPref.calculateproductweightmeasurment){//for sales return two extra fields prdUnitWeight and  prdUnitWeightWithPackaging is added, so here is check for Sale Sreturn also setting should be true in company setting
        //Column : Unit Weight
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + WtfGlobal.weightRenderer(rec.data['productweightperstockuom'])+ "</span>";
        //Column : Unit Weight with Packageing
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + WtfGlobal.weightRenderer(rec.data['productweightincludingpakagingperstockuom']) + "</span>";
        //Column : Unit Weight
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + WtfGlobal.volumeRenderer(rec.data['productvolumeperstockuom'])+ "</span>";
        //Column : Unit Weight with Packageing
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + WtfGlobal.volumeRenderer(rec.data['productvolumeincludingpakagingperstockuom']) + "</span>";
    }
    var displayuom = rec.data['displayUOM'];
    if (displayuom == null || displayuom == "") {
        displayuom = '&nbsp';
    }
    if (CompanyPreferenceChecks.displayUOMCheck() === true)
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + displayuom + "&nbsp;</span>";

    //Reason
    if (rec.data['remark'] != "")
       // this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + rec.data['remark'] + "</span>";
     this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'' wtf:qtip='"+rec.data['remark']+"'>&nbsp;" +Wtf.util.Format.ellipsis(rec.data['remark'],20)  + "</span>";
//    else
//        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>&nbsp;</span>";

    //VI/GR
    if (rec.data['linkto'] != "")
    {
        //this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>" + rec.data['linkto'] + "</span>";
    this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'' wtf:qtip='"+rec.data['linkto']+"'>&nbsp; "+ Wtf.util.Format.ellipsis(rec.data['linkto'],20) + "</span>";
    } 
    else {
        this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>&nbsp;</span>";
    }
    for (var j = 0; j < this.custArr.length; j++) {
        if (rec.data[this.custArr[j].dataIndex] != undefined && rec.data[this.custArr[j].dataIndex] != "null" && rec.data[this.custArr[j].dataIndex] != "") {
            if (this.custArr[j].xtype == "datefield") {
                var linelevel_datefield = WtfGlobal.onlyDateRendererTZ(new Date(rec.data[this.custArr[j].dataIndex] * 1));
                this.Repeatheader += "<span class='gridRow'style='width: " + widthInPercent + "% ! important;'  wtf:qtip='" + linelevel_datefield + "'>" + Wtf.util.Format.ellipsis(linelevel_datefield, 15) + "&nbsp;</span>";
            } else if(this.custArr[j].fieldtype == 1 || this.custArr[j].fieldtype == 13){
                var regex = /(<([^>]+)>)/ig;
                var val = rec.data[this.custArr[j].dataIndex];
//                val = val.replace(/(<([^>]+)>)/ig,"");
                var tip = val.replace(/"/g,'&rdquo;');
                this.Repeatheader += "<span class='gridRow'style='width: " + widthInPercent + "% ! important;'  wtf:qtip='" + tip + "'>" + Wtf.util.Format.ellipsis(val, 15) + "&nbsp;</span>";
            } else
                this.Repeatheader += "<span class='gridRow'style='width: " + widthInPercent + "% ! important;'  wtf:qtip='" + rec.data[this.custArr[j].dataIndex] + "'>" + Wtf.util.Format.ellipsis(rec.data[this.custArr[j].dataIndex], 15) + "&nbsp;</span>";
        }
        else
            this.Repeatheader += "<span class='gridRow' style='width: " + widthInPercent + "% ! important;'>&nbsp;&nbsp;</span>";
    }
    this.Repeatheader += "<br>";
    this.Repeatheader += "</div>";
    return this.Repeatheader;
},
    
onCellClick:function(g,i,j,e){
    this.starCellClickHandler(g,i,j,e);
    e.stopEvent();
    var el=e.getTarget("a");
    if(el==null)return;
    var header=g.getColumnModel().getDataIndex(j);
    if(header=="billno"){
        this.viewTransection(g,i,e)
    } else if(header=="entryno"){
        var accid=this.Store.getAt(i).data['journalentryid'];
        this.fireEvent('journalentry',accid,true);
        } else if (header == "inventoryentryno") {
            var jeid = this.Store.getAt(i).data['inventoryjeid'];
            this.fireEvent('journalentry', jeid, true);
        } else if(header=="cndnnumber"){// when clicked on Note Number
        if(i<0&&this.grid.getStore().getAt(i)==undefined ||this.grid.getStore().getAt(i)==null ){
            WtfComMsgBox(15,2);
            return;
        }
          if (this.isCustomer ? !WtfGlobal.EnableDisable(Wtf.UPerm.creditnote, Wtf.Perm.creditnote.viewcn) : !WtfGlobal.EnableDisable(Wtf.UPerm.debitnote, Wtf.Perm.debitnote.viewdn)) {
                var formRecord = this.grid.getStore().getAt(i);
                WtfGlobal.callViewMode(formRecord.get("cndnnumber"), (this.isCustomer ? Wtf.Acc_Credit_Note_ModuleId : Wtf.Acc_Debit_Note_ModuleId), undefined, false);
            } else {
                WtfComMsgBox(46, 0, false, WtfGlobal.getLocaleText("acc.common.viewing") + " " +(this.isCustomer ? WtfGlobal.getLocaleText("acc.cnList.tabTitle") : WtfGlobal.getLocaleText("acc.dnList.tabTitle")));
            }
    }else if(header=="paymentNumber"){
        var formRecord = this.grid.getStore().getAt(i);
        WtfGlobal.callViewMode(formRecord.get("paymentNumber"), Wtf.Acc_Make_Payment_ModuleId, undefined, false);
    }
},

expandRow:function(){

    if(this.Store.getCount()==0){
        if(this.exportButton)this.exportButton.disable();
//        if(this.printButton)this.printButton.disable();
    //            var emptyTxt = "";
    //
    //            this.grid.getView().emptyText=emptyTxt;//Commented Becasue Empty Text get Cleard on Store Load
    //            this.grid.getView().refresh();
    }else{
        if(this.exportButton)this.exportButton.enable();
//        if(this.printButton)this.printButton.enable();
    }
    this.Store.filter('billid',this.invID);

},
loadStore:function(){
    this.Store.load({
        params : {
            start : 0,
            limit : this.pP.combo.value,
            ss : this.quickPanelSearch.getValue()
        }
    });
    this.Store.on('load',this.storeloaded,this);
},
handleDelete:function(del){
    if(this.grid.getSelectionModel().hasSelection()==false){
        WtfComMsgBox(34,2);
        return;
    }
    var delFlag=del;
    var data=[];
    var arr=[];
    this.recArr = this.grid.getSelectionModel().getSelections();
    this.withInvMode = this.recArr[0].data.withoutinventory;
    this.grid.getSelectionModel().clearSelections();
    WtfGlobal.highLightRowColor(this.grid,this.recArr,true,0,2);
//    var noteLabel=this.isCustomer?WtfGlobal.getLocaleText("acc.Salesreturn.confirm"):WtfGlobal.getLocaleText("acc.Purchasereturn.confirm");
//    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.rem.146")+" "+this.label+" "+noteLabel+"?",function(btn){
    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.rem.146")+" "+this.label+"?",function(btn){
        if(btn!="yes") {
            for(var i=0;i<this.recArr.length;i++){
                var ind=this.Store.indexOf(this.recArr[i])
                var num= ind%2;
                WtfGlobal.highLightRowColor(this.grid,this.recArr[i],false,num,2,true);
            }
            return;
        }
        for(i=0;i<this.recArr.length;i++){
            arr.push(this.Store.indexOf(this.recArr[i]));
        }
        var mode=(this.withInvMode?23:15);
        if(this.isOrder){
            mode=(this.withInvMode?54:44);
        }
        data= WtfGlobal.getJSONArray(this.grid,true,arr);
        if(this.isCustomer){
            if(delFlag=='del' ){
                this.ajxUrl = "ACCInvoiceCMN/deleteSalesReturn.do";
            }else if(delFlag=='delp' ){
                this.ajxUrl = "ACCInvoiceCMN/deleteSalesReturnPermanent.do";  
            }
        } else {
            if(delFlag=='del' ){
                this.ajxUrl = "ACCGoodsReceiptCMN/deletePurchaseReturn.do";
            }else if(delFlag=='delp' ){
                this.ajxUrl = "ACCGoodsReceiptCMN/deletePurchaseReturnPermanent.do";
            }
        }
        //this.ajxUrl = (this.isCustomer)?"ACCInvoice/deleteSalesReturn.do":"ACCGoodsReceiptCMN/deletePurchaseReturn.do";
        
        Wtf.Ajax.requestEx({
            url:this.ajxUrl,
            params:{
                data:data,
                isLeaseFixedAsset:this.isLeaseFixedAsset,
                isConsignment:this.isConsignment,
                isFixedAsset: this.isFixedAsset,
                mode:mode
            }
        },this,this.genSuccessResponse,this.genFailureResponse);
    },this);
},
genSuccessResponse:function(response){
    WtfGlobal.resetAjaxTimeOut();
    var superThis = this;
    WtfComMsgBox([this.label, response.msg], response.success * 2 + 2, "", "", function(btn) {
            if (btn == "ok") 
            {
            for (var i = 0; i < superThis.recArr.length; i++) {
                    var ind = superThis.Store.indexOf(superThis.recArr[i])
                    var num = ind % 2;
                    WtfGlobal.highLightRowColor(superThis.grid, superThis.recArr[i], false, num, 2, true);
                    }
                if (response.success) {
                (function() {
                        superThis.loadStore();
                    }).defer(WtfGlobal.gridReloadDelay(), superThis);
                    Wtf.productStore.reload();
                    Wtf.productStoreSales.reload();
                }
            }
    });
},
genFailureResponse:function(response){
    for(var i=0;i<this.recArr.length;i++){
        var ind=this.Store.indexOf(this.recArr[i])
        var num= ind%2;
        WtfGlobal.highLightRowColor(this.grid,this.recArr[i],false,num,2,true);
    }
    var msg=WtfGlobal.getLocaleText("acc.common.msg1");  //"Failed to make connection with Web Server";
    if(response.msg)msg=response.msg;
    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg],2);
},

getTransName:function(type){
    switch(type){
           case Wtf.autoNum.SalesOrder:return "Sales Order";
           case Wtf.autoNum.Invoice:return "Invoice";
           case Wtf.autoNum.PurchaseOrder:return "Purchase Order";
           case Wtf.autoNum.GoodsReceipt:return "Vendor Invoice";
           case Wtf.autoNum.BillingSalesOrder:return "Sales Order";
           case Wtf.autoNum.BillingInvoice:return "Invoice";
           case Wtf.autoNum.BillingPurchaseOrder:return "Purchase Order";
           case Wtf.autoNum.BillingGoodsReceipt:return "Vendor Invoice";
           case Wtf.autoNum.Quotation:return "Quotation";
           case Wtf.autoNum.DeliveryOrder:return "Delivery Order";
    }
    },showAdvanceSearch: function() {
    showAdvanceSearch(this, this.searchparam, this.filterAppend);
    },configurAdvancedSearch: function() {
    this.objsearchComponent.show();
    this.objsearchComponent.advGrid.advSearch = true;
    this.objsearchComponent.advGrid.getComboData();
    this.AdvanceSearchBtn.disable();
    this.doLayout();
        
},
filterStore: function(json, filterConjuctionCriteria) {
    /**
      * ERP-33751 - Start Date Required for saved Search
      */        
    this.objsearchComponent.advGrid.sdate = this.startDate.getValue(); 
    this.objsearchComponent.advGrid.edate = this.endDate.getValue();
    this.searchJson = json;
    this.filterConjuctionCrit = filterConjuctionCriteria;
    this.Store.baseParams = {
        flag: 1,
        searchJson: this.searchJson,
        moduleid: this.moduleid,
        filterConjuctionCriteria: filterConjuctionCriteria,
        isConsignment:this.isConsignment
    }
        this.Store.load({params: {ss: this.quickPanelSearch.getValue(), start: 0, limit: this.pP.combo.value}});
},
clearStoreFilter: function() {
    this.searchJson = "";
    this.filterConjuctionCrit = "";
    this.Store.baseParams = {
        flag: 1,
        searchJson: this.searchJson,
        moduleid: this.moduleid,
        filterConjuctionCriteria: this.filterConjuctionCrit,
        isConsignment:this.isConsignment
    }
        this.Store.load({params: {ss: this.quickPanelSearch.getValue(), start: 0, limit: this.pP.combo.value}});
this.objsearchComponent.hide();
this.AdvanceSearchBtn.enable();
this.doLayout();


},
viewTransection:function(grid, rowIndex, columnIndex){
    var formrec=null;
    if(rowIndex<0&&this.grid.getStore().getAt(rowIndex)==undefined ||this.grid.getStore().getAt(rowIndex)==null ){
        WtfComMsgBox(15,2);
        return;
    }
    formrec = this.grid.getStore().getAt(rowIndex);
    this.withInvMode = formrec.get("withoutinventory");
    if(this.isCustomer){
        if(this.isLeaseFixedAsset){
            callViewSalesFixedAssetSalesReturn(true,formrec,formrec.data.billid,false,this.isLeaseFixedAsset)
        } else if (this.isFixedAsset) {
            callViewFixedAssetSalesReturn(true,formrec,formrec.data.billid,this.isFixedAsset);
        }else if(this.isConsignment){
            callViewConsignmentSalesReturn(true,formrec,formrec.data.billid,this.isLeaseFixedAsset,this.isConsignment,this.isCustomer);
        }else{
            callViewSalesReturn(true,formrec,formrec.data.billid,false,formrec.data.isNoteAlso,formrec.data.isSaleReturnWithPay);
        }
    }else if(this.isConsignment){
        callViewConsignmentSalesReturn(true,formrec,formrec.data.billid,this.isLeaseFixedAsset,this.isConsignment,this.isCustomer);
    }else{
        if (this.isFixedAsset) {
            callViewFixedAssetPurchaseReturn(true,formrec,formrec.data.billid,false,true);
        } else {
            callViewPurchaseReturn(true,formrec,formrec.data.billid,false,formrec.data.isNoteAlso);
        }
    }
},
    
handleUnlinkDocument: function() {
    var formrec = this.grid.getSelectionModel().getSelected();
    if ((this.moduleid == Wtf.Acc_Purchase_Return_ModuleId || this.moduleid == Wtf.Acc_Sales_Return_ModuleId) && !this.sm.grid.getSelections()[0].data.isNoteAlso&& !this.sm.grid.getSelections()[0].data.isSaleReturnWithPay) {
        linkinfo(formrec.get('billid'), this.isOrder, this.businessPerson, formrec.get('billno'), "true", this.isFixedAsset, this.moduleid, true, this);
    } else {
        if (this.moduleid == Wtf.Acc_Purchase_Return_ModuleId && this.sm.grid.getSelections()[0].data.isNoteAlso) {

            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.pi.UnlinkPurchaseReturnwithDebitNote")], 2);
            return;
        } else if (this.moduleid == Wtf.Acc_Sales_Return_ModuleId && this.sm.grid.getSelections()[0].data.isNoteAlso){
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.pi.UnlinkSalesReturnwithCreditNote")], 2);
            return;
        } else if (this.moduleid == Wtf.Acc_Sales_Return_ModuleId && this.sm.grid.getSelections()[0].data.isSaleReturnWithPay){
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.pi.UnlinkSalesReturnwithPayment")], 2);
            return;
        }
           
    }
},


globalInvoiceListGridAutoRefreshPublishHandler: function(response) {
    var res = eval("("+response.data+")");        
    if (res.success && ( Wtf.isAutoRefershReportonDocumentSave || (res.userSessionId != undefined && Wtf.userSessionId==res.userSessionId ))) {
        if (this.Store.baseParams && this.Store.baseParams.searchJson) {
            this.Store.baseParams.searchJson = "";
        }
            this.Store.load({
                params : {
                    start:0,
                    limit:this.pP.combo.value,
                    pagingFlag:true

                }
            });
        if (this.moduleid == Wtf.Acc_Sales_Return_ModuleId) {
            Wtf.notify.msg("", WtfGlobal.getLocaleText("acc.field.SRReportRefreshedmsg"));
        } else if (this.moduleid == Wtf.Acc_Purchase_Return_ModuleId) {
            Wtf.notify.msg("", WtfGlobal.getLocaleText("acc.field.PRReportRefreshedmsg"));
        } else  if (this.moduleid == Wtf.Acc_ConsignmentPurchaseReturn_ModuleId) {
            Wtf.notify.msg("", WtfGlobal.getLocaleText("acc.field.ConsignmentPRReportRefreshedmsg"));
        } 
    }
},



    
showCustomerCustomFieldFlag: function(moduleid){
    var customerCustomFieldFlag = false;
    if(moduleid===Wtf.Acc_Sales_Return_ModuleId || moduleid===Wtf.Acc_FixedAssets_Sales_Return_ModuleId || moduleid===Wtf.Acc_ConsignmentSalesReturn_ModuleId
        || moduleid===Wtf.Acc_Lease_Return){
        customerCustomFieldFlag = true;
    }
    return customerCustomFieldFlag;
},
    
showVendorCustomField: function(moduleid){
    var vendorCustomFieldFlag = false;
    if(moduleid===Wtf.Acc_Purchase_Return_ModuleId || moduleid===Wtf.Acc_FixedAssets_Purchase_Return_ModuleId || moduleid===Wtf.Acc_ConsignmentPurchaseReturn_ModuleId){
        vendorCustomFieldFlag = true;
    }
    return vendorCustomFieldFlag;
},
    
handleViewDeliveryPlanner: function() {
    if (this.grid.getSelectionModel().hasSelection()) {
        var rec = this.grid.getSelectionModel().getSelected();
        getDeliveryPlannerTabView(this.moduleid, rec.data.billid)
    }
},
getEditButtonToolTipMsg:function(moduleID){
    var returnMsg="";
    if (moduleID == Wtf.Acc_FixedAssets_Sales_Return_ModuleId) {
        returnMsg = WtfGlobal.getLocaleText("acc.fixedasset.editsalesreturntransaction");
    } else if (moduleID ==Wtf.Acc_Purchase_Return_ModuleId ) {
        returnMsg = WtfGlobal.getLocaleText("acc.normal.editpurchasereturntransaction");
    } else if (moduleID ==Wtf.Acc_Sales_Return_ModuleId ) {
        returnMsg = WtfGlobal.getLocaleText("acc.normal.editsalesreturntransaction");
    }else if (moduleID == Wtf.Acc_Lease_Return) {
        returnMsg = WtfGlobal.getLocaleText("acc.lease.editsalesreturntransaction");
    } else {
        returnMsg = WtfGlobal.getLocaleText("acc.invoiceList.editO");
    }     
    return returnMsg;
},

getMyConfig:function (){
    WtfGlobal.getGridConfig (this.grid, this.moduleid, false, false);
    
    var statusForCrossLinkage = this.grid.getColumnModel().findColumnIndex("statusforcrosslinkage");
    if (statusForCrossLinkage != -1) {
        this.grid.getColumnModel().setHidden(statusForCrossLinkage, true);
    }
},
saveMyStateHandler: function (grid,state){
    WtfGlobal.saveGridStateHandler(this, grid, state, this.moduleid, grid.gridConfigId, false);
}
});
