/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 *Moved this function to wtfmain-ex.js
 */
//function editInvoiceExchangeRates(winid,basecurrency,foreigncurrency,exchangerate,exchangeratetype){
//    function showInvoiceExternalExchangeRate(btn,txt){
//        if(btn == 'ok'){
//             if(txt.indexOf('.')!=-1)
//                 var decLength=(txt.substring(txt.indexOf('.'),txt.length-1)).length;
//            if(isNaN(txt)||txt.length>15||decLength>7||txt==0){
//                Wtf.MessageBox.show({
//                    title: WtfGlobal.getLocaleText("acc.setupWizard.curEx"), //'Exchange Rate',
//                    msg: WtfGlobal.getLocaleText("acc.nee.55")+
//                    "<br>"+WtfGlobal.getLocaleText("acc.nee.56")+
//                    "<br>"+WtfGlobal.getLocaleText("acc.nee.57"),
//                    buttons: Wtf.MessageBox.OK,
//                    icon: Wtf.MessageBox.WARNING,
////                    width: 300,
//                    scope: this,
//                    fn: function(){
//                        if(btn=="ok"){
//                            editInvoiceExchangeRates(winid,basecurrency,foreigncurrency,exchangerate,exchangeratetype);
//                        }
//                    }
//                });
//            }else{
//                if(exchangeratetype!=undefined)
//                    Wtf.getCmp(winid).exchangeratetype=exchangeratetype
//                if(exchangeratetype!=undefined&&exchangeratetype=='foreigntobase'){
//                    if((txt*1)>0) {
//                        Wtf.getCmp(winid).revexternalcurrencyrate=txt;
//                        var exchangeRateNormal = 1/((txt*1)-0);
//                        exchangeRateNormal = (Math.round(exchangeRateNormal*Wtf.Round_Off_Number))/Wtf.Round_Off_Number;
//                        Wtf.getCmp(winid).externalcurrencyrate=exchangeRateNormal;
//                    } 
//                }else{
//                    Wtf.getCmp(winid).externalcurrencyrate=txt;
//                }
//                Wtf.getCmp(winid).updateFormCurrency();
//            }
//        }
//    }
//    Wtf.MessageBox.prompt(WtfGlobal.getLocaleText("acc.setupWizard.curEx"),'<b>'+WtfGlobal.getLocaleText("acc.nee.58")+'</b> 1 '+basecurrency+' = '+exchangerate+' '+foreigncurrency +
//        '<br><b>'+WtfGlobal.getLocaleText("acc.nee.59")+'</b>', showInvoiceExternalExchangeRate);
//}
function Showproductdetails(productid,productname,so){
       callViewProductDetails(productid,'View Product',so,productname);
}
/*< COMPONENT USED FOR >
 *      1.Credit Vendor Invoice
 *          callGoodsReceipt(isEdit,rec,winid) --- <  >
 *          [isEdit=true/false, isCustomer=false, record]
 *      2.Invoice
 *          callInvoice(isEdit,rec,winid) --- < Create Invoice >
 *          [isEdit=true/false, isCustomer=true, record]
 *      3.Invoice
 *          callBillingInvoice(isEdit,rec,winid) --- < Create Invoice >
 *          [isEdit=true/false, isCustomer=true, isCustBill:true, record]
 *      4.Sales Receipt
 *          callBillingSalesReceipt(isEdit,rec,winid) --- < Create Cash Sales >
 *          [isEdit=true/false, isCustomer=true, isCustBill:true, cash:true, record]
 *      5.Cash Sales
 *          callSalesReceipt(isEdit,rec,winid) --- < Credit Cash Sales >
 *          [isEdit=true/false, isCustomer=true, cash:true, record]
 *      6.Cash Purchase
 *          callPurchaseReceipt(isEdit,rec,winid) --- <  >
 *          [isEdit=true/false, isCustomer=false, cash:true, record]
 *      7.Sales Order
 *          callSalesOrder(isEdit,rec,winid) --- < Create sales Order >
 *          [isEdit=true/false, isCustomer=true, isOrder=true, record]
 *      8.Puchase Order
 *          callPurchaseOrder(isEdit,rec,winid) --- <  >
 *          [isEdit=true/false, isCustomer=false, isOrder=true, record]
 *		9.Quotation
 *          callQuotation() --- < Create Quotation >
 *          [quotation=true, isCustomer=false, isOrder=true]
 *
 *      10.this.appendId --- It is used when this.id is appended in the id of component. This is useful for displaying help.
 */

Wtf.account.TransactionPanel=function(config){
    this.quotation = (config.quotation!=null && config.quotation!=undefined)?config.quotation:false;
    this.DefaultVendor = config.DefaultVendor;
    this.id=config.id;
    /*
     * isSecurityGateEntry is true If Security gate entery flow is going on
     */
    this.isSecurityGateEntry=config.isSecurityGateEntry;
    this.titlel = config.title!=undefined?config.title:"null";
    this.dataLoaded=false;
    /**
     *isTemplate flag for create template 
     *isViewTemplate flag for view template case
     *isEditTemplate flag for edit template case
     */
    this.isViewTemplate = (config.isViewTemplate!=undefined?config.isViewTemplate:false);
    this.isEditTemplate = (config.isEditTemplate!=undefined?config.isEditTemplate:false);
    this.isTemplate = (config.isTemplate!=undefined?config.isTemplate:false);
    this.createTransactionAlso = false;
    this.transactionType = 0;
    this.recordId = "";
    this.isGeneratedRecurringInvoice=config.isGeneratedRecurringInvoice;
    this.onDate=config.onDate;
    this.isGST=WtfGlobal.GSTApplicableForCompany()==Wtf.GSTStatus.NEW?true:false;   //ERP-32829    
    /**
     * Below variable is used to keep term details of source document 
     * in linking case and edit case when source document contains flat tax value
     * i.e. he has changed tax value manually
     */
    this.keepTermDataInLinkCase=false;  // Used to keep term term details as it is i.e. dont recalculate
    this.uniqueCase=0; 
    this.sezfromdate=0; 
    this.seztodate=0; 
    this.crossLinkingFlag=false;
    this.invoicefromorder=config.invoicefromorder;
    /*
     * isCreateInvFromJob is true if sales invoice is creating from Aged order work report.
     */
    this.isCreateInvFromJob=(config.isCreateInvFromJob == null || config.isCreateInvFromJob == undefined)? false : config.isCreateInvFromJob;
    this.isRCMApplicableInPreferences = Wtf.account.companyAccountPref.RCMApplicable != undefined ? Wtf.account.companyAccountPref.RCMApplicable : false;
    this.purchaseFromURD = false;
    this.transactiondateforgst=null;
    this.isShipping=CompanyPreferenceChecks.getGSTCalCulationType();
    this.addressDetailRecForGST="";
    this.isCopyFromTemplate = (config.isCopyFromTemplate!=undefined?config.isCopyFromTemplate:false);
    this.isOpeningBalanceOrder = (config.isOpeningBalanceOrder!=undefined?config.isOpeningBalanceOrder:false);
    this.isSelfBilledInvoice=(config.isSelfBilledInvoice!=undefined && config.isSelfBilledInvoice!=null)?config.isSelfBilledInvoice:false;
    this.templateId = config.templateId;
//    this.isOnTemplateSelect = undefined;
    this.sendMailFlag = false;
    this.saveOnlyFlag = false;
    this.linkedDocumentId="";
    this.saveandcreateBtn=false; //ERP-18517
    /*This check is added to disable Generate PI/SI?DO/GR button on SaveAndCreateNew and SaveAsDraft.*/
    this.isFromSaveAndCreateNew=false; //SDP-14034
    this.isFromSaveAsDraft=false;
    this.mailFlag=false;
    this.isExpenseInv=false;
    this.isEdit=config.isEdit;
    //Flag to indicate whether Avalara integration is enabled and module is enabled for Avalara Integration or not
    this.isModuleForAvalara = (Wtf.account.companyAccountPref.avalaraIntegration && (config.moduleid == Wtf.Acc_Invoice_ModuleId || config.moduleid == Wtf.Acc_Cash_Sales_ModuleId || config.moduleid == Wtf.Acc_Sales_Order_ModuleId || config.moduleid == Wtf.Acc_Customer_Quotation_ModuleId || config.moduleid == Wtf.Acc_Sales_Return_ModuleId)) ? true : false;
    this.isSalesOrderFromPurchaseOrder=config.isSOfromPO !=undefined ? config.isSOfromPO :false;
    /*
     * flag used while generating Sales/Purchase Invoice from Sales/Purchase Order
     */
    this.invoicefromorder=(config.invoicefromorder!=undefined?config.invoicefromorder:false);
    this.invoicefromorderrec=config.invoicefromorderrec!=undefined ? config.invoicefromorderrec : "";
    this.isCopyInvoice=config.isCopyInvoice;
    this.consignmentNoForGr=(config.consignmentNoForGr!=undefined?config.consignmentNoForGr:false);
    this.ispurchaseReq=config.ispurchaseReq;
    this.isFromGrORDO = false;
    this.label=config.label;
    this.copyInv=(config.copyInv!=undefined ? config.copyInv : false);
    this.isInvoice=config.isInvoice;
    /*
     * Include Tax and Tax is set In GR and Generating PI
    */
    this.isTaxable=config.invoicefromorderrec!=undefined ?config.invoicefromorderrec.isTaxable:false;
    this.Tax=config.invoicefromorderrec!=undefined ?config.invoicefromorderrec.Tax:"";
    this.externalcurrencyrate=config.invoicefromorderrec!=undefined ?config.invoicefromorderrec.externalcurrencyrate:0;
    this.isCash = (config.cash==undefined?false:config.cash);
    /*
     * Map Default payment method in credit sales on compayny preference check
    */
    this.mapPmtMethod=CompanyPreferenceChecks.mapDefaultPaymentMethod();
    this.mapPmtMethodInCredit=(config.moduleid == Wtf.Acc_Invoice_ModuleId) && this.mapPmtMethod; //map default payment method in credit
    this.isExciseTab = config.isExciseTab?config.isExciseTab:(config.record && config.record.data && config.record.data.isExciseInvoice)? config.record.data.isExciseInvoice: false;
    this.billid=null;   
    this.custChange=false;
    this.record=config.record;
    this.isCallFromSalesOrderTransactionForms=this.record!=undefined ? this.record.data.isCallFromSalesOrderTransactionForms : false;
    this.isSupplementryExciseInvoice= config.record?(config.record.data.issupplementary==1?true:false):false;
    this.termsincludegst = Wtf.account.companyAccountPref.termsincludegst;
    if (this.isEdit || this.copyInv){
        this.billid = this.record.data.billid;
    }
    this.productOptimizedFlag=Wtf.account.companyAccountPref.productOptimizedFlag;
    this.isShowMarginButton = Wtf.account.companyAccountPref.isShowMarginButton; //Show or Hide Margin Button in Invoice/Sales/Quotation create form //ERM-76
    this.handleEmptyText=false; //To handle empty text after clicking on save button
    this.isMultiSelectFlag=false; // keep this flag for allow multiselection
    this.isPOfromSO=(config.isPOfromSO==undefined ||config.isPOfromSO ==null)?false:config.isPOfromSO;
    this.isFromWO=config.isFromWO;
    this.ifFromShortfall=config.ifFromShortfall;
    this.GENERATE_PO=config.isPOfromSO;
    this.isSOfromPO=(config.isSOfromPO==undefined ||config.isSOfromPO==null)?false:config.isSOfromPO;   //This flag is used for creating so from po
    this.GENERATE_SO=config.isSOfromPO;    
    this.datechange=0;
    this.exchangeRateInRetainCase=false;
    this.oldval="";this.val="";this.pronamearr=[];
    this.changeGridDetails=true;
    this.appendID = true;
    this.heplmodeid = config.heplmodeid;
    this.response = "";
    this.request = "";
    this.amountdue=0;
    this.TotalAdvanceTDSAdjustmentAmt=0;//For India Country, To fetch TDS Amount of Advance Payments
    this.AdvancePaymentDetails=[];//For India Country, To Fetch Advance Payment IDs
    this.gstCurrencyRate=0.0;
    this.CustomStore = "";
    this.termid="";
    this.isVersion=(config.isVersion!=undefined?config.isVersion:false);
    this.WarnMessage=true; // to be used in Negative Stock-warn case
    this.currentAddressDetailrec="";
    this.addressMappingRec="";   // ERP-32829 
    var help=getHelpButton(this,config.heplmodeid);
    this.isJobWorkOrderReciever = (config.isJobWorkOrderReciever)?config.isJobWorkOrderReciever:false;
    this.isForJobWorkOut = false;
    this.includeDeactivatedTax = this.isEdit != undefined? (this.copyInv ? false : this.isEdit): false
    this.productPOSOCountStore = new Wtf.data.SimpleStore({
        fields: [{
            name: 'productid'
        }, {
            name: 'sicount'
        }, {
            name: 'socount'
        }],
        data: []
    });
    
    /*
     isJobWorkoutInvoice is true if called from job workout navigation panel
      */
    this.isJobWorkoutInvoice = (config.isJobWorkoutInvoice!=undefined&&config.isJobWorkoutInvoice!=null)?config.isJobWorkoutInvoice:false;
    this.productComboStore=this.isJobWorkOrderReciever?this.productStoreJWorder:(this.isCustomer?Wtf.productStoreSales:Wtf.productStore);  
    this.autoPopulateMappedProduct=Wtf.account.companyAccountPref.autoPopulateMappedProduct!=undefined? Wtf.account.companyAccountPref.autoPopulateMappedProduct:false;
    this.custUPermType=config.isCustomer?Wtf.UPerm.customer:Wtf.UPerm.vendor;
    this.custPermType=config.isCustomer?Wtf.Perm.customer:Wtf.Perm.vendor;
    this.soUPermType=(config.isCustomer?Wtf.UPerm.invoice:Wtf.UPerm.vendorinvoice);
    this.soPermType=(config.isCustomer?Wtf.Perm.invoice.createso:Wtf.Perm.vendorinvoice.createpo);
    this.isFromProjectStatusRep = (config.isFromProjectStatusRep!=null&&config.isFromProjectStatusRep!=undefined)?config.isFromProjectStatusRep:false;
    var isbchlFields1=(!config.isCustomer && config.isOrder);
    this.isWithInvUpdate = config.isWithInvUpdate;
    this.DOSettings=config.DOSettings;
    this.GRSettings=config.GRSettings;
    this.nameBeforeSelect="";
    this.invObj=config.invObj;
    this.ids =[];
    this.currencyBeforeSelect="";
    this.poBeforeSelect="";
    this.linkcomboBeforeSelect="";
    this.giveAlertOnTabChange=true;//sometime we does not need to give alert message when user switch from expense tab to inventory or vice versa. In that case this variable is used. 
    this.isAllowToEdit=(config.isAllowToEdit!=null && config.isAllowToEdit!=undefined)?config.isAllowToEdit:false; // document allow to edit- VI/CP/CS/SI
    /*To load global store one time for attaching event only one time*/
    this.isStoreNotLoaded  = true;
//    this.addressrec=null;
    this.uPermType= (config.ispurchaseReq || config.isRFQ ? Wtf.UPerm.vendorpr : (config.isCustomer?Wtf.UPerm.invoice:Wtf.UPerm.vendorinvoice));
    this.permType= (config.ispurchaseReq || config.isRFQ ? Wtf.Perm.vendorpr :(config.isCustomer?Wtf.Perm.invoice:Wtf.Perm.vendorinvoice));
    this.uPaymentPermType= config.isRequisition || config.isRFQ ? Wtf.UPerm.vendorpr : (config.isCustomer?Wtf.UPerm.invoice:Wtf.UPerm.vendorinvoice);
    this.createPaymentPermType=(config.isCustomer?Wtf.Perm.invoice.createreceipt:Wtf.Perm.vendorinvoice.createpayment);
    this.originallyLinkedDocuments = '';
    this.templatefieldrec="";
    this.populateproducttemplate=true;
    this.populatecustomertemplate=true;
    this.applyRoundingAdjustmentToDocument =false;
    this.roundingAdjustmentFlag = CompanyPreferenceChecks.getRoundingAdjustmentFlag();//This flag used to handle rounding adjustment for totla amount of transaction
    this.CustomerVendorTypeId="";
    this.GSTINRegistrationTypeId="";
    this.gstin="";
    this.gstdochistoryid="";
    this.ignoreHistory=false;   // GST history >>  differentiate Edit and other cases
    this.checkgststatus=false;  // GST history >> Date pop up in edit and link case
    this.isIndiaGST=WtfGlobal.isIndiaCountryAndGSTApplied();   //ERP-32829 
    /*
     * Below variableis used hide/show Customer Shipping Address in Purchase Doc(i.e PO created By SO)
     * By Default it's blank
     * If it's blank then We are not showing  'Customer Shipping Address' in Purchase Doc(i.e PO created By SO)
     * It contains the Customer ID of sales side document.
     */
    this.customeridforshippingaddress='';
    this.isSelectedMultiRecord=false;
    /* SDP-13487
     * To identify, from where the call has been received to Business Logic Function when user open the draft in edit mode and then save it again. this.isDraft will be false but this.isFromDraftReport will be true when user save the draft as an transaction.
     */
    this.isDraft = false;
    this.isSaveDraftRecord = (this.record!=null && this.record.data!=undefined) ? this.record.data.isDraft : false;
    this.isAutoSeqForEmptyDraft = false; //SDP-13927 : To identify Old Record No. and Auto Generated No while saving Draft Record in Edit Mode.
    this.isSequenceFormatChangedInEdit = false; //SDP-13923 : This flag has been used to identify whether user has changed Sequence Format in Edit case (Only for Draft Type of record)
    
    if(config.moduleid==Wtf.Acc_Vendor_Quotation_ModuleId){
       this.exportPermType=this.permType.exportvendorquotation;
       this.printPermType=this.permType.printvendorquotation;
    }else if(config.moduleid==Wtf.Acc_Customer_Quotation_ModuleId){
        this.exportPermType=this.permType.exportsalesquotation;
        this.printPermType=this.permType.printsalesquotation;
        this.marginPermType=this.permType.marginincq;
    }else if(config.moduleid==Wtf.Acc_Sales_Order_ModuleId){
        this.exportPermType=this.permType.exportdataso;
        this.printPermType=this.permType.printso;
        this.marginPermType=this.permType.margininso;
    }else if(config.moduleid==Wtf.Acc_Purchase_Order_ModuleId){
        this.exportPermType=this.permType.exportdatapo;
        this.printPermType=this.permType.printpo;
    }else if(config.moduleid==Wtf.Acc_Invoice_ModuleId){
        this.exportPermType=this.permType.exportdatainvoice;
        this.printPermType=this.permType.printinvoice;
        this.emailPermType=this.permType.emailinvoice;
        this.recurringPermType=this.permType.recurringinvoice;
        this.marginPermType=this.permType.margininvoice;
    }else if(config.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId){
        this.exportPermType=this.permType.exportdatavendorinvoice;
        this.printPermType=this.permType.printvendorinvoice;
        this.emailPermType=this.permType.emailvendorinvoice;
        this.recurringPermType=this.permType.recurringvendorinvoice;
    }
    this.exportPermType=config.isRFQ ? this.permType.exportdatarfq :(config.isRequisition ? this.permType.exportdatapr:this.exportPermType);
    this.printPermType= config.isRFQ ? this.permType.printrfq : (config.isRequisition ? this.permType.printpr :this.printPermType);
    var buttonArray = new Array();
    var moduleId=WtfGlobal.getModuleId(this); // to show terms in all SO,CQ,VQ,PO
     this.IsInvoiceTerm = (config.isCustomer && (config.moduleid=='2'|| moduleId==22)) || moduleId==6 || moduleId==23 ;
//     this.IsInvoiceTerm = (config.isCustomer && config.moduleid=='2') || config.moduleid==6;
     this.modeName = config.modeName;
     this.viewGoodReceipt = config.viewGoodReceipt;
     this.islockQuantityflag=config.islockQuantityflag;
     this.readOnly=config.readOnly;
     this.isMRPSalesOrder = (config.isMRPSalesOrder)?config.isMRPSalesOrder:false;
     this.isMRPJOBWORKOUT = (config.isMRPJOBWORKOUT)?config.isMRPJOBWORKOUT:false;
     this.isMRPJOBWORKIN = (config.isMRPJOBWORKIN)?config.isMRPJOBWORKIN:false;
     this.isLinkedTransaction = (config.isLinkedTransaction == null || config.isLinkedTransaction == undefined)? false : config.isLinkedTransaction;
     /*On this check handle enable/disable cases of Generate SI/PI/DO/GR button.*/
     this.crossLinkingTransaction = (config.record != undefined && config.record != null && config.record.data != undefined && config.record.data.crossLinkingTransaction != undefined && config.record.data.crossLinkingTransaction != "")? config.record.data.crossLinkingTransaction : false ;
     this.pendingapprovalTransaction = (config.pendingapproval == null || config.pendingapproval == undefined)? false : config.pendingapproval;//To identify whether edited document is pending document
     this.isClearedpaymentStatus = (config.paymentStatus == null || config.paymentStatus == undefined || config.paymentStatus=="Uncleared")? false :true ;
     // Excise Opening Balance check from Vendor Master ERP-27108 : to hide JE POST
     this.isExicseOpeningbalance = (config.isExicseOpeningbalance == null || config.isExicseOpeningbalance == undefined)?false:config.isExicseOpeningbalance ; 
     this.PR_IDS=config.PR_IDS;
     this.isDraft = false;
     this.isExciseInvoiceWithTemplate=config.isExciseInvoiceWithTemplate;
     this.isIndian = (Wtf.account.companyAccountPref.countryid== Wtf.Country.INDIA)?true:false;
     this.isIndonesian = (Wtf.account.companyAccountPref.countryid== Wtf.Country.INDONESIA)?true:false;
     //Basic Exemption checks .
     this.tdsBasicExemption=false;
     this.tdsBasicExemptionSaveButton=true;
     this.tdsBasicExemptionPerTransaction=0.0;
     this.tdsBasicExemptionPerAnnual=0.0;
     this.totalbalance = 0;
     this.debitbalance = 0;
     this.creditbalance = 0;
     
     this.tdsRate = 0;
     
     this.manualLandedCostCategory="";
     /*
      * isEnoughQtyForAssemblyProduct : This flag used in below condition - 1] Negative Stock-Blocked, 2] Module-SO, 3]Product Type-Inventory Assembly with Auto Build Check true.
      */
     this.isEnoughQtyForAssemblyProduct = true;
     
     if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
        this.totalproductsellingprice = 0;
        this.totalproductcost = 0;
        this.totalproductprofitmargin = 0;
        this.totalprodcutprofitmarginpercent = 0;

        this.totalservicesellingprice = 0;
        this.totalservicecost = 0;
        this.totalserviceprofitmargin = 0;
        this.totalserviceprofitmarginpercent = 0;

        this.finalproductsellingprice = 0;
        this.finalproductcost = 0;
        this.finalproductprofitmargin = 0;
        this.finalproductprofitmarginpercent = 0;
     }
     
     /*
      * Below code is used to change the button text if 'Auto Save And Print for Cash/Credit Invoices' option is true at company level
      */
     var buttonTxt=WtfGlobal.getLocaleText("acc.common.saveBtn");
     var buttonToolTipTxt=WtfGlobal.getLocaleText("acc.rem.175");
     if((config.moduleid == Wtf.Acc_Cash_Sales_ModuleId || config.moduleid == Wtf.Acc_Invoice_ModuleId) && Wtf.account.companyAccountPref.isAutoSaveAndPrintChkBox){
         buttonTxt=WtfGlobal.getLocaleText("acc.common.autoSavePrintBtn");
         buttonToolTipTxt=WtfGlobal.getLocaleText("acc.common.autoSavePrintBtnToolTipTxt");
     }
         
     this.saveBttn=new Wtf.Toolbar.Button({
        text: buttonTxt, //'Save',
        tooltip:buttonToolTipTxt,
        id: "save" + this.heplmodeid+ this.id,
        hidden:this.isViewTemplate,
        scope: this,
        handler: function(){
            /*
             *Duplicate transactions are created after pressing space bar multiple times.
             *Disabled button on first line of handler.
             *SDP-14015 
             */
            this.saveBttn.disable();
            this.disableSaveButtons();
            this.isDraft = false;
            this.isSaveDraftRecord = (this.record!=null && this.record.data!=undefined) ? this.record.data.isDraft : false;  //SDP-13487 - When user save the draft as a Transaction then to identify this call is for transaction, we have used this flag. At this time, this.isDraft will be false.            
            this.saveOnlyFlag = true;
            /*
            Generate SO/PO/From ShortFall flag added because we need not to enter in this block for Generate SO/PO/shortfall case as 
            it is throwing blank document number message
            */
            if(!(this.isTemplate || this.isEditTemplate) && this.isEdit && !this.copyInv && !(this.GENERATE_PO || this.GENERATE_SO || this.ispurchaseReq) &&!this.ifFromShortfall){
                var documentNo=this.Number.getValue();
                if(documentNo==null || documentNo==undefined || documentNo==""){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.NumberBlankAlert")], 2);
                    this.enableSaveButtons();
                    return ;
                }
            }
            /**
             *checks the  template name is blank or not
             */
            if(this.isTemplate || this.isEditTemplate){
                var str = this.moduleTemplateName.getValue();
                var re = new RegExp("&nbsp", "g");
                str = str.replace(re, " ");
                if(str == '' || str.trim() == ''){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.PleaseEnterTemplateNameFirst")], 2);
                    this.moduleTemplateName.setValue('');
                    this.enableSaveButtons();
                    return;
                }                
                if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && Wtf.exciseMultipleUnit && this.UnitModuleTemplate!=undefined && this.UnitModuleTemplate.getValue() == '' && (!Wtf.isEmpty(this.isEditTemplate) && this.isEditTemplate != true)){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.pleaseselectcompanyunit")], 2);
                    this.enableSaveButtons();
                    return;
                }
                /**
                 *function to save the only template in create and edit case
                */
                this.saveTemplate();
            }else{
                if(this.isLinkedTransaction && !this.copyInv){
                    this.update();
                }else if(this.autoGenerateDO.getValue()){
                        this.beforeSave();  
                    }else{
                        this.save();  
                    }
                    }
        },
        iconCls: 'pwnd save'
    });
    buttonArray.push(this.saveBttn);
    this.savencreateBttn=new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.field.SaveAndCreateNew"),
        tooltip: WtfGlobal.getLocaleText("acc.field.SaveAndCreateNewToolTip"),
        id: "savencreate" + config.heplmodeid + this.id,
        hidden : (this.isEdit&&!this.isCopyFromTemplate) || (this.copyInv&&!this.isCopyFromTemplate) || this.isTemplate || this.isViewTemplate || this.isEditTemplate,//save and create button is hidden template create, edit and view case 
        scope: this,
        handler: function(){
            /*
             *Duplicate transactions are created after pressing space bar multiple times.
             *Disabled button on first line of handler.
             *SDP-14015 
             */
            this.savencreateBttn.disable();
            this.disableSaveButtons();
            this.isDraft = false;
            this.isSaveDraftRecord = (this.record!=null && this.record.data!=undefined) ? this.record.data.isDraft : false;      //SDP-13487 - When user save the draft as a Transaction then to identify this call is for transaction, we have used this flag. At this time, this.isDraft will be false.            
            this.saveOnlyFlag = false;
//            this.saveandcreateBtn = true; //ERP-18517
            this.isFromSaveAndCreateNew=true;
            if(this.isEdit && !this.copyInv){
                var documentNo=this.Number.getValue();
                if(documentNo==null || documentNo==undefined || documentNo==""){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.NumberBlankAlert")], 2);
                    this.enableSaveButtons();
                    return ;
                }
            }
            if(this.autoGenerateDO.getValue()){
                this.beforeSave();  
            }else if(this.isLinkedTransaction){
                this.update();
            }else{
                this.save();  
            }
                
        },
        iconCls: 'pwnd save'
    });
    buttonArray.push(this.savencreateBttn);
    
    this.saveAsDraftBttn = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.common.saveasdraft"), // 'Save as Draft',
        tooltip: WtfGlobal.getLocaleText("acc.rem.222"),
        id: "saveasdraft" + config.heplmodeid + this.id,
        hidden: !(config.moduleid == Wtf.Acc_Invoice_ModuleId || config.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || config.moduleid == Wtf.Acc_Sales_Order_ModuleId || config.moduleid == Wtf.Acc_Purchase_Order_ModuleId || config.moduleid == Wtf.Acc_Customer_Quotation_ModuleId) || (this.isEdit && !this.copyInv && !this.record.data.isDraft) ||  this.viewGoodReceipt || this.isTemplate || this.isEditTemplate,
        scope: this,
        disabled:this.isTemplate || this.isEditTemplate,         //refer ticket ERP-13119, hidden save as draft button in create template and edit template case
        handler: function() {
            if(this.createTransactionAlso) {     //refer ticket 13609
                this.transactionType = 1;
            }
            this.isSaveDraftRecord = false; //SDP-13487 - When user save the draft as a Transaction then to identify this call is for transaction, we have used this flag. At this time, this.isDraft will be false.            
            this.isDraft = true;
            this.saveOnlyFlag = true;
            this.disableSaveButtons();
            this.isFromSaveAsDraft=true;
            if(this.isEdit && !this.copyInv){
                var documentNo=this.Number.getValue();
                if(documentNo==null || documentNo==undefined || documentNo==""){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.NumberBlankAlert")], 2);
                    this.enableSaveButtons();
                    return ;
                }
            }
            if(this.autoGenerateDO.getValue()){
               this.beforeSave();  
            }else{
               this.save();  
            }
        },
        iconCls: 'pwnd save'
    });
    buttonArray.push(this.saveAsDraftBttn);
    
    buttonArray.push({
        text: WtfGlobal.getLocaleText("acc.field.pushToPlanner"), // "Push to Planner",
        tooltip: WtfGlobal.getLocaleText("acc.field.pushToPlanner"), // "Push to Planner",
        id: "pushtoplanner" + config.heplmodeid + this.id,
        style:" padding-left: 15px;",
        cls: 'pwnd add',
        hidden: !(Wtf.account.companyAccountPref.deliveryPlanner && (config.moduleid == Wtf.Acc_Invoice_ModuleId || config.moduleid == Wtf.Acc_Purchase_Order_ModuleId)),
        disabled: (this.isViewTemplate || this.isEditTemplate)? false : true,
        scope: this,
        handler: function() {
            this.pushToPlanner();
        }
    });
    if(!WtfGlobal.EnableDisable(this.uPermType, this.emailPermType) ||config.isOrder ||config.quotation){
    buttonArray.push({
        text:WtfGlobal.getLocaleText("acc.common.email"),  // "Email",
        tooltip : WtfGlobal.getLocaleText("acc.common.emailTT"),  //"Email",
        id: "emailbut" + this.id,
        hidden : this.isTemplate||this.isViewTemplate || this.isEditTemplate,// Hide email button in create, edit and view case in template
        scope: this,
        disabled : true,
        handler: function(){this.callEmailWindowFunction(this.response, this.request)},
        iconCls: "accountingbase financialreport"
    });
    }
    var tranType=null;
    if(this.isCustBill)
        tranType=config.isCustomer?(config.isOrder?Wtf.autoNum.BillingSalesOrder:Wtf.autoNum.BillingInvoice):(config.isOrder?Wtf.autoNum.BillingPurchaseOrder:Wtf.autoNum.BillingGoodsReceipt);
    else if(config.moduleid==18||config.moduleid==20){
        if(config.moduleid==18){
            tranType=Wtf.autoNum.PurchaseOrder;
        }else{
            tranType=Wtf.autoNum.SalesOrder;
        }   
    }else if(config.moduleid==22||config.moduleid==23){
        if(config.moduleid==22){
            tranType=Wtf.autoNum.Quotation;
        }else{
            tranType=Wtf.autoNum.Venquotation;
        } 
    }else if(config.moduleid==2){
        tranType=Wtf.autoNum.Invoice;
    }else{
        tranType=Wtf.autoNum.GoodsReceipt;
    }
    if(this.isRequisition) {
        tranType= Wtf.autoNum.Requisition;
    } else if(this.isRFQ) {
        tranType= Wtf.autoNum.RFQ;
    }
   
    if(!WtfGlobal.EnableDisable(this.uPermType, this.printPermType) || !WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)){
    var singlePDFtext = null;
    if(this.isQuotation)
    	singlePDFtext = WtfGlobal.getLocaleText("acc.accPref.autoQN");
    else
    	singlePDFtext = config.isCustomer?(config.isOrder?WtfGlobal.getLocaleText("acc.accPref.autoSO"):WtfGlobal.getLocaleText("acc.accPref.autoInvoice")):(config.isOrder?WtfGlobal.getLocaleText("acc.accPref.autoPO"):WtfGlobal.getLocaleText("acc.accPref.autoVI"));

    this.singlePrint=new Wtf.exportButton({
         obj:this,
         id:"exportpdf" + this.id,
         iconCls: 'pwnd printButtonIcon',
         text: WtfGlobal.getLocaleText("acc.rem.236"),
         tooltip: WtfGlobal.getLocaleText("acc.rem.236.single"), //'Print Single Record Details',
         disabled :this.isViewTemplate ? false : true,
         isEntrylevel:true,
         exportRecord:this.exportRecord,
         hidden:false,
         menuItem:{
             rowPdf:(this.isSalesCommissionStmt)?false:true,
             rowPdfPrint:(this.isSalesCommissionStmt)?false:true,
             rowPdfTitle:WtfGlobal.getLocaleText("acc.rem.39") + " " + singlePDFtext
         },
         get:tranType,
         moduleid:config.moduleid
     });
     buttonArray.push(this.singlePrint);
    }   
    
//    if (!WtfGlobal.EnableDisable(this.uPermType, this.printPermType)) {
//        this.singleRowPrint = new Wtf.exportButton({
//            obj: this,
//            id: "printSingleRecord" + config.id,
//            iconCls: 'pwnd printButtonIcon',
//            text: WtfGlobal.getLocaleText("acc.rem.236"),
//            tooltip: WtfGlobal.getLocaleText("acc.rem.236.single"), //'Print Single Record Details',
//        disabled: this.isViewTemplate ? false : true,
//        exportRecord: this.exportRecord,
//        hidden:false,
//            menuItem: {rowPrint: (this.isSalesCommissionStmt) ? false : true},
//            get: tranType,
//        moduleid: config.moduleid
//        });
//         buttonArray.push( this.singleRowPrint);
//    }
    
    buttonArray.push({
//        xtype: 'button',
        text:  WtfGlobal.getLocaleText("acc.template.posttext") , //'<b>Post Text</b>',
        cls: 'pwnd add',
        id: "posttext" + this.id,        
        //hidden:(config.moduleid!=Wtf.Acc_Invoice_ModuleId && config.moduleid!=Wtf.Acc_Vendor_Invoice_ModuleId),        
        tooltip : WtfGlobal.getLocaleText("acc.field.UsePostTextoptiontoinserttextafterSignature"),       
        style:" padding-left: 15px;",
        scope: this,
        hidden:this.isTemplate || this.isViewTemplate || this.isEditTemplate,// Hide email button in create, edit and view case in template
        handler: function() {
            this.getPostTextEditor(this.postText);
        }
    });
       this.outstandingreportflag=false;
    buttonArray.push({
        text: (config.isCustomer?WtfGlobal.getLocaleText("acc.field.ShowOutstandigSO"):WtfGlobal.getLocaleText("acc.field.ShowOutstandigPO")),
        cls: 'pwnd add',
        id: "posttext" + this.id,        
        hidden:!(config.moduleid==Wtf.Acc_Purchase_Order_ModuleId || config.moduleid==Wtf.Acc_Sales_Order_ModuleId),
        tooltip : (config.isCustomer?WtfGlobal.getLocaleText("acc.field.ShowsOutstandigSalesOrder"):WtfGlobal.getLocaleText("acc.field.ShowsOutstandigPurchaseOrder")),
        style:" padding-left: 15px;",
        scope: this,
        disabled:this.isViewTemplate,
               
        handler: function() {
            this.outstandingreportflag=true;
             this.person= this.Name.getValue();
           if(config.moduleid==Wtf.Acc_Sales_Order_ModuleId)
            {
              
               callSalesOrderList(false,false,this.outstandingreportflag,this.person);  //for showing Outstanding SO and Po while creating one flag passed
            }
            else
            {
               callPurchaseOrderList(false,false,this.outstandingreportflag,this.person);
            }
        }
    });
    /*
     * Button for generating Sales/Purchase Invoice from Sales/Purchase Order
     */
    var disableGeneratePI = true;
    if((this.readOnly) && config.moduleid == Wtf.Acc_Sales_Order_ModuleId && this.record.data.isLinkedTransaction != undefined &&((this.crossLinkingTransaction == true) || (this.record.data.isLinkedTransaction == false || this.record.data.isLinkedTransaction == 'false')) &&  !this.pendingapprovalTransaction){
        disableGeneratePI = false;
    }
    
    
    if((this.readOnly) && config.moduleid == Wtf.Acc_Purchase_Order_ModuleId && this.record.data.isLinkedTransaction != undefined && ((this.crossLinkingTransaction == true) || (this.record.data.isLinkedTransaction == false || this.record.data.isLinkedTransaction == 'false')) && !this.pendingapprovalTransaction){
        disableGeneratePI = false;
    }
    
    var disableGeneratePO=true;
    if((this.readOnly) && config.moduleid == Wtf.Acc_Sales_Order_ModuleId  && ( this.record.data.withoutinventory == false && this.record.data.statusforcrosslinkage == "Open") && !this.pendingapprovalTransaction){
        disableGeneratePO = false;
    }
    
    this.generatePI = new Wtf.Toolbar.Button({
        text: (config.isCustomer ? WtfGlobal.getLocaleText("acc.field.generatesalesinvoice") : WtfGlobal.getLocaleText("acc.field.generatepurchaseinvoice")),
        cls: 'pwnd add',
        id: "generateinvoice" + this.id,
        hidden: !(config.moduleid == Wtf.Acc_Purchase_Order_ModuleId || config.moduleid == Wtf.Acc_Sales_Order_ModuleId),
        tooltip: (config.isCustomer ? WtfGlobal.getLocaleText("acc.field.generatesalesinvoice") : WtfGlobal.getLocaleText("acc.field.generatepurchaseinvoice")),
        style: " padding-left: 15px;",
        scope: this,
        disabled: disableGeneratePI,
        handler: function () {
            if (config.isCustomer) {
                /*
                 * Additional reqired  information is sent in case of view mode
                 * 
                 **/
                
                if((this.readOnly || this.isEdit) && (!this.record.data.isLinkedTransaction || this.crossLinkingTransaction) && this.exportRecord == undefined){           
                    this.exportRecord = this.record.data;
                    this.exportRecord["billid"] = this.record.data.billid;
                    this.exportRecord["billno"] = this.record.data.billno;
                    this.exportRecord["term"] = this.record.data.termid;
                    this.exportRecord["customer"] = this.record.data.personid;
                    this.exportRecord["ispercentdiscount"]=false;
                    this.exportRecord["isfromviewmode"]=this.isViewTemplate;
//                    this.exportRecord["includingGST"] = this.includingGST.getValue() ? "on" :"off";
                }
                this.exportRecord['taxid']=this.Tax.getValue();
                this.exportRecord["includingGST"] = this.includingGST.getValue() ? "on" :"off";
                if(this.includingGST.getValue()){
                    this.exportRecord['includeprotax']=true;
                }
                this.exportRecord['isapplytaxtoterms']=this.applyTaxToTermsChk.getValue();
                this.exportRecord["isEdit"]=this.isEdit;
                this.exportRecord['personid']=(this.record != null && this.record!=undefined) ? this.record.data.personid:"";
                this.exportRecord['personname']=(this.record != null && this.record!=undefined) ? this.record.data.personname:"";
                this.exportRecord['hasAccess']=(this.record != null && this.record!=undefined) ? this.record.data.hasAccess:"";
                this.exportRecord['isTaxable']=this.isTaxable.getValue();
                callInvoice(false, undefined, undefined, false, false, true, this.exportRecord);
            } else {
                 if(this.readOnly && (!this.record.data.isLinkedTransaction || this.crossLinkingTransaction) && this.exportRecord == undefined){          //Additional reqired  information is sent in case of view mode
                    this.exportRecord = this.record.data;
                    this.exportRecord["billid"] = this.record.data.billid;
                    this.exportRecord["billno"] = this.record.data.billno;
                    this.exportRecord["term"] = this.record.data.termid;

                    this.exportRecord["ispercentdiscount"]=false;
                    this.exportRecord["isfromviewmode"]=this.isViewTemplate;
                }
                this.exportRecord['isapplytaxtoterms']=this.applyTaxToTermsChk.getValue();
                this.exportRecord["includingGST"] = this.includingGST.getValue() ? "on" :"off";
                if(this.includingGST.getValue()){
                    this.exportRecord['includeprotax']=true;
                }
                this.exportRecord['taxid']=this.Tax.getValue();
                this.exportRecord["isEdit"]=this.isEdit;
                this.exportRecord['personid']=(this.record != null && this.record!=undefined) ? this.record.data.personid:"";
                this.exportRecord['personname']=(this.record != null && this.record!=undefined) ? this.record.data.personname:"";
                this.exportRecord['hasAccess']=(this.record != null && this.record!=undefined) ? this.record.data.hasAccess:"";
                this.exportRecord['isTaxable']=this.isTaxable.getValue();
                this.exportRecord['externalcurrencyrate'] = this.externalcurrencyrate;
                callGoodsReceipt(false, undefined, undefined, undefined, false, false, false, false, false, true, this.exportRecord);
            }
            if (Wtf.getCmp("generateinvoice" + this.id)) {
                Wtf.getCmp("generateinvoice" + this.id).disable();
            }
             if (Wtf.getCmp("generatedogr" + this.id)) {
                Wtf.getCmp("generatedogr" + this.id).disable();
            }
        }
    });
    
    
      /*
     * Button for generating Purchase Order from Sales Order Form
     */
    
    
    this.generatePO = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.invoiceList.gpo"), //Generate PO
        tooltip: WtfGlobal.getLocaleText("acc.invoiceList.gpott"),
        scope: this,
        iconCls: getButtonIconCls(Wtf.etype.edit),
        id: "generatepurchaseorder" + this.id,
        disabled: disableGeneratePO,
        hidden:!(config.moduleid == Wtf.Acc_Sales_Order_ModuleId) || this.isSalesOrderFromPurchaseOrder,
        handler: function(){
            if(this.readOnly && !this.record.data.isLinkedTransaction && !this.exportRecord) {       //Additional reqired  information is sent in case of view mode
                this.exportRecord = this.record.data;
                this.exportRecord["billid"] = this.record.data.billid;
                this.exportRecord["billno"] = this.record.data.billno;
                this.exportRecord["ispercentdiscount"] = false;
                this.exportRecord["term"] = this.record.data.termid;
                this.exportRecord["isfromviewmode"] = this.isViewTemplate;
            }
            var billid=this.exportRecord.billid;
            this.exportRecord['isCallFromSalesOrderTransactionForms']=true;
            this.exportRecord['includeprotax']=false;
            this.exportRecord['data']=this.exportRecord;
            this.exportRecord["sequenceformat"]="";
            callEditPurchaseOrder(true, this.exportRecord, "Generate_PO" + billid, true, this, 1, false);
            if (Wtf.getCmp("generatepurchaseorder" + this.id)) {
                Wtf.getCmp("generatepurchaseorder" + this.id).disable();
            }
        }
    });   
   
     /*
     * Button for generating Sales/Purchase Invoice from Sales/Purchase Order
     */
    
    this.generateDOGR = new Wtf.Toolbar.Button({
        text: (config.isCustomer ? WtfGlobal.getLocaleText("acc.field.generatedeliveryorder") : WtfGlobal.getLocaleText("acc.field.generategoodsreceipt")),
        cls: 'pwnd add',
        id: "generatedogr" + this.id,
        hidden: !(config.moduleid == Wtf.Acc_Purchase_Order_ModuleId || config.moduleid == Wtf.Acc_Sales_Order_ModuleId),
        tooltip: (config.isCustomer ? WtfGlobal.getLocaleText("acc.field.generatedeliveryorder.tooltip") : WtfGlobal.getLocaleText("acc.field.generategoodsreceipt.tooltip")),
        style: " padding-left: 15px;",
        scope: this,
      //  disabled: true,
        disabled:((this.isViewTemplate && !this.pendingapprovalTransaction)? ((this.record.data.isLinkedTransaction && this.crossLinkingTransaction) ? false : this.record.data.isLinkedTransaction ): true), //Button is disabled in case if allready DO is Linkd to document
        handler: function () {
            
            if (config.isCustomer) {
                  if(this.readOnly && (!this.record.data.isLinkedTransaction || this.crossLinkingTransaction) && this.exportRecord == undefined){       //Additional reqired  information is sent in case of view mode
                    this.exportRecord = this.record.data;
                    this.exportRecord["billid"] = this.record.data.billid;
                    this.exportRecord["billno"] = this.record.data.billno;
                    this.exportRecord["ispercentdiscount"]=false;
                    this.exportRecord["term"] = this.record.data.termid;
                    this.exportRecord["isfromviewmode"]=this.isViewTemplate;
                }
                this.exportRecord["includingGST"] = this.includingGST.getValue() ? "on" :"off";
                if(this.includingGST.getValue()){
                    this.exportRecord['includeprotax']=true;
                }
                this.exportRecord['taxid']=this.Tax.getValue();
                this.exportRecord['isTaxable']=this.isTaxable.getValue();
                this.exportRecord["isEdit"]=this.isEdit;
                this.exportRecord['personid']=(this.record != null && this.record!=undefined) ? this.record.data.personid:"";
                this.exportRecord['personname']=(this.record != null && this.record!=undefined) ? this.record.data.personname:"";
                this.exportRecord['hasAccess']=(this.record != null && this.record!=undefined) ? this.record.data.hasAccess:"";
                this.exportRecord['isFromPurchaseOrder'] = true;
                 callDeliveryOrder(false,null, "deliveryorder",undefined,true,this.exportRecord);
            } else {
                  if(this.readOnly && (!this.record.data.isLinkedTransaction || this.crossLinkingTransaction) && this.exportRecord == undefined){        //Additional reqired  information is sent in case of view mode
                     this.exportRecord = this.record.data;
                    this.exportRecord["billid"] = this.record.data.billid;
                     this.exportRecord["billno"] = this.record.data.billno;
                     this.exportRecord["term"] = this.record.data.termid;
                    this.exportRecord["ispercentdiscount"]=false;
                    this.exportRecord["isfromviewmode"]=this.isViewTemplate;
                }
                 this.exportRecord['taxid']=this.Tax.getValue();
                this.exportRecord['isTaxable']=this.isTaxable.getValue();
                this.exportRecord["isEdit"]=this.isEdit;
                this.exportRecord['personid']=(this.record != null && this.record!=undefined) ? this.record.data.personid:"";
                this.exportRecord['personname']=(this.record != null && this.record!=undefined) ? this.record.data.personname:"";
                this.exportRecord['hasAccess']=(this.record != null && this.record!=undefined) ? this.record.data.hasAccess:"";
                this.exportRecord['isFromPurchaseOrder'] = true;
                 callGoodsReceiptDelivery(false,null,null,undefined,undefined,undefined,true,this.exportRecord);
            }
            if (Wtf.getCmp("generatedogr" + this.id)) {
                Wtf.getCmp("generatedogr" + this.id).disable();
            }
        }
    });
    
    
    if(!WtfGlobal.EnableDisable(this.uPermType, this.recurringPermType) ||config.moduleid==Wtf.Acc_Sales_Order_ModuleId){
        buttonArray.push({
            text:(config.moduleid==Wtf.Acc_Invoice_ModuleId || config.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId) ? WtfGlobal.getLocaleText("acc.field.SetRecurringInvoice"):WtfGlobal.getLocaleText("acc.field.SetRecurringSO") ,
            iconCls:getButtonIconCls(Wtf.etype.copy),
            id:'RecurringSO',        
            hidden:!(config.moduleid==Wtf.Acc_Sales_Order_ModuleId || (config.moduleid==Wtf.Acc_Invoice_ModuleId && !this.isCash) || (config.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId && !this.isCash)),
            tooltip :(config.moduleid==Wtf.Acc_Invoice_ModuleId || config.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId) ? WtfGlobal.getLocaleText("acc.field.CreateRecurringInvoice"):WtfGlobal.getLocaleText("acc.field.CreateRecurringSalesOrder"),
            style:" padding-left: 15px;",
            scope: this,
            disabled : true,     
            handler: function() {
                if(this.recordForRecurring){
                    var termDays="";
                    if(this.Term.getValue()!=null && this.Term.getValue() != ""){
                        var rec = this.Term.store.getAt(this.Term.store.find('termid',this.Term.getValue()));
                        if(rec!=null && rec!="" && rec!=undefined)
                            termDays = rec.data.termdays;
                    }
                    if(config.moduleid==Wtf.Acc_Invoice_ModuleId || config.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId) {
                        var moduleid = config.moduleid;
                        var isCustomer = (config.moduleid==Wtf.Acc_Invoice_ModuleId) ? true : false;
                        callRepeatedInvoicesWindow(true,this.recordForRecurring,false,false,true,this.RecordID,termDays,undefined,isCustomer,moduleid);//set Forth Variable to false for Invoice  and true for sales order 
                    } else if( config.moduleid==Wtf.Acc_Sales_Order_ModuleId ){
                        callRepeatedInvoicesWindow(true,this.recordForRecurring,false,true,true,this.RecordID,termDays,undefined,true,Wtf.Acc_Sales_Order_ModuleId);  
                    }
                }
            }
        });
    }
    buttonArray.push({
        text: WtfGlobal.getLocaleText("acc.field.ShowAddress"),  //WtfGlobal.getLocaleText("acc.template.posttext") , //'<b>Post Text</b>',
        cls: 'pwnd add',
        id: "showaddress" + this.id,                
        tooltip : WtfGlobal.getLocaleText("acc.field.UseShowAddressoptiontoinsertAddresses"),       
        style:" padding-left: 15px;",
        scope: this,
        disabled : true, 
        handler:function(){
            this.getAddressWindow(null,null,null,false);
        }
    });
    if (!WtfGlobal.EnableDisable(this.uPermType, this.marginPermType) && this.isShowMarginButton) { //to view margin button in transation entry form(CQ/SO/SI) user must have permission and show profit margin button check is checked in system control -> Margin Button Settings
        buttonArray.push({
            text: WtfGlobal.getLocaleText("acc.field.margin"), // "Margin",
            cls: 'pwnd add',
            id: "margin" + this.id,
            tooltip: WtfGlobal.getLocaleText("acc.field.useMarginOptionToViewMarginOfProducts"),
            style: "padding-left: 15px;",
            scope: this,
            hidden: !(config.moduleid == Wtf.Acc_Customer_Quotation_ModuleId || config.moduleid == Wtf.Acc_Sales_Order_ModuleId || (config.moduleid == Wtf.Acc_Invoice_ModuleId && this.isInvoice)) || this.isEditTemplate,//this.isEditTemplate - hide button in edit template case
            handler: this.getCostAndMarginWindow
        });
    }
    //Add Attachments button
    this.attachFilesBtn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.Lease.addAttach"),
        scope:this,
        id:"attachments" + this.id,
        //Visible in SI,SO,PO and PI
        hidden: !(config.moduleid == Wtf.Acc_Invoice_ModuleId || config.moduleid == Wtf.Acc_Sales_Order_ModuleId || config.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || config.moduleid == Wtf.Acc_Purchase_Order_ModuleId),
        handler:this.showAttachmentsWindow,
        style: "padding-left: 15px;",
        cls : 'pwndbar1 uploadDoc',//getButtonIconCls(Wtf.etype.save),
        disabled : true
    });
    buttonArray.push(this.attachFilesBtn);
    /**
    *This method is used to save already attached documents to new document in Copy Case.
    */
    if(this.copyInv && this.billid != undefined && this.billid != "" &&(config.moduleid == Wtf.Acc_Invoice_ModuleId || config.moduleid == Wtf.Acc_Sales_Order_ModuleId || config.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || config.moduleid == Wtf.Acc_Purchase_Order_ModuleId)){
        Wtf.Ajax.requestEx({
            method:'POST',
            url:"ACCInvoiceCMN/saveAttachedDocumentInCopyCase.do?transactionID="+this.billid,
            params:{
                dummy:1
            }
        },
        this,
        function(response){
            var res = response[0];
            if(res.success){
                this.savedFilesMappingId = res.savedFilesMappingId;
                /*
                 *In copy case assigning fileids to attachFileStr.
                 */
                this.attachedFilesStr = res.fileids;
            }
        },
        function(response){
            var msg=WtfGlobal.getLocaleText("acc.common.msg1");//"Failed to make connection with Web Server";        
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg],2);
        });
    }
    
     buttonArray.push(this.generatePI);
     buttonArray.push(this.generatePO);
     buttonArray.push(this.generateDOGR);
//    buttonArray.push({
//            text: WtfGlobal.getLocaleText("acc.field.autoPopulateInDocumentTemplate"), // Auto Populate In Document Template
//            id: "autopopulate" + this.id,
//            tooltip: WtfGlobal.getLocaleText("acc.field.autoPopulateInDocumentTemplate"),
//            scope: this,
//            hidden:!this.isViewTemplate,
//            handler: this.setAutoPopulateData
//        });
    
//    if (isbchlFields1 && this.isEdit && !this.copyInv) {
//
//        buttonArray.push(this.exportButton = new Wtf.exportButton({
//            obj: config.POthisObj,
////            id: "exportReports" + config.helpmodeid + config.id,
//            text: WtfGlobal.getLocaleText("acc.common.export"),
//            tooltip: WtfGlobal.getLocaleText("acc.common.exportTT"), //'Export report details',
//            disabled: false,
//            menuItem: {csv: false, pdf: false, rowPdf: (config.isSalesCommissionStmt) ? false : true, rowPdfTitle: WtfGlobal.getLocaleText("acc.rem.39")},
//            get: config.POnewtranType
//        }));
//
//    }
    if(!this.readOnly&&!this.copyInv &&!this.isEdit&&config.moduleid !=Wtf.Acc_Security_Gate_Entry_ModuleId){
        buttonArray.push('->');
        buttonArray.push(help);
    }
        Wtf.apply(this, config);
        Wtf.apply(this, {
            bbar: buttonArray
        });

        Wtf.apply(this, config);
        Wtf.apply(this, {
            bbar:buttonArray
        });
      
    this.custVenOptimizedFlag = Wtf.account.companyAccountPref.custvenloadtype;
    
    Wtf.account.TransactionPanel.superclass.constructor.call(this,config);
    this.addEvents({
        'update':true
    });
    this.on('populateGlobalDimensionValue',this.setCustomdimensionFields,this);
    /**
    * Product Grid not showing properly after Expanding/Collapsing Navigation Panel.
    */
    this.on('resize', function (panel) {
        panel.doLayout();
        if (panel.Grid) {
            panel.Grid.doLayout();
            panel.Grid.getView().refresh();
        }
    }, this);
}

Wtf.extend(Wtf.account.TransactionPanel,Wtf.account.ClosablePanel,{
    autoScroll: true,// layout:'border',//Bug Fixed: 14871[SK]
    bodyStyle: {background:"#DFE8F6 none repeat scroll 0 0"},
    border:'false',
    externalcurrencyrate:0,
    exchangeratetype:"",
    revexternalcurrencyrate:0,
    isCurrencyLoad:false,
    currencyid:null,
    custdatechange:false,
    closable : true,
    cash:false,
    layout : 'border',
    isCustomer:false,
    cls : 'southcollapse',
    isCustBill:false,
    isOrder:false,
    fromOrder:false,
    loadRecord:function(){
        if(this.record!=null&&!this.dataLoaded){
            var data=this.record.data;
            
            if(typeof data.date === "string" && data.date !=""&& !this.isCallFromSalesOrderTransactionForms){
                data.date = new Date(data.date);
            }
            if(typeof data.duedate === "string" && data.duedate !="" && !this.isCallFromSalesOrderTransactionForms){
                data.duedate = new Date(data.duedate);
            }
            if(typeof data.shipdate === "string" && data.shipdate !="" && !this.isCallFromSalesOrderTransactionForms){
                data.shipdate = new Date(data.shipdate);
            }
            if(typeof data.startDate === "string" && data.startDate !="" && !this.isCallFromSalesOrderTransactionForms){
                data.startDate = new Date(data.startDate);
            }
            if(typeof data.nextDate === "string" && data.nextDate !="" && !this.isCallFromSalesOrderTransactionForms){
                data.nextDate = new Date(data.nextDate);
            }
            if(typeof data.expireDate === "string" && data.expireDate !="" && !this.isCallFromSalesOrderTransactionForms){
                data.expireDate = new Date(data.expireDate);
            }
            
            this.NorthForm.getForm().loadRecord(this.record);
            if(this.copyInv && this.isCustomer && this.partialInvoiceCmb){
                this.partialInvoiceCmb.setValue(false);
                this.partialInvAmount.disable();
            }
            if (Wtf.isTDSApplicable && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId) {
                if (!Wtf.isEmpty(this.copyInv) && this.copyInv) {
//                    this.getTDSCalculationDetails(this.record);
                } else {
                    this.tdsRate = data.tdsrate;
                    this.tdsmasterrateruleid = data.tdsmasterrateruleid;
                }
            }
            if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA || Wtf.isExciseApplicable){
                this.exciseFormPanel1.getForm().loadRecord(this.record);
//                if(this.isSupplementryExciseInvoice){ 
//                    this.generateSupplementary.setValue(this.isSupplementryExciseInvoice);
//                    this.generateSupplementary.setDisabled(true);                    
//                    this.originalInvoice.setValue(this.record.data.originalInvoice);
//                    this.originalInvoiceId.setValue(this.record.data.originalInvoiceId);
//                }
                
                if(this.isExciseTab && this.isEdit && !this.isCopyFromTemplate){  //     ERP-27120 :-on Edit Case type of sales will disable.
                    this.defaultNatureOfPurchase.setDisabled(true);
                }
                if(this.UnitModuleTemplate!= undefined && Wtf.exciseMultipleUnit){
                    if(!Wtf.isEmpty(data.companyunitid)){ // All record are load in store and value is set (Disabled)
                        this.UnitModuleTemplate.setDisabled(true);
                    }else if((!Wtf.isEmpty(this.isEditTemplate) && this.isEditTemplate == true) || (!Wtf.isEmpty(this.isViewTemplate) && this.isViewTemplate == true)){
                        WtfGlobal.hideFormElement(this.UnitModuleTemplate);
                    }else{ // Only unused record are load in store 
                        Wtf.FormUnitStore.load({
                            params: {
                                excludeUsedExciseUnits: true
                            }
                        });
                    }
                }
            }
            if (Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && !this.record.data.isInterstateParty ) {
                WtfGlobal.hideFormElement(this.FormType);                
            } else {
                //if (this.record.data.formtypeid && this.record.data.formtypeid != undefined)
                if (this.record.data.formtypeid != undefined && this.record.data.formtypeid == 0) {
                    this.FormType.setValue(1);
                } else {
                    this.FormType.setValue(this.record.data.formtypeid);
                }
            }
            if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && /*!this.isCustomer &&*/ !this.isExciseTab && !this.isExpenseInv){
                if(this.record.data.gtaapplicable){//If Selected Vendor/Customer has GTA applicable, then by Default value will be populate.
                    this.GTAApplicable.setValue(true);
                }else{
                    this.GTAApplicable.setValue(false);
                }
                /**
                 * Set Merhcant Exproter value in Edit case
                 */
                if(this.record.data.isMerchantExporter){//
                    this.isMerchantExporter.setValue(true);
                }else{
                    this.isMerchantExporter.setValue(false);
                }
                           
//                if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
//                    if (!this.isCustomer && this.record.data.GSTINRegTypeDefaultMstrID != undefined && this.record.data.GSTINRegTypeDefaultMstrID !== "") {
//                        if (this.record.data.GSTINRegTypeDefaultMstrID === Wtf.GSTRegMasterDefaultID.Unregistered) {
//                            this.GTAApplicable.setValue(true);
//                            this.GTAApplicable.setDisabled(true);
//                        } else {
//                            this.GTAApplicable.setDisabled(false);
//                        }
//                    }
//                }
            }
            if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
                if (!this.isCustomer) {
                    if (this.record.data.GSTINRegTypeDefaultMstrID != undefined && this.record.data.GSTINRegTypeDefaultMstrID !== "" && this.record.data.GSTINRegTypeDefaultMstrID === Wtf.GSTRegMasterDefaultID.Unregistered) {
                        this.purchaseFromURD = true;
                    } else {
                        this.purchaseFromURD = false;
                    }
                }
                if (this.isIndiaGST) {
                    if (this.record.data.CustomerVendorTypeId != undefined) {
                        this.CustomerVendorTypeId = this.record.data.CustomerVendorTypeId;
                    }
                    if (this.record.data.gstin != undefined) {
                        this.gstin = this.record.data.gstin;
                    }
                    if (this.record.data.GSTINRegistrationTypeId != undefined) {
                        this.GSTINRegistrationTypeId = this.record.data.GSTINRegistrationTypeId;
                    }
                    if (this.record.data.gstdochistoryid != undefined) {
                        this.gstdochistoryid = this.record.data.gstdochistoryid;
                    }
                    /**
                     * Set Default GST details master items id
                     */
                    if (this.GSTINRegTypeDefaultMstrID==undefined && this.record.data.GSTINRegTypeDefaultMstrID != undefined) {
                        this.GSTINRegTypeDefaultMstrID = this.record.data.GSTINRegTypeDefaultMstrID;
                    }
                    if (this.CustVenTypeDefaultMstrID==undefined && this.record.data.CustVenTypeDefaultMstrID != undefined) {
                        this.CustVenTypeDefaultMstrID = this.record.data.CustVenTypeDefaultMstrID;
                    }
                }
            }
            /*For SATS*/
            if(SATSCOMPANY_ID==companyid){
                this.loadSATSProductGrid(data.invoicetype);   // in edit and copy case grid was coming default it should be according to invoicetype
            }
            /**********/
            if(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash) {
                this.InvoiceStore.on("load", function(){
                    var record = new Wtf.data.Record({
                        billid: data.landedInvoiceID,
                        billno: data.landedInvoiceNumber
                    });
                    this.InvoiceStore.insert(0, record);
                    this.invoiceList.setValue(data.landedInvoiceID);
                }, this);
                this.InvoiceStore.load();
            }
//            if ((Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.isCustomer && this.copyInv)) {
//                this.generateSupplementary.setValue(true);
//                this.originalInvoice.setValue(data.billno);
//                this.originalInvoiceId.setValue(data.billid);
//            }
            if ((Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.isTDSApplicable && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId
                    && (this.isEdit))) {//In Edit case, assiging already Saved/Used advance TDS amount to local variable.
                this.AdjustAdvancePaymentStore.load({
                    params: {
                        vendorid: data.personid,
                        isEdit: (this.isEdit && !this.copyInv),
                        billdate: WtfGlobal.convertToGenericDate(data.date),
                        goodsReceiptID: !this.copyInv ? data.billid :""
                    }
                });
                if (!this.copyInv) {
                    //In Edit case, setting assigned values to combo.
                    this.TotalAdvanceTDSAdjustmentAmt = data.TotalAdvanceTDSAdjustmentAmt;
                    this.AdjustAdvancePaymentStore.on("load", function () {
                        if (this.isEdit && Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.isTDSApplicable && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId) {
                            var AdvancePaymentIDS = (this.AdjustAdvancePaymentStore.data.items[this.AdjustAdvancePaymentStore.data.length - 1].data.UsedAdvancePaymentIDs).split(",");
                            if (AdvancePaymentIDS.length > 0) {
                                this.AdjustAdvancePayments.setValue(AdvancePaymentIDS);
                            }
                        }
                    }, this);
                }
            }
//            if(!(this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId || this.moduleid == Wtf.Acc_Vendor_Quotation_ModuleId)) {
            if(data.termid!="" && data.termid!=null && data.termid!=undefined && !this.cash){
                this.termds.on("load", function(){
                    this.Term.setValue(data.termid);
                    if(this.isCopyFromTemplate){
                        this.updateDueDate();
                    }
                }, this);
                this.termds.load();
            }
            
            if(!this.copyInv&&!this.isPOfromSO&&!this.isSOfromPO&& !(this.quotation&&!this.isCustomer&&this.ispurchaseReq)){
                if(data.isDraft){
                    if(data.billno!=""){
                        this.Number.setValue(data.billno);  //SDP-13487 : Do not set empty entry no. in edit case of of Draft                                         
                    }
                } else {
                    this.Number.setValue(data.billno);
                }
            }else if(this.copyInv){
                this.Number.setValue("");//copy case assign ""
            }
            this.externalcurrencyrate=this.record.data.externalcurrencyrate;
            
            if(this.isPOfromSO||this.isSOfromPO || (this.quotation&&!this.isCustomer&&this.ispurchaseReq)){ // for showing link number in number field in case of creating PO from SO or creating SO from PO or VQ generated from Purchase Requisition
                this.fromPO.setValue(true);
                if (this.isSOfromPO){
                    this.fromLinkCombo.setValue(4);
                } else if (this.quotation&&!this.isCustomer&&this.ispurchaseReq){  // IF VQ generated from Purchase Requisition
                    this.fromLinkCombo.setValue(5);   // 5 referes to 'Purchase Requisition'
                }else {
                    this.fromLinkCombo.setValue(0);                
                }
                
                this.POStore.proxy.conn.url =(this.isPOfromSO)?"ACCSalesOrderCMN/getSalesOrders.do":(this.isSOfromPO)?"ACCPurchaseOrderCMN/getPurchaseOrders.do":"ACCPurchaseOrderCMN/getRequisitions.do";
                if (this.isFromWO) {  // For Work Order
                    this.POStore.proxy.conn.url = "ACCWorkOrder/getWorkOrderForCombo.do"
                }
                this.POStore.on("load", function(){
                    if(this.isPOfromSO||this.isSOfromPO || this.quotation&&!this.isCustomer&&this.ispurchaseReq){
                        if(!(this.quotation&&!this.isCustomer&&this.ispurchaseReq)){ // In case of 'Vendor quotation generated from purchase requisition' , this.po and this.fromPO will not be disabled
                        this.PO.disable();
                        this.fromPO.disable();
                        }
                        this.setTransactionNumber();
                        (this.isPOfromSO||this.isSOfromPO)?this.PO.setValue(data.billid):this.PO.setValue(this.PR_IDS);
                    }
                    
                    /*------ Execute when Generating PO from SO or SO from PO to populate Custom/Dimension fields in their respective form----*/
                    if (this.GENERATE_PO || this.GENERATE_SO)
                    {
                        this.setCustomdimensionFields();
                    }
                    
                    if(this.isPOfromSO){
                        this.isPOfromSO = false;
                    }
                    if(this.isSOfromPO){
                        this.isSOfromPO = false;
                    }
                    if(this.isFromWO){
                        this.fromPO.setValue(true);
                        this.PO.disable();
                        this.fromLinkCombo.setValue(11);
                        this.fromPO.disable();
                        this.PO.setValue(data.billid);
                        this.PO.disable();
                    }
                }, this);
                this.POStore.load();                        
                
            }else if  (this.ifFromShortfall) {//reset in case of shortfall
                this.fromPO.setValue(false);
                this.fromPO.disable();
                this.fromLinkCombo.setValue("");
                this.fromLinkCombo.disable();
                this.sequenceFormatCombobox.enable();
                this.PO.setValue("");
                this.Number.reset();
            }else{ // for showing multiple link numbers in number field
                this.Grid.getStore().on("load", this.handleGridStoreLoadEventOnEdit, this);
            }
         
                
                
                
            if(!(this.GENERATE_PO || this.GENERATE_SO) && (this.copyInv || this.isEdit)){ // In generate SO and PO case Customer/Vnendor field remain unselected for first time.So generate PO and generate SO case it will remain disable, untill user does not select any vendor/customer
                if(Wtf.getCmp("showaddress" + this.id)){
                    Wtf.getCmp("showaddress" + this.id).enable(); 
                } 
                //Enable Add Attachments button
                if(Wtf.getCmp("attachments" + this.id)){
                    Wtf.getCmp("attachments" + this.id).enable(); 
                }
            }
            
            //In Edit & Copy case setting remote store without loading salesperson/agent store
            if((this.copyInv || this.isEdit)){
                //SI,CQ & SO
                if(this.isCustomer){
                    // In edit and copy case setting remote store. ['hasAccess] is important else it won't save in copy case 
                    if(this.record.data.salesPerson!="" && this.record.data.salespersonname!=""){
                        this.users.setValForRemoteStore(this.record.data.salesPerson , this.record.data.salespersonname,this.record.data.hasAccess);
                    }else{ //setting None as record is not present
                        this.users.setValForRemoteStore("None" ,"None",true);
                    }
                }else{ //Purchase Side
                    // In edit and copy case setting remote store. ['hasAccess] is important else it won't save in copy case 
                    if(this.record.data.agent!="" && this.record.data.agentname!=""){
                        this.users.setValForRemoteStore(this.record.data.agent , this.record.data.agentname,this.record.data.hasAccess);
                    }else{ //setting None as record is not present
                        this.users.setValForRemoteStore("None" ,"None",true);
                    }
                }   
            }
            if(this.viewGoodReceipt){
                if(Wtf.getCmp("RecurringSO")){
                    Wtf.getCmp("RecurringSO").hide(); 
                }
                if(Wtf.getCmp("posttext" + this.id)){
                    Wtf.getCmp("posttext" + this.id).hide();
                }
                if(Wtf.getCmp('south' + this.id)){
                    Wtf.getCmp('south' + this.id).hide();
                }
                if(Wtf.getCmp('productDetailsTpl'+this.id)){
                    Wtf.getCmp('productDetailsTpl'+this.id).hide();
                }
            }
            this.template.setValue(data.templateid);
            this.Currency.setValue(data.currencyid);
            if (this.isFromWO || this.ifFromShortfall) {
                this.Currency.setValue(WtfGlobal.getCurrencyID());
            }
            if(data.islockQuantityflag)
             {
                 this.lockQuantity.setValue(true);
            }
            else
            {
                 this.lockQuantity.setValue(false);
            }
            
            /*----- showing dropship checkbox in Eidt & View mode--- */
            if (this.record.json!=null && this.record.json.isdropshipchecked && !this.copyInv)
            {
                this.isdropshipDocument.setValue(true);
            }
            else
            {
                this.isdropshipDocument.setValue(false);
            }
            
            /*--Showing dropship type check in Edit & View but not in Copy---- */
            if ((this.isEdit || this.isViewTemplate) && this.record.json!=null&&this.record.json.isdropshipchecked && !this.copyInv) {

                
                    this.isdropshipDocument.show();
                    WtfGlobal.showFormElement(this.isdropshipDocument);
                    WtfGlobal.showFormLabel(this.isdropshipDocument);
             
            
                } else {
                if (!this.isCopyFromTemplate && !this.copyInv && this.record.json!=null&&this.record.json.isdropshipchecked) {
                    this.isdropshipDocument.hide();
                    WtfGlobal.hideFormElement(this.isdropshipDocument);
                    WtfGlobal.hideFormLabel(this.isdropshipDocument);
                }
            }

                                                               
            /*  Setting "Reserve Stock" checkbox status in Quotation entry form*/
            if (this.record.json!=undefined && this.record.json.isReserveStockQuantityflag!=undefined && this.record.json.isReserveStockQuantityflag)
            {
                this.reserveStock.setValue(true);
            }
            else
            {
                this.reserveStock.setValue(false);
            }
            
            /*
            if(!this.custVenOptimizedFlag) {
                var store=(this.isCustomer?Wtf.customerAccStore:Wtf.vendorAccStore)
                var index=store.findBy( function(rec){
                    var parentname=rec.data['accid'];
                    if(parentname==data.personid)
                        return true;
                    else
                        return false;
                })
                
                if(index>=0) {
                        this.Name.setValue(data.personid);
                }
                
            } else { 
                this.Name.setValForRemoteStore(data.personid, data.personname);
            }*/
             /*
             * for Order templates populate product and customer using configuration
             */
            if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId||this.moduleid==Wtf.Acc_Sales_Order_ModuleId||this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId||this.moduleid==Wtf.Acc_Invoice_ModuleId){
                if(this.templateId!=undefined && this.templateId!="" && data.populatecustomertemplate!=undefined && data.populateproducttemplate!=undefined){
                    this.populatecustomertemplate=data.populatecustomertemplate;
                    this.populateproducttemplate=data.populateproducttemplate;
                    this.populateproductfortemplate.setValue(data.populateproducttemplate);
                    this.populatecustomerfortemplate.setValue(data.populatecustomertemplate);
                    this.autoGenerateDO.setValue(data.populateautodointemp);
                }
            }
            if(!this.GENERATE_SO && !this.GENERATE_PO &&!this.ifFromShortfall){//in case of call from shortfall no need to set vendor name
                if(this.populatecustomertemplate || (this.isTemplate || this.isViewTemplate || this.isEditTemplate)){
                     this.Name.setValForRemoteStore(data.personid, data.personname,data.hasAccess);
                    }
                }
                /**
                 * this.fromPO should be enable when vendor or customer is present.SDP-13323
                 */
            if (this.fromPO && this.Name && this.Name.getValue() != "") {
                //this.PO.enable();
                if (!this.readOnly) {
                    this.fromPO.enable();
                }
            } else {
                this.fromPO.disable();
            }
            if(this.moduleid == Wtf.Acc_Invoice_ModuleId && Wtf.account.companyAccountPref.activateIBGCollection){
                 this.customerBankAccountTypeStore.load();
             }
            this.Memo.setValue(data.memo);
            /*For SATS*/
            if(SATSCOMPANY_ID==companyid){
                this.shipLength.setValue(data.shiplengthval);
            }

            /**********/
            this.postText = data.posttext;
            this.DueDate.setValue(data.duedate);
            if(this.isOrder && data.isOpeningBalanceTransaction){
                this.isOpeningBalanceOrder = data.isOpeningBalanceTransaction;
//                this.billDate.maxValue=this.getFinancialYRStartDatesMinOne(true);
                this.billDate.maxValue=WtfGlobal.getOpeningDocumentDate(true); // Set transaction date as before first financial year date.
            }
            if(this.ifFromShortfall){//When call from shortfall set current date as bill date by default
                this.billDate.setValue( new Date());
            }else if (!(this.isTemplate || this.isEditTemplate || this.isViewTemplate)){ // Set Transaction date as current date if template is selected to create document.
                if(this.isCopyFromTemplate){
                    this.billDate.setValue(new Date());
                    if(data.incash != "" && data.incash){
                        this.shipDate.setValue(new Date());
                        this.updateDueDate();
                    }
                }else{
                    this.billDate.setValue(data.date);
                }
            }else{
                this.billDate.setValue(data.date);
            }
            if (data.ispercentdiscount != undefined) {
                this.perDiscount.setValue(data.ispercentdiscount);
            }
            this.Discount.setValue(data.discountval);
            if(this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId){
                this.shippingTerm.setValue(data.shippingterm);
            }
            this.isTaxable.setValue(data.taxincluded);
            if(this.isCustomer && !(this.moduleid == Wtf.Acc_Sales_Order_ModuleId) && !(this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
                this.CustomerPORefNo.setValue(data.porefno);
            }else{
                this.CustomerPORefNo.setValue(data.customerporefno);
            }
            
            this.CostCenter.setValue(data.costcenterid);
            
                /*------If Purchase Order is Cretaed from Sales Order transaction form-------- */
            if(this.isPOfromSO && this.isCallFromSalesOrderTransactionForms){
               this.Number.setValue("");  
               this.users.setValue("");
               this.CostCenter.setValue(this.record.data.costcenter);
               this.includeProTax.setValue(false);
            }
            this.editedBy.setValue(data.lasteditedby);
            this.dataLoaded=true;
            if(this.IsInvoiceTerm) {
                this.setTermValues(data.termdetails);
//                if(data.termsincludegst!=="" && data.termsincludegst===true) {
//                    this.TermsIncludeGST_YES.setValue(true);
//                    this.TermsIncludeGST_NO.setValue(false);
//                    this.termsincludegst = true;
//                } else if(data.termsincludegst!=="" && data.termsincludegst===false){
//                    this.TermsIncludeGST_NO.setValue(true);
//                    this.TermsIncludeGST_YES.setValue(false);
//                    this.termsincludegst = false;
//                }
            }
            if(this.isPOfromSO||this.isSOfromPO){
                this.billDate.setValue(new Date());
//            	this.billDate.setValue(Wtf.serverDate);
            	this.updateDueDate();
            }
            if(this.isCustomer && !this.copyInv && this.record.data.partialinv){
                var id=this.Grid.getId();
                    this.partialInvAmount.enable();
                var rowindex=this.Grid.getColumnModel().findColumnIndex("partamount");
                this.Grid.getColumnModel().setHidden( rowindex,0) ;
            }
            var taxColumnIndex=this.Grid.getColumnModel().findColumnIndex("prtaxid");
            var taxAmtColumnIndex=this.Grid.getColumnModel().findColumnIndex("taxamount");
            if(this.Grid){
                this.Grid.forCurrency =data.currencyid;
                this.Grid.affecteduser=data.personid;
                this.Grid.billDate = this.billDate.getValue();
            }
            if(this.record.data.includeprotax){
                this.Grid.getColumnModel().setHidden( taxColumnIndex,false) ;
                this.Grid.getColumnModel().setHidden( taxAmtColumnIndex,false) ;
                
                this.isTaxable.setValue(false);
                this.isTaxable.disable();
                this.Tax.setValue("");
                this.Tax.disable();
                
            }else{
                this.Grid.getColumnModel().setHidden( taxColumnIndex,true) ;
                this.Grid.getColumnModel().setHidden( taxAmtColumnIndex,true) ;
                if(!this.isEdit && !this.isCopy)           //In edit case no need to reset Transaction Tax. - Amol D.
                this.isTaxable.reset();
                if(this.readOnly){
                    this.isTaxable.disable();
                }else{
                    this.isTaxable.enable();
                }
            }
            if(this.isEdit && !this.templateId) {
               this.templateModelCombo.disable();
            }
            this.loadTransStore();
            if(this.isExpenseInv){
                if(this.record.data.gstIncluded) {
                    this.includingGST.setValue(this.record.data.gstIncluded);
                    this.includeProTax.setValue(true);
                    this.includeProTax.disable();
                    this.isTaxable.setValue(false);
                    this.isTaxable.disable();
                    this.Tax.setValue("");
                    this.Tax.disable();
                }
                var rowRateIncludingGstAmountIndex=this.Grid.getColumnModel().findColumnIndex("rateIncludingGstEx");
                if(this.includingGST.getValue()){
                     this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,!this.includingGST.getValue());
                }else{
                               this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,this.includingGST.getValue());
                }   
                this.fromPO.disable();
            } else {
                this.includingGST.reset();
                this.isViewTemplate==true?this.includingGST.disable():this.includingGST.enable();
                if(this.record.data.gstIncluded!=undefined){
                    this.includingGST.setValue(this.record.data.gstIncluded);
                    if(this.record.data.gstIncluded){
                        this.includeProTax.setValue(true);
                        this.includeProTax.disable();
                        this.isTaxable.setValue(false);
                        this.isTaxable.disable();
                        this.Tax.setValue("");
                        this.Tax.disable();
                        var rowRateIncludingGstAmountIndex=this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
                        if(this.includingGST.getValue()){
                             this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,!this.includingGST.getValue());
                        }
                    }
                }
            }
            if(WtfGlobal.getModuleId(this)==20 && this.isEdit && !this.copyInv){
            var leaseOrMaintenanceSo = (this.record && this.record.json && this.record.json.leaseOrMaintenanceSo)?this.record.json.leaseOrMaintenanceSo:(this.record && this.record.data && this.record.data.leaseOrMaintenanceSo)?this.record.data.leaseOrMaintenanceSo:"";
            if((leaseOrMaintenanceSo == 2)){
                this.isMaintenanceOrderCheckBox.setValue(true); // if SO to be edited is having maintenance linked with it
            }else{
                this.isMaintenanceOrderCheckBox.setValue(false);  // if SO to be edited is NOT having maintenance linked with it
            }
            }
            if((data.taxid == "")||(this.isSOfromPO && WtfGlobal.getModuleId(this)==20)||(this.isPOfromSO && WtfGlobal.getModuleId(this)==18)){//generate so or po it should not show taxid
                this.isTaxable.setValue(false); 
                this.Tax.setValue("");
                this.Tax.disable();     
            }else{
//                if (this.copyInv) {
//                    if (isTaxActivate(this.Grid.taxStore, data.taxid, "prtaxid")) {
                        this.Tax.setValue(data.taxid);
//                    } else {
//                        this.Tax.setValue("");
//                    }
//                } else {
//                    this.Tax.setValue(data.taxid);
//                }
                this.isTaxable.setValue(true);
                if (this.readOnly){
                    this.Tax.disable();
                    this.isTaxable.disable();
                } else{
                    this.isTaxable.enable();
                    this.Tax.enable(); //enable the tax when taxid is present-for edit case it was not required but for copy its is required.
                }
            }
            this.gstCurrencyRate = this.record.data.gstCurrencyRate && this.record.data.gstCurrencyRate!="" ? this.record.data.gstCurrencyRate : 0;
            if (Wtf.account.companyAccountPref.countryid === Wtf.CountryID.MALAYSIA) { // for malaysian company
                this.enableDisableFields(true);
            }
            if(this.moduleid == Wtf.Acc_Invoice_ModuleId && Wtf.account.companyAccountPref.activateIBGCollection && this.isEdit && !this.copyInv && !this.readOnly && data.isGIROFileGeneratedForUOBBankForReport != undefined){
                this.customerBankAccountType.setDisabled(data.isGIROFileGeneratedForUOBBankForReport);
            }
            var prodTaxSet = (this.record.data.includeprotax != undefined && this.record.data.includeprotax != "") ? this.record.data.includeprotax : false;
            if (prodTaxSet) {
                this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                this.applyTaxToTermsChk.setValue(data.isapplytaxtoterms);
            } else {
              this.applyTaxToTermsChkHideShow(false);
            }
            /**
             * Set Additional Memo in Edit, Copy and View case
             * ERP-41891
             */
            if(this.isIndonesian && (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Sales_ModuleId )
                    && (this.record.data && this.record.data.additionalMemo && this.record.data.additionalMemo != '')
                    && (this.isEdit || this.copyInv || this.isViewTemplate)){
                if(this.additionalMemoComboBox){
                    this.additionalMemoComboBox.setValForRemoteStore(this.record.data.additionalMemo,this.record.data.additionalMemoName);
                }
            }
     }
         /*
          * Populate data while generating Sales/Purchase Invoice from Sales/Purchase Order
          */
            
        if(this.invoicefromorder){
           
           var recordIndex="";
           var nameRecord="";
            var vendorOrCustomerId = "";
            var isCalledFromViewMode = false;
            if (this.invoicefromorderrec.isfromviewmode != undefined && this.invoicefromorderrec.isfromviewmode) {
                vendorOrCustomerId = this.invoicefromorderrec.personid;
                isCalledFromViewMode = true;
            }
            if (!isCalledFromViewMode) {
                if (this.isCustomer) {
                    vendorOrCustomerId = this.invoicefromorderrec.customer;

                } else {
                    vendorOrCustomerId = this.invoicefromorderrec.vendor;
                }
            }
                      
            if (this.Name.store.getRange().length > 0) {
                this.Name.setValue(vendorOrCustomerId);
            } else {
                recordIndex = WtfGlobal.searchRecordIndex(this.personstore, vendorOrCustomerId, 'accid');
                nameRecord = this.personstore.getAt(recordIndex);
                this.Name.store.add(nameRecord);
                this.Name.setValue(vendorOrCustomerId);
            }
                  
            
//            
//            var index=WtfGlobal.searchRecordIndex(this.personstore,this.Name.getValue(),'accid');
//            var rec=this.personstore.getAt(index);
            
            this.onNameSelect(this.Name,nameRecord,recordIndex)
            this.fromPO.setValue(true);
            this.Currency.setValue(this.invoicefromorderrec.currencyid)             //to handle the case of currency other than base currency or vendor currency
            if (this.isIndiaGST) {
                this.applyGSTFieldsBasedOnDate();
            }
            this.billid = this.invoicefromorderrec.billid;
            this.isfromdeliveryorder = this.invoicefromorderrec.isfromdeliveryorder != undefined ? true : false;
            this.isfromgoodsreceipt = this.invoicefromorderrec.isfromgoodsreceipt != undefined ? true : false; 
            var recIndex = "";
            /* Code to set "Link to" combo value*/
            if (this.isfromdeliveryorder || this.isfromgoodsreceipt) {
                recIndex = 1;
                this.fromLinkCombo.setValue(1);
            } else {
                recIndex = 0;
                this.fromLinkCombo.setValue(0);
            }
            
     
            /* Setting default fields in Invoice from*/
            this.includeProTax.setValue(this.invoicefromorderrec.includeprotax=="true" || this.invoicefromorderrec.includeprotax==true?true:false);
            this.Memo.setValue(this.invoicefromorderrec.memo);
            this.users.setValue(this.isCustomer ? this.invoicefromorderrec.salesPerson : this.invoicefromorderrec.agent);
            this.shipDate.setValue(this.invoicefromorderrec.shipdate);
            this.shipvia.setValue(this.invoicefromorderrec.shipvia);
            this.CostCenter.setValue(this.invoicefromorderrec.costcenter);
            this.fob.setValue(this.invoicefromorderrec.fob);
            this.Term.setValue(this.invoicefromorderrec.term); 
            this.SupplierInvoiceNo.setValue(this.invoicefromorderrec.supplierinvoiceno);
            this.PO.setValue(this.invoicefromorderrec.billid);
            if (this.invoicefromorderrec.currentAddressDetailrec != undefined && this.invoicefromorderrec.currentAddressDetailrec != "") {
                this.currentAddressDetailrec = this.invoicefromorderrec.currentAddressDetailrec;
            }
            this.CustomerPORefNo.setValue(this.invoicefromorderrec.customerporefno);
            this.includingGST.setValue(this.invoicefromorderrec.includingGST=="on" ? true :false);
            /**
             * isTaxableisTaxable is used as object when called from generate SI.
             */
            var isTaxableValue = this.invoicefromorderrec.isTaxable;
            if( typeof isTaxableValue === 'string' || typeof isTaxableValue === 'boolean'){
                this.isTaxable.setValue((isTaxableValue === "true" || isTaxableValue === true)? true: false);
            }else if(typeof isTaxableValue === 'object'){
                if (this.invoicefromorderrec.isTaxable != undefined){
                    this.isTaxable.setValue(this.invoicefromorderrec.isTaxable.getValue());
                    if (this.invoicefromorderrec.isTaxable.getValue()) {
                        this.includingGST.setValue(false);
                        this.includingGST.disable();
                        this.includeProTax.setValue(false);
                        this.includeProTax.disable();
                    }
                }
            }
            this.Tax.setValue(this.invoicefromorderrec.Tax?this.invoicefromorderrec.Tax.getValue():"");
            //Setting invoice term values given in SO/DO/SI/GR/PO/PI to SO/DO/SI/GR/PO/PI     ERP-33441
            if(this.invoicefromorderrec.termdetails != undefined) {
                this.setTermValues(this.invoicefromorderrec.termdetails);
            }

            /**
             * Handle which tax component should be enabled.
             */
            if (this.invoicefromorderrec.includeprotax == "true" || this.invoicefromorderrec.includeprotax == true) {
                this.isTaxable.setValue(false);
                this.isTaxable.disable();
                this.Tax.setValue("");
                this.Tax.disable();
                this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                this.applyTaxToTermsChk.setValue(this.invoicefromorderrec.isapplytaxtoterms);
            } 
            this.callOnfromLinkComboSelect(this.fromLinkCombo, this.fromLinkCombo.store.getAt(recIndex), 0);
           
           
        }
        if(this.isTaxable != undefined && this.isTaxable.getValue()){
            /*This block will execute only when Global Level tax is applied.
             *True means Hidden False
             *This function written in CommonERPComponent.js
             */
            this.HideShowLinkedTermTaxAndTermTaxAmountCol(true);
        }
        if(this.readOnly){
            this.isTaxable.disable();
            this.Tax.disable();
        }
        this.autoPopulateProducts();
        // ---- ERP-30195[SJ] Showing landingCostCategoryCombo And Procurment No. field when Active isActiveLandingCostOfItem and eidt mode and Expense Invoice and not Case Invoice
        if(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.isViewTemplate && (this.isEdit|| this.copyInv) && this.isExpenseInv){            
            this.landingCostCategoryCombo.enable();            
            this.invoiceList.enable();
            this.landingCostCategoryWindowBtn.enable();
            if(this.record.data.landingCostCategoryCombo == ""){
                this.landingCostCategoryCombo.setValue("NOT APPLICABLE");  
            }
        }   
        
        if(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId  && this.isExpenseInv){
            this.landingCostCategoryWindowBtn.enable(); 
            this.manualLandedCostCategory=this.record.data.manualLandedCostCategory;
        }
        
        if(this.isLinkedTransaction && !this.copyInv){
            if(this.NorthForm.getForm().items != undefined && this.NorthForm.getForm().items != null){
                for(var i=0; i<this.NorthForm.getForm().items.length;i++){
                    this.NorthForm.getForm().items.item(i).disable();
                }
            }
            if(this.isCash){// For Cash Transcation When the Payment Status Is cleared
            this.SouthForm.disable();
            }
            this.isTaxable.disable();
            this.Tax.disable();
//            this.TermsIncludeGST_YES.disable();
//            this.TermsIncludeGST_NO.disable();
//            this.termgrid.disable();
            /*Enabling the required fields*/
            this.CustomerPORefNo.enable();
            this.CostCenter.enable();
            if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
                this.FormType.enable();
                this.ExciseType.enable();
            }
            this.Memo.enable();
            this.validTillDate.enable();
            this.shippingTerm.enable();
            this.shipDate.enable();
            this.shipvia.enable();
            this.fob.enable();
            this.users.enable();
        }
        if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId && Wtf.account.companyAccountPref.blockPOcreationwithMinValue){
            Wtf.vendorAccRemoteStore.load();
        }
        
        /*
         * In Edit case Tax mapped in vendor master not loaded at Line level Grid that's why we loaded data of perticular vendor -SDP-7500
        */
       if(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Purchase_Order_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId){
          
            var vendorID;

            if (this.invoicefromorder) {

                vendorID = this.invoicefromorderrec.personid


            }
            else
            {
                vendorID = this.record.data.personid
            }
             Wtf.vendorAccRemoteStore.load({
                 params: {
               
                    vendorid:vendorID
                 }
            });
        }
        /**
         * Populate Customer/ Vendor GST details in Edit/   Copy Case
         */
        this.populateGSTDataOnEditCopy();
//        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && !this.isCustomer){
//            this.updateVATNumbers(this.record);
//        }
        if (this.moduleid == Wtf.Acc_Purchase_Order_ModuleId || this.moduleid == Wtf.Acc_Sales_Order_ModuleId) {
            this.blockSOPO.setValue(data.isSOPOBlock);
        }
        
        if(!Wtf.isEmpty(data) && data.personid && this.advancePaymentCombo){
            //In Edit and view case loaded advance payment combo store.
            this.advancePaymentCombo.store.load();
            if(!this.copyInv){
                this.advancePaymentCombo.store.on("load",this.getLinkedAdvancePayments,this);
            }
        }
    },
    /**
     * Create only Indonesia Country fields in this function
     */
    createIndonesiaCountrySpecificFields: function(){
        /**
         * Create Additional Memo field (field Name = ID KETERANGAN TAMBAHAN)
         */
        var isShowAdditionalMemo = false;
        if(this.isIndonesian && (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Sales_ModuleId )){
            isShowAdditionalMemo = true;
        }
        this.additionalMemoRec = Wtf.data.Record.create ([
            {name: 'id'},
            {name: 'name'},
            {name: 'code'}
        ]);
        this.additionalMemoStore = new Wtf.data.Store({
            url: "ACCInvoice/getAdditionalMemo.do",
            reader: new Wtf.data.KwlJsonReader({
            root: "data"
            }, this.additionalMemoRec)
        });
        this.additionalMemoComboBox = new Wtf.form.ExtFnComboBox({
            store: this.additionalMemoStore,
            typeAhead: true,
            selectOnFocus:true,
            valueField:'id',
            displayField:'name',
            extraFields:['code'],
            listWidth: 500,
            fieldLabel:"<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.indonesia.additionalmemo.form.field") + "'>" + WtfGlobal.getLocaleText("acc.indonesia.additionalmemo.form.field") + "</span>", //ID KETERANGAN TAMBAHAN (Additional Memo)
            emptyText:WtfGlobal.getLocaleText("acc.common.select"), 
            hiddenName:"additionalMemoComboBox",
            mode: 'remote',
            forceSelection: true,
            disabled: this.readOnly,
            width : 240,
            editable : true,
            triggerAction:'all',
            hirarchical:true,
            scope:this,
            hidden: !isShowAdditionalMemo,
            hideLabel: !isShowAdditionalMemo
        });
    },
    getLinkedAdvancePayments : function(){
        Wtf.Ajax.requestEx({
            url : "ACCSalesOrderCMN/getLinkedAdvancePayments.do",
            params:{
                billid : this.billid
            }
        }, this, function(response){
            /*
             setting value to advance payment combo in view and edit case.
             */
            if(response && response.data){
                var valueFieldArr = [];
                var displayFieldArr = [];
                var dataArr = response.data || [];
                for(var i=0;i<dataArr.length;i++){
                    if(dataArr[i]["billid"]){
                        var valueField = this.advancePaymentCombo.valueField;
                        var displayField = this.advancePaymentCombo.displayField;
                        var rec = this.advancePaymentCombo.findRecord(valueField, dataArr[i]["billid"]);
                        if(!rec && dataArr[i]["billno"]){
                            rec = {}
                            rec[valueField] = dataArr[i]["billid"];
                            rec[displayField] = dataArr[i]["billno"];
                            rec = new Wtf.data.Record(rec);
                            this.advancePaymentCombo.store.add(rec);
                        }
                        valueFieldArr.push(dataArr[i]["billid"]);
//                        displayFieldArr.push(dataArr[i]["billno"]);
                    }
                }
                // Called setValForRemoteStore method to set value of advance payment for which amount due is 0
//                if (valueFieldArr.length != 0 && displayFieldArr.length != 0){
//                    this.advancePaymentCombo.mode = "remote";
//                    this.advancePaymentCombo.setValForRemoteStore(valueFieldArr.join(","), displayFieldArr.join(","));
//                    this.advancePaymentCombo.mode = "local";
//                }
                if (valueFieldArr.length != 0){
                    this.advancePaymentCombo.setValue(valueFieldArr.join(","));
                }
            }
        }, this.failureCallback);
        this.advancePaymentCombo.store.un("load",this.getLinkedAdvancePayments,this);
    },
    onRender:function(config){
        var centerPanel = new Wtf.Panel({
                region : 'center',
                border : false,
                autoScroll : true
            });
        if(Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA || !Wtf.isExciseApplicable){
            if(this.isCustomer||this.isCustBill||(this.isOrder && this.moduleid!=Wtf.Acc_Purchase_Order_ModuleId)||this.isEdit && !this.isExpenseInv||this.copyInv && !this.isExpenseInv || this.isTemplate) {
                centerPanel.add(this.NorthForm,this.formpPanelOfbutton,this.SouthForm,this.Grid,this.southPanel);
            } else if((this.isEdit && this.isExpenseInv) || (this.copyInv && this.isExpenseInv)) {
                centerPanel.add(this.NorthForm,this.SouthForm,this.deleteSelectedPanel,this.ExpenseGrid,this.southPanel);
            } else {
                centerPanel.add(this.NorthForm,this.formpPanelOfbutton,this.SouthForm,this.GridPanel,this.southPanel);
            }
        }else{
//            Wtf.stateStore.load({
//                params:{
//                    countryid: Wtf.account.companyAccountPref.countryid 
//                }
//            });
            if(this.isTemplate || this.isViewTemplate && !this.isExciseTab){ // At Tempate creation OR view Template Excise form must not visiable its only visiable at invoicecreation time.
                //if(this.isTemplate || this.isViewTemplate || !this.isExciseTab){ // At Tempate creation OR view Template Excise form must not visiable its only visiable at invoicecreation time.
                if(this.isCustomer||this.isCustBill||this.isOrder||this.isEdit && !this.isExpenseInv||this.copyInv && !this.isExpenseInv || this.isTemplate) {
                    centerPanel.add(this.NorthForm,this.formpPanelOfbutton,this.SouthForm,this.Grid,this.southPanel);
                } else if((this.isEdit && this.isExpenseInv) || (this.copyInv && this.isExpenseInv)) {
                    centerPanel.add(this.NorthForm,this.formpPanelOfbutton,this.SouthForm,this.ExpenseGrid,this.southPanel);
                } else {
                    centerPanel.add(this.NorthForm,this.exciseFormPanel1,this.formpPanelOfbutton,this.SouthForm,this.GridPanel,this.southPanel);
                } 
            }else if(this.isCustomer||this.isCustBill|| (this.isOrder && this.moduleid!=Wtf.Acc_Purchase_Order_ModuleId) ||this.isEdit && !this.isExpenseInv||this.copyInv && !this.isExpenseInv || this.isTemplate) {
                centerPanel.add(this.NorthForm,this.exciseFormPanel1,this.formpPanelOfbutton,this.SouthForm,this.Grid,this.southPanel);
            } else if((this.isEdit && this.isExpenseInv) || (this.copyInv && this.isExpenseInv)) {
                centerPanel.add(this.NorthForm,this.exciseFormPanel1,this.SouthForm,this.deleteSelectedPanel,this.ExpenseGrid,this.southPanel);
            } else {
                centerPanel.add(this.NorthForm,this.exciseFormPanel1,this.formpPanelOfbutton,this.SouthForm,this.GridPanel,this.southPanel);
            }   
        }     
        
        this.add(centerPanel);
        this.add({
                border: true,
                id: 'south' + this.id,
                region: 'south',
                //split: true,
                hidden : this.isCustBill,
                layout: 'fit',
                height:130 ,
                plugins : new Wtf.ux.collapsedPanelTitlePlugin(),
                collapsibletitle : WtfGlobal.getLocaleText("acc.common.recentrec") + " " +(this.isCustomer?WtfGlobal.getLocaleText("acc.agedReceive.gridCustomer"):WtfGlobal.getLocaleText("acc.het.180")) + " "+WtfGlobal.getLocaleText("acc.field.fortheProduct"),
                title : WtfGlobal.getLocaleText("acc.common.recentrec") + " " +(this.isCustomer?WtfGlobal.getLocaleText("acc.agedReceive.gridCustomer"):WtfGlobal.getLocaleText("acc.het.180")) + " "+WtfGlobal.getLocaleText("acc.field.fortheProduct"),
                collapsible: true,
                collapsed: true,
                items : [
                    this.lastTransPanel
                ]
            });
          
       /*---If check "Map taxes at product level" true then by default "Include Product Tax" field will be Yes--------  */
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
            this.includeProTax.setValue(true);
        }
            
        Wtf.account.TransactionPanel.superclass.onRender.call(this, config);
        this.isClosable=false
        /**
         *this.isEditTemplate flage is use to hide the "Number" field and sequence format
         */
        if(this.isViewTemplate || this.isEditTemplate){
            this.Number.hideLabel = true;
            this.Number.hide();
            this.sequenceFormatCombobox.hideLabel = true;
            this.sequenceFormatCombobox.hide();
        }
        
        if(this.viewGoodReceipt){
            if(this.Number){
                this.Number.hideLabel = false;
                this.Number.show();
            }
            if(this.sequenceFormatCombobox){
                this.sequenceFormatCombobox.hideLabel = false;
                this.sequenceFormatCombobox.show();
            }
            if(this.billDate){
                this.billDate.hideLabel =false;
                this.billDate.show();
            }
        }
        
        if(this.isTemplate){
            this.Number.setValue("");
            this.Number.disable();
            this.sequenceFormatCombobox.disable();
//            this.autoGenerateDO.disable();
            this.generateReceipt.disable();
            this.templateModelCombo.hideLabel = true;
        }
        this.initForClose();
        if(this.isFromProjectStatusRep){
            
            this.selectedCustomerStore.on('load',function(){
                var rec = this.selectedCustomerStore.getAt(0);
                if(this.Name)
                    this.Name.setValue(rec.get('accid'));
            },this);
            this.selectedCustomerStore.load({
                params:{
                    selectedCustomerIds:this.selectedCustomerIds
                }
            });
            
            this.setPOLinks();
        }
        this.hideFormFields();
        /**
         * ERP-32829 
         * set GST flag based on Date 
         */
        this.on("activate",function(){
           /*---Apply tax to term will be Yes--------  */
            if (this.includeProTax && this.includeProTax.getValue()) {
                this.applyTaxToTermsChkHideShow(true);
           } else if (!this.isEdit) {
             this.applyTaxToTermsChkHideShow(false);
           }
        },this);
        
    },
    
    hideFormFields:function(){
        if(this.isCustomer){
            if(this.isInvoice){

                this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.customerInvoice);

            } else if(this.cash){

                this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.CS);

            } else if(this.isOrder && !this.quotation){

                this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.salesOrder);

            } else if(this.quotation){

                this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.customerQuotation);

            }
        }else{
            if(this.isInvoice){

                this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.vendorInvoice);

            } else if(this.cash){

                this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.CP);

            } else if(this.isOrder && !this.quotation){

                this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.purchaseOrder);

            } else if(this.quotation){

                this.hideTransactionFormFields(Wtf.account.HideFormFieldProperty.vendorQuotation);
            }
        }  
    },
    
    
    hideTransactionFormFields:function(array){
        if(array){
            for(var i=0;i<array.length;i++){
                var fieldArray = array[i];
                if(Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id)){
                    if(fieldArray.fieldId=="ShowOnlyOneTime" && ((this.isEdit !=undefined ?this.isEdit:false) || (this.copyInv !=undefined ?this.copyInv:false) || (this.isCopyFromTemplate !=undefined ?this.isCopyFromTemplate:false) || (this.isTemplate !=undefined ?this.isTemplate:false))){
                        continue;
                    }
                    if(fieldArray.isHidden){
                        Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).hideLabel = fieldArray.isHidden;
                        Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).hidden = fieldArray.isHidden;
                    }
                    if(fieldArray.isReadOnly){
                        Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).disabled = fieldArray.isReadOnly;
                    }
                    if(fieldArray.isUserManadatoryField && Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel != undefined){
                        Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).allowBlank = !fieldArray.isUserManadatoryField;
                        var fieldLabel="";
                        if(fieldArray.fieldLabelText!="" && fieldArray.fieldLabelText!=null && fieldArray.fieldLabelText!=undefined){
                            fieldLabel= fieldArray.fieldLabelText+" *";
                        }else{
                            fieldLabel=(Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel) + " *";
                        }
                        Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel = fieldLabel;
                    }else{
                        if( fieldArray.fieldLabelText!=null && fieldArray.fieldLabelText!=undefined && fieldArray.fieldLabelText!=""){
                            if(fieldArray.isManadatoryField && fieldArray.isFormField )
                                Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel=fieldArray.fieldLabelText +"*";
                            else
                                Wtf.getCmp(fieldArray.fieldId+this.heplmodeid+this.id).fieldLabel=fieldArray.fieldLabelText;
                        }
                  }
                }
            }
            
            
            
            
        }
    },
    
    setNextNumber:function(config){
        if(this.sequenceFormatStore.getCount()>0){
        if((this.isEdit || this.copyInv) && !this.ifFromShortfall && !this.templateId && !this.GENERATE_PO && !this.GENERATE_SO && !(this.quotation&&!this.isCustomer&&this.ispurchaseReq)){ //only edit case & copy AND NOT FROM sHORTFALL
//            var index=this.sequenceFormatStore.find('id',this.record.data.sequenceformatid);   //may raise error
            var index=WtfGlobal.searchRecordIndex(this.sequenceFormatStore,this.record.data.sequenceformatid,"id");
            if(index!=-1){
                this.sequenceFormatCombobox.setValue(this.record.data.sequenceformatid);             
                /*
                 * if(this.isDraft && !this.copyInv){} - This piece of code has written to set the auto sequence no.when draft record opens in edit mode.
                 * Here, user can save this draft as transaction or can save it draft as it is.
                 * If user save the draft as transaction then that transaction should save with Auto Sequence No. (If available, esle it will be saved with manual no.)
                 */
		this.draftNo = this.record.data.billno;
                this.isDraft = (this.record!=null && this.record.data!=undefined) ? this.record.data.isDraft : false;
                if(this.isDraft && !this.copyInv && (this.draftNo==null || this.draftNo==undefined || this.draftNo=="")){
                   this.Number.disable();
                   WtfGlobal.hideFormElement(this.Number);
                   this.getNextSequenceNumber(this.sequenceFormatCombobox);
		   this.isAutoSeqForEmptyDraft = true;
                } else if(!this.copyInv){//edit
                    this.sequenceFormatCombobox.disable();
                    this.Number.disable(); 
                }else{//copy case if sequenceformat id hide number
                    this.Number.disable();
                   WtfGlobal.hideFormElement(this.Number);
                   this.getNextSequenceNumber(this.sequenceFormatCombobox);
                }
               
            } else {
                    this.sequenceFormatCombobox.setValue("NA");
                    if((this.isDraft || this.record.data.isDraft) && !this.copyInv){
                        this.sequenceFormatCombobox.enable()    //SDP-13923 : In edit case, if sequence format is NA for draft record then keep Sequence Format Combox enable
                    } else if(!this.copyInv){ // In Edit case only disable the sequence format combo.
                        this.sequenceFormatCombobox.disable();
                    }
                    if (!this.isViewTemplate) {            // View mode- all fields should be disabled unconditionaly
                        this.Number.enable();
                    }
                    if (this.copyInv) {//copy case show number field 
                        if(this.record.data.sequenceformatid!="" && this.record.data.sequenceformatid!=null && this.record.data.sequenceformatid!=undefined){
                            if (this.sequenceFormatStore.getCount() > 1) {
                                var count = this.sequenceFormatStore.getCount();
                                for (var i = 0; i < count; i++) {
                                    var seqRec = this.sequenceFormatStore.getAt(i)
                                    if (seqRec.json.isdefaultformat == "Yes") {
                                        this.sequenceFormatCombobox.setValue(seqRec.data.id)
                                        break;
                                    }
                                }
                            }
                            this.getNextSequenceNumber(this.sequenceFormatCombobox);
                            }
                    }
                }
            }else if(this.templateId || this.ifFromShortfall || !this.isEdit || this.GENERATE_PO||this.GENERATE_SO || (this.quotation&&!this.isCustomer&&this.ispurchaseReq)){// create new,generate so and po case and from shortfall
                var count=this.sequenceFormatStore.getCount();
                for(var i=0;i<count;i++){
                    var seqRec=this.sequenceFormatStore.getAt(i)
                    if(seqRec.json.isdefaultformat=="Yes"){
                        this.Number.disable();
                        WtfGlobal.hideFormElement(this.Number);
                        this.sequenceFormatCombobox.setValue(seqRec.data.id)
                        /**
                         *set the default sequence format to this.record when we click on generate PO button
                         */
                        if (this.record != null && this.record != undefined) {
                            this.record.sequenceformat = seqRec.data.id;
                        }
                        break;
                    }
                }
                if(this.sequenceFormatCombobox.getValue()!=""){// If any sequence format assigned to sequenceFormatCombobox then It will go to fetch next sequence number
                    this.getNextSequenceNumber(this.sequenceFormatCombobox); 
                } else{// other wise document number will remain hidden
                    this.Number.setValue("");  
                    WtfGlobal.hideFormElement(this.Number); 
                }
            }
        }
},
//setNextNumberDO:function(config){
//     if(this.sequenceFormatStoreDo.getCount()>0){
//                var count=this.sequenceFormatStoreDo.getCount();
//                for(var i=0;i<count;i++){
//                   var seqRec=this.sequenceFormatStoreDo.getAt(i)
//                    if(seqRec.json.isdefaultformat=="Yes"){
//                        this.sequenceFormatComboboxDo.setValue(seqRec.data.id) 
//                        break;
//                    }
//                }
//                if(!this.isEdit || (this.copyInv && this.isEdit)){
//                }
//         }
//},
    initComponent:function(config){
        Wtf.account.TransactionPanel.superclass.initComponent.call(this,config);
       // chkWarehouseload();
        this.businessPerson=(this.isCustomer?'Customer':'Vendor');
        this.loadCurrFlag = true;
        if(!this.isCustBill){
            this.isCustBill = false;
        }
//        this.term=0;
        
        this.tplSummary=new Wtf.XTemplate(
            '<div class="currency-view">',
            '<table width="100%">',
//            '<tpl if="'+(!this.isOrder || this.quotation)+'">',
            '<tr><td><b>'+WtfGlobal.getLocaleText("acc.invoice.subTotal")+' </b></td><td text-align=right>{subtotal}</td></tr>',
//            '<tr><td><b>- '+WtfGlobal.getLocaleText("acc.invoice.discount")+' </b></td><td align=right>{discount}</td></tr>',
            '</table>',
//            '<hr class="templineview">',
//            '</tpl>',
            '<table width="100%">',
//            '<tr><td><b>'+WtfGlobal.getLocaleText("acc.invoice.amt")+' </b></td><td align=right>{totalamount}</td></tr>',
            '<tr><td><b>'+WtfGlobal.getLocaleText("acc.field.AmountBeforeTax")+' </b></td><td align=right>{amountbeforetax}</td></tr>',
            '<tr><td><b>+ '+WtfGlobal.getLocaleText("acc.invoice.Tax")+': </b></td><td align=right>{tax}</td></tr>',
            '</table>',
            '<table width="100%">',
            '<tr style=\"display:'+ (this.roundingAdjustmentFlag ? 'table-row' : 'none') +'\" ><td><b>+ '+WtfGlobal.getLocaleText("acc.field.RoundingAdjustment")+'</b></td><td align=right>{roundingAdjustmentAmount}</td></tr>',
            '</table>',
            '<hr class="templineview">',
            '<table width="100%">',
            '<tr><td ><b>'+WtfGlobal.getLocaleText("acc.invoice.totalAmt")+' </b></td><td align=right>{aftertaxamt}</td></tr>',
            '</table>',
            '<table width="100%">',
            '<tr><td ><b>'+WtfGlobal.getLocaleText("acc.invoice.totalAmtInBase")+' </b></td><td align=right>{totalAmtInBase}</td></tr>',
            '</table>',
            '<hr class="templineview">',
            '<hr class="templineview">',
            '</div>'
        );
        if(this.IsInvoiceTerm) { //customer invoice
            // Summary of Cash Returned in Sales Invoice
            var changeToBeReturnedText = "";
            //Check for cash and credit sales invoice
            if( Wtf.account.companyAccountPref.enableCashReceiveReturn && (this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Invoice_ModuleId)){
                //create Cash returned summary text
                changeToBeReturnedText = '<hr class="templineview"><table width="100%">'
                +'<tr><td ><b>'+WtfGlobal.getLocaleText("acc.field.summaryText.changeToBeReturned")+' </b></td><td align=right>{changeToBeReturned}</td></tr>'
                +'</table>';
            }
            this.tplSummary=new Wtf.XTemplate(
                '<div class="currency-view">',
                '<table width="100%">',
                '<tr><td><b>'+WtfGlobal.getLocaleText("acc.invoice.subTotal")+' </b></td><td align=right>{subtotal}</td></tr>',
//                '<tpl if="'+(!this.isOrder || this.quotation)+'">',
//                '<tr><td><b>- '+WtfGlobal.getLocaleText("acc.invoice.discount")+' </b></td><td align=right>{discount}</td></tr>',
//                '</tpl>',
                '</table>',
//                '<hr class="templineview">',
                '<table width="100%">',
//                '<tr><td><b>'+WtfGlobal.getLocaleText("acc.invoice.amt")+' </b></td><td align=right>{totalamount}</td></tr>',
//olde code of below line:  '<tr><td><b>+ '+WtfGlobal.getLocaleText("acc.invoice.Tax")+': </b></td><td align=right>{tax}</td></tr>',
                '<tr><td><b>+ '+WtfGlobal.getLocaleText("acc.field.InvoiceTerm")+' </b></td><td align=right>{termtotal}</td></tr>',
                '<tr><td><b>'+WtfGlobal.getLocaleText("acc.field.AmountBeforeTax")+' </b></td><td align=right>{amountbeforetax}</td></tr>',
                '<tr><td><b>+ '+WtfGlobal.getLocaleText("acc.invoice.Tax")+': </b></td><td align=right>{tax}</td></tr>',
                '<tr style=\"display:'+ (Wtf.account.companyAccountPref.isLineLevelTermFlag && WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.NONE ? 'table-row' : 'none') +'\" ><td><b>+ '+WtfGlobal.getLocaleText("acc.master.invoiceterm.nontaxablecharges")+': </b></td><td align=right>{nontaxableamount}</td></tr>',
//old code of below line : '<tr><td><b>+ '+WtfGlobal.getLocaleText("acc.field.InvoiceTerm")+' </b></td><td align=right>{termtotal}</td></tr>',                
                '<tr style=\"display:'+ (Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId ? 'table-row' : 'none') +'\" ><td><b>- '+WtfGlobal.getLocaleText("acc.invoice.tds")+': </b></td><td align=right>{tdsamount}</td></tr>',
                '<tr style=\"display:'+ ((this.roundingAdjustmentFlag) ? 'table-row' : 'none') +'\" ><td><b>+ '+WtfGlobal.getLocaleText("acc.field.RoundingAdjustment")+'</b></td><td align=right>{roundingAdjustmentAmount}</td></tr>',
                '</table>',
                '<table width="100%">',
                '</table>',
                '<hr class="templineview">',
                '<table width="100%">',
                '<tr><td ><b>'+WtfGlobal.getLocaleText("acc.invoice.totalAmt")+' </b></td><td align=right>{aftertaxamt}</td></tr>',
                '</table>',
                '<table width="100%">',
                '<tr><td ><b>'+WtfGlobal.getLocaleText("acc.invoice.totalAmtInBase")+' </b></td><td align=right>{totalAmtInBase}</td></tr>',
                '</table>',
                '<hr class="templineview">',
                 '</table>',
                '<table width="100%">',
//                '<tpl if="'+(!this.isOrder || this.quotation)+'">',
                '<tr><td ><b>'+WtfGlobal.getLocaleText("acc.inv.amountdue")+' </b></td><td align=right>{amountdue}</td></tr>',
                '</table>',
                changeToBeReturnedText,
                '<hr class="templineview">',
//                '</tpl>',
                '<hr class="templineview">',
                '</div>'
            );
        }
        
        this.GridRec = Wtf.data.Record.create ([
            {name:'id'},
            {name:'number'}
        ]);

        this.termRec = new Wtf.data.Record.create([
            {name: 'termname'},
            {name: 'termdays'},
            {name: 'termid'}
        ]);
        this.termds = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },this.termRec),
    //        url: Wtf.req.account + 'CompanyManager.jsp',
            url : "ACCTerm/getTerm.do",
            baseParams:{
                mode:91
            }
         });         
         
        this.sequenceFormatStoreRec = new Wtf.data.Record.create([
        {
            name: 'id'
        },

        {
            name: 'value'
        },
        {
            name: 'oldflag'
        }
        ]);
        this.sequenceFormatStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                totalProperty:'count',
                root: "data"
            },this.sequenceFormatStoreRec),
            //        url: Wtf.req.account +'CompanyManager.jsp',
            url : "ACCCompanyPref/getSequenceFormatStore.do",
            baseParams:{
                mode:this.modeName,
                isEdit: this.copyInv || this.ifFromShortfall ? false : this.isEdit //If from shortfall need edit false
            }
        });
//          this.sequenceFormatStore.on('load',function(){
//             if(this.sequenceFormatStore.getCount()>0){
//                 var seqRec=this.sequenceFormatStore.getAt(0)
//                this.sequenceFormatCombobox.setValue(seqRec.data.id);
//                if((!this.isEdit&&!this.copyInv) || this.isPOfromSO || this.isSOfromPO){
//                    this.getNextSequenceNumber(this.sequenceFormatCombobox);
//                 }
//             }
//         },this);
        this.sequenceFormatStore.load();
        if(!this.isTemplate) {  // this check is added due to avoding issue of sequence number getting incremented in case of template not having create also transaction check (ERP-1518)
            this.sequenceFormatStore.on('load',this.setNextNumber,this);
//	    this.sequenceFormatStore.on('load', function (a, b, c) {
//                new Wtf.util.DelayedTask().delay(Wtf.GridStateSaveDelayTimeout, function () {       //SDP-13487 : Set Delay of 1500ms
//                    this.setNextNumber(a, b, c);
//                }, this);
//            }, this);
        }
        
         this.currencyRec = new Wtf.data.Record.create([
            {name: 'currencyid',mapping:'tocurrencyid'},
            {name: 'symbol'},
            {name: 'currencyname',mapping:'tocurrency'},
            {name: 'exchangerate'},
            {name: 'htmlcode'},
            {name: 'erdid',mapping:'id'},
            {name: 'companyid'},
            {name: 'fromcurrencyid'},
            {name: 'fromcurrency'},
            {name: 'currencycode'},
            {name: 'ismaxnearestexchangerate'}
         ]);
         this.currencyStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:"count"
            },this.currencyRec),
            url:"ACCCurrency/getCurrencyExchange.do"
         });
         
         this.currencyStoreCMB = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:"count"
            },this.currencyRec),
            url:"ACCCurrency/getCurrencyExchange.do"
         });
         
         this.currencyStoreCMB.load();
         
         var transdate=(this.isEdit || this.copyInv ?WtfGlobal.convertToGenericDate(this.record.data.date):WtfGlobal.convertToGenericDate(new Date()));

         this.selectedCustomerStore = new Wtf.data.Store({
            url:"ACCCustomer/getCustomersForCombo.do",
            baseParams:{
                mode:2,
                group:10,
                deleted:false,
                nondeleted:true,
                common:'1'
            },
            reader: new  Wtf.data.KwlJsonReader({
                root: "data",
                autoLoad:false
            },Wtf.personRec)
        });
        
        this.customersIdNameStore = new Wtf.data.Store({
            url:"ACCCustomer/getCustomersIdNameForCombo.do",
            baseParams:{
                deleted:false,
                nondeleted:true
            },
            reader: new  Wtf.data.KwlJsonReader({
                root: "data",
                autoLoad:false
            },Wtf.personRec)
        });

        this.vendorsIdNameStore = new Wtf.data.Store({
            url:"ACCVendor/getVendorsIdNameForCombo.do",
            baseParams:{
                deleted:false,
                nondeleted:true
            },
            reader: new  Wtf.data.KwlJsonReader({
                root: "data",
                autoLoad:false
            },Wtf.personRec)
        });

         this.Currency= new Wtf.form.FnComboBox({
            fieldLabel: "<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.currency.tt")+"'>"+ WtfGlobal.getLocaleText("acc.currency.cur") +" *"  +"</span>",//    WtfGlobal.getLocaleText("acc.currency.cur"),  //'Currency',
            hiddenName:'currencyid',
            id:"currency"+this.heplmodeid+this.id,
//            anchor: '94%',
            width : 240,
            //disabled:true,
            typeAhead: false, //ERP-11388
            store:this.currencyStore,
            valueField:'currencyid',
            allowBlank : false,
            forceSelection: true,
            displayField:'currencyname',
            scope:this,
            selectOnFocus:true
        });

        this.Currency.on('beforeselect', function(combo, record, index) {
            this.currencyBeforeSelect = combo.getValue();
        }, this);
        
        this.Currency.on('select', function(combo, record, index){
            if(Wtf.account.companyAccountPref.activateToDateforExchangeRates){
                checkForNearestExchangeRate(this,record,this.billDate.getValue());
            }
//             if(Wtf.account.companyAccountPref.currid != this.Currency.getValue()) {
//                this.applyTaxToTermsChkHideShow(false);
//            }else  if(Wtf.account.companyAccountPref.currid == this.Currency.getValue()&&CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
//              /*
//               * If base currency and transaction currency are same and "Map taxes at product level" is true in company preferences "Apply tax to terms"  check box is shown 
//               */
//                this.applyTaxToTermsChkHideShow(true);
//            }
            
            if(combo.getValue()=== this.currencyBeforeSelect){
                return;
            }else if( Wtf.productDetailsGridIsEmpty(this.Grid)){
                 this.externalcurrencyrate=0; 
                    this.currencychanged = true;
                    if(this.includingGST.getValue()!=false){
                        this.includingGST.setValue(false);   
                        this.applyTaxToTermsChkHideShow(false);
                    }
                    var customer="",currency="";
                    if(this.Name.getValue() != undefined && this.Name.getValue() != ""){
                        customer= this.Name.getValue();
                    }    
                    if(this.Currency.getValue() != undefined && this.Currency.getValue() != ""){
                        currency= this.Currency.getValue();        
                    }                 
                    if(!this.GENERATE_PO&&!this.GENERATE_SO){
                        this.onCurrencyChangeOnly();
                        this.Name.setValue(customer);
                        this.Currency.setValue(currency);
                    }    
                    this.updateFormCurrency();
                    if(this.Grid){
                        this.Grid.forCurrency = this.Currency.getValue();
                    }
                    if (this.advancePaymentCombo){
                        this.advancePaymentCombo.clearValue();
                        this.advancePaymentCombo.store.load();
                    }
                    return;
            }
            Wtf.MessageBox.confirm("Warning",WtfGlobal.getLocaleText("acc.wm.beforechange"), function(btn){
                if(btn == 'yes') {  
                    this.externalcurrencyrate=0; 
                    this.currencychanged = true;
                    if(this.includingGST.getValue()!=false){
                        this.includingGST.setValue(false);   
                        this.applyTaxToTermsChkHideShow(false);
                    }
                    if(this.termgrid != undefined){
                        this.termgrid.getStore().rejectChanges();
                    }
                    var customer="",currency="";
                    if(this.Name.getValue() != undefined && this.Name.getValue() != ""){
                        customer= this.Name.getValue();
                    }    
                    if(this.Currency.getValue() != undefined && this.Currency.getValue() != ""){
                        currency= this.Currency.getValue();        
                    }                 
                    if(!this.GENERATE_PO&&!this.GENERATE_SO){
                        this.onCurrencyChangeOnly();
                        this.Name.setValue(customer);
                        this.Currency.setValue(currency);
                    }    
                    this.updateFormCurrency();
                    if(this.Grid){
                        this.Grid.forCurrency = this.Currency.getValue();
                    }
                    if(this.advancePaymentCombo){
//                        this.advancePaymentCombo.setValue("");
                        this.advancePaymentCombo.clearValue();
                        this.advancePaymentCombo.store.load();
                    }
                }else if(btn == 'no') {
                    combo.setValue(this.currencyBeforeSelect);
                
//                    if (Wtf.account.companyAccountPref.currid != this.Currency.getValue()) {
//                        this.applyTaxToTermsChkHideShow(false);
//                    }else if(Wtf.account.companyAccountPref.currid == this.Currency.getValue() && CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
//                        /*
//                         * If base currency and transaction currency are same and "Map taxes at product level" is true in company preferences "Apply tax to terms"  check box is shown 
//                         */
//                        this.applyTaxToTermsChkHideShow(true);
//                    }
//                    this.updateSubtotal();
                    return;
                }
            },this);
                    
                    
            //            this.currencyStore.load({params:{mode:201,transactiondate:WtfGlobal.convertToGenericDate(this.billDate.getValue()),tocurrencyid:this.Currency.getValue()}});
        }, this);
        
        this.Term= new Wtf.form.FnComboBox({
            fieldLabel:(this.isCustomer?"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.invoice.creditTerm.tip")+"'>"+ WtfGlobal.getLocaleText("acc.invoice.creditTerm")+"</span>":"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.invoice.debitTerm.tip")+"'>"+ WtfGlobal.getLocaleText("acc.invoice.debitTerm")+"</span>")+' *',
            itemCls : (this.cash)?"hidden-from-item1":"",  //||this.isOrder
            hideLabel:this.cash,    //||this.isOrder
            id:"creditTerm"+this.heplmodeid+this.id,
            hidden:this.cash,                //||this.isOrder,
            hiddenName:'term',
//            anchor: '93.5%',
            width : 240,
            store:this.termds,
            valueField:'termid',
            allowBlank:this.cash,               //||this.isOrder,
            emptyText:(this.isCustomer?WtfGlobal.getLocaleText("acc.inv.ct"):WtfGlobal.getLocaleText("acc.inv.dt")),
            forceSelection: true,
            displayField:'termname',
//            addNewFn:this.addCreditTerm.createDelegate(this),
            scope:this,
            listeners:{
                'select':{
                    fn:this.updateDueDate,
                    scope:this
                }
            },
            selectOnFocus:true
        });
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.creditterm, Wtf.Perm.creditterm.edit))
            this.Term.addNewFn=this.addCreditTerm.createDelegate(this);
        
        this.paramsForGlobalStore();
        
        this.moduleTemplateSection();
        if(!this.record){
            this.getPostTextToSetPostText();
        }else{
            this.postText=this.record.data.posttext;
        }
        /*For SATS*/
        if(SATSCOMPANY_ID==companyid && !this.isFromProjectStatusRep){
            if(this.isCustomer){
                Wtf.customerAccStore.reload();
            }else{
                Wtf.vendorAccStore.reload();
            }
        }
        /*********/
        /*
        if(!this.custVenOptimizedFlag &&  !this.isFromProjectStatusRep){
            if(this.isCustomer){
                    if(this.isEdit || this.copyInv){
                        Wtf.customerAccStore.on("load",function(){
                            if(this.isStoreNotLoaded) {
                                var data=this.record.data;
                                this.Name.setValue(data.personid);      // Set Value first time 
                                this.isStoreNotLoaded = false;
                            }
                        },this);
                    }
                    Wtf.customerAccStore.load();
            }else{
                    if(this.isEdit || this.copyInv){
                        Wtf.vendorAccStore.on("load",function(){
                            if(this.isStoreNotLoaded) {
                                var data=this.record.data;
                                this.Name.setValue(data.personid);          //Set value first time
                                this.isStoreNotLoaded = false;
                            }
                        },this);
                    }
                    Wtf.vendorAccStore.reload();
            }
        }
        */
        
        var isShowOneTime=(this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Sales_Order_ModuleId  || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId) && !((this.isEdit !=undefined ?this.isEdit:false) || (this.copyInv !=undefined ?this.copyInv:false) || (this.isCopyFromTemplate !=undefined ?this.isCopyFromTemplate:false) || (this.isTemplate !=undefined ?this.isTemplate:false));      
        this.ShowOnlyOneTime= new Wtf.form.Checkbox({
            name:'ShowOnlyOneTime',
            fieldLabel:"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.cust.ShowOnlyOneTime.tt") +"'>"+ WtfGlobal.getLocaleText("acc.cust.ShowOnlyOneTime")  +"</span>", 
            //fieldLabel:"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.customer.onetime.tt") +"'>"+ WtfGlobal.getLocaleText("acc.cust.onetime")  +"</span>",
            id:'ShowOnlyOneTime'+this.heplmodeid+this.id,
            checked:false,
            hideLabel:!isShowOneTime, // show only in new case
            hidden:!isShowOneTime,
            cls : 'custcheckbox',
            width: 10
        });    
        
        
         var comboConfig = {
                fieldLabel:(this.isCustomer)?"<span wtf:qtip='"+  WtfGlobal.getLocaleText("acc.invoiceList.cust.tt") +"'>"+ WtfGlobal.getLocaleText("acc.invoiceList.cust") +"</span>":"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.invoiceList.ven.tt") +"'>"+ WtfGlobal.getLocaleText("acc.invoiceList.ven") +"</span>",//this.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.cust"):WtfGlobal.getLocaleText("acc.invoiceList.ven") , //this.businessPerson+"*",
                hiddenName:this.businessPerson.toLowerCase(),
                id:"customer"+this.heplmodeid+this.id,
                store: this.isFromProjectStatusRep?this.customersIdNameStore:(this.isCustomer? this.customersIdNameStore:this.vendorsIdNameStore),
                valueField:'accid',
                displayField:'accname',
                minChars:1,
                extraFields:Wtf.account.companyAccountPref.accountsWithCode?['acccode']:[],
                listWidth:Wtf.account.companyAccountPref.accountsWithCode?550:400,
                allowBlank:false,
                hirarchical:true,
                emptyText:this.isCustomer?WtfGlobal.getLocaleText("acc.inv.cus"):WtfGlobal.getLocaleText("acc.inv.ven") , //'Select a '+this.businessPerson+'...',
                mode: 'remote',
                typeAhead: true,
                extraComparisionField:'acccode',// type ahead search on acccode as well.
                typeAheadDelay:30000,
                forceSelection: true,
                selectOnFocus:true,
                isVendor:!(this.isCustomer),
                isCustomer:this.isCustomer,
                width : 240,
                triggerAction:'all',
                scope:this
            }
            
            if(this.custVenOptimizedFlag) {
                comboConfig['ctCls'] = 'optimizedclass';
                comboConfig['hideTrigger'] = true;
                this.Name= new Wtf.form.ExtFnComboBox(comboConfig); 
            } else {
            this.Name= new Wtf.form.ExtFnComboBox(comboConfig);      
        }
        /**
         * Added check for 'ShowOnlyOneTime' Customer. 
         */
        if (this.Name != null && this.Name != undefined) {
            var isEditORisCopy = (this.isEdit != undefined ? this.isEdit : false) || (this.copyInv != undefined ? this.copyInv : false) || (this.isCopyFromTemplate != undefined ? this.isCopyFromTemplate : false);
            this.Name.store.on('beforeload', function (store, object) {
                if (!object.params) {
                    object.params = {};
                }
                var currentBaseParams = store.baseParams;
                if (isEditORisCopy) {
                    currentBaseParams.isPermOrOnetime = "";
                } else {
                    if (this.ShowOnlyOneTime != undefined && this.ShowOnlyOneTime.getValue() == true) {
                        currentBaseParams.isPermOrOnetime = true;
                    } else {
                        currentBaseParams.isPermOrOnetime = false;
                    }
                }
                store.baseParams = currentBaseParams;
            }, this);
        }
        
        this.manufacturerTypeCombo=new Wtf.form.ComboBox({
            fieldLabel:WtfGlobal.getLocaleText("acc.field.india.typeofmanufacturer")+"*",//'Type of Manufacturer',
            store:Wtf.manufactureTypeStore,
            name:'manufacturertype',
            id:'manufacturerType'+this.id,
            width:240,
            listWidth:200,
            hiddenName:'manufacturertype',
            valueField:'id',
            displayField:'name',
            hidden: (Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA || !this.isExciseTab || this.isCustomer || Wtf.account.companyAccountPref.registrationType == Wtf.registrationTypeValues.DEALER),
            hideLabel: (Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA || !this.isExciseTab || this.isCustomer || Wtf.account.companyAccountPref.registrationType == Wtf.registrationTypeValues.DEALER),
            mode:'local',
            disabled:this.isViewTemplate,
            forceSelection: true,
            triggerAction: 'all',
            value:Wtf.manufacturerType,
            selectOnFocus:true,
            allowBlank: (Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA || !this.isExciseTab || this.isCustomer || Wtf.account.companyAccountPref.registrationType == Wtf.registrationTypeValues.DEALER)
        })
        
        this.personstore = this.isFromProjectStatusRep ? this.selectedCustomerStore : (this.isCustomer ? Wtf.customerAccRemoteStore : Wtf.vendorAccRemoteStore);
        
        if(this.invoicefromorder && this.isCustomer && this.personstore.getRange().length == 0){
            this.personstore.load({
                params: {
                    selectedCustomerIds: this.invoicefromorderrec.customer 
                }
            });
        }
        
        this.Name.on('select',function(combo, rec) { 
            var params = {};
            if(this.advancePaymentCombo){
                this.advancePaymentCombo.clearValue();
                // On selecting customer loaded advance payments for that customer.
                this.advancePaymentCombo.store.load();
            }
            if (this.isCustomer || this.isFromProjectStatusRep) {
                params.selectedCustomerIds = rec.data.accid;
            } else {
                params.vendorid = rec.data.accid;
            }
                /**
             *  All the logic of on vendor/customer select is moved in onPersonStoreLoad function
                 */
            this.personstore.load({
                params: params,
                scope: this,
                callback: this.onPersonStoreLoad
            });
        }, this);
        
        this.Name.on('beforeselect', function(combo, record, index) {
            this.nameBeforeSelect = combo.getValue();
            return validateSelection(combo, record, index);
        }, this);
        
        if(!(this.DefaultVendor==null || this.DefaultVendor==undefined) && !this.isCustomer){
        	this.Name.value = this.DefaultVendor;
        	this.updateData();
        }

        if(!WtfGlobal.EnableDisable(this.custUPermType,this.custPermType.create))
            this.Name.addNewFn=this.addPerson.createDelegate(this,[false,null,this.businessPerson+"window",this.isCustomer],true);
        this.allAccountRec = new Wtf.data.Record.create([
            {name: 'accid'},
            {name: 'accname'},
            {name: 'groupid'},
            {name: 'groupname'},
            {name: 'level'},
            {name: 'leaf'},
            {name: 'openbalance'},
            {name: 'parentid'},
            {name: 'parentname'}
        ]);
        this.allAccountStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                totalProperty:'count',
                root: "data"
            },this.allAccountRec),
    //        url: Wtf.req.account +'CompanyManager.jsp',
            url:"ACCAccountCMN/getAccountsForCombo.do",
            baseParams:{
                mode:2,
                ignoreCashAccounts:true,
                ignoreBankAccounts:true,
                ignoreGSTAccounts:true,  
               ignorecustomers:true,  
                ignorevendors:true,
                nondeleted:true
            }
        });
        this.creditTo= new Wtf.form.FnComboBox({
            fieldLabel:(this.isCustomer?WtfGlobal.getLocaleText("acc.het.101"):WtfGlobal.getLocaleText("acc.field.DebitAccount*")),
            hiddenName:"creditoraccount",
//            anchor:"50%",
            width : 240,
            store: this.allAccountStore,
            valueField:'accid',
            displayField:'accname',
            hidden:!this.isCustBill,
            hideLabel:!this.isCustBill,
            itemCls : (!this.isCustBill)?"hidden-from-item":"",
            allowBlank:!this.isCustBill||this.isOrder,
            hirarchical:true,
            emptyText:WtfGlobal.getLocaleText("acc.accPref.emptyText"),  //'Select an Account...',
            mode: 'local',
            typeAhead: true,
            forceSelection: true,
            selectOnFocus:true,
            triggerAction:'all',
//            addNewFn: this.addAccount.createDelegate(this,[this.allAccountStore],true),
            scope:this
        });
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.createcoa))
            this.creditTo.addNewFn=this.addAccount.createDelegate(this,[this.allAccountStore],true);
        
        this.perDiscountStore = new Wtf.data.SimpleStore({
            fields:[{name:'name'},{name:'value',type:'boolean'}],
            data:[['Percentage',true],['Flat',false]]
        });
        this.fromPOStore = new Wtf.data.SimpleStore({
            fields:[{name:'name'},{name:'value',type:'boolean'}],
            data:[['Yes',true],['No',false]]
        });
        
        var arrfromLink = new Array();
        
        if(this.isCustomer) {
            if(this.isCustomer && this.isOrder && !this.quotation){// For Sales Order
                arrfromLink.push(['Customer Quotation','2']);
                arrfromLink.push(['Purchase Order','4']);
                if(Wtf.account.companyAccountPref.activateSalesContrcatManagement){
                    arrfromLink.push(['Replacement Number','3']);
                }
                if(Wtf.account.companyAccountPref.activateMRPManagementFlag && this.isMRPSalesOrder == true){
                    arrfromLink.push(['Master Contract','10']);
                }
            }else{
                arrfromLink.push(['Sales Order','0']);
                if(Wtf.account.companyAccountPref.withinvupdate){
                    arrfromLink.push(['Delivery Order','1']);    
                }
                arrfromLink.push(['Customer Quotation', '2']);
                if (Wtf.jobWorkInFlowFlag) {
                    arrfromLink.push(['Job Work Order', '14']); // To select Job work order in Invoice.
                }
            }
        } else {
            if(this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId){
                arrfromLink.push(['Purchase Order','0']);
            }else if(this.isOrder){
                if(this.quotation&&!this.isCustomer){          // IN case of Vendor Quotation
                    arrfromLink.push(['Purchase Requisition','5']);
                    arrfromLink.push(['RFQ','6']);
                 } else {
                arrfromLink.push(['Vendor Quotation','2']);
                arrfromLink.push(['Purchase Requisition','5']);
                arrfromLink.push(['Sales Order','0']);
                if(Wtf.account.companyAccountPref.activateMRPManagementFlag){
                    arrfromLink.push(['Work Order','11']);
                } 
                 }
            } else {
             arrfromLink.push(['Purchase Order','0']);
                if(Wtf.account.companyAccountPref.withinvupdate){
                    arrfromLink.push(['Goods Receipt','1']);    
                }
                arrfromLink.push(['Vendor Quotation','2']);
                if(this.moduleid == Wtf.MRP_Job_Work_IN){
                     arrfromLink.push(['JOB Work Out','12']);
                }
                if(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId &&  Wtf.account.companyAccountPref.activateMRPManagementFlag == true && !this.isJobWorkoutInvoice){
                    arrfromLink.push(['JOB Work IN', '13']);
                }
                if (Wtf.account.companyAccountPref.jobWorkOutFlow) {
                    arrfromLink.push(['Job Work Out Order', '15']); // To select Job work order in Invoice.
                }
            }
        }
        
        
        this.fromlinkStore = new Wtf.data.SimpleStore({
            fields:[{name:'name'},{name:'value'}],
            data:arrfromLink
        });
        
        this.vendorInvoice=new Wtf.form.TextField({
            fieldLabel:WtfGlobal.getLocaleText("acc.inv.invno"),  //'Vendor Invoice Number*',
            name: 'vendorinvoice',
            id:"vendorInvoiceNo"+this.heplmodeid+this.id,
            hidden:this.label=='Vendor Invoice'?false:true,
//            anchor:'50%',
            width : 240,
            maxLength:50,
            scope:this,
            allowBlank:this.checkin
        });      

        
this.sequenceFormatCombobox = new Wtf.form.ComboBox({            
//        labelSeparator:'',
//        labelWidth:0,
        triggerAction:'all',
        mode: 'local',
        id:'sequenceFormatCombobox'+this.heplmodeid+this.id,
        fieldLabel:"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.Sequenceformat.tip")+"'>"+ WtfGlobal.getLocaleText("acc.MissingAutoNumber.SequenceFormat")+"</span>",
        emptyText:'Select Sequence Format',
        valueField:'id',
        displayField:'value',
        store:this.sequenceFormatStore,
        disabled:(this.isEdit&&!this.copyInv&&!this.isPOfromSO&&!this.isSOfromPO&&!(this.quotation&&!this.isCustomer&&this.ispurchaseReq)?true:false),  
        width:240,
        typeAhead: true,
        forceSelection: true,
        name:'sequenceformat',
        hiddenName:'sequenceformat',
        allowBlank: (this.isTemplate || this.isEditTemplate) ? true : false,
        listeners:{
            'select':{
                fn:this.getNextSequenceNumber,
                scope:this
            }
        }
            
    });
    this.sequenceFormatCombobox.on('change',this.sequenceFormatChanged,this);   //SDP-13923 : Call the 'sequenceFormatChanged' function on Sequence Format change.
    
    this.SouthForm=new Wtf.account.PayMethodPanel({
        region : "center",
        hideMode:'display',
        baseCls:'bodyFormat',
        isReceipt:(this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid ==Wtf.Acc_Cash_Sales_ModuleId )? true:false,
        isCash:true,
        disabledClass:"newtripcmbss",
        autoHeight:true,
        disabled:this.readOnly,
        hidden:true,
        style:'margin:10px 10px;',
        id:this.id+'southform',
        border:false
    });
    
   this.pmtRec = new Wtf.data.Record.create([
        {name: 'methodid'},
        {name: 'methodname'},
        {name: 'accountid'},
        {name: 'acccurrency'},
        {name: 'accountname'},
        {name: 'isIBGBankAccount', type:'boolean'},
        {name: 'isdefault'},
        {name: 'detailtype',type:'int'},
        {name: 'acccustminbudget'},
        {name: 'autopopulate'},
    ]);
    this.pmtStore = new Wtf.data.Store({
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        },this.pmtRec),
        url : "ACCPaymentMethods/getPaymentMethods.do",
        baseParams:{
                        populateincpcs:this.cash?true:false,
                        mode:!this.cash?51:""
        }
    });       
    this.pmtMethod= new Wtf.form.ComboBox({
        fieldLabel:this.cash ? WtfGlobal.getLocaleText("acc.mp.payMethod"):WtfGlobal.getLocaleText("acc.field.PaymentMethod"),//payment method:
        name:"pmtmethod",
        store:this.pmtStore,
        id:'pmtmethod'+this.heplmodeid+this.id,
        valueField:'methodid',
        displayField:'methodname',
        allowBlank:(this.cash)?false:true,
        hidden:(this.cash ||this.mapPmtMethodInCredit) ? false:true,
        hideLabel:(this.cash ||this.mapPmtMethodInCredit) ? false:true,
        emptyText:WtfGlobal.getLocaleText("acc.mp.selpayacc"),
        hiddenName:"pmtmethod",
        width:240,
        mode: 'local',
        triggerAction: 'all',
        typeAhead: true,
        forceSelection: true//,
    });
    if(this.cash ||this.mapPmtMethodInCredit){
      this.pmtStore.load();       
    }   
        if (this.cash){
        this.pmtMethod.on('select', this.ShowCheckDetails.createDelegate(this), this);
        }
    this.pmtStore.on('load',this.setPMData,this);
    
    this.pmtMethodAcc=new Wtf.form.TextField({
        name:"pmtmethodacc",
        disabled : true,
        hidden:!this.cash,
        hideLabel:!this.cash,
        id:"pmtmethodacc"+this.heplmodeid+this.id,
        fieldLabel:WtfGlobal.getLocaleText("acc.field.PaymentAccount"),
        width : 240
    });
        var maskRe="";
        if(Wtf.IndianGST && (this.moduleid == Wtf.Acc_Invoice_ModuleId||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId)){ // combination of india country and GST check
            maskRe=/[0-9.]/;
        }
            
        this.Number=new Wtf.form.TextField({
            fieldLabel:(this.moduleid ==Wtf.Acc_Security_Gate_Entry_ModuleId?WtfGlobal.getLocaleText("acc.securitygate.title"):this.isPOfromSO?WtfGlobal.getLocaleText("acc.accPref.autoPO"):(this.isSOfromPO)?WtfGlobal.getLocaleText("acc.accPref.autoSO"):(this.isEdit?this.label:this.label)) + " " + ((this.isTemplate)?'Number':WtfGlobal.getLocaleText("acc.common.number")),  //,  //this.label+' Number*',
            name: 'invoiceNo',
            disabled:(this.isEdit&&!this.copyInv&&!this.isPOfromSO&&!this.isSOfromPO?true:false),
            id:"invoiceNo"+this.heplmodeid+this.id,
//            anchor:'50%',
            width : 240,
            maxLength:50,
            scope:this,
            allowBlank:this.checkin || ((this.isTemplate || this.isEditTemplate) &&!this.createTransactionAlso),//this.isEditTemplate - make allow blank true in edit case
            emptyText: WtfGlobal.getLocaleText("acc.field.Pleaseenternumber"),
            maskRe:maskRe
        });
//        this.PORefNo=new Wtf.form.TextField({
//            fieldLabel:WtfGlobal.getLocaleText("acc.invoice.POrefNo"),  //PO Reference Number',
//            name: 'porefno',
//            id:"porefno"+this.heplmodeid+this.id,
//            hidden:this.isOrder||!this.isCustomer||this.quotation,
//            hideLabel:this.isOrder||!this.isCustomer||this.quotation,
//            itemCls : (this.isOrder||!this.isCustomer)?"hidden-from-item":"",
//            width : 240,
//            maxLength:45,
//            scope:this
//        }); /* Commented above piece of code For SDP-600
        this.CustomerPORefNo=new Wtf.form.TextField({
            fieldLabel:(this.moduleid == Wtf.Acc_Sales_Order_ModuleId )?WtfGlobal.getLocaleText("acc.invoice.CustomerPOrefNo"):WtfGlobal.getLocaleText("acc.invoice.CustomerPOrefNo"),  //Customer PO Reference No.',
            name:  (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid ==Wtf.Acc_Cash_Sales_ModuleId )? 'porefno': 'customerporefno',
            id: (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid ==Wtf.Acc_Cash_Sales_ModuleId )? ("porefno"+this.heplmodeid+this.id) : ("customerporefno"+this.heplmodeid+this.id),
            hidden: !(this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId ||this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid ==Wtf.Acc_Cash_Sales_ModuleId ),
            hideLabel:!(this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId || this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid ==Wtf.Acc_Cash_Sales_ModuleId),
            width : 240,//    ERP-9886
            labelWidth:160,
            maxLength:2048,
            scope:this
            //allowBlank:(this.moduleid == Wtf.Acc_Sales_Order_ModuleId )?false:true
        });
        this.SupplierInvoiceNo = new Wtf.form.TextField({
            fieldLabel: "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.invoice.SupplierInvoiceNumber") +"'>"+ WtfGlobal.getLocaleText("acc.invoice.SupplierInvoiceNo") +"</span>",//Supplier Invoice No - SDP-4510
            name: 'supplierinvoiceno',
            id:"supplierinvoiceno"+this.heplmodeid+this.id,
            hidden: !(this.moduleid === Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid === Wtf.Acc_Purchase_Order_ModuleId || this.moduleid === Wtf.Acc_Vendor_Quotation_ModuleId),
            hideLabel: !(this.moduleid === Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid === Wtf.Acc_Purchase_Order_ModuleId || this.moduleid === Wtf.Acc_Vendor_Quotation_ModuleId),
            disabled: this.readOnly,
            width: 240,
            labelWidth: 160,
            maxLength: 50,
            scope: this,
            qtip:(WtfGlobal.isIndiaCountryAndGSTApplied())?WtfGlobal.getLocaleText("acc.gst.SINErrorMsg"):"",
            listeners: {
                render: function(c){
                    Wtf.QuickTips.register({
                        target: c.getEl(),
                        text: c.qtip
                    });
                }    
            }
        });
        if ((this.moduleid === Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid === Wtf.Acc_Purchase_Order_ModuleId || this.moduleid === Wtf.Acc_Vendor_Quotation_ModuleId) && WtfGlobal.isIndiaCountryAndGSTApplied()) {
            this.SupplierInvoiceNo.on('change', this.validateSIN, this);
        }
        this.importExportDeclarationNo = new Wtf.form.TextField({
            fieldLabel: this.isCustomer ? "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.invoice.exportDeclarationNumber") + "'>" + WtfGlobal.getLocaleText("acc.invoice.exportDeclarationNumber") + "</span>" : "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.invoice.importDeclarationNumber") + "'>" + WtfGlobal.getLocaleText("acc.invoice.importDeclarationNumber") + "</span>",
            name: 'importexportdeclarationno',
            id: "importexportdeclarationno" + this.heplmodeid + this.id,
            hidden: !((this.moduleid === Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid === Wtf.Acc_Invoice_ModuleId) && Wtf.account.companyAccountPref.countryid == Wtf.Country.MALAYSIA),
            hideLabel: !((this.moduleid === Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid === Wtf.Acc_Invoice_ModuleId) && Wtf.account.companyAccountPref.countryid == Wtf.Country.MALAYSIA),
            disabled: this.readOnly,
            width: 240,
            labelWidth: 160,
            maxLength: 50,
            scope: this
        });
        this.Memo=new Wtf.form.TextArea({
            fieldLabel:Wtf.account.companyAccountPref.descriptionType,  //'Memo/Note',
            name: 'memo',
            id:"memo"+this.heplmodeid+this.id,
            height:40,
            // anchor:'94%',
            width : 240,
            //allowBlank:false
            readOnly:this.isViewTemplate,
            maxLength:2048,
            qtip:(this.record==undefined)?' ':this.record.data.memo,
            listeners: {
                render: function(c){
                    Wtf.QuickTips.register({
                        target: c.getEl(),
                        text: c.qtip
                    });
                }
            }
        });
        this.Discount=new Wtf.form.NumberField({
            allowNegative:false,
            hidden:true,
            defaultValue:0,
            hideLabel:true,
            allowBlank:true,
            maxLength: 10,
            width:100,
            fieldLabel:WtfGlobal.getLocaleText("acc.invoiceList.discount"),  //'Discount',
            name:'discount',
            id:"discount"+this.heplmodeid+this.id,
            listeners:{
                'change':{
                    fn:this.updateSubtotal,
                    scope:this
                }
            }
        });
        
        /*For SATS*/
        this.createSATSFields();
        /**********/
        
        /**
         * Creating JOB Out Fields 
         */
        if(this.isMRPJOBWORKOUT != undefined && this.isMRPJOBWORKOUT == true){
            this.createJOBWORKOUTFields();
        }
        
        this.perDiscount= new Wtf.form.ComboBox({
            labelSeparator:'',
            labelWidth:0,
            triggerAction:'all',
            mode: 'local',
            valueField:'value',
            displayField:'name',
            id: "perdiscount"+this.heplmodeid+this.id,
            store:this.perDiscountStore,
            hidden:true,
            hideLabel:true,
            allowBlank:this.isOrder,
            value:false,
            width:100,
            typeAhead: true,
            forceSelection: true,
            name:'perdiscount',
            hiddenName:'perdiscount',
            listeners:{
                'select':{
                    fn:this.updateSubtotal,
                    scope:this
                }
            }
        });
         this.sequenceFormatStoreRecDo = new Wtf.data.Record.create([
        {
            name: 'id'
        },

        {
            name: 'value'
        },
        {
            name: 'oldflag'
        }
        ]);
  this.sequenceFormatStoreDo = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                totalProperty:'count',
                root: "data"
            },this.sequenceFormatStoreRecDo),
            url : "ACCCompanyPref/getSequenceFormatStore.do",
            baseParams:{
                mode:this.isCustomer ?"autodo":"autogro",
                isEdit:this.isEdit
            }
        });
          this.sequenceFormatStoreDo.on('load',function(){
             if(this.sequenceFormatStoreDo.getCount()>0){
                var count=this.sequenceFormatStoreDo.getCount();
                for(var i=0;i<count;i++){
                   var seqRec=this.sequenceFormatStoreDo.getAt(i)
                    if(seqRec.json.isdefaultformat=="Yes"){
                        this.sequenceFormatComboboxDo.setValue(seqRec.data.id) 
                        break;
                    }
                }
                   if(this.sequenceFormatComboboxDo.getValue()!=""){// If any sequence format assigned to sequenceFormatCombobox then It will go to fetch next sequence number
                this.getNextSequenceNumberDo(this.sequenceFormatComboboxDo);
                } else{// other wise document number will remain hidden
                    this.no.setValue("");  
                    WtfGlobal.hideFormElement(this.no); 
             }
             }
         },this);
         this.sequenceFormatStoreDo.on('load',this.setNextNumberDO,this);
      if((this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId  ))//only load when customer Invoice
          this.sequenceFormatStoreDo.load();
         
       this.sequenceFormatComboboxDo = new Wtf.form.ComboBox({            
        triggerAction:'all',
        mode: 'local',
        fieldLabel:"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.Sequenceformat.tip")+"'>"+ WtfGlobal.getLocaleText("acc.MissingAutoNumber.SequenceFormat")+"</span>",//WtfGlobal.getLocaleText("acc.MissingAutoNumber.SequenceFormat"),
        valueField:'id',
        displayField:'value',
        store:this.sequenceFormatStoreDo,
        width:240,
        maxLength:2048,
        typeAhead: true,
        forceSelection: true,
        name:'sequenceformatDo',
        id:"sequenceformatDo"+this.heplmodeid+this.id,
        hiddenName:'sequenceformatDo',
        hideLabel:!(this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId  ),
        hidden: !(this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId  )
    });
    
    this.sequenceFormatComboboxDo.on('select',function(){
        this.getNextSequenceNumberDo(this.sequenceFormatComboboxDo,'','',true);  //true for idetify call is from select event
    },this);
    
     this.no=new Wtf.form.TextField({
            fieldLabel:this.isCustomer?"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.field.DeliveryOrderNumber*.tt") +"'>"+ WtfGlobal.getLocaleText("acc.field.DeliveryOrderNumber*")  +"</span>":"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.field.GoodsReceiptNumber*.tt") +"'>"+ WtfGlobal.getLocaleText("acc.field.GoodsReceiptNumber*") +"</span>",//this.isCustomer ?WtfGlobal.getLocaleText("acc.field.DeliveryOrderNumber*") :WtfGlobal.getLocaleText("acc.field.GoodsReceiptNumber*") ,
            name:this.isCustomer ? 'numberDo' : 'numberGR',
            scope:this,
            maxLength:45,
            width : 240,
            hiddenName:this.isCustomer ?'numberDo':'numberGR',
            hideLabel:!(this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId  ),
            hidden: !(this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId  ),
            id:"deliveryONo"+this.heplmodeid+this.id,            
//            hideLabel:true,
//            hidden:true,
     //       anchor:'90%',
            allowBlank:false
        });
         this.PORec = Wtf.data.Record.create ([
            {name:'billid'},
            {name:'journalentryid'},
            {name:'entryno'},
            {name:'billto'},
            {name:'discount'},
            {name:'shipto'},
            {name:'mode'},
            {name:'billno'},
            {name:'date', type:'date'},
            {name:'duedate', type:'date'},
            {name:'shipdate', type:'date'},
            {name:'personname'},
            {name:'creditoraccount'},
            {name:'personid'},
            {name:'shipping'},
            {name:'othercharges'},
            {name:'taxid'},
            {name:'productid'},
            {name:'discounttotal'},
            {name:'isAppliedForTax'},// in Malasian company if DO is applied for tax
            {name:'discountispertotal',type:'boolean'},
            {name:'currencyid'},
            {name:'currencysymbol'},
            {name:'amount'},
            {name:'amountinbase'},
            {name:'amountdue'},
            {name:'costcenterid'},
            {name:'lasteditedby'},
            {name:'costcenterName'},
            {name:'memo'},
            {name:'shipvia'},
            {name:'fob'},
            {name:'includeprotax',type:'boolean'},
            {name:'salesPerson'},
            {name:'salespersonname'},
            {name:'islockQuantityflag'},
            {name:'agent'},
            {name:'agentname'},
            {name:'termdetails'},
            {name:'LineTermdetails'},//Line Level Term Details
            {name:'shiplengthval'},
            {name:'gstIncluded'},
            {name:'quotationtype'},
            {name:'contract'},
            {name:'termid'},
            {name:'externalcurrencyrate'},//    ERP-9886
            {name:'customerporefno'},
            {name:'isexpenseinv'},
            {name: 'billingAddressType'},
            {name: 'billingAddress'},
            {name: 'billingCountry'},
            {name: 'billingState'},
            {name: 'billingPostal'},
            {name: 'billingEmail'},
            {name: 'billingFax'},
            {name: 'billingMobile'},
            {name: 'billingPhone'},
            {name: 'billingContactPerson'},
            {name: 'billingRecipientName'},
            {name: 'billingContactPersonNumber'},
            {name: 'billingContactPersonDesignation'},
            {name: 'billingWebsite'},
            {name: 'billingCounty'},
            {name: 'billingCity'},
            {name: 'shippingAddressType'},
            {name: 'shippingAddress'},
            {name: 'shippingCountry'},
            {name: 'shippingState'},
            {name: 'shippingCounty'},
            {name: 'shippingCity'},
            {name: 'shippingEmail'},
            {name: 'shippingFax'},
            {name: 'shippingMobile'},
            {name: 'shippingPhone'},
            {name: 'shippingPostal'},
            {name: 'shippingContactPersonNumber'},
            {name: 'shippingContactPersonDesignation'},
            {name: 'shippingWebsite'},
            {name: 'shippingRecipientName'},
            {name: 'shippingContactPerson'},
            {name: 'shippingRoute'},
            {name: 'vendcustShippingAddress'},
            {name: 'vendcustShippingCountry'},
            {name: 'vendcustShippingState'},
            {name: 'vendcustShippingCounty'},
            {name: 'vendcustShippingCity'},
            {name: 'vendcustShippingEmail'},
            {name: 'vendcustShippingFax'},
            {name: 'vendcustShippingMobile'},
            {name: 'vendcustShippingPhone'},
            {name: 'vendcustShippingPostal'},
            {name: 'vendcustShippingContactPersonNumber'},
            {name: 'vendcustShippingContactPersonDesignation'},
            {name: 'vendcustShippingWebsite'},
            {name: 'vendcustShippingContactPerson'},
            {name: 'vendcustShippingRecipientName'},
            {name: 'populateproducttemplate'},
            {name: 'populatecustomertemplate'},
            {name: 'populateautodointemp'},
            {name: 'vendcustShippingAddressType'},
            {name: 'gtaapplicable'},
            {name: 'gstapplicable'},
            {name:'supplierinvoiceno'},//SDP-4510
            {name: 'importexportdeclarationno'},//ERM-470
            {name:'landedInvoiceID'},
            {name:'landedInvoiceNumber'},
            {name: 'customerShippingAddressType'},
            {name: 'customerShippingAddress'},
            {name: 'customerShippingCountry'},
            {name: 'customerShippingState'},
            {name: 'customerShippingCounty'},
            {name: 'customerShippingCity'},
            {name: 'customerShippingEmail'},
            {name: 'customerShippingFax'},
            {name: 'customerShippingMobile'},
            {name: 'customerShippingPhone'},
            {name: 'customerShippingPostal'},
            {name: 'customerShippingContactPersonNumber'},
            {name: 'customerShippingContactPersonDesignation'},
            {name: 'customerShippingWebsite'},
            {name: 'customerShippingRecipientName'},
            {name: 'customerShippingContactPerson'},
            {name: 'customerShippingRoute'},
            {name: 'isapplytaxtoterms'},
            {name: 'isDisabledPOforSO'},           
            {name: 'isRoundingAdjustmentApplied'},
            {name: 'dropshipbillingAddressType'},
            {name: 'dropshipbillingAddress'},
            {name: 'dropshipbillingCountry'},
            {name: 'dropshipbillingState'},
            {name: 'dropshipbillingPostal'},
            {name: 'dropshipbillingEmail'},
            {name: 'dropshipbillingFax'},
            {name: 'dropshipbillingMobile'},
            {name: 'dropshipbillingPhone'},
            {name: 'dropshipbillingContactPerson'},
            {name: 'dropshipbillingRecipientName'},
            {name: 'dropshipbillingContactPersonNumber'},
            {name: 'dropshipbillingContactPersonDesignation'},
            {name: 'dropshipbillingWebsite'},
            {name: 'dropshipbillingCounty'},
            {name: 'dropshipbillingCity'},
            /**
             * If Show Vendor Address in purchase side document and India country 
             * then this Fields used to store Vendor Billing Address
             */
            {name: 'vendorbillingAddressTypeForINDIA'},
            {name: 'vendorbillingAddressForINDIA'},
            {name: 'vendorbillingCountryForINDIA'},
            {name: 'vendorbillingStateForINDIA'},
            {name: 'vendorbillingPostalForINDIA'},
            {name: 'vendorbillingEmailForINDIA'},
            {name: 'vendorbillingFaxForINDIA'},
            {name: 'vendorbillingMobileForINDIA'},
            {name: 'vendorbillingPhoneForINDIA'},
            {name: 'vendorbillingContactPersonForINDIA'},
            {name: 'vendorbillingRecipientNameForINDIA'},
            {name: 'vendorbillingContactPersonNumberForINDIA'},
            {name: 'vendorbillingContactPersonDesignationForINDIA'},
            {name: 'vendorbillingWebsiteForINDIA'},
            {name: 'vendorbillingCountyForINDIA'},
            {name: 'vendorbillingCityForINDIA'},
            {name:'CustomerVendorTypeId'},
            {name:'GSTINRegistrationTypeId'},
            {name:'isMerchantExporter'},
            {name:'gstin'},
            {name:'gstdochistoryid'}
            
        ]);
        this.POStoreUrl = "";
        var closeFlag = true;
        var isForSGELink=false;
        if(this.businessPerson=="Customer"){
            //mode:(this.isCustBill?52:42)
            if(this.quotation){     
                this.POStoreUrl = "ACCPurchaseOrderCMN/getQuotations.do"
            }else if(this.isOrder) {
                     this.POStoreUrl = "ACCSalesOrderCMN/getQuotations.do"
                if(this.isSOfromPO){
                    closeFlag = false;
                    this.POStoreUrl = this.isCustBill?"ACCPurchaseOrderCMN/getBillingPurchaseOrders.do":"ACCPurchaseOrderCMN/getPurchaseOrders.do";
                }
            } else {
                
               /*
                * isCreateInvFromJob is true if sales invoice is creating from Aged order work report.
                */
            if(this.isCreateInvFromJob){
                this.POStoreUrl ="ACCPurchaseOrderCMN/getPurchaseOrders.do";
            }else{
                this.POStoreUrl = this.isCustBill?"ACCSalesOrderCMN/getBillingSalesOrders.do":"ACCSalesOrderCMN/getSalesOrders.do";
            }
        }
            
            
        }else if(this.businessPerson=="Vendor"){
            if(this.isOrder) {
                if(this.isPOfromSO){
                    closeFlag = false;
                }
                if(this.quotation&&!this.isCustomer){
                    this.POStoreUrl="ACCPurchaseOrderCMN/getRequisitions.do";
                } else if(this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId){
                    this.POStoreUrl = "ACCPurchaseOrderCMN/getPurchaseOrders.do";
                    isForSGELink=true;// flag used while Linking PO in SGE
                } else {
                    this.POStoreUrl = this.isCustBill?"ACCSalesOrderCMN/getBillingSalesOrders.do":"ACCSalesOrderCMN/getSalesOrders.do";
                }
            } else {
                this.POStoreUrl = this.isCustBill?"ACCPurchaseOrderCMN/getBillingPurchaseOrders.do":"ACCPurchaseOrderCMN/getPurchaseOrders.do";
            }
        }
        this.POStore = new Wtf.data.Store({
            url:this.POStoreUrl,
    //        url: Wtf.req.account+this.businessPerson+'Manager.jsp',
            baseParams:{
                mode:(this.isCustBill?52:42),
                closeflag:closeFlag,
                requestModuleid:this.isCreateInvFromJob?Wtf.Acc_Vendor_Invoice_ModuleId:this.moduleid,
                isjobworkwitoutgrn:this.isCreateInvFromJob,
                isForSGELink:isForSGELink, // flag used while Linking PO in SGE
                isGenerateOrderFromOrder: (this.GENERATE_PO || this.GENERATE_SO) ? true:false,//Sending true when generating PO from SO or vice versa
                linkTransactionId : (this.GENERATE_PO || this.GENERATE_SO) ? this.record.data.billid : ""
            },
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:'count'
            },this.PORec)
        });
        this.POStore.on('beforeload',function(){
                WtfGlobal.setAjaxTimeOut();
        }, this);
        this.POStore.on('load',function(){
                WtfGlobal.resetAjaxTimeOut();
        },this);
        this.POStore.on('loadexception',function(){
                WtfGlobal.resetAjaxTimeOut();
        },this);
        var DimensionCustomFielsArray = GlobalDimensionCustomFieldModel[this.moduleid];
        if( DimensionCustomFielsArray){
           for(var cnt = 0;cnt < DimensionCustomFielsArray.length;cnt++){
               if(DimensionCustomFielsArray[cnt] != undefined){
                    var fieldname = DimensionCustomFielsArray[cnt].fieldname;
                    var newField = new Wtf.data.ExtField({
                        name:fieldname.replace(".",""),
        //                   sortDir:'ASC',
                        type:DimensionCustomFielsArray[cnt].fieldtype == 3 ?  'date' : (DimensionCustomFielsArray[cnt].fieldtype == 2?'float':'auto'),
                        dateFormat:DimensionCustomFielsArray[cnt].fieldtype == 3 ? 'time' : undefined,
                        defaultValue:DimensionCustomFielsArray[cnt].isessential == 1 ? DimensionCustomFielsArray[cnt].fieldData:""
                    });
                    this.POStore.fields.items.push(newField);
                    this.POStore.fields.map[fieldname]=newField;
                    this.POStore.fields.keys.push(fieldname);
               }
               
           }
           this.POStore.reader = new Wtf.data.KwlJsonReader(this.POStore.reader.meta, this.POStore.fields.items);
       }
       //Link Combo Field(Yes/No)
        this.fromPO= new Wtf.form.ComboBox({
            triggerAction:'all',
            hideLabel:this.hideShowFromPOCombo(),
            hidden:this.hideShowFromPOCombo(),
            mode: 'local',
            valueField:'value',
            displayField:'name',
            disabled:!this.readOnly &&(this.isEdit || this.copyInv)?false:true, 
            store:this.fromPOStore,
            id: "linkToOrder"+this.heplmodeid +this.id,
            fieldLabel:((!this.isCustBill && !this.isOrder && !this.cash)?WtfGlobal.getLocaleText("acc.field.Link"):(this.isOrder && this.isCustomer)? (this.isSOfromPO)?WtfGlobal.getLocaleText("acc.invoice.linkToPO"):(this.quotation ? WtfGlobal.getLocaleText("acc.field.LinktoVendorQuotation") : WtfGlobal.getLocaleText("acc.field.Link")) :(this.isOrder && !this.isCustomer)?WtfGlobal.getLocaleText("acc.field.Link"): (this.isCustomer?WtfGlobal.getLocaleText("acc.invoice.linkToSO"):WtfGlobal.getLocaleText("acc.invoice.linkToPO"))) ,  //"Link to "+(this.isCustomer?"Sales":"Purchase")+" Order",
            allowBlank:this.isOrder,
            value:false,
            width:50,
            typeAhead: true,
            forceSelection: true,
            name:'prdiscount',
            hiddenName:'prdiscount',
            listeners:{
                'select':{
                    fn:function(combo, record, index){
                        if(this.poBeforeSelect == true && combo.getValue()!=this.poBeforeSelect && !Wtf.productDetailsGridIsEmpty(this.Grid)){
                            
                            Wtf.MessageBox.confirm("Warning",WtfGlobal.getLocaleText("acc.wm.beforechange"), function(btn){
                                if(btn == 'yes') {  
                                    this.enablePO(combo, record, index);
                                }else if(btn == 'no') {
                                    combo.setValue(this.poBeforeSelect);
                                    return;           
                                }
                            },this);
                        }else{
                            this.enablePO(combo, record, index);
                        }
                    },
                    scope:this
                },
                'beforeselect':{
                    fn:function(combo, record, index){
                        this.poBeforeSelect = combo.getValue();
                    },
                    scope:this 
                }
            }
        });
       
        
     this.usersRec = new Wtf.data.Record.create([
        {name: 'userid'},
        {name: 'username'},
        {name: 'fname'},
        {name: 'lname'},
        {name: 'image'},
        {name: 'emailid'},
        {name: 'lastlogin',type: 'date'},
        {name: 'aboutuser'},
        {name: 'address'},
        {name: 'contactno'},
        {name: 'rolename'},
        {name: 'roleid'}
    ]);

    this.userds = new Wtf.data.Store({
        reader: new Wtf.data.KwlJsonReader({
            totalProperty: 'count',
            root: "data"
        },this.usersRec),
        url : "ProfileHandler/getAllUserDetails.do",
        baseParams:{
                mode:11
        }
    });
    
    
//ERP-41011:Setting remote store to Sales Person 
        this.users =CommonERPComponent.createSalesPersonAgentComboBox(240,220,30,this,SATSCOMPANY_ID==companyid?true:false,SATSCOMPANY_ID==companyid?true:false);//false for invoicelist
        if(this.isCustomer){
            this.users.store.on('beforeload',this.onBeforesalesPersonLoad,this);
        }else{
            this.users.store.on('beforeload',this.onBeforeAgentLoad,this);
        }
       
        /*
         * ERP-29076 - Customer Bank Account type in invoice
         */
        this.customerBankAccountTypeStore=new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },Wtf.salesPersonRec),
            url:"ACCCustomerCMN/getCustomerBankAccountTypes.do",
            baseParams:{
                customer:this.Name.getValue()
            }
        });
        this.customerBankAccountTypeStore.on('beforeload',function(){
            var currentBaseParams = this.customerBankAccountTypeStore.baseParams;
            currentBaseParams.customer=this.Name.getValue();
        },this);
        
        this.customerBankAccountType = new Wtf.form.ExtFnComboBox({
            triggerAction:'all',
            mode:'local',
            valueField:'id',
            displayField:'name',
            extraFields:[],
            id:"customerbankaccounttype"+this.heplmodeid+this.id,
            store:this.customerBankAccountTypeStore,
            hidden:!(this.moduleid == Wtf.Acc_Invoice_ModuleId && Wtf.account.companyAccountPref.activateIBGCollection),
            hideLabel:!(this.moduleid == Wtf.Acc_Invoice_ModuleId && Wtf.account.companyAccountPref.activateIBGCollection),
            disabled:!(this.moduleid == Wtf.Acc_Invoice_ModuleId && Wtf.account.companyAccountPref.activateIBGCollection),
            width : 240,
            forceSelection: true,
            fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.61"),
            emptyText: WtfGlobal.getLocaleText("acc.invoice.selectCustomerBankAccountType"),
            name:'customerbankaccounttype',
            hiddenName:'customerbankaccounttype',
            activated:this.isCustomer ? true : false
        });
        
        this.customerBankAccountType.on('beforeselect', function (combo, record, index) {
                return validateSelection(combo, record, index);
        }, this);
        
        if(this.moduleid == Wtf.Acc_Invoice_ModuleId && Wtf.account.companyAccountPref.activateIBGCollection && (this.isEdit || this.copyInv)){
            this.customerBankAccountTypeStore.load();
        }
        this.users.on('beforeselect', function (combo, record, index) {
            if (this.isCustomer) {
                return validateSelection(combo, record, index);
            } else {
                return true;
            }
        }, this);
        
          this.lockQuantity= new Wtf.form.Checkbox({
            name:'lockQuantity',
            id:'lockQuantitySO'+this.heplmodeid+this.id,
            hiddeName:'lockQuan',
            fieldLabel:WtfGlobal.getLocaleText("acc.productList.gridLockQuantity"),
            checked:false,
            hideLabel:(!this.isCustomer || (this.isCustomer && (!this.isOrder || this.quotation))),
            hidden:( !this.isCustomer || (this.isCustomer && (!this.isOrder || this.quotation))),                        
            cls : 'custcheckbox',
            width: 10
        }); 
        
        /* Checkbox in Quotation Entry Form*/
        this.reserveStock= new Wtf.form.Checkbox({
            name:'reserveStock',
            id:'reserveStock'+this.heplmodeid+this.id,
            hiddeName:'lockQuan',
            fieldLabel:WtfGlobal.getLocaleText("acc.field.ReserveStock"),  
            checked:false,
            hideLabel:!(this.isCustomer && this.quotation),
            hidden:!(this.isCustomer && this.quotation),                        
            cls : 'custcheckbox',
            width: 10
        });
        
        this.isMaintenanceOrderCheckBox= new Wtf.form.Checkbox({
            name:'isMaintenanceOrder',
            id:'isMaintenanceOrder'+this.heplmodeid+this.id,
            hiddeName:'isMaintenanceOrder',
            fieldLabel:WtfGlobal.getLocaleText("acc.so.ismaintenance"),  
            checked:false,
            hideLabel:!(this.isOrder && this.isCustomer && !this.quotation && (Wtf.account.companyAccountPref.leaseManagementFlag || Wtf.account.companyAccountPref.activateSalesContrcatManagement)),// hide if transaction is not a sales order
            hidden:!(this.isOrder && this.isCustomer && !this.quotation && (Wtf.account.companyAccountPref.leaseManagementFlag || Wtf.account.companyAccountPref.activateSalesContrcatManagement)),// hide if transaction is not a sales order
            cls : 'custcheckbox',
            width: 10,
            listeners:{
                'check':{
                    fn:function(obj,isChecked){
                        if(isChecked){
                            
                            // Replacement sales Order can not be create
                            
                            if(this.fromLinkCombo.getValue()==3 && this.fromPO && this.fromPO.getValue()){// if Replacement number is selected then it will be rwset
                                this.fromPO.setValue(false);
                                
                                this.fromLinkCombo.allowBlank=true;
                                
                                this.fromLinkCombo.setValue('');
                                
                                this.fromLinkCombo.disable();
                                
                                this.PO.allowBlank=true;
                                
                                this.PO.setValue('');
                                
                                this.PO.disable();
                                
                                this.Grid.getStore().removeAll();
                                
                                this.Grid.addBlankRow();
                            }
                            
                            if(this.maintenanceNumberCombo){
                                this.maintenanceNumberComboStore.load();
                                WtfGlobal.showFormElement(this.maintenanceNumberCombo);
//                                this.maintenanceNumberCombo.enable();
                            }
                        }else{
                            if(this.maintenanceNumberCombo){
                                this.maintenanceNumberCombo.setValue("");
                                WtfGlobal.hideFormElement(this.maintenanceNumberCombo);
//                                this.maintenanceNumberCombo.disable();
                            }
                        }
                    },
                    scope:this
                }
            }
        });

        this.maintenanceNumberComboRecord = new Wtf.data.Record.create([
            {
                name: 'billid'
            },
            {
                name: 'billno'
            }
        ]);

        this.maintenanceNumberComboStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },this.maintenanceNumberComboRecord),
            url : "ACCSalesOrderCMN/getMaintenanceRequests.do",
            baseParams:{
//                moduleId:this.getModuleId()
            },scope :this
        });
        
        this.maintenanceNumberComboStore.on('beforeload',function(s,o){
            if(!o.params)o.params={};
            var currentBaseParams = this.maintenanceNumberComboStore.baseParams;
            currentBaseParams.id=this.Name.getValue();
            var billid = (this.record && this.record.json && this.record.json.billid)?this.record.json.billid:(this.record && this.record.data && this.record.data.billid)?this.record.data.billid:"";
            currentBaseParams.soId=this.isEdit && !this.copyInv ?billid:""; // SO Id is sent to java side if this is edit case
            this.maintenanceNumberComboStore.baseParams=currentBaseParams;        
        },this); 
        
        if(WtfGlobal.getModuleId(this)==20){// only in case of sales order
            this.maintenanceNumberComboStore.on('load',function(){
            var leaseOrMaintenanceSo = (this.record && this.record.json && this.record.json.leaseOrMaintenanceSo)?this.record.json.leaseOrMaintenanceSo:(this.record && this.record.data && this.record.data.leaseOrMaintenanceSo)?this.record.data.leaseOrMaintenanceSo:"";
            if(WtfGlobal.getModuleId(this)==20 && this.isEdit && !this.copyInv && (leaseOrMaintenanceSo == 2)){ // if SO to be edited has maintenance number , set that no. in combobox
                var maintenanceId = (this.record && this.record.json && this.record.json.maintenanceId)?this.record.json.maintenanceId:(this.record && this.record.data && this.record.data.maintenanceId)?this.record.data.maintenanceId:"";
                this.maintenanceNumberCombo.setValue(maintenanceId);
            }
            
        },this);
           this.maintenanceNumberComboStore.load();          
}    
        this.maintenanceNumberCombo= new Wtf.form.FnComboBox({
            fieldLabel:WtfGlobal.getLocaleText("acc.maintenance.number"),
            id:"maintenanceNumberCombo"+this.heplmodeid+this.id,
            store: this.maintenanceNumberComboStore,
            valueField:'billid',
            displayField:'billno',
            disabled:this.isViewTemplate ||this.readOnly,
            hirarchical:true,
            emptyText:WtfGlobal.getLocaleText("acc.maintenance.number.select"),
            mode: 'local',
            typeAhead: true,
            //            hideLabel:!(this.isOrder && this.isCustomer && !this.quotation),// hide if transaction is not a sales order
            //            hidden:!(this.isOrder && this.isCustomer && !this.quotation),// hide if transaction is not a sales order
            forceSelection: true,
            selectOnFocus:true,
            addNoneRecord: true,
            width : 240,
            triggerAction:'all',
            scope:this,
            listeners:{
                'select':{
                    fn:function(){
                        if(this.maintenanceNumberCombo.getValue() != ""){
                            this.Grid.productComboStore.load({
                                params:{
                                    type:Wtf.producttype.service
                                }
                            });
                        }else{
                            this.Grid.productComboStore.load();
                        }
                    },
                    scope:this            
                }
            }
        });
        
//        this.isMaintenanceOrderCheckBox.on(' check', function(obj,ischecked){
//            alert('sssgg');
//        },this);


          this.users.addNewFn=this.addSalesPerson.createDelegate(this);
        
        this.copyAddress= new Wtf.form.Checkbox({
            name:'copyadress',
            fieldLabel:WtfGlobal.getLocaleText("acc.cust.sameasbillingadd"),  //'Copy Address',
            checked:false,
            hideLabel:(this.quotation || !this.isCustomer || this.isOrder),
            hidden:(this.quotation || !this.isCustomer || this.isOrder),
            cls : 'custcheckbox',
            width: 10
        });
        
        this.explodeLinkAP= new Wtf.form.Checkbox({
            name:'explodeLinkAP',
            id:"explodeLinkAP"+this.heplmodeid+this.id,
            fieldLabel:WtfGlobal.getLocaleText("acc.invoiceform.ExplodeLinkAssemblyProduct"),//Explode Link Assembly Product
            checked:false,
            hideLabel:(this.moduleid!=Wtf.Acc_Purchase_Order_ModuleId || (this.isEdit && !this.copyInv) || this.isTemplate || (this.isViewTemplate && !this.readOnly)),
            hidden:(this.moduleid!=Wtf.Acc_Purchase_Order_ModuleId || (this.isEdit && !this.copyInv) || this.isTemplate || (this.isViewTemplate && !this.readOnly)),
            cls : 'custcheckbox',
            disabled:true,
            width: 10
        });
        this.explodeLinkAP.on('change',this.loadExplodedAssemblyProduct,this);

        var isvisible = false;
        if (CompanyPreferenceChecks.activateDropShip()) {
            if (this.moduleid == Wtf.Acc_Purchase_Order_ModuleId || this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Invoice_ModuleId) {
                isvisible = true;
            }

        }
        
        var isDisabledDropshipDocument=true;
        if(this.moduleid == Wtf.Acc_Sales_Order_ModuleId){
         
          /* -----Disabled in Edit mode but enabled in Create New & Copy mode-------- */
            if(!(this.isEdit && !this.copyInv)){
              isDisabledDropshipDocument=false; 
            }
        }
                
        this.isdropshipDocument = new Wtf.form.Checkbox({
            name: 'isdropshipDocument',
            id: "isdropshipDocument123" + this.heplmodeid + this.id,
            fieldLabel: WtfGlobal.getLocaleText("acc.field.dropship"), 
            checked: false,
            cls: 'custcheckbox',
            disabled: isDisabledDropshipDocument,
            width: 10,
            hideLabel:!isvisible,
            hidden:!isvisible
        });
             
        
        this.blockSOPO = new Wtf.form.Checkbox({
            name: 'blockSOPO',
            id: "blockSOPO" + this.heplmodeid + this.id,
            fieldLabel: this.moduleid == Wtf.Acc_Purchase_Order_ModuleId ? "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.field.BlockSOqtip") + "'>" + WtfGlobal.getLocaleText("acc.field.BlockselectedSO") + "</span>" : "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.field.BlockPOqtip") + "'>" + WtfGlobal.getLocaleText("acc.field.BlockPO") + "</span>", //"Block PO or Block SO
            checked: false,
            cls: 'custcheckbox',
            disabled: true,
            width: 10,
            hideLabel:true,
            hidden:true
        });
        
        this.generateReceipt= new Wtf.form.Checkbox({
            name:'generateReceipt',
            id:"generateReceipt"+this.heplmodeid+this.id,
            fieldLabel:WtfGlobal.getLocaleText("acc.cust.generateReceipt"),  //'Generate Receipt',
            checked:false,
            hideLabel:(this.quotation || this.isOrder || !this.cash || !this.isCustomer),//|| !this.isCustomer || this.isOrder),
            hidden:(this.quotation || this.isOrder || !this.cash || !this.isCustomer),//|| !this.isCustomer || this.isOrder),
            cls : 'custcheckbox',
            width: 10
        });
        this.billDate = new Wtf.form.DateField({
            fieldLabel: "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.he.12") + "'>" + (this.moduleid ==Wtf.Acc_Security_Gate_Entry_ModuleId?WtfGlobal.getLocaleText("acc.securitygate.title"):this.isPOfromSO ? WtfGlobal.getLocaleText("acc.accPref.autoPO") : (this.isSOfromPO) ? WtfGlobal.getLocaleText("acc.accPref.autoSO") : (this.isEdit ? this.label : this.label)) + ' ' + WtfGlobal.getLocaleText("acc.invoice.date") + "</span>", //(this.isPOfromSO?WtfGlobal.getLocaleText("acc.accPref.autoPO"):(this.isSOfromPO)?WtfGlobal.getLocaleText("acc.accPref.autoSO"):(this.isEdit?this.label:this.label)) +' '+WtfGlobal.getLocaleText("acc.invoice.date"),
            id: "invoiceDate" + this.heplmodeid + this.id,
            format: WtfGlobal.getOnlyDateFormat(),
            name: 'billdate',
//            maxValue:this.isOpeningBalanceOrder?this.getFinancialYRStartDatesMinOne(true):null,
            maxValue: (this.isOpeningBalanceOrder||this.isExicseOpeningbalance) ? WtfGlobal.getOpeningDocumentDate(true) : null, // Set transaction date as before first financial year date. //ERP-27018
//            anchor:'50%',
            width: 240,
            listeners: {
                'change': {
                    fn: this.updateDueDate,
                    scope: this
                }
            },
            allowBlank: ((this.isTemplate || this.isEditTemplate) && !this.createTransactionAlso)// this.isEditTemplate - make allow blank property true in edit template case
        });
        this.RMCDApprovalNo=new Wtf.form.TextField({
            fieldLabel:WtfGlobal.getLocaleText("acc.cust.RMCDApprovalNo"),  //RMCD Approval No
            name: 'RMCDApprovalNo',
            id:"RMCDApprovalNo"+this.heplmodeid+this.id,
//            anchor:'50%',
            hideLabel:!this.isSelfBilledInvoice,
            hidden:!this.isSelfBilledInvoice,
            width : 240,
            maxLength:50,
            scope:this
        });
        
        var hideIncludingGSTForAvalara = this.isModuleForAvalara
        var hideIncludingGSTCheck = hideIncludingGSTForAvalara || ((SATSCOMPANY_ID==companyid) ?true:(Wtf.account.companyAccountPref.countryid == Wtf.Country.MALAYSIA && (!Wtf.account.companyAccountPref.enableGST || !this.shouldTaxBeHidden())));
        this.includingGST = new Wtf.form.Checkbox({
            name: 'includingGST',
            id: "includingGST" + this.heplmodeid + this.id,
            hideLabel: hideIncludingGSTCheck,
            hidden: hideIncludingGSTCheck,
            fieldLabel: this.checkToIncludeGstORVatORTax(this),
            cls: 'custcheckbox',
            width: 10
        });        


          this.includingGST.on('focus',function(o,newval,oldval){
                var includeGstCount=0;
                var excludeGstCount=0;
                var selectedids=this.PO.getValue();
                var selectedValuesArr = selectedids.split(',');
                for(var cntGst=0;cntGst<selectedValuesArr.length;cntGst++){
                    var rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cntGst]));
                    if(rec!=undefined){
                        if(rec.data["gstIncluded"]){
                            includeGstCount++;
                        }else if(!rec.data["gstIncluded"]){
                            excludeGstCount++;
                        }
                    }
                }
        if(this.fromPO.getValue() !=undefined && this.fromPO.getValue()==true&&this.PO.getValue()!=""){
            var message=""
            if(selectedValuesArr.length==includeGstCount&&this.includingGST.getValue()){
                message=WtfGlobal.getLocaleText("acc.inclidingGST");
            }else if(selectedValuesArr.length==excludeGstCount&&!this.includingGST.getValue()){
                message=WtfGlobal.getLocaleText("acc.excludingGST");
            }
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.je.confirm"),message,function(btn){
                if(btn!="yes") {
                    return;
                }
                    //When including gst is edited in linking case-ERP-38278
                    if(!((selectedValuesArr.length==includeGstCount&&!this.includingGST.getValue())||(selectedValuesArr.length==excludeGstCount&&this.includingGST.getValue()))){
                        if(this.fromPO!=undefined && this.fromPO!=null){
                            this.fromPO.setValue(false);
                            this.fromPO.enable();
                        }
                                            
                        if(this.fromLinkCombo!=undefined && this.fromLinkCombo!=null){
                            this.fromLinkCombo.clearValue();
                            this.fromLinkCombo.disable();
                        }
                        if(this.PO!=undefined && this.PO!=null){
                            this.PO.clearValue();
                            this.PO.disable();
                            this.PO.setValue("");
                        }

                        var rowRateIncludingGstAmountIndex="";
                        if(this.isExpenseInv){
                            rowRateIncludingGstAmountIndex=this.Grid.getColumnModel().findColumnIndex("rateIncludingGstEx");
                        }else{
                            rowRateIncludingGstAmountIndex=this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
                        }
        
                        if(rowRateIncludingGstAmountIndex!=-1){
                                if(selectedValuesArr.length==excludeGstCount&& !this.includingGST.getValue()){
                                    this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,false);
                                }else{
                                    this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,true);
                                }
                        }
                    }
                var value=this.includingGST.getValue()
                this.includingGST.setValue(!value);
            },this);
        }
    },this);
            this.includingGST.on('change',function(o,newval,oldval){
                /**
                 * Show alert if RCM check alrady ON and trying to ativate Including GST Check
                 */
                if (WtfGlobal.isIndiaCountryAndGSTApplied()) {
                    if (this.GTAApplicable && this.GTAApplicable.getValue()) {
                        this.includingGST.setValue(oldval);
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.common.rcm.applicable.including.gst.notallowed")], 2);
                        return;
                    }
                }
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoice.gridDataWillCleared"),function(btn){
                if(btn=="yes") {
                    this.Grid.getStore().removeAll();
                    this.Grid.addBlankRow();
                    if(this.termgrid != undefined && this.termgrid != null){
                        this.termgrid.getStore().rejectChanges();
                    }
                    if(this.applyGlobalDiscount){
                        this.applyGlobalDiscount.setValue(false);
                    }
                    this.Grid.fireEvent('datachanged', this);
                    if(newval){
                        this.includeProTax.disable();
                        this.includeProTax.setValue(true);
                    } else {
                        this.isViewTemplate==true?this.includeProTax.disable():this.includeProTax.enable();
                        this.includeProTax.enable();
                        /*False means Hidden True*/
                        /*This function written in CommonERPComponent.js*/
                        this.HideShowTermAmountExcludingTaxCol(false);
                        
                        /*
                         * If product tax is disabled then global level tax should be enabled and in view mode it should be disabled ERP-32672
                         */
                        this.isViewTemplate==true?this.isTaxable.disable():this.isTaxable.enable();
                        this.isViewTemplate==true?this.Tax.disable():this.Tax.enable();
                    }
                    var rec=WtfGlobal.searchRecord(this.includeProTax.store, true, 'value');
                    if(rec!=null){
                        this.includeProTaxHandler(this.includeProTax,rec,!this.includeProTax.getValue());            
                    }
                } else {
                    o.setValue(oldval);
                }
                },this);
            },this);

        this.capitalGoodsAcquired= new Wtf.form.Checkbox({
            name:'isCapitalGoodsAcquired',
            id:"isCapitalGoodsAcquired"+this.heplmodeid+this.id,
            fieldLabel:WtfGlobal.getLocaleText("acc.capital.goods.acquired"),  //'Capital Goods Acquired',
            checked: false,
            hideLabel: !(!this.isExpenseInv && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && Wtf.account.companyAccountPref.countryid=='137'),// if country is Malasia and this is an vendor Invoice and not an expense invoice then only it will be showns
            hidden: !(!this.isExpenseInv && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && Wtf.account.companyAccountPref.countryid=='137'),// if country is Malasia and this is an vendor Invoice and not an expense invoice then only it will be showns
            cls : 'custcheckbox',
            width: 10
        });

        this.isRetailPurchase= new Wtf.form.Checkbox({
            name:'isRetailPurchase',
            id:"isRetailPurchase"+this.heplmodeid+this.id,
            fieldLabel:WtfGlobal.getLocaleText("acc.invoice.retail.purchase"),  //'Retail Purchase,
            checked: false,
            hideLabel: (!(!this.isExpenseInv && Wtf.account.companyAccountPref.countryid=='137' && (this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId || this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId))) || this.isSelfBilledInvoice,// if country is Malasia and this is an vendor Invoice or Cash Purchase and not an expense invoice then only it will be showns
            hidden: (!(!this.isExpenseInv && Wtf.account.companyAccountPref.countryid=='137' && (this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId || this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId))) || this.isSelfBilledInvoice,// if country is Malasia and this is an vendor Invoice or Cash Purchase and not an expense invoice then only it will be showns
            cls : 'custcheckbox',
            width: 10
        });
        
        this.importService= new Wtf.form.Checkbox({
            name:'importService',
            id:"importService"+this.heplmodeid+this.id,
            fieldLabel:'Import Service',
            disabled:this.readOnly,
            checked: false,
            hideLabel: (this.cash || this.moduleid != Wtf.Acc_Vendor_Invoice_ModuleId || Wtf.account.companyAccountPref.countryid!='137' || this.isSelfBilledInvoice),// if country is Malasia and this is an vendor Invoice and not an expense invoice then only it will be showns
            hidden: (this.cash || this.moduleid != Wtf.Acc_Vendor_Invoice_ModuleId || Wtf.account.companyAccountPref.countryid!='137' || this.isSelfBilledInvoice),// if country is Malasia and this is an vendor Invoice and not an expense invoice then only it will be showns
            cls : 'custcheckbox',
            width: 10
        });
        this.importService.on('change',this.onImportServiceOptionChanged,this);
        if(this.isExpenseInv){
            this.DOSettings=false;
            this.GRSettings=false;
        }
        
        if(this.isIndonesian){
            this.isCreditable = new Wtf.form.Checkbox({
                name:'isCreditable',
                fieldLabel:WtfGlobal.getLocaleText("acc.field.isCreditable"),//Is Creditable
                disabled:this.readOnly,
                checked:true,
                hideLabel: !(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId),
                hidden: !(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId),
                width:10
            });
            /**
             * Create Indonesia Country fields 
             */
            this.createIndonesiaCountrySpecificFields();
        }
        
        this.autoGenerateDO= new Wtf.form.Checkbox({
            name:'autogenerateDO',
            id:"autogenerateDO"+this.heplmodeid+this.id,
            fieldLabel:this.isCustomer ? "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.cust.generateDO.tt") +"'>"+ WtfGlobal.getLocaleText("acc.cust.generateDO") +"</span>": "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.vend.generateGR.tt")+"'>"+WtfGlobal.getLocaleText("acc.vend.generateGR") +"</span>",  //'Generate Delivery Order',
            checked: this.isCustomer ? (this.DOSettings != null? this.DOSettings:false) :(this.DOSettings != null ? this.GRSettings:false),
//            hideLabel:(this.isWithInvUpdate == null? true: !this.isWithInvUpdate) || !( his.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId  ),
//            hidden:(this.isWithInvUpdate == null? true: !this.isWithInvUpdate) || !( this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId  ),
            hideLabel: this.isCreateInvFromJob||(this.isEdit&&this.record.data.isjobWorkWitoutGrn!=undefined&&this.record.data.isjobWorkWitoutGrn)||!( this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId  ),
            hidden:this.isCreateInvFromJob||(this.isEdit&&this.record.data.isjobWorkWitoutGrn!=undefined&&this.record.data.isjobWorkWitoutGrn)||!( this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId  ),
            cls : 'custcheckbox',
            width: 10
        });        
        /**
         * Show following two check box for create edit and view case template only
         */
        var show=true;
        if((this.isTemplate || this.isEditTemplate || this.isViewTemplate) && (this.moduleid==18 || this.moduleid==20||this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId||this.moduleid==Wtf.Acc_Invoice_ModuleId)){
            show=false;
        }
        this.populateproductfortemplate = new Wtf.form.Checkbox({
            name: 'populateproducttemplate',
            id: "populateproducttemplate" + this.heplmodeid + this.id,
            fieldLabel: "Auto Populate Product",//<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.common.applyGlobalDiscount") + "'>" + WtfGlobal.getLocaleText("acc.common.applyGlobalDiscount") + "</span>",
            checked: false,
            disabled : this.isViewTemplate ||this.readOnly,
            hidden:show,//!this.isTemplate || !this.isOrder || this.quotation,
            hideLabel:show,//!this.isTemplate || !this.isOrder || this.quotation,
            cls: 'custcheckbox',
            width: 10
        });
        this.populatecustomerfortemplate = new Wtf.form.Checkbox({
            name: 'populatecustomertemplate',
            id: "populatecustomertemplate" + this.heplmodeid + this.id,
            fieldLabel: "Auto Populate Vendor/Customer ",//<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.common.applyGlobalDiscount") + "'>" + WtfGlobal.getLocaleText("acc.common.applyGlobalDiscount") + "</span>",
            checked: false,
            disabled : this.isViewTemplate ||this.readOnly,
            hidden: show,//!this.isTemplate || !this.isOrder  || this.quotation,
            hideLabel:show,//!this.isTemplate || !this.isOrder || this.quotation,
            cls: 'custcheckbox',
            width: 10
        });
        this.applyGlobalDiscount= new Wtf.form.Checkbox({
            name:'applyGlobalDiscount',
            id:"applyGlobalDiscount"+this.heplmodeid+this.id,
            fieldLabel:"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.common.applyGlobalDiscount") +"'>"+ WtfGlobal.getLocaleText("acc.common.applyGlobalDiscount") +"</span>",
            checked: false,
//            hideLabel: Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA,
//            hidden: Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA,
            cls : 'custcheckbox',
            width: 10
        });  
        this.globalDiscountTypeStore = new Wtf.data.SimpleStore({
            fields: ['typeid', 'name'],
            data :[[1,'Percentage'],[0,'Flat']]
        });
        this.globalDiscountType = new Wtf.form.ComboBox({
            store: this.globalDiscountTypeStore,
            name:'globalDiscountType',
            id:"globalDiscountType"+this.heplmodeid+this.id,
            width:240,
            fieldLabel:WtfGlobal.getLocaleText("acc.field.DiscountType"),
            displayField:'name',
            valueField:'typeid',
//            hidden: Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA,
//            hideLabel: Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA,
            mode: 'local',
            triggerAction: 'all',
            selectOnFocus:true,
            forceSelection:true,
            value:1
        });
        
        this.productStoreJWorder = new Wtf.data.Store({
            url: "ACCProductCMN/getProductsForCombo.do",
            baseParams: {
                type:this.isCustomer?Wtf.producttype.customerAssembly:Wtf.producttype.assembly
            },
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            }, Wtf.productRec)
        });
    
        this.globalDiscount=new Wtf.form.NumberField({
            allowBlank: true,
            allowNegative: false,
            width:240,
            id:"globaldiscount"+this.heplmodeid+this.id,
            fieldLabel:WtfGlobal.getLocaleText("acc.het.365"),
            defaultValue:0,
//            hidden: Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA,
//            hideLabel: Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA,
            decimalPrecision:Wtf.AMOUNT_DIGIT_AFTER_DECIMAL
        });
        //Cash Received field to be shown in Cash and Credit Sales Invoices
        this.cashReceived = new Wtf.form.NumberField({
            allowBlank: true,
            allowNegative: false,
            name:"cashReceived",
            id:"cashReceived"+this.heplmodeid+this.id,
            //show this field if Cash and Credit Sales Invoice
            hidden: (Wtf.account.companyAccountPref.enableCashReceiveReturn ? !(this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Invoice_ModuleId) : true),
            hideLabel: (Wtf.account.companyAccountPref.enableCashReceiveReturn ? !(this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Invoice_ModuleId) : true),
            fieldLabel:WtfGlobal.getLocaleText("acc.field.cashReceived"),
            defaultValue:0,
            decimalPrecision:Wtf.AMOUNT_DIGIT_AFTER_DECIMAL
        });
        this.isAutoFillBatchDetails=false;
        this.applyGlobalDiscount.on('check',this.globalDiscountApplied,this);
        this.globalDiscountType.on('change',this.globalDiscountTypeChanged,this);
        this.globalDiscount.on('change',this.globalDiscountValueChanged,this);
        //after changing value of Cash Received update value of Cash to be returned summary part
        this.cashReceived.on('change',this.updateChangeToBeReturnedValue,this);
        /*
         *If checked CGA then set global level tax which is set in company preference 
         */
        this.capitalGoodsAcquired.on('check',this.capitalGoodsAcquiredHandler,this);
        
        this.autoGenerateDO.on('check',function(o,newval,oldval){
        if(oldval!= newval && newval){
            this.isAutoFillBatchDetails=true;
            /**
             * in case of template sequenformat combo should be hidden.
             */
            if(this.isEdit && !this.copyInv && !(this.isTemplate || this.isEditTemplate || this.isViewTemplate)){
                this.getNextSequenceNumberDo(this.sequenceFormatComboboxDo,'',true);        //true for idetify autoGenerateDO enabled  by user in edit case
            }
        }
        if(newval){ 
            Wtf.serialwindowflag=true;
        }else{
            Wtf.serialwindowflag=false;
        }
        if(Wtf.serialwindowflag && !this.isExpenseInv){//checking in companypreferences
            this.showGridBatch(newval);
        }
         
        if(this.autoGenerateDO.getValue()){
              this.showDO();
            }else{
               this.hideDO();
            }  
        if(  !this.isExpenseInv && this.Grid.getSelectionModel().getCount()>0){
            this.Grid.getSelectionModel().clearSelections();
        }
        this.Grid.addorRemoveBomCodeColumn(null,this.autoGenerateDO.checked,this.Grid.store);
        },this);
        
        this.templateRec = new Wtf.data.Record.create([
            {name: 'tempid'},
            {name: 'tempname'}
        ]);
        
        this.templateStore = new Wtf.data.Store({
            url : "ExportPDF/getAllReportTemplate.do",
            
            method: 'GET',
            baseParams : {
                templatetype : this.doctype
            },
            reader: new Wtf.data.KwlJsonReader({
                root: 'data'
            },this.templateRec)
        });
         this.templateStore.load();
         this.templateStore.on("load", function() {
            if (!this.isEdit)
                this.template.setValue(Wtf.Acc_Basic_Template_Id);
        }, this);
        this.template= new Wtf.form.FnComboBox({
            fieldLabel:WtfGlobal.getLocaleText("acc.invoice.grid.header.template")+"*",
            hiddenName:"template",
//            anchor:"94%",
            width : 240,
            store: this.templateStore,
            valueField:'tempid',
            displayField:'tempname',
//            itemCls : (!this.isCustBill)?"hidden-from-item":"",
//            allowBlank:!this.isCustBill||this.isOrder,
//            hirarchical:true,
            emptyText:WtfGlobal.getLocaleText("acc.invoice.grid.template.emptyText"),
            mode: 'local',
            typeAhead: true,
            forceSelection: true,
            allowBlank:true, 
            hidden:true, 
            hideLabel:true,      
            selectOnFocus:true,
           // value : this.isEdit ? this.record.data.templatename :'',
            triggerAction:'all',
//            addNewFn: this.addAccount.createDelegate(this,[this.allAccountStore],true),
            scope:this,
            listeners:{
                'change':{
                    fn:this.setTemplateID,
                    scope:this
                }
            }
        });
        this.templateID=new Wtf.form.Hidden({
        	scope:this,
        	value: this.isEdit ? this.record.data.templateid : ''
        });
//        if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.create))
        this.template.addNewFn=this.addInvoiceTemplate.createDelegate(this,[this.templateStore],true);
        
        this.includeTaxStore = new Wtf.data.SimpleStore({
            fields:[{name:'name'},{name:'value',type:'boolean'}],
            data:[['Yes',true],['No',false]]
        });
        
        this.partialInvoiceStore = new Wtf.data.SimpleStore({
            fields:[{name:'name'},{name:'value',type:'boolean'}],
            data:[['Yes',true],['No',false]]
        });
        
        this.includeProTax= new Wtf.form.ComboBox({
            triggerAction:'all',
            mode: 'local',
            valueField:'value',
            displayField:'name',
            store:this.includeTaxStore,
           // id: "linkToOrder"+this.id+this.heplmodeid,
            fieldLabel:(Wtf.account.companyAccountPref.countryid!= Wtf.Country.INDONESIA)?"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.includeprodtax.tip")+"'>"+WtfGlobal.getLocaleText("acc.invoice.productTax") +"</span>":"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.includeprodtaxVAT.tip")+"'>"+WtfGlobal.getLocaleText("acc.invoice.productTax") +"</span>",//"Include Product Tax",
            id:"includeprotax"+this.heplmodeid+this.id,
          //  allowBlank:this.isOrder,
            value:(this.isEdit?true:false),
//            anchor:'94%',
            width : 240,
            typeAhead: true,
            forceSelection: true,
            hideLabel: (WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied()) ? true : (Wtf.account.companyAccountPref.countryid == '137' && (!Wtf.account.companyAccountPref.enableGST || !this.shouldTaxBeHidden())),// hide if company is malaysian and GST is not enabled for it
            hidden: (WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied()) ? true : (Wtf.account.companyAccountPref.countryid == '137' && (!Wtf.account.companyAccountPref.enableGST || !this.shouldTaxBeHidden())),// hide if company is malaysian and GST is not enabled for it
            name:'includeprotax',
            hiddenName:'includeprotax',
            listeners:{
                'change':{
                    fn:this.includeProTaxHandler,
                    scope:this
                }
            }
        });
        
        this.applyTaxToTermsChk = new Wtf.form.Checkbox({
            fieldLabel:"Apply Tax to Terms"
        }),
        /*
         *This on "check" function moved to CommonERPComponent.js
         */
//        this.applyTaxToTermsChk.on("check", function () {
//            this.updateSubtotal();
//        }, this);
        this.validTillDate = new Wtf.form.DateField({
            fieldLabel : "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.common.validTill.tt") +"'>"+ WtfGlobal.getLocaleText("acc.common.validTill") +"</span>",  //"Valid Till",
            format : WtfGlobal.getOnlyDateFormat(),
            name : 'validdate',
            id : "validdate"+this.heplmodeid+this.id,
            width : 240,
            hidden : !(this.moduleid==22 || this.moduleid==23),
            hideLabel : !(this.moduleid==22 || this.moduleid==23)
//            anchor:'94%'
        });
        this.validTillDate.on('change',this.onValidTillDateChange,this);
        
        this.partialInvoiceCmb= new Wtf.form.ComboBox({
            triggerAction:'all',
            mode: 'local',
            valueField:'value',
            hidden : (this.moduleid!=Wtf.Acc_Invoice_ModuleId || WtfGlobal.isIndiaCountryAndGSTApplied()),
            hideLabel :(this.moduleid!=Wtf.Acc_Invoice_ModuleId || WtfGlobal.isIndiaCountryAndGSTApplied()),
            displayField:'name',
            store:this.partialInvoiceStore,
           // id: "linkToOrder"+this.id+this.heplmodeid,
            fieldLabel:WtfGlobal.getLocaleText("acc.field.IsPartialInvoice"),
            id:"isPartialInv"+this.heplmodeid+this.id,
          //  allowBlank:this.isOrder,
            value:false,
//            anchor:'94%',
            width : 240,
            disabled : true,
            typeAhead: true,
            forceSelection: true,
            name:'partialinv',
            hiddenName:'partialinv',
            listeners:{
                'select':{
                    fn:this.showPartialDiscount,
                    scope:this
                }
            }
        });

        this.partialInvAmountConfig = {
            fieldLabel: "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.invoice.invoicepartialAmount") + "'>" + WtfGlobal.getLocaleText("acc.invoice.invoicepartialAmount") + "</span>" + ' *',
            name: 'partialinvamt',
            hiddenName: 'partialinvamt',
            id: "partialinvamt" + this.heplmodeid + this.id,
            allowNegative: false,
            value: 0,
            hidden: ((this.isCustomer && !this.isCustBill && !this.isOrder && !this.cash) && !WtfGlobal.isIndiaCountryAndGSTApplied()) ? false : true,
            hideLabel: ((this.isCustomer && !this.isCustBill && !this.isOrder && !this.cash) && !WtfGlobal.isIndiaCountryAndGSTApplied()) ? false : true
        };
        this.partialInvAmount = WtfGlobal.createNumberfield(this.partialInvAmountConfig, true, true, 240, this);
        this.partialInvAmount.on('change',this.onPartialInvChange,this);
        /*
         *hideLabel:(!this.isCustBill && !(this.isOrder&&this.isCustomer) && !this.cash )?false:true,
            hidden:(!this.isCustBill && !(this.isOrder&&this.isCustomer) && !this.cash )?false:true,
         **/
        var emptyText = WtfGlobal.getLocaleText("acc.field.SelectVQ/SO");
        if(!this.isCustBill){
            if(this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId){
                emptyText = WtfGlobal.getLocaleText("acc.field.SelectPO")
            }else if(this.isOrder && !this.isCustomer) {
                emptyText = this.quotation?WtfGlobal.getLocaleText("acc.field.SelectPR"):WtfGlobal.getLocaleText("acc.field.SelectVQ/SO");
            } else if(this.isOrder && this.isCustomer && !this.quotation){// for sales order
                emptyText = (Wtf.account.companyAccountPref.activateSalesContrcatManagement)?WtfGlobal.getLocaleText("acc.field.SelectCQPORN"):WtfGlobal.getLocaleText("acc.field.SelectCQPO");
            } else {
                emptyText = Wtf.account.companyAccountPref.withinvupdate? (this.isCustomer? WtfGlobal.getLocaleText("acc.field.SelectSO/DO/CQ") : WtfGlobal.getLocaleText("acc.field.SelectPO/GR/VQ")) : (this.isCustomer? WtfGlobal.getLocaleText("acc.field.SelectSO/CQ") : WtfGlobal.getLocaleText("acc.field.SelectPO/VQ"));
            }
        }
        
        //link to field
        this.fromLinkCombo= new Wtf.form.ComboBox({
            name:'fromLinkCombo',
            triggerAction:'all',
            hideLabel:this.hideShowFromLinkCombo()?true:false,
            hidden:this.hideShowFromLinkCombo()?true:false,
            mode: 'local',
            valueField:'value',
            id:'fromLinkComboId'+this.heplmodeid+this.id,
            displayField:'name',
            disabled:true,
            store:this.fromlinkStore,                        
            emptyText: emptyText,//Wtf.account.companyAccountPref.withinvupdate? (this.isCustomer? "Select SO/DO" : "Select PO/GR") : (this.isCustomer? "Select SO" : "Select PO"),
            fieldLabel:WtfGlobal.getLocaleText("acc.field.Linkto"),  //"Link to "+(this.isCustomer?"Sales":"Purchase")+" Order",
            allowBlank:false,            
//            value:false,            
            typeAhead: true, 
            width:130,
            forceSelection: true,                        
            selectOnFocus:true,           
            scope:this,
            listeners:{
                'select':{
                    fn:function(combo, record, index){
                        this.callOnfromLinkComboSelect(combo, record, index);
                    },
                    scope:this
                },
                'beforeselect':{
                    fn:function(combo, record, index){
                        this.linkcomboBeforeSelect = combo.getValue();
                    },
                    scope:this 
                }
               
            }
        });
        
            var emptyTextForPOCombo = "Select Transaction";
            if(this.moduleid == Wtf.Acc_Invoice_ModuleId){
                emptyTextForPOCombo = (Wtf.account.companyAccountPref.withinvupdate)?WtfGlobal.getLocaleText("acc.field.SelectSO/DO/CQ"):WtfGlobal.getLocaleText("acc.field.SelectSO/CQ");
            } else if(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId){
                emptyTextForPOCombo = (Wtf.account.companyAccountPref.withinvupdate)?WtfGlobal.getLocaleText("acc.field.SelectPO/GR/VQ"):WtfGlobal.getLocaleText("acc.field.SelectPO/VQ");
            } else if(this.moduleid == Wtf.MRP_Job_Work_IN){
                emptyTextForPOCombo = WtfGlobal.getLocaleText("acc.field.SelectJWO");
            } else if(this.moduleid == Wtf.Acc_Sales_Order_ModuleId){
                if(Wtf.account.companyAccountPref.activateSalesContrcatManagement){
                    emptyTextForPOCombo = WtfGlobal.getLocaleText("acc.field.SelectCQPORN");
                }else{
                    emptyTextForPOCombo = WtfGlobal.getLocaleText("acc.field.SelectCQPO");
                }
                
            } else if(this.moduleid == Wtf.Acc_Purchase_Order_ModuleId){
                emptyTextForPOCombo = WtfGlobal.getLocaleText("acc.field.SelectVQ/SO");
            } else if(this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId){
                emptyTextForPOCombo = WtfGlobal.getLocaleText("acc.inv.QOe/MN");
            } else if(this.moduleid == Wtf.Acc_Vendor_Quotation_ModuleId){
                emptyTextForPOCombo = WtfGlobal.getLocaleText("acc.field.SelectPR");
            } 

           this.MSComboconfig = {
                hiddenName:"ordernumber",
                store: this.POStore,
                valueField:'billid',
                hideLabel:this.hideShowPOCombo(),
                hidden:this.hideShowPOCombo(),
                displayField:'billno',
                disabled:true,
                clearTrigger:this.isEdit ? false : true,
                emptyText:emptyTextForPOCombo,//this.isOrder ? (( this.isCustomer)?(this.quotation?WtfGlobal.getLocaleText("acc.inv.QOe/MN"):WtfGlobal.getLocaleText("acc.field.SelectCQRN")) : WtfGlobal.getLocaleText("acc.field.SelectVQ/SO")) : (Wtf.account.companyAccountPref.withinvupdate ? (this.isCustomer?WtfGlobal.getLocaleText("acc.field.SelectSO/DO/CQ"):WtfGlobal.getLocaleText("acc.field.SelectPO/GR/VQ")) : (!this.isCustBill)?(this.isCustomer?WtfGlobal.getLocaleText("acc.field.SelectSO/CQ"):WtfGlobal.getLocaleText("acc.field.SelectPO/VQ")):(this.isCustomer?WtfGlobal.getLocaleText("acc.inv.SOe"):WtfGlobal.getLocaleText("acc.inv.POe"))),
                mode: 'local',
                typeAhead: true,
                selectOnFocus:true,                            
                allowBlank:false,
                triggerAction:'all',
                scope:this
            };

        this.PO = new Wtf.common.Select(Wtf.applyIf({
             multiSelect:true,
             fieldLabel:WtfGlobal.getLocaleText("acc.field.Number") ,
             id:"poNumberID"+this.heplmodeid+this.id ,
             forceSelection:true,
             addCreateOpt:true,
             addNewFn:this.addSelectedDocument.createDelegate(this),
             width:240
        },this.MSComboconfig));
        
        this.PO.on("clearval",function(){
            if(this.PO.getValue()=="" && !this.isEdit && !this.handleEmptyText){            
                this.Grid.getStore().removeAll();            
                this.Grid.addBlankRow();
                if(this.termgrid != undefined && this.termgrid != null){
                    this.termgrid.getStore().rejectChanges();
                }
                var fieldArr = this.POStore.fields.items;
                var defaultValue = "";
                for(var fieldCnt=0; fieldCnt < fieldArr.length; fieldCnt++) {
                    var fieldN = fieldArr[fieldCnt];
                    var fieldlabel = fieldN.name.substring(7, fieldN.name.length);
                    
                    if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id)) {
                        if(Wtf.getCmp(fieldN.name + this.tagsFieldset.id).isessential == 1){
                            defaultValue = fieldN.defaultValue;
                            if(Wtf.getCmp(fieldN.name + this.tagsFieldset.id).getXType() == 'datefield'){
                                defaultValue = new Date (defaultValue);
                            }
                             Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(defaultValue);
                        } else {
                        Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue('');
                    }
                    } else if (!Wtf.isEmpty(fieldlabel) && Wtf.getCmp(fieldlabel+this.tagsFieldset.id)){
                         if(Wtf.getCmp(fieldlabel + this.tagsFieldset.id).isessential == 1){
                             Wtf.getCmp(fieldlabel+this.tagsFieldset.id).setValue(fieldN.defaultValue);
                        } else {
                             Wtf.getCmp(fieldlabel+this.tagsFieldset.id).setValue('');
                }
            }
                }
            }
            this.handleEmptyText=false;
            /*
             * Need to set blank when linked doc combo clear
            */
            this.customeridforshippingaddress='';
            if (this.isdropshipDocument && !this.saveOnlyFlag) {//Uncheked dropship check on clearing the number field
                this.isdropshipDocument.setValue(false);
            }
        },this);
        
        this.defaultNatureOfPurchase= new Wtf.form.FnComboBox({
            fieldLabel: Wtf.account.companyAccountPref.registrationType==Wtf.registrationTypeValues.MANUFACTURER ?"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.NatureofPurchase") +"'>"+ WtfGlobal.getLocaleText("acc.field.NatureofPurchase") +"</span>": "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.TypeofSales") +"'>"+ WtfGlobal.getLocaleText("acc.field.TypeofSales") +"</span>",
            hidden: (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.isExciseTab && !this.isCustomer )?false:true,
            hideLabel: (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.isExciseTab && !this.isCustomer )?false:true,
            name:'defaultnatureofpurchase',
            width:240,
            store:Wtf.defaultNatureOfPurchaseStore,
            emptyText:Wtf.account.companyAccountPref.registrationType==Wtf.registrationTypeValues.MANUFACTURER ?WtfGlobal.getLocaleText("acc.field.Selectanatureofpurchase"):WtfGlobal.getLocaleText("acc.field.TypeofSalesSel"),//'Select a nature of purchase',
            valueField:'id',
            disabled:this.readOnly,
            displayField:'name',
            forceSelection: true
        });
        
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && this.isExciseTab ){
            Wtf.defaultNatureOfPurchaseStore.load();
        }  
//        this.generateSupplementary= new Wtf.form.Checkbox({
//            name:'generateSupplementary',
//            id:"generateSupplementary"+this.heplmodeid+this.id,
//            fieldLabel: WtfGlobal.getLocaleText("acc.field.supplementaryInvoice"),
//            checked: false,
//            hidden: (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA  && this.isCustomer && (this.copyInv || this.isSupplementryExciseInvoice) && !this.isCopyFromTemplate)?false:true,
//            hideLabel: (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA  && this.isCustomer && (this.copyInv || this.isSupplementryExciseInvoice) && !this.isCopyFromTemplate)?false:true,
//            cls : 'custcheckbox',
//            width: 10
//        });   
//        
//        this.generateSupplementary.on('check',function(){
//            if(this.generateSupplementary.getValue()){
//              this.showSupplementary();
//            }else{
//               this.hideSupplementary();
//            }
//        },this);
//        this.originalInvoice = new Wtf.form.TextField({
//            fieldLabel: "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.originalInvoice") +"'>"+ WtfGlobal.getLocaleText("acc.field.originalInvoice") +"</span>",
//            name: 'originalInvoice',
//            emptyText:WtfGlobal.getLocaleText("acc.field.enterOriginalInvoice"),
//            id:"originalInvoice"+this.heplmodeid+this.id,
//            hidden: (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA  && this.isCustomer && (this.copyInv || this.isSupplementryExciseInvoice) && !this.isCopyFromTemplate)?false:true,
//            hideLabel: (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA  && this.isCustomer && (this.copyInv || this.isSupplementryExciseInvoice) && !this.isCopyFromTemplate)?false:true,
//            width : 240,
//            allowBlank:false, 
//            disabled:true,
//            scope: this
//        });
        
//        this.originalInvoiceId = new Wtf.form.TextField({
    //            fieldLabel: "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.originalInvoice") +"'>"+ WtfGlobal.getLocaleText("acc.field.originalInvoice") +"</span>",
//            name: 'originalInvoiceId',
//            emptyText:WtfGlobal.getLocaleText("acc.field.enterOriginalInvoice"),
//            id:"originalInvoice"+this.heplmodeid+this.id,
//            hidden:true,
//            hideLabel:true,
//            width : 240,
//            allowBlank:false, 
//            scope: this
//        });
        
//        this.originalInvoiceId = new Wtf.form.TextField({
//            fieldLabel: "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.originalInvoice") +"'>"+ WtfGlobal.getLocaleText("acc.field.originalInvoice") +"</span>",
//            name: 'originalInvoiceId',
//            emptyText:WtfGlobal.getLocaleText("acc.field.enterOriginalInvoice"),
//            id:"originalInvoice"+this.heplmodeid+this.id,
//            hidden:true,
//            hideLabel:true,
//            width : 240,
//            allowBlank:false, 
//            scope: this
//        });
        
        this.DueDate= new Wtf.form.DateField({
            fieldLabel: WtfGlobal.getLocaleText("acc.invoice.dueDate"),//'Due Date*',
            name: 'duedate',
            id: "duedate"+this.heplmodeid+this.id,
            itemCls : (this.cash||this.isOrder)?"hidden-from-item":"",
            hideLabel:this.cash||this.isOrder,
            hidden:this.cash||this.isOrder,
            format:WtfGlobal.getOnlyDateFormat(),
            allowBlank:(this.cash||this.isOrder)?true:false,
            width : 240
        });

       
        this.shippingTerm = new Wtf.form.TextField({
            fieldLabel: "<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.ShippingTerm.tt") +"'>"+ WtfGlobal.getLocaleText("acc.field.ShippingTerm") +"</span>",
            name: 'shippingterm',
            id:"shippingterm"+this.heplmodeid+this.id,
            hidden: !(this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId),
            hideLabel: !(this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId),
            width : 240,
            maxLength: 255,
            scope: this
        });
        
        var shipDateFieldLabel = (this.moduleid == Wtf.Acc_Invoice_ModuleId) ? WtfGlobal.getLocaleText("acc.field.deliveryDate") : WtfGlobal.getLocaleText("acc.field.ShipDate");
        var shipDateFieldLabelToolTip = (this.moduleid == Wtf.Acc_Invoice_ModuleId) ? WtfGlobal.getLocaleText("acc.field.deliveryDate.tip") : WtfGlobal.getLocaleText("acc.field.ShipDate.tip");
        
        this.shipDate= new Wtf.form.DateField({
            fieldLabel:"<span wtf:qtip='"+ shipDateFieldLabelToolTip +"'>"+ shipDateFieldLabel +"</span>",
            format:WtfGlobal.getOnlyDateFormat(),
            id:"shipdate"+this.heplmodeid+this.id,
            name: 'shipdate',
            width : 240,
            listeners:{
                'change':{
                    fn:this.updateDueDate,
                    scope:this
                }
            }
        });
        this.shipvia = new Wtf.form.TextField({
             fieldLabel: (companyid == PacificTechCompanyId) ?  WtfGlobal.getLocaleText("acc.field.LeadTime"):"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.ShipVia.tt") +"'>"+ WtfGlobal.getLocaleText("acc.field.ShipVia") +"</span>",
            name: 'shipvia',
            id:"shipvia"+this.heplmodeid+this.id,
            width : 240,
            maxLength: 255,
            scope: this
        });
     
        this.fob = new Wtf.form.TextField({
            fieldLabel: (companyid == PacificTechCompanyId) ?  WtfGlobal.getLocaleText("acc.field.DeliveryTerm"):"<span wtf:qtip='"+ WtfGlobal.getLocaleText("acc.field.fob.tip")+"'>"+WtfGlobal.getLocaleText("acc.field.FOB") +"</span>",
            name: 'fob',
            id:"fob"+this.heplmodeid+this.id,
            width : 240,
            maxLength: 255,
            scope: this
        });
        
        var isbchlFields=(this.quotation||this.isCustomer || !this.isOrder ||this.isCustBill || (BCHLCompanyId.indexOf(companyid) == -1));
        this.youtReftxt = new Wtf.form.TextField({
            fieldLabel: WtfGlobal.getLocaleText("acc.inv.yourref.label"), //'Vendor Invoice Number*',
            name: 'poyourref',
            hidden: isbchlFields ,
            hideLabel: isbchlFields ,
            id: "poyourref" + this.heplmodeid + this.id,
            width : 240,
            maxLength: 255,
            scope: this
        });
        this.delydatetxt = new Wtf.form.TextField({
            fieldLabel: WtfGlobal.getLocaleText("acc.inv.delydate.label"), //'Vendor Invoice Number*',
            name: 'delydate',
            hidden: isbchlFields ,
            hideLabel: isbchlFields ,
            id: "delydate" + this.heplmodeid + this.id,
            width : 240,
            maxLength: 255,
            scope: this
        });
        this.delytermtxt = new Wtf.form.TextArea({
            fieldLabel: WtfGlobal.getLocaleText("acc.inv.delyterm.label"), //'Vendor Invoice Number*',
            name: 'delyterm',
            hidden: isbchlFields,
            hideLabel:isbchlFields ,
            id: "delyterm" + this.heplmodeid + this.id,
            width : 240,
            height: 40,
            maxLength: 255,
            scope: this
        });
        this.invoiceTotxt = new Wtf.form.TextField({
            fieldLabel: WtfGlobal.getLocaleText("acc.inv.invoiceto.label"), //'Vendor Invoice Number*',
            name: 'invoiceto',
            hidden:isbchlFields ,
            hideLabel: isbchlFields ,
            id: "invoiceto" + this.heplmodeid + this.id,
            width : 240,
            maxLength: 255,
            scope: this
        });
        this.projecttxt = new Wtf.form.TextField({
            fieldLabel: WtfGlobal.getLocaleText("acc.inv.project.label"), //'Vendor Invoice Number*',
            name: 'project',
            hidden: isbchlFields ,
            hideLabel: isbchlFields ,
            id: "project" + this.heplmodeid + this.id,
            width : 240,
            maxLength: 255,
            scope: this
        });
        this.depttxt = new Wtf.form.TextField({
            fieldLabel: WtfGlobal.getLocaleText("acc.inv.dept.label"), //'Vendor Invoice Number*',
            name: 'podept',
            hidden:isbchlFields ,
            hideLabel: isbchlFields ,
            id: "podept" + this.heplmodeid + this.id,
            width : 240,
            maxLength: 255,
            scope: this
        });
        this.requestortxt = new Wtf.form.TextField({
            fieldLabel: WtfGlobal.getLocaleText("acc.inv.requestor.label"), //'Vendor Invoice Number*',
            name: 'requestor',
            hidden: isbchlFields ,
            hideLabel:isbchlFields ,
            id: "requestor" + this.heplmodeid + this.id,
//            anchor: '94%',
            width : 240,
            maxLength: 255,
            scope: this
        });
        this.mernotxt = new Wtf.form.TextField({
            fieldLabel: WtfGlobal.getLocaleText("acc.inv.merno.label"), //'Vendor Invoice Number*',
            name: 'merno',
            hidden: isbchlFields,
            hideLabel: isbchlFields ,
            id: "merno" + this.heplmodeid + this.id,
//            anchor: '94%',
            width : 240,
            maxLength: 255,
            scope: this
        });
        chkFormCostCenterload();
        this.CostCenter= new Wtf.form.ExtFnComboBox({
            store: Wtf.FormCostCenterStore,
            typeAhead: true,
            selectOnFocus:true,
            valueField:'id',
            displayField:'name',
//            extraFields:['ccid','name'],
            isProductCombo:true,
            isCostCenterCombo:true,
            extraComparisionField:'ccid', 
            extraFields:Wtf.account.companyAccountPref.accountsWithCode?['ccid']:[],
            listWidth:Wtf.account.companyAccountPref.accountsWithCode?500:400,
            fieldLabel:"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.common.costCenter.tip") +"'>"+ WtfGlobal.getLocaleText("acc.common.costCenter")+"</span>",//WtfGlobal.getLocaleText("acc.common.costCenter"),//"Cost Center",
            hiddenName:"costcenter",
            id:"costcenter"+this.heplmodeid+this.id,
            mode: 'local',
            forceSelection: true,
//            extraComparisionField:'ccid',
            width : 240,
            editable : true,
            triggerAction:'all',
            addNewFn:this.addCostCenter,
            hirarchical:true,
            scope:this,
            hidden: this.quotation,
            hideLabel: this.quotation
        });  
        this.UnitModuleTemplate= new Wtf.form.ExtFnComboBox({
            store: Wtf.FormUnitStore,
            typeAhead: true,
            selectOnFocus:true,
            valueField:'id',
            displayField:'name',
            extraComparisionField:'id', 
            extraFields:[],
            fieldLabel:"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.field.CompanyUnitstar") +"'>"+ WtfGlobal.getLocaleText("acc.field.CompanyUnitstar")+"</span>",//" Company Unit",
            hiddenName:"companyunitid",
            readOnly:this.isViewTemplate ||this.readOnly, // In View Case add Read Only check
            id:"templateunit"+this.heplmodeid+this.id,
            mode: 'local',
            forceSelection: true,
            width : 240,
            editable : true,
            triggerAction:'all',
            addNewFn:this.addTemplateUnit,
            hirarchical:true,
            scope:this,
            hidden: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA,
            hideLabel: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA,
            allowBlank : Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA || (!Wtf.isEmpty(this.isEditTemplate) && this.isEditTemplate == true) ? true : false 
        });
        /**
         * Load company unit store only if it is used in template for INDIAN subdomain and Multiple Excise unit check ON in Company Pref.
         */
        if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.exciseMultipleUnit) {
            if (this.isViewTemplate || this.isEditTemplate) {
                Wtf.FormUnitStore.load();
            } else {
                Wtf.FormUnitStore.load({
                    params: {
                        excludeUsedExciseUnits: true
                    }
                });
            }
        }
        this.FormSelectionStore = new Wtf.data.SimpleStore({
            fields: [{
                name:'id',
                type:'string'
            }, 'name'],
            data :[["1","Without Form"],
            ["2","C Form"],
            ["3","E1 Form"],
            ["4","E2 Form"],
            ["5","F Form"],
            ["6","H Form"],
            ["7","I Form"],
            ["8","J Form"]]
        });
        this.FormType=new Wtf.form.ComboBox({
            fieldLabel:!this.isCustomer? WtfGlobal.getLocaleText("acc.invoice.formtoIssue"): WtfGlobal.getLocaleText("acc.invoice.formtoreceive"), 
            name:'formtypeid',
            store:this.FormSelectionStore,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            width : 240,
            hidden:WtfGlobal.GSTApplicableForCompany()!=Wtf.GSTStatus.OLDNEW,
            hideLabel:WtfGlobal.GSTApplicableForCompany()!=Wtf.GSTStatus.OLDNEW ,
            listWidth:400,
            hiddenName:'formtypeid',
            emptyText:!this.isCustomer? WtfGlobal.getLocaleText("acc.invoice.selectformtoIssue"):WtfGlobal.getLocaleText("acc.invoice.selectformtoreceive"),
            forceSelection:true,
            triggerAction:'all'
        });

        this.AdjustAdvancePayment = new Wtf.data.Record.create([
            {
                name: 'AdvancePaymentID'
            },
            {
                name: 'AdvancePaymentNumber'
            },
            {
                name: 'AdvanceTDSAmount'
            },
            {
                name: 'isTDSAmountUsedInGR'
            },
            {
                name: 'UsedAdvancePaymentIDs'
            },
            {
                name: 'natureofpayment'
            }
        ]);
        this.AdjustAdvancePaymentStore = new Wtf.data.Store({
            url: "ACCVendorPaymentCMN/getTDSAmountAgainstAdvanceDocument.do",
            baseParams: {
            },
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            }, this.AdjustAdvancePayment)
        });

        this.AdjustAdvancePaymentComboConfig = {
            store: this.AdjustAdvancePaymentStore,
            valueField: 'AdvancePaymentID',
            displayField: 'AdvancePaymentNumber', fieldLabel: WtfGlobal.getLocaleText("acc.invoice.adjustAdvanceMakePayments"),
            emptyText: WtfGlobal.getLocaleText("acc.invoice.adjustAdvanceMakePaymentsEmptyMsg"),
            id: "adjustadvancepayments" + this.id,
            disabled: !this.isEdit || (this.isTemplate || this.isEditTemplate || this.isViewTemplate)? true: false,
            name: 'advancepaymentid',
            hiddenName: 'advancepaymentid',
            mode: 'local',
            typeAhead: true,
            hidden: Wtf.account.companyAccountPref.countryid != Wtf.Country.INDIA || this.isCustomer || !(this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId),
            hideLabel: Wtf.account.companyAccountPref.countryid != Wtf.Country.INDIA || this.isCustomer || !(this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId),
            scope: this
        };
        //To adjust TDS Amt of advance payments made against selected vendor.
        this.AdjustAdvancePayments = new Wtf.common.Select(Wtf.applyIf({
            width: 240,
            listWidth: 240,
            selectOnFocus: true,
            forceSelection: true,
            multiSelect: false,
            clearTrigger: !this.isViewTemplate,
            triggerAction: 'all',
            lastQuery: '',
            extraFields: ["AdvanceTDSAmount"]
        }, this.AdjustAdvancePaymentComboConfig));
        this.AdjustAdvancePayments.on("change", this.onAdvancePaymentChange, this);
        //ERP-34970(ERM-534)
        var isApplyRCMOnSAles =false;
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && this.isCustomer && (this.moduleid== Wtf.Acc_Invoice_ModuleId || this.moduleid==Wtf.Acc_Sales_Order_ModuleId || this.moduleid==Wtf.Acc_Customer_Quotation_ModuleId)){
            isApplyRCMOnSAles =true;
        } 
        
        this.applyRCMOnPurchase = false;
        this.isPurchasesTransaction = (this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Purchase_Order_ModuleId || this.moduleid == Wtf.Acc_Vendor_Quotation_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId);
        if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.isRCMApplicableInPreferences && this.isPurchasesTransaction) {
            this.applyRCMOnPurchase = true;
        }
        
        this.GTAApplicable= new Wtf.form.Checkbox({
            name:'GTAApplicable',
            id:"GTAApplicable"+this.id,
            fieldLabel:"<span wtf:qtip="+WtfGlobal.getLocaleText("acc.compref.india.rcm.applicable")+">"+WtfGlobal.getLocaleText("acc.compref.india.rcm.applicable")+"</span>",
            checked: false,
            hideLabel: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA ||  this.isExciseTab || this.isExpenseInv || !(this.applyRCMOnPurchase || isApplyRCMOnSAles ),// Only for Indian company & for vendor & Non Excise Invoice
            hidden: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA ||  this.isExciseTab || this.isExpenseInv || !(this.applyRCMOnPurchase || isApplyRCMOnSAles),
            cls : 'custcheckbox',
            width: 10
        });
        /**
         * isMerchantExporter check for IDNIA country only
         */
        var isMerchantExporterVisible = false;
        if(WtfGlobal.isIndiaCountryAndGSTApplied() && ( Wtf.isMerchantExporterVisible.indexOf(parseInt(this.moduleid))> -1)){
            isMerchantExporterVisible =true;
        }
        this.isMerchantExporter= new Wtf.form.Checkbox({
            name:'isMerchantExporter',
            id:"isMerchantExporter"+this.id,
            fieldLabel:"<span wtf:qtip="+WtfGlobal.getLocaleText("acc.gstrr.gstrule.isMerchantExporter.qtip")+">"+WtfGlobal.getLocaleText("acc.gstrr.gstrule.isMerchantExporter")+"</span>", // is MerchantExporter?
            checked: false,
            hideLabel: !isMerchantExporterVisible,// Only for Indian company
            hidden: !isMerchantExporterVisible,
            cls : 'custcheckbox',
            width: 10
        });
        this.ExciseTypeStore = new Wtf.data.SimpleStore({
            fields: [{
                name:'id',
                type:'string'
            }, 'name'],
            data :[
            ["1","Regular Rate"],
            ["2","Exempt Excise Sales"],
            ["3","Exports"],
            ["4","Export-Duty Chargeable"],
            ["5","Captive Consumption"],
            ["6","Removal As Such"],
            ["7","Special Rate"]]
        });
        this.ExciseType=new Wtf.form.ComboBox({
            fieldLabel:!this.isCustomer? "": WtfGlobal.getLocaleText("acc.invoice.exciseSales") +"*", 
            name:'excisetypeid',
            store:this.ExciseTypeStore,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            width : 240,
            hidden:Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA || !this.isCustomer || !this.isExciseTab || Wtf.account.companyAccountPref.registrationType == Wtf.registrationTypeValues.DEALER,
            hideLabel:Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA || !this.isCustomer || !this.isExciseTab || Wtf.account.companyAccountPref.registrationType == Wtf.registrationTypeValues.DEALER,
            listWidth:400,
            hiddenName:'excisetypeid',
            emptyText:!this.isCustomer? "":WtfGlobal.getLocaleText("acc.invoice.selectExciseSales"),
            forceSelection:true,
            allowBlank:Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA || !this.isCustomer || !this.isExciseTab || Wtf.account.companyAccountPref.registrationType == Wtf.registrationTypeValues.DEALER,
            triggerAction:'all'
        });
        this.ShowOnlyOneTime.on('check',function(){
                    this.Name.reset();
                    this.personstore.load();
        },this); 

        this.FormType.on('select',function(){
            this.Grid.getStore().removeAll();
            this.Grid.addBlankRow(); 
        },this);
        /**
         * On Is Merchant Exporter value change
         */
        if(WtfGlobal.isIndiaCountryAndGSTApplied()){
            this.isMerchantExporter.on('change',function(o,newval,oldval){ // On is Merchant Export check change
                if (this.Name.getValue() == '') {
                    this.isMerchantExporter.setValue(oldval);
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), this.isCustomer ? WtfGlobal.getLocaleText("acc.mp.selectCustFirst") : WtfGlobal.getLocaleText("acc.mp.selectVenFirst")], 2);
                    return;
                }
                /**
                 * If customer/Vendor GST Registration Type is 'Registered' and Customer/Vendor type is 'NA'
                 * then only allow to create merchant exporter transaction
                 */
                if (!(this.CustVenTypeDefaultMstrID != undefined && this.GSTINRegTypeDefaultMstrID != undefined
                        && this.CustVenTypeDefaultMstrID == Wtf.GSTCUSTVENTYPE.NA
                        && this.GSTINRegTypeDefaultMstrID == Wtf.GSTRegMasterDefaultID.Regular)) {
                    this.isMerchantExporter.setValue(oldval);
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), this.isCustomer ? WtfGlobal.getLocaleText("acc.gstrr.isMerchantExporter.error.customer") : WtfGlobal.getLocaleText("acc.gstrr.isMerchantExporter.error.vendor")], 2);
                    return;
                }
                if (this.Grid.getStore().getCount() > 1) {
                    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoice.gridDataWillCleared"), function(btn) {
                        if (btn == "yes") {
                            this.Grid.getStore().removeAll();
                            this.Grid.addBlankRow();
                            this.updateSubtotal(this, true);
                            this.Grid.updateTermDetails();
                        } else {
                            o.setValue(oldval);
                        }
                    }, this);
                }
            },this);
        }
        this.GTAApplicable.on('change',function(o,newval,oldval){ // On check change reset product grid
             /**
             * Show alert if Including GST check alrady ON and trying to ativate RCM applicable Check
             */
            if (WtfGlobal.isIndiaCountryAndGSTApplied()) {
                if (this.includingGST && this.includingGST.getValue()) {
                    this.GTAApplicable.setValue(oldval);
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.common.rcm.applicable.including.gst.notallowed")], 2);
                    return;
                }
            }
            //ERP-34970(ERM-534)
            if(Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA &&  this.GTAApplicable.getValue() && this.isCustomer) {
                var extraparams = {};
                /**
                * If custmer / Vendor Not selected then RCM check changes
                */
                if (this.Name.getValue() == '') {
                    this.GTAApplicable.setValue(oldval);
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), this.isCustomer ? WtfGlobal.getLocaleText("acc.mp.selectCustFirst") : WtfGlobal.getLocaleText("acc.mp.selectVenFirst")], 2);
                    return;
                }
                if (this.personstore.getCount() > 0) {
                    /**
                     * Find record on Selected customer/ Vendor compbo
                     */
                    var index=WtfGlobal.searchRecordIndex(this.personstore,this.Name.getValue(),'accid');
                    if(index!=-1){
                        var record =  this.personstore.getAt(index);
                        extraparams.record = record;
                        var isValid = isRCMValidCustomer(this, extraparams);
                        if(!isValid){
                            return ;
                        }
                    }
                }
            }
            if (this.Grid.getStore().getCount() > 1) {
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoice.gridDataWillCleared"), function(btn) {
                    if (btn == "yes") {
                        this.Grid.getStore().removeAll();
                        this.Grid.addBlankRow();
                        this.updateSubtotal(this, true);
                        this.Grid.updateTermDetails();

                    } else {
                        o.setValue(oldval);
                    }
                }, this);
            }
        },this);
         this.editedBy = new Wtf.form.TextField({
            //fieldLabel: WtfGlobal.getLocaleText("acc.field.ShipVia"),
             fieldLabel:  WtfGlobal.getLocaleText("acc.field.LastEditedBy"),
            name: 'lasteditedby',
            id:"lasteditedby"+this.heplmodeid+this.id,
//            anchor: '94%',
            width : 240,
            maxLength: 255,
            disabled:true,
            scope: this,
            hidden: (this.isEdit && !this.templateId) ?false:true,
            hideLabel:(this.isEdit && !this.templateId)?false:true
        });
     
        this.deliveryTime = new Wtf.form.TextField({
            fieldLabel: WtfGlobal.getLocaleText("acc.field.deliveryTime"), // "Delivery Time";
            name: 'deliveryTime',
            id: "deliveryTime" + this.heplmodeid + this.id,
            width: 240,
            maxLength: 255,
            scope: this,
            hidden: !(Wtf.account.companyAccountPref.deliveryPlanner && this.moduleid == Wtf.Acc_Invoice_ModuleId),
            hideLabel: !(Wtf.account.companyAccountPref.deliveryPlanner && this.moduleid == Wtf.Acc_Invoice_ModuleId)
        });
        /*------------ 
         *  Landing Cost Module Default Fields  
         *--------------*/
         Wtf.landingCostCategoryStore.on('load', function(){
            if(Wtf.landingCostCategoryStore.find('id',"NOT APPLICABLE")<0){
                var re = new Wtf.data.Record({
                    id: "NOT APPLICABLE",
                    name: "NOT APPLICABLE",
                    allocationtypevalue:""
                });
                Wtf.landingCostCategoryStore.insert(0, re);
            }           
        },this);
        chkLandingCostCategoryload();
        this.landingCostCategoryCombo =  new Wtf.form.ExtFnComboBox({
            fieldLabel: WtfGlobal.getLocaleText("acc.invoice.landingCostCategory"), // "Landing Cost Category",
            name: "landingCostCategoryCombo", 
            hiddenName:'landingCostCategoryCombo',
            id: 'landingCostCategoryCombo' + this.id,
            store: Wtf.landingCostCategoryStore,
            width: 240,
            extraFields:['allocationtypevalue'],
            allowBlank: !(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId), //ERP-30222[SJ]
            hidden:!(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId),//ERP-30222[SJ]
            hideLabel:!(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId),//ERP-30222[SJ]
            typeAhead: true,
            extraComparisionField:'allocationtypevalue',// type ahead search on acccode as well.
            typeAheadDelay:30000,
            valueField: 'id',
            displayField: 'name',
            mode: 'local',
            scope:this,
            triggerAction: 'all',
            disabled:true
        });
        

        //Button  landed Category Manual Product Amount Window
       this.landingCostCategoryWindowBtn= new Wtf.Button({
        text: WtfGlobal.getLocaleText("acc.landedcost.grid.column.landedcostcategory"),
        scope:this,
        handler: this.openWindow,        
        hidden:!(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId),//ERP-30222[SJ]        
        disabled:true
    });
        
        
        var itemArr=[];
        /**
         * this.isEditTemplate - push moduleTemplateName fields in array
         */
        if(this.isTemplate || this.isEditTemplate){
            itemArr.push(this.moduleTemplateName);
            //itemArr.push(this.UnitModuleTemplate);
        }
        if(this.isTemplate){
            itemArr.push(this.createAsTransactionChk);
            //itemArr.push(this.UnitModuleTemplate);
        }
            itemArr.push(this.templateModelCombo,this.ShowOnlyOneTime, this.Name,this.manufacturerTypeCombo, this.invoiceType, this.defaultNatureOfPurchase,this.Currency,{
                layout:'column',
                border:false,
                defaults:{border:false},items:[ {
                    layout:'form',
                    ctCls : (this.cash)?"hidden-from-item1":"",
                    items:this.fromPO
                },{
                    layout:'form',
                    ctCls : (this.cash)?"hidden-from-item1":"",
                    labelWidth:45,
                    bodyStyle:"padding-left:10px;",  //    ERP-12877
                    items:this.fromLinkCombo
               }]},this.explodeLinkAP,this.PO,this.blockSOPO,this.sequenceFormatCombobox,this.Number,this.billDate,this.shippingTerm,
            this.CustomerPORefNo,this.SupplierInvoiceNo,this.importExportDeclarationNo, this.CostCenter,this.isdropshipDocument,this.FormType,this.AdjustAdvancePayments,this.customerBankAccountType,this.GTAApplicable,this.isMerchantExporter,this.ExciseType,this.isMaintenanceOrderCheckBox,this.maintenanceNumberCombo,this.youtReftxt,this.delytermtxt,this.invoiceTotxt);
            
            if(this.isIndonesian){
                itemArr.push(this.isCreditable);
                if (this.additionalMemoComboBox){
                    itemArr.push(this.additionalMemoComboBox);
                }
            }
            itemArr.push(this.editedBy,this.deliveryTime,this.capitalGoodsAcquired,this.isRetailPurchase,this.importService,this.RMCDApprovalNo);
            
            
        /**
         * Add Unit module template combo if Company is INDIAN and Multiple Excise unit check ON from Company Pref. and is template and is view template cehcks true
         */
        if((Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.exciseMultipleUnit)){
            if (this.isViewTemplate && this.templateId!=undefined){
                itemArr.splice(1,0,this.UnitModuleTemplate); // Add element in particular index position
            } else if(this.isTemplate || this.isEditTemplate){
                itemArr.splice(2,0,this.UnitModuleTemplate); // Add element in particular index position
            }
        }
        /**
         * Show following two check box for create edit and view case template only
         */
        if((this.isTemplate || this.isViewTemplate || this.isEditTemplate) && !this.readOnly){
            itemArr.push(this.populateproductfortemplate);
            itemArr.push(this.populatecustomerfortemplate);
        }
          this.tagsFieldset = new Wtf.account.CreateCustomFields({
            border: false,
            compId:"northForm"+this.id,
            parentObjScope: this,
            autoHeight: true,
            isViewMode:this.isViewTemplate,
            parentcompId:this.id,
            moduleid: this.moduleid,
            isEdit: this.isEdit || this.copyInv ,
            record: this.record,
            iscallFromTransactionsForm: (this.invoicefromorder ||this.isPOfromSO ||this.isSOfromPO)
        });
        
       var ht=(this.isOrder?(Wtf.isIE?260:360):(Wtf.isIE?360:300));
       if(this.isCustBill)ht+=25;
       if(!(this.quotation || !this.isCustomer || this.isOrder)) {
           ht+=160;
       }
       
       if(this.isTemplate){
           ht+=(this.isOrder?100:10);
       }
       
       if(this.createTransactionAlso){
           ht+=50;
       }
       //if(!this.isCustBill && !this.isOrder && !this.cash && this.isCustomer)ht+=25;
       
       /*if(this.moduleid=='2' || this.moduleid=='3')
           ht+=90;
       */
       
       // For link the Vendor Invoice Number (landed invoice)
       this.InvoiceRec = Wtf.data.Record.create ([
           {name:'billid'},
           {name:'billno'}
       ]);
       this.InvoiceStoreUrl = "ACCGoodsReceiptCMN/getGoodsReceiptsMerged.do";
       this.InvoiceStore = new Wtf.data.Store({
           url:this.InvoiceStoreUrl,
           baseParams: {
               cashonly:false,
               consolidateFlag:false,
               creditonly:false,
               isOutstanding:false,
               isfavourite:false,
               ispendingpayment:false,
               nondeleted:true,
               excludeInvoiceId : (this.isEdit && !this.copyInv)? this.record.data.billno : "",
               excludeLinkedConsignments:true,
               report:true,
               companyids:companyids,
               gcurrencyid:gcurrencyid,
               userid:loginid,
               consignmentNoForGr:this.consignmentNoForGr,
               isInvoice:this.isInvoice,
               isCallForLandedCostInvoices: (Wtf.account.companyAccountPref.isActiveLandingCostOfItem && Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA)
               
           },
           reader: new Wtf.data.KwlJsonReader({
               root: "data",
               totalProperty:'count'
           },this.InvoiceRec)
       });
       
       if(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId ) {           
           this.InvoiceStore.load();           
       }
       
//       if ((Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)) || (this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId || this.moduleid == Wtf.Acc_Sales_Order_ModuleId || (this.moduleid == Wtf.Acc_Invoice_ModuleId && this.isInvoice))) {
//              this.productComboStore.load();
//       }
//       this.invoiceList = new Wtf.form.ComboBox({
//           fieldLabel:WtfGlobal.getLocaleText("acc.invoice.consignmentNumber"), // "Consignment Number"
//           id: "consignmentnumber" + this.heplmodeid + this.id,
//           store: this.InvoiceStore,
//           displayField:'billno',
//           valueField:'billid',
//           emptyText:WtfGlobal.getLocaleText("acc.invoice.consignmentNumberEmptyText"), // 'Select Consignment Number',
//           mode: 'local',
//           width: 240,
//           name:'landedInvoiceID',
//           hiddenName:'landedInvoiceID',
//           hidden: (SATSCOMPANY_ID==companyid)?true:!(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash),
//           hideLabel: (SATSCOMPANY_ID==companyid)?true:!(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash),
//           triggerAction: 'all',
//           forceSelection: true,
//           selectOnFocus:true,
//           scope:this,
//           listeners:{
//               'select':{
//                   fn:this.handleProductTypeForConsignment,
//                   scope:this
//               }
//           }
//       });
       this.invoiceListconfig = {
            hiddenName:"landedInvoiceID",  
            store: this.InvoiceStore,
            displayField:'billno',
            valueField:'billid',
            mode: 'local',
            typeAhead: true,
            selectOnFocus:true,                            
            allowBlank:true,
            triggerAction:'all',
            scope:this,
            listeners: {
                scope: this,
                'select': {
                    fn: this.handleProductTypeForConsignment
                },
//                },
                'change': function (combo, oldval, newval) {
                    if (this.isExpenseInv && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && Wtf.account.companyAccountPref.isActiveLandingCostOfItem) {
                        if (combo.getValue() == "" && !this.readOnly) {
                            this.landingCostCategoryCombo.allowBlank = true;
                            this.landingCostCategoryCombo.clearValue();
                            this.manualLandedCostCategory = "";
                            this.landingCostCategoryCombo.setValue('');
                            this.landingCostCategoryCombo.disable();                            
                        } else {
                            if (combo.getValue() != "" && this.isEdit && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && Wtf.account.companyAccountPref.isActiveLandingCostOfItem) {
                                var valuearr = combo.getValue().split(",");
                                if (valuearr!=undefined && valuearr[0] == "") {
                                    combo.setValue(combo.getValue().replace(",", ""));  //remove the leading comma during procurement Invoice Selection   
                                }
                            }
                            this.readOnly ? this.landingCostCategoryCombo.disable() : this.landingCostCategoryCombo.enable();                            
                        }
                    }
                }
            }
        };
       this.invoiceList = new Wtf.common.Select(Wtf.applyIf({
            multiSelect:Wtf.account.companyAccountPref.isActiveLandingCostOfItem,
            fieldLabel:"<span wtf:qtip='"+WtfGlobal.getLocaleText("acc.invoice.procurementNumber.tooltip") +"'>"+WtfGlobal.getLocaleText("acc.invoice.procurementNumber")+"</span>", // "Procurement Number"
            id: "consignmentnumber" + this.heplmodeid + this.id,
            name:'landedInvoiceID',
            disabled:true,
            hidden: (SATSCOMPANY_ID==companyid)?true:!(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId ),//ERP-30194
            hideLabel: (SATSCOMPANY_ID==companyid)?true:!(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId),//ERP-30194
            width: 240,
            scope:this
        },this.invoiceListconfig));
    
        //ERM-447 procurement number (PI) of expense invoice should not be duplicate for edit or copy case in the combobox hence passing excluded id here  
        if (this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && Wtf.account.companyAccountPref.isActiveLandingCostOfItem && (this.isEdit || this.copyInv)) {
            if (this.record.data.isexpenseinv) {
                this.invoiceList.store.baseParams.excludeInvoiceId = this.record.data.landedInvoiceNumber;
            }
        }
       
        var itemArr2=[];
        itemArr2.push(this.shipDate,this.Term,this.DueDate,{
            itemCls : "",
            layout:'column',
            border:false,
            defaults:{
                border:false
            },
            items:[{
                layout:'form',
                columnWidth:0.55,
                items:this.Discount
            },{
                columnWidth:0.45,
                layout:'form',
                items:this.perDiscount
            }]
        },this.Memo,this.shipvia, this.fob,this.includingGST,this.includeProTax, this.applyTaxToTermsChk, this.validTillDate, this.partialInvoiceCmb,this.partialInvAmount,this.template,this.templateID,this.users,this.lockQuantity,this.reserveStock,this.invoiceList,this.landingCostCategoryCombo,this.landingCostCategoryWindowBtn,this.generateReceipt,this.autoGenerateDO,this.sequenceFormatComboboxDo,this.no,this.applyGlobalDiscount,this.globalDiscountType,this.globalDiscount,this.delydatetxt,this.projecttxt,this.depttxt,this.requestortxt,this.mernotxt,this.pmtMethod,this.pmtMethodAcc,this.shipLength,this.cashReceived);
        
        if(this.isMRPJOBWORKOUT != undefined && this.isMRPJOBWORKOUT == true){
            itemArr.push(this.workOrder,this.productNameCombo,this.productQuantity, this.exiceseDutyCharges);
            itemArr2.push(this.dateOfshipment,this.dateofdelivery,this.jobWorkLocation,this.shipmentRoute,this.gatepass, this.otherRemarks);
        }
        
        if(this.moduleid == Wtf.Acc_Sales_Order_ModuleId && !this.isTemplate){
             // Added advance payment combo in sales order form
            var advancePaymentRec = Wtf.data.Record.create([
            {name: 'documentno', mapping: 'billno'},
            {name: 'date', type: 'string'},
            {name: 'amount', type: 'float'},
            {name: 'amountdue', type: 'float'},
            {name: 'exchangeratefortransaction'},
            {name: 'currencysymboltransaction'},
            {name: 'currencyidtransaction'},
            {name: 'currencynametransaction'},
            {name: 'currencyname'},
            {name: 'currencyid'},
            {name: 'documentid', mapping: 'billid'},
            {name: 'amountDueOriginal', type: 'float'},
            {name: 'amountDueOriginalSaved', type: 'float'},
            {name: 'accountid'},
            {name: 'recTermAmount'},
            {name: 'LineTermdetails'},
            {name: 'accountnames'}
            ]);
            
            var advancePaymentStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
            root: "data",
                    totalProperty: "count"
            }, advancePaymentRec),
                    url: this.isCustomer ? "ACCReceiptCMN/getAdvanceCustomerPaymentForRefunds.do" : "ACCVendorPaymentCMN/getAdvanceVendorPaymentForRefunds.do",
                    baseParams: {
                            onlyAmountDue: true,
//                            accid: this.personInfo.accid,
                            deleted: false,
                            nondeleted: true,
                            currencyfilterfortrans:this.Currency.getValue(),
                            isReceipt: this.isCustomer,
                            upperLimitDate: this.billDate.getValue(),
                            billId: this.billid,
                            isEdit: this.isEdit,
                            requestModuleid: this.moduleid,
                            applyFilterOnCurrency : true
                    }
            });
            advancePaymentStore.on("beforeload", function () {
                this.advancePaymentCombo.store.baseParams.accid = this.Name.getValue();
                this.advancePaymentCombo.store.baseParams.currencyfilterfortrans = this.Currency.getValue();
             //ERP-39926
             if(this.billDate.getValue()!="" && this.billDate.getValue()!=undefined){
                    this.advancePaymentCombo.store.baseParams.enddate = WtfGlobal.convertToGenericEndDate(this.billDate.getValue());
                }
            }, this);
            advancePaymentStore.on("loadexception", function () {
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.error"), WtfGlobal.getLocaleText("acc.mp.unableToLoadData")], 1);
            }, this);

            this.advancePaymentCombo = new Wtf.form.ExtFnComboBox({
                labelWidth: 100,
                addNoneRecord: true,
                triggerAction: 'all',
                mode: 'local',
                valueField: 'documentid',
                displayField: 'documentno',
                store: advancePaymentStore,
                disabled: this.readOnly,
                listWidth: 100,
                extraFields: ['date', 'amountdue'],
                forceSelection: true,
                emptyText:  WtfGlobal.getLocaleText("acc.salesorder.soAdvReciept"),
//                id: 'advancepaymentid123',
                fieldLabel:  WtfGlobal.getLocaleText("acc.salesorder.soAdvReciept"),
                fieldLabel: WtfGlobal.getLocaleText("acc.salesorder.soAdvReciept")
//                allowBlank: false,
             });            
            itemArr2.push(this.advancePaymentCombo);
        }
       
       this.NorthForm=new Wtf.form.FormPanel({
            region:'north',
            autoHeight:true,
            id:"northForm"+this.id,
            border:false,
            disabledClass:"newtripcmbss",
            //disabled:this.isViewTemplate,
            items:[{
                layout:'form',
                baseCls:'northFormFormat',
                defaults:{labelWidth:180},//    ERP-9886
                cls:"visibleDisabled",
                items:[{
                    layout:'column',
                    border:false,
                    defaults:{border:false},
                    items:[{
                        layout:'form',
                        columnWidth:0.55,
                        border:false,
                        items:itemArr
                    },{
                        layout:'form',
                        columnWidth:0.45,
                        border:false,
                        items:itemArr2
                    }]
            }, this.tagsFieldset]
            }]
        });
        this.NorthForm.on('render',function(){
            this.termds.load({
                params: {               
                    cash_Invoice:this.cash
                }
            });
            this.termds.on("load",function(){
                if(this.autoGenerateDO.getValue() ){
                    this.showDO();
                }else{
                    this.hideDO();
                }
                if(this.maintenanceNumberCombo && !(this.isEdit && !this.copyInv && WtfGlobal.getModuleId(this)==20)){  //Exludes the case of editing the SO
                    WtfGlobal.hideFormElement(this.maintenanceNumberCombo);
                }
                if(this.isTemplate && !this.createTransactionAlso) {
                    WtfGlobal.hideFormElement(this.sequenceFormatCombobox);
                    WtfGlobal.hideFormElement(this.Number);
                }
            },this);
        

        },this);
        /*To show and hide open PO and SO information depending on system preferences check*/
        if(Wtf.account.companyAccountPref.openPOandSO){
            this.productDetailsTplSummary=new Wtf.XTemplate(
                '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',            
                '<div><hr class="templineview"></div>',
                '<div>',
                '<table width="100%">'+
                '<tr>'+
                '<td style="width:25%;"><b>'+WtfGlobal.getLocaleText("acc.field.ProductName")+'</b></td><td style="width:55%;"><span wtf:qtip="{productname}">'+Wtf.util.Format.ellipsis('{productname}',60)+'</span></td>'+                   
                '</tr>'+
                '<tr>'+
                '<td><b>'+WtfGlobal.getLocaleText("acc.field.InStock")+': </b></td><td style="width:10%;">{qty}</td>'+
                '</tr>'+
                '<tr>'+
                "<td><b>"+WtfGlobal.getLocaleText("acc.field.OpenPO")+": </b></td><td style='width:10%;'><a href='#' onclick='Showproductdetails(\"{productid}\",\"{productname}\",false)'>{poqty}</a></td>"+  
                '</tr>'+
                '<tr>'+
                "<td><b>"+WtfGlobal.getLocaleText("acc.field.OpenSO")+": </b></td><td style='width:30%;'><a href='#' onclick='Showproductdetails(\"{productid}\",\"{productname}\",true)'>{soqty}</a></td>"+         //provided link on wich we will get product quantity details
                '</tr>'+                       
                '<tr>' +
                "<td><b>"+WtfGlobal.getLocaleText("acc.field.BlockSO")+": </b></td><td style='width:10%;'><a href='#' onclick='callSalesByProductAgainstSalesOrder(true,\"{productid}\")'>{blockqty}</a></td>"+
                '</tr>' +
                '<tr>' +
                '<td><b>'+WtfGlobal.getLocaleText("acc.field.SalableStock")+': </b></td><td style="width:10%;">{salableStock}</td>'+
                '</tr>' +
                '<tr>' +
                '<td><b>'+WtfGlobal.getLocaleText("acc.field.ReserveStock")+': </b></td><td style="width:10%;">{reserveStock}</td>'+
                '</tr>' +
                '</table>'+
                '</div>',            
                '<div><hr class="templineview"></div>',                        
                '</div>'
            );
        }else{
                this.productDetailsTplSummary=new Wtf.XTemplate(
                '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',            
                '<div><hr class="templineview"></div>',
                '<div>',
                '<table width="100%">'+
                '<tr>'+
                '<td style="width:25%;"><b>'+WtfGlobal.getLocaleText("acc.field.ProductName")+'</b></td><td style="width:55%;"><span wtf:qtip="{productname}">'+Wtf.util.Format.ellipsis('{productname}',60)+'</span></td>'+                   
                '</tr>'+
                '<tr>'+
                '<td><b>'+WtfGlobal.getLocaleText("acc.field.InStock")+': </b></td><td style="width:10%;">{qty}</td>'+
                '</tr>'+
                '</table>'+
                '</div>',            
                '<div><hr class="templineview"></div>',                        
                '</div>'
            );
        }    
        this.productWeightDetailsTplSummary=new Wtf.XTemplate(
            '<div> &nbsp;</div>',
            '<div style="padding: 5px; border: solid rgb(153, 187, 232);border-width: 1px 1px 1px 1px;">', 
            '<div><hr class="templineview"></div>',
            '<div>',
            '<table width="100%">',
            '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductWeight")+': </b></td><td text-align=right>{totalprdweight}</td></tr>',
            '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductWeightWithPackaging")+': </b></td><td text-align=right>{totalprdweightwithpack}</td></tr>',
            '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductVolume")+': </b></td><td text-align=right>{totalprdvolume}</td></tr>',
            '<tr><td><b>'+WtfGlobal.getLocaleText("acc.productList.totalProductVolumeWithPackaging")+': </b></td><td text-align=right>{totalprdvolumewithpack}</td></tr>',
            '</table>',
            '</div>',            
            '<div><hr class="templineview"></div>',                        
            '</div>'
        );
        
        if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
            this.productProfitMarginTplSummary=new Wtf.XTemplate(
                '<div> &nbsp;</div>',
                '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',            
                '<div><hr class="templineview"></div>',
                '<div>',
                '<table width="100%">'+
                '<tr>'+
                '<td style="width:20%;" text-align=left></td>'+
                '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.field.ProductSellingPrice")+'</b></td>'+
                '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.field.ProductCost")+'</b></td>'+
                '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.field.ProfitMargin")+'</b></td>'+
                '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.field.ProfitMargin(%)")+'</b></td>'+
                '</tr>'+
                '<tr>'+
                '<td style="width:20%;" text-align=left><b>'+WtfGlobal.getLocaleText("acc.field.TotalProfitMargin(ProductOnly)")+': </b></td>'+
                '<td style="width:20%;" text-align=right>{totalproductsellingprice}</td>'+  
                '<td style="width:20%;" text-align=right>{totalproductcost}</td>'+ 
                '<td style="width:20%;" text-align=right>{totalproductprofitmargin}</td>'+ 
                '<td style="width:20%;" text-align=right>{totalprodcutprofitmarginpercent}</td>'+ 
                '</tr>'+
                '<tr>'+
                '<td style="width:20%;" text-align=left><b>'+WtfGlobal.getLocaleText("acc.field.TotalProfitMargin(ServiceProduct)")+': </b></td>'+
                '<td style="width:20%;" text-align=right>{totalservicesellingprice}</td>'+  
                '<td style="width:20%;" text-align=right>{totalservicecost}</td>'+ 
                '<td style="width:20%;" text-align=right>{totalserviceprofitmargin}</td>'+ 
                '<td style="width:20%;" text-align=right>{totalserviceprofitmarginpercent}</td>'+ 
                '</table>'+
                '</div>', 
                '<div><hr class="templineview"></div>',
                '<div>',
                '<table width="100%">'+
                '<tr>'+
                '<td style="width:20%;" text-align=left><b>'+WtfGlobal.getLocaleText("acc.field.TOTALPROFITMARGIN(PRODUCT+SVE)")+': </b></td>'+
                '<td style="width:20%;" text-align=right>{finalproductsellingprice}</td>'+  
                '<td style="width:20%;" text-align=right>{finalproductcost}</td>'+ 
                '<td style="width:20%;" text-align=right>{finalproductprofitmargin}</td>'+ 
                '<td style="width:20%;" text-align=right>{finalproductprofitmarginpercent}</td>'+ 
                '</table>'+
                '</div>',            
                '<div><hr class="templineview"></div>',                        
                '</div>'
            );
        }
        var blockSpotRateLink_first = "";
        var blockSpotRateLink_second = "";
        if(!Wtf.account.companyAccountPref.activateToBlockSpotRate && !this.isLinkedTransaction){ // If activateToBlockSpotRate is set then block the Spot Rate Links and when transaction already linked in another transaction.
            blockSpotRateLink_first = WtfGlobal.getLocaleText("acc.invoice.msg9")+"</div><div style='padding-left:30px;padding-top:5px;padding-bottom:10px;'><a class='tbar-link-text' href='#' onClick='javascript: editInvoiceExchangeRates(\""+this.id+"\",\"{foreigncurrency}\",\"{basecurrency}\",\"{revexchangerate}\",\"foreigntobase\",\"{isGRNlinkedwithPI}\")'wtf:qtip=''>{foreigncurrency} to {basecurrency}</a>";
            blockSpotRateLink_second = WtfGlobal.getLocaleText("acc.invoice.msg9")+"</div> <div style='padding-left:30px;padding-top:5px;'><a class='tbar-link-text' href='#' onClick='javascript: editInvoiceExchangeRates(\""+this.id+"\",\"{basecurrency}\",\"{foreigncurrency}\",\"{exchangerate}\",\"basetoforeign\",\"{isGRNlinkedwithPI}\")'wtf:qtip=''>{basecurrency} to {foreigncurrency}</a></div>";
        }
       this.southCenterTplSummary=new Wtf.XTemplate(
    "<div> &nbsp;</div>",  //Currency:
             '<tpl if="editable==true">',
         "<b>"+WtfGlobal.getLocaleText("acc.invoice.msg8")+"</b>",  //Applied Exchange Rate for the current transaction:
           "<div style='line-height:18px;padding-left:30px;'>1 {foreigncurrency} "+WtfGlobal.getLocaleText("acc.inv.for")+" = {revexchangerate} {basecurrency} "+WtfGlobal.getLocaleText("acc.inv.hom")+". "+
         blockSpotRateLink_first,
         "</div><div style='line-height:18px;padding-left:30px;'>1 {basecurrency} "+WtfGlobal.getLocaleText("acc.inv.hom")+" = {exchangerate} {foreigncurrency} "+WtfGlobal.getLocaleText("acc.inv.for")+". "+    
         blockSpotRateLink_second,
             '</tpl>'
        );
            
        this.INDCountryCenterTplSummary=new Wtf.XTemplate(
                '<div> &nbsp;</div>',
                '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',            
                '<div><hr class="templineview"></div>',
                '<div>',
                '<table width="100%">'+
                '<tr>'+
                '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.vat")+'</b></td>'+
                '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.cst")+'</b></td>'+
                '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.pan")+'</b></td>'+
                '</tr>'+
                '<tr>'+
                '<td style="width:20%;" text-align=left>{CompanyVATNumber}</td>'+
                '<td style="width:20%;" text-align=right>{CompanyCSTNumber}</td>'+  
                '<td style="width:20%;" text-align=right>{CompanyPANNumber}</td>'+ 
                '</tr>'+
                '<tr>'+
                '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.service")+'</b></td>'+
                '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.tan")+'</b></td>'+
                '<td style="width:20%;" text-align=right><b>'+WtfGlobal.getLocaleText("acc.setupwizard.ecc")+'</b></td>'+
                '</tr>'+
                '<tr>'+
                '<td style="width:20%;" text-align=right>{CompanyServiceTaxRegNumber}</td>'+ 
                '<td style="width:20%;" text-align=right>{CompanyTANNumber}</td>'+ 
                '<td style="width:20%;" text-align=right>{CompanyECCNumber}</td>'+ 
                '</tr>'+
                '</table>'+
                '</div>',            
                '<div><hr class="templineview"></div>',                        
                '</div>'
            );
        this.INDCountryCenterTpl=new Wtf.Panel({
            id:'INDCountryCenterTpl'+this.id,
            border:false,
            width:'95%',
            baseCls:'tempbackgroundview',
            hidden: WtfGlobal.GSTApplicableForCompany()!=Wtf.GSTStatus.OLDNEW,
            html:this.INDCountryCenterTplSummary.apply({
                CompanyVATNumber:this.isCustomer?Wtf.CompanyVATNumber:"",
                CompanyCSTNumber:this.isCustomer?Wtf.CompanyCSTNumber:"",
                CompanyPANNumber:this.isCustomer?Wtf.CompanyPANNumber:"",
                CompanyServiceTaxRegNumber:this.isCustomer?Wtf.CompanyServiceTaxRegNumber:"",
                CompanyTANNumber:this.isCustomer?Wtf.CompanyTANNumber:"",
                CompanyECCNumber:this.isCustomer?Wtf.CompanyECCNumber:""

            })
        }); 
        
        var taxAmountPlaceHolder = '{taxAmount}';
        var totalTaxAmountPlaceHolder = '{TotalTaxAmt}';
        if (this.isCustomer ? !Wtf.dispalyUnitPriceAmountInSales : !Wtf.dispalyUnitPriceAmountInPurchase) {
            /**
             * To hide tax amounts for user who doesn't have permission to see unit price in transactions
             */
            taxAmountPlaceHolder = Wtf.UpriceAndAmountDisplayValue;
            totalTaxAmountPlaceHolder = Wtf.UpriceAndAmountDisplayValue;
        }
        this.LineLevelTermTplSummary = new Wtf.XTemplate(
            '<div> &nbsp;</div>',
            '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',    
            '<div><hr class="templineview"></div>',
            '<div class ="currency-view">',
            '<table width="95%">',
            '<tpl for="lineLevelArray">',
                '<tr><td><b>{name} Amount </b></td><td style="text-align:right;">' + taxAmountPlaceHolder + ' </td></tr>',
            '</tpl>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '<table width="95%">',
            '<tr><td><b>'+WtfGlobal.getLocaleText("acc.invoice.TotalTaxAmt")+' </b></td><td style="text-align:right;">' + totalTaxAmountPlaceHolder + ' </td></tr>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '</div>'
        );
        this.TDSCalculationDetailsTplSummary = Wtf.isTDSApplicable ? new Wtf.XTemplate(
            '<div> &nbsp;</div>',
            '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',    
            '<table width="95%">',
            '<tr><td><b>TDS Details</b></td></tr>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '<div class ="currency-view">',
            '<table width="95%">',
            '<tr><td><b>Deductee Type </b></td><td text-align=right>{deducteetype}</td></tr>',
            '</table>',
            '<table width="95%">',
            '<tpl for="tdsNOPArray">',
                '<tr><td><b>NOP:</b> {natureofpayment}</td><td><b>Rate:</b> {tdsrate}</td><td><b>Amount :</b> {tdsamount}</td></tr>',
            '</tpl>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '<table width="95%">',
            '<tr><td><b>TDS Calculated on (Depending upon user\'s settings)</b></td></tr>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '<table width="95%">',
            '<tr><td><b>Basic </b></td><td text-align=right>{subtotalamount}</td></tr>',
            '<tpl for="lineLevelArray">',
                '<tr><td><b>{name} Amount </b></td><td text-align=right>{taxAmount}</td></tr>',
            '</tpl>',
            '<tr><td><b>Global Level Invoice Terms </b></td><td text-align=right>{globalleveltermamount}</td></tr>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '<table width="95%">',
            '<tr><td><b>Total amount paid or credited </b></td><td text-align=right>{totalinvoiceamount}</td></tr>',
            '<tr><td><b>TDS to be made (a)</b></td><td text-align=right>{totaltdsamount}</td></tr>',
            '<tr><td><b> TDS on Advances Paid (-b)</b></td><td text-align=right>{TotalAdvanceTDSAdjustmentAmt}</td></tr>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '<table width="95%">',
            '<tr><td><b> Net TDS Amount (a-b) </b></td><td text-align=right>{nettdsamount}</td></tr>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '</div>'
        ) : new Wtf.XTemplate(
            '<div> &nbsp;</div>',
            '<div style="padding: 5px; border: 1px solid rgb(153, 187, 232);">',    
            '<table width="95%">',
            '<tr><td><b>TDS Details</b></td></tr>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '<div class ="currency-view">',
            '<table width="95%">',
            '<tr><td><b>Deductee Type </b></td><td text-align=right>{deducteetype}</td></tr>',
            '</table>',
            '<table width="95%">',
            '<tpl for="tdsNOPArray">',
                '<tr><td><b>NOP:</b> {natureofpayment}</td><td><b>Rate:</b> {tdsrate}</td></tr>',
            '</tpl>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '<table width="95%">',
            '<tr><td><b>TDS Calculated on (Depending upon user\'s settings)</b></td></tr>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '<table width="95%">',
            '<tr><td><b>Basic </b></td><td text-align=right>{subtotalamount}</td></tr>',
            '<tpl for="lineLevelArray">',
                '<tr><td><b>{name} Amount </b></td><td text-align=right>{taxAmount}</td></tr>',
            '</tpl>',
            '<tr><td><b>Global Level Invoice Terms </b></td><td text-align=right>{globalleveltermamount}</td></tr>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '<table width="95%">',
            '<tr><td><b>Total amount paid or credited </b></td><td text-align=right>{totalinvoiceamount}</td></tr>',
            '</table>',
            '<div><hr class="templineview"></div>',
            '</div>'
        );
        
        var lineLevelArray = [];
        if(WtfGlobal.GSTApplicableForCompany()==Wtf.GSTStatus.OLDNEW){
            for(var i=0; i<Wtf.LineTermsMasterStore.getRange().length; i++){
            var temp = Wtf.LineTermsMasterStore.getRange()[i].data;
            temp['taxAmount'] = WtfGlobal.currencyRenderer(0);
            lineLevelArray.push(temp);
        }
        }
        
        this.LineLevelTermTpl=new Wtf.Panel({  
            border:false,
            width:'95%',
            hidden: !Wtf.account.companyAccountPref.isLineLevelTermFlag,
            baseCls:'tempbackgroundview',
            html:this.LineLevelTermTplSummary.apply({
                lineLevelArray : lineLevelArray,
                TotalTaxAmt : WtfGlobal.currencyRenderer(0)
            })
        });
        
        var tdsNOPArray = [];
        
        this.TDSCalculationDetailsTpl=new Wtf.Panel({  
            border:false,
            width:'95%',
            hidden: !Wtf.isTDSApplicable || this.moduleid!=Wtf.Acc_Vendor_Invoice_ModuleId,
            baseCls:'tempbackgroundview',
            /*
             * If  in User Administration > Assign Permission > Display Unit Price & Amount in Purchase Document
             * If it uncheck we will hide amount and show '*****',  
             */
            html: Wtf.isTDSApplicable ? (!Wtf.dispalyUnitPriceAmountInPurchase ? this.TDSCalculationDetailsTplSummary.apply({
                tdsNOPArray : tdsNOPArray,
                subtotalamount : Wtf.UpriceAndAmountDisplayValue,
                lineLevelArray : lineLevelArray,
                globalleveltermamount : Wtf.UpriceAndAmountDisplayValue,
                totalinvoiceamount : Wtf.UpriceAndAmountDisplayValue,
                totaltdsamount : Wtf.UpriceAndAmountDisplayValue,
                TotalAdvanceTDSAdjustmentAmt : Wtf.UpriceAndAmountDisplayValue,
                nettdsamount :Wtf.UpriceAndAmountDisplayValue
            }):this.TDSCalculationDetailsTplSummary.apply({
                tdsNOPArray : tdsNOPArray,
                subtotalamount : WtfGlobal.currencyRenderer(0),
                lineLevelArray : lineLevelArray,
                globalleveltermamount : WtfGlobal.currencyRenderer(0),
                totalinvoiceamount : WtfGlobal.currencyRenderer(0),
                totaltdsamount : WtfGlobal.currencyRenderer(0)
            })): this.TDSCalculationDetailsTplSummary.apply({
                tdsNOPArray : tdsNOPArray,
                subtotalamount : WtfGlobal.currencyRenderer(0),
                lineLevelArray : lineLevelArray,
                globalleveltermamount : WtfGlobal.currencyRenderer(0),
                totalinvoiceamount : WtfGlobal.currencyRenderer(0),
                totaltdsamount : WtfGlobal.currencyRenderer(0)
            })
        });
        
        this.productDetailsTpl=new Wtf.Panel({
            id:'productDetailsTpl'+this.id,
            border:false,
            baseCls:'tempbackgroundview',
            width:'95%',
            hidden:(this.isCustBill)?true:false,
            html:this.productDetailsTplSummary.apply({productname:"&nbsp;&nbsp;&nbsp;&nbsp;",productid:0,qty:0,soqty:0,poqty:0,blockqty:0,salableStock:0,reserveStock:0})
        });    
        
        this.productWeightDetailsTpl=new Wtf.Panel({
            id:'productWeightDetailsTpl'+this.id,
            border:false,
            baseCls:'tempbackgroundview',
            width:'95%',
            hidden:((this.moduleid==Wtf.Acc_Invoice_ModuleId || this.moduleid== Wtf.Acc_Cash_Sales_ModuleId) && Wtf.account.companyAccountPref.calculateproductweightmeasurment)?false:true,
            html:this.productWeightDetailsTplSummary.apply({
                totalprdweight:0,
                totalprdweightwithpack:0
            })
        });
        
        if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
            this.productProfitMarginTpl=new Wtf.Panel({
                id:'productProfitMarginTpl'+this.id,
                border:false,
                width:'95%',
                baseCls:'tempbackgroundview',
                hidden:!(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)),
                html:this.productProfitMarginTplSummary.apply({
                    totalproductsellingprice:WtfGlobal.currencyRenderer(0),
                    totalproductcost:WtfGlobal.currencyRenderer(0),
                    totalproductprofitmargin:WtfGlobal.currencyRenderer(0),
                    totalprodcutprofitmarginpercent:'<div class="currency">NA</div>',

                    totalservicesellingprice:WtfGlobal.currencyRenderer(0),
                    totalservicecost:WtfGlobal.currencyRenderer(0),
                    totalserviceprofitmargin:WtfGlobal.currencyRenderer(0),
                    totalserviceprofitmarginpercent:'<div class="currency">NA</div>',

                    finalproductsellingprice:WtfGlobal.currencyRenderer(0),
                    finalproductcost:WtfGlobal.currencyRenderer(0),
                    finalproductprofitmargin:WtfGlobal.currencyRenderer(0),
                    finalproductprofitmarginpercent:'<div class="currency">NA</div>'

                })
            }); 
        }
        this.southCenterTpl=new Wtf.Panel({
            border:false,
            html:this.southCenterTplSummary.apply({basecurrency:WtfGlobal.getCurrencyName(),exchangerate:'x',foreigncurrency:"Foreign Currency", editable:false})
        });
        this.southCalTemp=new Wtf.Panel({  
            border:false,
            baseCls:'tempbackgroundview',
            html:this.tplSummary.apply({
                subtotal:WtfGlobal.currencyRenderer(0),
                discount:WtfGlobal.currencyRenderer(0),
                totalamount:WtfGlobal.currencyRenderer(0),
                tax:WtfGlobal.currencyRenderer(0),
                nontaxableamount:WtfGlobal.currencyRenderer(0),
                tdsamount:WtfGlobal.currencyRenderer(0),
                roundingAdjustmentAmount:WtfGlobal.currencyRenderer(0),
                aftertaxamt:WtfGlobal.currencyRenderer(0),
                totalAmtInBase:WtfGlobal.currencyRenderer(0),
                termtotal:WtfGlobal.currencyRenderer(0),
                amountbeforetax:WtfGlobal.currencyRenderer(0),
                amountdue:WtfGlobal.currencyRenderer(0),
                changeToBeReturned:WtfGlobal.currencyRenderer(0)
            })
        });
        this.helpMessage= new Wtf.Button({
                text:WtfGlobal.getLocaleText("acc.dashboard.help"),  //'Help',
                handler:this.helpmessage,
                scope:this,
                tooltip: WtfGlobal.getLocaleText("acc.common.click"),  //'Click for help',
                iconCls: 'help'
            });
        this.addGrid();
        
        var isGlobalLevelTaxHidden = false;

        /*----Condition to hide global level tax in transaction form------ */

        if (this.isEdit && this.record != null) {//For Edit , Copy & View Case
            if (this.record.data.taxid != undefined && this.record.data.taxid != null && this.record.data.taxid != "") {

                isGlobalLevelTaxHidden = false;
            } else {
                /*---Copy/Edit/View Case ----  */
                if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {//Check is true only for malaysian company
                    isGlobalLevelTaxHidden = true;
                } else if ((Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.moduleid == 6) || (Wtf.account.companyAccountPref.countryid == '137' && (!Wtf.account.companyAccountPref.enableGST || !this.shouldTaxBeHidden())) || Wtf.account.companyAccountPref.isLineLevelTermFlag == 1) {
                    isGlobalLevelTaxHidden = true;

                }
            }
        } else {
            /*---Create New Case----  */
            if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {//Check is true only for malaysian company
                isGlobalLevelTaxHidden = true;
            } else if ((Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.moduleid == 6) || (Wtf.account.companyAccountPref.countryid == '137' && (!Wtf.account.companyAccountPref.enableGST || !this.shouldTaxBeHidden())) || Wtf.account.companyAccountPref.isLineLevelTermFlag == 1) {
                isGlobalLevelTaxHidden = true;

            }
        }
                        
        this.isTaxable= new Wtf.form.ComboBox({
            triggerAction:'all',
            mode: 'local',
            valueField:'value',
            displayField:'name',
            id:"includetax"+this.heplmodeid+this.id,
            store:this.fromPOStore,
            listWidth:50,
            fieldLabel:WtfGlobal.getLocaleText("acc.inv.totax"),  //"Include Total Tax",
            allowBlank:this.isOrder,
            value:false,
            hideLabel:isGlobalLevelTaxHidden,
            hidden:isGlobalLevelTaxHidden,
            width:50,
            typeAhead: true,
            forceSelection: true,
            name:'includetax',
            hiddenName:'includetax',
            listeners:{
                'select':{
                    fn:this.enabletax,
                    scope:this
                }
            }
        });
        this.Tax= new Wtf.form.ExtFnComboBox({
            fieldLabel:WtfGlobal.getLocaleText("acc.invoice.Tax"),  //'Tax',
            id:"tax"+this.heplmodeid+this.id,
            disabled:!this.isEdit,
            hiddenName:'tax',
            anchor: '97%',
            store:this.Grid.taxStore,
            hideLabel:isGlobalLevelTaxHidden,
            hidden:isGlobalLevelTaxHidden,
            valueField:'prtaxid',
            forceSelection: true,
            displayField:'prtaxname',
//            addNewFn:this.addTax.createDelegate(this),
            scope:this,
            extraFields: [],
            isTax: true,
            listeners:{
                'select':{
                    fn:this.callGSTCurrencyRateandUpdateSubtotal,
                    scope:this
                },
                'beforeselect': {
                    fn: function (combo, record, index) {
                        return validateSelection(combo, record, index);
                    },
                    scope: this
                }
            },
            selectOnFocus:true
        });
        /*
         *If checked CGA then you can not change tax.It will be set as per company preferences selected tax.
         */
         this.Tax.on('change',function(o,newval,oldval){
            this.capitalGoodsAcquiredHandler();
        },this);
        this.isTaxable.on('change',function(o,newval,oldval){
            this.capitalGoodsAcquiredHandler();
        },this);
        var prodDetailSouthItems = [];
        if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
            prodDetailSouthItems = [this.productDetailsTpl,this.productWeightDetailsTpl,this.productProfitMarginTpl,this.INDCountryCenterTpl,this.LineLevelTermTpl,this.TDSCalculationDetailsTpl,this.southCenterTpl];
        }else{
            prodDetailSouthItems = [this.productDetailsTpl,this.productWeightDetailsTpl,this.INDCountryCenterTpl,this.LineLevelTermTpl,this.TDSCalculationDetailsTpl,this.southCenterTpl];
        }
        if(this.IsInvoiceTerm) {
//            this.addInvoiceTermGrid(this.isEdit);
        this.termgrid = CommonERPComponent.addInvoiceTermGrid(this);
        this.termgrid.on('render', function(){
                this.termgrid.getView().getRowClass = WtfGlobal.getRowClass.createDelegate(this, [this.termgrid], 1);
                }, this);
                //We do not show Invoice Term Grid in case of Avalara integration (ERP-33833)
                if (!this.isModuleForAvalara) {
        prodDetailSouthItems.push(this.termgrid);
        }
        }
            
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.tax, Wtf.Perm.tax.view))
            this.Tax.addNewFn=this.addTax.createDelegate(this);

        this.southPanel=new Wtf.form.FormPanel({
            region:'center',
            border:false,
            disabledClass:"newtripcmbss",
//            disabled:this.isViewTemplate,
            style:'padding:0px 10px 10px 10px',
            layout:'column',//layout:'border',//Bug Fixed: 14871[SK] Scrolling issue : changed layout from border to column
//            height:(Wtf.isIE?210:150) + (prodDetailSouthItems.length>2 ? 400 : 50),
            autoHeight:true,
            items:[{
                columnWidth: .45,// width: 570,//region:'center',
                border:false,
                items:prodDetailSouthItems
            },{
//                region:'east',
                id : this.id + 'southEastPanel',
                columnWidth: .55,//width:650,
                border:false,
                    layout:'column',
                    items:[{
                        layout:'form',
                        width:170,
                        labelWidth:100,
                        border:false,
                        items:this.isTaxable
                    },{
                        layout:'form',
                        columnWidth:0.4,
                        labelWidth:30,
                        border:false,
                        items:this.Tax
                    },{
                        columnWidth:0.6,
                        layout:'form',
                        cls:'bckgroundcolor',
                        bodyStyle:'padding:10px',
                        labelWidth:70,
                        items:this.southCalTemp
                   }]
            }]
        });
        
        this.toggleBtnPanel = new Wtf.Panel({
            style: 'padding: 10px 10px 0;',
            border: false,
            autoScroll: true,
            hidden: true,
            items: [{
                    xtype: 'button',
                    enableToggle: true,
                    id: "setButton" + this.heplmodeid + this.id,
                    hidden: this.readOnly || this.isViewTemplate,//hide in view case of document templates
                    disabled: true,
                    cls: 'setlocationwarehousebtn',
                    text: WtfGlobal.getLocaleText("acc.SetWarehouseLocation"),
                    toggleGroup: 'massupdate',
                    handler: this.SetLocationwarehouseWindow.createDelegate(this)
                }]
        });


        this.deleteSelectedPanel = new Wtf.Panel({
            style: 'padding: 10px 10px 0;',
            border: false,
            autoScroll: true,
            hidden: true,
            items: [{
                    xtype: 'button',
                    id: "deleteButton" + this.heplmodeid + this.id,
                    disabled: true,
                    cls: 'setlocationwarehousebtn',
                    text: WtfGlobal.getLocaleText("acc.common.deleteselected"),
                    hidden:this.isViewTemplate,//hide in view case of document templates
                    handler:this.isExpenseInv ?this.deleteSelectedExpenseInvRecord.createDelegate(this):this.deleteSelectedRecord.createDelegate(this)
                }]
        });
        
     
        if (!this.readOnly) {
            this.deleteSelectedPanel.show();
        }

        this.formpPanelOfbutton = new Wtf.Panel({
            border: false,
            autoScroll: true,
            layout: 'table',
            items: [this.toggleBtnPanel, this.deleteSelectedPanel]

        })
        
         // --------------------India Compliance [Forms - START] ------------------------------- //

        this.exciseFormPanel1=new Wtf.form.FormPanel({
            region:'north',
            autoHeight:true,
//            id:"exciseFormPanel1"+this.id,
            hidden: (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.isExciseApplicable) && (this.isExciseTab || this.isTemplate || this.isViewTemplate || (this.templateId!=undefined && this.templateId!="") ||(this.isEdit && this.isExciseInvoiceWithTemplate))? false : true,
            border:false,
//            disabled:this.isViewTemplate,
            bodyStyle: {
                background:"#DFE8F6"
            },
            items:[{
                layout:'form',
                baseCls:'northFormFormat',
                defaults:{
                    labelWidth:180
                },
                cls:"visibleDisabled",
                items:[
                /* this.exciseDetailsFieldset=new Wtf.form.FieldSet({
//                    id: 'exciseDetailsFieldset',
                    xtype: 'fieldset',
                    title: WtfGlobal.getLocaleText("acc.field.ExiceDetails"),//'Exice Details',
                    checkboxToggle: true,
                    collapsed: !Wtf.isExciseApplicable,
                    checkboxName: 'isExciseDetails',
                    height:'165',
                    hidden: ((this.isTemplate || this.isViewTemplate  || (this.templateId!=undefined && this.templateId!="") ||(this.isEdit && this.isExciseInvoiceWithTemplate)) && (this.moduleid ==  Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid ==  Wtf.Acc_Invoice_ModuleId))? false : true,
                    items:[
                    {
                        layout:'column',
                        border:false,
                        defaults:{
                            border:false
                        },
                        items:[{
                            layout:'form',
                            columnWidth:0.50,
                            border:false,
                            items:[
                            this.UnitName =new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.india.exciseUnitName"),//"Excise Unit Name",
                                name:"UnitName",
                                hidden: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA,
                                hideLabel: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA,
                                value:Wtf.unitname,
                                disabled:this.isViewTemplate || this.isExciseInvoiceWithTemplate || (this.templateId!=undefined && this.templateId!=""),
                                width:200,
                                maxLength:100
                            //            allowBlank:Wtf.isExciseApplicable?false:true
                            }),
                            this.registrationTypeCombo=new Wtf.form.ComboBox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.field.india.registrationtype"),
                                store:Wtf.registrationTypeStore,
                                name:'registrationType',
                                id:'registrationType'+this.id,
                                width:200,
                                listWidth:200,
                                hiddenName:'registrationType',
                                valueField:'id',
                                hidden: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA,
                                hideLabel: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA,
                                mode:'local',
                                displayField:'name',
                                disabled:this.isViewTemplate || this.isExciseInvoiceWithTemplate || (this.templateId!=undefined && this.templateId!=""),
                                forceSelection: true,
                                triggerAction: 'all',
                                value:Wtf.registrationType,
                                selectOnFocus:true
                            })
                            ]
                        },{
                            layout:'form',
                            columnWidth:0.50,
                            border:false,
                            items:[
                            /*this.manufacturerTypeCombo=new Wtf.form.ComboBox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.field.india.typeofmanufacturer"),//'Type of Manufacturer',
                                store:Wtf.manufactureTypeStore,
                                name:'manufacturerType',
                                id:'manufacturerType'+this.id,
                                width:200,
                                listWidth:200,
                                hiddenName:'manufacturerType',
                                valueField:'id',
                                hidden: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA,
                                hideLabel: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA,
                                mode:'local',
                                displayField:'name',
                                disabled:this.isViewTemplate,
                                forceSelection: true,
                                triggerAction: 'all',
                                value:Wtf.manufacturerType,
                                selectOnFocus:true
                            }),

                            this.ECCNo =new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.Companyecc") ,// "Customer ECC" 
                                name:"ECCNo",
                                value: Wtf.CompanyECCNumber,
                                disabled:this.isViewTemplate || this.isExciseInvoiceWithTemplate ||(this.templateId!=undefined && this.templateId!=""),
                                width:200,
                                hidden: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA,
                                hideLabel: Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA,
                                maxLength:15,
                                invalidText :'Alphabets and numbers only',
                                vtype : "alphanum"
                            })
                            ]                          
                            
                        }]
                    }
                    ]                   
                }),      */              
                this.exciseFieldsetSupplier=new Wtf.form.FieldSet({
//                    id: 'exciseFieldsetSupplier',
                    xtype: 'fieldset',
                    title:this.isCustomer?WtfGlobal.getLocaleText("acc.field.buyer.details"):WtfGlobal.getLocaleText("acc.field.supplier.buyer.details"),
                    checkboxToggle: true,
                    collapsed: !Wtf.isExciseApplicable,
                    checkboxName: 'isExciseFieldsetSupplier',
                    height:'165',
                    hidden: (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.isExciseApplicable) && (this.isExciseTab || this.isTemplate || this.isViewTemplate || (this.templateId!=undefined && this.templateId!="") ||(this.isEdit && this.isExciseInvoiceWithTemplate))? false : true,
                    //Old Condition  hidden: (this.isTemplate || this.isViewTemplate || (this.isEdit && this.isExciseInvoiceWithTemplate))? true : false,
//                    hidden: (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.isExciseTab)? false : true,
                    items:[
                    {
                        layout:'column',
                        border:false,
                        defaults:{
                            border:false
                        },
                        items:[{
                            layout:'form',
                            columnWidth:0.50,
                            border:false,
                            items:[
                            this.Supplier= new Wtf.form.TextField({
                                fieldLabel:this.isCustomer?WtfGlobal.getLocaleText("acc.agedPay.cus"):WtfGlobal.getLocaleText("acc.field.supplier"),// "Supplier",
                                name:"suppliers",
                                width:240,
                                disabled:this.isViewTemplate,
//                                emptyText:'Supplier Name',
                                maxLength:200          
                            }),
                            this.supplierTINSalesTAXNo= new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.tinsalsetaxno"),//"TIN/Sales Tax No.",
                                name:"supplierTINSalesTAXNo",
                                width:240,
                                disabled:this.isViewTemplate,
                                vtype : "alphanum",
                                invalidText :'Alphabets and numbers only',
//                                emptyText:"TIN/Sales Tax Number",
                                maxLength:11            
                            }),
                            this.supplierExciseRegnNo= new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.exciseregnno"),//"Excise Regn No.",
                                name:"supplierExciseRegnNo",
                                disabled:this.isViewTemplate,
                                width:240,
                                vtype : "alphanum",
                                invalidText :'Alphabets and numbers only',
//                                emptyText:"Excise Registration Number",
                                maxLength:15            
                            }),
                            this.CSTNumber= new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.cstnumber"),//"CST Number",
                                name:"cstnumber",
                                disabled:this.isViewTemplate,
                                width:240,
                                vtype : "alphanum",
                                invalidText :'Alphabets and numbers only',
//                                emptyText:"Excise Registration Number",
                                maxLength:11            
                            }),
                            this.supplierRange= new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.Range"),//"Range",
                                name:"supplierRange",
                                disabled:this.isViewTemplate,
                                width:240,
//                                emptyText:"Range",
                                maxLength:200            
                            }),
                            this.Commissionerate= new Wtf.form.TextField({
                                fieldLabel:WtfGlobal.getLocaleText("acc.field.commissionerate"),// "Commissionerate",
                                name:"supplierCommissionerate",
                                width:240,          
                                disabled:this.isViewTemplate,
//                                emptyText:"Commissionerate",
                                maxLength:200            
                            })
                            ]
                        },{
                            layout:'form',
                            columnWidth:0.50,
                            border:false,
                            items:[
                            this.SupplierAddress= new Wtf.form.TextArea({
                                fieldLabel: WtfGlobal.getLocaleText("acc.cust.add"),//"Address",
                                name:"supplierAddress",
                                width:240, 
                                disabled:this.isViewTemplate,
                                maxLength:1000
                                
//                                emptyText:"Address"
                            }),
                            this.state = new Wtf.form.TextField({
                                width:240,
                                name:'supplierState',
                                labelWidth:80,
                                disabled:this.isViewTemplate,
                                fieldLabel:"State"
                            }),
//                            this.state = new Wtf.form.ComboBox({
//                                store: Wtf.stateStore,
//                                width:240,
//                                name:'supplierState',
//                                listWidth:240,
//                                labelWidth:80,
//                                disabled:this.isViewTemplate,
//                                fieldLabel:"State",
//                                displayField:'name',
//                                valueField:'id',
//                                triggerAction: 'all',
//                                mode: 'local',
//                                typeAhead:true,
//                                emptyText: WtfGlobal.getLocaleText("acc.rem.254"),
//                                selectOnFocus:true,
//                                forceSelection: true
//                            }),
                            this.supplierImporterExporterCode= new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.importexportcode"),//"Importer Exporter Code",
                                name:"supplierImporterExporterCode",
//                                emptyText: "Importer Exporter Code",
                                width:240,           
                                disabled:this.isViewTemplate,
//                                vtype : "nonDecimalNumber",
//                                maskRe: /[0-9.]/,  
                                invalidText :'Numbers only',
                                maxLength:10,
                                validator : function (val){
                                    if (Wtf.isEmpty(val)) {
                                        return true;
                                    }else{
                                        var reg = new RegExp('^[0-9]+$');
                                        if(reg.test(val)){
                                            return true;
                                        }else{
                                            return false;
                                        }
                                    }
                                }
                            }),
                            this.supplierDivision= new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.division"),//"Division",
                                name:"supplierDivision",
//                                emptyText: "Division",
                                width:240,
                                disabled:this.isViewTemplate,
                                maxLength:200            
                            })
                            ]
                        }]
                    }
                    ]                   
                }),
                
                
                this.exciseFieldsetManufacture=new Wtf.form.FieldSet({
//                    id: 'exciseFieldsetManufacture',
                    xtype: 'fieldset',
                    title: WtfGlobal.getLocaleText("acc.field.consignee.details"),//'Manufacturer/Importer/Consigner Details',
                    checkboxToggle: true,
                    collapsed: !Wtf.isExciseApplicable,
                    checkboxName: 'isExciseFieldsetManufacture',
                    height:'165',
                    hidden: (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.isExciseApplicable) && (this.isExciseTab || this.isTemplate || this.isViewTemplate || (this.templateId!=undefined && this.templateId!="") ||(this.isEdit && this.isExciseInvoiceWithTemplate))? false : true,
                    // Old Condition hidden: (this.isTemplate || this.isViewTemplate || (this.isEdit && this.isExciseInvoiceWithTemplate))? true : false,
//                    hidden: (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.isExciseTab)? false : true, 
                    items:[
                    {
                        layout:'column',
                        border:false,
                        defaults:{
                            border:false
                        },
                        items:[{
                            layout:'form',
                            columnWidth:0.50,
                            border:false,
                            items:[
                            this.manufactureName= new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.manufacturer.name"),//"Name",
//                                emptyText: "Name",
                                name:"manufacturername",
                                width:240,           
                                disabled:this.isViewTemplate,
                                maxLength:200        
                            }),
                            this.manufacturerExciseRegnNo= new Wtf.form.TextField({
                                fieldLabel:  WtfGlobal.getLocaleText("acc.field.exciseregnno"),//"Excise Regn No.",
//                                emptyText: "Excise Regn No.",
                                name:"manufacturerExciseRegnNo",
                                width:240,           
                                disabled:this.isViewTemplate,
                                vtype : "alphanum",
                                invalidText :'Alphabets and numbers only',
                                maxLength:15            
                            }),
                            this.manufacturerRange= new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.Range"),//"Range",
//                                emptyText: "Range",
                                name:"manufacturerRange",
                                width:240,           
                                disabled:this.isViewTemplate,
                                maxLength:200            
                            }),
                            this.manufacturerCommissionerate= new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.commissionerate"),// "Commissionerate",
//                                emptyText: "Commissionerate",
                                name:"manufacturerCommissionerate",
                                width:240,           
                                disabled:this.isViewTemplate,
                                maxLength:200            
                            }),
                            this.manufacturerDivision= new Wtf.form.TextField({
                                fieldLabel: WtfGlobal.getLocaleText("acc.field.division"),//"Division",
//                                emptyText: "Division",
                                name:"manufacturerDivision",
                                width:240,           
                                disabled:this.isViewTemplate,
                                maxLength:200            
                            }),
                            ]
                        },{
                            layout:'form',
                            columnWidth:0.50,
                            border:false,
                            items:[
                            this.manufacturerAddress= new Wtf.form.TextArea({
                                fieldLabel: WtfGlobal.getLocaleText("acc.cust.add"),//"Address",
                                name:"manufacturerAddress",
                                width:240,
                                disabled:this.isViewTemplate,
                                maxLength:1000
//                                emptyText:"Address"
                            }),
                            
                            this.manufacturerExporterCode= new Wtf.form.TextField({
                                fieldLabel:  WtfGlobal.getLocaleText("acc.field.importexportcode"),//"Importer Exporter Code",
//                                emptyText: "Importer Exporter Code",
                                name:"manufacturerImporterExporterCode",
                                width:240, 
                                disabled:this.isViewTemplate,
//                                vtype : "nonDecimalNumber",
//                                maskRe: /[0-9.]/,  
                                invalidText :'Numbers only',
                                maxLength:10 ,
                                validator : function (val){
                                    if (Wtf.isEmpty(val)) {
                                        return true;
                                    }else{
                                        var reg = new RegExp('^[0-9]+$');
                                        if(reg.test(val)){
                                            return true;
                                        }else{
                                            return false;
                                        }
                                    }
                                } 
                            }),
                            this.InvoicenoManuFacture= new Wtf.form.TextField({
                                fieldLabel:WtfGlobal.getLocaleText("acc.invoice.gridInvNo"),// "Invoice No.",
                                name:"InvoicenoManuFacture",
                                width:240,
                                hidden:true,
                                hideLabel:true,
                                disabled:this.isViewTemplate,
                                maxLength:200            
                            }),
                            this.InvoiceDateManuFacture= new Wtf.form.DateField({
                                fieldLabel:WtfGlobal.getLocaleText("acc.agedPay.invoiceDate"),// "Invoice Date",
//                                emptyText: "Invoice Date",
                                name:"InvoiceDateManuFacture",
                                width:240,   
                                hidden:true,
                                hideLabel:true,
                                disabled:this.isViewTemplate,
                                maxLength:200,
                                format:WtfGlobal.getOnlyDateFormat()
                            })
                            ]
                        }]
                    }
                    ]                   
                })
  
                ]
            }]
        });
      //---------------------------India Compliance[Forms - END]-------------------------------//  
        
        this.Grid.on("onselection", function(){
            if(this.Grid.sModel.getCount()>=1 && this.autoGenerateDO.getValue()){
                if(Wtf.getCmp("setButton"+this.heplmodeid+this.id))Wtf.getCmp("setButton"+this.heplmodeid+this.id).enable();
            }else{
                if(Wtf.getCmp("setButton"+this.heplmodeid+this.id))Wtf.getCmp("setButton"+this.heplmodeid+this.id).disable();
            }
            if (this.Grid.sModel.getCount() >= 1 && !this.isLinkedTransaction) {
                if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id))
                    Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).enable();
            } else {
                if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id))
                    Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).disable();
            }
        },this);
        
        if(Wtf.getCmp(this.id+"expensegrid") && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId){
            this.ExpenseGrid.on("onselection", function(){            
                if (this.ExpenseGrid.sModel.getCount() >= 1 ) {
                    if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id))
                        Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).enable();
                } else {
                    if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id))
                        Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).disable();
                }
            },this);
        }
        
        var moduletoShow=(this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId );
        if((Wtf.account.companyAccountPref.isWarehouseCompulsory && Wtf.account.companyAccountPref.isLocationCompulsory) && moduletoShow && !this.readOnly  ){
            this.toggleBtnPanel.show();
        }
        var lastTransPanelId = "";
        if(this.quotation) {
            lastTransPanelId = "quotation";
        } else if(this.isOrder) {
            lastTransPanelId = this.isCustomer ? "salesorder" : "purchaseorder";
        }else if(this.cash){
            lastTransPanelId = this.isCustomer ? "cashsales": "cashpurchase";
        } else {
            lastTransPanelId = this.isCustomer ? "CInvoiceList": "VInvoiceList";
        }
        
        
        this.lastTransPanel = this.isCustomer ? getCustInvoiceTabView(false, lastTransPanelId, '', undefined, true) : getVendorInvoiceTabView(false, lastTransPanelId, '', undefined, true) ;
        this.exciseFormPanel1.doLayout();
        this.NorthForm.doLayout();
        this.NorthForm.doLayout();
        this.southPanel.doLayout();
        this.POStore.on('load',this.updateSubtotal,this)
        this.DueDate.on('blur',this.dueDateCheck,this);
        this.billDate.on('change',this.onDateChange,this);
        if (Wtf.account.companyAccountPref.enableLinkToSelWin && (this.moduleid === Wtf.Acc_Sales_Order_ModuleId || this.moduleid===Wtf.Acc_Invoice_ModuleId || this.moduleid===Wtf.Acc_Purchase_Order_ModuleId|| this.moduleid===Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid===Wtf.Acc_Vendor_Quotation_ModuleId || this.moduleid===Wtf.Acc_Customer_Quotation_ModuleId )) {


            this.POStore.on('load',function(){addMoreOptions(this.PO,this.PORec)}, this);
            
            this.POStore.on('datachanged',function(){addMoreOptions(this.PO,this.PORec)}, this);            
            
            this.PO.on("select", function () {
                var billid = this.PO.getValue();
                if (billid.indexOf("-1") != -1) {
                    var url = "";
                    if (this.businessPerson == "Customer" && this.quotation){ // loading vendor quotations in customer quotations
                            url = this.isVersion?"ACCPurchaseOrderCMN/getVersionQuotations.do":"ACCPurchaseOrderCMN/getQuotations.do"
                        } else if(this.isInvoice){
                        if(this.fromLinkCombo.getValue() == 0 ){
                            url = this.isCustomer ? "ACCSalesOrderCMN/getSalesOrders.do" : "ACCPurchaseOrderCMN/getPurchaseOrders.do"; 
                
                        }else if(this.fromLinkCombo.getValue() == 1 ){
                            url =this.isCustomer ? "ACCInvoiceCMN/getDeliveryOrdersMerged.do" : "ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
                  
                        }else if(this.fromLinkCombo.getValue() == 2){
                            url =this.isCustomer ?(this.isVersion?"ACCSalesOrderCMN/getVersionQuotations.do":"ACCSalesOrderCMN/getQuotations.do" ): "ACCPurchaseOrderCMN/getQuotations.do"; 
                    
                        }else if(this.fromLinkCombo.getValue() == 14 || this.fromLinkCombo.getValue() == 15){ // Job Work ORDERS
                            url = this.isCustomer ?  "ACCSalesOrderCMN/getSalesOrders.do" :"ACCPurchaseOrderCMN/getPurchaseOrders.do" ;   
                        }     
                    }else if(this.isOrder){
                        if(this.fromLinkCombo.getValue() == 5){
                            url = "ACCPurchaseOrderCMN/getRequisitions.do"; 
                        } else if (this.fromLinkCombo.getValue() == 6) {
                            url = "ACCPurchaseOrderCMN/getRFQs.do";
                        }else if ((this.fromLinkCombo.getValue() == 4 || this.fromLinkCombo.getValue() == 0)) {
                            url = this.isCustomer ? "ACCPurchaseOrderCMN/getPurchaseOrders.do" : "ACCSalesOrderCMN/getSalesOrders.do";
                        }else if(this.fromLinkCombo.getValue() == 2){
                            url =this.isCustomer ?(this.isVersion?"ACCSalesOrderCMN/getVersionQuotations.do":"ACCSalesOrderCMN/getQuotations.do" ): "ACCPurchaseOrderCMN/getQuotations.do";
                    
                        }
                    }
            
                    this.PO.collapse();
                    this.PO.clearValue();
                    this.showPONumbersGrid(url);
                }
            }, this);
        }
        
          
        this.setTransactionNumber();
        WtfComMsgBox(29,4,true);
        /*
        if (!this.custVenOptimizedFlag) {
            this.isCustomer?chkcustaccload():chkvenaccload();
        }
        */
        //
        this.ajxUrl = "CommonFunctions/getInvoiceCreationJson.do";
        var params={
            transactiondate:transdate,
            loadtaxstore:true,
            moduleid :this.moduleid,
//            loadpricestore: false,//!(this.isCustBill||this.isExpenseInv),
            loadcurrencystore:true,
            loadtermstore:true,
            includeDeactivatedTax: this.includeDeactivatedTax
//            loadInventory:this.isCustomer
        }
        Wtf.Ajax.requestEx({url:this.ajxUrl,params:params}, this, this.successCallback, this.failureCallback);
       this.currencyStore.on('load',this.changeTemplateSymbol,this);
       if(!this.isCustBill&&!this.isCustomer&&!this.isOrder&&!this.isEdit&&!this.copyInv){
           this.ProductGrid.on('pricestoreload',function(arr){//alert("1111"+arr.length)
               if(!this.isExpenseInv){
                    this.datechange=1;
                    this.changeCurrencyStore(arr);
               }
           },this);//.createDelegate(this)
       }else if(!this.isCustBill&&!this.isExpenseInv){//alert("2222"+arr.length)
           this.Grid.on('pricestoreload',function(arr){
                this.datechange=1;
                this.changeCurrencyStore(arr);
       }.createDelegate(this),this);}
       if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
           this.Grid.on('vendorselect',this.onVendorSelect,this);
       }
       
        /*
         * isCreateInvFromJob is true if sales invoice is creating from Aged order work report.
         */
        
         if(this.isCreateInvFromJob){
            if(Wtf.getCmp("showaddress" + this.id)){
                Wtf.getCmp("showaddress" + this.id).enable(); 
            } 
            this.customersIdNameStore.load();
            this.customersIdNameStore.on('load', function (storeObj, recArr) {
                var recordArr= eval(this.invObj.getSelectedRecords());
                
                var arrPo = [];
                var arrStockoutNo = [];
                this.POStore.load({
                    params:{
                        currencyfilterfortrans:recordArr[0].currency,
                        exceptFlagINV:true,
                        isJobWorkOrderInPI:true,
                        isJobWorkOrderReciever:true,
                        requestModuleid:6
                    }
                });
                for(var i=0;i<recordArr.length;i++){
                    this.ids.push(recordArr[i].id);
                    var personRec = WtfGlobal.searchRecord(this.customersIdNameStore, recordArr[i].personname, 'accname');
                    if (personRec != undefined) {
                        this.DueDate.setValue(WtfGlobal.convertToGenericDate(recordArr[i].date));
                        this.Name.setValForRemoteStore(personRec.data.accid,recordArr[i].personname);
                        arrPo.push(recordArr[i].billid);
                        arrStockoutNo.push(recordArr[i].itemcode);
                        this.POStore.on('load', function (storeObj, recArr) {
                            this.PO.setValue(arrPo);
                            this.Grid.setDisabled(false);
                            this.isMultiSelectFlag=true
                            this.populateData();
                            this.PO.setValue("");
                            this.Memo.setValue("Invoice Of Job work order No-"+recordArr[0].jobWorkOrderNo+" and Stock Out No-"+arrStockoutNo);
                        },this);
                      
                    }
                }
                this.personstore.on('load', function (storeObj, newrecArr) {
                    var newrecord = newrecArr[0];
                    if (this.isGST) {
                        this.addressMappingRec=newrecord.data.addressMappingRec;
                        /**
                         * code for New GST  i.e. populate dimension using dimension
                         */
                         var obj = {};
//                        if (true) {
                             if(this.isIndiaGST){
                                this.applyGSTFieldsBasedOnDate();
                            }else{
                                 if(newrecord.data.uniqueCase!=undefined){
                                this.uniqueCase=newrecord.data.uniqueCase;
                                this.sezfromdate=newrecord.data.sezfromdate;
                                this.seztodate=newrecord.data.seztodate;
                                this.transactiondateforgst=this.billDate.getValue();
                            } 
                            }
                          
                            this.addressDetailRecForGST=newrecord.data.currentAddressDetailrec[0];
                            obj.tagsFieldset=this.tagsFieldset;
                            obj.currentAddressDetailrec=this.addressDetailRecForGST;
                            obj.mappingRec=this.addressMappingRec;
                            obj.isCustomer=this.isCustomer;
                            obj.isShipping=this.isShipping;
                            this.on('populateGlobalDimensionValue',this.setCustomdimensionFields,obj);
//                            this.setCustomdimensionFields();
//                        }
                        if(Wtf.getCmp("Custom_State"+this.tagsFieldset.id)!=undefined){
                            Wtf.getCmp("Custom_State"+this.tagsFieldset.id).store.reload();
                            Wtf.getCmp("Custom_State"+this.tagsFieldset.id).store.on("load",function(){
                                populateGSTDimensionValues(obj);                                
                            });
                        }else{
                            this.setCustomdimensionFields();
                        }
                            
                        /**
                         * Check and show alert GST details for Customer and Vendor if not available 
                         */
//                        var cust_Vendparams = {};
//                        cust_Vendparams.rec = newrecord;
//                        cust_Vendparams.isCustomer = this.isCustomer;
//                        checkAndAlertCustomerVendor_GSTDetails(cust_Vendparams);
                        }
                }, this);
                
                //***************************
                var personRec = WtfGlobal.searchRecord(this.customersIdNameStore, recordArr[0].personname, 'accname');
                this.personstore.load({
                    params: {
                        selectedCustomerIds: personRec.data.accid
                    },
                    scope: this
                });
            },this);
        }
    },
/**
 * ERP-34199
 * On Edit/ Copy case set GST details
 * Populate Customer/ Vendor GST details in Edit/   Copy Case
 */    
    populateGSTDataOnEditCopy: function () {
        if (this.isGST && (this.isEdit || this.copyInv)) {
            //  var perStore = this.isCustomer ? Wtf.customerAccRemoteStore : Wtf.vendorAccRemoteStore;
            this.individualPersonDetails = new Wtf.data.Store({
                url: this.isCustomer ? "ACCCustomer/getCustomersForCombo.do" : "ACCVendor/getVendorsForCombo.do",
                baseParams: {
                    mode: 2,
                    group: this.isCustomer ? 10 : 13,
                    deleted: false,
                    nondeleted: true,
                    common: '1'
                },
                reader: new Wtf.data.KwlJsonReader({
                    root: "data"
                }, Wtf.personRec)
            });
            this.individualPersonDetails.on('load', function (storeObj, recArr) {
                var index = this.individualPersonDetails.find('accid', this.record.data.personid);
                if (index != -1) {
                    var record = this.individualPersonDetails.getAt(index);
                    this.setGSTDetailsOnEditCase(record);
                }
            }, this);
            if (this.isCustomer) {
                this.individualPersonDetails.load({
                    params: {
                        selectedCustomerIds: this.record.data.personid
                    },
                    scope: this
                });
            } else {
                this.individualPersonDetails.load({
                    params: {
                        vendorid: this.record.data.personid
                    },
                    scope: this
                });
            }
        }
    },
    /**
     * ERP-34199
     * On Edit/ Copy case set GST details
     * Populate Customer/ Vendor GST details in Edit/   Copy Case
     */
    setGSTDetailsOnEditCase: function (record) {
        this.addressMappingRec = record.data.addressMappingRec;
//        if (record.data.currentAddressDetailrec != undefined) {
//            if (record.data.uniqueCase != undefined) {
//                this.uniqueCase = record.data.uniqueCase;
//                this.sezfromdate = record.data.sezfromdate;
//                this.seztodate = record.data.seztodate;
//                this.transactiondateforgst = this.billDate.getValue();
//            }
//            this.addressDetailRecForGST = record.data.currentAddressDetailrec[0];
//        }
    },
            onAdvancePaymentChange: function (combo, newvalue, oldvalue) {
                if(this.isEdit && this.isLinkedTransaction){
                   this.AdjustAdvancePayments.setValue(oldvalue);
                   return false;
                }
                this.Grid.getStore().removeAll();
                this.Grid.addBlankRow();
                this.TotalAdvanceTDSAdjustmentAmt = 0;
                this.AdvancePaymentDetails = [];
                if (combo.getValue() != null && combo.getValue() != "" && combo.getValue() != undefined) {
                    var multiAdvancepaymentStr = combo.getValue();
                    var AdvancePayments = multiAdvancepaymentStr.split(',');
                    for (cnt = 0; cnt < AdvancePayments.length; cnt++) {
                        var AdvancePaymentRec = WtfGlobal.searchRecord(combo.store, AdvancePayments[cnt], 'AdvancePaymentID');
                        if (AdvancePaymentRec != undefined) {
//                    if (!AdvancePaymentRec.data.isTDSAmountUsedInGR) {
                            this.AdvancePaymentDetails.push(AdvancePaymentRec);
                            this.TotalAdvanceTDSAdjustmentAmt += AdvancePaymentRec.data.AdvanceTDSAmount;
//                    }
                        }
                    }
                }
                if (Wtf.isTDSApplicable && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId) {
                    var personRec = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
                    if (personRec != undefined) {
                        this.updateTDSCalculationDetails(personRec);
                        this.updateSubtotal();
                    }
                }
            },
    /*
     *SDP-1740. Applicable for Malaysian Country
     */
    onImportServiceOptionChanged:function(obj,newval,oldval){
        if(obj.getValue()){
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.importService.canNotApplyGst"), function(btn){
                if(btn == 'yes') {  
                    if(this.includingGST){
                        this.includingGST.setValue(false);
                        this.includingGST.disable();
                    }
                    if(this.includeProTax){
                        this.includeProTax.setValue(false);
                        this.showGridTax(null,null,true);
                        this.includeProTax.disable();
                    }
                    if(this.isTaxable){
                        this.isTaxable.setValue(false);
                        this.isTaxable.disable();
                    }
                    if(this.Tax){
                        this.Tax.setValue("");
                        this.Tax.disable();
                    }
                    this.Grid.fireEvent('datachanged', this);
                }else if(btn == 'no') {
                    obj.setValue(oldval);
                    return;           
                }
            },this); 
        } else {
            var date = this.billDate.getValue() === "" ? new Date() : new Date(this.billDate.getValue());
            var isTaxShouldBeEnable = WtfGlobal.isTaxShouldBeEnable(date.clearTime());
            if(isTaxShouldBeEnable){
                if(this.includingGST){
                    this.includingGST.enable();
                }
                if(this.includeProTax){
                    this.includeProTax.enable();
                }
                if(this.isTaxable){
                    this.isTaxable.enable();
                }
            }
        }   
    },
    callOnfromLinkComboSelect:function(combo, record, index){
        if(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && this.isExpenseInv && (record.data['value']==1 ||record.data['value']==2)){//Case when GR and VQ selected and module is purchase Order and Expense grid is active. then ask user to switch tab
            var msg="";
            if(record.data['value']==1){
                msg = WtfGlobal.getLocaleText("acc.invoice.msg20");
            } else if(record.data['value']==2){
                msg = WtfGlobal.getLocaleText("acc.invoice.msg21");
            }
            msg += WtfGlobal.getLocaleText("acc.invoice.msg4");
                            
            Wtf.MessageBox.confirm("Warning",msg, function(btn){
                if(btn == 'yes') {  
                    this.giveAlertOnTabChange=false;
                    this.fromPO.reset();
                    this.fromLinkCombo.reset();
                    this.GridPanel.setActiveTab(this.ProductGrid);
                }else if(btn == 'no') {
                    combo.setValue(this.linkcomboBeforeSelect);
                    return;           
                }
            },this);
        } else {
            if(!Wtf.productDetailsGridIsEmpty(this.Grid)){
                Wtf.MessageBox.confirm("Warning",WtfGlobal.getLocaleText("acc.wm.beforechange"), function(btn){
                    if(btn == 'yes') {  
                        this.enableNumber(combo, record, index);
                    }else if(btn == 'no') {
                        combo.setValue(this.linkcomboBeforeSelect);
                        return;           
                    }
                },this);
            }else{
                this.enableNumber(combo, record, index);
            }
        }
    },
    
    checkToIncludeGstORVatORTax: function () {  // Function used for check if Company Country is Indonesia Or India return False else true  - ERP-21052
        var fieldLabel = "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.includeGST.tooltip") + "'>" + WtfGlobal.getLocaleText("acc.cust.includingGST") + "</span>";
        if (this.isIndonesian) {
            fieldLabel = "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.includeVAT.tooltip") + "'>" + WtfGlobal.getLocaleText("acc.cust.includingVAT") + "</span>";
        }
//        if (this.isIndian) {
//            fieldLabel = "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.includeTAX.tooltip") + "'>" + WtfGlobal.getLocaleText("acc.cust.includingTax") + "</span>";
//        }
        return fieldLabel;
    },    
    setTaxesOnGenerateSIAndPI: function () {
        /**
         * set Global tax when called from generate SI and generate PI from  DO, SO, GR and PO respectively.
         */
        if (this.invoicefromorder && this.invoicefromorderrec != null && this.Tax.getValue() == '') {
            /**
             * to execute only once
             */
            if (this.invoicefromorderrec.isTaxable == "true" || this.invoicefromorderrec.isTaxable == true && typeof this.invoicefromorderrec.taxid == "string" && this.invoicefromorderrec.taxid != undefined && this.invoicefromorderrec.taxid != "") {
                /**
                 * case for generate PI from PO, SI from SO.
                 */
                this.isTaxable.enable();
                this.isTaxable.setValue(true);
                this.Tax.setValue(this.invoicefromorderrec.taxid);
                this.Tax.enable();
            } else if (this.invoicefromorderrec.isTaxable != undefined && typeof this.invoicefromorderrec.isTaxable == 'object' && this.invoicefromorderrec.isTaxable.getValue() && this.invoicefromorderrec.Tax != undefined && this.invoicefromorderrec.Tax.getValue() != null && this.invoicefromorderrec.Tax.getValue() != "") {
                /**
                 * case for generate SI from DO, PI from GR.
                 */
                this.isTaxable.enable();
                this.isTaxable.setValue(true);
                this.Tax.setValue(this.invoicefromorderrec.Tax.getValue());
                this.Tax.enable();
            } else if (this.invoicefromorder && this.invoicefromorderrec != null && (typeof this.invoicefromorderrec.includeprotax == 'string' || typeof this.invoicefromorderrec.includeprotax == 'boolean') && (this.invoicefromorderrec.includeprotax == true || this.invoicefromorderrec.includeprotax == "true")) {
                /**
                 * Case when line level tax is applied.
                 */
                this.isTaxable.setValue(false);
                this.isTaxable.disable();
                this.Tax.setValue("");
                this.Tax.disable();
                this.includingGST.setValue(this.invoicefromorderrec.includingGST=="on" ? true :false);
                this.includeProTax.setValue(true);
            } else {
                /**
                 * If No Tax is Applied
                 */
                this.isTaxable.setValue(false);
                this.Tax.setValue("");
                this.Tax.disable();
                this.isTaxable.enable();
                this.includingGST.setValue(false);
                this.includingGST.enable();
            }
        }
    },
    
    addMoreOptions:function(){
            var recordIndex = this.PO.store.findBy(
                    function (record, id) {
                        if (record.get('billid') === '-1') {
                            return true;  // a record with this data exists
                        }
                        return false;  // there is no record in the store with this data
                    }
            );
            if (recordIndex == -1 && this.PO.store.getCount()) {
                this.PO.store.insert(this.PO.store.getCount(), new this.PORec({
                billno: "<a href=#>More</a>",
                    billid: '-1'
                })); // created record for "More"
            }
    },
    resetProductDetailsTplSummary: function(scope,rowindex,record) {
        if (this.Grid.getSelectionModel().getSelections().length == 0) {
            this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body, {productname: "&nbsp;&nbsp;&nbsp;&nbsp;", productid: 0, qty: 0, soqty: 0, poqty: 0,blockqty:0,salableStock:0,reserveStock:0});
        } else if (this.Grid.getSelectionModel().getSelections().length == 1) {
            var record = this.Grid.getSelectionModel().getSelected();
//            this.setProductDetailsTplSummary('','',record);
            this.setProductDetailsTplSummaryOptimised('','',record);
        }
    },
    
setProductDetailsTplSummaryOptimised: function(scope,rowindex,record){
        if (this.Grid.getSelectionModel().getSelections().length == 1) {
            var isExpensive = (this.isExpenseInv != null && this.isExpenseInv != undefined) ? this.isExpenseInv : false;
            if (!this.isCustBill && !isExpensive) {
            this.tplRec = Wtf.data.Record.create ([
           {name:'quantity'},
           {name:'openpocount'},
           {name:'sicount'},
           {name:'socount'},
           {name:'pocount'},
           {name:'type'},
           {name:'opensocount'},
           {name:'lockquantity'},
           {name:'reservestock'},
           {name:'pocountinselecteduom'},
           {name:'socountinselecteduom'},
           {name:'uomname'},
           {name:'availableQtyInSelectedUOM'},
           {name:'blockLooseSell'}
            ]);

                this.tplRecStore = new Wtf.data.Store({
                    reader: new Wtf.data.KwlJsonReader({
                        root: "data",
                        totalProperty:"totalCount"
                    },this.tplRec),
                    baseParams:{
                        ids:record.data.productid,
                        getSOPOflag:true,
                        moduleid:this.moduleid,
                        startdate:WtfGlobal.convertToGenericDate(WtfGlobal.getDates(true)),
                        enddate:    WtfGlobal.convertToGenericDate(WtfGlobal.getDates(false))
                    },
                    url:"ACCProductCMN/getOutstandingPOSOCount.do"
                }); 
               
                this.tplRecStore.on('load', function(store) {
                    if(store.getTotalCount()>0){
                        var prorec=store.getAt(0);
                        if (prorec != undefined && prorec != -1 && prorec != "") {
                                
                        var  productType;
                        if(prorec.data!=undefined && prorec.data!=null){
                            productType=prorec.data.type;
                        }
                            
                        if(productType!=undefined && productType!=null && productType!="" && productType!="Service"){

                                var availableQuantityInBaseUOM = prorec.data['quantity'];

                                var isBlockLooseSell = prorec.data['blockLooseSell'];

                                var availableQuantityInSelectedUOM = availableQuantityInBaseUOM;

                                var pocountinselecteduom = prorec.data['openpocount'];

                                var socountinselecteduom = prorec.data['opensocount'];
                    
                                var soBlockQuatity =prorec.data['lockquantity'];
                   
                                var salableStock =availableQuantityInBaseUOM+pocountinselecteduom-soBlockQuatity;//Instock + Open PO - Block So
                   
                                var reserveStock =prorec.data['reservestock'];

                                availableQuantityInSelectedUOM = this.calculateqtyforoustandingSOorSI(prorec);
                                if (isBlockLooseSell && record.get('isAnotherUOMSelected')) {//
                                    availableQuantityInSelectedUOM = prorec.data['availableQtyInSelectedUOM'];
                        
                                    pocountinselecteduom = prorec.data['pocountinselecteduom'];

                                    socountinselecteduom = prorec.data['socountinselecteduom'];
                                }

                                var selectedUOMName = '';

                                if (isBlockLooseSell) {
                                    selectedUOMName = record.get('uomname');
                                }

                                if (selectedUOMName == undefined || selectedUOMName == null || selectedUOMName == '') {
                                    selectedUOMName = prorec.data['uomname'];
                                }
                                var sosicountarray=[];
                                var array=[];
                                var sosountRec = WtfGlobal.searchRecord(this.productPOSOCountStore, record.data.productid, 'productid');//Required so count after quantity change
                                if (sosountRec != undefined) {
                                    this.productPOSOCountStore.remove(sosountRec);
                                    array.push(record.data.productid,prorec.data['sicount'],prorec.data['socount']);
                                    sosicountarray.push(array);
                                    this.productPOSOCountStore.loadData(sosicountarray);
                                }else{
                                    array.push(record.data.productid,prorec.data['sicount'],prorec.data['socount']);
                                    sosicountarray.push(array);
                                    this.productPOSOCountStore.loadData(sosicountarray);
                                }

                                this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body, {
                                    productid: record.get('productid'),
                                    productname: record.get('productname'),
                                    qty: parseFloat(getRoundofValue(availableQuantityInSelectedUOM)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                                    soqty: parseFloat(getRoundofValue(socountinselecteduom)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                                    poqty: parseFloat(getRoundofValue(pocountinselecteduom)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                                    blockqty: parseFloat(getRoundofValue(soBlockQuatity)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                                    salableStock:parseFloat(getRoundofValue(salableStock)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                                    reserveStock:parseFloat(getRoundofValue(reserveStock)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName
                                });
                        }else{
                            this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body, {productname: "&nbsp;&nbsp;&nbsp;&nbsp;", productid: 0, qty: 0, soqty: 0, poqty: 0,blockqty:0,salableStock:0,reserveStock:0});
                        }
                            } else if (record.data.productname != undefined && record.data.productname != -1 && record.data.productname != "") {
                                var availableQuantityInSelectedUOM = Wtf.isEmpty(record.data.availableQtyInSelectedUOM) ? 0 : record.data.availableQtyInSelectedUOM;
                                var pocountinselecteduom = Wtf.isEmpty(record.data.pocountinselecteduom) ? 0 : record.data.pocountinselecteduom;
                                var socountinselecteduom = Wtf.isEmpty(record.data.socountinselecteduom) ? 0 : record.data.socountinselecteduom;
                                var soBlockQuatity =Wtf.isEmpty(record.data.lockquantity) ? 0 : record.data.lockquantity;
                                var reserveStock =Wtf.isEmpty(record.data.reserveStock) ? 0 : record.data.reserveStock;
                                var salableStock =availableQuantityInSelectedUOM+pocountinselecteduom-soBlockQuatity;//Instock + Open PO - Block So
                                var selectedUOMName = record.data.uomname;
                                availableQuantityInSelectedUOM = this.calculateqtyforoustandingSOorSI(record);
                                this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body, {
                                    productid: record.data.productid,
                                    productname: record.data.productname,
                                    qty: parseFloat(getRoundofValue(availableQuantityInSelectedUOM)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                                    soqty: parseFloat(getRoundofValue(socountinselecteduom)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                                    poqty: parseFloat(getRoundofValue(pocountinselecteduom)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                                    blockqty:parseFloat(getRoundofValue(soBlockQuatity)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                                    salableStock:parseFloat(getRoundofValue(salableStock)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                                    reserveStock:parseFloat(getRoundofValue(reserveStock)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName
                                });
                            }
                        }else{
                        this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body, {productname: "&nbsp;&nbsp;&nbsp;&nbsp;", productid: 0, qty: 0, soqty: 0, poqty: 0,blockqty:0,salableStock:0,reserveStock:0});
                        }
                }, this);
                 this.tplRecStore.load();
            }
        }
    },
    setProductDetailsTplSummary: function(scope,rowindex,record){
        if (this.Grid.getSelectionModel().getSelections().length == 1) {
            var isExpensive = (this.isExpenseInv != null && this.isExpenseInv != undefined) ? this.isExpenseInv : false;
            if (!this.isCustBill && !isExpensive) {
                var index = this.Grid.productComboStore.findBy(function(rec) {
                    if (rec.data.productid == record.data.productid)
                        return true;
                    else
                        return false;
                }); 
                var prorec = this.Grid.productComboStore.getAt(index);
                    if (prorec != undefined && prorec != -1 && prorec != "") {

                        var availableQuantityInBaseUOM = prorec.data['quantity'];

                        var isBlockLooseSell = prorec.data['blockLooseSell'];

                        var availableQuantityInSelectedUOM = availableQuantityInBaseUOM;

                        var pocountinselecteduom = prorec.data['openpocount'];

                        var socountinselecteduom = prorec.data['opensocount'];
                    
                        var soBlockQuatity =prorec.data['lockquantity'];
                   
                        var salableStock =availableQuantityInBaseUOM+pocountinselecteduom-soBlockQuatity;//Instock + Open PO - Block So
                   
                        var reserveStock =prorec.data['reservestock'];

                        availableQuantityInSelectedUOM = this.calculateqtyforoustandingSOorSI(prorec);
                        if (isBlockLooseSell && record.get('isAnotherUOMSelected')) {//
                            availableQuantityInSelectedUOM = record.get('availableQtyInSelectedUOM');
                        
                            pocountinselecteduom = record.get('pocountinselecteduom');

                            socountinselecteduom = record.get('socountinselecteduom');
                        }

                        var selectedUOMName = '';

                        if (isBlockLooseSell) {
                            selectedUOMName = record.get('uomname');
                        }

                        if (selectedUOMName == undefined || selectedUOMName == null || selectedUOMName == '') {
                            selectedUOMName = prorec.data['uomname'];
                        }

                        this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body, {
                        productid: prorec.data['productid'],
                        productname: prorec.data['productname'],
                            qty: parseFloat(getRoundofValue(availableQuantityInSelectedUOM)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                            soqty: parseFloat(getRoundofValue(socountinselecteduom)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                            poqty: parseFloat(getRoundofValue(pocountinselecteduom)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                            blockqty: parseFloat(getRoundofValue(soBlockQuatity)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                            salableStock:parseFloat(getRoundofValue(salableStock)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                            reserveStock:parseFloat(getRoundofValue(reserveStock)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName
                        });
                    } else if (record.data.productname != undefined && record.data.productname != -1 && record.data.productname != "") {
                        var availableQuantityInSelectedUOM = Wtf.isEmpty(record.data.availableQtyInSelectedUOM) ? 0 : record.data.availableQtyInSelectedUOM;
                        var pocountinselecteduom = Wtf.isEmpty(record.data.pocountinselecteduom) ? 0 : record.data.pocountinselecteduom;
                        var socountinselecteduom = Wtf.isEmpty(record.data.socountinselecteduom) ? 0 : record.data.socountinselecteduom;
                        var soBlockQuatity =Wtf.isEmpty(record.data.lockquantity) ? 0 : record.data.lockquantity;
                        var reserveStock =Wtf.isEmpty(record.data.reserveStock) ? 0 : record.data.reserveStock;
                        var salableStock =availableQuantityInSelectedUOM+pocountinselecteduom-soBlockQuatity;//Instock + Open PO - Block So
                        var selectedUOMName = record.data.uomname;
                        availableQuantityInSelectedUOM = this.calculateqtyforoustandingSOorSI(record);
                        this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body, {
                            productid: record.data.productid,
                            productname: record.data.productname,
                            qty: parseFloat(getRoundofValue(availableQuantityInSelectedUOM)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                            soqty: parseFloat(getRoundofValue(socountinselecteduom)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                            poqty: parseFloat(getRoundofValue(pocountinselecteduom)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                            blockqty:parseFloat(getRoundofValue(soBlockQuatity)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                            salableStock:parseFloat(getRoundofValue(salableStock)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName,
                            reserveStock:parseFloat(getRoundofValue(reserveStock)).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) + "  " + selectedUOMName
                        });
                    }
            }
        }
    },
    paramsForGlobalStore : function() {
        var isEditORisCopy=(this.isEdit !=undefined ?this.isEdit:false) || (this.copyInv!=undefined ?this.copyInv:false) ||(this.isCopyFromTemplate !=undefined ?this.isCopyFromTemplate:false);
        Wtf.customerAccRemoteStore.on('beforeload', function(s,o) {
            if(!o.params)o.params={};
            var currentBaseParams = Wtf.customerAccRemoteStore.baseParams;
            if(isEditORisCopy){
                currentBaseParams.isPermOrOnetime="";
            }else{
                if(this.ShowOnlyOneTime != undefined && this.ShowOnlyOneTime.getValue() == true){
                    currentBaseParams.isPermOrOnetime=true;
                }else{
                    currentBaseParams.isPermOrOnetime=false;
                }
            }
            Wtf.customerAccRemoteStore.baseParams=currentBaseParams;
        }, this);
        
        Wtf.customerAccRemoteStore.on("load", function() {
            var currentBaseParams = Wtf.customerAccRemoteStore.baseParams;
            currentBaseParams.isPermOrOnetime="";
            Wtf.customerAccRemoteStore.baseParams=currentBaseParams;
        }, this);
        
        //Global customer store load
        Wtf.customerAccStore.on('beforeload', function(s,o){
            if(!o.params)o.params={};
            var currentBaseParams = Wtf.customerAccStore.baseParams;
            if(isEditORisCopy){
                currentBaseParams.isPermOrOnetime="";
            }else{
                if(this.ShowOnlyOneTime != undefined && this.ShowOnlyOneTime.getValue() == true){
                    currentBaseParams.isPermOrOnetime=true;
                }else{
                    currentBaseParams.isPermOrOnetime=false;
                }
            }
            Wtf.customerAccStore.baseParams=currentBaseParams;
        }, this);
        
        Wtf.customerAccStore.on("load", function() {
            var currentBaseParams = Wtf.customerAccStore.baseParams;
            currentBaseParams.isPermOrOnetime="";
            Wtf.customerAccStore.baseParams=currentBaseParams;
        }, this);
    },
     setdisabledbutton:function(){
        if(this.saveAsDraftBttn)this.saveAsDraftBttn.setDisabled(true);     //refer ticket ERP-13113
        this.moduleTemplateName.setDisabled(true);
        this.UnitModuleTemplate.setDisabled(true);
        this.templateModelCombo.setDisabled(true);
        this.ShowOnlyOneTime.enable();
        this.Currency.setDisabled(true);
        this.PO.setDisabled(true);
        this.sequenceFormatCombobox.setDisabled(true);
        this.Number.setDisabled(true);
        this.Memo.setDisabled(true);
        this.billDate.setDisabled(true);
//        this.PORefNo.setDisabled(true);
        this.CustomerPORefNo.setDisabled(true);
        this.capitalGoodsAcquired.setDisabled(true);
        this.isRetailPurchase.setDisabled(true);
        this.autoGenerateDO.setDisabled(true);
        this.includingGST.setDisabled(true);
        this.applyTaxToTermsChk.setDisabled(true);
        this.CostCenter.setDisabled(true);
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
            this.FormType.setDisabled(true);
            this.AdjustAdvancePayments.setDisabled(true);
            this.ExciseType.setDisabled(true);
            this.GTAApplicable.setDisabled(true);
            this.isMerchantExporter.setDisabled(true);
        }
        this.youtReftxt.setDisabled(true);
        this.delytermtxt.setDisabled(true);
        this.invoiceTotxt.setDisabled(true);
        this.shipDate.setDisabled(true);
        this.Term.setDisabled(true);
        this.DueDate.setDisabled(true);
        this.shipvia.setDisabled(true);
        this.fob.setDisabled(true);
        this.includeProTax.setDisabled(true);
        this.validTillDate.setDisabled(true);
        this.partialInvoiceCmb.setDisabled(true);
        this.partialInvAmount.setDisabled(true);
        this.template.setDisabled(true);
        this.templateID.setDisabled(true);
        this.users.setDisabled(true);
        this.generateReceipt.setDisabled(true);
        this.autoGenerateDO.setDisabled(true);
        this.sequenceFormatComboboxDo.setDisabled(true);
        this.no.setDisabled(true);
        this.delydatetxt.setDisabled(true);
        this.projecttxt.setDisabled(true);
        this.depttxt.setDisabled(true);
        this.requestortxt.setDisabled(true);
        this.mernotxt.setDisabled(true);
        this.Name.setDisabled(true);
//        this.tagsFieldset.setDisabled(true);
        this.pmtMethod.setDisabled(true);
        this.pmtMethodAcc.setDisabled(true); 
        this.fromLinkCombo.setDisabled(true);    
        this.fromPO.setDisabled(true); 
        this.isMaintenanceOrderCheckBox.setDisabled(true);
        this.lockQuantity.setDisabled(true);
        this.isdropshipDocument.setDisabled(true);
        this.reserveStock.setDisabled(true);
        this.invoiceList.setDisabled(true);
        this.landingCostCategoryCombo.setDisabled(true); // ERP-30249[SJ]
        this.deliveryTime.setDisabled(true);
        this.shippingTerm.setDisabled(true);
        this.globalDiscountType.setDisabled(true);
        this.applyGlobalDiscount.setDisabled(true);
        this.globalDiscount.setDisabled(true);
        this.cashReceived.setDisabled(true);
        this.customerBankAccountType.setDisabled(true);
           if (this.moduleid == Wtf.Acc_Purchase_Order_ModuleId || this.moduleid == Wtf.Acc_Sales_Order_ModuleId) {
            this.blockSOPO.setDisabled(true);
            WtfGlobal.hideFormElement(this.blockSOPO);
        } 
    },
    setPMData:function(){
        if(this.cash || this.mapPmtMethodInCredit){
            if(this.isEdit || this.copyInv){
                if(this.record!=null && this.record.data.methodid!=undefined && this.record.data.methodid!=""){//when we copy older record in which payment not available 
                    this.pmtMethod.setValue(this.record.data.methodid);                                          //methodid will be undefined so 
                    this.ShowCheckDetails(null,this.record);  
                    var type=this.record.data.detailtype;  
                    if(type==1){ //card
                        this.SouthForm.refNo.setValue(this.record.data.cardrefno);
                        this.SouthForm.nameOnCard.setValue(this.record.data.nameoncard);
                        this.SouthForm.expDate.setValue(this.record.data.cardexpirydate);
                        this.SouthForm.cardNo.setValue(this.record.data.cardno);                    
                        this.SouthForm.cardType.setValue(this.record.data.cardtype);                    
                    }else if(type==2){ //bank
                        this.SouthForm.checkNo.setValue(this.record.data.chequeno);
                        if(this.isCustomer){
                            this.SouthForm.bankTypeStore.on('load', function() {
                                this.SouthForm.bank.setValue(this.record.data.refname);
                            }, this)
                        }else{
                            this.SouthForm.bank.setValue(unescape(this.record.data.bankname));
                        }
                        this.SouthForm.PostDate.setValue(this.record.data.chequedate);
                        this.SouthForm.description.setValue(this.record.data.chequedescription);
                        if (!this.copyInv && this.record.data.paymentStatus=="Cleared") {
                            this.SouthForm.paymentStatus.setValue("Cleared");
                            this.SouthForm.clearanceDate.getEl().up('.x-form-item').setDisplayed(true);
                            this.SouthForm.clearanceDate.setValue(this.record.data.clearanceDate);
                        }
                    }
                }              
            } else { //create new case setting cash as default payment method  
                this.setCashMethod();                       
            } 
        }
    },
    
setCashMethod:function(){
    if(Wtf.account.companyAccountPref.cashaccount!=""&& Wtf.account.companyAccountPref.cashaccount!=undefined){                            
        var index=this.pmtStore.findBy( function(rec){
            var parentname=rec.data['accountid'];
            if(parentname==Wtf.account.companyAccountPref.cashaccount)
                return true;
            else
                return false
        })
        if(index!=-1){
            var rec=this.pmtStore.getAt(index);
            this.pmtMethod.setValue(rec.data.methodid);
            this.pmtMethodAcc.setValue(rec.data.accountname);
            if(this.mapPmtMethod){          
                /*
                 * ERM-735 Associate default payment method to customer.
                 * If customer not specified default payment method then cash is auto populated
                 * and according to that showcheckdetails are hide/show
                 */
                this.ShowCheckDetails(this.pmtMethod, rec);    
            }
        }           
    } 
},
    
ShowCheckDetails:function(combo,rec){
    var index= this.pmtStore.find('methodid',rec.data['methodid']);  
    var mthAccounID="";
    var mthAccountName="";
    if(index!=-1){
        mthAccountName=this.pmtStore.getAt(index).get('accountname');
        mthAccounID=this.pmtStore.getAt(index).get('methodid');           
    }     
    rec.paydetail = this.SouthForm.GetPaymentFormData();
    this.pmtMethodAcc.setValue(mthAccountName);   
    this.SouthForm.ShowCheckDetails(rec.data['detailtype']);
    if(rec.data['detailtype']==1) { //card
        this.SouthForm.hide();
        WtfGlobal.hideFormElement(this.SouthForm.checkNo);
        this.SouthForm.checkNo.allowBlank = true;
        WtfGlobal.hideFormElement(this.SouthForm.paymentStatus);
        this.SouthForm.paymentStatus.allowBlank = true;
        WtfGlobal.hideFormElement(this.SouthForm.bank);
        this.SouthForm.bank.allowBlank = true;
        WtfGlobal.hideFormElement(this.SouthForm.clearanceDate);
        this.SouthForm.clearanceDate.allowBlank = true;
        WtfGlobal.hideFormElement(this.SouthForm.description); 
        this.SouthForm.description.allowBlank = true;
        WtfGlobal.hideFormElement(this.SouthForm.PostDate);//Cheque Date
        this.SouthForm.PostDate.allowBlank = true;

        WtfGlobal.showFormElement(this.SouthForm.expDate);
        WtfGlobal.showFormElement(this.SouthForm.nameOnCard);
        this.SouthForm.nameOnCard.allowBlank = false;
        WtfGlobal.showFormElement(this.SouthForm.cardType);
        this.SouthForm.cardType.allowBlank = false;
        WtfGlobal.showFormElement(this.SouthForm.refNo);
        this.SouthForm.refNo.allowBlank = false;
        WtfGlobal.showFormElement(this.SouthForm.cardNo);
                
        this.SouthForm.cardNo.allowBlank = false;
//        this.SouthForm.cheque.setTitle(WtfGlobal.getLocaleText("acc.nee.44"));
        this.SouthForm.show();
        this.SouthForm.getForm().items.items[1].disabled = false;
        this.SouthForm.cheque.doLayout();
        this.SouthForm.show();
    }else if(rec.data['detailtype']==2){//bank
        // set auto generated cheque no. in case of make payment and if bank account is selected                
        if(!this.isEdit){
            this.SouthForm.setNextChequeNumber(mthAccounID);
        }
       if (this.moduleid== Wtf.Acc_Vendor_Invoice_ModuleId && mthAccountName != undefined) {
                    this.SouthForm.setBankName(mthAccountName);
        }
        this.SouthForm.hide();
        WtfGlobal.showFormElement(this.SouthForm.checkNo);
        WtfGlobal.showFormElement(this.SouthForm.bank);
        this.SouthForm.bank.allowBlank = false;
        WtfGlobal.showFormElement(this.SouthForm.description);
        WtfGlobal.showFormElement(this.SouthForm.PostDate);
        this.SouthForm.PostDate.allowBlank = false;
        WtfGlobal.showFormElement(this.SouthForm.paymentStatus);
        this.SouthForm.paymentStatus.allowBlank = false;
        
        WtfGlobal.hideFormElement(this.SouthForm.clearanceDate);
        this.SouthForm.clearanceDate.allowBlank = true;
        WtfGlobal.hideFormElement(this.SouthForm.expDate);
        this.SouthForm.expDate.allowBlank = true;
        WtfGlobal.hideFormElement(this.SouthForm.nameOnCard);
        this.SouthForm.nameOnCard.allowBlank = true;
        WtfGlobal.hideFormElement(this.SouthForm.cardType);
        this.SouthForm.cardType.allowBlank = true;
        WtfGlobal.hideFormElement(this.SouthForm.refNo);
        this.SouthForm.refNo.allowBlank = true;
        WtfGlobal.hideFormElement(this.SouthForm.cardNo);
        this.SouthForm.cardNo.allowBlank = true;
//        this.SouthForm.cheque.setTitle(WtfGlobal.getLocaleText("acc.nee.43"));                
        this.SouthForm.show();
        this.SouthForm.cheque.doLayout();
        this.SouthForm.getForm().items.items[1].disabled = false;
        this.SouthForm.show();
    }else {
        this.SouthForm.hide();
    }       
},
    getTDSCalculationDetails: function (rec, newDatevalue) {
        this.tdsRate = 0;
        this.tdsmasterrateruleid = 0;
        this.tdsBasicExemption=(rec.data.deductionReason == "4");
        Wtf.Ajax.requestEx({// request to fetch tdsrate and amount as per nature of payment and other attributes
            url: "ACCVendorPaymentCMN/getTDSCalculationDetails.do",
            params: {
                natureofPayment: rec.data.natureOfPayment,
                deducteetype: rec.data.deducteetype,
                residentialstatus: rec.data.residentialstatus,
                tdsPayableAccount: rec.data.tdsPayableAccount,
                vendorID: !Wtf.isEmpty(rec.data.accid)?rec.data.accid : rec.data.personid,
                billdate: newDatevalue,
                isTDSApplicable:(!Wtf.isEmpty(this.record)&&this.record!=null)?this.record.data.isTDSApplicable:""
            }
        }, this, function (resp) {
            if (resp != "") {
                if (resp.success) {
                    this.tdsRate = resp.tdsrate;
                    this.tdsmasterrateruleid = resp.tdsmasterrateruleid;                    
                     if(this.tdsBasicExemption && resp.basicexemptionpertransaction && resp.basicexemptionperannum){
                        this.tdsBasicExemptionPerTransaction=resp.basicexemptionpertransaction;
                        this.tdsBasicExemptionPerAnnual=resp.basicexemptionperannum;
                    }
                } 
//                else {
//                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), resp.msg], 2);
//                }
            }
            this.updateTDSCalculationDetails(rec);
            this.updateSubtotalOnTermChange(true);
        }, function (resp) {
        });
        Wtf.Ajax.requestEx({// request to fetch tdsrate and amount as per nature of payment and other attributes
            url: "ACCReports/getVendorLedger.do",
            params: {
                asofdate: WtfGlobal.convertToGenericDate(new Date()),
                customerIds:!Wtf.isEmpty(rec.data.accid)?rec.data.accid : rec.data.personid,
                enddate:WtfGlobal.convertToGenericDate(WtfGlobal.getDates()),
                idparamname:'vendorid',
                invoiceAmountDueFilter:true,
                isPostDatedCheque:false,
                isSortedOnCreationDate:false,
                startdate:WtfGlobal.convertToGenericDate(new Date(Wtf.account.companyAccountPref.firstfyfrom)),	
                stdate:WtfGlobal.convertToGenericDate(new Date(Wtf.account.companyAccountPref.firstfyfrom)),	
                vendorIds:!Wtf.isEmpty(rec.data.accid)?rec.data.accid : rec.data.personid,
                withoutinventory:false
            }
        }, this, function (resp) {
            if (resp != "") {
                if (resp.success) {
                    if( resp.data && resp.data.length > 0 ){
                        for(var i = 0; i< resp.data.length; i++){
                            var transactionData = resp.data[i];
                            if(transactionData.debitAmountInBase){
                                this.debitbalance += transactionData.debitAmountInBase;
                            }
                            if(transactionData.creditAmountInBase){
                                this.creditbalance += transactionData.creditAmountInBase;
                            }
                        }
                    }else{
                        this.debitbalance = 0; 
                        this.creditbalance = 0; 
                        this.totalbalance = 0;
                    }
                    this.totalbalance = this.debitbalance + this.creditbalance
                    
                } else {
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), resp.msg], 2);
                }
            }
        }, function (resp) {
        });
    },
    
    onPersonStoreLoad: function(recArr, options, success) {
        var combo = this.Name;
        var record = recArr[0];
        var index = 0;
        if (combo.getValue() == this.nameBeforeSelect) { //If same name selected no need to do any action 
            return;
        }
        var showMsg = this.isCustomer ? WtfGlobal.getLocaleText("acc.invoice.customer"):WtfGlobal.getLocaleText("acc.invoice.vendor");
        showMsg = showMsg +" "+ WtfGlobal.getLocaleText("acc.wm.beforecustomervendorchange");
        if (this.nameBeforeSelect != undefined && this.nameBeforeSelect != '' && !Wtf.productDetailsGridIsEmpty(this.Grid)) {
            Wtf.MessageBox.confirm("Warning",showMsg, function(btn){
                if(btn == 'yes') {  
                    this.onNameSelect(combo, record, index);
                    if (combo.getValue() !== this.nameBeforeSelect) {
                        this.termgrid.getStore().rejectChanges();
                    }
                }else if(btn == 'no') {
                    combo.setValue(this.nameBeforeSelect);
                    return;           
                }
            },this);
        }else{
            this.onNameSelect(combo, record, index);
        }
        if (this.isGST) {
            this.addressMappingRec = record.data.addressMappingRec;
            /**
             * ERP-32829 
             * code for New GST  i.e. populate dimension using dimension
             */
            if (record.data.currentAddressDetailrec != undefined) {
                if(this.isIndiaGST){
                    /**
                     * Get GST related fields and tax class based on date
                     */
                    this.applyGSTFieldsBasedOnDate();
                }else{
                     if (record.data.uniqueCase != undefined) {
                    this.uniqueCase=record.data.uniqueCase;
                    this.sezfromdate=record.data.sezfromdate;
                    this.seztodate=record.data.seztodate;
                    this.transactiondateforgst=this.billDate.getValue();
                }
                }
               
                this.addressDetailRecForGST=record.data.currentAddressDetailrec[0];
                if (!this.isModuleForAvalara) {
                    var obj = {};
                    obj.tagsFieldset=this.tagsFieldset;
                    obj.currentAddressDetailrec=this.addressDetailRecForGST;
                    obj.mappingRec=this.addressMappingRec;
                    obj.isCustomer=this.isCustomer;
                    obj.isShipping=this.isShipping;
                    populateGSTDimensionValues(obj);
                }
            }
            /**
             * Check and show alert GST details for Customer and Vendor if not available 
             */
//            var cust_Vendparams = {};
//            cust_Vendparams.rec = record;
//            cust_Vendparams.isCustomer = this.isCustomer;
//            checkAndAlertCustomerVendor_GSTDetails(cust_Vendparams);
//            
//            if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
//                if (!this.isCustomer) {
//                    if (record.data.GSTINRegTypeDefaultMstrID != undefined && record.data.GSTINRegTypeDefaultMstrID !== "" && record.data.GSTINRegTypeDefaultMstrID === Wtf.GSTRegMasterDefaultID.Unregistered) {
////                        this.GTAApplicable.setValue(false);
////                        this.GTAApplicable.setDisabled(true);
//                        this.purchaseFromURD = true;
//                    } else {
////                        this.GTAApplicable.setValue(false);
////                        this.GTAApplicable.setDisabled(false);
//                        this.purchaseFromURD = false;
//                    }
//                }
//            }
        }
    },
    applyGSTFieldsBasedOnDate:function(isAddressChanged){
        if (this.Name.getValue() == undefined || this.Name.getValue() == ''){
           return;
        }
            Wtf.Ajax.requestEx({
            url: this.isCustomer?"ACCCustomerCMN/getCustomerGSTHistory.do":"ACCVendorCMN/getVendorGSTHistory.do",
            params:{
                customerid:this.Name.getValue(),
                vendorid:this.Name.getValue(),
                returnalldata:true,
                isfortransaction:true,
                transactiondate:WtfGlobal.convertToGenericDate(this.billDate.getValue())
                
            }
        }, this, function(response) {
            if (response.success) {
             /**
             * Validate GST details
             */
            isGSTDetailsPresnetOnTransactionDate(response,this,this.Grid,this.Name);
            this.ignoreHistory=true;
            this.GSTINRegistrationTypeId=response.data[0].GSTINRegistrationTypeId;
            this.gstin=response.data[0].gstin;
            this.CustomerVendorTypeId=response.data[0].CustomerVendorTypeId;
            this.uniqueCase=response.data[0].uniqueCase;
            this.transactiondateforgst=this.billDate.getValue();
            this.CustVenTypeDefaultMstrID=response.data[0].CustVenTypeDefaultMstrID;
            this.GSTINRegTypeDefaultMstrID=response.data[0].GSTINRegTypeDefaultMstrID;
            /**
             * IDNIA country if Merchant Exporter check on then check GST Registration type and Customer/Vendor Type
             * is Merhcant Exporter allow in for "Registered" and "NA" type
             */
            onGSTDetailsChangeValidateMerchantExporterApplicability(this);
            var cust_Vendparams = {};
            var record={};
            record.data=response.data[0];
            cust_Vendparams.rec = record;
            cust_Vendparams.isCustomer = this.isCustomer;
            checkAndAlertCustomerVendor_GSTDetails(cust_Vendparams);
                if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
                if (!this.isCustomer) {
                    if (response.data[0].GSTINRegTypeDefaultMstrID != undefined && response.data[0].GSTINRegTypeDefaultMstrID !== "" && response.data[0].GSTINRegTypeDefaultMstrID === Wtf.GSTRegMasterDefaultID.Unregistered) {
                        this.purchaseFromURD = true;
                    } else {
                        this.purchaseFromURD = false;
                    }
                }
            }
                if (this.isPurchasesTransaction && this.purchaseFromURD) {
                    /*** If purchases is from Unregistered dealer ***/
                    if (this.isRCMApplicableInPreferences && this.GTAApplicable.getValue()) {
                        /**
                         * Apply GST for URD >> RCM
                         */
                        this.uniqueCase = Wtf.GSTCustVenStatus.APPLYGST;
                    } else {
                        /**
                         * Apply NO GST for URD>> NON RCM
                         */
                        this.uniqueCase = Wtf.GSTCustVenStatus.NOGST;
                    }
                }
                /**
                 * On Address Changes done then need to make getGSTForProduct Request to update tax Details
                 */
                if(this.keepTermDataInLinkCase==false || isAddressChanged){
                   processGSTRequest(this, this.Grid);
                }
            }
        });
    },
    onNameSelect:function(combo,rec,index){
        if (this.isEdit || this.isCopy ||this.copyInv ) {
            this.isVenOrCustSelect = true;
        }
        if(this.moduleid == Wtf.Acc_Invoice_ModuleId && Wtf.account.companyAccountPref.activateIBGCollection){
            this.customerBankAccountType.clearValue();
            this.customerBankAccountTypeStore.load();
        }
       this.singleLink = false;
       
        if(Wtf.account.companyAccountPref.countryid=='137' && this.isSelfBilledInvoice && rec.get('rmcdApprovalNumber')){// For Malasian Company
            this.RMCDApprovalNo.setValue(rec.get('rmcdApprovalNumber'));
        }
        
        if (this.mapPmtMethod){  //ERM-735 Associate default payment method to customer
            this.mapDefaultPaymentMethod(combo,rec,index);
       }
       if((this.isEdit || this.copyInv) && !this.ifFromShortfall ){     
           Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"), this.isCustomer? (WtfGlobal.getLocaleText("acc.invoice.alertoncustomerchange") + (this.currencychanged? " " + WtfGlobal.getLocaleText("acc.invoice.alertOnVendorOrCustomerChangeIfCurrencyChanged") : "") + " " + WtfGlobal.getLocaleText("acc.field.doYouWantToProceed")) : (WtfGlobal.getLocaleText("acc.invoice.alertonvendorchange") + (this.currencychanged? " " + WtfGlobal.getLocaleText("acc.invoice.alertOnVendorOrCustomerChangeIfCurrencyChanged") : "") + " " +WtfGlobal.getLocaleText("acc.field.doYouWantToProceed")), function(btn) {
               if(btn=="yes"){
                   if(this.GENERATE_PO || this.GENERATE_SO){
                        this.currencySelect(combo,rec,index);
                   }
                   this.doOnNameSelect(combo,rec,index); 
               } else{         
                   this.Name.setValue(combo.startValue);
                   return false;
               }
           },this);           
       } else {
            if (Wtf.productDetailsGridIsEmpty(this.Grid)) {
                if (this.invoicefromorder)                       //to handle the case of currency other than base currency or vendor currency
                {
                     this.Currency.setValue(this.invoicefromorderrec.currencyid)
                }
//               /*----- No need to set currency here As already Currecy is being set on load of currency store---*/
//                 else
//                {
//                    // this.Currency.setValue(rec.data['currencyid']);    //refer ticket ERP-14001
//                }
               }
           this.doOnNameSelect(combo,rec,index);
       }
//        if(this.Currency.getValue()!="" && Wtf.account.companyAccountPref.currid != this.Currency.getValue()) {
//                this.applyTaxToTermsChkHideShow(false);
//        }
       
       if(rec && rec.data && rec.data.defaultnatureofpurchase){
           this.defaultNatureOfPurchase.setValue(rec.data.defaultnatureofpurchase);
       } else if(this.defaultNatureOfPurchase != null){
           this.defaultNatureOfPurchase.setValue("");
       }
       if(rec && rec.data && rec.data.manufacturertype && Wtf.account.companyAccountPref.registrationType != Wtf.registrationTypeValues.DEALER){
           this.manufacturerTypeCombo.setValue(rec.data.manufacturertype);
       } else if(this.manufacturerTypeCombo != null){
           this.manufacturerTypeCombo.setValue("");
       }
       if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
            if(rec.data.interstateparty == true){
                this.FormType.allowBlank=false;//If Vendor/Customer is "InsterState Party" enable then "Form to Issue" will be Mandatory.
                WtfGlobal.showFormElement(this.FormType);
                if(rec.data.cformapplicable == true){//If Selected Vendor/Customer has C form applicable, then by Default C form will populate.
                    this.FormType.setValue(this.FormSelectionStore.getAt(1).data.id);
                }else{
                    this.FormType.setValue(this.FormSelectionStore.getAt(0).data.id);
                }
            }else{
                this.FormType.allowBlank=true;
                
                WtfGlobal.hideFormElement(this.FormType);
            }
         if(Wtf.isExciseApplicable && this.isExciseTab && Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA ){
             this.Supplier.setValue(rec.data.name);
             this.supplierImporterExporterCode.setValue(rec.data.iecnumber);
             this.supplierExciseRegnNo.setValue(rec.data.eccno);
             this.CSTNumber.setValue(rec.data.csttinno);
             this.supplierRange.setValue(rec.data.range);
             this.Commissionerate.setValue(rec.data.commissionerate);
             this.supplierDivision.setValue(rec.data.division);
             this.supplierTINSalesTAXNo.setValue(rec.data.vattinno);
             this.state.setValue(rec.data.billingState);
             this.SupplierAddress.setValue(rec.data.addressExciseBuyer);
             
         }       
//            
//            if(Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId){
//                this.getTDSCalculationDetails(rec);
//            }
        }
        
        if (Wtf.account.companyAccountPref.autoPopulateFieldsForDeliveryPlanner && this.moduleid == Wtf.Acc_Invoice_ModuleId) {
            if (rec != undefined && rec.data.deliveryTime != undefined) {
                this.deliveryTime.setValue(rec.data.deliveryTime);
            }
            
            // For set Delivery Date of Delivery Planner
            var billDate = new Date(this.billDate.getValue());
            var weekDay = rec.data.deliveryDate;
            var isNextDay = (weekDay == 7) ? true : false;
            var nextDate = WtfGlobal.getNextDateForWeekDay(billDate, weekDay, isNextDay);
            this.shipDate.setValue(nextDate);
        }
        /*Set Landing cost of Category set default value Not Applicable When Inventry Tab and select of Vendor Name. ERP-30195*/
        if(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId){            
            this.landingCostCategoryCombo.setValue("NOT APPLICABLE");
        }
    },
    
    currencySelect:function(combo,rec,index){
        var newCurrencyid = rec.data.currencyid;
           Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),this.isCustomer?WtfGlobal.getLocaleText("acc.invoice.alertoncustomerchangeforcurrency"):WtfGlobal.getLocaleText("acc.invoice.alertonvendorchangeforcurrency"),function(btn){
           if(btn=="yes" && this.Currency.getValue()!=newCurrencyid){
                this.externalcurrencyrate=0; 
                this.currencychanged = true;
                this.Currency.setValue(newCurrencyid);
                this.updateFormCurrency();
               }else{         
                  return false; 
               }
           },this);
        
    },
    doOnNameSelect:function(combo,rec,index){
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && !this.isCustomer){
            this.updateVATNumbers(rec);
        }
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId && !(this.isTemplate || this.isEditTemplate || this.isViewTemplate)){
            this.calculateAdvanceDocumentTDSAmount(rec);
        }
       var customer= this.Name.getValue();
       
       //Commented for ERP-41011 as it is no longer required as we have set Remote Store
//       if(this.isCustomer && this.users!=undefined && this.users!=null && this.users.store!=undefined && this.users.store !=null ){
//           this.users.store.load();
//       }
//       if(this.isCustomer){
//            Wtf.salesPersonFilteredByCustomer.load({
//                params:{ //sending a customerid to fliter available masteritems for selected customer 
//                    customerid:customer            
//                }
//            });
//       }
       if(this.ispurchaseReq){
          this.Name.setValue(customer);
       }else{
          if(!this.GENERATE_PO&&!this.GENERATE_SO){
             if(this.isEdit || this.copyInv){  //edit case when user retain exchange rate setting is true
                this.loadStoreOnNameSelect();
             }else {
                this.loadStore();
             }                                
             this.Name.setValue(customer);
           }
       }
       if(WtfGlobal.getModuleId(this)==20){// only in case of sales order
          if(this.isMaintenanceOrderCheckBox.checked)
            this.maintenanceNumberComboStore.load();
       }
       this.setTerm(combo,rec,index);
       if (this.isCustomer) {              //refer ticket ERP-14000
           this.setSalesPerson(combo, rec, index);
       }else{
           this.setAgent(combo, rec, index);
       }
//       this.Currency.setValue(this.currencyid);     //refer ticket ERP-14001
       this.updateData();
       this.autoPopulateProducts();
        /*
         * Don't reset Custom/Dimension Field value while Genarate PO or Generate So Case
        */
        if (!(this.isPOfromSO || this.isSOfromPO ||this.GENERATE_PO || this.GENERATE_SO || this.isEdit || this.copyInv)) {
            this.tagsFieldset.resetCustomComponents();
        }
       var moduleid = this.isCustomer ? Wtf.Acc_Customer_ModuleId : Wtf.Acc_Vendor_ModuleId;
       
       /**
        * If invoice is being generated from customer and Avalra Integration is enabled,
        * then we do not populate dimension from customer master, instead we populate from linked order
        */
       if (!(this.invoicefromorder && this.isModuleForAvalara)) {
           this.tagsFieldset.setValuesForCustomer(moduleid, customer);
       }
       this.currentAddressDetailrec="";//If customer/vendor change in this case,previously stored addresses in this.currentAddressDetailrec will be clear    
       this.Grid.setDisabled(false);
       if(this.ExpenseGrid){
       this.ExpenseGrid.setDisabled(false);
       }
       if(this.ifFromShortfall){
            this.fromPO.setValue(false);
            this.fromPO.disable();
            this.fromLinkCombo.setValue("");
            this.fromLinkCombo.disable();
        }
    },
    mapDefaultPaymentMethod:function(combo,rec,index)//auto populate default payment method to customer
    {
        if (this.isCustomer && (this.cash || this.mapPmtMethodInCredit)){
        var record = undefined;
                var combo = this.pmtMethod;
                if (rec.data.paymentmethod != "" && rec.data.paymentmethod != null){
        var pmtMethod = rec.data.paymentmethod;
                var index = this.pmtMethod.store.findBy(function(rec){
                var methodid = rec.data['methodid'];
                        if (pmtMethod == methodid)
                        return true;
                        else
                        return false;
                })
                if (this.cash){
        if (index != - 1){
        record = this.pmtMethod.store.getAt(index);
                this.pmtMethod.setValue(pmtMethod);
                this.ShowCheckDetails(combo, record);
        } else{
        this.setCashMethod();
        }
        } else{
        this.pmtMethod.setValue(rec.data.paymentmethod);//In credit
        }
        } else {
        this.setCashMethod();
        }

        }
        },
    autoPopulateProducts:function(){
        if(!this.isExpenseInv) {
            if(true){  //  Load this store in add/edit/copy cases.
                if(this.moduleid==Wtf.Acc_Sales_Order_ModuleId ||this.moduleid==Wtf.Acc_Purchase_Order_ModuleId  ||this.moduleid== Wtf.Acc_Cash_Purchase_ModuleId ||this.moduleid==Wtf.Acc_Cash_Sales_ModuleId ||this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId ||this.moduleid==Wtf.Acc_Invoice_ModuleId||this.moduleid==Wtf.Acc_Customer_Quotation_ModuleId||this.moduleid==Wtf.Acc_Vendor_Quotation_ModuleId){// this.cash ||this.isInvoice
                    this.Grid.ProductMappedStore.on('beforeload',function(s,o){
                        if(!o.params)o.params={};
                        var currentBaseParams = this.Grid.ProductMappedStore.baseParams;
                        currentBaseParams.mappedProductRequest=true;
                        currentBaseParams.startdate = WtfGlobal.convertToGenericDate(WtfGlobal.getDates(true));
                        currentBaseParams.enddate = WtfGlobal.convertToGenericDate(WtfGlobal.getDates(false));  
                        currentBaseParams.moduleid = this.moduleid;         // Passing Moduleid
                        this.Grid.ProductMappedStore.baseParams=currentBaseParams;        
                    },this);  
                    this.Grid.ProductMappedStore.load({
                        params:{
                            mappingProduct:true,
                            affecteduser:this.Name.getValue(),
                            common:'1', 
                            loadPrice:true,
                            mode:22,
                            moduleId:this.moduleid
                        }
                    })
                    this.Grid.ProductMappedStore.on("load",function(){
                        this.Grid.affecteduser=this.Name.getValue();
                        if(!this.isEdit && !this.copyInv && this.autoPopulateMappedProduct){ //  in edit and copy case dont autopopulate mapped product untill user change the product manually 
                             this.Grid.loadMappedProduct(this.Grid.ProductMappedStore);
                        }
                            
                    },this);                           
                }else{
                    this.ProductGrid.ProductMappedStore.on('beforeload',function(s,o){
                        if(!o.params)o.params={};
                        var currentBaseParams = this.ProductGrid.ProductMappedStore.baseParams;
                        currentBaseParams.mappedProductRequest=true;
                        currentBaseParams.startdate = WtfGlobal.convertToGenericDate(WtfGlobal.getDates(true));
                        currentBaseParams.enddate = WtfGlobal.convertToGenericDate(WtfGlobal.getDates(false));  
                        currentBaseParams.moduleid = this.moduleid;         // Passing Moduleid
                        this.ProductGrid.ProductMappedStore.baseParams=currentBaseParams;        
                    },this);  
                    this.ProductGrid.ProductMappedStore.load({
                        params:{
                            mappingProduct:true,
                            affecteduser:this.Name.getValue(),
                            common:'1', 
                            loadPrice:true,
                            mode:22,
                            moduleId:this.moduleid
                        }
                    })
                    this.ProductGrid.ProductMappedStore.on("load",function(){
                        this.ProductGrid.affecteduser=this.Name.getValue();
                        this.ProductGrid.loadMappedProduc(this.ProductGrid.ProductMappedStore);
                    },this); 
                }                                 
            }
        }
    },
    
    addSalesPerson:function(){
        this.isCustomer ? addMasterItemWindow('15') : addMasterItemWindow('20');
    },
    
    onBeforesalesPersonLoad: function(store, obj) {
        if (!obj.params) {
            obj.params = {};
        }
            obj.params.customerid = this.Name.getValue();
    },
     onBeforeAgentLoad: function(store, obj) {
        if (!obj.params) {
            obj.params = {};
        }
            obj.params.vendorid = this.Name.getValue();
    },
    
     SetLocationwarehouseWindow: function(){
        this.recArr = this.Grid.getSelectionModel().getSelections();
        var quantityNonSetProductCount=0;
        var productwithLocationWarehouse=0;
        for(var k=0;k< this.recArr.length;k++){
           var proRecord=this.recArr[k];
           if(proRecord.data.isLocationForProduct  && proRecord.data.isWarehouseForProduct && !proRecord.data.isSerialForProduct && !proRecord.data.isBatchForProduct){
                productwithLocationWarehouse++;
                if(proRecord.data.quantity ==""){
                    quantityNonSetProductCount++;
                }
            }
        }
        
        if(productwithLocationWarehouse ==0){
             WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.window.noRecordwithWarhouselocation")],2);
            return false;
        }else if (quantityNonSetProductCount > 0){
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.grid.noquanitysetforProduct")],2);
            return false;
        }else{
            this.SetLocationwarehouseWindow = new Wtf.account.SetLocationwarehouseWindow({
                id: 'setLocationwarehouseWindow'+this.id,
                title: WtfGlobal.getLocaleText("acc.SetWarehouseLocation"),
                border: false,
                isCustomer:this.isCustomer,
                grid:this.Grid,
                scope:this,
                closable: true,
                modal: true,
                iconCls :getButtonIconCls(Wtf.etype.deskera),
                resizable: false,
                renderTo: document.body
            });
            this.SetLocationwarehouseWindow.show(); 
        }
     }, 
     
    deleteSelectedRecord: function() {
        var store = this.Grid.getStore();
        var arr = [];
        var arrLinked1=[];
        var component = "";
        var deletedData = [];
        var value = "";
        var arrLinked = [];
         var arrNotLinked = [];
        var message = "Link Information of ";
        /* Link to  Combo*/
        var linkToComponent = Wtf.getCmp(this.fromLinkCombo.id);
        /* Link combo*/
        var linkComponent = Wtf.getCmp(this.fromPO.id);
        var count = 0;
        var rowindex = 0;
        var isLastProductDeletedFlag = false;
        var isNotLinkedFlag = false;
        var selectedCount = this.Grid.sModel.getCount();
        var flagType=0;
        for (rowindex = 0; rowindex < selectedCount; rowindex++) {

            var addFlag = false;
            var editFlag = false;
            var copyFlag = false;
          
            var record = this.Grid.sModel.getSelections()[rowindex];
            arrLinked[rowindex] = "";
            arrNotLinked[rowindex] = "";
            /* Checking Cases whether it is Add , Edit or Copy Case*/
           
            if (!this.isEdit && this.fromLinkCombo.getRawValue() != "" && (record.data.billno && record.data.billid)) {
                addFlag = true;
                flagType = 1;
            } else if (this.isEdit && this.fromLinkCombo.getRawValue() != "" && !this.copyInv) {
                /* In Edit case if unlinking transaction through deleting line level product 
                 * 
                 * & linking transaction with another document*/
                
                if (!this.fromPO.disabled) { //"Link" combo is disabled in Edit mode initially,if linked transaction is not unlinked
                    addFlag = true;
                    flagType = 1;
                } else {
                    editFlag = true;
                    flagType = 2;
                }

            } else if (this.copyInv && this.fromLinkCombo.getRawValue() != "" && (record.data.billno && record.data.billid)) {
                copyFlag = true;
                flagType = 3
            }
       


            /* Function is used to check whether selected linked product is last product or not*/

            var lastProductDeleted = false;
           
                if (editFlag) {
                    lastProductDeleted = isLinkedProduct(store, record, true);
                } else if (addFlag) {
                    lastProductDeleted = isLinkedProduct(store, record, false);
                } else if (copyFlag) {
                    lastProductDeleted = isLinkedProduct(store, record, false);
                }
        

            if (lastProductDeleted) {
                count++;
                isLastProductDeletedFlag = true;
                if (Wtf.Acc_RFQ_ModuleId == this.moduleid & count == 1) {
                    message += "Purchase Requisition <b>";
                } else {

                    if (count == 1) {
                        if (editFlag) {
                            message += linkToComponent.lastSelectionText;
                        } else {
                            message += linkToComponent.lastSelectionText;
                        }
                    }
                }

                    if (this.PO.id) {
                        if (count == 1) {
                            component = Wtf.getCmp(this.PO.id);
                            value = component.getValue();
                            arr = value.split(",");
                            arrLinked1=value.split(",");
                        }

                        /* Block is used to remove linked document from combo */
                        if (arr.length > 1) {
                            this.linkedDocumentId += editFlag ? record.data.linkid + "," : record.data.billid + ",";//appending ID of removed document
                            arr.remove(editFlag ? record.data.linkid : record.data.billid);

                        } else {
                            /* Reseting Link &  Link to combo if all linked document is getting removed*/
                            if (!(Wtf.Acc_RFQ_ModuleId == this.moduleid)) {
                                this.linkedDocumentId += editFlag ? record.data.linkid + "," : record.data.billid + ",";
                                arr.remove(editFlag ? record.data.linkid : record.data.billid);

                            } 

                        }

                    }
            
                var qty = record.data.quantity;
                qty = (qty == "NaN" || qty == undefined || qty == null) ? 0 : qty;

                if (record.data.copyquantity != undefined) {

                    var newRec = new this.Grid.deleteRec({
                        productid: record.data.productid,
                        productname: record.data.productname,
                        productquantity: qty,
                        productbaseuomrate: record.data.baseuomrate,
                        productbaseuomquantity: record.data.baseuomquantity,
                        productuomid: record.data.uomid,
                        productrate: record.data.rate
                    });
                    deletedData.push(newRec);
                }
                /* Preparing array of linked product*/
                arrLinked[rowindex] = this.Grid.sModel.getSelections()[rowindex];



            } else {
                /* Block is used to delete  line level Product if they have not been linked*/
                var qty = record.data.quantity;
                qty = (qty == "NaN" || qty == undefined || qty == null) ? 0 : qty;

                if (record.data.copyquantity != undefined) {

                    var newRec = new this.Grid.deleteRec({
                        productid: record.data.productid,
                        productname: record.data.productname,
                        productquantity: qty,
                        productbaseuomrate: record.data.baseuomrate,
                        productbaseuomquantity: record.data.baseuomquantity,
                        productuomid: record.data.uomid,
                        productrate: record.data.rate

                    });
                    deletedData.push(newRec);
                }
               isNotLinkedFlag=true;
               arrNotLinked[rowindex] = this.Grid.sModel.getSelections()[rowindex];

            }
        }
       
      
        var showPromptFlag = false;
        var linkid="";
        var message1="";
        /* Checking whether Last Product is deleted from linked documents*/
        if (isLastProductDeletedFlag) {
            for (var j = 0; j < arrLinked1.length; j++) {
                
                var recordCount = 0;
                var recordCountInLinkedArray = 0;
                var counter=0;
                /* calculating count of selected linked product*/
                for (var l = 0; l < arrLinked.length; l++) {
                    if (arrLinked[l] != "") {
                    
                        linkid= (flagType==2)?arrLinked[l].data.linkid:arrLinked[l].data.billid ;
                       
                        if (linkid == arrLinked1[j]) {
                            if (counter == 0) {
                                counter++;
                                message1 +=(flagType==2) ? " <b>" + arrLinked[l].data.linkto + "</b>" + " , " : " <b>" + arrLinked[l].data.billno + "</b>" + " , ";
                            }
                            recordCountInLinkedArray++;
                        }
                    }
                }
                /* calculating count from store with selected linkid product*/
                store.each(function(rec) {
                  
                    linkid= (flagType==2)?rec.data.linkid:rec.data.billid;
                   
                    if (arrLinked1[j] == linkid) {
                        recordCount++;
                    }

                }, this)

                /* checking that all linked product of particular linked transaction is selcted, if yes then showing prompt i.e showPromptFlag=true*/
                if (recordCount - recordCountInLinkedArray == 0) {
                    message += message1;
                    showPromptFlag = true;
                } else {
                    arr[j] = arrLinked1[j];
                }
                message1="";
            }
        }

        /* Block is used to Delete Line level product after confirmation if they linked with any other document */
        if (((isLastProductDeletedFlag && isNotLinkedFlag) || isLastProductDeletedFlag) && showPromptFlag) {
            message = message.slice(0, -3);
            message += "</b> will be Removed. </br>" + WtfGlobal.getLocaleText("acc.nee.48")
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), message, function(btn) {
                if (btn != "yes")
                    return;

                /* Deleting linked product by ID*/
                for (var i = 0; i < arrLinked.length; i++) {
                    if (arrLinked[i] != "") {
                        var id = arrLinked[i].id;
                        store.remove(store.getById(id));
                    }

                }
               
                if (arr.length == 0) {
                    this.fromLinkCombo.disable();//Disabling "Link to" if all linked transaction is deleted 
                    this.PO.disable();//Disabling "Number" if all linked transaction is deleted 
                    linkToComponent.setValue("");
                    linkComponent.setValue("");
                    this.fromPO.enable();//Enabling "Link" combo if all linked transaction is getting deleted

                }
                component.setValue(arr);
                
                /* Block is used to Delete Line level product if they are not linked with any other document */
                if (isNotLinkedFlag) {

                    /* Deleting linked product by ID*/
                    for (var i = 0; i < arrNotLinked.length; i++) {
                        if (arrNotLinked[i] != "") {
                            var id = arrNotLinked[i].id;
                            store.remove(store.getById(id));
                        }

                    }
                }

                this.Grid.deleteStore.add(deletedData);
                if (this.includeProTax && this.includeProTax.getValue() == true) {
                    /*
                     * Recalculated Tax Amount using adaptive rounding algo on delete selected products.
                     * ERM-1085
                     */
                    WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, false);
                }
                this.Grid.fireEvent('datachanged', this);
                this.Grid.fireEvent('productdeleted', this);
            }, this);
        }else{
            /* Block is used to Delete Line level product if they cannot affect linking information of that document*/
           
                    /* Deleting linked product by ID*/
                for (var i = 0; i < arrLinked.length; i++) {
                    if (arrLinked[i] != "") {
                        var id = arrLinked[i].id;
                        store.remove(store.getById(id));
                    }

                }
                
                /* Deleting linked product by ID*/
                for (var i = 0; i < arrNotLinked.length; i++) {
                    if (arrNotLinked[i] != "") {
                        var id = arrNotLinked[i].id;
                        store.remove(store.getById(id));
                    }

                }
                if(Wtf.account.companyAccountPref.isLineLevelTermFlag && !this.isExpenseInv){
                    this.Grid.updateTermDetails();
                }
                this.Grid.deleteStore.add(deletedData);
                if (this.includeProTax && this.includeProTax.getValue() == true) {
                /*
                 * Recalculated Tax Amount using adaptive rounding algo on delete selected products.
                 * ERM-1085
                 */
                    WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, false);
                }
                this.Grid.fireEvent('datachanged', this);
                this.Grid.fireEvent('productdeleted', this);

        }
        this.Grid.addorRemoveBomCodeColumn(null,this.autoGenerateDO.checked,store);
    },
    deleteSelectedExpenseInvRecord: function() {
    var arr = [];
    var store = this.ExpenseGrid.getStore();
    var selectedCount = this.ExpenseGrid.sModel.getCount();
    var index=0;
    var rowindex=0;
    var message = "";
    if(this.isEdit){
         message += "</b> Selected record will be Removed. </br>" + WtfGlobal.getLocaleText("acc.nee.48")
         Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), message, function(btn) {
            if (btn != "yes")
                return;            
            for (rowindex = 0; rowindex < selectedCount; rowindex++) {
                arr[rowindex] = this.ExpenseGrid.sModel.getSelections()[index];
                if (arr[rowindex] != "") {
                    var id = arr[rowindex].id;
                    store.remove(store.getById(id));
                }
            }
            if (this.includeProTax && this.includeProTax.getValue() == true) {
                /*
                 * Recalculated Tax Amount using adaptive rounding algo on delete selected products.
                 * ERM-1085
                 */
                WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, true);
            }
            this.grid.fireEvent('datachanged', this);
        },this);
    }
    
    else{
        for (rowindex = 0; rowindex < selectedCount; rowindex++) {
                arr[rowindex] = this.ExpenseGrid.sModel.getSelections()[index];
                if (arr[rowindex] != "") {
                    var id = arr[rowindex].id;
                    store.remove(store.getById(id));
                }
            }
            if (this.includeProTax && this.includeProTax.getValue() == true) {
                /*
                 * Recalculated Tax Amount using adaptive rounding algo on delete selected products. 
                 * ERM-1085
                 */
                WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, true);
            }
            this.grid.fireEvent('datachanged', this);
    }
},
getPostTextToSetPostText:function(){
     Wtf.Ajax.requestEx({
            url: "ACCCommon/getPDFTemplateRow.do",
            params:{
                module:this.moduleid
            }
        }, this, function(response) {
            if (response.success) {
                this.postText=response.posttext;
            }
        });
    
},
    moduleTemplateSection:function(){
        this.moduleTemplateRecord = new Wtf.data.Record.create([
            {
                name: 'templateId'
            },
            {
                name: 'templateName'
            },
            {
                name: 'moduleRecordId'
            }
        ]);

        this.moduleTemplateStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },this.moduleTemplateRecord),
            url : "ACCCommon/getModuleTemplate.do",
            baseParams:{
                moduleId:WtfGlobal.getModuleId(this)
            }
        });
        
        this.moduleTemplateStore.on('load', function(store){
            /*
             isAfterSaveNCreateNew is set as true if save and create new button is clicked
              */
            this.isAfterSaveNCreateNew=( this.isAfterSaveNCreateNew!=undefined)? this.isAfterSaveNCreateNew:false; 
            /*
             *Loads the default Template Id for the module  
             **/
            var defaultId=store.reader.jsonData.defaultId;
            if( this.templateModelCombo.getValue()== ""&&defaultId!=undefined&&!this.isCopyFromTemplate&&!this.isEdit&&!this.isView&&!this.isCopyInvoice&&!this.isTemplate){
                this.templateModelCombo.setValue(defaultId);
                this.templateId=defaultId;
                var templaterec = WtfGlobal.searchRecord(this.moduleTemplateStore, this.templateId, 'templateId');
                if(templaterec!=undefined ){
                    this.templatename =templaterec.data.templateName ;
                    this.moduleTemplateName.setValue(this.templatename);
                }
                this.templateModelCombo.fireEvent('select',this);
            }else  if(this.isAfterSaveNCreateNew==true){
                /*
                 *This block will get executed if save and create new button is clicked
                 **/
               this.templateId=defaultId;
                this.templateModelCombo.setValue(this.templateId);
                this.templateModelCombo.fireEvent('select',this);
                var templaterec = WtfGlobal.searchRecord(this.moduleTemplateStore, this.templateId, 'templateId');
                if(templaterec!=undefined ){
                    this.templatename =templaterec.data.templateName ;
                    this.moduleTemplateName.setValue(this.templatename);
                }
            }

            if(this.isCopyFromTemplate && this.templateId!= undefined &&!this.isAfterSaveNCreateNew){
                this.templateModelCombo.setValue(this.templateId);
                var templaterec = WtfGlobal.searchRecord(this.moduleTemplateStore, this.templateId, 'templateId');
                if(templaterec!=undefined ){
                    this.templatename =templaterec.data.templateName ;
                    this.moduleTemplateName.setValue(this.templatename);
                }else{
                    this.moduleTemplateName.setValue("");
                }
            }   
            
            this.hideTypeOfUnitOnSelectOfExciseUnitTpl(this.templateId);//  ERP-27120 :-Indian Company if Template select otherthen none and delear type excise unit option then hide Types of Unit Combo else shown.
            
        },this);
        
        
        this.templateModelCombo= new Wtf.form.FnComboBox({
            fieldLabel:(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && this.isExciseTab)? WtfGlobal.getLocaleText("acc.field.SelectExciseUnit")+"*":(this.isViewTemplate?WtfGlobal.getLocaleText("acc.designerTemplateName"): WtfGlobal.getLocaleText("acc.field.SelectTemplate")),
            id:"templateModelCombo"+this.heplmodeid+this.id,
            store: this.moduleTemplateStore,
            valueField:'templateId',
            displayField:'templateName',
            hideTrigger:this.isViewTemplate,
            hirarchical:true,
            emptyText:(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && this.isExciseTab)? WtfGlobal.getLocaleText("acc.field.SelectExciseUnit"):WtfGlobal.getLocaleText("acc.invoice.grid.template.emptyText"),
            mode: 'local',
            typeAhead: true,
            hidden:this.isTemplate || (this.quotation && !this.isCustomer) || this.isEditTemplate||this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId,
            hideLabel:this.isTemplate || (this.quotation && !this.isCustomer) || this.isEditTemplate||this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId,
            forceSelection: true,
            selectOnFocus:true,
            addNoneRecord: true,
            allowBlank:(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && Wtf.isExciseTab)? false:true,
            width : 240,
            triggerAction:'all',
            scope:this

        });
        this.templateModelCombo.on('select',this.setTemplateValues,this);
      
       
        /*For SATS*/
        /**/
        
        this.moduleTemplateName = new Wtf.form.TextField({
            fieldLabel:WtfGlobal.getLocaleText("acc.campaigndetails.campaigntemplate.templatename"),
            name: 'moduletempname',
            id:"moduletempname"+this.id,
            width : 240,
            maxLength:50,
            scope:this
        });
        
        this.createAsTransactionChk = new Wtf.form.Checkbox({
            fieldLabel : WtfGlobal.getLocaleText("acc.field.CreateTransactionAlso"),
            name:'createAsTransactionChkbox',
            cls : 'custcheckbox',
            width : 10
        });
        
        this.createAsTransactionChk.on('check', function(){
            if(this.createAsTransactionChk.getValue()){
                this.createTransactionAlso = true;
                WtfGlobal.showFormElement(this.sequenceFormatCombobox);
                WtfGlobal.showFormElement(this.Number);
                this.sequenceFormatCombobox.show();
                WtfGlobal.showFormLabel(this.sequenceFormatCombobox);
                this.Number.show();
                WtfGlobal.showFormLabel(this.Number);
                /**
                 * in case of template sequence format combobox should be hidden.
                 */
                if (this.autoGenerateDO && this.autoGenerateDO.getValue() && (this.isTemplate || this.isEditTemplate)) {
                    this.showDO();
                }
                var seqRec=this.sequenceFormatStore.getAt(0)
                this.sequenceFormatCombobox.setValue(seqRec.data.id);
                var count=this.sequenceFormatStore.getCount();
                for(var i=0;i<count;i++){
                    seqRec=this.sequenceFormatStore.getAt(i)
                    if(seqRec.json.isdefaultformat=="Yes"){
                        this.sequenceFormatCombobox.setValue(seqRec.data.id) 
                        break;
                    }
                }
                this.getNextSequenceNumber(this.sequenceFormatCombobox);
                this.Number.allowBlank = false;
                if(!this.isViewTemplate){            // View mode- all fields should be disabled unconditionaly
                    this.Number.enable();
                }    
                this.sequenceFormatCombobox.enable();
                this.billDate.enable();
                this.autoGenerateDO.enable();
                this.generateReceipt.enable();
                this.setTransactionNumber();
                this.billDate.setValue(Wtf.serverDate);
            }else{
                this.createTransactionAlso = false;
                this.Number.disable();
                this.sequenceFormatCombobox.disable();                
                this.billDate.disable();
                /**
                 * in case of template sequence format combobox should be hidden.
                 */
                if (this.autoGenerateDO && this.autoGenerateDO.getValue() && (this.isTemplate || this.isEditTemplate)) {
                    this.hideDO();
                }
//                this.autoGenerateDO.setValue(false);
//                this.autoGenerateDO.disable();
//                this.generateReceipt.setValue(false);
//                this.generateReceipt.disable();
                this.sequenceFormatCombobox.reset();
                this.Number.setValue('');
                this.Number.allowBlank = true;
                WtfGlobal.hideFormElement(this.sequenceFormatCombobox);
                WtfGlobal.hideFormElement(this.Number);
            }
            
            if(this.isTemplate && this.createAsTransactionChk.getValue()) {
                if(this.saveAsDraftBttn)this.saveAsDraftBttn.setDisabled(false);     //refer ticket ERP-13119
            } else if(this.isTemplate){
                if(this.saveAsDraftBttn)this.saveAsDraftBttn.setDisabled(true);     //refer ticket ERP-13119
            }
        },this);
        
        this.SelectedTemplateRec = Wtf.data.Record.create ([
        {name:'billid'},
        {name:'journalentryid'},
        {name:'entryno'},
        {name:'billto'},
        {name:'discount'},
        {name:'currencysymbol'},
        {name:'orderamount'},
        {name:'isexpenseinv'},
        {name:'currencyid'},
        {name:'shipto'},
        {name:'mode'},
        {name:'billno'},
        {name:'date', type:'date'},
        {name:'duedate', type:'date'},
        {name:'shipdate', type:'date'},
        {name:'personname'},
        {name:'personemail'},
        {name:'personid'},
        {name:'shipping'},
        {name:'othercharges'},
        {name:'partialinv',type:'boolean'},
        {name:'includeprotax',type:'boolean'},
        {name:'amount'},
        {name:'amountdue'},
        {name:'termdays'},
        {name:'termid'},
        {name:'termname'},
        {name:'incash'},
        {name:'taxamount'},
        {name:'taxid'},
        {name:'orderamountwithTax'},
        {name:'taxincluded',type:'boolean'},
        {name:'taxname'},
        {name:'deleted'},
        {name:'amountinbase'},
        {name:'memo'},
        {name:'externalcurrencyrate'},
        {name:'ispercentdiscount'},
        {name:'discountval'},
        {name:'crdraccid'},
        {name:'creditDays'},
        {name:'isRepeated'},
        {name:'porefno'},
        {name:'costcenterid'},
        {name:'costcenterName'},
        {name:'interval'},
        {name:'intervalType'},
        {name:'startDate', type:'date'},
        {name:'nextDate', type:'date'},
        {name:'expireDate', type:'date'},
        {name:'repeateid'},
        {name:'status'},
        {name:'archieve', type:'int'},
        {name:'withoutinventory',type:'boolean'},
        {name:'rowproductname'},
        {name:'rowquantity'},
        {name:'rowrate'},
        {name:'rowprdiscount'},
        {name:'rowprtaxpercent'},
        {name:'shipvia'},
        {name:'fob'},
        {name:'salesPerson'},
        {name:'agent'},
        {name:'termdetails'},
        {name:'isQuotation'},
        {name:'shippingterm'},
        {name:'methodid'},
        {name:'hasAccess'},
        {name:'shiplengthval'},/*For SATS*/
        {name: 'assetExciseid'},
        {name: 'exciseDetailid'},
        {name: 'suppliers'},
        {name: 'supplierTINSalesTAXNo'},
        {name: 'supplierExciseRegnNo'},
        {name: 'cstnumber'},
        {name: 'supplierRange'},
        {name: 'supplierCommissionerate'},
        {name: 'supplierAddress'},
        {name: 'supplierImporterExporterCode'},
        {name: 'supplierDivision'},
        {name: 'manufacturername'},
        {name: 'manufacturerExciseRegnNo'},
        {name: 'manufacturerRange'},
        {name: 'manufacturerCommissionerate'},
        {name: 'manufacturerDivision'},
        {name: 'manufacturerAddress'},
        {name: 'manufacturerImporterExporterCode'},
        {name: 'InvoicenoManuFacture'},
        {name: 'InvoiceDateManuFacture'},
        {name: 'supplierState'},
        {name: 'registrationType'},
        {name: 'UnitName'},
        {name: 'ECCNo'},
        {name: 'populateproducttemplate'},
        {name: 'populatecustomertemplate'},
        {name: 'populateautodointemp'},
        {name:'gstIncluded'},
        {name:'isTDSApplicable'}, // At time of creating trasaction is TDS is applicable or not
        {name: 'billingAddressType'},
        {name: 'billingAddress'},
        {name: 'billingCountry'},
        {name: 'billingState'},
        {name: 'billingPostal'},
        {name: 'billingEmail'},
        {name: 'billingFax'},
        {name: 'billingMobile'},
        {name: 'billingPhone'},
        {name: 'billingContactPerson'},
        {name: 'billingRecipientName'},
        {name: 'billingContactPersonNumber'},
        {name: 'billingContactPersonDesignation'},
        {name: 'billingWebsite'},
        {name: 'billingCounty'},
        {name: 'billingCity'},
        {name: 'shippingAddressType'},
        {name: 'shippingAddress'},
        {name: 'shippingCountry'},
        {name: 'shippingState'},
        {name: 'shippingCounty'},
        {name: 'shippingCity'},
        {name: 'shippingEmail'},
        {name: 'shippingFax'},
        {name: 'shippingMobile'},
        {name: 'shippingPhone'},
        {name: 'shippingPostal'},
        {name: 'shippingContactPersonNumber'},
        {name: 'shippingContactPersonDesignation'},
        {name: 'shippingWebsite'},
        {name: 'shippingRecipientName'},
        {name: 'shippingContactPerson'},
        {name: 'shippingRoute'},
        {name: 'vendcustShippingAddress'},
        {name: 'vendcustShippingCountry'},
        {name: 'vendcustShippingState'},
        {name: 'vendcustShippingCounty'},
        {name: 'vendcustShippingCity'},
        {name: 'vendcustShippingEmail'},
        {name: 'vendcustShippingFax'},
        {name: 'vendcustShippingMobile'},
        {name: 'vendcustShippingPhone'},
        {name: 'vendcustShippingPostal'},
        {name: 'vendcustShippingContactPersonNumber'},
        {name: 'vendcustShippingContactPersonDesignation'},
        {name: 'vendcustShippingWebsite'},
        {name: 'vendcustShippingContactPerson'},
        {name: 'vendcustShippingRecipientName'},
        {name: 'vendcustShippingAddressType'},
        /**
         * If Show Vendor Address in purchase side document and India country 
         * then this Fields used to store Vendor Billing Address
         */
        {name: 'vendorbillingAddressTypeForINDIA'},
        {name: 'vendorbillingAddressForINDIA'},
        {name: 'vendorbillingCountryForINDIA'},
        {name: 'vendorbillingStateForINDIA'},
        {name: 'vendorbillingPostalForINDIA'},
        {name: 'vendorbillingEmailForINDIA'},
        {name: 'vendorbillingFaxForINDIA'},
        {name: 'vendorbillingMobileForINDIA'},
        {name: 'vendorbillingPhoneForINDIA'},
        {name: 'vendorbillingContactPersonForINDIA'},
        {name: 'vendorbillingRecipientNameForINDIA'},
        {name: 'vendorbillingContactPersonNumberForINDIA'},
        {name: 'vendorbillingContactPersonDesignationForINDIA'},
        {name: 'vendorbillingWebsiteForINDIA'},
        {name: 'vendorbillingCountyForINDIA'},
        {name: 'vendorbillingCityForINDIA'},
        {name: 'CustomerVendorTypeId'},
        {name: 'GSTINRegistrationTypeId'},
        {name: 'GSTINRegTypeDefaultMstrID'},
        {name: 'gstin'},
        {name: 'isapplytaxtoterms'}
    ]);
    
    this.SelectedTemplateStoreUrl = "";
    
    if(this.isOrder && !this.quotation){
    if(this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId){
        this.SelectedTemplateStoreUrl= "ACCPurchaseOrderCMN/getSecurityGateEntryMerged.do"  
    }else{
        this.SelectedTemplateStoreUrl= this.businessPerson=="Customer" ? "ACCSalesOrderCMN/getSalesOrdersMerged.do":"ACCPurchaseOrderCMN/getPurchaseOrdersMerged.do"  
    }
    }else if(this.quotation){
        this.SelectedTemplateStoreUrl = this.isCustomer? "ACCSalesOrderCMN/getQuotations.do" : "ACCPurchaseOrderCMN/getQuotations.do";
    }else{
        this.SelectedTemplateStoreUrl= this.businessPerson=="Customer" ? "ACCInvoiceCMN/getInvoicesMerged.do" : "ACCGoodsReceiptCMN/getGoodsReceiptsMerged.do";
    }
    
    this.SelectedTemplateStore = new Wtf.data.Store({
            url:this.SelectedTemplateStoreUrl,
            scope:this,
           baseParams:{
                archieve:0,
                deleted:false,
                nondeleted:false,
                cashonly:(this.cash == undefined)?false:this.cash,
                creditonly:false,
                consolidateFlag:false,
                companyids:companyids,
                enddate:'',
                gcurrencyid:gcurrencyid,
                userid:loginid,
                isfavourite:false,
                startdate:''
            },
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:'count'
            },this.SelectedTemplateRec)
        });
        
        this.SelectedTemplateStore.on('load', this.fillData,this);
        this.SelectedTemplateStore.on('loadexception', function(){
        this.loadingMask.hide();
        },this);
        this.moduleTemplateStore.load();
        
    },
    
    onDateChange:function(a,val,oldval){           
        /**
         * ERP-32829 
         */
//        this.setGSTFlagUsingApplicableDate(val);
        this.transactiondateforgst = this.billDate.getValue();
//        /*
//        *	ERM-1037
//        *	On date change send id of linked document to function to restrict linking of future dated document
//        */
//        var selectedBillIds=this.PO.getValue().toString();
//        if (selectedBillIds!= ""){
//            var selectedValuesArr = selectedBillIds.split(',');
//            WtfGlobal.checkForFutureDate(this,selectedValuesArr);
//        }
        if (this.isIndiaGST) {
            if ((this.isEdit && !this.copyInv && !this.checkgststatus)) {
                /**
                 * Show pop up in edit case
                 */
                checkGSTDataOnDateCase(this, this.Grid, oldval);
            } else if (this.PO.getValue() != undefined && this.PO.getValue() != "" && !this.checkgststatus) {
                /**
                 * Get link document date in Show pop up
                 */
                getLinkDateTocheckGSTDataOnDateCase(this, this.Grid);
            } else {
                /**
                 * calulate GST based on date
                 */
                this.applyGSTFieldsBasedOnDate();
            }
            this.checkgststatus = false;
        }
        /**
         * gst rule get by billing date, 
         * So need to set bill date to grid object on date change
         */
        if (this.isGST && this.Grid) {
            this.Grid.billDate = this.billDate.getValue();
        }
        if(this.Currency.getValue()==WtfGlobal.getCurrencyID()){ //when tranaction in base currency for all cases (edit,copy, create new)
            this.doOnDateChanged(val,oldval);
        } else if((this.isEdit && !this.copyInv) && Wtf.account.companyAccountPref.retainExchangeRate){ //edit case: when user want to retain exchange rate        
            this.exchangeRateInRetainCase = true;
            this.currencyStore.load({params: {mode: 201, transactiondate: WtfGlobal.convertToGenericDate(this.billDate.getValue())}});
            
//            return;                                       
        } else if(this.isEdit || this.copyInv) { //1.Edit case when user do not want to retain exchange rate 2.copy case
             Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.invoice.exchangeRateMsg"),function(btn){
                if(btn=="yes"){
                    this.doOnDateChanged(val,oldval); 
                } else{
                    this.billDate.setValue(oldval);
                    return;
                }
             },this);
        } else { //Normal Create New Case           
            this.doOnDateChanged(val,oldval);        
        } 
        if (Wtf.account.companyAccountPref.countryid === Wtf.CountryID.MALAYSIA) { // for malaysian company
            var isTaxShouldBeEnable = WtfGlobal.isTaxShouldBeEnable(new Date(this.billDate.getValue()).clearTime());
            if(this.importService && this.importService.getValue()){
                isTaxShouldBeEnable = false;
            }
            if (!isTaxShouldBeEnable) { // check if tax should be disable or not
                this.Grid.getStore().removeAll();
                this.Grid.addBlankRow();
                this.includingGST.setValue(false);
                this.includingGST.disable();
                this.isTaxable.setValue(false);
                this.isTaxable.disable();
                this.Tax.setValue("");
                this.Tax.disable();
                this.includeProTax.setValue(false);
                this.includeProTax.disable();
                var taxColumnIndex = this.Grid.getColumnModel().findColumnIndex("prtaxid");
                var taxAmtColumnIndex = this.Grid.getColumnModel().findColumnIndex("taxamount");
                this.Grid.getColumnModel().setHidden(taxColumnIndex, true);
                this.Grid.getColumnModel().setHidden(taxAmtColumnIndex, true);
            } else if(!this.readOnly) {
//                this.includingGST.setValue(false);
                this.includingGST.enable();
//                this.isTaxable.setValue(false);
                this.isTaxable.enable();
                this.Tax.setValue("");
                this.Tax.disable();
//                this.includeProTax.setValue(false);
                this.includeProTax.enable();
            }
        }
        
        if (Wtf.account.companyAccountPref.autoPopulateFieldsForDeliveryPlanner && this.moduleid == Wtf.Acc_Invoice_ModuleId) {
            var rec = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
            if (rec != null && rec != undefined) {
                // For set Delivery Date of Delivery Planner
                var billDate = new Date(this.billDate.getValue());
                var weekDay = rec.data.deliveryDate;
                var isNextDay = (weekDay == 7) ? true : false;
                var nextDate = WtfGlobal.getNextDateForWeekDay(billDate, weekDay, isNextDay);
                this.shipDate.setValue(nextDate);
            }
        }
   },
     
     /*
      *select handler of template combo
      **/
setTemplateValues:function(){
                        
    if(Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.isExciseApplicable){
        if(this.exciseFormPanel1.getForm().items != undefined && this.exciseFormPanel1.getForm().items != null){
            this.exciseFormPanel1.getForm().reset();                                    
        }
    }
                        
    if(this.templateModelCombo.getValue() != ""){
        this.loadingMask = new Wtf.LoadMask(document.body,{
            msg : WtfGlobal.getLocaleText("acc.msgbox.50")
        });
        this.loadingMask.show();
        var templateId = this.templateModelCombo.getValue();
        var recNo = this.moduleTemplateStore.find('templateId', templateId);
        var rec = this.moduleTemplateStore.getAt(recNo);
        var moduleId = rec.get('moduleRecordId');
        this.SelectedTemplateStore.load({
            params:{
                billid:moduleId,
                isForTemplate:true
            }
        });
    }else{
                          
        this.hideTypeOfUnitOnSelectOfExciseUnitTpl(this.templateModelCombo.getValue());//  ERP-27120 :-Indian Company if Template select otherthen none and delear type excise unit option then hide Types of Unit Combo else shown.
                          
        this.resetCustomFields();
        this.loadStore();
        this.Grid.getStore().removeAll();
        if (!this.saveandcreateBtn) {  // Whensave and create new then not add new row still vendor/customer not selected SDP-13956
            this.Grid.addBlankRow();
        }
        this.saveandcreateBtn=false;
        this.isEdit=false;
        this.copyInv=false;
    }
},                    
                    
    enableDisableFields: function(onFormCall) {
        if (Wtf.account.companyAccountPref.countryid === Wtf.CountryID.MALAYSIA) { // for malaysian company
            var date = this.billDate.getValue() === "" ? new Date() : new Date(this.billDate.getValue());
            var isTaxShouldBeEnable = WtfGlobal.isTaxShouldBeEnable(date.clearTime());
            if(this.importService && this.importService.getValue()){
                isTaxShouldBeEnable = false;
            }
            if (!isTaxShouldBeEnable) { // check if tax should be disable or not
                if (this.includingGST) {
                    this.includingGST.disable();
                }
                if (this.isTaxable) {
                    this.isTaxable.disable();
                }
                if (this.Tax) {
                    this.Tax.disable();
                }
                if (this.includeProTax) {
                    this.includeProTax.disable();
                }
                if (!onFormCall) {
                    this.Grid.getStore().removeAll();
                    this.Grid.addBlankRow();
                    var taxColumnIndex = this.Grid.getColumnModel().findColumnIndex("prtaxid");
                    var taxAmtColumnIndex = this.Grid.getColumnModel().findColumnIndex("taxamount");
                    this.Grid.getColumnModel().setHidden(taxColumnIndex, true);
                    this.Grid.getColumnModel().setHidden(taxAmtColumnIndex, true);
                }
            } else {
                if (!this.readOnly) {
                    if (this.includingGST) {
                        this.includingGST.enable();
                    }
                    if (this.isTaxable && this.isTaxable.getValue() == true) {
                        this.isTaxable.enable();
                    }
                }
                if (this.Tax && this.isTaxable.getValue()==false ) {
                    this.Tax.disable();
                }
                if (this.includeProTax) {
                    if (!this.readOnly) {
                        this.includeProTax.enable();
                    }
                    this.applyTaxToTermsChkHideShow(true);
                } else {
                    this.applyTaxToTermsChkHideShow(false);
                }
            }
        }
    },
   
   applyTaxToTermsChkHideShow : function(show){
       if(show) {
           //this.applyTaxToTermsChk.setValue(true);
            this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
       } else {
           this.applyTaxToTermsChk.setValue(false);
           if(!CompanyPreferenceChecks.mapTaxesAtProductLevel()){
               this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(false);
           }
       }
       
   }, 
doOnDateChanged:function(val,oldval){
    this.val=val;
    this.oldval=oldval;
    //           this.loadTax(val);
    this.externalcurrencyrate=0;
    this.custdatechange=true;
    this.datechange=1;
    if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
               this.currencyStore.on('load',function(store){this.onDateChangeVendorCurrencyExchangeRate();},this);
    }
           this.currencyStore.load({params:{mode:201,transactiondate:WtfGlobal.convertToGenericDate(this.billDate.getValue())}});

    //ON DATE CHANGE FILTER FETCH ADVANCE RECEIPT FOR THAT CUSTOMER
    if(this.moduleid == Wtf.Acc_Sales_Order_ModuleId && !this.isTemplate && this.advancePaymentCombo !=undefined && this.advancePaymentCombo !=null &&this.advancePaymentCombo !="undefined" &&this.advancePaymentCombo !="null"){  
        if(this.advancePaymentCombo.store!=undefined){
            this.advancePaymentCombo.clearValue();
            this.advancePaymentCombo.store.load();
        }
    }
    
    if(!(this.isCustBill||this.isExpenseInv)) {
        if (Wtf.isTDSApplicable && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId) {
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"), WtfGlobal.getLocaleText("acc.invoice.dataWillBeClearedOndateChange"), function (btn) {
                if (btn != "yes") {
                    return;
                } else {
                    var personRec = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
                    this.AdjustAdvancePayments.reset();
                    //Reload AdjustAdvancePaymentStore on date change.
                    this.AdjustAdvancePaymentStore.load({
                        params: {
                            vendorid: !Wtf.isEmpty(personRec.data.accid) ? personRec.data.accid : personRec.data.personid,
                            billdate: WtfGlobal.convertToGenericDate(this.billDate.getValue())
                        }
                    });
                //                        if (personRec != undefined) {
                //                            this.getTDSCalculationDetails(personRec, WtfGlobal.convertToGenericDate(this.val));
                //                        }
                }
            }, this);
        }
    //            this.Grid.loadPriceStoreOnly(val,this.Grid.priceStore, affecteduser);
    //            this.Grid.setGridProductValues(true, false);
    } else {
        this.changeCurrencyStore();
        this.updateSubtotal();
        this.applyCurrencySymbol();
        
        var subtotal=0.00;
        var tax=0.00;
        var taxAndSubtotal=this.Grid.calLineLevelTax();
        if(this.includeProTax.getValue() && Wtf.account.companyAccountPref.isLineLevelTermFlag==0){
            subtotal=WtfGlobal.addCurrencySymbolOnly(taxAndSubtotal[0]-taxAndSubtotal[1],this.symbol)
            tax = taxAndSubtotal[1];
            if(this.applyTaxToTermsChk.getValue()==true){
                tax += this.addTermAmountInTax();
            }
            tax=WtfGlobal.addCurrencySymbolOnly(tax,this.symbol);
        }else{
            subtotal=WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol)
            tax=WtfGlobal.addCurrencySymbolOnly(this.caltax()+this.addTermAmountInTax(),this.symbol);
        }
            
        //            var subtotal=WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol)
        var discount=WtfGlobal.addCurrencySymbolOnly(this.getDiscount(),this.symbol)
        var totalamount=WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount(),this.symbol)
        //            var tax=WtfGlobal.addCurrencySymbolOnly(this.caltax(),this.symbol);
        var aftertaxamt=WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount()+this.caltax()+this.addTermAmountInTax()+this.findTermsTotal() + this.calCulateNonTaxableTermAmount() - this.calculateTDSAmount(),this.symbol);
        var totalAmtInBase=WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol());
        if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:Wtf.UpriceAndAmountDisplayValue,
                discount:Wtf.UpriceAndAmountDisplayValue,
                totalamount:Wtf.UpriceAndAmountDisplayValue,
                tax:Wtf.UpriceAndAmountDisplayValue,
                nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
                tdsamount: Wtf.UpriceAndAmountDisplayValue,
                aftertaxamt:Wtf.UpriceAndAmountDisplayValue,
                totalAmtInBase:Wtf.UpriceAndAmountDisplayValue,
                amountdue:Wtf.UpriceAndAmountDisplayValue,
                changeToBeReturned:Wtf.UpriceAndAmountDisplayValue
            });
        } else if(this.roundingAdjustmentFlag){
            var summaryAmtArray = this.getSummaryDetailAmountArray();
            var subTotalAmt = summaryAmtArray[0];
            var taxValue = summaryAmtArray[1];
            var nonTaxableAmt = summaryAmtArray[2];
            var termTotalAmt = summaryAmtArray[3];
            var tdsAmt = summaryAmtArray[4];
            var discountAmt = summaryAmtArray[5];
            var totalAmount = summaryAmtArray[6];
            var changedToBeReturnedAmt = summaryAmtArray[7];
            var totalInBaseAmt = summaryAmtArray[8];
            var aftertaxamt = summaryAmtArray[9];
            var roundingAdjustmentAmount = summaryAmtArray[10];
            
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:WtfGlobal.addCurrencySymbolOnly(subTotalAmt,this.symbol),
                discount:WtfGlobal.addCurrencySymbolOnly(discountAmt,this.symbol),
                totalamount:WtfGlobal.addCurrencySymbolOnly(totalAmount,this.symbol),
                tax:WtfGlobal.addCurrencySymbolOnly(taxValue,this.symbol),
                nontaxableamount: WtfGlobal.addCurrencySymbolOnly(nonTaxableAmt,this.symbol),
                tdsamount: WtfGlobal.addCurrencySymbolOnly(tdsAmt,this.symbol),
                aftertaxamt:WtfGlobal.addCurrencySymbolOnly(aftertaxamt,this.symbol),
                roundingAdjustmentAmount:WtfGlobal.addCurrencySymbolOnly(roundingAdjustmentAmount,this.symbol),
                totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(totalInBaseAmt,this.symbol),
                amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
                changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(changedToBeReturnedAmt,this.symbol)
            });
            
        } else {
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:subtotal,
                discount:discount,
                totalamount:totalamount,
                tax:tax,
                nontaxableamount: WtfGlobal.addCurrencySymbolOnly(this.calCulateNonTaxableTermAmount(),this.symbol),
                tdsamount: WtfGlobal.addCurrencySymbolOnly(this.calculateTDSAmount(),this.symbol),
                aftertaxamt:aftertaxamt,
                roundingAdjustmentAmount:WtfGlobal.currencyRenderer(0),
                totalAmtInBase:totalAmtInBase,
                amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
                changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(this.calChangeToBeReturned(),this.symbol)
            });
        }            

        if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
            this.calculateProfitMarginAndUpdateTpl();
        //                this.calProfitMargin();
        //                this.productProfitMarginTplSummary.overwrite(this.productProfitMarginTpl.body,{
        //                    totalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalproductsellingprice,WtfGlobal.getCurrencySymbol()),
        //                    totalproductcost:WtfGlobal.addCurrencySymbolOnly(this.totalproductcost,WtfGlobal.getCurrencySymbol()),
        //                    totalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
        //                    totalprodcutprofitmarginpercent:this.totalproductsellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.totalprodcutprofitmarginpercent+'%</div>',
        //
        //                    totalservicesellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalservicesellingprice,WtfGlobal.getCurrencySymbol()),
        //                    totalservicecost:WtfGlobal.addCurrencySymbolOnly(this.totalservicecost,WtfGlobal.getCurrencySymbol()),
        //                    totalserviceprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalserviceprofitmargin,WtfGlobal.getCurrencySymbol()),
        //                    totalserviceprofitmarginpercent:this.totalservicesellingprice==0 ? '<div class="currency">NA</div>' : '<div class="currency">'+this.totalserviceprofitmarginpercent+'%</div>',
        //
        //                    finalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.finalproductsellingprice,WtfGlobal.getCurrencySymbol()),
        //                    finalproductcost:WtfGlobal.addCurrencySymbolOnly(this.finalproductcost,WtfGlobal.getCurrencySymbol()),
        //                    finalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.finalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
        //                    finalproductprofitmarginpercent:this.finalproductsellingprice==0 ? '<div class="currency">NA</div>' : '<div class="currency">'+this.finalproductprofitmarginpercent+'%</div>'              
        //                });
        }
    }
},
    loadTax:function(val){
        this.Grid.taxStore.load({params:{transactiondate:WtfGlobal.convertToGenericDate(val)}});
        this.Tax.setValue("");
        this.Grid.getStore().each(function(rec){
            // If tax applydate is greater than bill date then reset all line/product level taxes otherwise retain as previous
            if(rec.data.prtaxid!="" && rec.data.prtaxid!=null && rec.data.prtaxid!=undefined ){
                var taxRec = WtfGlobal.searchRecord(this.Grid.taxStore,rec.data.prtaxid,"prtaxid");
                if(taxRec!= null && taxRec.data.applydate > this.billDate.getValue()){
                    rec.set('prtaxid','')
                    rec.set('taxamount',0)
                }
            }
        },this);
    },
    successCallback:function(response){
        if(response.success){
            if(!this.isCustBill&&!this.isCustomer&&!this.isOrder&&!this.isEdit&&!this.copyInv&&this.isQuotation){
                this.ProductGrid.taxStore.loadData(response.taxdata);
                this.ExpenseGrid.taxStore.loadData(response.taxdata);
            }
            else
                this.Grid.taxStore.loadData(response.taxdata);
                this.termds.loadData(response.termdata);
                this.currencyStore.loadData(response.currencydata);
//            if(!(this.isCustBill||this.isExpenseInv)){
//                this.Grid.priceStore.loadData(response.productdata);}
            if(this.Currency.getValue() !="" && WtfGlobal.searchRecord(this.currencyStore,this.Currency.getValue(),"currencyid") == null){
                if(this.currencyStore.getCount()<=1){
                    callCurrencyExchangeWindow();
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.msg1")],2);
                }
            }
            else{
                this.isCurrencyLoad=true;
//                this.applyTemplate(this.currencyStore,0); // commented to fix issue ERP-9987
            }
            if(this.cash)
                this.Term.setValue(0);

            if(this.isEdit && this.record!=null) {
                if(this.record.data.taxid!=undefined && this.record.data.taxid!=null && this.record.data.taxid!="" ){
                    this.isTaxable.enable();
                    this.isTaxable.setValue(true);
                    this.Tax.setValue(this.record.data.taxid);
                }else {
                    this.isTaxable.setValue(false);
                    this.Tax.setValue("");
                }
            }
            this.setTaxesOnGenerateSIAndPI();
            if(this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId || this.moduleid == Wtf.Acc_Vendor_Quotation_ModuleId) {
                if(this.isEdit || this.copyInv){
                    if(this.record.data.termid=="" || this.record.data.termid==null || this.record.data.termid==undefined) this.getTerm();
                }
            }
            /*
             * Load record while generating Sales/Purchase Invoice from Sales/Purchase Order
             */
                if(this.isEdit || this.copyInv || this.invoicefromorder)this.loadRecord();            
            this.hideLoading();
        if(this.isExpenseInv){
            if(this.Grid.accountStore.getCount()<=1){
                this.Grid.accountStore.on("load",function(){
                    this.loadDetailsGrid();
                },this);
            }else{
                this.loadDetailsGrid();
            }
                        
        }else{
            if(this.productOptimizedFlag!= undefined ){
                this.loadDetailsGrid();
            }
            var loadDetailsGrid=false;
            if(this.isCustomer){
                if(Wtf.StoreMgr.containsKey("productstoresales")){
                    loadDetailsGrid=true;
                }
            }
            else{
                if(Wtf.StoreMgr.containsKey("productstore")){
                    loadDetailsGrid=true;
                }
            }
            if(loadDetailsGrid){
                this.loadDetailsGrid();
            }
        } 
        
    }
    },

    loadDetailsGrid:function(){   
           if(this.isEdit && !this.isOrder &&(this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId||this.moduleid==Wtf.Acc_Invoice_ModuleId )&& !this.quotation ){
          /*
           If populateproducttemplate flag is false blank row will be added 
            */
          if(this.populateproducttemplate || (this.isTemplate || this.isViewTemplate || this.isEditTemplate)){
                 this.loadEditableGrid(); 
                } else {
                    this.Grid.addBlankRow();
                }
               
            }else if(this.isEdit && (this.isOrder ||this.moduleid!=Wtf.Acc_Vendor_Invoice_ModuleId||this.moduleid!=Wtf.Acc_Invoice_ModuleId) && !this.quotation){
                if(this.populateproducttemplate || (this.isTemplate || this.isViewTemplate || this.isEditTemplate)){
                  this.loadEditableGridisOrder();
                } else {
                    this.Grid.addBlankRow();
                }
            }else if(this.quotation){
                this.loadEditableGridForQuotation();
            }
            if(this.isEdit && this.isOrder && !this.isCustomer && (BCHLCompanyId.indexOf(companyid) != -1)){
                this.loadOtherOrderdetails();
            }
            /*
             * Load product grid while generating Sales/Purchase Invoice from Sales/Purchase Order
             */
            if(this.invoicefromorder){
            this.loadEditableGridisOrder();
        }
    },
    failureCallback:function(response){
         this.hideLoading();
         WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Failtoloadtherecords")+" "+response.msg], 2);
    },
    hideLoading:function(){Wtf.MessageBox.hide();},
    applyTemplate:function(store,index){
        var editable=this.Currency.getValue()!=WtfGlobal.getCurrencyID()&&this.Currency.getValue()!=""//&&!this.isOrder;
        var exchangeRate = store.getAt(index).data['exchangerate'];
        if(this.externalcurrencyrate>0) {
            exchangeRate = this.externalcurrencyrate;
        }else if(this.isEdit && this.record.data.externalcurrencyrate && !(this.custdatechange || this.currencychanged)){
            var externalCurrencyRate = this.record.data.externalcurrencyrate-0;//??[PS]
            if(externalCurrencyRate>0){
                exchangeRate = externalCurrencyRate;
            }
        }
        this.externalcurrencyrate = exchangeRate;
        var revExchangeRate = 1/(exchangeRate-0);
        if(this.exchangeratetype!=undefined&&this.exchangeratetype=="foreigntobase"&&this.revexternalcurrencyrate!=undefined&&this.revexternalcurrencyrate!=0)
            {
                revExchangeRate=this.revexternalcurrencyrate
                this.revexternalcurrencyrate=0;
            }
        revExchangeRate = (Math.round(revExchangeRate*Wtf.Round_Off_Number))/Wtf.Round_Off_Number;
        /**
         * isGRNlinkedwithPI used to check  GRN is linking with Purchase invoice.
         */
        var isGRNlinkedwithPI = false;
        if (this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && this.fromLinkCombo.getValue() == 1 && this.PO.getValue() != "") {
            isGRNlinkedwithPI = true;
        }
        this.southCenterTplSummary.overwrite(this.southCenterTpl.body,{foreigncurrency:store.getAt(index).data['currencyname'],exchangerate:exchangeRate,basecurrency:WtfGlobal.getCurrencyName(),editable:editable,revexchangerate:revExchangeRate,isGRNlinkedwithPI:isGRNlinkedwithPI     
            });
    },

    changeCurrencyStore:function(pronamearr){
        this.pronamearr=pronamearr;
        var currency=this.Currency.getValue();
        if(this.val=="")this.val=this.billDate.getValue();
        //Commented following code because only one currency loaded on selection of customer 
//        if(currency!=""||this.custChange)
//            this.currencyStore.load({params:{mode:201,transactiondate:WtfGlobal.convertToGenericDate(this.val),tocurrencyid:this.Currency.getValue()}});
//        else
            this.currencyStore.load({params:{mode:201,transactiondate:WtfGlobal.convertToGenericDate(this.val)}});
    },
    changeTemplateSymbol:function(){ 

        // check wheather exchange rate is set for currency on selected date while retaining exchange rate.
        if (this.exchangeRateInRetainCase) {
            if (this.Currency.getValue() != "" && WtfGlobal.searchRecord(this.currencyStore, this.Currency.getValue(), "currencyid") == null) {
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Pleasesetthecurrencyrate") + " " + WtfGlobal.getLocaleText("acc.field.fortheselecteddate") + "<b>" + WtfGlobal.convertToGenericDate(this.val) + "</b>"], 0);
                this.exchangeRateInRetainCase = false;
                this.billDate.setValue("");
            }
            return;
        }
        if(this.loadCurrFlag && Wtf.account.companyAccountPref.currencyid){
               if(!this.invoicefromorder){                                             //to handle the case of currency other than base currency or vendor currency
            this.Currency.setValue(Wtf.account.companyAccountPref.currencyid);
        }
                /*For SATS*/
            if(SATSCOMPANY_ID==companyid){
                this.invoiceType.setValue("ff808081434d75f2014351835fc70003");
            }
            /**********/
            this.loadCurrFlag = false;
        }
        
     /*if date of without inventory changes. price store will not be loaded in this case.[PS]*/
        if(this.isCustBill||this.isExpenseInv){
             if(this.Currency.getValue() !="" && WtfGlobal.searchRecord(this.currencyStore,this.Currency.getValue(),"currencyid") == null){
//            if(this.currencyStore.getCount()==0){
                callCurrencyExchangeWindow();
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.invoice.msg3")+" <b>"+WtfGlobal.convertToGenericDate(this.val)+"</b>"], 0);
                this.billDate.setValue("");
            }
            else
                this.updateFormCurrency();
        }


     /*if date of withinventory changes. After price store load. [PS]   */
//     alert(this.datechange+"---"+this.pronamearr.length)
        if(this.datechange==1){
            var str=""
            if(this.pronamearr!=undefined&&this.pronamearr.length>0){
                str+=this.pronamearr[0];
                for(var i=1;i<this.pronamearr.length;i++){
                    str+="</b>, <b>"+ this.pronamearr[i]
                }
            }
            var recResult=WtfGlobal.searchRecord(this.currencyStore,this.Currency.getValue(),"currencyid");
             if(this.Currency.getValue() !="" && recResult == null){
//                if(this.currencyStore.getCount()==0){
                    // If set currency do not have exchange rate then reset currency
                    this.Currency.setValue("");      
                    callCurrencyExchangeWindow();
                    str= WtfGlobal.getLocaleText("acc.field.andpriceof")+" <b>"+str+"</b>";
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Pleasesetthecurrencyrate")+" "+str+WtfGlobal.getLocaleText("acc.field.fortheselecteddate")+"<b>"+WtfGlobal.convertToGenericDate(this.val)+"</b>"], 0);
                    this.billDate.setValue("");
                    //                if(this.oldval!=""||this.oldval!=undefined){
                    //                    if(!this.isCustBill)
                    //                        this.Grid.loadPriceStoreOnly(this.oldval,this.Grid.priceStore);
                    //                    this.Grid.taxStore.load({params:{transactiondate:this.oldval}});
                    //                }
            } else {
                    this.updateFormCurrency();
                    if(this.pronamearr!=undefined&&this.pronamearr.length>0){
                        str=WtfGlobal.getLocaleText("acc.field.priceof")+" <b>"+str+"</b>";
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Pleasesetthe")+" "+str+WtfGlobal.getLocaleText("acc.field.fortheselecteddate")+"<b>"+WtfGlobal.convertToGenericDate(this.val)+"</b>"], 0);
                    }
                    this.Grid.pronamearr=[];
                    this.updateFormCurrency();
            }
            this.datechange=0;
            this.updateSubtotal();
            this.applyCurrencySymbol();
            
            var subtotal=0.00;
            var subtotalValue=0.00;
            var tax=0.00;
            var taxAndSubtotal=this.Grid.calLineLevelTax();
            
            if(this.includeProTax.getValue() && Wtf.account.companyAccountPref.isLineLevelTermFlag==0){
                subtotalValue=taxAndSubtotal[0]-taxAndSubtotal[1];
                subtotal=WtfGlobal.addCurrencySymbolOnly(taxAndSubtotal[0]-taxAndSubtotal[1],this.symbol)
                /*
                * Add Invoice term's tax total tax amount.
                */
                tax = taxAndSubtotal[1];
                if(this.applyTaxToTermsChk.getValue()==true){
                    tax += this.addTermAmountInTax();
                }
                tax=WtfGlobal.addCurrencySymbolOnly(tax,this.symbol);
//                tax=WtfGlobal.addCurrencySymbolOnly(taxAndSubtotal[1],this.symbol);
            }else{
                subtotal=WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol)
                subtotalValue=this.Grid.calSubtotal();
                tax=WtfGlobal.addCurrencySymbolOnly(this.caltax()+this.addTermAmountInTax(),this.symbol);
            }
            
//            var subtotal=WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol)
            var discount=WtfGlobal.addCurrencySymbolOnly(this.getDiscount(),this.symbol)
            var totalamount=WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount(),this.symbol)
//            var tax=WtfGlobal.addCurrencySymbolOnly(this.caltax(),this.symbol);
            var calTermTotal = WtfGlobal.addCurrencySymbolOnly(this.findTermsTotal(),this.symbol);  
            var amountbeforetax=WtfGlobal.addCurrencySymbolOnly(subtotalValue+this.findTermsTotal(),this.symbol);
            var aftertaxamt=WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount()+this.caltax()+this.addTermAmountInTax()+this.findTermsTotal()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount(),this.symbol);
            var totalAmtInBase=WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol());
        if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:Wtf.UpriceAndAmountDisplayValue,
                discount:Wtf.UpriceAndAmountDisplayValue,
                totalamount:Wtf.UpriceAndAmountDisplayValue,
                tax:Wtf.UpriceAndAmountDisplayValue,
                nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
                tdsamount: Wtf.UpriceAndAmountDisplayValue,
                termtotal:calTermTotal,
                amountbeforetax:Wtf.UpriceAndAmountDisplayValue,
                aftertaxamt:Wtf.UpriceAndAmountDisplayValue,
                totalAmtInBase:Wtf.UpriceAndAmountDisplayValue,
                amountdue:Wtf.UpriceAndAmountDisplayValue,
                changeToBeReturned:Wtf.UpriceAndAmountDisplayValue
            }); 
        } else if(this.roundingAdjustmentFlag){
            var summaryAmtArray = this.getSummaryDetailAmountArray();
            var subTotalAmt = summaryAmtArray[0];
            var taxValue = summaryAmtArray[1];
            var nonTaxableAmt = summaryAmtArray[2];
            var termTotalAmt = summaryAmtArray[3];
            var tdsAmt = summaryAmtArray[4];
            var discountAmt = summaryAmtArray[5];
            var totalAmount = summaryAmtArray[6];
            var changedToBeReturnedAmt = summaryAmtArray[7];
            var totalInBaseAmt = summaryAmtArray[8];
            var aftertaxamt = summaryAmtArray[9];
            var roundingAdjustmentAmount = summaryAmtArray[10];
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:WtfGlobal.addCurrencySymbolOnly(subTotalAmt,this.symbol),
                discount:WtfGlobal.addCurrencySymbolOnly(discountAmt,this.symbol),
                totalamount:WtfGlobal.addCurrencySymbolOnly(totalAmount,this.symbol),
                tax:WtfGlobal.addCurrencySymbolOnly(taxValue,this.symbol),
                nontaxableamount: WtfGlobal.addCurrencySymbolOnly(nonTaxableAmt,this.symbol),
                tdsamount: WtfGlobal.addCurrencySymbolOnly(tdsAmt,this.symbol),
                termtotal:WtfGlobal.addCurrencySymbolOnly(termTotalAmt,this.symbol),
                amountbeforetax:WtfGlobal.addCurrencySymbolOnly((subTotalAmt+termTotalAmt),this.symbol),
                roundingAdjustmentAmount:WtfGlobal.addCurrencySymbolOnly(roundingAdjustmentAmount,this.symbol),
                aftertaxamt:WtfGlobal.addCurrencySymbolOnly(aftertaxamt,this.symbol),
                totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(totalInBaseAmt,WtfGlobal.getCurrencySymbol()),
                amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
                changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(changedToBeReturnedAmt,this.symbol)
            }); 
        } else{
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:subtotal,
                discount:discount,
                totalamount:totalamount,
                tax:tax,
                nontaxableamount: WtfGlobal.addCurrencySymbolOnly(this.calCulateNonTaxableTermAmount(),this.symbol),
                tdsamount: WtfGlobal.addCurrencySymbolOnly(this.calculateTDSAmount(),this.symbol),
                termtotal:calTermTotal,
                amountbeforetax:amountbeforetax,
                roundingAdjustmentAmount:WtfGlobal.currencyRenderer(0),
                aftertaxamt:aftertaxamt,
                totalAmtInBase:totalAmtInBase,
                amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
                changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(this.calChangeToBeReturned(),this.symbol)
            }); 
        }            
            
            if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
                this.calculateProfitMarginAndUpdateTpl();
//                this.calProfitMargin();
//                this.productProfitMarginTplSummary.overwrite(this.productProfitMarginTpl.body,{
//                    totalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalproductsellingprice,WtfGlobal.getCurrencySymbol()),
//                    totalproductcost:WtfGlobal.addCurrencySymbolOnly(this.totalproductcost,WtfGlobal.getCurrencySymbol()),
//                    totalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
//                    totalprodcutprofitmarginpercent:this.totalproductsellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.totalprodcutprofitmarginpercent+'%</div>',
//
//                    totalservicesellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalservicesellingprice,WtfGlobal.getCurrencySymbol()),
//                    totalservicecost:WtfGlobal.addCurrencySymbolOnly(this.totalservicecost,WtfGlobal.getCurrencySymbol()),
//                    totalserviceprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalserviceprofitmargin,WtfGlobal.getCurrencySymbol()),
//                    totalserviceprofitmarginpercent:this.totalservicesellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.totalserviceprofitmarginpercent+'%</div>',
//
//                    finalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.finalproductsellingprice,WtfGlobal.getCurrencySymbol()),
//                    finalproductcost:WtfGlobal.addCurrencySymbolOnly(this.finalproductcost,WtfGlobal.getCurrencySymbol()),
//                    finalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.finalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
//                    finalproductprofitmarginpercent:this.finalproductsellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.finalproductprofitmarginpercent+'%</div>'              
//                });
            }
            
        }
        
        if(this.currencychanged){
           if(this.Currency.getValue() !="" && WtfGlobal.searchRecord(this.currencyStore,this.Currency.getValue(),"currencyid") == null){
//            if(this.currencyStore.getCount()<1){
                    callCurrencyExchangeWindow();
                    
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.invoice.msg3")+" <b>"+WtfGlobal.convertToGenericDate(this.val)+"</b>"], 0);
                     this.Currency.setValue("");   
            } else {
                this.updateFormCurrency();
            }
            this.currencychanged = false;
        }
        
    /*when customer/vendor name changes [PS]*/
        if(this.custChange){
          if(this.Currency.getValue() !="" && WtfGlobal.searchRecord(this.currencyStore,this.Currency.getValue(),"currencyid") == null){
//            if(this.currencyStore.getCount()==0){
                callCurrencyExchangeWindow();
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.invoice.msg3")+" <b>"+WtfGlobal.convertToGenericDate(this.val)+"</b>"], 0);
                this.Name.setValue("");
        } else{
            this.Currency.setValue(this.currencyid);
            
            //ERP-39926
            if(this.moduleid == Wtf.Acc_Sales_Order_ModuleId && !this.isTemplate && this.advancePaymentCombo !=undefined && this.advancePaymentCombo !=null &&this.advancePaymentCombo !="undefined" &&this.advancePaymentCombo !="null"){  
                this.advancePaymentCombo.clearValue();
                // On selecting customer loaded advance payments for that customer.
                this.advancePaymentCombo.store.load();
            }
            /*For SATS*/
            if(SATSCOMPANY_ID==companyid){
                this.invoiceType.setValue("ff808081434d75f2014351835fc70003");
            }
            /**********/
            if(this.isEdit && this.number){
              this.Number.setValue(this.number);           
            }
            
            
                this.updateFormCurrency();}
            this.custChange=false;
        }
        this.Grid.pronamearr=[];
    },
    updateFormCurrency:function(){
       this.applyCurrencySymbol();
       var calTermTotal = WtfGlobal.addCurrencySymbolOnly(this.findTermsTotal(),this.symbol);
       
       var subtotal=0.00;
       var subtotalValue=0.00;
       var tax=0.00;
       var taxAndSubtotal=this.Grid.calLineLevelTax();
        if(this.includeProTax.getValue() && Wtf.account.companyAccountPref.isLineLevelTermFlag==0){
            subtotal=WtfGlobal.addCurrencySymbolOnly(taxAndSubtotal[0]-taxAndSubtotal[1],this.symbol)
            subtotalValue=taxAndSubtotal[0]-taxAndSubtotal[1];
            tax = taxAndSubtotal[1];
            if(this.applyTaxToTermsChk.getValue()==true){
                tax += this.addTermAmountInTax();
            }
            tax=WtfGlobal.addCurrencySymbolOnly(tax,this.symbol);
        }else{
            subtotal=WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol)
            subtotalValue=this.Grid.calSubtotal();
            tax=WtfGlobal.addCurrencySymbolOnly(this.caltax()+this.addTermAmountInTax(),this.symbol);
        }
        var amountbeforetax=WtfGlobal.addCurrencySymbolOnly(subtotalValue+this.findTermsTotal(),this.symbol);
        if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:Wtf.UpriceAndAmountDisplayValue,
                discount:Wtf.UpriceAndAmountDisplayValue,
                totalamount:Wtf.UpriceAndAmountDisplayValue,
                tax:Wtf.UpriceAndAmountDisplayValue,
                termtotal:Wtf.UpriceAndAmountDisplayValue,
                amountbeforetax:Wtf.UpriceAndAmountDisplayValue,
                roundingAdjustmentAmount:Wtf.UpriceAndAmountDisplayValue,
                aftertaxamt:Wtf.UpriceAndAmountDisplayValue,
                totalAmtInBase:Wtf.UpriceAndAmountDisplayValue,
                nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
                tdsamount: WtfGlobal.addCurrencySymbolOnly(this.calculateTDSAmount(),this.symbol),
                amountdue:Wtf.UpriceAndAmountDisplayValue,
                changeToBeReturned:Wtf.UpriceAndAmountDisplayValue
            });
        } else if(this.roundingAdjustmentFlag){
            var summaryAmtArray = this.getSummaryDetailAmountArray();
            var subTotalAmt = summaryAmtArray[0];
            var taxValue = summaryAmtArray[1];
            var nonTaxableAmt = summaryAmtArray[2];
            var termTotalAmt = summaryAmtArray[3];
            var tdsAmt = summaryAmtArray[4];
            var discountAmt = summaryAmtArray[5];
            var totalAmount = summaryAmtArray[6];
            var changedToBeReturnedAmt = summaryAmtArray[7];
            var totalInBaseAmt = summaryAmtArray[8];
            var aftertaxamt = summaryAmtArray[9];
            var roundingAdjustmentAmount = summaryAmtArray[10];

            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:WtfGlobal.addCurrencySymbolOnly(subTotalAmt,this.symbol),
                discount:WtfGlobal.addCurrencySymbolOnly(discountAmt,this.symbol),
                totalamount:WtfGlobal.addCurrencySymbolOnly(totalAmount,this.symbol),
                tax:WtfGlobal.addCurrencySymbolOnly(taxValue,this.symbol),
                termtotal:WtfGlobal.addCurrencySymbolOnly(termTotalAmt,this.symbol),
                amountbeforetax:WtfGlobal.addCurrencySymbolOnly((subTotalAmt+termTotalAmt),this.symbol),
                roundingAdjustmentAmount:WtfGlobal.addCurrencySymbolOnly(roundingAdjustmentAmount,this.symbol),
                aftertaxamt:WtfGlobal.addCurrencySymbolOnly(aftertaxamt,this.symbol),
                totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(totalInBaseAmt,WtfGlobal.getCurrencySymbol()),
                nontaxableamount: WtfGlobal.addCurrencySymbolOnly(nonTaxableAmt,this.symbol),
                tdsamount: WtfGlobal.addCurrencySymbolOnly(tdsAmt,this.symbol),
                amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
                //Update value of Cash To Be Returned in summary text
                changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(changedToBeReturnedAmt,this.symbol)
            });
        } else{
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:subtotal,
                discount:WtfGlobal.addCurrencySymbolOnly(this.getDiscount(),this.symbol),
                totalamount:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount(),this.symbol),
                tax:tax,
                termtotal:calTermTotal,
                amountbeforetax:amountbeforetax,
                aftertaxamt:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount()+this.caltax()+this.addTermAmountInTax()+this.findTermsTotal()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount(),this.symbol),
                totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol()),
                nontaxableamount: WtfGlobal.addCurrencySymbolOnly(this.calCulateNonTaxableTermAmount(),this.symbol),
                tdsamount: WtfGlobal.addCurrencySymbolOnly(this.calculateTDSAmount(),this.symbol),
                amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
                //Update value of Cash To Be Returned in summary text
                changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(this.calChangeToBeReturned(),this.symbol)
            });
        }       
        
        if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
//            this.calProfitMargin();
//            this.productProfitMarginTplSummary.overwrite(this.productProfitMarginTpl.body,{
//                totalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalproductsellingprice,WtfGlobal.getCurrencySymbol()),
//                totalproductcost:WtfGlobal.addCurrencySymbolOnly(this.totalproductcost,WtfGlobal.getCurrencySymbol()),
//                totalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
//                totalprodcutprofitmarginpercent:this.totalproductsellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.totalprodcutprofitmarginpercent+'%</div>',
//
//                totalservicesellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalservicesellingprice,WtfGlobal.getCurrencySymbol()),
//                totalservicecost:WtfGlobal.addCurrencySymbolOnly(this.totalservicecost,WtfGlobal.getCurrencySymbol()),
//                totalserviceprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalserviceprofitmargin,WtfGlobal.getCurrencySymbol()),
//                totalserviceprofitmarginpercent:this.totalservicesellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.totalserviceprofitmarginpercent+'%</div>',
//
//                finalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.finalproductsellingprice,WtfGlobal.getCurrencySymbol()),
//                finalproductcost:WtfGlobal.addCurrencySymbolOnly(this.finalproductcost,WtfGlobal.getCurrencySymbol()),
//                finalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.finalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
//                finalproductprofitmarginpercent:this.finalproductsellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.finalproductprofitmarginpercent+'%</div>'              
//            });
            this.calculateProfitMarginAndUpdateTpl();
        }
       
        if(Wtf.account.companyAccountPref.countryid == '137' && this.importService){// for malasyian company
            if (this.importService){
                this.importService.enable();
            }
        }
        /**
         * Update India Terms as Tax Summary after change currency from Currency combo
         */
        if (Wtf.account.companyAccountPref.isLineLevelTermFlag) {
            this.Grid.updateTermDetails();
        }
    },

    getCurrencySymbol:function(){
        var index=null;
//        this.currencyStore.clearFilter(true); //ERP-9962
        var FIND = this.Currency.getValue();
        if(FIND == "" || FIND == undefined || FIND == null) {

            FIND =this.invoicefromorder?this.invoicefromorderrec.currencyid:WtfGlobal.getCurrencyID();
        }
        index=this.currencyStore.findBy( function(rec){
             var parentname=rec.data['currencyid'];
            if(parentname==FIND)
                return true;
             else
                return false
            })
//        if(!this.currencyid) {          //refer ticket ERP-14001
            this.currencyid=this.Currency.getValue();
//        }
       return index;
    },

    applyCurrencySymbol:function(){
        var index=this.getCurrencySymbol();
        var rate=this.externalcurrencyrate;
        if(index>=0){
           rate=(rate==""?this.currencyStore.getAt(index).data.exchangerate:rate);
            this.symbol=  this.currencyStore.getAt(index).data.symbol;
            this.Grid.setCurrencyid(this.currencyid,rate,this.symbol,index);
            this.applyTemplate(this.currencyStore,index);
       }
       return this.symbol;
    },
    calculateProfitMarginAndUpdateTpl:function(){
        this.calProfitMargin();
        this.productProfitMarginTplSummary.overwrite(this.productProfitMarginTpl.body, {
            totalproductsellingprice: WtfGlobal.addCurrencySymbolOnly(this.totalproductsellingprice, WtfGlobal.getCurrencySymbol()),
            totalproductcost: WtfGlobal.addCurrencySymbolOnly(this.totalproductcost, WtfGlobal.getCurrencySymbol()),
            totalproductprofitmargin: WtfGlobal.addCurrencySymbolOnly(this.totalproductprofitmargin, WtfGlobal.getCurrencySymbol()),
            totalprodcutprofitmarginpercent: this.totalproductsellingprice == 0 ? '<div class="currency">NA</div>' : '<div class="currency">' + this.totalprodcutprofitmarginpercent + '%</div>',
            totalservicesellingprice: WtfGlobal.addCurrencySymbolOnly(this.totalservicesellingprice, WtfGlobal.getCurrencySymbol()),
            totalservicecost: WtfGlobal.addCurrencySymbolOnly(this.totalservicecost, WtfGlobal.getCurrencySymbol()),
            totalserviceprofitmargin: WtfGlobal.addCurrencySymbolOnly(this.totalserviceprofitmargin, WtfGlobal.getCurrencySymbol()),
            totalserviceprofitmarginpercent: this.totalservicesellingprice == 0 ? '<div class="currency">NA</div>' : '<div class="currency">' + this.totalserviceprofitmarginpercent + '%</div>',
            finalproductsellingprice: WtfGlobal.addCurrencySymbolOnly(this.finalproductsellingprice, WtfGlobal.getCurrencySymbol()),
            finalproductcost: WtfGlobal.addCurrencySymbolOnly(this.finalproductcost, WtfGlobal.getCurrencySymbol()),
            finalproductprofitmargin: WtfGlobal.addCurrencySymbolOnly(this.finalproductprofitmargin, WtfGlobal.getCurrencySymbol()),
            finalproductprofitmarginpercent: this.finalproductsellingprice == 0 ? '<div class="currency">NA</div>' : '<div class="currency">' + this.finalproductprofitmarginpercent + '%</div>'
        });
    },
 getPostTextEditor: function(posttext)
    {
    	var _tw=new Wtf.EditorWindowQuotation({
    		val:this.postText
    	});
    	
    	 _tw.on("okClicked", function(obj){
             this.postText = obj.getEditorVal().textVal;
             var styleExpression  =  new RegExp("<style.*?</style>");
             this.postText=this.postText.replace(styleExpression,"");
                 
             
         }, this);
         _tw.show();
        return this.postText;
    },
    loadEditableGrid:function(){
    this.StoreUrl = "";
        this.subGridStoreUrl = "";
         if (this.quotation) {
         if (this.businessPerson=='Customer') {
            this.storeMode = this.isCustBill?16:12;
            this.StoreUrl = this.isCustBill?"ACCInvoiceCMN/getBillingInvoices.do":"ACCInvoiceCMN/getQuotations.do";
            this.subGridStoreUrl = this.isCustBill?"ACCInvoiceCMN/getQuotationRows.do":"ACCInvoiceCMN/getQuotationRows.do";
        } else{
            this.storeMode = this.isCustBill?16:12;
            this.StoreUrl = this.isCustBill?"ACCGoodsReceiptCMN/getBillingGoodsReceipts.do":"ACCGoodsReceiptCMN/getQuotations.do";
            this.subGridStoreUrl = this.isCustBill?"ACCGoodsReceiptCMN/getQuotationRows.do":"ACCGoodsReceiptCMN/getQuotationRows.do";
        }               
        }
        else
        {
        if (this.businessPerson=='Customer') {
            this.storeMode = this.isCustBill?16:12;
            this.StoreUrl = this.isCustBill?"ACCInvoiceCMN/getBillingInvoices.do":"ACCInvoiceCMN/getInvoices.do";
            this.subGridStoreUrl = this.isCustBill?"ACCInvoiceCMN/getBillingInvoiceRows.do":"ACCInvoiceCMN/getInvoiceRows.do";
            //this.subGridStoreUrl = this.isCustBill?"ACCInvoiceCMN/getBillingInvoiceRows.do":"ACCInvoiceCMN/getQuotationRows.do";
        } else{
            this.storeMode = this.isCustBill?16:12;
            this.StoreUrl = this.isCustBill?"ACCGoodsReceiptCMN/getBillingGoodsReceipts.do":"ACCGoodsReceiptCMN/getGoodsReceipts.do";
            this.subGridStoreUrl = this.isCustBill?"ACCGoodsReceiptCMN/getBillingGoodsReceiptRows.do":"ACCGoodsReceiptCMN/getGoodsReceiptRows.do";
        }
        }
       if(this.Grid){
            this.Grid.billDate = this.billDate.getValue()
        }
        this.billid=this.record.data.billid;
        var mode=this.isCustBill?17:14;
        this.Grid.getStore().proxy.conn.url = this.subGridStoreUrl;
        this.Grid.getStore().load({params:{bills:this.billid,mode:mode,isexpenseinv:this.isExpenseInv,isCopyInvoice:this.copyInv,isForm:true,isView:this.readOnly,isEdit:this.isEdit,moduleid:this.moduleid}});
        this.EditisAutoCreateDO=false;
      if(this.isEdit && (this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId  ) || this.copyInv)
         {
           Wtf.Ajax.requestEx({
                url: "ACCInvoiceCMN/getDOFromInvoice.do",
                params: {
                    invoiceId: this.billid,
                    CallFromCI:this.isCustomer ? true : false//true:get DO from invoice and false : get GRO from Vendor Invoice
                }
            }, this, function(response) {
                if (response.data && response.data.length > 0) {
                  // WtfGlobal.hideFormElement(this.sequenceFormatComboboxDo);
                  if(this.copyInv && !this.isViewTemplate){
                        this.autoGenerateDO.setValue(true);
                        var sequenceformatid=response.data[0].sequenceformatDo;
                        if(sequenceformatid=="NA" || sequenceformatid==undefined){
                            this.sequenceFormatComboboxDo.setValue("NA"); 
                            this.sequenceFormatComboboxDo.disable();
                            this.getNextSequenceNumberDo(this.sequenceFormatComboboxDo);
                            this.no.setValue("");
                        } else{
                            var index=this.sequenceFormatStoreDo.find('id',sequenceformatid);
                            if(index!=-1){
                                this.sequenceFormatComboboxDo.setValue(sequenceformatid);                                               
                            }else{  //sequence format get deleted then NA is set
                                this.sequenceFormatComboboxDo.setValue("NA");  
                            } 
                              this.getNextSequenceNumberDo(this.sequenceFormatComboboxDo);//need to show next number in number because it is not hidden.
                        }
                  }else if(this.isEdit){
                        this.EditisAutoCreateDO=true;
                        this.sequenceFormatComboboxDo.setValue(response.data[0].sequenceformatDo)
                        var autono="";
                        /*
                         * Loop for displaying multiple GR/DO number in linking case.
                         */
                        for(var i=0;i<response.data.length;i++){
                            var index = autono.indexOf(response.data[i].SequenceNumDO);
                            if(index==-1){
                                autono+=response.data[i].SequenceNumDO+",";
                            }
                        }
                        autono=autono.substr(0,autono.length-1);
                        this.no.setValue(autono);
                        Wtf.QuickTips.register({
                            target: this.no.getEl(),
                            text: autono
                        });
                        this.DeliveryOrderid=response.data[0].DeliveryOrderID;
                        if(this.DeliveryOrderid != "" && this.DeliveryOrderid != null && this.DeliveryOrderid!= undefined){
                            this.autoGenerateDO.setValue(true);
                        }else{
                            this.autoGenerateDO.setValue(false);
                        }
                        this.sequenceFormatComboboxDo.disable();
                        this.autoGenerateDO.disable();
                        if (response.data[0].inventoryJESeqFormatID != undefined && response.data[0].inventoryJESeqFormatID != "" && response.data[0].inventoryJESeqFormatID != null) {
                            this.inventoryJESeqFormatID = response.data[0].inventoryJESeqFormatID;
                        }
                        if (response.data[0].inventoryJESeqNumber != undefined && response.data[0].inventoryJESeqNumber != "" && response.data[0].inventoryJESeqNumber != null) {
                            this.inventoryJESeqNumber = response.data[0].inventoryJESeqNumber;
                        }
                        if (response.data[0].inventoryJEIsAutoGenerated != undefined && response.data[0].inventoryJEIsAutoGenerated != "" && response.data[0].inventoryJEIsAutoGenerated != null) {
                            this.inventoryJEIsAutoGenerated = response.data[0].inventoryJEIsAutoGenerated;
                        }
                        if (response.data[0].inventoryJENumber != undefined && response.data[0].inventoryJENumber != "" && response.data[0].inventoryJENumber != null) {
                            this.inventoryJENumber = response.data[0].inventoryJENumber;
                        }
                        if (response.data[0].inventoryJEDatePrefixValue != undefined && response.data[0].inventoryJEDatePrefixValue != "" && response.data[0].inventoryJEDatePrefixValue != null) {
                            this.inventoryJEDatePrefixValue = response.data[0].inventoryJEDatePrefixValue;
                        }
                        if (response.data[0].inventoryJEDateSuffixValue != undefined && response.data[0].inventoryJEDateSuffixValue != "" && response.data[0].inventoryJEDateSuffixValue != null) {
                            this.inventoryJEDateSuffixValue = response.data[0].inventoryJEDateSuffixValue;
                        }
                        if (response.data[0].inventoryJEId != undefined && response.data[0].inventoryJEId != "" && response.data[0].inventoryJEId != null) {
                            this.inventoryJEId = response.data[0].inventoryJEId;
                        }
                        /**
                         * in case of template sequence format combobox should be hidden.
                         */
                        if(!(this.isTemplate || this.isEditTemplate)) {
                            WtfGlobal.showFormElement(this.sequenceFormatComboboxDo);
                            WtfGlobal.showFormElement(this.no);
                        }
                   }                    
                }else{
                    if(this.isEdit){      
                        if(!(this.templateId!=undefined && this.templateId!="" )){
                            this.autoGenerateDO.setValue(false);
                        }
                         if(this.isExpenseInv){
                            this.autoGenerateDO.disable();
                            WtfGlobal.hideFormElement(this.autoGenerateDO);
//                            WtfGlobal.hideFormElement(this.invoiceList);
                         }
                    }
                }
            }, function(response) {
                });
               
         }
    },

    loadEditableGridisOrder: function() {
        this.subGridStoreUrl = "";
        if (!this.isCustomer) {
            if (!this.isCustBill) {
                if (this.isPOfromSO || this.GENERATE_PO) {
                    this.subGridStoreUrl = "ACCSalesOrderCMN/getSalesOrderRows.do";
                    this.Grid.soLinkFlag = true;
                } else {
                    if (this.isfromgoodsreceipt && this.invoicefromorder) {
                        this.subGridStoreUrl = "ACCGoodsReceiptCMN/getGoodsReceiptOrderRows.do";
                    }else if(this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId){
                        this.subGridStoreUrl = "ACCPurchaseOrderCMN/getSecurityGateEntryRows.do";
                    } else {
                        if (this.isVersion) {
                            this.subGridStoreUrl = "ACCPurchaseOrderCMN/getPurchaseOrdersVersionRow.do"
                        } else {
                            this.subGridStoreUrl = "ACCPurchaseOrderCMN/getPurchaseOrderRows.do";
                        }
                        if (this.moduleid == Wtf.Job_Work_Out_ORDER_REC) {
                            this.isForJobWorkOut = true;
                        }
                    }

                }
            } else {

                this.subGridStoreUrl = "ACCPurchaseOrderCMN/getBillingPurchaseOrderRows.do";

            }
        } else {
            if (!this.isCustBill) {
                if (this.isSOfromPO || this.GENERATE_SO) {
                    this.subGridStoreUrl = "ACCPurchaseOrderCMN/getPurchaseOrderRows.do";
                    this.Grid.soLinkFlag = true;
                } else {
                    this.subGridStoreUrl = "ACCSalesOrderCMN/getSalesOrderRows.do";
                }
            } else {
                this.subGridStoreUrl = "ACCSalesOrderCMN/getBillingSalesOrderRows.do";
            }
        }
        this.productidstr = "";
        if (this.isFromWO) {
            this.subGridStoreUrl = "ACCWorkOrder/getWorkOrderComponentDetails.do";
            this.productidstr = this.record.data.productidstr
        }
        if (this.ifFromShortfall) {
            this.subGridStoreUrl = "ACCWorkOrder/getShortFallProductsDetails.do";
            this.productidstr = this.record.data.productidstr
        }
        if (this.invoicefromorder) {
            this.billid = this.invoicefromorderrec.billid;
            if (this.isfromdeliveryorder) {
                this.subGridStoreUrl = "ACCInvoiceCMN/getDeliveryOrderRows.do";
            }
        } else {
            this.billid = this.record.data.billid;
        }
        this.Grid.getStore().proxy.conn.url = this.subGridStoreUrl;
        
        var reqParams = {
            bills: this.billid,
            isForm: true,
            productidstr: this.productidstr,
            isVendorJobWorkOrder: this.isJobWorkOrderReciever,
            generateInvoiceFromTransactionForms : this.invoicefromorder?true:false,
            isPOfromSO :this.isPOfromSO?true:false,//When PO is created from SO then isPOfromSO flag sending as true 
            isSOfromPO :this.isSOfromPO?true:false,//When SO is created from PO then isPOfromSO flag sending as true 
            linkingFlag:this.invoicefromorder?true:false,
            isForJobWorkOut:this.isForJobWorkOut,
            iscopy:this.copyInv
        }
        
        if (this.invoicefromorderrec != undefined && this.invoicefromorderrec != null && this.invoicefromorderrec.isfromdeliveryorder != undefined && this.invoicefromorderrec.isfromdeliveryorder != "" && this.invoicefromorderrec.isfromdeliveryorder) {
            reqParams.closeflag = true;
        }

        this.Grid.getStore().load({
            params: reqParams
        });

    },
    
    /*Setting custom/ Dimension  fields value when generating Invoices from Transaction form of PO/SO/GR/DO */
    setCustomdimensionFields: function() {

        var billid = (this.GENERATE_PO || this.GENERATE_SO ) ? this.record.data.billid : this.invoicefromorderrec.billid;
        var fieldArr = this.POStore.fields.items;
        
        var record = this.POStore.getAt(this.POStore.find('billid', billid));
        if (record != undefined && record != "") {
            for (var fieldCnt = 0; fieldCnt < fieldArr.length; fieldCnt++) {
                var fieldN = fieldArr[fieldCnt];
                
                var component = Wtf.getCmp(fieldN.name + this.tagsFieldset.id);
                if (component && record.data[fieldN.name] != "") {
                    if (component.getXType() == 'datefield') {
                        component.setValue(record.data[fieldN.name]);
                    } else if (component.xtype == 'fncombo' || component.getXType() == 'fncombo') {
                        var ComboValue = record.data[fieldN.name];

                        if (ComboValue) {
                            //                                    ComboValueID=recCustomCombo.data.id;
                            component.setValue(ComboValue);
                            var parent = component.parentid;
                            var displayValue = record.json[fieldN.name + "_linkValue"];
                            if (parent != undefined && displayValue != undefined && parent.length > 0) {
                                if (displayValue) {
                                    component.setValForChildComboStore(ComboValue, displayValue); // create record and set value
                                }
                            }
                            var childid = component.childid;
                            if (childid.length > 0) {
                                var childidArray = childid.split(",");
                                for (var i = 0; i < childidArray.length; i++) {
                                    var currentBaseParams = Wtf.getCmp(childidArray[i] + this.tagsFieldset.id).store.baseParams;
                                    currentBaseParams.parentid = ComboValue;
                                    Wtf.getCmp(childidArray[i] + this.tagsFieldset.id).store.baseParams = currentBaseParams;
                                    Wtf.getCmp(childidArray[i] + this.tagsFieldset.id).store.load();
                                }
                            }
                        }
                    } else {
                        component.setValue(record.data[fieldN.name]);
                    }
                } else if (component && (this.invoicefromorderrec.isEdit || component.isessential == 1) && component.fieldtype == "4" ) {
                          component.setValue("1234");
               }
                if (fieldN.name.indexOf("Custom_") == 0) {
                    var fieldname = fieldN.name.substring(7, fieldN.name.length);
                    if (Wtf.getCmp(fieldname + this.tagsFieldset.id) && record.data[fieldN.name] != "") {
                        if (Wtf.getCmp(fieldname + this.tagsFieldset.id).getXType() == 'fieldset') {
                            var ComboValue = record.data[fieldN.name];
                            if (ComboValue !== undefined && ComboValue !== null && ComboValue != "") {
                                var ComboValueArrya = ComboValue.split(',');
                                var ComboValueID = "";
                                var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray;
                                for (var i = 0; i < ComboValueArrya.length; i++) {
                                    for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
                                        if (checkListCheckBoxesArray[checkitemcnt].id.indexOf(ComboValueArrya[i]) != -1)
                                            if (Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id) != undefined) {
                                                Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id).setValue(true);
                                            }
                                    }
                                }
                            }
                        } else if (Wtf.getCmp(fieldname + this.tagsFieldset.id).getXType() == 'select') {
                            var ComboValue = record.data[fieldN.name];
                           

                            if (ComboValue != "" && ComboValue != undefined)
                                Wtf.getCmp(fieldname + this.tagsFieldset.id).setValue(ComboValue);
                        }

                    }
                }
            }
        }

    },
    
    loadEditableGridForQuotation:function(){
        if (!this.isCustomer) {
            this.subGridStoreUrl = this.isVersion?"ACCPurchaseOrderCMN/getQuotationVersionRows.do":"ACCPurchaseOrderCMN/getQuotationRows.do";
        }else{
            this.subGridStoreUrl =this.isVersion ?"ACCSalesOrderCMN/getQuotationVersionRows.do": "ACCSalesOrderCMN/getQuotationRows.do";
        }
        if(!this.isCustomer && this.PR_IDS) {
            this.Grid.getStore().proxy.conn.url = "ACCPurchaseOrderCMN/getRequisitionRows.do";
            this.Grid.getStore().load({params:{bills:this.PR_IDS}});
            
            // reset to original config
            this.Grid.getStore().proxy.conn.url = this.subGridStoreUrl;  
            this.Grid.getStore().params = {bills:this.billid}
        } else {
            if(this.record != undefined)
            this.billid=this.record.data.billid;
            if(this.billid!=null){
            this.Grid.getStore().proxy.conn.url = this.subGridStoreUrl;  
            this.Grid.getStore().load({params:{bills:this.billid,copyInvoice:this.copyInv}});
            }
       }
    },
    
    loadOtherOrderdetails: function() {
        Wtf.Ajax.requestEx({
            url: "ACCPurchaseOrderCMN/getPurchaseOrderOtherDetails.do",
            params: {
                poid: this.record.data.billid
            }
        }, this, function(response) {
            if (response.data && response.data.length > 0) {
                this.youtReftxt.setValue(response.data[0].poyourref);
                this.delydatetxt.setValue(response.data[0].podelydate);
                this.delytermtxt.setValue(response.data[0].podelyterm);
                this.invoiceTotxt.setValue(response.data[0].poinvoiceto);
                this.depttxt.setValue(response.data[0].podept);
                this.projecttxt.setValue(response.data[0].poproject);
                this.requestortxt.setValue(response.data[0].porequestor);
                this.mernotxt.setValue(response.data[0].pomerno);
            }
        }, function(response) {
        });

    },
    addGrid:function(){

           this.ProductGrid=new Wtf.account.ProductDetailsGrid({
                height: 300,//region:'center',//Bug Fixed: 14871[SK]
                layout:'fit',
                title: WtfGlobal.getLocaleText("acc.invoice.inventory"),  //'Inventory',
                border:true,
                //cls:'gridFormat',
                helpedit:this.heplmodeid,
                moduleid: this.moduleid,
                id:this.id+"editproductdetailsgrid",
                viewConfig:{forceFit:false},
                isCustomer:this.isCustomer,
                currencyid:this.currencyid,
                disabledClass:"newtripcmbss",
                isFromGrORDO:this.isFromGrORDO,
                parentCmpID:this.id,
                fromOrder:true,
                isGST:this.isGST,
                readOnly:this.isViewTemplate ||this.readOnly,
                editTransaction:this.isEdit,
                isOrder:this.isOrder,
                isInvoice:this.isInvoice,
                isJobWorkOrderReciever:this.isJobWorkOrderReciever,
                isQuotation:this.quotation,
                isRequisition:this.isRequisition,
                forceFit:true,
                isCash:this.cash,
                loadMask : true,
                viewGoodReceipt: this.viewGoodReceipt,
                parentObj :this,
                prComboId : this.PO.id,
                linkTo: this.fromLinkCombo.id,
                link:   this.fromPO.id,
                copyInv:this.copyInv,
                isLinkedTransaction:this.isLinkedTransaction,
                disabled:!(this.isEdit ||this.copyInv)?true:false,
                record:this.record,
                isQuotationFromPR : this.isQuotationFromPR,
                fromPO:this.isOrder,
                isEdit:this.isEdit,
                isExciseTab:this.isExciseTab,
                isTemplate:this.isTemplate,
                productPOSOCountStore:this.productPOSOCountStore
            }); 
    //        this.ProductGrid.productComboStore.load();
        this.ProductGrid.on("productselect", this.loadTransStore, this);
//        this.ProductGrid.sModel.on("rowselect", this.setProductDetailsTplSummary, this);
        this.ProductGrid.sModel.on("rowselect", this.setProductDetailsTplSummaryOptimised, this);//VI
        this.ProductGrid.sModel.on("rowdeselect", this.resetProductDetailsTplSummary, this);
        this.ProductGrid.on("productdeleted", this.removeTransStore, this);

        if(this.isCustBill){  //Without Inventory.[PS]
        }else{    //With Inventory[PS]
            if(this.isEdit && (!this.isOrder || this.moduleid==Wtf.Acc_Purchase_Order_ModuleId)){
                if(this.isExpenseInv){
                    this.ExpenseGrid=new Wtf.account.ExpenseInvoiceGrid({
                        height: 200,
                        //layout : 'fit',
                        border:true,
                        cls:'gridFormat',
//                        title: WtfGlobal.getLocaleText("acc.invoice.gridExpenseTab"),//'Expense',
                        viewConfig:{forceFit:false},
                        isCustomer:this.isCustomer,
                        parentCmpID:this.id,
                        editTransaction:this.isEdit,
                        moduleid: this.moduleid,
                        isCustBill:this.isCustBill,
                        disabledClass:"newtripcmbss",
                        readOnly:this.isViewTemplate ||this.readOnly,
                        id:this.id+"expensegrid",
                        currencyid:this.Currency.getValue(),
                        fromOrder:true,
                        isOrder:this.isOrder,
                        isInvoice:this.isInvoice,
                        forceFit:true,
                        loadMask : true,
                        parentObj :this,
                        isLinkedTransaction : this.isLinkedTransaction,
                        isTemplate:this.isTemplate,
                        heplmodeid:this.heplmodeid
                    });
                    this.ExpenseGrid.on('datachanged',this.updateSubtotal,this);
                    this.Grid = this.ExpenseGrid; 
                    
                }else{
                            this.Grid=new Wtf.account.ProductDetailsGrid({
                                //region:'center',//Bug Fixed: 14871[SK]
                                height: 300,//region:'center',//Bug Fixed: 14871[SK]
                                cls:'gridFormat',
                                layout:'fit',
                                moduleid: this.moduleid,
                                id:this.id+"productdetailsgrid",
                                isCash:this.cash,
                                viewConfig:{
                                    forceFit:false
                                },
                                autoScroll:true,
                                isGST:this.isGST,
                                editTransaction:true,
                                disabledClass:"newtripcmbss",
                                //disabled:this.isViewTemplate,
                                isFromGrORDO:this.isFromGrORDO,
                                record:this.record,
                                copyInv:this.copyInv,
                                parentCmpID:this.id,
                                fromPO:false,
                                isjobWorkWitoutGrn:this.isCreateInvFromJob||(this.isEdit&&this.record.data.isjobWorkWitoutGrn!=undefined&&this.record.data.isjobWorkWitoutGrn),
                                readOnly: this.readOnly || this.isViewTemplate,
                                readOnly: this.readOnly,
                                isJobWorkOrderReciever:this.isJobWorkOrderReciever,
                                isViewTemplate: this.isViewTemplate,
                                isEdit:this.isEdit,
                                heplmodeid:this.heplmodeid,//ERP-11098 [SJ]
                                isCN:false,
                                isCustomer:this.isCustomer,
                                isOrder:this.isOrder,
                                isInvoice:this.isInvoice,
                                isQuotation:this.quotation,
                                loadMask : true,
                                parentObj :this,
                                prComboId : this.PO.id,
                                linkTo: this.fromLinkCombo.id,
                                link:   this.fromPO.id,
                                viewGoodReceipt: this.viewGoodReceipt,
                                isLinkedTransaction : this.isLinkedTransaction,
                                isExciseTab:this.isExciseTab,
                                isTemplate:this.isTemplate,
                                productPOSOCountStore:this.productPOSOCountStore,
                                isCallFromSalesOrderTransactionForms:this.isCallFromSalesOrderTransactionForms
                            })
                            
                    this.Grid.on("productselect", this.loadTransStore, this);
//                    this.Grid.sModel.on("rowselect", this.setProductDetailsTplSummary, this);
                    this.Grid.sModel.on("rowselect", this.setProductDetailsTplSummaryOptimised, this);//PO,SI
                    this.Grid.sModel.on("rowdeselect", this.resetProductDetailsTplSummary, this);
                    this.Grid.on("productdeleted", this.removeTransStore, this);
                }
            }
            else{
                if(this.isCustomer|| (this.isOrder && this.moduleid!=Wtf.Acc_Purchase_Order_ModuleId)){

                            this.Grid=new Wtf.account.ProductDetailsGrid({
                                //region:'center',//Bug Fixed: 14871[SK]
                                height: 300,//region:'center',//Bug Fixed: 14871[SK]
                                cls:'gridFormat',
                                layout:'fit',
                                parentCmpID:this.id,
                                moduleid: this.moduleid,
                                id:this.id+"editproductdetailsgrid",
                                isCash:this.cash,
                                viewConfig:{
                                    forceFit:false
                                },
                                record:this.record,
                                isQuotation:this.quotation,
                                isQuotationFromPR : this.isQuotationFromPR,
                                isCustomer:this.isCustomer,
                                currencyid:this.currencyid,
                                disabledClass:"newtripcmbss",
                                fromPO:this.isOrder,
                                isGST:this.isGST,
                                isjobWorkWitoutGrn:this.isCreateInvFromJob||(this.isEdit&&this.record.data.isjobWorkWitoutGrn!=undefined&&this.record.data.isjobWorkWitoutGrn),
                                fromOrder:true,
                                isJobWorkOrderReciever:this.isJobWorkOrderReciever,
                                isEdit:this.isEdit,
                                isFromGrORDO:this.isFromGrORDO,
                                isOrder:this.isOrder,
                                isInvoice:this.isInvoice,
                                heplmodeid:this.heplmodeid,//ERP-11098 [SJ]
                                forceFit:true,
                                editTransaction: this.isEdit,
                                loadMask : true,
                                readOnly:this.readOnly||this.isViewTemplate,
                                viewGoodReceipt: this.viewGoodReceipt,
                                parentObj :this,
                                prComboId : this.PO.id,
                                linkTo: this.fromLinkCombo.id,
                                link:   this.fromPO.id,
                                copyInv:this.copyInv,
                                disabled:!(this.isEdit ||this.copyInv)?true:false,
                                isLinkedTransaction : this.isLinkedTransaction,
                                isExciseTab:this.isExciseTab,
                                isTemplate:this.isTemplate,
                                productPOSOCountStore:this.productPOSOCountStore

                            });

                    this.Grid.on("productselect", this.loadTransStore, this);
//                    this.Grid.sModel.on("rowselect", this.setProductDetailsTplSummary, this);
                    this.Grid.sModel.on("rowselect", this.setProductDetailsTplSummaryOptimised, this);//SO,CQ,VQ
                    this.Grid.sModel.on("rowdeselect", this.resetProductDetailsTplSummary, this);
                    this.Grid.on("productdeleted", this.removeTransStore, this);
                  }else{
 
                this.ExpenseGrid=new Wtf.account.ExpenseInvoiceGrid({
                    height: 300,
                    //layout : 'fit',
                    border:true,
                    title: WtfGlobal.getLocaleText("acc.invoice.gridExpenseTab"),//'Expense',
                        viewConfig:{forceFit:false},
                    isCustomer:this.isCustomer,
                    editTransaction:this.isEdit,
                    moduleid: this.moduleid,
                    isCustBill:this.isCustBill,
                    disabledClass:"newtripcmbss",
                    id:this.id+"expensegrid",
                    currencyid:this.Currency.getValue(),
                    fromOrder:true,
                    closable: false,
                    readOnly:this.isViewTemplate ||this.readOnly,
                    isOrder:this.isOrder,
                    isInvoice:this.isInvoice,
                    forceFit:true,
                    loadMask : true,
                    parentObj :this,
                    disabled:!(this.isEdit ||this.copyInv)?true:false,
                    isLinkedTransaction : this.isLinkedTransaction,
                    isTemplate:this.isTemplate,
                    heplmodeid:this.heplmodeid
                       
                });
                // this.ExpenseGrid.sModel.on("rowselect", this.setExpenseDetails, this);
                // this.ExpenseGrid.sModel.on("rowdeselect", this.resetExpenseDetails, this);
               // this.Grid = this.ExpenseGrid; 
                this.GridPanel= new Wtf.TabPanel({
                    id : this.id+'invoicegrid',
                    iconCls:'accountingbase coa',
                    disabled:this.isViewTemplate,
                    border:false,
                    style:'padding:10px;',
                    disabledClass:"newtripcmbss",
                    cls:'invgrid',
                    //cls:'gridFormat',
                    activeTab:0,
                    height: 300,
                    //region : 'center',
                    //layout : 'fit',
                        
                    items: [this.ProductGrid,this.ExpenseGrid]
                });
                
                /*
                 *code to set active tab when PI is generated from PO
                 */
                if(this.invoicefromorderrec == undefined  || (this.invoicefromorderrec == "" || this.invoicefromorderrec.isexpenseinv == false || this.invoicefromorderrec.isexpenseinv == undefined)){
                    this.Grid = Wtf.getCmp(this.id+"editproductdetailsgrid");  
                    this.GridPanel.setActiveTab(this.ProductGrid);
                    this.isExpenseInv=false;
                }
                else{
                    this.Grid = Wtf.getCmp(this.id+"expensegrid");
                    this.GridPanel.setActiveTab(this.ExpenseGrid);
                    this.isExpenseInv=true;
                }
                this.ExpenseGrid.on('datachanged',this.updateSubtotal,this);
                this.ProductGrid.on('datachanged',this.updateSubtotal,this);
                if(this.symbol==undefined)this.symbol=WtfGlobal.getCurrencySymbol();
                this.GridPanel.on('beforetabchange', this.beforeTabChange,this);
            }
            }
        }
        if((this.isEdit || this.isCopy || this.readOnly) && this.isExpenseInv){
            if(this.ExpenseGrid != null){
                this.ExpenseGrid.accountStore.load();
            }
        }
        /*For SATS*/
        if(SATSCOMPANY_ID==companyid){
            if(this.isEdit && this.record.data.invoicetype!=""){
                if(this.record.data.invoicetype=='ff808081434d75f20143518438fe0006'){
                    this.Grid.calculatePercentage=true;
                }
            } else{
                this.Grid.calculatePercentage=false;
            }
        }
        /**********/
        this.NorthForm.on('render',this.setDate,this);
        if(this.isViewTemplate){this.setdisabledbutton();}
        this.Grid.on('datachanged',this.updateSubtotal,this);
        this.Grid.on('gridconfigloaded',function(){// this event fire after applying saved grid config in database.
            if(this.moduleid== Wtf.Acc_Invoice_ModuleId || this.moduleid== Wtf.Acc_Cash_Sales_ModuleId){
                this.hideShowProductWeightColumns();
            }
            if(this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId){
                this.hideShowProfitMarginColumns();
            }
            this.showGridTax(null,null,!this.includeProTax.getValue());
        },this);
        this.Grid.getStore().on('load',function(store, recArr){
            if(!this.isOrder && !this.quotation && this.isCustomer && this.copyInv && !this.isViewTemplate){
            this.confirmMsg = "";
            if(!Wtf.account.companyAccountPref.withinvupdate){
                for(var i=0; i<recArr.length; i++){
                    if(recArr[i].data.productid !== undefined){
                        var index=this.ProductGrid.productComboStore.find('productid',recArr[i].data.productid);
                        var prorec=this.ProductGrid.productComboStore.getAt(index);
                        if(recArr[i].data['quantity'] > this.ProductGrid.productComboStore.getAt(index).data['quantity'] && prorec.data.type!='Service' && prorec.data.type!='Non-Inventory Part'){
                            this.confirmMsg += WtfGlobal.getLocaleText("acc.field.MaximumavailableQuantityforProduct")+this.ProductGrid.productComboStore.getAt(index).data['productname']+WtfGlobal.getLocaleText("acc.field.is")+this.ProductGrid.productComboStore.getAt(index).data['quantity']+".<br>";
                            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.je.confirm"),this.confirmMsg+WtfGlobal.getLocaleText("acc.ven.msg4"),function(btn){
                                if(btn=="yes") {
                                
                                }else{
                                    this.ownerCt.remove(this);
                                }
                            }, this);
                            recArr[i].set('quantity', 0);
                            recArr[i].set('amount', 0);
                        }
                    }
                }
            }
        }
            /*  Setting Value of remaining Part Amount 
             * if any SO is partially linked with SI
             * 1. At the time of Linking remaining SO in Invoice
             * 2.At the time of Editing Invoice(Invoice linked with wSO Partially)
             * 3.At the time of Viewing Invoice(Invoice linked with SO Partially)
             */
              var partialAmount=0;
            if (this.moduleid == Wtf.Acc_Invoice_ModuleId) {
                
            if (recArr[0].json !=undefined && ((recArr[0].json.isPartialInv!=undefined && recArr[0].json.isPartialInv) || (this.isEdit && recArr[0].json.partamount!=undefined && recArr[0].json.partamount != 0))) {
                
               /* recArr[0].json.remainingPartAmt comes from Sales Order Detail when Invoice is linked with SO */
                if (recArr[0].json.remainingPartAmt == undefined && this.isCopyInvoice) {
                    this.partialInvoiceCmb.setValue(false);


                    /*Showing Partial Amount Column at line level 
                     * 
                     * if Partial invoice comes into picture */

                    var partAmountColumnIndex = this.Grid.getColumnModel().findColumnIndex("partamount")
                    this.Grid.getColumnModel().setHidden(partAmountColumnIndex, true);
                } else {
                    this.partialInvoiceCmb.setValue(true);
                    this.applyGlobalDiscount.disable();
                    this.globalDiscountType.disable();
                    this.globalDiscount.disable();


                    /*Showing Partial Amount Column at line level 
                     * 
                     * if Partial invoice comes into picture */

                    var partAmountColumnIndex = this.Grid.getColumnModel().findColumnIndex("partamount")
                    this.Grid.getColumnModel().setHidden(partAmountColumnIndex, false);
                }
           
                var isPartAmtIsSameForAllLineItem = 0;
                for (var i = 0; i < recArr.length; i++) {
                    partialAmount = (this.isEdit && !this.isCopyInvoice && recArr[i].json.partamount) ? recArr[i].json.partamount : (recArr[i].json.remainingPartAmt ?recArr[i].json.remainingPartAmt:0);
                    recArr[i].set('partamount', partialAmount);
 
                  /* Checking whether all line level 
                   * 
                   * have applied same 
                   * 
                   * partial amount or not*/
                  
                    if ((i > 0) && partialAmount != 0 && (partialAmount == recArr[i - 1].get('partamount'))) {
                        isPartAmtIsSameForAllLineItem++;
                    }
                }
                /* If all line level have applied same partial amount 
                 * then partial amount value is being set to 
                 * global Partial Amount(%) field
                 */
                
                if ((isPartAmtIsSameForAllLineItem == (recArr.length - 1)) && partialAmount) {
                    this.partialInvAmount.setValue(partialAmount);
                    this.partialInvoiceCmb.disable();
                }
                
                    /*----If GST applicable company then taxes are calculated as per GST rule in case of Partial Invoice-------*/
                    if (WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.NEW) {

                        this.Grid.store.each(function(rec) {

                            if (rec.data['LineTermdetails'] != undefined && rec.data['LineTermdetails'] != "") {
                                var termStore = this.Grid.getTaxJsonOfIndia(rec);

                                this.Grid.getColumnModel().setRenderer(this.Grid.getColumnModel().findColumnIndex("amount"), this.Grid.calAmountWithoutExchangeRate.createDelegate(this));
                                termStore = this.Grid.calculateTermLevelTaxes(termStore, rec);

                                rec.set('LineTermdetails', Wtf.encode(termStore));
                            }
                        }, this);
                    }

                if (!this.isEdit) {
                    this.partialInvAmount.enable();
                   
                } else {
                    /* In Edit Case Partial amount field (Globally & locally set disabled)*/
                    this.partialInvAmount.disable();
       	
                }
                
                    /* Disabling following fields when partial Invoice is edited */
                    var unitPrice = this.Grid.getColumnModel().findColumnIndex("rate")
                    this.Grid.getColumnModel().setEditable(unitPrice, false)
                    var discountType = this.Grid.getColumnModel().findColumnIndex("discountispercent")
                    this.Grid.getColumnModel().setEditable(discountType, false)
                    var discount = this.Grid.getColumnModel().findColumnIndex("prdiscount")
                    this.Grid.getColumnModel().setEditable(discount, false)
                    var productTax = this.Grid.getColumnModel().findColumnIndex("prtaxid")
                    this.Grid.getColumnModel().setEditable(productTax, false)
                    var quantity = this.Grid.getColumnModel().findColumnIndex("quantity")
                    this.Grid.getColumnModel().setEditable(quantity, false)
                    var taxamount = this.Grid.getColumnModel().findColumnIndex("taxamount")
                    this.Grid.getColumnModel().setEditable(taxamount, false)

            } else {
                    this.partialInvoiceCmb.setValue(false);
                    var partAmountColumnIndex = this.Grid.getColumnModel().findColumnIndex("partamount")
                    if (partAmountColumnIndex != -1 && !this.isCash) {
                        this.Grid.getColumnModel().setHidden(partAmountColumnIndex, true);
                    }
                

            }
        }
        
            if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && this.copyInv && Wtf.isExciseApplicable){ // India Only - Dealer Excise 
                    var recordsForDealerExcise=store.data.items;
                    if(recordsForDealerExcise.length>0){
                    Wtf.Ajax.requestEx({
                        url : "ACCCompanyPref/getSequenceFormatStore.do",
                        params:{
                            mode:Wtf.companyAccountPref_autoRG23EntryNumber,
                            isEdit:false
                        }
                    }, this,function(resp){
                        var sequenceformat="";
                        var sequenceformatPattern="";
                        for(var i=0;i<resp.count;i++){
                            if(resp.data[i].isdefaultformat=="Yes"){
                                sequenceformat=resp.data[i].id;
                                sequenceformatPattern=resp.data[i].value;
                                break;
                            }
                        }

                        Wtf.Ajax.requestEx({
                            url:"ACCCompanyPref/getNextAutoNumber.do",
                            params:{
                                from:Wtf.autoNum.Dealer_Excise_RG23DEntry_No,
                                sequenceformat:sequenceformat,
                                oldflag:false
                            }
                        }, this,function(resp1){
                            if(resp1.success){
                                for(var h=0;h<recordsForDealerExcise.length-1;h++){
                                var json=[];
                                json.push({
                                    "RG23DEntryNumber":resp1.data,
                                    "sequenceformat":sequenceformat,
                                    "AssessableValue":store.data.items[h].data.amount,
                                    "ManuAssessableValue":store.data.items[h].data.amount,
                                    "RG23DseqFormat":sequenceformatPattern,
                                    "dealerExciseTerms":store.data.items[h].data.dealerExciseTerms
                                });
                                    store.data.items[h].data.dealerExciseDetails = JSON.stringify(json);
                                }
                            }
                        }); 
                    });
                }
            }
            
            /*---------Populating mapped taxes at product level in cross linking----------  */
            if (CompanyPreferenceChecks.mapTaxesAtProductLevel() && this.crossLinkingFlag != undefined && this.crossLinkingFlag && this.includeProTax.getValue()) {
                for (var i = 0; i < recArr.length; i++) {
                    if (this.isCustomer) {
                        if (recArr[i].data.salestaxId != undefined && recArr[i].data.salestaxId != "") {
                            recArr[i].set('prtaxid', recArr[i].data.salestaxId);
                        }
                    } else {
                        if (recArr[i].data.purchasetaxId != undefined && recArr[i].data.purchasetaxId != "") {
                            recArr[i].set('prtaxid', recArr[i].data.purchasetaxId);
                        }
                    }
                }
            }
            
            this.Grid.addBlank(store);//ERP-9944 [SJ]
            var recCount=this.Grid.getStore().getCount();
            /* Adding Partial Amount to blank row,same as all line item*/
            if (this.moduleid == Wtf.Acc_Invoice_ModuleId && partialAmount != 0 && recCount != 0) {
                this.Grid.getStore().getAt(recCount-1).data.partamount = partialAmount;
            }
            if(Wtf.account.companyAccountPref.isLineLevelTermFlag && !this.isExpenseInv){
                    this.Grid.updateTermDetails();
            }
            this.updateSubtotal();//ERP-9944[SJ]
        }.createDelegate(this),this);
    },
    /*For SATS*/
    loadSATSProductGrid : function(invoicetype){
        if(Wtf.account.companyAccountPref.dependentField){ 
            if(invoicetype=='ff808081434d75f20143518438fe0006'){
                var productGridCM = this.Grid.colModel.config;
                this.Grid.calculatePercentage=true;
                for(var cmcnt=0;cmcnt<productGridCM.length;cmcnt++){
                    if(productGridCM[cmcnt].dataIndex=='productid'){
                        productGridCM[cmcnt].header="Product";
                    }else if(productGridCM[cmcnt].dataIndex=='desc'){
                        productGridCM[cmcnt].header="Description";
                    }else if(productGridCM[cmcnt].dataIndex=='showquantity'){
                        productGridCM[cmcnt].header="%";
                    }else if(productGridCM[cmcnt].dataIndex=='rate'){
                        productGridCM[cmcnt].header="Gross sales";
                    }else if(productGridCM[cmcnt].dataIndex=='dependentType'){
                        productGridCM[cmcnt].hidden=true;
                    }
                }
         
            }else if(invoicetype=='ff808081434d75f201435183b3270007'){
                var productGridCM = this.Grid.colModel.config;
                this.Grid.calculatePercentage=true;
                for(var cmcnt=0;cmcnt<productGridCM.length;cmcnt++){
                    if(productGridCM[cmcnt].dataIndex=='productid'){
                        productGridCM[cmcnt].header="Product";
                    }else if(productGridCM[cmcnt].dataIndex=='desc'){
                        productGridCM[cmcnt].header="Description";
                    }else if(productGridCM[cmcnt].dataIndex=='showquantity'){
                        productGridCM[cmcnt].header="Volume of Water";
                    }else if(productGridCM[cmcnt].dataIndex=='rate'){
                        productGridCM[cmcnt].header="Price per kilo litre";
                    }else if(productGridCM[cmcnt].dataIndex=='dependentType'){
                        productGridCM[cmcnt].hidden=true;
                    }
                }
         
            }
             else  if(invoicetype=='ff808081434d75f20143518400630005' || invoicetype=='ff808081434d75f20143518400630008'){
                var productGridCM = this.Grid.colModel.config;
                for(var cmcnt=0;cmcnt<productGridCM.length;cmcnt++){
                    if(productGridCM[cmcnt].dataIndex=='productid'){
                        productGridCM[cmcnt].header="Product";
                    }else if(productGridCM[cmcnt].dataIndex=='desc'){
                        productGridCM[cmcnt].header="Description";
                    }else if(productGridCM[cmcnt].dataIndex=='showquantity'){
                        productGridCM[cmcnt].header="No. of month";
                    }else if(productGridCM[cmcnt].dataIndex=='rate'){
                        productGridCM[cmcnt].header="License Fee";
                    }else if(productGridCM[cmcnt].dataIndex=='dependentType'){
                        productGridCM[cmcnt].hidden=true;
                    }
                }
            }else  if(invoicetype=='ff808081434d75f20143518400630009'){
                var productGridCM = this.Grid.colModel.config;
                this.Grid.calculatePercentage=false;
                var productGridCM = this.Grid.colModel.config;
                for(var cmcnt=0;cmcnt<productGridCM.length;cmcnt++){
                    if(productGridCM[cmcnt].dataIndex=='productid'){
                        productGridCM[cmcnt].header="Item";
                    }if(productGridCM[cmcnt].dataIndex=='desc'){
                        productGridCM[cmcnt].header="Item Description";
                    }else if(productGridCM[cmcnt].dataIndex=='showquantity'){
                        productGridCM[cmcnt].header="No. of hours";
                    }else if(productGridCM[cmcnt].dataIndex=='rate'){
                        productGridCM[cmcnt].header="Cost per hour";
                    }else if(productGridCM[cmcnt].dataIndex=='dependentType'){
                        productGridCM[cmcnt].hidden=true;
                    }
                }
            }else  if(invoicetype=='ff808081434d75f20143518400630010'){
                var productGridCM = this.Grid.colModel.config;
                this.Grid.calculatePercentage=false;
                var productGridCM = this.Grid.colModel.config;
                for(var cmcnt=0;cmcnt<productGridCM.length;cmcnt++){
                    if(productGridCM[cmcnt].dataIndex=='showquantity'){
                        productGridCM[cmcnt].header="Quantity";
                    }else if(productGridCM[cmcnt].dataIndex=='productid'){
                        productGridCM[cmcnt].header="Item";
                    }else if(productGridCM[cmcnt].dataIndex=='desc'){
                        productGridCM[cmcnt].header="Item Description";
                    }else if(productGridCM[cmcnt].dataIndex=='rate'){
                        productGridCM[cmcnt].header="Unit Price";
                    }else if(productGridCM[cmcnt].dataIndex=='dependentType'){
                        productGridCM[cmcnt].hidden=true;
                    }
                }
            }else{
                var productGridCM = this.Grid.colModel.config;
                this.Grid.calculatePercentage=false;
                var productGridCM = this.Grid.colModel.config;
                for(var cmcnt=0;cmcnt<productGridCM.length;cmcnt++){
                     if(productGridCM[cmcnt].dataIndex=='productid'){
                        productGridCM[cmcnt].header="Product";
                    }else if(productGridCM[cmcnt].dataIndex=='desc'){
                        productGridCM[cmcnt].header="Description";
                    }else if(productGridCM[cmcnt].dataIndex=='showquantity'){
                        productGridCM[cmcnt].header="Quantity";
                    }else if(productGridCM[cmcnt].dataIndex=='rate'){
                        productGridCM[cmcnt].header="Unit Price";
                    }else if(productGridCM[cmcnt].dataIndex=='dependentType'){
                        productGridCM[cmcnt].hidden=false;
                    }
                }
            }
            this.Grid.getView().refresh(true);
        }
    },
    /*********/
    beforeTabChange:function(a,newTab,currentTab){
    	if(currentTab!=null && newTab!=currentTab){
            if(!this.isExpenseInv){
                this.autoGenerateDO.setValue(false);
                this.autoGenerateDO.disable();
//                this.includingGST.setValue(false);
//                this.includingGST.disable();
//                WtfGlobal.hideFormElement(this.includingGST); 
                WtfGlobal.hideFormElement(this.autoGenerateDO);
//                WtfGlobal.hideFormElement(this.invoiceList);
                if( this.moduleid==Wtf.Acc_Purchase_Order_ModuleId){
                    this.fromPO.disable();
                } 
            }else{
                this.autoGenerateDO.reset();
                this.autoGenerateDO.enable();
//                this.includingGST.reset();
//                this.includingGST.enable();
//                WtfGlobal.showFormElement(this.includingGST); 
                WtfGlobal.showFormElement(this.autoGenerateDO);
//                WtfGlobal.showFormElement(this.invoiceList);
                if( this.moduleid==Wtf.Acc_Purchase_Order_ModuleId){
                    this.fromPO.enable();
                }
             }
//             if(currentTab==0){// if no grid tab changes : first time just ativate first tab then no need to show alert message
//                 this.giveAlertOnTabChange=false;
//             }
//            if(this.capitalGoodsAcquired){
//                this.capitalGoodsAcquired.reset();
//                if(!this.isExpenseInv){
//                    WtfGlobal.hideFormElement(this.capitalGoodsAcquired);
//                }
//            }
             
            if(this.importService){
                this.importService.reset();
            }
            if(this.giveAlertOnTabChange){
                //code to reset all linking info when tabs get changed i.e inventort and expense tabs in PI and PO
                this.fromPO.reset();
                this.fromLinkCombo.reset();
                this.PO.reset();
                this.fromLinkCombo.disable();
                this.PO.disable();
                if(this.fromLinkCombo.getValue()!=""){
                    this.PO.enable();
                }else{
                   this.PO.disable(); 
                }
                /*
                 * ERP-39553 -User Presmission -Unit Price is hided , but in Purchase Expense on line level, Amount is showing 
                 */
                if (Wtf.Acc_Vendor_Invoice_ModuleId && !Wtf.dispalyUnitPriceAmountInPurchase && !this.isExpenseInv) {
                    Wtf.MessageBox.alert(WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.purchaseExpense.alert"),{},this)
                    return false;
                } else {
                    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.savdat"),this.isExpenseInv?WtfGlobal.getLocaleText("acc.invoice.msg4"):WtfGlobal.getLocaleText("acc.invoice.msg5"),function(btn){ ///"Switching to "+(this.isExpenseInv?"Inventory":"Expense")+" section will empty the data filled so far in "+(this.isExpenseInv?"Expense":"Inventory")+" section. Do you wish to continue?",function(btn){
                        if(btn=="yes") {
                            this.callTabChange(a,newTab,currentTab);
                            if(this.isExpenseInv){
                            this.applyTaxToTermsChkHideShow(false);
                            }
                            /*
                             * When tab changed from inventory to expense reseting Number field
                             */
                            this.PO.reset();
                            if (this.isExpenseInv) {
                                        /**
                                         * For expense type documents such as expense invoice, 
                                         * expense purchase order RCM applicable will be disabled.
                                         */
                                this.GTAApplicable.setValue(false);
                                this.GTAApplicable.setDisabled(true);
                                /**
                                 * Set False and disabled in Expensive invoice
                                 */
                                this.isMerchantExporter.setValue(false);
                                this.isMerchantExporter.setDisabled(true);
                            } else{
                                this.GTAApplicable.setDisabled(false);
                                this.isMerchantExporter.setDisabled(false);
                            }
                        }
                        /* On click of NO button Genrrate GR  Field is is Enabled
                         * in if condition GR feild is enabled only when it is in inventry tab
                         * in else conditon GR feild is disabled only when it is in Expencive tab
                         * */
                        else{
                            if(!this.isExpenseInv){
                            this.autoGenerateDO.reset();
                            this.autoGenerateDO.enable();
                            WtfGlobal.showFormElement(this.autoGenerateDO);
                        }else{
                            WtfGlobal.hideFormElement(this.autoGenerateDO);
                          }
                         }
                    }.createDelegate(this),this); 
               }
            } else {
                this.callTabChange(a,newTab,currentTab);
                this.giveAlertOnTabChange=true;
            }
            return false;
        }
        else{
            return true;
        }
   },
   
    callTabChange:function(a,newTab,currentTab){
        (this.productDetailsTpl.isVisible())?this.productDetailsTpl.setVisible(false):this.productDetailsTpl.setVisible(true);
        a.suspendEvents();
        a.activate(newTab);
        this.Discount.setValue(0);
        if(this.capitalGoodsAcquired){
            this.capitalGoodsAcquired.reset();
            if(!this.isExpenseInv){
                WtfGlobal.hideFormElement(this.capitalGoodsAcquired);
            }else{
                WtfGlobal.showFormElement(this.capitalGoodsAcquired);
            }
        }
        if(this.isRetailPurchase){
            this.isRetailPurchase.reset();
            if(!this.isExpenseInv){
                WtfGlobal.hideFormElement(this.isRetailPurchase);
            }else{
                WtfGlobal.showFormElement(this.isRetailPurchase);
            }
        }
        if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && this.AdjustAdvancePayments && !(this.isTemplate || this.isEditTemplate || this.isViewTemplate)) {
            this.AdjustAdvancePayments.reset();
        }
        if(!this.includeProTax.getValue()){ // Set global tax only if not including GST and Include product tax
        var currentTaxItem=WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
        var actualTaxId=currentTaxItem!=null?currentTaxItem.get('taxId'):"";
        
            /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
             *  Then we ignore Customer/Vendor mapped taxes
             *  Consider Only Product mapped taxes i.e - only line level taxes(Create New Case)
             */
            if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                actualTaxId = "";
            }
            
        if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null ){
            this.isTaxable.setValue(true);
            this.Tax.enable();
            this.Tax.setValue(actualTaxId);
        }else{
            this.isTaxable.setValue(false);
            this.Tax.setValue("");
            this.Tax.disable();   
        }
       }
       /*
        *Tiket :ERP-30194 ,ERP-30195 [SJ]
        *Expense tab on then in Purchase Invoice form Procurment no and landing cost of category Enable Other wise Disable.  
        **/
       if(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId){ //ERP-30194 ,ERP-30195 [SJ]
        if(!this.isExpenseInv){               
            this.landingCostCategoryCombo.reset();
            this.landingCostCategoryCombo.enable();
            this.landingCostCategoryWindowBtn.enable();
            this.landingCostCategoryCombo.setValue("NOT APPLICABLE");  
            this.invoiceList.clearValue();
            this.invoiceList.enable();
            if(!this.readOnly && this.invoiceList.getValue()==""){
                this.landingCostCategoryCombo.disable();
            }
        }else{
            this.landingCostCategoryCombo.disable();
            this.landingCostCategoryWindowBtn.disable();
                      
            this.invoiceList.disable();
            this.invoiceList.clearValue();
        }
    }
        a.resumeEvents();
        this.onGridChange(newTab,currentTab);
        this.showGridTax(null,null,!this.includeProTax.getValue());       // Show/hide Product tax and Tax Amount for Inventory/Expense Tab   
    },
    
    hideShowProductWeightColumns:function(){
        var productweightperstockuom=this.Grid.getColumnModel().findColumnIndex("productweightperstockuom");
        var productweightincludingpakagingperstockuom=this.Grid.getColumnModel().findColumnIndex("productweightincludingpakagingperstockuom");
        var productvolumeperstockuom=this.Grid.getColumnModel().findColumnIndex("productvolumeperstockuom");
        var productvolumeincludingpakagingperstockuom=this.Grid.getColumnModel().findColumnIndex("productvolumeincludingpakagingperstockuom");
        if(Wtf.account.companyAccountPref.calculateproductweightmeasurment){// If option is true in the company need to show unit product column
            this.Grid.getColumnModel().setHidden( productweightperstockuom,false) ;
            this.Grid.getColumnModel().setHidden( productweightincludingpakagingperstockuom,false) ;
            this.Grid.getColumnModel().setHidden( productvolumeperstockuom,false) ;
            this.Grid.getColumnModel().setHidden( productvolumeincludingpakagingperstockuom,false) ;
        } else {//If option is false in the company need to hide unit product column
            this.Grid.getColumnModel().setHidden( productweightperstockuom,true) ;
            this.Grid.getColumnModel().setHidden( productweightincludingpakagingperstockuom,true) ;
            this.Grid.getColumnModel().setHidden( productvolumeperstockuom,true) ;
            this.Grid.getColumnModel().setHidden( productvolumeincludingpakagingperstockuom,true) ;
        }
    },
    
    hideShowProfitMarginColumns:function(){
        if (Wtf.account.companyAccountPref.activateProfitMargin && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)) {
            var vendoridIndex = this.Grid.getColumnModel().findColumnIndex("vendorid");
            var vendorunitcostIndex = this.Grid.getColumnModel().findColumnIndex("vendorunitcost");
            var vendorcurrexchangerateIndex = this.Grid.getColumnModel().findColumnIndex("vendorcurrexchangerate");
            var totalcostIndex = this.Grid.getColumnModel().findColumnIndex("totalcost");
            var profitmarginIndex = this.Grid.getColumnModel().findColumnIndex("profitmargin");
            var profitmarginpercentIndex = this.Grid.getColumnModel().findColumnIndex("profitmarginpercent");
            this.Grid.getColumnModel().setHidden(vendoridIndex, false);
            this.Grid.getColumnModel().setHidden(vendorunitcostIndex, false);
            this.Grid.getColumnModel().setHidden(vendorcurrexchangerateIndex, false);
            this.Grid.getColumnModel().setHidden(totalcostIndex, false);
            this.Grid.getColumnModel().setHidden(profitmarginIndex, false);
            this.Grid.getColumnModel().setHidden(profitmarginpercentIndex, false);
        }
        /*
         * Commented below code as no need to hide the profit margin related fields as the fields are put in case of SO and CQ module
         */
//        else{
//            this.Grid.getColumnModel().setHidden( vendoridIndex,true) ;
//            this.Grid.getColumnModel().setHidden( vendorunitcostIndex,true) ;
//            this.Grid.getColumnModel().setHidden( vendorcurrexchangerateIndex,true) ;
//            this.Grid.getColumnModel().setHidden( totalcostIndex,true) ;
//            this.Grid.getColumnModel().setHidden( profitmarginIndex,true) ;
//            this.Grid.getColumnModel().setHidden( profitmarginpercentIndex,true) ;
//        }
    },
    
    onGridChange:function(newTab){
        this.Grid.getStore().removeAll();
        this.Grid.addBlankRow();
        this.Grid = newTab;
        this.Tax.store=this.Grid.taxStore;
        this.isExpenseInv=!this.isExpenseInv; //work fine in case of 2 tabs
        //            if(!this.isCustBill&&!this.isExpenseInv&&this.Grid.priceStore.getCount()==0)
        //                this.Grid.priceStore.load({params:{transactiondate:WtfGlobal.convertToGenericDate(this.billDate.getValue())}});
        this.applyCurrencySymbol();
        if(this.southCalTemp.body!=undefined)
            var subtotal=0.00;
        var tax=0.00;
        var taxAndSubtotal=this.Grid.calLineLevelTax();
        if(this.includeProTax.getValue() && Wtf.account.companyAccountPref.isLineLevelTermFlag==0){
            subtotal=WtfGlobal.addCurrencySymbolOnly(taxAndSubtotal[0]-taxAndSubtotal[1],this.symbol)
            tax = taxAndSubtotal[1];
            if(this.applyTaxToTermsChk.getValue()==true){
                tax += this.addTermAmountInTax();
            }
            tax=WtfGlobal.addCurrencySymbolOnly(tax,this.symbol);
        }else{
            subtotal=WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol)
            tax=WtfGlobal.addCurrencySymbolOnly(this.caltax()+this.addTermAmountInTax(),this.symbol);
        }
        if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:Wtf.UpriceAndAmountDisplayValue,
                discount:WtfGlobal.addCurrencySymbolOnly(this.getDiscount(),this.symbol),
                totalamount:Wtf.UpriceAndAmountDisplayValue,
                tax:Wtf.UpriceAndAmountDisplayValue,
                nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
                tdsamount: Wtf.UpriceAndAmountDisplayValue,
                roundingAdjustmentAmount:Wtf.UpriceAndAmountDisplayValue,
                aftertaxamt:Wtf.UpriceAndAmountDisplayValue,
                totalAmtInBase:Wtf.UpriceAndAmountDisplayValue,
                amountdue:Wtf.UpriceAndAmountDisplayValue,
                changeToBeReturned:Wtf.UpriceAndAmountDisplayValue
                });
        } else if(this.roundingAdjustmentFlag){
            var summaryAmtArray = this.getSummaryDetailAmountArray();
            var subTotalAmt = summaryAmtArray[0];
            var taxValue = summaryAmtArray[1];
            var nonTaxableAmt = summaryAmtArray[2];
            var termTotalAmt = summaryAmtArray[3];
            var tdsAmt = summaryAmtArray[4];
            var discountAmt = summaryAmtArray[5];
            var totalAmount = summaryAmtArray[6];
            var changedToBeReturnedAmt = summaryAmtArray[7];
            var totalInBaseAmt = summaryAmtArray[8];
            var aftertaxamt = summaryAmtArray[9];
            var roundingAdjustmentAmount = summaryAmtArray[10];
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:WtfGlobal.addCurrencySymbolOnly(subTotalAmt,this.symbol),
                discount:WtfGlobal.addCurrencySymbolOnly(discountAmt,this.symbol),
                totalamount:WtfGlobal.addCurrencySymbolOnly(totalAmount,this.symbol),
                tax:WtfGlobal.addCurrencySymbolOnly(taxValue,this.symbol),
                nontaxableamount: WtfGlobal.addCurrencySymbolOnly(nonTaxableAmt,this.symbol),
                tdsamount: WtfGlobal.addCurrencySymbolOnly(tdsAmt,this.symbol),
                roundingAdjustmentAmount:WtfGlobal.addCurrencySymbolOnly(roundingAdjustmentAmount,this.symbol),
                aftertaxamt:WtfGlobal.addCurrencySymbolOnly(aftertaxamt,this.symbol),
                totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(totalInBaseAmt,WtfGlobal.getCurrencySymbol()),
                amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
                //Update value of Cash To Be Returned in summary text
                changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(changedToBeReturnedAmt,this.symbol)
            });
        } else{
            this.tplSummary.overwrite(this.southCalTemp.body,{
                subtotal:subtotal,
                discount:WtfGlobal.addCurrencySymbolOnly(this.getDiscount(),this.symbol),
                totalamount:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount(),this.symbol),
                tax:tax,
                nontaxableamount: WtfGlobal.addCurrencySymbolOnly(this.calCulateNonTaxableTermAmount(),this.symbol),
                tdsamount: WtfGlobal.addCurrencySymbolOnly(this.calculateTDSAmount(),this.symbol),
                aftertaxamt:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount()+this.caltax()+this.addTermAmountInTax()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount(),this.symbol),
                totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol()),
                amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
                //Update value of Cash To Be Returned in summary text
                changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(this.calChangeToBeReturned(),this.symbol)
            });
        }                 
        if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
            if(this.productProfitMarginTpl.body!=undefined){
                this.calculateProfitMarginAndUpdateTpl();
            //                    this.calProfitMargin();
            //                    this.productProfitMarginTplSummary.overwrite(this.productProfitMarginTpl.body,{
            //                        totalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalproductsellingprice,WtfGlobal.getCurrencySymbol()),
            //                        totalproductcost:WtfGlobal.addCurrencySymbolOnly(this.totalproductcost,WtfGlobal.getCurrencySymbol()),
            //                        totalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
            //                        totalprodcutprofitmarginpercent:this.totalproductsellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.totalprodcutprofitmarginpercent+'%</div>',
            //
            //                        totalservicesellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalservicesellingprice,WtfGlobal.getCurrencySymbol()),
            //                        totalservicecost:WtfGlobal.addCurrencySymbolOnly(this.totalservicecost,WtfGlobal.getCurrencySymbol()),
            //                        totalserviceprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalserviceprofitmargin,WtfGlobal.getCurrencySymbol()),
            //                        totalserviceprofitmarginpercent:this.totalservicesellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.totalserviceprofitmarginpercent+'%</div>',
            //
            //                        finalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.finalproductsellingprice,WtfGlobal.getCurrencySymbol()),
            //                        finalproductcost:WtfGlobal.addCurrencySymbolOnly(this.finalproductcost,WtfGlobal.getCurrencySymbol()),
            //                        finalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.finalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
            //                        finalproductprofitmarginpercent:this.finalproductsellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.finalproductprofitmarginpercent+'%</div>'              
            //                    });
            }
        }
        /**
         * While switching Product grid to Expense grid Need to update GST tax summary details
         * ERP-38735
         */
        if (WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied()){
            /**
             * This condition true when we changes Expense Grid to Product Details Grid
             */
            if (this.Grid && typeof this.Grid.updateTermDetails == 'function'){
                this.Grid.updateTermDetails();
            }
            /**
             * This condition true when we changes Product Details Grid to Expense Grid 
             */
            if (this.ProductGrid && typeof this.ProductGrid.updateTermDetails == 'function'){
                this.ProductGrid.updateTermDetails();
            }
        }
    },
    caltax:function(){
        var totalamount=this.calTotalAmount();
        var rec= this.Grid.taxStore.getAt(this.Grid.taxStore.find('prtaxid',this.Tax.getValue()));
        var taxamount=0;
        if(this.isTaxable != undefined && this.isTaxable.getValue()){
            totalamount=getRoundedAmountValue(this.calTotalAmount());
            if (rec != null && rec.data.prtaxid != "None"){
                taxamount = ((totalamount)*rec.data["percent"])/100;
            }
//            taxamount += this.addTermAmountInTax();
        } 
        

//        if((this.includeProTax.getValue() && this.applyTaxToTermsChk.getValue())){
//            taxamount += this.addTermAmountInTax();
//        }
//        var taxamount=(rec==null?0:(totalamount*rec.data["percent"])/100);
       if(Wtf.account.companyAccountPref.isLineLevelTermFlag==1){   // Term Amount of line item showing as tax in  Line level terms Company.
            var taxamount=0;
              var store = this.Grid.store;
                var totalCnt = store.getCount();
                for(var cnt=0; cnt<totalCnt; cnt++) {
                 var lineAmt = store.getAt(cnt).data.recTermAmount;
                    if(typeof lineAmt=='number')
                      taxamount += getRoundedAmountValue(lineAmt);
               }             
          }
        return getRoundedAmountValue(taxamount);
     },
     addTermAmountInTax: function () {
        var taxamount = 0;
//        var termAmountMapping = {};
//        if ((this.applyTaxToTermsChk.getValue()==true || (this.includingGST && this.includingGST.getValue())) && this.includeProTax && this.includeProTax.getValue() == true) {
//            for (var i = 0; i < this.termStore.getCount(); i++) {
//                var recdata = this.termStore.getAt(i).data;
//                if (typeof recdata.termamount == 'number' && (recdata.termamount != 0 || recdata.termamount != 0)) {
//                    termAmountMapping[recdata.id] = recdata.termamount;
//                }
//            }
//
//            var store = this.Grid.store;
//            var totalCnt = store.getCount();
//            var lineleveltaxtermamount = 0;
//            var alreadyCalucalatedTaxIds = '';
//            for (var cnt = 0; cnt < totalCnt; cnt++) {
//                var productRec1 = store.getAt(cnt);
//                var productRec = productRec1.data;
//                var productTaxId = productRec.prtaxid;
//                if (productTaxId) {
//                    var productTaxTermids='';//SDP-12509
//                    if (Object.keys(termAmountMapping).length > 0 && alreadyCalucalatedTaxIds.indexOf(productTaxId) == -1) {
//                        alreadyCalucalatedTaxIds += productTaxId + ",";
//                        var productTaxRec = this.Grid.taxStore.getAt(this.Grid.taxStore.find('prtaxid', productTaxId));
//                        if (productTaxRec && productTaxRec.data.termid) {
//                            var productTaxTermIds = productTaxRec.data.termid.split(',');
//                            var productTaxTermIdsAmount = 0;
//                            
//                            /*
//                             * SDP-14070: If we apply same term for multiple taxes and these taxes used in invoice, then mapped term tax 
//                             * amount not considered in calculation.
//                             */
//                            var termIDs = new Array();
//                            var alreadyConsiderTax='';
//                            for (var count = 0; count < totalCnt; count++) {
//
//                                var taxID = store.getAt(count).data.prtaxid;
//                                if (alreadyConsiderTax.indexOf(taxID) == -1) {
//                                    alreadyConsiderTax += taxID + ',';
//                                    var TaxRec = this.Grid.taxStore.getAt(this.Grid.taxStore.find('prtaxid', taxID));
//                                    if (TaxRec && TaxRec.data.termid) {
//                                        termIDs = termIDs.concat(TaxRec.data.termid.split(','));
//                                    }
//                                }
//
//                            }
//
//                            for (var i = 0; i < termIDs.length; i++) {
//                                var flagDelete = false;
//                                if(termIDs[i]!=undefined){
//                                
//                                for (var j = i + 1; j < termIDs.length; j++) {
//                                    if (termIDs[i] == termIDs[j]) {
//                                        delete termIDs[j];
//                                        flagDelete = true;
//                                    }
//
//                                }
//                                if (flagDelete)
//                                    delete termIDs[i];
//                            }
//                        }
//                             
//                            for (var productTaxTermIds_cnt = 0; productTaxTermIds_cnt < productTaxTermIds.length; productTaxTermIds_cnt++) {
//                                var productTaxTermId = productTaxTermIds[productTaxTermIds_cnt];
//                                    if (productTaxTermId !=undefined && termAmountMapping[productTaxTermId] && termIDs.indexOf(productTaxTermId)!=-1) {
//                                    productTaxTermIdsAmount += termAmountMapping[productTaxTermId];
//                                    productTaxTermids = productTaxTermids + productTaxTermId + ",";                                  
//                                }
//                            }
//                            var individualtaxAmount = 0;
//                            if (this.includingGST && this.includingGST.getValue()) {
//                                /*
//                                 * Reverse calculate tax in case of Including GST
//                                 */
//                                individualtaxAmount = ((productTaxTermIdsAmount) * productTaxRec.data.percent / (100 + productTaxRec.data.percent));
//                            } else {
//                                individualtaxAmount = ((productTaxTermIdsAmount) * productTaxRec.data.percent / 100);
//                            }
//                            
//                            lineleveltaxtermamount += individualtaxAmount;
//                            productRec1.set('lineleveltaxtermamount',individualtaxAmount);
//                            productRec1.set('termids', productTaxTermids);//SDP-12509
//                        }
//                    }
//                }
//                        if (lineleveltaxtermamount == 0) {
//                            productRec1.set('lineleveltaxtermamount', lineleveltaxtermamount);
//                        }
//            } 
//            taxamount += lineleveltaxtermamount;
//        }

        
            for (var term = 0; term < this.termStore.getCount(); term++) {
                var termRec = this.termStore.getAt(term);
                var termData = this.termStore.getAt(term).data;
                if (typeof termData.termamount == 'number') {
                    var individualTermTaxAmount = 0;
                    if (this.includingGST && this.includingGST.getValue()) {
                        /*
                        * Reverse calculate tax in case of Including GST
                        */
                        individualTermTaxAmount = getRoundedAmountValue((termData.termamount) * termData.linkedtaxpercentage / (100 + termData.linkedtaxpercentage));
                        termRec.set('termAmountExcludingTax',getRoundedAmountValue(termData.termamount - individualTermTaxAmount));
                        termRec.set('termAmountExcludingTaxInBase',getRoundedAmountValue((termData.termamount - individualTermTaxAmount) * this.getExchangeRate()));
                    } else {
                        individualTermTaxAmount = getRoundedAmountValue((termData.termamount) * termData.linkedtaxpercentage / 100);
                        termRec.set('termAmountExcludingTax',getRoundedAmountValue(termData.termamount));
                        termRec.set('termAmountExcludingTaxInBase',getRoundedAmountValue(termData.termamount * this.getExchangeRate()));
                    }
                    taxamount += individualTermTaxAmount;
                    termRec.set('termamountinbase',getRoundedAmountValue(termData.termamount * this.getExchangeRate()));
                    termRec.set('termtaxamount',individualTermTaxAmount);
                    termRec.set('termtaxamountinbase',getRoundedAmountValue(individualTermTaxAmount * this.getExchangeRate()));
                }
            }
            
        return taxamount;
    },
    


    addTermAmountInTaxForMALAYSIA: function(){
        var taxamount = 0;
        for (var i = 0; i < this.termStore.getCount(); i++) {
            var termRec = this.termStore.getAt(i);
            var termData = this.termStore.getAt(i).data;
            var indexes=[];
            if (typeof termData.termamount == 'number' && (termData.termamount != 0)) {
                this.Grid.taxStore.each(function(rec){
                    var termids=rec.data.termid != undefined ? rec.data.termid.split(',') : '';
                    for (var termIds_cnt = 0; termIds_cnt < termids.length; termIds_cnt++) {
                        if(termids[termIds_cnt]==termData.id){
                            indexes.push(rec);
                        }
                    }
                });
                if(indexes.length == 1){
                    var individualTermTaxAmount = ((termData.termamount) * indexes[0].data.percent / 100);
                    taxamount += individualTermTaxAmount;
                    termRec.set('termtaxamount',individualTermTaxAmount);
                    termRec.set('termtaxamountinbase',getRoundedAmountValue(individualTermTaxAmount*this.getExchangeRate()));
                    termRec.set('termtax',indexes[0].data.prtaxid);
                }
                if(indexes.length > 1){
                    var store = this.Grid.store;
                    var lineLevelTotalCnt = store.getCount();
                    var alreadyCalucalatedTaxIds = '';
                    var isTermTaxAvailAtLineLevel = 0;
                    var index;
                    for (var termTax_cnt = 0; termTax_cnt < indexes.length; termTax_cnt++) {
                        for (var cnt = 0; cnt < lineLevelTotalCnt; cnt++) {
                            var productRec = store.getAt(cnt);
                            var productData = productRec.data;
                            var productTaxId = productData.prtaxid;
                            if (productTaxId && (indexes[termTax_cnt].data.prtaxid === productTaxId) && alreadyCalucalatedTaxIds.indexOf(productTaxId) == -1) {
                                alreadyCalucalatedTaxIds += productTaxId + "," ;
                                isTermTaxAvailAtLineLevel++;
                                index = termTax_cnt;
                            }
                        }
                    }
                    if(isTermTaxAvailAtLineLevel==1){
                        var individualTermTaxAmt = ((termData.termamount) * indexes[index].data.percent / 100);
                        taxamount += individualTermTaxAmt;
                        termRec.set('termtaxamount',individualTermTaxAmt);
                        termRec.set('termtaxamountinbase',getRoundedAmountValue(individualTermTaxAmt*this.getExchangeRate()));
                        termRec.set('termtax',indexes[index].data.prtaxid);
                    }
                }
            }
        }
        return taxamount;
    },
     calCulateNonTaxableTermAmount : function(){
        var OtherTermNonTaxableAmount=0;
        if(Wtf.account.companyAccountPref.isLineLevelTermFlag==1){   // Term Amount of line item showing as tax in  Line level terms Company.
              var store = this.Grid.store;
                var totalCnt = store.getCount();
                for(var cnt=0; cnt<totalCnt; cnt++) {
                 var lineAmt = store.getAt(cnt).data.OtherTermNonTaxableAmount;
                    if(typeof lineAmt=='number')
                      OtherTermNonTaxableAmount += getRoundedAmountValue(lineAmt);
               }
          }
        return getRoundedAmountValue(OtherTermNonTaxableAmount); 
     },
     
     getLineLevelTermAmountIncludedForTDS : function(){
        var lineLevelTermTotalAmount=0;
        if(Wtf.account.companyAccountPref.isLineLevelTermFlag==1){   // Term Amount of line item showing as tax in  Line level terms Company.
            var store = this.Grid.store;
            var totalCnt = store.getCount();
            for(var cnt=0; cnt<totalCnt; cnt++) {
                var LineTermdetails = eval(store.getAt(cnt).data.LineTermdetails);
                if(LineTermdetails != undefined && LineTermdetails != ""){
                    for(var n = 0 ; n < LineTermdetails.length ; n++){
                        if(!Wtf.isEmpty(this.GTAApplicable) && this.GTAApplicable.getValue() && ( LineTermdetails[n].termtype == Wtf.term.Service_Tax || LineTermdetails[n].termtype == Wtf.term.Swachh_Bharat_Cess || LineTermdetails[n].termtype == Wtf.term.Krishi_Kalyan_Cess )){// For GTA Applicable Skip all 3 serveices taxes
                            continue;
                        }
                        if(LineTermdetails[n].includeInTDSCalculation){
                            lineLevelTermTotalAmount += LineTermdetails[n].termamount;
                        }
                    }
                }
            }
        }
        return getRoundedAmountValue(lineLevelTermTotalAmount); 
     },
     
     calculateTDSAmount : function(){
        var tdsAmount=0;
        if(Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId){
            tdsAmount = this.calTotalTDSAmount();//TDS assessable value which is same as lines total amount. currently we have provided this feture in expense not for product invoice
        }
        if(Wtf.isTDSApplicable){
            tdsAmount -= this.TotalAdvanceTDSAdjustmentAmt;
        }
        return getRoundedAmountValue(tdsAmount); 
     },
     calculateAdvanceDocumentTDSAmount : function(rec){
        if (!Wtf.isEmpty(rec.data.id)) {
            this.AdjustAdvancePayments.enable();
            this.AdjustAdvancePaymentStore.load({
                params: {
                    vendorid: rec.data.id,
                    billdate: WtfGlobal.convertToGenericDate(this.billDate.getValue())
                }
            });
        }
     },

    caltaxInBase:function(){
        var totalamount=this.calTotalAmountWithDiscInBase();
        var rec= this.Grid.taxStore.getAt(this.Grid.taxStore.find('prtaxid',this.Tax.getValue()));
        var totalterm = 0;
        if (rec != null) {
            for (var i = 0; i < this.termStore.getCount(); i++) {
                var recdata = this.termStore.getAt(i).data; //  var recdata = obj.record.data;
                var store = this.termStore;
                var subtotal = this.calProdSubtotalWithoutDiscountInBase();
                var formula = recdata.formulaids.split(",");
                var termtotal = 0;
                var terms = rec.data.termid;
                terms = terms.split(",");
                terms = "[" + terms.join(',') + "]";
                if (terms.indexOf(recdata.id)!=-1) {
                    for (var cnt = 0; cnt < formula.length; cnt++) {
                        if (formula[cnt] == 'Basic') {
                            termtotal += (subtotal);
                        }
                        var record = store.queryBy(function (record) {
                            return (record.get('id') == formula[cnt]);
                        }, this).items[0];
                        if (record && (typeof record.data.termamount == 'number')) {
                            //                termtotal +=(record.data.termamount*(record.data.sign==1 ? 1 : -1 ));
                            termtotal += this.calAmountInBase(getRoundedAmountValue(record.data.termamount));
                        }
                    }
                    var this_termTotal = 0;
                    if (typeof (recdata.termpercentage) != "string" && parseInt(recdata.termpercentage) >= 0) {
                        var opmod = recdata.sign == 0 ? -1 : 1;
                        this_termTotal = ((Math.abs(termtotal) * recdata.termpercentage * 1) / 100) * opmod;
                    }
                    else if (typeof (recdata.termamount) != "string") {     // for term charges 
                        parseInt(recdata.termamount)
                        this_termTotal =  this.calAmountInBase(getRoundedAmountValue(parseInt(recdata.termamount)));
                    }
                    totalterm = totalterm + getRoundedAmountValue(this_termTotal);
                }
            }
        }
        var taxamount=0;
        if(rec!=null && rec.data.prtaxid != "None"){
            totalamount=this.calTotalAmountWithDiscInBase();
            
            taxamount=((totalamount+totalterm)*rec.data["percent"])/100;
        }
        return getRoundedAmountValue(taxamount);
     },
     
    addAccount: function(store){
        callCOAWindow(false,null,"coaWin",this.isCustomer,false,false,false,false,false,true);
        Wtf.getCmp("coaWin").on('update',function(){store.reload();},this);
    },
        addOrder:function(){
        var tabid = "ordertab";
        if(this.isCustomer){
            if(this.quotation){
                tabid = 'vendorquotation';
                callVendorQuotation(false, tabid);
            } else if(this.isOrder){
                tabid = 'quotation';
                callQuotation(false, tabid);
            } else {
//                if(this.isCustBill) {
//                    tabid = "bsalesorder";
//                    callBillingSalesOrder(false,null,tabid);
//                } else 
                {
                    if(this.fromLinkCombo.getValue() == 1) {
                        callDeliveryOrder(false,null, "deliveryorder");
                    } else {
                        tabid = "salesorder";
                        callSalesOrder(false,null,tabid);
                    }
                   
                }
            }
        }else{
//            if(this.isCustBill) {
//                tabid = "bpurchaseorder";
//                callBillingPurchaseOrder(false,null,tabid);
//            } else 
            {
                if(this.isOrder){
                    if(this.fromLinkCombo.getValue() == 0) {
                        tabid = "salesorder";
                        callSalesOrder(false,null,tabid);
                    } else if(this.fromLinkCombo.getValue() == 2){
                        tabid = 'vendorquotation';
                       callVendorQuotation(false, tabid);
                    }
                    
                } else if(this.fromLinkCombo.getValue() == 1) {
                        callGoodsReceiptDelivery(false,null, "goodsreceiptdelivery");
                    } else {
                        tabid = "purchaseorder";
                        callPurchaseOrder(false,null,tabid);
                    }
            }
        }
        if(Wtf.getCmp(tabid)!=undefined) {
            Wtf.getCmp(tabid).on('update',function(){
                this.POStore.reload();
            },this);
        }
},
showGridBatch:function(newval){//written to hide & show Serial window Column-Neeraj D
    var hide=(newval)?0:1 ;
    var id=this.Grid.getId();
    var rowtaxindex=this.Grid.getColumnModel().findColumnIndex('serialwindow');
    //var rowbomindex=this.Grid.getColumnModel().findColumnIndex('bomcode');
    this.Grid.getColumnModel().setHidden( rowtaxindex,hide) ;
    this.Grid.getColumnModel().setHidden( rowtaxindex,hide) ;
    //this.Grid.getColumnModel().setHidden( rowbomindex,hide) ;
},
    showGridTax:function(c,rec,val,isCallForTaxMappedAtProductLevel){
        var hide=(val==null||undefined?!rec.data['value']:val) ;

       /* ----If "Map taxes at product level" check is ON & "Include Product Tax" value is Yes then keeping hide as false whatever the "val" is coming from calling destination-------*/
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel() && this.includeProTax && this.includeProTax.getValue()) {
            hide = false;
        }
        /* ----If "Map taxes at product level" check is ON & "Include Product Tax" value is Yes then keeping hide as false whatever the "val" is coming from calling destination-------*/
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel() && this.isTaxable.getValue()) {
            hide = true;
        }
        
        var id=this.Grid.getId()
        var rowtaxindex=this.Grid.getColumnModel().findColumnIndex("prtaxid");
        var rowtaxamountindex=this.Grid.getColumnModel().findColumnIndex("taxamount");
            this.Grid.getColumnModel().setHidden( rowtaxindex,hide) ;
            this.Grid.getColumnModel().setHidden( rowtaxamountindex,hide) ;
        var rowprDiscountIndex=this.Grid.getColumnModel().findColumnIndex("prdiscount");
        var rowDiscountIsPercentIndex=this.Grid.getColumnModel().findColumnIndex("discountispercent");
        /*
         *commented below code to implement hide show functionality for 'Discount' and 'Discount Type' in PO(ERP-30498)
         **/
//        if(!this.isExpenseInv){
//            this.Grid.getColumnModel().setHidden(rowprDiscountIndex,false);
//            this.Grid.getColumnModel().setHidden(rowDiscountIsPercentIndex,false);
//        }
        
        var rowRateIncludingGstAmountIndex="";
        if(this.isExpenseInv){
            var rowDiscountIsAmountIndex=this.Grid.getColumnModel().findColumnIndex("discountamount");
            rowRateIncludingGstAmountIndex=this.Grid.getColumnModel().findColumnIndex("rateIncludingGstEx");
        }else{
            rowRateIncludingGstAmountIndex=this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
        }
        
        var rowRateAmountIndex=this.Grid.getColumnModel().findColumnIndex("rate");
        if(rowprDiscountIndex!=-1&&rowDiscountIsPercentIndex!=-1&&rowRateIncludingGstAmountIndex!=-1){
        if(this.includingGST.getValue()){
            this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,!this.includingGST.getValue());
                this.Grid.getColumnModel().setEditable(this.Grid.getColumnModel().findColumnIndex("rate"), false);
//            this.Grid.getColumnModel().setHidden(rowprDiscountIndex,!hide);
//            this.Grid.getColumnModel().setHidden(rowDiscountIsPercentIndex,!hide);
            if(this.isExpenseInv){
                this.Grid.getColumnModel().setEditable(this.Grid.getColumnModel().findColumnIndex("rate"), true);
                this.Grid.getColumnModel().setHidden(rowDiscountIsAmountIndex,!hide);
            }else{
                this.Grid.getColumnModel().setEditable(this.Grid.getColumnModel().findColumnIndex("rate"), false);
            }
        }else if(!this.Grid.getColumnModel().config[rowRateIncludingGstAmountIndex].hidden){
                this.Grid.getColumnModel().setEditable(this.Grid.getColumnModel().findColumnIndex("rate"), true);
            this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,!this.includingGST.getValue());
//            this.Grid.getColumnModel().setHidden(rowprDiscountIndex,hide);
//            this.Grid.getColumnModel().setHidden(rowDiscountIsPercentIndex,hide);
             if(this.isExpenseInv){
                this.Grid.getColumnModel().setHidden(rowDiscountIsAmountIndex,hide);
        }
        }
        }
        
        if((WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied()) && !this.isExpenseInv ){
            this.Grid.getColumnModel().setHidden( rowtaxindex,true) ;
            this.Grid.getColumnModel().setHidden( rowtaxamountindex,true) ;
            if(this.includingGST.getValue()){
                //this.Grid.getColumnModel().setHidden( rowRateAmountIndex,true) ;// Show rate column
                this.Grid.getColumnModel().setHidden( rowRateIncludingGstAmountIndex,false) ;
            } else {
                this.Grid.getColumnModel().setHidden( rowRateIncludingGstAmountIndex,true) ;
                this.Grid.getColumnModel().setHidden( rowRateAmountIndex,false) ;
            }
        }
        
        var isCapitalGoodsAcquired = (this.capitalGoodsAcquired && this.capitalGoodsAcquired.getValue()) ? this.capitalGoodsAcquired.getValue() :false;
        this.Grid.getStore().each(function(rec){
            if(this.includeProTax && this.includeProTax.getValue() == true
                && (rec.data.prtaxid == "" || rec.data.prtaxid == undefined || rec.data.prtaxid=='None')) {//In Edit, values are resetting after selection Product level Tax value as No
//                if(this.ExpenseGrid && this.ExpenseGrid.isVisible()) {//(!this.isCustBill && !(this.isEdit && !this.isOrder) && !(this.isCustomer||this.isOrder))
//                    var index=this.ExpenseGrid.accountStore.find('accountid',rec.data.accountid);
//                    var taxid = index > 0 ? this.ExpenseGrid.accountStore.getAt(index).data["acctaxcode"]:"";
//                    var taxamount = this.ExpenseGrid.setTaxAmountAfterSelection(rec);
//                    rec.set('prtaxid',taxid);
//                    rec.set('taxamount',taxamount);
//                } else {
//                    index=this.ProductGrid.productComboStore.find('productid',rec.data.productid);
//                    var acctaxcode = (this.isCustomer)?"salesacctaxcode":"purchaseacctaxcode";
//                    taxid = index > 0 ? this.ProductGrid.productComboStore.getAt(index).data[acctaxcode]:"";
//                    rec.set('prtaxid',taxid);
//                    taxamount = this.ProductGrid.setTaxAmountAfterSelection(rec);
//                    rec.set('taxamount',taxamount);
//                }
                /*For SATS*/
                if(SATSCOMPANY_ID==companyid){
                    rec.set('discountispercent',1);
                    rec.set('prdiscount',0);
                    rec.set('rateIncludingGst',0);
                }
                /**********/
                var taxid = "";
                var taxamount = 0;
                var isLastRow = false;
                /*
                 * for excluding last empty row
                 */
                if (this.isExpenseInv) {
                    if(rec.data.accountid == "" || rec.data.accountid == undefined) {
                        isLastRow = true;
                    }
                } else {
                    if(rec.data.productid == "" || rec.data.productid == undefined) {
                        isLastRow = true;
                    }
                }
                
                if(!(isLastRow)){// for excluding last empty row
                    if (isCapitalGoodsAcquired){
                    /**-----If Capital Goods Acquired then set Product Tax Which is Mapped in System Control.-------------*/
                        if (Wtf.account.companyAccountPref.taxCgaMalaysian != ""){
                            taxid = Wtf.account.companyAccountPref.taxCgaMalaysian;
                            rec.set('prtaxid',taxid);
                            taxamount = this.Grid.setTaxAmountAfterSelection(rec);
                        }
                    } else if (isCallForTaxMappedAtProductLevel != undefined && isCallForTaxMappedAtProductLevel) {
                        /*------If tax is mapped with product then set product mapped tax at line level --------------- */
                      var taxId="";
                      var invoiceStore = false;
                        var productComboIndex = WtfGlobal.searchRecordIndex(this.Grid.productComboStore, rec.data.productid, 'productid');
                        if (productComboIndex == -1) {
                            productComboIndex = WtfGlobal.searchRecordIndex(this.productComboStore, rec.data.productid, 'productid');
                            invoiceStore = true;
                        }
                        if (productComboIndex >= 0) {
                            var prorec = invoiceStore ? this.productComboStore.getAt(productComboIndex) : this.Grid.productComboStore.getAt(productComboIndex);
                            taxId = this.isCustomer ? prorec.data['salestaxId'] : prorec.data['purchasetaxId'];
                            if (taxId != undefined && taxId != "") {
                                taxid = taxId;
                                this.isCustomer ? rec.set('salestaxId', taxid) : rec.set('purchasetaxId', taxid);
                            }

                        }
                    }else{
                    
                    if(taxid == ""){// if tax is mapped to customer or vendor then it will come default populated
                        var currentTaxItem=WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
                        var actualTaxId=currentTaxItem!=null?currentTaxItem.get('taxId'):"";

                        if(actualTaxId== undefined || actualTaxId == "" ||  actualTaxId == null){// if customer/vendor is not mapped with tax then check that is their mapping account is mapped with tax or not, if it is mapped take account tax
                            actualTaxId=currentTaxItem!=null?currentTaxItem.get('mappedAccountTaxId'):"";
                        }
                        
                        
                            /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
                             *  Then we ignore Customer/Vendor mapped taxes
                             *  Consider Only Product mapped taxes i.e - only line level taxes(Create New Case)
                             */
                            if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                                actualTaxId = "";
                            }

                        if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null){
                            taxid = actualTaxId;
                            rec.set('prtaxid',taxid);
                            taxamount = this.Grid.setTaxAmountAfterSelection(rec);
                        }
                    }
                    
                        if (actualTaxId != undefined && actualTaxId != "" && actualTaxId != null) {
                            taxid = actualTaxId;
                            rec.set('prtaxid', taxid);
                            taxamount = this.Grid.setTaxAmountAfterSelection(rec);
                        }
                }
              }
                    
                rec.set('prtaxid',taxid);
                rec.set('taxamount',taxamount);
                rec.set('isUserModifiedTaxAmount', false);
            } else if(this.includeProTax && this.includeProTax.getValue() != true){
                rec.set('prtaxid','');
                rec.set('taxamount',0);
                if(this.isExpenseInv){
                     rec.set('rateIncludingGstEx',0);
                 }
            }
            
             if(this.includingGST&&this.includingGST.getValue() && this.generatePI == null && this.generatePI == undefined){
//                 rec.set('discountispercent',1);
//                 rec.set('prdiscount',0);
                 rec.set('rateIncludingGst',rec.get('rate'));
                 rec.set('rateIncludingGst',rec.get('taxamount'));
                  var taxamount= 0;
                  var unitAmount= 0;
                  var unitTax= 0;
                  var unitVal= 0;
                  var amount=rec.get('rate')!=null?getRoundedAmountValue(rec.get('rate')):0;
                  var quantity=rec.get('quantity')!=null?getRoundofValue(rec.get('quantity')):0;
                  var tax=rec.get('taxamount')!=null?getRoundofValue(rec.get('taxamount')):0;
                  if(quantity!=0){
                     unitAmount=getRoundedAmountValue(amount);
                     unitTax=getRoundedAmountValue(tax/quantity);
                  }
                  if(unitAmount+unitTax!=0){
                        rec.set('rateIncludingGst',unitAmount+unitTax);
                  }else{
                        rec.set('rateIncludingGst',rec.get('rate'));
                  }
             }else if(rowRateIncludingGstAmountIndex!=-1&&this.Grid.getColumnModel().config[rowRateIncludingGstAmountIndex].hidden && rec.data.prdiscount==0)//if column unit price column is hidden. Works for all case except when include gst is checked.
               {
//                 rec.set('discountispercent',1);
//                 rec.set('prdiscount',0);
                 rec.set('rateIncludingGst',0);
             }
             
             // Except Product Combo Edit, For All Edit below code will be used for Multiple Term level Tax calculation.
            if(Wtf.account.companyAccountPref.isLineLevelTermFlag){
            var rowAmountIndex=this.Grid.getColumnModel().findColumnIndex("amount");            
            if(rec.get('LineTermdetails') != undefined && rec.get('LineTermdetails') != ''){
                var termStore = this.Grid.getTaxJsonOfIndia(rec);
                if(this.includingGST && this.includingGST.getValue() == true) {
                    this.Grid.getColumnModel().setRenderer(rowAmountIndex,WtfGlobal.withoutRateCurrencySymbol);
                    termStore = this.Grid.calculateTermLevelTaxesInclusive(termStore, rec);
                } else {
                    this.Grid.getColumnModel().setRenderer(rowAmountIndex,this.Grid.calAmountWithoutExchangeRate.createDelegate(this.Grid));
                    termStore = this.Grid.calculateTermLevelTaxes(termStore, rec);
                }

                rec.set('LineTermdetails',JSON.stringify(termStore));
                this.Grid.updateTermDetails();
            }
        }
             
             
             
             
             
         },this);
//         if(hide)
        if (this.includeProTax && this.includeProTax.getValue() == true){
            WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, this.isExpenseInv);
        }
        
/*----If tax map at product level then not calling updateSubtotal() Function again-----------------   */
        if (!(isCallForTaxMappedAtProductLevel != undefined && isCallForTaxMappedAtProductLevel)) {
            this.updateSubtotal();
        }
             
    },
    
    
    includeProTaxHandler : function(c,rec,val){
        if(this.includeProTax.getValue() == true){
            this.isTaxable.setValue(false);
            this.isTaxable.disable();
            this.Tax.setValue("");
            this.Tax.disable();
            /*
             * if product tax is enabled global level tax should be disabled ERP-32672
             */
            this.isViewTemplate==true?this.includingGST.disable():this.includingGST.enable();
            if(this.isExpenseInv){
                this.applyTaxToTermsChkHideShow(false);
            } else{
                this.applyTaxToTermsChkHideShow(true);
            }
             
        }else{

                this.isTaxable.reset();
                this.isTaxable.enable();
                this.applyTaxToTermsChkHideShow(false);
                
                /*-------If "Map taxes at product level" check is ON then restricting to change "Include Product Tax" value from Yes to No----------  */
                if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                        this.includeProTax.setValue(true);
                        if (this.isExpenseInv){
                            this.applyTaxToTermsChkHideShow(false);
                        } else{
                            this.applyTaxToTermsChkHideShow(true);
                        }
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.maptaxesatproductlevel.activated")], 2);
                } else{
                    this.capitalGoodsAcquiredHandler();
                }
        }
        this.showGridTax(c,rec,val);
    },
    
     capitalGoodsAcquiredHandler: function () {
        var isTaxMisMatch = false;
         if(this.capitalGoodsAcquired && this.capitalGoodsAcquired.getValue()){
             if (!this.includeProTax.getValue()) {
                if ((this.Tax.getValue() != Wtf.account.companyAccountPref.taxCgaMalaysian && Wtf.account.companyAccountPref.taxCgaMalaysian != "") || this.Tax.getValue() == "") {
                    isTaxMisMatch = true;
                    this.isTaxable.setValue(true);
                    this.Tax.enable();
                    this.Tax.setValue(Wtf.account.companyAccountPref.taxCgaMalaysian);
                    this.updateSubtotal();
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.invoice.cgamsg")], 2);
                }
            } else if (this.includeProTax.getValue()) {
                this.Grid.getStore().each(function (rec) {
                    /**-----If Capital Goods Acquired then set Product Tax Which is Mapped in System Control.-------------*/
                    if (rec.data.productid != "" && rec.data.productid != undefined && Wtf.account.companyAccountPref.taxCgaMalaysian != "" && rec.data.prtaxid != Wtf.account.companyAccountPref.taxCgaMalaysian) {
                        isTaxMisMatch = true;
                        rec.set('prtaxid', Wtf.account.companyAccountPref.taxCgaMalaysian);
                        rec.set('taxamount', this.Grid.setTaxAmountAfterSelection(rec));
                    }
                }, this);
                this.updateSubtotal();
                if (isTaxMisMatch){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.invoice.cgamsg")], 2);
                }
            }
         }
         return isTaxMisMatch;
    },
    
    showPartialDiscount : function(c,rec,val) {
        
        /* 
         *Restricting Partial Invoice when Incuding Gst true
         */
        if (this.includingGST.getValue()) {
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.field.partilamountWithIncludeingst")], 2);
            this.partialInvoiceCmb.setValue(false);
        }
        if (this.partialInvoiceCmb && this.partialInvoiceCmb.getValue() == false) {
            this.partialInvAmount.disable();
            this.partialInvAmount.reset();
                        
         /* Enabling following fields when ispartial Invoice combo is setting to "No" in invoice form  */
            var unitPrice = this.Grid.getColumnModel().findColumnIndex("rate")
            this.Grid.getColumnModel().setEditable(unitPrice, true)
            var discountType = this.Grid.getColumnModel().findColumnIndex("discountispercent")
            this.Grid.getColumnModel().setEditable(discountType, true)
            var discount = this.Grid.getColumnModel().findColumnIndex("prdiscount")
            this.Grid.getColumnModel().setEditable(discount, true)
            var productTax = this.Grid.getColumnModel().findColumnIndex("prtaxid")
            this.Grid.getColumnModel().setEditable(productTax, true)
            var quantity = this.Grid.getColumnModel().findColumnIndex("quantity")
            this.Grid.getColumnModel().setEditable(quantity, true)
            var taxamount = this.Grid.getColumnModel().findColumnIndex("taxamount")
            this.Grid.getColumnModel().setEditable(taxamount, true)
            
            this.applyGlobalDiscount.enable();
            this.globalDiscountType.enable();
            this.globalDiscount.enable();
        } else {
            this.partialInvAmount.enable();
            
           /* Disabling following fields when ispartial Invoice combo is setting to "Yes" in invoice form */
            var unitPrice = this.Grid.getColumnModel().findColumnIndex("rate")
            this.Grid.getColumnModel().setEditable(unitPrice, false)
            var discountType = this.Grid.getColumnModel().findColumnIndex("discountispercent")
            this.Grid.getColumnModel().setEditable(discountType, false)
            var discount = this.Grid.getColumnModel().findColumnIndex("prdiscount")
            this.Grid.getColumnModel().setEditable(discount, false)
            var productTax = this.Grid.getColumnModel().findColumnIndex("prtaxid")
            this.Grid.getColumnModel().setEditable(productTax, false)
            var quantity = this.Grid.getColumnModel().findColumnIndex("quantity")
            this.Grid.getColumnModel().setEditable(quantity, false)
            var taxamount = this.Grid.getColumnModel().findColumnIndex("taxamount")
            this.Grid.getColumnModel().setEditable(taxamount, false)
            this.applyGlobalDiscount.disable();
            this.globalDiscountType.disable();
            this.globalDiscount.disable();
        }
//        this.partialInvAmount.reset();
        var hide=val;
        var id=this.Grid.getId();
        var rowindex=this.Grid.getColumnModel().findColumnIndex("partamount");

        this.Grid.getColumnModel().setHidden( rowindex,hide) ;
        this.Grid.getStore().each(function(rec){
        rec.set('partamount',(rec.json!=undefined && rec.json.remainingPartAmt!=undefined && rec.json.remainingPartAmt!=0) ? rec.json.remainingPartAmt : 100)
        },this);
        this.updateSubtotal();
    },
    
     enableNumber:function(c,rec){
        this.handleEmptyText=true;
        this.PO.clearValue();
        this.fromLinkCombo.enable();
        this.fromPO.setValue(true);
        if(this.Grid){
            this.Grid.isFromGrORDO=false;
        }
        this.explodeLinkAP.setValue(false);
        if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId && rec.data['value']==0){//case when linking SO in PO 
            this.explodeLinkAP.enable();
            this.blockSOPO.enable();
            this.blockSOPO.show();
            WtfGlobal.showFormElement(this.blockSOPO);
            WtfGlobal.showFormLabel(this.blockSOPO);
            this.crossLinkingFlag=true;
        } else {
            this.explodeLinkAP.disable();
            this.blockSOPO.setValue(false);
            WtfGlobal.hideFormElement(this.blockSOPO);
            this.blockSOPO.disable();
        }
        if(this.moduleid==Wtf.Acc_Sales_Order_ModuleId && rec.data['value']==4){//case when linking PO in SO 
            this.blockSOPO.enable();
            this.blockSOPO.show();
            WtfGlobal.showFormElement(this.blockSOPO);
            WtfGlobal.showFormLabel(this.blockSOPO);
            this.crossLinkingFlag=true;
        } else if(this.moduleid!=Wtf.Acc_Purchase_Order_ModuleId){
            this.blockSOPO.setValue(false);
            this.blockSOPO.disable();
            WtfGlobal.hideFormElement(this.blockSOPO);
        }
        if(rec.data['value']==0 || rec.data['value']==4 || rec.data['value']==12 || rec.data['value']==14 || rec.data['value']==15){          // 0 for Sales Order And 4 for Purchase Order , 12 for JOB work out
            this.PO.multiSelect=true;
            this.isMultiSelectFlag=true;
            this.PO.removeListener("select",this.populateData,this);  // for selection of multiple sales order 
            this.PO.addListener("blur",this.populateData,this);
            if(rec.data['value']==0) {
                this.fromLinkCombo.setValue(0);
            } else if(rec.data['value']==4) {
                this.fromLinkCombo.setValue(4);
            } else if(rec.data['value']== 12) {
                this.fromLinkCombo.setValue(12);
            } else if(rec.data['value']== 14) {
                this.fromLinkCombo.setValue(14);
            } else if(rec.data['value']== 15) {
                this.fromLinkCombo.setValue(15);
            }
            var  isMRPJOBWORKOUT = (this.isMRPJOBWORKIN != undefined  && this.isMRPJOBWORKIN != false) ? this.isMRPJOBWORKIN : false; // in linking case featching only Job work out 
            this.autoGenerateDO.enable();
            if(this.isOrder){
            if(this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId){
                this.POStore.proxy.conn.url ="ACCPurchaseOrderCMN/getPurchaseOrders.do";
                this.POStore.load({params:{id:this.Name.getValue(),exceptFlagINV:true,currencyfilterfortrans:this.Currency.getValue()}});
            }else{
                this.POStore.proxy.conn.url = this.isCustomer? "ACCPurchaseOrderCMN/getPurchaseOrders.do" : "ACCSalesOrderCMN/getSalesOrders.do";
                this.POStore.load({params: {linkflag: true, isMRPJOBWORKOUT:isMRPJOBWORKOUT}});
            }
                
//                this.POStore.load({params:{currencyfilterfortrans:this.Currency.getValue(),includingGSTFilter:((this.includingGST)?this.includingGST.getValue() : false)}});
            } else if (rec.data['value'] == 14 || rec.data['value'] == 15) { // FOR JOB WORK ORDERS
                var JobWorkOut=(rec.data['value'] == 15);
                this.POStore.proxy.conn.url = this.isCustomer ? "ACCSalesOrderCMN/getSalesOrders.do" : "ACCPurchaseOrderCMN/getPurchaseOrders.do";
                this.POStore.load({params: {id:this.Name.getValue(),exceptFlagINV:true, currencyfilterfortrans:this.Currency.getValue(),isJobWorkOrderReciever:true,isJobWorkOrderInPI:JobWorkOut}});
            } else {
                this.POStore.proxy.conn.url = this.isCustomer ? "ACCSalesOrderCMN/getSalesOrders.do" : "ACCPurchaseOrderCMN/getPurchaseOrders.do";
                this.POStore.load({params:{id:this.Name.getValue(),exceptFlagINV:true,currencyfilterfortrans:this.Currency.getValue(),isMRPJOBWORKOUT:isMRPJOBWORKOUT}});        
//                this.POStore.load({params:{id:this.Name.getValue(),exceptFlagINV:true,currencyfilterfortrans:this.Currency.getValue(),includingGSTFilter:((this.includingGST)?this.includingGST.getValue() : false)}});        
            }
            //this.POStore.proxy.conn.url = this.isCustomer ? "ACCSalesOrderCMN/getSalesOrders.do" : "ACCPurchaseOrderCMN/getPurchaseOrders.do";
           //this.POStore.load({params:{id:this.Name.getValue(),exceptFlagINV:true}});            
            this.PO.enable();
            if(this.partialInvoiceCmb){
                this.partialInvoiceCmb.disable();
                this.partialInvAmount.reset();
                this.partialInvAmount.disable();
                var id=this.Grid.getId();
                var rowindex=this.Grid.getColumnModel().findColumnIndex("partamount");
                if(rowindex!=-1){
                    this.Grid.getColumnModel().setHidden( rowindex,true) ;
                }
            }
            this.includingGST.enable();
        }
        else if(rec.data['value']==1){     // 1 for Delivery   
            this.isFromGrORDO=true;
            this.Grid.isFromGrORDO=true;
            this.PO.multiSelect=true;
            this.isMultiSelectFlag=true;
            this.PO.removeListener("select",this.populateData,this);
            this.PO.addListener("blur",this.populateData,this);                
            this.fromLinkCombo.setValue(1);
            this.autoGenerateDO.setValue(false);
            this.autoGenerateDO.disable();            
            this.POStore.proxy.conn.url = this.isCustomer ? "ACCInvoiceCMN/getDeliveryOrdersMerged.do" : "ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
            // isUnInvoiced:true beacuse of this three issue produces so removing this flag
           /*
            isJobWorkOutGRO will be passed as true in case of call from job work out invoice to load only job work out goods receipt moduleid for vendor invoice and jobworkoutinvoice are same=6
             */
            var isJobWorkOutGRO=(this.isJobWorkoutInvoice!=undefined && this.isJobWorkoutInvoice!= null && this.isJobWorkoutInvoice && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId)?true:false;
            this.POStore.load({params:{id:this.Name.getValue(),nondeleted:true, currencyfilterfortrans:this.Currency.getValue(),linkFlag:true,dropDownData:true,isJobWorkOutGRO:isJobWorkOutGRO}});     // : truePassing param "currencyfilterfortrans" for populating DO in CI as per their currency.
            this.PO.enable(); 
            if(this.partialInvoiceCmb){
                this.partialInvoiceCmb.disable();
                this.partialInvAmount.disable();
                var id=this.Grid.getId();
                var rowindex=this.Grid.getColumnModel().findColumnIndex("partamount");
                this.Grid.getColumnModel().setHidden( rowindex,true) ;
            }
            this.includingGST.disable();
        } else if(rec.data['value']==2){ //2 for Quotation                        
            this.PO.multiSelect=true;
            this.isMultiSelectFlag=true;
            this.autoGenerateDO.enable();
            this.PO.removeListener("select",this.populateData,this);
            this.PO.addListener("blur",this.populateData,this);                            
            this.fromLinkCombo.setValue(2);
            this.POStore.proxy.conn.url = this.isCustomer ?(this.isVersion?"ACCSalesOrderCMN/getVersionQuotations.do":"ACCSalesOrderCMN/getQuotations.do" ): (this.isVersion?"ACCPurchaseOrderCMN/getVersionQuotations.do":"ACCPurchaseOrderCMN/getQuotations.do");
//            this.POStore.load({params:{id:this.Name.getValue(),currencyid:this.Currency.getValue(),validflag:true,billdate:WtfGlobal.convertToGenericDate(this.billDate.getValue()),nondeleted:true}});        

            if(this.isCustomer){
                if(this.moduleid == Wtf.Acc_Sales_Order_ModuleId){
                    this.POStore.load({// done by hitesh need to check it
                        params:{
                            newcustomerid:this.Name.getValue(),
                            sopolinkflag:true,
                            linkFlagInSO:true,
                            currencyid:this.Currency.getValue(),
                            validflag:true,
                            billdate:WtfGlobal.convertToGenericDate(this.billDate.getValue()),
                            nondeleted:true
                        }
                    });
                }else{
                    this.POStore.load({params:{newcustomerid:this.Name.getValue(),linkFlagInInv:true,currencyid:this.Currency.getValue(),validflag:true,billdate:WtfGlobal.convertToGenericDate(this.billDate.getValue()),nondeleted:true}});        
                }
              
            }else{
              if(this.moduleid == Wtf.Acc_Purchase_Order_ModuleId){
                  this.POStore.load({params:{newvendorid:this.Name.getValue(),sopolinkflag:true,linkFlagInPO:true,currencyid:this.Currency.getValue(),validflag:true,billdate:WtfGlobal.convertToGenericDate(this.billDate.getValue()),nondeleted:true}});        
              }else{
                this.POStore.load({params:{newvendorid:this.Name.getValue(),linkFlagInGR:true,currencyid:this.Currency.getValue(),validflag:true,billdate:WtfGlobal.convertToGenericDate(this.billDate.getValue()),nondeleted:true}});        
              }
            }
            this.PO.enable();
            this.includingGST.enable();
        } else if(rec.data['value']==3){// If selecting replacement number
            
            // uncheck Is Maintenance combo in case of replacement
            
            if(this.isMaintenanceOrderCheckBox && this.isMaintenanceOrderCheckBox.getValue()){
                this.isMaintenanceOrderCheckBox.setValue(false);
            }
            
            
            this.PO.multiSelect=false;
            this.isMultiSelectFlag=false;
            this.PO.addListener("select",this.populateData,this);
            this.PO.removeListener("blur",this.populateData,this);

            this.POStore.proxy.conn.url = "ACCSalesOrderCMN/getReplacementRequests.do";

            this.POStore.load({
                params:{
                    id:this.Name.getValue(),
                    currencyid:this.Currency.getValue(),
                    validflag:true,
                    billdate:WtfGlobal.convertToGenericDate(this.billDate.getValue()),
                    isNormalContract:true
                }
            });
            this.PO.enable();
        } else if (rec.data['value']==5){  // For Linking Purchase Requisition in VQ
            this.PO.multiSelect=true;
            this.isMultiSelectFlag=true;
            this.PO.removeListener("select",this.populateData,this);
            this.PO.addListener("blur",this.populateData,this);                
            this.fromLinkCombo.setValue(5);
            this.POStore.proxy.conn.url = "ACCPurchaseOrderCMN/getRequisitions.do";
            this.POStore.load({
                params: {
                    currencyfilterfortrans:this.Currency.getValue(),
                    nondeleted : true,
                    onlyApprovedRecords :true,
                    prvqlinkflag:this.moduleid==Wtf.Acc_Vendor_Quotation_ModuleId?true:false,
                    prpolinkflag:this.moduleid==Wtf.Acc_Purchase_Order_ModuleId?true:false
                }
            });
            this.PO.enable();
            this.fromPO.enable();
        } else if (rec.data['value'] == 6) {  // For Linking RFQ in VQ
            this.PO.multiSelect = true;
            this.isMultiSelectFlag = true;
            this.PO.removeListener("select", this.populateData, this);
            this.PO.addListener("blur", this.populateData, this);
            this.fromLinkCombo.setValue(6);
            this.POStore.proxy.conn.url = "ACCPurchaseOrderCMN/getRFQs.do";
            this.POStore.load({
                params: {
                    currencyfilterfortrans: this.Currency.getValue(),
                    nondeleted: true,
                    onlyApprovedRecords: true,
                    rfqlinkflag: true,
                    newvendorid:this.Name.getValue()
                }
            });
            this.PO.enable();
            this.fromPO.enable();
        } else if (rec.data['value'] == 10) {  // For Master Contract
            this.isMultiSelectFlag = false;
            this.PO.removeListener("select", this.populateData, this);
            this.PO.addListener("blur", this.populateData, this);
            this.fromLinkCombo.setValue(10);
            this.POStore.proxy.conn.url = "ACCContractMaster/getMasterContracts.do";
            this.POStore.load({
                params: {
                    currencyfilterfortrans: this.Currency.getValue(),
                    nondeleted: true,
                    onlyApprovedRecords: true,
                    rfqlinkflag: true
                }
            });
            this.PO.enable();
            this.fromPO.enable();
        
        
        } else if (rec.data['value'] == 13) {  // For Master Contract
            this.isMultiSelectFlag = false;
            this.PO.removeListener("select", this.populateData, this);
            this.PO.addListener("blur", this.populateData, this);
            this.fromLinkCombo.setValue(13);
            this.POStore.proxy.conn.url = "ACCGoodsReceiptCMN/getGoodsReceipts.do";
            this.POStore.load({
                params: {
                    currencyfilterfortrans: this.Currency.getValue(),
                    nondeleted: true,
                    onlyMRPJOBWORKIN:true,
                    onlyApprovedRecords: true,
                    rfqlinkflag: true
                }
            });
            this.PO.enable();
            this.fromPO.enable();
        }
        /*
         * Disable linking combo while generating Sales/Purchase Invoice from Sales/Purchase Order
         */
        if(this.invoicefromorder){
            this.fromLinkCombo.disable();
            this.PO.disable();
        }
    },
    
    enablePO:function(c,rec){
        this.singleLink = false;
        this.autoGenerateDO.enable();
        if(rec.data['value']==true){// when Link selected as Yes
            if(!this.isEdit&&!this.copyInv){// when create new case
                /**
                 *In select template drop down,when user select None the this.GridPanel && this.ExpenseGrid are not available so checked they are undefined or not.SDP-13323
                 */
                if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId && this.GridPanel && this.ExpenseGrid) {// when purchase order module
                     this.GridPanel.setActiveTab(this.ProductGrid);
                     this.ExpenseGrid.disable();

                } 
            }
            
             if (this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId) {//While Linking VQ->CQ
                this.crossLinkingFlag = true;

            }
            
            if(!(this.isCustBill || (this.isOrder&&this.isCustomer)  ||this.cash)){
                this.fromLinkCombo.enable();
            }else{
                if (!this.isCustBill && this.isOrder && this.isCustomer && this.quotation) { // loading vendor Quotations in Customer Quotations
                    this.POStore.load({params: {validflag: true, isVQLinkInCQ: true, billdate: WtfGlobal.convertToGenericDate(this.billDate.getValue())}});
                } else if(!this.isCustBill && this.isOrder && this.isCustomer && !this.quotation){// For Sales Order   //Giving Replacement Number Selection Option so POStore will not be load here
//                    this.POStore.load({
//                        params:{
//                            newcustomerid:this.Name.getValue(),
//                            currencyid:this.Currency.getValue(),
//                            validflag:true,
//                            billdate:WtfGlobal.convertToGenericDate(this.billDate.getValue())
//                        }
//                    });
                    this.fromLinkCombo.enable();
                }
                else if(!this.isCustomer && !this.isCustBill && this.isOrder) //loading for Sales Orders in Purchase Orders
                    this.POStore.load();    
                else                                                         //loading for so and po in CI and VI in With/Without inventory mode and but not in trading flow
                    this.POStore.load({params:{id:this.Name.getValue()}});                
                this.PO.enable();
            }                                                      
            this.fromOrder=true;
            if(!this.isCustBill && this.isOrder && this.isCustomer && !this.quotation){
                this.PO.multiSelect=true;
                this.isMultiSelectFlag=true;
                this.PO.removeListener("select",this.populateData,this);
                this.PO.addListener("blur",this.populateData,this);                            
            }else if(this.isCustBill && !this.isOrder && !this.quotation){// this.isCustBill ||this.isCustomer
                this.PO.multiSelect=true;
                this.isMultiSelectFlag=true;
                this.PO.removeListener("select",this.populateData,this);
                this.PO.addListener("blur",this.populateData,this);     
            } else {

                this.PO.multiSelect = true;
                this.isMultiSelectFlag = true;
                this.PO.removeListener("select", this.populateData, this);
                this.PO.addListener("blur", this.populateData, this);
            }                        
        } else{// when Link selected as No
            if(!this.isCustBill && !this.isOrder && !this.cash && this.isCustomer)
            { 
                this.fromLinkCombo.disable();
                this.PO.disable();
            }    
            this.loadStore();
           
            if (this.isdropshipDocument) {//Unchecking dropship check on changing linking value from Yes to No
                this.isdropshipDocument.setValue(false);
            }
            
            if(!this.isEdit&&!this.copyInv && this.isExpenseInv){// Create New case when Expense grid already is selected in UI
                if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId || this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId){
                    this.ExpenseGrid.enable();
                }
            }
  
            this.setDate();
            
            if(this.partialInvoiceCmb){
                this.partialInvoiceCmb.disable();
                this.partialInvAmount.disable();
                var id=this.Grid.getId();
                var rowindex=this.Grid.getColumnModel().findColumnIndex("partamount");
                this.Grid.getColumnModel().setHidden( rowindex,true) ;
            }
            if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId){
                this.explodeLinkAP.setValue(false);
                this.explodeLinkAP.disable();
            }
            
            if (this.moduleid == Wtf.Acc_Purchase_Order_ModuleId || this.moduleid == Wtf.Acc_Sales_Order_ModuleId) {
                this.blockSOPO.setValue(false);
                this.blockSOPO.disable();
                WtfGlobal.hideFormElement(this.blockSOPO);
            }
        }
        this.currencyStore.load(); 	       // Currency id issue 20018
    },
    enabletax:function(c,rec){
        if(rec.data['value']==true){
            this.Tax.enable();   
            this.includingGST.setValue(false);
            this.includingGST.disable();
            this.includeProTax.setValue(false);
            this.includeProTax.disable();
        }else{
            this.Tax.disable();
            this.Tax.setValue("");
            this.includingGST.enable();
            this.includeProTax.enable();
        }
        /*If rec.data['value'] = True means Hidden False
        *If rec.data['value'] = False means Hidden True
        *This function written in CommonERPComponent.js
        */
        this.HideShowLinkedTermTaxAndTermTaxAmountCol(rec.data['value']);
        this.setSingleMappedTaxToInvoiceTerm(rec.data['value']);
        if(rec.data['value']==false){
            this.resetLinkedTaxNameAndTermTaxAmount(rec.data['value']);
        }
        this.updateSubtotal();
    },
    /*
     * This method is called For Project Status Report- For PM-Accounting Integration
     */
    setPOLinks:function(){
        this.fromPO.enable();
        this.fromPO.setValue(true); 
        this.fromLinkCombo.enable();
        this.fromLinkCombo.setValue(0);
        this.PO.enable()
//        this.POStore.on('load', function(){
//            alert('kk');
//        if(this.isFromProjectStatusRep){
//            if(this.SOLinkedArr.length>0){
//                this.PO.setValue(this.SOLinkedArr);
//            }
//        this.populateData("","");
//        }
//        },this);
        this.POStore.load(); 
        
    },
    /*
     * SDP-13923
     * This function has been used to check whether user has changed sequence format in Edit case of draft.
     * If user changes the sequence format from "NA" to Auto-Sequence Format then 'this.isSequenceFormatChangedInEdit' flag will be true and this flag has used on java side.
     */
    sequenceFormatChanged : function(combo, newval, oldval) {
        if (this.isEdit && (this.isDraft||this.record.data.isDraft) && (this.moduleid===Wtf.Acc_Invoice_ModuleId || this.moduleid===Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid === Wtf.Acc_Sales_Order_ModuleId || this.moduleid==Wtf.Acc_Customer_Quotation_ModuleId || this.moduleid===Wtf.Acc_Purchase_Order_ModuleId)){
            if (oldval != newval && newval != "NA") {
                this.isSequenceFormatChangedInEdit = true;
                this.isAutoSeqForEmptyDraft = true;
                this.getNextSequenceNumber(combo);
            } else {
                this.isSequenceFormatChangedInEdit = false;
            }
        }        
    },
    
    loadExplodedAssemblyProduct:function(obj,newval,oldval){
        if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId && this.fromLinkCombo.getValue() == 0 && this.PO != undefined && this.PO.getValue()!=""){//case when SO linked in PO and some transaction is linked
        var msg="";
        if(newval){//when check box checked as true
            msg=WtfGlobal.getLocaleText("acc.invoiceform.billofmaterialswillloaded");
        } else {//when checkbox checked as false
            msg=WtfGlobal.getLocaleText("acc.invoiceform.productwillloadedasitis");
        }
        
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),msg , function (btn) {
            if (btn == "yes") {
                var callFromExplodeAP=true;
                this.populateGridData(null,"",callFromExplodeAP);
            } else {
               this.explodeLinkAP.setValue(oldval);
               return;
            }
        }, this);
        }
    },
    populateData:function(c,rec) {//since populateData Method called on event, so we can not add parameter to it. hence here another method called in which we can add params
          var callFromExplodeAP=false;
        this.populateGridData(c,rec,callFromExplodeAP);
    },
    populateGridData:function(c,rec,callFromExplodeAP) {
        this.singleLink = false;
        if(this.PO.getValue()!=""){
            if (Wtf.account.companyAccountPref.enableLinkToSelWin && (this.moduleid === Wtf.Acc_Sales_Order_ModuleId || this.moduleid===Wtf.Acc_Invoice_ModuleId || this.moduleid===Wtf.Acc_Purchase_Order_ModuleId|| this.moduleid===Wtf.Acc_Vendor_Invoice_ModuleId)) {
                var billid = this.PO.getValue();
                if (billid.indexOf("-1") != -1) {
                var selectedValuesArr = billid.split(',');
                    var arr = [];
                    for (var cnt = 0; cnt < selectedValuesArr.length; cnt++) {
                        if (selectedValuesArr[cnt] != "-1") {
                            arr.push(selectedValuesArr[cnt]);
                        }
                    }
                    this.PO.setValue(arr);
                    var url = "";
                    if(this.isInvoice){
                        if(this.fromLinkCombo.getValue() == 0 ){
                            url = this.isCustomer ? "ACCSalesOrderCMN/getSalesOrders.do" : "ACCPurchaseOrderCMN/getPurchaseOrders.do"; 

                        }else if(this.fromLinkCombo.getValue() == 1 ){
                            url =this.isCustomer ? "ACCInvoiceCMN/getDeliveryOrdersMerged.do" : "ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";

                        }else if(this.fromLinkCombo.getValue() == 2){
                            url =this.isCustomer ?(this.isVersion?"ACCSalesOrderCMN/getVersionQuotations.do":"ACCSalesOrderCMN/getQuotations.do" ): (this.isVersion?"ACCPurchaseOrderCMN/getVersionQuotations.do":"ACCPurchaseOrderCMN/getQuotations.do"); 

                        }  
                    }else if(this.isOrder){
                        if(this.fromLinkCombo.getValue() == 5){
                            url = "ACCPurchaseOrderCMN/getRequisitions.do"; 
                        } else if (this.fromLinkCombo.getValue() == 6) {
                            url = "ACCPurchaseOrderCMN/getRFQs.do";
                        } else if ((this.fromLinkCombo.getValue() == 4 || this.fromLinkCombo.getValue() == 0)) {
                            url = this.isCustomer ? "ACCPurchaseOrderCMN/getPurchaseOrders.do" : "ACCSalesOrderCMN/getSalesOrders.do";
                        }else if(this.fromLinkCombo.getValue() == 2){
                            url =this.isCustomer ?(this.isVersion?"ACCSalesOrderCMN/getVersionQuotations.do":"ACCSalesOrderCMN/getQuotations.do" ): (this.isVersion?"ACCPurchaseOrderCMN/getVersionQuotations.do":"ACCPurchaseOrderCMN/getQuotations.do");

                        }
                    }
                    this.showPONumbersGrid(url);
                }
            }
            if(this.moduleid===Wtf.Acc_Vendor_Invoice_ModuleId && this.fromLinkCombo.getValue()==0){//when PO get linked in Purchase Invoice
                this.loadPurchaseOrderLinkedDataInPurchaseInvoice(c,rec,callFromExplodeAP)
            } else {
                this.populateGridDataAfterValidation(c,rec,callFromExplodeAP);
            }                
        }
    },
    
    loadPurchaseOrderLinkedDataInPurchaseInvoice:function(c,rec,callFromExplodeAP){
        var noOfInventoryPO=0;
        var noOfExpensePO=0;
        var invenotyPONumber="";
        var expensePONumber="";
        var selectedids=this.PO.getValue();
        var selectedValuesArr = selectedids.split(',');
        for(var cnt=0;cnt<selectedValuesArr.length;cnt++){
            var record=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cnt]));
            if(record.data["isexpenseinv"]){
                noOfExpensePO++;
                expensePONumber=(expensePONumber=="")?record.data["billno"]: (expensePONumber+","+record.data["billno"]);
            } else{
                noOfInventoryPO++;
                invenotyPONumber=(invenotyPONumber=="")?record.data["billno"]: (invenotyPONumber+","+record.data["billno"]);
            }
        }

        if(selectedValuesArr.length==noOfExpensePO && !this.isExpenseInv){// All Selected PO are expense PO but tab is Invenotry. In this case asked user for confirmation whether he wants to switch tab or not 
            this.giveAlertOnTabChange=false;
            this.GridPanel.setActiveTab(this.ExpenseGrid);
            this.populateGridDataAfterValidation(c,rec,callFromExplodeAP);
        } else if(selectedValuesArr.length==noOfInventoryPO && this.isExpenseInv){// All Selected PO are inventory type, but tab is Expense. In this case asked user for confirmation whether he wants to switch tab or not 
            this.giveAlertOnTabChange=false;
            this.GridPanel.setActiveTab(this.ProductGrid);
            this.populateGridDataAfterValidation(c,rec,callFromExplodeAP);
        } else if(noOfInventoryPO<selectedValuesArr.length && noOfExpensePO<selectedValuesArr.length){//there are mixed POs selected. in this case we do not allow user to select and given alert
            if(this.isExpenseInv){//When grid is Expense grid
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.linkedponumbers")+" "+invenotyPONumber+" "+WtfGlobal.getLocaleText("acc.invoice.linkedponumbersareinventorypo")], 2);                        
            } else {//When grid is Inventory grid
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.linkedponumbers")+" "+expensePONumber+" "+WtfGlobal.getLocaleText("acc.invoice.linkedponumbersareexpenseypo")], 2);                        
            }
            this.PO.clearValue();
            return;
        } else {
            this.populateGridDataAfterValidation(c,rec,callFromExplodeAP);
        }
    },
    
    populateGridDataAfterValidation:function(c,rec,callFromExplodeAP){
        var billid=this.PO.getValue();
        this.clearComponentValues();
        this.Grid.fromPO=true;  
        var productid="";
        if(this.isMultiSelectFlag){ //For MultiSelection 
            var selectedids=this.PO.getValue();
            var selectedValuesArr = selectedids.split(',');
            var crosslink=false;
            if((WtfGlobal.getModuleId(this)==18 || WtfGlobal.getModuleId(this) == Wtf.Acc_Sales_Order_ModuleId) && this.fromLinkCombo.getValue()==0){//if salesorder is linked into purchaseorder 
                //     (this.getModuleId()==20 && this.fromLinkCombo.getValue()==0)//this check is basically for linking po in so case-Generate SO case.It has to be further implemented.
                crosslink=true;
            }
            if ((WtfGlobal.getModuleId(this) == Wtf.Acc_Sales_Order_ModuleId) && this.fromLinkCombo.getValue() == 4) {//if salesorder is linked into purchaseorder 
                crosslink = true;
            } 
            if (WtfGlobal.getModuleId(this) == 22) { // VQ link in CQ
                crosslink = true;
            }
            
            /*---Set value of Is Dropship check box here after selecting document which to be linked----  */
            if(selectedValuesArr.length==1){  // Load value of Include product tax according to PO
                rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[0]));
                var isapplytaxtoterms = (rec.data["isapplytaxtoterms"] != undefined && rec.data["isapplytaxtoterms"]!="")?rec.data["isapplytaxtoterms"]:false;
//                if (rec != undefined) {
//                    /*
//                    *	ERM-1037
//                    *	Send id of linked document to function to restrict linking of future dated document
//                    */
////                    //var isFutureDatedDocumentLinked=WtfGlobal.checkForFutureDate(this, selectedValuesArr);
////                    
////                    if(isFutureDatedDocumentLinked){
////                        return;
////                    }
//                }
                if(rec.data["productid"] != undefined){
                    productid=rec.data["productid"];
                }
                /**
                 * Set select docuement merchant Exporter type in linking case
                 */
                if(WtfGlobal.isIndiaCountryAndGSTApplied()){
                    if(rec.data['isMerchantExporter']){ // Set Is Merchant Exprot
                        this.isMerchantExporter.setValue(true);
                    }else{
                        this.isMerchantExporter.setValue(false);
                    }
                }
                if (rec!=undefined && rec.json.isdropshipchecked) {
                    this.isdropshipDocument.setValue(true);
                    this.isdropshipDocument.setDisabled(true);
                }else{
                  this.isdropshipDocument.setValue(false);  
                }
                //we can not fetch address when crosslined and when linking Purchase Req in vendor quotation. because Purchase requisition does not have any address.
                if (!crosslink && WtfGlobal.getModuleId(this)!=Wtf.Acc_Vendor_Quotation_ModuleId && !(this.moduleid === Wtf.Acc_Purchase_Order_ModuleId && this.fromLinkCombo.getValue()==5)) {
                    this.linkRecord = this.POStore.getAt(this.POStore.find('billid', selectedValuesArr[0]));
                    this.singleLink = true;
                }else if(this.moduleid === Wtf.Acc_Purchase_Order_ModuleId && this.fromLinkCombo.getValue()==0 && Wtf.account.companyAccountPref.isCustShipAddressInPurchase){
                    /*
                     * when PO created from SO then get Record of selected record from main store
                     */
                    this.linkRecord = this.POStore.getAt(this.POStore.find('billid', selectedValuesArr[0]));
                    this.singleLink = true;
                }else if(crosslink && this.moduleid === Wtf.Acc_Purchase_Order_ModuleId && this.fromLinkCombo.getValue()==0 && Wtf.account.companyAccountPref.columnPref.activatedropship){
                    /*
                     * when PO is being created from SO then get Record of SO
                     */
                    this.linkRecord = this.POStore.getAt(this.POStore.find('billid', selectedValuesArr[0]));
                    this.singleLink = true;
                }
                if(rec.data["includeprotax"]){
                    this.includeProTax.setValue(true);
                    this.includeProTax.enable();
                    if(rec.data["gstIncluded"]){
                        this.includingGST.setValue(true);
                    }else{ 
                        this.includingGST.setValue(false); 
                    }
                    this.includingGST.enable();
                    this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                    this.applyTaxToTermsChk.setValue(isapplytaxtoterms);
                    this.showGridTax(null,null,false);
                    this.isTaxable.setValue(false);//when selecting record with product tax.Tax should get disabled.
                    this.isTaxable.disable();
                    this.Tax.setValue("");
                    this.Tax.disable();
                    
                    /*----If "Map Taxes at product level" check is ON from system preferences 
                     * For malaysian company then we show Line level tax
                     * at the time of linking documents if parent documents is created with line level Tax
                     ----------*/
                    if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {//and also check record data is mapped with product level taxes but how here (for normal transaction created with line level taxes)
                        this.Tax.hide();
                        WtfGlobal.hideFormLabel(this.Tax);
                        this.isTaxable.hide();
                        WtfGlobal.hideFormLabel(this.isTaxable);
                    }
                    
                    if(crosslink && !callFromExplodeAP) {           //ERP-13836
                        WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.alert'),WtfGlobal.getLocaleText('acc.invoiceform.linkTax')],2);
                    }
                    
                }else{
                    this.includeProTax.setValue(false);
                    this.applyTaxToTermsChkHideShow(false);
                    this.showGridTax(null, null, true);
                    this.Tax.enable();//required because when selected multiple records & changing to select single record.Before it was getting disabled.
                    this.isTaxable.enable();
                    
                    /*----If "Map Taxes at product level" check is ON from system preferences 
                     * For malaysian company then we show Global level tax
                     * at the time of linking documents if parent documents is created with global level Tax
                     ----------*/
                    if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                        this.Tax.show();
                        WtfGlobal.showLabel(this.Tax);
                        this.isTaxable.show();
                        WtfGlobal.showLabel(this.isTaxable);
                    }
                }
                if (this.fromLinkCombo.getValue() !== 2 && ((!this.isCustomer && crosslink) ? this.fromLinkCombo.getValue() == 0 : this.fromLinkCombo.getValue() !== 0)) {
                    if (rec.data["taxid"] != "" && rec.data["taxid"] != undefined && rec.data["taxid"] != "None") { //checks for invoice level tax 
                        this.Tax.setValue(rec.data.taxid);
                        this.isTaxable.enable();
                        this.Tax.enable();//enable the tax when taxid is present-for edit case it was not required but for copy its is required.
                        this.isTaxable.setValue(true);
                        if (this.isTaxable.getValue()) {    //disabling including gst check when global level tax is applied ERP-32672
                            this.includingGST.setValue(false);
                            this.includingGST.disable();
                            this.includeProTax.setValue(false);
                            this.includeProTax.disable();
                        }
                        this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
                    }
                }
                
                var rowRateIncludingGstAmountIndex=-1;
                if(this.isExpenseInv){
                    rowRateIncludingGstAmountIndex=this.Grid.getColumnModel().findColumnIndex("rateIncludingGstEx");
                } else{
                    rowRateIncludingGstAmountIndex=this.Grid.getColumnModel().findColumnIndex("rateIncludingGst");
                }
                if(rowRateIncludingGstAmountIndex!=-1){
                    if (rec.data["gstIncluded"]&&!this.includingGST.getValue()){
                        this.includingGST.setValue(true);
                        this.includeProTax.setValue(true);   //disabling product level tax combo when including GST is applied while linking other document ERP-32672
                        this.includeProTax.disable();   //disabling product level tax combo when including GST is applied while linking other document ERP-32672
                        this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,false);
                    }else if(!rec.data["gstIncluded"]&&this.includingGST.getValue()){
                        this.includingGST.setValue(false);
                        this.includeProTax.setValue(false);
                        this.includeProTax.enable();    //enabling product level tax combo when including GST is not applied linking other document ERP-32672
                        this.Grid.getColumnModel().setHidden(rowRateIncludingGstAmountIndex,true);
                    }                        
                }
                

                if(rec.data["customerporefno"]){//    ERP-9886
                    this.CustomerPORefNo.setValue(rec.data["customerporefno"]);
                //                     this.PORefNo.setValue(rec.data["customerporefno"]);
                }else {
                    this.CustomerPORefNo.setValue("");
                //                     this.PORefNo.setValue("");
                }

                if(this.IsInvoiceTerm) {
                    this.setTermValues(rec.data.termdetails);
                }
                var linkedRecordExternalCurrencyRate=rec.data["externalcurrencyrate"];
                if (this.Currency.getValue()!=WtfGlobal.getCurrencyID && linkedRecordExternalCurrencyRate!="" && linkedRecordExternalCurrencyRate!=undefined && crosslink != true) { // If selected currency is foreign currency then currency exchange rate will be exchange rate of linked document except in cross link case
                    this.externalcurrencyrate=linkedRecordExternalCurrencyRate;
                }
                /*
                 * If single select then 'isSelectedMultiRecord' make false
                 */
                if (this.moduleid === Wtf.Acc_Purchase_Order_ModuleId && Wtf.account.companyAccountPref.isCustShipAddressInPurchase) {
                   this.isSelectedMultiRecord=false;
                }
                
            }else if(selectedValuesArr.length>1){

                var productLevelTax=false;  
                var isGSTTax=false;
                var isInvoiceLevelTax=false;
                var withoutTax=false;
                this.previusTaxId="";
                var isInvoiceTaxDiff=false;
                var invoiceLevelTaxRecords=0;
                var reccustomerporefno='';
                var isAnyDropshipDocumentselected=false;
                var isAnyNonDropshipDocumentselected=false;
                for(var cnt=0;cnt<selectedValuesArr.length;cnt++){
                    rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cnt]));
                    
                    /* --Select Only dropship SO/Normal SO , otherwise give alert prompt----- */

                    if (rec != undefined && rec.json != undefined && rec.json.isdropshipchecked) {
                        this.isdropshipDocument.setValue(true);
                        this.isdropshipDocument.setDisabled(true);
                        isAnyDropshipDocumentselected = true;
                    } else {
                        if (isAnyDropshipDocumentselected) {
                            isAnyNonDropshipDocumentselected = true;
                            this.isdropshipDocument.setValue(false);
                            this.isdropshipDocument.setDisabled(true);
                            this.PO.setValue("");
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.promptMultipleDropshipAndNormalDoc")], 2);
                            return;
                        }
                        isAnyNonDropshipDocumentselected = true;
                    }

                    if (isAnyDropshipDocumentselected && isAnyNonDropshipDocumentselected) {
                        this.isdropshipDocument.setValue(false);
                        this.isdropshipDocument.setDisabled(true);
                        this.PO.setValue("");
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.promptMultipleDropshipAndNormalDoc")], 2);
                        return;
                    }
                    
                    
                    if(rec.data.contract!=undefined && rec.data.contract!=""){ // in case of multiple linking if linked transactions are containing different different contract ids or similar contract ids then we will not allow linking

                        var dataMsg = "";
                        if(this.moduleid == Wtf.Acc_Invoice_ModuleId){

                            if(this.fromLinkCombo.getValue() == 0){// linked from SO
                                dataMsg = WtfGlobal.getLocaleText("acc.linking.so.selection.msg");
                            } else if(this.fromLinkCombo.getValue() == 1){// linked from DO
                                dataMsg = WtfGlobal.getLocaleText("acc.linking.do.selection.msg");
                            }
                        }else if(this.moduleid == Wtf.Acc_Sales_Order_ModuleId){// for link with cq in case of so
                            dataMsg = WtfGlobal.getLocaleText("acc.alert.quotationtype");
                        }

                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),dataMsg], 2);
                        this.PO.clearValue();
                        return; 
                    }
                    if(rec.data["gstIncluded"]){ //checks for GST Tax
                        isGSTTax=true;
                    }else if(rec.data["includeprotax"]){ //checks for product level tax
                        productLevelTax=true;
                    }else if(rec.data["taxid"]!="" && rec.data["taxid"]!=undefined && rec.data["taxid"] != "None"){ //checks for invoice level tax 
                        isInvoiceLevelTax=true;                        
                        if(invoiceLevelTaxRecords!=0 && this.previusTaxId!=rec.data["taxid"]){
                            isInvoiceTaxDiff=true;
                        }
                        this.previusTaxId=rec.data["taxid"];
                        this.includeProTax.setValue(false);
                        this.showGridTax(null,null,true);//updating include product tax
                        invoiceLevelTaxRecords++;
                    }else{
                        withoutTax=true;//applicable for both no tax and diff tax
                    }
                    if(rec.data["customerporefno"]){   //    ERP-9886
                        if(reccustomerporefno!="")
                            reccustomerporefno+=','+rec.data["customerporefno"];
                        else
                            reccustomerporefno+=rec.data["customerporefno"]   
                    }else {
                        reccustomerporefno+='';
                    }
                                    /**
                     * If user select multiple link document 
                     * if cusrrent transaction is RCM Applicalble 
                     *  then All Link Document selected should be RCM Applicable
                     *  else if cusrrent transaction is Not RCM Applicalble 
                     *  then All Link Document selected should be Non RCM Applicable.
                     *  This condition is only for INDIA country
                     */
                    if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA) {
                        if(this.GTAApplicable.getValue()){
                            if(!rec.data['gtaapplicable']){
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.common.rcm.transaction.invalid.rcmapplicable")], 2);
                                this.PO.clearValue();
                                return ;
                            }
                        }else{
                            if(rec.data['gtaapplicable']){
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.common.rcm.transaction.invalid.rcmnotapplicable")], 2);
                                this.PO.clearValue();
                                return ;
                            }
                        }
                        /**
                         * if PR and RFQ linking with VQ and PO then no need to show alert
                         */
                        var isNotPR_RFQ_Linking = true;
                        if(!this.isCustomer && (this.moduleid==Wtf.Acc_Vendor_Quotation_ModuleId || 
                                 (this.moduleid==Wtf.Acc_Purchase_Order_ModuleId && this.fromLinkCombo.getValue()==5))){
                            isNotPR_RFQ_Linking = false;
                        }
                        if(isNotPR_RFQ_Linking){
                            if(this.isMerchantExporter.getValue()){
                                if(!rec.data['isMerchantExporter']){
                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.common.merchantexport.transaction.invalid.merchantexportapplicable")], 2);
                                    this.PO.clearValue();
                                    return ;
                                }
                            }else{
                                if(rec.data['isMerchantExporter']){
                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.common.merchantexport.transaction.invalid.notmerchantexportapplicable")], 2);
                                    this.PO.clearValue();
                                    return ;
                                }
                            }
                        }
                    }
                }
//                /*
//                *	ERM-1037
//                *	Send id of linked document to function to restrict linking of future dated document
//                */
//               // WtfGlobal.checkForFutureDate(this,selectedValuesArr);
                this.CustomerPORefNo.setValue(reccustomerporefno);
                if(isGSTTax){ //case when any linked record have GST Tax
                    var includeGstCount=0;
                    var excludeGstCount=0;
                    var enableApplyTaxtoTermCount=0;
                    var disableApplyTaxtoTermCount=0;
                    for(var cntGst=0;cntGst<selectedValuesArr.length;cntGst++){
                        rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cntGst]));
                        if(rec.data["gstIncluded"]){
                            includeGstCount++;
                        }else if(!rec.data["gstIncluded"]){
                            excludeGstCount++;
                        }
                        /*Check all records have enable apply tax to terms or not*/
                        if(rec.data["isapplytaxtoterms"]){
                            enableApplyTaxtoTermCount++;
                        }else if(!rec.data["isapplytaxtoterms"]){
                            disableApplyTaxtoTermCount++;
                        }
                    }

                    if(!((selectedValuesArr.length==includeGstCount)||(selectedValuesArr.length==excludeGstCount))){
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                        this.PO.clearValue();
                        return;
                    }else if(!((selectedValuesArr.length==enableApplyTaxtoTermCount) || (selectedValuesArr.length==disableApplyTaxtoTermCount))){
                        //pop up
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                        this.PO.clearValue();
                        return;
                    }else if((selectedValuesArr.length==enableApplyTaxtoTermCount || selectedValuesArr.length==disableApplyTaxtoTermCount) && !crosslink){
                        if(selectedValuesArr.length==includeGstCount){
                            this.includeProTax.setValue(true);
                            this.includeProTax.setDisabled(true);
                            this.includingGST.setValue(true);
                            this.includingGST.enable();
                            this.showGridTax(null,null,false);
                            this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                            if(selectedValuesArr.length==enableApplyTaxtoTermCount){
                                this.applyTaxToTermsChk.setValue(true); 
                            }else{
                                this.applyTaxToTermsChk.setValue(false);
                            }
                        }else if(selectedValuesArr.length==excludeGstCount){
                            this.includeProTax.setValue(false);
                            this.includingGST.setValue(false);
                            this.showGridTax(null,null,true);
                        }
                        //Check all linked documents have same taxes,percetage to invoice term and set Invoice term.
                        this.summarizeInvoiceTermAmount(selectedValuesArr);
                    }else{
                        if(selectedValuesArr.length==includeGstCount){
                            this.includeProTax.setValue(true);
                            this.includingGST.setValue(true);
                        }else if(selectedValuesArr.length==excludeGstCount){
                            this.includeProTax.setValue(false);
                            this.includingGST.setValue(false);
                        }
                    }
                }else if(productLevelTax){//case when any linked record have product tax without GST Tax
                    var enableApplyTaxtoTermCount=0;
                    var disableApplyTaxtoTermCount=0;
                    for(var cntGst=0;cntGst<selectedValuesArr.length;cntGst++){
                        rec=this.POStore.getAt(this.POStore.find('billid',selectedValuesArr[cntGst]));
                        /*Check all records have enable apply tax to terms or not*/
                        if(rec.data["isapplytaxtoterms"]){
                            enableApplyTaxtoTermCount++;
                        }else if(!rec.data["isapplytaxtoterms"]){
                            disableApplyTaxtoTermCount++;
                        }
                    }
                    if(isInvoiceLevelTax){
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                        this.PO.clearValue();
                        return;
                    }else if(!((selectedValuesArr.length==enableApplyTaxtoTermCount) || (selectedValuesArr.length==disableApplyTaxtoTermCount))){
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2);
                        this.PO.clearValue();
                        return;
                    }else if((selectedValuesArr.length==enableApplyTaxtoTermCount || selectedValuesArr.length==disableApplyTaxtoTermCount) && !crosslink){
                        this.includeProTax.setValue(true);
                        this.includingGST.setValue(false);
                        this.showGridTax(null,null,false);
                        this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                        this.isTaxable.setValue(false);//when selcting record with product tax.Tax should get disabled.
                        this.isTaxable.disable();
                        this.Tax.setValue("");
                        this.Tax.disable();
                        if(selectedValuesArr.length==enableApplyTaxtoTermCount){
                            this.applyTaxToTermsChk.setValue(true); 
                        }else{
                            this.applyTaxToTermsChk.setValue(false);
                        }
                        //Check all linked documents have same taxes,percetage to invoice term and set Invoice term.
                        this.summarizeInvoiceTermAmount(selectedValuesArr);
                    }else{//no tax and producttax
                        this.includeProTax.setValue(true);
                        this.showGridTax(null,null,false); 
                        this.isTaxable.setValue(false);//when selcting record with product tax.Tax should get disabled.
                        this.isTaxable.disable();
                        this.Tax.setValue("");
                        this.Tax.disable();
                    }                   
                }else if(isInvoiceLevelTax && !crosslink){
                    if(withoutTax || isInvoiceTaxDiff){//for different tax and empty tax
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.aleartmsg.for.all.linking")], 2); 
                        this.PO.clearValue();
                        return;
                    }else{
//                        if(this.fromLinkCombo.getValue()!==2 && ((!this.isCustomer && crosslink)?this.fromLinkCombo.getValue()==0:this.fromLinkCombo.getValue()!==0)){
//                            WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.alert'),WtfGlobal.getLocaleText('acc.invoiceform.linkTax')],2);  
//                        }
                     
                        this.Tax.enable();
                        this.isTaxable.enable();
                        this.isTaxable.setValue(true);
                        this.Tax.setValue(this.previusTaxId); 
                        this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
                        this.summarizeInvoiceTermAmount(selectedValuesArr);
                    }
                    this.includingGST.setValue(false);
                    this.includingGST.disable();
                    this.includeProTax.setValue(false);
                    this.includeProTax.setDisabled(true);
                    this.showGridTax(null,null,true);
                }else {//for goodsreceiptorder and deliveryorder
                    this.Tax.disable();
                    this.isTaxable.enable();
                    this.isTaxable.setValue(false);
                    this.Tax.setValue("");
                    this.includeProTax.setValue(false); //update include product tax
                    this.showGridTax(null,null,true);
                    this.summarizeInvoiceTermAmount(selectedValuesArr);
                }

                var isLinkedDocumentHaveSameER=true;           
                var linkedExternalRate=0;
                if(this.Currency.getValue()!=WtfGlobal.getCurrencyID){ // Foreign currency linking case. In this case we have to borrow Linked document Exchange Rate in current document.                  
                    for(var count=0;count<selectedValuesArr.length;count++){
                        var tempRec =WtfGlobal.searchRecord(this.POStore,selectedValuesArr[count],"billid");                        
                        if(count==0){
                            linkedExternalRate = tempRec.data["externalcurrencyrate"]; // taking externalcurrencyrate of first record and then comparing it with other records external currency rate
                        } else if(tempRec.data["externalcurrencyrate"]!=linkedExternalRate) {
                            isLinkedDocumentHaveSameER =false;  
                            break;
                        }
                    } 
                    if(isLinkedDocumentHaveSameER){ //if exchange rate same for all linked document then applying it for current record by assigning here 
                        this.externalcurrencyrate=linkedExternalRate;
                    } else { //if exchange rate different then reassigning exchange rate of that date and giving below information message 
                        var index=this.getCurrencySymbol();
                        var exchangeRate = this.currencyStore.getAt(index).data['exchangerate'];
                        this.externalcurrencyrate=exchangeRate;
                        var msg = WtfGlobal.getLocaleText("acc.invoiceform.exchangeratemessage1")+"<b> "+this.externalcurrencyrate+" </b>"+WtfGlobal.getLocaleText("acc.invoiceform.exchangeratemessage2");                        
                        WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.information'),msg],3);
                    }
                }
                /*
                 * In multiselect case set 'customeridforshippingaddress' blank because in this case we are not showing Customer shipping address section
                 */
                if (this.moduleid === Wtf.Acc_Purchase_Order_ModuleId && Wtf.account.companyAccountPref.isCustShipAddressInPurchase) {
                   this.isSelectedMultiRecord=true;
                }
            }

            if(crosslink){//if salesorder is linked into purchaseorder-cross module
                this.includeProTax.setValue(false);
                this.showGridTax(null,null,true);
                this.isTaxable.enable();
                this.isTaxable.setValue(false);
                this.Tax.disable();
                this.Tax.setValue("");
                this.updateData();
                if(this.fromLinkCombo.getValue()!==2 && ((!this.isCustomer && crosslink)?this.fromLinkCombo.getValue()==0:this.fromLinkCombo.getValue()!==0) && !callFromExplodeAP){
                    if (Wtf.account.companyAccountPref.carryForwardPriceForCrossLinking) {
                        if (this.isGST) {// Fo GST (INDIA and US)
                            this.showCrossLinkingMsgAlertForGST(WtfGlobal.getLocaleText('acc.compPref.allowCarryForwardUnitPriceForCrossLinking.alert'));
                        } else {
                            WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.alert'),WtfGlobal.getLocaleText('acc.invoiceform.linkTax')],2);  
                        }
                    } else {
                        if (this.isGST) {// Fo GST (INDIA and US)
                            this.showCrossLinkingMsgAlertForGST();
                        } else {
                            WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.alert'), WtfGlobal.getLocaleText('acc.invoiceform.linkTax')], 2);
                        }
                    }
                }
            }
            this.setValues(billid);//In MultiSelection if the user select only one
            rec=this.PO.getValue();
            selectedValuesArr = rec.split(',');
            if(selectedValuesArr.length==1){
                var record=this.POStore.getAt(this.POStore.find('billid',billid));
                if (record.data['termid'] != undefined && record.data['termid'] != "") {
                    this.Term.setValue(record.data['termid']);
                }
            if (this.users != null && this.users != undefined) {
                if(this.isCustomer){
                    if(record.data['salesPerson'] != undefined && record.data['salesPerson'] != ""){
                        this.users.setValForRemoteStore(record.data.salesPerson ,record.data.salespersonname,true);
                    //                            this.users.setValue(record.data['salesPerson']) 
                    }
                }else{
                        
                    if(record.data['agent'] != undefined && record.data['agent'] != ""){
                        //                            this.users.setValue(record.data['agent']);
                        this.users.setValForRemoteStore(record.data.agent ,record.data.agentname,true);
                    }
                }                         
            }
                /*
                 * Enable only while link with Sales Order
                 */
                if (this.moduleid == Wtf.Acc_Invoice_ModuleId && this.fromLinkCombo && this.fromLinkCombo.getValue() == 0) {
                    if (this.partialInvoiceCmb) {
                        this.partialInvoiceCmb.enable();
                        this.partialInvAmount.reset();
                    }
                }    
                this.tagsFieldset.resetCustomComponents();
                var fieldArr = this.POStore.fields.items;
                for(var fieldCnt=0; fieldCnt < fieldArr.length; fieldCnt++) {
                    var fieldN = fieldArr[fieldCnt];

                    if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id) && record.data[fieldN.name] !="") {
                        if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).getXType()=='datefield'){
                            Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(record.data[fieldN.name]);
                        }else if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).xtype=='fncombo' || Wtf.getCmp(fieldN.name+this.tagsFieldset.id).getXType()=='fncombo'){
                            var ComboValue=record.data[fieldN.name];
                            //                                var ComboValueID="";
                            //                                var recCustomCombo =WtfGlobal.searchRecord(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).store,ComboValue,"name");
                            if(ComboValue){
                                //                                    ComboValueID=recCustomCombo.data.id;
                                Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(ComboValue);
                                var  parent= Wtf.getCmp(fieldN.name+this.tagsFieldset.id).parentid;
                                var displayValue = record.json[fieldN.name+ "_linkValue"];
                                if(parent != undefined && displayValue != undefined && parent.length>0 ){
                                    if(displayValue){
                                        Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValForChildComboStore(ComboValue, displayValue); // create record and set value
                                    }
                                } 
                                var  childid= Wtf.getCmp(fieldN.name+this.tagsFieldset.id).childid;
                                if(childid.length>0){
                                    var childidArray=childid.split(",");
                                    for(var i=0;i<childidArray.length;i++){
                                        var currentBaseParams = Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.baseParams;
                                        currentBaseParams.parentid=ComboValue;
                                        Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.baseParams=currentBaseParams;
                                        Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.load();
                                    }
                                }
                            }
                        }else{
                            Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(record.data[fieldN.name]);
                        }
                        }
                    if(fieldN.name.indexOf("Custom_")==0){
                        var fieldname=fieldN.name.substring(7,fieldN.name.length);
                        if(Wtf.getCmp(fieldname+this.tagsFieldset.id) && record.data[fieldN.name] !="") {
                        if(Wtf.getCmp(fieldname+this.tagsFieldset.id).getXType()=='fieldset'){
                            var ComboValue=record.json[fieldN.name];
                            if(ComboValue!==undefined && ComboValue!==null && ComboValue!=""){
                                var ComboValueArrya=ComboValue.split(',');
                                var ComboValueID="";
                                var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray; 
                                for(var i=0 ;i < ComboValueArrya.length ; i++){
                                    for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
                                        if(checkListCheckBoxesArray[checkitemcnt].id.indexOf(ComboValueArrya[i]) != -1 )
                                            if (Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id) != undefined) {
                                                Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id).setValue(true);
                                            }
                                    } 
                                }
                            }
                        }else if(Wtf.getCmp(fieldname+this.tagsFieldset.id).getXType()=='select'){
                                var ComboValue=record.json[fieldN.name];
                                //                                    var ComboValueArrya=ComboValue.split(',');
                                //                                    var ComboValueID="";
                                //                                    for(var i=0 ;i < ComboValueArrya.length ; i++){
                                //                                        var recCustomCombo =WtfGlobal.searchRecord(Wtf.getCmp(fieldname+this.tagsFieldset.id).store,ComboValueArrya[i],"name");
                                //                                        ComboValueID+=recCustomCombo.data.id+","; 
                                //                                    }
                                //                                    if(ComboValueID.length > 1){
                                //                                        ComboValueID=ComboValueID.substring(0,ComboValueID.length - 1);
                                //                                    }
                                if(ComboValue!="" && ComboValue!=undefined)
                                    Wtf.getCmp(fieldname+this.tagsFieldset.id).setValue(ComboValue);
                            }

                        } else if (this.isModuleForAvalara && fieldname == Wtf.integration.avalaraExemptionCode && Wtf.getCmp(fieldN.name + this.tagsFieldset.id) && !record.data[fieldN.name]) {
                            /**
                             * Set value of exemption code dimension in case of Avalara Integration
                             */
                            Wtf.getCmp(fieldN.name + this.tagsFieldset.id).setValue("1234");//Set 'None' if no value is selected
                        }
                    }
                }
            }else{
                var index = this.personstore.find('accid',this.Name.getValue());
                if (index != -1) {
                    var storerec = this.personstore.getAt(index);
                    this.Term.setValue(storerec.data['termid']);
                }

                this.users.reset();
                if(this.partialInvoiceCmb){
                    this.partialInvoiceCmb.reset();
                    this.partialInvoiceCmb.disable();
                    this.partialInvAmount.reset();
                    this.partialInvAmount.disable();
                    var id=this.Grid.getId();
                    var rowindex=this.Grid.getColumnModel().findColumnIndex("partamount");
                    if(rowindex>=0){    
                        this.Grid.getColumnModel().setHidden( rowindex,true) ;
                    }
                }
                /**
                 * Set value of exemption code dimension in case of Avalara Integration
                 * Set 'None' if more than one transactions are linked
                 */
                if (this.isModuleForAvalara) {
                    var fieldArr = this.POStore.fields.items;
                    for (var fieldCnt = 0; fieldCnt < fieldArr.length; fieldCnt++) {
                        var fieldN = fieldArr[fieldCnt];
                        if (fieldN.name.indexOf("Custom_") == 0) {
                            var fieldname = fieldN.name.substring(7, fieldN.name.length);
                            if (fieldname == Wtf.integration.avalaraExemptionCode && Wtf.getCmp(fieldN.name + this.tagsFieldset.id)) {
                                Wtf.getCmp(fieldN.name + this.tagsFieldset.id).setValue("1234");
                            }
                        }
                    }
                }
            }
        }else{
            var record=this.POStore.getAt(this.POStore.find('billid',billid));
            //                this.linkRecord = this.POStore.getAt(this.POStore.find('billid',billid));
            //                this.singleLink = true;
            var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray;  //Reset Check List
            for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
                var checkfieldId = checkListCheckBoxesArray[checkitemcnt].id
                if (Wtf.getCmp(checkfieldId) != undefined) {
                    Wtf.getCmp(checkfieldId).reset();
                }
            } 
            var fieldArr = this.POStore.fields.items;
            for(var fieldCnt=0; fieldCnt < fieldArr.length; fieldCnt++) {
                var fieldN = fieldArr[fieldCnt];

                if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id) && record.data[fieldN.name] !="") {
                    if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).getXType()=='datefield'){
                        Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(record.data[fieldN.name]);
                    }else if(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).getXType()=='fncombo'){
                        var ComboValue=record.data[fieldN.name];
                        //                                var ComboValueID="";
                        //                                var recCustomCombo =WtfGlobal.searchRecord(Wtf.getCmp(fieldN.name+this.tagsFieldset.id).store,ComboValue,"name");
                        if(ComboValue){
                            //                                    ComboValueID=recCustomCombo.data.id;
                            Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(ComboValue);
                            var  childid= Wtf.getCmp(fieldN.name+this.tagsFieldset.id).childid;
                            if(childid.length>0){
                                var childidArray=childid.split(",");
                                for(var i=0;i<childidArray.length;i++){
                                    var currentBaseParams = Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.baseParams;
                                    currentBaseParams.parentid=ComboValue;
                                    Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.baseParams=currentBaseParams;
                                    Wtf.getCmp(childidArray[i]+this.tagsFieldset.id).store.load();
                                }
                            }  
                        }
                    }else{
                        Wtf.getCmp(fieldN.name+this.tagsFieldset.id).setValue(record.data[fieldN.name]);
                    }
                }
                if(fieldN.name.indexOf("Custom_") == 0){
                    var fieldname=fieldN.name.substring(7,fieldN.name.length);
                    if(Wtf.getCmp(fieldname+this.tagsFieldset.id) && record.data[fieldN.name] !="") {
                        if(Wtf.getCmp(fieldname+this.tagsFieldset.id).getXType()=='fieldset'){
                            var ComboValue=record.json[fieldN.name];
                            var ComboValueArrya=ComboValue.split(',');
                            var ComboValueID="";
                            var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray; 
                            for(var i=0 ;i < ComboValueArrya.length ; i++){
                                for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
                                    if(checkListCheckBoxesArray[checkitemcnt].id.indexOf(ComboValueArrya[i]) != -1 )
                                        if (Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id) != undefined) {
                                            Wtf.getCmp(checkListCheckBoxesArray[checkitemcnt].id).setValue(true);
                                        }
                                } 
                            }
                        }else if(Wtf.getCmp(fieldname+this.tagsFieldset.id).getXType()=='select'){
                            var ComboValue=record.json[fieldN.name];
                            //                                    var ComboValueArrya=ComboValue.split(',');
                            //                                    var ComboValueID="";
                            //                                    for(var i=0 ;i < ComboValueArrya.length ; i++){
                            //                                        var recCustomCombo =WtfGlobal.searchRecord(Wtf.getCmp(fieldname+this.tagsFieldset.id).store,ComboValueArrya[i],"name");
                            //                                        ComboValueID+=recCustomCombo.data.id+","; 
                            //                                    }
                            //                                    if(ComboValueID.length > 1){
                            //                                        ComboValueID=ComboValueID.substring(0,ComboValueID.length - 1);
                            //                                    }
                            if(ComboValue!="" && ComboValue!=undefined)
                                Wtf.getCmp(fieldname+this.tagsFieldset.id).setValue(ComboValue);
                        }

                    } else if (this.isModuleForAvalara && fieldname == Wtf.integration.avalaraExemptionCode && Wtf.getCmp(fieldN.name + this.tagsFieldset.id) && !record.data[fieldN.name]) {
                        /**
                         * Set value of exemption code dimension in case of Avalara Integration
                         */
                        Wtf.getCmp(fieldN.name + this.tagsFieldset.id).setValue("1234");//Set 'None' if no value is selected
                    }
                }
            }
            rec=this.POStore.getAt(this.POStore.find('billid',billid));

            // if(this.isOrder && this.isCustomer && !this.isCustBill){//Temporary check to hide/display product tax for order. Need to fix for Invoices also
            if(rec.data["includeprotax"]){
                this.includeProTax.setValue(true);

                this.isTaxable.setValue(false);
                this.isTaxable.disable();
                this.Tax.setValue("");
                this.Tax.disable();
                
                if(rec.data["gstIncluded"]){
                    this.includingGST.setValue(true);
                }
                this.applyTaxToTermsChk.getEl().up('.x-form-item').setDisplayed(true);
                this.applyTaxToTermsChk.setValue(rec.data["isapplytaxtoterms"]);

                this.showGridTax(null,null,false);
                WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.alert'),WtfGlobal.getLocaleText('acc.invoiceform.linkTax')],2);
            }else {
                this.includeProTax.setValue(false);
                this.isTaxable.reset();
                this.isTaxable.enable();
                this.showGridTax(null,null,true);
            }
            if (rec.data["gstIncluded"]&&!this.includingGST.getValue()){
                this.includingGST.setValue(true);
            }else if(!rec.data["gstIncluded"]&&this.includingGST.getValue()){
                this.includingGST.setValue(false);
            }
            //        } else {
            //            this.includeProTax.setValue(true);
            //            this.showGridTax(null,null,false);
            //        }
            if(!this.isCustBill && !this.isOrder && !this.cash && this.isCustomer){
                if(this.fromLinkCombo.getValue()==1){
                    this.includeProTax.setValue(false);
                    this.showGridTax(null,null,true);            
                }
            }
            this.SupplierInvoiceNo.setValue(rec.data['supplierinvoiceno']);
            this.importExportDeclarationNo.setValue(rec.data['importexportdeclarationno']);
            this.Memo.setValue(rec.data['memo']);
            if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA /*&& !this.isCustomer*/ && !this.isExciseTab && !this.isExpenseInv){
                if(rec.data['gtaapplicable']){//If Selected Vendor/Customer has GTA applicable, then by Default value will be populate.
                    this.GTAApplicable.setValue(true);
                }else{
                    this.GTAApplicable.setValue(false);
                }
                /**
                 * Set merchant exporter type in linking case
                 */
                if(rec.data['isMerchantExporter']){ // Set Is Merchant Exprot
                    this.isMerchantExporter.setValue(true);
                }else{
                    this.isMerchantExporter.setValue(false);
                }
            }
            
            /*For SATS*/
            if(SATSCOMPANY_ID==companyid){
                this.shipLength.setValue(rec.data['shiplengthval']);
                if(this.isEdit && rec.data['invoicetype']!=""){
                    this.invoiceType.setValue(rec.data['invoicetype']);  
                    if(rec.data['invoicetype']=='ff808081434d75f20143518438fe0006'){
                        this.Grid.calculatePercentage=true;
                    }
                } else{
                    this.invoiceType.setValue("ff808081434d75f201435182a6270002");
                }
            }
            /*********/
            this.shipDate.setValue(rec.data['shipdate']);
            this.validTillDate.setValue(rec.data['validdate']);
            if(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash) { // set value only in VI module
                this.invoiceList.setValue(rec.data['landedInvoiceID']);
            }
            if((this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash) || (this.moduleid == Wtf.Acc_Invoice_ModuleId && !this.cash)) {
                this.Term.setValue(rec.data['termid']);
            }
            this.postText=rec.data['posttext'];
            this.shipvia.setValue(rec.data['shipvia']);
            this.fob.setValue(rec.data['fob']);
//            if(this.users != null && this.users != undefined){
//                this.isCustomer ? this.users.setValue(rec.data['salesPerson']) : this.users.setValue(rec.data['agent']);
//            }
            //this.Name.setValue(rec.data['personid']);
            this.loadTransStore();

            if(rec.data["discounttotal"] && this.Discount){
                this.Discount.setValue(rec.data["discounttotal"]);
                this.perDiscount.setValue(rec.data["discountispertotal"]);
            }

            if(rec.data['taxid']!="" && rec.data["taxid"] != undefined && rec.data["taxid"] != "None"){
                this.Tax.enable();
                this.isTaxable.setValue(true);
                this.Tax.setValue(rec.data['taxid']);
                this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
                WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.alert'),WtfGlobal.getLocaleText('acc.invoiceform.linkTax')],2);
            }else{
                this.Tax.disable();
                this.isTaxable.reset();
                this.Tax.reset();
            }
            this.getCreditTo(rec.data.creditoraccount);            
            if(this.fromLinkCombo.getValue()==1 || this.fromLinkCombo.getValue()==3||WtfGlobal.getModuleId(this)==22){
                if(WtfGlobal.getModuleId(this)==22){//if vendor quotation is linked in customer quotation then update tax details-erp2082
                    this.includeProTax.setValue(false);
                    this.showGridTax(null,null,true);
                    this.isTaxable.enable();
                    this.isTaxable.setValue(false);
                    this.Tax.disable();
                    this.Tax.setValue("");
                //                    this.updateData();
                }else{//for linkcombo
                    this.updateData();
                }

            }else{
                this.Currency.setValue(rec.data['currencyid']);
            }

            var index = this.personstore.find('accid',this.Name.getValue());
            if(index != -1){
                var storerec = this.personstore.getAt(index);
                this.Term.setValue(storerec.data['termid']);
            }        
            this.CostCenter.setValue(rec.data.costcenterid);         
            rec=rec.data['billid'];
        }                                       
        this.updateDueDate();
        var url = "";
        //(this.isCustBill?53:43)
        var soLinkFlag = false;  
        var isForSGELinking = false;
        var VQtoCQ = false;
        var dtype = false;
        var sopolinkflag=false;
        var isForLinking=true;
        var prvqlinkflag = false;
        var rfqlinkflag = false;
        var prpolinkflag=false;
        var isMRPJOBWORKIN=false;
        var sotopolinkflag=false;
        var linkingFlag = false; //For removing cross reference of DO-CI or GR-VI
        var isJobWorkOutLinkedWithPI=false;
        if(!this.isCustBill && !this.isOrder && !this.cash ){
            if(this.fromLinkCombo.getValue()==0){
                url = this.isCustomer ? 'ACCSalesOrderCMN/getSalesOrderRows.do' : 'ACCPurchaseOrderCMN/getPurchaseOrderRows.do';
            } else if(this.fromLinkCombo.getValue()==1){
                url = this.isCustomer ? "ACCInvoiceCMN/getDeliveryOrderRows.do" : "ACCGoodsReceiptCMN/getGoodsReceiptOrderRows.do";
                linkingFlag=true;
            }else if(this.fromLinkCombo.getValue()==2){
                url = this.isCustomer ? "ACCSalesOrderCMN/getQuotationRows.do" : "ACCPurchaseOrderCMN/getQuotationRows.do";
                dtype = true;//Linking Quotation when creating invoice, we need to display Unit Price excluding row discount
            }else if(this.fromLinkCombo.getValue()== 12){
                url ="ACCWorkOrderCMN/getJOBWOKINProductDetails.do";
                isMRPJOBWORKIN =(this.isMRPJOBWORKIN != undefined  && this.isMRPJOBWORKIN != false) ? this.isMRPJOBWORKIN : false;
            }else if(this.fromLinkCombo.getValue()== 13){
                url ="ACCGoodsReceiptCMN/getGoodsReceiptRows.do";
            }if(this.fromLinkCombo.getValue()==14 ||this.fromLinkCombo.getValue()==15){
                url = this.isCustomer ? 'ACCSalesOrderCMN/getSalesOrderRows.do' : 'ACCPurchaseOrderCMN/getPurchaseOrderRows.do';
                if (this.fromLinkCombo.getValue() == 15) {
                    isJobWorkOutLinkedWithPI = true;
                }
                
                /*
                 * isCreateInvFromJob is true if sales invoice is creating from Aged order work report.
                 */
            }else if(this.isCreateInvFromJob){
                     url ='ACCPurchaseOrderCMN/getPurchaseOrderRows.do';
                     
            }
        } else {
            if(this.isCustomer){
                if(this.quotation){
                    soLinkFlag = true;
                    url = "ACCPurchaseOrderCMN/getQuotationRows.do";
                    VQtoCQ = true;
                } else if(this.isOrder){
                    if (this.fromLinkCombo.getValue() == 4) {
                        url = 'ACCPurchaseOrderCMN/getPurchaseOrderRows.do';
                        soLinkFlag = true;
                        sotopolinkflag = true;
                    } else if (this.fromLinkCombo.getValue() == 3) {
                        url = "ACCSalesOrderCMN/getReplacementRequestRows.do";
                    } else if (this.fromLinkCombo.getValue() == 10) {
                        url = "ACCContractMasterCMN/getMasterContractRows.do";
                    }else{
                        url = "ACCSalesOrderCMN/getQuotationRows.do";
                        sopolinkflag=true;
//                        VQtoCQ = true;                //ERP-26729  isReport flag should be false.. otherwise Custom fields not getting auto populated
                    }
                } else {
                    url = this.isCustBill?"ACCSalesOrderCMN/getBillingSalesOrderRows.do":'ACCSalesOrderCMN/getSalesOrderRows.do';  
                }
            } else {
                if(this.isOrder){
                    if(this.quotation){
                        if (this.fromLinkCombo.getValue() == 5) {
                            url = 'ACCPurchaseOrderCMN/getRequisitionRows.do';
                            prvqlinkflag = true;
                        } else {
                            url = 'ACCPurchaseOrderCMN/getRFQRows.do';
                            rfqlinkflag = true;
                        }
                    } else {
                        url = 'ACCSalesOrderCMN/getSalesOrderRows.do';
                        sotopolinkflag = true;
                    }
                    if(this.isCustBill) {
                        url = "ACCSalesOrderCMN/getBillingSalesOrderRows.do";
                    } else {
                        if(this.fromLinkCombo.getValue()==0){
                            if(this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId){
                            url = 'ACCPurchaseOrderCMN/getPurchaseOrderRows.do';
                            isForSGELinking = true;
                            sotopolinkflag = false;
                        }else{
                            url = 'ACCSalesOrderCMN/getSalesOrderRows.do';
                            soLinkFlag = true;
                        }
                        } else if(this.fromLinkCombo.getValue()==2){
                            url = 'ACCPurchaseOrderCMN/getQuotationRows.do';
                            sopolinkflag=true;
                            VQtoCQ = true;
                        } else if (this.fromLinkCombo.getValue() == 5) {
                            url = 'ACCPurchaseOrderCMN/getRequisitionRows.do';
                            if (!this.quotation){
                                prpolinkflag = true;
                            }
                         
                            /* Calculating GST parameter for fetching TAX for Product
                             * While linking Requisition to VQ or PO
                             */
//                          Wtf.gstDimArray = this.tagsFieldset.createGSTDimensionArray(this.addressDetailRecForGST);
//                          var  dimArr = JSON.stringify(Wtf.gstDimArray )
                              
                        } 
                    }
                } else {
                    url = this.isCustBill?"ACCPurchaseOrderCMN/getBillingPurchaseOrderRows.do":'ACCPurchaseOrderCMN/getPurchaseOrderRows.do';
                }
            }
        }    
        this.Grid.getStore().proxy.conn.url = url;
        var isExplodeAP=false;
        if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId && this.fromLinkCombo.getValue() == 0){//case whe SO linked in PO
            isExplodeAP=this.explodeLinkAP.getValue();
        }
        /*
         * isCreateInvFromJob is true if sales invoice is creating from Aged order work report.
         */
        if(this.isCreateInvFromJob){
             this.Grid.loadPOGridStore(rec, soLinkFlag, VQtoCQ,linkingFlag,sopolinkflag,isForLinking,this.isInvoice,prvqlinkflag,isExplodeAP,prpolinkflag,isMRPJOBWORKIN,productid,sotopolinkflag,dtype,isForSGELinking,undefined,this.billDate.getValue(),true,true,true,true,this.ids);  
        }else{
             this.Grid.loadPOGridStore(rec, soLinkFlag, VQtoCQ,linkingFlag,sopolinkflag,isForLinking,this.isInvoice,prvqlinkflag,isExplodeAP,prpolinkflag,isMRPJOBWORKIN,productid,sotopolinkflag,dtype,isForSGELinking,undefined,this.billDate.getValue(),isJobWorkOutLinkedWithPI,false,false,false,undefined);  
        }
    
    },
   
   loadDataForProjectStatusReport:function(){
        this.isFromProjectStatusRep = false;
        var url = "ACCSalesOrderCMN/getSalesOrderRows.do";
        var rec = "";
        for(var i=0;i<this.SOLinkedArr.length;i++){
            rec+=this.SOLinkedArr[i]+',';
        }
        if(rec !=""){
            rec = rec.substring(0,rec.length-1);
        }
        this.Grid.getStore().proxy.conn.url = url;
        this.Grid.loadPOGridStore(rec, false, false,false); 
    },

    setTerm:function(c,rec,ind){
        if (rec.data['termid'] != undefined){//this will be executed when select customer
        this.Term.setValue(rec.data['termid']);
        } else if (this.invoicefromorderrec != undefined) { //added for reflecting term  and due date correctly while generating SI And Pi from Do And GR Respectivily  
        this.Term.setValue(this.invoicefromorderrec.term);
        }
        this.updateDueDate();
    },
    setSalesPerson:function(c,rec,ind){
//        this.users.setValue(rec.data['masterSalesPerson']);
        this.users.setValForRemoteStore(rec.data['masterSalesPerson'],rec.data['masterSalesPersonName'],rec.data['hasAccess']);
        
    },
    setAgent:function(c,rec,ind){
         this.users.setValForRemoteStore(rec.data['masteragent'],rec.data['masteragentname'],rec.data['hasAccess']);
        
//        this.users.setValue(rec.data['masteragent']);
    },
    callGSTCurrencyRateandUpdateSubtotal:function(a,val){
        if(WtfGlobal.singaporecountry()&&WtfGlobal.getCurrencyID()!=Wtf.Currency.SGD&&(this.isInvoice||this.isCash) && this.Grid.forCurrency!=Wtf.Currency.SGD){
            var record = WtfGlobal.searchRecord(this.currencyStore, this.Currency.getValue(), "currencyid");
            callGstCurrencyRateWin(this.id,record.data.currencyname,undefined,this.gstCurrencyRate);
        }
        this.updateSubtotal(a,val);
    },
    updateSubtotal:function(scope,termAmountAlreadyChanged,termAmount){
        /*
         * Set linking record while generating Sales/Purchase Invoice from Sales/Purchase Order
         */
        if (this.invoicefromorder) {
        if(this.PO.store.getRange() && this.PO.store.getRange().length > 0){
            this.PO.setValue(this.invoicefromorderrec.billid);
        }else if(this.invoicefromorderrec.billid && this.invoicefromorderrec.billno){
            this.PO.mode = "remote";
            this.PO.setValForRemoteStore(this.invoicefromorderrec.billid,this.invoicefromorderrec.billno);
            this.PO.mode = "local";   
        }
        /* 
             *Used to set Custom/Dimension Fields values for Invoice 
             *while Creating from transaction forms of SO/PO
             */
        this.setCustomdimensionFields();
    }
        /**
         *if Generating SI/PI from DO/GRN respectively then need to save the address of Cust/Ven.SDP-14186
         */
        if ((this.isfromdeliveryorder && WtfGlobal.getModuleId(this) == Wtf.Acc_Invoice_ModuleId) || (this.isfromgoodsreceipt && WtfGlobal.getModuleId(this) == Wtf.Acc_Vendor_Invoice_ModuleId)) {
            this.PO.setValue(this.invoicefromorderrec.billid);
            var selectedids = this.PO.getValue();
            var selectedValuesArr = selectedids.split(',');
            this.linkRecord = this.POStore.getAt(this.POStore.find('billid', selectedValuesArr[0]));
        }
        if(this.calDiscount())return;
        this.isClosable=false; // Set Closable flag after updating grid data
        this.applyCurrencySymbol();       //ERP-32678 - [Exchange Rate]: Incorrect exchange rate is showing
//        if(a!=undefined && a.id!=undefined && a.id.indexOf("editproductdetailsgrid") != -1){
//            this.termStore.removeAll();
//            this.termStore.reload();
//            this.tplSummary.overwrite(this.southCalTemp.body,{subtotal:WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol),discount:WtfGlobal.addCurrencySymbolOnly(this.getDiscount(),this.symbol),totalamount:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount(),this.symbol),tax:WtfGlobal.addCurrencySymbolOnly(this.caltax(),this.symbol),termtotal:calTermTotal,aftertaxamt:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount()+this.findTermsTotal()+this.caltax(),this.symbol),totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol()),amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol())});
//        }
//        else{
        /**
         * While Adding new product or changing any filed from grid Global Terms not changes
         * Remove undefined check added by Kapil B.
         */
        if(!termAmountAlreadyChanged){
            this.updateSubtotalOnTermChange(false);
        }  
        var subtotal=0.00;
        var subtotalValue=0.00;
        var tax=0.00;
        var taxAndSubtotal=this.Grid.calLineLevelTax();
        
        if(this.includeProTax.getValue() && Wtf.account.companyAccountPref.isLineLevelTermFlag==0){ 
            subtotal=WtfGlobal.addCurrencySymbolOnly(taxAndSubtotal[0]-taxAndSubtotal[1],this.symbol)
            subtotalValue=taxAndSubtotal[0]-taxAndSubtotal[1];
            /*
             * Add Invoice term amount in tax amount  refer SDP-9186
             */

            tax = taxAndSubtotal[1];
            if(this.applyTaxToTermsChk.getValue()==true){
                tax += this.addTermAmountInTax();
            }
            tax=WtfGlobal.addCurrencySymbolOnly(tax,this.symbol);
        }else{
            subtotal=WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol)
            subtotalValue=this.Grid.calSubtotal();
            tax=WtfGlobal.addCurrencySymbolOnly(this.caltax()+this.addTermAmountInTax(),this.symbol);
        }
        /**
         * While Adding new product or changing any filed from grid Global Terms not changes
         * Remove undefined check added by Kapil B.
         */
//            if(!termAmountAlreadyChanged){
//                this.updateSubtotalOnTermChange(false);
//            }    
            var calTermTotal = WtfGlobal.addCurrencySymbolOnly(this.findTermsTotal(),this.symbol);
            var amountbeforetax = WtfGlobal.addCurrencySymbolOnly((subtotalValue+this.findTermsTotal()),this.symbol);
            if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
                this.tplSummary.overwrite(this.southCalTemp.body,{
                    subtotal:Wtf.UpriceAndAmountDisplayValue,
                    discount:Wtf.UpriceAndAmountDisplayValue,
                    totalamount:Wtf.UpriceAndAmountDisplayValue,
                    tax:Wtf.UpriceAndAmountDisplayValue,
                    nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
                    tdsamount: Wtf.UpriceAndAmountDisplayValue,
                    termtotal:Wtf.UpriceAndAmountDisplayValue,
                    amountbeforetax:Wtf.UpriceAndAmountDisplayValue,
                    roundingAdjustmentAmount:Wtf.UpriceAndAmountDisplayValue,
                    aftertaxamt:Wtf.UpriceAndAmountDisplayValue,
                    totalAmtInBase:Wtf.UpriceAndAmountDisplayValue,
                    amountdue:Wtf.UpriceAndAmountDisplayValue,
                    changeToBeReturned:Wtf.UpriceAndAmountDisplayValue
                });
            } else if(this.roundingAdjustmentFlag){
                var summaryAmtArray = this.getSummaryDetailAmountArray();
                var subTotalAmt = summaryAmtArray[0];
                var taxValue = summaryAmtArray[1];
                var nonTaxableAmt = summaryAmtArray[2];
                var termTotalAmt = summaryAmtArray[3];
                var tdsAmt = summaryAmtArray[4];
                var discountAmt = summaryAmtArray[5];
                var totalAmount = summaryAmtArray[6];
                var changedToBeReturnedAmt = summaryAmtArray[7];
                var totalInBaseAmt = summaryAmtArray[8];
                var aftertaxamt = summaryAmtArray[9];
                var roundingAdjustmentAmount = summaryAmtArray[10];
                
                this.tplSummary.overwrite(this.southCalTemp.body,{
                    subtotal:WtfGlobal.addCurrencySymbolOnly(subTotalAmt,this.symbol),
                    discount:WtfGlobal.addCurrencySymbolOnly(discountAmt,this.symbol),
                    totalamount:WtfGlobal.addCurrencySymbolOnly(totalAmount,this.symbol),
                    tax:WtfGlobal.addCurrencySymbolOnly(taxValue,this.symbol),
                    nontaxableamount: WtfGlobal.addCurrencySymbolOnly(nonTaxableAmt,this.symbol),
                    tdsamount: WtfGlobal.addCurrencySymbolOnly(tdsAmt,this.symbol),
                    termtotal:WtfGlobal.addCurrencySymbolOnly(termTotalAmt,this.symbol),
                    amountbeforetax:WtfGlobal.addCurrencySymbolOnly((subTotalAmt+termTotalAmt),this.symbol),
                    roundingAdjustmentAmount:WtfGlobal.addCurrencySymbolOnly(roundingAdjustmentAmount,this.symbol),
                    aftertaxamt:WtfGlobal.addCurrencySymbolOnly(aftertaxamt,this.symbol),
                    totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(totalInBaseAmt,WtfGlobal.getCurrencySymbol()),
                    amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
                    //Update value of Cash To Be Returned in summary text
                    changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(changedToBeReturnedAmt,this.symbol)
                });
            } else{
                this.tplSummary.overwrite(this.southCalTemp.body,{
                    subtotal:subtotal,
                    discount:WtfGlobal.addCurrencySymbolOnly(this.getDiscount(),this.symbol),
                    totalamount:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount(),this.symbol),
                    tax:tax,
                    nontaxableamount: WtfGlobal.addCurrencySymbolOnly(this.calCulateNonTaxableTermAmount(),this.symbol),
                    tdsamount: WtfGlobal.addCurrencySymbolOnly(this.calculateTDSAmount(),this.symbol),
                    termtotal:calTermTotal,
                    amountbeforetax:amountbeforetax,
                    aftertaxamt:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount()+this.findTermsTotal()+this.caltax()+this.addTermAmountInTax()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount(),this.symbol),
                    totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol()),
                    amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
                    //Update value of Cash To Be Returned in summary text
                    changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(this.calChangeToBeReturned(),this.symbol)
                });
            }            
            if(Wtf.account.companyAccountPref.isLineLevelTermFlag==1 && !this.Name.getValue()){
                if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
                   this.tplSummary.overwrite(this.southCalTemp.body,{
                       subtotal:Wtf.UpriceAndAmountDisplayValue,
                       discount:Wtf.UpriceAndAmountDisplayValue,
                       totalamount:Wtf.UpriceAndAmountDisplayValue,
                       tax:Wtf.UpriceAndAmountDisplayValue,
                       nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
                       tdsamount: Wtf.UpriceAndAmountDisplayValue,
                       roundingAdjustmentAmount:Wtf.UpriceAndAmountDisplayValue,
                       aftertaxamt:Wtf.UpriceAndAmountDisplayValue,
                       totalAmtInBase:Wtf.UpriceAndAmountDisplayValue,
                       termtotal:Wtf.UpriceAndAmountDisplayValue,
                       amountbeforetax:Wtf.UpriceAndAmountDisplayValue,
                       amountdue:Wtf.UpriceAndAmountDisplayValue,
                       changeToBeReturned:Wtf.UpriceAndAmountDisplayValue
                   });     
                } else{
                   this.tplSummary.overwrite(this.southCalTemp.body,{
                        subtotal:WtfGlobal.currencyRenderer(0),
                        discount:WtfGlobal.currencyRenderer(0),
                        totalamount:WtfGlobal.currencyRenderer(0),
                        tax:WtfGlobal.currencyRenderer(0),
                        nontaxableamount: WtfGlobal.currencyRenderer(0),
                        tdsamount: WtfGlobal.currencyRenderer(0),
                        roundingAdjustmentAmount:WtfGlobal.currencyRenderer(0),
                        aftertaxamt:WtfGlobal.currencyRenderer(0),
                        totalAmtInBase:WtfGlobal.currencyRenderer(0),
                        termtotal:WtfGlobal.currencyRenderer(0),
                        amountbeforetax:WtfGlobal.currencyRenderer(0),
                        amountdue:WtfGlobal.currencyRenderer(0),
                        //Update value of Cash To Be Returned in summary text
                        changeToBeReturned:WtfGlobal.currencyRenderer(0)
                    });  
                }               
            }
            if(Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId){
                var personRec = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
                if(personRec != undefined){
                    this.updateTDSCalculationDetails(personRec);
                }
            }
            if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
                this.calculateProfitMarginAndUpdateTpl();
//                this.calProfitMargin();
//                this.productProfitMarginTplSummary.overwrite(this.productProfitMarginTpl.body,{
//                    totalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalproductsellingprice,WtfGlobal.getCurrencySymbol()),
//                    totalproductcost:WtfGlobal.addCurrencySymbolOnly(this.totalproductcost,WtfGlobal.getCurrencySymbol()),
//                    totalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
//                    totalprodcutprofitmarginpercent:this.totalproductsellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.totalprodcutprofitmarginpercent+'%</div>',
//
//                    totalservicesellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalservicesellingprice,WtfGlobal.getCurrencySymbol()),
//                    totalservicecost:WtfGlobal.addCurrencySymbolOnly(this.totalservicecost,WtfGlobal.getCurrencySymbol()),
//                    totalserviceprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalserviceprofitmargin,WtfGlobal.getCurrencySymbol()),
//                    totalserviceprofitmarginpercent:this.totalservicesellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.totalserviceprofitmarginpercent+'%</div>',
//
//                    finalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.finalproductsellingprice,WtfGlobal.getCurrencySymbol()),
//                    finalproductcost:WtfGlobal.addCurrencySymbolOnly(this.finalproductcost,WtfGlobal.getCurrencySymbol()),
//                    finalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.finalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
//                    finalproductprofitmarginpercent:this.finalproductsellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.finalproductprofitmarginpercent+'%</div>'              
//                });
            }
//        }
//        
        if(this.isFromProjectStatusRep){
            if(this.SOLinkedArr.length>0){
                this.PO.setValue(this.SOLinkedArr);
            }
            this.isMultiSelectFlag = true;    
            this.loadDataForProjectStatusReport();
        }
        if((this.moduleid==Wtf.Acc_Invoice_ModuleId || this.moduleid== Wtf.Acc_Cash_Sales_ModuleId) && Wtf.account.companyAccountPref.calculateproductweightmeasurment){
            this.updateProductTotalWeightTemplate();
        }
    },
    
/*Below method updateProductTotalWeightTemplate is used for updating products Total weight in Templte*/
    updateProductTotalWeightTemplate : function(){
        var totalProductsWeight = 0;
        var totalProductsWeightwithPackaging = 0;
        var totalProductsVolume = 0;
        var totalProductsVolumeWithPackaging = 0;
        for(var i=0;i<this.Grid.getStore().getCount();i++){
            var rowRecord=this.Grid.getStore().getAt(i);
            if(rowRecord){
                var prdWtPeruom=rowRecord.data.productweightperstockuom;
                var prdPackagingWtPeruom=rowRecord.data.productweightincludingpakagingperstockuom;
                var prodVolumePerUOM=rowRecord.data.productvolumeperstockuom;
                var prodVolumeWithPackaging=rowRecord.data.productvolumeincludingpakagingperstockuom;
                var baseQuantity=rowRecord.data.baseuomquantity;
                if(baseQuantity){
                    if(prdWtPeruom){
                        totalProductsWeight +=prdWtPeruom*baseQuantity;
                    }
                    if(prdPackagingWtPeruom){
                        totalProductsWeightwithPackaging +=prdPackagingWtPeruom*baseQuantity;
                    }
                    if(prodVolumePerUOM){
                        totalProductsVolume +=prodVolumePerUOM*baseQuantity;
                    }
                    if(prodVolumeWithPackaging){
                        totalProductsVolumeWithPackaging +=prodVolumeWithPackaging*baseQuantity;
                    }
                }
            }
        }
        this.productWeightDetailsTplSummary.overwrite(this.productWeightDetailsTpl.body, {
            totalprdweight: parseFloat(totalProductsWeight).toFixed(3) + "  "+WtfGlobal.getLocaleText("acc.field.weighingunit"),
            totalprdweightwithpack: parseFloat(totalProductsWeightwithPackaging).toFixed(3) + "  "+WtfGlobal.getLocaleText("acc.field.weighingunit"),
            totalprdvolume: parseFloat(totalProductsVolume).toFixed(3) + "  Cubic",
            totalprdvolumewithpack: parseFloat(totalProductsVolumeWithPackaging).toFixed(3) + "  Cubic"
        });
    },
    
    getNextSequenceNumber:function(a,val){
       if(!(a.getValue()=="NA")){
         WtfGlobal.hideFormElement(this.Number);
         this.setTransactionNumber(true);
         var rec=WtfGlobal.searchRecord(this.sequenceFormatStore, a.getValue(), 'id');
         var oldflag=rec!=null?rec.get('oldflag'):true;
         Wtf.Ajax.requestEx({
            url:"ACCCompanyPref/getNextAutoNumber.do",
            params:{
                from:(this.fromnumber!=undefined) ? this.fromnumber : 1,
                sequenceformat:a.getValue(),
                oldflag:oldflag
            }
        }, this,function(resp){
            if(resp.data=="NA"){
                WtfGlobal.showFormElement(this.Number);
                this.Number.reset();
                if(!this.isViewTemplate){             // View mode- all fields should be disabled unconditionaly
                    this.Number.enable();
                }   
            }else {
                this.Number.setValue(resp.data);  
                this.Number.disable();
                WtfGlobal.hideFormElement(this.Number);
                
                if(Wtf.IndianGST && (this.moduleid == Wtf.Acc_Invoice_ModuleId||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId)){ // For India GST, sequence formate should be numeric only.
                    if(!Wtf.isEmpty(resp) && !(/^[0-9]*$/).test(resp.data)){
                        this.sequenceFormatCombobox.setValue("NA");
                         WtfGlobal.showFormElement(this.Number);
                         this.Number.reset();
                         if(!this.isViewTemplate){             // View mode- all fields should be disabled unconditionaly
                            this.Number.enable();
                        }
                         WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),"Sequence format should be numeric only. "],2); 
                    }
                     
                }
            }
            
        });
       } else {
           WtfGlobal.showFormElement(this.Number);
           this.Number.reset();
           if(!this.isViewTemplate){                 // View mode- all fields should be disabled unconditionaly
                this.Number.enable();
           }     
       }
    },
    validateSIN : function(){
        var SupplierInvoiceNo =this.SupplierInvoiceNo.getValue();
        if(SupplierInvoiceNo!='' && WtfGlobal.isIndiaCountryAndGSTApplied()){
            if(SupplierInvoiceNo.length > 16){
                 Wtf.MessageBox.confirm("Warning",WtfGlobal.getLocaleText("acc.gst.SINSequenceformatErrorMsg1") + SupplierInvoiceNo + WtfGlobal.getLocaleText("acc.gst.SINSequenceformatErrorMsg2") + Wtf.SeqenceFormatMaxLengthForIndianCompany + WtfGlobal.getLocaleText("acc.gst.SINSequenceformatErrorMsg3"), function(btn){
                                if(btn == 'yes') {  
                                    this.SupplierInvoiceNo.setValue(SupplierInvoiceNo);
                                }else if(btn == 'no') {
                                    this.SupplierInvoiceNo.reset();
                                    return;           
                                }
                            },this);
        }
      }
   },
     getNextSequenceNumberDo:function(a,val,autgeneratedDO,fromcombo){
      if(!(a.getValue()=="NA")){
        this.setTransactionNumberDo(true);
         var rec=WtfGlobal.searchRecord(this.sequenceFormatStoreDo, a.getValue(), 'id');
         var oldflag=rec!=null?rec.get('oldflag'):true;
         Wtf.Ajax.requestEx({
            url:"ACCCompanyPref/getNextAutoNumber.do",
            params:{
                from:this.fromnumberDo,
                sequenceformat:a.getValue(),
                oldflag:oldflag
            }
        }, this,function(resp){
                if (resp.data == "NA") {
                    if (this.isEdit && !this.copyInv && (!(autgeneratedDO) || this.EditisAutoCreateDO) && !fromcombo) {        
                        this.no.setValue(resp.data);
                        this.no.enable();
                    } else {
                        this.no.reset();              //non edit case  need to reset  sequence number
                        this.no.enable();
                    }
                } else {
                if(this.isEdit && !this.copyInv && (!(autgeneratedDO) || this.EditisAutoCreateDO) && !fromcombo){
                    this.no.disable();                                                //in edit case not need to set new sequence number
                }else {
                    this.no.setValue(resp.data);
                    this.no.disable();
                     autgeneratedDO=false;
                }
            }
            
        });
        } else {
            if(!this.readOnly && this.isEdit && !this.copyInv && !fromcombo) {
//                this.no.reset();                  //in edit case not need to reset  sequence number
                this.no.enable();
            }else if(!(this.isEdit && !this.copyInv && (!autgeneratedDO  || this.EditisAutoCreateDO) && !fromcombo)){            //non edit case  need to reset  sequence number
                this.no.reset();
                this.no.enable();
                this.showDO();
            }
        }     
    },
    
    getDiscount:function(){
        var disc = 0;
        var per = 1;
//        if(!(this.isOrder && !this.quotation)){
            disc=this.Discount.getValue();
            per=this.perDiscount.getValue();
//        }
        var subtotalAfterTerm = this.Grid.calSubtotal() + this.findTermsTotal();
        if(isNaN(parseFloat(disc))){
            return 0;
        }else{
            disc=getRoundedAmountValue(disc);
            subtotalAfterTerm=getRoundedAmountValue(subtotalAfterTerm);
            if(per){
                return (disc*subtotalAfterTerm)/100
            }else{
                return disc;
            }
        }
        
//        return isNaN(parseFloat(disc))?0:(per?(disc*subtotalAfterTerm)/100:disc);
    },
    
    getDiscountInBase:function(){
        var disc = 0;
        var per = 1;
        disc=this.Discount.getValue();
        per=this.perDiscount.getValue();
        var subtotalAfterTerm = this.Grid.calSubtotalInBase() + this.findTermsTotalInBase();
        if(isNaN(parseFloat(disc))){
            return 0;
        }else{
            disc=this.calAmountInBase(disc);
            subtotalAfterTerm=getRoundedAmountValue(subtotalAfterTerm);
            if(per){
                return (disc*subtotalAfterTerm)/100
            }else{
                return disc;
            }
        }
    },
    
    calDiscount:function(){
        var disc=this.Discount.getValue();
        var per=this.perDiscount.getValue();
        if(per && disc > 100){
            WtfComMsgBox(28,2);
            this.NorthForm.getForm().setValues({perdiscount:false});
            return true;
        }
        else
            return false;
    },
    //function to calculate Change To Be Returned from Cash Received and Total Amount
    calChangeToBeReturned: function(){
        //get cash received value
        var receivedCash = parseFloat(this.cashReceived.getValue()==""?"0":this.cashReceived.getValue());        
        //get total amount value
        var totalAmountAfterTaxAndTerm = this.calTotalAmount() + this.findTermsTotal() + this.caltax() +this.addTermAmountInTax()+ this.calCulateNonTaxableTermAmount() - this.calculateTDSAmount();
        //calculate and return change to be returned value
        return getRoundedAmountValue(receivedCash - totalAmountAfterTaxAndTerm);
    },
    calTotalAmount:function(){
        var subtotal=this.Grid.calSubtotal();
        var discount=this.getDiscount();
//        return subtotal-discount + this.findTermsTotal();
        return subtotal-discount;
    },
    calTotalTDSAmount:function(){ // calculate subtotal TDS assessable amount
        var subtotal=this.Grid.calTDSAssasableSubtotal();
//        var subtotal=0;
        var discount=this.getDiscount();
        return subtotal- discount;
    },
    calTotalAmountWithDiscInBase:function(){
        var subtotal=this.Grid.calSubtotalInBase();
        var discount=this.getDiscountInBase();
        return subtotal-discount;
    },
    
    calTotalAmountInBase:function(){
        var subtotal=this.Grid.calSubtotal(); 
        var discount=this.getDiscount();   
        var taxVal = this.caltax()+this.addTermAmountInTax();
        var nontaxableamount = this.calCulateNonTaxableTermAmount();
        var tdsAmount = this.calculateTDSAmount();
        var returnValInOriginalCurr = subtotal-discount + this.findTermsTotal()+taxVal + nontaxableamount - tdsAmount;
        returnValInOriginalCurr = getRoundedAmountValue(returnValInOriginalCurr*this.getExchangeRate());
        return returnValInOriginalCurr; 
    },
    getExchangeRate:function(){
        var index=this.getCurrencySymbol();
        var rate=this.externalcurrencyrate;
        var revExchangeRate = 0;
        if(index>=0){
            var exchangeRate = this.currencyStore.getAt(index).data['exchangerate'];
            if(this.externalcurrencyrate>0) {
                exchangeRate = this.externalcurrencyrate;
            }
            revExchangeRate = 1/(exchangeRate);
            revExchangeRate = (Math.round(revExchangeRate*Wtf.Round_Off_Number))/Wtf.Round_Off_Number;
        }
        return revExchangeRate;
    }, 
    
    calAmountInBase:function(val){
        var returnVal = getRoundedAmountValue(val*this.getExchangeRate());
        return returnVal; 
    }, 
     beforeSave:function(){
            this.Grid.getStore().each(function(rec){
                if(rec.data.quantity!="" && rec.data.isAutoAssembly && rec.data.type == "Inventory Assembly"){
                    Wtf.Ajax.requestEx({
                        url: "ACCReports/getPriceCalculationForAsseblyProduct.do",
                        params: {
                            productid: rec.data.productid,
                            buildquantity: rec.data.quantity
                        }
                    }, this, function(res,req) {
                        var bomValuationArray = [];
                        for (var i=0; i<res.valuationArray.length; i++) {
                            var rowObject = new Object();
                            var bomRec = res.valuationArray[i];
                            rowObject['productid'] = bomRec.productid;
                            rowObject['buildcost'] = bomRec.buildcost;
                            bomValuationArray.push(rowObject);
                        }
                        rec.data.bomValuationArray = JSON.stringify(bomValuationArray);
//                        this.save();
                    },function(res,req){

                        });
                }else{
//                   this.save(); SDP-1623
                }
            },this);        
            this.save(); 
    },    
    showNegativeStockWarnOrBlockMsg:function(){
        var success=true;
        var assemblyproductflag=true;
        for (var i = 0; i < this.Grid.getStore().getCount(); i++) {
            var record = this.Grid.getStore().data.items[i];
            if (record.data.productid !== undefined && record.data.productid !== "") {
//                var index = this.productComboStore.findBy(function (rec) {
//                    if (rec.data.productid === record.data.productid)
//                        return true;
//                    else
//                        return false;
//                })
                var prorec = WtfGlobal.searchRecord(this.Grid.productComboStore,record.data.productid,'productid');
//                var prorec = this.productComboStore.getAt(index);
                var useStoreRec = false;
                if (prorec == undefined || prorec==null) {
                    prorec = record;
                    useStoreRec = true;
                }
                
                var availableQuantity = 0;
                if(prorec!=undefined && prorec!=null && prorec.data!=undefined){
                    availableQuantity=prorec.data.quantity;
                }
                if (useStoreRec && prorec != undefined && prorec != null && prorec.data != undefined && prorec.data.availablequantity != undefined && prorec.data.availablequantity != null) {
                    availableQuantity = prorec.data.availablequantity;
                } else if (useStoreRec && prorec != undefined && prorec != null && prorec.data != undefined && prorec.data.availableQtyInSelectedUOM != undefined && prorec.data.availableQtyInSelectedUOM != null) {
                    availableQuantity = prorec.data.availableQtyInSelectedUOM;
                }
                if (prorec.data.type != "Service" && prorec.data.type != 'Non-Inventory Part') {
                    if (this.moduleid == Wtf.Acc_Sales_Order_ModuleId) { // Sales Order
                        if (prorec.data.socount !== undefined && prorec.data.socount !== "") {
                            if(Wtf.account.companyAccountPref.negativeStockFormulaSO==1){
                                /*
                                 * Apply Formula for consider Outstanding SO Qty
                                 */
                                availableQuantity = parseFloat(availableQuantity - prorec.data.socount);
                            }
                        }
                    } else if (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Sales_ModuleId) { // Sales Invoice/cash sales
                        if (prorec.data.sicount != undefined && prorec.data.sicount !== "") {
                            if(Wtf.account.companyAccountPref.negativeStockFormulaSI==1){
                                /*
                                 * Apply Formula for consider Outstanding SI Qty
                                 */
                                availableQuantity = parseFloat(availableQuantity - prorec.data.sicount);
                            }
                            assemblyproductflag = (prorec.data.isAutoAssembly == true && this.autoGenerateDO.getValue() == true) ? false : true;
                        }
                    }
                    assemblyproductflag = (prorec.data.isAutoAssembly == true && this.autoGenerateDO.getValue() == true) ? false : true;
                }
                var qty = 0;
                var copyquantity = 0;

                for (var j = 0; j < this.Grid.getStore().getCount(); j++) {
                    var subrecord = this.Grid.getStore().data.items[j];
                    if (subrecord.data.productid === record.data.productid) {
                        copyquantity = copyquantity + subrecord.data.copyquantity;
                        qty += subrecord.data.quantity;
                    }
                }
                if (this.isEdit && !this.copyInv) {
                    availableQuantity = parseFloat(availableQuantity + copyquantity);
                }
                if (availableQuantity < qty && (prorec.data.type != "Service") && prorec.data.type != 'Non-Inventory Part' && assemblyproductflag && !prorec.data.isAutoAssembly) {     //SDP-12875
                    if ((this.moduleid == Wtf.Acc_Sales_Order_ModuleId && Wtf.account.companyAccountPref.negativeStockSO == 1) ||((this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Sales_ModuleId) && (Wtf.account.companyAccountPref.negativeStockSICS == 1 || (Wtf.account.companyAccountPref.negativestock == 1 && this.autoGenerateDO.getValue())))) { // Block case
                        var msg = this.isOrder ? WtfGlobal.getLocaleText("acc.field.QuantitygiveninSOareexceedingthequantityavailable") : WtfGlobal.getLocaleText("acc.field.QuantitygiveninCS/CIareexceedingthequantityavailable");
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.block"), msg +' '+ WtfGlobal.getLocaleText("acc.nee.54") + ' ' + prorec.data['productname'] + " " + WtfGlobal.getLocaleText("acc.field.is") + availableQuantity+'. ' +WtfGlobal.getLocaleText("acc.field.Soyoucannotproceed") ], 2);
                        this.enableSaveButtons();
                        success=false;
                        return;
                    } else if ((this.moduleid == Wtf.Acc_Sales_Order_ModuleId && Wtf.account.companyAccountPref.negativeStockSO == 2) ||((this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Sales_ModuleId) && (Wtf.account.companyAccountPref.negativeStockSICS == 2 || (Wtf.account.companyAccountPref.negativestock == 2 && this.autoGenerateDO.getValue())))) {     // Warn Case
                        var msg = this.isOrder ? WtfGlobal.getLocaleText("acc.field.QuantitygiveninSOareexceedingthequantityavailableDoyouwish") : WtfGlobal.getLocaleText("acc.field.QuantitygiveninCIareexceedingthequantityavailableDoyouwish");
                        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), msg + '</center>', function (btn) {
                            if (btn == "yes") {
                                this.WarnMessage = false;
                                this.save();
                            }else {
                                this.enableSaveButtons();
                                success= false;
                                return;
                            }
                        }, this);
                        success=false;
                        return;
                    }
                }
            }
        }  
        return success;
    },
    
    calculateqtyforoustandingSOorSI: function (prorec) {
        var availableQuantityInBaseUOM= prorec.data['availableQtyInSelectedUOM'] != undefined ? prorec.data['availableQtyInSelectedUOM'] : 0;
        var availableQuantityInSelectedUOM = availableQuantityInBaseUOM;
        if (prorec.data.type != "Service" && prorec.data.type != 'Non-Inventory Part') {
            if (this.moduleid == Wtf.Acc_Sales_Order_ModuleId) { // Sales Order
                if (prorec.data.socount !== undefined && prorec.data.socount !== "") {
                    if (Wtf.account.companyAccountPref.negativeStockFormulaSO == 1) {
                        /*
                         * Apply Formula for consider Outstanding SO Qty
                         */
                        availableQuantityInSelectedUOM = availableQuantityInSelectedUOM - prorec.data.socount;
                    }
                }
            } else if (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Sales_ModuleId) { // Sales Invoice/cash sales
                if (prorec.data.sicount != undefined && prorec.data.sicount !== "") {
                    if (Wtf.account.companyAccountPref.negativeStockFormulaSI == 1) {
                        /*
                         * Apply Formula for consider Outstanding SI Qty
                         */
                        availableQuantityInSelectedUOM = availableQuantityInSelectedUOM - prorec.data.sicount;
                    }
                }
            }
        }
        return availableQuantityInSelectedUOM;
    },
    update:function(){
        this.mailFlag=true;
        var incash=this.cash;
        var rec=this.NorthForm.getForm().getValues();
        Wtf.MessageBox.confirm(this.isDraft ? WtfGlobal.getLocaleText("acc.common.saveasdraft") : WtfGlobal.getLocaleText("acc.common.savdat"),this.isDraft ? WtfGlobal.getLocaleText("acc.invoice.msg14") : WtfGlobal.getLocaleText("acc.invoice.msg7"), function(btn) {
        if (btn != "yes") {
                this.enableSaveButtons();
                return;
        }
        this.ajxurl = ""; 
        if(this.businessPerson=="Customer"){
            if(this.quotation)
                this.ajxurl = "ACCSalesOrder/updateLinkedQuotation.do";
            else
                this.ajxurl = "ACC" + (this.isOrder?("SalesOrder/updateLinkedSalesOrder"):("Invoice/updateLinkedInvoice")) + ".do";
        }else if(this.businessPerson=="Vendor"){
            if(this.quotation){
                this.ajxurl = "ACCPurchaseOrder/updateLinkedQuotation.do";
            } else {
                this.ajxurl = "ACC"+ (this.isOrder?("PurchaseOrder/updateLinkedPurchaseOrder"):("GoodsReceipt/updateLinkedGoodsReceipt")) +".do";
            }

        }
        var detail = this.Grid.getProductDetails();
        this.msg = WtfComMsgBox(27,4,true);
       
        if(this.isExpenseInv){
            rec.expensedetail=detail;
            rec.isExpenseInv=this.isExpenseInv;
        }else{
            rec.detail=detail;
        }
        rec.billdate=WtfGlobal.convertToGenericDate(this.billDate.getValue());
        rec.costcenter=this.CostCenter.getValue();
        rec.validdate=WtfGlobal.convertToGenericDate(this.validTillDate.getValue());
        rec.shipdate=WtfGlobal.convertToGenericDate(this.shipDate.getValue());
        var custFieldArr=this.tagsFieldset.createFieldValuesArray();
        rec.posttext=this.postText;
        if (custFieldArr.length > 0){
            rec.customfield = JSON.stringify(custFieldArr);
        }
        rec.islockQuantity =this.lockQuantity.getValue();
        rec.invoiceid=(this.copyInv||this.GENERATE_PO||this.GENERATE_SO || (this.quotation&&!this.isCustomer&&this.ispurchaseReq))?"":this.billid;
        rec.mode=(this.isOrder?(this.isCustBill?51:41):(this.isCustBill?13:11));
        rec.incash=incash;
        rec.isLinkedTransaction=this.isLinkedTransaction; 
        rec.isMRPSalesOrder=this.isMRPSalesOrder; 
        rec.isJobWorkOrderReciever=this.isJobWorkOrderReciever; 
        rec.isMRPJOBWORKIN=this.isMRPJOBWORKIN; 
        if(this.isMRPJOBWORKOUT != undefined && this.isMRPJOBWORKOUT== true ){
                rec.isMRPJOBWORKOUT=this.isMRPJOBWORKOUT; 
                rec.workorderid = this.workOrder.getValue();
                rec.jobworklocationid = this.jobWorkLocation.getValue();
                rec.productid = this.productNameCombo.getValue();
                rec.productquantity = this.productQuantity.getValue();
                rec.dateofdelivery = WtfGlobal.convertToGenericDate(this.dateofdelivery.getValue());
                rec.dateofshipment = WtfGlobal.convertToGenericDate(this.dateOfshipment.getValue());
        }
        var isCopy = this.copyInv;
        var isEdit = this.isEdit;
        rec=WtfGlobal.getAddressRecordsForSave(rec,this.record,this.linkRecord,this.currentAddressDetailrec,this.isCustomer,this.singleLink,isEdit,isCopy,this.GENERATE_PO,this.GENERATE_SO,this.isQuotationFromPR);
        WtfGlobal.setAjaxTimeOut();
        Wtf.Ajax.requestEx({
            url:this.ajxurl,
            params: rec
        },this,this.genSuccessResponse,this.genFailureResponse);
        }, this);
    },
    
    save:function(){
    var incash=false;
    /*
     * Without link po can not save Security gate entry
     */
     // Comment below code for ERM-1099
//    if(this.PO.getValue()==""&&this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId){
//        this.enableSaveButtons();
//        this.PO.markInvalid();
//        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.selectPoFirst")], 2);
//        return ;
//    }
//    this.PO.setValue(this.PO.getValue().trim()); commented for SDP-5251
    /*
     * ERP-39774 Total amount should not be negative
     * */
    var amountTotal=this.calTotalAmount()+this.findTermsTotal()+this.caltax()+this.addTermAmountInTax()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount();
    if (amountTotal < 0) {      // Note : Allowed amounttotal = 0 for only Purhcas e side & Sales side.
            this.enableSaveButtons();
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Totalamountshouldnotbenegative")], 2);
            return;
        }
    if(this.isExpenseInv==true){
        if(this.Grid.calSubtotal()<=0){
            this.enableSaveButtons();
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.TotalamountshouldbegreaterthanZero")], 2);
            return ;
        }
    }
        /* When Invoice is creating Partially with SO then we restrict auto DO from same Invoice*/
        if (this.autoGenerateDO.getValue()) {
            if (this.partialInvoiceCmb.getValue()) {
                this.enableSaveButtons();
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.autoDOwithPartialInvoice")], 2);
                return;
            }
        }
    this.isblocked=this.lockQuantity.getValue();   //falg to get is so is blocked or not
        if ((this.moduleid == Wtf.Acc_Sales_Order_ModuleId || ((this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Sales_ModuleId) && (this.fromLinkCombo.getValue() == "" || this.fromLinkCombo.getValue() == 0))) && this.WarnMessage) {
            /* check negative stock for SO/SI
             * if SI is not linked with DO check negative stock
             **/
            if (Wtf.account.companyAccountPref.negativeStockSO == 1 || Wtf.account.companyAccountPref.negativeStockSO== 2 || Wtf.account.companyAccountPref.negativeStockSICS == 1 || Wtf.account.companyAccountPref.negativeStockSICS == 2  || ( this.autoGenerateDO.getValue() && (Wtf.account.companyAccountPref.negativestock == 1 || Wtf.account.companyAccountPref.negativestock == 2))) {           
                if(!this.showNegativeStockWarnOrBlockMsg()){
                    return;
                }
            }
        }
    if(this.checkBeforeProceed(this.Number.getValue()))
    {
        if (this.moduleid == Wtf.Acc_Invoice_ModuleId && this.isDraft && this.autoGenerateDO.getValue()) {
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.youCannotGenerateDOWhileSavingInvoiceAsDraft")], 2);
            this.enableSaveButtons();
            return;
        }
            
            this.Number.setValue(this.Number.getValue().trim());  
        this.no.setValue(this.no.getValue().trim()); 
        var isValidCustomFields=this.tagsFieldset.checkMendatoryCombo();
        var southFormValid = true;
        if(this.cash){
           southFormValid = this.SouthForm.hidden ? true : this.SouthForm.getForm().isValid(); 
        } 
        if(this.NorthForm.getForm().isValid() && isValidCustomFields && southFormValid && this.exciseFormPanel1.getForm().isValid() && this.southPanel.getForm().isValid()){
            if(this.isCustBill){
                for(var datacount=0;datacount<this.Grid.getStore().getCount();datacount++){
                    var creditoracc=this.Grid.getStore().getAt(datacount).data['creditoraccount'];                    
                    if(creditoracc==undefined||creditoracc==""){
                        if(this.Grid.getStore().getAt(datacount).data['productdetail'].length>0){
                            var account=(this.isCustomer)?"Credit account":"Debit account";
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.fxexposure.warning"),WtfGlobal.getLocaleText("acc.field.Pleaseselect")+account], 2);
                            this.enableSaveButtons();
                            return;
                        } 
                    }            
                }
            }
            
//            if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA &&Wtf.isExciseApplicable){
//                for(var datacount=0;datacount<this.Grid.getStore().getCount()-1;datacount++){
//                    var dealerExcise=eval(this.Grid.getStore().getAt(datacount).data['dealerExciseDetails']); 
//                    var productname=this.Grid.getStore().getAt(datacount).data['productname']; 
//                    if(!Wtf.isEmpty(dealerExcise)){
//                       if(Wtf.isEmpty(dealerExcise[0].AssessableValue) || Wtf.isEmpty(dealerExcise[0].ManuAssessableValue) || Wtf.isEmpty(dealerExcise[0].PLARG23DEntry) || Wtf.isEmpty(dealerExcise[0].SupplierRG23DEntry) || Wtf.isEmpty(this.exciseFormPanel1.getForm().items.items[17].getValue()) || Wtf.isEmpty(this.exciseFormPanel1.getForm().items.items[18].getValue())){
//                           WtfComMsgBox([WtfGlobal.getLocaleText("acc.fxexposure.warning"),"Please fill all required field for dealer excise of product "+productname], 2); 
//                           this.enableSaveButtons();
////                           break;
//                           return;
//                       }
//                    }else{
//                       WtfComMsgBox([WtfGlobal.getLocaleText("acc.fxexposure.warning"),"Please fill all required field for dealer excise of product "+productname], 2); 
//                       this.enableSaveButtons();
////                       break;
//                       return;
//                    }
//                }
//            }
                if(Wtf.serialwindowflag || this.isblocked){
                    var prodLength=this.Grid.getStore().data.items.length;
                    for(var i=0;i<prodLength-1;i++)
                    { 
                        var prodID=this.Grid.getStore().getAt(i).data['productid'];
                        var prorec=this.Grid.productComboStore.getAt(this.Grid.productComboStore.find('productid',prodID));
                        if(prorec==undefined){
                            prorec=this.Grid.getStore().getAt(i);
                        }
                   if(Wtf.account.companyAccountPref.isBatchCompulsory || Wtf.account.companyAccountPref.isSerialCompulsory || Wtf.account.companyAccountPref.isLocationCompulsory || Wtf.account.companyAccountPref.isWarehouseCompulsory || Wtf.account.companyAccountPref.isRowCompulsory || Wtf.account.companyAccountPref.isRackCompulsory || Wtf.account.companyAccountPref.isBinCompulsory){ //if company level option is on then only check batch and serial details
                    if(!this.quotation && ((this.isOrder && this.isblocked)|| (this.autoGenerateDO.getValue()== true && (this.isInvoice || this.moduleid==Wtf.Acc_Invoice_ModuleId || this.moduleid==Wtf.Acc_Cash_Sales_ModuleId ||this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId)))&& (prorec.data.isBatchForProduct || prorec.data.isSerialForProduct || prorec.data.isLocationForProduct || prorec.data.isWarehouseForProduct || prorec.data.isRowForProduct || prorec.data.isRackForProduct  || prorec.data.isBinForProduct )){ 
                        if(prorec.data.type!='Service' && prorec.data.type!='Non-Inventory Part'){
                            var batchDetail= this.Grid.getStore().getAt(i).data['batchdetails'];
                            if((batchDetail == undefined || batchDetail == "" || batchDetail=="[]") && this.isAutoFillBatchDetails){
                                var recs=this.Grid.getStore().getAt(i);
                                recs.set('location',prorec.data.location);
                                recs.set('warehouse',prorec.data.warehouse);
                                WtfGlobal.setDefaultWarehouseLocation(null, recs,false,this.Grid,i);
                                batchDetail=this.Grid.getStore().getAt(i).data['batchdetails'];
                            }
                                var productQty= this.Grid.getStore().getAt(i).data['quantity'];
                                var baseUOMRateQty= this.Grid.getStore().getAt(i).data['baseuomrate'];
                            if(batchDetail == undefined || batchDetail == "" || batchDetail=="[]"){
                                    var validLineItem=this.Grid.checkbatchDetails(this.Grid);
                                    if(validLineItem!="" && validLineItem!=undefined){
                                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),(WtfGlobal.getLocaleText("acc.invoice.bsdetail")+validLineItem)],2); 
                                        this.enableSaveButtons();
                                        return;
                                    }else{
                                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoice.bsdetail")],2);  
                                        this.enableSaveButtons();
                                        return;
                                    }
                                }else{
                                     var jsonBatchDetails= eval(batchDetail);
                                     var batchQty=0;
                                  for(var batchCnt=0;batchCnt<jsonBatchDetails.length;batchCnt++){
                                         if(jsonBatchDetails[batchCnt].quantity>0){
                                             if(prorec.data.isSerialForProduct){
                                              batchQty=batchQty+ parseInt(jsonBatchDetails[batchCnt].quantity);
                                           }else{
                                              batchQty=batchQty+ parseFloat(jsonBatchDetails[batchCnt].quantity);
                                          }
                                         }
                                     }
                        
                                     if(batchQty.toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL) != (productQty*baseUOMRateQty).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL)){
                                        var validLineItem=this.Grid.checkBatchDetailQty(this.Grid);
                                        if(validLineItem!="" && validLineItem!=undefined){
                                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),("quantity does not match with batch quantity"+validLineItem)],2); 
                                            this.enableSaveButtons();
                                            return;
                                        }
//                                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoice.bsdetail")],2);
//                                         this.enableSaveButtons();
//                                         return;
                                     }                       
                                 }
                            }
                        var quantity=this.Grid.getStore().getAt(i).data['quantity'];
                        if (prorec.data.type != 'Service' && prorec.data.type != 'Non-Inventory Part') { // serial no for only inventory type of product
                            if (prorec.data.isSerialForProduct) {
                                var v = quantity;
                                v = String(v);
                                var ps = v.split('.');
                                var sub = ps[1];
                                if (sub!=undefined && sub.length > 0) {
                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.msg.exceptionMsgForDecimalQty")], 2);
                                    this.enableSaveButtons();
                                    return;
                                }
                            }
                        }
                    }
                   }
                }
            } 
            var productCountQuantityZero=0;
            this.allProductQtyZeroFlag = true;
            this.removeBlankQtyOnlyFlag=false;
            /**
             *isAtLeastOneProductHavingNonZeroQty:purpose of this flag is check atleast one of the product is having non zero quantity. 
             */
            var  isAtLeastOneProductHavingNonZeroQty=false;
              /**
               *this method check the allow zero quantity functionality is activated
               * or nor in system preferences
              **/
            this.allowZeroQuantity = WtfGlobal.checkAllowZeroQuantityForProduct(this.moduleid);
            if(!this.isExpenseInv)
            {
                var productNameHavingUnitPriceZero = "";
                var productStr="";
                for(var i=0;i<this.Grid.getStore().getCount()-1;i++){// excluding last row
                    var quantity=this.Grid.getStore().getAt(i).data['quantity'];
                    var rate=this.Grid.getStore().getAt(i).data['rate'];
                     /**
                      * if  Amend fuctionalityuser has activated for that user and purchase should 
                      * be greater that sales price,If not then system shows pop up msg.
                      */
                    if (this.isCustomer && Wtf.productPriceEditPerm.priceEditPerm.BlockAmendingPrice) {
                        var prodObj = {};
                        prodObj.originalValue=rate;
                        //ERP-40390
                        var includingGst=(this.includingGST!=undefined && this.includingGST.getValue())?true:false;
                        if(includingGst){
                            prodObj.originalValue=this.Grid.getStore().getAt(i).data['rateIncludingGst'];
                        }
                        
                        if (this.Grid.getamendprice(this.Grid.getStore().getAt(i),prodObj,true,includingGst)){
                                this.enableSaveButtons();
                                 productStr += this.Grid.getStore().getAt(i).data['productname']+","; 
                            }
                    }
                    if(quantity > 0) {
                        this.allProductQtyZeroFlag = false;
                        isAtLeastOneProductHavingNonZeroQty =true;
                    }else if(quantity===0){//For Counting how many rows with zero quantity
                        productCountQuantityZero++;
                    }else if(quantity===""){
                        /**
                            *This flag is true when product is having blank qty.
                           */
                        this.removeBlankQtyOnlyFlag=true;
                    }
                    if(rate===""||rate==undefined||rate<0){
                        if(productNameHavingUnitPriceZero==""){
                            productNameHavingUnitPriceZero +=this.Grid.getStore().getAt(i).data['productname'];
                        } else{
                            productNameHavingUnitPriceZero +=","+this.Grid.getStore().getAt(i).data['productname'];
                        }
                    } 

                    if (this.isJobWorkOrderReciever) {
                        var bom = this.Grid.getStore().getAt(i).data['bomid'];
                        if (!bom) {
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.BOMforProduct") + " " + this.Grid.getStore().getAt(i).data['productname'] + " " + WtfGlobal.getLocaleText("acc.field.cannotbeempty")], 2);
                            this.enableSaveButtons();
                            return;
                        }
                    }
                }
                if(productStr != "" && this.isCustomer && Wtf.productPriceEditPerm.priceEditPerm.BlockAmendingPrice ){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.blockamendingprice")+" For  Product name :- <b>"+ productStr.substring(0,productStr.length-1)+ "</b>"])
                    return;
                }
                if(productNameHavingUnitPriceZero!=""){//this condition will be true if any product will not have unit 
                    var msg = "";
                    if((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase)){// When user have no permission to dispaly unit price
                        msg = WtfGlobal.getLocaleText("acc.field.DefaultUnitPriceIsnotset")+" "+productNameHavingUnitPriceZero+WtfGlobal.getLocaleText("acc.msgbox.462");
                    } else{
                        msg = WtfGlobal.getLocaleText("acc.field.RateforProduct")+" "+this.Grid.getStore().getAt(i).data['productname']+" "+WtfGlobal.getLocaleText("acc.field.cannotbeempty");
                    }
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg], 2);
                    this.enableSaveButtons();
                    return;
                }
                   
                /**
                  *this block checks and to remove product with zero and blank qty.
                  */
                if(this.Grid.getStore().getCount()> 1 && !this.isExpenseInv && ((quantity === "" && !this.allowZeroQuantity) || quantity == undefined || (quantity <= 0 && !this.allowZeroQuantity))) {
                        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.invoicelist.alertmsgforblankorzeroqty")+'</center>' ,function(btn){
                            var store= this.Grid.getStore();
                            var quantity;
                            if(btn=="yes") {
                                if(store!=undefined && store.getCount()>0){
                                    for(var p=0;p<this.Grid.getStore().getCount()-1;p++){// excluding last row
                                        quantity=this.Grid.getStore().getAt(p).data['quantity'];
                                        if(!this.isExpenseInv && (quantity==="" || quantity===0)){//For Counting how many rows with  blank quantity 
                                            this.Grid.getStore().remove(this.Grid.getStore().getAt(p));
                                            p--;
                                        }
                                    }
                                }
                                this.enableSaveButtons();
                            }else{
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);
                                this.enableSaveButtons();
                            } 
                        },this);
                    return ;
                }
                /**
                 *method to remove the products with blank qty.
                 */
                if( this.Grid.getStore().getCount()> 1 && this.removeBlankQtyOnlyFlag && this.allowZeroQuantity){
                        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.invoicelist.alertmsgforblankqty")+'</center>' ,function(btn){
                            var store= this.Grid.getStore();
                            var quantity;
                            if(btn=="yes") {
                                if(store!=undefined && store.getCount()>0 ){
                                    for(var p=0;p<this.Grid.getStore().getCount()-1;p++){// excluding last row
                                        quantity=this.Grid.getStore().getAt(p).data['quantity'];
                                        if(!this.isExpenseInv && quantity==="" ){//For Counting how many rows with  blank quantity 
                                            this.Grid.getStore().remove(this.Grid.getStore().getAt(p));
                                            p--;
                                        }
                            
                                    }
                                }
                                this.enableSaveButtons();
                            }else{
                                /**
                                 *if use clicks on no button then set the quantity to zero if product is having blank qty. 
                                 */
                                if(store!=undefined && store.getCount()>0 ){
                                    for(var p=0;p<this.Grid.getStore().getCount()-1;p++){// excluding last row
                                        quantity=this.Grid.getStore().getAt(p).data['quantity'];
                                        if(!this.isExpenseInv && quantity==="" ){//For Counting how many rows with  blank quantity 
                                            this.Grid.getStore().getAt(p).set('quantity',0);
//                                            p--;
                                        }else if(quantity>0){
                                            /**
                                             *isAtLeastOneProductHavingNonZeroQty:purpose of this flag is check atleast one of the product is having non zero quantity. 
                                             */
                                            isAtLeastOneProductHavingNonZeroQty = true;
                                        }
                                    }
                                    /**
                                 *this block used to restrict that transaction with zero qty for all products.
                                 * i.e we cannot save document if all the products having zero quantity. 
                                 */
                                if(!isAtLeastOneProductHavingNonZeroQty && (this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Invoice_ModuleId) && this.allowZeroQuantity){
                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);//You cannot make Transaction with Zero or Blank Quantity.
                                    this.enableSaveButtons();
                                    return ;
                                }
                                }
                                this.enableSaveButtons();
                                this.formValidationBeforeSave();
                            } 
                        },this);
                        this.enableSaveButtons();
                        return;
                }
                 /**
                   *this block used to restrict that transaction with zero qty for all products.
                   * i.e we cannot save document if all the products having zero quantity. 
                  */
                if(!isAtLeastOneProductHavingNonZeroQty && (this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Invoice_ModuleId)){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);//You cannot make Transaction with Zero or Blank Quantity.
                    this.enableSaveButtons();
                    return ;
                }
                
            }
                else
                {
                    for (var i = 0; i < this.ExpenseGrid.getStore().getCount(); i++) {// including last row
                        var rate = this.ExpenseGrid.getStore().getAt(i).data['rate'];
                        var rec = this.ExpenseGrid.getStore().getAt(i);
                        var accId = rec.data['accountid'];
                        if (accId != null && accId != undefined && accId != '')
                        {
                            var record = WtfGlobal.searchRecord(this.ExpenseGrid.accountStore, accId, 'accountid');
                            if (record != null && record != undefined)
                            {
                                var accName = record.data['accountname'];
                                if (this.isExpenseInv && rate === "" || rate == undefined || rate < 0)
                                {
                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.RateforAccount") + " " + accName + " " + WtfGlobal.getLocaleText("acc.field.cannotbeempty")], 2);
                                    this.enableSaveButtons();
                                    return;
                                }
                            }
                        } else {
                            if (this.ExpenseGrid.getStore().getCount() <= 1) {//For Normal Empty Check
                                 WtfComMsgBox(117, 2)
                                this.enableSaveButtons();
                                return;
                            } else {
                                var discountamount = this.ExpenseGrid.getStore().getAt(i).data['discountamount'];
                                var taxamount = this.ExpenseGrid.getStore().getAt(i).data['taxamount'];
                                var discountpercent = this.ExpenseGrid.getStore().getAt(i).data['prdiscount'];
                                var taxid = this.ExpenseGrid.getStore().getAt(i).data['prtaxid'];
                               /* If any of the field is selected without selecting any account then showing alert*/
                                if (this.isExpenseInv && (rate != "" || discountamount != 0 || taxamount != 0 || discountpercent != 0 || taxid != "")) {
                                    WtfComMsgBox(117, 2)
                                    this.enableSaveButtons();
                                    return;
                                }
                            }
                        }
                    }
            }
//            
//            if(!this.isCustBill && (Wtf.account.companyAccountPref.invAccIntegration && Wtf.account.companyAccountPref.isUpdateInvLevel && ((Wtf.account.companyAccountPref.withinvupdate && (!this.isInvoice && !this.isOrder)) || (!Wtf.account.companyAccountPref.withinvupdate && !this.isOrder)))){
//                
//                var validstore=WtfGlobal.isValidInventoryInfo(this.Grid.getStore(),'invstore');
//                if(!validstore){
//                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.Pleaseselectvalidinventorystore")], 2);
//                    return;
//                }
//                
//                var validloc=WtfGlobal.isValidInventoryInfo(this.Grid.getStore(),'invlocation');
//                if(!validloc){
//                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.Pleaseselectvalidinventorylocation")], 2);
//                    return;
//                }
//            }
            
            this.formValidationBeforeSave();
        }else{
            WtfComMsgBox(2, 2);
            this.WarnMessage=true;
            this.enableSaveButtons();
        }
    }else{
          WtfComMsgBox([WtfGlobal.getLocaleText("acc.fxexposure.warning"),WtfGlobal.getLocaleText("acc.field.PleaseTryothervalueinInvoiceNumber")], 1); 
          this.enableSaveButtons();
     }
    }, 
    formValidationBeforeSave:function(){
    var incash=false;
    var count=this.Grid.getStore().getCount();
    if(count<=1){//For Normal Empty Check
        this.isExpenseInv? WtfComMsgBox(117, 2):WtfComMsgBox(33, 2);  //for exoense invoice change the message
        this.enableSaveButtons();
        return;
    }
    
    /**
     *Function to used restrict PO creation if the total price of PO is less than Min value given for selected vendor
     */
    if(this.blockPOcreationWithMinvalueForVendor()){
        this.enableSaveButtons();
        return;
    }
    /**
     *this block checks the product type so that the JE for that product is posted 
     *through backend. and the JE is posted backendly the we restrict that transaction with zero qty
     */
    //    if(this.Grid.calSubtotal()<=0 && (this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Invoice_ModuleId)){
    //        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoicelist.youcannotmaketrasactionwithzeroquantity")], 2);//You cannot make Transaction with Zero or Blank Quantity.
    //        this.enableSaveButtons();
    //        return ;
    //    }
    if(this.allProductQtyZeroFlag && !this.isExpenseInv && !this.allowZeroQuantity){ //for quantity Check in case of mapped products
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.ZeroQuantityAllProduct")], 2);
        this.enableSaveButtons();
        return;
    }                        
    if(this.getDiscount()>this.Grid.calSubtotal()){
        WtfComMsgBox(12, 2);
        this.enableSaveButtons();
        return;
    }
    if(!(this.isExpenseInv==true)){
        if(!Wtf.account.companyAccountPref.allowZeroUntiPriceForProduct && !this.allowZeroQuantity){
            if(this.Grid.calSubtotal()<=0){
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.TotalamountshouldbegreaterthanZero")], 2);
                this.enableSaveButtons();
                return;
            }
        }
    }
    // Checking for deactivated products
    var inValidProducts=this.checkForDeActivatedProductsAdded();
    if(inValidProducts!=''){
        inValidProducts = inValidProducts.substring(0, inValidProducts.length-2);
        Wtf.MessageBox.show({
            title: WtfGlobal.getLocaleText("acc.common.warning"), 
            msg: WtfGlobal.getLocaleText("acc.common.followingProductsAreDeactivated")+'</br>'+'<b>'+inValidProducts+'<b>',
            buttons: Wtf.MessageBox.OK,
            icon: Wtf.MessageBox.WARNING,
            scope: this,
            scopeObj :this,
            fn: function(btn){
                if(btn=="ok"){
                    this.enableSaveButtons();
                    return;
                }
            }
        });
        return;
    } 
    if(Wtf.account.companyAccountPref.countryid=='137' && this.isSelfBilledInvoice){// For Malasian Company
        var rec = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
        var selfBilledFromDate=(rec.data.selfBilledFromDate);
        var selfBilledToDate= (rec.data.selfBilledToDate);
        var purchaseInvoiceDate=this.billDate.getValue();
        if((selfBilledFromDate==null || selfBilledFromDate=="")){
            Wtf.MessageBox.show({
                title: WtfGlobal.getLocaleText("acc.common.warning"), //'Warning',
                msg: "Self-Billed Invoice Dates are not set for vendor "+rec.data.accname+". Please set Self-billed Approval Start Date and Self-billed Approval Expiry Date first.",  //this.closeMsg,
                buttons: Wtf.MessageBox.OK,
                animEl: 'mb9',
                icon: Wtf.MessageBox.QUESTION
            });
            return;
        }else if(((selfBilledFromDate!=null && selfBilledFromDate!="") && (selfBilledToDate!=null && selfBilledToDate!=""))){
            if(!(new Date(purchaseInvoiceDate).between(selfBilledFromDate, selfBilledToDate))){
                Wtf.MessageBox.show({
                    title: WtfGlobal.getLocaleText("acc.common.warning"), //'Warning',
                    msg: "Purchase Invoice Date should be between Self-billed Approval Start Date "+ WtfGlobal.convertToDateOnly(rec.data.selfBilledFromDate)+" and Self-billed Approval Expiry Date " +WtfGlobal.convertToDateOnly(rec.data.selfBilledToDate),  //this.closeMsg,
                    buttons: Wtf.MessageBox.OK,
                    animEl: 'mb9',
                    icon: Wtf.MessageBox.QUESTION
                });
                this.enableSaveButtons();
                return;
            }
        }else if(selfBilledToDate==null || selfBilledToDate==""){
            if(!(new Date(purchaseInvoiceDate)>=(selfBilledFromDate))){
                Wtf.MessageBox.show({
                    title: WtfGlobal.getLocaleText("acc.common.warning"), //'Warning',
                    msg: "Purchase Invoice Date should be after Self-billed Approval Start Date "+ WtfGlobal.convertToDateOnly(rec.data.selfBilledFromDate),  //this.closeMsg,
                    buttons: Wtf.MessageBox.OK,
                    animEl: 'mb9',
                    icon: Wtf.MessageBox.QUESTION
                });
                this.enableSaveButtons();
                return;
            }
        }
    }
        
    //check is there duplicate product in transaction
    var isDuplicate=false;
    var duplicateval=", ";
    var prodLength=this.Grid.getStore().data.items.length;
            
    if(!this.isExpenseInv && Wtf.account.companyAccountPref.isDuplicateItems){
        for(var i=0;i<prodLength-1;i++)
        { 
            var prodID=this.Grid.getStore().getAt(i).data['productid'];
            for(var j=i+1;j<prodLength-1;j++){
                var productid=this.Grid.getStore().getAt(j).data['productid'];
                if(prodID==productid){
                    isDuplicate = true;
                    prorec=this.Grid.getStore().getAt(this.Grid.getStore().find('productid',prodID));//done for ERP-13480 ticket
                    //prorec=this.Grid.productComboStore.getAt(this.Grid.productComboStore.find('productid',prodID));
                    if(duplicateval.indexOf(", "+prorec.data.pid+",")==-1){
                        duplicateval += prorec.data.pid+", ";//Add duplicate product id 
                                    
                    }
                }
            }
        }
    }
    if(isDuplicate == true){
        duplicateval = duplicateval.substring(2,(duplicateval.length - 2));
    }
    var confirmMsg ="";
    if(this.productCountQuantityZero>0 && isDuplicate==true){
        confirmMsg = duplicateval+" "+WtfGlobal.getLocaleText("acc.field.duplicateproduct")+" and "+WtfGlobal.getLocaleText("acc.field.ZeroQuantitySomeProduct");
    } else if(this.productCountQuantityZero>0 && !Wtf.account.companyAccountPref.dependentField && !this.allowZeroQuantity) {
        confirmMsg = WtfGlobal.getLocaleText("acc.field.ZeroQuantitySomeProduct");
    } else if(isDuplicate==true) {//duplicate product case
        confirmMsg =duplicateval+" "+ WtfGlobal.getLocaleText("acc.field.duplicateproduct")+". "+WtfGlobal.getLocaleText("acc.msgbox.Doyouwanttoproceed");
    }
    var detail = this.Grid.getProductDetails();
          
    if(this.isCustomer && !Wtf.account.companyAccountPref.isnegativestockforlocwar && (Wtf.account.companyAccountPref.isLocationCompulsory || Wtf.account.companyAccountPref.isWarehouseCompulsory)){
        var jsonBatchDetails= eval(detail);
        this.blockQtyFlag = false;
        if(this.autoGenerateDO.getValue() == true || (this.isOrder && this.isblocked)){     //SDP-12875
            var linkValue =  parseInt(Wtf.getCmp(this.id).fromLinkCombo.getValue());
            if(!isNaN(linkValue) && linkValue===0 && !this.isEdit){ // If Linked SO
                this.blockQtyFlag = true;
            }
        }
        var numberofisAutoAssemblyProdsInGrid = 0;
//        var warehouseStore = Wtf.inventoryStore;
//        if (warehouseStore.data.items.length==0 && this.autoGenerateDO.getValue() == true){
//            //None of the store is assigned to current user  
//            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.storenottouser")],2);   //"Product(s) details are not valid."
//            this.enableSaveButtons();
//            return;
//        }
        var batchfilledqty = {};
        var availqty = {};  
        for (var i = 0; i < prodLength - 1; i++) {
            var batchdetailsDtl=jsonBatchDetails[i].batchdetails;
            var prodID = this.Grid.getStore().getAt(i).data['productid'];
            var prorec = this.Grid.productComboStore.getAt(this.Grid.productComboStore.find('productid', prodID));
            if (prorec == undefined) {
                prorec = this.Grid.getStore().getAt(i);
            }
            if(prorec.data.isAutoAssembly){
                numberofisAutoAssemblyProdsInGrid++;
            }
            if(this.autoGenerateDO.getValue() == true || (this.isOrder && this.isblocked)){
            if (prorec != undefined && prorec.data != undefined && prorec.data.type != 'Service' && prorec.data.type != 'Non-Inventory Part') {
                if ((batchdetailsDtl == "" || batchdetailsDtl == undefined || batchdetailsDtl == "[]") && this.autoGenerateDO.getValue() == true && (prorec.data.isBatchForProduct || prorec.data.isSerialForProduct || prorec.data.isLocationForProduct || prorec.data.isWarehouseForProduct || prorec.data.isRowForProduct || prorec.data.isRackForProduct || prorec.data.isBinForProduct)) {
//                   WtfComMsgBox([WtfGlobal.getLocaleText("acc.fxexposure.warning"), WtfGlobal.getLocaleText("acc.invoice.bsdetail")], 2);
//                    this.enableSaveButtons();
//                    return;
                    var validLineItem=this.Grid.checkbatchDetails(this.Grid);
                    if(validLineItem!="" && validLineItem!=undefined){
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),(WtfGlobal.getLocaleText("acc.invoice.bsdetail")+validLineItem)],2); 
                        this.enableSaveButtons();
                        return;
                    }
                }
//                var storeAssignedtoUser = !Wtf.isEmpty(warehouseStore) ? WtfGlobal.searchRecordIndex(warehouseStore, jsonBatchDetails[i].warehouse, 'id') : "";
//                if (storeAssignedtoUser == - 1) {
//                //Default Store for this product is not assigned to current user
//                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), "Default Store for product " + prorec.data.pid + " is not assigned to current user." ], 2); //"Product(s) details are not valid."
//                    this.enableSaveButtons();
//                    return;
//                }
            }
            if(!prorec.data.isSerialForProduct && batchdetailsDtl!=undefined && batchdetailsDtl!="[]" && batchdetailsDtl!="" && this.autoGenerateDO.getValue() == true){
               var json_batch_details = eval(batchdetailsDtl);           
               var batchfilledquantity = 0;
               var batchavialblequantity = 0;
            for(var batchCnt=0;batchCnt<json_batch_details.length;batchCnt++){
                if(json_batch_details[batchCnt].purchasebatchid){

                                var batchid = json_batch_details[batchCnt].purchasebatchid;
                                if(json_batch_details[batchCnt].quantity!=undefined && json_batch_details[batchCnt].quantity!=""){
                                batchfilledquantity = parseFloat(getRoundofValue(json_batch_details[batchCnt].quantity).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL));    
                                }                                 
                                if (Wtf.account.companyAccountPref.isAutoFillBatchDetails != undefined && Wtf.account.companyAccountPref.isAutoFillBatchDetails == true && json_batch_details[batchCnt].avialblequantity!=undefined && json_batch_details[batchCnt].avialblequantity!=""){
                                batchavialblequantity = parseFloat(getRoundofValue(json_batch_details[batchCnt].avialblequantity).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL));
                                } else if(json_batch_details[batchCnt].avlquantity!=undefined && json_batch_details[batchCnt].avlquantity!=""){
                                batchavialblequantity = parseFloat(getRoundofValue(json_batch_details[batchCnt].avlquantity).toFixed(Wtf.QUANTITY_DIGIT_AFTER_DECIMAL));
                                }
                                if (batchfilledqty[batchid]){
                                batchfilledqty[batchid] += batchfilledquantity;
                                } else {
                                batchfilledqty[batchid] = batchfilledquantity;
                                }
                                availqty[batchid] = parseFloat(batchavialblequantity);
                                        if (availqty[batchid] < batchfilledqty[batchid]){
                                if (Wtf.account.companyAccountPref.negativestock == 1) {
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.field.QuantitygiveninDoareexceedingthequantityavailable")], 2);
                                        this.enableSaveButtons();
                                        return;
                                }
                                }
                               }
            } 
            }                        
        }
    }  
    if (((this.autoGenerateDO.getValue() == true && !this.isEdit) || (this.isOrder && this.isblocked)) || (this.moduleid == Wtf.Acc_Sales_Order_ModuleId && numberofisAutoAssemblyProdsInGrid > 0)) {
        Wtf.Ajax.requestEx({
            url: "ACCInvoice/getBatchRemainingQuantity.do",
            params: {
                detail:detail,
                transType:this.moduleid,
                isEdit:this.isEdit,
                fromSubmit:false,
                isfromdo:true,
                linkflag:this.blockQtyFlag
            }
        },this,function(res,req){
            this.AvailableQuantity=res.quantity; 
            var maxBuildQty=res.maxBuildQty; // will be set for only assembly type product
            var isQtySufficient=res.isQtySufficient;// will be set for only assembly type product
            this.prodname="";            
            this.prodname=res.prodname;
            if(this.moduleid == Wtf.Acc_Sales_Order_ModuleId && isQtySufficient==false){  //SDP-12875
                this.prodname=res.productName;
            }
            if(this.prodname=="" ||this.prodname==undefined || (this.prodname != undefined && this.prodname != "" &&  maxBuildQty != "" && maxBuildQty != undefined && isQtySufficient != "" && isQtySufficient != undefined && isQtySufficient == true)){
                this.isEnoughQtyForAssemblyProduct = true;
                this.Callfinalsavedetails(rec,incash,confirmMsg,count);
                return;
            }else{
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.quantityforprod")+" <b>"+this.prodname+"</b> " + WtfGlobal.getLocaleText("acc.field.isnotvalid")], 2);
                this.enableSaveButtons();
                this.isEnoughQtyForAssemblyProduct = false; //Any one of the Assembly Product do not have enough BOM Quantity.
                return false;
            }

        },function(res,req){
            this.enableSaveButtons();
            this.isEnoughQtyForAssemblyProduct = false; //If any exception occurs.
            return false;
        });
    } else{
        if (this.autoGenerateDO.getValue() == false || !(this.isOrder && this.isblocked)){  //ERP-37156
            this.Callfinalsavedetails(rec, incash, confirmMsg, count);
            }
        }
    }else{
        this.Callfinalsavedetails(rec,incash,confirmMsg,count);
        }
},
    Callfinalsavedetails:function(rec,incash,confirmMsg,count){
        if(confirmMsg!=""){
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),confirmMsg+'</center>' ,function(btn){
                if(btn=="yes") {
                    this.createRecords(incash);
                }else{
                    this.enableSaveButtons();
                    return;
                }
            },this);
        }else{
           if(!this.isExpenseInv){
                this.checklastproduct(incash,count);
            }else{
                this.createRecords(incash);
            }
        }
    },
     blockPOcreationWithMinvalueForVendor:function(){
    /**
     *Wtf.account.companyAccountPref.blockPOcreationwithMinValue:chec kfor company preference setting to activate the Block PO creation with Min price for vendor
     *This block execute only for purchase order and used restrict PO creation if the total price of PO is less than Min Price value given for selected vendor
     */
    if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId && Wtf.account.companyAccountPref.blockPOcreationwithMinValue){
        var vendorRecord = WtfGlobal.searchRecord(Wtf.vendorAccRemoteStore, this.Name.getValue(), 'accid');
        var POcurrencyRecord = WtfGlobal.searchRecord(this.Currency.store, this.Currency.getValue(), 'currencyid');
        var vendorcurrencyRecord = WtfGlobal.searchRecord(this.Currency.store, vendorRecord.data.currencyid, 'currencyid');
        var minpricevalueforvendor = vendorRecord.data.minPriceValueForVendor;
        /**
         *This block checks if the currency for vendor and PO transaction is same.
         *So No conversion is required
         */
        if(minpricevalueforvendor!="" && minpricevalueforvendor!=undefined){
            if(vendorcurrencyRecord.data.currencyid==POcurrencyRecord.data.currencyid){
                if(this.Grid.calSubtotal()<minpricevalueforvendor){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.BlockPOcreationAlert")+" "+'<b>'+minpricevalueforvendor+" "+POcurrencyRecord.data.symbol+'</b>'], 2);
                    return true;
                }
            }else{
                /**
                 *if the currency of vendor and PO transaction is different then we are convering the total price in Vendor's currency
                 *and then we restrict PO if the total price of PO is less than Min Price value given for selected vendor
                 *below line converting the total price from base currency to vendor currency
                 */
                var totalPriceInBaseCurrency = this.Grid.calSubtotal() / POcurrencyRecord.data.exchangerate;//get total price In base currency
                var totalpriceInvendorCurrency = totalPriceInBaseCurrency * vendorcurrencyRecord.data.exchangerate;//get total price In Vendor currency(here this.Grid.calSubtotalInBase not used because it is rounded off. )
                if(totalpriceInvendorCurrency < minpricevalueforvendor){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.BlockPOcreationAlert")+" "+'<b>'+minpricevalueforvendor+" "+POcurrencyRecord.data.symbol+'</b>'], 2);
                    return true; 
                }
            }
        }
    }  
},
checklastproduct:function(incash,count){
    if(this.Grid.getStore().getAt(count-1).data['pid']!="" && this.Grid.getStore().getAt(count-1).data['productid']==""){
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.common.productWithSpecifiedId")+" "+this.Grid.getStore().getAt(count-1).data['pid']+" "+WtfGlobal.getLocaleText("acc.common.productDoesNotExistsOrInDormantState")+". "+WtfGlobal.getLocaleText("acc.accPref.productnotFoundonSave")+'</center>' ,function(btn){
            if(btn=="yes") {
                this.createRecords(incash);
            }else{
                this.enableSaveButtons();
                return;
            } 
        },this);                
    }else{
        this.createRecords(incash);
    } 
         
},
    createRecords:function(incash){
      
            
//            var datediff=new Date(this.billDate.getValue()).getElapsed(this.DueDate.getValue());
//            if(datediff==0)
//                  incash=true;
//              else
            incash=this.cash;
            var rec=this.NorthForm.getForm().getValues();
            if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && Wtf.isExciseApplicable && this.isExciseTab ){
                var indiaExcise=(this.isExciseTab && (this.exciseFormPanel1.getForm().items.length>0))?this.exciseFormPanel1.getForm().getValues():"";
                if(!Wtf.isEmpty(indiaExcise)){
                    if(!Wtf.isEmpty(this.record) && !Wtf.isEmpty(this.record.data)){
                        indiaExcise.id= !Wtf.isEmpty(this.record.data.exciseDetailid)?this.record.data.exciseDetailid:"";
                    }
                    indiaExcise.supplierState=!Wtf.isEmpty(this.state.getValue())?this.state.getValue():"";
                    indiaExcise.InvoiceDateManuFacture=!Wtf.isEmpty(this.InvoiceDateManuFacture.getValue())?WtfGlobal.convertToGenericDate(this.InvoiceDateManuFacture.getValue()):"";
//                    indiaExcise.registrationType=!Wtf.isEmpty(this.registrationTypeCombo.getValue())?this.registrationTypeCombo.getValue():"";                  
//                    indiaExcise.manufacturerType=!Wtf.isEmpty(this.manufacturerTypeCombo.getValue())?this.manufacturerTypeCombo.getValue():"";     
//                    indiaExcise.UnitName=!Wtf.isEmpty(this.UnitName)?this.UnitName.getValue():"";
//                    indiaExcise.ECCNo=!Wtf.isEmpty(this.ECCNo)?this.ECCNo.getValue():"";

                    rec.indiaExcise=Wtf.encode(indiaExcise);
                }
            }
            rec.GSTApplicable=this.isGST; // ERP-32829 
            rec.gstCurrencyRate=this.gstCurrencyRate;
            rec.GTAApplicable=this.GTAApplicable.getValue();
            rec.isMerchantExporter=this.isMerchantExporter.getValue();
            if(this.isIndonesian && this.additionalMemoComboBox) {
                rec.additionalMemo = this.additionalMemoComboBox.getValue();
            }
            rec.isselfbilledinvoice=this.isSelfBilledInvoice;
            if(rec.vendor==undefined&&this.linkIDSFlag!=undefined&&this.linkIDSFlag){
                rec.vendor=this.Name.getValue();
            }
            if(rec.customer==undefined&&this.linkIDSFlag!=undefined&&this.linkIDSFlag){
                rec.customer=this.Name.getValue();
            }
            this.isGenerateReceipt = this.generateReceipt.getValue();
            this.isAutoCreateDO = this.autoGenerateDO.getValue();
            rec.islockQuantity =this.lockQuantity.getValue();
            rec.isreserveStockQuantity =this.reserveStock.getValue();
            if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
                rec.profitMargin= this.finalproductprofitmargin ;
                rec.profitMarginPercent= this.finalproductprofitmarginpercent;
            }
            rec.billdate=WtfGlobal.convertToGenericDate(this.billDate.getValue());
        if (this.autoGenerateDO.getValue()) {
            if(this.inventoryJESeqFormatID!=undefined && this.inventoryJESeqFormatID!=""){
                rec.inventoryJESeqFormatID=this.inventoryJESeqFormatID;
            }
            if(this.inventoryJESeqNumber!=undefined && this.inventoryJESeqNumber!=""){
                rec.inventoryJESeqNumber = this.inventoryJESeqNumber;   
            }
            if(this.inventoryJEIsAutoGenerated!=undefined && this.inventoryJEIsAutoGenerated!=""){
                rec.inventoryJEIsAutoGenerated = this.inventoryJEIsAutoGenerated;   
            }
            if(this.inventoryJENumber!=undefined && this.inventoryJENumber!=""){
                rec.inventoryJENumber = this.inventoryJENumber;   
            }
            if(this.inventoryJEDatePrefixValue!=undefined && this.inventoryJEDatePrefixValue!=""){
                rec.inventoryJEDatePrefixValue = this.inventoryJEDatePrefixValue;   
            }
            if(this.inventoryJEDateSuffixValue!=undefined && this.inventoryJEDateSuffixValue!=""){
                rec.inventoryJEDateSuffixValue = this.inventoryJEDateSuffixValue;   
            }
            if(this.inventoryJEId!=undefined && this.inventoryJEId!=""){
                rec.inventoryJEId = this.inventoryJEId;   
            }
        }
        /**
         * in edit mode of 'Cash Sales', need to add termid. 
         */
        if (this.cash) {
            rec.termid = (this.record != undefined && this.record != null) ? ((this.record.data != undefined && this.record.data != null) ? this.record.data.termid : "" ) : "";
        } else {
            this.updateDueDate("", "", "", true);
                }
        if (this.termid != undefined && this.termid != null && this.termid != "") {
            rec.termid = this.termid;
        }
        this.ajxurl = ""; 
            if(this.businessPerson=="Customer"){
    //(this.isOrder?(this.isCustBill?51:41):(this.isCustBill?13:11))
                    if(this.quotation)
                            this.ajxurl = "ACCSalesOrder/saveQuotation.do";
                    else
//                            this.ajxurl = "ACC" + (this.isOrder?(this.isCustBill?"SalesOrder/saveBillingSalesOrder":"SalesOrder/saveSalesOrder"):(this.isCustBill?"Invoice/saveBillingInvoice":"Invoice/saveInvoice")) + ".do";
                            this.ajxurl = "ACC" + (this.isOrder?(this.isCustBill?"SalesOrder/saveBillingSalesOrder":"SalesOrder/saveSalesOrder"):(this.isCustBill?"Invoice/saveBillingInvoice":"InvoiceCMN/saveInvoice")) + ".do";
        }else if(this.businessPerson=="Vendor"){
                if(this.quotation){
                    this.ajxurl = "ACCPurchaseOrder/saveQuotation.do";
                } else {
                    this.ajxurl = "ACC"+ (this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId?"PurchaseOrder/saveSecurityGateEntry":this.isOrder?(this.isCustBill?"PurchaseOrder/saveBillingPurchaseOrder":"PurchaseOrder/savePurchaseOrder"):(this.isCustBill?"GoodsReceipt/saveBillingGoodsReceipt":"GoodsReceipt/saveGoodsReceipt")) +".do";
                }
                
            }
            var currencychange=this.Currency.getValue()!=WtfGlobal.getCurrencyID()&&this.Currency.getValue()!=""&&!this.isOrder;
            var msg=currencychange?WtfGlobal.getLocaleText("acc.field.Currencyrateyouhaveappliedcannotbechanged"):"";           
            var detail = this.Grid.getProductDetails();
//            if(!this.isExpenseInv)
                var validLineItem=this.Grid.checkDetails(this.Grid);
            if(validLineItem!="" && validLineItem!=undefined){
               WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),(WtfGlobal.getLocaleText("acc.msgbox.lineitem")+validLineItem)],2); 
               this.enableSaveButtons();
               return;
            }
          
            if(detail == undefined || detail == "[]"){
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.invoice.msg12")],2);   //"Product(s) details are not valid."
                this.enableSaveButtons();
                return;
            }
            if(Wtf.account.companyAccountPref.memo== true && (rec.memo==""))    //memo related setting wether option is true
            {
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.savdat"),WtfGlobal.getLocaleText({
                    key:"acc.common.memoempty",
                    params:[Wtf.account.companyAccountPref.descriptionType]
                }),function(btn){
                    if(btn!="yes") {
                        this.enableSaveButtons();
                        return;
                    }
                    this.checkiflinkdo(rec,detail,incash);                              
                },this);  
            }else {
                this.checkiflinkdo(rec,detail,incash);             
            }
    }, 
    checkMemo:function(rec,detail,incash){
               if(this.businessPerson=="Vendor" && !this.isOrder){//Only for cash purchase and vendor invoice
                    Wtf.Ajax.requestEx({
                        url:"ACCReports/getAccountsExceedingBudget.do",
                        params: {
                            detail: detail,
                            stdate: this.getDates(true).format("M d, Y h:i:s A"),
                            enddate: this.getDates(false).format("M d, Y h:i:s A"),
                            isExpenseInv: this.isExpenseInv,
                            billdate:WtfGlobal.convertToGenericDate(this.billDate.getValue())
                        }
                    },this,function(response){
                        if(response.data && response.data.length > 0){
                            var accMsg = WtfGlobal.getLocaleText("acc.field.FollowingAccountsareexceedingtheirMonthlyBudgetLimit")+"<br><br><center>";
                            var budgetMsg = "";
                            for(var i=0; i< response.data.length; i++){
                                var recTemp = response.data[i];
                                if (!this.isCustBill)
                                    budgetMsg = (recTemp.productName == "" ? "" : "<b>"+WtfGlobal.getLocaleText("acc.field.Product")+"</b>" + recTemp.productName + ",") + " <b>"+WtfGlobal.getLocaleText("acc.field.Account")+" </b>" + recTemp.accountName + ", <b>"+WtfGlobal.getLocaleText("acc.field.Balance")+" </b>" + recTemp.accountBalance + ", <b>"+WtfGlobal.getLocaleText("acc.field.Budget")+"</b>" + recTemp.accountBudget;
                                else
                                    budgetMsg = (recTemp.productName == "" ? "" : "<b>"+WtfGlobal.getLocaleText("acc.field.JobDescription")+" </b>" + recTemp.productName + ",") + " <b>"+WtfGlobal.getLocaleText("acc.field.Account")+" </b>" + recTemp.accountName + ", <b>"+WtfGlobal.getLocaleText("acc.field.Balance")+"</b>" + recTemp.accountBalance + ", <b>"+WtfGlobal.getLocaleText("acc.field.Budget")+" </b>" + recTemp.accountBudget;
                                accMsg += budgetMsg + "<br>";
                            }

                            accMsg += "<br>"+WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed")+"</center>";
                            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),accMsg,function(btn){
                                if(btn!="yes") {
                                    this.enableSaveButtons();
                                    return;
                                }
                                this.validateITCProductAndCheckLimit(rec,detail,incash);
                            },this);
                        }else{
                            this.validateITCProductAndCheckLimit(rec,detail,incash);
                        }
                    },function(response){
                        this.validateITCProductAndCheckLimit(rec,detail,incash);
                    });

                }else{
                    this.validateITCProductAndCheckLimit(rec,detail,incash);
                } 
             
   },
    
   saveTemplate : function(){
        if(this.createTransactionAlso){
//            this.transactionType = 1;
            this.save();
            Wtf.getCmp("emailbut" + this.id).show();
            Wtf.getCmp("exportpdf" + this.id).show();
        }else{
            if(this.Name.getValue() == ''){
                    var fieldLabel = this.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.cust"):WtfGlobal.getLocaleText("acc.invoiceList.ven") ; //this.businessPerson+"*",
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.Pleaseselect")+fieldLabel], 2);
                    this.enableSaveButtons();
                    return;
            }
            var southFormValid = true;
            if(this.cash){
              southFormValid = this.SouthForm.hidden ? true : this.SouthForm.getForm().isValid(); 
            }
            var isValidCustomFields=this.tagsFieldset.checkMendatoryCombo();
            if(this.NorthForm.getForm().isValid() && isValidCustomFields && southFormValid) {
                if(this.isCustBill){
                    for(var datacount=0;datacount<this.Grid.getStore().getCount();datacount++){
                        var creditoracc=this.Grid.getStore().getAt(datacount).data['creditoraccount'];                    
                        if(creditoracc==undefined||creditoracc==""){
                            if(this.Grid.getStore().getAt(datacount).data['productdetail'].length>0){
                                var account=(this.isCustomer)?"Credit account":"Debit account";
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.Pleaseselect")+account], 2);
                                this.enableSaveButtons();
                                return;
                            } 
                        }            
                    }
                    var count=this.Grid.getStore().getCount();
                    if(count<=1){
                        WtfComMsgBox(33, 2);
                        this.enableSaveButtons();
                        return;
                    }  
                }
                
                var productCountQuantityZero=0;
                var allProductQtyZeroFlag = true;
                var productNameHavingUnitPriceZero = "";
                for(var i=0;i<this.Grid.getStore().getCount()-1;i++) { // excluding last row
                    var quantity=this.Grid.getStore().getAt(i).data['quantity'];
                    var rate=this.Grid.getStore().getAt(i).data['rate'];
                    if(!this.isExpenseInv && (quantity===""||quantity==undefined||quantity<0)){
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.QuantityforProduct")+" "+this.Grid.getStore().getAt(i).data['productname']+" "+WtfGlobal.getLocaleText("acc.field.shouldbegreaterthanZero")], 2);
                        this.enableSaveButtons();
                        return;
                    } 
                    if(!this.isExpenseInv && quantity > 0) {
                        allProductQtyZeroFlag = false; 
                    }else if(!this.isExpenseInv && quantity==0){//For Counting how many rows with zero quantity
                        productCountQuantityZero++;
                    }
                    if(!this.isExpenseInv && (rate===""||rate==undefined||rate<0)){
                        if(productNameHavingUnitPriceZero==""){
                            productNameHavingUnitPriceZero +=this.Grid.getStore().getAt(i).data['productname'];
                        } else{
                            productNameHavingUnitPriceZero +=","+this.Grid.getStore().getAt(i).data['productname'];
                        }
                    } 
                    if (this.isJobWorkOrderReciever) {
                        var bom = this.Grid.getStore().getAt(i).data['bomid'];
                        if (!bom) {
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.BOMforProduct")+" "+this.Grid.getStore().getAt(i).data['productname']+" "+WtfGlobal.getLocaleText("acc.field.cannotbeempty")], 2);
                            this.enableSaveButtons();
                        return;
                        }
                    }
                }
                
                if(productNameHavingUnitPriceZero!=""){//this condition will be true if any product will not have unit 
                    var msg = "";
                    if((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase)){// When user have no permission to dispaly unit price
                        msg = WtfGlobal.getLocaleText("acc.field.DefaultUnitPriceIsnotset")+" "+productNameHavingUnitPriceZero+WtfGlobal.getLocaleText("acc.msgbox.462");
                    } else{
                        msg = WtfGlobal.getLocaleText("acc.field.RateforProduct")+" "+this.Grid.getStore().getAt(i).data['productname']+" "+WtfGlobal.getLocaleText("acc.field.cannotbeempty");
                    }
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg], 2);
                    this.enableSaveButtons();
                    return;
                }
                
                var count=this.Grid.getStore().getCount();
                if(count<=1){//For Normal Grid Empty Check
                    WtfComMsgBox(33, 2);
                    this.enableSaveButtons();
                    return;
                }
                if(allProductQtyZeroFlag){ //for quantity Check in case of mapped products
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.ZeroQuantityAllProduct")], 2);
                    this.enableSaveButtons();
                    return;
                }                                       
                if(productCountQuantityZero>0){
                    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"),WtfGlobal.getLocaleText("acc.field.ZeroQuantitySomeProduct")+'</center>' ,function(btn){
                        if(btn=="yes") {
                            this.createRecordswithTemplate();
                        }else{
                            this.enableSaveButtons();
                            return;
                        } 
                    },this);               
                }else{
                    this.createRecordswithTemplate();
                }
            } else{
                WtfComMsgBox(2, 2);
                this.enableSaveButtons();
            }
                
       }
    },
    
    createRecordswithTemplate:function(){
                this.transactionType = 2;
                var rec=this.NorthForm.getForm().getValues();
                rec.isselfbilledinvoice=this.isSelfBilledInvoice;
                rec.isLinkedTransaction=this.isLinkedTransaction;
                rec.isMRPSalesOrder=this.isMRPSalesOrder; 
                rec.isJobWorkOrderReciever=this.isJobWorkOrderReciever; 
                rec.isMRPJOBWORKIN=this.isMRPJOBWORKIN; 
                rec.billdate=WtfGlobal.convertToGenericDate(this.billDate.getValue());
                var detail = this.Grid.getProductDetails();
                var incash=this.cash;
                rec.termid=this.termid;
                rec.templateid=this.templateId;
                rec.isEditTemplate=this.isEditTemplate; // passing template ID in create and edit template case
                
                if(this.isMRPJOBWORKOUT != undefined && this.isMRPJOBWORKOUT== true ){
                    rec.isMRPJOBWORKOUT=this.isMRPJOBWORKOUT; 
                    rec.workorderid = this.workOrder.getValue();
                    rec.jobworklocationid = this.jobWorkLocation.getValue();
                    rec.productid = this.productNameCombo.getValue();
                    rec.productquantity = this.productQuantity.getValue();
                    rec.dateofdelivery = WtfGlobal.convertToGenericDate(this.dateofdelivery.getValue());
                    rec.dateofshipment = WtfGlobal.convertToGenericDate(this.dateOfshipment.getValue());
                }
                

                this.ajxurl = "";
                if(this.businessPerson=="Customer"){
                    if(this.quotation)
                        this.ajxurl = "ACCSalesOrder/saveQuotation.do";
                    else
                        this.ajxurl = "ACC" + (this.isOrder?(this.isCustBill?"SalesOrder/saveBillingSalesOrder":"SalesOrder/saveSalesOrder"):(this.isCustBill?"Invoice/saveBillingInvoice":"Invoice/saveInvoice")) + ".do";
                }else if(this.businessPerson=="Vendor"){
                    if(this.quotation){
                        this.ajxurl = "ACCPurchaseOrder/saveQuotation.do";
                    } else {
                        this.ajxurl = "ACC"+ (this.isOrder?(this.isCustBill?"PurchaseOrder/saveBillingPurchaseOrder":"PurchaseOrder/savePurchaseOrder"):(this.isCustBill?"GoodsReceipt/saveBillingGoodsReceipt":"GoodsReceipt/saveGoodsReceipt")) +".do";
                    }

                }
                this.showConfirmAndSave(rec,detail,incash);
    }, 
        /**
         * Function to check Account for Blocked ITC is set for product or not.
         */
        validateITCProductAndCheckLimit : function(rec, detail, incash){
            if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.isitcapplicable && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId){
                /**
                 * If country is India , ITC is enable from preferences and Module is Purchase invoice / Cash purchase.
                 */
                var productids = "";
                for (var i = 0; i < this.Grid.getStore().getCount() - 1; i++) { // excluding last row
                    /**
                     * Iterate products from grid.
                     */
                    var itctype = this.Grid.getStore().getAt(i).data['itctype'];
                    if (itctype == Wtf.GSTITCTYPEID.BLOCKEDITC){
                    /**
                     * If ITC type is Blocked for product
                     */
                    var productid = this.Grid.getStore().getAt(i).data['productid'];
                    productids += productid + ",";
                    }
                }
                if (productids != ""){
                    productids = productids.substring(0, productids.length - 1);
                    Wtf.Ajax.requestEx({
                    url: "ACCGoodsReceipt/getITCInformationForProducts.do",
                        params:{
                        productids:productids,
                        }
                    }, this, function(response) {
                if (response.success) {
                    if (response.isaccountnotpresent) {
                    /**
                     * If Account is set for all Blocked ITC products
                     */
                    this.checkLimit(rec, detail, incash);
                    } else {
                    /**
                     * If Account is not set for Blocked ITC then show prompt 
                     */
                        var products = response.products;
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.common.blockeditcaccountnotmappedtoproduct") + " : [" + products + "]"], 2);
                        this.enableSaveButtons();
                        return;
                    }
                } else{
                    this.checkLimit(rec, detail, incash);
                }
                });
                } else{
                    this.checkLimit(rec, detail, incash);
                    }
            } else{
                    this.checkLimit(rec, detail, incash);
            }
        },
    checkLimit:function(rec,detail,incash){
        if (Wtf.Countryid == Wtf.CountryID.MALAYSIA && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && this.capitalGoodsAcquired && this.copyInv){
            /*
             * Capital Goods Acquired Invoice is getting copied with older tax mapping.
             * If tax mapped in copied CGA invoice is different than the tax mapped in 
             * System Control --> Capital Goods Acquired Invoices Setting 
             * then tax will get auto populate in invoice which is mapped in system control on save & amount will get recalculated.
             */
            if(this.capitalGoodsAcquired.getValue() && this.capitalGoodsAcquiredHandler()){
                this.enableSaveButtons();
                return;
            }
        }
        if (!this.quotation  && !this.cash && !this.isDraft) {
            if(rec!=null&&rec!=undefined&&this.calTotalAmount()!=null)
            {
                if(rec.customer!=null&&rec.customer!="")
                    {
                        rec.customerid=rec.customer;
                    }
                rec.totalSUM=this.calTotalAmount()+this.caltax();
                rec.isOrder=this.isOrder?true:false;
                Wtf.Ajax.requestEx({
                    url:"ACC"+this.businessPerson+"CMN/get"+this.businessPerson+"Exceeding"+(this.businessPerson=="Vendor"?"Debit":"Credit")+"Limit.do",
                    params:rec                                                                                                                                            
                },this,function(response){
                    if(response.data && response.data.length > 0){
                        var msg = (this.businessPerson=="Vendor"?"<center>"+WtfGlobal.getLocaleText("acc.cust.debitLimit"):"<center>"+WtfGlobal.getLocaleText("acc.cust.creditLimit"))+" "+WtfGlobal.getLocaleText("acc.field.forthis")+this.businessPerson+" "+WtfGlobal.getLocaleText("acc.field.hasreached")+"<center><br>";
                        var limitMsg = "";
                        for(var i=0; i< response.data.length; i++){
                            var recTemp = response.data[i];
                            limitMsg = (recTemp.name == "" ? "" : "<b>"+this.businessPerson+": </b>" + recTemp.name + ", ") +"<b>"+WtfGlobal.getLocaleText("acc.customerList.gridAmountDue")+": </b>" + WtfGlobal.conventInDecimalWithoutSymbol(recTemp.amountDue) + ", <b>"+(this.businessPerson=="Vendor"?WtfGlobal.getLocaleText("acc.cust.debitLimit"):WtfGlobal.getLocaleText("acc.cust.creditLimit"))+": </b>" + recTemp.limit;
                            msg += limitMsg + "<br>";
                        }
                        var limitControlType = "";
                        if (this.isCustomer) {
                            if (this.isOrder) {
                                limitControlType = Wtf.account.companyAccountPref.custcreditlimitorder;
                            } else {
                                limitControlType = Wtf.account.companyAccountPref.custcreditlimit;
                            }

                        } else {
                            if (this.isOrder) {
                                limitControlType = Wtf.account.companyAccountPref.vendorcreditlimitorder;
                            } else {
                                limitControlType = Wtf.account.companyAccountPref.vendorcreditcontrol;
                            }
                        }
                        /*
                         * Setting amountDue of customer and totalAmount due of customer in record so that it is passed as param on java side ERM-396
                         */
                        rec.amountDueOfCustomer = response.data[0].amountDue;
                        rec.totalAmountDueOfCustomer = response.data[0].totalAmountDueOfCustomer;
                        if(limitControlType == Wtf.controlCases.BLOCK){//block
                            msg += "<br><center>"+WtfGlobal.getLocaleText("acc.field.Youcannotproceed")+"<center>";
                            WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.information'),msg],3);
                            this.enableSaveButtons();
                            return;
                        }else if(limitControlType == Wtf.controlCases.WARN){//warn
                                
                            msg += "<br><center>"+WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed")+"<center>";

                            Wtf.MessageBox.show({
                            title: WtfGlobal.getLocaleText("acc.common.warning"),
                            msg:msg,
                            width:500,
                            buttons: Wtf.MessageBox.YESNO,
                            scope:{
                                scopeObject:this
                            },
                            icon: Wtf.MessageBox.INFO,
                            fn: function(btn){
                                if(btn!="yes") {
                                    this.scopeObject.enableSaveButtons();
                                    return;
                                }
                                 this.scopeObject.showConfirmAndSave(rec,detail,incash);
                            }
                        },this);
                       }else{//ignore
                            this.showConfirmAndSave(rec,detail,incash);
                        }

                    }else{
                            this.showConfirmAndSave(rec,detail,incash);
                        }
                },function(response){
                        this.showConfirmAndSave(rec,detail,incash);
                });                
            }else{
                    this.showConfirmAndSave(rec,detail,incash);
                }
        }else{
                this.showConfirmAndSave(rec,detail,incash);
            }
    },
    checkiflinkdo: function(rec,detail,incash){  // Use to check Only for autogernerate DO that Product quantity exceeds limit or not
     var flag =false
       if(this.autoGenerateDO.getValue() == true &&  !this.isEdit && Wtf.account.companyAccountPref.negativeStockSICS !=0 && (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Sales_ModuleId )){
            var prodLength=this.Grid.getStore().data.length; 
            for(var i=0;i<prodLength;i++)
            {
                var prodID=this.Grid.getStore().getAt(i).data['productid'];
                var prorec=this.Grid.productComboStore.getAt(this.Grid.productComboStore.find('productid',prodID));
                if(prorec==undefined){
                     prorec=this.Grid.getStore().getAt(i);
                 }
                if(prorec != undefined && prorec.data.type!='Service' && prorec.data.type!='Non-Inventory Part'){  //  product selected is Services based, so in that case there is no need of inventory.
                    var prodName=prorec.data.productname;
                    var availableQuantity = prorec.data.quantity;
                    var quantity= this.Grid.getStore().getAt(i).data['quantity'];
                    if(availableQuantity < quantity && 	prorec.data.isAutoAssembly != true){  
                    if(Wtf.account.companyAccountPref.negativeStockSICS==1){ // Block case
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.block"),WtfGlobal.getLocaleText("acc.field.QuantitygiveninAutoDoareexceedingthequantityavailable")+WtfGlobal.getLocaleText("acc.nee.54")+' '+prodName+" " +WtfGlobal.getLocaleText("acc.field.is")+(availableQuantity)+'. '+WtfGlobal.getLocaleText("acc.field.Soyoucannotproceed")+''], 2);
                        this.enableSaveButtons();
                        return ;
                    }else if(Wtf.account.companyAccountPref.negativeStockSICS==2){     // Warn Case
                        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.QuantitygiveninAutoDoareexceedingthequantityavailable")+'<br>'+WtfGlobal.getLocaleText("acc.field.Doyouwishtoproceed")+'</center>' , function(btn){
                            if(btn=="yes"){
                                if(Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA){ 
                                    this.checkMemo(rec,detail,incash);  
                                }else if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){ // India Compliance
                                     var businesspersoninfo = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
                                    if(Wtf.isExciseApplicable && this.isExciseTab &&!this.isCustomer && Wtf.account.companyAccountPref.registrationType==Wtf.registrationTypeValues.DEALER){ 
                                        this.showExciseDealerDetailWindow(this.Grid,rec,detail,incash);
                                    }else if(Wtf.isExciseApplicable && this.isExciseTab && this.isCustomer && Wtf.account.companyAccountPref.registrationType==Wtf.registrationTypeValues.DEALER) {
                                        this.showExciseSupplierDetailWindow(this.Grid,rec,detail,incash);
                                    } else if (Wtf.isTDSApplicable && businesspersoninfo.data.isTDSapplicableonvendor && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId) {
                                        this.confirmMessageForTDS(rec,detail,incash);
                                    } else {
                                        this.checkMemo(rec, detail, incash);
                                    }
                                }
                                return;
                             }else{
                               this.enableSaveButtons();
                               return ;
                            }
                        },this);
                        return;
                    }       
                   }else{
                          flag=true;    
                   }
               }
            } 
        }else{
            if(Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA){
                this.checkMemo(rec,detail,incash);  
            }else if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){ // India Compliance
                 var businesspersoninfo = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
                if(Wtf.isRCMPurchaseURD5KLimit && this.GTAApplicable && this.GTAApplicable.getValue() && (this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId) && !this.isExpenseInv && businesspersoninfo!=undefined &&
                        businesspersoninfo.data.GSTINRegTypeDefaultMstrID != undefined && businesspersoninfo.data.GSTINRegTypeDefaultMstrID !== "" 
                        && businesspersoninfo.data.GSTINRegTypeDefaultMstrID === Wtf.GSTRegMasterDefaultID.Unregistered){
                     this.checkURDVendorCrossDailyLimit(rec,detail,incash);
                }else if(Wtf.isExciseApplicable && this.isExciseTab&&!this.isCustomer && Wtf.account.companyAccountPref.registrationType==Wtf.registrationTypeValues.DEALER){ 
                    this.showExciseDealerDetailWindow(this.Grid,rec,detail,incash);
                }else if(Wtf.isExciseApplicable && this.isExciseTab && this.isCustomer && Wtf.account.companyAccountPref.registrationType==Wtf.registrationTypeValues.DEALER) {
                    this.showExciseSupplierDetailWindow(this.Grid,rec,detail,incash);
                }else if(Wtf.isTDSApplicable && businesspersoninfo.data.isTDSapplicableonvendor && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId){
                    this.confirmMessageForTDS(rec,detail,incash);
                }else{
                    this.checkMemo(rec,detail,incash);  
                }
            }
        }
        if(flag){
            if(Wtf.account.companyAccountPref.countryid!=Wtf.Country.INDIA){
                this.checkMemo(rec,detail,incash);  
            }else if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){ // India Compliance
                var businesspersoninfo = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
                if(Wtf.isExciseApplicable && this.isExciseTab&&!this.isCustomer && Wtf.account.companyAccountPref.registrationType==Wtf.registrationTypeValues.DEALER){ 
                    this.showExciseDealerDetailWindow(this.Grid,rec,detail,incash);
                }else if(Wtf.isExciseApplicable && this.isExciseTab && this.isCustomer && Wtf.account.companyAccountPref.registrationType==Wtf.registrationTypeValues.DEALER) {
                    this.showExciseSupplierDetailWindow(this.Grid,rec,detail,incash);
                }else if(Wtf.isTDSApplicable && businesspersoninfo.data.isTDSapplicableonvendor && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId){
                    this.confirmMessageForTDS(rec,detail,incash);
                }else{
                    this.checkMemo(rec,detail,incash);  
                }
            }
        }
    },
    /**
     * While saving Purchase Invoice from Un-Registered Vendor then check Daily limit
     * If cross then post JE for All PI Only Tax JE details which is cretaed on Bill Date
     * If not cross Then delete Tax JE Details of All PI JE on Bill Date
     * @param {type} rec
     * @param {type} detail
     * @param {type} incash
     * @returns {undefined}
     */
    checkURDVendorCrossDailyLimit: function(rec,detail,incash){
       Wtf.Ajax.requestEx({
                url:"ACCGoodsReceipt/getTotalInvoiceAmountURDVendorPurchaseInvoice.do",
                params: {
                    billdate:WtfGlobal.convertToGenericDate(this.billDate.getValue()),
                    isInvoiceAmountOnly : true
                }
            },this,function(response){
                if(response!=undefined && response.amount!=undefined){
                    var subtotalAfterTerm = this.Grid.calSubtotalInBase() + this.findTermsTotalInBase();
                    if(this.isEdit && !this.copyInv && this.record!=undefined && this.record.data!=undefined && this.record.data.amountinbase!=undefined){
                        subtotalAfterTerm = (subtotalAfterTerm - this.record.data.amountinbase);
                    }
                    var total = getRoundedAmountValue(subtotalAfterTerm + response.amount);
                    var totalOldAmount = getRoundedAmountValue(response.amount);
                    if(total > Wtf.INDIA_URD_RCM_PI_AMOUNTLIMIT){
                        Wtf.MessageBox.show({
                            title: WtfGlobal.getLocaleText("acc.common.confirm"),
                            msg:   WtfGlobal.getLocaleText("acc.common.rcm.URD.PI.limit.text"),
                            buttons: Wtf.MessageBox.YESNO,
                            icon: Wtf.MessageBox.INFO,
                            //width: 300,
                            scope: {
                                scopeObject: this
                            },
                            fn: function (btn) {
                                if (btn != "yes") {
                                    this.scopeObject.enableSaveButtons();
                                    return;
                                }
                                rec.isURDPIDocumentLimitCorss=true;
                                this.scopeObject.checkMemo(rec,detail,incash);
                            }
                        }, this);
                    }else{
                      this.checkMemo(rec,detail,incash);
                   }
                }else{
                     this.checkMemo(rec,detail,incash);
                }
            },function(response){
                 this.checkMemo(rec,detail,incash);
            });
    },
    showConfirmAndSave: function(rec,detail,incash){
        
    if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId && Wtf.isTDSApplicable && this.calculateTDSAmount() < 0) {
            Wtf.MessageBox.show({
                title: WtfGlobal.getLocaleText("acc.common.warning"), //'Warning',
                msg: WtfGlobal.getLocaleText("acc.invoice.cannotSaveInvoiceAsNegativeTDSAmt"),
                buttons: Wtf.MessageBox.OK,
                icon: Wtf.MessageBox.WARNING
            }, this);
            this.enableSaveButtons();
            return;
        }
        /*
         * Validate GST dimension values present or Not
         */
        if (WtfGlobal.isIndiaCountryAndGSTApplied() && Wtf.isShowAlertOnDimValueNotPresent.indexOf(parseInt(this.moduleid))> -1) {
            if (!isGSTDimensionValuePresent(this, this.Grid)) {
                this.enableSaveButtons();
                return false;
            }
            /**
             * Show alert on Save document if GST details not presnet 
             * ERP-39257
             */
            if (!isGSTHistoryPresentOnDocumentCreation(this)) {
                this.enableSaveButtons();
                return false;
             }
        }
    /* Check Basic Exemption limit is exceed shown an alert at save Button  */
    if(Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId && this.tdsBasicExemption && this.tdsBasicExemptionSaveButton){
        var personRec = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
        if(personRec != undefined){
            this.enableSaveButtons();
            if(this.checkBasicExemption(personRec)){                        
                return;
            }       
        }
    }
    
    /* Check if landed cost category allocation type is  manual then check product Manual Landed Cost Category  amount is entered or not . */
    if(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && this.ExpenseGrid){
        var combo =this.landingCostCategoryCombo; 
        var allocationType="";
        var llcRecId= combo.store.find(combo.valueField,combo.getValue());
        var llcRec =combo.store.getAt(llcRecId);
        if(llcRec){
            allocationType=llcRec.data.allocationtype;
        }
        if(this.manualLandedCostCategory == "" && (allocationType ==  Wtf.landingCostAllocation.MANUAL)){
            this.enableSaveButtons();
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert")," Please enter product landed cost manual amount"],2);
            return;
        }else if(this.manualLandedCostCategory != "" && (allocationType ==  Wtf.landingCostAllocation.MANUAL))
        {
            var amountTotal=this.calTotalAmount()+this.findTermsTotal()+this.caltax()+this.addTermAmountInTax()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount();
            var temAmt=0;
            var records = eval(this.manualLandedCostCategory);
            if(!Wtf.isEmpty(records)){
                for (var x=0; x<records.length; x++) {
                     temAmt+=records[x].enteramount?Number(records[x].enteramount):0;
                    }
            }
            //for manual landed cost category exclude tax amount from the invoice amount
            var linelevelarr = this.Grid.calLineLevelTax()!=""?this.Grid.calLineLevelTax():"";
            var lineleveltax = linelevelarr.length>1?linelevelarr[1]:0;
            var globalleveltax = this.caltax();
            temAmt = temAmt + (lineleveltax + globalleveltax);
            if(amountTotal!= temAmt){
                    this.enableSaveButtons();
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),"Product Landed Cost Amount is not same with Total Enter Amount"],2);
                    return false;
                }
        }
    }
           
//          if(Wtf.account.companyAccountPref.currid!=this.Currency.getValue()) {
//                this.applyTaxToTermsChk.setValue(false);
//                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),"Tax on terms is not applicable for foreign currency"], 2);
//                this.enableSaveButtons();
//                return;
//            }
//        
//        if(this.includeProTax.getValue()==false && this.applyTaxToTermsChk.getValue()==true){
//            this.applyTaxToTermsChk.setValue(false);
//            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),"Tax on terms is not applicable if product Tax is not selected"], 2);
//             this.enableSaveButtons();
//            return;
//        }
        if (!this.isEnoughQtyForAssemblyProduct && this.moduleid == Wtf.Acc_Sales_Order_ModuleId) {  //If Assembly Product's BOM is not enough in case of SO then this flag will be false.
            return false;
        }
        
        /*
         * SDP-13927
         * This propmt wil be executed only when user save the draft record as a transaction.
         * Here, we are propmting to user that they are saving the record with "NA" sequence format. He can change it
         */
        var promptmessage = "", widthsize="";
        if (this.isSaveDraftRecord && this.sequenceFormatCombobox.getValue() == "NA" && (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid==Wtf.Acc_Customer_Quotation_ModuleId || this.moduleid===Wtf.Acc_Purchase_Order_ModuleId)) {
            promptmessage = WtfGlobal.getLocaleText("acc.draft.saveTheRecordWith.NA.sequenceFormat");
            widthsize = 400;
        } else if (Wtf.Countryid == Wtf.CountryID.MALAYSIA && WtfGlobal.isNonZeroRatedTaxCodeUsedInTransaction(this)){
            promptmessage = this.EditisAutoCreateDO ? (this.businessPerson == "Customer" ? WtfGlobal.getLocaleText("acc.customerInvoice.nonZeroTaxcode.alert") : WtfGlobal.getLocaleText("acc.vendorInvoice.nonZeroTaxcode.alert")):WtfGlobal.getLocaleText("acc.tax.nonZeroTaxcode.alert");
            widthsize = 500;
        } else {
            promptmessage = this.EditisAutoCreateDO ? (this.businessPerson == "Customer" ? WtfGlobal.getLocaleText("acc.invoice.msg16") : WtfGlobal.getLocaleText("acc.invoice.msg19")):WtfGlobal.getLocaleText("acc.invoice.msg7");
            widthsize = 300;
        }
        
        Wtf.MessageBox.show({
        title:WtfGlobal.getLocaleText("acc.common.savdat"),
        msg:promptmessage,      //this.EditisAutoCreateDO ? ( this.businessPerson=="Customer" ? WtfGlobal.getLocaleText("acc.invoice.msg16") : WtfGlobal.getLocaleText("acc.invoice.msg19")):WtfGlobal.getLocaleText("acc.invoice.msg7"),
                buttons: Wtf.MessageBox.YESNO,
                icon: Wtf.MessageBox.INFO,
                width:widthsize,
                scope:{
                scopeObject:this
                },
                fn:function(btn){
                if(btn!="yes") {
                    this.scopeObject.mailFlag=false;
                    this.scopeObject.saveOnlyFlag=false;
                        this.scopeObject.enableSaveButtons();
                        return;
                }
                if( this.scopeObject.moduleid == Wtf.Acc_Sales_Order_ModuleId && !Wtf.account.companyAccountPref.showAddressonPOSOSave){
                    if( Wtf.account.companyAccountPref.isSalesOrderCreatedForCustomer ){
                        this.scopeObject.checkSOIsCreatedForCustomer(rec,detail,incash);
                    } else if( Wtf.account.companyAccountPref.isOutstandingInvoiceForCustomer ){
                       this.scopeObject.checkOutstandingInvoiceForCustomer(rec,detail,incash);
                } else {
                      this.scopeObject.finalSave(rec,detail,incash);    
                }

                }else if( (this.scopeObject.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.scopeObject.moduleid == Wtf.Acc_Purchase_Order_ModuleId) && Wtf.account.companyAccountPref.showAddressonPOSOSave){
                    this.scopeObject.getAddressWindow(rec, detail, incash,true);
                }else{
                    this.scopeObject.finalSave(rec,detail,incash);
                }
                }
        },this);
    },
    
    finalSave: function (rec,detail,incash){
        this.mailFlag=true;
        rec.taxid=this.Tax.getValue();
        /*
         * ERP-40242 : In copy case, deactivated tax not shown.Hence, empty taxid set in record.          
         */
        if (this.Tax.getValue() != '' &&  (this.copyInv || (this.fromPO != undefined && this.fromPO.getValue()))) {
                var taxActivatedRec = WtfGlobal.searchRecord(this.Grid.taxStore, this.Tax.getValue(), "prtaxid");
                if (taxActivatedRec == null || taxActivatedRec == undefined || taxActivatedRec == "") {
                    rec.taxid="";
            }
        }
                
        /* Deleted Linked Document ID(s)*/
        rec.deletedLinkedDocumentId=this.linkedDocumentId.slice(0,-1);
        rec.isfavourite = false;
        
        if (!this.isFromWO && !this.ifFromShortfall && !this.isCallFromSalesOrderTransactionForms) {
            if(!this.copyInv){
                if((this.record && this.record !== undefined) && (this.record.get('isfavourite') !== null || this.record.get('isfavourite') !== undefined)){
                    rec.isfavourite = this.record.get('isfavourite');
                }
            }
        }
        /**
         * Send flag true if PI from Un-Registered Vendor
         */
        var isURDPIDocument =false;
        var personRec = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
        if(this.GTAApplicable && this.GTAApplicable.getValue() && WtfGlobal.isIndiaCountryAndGSTApplied() && !this.isExpenseInv &&  (this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId )){
            if(this.purchaseFromURD!=undefined){
                isURDPIDocument =this.purchaseFromURD;
            }
        }else if(WtfGlobal.isIndiaCountryAndGSTApplied() && !this.isExpenseInv && this.isEdit && !this.copyInv && this.record!=undefined && this.record.data!=undefined && this.record.data.gtaapplicable && (this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId )){
            if(this.purchaseFromURD!=undefined){
               rec.isPreviousRCMApplicable=this.purchaseFromURD;
            }
        }
        rec.isURDPIDocument=isURDPIDocument;
        if (Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.isTDSApplicable) {
            //For India Country, TDS amount of Advance Payments & Advance Payment IDs
            rec.TotalAdvanceTDSAdjustmentAmt = Wtf.isTDSApplicable && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId ? this.TotalAdvanceTDSAdjustmentAmt : "";
            var jsonstring = "";
            var cnt = this.AdvancePaymentDetails.length;
            if (this.AdvancePaymentDetails.length > 0) {
                for (var i = 0; i < cnt; i++) {
                    var AdvancePaymentrec = this.AdvancePaymentDetails[i];
                    jsonstring += "{AdvancePaymentID:\"" + AdvancePaymentrec.data['AdvancePaymentID'] + "\"," +
                            "AdvancePaymentNumber:" + AdvancePaymentrec.data['AdvancePaymentNumber'] + "," + "AdvanceTDSAmount:" + AdvancePaymentrec.data['AdvanceTDSAmount'] + "," + "isTDSAmountUsedInGR:" + AdvancePaymentrec.data['isTDSAmountUsedInGR'] + "},";
                }
                jsonstring = jsonstring.substr(0, jsonstring.length - 1);
            }
            rec.AdvancePaymentDetails = Wtf.isTDSApplicable && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && this.AdvancePaymentDetails != "" ? jsonstring : "";
        }
        /*
         * isCreateInvFromJob is true if sales invoice is creating from Aged order work report.
         */
        if(this.isCreateInvFromJob){
        rec.isjobworkwitoutgrn=true;
        rec.isJobWorkStockOut=true;
        rec.isJobWorkOutRemain=true;
    }
        rec.isdropshipchecked=this.isdropshipDocument.getValue();
        rec.taxamount=this.caltax();
        rec.tdsrate=Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId ? this.tdsRate : "";
        rec.tdsmasterrateruleid=Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId ? this.tdsmasterrateruleid : "";
        rec.tdsamount=Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId ? this.calculateTDSAmount() : "";
        rec.isExciseInvoice=this.isExciseTab?true:false;
        rec.isExicseOpeningbalance=this.isExicseOpeningbalance;
        rec.defaultnatureofpurchase=(this.isExciseTab && this.defaultNatureOfPurchase!=null)?this.defaultNatureOfPurchase.getValue():"";
        rec.manufacturerType=(this.isExciseTab && this.manufacturerTypeCombo!=null)?this.manufacturerTypeCombo.getValue():"";
        rec.moduletemplateid=this.templateModelCombo.getValue();
        if(this.isIndiaGST){
            rec.CustomerVendorTypeId=this.CustomerVendorTypeId;
            rec.GSTINRegistrationTypeId=this.GSTINRegistrationTypeId;
            rec.gstin=this.gstin;
            if(this.isEdit && !this.copyInv){
                rec.gstdochistoryid=this.gstdochistoryid;
            }
            if (this.purchaseFromURD != undefined) {
                rec.isUnRegisteredDealer = this.purchaseFromURD;
            } else {
                rec.isUnRegisteredDealer = false;
        }
        }
        if(this.isExpenseInv){
            rec.expensedetail=detail;
            rec.isExpenseInv=this.isExpenseInv;
            if(this.copyInv){
                var expenseDetails=eval(detail);
                var hasAccessFlag=false;
                var accountsNotAccessList="";
                for(var i=0;i<expenseDetails.length;i++){
                    var gridRec = expenseDetails[i];
                    var accRec=WtfGlobal.searchRecord(this.Grid.accountStore, gridRec.accountid, 'accountid');
                    if(accRec!=null){
                        var hasAccess=accRec.get('hasAccess');
                        if(!hasAccess){
                            accountsNotAccessList=accountsNotAccessList + accRec.get('accountname') +", ";
                            hasAccessFlag=true;
                        }
                    }
                }
                if(accountsNotAccessList!=""){
                   accountsNotAccessList = accountsNotAccessList.substring(0, accountsNotAccessList.length-2);
                }
                if(hasAccessFlag){
                    Wtf.MessageBox.show({
                        title: WtfGlobal.getLocaleText("acc.common.warning"), //'Warning',
                        msg: WtfGlobal.getLocaleText("acc.field.Accounts")+accountsNotAccessList+" "+WtfGlobal.getLocaleText("acc.field.iscurrentlydeactivated"),
                        width:370,
                        buttons: Wtf.MessageBox.OK,
                        icon: Wtf.MessageBox.WARNING,
                        scope: this
                    });
                    this.enableSaveButtons();
                    return;
                }
            }
        }
        else
            rec.detail=detail;
        
        if (this.copyInv) {
            var hasAccessFlag = false;
            var Name = "";
            var title = "";
            var personId = this.Name.getValue();
            var personRec = WtfGlobal.searchRecord(this.Name.store, personId, this.Name.valueField);
            if (personRec != null) {
                var hasAccess = personRec.get('hasAccess');
                if (!hasAccess) {
                    Name = personRec.get('accname');
                    hasAccessFlag = true;
                }
            }
            if (hasAccessFlag&&personRec.get('hasAccess')!=undefined) {
                if (this.businessPerson == "Customer") {
                    title = WtfGlobal.getLocaleText("acc.customer.customerName");
                } else {
                    title = WtfGlobal.getLocaleText("acc.vendor.vendorName");
                }
                Wtf.MessageBox.show({
                    title: WtfGlobal.getLocaleText("acc.common.warning"), //'Warning',
                    msg: title + Name + " " + WtfGlobal.getLocaleText("acc.field.iscurrentlydeactivated"),
                    width: 370,
                    buttons: Wtf.MessageBox.OK,
                    icon: Wtf.MessageBox.WARNING,
                    scope: this
                });
                this.enableSaveButtons();
                return;
            }
            //For on India Company
//            if(Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && this.isCustomer && this.copyInv){
//                if(this.originalInvoice.getValue()!="" && this.generateSupplementary.getValue()){
//                    rec.originalInvoiceId=this.originalInvoiceId.getValue();
//                }
//            }
        }
        
        if (this.users != undefined) {
            var isSaledpersonDeactivated = WtfGlobal.isSaledpersonDeactivated(this.users, this.businessPerson);
            if (isSaledpersonDeactivated) {
                this.enableSaveButtons();
                return;
            }
        }
        var custFieldArr=this.tagsFieldset.createFieldValuesArray();
        this.msg= WtfComMsgBox(27,4,true);
        rec.subTotal=this.Grid.calSubtotal()
        this.applyCurrencySymbol();
        rec.perdiscount=this.perDiscount.getValue();
        rec.isOpeningBalanceOrder=this.isOpeningBalanceOrder;
        rec.currencyid=this.Currency.getValue();
        rec.externalcurrencyrate=this.externalcurrencyrate;
        rec.discount=this.Discount.getValue();
        rec.posttext=this.postText;
        //get Cash Received value
        rec.cashReceived=this.cashReceived.getValue();
        rec.istemplate=this.transactionType;
        rec.moduletempname=this.isTemplate;
        rec.templatename=this.moduleTemplateName.getValue();
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
//            rec.UnitName=!Wtf.isEmpty(this.UnitName)?this.UnitName.getValue():""; 
//            rec.registrationType=!Wtf.isEmpty(this.registrationTypeCombo.getValue())?this.registrationTypeCombo.getValue():"";                  
//            rec.manufacturerType=!Wtf.isEmpty(this.manufacturerTypeCombo.getValue())?this.manufacturerTypeCombo.getValue():"";
//            rec.ECCNo=!Wtf.isEmpty(this.ECCNo)?this.ECCNo.getValue():""; 
            rec.countryid=Wtf.Country.INDIA;
            rec.companyunitid=this.UnitModuleTemplate.getValue();
        }
        if(this.isGeneratedRecurringInvoice != undefined && this.isGeneratedRecurringInvoice == 1){
            rec.Oldinvoiceid=this.record.data.billid;
            rec.isGeneratedRecurringInvoice=1;
            rec.generatedDate=WtfGlobal.convertToGenericDate(this.onDate);//Use to Exclude Invoice from Outstanding order Report
        }

        if(this.copyInv && this.record && this.record.data.contract){
            rec.contractId=this.record.data.contract;
        }
        //                if(this.isOrder && !this.quotation){
        //                    if(this.fromLinkCombo && this.fromLinkCombo.getValue() != "" && this.fromLinkCombo.getValue() == 3){
        //                        rec.isLinkedFromMaintenanceNumber=true;
        //                    }
        //                }
        //                if(this.isOrder && !this.quotation){
        //                    if(this.fromLinkCombo && this.fromLinkCombo.getValue() != "" && this.fromLinkCombo.getValue() == 3){
        //                        rec.isLinkedFromMaintenanceNumber=true;
        //                    }
        //                }

        if(this.isMaintenanceOrderCheckBox && this.isMaintenanceOrderCheckBox.getValue()){
            if(this.maintenanceNumberCombo && this.maintenanceNumberCombo.getValue() != ""){
                rec.isLinkedFromMaintenanceNumber=true;
                rec.maintenanceId=this.maintenanceNumberCombo.getValue();
            }
        }

        //                rec.vendorinvoice = this.vendorInvoice!=null?this.vendorInvoice.getValue():'';
        if (custFieldArr.length > 0)
            rec.customfield = JSON.stringify(custFieldArr);
        rec.invoicetermsmap = this.getInvoiceTermDetails();
        if(this.Grid.deleteStore!=undefined && this.Grid.deleteStore.data.length>0)
            rec.deletedData=this.getJSONArray(this.Grid.deleteStore,false,0);
        rec.number=this.Number.getValue();
        rec.linkNumber=(this.PO != undefined && this.PO.getValue()!="")?this.PO.getValue():"";
        
        if(Wtf.account.companyAccountPref.countryid == '137'){// For Malasian Company
            if(!(this.isEdit && !this.copyInv)){    //No flag will be sent in edit case . Ticket ERP-28669
                var isInvoiceLinkedWithTaxAppliedDO = false;
                if(this.PO != undefined && this.PO.getValue()!=""){
                    var linkNumberArray = this.PO.getValue().split(",");
                    for(var i=0;i<linkNumberArray.length;i++){
                        var porecord=this.POStore.getAt(this.POStore.find('billid',linkNumberArray[i]));
                        if(porecord.data.isAppliedForTax){
                            isInvoiceLinkedWithTaxAppliedDO = true;
                        }
                    }
                }
                rec.isInvoiceLinkedWithTaxAppliedDO=isInvoiceLinkedWithTaxAppliedDO;
            }
        }
        
        rec.fromLinkCombo=this.fromLinkCombo.getRawValue();
        rec.duedate=WtfGlobal.convertToGenericDate(this.DueDate.getValue());
        rec.billdate=WtfGlobal.convertToGenericDate(this.billDate.getValue());
        rec.shipdate=WtfGlobal.convertToGenericDate(this.shipDate.getValue());
        rec.validdate=WtfGlobal.convertToGenericDate(this.validTillDate.getValue());
        rec.invoiceid=(this.copyInv||this.GENERATE_PO||this.GENERATE_SO || this.invoicefromorder || (this.quotation&&!this.isCustomer&&this.ispurchaseReq))?"":this.billid;
        rec.doid=this.DeliveryOrderid;
        rec.mode=(this.isOrder?(this.isCustBill?51:41):(this.isCustBill?13:11));
        rec.incash=incash;
        rec.partialinv = (this.partialInvoiceCmb)? this.partialInvoiceCmb.getValue() : false;
        this.totalAmount = rec.subTotal + rec.taxamount - this.getDiscount();
        rec.includeprotax = (this.includeProTax)? this.includeProTax.getValue() : false;
        rec.isApplyTaxToTerms = (this.includeProTax && this.includeProTax.getValue()==true && this.applyTaxToTermsChk.getValue());
        rec.includingGST = (this.includingGST)? this.includingGST.getValue() : false;
        rec.landedInvoiceNumber = this.invoiceList.getValue();
        
        if(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && (this.landingCostCategoryCombo.getValue()!="NOT APPLICABLE")){
           rec.landingCostCategoryCombo = this.landingCostCategoryCombo.getValue();
        }
        
        if(this.autoGenerateDO.getValue() ||  this.EditisAutoCreateDO){
            var seqFormatRecDo = WtfGlobal.searchRecord(this.sequenceFormatStoreDo, this.sequenceFormatComboboxDo.getValue(), 'id');
            rec.seqformat_oldflagDo = seqFormatRecDo != null ? seqFormatRecDo.get('oldflag') : false;
            rec.numberDo = this.no.getValue();
            rec.sequenceformatDo = this.sequenceFormatComboboxDo.getValue();
            if (this.Grid.recAobj!= null && this.Grid.recAobj!= undefined && this.Grid.recAobj!= "" && this.Grid.recAobj.data!= null && this.Grid.recAobj.data!= undefined && this.Grid.recAobj.data!= "" && this.Grid.recAobj.data.replacebatchdetails!= null && this.Grid.recAobj.data.replacebatchdetails!= undefined && this.Grid.recAobj.data.replacebatchdetails!= "") {
                rec.replacebatchdetails = this.Grid.recAobj.data.replacebatchdetails;
            }
        }
        if(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && this.manualLandedCostCategory!=""){
            rec.manualLandedCostCategory=this.manualLandedCostCategory;
        }
        
        var seqFormatRec=WtfGlobal.searchRecord(this.sequenceFormatStore, this.sequenceFormatCombobox.getValue(), 'id');
        rec.sequenceformat=this.sequenceFormatCombobox.getValue();
        rec.seqformat_oldflag=seqFormatRec!=null?seqFormatRec.get('oldflag'):false;
        var isCopy = this.copyInv;
        var isEdit = this.isEdit;
        if (this.isVenOrCustSelect) {
            isEdit = false;
            isCopy = false;
        }
        /*
         * Set parametrs while saving the PO doc.
         */
        if(this.moduleid===Wtf.Acc_Purchase_Order_ModuleId && Wtf.account.companyAccountPref.isCustShipAddressInPurchase ){
            rec.isPOfromSO=true;
            rec.customeridforshippingaddress=this.customeridforshippingaddress;
        }
        rec=WtfGlobal.getAddressRecordsForSave(rec,this.record,this.linkRecord,this.currentAddressDetailrec,this.isCustomer,this.singleLink,isEdit,isCopy,this.GENERATE_PO,this.GENERATE_SO,this.isQuotationFromPR,this.moduleid);
        rec.isEdit=this.isEdit;
        rec.isRoundingAdjustmentApplied = this.applyRoundingAdjustmentToDocument;//Sending this variable from JS so that we can reduce calculation on java side and other stuff 
        if (this.isEdit) {
            rec.isAllowToEdit = this.isAllowToEdit;
        } else {
            rec.isAllowToEdit = false;
        }
        rec.copyInv=this.copyInv; 
        rec.isLinkedTransaction=this.isLinkedTransaction; 
        rec.isMRPSalesOrder=this.isMRPSalesOrder; 
        rec.isJobWorkOrderReciever=this.isJobWorkOrderReciever; 
        rec.isMRPJOBWORKIN=this.isMRPJOBWORKIN;
        
        if(this.isMRPJOBWORKOUT != undefined && this.isMRPJOBWORKOUT== true ){
            rec.isMRPJOBWORKOUT=this.isMRPJOBWORKOUT; 
            rec.workorderid = this.workOrder.getValue();
            rec.jobworklocationid = this.jobWorkLocation.getValue();
            rec.productid = this.productNameCombo.getValue();
            rec.productquantity = this.productQuantity.getValue();
            rec.dateofdelivery = WtfGlobal.convertToGenericDate(this.dateofdelivery.getValue());
            rec.dateofshipment = WtfGlobal.convertToGenericDate(this.dateOfshipment.getValue());
        }
        
        if(this.isCustomer && this.isOrder && !this.quotation){// if sales order is linked with Replacement Number
            if(this.fromLinkCombo && this.fromLinkCombo.getValue() == 3){
                rec.isLinkedFromReplacementNumber=true;
                rec.replacementId=this.PO.getValue();
            }
        }
    if(this.isCustomer && this.fromPO!=undefined && this.fromPO.getValue()===true && this.quotation){
        rec.linkFrom='Vendor Quotation';  
    }
        if(this.isAutoCreateDO ||  this.EditisAutoCreateDO){
            rec.isAutoCreateDO = this.EditisAutoCreateDO ? this.EditisAutoCreateDO : this.isAutoCreateDO;
            rec.fromLinkComboAutoDO =this.isCustomer ? "Customer Invoice" : "Vendor Invoice";
        } 
        if (this.isCreditable){
            rec.isCreditable = this.isCreditable.getValue();
        }
        if(this.capitalGoodsAcquired){
            rec.isCapitalGoodsAcquired = this.capitalGoodsAcquired.getValue();
        }
        if(this.isRetailPurchase){
            rec.isRetailPurchase = this.isRetailPurchase.getValue();
        }
        if(this.importService){
            rec.importService = this.importService.getValue();
        }
        if (this.deliveryTime) {
            rec.deliveryTime = this.deliveryTime.getValue();
        }
        
        if(this.advancePaymentCombo && this.moduleid == Wtf.Acc_Sales_Order_ModuleId){
            rec.linkedAdvancePaymentId = this.advancePaymentCombo.getValue() || "";
            rec.linkedAdvancePaymentNo = this.advancePaymentCombo.getRawValue() || "";
            
        }
        if(incash){
            rec.pmtmethod=this.pmtMethod.getValue();
            if(!this.SouthForm.hidden){//when payment type bank or card
              var paydetail=this.SouthForm.GetPaymentFormData();    
              var methode= this.pmtMethod.getValue();
              rec.paydetail = paydetail;
              if(this.SouthForm.paymentStatus.getValue() == "Cleared"){
                  var index=this.pmtStore.findBy( function(rec){
                      var parentname=rec.data['methodid'];
                      if(parentname==methode)
                          return true;
                      else
                          return false
                   })
                  rec.bankaccid = this.pmtStore.getAt(index).data.accountid;
                  rec.startdate = WtfGlobal.convertToGenericDate(WtfGlobal.getDates(true));
                  rec.enddate = WtfGlobal.convertToGenericDate(WtfGlobal.getDates(false));
              }
            }                                  
        }
        rec['termsincludegst'] = this.termsincludegst;
        rec.isDraft = this.isDraft? this.isDraft : false;
        rec.isSaveDraftRecord = this.isSaveDraftRecord;
	rec.isAutoSeqForEmptyDraft = this.isAutoSeqForEmptyDraft;
	rec.isSequenceFormatChangedInEdit = this.isSequenceFormatChangedInEdit;    //SDP-13923 - This boolean flag has sent to business logic    
        this.objForPrintTemp=rec;
        this.objForPrintTemp.billid=this.billid;
        rec.savedFilesMappingId = this.savedFilesMappingId;//Saved documents id
      
         /*-----If Pending document is edited----------  */
        if (this.pendingapprovalTransaction) {//sent from SI , PI , SO , PO
            rec.isEditedPendingDocument = true;
        }
        
        WtfGlobal.setAjaxTimeOut();
        if (this.autoGenerateDO.getValue() == true && Wtf.account.companyAccountPref.isQaApprovalFlow && (this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId)) {
            /** Credit/Cash purchase**/
             Wtf.Msg.show({
                title: WtfGlobal.getLocaleText("acc.common.confirm"),
                msg: WtfGlobal.getLocaleText("acc.goodsreceiptorder.sendforqa"),
                buttons: Wtf.Msg.YESNOCANCEL,
                scope: this,
                fn: function (btn) {
                    if (btn == 'yes') {
                        rec.sendForQAApproval = true;
                        this.saveRequest(rec);
                    } else if (btn == 'no') {
                        this.saveRequest(rec);
                    } else {
                        this.enableSaveButtons();
                        return;
                    }
                },
                icon: Wtf.MessageBox.QUESTION
            });
            
//            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"), WtfGlobal.getLocaleText("acc.goodsreceiptorder.sendforqa"), function(btn) {
//                if (btn == 'yes') {
//                    rec.sendForQAApproval = true;
//                    this.saveRequest(rec);
//                } else {
//                    this.saveRequest(rec);
//                }
//            }, this);
        } else if (this.autoGenerateDO.getValue() == true && Wtf.account.companyAccountPref.isQaApprovalFlowInDO && (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Sales_ModuleId)) {
            /** Credit/Cash Sales**/
             Wtf.Msg.show({
                title: WtfGlobal.getLocaleText("acc.common.confirm"),
                msg: WtfGlobal.getLocaleText("acc.deliveryorder.sendforqa"),
                buttons: Wtf.Msg.YESNOCANCEL,
                scope: this,
                fn: function (btn) {
                    if (btn == 'yes') {
                        rec.sendForQAApproval = true;
                        this.saveRequest(rec);
                    } else if (btn == 'no') {
                         this.saveRequest(rec);
                    } else {
                        this.enableSaveButtons();
                        return;
                    }
                },
                icon: Wtf.MessageBox.QUESTION
            });
            
//            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"), WtfGlobal.getLocaleText("acc.deliveryorder.sendforqa"), function(btn) {
//                if (btn == 'yes') {
//                    rec.sendForQAApproval = true;
//                        this.saveRequest(rec);
//                } else {
//                        this.saveRequest(rec);
//                    }
//            }, this);
        } else {
                this.saveRequest(rec);
            }
    },
    saveRequest: function (rec) {
        Wtf.Ajax.requestEx({
            url: this.ajxurl,
            params: rec
        }, this, this.genSuccessResponse, this.genFailureResponse);
    },
    checkSOIsCreatedForCustomer:function(rec,detail,incash){
        Wtf.Ajax.requestEx({
            url:"ACCSalesOrderCMN/getSalesOrdersMerged.do",
            params: {
                newcustomerid:this.Name.getValue(),
                billdate:WtfGlobal.convertToGenericDate(this.billDate.getValue()),
                billid:(this.isEdit && !this.copyInv)?this.billid : "",
                checksoforcustomer: true
            }
        },this,function(response){
            if (response.data && response.data.length > 0) {
               Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.savdat"),WtfGlobal.getLocaleText("acc.msgbox.SalesOrderIsAlreadyGenerated"),function(btn){
                    if(btn!="yes") {
                        this.enableSaveButtons();
                        return;
                    }
                    this.finalSave(rec,detail,incash);
                },this);
            } else {
                this.finalSave(rec,detail,incash);
            }
        },function(response){
            
        });
    },
    
    checkOutstandingInvoiceForCustomer:function(rec,detail,incash){
        WtfGlobal.setAjaxTimeOut();
        Wtf.Ajax.requestEx({
            url:"ACCInvoiceCMN/getInvoicesMerged.do",
            params: {
                newcustomerid:this.Name.getValue(),
//                billid:(this.isEdit && !this.copyInv)?this.billid : "",
                onlyamountdue: true
            }
        },this,function(response){
            WtfGlobal.resetAjaxTimeOut();
            if (response.data && response.data.length > 0) {
               Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.savdat"),WtfGlobal.getLocaleText("acc.msgbox.CustomerhasOutstandingInvoicePresent"),function(btn){
                    if(btn!="yes") {
                        this.enableSaveButtons();
                        return;
                    }
                    this.finalSave(rec,detail,incash);
                },this);
            } else {
                this.finalSave(rec,detail,incash);
            }
        },function(response){
            
        });
    },
    
    getDates:function(start){
        var d=new Date();
        var monthDateStr=d.format('M d');
        if(Wtf.account.companyAccountPref.fyfrom)
            monthDateStr=Wtf.account.companyAccountPref.fyfrom.format('M d');
        var fd=new Date(monthDateStr+', '+d.getFullYear()+' 12:00:00 AM');
        if(d<fd)
            fd=new Date(monthDateStr+', '+(d.getFullYear()-1)+' 12:00:00 AM');
        if(start)
            return fd;

        return fd.add(Date.YEAR, 1).add(Date.DAY, -1);
    },
    
    getFinancialYRStartDatesMinOne:function(start){
        var d=Wtf.serverDate;
        //        if(this.statementType=='BalanceSheet'&&start)
        //             return new Date('January 1, 1970 00:00:00 AM');
        var monthDateStr=d.format('M d');
        if(Wtf.account.companyAccountPref.bbfrom)
            monthDateStr=Wtf.account.companyAccountPref.bbfrom.format('M d');
        var fd=new Date(monthDateStr+', '+d.getFullYear()+' 12:00:00 AM');
        if(d<fd)
            fd=new Date(monthDateStr+', '+(d.getFullYear()-1)+' 12:00:00 AM');
        if(start)
            return fd.add(Date.YEAR, 0).add(Date.DAY, -1);
        return fd.add(Date.YEAR, 1).add(Date.DAY, -1);
    },

    handleProductTypeForConsignment: function(){
        // In Consignment link case select product of service type product reset and prompt msg
        if(this.invoiceList != undefined && this.invoiceList.getValue() != "") {
            this.manualLandedCostCategory="";
            var productid;
            if(this.Grid != undefined) {
                for(var i=0; i<this.Grid.getStore().getCount(); i++) {
                    productid = this.Grid.getStore().getAt(i).get("productid");

                    if((productid != undefined || productid != "") && (this.Grid != undefined && this.Grid.getStore().getCount() > 0) && this.Grid.productComboStore != undefined) {
                        var index = this.Grid.productComboStore.find('productid',productid);
                        if(index != -1) {
                            var productType = this.Grid.productComboStore.getAt(index).get("type");
                            if(productType != "Service") {
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.consignmentCaseProductSelectMsg")], 2);

                                // For reset all related fields
                                var customer= this.Name.getValue();
                                if(!this.GENERATE_PO&&!this.GENERATE_SO){
                                    this.loadStore();
                                    this.Name.setValue(customer);
                                    var rec = WtfGlobal.searchRecord(this.personstore, customer, 'accid');
                                    this.Term.setValue(rec.data['termid']);
                                }
                                this.invoiceList.setValue("");
                                this.updateData();
                            }
                        }
                    }
                }
                
            }
        }
    },
    loadTransStore : function(productid){
        if(this.Name.getValue() != "" && !this.isExpenseInv){
            var customer= (this.businessPerson=="Vendor")? "" : this.Name.getValue();
            var vendor= (this.businessPerson=="Vendor")? this.Name.getValue() : "" ;
            if((productid == undefined || productid == "") && this.Grid.getStore().getCount() > 0){
                productid = this.Grid.getStore().getAt(0).get("productid");
            }
            
            // In Consignment link case select product of service type product reset and prompt msg
            this.handleProductTypeForConsignment();
            
            this.lastTransPanel.Store.on('load', function(){
                Wtf.getCmp('south' + this.id).doLayout();
            }, this);
            if(productid) {
                this.lastTransPanel.productid = productid;
                this.lastTransPanel.Store.load({
                    params:{
                        start:0,
                        limit:5, 
                        prodfiltercustid:customer,
                        prodfilterventid:vendor,
                        productid : productid,
                        isCopyInvoice:this.copyInv,
                        pagingFlag : true
                    }
                });
            }
        }
    },
    
    removeTransStore : function(){
        this.lastTransPanel.Store.removeAll();
        this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body,{productname:"&nbsp;&nbsp;&nbsp;&nbsp;",productid:0,qty:0,soqty:0,poqty:0,blockqty:0,salableStock:0,reserveStock:0});
    },
    updateVATNumbers: function(rec){
       this.INDCountryCenterTplSummary.overwrite(this.INDCountryCenterTpl.body,{CompanyVATNumber: rec.data.vattinno, CompanyCSTNumber: rec.data.csttinno, CompanyPANNumber: rec.data.panno, CompanyServiceTaxRegNumber: rec.data.servicetaxno, CompanyTANNumber: rec.data.tanno,CompanyECCNumber: rec.data.eccno});
    },
    confirmMessageForTDS:function(rec,detail,incash){
        var warningmsg = "";
        var grid = this.Grid.getStore();
        var productName = "";
            for (var x = 0; x < grid.getCount() - 1; x++) {
                var rowData = grid.getAt(x).data;
                if (Wtf.isEmpty(rowData.appliedTDS)) {
                    if (this.isExpenseInv) {
                        var accountRec = WtfGlobal.searchRecord(this.Grid.accountStore, rowData.accountid, 'accountid');
                        if(accountRec!=null){
                            productName += accountRec.data["accountname"] + ", ";
                        }
                    }else {
                        productName += rowData.productname + ", ";
                    }
                }
            }
            if (productName.length > 0) {
                productName = productName.length > 0 ? productName.substr(0, productName.length - 2) : productName;
                warningmsg = "TDS is applicable on Vendor but you have not applied it to below item(s)<br> <b>" + productName + "</b><br><br> Do you want to continue?";

                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), warningmsg, function (btn) {
                    if (btn == "yes") {
                        this.checkMemo(rec, detail, incash);
                    } else {
                        this.enableSaveButtons();
                        return;
                    }
                }, this);
            }else{
                this.checkMemo(rec, detail, incash);
            }
    },
    updateTDSCalculationDetails: function(rec){
        var  LineTermdetails;
        var  LineTermTypeJsonForTDS = {};
        var personRec = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
        var store = this.Grid.store;
        for(var m=0 ; m < (store.data.length) ; m++){
            LineTermdetails = eval(store.data.itemAt(m).data.LineTermdetails);
            if(LineTermdetails != undefined && LineTermdetails != ""){
                //Already Defined. [[1,'VAT'],[2,'Excise Duty'],[3,'CST'],[4,'Service Tax'],[5,'Swachh Bharat Cess'],[6,'Krishi Kalyan Cess']]
                for(var n = 0 ; n < LineTermdetails.length ; n++){
                    if(LineTermdetails[n].includeInTDSCalculation){
                        var prevAmt = 0;
                        if(LineTermTypeJsonForTDS.hasOwnProperty(LineTermdetails[n].termtype)){
                            prevAmt = LineTermTypeJsonForTDS[LineTermdetails[n].termtype];
                        }
                        LineTermTypeJsonForTDS[LineTermdetails[n].termtype] = prevAmt + LineTermdetails[n].termamount;
                    }
                }
            }
        }
        
        var lineLevelArrayForTDS = [];
        var TotalTaxAmtForTDS = 0;
        for(var i=0; i<Wtf.LineTermsMasterStore.getRange().length; i++){
            var temp = Wtf.LineTermsMasterStore.getRange()[i].data;
            if(!Wtf.isEmpty(this.GTAApplicable) && this.GTAApplicable.getValue() && (temp.typeid == Wtf.term.Service_Tax || temp.typeid == Wtf.term.Swachh_Bharat_Cess || temp.typeid == Wtf.term.Krishi_Kalyan_Cess)){// GTA Applicable than does not include service tax
                continue;
            }
            if(LineTermTypeJsonForTDS.hasOwnProperty(temp.typeid)){
                TotalTaxAmtForTDS += LineTermTypeJsonForTDS[temp.typeid];
                temp['taxAmount'] = WtfGlobal.addCurrencySymbolOnly(LineTermTypeJsonForTDS[temp.typeid],this.symbol);
            } else {
                temp['taxAmount'] = WtfGlobal.addCurrencySymbolOnly(0,this.symbol);
            }
            lineLevelArrayForTDS.push(temp);
        }
        
        var subtotal = this.Grid.calSubtotal();
        var termtotal = this.findTermsTotalIncludedForTDS();
        var InvoiceTDSAmt = this.calculateTDSAmount();    
        var tdsNOPArray = this.Grid.getTDSNOPArrayAppliedAtLineLevel();
        if (Wtf.isTDSApplicable) {
            InvoiceTDSAmt += this.TotalAdvanceTDSAdjustmentAmt;//we already subtracting TotalAdvanceTDSAdjustmentAmt from InvoiceTDSAmount.            
            /*
             * If  in User Administration > Assign Permission > Display Unit Price & Amount in Purchase Document
             * If it uncheck we will hide amount and show '*****',  
             */
                if (!Wtf.dispalyUnitPriceAmountInPurchase){
                    this.TDSCalculationDetailsTplSummary.overwrite(this.TDSCalculationDetailsTpl.body, {
                        deducteetype: !Wtf.isEmpty(rec.data.deducteetypename) ? rec.data.deducteetypename : (!Wtf.isEmpty(personRec.data.deducteetypename) ? personRec.data.deducteetypename : ""),
                        tdsNOPArray: tdsNOPArray,
                        subtotalamount: Wtf.UpriceAndAmountDisplayValue,
                        lineLevelArray: lineLevelArrayForTDS,
                        globalleveltermamount: Wtf.UpriceAndAmountDisplayValue,
                        totalinvoiceamount: Wtf.UpriceAndAmountDisplayValue,
                        totaltdsamount: Wtf.UpriceAndAmountDisplayValue,
                        TotalAdvanceTDSAdjustmentAmt: Wtf.UpriceAndAmountDisplayValue,
                        nettdsamount: Wtf.UpriceAndAmountDisplayValue
                    });
                } else {
                    this.TDSCalculationDetailsTplSummary.overwrite(this.TDSCalculationDetailsTpl.body, {
                        deducteetype: !Wtf.isEmpty(rec.data.deducteetypename) ? rec.data.deducteetypename : (!Wtf.isEmpty(personRec.data.deducteetypename) ? personRec.data.deducteetypename : ""),
                        tdsNOPArray: tdsNOPArray,
                        subtotalamount: WtfGlobal.addCurrencySymbolOnly(subtotal, this.symbol),
                        lineLevelArray: lineLevelArrayForTDS,
                        globalleveltermamount: WtfGlobal.addCurrencySymbolOnly(termtotal, this.symbol),
                        totalinvoiceamount: WtfGlobal.addCurrencySymbolOnly(subtotal + TotalTaxAmtForTDS + termtotal, this.symbol),
                        totaltdsamount: WtfGlobal.addCurrencySymbolOnly(InvoiceTDSAmt, this.symbol),
                        TotalAdvanceTDSAdjustmentAmt: WtfGlobal.addCurrencySymbolOnly(this.TotalAdvanceTDSAdjustmentAmt, this.symbol),
                        nettdsamount: WtfGlobal.addCurrencySymbolOnly(InvoiceTDSAmt - this.TotalAdvanceTDSAdjustmentAmt, this.symbol)
                    });
                }
        } else {
            /*
             * If  in User Administration > Assign Permission > Display Unit Price & Amount in Purchase Document
             * If it uncheck we will hide amount and show '*****',  
             */
            if (!Wtf.dispalyUnitPriceAmountInPurchase){
                 this.TDSCalculationDetailsTplSummary.overwrite(this.TDSCalculationDetailsTpl.body, {
                    deducteetype: rec.data.deducteetypename,
                    tdsNOPArray: tdsNOPArray,
                    subtotalamount: Wtf.UpriceAndAmountDisplayValue,
                    lineLevelArray: lineLevelArrayForTDS,
                    globalleveltermamount: Wtf.UpriceAndAmountDisplayValue,
                    totalinvoiceamount: Wtf.UpriceAndAmountDisplayValue,
                    totaltdsamount: Wtf.UpriceAndAmountDisplayValue
                });
                
            } else {
               this.TDSCalculationDetailsTplSummary.overwrite(this.TDSCalculationDetailsTpl.body, {
                    deducteetype: rec.data.deducteetypename,
                    tdsNOPArray: tdsNOPArray,
                    subtotalamount: WtfGlobal.addCurrencySymbolOnly(subtotal, this.symbol),
                    lineLevelArray: lineLevelArrayForTDS,
                    globalleveltermamount: WtfGlobal.addCurrencySymbolOnly(termtotal, this.symbol),
                    totalinvoiceamount: WtfGlobal.addCurrencySymbolOnly(subtotal + TotalTaxAmtForTDS + termtotal, this.symbol),
                    totaltdsamount: WtfGlobal.addCurrencySymbolOnly(InvoiceTDSAmt, this.symbol)
                });
            }
        }
    },
    updateData:function(){
       var customer= this.Name.getValue();
       if(Wtf.getCmp("showaddress" + this.id)){
          Wtf.getCmp("showaddress" + this.id).enable(); 
       } 
       //Enable Add Attachments button
       if(Wtf.getCmp("attachments" + this.id)){
          Wtf.getCmp("attachments" + this.id).enable(); 
       }
        var currentTaxItem=WtfGlobal.searchRecord(this.Name.store, this.Name.getValue(), 'accid');
         var actualTaxId=currentTaxItem!=null?currentTaxItem.get('taxId'):"";
         
            if(actualTaxId== undefined || actualTaxId == "" ||  actualTaxId == null){// if customer/vendor is not mapped with tax then check that is their mapping account is mapped with tax or not, if it is mapped take account tax
                actualTaxId=currentTaxItem!=null?currentTaxItem.get('mappedAccountTaxId'):"";
            }
            
        /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
         *  Then we ignore Customer/Vendor mapped taxes
         *  Consider Only Product mapped taxes i.e - only line level taxes(Create New Case)
         */
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
            actualTaxId = "";
        }
        
        /**
         * From generate SI if line level tax is applied, for customer whoose global tax is applied then ignore Global tax.
         */
        if (this.invoicefromorder && this.invoicefromorderrec != null && (typeof this.invoicefromorderrec.includeprotax == 'string' || typeof this.invoicefromorderrec.includeprotax == 'boolean') && (this.invoicefromorderrec.includeprotax == true || this.invoicefromorderrec.includeprotax == "true")) {
            actualTaxId = "";
        }
            if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null ){
                this.isTaxable.setValue(true);
                this.Tax.enable();
                this.isTaxable.enable();
                this.Tax.setValue(actualTaxId);
            } else {
                this.isTaxable.setValue(false);
                this.Tax.setValue('');
                this.Tax.disable();
            }
        this.setTaxesOnGenerateSIAndPI();
        if(this.Grid) {
            this.Grid.affecteduser = this.Name.getValue();
        }
        
        this.loadTransStore();
        Wtf.Ajax.requestEx({
            url:"ACC"+this.businessPerson+"CMN/getCurrencyInfo.do",
            params:{
                mode:4,
                customerid:customer,
                isBilling : this.isCustBill
            }
        }, this,this.setCurrencyInfo);       
        if(this.fromPO){
            this.fromPO.enable();
        }
    },
    
    setCurrencyInfo:function(response){
        if(response.success){                        
            this.custdatechange=true; 
            if (!(this.isEdit || this.copyInv ) && (WtfGlobal.getCurrencyID() == this.Currency.getValue() || this.Currency.getValue() == "")) { // WtfGlobal.getCurrencyID() == this.Currency.getValue() this condition added due to handle issue ERP-9271 
                this.externalcurrencyrate=0;
                this.Currency.setValue(response.currencyid);
                this.currencyid=response.currencyid;
                this.symbol = response.currencysymbol;
            }
            var taxid = response.taxid
            var currentTaxItem=WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
            var actualTaxId=currentTaxItem!=null?currentTaxItem.get('taxId'):"";
            
            if(actualTaxId== undefined || actualTaxId == "" ||  actualTaxId == null){// if customer/vendor is not mapped with tax then check that is their mapping account is mapped with tax or not, if it is mapped take account tax
                actualTaxId=currentTaxItem!=null?currentTaxItem.get('mappedAccountTaxId'):"";
            }
            
            
             /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
             *  Then we ignore Customer/Vendor mapped taxes
             *  Consider Only Product mapped taxes i.e - only line level taxes(Create New Case)
             */
            if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                actualTaxId = "";
            }
            
            /**
             * From generate SI if line level tax is applied for customer whoose global tax is applied then ignore Global tax.
             */
            if (this.invoicefromorder && this.invoicefromorderrec != null && (typeof this.invoicefromorderrec.includeprotax == 'string' || typeof this.invoicefromorderrec.includeprotax == 'boolean') && (this.invoicefromorderrec.includeprotax == true || this.invoicefromorderrec.includeprotax == "true")) {
                actualTaxId = "";
            }
            
            if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null ){
                this.isTaxable.setValue(true);
                this.Tax.enable();
                this.Tax.setValue(actualTaxId);
            } else {
                this.isTaxable.setValue(this.invoicefromorderrec && this.invoicefromorderrec.isTaxable ? true : false);
                this.Tax.setValue(this.invoicefromorderrec && this.invoicefromorderrec.Tax?this.invoicefromorderrec.Tax.getValue():'');
                this.Tax.enable();
            }

            this.setTaxesOnGenerateSIAndPI();
            if(this.isEdit){
                  this.setProductAndTransactionTaxValues();   
            }                  
            this.custChange=true;
            if(!(this.isEdit || this.copyInv)){ 
              this.changeCurrencyStore();
//              if(this.fromPO)					// No Need to load Currency store
//            	this.currencyStore.load();            
            }
            this.amountdue=0;
            this.amountdue=response.amountdue;
         
           if(this.GENERATE_PO || this.GENERATE_SO){
               this.updateFormCurrency();
            }    
            else{
                if(!this.isEdit && (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid ==Wtf.Acc_Vendor_Invoice_ModuleId)){
                    if(Wtf.account.companyAccountPref.isLineLevelTermFlag==1 && !this.Name.getValue()){
                        this.tplSummary.overwrite(this.southCalTemp.body,{
                            subtotal:Wtf.UpriceAndAmountDisplayValue,
                            discount:Wtf.UpriceAndAmountDisplayValue,
                            totalamount:Wtf.UpriceAndAmountDisplayValue,
                            tax:Wtf.UpriceAndAmountDisplayValue,
                            nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
                            tdsamount: Wtf.UpriceAndAmountDisplayValue,
                            roundingAdjustmentAmount:Wtf.UpriceAndAmountDisplayValue,
                            aftertaxamt:Wtf.UpriceAndAmountDisplayValue,
                            totalAmtInBase:Wtf.UpriceAndAmountDisplayValue,
                            termtotal:Wtf.UpriceAndAmountDisplayValue,
                            amountbeforetax:Wtf.UpriceAndAmountDisplayValue,
                            amountdue:Wtf.UpriceAndAmountDisplayValue,
                            //Update value of Cash To Be Returned in summary text
                            changeToBeReturned:Wtf.UpriceAndAmountDisplayValue
                            })   
                    } else{
                        this.tplSummary.overwrite(this.southCalTemp.body,{
                            subtotal:WtfGlobal.currencyRenderer(0),
                            discount:WtfGlobal.currencyRenderer(0),
                            totalamount:WtfGlobal.currencyRenderer(0),
                            tax:WtfGlobal.currencyRenderer(0),
                            nontaxableamount: WtfGlobal.currencyRenderer(0),
                            tdsamount: WtfGlobal.currencyRenderer(0),
                            roundingAdjustmentAmount:WtfGlobal.currencyRenderer(0),
                            aftertaxamt:WtfGlobal.currencyRenderer(0),
                            totalAmtInBase:WtfGlobal.currencyRenderer(0),
                            termtotal:WtfGlobal.currencyRenderer(0),
                            amountbeforetax:WtfGlobal.currencyRenderer(0),
                            amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,this.symbol),
                            //Update value of Cash To Be Returned in summary text
                            changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(this.calChangeToBeReturned(),this.symbol)
                            })
                    }                    
                }
//                this.tplSummary.overwrite(this.southCalTemp.body,{subtotal:WtfGlobal.currencyRenderer(0),discount:WtfGlobal.currencyRenderer(0),totalamount:WtfGlobal.currencyRenderer(0),tax:WtfGlobal.currencyRenderer(0),nontaxableamount: WtfGlobal.currencyRenderer(0),tdsamount: WtfGlobal.currencyRenderer(0),aftertaxamt:WtfGlobal.currencyRenderer(0),totalAmtInBase:WtfGlobal.currencyRenderer(0),termtotal:WtfGlobal.currencyRenderer(0),amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,this.symbol)})
                if(Wtf.account.companyAccountPref.activateProfitMargin  && (this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId)){
                    this.calculateProfitMarginAndUpdateTpl();
//                    this.calProfitMargin();
//                    this.productProfitMarginTplSummary.overwrite(this.productProfitMarginTpl.body,{
//                        totalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalproductsellingprice,WtfGlobal.getCurrencySymbol()),
//                        totalproductcost:WtfGlobal.addCurrencySymbolOnly(this.totalproductcost,WtfGlobal.getCurrencySymbol()),
//                        totalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
//                        totalprodcutprofitmarginpercent:this.totalproductsellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.totalprodcutprofitmarginpercent+'%</div>',
//
//                        totalservicesellingprice:WtfGlobal.addCurrencySymbolOnly(this.totalservicesellingprice,WtfGlobal.getCurrencySymbol()),
//                        totalservicecost:WtfGlobal.addCurrencySymbolOnly(this.totalservicecost,WtfGlobal.getCurrencySymbol()),
//                        totalserviceprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.totalserviceprofitmargin,WtfGlobal.getCurrencySymbol()),
//                        totalserviceprofitmarginpercent:this.totalservicesellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.totalserviceprofitmarginpercent+'%</div>',
//
//                        finalproductsellingprice:WtfGlobal.addCurrencySymbolOnly(this.finalproductsellingprice,WtfGlobal.getCurrencySymbol()),
//                        finalproductcost:WtfGlobal.addCurrencySymbolOnly(this.finalproductcost,WtfGlobal.getCurrencySymbol()),
//                        finalproductprofitmargin:WtfGlobal.addCurrencySymbolOnly(this.finalproductprofitmargin,WtfGlobal.getCurrencySymbol()),
//                        finalproductprofitmarginpercent:this.finalproductsellingprice==0 ? '<div class="currency">NA</div>' :'<div class="currency">'+this.finalproductprofitmarginpercent+'%</div>'              
//                    });
                }  
            }
   }
    },
    getTerm:function(val1,val2){
            if(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash) {
                val1=new Date(this.record.data.shipdate);
            } else {
                val1=new Date(this.record.data.date);
            }
        val2=new Date(this.record.data.duedate);
        var msPerDay = 24 * 60 * 60 * 1000
        var termdays = Math.floor((val2-val1)/ msPerDay) ;
        var FIND =termdays;
        var index=this.termds.findBy( function(rec){
             var parentname=rec.data.termdays;
            if(parentname==FIND)
                return true;
             else
                return false
            })
            if(index>=0){
                var  rec=this.termds.getAt(index)
                this.Term.setValue(rec.data.termid);
            }
    },
    getCreditTo:function(val){
        var index=this.allAccountStore.findBy( function(rec){
             var name=rec.data.accid;
            if(name==val)
                return true;
             else
                return false
            },this)
            if(index>=0)
                this.creditTo.setValue(val);
    },
    updateDueDate:function(a,val,index,isSave){
        var term=null;
        var rec=null;
        var validTillDate=null;
        if(this.quotation){
            if(Wtf.account.companyAccountPref.noOfDaysforValidTillField!=-1){
                validTillDate=new Date(this.billDate.getValue()).add(Date.DAY, Wtf.account.companyAccountPref.noOfDaysforValidTillField);
            }
        }
        if(validTillDate!=null && this.quotation && !isSave ){
            this.validTillDate.setValue(validTillDate)
        }
        if(this.Term.getValue()!="" && this.Term.getValue()!=null && this.Term.getValue()!=undefined){
            rec = this.Term.store.getAt(this.Term.store.find('termid',this.Term.getValue()));
            if(rec != null && rec != undefined) // Added null check (in cash case get null). For Cash transaction Term is not present.
                term=new Date(this.billDate.getValue()).add(Date.DAY, rec.data.termdays);
        }
        else
            term=this.billDate.getValue();
        
        if(Wtf.account.companyAccountPref.shipDateConfiguration) {
            if(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash) {
                if(this.shipDate.getValue() != "") {
                    if(this.Term.getValue()!="" && this.Term.getValue()!=null && this.Term.getValue()!=undefined) {
                        rec = this.Term.store.getAt(this.Term.store.find('termid',this.Term.getValue()));
                        term = new Date(this.shipDate.getValue()).add(Date.DAY, rec.data.termdays);
                    } else {
                        term = this.shipDate.getValue();
                    }
                } else {
                    term = null;
                }
            }
        }
        
        if(term != null) {
            if(!(isSave != undefined && isSave != "" && isSave==true) ){
                this.NorthForm.getForm().setValues({duedate:term});
            }
        }
        if(this.Grid){
            this.Grid.billDate = this.billDate.getValue()
        }
        rec = this.Term.store.getAt(this.Term.store.find('termid',this.Term.getValue()));
        if(rec != null && rec != undefined)
            this.termid=rec.data.termid;
        if (this.isCustomer) {
            /*
             * !(this.isPOfromSO || this.isSOfromPO ||this.GENERATE_PO || this.GENERATE_SO)- Don't reload the store Generate PO/SO cases beacuse value getting reset 
            */
            if (this.moduleid == Wtf.Acc_Sales_Order_ModuleId && !(this.isPOfromSO || this.isSOfromPO ||this.GENERATE_PO || this.GENERATE_SO)) { 
                var linkflag = false;
                var isGenerateOrderFromOrder1 = false;
                if ((WtfGlobal.getModuleId(this) == Wtf.Acc_Sales_Order_ModuleId) && this.fromLinkCombo.getValue() == 4) {//if salesorder is linked into purchaseorder 
                    linkflag = true;
                    isGenerateOrderFromOrder1 = true;
                }
                this.POStore.load({
                    params: {
                        newcustomerid: this.Name.getValue(),
                        sopolinkflag: true,
                        linkFlagInSO: true,
                        currencyid: this.Currency.getValue(),
                        validflag: true,
                        billdate: WtfGlobal.convertToGenericDate(this.billDate.getValue()),
                        nondeleted: true,
                        linkflag:linkflag,
                        isGenerateOrderFromOrder:isGenerateOrderFromOrder1 //Sending true when generating SO from PO
            } 
                });
            } 

        }
    },
    shouldTaxBeHidden:function(){
        var date = this.billDate.getValue() === "" ? new Date() : new Date(this.billDate.getValue());
        var isTaxShouldBeEnable = WtfGlobal.isTaxShouldBeEnable(date.clearTime());
        return isTaxShouldBeEnable;
    },
    
    /**
     * ERP-32829 
     * Function to check whether transaction created using New GST or Old GST
     */
    setGSTFlagUsingApplicableDate: function(date) {
        if (date != undefined) {
            var gstapplieddate = Wtf.account.companyAccountPref.gstapplieddate;
            if (date >= gstapplieddate) {
                if (!this.isGST && this.Grid.getStore().getCount() > 1) {
                    this.Grid.getStore().removeAll();
                    this.Grid.addBlankRow();
                    this.Grid.productComboStore.load();
                }
                this.isGST = true;
                this.Grid.isGST = true;
            } else {
                if(this.isGST && this.Grid.getStore().getCount() > 1){
                    this.Grid.getStore().removeAll();
                    this.Grid.addBlankRow();
                    this.Grid.productComboStore.load();
                }
                this.isGST = false;
                this.Grid.isGST = false;
            }
            if (this.Grid.getStore().getCount() > 1) {
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoice.gridDataWillCleared"), function(btn) {
                    if (btn == "yes") {
                        this.Grid.getStore().removeAll();
                        this.Grid.addBlankRow();
                        this.Grid.productComboStore.load();
                        this.updateSubtotal(this, true);
                        this.Grid.updateTermDetails();

                    } else {

                    }
                }, this);
            } else {
            }
        }
    },
genSuccessResponse:function(response, request){
    this.saveandcreateBtn = true;
    var editinv=this.isEdit;
    var notInvDuplicateExe=true
    if(this.copyInv){
        editinv=false;
    }
    if(response.isDuplicateNoExe!=undefined){
        notInvDuplicateExe=response.isDuplicateNoExe;
    }
    WtfGlobal.resetAjaxTimeOut();
    this.enableSaveButtons();
    this.RecordID=response.SOID!=undefined?response.SOID : response.invoiceid;
    if (this.moduleid == Wtf.Acc_Purchase_Order_ModuleId) {
        this.pobillid = response.billid;
    }
    /*Generate PO button keep disabled when Sales Order is in Edit mode 
     * 
     * or saved Sales Order goes for Pending Approval */
    
    if(response.pendingApproval || this.isFromSaveAndCreateNew || this.isFromSaveAsDraft ||(this.isEdit && !this.copyInv)){
        this.generatePO.setDisabled(true);
    
    }else{
         this.generatePO.setDisabled(false);
       
    }
    if((response.pendingApproval || this.isFromSaveAndCreateNew || this.isFromSaveAsDraft ||(this.isEdit && !this.copyInv && !this.isSalesOrderFromPurchaseOrder)) && !this.crossLinkingTransaction){
        //        generating Sales/Purchase Invoice from Sales/Purchase Order. When po/so is pending dfor for approval at that time keep this.generatePI disableds.
        this.generatePI.setDisabled(true);
        this.generateDOGR.setDisabled(true);   
    }else{
        this.generatePI.setDisabled(false);
        this.generateDOGR.setDisabled(false);
        }

    if(response.linkflag != undefined && response.linkflag == 0 && !response.pendingApproval && !(this.isFromSaveAndCreateNew ||this.isFromSaveAsDraft)){
        //values are [0,1,2] 0 means Not Linked , 1 means Linked in Customer Invoice, 2 means Linked in Delivery Order
        this.generatePI.setDisabled(false);
        this.generateDOGR.setDisabled(false);
    }
    
        if (this.record && this.record.data.withoutinventory == false && this.record.data.statusforcrosslinkage == "Open" && !response.pendingApproval) {
            this.generatePO.setDisabled(false);
        }
    this.isFromSaveAndCreateNew=false;
    this.isFromSaveAsDraft=false;

    if(response.success && (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId ||this.moduleid == Wtf.Acc_Sales_Order_ModuleId)){
        this.recordForRecurring = {};
        this.recordForRecurring.data={};
        this.recordForRecurring.data.billno = response.invoiceNo || response.billno;
        this.recordForRecurring.data.invoiceid = response.invoiceid || response.billid;
        this.recordForRecurring.data.repeatedid = response.repeatedid;
        this.recordForRecurring.data.nextdate = response.nextdate;
        this.recordForRecurring.data.interval= response.intervalUnit;
        this.recordForRecurring.data.ispendingapproval = response.pendingApproval;
        this.recordForRecurring.data.intervalType = '';
        this.recordForRecurring.data.NoOfpost = '';
    }
    if(response.success && this.GENERATE_PO) {
        if(response.pendingapproval == 1) {
            WtfComMsgBox([this.titlel,WtfGlobal.getLocaleText("acc.field.PurchaseOrdersuccessfullygeneratedbutpendingforApproval") + this.Number.getValue()],response.success*2+1);
        } else {
            if(this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId){
                WtfComMsgBox([this.titlel,WtfGlobal.getLocaleText("acc.field.SecurityGateEntrysuccessfullygeneratedPONumber") + this.Number.getValue()],response.success*2+1);
            }else{
                WtfComMsgBox([this.titlel,WtfGlobal.getLocaleText("acc.field.PurchaseOrdersuccessfullygeneratedPONumber") + this.Number.getValue()],response.success*2+1);
            }
        }
//        added to enable Generate PI and Generate GRN button when generate po from so
        this.generatePI.setDisabled(false); 
        this.generateDOGR.setDisabled(false)
    }
    if(response.success && this.GENERATE_SO) {
        if(response.pendingapproval == 1) {
            WtfComMsgBox([this.titlel,response.msg],response.success*2+1);
        } else {
            WtfComMsgBox([this.titlel,response.msg],response.success*2+1);
        }
            
    }else {
        var msgTitle = this.titlel;
        var resObj = {};
        resObj.parentObj=this;
         if((this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Invoice_ModuleId) && Wtf.account.companyAccountPref.isAutoSaveAndPrintChkBox) {
            if(resObj.parentObj.objForPrintTemp!=null && resObj.parentObj.objForPrintTemp!=undefined) {
            resObj.parentObj.objForPrintTemp.billno=response.invoiceNo || response.billno;
            resObj.parentObj.objForPrintTemp.billid=response.invoiceid || response.billid;
            resObj.parentObj.objForPrintTemp.amount=response.amount;
            if(this.isAutoCreateDO){
              resObj.parentObj.objForPrintTemp.dono=response.dono;    
              resObj.parentObj.objForPrintTemp.doid=response.doid;    
            }  
        }
        }
        
        /**
         * Check to show success message on reload of Customer Invoice report's store after Credit or Cash Sales transaction is created
         */
        if ((this.moduleid == Wtf.Acc_Invoice_ModuleId  || this.moduleid == Wtf.Acc_Cash_Sales_ModuleId) && Wtf.getCmp("InvoiceListEntry") != undefined && response.success && Wtf.isAutoRefershReportonDocumentSave) {
            resObj.msg=response.msg;
            Wtf.getCmp("InvoiceListEntry").Store.on('load', function () {
                var invoiceParentObj = resObj.parentObj;
                if (Wtf.account.companyAccountPref.isAutoSaveAndPrintChkBox) {
                    invoiceParentObj.showSuccessMessage(resObj);
                } else {
                    /**
                     * Below conditional statement prompts user to confirm if DO is to be printed or not.
                     * It is executed only when auto generate DO check-box is checked by user and 'Wtf.account.companyAccountPref.isAutoSaveAndPrintChkBox' flag is false
                     */
                    if (response.success && invoiceParentObj.autoGenerateDO.checked && Wtf.templateflag == Wtf.tanejaHomes_templateflag && !Wtf.account.companyAccountPref.isAutoSaveAndPrintChkBox) {
                        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"), response.msg + "<br><br>" + WtfGlobal.getLocaleText("acc.field.PrintDO"), function (btn) {
                            if (btn == "yes") {
                                var selRec = "&amount=" + 0 + "&bills=" + response.doid + "&recordids=" + response.doid + "&isConsignment=" + response.isconsignment + "&isLeaseFixedAsset=" + false;
                                Wtf.get('downloadframe').dom.src = "ACCExportRecord/exportRecords.do?mode=" + Wtf.autoNum.DeliveryOrder + "&rec=" + selRec + Wtf.autoNum.DeliveryOrder + "&personid=" + response.personid + "&filename=" + response.dono + "&filetype=pdf&contraentryflag=" + false + "&recordids=" + response.doid + "&templateflag=" + Wtf.templateflag + "&isexpenseinv=" + false + "&companyid=" + companyid;
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.field.PrintSuccessInfo"), WtfGlobal.getLocaleText("acc.field.PrintingSuccessful")], response.success * 2 + 2);
                            }
                            return;
                        }, invoiceParentObj);
                    } else {
                        WtfComMsgBox([invoiceParentObj.titlel, response.msg], response.success * 2 + 2);
                    }
                }
            }, Wtf.getCmp("InvoiceListEntry").Store, {
                single: true
            }, resObj);
        }else if(this.moduleid==Wtf.Acc_Sales_Order_ModuleId && Wtf.getCmp("SalesOrderListEntry") != undefined && response.success && Wtf.isAutoRefershReportonDocumentSave){
            Wtf.getCmp("SalesOrderListEntry").Store.on('load', function() {
                WtfComMsgBox([msgTitle,response.msg],response.success*2+1);
            }, Wtf.getCmp("SalesOrderListEntry").Store, {
                single : true
            });
            
        }else if(this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId && Wtf.getCmp("GRListEntry") != undefined && response.success && Wtf.isAutoRefershReportonDocumentSave){
            Wtf.getCmp("GRListEntry").Store.on('load', function() {
                WtfComMsgBox([msgTitle,response.msg],response.success*2+1);
            }, Wtf.getCmp("GRListEntry").Store, {
                single : true
            });
            
        }else if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId && Wtf.getCmp("PurchaseOrderListEntry") != undefined && response.success && Wtf.isAutoRefershReportonDocumentSave){
            Wtf.getCmp("PurchaseOrderListEntry").Store.on('load', function() {
                WtfComMsgBox([msgTitle,response.msg],response.success*2+1);
            }, Wtf.getCmp("PurchaseOrderListEntry").Store, {
                single : true
            });
            
        }else if(this.moduleid==Wtf.Acc_Vendor_Quotation_ModuleId && Wtf.getCmp("VendorQuotationList") != undefined && response.success && Wtf.isAutoRefershReportonDocumentSave){
            Wtf.getCmp("VendorQuotationList").Store.on('load', function() {
                WtfComMsgBox([msgTitle,response.msg],response.success*2+1);
            }, Wtf.getCmp("VendorQuotationList").Store, {
                single : true
            });
        } else if (this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId && Wtf.getCmp("QuotationListEntry") != undefined && response.success && Wtf.isAutoRefershReportonDocumentSave) {
                Wtf.getCmp("QuotationListEntry").Store.on('load', function() {
                    WtfComMsgBox([msgTitle, response.msg], response.success * 2 + 1);
                }, Wtf.getCmp("QuotationListEntry").Store, {
                    single: true
                });

        /**
         * Check to print DO in case of Credit or Cash Sales transaction with auto generated DO.
         * User is prompted to print DO only when auto generate DO check-box is checked by user and 'Wtf.account.companyAccountPref.isAutoSaveAndPrintChkBox' flag is false
         */
       } else if (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Cash_Sales_ModuleId) {
            if (Wtf.account.companyAccountPref.isAutoSaveAndPrintChkBox) {
                resObj.msg = response.msg;
                var sms=WtfGlobal.getLocaleText("acc.gst.CustPORefErrorSI");
                var CustomerPOReferenceNO = resObj.msg.indexOf(sms);
                
                if(CustomerPOReferenceNO != -1){
                     WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),resObj.msg],2);
                }else{
                    this.showSuccessMessage(resObj);
                }
                
            } else {
                /**
                 * Below conditional statement prompts user to confirm if DO is to be printed or not.
                 * It is executed only when auto generate DO check-box is checked by user.
                 */
                if (response.success && this.autoGenerateDO.checked && Wtf.templateflag == Wtf.tanejaHomes_templateflag) {
                    Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.confirm"), response.msg + "<br><br>" + WtfGlobal.getLocaleText("acc.field.PrintDO"), function (btn) {
                        if (btn == "yes") {
                            var selRec = "&amount=" + 0 + "&bills=" + response.doid + "&recordids=" + response.doid + "&isConsignment=" + response.isconsignment + "&isLeaseFixedAsset=" + false;
                            Wtf.get('downloadframe').dom.src = "ACCExportRecord/exportRecords.do?mode=" + Wtf.autoNum.DeliveryOrder + "&rec=" + selRec + Wtf.autoNum.DeliveryOrder + "&personid=" + response.personid + "&filename=" + response.dono + "&filetype=pdf&contraentryflag=" + false + "&recordids=" + response.doid + "&templateflag=" + Wtf.templateflag + "&isexpenseinv=" + false + "&companyid=" + companyid;
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.field.PrintSuccessInfo"), WtfGlobal.getLocaleText("acc.field.PrintingSuccessful")], response.success * 2 + 2);
                        }
                        return;
                    }, this);
                } else if (Wtf.getCmp("InvoiceListNavigationEntry") != undefined && response.success && Wtf.isAutoRefershReportonDocumentSave) {
                    Wtf.getCmp("InvoiceListNavigationEntry").Store.on('load', function() {
                        WtfComMsgBox([msgTitle,response.msg],response.success*2+1);
                    }, Wtf.getCmp("InvoiceListNavigationEntry").Store, {
                        single : true
                    });
                } else {
                    WtfComMsgBox([this.titlel, response.msg], response.success * 2 + 2);
                }
            }
         } else if(this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId && Wtf.getCmp("NavigationPurchaseInvoiceList") != undefined && response.success && Wtf.isAutoRefershReportonDocumentSave){
            Wtf.getCmp("NavigationPurchaseInvoiceList").Store.on('load', function() {
                 WtfComMsgBox([msgTitle,response.msg],response.success*2+1);
            }, Wtf.getCmp("NavigationPurchaseInvoiceList").Store, {
                single : true
            });
            
         } else {
             WtfComMsgBox([this.titlel, response.msg], response.success * 2 + 2);
         }
        /*
         * Check '(editinv?(this.autoGenerateDO.getValue()?false:true):true)' has been removed from following if block because
         * previously we were not allowing to edit PI/SI if autocreate GR/DO is enabled now we are allowing to save such transaction
         * so this scenario is now considered for duplicate number generation case and control will enter into if block.
         */
        if ((this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId || this.moduleid == Wtf.Acc_Vendor_Quotation_ModuleId || this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Purchase_Order_ModuleId) && response.isAccountingExe && notInvDuplicateExe) {
                Wtf.MessageBox.hide();
                var label="";
                var maskRe="";
                if(Wtf.IndianGST && (this.moduleid == Wtf.Acc_Invoice_ModuleId||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId)){ // Wtf.IndianGST is combination of india country and GST check
                    maskRe=/[0-9.]/; //*** For Indian GST Purchase and sales Invoice number should be numeric only ****//
                }
                switch (this.moduleid){
                case Wtf.Acc_Invoice_ModuleId:
                    if (response.doinvflag == 0){
                        if(this.cash){
                            label =WtfGlobal.getLocaleText("acc.CS.newcashsaleseno");
                        }else{
                            label =WtfGlobal.getLocaleText("acc.INV.newdinvoiceno");
                        }
                    } else{
                        label =WtfGlobal.getLocaleText("acc.DO.newdeliveryorderno");
                    }
                    break;
                case Wtf.Acc_Vendor_Invoice_ModuleId:
                    if (response.doinvflag == 0){
                        if(this.cash){
                            label =WtfGlobal.getLocaleText("acc.CP.newcashpurchaseeno");
                        }else{
                            label =WtfGlobal.getLocaleText("acc.INV.newpurchaseinvno");
                        }
                    } else{
                        label =WtfGlobal.getLocaleText("acc.GR.newgoodsreceiptno");
                    }
                    break;
                case Wtf.Acc_Customer_Quotation_ModuleId:
                    label = WtfGlobal.getLocaleText("acc.QUO.newcustquotationno");
                    break;
                case Wtf.Acc_Vendor_Quotation_ModuleId:
                    label = WtfGlobal.getLocaleText("acc.QUO.newvendquotationno");
                    break;
                case Wtf.Acc_Sales_Order_ModuleId:
                    label = WtfGlobal.getLocaleText("acc.SO.newsalesorderno");
                    break;
                case Wtf.Acc_Purchase_Order_ModuleId:
                    label = WtfGlobal.getLocaleText("acc.QUO.newpurchaseorderno");
                    break;
                }
                this.newdowin = new Wtf.Window({
                    title: WtfGlobal.getLocaleText("acc.common.success"),
                    closable: true,
                    iconCls: getButtonIconCls(Wtf.etype.deskera),
                    width: 330,
                    autoHeight: true,
                    modal: true,
                    bodyStyle: "background-color:#f1f1f1;",
                    closable:false,
                            buttonAlign: 'right',
                    items: [new Wtf.Panel({
                    border: false,
                    html: (response.msg.length>60)?response.msg:"<br>"+response.msg,
                    height: 50,
                    bodyStyle: "background-color:white; padding: 7px; font-size: 11px; border-bottom: 1px solid #bfbfbf;"
                }),
                this.newdoForm = new Wtf.form.FormPanel({
                    labelWidth: 190,
                    border: false,
                    autoHeight: true,
                    bodyStyle: 'padding:10px 5px 3px; ',
                    autoWidth: true,
                    defaultType: 'textfield',
                    items: [this.newdono = new Wtf.form.TextField({
                        fieldLabel: label,
                        allowBlank: false,
                        labelSeparator: '',
                        width: 90,
                        itemCls: 'nextlinetextfield',
                        name: 'newdono',
                        id: 'newdono',
                        maskRe:maskRe
                    })],
                    buttons: [{
                        text: WtfGlobal.getLocaleText("acc.common.saveBtn"),
                        handler: function () {
                            if (this.newdono.validate()) {
                                                    
                                switch (this.moduleid) {
                                    case Wtf.Acc_Vendor_Invoice_ModuleId:
                                    case Wtf.Acc_Invoice_ModuleId:
                                        if (response.doinvflag == 0) {
                                            Wtf.getCmp("invoiceNo"+this.heplmodeid+this.id).setValue(this.newdono.getValue());
                                        } else {
                                            Wtf.getCmp("deliveryONo"+this.heplmodeid+this.id).setValue(this.newdono.getValue());
                                        }
                                        break;
                                    case Wtf.Acc_Purchase_Order_ModuleId:
                                    case Wtf.Acc_Customer_Quotation_ModuleId:
                                    case Wtf.Acc_Vendor_Quotation_ModuleId:
                                    case Wtf.Acc_Sales_Order_ModuleId:
                                        Wtf.getCmp("invoiceNo"+this.heplmodeid+this.id).setValue(this.newdono.getValue());
                                        break;
                                }
                                                            
                                this.beforeSave();
                                this.newdowin.close();
                            }
                        },
                        scope: this
                    }, {
                        text: WtfGlobal.getLocaleText("acc.common.cancelBtn"), //"Cancel",
                        scope: this,
                        handler: function () {
                            this.newdowin.close();
                        }
                    }]
                })]
                });
                this.newdowin.show();    
        }else if ((this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId ) && this.isEdit && response.isAccountingExe) {
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),response.msg],2);
        }
    }
    var rec=this.NorthForm.getForm().getValues();
    if(!WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)||!WtfGlobal.EnableDisable(this.uPermType, this.printPermType)){//after saving
        this.exportRecord=rec;
        this.exportRecord['billid']=response.billid||response.invoiceid;
        this.exportRecord['billno']=response.billno||response.invoiceNo;
        this.exportRecord['amount']=(this.moduleid==22||this.moduleid==23||this.moduleid==20)?this.totalAmount:response.amount; //ERP-9467 Added SO module id.
        this.exportRecord['isexpenseinv']=response.isExpenseInv!=undefined? response.isExpenseInv:false; //To export the good receipt of Expense Type.
        //Adding invoice term record to populate on SO/DO/SI/GR/PO/PI      ERP-33441
        this.exportRecord['termdetails'] = this.getInvoiceTermWithoutEncode();
        var exportData=this.exportRecord;    
        if (this.exportRecord != undefined && Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA) {
                exportData.billid = [this.exportRecord.billid];
        }
        if (!WtfGlobal.EnableDisable(this.uPermType, this.printPermType) || !WtfGlobal.EnableDisable(this.uPermType, this.exportPermType)) {
            this.singlePrint.exportRecord = exportData;
    }
//        if (!WtfGlobal.EnableDisable(this.uPermType, this.printPermType)) {
//            this.singleRowPrint.exportRecord = this.exportRecord;
//        }
        }
    if(response.success){
        while(Wtf.dupsrno.length>0){
                Wtf.dupsrno.pop();
            }
        if (Wtf.account.companyAccountPref.deliveryPlanner && (this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Purchase_Order_ModuleId)) {
            Wtf.getCmp("pushtoplanner" + this.heplmodeid + this.id).enable();
            this.fullShippingAddress = response.fullShippingAddress;
        }
             
        if(this.isGenerateReceipt){
            var mode = "";                
            if(this.businessPerson=="Customer"){
                if(!this.quotation && !this.isOrder){
                    mode = (this.isCustBill?23:22);
                }
            }
            var fileName="Cash Sales Payment Recieved "+response.invoiceNo;
            var selRec = "&amount="+this.totalAmount+"&bills="+response.invoiceid+"&customer=Cash&accname="+response.accountName+"&personid="+response.accountid;//+"&address="+recData.address;
            Wtf.get('downloadframe').dom.src = "ACCInvoiceCMN/exportCashReceipt.do?mode="+mode+"&rec="+selRec+"&personid="+response.accountid+"&filename="+fileName+"&filetype=pdf"
        }

        /**
         * closing the tab after saving the template in create and edit case
        */
        if(this.isTemplate || this.isEditTemplate){
            this.ownerCt.remove(this);
        }
            
        if(this.saveOnlyFlag){
            this.loadUserStoreForInvoice(response, request);
            this.disableComponent();
            //                Wtf.getCmp("emailbut" + this.id).enable();
            //                Wtf.getCmp("exportpdf" + this.id).enable();
            this.response = response;
            //                this.record.data.billid=this.response.invoiceid;
            /*For SATS*/
            if(SATSCOMPANY_ID==companyid){
                if(this.response.invoiceid != undefined){
                    this.record.data.billid=this.response.invoiceid;
                }else{
                    this.record.data.billid=this.response.billid;
                }
            }
            /**********/
            
            /*To refresh the grid of Drafted reports*/
            if(this.moduleid==Wtf.Acc_Sales_Order_ModuleId && Wtf.getCmp("draftedSalesOrderList") != undefined && Wtf.isAutoRefershReportonDocumentSave){
                Wtf.getCmp("draftedSalesOrderList").Store.load({
                    params: {
                        start: 0,
                        limit: Wtf.getCmp("draftedSalesOrderList").pP.combo!= undefined ? Wtf.getCmp("draftedSalesOrderList").pP.combo.value : 30
                    }
                });
            }else if(this.moduleid==Wtf.Acc_Invoice_ModuleId && Wtf.getCmp("draftedInvoiceList") != undefined && Wtf.isAutoRefershReportonDocumentSave){
                Wtf.getCmp("draftedInvoiceList").Store.load({
                    params: {
                        start: 0,
                        limit: Wtf.getCmp("draftedInvoiceList").pP.combo!= undefined ? Wtf.getCmp("draftedInvoiceList").pP.combo.value : 30
                    }
                });
            }else if(this.moduleid==Wtf.Acc_Customer_Quotation_ModuleId && Wtf.getCmp("draftedcustomerquotationList") != undefined && Wtf.isAutoRefershReportonDocumentSave){
                Wtf.getCmp("draftedcustomerquotationList").Store.load({
                    params: {
                        start: 0,
                        limit: Wtf.getCmp("draftedcustomerquotationList").pP.combo!= undefined ? Wtf.getCmp("draftedcustomerquotationList").pP.combo.value : 30
                    }
                });
            }
            this.request = request;
            return;
        }
        this.currentAddressDetailrec="";//after saveandcreatenew this variable need to clear it old values. 
        this.singleLink = false;
        this.isVenOrCustSelect=false;
        if(this.maintenanceNumberComboStore &&!this.isExpenseInv){
            this.isMaintenanceOrderCheckBox.setValue(false);
            this.maintenanceNumberComboStore.load();
        }
        this.lastTransPanel.Store.removeAll();
        this.symbol = WtfGlobal.getCurrencySymbol();
        this.currencyid = WtfGlobal.getCurrencyID();
        this.loadStore();
        this.fromPO.disable();
        if(this.cash && !this.SouthForm.hidden){
            this.SouthForm.hide(); 
            this.setCashMethod();
        }
        this.currencyStore.load();                  
        this.Currency.setValue(WtfGlobal.getCurrencyID()); // Reset to base currency 
        this.externalcurrencyrate=0; //Reset external exchange rate for new Transaction.
        this.isClosable= true;       //Reset Closable flag to avoid unsaved Message.
         this.moduleTemplateStore.load();
        this.templateModelCombo.setValue("");
        this.isAfterSaveNCreateNew=true;
        this.termStore.reload(); // Reset Purchase/Sales Term store when clicked "Save and create new" button          
        if(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash){
            this.InvoiceStore.reload();
        }          
        Wtf.dirtyStore.product = true;
        var currentTaxItem=WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
        var actualTaxId=currentTaxItem!=null?currentTaxItem.get('taxId'):""; 
        
        
            /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
             *  Then we ignore Customer/Vendor mapped taxes
             *  Consider Only Product mapped taxes i.e - only line level taxes(Create New Case)
             */
            if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
                actualTaxId = "";
            }
        
        if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null ){
            this.isTaxable.setValue(true);
            this.Tax.enable();
            this.Tax.setValue(actualTaxId);
        }else{
            this.isTaxable.setValue(false);
            this.Tax.setValue('');
            this.Tax.disable();
        }
        this.postText="";
        // If Cash Received value is available then set it in textbox
        if(response.cashReceived){
            this.cashReceived.setValue(response.cashReceived);
        }
        var customFieldArray = this.tagsFieldset.customFieldArray;  //Reset Custom Fields
        if(customFieldArray!=null && customFieldArray!=undefined && customFieldArray!="" ) {
            for (var itemcnt = 0; itemcnt < customFieldArray.length; itemcnt++) {
                var fieldId = customFieldArray[itemcnt].id
                var isessential = this.tagsFieldset.customFieldArrayValues[itemcnt].isessential;
                var fieldtype = this.tagsFieldset.customFieldArrayValues[itemcnt].fieldtype;
                if (Wtf.getCmp(fieldId) != undefined && customFieldArray[itemcnt].getXType()!='fieldset') {
                    if(!isessential){
                        if(fieldtype != 15){
                            Wtf.getCmp(fieldId).reset();
                        } else{
                            Wtf.getCmp(fieldId).getEditorBody().remove();
                        }
                    }
                }
            } 
        }
        var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray;  //Reset Check List
        if(checkListCheckBoxesArray!=null && checkListCheckBoxesArray!=undefined && checkListCheckBoxesArray!="" ) {
            for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
                var checkfieldId = checkListCheckBoxesArray[checkitemcnt].id
                if (Wtf.getCmp(checkfieldId) != undefined) {
                    Wtf.getCmp(checkfieldId).reset();
                }
            }
        }
        var customDimensionArray = this.tagsFieldset.dimensionFieldArray;  //Reset Custom Dimension
        if(customDimensionArray!=null && customDimensionArray!=undefined && customDimensionArray!="" ){
            for (var itemcnt1 = 0; itemcnt1 < customDimensionArray.length; itemcnt1++) {
                var fieldId1 = customDimensionArray[itemcnt1].id
                var isessential = this.tagsFieldset.dimensionFieldArrayValues[itemcnt1].isessential;
                if (Wtf.getCmp(fieldId1) != undefined) {
                     if(!isessential){
                        Wtf.getCmp(fieldId1).reset();
                    }
                }
            } 
            this.fireEvent('update',this);
            this.amountdue=0;
        }
    }
},

    genFailureResponse:function(response){
        WtfGlobal.resetAjaxTimeOut();
        Wtf.MessageBox.hide();
        var msg=WtfGlobal.getLocaleText("acc.common.msg1");//"Failed to make connection with Web Server";
        if(response.msg)msg=response.msg;
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg],2);
    },
    /*
     * Below method is used to pop up message in Auto save and Print case
    */
    showSuccessMessage: function(resObj) {
        Wtf.MessageBox.show({
            title: resObj.parentObj.titlel, 
           msg: resObj.msg,
            buttons: Wtf.MessageBox.OK,
            icon: Wtf.MessageBox.INFO,
            width: 420,
            scope: resObj.parentObj,
            fn: function(btn) {
                if (btn == "ok") {
                 resObj.parentObj.callAutoSaveandPrintDocumentTemplates(resObj);
                }
            }
        });
    },
    /*
     * Below method is used show All default template of Sales Invoices and Delivery Order Templates and Print It
    */
    callAutoSaveandPrintDocumentTemplates: function(resObj) {
        new Wtf.account.autoSaveAndPrintTemplateWin({
            id : 'autoSaveAndPrintTemplateWin',
            border : false,
            layout: 'fit',
            title:WtfGlobal.getLocaleText("acc.common.saveAndPrintTempWinTitle"),
            closable: true,
            iconCls:'accountingbase',
            modal: true,
            width: 600,
            height: 500,
            bodyStyle: 'padding:5px;background-color:#f1f1f1;',
            autoScroll: true,
            invoiceParentObj:resObj,
            resizable: false,
            buttonAlign: "right",
            renderTo: document.body
        }).show();
    },   
callEmailWindowFunction : function(response, request){
    
    if(response.pendingApproval){
        var titleMsg = this.getLables();
        WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.information'),titleMsg+' '+WtfGlobal.getLocaleText("acc.field.ispendingforapprovalSoyoucannotsendmailrightnow")],3);
        return;
    }
    if(this.CustomStore != null){
        /*
         * ERP-33648-In Mail body wrong invoic number showing
         */
        var rec="";
        if(response.billid!=undefined && response.billid!=''){
            rec = this.CustomStore.getAt(this.CustomStore.find('billid',response.billid));
        }else if(response.invoiceid!=undefined && response.invoiceid!=''){
            rec = this.CustomStore.getAt(this.CustomStore.find('billid',response.invoiceid));
        }
        var label = "";
        if(this.cash){
            if(this.isCustomer){
                label = WtfGlobal.getLocaleText("acc.field.CashSalesReceipt");
                if(rec.data.withoutinventory){
                    callEmailWin("emailwin",rec,label,11,true,false,false,true);
                }else{
                    callEmailWin("emailwin",rec,label,2,true,false,false,true);
                }
            }else{
                label = WtfGlobal.getLocaleText("acc.field.CashPurchaseReceipt");
                if(rec.data.withoutinventory){
                    callEmailWin("emailwin",rec,label,15,false,false,false,true);
                }else{
                    callEmailWin("emailwin",rec,label,6,false,false,false,true);
                }
            }
        } else if(this.isOrder && !this.quotation){
            if(this.isCustomer){
                label = WtfGlobal.getLocaleText("acc.wtfTrans.so");
                if(rec.data.withoutinventory){
                    callEmailWin("emailwin",rec,label,17,true,false,false,false,true);
                }else if(this.moduleid==Wtf.Acc_Sales_Order_ModuleId){
                    callEmailForMultipleRecords('', rec, this.label, 1, true,'', this.label,'pdf', 24, undefined,false,true,"",Wtf.Acc_Sales_Order_ModuleId);
                }else{
                    callEmailWin("emailwin",rec,label,1,true,false,false,false,true);
                }
            }else{
                label = WtfGlobal.getLocaleText("acc.wtfTrans.po");
                if(rec.data.withoutinventory){
                    callEmailWin("emailwin",rec,label,18,false,false,false,false,true);
                } else if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId){
                    callEmailForMultipleRecords('', rec, this.label, 5, true,'', this.label,'pdf', 24, undefined,false,true,"",Wtf.Acc_Purchase_Order_ModuleId);
                }else{
                    if(this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId){
                        callEmailWin("emailwin",rec,this.label,5,false,false,false,false,true,false,false,false,false,false,false,false,true);
                    }else{
                        callEmailWin("emailwin",rec,label,5,false,false,false,false,true);
                    }
                }
            }
        } else if(this.quotation){
            if(this.isCustomer){
                label = WtfGlobal.getLocaleText("acc.dimension.module.12");
                if(this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId){
               callEmailForMultipleRecords('', rec, this.label, 50, true,'', this.label,'pdf', 24, undefined,false,true,"",Wtf.Acc_Customer_Quotation_ModuleId);
            }else{
                callEmailWin("emailwin",rec,label,50,true,false,true);
            }
            }else{
                label = WtfGlobal.getLocaleText("acc.vend.createvendQ");
                if(this.moduleid == Wtf.Acc_Vendor_Quotation_ModuleId){
                callEmailForMultipleRecords('', rec, this.label, 57, true,'', this.label,'pdf', 24, undefined,false,true,"",Wtf.Acc_Vendor_Quotation_ModuleId);
            }else{
                callEmailWin("emailwin",rec,label,57,false,false,true);
            }
            }
        }else{
            if(this.isCustomer){
                label = WtfGlobal.getLocaleText("acc.field.CustomerInvoice");
                if(rec.data.withoutinventory){
                    callEmailWin("emailwin",rec,label,11,true,true);
                }else if (this.moduleid == Wtf.Acc_Invoice_ModuleId) {
                        callEmailForMultipleRecords('', rec, this.label,2, true, '', this.label, 'pdf', 24, undefined, false, true, "", Wtf.Acc_Invoice_ModuleId);
                    } else {
                        callEmailWin("emailwin", rec, label, 2, true, true);
                    }
            }else{
                label = WtfGlobal.getLocaleText("acc.agedPay.venInv");
                if(rec.data.withoutinventory){
                    callEmailWin("emailwin",rec,label,15,false,true);
                }else if (this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId) {
                        callEmailForMultipleRecords('', rec, this.label,6, true, '', this.label, 'pdf', 24, undefined, false, true, "", Wtf.Acc_Vendor_Invoice_ModuleId);
                    }else{
                    callEmailWin("emailwin",rec,label,6,false,true);
                }
            }
        }
    }
},

getLables : function(){
    var label = "";
    if(this.cash){
        if(this.isCustomer){
            label = WtfGlobal.getLocaleText("acc.field.CashSalesReceipt");
        }else{
            label = WtfGlobal.getLocaleText("acc.field.CashPurchaseReceipt");
        }
    }else if(this.isOrder && !this.quotation){
        if(this.isCustomer){
            label = WtfGlobal.getLocaleText("acc.accPref.autoSO");
        }else{
            label = WtfGlobal.getLocaleText("acc.accPref.autoPO");
        }
    }else if(this.quotation){
        if(this.isCustomer){
            label = WtfGlobal.getLocaleText("acc.accPref.autoCQN");
        }else{
            label = WtfGlobal.getLocaleText("acc.dimension.module.11");
        }
    }else{
        if(this.isCustomer){
            label = WtfGlobal.getLocaleText("acc.field.CustomerInvoice");
        }else{
            label = WtfGlobal.getLocaleText("acc.agedPay.venInv");
        }
    }
    
    return label;
},

disableComponent: function(){ // disable following component in case of save button press.
   
    if(this.fromLinkCombo && this.fromLinkCombo.getValue() === ''){
  //      this.fromLinkCombo.emptyText = "";//commented as when linkto is disabled , empty text gets blank after save.
        this.fromLinkCombo.clearValue();
    }
    
    if(this.PO && this.PO.getValue() === ''){
        this.handleEmptyText=true;
   //     this.PO.emptyText = "";
        this.PO.clearValue();        
    }
   
    if(this.savencreateBttn){
        this.savencreateBttn.disable();
    }
    if(this.saveBttn){
        this.saveBttn.disable();
    }
    if (this.saveAsDraftBttn) {
        this.saveAsDraftBttn.disable();
    }
    
    if(Wtf.getCmp("posttext" + this.id)){
        Wtf.getCmp("posttext" + this.id).disable();
    }
    
    if(Wtf.getCmp("showaddress" + this.id)){
        Wtf.getCmp("showaddress" + this.id).disable(); 
    } 
    //Disable Add Attachments button
    if(Wtf.getCmp("attachments" + this.id)){
        Wtf.getCmp("attachments" + this.id).disable(); 
    }
       
    if(this.Grid){
        var GridStore = this.Grid.getStore();
        var count2 = GridStore.getCount();
        var lastRec2 = GridStore.getAt(count2-1);
        GridStore.remove(lastRec2);
    }

    if(this.GridPanel){
  if(this.modeName=="autocashpurchase" || this.modeName=="autogoodsreceipt"){
            this.ProductGrid.purgeListeners();
            this.ExpenseGrid.purgeListeners();
            if(this.isExpenseInv) {
                this.ProductGrid.disable();
            } else {
                this.ExpenseGrid.disable();
            }
        } else {
            this.GridPanel.disable();  
        }

    }else{
        this.Grid.purgeListeners();
    }

    if(this.NorthForm){
        this.NorthForm.disable();
    }
    if((Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA || Wtf.isExciseApplicable) && this.exciseFormPanel1){
          if(this.exciseFormPanel1.getForm().items != undefined && this.exciseFormPanel1.getForm().items != null){
                for(var i=0; i<this.exciseFormPanel1.getForm().items.length;i++){
                    this.exciseFormPanel1.getForm().items.item(i).disable();
                }
          }
//        this.exciseFormPanel1.disable();
    }

    if(this.southPanel){
        this.southPanel.disable();
    }
    if (this.SouthForm) {
            this.SouthForm.disable();
      }
      if (Wtf.getCmp("deleteButton" + this.heplmodeid + this.id)) {
            Wtf.getCmp("deleteButton" + this.heplmodeid + this.id).disable();
       }
},
bomComboRenderer: function(combo) {
        return function(value, metadata, record, row, col, store) {
            var idx = WtfGlobal.searchRecordIndex(combo.store, value, combo.valueField);
            var fieldIndex = "bomcode";
            if (idx == -1) {
                if (record.data["bomcode"] && record.data[fieldIndex].length > 0) {
                    return record.data[fieldIndex];
                } else {
                    return "";
                }
            }
            var rec = combo.store.getAt(idx);
            var displayField = rec.get("bomcode");
            record.set("subbomid", value);
            record.set("bomcode", displayField);
            return displayField;
        }
    },

enableSaveButtons:function(){
  this.saveAsDraftBttn.enable();
  this.savencreateBttn.enable();
  this.saveBttn.enable();
},
disableSaveButtons:function(){
  this.saveAsDraftBttn.disable();
  this.savencreateBttn.disable();
  this.saveBttn.disable();
},

fillData : function(store){
    this.loadingMask.hide();
    var rec = store.getAt(0);
    if(this.isExciseTab){
        rec.data.isExciseInvoice = this.isExciseTab;       
    }
    this.openModuleTab(rec);
    this.ownerCt.remove(this);
},

openModuleTab:function(formrec){
    var templateId = this.templateModelCombo.getValue();
    var copyInv = true;
    var isQuotation = false;
    var isQuotation =formrec.get("isQuotation");
    WtfGlobal.openModuleTab(this, this.isCustomer, isQuotation , this.isOrder, copyInv, templateId, formrec);
},
                
loadUserStoreForInvoice : function(response, request){
    
   var customRec = Wtf.data.Record.create ([
        {name:'billid'},
        {name:'journalentryid'},
        {name:'entryno'},
        {name:'billto'},
        {name:'discount'},
        {name:'currencysymbol'},
        {name:'orderamount'},
        {name:'isexpenseinv'},
        {name:'currencyid'},
        {name:'shipto'},
        {name:'mode'},
        {name:'billno'},
        {name:'date', type:'date'},
        {name:'duedate', type:'date'},
        {name:'shipdate', type:'date'},
        {name:'personname'},
        {name:'personemail'},
        {name:'billingEmail'},
        {name:'personid'},
        {name:'shipping'},
        {name:'othercharges'},
        {name:'partialinv',type:'boolean'},
        {name:'amount'},
        {name:'amountdue'},
        {name:'termdays'},
        {name:'termname'},
        {name:'incash'},
        {name:'taxamount'},
        {name:'taxid'},
        {name:'orderamountwithTax'},
        {name:'taxincluded',type:'boolean'},
        {name:'taxname'},
        {name:'deleted'},
        {name:'amountinbase'},
        {name:'memo'},
        {name:'externalcurrencyrate'},
        {name:'ispercentdiscount'},
        {name:'discountval'},
        {name:'crdraccid'},
        {name:'creditDays'},
        {name:'isRepeated'},
        {name:'porefno'},
        {name:'costcenterid'},
        {name:'costcenterName'},
        {name:'interval'},
        {name:'intervalType'},
        {name:'startDate', type:'date'},
        {name:'nextDate', type:'date'},
        {name:'expireDate', type:'date'},
        {name:'repeateid'},
        {name:'status'},
        {name:'archieve', type:'int'},
        {name:'withoutinventory',type:'boolean'},
        {name:'rowproductname'},
        {name:'rowquantity'},
        {name:'rowrate'},
        {name:'rowprdiscount'},
        {name:'rowprtaxpercent'},
        {name:'agent'},
        {name:'includeprotax'},
        {name:'companyname'}
        
    ]);
    
    var customStoreUrl = "";
    
    if(this.isOrder && !this.quotation){
        customStoreUrl= this.businessPerson=="Customer" ? "ACCSalesOrderCMN/getSalesOrdersMerged.do":"ACCPurchaseOrderCMN/getPurchaseOrdersMerged.do"  
    }else if(this.quotation){
        customStoreUrl = this.isCustomer? "ACCSalesOrderCMN/getQuotations.do" : "ACCPurchaseOrderCMN/getQuotations.do";
    }else{
        customStoreUrl= this.businessPerson=="Customer" ? "ACCInvoiceCMN/getInvoicesMerged.do" : "ACCGoodsReceiptCMN/getGoodsReceiptsMerged.do";
    }
    this.CustomStore = new Wtf.data.GroupingStore({
            url:customStoreUrl,
            scope:this,
            baseParams:{
                archieve:0,
                costCenterId: this.CostCenter.getValue(),
                deleted:false,
                nondeleted:false,
                cashonly:(this.cash == undefined)?false:this.cash,
                creditonly:false,
                consolidateFlag:false,
                companyids:companyids,
                enddate:'',
                pendingapproval:response.pendingApproval,
                isOpeningBalanceOrder:this.isOpeningBalanceOrder,
                gcurrencyid:gcurrencyid,
                userid:loginid,
                isfavourite:false,
                startdate:'',
                ss:(this.isOrder && this.businessPerson=="Vendor")?"":request.params.number
            },
            sortInfo : {
                field : 'companyname',
                direction : 'ASC'
            },
            groupField : 'companyname',
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:'count'
            },customRec)
        });
        this.CustomStore.on('beforeload', function(store, object) {
            if (!object.params) {
                object.params = {};
            }
            var currentBaseParams = this.CustomStore.baseParams;
            currentBaseParams.billid = response.billid;
            this.CustomStore.baseParams = currentBaseParams;
        }, this);
        this.CustomStore.on('load', this.enableButtons(), this);
        this.CustomStore.load();
        
},

enableButtons : function(){
    if(Wtf.getCmp("emailbut" + this.id)){
        Wtf.getCmp("emailbut" + this.id).enable();
    }
    if(Wtf.getCmp("exportpdf" + this.id)){
        Wtf.getCmp("exportpdf" + this.id).enable();
    }
    if (Wtf.getCmp("printSingleRecord" + this.id)) { //Enabling Print record button after saving
        Wtf.getCmp("printSingleRecord" + this.id).enable();
    }
    if(Wtf.getCmp("RecurringSO")){
        Wtf.getCmp("RecurringSO").enable();
    }
//    /*
//     * Enable Generate Sales/Purchase Invoice button after creating Sales/Purchase Order
//     */
//    if(Wtf.getCmp("generateinvoice" + this.id)){
//        Wtf.getCmp("generateinvoice" + this.id).enable();
//    }
},
// ERP-13087 Removing the functions that are no longer required

//exportPdfFunction : function(response, request){
//    if(this.CustomStore != null){
//        var rec = this.CustomStore.getAt(0);
//        var recData = rec.data;
//        var billno = recData.billno;
//        var selRec = "&amount="+recData.amount+"&isexpenseinv="+recData.isexpenseinv+"&bills="+recData.billid;
//        var fileName = this.label+" "+billno; 
//        var mode = "";
//        if(this.cash){
//            if(this.isCustomer){
//                if(recData.withoutinventory){
//                    mode = 11;
//                }else{
//                    mode = 2;
//                }
//            }else{
//                if(recData.withoutinventory){
//                    mode = 15;
//                }else{
//                    mode = 6;
//                }
//            }
//        } else if(this.isOrder && !this.quotation){
//            if(this.isCustomer){
//                fileName="Sales Order "+recData.billno;
//                if(recData.withoutinventory){
//                    mode = 17;
//                }else{
//                    mode = 1;
//                }
//            }else{
//                fileName="Purchase Order "+recData.billno;
//                if(recData.withoutinventory){
//                    mode = 18;
//                }else{
//                    mode = 5;
//                }
//            }
//        } else if(this.quotation){
//            fileName="Quotation "+recData.billno;
//            if(this.isCustomer){
//                mode = 50;
//            }else{
//                mode = 57;
//            }
//        }else{
//            if(this.isCustomer){
//                fileName="Invoice "+recData.billno;
//                if(recData.withoutinventory){
//                    mode = 11;
//                }else{
//                    mode = 2;
//                }
//            }else{
//                fileName="Vendor Invoice "+recData.billno;
//                if(recData.withoutinventory){
//                    mode = 15;
//                }else{
//                    mode = 6;
//                }
//            }
//        }
//         if (mode==50 && Wtf.templateflag == 2) {
//            Wtf.get('downloadframe').dom.src = "ACCInvoiceCMN/exportSenwanGroupSingleCustomerQuotation.do?moduleid=2&mode=" + mode + "&rec=" + selRec + "&personid=" + recData.personid + "&filename=" + fileName + "&filetype=pdf";
//        }
//        else if ((mode==2||mode==11)&&!rec.data.isadvancepayment && Wtf.templateflag == 2) {
//            Wtf.get('downloadframe').dom.src = "ACCInvoiceCMN/exportSenwanCommercialInvoiceJasper.do?moduleid=2&mode=" + mode + "&rec=" + selRec + "&personid=" + recData.personid + "&filename=" + fileName + "&filetype=pdf";
//        }
//         else if ((mode==2||mode==11)&&!rec.data.isadvancepayment && Wtf.templateflag == 16) {
//            Wtf.get('downloadframe').dom.src = "ACCInvoiceCMN/exportBMCustomerInvoiceReport.do?moduleid=2&mode=" + mode + "&rec=" + selRec + "&personid=" + recData.personid + "&filename=" + fileName + "&filetype=pdf";
//        }
//        else if ((mode==2||mode==11)&&!rec.data.isadvancepayment && Wtf.templateflag == 17) {
//            Wtf.get('downloadframe').dom.src = "ACCInvoiceCMN/exportFOneCustomerInvoiceReport.do?moduleid=2&mode=" + mode + "&rec=" + selRec + "&personid=" + recData.personid + "&filename=" + fileName + "&filetype=pdf";
//        }
//        else if((mode==2||mode==11)&&!rec.data.isadvancepayment && Wtf.templateflag == 1){
//              Wtf.get('downloadframe').dom.src = "ACCInvoiceCMN/exportCustomerInvoiceReport.do?moduleid=12&mode=" + mode + "&rec=" + selRec + "&personid=" + recData.personid + "&filename=" + fileName + "&filetype=pdf";
//        }
//        else if((mode==2||mode==11)&&!rec.data.isadvancepayment && Wtf.templateflag == 4){
//              Wtf.get('downloadframe').dom.src = "ACCInvoiceCMN/exportLSHCustomerInvoiceReport.do?moduleid=12&mode=" + mode + "&rec=" + selRec + "&personid=" + recData.personid + "&filename=" + fileName + "&filetype=pdf";
//        }
//        else{
//             Wtf.get('downloadframe').dom.src = "ACCExportRecord/exportRecords.do?mode="+mode+"&rec="+selRec+"&personid="+recData.personid+"&filename="+fileName+"&filetype=pdf";
//        }
//    }
//},



    loadStore:function(){
//        if(!(this.isCustBill||this.isExpenseInv))
//            this.Grid.priceStore.purgeListeners();
        if(!this.isEdit && !this.copyInv){
            this.Grid.getStore().removeAll();
        }
//        this.setTransactionNumber();
        this.PO.setDisabled(true);
        this.fromLinkCombo.clearValue();// there is no problem whether store is loaded or not
        this.fromLinkCombo.clearInvalid();
        this.fromLinkCombo.setDisabled(true);
        if(this.isTemplate || this.isEditTemplate){
            this.createTransactionAlsoOldVal = this.createTransactionAlso;
            this.oldTempNameVal = this.moduleTemplateName.getValue();
        }
        if(this.isEdit){//in edit case need to preserve some data befor resetall
            this.number=this.Number.getValue();                
        }
//        this.NorthForm.getForm().reset();
        this.resetField();
        this.Term.clearValue();
        if(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash){
           this.invoiceList.clearValue();
        } 
        if(this.isExpenseInv){
                this.autoGenerateDO.setValue(false);
                this.autoGenerateDO.disable();
                this.includingGST.setValue(false);
                this.includingGST.disable();
                WtfGlobal.hideFormElement(this.autoGenerateDO);
//                WtfGlobal.hideFormElement(this.invoiceList);
        }else{
                this.autoGenerateDO.reset();
                if(!this.isTemplate) {
                    this.autoGenerateDO.enable();
                }
                this.includingGST.reset();
                this.includingGST.enable();
                this.includeProTax.enable();
                this.applyTaxToTermsChkHideShow(false);
        }
        if(this.isEdit){//in edit case need to preserve some data befor resetall
            this.billDate.setValue(Wtf.serverDate);              
        }
        this.sequenceFormatStore.load();
        if(this.moduleid == Wtf.Acc_Cash_Sales_ModuleId || this.moduleid == Wtf.Acc_Cash_Purchase_ModuleId  || this.moduleid == Wtf.Acc_Invoice_ModuleId  ||this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId )
        this.sequenceFormatStoreDo.load();
        if(this.isTemplate){
            this.moduleTemplateName.setValue(this.oldTempNameVal);
            if(this.createTransactionAlsoOldVal){
                this.createAsTransactionChk.setValue(true);
                if(!this.isViewTemplate){               // View mode- all fields should be disabled unconditionaly
                    this.Number.enable();
                }    
                this.sequenceFormatCombobox.enable();
            }
        }
        this.setTransactionNumber();
        /**
         * this.fromPO should be enable when vendor or customer is present.SDP-13323
         */
        if(this.fromPO && this.Name && this.Name.getValue()!=""){
            //this.PO.enable();
            this.fromPO.enable();
        }else{
            this.fromPO.disable();
        }
        if(this.fromLinkCombo){
            this.fromLinkCombo.setDisabled(true);
            this.fromLinkCombo.clearValue();
        }
        this.fromPO.setValue(false); 
//        this.POStore.reload();			Code Optimizing :)  Unnecessary Reload removed
        if(!this.isEdit && !this.copyInv){
                this.Grid.getStore().removeAll();
            }
        
        if(this.partialInvoiceCmb){
            this.partialInvoiceCmb.disable();
            this.partialInvAmount.reset();
            this.partialInvAmount.disable();
            var id=this.Grid.getId();
            var rowindex=this.Grid.getColumnModel().findColumnIndex("partamount");
            if(rowindex != -1){
                this.Grid.getColumnModel().setHidden( rowindex,true);
            }
            
        }
//         var currentTaxItems=this.Name.store.data.items;
//         var currentTaxId="";
//         var customer= this.Name.getValue();
//            for(var i=0;i<currentTaxItems.length;i++)
//                {
//                     if(this.Name.store.data.items[i].json.accid==customer)
//                         {
//                             currentTaxId=this.Name.store.data.items[i].json.taxId;
//                         }
//                }
        this.showGridTax(null,null,true);
        this.Grid.symbol=undefined; // To reset currency symbol. BUG Fixed #16202
        if(!this.isExpenseInv){
            this.hideShowProfitMarginColumns();
        }
        this.Grid.updateRow(null);
        this.resetForm = true;
         var currentTaxItem=WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
         var actualTaxId=currentTaxItem!=null?currentTaxItem.get('taxId'):"";
         
         
          /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
           *  Then we ignore Customer/Vendor mapped taxes
           *  Consider Only Product mapped taxes i.e - only line level taxes(Create New Case)
           */
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
            actualTaxId = "";
        }
         
                if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null ){
                        this.isTaxable.setValue(true);
                        this.Tax.enable();
                        this.Tax.setValue(actualTaxId);
                }else{
                        this.Tax.setValue("");
                        this.Tax.setDisabled(true);				// 20148 fixed
                        this.isTaxable.setValue(false);
                }
                
        this.template.setValue(Wtf.Acc_Basic_Template_Id);
        
            if(this.saveandcreateBtn){   //ERP-18517
                this.Grid.getStore().removeAll();
                this.includeProTax.enable();
                this.isTaxable.enable();
                this.isTaxable.setValue(false);
                this.applyTaxToTermsChkHideShow(false);
                this.Tax.enable();
                this.Tax.setValue("");
            if (this.moduleid == Wtf.Acc_Purchase_Order_ModuleId || this.moduleid == Wtf.Acc_Sales_Order_ModuleId || this.moduleid == Wtf.Acc_Customer_Quotation_ModuleId || this.moduleid == Wtf.Acc_Vendor_Quotation_ModuleId || this.moduleid == Wtf.Acc_Invoice_ModuleId || this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId) { // Fields not getting reset on "save and create new" for purchase order
                if (this.applyGlobalDiscount) {
                    this.applyGlobalDiscount.reset();
                }
                if (this.globalDiscountType) {
                    this.globalDiscountType.reset();
                }
                if (this.globalDiscount) {
                    this.globalDiscount.reset();
                }
            }
                if(Wtf.account.companyAccountPref.isLineLevelTermFlag){
                    var lineLevelArray = [];
                    for(var i=0; i<Wtf.LineTermsMasterStore.getRange().length; i++){
                        var temp = Wtf.LineTermsMasterStore.getRange()[i].data;
                        temp['taxAmount'] = WtfGlobal.currencyRenderer(0);
                        lineLevelArray.push(temp);
                    }

                    this.LineLevelTermTplSummary.overwrite(this.LineLevelTermTpl.body, {
                        lineLevelArray : Wtf.LineTermsMasterStore.getRange(),
                        TotalTaxAmt : WtfGlobal.currencyRenderer(0)
                    });
                }
                
                if(Wtf.isTDSApplicable && this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId){
                    var personRec = WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
                    if(personRec != undefined){
                        this.updateTDSCalculationDetails(personRec);
                    }
                }
            }
//        var date=WtfGlobal.convertToGenericDate(new Date())
//        if(!(this.isCustBill||this.isExpenseInv)) {
//            var affecteduser = this.Name.getValue();
////            this.Grid.loadPriceStoreOnly(new Date(),this.Grid.priceStore, affecteduser);
//        } else
        this.currencyStore.load({params:{mode:201,transactiondate:WtfGlobal.convertToGenericDate(new Date())}});
        this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body,{productname:"&nbsp;&nbsp;&nbsp;&nbsp;",productid:0,qty:0,soqty:0,poqty:0,blockqty:0,salableStock:0,reserveStock:0});
        this.currencyStore.on("load",function(store){
        if(this.resetForm){
            if(this.Currency.getValue() !="" && WtfGlobal.searchRecord(this.currencyStore,this.Currency.getValue(),"currencyid") == null){
                callCurrencyExchangeWindow();
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.invoice.msg1")],2); //"Please set Currency Exchange Rates"
            } else {
                this.isCurrencyLoad=true;
                
                    var personId = this.Name.getValue();
                    var personRec = WtfGlobal.searchRecord(this.personstore, personId, this.Name.valueField);
                    var personCurrencyId = personRec ? (personRec.data ? personRec.data.currencyid : WtfGlobal.getCurrencyID()) : WtfGlobal.getCurrencyID();
                    if (Wtf.productDetailsGridIsEmpty(this.Grid)) {           //refer ticket ERP-14001
                        /*
                         * check in case of currency in transaction and vendor currency are different
                         **/
                        if (!this.invoicefromorder) {
                            this.Currency.setValue(personCurrencyId);
                        }
                        var currencyRecord = WtfGlobal.searchRecord(this.currencyStore, personCurrencyId, this.Currency.valueField);
                        this.externalcurrencyrate = currencyRecord.data ? currencyRecord.data.exchangerate : "";//set because old value was company base currency's exchange rate i.e. '1'
                    } else {
                        /*
                         * check in case of currency in transaction and vendor currency are different
                         * 
                         **/
                        if (!this.invoicefromorder) {
                            if (personCurrencyId) {
                                this.Currency.setValue(personCurrencyId);
                            } else {
                                this.Currency.setValue(WtfGlobal.getCurrencyID());
                            }
                        }
                    }
                //                    this.currencyid=WtfGlobal.getCurrencyID();
                this.applyCurrencySymbol();
                
                 /*
                 * If IncludingGST = true in GR and Generating PI then flag=false
                 */
                var flag = (this.includingGST.getValue() || this.includeProTax.getValue());
                this.showGridTax(null, null, flag == true ? false : true);
                if (this.includingGST.getValue() == true)
                {
                  this.includeProTax.disable();
                }
                if(this.isEdit){  
                    if(this.record.data.includeprotax){
                        this.includeProTax.setValue(true);
                        this.showGridTax(null,null,false);
                    }else{
                        this.includeProTax.setValue(false);
                        this.showGridTax(null,null,true);
                    }
                }
                var currentTaxItem=WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
                var actualTaxId=currentTaxItem!=null?currentTaxItem.get('taxId'):"";
                
                    /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
                     *  Then we ignore Customer/Vendor mapped taxes
                     *  Consider Only Product mapped taxes i.e - only line level taxes(Create New Case)
                     */
                if(CompanyPreferenceChecks.mapTaxesAtProductLevel()){
                  actualTaxId ="";  
                }
                /**
                 * From generate SI if line level tax is applied for customer whoose global tax is applied then ignore Global tax.
                 */
                if (this.invoicefromorder && this.invoicefromorderrec != null && (typeof this.invoicefromorderrec.includeprotax == 'string' || typeof this.invoicefromorderrec.includeprotax == 'boolean') && (this.invoicefromorderrec.includeprotax == true || this.invoicefromorderrec.includeprotax == "true")) {
                    actualTaxId = "";
                }
                if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null ){
                    this.isTaxable.setValue(true);
                    this.Tax.enable();
                    this.Tax.setValue(actualTaxId);
                } else {
                    this.isTaxable.setValue(false);
                    this.Tax.setValue('');
                     this.Tax.disable();
                    }

                    this.setTaxesOnGenerateSIAndPI();
                    
                    if (this.isEdit) {
                        this.setProductAndTransactionTaxValues();
                    }
                //                    this.applyTemplate(this.currencyStore,0);
                this.resetForm = false;
            }
        }
    },this);
},

loadStoreOnNameSelect:function(){
        this.PO.setDisabled(true);
        this.fromLinkCombo.setDisabled(true);
        if(this.isTemplate){
            this.createTransactionAlsoOldVal = this.createTransactionAlso;
            this.oldTempNameVal = this.moduleTemplateName.getValue();
        } 
        if(this.isExpenseInv){
                this.autoGenerateDO.setValue(false);
                this.autoGenerateDO.disable();
                this.includingGST.setValue(false);
                this.includingGST.disable();
        }else{
                this.autoGenerateDO.reset();
                if(!this.isTemplate) {
                    this.autoGenerateDO.enable();
                }
//                this.includingGST.reset();//SDP-13279
                this.includingGST.enable();
        }
        if(this.isTemplate){
            this.moduleTemplateName.setValue(this.oldTempNameVal);
            if(this.createTransactionAlsoOldVal){
                this.createAsTransactionChk.setValue(true);
                if(!this.isViewTemplate){                      // View mode- all fields should be disabled unconditionaly
                    this.Number.enable();
                }    
                this.sequenceFormatCombobox.enable();
            }
        }
        if(this.fromPO){         
            this.fromPO.enable();
        }
        if(this.fromLinkCombo){
            this.fromLinkCombo.setDisabled(true);
            this.fromLinkCombo.clearValue();
        }
        this.fromPO.setValue(false); 
        
        if(this.partialInvoiceCmb){
            this.partialInvoiceCmb.disable();
            this.partialInvAmount.reset();
            this.partialInvAmount.disable();
            var id=this.Grid.getId();
            var rowindex=this.Grid.getColumnModel().findColumnIndex("partamount");
            if(rowindex != -1){
                this.Grid.getColumnModel().setHidden( rowindex,true);
            }            
        }
        this.showGridTax(null,null,true);
        this.Grid.symbol=undefined;
        if(!this.isExpenseInv){
            this.hideShowProfitMarginColumns();
        }
        this.Grid.updateRow(null);
        this.resetForm = true;
        var currentTaxItem=WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
        var actualTaxId=currentTaxItem!=null?currentTaxItem.get('taxId'):"";
        
        /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
         *  Then we ignore Customer/Vendor mapped taxes
         *  Consider Only Product mapped taxes i.e - only line level taxes(Create New Case)
         */
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
            actualTaxId = "";
        }
        
       if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null ){
        this.isTaxable.setValue(true);
        this.Tax.enable();
        this.Tax.setValue(actualTaxId);
       }else{
        this.Tax.setValue("");
        this.Tax.setDisabled(true);				
        this.isTaxable.setValue(false);
       }        
       this.template.setValue(Wtf.Acc_Basic_Template_Id);            
},
resetField: function(){
    this.moduleTemplateName.reset();
    this.templateModelCombo.reset();
    this.ShowOnlyOneTime.enable();
    this.Currency.reset();
    this.PO.reset();
    this.sequenceFormatCombobox.reset();
    this.Number.reset();
    this.billDate.reset();
//    this.PORefNo.reset();
    this.CustomerPORefNo.reset();
    this.autoGenerateDO.reset();
    this.CostCenter.reset();
    if(Wtf.account.companyAccountPref.countryid ==Wtf.Country.INDIA){
        this.FormType.reset();
        this.AdjustAdvancePayments.reset();
        this.ExciseType.reset();
    }
    this.youtReftxt.reset();
    this.delytermtxt.reset();
    this.invoiceTotxt.reset();
    this.shipDate.reset();
    this.Term.reset();
    this.DueDate.reset();
    this.SupplierInvoiceNo.reset();
    this.importExportDeclarationNo.reset();
    this.Memo.reset();
    this.shipvia.reset();
    this.fob.reset();
    this.includeProTax.reset();
    this.validTillDate.reset();
    this.partialInvoiceCmb.reset();
    this.partialInvAmount.reset();
    this.template.reset();
    this.templateID.reset();
    this.users.reset();
    this.generateReceipt.reset();
    this.autoGenerateDO.reset();
    this.sequenceFormatComboboxDo.reset();
    this.no.reset();
    this.delydatetxt.reset();
    this.projecttxt.reset();
    this.depttxt.reset();
    this.requestortxt.reset();
    this.mernotxt.reset();
    this.Name.reset();
    this.SouthForm.getForm().reset();  
    this.applyGlobalDiscount.reset();
    this.globalDiscountType.reset();
    this.globalDiscount.setRawValue();
    this.cashReceived.reset();//reset Cash Received field
},
    
    resetCustomFields : function(){ // For reset Custom Fields, Check List and Custom Dimension
        var customFieldArray = this.tagsFieldset.customFieldArray;  // Reset Custom Fields
        if(customFieldArray!=null && customFieldArray!=undefined && customFieldArray!="" ) {
        for (var itemcnt = 0; itemcnt < customFieldArray.length; itemcnt++) {
            var fieldId = customFieldArray[itemcnt].id
            if (Wtf.getCmp(fieldId) != undefined && customFieldArray[itemcnt].getXType()!='fieldset') {
                Wtf.getCmp(fieldId).reset();
            }
        }
       }
        
        var checkListCheckBoxesArray = this.tagsFieldset.checkListCheckBoxesArray;  // Reset Check List
        if(checkListCheckBoxesArray!=null && checkListCheckBoxesArray!=undefined && checkListCheckBoxesArray!="" ) {
        for (var checkitemcnt = 0; checkitemcnt < checkListCheckBoxesArray.length; checkitemcnt++) {
            var checkfieldId = checkListCheckBoxesArray[checkitemcnt].id
            if (Wtf.getCmp(checkfieldId) != undefined) {
                Wtf.getCmp(checkfieldId).reset();
            }
        }
        }
        
        var customDimensionArray = this.tagsFieldset.dimensionFieldArray;  // Reset Custom Dimension
        if(customDimensionArray!=null && customDimensionArray!=undefined && customDimensionArray!="" ) {
        for (var itemcnt1 = 0; itemcnt1 < customDimensionArray.length; itemcnt1++) {
            var fieldId1 = customDimensionArray[itemcnt1].id
            if (Wtf.getCmp(fieldId1) != undefined) {
                Wtf.getCmp(fieldId1).reset();
            }
        }
      }
    },
    
    setDate:function(){
        var height = 0;
        if((this.isOrder&&!this.isCustomer)||(this.isOrder&&this.isCustomer)){
            height=430;
        }
        if(!this.quotation&&this.isOrder&&!this.isCustomer && !this.isCustBill && ((BCHLCompanyId.indexOf(companyid) != -1)))
            height=485;
        if(!this.isCustomer&&!this.isCash&&!this.isOrder&&!this.quotation)
            height=400;
        if(!this.isCustomer&&this.quotation)
            height=310;
        if(this.isCustBill){
        	if(this.isEdit)
                this.allAccountStore.on('load',this.getCreditTo.createDelegate(this,[this.record.data.crdraccid]),this)
            this.allAccountStore.load();
            height+=20;
        }
        if(height>=178) this.NorthForm.setHeight(height);

        if(!this.isEdit || this.isCopyFromTemplate){
            this.Discount.setValue(0);
            if(this.isOpeningBalanceOrder || this.isExicseOpeningbalance){ //ERP-27018
                this.billDate.setValue(WtfGlobal.getOpeningDocumentDate(true));// Set transaction date as before first financial year date.
            }else{
                this.billDate.setValue(new Date());//(Wtf.serverDate);  //PO Entry Form
            }
        }
    },
    addTax:function(){
         var p= callTax("taxwin");
         Wtf.getCmp("taxwin").on('update', function(){this.Grid.taxStore.reload();}, this);
    },
    addCreditTerm:function(){
        callCreditTerm('credittermwin');
        Wtf.getCmp('credittermwin').on('update', function(){this.termds.reload();}, this);
    },
    addPerson:function(isEdit,rec,winid,isCustomer){
        callBusinessContactWindow(isEdit, rec, winid, isCustomer);
        var tabid=this.isCustomer?'contactDetailCustomerTab':'contactDetailVendorTab';
        Wtf.getCmp(tabid).on('update', function(){
           this.isCustomer?Wtf.customerAccStore.load():Wtf.vendorAccStore.reload();
        }, this);
    },
    
    addSelectedDocument:function(){
    var url="";
    if(this.moduleid==Wtf.Acc_Vendor_Quotation_ModuleId){
            if(this.fromLinkCombo.getValue() == 5){
                url = "ACCPurchaseOrderCMN/getRequisitions.do"; 
            } else if(this.fromLinkCombo.getValue() == 6){
                url = "ACCPurchaseOrderCMN/getRFQs.do"; 
            }
        }else if(this.moduleid==Wtf.Acc_Security_Gate_Entry_ModuleId){
            if(this.fromLinkCombo.getValue() == 0){
                url ="ACCPurchaseOrderCMN/getPurchaseOrders.do";
            }
        }else if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId){
            if(this.fromLinkCombo.getValue() == 2){
                url ="ACCPurchaseOrderCMN/getQuotations.do";
                    
            }else if (this.fromLinkCombo.getValue() == 0) {
                url = "ACCSalesOrderCMN/getSalesOrders.do";
            } else if (this.fromLinkCombo.getValue() == 5) {
                url = "ACCPurchaseOrderCMN/getRequisitions.do";
            }
        }else if(this.moduleid==Wtf.Acc_Goods_Receipt_ModuleId){
            if(this.fromLinkCombo.getValue() == 0 ){
                url = "ACCPurchaseOrderCMN/getPurchaseOrders.do"; 
            }else if(this.fromLinkCombo.getValue() == 1 ){
                url ="ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
            }
        }else if(this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId){
            if(this.fromLinkCombo.getValue() == 0 ){
                url = "ACCPurchaseOrderCMN/getPurchaseOrders.do"; 
            }else if(this.fromLinkCombo.getValue() == 1){
                url ="ACCGoodsReceiptCMN/getGoodsReceiptOrdersMerged.do";
            }else if(this.fromLinkCombo.getValue() == 2){
                url ="ACCPurchaseOrderCMN/getQuotations.do";
            }
        }else if(this.moduleid==Wtf.Acc_Sales_Order_ModuleId){
            if(this.fromLinkCombo.getValue() == 4 ){
               url = "ACCPurchaseOrderCMN/getPurchaseOrders.do"; 
            }else if(this.fromLinkCombo.getValue() == 2){
                url ="ACCSalesOrderCMN/getQuotations.do";
            }else if(this.fromLinkCombo.getValue() == 10){
                url ="ACCContractMaster/getMasterContracts.do";
            } else if (this.fromLinkCombo.getValue() == 3) {
                url = "ACCSalesOrderCMN/getReplacementRequests.do";
            }    
        }else if(this.moduleid==Wtf.Acc_Invoice_ModuleId){
            if(this.fromLinkCombo.getValue() == 0 ){
                url = "ACCSalesOrderCMN/getSalesOrders.do";
            }else if(this.fromLinkCombo.getValue() == 1 ){
                url ="ACCInvoiceCMN/getDeliveryOrdersMerged.do";
            }else if(this.fromLinkCombo.getValue() == 2 ){
                url ="ACCSalesOrderCMN/getQuotations.do";
            }
        }else if(this.moduleid==Wtf.Acc_Customer_Quotation_ModuleId){
                url ="ACCPurchaseOrderCMN/getQuotations.do";
        }
      
    this.showPONumbersGrid(url);
},
    addCostCenter:function(){
        callCostCenter('addCostCenterWin');
    },
    addTemplateUnit:function(){
        callExciseUnitWin();
    },
setTransactionNumberDo:function(isSelectNoFromCombo){
    var format= this.isCustomer ? Wtf.account.companyAccountPref.autodo : Wtf.account.companyAccountPref.autogro;
    var temp2=this.isCustomer ? Wtf.autoNum.DeliveryOrder : Wtf.autoNum.GoodsReceiptOrder;
    if(isSelectNoFromCombo){
        this.fromnumberDo = temp2;
    } else if(format&&format.length>0){
        WtfGlobal.fetchAutoNumber(temp2, function(resp){
            if(this.isEdit)this.no.setValue(resp.data)
                }, this);
    }
},   
hideDO:function(){
    WtfGlobal.hideFormElement(this.sequenceFormatComboboxDo);
    WtfGlobal.hideFormElement(this.no);
    this.no.allowBlank = true;
    this.sequenceFormatComboboxDo.allowBlank = true;
},
    /**
     * in case of template sequence format combobox should be hidden.
     */
showDO: function () {
        if ((this.isTemplate || this.isEditTemplate || this.isViewTemplate) && this.createTransactionAlso) {
            WtfGlobal.showFormElement(this.sequenceFormatComboboxDo);
            WtfGlobal.showFormElement(this.no);
//            this.no.allowBlank = false;
//            this.sequenceFormatComboboxDo.allowBlank = false;
        } else if (!(this.isTemplate || this.isEditTemplate || this.isViewTemplate)) {
            WtfGlobal.showFormElement(this.sequenceFormatComboboxDo);
            WtfGlobal.showFormElement(this.no);
            this.no.allowBlank = false;
            this.sequenceFormatComboboxDo.allowBlank = false;
        }
    },
//    hideSupplementary:function(){
//        WtfGlobal.hideFormElement(this.originalInvoice);
//    },
//    showSupplementary:function(){
//        WtfGlobal.showFormElement(this.originalInvoice);
//
//    },
    setTransactionNumber:function(isSelectNoFromCombo){
    	if(this.quotation==null || this.quotation==undefined)
    		this.quotation = false;
        /*
        *  SDP-13923 : if user has changed sequence format from NA to Auto-Sequence in Edit case of draft then we need to retrive latest Auto-Sequence No.
        */
        if(!this.isEdit||this.copyInv||this.isPOfromSO||this.isSOfromPO || ((this.isDraft||this.record.data.isDraft) && this.sequenceFormatCombobox.getValue()!="NA" && this.isSequenceFormatChangedInEdit)){
            var temp=this.isCustBill*1000+this.isCustomer*100+this.isOrder*10+this.cash*1+this.quotation*1;
            var temp2=0;
            var format="";
            switch(temp){
                case 0:format=Wtf.account.companyAccountPref.autogoodsreceipt;
                    temp2=Wtf.autoNum.GoodsReceipt;
                    break;
                case 1:format=Wtf.account.companyAccountPref.autocashpurchase;
                    temp2=Wtf.autoNum.CashPurchase;
                    break;
                case 10:
                    /**
                     * format and fromnumber for Job work out 
                     */
                    if(this.isJobWorkOrderReciever){                               
                       format=Wtf.account.companyAccountPref.autojwo;
                       temp2=Wtf.autoNum.JobWorkOut; 
                    }
                    /**
                     * format and fromnumber for Purchase Order 
                     */
                    else{                                                          
                       format=Wtf.account.companyAccountPref.autopo;               
                       temp2=Wtf.autoNum.PurchaseOrder;
                    }
                    break;
                case 100:format=Wtf.account.companyAccountPref.autoinvoice;
                    temp2=Wtf.autoNum.Invoice;
                    break;
                case 101:format=Wtf.account.companyAccountPref.autocashsales;
                    temp2=Wtf.autoNum.CashSale;
                    break;
                case 110:format=Wtf.account.companyAccountPref.autoso;
                    temp2=Wtf.autoNum.SalesOrder;
                    break;
                case 1000:format=Wtf.account.companyAccountPref.autobillinggoodsreceipt;
                    temp2=Wtf.autoNum.BillingGoodsReceipt;
                    break;
                case 1001:format=Wtf.account.companyAccountPref.autobillingcashpurchase;
                    temp2=Wtf.autoNum.BillingCashPurchase;
                    break;
                case 1010:format=Wtf.account.companyAccountPref.autobillingpo;
                    temp2=Wtf.autoNum.BillingPurchaseOrder;
                    break;
                case 1100:format=Wtf.account.companyAccountPref.autobillinginvoice;
                    temp2=Wtf.autoNum.BillingInvoice;
                    break;
                case 1101:format=Wtf.account.companyAccountPref.autobillingcashsales;
                    temp2=Wtf.autoNum.BillingCashSale;
                    break;
                case 1110:format=Wtf.account.companyAccountPref.autobillingso;
                    temp2=Wtf.autoNum.BillingSalesOrder;
                    break;
                case 111:format=Wtf.account.companyAccountPref.autoquotation;
                	temp2=Wtf.autoNum.Quotation;
                	break;
                case 11:format=Wtf.account.companyAccountPref.autovenquotation;
                	temp2=Wtf.autoNum.Venquotation;
                	break;         
            }

            if(isSelectNoFromCombo){
                this.fromnumber = temp2;
            } else if(format&&format.length>0 && (!this.isTemplate || this.createTransactionAlso)){
                WtfGlobal.fetchAutoNumber(temp2, function(resp){if(this.isEdit){this.Number.setValue(resp.data)}}, this);
            }
        }
    },
    dueDateCheck:function(){
        if(this.DueDate.getValue().getTime()<this.billDate.getValue().getTime()){
           WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"), WtfGlobal.getLocaleText("acc.invoice.msg11")], 2);    //"The Due Date should be greater than the Order Date."
           this.DueDate.setValue(this.billDate.getValue());
        }
    },

    initForClose:function(){
        this.cascade(function(comp){
            if(comp.isXType('field')){
                comp.on('change', function(){this.isClosable=false;},this);
            }
        },this);
    },
     loadTemplateStore : function() {
        this.templateStore.load();
    },
    addInvoiceTemplate : function(isCreatedNow,tempid) {
        if(isCreatedNow===true){
            this.loadTemplateStore();
            this.templateStore.on("load",function(){
            	this.template.setValue(tempid);
            	this.templateID.setValue(tempid);
            },this)
            	
        }else{
        new Wtf.selectNewTempWin({
            isreport : false,
            tabObj : this,
            templatetype : this.doctype 
        });
        }
    }, 
    
    onVendorSelect : function( vendorrec , rec){
        if(vendorrec != null){
            var currRec=WtfGlobal.searchRecord(this.currencyStore, vendorrec.data.currencyid, 'currencyid');
            if(currRec!=null){
                this.setVendorCurrExchangeRate(rec,currRec);
            }
        }
    },
    
    onDateChangeVendorCurrencyExchangeRate : function(){
        var count=this.Grid.store.getCount();
        for(var i=0;i< count;i++){
            var rec = this.Grid.store.getAt(i);
            if(rec!=null && rec.data.vendorcurrencyid!="" && rec.data.vendorcurrencyid!=null && rec.data.productid!=""){
                var currRec=WtfGlobal.searchRecord(this.currencyStore, rec.data.vendorcurrencyid, 'currencyid');
                if(currRec!=null){
                    this.setVendorCurrExchangeRate(rec,currRec);
                }
            }
        }
    },
    
    setVendorCurrExchangeRate : function(rec,currRec){
        if(currRec!=null){
            var baseToVenCurr = currRec.data.exchangerate;
            var revExchangeRate = 1/(baseToVenCurr-0);
            revExchangeRate = getRoundofValueWithValues(revExchangeRate,10);
            rec.data.vendorcurrexchangerate = revExchangeRate;
        }
    },
    
    getJSONArray:function(store, includeLast, idxArr){
        var indices="";
        if(idxArr)
            indices=":"+idxArr.join(":")+":";        
        var arr=[];
        var fields=store.fields;
        var len=store.getCount();
        //if(includeLast)len++;
        
        for(var i=0;i<len;i++){
            if(idxArr&&indices.indexOf(":"+i+":")<0) continue;
            var rec=store.getAt(i);
            var recarr=[];
            for(var j=0;j<fields.length;j++){
                var value=rec.data[fields.get(j).name];
                switch(fields.get(j).type){
                    case "auto":if(value!=undefined){value=(value+"").trim();}value=encodeURI(value);value="\""+value+"\"";break;
                    case "date":value="'"+WtfGlobal.convertToGenericDate(value)+"'";break;
    }
                recarr.push(fields.get(j).name+":"+value);
            }
            recarr.push("modified:"+rec.dirty);
            arr.push("{"+recarr.join(",")+"}");
        }
        return "["+arr.join(',')+"]";
    },
    setValues:function(billid){
            if(billid.indexOf(",")==-1){  //In MultiSelection if the user select only one                              
                    var rec=this.POStore.getAt(this.POStore.find('billid',billid));
                    if(!this.isCustBill && !this.isOrder && !this.cash && this.isCustomer){
                        if(this.fromLinkCombo.getValue()==1 && !rec.data['includeprotax']){// in case of CI creation if DO is being linked which is containing row level tax, following fields will not be reset
                            this.includeProTax.setValue(false);
                            this.showGridTax(null,null,true);            
                        }
                    }
                     //ERP-41011 :It is commented because same code is repeated upwards. 
//                    if (this.users != null && this.users != undefined) {
//                        if(this.isCustomer){
//                            if(rec.data['salesPerson'] != undefined && rec.data['salesPerson'] != ""){
//                                this.users.setValue(rec.data['salesPerson']) 
//                            }
//                        }else{
//                            if(rec.data['agent'] != undefined && rec.data['agent'] != ""){
//                                this.users.setValue(rec.data['agent']);
//                            }
//                        }                         
//                    }
                    this.SupplierInvoiceNo.setValue(rec.data['supplierinvoiceno']);
                    this.importExportDeclarationNo.setValue(rec.data['importexportdeclarationno']);
                    this.Memo.setValue(rec.data['memo']);
                    if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && /*!this.isCustomer &&*/ !this.isExciseTab && !this.isExpenseInv){
                        if(rec.data['gtaapplicable']){//If Selected Vendor/Customer has GTA applicable, then by Default value will be populate.
                            this.GTAApplicable.setValue(true);
                        }else{
                            this.GTAApplicable.setValue(false);
                        }
                    }
                    /*For SATS*/
                    if(SATSCOMPANY_ID==companyid){
                        this.shipLength.setValue(rec.data['shiplengthval']);
                    }
                    /**********/
                    this.shipDate.setValue(rec.data['shipdate']);
                    this.validTillDate.setValue(rec.data['validdate']);
                    if(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash) { // set value only in VI module
                        this.invoiceList.setValue(rec.data['landedInvoiceID']);
                    }
                    if((this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash) || (this.moduleid == Wtf.Acc_Invoice_ModuleId && !this.cash)) {
                        this.Term.setValue(rec.data['termid']);
                    }
                    this.postText=rec.data['posttext'];
                    this.shipvia.setValue(rec.data['shipvia']);
                    this.fob.setValue(rec.data['fob']);  
//                    this.isCustomer ? this.users.setValue(rec.data['salesPerson']) : this.users.setValue(rec.data['agent']);

                    if(rec.data["discounttotal"] && this.Discount){
                        this.Discount.setValue(rec.data["discounttotal"]);
                        this.perDiscount.setValue(rec.data["discountispertotal"]);
                    }

                    if(rec.data['taxid']!="" && rec.data["taxid"] != undefined && rec.data["taxid"] != "None"){
                        this.Tax.enable();
                        this.isTaxable.setValue(true);
                        //ERP-38656
//                        if (isTaxActivate(this.Grid.taxStore, rec.data["taxid"], "prtaxid")) {
                            this.Tax.setValue(rec.data['taxid']);
//                        } else {
//                            this.Tax.setValue("");
//                        }
                        this.includingGST.setValue(false);
                        this.includingGST.disable();  
                        this.HideShowLinkedTermTaxAndTermTaxAmountCol(this.isTaxable.getValue());
                    }else if(!(this.fromLinkCombo.getValue()==5)){
                        this.Tax.disable();
                        this.isTaxable.reset();
                        this.Tax.reset();
                    }
                    this.getCreditTo(rec.data.creditoraccount);       
                    this.CostCenter.setValue(rec.data.costcenterid);
                } else { //if the user select multiple values
                    this.clearComponentValues();
                }
    },
    clearComponentValues:function(){
        this.Memo.setValue('');
        /*For SATS*/
        if(SATSCOMPANY_ID==companyid){
            this.shipLength.setValue(1);
        }
        /**********/
        this.SupplierInvoiceNo.setValue('');
        this.importExportDeclarationNo.setValue('');
        this.shipDate.setValue('');
        this.validTillDate.setValue('');
        this.shipvia.setValue('');
        this.fob.setValue('');
        this.loadTransStore();
        this.Discount.setValue(0);
        this.perDiscount.setValue(false);
//        this.Tax.disable();
//        this.isTaxable.reset();
//        this.Tax.reset();                    
        this.CostCenter.setValue('');
        if(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA){
           // this.FormType.setValue('');
            this.ExciseType.setValue('');
        }
        if(this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && !this.cash) { // set value only in VI module
            this.invoiceList.setValue('');
        }
    },
    onCurrencyChangeOnly:function(){
        this.fromPO.reset();
        this.fromLinkCombo.reset();this.fromLinkCombo.setDisabled(true);
        this.PO.reset();this.PO.setDisabled(true);                                       
        if(this.partialInvoiceCmb){
            this.partialInvoiceCmb.reset();
            this.partialInvoiceCmb.disable();
            this.partialInvAmount.reset();
            this.partialInvAmount.disable();
            var id=this.Grid.getId();
            var rowindex=this.Grid.getColumnModel().findColumnIndex("partamount");
            if(rowindex != -1){
                this.Grid.getColumnModel().setHidden( rowindex,true);
            }
        }                                
        this.Discount.setValue(0);
        this.perDiscount.setValue(false);
        var currentTaxItem=WtfGlobal.searchRecord(this.personstore, this.Name.getValue(), 'accid');
        var actualTaxId=currentTaxItem!=null?currentTaxItem.get('taxId'):"";
        
        /*--- If "Map taxes at product level" check is ON &  selected Customer/Vendor  is also mapped with tax
         *  Then we ignore Customer/Vendor mapped taxes
         *  Consider Only Product mapped taxes i.e - only line level taxes(Create New Case)
         */
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
            actualTaxId = "";
        }
        
            if(actualTaxId!= undefined && actualTaxId != "" &&  actualTaxId != null ){
                this.isTaxable.setValue(true);
                this.Tax.enable();
                this.Tax.setValue(actualTaxId);
            }else{     
                this.Tax.disable();
                this.isTaxable.reset();
                this.Tax.reset();
            }
        /*
         *    If check from companypreferences  "Map taxes at product level" is true then by default "Include Product Tax" field will be Yes
         * 
         */
        if (CompanyPreferenceChecks.mapTaxesAtProductLevel()) {
            this.includeProTax.setValue(true);
            this.applyTaxToTermsChkHideShow(true);
            this.showGridTax(null,null,false);
        } else{
            this.includeProTax.setValue(false);
            this.applyTaxToTermsChkHideShow(false);
            this.showGridTax(null,null,true);
        }
        this.includeProTax.enable();
        this.Grid.getStore().removeAll();
        this.Grid.addBlankRow(); 
        this.productDetailsTplSummary.overwrite(this.productDetailsTpl.body,{productname:"&nbsp;&nbsp;&nbsp;&nbsp;",qty:0,soqty:0,poqty:0,blockqty:0,salableStock:0,reserveStock:0});                
    },

    setTermValues : function(termDetails)  {
        if( this.termgrid!=undefined && this.termgrid!=null){
            if(termDetails!=""&&termDetails!=null&&termDetails!=undefined){
                var detailArr = eval(termDetails);
                for(var cnt=0; cnt<detailArr.length; cnt++ ){
                    var jObj = detailArr[cnt];
                    
                    var record = this.termStore.queryBy(function(record){
                        return (record.get('id') == jObj.id);
                    }, this).items[0];
                    if(record) {
                        record.set('termamount',jObj.termamount);
                        record.set('termpercentage',jObj.termpercentage==0?"":jObj.termpercentage);
                        /*
                         * ERP-40242 : The below check is to avoid load tax and tax amount in copy case if tax is  deactivated.
                         */
                       if(jObj.isActivated || !(this.copyInv || (this.fromPO != undefined && this.fromPO.getValue()))){
                        if (!this.readOnly) {
                            this.linkedTaxDummyStore.insert(cnt, new this.linkedTaxDummyStore.recordType({
                                termtax:jObj.termtax,
                                linkedtaxname:jObj.linkedtaxname,
                                linkedtaxpercentage:jObj.linkedtaxpercentage
                            }));
                            record.set('termtax',jObj.termtax);
                        } else {
                            record.set('termtax',jObj.linkedtaxname);
                        }
                        record.set('linkedtaxpercentage',jObj.linkedtaxpercentage);
                        record.set('termtaxamount',jObj.termtaxamount);
                    }
                    }
                
                }
            }
            WtfGlobal.fliterNonUsedDeactivatedTerms(this);
        }
    },
    
    summarizeInvoiceTermAmount: function(selectedValuesArr){
        
        Wtf.Ajax.requestEx({
                url: "kwlCommonTables/getSourceDocumentTermsInLinkingDocument.do",
                params: {
                    ids : selectedValuesArr.toString(),
                    fromlinkcombovalue : this.fromLinkCombo.getValue(),
                    isCustomer : this.isCustomer
                }
        }, this, function(response) {
            if(response != null && response != undefined && response.success){
                this.setTermValues(response.termDetails);
            }
        },function(response) {
            
        });        
    },
    setProductAndTransactionTaxValues:function(){
        /**
         * if included GST is ON or product tax is given then includepro tax combo should be "Yes".
         */
        if(this.record.data.includeprotax || this.record.data.gstIncluded){
            this.includeProTax.setValue(true);
            this.showGridTax(null,null,false);  

            this.isTaxable.setValue(false);
            this.Tax.setValue('');
            this.Tax.disable();
        }else{   
            this.includeProTax.setValue(false);
            this.showGridTax(null,null,true);
        }
    },
//    addInvoiceTermGrid : function() {
//        this.termcm=[{
//            header: WtfGlobal.getLocaleText("acc.field.Term"),
//            dataIndex: 'term'
//        },{
//            header: WtfGlobal.getLocaleText("acc.field.Percentage"),
//            dataIndex: 'termpercentage',
//            editor:new Wtf.form.NumberField({
//                xtype : "numberfield", 
//                maxLength : 15,
//                allowNegative : false,
//                minValue : 0,
//                maxValue: 100,
//                regexText:Wtf.MaxLengthText+"15"
//            })
//        },{
//            header: WtfGlobal.getLocaleText("acc.dnList.gridAmt"),
//            dataIndex: 'termamount',
//            renderer : function(val, meta, rec) {
//                if(typeof val=='number' && val>=0 && rec.data.sign==0) {
//                    rec.set('termamount',val*(-1));
//                    return val*(-1);
//                } else {
//                    return val;
//                }
//            },
//            editor:new Wtf.form.NumberField({
//                xtype : "numberfield", 
//                maxLength : 15,
//                allowNegative : true,
//                regexText:Wtf.MaxLengthText+"15"
//            })
//        }];
//        
//        this.termRec =new Wtf.data.Record.create([
//        {name: 'id'},
//        {name: 'term'},
//        {name: 'glaccount'},
//        {name: 'sign'
////        },{ name: 'category'
////        }, {name: 'includegst'
////        },{ name: 'includeprofit'
////        },{name: 'suppressamnt'
//        },{name: 'formula'
//        },{name: 'formulaids'
//        },{name: 'termamount'
//        },{name: 'termpercentage'
//        },{name: 'includeInTDSCalculation'
//        },{name: 'termtaxamount'
//        },{name: 'termtax'
//        },{name: 'termtaxamountinbase'}
//        ]);
//        this.termStore = new Wtf.data.Store({
//            reader: new Wtf.data.KwlJsonReader({
//                root: "data"
//            },this.termRec),
////            url:Wtf.req.account+'CompanyManager.jsp',
//            url: 'ACCAccount/getInvoiceTermsSales.do',
//            baseParams:{
//                isSalesOrPurchase:this.isCustomer?true:false
//        }
//        });
////        if(!this.isEdit) {
//     if(this.IsInvoiceTerm) {
//            this.termStore.load();
//     }
//            this.termStore.on('load',this.closeTermGrid,this);
////        }
////        this.calInvoiceTermBtn= new Wtf.Toolbar.Button({
////            text:"Apply Terms",
////            scope:this,
////            tooltip:{text:'Apply Terms'},
////            handler:function() {this.updateSubtotal()}
////        });
//        this.termgrid = new Wtf.grid.EditorGridPanel({
////            layout:'fit',
//            clicksToEdit:1,
//            store: this.termStore,
//            height:100,
//            autoScroll : true,
//            disabledClass:"newtripcmbss",
////            style:'padding-top:10px;',
//            cm: new Wtf.grid.ColumnModel(this.termcm),
//            border : false,
//            loadMask : true,
////            tbar : this.calInvoiceTermBtn,
//            viewConfig: {
//                forceFit:true,
//                emptyText:WtfGlobal.getLocaleText("acc.common.norec")
//            }
//        });
//        
//        this.InvoiceTermGridPanel  = new Wtf.Panel({ 
//            id: "invoicetermgridpanel" + this.id,
////            layout:'fit',
//            height:130,
//            border:false,
//            style:'padding-top:10px;',
//            items: [
//                {
//                    border:false,
//                    layout:'table',
//                    /*
//                     *  Due to new improvement for Invoice terms below setting is removed from system
//                     *  i.e. from system control also.
//                     */
//                    items: [{
//                            width:150,
//                            border:false,
//                            bodyStyle : 'padding-top:10px;',
//                            html: 'Terms Inclusive of GST:',
//                            hidden:true
//                        },this.TermsIncludeGST_YES = new Wtf.form.Radio({
//                            xtype: 'radio',
//                          //  boxLabel: 'Yes',
//                            disabled : true,
//                            checked:Wtf.account.companyAccountPref.termsincludegst==true,
//                            width:50,
//                            fieldLabel: 'Terms Inclusive of GST',
//                            hidden:true                          
//                        }), this.TermsIncludeGST_NO = new Wtf.form.Radio({
//                            xtype: 'radio',
//                          //  boxLabel: 'No',
//                            disabled : true,
//                            checked:Wtf.account.companyAccountPref.termsincludegst==false,
//                            width:50,
//                            fieldLabel: 'Terms Inclusive of GST1',
//                            hidden:true                          
//                        })
//                ]
//            },
//            this.termgrid]
//        });
//        
//        this.termgrid.on('afteredit',function(obj) {
//            if(obj.field=='termamount') {
//                obj.record.set('termpercentage','');
//            } else if(obj.field=='termpercentage' && obj.value==0) {
//                obj.record.set('termpercentage','');
//            }
//            this.istermamountchanged=true;
//            this.updateSubtotalOnTermChange(true,(obj.field=='termamount'),obj.record.data.termamount,obj.row);
//        },this);
//        this.termgrid.on('cellclick',function(grid, rowIndex, columnIndex, e) {
//            var fieldName = grid.getColumnModel().getDataIndex(columnIndex); // Get field name
//            if(this.isViewTemplate || (this.isLinkedTransaction && this.isEdit)){
//                if(fieldName=='termamount' || fieldName=='termpercentage') {
//                    return false;
//                }
//           }
//        },this);
//        
//    },
//    
//    closeTermGrid : function(obj){
//        var store = this.termgrid.store;
////        if(this.termStore.data.length==0||this.cash)
//            if(this.termStore.data.length==0)
//            {
//                this.InvoiceTermGridPanel.hide();
//            }
//            
//    },  
    updateSubtotalOnTermChange : function(updateTotalSummary,termAmountChanged,termAmount,indexOfTermUpdated) {
    
        
//        if(this.includingGST && this.includingGST.getValue()){
//            this.setTermAmountOnEachRow(termAmountChanged,termAmount,indexOfTermUpdated);
//            this.istermamountchanged=false;
//        } else {
            for(var i=0; i<this.termStore.getCount(); i++) {
            var recdata = this.termStore.getAt(i).data; //  var recdata = obj.record.data;
            var store = this.termStore;
            var subtotal = this.calProdSubtotalWithoutDiscount();
            var formula = recdata.formulaids.split(",");
            var termtotal = 0;
            for(var cnt=0; cnt<formula.length; cnt++){
                if(formula[cnt]=='Basic') {
                    termtotal +=(subtotal);
                }
                var record = store.queryBy(function(record){
                    return (record.get('id') == formula[cnt]);
                }, this).items[0];
                if(record && (typeof record.data.termamount=='number')) {
                    //                termtotal +=(record.data.termamount*(record.data.sign==1 ? 1 : -1 ));
                    termtotal +=(record.data.termamount);
                }
            }
            if(typeof (recdata.termpercentage) != "string" && parseInt(recdata.termpercentage) >= 0) {
                //            obj.record.set('termamount',0);
                var opmod = recdata.sign==0 ? -1 : 1;
                var this_termTotal = ((Math.abs(termtotal) * recdata.termpercentage*1) / 100)*opmod;
                //                if(this.termStore.getAt(i).get('termpercentage') != '') {
                this.termStore.getAt(i).set('termamount',getRoundedAmountValue(this_termTotal));
            //                }
            }
        //        else if(obj.field=="termamount") {
        //            
        //        }
        }
//    }

    if(this.includeProTax.getValue() && this.applyTaxToTermsChk.getValue()){
        this.addTermAmountInTax();
    }
    if(updateTotalSummary) {
        this.updateSubtotal(this,termAmountChanged);
    }
},
    
    findTermsTotal : function() {
        var termTotal = 0;
//        if(Wtf.Countryid == Wtf.Country.INDIA){
//            var store = this.Grid.store;
//            var totalCnt = store.getCount();
//            for(var cnt=0; cnt<totalCnt; cnt++) {
//                var lineAmt = store.getAt(cnt).data.recTermAmount;
//                if(typeof lineAmt=='number')
//                    termTotal += getRoundedAmountValue(lineAmt);
//            }
//        }
        if(this.termgrid) {
            var store = this.termgrid.store;
            var totalCnt = store.getCount();
            for(var cnt=0; cnt<totalCnt; cnt++) {
                var lineAmt = store.getAt(cnt).data.termamount;
                if(typeof lineAmt=='number'){
                    termTotal += getRoundedAmountValue(lineAmt);
                }
            }
        }
        /*
         * In case of "Inclusive of Tax" Term Amount is considered as Including Tax.
         * So in case of Including GST we are calculating term amount as below,
         * Total Term Amount minus Total tax calculate on term amount.
         */
        if(this.includingGST && this.includingGST.getValue()){
            termTotal = termTotal - this.addTermAmountInTax();
        }
        return getRoundedAmountValue(termTotal);
    },
    
     findTermsTotalInBase : function() {
        var termTotal = 0;
        if(this.termgrid) {
            var store = this.termgrid.store;
            var totalCnt = store.getCount();
            for(var cnt=0; cnt<totalCnt; cnt++) {
                var lineAmt = store.getAt(cnt).data.termamount;
                if(typeof lineAmt=='number'){
                    var termVal = getRoundedAmountValue(lineAmt);
                    termTotal += this.calAmountInBase(termVal);
                } 
            }
        }
        /*
         * In case of "Inclusive of Tax" Term Amount is considered as Including Tax.
         * So in case of Including GST we are calculating term amount as below,
         * Total Term Amount minus Total tax calculate on term amount.
         */
        if(this.includingGST && this.includingGST.getValue()){
            termTotal = termTotal - this.calAmountInBase(this.addTermAmountInTax());
        }
        return getRoundedAmountValue(termTotal);
    },
    
    findTermsTotalIncludedForTDS : function() {
        var termTotal = 0;
        if(this.termgrid) {
            var store = this.termgrid.store;
            var totalCnt = store.getCount();
            for(var cnt=0; cnt<totalCnt; cnt++) {
                if(store.getAt(cnt).data.includeInTDSCalculation){
                    var lineAmt = store.getAt(cnt).data.termamount;
                    if(typeof lineAmt=='number')
                        termTotal += getRoundedAmountValue(lineAmt);
                }
            }
        }
        return getRoundedAmountValue(termTotal);
    },
    
    getInvoiceTermDetails : function() {
        var arr=[];
        if(this.termgrid) {
            var store = this.termgrid.store;
            store.each(function(rec){
                //If user selected "None" as taxid then send empty taxid in params
                if(rec.data.termtax == "None"){
                   rec.set("termtax", "");
                }
                var lineAmt = rec.data.termamount;
                if(typeof lineAmt=='number' && lineAmt !=0) {
                    arr.push(store.indexOf(rec));
                }            
            }, this);
            return WtfGlobal.getJSONArray(this.termgrid,true,arr)
            }
    },
    getInvoiceTermWithoutEncode: function () {
        var termRecArr = new Array();
        for (var i = 0; i < this.termStore.getTotalCount(); i++) {
            termRecArr.push(this.termStore.getAt(i).data);
        }
        if (termRecArr.length > 0) {
            return JSON.stringify(termRecArr);
        } else {
            return "";
        }
    },
    calProdSubtotalWithoutDiscount:function(){
        var subtotal=0;
        var count=this.Grid.store.getCount();
        var store = this.Grid.store;
        for(var i=0;i<count;i++){
          if(this.isExpenseInv)
              {
                  var total=store.getAt(i).data.amount;
              }else{
                  var total=store.getAt(i).data.amountwithouttax;
              }
//            if(this.editTransaction&&!this.fromPO){
//                    total=total/this.store.getAt(i).data['oldcurrencyrate'];
//                }
            subtotal+=total;
        }
        
        /*
         *  If preference set to include GST amount in base then in subtotal add GST tax amount
         */
//        if(this.termsincludegst) {
//            subtotal +=this.caltax();
//        }
        return subtotal;
    },
    
    calProdSubtotalWithoutDiscountInBase:function(){
        var subtotal=0;
        var count=this.Grid.store.getCount();
        var store = this.Grid.store;
        for(var i=0;i<count;i++){
          if(this.isExpenseInv)
              {
                  var total=store.getAt(i).data.amount;
              }else{
                  var total=store.getAt(i).data.amountwithouttax;
              }
            subtotal+=this.calAmountInBase(getRoundedAmountValue(total));
        }
        
        /*
         *  If preference set to include GST amount in base then in subtotal add GST tax amount
         */
//        if(this.termsincludegst) {
//            subtotal =getRoundedAmountValue(subtotal) + this.caltaxInBase();
//        }
        return subtotal;
    },
    
    checkBeforeProceed: function(vals){
          var doSubmit = true;       
            if (vals.indexOf(this.Number.emptyText)!=-1) {
                doSubmit = false;        
        }
        return doSubmit;
    },
    getAddressWindow:function(rec, detail, incash,fromsave){
       var addressRecord="";
       var isCopy="";
       var isEdit="";
       var customeridforshippingaddress="";
       
       /*this.GENERATE_PO is true only when we creating PO from SO Report by clicking on button GeneratePO
        *this.GENERATE_SO is true only when we creating SO from PO Report by clicking on button GenerateSO 
        *this.isQuotationFromPR is true only when we Vendor Quotation from PR Report  by clicking on button Record Vendor Quotation
        *These all case is like create new case for addresses so initialising variable as they are in create new case 
        **/

       if(this.GENERATE_PO || this.GENERATE_SO || this.isQuotationFromPR){
          addressRecord=null; 
          isCopy=false;
          isEdit=false;
       } else {
          addressRecord=this.record; 
          isCopy=this.copyInv;
          isEdit=this.isEdit;
       }
        if (this.GENERATE_PO && Wtf.account.companyAccountPref.isCustShipAddressInPurchase && this.moduleid === Wtf.Acc_Purchase_Order_ModuleId && this.fromLinkCombo.getValue() == 0) {
             /*
             * when PO created from SO then get Record of selected record from main store
             */
            this.linkRecord = this.POStore.getAt(this.POStore.find('billid', this.record.data.billid));
            this.singleLink = true;
        }
        if(this.invoicefromorder && (this.moduleid === Wtf.Acc_Invoice_ModuleId || this.moduleid === Wtf.Acc_Vendor_Invoice_ModuleId) && this.invoicefromorderrec.isfromviewmode != undefined){
            /*
             * Added to reflect billing address and shipping address in case of generate Si From Do
             * Added this.moduleid === Wtf.Acc_Vendor_Invoice_ModuleId check to reflect billing address and shipping address in case of generate PI From GR 
             */
            this.singleLink = true;
            this.invoicefromorderrec.data= this.invoicefromorderrec;
            addressRecord=this.invoicefromorderrec.data;
        }
       var custvendorid=this.Name.getValue();
        if (this.linkRecord && this.singleLink) {     //when user link single record
            addressRecord = this.linkRecord;
        }
        if (this.isVenOrCustSelect) {
            isEdit = false;
            isCopy = false;
        }
        if (Wtf.account.companyAccountPref.isCustShipAddressInPurchase && this.copyInv) {
            this.isPOfromSO = false;
        }
        if (Wtf.account.companyAccountPref.isCustShipAddressInPurchase && WtfGlobal.getModuleId(this) == Wtf.Acc_Purchase_Order_ModuleId && this.customeridforshippingaddress!=='' && this.fromLinkCombo.getValue()!=="" && this.fromLinkCombo.getValue() === 0 && !(this.isSelectedMultiRecord)) {//if salesorder is linked into purchaseorder 
            this.isPOfromSO=true; //If PO is creted by SO this flag is true
            customeridforshippingaddress=this.customeridforshippingaddress;//This paramet
        }
        
        /*
         * To show State as Dropdown in Customer and Vendor Master
         */
        this.stateAsComboFlag = false;
        /*
         For India GST State As Combo in customer and vendor masters if Customer/Vendor type is Export (WPAY),Export (WOPAY),Import
         */
        if (WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied()) {
            this.stateAsComboFlag = true;
            if (WtfGlobal.isIndiaCountryAndGSTApplied()) {
                this.custVenId = Wtf.GSTCUSTVENTYPE.NA;
                var index = this.personstore.find('accid', this.Name.getValue());
                if (index != -1) {
                    var storerec = this.personstore.getAt(index);
                    this.custVenId = storerec.data.CustVenTypeDefaultMstrID;
                }
                this.stateAsComboFlag = (this.custVenId == undefined || !(this.custVenId == Wtf.GSTCUSTVENTYPE.Export || this.custVenId == Wtf.GSTCUSTVENTYPE.ExportWOPAY || this.custVenId == Wtf.GSTCUSTVENTYPE.Import)) ? true : false
            }
        }
      // callAddressDetailWindow(addressRecord,isEdit,isCopy,custvendorid,this.currentAddressDetailrec,this.isCustomer,this.viewGoodReceipt,this.isViewTemplate,this.singleLink,undefined,WtfGlobal.getModuleId(this),this.isPOfromSO,customeridforshippingaddress,this.isLinkedTransaction,this.isdropshipDocument.getValue(),this.custVenId); 
        /*----If SO->PO or SO->PO->PI then customer id is required for fetching customer address--- */
        if(Wtf.account.companyAccountPref.columnPref.activatedropship && (WtfGlobal.getModuleId(this) == Wtf.Acc_Vendor_Invoice_ModuleId || WtfGlobal.getModuleId(this) == Wtf.Acc_Purchase_Order_ModuleId)){
           customeridforshippingaddress=this.customeridforshippingaddress;//This paramet  
        }
        
       callAddressDetailWindow(addressRecord,isEdit,isCopy,custvendorid,this.currentAddressDetailrec,this.isCustomer,this.viewGoodReceipt,this.isViewTemplate,this.singleLink,undefined,WtfGlobal.getModuleId(this),this.isPOfromSO,customeridforshippingaddress,this.isLinkedTransaction,this.isdropshipDocument.getValue(),this.stateAsComboFlag); 
       Wtf.getCmp('addressDetailWindow').on('update',function(config){
                this.currentAddressDetailrec=config.currentaddress;
            /**
             * auto poulate dimension values
             */
            if (this.isGST) {
                /**
                 * ERP-32829 
                 * code for New GST 
                 */
                this.ignoreHistory=true;
                this.addressDetailRecForGST=this.currentAddressDetailrec;
                if (this.isModuleForAvalara) {
                    var productRecordsArr = [];
                    this.Grid.store.each(function (record, recordIndex, totalRecordCount) {
                        var tempObj = record.data;
                        if ((tempObj.pid || tempObj.productid) && tempObj.quantity) {
                            tempObj.rowIndex = recordIndex;
                            productRecordsArr.push(tempObj);
                        }
                    });
                    getTaxFromAvalaraAndUpdateGrid(this.Grid, undefined, productRecordsArr);
                } else {
                    var obj = {};
                    obj.tagsFieldset = this.tagsFieldset;
                    obj.currentAddressDetailrec = this.addressDetailRecForGST;
                    obj.mappingRec = this.addressMappingRec;
                    obj.isCustomer = this.isCustomer;
                    obj.isShipping = this.isShipping;
                    obj.stateAsComboFlag = this.stateAsComboFlag;
                    var invalid = populateGSTDimensionValues(obj)
                    if (this.isIndiaGST) {
                        /**
                         * On Address Changes done then need to make getGSTForProduct Request to update tax Details
                         */
                        var isAddressChanged = true;
                        this.applyGSTFieldsBasedOnDate(isAddressChanged);
                    } else {
                         processGSTRequest(this, this.Grid);
                    }
            }
            }
            
            if (fromsave) {
            if (this.moduleid == Wtf.Acc_Sales_Order_ModuleId) {
                if (Wtf.account.companyAccountPref.isSalesOrderCreatedForCustomer) {
                    this.checkSOIsCreatedForCustomer(rec, detail, incash);
                } else if (Wtf.account.companyAccountPref.isOutstandingInvoiceForCustomer) {
                    this.checkOutstandingInvoiceForCustomer(rec, detail, incash);
                } else {
                    this.finalSave(rec, detail, incash);
                }
            }
            if (this.moduleid == Wtf.Acc_Purchase_Order_ModuleId) {
                this.finalSave(rec, detail, incash);
            }
            }
       },this);
       Wtf.getCmp('addressDetailWindow').on('close',function(){
           this.enableSaveButtons()
       },this);
    },
    /**
     * Populate GST Dimension details
     * @param {type} isPopulateDimension
     * @param {type} isProcessGST
     * @returns {undefined}
     */
    populateGSTDimension: function (isPopulateDimension, isProcessGST) {
        if (isPopulateDimension) {
            var obj = {};
            obj.tagsFieldset = this.tagsFieldset;
            obj.currentAddressDetailrec = this.addressDetailRecForGST;
            obj.mappingRec = this.addressMappingRec;
            obj.isCustomer = this.isCustomer;
            obj.isShipping = this.isShipping;
            obj.stateAsComboFlag = this.stateAsComboFlag;
            var invalid = populateGSTDimensionValues(obj)
        }
        if (isProcessGST) {
            processGSTRequest(this, this.Grid);
        }
    },
    /**
     * Show cross Linking msg for GST (INDIA and US)
     * @param {type} msgAppend
     * @returns {undefined}
     */
    showCrossLinkingMsgAlertForGST: function (msgAppend) {
        if (msgAppend != undefined && msgAppend != '') {
            WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.alert'), WtfGlobal.getLocaleText('acc.invoiceform.linkTax.gst') +" "+ msgAppend], 2);
        } else {
            WtfComMsgBox([WtfGlobal.getLocaleText('acc.common.alert'), WtfGlobal.getLocaleText('acc.invoiceform.linkTax.gst')], 2);
        }
    },
   pushToPlanner: function() {
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.areYouSureYouWantToPushToPlanner"), function(btn) {
            if (btn == "yes") {
                this.remarkWin = new Wtf.Window({
                    height: 270,
                    width: 360,
                    maxLength: 1000,
                    title: (this.moduleid == Wtf.Acc_Purchase_Order_ModuleId) ? WtfGlobal.getLocaleText("acc.field.RemarksByPurchase") : WtfGlobal.getLocaleText("acc.field.RemarksBySales"), // "Remarks By Purchase" : "Remarks By Sales",
                    bodyStyle: 'padding:5px;background-color:#f1f1f1;',
                    iconCls: getButtonIconCls(Wtf.etype.deskera),
                    autoScroll: true,
                    allowBlank: false,
                    layout: 'border',
                    items: [{
                            region: 'north',
                        border: false,
                        height: 70,
                        bodyStyle: 'background-color:#ffffff;border-bottom:1px solid #bfbfbf;',
                        html: getTopHtml((this.moduleid == Wtf.Acc_Purchase_Order_ModuleId) ? WtfGlobal.getLocaleText("acc.field.RemarksByPurchase") : WtfGlobal.getLocaleText("acc.field.RemarksBySales"), "", "../../images/link2.jpg", true, "10px 0 0 5px", "7px 0px 0px 10px")
                    }, {
                        region: 'center',
                        border: false,
                        layout: 'form',
                        bodyStyle: 'padding:5px;',
                        items: [this.remarkField = new Wtf.form.TextArea({
                            fieldLabel: WtfGlobal.getLocaleText("acc.field.AddRemark*"),
                            width: 200,
                            height: 100,
                            allowBlank: !this.isEdit || this.copyInv || this.isViewTemplate,
                            maxLength: 1024
                        })]
                    }],
                    modal: true,
                    buttons: [{
                            text: WtfGlobal.getLocaleText("acc.OK"), // "OK",
                            id: 'savePushToDeliveryPlanner' + this.heplmodeid + this.id,
                            scope: this,
                            handler: function() {
                                Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).disable();
                                
                                if (this.remarkField.getValue().trim() == ""&& this.isEdit && !this.copyInv && !this.isViewTemplate) {
                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Pleaseenterremark")], 2);
                                    Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable();  // ERP-10529
                                    return;
                                }

                                if (!this.remarkField.isValid()) {
                                    this.remarkField.markInvalid(WtfGlobal.getLocaleText("acc.field.Maximumlengthofthisfieldis1024"));
                                    Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable();  // ERP-10529
                                    return;
                                }
                                var deliveryLocation = this.isViewTemplate? this.record.data.getFullShippingAddress : this.fullShippingAddress
                                deliveryLocation = deliveryLocation.replace(/(<([^>]+)>)/ig," ");
                                deliveryLocation = deliveryLocation.replace(/[\n\r\t]/g," ");
                                
                                Wtf.Ajax.requestEx({
                                    url: "ACCDeliveryPlanner/savePushToDeliveryPlanner.do",
                                    params: {
                                        docID: this.isViewTemplate ? this.record.data.billid : ((this.moduleid == Wtf.Acc_Purchase_Order_ModuleId) ? this.pobillid : this.RecordID),
                                        deliveryLocation: deliveryLocation,
                                        pushTime: WtfGlobal.convertToGenericDate(new Date()),
                                        deliveryDate: WtfGlobal.convertToGenericDate(this.shipDate.getValue()),
                                        deliveryTime: this.deliveryTime.getValue(),
                                        remarksBySales: this.remarkField.getValue(),
                                        moduleid: this.moduleid
                                    }
                                }, this, function (response) {
                                    if (response.success) {
                                        this.remarkWin.close();
                                        Wtf.getCmp("pushtoplanner" + this.heplmodeid + this.id).disable();
                                        getDeliveryPlannerTabView(this.moduleid);
                                    } else {
                                        Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable();
                                        var msg = WtfGlobal.getLocaleText("acc.common.msg1"); // "Failed to make connection with Web Server";
                                        if(response.msg) {
                                            msg = response.msg;
                                        }
                                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), msg], 2);
                                    }
                                }, function (response) {
                                    Wtf.getCmp('savePushToDeliveryPlanner' + this.heplmodeid + this.id).enable();
                                    var msg = WtfGlobal.getLocaleText("acc.common.msg1"); // "Failed to make connection with Web Server";
                                    if(response.msg) {
                                        msg = response.msg;
                                    }
                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), msg], 2);
                                });
                            }
                    }, {
                        text: WtfGlobal.getLocaleText("acc.common.cancelBtn"),
                        scope: this,
                        handler: function() {
                            this.remarkWin.close();
                        }
                    }]
                });
                this.remarkWin.show();
            }
        }, this);
    },
    
    getCostAndMarginWindow: function() {
        var parentObj = this;
        callCostAndMarginWindow(this.Grid.getStore(), this.productComboStore, this.getExchangeRate(), parentObj);
    },
    //Open attachments window after click on Add Attachments button
    showAttachmentsWindow: function(){
       openAttachmentsWindow(this);
    },
    
    calProfitMargin : function(){
        var sellingPrice=0;
        var productCost=0;
        var productProfitMarginPer=0;
        var serviceProfitMarginPer=0;
        var totalSellingPrice=0;
        var totalCost=0;
        var totalProfitMarginPer=0;
        
        this.totalproductsellingprice = 0;
        this.totalproductcost = 0;
        this.totalproductprofitmargin = 0;
        this.totalprodcutprofitmarginpercent = 0;

        this.totalservicesellingprice = 0;
        this.totalservicecost = 0;
        this.totalserviceprofitmargin = 0;
        this.totalserviceprofitmarginpercent = 0;

        this.finalproductsellingprice = 0;
        this.finalproductcost = 0;
        this.finalproductprofitmargin = 0;
        this.finalproductprofitmarginpercent = 0;
        
        var count=this.Grid.store.getCount();
        for(var i=0;i<count;i++){
            sellingPrice=getRoundedAmountValue(parseFloat(this.Grid.store.getAt(i).data['amount']));
            productCost=getRoundedAmountValue(parseFloat(this.Grid.store.getAt(i).data['totalcost']));
//            var prodRec = null;
//            var productComboRecIndex=WtfGlobal.searchRecordIndex(this.productComboStore, this.Grid.store.getAt(i).data.productid, 'productid');
//            if(productComboRecIndex >=0){
//                prodRec = this.productComboStore.getAt(productComboRecIndex);
//            }
            var rec=this.Grid.store.getAt(i);

            if(rec!=null && rec!=undefined && rec.data.type!='Service'){
                this.totalproductsellingprice+=this.calAmountInBase(sellingPrice);
                this.totalproductcost+=productCost;
            }else{
                this.totalservicesellingprice+=this.calAmountInBase(sellingPrice);
                this.totalservicecost+=productCost;
            }
        }
        this.totalproductsellingprice = getRoundedAmountValue(this.totalproductsellingprice);
        this.totalservicesellingprice = getRoundedAmountValue(this.totalservicesellingprice);
        
        this.totalproductcost = getRoundedAmountValue(this.totalproductcost);
        this.totalservicecost = getRoundedAmountValue(this.totalservicecost);
        
        this.totalproductprofitmargin = getRoundedAmountValue((this.totalproductsellingprice - this.totalproductcost));
        this.totalserviceprofitmargin = getRoundedAmountValue((this.totalservicesellingprice - this.totalservicecost));
        
        productProfitMarginPer = this.totalproductcost==0 ? (this.totalproductprofitmargin!=0 ? 100 : 0) : (this.totalproductprofitmargin/this.totalproductsellingprice)*100;
        this.totalprodcutprofitmarginpercent = getRoundedAmountValue(productProfitMarginPer);
        
        serviceProfitMarginPer = this.totalservicecost==0 ? (this.totalserviceprofitmargin!=0 ? 100 : 0) : (this.totalserviceprofitmargin/this.totalservicesellingprice)*100;
        this.totalserviceprofitmarginpercent = getRoundedAmountValue(serviceProfitMarginPer);
        
        totalSellingPrice = this.totalproductsellingprice + this.totalservicesellingprice;
        this.finalproductsellingprice = getRoundedAmountValue(totalSellingPrice);
        
        totalCost = this.totalproductcost + this.totalservicecost;
        this.finalproductcost = getRoundedAmountValue(totalCost);
        
        this.finalproductprofitmargin = getRoundedAmountValue((this.finalproductsellingprice - this.finalproductcost));
        
        totalProfitMarginPer = this.finalproductcost==0 ? (this.finalproductprofitmargin!=0 ? 100 : 0) :(this.finalproductsellingprice==0)?0:(this.finalproductprofitmargin/this.finalproductsellingprice)*100;
        this.finalproductprofitmarginpercent = getRoundedAmountValue(totalProfitMarginPer);
    },
    showPONumbersGrid: function (url) {
        this.PONumberSelectionWin = new Wtf.account.PONumberSelectionWindow({
            renderTo: document.body,
            height: 500,
            id: this.id + 'PONumbersSelectionWindowDO',
            width: 1200,
            title: 'Document Selection Window',
            layout: 'fit',
            modal: true,
            resizable: false,
            url: url,
            columnHeader:this.fromLinkCombo.getRawValue(),
            moduleid: this.moduleid,
            singleSelect: (this.moduleid===Wtf.Acc_Customer_Quotation_ModuleId)?true:false,
//            columnHeader:this.fromLinkCombo.getRawValue(),
            invoice: this,
            storeBaseParams: this.POStore.baseParams,
            storeParams:this.POStore.lastOptions.params,
            PORec: this.PORec,
            fromLinkComboValue:this.fromLinkCombo.getValue()
        });
        this.PONumberSelectionWin.show();
    },
    
    handleGridStoreLoadEventOnEdit: function() {
        if (this.Grid.getStore().data.items.length > 0) {
            this.linkIDSFlag = false;
            var linkType = -1;
            var storeData = [], linkNumbers = [], linkIDS = [];
            this.POStore.removeAll();
            this.Grid.getStore().each(function(rec) {
            if (!this.copyInv) {
                    if ((rec.data.linkto !="" && rec.data.linkto != undefined) && (rec.data.linktype != -1 && rec.data.linktype != undefined)) {
                    var isExistFlag = false;
                    for (var count = 0; count < linkNumbers.length; count++) {
                        if (rec.data.linkto == linkNumbers[count]) {
                            isExistFlag = true;
                            break;
                        }
                    }
                    if(isExistFlag == false) {
                        linkNumbers.push(rec.data.linkto);
                        linkIDS.push(rec.data.linkid);
                        }
                    linkType = rec.data.linktype;                            
                    var newRec = new this.PORec({
                        billid: rec.data.linkid,
                        billno: rec.data.linkto,
                        /*
                        *	ERM-1037
                        *	For date of linked document to restrict linking of future dated document
                        */
                        date: rec.data.linkDate,
                        gstIncluded:rec.data.israteIncludingGst
                    });
                    storeData.push(newRec);
                }
            }else if(SATSCOMPANY_ID==companyid && this.copyInv){/*For SATS*/
                rec.data.linkid=""; 
                rec.data.rowid=""; 
                rec.data.linktype="";
                rec.data.linkto="";
            }
            }, this);
            
            if (storeData.length > 0) {
                this.POStore.add(storeData);
            }
            
            if (linkIDS.length > 0) {
                this.originallyLinkedDocuments = linkIDS.toString(); 
                this.linkIDSFlag = true;
                this.Name.disable();
                this.Currency.disable();
                this.fromPO.disable();
                this.fromLinkCombo.disable();
                this.PO.disable();
                   this.fromPO.setValue(true);                
                this.PO.setValue(linkIDS);
                if(this.isTaxable != undefined && this.isTaxable.getValue() == true){
                    this.includingGST.disable(); 
                }
                    }
            
                if (linkType != -1) {
                    this.fromLinkCombo.setValue(linkType);
                    if (this.isEdit && !this.isViewTemplate) {
                        if ((this.moduleid == Wtf.Acc_Purchase_Order_ModuleId && linkType == 0) || (this.moduleid == Wtf.Acc_Sales_Order_ModuleId && linkType == 4)) {
                            this.blockSOPO.enable();
                            this.blockSOPO.show();
                            WtfGlobal.showFormElement(this.blockSOPO);
                            WtfGlobal.showFormLabel(this.blockSOPO);
                        }
                    } else if ((this.moduleid == Wtf.Acc_Purchase_Order_ModuleId || this.moduleid == Wtf.Acc_Sales_Order_ModuleId) && this.isViewTemplate) {
                            this.blockSOPO.disable();
                            this.blockSOPO.show();
                            WtfGlobal.showFormElement(this.blockSOPO);
                            WtfGlobal.showFormLabel(this.blockSOPO);
                        }
                }
                
            if (this.isEdit  && linkType == 1) {
                this.autoGenerateDO.setValue(false);
                this.autoGenerateDO.disable();
            }
        }
        this.Grid.getStore().un("load", this.handleGridStoreLoadEventOnEdit, this);
    },
    onValidTillDateChange :function(a,val,oldval){
        if(this.billDate && this.validTillDate){
            if(this.validTillDate.getValue()<this.billDate.getValue()){
                this.validTillDate.setValue(oldval);
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.ValidTillDateShouldNotLessThanQuotationDate")], 2);
            }
        }
    },
    onPartialInvChange: function(field, newval, oldval) {
      if (newval == "" || newval > 100) {
            this.Grid.getStore().each(function(rec) {
               if(rec.json!=undefined && rec.json.remainingPartAmt!=0){
                rec.set('partamount', rec.json.remainingPartAmt)
            }
                /* Setting TaxAmount & RowTax Amount in rec 
                 * 
                 * when applying global partial amount*/
                rec.set('taxamount', rec.data.amountwithouttax * (rec.data.prtaxpercent / 100))
                rec.set('rowTaxAmount', rec.data.amountwithouttax * (rec.data.prtaxpercent / 100))
            }, this);
            this.partialInvAmount.reset();//need to set maximum remaining percentage

        } else {
          this.Grid.getStore().each(function(rec) {
               if(rec.json!=undefined && rec.json.remainingPartAmt!=0 && (newval>rec.json.remainingPartAmt)){
                 rec.set('partamount', rec.json.remainingPartAmt)
                 WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.partilamountcannotbegreaterthanRemainingPartAmount")], 2);
                 this.partialInvAmount.reset();
                 newval=rec.json.remainingPartAmt;//for blank row
               }else{
                rec.set('partamount', newval)         
             }

                /* Setting TaxAmount & RowTax Amount in rec 
                 * 
                 * when applying global partial amount*/
              rec.set('taxamount', rec.data.amountwithouttax * (rec.data.prtaxpercent / 100))
                rec.set('rowTaxAmount', rec.data.amountwithouttax * (rec.data.prtaxpercent / 100))
                          }, this);
        }
        
                /*----If GST applicable company then taxes are calculated as per GST rule in case of Partial Invoice-------*/
                if (WtfGlobal.GSTApplicableForCompany()== Wtf.GSTStatus.NEW) {
                    this.Grid.store.each(function(rec) {

                        if (rec.data['LineTermdetails'] != undefined && rec.data['LineTermdetails'] != "") {
                            var termStore = this.Grid.getTaxJsonOfIndia(rec);

                            this.Grid.getColumnModel().setRenderer(this.Grid.getColumnModel().findColumnIndex("amount"), this.Grid.calAmountWithoutExchangeRate.createDelegate(this));
                            termStore = this.Grid.calculateTermLevelTaxes(termStore, rec);

                            rec.set('LineTermdetails', Wtf.encode(termStore));
                            fireUpdateForRecalculations(this.Grid);
                        }
                    }, this);
                }   
                
        if (this.isModuleForAvalara) {
            var productRecordsArr = [];
            this.Grid.store.each(function (record, recordIndex, totalRecordCount) {
                var tempObj = record.data;
                if ((tempObj.pid || tempObj.productid) && tempObj.quantity) {
                    tempObj.rowIndex = recordIndex;
                    productRecordsArr.push(tempObj);
                }
            });
            getTaxFromAvalaraAndUpdateGrid(this.Grid, undefined, productRecordsArr);
        } else {
            this.updateSubtotal();
        }
    },
    hideShowFromLinkCombo : function(){
        if (this.isJobWorkOrderReciever) {
            return true;
        } else {
            if(SATSCOMPANY_ID==companyid){
                return (this.isCustBill || (this.isOrder&&this.isCustomer) || this.cash ||this.quotation || this.isTemplate || this.isViewTemplate || this.isEditTemplate); // this.isEditTemplate - hide the "link to" combo in edit template
            }else{
                return (this.isCustBill || this.cash ||(this.isCustomer&&this.quotation) || this.isTemplate || ((this.isViewTemplate || this.isEditTemplate) && !this.readOnly)); // this.isEditTemplate - hide the "link to" combo in edit template
            }
            }
    },
    
    hideShowFromPOCombo: function () {
        if (this.isJobWorkOrderReciever) {
            return true;
        } else {
            if (SATSCOMPANY_ID == companyid) {
                return (this.cash || (this.quotation && !this.isCustomer) || (this.isOrder && this.isCustBill) || this.isTemplate || this.isViewTemplate || this.isEditTemplate); // this.isEditTemplate - hide the "link to" combo in edit template
            } else {
                return (this.cash || (this.isOrder && this.isCustBill) || this.isTemplate || ((this.isViewTemplate || this.isEditTemplate) && !this.readOnly)); // this.isEditTemplate - hide the "link to" combo in edit template
            }
        }
    },
    hideShowPOCombo: function () {
        if (this.isJobWorkOrderReciever) {
            return true;
        } else {
            if (SATSCOMPANY_ID == companyid) {
                return (this.cash || (this.quotation && !this.isCustomer) || (this.isOrder && this.isCustBill) || this.isTemplate || this.isViewTemplate || this.isEditTemplate); // this.isEditTemplate - hide the "link to" combo in edit template
            } else {
                return (this.cash || (this.isOrder && this.isCustBill) || this.isTemplate || ((this.isViewTemplate || this.isEditTemplate) && !this.readOnly)); // this.isEditTemplate - hide the "link to" combo in edit template
            }
        }
    },
    
    createSATSFields : function(){
        this.shipLength=new Wtf.form.NumberField({
            allowNegative:false,
            //            allowDecimals:false,
            hidden:(SATSCOMPANY_ID!=companyid)?true:(!Wtf.account.companyAccountPref.dependentField && (this.moduleid==Wtf.Acc_Invoice_ModuleId || this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId)),
            hideLabel:(SATSCOMPANY_ID!=companyid)?true:!Wtf.account.companyAccountPref.dependentField && (this.moduleid==Wtf.Acc_Invoice_ModuleId || this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId),
            defaultValue:1,
            id:"shiplengthval"+this.heplmodeid+this.id,
            allowBlank:(SATSCOMPANY_ID!=companyid) ? true : this.isOrder,
            maxLength: 10,
            width:240,
            fieldLabel:WtfGlobal.getLocaleText("acc.invoiceList.shipLength"),  //'Discount',
            name:'shipLength'
        });
        this.shipLength.setValue(1);
        this.shipLength.on("change",function(){
            var store=this.Grid.getStore();
            var total=store.getCount();
            for(var k=0;k<total;k++){
                var record = store.getAt(k);
                var beforeEditRecordNew=this.Grid.productComboStore.getAt(this.Grid.productComboStore.find('productid',record.data.productid));
                if(beforeEditRecordNew){
                    var custValue=beforeEditRecordNew.data.dependentTypeNo;
                    if(custValue!="") {
                        Wtf.Ajax.requestEx({
                            url: "ACCGoodsReceipt/getMasterItemPriceFormulaPrice.do",
                            params: {
                                productId: record.data.productid,
                                item: this.shipLength.getValue(),
                                rowid: k
                            }
                        }, this, function(response,res) {
                            var datewiseprice=record.data.rate;
                            var rowidVal=res.params.rowid;
                            for (var i = 0; i < response.data.length; i++) {
                                var dataObj = response.data[i];
                                if(dataObj.pricevalue>0){
                                    datewiseprice=dataObj.pricevalue;
                                }
                                this.Grid.getStore().getAt(rowidVal).set("rate", datewiseprice);
                                this.Grid.fireEvent('datachanged',this.Grid);
                            }
                        } , function(){

                            });
                    } 

                }
            }              

            this.fireEvent('datachanged',this);

        },this);
        
        
        this.invoiceTypeStore = new Wtf.data.SimpleStore({
            fields: [{
                name:'id',
                type:'string'
            }, 'name'],
            data :[["ff808081434d75f2014351835fc70003","Ad-Hoc Invoice"],
            ["ff808081434d75f201435182a6270002","Marine Invoice"],
            ["ff808081434d75f20143518400630005","Retail Invoice-Fixed"],
            ["ff808081434d75f20143518438fe0006","Retail Invoice-Variable"],
            ["ff808081434d75f201435183b3270004","Visitor's Pass Invoice"],
            ["ff808081434d75f201435183b3270007","Water Sale Invoice"],
            ["ff808081434d75f20143518400630008","Car Park Operator"],
            ["ff808081434d75f20143518400630009","Security Officer"],
            ["ff808081434d75f20143518400630010","Event"]]
        });
        var invoivetypeFieldLabel="";
        if(this.moduleid==Wtf.Acc_Customer_Quotation_ModuleId){  //customer quotation
            invoivetypeFieldLabel=WtfGlobal.getLocaleText("acc.customerquotation.type");
        }else if(this.moduleid==Wtf.Acc_Vendor_Quotation_ModuleId)  //  //vendor quotation
        {
            invoivetypeFieldLabel=WtfGlobal.getLocaleText("acc.vendorquotation.type");      
        }else if(this.moduleid==Wtf.Acc_Sales_Order_ModuleId)   //sales order
        {
            invoivetypeFieldLabel=WtfGlobal.getLocaleText("acc.salesorder.type");

        }else if(this.moduleid==Wtf.Acc_Purchase_Order_ModuleId)  //purchase order
        {
            invoivetypeFieldLabel=WtfGlobal.getLocaleText("acc.purchaseorder.type");
        }else {                                                  //invoice
            invoivetypeFieldLabel=WtfGlobal.getLocaleText("acc.invoice.type"); 
        }
        
        this.invoiceType=new Wtf.form.ComboBox({
            fieldLabel:invoivetypeFieldLabel, 
            name:'invoicetype',
            store:this.invoiceTypeStore,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            width : 240,
            allowBlank:(SATSCOMPANY_ID!=companyid)?true:(!Wtf.account.companyAccountPref.dependentField && (this.moduleid==Wtf.Acc_Invoice_ModuleId || this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId)),
            hidden:(SATSCOMPANY_ID!=companyid)?true:(!Wtf.account.companyAccountPref.dependentField && (this.moduleid==Wtf.Acc_Invoice_ModuleId || this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId)),
            hideLabel:(SATSCOMPANY_ID!=companyid)?true:(!Wtf.account.companyAccountPref.dependentField && (this.moduleid==Wtf.Acc_Invoice_ModuleId || this.moduleid==Wtf.Acc_Vendor_Invoice_ModuleId)),
            listWidth:400,
            hiddenName:'invoicetype',
            emptyText:'Select Invoice Type',
            forceSelection:true,
            triggerAction:'all'
        });
        this.invoiceType.on("select",function(store,rec){
            var invoicetype="";
            invoicetype=(rec.data.id!=null)?rec.data.id:"";
            this.loadSATSProductGrid(invoicetype);
        },this);
        
    },
    
    createJOBWORKOUTFields : function (){
        this.productRec = Wtf.data.Record.create([
            {name: 'productid'},
            {name: 'pid'},
            {name: 'type'},
            {name: 'productname'},
            {name: 'desc'},
            {name: 'producttype'}
        ]);

        this.productStore = new Wtf.data.Store({
            url: "ACCProduct/getProductsForCombo.do",
            baseParams: {
                mode: 22,
                onlyProduct: true,
                isFixedAsset: false,
                includeBothFixedAssetAndProductFlag: false
            },
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            }, this.productRec)
        });
        this.productStore.on('load', this.loadrecord, this);

        this.workOrderRec = Wtf.data.Record.create([
            {name: 'workorderid'},
            {name: 'workordername'},
            {name: 'bomid'},
            {name: 'bomname'}
        ]);

        this.workOrderStore = new Wtf.data.Store({
            url: "ACCJobWorkController/getWorkOrdersForCombo.do",
            baseParams: {
            },
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            }, this.workOrderRec)
        });
        
             this.locationRec = new Wtf.data.Record.create([
            {
                name: "id"
            },
            {
                name: "name"
            },
            {
                name: 'parentid'
            },
            {
                name: 'parentname'
            }
        ]);
        this.locationReader = new Wtf.data.KwlJsonReader({
            root: "data"
        }, this.locationRec);
        var locationStoreUrl = "ACCMaster/getLocationItems.do"
        if (Wtf.account.companyAccountPref.activateInventoryTab) {
            locationStoreUrl = "ACCMaster/getLocationItemsFromStore.do";
        }
        this.locationStore = new Wtf.data.Store({
            url: locationStoreUrl,
            reader: this.locationReader
        });
        this.locationStore.load();
        
        this.workOrder = new Wtf.form.ExtFnComboBox({
            fieldLabel: WtfGlobal.getLocaleText("acc.mrp.workorder.joborder.fields.joborder.workordercombotitle"), //Work Order
            name: 'workorderid',
//            id: "workorder" + this.id,
            store: this.workOrderStore,
            valueField: 'workorderid',
            displayField: 'workordername',
            mode: 'remote',
//            d: this.removegrid ? false : true,
//            disabled: this.removegrid ? false : true,
            width: 250,
            maxLength: 50,
            scope: this,
            lastQuery: '',
            typeAhead: true,
            forceSelection: true,
            hirarchical: true,
            triggerAction: 'all',
            extraFields: [],
            allowBlank: true
        });
        
        this.productNameCombo = new Wtf.form.ExtFnComboBox({
            fieldLabel: WtfGlobal.getLocaleText("mrp.workorder.entry.product") + "*",
            name: 'productid',
            store: this.productStore,
            typeAhead: true,
            isProductCombo: true,
            selectOnFocus: true,
            maxHeight: 250,
            listAlign: "bl-tl?",
            valueField: 'productid',
            displayField: 'pid',
            extraFields: ['pid', 'productname', 'type'],
            listWidth: 450,
            extraComparisionField: 'pid',
            extraComparisionFieldArray: ['pid', 'productname'],
            lastQuery: '',
            width: 250,
            allowBlank: false,
            hirarchical: true,
            addNewFn: this.createProduct.createDelegate(this),
            forceSelection: true
        });
        
       this.productNameCombo.on("change", this.onProductChange, this);
       
       this.productStore.load();
       
         this.productQuantity = new Wtf.form.NumberField({ 
            fieldLabel: WtfGlobal.getLocaleText('acc.mrp.workorder.joborder.fields.joborder.productqty') + '*', //product quantity
            name: 'productquantity',
            hidden: false,
            width: 250,
            maxLength: 50,
            scope: this,
            allowBlank: false
        });
       
      this.productQuantity.on("blur", this.quantityChange, this);
        
           this.exiceseDutyCharges = new Wtf.form.NumberField({
            fieldLabel: WtfGlobal.getLocaleText('acc.mrp.workorder.joborder.fields.joborder.exduty'), //Excise Duty Charges
            name: 'excisedutychargees',
            hidden: false,
            width: 250,
            maxLength: 50,
            scope: this
        });

        this.jobWorkLocation = new Wtf.form.ExtFnComboBox({
            triggerAction: 'all',
            mode: 'remote',
            multiSelect: false,
            fieldLabel: WtfGlobal.getLocaleText("acc.mrp.workorder.joborder.fields.joborder.jobworklocation"),
            valueField: 'id',
            displayField: 'name',
            lastQuery: '',
            store: this.locationStore,
            typeAhead: true,
            forceSelection: true,
            hirarchical: true,
            name: 'jobworklocation',
            hiddenName: 'jobworklocation',
            width: 250,
            typeAheadDelay: 30000,
            selectOnFocus: true,
            extraFields: [],
            addNewFn: this.createLocation.createDelegate(this)
        });
        
          this.dateOfshipment = new Wtf.form.DateField({  
            fieldLabel: WtfGlobal.getLocaleText('acc.mrp.workorder.joborder.fields.joborder.dateofshipment') + '*', ///date of shipment
            format: WtfGlobal.getOnlyDateFormat(),
            name: 'dateofshipment',
            width: 250,
            allowBlank: false
        });


        this.dateofdelivery = new Wtf.form.DateField({
            fieldLabel: WtfGlobal.getLocaleText('acc.mrp.workorder.joborder.fields.joborder.dateOfDelivery') + '*', //Date Of Delivery
            format: WtfGlobal.getOnlyDateFormat(),
            name: 'dateofdelivery',
            allowBlank: false,
            width: 250
        });
        
        this.shipmentRoute = new Wtf.form.TextField({   
            fieldLabel: WtfGlobal.getLocaleText('acc.mrp.workorder.joborder.fields.joborder.shipmentroute'), //Shipment Route
            name: 'shipmentroute',
            hidden: false,
            width: 250,
            maxLength: 50,
            scope: this
        });

        this.gatepass = new Wtf.form.TextField({
            fieldLabel: WtfGlobal.getLocaleText('acc.mrp.workorder.joborder.fields.joborder.gatepass'), //Gatepass
            name: 'gatepass',
            hidden: false,
            width: 250,
            maxLength: 50,
            scope: this
        });

        this.otherRemarks = new Wtf.form.TextArea({
            fieldLabel: WtfGlobal.getLocaleText('acc.mrp.workorder.joborder.fields.joborder.otherremarks'), //OtherRemarks
            name: 'otherremarks',
            hidden: false,
            width: 250,
            maxLength: 50,
            scope: this
        });
        
        
    },
    
     onProductChange: function (combo, newvalue, oldvalue) {
        if (newvalue) {
            var index = combo.selectedIndex;
            var rec = combo.store.getAt(index).data;
            var id = newvalue;
            var productType = rec.type;
            var productid = newvalue;
            var pid = rec.pid;
            var pname = rec.productname;
            var arr = [];
            arr.push(id);
            arr.push(productType);
            arr.push(productid);
            arr.push(pid);
            arr.push(pname);
            
            var workorderid=this.workOrder.getValue();
            var workorderrec = WtfGlobal.searchRecord(this.workOrderStore, workorderid, 'workorderid');
            var bomdetailid="";
            var useDefaultbom=true;
            if(workorderrec != undefined && workorderrec != -1){
                bomdetailid=workorderrec.data.bomid;
                useDefaultbom=false;
            }
            if(this.productQuantity.getValue() != ""){
                this.loadDetails(productid,this.productQuantity.getValue(),bomdetailid,useDefaultbom);
            }
            
            
        }
    },
     quantityChange: function (combo, newvalue, oldvalue) {
       
            var productid=this.productNameCombo.getValue();
            var workorderid=this.workOrder.getValue();
            var workorderrec = WtfGlobal.searchRecord(this.workOrderStore, workorderid, 'workorderid');
            var bomdetailid="";
            var useDefaultbom=true;
            if(workorderrec != undefined && workorderrec != -1){
                bomdetailid=workorderrec.data.bomid;
                useDefaultbom=false;
            }
            if(productid != "" && productid != undefined){
                this.loadDetails(productid,this.productQuantity.getValue(),bomdetailid,useDefaultbom);
            }
    },
    loadDetails : function (productid,quantity,bomdetailid,useDefaultbom){
         this.Grid.getStore().proxy.conn.url = "ACCProduct/getAssemblyItems.do";
         this.Grid.store.load({
                params: {
                    productid: productid,
                    isMRPJOBWORKOUT:this.isMRPJOBWORKOUT,
                    mrproductquantity: quantity,
                    bomdetailid: bomdetailid,
                    isdefaultbom:useDefaultbom
                }
            }, this);
    },
    createProduct: function () {
        callProductDetails();
    },
    createLocation: function () {
        this.win = new Wtf.LocationaddWindow({
            title: 'Add' + " Location",
            floating: true,
            closable: true,
            id: 'StoreformId' + 'Add' + this.id,
            modal: true,
            autoShow: true,
            iconCls: 'win',
            storerec: {},
            width: 420,
            action: 'Add',
            height: 470,
            layout: 'fit',
            createFlag: true,
            resizable: false,
            autoScroll: true
        }).show();
    },
    checkForDeActivatedProductsAdded:function(){
    var invalidProducts='';
    if(this.isEdit && !this.copyInv){ // Edit case
            var linkedDocuments = this.PO.getValue();
            var linkedDocsArray=[];
            if(linkedDocuments != ''){
                linkedDocsArray = linkedDocuments.split(',');
                var areDocumentsChanged = false;
                for(var x=0;x<linkedDocsArray.length;x++){
                    var docId = linkedDocsArray[x];
                    if(this.originallyLinkedDocuments.indexOf(docId) == -1){
                        areDocumentsChanged = true;
                        break;
                    }
                }
                if(areDocumentsChanged){
                    invalidProducts = this.checkDeactivatedProductsInGrid();
                }
            }
    } else { // Create New and Copy
        invalidProducts = this.checkDeactivatedProductsInGrid();
    }
    return invalidProducts;
},
    checkDeactivatedProductsInGrid :function(){
        var inValidProducts=''
        var rec = null;
        var productId = null;
        var productRec = null;
        for(var count=0;count<this.Grid.store.getCount();count++){
            rec = this.Grid.store.getAt(count);
            productId = rec.data.productid;
            if(productId!= undefined && productId != null && productId != ''){
                if(!this.fromPO.getValue() && !this.copyInv){
                    productRec = WtfGlobal.searchRecord(this.Grid.productComboStore, productId, "productid");
                }else {
                    productRec = rec;
                }
                
                if(productRec && (productRec.data.hasAccess === false)){
                    inValidProducts+=productRec.data.productname+', ';
                }
            }                
        }
        return inValidProducts; // List of deactivated products
    },
    globalDiscountApplied:function(obj,newval,oldval){
        if(newval){
            if((this.globalDiscount.getValue() == '' || this.globalDiscount.getValue() == null || this.globalDiscount.getValue() == undefined)){
                this.globalDiscount.setValue(0);
            }
            Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.common.sureToWantApplyGlobalDiscount"),function(btn){
                if(btn=="yes") {
                    this.applyDiscountToAllLineItems();
                } else {
                    obj.setValue(oldval);
                }
                return;
            },this);
        }      
    },
    globalDiscountTypeChanged: function(){
        if(this.globalDiscountType.getValue() == 1 && this.globalDiscount.getValue() > 100){
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.Percentdiscountcannotbegreaterthan100")], 2);
            this.globalDiscount.setValue(100);
        }
        if(this.applyGlobalDiscount.getValue()){
            this.applyDiscountToAllLineItems()
        }
    },
    globalDiscountValueChanged:function(obj,newval,oldval){
        if(newval == '' || newval== null || newval == undefined){
            obj.setValue(0);
        }
        if(this.globalDiscountType.getValue() == 1 && newval > 100){
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.field.Percentdiscountcannotbegreaterthan100")], 2);
            obj.setValue(oldval);
        }
        if(this.applyGlobalDiscount.getValue()){
            this.applyDiscountToAllLineItems()
        }
    },
    applyDiscountToAllLineItems : function(){
        var discountType = this.globalDiscountType.getValue();
        var discountValue = this.globalDiscount.getValue();
        var rec = null;
        var rate = 0;
        var taxamount = 0;        
        var isRecordValid=false;
        var id=null;
        for(var x=0 ; x < this.Grid.store.getCount();x++){
            rec = this.Grid.store.getAt(x);
            id = this.isExpenseInv?rec.data.accountid:rec.data.productid;
            isRecordValid = (id!= undefined && id != null && id != '');
            
            if(isRecordValid){
                rec.set('discountjson','');
                rec.set('qtipdiscountstr','');
                rec.set('discountispercent',discountType);
                rec.set('prdiscount',discountValue);
                taxamount = this.Grid.setTaxAmountAfterSelection(rec);
                rec.set("taxamount",taxamount);
                rec.set('isUserModifiedTaxAmount', false);
                if(!this.isExpenseInv){                    
                    if(this.includingGST.getValue()){
                        this.Grid.setTaxAndRateAmountAfterIncludingGST(rec);
                    }
                }
                /*
                 *Updating the values of LineTerm details on applying global discount
                 **/
            if(Wtf.account.companyAccountPref.isLineLevelTermFlag){
                var rowAmountIndex=this.Grid.getColumnModel().findColumnIndex("amount");            
                if(rec.get('LineTermdetails') != undefined && rec.get('LineTermdetails') != ''){
                    var termStore = this.Grid.getTaxJsonOfIndia(rec);
                    if(this.includingGST && this.includingGST.getValue() == true) {
                        this.Grid.getColumnModel().setRenderer(rowAmountIndex,WtfGlobal.withoutRateCurrencySymbol);
                        termStore = this.Grid.calculateTermLevelTaxesInclusive(termStore, rec);
                    } else {
                        this.Grid.getColumnModel().setRenderer(rowAmountIndex,this.Grid.calAmountWithoutExchangeRate.createDelegate(this.Grid));
                        termStore = this.Grid.calculateTermLevelTaxes(termStore, rec);
                    }

                    rec.set('LineTermdetails',JSON.stringify(termStore));
                    this.Grid.updateTermDetails();
                }
            }
            
                if(!Wtf.isEmpty(rec.get('appliedTDS')) && Wtf.isEmpty(rec.get('tdsjemappingID'))){
                    rec.set('appliedTDS', "");
                    rec.set('tdsamount', 0.0);
                }
            }  
        }
        if (this.includeProTax && this.includeProTax.getValue() == true){
            WtfGlobal.calculateTaxAmountUsingAdaptiveRoundingAlgo(this.Grid, this.isExpenseInv);//ERM-1085
        }
        this.Grid.fireEvent('datachanged',this);
    },
//function to update Chnage To Be Returned value in summary text
updateChangeToBeReturnedValue: function(obj, newVal, oldVal) {
    //get total term value
    var calTermTotal = WtfGlobal.addCurrencySymbolOnly(this.findTermsTotal(),this.symbol);

    var subtotal=0.00;
    var subtotalValue=0.00;
    var tax=0.00;
    // calculate tax and subtotal
    var taxAndSubtotal=this.Grid.calLineLevelTax();
    if(this.includeProTax.getValue() && Wtf.account.companyAccountPref.isLineLevelTermFlag==0){
        subtotal=WtfGlobal.addCurrencySymbolOnly(taxAndSubtotal[0]-taxAndSubtotal[1],this.symbol)
        subtotalValue=taxAndSubtotal[0]-taxAndSubtotal[1];
        /*
         * Add Invoice term's tax total tax amount.
         */
        tax = taxAndSubtotal[1];
        if(this.applyTaxToTermsChk.getValue()==true){
            tax += this.addTermAmountInTax();
        }
        tax=WtfGlobal.addCurrencySymbolOnly(tax,this.symbol);
    }else{
        subtotal=WtfGlobal.addCurrencySymbolOnly(this.Grid.calSubtotal(),this.symbol)
        subtotalValue=this.Grid.calSubtotal();
        tax=WtfGlobal.addCurrencySymbolOnly(this.caltax()+this.addTermAmountInTax(),this.symbol);
    }
    var amountbeforetax=WtfGlobal.addCurrencySymbolOnly(subtotalValue+this.findTermsTotal(),this.symbol);
    //update summary text with respective values
    if(((this.isCustomer && !Wtf.dispalyUnitPriceAmountInSales) || (!this.isCustomer && !Wtf.dispalyUnitPriceAmountInPurchase))) {
        this.tplSummary.overwrite(this.southCalTemp.body,{
            subtotal:Wtf.UpriceAndAmountDisplayValue,
            discount:Wtf.UpriceAndAmountDisplayValue,
            totalamount:Wtf.UpriceAndAmountDisplayValue,
            tax:Wtf.UpriceAndAmountDisplayValue,
            termtotal:Wtf.UpriceAndAmountDisplayValue,
            amountbeforetax:Wtf.UpriceAndAmountDisplayValue,
            roundingAdjustmentAmount:Wtf.UpriceAndAmountDisplayValue,
            aftertaxamt:Wtf.UpriceAndAmountDisplayValue,
            totalAmtInBase:Wtf.UpriceAndAmountDisplayValue,
            nontaxableamount: Wtf.UpriceAndAmountDisplayValue,
            tdsamount: Wtf.UpriceAndAmountDisplayValue,
            amountdue:Wtf.UpriceAndAmountDisplayValue,
            changeToBeReturned:Wtf.UpriceAndAmountDisplayValue
        });
    } else if(this.roundingAdjustmentFlag){
        var summaryAmtArray = this.getSummaryDetailAmountArray();
        var subTotalAmt = summaryAmtArray[0];
        var taxValue = summaryAmtArray[1];
        var nonTaxableAmt = summaryAmtArray[2];
        var termTotalAmt = summaryAmtArray[3];
        var tdsAmt = summaryAmtArray[4];
        var discountAmt = summaryAmtArray[5];
        var totalAmount = summaryAmtArray[6];
        var changedToBeReturnedAmt = summaryAmtArray[7];
        var totalInBaseAmt = summaryAmtArray[8];
        var aftertaxamt = summaryAmtArray[9];
        var roundingAdjustmentAmount = summaryAmtArray[10];

        this.tplSummary.overwrite(this.southCalTemp.body,{
            subtotal:WtfGlobal.addCurrencySymbolOnly(subTotalAmt,this.symbol),
            discount:WtfGlobal.addCurrencySymbolOnly(discountAmt,this.symbol),
            totalamount:WtfGlobal.addCurrencySymbolOnly(totalAmount,this.symbol),
            tax:WtfGlobal.addCurrencySymbolOnly(taxValue,this.symbol),
            termtotal:WtfGlobal.addCurrencySymbolOnly(termTotalAmt,this.symbol),
            amountbeforetax:WtfGlobal.addCurrencySymbolOnly((subTotalAmt+termTotalAmt),this.symbol),
            roundingAdjustmentAmount:WtfGlobal.addCurrencySymbolOnly(roundingAdjustmentAmount,this.symbol),
            aftertaxamt:WtfGlobal.addCurrencySymbolOnly(aftertaxamt,this.symbol),
            totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(totalInBaseAmt,WtfGlobal.getCurrencySymbol()),
            nontaxableamount: WtfGlobal.addCurrencySymbolOnly(nonTaxableAmt,this.symbol),
            tdsamount: WtfGlobal.addCurrencySymbolOnly(tdsAmt,this.symbol),
            amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
            changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(changedToBeReturnedAmt,this.symbol)
        });
    } else {
        this.tplSummary.overwrite(this.southCalTemp.body,{
            subtotal:subtotal,
            discount:WtfGlobal.addCurrencySymbolOnly(this.getDiscount(),this.symbol),
            totalamount:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount(),this.symbol),
            tax:tax,
            termtotal:calTermTotal,
            amountbeforetax:amountbeforetax,
            aftertaxamt:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmount()+this.caltax()+this.addTermAmountInTax()+this.findTermsTotal()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount(),this.symbol),
            totalAmtInBase:WtfGlobal.addCurrencySymbolOnly(this.calTotalAmountInBase(),WtfGlobal.getCurrencySymbol()),
            nontaxableamount: WtfGlobal.addCurrencySymbolOnly(this.calCulateNonTaxableTermAmount(),this.symbol),
            tdsamount: WtfGlobal.addCurrencySymbolOnly(this.calculateTDSAmount(),this.symbol),
            amountdue:WtfGlobal.addCurrencySymbolOnly(this.amountdue,WtfGlobal.getCurrencySymbol()),
            changeToBeReturned:WtfGlobal.addCurrencySymbolOnly(this.calChangeToBeReturned(),this.symbol)
        });
    } 
},
    
getSummaryDetailAmountArray:function(){
    var subtotal= 0;
    var taxValue = 0;
    var nonTaxableAmt= 0;
    var termTotalAmt=0;
    var tdsAmt = 0;
    var discountAmt = 0;
    var totalAmount = 0;
    var changedToBeReturnedAmt = 0;
    var totalAmountAftertax=0;
    var roundedTotalAmountAftertax =0;
    var totalInBaseAmt=0;
    var roundingAdjustmentAmount=0;
    
    if((this.isEdit && !this.copyInv) || this.readOnly){// For Edit and View Mode if rounding not applied it will not show rounding adjustment
        if((!Wtf.isEmpty(this.record)&&this.record!=null)){
            this.applyRoundingAdjustmentToDocument = this.record.data.isRoundingAdjustmentApplied;
        }
    } else if(this.PO && this.PO.getValue()!=""){//New or Copy case with Linking Document
        // We check if there is any document linked to current document has rounding or not. 
        // If multiple document then current document working will be depend upon the company setting only.
        var poRecord = this.PO.getValue().split(",");
        var applyRounding =false;
        for(var cnt=0;cnt<poRecord.length;cnt++){
            var foundPORecord= WtfGlobal.searchRecord(this.POStore,poRecord[cnt],"billid");
            if(!Wtf.isEmpty(foundPORecord) && foundPORecord!=null && foundPORecord.data.isRoundingAdjustmentApplied){
                applyRounding =true;
                break;
            }
        }
        this.applyRoundingAdjustmentToDocument = applyRounding; 
        
    } else{//new or copy case without linking
        this.applyRoundingAdjustmentToDocument = this.roundingAdjustmentFlag;
    }
    
    var taxAndSubtotal=this.Grid.calLineLevelTax();
    /**
     * for INDIA and US GST else condition used to calcualte tax and subtotal
     * and for non INDIA and US GST both condition used depend on "includeProTax"
     */
    if(this.includeProTax.getValue() && Wtf.account.companyAccountPref.isLineLevelTermFlag==0){
        subtotal=taxAndSubtotal[0]-taxAndSubtotal[1];
        /*
         * Add Invoice Term's tax in Total Tax amount.
         */
        taxValue = taxAndSubtotal[1];
        if(this.applyTaxToTermsChk.getValue()==true){
            taxValue += this.addTermAmountInTax();
        }
    }else{
        subtotal=this.Grid.calSubtotal();
        taxValue = this.caltax() + this.addTermAmountInTax();
    }
    
    nonTaxableAmt =  this.calCulateNonTaxableTermAmount();
    termTotalAmt= this.findTermsTotal();
    tdsAmt =  this.calculateTDSAmount();
    discountAmt = this.getDiscount();
    totalAmount = this.calTotalAmount();//it is (subtotal - discount)
    changedToBeReturnedAmt = this.calChangeToBeReturned();
    
    totalAmountAftertax = (subtotal + taxValue + termTotalAmt + nonTaxableAmt) - (tdsAmt + discountAmt);
    if(this.applyRoundingAdjustmentToDocument){
        roundedTotalAmountAftertax = Math.round(totalAmountAftertax);
        totalInBaseAmt = getRoundedAmountValue(roundedTotalAmountAftertax*this.getExchangeRate());
        roundingAdjustmentAmount = roundedTotalAmountAftertax - totalAmountAftertax; 
    } else{
        roundedTotalAmountAftertax = totalAmountAftertax;
        totalInBaseAmt = getRoundedAmountValue(totalAmountAftertax*this.getExchangeRate());
        roundingAdjustmentAmount = 0;
    }
    var summaryAmtArray = [subtotal,taxValue,nonTaxableAmt,termTotalAmt,tdsAmt,discountAmt,totalAmount,changedToBeReturnedAmt,totalInBaseAmt,roundedTotalAmountAftertax,roundingAdjustmentAmount]; 
    return summaryAmtArray;
},
    
    setTermAmountOnEachRow:function(termAmountChanged,termAmount,indexOfTermUpdated){
        var store = this.Grid.store;
        var rec=null;
        var id=null;
        var isRecordValid=false;
        var finalAmount = 0;
        var totalTermAmountArray=[];
        /**
         * calcuation should be done only if we edit the term grid.
         * do not caluate unit price in view and while rendereding grid in edit case. 
         */
        if(this.istermamountchanged){
        for(var x=0;x<this.termStore.getCount();x++){
            totalTermAmountArray.push(0);
        }
        var subTotalAmount = this.calProdSubtotalWithoutDiscount();
        var finalLineAmountForThisRecord = 0;
            for (var i=0; i<store.getCount();i++){
                rec = store.getAt(i);
                id = this.isExpenseInv?rec.data.accountid:rec.data.productid;
                isRecordValid = (id!= undefined && id != null && id != '');
                finalLineAmountForThisRecord = this.calLineTotalWithoutDiscount(i);
                if(isRecordValid){
                    
                    var termRec = null;
                    var termStore = this.termStore;
                    var previousTermAmount = 0;
                    var this_termTotal = 0;
                    for(var termIndex=0; termIndex<this.termStore.getCount(); termIndex++) {
                        termRec = termStore.getAt(termIndex);
                        var formula = termRec.data.formulaids.split(",");
                        var termtotal = 0;
                        this_termTotal = 0;
                        if (termAmountChanged == undefined) {
                            termAmount = (termRec.data != undefined && termRec.data.termamount != undefined) ? termRec.data.termamount : 0;
                            rec.set('lineleveltermamount',getRoundedAmountValue(this_termTotal+previousTermAmount));
                        } else {
                            termAmount = termAmount != undefined ? termAmount : ((termRec.data != undefined && termRec.data.termamount != undefined) ? termRec.data.termamount : 0);
                        }
//                        termAmount = (!termAmountChanged && termAmount!=undefined)?termAmount:((termRec.data!=undefined && termRec.data.termamount!=undefined)?termRec.data.termamount:0);
                        this_termTotal = termAmount;//SDP-13373
                        if(termAmountChanged && (termIndex == indexOfTermUpdated)){
                            this_termTotal = (termAmount*finalLineAmountForThisRecord)/subTotalAmount;
                            this_termTotal = getRoundedAmountValue(this_termTotal);
                            rec.set('lineleveltermamount',getRoundedAmountValue(this_termTotal + previousTermAmount));
                            if(this.isExpenseInv){  
                                    var newTaxAmount = this.Grid.setTaxAmountAfterSelection(rec) 
                                    rec.set("taxamount",newTaxAmount);
                                 } else {  
                                     if(WtfGlobal.isIndiaCountryAndGSTApplied() || WtfGlobal.isUSCountryAndGSTApplied()){
                                         var GSTTaxTermsStore = this.Grid.getTaxJsonOfIndia(rec);
                                         this.Grid.calculateTermLevelTaxesInclusive(GSTTaxTermsStore,rec);
                                     }else{
                                         this.Grid.setTaxAndRateAmountAfterIncludingGST(rec);
                                     }
                                 }     
                        } else {
                            
                            finalAmount = this.calLineTotalWithoutDiscount(i);    
                            for(var cnt=0; cnt<formula.length; cnt++){
                                if(formula[cnt]=='Basic') {
                                    termtotal +=(finalAmount);
                                }
                                var record = termStore.queryBy(function(record){
                                    return (record.get('id') == formula[cnt]);
                                }, this).items[0];
                                if(record && (typeof record.data.termamount=='number')) {
                                    termtotal +=(record.data.termamount);
                                }
                            }
                            if(typeof (termRec.data.termpercentage) != "string" && parseInt(termRec.data.termpercentage) >= 0) {
                                var opmod = termRec.data.sign==0 ? -1 : 1;
                                this_termTotal = ((Math.abs(termtotal) * termRec.data.termpercentage*1) / 100)*opmod;
                                rec.set('lineleveltermamount',getRoundedAmountValue(this_termTotal+previousTermAmount));
                                 if(this.isExpenseInv){  
                                    var newTaxAmount = this.Grid.setTaxAmountAfterSelection(rec);
                                    rec.set("taxamount",newTaxAmount);
                                 } else {  
                                     if(WtfGlobal.isIndiaCountryAndGSTApplied() ||WtfGlobal.isUSCountryAndGSTApplied()){
                                         var GSTTaxTermsStore = this.Grid.getTaxJsonOfIndia(rec);
                                         this.Grid.calculateTermLevelTaxesInclusive(GSTTaxTermsStore,rec);
                                     }else{
                                         this.Grid.setTaxAndRateAmountAfterIncludingGST(rec);
                                     }
                                 }   
                            }
                        }
                        /**
                         *Do not reset term while aplying term when including gst is ON. and reset given term amount when 
                         *percentage value is given.SDP-13373
                         */
                        if (termRec.data.termpercentage != undefined && termRec.data.termpercentage != "") {
                        termRec.set('termamount', getRoundedAmountValue(Math.abs(this_termTotal)));
                        totalTermAmountArray[termIndex] = totalTermAmountArray[termIndex] + getRoundedAmountValue(this_termTotal);
                    }
                        previousTermAmount += getRoundedAmountValue(this_termTotal);
                    }
                }
            }
        
            var tempAmtToSet = 0;
            for (var k = 0; k < this.termStore.getCount(); k++) {//SDP-13373
            if (this.termStore.data!=undefined && this.termStore.data.items[k]!=undefined && this.termStore.data.items[k].data.termamount !=undefined && this.termStore.data.items[k].data.termamount!="" && this.termStore.data.items[k].data.termamount != 0) {
                tempAmtToSet = this.termStore.data.items[k].data.termamount;
            } else {
                tempAmtToSet = totalTermAmountArray[k];
            }
                this.termStore.getAt(k).set('termamount', getRoundedAmountValue(Math.abs(tempAmtToSet)));
        }    
    }
    },
    calLineTotalWithoutDiscount:function(index){
        var store = this.Grid.store;
        var total = 0;
        var data=store.getAt(index).data;
          if(this.isExpenseInv)
              {
                  total=(data.calamount == null || data.calamount == '' || data.calamount == undefined)?0:data.calamount;
              }else{
                  total=(data.amountwithouttax == null || data.amountwithouttax == '' || data.amountwithouttax == undefined)?0:data.amountwithouttax;
              }
        return total;
    },
    showExciseSupplierDetailWindow : function(grid,param1,param2,param3,param4) {

            this.dealerExciseDetailGrid = new Wtf.account.supplierExciseGrid({
                id: 'TermSelGrid',
                isReceipt: false,                        
                border: false, 
                layout:"fit",
                width: 900,
                height:500,
                autoScroll:true, 
                cls:'gridFormat',
                region: 'center',
                productGrid:grid,
                viewConfig:{
                    forceFit:true
                },
                isEdit:this.isEdit,
                viewMode:this.isViewTemplate,
                isLineLevel : true,
                parentScope:this,
                param1:param1,
                param2:param2,
                param3:param3,
                param4:param4
            });      
    },
    showExciseDealerDetailWindow : function(grid,param1,param2,param3,param4) {

            this.dealerExciseDetailGrid = new Wtf.account.dealerExciseGrid({
                id: 'TermSelGrid',
                isReceipt: false,                        
                border: false, 
                layout:"fit",
                width: 900,
                height:500,
                autoScroll:true, 
                cls:'gridFormat',
                region: 'center',
                productGrid:grid,
                viewConfig:{
                    forceFit:true
                },
                isEdit:this.isEdit,
                parentObj : this,
                viewMode:this.isViewTemplate,
                isLineLevel : true,
                parentScope:this,
                param1:param1,
                param2:param2,
                param3:param3,
                param4:param4
            });      
    },
    
    //  ERP-27120 :-Indian Company if Template select otherthen none and delear type excise unit option then hide Types of Unit Combo else shown.
    
    hideTypeOfUnitOnSelectOfExciseUnitTpl :function(templateid){
    if(Wtf.account.companyAccountPref.countryid == Wtf.Country.INDIA && Wtf.isExciseApplicable){    //ERP-27120
        if(templateid!= undefined && templateid!=""){
            var tmplRec= WtfGlobal.searchRecord(this.moduleTemplateStore,templateid,"templateId");
            if(tmplRec!=null && tmplRec.json){
                var regstrTpy=WtfGlobal.searchRecord(Wtf.registrationTypeStore,tmplRec.json.registrationType,"id");
                if(regstrTpy.data.name=== WtfGlobal.getLocaleText("acc.field.dealer")){
                    WtfGlobal.hideFormElement(this.defaultNatureOfPurchase);
                }else{
                    WtfGlobal.showFormElement(this.defaultNatureOfPurchase);
                }  
            }
        }else{
            WtfGlobal.showFormElement(this.defaultNatureOfPurchase);
        }  
    }
},
checkBasicExemption:function(rec){
    
    var subtotal = this.Grid.calSubtotal();
    var tax=0.00;
    var taxAndSubtotal=this.Grid.calLineLevelTax();
    if(this.includeProTax.getValue()){
        subtotal=taxAndSubtotal[0]-taxAndSubtotal[1];
        tax=taxAndSubtotal[1];
    }else{
        subtotal=this.Grid.calSubtotal();     
        tax=this.caltax();
    }    
    var termtotal = this.findTermsTotalIncludedForTDS();
    var totalInvoiceAmount=subtotal + tax + termtotal;
    this.tdsBasicCount=0;
    var totalInvoiceAmountAnnualCal=totalInvoiceAmount+this.totalbalance;
    if((totalInvoiceAmount !=0 && this.tdsBasicExemptionPerTransaction <= totalInvoiceAmount) || (totalInvoiceAmountAnnualCal!=0 && this.tdsBasicExemptionPerAnnual <= totalInvoiceAmountAnnualCal)){
        this.tdsBasicCount++;
        this.tdsBasicExemptionSaveButton=false;
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.vendor.tds.BasicExemptionReached.make.TDS")], 2); 
        Wtf.Ajax.requestEx({// request to fetch tdsrate and amount as per nature of payment and other attributes
            url: "ACCVendorPaymentCMN/getTDSCalculationDetails.do",
            params: {
                natureofPayment: rec.data.natureOfPayment,
                deducteetype: rec.data.deducteetype,
                residentialstatus: rec.data.residentialstatus,
                tdsPayableAccount: rec.data.tdsPayableAccount,
                vendorID: !Wtf.isEmpty(rec.data.accid)?rec.data.accid : rec.data.personid,
                isBasicExemptionExc:true,
                creationDate: WtfGlobal.convertToGenericDate(this.val),
                isTDSApplicable:(!Wtf.isEmpty(this.record)&&this.record!=null)?this.record.data.isTDSApplicable:""
            }
        }, this, function (resp) {  
            if (resp != "") {
                if (resp.success) {
                    this.tdsRate = resp.tdsrate;                          
                    this.updateSubtotal();
                }
            }
        }, function (resp) {
            });
    }else if((totalInvoiceAmount !=0 && (this.tdsBasicExemptionPerTransaction-5000)< totalInvoiceAmount) || (totalInvoiceAmountAnnualCal!=0 && (this.tdsBasicExemptionPerAnnual-5000) < totalInvoiceAmountAnnualCal)){
         this.tdsBasicCount++;
        /*Basic Exemption is about to exceed. Please make TDS*/
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.common.warning"),WtfGlobal.getLocaleText("acc.vendor.tds.BasicExemptionReached.alert.TDS"),function(btn){
            if(btn=="yes") {
                this.tdsBasicExemptionSaveButton=false;
                Wtf.Ajax.requestEx({// request to fetch tdsrate and amount as per nature of payment and other attributes
                    url: "ACCVendorPaymentCMN/getTDSCalculationDetails.do",
                    params: {
                        natureofPayment: rec.data.natureOfPayment,
                        deducteetype: rec.data.deducteetype,
                        residentialstatus: rec.data.residentialstatus,
                        tdsPayableAccount: rec.data.tdsPayableAccount,
                        vendorID: !Wtf.isEmpty(rec.data.accid)?rec.data.accid : rec.data.personid,
                        isBasicExemptionExc:true,
                        creationDate: WtfGlobal.convertToGenericDate(this.val),
                        isTDSApplicable:(!Wtf.isEmpty(this.record)&&this.record!=null)?this.record.data.isTDSApplicable:""
                    }
                }, this, function (resp) {
                    if (resp != "") {
                        if (resp.success) {
                            this.tdsRate = resp.tdsrate;                          
                            this.updateSubtotal();
                        }
                    }
                }, function (resp) {
                    });
            }else{
                this.tdsRate = 0;                          
                this.updateSubtotal();       
                this.tdsBasicExemptionSaveButton=false;
            }            
        },this);
    }
    if( this.tdsBasicCount>0){
        return true;
    }else{
        return false;
    }
},
openWindow:function(record,grid,rowindex){
        var invoiceid=new Array();
        var allocationType="";
        if( this.invoiceList && this.invoiceList.getValue() != "") {
            invoiceid=this.invoiceList.getValue();
            if(this.landingCostCategoryCombo){
                var combo =this.landingCostCategoryCombo; 
                var llcRecId= combo.store.find(combo.valueField,combo.getValue());
                var llcRec =combo.store.getAt(llcRecId);
                if(llcRec){
                    allocationType=llcRec.data.allocationtype;
                }
            }   
            if (allocationType == Wtf.landingCostAllocation.CUSTOMDUTY) {
                var accString = "";
                if (Wtf.CustomDutyAccount == undefined || Wtf.CustomDutyAccount == "") {
                    accString = " Custom Duty";
                }
                if (Wtf.IGSTCustomDutyAccount == undefined || Wtf.IGSTCustomDutyAccount == "") {
                    if (accString === "") {
                        accString += ", "
                    }
                    accString += "IGST Account";
                }
                if (accString !== "") {
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), "Please map" + accString + " in system preferences."], 2);
                    return;
                }
            }
            if(allocationType == Wtf.landingCostAllocation.MANUAL || allocationType == Wtf.landingCostAllocation.CUSTOMDUTY){
                var amount=this.calTotalAmount()+this.findTermsTotal()+this.caltax()+this.addTermAmountInTax()+this.calCulateNonTaxableTermAmount()-this.calculateTDSAmount();
                if(amount != 0 || allocationType == Wtf.landingCostAllocation.CUSTOMDUTY){                    
                    var linelevelTaxAmount=0;
                    var globallevelTaxAmount=0;
                    if(Wtf.account.companyAccountPref.isActiveLandingCostOfItem && this.moduleid == Wtf.Acc_Vendor_Invoice_ModuleId && ! this.readOnly ){
                        globallevelTaxAmount=this.caltax();
                        var linelevelarr = this.Grid.calLineLevelTax();
                        linelevelTaxAmount= linelevelarr.length>1?linelevelarr[1]:0; //separate tax amount for landed cost
                    }
                    this.manualAllocationValue=new Wtf.account.manualAllocationTypeWindow({
                        height : 600,
                        width : 750,
                        title:WtfGlobal.getLocaleText("acc.productselection.window.title"),
                        layout : 'fit',
                        modal : true,
                        invoiceid:invoiceid,
                        parentObj:this,
                        readOnly:this.readOnly,
                        isViewTemplate:this.isViewTemplate,
                        invAmount: amount,
                        linelevelTaxAmount:linelevelTaxAmount, //separate tax amount for landed cost
                        globallevelTaxAmount:globallevelTaxAmount,
                        currencySymbol:this.symbol,
                        record:this.manualLandedCostCategory,
                        resizable : false,
                        allocationType:allocationType
                    });
                }else{
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.landedinvoicealert3")], 2);
                }
                
            }else{
                if ((Wtf.account.companyAccountPref.countryid == Wtf.CountryID.INDIA)){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.landedinvoicealert5")], 2);
                } else {
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.landedinvoicealert1")], 2);
                }
            }
        }else{
            if ((Wtf.account.companyAccountPref.countryid ==  Wtf.CountryID.INDIA) ){
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.landedinvoicealert6")], 2);
            } else {
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.landedinvoicealert2")], 2);
            }
        }
    },
    handleProductTypeForProcurment:function(){
         WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.termselgrid.amount.percentage.error")],2);
        }
});

Wtf.account.manualAllocationTypeWindow = function(config){
    Wtf.apply(this, config);
    this.currencySymbol = config.currencySymbol;
    this.invAmount=config.invAmount;
    this.invoiceid=config.parentObj?config.parentObj.invoiceList.getValue():"";
    this.typeToCalStore = new Wtf.data.SimpleStore({
        fields: ['typeid', 'name'],
        data :[[1,'Percentage'],[0,'Flat']]
    });
    
    this.percentage=new Wtf.form.TextField({
        name:'percentage',
        hiddenName:'percentage',
        id:'percentage'+this.id,
        fieldLabel :"Percentage",
        disabled:true
    });
    this.amount=new Wtf.form.TextField({
        name:'amount',
        hiddenName:'amount',
        id:'amount'+this.id,
        fieldLabel :"amount"
    });
    
    this.taxablevalueforcustomduty=new Wtf.form.TextField({
        name:'taxablevalueforcustomduty',
        hiddenName:'taxablevalueforcustomduty',
        id:'taxablevalueforcustomduty'+this.id,
        fieldLabel :"taxablevalueforcustomduty"
    });
    
    this.customdutyandothercharges=new Wtf.form.TextField({
        name:'customdutyandothercharges',
        hiddenName:'customdutyandothercharges',
        id:'customdutyandothercharges'+this.id,
        fieldLabel :"customdutyandothercharges"
    });
    
    this.taxablevalueforigst=new Wtf.form.TextField({
        name:'taxablevalueforigst',
        hiddenName:'taxablevalueforigst',
        id:'taxablevalueforigst'+this.id,
        fieldLabel :"taxablevalueforigst"
    });
    this.igstamount=new Wtf.form.TextField({
        name:'igstamount',
        hiddenName:'igstamount',
        id:'igstamount'+this.id,
        fieldLabel :"igstamount"
    });
    
    this.entityValue = "";
    if (this.allocationType == Wtf.landingCostAllocation.CUSTOMDUTY) {
        if (this.parentObj.tagsFieldset.dimensionFieldArray) {
            for (var itemcnt = 0; itemcnt < this.parentObj.tagsFieldset.dimensionFieldArray.length; itemcnt++) {
                var fieldName = this.parentObj.tagsFieldset.dimensionFieldArrayValues[itemcnt].fieldname;
                if (fieldName == "Custom_Entity") {
                    var fieldId = this.parentObj.tagsFieldset.dimensionFieldArray[itemcnt].id
                    var dimvalue = Wtf.getCmp(fieldId).lastSelectionText;
                    this.entityValue = dimvalue;
                }
            }
        }
    }
    this.typeToCal = new Wtf.form.ComboBox({
        store: this.typeToCalStore,
        name:'typeToCalStore',
        displayField:'name',
        valueField:'typeid',
        mode: 'local',
        triggerAction: 'all',
        hidden:true,
        selectOnFocus:true,
        forceSelection:true,
        value:0,
        listeners:{
                'select':{
                    fn:function(){
                        if(this.typeToCal.getValue() == 1){
                            this.amount.setDisabled(true);
                            this.percentage.setDisabled(false);                            
                        }else if(this.typeToCal.getValue() == 0){
                            this.amount.setDisabled(false);
                            this.percentage.setDisabled(true);
                        }
                    },
                    scope:this
                }
            }
    });
    
    this.rec =new Wtf.data.Record.create([
    {
        name: 'id'
    },
    {
        name: 'billid'
    },
    {
        name: 'rowid'
    },
    {
        name: 'productid'
    },

    {
        name: 'billno'
    },
    {
        name: 'amountinbase'
    },

    {
        name: 'productname'
    },

    {
        name: 'enterpercentage'
    },
    {
        name: 'originalTransactionRowid'
    },
    {
        name: 'enteramount'
    },{
        name:'hsncode'
    },{
        name:'taxablevalueforcustomduty'
    },{
        name:'customdutyandothercharges'
    },{
        name:'taxablevalueforigst'
    },{
        name:'igstrate'
    },{
        name:'producttaxclass'
    },{
        name:'igstamount'
    },{
        name:'isAsset'
    },{
        name:'assetId'
    }]);
        
    this.store =new Wtf.data.Store({
        url: 'ACCGoodsReceiptCMN/getGoodsReceiptRows.do',
        baseParams:{
          bills:this.invoiceid    
        },
        //            groupField : 'termsequence',
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        },this.rec)
    });
    this.store.on("beforeload", function (store, object) {
        if (!object.params) {
            object.params = {};
        }
        var currentBaseParams = this.store.baseParams;
        if (this.allocationType == Wtf.landingCostAllocation.CUSTOMDUTY) {
            currentBaseParams.entityValue = this.entityValue;
            currentBaseParams.allocationType = this.allocationType;
            if (this.parentObj.billDate) {
                currentBaseParams.billdate = WtfGlobal.convertToGenericDate(this.parentObj.billDate.getValue());
            }
        }
        this.store.baseParams = currentBaseParams;
    }, this);
    var currencySymbolLocal = this.currencySymbol;    
    this.cm=new Wtf.grid.ColumnModel([
        new Wtf.grid.RowNumberer(),
        {
            dataIndex: 'billid',
            width:50,
            hidden:true
        },{                
            dataIndex: 'productid',
            width:50,
            hidden:true
        },
        {
            header:WtfGlobal.getLocaleText("acc.landedcost.grid.column.invoiceid"),//"Invoice id",
            dataIndex: 'billno',
            width:150,
            hidden:false
        },{
                header:WtfGlobal.getLocaleText("acc.landedcost.grid.column.productname") + "/" + WtfGlobal.getLocaleText("acc.assetworkorder.AssetId"), //"Product Name",
            dataIndex: 'productname',
            width:150,
            hidden:false
        },{
            header:"Total Product price",//"Product Name",
            dataIndex: 'amountinbase',
            width:150,
            hidden:true,
            renderer:function(v,m,rec){  
                var symbol = (!Wtf.isEmpty(currencySymbolLocal)) ? currencySymbolLocal : WtfGlobal.getCurrencySymbol();
                v= WtfGlobal.conventInDecimal(getRoundedAmountValue(v),symbol);
                m.attr = 'wtf:qtip="'+v+'"';
                return v;
            }
        },{
            header:WtfGlobal.getLocaleText("aacc.landedcost.grid.column.percentage"),//"Enter Percentage",
            dataIndex: 'enterpercentage',
            width:150,
            editor:this.percentage,
            scope:this,
            hidden:true,
            renderer:function(v,m,rec){  
                if(v=="" &&  v < 0 && v > 100){
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.termselgrid.amount.percentage.error")],2);
                }                
//                if(v!=0){
//                    rec.data.enteramount=(v*config.invAmount)/100;
//                }else if(rec.data.enteramount!=0){
//                    v= (rec.data.enteramount/config.invAmount)*100; 
//                }
                if(v!="") {
                    v= v + "%";
                }
                return v;
            }
        },{
            header:WtfGlobal.getLocaleText("acc.landedcost.grid.column.amount"),//"Enter Amount",
            dataIndex: 'enteramount',
            width:150,
            editor:(this.readOnly||this.isViewTemplate)?"":this.amount,
            scope:this,
            hidden:(this.allocationType == Wtf.landingCostAllocation.CUSTOMDUTY),
            renderer:function(v,m,rec){
//                    if(v!=0){
//                     rec.data.enterpercentage= (v/config.invAmount)*100;  
//                    }
                    var symbol = (!Wtf.isEmpty(currencySymbolLocal)) ? currencySymbolLocal : WtfGlobal.getCurrencySymbol();
                    v= WtfGlobal.conventInDecimal(v,symbol);
                    m.attr = 'wtf:qtip="'+v+'"';
                    return v;
                }
        },{
            header:WtfGlobal.getLocaleText("acc.landedcost.customduty.hsncode"),
            dataIndex: 'hsncode',
            width:150,
            hidden:(this.allocationType != Wtf.landingCostAllocation.CUSTOMDUTY),
            hidden:false
        },{
            header:WtfGlobal.getLocaleText("acc.landedcost.customduty.taxablevalueforcustomduty"),
            dataIndex: 'taxablevalueforcustomduty',
            width:150,
            editor:(this.readOnly||this.isViewTemplate)?"":this.taxablevalueforcustomduty,
            scope:this,
            hidden: (this.allocationType != Wtf.landingCostAllocation.CUSTOMDUTY),
            renderer:function(v,m,rec){
                    var symbol = (!Wtf.isEmpty(currencySymbolLocal)) ? currencySymbolLocal : WtfGlobal.getCurrencySymbol();
                    v= WtfGlobal.conventInDecimal(v,symbol);
                    m.attr = 'wtf:qtip="'+v+'"';
                    return v;
                }
        },{
            header:WtfGlobal.getLocaleText("acc.landedcost.customduty.customdutyandothercharges"),
            dataIndex: 'customdutyandothercharges',
            width:150,
            hidden: (this.allocationType != Wtf.landingCostAllocation.CUSTOMDUTY),
            editor:(this.readOnly||this.isViewTemplate)?"":this.customdutyandothercharges,
            scope:this,
            renderer:function(v,m,rec){
                    var symbol = (!Wtf.isEmpty(currencySymbolLocal)) ? currencySymbolLocal : WtfGlobal.getCurrencySymbol();
                    v= WtfGlobal.conventInDecimal(v,symbol);
                    m.attr = 'wtf:qtip="'+v+'"';
                    return v;
                }
        },{
            header:WtfGlobal.getLocaleText("acc.landedcost.customduty.taxablevalueforigst"),
            dataIndex: 'taxablevalueforigst',
            width:150,
            editor:(this.readOnly||this.isViewTemplate)?"":this.taxablevalueforigst,
            scope:this,
            hidden: (this.allocationType != Wtf.landingCostAllocation.CUSTOMDUTY),
            renderer:function(v,m,rec){
                    var symbol = (!Wtf.isEmpty(currencySymbolLocal)) ? currencySymbolLocal : WtfGlobal.getCurrencySymbol();
                    v= WtfGlobal.conventInDecimal(v,symbol);
                    m.attr = 'wtf:qtip="'+v+'"';
                    return v;
                }
        },{
            header:WtfGlobal.getLocaleText("acc.landedcost.customduty.producttaxclass"),
            dataIndex: 'producttaxclass',
            width:150,
            hidden:(this.allocationType != Wtf.landingCostAllocation.CUSTOMDUTY),
            hidden:false
        },{
            header:WtfGlobal.getLocaleText("acc.landedcost.customduty.igstrate"),
            dataIndex: 'igstrate',
            width:150,
            hidden:(this.allocationType != Wtf.landingCostAllocation.CUSTOMDUTY),
            hidden:false
        },{
            header: WtfGlobal.getLocaleText("acc.landedcost.customduty.igstamount"),
            dataIndex: 'igstamount',
            hidden: (this.allocationType != Wtf.landingCostAllocation.CUSTOMDUTY),
            width:150,
            disabled:true,
            renderer:function(v,m,rec){
                    var symbol = (!Wtf.isEmpty(currencySymbolLocal)) ? currencySymbolLocal : WtfGlobal.getCurrencySymbol();
                    v= WtfGlobal.conventInDecimal(v,symbol);
                    m.attr = 'wtf:qtip="'+v+'"';
                    return v;
                }
        }
        ]);
    this.loadmanualLandedCostCategoryStore(this.record);    
//    this.store.load();
    this.manualLandedCostCategoryGrid=new Wtf.grid.EditorGridPanel({
        bodyStyle: 'padding:0px',
        layout:'fit',
        region:"center",
        clicksToEdit:1,
        autoScroll:true,
        store: this.store,
        emptyText:WtfGlobal.getLocaleText("acc.common.norec"),
        cm:this.cm,
        deferredRender: false,
        sm:this.sm1,
        border : false,
        height : 300,
        stripeRows :true,
        scrollable: true,
        //tbar:["Base Calculate ",this.typeToCal],
        viewConfig:{
//            forceFit:true,
            emptyText:WtfGlobal.emptyGridRenderer(WtfGlobal.getLocaleText("acc.common.norec"))
        }
    });
    this.manualLandedCostCategoryGrid.on('afteredit', this.landedCostGridAfterEdit, this);
    
    this.windowtitle = "<b>Product Landed Cost Amount : </b>" + WtfGlobal.conventInDecimal(getRoundedAmountValue(config.invAmount - (config.globallevelTaxAmount + config.linelevelTaxAmount)), currencySymbolLocal) + "<b>";
    if (this.allocationType == Wtf.landingCostAllocation.CUSTOMDUTY) {
        this.windowtitle = "<b>Entity:</b>" + this.entityValue + "";
    }
    this.manualLandedCostCategoryDetails= new Wtf.Window({
        modal: true,
        closeAction: 'hide',
        closable: false,
        id:'exciseSupplierDetails'+this.id,
        title: (this.allocationType == Wtf.landingCostAllocation.CUSTOMDUTY)?"Custom Duty Landed Cost Category":"Manual Landed Cost Category Amount",
        iconCls: getButtonIconCls(Wtf.etype.deskera),
        buttonAlign: 'right',
        autoScroll:true,
        width: 800,
        height:500,               
        scope: this,
        items: [{
            region:"north",
            height:90,
            border:false,
            bodyStyle:"background:white;border-bottom:1px solid #bfbfbf;",
            html:getTopHtml("","<div id = 'cenvatcredit'><span style='padding-left:10px'>"+this.windowtitle+"</span><div>",null,true)
        },{
            region: "center",
            bodyStyle: 'padding:10px 10px 10px 10px;',
            baseCls:'bckgroundcolor',
            items:[
            this.manualLandedCostCategoryGrid
            ]
        }],
        buttons:
        [{
            text: WtfGlobal.getLocaleText("acc.het.524"),//'Save',
            id:"manualAllocationTypeSaveBtn",
            hidden:this.viewMode, 
            scope:this,
            handler: function() {   
                            var json = [];
                            if (this.allocationType != Wtf.landingCostAllocation.CUSTOMDUTY) {
                                var amount = 0;
                                for (var l = 0; l < this.store.getCount(); l++) {
                                    amount += Number(this.store.getAt(l).data.enteramount);
                                    json.push(this.store.getAt(l).data);
                                }
                                var lineleveltax = config.linelevelTaxAmount;
                                var globalleveltax = config.globallevelTaxAmount;
                                if ((config.invAmount - (lineleveltax + globalleveltax)) != amount) {
                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), "Product Landed Cost Amount is not same with Total Enter Amount"], 2);
                                    return false;
                                }
                            } else {
                                var taxablevalueforigst = 0, igstamount = 0, customdutyandothercharges = 0, taxablevalueforcustomduty = 0;
                                for (var l = 0; l < this.store.getCount(); l++) {
                                    taxablevalueforigst += Number(this.store.getAt(l).data.taxablevalueforigst);
                                    igstamount += Number(this.store.getAt(l).data.igstamount);
                                    customdutyandothercharges += Number(this.store.getAt(l).data.customdutyandothercharges);
                                    taxablevalueforcustomduty += Number(this.store.getAt(l).data.taxablevalueforcustomduty);
                                    json.push(this.store.getAt(l).data);
                                }
                                this.parentObj.ExpenseGrid.store.removeAll();
                                
                                // Custom Duty Account
                                var rec = this.parentObj.ExpenseGrid.storeRec;
                                rec = new rec({});
                                rec.beginEdit();
                                var fields = this.parentObj.ExpenseGrid.store.fields;
                                for (var x = 0; x < fields.items.length; x++) {
                                    var value = "";
                                    rec.set(fields.get(x).name, value);
                                }
                                value = 0;
                                rec.set(fields.get('accountid').name, Wtf.CustomDutyAccount);
                                rec.set(fields.get('rate').name, customdutyandothercharges);
                                rec.set(fields.get('discountamount').name, value);
                                rec.set(fields.get('totalamount').name, value);
                                rec.set(fields.get('amount').name, value);
                                rec.set(fields.get('taxamount').name, value);
                                rec.set(fields.get('taxpercent').name, value);
                                rec.set(fields.get('prdiscount').name, value);
                                rec.set(fields.get('discountispercent').name, "1");
                                rec.set(fields.get('calamount').name, value);
                                rec.set(fields.get('typeid').name, value);
                                rec.set(fields.get('currencysymbol').name, this.symbol);
                                rec.set(fields.get('isNewRecord').name, "1");
                                rec.set(fields.get('debit').name, true);
                                rec.set(fields.get('rateIncludingGstEx').name, "0.0");
                                rec.endEdit();
                                rec.commit();
                                this.parentObj.ExpenseGrid.store.add(rec);
                                this.parentObj.ExpenseGrid.getView().refresh();
                                
                                // IGST Account
                                rec = this.parentObj.ExpenseGrid.storeRec;
                                rec = new rec({});
                                rec.beginEdit();
                                var fields = this.parentObj.ExpenseGrid.store.fields;
                                for (var x = 0; x < fields.items.length; x++) {
                                    var value = "";
                                    rec.set(fields.get(x).name, value);
                                }
                                value = 0;
                                rec.set(fields.get('accountid').name, Wtf.IGSTCustomDutyAccount);
                                rec.set(fields.get('rate').name, igstamount);
                                rec.set(fields.get('discountamount').name, value);
                                rec.set(fields.get('totalamount').name, value);
                                rec.set(fields.get('amount').name, value);
                                rec.set(fields.get('taxamount').name, value);
                                rec.set(fields.get('taxpercent').name, value);
                                rec.set(fields.get('prdiscount').name, value);
                                rec.set(fields.get('discountispercent').name, "1");
                                rec.set(fields.get('calamount').name, value);
                                rec.set(fields.get('typeid').name, value);
                                rec.set(fields.get('currencysymbol').name, this.symbol);
                                rec.set(fields.get('isNewRecord').name, "1");
                                rec.set(fields.get('debit').name, true);
                                rec.set(fields.get('rateIncludingGstEx').name, "0.0");
                                rec.endEdit();
                                rec.commit();
                                this.parentObj.ExpenseGrid.store.add(rec);
                                this.parentObj.ExpenseGrid.getView().refresh();
                                
                                this.parentObj.ExpenseGrid.addBlankRow();
                            }
                            this.parentObj.manualLandedCostCategory = JSON.stringify(json);
                            this.manualLandedCostCategoryDetails.close();
                            this.parentObj.updateSubtotal();
            }
        },{
            text: this.viewMode?WtfGlobal.getLocaleText('acc.common.close'):WtfGlobal.getLocaleText('acc.field.Cancel'),//'Cancel',
            scope:this,
            handler: function()
            {
                this.manualLandedCostCategoryDetails.close();
            }
        }]
    });
    this.manualLandedCostCategoryDetails.show();    
    Wtf.account.manualAllocationTypeWindow.superclass.constructor.call(this,config);
}
Wtf.extend(Wtf.account.manualAllocationTypeWindow,Wtf.Panel,{
    onRender:function (config){
        Wtf.account.manualAllocationTypeWindow.superclass.onRender.call(this,config); 
    },
    loadmanualLandedCostCategoryStore:function (recs){
        if(recs==""){
            this.store.load();
        }else{
            var records = eval(recs);
            if(!Wtf.isEmpty(records)){
                for (var x=0; x<records.length; x++) {
                    var rec = new this.rec(records[x]);            
                    this.store.add(rec);
                }
            }
        }
    },
        landedCostGridAfterEdit:function(obj) {
            if (obj != null && obj != undefined){
                var record = obj.record;
                if (record != null && record != undefined){
                    if (obj.field == "taxablevalueforigst" ){
                        var igstamount = obj.record.get("taxablevalueforigst") * (obj.record.get("igstrate") / 100);
                        record.set("igstamount",igstamount);
                    }
                }
            }
        }
});
