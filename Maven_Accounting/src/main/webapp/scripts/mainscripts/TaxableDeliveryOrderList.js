Wtf.account.TaxableDeliveryListPanel=function(config){
    
    this.isTaxAppliedDOs = (config.isTaxAppliedDOs)?config.isTaxAppliedDOs:false;
    
    this.GridRec = Wtf.data.Record.create ([
        {name:'billid'},
        {name:'companyid'},
        {name:'companyname'},
        {name:'journalentryid'},
        {name:'entryno'},
        {name:'billto'},
        {name:'orderamount'},
        {name:'shipto'},
        {name:'mode'},
        {name:'billno'},
        {name:'date', type:'date'},
        {name:'shipdate', type:'date'},
        {name:'personname'},
        {name:'personemail'},
        {name:'personid'},
        {name:'shipping'},
        {name:'deleted'},
        {name:'memo'},
        {name:'costcenterid'},
        {name:'costcenterName'},
        {name:'statusID'},
        {name:'shipvia'},
        {name:'fob'},
        {name:'permitNumber'},
        {name:'status'},
        {name:'isautogenerateddo'},
        {name:'invoiceno'},
        {name:'approvalstatusinfo'},
        {name:'approvalstatus'},
        {name:'withoutinventory',type:'boolean'},
        {name:'isfavourite'},
        {name:'isprinted'},
        {name:'currencysymbol'},
        {name:'currencyid'},
        {name:'amount'},
        {name:'amountinbase'},
        {name:'invoicenumber'},
        {name:'sequenceformatid'},
        {name:'lasteditedby'},
        {name:'isConsignment'},
        {name:'custWarehouse'},
        {name:'driver'}
    ]);
    
    
    this.StoreUrl = "ACCInvoiceCMN/getDeliveryOrdersMerged.do";
    
    // Reader for grid store
    
    this.gridStoreReader = new Wtf.data.KwlJsonReader({
        root: "data",
        totalProperty:'count'
    },this.GridRec);
    
    this.gridStore = new Wtf.data.Store({
        url:this.StoreUrl,
        baseParams:{
            isForTaxApplication:true,
            isTaxAppliedDOs:this.isTaxAppliedDOs
        },
        reader:this.gridStoreReader
    });
    
    this.loadMask = new Wtf.LoadMask(document.body,{
        msg : WtfGlobal.getLocaleText("acc.msgbox.50")
    });
    
    this.gridStore.on('loadexception',function(){
        var msg=WtfGlobal.getLocaleText("acc.common.msg1");//"Failed to make connection with Web Server";
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg],2);
        this.loadMask.hide();
    },this);
    
    this.gridStore.on('beforeload',function(){
        this.gridStore.baseParams.taxApplicableCalculationDate=WtfGlobal.convertToGenericDate(this.getBadDebtCalculationDate());
        this.loadMask.show();
    },this);
    
    this.gridStore.on('load',function(){
        this.loadMask.hide();
    },this);
    
    this.sm = new Wtf.grid.CheckboxSelectionModel({
        singleSelect:false
    });
    
    this.gridColumnModelArr=[];
    
    this.gridColumnModelArr.push(this.sm,{
            hidden:true,
            header: "",
            dataIndex:'billid'
        },{
            header: WtfGlobal.getLocaleText("acc.field.Company"),  
            dataIndex:'companyname',
            width:20,
            pdfwidth:150,
    //            sortable:true,
            hidden:true
        },{
            header:"Delivery Order "+WtfGlobal.getLocaleText("acc.cn.9"),
            dataIndex:'billno',
            width:150,
            pdfwidth:75,
            sortable:true,
            //renderer:(config.isQuotation||config.isOrder)?"":WtfGlobal.linkDeletedRenderer
            renderer:WtfGlobal.linkDeletedRenderer
        },{
            header:WtfGlobal.getLocaleText("acc.invoiceList.jeno"),  //"Journal Entry No",
            dataIndex:'entryno',
            hidden:true,
            width:150,
            pdfwidth:75,
            renderer:WtfGlobal.linkDeletedRenderer
        },{
            header:"Delivery Order"+" "+WtfGlobal.getLocaleText("acc.inventoryList.date"),
            dataIndex:'date',
            align:'center',
            width:150,
            pdfwidth:80,
            sortable:true,
            renderer:WtfGlobal.onlyDateDeletedRenderer
        },{
            header:WtfGlobal.getLocaleText("acc.invoiceList.shipdate"),
            dataIndex:'shipdate',
            hidden:true
        },{
            header:(config.isCustomer?WtfGlobal.getLocaleText("acc.invoiceList.cust"):WtfGlobal.getLocaleText("acc.invoiceList.ven")),  //this.businessPerson,
            width:150,
            pdfwidth:75,
            renderer:WtfGlobal.deletedRenderer,
            sortable:true,
            dataIndex:'personname'
        },{
            header:WtfGlobal.getLocaleText("acc.invoiceList.totAmt"),  // "Total Amount",
            align:'right',
            dataIndex:'amount',
            width:150,
            pdfwidth:75,
            renderer:WtfGlobal.withoutRateCurrencyDeletedSymbol,
            hidden:false//this.isOrder || !Wtf.account.companyAccountPref.unitPriceConfiguration
        },{
            header:WtfGlobal.getLocaleText("acc.invoiceList.totAmtHome") + " ("+WtfGlobal.getCurrencyName()+")",  //"Total Amount (In Home Currency)",
            align:'right',
            dataIndex:'amountinbase',
            width:150,
            pdfwidth:75,
            hidecurrency : true,
            renderer:WtfGlobal.currencyDeletedRenderer,
            hidden:false//this.isOrder || !Wtf.account.companyAccountPref.unitPriceConfiguration  //hiden column 
       },{
            header:WtfGlobal.getLocaleText("acc.field.PermitNumber"),  
            width:150,
            pdfwidth:75,
            hidden:this.isCustomer,
            renderer:WtfGlobal.deletedRenderer,
            dataIndex:'permitNumber'
        },{
            header:Wtf.account.companyAccountPref.descriptionType,  //"Memo",
            dataIndex:'memo',
            width:150,
            renderer:function(value){
                var res = "<span class='gridRow' style='width:200px;'  wtf:qtip='"+value+"'>"+Wtf.util.Format.ellipsis(value,20)+"</span>";
                return res;
            },
            pdfwidth:100
        },{
            header:WtfGlobal.getLocaleText("acc.invoiceList.status"),  //"Status",
            dataIndex:'status',
            width:150,
             hidden:true,//!this.isOrder || this.isQuotation,
             renderer:WtfGlobal.deletedRenderer,
            pdfwidth:100
        },{
             header:WtfGlobal.getLocaleText("acc.field.Approval") +WtfGlobal.getLocaleText("acc.invoiceList.status"),  //"Status",
             dataIndex:'approvalstatusinfo',
             hidden:true,
             width:150,
             pdfwidth:100
        });
        
        // Transaction Grid creation
    
    this.transactionGrid = new Wtf.grid.GridPanel({
        cm:new Wtf.grid.ColumnModel(this.gridColumnModelArr),
        store:this.gridStore,
        sm:this.sm,
        stripeRows :true,
        border:false,
        viewConfig:{
            emptyText:'<center>'+WtfGlobal.getLocaleText("acc.field.NoRecordToDisplay")+'</center>',
            forceFit:true
        }
        
    });
    this.transactionGrid.on('cellclick',this.onCellClick, this);
    
    this.objsearchComponent = new Wtf.advancedSearchComponent({
        cm: this.transactionGrid.colModel,
        moduleid: Wtf.Acc_Delivery_Order_ModuleId,
        advSearch: false,
        parentPanelSearch: this,
        ignoreDefaultFields: true,
        isAvoidRedundent: true,
        isMultiEntity: true
    });

    this.objsearchComponent.advGrid.on("filterStore", this.filterStore, this);
    this.objsearchComponent.advGrid.on("clearStoreFilter", this.clearStoreFilter, this);
    
    this.fetchBttn=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.common.fetch"),
        tooltip : WtfGlobal.getLocaleText("acc.invReport.fetchTT"),  
        //            id: 'submitRec' + this.id,
        scope: this,
        iconCls:'accountingbase fetch',
        disabled :false,
        handler:this.fetchHandler.createDelegate(this)
    });
    
    this.hiddenDate = new Wtf.form.DateField({
        fieldLabel:'',
        format:WtfGlobal.getOnlyDateFormat(),
        hideLabel:true,
        hidden:true,
        name: 'hiddenCurrentDate',
        value:Wtf.serverDate,
        width : 130
    });
    
    this.selectDate = new Wtf.form.DateField({
        fieldLabel:'Select Date',
        format:WtfGlobal.getOnlyDateFormat(),
        name: 'selectDate',
        value:Wtf.serverDate
    });
    
    this.claimButton = new Wtf.Toolbar.Button({
        text:'Apply',
        scope:this,
        hidden:this.isTaxAppliedDOs,
        iconCls :getButtonIconCls(Wtf.etype.edit), 
        tooltip:'Apply for tax to selected Delivery Orders records',
        handler:this.claimHandler.createDelegate(this)
    });
    
    this.AdvanceSearchBtn = new Wtf.Toolbar.Button({
        text: WtfGlobal.getLocaleText("acc.editor.advanceSearchBTN"), // "Advanced Search",
        scope: this,
        tooltip: WtfGlobal.getLocaleText("acc.editor.advanceSearchBTN.ttip"), // 'Search for multiple terms in multiple fields.',
        handler: this.configurAdvancedSearch,
        iconCls: "advanceSearchButton",
        hidden: !Wtf.account.companyAccountPref.isMultiEntity
    });
    
    
    var buttonArr = [];
    buttonArr.push('Select Date ',this.selectDate);
    buttonArr.push(' ',this.fetchBttn);
    buttonArr.push(this.hiddenDate);
    buttonArr.push('-',this.claimButton);
    buttonArr.push('-',this.AdvanceSearchBtn);
    
    
    // creating container panel
    
    this.transactionGridContainerPanel = new Wtf.Panel({
        layout: 'border',
        border: false,
        items:[this.objsearchComponent,
        {
            region: 'center',
            layout: 'fit',
            border: false,
            items: [this.transactionGrid],
            tbar:buttonArr,
            bbar: this.pagingToolbar = new Wtf.PagingSearchToolbar({
                pageSize: 30,
                id: "pagingtoolbar" + this.id,
                store: this.gridStore,
                searchField: this.quickPanelSearch,
                displayInfo: true,
                emptyMsg: WtfGlobal.getLocaleText("acc.common.nores"), //"No results to display",
                plugins: this.pP = new Wtf.common.pPageSize({
                    id: "pPageSize_" + this.id
                    })
            })
        }
        ]
    });
    
    this.gridStore.load();
    
    Wtf.apply(this,{
        border:false,
        layout : "fit",
        items:[this.transactionGridContainerPanel]
    }, config);
    
    Wtf.account.TaxableDeliveryListPanel.superclass.constructor.call(this,config);
    
    this.addEvents({
        'taxapplied':true
    });
}
Wtf.extend(Wtf.account.TaxableDeliveryListPanel,Wtf.Panel,{
    onRender:function(config){
        Wtf.account.TaxableDeliveryListPanel.superclass.onRender.call(this,config);
    },
    
    claimHandler:function(){
        var recArray=this.transactionGrid.getSelectionModel().getSelections();
        if(recArray.length == 0){
            WtfComMsgBox(['Information','Please select a record first.'],0);
            return;
        }
        
        //
        
        var invoiceIds = '';
        
        for(var i=0; i<recArray.length; i++){
            invoiceIds+=recArray[i].get('billid')+",";
        }
        
        var arr="";
        var recStr = "";
        
        for(var i=0; i<recArray.length; i++){
            recStr += '{\"billId\":\"'+recArray[i].get('billid')+'\",\"paidAmtAfterClaimed\":'+recArray[i].get('paidAfterClaimed')+',\"gstToRecover":'+recArray[i].get('gstclaimableamount')+'},';
        }
        
        recStr = recStr.substr(0, recStr.length-1);
        arr = '['+recStr+']';
        
        Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.je.confirm"),"Do you want to apply for tax?",function(btn){
            if(btn!="yes"){
                return;
            }
            invoiceIds = invoiceIds.substr(0, invoiceIds.length-1);
            Wtf.Ajax.timeout = 180000;
            Wtf.Ajax.requestEx({
                url:"ACCInvoice/applyForTaxToDeliveryOrders.do",
                params: {
                    invoiceData:arr,
                    filterationDate:WtfGlobal.convertToGenericDate(this.selectDate.getValue())
                }
            },this,this.genSuccessResponse,this.genFailureResponse);
        },this);
        
        
    },
    onCellClick:function(g,i,j,e){  //
        e.stopEvent();
        var el=e.getTarget("a");
        if(el==null)return;
        var header=g.getColumnModel().getDataIndex(j);
        if ( header=="billno" ) {
            var formRec = this.gridStore.getAt(i);
            var billid = formRec.data.billid;
            callViewDeliveryOrder(true,formRec,billid, false)
        }
    },
    
    genSuccessResponse:function(response, request){
        Wtf.Ajax.timeout = 30000;
        if(response.success){
            WtfComMsgBox([this.title,response.msg],response.success*2+1);
            this.fireEvent('taxapplied',this);
            this.close();
        }else {
            WtfComMsgBox([this.titlel,response.msg],response.success*2+1);
        }
    },
    
    genFailureResponse:function(response){
        Wtf.Ajax.timeout = 30000;
        var msg=WtfGlobal.getLocaleText("acc.common.msg1");//"Failed to make connection with Web Server";
        if(response.msg)msg=response.msg;
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg],2);
    },
    
    getBadDebtCalculationDate:function(){
        
        var date = this.selectDate.getValue();//new Date(this.finanyear.getValue(),this.fmonth.getValue()+1,0);
        
        if(!this.isTaxAppliedDOs)
            date = date.add(Date.DAY, -21);
        
        return date;
    },
    
    fetchHandler:function(){
        this.gridStore.load();
    },
    configurAdvancedSearch: function () {
        this.objsearchComponent.show();
        this.objsearchComponent.advGrid.advSearch = true;
        this.objsearchComponent.advGrid.getComboData();
        this.AdvanceSearchBtn.disable();
        this.doLayout();
    },
    filterStore: function (json, filterConjuctionCriteria) {
        this.searchJson = json;
        this.filterConjuctionCrit = filterConjuctionCriteria;
        this.gridStore.baseParams = {
            flag: 1,
            iscustomcolumndata: 0,
            searchJson: this.searchJson,
            moduleid: Wtf.Acc_Delivery_Order_ModuleId,
            filterConjuctionCriteria: filterConjuctionCriteria
        }
        this.gridStore.load({
            params: {
                isForTaxApplication: true,
                isTaxAppliedDOs: this.isTaxAppliedDOs,
                start: 0,
                limit: this.pP.combo.value
            }
        });
    },
    clearStoreFilter: function () {
        this.searchJson = "";
        this.filterConjuctionCrit = "";
        this.gridStore.baseParams = {
            flag: 1,
            iscustomcolumndata: 0,
            searchJson: this.searchJson,
            moduleid: Wtf.Acc_Delivery_Order_ModuleId,
            filterConjuctionCriteria: this.filterConjuctionCrit
        }
        this.gridStore.load({
            params: {
                isForTaxApplication: true,
                isTaxAppliedDOs: this.isTaxAppliedDOs,
                start: 0,
                limit: this.pP.combo.value
            }
        });
        this.objsearchComponent.hide();
        this.AdvanceSearchBtn.enable();
        this.doLayout();
    }
});