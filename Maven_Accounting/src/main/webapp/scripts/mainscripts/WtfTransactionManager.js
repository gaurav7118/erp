/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
function callSystemAdmin(){
    var panel = Wtf.getCmp("systemadmin");
    if(panel==null){
        panel = new Wtf.common.SystemAdmin({
            title : WtfGlobal.getLocaleText("acc.field.Companies"),
            layout : 'fit',
            id:'systemadmin',
            closable:true,
            iconCls:'systemadmin',
            border:false
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callSetUpWizard(){
    if(isProdBuild) {
        setupWizardScriptLoad();
    } else {
        callSetUpWizardOnScriptLoad();
    }

}

function callAccountPref(){    
   this.loadingMask = new Wtf.LoadMask(document.body, {
       msg : WtfGlobal.getLocaleText("acc.msgbox.50"),
       id:"systemconfloadingmask"
   });
   this.loadingMask.show();
   if(isProdBuild) {
       accountPrefScriptLoad(this.loadingMask);
   } else {
       callAccountPrefOnScriptLoad(this.loadingMask);
   }
}

function callCOA(searchStr, filterAppend){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.viewcoa)) {
        var panel = Wtf.getCmp("coa");
        if(panel==null){
            panel = new Wtf.TabPanel({
                id : 'coa',
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.coa.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.coa.tabTitleTT"), //'Chart of Accounts',
                closable: true,
                iconCls:'accountingbase coa',
                activeTab:0
            });
            Wtf.getCmp('as').add(panel);
            callCOAReport(searchStr, filterAppend);
            if((!WtfGlobal.EnableDisable(Wtf.UPerm.groups, Wtf.Perm.groups.view))||(!WtfGlobal.EnableDisable(Wtf.UPerm.groups, Wtf.Perm.groups.create))) {
                callGroupReport();
            }
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.setActiveTab(Wtf.getCmp('coaReport'));
        Wtf.getCmp('as').doLayout();
        
        Wtf.getCmp('coa').on('beforeclose', function() {
            var channelName=Wtf.ChannelName.AccountGroupReport;
            beforeClose(channelName);
        },this); 
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("permisionmsg.coa"));
}
function addMoreOptions(PO, PORec) {
    if (PO.store.getCount() >= 10) {
        var recordIndex = PO.store.findBy(
            function (record, id) {
            if (record.get('billid') === '-1') {
                return true; // a record with this data exists
            }
                return false; // there is no record in the store with this data
        });
        if (recordIndex == - 1 && PO.store.getCount()) {
            PO.store.insert(PO.store.getCount(), new PORec({
                billno: "<a class='moreLink' href=#>More</a>",
                billid: '-1'
            })); // created record for "More"
        }
    }
}
function callGeneralLedger_old(){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewledger)) {
        var panel = Wtf.getCmp("generalledgerreport");
        if(panel==null){
            panel = new Wtf.account.COAReport({
                id : 'generalledgerreport',
                title:WtfGlobal.getLocaleText("acc.field.GeneralLedgerReport"),
                tabTip:WtfGlobal.getLocaleText("acc.field.GeneralLedgerReport"),
                border : false,
                layout: 'fit',
                closable: true,
                iconCls:'accountingbase coa',
                isGeneralLedger:true
            });
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    } else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("erp.viewingGeneralLedger"));
}

function callGeneralLedger_old(accid,startDate,endDate,consolidateFlag,searchStr, filterAppend, searchJson,filterConjuctionCriteria,exponly){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewledger)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        if(!accid)accid="None";
        var panel = Wtf.getCmp('generalledgerreport');
        if(panel==null){
            panel = new Wtf.account.COAReport({
                id : 'generalledgerreport',
                title:WtfGlobal.getLocaleText("acc.field.GeneralLedgerReport"),
                tabTip:WtfGlobal.getLocaleText("acc.field.GeneralLedgerReport"),
                border : false,
                layout: 'fit',
                closable: true,
                iconCls:'accountingbase coa',
                isGeneralLedger:true,
                consolidateFlag:consolidateFlag,
                accountID:accid,
                stDate:startDate,
                enDate:endDate,
                exponly:exponly,
                isForBS_PL_to_GL:true,
                searchJson:(searchJson != undefined && searchJson != "")?searchJson:"",
                filterConjuctionCriteria:(filterConjuctionCriteria != undefined && filterConjuctionCriteria != "")?filterConjuctionCriteria:""
            });
            Wtf.getCmp('as').add(panel);
        }else{
            panel.showGeneralLedger(accid,startDate,endDate);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        panel.on("activate",function(panel){
            panel.doLayout();
        });
    }else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("erp.viewingGeneralLedger"));
}


function callGeneralLedger(accid,startDate,endDate,consolidateFlag,searchStr, filterAppend, searchJson,filterConjuctionCriteria,exponly){
    var i=0;
    var flag=0;
    if(Wtf.UserReporRole.URole.roleid == 1){
        var isDefaultGL = true;
        viewGroupDetailReport(searchStr, filterAppend, accid, startDate, endDate, undefined, undefined,isDefaultGL);
    }else{
       for(i=0;i<Wtf.UserReportPerm.length;i++) {
            if(Wtf.UserReportPerm[i] == 'General_Ledger_Report') {
                var isDefaultGL = true;
                viewGroupDetailReport(searchStr, filterAppend, accid, startDate, endDate, undefined, undefined,isDefaultGL);
                flag=1;
            }
        }
        if(flag==0){   
           WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("erp.viewingGeneralLedger"));
        } 
    }
}

function callCOAReport(searchStr, filterAppend){
    var panel = Wtf.getCmp("coaReport");
    if(panel==null){
        callCOA();
        panel = new Wtf.account.COAReport({
            id : 'coaReport',
            border : false,
            moduleId:Wtf.Account_Statement_ModuleId,
            layout: 'fit',
            title:WtfGlobal.getLocaleText("acc.coa.coatabTitle"),  //'   COA ',
            iconCls:'accountingbase coa',
            searchJson:searchStr,
            filterAppend:filterAppend,
            tabTip: WtfGlobal.getLocaleText("acc.field.COATabTip")
        });
        panel.on("activate",function(){
            showAdvanceSearch(panel,searchStr, filterAppend);
        });
        Wtf.getCmp('coa').add(panel);
    }
    Wtf.getCmp('coa').setActiveTab(panel);
    Wtf.getCmp('coa').doLayout();
}

function callCOAWindow(isEdit, rec, winid,issales,ispurchase,islibility,isotherexpense,cashbank,incomenature,isexpense, isCOA,groupid,accounttype,fromPaymentMethod){
    winid=(winid==null?"coaWin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.COA({
            cashbank:cashbank,
            incomenature:incomenature,
            record:rec,
            isEdit:isEdit,
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.coa.tabTitle"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.coa.tabTitleTT"),  //'Chart Of Accounts',
            id:winid,
            closable: true,
            islibility:islibility,
            isexpense:isexpense,
            isotherexpense:isotherexpense,
            ispurchase:ispurchase,
            issales:issales,
            groupId:groupid,
            accountType:accounttype,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
//            width: Wtf.account.companyAccountPref.splitOpeningBalanceAmount ? 710 : 580,
            width: 770,
            height:520,
            moduleid:Wtf.Account_Statement_ModuleId,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body,
            isCOA : isCOA,
            fromPaymentMethod:fromPaymentMethod
        }).show();
        this.loadMask1 = new Wtf.LoadMask(winid, {
            msg: WtfGlobal.getLocaleText("acc.msgbox.50"),
            msgCls: "x-mask-loading acc-customer-form-mask"
        });
        this.loadMask1.show();
        Wtf.getCmp(winid).on("loadingcomplete",function(){
            this.loadMask1.hide()
            },this);
    }


}
function callFixedAssetWindow(isEdit, rec, winid){
    winid=(winid==null?"fixedAssetWin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.COA({
            isEdit:isEdit,
            record:rec,
            isFixedAsset:true,
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.fixedAssetList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.fixedAssetList.tabTitleTT"),  //'Fixed Asset',
            id:winid,
            closable: true,
            modal: true,
            moduleid:Wtf.Account_Statement_ModuleId,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 600,
            height:650,
            autoScroll:true,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
        this.loadMask1 = new Wtf.LoadMask(winid, {
            msg: WtfGlobal.getLocaleText("acc.msgbox.50"),
            msgCls: "x-mask-loading acc-customer-form-mask"
        });
        this.loadMask1.show();
        Wtf.getCmp(winid).on("loadingcomplete",function(){
            this.loadMask1.hide()
            },this);
    }
}
function callFixedAssetRemove(winid, rec, isWriteOff){
    winid=(winid==null?"fixedAssetRemove":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.assetremove({
            record:rec,
            isWriteOff: isWriteOff,
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.fixedAssetList.removeAsset"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.fixedAssetList.removeAsset"),  //'Remove Asset',
            id:winid,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 400,
            height:350,
            resizable: false,
            //            layout: 'border',
            //            buttonAlign: 'right',
            renderTo: document.body
        }).show();
        this.loadMask1 = new Wtf.LoadMask(winid, {
            msg: WtfGlobal.getLocaleText("acc.msgbox.50"),
            msgCls: "x-mask-loading acc-customer-form-mask"
        });
        //        this.loadMask1.show();
        Wtf.getCmp(winid).on("loadingcomplete",function(){
            this.loadMask1.hide();
        },this);
    }
}

function callAssetMaintenanceScheduler(id,assetRec){
    id=(id==null)?'assetMaintenanceScheduleGrid':id;

    var panel = Wtf.getCmp(id);

    if(panel==null){
        panel = new Wtf.account.AssetMaintenanceSchedulerReport({
            id:id,
            title:assetRec.get('assetId')+" "+ WtfGlobal.getLocaleText("acc.field.AssetMaintenanceSchedulerReport"),
            tabTip:assetRec.get('assetId')+" "+ WtfGlobal.getLocaleText("acc.field.AssetMaintenanceSchedulerReport"),
            closable:true,
            assetRec:assetRec,
            layout:'border',
            iconCls :'accountingbase debitnotereport',
            border : false
        });
        Wtf.getCmp("as").add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callAssetMaintenanceSchedulerReport(id,isReport){
   if(!WtfGlobal.EnableDisable(Wtf.UPerm.fixedassetnew, Wtf.Perm.fixedassetnew.viewamaint)){
   id=(id==null)?'assetMaintenanceScheduleGridReport':id;
    var panel = Wtf.getCmp(id);

    if(panel==null){
        panel = new Wtf.account.AssetMaintenanceSchedulerReport({
            id:id,
            title:WtfGlobal.getLocaleText("acc.field.AssetMaintenanceSchedulerReport"),
            tabTip:WtfGlobal.getLocaleText("acc.field.AssetMaintenanceSchedulerReport"),
            isReport:isReport,
            closable:true,
            layout:'border',
            iconCls :'accountingbase debitnotereport',
            border : false
        });
        Wtf.getCmp("as").add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
   }
   else{
       WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.viewamaint"));
   }
}

function callAssetMaintenanceWorkOrderReport(id){
    id=(id==null)?'callAssetMaintenanceWorkOrderReportGrid':id;

    var panel = Wtf.getCmp(id);
   if(!WtfGlobal.EnableDisable(Wtf.UPerm.fixedassetnew, Wtf.Perm.fixedassetnew.viewmainworkorder)) {
    if(panel==null){
        panel = new Wtf.account.AssetMaintenanceWorkOrderReport({
            id:id,
            title:WtfGlobal.getLocaleText("acc.assetworkorder.WorkOrdertitle"),
            tabTip:WtfGlobal.getLocaleText("acc.assetworkorder.WorkOrdertitle"),
            closable:true,
            layout:'border',
            iconCls :'accountingbase debitnotereport',
            border : false
        });
        Wtf.getCmp("as").add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
   }
   else{
      WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.viewmainworkorder"));
   }
}

function callDepreciationReport(winid,accid,rec){
    winid=(winid==null?"depereationWin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        panel=new Wtf.account.COAReport({
            record:rec,
            border : false,
            accid:accid,
            isDepreciation:true,
            layout: 'fit',
            title:Wtf.util.Format.ellipsis(rec.data.accname+' '+WtfGlobal.getLocaleText("acc.fixedAssetList.depDet"),Wtf.TAB_TITLE_LENGTH),
            tabTip:rec.data.accname+' '+WtfGlobal.getLocaleText("acc.fixedAssetList.depDet"),  //Depreciation Details',
            id:winid,
            closable: true,
            iconCls :'accountingbase debitnotereport'
        });

        Wtf.getCmp("fixedAsset").add(panel);
    }
    Wtf.getCmp("fixedAsset").setActiveTab(panel);
    Wtf.getCmp("fixedAsset").doLayout();
}

function callProductType(winid){
    winid=(winid==null?"productTypeWin":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        var cm= [{
            header: WtfGlobal.getLocaleText("acc.customerList.gridName"),
            dataIndex: 'name',
            editor: new Wtf.form.TextField({
                allowBlank: false,
                maxLength:50
            })
        }];
        this.typeRec = new Wtf.data.Record.create([
        {
            name: 'id'
        },

        {
            name: 'name'
        }
        ]);
        this.typeStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },this.typeRec),
            //            url: Wtf.req.account + 'CompanyManager.jsp',
            url: "ACCProduct/getProductTypes.do",
            baseParams:{
                mode:24
            }
        });
        this.typeStore.load();
        new Wtf.account.GridUpdateWindow({
            cm:cm,
            headerImage:"../../images/accounting/Unit-of-measure.gif",
            store:this.typeStore,
            record:this.typeRec,
            autoScroll:true,
            mode:26,
            title:WtfGlobal.getLocaleText("acc.invReport.type"),
            id:winid,
            renderTo: document.body
        }).show();
    }

}

function callUOM(winid){
    winid=(winid==null?"uomReportWin":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        var cm= [{
            header: WtfGlobal.getLocaleText("acc.masterConfig.uom.gridName"),  //"Name",
            dataIndex: 'uomname',
            editor: new Wtf.form.TextField({
                allowBlank: false,
                maxLength:50,
                regex:Wtf.specialChar
            })
        },{
            header: WtfGlobal.getLocaleText("acc.masterConfig.uom.gridAllowedPrecision"),  //"Allowed Precision",
            dataIndex: 'precision',
            //            hidden:true,
            renderer:WtfGlobal.numericRenderer,
            editor: new Wtf.form.NumberField({
                allowBlank: false,
                maxLength:5
            })
        },{
            header: WtfGlobal.getLocaleText("acc.masterConfig.uom.gridType"),  //"Type",
            dataIndex: 'uomtype',
            editor: new Wtf.form.TextField({
                allowBlank: false,
                maxLength:50,
                regex:Wtf.specialChar
            })
        }];
        this.uomRec = new Wtf.data.Record.create([
        {
            name: 'uomid'
        },

        {
            name: 'uomname'
        },
        {
            name: 'defaultunitofmeasure'
        },

        {
            name: 'precision',
            type:'int'
        },

        {
            name: 'uomtype'
        }
        ]);
        this.uomStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:"count"
            },this.uomRec),
            //            url: Wtf.req.account + 'CompanyManager.jsp',
            url: "ACCUoM/getUnitOfMeasure.do",
            baseParams:{
                mode:31
            }
        });
        this.uomStore.load();
        new Wtf.account.GridUpdateWindow({
            cm:cm,
            headerImage:"../../images/accounting_image/Unit-of-measure.gif",
            store:this.uomStore,
            record:this.uomRec,
            mode:32,
            title:WtfGlobal.getLocaleText("acc.masterConfig.uom"),  //'Unit of Measure',
            id:winid,
            renderTo: document.body
        }).show();
    }

}

function callTax(winid){
    var accRec=new Wtf.data.Record.create([
    {
        name: 'accountid',
        mapping:'accid'
    },

    {
        name: 'accountname',
        mapping:'accname'
    }
    ]);
    var accStore=new Wtf.data.Store({
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        },accRec),
        //            url: Wtf.req.account+'CompanyManager.jsp',
        url : "ACCAccountCMN/getAccountsForCombo.do",
        baseParams:{
            mode:2,
            //            group:[3],
//            ignoreGLAccounts:true,
            ignoreCashAccounts:true,
            ignoreBankAccounts:true,
            //            ignoreGSTAccounts:true,
            ignorecustomers:true,
            ignorevendors:true,
            nondeleted:true,
            showGSTAndExpenseGLAccounts:true   //ERP-33428
        }
    });
    accStore.load();
    winid=(winid==null?"TaxWindow":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        var record = new Wtf.data.Record.create([
        {
            name: 'taxid'
        },

        {
            name: 'taxname'
        },

        {
            name: 'taxdescription'
        },

        {
            name: 'percent',
            type:'float'
        },

        {
            name: 'taxcode'
        },

        {
            name: 'accountid'
        },

        {
            name: 'taxtypeid'
        },

        {
            name: 'accountname'
        },

        {
            name: 'applydate',
            type:'date'
        },
        {
            name:'extrataxtypeid'
        },{
            name:'activated'
        },
        {
            name:'isInputCreditForTax'
        }
        ]);

        var store = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:"count"
            },record),
            //            url: Wtf.req.account + 'CompanyManager.jsp',
            url : "ACCTax/getTax.do",
            baseParams:{
                mode:33
            }
        });
        store.load({
            params:{
                start:0,
                limit:15
            }
        });
        accStore.on('load', function(){
            store.reload();
        }, this);

        var cmbAccount= new Wtf.form.FnComboBox({
            hiddenName:'accountid',
            store:accStore,
            valueField:'accountid',
            displayField:'accountname',
            forceSelection:true,
            mode: 'local',
            disableKeyFilter:true,
            allowBlank:false,
            triggerAction:'all',
            hirarchical:true
        //            addNewFn:function(){
        //                callCOAWindow(false, null, "coaWin",false,false,true);
        //                Wtf.getCmp("coaWin").on("update",function(){accStore.reload()},this);
        //            }
        });

        var arr = [[0,"Both"],[2,"Sales"],[1,"Purchase"]];
        this.TaxTypeStore = new Wtf.data.SimpleStore({
            fields: [{
                name:'taxtypeid',
                type:'int'
            }, 'name'],
            data :arr
        });


        this.TaxTypeCombo= new  Wtf.form.FnComboBox({
            hiddenName:'taxtypeid',
            store:this.TaxTypeStore,
            valueField:'taxtypeid',
            displayField:'name',
            forceSelection:true,
            mode: 'local',
            disableKeyFilter:true,
            allowBlank:false,
            triggerAction:'all',
            //            hirarchical:true,
            selectOnFocus:true
        });
        
        var arr1 = [[0,"ED"],[1,"VAT"],[2,"CST"],[3,"Service Tax"]];
        this.ExtraTaxTypeStore = new Wtf.data.SimpleStore({
            fields: [{
                name:'extrataxtypeid',
                type:'int'
            }, 'name'],
            data :arr1
        });


        this.ExtraTaxTypeCombo= new  Wtf.form.FnComboBox({
            hiddenName:'extrataxtypeid',
            store:this.ExtraTaxTypeStore,
            valueField:'extrataxtypeid',
            displayField:'name',
            forceSelection:true,
            mode: 'local',
            disableKeyFilter:true,
            allowBlank:false,
            triggerAction:'all',
            selectOnFocus:true
        });
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.createcoa)){

            cmbAccount.addNewFn=function(){
                callCOAWindow(false, null, "coaWin",false,false,true,false,false,false,false,false,"",1);
                Wtf.getCmp("coaWin").on("update",function(){
                    accStore.reload()
                    },this);
            }
        }
        var isActivatedStatusStore=new Wtf.data.SimpleStore({
            fields:[{name:"id"},
                    {name:"name"}],
            data:[[false,"No"],[true,"Yes"]]
        });        
        var isActivatedStatus= new Wtf.form.ComboBox({
            name:'isActivatedStatus',
            hiddenName:'isActivatedStatus',
            store:isActivatedStatusStore,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            disableKeyFilter:true,
            allowBlank:false,
            triggerAction:'all',
            forceSelection:true,
            typeAhead: true,
            value:"Yes"
        });
        
        var cm;
        
        cm= [
        {
            header:" ",
            hidden:true,
            dataIndex:'taxid'
        },
        {
            header: WtfGlobal.getLocaleText("acc.masterConfig.taxes.gridName"),  //"Name",
            dataIndex: 'taxname',
            pdfwidth:100,
            editor: new Wtf.form.TextField({
                allowBlank: false,
                maxLength:50,
                regex:Wtf.specialChar
            })
        },
        {
            header: WtfGlobal.getLocaleText("acc.masterConfig.taxes.gridDescription"),  //"Description",
            dataIndex: 'taxdescription',
            pdfwidth:150,
            editor: new Wtf.form.TextField({
                allowBlank: true,
                maxLength:1000,
                regex:Wtf.specialChar
            }),
            renderer : function(val,md,rec) {
                return "<div wtf:qtip=\""
                + val
                + "\" wtf:qtitle='"
                + "'>" + val + "</div>";
            }
        }
        ,{
            header: WtfGlobal.getLocaleText("acc.masterConfig.taxes.gridPercent"),  //"Percent",
            dataIndex: 'percent',
            pdfwidth:100,
            renderer:function(val){
                if(typeof val != "number") return "";
                return val+'%';
            },
            editor: new Wtf.form.NumberField({
                allowBlank: false,
                maxValue:100,
                allowNegative:false,
                maxLength:50
            })
        },{
            header: WtfGlobal.getLocaleText("acc.masterConfig.taxes.gridApplyDate"),  //"Apply Date",
            dataIndex: 'applydate',
            pdfwidth:75,
            align:'date',
            renderer:WtfGlobal.onlyDateRenderer,
            hidden : true, //ERP-41069
            editor:new Wtf.form.DateField({
                value: Wtf.serverDate.clearTime(true),
                name:'applydate',
                format:WtfGlobal.getOnlyDateFormat()
            })
        },{
            header: WtfGlobal.getLocaleText("acc.masterConfig.taxes.gridTaxCode"),  //"Tax Code",
            dataIndex:'taxcode',
            pdfwidth:75,
            editable:true,
            editor: new Wtf.form.TextField({
                allowBlank: false,
                maxLength:50,
                regex:Wtf.specialChar
            })
        },{
            header: WtfGlobal.getLocaleText("acc.masterConfig.taxes.gridAccountName"),  //"Account Name",
            dataIndex: 'accountid',
            pdfwidth:100,
            renderer:Wtf.comboBoxRenderer(cmbAccount),
            editor:cmbAccount
        },
        {
            header:WtfGlobal.getLocaleText("acc.coa.gridAccType"),
            dataIndex: 'taxtypeid',
            pdfwidth:100,
            renderer:Wtf.comboBoxRenderer(this.TaxTypeCombo),
            editor:this.TaxTypeCombo
        },
        {
            header:WtfGlobal.getLocaleText("acc.masterConfig.taxes.gridTaxtype"),
            dataIndex: 'extrataxtypeid',
            pdfwidth:100,
            hidden:Wtf.Countryid=="105"?false:true,
            renderer:Wtf.comboBoxRenderer(this.ExtraTaxTypeCombo),
            editor:this.ExtraTaxTypeCombo
                }
    ];
    if(Wtf.Countryid==Wtf.Country.MALAYSIA){
        cm.push({
        header: WtfGlobal.getLocaleText("acc.repeatedJE.Gridcol6"),
                dataIndex: 'activated',
                renderer:Wtf.comboBoxRendererwithClearFilter(isActivatedStatus),
                editor:isActivatedStatus
        });
    }
        new Wtf.account.TaxWindow({
            cm:cm,
            headerImage:"../../images/accounting_image/tax.gif",
            store:store,
            accStore:accStore,
            width:800,
            record:record,
            istax:true,
            sync:true,
            mode:34,
            title:WtfGlobal.getLocaleText("acc.tax.title"),  //'Taxes',
            id:winid,
            renderTo: document.body
        }).show();
    }

}

function addTemplete() {

    this.editPhotoForm = new Wtf.form.FormPanel({
        waitMsgTarget: true,
        method: 'POST',
        border: false,
        region: 'center',
        bodyStyle: "background: transparent;",
        border:false,
        style: "background: transparent;padding:20px;",
        labelWidth: 100,
        frame: false,
        fileUpload: true,
        items: [{
            xtype: 'textfield',
            fieldLabel: WtfGlobal.getLocaleText("acc.field.Selectimage*"),
            name: "logo",
            inputType: 'file',
            msgTarget: 'under',
            allowBlank:false,
            id: "imageName"
        }, {
            xtype: 'hidden',
            name: 'userid',
            value: this.uid
        }]
    });
    this.editPhotoWindow = new Wtf.Window({
        modal: true,
        iconCls :getButtonIconCls(Wtf.etype.deskera),
        title: WtfGlobal.getLocaleText("acc.masterConfig.tempLogo"),
        bodyStyle: 'padding:5px;',
        buttonAlign: 'right',
        width: 500,
        //        height: 115,
        scope: this,
        draggable:false,
        items: [{
            region: 'north',
            height: 75,
            border: false,
            bodyStyle: 'background:white;border-bottom:1px solid #bfbfbf;',
            html: getTopHtml(WtfGlobal.getLocaleText("acc.masterConfig.tempLogo"), WtfGlobal.getLocaleText("acc.template.tabTitle.msg"))
        }, {
            region: 'center',
            border: false,
            bodyStyle: 'background:#f1f1f1;font-size:10px;',
            autoScroll: true,
            items: this.editPhotoForm
        }],
        buttons: [{
            text: WtfGlobal.getLocaleText("acc.invoiceList.bt.upload"),
            scope: this,
            hidden:WtfGlobal.EnableDisable(Wtf.UPerm.miscellaneous, Wtf.Perm.miscellaneous.upload),
            handler: function(button) {
                var value = Wtf.getCmp('imageName').getValue();
                if (this.editPhotoForm.form.isValid() && value != '') {
                    this.editPhotoForm.getForm().submit({
                        url: "ACCCommon/saveTemplateImageUsers.do",
                                success: function(req, response) {
                                var resultObj = eval('(' + response.response.responseText + ')');
                                resultObj = resultObj.data
                                if (resultObj.success == true) {
                                     this.editPhotoWindow.close();
                                     WtfComMsgBox([WtfGlobal.getLocaleText("acc.masterConfig.tempLogo"), resultObj.msg], resultObj.success * 2 + 1);
                                } else{
                                     WtfComMsgBox([WtfGlobal.getLocaleText("acc.masterConfig.tempLogo"), resultObj.msg], 2);
                                }

                                },
                        scope: this,
                        failure: function() {
                            alert(WtfGlobal.getLocaleText("acc.field.Templateimageuploadfailed!"));
                        }
                    })
                }else {
                    return false;
                }
            }
        }, {
            text: WtfGlobal.getLocaleText("acc.common.cancelBtn"),
            scope: this,
            handler: function() {
                this.editPhotoWindow.close();
            }
        }]
    });

    this.editPhotoWindow.show();


}
function addImageBackgroundToDash() {

    this.editPhotoForm = new Wtf.form.FormPanel({
        waitMsgTarget: true,
        method: 'POST',
        border: false,
        region: 'center',
        bodyStyle: "background: transparent;",
        style: "background: transparent;padding:20px;",
        labelWidth: 100,
        frame: false,
        fileUpload: true,
        items: [{
            xtype: 'textfield',
            fieldLabel: WtfGlobal.getLocaleText("acc.field.Selectimage*"),
            name: "logo",
            inputType: 'file',
            allowBlank:false,
            id: "imageName"
        }, {
            xtype: 'hidden',
            name: 'userid',
            value: this.uid
        }]
    });
    this.editPhotoWindow = new Wtf.Window({
        modal: true,
        iconCls :getButtonIconCls(Wtf.etype.deskera),
        title: WtfGlobal.getLocaleText("acc.field.DashBackImage"),
        bodyStyle: 'padding:5px;',
        buttonAlign: 'right',
        width: 500,
        //        height: 115,
        scope: this,
        items: [{
            region: 'north',
            height: 75,
            border: false,
            bodyStyle: 'background:white;border-bottom:1px solid #bfbfbf;',
            html: getTopHtml(WtfGlobal.getLocaleText("acc.field.DashBackImage"), WtfGlobal.getLocaleText("acc.field.DashBackImage.msg"))
        }, {
            region: 'center',
            border: false,
            bodyStyle: 'background:#f1f1f1;font-size:10px;',
            items: this.editPhotoForm
        }],
        buttons: [{
            text: WtfGlobal.getLocaleText("acc.uploadbtn"),
            scope: this,
            handler: function(button) {
                var value = Wtf.getCmp('imageName').getValue();
                if (this.editPhotoForm.form.isValid() && value != '') {
                    this.editPhotoForm.getForm().submit({
                        url: "ACCCommon/saveDashboardImage.do",
                        success: function(req,response) {
                            var resultObj = eval('('+response.response.responseText+')');
                            resultObj=resultObj.data
                            if (resultObj.success == true) {
                                this.editPhotoWindow.close();
                            }
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.field.DashBackImage"), resultObj.msg], resultObj.success * 2 + 1);

                        },
                        scope: this,
                        failure: function() {
                            alert(WtfGlobal.getLocaleText("acc.field.DashBackImage.msg.failure"));
                        }
                    })
                }else {
                    return false;
                }
            }
        }, {
            text: WtfGlobal.getLocaleText("acc.CANCELBUTTON"),
            scope: this,
            handler: function() {
                this.editPhotoWindow.close();
            }
        }]
    });

    this.editPhotoWindow.show();

}


function addPDFFooter() {
    var id1,id2,id3,id4,id5,id6,id7,id8,id9,id10,id11,id12,id13,id14,id15,id16;
    id1=Wtf.Acc_Invoice_ModuleId;
    id2=Wtf.Acc_Cash_Sales_ModuleId ;
    id3=Wtf.Acc_Vendor_Invoice_ModuleId ;
    id4=Wtf.Acc_Cash_Purchase_ModuleId ;
    id5=Wtf.Acc_Debit_Note_ModuleId ;
    id6=Wtf.Acc_Credit_Note_ModuleId ;
    id7=Wtf.Acc_Make_Payment_ModuleId ;
    id8=Wtf.Acc_Receive_Payment_ModuleId ;
    id9=Wtf.Acc_Purchase_Order_ModuleId ;
    id10=Wtf.Acc_Sales_Order_ModuleId ;
    id11=Wtf.Acc_Customer_Quotation_ModuleId ;
    id12=Wtf.Acc_Vendor_Quotation_ModuleId ;
    id13=Wtf.Acc_Delivery_Order_ModuleId ;
    id14=Wtf.Acc_Goods_Receipt_ModuleId ;
    id15=Wtf.Acc_Sales_Return_ModuleId ;
    id16=Wtf.Acc_Purchase_Return_ModuleId ;

    this.moduleStore=new Wtf.data.SimpleStore({
        fields:[{
            name:"id"
        },{
            name:"name"
        }],
        data:[[id1,"Sales Invoice"],[id2,"Cash Sales"],[id3,"Purchase Invoice"],[id4,"Cash Purchase"],[id5,"Debit Note"],[id6,"Credit Note"],
        [id7,"Make Payment"],[id8,"Receive Payment"],[id9,"Purchase Order"],[id10,"Sales Order"],[id11,"Customer Quotation"],[id12,"Vendor Quotation"],
        [id13,"Delivery order"],[id14,"Goods Receipt"],[id15,"Sales Return"],[id16,"Purchase Return"]],
        sortInfo:{
            field:'name',
            direction:"ASC"
        }
    });

    this.moduleType= new Wtf.form.ComboBox({
        fieldLabel:WtfGlobal.getLocaleText("acc.field.SelectaModule")+' *',
        name:'module',
        hiddenName:'module',
        store:this.moduleStore,
        valueField:'id',
        displayField:'name',
        mode: 'local',
        disableKeyFilter:true,
        allowBlank:false,
        triggerAction:'all',
        forceSelection:true,
        typeAhead: true,
        width:200,
        emptyText:WtfGlobal.getLocaleText("acc.field.SelectaModule")
    });
    this.moduleType.on('select',this.getPDFConfig,this)
    this.header=new Wtf.form.TextArea({
        xtype: 'textarea',
        fieldLabel: WtfGlobal.getLocaleText("acc.field.Add/UpdatePDFHeader"),
        name: "pdfheader",
        maxLength:250,
        msgTarget: 'under',
        id: "pdfheaderid",
        width:200
    });
    this.pretext=new Wtf.form.TextArea({
        xtype: 'textarea',
        fieldLabel: WtfGlobal.getLocaleText("acc.field.Add/UpdatePDFPreText"),
        name: "pdfpretext",
        msgTarget: 'under',
        id: "pdfpretextid",
        width:200
    });
    this.posttext=new Wtf.form.TextArea({
        type: 'textarea',
        fieldLabel: WtfGlobal.getLocaleText("acc.field.Add/UpdatePDFPostText"),
        name: "pdfposttext",
        msgTarget: 'under',
        id: "pdfposttextid",
        width:200
    });
    this.footer=new Wtf.form.TextArea({
        xtype: 'textarea',
        fieldLabel: WtfGlobal.getLocaleText("acc.field.Add/UpdatePDFFooter"),
        name: "pdffooter",
        maxLength:250,
        msgTarget: 'under',
        id: "pdffooterid",
        width:200
    });
    this.editPDFForm = new Wtf.form.FormPanel({
        waitMsgTarget: true,
        border: false,
        region: 'center',
        bodyStyle: "background: transparent;",
        style: "background: transparent;padding:20px;",
        labelWidth: 150,
        frame: false,
        items: [this.moduleType, this.header,this.pretext,this.posttext, this.footer]
    });
    this.editPDFWindow = new Wtf.Window({
        modal: true,
        iconCls :getButtonIconCls(Wtf.etype.deskera),
        title: WtfGlobal.getLocaleText("acc.masterConfig.pdffooterheader"),
        bodyStyle: 'padding:5px;',
        buttonAlign: 'right',
        width: 450,
        //        height: 115,
        scope: this,
        draggable:false,
        items: [{
            region: 'north',
            height: 90,
            border: false,
            bodyStyle: 'background:white;border-bottom:1px solid #bfbfbf;',
            html: getTopHtml(WtfGlobal.getLocaleText("acc.masterConfig.pdffooterheader"), WtfGlobal.getLocaleText("acc.masterConfig.pdffooterheaderdesc"))
        }, {
            region: 'center',
            border: false,
            bodyStyle: 'background:#f1f1f1;font-size:10px;',
            autoScroll: true,
            items: this.editPDFForm
        }],
        buttons: [{
            text: WtfGlobal.getLocaleText("acc.common.update"),
            scope: this,
            hidden:WtfGlobal.EnableDisable(Wtf.UPerm.miscellaneous, Wtf.Perm.miscellaneous.update),
            handler: function(button) {
                if (this.editPDFForm.form.isValid()) {
                    Wtf.Ajax.requestEx({
                        url: "ACCCommon/setPDFTemplate.do",
                        params:{
                            pdfheader:this.header.getValue(),
                            pdfpretext:this.pretext.getValue(),
                            pdfposttext:this.posttext.getValue(),
                            pdffooter:this.footer.getValue(),
                            module:this.moduleType.getValue(),
                            modulename:this.moduleType.lastSelectionText
                        }
                    },this, function(resp){
                        if(resp.success == true) {
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.success"), WtfGlobal.getLocaleText("acc.field.PDFTemplateinformationupdatedsuccessfully")], 0);
                            this.moduleType.clearValue();
                            this.header.reset();
                            this.footer.reset();
                            this.pretext.reset();
                            this.posttext.reset();
                        }else if(resp.success==false){
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.field.Failure"), resp.msg], 1);
                        }
                    },function(resp){
                        });
                }else{
                    return false;
                }
            }
        },{
            text: WtfGlobal.getLocaleText("acc.common.cancelBtn"),
            scope: this,
            handler: function() {
                this.editPDFWindow.close();
            }
        }]
    });

    this.editPDFWindow.show();
}
function getPDFConfig(){
    Wtf.Ajax.requestEx({
        url: "ACCCommon/getPDFTemplateRow.do",
        params:{
            module:this.moduleType.getValue()
        }
    }, this, function(response) {
        if (response.success) {
            this.footer.setValue(response.footer);
            this.posttext.setValue(response.posttext);
            this.pretext.setValue(response.pretext);
            this.header.setValue(response.header);
        }
    },
    function(response) {
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.ErroroccurredwhileupdatingPDFTempalte")],2);
    });
}




function callCostCenter(winid){
    winid=(winid==null?"CostCenterWin":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        var cm= [{
            header: WtfGlobal.getLocaleText("acc.masterConfig.costCenter.grid"),  //"Cost Center ID*",
            dataIndex: 'ccid',
            editor: new Wtf.form.ExtendedTextField({
                allowBlank: false,
                maxLength:50
            })
        },{
            header: WtfGlobal.getLocaleText("acc.masterConfig.costCenter.name"),  //"Name*",
            dataIndex: 'name',
            editor: new Wtf.form.ExtendedTextField({
                allowBlank: false,
                maxLength:50,
                regex:Wtf.specialChar
            })
        },{
            header: WtfGlobal.getLocaleText("acc.masterConfig.costCenter.desc1"),  //"Description*",
            dataIndex: 'description',
            editor: new Wtf.form.ExtendedTextField({
                maxLength:200
            })
        }];
        this.ccRec = new Wtf.data.Record.create([
        {
            name: 'id'
        },

        {
            name: 'ccid'
        },

        {
            name: 'name'
        },

        {
            name: 'description'
        }
        ]);
        this.ccStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty: 'count'
            },this.ccRec),
            url: "CostCenter/getCostCenter.do"
        });
//        this.ccStore.load();
        this.ccStore.load({
            params: {
                start: 0,
                limit: 15
            }
        });        
        new Wtf.account.GridUpdateWindow({
            cm:cm,
            headerImage:"../../images/accounting_image/Unit-of-measure.gif",
            store:this.ccStore,
            record:this.ccRec,
            mode:82,
            addDeleteCol: false,
            title:WtfGlobal.getLocaleText("acc.common.costCenter"),  //'Cost Center',
            id:winid,
            renderTo: document.body,
            addDeleteCol: true
        }).show();
    }
}

function callAddTemplateUnit(moduleid) {

    var UnitName = new Wtf.form.TextField({
        fieldLabel: WtfGlobal.getLocaleText("acc.field.india.exciseUnitName"), //"Excise Unit Name",
        name: "UnitName",
        width: 200,
        maxLength: 100
    });
    var registrationTypeCombo = new Wtf.form.ComboBox({
        fieldLabel: WtfGlobal.getLocaleText("acc.field.india.registrationtype"),
        store: Wtf.registrationTypeStore,
        name: 'registrationType',
        id: 'registrationType' + this.id,
        listWidth: 100,
        hiddenName: 'registrationType',
        valueField: 'id',
        mode: 'local',
        displayField: 'name',
        forceSelection: true,
        triggerAction: 'all',
        selectOnFocus: true
    });
    var ECCNo = new Wtf.form.TextField({
        fieldLabel: WtfGlobal.getLocaleText("acc.field.Companyecc"), // "Customer ECC" 
        name: "ECCNo",
        maxLength: 15,
        width: 200,
        invalidText: 'Alphabets and numbers only',
        vtype: "alphanum"
    });
    var storeRec = new Wtf.data.Record.create([
    {
        name:'id', 
        mapping:'store_id'
    },
    {
        name:'name', 
        mapping:'fullname'
    }]
    );
    var Stores=new Wtf.data.Store({
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        },storeRec),
        url:"INVStore/getStoreList.do?isForAvailableWarehouse=true"
    });

    var storesRecord = Wtf.data.Record.create([
            {
                name: 'store_id'
            },

            {
                name: 'description'
            },

            {
                name: 'code'
            },

            {
                name: 'abbr'
            },

            {
                name: 'address'
            },

            {
                name: 'lastday'
            },

            {
                name: 'storeMan'
            },

            {
                name: 'storetypename'
            },

            {
                name: 'storetypeid'
            },

            {
                name: 'ManagerId'
            },

            {
                name: 'roleid'
            },

            {
                name: 'ccdateallow'
            },

            {
                name:'actstatus'
            },

            {
                name:'smccallow'
            },

            {
                name:'locationid'
            },

            {
                name:'locationname'
            },

            {
                name:'contact'
            },

            {
                name:'fax'
            },

            {
                name:'mappedLocations'
            },
            {
                name:'userids'
            },
            {
                name:'users'
            },
            {
                name:'executives'
            },
            {
                name:'executiveids'
            },
            {
                name:'defaultlocation'
            },
            {
                name:'defaultlocationid'
            },
            {
                name:'movementtype'
            },
            {
                name:'vattinnumber'
            },

            {
                name:'csttinnumber'
            }

            ]);
    var storesds = new Wtf.data.GroupingStore({
                url:  'INVStore/getStoreList.do',
                reader: new Wtf.data.KwlJsonReader({
                    totalProperty: 'count',
                    root:'data'
                }, storesRecord)
        });
    var wareHouseEditor = new Wtf.form.FnComboBox({
        addNewFn:function(){
            var win=new Wtf.exchangeRecordsGrid({
                title: WtfGlobal.getLocaleText("acc.common.addStore"),
                floating: true,
                closable : true,
                id:'StoreformIdAdd'+this.id,
                modal: true,
                autoShow: true,
                iconCls: 'win',
                storerec: undefined,
                width: 420,
                action: "Add",
                orderStore: storesds,
                stores:Stores,
                height: 470,
                layout: 'fit',
                createFlag: true,
                resizable: false,
                autoScroll:true,
                mode:'remote',
                parentStore:storesds,  //dummy added to avoid js error
                hideParentCmb:true
            }).show();
        },
        triggerAction: 'all',
        mode: 'local',
        fieldLabel: "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.field.availableWarehouse") + "'>" + WtfGlobal.getLocaleText("acc.field.availableWarehouse") + "</span>", //WtfGlobal.getLocaleText("acc.field.DefaultWarehouse"),
        valueField: 'id',
        displayField: 'name',
        store: Stores,
        typeAhead: true,
        forceSelection: true,
        name: 'warehouse',
        hiddenName: 'warehouse'

    });
    Stores.load();
    var moduleUnitdetailsPanel = new Wtf.form.FormPanel({
        border: false,
        autoHeight:true,
        autoWidth:true,
        bodyStyle: 'background:#f1f1f1;font-size:10px;padding:10px',
        items: [ UnitName, ECCNo, registrationTypeCombo,  wareHouseEditor]
    });
    var moduleUnitdetailsWindow = new Wtf.Window({
        modal: true,
        iconCls: getButtonIconCls(Wtf.etype.deskera),
        title: WtfGlobal.getLocaleText("acc.lp.companyunitlayout"),
        width: 380,
        height: 240,
        scope: this,
        draggable: false,
        items: [moduleUnitdetailsPanel],
        buttons: [{
                text: WtfGlobal.getLocaleText("acc.common.saveBtn"),
                scope: this,
                handler: function (button) {
                    if (UnitName.getValue() == "") {
                        UnitName.markInvalid();
                        return;
                    }
                    if (ECCNo.getValue() == "") {
                        ECCNo.markInvalid();
                        return;
                    }
                    if (registrationTypeCombo.getValue() == "") {
                        registrationTypeCombo.markInvalid();
                        return;
                    }
                    if (wareHouseEditor.getValue() == "") {
                        wareHouseEditor.markInvalid();
                        return;
                    }

                    Wtf.Ajax.requestEx({
                        url: "ACCInvoice/saveModuleUnit.do",
                        params: {
                            registrationtype: registrationTypeCombo.getValue(),
                            eccnumber: ECCNo.getValue(),
                            unitname: UnitName.getValue(),
                            warehouseid: wareHouseEditor.getValue()
                        }
                    }, this, function (res, req) {
                         if (res.success){
                             Wtf.FormUnitStore.load({
                                 params: {
                                     excludeUsedExciseUnits : true
                                 }
                             });
                             moduleUnitdetailsWindow.close();
                         }F
                    }, function (res, req) {
                    });
                }
            },{
                text: WtfGlobal.getLocaleText("acc.common.cancelBtn"),
                scope: this,
                handler: function () {
                    moduleUnitdetailsWindow.close();
                }
            }]
    });
    moduleUnitdetailsWindow.show();
}

function genSuccessResponseStat(response){
    Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.success"), response.msg, function(){
        }, this);
}
function genFailureResponseStat(response){
    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.Erroroccurredwhileupdatingstatus")],2);
}
function callCreditTerm(winid){
    winid=(winid==null?"creditTermReportWin":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        var cm=[{
            header: WtfGlobal.getLocaleText("acc.masterConfig.payTerm.gridTermName"),  //"Term Name",
            dataIndex: 'termname',
            editor:new Wtf.form.TextField({
                allowBlank:false,
                maxLength:50,
                validator:Wtf.ValidateAssetId
            })
        },{
            header: WtfGlobal.getLocaleText("acc.masterConfig.payTerm.gridTermDays"),  //"Term Days",
            dataIndex: 'termdays',
            renderer: function(value){
                if(typeof value != "number") return value;
                if(value<=1)
                    value=value+" Day";
                else
                    value=value+" Days";
                return value;
            },
            editor:new Wtf.form.NumberField({
                allowBlank:false,
                allowNegative:false,
                maxValue:365
            })
        }
        ];
        if (CompanyPreferenceChecks.discountOnPaymentTerms()){
            this.discountmasterRec = new Wtf.data.Record.create([
            {
               name: 'discountid'
            }, {
                name: 'discountname'
            }, {
                name: 'discountdescription'
            }, {
                name: 'discounttype'
            }, {
                name:'discountvalue'
            }, {
                name:'discountaccount'
            }
        ]);
            this.discountMasterStore = new Wtf.data.Store({
                reader: new Wtf.data.KwlJsonReader({
                    root: "data",
                    totalProperty: "count"
                }, this.discountmasterRec),
                    url : "AccDiscountController/getDiscountMaster.do",
                    baseParams:{
                        companyid:companyid
                    }
            });
            this.discountMasterStore.load();
            
            this.discountMasterCombo = new Wtf.form.ComboBox({
                forceSelection: true,
                mode: 'local',
                store: this.discountMasterStore,
                valueField: 'discountid',
                displayField: 'discountname',
                editable: true,
                triggerAction: 'all',
                scope: this
            });
            
            this.applicableDays=new Wtf.form.NumberField({
               allowBlank : true,
               allowDecimals:false,
               allowNegative:false,
               maxLength:3,
               maxLengthText:WtfGlobal.getLocaleText("acc.paymentterm.applicabledayserrormsg")
            });
            this.applicableDays.on('click',function(){
                
            },this);
            cm.push({
                header: WtfGlobal.getLocaleText("acc.paymentterm.discountname"),        //"Discount Name"
                width:65,
                align:'center',
                dataIndex:'discountname',
                editor:this.discountMasterCombo,
                renderer:Wtf.comboBoxRenderer(this.discountMasterCombo)
            },{
                header: WtfGlobal.getLocaleText("acc.paymentterm.applicabledays"),        //"Applicable Days"
                width:65,
                align:'center',
                dataIndex:'applicabledays',
                editor:this.applicableDays,
                renderer:function(v,m,rec){
                    if(v==-1){
                        v="";
                        rec.data.applicabledays="";
                    }
                    return v;
                }
            });
        }
        
        cm.push(this.CheckBoxColumn = new Wtf.grid.CheckColumnCreditTerm({
            header: WtfGlobal.getLocaleText("acc.field.SetDefult"),  //"Is Default",
            align:'center',
            dataIndex: 'isdefaultcreditterm',
            width: 40
        })
        ,{
            header: WtfGlobal.getLocaleText("acc.invoice.lineItemSequence"),//"Sequence",
            width:65,
            align:'center',
            dataIndex:'srno',
            //            name:'srno',
            renderer: Wtf.applySequenceRenderer
        });
        
        this.termRec = new Wtf.data.Record.create([
        {
            name: 'termid'
        },

        {
            name: 'termname'
        },

        {
            name: 'termdays'
        },

        {
            name: 'isdefaultcreditterm'
        },
        {
            name: 'srno', 
            isForSequence:true
        },{
            name: 'discountname'
        },{
            name: 'applicabledays'
        }
        ]);

        this.termds = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:"count"  //ERP-13661 [SJ]
            },this.termRec),
            //        url: Wtf.req.account + 'CompanyManager.jsp',
            url : "ACCTerm/getTerm.do",
            sortInfo:{
                field:'srno',
                direction:'ASC'
            },
            baseParams:{
                mode:91
            }
        });
        this.termds.load();
        new Wtf.account.GridUpdateWindow({
            mode:92,
            store:this.termds,
            headerImage:"../../images/accounting_image/Credit-Term.gif",
            record:Wtf.termRec,
            cm:cm,
            title:WtfGlobal.getLocaleText("acc.masterConfig.payTerm.details"),  //'Term Details',
            note:"<br><b>Note: </b> "+WtfGlobal.getLocaleText("acc.payTerm.asCreditTermandDebitTerm"),
            hidebbarinpayterms:true,//hide paging tool bar in paymemt terms window
            id:winid,
            renderTo: document.body,
            gridPlugins:[this.CheckBoxColumn]
        }).show();
    }

}

function callPackageWindow(){
    var winid="packagewindow";
    if(winid){
        var cm=[{
            header: WtfGlobal.getLocaleText("erp.package.PackageName"), //"Package Name",
            dataIndex: 'packagename',
            editor:new Wtf.form.TextField({
                allowBlank:false,
                maxLength:50,
                regex:Wtf.specialChar
                })
        },{
            header: WtfGlobal.getLocaleText("erp.Measurement.lbh"),  //"Measurement",
            dataIndex: 'measurement',
            editor:new Wtf.form.TextField({
                allowBlank:false,
                maxLength:50,
                regex:Wtf.specialChar
                })
        },{
            header: WtfGlobal.getLocaleText("erp.PackageWeightinKg"),  //"Package Weight",
            dataIndex: 'packageweight',
            editor:new Wtf.form.NumberField({
                allowBlank:false,
                allowNegative:false,
                maxValue:365
            })
        }];
        Wtf.packageRec = new Wtf.data.Record.create([
        {
            name: 'packageid'
        },

        {
            name: 'packagename'
        },

        {
            name: 'measurement'
        },

        {
            name: 'packageweight'
        }
        ]);
        
        Wtf.packageStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty: "count" 
            },Wtf.packageRec),
            url : "ACCMaster/getPackages.do",
            baseParams:{
                mode:100
            }
        });       
        
        Wtf.packageStore.load();
        new Wtf.account.GridUpdateWindow({
            mode:100,
            store:Wtf.packageStore,
            headerImage:"../../images/accounting_image/Credit-Term.gif",
            record:Wtf.packageRec ,
            cm:cm,
            title:WtfGlobal.getLocaleText("erp.PackageDetails"),  //'Package Details',
            id:winid,
            renderTo: document.body
        }).show();
    }
}

function saveCustomizedAgedDuration(winid, previousViewedDurComboStore){
    winid=(winid==null?"customizedAgedDurationWin":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        var cm=[{
            header: WtfGlobal.getLocaleText("acc.range.from.header"),
            dataIndex: 'fromDuration',
            editor:new Wtf.form.NumberField({
                allowBlank:false,
                allowNegative:false,
                allowDecimals:false,
                maxLength:4
            }),
            renderer: function(value){
                if(typeof value != "number") return value;
                if(value<=1)
                    value=value+" Day";
                else
                    value=value+" Days";
                return value;
            }
        },{
            header: WtfGlobal.getLocaleText("acc.range.to.header"),
            dataIndex: 'toDuration',
            editor:new Wtf.form.NumberField({
                allowBlank:false,
                allowNegative:false,
                allowDecimals:false,
                maxLength:4
            }),
            renderer: function(value){
                if(typeof value != "number") return value;
                if(value<=1)
                    value=value+" Day";
                else
                    value=value+" Days";
                return value;
            }
        }];
        this.agedSummaryRec = new Wtf.data.Record.create([
        {
            name: 'id'
        },

        {
            name: 'fromDuration'
        },

        {
            name: 'toDuration'
        }
        ]);

        this.agedSummaryDs = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },this.agedSummaryRec),
            url : 'ACCInvoiceCMN/getCustomizedAgedDuration.do',
            baseParams:{
                forMasterConfig : true
            }
        });
        this.agedSummaryDs.load();
        new Wtf.account.GridUpdateWindow({
            mode:97,
            comboStore : previousViewedDurComboStore,
            store:this.agedSummaryDs,
            headerImage:"../../images/accounting_image/calendar.jpg",
            record:this.agedSummaryRec,
            cm:cm,
            title:WtfGlobal.getLocaleText("acc.summary.aged.interval.customize"),
            id:winid,
            renderTo: document.body
        }).show();
    }

}

function saveWIPAndCPAccountSettings(winid){
    if(!Wtf.isPMSync) {
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),WtfGlobal.getLocaleText("acc.WIP/CPAcannotperformaction")],3);
        return;
    }
    winid=(winid==null?"saveWIPAndCPAccountSettingswin":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        new Wtf.account.WIPCPAccountSettingsWindow({
            title:WtfGlobal.getLocaleText("acc.field.WIP/CPAccountsettings"),
            id:winid,
            width:450,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            //            height:500,
            modal:true
        }).show();
    }

}
function syncAllFromLMS(winid){
    winid=(winid==null?"saveWIPAndCPAccountSettingswin":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        new Wtf.account.SyncAllFromLMSWindow({
            title: WtfGlobal.getLocaleText("acc.field.SyncAllFromLMSWin"),
            resizable: false,
            width: 350,
            height: 205,
            modal: true,
            layout: 'fit',
            scope: this
        }).show();
    }

}

function templates(winid){
    this.templateWin = new Wtf.account.moduleTemplatesWindow();
    this.templateWin.doLayout();
    this.templateWin.show();
}

function getChequeLayout(){
    Wtf.Ajax.requestEx({
        url: "ACCPaymentMethods/getChequeLayout.do",
        params:{
            bankid:this.pmtMethod.getValue()
        }
    }, this, function(response) {
        if (response.success && response.data.length>0 ) {
            this.dateLeft.setValue(response.data[0].dateLeft);
            this.nameLeft.setValue(response.data[0].nameLeft);
            this.amtinwordLeft.setValue(response.data[0].amtinwordLeft);
            this.amtinwordLeftLine2.setValue(response.data[0].amtinwordLeftLine2);
            this.amtLeft.setValue(response.data[0].amtLeft);
            this.dateTop.setValue(response.data[0].dateTop);
            this.nameTop.setValue(response.data[0].nameTop);
            this.amtinwordTop.setValue(response.data[0].amtinwordTop);
            this.amtinwordTopLine2.setValue(response.data[0].amtinwordTopLine2);
            this.appendcharacter.setValue(response.data[0].appendcharacter);
            this.dfCmb.setValue(response.data[0].dateformat);
            this.addCharacterInCheckDate.setValue(response.data[0].addCharacterInCheckDate);
            this.amtTop.setValue(response.data[0].amtTop);
            /*
             * Set Value to Other fields in Edit case
             */
            if(response.data[0].activateExtraFields){
             this.extraChequeFields.expand(true);
            }
            this.memoLeft.setValue(response.data[0].memoLeft);
            this.memoTop.setValue(response.data[0].memoTop);
            this.addressLine1Left.setValue(response.data[0].addressLine1Left);
            this.addressLine1Top.setValue(response.data[0].addressLine1Top);
            this.addressLine2Left.setValue(response.data[0].addressLine2Left);
            this.addressLine2Top.setValue(response.data[0].addressLine2Top);
            this.addressLine3Left.setValue(response.data[0].addressLine3Left);
            this.addressLine3Top.setValue(response.data[0].addressLine3Top);
            this.addressLine4Left.setValue(response.data[0].addressLine4Left);
            this.addressLine4Top.setValue(response.data[0].addressLine4Top);
            
            this.selectFontSizeForMemoTxt.setValue(response.data[0].selectFontSizeForMemoTxt);
            this.selectFontSizeForAddressLine1Txt.setValue(response.data[0].selectFontSizeForAddressLine1Txt);
            this.selectFontSizeForAddressLine2Txt.setValue(response.data[0].selectFontSizeForAddressLine2Txt);
            this.selectFontSizeForAddressLine3Txt.setValue(response.data[0].selectFontSizeForAddressLine3Txt);
            this.selectFontSizeForAddressLine4Txt.setValue(response.data[0].selectFontSizeForAddressLine4Txt);
            
            this.selectedFontStyle.setValue(response.data[0].fontStyle);
            this.selectFontSizeForDateCombo.setValue(response.data[0].dateFontSize);
            this.selectFontSizeForNameCombo.setValue(response.data[0].nameFontSize);
            this.selectFontSizeForAmountInWords1Combo.setValue(response.data[0].amountInWordsFontSize);
            this.selectFontSizeForAmountCombo.setValue(response.data[0].amountFontSize);
        }
    },
    function(response) {
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.Error")],2);
    });
}

function chequeLayoutSetup(winid){
    this.pmtRec = new Wtf.data.Record.create([
    {
        name: 'methodid'
    },

    {
        name: 'methodname'
    },

    {
        name: 'accountid'
    },

    {
        name: 'acccurrency'
    },

    {
        name: 'accountname'
    },

    {
        name: 'isdefault'
    },

    {
        name: 'detailtype',
        type:'int'
    },

    {
        name: 'acccustminbudget'
    }
    ]);
    this.pmtStore = new Wtf.data.Store({
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        },this.pmtRec),
        url : "ACCPaymentMethods/getPaymentMethods.do",
        baseParams:{
            paymentAccountType:2
        }
    });

    this.pmtStore.load({
        params:{
            grouper:'paymentTrans'
        }
    });

this.pmtMethod= new Wtf.form.ComboBox({
    fieldLabel:WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectMethod"),
    name:"pmtmethod",
    store:this.pmtStore,
    id:"paymentMethod"+this.id,
    valueField:'methodid',
    displayField:'methodname',
    allowBlank:false,
    emptyText:WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectMethod"),
    anchor:'95%',
    mode: 'local',
    triggerAction: 'all',
    typeAhead: true,
    forceSelection: true
});
/**
 * Add Date Format and Append case field
 */
        this.dfRec = Wtf.data.Record.create ([
        {name:'formatid'},
        {name:'name'}
        ]);
        this.dfStore = new Wtf.data.Store({
        url:"kwlCommonTables/getAllDateFormats.do",
                baseParams:{
                mode:33,
                formatids:'12,13,2,20,24,3,19'.split(','),//adding date format for US check
                newDate: WtfGlobal.convertToGenericDate(new Date())
                },
                reader: new Wtf.data.KwlJsonReader({
                root: "data"
                }, this.dfRec)
        });
        this.dfStore.load();
        
        this.dfCmb = new Wtf.form.ComboBox({
        fieldLabel:WtfGlobal.getLocaleText("acc.profile.dateFmt"), //'Date format',
                hiddenName:'formatid',
                store:this.dfStore,
                valueField:'formatid',
                displayField:'name',
                mode: 'local',
                anchor:'95%',
                triggerAction: 'all',
                forceSelection: true//editable : false //Remove Hand icon on hovering combo[SK]
        });
        this.dfStore.on('load', function(){
            /**
             * Set default format MMDDYY
             */
            this.dfCmb.setValue(12);
        }, this);
        this.appendcharacter = new Wtf.form.TextField({
        fieldLabel : WtfGlobal.getLocaleText("acc.paymentmenthod.cheque.appendchar"),
                name: 'appendcharacter',
                id:"appendcharacter",
                anchor:'95%',
                maxLength:50,
                scope:this,
                emptyText: WtfGlobal.getLocaleText("acc.field.Pleaseenterprefix")
        });
this.pmtMethod.on('select',this.getChequeLayout,this)

this.fontStyleStore = new Wtf.data.SimpleStore({
    fields: [{
        name:'Fontstyleid',
        type:'int'
    }, 'name'],
    data :[[0,'Plain'],[1,'Bold'],[2,'Italic']]
});

this.selectedFontStyle = new Wtf.form.ComboBox({
    store: this.fontStyleStore,
    fieldLabel:WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectFontStyle"),  //'SelectFontStyle',
    name:'selectedFontStyle',
    displayField:'name',
    emptyText: WtfGlobal.getLocaleText("acc.checklayoutsetup.SelectFontStyle"),
    valueField:'Fontstyleid',
    mode: 'local',
    triggerAction: 'all',
    selectOnFocus:true
});
//    this.unitStore = new Wtf.data.SimpleStore({
//            fields: [{name:'unitid',type:'int'}, 'unitname'],
//            data :[[0,'px'],[1,'pt'],[2,'mm'],[3,'cm']]
//        });
//
//    this.uomEditor=new Wtf.form.FnComboBox({
//            name:'uomname',
//            fieldLabel:WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectUnit"),
//            store:this.unitStore,
//            typeAhead: true,
//            selectOnFocus:true,
//            valueField:'unitid',
//            displayField:'unitname',
//            scope:this,
//            forceSelection:true
//        });
/*
 * Adding check box of add character in date format while printing cheque
 */
 this.addCharacterInCheckDate = new Wtf.form.Checkbox({
   fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.addCharacterInCheckDate"), // Add '/' or '-' in Date
   name: 'addCharacterInCheckDate',
   labelStyle:'width:235px;',
   cls:'checkboxtopPosition'
 })
this.dateLeft=new Wtf.form.NumberField({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.date"),
    name: "dateLeft",
    maxLength:20,
    id: "dateLeftid",
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.LeftCoordinates(cm)"),
    width:150
});

this.nameLeft=new Wtf.form.NumberField({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.name"),
    name: "nameLeft",
    maxLength:20,
    id: "nameLeftid",
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.LeftCoordinates(cm)"),
    width:150
});

this.amtinwordLeft=new Wtf.form.NumberField({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.amtinword"),
    name: "amtinwordLeft",
    maxLength:20,
    id: "amtinwordLeftid",
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.LeftCoordinates(cm)"),
    width:150
});
this.amtinwordLeftLine2=new Wtf.form.NumberField({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.amtinwordLine2"),
    name: "amtinwordLeft2",
    maxLength:20,
    id: "amtinwordLeftid2",
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.LeftCoordinates(cm)"),
    width:150
});
this.amtLeft=new Wtf.form.NumberField({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.amt"),
    name: "amtLeft",
    maxLength:20,
    id: "amtLeftid",
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.LeftCoordinates(cm)"),
    width:150
});

this.dateTop=new Wtf.form.NumberField({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.date"),
    hideLabel:true,
    name: "dateTop",
    maxLength:20,
    id: "dateTopid",
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.TopCoordinates(cm)"),
    width:150
});

this.nameTop=new Wtf.form.NumberField({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.name"),
    hideLabel:true,
    name: "nameTop",
    maxLength:20,
    id: "nameTopid",
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.TopCoordinates(cm)"),
    width:150
});

this.amtinwordTop=new Wtf.form.NumberField({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.amtinword"),
    hideLabel:true,
    name: "amtinwordTop",
    maxLength:20,
    id: "amtinwordTopid",
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.TopCoordinates(cm)"),
    width:150
});
this.amtinwordTopLine2=new Wtf.form.NumberField({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.amtinwordLine2"),
    hideLabel:true,
    name: "amtinwordTop2",
    maxLength:20,
    id: "amtinwordTopid2",
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.TopCoordinates(cm)"),
    width:150
});

this.amtTop=new Wtf.form.NumberField({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.amt"),
    hideLabel:true,
    name: "amtTop",
    maxLength:20,
    id: "amtTopid",
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.TopCoordinates(cm)"),
    width:150
});

this.fontSizeStore = new Wtf.data.SimpleStore({
    fields: [{
        name: 'id'
    },{
        name: 'fontsize'
    }]
});

var FontSizeArr=[];

for(var i=1 ; i<=36 ; i++){
    FontSizeArr.push([i,i]);
}

this.fontSizeStore.loadData(FontSizeArr);

/* US related cheque modification
 * Added memo,address and date format
 */
    
    this.memoLeft=new Wtf.form.NumberField({
      fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.billingEmail"),
      name: "memoLeft",
      maxLength:20,
      id: "memoLeftid",
      emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.LeftCoordinates(cm)"),
      width:150
  });
    this.memoTop=new Wtf.form.NumberField({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.billingEmail"),
        hideLabel:true,
        name: "memoTop",
        maxLength:20,
        id: "memoTopid",
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.TopCoordinates(cm)"),
        width:150
    });

    this.addressLine1Left=new Wtf.form.NumberField({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.adressline1"),
        name: "addressLine1Left",
        maxLength:20,
        id: "addressLine1Leftid",
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.LeftCoordinates(cm)"),
        width:150
    });
    this.addressLine1Top=new Wtf.form.NumberField({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.adressline1"),
        hideLabel:true,
        name: "addressLine1Top",
        maxLength:20,
        id: "addressLine1Topid",
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.TopCoordinates(cm)"),
        width:150
    });

    this.addressLine2Left=new Wtf.form.NumberField({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.adressline2"),
        name: "addressLine2Left",
        maxLength:20,
        id: "addressLine2Leftid",
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.LeftCoordinates(cm)"),
        width:150
    });
    this.addressLine2Top=new Wtf.form.NumberField({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.adressline2"),
        hideLabel:true,
        name: "addressLine2Top",
        maxLength:20,
        id: "addressLine2Topid",
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.TopCoordinates(cm)"),
        width:150
    });

    this.addressLine3Left=new Wtf.form.NumberField({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.adressline3"),
        name: "addressLine3Left",
        maxLength:20,
        id: "addressLine3Leftid",
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.LeftCoordinates(cm)"),
        width:150
    });
    this.addressLine3Top=new Wtf.form.NumberField({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.adressline3"),
        hideLabel:true,
        name: "addressLine3Top",
        maxLength:20,
        id: "addressLine3Topid",
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.TopCoordinates(cm)"),
        width:150
    });

    this.addressLine4Left=new Wtf.form.NumberField({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.adressline4"),
        name: "addressLine4Left",
        maxLength:20,
        id: "addressLine4Leftid",
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.LeftCoordinates(cm)"),
        width:150
    });
    this.addressLine4Top=new Wtf.form.NumberField({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.adressline4"),
        hideLabel:true,
        name: "addressLine4Top",
        maxLength:20,
        id: "addressLine4Topid",
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.TopCoordinates(cm)"),
        width:150
    });  
    
    this.selectFontSizeForMemoTxt= new Wtf.form.ComboBox({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectFontSize"),//'Font Size',
        name: 'fontsize',
        store: this.fontSizeStore,
        displayField:'fontsize',
        valueField:'id',
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.SelectFontSize"),
        mode: 'local',
        triggerAction: 'all',
        anchor:'98%'
    });

    this.selectFontSizeForAddressLine1Txt= new Wtf.form.ComboBox({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectFontSize"),//'Font Size',
        name: 'fontsize',
        store: this.fontSizeStore,
        displayField:'fontsize',
        valueField:'id',
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.SelectFontSize"),
        mode: 'local',
        anchor:'98%',
        triggerAction: 'all'
    });

    this.selectFontSizeForAddressLine2Txt= new Wtf.form.ComboBox({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectFontSize"),//'Font Size',
        name: 'fontsize',
        store: this.fontSizeStore,
        displayField:'fontsize',
        valueField:'id',
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.SelectFontSize"),
        mode: 'local',
        triggerAction: 'all',
        anchor:'98%'
    });
    this.selectFontSizeForAddressLine3Txt= new Wtf.form.ComboBox({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectFontSize"),//'Font Size',
        name: 'fontsize',
        store: this.fontSizeStore,
        displayField:'fontsize',
        valueField:'id',
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.SelectFontSize"),
        mode: 'local',
        triggerAction: 'all',
         anchor:'98%'
    });
    this.selectFontSizeForAddressLine4Txt= new Wtf.form.ComboBox({
        fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectFontSize"),//'Font Size',
        name: 'fontsize',
        store: this.fontSizeStore,
        displayField:'fontsize',
        valueField:'id',
        emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.SelectFontSize"),
        mode: 'local',
        triggerAction: 'all',
        anchor:'98%'
    });
this.selectFontSizeForDateCombo= new Wtf.form.ComboBox({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectFontSize"),//'Font Size',
    name: 'fontsize',
    store: this.fontSizeStore,
    displayField:'fontsize',
    valueField:'id',
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.SelectFontSize"),
    mode: 'local',
    triggerAction: 'all'
});

this.selectFontSizeForNameCombo= new Wtf.form.ComboBox({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectFontSize"),//'Font Size',
    name: 'fontsize',
    store: this.fontSizeStore,
    displayField:'fontsize',
    valueField:'id',
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.SelectFontSize"),
    mode: 'local',
    triggerAction: 'all'
});

this.selectFontSizeForAmountInWords1Combo= new Wtf.form.ComboBox({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectFontSize"),//'Font Size',
    name: 'fontsize',
    store: this.fontSizeStore,
    displayField:'fontsize',
    valueField:'id',
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.SelectFontSize"),
    mode: 'local',
    triggerAction: 'all'
});

this.selectFontSizeForAmountInWords2Combo= new Wtf.form.ComboBox({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectFontSize"),//'Font Size',
    name: 'fontsize',
    disabled:true,
    store: this.fontSizeStore,
    displayField:'fontsize',
    valueField:'id',
    emptyText: WtfGlobal.getLocaleText("acc.checklayoutsetup.SelectFontSize"),
    mode: 'local',
    triggerAction: 'all'
});


this.selectFontSizeForAmountCombo= new Wtf.form.ComboBox({
    fieldLabel: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.SelectFontSize"),//'Font Size',
    name: 'fontsize',
    store: this.fontSizeStore,
    displayField:'fontsize',
    valueField:'id',
    emptyText:WtfGlobal.getLocaleText("acc.checklayoutsetup.SelectFontSize"),
    mode: 'local',
    triggerAction: 'all'
});

/* US related cheque modification
 * Create field set of other fields
 */
this.extraChequeFields = new Wtf.form.FieldSet({
    title: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup.otherFields"),
    checkboxToggle: true,
    checkboxName: 'extraChequeFields',
    height:170,
    style: 'margin-right:30px;',
    collapsible: true,
    collapsed:true,
    items: [{
            layout:'column',
            border:false,
            defaults:{
                border:false
            },
            items:[{
                layout:'form',
                columnWidth:0.37,
                items:[
                this.memoLeft,
                this.addressLine1Left,
                this.addressLine2Left,
                this.addressLine3Left,
                this.addressLine4Left
                ]
            },{
                layout:'form',
                columnWidth:0.20,
                labelWidth:0,
                items:[
                this.memoTop,
                this.addressLine1Top,
                this.addressLine2Top,
                this.addressLine3Top,
                this.addressLine4Top

                ]
            },{
                layout:'form',
                columnWidth:0.30,
                labelWidth:70,
                items:[
                this.selectFontSizeForMemoTxt,
                this.selectFontSizeForAddressLine1Txt,
                this.selectFontSizeForAddressLine2Txt,
                this.selectFontSizeForAddressLine3Txt,
                this.selectFontSizeForAddressLine4Txt
                ]
            }]
        }]
 });

this.editChequeLayoutForm = new Wtf.form.FormPanel({
    waitMsgTarget: true,
    border: false,
    region: 'center',
    bodyStyle: "background: transparent;",
    style: "background: transparent;padding:20px;",
    labelWidth: 150,
    frame: false,
    autoScroll: true,
    height:350,
    items:[{
        layout:'form',
        defaults:{
            border:false
        },
        baseCls:'northFormFormat',
        labelWidth:160,
        items:[{
            layout:'column',
            defaults:{
                border:false
            },
            items:[{
                layout:'form',
                columnWidth:0.50,
                items:[
                this.pmtMethod,
                this.dfCmb,
                this.appendcharacter
                ]
            },{
                layout:'form',
                columnWidth:0.40,
                style: "padding-left:48px;",
                labelWidth:70,
                items:[
                this.selectedFontStyle,
                this.addCharacterInCheckDate
                ]
            }]
        },{
            layout:'column',
            defaults:{
                border:false
            },
            items:[{
                layout:'form',
                columnWidth:0.35,
                items:[
                this.dateLeft,
                this.nameLeft,
                this.amtinwordLeft,
                this.amtinwordLeftLine2,
                this.amtLeft,
                ]
            },{
                layout:'form',
                columnWidth:0.20,
                labelWidth:0,
                items:[
                this.dateTop,
                this.nameTop,
                this.amtinwordTop,
                this.amtinwordTopLine2,
                this.amtTop

                ]
            },{
                layout:'form',
                columnWidth:0.30,
                labelWidth:70,
                items:[
                this.selectFontSizeForDateCombo,
                this.selectFontSizeForNameCombo,
                this.selectFontSizeForAmountInWords1Combo,
                this.selectFontSizeForAmountInWords2Combo,
                this.selectFontSizeForAmountCombo
                ]
            }]
        },this.extraChequeFields]
    }]
});
this.editChequeLayoutWindow = new Wtf.Window({
    modal: true,
    iconCls :getButtonIconCls(Wtf.etype.deskera),
    title: WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup"),
    bodyStyle: 'padding:5px;',
    buttonAlign: 'right',
    width: 1100,
    //        height: 115,
    scope: this,
    draggable:false,
    items: [{
        region: 'north',
        height: 90,
        border: false,
        bodyStyle: 'background:white;border-bottom:1px solid #bfbfbf;',
        html: getTopHtml(WtfGlobal.getLocaleText("acc.masterConfig.chequeLayoutSetup"), WtfGlobal.getLocaleText("acc.masterConfig.chequelayoutdesc"))
    }, {
        region: 'center',
        border: false,
        bodyStyle: 'background:#f1f1f1;font-size:10px;',
        autoScroll: true,
        items: this.editChequeLayoutForm
    }],
    buttons: [{
        text: WtfGlobal.getLocaleText("acc.common.update"),
        scope: this,
        hidden:WtfGlobal.EnableDisable(Wtf.UPerm.miscellaneous, Wtf.Perm.miscellaneous.updatelayout),
        handler: function(button) {
            if (this.editChequeLayoutForm.form.isValid()) {
                Wtf.Ajax.requestEx({
                    url: "ACCPaymentMethods/setChequeLayout.do",
                    params:{
                        bankid:this.pmtMethod.getValue(),
                        dateLeft:this.dateLeft.getValue(),
                        nameLeft:this.nameLeft.getValue(),
                        amtinwordLeft:this.amtinwordLeft.getValue(),
                        amtLeft:this.amtLeft.getValue(),
                        amtinwordLeftLine2:this.amtinwordLeftLine2.getValue(),
                        dateTop:this.dateTop.getValue(),
                        nameTop:this.nameTop.getValue(),
                        amtinwordTop:this.amtinwordTop.getValue(),
                        amtinwordTopLine2:this.amtinwordTopLine2.getValue(),
                        appendcharacter:this.appendcharacter.getValue(),
                        dateformat:this.dfCmb.getValue(),
                        addCharacterInCheckDate:(this.addCharacterInCheckDate.getValue())?"on":'',
                        amtTop:this.amtTop.getValue(),
                        fontStyle: this.selectedFontStyle.getValue(),
                        fontSizeOfDate: this.selectFontSizeForDateCombo.getValue(),
                        fontSizeOfName: this.selectFontSizeForNameCombo.getValue(),
                        fontSizeofAmountInWords: this.selectFontSizeForAmountInWords1Combo.getValue(),
                        fontSizeofAmount: this.selectFontSizeForAmountCombo.getValue(),
                        /*
                         Added other field  related cheque parameters in save case.
                        */
                        activateExtraFields:(this.extraChequeFields.collapsed==false?true:false),
                        memoLeft:this.memoLeft.getValue(),
                        memoTop:this.memoTop.getValue(),
                        addressLine1Left:this.addressLine1Left.getValue(),
                        addressLine1Top:this.addressLine1Top.getValue(),
                        addressLine2Left:this.addressLine2Left.getValue(),
                        addressLine2Top:this.addressLine2Top.getValue(),
                        addressLine3Left:this.addressLine3Left.getValue(),
                        addressLine3Top:this.addressLine3Top.getValue(),
                        addressLine4Left:this.addressLine4Left.getValue(),
                        addressLine4Top:this.addressLine4Top.getValue(),
                        selectFontSizeForMemoTxt:this.selectFontSizeForMemoTxt.getValue(),
                        selectFontSizeForAddressLine1Txt:this.selectFontSizeForAddressLine1Txt.getValue(),
                        selectFontSizeForAddressLine2Txt:this.selectFontSizeForAddressLine2Txt.getValue(),
                        selectFontSizeForAddressLine3Txt:this.selectFontSizeForAddressLine3Txt.getValue(),
                        selectFontSizeForAddressLine4Txt:this.selectFontSizeForAddressLine4Txt.getValue()
                    }
                },this, function(resp){
                    if(resp.success == true) {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.success"), resp.msg], 0);
                        this.pmtMethod.clearValue();
                        this.dateLeft.reset();
                        this.nameLeft.reset();
                        this.amtinwordLeft.reset();
                        this.amtLeft.reset();
                        this.dateTop.reset();
                        this.nameTop.reset();
                        this.amtinwordTop.reset();
                        this.amtTop.reset();
                        this.amtinwordLeftLine2.reset();
                        this.amtinwordTopLine2.reset();
                        this.appendcharacter.reset();
                        this.dfCmb.reset();
                        this.addCharacterInCheckDate.reset();
                        this.selectedFontStyle.clearValue();
                        this.selectFontSizeForDateCombo.reset();
                        this.selectFontSizeForNameCombo.reset();
                        this.selectFontSizeForAmountInWords1Combo.reset();
                         /*
                         Reset other field  related cheque field data.
                        */
                        this.selectFontSizeForAmountCombo.reset();
                        this.extraChequeFields.collapse(true);
                        this.memoLeft.reset();
                        this.addressLine1Left.reset();
                        this.addressLine2Left.reset();
                        this.addressLine3Left.reset();
                        this.addressLine4Left.reset();
                        this.memoTop.reset();
                        this.addressLine1Top.reset();
                        this.addressLine2Top.reset();
                        this.addressLine3Top.reset();
                        this.addressLine4Top.reset();
                        this.selectFontSizeForMemoTxt.reset();
                        this.selectFontSizeForAddressLine1Txt.reset();
                        this.selectFontSizeForAddressLine2Txt.reset();
                        this.selectFontSizeForAddressLine3Txt.reset();
                        this.selectFontSizeForAddressLine4Txt.reset();

                    }else if(resp.success==false){
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.field.Failure"), resp.msg], 1);
                    }
                },function(resp){
                    });
            }else{
                return false;
            }
        }
    },{
        text: WtfGlobal.getLocaleText("acc.common.cancelBtn"),
        scope: this,
        handler: function() {
            this.editChequeLayoutWindow.close();
        }
    }]
});
this.editChequeLayoutWindow.show();
}
//function setApprovelRules(winid){
//    //alert("hi");
//
//    //winid=(winid==null?'goodsreceipt':winid);
//    var p = Wtf.getCmp("prerequestforsetapproval");
//    if(!p){
//         p= new Wtf.prereq({
//                id:'prerequestforsetapproval',
//                layout:'fit',
//                border: false,
//                tabTip : WtfGlobal.getLocaleText("acc.field.YoucanaddupdateanddeleteApprovalRulesfordesiredtransaction"),
//                iconCls :getButtonIconCls(Wtf.etype.deskera),
//                title:WtfGlobal.getLocaleText("acc.field.SetDocumentApprovalRules"),
//                closable:true
////                height:300
//            })
//            Wtf.getCmp('as').add(p);
////         })
////        })
//    }
//    Wtf.getCmp('as').setActiveTab(p);
//    Wtf.getCmp('as').doLayout();
////    p.show();
//}

function setDOApprovelRules() {
    new Wtf.DOApprovalWin({
        isCustomer:true
    }).show();
}

function consignmentApprovalRequest() {
    if (Wtf.account.companyAccountPref.requestApprovalFlow) {
        var p = Wtf.getCmp("consignmentrequestapproval");
        if(!p){
            p= new Wtf.ConsignmentRequestApproval({
                id:'consignmentrequestapproval',
                layout:'fit',
                border: false,
                tabTip : WtfGlobal.getLocaleText("acc.field.ConsignmentRequestApproval"),
                iconCls: getButtonIconCls(Wtf.etype.customer),
                title:WtfGlobal.getLocaleText("acc.field.ConsignmentRequestApproval"),
                isrequestapproval:true,
                closable:true
            });
            Wtf.getCmp('as').add(p);
        }
        Wtf.getCmp('as').setActiveTab(p);
        Wtf.getCmp('as').doLayout();
    }else{
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),"Consignment Request Approval flow is disabled currently."],2);
    }
}
function consignmentQARequest() {
    if (Wtf.account.companyAccountPref.activateQAApprovalFlow) {
        var p = Wtf.getCmp("consignmentqaapproval");
        if(!p){
            p= new Wtf.ConsignmentRequestApproval({
                id:'consignmentqaapproval',
                layout:'fit',
                border: false,
                tabTip : WtfGlobal.getLocaleText("acc.field.QAApproval"),
                iconCls: getButtonIconCls(Wtf.etype.customer),
                title:WtfGlobal.getLocaleText("acc.field.QAApproval"),
                isrequestapproval:false,
                closable:true
            });
            Wtf.getCmp('as').add(p);
        }
        Wtf.getCmp('as').setActiveTab(p);
        Wtf.getCmp('as').doLayout();
    }else{
         WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),"QA Approval flow is disabled currently."],2);
    }
}

function setNotificationRules(winid){
    var p = Wtf.getCmp("prerequestforsetnotification");
    if(!p){
        p= new Wtf.notification({
            id:'prerequestforsetnotification',
            layout:'fit',
            border: false,
            tabTip : WtfGlobal.getLocaleText("acc.field.YoucanaddupdateanddeleteNotificationRulesfor"),
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.SetMailNotificationRules"),Wtf.TAB_TITLE_LENGTH),
            closable:true
        })
        Wtf.getCmp('as').add(p);
    }
    Wtf.getCmp('as').setActiveTab(p);
    Wtf.getCmp('as').doLayout();
}

// Excise Opening Balance check from Vendor Master ERP-27108 
function callGoodsReceipt(isEdit,rec,winid,vendorid, isCustBill, isSelfBilledInvoice,isExciseTab,isMRPJOBWORKIN,isExicseOpeningbalance,invoicefromorder,invoicefromorderrec,isJobWorkoutInvoice){    // Neeraj
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createvendorinvoice)) {
        winid=(winid==null?'goodsreceipt':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    //            DefaultVendor: vendorid,						// Neeraj
//                    id : winid,
//                    isEdit:isEdit,
//                    isCustomer:false,
//                    record: rec,
//                    isInvoice:true,
//                    isSelfBilledInvoice:isSelfBilledInvoice,
//                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
//                    label:WtfGlobal.getLocaleText("acc.agedPay.venInv"),
//                    heplmodeid: 15,
//                    isCustBill:isCustBill,
//                    border : false,
//                    readOnly:false,
//                    //            layout: 'border',
//                    DOSettings:Wtf.account.companyAccountPref.DOSettings,
//                    GRSettings:Wtf.account.companyAccountPref.GRSettings,
//                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
//                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoVI"),Wtf.TAB_TITLE_LENGTH),
//                    tabTip:WtfGlobal.getLocaleText("acc.accPref.autoVI"),  //'Vendor Invoice',
//                    closable: true,
//                    iconCls:'accountingbase goodsreceipt',
//                    modeName:'autogoodsreceipt'
//                });
//            }else{
                var WinTitle="";
                if(isExciseTab){
                    WinTitle=WtfGlobal.getLocaleText("acc.field.india.excise.invoice.purchase");
                    var moduleid=Wtf.Acc_Vendor_Invoice_ModuleId;
                }else if(isMRPJOBWORKIN != undefined && isMRPJOBWORKIN ==true){
                    WinTitle=WtfGlobal.getLocaleText("acc.accPref.autoJOBOrderInvoice");
                    moduleid=Wtf.MRP_Job_Work_IN;
                }else{
                    WinTitle=WtfGlobal.getLocaleText("acc.accPref.autoVI");
                    moduleid=Wtf.Acc_Vendor_Invoice_ModuleId;
                }
                panel = new Wtf.account.TransactionPanel({
                    //            DefaultVendor: vendorid,						// Neeraj
                    id : winid,
                    isEdit:isEdit,
                    isCustomer:false,
                    record: rec,
                    isInvoice:true,
                    isMRPJOBWORKIN:isMRPJOBWORKIN,
                    isSelfBilledInvoice:isSelfBilledInvoice,
                    moduleid:moduleid,
                    label:WinTitle,
                    heplmodeid: 15,
                    isCustBill:isCustBill,
                    border : false,
                    readOnly:false,
                    isJobWorkoutInvoice:((isJobWorkoutInvoice!=undefined||isJobWorkoutInvoice!= null && isJobWorkoutInvoice)&&moduleid==Wtf.Acc_Vendor_Invoice_ModuleId)?isJobWorkoutInvoice:false,
                    invoicefromorder:invoicefromorder,
                    invoicefromorderrec:invoicefromorderrec,
                    //            layout: 'border',
                    DOSettings:Wtf.account.companyAccountPref.DOSettings,
                    GRSettings:Wtf.account.companyAccountPref.GRSettings,
                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                    title:Wtf.util.Format.ellipsis(WinTitle,Wtf.TAB_TITLE_LENGTH),
                    tabTip:WinTitle,  //'Vendor Invoice',
                    closable: true,
                    iconCls:'accountingbase goodsreceipt',
                    modeName:'autogoodsreceipt',
                    isExciseTab:isExciseTab,
                    isExicseOpeningbalance:isExicseOpeningbalance
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7){
                            panel.GridPanel.setSize(panel.getInnerWidth()-35,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,(isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating"))+" "+WtfGlobal.getLocaleText("acc.agedPay.venInv"));
}
function callExicesOpeningGoodsReceipt(isCustomer){
    
    
    if(Wtf.getCmp('createTransactionFormId')){
        Wtf.getCmp('createTransactionFormId').close();
    }

    if(Wtf.getCmp('openBalWinId')){
        Wtf.getCmp('openBalWinId').close();
    }
    var isExicseOpeningbalance=true;
    var isMRPJOBWORKIN=null;
    
    if(isCustomer === "true"){
        callInvoice(false,null,null,true,isExicseOpeningbalance);
    }else{
        callGoodsReceipt(false,null,null,null,null,null,true,isMRPJOBWORKIN,isExicseOpeningbalance);
    }
}

function callFixedAssetGoodsReceipt(isEdit,rec,winid,vendorid, isCustBill,isFixedAsset){
  if(!WtfGlobal.EnableDisable(Wtf.UPerm.assetpurchase, Wtf.Perm.assetpurchase.createacqinv)) {
        winid=(winid==null?'fixedassetgoodsreceipt':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.FixedAssetTransactionPanel({
                //            DefaultVendor: vendorid,
                id : winid,
                isEdit:isEdit,
                isCustomer:false,
                record: rec,
                isInvoice:true,
                moduleid:isFixedAsset ? Wtf.Acc_FixedAssets_PurchaseInvoice_ModuleId :Wtf.Acc_Vendor_Invoice_ModuleId ,
                label:WtfGlobal.getLocaleText("acc.agedPay.venInv"),
                heplmodeid: 15,
                isCustBill:isCustBill,
                border : false,
                //            layout: 'border',
                DOSettings:Wtf.account.companyAccountPref.DOSettings,
                GRSettings:Wtf.account.companyAccountPref.GRSettings,
                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.purchaseinvoice"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.purchaseinvoice"),
                closable: true,
                iconCls:'accountingbase goodsreceipt',
                modeName:'autogoodsreceipt',
                isFixedAsset:isFixedAsset
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7){
                            panel.GridPanel.setSize(panel.getInnerWidth()-35,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.field.PurchaseInvoice"));
}

/*
 * Template for vendor Invoice.
 */
function callGoodsReceiptTemplate(moduleId, winid){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createvendorinvoice)) {
        winid=(winid==null?'goodsreceipttemplate':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isTemplate:true,
//                    isCustomer:false,
//                    //            record: rec,
//                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
//                    label:WtfGlobal.getLocaleText("acc.field.VendorInvoiceTemplate"),
//                    heplmodeid: 15,
//                    //            isCustBill:isCustBill,
//                    border : false,
//                    title:WtfGlobal.getLocaleText("acc.field.VendorInvoiceTemplate"),
//                    tabTip:WtfGlobal.getLocaleText("acc.field.VendorInvoiceTemplate"),
//                    closable: true,
//                    iconCls:'accountingbase goodsreceipt',
//                    modeName:'autogoodsreceipt'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isTemplate:true,
                    isCustomer:false,
                    readOnly: false,
                    //            record: rec,
                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
                    label:WtfGlobal.getLocaleText("acc.field.VendorInvoiceTemplate"),
                    heplmodeid: 15,
                    //            isCustBill:isCustBill,
                    border : false,
                    title:WtfGlobal.getLocaleText("acc.field.VendorInvoiceTemplate"),
                    tabTip:WtfGlobal.getLocaleText("acc.field.VendorInvoiceTemplate"),
                    closable: true,
                    iconCls:'accountingbase goodsreceipt',
                    modeName:'autogoodsreceipt'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7){
                            panel.GridPanel.setSize(panel.getInnerWidth()-35,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.agedPay.venInv"));
}

function callInvoice(isEdit,rec,winid,isExciseTab,isExicseOpeningbalance,invoicefromorder,invoicefromorderrec){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createinvoice)) {
        winid=(winid==null?'Invoice':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit:isEdit,
//                    isCustomer:true,
//                    record: rec,
//                    label:WtfGlobal.getLocaleText("acc.field.CustomerInvoice"),
//                    isInvoice:true,
//                    doctype:1,
//                    moduleid:Wtf.Acc_Invoice_ModuleId,
//                    border : false,
//                    heplmodeid: 2, //This is help mode id
//                    //            layout: 'border',
//                    DOSettings:Wtf.account.companyAccountPref.DOSettings,
//                    GRSettings:Wtf.account.companyAccountPref.GRSettings,
//                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),Wtf.TAB_TITLE_LENGTH),
//                    tabTip:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),  //'Invoice',
//                    closable: true,
//                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
//                    iconCls:'accountingbase invoice',
//                    modeName:'autoinvoice'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit:isEdit,
                    invoicefromorder:invoicefromorder,
                    invoicefromorderrec: invoicefromorderrec,
                    isCustomer:true,
                    record: rec,
                    label:isExciseTab?(WtfGlobal.getLocaleText("acc.field.india.excise.invoice")):WtfGlobal.getLocaleText("acc.field.CustomerInvoice"),
                    isInvoice:true,
                    doctype:1,
                    moduleid:Wtf.Acc_Invoice_ModuleId,
                    border : false,
                    heplmodeid: 2, //This is help mode id
                    //            layout: 'border',
                    DOSettings:Wtf.account.companyAccountPref.DOSettings,
                    GRSettings:Wtf.account.companyAccountPref.GRSettings,
                    title:isExciseTab? Wtf.util.Format.ellipsis((isExicseOpeningbalance?"Opening ":"")+WtfGlobal.getLocaleText("acc.field.india.excise.invoice"),Wtf.TAB_TITLE_LENGTH):Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.CustomerInvoice"),Wtf.TAB_TITLE_LENGTH),  //tab title :Sales Invoice
                    tabTip:isExciseTab? (isExicseOpeningbalance?"Opening ":"")+WtfGlobal.getLocaleText("acc.field.india.excise.invoice"):WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),  //'Invoice',
                    closable: true,
                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                    iconCls:'accountingbase invoice',
                    modeName:'autoinvoice',
                    isExciseTab:isExciseTab,
                    isExicseOpeningbalance:isExicseOpeningbalance
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    //            var northHt=(this.isOrder?(Wtf.isIE?150:180):(Wtf.isIE?240:210));
                    var northHt=(Wtf.isIE?260:230);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.agedPay.inv"));
}

function callFixedAssetInvoice(isEdit,rec,winid,isFixedAsset,isLeaseFixedAsset){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.assetsales, Wtf.Perm.assetsales.createdispinv)&&isFixedAsset) ||isLeaseFixedAsset) {
        winid=(winid==null?'fixedassetInvoice':winid);
        isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
        if(isLeaseFixedAsset){
            winid='LeasefixedassetInvoice'
        }

        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.FixedAssetTransactionPanel({
                id : winid,
                isEdit:isEdit,
                isCustomer:true,
                record: rec,
                label:(isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.field.LeaseSalesInvoice"):WtfGlobal.getLocaleText("erp.navigate.AssetDisposalInvoice"),
                isInvoice:true,
                doctype:1,
                moduleid:isFixedAsset ?Wtf.Acc_FixedAssets_DisposalInvoice_ModuleId:isLeaseFixedAsset?Wtf.LEASE_INVOICE_MODULEID:Wtf.Acc_Invoice_ModuleId,
                //moduleid:isFixedAsset ?Wtf.Acc_FixedAssets_DisposalInvoice_ModuleId:Wtf.Acc_Invoice_ModuleId,
                border : false,
                heplmodeid: 2, //This is help mode id
                //            layout: 'border',
                DOSettings:Wtf.account.companyAccountPref.DOSettings,
                GRSettings:Wtf.account.companyAccountPref.GRSettings,
                title:(isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.field.LeaseSalesInvoice"):WtfGlobal.getLocaleText("erp.navigate.AssetDisposalInvoice"),
                tabTip:(isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.field.LeaseSalesInvoice"):WtfGlobal.getLocaleText("erp.navigate.AssetDisposalInvoice"),
                closable: true,
                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                iconCls:'accountingbase invoice',
                modeName:'autoinvoice',
                isFixedAsset:isFixedAsset,
                isLeaseFixedAsset:isLeaseFixedAsset
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    //            var northHt=(this.isOrder?(Wtf.isIE?150:180):(Wtf.isIE?240:210));
                    var northHt=(Wtf.isIE?260:230);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();

    panel.on('update',function(){
        if(Wtf.getCmp('assetAssetDetailsTab') && Wtf.getCmp('assetAssetDetailsTab').gridStore)// update asset details grid on saving, edition of sales invoice
            Wtf.getCmp('assetAssetDetailsTab').gridStore.reload();
    },this);

    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.dimension.module.24"));
}

function createInvoiceForProjectStatusReport(isEdit,rec,winid,isFromProjectStatus,SOLinkedArr,customerIds){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createinvoice)) {
        var isFromProjectStatusRep = (isFromProjectStatus != null && isFromProjectStatus != undefined)?isFromProjectStatus:false;
        //    if(isFromProjectStatusRep){
        winid=(winid==null?'InvoiceProjectStatus':winid);
        //    }else{
        //        winid=(winid==null?'Invoice':winid);
        //    }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit:isEdit,
//                    isCustomer:true,
//                    record: rec,
//                    label:WtfGlobal.getLocaleText("acc.agedPay.inv"),
//                    doctype:1,
//                    moduleid:Wtf.Acc_Invoice_ModuleId,
//                    border : false,
//                    heplmodeid: 2, //This is help mode id
//                    //            layout: 'border',
//                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),Wtf.TAB_TITLE_LENGTH),
//                    tabTip:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),  //'Invoice',
//                    closable: true,
//                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
//                    iconCls:'accountingbase invoice',
//                    modeName:'autoinvoice',
//                    isFromProjectStatusRep:isFromProjectStatusRep,
//                    SOLinkedArr:SOLinkedArr,
//                    selectedCustomerIds:customerIds
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit:isEdit,
                    isCustomer:true,
                    record: rec,
                    label:WtfGlobal.getLocaleText("acc.agedPay.inv"),
                    doctype:1,
                    moduleid:Wtf.Acc_Invoice_ModuleId,
                    border : false,
                    heplmodeid: 2, //This is help mode id
                    //            layout: 'border',
                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),Wtf.TAB_TITLE_LENGTH),
                    tabTip:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),  //'Invoice',
                    closable: true,
                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                    iconCls:'accountingbase invoice',
                    modeName:'autoinvoice',
                    isFromProjectStatusRep:isFromProjectStatusRep,
                    SOLinkedArr:SOLinkedArr,
                    selectedCustomerIds:customerIds
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    //            var northHt=(this.isOrder?(Wtf.isIE?150:180):(Wtf.isIE?240:210));
                    var northHt=(Wtf.isIE?260:230);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.agedPay.inv"));
}
function callCustomerInvoiceTemplate(moduleId, winid){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createinvoice)) {
        winid=(winid==null?'CustomerInvoiceTemplate':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    //            isEdit:isEdit,
//                    isCustomer:true,
//                    //            record: rec,
//                    label:WtfGlobal.getLocaleText("acc.field.CustomerInvoiceTemplate"),
//                    doctype:1,
//                    isTemplate:true,
//                    moduleid:Wtf.Acc_Invoice_ModuleId,
//                    border : false,
//                    heplmodeid: 2, //This is help mode id
//                    //            layout: 'border',
//                    title:WtfGlobal.getLocaleText("acc.field.CustomerInvoiceTemplate"),
//                    tabTip:WtfGlobal.getLocaleText("acc.field.CustomerInvoiceTemplate"),
//                    closable: true,
//                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
//                    iconCls:'accountingbase invoice',
//                    modeName:'autoinvoice'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    //            isEdit:isEdit,
                    isCustomer:true,
                    //            record: rec,
                    label:WtfGlobal.getLocaleText("acc.field.CustomerInvoiceTemplate"),
                    doctype:1,
                    isTemplate:true,
                    moduleid:Wtf.Acc_Invoice_ModuleId,
                    border : false,
                    heplmodeid: 2, //This is help mode id
                    //            layout: 'border',
                    title:WtfGlobal.getLocaleText("acc.field.CustomerInvoiceTemplate"),
                    tabTip:WtfGlobal.getLocaleText("acc.field.CustomerInvoiceTemplate"),
                    closable: true,
                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                    iconCls:'accountingbase invoice',
                    modeName:'autoinvoice'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    //            var northHt=(this.isOrder?(Wtf.isIE?150:180):(Wtf.isIE?240:210));
                    var northHt=(Wtf.isIE?260:230);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.agedPay.inv"));
}
function callEditCashReceipt(rec,winid,copyInv,templateId,isViewTemplate,isLinkedTransaction,isAllowToEdit,isEditTemplate){
    var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    /**
     *isViewTemplate flag for view template case
     *isEditTemplate flag for edit template case
     */
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
    var isEditTemplate = isEditTemplate?isEditTemplate:false;
    winid=(winid==null?'EditCashReceipt':winid);
    var panel = Wtf.getCmp(winid);
    var label=(isViewTemplate || isEditTemplate)?WtfGlobal.getLocaleText("acc.field.CashSalesTemplate"):WtfGlobal.getLocaleText("acc.accPref.autoCS");
    if(panel==null){
//        if(SATSCOMPANY_ID==companyid){
//            panel = new Wtf.account.TransactionPanelSats({
//                id : winid,
//                isCustomer:true,
//                isEdit:true,
//                isCopyFromTemplate:isCopyFromTemplate,
//                templateId:templateId,
//                isViewTemplate:isViewTemplate,
//                readOnly:false,
//                rec: rec,
//                cash:true,
//                moduleid:Wtf.Acc_Invoice_ModuleId,
//                record: rec,
//                doctype:1,
//                label:label,
//                border : false,
//                copyInv:copyInv,
//                heplmodeid:63,
//                //            layout: 'border',
//                closable: true,
//                title:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCashSalesTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoCS"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ccs"):WtfGlobal.getLocaleText("acc.wtfTrans.ecs"))+"-"+rec.data.billno),Wtf.TAB_TITLE_LENGTH))))),
//                tabTip:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCashSalesTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoCS"):((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ccs"):WtfGlobal.getLocaleText("acc.wtfTrans.ecs"))+"-"+rec.data.billno)))),
//                iconCls:'accountingbase editinvoice',
//                modeName:'autocashsales'
//            });
//        }else{
            panel = new Wtf.account.TransactionPanel({
                id : winid,
                isCustomer:true,
                isEdit:true,
                isCopyFromTemplate:isCopyFromTemplate,
                templateId:templateId,
                isViewTemplate:isViewTemplate,
                isEditTemplate:isEditTemplate,
                readOnly:false,
                rec: rec,
                cash:true,
                moduleid:Wtf.Acc_Invoice_ModuleId,
                record: rec,
                doctype:1,
                label:label,
                border : false,
                copyInv:copyInv,
                heplmodeid:63,
                //            layout: 'border',
                closable: true,
                title:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCashSalesTemplate"):(isEditTemplate?WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.field.CashSalesTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoCS"):(Wtf.util.Format.ellipsis((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ccs"):WtfGlobal.getLocaleText("acc.wtfTrans.ecs")),Wtf.TAB_TITLE_LENGTH)+ "-"+ rec.data.billno ))))),
                tabTip:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCashSalesTemplate"):(isEditTemplate?WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.field.CashSalesTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoCS"):((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ccs"):WtfGlobal.getLocaleText("acc.wtfTrans.ecs"))+"-"+rec.data.billno))))),
                iconCls:'accountingbase editinvoice',
                modeName:'autocashsales',
                isLinkedTransaction:isLinkedTransaction,
                isAllowToEdit:isAllowToEdit // allow invoice/cash sales to edit, if created with auto generate DO option
            });
//        }
        panel.on("activate", function(){
            if(Wtf.isIE7) {
                var northHt=(Wtf.isIE?240:210);
                var southHt=(Wtf.isIE?210:150);
                Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                panel.NorthForm.setHeight(northHt);
                panel.southPanel.setHeight(southHt);
            }
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(!isCopyFromTemplate){
            var selectedModeId= "InvoiceList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    //panel.refreshView(rec);
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
    Wtf.getCmp('as').doLayout();
}
function callEditInvoice(rec,winid,copyInv,templateId,isViewTemplate,isGeneratedRecurringInvoice,onDate,notIsContract,isDraft,isLinkedTransaction,isAllowToEdit,isEditTemplate,pendingapproval){
    var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    /**
     *isViewTemplate flag for view template case
     *isEditTemplate flag for edit template case
     */
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
    var isEditTemplate = isEditTemplate?isEditTemplate:false;
    winid=(winid==null?'EditInvoice':winid);
    var isNotContract=(notIsContract == false)?false:true;
    var isExciseInvoice= false;
    if(rec && rec.data && rec.data.isExciseInvoice){
        isExciseInvoice = rec.data.isExciseInvoice;
    }
    var isExciseInvoiceWithTemplate= false;
    if(rec && rec.data && rec.data.isExciseInvoiceWithTemplate){
        isExciseInvoiceWithTemplate = rec.data.isExciseInvoiceWithTemplate;
    }
    var panel = Wtf.getCmp(winid);
    var label=isViewTemplate? isExciseInvoice? WtfGlobal.getLocaleText("acc.field.india.excise.invoice"): WtfGlobal.getLocaleText("acc.field.CustomerInvoiceTemplate") : isExciseInvoice?WtfGlobal.getLocaleText("acc.field.india.excise.invoice"): ' Invoice'; // Customer Invoice Template ' : ' Invoice';
    if((isViewTemplate || isEditTemplate)){
        label=WtfGlobal.getLocaleText("acc.field.CustomerInvoiceTemplate");
    }
    if(panel==null){
//        if(SATSCOMPANY_ID==companyid){
//            panel = new Wtf.account.TransactionPanelSats({
//                id : winid,
//                isCustomer:true,
//                isEdit:true,
//                readOnly:false,
//                isInvoice:true,
//                record: rec,
//                templateId:templateId,
//                isCopyFromTemplate:isCopyFromTemplate,
//                isViewTemplate:isViewTemplate,
//                isGeneratedRecurringInvoice:isGeneratedRecurringInvoice,
//                onDate:onDate,
//                cash:false,
//                doctype:1,
//                moduleid:Wtf.Acc_Invoice_ModuleId,
//                copyInv:copyInv,
//                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
//                label:label,
//                heplmodeid: 67, //This is help mode id
//                border : false,
//                //            layout: 'border',
//                DOSettings:Wtf.account.companyAccountPref.DOSettings,
//                GRSettings:Wtf.account.companyAccountPref.GRSettings,
//                IsInvoiceTerm: true,
//                closable: true,
//                //title:(isViewTemplate?'View Customer Invoice Template':((isCopyFromTemplate?'Invoice':(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):WtfGlobal.getLocaleText("acc.wtfTrans.ei"))+"-"+rec.data.billno),Wtf.TAB_TITLE_LENGTH))))),
//                //tabTip:(isViewTemplate?'View Customer Invoice Template':(isCopyFromTemplate?'Invoice':((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):WtfGlobal.getLocaleText("acc.wtfTrans.ei"))+"-"+rec.data.billno))),
//                title:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCustomerInvoiceTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.agedPay.inv"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):WtfGlobal.getLocaleText("acc.wtfTrans.ei"))),Wtf.TAB_TITLE_LENGTH))))),
//                tabTip:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCustomerInvoiceTemplate"):(isCopyFromTemplate?WtfGlobal.getLocaleText("acc.agedPay.inv"):((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):WtfGlobal.getLocaleText("acc.wtfTrans.ei"))))),//acc.cust.editcustomerQ
//                iconCls:'accountingbase invoice',
//                modeName:'autoinvoice'
//            });
//        }else{
            panel = new Wtf.account.TransactionPanel({
                id : winid,
                isCustomer:true,
                isEdit:true,
                isCopyInvoice:copyInv,
                readOnly:false,
                isInvoice:true,
                record: rec,
                templateId:templateId,
                isCopyFromTemplate:isCopyFromTemplate,
                isViewTemplate:isViewTemplate,
                isEditTemplate:isEditTemplate,
                isGeneratedRecurringInvoice:isGeneratedRecurringInvoice,
                onDate:onDate,
                isDraft: isDraft,
                cash:false,
                doctype:1,
                moduleid:Wtf.Acc_Invoice_ModuleId,
                copyInv:copyInv,
                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                label:label,
                heplmodeid: 67, //This is help mode id
                border : false,
                //            layout: 'border',
                DOSettings:Wtf.account.companyAccountPref.DOSettings,
                GRSettings:Wtf.account.companyAccountPref.GRSettings,
                IsInvoiceTerm: true,
                closable: true,
                //title:(isViewTemplate?'View Customer Invoice Template':((isCopyFromTemplate?'Invoice':(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):WtfGlobal.getLocaleText("acc.wtfTrans.ei"))+"-"+rec.data.billno),Wtf.TAB_TITLE_LENGTH))))),
                //tabTip:(isViewTemplate?'View Customer Invoice Template':(isCopyFromTemplate?'Invoice':((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):WtfGlobal.getLocaleText("acc.wtfTrans.ei"))+"-"+rec.data.billno))),
                title:isExciseInvoice?isCopyFromTemplate?WtfGlobal.getLocaleText("acc.field.india.excise.invoice"):(copyInv ? WtfGlobal.getLocaleText("acc.field.india.excise.invoice.copy"):WtfGlobal.getLocaleText("acc.field.india.excise.invoice.edit")):(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCustomerInvoiceTemplate"):(isEditTemplate?WtfGlobal.getLocaleText("mrp.workorder.report.editworkorder")+" "+WtfGlobal.getLocaleText("acc.field.CustomerInvoiceTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.agedPay.inv"):(Wtf.util.Format.ellipsis((((isNotContract)?((copyInv)?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):WtfGlobal.getLocaleText("acc.wtfTrans.ei")):WtfGlobal.getLocaleText("acc.wtfTrans.cusi"))),Wtf.TAB_TITLE_LENGTH)))))),
                tabTip:isExciseInvoice?isCopyFromTemplate?WtfGlobal.getLocaleText("acc.field.india.excise.invoice"):(copyInv ? WtfGlobal.getLocaleText("acc.field.india.excise.invoice.copy") : WtfGlobal.getLocaleText("acc.field.india.excise.invoice.edit")):(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCustomerInvoiceTemplate"):(isEditTemplate?WtfGlobal.getLocaleText("mrp.workorder.report.editworkorder")+" "+WtfGlobal.getLocaleText("acc.field.CustomerInvoiceTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.agedPay.inv"):((((isNotContract)?((copyInv)?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):WtfGlobal.getLocaleText("acc.wtfTrans.ei")):WtfGlobal.getLocaleText("acc.wtfTrans.cusi")))))))),//acc.cust.editcustomerQ
                iconCls:'accountingbase invoice',
                modeName:'autoinvoice',
                isLinkedTransaction:isLinkedTransaction,
                isAllowToEdit:isAllowToEdit, // allow invoice/cash sales to edit, if created with auto generate DO option
                isExciseInvoiceWithTemplate:isExciseInvoiceWithTemplate,
                pendingapproval:pendingapproval
            });
//        }
        panel.on("activate", function(){
            if(Wtf.isIE7) {
                var northHt=(Wtf.isIE?260:230);
                var southHt=(Wtf.isIE?210:150);
                Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                panel.NorthForm.setHeight(northHt);
                panel.southPanel.setHeight(southHt);
                panel.on("afterlayout", function(panel, lay){
                    if(Wtf.isIE7) {
                        panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                    }
                },this);
        }
        panel.doLayout();
        }, this);
    Wtf.getCmp('as').add(panel);
}
Wtf.getCmp('as').setActiveTab(panel);
panel.on('update',  function(){
    if(!isCopyFromTemplate){
        var selectedModeId="InvoiceList";
        Wtf.getCmp(selectedModeId).loadStore();
        Wtf.getCmp('as').remove(panel);
    }
}, this);
if(Wtf.getCmp("pricewindow")!=undefined)
    Wtf.getCmp("pricewindow").on('update',function(){
        Wtf.getCmp(winid).Grid.loadPriceStore()
        },this);
Wtf.getCmp('as').doLayout();

}

function callEditFixedAssetInvoice(rec,winid,copyInv, templateId,isViewTemplate,isFixedAsset,isLeaseFixedAsset,notIsContract,isLinkedTransaction){
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
    var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    winid=(winid==null?'EditFixedAssetInvoice':winid);
    var isNotContract=(notIsContract == false)?false:true;
    var panel = Wtf.getCmp(winid);
    var label=(isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.field.LeaseSalesInvoice"):WtfGlobal.getLocaleText("erp.navigate.AssetDisposalInvoice");
    if(panel==null){
        panel = new Wtf.account.FixedAssetTransactionPanel({
            id : winid,
            isCustomer:true,
            isEdit:true,
            readOnly:false,
            isInvoice:true,
            record: rec,
            templateId:templateId,
            isFixedAsset:isFixedAsset,
            isLeaseFixedAsset:isLeaseFixedAsset,
            isCopyFromTemplate:isCopyFromTemplate,
            isViewTemplate:isViewTemplate,
            cash:false,
            doctype:1,
            moduleid:isFixedAsset ? Wtf.Acc_FixedAssets_DisposalInvoice_ModuleId : Wtf.LEASE_INVOICE_MODULEID,
            copyInv:copyInv,
            isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
            label:label,
            heplmodeid: 2, //This is help mode id
            border : false,
            //            layout: 'border',
            DOSettings:Wtf.account.companyAccountPref.DOSettings,
            GRSettings:Wtf.account.companyAccountPref.GRSettings,
            closable: true,
            //title:(isViewTemplate?'View Customer Invoice Template':((isCopyFromTemplate?'Invoice':(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):WtfGlobal.getLocaleText("acc.wtfTrans.ei"))+"-"+rec.data.billno),Wtf.TAB_TITLE_LENGTH))))),
            //tabTip:(isViewTemplate?'View Customer Invoice Template':(isCopyFromTemplate?'Invoice':((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):WtfGlobal.getLocaleText("acc.wtfTrans.ei"))+"-"+rec.data.billno))),
            title:(isViewTemplate?'View Customer Invoice Template':((isCopyFromTemplate?'Invoice':(Wtf.util.Format.ellipsis(((isNotContract)?(copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):(isFixedAsset?WtfGlobal.getLocaleText("acc.wtfTransfixedasset.ei"):WtfGlobal.getLocaleText("acc.wtfTrans.ei"))):WtfGlobal.getLocaleText("acc.wtfTrans.cusi")),Wtf.TAB_TITLE_LENGTH))))),
            tabTip:(isViewTemplate?'View Customer Invoice Template':((isCopyFromTemplate?'Invoice':(((isNotContract)?(copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ci"):(isFixedAsset?WtfGlobal.getLocaleText("acc.wtfTransfixedasset.ei"):WtfGlobal.getLocaleText("acc.wtfTrans.ei"))):WtfGlobal.getLocaleText("acc.wtfTrans.cusi")))))),
            iconCls:'accountingbase invoice',
            modeName:'autoinvoice',
            isLinkedTransaction:isLinkedTransaction
        });
        panel.on("activate", function(){
            if(Wtf.isIE7) {
                var northHt=(Wtf.isIE?260:230);
                var southHt=(Wtf.isIE?210:150);
                Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                panel.NorthForm.setHeight(northHt);
                panel.southPanel.setHeight(southHt);
                panel.on("afterlayout", function(panel, lay){
                    if(Wtf.isIE7) {
                        panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                    }
                },this);
        }
        panel.doLayout();
        }, this);
    Wtf.getCmp('as').add(panel);
}
Wtf.getCmp('as').setActiveTab(panel);
panel.on('update',  function(){
    if(!isCopyFromTemplate){
        var selectedModeId="FixedAssetInvoiceListEntry";
        Wtf.getCmp(selectedModeId).loadStore();
        Wtf.getCmp('as').remove(panel);
    }
}, this);
if(Wtf.getCmp("pricewindow")!=undefined)
    Wtf.getCmp("pricewindow").on('update',function(){
        Wtf.getCmp(winid).Grid.loadPriceStore()
        },this);
Wtf.getCmp('as').doLayout();

}

function callViewFixedAssetInvoice(rec,winid,copyInv, templateId,isViewTemplate,isFixedAsset,isLeaseFixedAsset){
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    winid=(winid==null?'ViewFixedAssetInvoice':winid);
    var panel = Wtf.getCmp(winid);
    var label=(isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.field.LeaseSalesInvoice"):WtfGlobal.getLocaleText("erp.navigate.AssetDisposalInvoice");
    if(panel==null){
        panel = new Wtf.account.FixedAssetTransactionPanel({
            id : winid,
            isCustomer:true,
            isEdit:true,
            readOnly:true,
            isInvoice:true,
            record: rec,
            templateId:templateId,
            isFixedAsset:isFixedAsset,
            isLeaseFixedAsset:isLeaseFixedAsset,
            isCopyFromTemplate:isCopyFromTemplate,
            isViewTemplate:true,
            cash:false,
            doctype:1,
            moduleid:isFixedAsset ? Wtf.Acc_FixedAssets_DisposalInvoice_ModuleId:(isLeaseFixedAsset?Wtf.LEASE_INVOICE_MODULEID:Wtf.Acc_Invoice_ModuleId),
            copyInv:copyInv,
            isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
            label:label,
            heplmodeid: 2, //This is help mode id
            border : false,
            DOSettings:Wtf.account.companyAccountPref.DOSettings,
            GRSettings:Wtf.account.companyAccountPref.GRSettings,
            closable: true,
            title:isLeaseFixedAsset ? (WtfGlobal.getLocaleText("acc.lease.ViewSI")+"-"+rec.data.billno) : (WtfGlobal.getLocaleText("acc.wtfTransfixedasset.vdi")+"-"+rec.data.billno),
            tabTip:isLeaseFixedAsset ? (WtfGlobal.getLocaleText("acc.lease.ViewSI")+"-"+rec.data.billno) : (WtfGlobal.getLocaleText("acc.wtfTransfixedasset.vdi")+"-"+rec.data.billno),
            iconCls:'accountingbase invoice',
            modeName:'autoinvoice'
        });
        panel.on("activate", function(){
            if(Wtf.isIE7) {
                var northHt=(Wtf.isIE?260:230);
                var southHt=(Wtf.isIE?210:150);
                Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                panel.NorthForm.setHeight(northHt);
                panel.southPanel.setHeight(southHt);
                panel.on("afterlayout", function(panel, lay){
                    if(Wtf.isIE7) {
                        panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                    }
                },this);
        }
        panel.doLayout();
        }, this);
    Wtf.getCmp('as').add(panel);
}
Wtf.getCmp('as').setActiveTab(panel);
panel.on('update',  function(){
    if(!isCopyFromTemplate){
        var selectedModeId= "InvoiceList";
        Wtf.getCmp(selectedModeId).loadStore();
        Wtf.getCmp('as').remove(panel);
    }
}, this);
if(Wtf.getCmp("pricewindow")!=undefined)
    Wtf.getCmp("pricewindow").on('update',function(){
        Wtf.getCmp(winid).Grid.loadPriceStore()
        },this);
Wtf.getCmp('as').doLayout();
}

function callEdiCashPurchase(rec,winid,copyInv,isexpenseinv,templateId,isViewTemplate,isLinkedTransaction,isAllowToEdit,isEditTemplate){
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
    /**
     *isViewTemplate flag for view template case
     *isEditTemplate flag for edit template case
     */
    var isEditTemplate = isEditTemplate?isEditTemplate:false;
    var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    winid=(winid==null?'EditGoodsReceipt':winid);
    var panel = Wtf.getCmp(winid);
    var label=(isViewTemplate || isViewTemplate)?WtfGlobal.getLocaleText("acc.field.CashPurchaseTemplate"):WtfGlobal.getLocaleText("acc.accPref.autoCP");
    if(panel==null){
//        if(SATSCOMPANY_ID==companyid){
//            panel = new Wtf.account.TransactionPanelSats({
//                id : winid,
//                isEdit:true,
//                isCustomer:false,
//                moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
//                isExpenseInv:isexpenseinv,
//                isCopyFromTemplate:isCopyFromTemplate,
//                templateId:templateId,
//                isViewTemplate:isViewTemplate,
//                copyInv:copyInv,
//                readOnly:false,
//                record: rec,
//                cash:true,
//                label:label,
//                heplmodeid:64,
//                border : false,
//                DOSettings:Wtf.account.companyAccountPref.DOSettings,
//                GRSettings:Wtf.account.companyAccountPref.GRSettings,
//                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
//                //            layout: 'border',
//                closable: true,
//                title:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCashPurchaseTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoCP"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ccp"):WtfGlobal.getLocaleText("acc.wtfTrans.ecp")+"-"+rec.data.billno)),Wtf.TAB_TITLE_LENGTH))))),
//                tabTip:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCashPurchaseTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoCP"):((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ccp"):WtfGlobal.getLocaleText("acc.wtfTrans.ecp"))+"-"+rec.data.billno)))),
//                iconCls:'accountingbase invoice',
//                modeName:'autocashpurchase'
//            });
//        }else{
            panel = new Wtf.account.TransactionPanel({
                id : winid,
                isEdit:true,
                isCustomer:false,
                moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
                isExpenseInv:isexpenseinv,
                isCopyFromTemplate:isCopyFromTemplate,
                templateId:templateId,
                isViewTemplate:isViewTemplate,
                isEditTemplate:isEditTemplate,
                copyInv:copyInv,
                readOnly:false,
                record: rec,
                cash:true,
                label:label,
                heplmodeid:64,
                border : false,
                DOSettings:Wtf.account.companyAccountPref.DOSettings,
                GRSettings:Wtf.account.companyAccountPref.GRSettings,
                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                //            layout: 'border',
                closable: true,
                title:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCashPurchaseTemplate"):(isEditTemplate?WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.field.CashPurchaseTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoCP"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ccp"):WtfGlobal.getLocaleText("acc.wtfTrans.ecp")+"-"+rec.data.billno)),Wtf.TAB_TITLE_LENGTH)))))),
                tabTip:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewCashPurchaseTemplate"):(isEditTemplate?WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.field.CashPurchaseTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoCP"):((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.ccp"):WtfGlobal.getLocaleText("acc.wtfTrans.ecp"))+"-"+rec.data.billno))))),
                iconCls:'accountingbase invoice',
                modeName:'autocashpurchase',
                isLinkedTransaction:isLinkedTransaction,
                isAllowToEdit:isAllowToEdit
            });
//        }
        panel.on("activate", function(){
            if(Wtf.isIE7) {
                var northHt=(Wtf.isIE?240:210);
                var southHt=(Wtf.isIE?210:150);
                Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                panel.NorthForm.setHeight(northHt);
                panel.southPanel.setHeight(southHt);
            }
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(!isCopyFromTemplate){
            var selectedModeId="GRList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
    Wtf.getCmp('as').doLayout();
}
function callEditGoodsReceipt(rec,winid,copyInv,isexpenseinv,templateId,isViewTemplate,isSelfBilledInvoice, isLinkedTransaction,isAllowToEdit,isEditTemplate,pendingapproval){
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    /**
     *isViewTemplate flag for view template case
     *isEditTemplate flag for edit template case
     */
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
    var isEditTemplate = isEditTemplate?isEditTemplate:false;
    var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    winid=(winid==null?'EditGoodsReceipt':winid);
    var isExciseInvoice= false;
    var isExciseInvoiceWithTemplate= false;
    
    if(rec && rec.data && rec.data.isExciseInvoice){
        isExciseInvoice = rec.data.isExciseInvoice;
    }
    if(rec && rec.data && rec.data.isExciseInvoiceWithTemplate){
        isExciseInvoiceWithTemplate = rec.data.isExciseInvoiceWithTemplate;
    }
    var panel = Wtf.getCmp(winid);
    var label=isExciseInvoice?WtfGlobal.getLocaleText("acc.field.india.excise.invoice"):WtfGlobal.getLocaleText("acc.accPref.autoVI");
    if((isViewTemplate || isEditTemplate)){
        label=WtfGlobal.getLocaleText("acc.field.VendorInvoiceTemplate");
    }
    if(panel==null){
//        if(SATSCOMPANY_ID==companyid){
//            panel = new Wtf.account.TransactionPanelSats({
//                id : winid,
//                isEdit:true,
//                isCustomer:false,
//                isInvoice:true,
//                readOnly:false,
//                record: rec,
//                moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
//                cash:false,
//                copyInv:copyInv,
//                templateId:templateId,
//                isSelfBilledInvoice:isSelfBilledInvoice,
//                isCopyFromTemplate:isCopyFromTemplate,
//                isViewTemplate:isViewTemplate,
//                isExpenseInv:isexpenseinv,
//                label:label,
//                heplmodeid: 66,
//                border : false,
//                DOSettings:Wtf.account.companyAccountPref.DOSettings,
//                GRSettings:Wtf.account.companyAccountPref.GRSettings,
//                IsInvoiceTerm: true,
//                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
//                //            layout: 'border',
//                closable: true,
//                title:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewVendorInvoiceTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoVI"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cvi"):WtfGlobal.getLocaleText("acc.wtfTrans.evi"))+"-"+rec.data.billno),Wtf.TAB_TITLE_LENGTH))))),
//                tabTip:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewVendorInvoiceTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoVI"):((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cvi"):WtfGlobal.getLocaleText("acc.wtfTrans.evi"))+"-"+rec.data.billno)))),
//                iconCls:'accountingbase invoice',
//                modeName:'autogoodsreceipt'
//            });
//        }else{
            panel = new Wtf.account.TransactionPanel({
                id : winid,
                isEdit:true,
                consignmentNoForGr:true,
                isCustomer:false,
                isInvoice:true,
                readOnly:false,
                record: rec,
                moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
                cash:false,
                copyInv:copyInv,
                templateId:templateId,
                isCopyFromTemplate:isCopyFromTemplate,
                isEditTemplate:isEditTemplate,
                isViewTemplate:isViewTemplate,
                isSelfBilledInvoice:isSelfBilledInvoice,
                isExpenseInv:isexpenseinv,
                label:label,
                heplmodeid: 66,
                border : false,
                DOSettings:Wtf.account.companyAccountPref.DOSettings,
                GRSettings:Wtf.account.companyAccountPref.GRSettings,
                IsInvoiceTerm: true,
                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                //            layout: 'border',
                closable: true,
                title:isExciseInvoice?(isCopyFromTemplate?WtfGlobal.getLocaleText("acc.field.india.excise.invoice.purchase") :WtfGlobal.getLocaleText("acc.field.india.excise.invoice.edit")):(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewVendorInvoiceTemplate"):(isEditTemplate?WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.field.VendorInvoiceTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoVI"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cvi"):WtfGlobal.getLocaleText("acc.wtfTrans.evi"))+"-"+rec.data.billno),Wtf.TAB_TITLE_LENGTH)))))),
                tabTip:isExciseInvoice?(isCopyFromTemplate?WtfGlobal.getLocaleText("acc.field.india.excise.invoice.purchase") :WtfGlobal.getLocaleText("acc.field.india.excise.invoice.edit")):(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewVendorInvoiceTemplate"):(isEditTemplate?WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.field.VendorInvoiceTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoVI"):((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cvi"):WtfGlobal.getLocaleText("acc.wtfTrans.evi"))+"-"+rec.data.billno))))),
                iconCls:'accountingbase invoice',
                modeName:'autogoodsreceipt',
                isLinkedTransaction:isLinkedTransaction,
                isAllowToEdit:isAllowToEdit,
                isExciseInvoiceWithTemplate:isExciseInvoiceWithTemplate,
                pendingapproval:pendingapproval
            });
//        }
        panel.on("activate", function(){
            if(Wtf.isIE7) {
                var northHt=(Wtf.isIE?240:210);
                var southHt=(Wtf.isIE?210:150);
                Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                panel.NorthForm.setHeight(northHt);
                panel.southPanel.setHeight(southHt);
                panel.on("afterlayout", function(panel, lay){
                    if(Wtf.isIE7) {
                        panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                    }
                },this);
        }
        panel.doLayout();
        }, this);
    Wtf.getCmp('as').add(panel);
}
Wtf.getCmp('as').setActiveTab(panel);
if(!isexpenseinv){
    panel.on('update',  function(){
        if(!isCopyFromTemplate){
            var selectedModeId= "GRList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
Wtf.getCmp('as').doLayout();
}

function callEditFixedAssetGoodsReceipt(rec,winid,copyInv,isexpenseinv,templateId,isViewTemplate,isFixedAsset,isLinkedTransaction){
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
    var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    winid=(winid==null?'EditFixedAssetGoodsReceipt':winid);
    var panel = Wtf.getCmp(winid);
    var label=WtfGlobal.getLocaleText("acc.field.PurchaseInvoice");
    if(panel==null){
        panel = new Wtf.account.FixedAssetTransactionPanel({
            id : winid,
            isEdit:true,
            isCustomer:false,
            isInvoice:true,
            readOnly:false,
            record: rec,
            moduleid:Wtf.Acc_FixedAssets_PurchaseInvoice_ModuleId,
            cash:false,
            copyInv:copyInv,
            isFixedAsset:isFixedAsset,
            templateId:templateId,
            isCopyFromTemplate:isCopyFromTemplate,
            isViewTemplate:isViewTemplate,
            isExpenseInv:isexpenseinv,
            label:label,
            heplmodeid: 15,
            border : false,
            DOSettings:Wtf.account.companyAccountPref.DOSettings,
            GRSettings:Wtf.account.companyAccountPref.GRSettings,
            isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
            //            layout: 'border',
            closable: true,
            title:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewVendorInvoiceTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.agedPay.venInv"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cvi"):(isFixedAsset?WtfGlobal.getLocaleText("acc.field.FixedAssetEdit"):WtfGlobal.getLocaleText("acc.wtfTrans.evi")))+"-"+rec.data.billno),Wtf.TAB_TITLE_LENGTH))))),
            tabTip:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewVendorInvoiceTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.agedPay.venInv"):((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cvi"):(isFixedAsset?WtfGlobal.getLocaleText("acc.field.FixedAssetEdit"):WtfGlobal.getLocaleText("acc.wtfTrans.evi")))+"-"+rec.data.billno)))),
            iconCls:'accountingbase invoice',
            modeName:'autogoodsreceipt',
            isLinkedTransaction:isLinkedTransaction
        });
        panel.on("activate", function(){
            if(Wtf.isIE7) {
                var northHt=(Wtf.isIE?240:210);
                var southHt=(Wtf.isIE?210:150);
                Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                panel.NorthForm.setHeight(northHt);
                panel.southPanel.setHeight(southHt);
                panel.on("afterlayout", function(panel, lay){
                    if(Wtf.isIE7) {
                        panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                    }
                },this);
        }
        panel.doLayout();
        }, this);
    Wtf.getCmp('as').add(panel);
}
Wtf.getCmp('as').setActiveTab(panel);
if(!isexpenseinv){
    panel.on('update',  function(){
        if(!isCopyFromTemplate){
            var selectedModeId="FixedAssetGRListEntry";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
Wtf.getCmp('as').doLayout();
}

function callViewFixedAssetGoodsReceipt(rec,winid,copyInv,isexpenseinv,templateId,isViewTemplate,isFixedAsset){
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    winid=(winid==null?'ViewFixedAssetGoodsReceipt':winid);
    var panel = Wtf.getCmp(winid);
    var label=WtfGlobal.getLocaleText("acc.field.PurchaseInvoice");
    if(panel==null){
        panel = new Wtf.account.FixedAssetTransactionPanel({
            id : winid,
            isEdit:true,
            isCustomer:false,
            isInvoice:true,
            readOnly:true,
            record: rec,
            moduleid:Wtf.Acc_FixedAssets_PurchaseInvoice_ModuleId,
            cash:false,
            copyInv:copyInv,
            isFixedAsset:isFixedAsset,
            templateId:templateId,
            isCopyFromTemplate:isCopyFromTemplate,
            isViewTemplate:true,
            isExpenseInv:isexpenseinv,
            label:label,
            heplmodeid: 15,
            border : false,
            DOSettings:Wtf.account.companyAccountPref.DOSettings,
            GRSettings:Wtf.account.companyAccountPref.GRSettings,
            isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
            closable: true,
            title:WtfGlobal.getLocaleText("acc.field.FixedAssetView"),
            tabTip:WtfGlobal.getLocaleText("acc.field.FixedAssetView"),
            iconCls:'accountingbase invoice',
            modeName:'autogoodsreceipt'
        });
        panel.on("activate", function(){
            if(Wtf.isIE7) {
                var northHt=(Wtf.isIE?240:210);
                var southHt=(Wtf.isIE?210:150);
                Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                panel.NorthForm.setHeight(northHt);
                panel.southPanel.setHeight(southHt);
                panel.on("afterlayout", function(panel, lay){
                    if(Wtf.isIE7) {
                        panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                    }
                },this);
        }
        panel.doLayout();
        }, this);
    Wtf.getCmp('as').add(panel);
}
Wtf.getCmp('as').setActiveTab(panel);
if(!isexpenseinv){
    panel.on('update',  function(){
        if(!isCopyFromTemplate){
            var selectedModeId="GRList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
Wtf.getCmp('as').doLayout();
}


function callViewCashReceipt(rec,type,winid,show){
    if(!show)
    {
        var templateId =undefined;
        var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
        var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
        winid=(winid==null?'ViewCashReceipt'+rec.data.billid:winid);//to open view invoice in another tab
        var panel = Wtf.getCmp(winid);
        var label=WtfGlobal.getLocaleText("acc.accPref.autoCS");
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isCustomer:true,
//                    isEdit:true,
//                    isCopyFromTemplate:true,
//                    templateId:templateId,
//                    isViewTemplate:true,
//                    rec: rec,
//                    cash:true,
//                    moduleid:Wtf.Acc_Invoice_ModuleId,
//                    record: rec,
//                    doctype:1,
//                    label:label,
//                    border : false,
//                    copyInv:false,
//                    readOnly:true,
//                    viewGoodReceipt:true,
//                    closable: true,
//                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.vcs"),Wtf.TAB_TITLE_LENGTH),
//                    tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.vcs"),  //'View '+label,
//                    iconCls:'accountingbase viewinvoice',
//                    modeName:'autocashsales'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isCustomer:true,
                    isEdit:true,
                    isCopyFromTemplate:true,
                    templateId:templateId,
                    isViewTemplate:true,
                    rec: rec,
                    cash:true,
                    moduleid:Wtf.Acc_Invoice_ModuleId,
                    record: rec,
                    doctype:1,
                    label:label,
                    border : false,
                    copyInv:false,
                    readOnly:true,
                    viewGoodReceipt:true,
                    closable: true,
                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.vcs")+"-"+rec.data.billno,Wtf.TAB_TITLE_LENGTH),
                    tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.vcs")+"-"+rec.data.billno,  //'View '+label,
                    iconCls:'accountingbase viewinvoice',
                    modeName:'autocashsales'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                }
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(!isCopyFromTemplate){
                var selectedModeId="InvoiceList";
                Wtf.getCmp(selectedModeId).loadStore();
                Wtf.getCmp('as').remove(panel);
            }
        }, this);
        //panel.refreshView(rec);
        if(Wtf.getCmp("pricewindow")!=undefined)
            Wtf.getCmp("pricewindow").on('update',function(){
                Wtf.getCmp(winid).Grid.loadPriceStore()
                },this);
        Wtf.getCmp('as').doLayout();
    }
    else
    {
        winid=(winid==null?'ViewCashReceipt':winid);
        var panel = Wtf.getCmp(winid);
        var label=WtfGlobal.getLocaleText("acc.accPref.autoCS");
        if(panel==null){
            panel = new Wtf.account.TransectionTemplate({
                id : winid,
                isCustomer:true,
                readOnly:true,
                rec: rec,
                label:label,
                name:WtfGlobal.getLocaleText("acc.wtfTrans.vcs"),
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.vcs"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.vcs"),  //'View '+label,
                iconCls:'accountingbase viewinvoice'
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.refreshView(rec);
        Wtf.getCmp('as').doLayout();
    }
}

function callViewInvoice(rec,type,winid,inCash,show,flag,flag1){
    if(!show)
    {
        var templateId = undefined;
        var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
        var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
        winid=(winid==null?'ViewInvoice'+rec.data.billid:winid);//to open view invoice in another tab
        var isExciseInvoice= false;
        if(rec && rec.data && rec.data.isExciseInvoice){
            isExciseInvoice = rec.data.isExciseInvoice;
        }
        var panel = Wtf.getCmp(winid);
        var label=isExciseInvoice?WtfGlobal.getLocaleText("acc.field.india.excise.invoice"):inCash?WtfGlobal.getLocaleText("acc.accPref.autoCS"):WtfGlobal.getLocaleText("acc.accPref.autoInvoice");
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isCustomer:true,
//                    isEdit:true,
//                    readOnly:true,
//                    isInvoice:true,
//                    record: rec,
//                    templateId:templateId,
//                    isCopyFromTemplate:true,
//                    isViewTemplate:true,
//                    cash:false,
//                    doctype:1,
//                    moduleid:Wtf.Acc_Invoice_ModuleId,
//                    copyInv:false,
//                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
//                    label:label,
//                    heplmodeid: 2, //This is help mode id
//                    border : false,
//                    viewGoodReceipt:true,
//                    DOSettings:Wtf.account.companyAccountPref.DOSettings,
//                    GRSettings:Wtf.account.companyAccountPref.GRSettings,
//                    IsInvoiceTerm: true,
//                    closable: true,
//                    title:Wtf.util.Format.ellipsis((inCash?WtfGlobal.getLocaleText("acc.wtfTrans.vcs"):WtfGlobal.getLocaleText("acc.wtfTrans.vi")),Wtf.TAB_TITLE_LENGTH),
//                    tabTip:inCash?WtfGlobal.getLocaleText("acc.wtfTrans.vcs"):WtfGlobal.getLocaleText("acc.wtfTrans.vi"),  //'View '+label,
//                    iconCls:'accountingbase invoice',
//                    modeName:'autoinvoice'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isCustomer:true,
                    isEdit:true,
                    readOnly:true,
                    isInvoice:true,
                    record: rec,
                    templateId:templateId,
                    isCopyFromTemplate:true,
                    isViewTemplate:true,
                    cash:false,
                    doctype:1,
                    moduleid:Wtf.Acc_Invoice_ModuleId,
                    copyInv:false,
                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                    label:label,
                    heplmodeid: 2, //This is help mode id
                    border : false,
                    viewGoodReceipt:true,
                    DOSettings:Wtf.account.companyAccountPref.DOSettings,
                    GRSettings:Wtf.account.companyAccountPref.GRSettings,
                    IsInvoiceTerm: true,
                    closable: true,
                    title:Wtf.util.Format.ellipsis((inCash?WtfGlobal.getLocaleText("acc.wtfTrans.vcs"):WtfGlobal.getLocaleText("acc.wtfTrans.vi")+"-"+rec.data.billno),Wtf.TAB_TITLE_LENGTH),
                    tabTip:inCash?WtfGlobal.getLocaleText("acc.wtfTrans.vcs"):WtfGlobal.getLocaleText("acc.wtfTrans.vi")+"-"+rec.data.billno,  //'View '+label,
                    iconCls:'accountingbase invoice',
                    modeName:'autoinvoice'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?260:230);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(!isCopyFromTemplate){
            var selectedModeId="InvoiceList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
    Wtf.getCmp('as').doLayout();
}
else
{
    winid=(winid==null?'ViewInvoice':winid);
    var panel = Wtf.getCmp(winid);
    var label=inCash?WtfGlobal.getLocaleText("Cash Sales"):WtfGlobal.getLocaleText("acc.accPref.autoInvoice");
    if(panel==null){
        panel = new Wtf.account.TransectionTemplate({
            id : winid,
            isCustomer:true,
            readOnly:true,
            rec: rec,
            label:label,
            name:inCash?WtfGlobal.getLocaleText("acc.wtfTrans.vcs"):WtfGlobal.getLocaleText("acc.wtfTrans.vi"),
            title:Wtf.util.Format.ellipsis((inCash?WtfGlobal.getLocaleText("acc.wtfTrans.vcs"):WtfGlobal.getLocaleText("acc.wtfTrans.vi")),Wtf.TAB_TITLE_LENGTH),
            tabTip:inCash?WtfGlobal.getLocaleText("acc.wtfTrans.vcs"):WtfGlobal.getLocaleText("acc.wtfTrans.vi"),  //'View '+label,
            iconCls:'accountingbase viewinvoice'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.refreshView(rec);
    Wtf.getCmp('as').doLayout();
}
}

//function for open PO and SO to show product details Quantity
function callViewProductDetails(productid,type,so,productname,winid){
    winid=(winid==null?'View Product':winid);
    var panel = Wtf.getCmp(winid+so);
    if(panel==null){
        panel = new Wtf.account.ProductdDetails({
            id : winid+so,
            isCustomer:true,
            readOnly:true,
            productid: productid,
            productname:productname,
            so:so,
            closable: true,
            name:so?WtfGlobal.getLocaleText("acc.wtfTrans.vpso"):WtfGlobal.getLocaleText("acc.wtfTrans.vppo"),
            title:Wtf.util.Format.ellipsis((so?WtfGlobal.getLocaleText("acc.wtfTrans.vpso"):WtfGlobal.getLocaleText("acc.wtfTrans.vppo")),Wtf.TAB_TITLE_LENGTH),
            tabTip:so?WtfGlobal.getLocaleText("acc.wtfTrans.vpso"):WtfGlobal.getLocaleText("acc.wtfTrans.vppo"),  //'View '+label,
            iconCls:'accountingbase viewinvoice'
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}


function callViewPaymentReceipt(rec,type,isExpensiveInv,winid,show){
    if(!show)
    {
        var templateId =undefined;
        var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
        var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
        winid=(winid==null?'EditCashReceipt'+rec.data.billid:winid);
        var panel = Wtf.getCmp(winid);
        var label=WtfGlobal.getLocaleText("acc.accPref.autoCP");
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isCustomer:false,
//                    isEdit:true,
//                    isCopyFromTemplate:true,
//                    templateId:templateId,
//                    isViewTemplate:true,
//                    isInvoice:false,
//                    rec: rec,
//                    cash:true,
//                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
//                    record: rec,
//                    doctype:1,
//                    label:label,
//                    isExpenseInv:isExpensiveInv,
//                    border : false,
//                    copyInv:false,
//                    readOnly:true,
//                    viewGoodReceipt:true,
//                    closable: true,
//                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.vcp1"),Wtf.TAB_TITLE_LENGTH),
//                    tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.vcp1"),  //'View '+label,
//                    iconCls:'accountingbase viewgoodsreceipt',
//                    modeName:'autocashpurchase'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isCustomer:false,
                    isEdit:true,
                    isCopyFromTemplate:true,
                    templateId:templateId,
                    isViewTemplate:true,
                    isInvoice:false,
                    rec: rec,
                    cash:true,
                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
                    record: rec,
                    doctype:1,
                    label:label,
                    border : false,
                    copyInv:false,
                    isExpenseInv:isExpensiveInv,
                    readOnly:true,
                    viewGoodReceipt:true,
                    closable: true,
                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.vcp1")+"-"+rec.data.billno,Wtf.TAB_TITLE_LENGTH),
                    tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.vcp1")+"-"+rec.data.billno,  //'View '+label,
                    iconCls:'accountingbase viewgoodsreceipt',
                    modeName:'autocashpurchase'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                }
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(!isCopyFromTemplate){
                var selectedModeId= "InvoiceList";
                Wtf.getCmp(selectedModeId).loadStore();
                Wtf.getCmp('as').remove(panel);
            }
        }, this);
        //panel.refreshView(rec);
        if(Wtf.getCmp("pricewindow")!=undefined)
            Wtf.getCmp("pricewindow").on('update',function(){
                Wtf.getCmp(winid).Grid.loadPriceStore()
                },this);
        Wtf.getCmp('as').doLayout();
    }
    else
    {
        winid=(winid==null?'ViewPaymentReceipt':winid);
        var panel = Wtf.getCmp(winid);
        var label=WtfGlobal.getLocaleText("acc.accPref.autoCP");
        if(panel==null){
            panel = new Wtf.account.TransectionTemplate({
                id : winid,
                isCustomer:false,
                readOnly:true,
                rec: rec,
                label:label,
                name:WtfGlobal.getLocaleText("acc.wtfTrans.vcp"),
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.vcp"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.vcp"),  //'View '+label,
                iconCls:'accountingbase viewgoodsreceipt'
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.refreshView(rec);
        Wtf.getCmp('as').doLayout();
    }

}

function callViewGoodsReceipt(rec,type,isexpenseinv,winid,inCash,show){
    if(!show)
    {
        var templateId = undefined;
        var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
        var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
        winid=(winid==null?'ViewGoodsReceipt'+rec.data.billid:winid);
        var isExciseInvoice= false;
        if(rec && rec.data && rec.data.isExciseInvoice){
            isExciseInvoice = rec.data.isExciseInvoice;
        }
        var panel = Wtf.getCmp(winid);
        var label=isExciseInvoice?WtfGlobal.getLocaleText("acc.field.india.excise.invoice"):inCash?WtfGlobal.getLocaleText("acc.accPref.autoCP"):WtfGlobal.getLocaleText("acc.accPref.autoVI");
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isCustomer:false,
//                    isEdit:true,
//                    readOnly:true,
//                    record: rec,
//                    templateId:templateId,
//                    isCopyFromTemplate:true,
//                    isViewTemplate:true,
//                    cash:false,
//                    copyInv:false,
//                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
//                    label:label,
//                    heplmodeid: 15, //This is help mode id
//                    viewGoodReceipt:true,
//                    isInvoice:true,
//                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
//                    isExpenseInv:isexpenseinv,
//                    border : false,
//                    DOSettings:false,
//                    GRSettings:false,
//                    IsInvoiceTerm: true,
//                    closable: true,
//                    title:Wtf.util.Format.ellipsis(('View '+label),Wtf.TAB_TITLE_LENGTH),
//                    tabTip:inCash?WtfGlobal.getLocaleText("acc.wtfTrans.vcp"):WtfGlobal.getLocaleText("acc.wtfTrans.vvr"),  //'View '+label,
//                    iconCls:'accountingbase invoice',
//                    modeName:'autogoodsreceipt'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isCustomer:false,
                    isEdit:true,
                    readOnly:true,
                    record: rec,
                    templateId:templateId,
                    isCopyFromTemplate:true,
                    isViewTemplate:true,
                    cash:false,
                    copyInv:false,
                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                    label:label,
                    heplmodeid: 15, //This is help mode id
                    viewGoodReceipt:true,
                    isInvoice:true,
                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
                    isExpenseInv:isexpenseinv,
                    border : false,
                    DOSettings:false,
                    GRSettings:false,
                    IsInvoiceTerm: true,
                    closable: true,
                    title:Wtf.util.Format.ellipsis(('View '+label),Wtf.TAB_TITLE_LENGTH),
                    tabTip:inCash?WtfGlobal.getLocaleText("acc.wtfTrans.vcp"):WtfGlobal.getLocaleText("acc.wtfTrans.vvi1")+"-"+rec.data.billno,  //'View '+label,
                    iconCls:'accountingbase invoice',
                    modeName:'autogoodsreceipt'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?260:230);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(!isCopyFromTemplate){
            var selectedModeId="InvoiceList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
    Wtf.getCmp('as').doLayout();
}
else
{
    winid=(winid==null?'ViewGoodsReceipt':winid);
    var panel = Wtf.getCmp(winid);
    var label=inCash?WtfGlobal.getLocaleText("acc.accPref.autoCP"):WtfGlobal.getLocaleText("acc.accPref.autoInvoice");
    if(panel==null){
        panel = new Wtf.account.TransectionTemplate({
            id : winid,
            isCustomer:false,
            readOnly:true,
            isexpenseinv:rec.data.isexpenseinv,
            rec: rec,
            label:label,
            name:label,
            title:Wtf.util.Format.ellipsis(('View '+label),Wtf.TAB_TITLE_LENGTH),
            tabTip:inCash?WtfGlobal.getLocaleText("acc.wtfTrans.vcp"):WtfGlobal.getLocaleText("acc.wtfTrans.vvr"),  //'View '+label,
            iconCls:'accountingbase viewgoodsreceipt'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.refreshView(rec);
    Wtf.getCmp('as').doLayout();
}
}


function callViewCreditNoteGst(isEdit,rec,isNoteAlso,winid,isCNReport){
    winid=isCNReport?'creditnoteagaintvendorformalaysiaview':'debitnoteagaintcustomerformalaysiaview';
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.SalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            record: rec,
            isCustomer:isCNReport?false:true,
            readOnly:true,
//            isNoteAlso:isCNReport?isNoteAlso:true,
            isNoteAlso:isNoteAlso,
            inputValue:'5',
            isCustBill:false,
//            label:isCNReport?WtfGlobal.getLocaleText("acc.cn.recViewCNGst"):WtfGlobal.getLocaleText("acc.dn.recViewDNGst"),
            label:isCNReport?WtfGlobal.getLocaleText("acc.module.name.12"):WtfGlobal.getLocaleText("acc.module.name.10"),
            isCN:isCNReport?true:false,
            border : false,
            heplmodeid: 11,
            moduleid:isCNReport?Wtf.Acc_Credit_Note_ModuleId:Wtf.Acc_Debit_Note_ModuleId,
            title:isCNReport?WtfGlobal.getLocaleText("acc.cn.undercharge.view"):WtfGlobal.getLocaleText("acc.dn.undercharge.view"),
            tabTip:isCNReport?WtfGlobal.getLocaleText("acc.cn.undercharge.view"):WtfGlobal.getLocaleText("acc.dn.undercharge.view"),
            closable: true,
            iconCls:'accountingbase deliveryorder',
           modeName:isCNReport?'autocreditmemo':'autodebitnote'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callViewCreditNote(winid, isEdit, isCN, notetype,record,gridId){
    winid=(winid==null?"viewcreditnotewindow":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        panel=new Wtf.account.NoteAgainsInvoice({
            title:WtfGlobal.getLocaleText("acc.wtfTrans.vcn"),  //'View Credit Note',
            id: winid,
            isCustBill:false,// it will be true for billing mode but now billing mode is to remove so making it false.
            closable: true,
            isCN:isCN,
            reloadGrid:gridId,
            moduleid:Wtf.Acc_Credit_Note_ModuleId,
            cntype:notetype,
            isEdit:isEdit,
            record:record,
            readOnly:true,
            iconCls :'accountingbase creditnote',
            autoScroll:true,
            layout: 'border',
            modeName:'autocreditmemo'
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callViewDebitNote(winid, isEdit, isCN, notetype,record,gridId){
    winid=(winid==null?"virewdebitnotewindow":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
       panel= new Wtf.account.NoteAgainsInvoice({
            title:WtfGlobal.getLocaleText("acc.wtfTrans.vdn"),  //'View Debit Note',
            id: winid,
            isCustBill:false,// it will be true for billing mode but now billing mode is to remove so making it false.
            closable: true,
            isCN:isCN,
            reloadGrid:gridId,
            moduleid:Wtf.Acc_Debit_Note_ModuleId,
            cntype:notetype,
            isEdit:isEdit,
            record:record,
            readOnly:true,
            iconCls :'accountingbase debitnote',
            autoScroll:true,
            layout: 'border',
            modeName:'autodebitnote'
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callViewPaymentNew(rec,winid,typeCheck,gridObject,pendingApproval){
    var billid = rec.data.billid;
    var billno = rec.data.billno;
    winid=(winid==null?(typeCheck?'ViewPaymentMade':'ViewReceivePayment'):winid);
    winid+=billid;
    var panel = Wtf.getCmp(winid);
    if(typeCheck){                           // if typeCheck == true then it is 'View Receive payment' else it it 'View Make payment'
        if(panel==null){
            panel = new Wtf.account.ReceiptEntry({
                id : winid,
                border : false,
                isReceipt:true,
                paymentType: rec.data.paymentwindowtype,
                layout: 'border',
                moduleId:Wtf.Acc_Receive_Payment_ModuleId,
                readOnly:true,
                gridObject:gridObject,
                record: rec,
                cls: 'paymentFormPayMthd',
                isEdit:true,
                helpmodeid: typeCheck ? 58 :59, //This is help mode id
                label:WtfGlobal.getLocaleText("acc.invoiceList.recievePay"),
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.vrp")+' '+billno,Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.vrp")+' '+billno,
                iconCls:'accountingbase viewreceivepayment',
                closable: true,
                ispendingAproval:pendingApproval            //used to open pending for approval receipt
            });
            panel.on("activate", function(){
                panel.doLayout();
                Wtf.getCmp(panel.id+"wrapperPanelNorth").doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
    } else {
        if(panel==null){
            panel = new Wtf.account.PaymentEntry({
                id : winid,
                border : false,
                isReceipt:false,
                paymentType: rec.data.paymentwindowtype,
                layout: 'border',
                moduleId:Wtf.Acc_Make_Payment_ModuleId,
                readOnly:true,
                gridObject:gridObject,
                record: rec,
                cls: 'paymentFormPayMthd',
                isEdit:true,
                ispendingAproval:pendingApproval,
                helpmodeid: typeCheck ? 58 :59, //This is help mode id
                label:WtfGlobal.getLocaleText("acc.field.PaymentMade"),
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.vpm")+' '+billno,Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.vpm")+' '+billno,
                iconCls:'accountingbase viewpaymentmade',
                closable: true
            });
            panel.on("activate", function(){
                panel.doLayout();
                Wtf.getCmp(panel.id+"wrapperPanelNorth").doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
    }
    Wtf.getCmp('as').setActiveTab(panel);
    if(typeCheck){
        panel.on('update',  function(){
            var selectedModeId="receiptReport";
            if(Wtf.getCmp(selectedModeId))
                Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }, this);
    }else{
        panel.on('update',  function(){
            var selectedModeId="paymentReport";
            if(Wtf.getCmp(selectedModeId))
                Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }, this);
    }
    Wtf.getCmp('as').doLayout();
}

//function callViewBillPayment(rec,winid,typeCheck){
//    winid=(winid==null?(typeCheck?'ViewBillPaymentMade':'ViewBillReceivePayment'):winid);
//    var panel = Wtf.getCmp(winid);
//    if(panel==null){
//        panel = new Wtf.account.OSDetailPanel({
//            id : winid,
//            isCustomer:(typeCheck?true:false),
//            readOnly:true,
//            isEdit:true,
//            isReceipt:typeCheck,
//            layout: 'border',
//            moduleId:(typeCheck)?Wtf.Acc_Receive_Payment_ModuleId:Wtf.Acc_Make_Payment_ModuleId,
//            record: rec,
//            //receiptTemp:true,
//            closable: true,
//            isCustBill:true,
//            cls: 'paymentFormPayMthd',
//            name:(typeCheck?WtfGlobal.getLocaleText("acc.wtfTrans.vrp"):WtfGlobal.getLocaleText("acc.wtfTrans.vpm")),
//            label:(typeCheck?WtfGlobal.getLocaleText("acc.invoiceList.recievePay"):WtfGlobal.getLocaleText("acc.field.PaymentMade")),
//            title:Wtf.util.Format.ellipsis((typeCheck?WtfGlobal.getLocaleText("acc.wtfTrans.vrp"):WtfGlobal.getLocaleText("acc.wtfTrans.vpm")),Wtf.TAB_TITLE_LENGTH),
//            tabTip:(typeCheck?WtfGlobal.getLocaleText("acc.wtfTrans.vrp"):WtfGlobal.getLocaleText("acc.wtfTrans.vpm")),
//            iconCls:(typeCheck?'accountingbase viewreceivepayment':'accountingbase viewpaymentmade')
//        });
//        panel.on("activate", function(){
//            panel.doLayout();
//            Wtf.getCmp(panel.id+"wrapperPanelNorth").doLayout();
//        }, this);
//        Wtf.getCmp('as').add(panel);
//    }
//    Wtf.getCmp('as').setActiveTab(panel);
//    if(typeCheck){
//        panel.on('update',  function(){
//            var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"receiptBillingReport":"receiptReport";
//           if(Wtf.getCmp(selectedModeId))
//                Wtf.getCmp(selectedModeId).loadStore();
//            Wtf.getCmp('as').remove(panel);
//        }, this);
//    }else{
//        panel.on('update',  function(){
//            var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"paymentBillingReport":"paymentReport";
//           if(Wtf.getCmp(selectedModeId))
//                Wtf.getCmp(selectedModeId).loadStore();
//            Wtf.getCmp('as').remove(panel);
//        },
//        this);
//    }
//    //  panel.refreshView(rec);
//    Wtf.getCmp('as').doLayout();
//}

//function callEditBillPayment(rec,winid,typeCheck){
//    winid=(winid==null?(typeCheck?'EditBillPaymentMade':'EditBillReceivePayment'):winid);
//    var panel = Wtf.getCmp(winid);
//    if(panel==null){
//        panel = new Wtf.account.OSDetailPanel({
//            id : winid,
//            isCustomer:(typeCheck?true:false),
//            //readOnly:true,
//            isEdit:true,
//            isReceipt:typeCheck,
//            layout: 'border',
//            moduleId:(typeCheck)?Wtf.Acc_Receive_Payment_ModuleId:Wtf.Acc_Make_Payment_ModuleId,
//            record: rec,
//            //receiptTemp:true,
//            closable: true,
//            isCustBill:true,
//            cls: 'paymentFormPayMthd',
//            label:(typeCheck?WtfGlobal.getLocaleText("acc.invoiceList.recievePay"):WtfGlobal.getLocaleText("acc.field.PaymentMade")),
//            title:Wtf.util.Format.ellipsis((typeCheck?WtfGlobal.getLocaleText("acc.wtfTrans.crp"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),Wtf.TAB_TITLE_LENGTH),
//            tabTip:(typeCheck?WtfGlobal.getLocaleText("acc.wtfTrans.crp"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),
//            iconCls:(typeCheck?'accountingbase viewreceivepayment':'accountingbase viewpaymentmade')
//        });
//        panel.on("activate", function(){
//            panel.doLayout();
//            Wtf.getCmp(panel.id+"wrapperPanelNorth").doLayout();
//        }, this);
//        Wtf.getCmp('as').add(panel);
//    }
//    Wtf.getCmp('as').setActiveTab(panel);
//    if(typeCheck){
//        panel.on('update',  function(){
//            var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"receiptBillingReport":"receiptReport";
//           if(Wtf.getCmp(selectedModeId))
//                Wtf.getCmp(selectedModeId).loadStore();
//            Wtf.getCmp('as').remove(panel);
//        }, this);
//    }else{
//        panel.on('update',  function(){
//            var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"paymentBillingReport":"paymentReport";
//           if(Wtf.getCmp(selectedModeId))
//                Wtf.getCmp(selectedModeId).loadStore();
//            Wtf.getCmp('as').remove(panel);
//        },
//        this);
//    }
//    //  panel.refreshView(rec);
//    Wtf.getCmp('as').doLayout();
//}
//function callEditPayment(rec,winid,typeCheck,gridObject,copyReceiptTransaction){
//    winid=(winid==null?'EditReceivePayment':winid);
//    var panel = Wtf.getCmp(winid);
//    if(panel!=null){
//        Wtf.getCmp('as').remove(panel);
//        panel.destroy();
//        panel=null;
//    }
//    if(panel==null){
//        panel = new Wtf.account.OSDetailPanel({
//            id : winid,
//            border : false,
//            isReceipt:typeCheck,
//            layout: 'border',
//            moduleId:(typeCheck)?Wtf.Acc_Receive_Payment_ModuleId:Wtf.Acc_Make_Payment_ModuleId,
//           // readOnly:true,
//            gridObject:gridObject,
//            record: rec,
//            cls: 'paymentFormPayMthd',
//            isEdit:true,
//            isCopyReceipt:copyReceiptTransaction,
//            helpmodeid: typeCheck ? 58 :59, //This is help mode id
//            label:(typeCheck?WtfGlobal.getLocaleText("acc.wtfTrans.crp"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),
//            //title:Wtf.util.Format.ellipsis((typeCheck?WtfGlobal.getLocaleText("acc.wtfTrans.crp"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),Wtf.TAB_TITLE_LENGTH),
//            title:(typeCheck?(copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentReceipt"):WtfGlobal.getLocaleText("acc.wtfTrans.crp")):copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentmade"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),
//            tabTip:(typeCheck?(copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentReceipt"):WtfGlobal.getLocaleText("acc.wtfTrans.crp")):copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentmade"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),
//            iconCls:'accountingbase receivepayment',
//            closable: true,
//            modeName:typeCheck?'autoreceipt':'autopayment'
//        });
//        panel.on("activate", function(){
//            panel.doLayout();
//            Wtf.getCmp(panel.id+"wrapperPanelNorth").doLayout();
//        }, this);
//        Wtf.getCmp('as').add(panel);
//    }
//    //    panel.on('invoice',callInvoiceList);
//    Wtf.getCmp('as').setActiveTab(panel);
//    if(typeCheck){
//        panel.on('update',  function(){
//            var selectedModeId="receiptReport";
//            if(Wtf.getCmp(selectedModeId))
//             Wtf.getCmp(selectedModeId).loadStore();
//            Wtf.getCmp('as').remove(panel);
//        }, this);
//    }else{
//        panel.on('update',  function(){
//            var selectedModeId= "paymentReport";
//            if(Wtf.getCmp(selectedModeId))
//           Wtf.getCmp(selectedModeId).loadStore();
//            Wtf.getCmp('as').remove(panel);
//        }, this);
//    }
//    Wtf.getCmp('as').doLayout();
//}

//function callBillingSalesReceipt(isEdit,rec,winid){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createcashsales)) {
//        winid=(winid==null?'BillingSalesReceipt':winid);
//        var panel = Wtf.getCmp(winid);
//        if(panel==null){
//           if(SATSCOMPANY_ID==companyid){
//            panel = new Wtf.account.TransactionPanelSats({
//                id : winid,
//                isEdit:isEdit,
//                isCustBill:true,
//                cash:true,
//                isCustomer:true,
//                moduleid:Wtf.Acc_Invoice_ModuleId,
//                doctype:1,
//                record: rec,
//                heplmodeid: 8, //This is help mode id
//                label:WtfGlobal.getLocaleText("acc.field.SalesReceipt"),
//                title:WtfGlobal.getLocaleText("acc.accPref.autoCS"),  //'Cash Sales',
//                tabTip:WtfGlobal.getLocaleText("acc.accPref.autoCS"),  //'Cash Sales',
//                iconCls:'accountingbase invoice',
//                modeName:'autobillingcashsales'
//            });
//           }else{
//            panel = new Wtf.account.TransactionPanel({
//                id : winid,
//                isEdit:isEdit,
//                isCustBill:true,
//                cash:true,
//                isCustomer:true,
//                moduleid:Wtf.Acc_Invoice_ModuleId,
//                doctype:1,
//                record: rec,
//                heplmodeid: 8, //This is help mode id
//                label:WtfGlobal.getLocaleText("acc.field.SalesReceipt"),
//                title:WtfGlobal.getLocaleText("acc.accPref.autoCS"),  //'Cash Sales',
//                tabTip:WtfGlobal.getLocaleText("acc.accPref.autoCS"),  //'Cash Sales',
//                iconCls:'accountingbase invoice',
//                modeName:'autobillingcashsales'
//            });
//           }
//            panel.on("activate", function(){
//                if(Wtf.isIE7) {
//                    var northHt=(Wtf.isIE?240:210);
//                    var southHt=(Wtf.isIE?210:150);
//                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
//                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
//                    panel.NorthForm.setHeight(northHt);
//                    panel.southPanel.setHeight(southHt);
//                }
//                panel.doLayout();
//            }, this);
//            Wtf.getCmp('as').add(panel);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoCS"));
//}

//function callBillingSalesReceiptTemplate(winid){
//    var isEdit = false;
//    var rec = null;
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createcashsales)) {
//        winid=(winid==null?'BillingSalesReceipt':winid);
//        var panel = Wtf.getCmp(winid);
//        if(panel==null){
//     if(SATSCOMPANY_ID==companyid){
//            panel = new Wtf.account.TransactionPanelSats({
//                id : winid,
//                isEdit:isEdit,
//                isCustBill:true,
//                isTemplate:true,
//                cash:true,
//                isCustomer:true,
//                moduleid:Wtf.Acc_Invoice_ModuleId,
//                doctype:1,
//                record: rec,
//                heplmodeid: 8, //This is help mode id
//                label:WtfGlobal.getLocaleText("acc.field.SalesReceipt"),
//                title:WtfGlobal.getLocaleText("acc.field.CashSalesTemplate"),
//                tabTip:WtfGlobal.getLocaleText("acc.field.CashSalesTemplate"),
//                iconCls:'accountingbase invoice',
//                modeName:'autobillingcashsales'
//            });
//     }else{
//            panel = new Wtf.account.TransactionPanel({
//                id : winid,
//                isEdit:isEdit,
//                isCustBill:true,
//                isTemplate:true,
//                cash:true,
//                isCustomer:true,
//                moduleid:Wtf.Acc_Invoice_ModuleId,
//                doctype:1,
//                record: rec,
//                heplmodeid: 8, //This is help mode id
//                label:WtfGlobal.getLocaleText("acc.field.SalesReceipt"),
//                title:WtfGlobal.getLocaleText("acc.field.CashSalesTemplate"),
//                tabTip:WtfGlobal.getLocaleText("acc.field.CashSalesTemplate"),
//                iconCls:'accountingbase invoice',
//                modeName:'autobillingcashsales'
//            });
//     }
//            panel.on("activate", function(){
//                if(Wtf.isIE7) {
//                    var northHt=(Wtf.isIE?240:210);
//                    var southHt=(Wtf.isIE?210:150);
//                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
//                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
//                    panel.NorthForm.setHeight(northHt);
//                    panel.southPanel.setHeight(southHt);
//                }
//                panel.doLayout();
//            }, this);
//            Wtf.getCmp('as').add(panel);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoCS"));
//}

function callSalesReceipt(isEdit,rec,winid){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createcashsales)) {
        winid=(winid==null?'salesreceipt':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit:isEdit,
//                    label:WtfGlobal.getLocaleText("acc.agedPay.inv"),
//                    cash:true,
//                    moduleid:Wtf.Acc_Invoice_ModuleId,
//                    doctype:1,
//                    isCustomer:true,
//                    record: rec,
//                    heplmodeid: 8, //This is help mode id
//                    border : false,
//                    readOnly:false,
//                    //            layout: 'border',
//                    DOSettings:Wtf.account.companyAccountPref.DOSettings,
//                    GRSettings:Wtf.account.companyAccountPref.GRSettings,
//                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
//                    title:WtfGlobal.getLocaleText("acc.accPref.autoCS"),  //'Cash Sales',
//                    tabTip:WtfGlobal.getLocaleText("acc.accPref.autoCS"),  //'Cash Sales',
//                    closable: true,
//                    iconCls:'accountingbase salesreceipt',
//                    modeName:'autocashsales'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit:isEdit,
                    label:WtfGlobal.getLocaleText("acc.accPref.autoCS"),
                    cash:true,
                    moduleid:Wtf.Acc_Invoice_ModuleId,
                    doctype:1,
                    isCustomer:true,
                    record: rec,
                    readOnly:false,
                    heplmodeid: 8, //This is help mode id
                    border : false,
                    //            layout: 'border',
                    DOSettings:Wtf.account.companyAccountPref.DOSettings,
                    GRSettings:Wtf.account.companyAccountPref.GRSettings,
                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                    title:WtfGlobal.getLocaleText("acc.accPref.autoCS"),  //'Cash Sales',
                    tabTip:WtfGlobal.getLocaleText("acc.accPref.autoCS"),  //'Cash Sales',
                    closable: true,
                    iconCls:'accountingbase salesreceipt',
                    modeName:'autocashsales'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth()-18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoCS"));
}

function callSalesReceiptTemplate(winid){
    var isEdit = false;
    var rec = null;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createcashsales)) {
        winid=(winid==null?'salesreceipttemplate':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit:isEdit,
//                    label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),
//                    cash:true,
//                    moduleid:Wtf.Acc_Invoice_ModuleId,
//                    isTemplate:true,
//                    doctype:1,
//                    readOnly:false,
//                    isCustomer:true,
//                    record: rec,
//                    heplmodeid: 8, //This is help mode id
//                    border : false,
//                    //            layout: 'border',
//                    title:WtfGlobal.getLocaleText("acc.field.CashSalesTemplate"),
//                    tabTip:WtfGlobal.getLocaleText("acc.field.CashSalesTemplate"),
//                    closable: true,
//                    iconCls:'accountingbase salesreceipt',
//                    modeName:'autocashsales'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit:isEdit,
                    label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),
                    cash:true,
                    moduleid:Wtf.Acc_Invoice_ModuleId,
                    isTemplate:true,
                    doctype:1,
                    isCustomer:true,
                    record: rec,
                    heplmodeid: 8, //This is help mode id
                    border : false,
                     readOnly:false,
                    //            layout: 'border',
                    title:WtfGlobal.getLocaleText("acc.field.CashSalesTemplate"),
                    tabTip:WtfGlobal.getLocaleText("acc.field.CashSalesTemplate"),
                    closable: true,
                    iconCls:'accountingbase salesreceipt',
                    modeName:'autocashsales'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth()-18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoCS"));
}
function callPurchaseReceipt(isEdit,rec,winid){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createcashpurchasevendorinvoice)) {

        winid=(winid==null?'purchasereceipt':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit:isEdit,
//                    label:WtfGlobal.getLocaleText("acc.accPref.autoCP"),
//                    cash:true,
//                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
//                    isCustomer:false,
//                    heplmodeid: 33, //This is help mode id
//                    record: rec,
//                    border : false,
//                    readOnly:false,
//                    //            layout: 'border',
//                    DOSettings:Wtf.account.companyAccountPref.DOSettings,
//                    GRSettings:Wtf.account.companyAccountPref.GRSettings,
//                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
//                    title:WtfGlobal.getLocaleText("acc.accPref.autoCP"),  //'Cash Purchase',
//                    tabTip:WtfGlobal.getLocaleText("acc.accPref.autoCP"),  //'Cash Purchase',
//                    closable: true,
//                    iconCls:'accountingbase salesreceipt',
//                    modeName:'autocashpurchase'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit:isEdit,
                    label:WtfGlobal.getLocaleText("acc.accPref.autoCP"),
                    cash:true,
                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
                    isCustomer:false,
                    readOnly:false,
                    heplmodeid: 33, //This is help mode id
                    record: rec,
                    border : false,
                    //            layout: 'border',
                    DOSettings:Wtf.account.companyAccountPref.DOSettings,
                    GRSettings:Wtf.account.companyAccountPref.GRSettings,
                    isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                    title:WtfGlobal.getLocaleText("acc.accPref.autoCP"),  //'Cash Purchase',
                    tabTip:WtfGlobal.getLocaleText("acc.accPref.autoCP"),  //'Cash Purchase',
                    closable: true,
                    iconCls:'accountingbase salesreceipt',
                    modeName:'autocashpurchase'
                });

//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.GridPanel.setSize(panel.getInnerWidth()-35,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoCP"));
}

function callPurchaseReceiptTemplate(winid){
    var isEdit = false;
    var rec = null;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createcashpurchasevendorinvoice)) {

        winid=(winid==null?'purchasereceipttemplate':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit:isEdit,
//                    label:WtfGlobal.getLocaleText("acc.accPref.autoCP"),
//                    isTemplate:true,
//                    cash:true,
//                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
//                    isCustomer:false,
//                    //            heplmodeid: 33, //This is help mode id
//                    record: rec,
//                    border : false,
//                    //            layout: 'border',
//                    title:WtfGlobal.getLocaleText("acc.field.CashPurchaseTemplate"),
//                    tabTip:WtfGlobal.getLocaleText("acc.field.CashPurchaseTemplate"),
//                    closable: true,
//                    iconCls:'accountingbase salesreceipt',
//                    modeName:'autocashpurchase'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit:isEdit,
                    label:WtfGlobal.getLocaleText("acc.accPref.autoCP"),
                    isTemplate:true,
                    readOnly:false,
                    cash:true,
                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
                    isCustomer:false,
                    //            heplmodeid: 33, //This is help mode id
                    record: rec,
                    border : false,
                    //            layout: 'border',
                    title:WtfGlobal.getLocaleText("acc.field.CashPurchaseTemplate"),
                    tabTip:WtfGlobal.getLocaleText("acc.field.CashPurchaseTemplate"),
                    closable: true,
                    iconCls:'accountingbase salesreceipt',
                    modeName:'autocashpurchase'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.GridPanel.setSize(panel.getInnerWidth()-35,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoCP"));
}

function callQuotation(isEdit, tabid, rec, copyInv, isTemplate, templateId, isViewTemplate,isLinkedTransaction,isEditTemplate,pendingapproval){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createquotation)||(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.copysalesquotation)&&copyInv)||(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.editsalesquotation)&&isEdit)) {
        var winid='quotation'+tabid;
        var label = (isViewTemplate || isEditTemplate)?WtfGlobal.getLocaleText("acc.customerquotationtemplate.title"):WtfGlobal.getLocaleText("acc.accPref.autoQN");
        var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
        /**
          *isViewTemplate flag for view template case
          *isEditTemplate flag for edit template case
        */
        var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
        var isEditTemplate = isEditTemplate?isEditTemplate:false;
        var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
        if(copyInv == undefined || copyInv == "" || copyInv == null){
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    quotation : true,
//                    id : winid,
//                    isCustomer:true,
//                    isOrder:true,
//                    isEdit: isEdit,
//                    copyInv:copyInv,
//                    record: rec,
//                    label:WtfGlobal.getLocaleText("acc.accPref.autoCQN"),
//                    border : false,
//                    heplmodeid: isEdit? 61:34,
//                    moduleid:Wtf.Acc_Customer_Quotation_ModuleId,
//                    //tabTip : 'Customer Quotation',
//                    tabTip : isViewTemplate ? WtfGlobal.getLocaleText("acc.accPref.viewCQTemplate") : ((isEdit && !isCopyFromTemplate)?WtfGlobal.getLocaleText("acc.cust.editcustomerQ"):WtfGlobal.getLocaleText("acc.accPref.copyCQN")),
//                    title: isViewTemplate ? WtfGlobal.getLocaleText("acc.accPref.viewCQTemplate") : ((isEdit && !isCopyFromTemplate)?WtfGlobal.getLocaleText("acc.cust.editcustomerQ"):((!isCopyFromTemplate && copyInv)? WtfGlobal.getLocaleText("acc.accPref.copyCQN"):WtfGlobal.getLocaleText("acc.dimension.module.12"))),  //label, acc.accPref.copyCQN
//                    //tabTip : (copyInv)?WtfGlobal.getLocaleText("Copy Customer Quotation"):'Customer ' + WtfGlobal.getLocaleText("acc.accPref.autoQN"),
//                    closable: true,
//                    iconCls:'accountingbase purchaseorder',
//                    isTemplate : isTemplate,
//                    isCopyFromTemplate:isCopyFromTemplate,
//                    templateId:templateId,
//                    isViewTemplate:isViewTemplate,
//                    modeName:'autoquotation'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    quotation : true,
                    id : winid,
                    isCustomer:true,
                    isOrder:true,
                    isEdit: isEdit,
                    copyInv:copyInv,
                    record: rec,
                    label:label,
                    border : false,
                    heplmodeid: isEdit? 61:34,
                    moduleid:Wtf.Acc_Customer_Quotation_ModuleId,
                    //tabTip : 'Customer Quotation',
                    tabTip : isViewTemplate ? WtfGlobal.getLocaleText("acc.accPref.viewCQTemplate") :(isEditTemplate?WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.customerquotationtemplate.title"): ((isEdit && !isCopyFromTemplate)?WtfGlobal.getLocaleText("acc.cust.editcustomerQ"):(!isCopyFromTemplate && copyInv)?WtfGlobal.getLocaleText("acc.accPref.copyCQN"):WtfGlobal.getLocaleText("acc.dimension.module.12"))),
                    title: isViewTemplate ? WtfGlobal.getLocaleText("acc.accPref.viewCQTemplate") :(isEditTemplate?WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.customerquotationtemplate.title"): ((isEdit && !isCopyFromTemplate)?WtfGlobal.getLocaleText("acc.cust.editcustomerQ"):((!isCopyFromTemplate && copyInv)? WtfGlobal.getLocaleText("acc.accPref.copyCQN"):WtfGlobal.getLocaleText("acc.dimension.module.12")))),  //label, acc.accPref.copyCQN
                    //tabTip : (copyInv)?WtfGlobal.getLocaleText("Copy Customer Quotation"):'Customer ' + WtfGlobal.getLocaleText("acc.accPref.autoQN"),
                    closable: true,
                    isTemplate : isTemplate,
                    isCopyFromTemplate:isCopyFromTemplate,
                    templateId:templateId,
                    isViewTemplate:isViewTemplate,
                    isEditTemplate:isEditTemplate,
                    iconCls:'accountingbase purchaseorder',
                    modeName:'autoquotation',
                    isLinkedTransaction:isLinkedTransaction,
                    pendingapproval:pendingapproval
                });

//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true)Wtf.getCmp('as').remove(panel);
        var selectedModeId='QuotationList';
        Wtf.getCmp(selectedModeId).loadStore();
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,copyInv?WtfGlobal.getLocaleText("acc.lp.copysalesquotation"):isEdit?WtfGlobal.getLocaleText("acc.lp.editsalesquotation"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoCQN"));
}

function callViewQuotation(isEdit, tabid, rec, copyInv,isVersion){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewquotation)) {
        var winid='viewquotation'+tabid;
        var label = WtfGlobal.getLocaleText("acc.accPref.autoQN");
        if(copyInv == undefined || copyInv == "" || copyInv == null){
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    quotation : true,
//                    id : winid,
//                    isCustomer:true,
//                    isOrder:true,
//                    isEdit:true,
//                    copyInv:false,
//                    record: rec,
//                    label:WtfGlobal.getLocaleText("acc.accPref.autoCQN"),
//                    border : false,
//                    heplmodeid: 34,
//                    moduleid:Wtf.Acc_Customer_Quotation_ModuleId,
//                    tabTip :WtfGlobal.getLocaleText("acc.field.ViewCustomerQuotaion"),
//                    title: WtfGlobal.getLocaleText("acc.field.ViewCustomerQuotaion"), //View Customer Quotation
//                    readOnly:true,
//                    isVersion:isVersion,
//                    viewGoodReceipt:true,
//                    isViewTemplate:true,
//                    isCopyFromTemplate:true,
//                    closable: true,
//                    iconCls:'accountingbase purchaseorder',
//                    modeName:'autoquotation'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    quotation : true,
                    id : winid,
                    isCustomer:true,
                    isOrder:true,
                    isEdit:true,
                    copyInv:false,
                    record: rec,
                    label:WtfGlobal.getLocaleText("acc.accPref.autoCQN"),
                    border : false,
                    isVersion:isVersion,
                    heplmodeid: 34,
                    moduleid:Wtf.Acc_Customer_Quotation_ModuleId,
                    tabTip :WtfGlobal.getLocaleText("acc.field.ViewCustomerQuotaion"),
                    title: WtfGlobal.getLocaleText("acc.field.ViewCustomerQuotaion"), //View Customer Quotation
                    readOnly:true,
                    viewGoodReceipt:true,
                    isViewTemplate:true,
                    isCopyFromTemplate:true,
                    closable: true,
                    iconCls:'accountingbase purchaseorder',
                    modeName:'autoquotation'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true)Wtf.getCmp('as').remove(panel);
        var selectedModeId='QuotationList';
        Wtf.getCmp(selectedModeId).loadStore();
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoQN"));
}

function callViewPurchaseOrderVersion(isEdit, tabid, rec, copyInv,isVersion){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewquotation)) {
        var winid='viewpo'+tabid;
        var isExpenseInv = (rec != null || rec != undefined)? rec.data.isexpenseinv : "";
        var label = WtfGlobal.getLocaleText("acc.accPref.autoQN");
        if(copyInv == undefined || copyInv == "" || copyInv == null){
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isExpenseInv:isExpenseInv,
                    isCustomer:false,
                    isOrder:true,
                    isEdit:true,
                    copyInv:false,
                    record: rec,
                    label:WtfGlobal.getLocaleText("acc.accPref.autoPO"),
                    border : false,
                    isVersion:isVersion,
                    heplmodeid: 34,
                    moduleid:Wtf.Acc_Purchase_Order_ModuleId,
                    tabTip :WtfGlobal.getLocaleText("acc.field.ViewPurchaseOrder"),
                    title: WtfGlobal.getLocaleText("acc.field.ViewPurchaseOrder"), //View Customer Quotation
                    readOnly:true,
                    viewGoodReceipt:true,
                    isViewTemplate:true,
                    isCopyFromTemplate:true,
                    closable: true,
                    iconCls:'accountingbase purchaseorder',
                    modeName:'autopo'
                });

            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
}
}

function callViewPurchaseOrderVersions(formrec, billid, tabid, isCustomer, isLeaseFixedAsset){
    if (!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewquotation)) {
        var consolidateFlag = consolidateFlag != undefined?consolidateFlag:false;
        var panelID = tabid;
        var panel = Wtf.getCmp(panelID);
        var reportbtnshwFlag = true;
        if (panel == null){
            panel = callViewPurchaseOrderVersionsTab(formrec, billid, tabid, isCustomer, isLeaseFixedAsset);
            Wtf.getCmp('as').add(panel);
            panel.on('journalentry', callJournalEntryDetails);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
}

function callViewPurchaseOrderVersionsTab(formrec,billid,tabid,isCustomer,isLeaseFixedAsset){
    var reportPanel = new Wtf.account.VersionListPanel({
        id : tabid,
        border : false,
        isPurchaseOrder:true,
        isCustomer:isCustomer,
        pendingapproval : false,
        title: "Purchase Order Version",
        tabTip:"Purchase Order Version",
        label:WtfGlobal.getLocaleText("acc.accPref.autoPO"),
        isLeaseFixedAsset:isLeaseFixedAsset,
        layout: 'fit',
        versionid:billid,
        closable: true,
        iconCls:'accountingbase purchaseorder',
        moduleId:Wtf.Acc_Purchase_Order_ModuleId
    });
    return reportPanel;
}

function callLeaseQuotation(isEdit, tabid, rec, copyInv,isLeaseFixedAsset){
  if(!WtfGlobal.EnableDisable(Wtf.UPerm.leaseorder, Wtf.Perm.leaseorder.createlqt)||(!WtfGlobal.EnableDisable(Wtf.UPerm.leaseorder, Wtf.Perm.leaseorder.editlqt)&&isEdit)) {
        var winid='leasequotation'+tabid;
        var label = WtfGlobal.getLocaleText("acc.accPref.autoQN");
        if(copyInv == undefined || copyInv == "" || copyInv == null){
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.FixedAssetTransactionPanel({
                quotation : true,
                id : winid,
                isCustomer:true,
                isOrder:true,
                isEdit: isEdit,
                copyInv:copyInv,
                isLeaseFixedAsset:isLeaseFixedAsset,
                record: rec,
                label: isLeaseFixedAsset ? WtfGlobal.getLocaleText("acc.field.leaseQuotation") : WtfGlobal.getLocaleText("acc.accPref.autoCQN"),
                border : false,
                heplmodeid: 34,
                moduleid:Wtf.Acc_Lease_Quotation,
                //tabTip : 'Customer Quotation',
                tabTip : isLeaseFixedAsset? (isEdit?WtfGlobal.getLocaleText("acc.field.leaseQuotationEdit"): WtfGlobal.getLocaleText("acc.lease.quoation.create")) : ((isEdit)?WtfGlobal.getLocaleText("acc.cust.editcustomerQ"):WtfGlobal.getLocaleText("acc.accPref.copyCQN")),
                title:isLeaseFixedAsset? (isEdit?WtfGlobal.getLocaleText("acc.field.leaseQuotationEdit"):WtfGlobal.getLocaleText("acc.field.leaseQuotation")) : ((isEdit)?WtfGlobal.getLocaleText("acc.cust.editcustomerQ"):((copyInv)? WtfGlobal.getLocaleText("acc.accPref.copyCQN"):WtfGlobal.getLocaleText("acc.dimension.module.12"))),
                //tabTip : (copyInv)?WtfGlobal.getLocaleText("Copy Customer Quotation"):'Customer ' + WtfGlobal.getLocaleText("acc.accPref.autoQN"),
                closable: true,
                iconCls:'accountingbase purchaseorder',
                modeName:'autoquotation'
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true)Wtf.getCmp('as').remove(panel);
        var selectedModeId='QuotationList';
        Wtf.getCmp(selectedModeId).loadStore();
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("createlqt"));
}

function callViewLeaseQuotation(isEdit, tabid, rec, copyInv,isLeaseFixedAsset,isVersion){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createquotation)||isEdit) {
        var winid='viewleasequotation'+tabid;
        if(copyInv == undefined || copyInv == "" || copyInv == null){
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.FixedAssetTransactionPanel({
                quotation : true,
                id : winid,
                readOnly:true,
                isViewTemplate:true,
                isCustomer:true,
                isOrder:true,
                isEdit: isEdit,
                copyInv:copyInv,
                isVersion:isVersion,
                isLeaseFixedAsset:isLeaseFixedAsset,
                record: rec,
                label: isLeaseFixedAsset ? WtfGlobal.getLocaleText("acc.field.leaseQuotation") : WtfGlobal.getLocaleText("acc.accPref.autoCQN"),
                border : false,
                heplmodeid: 34,
                moduleid:isLeaseFixedAsset?Wtf.Acc_Lease_Quotation:Wtf.Acc_Customer_Quotation_ModuleId,
                tabTip :WtfGlobal.getLocaleText("acc.field.leaseQuotationView") ,
                title:WtfGlobal.getLocaleText("acc.field.leaseQuotationView"),
                closable: true,
                iconCls:'accountingbase purchaseorder',
                modeName:'autoquotation'
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
                }
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(isEdit == true)Wtf.getCmp('as').remove(panel);
            var selectedModeId='QuotationList';
            Wtf.getCmp(selectedModeId).loadStore();
        }, this);
        Wtf.getCmp('as').doLayout();
}
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoQN"));
}

function callVendorQuotation(isEdit, tabid, rec, copyInv, PR_IDS,ispurchaseReq,isLinkedTransaction,pendingapproval){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createvendorquotation)||(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.copyvendorquotation)&&copyInv)||(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.editvendorquotation)&&isEdit)) {
        var winid='vendorquotation'+tabid;
        var label = WtfGlobal.getLocaleText("acc.accPref.autoVQN");
        var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
        if(copyInv == undefined || copyInv == "" || copyInv == null){
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    quotation : true,
//                    id : winid,
//                    isCustomer:false,
//                    isOrder:true,
//                    isEdit: isEdit,
//                    ispurchaseReq:ispurchaseReq,
//                    copyInv:copyInv,
//                    record: rec,
//                    PR_IDS : PR_IDS,
//                    isQuotationFromPR : PR_IDS ? true : false,
//                    label:label,
//                    border : false,
//                    tabTip : (isEdit)?WtfGlobal.getLocaleText("acc.vend.editvendorQ"):((copyInv)?WtfGlobal.getLocaleText("acc.accPref.copyVQN"):WtfGlobal.getLocaleText("acc.accPref.autoVQN")),
//                    heplmodeid: isEdit? 62:60,
//                    moduleid:Wtf.Acc_Vendor_Quotation_ModuleId,
//                    //title: (copyInv)?WtfGlobal.getLocaleText("acc.accPref.copyQN"):"Vendor " +WtfGlobal.getLocaleText("acc.accPref.autoQN"),  //label,
//                    title: (isEdit)?WtfGlobal.getLocaleText("acc.vend.editvendorQ"):((copyInv)?WtfGlobal.getLocaleText("acc.accPref.copyVQN"):WtfGlobal.getLocaleText("acc.accPref.autoVQN")),
//                    closable: true,
//                    iconCls:'accountingbase purchaseorder',
//                    modeName:'autovenquotation'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    quotation : true,
                    id : winid,
                    isCustomer:false,
                    isOrder:true,
                    isEdit: isEdit,
                    ispurchaseReq:ispurchaseReq,
                    copyInv:copyInv,
                    record: rec,
                    PR_IDS : PR_IDS,
                    isQuotationFromPR : PR_IDS ? true : false,
                    label:label,
                    border : false,
                    tabTip : (isEdit && !ispurchaseReq)?WtfGlobal.getLocaleText("acc.vend.editvendorQuotation"):((copyInv)?WtfGlobal.getLocaleText("acc.accPref.copyVQN"):WtfGlobal.getLocaleText("acc.accPref.autoVQN")),
                    heplmodeid: isEdit? 62:60,
                    moduleid:Wtf.Acc_Vendor_Quotation_ModuleId,
                    //title: (copyInv)?WtfGlobal.getLocaleText("acc.accPref.copyQN"):"Vendor " +WtfGlobal.getLocaleText("acc.accPref.autoQN"),  //label,
                    title: (isEdit && !ispurchaseReq)?WtfGlobal.getLocaleText("acc.vend.editvendorQuotation"):((copyInv)?WtfGlobal.getLocaleText("acc.accPref.copyVQN"):WtfGlobal.getLocaleText("acc.accPref.autoVQN")),
                    closable: true,
                    iconCls:'accountingbase purchaseorder',
                    modeName:'autovenquotation',
                    isLinkedTransaction:isLinkedTransaction,
                    pendingapproval:pendingapproval
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true)
            Wtf.getCmp('as').remove(panel);
        var selectedModeId='VendorQuotationList';
        Wtf.getCmp(selectedModeId).loadStore();
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.lp.editvendorquotation"):copyInv?WtfGlobal.getLocaleText("acc.lp.copyvendorquotation"):WtfGlobal.getLocaleText("acc.common.creating")+" " +WtfGlobal.getLocaleText("acc.accPref.autoVQN"));
}

function callViewVendorQuotation(isEdit, tabid, rec, copyInv, PR_IDS,ispurchaseReq, isVersion){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewquotation)) {
        var winid='viewvendorquotation'+tabid;
        var label = WtfGlobal.getLocaleText("acc.accPref.autoVQN");
        if(copyInv == undefined || copyInv == "" || copyInv == null){
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    quotation : true,
//                    id : winid,
//                    isCustomer:false,
//                    isOrder:true,
//                    isEdit: true,
//                    isVersion:isVersion,
//                    ispurchaseReq:ispurchaseReq,
//                    copyInv:false,
//                    isCopyFromTemplate:true,
//                    record: rec,
//                    PR_IDS : PR_IDS,
//                    isQuotationFromPR : PR_IDS ? true : false,
//                    label:label,
//                    border : false,
//                    tabTip : WtfGlobal.getLocaleText("acc.field.ViewVendorQuotaion"),
//                    heplmodeid: 34,
//                    moduleid:Wtf.Acc_Vendor_Quotation_ModuleId,
//                    title: WtfGlobal.getLocaleText("acc.field.ViewVendorQuotaion"),
//                    closable: true,
//                    isViewTemplate:true,
//                    readOnly:true,
//                    viewGoodReceipt:true,
//                    iconCls:'accountingbase purchaseorder',
//                    modeName:'autovenquotation'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    quotation : true,
                    id : winid,
                    isCustomer:false,
                    isOrder:true,
                    isEdit: true,
                    isVersion:isVersion,
                    ispurchaseReq:ispurchaseReq,
                    copyInv:false,
                    isCopyFromTemplate:true,
                    record: rec,
                    PR_IDS : PR_IDS,
                    isQuotationFromPR : PR_IDS ? true : false,
                    label:label,
                    border : false,
                    tabTip : WtfGlobal.getLocaleText("acc.field.ViewVendorQuotaion"),
                    heplmodeid: 34,
                    moduleid:Wtf.Acc_Vendor_Quotation_ModuleId,
                    title: WtfGlobal.getLocaleText("acc.field.ViewVendorQuotaion"),
                    closable: true,
                    isViewTemplate:true,
                    readOnly:true,
                    viewGoodReceipt:true,
                    iconCls:'accountingbase purchaseorder',
                    modeName:'autovenquotation'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true)
            Wtf.getCmp('as').remove(panel);
        var selectedModeId='VendorQuotationList';
        Wtf.getCmp(selectedModeId).loadStore();
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoVQN"));
}


function callRequestForQuotation(isEdit, PR_IDS, PR_MEMOS,tabid, record,thisObj, copyInv,isLinkedTransaction,currencyid){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.vendorpr, Wtf.Perm.vendorpr.editrfq)&&isEdit)||(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorpr, Wtf.Perm.vendorpr.copyrfq)&&copyInv)||!WtfGlobal.EnableDisable(Wtf.UPerm.vendorpr, Wtf.Perm.vendorpr.createrfq)) {
        var isLinkediInVQ = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
        var winid='requestforquotation';
        if(tabid != undefined && tabid != null){
            winid += tabid;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.PurchaseRequisitionPanel({
                quotation : true,
                id : winid,
                currencyid:currencyid,
                record:record,
                copyInv:copyInv,
                isRFQ : true,
                isCustomer:false,
                PR_IDS : PR_IDS,
                PR_MEMOS : PR_MEMOS,
                moduleid:Wtf.Acc_RFQ_ModuleId,
                isOrder:true,
                isEdit: isEdit,
                isLinkedTransaction:isLinkediInVQ,
                POthisObj:thisObj,
                label:WtfGlobal.getLocaleText("acc.accPref.autoRFQ"),
                border : false,
                readOnly:false,  //    ERP-15654 [Purchase Requisition/RFQ] "+" button is not working in Product grid. readonly was undedined
                heplmodeid: 81,
                title:isEdit?WtfGlobal.getLocaleText("acc.accPref.editRFQ"):(copyInv?WtfGlobal.getLocaleText("acc.accPref.copyRFQ"):WtfGlobal.getLocaleText("acc.accPref.autoInitiateRFQ")),  //label,
                tabTip:isEdit?WtfGlobal.getLocaleText("acc.accPref.editRFQ"):(copyInv?WtfGlobal.getLocaleText("acc.accPref.copyRFQ"):WtfGlobal.getLocaleText("acc.accPref.autoInitiateRFQ")),  //label
                closable: true,
                iconCls:'accountingbase purchaseorder',
                modeName:'autorequestforquotation'
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                //	                var northHt=120;
                //	                var southHt=50;
                //	                Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                //	                Wtf.getCmp(winid + 'southEastPanel').setWidth(50);
                //	                panel.NorthForm.setHeight(northHt);
                //	                panel.southPanel.setHeight(southHt);
                //	                panel.on("afterlayout", function(panel, lay){if(Wtf.isIE7) {panel.Grid.setSize(panel.getInnerWidth() - 18,200);}},this);
                }
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(isEdit == true)Wtf.getCmp('as').remove(panel);
        }, this);
        Wtf.getCmp('as').doLayout();
    } else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.initiatingcreating") +" RFQ");
}

function callViewRequestForQuotation(isEdit, PR_IDS, PR_MEMOS,rec){
    winid='viewrequestforquotation'+rec.data.billid;
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.PurchaseRequisitionPanel({
            quotation : true,
            id : winid,
            isRFQ : true,
            isCustomer:false,
            PR_IDS : PR_IDS,
            PR_MEMOS : PR_MEMOS,
            moduleid:Wtf.Acc_RFQ_ModuleId,
            isOrder:false,
            record: rec,
            viewGoodReceipt:true,
            readOnly:true,
            isEdit: isEdit,
            label:WtfGlobal.getLocaleText("acc.accPref.autoRFQ"),
            border : false,
            heplmodeid: 34,
            title:WtfGlobal.getLocaleText("acc.accPref.viewRFQ"),  //label,
            closable: true,
            isViewTemplate:true,
            iconCls:'accountingbase purchaseorder',
            modeName:'autorequestforquotation'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true)Wtf.getCmp('as').remove(panel);
    }, this);
    Wtf.getCmp('as').doLayout();
}

function callPurchaseReq(isEdit, rec,winid, pendingapproval,thisObj,copyInv,isLinkedTransaction,isFromWO,ifFromShortfall,isDraft){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.vendorpr, Wtf.Perm.vendorpr.createpr)&&!isEdit)||(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorpr, Wtf.Perm.vendorpr.editpr)&&isEdit)||(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorpr, Wtf.Perm.vendorpr.copypr)&&copyInv) || isDraft) {
        var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
        winid=winid!==undefined ? 'requisition'+winid : 'requisition';
        if (copyInv == undefined || copyInv == "" || copyInv == null) {
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.PurchaseRequisitionPanel({
                quotation : true,
                id : winid,
                PRthisObj: thisObj,
                copyInv: copyInv,
                isRequisition : true,
                pendingapproval : pendingapproval,
                isCustomer:false, //Issue 32006 - [Inventory Assembly]Inventory Assembly type of product should not be there in combo on purchase side.
                moduleid:Wtf.Acc_Purchase_Requisition_ModuleId,
                isOrder:(isEdit!==undefined && isEdit)? false : true,
                record: rec,
                isFromWO:isFromWO,
                ifFromShortfall:ifFromShortfall,
                isEdit: isEdit!==undefined ? isEdit : false,
                readOnly:false,
                label:WtfGlobal.getLocaleText("acc.accPref.autoPRequisition"),
                border : false,
                heplmodeid: isEdit ? 65 : 51,
                title: (isEdit!==undefined && isEdit)? (copyInv != undefined && copyInv == true)?WtfGlobal.getLocaleText("acc.field.CopyPurchaseRequisition"):WtfGlobal.getLocaleText("acc.field.EditPurchaseRequisition") : (copyInv != undefined && copyInv == true)?WtfGlobal.getLocaleText("acc.field.CopyPurchaseRequisition"):WtfGlobal.getLocaleText("acc.accPref.autoPRequisition"),  //label,
                tabTip: (isEdit!==undefined && isEdit) ? (copyInv != undefined && copyInv == true)?WtfGlobal.getLocaleText("acc.field.CopyPurchaseRequisition"): WtfGlobal.getLocaleText("acc.field.EditPurchaseRequisition") :(copyInv != undefined && copyInv == true)?WtfGlobal.getLocaleText("acc.field.CopyPurchaseRequisition"): WtfGlobal.getLocaleText("acc.accPref.autoPRequisition"),
                closable: true,
                iconCls:'accountingbase purchaseorder',
                modeName:'autorequisition',
                isLinkedTransaction:isLinkedTransaction
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                //	                var northHt=120;
                //	                var southHt=50;
                //	                Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                //	                Wtf.getCmp(winid + 'southEastPanel').setWidth(50);
                //	                panel.NorthForm.setHeight(northHt);
                //	                panel.southPanel.setHeight(southHt);
                //	                panel.on("afterlayout", function(panel, lay){if(Wtf.isIE7) {panel.Grid.setSize(panel.getInnerWidth() - 18,200);}},this);
                }
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(isEdit == true)Wtf.getCmp('as').remove(panel);
        }, this);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,(isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating"))+" "+WtfGlobal.getLocaleText("acc.preqList.tabTitle"));
}

function callViewPurchaseReq(isEdit, rec,winid, pendingapproval){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorpr, Wtf.Perm.vendorpr.viewpr)) {
        winid=winid!==undefined ? 'viewrequisition'+winid : 'requisition';
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.PurchaseRequisitionPanel({
                quotation : true,
                id : winid,
                isRequisition: true,
                pendingapproval : pendingapproval,
                isCustomer:false, //Issue 32006 - [Inventory Assembly]Inventory Assembly type of product should not be there in combo on purchase side.
                moduleid:Wtf.Acc_Purchase_Requisition_ModuleId,
                isOrder:(isEdit!==undefined && isEdit)? false : true,
                record: rec,
                isEdit: isEdit!==undefined ? isEdit : false,
                label:WtfGlobal.getLocaleText("acc.accPref.autoPRequisition"),
                border : false,
                heplmodeid: 34,
                title: WtfGlobal.getLocaleText("acc.field.ViewPurchaseRequisition"),
                tabTip: WtfGlobal.getLocaleText("acc.field.ViewPurchaseRequisition"),
                closable: true,
                viewGoodReceipt:true,
                readOnly:true,
                isViewTemplate:true,
                iconCls:'accountingbase purchaseorder',
                modeName:'autorequisition'
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                //	                var northHt=120;
                //	                var southHt=50;
                //	                Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                //	                Wtf.getCmp(winid + 'southEastPanel').setWidth(50);
                //	                panel.NorthForm.setHeight(northHt);
                //	                panel.southPanel.setHeight(southHt);
                //	                panel.on("afterlayout", function(panel, lay){if(Wtf.isIE7) {panel.Grid.setSize(panel.getInnerWidth() - 18,200);}},this);
                }
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(isEdit == true)Wtf.getCmp('as').remove(panel);
        }, this);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.preqList.tabTitle"));
}

function callSalesOrder(isEdit,rec,winid, copyInv,templateId,isViewTemplate,isSOfromPO,isOpeningBalanceOrder,isLinkedTransaction,isMRPSalesOrder,isJobWorkOrderReciever,isEditTemplate,pendingapproval,isDraft){
    var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    /**
     *isViewTemplate flag for view template case
     *isEditTemplate flag for edit template case
     */
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
    var isEditTemplate = isEditTemplate?isEditTemplate:false;
    var permission=false;
    if(isSOfromPO){
        permission= !WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso);
    }else if(copyInv){
        permission=!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.copyso);
    }else if(isEdit){
        permission=!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.editso);
    }else{
        permission= !WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso);
    }
    if(permission || isDraft) {
        winid=(winid==null?'salesorder':winid);
        var label =(isViewTemplate || isEditTemplate)?WtfGlobal.getLocaleText("acc.field.SalesOrderTemplate"): WtfGlobal.getLocaleText("acc.accPref.autoSO");
        if (isJobWorkOrderReciever) {
            label = WtfGlobal.getLocaleText("acc.jobWorkOrder.vendorjobworkorder")
        }
        if(copyInv == undefined || copyInv == "" || copyInv == null){
            copyInv = false;
        }
        
        var title = "";
        var tabtip = "";
        if (isJobWorkOrderReciever) {
            if (copyInv) {
                title = Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.jobWorkOrder.copyvendorjobworkorder"),Wtf.TAB_TITLE_LENGTH);
                tabtip = WtfGlobal.getLocaleText("acc.jobWorkOrder.copyvendorjobworkorder");
            } else if (isEdit) {
                title = Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.jobWorkOrder.editvendorjobworkorder"),Wtf.TAB_TITLE_LENGTH) +" "+((rec != null)?rec.data.billno:"");
                tabtip = WtfGlobal.getLocaleText("acc.jobWorkOrder.editvendorjobworkorder") +" "+((rec != null)?rec.data.billno:"") ;
            } else {
                title = Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.jobWorkOrder.vendorjobworkorder"),Wtf.TAB_TITLE_LENGTH);
                tabtip = WtfGlobal.getLocaleText("acc.jobWorkOrder.vendorjobworkorder");
            }
        } else if (isOpeningBalanceOrder) {
            title =  WtfGlobal.getLocaleText("acc.field.SalesOrder-Opening")
            tabtip =  WtfGlobal.getLocaleText("acc.field.SalesOrder-Opening")
        } else if (isViewTemplate) {
            title = WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate")
            tabtip = WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate")
        } else if (isEditTemplate) {
            title=WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.field.SalesOrderTemplate");
            tabtip = WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.field.SalesOrderTemplate");
        } else if (isCopyFromTemplate) {
            title = WtfGlobal.getLocaleText("acc.accPref.autoSO")
            tabtip = WtfGlobal.getLocaleText("acc.accPref.autoSO")
        } else if (isSOfromPO) {
            title = WtfGlobal.getLocaleText("acc.wtfTrans.so")
            tabtip = WtfGlobal.getLocaleText("acc.wtfTrans.so")
        } else {
            if (copyInv) {
                title = Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.cso"),Wtf.TAB_TITLE_LENGTH) ;
                tabtip = WtfGlobal.getLocaleText("acc.wtfTrans.cso") ;
            } else if (isEdit) {
                title = Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.eso"),Wtf.TAB_TITLE_LENGTH) +" "+((rec != null)?rec.data.billno:"");
                tabtip = WtfGlobal.getLocaleText("acc.wtfTrans.eso") +" "+((rec != null)?rec.data.billno:"");
            } else {
                title = Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.so"),Wtf.TAB_TITLE_LENGTH);
                tabtip = WtfGlobal.getLocaleText("acc.wtfTrans.so");
            }
        }
        //winid = "SalesOrder" + winid;
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit: isEdit,
//                    copyInv : copyInv,
//                    record: rec,
//                    isCustomer:true,
//                    isOrder:true,
//                    isCopyFromTemplate:isCopyFromTemplate,
//                    isOpeningBalanceOrder:isOpeningBalanceOrder,
//                    templateId:templateId,
//                    moduleid:Wtf.Acc_Sales_Order_ModuleId,
//                    isViewTemplate:isViewTemplate,
//                    isSOfromPO:isSOfromPO,
//                    label:label,
//                    border : false,
//                    heplmodeid:isEdit? 68:11,
//                    closable: true,
//                    title:(isOpeningBalanceOrder?WtfGlobal.getLocaleText("acc.field.SalesOrder-Opening"):(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoSO"):(isSOfromPO)?WtfGlobal.getLocaleText("acc.wtfTrans.so"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cso"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so")))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH)))))),
//                    tabTip:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoSO"):(isSOfromPO)?WtfGlobal.getLocaleText("acc.wtfTrans.so"):((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so"))+" "+((rec != null)?rec.data.billno:""))))),
//                    iconCls:'accountingbase salesorder',
//                    modeName:'autoso'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit: isEdit,
                    copyInv : copyInv,
                    record: rec,
                    isCustomer:true,
                    isOrder:true,
                    isCopyFromTemplate:isCopyFromTemplate,
                    isOpeningBalanceOrder:isOpeningBalanceOrder,
                    templateId:templateId,
                    moduleid:isJobWorkOrderReciever?Wtf.MRP_Job_Work_ORDER_REC:Wtf.Acc_Sales_Order_ModuleId,
                    isViewTemplate:isViewTemplate,
                    isEditTemplate:isEditTemplate,
                    isSOfromPO:isSOfromPO,
                    label:label,
                    border : false,
                    heplmodeid:isEdit? 68:11,
                    closable: true,
//                    title:isJobWorkOrderReciever?(isEdit?WtfGlobal.getLocaleText("acc.jobWorkOrder.editvendorjobworkorder"):WtfGlobal.getLocaleText("acc.jobWorkOrder.vendorjobworkorder")):((isOpeningBalanceOrder?WtfGlobal.getLocaleText("acc.field.SalesOrder-Opening"):(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoSO"):(isSOfromPO)?WtfGlobal.getLocaleText("acc.wtfTrans.so"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cso"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so")))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH))))))),
                    title: title,
//                    tabTip:isJobWorkOrderReciever?(isEdit?WtfGlobal.getLocaleText("acc.jobWorkOrder.editvendorjobworkorder"):WtfGlobal.getLocaleText("acc.jobWorkOrder.vendorjobworkorder")):((isOpeningBalanceOrder?WtfGlobal.getLocaleText("acc.field.SalesOrder-Opening"):(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoSO"):(isSOfromPO)?WtfGlobal.getLocaleText("acc.wtfTrans.so"):(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cso"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so")))+" "+((rec != null)?rec.data.billno:"")))))))),
                    tabTip: tabtip,
                    iconCls:'accountingbase salesorder',
                    modeName:'autoso',
                    isMRPSalesOrder:isMRPSalesOrder,
                    isJobWorkOrderReciever:isJobWorkOrderReciever,
                    isLinkedTransaction:isLinkedTransaction,
                    pendingapproval:pendingapproval
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true && !isCopyFromTemplate){
            var selectedModeId= "SalesOrderList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,((isEdit&&!isSOfromPO)?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating"))+" " +WtfGlobal.getLocaleText("acc.accPref.autoSO"));
}

function callViewSalesOrder(isEdit,rec,winid, copyInv,templateId,isViewTemplate,isSOfromPO,isOpeningBalanceOrder,isJobWorkOrderReciever){
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewso)) {
        if (isJobWorkOrderReciever) {
            winid = (winid==null?'viewjobworkorder':'viewjobworkorder'+winid)
        } else {
            winid=(winid==null?'viewsalesorder':'viewsalesorder'+winid);
        }
        var label = WtfGlobal.getLocaleText("acc.accPref.autoSO");
         
        if (isJobWorkOrderReciever) {
            label = WtfGlobal.getLocaleText("acc.jobWorkOrder.vendorjobworkorder");
        } 
        if(copyInv !== undefined && copyInv !== "" && copyInv !== null && copyInv){
            winid = 'copy'+winid;
        }else{
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit: isEdit,
//                    copyInv : false,
//                    record: rec,
//                    isCustomer:true,
//                    isOrder:true,
//                    isInvoice:true,
//                    isCopyFromTemplate:true,
//                    isOpeningBalanceOrder:isOpeningBalanceOrder,
//                    templateId:templateId,
//                    moduleid:Wtf.Acc_Sales_Order_ModuleId,
//                    isViewTemplate:true,
//                    isSOfromPO:isSOfromPO,
//                    label:label,
//                    border : false,
//                    heplmodeid: 11,
//                    viewGoodReceipt:true,
//                    readOnly:true,
//                    closable: true,
//                    title:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):WtfGlobal.getLocaleText("acc.field.ViewSalesOrder"))+"-"+rec.data.billno,
//                    tabTip:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):WtfGlobal.getLocaleText("acc.field.ViewSalesOrder"))+"-"+rec.data.billno,
//                    iconCls:'accountingbase salesorder',
//                    modeName:'autoso'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit: isEdit,
                    copyInv : false,
                    record: rec,
                    isCustomer:true,
                    isOrder:true,
                    isInvoice:true,
                    isCopyFromTemplate:true,
                    pendingapproval: rec.data.pendingapproval,
                    isOpeningBalanceOrder:isOpeningBalanceOrder,
                    templateId:templateId,
                    moduleid:isJobWorkOrderReciever?Wtf.MRP_Job_Work_ORDER_REC:Wtf.Acc_Sales_Order_ModuleId,
                    isViewTemplate:true,
                    isSOfromPO:isSOfromPO,
                    isJobWorkOrderReciever:isJobWorkOrderReciever,
                    label:label,
                    border : false,
                    heplmodeid: 11,
                    viewGoodReceipt:true,
                    readOnly:true,
                    closable: true,
                    title:isJobWorkOrderReciever?WtfGlobal.getLocaleText("acc.jobWorkOrder.vendorjobworkorder"):((isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):WtfGlobal.getLocaleText("acc.field.ViewSalesOrder")))+"-"+rec.data.billno,
                    tabTip:isJobWorkOrderReciever?WtfGlobal.getLocaleText("acc.jobWorkOrder.vendorjobworkorder"):((isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):WtfGlobal.getLocaleText("acc.field.ViewSalesOrder")))+"-"+rec.data.billno,
                    iconCls:'accountingbase salesorder',
                    modeName:'autoso'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true && !isCopyFromTemplate){
            var selectedModeId= "SalesOrderList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoSO"));
}

function callViewFixedAssetLeaseSalesOrder(isEdit,rec,winid, copyInv,templateId,isViewTemplate,isSOfromPO,isOpeningBalanceOrder,isLeaseFixedAsset){
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso)||(isLeaseFixedAsset&&isEdit)) {
        winid=(winid==null?'viewfixedassetleasesalesorder':'viewfixedassetleasesalesorder'+winid);
        isLeaseFixedAsset = (isLeaseFixedAsset)?isLeaseFixedAsset:false;
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.FixedAssetTransactionPanel({
                id : winid,
                isEdit: isEdit,
                readOnly:true,
                isViewTemplate:true,
                copyInv : copyInv,
                record: rec,
                isCustomer:true,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isOrder:true,
                isCopyFromTemplate:isCopyFromTemplate,
                isOpeningBalanceOrder:isOpeningBalanceOrder,
                templateId:templateId,
                moduleid:Wtf.Acc_Lease_Order,
                isSOfromPO:isSOfromPO,
                label:isLeaseFixedAsset ? WtfGlobal.getLocaleText("acc.lease.order") : WtfGlobal.getLocaleText("acc.field.Order"),
                border : false,
                heplmodeid: 11,
                closable: true,
                title:WtfGlobal.getLocaleText("acc.lease.vieworder"),// View Asset lease Order
                tabTip:WtfGlobal.getLocaleText("acc.lease.vieworder"),// View Asset lease Order
                iconCls:'accountingbase salesorder',
                modeName:'autoso'
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true && !isCopyFromTemplate){
            var selectedModeId= "SalesOrderList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoSO"));
}

function callFixedAssetLeaseSalesOrder(isEdit,rec,winid, copyInv,templateId,isViewTemplate,isSOfromPO,isOpeningBalanceOrder,isLeaseFixedAsset){
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.leaseorder, Wtf.Perm.leaseorder.createlor)||(!WtfGlobal.EnableDisable(Wtf.UPerm.leaseorder, Wtf.Perm.leaseorder.editlor)&&isEdit)) {
        winid=(winid==null?'fixedassetleasesalesorder':winid);
        var label = WtfGlobal.getLocaleText("acc.accPref.autoSO");
        if(copyInv !== undefined && copyInv !== "" && copyInv !== null && copyInv){
            winid = 'copy'+winid;
        }else{
            copyInv = false;
        }

        isLeaseFixedAsset = (isLeaseFixedAsset)?isLeaseFixedAsset:false;

        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.FixedAssetTransactionPanel({
                id : winid,
                isEdit: isEdit,
                copyInv : copyInv,
                record: rec,
                isCustomer:true,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isOrder:true,
                isCopyFromTemplate:isCopyFromTemplate,
                isOpeningBalanceOrder:isOpeningBalanceOrder,
                templateId:templateId,
                moduleid:Wtf.Acc_Lease_Order,
                isViewTemplate:isViewTemplate,
                isSOfromPO:isSOfromPO,
                label: isLeaseFixedAsset ? WtfGlobal.getLocaleText("acc.lease.order") : WtfGlobal.getLocaleText("acc.field.Order"),
                border : false,
                heplmodeid: 11,
                //            layout: 'border',
                closable: true,
                title:isEdit?WtfGlobal.getLocaleText("acc.lease.editorder"):WtfGlobal.getLocaleText("acc.lease.order"),//(isOpeningBalanceOrder?WtfGlobal.getLocaleText("acc.field.SalesOrder-Opening"):(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoSO"):(isSOfromPO)?WtfGlobal.getLocaleText("acc.wtfTrans.so"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cso"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so")))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH)))))),
                tabTip:isEdit?WtfGlobal.getLocaleText("acc.lease.editorder"):WtfGlobal.getLocaleText("acc.lease.order.create"),//(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoSO"):(isSOfromPO)?WtfGlobal.getLocaleText("acc.wtfTrans.so"):((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so"))+" "+((rec != null)?rec.data.billno:""))))),
                iconCls:'accountingbase salesorder',
                modeName:'autoso'
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true && !isCopyFromTemplate){
            var selectedModeId= "SalesOrderList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating")+" " +WtfGlobal.getLocaleText("acc.accPref.autoSO"));
}

//function callViewSalesOrder(isEdit,rec,winid, copyInv,templateId,isViewTemplate,isSOfromPO,isOpeningBalanceOrder){
//    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
//    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso)) {
//        winid=(winid==null?'viewsalesorder':winid);
//        var label = WtfGlobal.getLocaleText("acc.accPref.autoSO");
//        if(copyInv !== undefined && copyInv !== "" && copyInv !== null && copyInv){
//            winid = 'copy'+winid;
//        }else{
//            copyInv = false;
//        }
//        var panel = Wtf.getCmp(winid);
//        if(panel==null){
//             panel = new Wtf.account.TransactionPanel({
//                id : winid,
//                isEdit: isEdit,
//                copyInv : false,
//                record: rec,
//                isCustomer:true,
//                isOrder:true,
//                isInvoice:true,
//                isCopyFromTemplate:true,
//                isOpeningBalanceOrder:isOpeningBalanceOrder,
//                templateId:templateId,
//                moduleid:Wtf.Acc_Sales_Order_ModuleId,
//                isViewTemplate:true,
//                isSOfromPO:isSOfromPO,
//                label:label,
//                border : false,
//                heplmodeid: 11,
//                viewGoodReceipt:true,
//                readOnly:true,
//                closable: true,
//                title:WtfGlobal.getLocaleText("acc.field.ViewSalesOrder"),
//                tabTip: WtfGlobal.getLocaleText("acc.field.ViewSalesOrder"),
//                iconCls:'accountingbase salesorder',
//                modeName:'autoso'
//            });
//            panel.on("activate", function(){
//                if(Wtf.isIE7) {
//                    var northHt=(Wtf.isIE?150:180);
//                    var southHt=(Wtf.isIE?210:150);
//                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
//                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
//                    panel.NorthForm.setHeight(northHt);
//                    panel.southPanel.setHeight(southHt);
//                panel.on("afterlayout", function(panel, lay){if(Wtf.isIE7) {panel.Grid.setSize(panel.getInnerWidth() - 18,200);}},this);
//                        }
//                panel.doLayout();
//            }, this);
//            Wtf.getCmp('as').add(panel);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        panel.on('update',  function(){
//            if(isEdit == true && !isCopyFromTemplate){
//                var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
//                Wtf.getCmp(selectedModeId).loadStore();
//                Wtf.getCmp('as').remove(panel);
//            }
//        }, this);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +WtfGlobal.getLocaleText("acc.accPref.autoSO"));
//}


function callSalesOrderTemplate(winid){
    var isEdit = false;
    var copyInv = false;
    var rec = null;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso)) {
        winid=(winid==null?'salesordertemplate':winid);
        var label = WtfGlobal.getLocaleText("acc.field.SalesOrderTemplate");
        if(copyInv !== undefined && copyInv !== "" && copyInv !== null && copyInv){
            winid = 'copy'+winid;
        }else{
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit: isEdit,
//                    copyInv : copyInv,
//                    record: rec,
//                    isCustomer:true,
//                    isTemplate:true,
//                    isOrder:true,
//                    label:label,
//
//                    border : false,
//                    //            heplmodeid: 11,
//                    //            layout: 'border',
//                    closable: true,
//                    title:WtfGlobal.getLocaleText("acc.field.SalesOrderTemplate"),
//                    tabTip:WtfGlobal.getLocaleText("acc.field.SalesOrderTemplate"),
//                    iconCls:'accountingbase salesorder',
//                    modeName:'autoso'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit: isEdit,
                    copyInv : copyInv,
                    record: rec,
                    isCustomer:true,
                    isTemplate:true,
                    isOrder:true,
                    label:label,
                    moduleid:Wtf.Acc_Sales_Order_ModuleId,
                    border : false,
                    //            heplmodeid: 11,
                    //            layout: 'border',
                    closable: true,
                    title:WtfGlobal.getLocaleText("acc.field.SalesOrderTemplate"),
                    tabTip:WtfGlobal.getLocaleText("acc.field.SalesOrderTemplate"),
                    iconCls:'accountingbase salesorder',
                    modeName:'autoso'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            var selectedModeId= "SalesOrderList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoSO"));
}


function callPurchaseOrder(isEdit,rec,winid,isOpeningBalanceOrder, isMRPJOBWORKOUT,isJobWorkOrderReciever,isSecurityGateEntry){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createpo)&&!isEdit)||(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.editpo)&&isEdit)) {
        if(isSecurityGateEntry){
            winid=(winid==null?'securityGateEntry':winid);
        }else{
            winid=(winid==null?'purchaseorder':winid);
        }
        var label = WtfGlobal.getLocaleText("acc.accPref.autoPO");
        var panel = Wtf.getCmp(winid);
        if(isOpeningBalanceOrder){
            var moduleid=Wtf.Acc_Purchase_Order_ModuleId;
            var WinTitle=WtfGlobal.getLocaleText("acc.field.PurchaseOrder-Opening"); 
        }else if(isMRPJOBWORKOUT) {
             moduleid= Wtf.MRP_Job_Work_ModuleID ;
             WinTitle=WtfGlobal.getLocaleText("acc.accPref.autoJOBWORKOUT");
             label = WtfGlobal.getLocaleText("acc.accPref.autoJOBWORKOUT");
        }else if(isSecurityGateEntry) {
             moduleid=Wtf.Acc_Security_Gate_Entry_ModuleId;
             WinTitle=WtfGlobal.getLocaleText("acc.securitygate.title");
             label = WtfGlobal.getLocaleText("acc.securitygate.title");
        }else if(isJobWorkOrderReciever) {
            moduleid= Wtf.Job_Work_Out_ORDER_REC ;
             WinTitle=WtfGlobal.getLocaleText("acc.JobWorkOut.PurcahseOrder");
             label = WtfGlobal.getLocaleText("acc.JobWorkOut.PurcahseOrder");
        }else {
            moduleid=Wtf.Acc_Purchase_Order_ModuleId;
            WinTitle=WtfGlobal.getLocaleText("acc.accPref.autoPO");
        }
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit:isEdit,
//                    isCustomer:false,
//                    isOrder:true,
//                    isOpeningBalanceOrder:isOpeningBalanceOrder,
//                    label:label,
//                    border : false,
//                    moduleid:Wtf.Acc_Purchase_Order_ModuleId,
//                    //            layout: 'border',
//                    heplmodeid: 12,
//                    title:isOpeningBalanceOrder?WtfGlobal.getLocaleText("acc.field.PurchaseOrder-Opening"):WtfGlobal.getLocaleText("acc.accPref.autoPO"), //label, //Wtf.util.Format.ellipsis(((isEdit?'Edit ':'')+label+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
//                    tabTip:WtfGlobal.getLocaleText("acc.accPref.autoPO"), //label, //Wtf.util.Format.ellipsis(((isEdit?'Edit ':'')+label+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
//                    closable: true,
//                    iconCls:'accountingbase purchaseorder',
//                    modeName:'autopo'
//                });
//            }else{
                var mode;
                /**
                 * set Mode of Job work out mode when 'isJobWorkOrderReciever' is true
                 */
                if (isJobWorkOrderReciever) {
                    mode= 'autojwo';       
                } else{
                    mode='autopo';    
                }
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit:isEdit,
                    isCustomer:false,
                    isOrder:true,
                    readOnly:false,
                    isOpeningBalanceOrder:isOpeningBalanceOrder,
                    isSecurityGateEntry:isSecurityGateEntry,
                    isMRPJOBWORKOUT:isMRPJOBWORKOUT,
                    label:label,
                    border : false,
                    moduleid:moduleid,
                    //            layout: 'border',
                    heplmodeid: 12,
                    title:Wtf.util.Format.ellipsis(WinTitle), //isOpeningBalanceOrder?Wtf.util.Format.ellipsis():Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoPO")), //label, //Wtf.util.Format.ellipsis(((isEdit?'Edit ':'')+label+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
                    tabTip:WinTitle , //WtfGlobal.getLocaleText("acc.accPref.autoPO"), //label, //Wtf.util.Format.ellipsis(((isEdit?'Edit ':'')+label+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
                    iconCls:'accountingbase purchaseorder',
                    modeName:isSecurityGateEntry?'autosecurityNo':mode,
                    isJobWorkOrderReciever:isJobWorkOrderReciever
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true)Wtf.getCmp('as').remove(panel);
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoPO"));
}
function callPurchaseOrderTemplate(winid){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createpo)) {
        winid=(winid==null?'purchaseorderTemplate':winid);
        var label = WtfGlobal.getLocaleText("acc.field.PurchaseOrderTemplate");
        var panel = Wtf.getCmp(winid);
        var isEdit = false;
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit:isEdit,
//                    isCustomer:false,
//                    isTemplate:true,
//                    isOrder:true,
//                    label:WtfGlobal.getLocaleText("acc.wtfTrans.po"),
//                    border : false,
//                    //            layout: 'border',
//                    //            heplmodeid: 12,
//                    title:WtfGlobal.getLocaleText("acc.field.PurchaseOrderTemplate"),
//                    tabTip:WtfGlobal.getLocaleText("acc.field.PurchaseOrderTemplate"),
//                    closable: true,
//                    iconCls:'accountingbase purchaseorder',
//                    modeName:'autopo'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit:isEdit,
                    isCustomer:false,
                    isTemplate:true,
                    readOnly:false,
                    isOrder:true,
                    label:label,
                    border : false,
                    moduleid:Wtf.Acc_Purchase_Order_ModuleId,
                    //            layout: 'border',
                    //            heplmodeid: 12,
                    title:WtfGlobal.getLocaleText("acc.field.PurchaseOrderTemplate"),
                    tabTip:WtfGlobal.getLocaleText("acc.field.PurchaseOrderTemplate"),
                    closable: true,
                    iconCls:'accountingbase purchaseorder',
                    modeName:'autopo'
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true)Wtf.getCmp('as').remove(panel);
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.accPref.autoPO"));
}

function callEditPurchaseOrder(isEdit,rec,winid,isPOfromSO,thisObj,newtranType, copyInv,templateId,isViewTemplate,isLinkedTransaction,isFromWO,isMRPJOBWORKOUT,isEditTemplate,ifFromShortfall,isJobWorkOrderReciever,isSecurityGate,pendingapproval,isDraft){
    var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    var billid = (rec != null || rec != undefined)? rec.data.billid : "";
    var isExpenseInv = (rec != null || rec != undefined)? rec.data.isexpenseinv : "";
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    /**
     *isViewTemplate flag for view template case
     *isEditTemplate flag for edit template case
     */
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
    var isEditTemplate = isEditTemplate?isEditTemplate:false;
    var permision=false;
    if(isPOfromSO){
        permision=!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createpo);
    }else if(copyInv){
        permision=!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.copypo);
    }else if(isEdit){
        permision=!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.editpo);
    }else{
        permision=!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createpo);
    }
    if(permision || isDraft) {
        var label = (isViewTemplate || isEditTemplate)?WtfGlobal.getLocaleText("acc.field.PurchaseOrderTemplate"):WtfGlobal.getLocaleText("acc.wtfTrans.po");
        if(copyInv == undefined || copyInv == "" || copyInv == null){
            copyInv = false;
        }
        winid = "PurchaseOrder" + winid;
        var panel = Wtf.getCmp(winid);
        
         if(isMRPJOBWORKOUT) {
             var moduleid= Wtf.MRP_Job_Work_ModuleID ;
             var title="Edit " +WtfGlobal.getLocaleText("acc.accPref.autoJOBWORKOUT");
             var tabTip = "Edit "+ WtfGlobal.getLocaleText("acc.accPref.autoJOBWORKOUT");
        }else if(isJobWorkOrderReciever) {
             var moduleid= Wtf.Job_Work_Out_ORDER_REC ;
             var title=copyInv?"Copy " +WtfGlobal.getLocaleText("acc.JobWorkOut.PurcahseOrder"):"Edit " +WtfGlobal.getLocaleText("acc.JobWorkOut.PurcahseOrder");
             var tabTip = copyInv?"Copy " +WtfGlobal.getLocaleText("acc.JobWorkOut.PurcahseOrder"):"Edit " +WtfGlobal.getLocaleText("acc.JobWorkOut.PurcahseOrder");
             label = WtfGlobal.getLocaleText("acc.JobWorkOut.PurcahseOrder");
        } else if(isSecurityGate){
             var moduleid=Wtf.Acc_Security_Gate_Entry_ModuleId;
             var title=copyInv?"Copy " +WtfGlobal.getLocaleText("acc.securitygate.title"):"Edit " +WtfGlobal.getLocaleText("acc.securitygate.title");
             var tabTip = copyInv?"Copy " +WtfGlobal.getLocaleText("acc.securitygate.title"):"Edit " +WtfGlobal.getLocaleText("acc.securitygate.title");
             label = WtfGlobal.getLocaleText("acc.securitygate.title");
        } else {
            moduleid=Wtf.Acc_Purchase_Order_ModuleId;
              title= (isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewPurchaseOrderTemplate"):(isEditTemplate?WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.field.PurchaseOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.wtfTrans.po"):((isPOfromSO)?WtfGlobal.getLocaleText("acc.wtfTrans.po"):((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cpo"):(ifFromShortfall?WtfGlobal.getLocaleText("acc.wtfTrans.po"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.epo"):WtfGlobal.getLocaleText("acc.wtfTrans.po"))))))))));
              tabTip= (isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewPurchaseOrderTemplate"):(isEditTemplate?WtfGlobal.getLocaleText("acc.common.edit")+" "+WtfGlobal.getLocaleText("acc.field.PurchaseOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.wtfTrans.po"):((isPOfromSO)?WtfGlobal.getLocaleText("acc.wtfTrans.po"):(copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cpo"):(ifFromShortfall?WtfGlobal.getLocaleText("acc.wtfTrans.po"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.epo"):WtfGlobal.getLocaleText("acc.wtfTrans.po")))))))));
        }
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit:isEdit,
//                    record:rec,
//                    copyInv:copyInv,
//                    isCustomer:false,
//                    templateId:templateId,
//                    isCopyFromTemplate:isCopyFromTemplate,
//                    isViewTemplate:isViewTemplate,
//                    isOrder:true,
//                    moduleid:Wtf.Acc_Purchase_Order_ModuleId,
//                    POthisObj:thisObj,
//                    POnewtranType:newtranType,
//                    label:label,
//                    border : false,
//                    isPOfromSO:isPOfromSO,
//                    //	            layout: 'border',
//                    heplmodeid: 69,
//                    title:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewPurchaseOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.wtfTrans.po"):((isPOfromSO)?WtfGlobal.getLocaleText("acc.wtfTrans.po"):Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cpo"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.epo"):WtfGlobal.getLocaleText("acc.wtfTrans.po")))+" "+rec.data.billno),Wtf.TAB_TITLE_LENGTH))))),
//                    tabTip:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewPurchaseOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.wtfTrans.po"):((isPOfromSO)?WtfGlobal.getLocaleText("acc.wtfTrans.po"):(copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cpo"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.epo"):WtfGlobal.getLocaleText("acc.wtfTrans.po")))+" "+rec.data.billno)))),
//                    closable: true,
//                    iconCls:'accountingbase purchaseorder',
//                    modeName:'autopo'
//                });
//            }else{
                 var mode;
                /**
                 * set Mode of Job work out  when 'isJobWorkOrderReciever' is true
                 */
                if (isJobWorkOrderReciever) {
                    mode= 'autojwo';       
                } else{
                    mode='autopo';    
                }
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit:isEdit,
                    record:rec,
                    copyInv:copyInv,
                    isExpenseInv:isExpenseInv,
                    readOnly:false,
                    isCustomer:false,
                    templateId:templateId,
                    isCopyFromTemplate:isCopyFromTemplate,
                    isViewTemplate:isViewTemplate,
                    isEditTemplate:isEditTemplate,
                    isMRPJOBWORKOUT:isMRPJOBWORKOUT,
                    isOrder:true,
                    isSecurityGateEntry:isSecurityGate,
                    isFromWO:isFromWO,
                    ifFromShortfall:ifFromShortfall,
                    moduleid:moduleid,
                    POthisObj:thisObj,
                    POnewtranType:newtranType,
                    label:label,
                    border : false,
                    isPOfromSO:isPOfromSO,
                    //	            layout: 'border',
                    heplmodeid: 69,
                    title:title,
                    tabTip:tabTip,
                    closable: true,
                    iconCls:'accountingbase purchaseorder',
                    modeName:isSecurityGate?'autosecurityNo':mode,
                    isLinkedTransaction:isLinkedTransaction,
                    isJobWorkOrderReciever:isJobWorkOrderReciever,
                    pendingapproval:pendingapproval
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
                panel.billid = billid;
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){

        if(isEdit == true && !isCopyFromTemplate){
            var selectedModeId= "PurchaseOrderList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,(copyInv?WtfGlobal.getLocaleText("acc.lp.copypo"):(isEdit &&!isPOfromSO)?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating"))+" "+WtfGlobal.getLocaleText("acc.wtfTrans.po"));
}

function callViewPurchaseOrder(isEdit,rec,winid,isPOfromSO,thisObj,newtranType, copyInv,templateId,isViewTemplate,isJobWorkOrderReciever,isSecurity){
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    var isExpenseInv = (rec != null || rec != undefined)? rec.data.isexpenseinv : "";
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.viewpo)) {
        var label = isJobWorkOrderReciever?WtfGlobal.getLocaleText("acc.JobWorkOut.PurcahseOrder"):WtfGlobal.getLocaleText("acc.wtfTrans.po");
        if(copyInv !== undefined && copyInv !== "" && copyInv !== null && copyInv){
            winid = 'View'+winid;
        }else{
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        var title=WtfGlobal.getLocaleText("acc.field.ViewPurchaseOrder");
        var tabTip=WtfGlobal.getLocaleText("acc.field.ViewPurchaseOrder");
        if(isJobWorkOrderReciever){
            var title=WtfGlobal.getLocaleText("acc.JobWorkOut.ViewPurcahseOrder");
            var tabTip = WtfGlobal.getLocaleText("acc.JobWorkOut.ViewPurcahseOrder");
        }else if(isSecurity){
            title=WtfGlobal.getLocaleText("acc.security.Viewsecuritygateentry");
            tabTip = WtfGlobal.getLocaleText("acc.security.Viewsecuritygateentry");
        }
        
        if(panel==null){
//            if(SATSCOMPANY_ID==companyid){
//                panel = new Wtf.account.TransactionPanelSats({
//                    id : winid,
//                    isEdit:true,
//                    record:rec,
//                    copyInv:false,
//                    isCustomer:false,
//                    templateId:templateId,
//                    isCopyFromTemplate:true,
//                    isViewTemplate:true,
//                    isOrder:true,
//                    readOnly:true,
//                    isInvoice:false,
//                    viewGoodReceipt:true,
//                    moduleid:Wtf.Acc_Purchase_Order_ModuleId,
//                    POthisObj:thisObj,
//                    POnewtranType:newtranType,
//                    label:label,
//                    border : false,
//                    isPOfromSO:isPOfromSO,
//                    heplmodeid: 12,
//                    title:WtfGlobal.getLocaleText("acc.field.ViewPurchaseOrder")+"-"+rec.data.billno,
//                    tabTip:WtfGlobal.getLocaleText("acc.field.ViewPurchaseOrder")+"-"+rec.data.billno,
//                    closable: true,
//                    iconCls:'accountingbase purchaseorder',
//                    modeName:'autopo'
//                });
//            }else{
                panel = new Wtf.account.TransactionPanel({
                    id : winid,
                    isEdit:true,
                    isExpenseInv:isExpenseInv,
                    record:rec,
                    copyInv:false,
                    isCustomer:false,
                    templateId:templateId,
                    isCopyFromTemplate:true,
                    isViewTemplate:true,
                    isOrder:true,
                    readOnly:true,
                    isInvoice:false,
                    viewGoodReceipt:true,
                    pendingapproval: rec.data.pendingapproval,
                    isSecurityGateEntry:isSecurity,
                    moduleid:isSecurity?Wtf.Acc_Security_Gate_Entry_ModuleId:isJobWorkOrderReciever?Wtf.Job_Work_Out_ORDER_REC:Wtf.Acc_Purchase_Order_ModuleId,
                    POthisObj:thisObj,
                    POnewtranType:newtranType,
                    label:label,
                    border : false,
                    isPOfromSO:isPOfromSO,
                    heplmodeid: 12,
                    title:Wtf.util.Format.ellipsis((title+"-"+rec.data.billno),Wtf.TAB_TITLE_LENGTH),
                    tabTip:tabTip+"-"+rec.data.billno,
                    closable: true,
                    iconCls:'accountingbase purchaseorder',
                    modeName:isSecurity?'autosecurityNo':'autopo',
                    isJobWorkOrderReciever:isJobWorkOrderReciever
                });
//            }
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){

        if(isEdit == true && !isCopyFromTemplate){
            var selectedModeId= "PurchaseOrderList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.wtfTrans.po"));
}

function callProductDetails(productlinkid,addproductwin,wcid,isFromWC,searchStr, filterAppend){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.product, Wtf.Perm.product.view)&&!addproductwin) ||(!WtfGlobal.EnableDisable(Wtf.UPerm.product, Wtf.Perm.product.create)&&addproductwin)) {
        var panel = Wtf.getCmp("mainProductDetails");
        var isAlreadyOpen=true;
        if(panel==null){
            panel = new Wtf.TabPanel({
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.productList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.productList.tabTitle"),  //'Products & Services List',
                id:'mainProductDetails',
                closable:true,
                border:false,
                iconCls :getButtonIconCls(Wtf.etype.product),
                activeTab:0
            });
            Wtf.getCmp('as').add(panel);
            callProductReport(productlinkid,addproductwin,isFromWC,wcid);
            if (!isFromWC) {
                callProductByCategoryReport();
            }
            isAlreadyOpen=false;
        }
        
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(Wtf.getCmp('ProductReport'), searchStr, filterAppend);
        if(panel!=null && productlinkid!=null)
            Wtf.getCmp("ProductReport").calllinkRowColor(productlinkid);
        if(addproductwin&&!WtfGlobal.EnableDisable(Wtf.UPerm.product, Wtf.Perm.product.create)){
            callProductWindow(false,null,"productwin");
            Wtf.getCmp("productwin").on('update',panel.updateGrid,panel);
        }
        panel.on("activate",function(){
            if(Wtf.dirtyStore.product){
                panel.productStore.reload();
                Wtf.dirtyStore.product = false;
            }
        },this);
        /*following code is used to load store of prodct when product tab is already open and user open it throug workcetner so to filter product store following code is used */
        if (isAlreadyOpen) {
           var productReport = Wtf.getCmp("ProductReport");
            if (isFromWC) {
                productReport.setWorkCenterID(wcid);
                productReport.productStore.reload();
                var categoryTab = Wtf.getCmp("ProductByCategoryDetails");
                if ( categoryTab ) {
                   panel.remove(categoryTab); 
                }
                Wtf.getCmp('as').doLayout();
            } else {
                productReport.setWorkCenterID('');
                productReport.productStore.reload();
                callProductByCategoryReport();
                Wtf.getCmp('as').doLayout();
            }
        }
    }
    else
        WtfComMsgBox(46,0,false,(addproductwin?WtfGlobal.getLocaleText("acc.common.creating"):WtfGlobal.getLocaleText("acc.common.viewing"))+" "+WtfGlobal.getLocaleText("acc.create.products"));
}
function callUOMMaterType(){
    if(Wtf.account.companyAccountPref.UomSchemaType==Wtf.UOMSchema){
        var panel = Wtf.getCmp("uomschemaMaster");
        if(panel==null){
            panel = new Wtf.account.UOMschemaMaster({
                title:WtfGlobal.getLocaleText("acc.schema.UOMSchema"),//         Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.productList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.schema.UOMSchema"), //WtfGlobal.getLocaleText("acc.productList.tabTitle"),  //'Products & Services List',
                id:'uomschemaMaster',
                closable:true,
                border:false,
                layout: 'fit',
                iconCls :getButtonIconCls(Wtf.etype.product)
            });
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }else{
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),WtfGlobal.getLocaleText("acc.UomSystemControl.access")], 3);
    }

}

function callProductReport(productlinkid, addproductwin,isFromWC,wcid) {
    var panel = Wtf.getCmp("ProductReport");
    if(panel==null){
        panel = new Wtf.account.ProductDetailsPanel({
            id : 'ProductReport',
            addproductwin:addproductwin,
            productlinkid:productlinkid,
            border : false,
            moduleId:Wtf.Acc_Product_Master_ModuleId,
            layout: 'fit',
            isFromWC:isFromWC,
            wcid:wcid,
//            closable:isFromWC,      // If prooducts are opened from WC report then making tab as cloasable
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.productList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.productList.tabTitle"),  //'Products & Services List',
            iconCls:getButtonIconCls(Wtf.etype.product)
        });
//        if (isFromWC) {
//            Wtf.getCmp('workcentreMaintabMaster').add(panel);  // If products are opened from WC report then making WC tab as parent tab for this tab
//        } else {
            Wtf.getCmp('mainProductDetails').add(panel);
//        }
    }

    var channelName=Wtf.ChannelName.ProductAndServicesReport;
    if (Wtf.getCmp('mainProductDetails')) {                  
        Wtf.getCmp('mainProductDetails').on('beforeclose', function() {
            beforeClose(channelName);
        },this); 
    }
    
        Wtf.getCmp('mainProductDetails').setActiveTab(panel);
        Wtf.getCmp('mainProductDetails').doLayout();
//    
}

function callProductQuantityDetailsReport(isFromQuantityDetailsReport) {
    var moduleid=isFromQuantityDetailsReport?'ProductQuantityDetailsReport':'StockDetailsOnUoMBasis';
    var panel = Wtf.getCmp(moduleid);
    var isFromQuantityDetailR = !Wtf.isEmpty(isFromQuantityDetailsReport) ? isFromQuantityDetailsReport : false;
    if(panel==null){
        panel = new Wtf.account.ProductQuantityDetails({
            id : moduleid,
            border : false,
            closable:true,
//            layout: 'fit',
            isFromQuantityDetailsReport : isFromQuantityDetailsReport,
            title: isFromQuantityDetailsReport ? WtfGlobal.getLocaleText("acc.productquantity.details") : WtfGlobal.getLocaleText("acc.inventoryList.StockDetailsOnUoMBasis"),//Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.productList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
            tabTip: isFromQuantityDetailsReport ? WtfGlobal.getLocaleText("acc.productquantity.details") : WtfGlobal.getLocaleText("acc.inventoryList.StockDetailsOnUoMBasis"),  //'Products & Services List',
            iconCls:getButtonIconCls(Wtf.etype.product)
        });
        Wtf.getCmp('as').add(panel);
    }

    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callProductByCategoryReport(){
    var panel= Wtf.getCmp("ProductByCategoryDetails");
    if(panel==null){
        panel= new Wtf.account.ProductListByCategory({
            id: 'ProductByCategoryDetails',
            border: false,
            layout: 'fit',
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.prod.tabTitleCategory"), Wtf.TAB_TITLE_LENGTH),
            tabTip: WtfGlobal.getLocaleText("acc.prod.tabTitleCategory"),  //"Product List By Category",
            iconCls: getButtonIconCls(Wtf.etype.product)
        });
        Wtf.getCmp('mainProductDetails').add(panel);
    }
    Wtf.getCmp('mainProductDetails').doLayout();
}

function callProductGroupingWin(ByCategoryStore){
    var p = Wtf.getCmp("personsgroupinglinkforaccounting");
    if(!p){
        new Wtf.productgroupingwin({
            title:WtfGlobal.getLocaleText("acc.prod.editCategoty"),
            ByCategoryStore:ByCategoryStore
        }).show();
    }
}

//function callCycleCount(){
//    var approvalflag=0;
//    var panel=null;
//    var id,title;
//    if(approvalflag==0){
//        panel = Wtf.getCmp("CycleCount");
//        id = 'CycleCount';
//        title = WtfGlobal.getLocaleText("acc.productList.cc");  //'Cycle Count Entry';
//    }else{
//        panel = Wtf.getCmp("CycleCountApproval");
//        id = 'CycleCountApproval';
//        title = WtfGlobal.getLocaleText("acc.productList.cca");  //'Cycle Count Approval';
//    }
//    if(panel==null){
//        panel = new Wtf.account.cycleCountPanel({
//            id : id,
//            title:Wtf.util.Format.ellipsis(title,18),
//            tabTip:title,
//            closable: true,
//            layout:'fit',
//            approve:approvalflag,
//            iconCls:getButtonIconCls(Wtf.etype.addcyclecounttab)
//        });
//        Wtf.getCmp('as').add(panel);
//    }
//    Wtf.getCmp('as').setActiveTab(panel);
//    Wtf.getCmp('as').doLayout();
//}
//
//function callCycleCountApproval(){
//    var approvalflag=1;
//    var panel=null;
//    var id,title;
//    if(approvalflag==0){
//        panel = Wtf.getCmp("CycleCount");
//        id = 'CycleCount';
//        title = WtfGlobal.getLocaleText("acc.productList.cycleCount");  //'Cycle Count';
//    }else{
//        panel = Wtf.getCmp("CycleCountApproval");
//        id = 'CycleCountApproval';
//        title = WtfGlobal.getLocaleText("acc.productList.cca");  //'Cycle Count Approval';
//    }
//    if(panel==null){
//        panel = new Wtf.account.cycleCountPanel({
//            id : id,
//            title:Wtf.util.Format.ellipsis(title,18),
//            tabTip:title,
//            closable: true,
//            layout:'fit',
//            approve:approvalflag,
//            iconCls:getButtonIconCls(Wtf.etype.approvecyclecounttab)
//        });
//        Wtf.getCmp('as').add(panel);
//    }
//    Wtf.getCmp('as').setActiveTab(panel);
//    Wtf.getCmp('as').doLayout();
//}
//
//function callCycleCountWorksheet(){
//    var panel = Wtf.getCmp("CycleCountWorksheet");
//    if(panel==null){
//        panel = new Wtf.account.cycleCountWorksheet({
//            id : 'CycleCountWorksheet',
//            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.productList.cycleCountWorksheet"),18),
//            tabTip:WtfGlobal.getLocaleText("acc.productList.cycleCountWorksheet"),  //'Cycle Count Worksheet',
//            closable: true,
//            layout:'fit',
//            iconCls:getButtonIconCls(Wtf.etype.countcyclecounttab)
//        });
//        Wtf.getCmp('as').add(panel);
//    }
//    Wtf.getCmp('as').setActiveTab(panel);
//    Wtf.getCmp('as').doLayout();
//}
//
//function callCycleCountReport(){
//    var panel = Wtf.getCmp("CycleCountReport");
//    if(panel==null){
//        panel = new Wtf.account.CyclecountReport({
//            id : 'CycleCountReport',
//            border : false,
//            layout: 'fit',
//            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.productList.cycleCountReport"),18),
//            topTitle:WtfGlobal.getLocaleText("acc.productList.cycleCountReport"),  //'Cycle Count Report',
//            closable: true,
//            iconCls:getButtonIconCls(Wtf.etype.cyclecountreporttab)
//        });
//
//        Wtf.getCmp('as').add(panel);
//    }
//    Wtf.getCmp('as').setActiveTab(panel);
//    Wtf.getCmp('as').doLayout();
//}

function reorderProducts(productlinkid,addproductwin){
    var panel = Wtf.getCmp("reorderproducts");
    if(panel==null){
        panel = new Wtf.account.SuggestedReorder({
            id : 'reorderproducts',
            border : false,
            layout: 'fit',
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.productList.reorderProducts"),18),
            tabTip:WtfGlobal.getLocaleText("acc.productList.reorderProductsTT"),  //'List of suggested reorder product(s)',
            closable: true,
            iconCls:getButtonIconCls(Wtf.etype.reorderreport)
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(panel!=null && productlinkid!=null)
        Wtf.getCmp("ProductReport").calllinkRowColor(productlinkid);

}

function callProductList(){
    var panel = Wtf.getCmp("ProductList");
    if(panel==null){
        panel = new Wtf.account.ProductListPanel({
            id : 'ProductList',
            border : false,
            layout: 'fit',
            title:WtfGlobal.getLocaleText("acc.cnList.prodList"),
            closable: true,
            iconCls:'list'
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function getPendingRecurringInvoiceTab(jeId, extraFilters, consolidateFlag,ispendingapproval, isCustomer, isOrder){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.viewje)){
        var repeatInvoicePanelID = isOrder?"RecurringSOPending":"RecurringInvoicePending";
        var panel = Wtf.getCmp(repeatInvoicePanelID);
        if(ispendingapproval){
            panel = new Wtf.RepeatedInvoicesReport({
                id : repeatInvoicePanelID,
                consolidateFlag:consolidateFlag,
                title:isOrder?WtfGlobal.getLocaleText("acc.pending.recurSO"):WtfGlobal.getLocaleText("acc.pending.recurinvoice"),
                tabTip:isOrder?WtfGlobal.getLocaleText("acc.pending.recurSO.tooltip"):WtfGlobal.getLocaleText("acc.pending.recurinvoice.tooltip"),
                border: false,
                closable: true,
                layout: 'fit',
                iconCls:'accountingbase recurinvoicereport',
                isCustomer:isCustomer,
                isCustBill:false,
                isOrder:isOrder,
                ispendingapproval:ispendingapproval
            });
        }
        return panel;
    }
}

function getPendingRecurringJETab(jeId, extraFilters, consolidateFlag,ispendingAproval){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.viewje)){
        var repeatInvoicePanelID = "PendingRepeateJEList";
        var panel = Wtf.getCmp(repeatInvoicePanelID);
        if(ispendingAproval){
            panel = new Wtf.RepeatedJEReport({
                id : repeatInvoicePanelID,
                consolidateFlag:consolidateFlag,
                title:WtfGlobal.getLocaleText("acc.pending.recurje"),
                tabTip:WtfGlobal.getLocaleText("acc.pending.recurje.tooltip"),
                border: false,
                closable: true,
                layout: 'fit',
                iconCls:'accountingbase journalentryreport',
                isCustBill:false,
                isOrder:true,
                ispendingAproval:ispendingAproval
            });
        }
        return panel;
    }
}

function getPendingRecurringMakePaymentTab(mpId, extraFilters, consolidateFlag,ispendingAproval){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.viewje)){
        var repeatInvoicePanelID = "PendingRepeateMPList";
        var panel = Wtf.getCmp(repeatInvoicePanelID);
        if(ispendingAproval){
            panel = new Wtf.RepeatedPaymentReport({
                id : repeatInvoicePanelID,
                consolidateFlag:consolidateFlag,
                title:WtfGlobal.getLocaleText("acc.pending.recurmp"),
                tabTip:WtfGlobal.getLocaleText("acc.pending.recurmp.tooltip"),
                border: false,
                closable: true,
                layout: 'fit',
                iconCls:'accountingbase makepaymentreport',
                isCustBill:false,
                isOrder:true,
                ispendingAproval:ispendingAproval
            });
        }
        return panel;
    }
}

function callJournalEntryDetails(jid,check,consolidateFlag,reportbtnshwFlag,pendingApproval,titlelabel, startDate, endDate, params){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.viewje)){
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var panelID = "NormalJournalEntryDetails";
        panelID = consolidateFlag?panelID+'Merged':panelID;
        pendingApproval= (pendingApproval==undefined)?false:pendingApproval;
        var panel = Wtf.getCmp(panelID);
        reportbtnshwFlag=reportbtnshwFlag;
        var invoiceMainPanelID = "JEMainTab";
        var invoiceTabPanel = Wtf.getCmp(invoiceMainPanelID);
        if(invoiceTabPanel==null){
            if(params === undefined){
                params = {};
            }
            panel = getJETab(panelID, (reportbtnshwFlag?WtfGlobal.getLocaleText("acc.jeList.tabTitle"):WtfGlobal.getLocaleText("acc.je.tabTitle")), jid, "", consolidateFlag,reportbtnshwFlag,pendingApproval, startDate, endDate, params);
            panel.on("activate", function(){
                showAdvanceSearch(panel, params.searchStr, params.filterAppend);
            });
            var repeatInvoicePanelID = "RepeateJEList";
            var itemsArray=[];
            itemsArray.push(panel);
            if(!pendingApproval){
                itemsArray.push(new Wtf.RepeatedJEReport({
                    id : repeatInvoicePanelID,
                    consolidateFlag:consolidateFlag,
                    title:(reportbtnshwFlag)?WtfGlobal.getLocaleText("acc.field.RecurringJournalEntryReport"):WtfGlobal.getLocaleText("acc.field.RecurringJournalEntry"),
                    tabTip:(reportbtnshwFlag)?WtfGlobal.getLocaleText("acc.field.RecurringJournalEntryReport"):WtfGlobal.getLocaleText("acc.field.RecurringJournalEntry"),
                    border: false,
                    closable: false,
                    layout: 'fit',
                    iconCls:'accountingbase journalentryreport',
                    isCustBill:false,
                    isOrder:true,
                    ispendingAproval:false
                }));
            }
            invoiceTabPanel = new Wtf.TabPanel({
                activeTab: 0,
                border: false,
                closable: true,
                id: invoiceMainPanelID,
                iconCls:'accountingbase journalentryreport',
                title:Wtf.util.Format.ellipsis( (titlelabel!=undefined)?titlelabel:(WtfGlobal.getLocaleText("acc.jeList.tabTitle")),Wtf.TAB_TITLE_LENGTH),
                tabTip: (titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.jeList.tabTitle")+':<br>'+WtfGlobal.getLocaleText("acc.jeList.tabToolTip"),  //'Journal Entry Report',
                items: itemsArray
            });
            Wtf.getCmp('as').add(invoiceTabPanel);
            panel.on('journalentry',callJournalEntryDetails);
            Wtf.getCmp('as').setActiveTab(invoiceTabPanel);
            //            Wtf.getCmp('as').add(panel);
            panel.expandJournalEntry(jid,check);
        }else{
            panel.expandJournalEntry(jid,check,startDate, endDate);
            Wtf.getCmp('as').setActiveTab(invoiceTabPanel);
        }
        invoiceTabPanel.setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }else{
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.jeList.tabTitle"));
    }
}
            
function callUserSummaryReport(jid, check, consolidateFlag, reportbtnshwFlag, pendingApproval, titlelabel, startDate, endDate, params, userid){
        if (!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.viewje)){
                consolidateFlag = consolidateFlag != undefined?consolidateFlag:false;
                var panelID = "usersummaryreport";
                panelID = consolidateFlag?panelID + 'Merged':panelID;
                pendingApproval = (pendingApproval == undefined)?false:pendingApproval;
                var panel = Wtf.getCmp(panelID);
                reportbtnshwFlag = reportbtnshwFlag;
                var invoiceMainPanelID = "user";
                var invoiceTabPanel = Wtf.getCmp(invoiceMainPanelID);
                 startDate = startDate ? new Date(startDate) : WtfGlobal.getDates(true);
                 endDate = endDate ? new Date(endDate) : WtfGlobal.getDates(false);
                if (invoiceTabPanel == null){
                    if (params === undefined){
                         params = {};
                    }
                    panel = getJETab(panelID, "User Transaction Summary Report", jid, "", consolidateFlag, reportbtnshwFlag, pendingApproval, startDate, endDate, params,true,userid);
                    panel.on("activate", function(){
                        showAdvanceSearch(panel, params.searchStr, params.filterAppend);
                    });
                    var itemsArray = [];
                    itemsArray.push(panel);
                    invoiceTabPanel = new Wtf.TabPanel({
                    activeTab: 0,
                        border: false,
                        closable: true,
                        id: invoiceMainPanelID,
                        title:WtfGlobal.getLocaleText("acc.jeList.userSummaryReportTabTitle"),
                        tabTip: WtfGlobal.getLocaleText("acc.jeList.userSummaryReportTabTitle"), //'Journal Entry Report',
                        items: itemsArray
                    });
                    Wtf.getCmp('as').add(invoiceTabPanel);
                    panel.on('user', callUserSummaryReport);
                    Wtf.getCmp('as').setActiveTab(invoiceTabPanel);
                //            Wtf.getCmp('as').add(panel);
                panel.expandJournalEntry(jid, check);
        } else{
                panel.expandJournalEntry(jid, check, startDate, endDate);
                Wtf.getCmp('as').setActiveTab(invoiceTabPanel);
        }
        invoiceTabPanel.setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        if (panel) {
                panel.handleCallFromAuditTrail(userid ? userid : "");
                
            }
    } else {
            WtfComMsgBox(46, 0, false, WtfGlobal.getLocaleText("acc.common.viewing") + " " + WtfGlobal.getLocaleText("acc.jeList.tabTitle"));
    }
}         
         
function AgedReceivable(){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewagedreceivable)){
        var panel = Wtf.getCmp("AgedReceivable");
        if(panel==null){
            panel = new Wtf.account.AgedReceivable({
                id : 'AgedReceivable',
                border : false,
                layout: 'fit',
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.agedr"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.agedr"),  //'Aged Receivable',
                closable: true,
                iconCls:'report'
            });
            Wtf.getCmp('as').add(panel);
            panel.on('account',viewGroupDetailReport);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.wtfTrans.agedrr"));
}

function callFinalStatement(activetab1){
    var activetab=activetab1!=null?activetab1:0;
    var panel = Wtf.getCmp("finalStmnt");
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.financialStatements"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.financialStatementsTabTip"),  //'Financial Statements',
            id:'finalStmnt',
            closable:true,
            iconCls:'accountingbase balancesheet'
        });
        Wtf.getCmp('as').add(panel);
    }
    if(activetab1 == undefined || activetab1 == null) {
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewledger))
            callLedger();
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewtrialbalance))
            TrialBalance();
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewtradingpnl))
            NewTradingProfitLoss();
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewbsheet))
            periodViewBalanceSheet();
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.setActiveTab(activetab==0?Wtf.getCmp('ledger'):(activetab==1?Wtf.getCmp('TrialBalance'):(activetab==2?Wtf.getCmp('TradingProfitandLoss'):Wtf.getCmp('bsheet'))));
    Wtf.getCmp('as').doLayout();

}


function BalanceSheet(consolidateFlag,searchStr, filterAppend, templateid){

    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    var id = 'newbsheet';
    id = consolidateFlag?id+'Merged':id;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewbsheet)) {
        var panel = Wtf.getCmp(id);
        callFinalStatement(3);
        if(panel==null){
            panel = new Wtf.account.FinalStatement({
                id : id,
                consolidateFlag:consolidateFlag,
                templateid : templateid,
                statementType:'BalanceSheet',
                border : false,
                layout: 'fit',
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.balanceSheet"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.balanceSheetTabTip"),  //'Balance Sheet',
                topTitle:'<center><font size=4>Balance Sheet</font></center>',
                closable: false,
                searchJson: searchStr,
                filterConjuctionCrit:filterAppend,
                moduleid:Wtf.Acc_Ledger_ModuleId, 
                reportid:Wtf.autoNum.BalanceSheetPeriodView, //Added report id for balancesheet search report
                iconCls:'accountingbase balancesheet'
            });
            Wtf.getCmp('finalStmnt').add(panel);
            panel.on('account',viewGroupDetailReport);//Open 'Group Detail Report' (ERP-33398)
        }
        Wtf.getCmp('finalStmnt').setActiveTab(panel);
        Wtf.getCmp('finalStmnt').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
        Wtf.getCmp('as').doLayout();
    //        panel.on("activate",function(panel){
    //            panel.westPanel.setWidth(panel.getInnerWidth()/2);
    //            panel.doLayout();
    //        });
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.balanceSheet"));
}

function periodViewBalanceSheet(consolidateFlag,searchStr, filterAppend, templateid){
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    var id = 'periodviewnewbsheet';
    id = consolidateFlag?id+'Merged':id;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewbsheet)) {
        var panel = Wtf.getCmp(id);
        callFinalStatement(3);
        var defaultBSTemplate = Wtf.CustomLayout.DefaultTemplates[Wtf.templateType.balanceSheet];
        if(defaultBSTemplate){
            if(panel==null){
                panel = new Wtf.account.TradingCustomLayout({
                    id : id,
                    consolidateFlag : consolidateFlag,
                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.balanceSheet"),Wtf.TAB_TITLE_LENGTH),
                    tabTip:WtfGlobal.getLocaleText("acc.balanceSheetTabTip"),  //'Balance Sheet',
                    templatetitle:WtfGlobal.getLocaleText("acc.balanceSheet"),  //'Balance Sheet',
                    topTitle:'<center><font size=4>Balance Sheet</font></center>',
                    moduleid : 101, //Added module id for Tading Profit and loss search report
                    reportid : Wtf.autoNum.BalanceSheetReportId,
                    searchJson : "",
                    filterConjuctionCrit : "",
                    templateid : defaultBSTemplate.id,
                    templatetype : 0,
                    //                    templatetitle : templatetitle!=''?templatetitle:templateName,
                    //                    templateheadings : templateheadings,
                    statementType : "BalanceSheet",
                    border : false,
                    closable : false,
                    layout : 'fit',
                    iconCls :'accountingbase balancesheet'
                });
                panel.on('account',viewGroupDetailReport);//Open 'Group Detail Report' (ERP-33398)
                Wtf.getCmp('finalStmnt').add(panel);
            }
        }else{
            if(panel==null){
                panel = new Wtf.account.FinalStatement({
                    id : id,
                    consolidateFlag:consolidateFlag,
                    templateid : templateid,
                    statementType:'BalanceSheet',
                    border : false,
                    layout: 'fit',
                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.balanceSheet"),Wtf.TAB_TITLE_LENGTH),
                    tabTip:WtfGlobal.getLocaleText("acc.balanceSheetTabTip"),  //'Balance Sheet',
                    topTitle:'<center><font size=4>Balance Sheet</font></center>',
                    closable: false,
                    periodView: true,
                    searchJson: searchStr,
                    filterConjuctionCrit:filterAppend,
                    moduleid:Wtf.Acc_Ledger_ModuleId, 
                    reportid : Wtf.autoNum.DefaultBalanceSheetReportId, //Added report id for balancesheet search report.
                    iconCls:'accountingbase balancesheet'
                });
                Wtf.getCmp('finalStmnt').add(panel);
                panel.on('account',viewGroupDetailReport);//Open 'Group Detail Report' (ERP-33398)
            }
        }
        Wtf.getCmp('finalStmnt').setActiveTab(panel);
        Wtf.getCmp('finalStmnt').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
        Wtf.getCmp('as').doLayout();
    }
    else
    WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.balanceSheet"));
    }

function ProfitandLoss(consolidateFlag){
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    var id = 'ProfitandLoss';
    id = consolidateFlag?id+'Merged':id;
    var panel = Wtf.getCmp(id);
    callFinalStatement(2);
    if(panel==null){
        panel = new Wtf.account.FinalStatement({
            id : id,
            consolidateFlag:consolidateFlag,
            statementType:'ProfitAndLoss',
            border : false,
            layout: 'fit',
            title:WtfGlobal.getLocaleText("acc.field.Profit&Loss"),
            topTitle:'<center><font size=4>'+WtfGlobal.getLocaleText("acc.field.ProfitandLossAccount")+'</font></center>',
            closable: false,
            iconCls:'profitloss'
        });
        Wtf.getCmp('finalStmnt').add(panel);
        panel.on('account',viewGroupDetailReport);
    }
    Wtf.getCmp('finalStmnt').setActiveTab(panel);
    Wtf.getCmp('finalStmnt').doLayout();
    Wtf.getCmp('as').doLayout();
    panel.on("activate",function(panel){
        panel.doLayout();
    });
}

function TradingProfitLoss(consolidateFlag, templateid){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewtradingpnl)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var id = 'TradingProfitandLoss';
        id = consolidateFlag?id+'Merged':id;
        var panel = Wtf.getCmp(id);
        callFinalStatement(2);
        if(panel==null){
            panel = new Wtf.account.FinalStatement({
                id : id,
                consolidateFlag:consolidateFlag,
                templateid : templateid,
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.P&L.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.P&L.tabTitleTT"),  //'Trading & Profit/Loss',
                topTitle:'<center><font size=4>'+WtfGlobal.getLocaleText("acc.field.TradingandProfit/LossAccount")+'</font></center>',
                statementType:'TradingAndProfitLoss',
                border : false,
                closable: true,
                layout: 'fit',
                iconCls:'accountingbase financialreport'
            });
            Wtf.getCmp('finalStmnt').add(panel);
            panel.on('account',viewGroupDetailReport);
        }
        Wtf.getCmp('finalStmnt').setActiveTab(panel);
        Wtf.getCmp('finalStmnt').doLayout();
        Wtf.getCmp('as').doLayout();
    //    panel.on("activate",function(panel){
    //        panel.westPanel.setWidth(panel.getInnerWidth()/2);
    //        panel.doLayout();
    //    });
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.P&L.tabTitle"));
}

function Trading(consolidateFlag){
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    var id = 'trading';
    id = consolidateFlag?id+'Merged':id;
    var panel = Wtf.getCmp(id);
    callFinalStatement(2);
    if(panel==null){
        panel = new Wtf.account.FinalStatement({
            id : id,
            statementType:'Trading',
            consolidateFlag:consolidateFlag,
            border : false,
            layout: 'fit',
            title:WtfGlobal.getLocaleText("acc.field.Trading"),
            topTitle:'<center><font size=4>'+WtfGlobal.getLocaleText("acc.field.TradingAccount")+'</font></center>',
            closable: true,
            iconCls:'financialreport'
        });
        Wtf.getCmp('finalStmnt').add(panel);
        panel.on('account',viewGroupDetailReport);
    }
    Wtf.getCmp('finalStmnt').setActiveTab(panel);
    Wtf.getCmp('finalStmnt').doLayout();
    Wtf.getCmp('as').doLayout();
    panel.on("activate",function(panel){
        panel.doLayout();
    });
}
function TrialBalance(consolidateFlag, params){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewtrialbalance)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var id = 'TrialBalance';
        id = consolidateFlag?id+'Merged':id;
        var panel = Wtf.getCmp(id);
        callFinalStatement(0);
        if (params == undefined){
            params = {};
        }
        var searchStr = (params.searchStr!=undefined ? params.searchStr : "");
        var filterAppend = (params.filterAppend!=undefined ?params.filterAppend: "");
        if(panel==null){
            panel = new Wtf.account.TrialBalance({
                id : id,
                consolidateFlag:consolidateFlag,
                border : false,
                layout: 'fit',
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.trial.tabtitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.trialBalance.tabTip"),  //'Trial Balance',
                topTitle:'<center><font size=4>'+WtfGlobal.getLocaleText("acc.trial.tabtitle")+'</font></center>',
                closable: false,
                iconCls:'accountingbase trialbalance',
                searchJson:searchStr,
                filterAppend:filterAppend
            });
            panel.on("activate", function(){
                showAdvanceSearch(panel, searchStr, filterAppend);
            });
            Wtf.getCmp('finalStmnt').add(panel);
            panel.on('account',viewGroupDetailReport);//Open 'Group Detail Report' (ERP-33398)
        }
        Wtf.getCmp('finalStmnt').setActiveTab(panel);
        Wtf.getCmp('finalStmnt').doLayout();
        Wtf.getCmp('as').doLayout();
        panel.on("activate",function(panel){
            panel.doLayout();
        });
    } else {
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.trial.tabtitle"));
    }
}
    
function callLedger(accid,startDate,endDate,consolidateFlag,searchStr, filterAppend, periodView){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewledger)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var id = 'ledger';
        id = consolidateFlag?id+'Merged':id;
        //        if(!accid)accid=Wtf.account.companyAccountPref.cashaccount
        if(!accid)accid="None";
        var panel = Wtf.getCmp(id);
        callFinalStatement(1);
        if(panel==null){
            panel = new Wtf.account.Ledger({
                id : id,
                consolidateFlag:consolidateFlag,
                border : false,
                layout: 'fit',
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.ledger.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.ledger.tabTip"),  //'Ledger',
                searchJson: searchStr,
                filterConjuctionCrit:filterAppend,
                moduleid:100, //Added module id for Ledger search report
                iconCls: 'accountingbase ledger',
                accountID:accid,
                stDate:startDate,
                enDate:endDate,
                periodView: periodView,
                closable: false
            });
            Wtf.getCmp('finalStmnt').add(panel);
            panel.on('journalentry',callJournalEntryDetails);
        }else{ //    ERP-15963
            Wtf.getCmp('finalStmnt').remove(panel);
            panel = new Wtf.account.Ledger({
                id : id,
                consolidateFlag:consolidateFlag,
                border : false,
                layout: 'fit',
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.ledger.tabTitle"), Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.ledger.tabTip"), //'Ledger',
                searchJson: searchStr,
                filterConjuctionCrit:filterAppend,
                moduleid:100, //Added module id for Ledger search report
                iconCls: 'accountingbase ledger',
                accountID:accid,
                stDate:startDate,
                enDate:endDate,
                periodView: periodView,
                closable: false
            });
            Wtf.getCmp('finalStmnt').add(panel);
            panel.on('journalentry', callJournalEntryDetails);
            panel.showLedger(accid,startDate,endDate);
        }
        Wtf.getCmp('finalStmnt').setActiveTab(panel);
        Wtf.getCmp('finalStmnt').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
        Wtf.getCmp('as').doLayout();
        panel.on("activate",function(panel){
            panel.doLayout();
        });
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.ledger.tabTitle"));
}

function callInterCompanyLedger(accid,startDate,endDate,consolidateFlag,searchStr, filterAppend ){
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    var id = 'interCompanyLedger';
    id = consolidateFlag?id+'Merged':id;

    //        if(!accid)accid=Wtf.account.companyAccountPref.cashaccount
    var panel = Wtf.getCmp(id);
    callFinalStatement(1);
    if(panel==null){
        panel = new Wtf.account.Ledger({
            id : id,
            consolidateFlag:consolidateFlag,
            intercompanyFlag:true,
            border : false,
            layout: 'fit',
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.ledger.tabTitle"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.ledger.tabTip"),  //'Ledger',
            searchJson: searchStr,
            filterConjuctionCrit:filterAppend,
            moduleid:100, //Added module id for Ledger search report
            iconCls: 'accountingbase ledger',
            accountID:accid,
            stDate:startDate,
            enDate:endDate,
            closable: false
        });
        Wtf.getCmp('finalStmnt').add(panel);
        panel.on('journalentry',callJournalEntryDetails);
    }else{
        panel.showLedger(accid,startDate,endDate);
    }
    Wtf.getCmp('finalStmnt').setActiveTab(panel);
    Wtf.getCmp('finalStmnt').doLayout();
    showAdvanceSearch(panel,searchStr, filterAppend);
    Wtf.getCmp('as').doLayout();
    panel.on("activate",function(panel){
        panel.doLayout();
    });
}
function callJournalEntry(isEdit, jeDetails, jid){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.createje)) {
        var idComp = isEdit ?  "JournalEntryWin" + jid : "JournalEntryWin";
        var panel =  Wtf.getCmp(idComp)
        if(panel==null){
            new Wtf.account.journalEntryTypeWindow({
                title: WtfGlobal.getLocaleText("acc.je.Type"),  //"Receipt Type",
                id: idComp,
                closable: false,
                modal: true,
                //                    moduleid:Wtf.Acc_Credit_Note_ModuleId,
                iconCls :getButtonIconCls(Wtf.etype.deskera),
                width: 380,
                autoScroll:true,
                height: 270,
                resizable: false,
                layout: 'border',
                buttonAlign: 'right',
                renderTo: document.body
            }).show();
        }
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.je.tabTitle"));
}

function callSalesOrPurchaseType(isCustomer,isJobWorkoutInvoice){
    var isinven = Wtf.account.companyAccountPref.withoutinventory;
    var idComp ="SalesOrPurchase";
    var panel =  Wtf.getCmp(idComp)
    if(panel==null){
        new Wtf.account.salesOrPurchaseTypeWindow({
            title:isCustomer?WtfGlobal.getLocaleText("acc.field.SalesType"):WtfGlobal.getLocaleText("acc.field.PurchaseType"),
            id: idComp,
            closable: false,
            modal: true,
            //                    moduleid:Wtf.Acc_Credit_Note_ModuleId,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 380,
            autoScroll:true,
            isJobWorkoutInvoice:isJobWorkoutInvoice!=undefined?isJobWorkoutInvoice:false,
            isCustomer:isCustomer,
            isWithoutInventory:isinven,
            height:(Wtf.account.companyAccountPref.countryid==Wtf.Country.INDIA && Wtf.isExciseApplicable )? 250 : 230,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}

function callJournalEntryTab(isEdit, jeDetails, jid, type,templateId,copyInv,vatPaymentFlag,isAllowedSpecificFields,isITCJE,itcjeconfig){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.createje)&&!isEdit&&!copyInv)||(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.editje)&&isEdit)||(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.copyje)&&copyInv)) {
        var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
        var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;

        var idComp = isEdit ?  "EDITJournalEntry"+type + jid : (copyInv ?"COPYJournalEntry"+type + jid : "JournalEntry"+type);
        var panel =  Wtf.getCmp(idComp)
        if(isCopyFromTemplate){
            Wtf.getCmp('as').remove(panel);
            panel=null;
        }
        if(panel==null){
            panel = new Wtf.account.JournalEntryPanel({
                id : idComp,
                border : false,
                type:type,
                layout: 'border',
                autoScroll:true,
                templateId:templateId,
                isCopyFromTemplate:isCopyFromTemplate,
                isViewTemplate:isViewTemplate,
                title:Wtf.util.Format.ellipsis(isEdit?WtfGlobal.getLocaleText("acc.field.EditJournalEntry"):copyInv? WtfGlobal.getLocaleText("acc.field.CopyJournalEntry"):WtfGlobal.getLocaleText("acc.je.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:isEdit?WtfGlobal.getLocaleText("acc.field.EditJournalEntry"):copyInv? WtfGlobal.getLocaleText("acc.field.CopyJournalEntry"):WtfGlobal.getLocaleText("acc.je.tabTitle"),  //"Journal Entry",
                closable: true,
                iconCls:'accountingbase journalentry',
                isEdit : isEdit,
                copyInv:copyInv,
                jeDetails : jeDetails,
                modeName:'autojournalentry',
                vatPaymentFlag:vatPaymentFlag,
                isAllowedSpecificFields:isAllowedSpecificFields,
                isITCJE:isITCJE,
                itcjeconfig:itcjeconfig
            });
            Wtf.getCmp('as').add(panel)
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();

        return panel;
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.je.tabTitle"));
}

function callViewJournalEntryTab(isEdit, jeDetails, jid, type,templateId){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.viewje)) {
        var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
        var idComp = isEdit ?  "ViewJournalEntry"+type + jid : "JournalEntry"+type;
        var panel =  Wtf.getCmp(idComp)
        if(isCopyFromTemplate){
            Wtf.getCmp('as').remove(panel);
            panel=null;
        }
        if(panel==null){
            panel = new Wtf.account.JournalEntryPanel({
                id : idComp,
                border : false,
                type:type,
                layout: 'border',
                autoScroll:true,
                templateId:templateId,
                isCopyFromTemplate:isCopyFromTemplate,
                isViewTemplate:true,
                title:'View'+' '+Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.je.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:'View'+' '+WtfGlobal.getLocaleText("acc.je.tabTitle"),  //"view Journal Entry",
                closable: true,
                iconCls:'accountingbase journalentry',
                isEdit : isEdit,
                jeDetails : jeDetails,
                readOnly: true,
                modeName:'autojournalentry'
            });
            Wtf.getCmp('as').add(panel)
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();

        return panel;
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.je.tabTitle"));
}

function callJournalEntryTabTemplate(isEdit, jeDetails, jid, type,isViewTemplate,templateName,templateId,isEditTemplate){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.createje)) {
        var idComp = isEdit ?  "JournalEntryTemplate" + jid : "JournalEntryTemplate"+type;
        /**
        *isEditTemplate flag for edit template case
        */
        var isEditTemplate = isEditTemplate?isEditTemplate:false;
        var panel =  Wtf.getCmp(idComp)
        if(panel==null){
            panel = new Wtf.account.JournalEntryPanel({
                id : idComp,
                border : false,
                type:type,
                layout: 'border',
                templateName:templateName,
                isTemplate:true,
                isViewTemplate:isViewTemplate,
                isEditTemplate:isEditTemplate,
                templateId:templateId,
                autoScroll:true,
                title:isViewTemplate? Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.viewJournalEntryTemplate"),Wtf.TAB_TITLE_LENGTH) : isEditTemplate? WtfGlobal.getLocaleText("acc.lp.reEdit")+" " +WtfGlobal.getLocaleText("acc.field.JournalEntryTemplate"): Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.JournalEntryTemplate"),Wtf.TAB_TITLE_LENGTH),
                tabTip:isViewTemplate? WtfGlobal.getLocaleText("acc.field.viewJournalEntryTemplate") :isEditTemplate? WtfGlobal.getLocaleText("acc.lp.reEdit")+" " +WtfGlobal.getLocaleText("acc.field.JournalEntryTemplate"): WtfGlobal.getLocaleText("acc.field.JournalEntryTemplate"),
                closable: true,
                iconCls:'accountingbase journalentry',
                isEdit : isEdit,
                jeDetails : jeDetails,
                modeName:'autojournalentry'
            });
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();

        return panel;
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.je.tabTitle"));
}

function inventorySetup(winid){
    new Wtf.account.inventorysetup({
        layout : "fit",
        title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.inventorysetup.tabTitle"),Wtf.TAB_TITLE_LENGTH),
        tabTip:WtfGlobal.getLocaleText("acc.inventorysetup.tabTitleTT"),  //'You can Add Master Items for various Master Groups from here.',
        helpmodeid:31,
        height:500,
        width:900,
        modal: true,
        transType:Wtf.warehouse,//"location",
        showMaster:true,
        border : false,
        resizable : false,
        id : "inventorysetup",
        iconCls:'accountingbase masterconfiguration',
        closable: true
    }).show() ;
}
function PaymentMethod(winid){
    winid = (winid==null?"PaymentMethodReportWin":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        var accRec=new Wtf.data.Record.create([
        {
            name: 'accountid',
            mapping:'accid'
        },

        {
            name: 'accountname',
            mapping:'accname'
        },

        {
            name: 'accounttype',
            mapping:'masterTypeValue'
        },
        {
            name: 'hasAccess'
        }
        ]);
        var accStore=new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },accRec),
            //            url: Wtf.req.account+'CompanyManager.jsp',
            url : "ACCAccountCMN/getAccountsForCombo.do",
            baseParams:{
                mode:2,
                //                group:[2,9,18],
                ignoreGLAccounts:true,    //for showing only Cash and Bank in payment method
                ignoreGSTAccounts:true,
                ignorecustomers:true,
                ignorevendors:true,
                nondeleted:true
            }
        });
        
        var cmbAccount= new Wtf.form.ExtFnComboBox({
            fieldLabel:WtfGlobal.getLocaleText("acc.je.acc"),
            name:'accountid',
            hiddenName:'accountid',
            store:accStore,
            valueField:'accountid',
            displayField:'accountname',
            mode: 'local',
            disableKeyFilter:true,
            allowBlank:false,
            triggerAction:'all',
            forceSelection:true,
            typeAhead: true,
            hirarchical:true,
            isAccountCombo:true,
            extraFields:[]
        //            addNewFn:function(){
        //                callCOAWindow(false, null, "coaWin",false,false,false,false,true);
        //                Wtf.getCmp("coaWin").on("update",function(){accStore.reload()},this);
        //            }
        });
        
        cmbAccount.on('beforeselect',function(combo,record,index){
                    return validateSelection(combo,record,index);
        },this);
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.createcoa)){
            cmbAccount.addNewFn=function(){
                callCOAWindow(false, null, "coaWin",false,false,false,false,false,undefined,undefined,undefined,undefined,undefined,true);
                Wtf.getCmp("coaWin").on("update",function(){
                    accStore.reload();
                },this);
            }
        }
        var dTypeStore=new Wtf.data.SimpleStore({
            fields:[{
                name:"id"
            },{
                name:"name"
            }],
            data:[[0,"Cash"],[2,"Bank"],[1,"Card"]]
        });
        var autoPopulateTypeStore=new Wtf.data.SimpleStore({
            fields:[{
                name:"id"
            },{
                name:"name"
            }],
            data:[[false,"No"],[true,"Yes"]]
        });
        var cmbDType= new Wtf.form.ComboBox({
            name:'detailtype',
            hiddenName:'detailtype',
            store:dTypeStore,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            disableKeyFilter:true,
            allowBlank:false,
            triggerAction:'all',
            forceSelection:true,
            typeAhead: true,
            disabled:true
        });
        var cmbAutoPopulateType= new Wtf.form.ComboBox({
            name:'autopopulate',
            hiddenName:'autopopulate',
            store:autoPopulateTypeStore,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            disableKeyFilter:true,
            allowBlank:false,
            triggerAction:'all',
            forceSelection:true,
            typeAhead: true
        });
        var autoPopulateInCPCS= new Wtf.form.ComboBox({
            name:'autopopulateincpcs',
            hiddenName:'autopopulateincpcs',
            store:autoPopulateTypeStore,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            disableKeyFilter:true,
            allowBlank:false,
            triggerAction:'all',
            forceSelection:true,
            typeAhead: true
        });
        var autopopulateinloan= new Wtf.form.ComboBox({
            name:'autopopulateinloan',
            hiddenName:'autopopulateinloan',
            store:autoPopulateTypeStore,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            disableKeyFilter:true,
            allowBlank:false,
            triggerAction:'all',
            forceSelection:true,
            typeAhead: true
        });
        var autoPopulateInIBGGeneration= new Wtf.form.ComboBox({
            name:'autoPopulateInIBGGeneration',
            hiddenName:'autoPopulateInIBGGeneration',
            store:autoPopulateTypeStore,
            valueField:'id',
            displayField:'name',
            mode: 'local',
            disableKeyFilter:true,
            allowBlank:false,
            triggerAction:'all',
            forceSelection:true,
            typeAhead: true
        });

        var cm=[{
            header: WtfGlobal.getLocaleText("acc.masterConfig.payMethod.gridBankName"),  //"Method Name",
            dataIndex: 'methodname',
            width:150,
            editor:new Wtf.form.TextField({
                allowBlank:false,
                maxLength:50,
                regex:/^[^\'\"\\]+$/
            })
        },{
            header: WtfGlobal.getLocaleText("acc.masterConfig.taxes.gridAccountName"),  //"Account Name",
            dataIndex: 'accountid',
            width:150,
            renderer:Wtf.comboBoxRenderer(cmbAccount),
            editor:cmbAccount
        },{
            header: WtfGlobal.getLocaleText("acc.masterConfig.payMethod.gridDetailType"),  //"Detail Type",
            dataIndex: 'detailtype',
            renderer:Wtf.newcomboBoxRenderer(cmbDType)
        },{
            header: WtfGlobal.getLocaleText("acc.paymentmethod.showincpcs"),
            dataIndex: 'autopopulateincpcs',
            renderer:Wtf.comboBoxRendererwithClearFilter(autoPopulateInCPCS),
//            renderer:Wtf.comboBoxRenderer(autoPopulateInCPCS),
            editor:autoPopulateInCPCS
        },{
            header: WtfGlobal.getLocaleText("acc.paymentmethod.showinloan"),
            dataIndex: 'autopopulateinloan',
            renderer:Wtf.comboBoxRendererwithClearFilter(autopopulateinloan),
//            renderer:Wtf.comboBoxRenderer(autoPopulateInCPCS),
            editor:autopopulateinloan
        }];
        if (Wtf.account.companyAccountPref.activateIBGCollection){
            cm.push({
                header: WtfGlobal.getLocaleText("acc.paymentmethod.showInIBGGeneration"),
                dataIndex: 'autoPopulateInIBGGeneration',
//                renderer:Wtf.comboBoxRenderer(autoPopulateInIBGGeneration),
                renderer:Wtf.comboBoxRendererwithClearFilter(autoPopulateInIBGGeneration),
                editor:autoPopulateInIBGGeneration,
                width:150
            });
        }
        if (!WtfGlobal.EnableDisable(Wtf.UPerm.paymentmethod, Wtf.Perm.paymentmethod.edit)){
            cm.push({
                header: WtfGlobal.getLocaleText("acc.invoice.lineItemSequence"), //"Sequence",
                width:65,
                align:'center',
                dataIndex:'srno',
                renderer: Wtf.applySequenceRenderer
            });
        }
        this.payRec = new Wtf.data.Record.create([
        {
            name: 'methodid'
        },

        {
            name: 'methodname'
        },

        {
            name: 'accountid'
        },

        {
            name: 'detailtype',
            type:'int'
        },

        {
            name: 'isChangableAccount'
        },

        {
            name: 'autopopulate'
        },

        {
            name: 'autopopulateincpcs'
        },
        {
            name: 'autopopulateinloan'
        },
        {
            name: 'isdefault'
        },
        {
            name:'autoPopulateInIBGGeneration'
        },
        {
            name: 'srno', 
            isForSequence:true
        },{
            name:'isMappedToCustomer'
        }
        ]);
        this.payStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data",
                totalProperty:"count"  //ERP-13660 [SJ]
            },this.payRec),
            //            url:Wtf.req.account+'CompanyManager.jsp',
            url : "ACCPaymentMethods/getPaymentMethods.do",
            sortInfo:{
                field:'srno',
                direction:'ASC'
            },
            baseParams:{
                mode:51
            }
        });
        accStore.on('load',function(){
            this.payStore.load();
        },this);
        accStore.load();
        new Wtf.account.GridUpdateWindow({
            cm:cm,
            store:this.payStore,
            record:this.payRec,
            mode:52,
            //            title:Wtf.util.Format.ellipsis('Payment Method Report',Wtf.TAB_TITLE_LENGTH),
            title:WtfGlobal.getLocaleText("acc.masterConfig.payMethod"),  //'Payment Method',
            tabTip:WtfGlobal.getLocaleText("acc.masterConfig.payMethod"),  //'Payment Method',
            headerImage:"../../images/accounting_image/Payment-Method.gif",
            id: winid,
            renderTo: document.body,
            accStore:accStore
        }).show();

    }
}

function addDeleteNoteType(winid){
    winid=(winid==null?"Note Type":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        var cm= [{
            header: WtfGlobal.getLocaleText("acc.userAdmin.name"),  //"Name",
            dataIndex: 'name',
            editor: new Wtf.form.TextField({
                allowBlank: false,
                maxLength:50,
                maskRe: /[a-z0-9A-Z ]/
            })
        }];
        this.noteTypeRec = new Wtf.data.Record.create([
        {
            name: 'id'
        },

        {
            name: 'name'
        },
        ]);

        this.noteTypeStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },this.noteTypeRec),
            //            url: Wtf.req.account + 'CompanyManager.jsp',
            url: "ACCCreditNote/getNoteType.do",
            baseParams:{
                mode:31,
                combineData:-1  //Send For Seprate Request
            }
        });
        this.noteTypeStore.load();
        new Wtf.account.GridUpdateWindow({
            cm:cm,
            headerImage:"../../images/accounting_image/Unit-of-measure.gif",
            store:this.noteTypeStore,
            record:this.noteTypeRec,
            mode:99,
            title:WtfGlobal.getLocaleText("acc.masterConfig.notetype"),
            id:winid,
            renderTo: document.body
        }).show();
    }
}

function AccountMonthlyBudget(winid,accountid,isMonthlyBudget){
    winid = (winid==null?"AccountMonthlyBudgetWin":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        var accRec=new Wtf.data.Record.create([
        {
            name: 'accountid',
            mapping:'accid'
        },

        {
            name: 'accountname',
            mapping:'accname'
        }
        ]);
        var accStore=new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },accRec),
            //            url: Wtf.req.account+'CompanyManager.jsp',
            url : "ACCAccountCMN/getAccountsForCombo.do",
            baseParams:{
                mode:2,
                //                group:[2,9,18],
                ignoreCashAccounts:true,
                ignoreGSTAccounts:true,
                ignorecustomers:true,
                ignorevendors:true,
                nondeleted:true
            }
        });
        accStore.load();

        var cmbAccount= new Wtf.form.FnComboBox({
            fieldLabel:WtfGlobal.getLocaleText("acc.bankBook.gridAccount"),
            name:'accountid',
            hiddenName:'accountid',
            store:accStore,
            valueField:'accountid',
            displayField:'accountname',
            mode: 'local',
            disableKeyFilter:true,
            allowBlank:false,
            triggerAction:'all',
            forceSelection:true,
            typeAhead: true,
            hirarchical:true
        //            addNewFn:function(){
        //                callCOAWindow(false, null, "coaWin",false,false,false,false,true);
        //                Wtf.getCmp("coaWin").on("update",function(){accStore.reload()},this);
        //            }
        });
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.coa, Wtf.Perm.coa.createcoa)){
            cmbAccount.addNewFn=function(){
                callCOAWindow(false, null, "coaWin",false,false,false,false,true);
                Wtf.getCmp("coaWin").on("update",function(){
                    accStore.reload();
                },this);
            }
        }

        var cm=[{
            header: "",
            dataIndex: 'id',
            hidden:true
        },{
            header: WtfGlobal.getLocaleText("acc.masterConfig.taxes.gridAccountName"),  //"Account Name",
            dataIndex: 'accountname'
        },{
            header: WtfGlobal.getLocaleText("acc.budgeting.dimension"),//Dimension name
                dataIndex: 'dimensionname',
                disabled:true,
                width:200
        },{
            header: WtfGlobal.getLocaleText("acc.budgeting.dimensionValues"),//Dimension value
            dataIndex: 'dimensionvaluename',
            width:200,
            disabled:true
        },{
        
            header: WtfGlobal.getLocaleText("acc.accPref.year"),//Year
            dataIndex: 'year',
            width:150,
            disabled:true
        },{
            header :WtfGlobal.getLocaleText("acc.field.January"),
            dataIndex: 'jan',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        },{
            header :WtfGlobal.getLocaleText("acc.field.February"),
            dataIndex: 'feb',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        },{
            header :WtfGlobal.getLocaleText("acc.field.March"),
            dataIndex: 'march',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        },{
            header :WtfGlobal.getLocaleText("acc.field.April"),
            dataIndex: 'april',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        },{
            header :WtfGlobal.getLocaleText("acc.field.May"),
            dataIndex: 'may',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        },{
            header :WtfGlobal.getLocaleText("acc.field.June"),
            dataIndex: 'june',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        },{
            header :WtfGlobal.getLocaleText("acc.field.July"),
            dataIndex: 'july',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        },{
            header :WtfGlobal.getLocaleText("acc.field.August"),
            dataIndex: 'aug',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        },{
            header :WtfGlobal.getLocaleText("acc.field.September"),
            dataIndex: 'sept',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        },{
            header :WtfGlobal.getLocaleText("acc.field.October"),
            dataIndex: 'oct',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        },{
            header :WtfGlobal.getLocaleText("acc.field.November"),
            dataIndex: 'nov',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        },{
            header :WtfGlobal.getLocaleText("acc.field.December"),
            dataIndex: 'dec',
            editor:new Wtf.form.NumberField({
                allowNegative:false,
                minvalue : 1,
                decimalPrecision:2
            }),
            align:'right'
        }];
        this.payRec = new Wtf.data.Record.create([
        {
            name: 'id'
        },

        {
            name: 'accountid'
        },

        {
            name: 'accountname'
        },
        {
            name: 'dimensionid'
        },
        {
            name: 'dimensionname'
        },
        {
            name: 'dimensionvalueid'
        },
        {
            name: 'dimensionvaluename'
        },
        {
            name: 'year'
        },
        {
            name: 'jan'
        },

        {
            name: 'feb'
        },

        {
            name: 'march'
        },

        {
            name: 'april'
        },

        {
            name: 'may'
        },

        {
            name: 'june'
        },

        {
            name: 'july'
        },

        {
            name: 'aug'
        },

        {
            name: 'sept'
        },

        {
            name: 'oct'
        },

        {
            name: 'nov'
        },

        {
            name: 'dec'
        }
        ]);
        this.payStore = new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },this.payRec),
            //            url:Wtf.req.account+'CompanyManager.jsp',
            url : (isMonthlyBudget)?"ACCAccount/getMonthlyBudget.do":"ACCAccount/getMonthlyForecast.do",
            baseParams:{
                accountidstr:accountid
            }
        });
        this.payStore.on('load',function(){
            alert(this.store.getCount())
            },this);
        this.payStore.load();
        //initially when clicked on set monthly budget button from COA Report
        new Wtf.account.accMonthlyBudgetWindow({
            cm:cm,
            store:this.payStore,
            record:this.payRec,
            isMonthlyBudget:isMonthlyBudget,
            dimensionFlag:false,
            moduleid:Wtf.financialStatementsModuleIds.tradingProfitAndLoss,
            //            title:Wtf.util.Format.ellipsis('Payment Method Report',Wtf.TAB_TITLE_LENGTH),
            title:(isMonthlyBudget)?WtfGlobal.getLocaleText("acc.monthlyBudget"):WtfGlobal.getLocaleText("acc.monthlyForecast"),
            tabTip:(isMonthlyBudget)?WtfGlobal.getLocaleText("acc.monthlyBudget"):WtfGlobal.getLocaleText("acc.monthlyForecast"),
            headerImage:"../../images/accounting_image/Payment-Method.gif",
            id: winid,
            renderTo: document.body
        }).show();

    }
}

//function PurchaseOrder(){
//  var panel = Wtf.getCmp("PurchaseOrder");
//    if(panel==null){
//        panel = new Wtf.account.PurchaseOrder({
//            id : 'PurchaseOrder',
//            border : false,
//            layout: 'fit',
//            title:'Purchase Order',
//            closable: true,
//            iconCls:'report'
//        });
//        Wtf.getCmp('as').add(panel);
//    }
//    panel.on("activate", function(){
//            panel.doLayout();
//        }, this);
//    Wtf.getCmp('as').setActiveTab(panel);
//    Wtf.getCmp('as').doLayout();
//}


function BadDebtInvoices(id,isFromGSTForm3){
    if(isFromGSTForm3){
        Wtf.MessageBox.hide();
    }
    id=(id)?id:"BadDebtInvoicesReportTabId";
    var panel = Wtf.getCmp(id);
    if(panel==null){
        var claimableInvoicePanel = getClaimableInvoicesPanel("Claim", true);
        /*
         *ERP-20320
         */
//        var recoverableInvoicePanel = getRecoverableInvoicesPanel("Recover",true);

        var itemsArray = [];
        itemsArray.push(claimableInvoicePanel);
        /*
         *ERP-20320
         */
//        itemsArray.push(recoverableInvoicePanel);

        panel = new Wtf.TabPanel({
            activeTab: 0,
            border: false,
            closable: true,
            id: id,
            title:Wtf.util.Format.ellipsis('Sales Bad Debt Relief Adjustment',Wtf.TAB_TITLE_LENGTH),
            tabTip:'Sales Bad Debt Relief Adjustment',
            items: itemsArray
        });
        Wtf.getCmp('as').add(panel);
    }

    Wtf.getCmp('as').setActiveTab(panel);
    //    panel.setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
//    showAdvanceSearch(panel,searchStr, filterAppend);
}

function badDebtReport(isClaim, isCustomer){
    var id="";
    var title = "";
    var tabTip = "";

    if(isCustomer){
        id=(id)?id:((isClaim)?"ClaimBadDebtInvoicesReportTabId":"RecoveredBadDebtInvoicesReportTabId");
        title = (isClaim)?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.invoice.sales.claimed.invoices"), Wtf.TAB_TITLE_LENGTH):Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.invoice.sales.recovered.invoices"), Wtf.TAB_TITLE_LENGTH);
        tabTip = (isClaim)?WtfGlobal.getLocaleText("acc.invoice.sales.claimed.invoicestt"):WtfGlobal.getLocaleText("acc.invoice.sales.recovered.invoicestt");
    }else{
        id=(id)?id:((isClaim)?"purchaseClaimBadDebtInvoicesReportTabId":"purchaseRecoveredBadDebtInvoicesReportTabId");
        title = (isClaim)?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.invoice.purchase.claimed.invoices"), Wtf.TAB_TITLE_LENGTH):Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.invoice.purchase.recovered.invoices"), Wtf.TAB_TITLE_LENGTH);
        tabTip = (isClaim)?WtfGlobal.getLocaleText("acc.invoice.purchase.claimed.invoicestt"):WtfGlobal.getLocaleText("acc.invoice.purchase.recovered.invoicestt");
    }

    var panel = Wtf.getCmp(id);
    if(panel==null){
        panel = new Wtf.account.BadDebtReport({
            id:id,
            border : false,
            closable:true,
            isClaim:isClaim,
            isCustomer:isCustomer,
            title: title,
            tabTip: tabTip,
            layout: 'fit',
            helpmodeid: 16,
            label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),  //"Invoice",
            iconCls:'accountingbase invoicelist'
        });
        Wtf.getCmp('as').add(panel);
        panel.on('journalentry',callJournalEntryDetails);   //
        //panel.expandInvoice(id,check);

    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();

}

function BadDebtPurchaseInvoices(id,isFromGSTForm3){
    if(isFromGSTForm3){
        Wtf.MessageBox.hide();
    }    
    id=(id)?id:"BadDebtPurchaseInvoicesReportTabId";
    var panel = Wtf.getCmp(id);
    if(panel==null){
        var claimableInvoicePanel = getClaimableInvoicesPanel("Claim", false);
        /*
         *ERP-20320
         */
//        var recoverableInvoicePanel = getRecoverableInvoicesPanel("Recover", false);

        var itemsArray = [];
        itemsArray.push(claimableInvoicePanel);
        /*
         *ERP-20320
         */
//        itemsArray.push(recoverableInvoicePanel);

        panel = new Wtf.TabPanel({
            activeTab: 0,
            border: false,
            closable: true,
            id: id,
            title:Wtf.util.Format.ellipsis('Purchase Bad Debt Relief Adjustment',Wtf.TAB_TITLE_LENGTH),
            tabTip:'Purchase Bad Debt Relief Adjustment',
            items: itemsArray
        });
        Wtf.getCmp('as').add(panel);
    }

    Wtf.getCmp('as').setActiveTab(panel);
    //    panel.setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
//    showAdvanceSearch(panel,searchStr, filterAppend);
}

function callInvoiceList(id,check,isCash,consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,isFixedAsset,isLeaseFixedAsset){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewinvoice)&&!isFixedAsset&&!isLeaseFixedAsset)||(!WtfGlobal.EnableDisable(Wtf.UPerm.assetsales, Wtf.Perm.assetsales.viewdispinv)&&isFixedAsset&&!isLeaseFixedAsset)||isLeaseFixedAsset) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var invoiceMainPanelID = "InvoiceListMainTab";
        var repeatInvoicePanelID = "RepeateInvoiceList";

            reportbtnshwFlag:reportbtnshwFlag;
        var panelID = "InvoiceList";
        var moduleId = isLeaseFixedAsset?Wtf.LEASE_INVOICE_MODULEID:Wtf.Acc_Invoice_ModuleId;
        isFixedAsset = (isFixedAsset != null || isFixedAsset != undefined)?isFixedAsset:false;
        isLeaseFixedAsset = (isLeaseFixedAsset != null || isLeaseFixedAsset != undefined)?isLeaseFixedAsset:false;
        if(isFixedAsset){
            panelID = "FixedAssetInvoiceList";
            invoiceMainPanelID="FixedAssetInvoiceListMainTab";
            repeatInvoicePanelID="RepeateFixedAssetInvoiceList";
            moduleId = Wtf.Acc_FixedAssets_DisposalInvoice_ModuleId;
        }
        if(isLeaseFixedAsset){
            panelID = "LeaseFixedAssetInvoiceList";
            invoiceMainPanelID="LeaseFixedAssetInvoiceListMainTab";
            repeatInvoicePanelID="RepeateLeaseFixedAssetInvoiceList";
        }
        invoiceMainPanelID = consolidateFlag?invoiceMainPanelID+'Merged':invoiceMainPanelID;
        repeatInvoicePanelID = consolidateFlag?repeatInvoicePanelID+'Merged':repeatInvoicePanelID;
        invoiceMainPanelID = reportbtnshwFlag?invoiceMainPanelID:invoiceMainPanelID+'Entry';
        repeatInvoicePanelID = reportbtnshwFlag?repeatInvoicePanelID:repeatInvoicePanelID+'Entry';
        var tabTitle = WtfGlobal.getLocaleText("acc.invoiceListissalesinvoicesandcashsales.tabtitle");
        var tabtooltip;
        if(isFixedAsset)
        {
            tabTitle= WtfGlobal.getLocaleText("acc.invoiceListFixedAsset.tabtitle");
            tabtooltip=WtfGlobal.getLocaleText("acc.invoiceListFixedAsset.tabtitle");
        }
        else if(isLeaseFixedAsset)
        {
            tabTitle= WtfGlobal.getLocaleText("acc.invoiceListisLeaseFixedAsset.tabtitle");
            tabtooltip =WtfGlobal.getLocaleText("acc.invoiceListisLeaseFixedAsset.tabtitle");
        }
        else{
            tabTitle =WtfGlobal.getLocaleText("acc.invoiceListissalesinvoicesandcashsales.tabtitle");
            tabtooltip =WtfGlobal.getLocaleText("acc.invoiceListissalesinvoicesandcashsales.tabtitle");
        }

        panelID = consolidateFlag?panelID+'Merged':panelID;
        panelID = reportbtnshwFlag ? panelID : panelID +'Entry';
        var panel = Wtf.getCmp(panelID);
        var invoiceTabPanel = Wtf.getCmp(invoiceMainPanelID);
        if(panel==null){
            panel = getInvoiceTab(false, panelID, tabTitle, undefined, isCash,consolidateFlag,undefined,searchStr, filterAppend,moduleId,reportbtnshwFlag,isFixedAsset,isLeaseFixedAsset);
            panel.moduleId=Wtf.Acc_Invoice_ModuleId;

            var itemsArray = [];
            itemsArray.push(panel);

            if(!(isFixedAsset)){// in case of Asset invoice report recurring invoice panel will be hidden
                itemsArray.push(new Wtf.RepeatedInvoicesReport({
                    id : repeatInvoicePanelID,
                    consolidateFlag:consolidateFlag,
                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.invoiceList.recInvReport"),Wtf.TAB_TITLE_LENGTH),
                    tabTip:WtfGlobal.getLocaleText("acc.invoiceList.recInvReportTT"),  //'Recurring Invoices Report',
                    border: false,
                    closable: false,
                    moduleid:moduleId,
                    isLeaseFixedAsset:isLeaseFixedAsset,
                    layout: 'fit',
                    iconCls:'accountingbase invoicelist',
                    isCustBill:false,
                    isCustomer:true,
                    isOrder:false
                }));
            }


            invoiceTabPanel = new Wtf.TabPanel({
                activeTab: 0,
                border: false,
                closable: true,
                id: invoiceMainPanelID,
                title:Wtf.util.Format.ellipsis(tabTitle,Wtf.TAB_TITLE_LENGTH),
                tabTip:tabtooltip,                                                      //(!isFixedAsset && isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.invoiceList.tabTT"):WtfGlobal.getLocaleText("acc.invoiceList.tabTT1"),  //'Invoice and Cash Sales Report',
                items: itemsArray
            });
            (isFixedAsset==true)? Wtf.getCmp('as').add(panel):Wtf.getCmp('as').add(invoiceTabPanel);
            panel.on('journalentry',callJournalEntryDetails);
            panel.expandInvoice(id,check);
        }else{
            panel.expandInvoice(id,check);
        }
        var channelName="";
        if(moduleId == Wtf.Acc_Invoice_ModuleId){
            if(isLeaseFixedAsset)
                channelName =Wtf.ChannelName.LeaseInvoiceList;
            else
                channelName =Wtf.ChannelName.CIAndCSReport;
        } else if(moduleId == Wtf.Acc_FixedAssets_DisposalInvoice_ModuleId){
            channelName =Wtf.ChannelName.FixedAssetDIList;
        }
        if(isFixedAsset==true){
            panel.on('beforeclose', function(){
                beforeClose(channelName);
            },this);
        }else{
            invoiceTabPanel.on('beforeclose', function(){
                beforeClose(channelName);
            },this);
        }
        (isFixedAsset==true)?Wtf.getCmp('as').setActiveTab(panel):Wtf.getCmp('as').setActiveTab(invoiceTabPanel);
        invoiceTabPanel.setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+(isFixedAsset?WtfGlobal.getLocaleText("acc.dimension.module.24"):WtfGlobal.getLocaleText("acc.invoiceList.tabtitle")));
}

function showProjectStatusReportTab(){
    var projectStatusRep = Wtf.getCmp("projectStatusRep");
    if(projectStatusRep==null){
        projectStatusRep = new Wtf.account.projectStatusGrid({
            title:WtfGlobal.getLocaleText("acc.projectStatusReport"), //"Project Status Report",
            tabTip:WtfGlobal.getLocaleText("acc.projectStatusReport"), //"Project Status Report",
            id:"projectStatusRep",
            iconCls :getButtonIconCls(Wtf.etype.inventoryval),
            layout:'fit',
            closable:true,
            border:false
        });
        Wtf.getCmp('as').add(projectStatusRep);
    }
    Wtf.getCmp('as').setActiveTab(projectStatusRep);
    Wtf.getCmp('as').doLayout();
}

function callBillingInvoiceList(id,check,isCash,consolidateFlag,searchStr, filterAppend){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewinvoice)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var invoiceMainPanelID = "InvoiceListMainTab";
        invoiceMainPanelID = consolidateFlag?invoiceMainPanelID+'Merged':invoiceMainPanelID;
        var repeatInvoicePanelID = "RepeateBillingInvoiceList";
        repeatInvoicePanelID = consolidateFlag?repeatInvoicePanelID+'Merged':repeatInvoicePanelID;
        var panelID = "BillingInvoiceList";
        panelID = consolidateFlag?panelID+'Merged':panelID;
        var panel = Wtf.getCmp(panelID);
        var invoiceTabPanel = Wtf.getCmp(invoiceMainPanelID);
        if(panel==null){
            panel = getInvoiceTab(true, "BillingInvoiceList", WtfGlobal.getLocaleText("acc.invoiceList.tabtitle"), undefined, isCash,consolidateFlag,undefined,searchStr, filterAppend,Wtf.Acc_Invoice_ModuleId);
            panel.moduleId=Wtf.Acc_Invoice_ModuleId;
            invoiceTabPanel = new Wtf.TabPanel({
                activeTab: 0,
                border: false,
                closable: true,
                id: invoiceMainPanelID,
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.invoiceList.tabtitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.invoiceList.tabtitle"),  //'Invoice and Cash Sales Report',
                items: [
                panel,
                new Wtf.RepeatedInvoicesReport({
                    id : repeatInvoicePanelID,
                    consolidateFlag:consolidateFlag,
                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.invoiceList.recInvReport"),Wtf.TAB_TITLE_LENGTH),
                    tabTip:WtfGlobal.getLocaleText("acc.invoiceList.recInvReportTT"),  //'Recurring Invoices Report',
                    border: false,
                    doctype:1,
                    closable: false,
                    layout: 'fit',
                    iconCls:'accountingbase invoicelist',
                    isCustBill:true,
                    isCustomer:true
                })
                ]
            });
            Wtf.getCmp('as').add(invoiceTabPanel);
            panel.on('journalentry',callJournalEntryDetails);
            panel.expandInvoice(id,check);
        }else{
            panel.expandInvoice(id,check);
        }
        Wtf.getCmp('as').setActiveTab(invoiceTabPanel);
        invoiceTabPanel.setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.invoiceList.tabtitle"));
}

function callRepeatedInvoicesWindow(isCustBill, invoiceRec,isaddRecurringInvoice,isOrder,iscreateSO,SOID,Termdays,isLeaseFixedAsset, isCustomer, moduleid,isConsignment){
    var winid="RepeatedInvoicesWin";
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.RepeateInvoiceForm({
            id:winid,
            isCustBill: isCustBill,
            invoiceRec: invoiceRec,
            isaddRecurringInvoice:isaddRecurringInvoice,
            iscreateSO: iscreateSO,
            SOID: SOID,
            Termdays:Termdays,
            isCustomer:isCustomer,
            moduleid:moduleid,
            isOrder: isOrder,
            closable: true,
            isLeaseFixedAsset:isLeaseFixedAsset,
            isConsignment:isConsignment,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 600,
            height:(moduleid==Wtf.Acc_Vendor_Invoice_ModuleId || moduleid==Wtf.Acc_Invoice_ModuleId || moduleid==Wtf.Acc_Sales_Order_ModuleId)?(isaddRecurringInvoice?600:570):isaddRecurringInvoice?600:570,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
    Wtf.getCmp(winid).on("update",function(win){
        //        var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bPurchaseOrderList":"PurchaseOrderList";
        if(isOrder){
            Wtf.getCmp("SalesOrderList").grid.getStore().reload();
            Wtf.getCmp("RepeateSalesOrderList").grid.getStore().reload();
        }else{
        //       if(Wtf.account.companyAccountPref.withoutinventory){
        //            Wtf.getCmp("BillingInvoiceList").grid.getStore().reload();
        //            Wtf.getCmp("RepeateBillingInvoiceList").grid.getStore().reload();
        //        } else
        {
            Wtf.getCmp("InvoiceList").grid.getStore().reload();
            Wtf.getCmp("RepeateInvoiceList").grid.getStore().reload();
        }
        }
    });
}


function callRepeatedJEWindow(isCustBill, invoiceRec,isaddRecurringJE, isEdit){
    var winid="RepeatedJEWin";
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.RepeateJEForm({
            id:winid,
            isCustBill: isCustBill,
            invoiceRec: invoiceRec,
            isaddRecurringJE:isaddRecurringJE,
            isEdit:isEdit,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width:600,    //760, for Recurring Pattern
            height:isaddRecurringJE?600:570,     //isaddRecurringJE ? 780:750,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
    Wtf.getCmp(winid).on("update",function(win){

        Wtf.getCmp("JournalEntryDetails").grid.getStore().reload();
        Wtf.getCmp("RepeateJEList").grid.getStore().reload();

    });
}

function callRepeatedPaymentWindow(isCustBill, paymentRec,isaddRecurringPayment, isEdit,isReceipt){
    var winid="RepeatedPaymentWin";
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.RepeatePaymentForm({        //Make Payment Recurring
            id:winid,
            isCustBill: isCustBill,
            paymentRec: paymentRec,
            isaddRecurringPayment:isaddRecurringPayment,
            isEdit:isEdit,
            isReceipt:isReceipt,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width:600,
            height:isaddRecurringPayment?600:570,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
    Wtf.getCmp(winid).on("update",function(win){
        isReceipt?Wtf.getCmp("receiptReport").grid.getStore().reload():Wtf.getCmp("paymentReport").grid.getStore().reload();
        Wtf.getCmp("RepeatedPaymentWin").grid.getStore().reload();
    });
}


function callCustomLayoutGrid() {
    var reportList = Wtf.getCmp("customLayoutGrid");
    if (reportList == null) {
        reportList = new Wtf.customLayoutList({
            id: "customLayoutGrid",
            closable: true,
            iconCls :getButtonIconCls(Wtf.etype.reportList),
            modal: true
        });

        Wtf.getCmp('as').add(reportList);
    }
    Wtf.getCmp('as').setActiveTab(reportList);
    Wtf.getCmp('as').doLayout();

}

function callCustomReportGrid(id, check, isCash) {
    var reportList = Wtf.getCmp("customReportTab");
    if (reportList == null) {
        reportList = new Wtf.ReportsListGrid({
            id: "customReportTab",
            closable: true,
            tabTip:WtfGlobal.getLocaleText("acc.customReport.tabtitle"),
            iconCls :getButtonIconCls(Wtf.etype.reportList),
            modal: true
        });

        Wtf.getCmp('as').add(reportList);
    }
    Wtf.getCmp('as').setActiveTab(reportList);
    Wtf.getCmp('as').doLayout();

}
function openAdvanceSearchTab(moduleId, searchStr, filterAppend,rowData) {
    var isinven = Wtf.account.companyAccountPref.withoutinventory;

    switch (moduleId) {
        case "2":
            //            if (isinven)
            //                callBillingInvoiceList(undefined, undefined, undefined,undefined, searchStr, filterAppend);
            //
            //            else
            callInvoiceList(undefined, undefined, undefined,undefined, searchStr, filterAppend);

            break;
        case "6":
            //            if (isinven)
            //                callBillingGoodsReceiptList(undefined, undefined, undefined,searchStr, filterAppend);
            //
            //            else
            callGoodsReceiptList(undefined, undefined, undefined,searchStr, filterAppend);
            break;
        case ""+Wtf.Acc_Sales_Order_ModuleId:
        callSalesOrderList(undefined, undefined, undefined, undefined, undefined, searchStr, filterAppend);
        break;
        case ""+Wtf.Acc_Purchase_Order_ModuleId:
        callPurchaseOrderList(undefined, undefined, undefined, undefined, undefined, searchStr, filterAppend);
        break;
        case ""+Wtf.Acc_Product_Master_ModuleId:
        callProductDetails(undefined,undefined,undefined,undefined,searchStr,filterAppend);
        break;
        case ""+Wtf.Acc_Customer_Quotation_ModuleId:
        callQuotationList(undefined, undefined, undefined, searchStr, filterAppend);
        break;
        case ""+Wtf.Acc_Vendor_Quotation_ModuleId:
        callVendorQuotationList(undefined, undefined, searchStr, filterAppend);
        break;
        case ""+Wtf.Acc_Delivery_Order_ModuleId:
            var params = {};
            params.searchStr = searchStr;
            params.filterAppend = filterAppend;
            callDeliveryOrderList(params);
        break;
        case ""+Wtf.Acc_Goods_Receipt_ModuleId:
        callGoodsReceiptOrderList(undefined, undefined, undefined, undefined, undefined, searchStr, filterAppend);
        break;
        case ""+Wtf.Acc_Sales_Return_ModuleId:
        callSalesReturnList(undefined, undefined, undefined, undefined, searchStr, filterAppend);
        break;
        case ""+Wtf.Acc_Purchase_Return_ModuleId:
        callPurchaseReturnList(undefined, undefined, undefined, searchStr, filterAppend);
        break;
        case ""+Wtf.Acc_Purchase_Requisition_ModuleId:
        callPurchaseReqList(undefined, undefined, searchStr, filterAppend);
        break;
        case ""+Wtf.Acc_Debit_Note_ModuleId:
            //            if (isinven)
            //                callBillingDebitNoteDetails(undefined,undefined,undefined,undefined,searchStr, filterAppend);
            //
            //            else
            callDebitNoteDetails (undefined, undefined, undefined, undefined,searchStr, filterAppend);
            break;
        case ""+Wtf.Acc_Credit_Note_ModuleId:
            //            if (isinven)
            //                callBillingCreditNoteDetails(undefined,undefined,undefined,undefined,searchStr, filterAppend);
            //
            //            else
            callCreditNoteDetails (undefined, undefined, undefined, undefined,searchStr, filterAppend);
            break;
        case "14":
            if (!isinven)
                if(Wtf.isNewPaymentStructure) {
                    callPaymentReportNew(undefined,searchStr, filterAppend);
                }

            //            else
            //                callBillingPaymentReport(searchStr, filterAppend);
            break;
        case "16":
            if (!isinven)
                if(Wtf.isNewPaymentStructure) {
                    callReceiptReportNew(undefined,searchStr, filterAppend);
                }

            //            else
            //                BillingReceiptReport(searchStr, filterAppend);
            break;
        case "100":
            callLedger(undefined,undefined,undefined,undefined,searchStr, filterAppend);
            break;
        case "101":
            NewTradingProfitLoss(undefined,searchStr, filterAppend);
            break;
        case "" + Wtf.Acc_Customer_ModuleId:
            /**
             * Module Id 25 for customer List
             */
            callCustomerDetails(true, null, null, searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.DefaultBalanceSheetReportId:
            periodViewBalanceSheet(undefined,searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.BalanceSheetPeriodView:
            periodViewBalanceSheet(undefined,searchStr, filterAppend);
            BalanceSheet(undefined,searchStr, filterAppend);
            break;
        case "103"://Aged receivable customoize summary Report
            agedCustomizeReport(searchStr, true, rowData);
            break;
        case "104"://Aged Payable customoize summary Report
            agedCustomizeReport(searchStr, false, rowData);
            break;
         case ""+Wtf.autoNum.agedDetailsBasedOnDimension+""://Aged receivable report based on dimension
           callDimensionsBasedAgeingReport(true,searchStr,filterAppend,rowData);
            break;  
         case ""+Wtf.autoNum.agedDetailsBasedOnDimensionDetailed+""://Aged receivable report based on dimension
           callDimensionsBasedAgeingReport(false,searchStr,filterAppend,rowData);
            break;  
         case ""+Wtf.autoNum.salesByProductCategoryDetail://sales by product category report
           salesByProductCategoryDetailReport(searchStr,filterAppend);
           break;  
//         case ""+Wtf.autoNum.SalesByServiceProductDetailReport: // Sales by Service Product Detail Report
//           callSalesByServiceProductDetailReport(searchStr,filterAppend);
//           break;
         case ""+Wtf.autoNum.agedpayablereportBasedOnDimension+"": // Sales by Service Product Detail Report
           callDimensionsBasedAgedPayableReport(true,searchStr,filterAppend,rowData);
           break;
         case ""+Wtf.autoNum.agedpayabledetailedreportBasedOnDimension+"": // Sales by Service Product Detail Report
            callDimensionsBasedAgedPayableReport(false,searchStr,filterAppend,rowData);
            break;
        case "" + Wtf.autoNum.StockLedger + "": // Stock Ledger Report
            getStockLedgerTabView({searchStr:searchStr, filterAppend:filterAppend});
            break;
        case "" + Wtf.autoNum.SalesPurchaseReport + "": // Sale Purchase Report
            getSalesPurchaseTabView(searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.CreditNoteWithAccountDetail + "": //     ERP-19446
            callCreditNoteAccountDetailReport(searchStr, filterAppend);
            break;
        case "" + Wtf.Acc_Vendor_AccountStatement_ModuleId + "": // Stock Ledger Report
            callCustomerVendorLedgerReport(searchStr, filterAppend,false);
            break;
        case "" + Wtf.Acc_Customer_AccountStatement_ModuleId + "": // Stock Ledger Report
            callCustomerVendorLedgerReport(searchStr, filterAppend,true);
            break;
        case "" + Wtf.autoNum.SOA_CustomerAccountStatement + "": // SOA - Customer Account Statement
            callCustomerVendorLedgerReport(searchStr, filterAppend, true, 1227);
            break;
        case "" + Wtf.autoNum.SOA_VendorAccountStatement + "": // SOA - Vendor Account Statement
            callCustomerVendorLedgerReport(searchStr, filterAppend, false, 1228);
            break;
        case "" + Wtf.autoNum.StockReportOnDimension + "": // Stock Ledger Report
        StockReportOnDimension({searchStr: searchStr, filterAppend : filterAppend});
        break;
        
        case "" + Wtf.autoNum.dayEndCollectionReport + "": // Day End Collection
        callDayEndCollectionReport(searchStr, filterAppend);
        break;
        case "" + Wtf.autoNum.AgedReceivableDetailReport + "": // Day End Collection
            var params = {};
            params.searchStr = searchStr;
            params.filterAppend = filterAppend;
            params.withinventory=true;
            params.moduleId=moduleId;
            callAgedRecievable(params);
            break;
        case "" + Wtf.Acc_AgedReceivables_Summary_ModuleId + "": // Day End Collection
            var params = {};
            params.searchStr = searchStr;
            params.filterAppend = filterAppend;
            params.withinventory=true;
            params.moduleId=moduleId;
            callAgedRecievable(params);
            break;
        case "" + Wtf.Acc_AgedPayables_Summary_ModuleId + "": // Day End Collection
            var params = {};
            params.searchStr = searchStr;
            params.filterAppend = filterAppend;
            params.moduleId=moduleId;
            callAgedPayable(params);
            break;
        case "" + Wtf.Acc_AgedPayables_ReportView_ModuleId + "": // Day End Collection
            var params = {};
            params.searchStr = searchStr;
            params.filterAppend = filterAppend;
            params.moduleId=moduleId;
            callAgedPayable(params);
            break;     
        case "" + Wtf.Acc_GENERAL_LEDGER_ModuleId + "": // This Case is for Journa Entry, but Complete Front end and Backend is configured with General Ld
            var params = {};
            params.searchStr = searchStr;
            params.filterAppend = filterAppend;
            params.moduleId=moduleId;
            callJournalEntryDetails(null, null, null, null, null, null, null, null, params);
            break;     
        case "" + Wtf.autoNum.RequestForQuotation :
            var params = {};
            params.searchStr = searchStr;
            params.filterAppend = filterAppend;
            params.moduleId=moduleId;
            callReqForQuotationList(null, null, null, params);
            break;
        case "" + Wtf.Acc_Vendor_ModuleId :
            var params = {};
            params.searchStr = searchStr;
            params.filterAppend = filterAppend;
            params.moduleId=moduleId;
            callVendorDetails(true, null, null, params);
            break; 
        
            
        case "" + Wtf.autoNum.dimensionBasedProfitLoss:
            callDimensionBasedProfitLoss(rowData.isCustomLayout, rowData.templateid, searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.profitAndLossMonthlyCustomLayout:
            callmonthlyCustomLayout(rowData.templateid, rowData.templatetitle, "TradingAndProfitLoss", Wtf.autoNum.profitAndLossMonthlyCustomLayout, searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.balanceSheetMonthlyCustomLayout:
            callmonthlyCustomLayout(rowData.templateid, rowData.templatetitle, "BalanceSheet", Wtf.autoNum.balanceSheetMonthlyCustomLayout, searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.dimensionBasedMonthlyPLCustomLayout:
            callmonthlyCustomLayout(rowData.templateid, rowData.templatetitle, "TradingAndProfitLoss", Wtf.autoNum.dimensionBasedMonthlyPLCustomLayout, searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.dimensionBasedBalanceSheet:
            callDimensionBasedBalanceSheet(rowData.isCustomLayout, rowData.templateid, searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.dimensionBasedTrialBalance:
            callDimensionBasedTrialBalance(searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.vendorRegistryReport:
            callVendorRegistryReport(searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.customerRegistryReport:
            callCustomerRegistryReport(searchStr, filterAppend);
            break;
        case "" + Wtf.labourMaster:
            callLabourDetails(searchStr, filterAppend);
            break;
        case "" + Wtf.MRP_Work_Centre_ModuleID:
            workCentreMaster(undefined, searchStr, filterAppend);
            break;
        case "" + Wtf.MACHINE_MANAGEMENT_MODULE_ID:
            callMachineMasterList(undefined,undefined,searchStr,filterAppend);
            break;
        case "" + Wtf.MRP_Work_Order_ModuleID:
            callMRPWorkOrderReport(undefined, undefined, searchStr, filterAppend);
            break;
        case "" + Wtf.MRP_MASTER_CONTRACT_MODULE_ID:
            callContractMasterDetails(undefined, searchStr, filterAppend);
            break;
        case "" + Wtf.MRP_Route_Code_ModuleID:
            callRoutingMasterList(searchStr, filterAppend);
            break;
        case "" + Wtf.MRP_Job_Work_ModuleID:
            jobOrderReportTab(undefined,searchStr,filterAppend);
            break;
        case "" + Wtf.autoNum.EntityBasedGSTReport:
            GSTReportTab(searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.EntityBasedGSTForm03:
            callMalasianGSTWindow('tapfile',searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.EntityBasedGSTAuditFile:
            callMalasianGSTWindow('auditfile',searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.EntityBasedGSTTabReturnFile:
            callMalasianGSTWindow('tapreturnfile',searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.TradingAndProfitLoss:
            callcustomLayout(rowData.templateid, rowData.templatetitle, 0,searchStr,filterAppend);
            break;
        case "" + Wtf.autoNum.BalanceSheetReportId:
            callcustomLayout(rowData.templateid, rowData.templatetitle, 1,searchStr,filterAppend);
            break;
        case "" + Wtf.autoNum.CashFlowStatement:
            callcustomLayout(rowData.templateid, rowData.templatetitle, 3,searchStr,filterAppend);
            break;
        case "" + Wtf.autoNum.TrialBalance:
            callcustomLayout(rowData.templateid, rowData.templatetitle, 2,searchStr,filterAppend);
            break;
        case "" + Wtf.autoNum.AssetGroupReport:
            callFixedAssetGrid(undefined, false, searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.AssetDepreciationReport:
            callFixedAssetDepreciationDetailsGrid(searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.AssetSummeryReport:
            callFixedAssetSummeryReport(searchStr, filterAppend);
            break;
        case "" + Wtf.autoNum.FixedAssetReport:
            callFixedAssetDetailsGrid(undefined, false, searchStr, filterAppend, true, false);
            break;
        case "" + Wtf.autoNum.DisposedAssetReport:
            callFixedAssetDetailsGrid(undefined, false, searchStr, filterAppend, false, true);
            break;
        case "" + Wtf.autoNum.GroupDetailReport:
            viewGroupDetailReport(searchStr, filterAppend);
            break;
        case "" + Wtf.Account_Statement_ModuleId:
            callCOA(searchStr, filterAppend);
            break;
        case "" + Wtf.TrialBalance_Moduleid:
            var params = {};
            params.searchStr = searchStr;
            params.filterAppend = filterAppend;
            TrialBalance(null, params);
            break;
    }
}

function agedCustomizeReport(searchStr,isReceivable,rowData){
    var AgedStoreSummaryUrl= isReceivable?"ACCInvoiceCMN/getCustomerAgedReceivable.do":"ACCGoodsReceiptCMN/getVendorAgedPayable.do";
    var uPermType=isReceivable?Wtf.UPerm.invoice:Wtf.UPerm.vendorinvoice;
    var permType=this.receivable?Wtf.Perm.invoice:Wtf.Perm.vendorinvoice;
    var exportPermType=isReceivable?permType.exportdataagedreceivable:permType.exportdataagedpayable;
    var printPermType=isReceivable?permType.printagedreceivable:permType.printagedpayable;
    var searchName= rowData.searchname;
    var panelid= rowData.searchid;
    var panel = Wtf.getCmp(panelid);

    if(panel == null){
        var loadingMask = new Wtf.LoadMask(document.body,{
            msg : WtfGlobal.getLocaleText("acc.msgbox.50")
        });
        panel = new Wtf.account.CustomizedSummaryPanel({
            id : panelid,
            border : false,
            title : searchName,
            layout: 'fit',
            iconCls: 'accountingbase agedrecievable',
            tabTip:(isReceivable?WtfGlobal.getLocaleText("acc.summary.customized.customer.tabtip"):WtfGlobal.getLocaleText("acc.summary.customized.vendor.tabtip")),
            url : AgedStoreSummaryUrl,
            receivable : isReceivable,
            moduleid : isReceivable?Wtf.Acc_AgedReceivable_CustomizeSummary :Wtf.Acc_AgedPayable_CustomizeSummary,
            uPermType : uPermType,
            exportPermType : exportPermType,
            printPermType : printPermType,
            withinventory : true,
            searchStr : searchStr,
            isCustomoizeAgedReport :true,
            closable: true,
            loadMask : loadingMask
        });
    }
    Wtf.getCmp('as').add(panel);
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callGoodsReceiptList(id,check,consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,isFixedAsset,isConsignment,isMRPJOBWORKIN,isJobWorkoutInvoice){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.viewvendorinvoice)&&!isFixedAsset)||(!WtfGlobal.EnableDisable(Wtf.UPerm.assetpurchase, Wtf.Perm.assetpurchase.viewacqinv)&&isFixedAsset)||!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.viewpurchaseconinv)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var invoiceMainPanelID = "GRListMainTab";
        var repeatInvoicePanelID = "RepeateGRList";

        var panelID = "GRList";
        var moduleId=Wtf.Acc_Vendor_Invoice_ModuleId;
        var tabtooltip;
        isFixedAsset = (isFixedAsset != null || isFixedAsset != undefined)?isFixedAsset:false;
        if(isFixedAsset){
            panelID = "FixedAssetGRList";
            invoiceMainPanelID="FixedAssetGRListMainTab";
            repeatInvoicePanelID="RepeateFixedAssetGRList";
            moduleId = Wtf.Acc_FixedAssets_PurchaseInvoice_ModuleId;
            tabtooltip=WtfGlobal.getLocaleText("acc.invoiceListFixedAsset.tabtitle");
        }else{
            tabtooltip =WtfGlobal.getLocaleText("acc.purchaseInvoiceCashPurchase.tabtitle");
        }
        if(isConsignment){
            panelID = "consignmentPurchaseInvList";
            invoiceMainPanelID += "Consignment";
            repeatInvoicePanelID += "Consignment";
            moduleId = Wtf.Acc_Consignment_GoodsReceipt_ModuleId;
        }else if(isMRPJOBWORKIN){
             panelID = "jonworkPurchaseInvList";
            invoiceMainPanelID += "jobwork";
            repeatInvoicePanelID += "jobwork";
            moduleId = Wtf.MRP_Job_Work_IN;
        }
        invoiceMainPanelID = consolidateFlag?invoiceMainPanelID+'Merged':invoiceMainPanelID;
        repeatInvoicePanelID = consolidateFlag?repeatInvoicePanelID+'Merged':repeatInvoicePanelID;
        invoiceMainPanelID = reportbtnshwFlag?invoiceMainPanelID:invoiceMainPanelID+'Entry';
        repeatInvoicePanelID = reportbtnshwFlag?repeatInvoicePanelID:repeatInvoicePanelID+'Entry';
        panelID = consolidateFlag?panelID+'Merged':panelID;
        panelID = reportbtnshwFlag?panelID:panelID+'Entry';
        reportbtnshwFlag=reportbtnshwFlag;
        var panel = Wtf.getCmp(panelID);
        var invoiceTabPanel = Wtf.getCmp(invoiceMainPanelID);
        //        var tabTitle = (isFixedAsset)?WtfGlobal.getLocaleText("acc.grListFixedAsset.tabTitle"):(isConsignment?WtfGlobal.getLocaleText("acc.Consignment.vendor.invoice.report"):((!reportbtnshwFlag)?WtfGlobal.getLocaleText("acc.dimension.module.2"):WtfGlobal.getLocaleText("acc.grList.tabTitle")));
        var tabTitle = (isFixedAsset)?WtfGlobal.getLocaleText("erp.navigate.AssetAcquiredInvoiceList"):(isConsignment?WtfGlobal.getLocaleText("acc.Consignment.vendor.invoice.report"):((!reportbtnshwFlag)?WtfGlobal.getLocaleText("acc.dimension.module.2"):WtfGlobal.getLocaleText("acc.grList.tabTitle")));
        if(moduleId == Wtf.MRP_Job_Work_IN){
           tabTitle=WtfGlobal.getLocaleText("acc.accPref.autoJOBOrderInvoice");
        }
        if(panel==null){
            if(isJobWorkoutInvoice!=undefined&&isJobWorkoutInvoice!=null){
                /*
                 *Will be called in case of job workout invoice
                 **/
                panel = getVendorInvoiceTab(false, panelID, tabTitle, undefined, consolidateFlag,undefined,searchStr, filterAppend,moduleId,reportbtnshwFlag,isFixedAsset,isConsignment,isMRPJOBWORKIN,isJobWorkoutInvoice);
                panel.moduleId=Wtf.Acc_Vendor_Invoice_ModuleId;
            }else{
                panel = getVendorInvoiceTab(false, panelID, tabTitle, undefined, consolidateFlag,undefined,searchStr, filterAppend,moduleId,reportbtnshwFlag,isFixedAsset,isConsignment,isMRPJOBWORKIN);
                panel.moduleId=Wtf.Acc_Vendor_Invoice_ModuleId;
            }
            var itemsArray = [];
            itemsArray.push(panel);

            if(!(isFixedAsset)){// in case of Asset invoice report recurring invoice panel will be hidden
                itemsArray.push(new Wtf.RepeatedInvoicesReport({
                    id : repeatInvoicePanelID,
                    consolidateFlag:consolidateFlag,
                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.invoiceList.recInvReport"),Wtf.TAB_TITLE_LENGTH),
                    tabTip:WtfGlobal.getLocaleText("acc.invoiceList.recInvReportTT"),  //'Recurring Invoices Report',
                    border: false,
                    closable: false,
                    //                    isLeaseFixedAsset:isLeaseFixedAsset,
                    layout: 'fit',
                    iconCls:'accountingbase invoicelist',
                    isCustBill:false,
                    isCustomer:false,
                    isConsignment:isConsignment,
                    isOrder:false,
                    moduleid:Wtf.Acc_Vendor_Invoice_ModuleId
                }));
            }
            invoiceTabPanel = new Wtf.TabPanel({
                activeTab: 0,
                border: false,
                closable: true,
                id: invoiceMainPanelID,
                title:Wtf.util.Format.ellipsis(tabTitle,Wtf.TAB_TITLE_LENGTH),
                tabTip:tabtooltip,                                                      //(!isFixedAsset && isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.invoiceList.tabTT"):WtfGlobal.getLocaleText("acc.invoiceList.tabTT1"),  //'Invoice and Cash Sales Report',
                items: itemsArray
            });

            (isFixedAsset==true)? Wtf.getCmp('as').add(panel):Wtf.getCmp('as').add(invoiceTabPanel);
            panel.on('journalentry',callJournalEntryDetails);
            panel.expandInvoice(id,check);
        }else{
            panel.expandInvoice(id,check);
        }

        var channelName = "";

        if (moduleId == Wtf.Acc_FixedAssets_PurchaseInvoice_ModuleId) {
            channelName = Wtf.ChannelName.FixedAssetAIList;
        }else if(moduleId ==Wtf.Acc_Vendor_Invoice_ModuleId) {
            channelName = Wtf.ChannelName.VIAndCPReport;
        }
        invoiceTabPanel.on('beforeclose', function(){
            beforeClose(channelName);
        },this);
        (isFixedAsset==true)? Wtf.getCmp('as').setActiveTab(panel):Wtf.getCmp('as').setActiveTab(invoiceTabPanel);
        ;

        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
    }
    else
        WtfComMsgBox(46,0,false,isConsignment?WtfGlobal.getLocaleText("acc.lp.viewpurchaseconinv"):WtfGlobal.getLocaleText("acc.common.viewing")+" "+(isFixedAsset?WtfGlobal.getLocaleText("acc.field.PurchaseInvoice"):WtfGlobal.getLocaleText("acc.grList.tabTitle")));
}

function callPurchaseInvoiceList(id,check,consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,isFixedAsset,isConsignment,isMRPJOBWORKIN){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.viewvendorinvoice)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var invoicePanelID = "NavigationPurchaseInvoiceList";
        var tabTitle = WtfGlobal.getLocaleText("acc.grList.tabTitle");
        var panel = Wtf.getCmp(invoicePanelID);
        if(panel==null){
            panel = getVendorInvoiceTab(false, invoicePanelID, tabTitle, undefined, consolidateFlag,undefined,searchStr, filterAppend,Wtf.Acc_Vendor_Invoice_ModuleId,reportbtnshwFlag,isFixedAsset,isConsignment,isMRPJOBWORKIN);
            panel.moduleId = Wtf.Acc_Vendor_Invoice_ModuleId;
            panel.closable = true;
            panel.on('journalentry',callJournalEntryDetails);
            panel.expandInvoice(id,check);
            
            Wtf.getCmp('as').add(panel);
        }else{
            panel.expandInvoice(id,check);
        }

        var channelName = Wtf.ChannelName.VIAndCPReport;

        panel.on('beforeclose', function(){
            beforeClose(channelName);
        },this);
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    } else {
        WtfComMsgBox(46,0,false,isConsignment?WtfGlobal.getLocaleText("acc.lp.viewpurchaseconinv"):WtfGlobal.getLocaleText("acc.common.viewing")+" "+(isFixedAsset?WtfGlobal.getLocaleText("acc.field.PurchaseInvoice"):WtfGlobal.getLocaleText("acc.grList.tabTitle")));
    }
}

function callRecPurchaseInvoiceList(consolidateFlag){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.viewvendorinvoice)) {
        var repeatInvoicePanelID = "NavigationRecPurchaseInvoiceList";//chnaging Panel ID for Recuring Invoice Report which opens from navigation panel List . as it also Opens from Invoice Report in Sub tab.
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var panel = Wtf.getCmp(repeatInvoicePanelID);
        if(panel==null){
            panel = new Wtf.RepeatedInvoicesReport({
                    id : repeatInvoicePanelID,
                    consolidateFlag : consolidateFlag,
                    title : Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.RecurringPurchaseInvoice"),Wtf.TAB_TITLE_LENGTH),
                    tabTip : WtfGlobal.getLocaleText("acc.invoiceList.recInvReportTT"),  //'Recurring Invoices Report',
                    border : false,
                    closable : true,
                    layout : 'fit',
                    iconCls :'accountingbase invoicelist',
                    isCustBill : false,
                    isCustomer : false,
                    isOrder : false,
                    moduleid : Wtf.Acc_Vendor_Invoice_ModuleId
                });  
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }else{
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.grList.tabTitle"));
    }
}

function callPurchaseOrderList(consolidateFlag,reportbtnshwFlag,outstandingreportflag,person,titlelabel,searchStr, filterAppend,isMRPJOBWORKOUT,isfromReportList,isJobWorkOrderReciever,isSecurityGateEntry){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.viewpo)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        outstandingreportflag=outstandingreportflag;
        var panelID = "PurchaseOrderList";
        if(isMRPJOBWORKOUT){
            panelID = "JobWorkOutList";
        }else if (isJobWorkOrderReciever)
            panelID = "JobWorkOutOrderList";
        
        if(isSecurityGateEntry){
            panelID = "securityGateList";
        }
        panelID = consolidateFlag?panelID+'Merged':panelID;
        panelID = reportbtnshwFlag?panelID:panelID+'Entry';
        reportbtnshwFlag=reportbtnshwFlag;
        var panel = Wtf.getCmp(panelID);
        if(panel==null){
            panel = getPOTab(false, panelID, (titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.poList.tabTitle"), undefined, consolidateFlag,undefined,outstandingreportflag,person,reportbtnshwFlag,undefined,searchStr, filterAppend,isMRPJOBWORKOUT,isfromReportList,isJobWorkOrderReciever,isSecurityGateEntry);
            Wtf.getCmp('as').add(panel);
            panel.on('journalentry',callJournalEntryDetails);
        }
        var channelName =Wtf.ChannelName.PurchaseOrderReport;
        panel.on('beforeclose', function(){
            beforeClose(channelName);
        },this);
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.poList.tabTitle"));
}

function callSalesOrderList(consolidateFlag,reportbtnshwFlag,outstandingreportflag,person,isLeaseFixedAsset,searchStr, filterAppend,isMRPSalesOrder,isJobWorkOrderReciever,isfromReportList){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewso)||(!WtfGlobal.EnableDisable(Wtf.UPerm.leaseorder, Wtf.Perm.leaseorder.viewlor)&&isLeaseFixedAsset)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;

        var invoiceMainPanelID = "SalesOrderMainTab";
        var moduleId = Wtf.Acc_Sales_Order_ModuleId;
        invoiceMainPanelID = consolidateFlag?invoiceMainPanelID+'Merged':invoiceMainPanelID;
        invoiceMainPanelID = reportbtnshwFlag?invoiceMainPanelID : invoiceMainPanelID+'Entry';
        var repeatInvoicePanelID = "RepeateSalesOrderList";
        repeatInvoicePanelID = consolidateFlag?repeatInvoicePanelID+'Merged':repeatInvoicePanelID;

        var panelID = "SalesOrderList";
        if(isLeaseFixedAsset){
            panelID = "LeaseFixedAssetSalesOrderList";
            invoiceMainPanelID="LeaseFixedAssetSalesOrderMainTab";
            repeatInvoicePanelID="LeaseFixedAssetRepeateSalesOrderList";
            moduleId=Wtf.Acc_Lease_Order;
        } else if(isJobWorkOrderReciever){
             panelID = "jobworkOrderRecieverList";
            invoiceMainPanelID += "jobwork";
            repeatInvoicePanelID += "jobwork";
            moduleId = Wtf.MRP_Job_Work_ORDER_REC;
        }
        reportbtnshwFlag=reportbtnshwFlag;
        panelID = consolidateFlag?panelID+'Merged':panelID;
        panelID = reportbtnshwFlag ? panelID : panelID+'Entry';
        var panel = Wtf.getCmp(panelID);
        var invoiceTabPanel = Wtf.getCmp(invoiceMainPanelID);
        var tabTitle=reportbtnshwFlag?WtfGlobal.getLocaleText("acc.soList.tabTitle"):WtfGlobal.getLocaleText("acc.wtfTrans.so") ; //normal case sales order report
        if(isLeaseFixedAsset){
            tabTitle=WtfGlobal.getLocaleText("acc.lease.order.report"); //for lease lease order report
        }
        if(moduleId == Wtf.MRP_Job_Work_ORDER_REC){
           tabTitle=WtfGlobal.getLocaleText("acc.jobWorkOrder.vendorjobworkorder");  // to add name in message.properties
        }
        if(isfromReportList){
          tabTitle=WtfGlobal.getLocaleText("acc.stockStatusReport.soQty");//Outstanding Report Title
        }
        if(panel==null){
            panel = getSOTab(false, panelID, tabTitle, undefined, consolidateFlag,false,outstandingreportflag,person,reportbtnshwFlag,isLeaseFixedAsset,false,searchStr, filterAppend,isMRPSalesOrder,isJobWorkOrderReciever,isfromReportList);


            var panelArr = [];

            panelArr.push(panel);

            if(!isLeaseFixedAsset && !isJobWorkOrderReciever && !isfromReportList){
                var recurringPanel = new Wtf.RepeatedInvoicesReport({
                    id : repeatInvoicePanelID,
                    consolidateFlag:consolidateFlag,
                    title:WtfGlobal.getLocaleText("acc.repeatedSO.recInv"),
                    tabTip:reportbtnshwFlag?WtfGlobal.getLocaleText("acc.field.RecurringSalesOrderReport"):WtfGlobal.getLocaleText("acc.repeatedSO.recInv"),  //'Recurring Invoices Report',
                    border: false,
                    closable: false,
                    layout: 'fit',
                    iconCls:'accountingbase salesorderlist',
                    isCustBill:false,
                    isCustomer:true,
                    isOrder:true,
                    moduleid:Wtf.Acc_Sales_Order_ModuleId
                });
                panelArr.push(recurringPanel);
            }
            
            var invTabPanelTitle = "";
            if (isLeaseFixedAsset) {
                invTabPanelTitle = WtfGlobal.getLocaleText("acc.lease.order.report");
            } else if (isJobWorkOrderReciever) {
                invTabPanelTitle = WtfGlobal.getLocaleText("acc.jobWorkOrder.vendorjobworkorder");  // to add name in messages.properties 
            } else {
                invTabPanelTitle = WtfGlobal.getLocaleText("acc.soList.tabTitle");
            }

            invoiceTabPanel = new Wtf.TabPanel({
                activeTab: 0,
                border: false,
                closable: true,
                id: invoiceMainPanelID,
                title:Wtf.util.Format.ellipsis(invTabPanelTitle,Wtf.TAB_TITLE_LENGTH),
                tabTip:invTabPanelTitle,
                items: panelArr,
                iconCls:'accountingbase salesorderlist'//To display icon when sales order report is viewed
                
            });
            Wtf.getCmp('as').add(invoiceTabPanel);
            panel.on('journalentry',callJournalEntryDetails);

        }
        var channelName = "";
        if (moduleId == Wtf.Acc_Sales_Order_ModuleId) {
            channelName = Wtf.ChannelName.SalesOrderReport;
        }else if(moduleId ==Wtf.Acc_Lease_Order){
            channelName = Wtf.ChannelName.LeaseOrderReport;
        }
        invoiceTabPanel.on('beforeclose', function(){
            beforeClose(channelName);
        },this);
        
        Wtf.getCmp('as').setActiveTab(invoiceTabPanel);
        invoiceTabPanel.setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
         showAdvanceSearch(panel,searchStr, filterAppend);

    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.soList.tabTitle"));
}

//######################### Customer Warehouse Masters#############################
function callcustomerwarehouses(winid){
    var cmpId ='cuswarehouseTab'
    var panel = Wtf.getCmp(cmpId);
    if(panel == null){
        panel=new Wtf.account.LocationWarehouseSetup({
            id:cmpId,
            getallcids:true,               //For accessing all customers related to warehouse.
            //            isEntry:entry,
            //            title:(entry)?'Asset Groups':'Asset Groups Report ',
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.Consignment.Warehouses.setup"),Wtf.TAB_TITLE_LENGTH) ,
            tabTip:WtfGlobal.getLocaleText("acc.Consignment.Warehouses.setup"),
            layout:'fit',
            border : false,
            closable:true,
            iconCls:getButtonIconCls(Wtf.etype.product)
        });

        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}
//######################### Customer Location Masters#############################
function callcustomerlocation(winid){
    //    var cmpId = (winid)?winid:(entry)?'assetGroupTab':'assetGroupReportTab'
    var cmpId ='cuslocationTab'
    var panel = Wtf.getCmp(cmpId);
    if(panel == null){
        panel=new Wtf.account.LocationWarehouseSetup({
            id:cmpId,
            //            isEntry:entry,
            //            title:(entry)?'Asset Groups':'Asset Groups Report ',
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.Consignment.location.setup"),Wtf.TAB_TITLE_LENGTH) ,
            tabTip:WtfGlobal.getLocaleText("acc.Consignment.location.setup"),
            layout:'fit',
            border : false,
            closable:true,
            iconCls:getButtonIconCls(Wtf.etype.product)
        });

        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

//################# Create Consignment Request  #############################
function callConsignmentRequest(isEdit,rec,winid, copyInv,templateId,isViewTemplate,isSOfromPO,isOpeningBalanceOrder,isConsignment,isCustomer){
    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
    var userpermision=isEdit?(isCustomer?WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.editsalesconreq):WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.editpurchaseconreq)):(isCustomer?WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.createsalesconreq):WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.createpurchaseconreq));
    if(!userpermision) {
        winid=(winid==null?(isCustomer?'consignmentreuest':'venconsignmentreuest'):winid);
        var label = WtfGlobal.getLocaleText("acc.accPref.autoSO");
        if(copyInv !== undefined && copyInv !== "" && copyInv !== null && copyInv){
            winid = 'copy'+winid;
        }else{
            copyInv = false;
        }

        isConsignment = (isConsignment)?isConsignment:false;

        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockTransactionPanel({
                id : winid,
                isEdit: isEdit,
                copyInv : copyInv,
                record: rec,
                isCustomer:isCustomer,
                isConsignment:isConsignment,
                isOrder:true,
                isCopyFromTemplate:isCopyFromTemplate,
                isOpeningBalanceOrder:isOpeningBalanceOrder,
                templateId:templateId,
                moduleid:isCustomer?Wtf.Acc_ConsignmentRequest_ModuleId: Wtf.Acc_ConsignmentVendorRequest_ModuleId,
                isViewTemplate:isViewTemplate,
                isSOfromPO:isSOfromPO,
                label:isCustomer?WtfGlobal.getLocaleText("acc.consignment.order"):WtfGlobal.getLocaleText("acc.venconsignment.order"),
                border : false,
                heplmodeid: 11,
                //            layout: 'border',
                closable: true,
                title:isEdit?(isCustomer?WtfGlobal.getLocaleText("acc.consignment.editorder"):WtfGlobal.getLocaleText("acc.venconsignment.editorder")):(isCustomer?WtfGlobal.getLocaleText("acc.consignment.order"):WtfGlobal.getLocaleText("acc.venconsignment.order")),//(isOpeningBalanceOrder?WtfGlobal.getLocaleText("acc.field.SalesOrder-Opening"):(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoSO"):(isSOfromPO)?WtfGlobal.getLocaleText("acc.wtfTrans.so"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cso"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so")))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH)))))),
                tabTip:isEdit?(isCustomer?WtfGlobal.getLocaleText("acc.consignment.editorder"):WtfGlobal.getLocaleText("acc.venconsignment.editorder")):(isCustomer?WtfGlobal.getLocaleText("acc.consignment.order"):WtfGlobal.getLocaleText("acc.venconsignment.order")),
                iconCls:'accountingbase salesorder',
                modeName:isCustomer?'autoso':'autopo'
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true && !isCopyFromTemplate){
            var selectedModeId= "SalesOrderList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):isCustomer?WtfGlobal.getLocaleText("acc.lp.createsalesconreq"):WtfGlobal.getLocaleText("acc.lp.createpurchaseconreq"));
}

function callViewConsignmentRequest(isEdit,rec,winid, copyInv,templateId,isViewTemplate,isSOfromPO,isOpeningBalanceOrder,isConsignment,isCustomer){
 var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
    var userpermision=(isCustomer?WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.viewsalesconreq):WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.viewpurchaseconreq));
    if(!userpermision) {
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.viewsalesconreq)) {
         winid=(winid==null?(isCustomer?'consignmentreuest':'venconsignmentreuest'):'view'+winid);
        isConsignment = (isConsignment)?isConsignment:false;
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockTransactionPanel({
               id : winid,
                isEdit: isEdit,
                copyInv : copyInv,
                readOnly:true,
                record: rec,
                isCustomer:isCustomer,
                isConsignment:isConsignment,
                isOrder:true,
                isOpeningBalanceOrder:isOpeningBalanceOrder,
                templateId:templateId,
                moduleid:isCustomer?Wtf.Acc_ConsignmentRequest_ModuleId: Wtf.Acc_ConsignmentVendorRequest_ModuleId,
                isViewTemplate:isViewTemplate,
                isSOfromPO:isSOfromPO,
                border : false,
                heplmodeid: 11,
                closable: true,
                label:isCustomer?WtfGlobal.getLocaleText("acc.consignment.order"):WtfGlobal.getLocaleText("acc.venconsignment.order"),
                 title:isCustomer?WtfGlobal.getLocaleText("acc.consignment.vieworder"):WtfGlobal.getLocaleText("acc.consignment.venvieworder"),
                tabTip:isCustomer?WtfGlobal.getLocaleText("acc.consignment.vieworder"):WtfGlobal.getLocaleText("acc.consignment.venvieworder"),
                iconCls:'accountingbase salesorder',
                 modeName:isCustomer?'autoso':'autopo'
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?150:180);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            var selectedModeId= "SalesOrderList";
            Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):(isCustomer?WtfGlobal.getLocaleText("acc.lp.viewsalesconreq"):WtfGlobal.getLocaleText("acc.consignment.venvieworder")));
}

//#################Consignment Request Report ########################
function callConsignmentRequestReport(consolidateFlag,reportbtnshwFlag,outstandingreportflag,person,isLeaseFixedAsset,isConsignment){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.viewsalesconreq)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;

        isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
        isConsignment=(isConsignment)?isConsignment:false;

        var invoiceMainPanelID = "SalesOrderMainTab";
        invoiceMainPanelID = consolidateFlag?invoiceMainPanelID+'Merged':invoiceMainPanelID;
        invoiceMainPanelID = reportbtnshwFlag?invoiceMainPanelID : invoiceMainPanelID+'Entry';
        var repeatInvoicePanelID = "RepeateSalesOrderList";
        var pendiapprovalRequestPanelID = "PendiApprovalRequestList";
        var rejectedRequestPanelID = "RejectedRequestList";
        repeatInvoicePanelID = consolidateFlag?repeatInvoicePanelID+'Merged':repeatInvoicePanelID;

        var panelID = "SalesOrderList";
        if(isLeaseFixedAsset){
            panelID = "LeaseFixedAssetSalesOrderList";
            invoiceMainPanelID="LeaseFixedAssetSalesOrderMainTab";
            repeatInvoicePanelID="LeaseFixedAssetRepeateSalesOrderList";
        } else if(isConsignment)
{
            panelID = "ConsignmentRequestReportList";
            invoiceMainPanelID="CpnsignmentRequestReportMainTab";
            repeatInvoicePanelID="CpnsignmentRequestRepeateReportList";
            pendiapprovalRequestPanelID="PendiApprovalRequestList";
            rejectedRequestPanelID="RejectedRequestList";
        }
        reportbtnshwFlag=reportbtnshwFlag;
        panelID = consolidateFlag?panelID+'Merged':panelID;
        panelID = reportbtnshwFlag ? panelID : panelID+'Entry';
        var panel = Wtf.getCmp(panelID);
        var invoiceTabPanel = Wtf.getCmp(invoiceMainPanelID);
        var tabTitle=reportbtnshwFlag?WtfGlobal.getLocaleText("acc.soList.tabTitle"):WtfGlobal.getLocaleText("acc.wtfTrans.so") ; //normal case sales order report
        if(isLeaseFixedAsset){
            tabTitle=WtfGlobal.getLocaleText("acc.lease.order.report"); //for lease lease order report
        }else if(isConsignment)
        {
            tabTitle=WtfGlobal.getLocaleText("acc.Consignment.order.report"); //for consignment
        }

        if(panel==null){
            panel = getSOTab(false, panelID, tabTitle, undefined, consolidateFlag,false,outstandingreportflag,person,reportbtnshwFlag,isLeaseFixedAsset,isConsignment);


            var panelArr = [];

            panelArr.push(panel);

            if(!isLeaseFixedAsset && !isConsignment){
                var recurringPanel = new Wtf.RepeatedInvoicesReport({
                    id : repeatInvoicePanelID,
                    consolidateFlag:consolidateFlag,
                    title:WtfGlobal.getLocaleText("acc.repeatedSO.recInv"),
                    tabTip:reportbtnshwFlag?WtfGlobal.getLocaleText("acc.field.RecurringSalesOrderReport"):WtfGlobal.getLocaleText("acc.repeatedSO.recInv"),  //'Recurring Invoices Report',
                    border: false,
                    closable: false,
                    layout: 'fit',
                    iconCls:'accountingbase salesorderlist',
                    isCustomer:true,
                    isCustBill:false,
                    isOrder:true
                });
                panelArr.push(recurringPanel);
            }
            if(isConsignment){
                var pendingApprovalRecordsPanel = new Wtf.account.ConsignmentRequestPendingApproval({
                    id : pendiapprovalRequestPanelID,
                    consolidateFlag:consolidateFlag,
                    title:WtfGlobal.getLocaleText("acc.ConsignmentPendingApprovalSO"),
                    tabTip:reportbtnshwFlag?WtfGlobal.getLocaleText("acc.field.ConsignmentRulehasbeensavedsuccessfully"):WtfGlobal.getLocaleText("acc.ConsignmentPendingApprovalSO"),  //'Recurring Invoices Report',
                    label:WtfGlobal.getLocaleText("acc.consignment.order"),
                    border: false,
                    closable: false,
                    rejectedRecords:false,
                    layout: 'fit',
                    iconCls:'accountingbase salesorderlist',
                    isCustomer:true,
                    isCustBill:false,
                    isOrder:true
                });
                var rejectedRecordsPanel = new Wtf.account.ConsignmentRequestPendingApproval({
                    id : rejectedRequestPanelID,
                    consolidateFlag:consolidateFlag,
                    title:WtfGlobal.getLocaleText("acc.ConsignmentRejectedApprovalSO"),
                    tabTip:reportbtnshwFlag?WtfGlobal.getLocaleText("acc.field.ConsignmentRulehasbeensavedsuccessfully"):WtfGlobal.getLocaleText("acc.ConsignmentRejectedApprovalSO"),  //'Recurring Invoices Report',
                    label:WtfGlobal.getLocaleText("acc.consignment.order"),
                    border: false,
                    rejectedRecords:true,
                    closable: false,
                    layout: 'fit',
                    iconCls:'accountingbase salesorderlist',
                    isCustomer:true,
                    isCustBill:false,
                    isOrder:true
                });
                panelArr.push(pendingApprovalRecordsPanel);
                panelArr.push(rejectedRecordsPanel);
                
                pendingApprovalRecordsPanel.on("activate",function(panel){
                    pendingApprovalRecordsPanel.refreshGridView(panel);
                });
                rejectedRecordsPanel.on("activate",function(panel){
                    rejectedRecordsPanel.refreshGridView(panel);
                });
            }

            invoiceTabPanel = new Wtf.TabPanel({
                activeTab: 0,
                border: false,
                closable: true,
                id: invoiceMainPanelID,
                moduleid:Wtf.Acc_ConsignmentRequest_ModuleId,
                //                title:(isLeaseFixedAsset)?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.lease.order.report"),Wtf.TAB_TITLE_LENGTH):(reportbtnshwFlag?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.soList.tabTitle"),Wtf.TAB_TITLE_LENGTH):Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.so"),Wtf.TAB_TITLE_LENGTH)),
                //                tabTip:(isLeaseFixedAsset)?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.lease.order.report"),Wtf.TAB_TITLE_LENGTH):(reportbtnshwFlag?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.soList.tabTitle"),Wtf.TAB_TITLE_LENGTH):Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.so"),Wtf.TAB_TITLE_LENGTH)),
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.Consignment.order.report"),Wtf.TAB_TITLE_LENGTH),
                tabTip:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.Consignment.order.report"),Wtf.TAB_TITLE_LENGTH),
                items: panelArr
            });
            Wtf.getCmp('as').add(invoiceTabPanel);
            panel.on('journalentry',callJournalEntryDetails);

        }
        Wtf.getCmp('as').setActiveTab(invoiceTabPanel);
        invoiceTabPanel.setActiveTab(panel);
        Wtf.getCmp('as').doLayout();

    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.viewsalesconreq"));
}

//#################Consignment Request Report Vendor Side########################
function callVendorConsignmentRequestReport(consolidateFlag,reportbtnshwFlag,outstandingreportflag,person,titlelabel,isConsignment){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.viewpurchaseconreq)){
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        outstandingreportflag=outstandingreportflag;
        var panelID = "PurchaseOrderList";
        if(isConsignment)
        {
            panelID = "VendorConsignmentRequestReportList";
        }
        panelID = consolidateFlag?panelID+'Merged':panelID;
        panelID = reportbtnshwFlag?panelID:panelID+'Entry';
        reportbtnshwFlag=reportbtnshwFlag;
        var panel = Wtf.getCmp(panelID);
        if(panel==null){
            panel = getPOTab(false, panelID, (titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.VenConsignment.order.report"), undefined, consolidateFlag,undefined,outstandingreportflag,person,reportbtnshwFlag,isConsignment);
            Wtf.getCmp('as').add(panel);
            panel.on('journalentry',callJournalEntryDetails);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.viewpurchaseconreq"));
}

//#################Create Consignment Delivery Order ########################
function callConsignmentDeliveryOrder(isEdit,rec,winid,isFixedAsset,isLeaseFixedAsset,isConsignment,isLinkedTransaction){
    isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    var userpermision=isEdit?WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.editsalescondo):WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.createsalescondo);
    if(!userpermision) {
        winid=(winid==null?'LeaseConsignmentdeliveryorder':winid);
        //var editid=(isEdit)?'Edit':''
        isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
        isFixedAsset=(isFixedAsset)?isFixedAsset:false;
        isConsignment=(isConsignment)?isConsignment:false;
        //    if(isFixedAsset){
        //        winid=(isEdit)?'EditFixedAssetdeliveryorder':'FixedAssetdeliveryorder'
        //    }else if(isLeaseFixedAsset){
        //        winid=(isEdit)?'EditLeaseFixedAssetdeliveryorder':'LeaseFixedAssetdeliveryorder';
        //    }else if(isConsignment){
        ////         winid=(isEdit)?'EditConsignmentdeliveryorder':'LeaseConsignmentdeliveryorder';
        //         winid='LeaseConsignmentdeliveryorder';
        //    }
        var title=(isEdit?(WtfGlobal.getLocaleText("acc.wtfTrans.edo")):WtfGlobal.getLocaleText("acc.wtfTrans.do"));
        var tabTip=(isEdit?(WtfGlobal.getLocaleText("acc.wtfTrans.edo")):WtfGlobal.getLocaleText("acc.wtfTrans.do"));
        if(isLeaseFixedAsset){
            title=isEdit?('Edit'+' '+WtfGlobal.getLocaleText("acc.lease.DO")):(WtfGlobal.getLocaleText("acc.lease.DO"));
            tabTip=isEdit?('Edit'+' '+WtfGlobal.getLocaleText("acc.lease.DO")):(WtfGlobal.getLocaleText("acc.lease.DO"));
        }else if(isConsignment)
        {
            title=isEdit?('Edit'+' '+WtfGlobal.getLocaleText("acc.Consignment.DO")):(WtfGlobal.getLocaleText("acc.Consignment.DO"));
            tabTip=isEdit?('Edit'+' '+WtfGlobal.getLocaleText("acc.Consignment.DO")):(WtfGlobal.getLocaleText("acc.Consignment.DO"));
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockDeliveryOrderPanel({
                id : winid,
                isEdit: isEdit,
                record: rec,
                isFixedAsset:isFixedAsset,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment,
                isCustomer:true,
                isCustBill:false,
                label:WtfGlobal.getLocaleText("acc.field.Order"),
                border : false,
                heplmodeid: 11,
                moduleid:Wtf.Acc_ConsignmentDeliveryOrder_ModuleId,
                title:title,
                tabTip:tabTip,
                closable: true,
                isLinkedTransaction:isLinkedTransaction,
                iconCls:'accountingbase deliveryorder',
                modeName:'autodo'
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(isEdit == true){
                //var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
                Wtf.getCmp("DeliveryOrderList").loadStore();
                Wtf.getCmp('as').remove(panel);
            }
        }, this);
        Wtf.getCmp('as').doLayout();
    }
    else
    {
        WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.lp.createsalescondo"));
    }
}


function callViewConsignmentDeliveryOrder(isEdit,rec,winid,isFixedAsset,isLeaseFixedAsset,isConsignment){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.viewsalescondo)) {
        isLeaseFixedAsset=(isLeaseFixedAsset!=undefined)?isLeaseFixedAsset:false;
        isFixedAsset=(isFixedAsset!=undefined)?isFixedAsset:false;
        isConsignment=(isConsignment!=undefined)?isConsignment:false;
        winid=winid+'ViewConsignmentdeliveryorder';
        var title=WtfGlobal.getLocaleText("acc.wtfTrans.viewConsigndo");
        var tabTip=WtfGlobal.getLocaleText("acc.wtfTrans.viewConsigndo");
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockDeliveryOrderPanel({
                id : winid,
                readOnly:true,
                isViewTemplate:true,
                isEdit: isEdit,
                record: rec,
                isFixedAsset:isFixedAsset,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment,
                isCustomer:true,
                isCustBill:false,
                label:WtfGlobal.getLocaleText("acc.field.Order"),
                border : false,
                heplmodeid: 11,
                moduleid:Wtf.Acc_ConsignmentDeliveryOrder_ModuleId,
                title:title,
                tabTip:tabTip,
                closable: true,
                iconCls:'accountingbase deliveryorder',
                modeName:'autodo'
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(isEdit == true){
                Wtf.getCmp("DeliveryOrderList").loadStore();
                Wtf.getCmp('as').remove(panel);
            }
        }, this);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.lp.viewsalescondo"));
}

//################# Consignment Delivery Order Report########################
function callConsignmentDeliveryOrderList(consolidateFlag,searchStr,filterAppend,moduleid,reportbtnshwFlag, pendingapproval,isFixedAsset,isLeaseFixedAsset,isConsignment){
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    isLeaseFixedAsset = (isLeaseFixedAsset)?isLeaseFixedAsset:false;
    isFixedAsset = (isFixedAsset)?isFixedAsset:false;
    isConsignment=(isConsignment)?isConsignment:false;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.viewsalescondo)) {
        var id = 'DeliveryOrderList';
        if(isFixedAsset){
            id = 'FixedAssetDeliveryOrderList';
        }else if(isLeaseFixedAsset){
            id = 'LeaseFixedAssetDeliveryOrderList';
        }else if(isConsignment){
            id = 'ConsignmentDeliveryOrderList';
        }
        id = consolidateFlag?id+'Merged':id;
        id = pendingapproval ? id + 'Pending' : id;
        id = reportbtnshwFlag ? id : id +'Entry';
        var panel = Wtf.getCmp(id);
        if(panel==null){
            panel = new Wtf.account.DeliveryListPanel({
                id : id,
                border : false,
                consolidateFlag:consolidateFlag,
                isOrder:true,
                pendingapproval : pendingapproval,
                isCustomer:true,
                searchJson: searchStr,
                isFixedAsset:isFixedAsset,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment,
                reportbtnshwFlag:reportbtnshwFlag,
                filterConjuctionCrit:filterAppend,
                //            moduleId:moduleid,
                helpmodeid:52,
                moduleid:Wtf.Acc_ConsignmentDeliveryOrder_ModuleId,
                title: WtfGlobal.getLocaleText("acc.Consignment.delivery.order.report"),//Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.soList.tabTitle"), Wtf.TAB_TITLE_LENGTH),
                tabTip:  WtfGlobal.getLocaleText("acc.Consignment.delivery.order.report"),
                //            label: WtfGlobal.getLocaleText("acc.Consignment.DO"),
                //            title: isFixedAsset?WtfGlobal.getLocaleText("acc.fixedasset.deliverytli"):isLeaseFixedAsset? (WtfGlobal.getLocaleText("acc.lease.delivery.order.report")) : (pendingapproval ? WtfGlobal.getLocaleText("acc.field.PendingApprovalDOReport"): (reportbtnshwFlag?WtfGlobal.getLocaleText("acc.dashboard.consolidateDeliveryOrderReport"):WtfGlobal.getLocaleText("acc.accPref.autoDO"))),
                //            tabTip:isFixedAsset?WtfGlobal.getLocaleText("acc.fixedasset.deliverytli"):isLeaseFixedAsset? (WtfGlobal.getLocaleText("acc.lease.delivery.order.report")) : (pendingapproval ? WtfGlobal.getLocaleText("acc.field.PendingApprovalDOReport"):(reportbtnshwFlag?WtfGlobal.getLocaleText("acc.dashboard.consolidateDeliveryOrderReport"):WtfGlobal.getLocaleText("acc.accPref.autoDO"))),
                label:WtfGlobal.getLocaleText("acc.Consignment.DO"),  //'consignment delivery order
                layout: 'fit',
                closable: true,
                iconCls:'accountingbase salesorderlist'
            });
            Wtf.getCmp('as').add(panel);
        }
        var channelName="";
        if(isFixedAsset && !isConsignment){
            channelName =Wtf.ChannelName.FixedAssetDeliveryList;
        } else if(isLeaseFixedAsset && !isConsignment){
            channelName =Wtf.ChannelName.LeaseDeliveryOrderReport;
        } else if(!(isFixedAsset || isLeaseFixedAsset || isConsignment)){
            channelName =Wtf.ChannelName.DeliveryOrderReport;
        }
        panel.on('beforeclose', function(){
            beforeClose(channelName);
        },this);
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.viewsalescondo"));
}
//#################Create Consignment Goods receipt Order ########################

function callConsignmentGoodsReceiptOrder(isEdit,rec,winid, copyInv,isFixedAsset,isConsignment){
    winid=(winid==null?'Consignmentgoodsreceipt':winid);
    //var editid=(isEdit)?'Edit':''
    var permission=isEdit?WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.editpurchasecondo):WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.createpurchasecondo)
    if(!permission){
        isFixedAsset=(isFixedAsset)?isFixedAsset:false;
        isConsignment=(isConsignment)?isConsignment:false;

        var title=(isEdit?(WtfGlobal.getLocaleText("acc.wtfTrans.edo")):WtfGlobal.getLocaleText("acc.wtfTrans.do"));
        var tabTip=(isEdit?(WtfGlobal.getLocaleText("acc.wtfTrans.edo")):WtfGlobal.getLocaleText("acc.wtfTrans.do"));
        if(isConsignment)
        {
            title=isEdit?('Edit'+' '+WtfGlobal.getLocaleText("acc.Consignment.GR")):(WtfGlobal.getLocaleText("acc.Consignment.GR"));
            tabTip=isEdit?('Edit'+' '+WtfGlobal.getLocaleText("acc.Consignment.GR")):(WtfGlobal.getLocaleText("acc.Consignment.GR"));
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockDeliveryOrderPanel({
                id : winid,
                isEdit: isEdit,
                record: rec,
                isCustomer:false,
                isFixedAsset:isFixedAsset,
                isConsignment:isConsignment,
                copyInv:copyInv,
                label:WtfGlobal.getLocaleText("acc.Consignment.GR"),
                border : false,
                heplmodeid: 11,
                moduleid:Wtf.Acc_Consignment_GoodsReceiptOrder_ModuleId,
                title:title,
                tabTip:tabTip,
                closable: true,
                iconCls:'accountingbase deliveryorder',
                modeName:'autogro'
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        var channelName="";
        if(isFixedAsset && !isConsignment){
            channelName =Wtf.ChannelName.FixedAssetReceiptList;
        } else if(!(isFixedAsset || isConsignment)){
            channelName =Wtf.ChannelName.GoodsReceiptReport;
        }
        panel.on('beforeclose', function(){
            beforeClose(channelName);
        },this);
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(isEdit == true){
                //var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
                Wtf.getCmp("DeliveryOrderList").loadStore();
                Wtf.getCmp('as').remove(panel);
            }
        }, this);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.lp.createpurchasecondo"));
}

function callViewConsignmentGoodsReceiptDelivery(isEdit,rec,winid, copyInv,isFixedAsset,isConsignment){
    winid = 'ViewConsignmentgoodsreceipt'+winid;
    var panel = Wtf.getCmp(winid);
    isFixedAsset=(isFixedAsset)?isFixedAsset:false;
    isConsignment=(isConsignment)?isConsignment:false;
    if(panel==null){
        panel = new Wtf.account.ConsignmentStockDeliveryOrderPanel({
            id : winid,
            isEdit: isEdit,
            record: rec,
            readOnly:true,
            isViewTemplate:true,
            isCustomer:false,
            isFixedAsset:isFixedAsset,
            isConsignment:isConsignment,
            copyInv:copyInv,
            isOrder:true,
            label:WtfGlobal.getLocaleText("acc.Consignment.GR"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Consignment_GoodsReceiptOrder_ModuleId,
            title:WtfGlobal.getLocaleText("acc.lp.viewpurchasecondo"),
            tabTip:WtfGlobal.getLocaleText("acc.lp.viewpurchasecondo"),
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:'autogro'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            Wtf.getCmp("GoodsReceiptDeliveryOrderList").loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}
//################# Consignment Goods Recipt Order Report########################
function callConsignmentGoodsReceiptOrderList(consolidateFlag,searchStr,filterAppend,moduleid,reportbtnshwFlag, pendingapproval,isFixedAsset,isLeaseFixedAsset,isConsignment){

    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.viewpurchasecondo)){
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        isLeaseFixedAsset = (isLeaseFixedAsset)?isLeaseFixedAsset:false;
        isFixedAsset = (isFixedAsset)?isFixedAsset:false;
        isConsignment=(isConsignment)?isConsignment:false;
        var id = 'DeliveryOrderList';
        if(isFixedAsset){
            id = 'FixedAssetDeliveryOrderList';
        }else if(isLeaseFixedAsset){
            id = 'LeaseFixedAssetDeliveryOrderList';
        }else if(isConsignment){
            id = 'ConsignmentgoodsReceiptOrderList';
        }
        id = consolidateFlag?id+'Merged':id;
        id = pendingapproval ? id + 'Pending' : id;
        id = reportbtnshwFlag ? id : id +'Entry';
        var panel = Wtf.getCmp(id);
        if(panel==null){
            panel = new Wtf.account.DeliveryListPanel({
                id : id,
                border : false,
                consolidateFlag:consolidateFlag,
                isOrder:true,
                pendingapproval : pendingapproval,
                isCustomer:false,
                searchJson: searchStr,
                isFixedAsset:isFixedAsset,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment,
                reportbtnshwFlag:reportbtnshwFlag,
                filterConjuctionCrit:filterAppend,
                //            moduleId:moduleid,
                helpmodeid:52,
                moduleid:Wtf.Acc_Consignment_GoodsReceiptOrder_ModuleId,
                title: WtfGlobal.getLocaleText("acc.VenConsignment.GRN.report"),//Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.soList.tabTitle"), Wtf.TAB_TITLE_LENGTH),
                tabTip:  WtfGlobal.getLocaleText("acc.VenConsignment.GRN.report"),
                label:WtfGlobal.getLocaleText("acc.Consignment.GR"),  //'consignment Goods recipt order
                layout: 'fit',
                closable: true,
                iconCls:'accountingbase salesorderlist'
            });
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.viewpurchasecondo"));
}

//################# Create Consignment Invoice########################
function callConsignmentInvoice(isEdit,rec,winid,isFixedAsset,isLeaseFixedAsset,isConsignment){
    isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
    isConsignment=(isConsignment)?isConsignment:false;
    var userpermission=isEdit?WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.editsalesconinv):WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.createsalesconinv);
    if(!userpermission) {

        winid=(winid==null?'fixedassetInvoice':winid);

        if(isLeaseFixedAsset){
            winid='LeasefixedassetInvoice';
        }else if(isConsignment)
        {
            if(isEdit || winid!=null)
                winid=winid;
            else
                winid='ConsignmentInvoice';
        }

        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockTransactionPanel({
                id : winid,
                isEdit:isEdit,
                isCustomer:true,
                record: rec,
                label:isEdit?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.ConsignmentSalesInvoice"),Wtf.TAB_TITLE_LENGTH):WtfGlobal.getLocaleText("acc.field.SalesInvoice"),
                isInvoice:true,
                doctype:1,
                moduleid:Wtf.Acc_ConsignmentInvoice_ModuleId,
                border : false,
                heplmodeid: 2, //This is help mode id
                //            layout: 'border',
                DOSettings:Wtf.account.companyAccountPref.DOSettings,
                GRSettings:Wtf.account.companyAccountPref.GRSettings,
                //            title:(isLeaseFixedAsset)?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.LeaseSalesInvoice"),Wtf.TAB_TITLE_LENGTH):Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.fixedasset.disposalinvoice"),Wtf.TAB_TITLE_LENGTH),
                //            tabTip:(isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.field.LeaseSalesInvoice"):WtfGlobal.getLocaleText("acc.fixedasset.disposalinvoice"),
//                title:isEdit?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.lp.editinvoice")+" "+WtfGlobal.getLocaleText("acc.field.ConsignmentSalesInvoice"),30):Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.ConsignmentSalesInvoice"),30),
                title:isEdit?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.lp.editinvoice")+" "+WtfGlobal.getLocaleText("acc.field.ConsignmentSalesInvoice"),Wtf.TAB_TITLE_LENGTH):Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.ConsignmentSalesInvoice"),Wtf.TAB_TITLE_LENGTH),
                //            tabTip:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.ConsignmentSalesInvoice"),Wtf.TAB_TITLE_LENGTH),
                tabTip:isEdit?WtfGlobal.getLocaleText("acc.lp.editinvoice")+" "+WtfGlobal.getLocaleText("acc.field.ConsignmentSalesInvoice"):WtfGlobal.getLocaleText("acc.field.ConsignmentSalesInvoice"),
                closable: true,
                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                iconCls:'accountingbase invoice',
                modeName:'autoinvoice',
                isFixedAsset:isFixedAsset,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?260:230);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();

    panel.on('update',function(){
        if(Wtf.getCmp('assetAssetDetailsTab') && Wtf.getCmp('assetAssetDetailsTab').gridStore)// update asset details grid on saving, edition of sales invoice
            Wtf.getCmp('assetAssetDetailsTab').gridStore.reload();
    },this);

    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.lp.createsalesconinv"));
}

function callViewConsignmentInvoice(isEdit,rec,winid,isFixedAsset,isLeaseFixedAsset,isConsignment){
    isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
    isConsignment=(isConsignment)?isConsignment:false;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.viewsalesconinv)) {
        winid=(winid==null?'fixedassetInvoice':winid);

        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockTransactionPanel({
                id : winid,
                isEdit:isEdit,
                readOnly:true,
                isViewTemplate:true,
                viewGoodReceipt:true,
                isCustomer:true,
                record: rec,
                label:WtfGlobal.getLocaleText("acc.field.ConsignmentSalesInvoice"),
                isInvoice:true,
                doctype:1,
                moduleid:Wtf.Acc_ConsignmentInvoice_ModuleId,
                border : false,
                heplmodeid: 2, //This is help mode id
                DOSettings:Wtf.account.companyAccountPref.DOSettings,
                GRSettings:Wtf.account.companyAccountPref.GRSettings,
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.ViewConsignmentSalesInvoice"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.field.ViewConsignmentSalesInvoice"),
                closable: true,
                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                iconCls:'accountingbase invoice',
                modeName:'autoinvoice',
                isFixedAsset:isFixedAsset,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?260:230);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();

    panel.on('update',function(){
        if(Wtf.getCmp('assetAssetDetailsTab') && Wtf.getCmp('assetAssetDetailsTab').gridStore)// update asset details grid on saving, edition of sales invoice
            Wtf.getCmp('assetAssetDetailsTab').gridStore.reload();
    },this);

    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.lp.viewsalesconinv"));
}

//#####################################Call Consignment Invoice list ###############################
function callConsignmentInvoiceList(id,check,isCash,consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,isFixedAsset,isLeaseFixedAsset,isConsignment){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.viewsalesconinv)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var invoiceMainPanelID = "InvoiceListMainTab";
        var repeatInvoicePanelID = "RepeateInvoiceList";

            reportbtnshwFlag:reportbtnshwFlag;
        var panelID = "InvoiceList";
        isFixedAsset = (isFixedAsset != null || isFixedAsset != undefined)?isFixedAsset:false;
        isLeaseFixedAsset = (isLeaseFixedAsset != null || isLeaseFixedAsset != undefined)?isLeaseFixedAsset:false;
        isConsignment = (isConsignment != null || isConsignment != undefined)?isConsignment:false;
        if(isFixedAsset){
            panelID = "FixedAssetInvoiceList";
            invoiceMainPanelID="FixedAssetInvoiceListMainTab";
            repeatInvoicePanelID="RepeateFixedAssetInvoiceList";
        }
        if(isLeaseFixedAsset){
            panelID = "LeaseFixedAssetInvoiceList";
            invoiceMainPanelID="LeaseFixedAssetInvoiceListMainTab";
            repeatInvoicePanelID="RepeateLeaseFixedAssetInvoiceList";
        }
        if(isConsignment){
            panelID = "ConsignmentInvoiceList";
            invoiceMainPanelID="ConsignmentInvoiceListMainTab";
            repeatInvoicePanelID="RepeateConsignmentInvoiceList";
        }
        invoiceMainPanelID = consolidateFlag?invoiceMainPanelID+'Merged':invoiceMainPanelID;
        repeatInvoicePanelID = consolidateFlag?repeatInvoicePanelID+'Merged':repeatInvoicePanelID;
        var tabTitle = WtfGlobal.getLocaleText("acc.invoiceList.tabtitle");
        if(isFixedAsset)
        {
            tabTitle= WtfGlobal.getLocaleText("acc.invoiceListFixedAsset.tabtitle");
        }
        if(isLeaseFixedAsset)
        {
            tabTitle= WtfGlobal.getLocaleText("acc.invoiceListisLeaseFixedAsset.tabtitle");
        }
        if(isConsignment){
            tabTitle= WtfGlobal.getLocaleText("acc.Consignment.customer.invoice.report");
        }
        // var tabTitle = (isFixedAsset)?WtfGlobal.getLocaleText("acc.invoiceListFixedAsset.tabtitle"):WtfGlobal.getLocaleText("acc.invoiceList.tabtitle")
        panelID = consolidateFlag?panelID+'Merged':panelID;
        panelID = reportbtnshwFlag ? panelID : panelID +'Entry';
        var panel = Wtf.getCmp(panelID);
        var invoiceTabPanel = Wtf.getCmp(invoiceMainPanelID);
        if(panel==null){
            panel = getInvoiceTab(false, panelID, tabTitle, undefined, isCash,consolidateFlag,undefined,searchStr, filterAppend,Wtf.Acc_ConsignmentInvoice_ModuleId,reportbtnshwFlag,isFixedAsset,isLeaseFixedAsset,isConsignment);
            panel.moduleId=Wtf.Acc_ConsignmentInvoice_ModuleId;

            var itemsArray = [];
            itemsArray.push(panel);

            if(!(isFixedAsset)){// in case of fixed asset invoice report recurring invoice panel will be hidden
                itemsArray.push(new Wtf.RepeatedInvoicesReport({
                    id : repeatInvoicePanelID,
                    consolidateFlag:consolidateFlag,
                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.invoiceList.recInvReport"),Wtf.TAB_TITLE_LENGTH),
                    tabTip:WtfGlobal.getLocaleText("acc.invoiceList.recInvReportTT"),  //'Recurring Invoices Report',
                    border: false,
                    closable: false,
                    isLeaseFixedAsset:isLeaseFixedAsset,
                    isConsignment:isConsignment,
                    layout: 'fit',
                    iconCls:'accountingbase invoicelist',
                    isCustBill:false,
                    isCustomer:true,
                    isOrder:false
                }));
            }


            invoiceTabPanel = new Wtf.TabPanel({
                activeTab: 0,
                border: false,
                closable: true,
                id: invoiceMainPanelID,
                title:Wtf.util.Format.ellipsis(tabTitle,Wtf.TAB_TITLE_LENGTH),
                tabTip:(!isFixedAsset && !isConsignment)?WtfGlobal.getLocaleText("acc.invoiceList.tabTT"):tabTitle,  //'Invoice and Cash Sales Report',
                items: itemsArray
            });
            Wtf.getCmp('as').add(invoiceTabPanel);
            panel.on('journalentry',callJournalEntryDetails);
            panel.expandInvoice(id,check);
        }else{
            panel.expandInvoice(id,check);
        }
        Wtf.getCmp('as').setActiveTab(invoiceTabPanel);
        invoiceTabPanel.setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.viewsalesconinv"));
}


//################################### Consignment Sales eturn ##########################################
function callConsignmentSalesReturn(isEdit,rec,winid,isLeaseFixedAsset,isConsignment,isLinkedTransaction){
    isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    winid=(winid==null?'consignmentsalesreturn':winid);
    var userpermission=isEdit?WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.editsalesconret):WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.createsalesconret);
    if(!userpermission) {
        isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
        isConsignment = (isConsignment != null || isConsignment != undefined)?isConsignment:false;
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockSalesReturnPanel({
                id : winid,
                isEdit: isEdit,
                record: rec,
                isCustomer:true,
                isCustBill:false,
                label:WtfGlobal.getLocaleText("acc.Consignment.salesreturn"),
                border : false,
                heplmodeid: 11,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment,
                moduleid:Wtf.Acc_ConsignmentSalesReturn_ModuleId,
                isLinkedTransaction:isLinkedTransaction,
                //            layout: 'border',
                title:isEdit?WtfGlobal.getLocaleText("acc.Consignment.salesreturn.edit"):WtfGlobal.getLocaleText("acc.Consignment.salesreturn"),
                tabTip:isEdit?WtfGlobal.getLocaleText("acc.Consignment.salesreturn.edit"):WtfGlobal.getLocaleText("acc.Consignment.salesreturn"),
                closable: true,
                iconCls:'accountingbase deliveryorder',
                modeName:'autosr'
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);

        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.lp.createsalesconret"));
}

function callViewConsignmentSalesReturn(isEdit,rec,winid,isLeaseFixedAsset,isConsignment,isCustomer){
    winid=(winid==null?'consignmentsalesreturn':'view'+winid);
    isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
    isConsignment = (isConsignment != null || isConsignment != undefined)?isConsignment:false;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.viewsalesconret)) {
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockSalesReturnPanel({
                id : winid,
                isEdit: isEdit,
                readOnly:true,
                isViewTemplate:true,
                record: rec,
                isCustomer:isCustomer,
                isCustBill:false,
                label:isCustomer?WtfGlobal.getLocaleText("acc.Consignment.salesreturn"):WtfGlobal.getLocaleText("acc.Consignment.purchasereturn"),
                border : false,
                heplmodeid: 11,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment,
                moduleid:isCustomer?Wtf.Acc_ConsignmentSalesReturn_ModuleId:Wtf.Acc_ConsignmentPurchaseReturn_ModuleId,
                title:WtfGlobal.getLocaleText("acc.Consignment.viewsalesreturn"),
                tabTip:WtfGlobal.getLocaleText("acc.Consignment.viewsalesreturn"),
                closable: true,
                iconCls:'accountingbase deliveryorder',
                modeName:'autosr'
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.lp.viewsalesconret"));
}

//############################### Consignment sales return report ###############################
function callConsignmentSalesReturnList(consolidateFlag,reportbtnshwFlag,isLeaseFixedAsset,titlelabel,isConsignment){
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    isLeaseFixedAsset = (isLeaseFixedAsset)?isLeaseFixedAsset:false;
    isConsignment = (isConsignment)?isConsignment:false;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.viewsalesconret)) {
        var id = 'SalesReturnList';
        if(isLeaseFixedAsset){
            id = 'LeaseSalesReturnList';
        }else if(isConsignment){
            id='ConsignmentSalesreturnList';
        }
        id = consolidateFlag?id+'Merged':id;
        id = reportbtnshwFlag?id:id+'Entry';
        var panel = Wtf.getCmp(id);
        if(panel==null){
            panel = new Wtf.account.SalesReturnListPanel({
                id : id,
                border : false,
                consolidateFlag:consolidateFlag,
                isOrder:true,
                isCustomer:true,
                helpmodeid:53,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment,
                reportbtnshwFlag:reportbtnshwFlag,
                moduleid:Wtf.Acc_ConsignmentSalesReturn_ModuleId,
                title: (titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.Consignment.salesreturn.report"),//Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.soList.tabTitle"), Wtf.TAB_TITLE_LENGTH),
                tabTip:(titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.Consignment.salesreturn.report"),
                label:WtfGlobal.getLocaleText("acc.Consignment.salesreturn"),  //'Sales Order',
                layout: 'fit',
                closable: true,
                iconCls:'accountingbase salesorderlist'
            });
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.viewsalesconret"));
}
//################# Create Consignment Goods receipt ########################
function callConsignmentGoodsReceipt(isEdit,rec,winid,isFixedAsset,isLeaseFixedAsset,isConsignment){
    isFixedAsset=(isFixedAsset)?isFixedAsset:false;
    isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
    isConsignment=(isConsignment)?isConsignment:false;
    var userpermission=isEdit?WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.editpurchaseconinv):WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.createpurchaseconinv);
    if(!userpermission){
        winid=(winid==null?'consignmentgoodsreceipt':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockTransactionPanel({
                id : winid,
                isEdit:isEdit,
                isCustomer:false,
                record: rec,
                isInvoice:true,
                moduleid: Wtf.Acc_Consignment_GoodsReceipt_ModuleId,
                label:WtfGlobal.getLocaleText("acc.field.ConsignmentPurchaseInvoice"),
                heplmodeid: 15,
                border : false,
                //            layout: 'border',
                DOSettings:Wtf.account.companyAccountPref.DOSettings,
                GRSettings:Wtf.account.companyAccountPref.GRSettings,
                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                title:isEdit?WtfGlobal.getLocaleText("acc.lp.editinvoice")+" "+WtfGlobal.getLocaleText("acc.field.ConsignmentPurchaseInvoice"):WtfGlobal.getLocaleText("acc.field.ConsignmentPurchaseInvoice"),
                tabTip:isEdit?WtfGlobal.getLocaleText("acc.lp.editinvoice")+" "+WtfGlobal.getLocaleText("acc.field.ConsignmentPurchaseInvoice"):WtfGlobal.getLocaleText("acc.field.ConsignmentPurchaseInvoice"),
                closable: true,
                iconCls:'accountingbase goodsreceipt',
                modeName:'autogoodsreceipt',
                isFixedAsset:isFixedAsset,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7){
                            panel.GridPanel.setSize(panel.getInnerWidth()-35,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    if(Wtf.getCmp("pricewindow")!=undefined)
        Wtf.getCmp("pricewindow").on('update',function(){
            Wtf.getCmp(winid).Grid.loadPriceStore()
            },this);
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.lp.createpurchaseconinv"));
}
//################################### View Consignment Purchase return ####################################
  function callViewConsignmentGoodsReceipt(isEdit,rec,winid,isFixedAsset,isLeaseFixedAsset,isConsignment){
    isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
    isConsignment=(isConsignment)?isConsignment:false;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.viewsalesconinv)) {
        winid=(winid==null?'ConsignmentPInvoice':winid);

        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockTransactionPanel({
                id : winid,
                isEdit:isEdit,
                readOnly:true,
                isViewTemplate:true,
                viewGoodReceipt:true,
                isCustomer:false,
                record: rec,
                label:WtfGlobal.getLocaleText("acc.field.ConsignmentPurchaseInvoice"),
                isInvoice:true,
                doctype:1,
                moduleid: Wtf.Acc_Consignment_GoodsReceipt_ModuleId,
                border : false,
                heplmodeid: 2, //This is help mode id
                DOSettings:Wtf.account.companyAccountPref.DOSettings,
                GRSettings:Wtf.account.companyAccountPref.GRSettings,
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.ViewConsignmentPurchaseInvoice"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.field.ViewConsignmentPurchaseInvoice"),
                closable: true,
                isWithInvUpdate:Wtf.account.companyAccountPref.withinvupdate,
                iconCls:'accountingbase invoice',
                modeName:'autoinvoice',
                isFixedAsset:isFixedAsset,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?260:230);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                    panel.on("afterlayout", function(panel, lay){
                        if(Wtf.isIE7) {
                            panel.Grid.setSize(panel.getInnerWidth() - 18,200);
                        }
                    },this);
            }
            panel.doLayout();
            }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}
else
    WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.lp.viewsalesconinv"));
}
//################################### Consignment Purchase eturn ##########################################
function callConsignmentPurchaseReturn(isEdit,rec,winid,isLeaseFixedAsset,isConsignment){
    winid=(winid==null?'consignmentpurchasereturn':winid);
    var userpermission=isEdit?WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.editpurchaseconret):WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.createpurchaseconret);
    if(!userpermission){
        isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
        isConsignment = (isConsignment != null || isConsignment != undefined)?isConsignment:false;
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.ConsignmentStockSalesReturnPanel({
                id : winid,
                isEdit: isEdit,
                record: rec,
                isCustomer:false,
                isCustBill:false,
                label:WtfGlobal.getLocaleText("acc.Consignment.purchasereturn"),
                border : false,
                heplmodeid: 11,
                readOnly: false,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment,
                moduleid:Wtf.Acc_ConsignmentPurchaseReturn_ModuleId,
                //            layout: 'border',
                title:isEdit?WtfGlobal.getLocaleText("acc.Consignment.purchase.return.edit"):WtfGlobal.getLocaleText("acc.Consignment.purchasereturn"),
                tabTip:isEdit?WtfGlobal.getLocaleText("acc.Consignment.purchase.return.edit"):WtfGlobal.getLocaleText("acc.Consignment.purchasereturn"),
                closable: true,
                iconCls:'accountingbase deliveryorder',
                modeName:'autopr'
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);

        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.lp.createpurchaseconret"));
}
//############################### Consignment Purchase return report ###############################
function callConsignmentPurchaseReturnList(consolidateFlag,reportbtnshwFlag,isLeaseFixedAsset,titlelabel,isConsignment){
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    isLeaseFixedAsset = (isLeaseFixedAsset)?isLeaseFixedAsset:false;
    isConsignment = (isConsignment)?isConsignment:false;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentpurchase, Wtf.Perm.consignmentpurchase.viewpurchaseconret)){
        var id = 'purchaseReturnList';
        if(isLeaseFixedAsset){
            id = 'LeasepurchaseReturnList';
        }else if(isConsignment){
            id='ConsignmentpurchasereturnList';
        }
        id = consolidateFlag?id+'Merged':id;
        id = reportbtnshwFlag?id:id+'Entry';
        var panel = Wtf.getCmp(id);
        if(panel==null){
            panel = new Wtf.account.SalesReturnListPanel({
                id : id,
                border : false,
                consolidateFlag:consolidateFlag,
                isOrder:true,
                isCustomer:false,
                helpmodeid:53,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isConsignment:isConsignment,
                reportbtnshwFlag:reportbtnshwFlag,
                moduleid:Wtf.Acc_ConsignmentPurchaseReturn_ModuleId,
                title: (titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.Consignment.purchaseretturn.report"),//Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.soList.tabTitle"), Wtf.TAB_TITLE_LENGTH),
                tabTip:(titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.Consignment.purchaseretturn.report"),
                label:WtfGlobal.getLocaleText("acc.Consignment.purchasereturn"),  //'Sales Order',
                layout: 'fit',
                closable: true,
                iconCls:'accountingbase salesorderlist'
            });
            Wtf.getCmp('as').add(panel);
        }
        var channelName = Wtf.ChannelName.ConsignmentPurchaseReturnReport;
        
        panel.on('beforeclose', function(){
            beforeClose(channelName);
        },this);
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.viewpurchaseconret"));
}
function callPurchaseReqList(consolidateFlag,isEntry,searchStr, filterAppend,reportbtnshwFlag){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorpr, Wtf.Perm.vendorpr.viewpr)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        reportbtnshwFlag = reportbtnshwFlag!=undefined?reportbtnshwFlag:false;
        isEntry = isEntry!=undefined?isEntry:false;
        var panelID = !reportbtnshwFlag? "PurchaseRequisitionList":"PurchaseRequisitionReportList";
        panelID = consolidateFlag?panelID+'Merged':panelID;
        var panel = Wtf.getCmp(panelID);
        if(panel==null){
            panel = getPRTab(false, panelID, (isEntry)?WtfGlobal.getLocaleText("acc.preqList.tabTitle"):WtfGlobal.getLocaleText("acc.field.PurchaseReqRepTabTitle"), undefined, consolidateFlag, false,searchStr, filterAppend, reportbtnshwFlag);
            Wtf.getCmp('as').add(panel);
            panel.on('journalentry',callJournalEntryDetails);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.preqList.tabTitle"));
}

function callPendingPurchaseReqList(consolidateFlag){
    //    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewquotation)) {
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    var panelID = "PurchaseRequisitionList";
    panelID = consolidateFlag?panelID+'Merged':panelID;
    var panel = Wtf.getCmp(panelID);
    if(panel==null){
        panel = getPRTab(false, panelID, WtfGlobal.getLocaleText("acc.preqList.tabTitle"), undefined, consolidateFlag, false);
        Wtf.getCmp('as').add(panel);
        panel.on('journalentry',callJournalEntryDetails);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.preqList.tabTitle"));
}

function getPRTab(isWithOutInventory, tabId, tabTitle, extraFilters, consolidateFlag, pendingapproval,searchStr, filterAppend,reportbtnshwFlag,isDraft,isFixedAsset){
    var isForFixedAsset = (isFixedAsset == undefined || isFixedAsset=="" || isFixedAsset==null) ? false : true;
    var reportPanel = new Wtf.account.TransactionListPanel({
        id : tabId,
        moduleId: isForFixedAsset ? Wtf.Acc_FixedAssets_PurchaseRequisition_ModuleId : Wtf.Acc_Purchase_Requisition_ModuleId ,
        border : false,
        isOrder:true,
        consolidateFlag:consolidateFlag,
        reportbtnshwFlag:reportbtnshwFlag,
        isRequisition : true,
        isCustomer:false,
        isCustBill: isWithOutInventory,
        pendingapproval : pendingapproval,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip:tabTitle+" :<br>"+WtfGlobal.getLocaleText("acc.field.ViewcompletelistofPurchaseRequisitionsassociatedwithyourvendors"),
        extraFilters: extraFilters,
        label:isForFixedAsset ? WtfGlobal.getLocaleText("acc.field.assetPurchaseRequisition") : WtfGlobal.getLocaleText("acc.preqList.tabTitle"),
        helpmodeid:57,
        isDraft:isDraft,
        layout: 'fit',
        closable: true,
        iconCls:'accountingbase purchaseorderlist',
        searchJson: searchStr,
        filterConjuctionCrit:filterAppend,
        isFixedAsset : isForFixedAsset
    });
    return reportPanel;
}

function getReqQuoteTab(isWithOutInventory, tabId, tabTitle, extraFilters, consolidateFlag, pendingapproval,reportbtnshwFlag, params){
    if (params == undefined){
        params = {};
    }
    var searchStr=params.searchStr||"";
    var filterAppend=params.filterAppend ||"";
    
    var reportPanel = new Wtf.account.TransactionListPanel({
        id : tabId,
        moduleId:Wtf.Acc_RFQ_ModuleId,
        border : false,
        isOrder:false,
        consolidateFlag:consolidateFlag,
        reportbtnshwFlag:reportbtnshwFlag,
        isRFQ : true,
        isCustomer:false,
        isCustBill: isWithOutInventory,
        pendingapproval : pendingapproval,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip: tabTitle,
        extraFilters: extraFilters,
        label:WtfGlobal.getLocaleText("acc.rfqList.tabTitle"),
        helpmodeid:82,
        layout: 'fit',
        closable: true,
        iconCls:'accountingbase purchaseorderlist',
        searchJson: searchStr,
        filterConjuctionCrit:filterAppend
    });
    return reportPanel;
}

function callReqForQuotationList(consolidateFlag,PR_IDS,reportbtnshwFlag, params){
    if (params == undefined){
        params = {};
    }
    var searchStr=params.searchStr||"";
    var filterAppend=params.filterAppend ||"";
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    reportbtnshwFlag = reportbtnshwFlag!=undefined?reportbtnshwFlag:false;
    var panelID = reportbtnshwFlag? "RequestForQuotationReport":"RequestForQuotation";
    panelID = consolidateFlag?panelID+'Merged':panelID;
    var panel = Wtf.getCmp(panelID);
    if(panel==null){
        panel = getReqQuoteTab(false, panelID, (reportbtnshwFlag ? WtfGlobal.getLocaleText("acc.requestQuotationReportList.tabTitle"): WtfGlobal.getLocaleText("acc.requestQuotationList.tabTitle")), undefined, consolidateFlag, false,reportbtnshwFlag, params);
        panel.on("activate",function(){
            showAdvanceSearch(panel,searchStr, filterAppend);
        });
        Wtf.getCmp('as').add(panel);
        panel.on('journalentry',callJournalEntryDetails);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callQuotationList(consolidateFlag,reportbtnshwFlag,isLeaseFixedAsset,searchStr, filterAppend){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewquotation)||(!WtfGlobal.EnableDisable(Wtf.UPerm.leaseorder, Wtf.Perm.leaseorder.veiwlqt)&&isLeaseFixedAsset)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var panelID = "QuotationList";
        var tabTitle = (!reportbtnshwFlag)?WtfGlobal.getLocaleText("acc.customer.Quotationreport"):"Customer "+WtfGlobal.getLocaleText("acc.qnList.tabTitle");
        if(isLeaseFixedAsset){
            panelID = "LeaseQuotationList";
            tabTitle = WtfGlobal.getLocaleText("acc.lease.quotation.report"); // "Lease Quotation Report";
        }
        panelID = consolidateFlag?panelID+'Merged':panelID;
        panelID = reportbtnshwFlag?panelID:panelID+'Entry';
        var panel = Wtf.getCmp(panelID);
        reportbtnshwFlag=reportbtnshwFlag;
        if(panel==null){
            panel = getQouteTab(false, panelID, tabTitle, undefined, consolidateFlag, true,reportbtnshwFlag,isLeaseFixedAsset,undefined,searchStr, filterAppend);
            Wtf.getCmp('as').add(panel);
            panel.on('journalentry',callJournalEntryDetails);
        }
        var channelName="";
        if(isLeaseFixedAsset){
            channelName =Wtf.ChannelName.LeaseQuotationReport;
        } else {
            channelName =Wtf.ChannelName.SalesQuotationReport;
        }
        panel.on('beforeclose', function(){
            beforeClose(channelName);
        },this);
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.field.customerQuotationreport"));
}

function callVendorQuotationList(consolidateFlag,reportbtnshwFlag,searchStr, filterAppend){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.viewvendorquotation)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        reportbtnshwFlag = reportbtnshwFlag==undefined?true:reportbtnshwFlag;
        var panelID = "VendorQuotationList";
        panelID = consolidateFlag?panelID+'Merged':panelID;
        panelID = reportbtnshwFlag?panelID:panelID+'Entry';
        reportbtnshwFlag=reportbtnshwFlag;
        var panel = Wtf.getCmp(panelID);
        if(panel==null){
            panel = getQouteTab(false, panelID, "Vendor "+((!reportbtnshwFlag)?WtfGlobal.getLocaleText("acc.quote.quotation"):WtfGlobal.getLocaleText("acc.qnList.tabTitle")), undefined, consolidateFlag, false,!reportbtnshwFlag,undefined,undefined,searchStr, filterAppend);
            Wtf.getCmp('as').add(panel);
            panel.on('journalentry',callJournalEntryDetails);
        }
        var channelName =Wtf.ChannelName.PurchaseQuotationReport;
        panel.on('beforeclose', function(){
            beforeClose(channelName);
        },this);
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.field.vendQuoReport"));
}

function getQouteTab(isWithOutInventory, tabId, tabTitle, extraFilters, consolidateFlag, isCustomer,reportbtnshwFlag,isLeaseFixedAsset,pendingapproval,searchStr, filterAppend,isDraft){
    var label = isCustomer? WtfGlobal.getLocaleText("acc.agedPay.cus") : WtfGlobal.getLocaleText("acc.invoice.vendor");
    isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
    var reportPanel = new Wtf.account.TransactionListPanel({
        id : tabId,
        border : false,
        //        isOrder:true,
        isQuotation:true,
        isCustomer:isCustomer,
        consolidateFlag:consolidateFlag,
        pendingapproval : pendingapproval,
        isCustBill: isWithOutInventory,
        reportbtnshwFlag:reportbtnshwFlag,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip:(isCustomer)?tabTitle+":<br>"+WtfGlobal.getLocaleText("acc.qnList.CtabTT"):tabTitle+":<br>"+WtfGlobal.getLocaleText("acc.qnList.VtabTT"),
        extraFilters: extraFilters,
        label:isLeaseFixedAsset?WtfGlobal.getLocaleText("acc.field.leaseQuotation"):label +" "+ WtfGlobal.getLocaleText("acc.accPref.autoQN"),  //'Quotation',
        helpmodeid:35,
        isLeaseFixedAsset:isLeaseFixedAsset,
        layout: 'fit',
        closable: true,
        iconCls:'accountingbase salesorderlist',
        moduleId:(isCustomer)?(isLeaseFixedAsset?Wtf.Acc_Lease_Quotation:Wtf.Acc_Customer_Quotation_ModuleId):Wtf.Acc_Vendor_Quotation_ModuleId,
        searchJson: searchStr,
        filterConjuctionCrit:filterAppend,
        isDraft: isDraft
    });
    return reportPanel;
}

function callViewCustomerQuotationVersions(formrec,billid,tabid,isCustomer,isLeaseFixedAsset){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewquotation)) {
        var consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var panelID =tabid;
        var panel = Wtf.getCmp(panelID);
        var reportbtnshwFlag=true;
        if(panel==null){
            panel = callViewCustomerQuotationVersionsTab(formrec, billid,tabid, isCustomer,isLeaseFixedAsset);
            Wtf.getCmp('as').add(panel);
            panel.on('journalentry',callJournalEntryDetails);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.qnList.tabTitle"));
}

function callViewCustomerQuotationVersionsTab(formrec,billid,tabid,isCustomer,isLeaseFixedAsset){
    var reportPanel = new Wtf.account.VersionListPanel({
        id : tabid,
        border : false,
        isQuotation:true,
        isCustomer:isCustomer,
        pendingapproval : false,
        title: isCustomer?isLeaseFixedAsset?WtfGlobal.getLocaleText("erp.field.LeaseCustomerQuotationVersions"):WtfGlobal.getLocaleText("erp.field.CustomerQuotationVersions"):WtfGlobal.getLocaleText("erp.field.VendorQuotationVersions"),
        tabTip:isCustomer?isLeaseFixedAsset?WtfGlobal.getLocaleText("erp.field.ViewLeaseCustomerQuotationVersions"):WtfGlobal.getLocaleText("erp.field.ViewCustomerQuotationVersions"):WtfGlobal.getLocaleText("erp.field.ViewVendorQuotationVersions"),
        label:isCustomer?WtfGlobal.getLocaleText("acc.accPref.autoQN"):WtfGlobal.getLocaleText("acc.accPref.autoVQN"),
        isLeaseFixedAsset:isLeaseFixedAsset,
        layout: 'fit',
        versionid:billid,
        closable: true,
        iconCls:'accountingbase salesorderlist',
        moduleId:(isCustomer)?Wtf.Acc_Customer_Quotation_ModuleId:Wtf.Acc_Vendor_Quotation_ModuleId
    });
    return reportPanel;
}

function callSalesReceiptList(){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createcashsales)) {
        var panel = Wtf.getCmp("SalesReceiptList");
        if(panel==null){
            panel = new Wtf.account.TransactionListPanel({
                id : 'SalesReceiptList',
                border : false,
                isOrder:false,
                isCustomer:true,
                cash:true,
                label:WtfGlobal.getLocaleText("acc.field.SalesReceipt"),
                layout: 'fit',
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.srList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.srList.tabTitle"),  //'Sales Receipt Report',
                closable: true,
                iconCls:'accountingbase salesreceiptlist'
            });
            Wtf.getCmp('as').add(panel);
            panel.on('journalentry',callJournalEntryDetails);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.srList.tabTitle"));
}


function callAuditTrail(){
    var panel = Wtf.getCmp("auditTrail");
    if(panel==null){
        panel = new Wtf.common.WtfAuditTrail({
            layout : "fit",
            title:WtfGlobal.getLocaleText("acc.dashboard.auditTrail"),  //'Audit Trail',
            tabTip:WtfGlobal.getLocaleText("acc.dashboard.TT.auditTrail"),
            helpmodeid:30,
            border : false,
            id : "auditTrail",
            iconCls :getButtonIconCls(Wtf.etype.audittrail),
            closable: true
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}
function callAssemblyReport(isUnbuildAssembly){
    var id = isUnbuildAssembly ? "unBuildAssemblyreport"+this.id : "assemblyreport"+this.id;
    var panel = Wtf.getCmp(id);
    if(!panel){
        panel = new Wtf.common.AssemblyProductReport({
            layout : "fit",
            title:isUnbuildAssembly ? WtfGlobal.getLocaleText("acc.productList.unbuildAssemblyReport") : WtfGlobal.getLocaleText("acc.dashboard.assemblyreport"),  //'Unbuild Assembly Report',
            tabTip:isUnbuildAssembly ? WtfGlobal.getLocaleText("acc.dashboard.TT.unbuild.assemblyreport") : WtfGlobal.getLocaleText("acc.dashboard.TT.assemblyreport"),  //Click to open Unbuild Assembly Report
            helpmodeid:30,
            border : false,
            isUnbuildAssembly : isUnbuildAssembly,
            id : id,
            iconCls :getButtonIconCls(Wtf.etype.audittrail),
            closable: true
        });
        panel.on("closed",function(panel){
            Wtf.getCmp('as').remove(panel)
            },this);
        panel.on("activate",function(panel){
            panel.doLayout();
        },this);
        Wtf.getCmp('as').add(panel);
        panel.on('journalentry', callJournalEntryDetails);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callBOMWiseStockReport(){
    var id = "bomreportbtn"+this.id;
    var panel = Wtf.getCmp(id);
    if(!panel){
        panel = new Wtf.common.BOMStockReport({
            layout : "fit",
            title: WtfGlobal.getLocaleText("acc.productList.bomWiseStockReport"),  //'Unbuild Assembly Report',
            tabTip: WtfGlobal.getLocaleText("acc.productList.bomWiseStockReportTT"),  //Click to open Unbuild Assembly Report
            helpmodeid:30,
            border : false,
            id : id,
            iconCls :getButtonIconCls(Wtf.etype.audittrail),
            closable: true
        });
        panel.on("closed",function(panel){
            Wtf.getCmp('as').remove(panel)
            },this);
        panel.on("activate",function(panel){
            panel.doLayout();
        },this);
        Wtf.getCmp('as').add(panel);
//        panel.on('journalentry', callJournalEntryDetails);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callGIROFilesLog(){
    var panel=Wtf.getCmp('GIROLogLink');
    if(panel==null)
    {
        panel = new Wtf.common.WtfGIROFileGenerationLog({
            title:WtfGlobal.getLocaleText("acc.dashboard.girofilelog"),  //'GIRO File Generation Log',
            tooltip:WtfGlobal.getLocaleText("acc.dashboard.girofilelog"),
            tabTip:WtfGlobal.getLocaleText("acc.dashboard.girofilelog"),  //'GIRO File Generation Log.',
            closable:true,
            layout: "fit",
            border:false,
            iconCls: 'pwnd projectTabIcon',
            id:"GIROLogLink"
        });
        mainPanel.add(panel);
    }else {
        panel.dataStore.reload(); //Reload log if already opened
    }
    mainPanel.setActiveTab(panel);
    mainPanel.doLayout();
}

function callMasterConfiguration(datafilter){
    var panel = Wtf.getCmp("masterconfiguration");
    if(panel==null){
        panel = new Wtf.account.MasterConfigurator({
            layout : "fit",
            filterid:datafilter,
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.masterConfig.tabTitle"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.masterConfig.tabTitleTT"),  //'You can Add Master Items for various Master Groups from here.',
            helpmodeid:31,
            showMaster:true,
            border : false,
            id : "masterconfiguration",
            iconCls:'accountingbase masterconfiguration',
            closable: true
        });
    //        Wtf.getCmp('as').add(panel);
    }else{
        //When master configuration is opened through navigation panel - to handle this added this code 
    if (datafilter && datafilter != undefined && datafilter != ""){
                panel.filterid = datafilter;
                panel.masterSearch.setValue(datafilter);
                panel.masterStore.reload();
    }else{
                panel.filterid = "";
                panel.masterSearch.setValue("");
                panel.masterStore.clearFilter();
                panel.masterStore.reload();
    }
        
    }
    Wtf.getCmp('as').add(panel);
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();

    return panel ;
}
function callOnlyMasterConfiguration(datafilter){
    var panel = Wtf.getCmp("masterconfigurationonly");
    if(panel==null){
        panel = new Wtf.account.MasterConfigurator({
            layout : "fit",
            filterid:datafilter,
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.masterConfig.tabTitle"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.masterConfig.tabTitleTT"),  //'You can Add Master Items for various Master Groups from here.',
            helpmodeid:31,
            onlyMaster:true,
            border : false,
            id : "masterconfigurationonly",
            iconCls:'accountingbase masterconfiguration',
            closable: true
        });
    //        Wtf.getCmp('as').add(panel);
    }
    
    
    Wtf.getCmp('as').add(panel);
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();

    return panel ;
}

function addMasterItemWindow(id, isTransationFormEntry, parentid ,gstConfigType){    
    var panel = null;
    if(Wtf.getCmp("masterconfigurationonly")){
        Wtf.getCmp("masterconfigurationonly").destroy();
    }
    var outer=false;
    if(panel==null){
        outer=true;
        panel = new Wtf.account.MasterConfigurator({
            layout : "fit",
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.masterConfig.tabTitle"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.masterConfig.tabTitleTT"),   //'Master Configuration',
            border : false,
            id : "masterconfigurationonly",
            fieldid : id,
            parentid : parentid,
            isTransationFormEntry : isTransationFormEntry,
            gstConfigType : gstConfigType,
            closable: true
        });
    }
    panel.addMasterItemOuter(false,id,outer);
}
function callInventoryWindow(id,winid){
    var panel = Wtf.getCmp("inventorysetup");
    var outer=false;
    if(panel==null){
        outer=true;
        panel = new Wtf.account.inventorysetup({
            layout : "fit",
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.masterConfig.inventorysetup"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.masterConfig.inventorysetup"),   //'Master Configuration',
            border : false,
            id : "inventorysetup",
            closable: true
        });
    }
    panel.addMasterItemOuter(false,id,outer);
}

function callBusinessContactWindow(isEdit,rec, winid, isCustomer,enableCurrency,isCopy){
    if((((!WtfGlobal.EnableDisable(Wtf.UPerm.customer, Wtf.Perm.customer.create) &&!isEdit) ||(!WtfGlobal.EnableDisable(Wtf.UPerm.customer, Wtf.Perm.customer.edit) &&isEdit))&&isCustomer)||(( (!WtfGlobal.EnableDisable(Wtf.UPerm.vendor, Wtf.Perm.vendor.create) &&!isEdit)||(!WtfGlobal.EnableDisable(Wtf.UPerm.vendor, Wtf.Perm.vendor.edit) &&isEdit)) && !isCustomer)){
        
    var maintabid = isCustomer?"mainCustomerPanel":"mainVendorPanel";
    if( isEdit != undefined && isEdit){
         maintabid = "edit-"+maintabid;
    }else if(isCopy != undefined && isCopy){
         maintabid = "copy-"+maintabid;
    }
    var panel = Wtf.getCmp(maintabid);
        if(panel!=null && isEdit){
            Wtf.getCmp('as').remove(panel);
            panel = null;
        } 
        if(panel==null){
            panel = new Wtf.TabPanel({
                title: isCustomer ? (isEdit ? WtfGlobal.getLocaleText("acc.customerList.editCustomer")+" "+rec.data.name : isCopy ? WtfGlobal.getLocaleText("acc.field.CopyCustomer")+" "+rec.data.name : WtfGlobal.getLocaleText("acc.field.CreateCustomer")) : (isEdit ? WtfGlobal.getLocaleText("acc.vendorList.editvendor")+" "+rec.data.name : isCopy ? WtfGlobal.getLocaleText("acc.vendorList.copyvendor")+" "+rec.data.name : WtfGlobal.getLocaleText("acc.field.CreateVendor")),
                tabTip: isCustomer ? (isEdit ? WtfGlobal.getLocaleText("acc.field.EditCustomerwithpersonaldetailsandmultiplecontactdetails") : isCopy ? WtfGlobal.getLocaleText("acc.field.Copycustomerwithpersonaldetailsandmultiplecontactdetails") : WtfGlobal.getLocaleText("acc.field.Createcustomerwithpersonaldetailsandmultiplecontactdetails")) : (isEdit ? WtfGlobal.getLocaleText("acc.field.EditVendorwithpersonaldetailsandmultiplecontactdetails") : isCopy ? WtfGlobal.getLocaleText("acc.field.Copyvendorwithpersonaldetailsandmultiplecontactdetails") : WtfGlobal.getLocaleText("acc.field.Createvendorwithpersonaldetailsandmultiplecontactdetails")),
                id:maintabid,
                closable:true,
                isClosable:false,
                iconCls :getButtonIconCls(Wtf.etype.customer),
                buttonAlign: 'right',
                layoutOnTabChange:true
            });
            Wtf.getCmp('as').add(panel);
            panel.on('beforeclose', function (panel) {
                if (panel.isClosable !== true) {
                    Wtf.MessageBox.show({
                        title: WtfGlobal.getLocaleText("acc.common.warning"), //'Warning',
                        msg: WtfGlobal.getLocaleText("acc.msgbox.51"), //this.closeMsg,
                        width: 500,
                        buttons: Wtf.MessageBox.YESNO,
                        icon: Wtf.MessageBox.QUESTION,
                        fn: function (btn) {
                            if (btn == "yes") {
                                Wtf.getCmp('as').remove(panel);
                            }
                        },
                        scope: this
                    });

                } else {
                    Wtf.getCmp('as').remove(panel);
                }
                return false;
            }, this);
            
            panel.on('resize', function (panel) {
                panel.doLayout();
            }, this);

            callBussinessPersonWithPersonalDetail(isEdit, rec, null, isCustomer,enableCurrency,isCopy,maintabid);
            callBussinessPersonWithContactDetail(isEdit, rec, null, isCustomer,enableCurrency,isCopy,maintabid);
        }
        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
    }else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+(isCustomer?WtfGlobal.getLocaleText("acc.customerList.tabTitle"):WtfGlobal.getLocaleText("acc.vendorList.tabTitle")));
}

function callBussinessPersonWithPersonalDetail(isEdit, rec, winid, isCustomer,enableCurrency,isCopy,maintabid){
     var tabid = isCustomer?"personalDetailCustomerTab":"personalDetailVendorTab";
     maintabid = maintabid !=undefined ? maintabid : isCustomer?"mainCustomerPanel":"mainVendorPanel" ;
    
    if(isEdit != undefined && isEdit){
        tabid = "edit-"+tabid ;
    }else if( isCopy !=undefined && isCopy){
        tabid = "copy-"+tabid ;
    }
    
    var panel = Wtf.getCmp(tabid);
    if(panel==null){
        if(isEdit){
            panel = isCustomer ? "editcusomer"+winid :"editvendor"+winid;
        }
        panel = new Wtf.account.BusinessContactWindow({
            title:isCustomer?WtfGlobal.getLocaleText("acc.field.CustomerPersonalDetail"):WtfGlobal.getLocaleText("acc.field.VendorPersonalDetail"),
            tabTip: isCustomer ? (isEdit ? WtfGlobal.getLocaleText("acc.field.Editcustomerwithpersonaldetails") : isCopy ? WtfGlobal.getLocaleText("acc.field.Copycustomerwithpersonaldetails") : WtfGlobal.getLocaleText("acc.field.Createcustomerwithpersonaldetails")) : (isEdit ? WtfGlobal.getLocaleText("acc.field.Editvendorwithpersonaldetails") : isCopy ? WtfGlobal.getLocaleText("acc.field.Copyvendorwithpersonaldetails") : WtfGlobal.getLocaleText("acc.field.Createvendorwithpersonaldetails")),
            isEdit:isEdit,
            isCopy:isCopy,
            id:tabid,
            /*
             *  setting helpmodeid to 41 for Customer Personal Detail Window and
             *  42 for Vendor Personal Detail Window
             */
            helpmodeid:isCustomer ? 41 : 42,
            record:rec,
            isCustomer:isCustomer,
            moduleid:(isCustomer)?Wtf.Acc_Customer_ModuleId:Wtf.Acc_Vendor_ModuleId,
            modal: true,
            enableCurrency:enableCurrency,
            modeName:isCustomer?"autocustomerid":"autovendorid",
            iconCls :getButtonIconCls(Wtf.etype.customer),
            layout: 'border',
            buttonAlign: 'right'
        });
        if(isCustomer){
            Wtf.getCmp(maintabid).add(panel);
        }else{
            Wtf.getCmp(maintabid).add(panel);
    }
}
    if(isCustomer){
        Wtf.getCmp(maintabid).setActiveTab(panel);
        Wtf.getCmp(maintabid).doLayout();
    }else{
        Wtf.getCmp(maintabid).setActiveTab(panel);
        Wtf.getCmp(maintabid).doLayout();
    }
}

function callBussinessPersonWithContactDetail(isEdit, rec, winid, isCustomer,enableCurrency,isCopy,maintabid){
    var tabid= isCustomer?"contactDetailCustomerTab":"contactDetailVendorTab";
    maintabid = maintabid !=undefined ? maintabid : isCustomer?"mainCustomerPanel":"mainVendorPanel" ;
    
    if(isEdit != undefined && isEdit){
        tabid = "edit-"+tabid ;
    }else if(isCopy !=undefined && isCopy){
        tabid = "copy-"+tabid;
    }
//    var panel = isCustomer?Wtf.getCmp("contactDetailCustomerTab"):Wtf.getCmp("contactDetailVendorTab");
    var panel = Wtf.getCmp(tabid);
    if(panel==null){
        panel = new Wtf.account.CusVenAddressDetail({
            title:isCustomer?WtfGlobal.getLocaleText("acc.field.CustomerContactDetail"):WtfGlobal.getLocaleText("acc.field.VendorContactDetail"),
            tabTip: isCustomer ? (isEdit ? WtfGlobal.getLocaleText("acc.field.Editcustomerwithmultiplecontactdetails") : isCopy ? WtfGlobal.getLocaleText("acc.field.Copycustomerwithmultiplecontactdetails") : WtfGlobal.getLocaleText("acc.field.Createcustomerwithmultiplecontactdetails")) : (isEdit ? WtfGlobal.getLocaleText("acc.field.Editvendorwithmultiplecontactdetails") : isCopy ? WtfGlobal.getLocaleText("acc.field.Copyvendorwithmultiplecontactdetails") : WtfGlobal.getLocaleText("acc.field.Createvendorwithmultiplecontactdetails")),
            isEdit:isEdit,
            isCopy:isCopy,
            record:rec,
            id:tabid,
            /*
             *  setting helpmodeid to 40 for Customer Contact Detail Window and
             *  43 for Vendor Contact Detail Window
             */
            helpmodeid:isCustomer ? 40 : 43,
            isCustomer:isCustomer,
            moduleid:(isCustomer)?Wtf.Acc_Customer_ModuleId:Wtf.Acc_Vendor_ModuleId,
            enableCurrency:enableCurrency,
            iconCls :getButtonIconCls(Wtf.etype.customer),
            layout: 'fit',
            buttonAlign: 'right'
        });
        if(isCustomer){
            Wtf.getCmp(maintabid).add(panel);
        }else{
            Wtf.getCmp(maintabid).add(panel);
    }
}
    if(isCustomer){
        Wtf.getCmp(maintabid).doLayout();
    }else{
        Wtf.getCmp(maintabid).doLayout();
    }
}

function callViewBusinessContactWindow(rec,isCustomer,enableCurrency){
    var panel = isCustomer?Wtf.getCmp("viewMainCustomerPanel"):Wtf.getCmp("viewMainVendorPanel");
    if(panel!=null){
        Wtf.getCmp('as').remove(panel);
        panel = null;
    }
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:isCustomer?"View Customer" : "View Vendor",
            tabTip:isCustomer?"View Customer" : "View Vendor",
            id:isCustomer?'viewMainCustomerPanel':'viewMainVendorPanel',
            closable:true,
            iconCls :getButtonIconCls(Wtf.etype.customer),
            buttonAlign: 'right',
            layoutOnTabChange:true
        });
        Wtf.getCmp('as').add(panel);
        callViewBussinessPersonWithPersonalDetail(rec,isCustomer,enableCurrency);
        callViewBussinessPersonWithContactDetail( rec,isCustomer,enableCurrency);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callViewBussinessPersonWithPersonalDetail(rec, isCustomer,enableCurrency){
    var panel = isCustomer?Wtf.getCmp("viewPersonalDetailCustomerTab"):Wtf.getCmp("viewPersonalDetailVendorTab");
    if(panel==null){
        panel = new Wtf.account.BusinessContactWindow({
            title:"View Personal Details",
            tabTip:isCustomer?"View Customer Personal Details":"View Vendor Personal Details",
            isEdit:true,
            readOnly:true,
            id:isCustomer?'viewPersonalDetailCustomerTab':'viewPersonalDetailVendorTab',
            record:rec,
            isCustomer:isCustomer,
            moduleid:(isCustomer)?Wtf.Acc_Customer_ModuleId:Wtf.Acc_Vendor_ModuleId,
            modal: true,
            enableCurrency:enableCurrency,
            modeName:isCustomer?"autocustomerid":"autovendorid",
            iconCls :getButtonIconCls(Wtf.etype.customer),
            layout: 'border',
            buttonAlign: 'right'
        });
        if(isCustomer){
            Wtf.getCmp('viewMainCustomerPanel').add(panel);
        }else{
            Wtf.getCmp('viewMainVendorPanel').add(panel);
        }
    }
    if(isCustomer){
        Wtf.getCmp('viewMainCustomerPanel').setActiveTab(panel);
        Wtf.getCmp('viewMainCustomerPanel').doLayout();
    }else{
        Wtf.getCmp('viewMainVendorPanel').setActiveTab(panel);
        Wtf.getCmp('viewMainVendorPanel').doLayout();
    }
}

function callViewBussinessPersonWithContactDetail(rec, isCustomer,enableCurrency){
    var panel = isCustomer?Wtf.getCmp("viewContactDetailCustomerTab"):Wtf.getCmp("viewContactDetailVendorTab");
    if(panel==null){
        panel = new Wtf.account.CusVenAddressDetail({
            title:"View Contact Details",
            tabTip:isCustomer?"View Customer Contact Details":"View Vendor Contact Details",
            isEdit:true,
            readOnly:true,
            record:rec,
            id:isCustomer?'viewContactDetailCustomerTab':'viewContactDetailVendorTab',
            isCustomer:isCustomer,
            moduleid:(isCustomer)?Wtf.Acc_Customer_ModuleId:Wtf.Acc_Vendor_ModuleId,
            enableCurrency:enableCurrency,
            iconCls :getButtonIconCls(Wtf.etype.customer),
            layout: 'fit',
            buttonAlign: 'right'
        });
        if(isCustomer){
            Wtf.getCmp('viewMainCustomerPanel').add(panel);
        }else{
            Wtf.getCmp('viewMainVendorPanel').add(panel);
        }
    }
    if(isCustomer){
        Wtf.getCmp('viewMainCustomerPanel').doLayout();
    }else{
        Wtf.getCmp('viewMainVendorPanel').doLayout();
    }
}

function callBankReconciliationReport(winid,accid){
    var panel= Wtf.getCmp('ReconciliationReport'+accid);
    if(panel==null){
        panel=new Wtf.account.BankReconciliationReport({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.bankReconcile.tab"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.bankReconcile.tab"),  //'Reconciliation Report',
            id:'ReconciliationReport'+accid,
            accid:accid,
            layout:'fit',
            closable:true,
            iconCls:'accountingbase pricelistreport',
            border:false
        });
        Wtf.getCmp('as').add(panel);
        panel.on('journalentry',callJournalEntryDetails);
    }
    else
        panel.loadStore(accid)
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callBankReconciliationHistoryReport(winid,accid,stdate,enddate){
    var panel= Wtf.getCmp('ReconciliationHistoryReport'+accid);
    if(panel==null){
        panel=new Wtf.account.BankReconciliationHistoryReport({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.bankReconcileHistory.tab"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.bankReconcileHistory.tab"),  //'Reconciliation Report',
            id:'ReconciliationHistoryReport'+accid,
            accid:accid,
            stdate:stdate,
            enddate:enddate,
            layout:'fit',
            closable:true,
            iconCls:'accountingbase pricelistreport',
            border:false
        });
        Wtf.getCmp('as').add(panel);
        panel.on('journalentry',callJournalEntryDetails);
    }
    else
        panel.loadStore(accid)
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callBankReconciliationHistoryDetails(winid,accid,stdate,enddate){
    var panel= Wtf.getCmp('ReconciliationHistorySnapshot'+accid);
    if(panel==null){
        panel=new Wtf.account.BankReconciliationHistoryDetails({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.bankReconcileHistory.snapshot"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.bankReconcileHistory.snapshot"),  //'Reconciliation History Details Report',
            id:'ReconciliationHistorySnapshot'+accid,
            accid:accid,
            stdate:stdate,
            enddate:enddate,
            layout:'fit',
            closable:true,
            iconCls:'accountingbase pricelistreport',
            border:false
        });
        Wtf.getCmp('as').add(panel);
        panel.on('journalentry',callJournalEntryDetails);
    }
    else
        panel.loadStore(accid)
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callImportBankReconciliationReport(accid, startdate, enddate, openingBalance, res, isBankImport){ //Import BR Tab.ERP-41871
    var panel= Wtf.getCmp('ImportBankReconciliationReport');
    if(panel==null){
        panel=new Wtf.account.ImportBankReconciliation({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.bankReconcile.import"),Wtf.TAB_TITLE_LENGTH),
            tabTip:"Import Bank Reconciliation",  
            id:'ImportBankReconciliationReport',
            accid:accid,
            startdate:startdate,
            enddate:enddate,
            openingBalance:openingBalance,
            res:res,
            layout:'fit',
            closable:true,
            isBankImport:isBankImport,
            iconCls:'accountingbase pricelistreport',
            border:false
        });
        Wtf.getCmp('as').add(panel);
        panel.on('journalentry',callJournalEntryDetails);
    }
    else{
        panel.updateData(accid, startdate, enddate, openingBalance, res); //if tab is already exist then update the data.
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callGSTR2MatchAndReconcile(){ //Import BR Tab.
    var panel = Wtf.getCmp('isGSTR2MatchAndReconcile');
    if (panel == null){
        panel = new Wtf.account.GSTR2MatchAndReconcile({
            title:"GSTR2-Match and Reconcile",
            tabTip:"GSTR2-Match and Reconcile",
            id:"isGSTR2MatchAndReconcile",
            isGSTR2MatchAndReconcile : true,
            layout:'fit',
            closable:true,
            iconCls:'accountingbase pricelistreport',
            border:false
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callSelectTransactionTypeWindow(winid){  //This window is used to select the payment type. i.e. Payment/Receipt
    winid=((winid==null || winid==undefined)?"selectTransactionTypeWindow":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.SelectTransactionTypeWindow({
            id:winid,
            closable: false,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 450,
            height: 250,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}

function callReconciliationWindow(winid,reconRec){
    reconRec=(reconRec==undefined?"":reconRec);
    winid=(winid==null?"reconciliationwin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.ReconciliationWindow({
            id:winid,
            closable: false,
            reconRec:reconRec,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: Wtf.account.companyAccountPref.columnPref.activateBankReconcilitaionDraft ? 800 : 400,
            height: Wtf.account.companyAccountPref.columnPref.activateBankReconcilitaionDraft ? 350 : 300 ,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}

function callEmailWin(winid,rec,label,mode,isCustomer,isinvoice,isQuotation,isCash, isOrder, isDoOrGr,isRFQ,isSalesReturn, isReceipt,isConsignment,isFixedAsset,isPurchaseRequisition,isSecurityGate){// isDoOrGr = isDeliveryOrderOrGoodsReceipt
    rec=(rec==undefined?"":rec);
    winid=(winid==null?"editwin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        //        new Wtf.MailWin({
        new Wtf.account.MailWindow({
            id:winid,
            closable: true,
            rec:rec,
            isRFQ : isRFQ,
            isPurchaseRequisition : isPurchaseRequisition,
            isQuotation:isQuotation,
            isinvoice:isinvoice,
            isCash:isCash,
            isOrder:isOrder,
            isDoOrGr:isDoOrGr,
            isSalesReturn:isSalesReturn,
            isCustomer:isCustomer,
            isSecurityGate:isSecurityGate,
            isReceipt:isReceipt,
            isConsignment:isConsignment,
            isFixedAsset:isFixedAsset,
            mode:mode,
            bodyStyle : 'background-color:#f1f1f1',
            label:label,
            modal: true,
            autoScroll:true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 700,
            height: (Wtf.isIE?595:557),
            resizable: false,
            //            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}
function callEmailForMultipleRecords(winid,recArr,label,mode,isCustomer, configstr, fileName, fileType, get, gridConfig, deleted, nondeleted,filterParams,moduleid,compStore){
    winid=(winid==null?"editwin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        //        new Wtf.MailWin({
        panel = new Wtf.account.MultipleRecordsMailWindow({
            id:winid,
            closable: true,
            recArr:recArr,
            isCustomer:isCustomer,
            mode:mode,
            fileName:fileName,
            fileType:fileType,
            get:get,
            bodyStyle : 'background-color:#f1f1f1',
            label:label,
            moduleid:moduleid,
            configstr:configstr,
            nondeleted:nondeleted,
            deleted:deleted,
            gridConfig:gridConfig,
            modal: true,
            autoScroll:true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 700,
            height: (Wtf.isIE?595:557),
            resizable: false,
            //            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body,
            filterParams:filterParams
           
        })
                panel.show();
    panel.on("loadReportView", function(){
        if(compStore){
            compStore.reload();
        }
    });    
        
    }       
}
function callTaxEmailWin(winid,rec){
    rec=(rec==undefined?"":rec);
    winid=(winid==null?"editwin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        //        new Wtf.MailWin({
        new Wtf.account.MailWindow({
            id:winid,
            closable: true,
            rec:rec,
            tax1099:true,
            label:WtfGlobal.getLocaleText("acc.field.vendorform"),
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 700,
            height: 557,
            bodyStyle : 'background-color:#f1f1f1',
            resizable: false,
            //            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}


function callReconciliationLedger(reconRec,isConcileReport){

    var isConcileReport = isConcileReport!=undefined?isConcileReport:false;
    var panel = isConcileReport?Wtf.getCmp("reconciliationledgerReport"):Wtf.getCmp("reconciliationledger");
    if(panel==null){
        panel = new Wtf.account.ReconciliationDetails({
            id :isConcileReport? 'reconciliationledgerReport':'reconciliationledger',
            border : false,
            reconRec:reconRec,
            layout: 'fit',
            isConcileReport:isConcileReport,
            accountID:reconRec.accountid,
            reconcileAmount:reconRec.reconcileAmount,
            lastReconciledDate:reconRec.lastReconciledDate,
            lastReconciledAmount:reconRec.lastReconciledAmount,
            tabTip:isConcileReport?WtfGlobal.getLocaleText("acc.bankReconcile.viewPrevious"):WtfGlobal.getLocaleText("acc.dashboard.TT.bankReconciliation"),
            title:isConcileReport?WtfGlobal.getLocaleText("acc.bankReconcile.viewPrevious"):WtfGlobal.getLocaleText("acc.dashboard.bankReconciliation"),  //'Bank Reconciliation',
            iconCls: 'accountingbase ledger',
            closable: true
        });
        Wtf.getCmp('as').add(panel);
        panel.on('journalentry',callJournalEntryDetails);
    }
    else{
        panel.updateData(reconRec.accountid,reconRec.startdate,reconRec.statementdate,reconRec.endingbalance,reconRec.reconcileAmount,reconRec);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callPriceReport() {
    var panel = Wtf.getCmp('pricereport');
    if (panel == null) {
        panel = new Wtf.account.PriceReport({
            title: Wtf.util.Format.ellipsis((WtfGlobal.getLocaleText("acc.productList.pricetab")), Wtf.TAB_TITLE_LENGTH),
            tabTip: WtfGlobal.getLocaleText("acc.productList.pricetab"),
            id: 'pricereport',
            layout: 'fit',
            closable: true,
            iconCls: 'accountingbase pricelistreport',
            border: false
        });
        Wtf.getCmp('as').add(panel);
    }

    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callCustomFieldHistorReportForProduct(productid,product){
    var panel= Wtf.getCmp('customFieldHistory'+product);
    if(panel==null){
        panel=new Wtf.account.customFieldHistoryReportForProduct({
            title:Wtf.util.Format.ellipsis((WtfGlobal.getLocaleText("acc.field.CustomFieldsFor")+' '+product),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.field.CustomFieldHistoryof")+product,
            id:'customFieldHistory'+product,
            productId:productid,
            productName:product,
            layout:'fit',
            closable:true,
            iconCls:'accountingbase pricelistreport',
            border:false
        });
        Wtf.getCmp('as').add(panel);
    }
    //    panel.on("activate",function(){
    //        panel.Store.reload();
    //    },this);

    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callPriceReportCustVen(label) {
    var panel = Wtf.getCmp(label);
    if (panel == null) {
        panel = new Wtf.account.PriceReportCustVen({
            title: Wtf.util.Format.ellipsis((label + " " + WtfGlobal.getLocaleText("acc.productList.pricetab")), Wtf.TAB_TITLE_LENGTH),
            tabTip: label + " " + WtfGlobal.getLocaleText("acc.productList.pricetab"),
            id: label,
            isCust: (label == WtfGlobal.getLocaleText("acc.agedPay.cus")) ? true : false,
            layout: 'fit',
            closable: true,
            iconCls: 'accountingbase pricelistreport',
            border: false
        });
        Wtf.getCmp('as').add(panel);
    }

    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callPricelistWindow(rec,winid, carryIn,applyDate){
    winid=(winid==null?"pricewindow":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.PricelistWindow({
            title: rec.data.productname,
            id: winid,
            record: rec,
            carryIn:carryIn,
            applyDate:applyDate,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 450,
            autoScroll:true,
            height: 325,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
        this.loadMask1 = new Wtf.LoadMask(winid, {
            msg: WtfGlobal.getLocaleText("acc.msgbox.50"),
            msgCls: "x-mask-loading acc-pricelist-mask"
        });
        this.loadMask1.show();
        Wtf.getCmp(winid).on("loadingcomplete",function(){
            this.loadMask1.hide()
            },this);
    }
}

function callCustomFieldSetHistoryWindow(rec,winid){
    winid=(winid==null?"customfieldsethistorywindow":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.CustomFieldHistoryWindow({
            title: rec.data.productname,
            id: winid,
            record: rec,
            //            carryIn:carryIn,
            //            applyDate:applyDate,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 450,
            autoScroll:true,
            height: 325,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    //        this.loadMask1 = new Wtf.LoadMask(winid, {msg: WtfGlobal.getLocaleText("acc.msgbox.50"), msgCls: "x-mask-loading acc-pricelist-mask"});
    //        this.loadMask1.show();
    //        Wtf.getCmp(winid).on("loadingcomplete",function(){this.loadMask1.hide()},this);
    }
}

//function callReceiptWindow(winid,isReceipt,personwin,isCustBill,parentid){
//    winid=(winid==null?"recwindow":winid);
//    var panel = Wtf.getCmp(winid);
//    if(!panel){
//        new Wtf.account.ReceiptWindow({
//            title: isReceipt?WtfGlobal.getLocaleText("acc.mp.rtype"):WtfGlobal.getLocaleText("acc.mp.prtype"),  //"Receipt Type",
//            id: winid,
//            personwin:personwin,
//            isCustBill:isCustBill,
//            closable: false,
//            parentId:parentid,
//            isReceipt:isReceipt,
//            modal: true,
//            iconCls :getButtonIconCls(Wtf.etype.deskera),
//            width: 450,
//            autoScroll:true,
//            height: 350,
//            resizable: false,
//            layout: 'border',
//            buttonAlign: 'right',
//            renderTo: document.body
//        }).show();
//    }
//}
//
//function callAccPrefWindow(winid){
//    winid=(winid==null?"accprefwindow":winid);
//    var panel = Wtf.getCmp(winid);
//    if(!panel){
//        new Wtf.account.ReceiptWindow({
//            title: WtfGlobal.getLocaleText("acc.field.AccountingType"),
//            id: winid,
//            isAccPref:true,
//            closable: false,
//            modal: true,
//            iconCls :getButtonIconCls(Wtf.etype.deskera),
//            width: 450,
//            height: 250,
//            resizable: false,
//            layout: 'border',
//            buttonAlign: 'right',
//            renderTo: document.body
//        }).show();
//    }
//}
//function callAccountTypeWindow(winid,isReceipt,personwin){
//    winid=(winid==null?"perwindow":winid);
//    var panel = Wtf.getCmp(winid);
//    if(!panel){
//        new Wtf.account.ReceiptWindow({
//            title: WtfGlobal.getLocaleText("acc.setupWizard.accType"),
//            id: winid,
//            personwin:personwin,
//            closable: true,
//            isReceipt:isReceipt,
//            modal: true,
//            iconCls :getButtonIconCls(Wtf.etype.deskera),
//            width: 450,
//            autoScroll:true,
//            height: 250,
//            resizable: false,
//            layout: 'border',
//            buttonAlign: 'right',
//            renderTo: document.body
//        }).show();
//    }
//}


function callFixedAssetOpeningWindow(rec){
    var FAOpeningWindow = new Wtf.account.FAOpeningWindow({
        title:WtfGlobal.getLocaleText("acc.dashboard.fixedAssetDepreciation"),
        layout:'border',
        id:'FAOpeningWindowId',
        assetRec:rec,
        resizable:false,
        iconCls :getButtonIconCls(Wtf.etype.deskera),
        modal:true,
        height:500,
        width:700
    });
    FAOpeningWindow.show();
}

function callTaxAdjustmentWindow(isCustomer){

    var title = (isCustomer)?"Output Tax Adjustment":"Input Tax Adjustment";

    var taxAdjswin = new Wtf.account.TaxAdjustmentGrid({
        title:title,
        layout:'border',
        id:'adjs123',
        isCustomer:isCustomer,
        resizable:false,
        iconCls :getButtonIconCls(Wtf.etype.deskera),
        modal:true,
        height:500,
        width:700
    });
    taxAdjswin.show();
}

function callAssetMaintenanceWorkOrderForm(rec){
    var workOrderForm = new Wtf.account.AssetMaintenanceWorkOrder({
        title:'Work Order',
        layout:'border',
        id:'workOrderFormId',
        resizable:false,
        iconCls :getButtonIconCls(Wtf.etype.deskera),
        modal:true,
        scheduleEventRec:rec,
        height:500,
        width:1000
    });
    workOrderForm.show();
}

function callFixedAssetGrid(winid,entry,searchStr,filterAppend){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fixedassetnew, Wtf.Perm.fixedassetnew.viewfa)) {
        var cmpId = (winid)?winid:(entry)?'assetGroupTab':'assetGroupReportTab'
        var panel = Wtf.getCmp(cmpId);
        if(panel == null){
            panel=new Wtf.account.FixedAssetGroup({
                id:cmpId,
                isEntry:entry,
                title:(entry)?WtfGlobal.getLocaleText("erp.FixedAssetGroups"):WtfGlobal.getLocaleText("erp.FixedAssetGroupsreport"),
                tabTip:(entry)?WtfGlobal.getLocaleText("erp.FixedAssetGroups"):WtfGlobal.getLocaleText("erp.FixedAssetGroupsreport"),
                layout:'fit',
                border : false,
                closable:true,
                iconCls:getButtonIconCls(Wtf.etype.product),
                moduleid:Wtf.Acc_FixedAssets_AssetsGroups_ModuleId
            });

            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel, searchStr, filterAppend);
    }else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("erp.FixedAssetGroups"));
}

function callFixedAssetDepreciation(rec,winid){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fixedassetnew, Wtf.Perm.fixedassetnew.genfadep)) {
        var panel = Wtf.getCmp("Depreciation");
        if(panel == null){
            panel=new Wtf.account.FixedAssetDepreciation({
                title:WtfGlobal.getLocaleText("acc.het.3"),
                tabTip:WtfGlobal.getLocaleText("acc.fixedAssetList.postDep"),
                layout:'fit',
                id:"Depreciation",
                border : false,
                closable:true,
                iconCls:getButtonIconCls(Wtf.etype.product)
            });

            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.permission.generating")+" "+WtfGlobal.getLocaleText("acc.fixedAssetList.faDepreciation"));
}

function callFixedAssetDepreciationUnpost(assetdetailIds,fromMonth,toMonth,years){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fixedassetnew, Wtf.Perm.fixedassetnew.unpostdep)) {
        var panel = Wtf.getCmp("DepreciationUnpost");
        if(panel == null){
            panel=new Wtf.account.FixedAssetDepreciationUnpost({
                title:WtfGlobal.getLocaleText("acc.fixedAssetList.UnpostDep"),
                tabTip:WtfGlobal.getLocaleText("acc.fixedAssetList.UnpostDep"),
                layout:'fit',
                id:"DepreciationUnpost",
                border : false,
                assetdetailIds:assetdetailIds,
                fromMonth:fromMonth,
                toMonth:toMonth,
                years:years,
                closable:true,
                iconCls:getButtonIconCls(Wtf.etype.product)
            });

            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }else{
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.unpostdep"));
    }
}

function callFixedAssetDetailsGrid(winid,entry,searchStr,filterAppend,isAllAssets,isDisposedAssets){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fixedassetnew, Wtf.Perm.fixedassetnew.viewareport)) {
        callFixedAssetDetailsReportTab(winid,entry,searchStr,filterAppend,isAllAssets,isDisposedAssets);//Create main tab
    }else{
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("erp.FixedAssetGroups"));
    }
}

function callFixedAssetDetailsReportTab(winid,entry,searchStr,filterAppend,isAllAssets,isDisposedAssets){
    var panel = Wtf.getCmp("fixedAssetDetailsReportTab");
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:(entry)? WtfGlobal.getLocaleText("acc.fixed.asset.details") : WtfGlobal.getLocaleText("acc.assets.AssetDetailsReport"),
            tabTip:(entry)? WtfGlobal.getLocaleText("acc.fixed.asset.details") : WtfGlobal.getLocaleText("acc.assets.AssetDetailsReport"),
            id: 'fixedAssetDetailsReportTab',
            border: false,
            closable:true,
            iconCls:getButtonIconCls(Wtf.etype.product),
            activeTab:0
        });
        Wtf.getCmp('as').add(panel);
        callAllAssetsTab(winid,entry);
        if(!entry){
            callDisposedAssetsTab(entry);
        }
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    
    if(isAllAssets){
        showAdvanceSearch(Wtf.getCmp('assetAssetDetailsReportTab'), searchStr, filterAppend);
    }else if(isDisposedAssets){
        Wtf.getCmp('fixedAssetDetailsReportTab').setActiveTab(Wtf.getCmp('disposedassetspanel'));
        showAdvanceSearch(Wtf.getCmp('disposedassetspanel'), searchStr, filterAppend);
    }
}

function callAllAssetsTab(winid,entry){
    var cmpId = ((winid)?winid:(entry)?'assetAssetDetailsTab':'assetAssetDetailsReportTab');
    var panel = Wtf.getCmp(cmpId);
    if(panel==null){
        panel=new Wtf.account.FixedAssetReport({
            title: WtfGlobal.getLocaleText("acc.fixed.asset.AllAssets"),
            tabTip: WtfGlobal.getLocaleText("acc.fixed.asset.AllAssets"),
            id:cmpId,
            isEntry:entry,
            layout:'fit',
            border : false,
            iconCls:getButtonIconCls(Wtf.etype.product),
            isFixedAssetDetailReport:true,
            moduleid: Wtf.Acc_FixedAssets_Details_ModuleId
        });
        Wtf.getCmp('fixedAssetDetailsReportTab').add(panel);
    }
    Wtf.getCmp('fixedAssetDetailsReportTab').setActiveTab(panel);
    Wtf.getCmp('fixedAssetDetailsReportTab').doLayout();
}

function callDisposedAssetsTab(entry){
    var panel=Wtf.getCmp('disposedassetspanel');
    if(panel==null){
        panel=new Wtf.account.FixedAssetReport({
            title: WtfGlobal.getLocaleText("acc.fixed.asset.DisposedAssets"),
            tabTip: WtfGlobal.getLocaleText("acc.fixed.asset.DisposedAssets"),
            id:'disposedassetspanel',
            isEntry:entry,
            layout:'fit',
            border : false,
            iconCls:getButtonIconCls(Wtf.etype.product),
            isDisposedAssetReport:true,
            moduleid: Wtf.Acc_FixedAssets_Details_ModuleId
        });
        Wtf.getCmp('fixedAssetDetailsReportTab').add(panel);
    }
    Wtf.getCmp('fixedAssetDetailsReportTab').doLayout();
}

function callFixedAssetDepreciationDetailsGrid(searchStr,filterAppend){
    var cmpId = 'fixedAssetDepreciationDetailsReportTab';
    var panel = Wtf.getCmp(cmpId);
    if(panel == null){
        panel=new Wtf.account.FixedAssetDepreciationDetailsGrid({
            title:  WtfGlobal.getLocaleText("acc.field.FixedAssetDepreciationDetailsReport"),
            tabTip: WtfGlobal.getLocaleText("acc.field.FixedAssetDepreciationDetailsReport"),
            id:cmpId,
            layout:'fit',
            border : false,
            closable:true,
            iconCls:getButtonIconCls(Wtf.etype.product),
            moduleid:Wtf.Acc_FixedAssets_Details_ModuleId
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    showAdvanceSearch(panel, searchStr, filterAppend);
}


function callFixedAssetSummeryReport(searchStr, filterAppend){
        var panel = Wtf.getCmp("mainassetsummeryreport");
        if (panel == null) {
            panel = new Wtf.TabPanel({
                title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText('acc.field.FixedAssetSummeryReport'), Wtf.TAB_TITLE_LENGTH),
                tabTip: WtfGlobal.getLocaleText('acc.field.FixedAssetSummeryReport'),
                id: 'mainassetsummeryreport',
                border: false,
                iconCls: 'machineicon',
                closable: true
            });
            Wtf.getCmp('as').add(panel);
           callAssetSummeryReportDetails(searchStr, filterAppend);
        }

        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
}

function callAssetSummeryReportDetails(searchStr, filterAppend) {
    var reportPanel = Wtf.getCmp('assetsummeryreportlist');
    if (reportPanel == null) {
         reportPanel = new Wtf.account.AssetSummeryReport({
            id: 'assetsummeryreportlist',
            border: false,
            title: WtfGlobal.getLocaleText('acc.field.FixedAssetSummeryReport'),
            tabTip: WtfGlobal.getLocaleText('acc.field.FixedAssetSummeryReport'),
            layout: 'fit',
            moduleid: Wtf.Acc_FixedAssets_Details_ModuleId,
            label: WtfGlobal.getLocaleText('acc.field.FixedAssetSummeryReport'),
            iconCls: 'machineicon'

        });
        Wtf.getCmp('mainassetsummeryreport').add(reportPanel);
    }

    Wtf.getCmp('mainassetsummeryreport').setActiveTab(reportPanel);
    Wtf.getCmp('mainassetsummeryreport').doLayout();
    showAdvanceSearch(reportPanel, searchStr, filterAppend);
}


function callFixedAssetDetailsGridForMaintenanceScheduler(winid,entry,title,tabtip,isMaintenanceScheduler,isCreateSchedule, isUpdateSchedules){
    var cmpId = ((winid)?winid:'assetAssetDetailsTabForMaintenance');
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fixedassetnew, Wtf.Perm.fixedassetnew.viewamaint)||(!WtfGlobal.EnableDisable(Wtf.UPerm.fixedassetnew, Wtf.Perm.fixedassetnew.updateamaintshedule)&&isUpdateSchedules)) {
    var panel = Wtf.getCmp(cmpId);
    if(panel == null){
        panel=new Wtf.account.FixedAssetReport({
            title:title,
            tabTip:tabtip,
            id:cmpId,
            isEntry:entry,
            isMaintenanceScheduler:isMaintenanceScheduler,
            isCreateSchedule:isCreateSchedule,
            isUpdateSchedules:isUpdateSchedules,
            layout:'fit',
            border : false,
            closable:true,
            iconCls:getButtonIconCls(Wtf.etype.product)
        });
        Wtf.getCmp('as').add(panel);
    }

    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    }
    else{
      WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.create.maintenance.schedulerbutt"));
    }
}

function createFixedAsset(isEdit, rec, winid){
    winid=(winid==null?"productassetwindow":winid);
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.ProductForm({
            title:isEdit?'Edit '+rec.data.productname:'Asset',
            tabTip:isEdit?'Edit '+rec.data.productname:'Create New Asset from here',
            id:winid,
            isEdit:isEdit,
            isFixedAsset:true,
            moduleid:Wtf.Acc_FixedAssets_AssetsGroups_ModuleId,
            isClone:false,
            record: rec,
            iconCls :getButtonIconCls(Wtf.etype.product),
            layout:'fit',
            closable:true,
            border:false,
            modeName:'autoassetgroup'
        });

        panel.on("update",function(panel){
            Wtf.getCmp('as').remove(panel);
            if(Wtf.getCmp('assetGroupTab')){
                Wtf.getCmp('assetGroupTab').updateGrid();
            }
            //            Wtf.productStore.reload();
            //            Wtf.productStoreSales.reload();
            Wtf.dirtyStore.product = true;
        },this);

        panel.on("activate",function(panel){
            panel.doLayout();
        },this);
        Wtf.getCmp('as').add(panel);
    }

    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callProductWindow(isEdit, rec, winid, productname, isClone, batchdetails,isUsedInTransaction){
    winid=(winid==null?"productwindow":winid);
    productname=(productname==null?WtfGlobal.getLocaleText("acc.dashboard.CreateProduct"):productname);  //Tab Title : Create Product
    isClone=((isClone==null||isClone==undefined)?false:isClone);
    productname=(isClone?WtfGlobal.getLocaleText("acc.product.clone")+" "+productname:productname);
    if(!isClone && isEdit){
        productname = WtfGlobal.getLocaleText("acc.common.edit")+" "+productname;
    }
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        //panel = new Wtf.account.ProductForm({
        panel = new Wtf.account.ProductFormGroup({          //INV_ACC_MERGE
            title:productname,
            tabTip:productname,
            id:winid,
            //scope:this,
            isEdit:isEdit,
            moduleid:Wtf.Acc_Product_Master_ModuleId,
            isClone:isClone,
            record: rec,
            iconCls :getButtonIconCls(Wtf.etype.product),
            layout:'border',
            closable:true,
            border:false,
            modeName:'autoproductid',
            batchdetails:batchdetails,
            isUsedInTransaction:(isUsedInTransaction!=undefined && isUsedInTransaction)?isUsedInTransaction:false,
            allowAssemblyProductToEdit: false  /*SDP-10709 */
        });
        panel.on("update",function(panel){
            Wtf.getCmp('as').remove(panel);
             if(Wtf.account.companyAccountPref.productOptimizedFlag == Wtf.Show_all_Products){
                 Wtf.productStore.reload();
                 Wtf.productStoreSales.reload();
                 Wtf.dirtyStore.product = true;
             }
            //            var ProductReportPanel = Wtf.getCmp("ProductReport");
            //            if(ProductReportPanel != null){
            //                Wtf.getCmp('as').setActiveTab(ProductReportPanel);
            //                Wtf.getCmp('as').doLayout();
            //            }
            var ProductReportPanel = Wtf.getCmp("ProductReport");
            if(ProductReportPanel != null){//for Updating Product
                Wtf.getCmp('ProductReport').productStore.reload();
                Wtf.getCmp('as').setActiveTab(ProductReportPanel);
                Wtf.getCmp('as').doLayout();
            }
        },this);
        panel.on("activate",function(panel){
            panel.doLayout();
        },this);
        Wtf.getCmp('as').add(panel);
        
        panel.on('resize', function (panel) {
            panel.doLayout();
        }, this);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();

}

function callBuildAssemblyForm(productid, record, isViewMode, isUnbuildAssembly){
    var jeid = (record!=null && record!=undefined) ? record.data.journalentryid : "";
    var buildForm = Wtf.getCmp(isUnbuildAssembly ? "unBuildAssemblyForm"+(jeid!=""?jeid:this.id) : "buildAssemblyForm"+(jeid!=""?jeid:this.id));
    if(buildForm==null){
        buildForm = new Wtf.account.BuildAssemblyForm({
            title: isUnbuildAssembly ? WtfGlobal.getLocaleText("acc.productList.unBuildAssembly") : WtfGlobal.getLocaleText("acc.productList.buildAssembly"),  //"Build Assembly",
            tabTip: isUnbuildAssembly ? WtfGlobal.getLocaleText("acc.productList.unBuildAssembly") : WtfGlobal.getLocaleText("acc.productList.buildAssembly"),  //"Build Assembly",
            id: isUnbuildAssembly ? "unBuildAssemblyForm"+(jeid!=""?jeid:this.id) : "buildAssemblyForm"+(jeid!=""?jeid:this.id) ,
            productid:productid!=null?productid:"",
            iconCls :getButtonIconCls(Wtf.etype.buildassemly),
            layout:'fit',
            closable:true,
            border:false,
            record:record,
            prodbuildid:record ? (record.data ? record.data.productid : undefined) : undefined,
            isViewMode:isViewMode,
            isUnbuildAssembly : isUnbuildAssembly,
            modeName: isUnbuildAssembly ? 'autounbuildassembly':'autobuildassembly'
        });
        buildForm.on("close",function(buildForm){
            Wtf.getCmp('as').remove(buildForm)
            },this);
        buildForm.on("activate",function(panel){
            panel.doLayout();
        },this);
        Wtf.getCmp('as').add(buildForm);
    }
    Wtf.getCmp('as').setActiveTab(buildForm);
    Wtf.getCmp('as').doLayout();
}

function showProductValuationTab(){
    var productValuation = Wtf.getCmp("productValuation");
    if(productValuation==null){
        productValuation = new Wtf.account.productValuationGrid({
            title:WtfGlobal.getLocaleText("acc.productList.inventoryValuation"),  //"Inventory Valuation",
            tabTip:WtfGlobal.getLocaleText("acc.productList.inventoryValuation"),  //"Inventory Valuation",
            id:"productValuation",
            iconCls :getButtonIconCls(Wtf.etype.inventoryval),
            layout:'fit',
            closable:true,
            border:false
        });
        Wtf.getCmp('as').add(productValuation);
    }
    Wtf.getCmp('as').setActiveTab(productValuation);
    Wtf.getCmp('as').doLayout();
}

function callInventoryReport(productid,productname,rate){
    var panel = Wtf.getCmp('inventoryreport'+productname);
    if(panel==null){
        panel = new Wtf.account.InventoryReport({
            title:Wtf.util.Format.ellipsis((WtfGlobal.getLocaleText("acc.productList.invRep")+' '+productname),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.productList.invRep")+' '+productname,
            id:'inventoryreport'+productname,
            productID:productid,
            productName:productname,
            rate:rate,
            layout:'fit',
            closable:true,
            iconCls:'accountingbase inventoryreport',
            border:false
        });
        Wtf.getCmp('as').add(panel);
    }
    panel.on("activate",function(){
        if(Wtf.dirtyStore.inventory){
            panel.loadStore();
            Wtf.dirtyStore.inventory = false;
        }
    },this);
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callFrequentLedger(cash,groupid,title,icon, consolidateFlag,titlelabel){
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    var id = "Book"+groupid;
    id = consolidateFlag?id+'Merged':id;
    var uPermType=Wtf.UPerm.fstatement;
    var permType=(cash?Wtf.Perm.fstatement.viewcashbook:Wtf.Perm.fstatement.viewbankbook);
    var str=(titlelabel!=undefined)?titlelabel:(cash?WtfGlobal.getLocaleText("acc.bankBook.tabTitle1"):WtfGlobal.getLocaleText("acc.bankBook.tabTitle"));  //  //"Cash Book":"Bank Book");
    if(!WtfGlobal.EnableDisable(uPermType, permType)) {
        var panel = Wtf.getCmp(id);
        if(panel==null){
            panel = new Wtf.account.FrequentLedger({
                id : id,
                consolidateFlag : consolidateFlag,
                border : false,
                cash: cash,
                helpmodeid:(groupid==9?27:26),
                group:groupid,
                layout: 'fit',
                iconCls: icon,
                title:Wtf.util.Format.ellipsis(str,Wtf.TAB_TITLE_LENGTH) ,
                tabTip:str+":<br>"+(cash?WtfGlobal.getLocaleText("acc.bankBook.tabToolTip1"):WtfGlobal.getLocaleText("acc.bankBook.tabToolTip")),
                closable: true
            });
            Wtf.getCmp('as').add(panel);
            panel.on('journalentry',callJournalEntryDetails);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+str);
}

function callCreditNote(isCN, isCallFromPurchaseSaleEntryMenu,isCustomer){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.creditnote, Wtf.Perm.creditnote.createcn) &&isCN) ||(!isCN&&!WtfGlobal.EnableDisable(Wtf.UPerm.debitnote, Wtf.Perm.debitnote.createdn))) {
        var winid=(winid==null?"recwindow":winid);
        var panel = Wtf.getCmp(winid);
        //        var isCN = true;
        var isCustBill = false;
        if(!panel){
            new Wtf.account.CreditNoteTypeWindow({
                title: isCN?WtfGlobal.getLocaleText("acc.cn.payType"):WtfGlobal.getLocaleText("acc.dn.payType"),  //"Receipt Type",
                id: winid,
                isCustBill:isCustBill,
                closable: false,
                isCN:isCN,
                isCallFromPurchaseSaleEntryMenu: isCallFromPurchaseSaleEntryMenu,
                modal: true,
                moduleid:(isCN)?Wtf.Acc_Credit_Note_ModuleId:Wtf.Acc_Debit_Note_ModuleId,
                iconCls :getButtonIconCls(Wtf.etype.deskera),
                width: 420,
                autoScroll:true,
                height: 300,
                resizable: false,
                layout: 'border',
                buttonAlign: 'right',
                isCustomer:isCustomer,
                renderTo: document.body
            }).show();
        }
    }else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+(isCN?WtfGlobal.getLocaleText("acc.accPref.autoCN"):WtfGlobal.getLocaleText("acc.accPref.autoDN")));
}
function callDebitNoteAgainstCustomer(isCN){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.creditnote, Wtf.Perm.creditnote.createcn) &&isCN) ||(!isCN&&!WtfGlobal.EnableDisable(Wtf.UPerm.debitnote, Wtf.Perm.debitnote.createdn))) {
       var winid = isCN ? "creditnoteagaintvendorformalaysia" : 'debitnoteagaintcustomerformalaysia';
            var panel = Wtf.getCmp(winid);
            if(panel==null){
                panel = new Wtf.account.SalesReturnPanel({
                    id : winid,
//                    record: 5,
                    isCustomer:isCN?false:true,
                    readOnly:false,
                    isNoteAlso:true,
                    inputValue:'5',
                    isCustBill:false,
                    label: isCN ? WtfGlobal.getLocaleText("acc.module.name.12"):WtfGlobal.getLocaleText("acc.module.name.10"),
                    isCN:isCN?true:false,
                    border : false,
                    heplmodeid: 11,
                    moduleid:isCN?Wtf.Acc_Credit_Note_ModuleId:Wtf.Acc_Debit_Note_ModuleId,
                    title: isCN ? WtfGlobal.getLocaleText("acc.cn.undercharge") : WtfGlobal.getLocaleText("acc.cn.undercharge"),
                    tabTip:isCN ? WtfGlobal.getLocaleText("acc.cn.undercharge") : WtfGlobal.getLocaleText("acc.cn.undercharge"),
                    closable: true,
                    iconCls:'accountingbase deliveryorder',
                    modeName:isCN?'autocreditmemo':'autodebitnote'
                });
               panel.on("activate", function(){
                    panel.doLayout();
                }, this);
                Wtf.getCmp('as').add(panel);
            }
            Wtf.getCmp('as').setActiveTab(panel);
            Wtf.getCmp('as').doLayout();
        
    }else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+(isCN?WtfGlobal.getLocaleText("acc.accPref.autoCN"):WtfGlobal.getLocaleText("acc.accPref.autoDN")));
}


function callPurchaseInvoiceType(){
    if(Wtf.account.companyAccountPref.countryid=='137'){
        if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createvendorinvoice)) {
            var winid=(winid==null?"recwindow":winid);
            var panel = Wtf.getCmp(winid);
            //        var isCN = true;
            var isCustBill = false;
            if(!panel){
                new Wtf.account.PurchaseInvoiceTypeWindow({
                    title: WtfGlobal.getLocaleText("acc.pi.PurchaseInvoiceType"),
                    id: winid,
                    isCustBill:isCustBill,
                    closable: false,
                    modal: true,
                    readOnly:false,
                    moduleid:Wtf.Acc_Goods_Receipt_ModuleId,
                    iconCls :getButtonIconCls(Wtf.etype.deskera),
                    width: 380,
                    autoScroll:true,
                    height: 260,
                    resizable: false,
                    layout: 'border',
                    buttonAlign: 'right',
                    renderTo: document.body
                }).show();
            }
        }else
            WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.accPref.autoVI"));
    }else{
        //        if(!Wtf.account.companyAccountPref.withoutinventory){
        callGoodsReceipt(false,null);
    //        }else{
    //            callBillingGoodsReceipt(false,null)
    //        }
    }

}

function callSalesReturnWindow(isSR){
    if(isSR==null || isSR==undefined) isSR=false;
    //    if(Wtf.account.companyAccountPref.countryid=='137'){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.salesreturn, Wtf.Perm.salesreturn.createsret) &&isSR)||(!WtfGlobal.EnableDisable(Wtf.UPerm.purchasereturn, Wtf.Perm.purchasereturn.createpret) &&!isSR)) {
        var winid=(winid==null?"recwindow":winid);
        var panel = Wtf.getCmp(winid);
        //        var isCN = true;
        var isCustBill = false;
        if(!panel){
            new Wtf.account.SalesReturnTypeWindow({
                title: isSR?WtfGlobal.getLocaleText("acc.pi.SalesReturnType"):WtfGlobal.getLocaleText("acc.pi.PurchaseReturnType"),
                id: winid,
                isCustBill:isCustBill,
                closable: false,
                isSR:isSR,
                modal: true,
                moduleid:isSR?Wtf.Acc_Sales_Return_ModuleId:Wtf.Acc_Purchase_Return_ModuleId,
                iconCls :getButtonIconCls(Wtf.etype.deskera),
                width: 380,
                autoScroll:true,
                height: 260,
                resizable: false,
                layout: 'border',
                buttonAlign: 'right',
                renderTo: document.body
            }).show();
        }
    } else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+(isSR?WtfGlobal.getLocaleText("acc.up.34"):WtfGlobal.getLocaleText("acc.pi.PurchaseReturn")));
//    }else{
//        if(isSR)
//            callSalesReturn();
//        else
//            callPurchaseReturn();
//    }

}

function callDebitNote(){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createdn)) {
        var panel = Wtf.getCmp("DebitNote");
        if(panel!=null){
            Wtf.getCmp('as').remove(panel);
            panel.destroy();
            panel=null;
        }
        if(panel==null){
            panel = new Wtf.account.TrNotePanel({
                id : 'DebitNote',
                border : false,
                layout: 'fit',
                isCN:false,
                moduleid:Wtf.Acc_Debit_Note_ModuleId,
                isCustBill:false,
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoDN"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.accPref.autoDN"),  //'Debit Note',
                helpmodeid:14,
                iconCls:'accountingbase debitnote',
                closable: true
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.accPref.autoDN"));
}

function callCreditNoteDetails(id,check,noteType,consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,type){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.creditnote, Wtf.Perm.creditnote.viewcn)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var panelID = "CreditNoteDetails";
        panelID = consolidateFlag?panelID+'Merged':panelID;
        var panel = Wtf.getCmp(panelID);
        reportbtnshwFlag=reportbtnshwFlag;
        if(panel==null){
            panel = getCNTab(false, panelID, WtfGlobal.getLocaleText("acc.cnList.tabTitle"), undefined, consolidateFlag,searchStr, filterAppend,Wtf.Acc_Credit_Note_ModuleId,reportbtnshwFlag,undefined,type);
            Wtf.getCmp('as').add(panel);
            panel.on('journalentry',callJournalEntryDetails);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
        panel.expandNote(id,check,noteType);
        var channelName=Wtf.ChannelName.CreditNoteReport;
        panel.on('beforeclose', function(){
            beforeClose(channelName);
        },this);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.cnList.tabTitle"));
}

function callDebitNoteDetails(id,check,noteType,consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,type){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.debitnote, Wtf.Perm.debitnote.viewdn)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var panelID = "DebitNoteDetails";
        panelID = consolidateFlag?panelID+'Merged':panelID;
        var panel = Wtf.getCmp(panelID);
        reportbtnshwFlag=reportbtnshwFlag;
        if(panel==null){
            panel = getDNTab(false, panelID, WtfGlobal.getLocaleText("acc.dnList.tabTitle"), undefined, consolidateFlag,searchStr, filterAppend,Wtf.Acc_Debit_Note_ModuleId,reportbtnshwFlag,undefined,type);
            Wtf.getCmp('as').add(panel);
            //panel.on('goodsreceipt', callGoodsReceiptDetails);
            panel.on('journalentry',callJournalEntryDetails);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
        panel.expandNote(id,check,noteType);
        var channelName=Wtf.ChannelName.DebitNoteReport;
        panel.on('beforeclose', function(){
            beforeClose(channelName);
        },this);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.dnList.tabTitle"));
}

//function callReceipt(directPayment, invoiceRecord){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createreceipt)) {
//        var panel = Wtf.getCmp("Receipt");
//        if(panel!=null){
//            Wtf.getCmp('as').remove(panel);
//            panel.destroy();
//            panel=null;
//        }
//        if(panel==null){
//            panel = new Wtf.account.OSDetailPanel({
//                id : 'Receipt',
//                border : false,
//                isReceipt:true,
//                isDirectCustomer:false,
//                directPayment : directPayment,
//                invoiceRecord : invoiceRecord,
//                moduleId:Wtf.Acc_Receive_Payment_ModuleId,
//                cls: 'paymentFormPayMthd',
//                layout: 'border',
//                helpmodeid: 9, //This is help mode id
//                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoRP"),Wtf.TAB_TITLE_LENGTH),
//                tabTip:WtfGlobal.getLocaleText("acc.accPref.autoRP"),  //'Receive Payments',
//                iconCls:'accountingbase receivepayment',
//                closable: true,
//                modeName:'autoreceipt'
//            });
//            panel.on("activate", function(){
//                panel.doLayout();
//                Wtf.getCmp(panel.id+"wrapperPanelNorth").doLayout();
//            }, this);
//            Wtf.getCmp('as').add(panel);
//        }
//        //    panel.on('invoice',callInvoiceList);
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false," "+WtfGlobal.getLocaleText("acc.accPref.autoRP"));
//}

function callReceiptNew(directPayment, invoiceRecord){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.salesreceivepayment, Wtf.Perm.salesreceivepayment.createreceipt)) {
        var winid=(winid==null?"receiptagainstwin":winid);
        var panel = Wtf.getCmp(winid);
        if(!panel){
            new Wtf.account.ReceiptWindowNew({
                id: winid,
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoRP"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.accPref.autoRP"),  //'Receive Payment',
                personwin:false,
                closable: false,
                isReceipt:true,
                modal: true,
                moduleId:Wtf.Acc_Receive_Payment_ModuleId,
                iconCls:'accountingbase receivepayment',
                width: 450,
                autoScroll:true,
                height: 250,
                resizable: false,
                layout: 'border',
                buttonAlign: 'right',
                renderTo: document.body
            }).show();
        }
    }
    else
        WtfComMsgBox(46,0,false," "+WtfGlobal.getLocaleText("acc.accPref.autoRP"));
}

function callEditPaymentNew(rec,winid,typeCheck,gridObject,copyReceiptTransaction,isAllowedSpecificFields,ispendingAproval){
    winid=(winid==null?'EditReceivePayment':winid);
    var isAllowedSpecificFields = (isAllowedSpecificFields == null || isAllowedSpecificFields == undefined)?false:isAllowedSpecificFields;
    var panel = Wtf.getCmp(winid);
    if(panel!=null){
        Wtf.getCmp('as').remove(panel);
        panel.destroy();
        panel=null;
    }
    if(panel==null){
        panel = new Wtf.account.PaymentEntry({
            id : winid,
            border : false,
            isReceipt:typeCheck,
            paymentType: rec.data.paymentwindowtype,
            isCustomer: rec.data.paymentwindowtype==2?true:false,
            layout: 'border',
            moduleId:(typeCheck)?Wtf.Acc_Receive_Payment_ModuleId:Wtf.Acc_Make_Payment_ModuleId,
            // readOnly:true,
            gridObject:gridObject,
            ispendingAproval:ispendingAproval,
            record: rec,
            cls: 'paymentFormPayMthd',
            isEdit:true,
            isCopyReceipt:copyReceiptTransaction,
            isAllowedSpecificFields:isAllowedSpecificFields,
            helpmodeid: typeCheck ? 58 :59, //This is help mode id
            label:(typeCheck?WtfGlobal.getLocaleText("acc.wtfTrans.crp"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),
            //title:Wtf.util.Format.ellipsis((typeCheck?WtfGlobal.getLocaleText("acc.wtfTrans.crp"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),Wtf.TAB_TITLE_LENGTH),
            title:(typeCheck?(copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentReceipt"):WtfGlobal.getLocaleText("acc.wtfTrans.crp")):copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentmade"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),
            tabTip:(typeCheck?(copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentReceipt"):WtfGlobal.getLocaleText("acc.wtfTrans.crp")):copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentmade"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),
            iconCls:'accountingbase receivepayment',
            closable: true
        });
        panel.on("activate", function(){
            panel.doLayout();
            Wtf.getCmp(panel.id+"wrapperPanelNorth").doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    if(typeCheck){
        panel.on('update',  function(){
            var selectedModeId= "receiptReport";
            if(Wtf.getCmp(selectedModeId))
                Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }, this);
    }else{
        panel.on('update',  function(){
            var selectedModeId= "paymentReport";
            if(Wtf.getCmp(selectedModeId))
                Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }, this);
    }
    Wtf.getCmp('as').doLayout();
}
function callEditReceiptNew(rec,winid,typeCheck,gridObject,copyReceiptTransaction,isAllowedSpecificFields,ispendingAproval){
    winid=(winid==null?'EditReceivePayment':winid);
    var isAllowedSpecificFields = (isAllowedSpecificFields == null || isAllowedSpecificFields == undefined)?false:isAllowedSpecificFields;
    var panel = Wtf.getCmp(winid);
    if(panel!=null){
        Wtf.getCmp('as').remove(panel);
        panel.destroy();
        panel=null;
    }
    if(panel==null){
        panel = new Wtf.account.ReceiptEntry({
            id : winid,
            border : false,
            isReceipt:typeCheck,
            paymentType: rec.data.paymentwindowtype,
            isCustomer: rec.data.paymentwindowtype==1?true:false,
            layout: 'border',
            moduleId:(typeCheck)?Wtf.Acc_Receive_Payment_ModuleId:Wtf.Acc_Make_Payment_ModuleId,
            // readOnly:true,
            gridObject:gridObject,
            record: rec,
            cls: 'paymentFormPayMthd',
            isEdit:true,
            isCopyReceipt:copyReceiptTransaction,
            helpmodeid: typeCheck ? 58 :59, //This is help mode id
            label:(typeCheck?WtfGlobal.getLocaleText("acc.wtfTrans.crp"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),
            //title:Wtf.util.Format.ellipsis((typeCheck?WtfGlobal.getLocaleText("acc.wtfTrans.crp"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),Wtf.TAB_TITLE_LENGTH),
            title:(typeCheck?(copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentReceipt"):WtfGlobal.getLocaleText("acc.wtfTrans.crp")):copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentmade"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),
            tabTip:(typeCheck?(copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentReceipt"):WtfGlobal.getLocaleText("acc.wtfTrans.crp")):copyReceiptTransaction?WtfGlobal.getLocaleText("acc.field.CopyPaymentmade"):WtfGlobal.getLocaleText("acc.wtfTrans.epm")),
            iconCls:'accountingbase receivepayment',
            isAllowedSpecificFields:isAllowedSpecificFields,
            closable: true,
            ispendingAproval:ispendingAproval       //used to open pending approval receipts
        });
        panel.on("activate", function(){
            panel.doLayout();
            Wtf.getCmp(panel.id+"wrapperPanelNorth").doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    if(typeCheck){
        panel.on('update',  function(){
            var selectedModeId= "receiptReport";
            if(Wtf.getCmp(selectedModeId))
                Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }, this);
    }else{
        panel.on('update',  function(){
            var selectedModeId= "paymentReport";
            if(Wtf.getCmp(selectedModeId))
                Wtf.getCmp(selectedModeId).loadStore();
            Wtf.getCmp('as').remove(panel);
        }, this);
    }
    Wtf.getCmp('as').doLayout();
}

function callPaymentNew(directPayment, invoiceRecord, sidepanelCheck){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.purchasemakepayment, Wtf.Perm.purchasemakepayment.createpayment)) {
        var winid=(winid==null?"paymentagainstwin":winid);
        var panel = Wtf.getCmp(winid);
        if(!panel){
            new Wtf.account.ReceiptWindowNew({
                id: winid,
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoMP"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.accPref.autoMP"),  //'Make Payment',
                personwin:false,
                closable: false,
                isReceipt:false,
                modal: true,
                moduleId:Wtf.Acc_Make_Payment_ModuleId,
                iconCls:'accountingbase makepayment',
                width: 450,
                sidepanelCheck:sidepanelCheck,
                autoScroll:true,
                height: 250,
                resizable: false,
                layout: 'border',
                buttonAlign: 'right',
                renderTo: document.body
            }).show();
        }
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.accPref.autoMP"));
}
//function BillingReceiptReport(searchStr, filterAppend){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewreceipt)) {
//        var panel = Wtf.getCmp("receiptBillingReport");
//        if(panel==null){
//            panel = new Wtf.account.ReceiptReport({
//                id : 'receiptBillingReport',
//                border : false,
//                isCustBill:true,
//                searchJson: searchStr,
//                filterConjuctionCrit:filterAppend,
//                moduleid:Wtf.Acc_Receive_Payment_ModuleId,
//                helpmodeid: 20,
//                layout: 'fit',
//                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.prList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
//                tabTip:WtfGlobal.getLocaleText("acc.prList.tabTitle"), //'Payments Received Report',
//                closable: true,
//                isReceipt:true,
//                iconCls:'accountingbase receivepaymentreport'
//            //            activeItem : 0
//            });
//            Wtf.getCmp('as').add(panel);
//            panel.on('journalentry',callJournalEntryDetails);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//        showAdvanceSearch(panel,searchStr, filterAppend);
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.prList.tabTitle"));
//}
//function ReceiptReport(consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,fromNavigationPanel,titlelabel){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewreceipt)) {
//        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
//        var panelID = "receiptReport";
//        panelID = consolidateFlag?panelID+'Merged':panelID;
//        var panel = Wtf.getCmp(panelID);
//        if(panel==null){
//            panel = new Wtf.account.ReceiptReport({
//                id : panelID,
//                border : false,
//                helpmodeid: 20,
//                layout: 'fit',
//                searchJson: searchStr,
//                filterConjuctionCrit:filterAppend,
//                moduleid:Wtf.Acc_Receive_Payment_ModuleId,
//                consolidateFlag:consolidateFlag,
//                reportbtnshwFlag:reportbtnshwFlag,
//                fromNavigationPanel: (!fromNavigationPanel)?false:true,
//                title:Wtf.util.Format.ellipsis((titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.prList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
//                tabTip:(titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.prList.tabToolTip"),  //'Payment Received Report',
//                closable: true,
//                isReceipt:true,
//                iconCls:'accountingbase receivepaymentreport'
//            //            activeItem : 0
//            });
//            Wtf.getCmp('as').add(panel);
//            panel.on('journalentry',callJournalEntryDetails);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//        showAdvanceSearch(panel,searchStr, filterAppend);
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.prList.tabTitle"));
//};
function callReceiptReportNew(consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,fromNavigationPanel,titlelabel,isReceivable){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.salesreceivepayment, Wtf.Perm.salesreceivepayment.viewreceipt)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        fromNavigationPanel = fromNavigationPanel!=undefined?fromNavigationPanel:false;
        var panelID = "receiptReport";
        panelID = consolidateFlag?panelID+'Merged':panelID;
        var panel = Wtf.getCmp(panelID);
        //Payment Report from Account Receivables
        if (panel != null){
            Wtf.getCmp('as').remove(panel);
            panel.destroy();
            panel = null;
        }
        var isReceivable=isReceivable!=undefined?(isReceivable?isReceivable:false):undefined;
        if(panel==null){
            panel = new Wtf.account.ReceiptReportNew({ //Main tab of Receipt
                id : panelID,
                border : false,
                helpmodeid: 20,
                layout: 'fit',
                searchJson: searchStr,
                filterConjuctionCrit:filterAppend,
                moduleid:Wtf.Acc_Receive_Payment_ModuleId,
                consolidateFlag:consolidateFlag,
                reportbtnshwFlag:reportbtnshwFlag,
                fromNavigationPanel: fromNavigationPanel,
                isReceivable:isReceivable,
                title:Wtf.util.Format.ellipsis((titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.prList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:(titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.prList.tabToolTip"),  //'Payment Received Report',
                closable: true,
                isReceipt:true,
                iconCls:'accountingbase receivepaymentreport'
            //            activeItem : 0
            });
            Wtf.getCmp('as').add(panel);
            panel.on('journalentry',callJournalEntryDetails);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.prList.tabTitle"));
};

//function callPaymentReport(consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,fromNavigationPanel,titlelabel){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.viewpayment)) {
//        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
//        var panelID = "paymentReport";
//        panelID = consolidateFlag?panelID+'Merged':panelID;
//        var panel = Wtf.getCmp(panelID);
//        if(panel==null){
//            panel = new Wtf.account.ReceiptReport({
//                id : panelID,
//                border : false,
//                helpmodeid: 23,
//                searchJson: searchStr,
//                filterConjuctionCrit:filterAppend,
//                moduleid:Wtf.Acc_Make_Payment_ModuleId,
//                reportbtnshwFlag:reportbtnshwFlag,
//                layout: 'fit',
//                consolidateFlag:consolidateFlag,
//                fromNavigationPanel:(!fromNavigationPanel)?false:true,
//                title:Wtf.util.Format.ellipsis((titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.pmList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
//                tabTip:(titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.pmList.tabToolTip"),  //'Payment Made Report',
//                closable: true,
//                isReceipt:false,
//                iconCls:'accountingbase makepaymentreport'
//            });
//            Wtf.getCmp('as').add(panel);
//            panel.on('journalentry',callJournalEntryDetails);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//        showAdvanceSearch(panel,searchStr, filterAppend);
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.pmList.tabTitle"));
//}
function callPaymentReportNew(consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,fromNavigationPanel,titlelabel,isReceivable){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.purchasemakepayment, Wtf.Perm.purchasemakepayment.viewpayment)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        fromNavigationPanel = fromNavigationPanel!=undefined?fromNavigationPanel:false;
        var panelID = "paymentReport";
        panelID = consolidateFlag?panelID+'Merged':panelID;
        var panel = Wtf.getCmp(panelID);
        var paymentMainTabPanelID = "PaymentMainTabPanel";
        var paymentMainTabPanel = Wtf.getCmp(paymentMainTabPanelID);
        //Payment Report from Account Payables
         if (paymentMainTabPanel != null){
            Wtf.getCmp('as').remove(paymentMainTabPanel);
            paymentMainTabPanel.destroy();
            paymentMainTabPanel = null;
        }
        var isReceivable=isReceivable!=undefined?(isReceivable?isReceivable:false):undefined;
        if(paymentMainTabPanel==null){
            var itemsArray=[];
            panel = getPaymentTab(consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,fromNavigationPanel,titlelabel,panelID,isReceivable,undefined,Wtf.Acc_Make_Payment_ModuleId)
            itemsArray.push(panel);
            var repeatPaymentPanelID = "RepeatPaymentList";
            itemsArray.push(new Wtf.RepeatedPaymentReport({
                id : repeatPaymentPanelID,
                consolidateFlag:consolidateFlag,
                title:WtfGlobal.getLocaleText("acc.field.RecurringMPReport"),
                tabTip:WtfGlobal.getLocaleText("acc.field.RecurringMPReport"),
                border: false,
                closable: false,
                layout: 'fit',
                iconCls:'accountingbase journalentryreport',
                isCustBill:false,
                isReceipt:false
            }));
            paymentMainTabPanel = new Wtf.TabPanel({
                activeTab: 0,
                border: false,
                closable: true,
                id: paymentMainTabPanelID,
                title:Wtf.util.Format.ellipsis((titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.pmList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip: (titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.pmList.tabToolTip"),  //'Payment Made Report',
                items: itemsArray
            });
            Wtf.getCmp('as').add(paymentMainTabPanel);
            panel.on('journalentry',callJournalEntryDetails);
            Wtf.getCmp('as').setActiveTab(paymentMainTabPanel);
        } else {
            Wtf.getCmp('as').setActiveTab(paymentMainTabPanel);
        }
        paymentMainTabPanel.setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.pmList.tabTitle"));
}

function getPaymentTab (consolidateFlag,searchStr, filterAppend,reportbtnshwFlag,fromNavigationPanel,titlelabel,panelID,isReceivable,pendingApproval,moduleid,winValue){
    var panel = new Wtf.account.ReceiptReportNew({  //Main tab of payment and (pending receipt or payment)
        id : panelID,
        border : false,
        helpmodeid: moduleid==Wtf.Acc_Make_Payment_ModuleId?23:20,
        searchJson: searchStr,
        filterConjuctionCrit:filterAppend,
        moduleid:moduleid,
        reportbtnshwFlag:reportbtnshwFlag,
        layout: 'fit',
        consolidateFlag:consolidateFlag,
        fromNavigationPanel:(!fromNavigationPanel)?false:true,
        isReceivable:isReceivable,
        title:Wtf.util.Format.ellipsis((titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.pmList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
        tabTip:(titlelabel!=undefined)?titlelabel:WtfGlobal.getLocaleText("acc.pmList.tabToolTip"),  //'Payment Made Report',
        closable: true,
        isReceipt:moduleid==Wtf.Acc_Receive_Payment_ModuleId,
        pendingapproval:pendingApproval,
        winValue: winValue,     //ERP-32932
        recordType:winValue,
        iconCls:moduleid==Wtf.Acc_Make_Payment_ModuleId?'accountingbase makepaymentreport':'accountingbase receivepaymentreport'
    });
    return panel;

}

function callPaymentReceiptNew(value,isReceipt, directPayment,invoiceRecord,fromNavigationPanel, taxPaymentDataParams,paymentDetailsRecord,loanFlag){
    //        this.value = this.makePaymentsGLCode.getValue()? 3:( this.makeReceivePayType.getValue() ? 2 : (this.accountType.getValue() ? 1 : 4));
    this.value = value;
    fromNavigationPanel=fromNavigationPanel==undefined?false:fromNavigationPanel;
    if(!fromNavigationPanel){
        this.close();
    }
    var winid=(winid==null?isReceipt?"receiptwindowfromnavigation":"paymentwindowfromnavigation":winid);
    var modeName =isReceipt?"autoreceipt":"autopayment";
    var panel = Wtf.getCmp(winid);
    if(isReceipt){
        if(panel==null){
            panel=new Wtf.account.ReceiptEntry({
                id : winid,
                paymentDetailsRecord:paymentDetailsRecord,
                paymentType: this.value,
                loanFlag:loanFlag,
                border : false,
                isReceipt:isReceipt,
                isDirectCustomer:false,
                directPayment : directPayment,
                invoiceRecord : invoiceRecord,
                moduleId:isReceipt?Wtf.Acc_Receive_Payment_ModuleId:Wtf.Acc_Make_Payment_ModuleId,
                cls: 'paymentFormPayMthd',
                layout: 'border',
                helpmodeid: 9, //This is help mode id
                title:isReceipt?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoRP"),Wtf.TAB_TITLE_LENGTH):Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoMP"),Wtf.TAB_TITLE_LENGTH),
                tabTip:isReceipt?WtfGlobal.getLocaleText("acc.accPref.autoRP"):WtfGlobal.getLocaleText("acc.accPref.autoMP"),  //'Receive Payments',
                iconCls:'accountingbase receivepayment',
                closable: true,
                isCustomer:this.value==1,
                modeName:modeName
            });
            panel.on("activate", function(){
                panel.doLayout();
                Wtf.getCmp(panel.id+"wrapperPanelNorth").doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    } else{
        if(panel==null){
            panel=new Wtf.account.PaymentEntry({
                id : winid,
                paymentType: this.value,
                border : false,
                isReceipt:isReceipt,
                isDirectCustomer:false,
                directPayment : directPayment,
                invoiceRecord : invoiceRecord,
                moduleId:isReceipt?Wtf.Acc_Receive_Payment_ModuleId:Wtf.Acc_Make_Payment_ModuleId,
                cls: 'paymentFormPayMthd',
                layout: 'border',
                helpmodeid: 10, //This is help mode id
                title:isReceipt?Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoRP"),Wtf.TAB_TITLE_LENGTH):Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoMP"),Wtf.TAB_TITLE_LENGTH),
                tabTip:isReceipt?WtfGlobal.getLocaleText("acc.accPref.autoRP"):WtfGlobal.getLocaleText("acc.accPref.autoMP"),  //'Receive Payments',
                iconCls:'accountingbase receivepayment',
                closable: true,
                isCustomer:isReceipt?(this.value==1):(this.value==2),
                modeName:modeName,
                amountDisable:true,
                taxPaymentDataParams: taxPaymentDataParams
            });
            panel.on("activate", function(){
                panel.doLayout();
                Wtf.getCmp(panel.id+"wrapperPanelNorth").doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    return panel;
}
function callAgedRecievableReport(params){
    if(params == undefined){
        params={};
    }
    
    var mainPanelId = params.mainPanelId || "mainAgedRecievable";
    var custVendorID = params.custVendorID || "";
    var withinventory = params.withinventory || false;
    var isCustomWidgetReport = params.isCustomWidgetReport || false; 
    var searchStr=params.searchStr||"";
    var filterAppend=params.filterAppend ||"";
    var panelId = "AgedRecievable";
    if(mainPanelId){
        panelId = mainPanelId + "Report";
    }
    var AgedPayablepanel=Wtf.getCmp(panelId);
    var AgedRecievablepanel=Wtf.getCmp(panelId);
    if(AgedRecievablepanel==null){
        callAgedRecievable(params);
        AgedRecievablepanel = new Wtf.account.AgedDetail({
            id: panelId,
            border: false,
            helpmodeid:83,
            withinventory:withinventory,
            custVendorID:custVendorID,
            layout: 'fit',
            displayFlag:false,
            iconCls: 'accountingbase agedrecievable',
            title: WtfGlobal.getLocaleText("acc.agedPay.reportView"),  //'Report View',
            tabTip:WtfGlobal.getLocaleText("acc.rem.183"),
            receivable:true,
            isCustomWidgetReport:isCustomWidgetReport,
            searchJson:searchStr,
            filterAppend:filterAppend
        });
        AgedRecievablepanel.on("activate",function(){
            showAdvanceSearch(AgedRecievablepanel,searchStr, filterAppend);
//            AgedRecievablepanel.storeloaded(AgedRecievablepanel.AgedStore);// Called to set the grand total Ref ERP-8925
//            AgedRecievablepanel.doLayout();
        });
        Wtf.getCmp(mainPanelId).add(AgedRecievablepanel);
        AgedRecievablepanel.on('journalentry',callJournalEntryDetails);
    }else{
    }
    //     Wtf.getCmp('mainAgedRecievable').setActiveTab(AgedRecievablepanel);
    Wtf.getCmp(mainPanelId).doLayout();
}

function callAgedRecievableSummary(params){
    if(params == undefined){
        params={};
    }
    var mainPanelId = params.mainPanelId || "mainAgedRecievable";
    var custVendorID = params.custVendorID || "";
    var withinventory = params.withinventory || false;
    var isCustomWidgetReport = params.isCustomWidgetReport || false; 
    var searchStr=params.searchStr||"";
    var filterAppend=params.filterAppend ||"";
    var panelId = "AgedRecievable";
    if(mainPanelId){
      panelId = mainPanelId + "Summary";
    }
    var AgedRecievablepanel=Wtf.getCmp(panelId);
    if(AgedRecievablepanel==null){
        callAgedRecievable(params);
        AgedRecievablepanel = new Wtf.account.AgedDetail({
            id: panelId,
            border: false,
            helpmodeid:28,
            isSummary:true,
            withinventory:withinventory,
            custVendorID:custVendorID,
            isCustomWidgetReport:isCustomWidgetReport,
            layout: 'fit',
            displayFlag:false, //to show alert message in summary view
            iconCls: 'accountingbase agedrecievable',
            title: WtfGlobal.getLocaleText("acc.agedPay.summaryView"),  //'Summary View',
            tabTip:WtfGlobal.getLocaleText("acc.rem.182"),
            receivable:true,
            searchJson:searchStr,
            filterAppend:filterAppend
        });
        AgedRecievablepanel.on("activate",function(){
            showAdvanceSearch(AgedRecievablepanel,searchStr, filterAppend);
//            AgedRecievablepanel.storeloaded(AgedRecievablepanel.AgedStore);// Called to set the grand total Ref ERP-8925
//            AgedRecievablepanel.doLayout();
        });
        Wtf.getCmp(mainPanelId).add(AgedRecievablepanel);
    }
    Wtf.getCmp(mainPanelId ).setActiveTab(AgedRecievablepanel);
    Wtf.getCmp(mainPanelId).doLayout();
}
function callAgedRecievable(params){
        
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.agedreceivable, Wtf.Perm.agedreceivable.viewagedreceivable)) {
        if (params == undefined){
            params = {};
        }
        var mainPanelId = params.id || "mainAgedRecievable";
        var custVendorID = params.custVendorID || "";
        var searchStr = params.searchStr || "";
        var withinventory = params.withinventory || false;
        var filterAppend = params.filterAppend || "";
        var isCustomWidgetReport = params.isCustomWidgetReport || false; 
        params.mainPanelId = mainPanelId;
        
        var panel = Wtf.getCmp(mainPanelId);
        if(panel==null){
            panel = new Wtf.TabPanel({
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.agedrr"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.agedrTabTip"),   //'Aged Receivable',
                withinventory:withinventory,
                custVendorID:custVendorID,
                id:mainPanelId,
                closable:true,
                border:false,
                iconCls:'accountingbase agedrecievable',
                isCustomWidgetReport:isCustomWidgetReport
            });            
            //Wtf.getCmp('as').add(panel);
            callAgedRecievableSummary(params);
            callAgedRecievableReport(params);
            panel.setActiveTab((params.moduleId!==""+Wtf.autoNum.AgedReceivableDetailReport? 0:1));
            if (isCustomWidgetReport && params.callbackFn) {
        /*
         *call callback function to add this report to widget.
         **/
                  params.callbackFn.call(this, panel);
            }else{
                Wtf.getCmp('as').add(panel);
                Wtf.getCmp('as').setActiveTab(panel);
                Wtf.getCmp('as').doLayout();
            }
                
            
        }else if(!this.isCustomWidgetReport){
           if(panel.getEl()){
                Wtf.getCmp('as').setActiveTab(panel);
           }
           var tab1Id = "AgedRecievableSummary";
           var tab2Id = "AgedRecievable";
           if(mainPanelId){
                 tab1Id = mainPanelId + "Summary";
                 tab2Id = mainPanelId + "Report";
           }
           var obj1 = Wtf.getCmp(tab1Id);
           var obj2 = Wtf.getCmp(tab2Id);
           if(obj1!=undefined && obj2!=undefined && custVendorID){
            obj1.Name.setValue(custVendorID);
            obj1.fetchAgedData();
            
            
            obj2.Name.setValue(custVendorID);
            obj2.fetchAgedData();
            
        }
            
            
//       Wtf.getCmp('as').doLayout();
        }
//        Wtf.getCmp('as').setActiveTab(panel);
//       Wtf.getCmp('as').doLayout();
        
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.wtfTrans.agedrr"));
}


function callAgedPayable(params){
    if(params == undefined){
        params={};
    }
    var mainPanelId = params.id || "mainAgedPayable";
    var custVendorID = params.custVendorID || "";
    var withinventory = params.withinventory || false;
    var isCustomWidgetReport = params.isCustomWidgetReport || false; 
    var filterAppend = params.filterAppend || "";
    var searchStr = params.searchStr || "";
    
    params.mainPanelId = mainPanelId;
    
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.agedpayable, Wtf.Perm.agedpayable.viewagedpayable)) {
        var panel = Wtf.getCmp(mainPanelId);
        if(panel==null){
            panel = new Wtf.TabPanel({
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.agedpr"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.agedpTabTp"),  //'Aged Payable',
                id : mainPanelId,
                withinventory:withinventory,
                custVendorID:custVendorID,
                closable:true,
                border:false,
                isCustomWidgetReport:isCustomWidgetReport,
                iconCls:'accountingbase balancesheet'
            });
            callAgedPayableSummary(params);
            callAgedPayableReport(params);
            panel.setActiveTab((params.moduleId!==""+Wtf.Acc_AgedPayables_ReportView_ModuleId? 0:1));
            if (isCustomWidgetReport && params.callbackFn) {
             /*
             *call callback function to add this report to widget.
             **/
                params.callbackFn.call(this, panel);
            }else{
            Wtf.getCmp('as').add(panel);
            Wtf.getCmp('as').setActiveTab(panel);
            Wtf.getCmp('as').doLayout();
            }
            
        }else if(!isCustomWidgetReport){
           if(panel.getEl()){
                Wtf.getCmp('as').setActiveTab(panel);
           }
           var summaryId = mainPanelId ? mainPanelId + "Summary":"AgedPayableSummary";
           var agedReportId = mainPanelId ? mainPanelId + "Report":"AgedPayable";
           var obj1 = Wtf.getCmp(summaryId);
           var obj2 = Wtf.getCmp(agedReportId);
           if(obj1!=undefined && obj2!=undefined && custVendorID){
                obj1.Name.setValue(custVendorID);
                obj1.fetchAgedData();
            
                obj2.Name.setValue(custVendorID);
                obj2.fetchAgedData();
            
            
            }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
    }
 }else{
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.wtfTrans.agedpr"));
 }
}

function callColoumnerPurchaseOrSalesReg(action){
    if (Wtf.Countryid == Wtf.Country.INDIA) {
        var reportPanel = Wtf.getCmp(action);
        if (reportPanel == null){
            reportPanel = new Wtf.account.ColoumnerPurchaseRegister({
            id : action,
            border : false,
            title: action=="SaleReg"?WtfGlobal.getLocaleText("acc.field.ColoumnerSalesRegisters"):action=="PurchaseReg"?WtfGlobal.getLocaleText("acc.field.ColoumnerPurchaseRegisters"):"",
            tabTip: action=="SaleReg"?WtfGlobal.getLocaleText("acc.field.ColoumnerSalesRegisters"):action=="PurchaseReg"?WtfGlobal.getLocaleText("acc.field.ColoumnerPurchaseRegisters"):"",
            layout: 'fit',
            action:action,
            closable : true,
            iconCls:'accountingbase viewreceivepayment'   //iconCls: getButtonIconCls(Wtf.etype.inventoryval)
            });
            Wtf.getCmp('as').add(reportPanel);
        }
        Wtf.getCmp('as').setActiveTab(reportPanel);
        Wtf.getCmp('as').doLayout();
    }
}
function callAgedPayableReport(params){
    if(params == undefined){
        params={};
    }
    var mainPanelId = params.mainPanelId || "mainAgedPayable";
    var custVendorID = params.custVendorID || "";
    var withinventory = params.withinventory || false;
    var isCustomWidgetReport = params.isCustomWidgetReport || false; 
    var searchStr=params.searchStr||"";
    var filterAppend=params.filterAppend ||"";
    var panelId = "AgedPayable";
    if(mainPanelId){
        panelId = mainPanelId + "Report";
    }
    var AgedPayablepanel=Wtf.getCmp(panelId);
    if(AgedPayablepanel==null){
        callAgedPayable(params);
        AgedPayablepanel = new Wtf.account.AgedDetail({
            id: panelId,
            withinventory:withinventory,
            custVendorID:custVendorID,
            helpmodeid:84,
            border: false,
            displayFlag:false,
            layout: 'fit',
            iconCls: 'accountingbase agedpayable',
            tabTip:WtfGlobal.getLocaleText("acc.rem.181"),
            title: WtfGlobal.getLocaleText("acc.agedPay.reportView"), //'Report View'
            isCustomWidgetReport:isCustomWidgetReport,
            searchJson:searchStr,
            filterAppend:filterAppend
        });
        AgedPayablepanel.on("activate",function(){
            showAdvanceSearch(AgedPayablepanel,searchStr, filterAppend);
//            AgedPayablepanel.storeloaded(AgedPayablepanel.AgedStore);// Called to set the grand total Ref ERP-8925
//            AgedPayablepanel.doLayout();
        });
        Wtf.getCmp(mainPanelId).add(AgedPayablepanel);
        AgedPayablepanel.on('journalentry',callJournalEntryDetails);
    }else{
    }
    //     Wtf.getCmp('mainAgedPayable').setActiveTab(AgedPayablepanel);
    Wtf.getCmp(mainPanelId).doLayout();
}

function callAgedPayableSummary(params){
    if(params == undefined){
        params={};
    }
    var mainPanelId = params.mainPanelId || "mainAgedPayable";
    var custVendorID = params.custVendorID || "";
    var withinventory = params.withinventory || false;
    var isCustomWidgetReport = params.isCustomWidgetReport || false; 
    var searchStr=params.searchStr||"";
    var filterAppend=params.filterAppend ||"";
    var panelId = "AgedPayable";
    if(mainPanelId){
      panelId = mainPanelId + "Summary";
    }
    var AgedPayablepanel=Wtf.getCmp(panelId);
    if(AgedPayablepanel==null){
        callAgedPayable(params);
        AgedPayablepanel = new Wtf.account.AgedDetail({
            id: panelId,
            border: false,
            isSummary:true,
            helpmodeid:29,
            displayFlag:false,
            withinventory:withinventory,
            custVendorID:custVendorID,
            layout: 'fit',
            iconCls: 'accountingbase agedpayable',
            tabTip:WtfGlobal.getLocaleText("acc.rem.180"),
            title: WtfGlobal.getLocaleText("acc.agedPay.summaryView"),  //'Summary View'
            isCustomWidgetReport:isCustomWidgetReport,
            searchJson:searchStr,
            filterAppend:filterAppend
        });
        AgedPayablepanel.on("activate",function(){
            showAdvanceSearch(AgedPayablepanel,searchStr, filterAppend);
        });
        Wtf.getCmp(mainPanelId).add(AgedPayablepanel);
    }
    Wtf.getCmp(mainPanelId).setActiveTab(AgedPayablepanel);
    Wtf.getCmp(mainPanelId).doLayout();
}

function call1099Report(){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.tax1099, Wtf.Perm.tax1099.tax1099dv) || !WtfGlobal.EnableDisable(Wtf.UPerm.tax1099, Wtf.Perm.tax1099.tax1099sv)) {
        var panel = Wtf.getCmp("main1099Report");
        if(panel==null){
            panel = new Wtf.TabPanel({
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.1099.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.1099.tabTitle"),  //'1099 Report',
                id:'main1099Report',
                withinventory:true,
                closable:true,
                border:false,
                iconCls:'accountingbase balancesheet',
                activeTab:0
            });
            Wtf.getCmp('as').add(panel);
            if(!WtfGlobal.EnableDisable(Wtf.UPerm.tax1099, Wtf.Perm.tax1099.tax1099dv))
                call1099DetailReport();
            if(!WtfGlobal.EnableDisable(Wtf.UPerm.tax1099, Wtf.Perm.tax1099.tax1099sv))
                call1099SummaryReport()
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.field.viewingTax1099Report"));
}


function call1099DetailReport(){
    var DetailReportpanel=Wtf.getCmp("1099DetailReport");
    if(DetailReportpanel==null){
        //         call1099Report();
        DetailReportpanel = new Wtf.account.Tax1099DetailReport({
            id: '1099DetailReport',
            isexpenseinv:true,
            withinventory:true,
            helpmodeid:29,
            border: false,
            layout: 'fit',
            iconCls: 'accountingbase agedpayable',
            title: WtfGlobal.getLocaleText("acc.1099.detail"),  //'Detail View'
            tabTip:WtfGlobal.getLocaleText("acc.field.ViewDetailsofTax1099Accounts")
        });
        Wtf.getCmp('main1099Report').add(DetailReportpanel);
        DetailReportpanel.on('journalentry',callJournalEntryDetails);
    }else{
    }
    //     Wtf.getCmp('main1099Report').setActiveTab(DetailReportpanel);
    Wtf.getCmp('main1099Report').doLayout();
}

function call1099SummaryReport(){
    var SummaryReportpanel=Wtf.getCmp("1099SummaryReport");
    if(SummaryReportpanel==null){
        //         call1099Report();
        SummaryReportpanel = new Wtf.account.Tax1099SummaryReport({
            id: '1099SummaryReport',
            border: false,
            isexpenseinv:true,
            isSummary:true,
            withinventory:true,
            layout: 'fit',
            iconCls: 'accountingbase agedpayable',
            title: WtfGlobal.getLocaleText("acc.1099.summary"), //'Summary View'
            tabTip:WtfGlobal.getLocaleText("acc.field.ViewSummaryofTax1099Accounts")
        });
        Wtf.getCmp('main1099Report').add(SummaryReportpanel);
    }
    Wtf.getCmp('main1099Report').doLayout();
}

function callCustomerDetails(personlinkid,openperson,withinventory, searchStr, filterAppend){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.customer, Wtf.Perm.customer.view)) {
        var panel = Wtf.getCmp("mainCustomerDetails");
        if(panel==null){
            panel = new Wtf.TabPanel({
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.customerList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.customerList.tabTitle"),  //'Accounts Receivable/Customer(s)',
                id:'mainCustomerDetails',
                withinventory:withinventory,
                closable:true,
                border:false,
                iconCls :getButtonIconCls(Wtf.etype.customer),
                activeTab:0
            });
            Wtf.getCmp('as').add(panel);
            callCustomerReport(personlinkid,openperson,withinventory, searchStr, filterAppend);
            callCustomerByCategoryReport();
            if (Wtf.account.companyAccountPref.enablesalespersonAgentFlow) {
                callCustomerBySalesPersonReport();
            }
            callCustomerProductsMapping();
        } else {
            if(openperson){
                var CustomerReportpanel = Wtf.getCmp("CustomerDetails");
                callBusinessContactWindow(false, null,null , CustomerReportpanel.isCustomer);
                Wtf.getCmp('contactDetailCustomerTab').on('update',CustomerReportpanel.updateGrid, CustomerReportpanel);
            }
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        if(Wtf.getCmp("CustomerDetails")!=null && personlinkid!=null)
            Wtf.getCmp("CustomerDetails").calllinkRowColor(personlinkid);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.customerList.tabTitle"));
}

//Customer-Product Mapping Tab-Neeraj D
function callCustomerProductsMapping(){
    var Reportpanel= Wtf.getCmp("CustomerProductMappings");
    if(Reportpanel==null){
        Reportpanel= new Wtf.account.BusinessPersonProductMapping({
            id: 'CustomerProductMappings',
            border: false,
            layout: 'fit',
            isCustomer: true,
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.CustomersProductMapping"), Wtf.TAB_TITLE_LENGTH),
            tabTip: WtfGlobal.getLocaleText("acc.field.CustomersProductMapping"),
            iconCls:getButtonIconCls(Wtf.etype.customer)
        });
        Wtf.getCmp('mainCustomerDetails').add(Reportpanel);
    }
    Wtf.getCmp('mainCustomerDetails').doLayout();
}
/**
 * searchStr and filterAppend perfom Advanced Search Operations.
 */
function callCustomerReport(personlinkid,openperson,withinventory, searchStr, filterAppend){
    var panel = Wtf.getCmp("CustomerDetails");
    if(panel==null){
        panel = new Wtf.account.BusinessContactPanel({
            id : 'CustomerDetails',
            withinventory:withinventory,
            border : false,
            openperson:openperson,
            personlinkid:personlinkid,
            moduleId:Wtf.Acc_Customer_ModuleId,
            layout: 'fit',
            isCustomer:true,
            custAmountDueMoreThanLimit:false,
            searchJson: searchStr,
            filterAppend: filterAppend,
            title:WtfGlobal.getLocaleText("acc.rem.14"),  //'Customer List',
            iconCls :getButtonIconCls(Wtf.etype.customer)
        });
        /**
         * This below function will show advanced search panel when called from advanced Search.
         */
        panel.on("activate",function(){
            showAdvanceSearch(panel, searchStr, filterAppend);
        });
        Wtf.getCmp('mainCustomerDetails').add(panel);
    }
    Wtf.getCmp('mainCustomerDetails').setActiveTab(panel);
    Wtf.getCmp('mainCustomerDetails').doLayout();

}

function callCustomerDefaultReportList(personlinkid,openperson,withinventory){
    var panel = Wtf.getCmp("CustomerDefaultReportList");
    if(panel==null){
        panel = new Wtf.account.BusinessContactPanel({
            id : 'CustomerDefaultReportList',
            withinventory:withinventory,
            border : false,
            openperson:openperson,
            personlinkid:personlinkid,
            moduleId:Wtf.Acc_Customer_ModuleId,
            layout: 'fit',
            isCustomer:true,
            helpmodeid:56,
            closable:true,
            datasync:false,
            custAmountDueMoreThanLimit:true,
            title:WtfGlobal.getLocaleText("acc.rem.237"),  //'Default Customer List',
            tabTip: WtfGlobal.getLocaleText("acc.DefaultCustomerList.tabTitle"),//'View those Customer(s) who crossed the Credit Limit''
            iconCls :getButtonIconCls(Wtf.etype.customer)
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();

}

function callCustomerByCategoryReport(){
    var panel= Wtf.getCmp("CustomerByCategoryDetails");
    if(panel==null){
        panel= new Wtf.account.BusinessPersonListByCategory({
            id: 'CustomerByCategoryDetails',
            border: false,
            layout: 'fit',
            isCustomer: true,
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.customerList.tabTitleCategory"), Wtf.TAB_TITLE_LENGTH),
            tabTip: WtfGlobal.getLocaleText("acc.customerList.tabTitleCategory"),  //"Customer List By Category",
            iconCls: getButtonIconCls(Wtf.etype.customer)
        });
        Wtf.getCmp('mainCustomerDetails').add(panel);
    }
    Wtf.getCmp('mainCustomerDetails').doLayout();
}
function callCustomerBySalesPersonReport(){
    var panel= Wtf.getCmp("CustomerBySalesPersonDetails");
    if(panel==null){
        panel= new Wtf.account.BusinessPersonListByCategory({
            id: 'CustomerBySalesPersonDetails',
            border: false,
            layout: 'fit',
            isCustomer: true,
            isBySalesPersonOrAgent:true,
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.customerList.CustomerListBySalesPersonTabtitle"), Wtf.TAB_TITLE_LENGTH),
            tabTip: WtfGlobal.getLocaleText("acc.customerList.CustomerListBySalesPersonTabtitle"),  //"Customer List By Sales Person",
            iconCls: getButtonIconCls(Wtf.etype.customer)
        });
        Wtf.getCmp('mainCustomerDetails').add(panel);
    }
    Wtf.getCmp('mainCustomerDetails').doLayout();
}

function callVendorDetails(personlinkid,openperson,withinventory, params){
    // if(!WtfGlobal.EnableDisable(Wtf.UPerm.customer, Wtf.Perm.customer.view)) {
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendor, Wtf.Perm.vendor.view)) {
        var panel = Wtf.getCmp("mainVendorDetails");
        if(panel==null){
            panel = new Wtf.TabPanel({
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.vendorList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.vendorList.tabTitle"),  //'Accounts Payable/Vendor(s)',
                id:'mainVendorDetails',
                closable:true,
                withinventory:withinventory,
                border:false,
                iconCls:'accountingbase vendor',
                activeTab:0
            });
            Wtf.getCmp('as').add(panel);
            callVendorReport(personlinkid,openperson,withinventory, params);
            callVendorByCategoryReport();
            if (Wtf.account.companyAccountPref.enablesalespersonAgentFlow) {
                callVendorByAgentReport();
            }
            callVendorProductsMapping();//extra multiselect productcombobox-NeerajD
        }else {
            if(openperson){
                var VendorReportpanel = Wtf.getCmp("VendorDetails");
                callBusinessContactWindow(false, null, null, VendorReportpanel.isCustomer);
                Wtf.getCmp('contactDetailVendorTab').on('update',VendorReportpanel.updateGrid, VendorReportpanel);
            }
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
        if(Wtf.getCmp("VendorDetails")!=null && personlinkid!=null)
            Wtf.getCmp("VendorDetails").calllinkRowColor(personlinkid);
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.vendorList.tabTitle"));
}
//Vendor-Product Mapping Tab
function callVendorProductsMapping(){
    var Reportpanel= Wtf.getCmp("VendorProductMappings");
    if(Reportpanel==null){
        Reportpanel= new Wtf.account.BusinessPersonProductMapping({
            id: 'VendorProductMappings',
            border: false,
            layout: 'fit',
            isCustomer: false,
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.VendorsProductMapping"), Wtf.TAB_TITLE_LENGTH),
            tabTip: WtfGlobal.getLocaleText("acc.field.VendorsProductMapping"), //"Vendor List By Category",
            iconCls:'accountingbase vendor'
        });
        Wtf.getCmp('mainVendorDetails').add(Reportpanel);
    }
    Wtf.getCmp('mainVendorDetails').doLayout();
}
function callVendorReport(personlinkid,openperson,withinventory, params){
    var VendorReportpanel = Wtf.getCmp("VendorDetails");
    if(VendorReportpanel==null){
        if(params == undefined){
            params={};
        }
        var searchStr=params.searchStr||"";
        var filterAppend=params.filterAppend ||"";
        VendorReportpanel = new Wtf.account.BusinessContactPanel({
            id : 'VendorDetails',
            openperson:openperson,
            withinventory:withinventory,
            border : false,
            layout: 'fit',
            moduleId:Wtf.Acc_Vendor_ModuleId,
            isCustomer:false,
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.vendorList.tab"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.vendorList.tab"), //'Vendor List',
            personlinkid:personlinkid,
            iconCls:'accountingbase vendor',
            searchJson:searchStr,
            filterAppend:filterAppend
        });
        VendorReportpanel.on("activate",function(){
            showAdvanceSearch(VendorReportpanel,searchStr, filterAppend);
        });
        Wtf.getCmp('mainVendorDetails').add(VendorReportpanel);
    }
    Wtf.getCmp('mainVendorDetails').setActiveTab(VendorReportpanel);
    Wtf.getCmp('mainVendorDetails').doLayout();
}
function callVendorByCategoryReport(){
    var Reportpanel= Wtf.getCmp("VendorByCategoryDetails");
    if(Reportpanel==null){
        Reportpanel= new Wtf.account.BusinessPersonListByCategory({
            id: 'VendorByCategoryDetails',
            border: false,
            layout: 'fit',
            isCustomer: false,
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.vendorList.tabTitleCategory"), Wtf.TAB_TITLE_LENGTH),
            tabTip: WtfGlobal.getLocaleText("acc.vendorList.tabTitleCategory"), //"Vendor List By Category",
            iconCls:'accountingbase vendor'
        });
        Wtf.getCmp('mainVendorDetails').add(Reportpanel);
    }
    Wtf.getCmp('mainVendorDetails').doLayout();
}

function callVendorByAgentReport(){
    var Reportpanel= Wtf.getCmp("VendorByAgentDetails");
    if(Reportpanel==null){
        Reportpanel= new Wtf.account.BusinessPersonListByCategory({
            id: 'VendorByAgentDetails',
            border: false,
            layout: 'fit',
            isCustomer: false,
            isBySalesPersonOrAgent:true,
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.vendorList.VendorListByAgentTabtitle"), Wtf.TAB_TITLE_LENGTH),
            tabTip: WtfGlobal.getLocaleText("acc.vendorList.VendorListByAgentTabtitle"), //"Vendor List By Agent",
            iconCls:'accountingbase vendor'
        });
        Wtf.getCmp('mainVendorDetails').add(Reportpanel);
    }
    Wtf.getCmp('mainVendorDetails').doLayout();
}

function callGroupWindow(isEdit, rec, winid){
    winid=(winid==null?"groupWin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.Group({
            isEdit:isEdit,
            record:rec,
            title:WtfGlobal.getLocaleText("acc.coa.coaAccountTypesTabTitle"),  //'Account Types',
            id:winid,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 530,
            height:320,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}

function callGroupReport(){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.groups, Wtf.Perm.groups.view)||(!WtfGlobal.EnableDisable(Wtf.UPerm.groups, Wtf.Perm.groups.create))) {
        var panel = Wtf.getCmp("groupDetails");
        if(panel==null){
            callCOA();
            panel = new Wtf.account.GroupReport({
                id : 'groupDetails',
                border : false,
                layout: 'fit',
                title:WtfGlobal.getLocaleText("acc.coa.coaAccountTypesTabTitle"),  //'Account Types',
                tabTip: WtfGlobal.getLocaleText("acc.coa.coaAccountTypesTabToolTip"),
                iconCls:'accountingbase coa'
            });
            Wtf.getCmp('coa').add(panel);
        }
        Wtf.getCmp('coa').setActiveTab(panel);
        Wtf.getCmp('coa').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.coa.coaAccountTypesTabTitle"));
}

function callCurrencyExchangeWindow(winid){
    winid=(winid==null?"CurrencyExchangewin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        panel = new Wtf.account.CurrencyExchangeWindow({
            id:winid,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 600,
            height: 400,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        });
        panel.show();
        return panel;
    }
}
function callTaxCurrencyExchangeWindow(winid){
    winid=(winid==null?"TaxCurrencyExchangewin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        panel = new Wtf.account.TaxCurrencyExchangeWindow({
            id:winid,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 600,
            height: 400,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        });
        panel.show();
        return panel;
    }
}

function callCalculatorWindow(winid){
    winid=(winid==null?"Calculatorwin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.calculatorWindow({
            id:winid,
            closable: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 270,
            height: 210,
            resizable: true,
            layout: 'fit'
        }).show();
    }
}

function callTax1099Window(winid){
    winid=(winid==null?"tax1099win":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.Tax1099Window({
            id:winid,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 600,
            height: 400,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}
function callCurrencyExchangeDetails(winid,currencyid,title){
    winid=(winid==null?"CurrencyExchangeDetailswin":winid);
    title=(title==null?"Currency Exchange Details":title);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.CurrencyExchangeWindow({
            id:winid,
            currencyhistory:true,
            currencyid:currencyid,
            closable: true,
            title:title,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 600,
            height: 400,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}
function callTaxCurrencyExchangeDetails(winid,currencyid,title){
    winid=(winid==null?"TaxCurrencyExchangeDetailswin":winid);
    title=(title==null?"Tax Currency Exchange Details":title);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.TaxCurrencyExchangeWindow({
            id:winid,
            currencyhistory:true,
            currencyid:currencyid,
            closable: true,
            title:title,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 600,
            height: 400,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}

function getExportUrl(mode, consolidateFlag) {
    var exportUrl = "../../export.jsp";
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    switch(mode) {
        case 112:
            exportUrl = "ACCReports/exportAccounts.do";
            break;
        case 1120:
            exportUrl = "ACCDepreciation/exportAccountDepreciation.do";
            break;
        case 113:
            exportUrl = "ACCCustomerCMN/exportCustomer.do";
            break;
        case 114:
            exportUrl = "ACCVendorCMN/exportVendor.do";
            break;
        case 115:
            exportUrl = "ACCReports/exportLedger.do";
            break;
        case 116:
            exportUrl = "ACCReports/exportTrialBalance.do";
            break;
        case 117:
            exportUrl = "ACCReports/exportLedger.do";
            break;
        case 150:
            exportUrl = "ACCProduct/exportCycleCount.do";
            break;
        case 151:
            exportUrl = "ACCProduct/exportCycleCountWorkSheet.do";
            break;
        case 152:
            exportUrl = "ACCInvoiceCMN/exportGetSalesByCustomer.do";
            break;
        case Wtf.autoNum.Sales_By_Customer_Against_SO:
            exportUrl = "ACCSalesOrderCMN/exportSalesByCustomerForSalesOrder.do";
            break;
        case Wtf.autoNum.JournalEntry:
            exportUrl = consolidateFlag?"ACCJournal/exportJournalEntry.do?consolidateFlag="+consolidateFlag+"&companyids="+companyids+"&gcurrencyid="+gcurrencyid+"&userid="+loginid:"ACCJournal/exportJournalEntry.do";
            break;
        case Wtf.autoNum.Invoice:
            exportUrl = "ACCInvoiceCMN/exportInvoice.do";
            //exportUrl = "ACCInvoiceCMN/exportSalesInvoiceRegisterReport.do";
            break;
        case Wtf.autoNum.PurchaseOrder:
            exportUrl = "ACCPurchaseOrderCMN/exportPurchaseOrder.do";
            break;
        case Wtf.autoNum.securityGateEntry:
            exportUrl = "ACCPurchaseOrderCMN/exportSecurityGateEntry.do";
            break;
        case Wtf.autoNum.Requisition:
            exportUrl = "ACCPurchaseOrderCMN/exportRequisition.do";
            break;
        case Wtf.autoNum.RFQ:
            exportUrl = "ACCPurchaseOrderCMN/exportRFQs.do";
            break;
        case Wtf.autoNum.CustomerCreditExceed:
            exportUrl = "ACCCustomerCMN/exportCustomerCreditLimitExceed.do";
            break;
        case Wtf.autoNum.Payment:
            exportUrl = "ACCVendorPaymentCMN/exportPayment.do";
            break;
        case Wtf.autoNum.Receipt:
            exportUrl = "ACCReceiptCMN/exportReceipt.do"; //This method is moved in accReceiptControllerCMN.java so use "ACCReceiptCMN/exportReceipt.do" instead of this if found any issue.
            break;
        case Wtf.autoNum.SalesOrder:
            exportUrl = "ACCSalesOrderCMN/exportSalesOrder.do";
            break;
        case Wtf.autoNum.GoodsReceipt:
            exportUrl = "ACCGoodsReceiptCMN/exportGoodsReceipts.do";
            break;
        case Wtf.autoNum.CreditNote:
            exportUrl = "ACCCreditNoteCMN/exportCreditNoteMerged.do";
            break;
        case Wtf.autoNum.DebitNote:
            exportUrl = "ACCDebitNote/exportDebitNoteMerged.do";
            break;
        case Wtf.autoNum.BillingSalesOrder:
            //            exportUrl = "ACCSalesOrderCMN/exportBillingSalesOrder.do";
            exportUrl = "ACCSalesOrderCMN/exportSalesOrder.do";
            break;
        case Wtf.autoNum.BillingInvoice:
            //            exportUrl = "ACCInvoiceCMN/exportBillingInvoice.do";
            exportUrl = "ACCInvoiceCMN/exportInvoice.do";
            break;
        case Wtf.autoNum.BillingCreditNote:
            exportUrl = "ACCCreditNoteCMN/exportCreditNoteMerged.do";
            break;
        case Wtf.autoNum.BillingReceipt:
            exportUrl = "ACCReceipt/exportReceipt.do";
            break;
        case Wtf.autoNum.BillingPurchaseOrder:
            //            exportUrl = "ACCPurchaseOrderCMN/exportBillingPurchaseOrder.do";
            exportUrl = "ACCPurchaseOrderCMN/exportPurchaseOrder.do";
            break;
        case Wtf.autoNum.BillingGoodsReceipt:
            //            exportUrl = "ACCGoodsReceiptCMN/exportBillingGoodsReceipts.do";
            exportUrl = "ACCGoodsReceiptCMN/exportGoodsReceipts.do";
            break;
        case Wtf.autoNum.BillingDebitNote:
            exportUrl = "ACCDebitNote/exportDebitNoteMerged.do";
            break;
        case Wtf.autoNum.BillingPayment:
            exportUrl = "ACCVendorPaymentCMN/exportPayment.do";
            break;
        case Wtf.autoNum.AgedPayableWithInv:
            exportUrl = "ACCGoodsReceiptCMN/exportGoodsReceipts.do";
            break;
        case Wtf.autoNum.AgedPayableWithOutInv:
            //            exportUrl = "ACCGoodsReceiptCMN/exportBillingGoodsReceipts.do";
            exportUrl = "ACCGoodsReceiptCMN/exportGoodsReceipts.do";
            break;
        case Wtf.autoNum.VendorAgedPayable:
            exportUrl = "ACCGoodsReceiptCMN/exportVendorAgedPayable.do";
            break;
        case Wtf.autoNum.ExportInvoices:
            exportUrl = "ACCInvoiceCMN/exportInvoices.do";
            break;
        case Wtf.autoNum.getBillingInvoices:
            //            exportUrl = "ACCInvoiceCMN/exportBillingInvoices.do";
            exportUrl = "ACCInvoiceCMN/exportInvoices.do";
            break;
        case Wtf.autoNum.CustomerAgedReceivable:
            exportUrl = "ACCInvoiceCMN/exportCustomerAgedReceivable.do";
            break;
        case Wtf.autoNum.BalanceSheet:
            exportUrl = consolidateFlag?"ACCCombineReports/exportBalanceSheetMerged.do?consolidateFlag="+consolidateFlag+"&companyids="+companyids+"&gcurrencyid="+gcurrencyid+"&userid="+loginid:"ACCReports/exportBalanceSheet.do";
            break;
        case Wtf.autoNum.TradingPnl:
            exportUrl = consolidateFlag?"ACCCombineReports/exportTradingAndProfitLossMerged.do?consolidateFlag="+consolidateFlag+"&companyids="+companyids+"&gcurrencyid="+gcurrencyid+"&userid="+loginid:"ACCReports/exportTradingAndProfitLoss.do";
            break;
        case Wtf.autoNum.CustomPnlBs:
            exportUrl = consolidateFlag?"ACCCombineReports/exportTradingAndProfitLossMerged.do?consolidateFlag="+consolidateFlag+"&companyids="+companyids+"&gcurrencyid="+gcurrencyid+"&userid="+loginid:"ACCReports/exportLayoutPnLAndBalancesheet.do";
            break;
        case Wtf.autoNum.profitAndLossMonthlyCustomLayout:
            exportUrl = "ACCReports/exportMonthlyCustomLayout.do";
            break;
        case Wtf.autoNum.RatioAnalysis:
            exportUrl = "ACCReports/exportRatioAnalysis.do";
            break;
        case Wtf.autoNum.Quotation:
            exportUrl = "ACCSalesOrderCMN/exportQuotation.do";
            break;
        case Wtf.autoNum.Venquotation:
            exportUrl = "ACCPurchaseOrderCMN/exportQuotation.do";
            break;
        case 911:
            exportUrl = "ACCReports/exportCalculatedTax.do";
            break;
        case 912:
            exportUrl = "ACCReports/exportCostCenterSummary.do?consolidateFlag="+consolidateFlag+"&companyids="+companyids+"&gcurrencyid="+gcurrencyid+"&userid="+loginid;
            break;
        case 913:
            exportUrl = "ACCCombineReports/exportSalesByItem.do";
            break;
        case 914:
            exportUrl = "ACCCombineReports/exportDetailedSalesByItem.do";
            break;
        case 915:
            exportUrl = "ACCProduct/exportProduct.do";
        case 916:
            exportUrl = "ACCReports/getGSTReportForGridExport.do";
            break;
        case 917:
            exportUrl="ACCOtherReports/exportJournalEntryFinance.do";
            break;
        case 918:
            exportUrl="ACCInvoiceCMN/exportWeeklyCashFlowUnPaidInvoices.do";
            break;
        case 919:
            exportUrl="ACCGoodsReceiptCMN/exportWeeklyCashFlowUnPaidInvoices.do";
            break;
        case 920:
            exportUrl="ACCInvoiceCMN/exportSalesCommissioReport.do";
            break;
        case 921:
            exportUrl="ACCInvoiceCMN/exportBrandCommissioReport.do";
            break;
         case Wtf.autoNum.salesByProductCategoryDetail:
        exportUrl = "ACCInvoiceCMN/exportInvoiceForSalesProductCategoryDetails.do";
            break;
        case Wtf.autoNum.CustomerAccountStatement:
            exportUrl = "ACCReports/exportCustomerLedger.do";
            break;
        case Wtf.autoNum.VendorAccountStatement:
            exportUrl = "ACCReports/exportVendorLedger.do";
            break;
        case Wtf.autoNum.CustomerAccountLedger:
            exportUrl = "ACCOtherReports/exportCustomerLedger.do";
            break;
        case Wtf.autoNum.VendorAccountLedger:
            exportUrl = "ACCOtherReports/exportVendorLedger.do";
            break;
        case Wtf.autoNum.DeliveryOrder:
            exportUrl = "ACCInvoiceCMN/exportDeliveryOrder.do";
            break;
        case Wtf.autoNum.SalesReturn:
            exportUrl = "ACCInvoiceCMN/exportSalesReturn.do";
            break;
        case Wtf.autoNum.GoodsReceiptOrder:
            exportUrl = "ACCGoodsReceiptCMN/exportGoodsReceiptOrder.do";
            break;
        case Wtf.autoNum.ExportCustomizedReceivableSummary:
            exportUrl = "ACCInvoiceCMN/exportCustomizedCustomerAgedReceivable.do";
            break;
        case Wtf.autoNum.ExportCustomizedPayablesSummary:
            exportUrl = "ACCGoodsReceiptCMN/exportCustomizedVendorAgedPayable.do";
            break;
        case Wtf.autoNum.MonthlySales:
            exportUrl = "ACCInvoiceCMN/exportMonthlySales.do";
            break;
        case Wtf.autoNum.DailySalesReport:
            exportUrl = "ACCInvoiceCMN/exportDailySalesReport.do";
            break;
        case Wtf.autoNum.DailyBookingsReport:
            exportUrl = "ACCSalesOrderCMN/exportDailyBookingsReport.do";
            break;
        case Wtf.autoNum.gstSalesTaxLiabilityReport:
            exportUrl = "AccEntityGST/exportGSTSalesTaxLiabilityReportDetails.do";
            break;
        case Wtf.autoNum.MonthlyBookingsReport:
            exportUrl = "ACCSalesOrderCMN/exportMonthlyBookingsReport.do";
            break;
        case Wtf.autoNum.YearlyBookingsReport:
            exportUrl = "ACCSalesOrderCMN/exportYearlyBookingsReport.do";
            break;
        case Wtf.autoNum.StockStatus:
            exportUrl = "ACCReports/exportStockStatus.do";
            break;
        case Wtf.autoNum.MonthlyRevenue:
            exportUrl = "ACCReports/exportMonthlyRevenue.do";
            break;
        case Wtf.autoNum.MonthlyTradingPnl:
            exportUrl = "ACCReports/exportMonthlyTradingAndProfitLoss.do";
            break;
        case Wtf.autoNum.PurchaseReturn:
            exportUrl = "ACCGoodsReceiptCMN/exportPurchaseReturn.do";
            break;
        case 198:
            exportUrl = "ACCProduct/exportProduct.do";
            break;
        case 1110:
            exportUrl = "ACCProduct/exportProduct.do";
            break;
        case Wtf.autoNum.ProjectStatus:
            exportUrl = "ACCCombineReports/exportProjectStatusReport.do";
            break;
        case 199:
            exportUrl = "ACCProduct/exportProductsByCategory.do";
            break;
        case 200:
            exportUrl = "ACCProductCMN/exportLocationSummary.do";
            break;
        case Wtf.autoNum.BankBookSummary:
            exportUrl = "ACCReports/exportBankBookSummary.do";
            break;
        case Wtf.autoNum.GroupExport:
            exportUrl = "ACCAccount/exportGroups.do";
            break;
        case Wtf.autoNum.AccountForecast:
            exportUrl = "ACCReports/exportAccountForecast.do";
            break;
        case Wtf.autoNum.MonthlyBalanceSheet:
            exportUrl = "ACCReports/exportMonthlyBalanceSheet.do";
            break;
        case Wtf.autoNum.StockLedger:
            exportUrl = "ACCProductCMN/exportStockLedger.do";
            break;
        case Wtf.autoNum.StockAgeing:
            exportUrl = "ACCProductCMN/exportStockAgeing.do";
            break;
        case Wtf.autoNum.StockValuationDetails:
            exportUrl = "ACCProductCMN/exportStockValuationDetailReport.do";
            break;
        case Wtf.autoNum.AssemblyExport:
            exportUrl = "ACCProduct/exportAssemblyProductsWithSerials.do";
            break;
        case Wtf.autoNum.BOMAssemblyExport:
            exportUrl = "ACCProduct/exportAssemblyProductsWithBOM.do";
            break;
        case Wtf.autoNum.assetWorkOrderExport:
            exportUrl = "ACCInvoiceCMN/exportAssetMaintenanceWorkOrders.do";
            break;
        case Wtf.autoNum.ProjectCountryDetailReport:
            exportUrl = "ACCOtherReports/ExportCustomColumnDetailReport.do";
            break;
        case Wtf.autoNum.customLineDetailsReport:
            exportUrl = "ACCOtherReports/ExportCustomColumnDetails.do";
            break;
        case Wtf.autoNum.ProjectCountrySummaryReport:
            exportUrl = "ACCOtherReports/ExportCustomColumnSummaryReport.do";
            break;
        case Wtf.autoNum.PaymentTermSalesCommissionReport:
            exportUrl="ACCInvoiceCMN/exportPaymentTermSalesCommissionReport.do";
            break;
        case Wtf.autoNum.CustomerRevenueReport:
            exportUrl="ACCInvoiceCMN/exportCustomerRevenue.do";
            break;
        case Wtf.autoNum.InventoryMovementReport:
            exportUrl = "ACCReports/exportInventoryMovementReport.do";
            break;
        case Wtf.autoNum.salesBadDebtClaimReport:
            exportUrl = "ACCInvoiceCMN/exportClaimedBadDebtInvoice.do";
            break;
        case Wtf.autoNum.salesBadDebtRecoveredReport:
            exportUrl = "ACCInvoiceCMN/exportRecoveredBadDebtInvoices.do";
            break;
        case Wtf.autoNum.purchaseBadDebtClaimReport:
            exportUrl = "ACCGoodsReceiptCMN/exportClaimedBadDebtInvoice.do";
            break;
        case Wtf.autoNum.purchaseBadDebtRecoveredReport:
            exportUrl = "ACCGoodsReceiptCMN/exportRecoveredBadDebtInvoices.do";
            break;
        case Wtf.autoNum.DimesionReport:
            exportUrl = "ACCReports/exportDimensionsReport.do";
            break;
        case 220:
            exportUrl = "ACCTax/ExportTAx.do"
            break;
        case Wtf.autoNum.VATReport:
            exportUrl = "ACCReports/getVATReportForGridExport.do";
            break;
        case Wtf.autoNum.WHTReport:
            exportUrl = "ACCReports/getWHTReportForGridExport.do";
            break;
        case Wtf.autoNum.MonthlyCustomerAgedReceivable:
            exportUrl = "ACCInvoiceCMN/exportMonthlyCustomerAgedReceivable.do";
            break;
        case Wtf.autoNum.SalesBadDebtReleifAdjustment:
            exportUrl = "ACCInvoiceCMN/exportInvoices.do";
            break;
        case Wtf.autoNum.PurchaseBadDebtReleifAdjustment:
            exportUrl = "ACCGoodsReceiptCMN/exportGoodsReceipts.do";
            break;
        case  Wtf.autoNum.FixedAssetReport :
        case  Wtf.autoNum.DisposedAssetsReport :
            exportUrl = "ACCAsset/exportAssetDetails.do";
            break;
        case Wtf.autoNum.TradingAndProfitLossWithBudget:
            exportUrl = "ACCReports/exportTradingAndProfitLossWithBudget.do";
            break;
        case Wtf.autoNum.MonthlyVendorAgedPayable:
            exportUrl = "ACCGoodsReceiptCMN/exportMonthlyVendorAgedPayable.do";
            break;
        case Wtf.autoNum.salesCommissionDetailReport:
            exportUrl = "ACCInvoiceCMN/exportSalesCommissionDetail.do";
            break;
        case  Wtf.autoNum.loanreport:
            exportUrl = "ACCInvoiceCMN/exportConsignmentLoanDetails.do";
            break;
        case Wtf.autoNum.CycleCountReport:
            exportUrl = "INVCycleCount/getCycleCountReport.do";
            break;
        case Wtf.autoNum.TransactionInOutReport:
            exportUrl = "INVGoodsTransfer/getStockMovementList.do";
            break;
        case Wtf.autoNum.StockMovementReport:
            exportUrl = "INVGoodsTransfer/getDetailedStockMovementList.do";
            break;
        case Wtf.autoNum.StockAvailabilityByCustomerWarehouseReport:
            exportUrl = "ACCInvoiceCMN/getAllUninvoicedConsignmentDetails.do";
            break;
        case Wtf.autoNum.StoreWiseStockBalanceReport:
            exportUrl = "INVStockLevel/getStoreWiseStockInventory.do";
            break;
        case Wtf.autoNum.StoreWiseStockBalanceSummeryReport:
            exportUrl = "INVStockLevel/getStoreWiseStockInventorySummary.do";
            break;
        case Wtf.autoNum.DateWiseStockTrackingReport:
            exportUrl = "INVStockLevel/getDateWiseStockInventory.do";
            break;
        case Wtf.autoNum.DateWiseBatchStockTrackingReport:
            exportUrl = "INVStockLevel/getDateWiseBatchStockInventory.do";
            break;
        case Wtf.autoNum.BatchwiseStockTrackingReport:
            exportUrl = "INVStockLevel/getBachWiseStockInventory.do";
            break;
        case Wtf.autoNum.StockAdjustmentRegister:
            exportUrl = "INVStockAdjustment/getStockAdjustmentList.do";
            break;
        case Wtf.autoNum.StockTransferHistoryRegister:
            exportUrl = "INVGoodsTransfer/getInterStockTransferList.do";
            break;
        case Wtf.autoNum.FullfilledOrdersRegister:
            exportUrl = "INVGoodsTransfer/getStockRequestList.do";
            break;
        case Wtf.autoNum.GoodsPendingOrdersRegister :
            exportUrl = "INVGoodsTransfer/getStockRequestList.do";
            break;
        case Wtf.autoNum.FixedAssetDepreciation:
            exportUrl = "ACCProductCMN/exportAssetDepreciation.do";
            break;
        case Wtf.autoNum.AccountsReEvaluationReport:
            exportUrl = "ACCRevalReports/exportAccountsReEvaluationReport.do";
            break;
        case Wtf.autoNum.pricingBand:
            exportUrl = "ACCMaster/exportPricingBandMasterDetails.do";
            break;
        case Wtf.autoNum.agedSummaryBasedOnSalesPerson:
            exportUrl = "ACCInvoiceCMN/exportSalesPersonAgedSummary.do";
            break;
        case Wtf.autoNum.agedDetailBasedOnSalesPerson:
            exportUrl = "ACCInvoiceCMN/exportSalesPersonAgedDetail.do";
            break;
        case 245:
            exportUrl = "ACCGoodsReceiptCMN/exportPurchaseByVendor.do";
            break;
        case Wtf.autoNum.weeklyCashFlow:
            exportUrl = "ACCReports/exportCashFlow.do";
            break;
        case Wtf.autoNum.inventoryValuation:
            exportUrl = "ACCProductCMN/exportStockLedger.do";
            break;
        case Wtf.autoNum.vendorproductexpiry:
            exportUrl = "ACCCustomer/exportVendorProductExpiryReport.do";
            break;
        case 246:
            exportUrl = "ACCInvoiceCMN/exportForeignCurrencyGainAndLossReport.do";
            break;
        case Wtf.autoNum.ForeignCurrencyExposure:
            exportUrl = "ACCGoodsReceiptCMN/exportForeignCurrencyExposureReport.do";
            break;
        case Wtf.autoNum.GeneralLedger:
            exportUrl = "ACCReports/exportGeneralLedger.do";
            break;
        case Wtf.autoNum.BankReconcilationHistoryDetails:
            exportUrl = "ACCReports/exportReconciliationHistoryDetailsData.do";
            break;
        case Wtf.autoNum.BankReconcilation:
            exportUrl = "ACCReports/exporttReconciliationData.do";
            break;
        case Wtf.autoNum.Dimension_Based_TradingAndProfitLoss:
            exportUrl = "ACCReports/exportDimesionBasedProfitLoss.do";
            break;
        case Wtf.autoNum.Dimension_Based_BalanceSheet:
            exportUrl = "ACCReports/exportDimesionBasedBalanceSheet.do";
            break;
        case Wtf.autoNum.StockRepairReport:
            exportUrl = "INVApproval/getAllStockRepairList.do";
            break;
        case Wtf.autoNum.StockQAReport:
            exportUrl = "INVApproval/getAllQAApprovalList.do";
            break;
        case Wtf.autoNum.LMSJournalEntry:
            exportUrl = "ACCReports/exportJournalEntry.do";
            break;
        case Wtf.autoNum.Dimension_Based_TrialBalance:
            exportUrl = "ACCReports/exportDimesionBasedTrialBalance.do";
            break;
        case Wtf.autoNum.SO_By_ProductReport:
            exportUrl = "ACCSalesOrderCMN/exportSalesOrderByProduct.do";
            break;
        case Wtf.autoNum.PO_By_ProductReport:
            exportUrl = "ACCPurchaseOrderCMN/exportPurchaseOrderByProduct.do";
            break;
        case Wtf.autoNum.ContractReport:
            exportUrl = "ACCContract/exportContractOrders.do";
            break;
        case Wtf.autoNum.AssetMaintenanceSchedulerReport:
            exportUrl = "ACCInvoiceCMN/exportAssetMaintenanceScheduleReport.do";
            break;
        case Wtf.autoNum.InterLocationTransferReport:
            exportUrl = "INVGoodsTransfer/getInterLocationTransferList.do"
            break;
        case Wtf.autoNum.productReplacementReport:
            exportUrl = "ACCSalesOrderCMN/exportReplacementRequestsForReport.do"
            break;
        case Wtf.autoNum.productMaintenanceReport:
            exportUrl = "ACCSalesOrderCMN/exportMaintenanceRequestsForReport.do"
            break;
        case  Wtf.autoNum.AssetDepreciationReport :
            exportUrl = "ACCProductCMN/exportAssetDepreciationDetails.do";
            break;
        case Wtf.autoNum.ReorderLevelReport:
            exportUrl = "INVStockLevel/getReorderLevelReportList.do"
            break;
        case Wtf.autoNum.DeliveryPlanner:
            exportUrl = "ACCDeliveryPlanner/getDeliveryPlanner.do"
            break;
        case Wtf.autoNum.StockRequestOnLoanReport:
            exportUrl = "ACCSalesReturnCMN/getStockRequestOnLoanReport.do"
            break;
        case Wtf.autoNum.MonthlyCommissionOfSalesPerson:
            exportUrl = "ACCSalesOrderCMN/exportMonthlyCommissionOfSalesPersonReport.do";
            break;  
        case Wtf.autoNum.MonthlySalesByProductSubjectToGSTReport:
            exportUrl = "ACCInvoiceCMN/exportMonthlySalesByProductSubjectToGSTReport.do";
            break;  
        case Wtf.autoNum.agedDetailsBasedOnDimension:
            exportUrl = "ACCInvoiceCMN/exportAgedReportBasedOnDimension.do"
            break;
        case Wtf.autoNum.SalesByServiceProductDetailReport:
            exportUrl = "ACCInvoiceCMN/exportSalesByServiceProductDetailReport.do";
            break;  
        case Wtf.autoNum.CustomerPartyLedgerSummary:
            exportUrl = "ACCInvoiceCMN/exportCustomerPartyLedgerSummary.do";
            break;  
        case Wtf.autoNum.CustomerPartyLedgerDetails:
            exportUrl = "ACCInvoiceCMN/exportCustomerPartyLedgerDetails.do";
            break;  
        case Wtf.autoNum.VendorPartyLedgerSummary:
            exportUrl = "ACCGoodsReceiptCMN/exportVendorPartyLedgerSummary.do";
            break;  
        case Wtf.autoNum.VendorPartyLedgerDetails:
            exportUrl = "ACCGoodsReceiptCMN/exportVendorPartyLedgerDetails.do";
            break; 
        case Wtf.autoNum.agedpayablereportBasedOnDimension:
            exportUrl = "ACCGoodsReceiptCMN/exportVendorAgedPayablebasedonDimensions.do"
            break;    
        case Wtf.autoNum.StockRepairPendingReport:
            exportUrl = "INVApproval/getAllQAApprovalReport.do";
            break;
        case Wtf.autoNum.agedDetailsBasedOnDimensionDetailed:
            exportUrl = "ACCInvoiceCMN/exportAgedReceivableDetailedReportBasedOnDimension.do";
            break;    
        case Wtf.autoNum.agedpayabledetailedreportBasedOnDimension:
            exportUrl = "ACCGoodsReceiptCMN/exportVendorAgedPayableDetailedbasedonDimensions.do"
            break;        
        case Wtf.autoNum.salesPersonCommissionDimensionReport:
            exportUrl = "ACCInvoiceCMN/exportSalesPersonCommissionDimensionReport.do";
            break;
        case Wtf.autoNum.LoanDisbursementReport:
            exportUrl = "ACCLoanCMN/exportLoanDisbursements.do";
            break;
        case Wtf.autoNum.RepaymentScheduleReport:
            exportUrl = "ACCLoanCMN/exportRepaymentSheduleDetails.do";
            break;
        case Wtf.autoNum.CreditNoteWithAccountDetail:
            exportUrl = "ACCCreditNoteCMN/exportCreditNoteMerged.do";
            break;
        case Wtf.autoNum.StockReportOnDimension:
            exportUrl = "ACCProductCMN/getDetailedStockMovementList.do";
            break;
       case 1005:
            exportUrl = "ACCCustomerCMN/exportCustomerListBySalesPerson.do";
            break;
        case 1006:
            exportUrl = "ACCVendorCMN/exportVendorListByAgent.do";
            break;
        case Wtf.autoNum.paymentTermSalesCommissionDetailReport:
            exportUrl = "ACCInvoiceCMN/exportPaymentTermSalesCommissionDetailReport.do";
            break;
        case Wtf.autoNum.productPriceReportCustVen:
            exportUrl = "ACCCombineReports/exportProductPriceReportCustVen.do";
            break; 
            /*
             * Export Day End Collection Report
             */
        case Wtf.autoNum.dayEndCollectionReport:
            exportUrl = "ACCReceipt/exportDayEndcollectionDetails.do";
            break;
        case Wtf.autoNum.priceVarianceReport:
            exportUrl = "ACCInvoiceCMN/exportPriceVarianceReport.do";
            break;
        case Wtf.autoNum.customerRegistryReport:
            exportUrl = "ACCCustomerCMN/exportCustomerRegistry.do";
            break;
        case Wtf.autoNum.ProductSummary:
            exportUrl = "ACCProductCMN/ExportProductSummary.do";
            break;
        case Wtf.autoNum.priceListBandReport:
            exportUrl = "ACCProductCMN/exportPriceListBandReport.do";
            break;
        case Wtf.autoNum.vendorRegistryReport:
            exportUrl = "ACCVendorCMN/exportVendorRegistry.do";
            break;
        case Wtf.autoNum.LabourList:
            exportUrl = "ACCLabourCMN/ExportLabours.do";
            break;
        case Wtf.autoNum.machineMasterReport:
            exportUrl = "ACCMachineMaster/exportMachineMaster.do";
            break;
        case Wtf.autoNum.AssetSummeryReport:
            exportUrl = "ACCAsset/exportAssetSummary.do";
            break;
        case Wtf.autoNum.contractMasterReport:
            exportUrl = "ACCContractMaster/exportContractMaster.do";
            break;
        case Wtf.autoNum.exporMRPJobWork:
            exportUrl = "ACCJobWorkController/exportJobWorks.do";
            break;
        case Wtf.autoNum.exportMRPWorkCentre:
            exportUrl = "ACCWorkCentreCMN/exportWorkCentre.do";
            break;
        case Wtf.autoNum.exportMRPWorkOrder:
            exportUrl = "ACCWorkOrder/exportWorkOrder.do";
            break;
         case Wtf.autoNum.exportRoutingTemplate:
            exportUrl = "ACCRoutingManagement/exportRoutingTemplates.do";
            break; 
        case Wtf.autoNum.driverTrackingExport:
            exportUrl = "ACCDeliveryPlanner/exportDriversTrackingReport.do";
            break;
        case Wtf.autoNum.plaReportExport:
            exportUrl = "ACCCombineReports/exportPlaReport.do";
            break;
        case Wtf.autoNum.plaSummaryReportExport:
            exportUrl = "ACCCombineReports/exportPlaSummaryReport.do";
            break;
        case Wtf.autoNum.creditAvailedReportExport:
            exportUrl = "ACCCombineReports/exportCreditAvailedReport.do";
            break;
        case Wtf.autoNum.annexure10Report:
            exportUrl = "ACCCombineReports/exportAnnexure10Report.do";
            break;
        case Wtf.autoNum.rg23Part2:
            exportUrl = "ACCCombineReports/exportRG23PartIIReport.do";
            break;
        case Wtf.autoNum.rg23Part1:
            exportUrl = "ACCProductCMN/exportRG23part1.do";
            break;
        case Wtf.autoNum.dailyStockReport:
            exportUrl = "ACCCombineReports/exportDailyStockRegister.do";
            break;
        case Wtf.autoNum.rule16register:
            exportUrl = "ACCCombineReports/exportRule16Register.do";
            break;
        case Wtf.autoNum.exportmrprejecteditemlist:
            exportUrl = "ACCWorkOrder/exportRejectedItemsList.do";
            break;    
        case Wtf.autoNum.costandsellingpriceforanitemstocustomer:
             exportUrl = "ACCReports/exportDataForCostAndSellingPriceReport.do";
            break;
        case Wtf.autoNum.inputCreditSummaryReport:
             exportUrl = "ACCCombineReports/exportServiceTaxInputCreditSummaryReport.do";
            break;
        case Wtf.autoNum.mrpqcreport:
            exportUrl =  "ACCWorkOrder/exportMRPQCReportList.do";
            break;    
        case Wtf.autoNum.consolidationGenerationReport:
            exportUrl =  "ACCCurrency/exportConsolidationReportGenerationData.do";
            break;    
        case Wtf.autoNum.consolidatioReport:
            exportUrl =  "ACCReports/exportConsolidationReport.do";
            break;   
        case Wtf.autoNum.consolidatioProfitAndLossReport:
            exportUrl =  "ACCReports/exportConsolidationProfitAndLossReport.do";
            break;   
        case Wtf.autoNum.consolidatioBalanceSheetReport:
            exportUrl =  "ACCReports/exportConsolidationBalanceSheetReport.do";
            break;   
        case Wtf.autoNum.consolidationStockReport:
            exportUrl =  "ACCProductCMN/exportConsolidationStockReport.do";
            break;   
        case Wtf.autoNum.consolidationCustomBalanceSheet:
            exportUrl =  "ACCReports/exportCustomConsolidationBalanceSheetReport.do";
            break;   
        case Wtf.autoNum.consolidationCustomPNL:
            exportUrl =  "ACCReports/exportCustomConsolidationPNLReport.do";
            break;   
        case Wtf.autoNum.TDSChallanControlReport:
            exportUrl = "ACCCombineReports/exportTDSChallanControlReport.do";
        break;
        case Wtf.autoNum.ForecastTemplate:
        exportUrl = "ACCJobWorkController/exportForecastTemplate.do";
        break;
        case Wtf.autoNum.workordertaskstatusexport:
        exportUrl = "ACCWorkOrder/exportWorkOrderTaskProgressDetails.do";
        break;
        case Wtf.autoNum.monthwiseGeneralLedgerReport:
            exportUrl =  "ACCReports/exportMonthwiseGeneralLedger.do";
            break;     
        case Wtf.autoNum.SalesAnalysisReport:
            exportUrl =  "ACCInvoiceCMN/exportSalesAnalysisReport.do";
            break;    
        case Wtf.autoNum.columnPurchaseRegisterReprot:
            exportUrl =  "ACCGoodsReceiptCMN/exportPurchaseRegisterXls.do";
            break;                   
        case Wtf.autoNum.accountrevaluationReprot:
            exportUrl =  "ACCRevalReports/exportAccountRevaluationXls.do";
        break;
        case Wtf.autoNum.ForeignCurrencyExposureCustomer:
        exportUrl = "ACCInvoiceCMN/exportForeignCurrencyExposureReport.do";
        break;
        case Wtf.autoNum.DVATForm31:
        exportUrl = "ACCCombineReports/exportDVATForm31Report.do";
        break;
        case Wtf.autoNum.GroupDetailReport:
//            if (false){
////            if (true){
                exportUrl = "ACCReports/exportGroupDetailReport.do";
//            } else{
//                exportUrl = "CommonExportController/exportFile.do";
//            }
        break;
        case Wtf.autoNum.unknownDeducteeTypeReport:
            exportUrl = "ACCCombineReports/exportIndiaComplianceReportData.do";
            break;
        case Wtf.autoNum.PANNotAvailableReport:
            exportUrl = "ACCCombineReports/exportIndiaComplianceReportData.do";
            break;
        //URL for exporting customer summary report    
        case Wtf.autoNum.customerMonthlySalesbyProduct:
            exportUrl = "ACCInvoiceCMN/exportCustomerMonthlySaleByProduct.do";
        break;
        case Wtf.autoNum.ChallanReport:
        exportUrl = "ACCJobWorkController/exportChallanReport.do";
        break;
        case Wtf.autoNum.jwproductsummary:
        exportUrl = "ACCJobWorkController/exportJWProductSummaryReport.do";
        break;
        case Wtf.autoNum.DimensionBasedMonthlyTradingPL:
            exportUrl = "ACCReports/exportDimensionBasedMonthlyTradingAndProfitLoss.do";
            break;
        case Wtf.autoNum.DimensionBasedMonthlyBS:
            exportUrl = "ACCReports/exportDimensionBasedMonthlyBalanceSheet.do";
            break;
        case Wtf.autoNum.inventoryAllStock:
            exportUrl = "INVStockLevel/getAssetDetailswithStock.do";
            break;  
        case Wtf.autoNum.TDSMasterRateReport:
            exportUrl = "ACCVendorPaymentCMN/exportTDSMasterRates.do";
            break;  
        case Wtf.autoNum.VATComputationReport:
            exportUrl = "ACCCombineReports/exportIndiaComplianceReportData.do";
            break;
        case Wtf.autoNum.VATAndCSTCalculationReport:
            exportUrl = "ACCCombineReports/exportVATAndCSTCalculationReport.do";
            break;
        case Wtf.autoNum.CustomerReceivedReport :
            exportUrl = "ACCInvoiceCMN/exportPaymentDetailsForInvoice.do";
            break;
        case Wtf.autoNum.VATPurchaseRegister:
            exportUrl = "ACCInvoiceCMN/exportVATPurchaseRegister.do";
            break;  
        case Wtf.autoNum.VATSalesRegister:
            exportUrl = "ACCInvoiceCMN/exportVATSalesRegister.do";
            break;  
        case Wtf.autoNum.MrpCostingReport:
                exportUrl = "ACCWorkOrder/expoertMRPCosting.do";
            break;    
        case Wtf.autoNum.StockSummaryReport:
            exportUrl = "ACCProductCMN/getStockSummaryReport.do";
        break;
        case Wtf.autoNum.SalesCommissionSchemaReport:
        exportUrl = "ACCOtherReports/ExportSalesCommission.do";
        break;  
        case Wtf.autoNum.GeneralPriceListReport:
        exportUrl = "ACCProduct/exportProductsPrice.do";
        break;
        case Wtf.autoNum.VendorCustomerPriceListReport:
        exportUrl = "ACCReports/exportCustVenProductsPrice.do";
        break; 
        case Wtf.autoNum.columnSalesRegisterReport:
            exportUrl =  "ACCInvoiceCMN/exportColumnarSalesRegister.do";
            break;       
        case Wtf.autoNum.ShippingDOReport:
            exportUrl =  "ACCInvoiceCMN/exportShippingDO.do";
            break;  
        case Wtf.autoNum.ConsignmentReturnList:
            exportUrl =  "ACCInvoiceCMN/getConsignmentReturnDetails.do";
            break;                   
        case Wtf.autoNum.NatureOfPaymentWiseReport:
            exportUrl = "ACCCombineReports/exportIndiaComplianceReportData.do";
            break;                   
        case Wtf.autoNum.checkInandCheckOut:
            exportUrl = "ACCCustomerCMN/exportCustomerCheckInandCheckOutDetails.do";
            break;                   
        case Wtf.autoNum.IncidentCasesReport:
            exportUrl = "ACCCustomerCMN/exportIncidentCasesDetails.do";
            break;                   
        case Wtf.autoNum.landedcostreport:
            exportUrl = "ACCGoodsReceipt/exportLandingCostItemReport.do";
            break;                   
        case Wtf.autoNum.PackingReport:
            exportUrl = "ACCInvoiceCMN/getPackingReportExport.do";
            break;
        case Wtf.autoNum.CostOfManufacturingReport:
            exportUrl = "ACCOtherReports/exportCostOfManufacturing.do";
            break;
        case Wtf.autoNum.GSTR2MatchAndReconcile:
            exportUrl = "AccEntityGST/exportGSTR2AComparisonData.do";
        break;
        case Wtf.autoNum.BudgetVsCost:
            exportUrl = "ACCReports/exportBudgetVsCostReport.do";
        break
        case Wtf.autoNum.GSTR3BReport:
            exportUrl = "AccEntityGST/exportGSTR3BReport.do";
        break;
        case Wtf.autoNum.GSTR3BDetailReport:
            exportUrl = "AccEntityGST/exportGSTR3BSummaryDetails.do";
        break;
        case Wtf.autoNum.GSTRComputationDetailReport:
            exportUrl = "AccEntityGST/ExportGSTRComputationReport.do";
        break;
        case Wtf.autoNum.ActualVsBudget:
            exportUrl = "ACCReports/exportActualVsBudgetReport.do";
        break;
        case Wtf.autoNum.Sales_Report_Master :
            exportUrl = "ACCInvoiceCMN/getSalesReportMasterData.do";
            break;
        case Wtf.autoNum.salesCommissionproductDetailReport:
        exportUrl = "ACCInvoiceCMN/exportSalesCommissionproductDetail.do";
        break;
        case Wtf.autoNum.StockValuationSummary :
            exportUrl = "ACCProductCMN/exportValuationSummary.do";
        break;
    }
    return exportUrl;
}

function callRatioAnalysis(){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.qanalysis, Wtf.Perm.qanalysis.view)) {
        var panel = Wtf.getCmp("ratioanalysis");
        if(panel==null){
            panel = new Wtf.account.RatioAnalysis({
                id : 'ratioanalysis',
                border : false,
                layout: 'fit',
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.ra.tabTitle"), Wtf.TAB_TITLE_LENGTH),  //'Ratio Analysis',
                tabTip: WtfGlobal.getLocaleText("acc.field.ratioAnalysisTabTip"),
                closable: true,
                iconCls:getButtonIconCls(Wtf.etype.ratioreport)
            });
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+" Ratio Analysis Report");
}

function callRCNReport(){
    var panel = Wtf.getCmp("rcnReport");
    if(panel==null){
        panel = new Wtf.account.WtfRCNReport({
            id : 'rcnReport',
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("erp.rcnreporttitle"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("erp.rcnreporttitleTT"),
            topTitle:'<center><font size=4>' + WtfGlobal.getLocaleText("erp.rcnreporttitle") + '</font></center>',
            border : false,
            closable: true,
            layout: 'fit',
            iconCls:'accountingbase financialreport'
        });
        Wtf.getCmp('as').add(panel);
        panel.on('account',callRCNReport);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    panel.on("activate",function(panel){
        panel.westPanel.setWidth(panel.getInnerWidth()/2);
        panel.doLayout();
    });
}

function callBillingPurchaseReceipt(isEdit,rec,winid){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createinvoice)) {
        winid=(winid==null?'BillingPurchaseReceipt':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.TransactionPanel({
                id : winid,
                isEdit:isEdit,
                isCustBill:true,
                cash:true,
                moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
                isCustomer:false,
                record: rec,
                heplmodeid: 33, //This is help mode id
                label:WtfGlobal.getLocaleText("acc.field.PurchaseReceipt"),
                title:WtfGlobal.getLocaleText("acc.accPref.autoCP"),  //'Cash Purchase',
                tabTip:WtfGlobal.getLocaleText("acc.accPref.autoCP"),  //'Cash Purchase',
                iconCls:'accountingbase invoice',
                modeName:'autobillingcashpurchase'
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                }
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.accPref.autoCP"));
}

function callBillingPurchaseReceiptTemplate(winid){
    var isEdit = false;
    var rec = null;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createinvoice)) {
        winid=(winid==null?'BillingPurchaseReceipt':winid);
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.TransactionPanel({
                id : winid,
                isEdit:isEdit,
                isCustBill:true,
                cash:true,
                isTemplate:true,
                moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
                isCustomer:false,
                record: rec,
                //            heplmodeid: 33, //This is help mode id
                label:WtfGlobal.getLocaleText("acc.field.PurchaseReceipt"),
                title:WtfGlobal.getLocaleText("acc.field.CashPurchaseTemplate"),
                tabTip:WtfGlobal.getLocaleText("acc.field.CashPurchaseTemplate"),
                iconCls:'accountingbase invoice',
                modeName:'autobillingcashpurchase'
            });
            panel.on("activate", function(){
                if(Wtf.isIE7) {
                    var northHt=(Wtf.isIE?240:210);
                    var southHt=(Wtf.isIE?210:150);
                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
                    panel.NorthForm.setHeight(northHt);
                    panel.southPanel.setHeight(southHt);
                }
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.accPref.autoCP"));
}
//function callBillingGoodsReceipt(isEdit,rec,winid, isSelfBilledInvoice){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createvendorinvoice)) {
//        winid=(winid==null?'BillingGoodsReceipt':winid);
//        var panel = Wtf.getCmp(winid);
//        if(panel==null){
//            panel = new Wtf.account.TransactionPanel({
//                id : winid,
//                isEdit:isEdit,
//                isCustBill:true,
//                moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
//                isCustomer:false,
//                record: rec,
//                isSelfBilledInvoice:isSelfBilledInvoice,
//                heplmodeid: 15, //This is help mode id
//                label:WtfGlobal.getLocaleText("acc.agedPay.venInv"),
//                title:WtfGlobal.getLocaleText("acc.accPref.autoVI"),  //'Vendor Invoice',
//                tabTip:WtfGlobal.getLocaleText("acc.accPref.autoVI"),  //'Vendor Invoice',
//                closable: true,
//                iconCls:'accountingbase invoice',
//                modeName:'autobillinggoodsreceipt'
//            });
//            panel.on("activate", function(){
//                if(Wtf.isIE7) {
//                    var northHt=(Wtf.isIE?240:210);
//                    var southHt=(Wtf.isIE?210:150);
//                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
//                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
//                    panel.NorthForm.setHeight(northHt);
//                    panel.southPanel.setHeight(southHt);
//                }
//                panel.doLayout();
//            }, this);
//            Wtf.getCmp('as').add(panel);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.accPref.autoVI"));
//}
//function callBillingGoodsReceiptTemplate(winid){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createvendorinvoice)) {
//        winid=(winid==null?'BillingGoodsReceiptTemplate':winid);
//        var panel = Wtf.getCmp(winid);
//        if(panel==null){
//            panel = new Wtf.account.TransactionPanel({
//                id : winid,
//                //                isEdit:isEdit,
//                isCustBill:true,
//                isTemplate:true,
//                moduleid:Wtf.Acc_Vendor_Invoice_ModuleId,
//                isCustomer:false,
//                //                record: rec,
//                //                heplmodeid: 15, //This is help mode id
//                label:WtfGlobal.getLocaleText("acc.agedPay.venInv"),
//                title:WtfGlobal.getLocaleText("acc.field.VendorInvoiceTemplate"),
//                tabTip:WtfGlobal.getLocaleText("acc.field.VendorInvoiceTemplate"),
//                closable: true,
//                iconCls:'accountingbase invoice',
//                modeName:'autobillinggoodsreceipt'
//            });
//            panel.on("activate", function(){
//                if(Wtf.isIE7) {
//                    var northHt=(Wtf.isIE?240:210);
//                    var southHt=(Wtf.isIE?210:150);
//                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
//                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
//                    panel.NorthForm.setHeight(northHt);
//                    panel.southPanel.setHeight(southHt);
//                }
//                panel.doLayout();
//            }, this);
//            Wtf.getCmp('as').add(panel);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.accPref.autoVI"));
//}

//function callBillingGoodsReceiptList(id,check,consolidateFlag,searchStr, filterAppend){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.viewvendorinvoice)) {
//        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
//        var panelID = "BillingGRList";
//        panelID = consolidateFlag?panelID+'Merged':panelID;
//
//        var panel = Wtf.getCmp(panelID);
//        if(panel==null){
//            panel = getVendorInvoiceTab(true, panelID, WtfGlobal.getLocaleText("acc.grList.tabTitle"), undefined, consolidateFlag,undefined,searchStr, filterAppend,Wtf.Acc_Vendor_Invoice_ModuleId);
//            Wtf.getCmp('as').add(panel);
//            panel.on('journalentry',callJournalEntryDetails);
//            panel.expandInvoice(id,check);
//        }else{
//            panel.expandInvoice(id,check);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//        showAdvanceSearch(panel,searchStr, filterAppend);
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.accPref.autoVI"));
//}

//function callBillingPayment(directPayment, invoiceRecord){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createpayment)) {
//        var panel = Wtf.getCmp("billingpayment");
//        if(panel!=null){
//            Wtf.getCmp('as').remove(panel);
//            panel.destroy();
//            panel=null;
//        }
//        if(panel==null){
//            panel = new Wtf.account.OSDetailPanel({
//                id : 'billingpayment',
//                border : false,
//                isReceipt:false,
//                isCustBill:true,
//                moduleId:Wtf.Acc_Make_Payment_ModuleId,
//                cls: 'paymentFormPayMthd',
//                directPayment : directPayment,
//                invoiceRecord : invoiceRecord,
//                layout: 'border',
//                helpmodeid: 10, //This is help mode id
//                title:WtfGlobal.getLocaleText("acc.accPref.autoMP"), //'Make Payment',
//                iconCls:'accountingbase makepayment',
//                closable: true,
//                modeName:'autobillingpayment'
//            //            vendorid: getCmp("account"+config.helpmodeid+this.id).getValue()       // Done by Neeraj
//            });
//            panel.on("activate", function(){
//                panel.doLayout();
//                Wtf.getCmp(panel.id+"wrapperPanelNorth").doLayout();
//            }, this);
//            Wtf.getCmp('as').add(panel);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.accPref.autoMP"));
//}

//function callBillingPaymentReport(searchStr, filterAppend){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.viewpayment)) {
//        var panel = Wtf.getCmp("paymentBillingReport");
//        if(panel==null){
//            panel = new Wtf.account.ReceiptReport({
//                id : 'paymentBillingReport',
//                border : false,
//                searchJson: searchStr,
//                filterConjuctionCrit:filterAppend,
//                moduleid:Wtf.Acc_Make_Payment_ModuleId,
//                helpmodeid: 23,
//                layout: 'fit',
//                isCustBill:true,
//                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.pmList.tabTitle"),Wtf.TAB_TITLE_LENGTH),
//                tabTip:WtfGlobal.getLocaleText("acc.pmList.tabTitle"),  //'Payment Made Report',
//                closable: true,
//                isReceipt:false,
//                iconCls:'accountingbase makepaymentreport'
//            });
//            Wtf.getCmp('as').add(panel);
//            panel.on('journalentry',callJournalEntryDetails);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//        showAdvanceSearch(panel,searchStr, filterAppend);
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.pmList.tabTitle"));
//}

//function callBillingSalesOrder(isEdit,rec,winid, copyInv,templateId, isViewTemplate){
//    var isCopyFromTemplate = (templateId == null || templateId == undefined)?false:true;
//    var isViewTemplate = (isViewTemplate == null || isViewTemplate == undefined)?false:isViewTemplate;
//    winid=(winid==null?'bsalesorder':winid);
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso)) {
//        var label='Sales Order';
//        if(copyInv !== undefined && copyInv !== "" && copyInv !== null && copyInv){
//            winid = 'copy'+winid;
//        }else{
//            copyInv = false;
//        }
//        var panel = Wtf.getCmp(winid);
//        if(panel==null){
//            panel = new Wtf.account.TransactionPanel({
//                id : winid,
//                isEdit: isEdit,
//                copyInv : copyInv,
//                record: rec,
//                isCustomer:true,
//                templateId:templateId,
//                isCopyFromTemplate:isCopyFromTemplate,
//                isViewTemplate:isViewTemplate,
//                isCustBill:true,
//                isOrder:true,
//                label:WtfGlobal.getLocaleText("acc.field.Order"),
//                border : false,
//                heplmodeid: 11,
//                //            layout: 'border',
//                title:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoSO"):(Wtf.util.Format.ellipsis(((copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cso"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so")))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH))))),
//                tabTip:(isViewTemplate?WtfGlobal.getLocaleText("acc.field.ViewSalesOrderTemplate"):((isCopyFromTemplate?WtfGlobal.getLocaleText("acc.accPref.autoSO"):((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so"))+" "+((rec != null)?rec.data.billno:""))))),
//                closable: true,
//                iconCls:'accountingbase salesorder',
//                modeName:'autobillingso'
//            });
//            panel.on("activate", function(){
//                if(Wtf.isIE7) {
//                    var northHt=(Wtf.isIE?150:180);
//                    var southHt=(Wtf.isIE?210:150);
//                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
//                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
//                    panel.NorthForm.setHeight(northHt);
//                    panel.southPanel.setHeight(southHt);
//                }
//                panel.doLayout();
//            }, this);
//            Wtf.getCmp('as').add(panel);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        panel.on('update',  function(){
//            if(isEdit == true && !isCopyFromTemplate){
//                var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
//            Wtf.getCmp(selectedModeId).loadStore();Wtf.getCmp('as').remove(panel);
//            }
//        }, this);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.wtfTrans.so"));
//}

//function callBillingSalesOrderTemplate(winid){
//    var isEdit = false;
//    var copyInv = false;
//    var rec  = null;
//    winid=(winid==null?'bsalesordertemplate':winid);
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso)) {
//        var label=WtfGlobal.getLocaleText("acc.accPref.autoSO");
//        if(copyInv !== undefined && copyInv !== "" && copyInv !== null && copyInv){
//            winid = 'copy'+winid;
//        }else{
//            copyInv = false;
//        }
//        var panel = Wtf.getCmp(winid);
//        if(panel==null){
//            panel = new Wtf.account.TransactionPanel({
//                id : winid,
//                isEdit: isEdit,
//                copyInv : copyInv,
//                record: rec,
//                isCustomer:true,
//                isTemplate:true,
//                isCustBill:true,
//                isOrder:true,
//                label:WtfGlobal.getLocaleText("acc.field.Order"),
//                border : false,
//                //            heplmodeid: 11,
//                //            layout: 'border',
//                title:WtfGlobal.getLocaleText("acc.field.SalesOrderTemplate"),
//                tabTip:WtfGlobal.getLocaleText("acc.field.SalesOrderTemplate"),
//                closable: true,
//                iconCls:'accountingbase salesorder',
//                modeName:'autobillingso'
//            });
//            panel.on("activate", function(){
//                if(Wtf.isIE7) {
//                    var northHt=(Wtf.isIE?150:180);
//                    var southHt=(Wtf.isIE?210:150);
//                    Wtf.getCmp(winid + 'southEastPanel').setHeight(southHt);
//                    Wtf.getCmp(winid + 'southEastPanel').setWidth(650);
//                    panel.NorthForm.setHeight(northHt);
//                    panel.southPanel.setHeight(southHt);
//                }
//                panel.doLayout();
//            }, this);
//            Wtf.getCmp('as').add(panel);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        panel.on('update',  function(){
//            if(isEdit == true){
//                var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
//            Wtf.getCmp(selectedModeId).loadStore();Wtf.getCmp('as').remove(panel);
//            }
//        }, this);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.wtfTrans.so"));
//}

function callDeliveryOrder(isEdit,rec,winid,isJobWorkOutReciever,invoicefromorder,invoicefromorderrec){
    winid=(winid==null?'deliveryorder':winid);
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.deliveryreport, Wtf.Perm.deliveryreport.creatdo)) {
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.DeliveryOrderPanel({
                id : winid,
                isEdit: isEdit,
                record: rec,
                isCustomer:true,
                isCustBill:false,
                readOnly:false,
                invoicefromorder:invoicefromorder,//flag when DO is created from SO Form
                invoicefromorderrec:invoicefromorderrec,
                isJobWorkOutReciever:isJobWorkOutReciever,
                isOrder:true,//print record button at transaction level
                label:isJobWorkOutReciever?WtfGlobal.getLocaleText("acc.jobWorkOut.jobworkdeliveryorder"):WtfGlobal.getLocaleText("acc.accPref.autoDO"),
                border : false,
                heplmodeid: 11,
                moduleid:Wtf.Acc_Delivery_Order_ModuleId,
                //            layout: 'border',
                title:isJobWorkOutReciever?WtfGlobal.getLocaleText("acc.jobWorkOut.jobworkdeliveryorder"):((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.edo"):WtfGlobal.getLocaleText("acc.wtfTrans.do"))),
                tabTip:isJobWorkOutReciever?WtfGlobal.getLocaleText("acc.jobWorkOut.jobworkdeliveryorder"):((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.edo"):WtfGlobal.getLocaleText("acc.wtfTrans.do"))),
                //Wtf.util.Format.ellipsis(((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so"))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
                closable: true,
                iconCls:'accountingbase deliveryorder',
                modeName:'autodo'
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(isEdit == true){
                //var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
                Wtf.getCmp("DeliveryOrderList").loadStore();
                Wtf.getCmp('as').remove(panel);
            }
        }, this);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.accPref.autoDO"));
}
function callContractOrder(isEdit, rec, winid,isNormalContract){

    if(!Wtf.account.companyAccountPref.activateSalesContrcatManagement && isNormalContract){
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),WtfGlobal.getLocaleText("acc.sales.contrcat.management.activate.msg")],3);
        return;
    }
    winid=(winid==null?"productwindow":winid);
//    if(isNormalContract){
        winid = (isEdit)?"editnormalcontractcreationtab":"normalcontractcreationtab";
//    }
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.NewContract({
            title:isEdit? WtfGlobal.getLocaleText("acc.field.editSalesContract") : WtfGlobal.getLocaleText("acc.lp.createscont"), // "Contract" : "Edit Contract",
            tabTip:isEdit? WtfGlobal.getLocaleText("acc.field.editSalesContract") : WtfGlobal.getLocaleText("acc.lp.createscont"), // "Contract" : "Edit Contract",
            id:winid,
            isEdit:isEdit,
            moduleid:isNormalContract?Wtf.Acc_Contract_ModuleId:Wtf.Acc_Lease_Contract,
            isNormalContract:isNormalContract,
            isClone:false,
            record: rec,
            iconCls :getButtonIconCls(Wtf.etype.product),
            layout:'fit',
            closable:true,
            border:false,
            modeName:'autocontract'
        });

        Wtf.getCmp('as').add(panel);
    }

    panel.on('update',function(){
        if(isEdit == true){
            if(Wtf.getCmp("normalcontractorderreport")){
                Wtf.getCmp("normalcontractorderreport").loadStore();
            }

            Wtf.getCmp('as').remove(panel);
        }
    },this);
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();

}


function callSalesReturn(isEdit,rec,winid){
    winid=(winid==null?'salesreturn':winid);
    //if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso)) {
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.SalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            record: rec,
            isCustomer:true,
            isCustBill:false,
            label:WtfGlobal.getLocaleText("acc.accPref.autoSR"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Sales_Return_ModuleId,
            //            layout: 'border',
            title:WtfGlobal.getLocaleText("acc.accPref.autoSR"),
            tabTip:WtfGlobal.getLocaleText("acc.accPref.autoSR"),
            closable: true,
            iconCls:'accountingbase deliveryorder',
            modeName:'autosr'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);

    Wtf.getCmp('as').doLayout();
}
function callContractOrderReport(consolidateFlag,isEntry,isNormalContract,reportbtnshwFlag){
        if(!Wtf.account.companyAccountPref.activateSalesContrcatManagement && isNormalContract){
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),WtfGlobal.getLocaleText("acc.sales.contrcat.management.activate.msg")],3);
        return;
    }
    isNormalContract=isNormalContract!=undefined?isNormalContract:false;
    consolidateFlag = consolidateFlag!=undefined? consolidateFlag : false;
    isEntry = isEntry!=undefined? isEntry : false;
    var panelID = (isNormalContract)?'normalcontractorderreport':'contractorderreport';
    panelID = reportbtnshwFlag? panelID : panelID+'Entry';
    panelID = consolidateFlag? panelID+'Merged' : panelID;
    var reportPanel = Wtf.getCmp(panelID);
    if(reportPanel == null) {
        reportPanel = new Wtf.account.NewContractReport({
            id : panelID,
            title: (isNormalContract && isEntry)?WtfGlobal.getLocaleText("acc.dimension.module.35"):WtfGlobal.getLocaleText("acc.LeaseReport.tabTitle"), // "Contract Report",
            tabTip: (isNormalContract && isEntry)?WtfGlobal.getLocaleText("acc.dimension.module.35"):WtfGlobal.getLocaleText("acc.LeaseReport.tabTitle"), // "Contract Report",
            consolidateFlag:consolidateFlag,
            reportbtnshwFlag:reportbtnshwFlag,
            isNormalContract:isNormalContract,
            layout: 'fit',
            closable : true,
            moduleId:isNormalContract?Wtf.Acc_Contract_ModuleId:Wtf.Acc_Lease_Contract,
            border : false,
            iconCls :getButtonIconCls(Wtf.etype.product)
        });
        Wtf.getCmp('as').add(reportPanel);
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}

function callContractDetails(record, isNormalContract){
    var panel = Wtf.getCmp("mainContractDetails");
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.contractDetails.tabTitle"),Wtf.TAB_TITLE_LENGTH), // 'Contract Details',
            tabTip:WtfGlobal.getLocaleText("acc.contractDetails.tabTitle"), // 'Contract Details',
            id:'mainContractDetails',
            closable:true,
            border:false,
            iconCls :getButtonIconCls(Wtf.etype.product)
        });
        Wtf.getCmp('as').add(panel);
        callContractDetailsTab(record, isNormalContract);
        callContractActivityDetailsTab(record);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callContractDetailsTab(record, isNormalContract){
    var reportPanel = Wtf.getCmp('contractdetailsview');
    if(reportPanel == null) {
        reportPanel = new Wtf.contractDetailsView({
            id : 'contractdetailsview',
            title: WtfGlobal.getLocaleText("acc.contractDetails.tabTitle"), // "Contract Details",
            tabTip: WtfGlobal.getLocaleText("acc.contractDetails.tabTitle"), // "Contract Details",
            record:record,
            isNormalContract:isNormalContract,
            layout: 'fit',
            border : false,
            iconCls :getButtonIconCls(Wtf.etype.product)
        });
        Wtf.getCmp('mainContractDetails').add(reportPanel);
    }
    Wtf.getCmp('mainContractDetails').setActiveTab(reportPanel);
    Wtf.getCmp('mainContractDetails').doLayout();
}

function callContractActivityDetailsTab(record){
    var reportPanel = Wtf.getCmp('contractactivitydetailstabview');
    if(reportPanel == null) {
        reportPanel = new Wtf.ContractActivityPanel({
            id : 'contractactivitydetailstabview',
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.contractActivityPanel.ContractActivitiesDetails"),Wtf.TAB_TITLE_LENGTH), // 'Contract Activity Details',
            tabTip: WtfGlobal.getLocaleText("acc.contractActivityPanel.ContractActivitiesDetails"), // 'Contract Activity Details',
            record:record,
            layout: 'fit',
            border : false,
            iconCls :getButtonIconCls(Wtf.etype.product)
        });
        Wtf.getCmp('mainContractDetails').add(reportPanel);
        reportPanel.on("activate",function(){
            reportPanel.doLayout();
        },this);
    }

    Wtf.getCmp('mainContractDetails').doLayout();
}

function callProductProfilerTab(record,fileName){
    var reportPanel = Wtf.getCmp('productprofilertabview'+record.data.pid);   // ERP-13247 [SJ]
    if(reportPanel == null) {
        reportPanel = new Wtf.ProductProfilerPanel({
            id : 'productprofilertabview'+record.data.pid,
            title: record.data.productname+" - "+Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.invoiceList.expand.pDetails"),Wtf.TAB_TITLE_LENGTH), // 'Product Details', // ERP-13247 [SJ]
            tabTip: WtfGlobal.getLocaleText("acc.tooltip.viewproductdetails") + " of "+ record.data.productname, // 'View Product Details',  // ERP-13247 [SJ]
            record:record,
            layout: 'fit',
            border : false,
            closable:true,
            fileName:fileName,
            iconCls :getButtonIconCls(Wtf.etype.product)
        });
        Wtf.getCmp('as').add(reportPanel);
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}

function callCustomerContractDetailsTab(record){
    var reportPanel = Wtf.getCmp('customercontractdetails');
    if(reportPanel == null) {
        reportPanel = new Wtf.account.CustomerContractDetails({
            id : 'customercontractdetails',
            title: record.data.accname+WtfGlobal.getLocaleText("acc.customerContractDetails.tabTitle"), // Customer Name + "'s Contracts",
            tabTip: record.data.accname+WtfGlobal.getLocaleText("acc.customerContractDetails.tabTitle"), // Customer Name + "'s Contracts",
            record: record,
            layout: 'fit',
            closable : true,
            border : false,
            iconCls :getButtonIconCls(Wtf.etype.product)
        });
        Wtf.getCmp('as').add(reportPanel);
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}

function callFixedAssetDeliveryOrder(isEdit,rec,winid,isFixedAsset,isLeaseFixedAsset){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.assetsales, Wtf.Perm.assetsales.createfado) &&!isEdit) ||(!WtfGlobal.EnableDisable(Wtf.UPerm.assetsales, Wtf.Perm.assetsales.editfado) &&isEdit)||(!WtfGlobal.EnableDisable(Wtf.UPerm.leaseorder, Wtf.Perm.leaseorder.createldo)&&isLeaseFixedAsset)||(!WtfGlobal.EnableDisable(Wtf.UPerm.leaseorder, Wtf.Perm.leaseorder.editldo)&&isLeaseFixedAsset&&isEdit)) {
        winid=(winid==null?'deliveryorder':winid);
        //var editid=(isEdit)?'Edit':''
        isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
        isFixedAsset=(isFixedAsset)?isFixedAsset:false;

        if(isFixedAsset){
            winid=(isEdit)?'EditFixedAssetdeliveryorder':'FixedAssetdeliveryorder'
        }else if(isLeaseFixedAsset){
            winid=(isEdit)?'EditLeaseFixedAssetdeliveryorder':'LeaseFixedAssetdeliveryorder';
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.FixedAssetDeliveryOrderPanel({
                id : winid,
                isEdit: isEdit,
                record: rec,
                isFixedAsset:isFixedAsset,
                isLeaseFixedAsset:isLeaseFixedAsset,
                isCustomer:true,
                isCustBill:false,
                label:(isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.lease.DO"):WtfGlobal.getLocaleText("acc.fixedAssetDeliveryOrder"),
                border : false,
                heplmodeid: 11,
                moduleid:isFixedAsset ?  Wtf.Acc_FixedAssets_DeliveryOrder_ModuleId : isLeaseFixedAsset?Wtf.Acc_Lease_DO:Wtf.Acc_Delivery_Order_ModuleId ,
                //            layout: 'border',
                title:(isLeaseFixedAsset)?(isEdit?('Edit'+' '+WtfGlobal.getLocaleText("acc.lease.DO")+'-'+rec.data.billno):(WtfGlobal.getLocaleText("acc.lease.DO"))):(isEdit?(WtfGlobal.getLocaleText("acc.wtfTrans.edo")+'-'+rec.data.billno):WtfGlobal.getLocaleText("acc.fixedAssetDeliveryOrder")),
                tabTip:(isLeaseFixedAsset)?(isEdit?('Edit'+' '+WtfGlobal.getLocaleText("acc.lease.DO")+'-'+rec.data.billno):(WtfGlobal.getLocaleText("acc.lease.DO"))):(isEdit?(WtfGlobal.getLocaleText("acc.wtfTrans.edo")+'-'+rec.data.billno):WtfGlobal.getLocaleText("acc.fixedAssetDeliveryOrder")),
                //Wtf.util.Format.ellipsis(((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so"))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
                closable: true,
                iconCls:'accountingbase deliveryorder',
                modeName:'autodo'
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(isEdit == true){
                //var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
                Wtf.getCmp("DeliveryOrderList").loadStore();
                Wtf.getCmp('as').remove(panel);
            }
        }, this);
        Wtf.getCmp('as').doLayout();
    }else
        WtfComMsgBox(46,0,false,(isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating"))+" "+WtfGlobal.getLocaleText("acc.fixedAssetDeliveryOrder"));
}

function callViewFixedAssetDeliveryOrder(isEdit,rec,winid,isFixedAsset,isLeaseFixedAsset){
    isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
    isFixedAsset=(isFixedAsset)?isFixedAsset:false;
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.FixedAssetDeliveryOrderPanel({
            id : winid,
            isEdit: isEdit,
            record: rec,
            readOnly:true,
            isFixedAsset:isFixedAsset,
            isLeaseFixedAsset:isLeaseFixedAsset,
            isCustomer:true,
            isCustBill:false,
            label:(isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.lease.DO"):WtfGlobal.getLocaleText("acc.fixedAssetDeliveryOrder"),
            border : false,
            heplmodeid: 11,
            isViewTemplate:true,
            moduleid:isFixedAsset ?  Wtf.Acc_FixedAssets_DeliveryOrder_ModuleId : isLeaseFixedAsset ? Wtf.Acc_Lease_DO : Wtf.Acc_Delivery_Order_ModuleId ,
            title:(isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.lease.ViewDO")+'-'+rec.data.billno:(WtfGlobal.getLocaleText("acc.fixedasset.ViewDO")),
            tabTip:(isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.lease.ViewDO")+'-'+rec.data.billno:(WtfGlobal.getLocaleText("acc.fixedasset.ViewDO")),
            closable: true,
            iconCls:'accountingbase deliveryorder',
            modeName:'autodo'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            Wtf.getCmp("DeliveryOrderList").loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}

function callSalesReturn(isEdit,rec,winid,isNoteAlso,isPaymentAlso){
    winid=(winid==null?'salesreturn':winid);
    //if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso)) {
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.SalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            record: rec,
            isCustomer:true,
            readOnly:false,
            isNoteAlso:isNoteAlso,
            isPayment:isPaymentAlso,
            isCustBill:false,
            label:WtfGlobal.getLocaleText("acc.accPref.autoSR"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Sales_Return_ModuleId,
            //            layout: 'border',
            title:WtfGlobal.getLocaleText("acc.accPref.autoSR"),
            tabTip:WtfGlobal.getLocaleText("acc.accPref.autoSR"),
            closable: true,
            iconCls:'accountingbase deliveryorder',
            modeName:'autosr'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);

    Wtf.getCmp('as').doLayout();
}
function callLeaseSalesReturn(isEdit,rec,winid,isLeaseFixedAsset){
    winid=(winid==null?'leasesalesreturn':winid);
    //if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso)) {
    isLeaseFixedAsset=(isLeaseFixedAsset)?isLeaseFixedAsset:false;
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.FixedAssetSalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            record: rec,
            isCustomer:true,
            isCustBill:false,
            label:WtfGlobal.getLocaleText("acc.accPref.leaseautoSR"),
            border : false,
            heplmodeid: 11,
            isLeaseFixedAsset:isLeaseFixedAsset,
            moduleid:Wtf.Acc_Lease_Return,
            //            layout: 'border',
            title:WtfGlobal.getLocaleText("acc.accPref.leaseautoSR"),
            tabTip:WtfGlobal.getLocaleText("acc.accPref.leaseautoSR"),
            closable: true,
            iconCls:'accountingbase deliveryorder',
            modeName:'autosr'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);

    Wtf.getCmp('as').doLayout();
}

function callEditSalesFixedAssetSalesReturn(isEdit,rec,winid, copyInv,isLeaseFixedAsset){
    //  if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createpo)) {
    isLeaseFixedAsset = (isLeaseFixedAsset)?isLeaseFixedAsset:false;
    if(copyInv !== undefined && copyInv !== "" && copyInv !== null && copyInv){
        winid = 'leasecopy'+winid;
    }else{
        copyInv = false;
    }
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.FixedAssetSalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            copyInv:copyInv,
            record: rec,
            isCustomer:true,
            isCustBill:false,
            isLeaseFixedAsset:isLeaseFixedAsset,
            label:WtfGlobal.getLocaleText("acc.accPref.autoSR"),
            border : false,
            heplmodeid: 11,
            moduleid:isLeaseFixedAsset ? Wtf.Acc_Lease_Return : Wtf.Acc_Sales_Return_ModuleId,
            //            layout: 'border',
            title:copyInv?WtfGlobal.getLocaleText("acc.field.CopySalesReturn") :(isLeaseFixedAsset ? WtfGlobal.getLocaleText("acc.field.EditLeaseSalesReturn"): WtfGlobal.getLocaleText("acc.field.EditSalesReturn")),
            tabTip:copyInv?WtfGlobal.getLocaleText("acc.field.CopySalesReturn") :(isLeaseFixedAsset ? WtfGlobal.getLocaleText("acc.field.EditLeaseSalesReturn"): WtfGlobal.getLocaleText("acc.field.EditSalesReturn")),
            //Wtf.util.Format.ellipsis(((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so"))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:'autosr'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            //var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
            Wtf.getCmp("SalesReturnList").Store.load({
                params:{
                    start : 0,
                    limit : 30
                }
            });
        Wtf.getCmp('as').remove(panel);
    }
    }, this);
Wtf.getCmp('as').doLayout();
// }
//else
//  WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.wtfTrans.po"));
}

function callViewSalesFixedAssetSalesReturn(isEdit,rec,winid, copyInv,isLeaseFixedAsset){
    isLeaseFixedAsset = (isLeaseFixedAsset)?isLeaseFixedAsset:false;
    winid="viewleasesalesreturn"+winid;
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.FixedAssetSalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            copyInv:copyInv,
            record: rec,
            readOnly:true,
            isViewTemplate:true,
            isCustomer:true,
            isCustBill:false,
            isLeaseFixedAsset:isLeaseFixedAsset,
            label:WtfGlobal.getLocaleText("acc.accPref.autoSR"),
            border : false,
            heplmodeid: 11,
            moduleid:isLeaseFixedAsset ? Wtf.Acc_Lease_Return : Wtf.Acc_Sales_Return_ModuleId,
            title:isLeaseFixedAsset ? WtfGlobal.getLocaleText("acc.erp.viewleasesalesreturn") : WtfGlobal.getLocaleText("acc.erp.viewsalesreturn"),
            tabTip:isLeaseFixedAsset ? WtfGlobal.getLocaleText("acc.erp.viewleasesalesreturn") : WtfGlobal.getLocaleText("acc.erp.viewsalesreturn"),
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:'autosr'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            Wtf.getCmp("SalesReturnList").Store.load({
                params:{
                    start : 0,
                    limit : 30
                }
            });
        Wtf.getCmp('as').remove(panel);
    }
    }, this);
Wtf.getCmp('as').doLayout();
}

function callPurchaseReturn(isEdit,rec,winid,isNoteAlso){
    winid=(winid==null?'purchasereturn':winid);
    //if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso)) {
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.SalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            record: rec,
            isCustomer:false,
            isNoteAlso:isNoteAlso,
            isCustBill:false,
            readOnly:false,
            label:WtfGlobal.getLocaleText("acc.dimension.module.18"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Purchase_Return_ModuleId,
            //            layout: 'border',
            title:WtfGlobal.getLocaleText("acc.dimension.module.18"),
            tabTip:WtfGlobal.getLocaleText("acc.dimension.module.18"),
            closable: true,
            iconCls:'accountingbase deliveryorder',
            modeName:'autopr'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);

    Wtf.getCmp('as').doLayout();
}

/*Component for Goods receipt. i.e. delivery from vendor*/
function callGoodsReceiptDelivery(isEdit,rec,winid, copyInv,isFixedAsset,isLinkedTransaction,invoicefromorder,invoicefromorderrec,pendingapproval){
    winid=(winid==null?'goodsreceiptdelivery':winid);
    var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.goodsreceiptreport, Wtf.Perm.goodsreceiptreport.creatgr)||(!WtfGlobal.EnableDisable(Wtf.UPerm.goodsreceiptreport, Wtf.Perm.goodsreceiptreport.copygr)&&copyInv)||(!WtfGlobal.EnableDisable(Wtf.UPerm.goodsreceiptreport, Wtf.Perm.goodsreceiptreport.editgr)&&isEdit)) {
        if(copyInv == undefined || copyInv == "" || copyInv == null){
            copyInv = false;
        }
        winid = 'GoodsReceipt'+winid;
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.DeliveryOrderPanel({
                id : winid,
                isEdit: isEdit,
                record: rec,
                isCustomer:false,
                copyInv:copyInv,
                readOnly:false,
                invoicefromorder:invoicefromorder,//flag when GR is created from PO Form
                invoicefromorderrec:invoicefromorderrec,
                isOrder:true,//print record button at transaction level
                label:WtfGlobal.getLocaleText("acc.field.GoodReceipt"),
                border : false,
                heplmodeid: 11,
                moduleid:Wtf.Acc_Goods_Receipt_ModuleId,
                //            layout: 'border',
                title:(copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cgredo"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.gredo"):WtfGlobal.getLocaleText("acc.wtfTrans.grdo"))),
                tabTip:(copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cgredo"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.gredo"):WtfGlobal.getLocaleText("acc.wtfTrans.grdo"))),
                //Wtf.util.Format.ellipsis(((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so"))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
                closable: true,
                iconCls:'accountingbase salesorder',
                modeName:'autogro',
                isLinkedTransaction:isLinkedTransaction,
                pendingapproval:pendingapproval
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(isEdit == true){
                //var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
                Wtf.getCmp("GoodsReceiptDeliveryOrderList").loadStore();
                Wtf.getCmp('as').remove(panel);
            }
        }, this);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.lp.editgr"):copyInv?WtfGlobal.getLocaleText("acc.lp.copygr"):WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.accPref.autoGRO"));
}

function callViewGoodsReceiptDelivery(isEdit,rec,winid, copyInv){
    winid = 'View'+winid;
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.DeliveryOrderPanel({
            id : winid,
            isEdit: isEdit,
            record: rec,
            readOnly:true,
            isViewTemplate:true,
            isCustomer:false,
            copyInv:copyInv,
            isOrder:true,
            pendingapproval: rec.data.pendingapproval,
            label:WtfGlobal.getLocaleText("acc.field.GoodReceipt"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Goods_Receipt_ModuleId,
            title:WtfGlobal.getLocaleText("acc.erp.viewgoodreceipt"),
            tabTip:WtfGlobal.getLocaleText("acc.erp.viewgoodreceipt"),
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:'autogro'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            Wtf.getCmp("GoodsReceiptDeliveryOrderList").loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}

/*Component for Goods receipt. i.e. delivery from vendor*/
function callFixedAssetGoodsReceiptDelivery(isEdit,rec,winid, copyInv,isFixedAsset){
    if((!WtfGlobal.EnableDisable(Wtf.UPerm.assetpurchase, Wtf.Perm.assetpurchase.createfagr) &&!isEdit) ||(!WtfGlobal.EnableDisable(Wtf.UPerm.assetpurchase, Wtf.Perm.assetpurchase.editfagr) &&isEdit)) {
        winid=(winid==null?'goodsreceiptdelivery':winid);
        if(isFixedAsset){
            winid = 'FixedAssetgoodsreceiptdelivery';
        }

        if(isEdit){
            winid = 'EditFixedAssetgoodsreceiptdelivery';
        }

        //if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createso)) {
        if(copyInv !== undefined && copyInv !== "" && copyInv !== null && copyInv){
            winid = 'copy'+winid;
        }else{
            copyInv = false;
        }
        var panel = Wtf.getCmp(winid);
        if(panel==null){
            panel = new Wtf.account.FixedAssetDeliveryOrderPanel({
                id : winid,
                isEdit: isEdit,
                record: rec,
                isCustomer:false,
                isFixedAsset:isFixedAsset,
                copyInv:copyInv,
                label:WtfGlobal.getLocaleText("acc.dimension.module.40"), // Asset Goods Receipt
                border : false,
                heplmodeid: 11,
                moduleid:isFixedAsset ? Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId : Wtf.Acc_Goods_Receipt_ModuleId,
                //            layout: 'border',
                title:(copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cgredo"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.gredoasset"):WtfGlobal.getLocaleText("acc.wtfTrans.grdoasset"))),
                tabTip:(copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cgredo"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.gredoasset"):WtfGlobal.getLocaleText("acc.wtfTrans.grdoasset"))),
                //Wtf.util.Format.ellipsis(((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so"))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
                closable: true,
                iconCls:'accountingbase salesorder',
                modeName:'autogro'
            });
            panel.on("activate", function(){
                panel.doLayout();
            }, this);
            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        panel.on('update',  function(){
            if(isEdit == true){
                //var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
                if(!isFixedAsset) {
                    Wtf.getCmp("GoodsReceiptDeliveryOrderListEntry").loadStore();
                    Wtf.getCmp('as').remove(panel);
                } else {
                    Wtf.getCmp("GoodsReceiptDeliveryOrderListEntryFixedAsset").loadStore();
                    Wtf.getCmp('as').remove(panel);//As per the discussion with Pandurang id changed-Refer issue ERP-9579
                }
            }
        }, this);
        Wtf.getCmp('as').doLayout();
    }else
        WtfComMsgBox(46,0,false,(isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating"))+" "+WtfGlobal.getLocaleText("acc.fixedAssetGoodsReceipt"));
}

function callViewFixedAssetGoodsReceiptDelivery(isEdit,rec,winid, copyInv,isFixedAsset){
    winid=(winid==null?'goodsreceiptdelivery':winid);
    if(isFixedAsset){
        winid = 'ViewFixedAssetgoodsreceiptdelivery';
    }
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.FixedAssetDeliveryOrderPanel({
            id : winid,
            isEdit: isEdit,
            record: rec,
            isCustomer:false,
            isFixedAsset:isFixedAsset,
            copyInv:copyInv,
            label:WtfGlobal.getLocaleText("acc.dimension.module.40"),
            readOnly: true,
            border : false,
            isViewTemplate:true,
            heplmodeid: 11,
            moduleid:isFixedAsset ? Wtf.Acc_FixedAssets_GoodsReceipt_ModuleId : Wtf.Acc_Goods_Receipt_ModuleId,
            title:WtfGlobal.getLocaleText("acc.wtfTrans.fixedAsset.cgredo"),
            tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.fixedAsset.cgredo"),
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:'autogro'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            Wtf.getCmp("GoodsReceiptDeliveryOrderList").loadStore();
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}

function callEditDeliveryOrder(isEdit,rec,winid, copyInv,isFixedAsset,isLinkedTransaction,pendingapproval){
    //  if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createpo)) {
    var isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    if(copyInv == undefined || copyInv == "" || copyInv == null){
        copyInv = false;
    }
    winid = 'DeliveryOrder'+winid;
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.DeliveryOrderPanel({
            id : winid,
            isEdit: isEdit,
            copyInv:copyInv,
            record: rec,
            isCustomer:true,
            isCustBill:false,
            readOnly:false,
            isOrder:true,//print record button at transaction level
            label:WtfGlobal.getLocaleText("acc.accPref.autoDO"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Delivery_Order_ModuleId,
            //            layout: 'border',
            title:(copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cdo"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.edo"):WtfGlobal.getLocaleText("acc.wtfTrans.do"))),
            tabTip:(copyInv?WtfGlobal.getLocaleText("acc.wtfTrans.cdo"):(isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.edo"):WtfGlobal.getLocaleText("acc.wtfTrans.do"))),
            //Wtf.util.Format.ellipsis(((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so"))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
            closable: true,
            isLinkedTransaction:isLinkedTransaction,
            iconCls:'accountingbase salesorder',
            modeName:'autodo',
            pendingapproval:pendingapproval
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            //var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
            Wtf.getCmp("DeliveryOrderList").Store.load({
                params:{
                    start : 0,
                    limit : 30
                }
            });
        Wtf.getCmp('as').remove(panel);
    }
    }, this);
Wtf.getCmp('as').doLayout();
// }
//else
//  WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.wtfTrans.po"));
}

function callViewDeliveryOrder(isEdit,rec,winid, copyInv){
    winid = 'View'+winid;
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.DeliveryOrderPanel({
            id : winid,
            isEdit: isEdit,
            copyInv:copyInv,
            record: rec,
            readOnly:true,
            isViewTemplate: true,
            isCustomer:true,
            isCustBill:false,
            pendingapproval: rec.data.pendingapproval,
            isOrder:true,//print record button at transaction level
            label:WtfGlobal.getLocaleText("acc.accPref.autoDO"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Delivery_Order_ModuleId,
            title:WtfGlobal.getLocaleText("acc.erp.viewdeliverorder"),
            tabTip:WtfGlobal.getLocaleText("acc.erp.viewdeliverorder"),
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:'autodo'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            Wtf.getCmp("DeliveryOrderList").Store.load({
                params:{
                    start : 0,
                    limit : 30
                }
            });
            Wtf.getCmp('as').remove(panel);
        }
    }, this);
    Wtf.getCmp('as').doLayout();
}

function callCreatePackingList(winid,rec,storeid){
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.PackingDeliveryorder({
            id : winid,
            isEdit: false,
            copyInv:false,
            record: rec,
            isCustomer:true,
            isCustBill:false,
            label:WtfGlobal.getLocaleText("erp.packingdolist"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Packing_ModuleId,
            title: 'Packing Delivery Order',
            tabTip: 'Packing Delivery Order',
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:'autodo'
        });
        //Refresh DO report automatically after Pack
        panel.on("update", function(){
            if(Wtf.getCmp(storeid)) {
                Wtf.getCmp(storeid).Store.reload();
            }
        }, this);
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        }, this);
    Wtf.getCmp('as').doLayout();
}

function callCreateShippingList(winid,rec,storeid){
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.ShippingDeliveryorder({
            id : winid,
            isEdit: false,
            copyInv:false,
            record: rec,
            isCustomer:true,
            isCustBill:false,
            label:WtfGlobal.getLocaleText("erp.packingdolist"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Shipping_ModuleId,
            title: 'Shipping Delivery Order',
            tabTip: 'Shipping Delivery Order',
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:'autodo'
        });
        
        //Refresh DO report automatically after Ship
        panel.on("update", function(){
            
            if(Wtf.getCmp(storeid)) {
                Wtf.getCmp(storeid).Store.reload();
            }
            
        }, this);
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    
    Wtf.getCmp('as').doLayout();
}
function callCreatePickingList(winid,rec){
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.PackingDoListPanel({
            id : winid,
            isEdit: false,
            copyInv:false,
            record: rec,
            isCustomer:true,
            isCustBill:false,
            label:WtfGlobal.getLocaleText("erp.packingdolist"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Packing_List_ModuleId,
            title: WtfGlobal.getLocaleText("erp.createpackingdolist"),
            tabTip: WtfGlobal.getLocaleText("erp.createpackingdolist"),
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:'autodo'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        }, this);
    Wtf.getCmp('as').doLayout();
}

function callEditCreditNoteGst(isEdit,rec,isNoteAlso,winid,isCN){
    winid = isCN ? 'creditnoteagaintvendorformalaysiaedit':"debitnoteagaintcustomerformalaysiaedit";
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.SalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            record: rec,
            isCustomer:isCN?false:true,
            readOnly:false,
//            isNoteAlso:isCN?isNoteAlso:false,
            isNoteAlso:isNoteAlso,
            inputValue:'5',
            isCustBill:false,
            label:isCN?WtfGlobal.getLocaleText("acc.module.name.12"):WtfGlobal.getLocaleText("acc.module.name.10"),
            border : false,
            heplmodeid: 11,
            isCN:isCN,
             moduleid:isCN?Wtf.Acc_Credit_Note_ModuleId:Wtf.Acc_Debit_Note_ModuleId,
            title:isCN?WtfGlobal.getLocaleText("acc.cn.undercharge.edit"):WtfGlobal.getLocaleText("acc.dn.undercharge.edit"),
            tabTip:isCN?WtfGlobal.getLocaleText("acc.cn.undercharge.edit"):WtfGlobal.getLocaleText("acc.dn.undercharge.edit"),
            closable: true,
            iconCls:'accountingbase deliveryorder',
            modeName:isCN?'autocreditmemo':'autodebitnote'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callEditNoteForOvercharge(winid,record,isEdit,isNoteAlso,isCN,readOnly) {
    winid = (winid!=undefined) ? winid :(isCN ? 'creditnoteForOverchargeEdit' : 'debitnoteForOverchargeEdit');
    var title = readOnly ? (isCN ? WtfGlobal.getLocaleText("acc.cn.overcharge.view") : WtfGlobal.getLocaleText("acc.dn.overcharge.view")) : (isCN ? WtfGlobal.getLocaleText("acc.cn.overcharge.edit") : WtfGlobal.getLocaleText("acc.dn.overcharge.edit"));
    var panel = Wtf.getCmp(winid);
    if (panel == null) {
        panel = new Wtf.account.SalesReturnPanel({
            id: winid,
            isEdit: isEdit,
            record: record,
            isCustomer: isCN ? true : false,
            readOnly: readOnly,
            isNoteAlso: isNoteAlso,
            inputValue: Wtf.NoteForOvercharge,
            isCustBill: false,
            label: isCN ? WtfGlobal.getLocaleText("acc.module.name.12") : WtfGlobal.getLocaleText("acc.module.name.10"),
            border: false,
            heplmodeid: 11,
            isCN: isCN,
            moduleid: isCN ? Wtf.Acc_Credit_Note_ModuleId : Wtf.Acc_Debit_Note_ModuleId,
            title: title,
            tabTip: title,
            closable: true,
            iconCls: 'accountingbase deliveryorder',
            modeName: isCN ? 'autocreditmemo' : 'autodebitnote'
        });
        panel.on("activate", function () {
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callEditSalesReturn(isEdit,rec,winid, copyInv,isNoteAlso,isPaymentAlso){
    //  if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createpo)) {
    if(copyInv == undefined || copyInv == "" || copyInv == null){
        copyInv = false;
    }
    winid = 'SalesReturn'+winid;
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.SalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            copyInv:copyInv,
            isNoteAlso:isNoteAlso,
            isPayment:isPaymentAlso,
            record: rec,
            isCustomer:true,
            readOnly:false,
            isCustBill:false,
            label:WtfGlobal.getLocaleText("acc.accPref.autoSR"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Sales_Return_ModuleId,
            //            layout: 'border',
            title:copyInv?WtfGlobal.getLocaleText("acc.field.CopySalesReturn") :WtfGlobal.getLocaleText("acc.field.EditSalesReturn"),
            tabTip:copyInv?WtfGlobal.getLocaleText("acc.field.CopySalesReturn") : WtfGlobal.getLocaleText("acc.field.EditSalesReturn"),
            //Wtf.util.Format.ellipsis(((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so"))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:'autosr'
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            //var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
            Wtf.getCmp("SalesReturnList").Store.load({
                params:{
                    start : 0,
                    limit : 30
                }
            });
        Wtf.getCmp('as').remove(panel);
    }
    }, this);
Wtf.getCmp('as').doLayout();
// }
//else
//  WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.wtfTrans.po"));
}

function callViewSalesReturn(isEdit,rec,winid, copyInv,isNoteAlso,isPayment){
    winid = 'view'+winid;
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.SalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            copyInv:copyInv,
            record: rec,
            isCustomer:true,
            isCustBill:false,
            label:WtfGlobal.getLocaleText("acc.accPref.autoSR"),
            border : false,
            heplmodeid: 11,
            readOnly:true,
            isViewTemplate:true,
            moduleid:Wtf.Acc_Sales_Return_ModuleId,
            title:WtfGlobal.getLocaleText("acc.erp.viewsalesreturn")+"-"+rec.data.billno,
            tabTip:WtfGlobal.getLocaleText("acc.erp.viewsalesreturn")+"-"+rec.data.billno,
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:'autosr',
            isNoteAlso:isNoteAlso,
            isPayment:isPayment
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            Wtf.getCmp("SalesReturnList").Store.load({
                params:{
                    start : 0,
                    limit : 30
                }
            });
        Wtf.getCmp('as').remove(panel);
    }
    }, this);
Wtf.getCmp('as').doLayout();
}

function callEditPurchaseReturn(isEdit,rec,winid, copyInv,isNoteAlso){
    //  if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createpo)) {
    if(copyInv == undefined || copyInv == "" || copyInv == null ){
        copyInv = false;
    }
    winid = "PurchaseReturn"+winid;
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.SalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            copyInv:copyInv,
            record: rec,
            isCustomer:false,
            isCustBill:false,
            readOnly:false,
            isNoteAlso:isNoteAlso,
            label:WtfGlobal.getLocaleText("acc.dimension.module.18"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Purchase_Return_ModuleId,
            //            layout: 'border',
            title:copyInv?WtfGlobal.getLocaleText("acc.field.CopyPurchaseReturn") : WtfGlobal.getLocaleText("acc.field.EditPurchaseReturn"),
            tabTip:copyInv?WtfGlobal.getLocaleText("acc.field.CopyPurchaseReturn") : WtfGlobal.getLocaleText("acc.field.EditPurchaseReturn"),
            //Wtf.util.Format.ellipsis(((isEdit?WtfGlobal.getLocaleText("acc.wtfTrans.eso"):WtfGlobal.getLocaleText("acc.wtfTrans.so"))+" "+((rec != null)?rec.data.billno:"")),Wtf.TAB_TITLE_LENGTH),
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:"autopr"
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            //var selectedModeId=(Wtf.account.companyAccountPref.withoutinventory)?"bSalesOrderList":"SalesOrderList";
            Wtf.getCmp("PurchaseReturnList").Store.load({
                params:{
                    start : 0,
                    limit : 30
                }
            });
        Wtf.getCmp('as').remove(panel);
    }
    }, this);
Wtf.getCmp('as').doLayout();
// }
//else
//  WtfComMsgBox(46,0,false,isEdit?WtfGlobal.getLocaleText("acc.common.editing"):WtfGlobal.getLocaleText("acc.common.creating") +" "+WtfGlobal.getLocaleText("acc.wtfTrans.po"));
}

function callViewPurchaseReturn(isEdit,rec,winid, copyInv,isNoteAlso){
    winid = 'view'+winid;
    var panel = Wtf.getCmp(winid);
    if(panel==null){
        panel = new Wtf.account.SalesReturnPanel({
            id : winid,
            isEdit: isEdit,
            copyInv:copyInv,
            record: rec,
            readOnly:true,
            isViewTemplate:true,
            isCustomer:false,
            isCustBill:false,
            label:WtfGlobal.getLocaleText("acc.dimension.module.18"),
            border : false,
            heplmodeid: 11,
            moduleid:Wtf.Acc_Purchase_Return_ModuleId,
            title:WtfGlobal.getLocaleText("acc.erp.viewpurchasereturn")+"-"+rec.data.billno,
            tabTip:WtfGlobal.getLocaleText("acc.erp.viewpurchasereturn")+"-"+rec.data.billno,
            closable: true,
            iconCls:'accountingbase salesorder',
            modeName:"autopr",
            isNoteAlso:isNoteAlso
        });
        panel.on("activate", function(){
            panel.doLayout();
        }, this);
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    panel.on('update',  function(){
        if(isEdit == true){
            Wtf.getCmp("PurchaseReturnList").Store.load({
                params:{
                    start : 0,
                    limit : 30
                }
            });
        Wtf.getCmp('as').remove(panel);
    }
    }, this);
Wtf.getCmp('as').doLayout();
}


function callCreateNewButtonFunction(moduleId,winValue,isCustomer,isForAgainstInvoice,isMainReport,fromNavigationPanel,isExciseTab,inputType,isJobWorkoutInvoice) {
    var isinven = Wtf.account.companyAccountPref.withoutinventory;

    switch (moduleId) {
        case Wtf.Acc_Credit_Note_ModuleId:
            if(winValue==undefined){
                if (inputType == Wtf.NoteForUnderCharge){
                    callDebitNoteAgainstCustomer(true);
                } else {
                    callCreditNote(true);
                }
            }else{
                (isForAgainstInvoice && (Wtf.account.companyAccountPref.countryid=='137'))?OpenCNDNTabForInvoice(winValue,true,false,isCustomer,true):OpenCNDNTab(winValue,true,false);
                
            }
            break;

        case Wtf.Acc_Debit_Note_ModuleId :
            if(winValue==undefined){
                //            if(!isinven){
                if(inputType==5){
                    callDebitNoteAgainstCustomer(false);
                }else{
                    callCreditNote(false);
                }
            //            }
            //            else
            //            {
            //                callBillingDebitNote();
            //            }
            }else{
                (isForAgainstInvoice && (Wtf.account.companyAccountPref.countryid=='137'))?OpenCNDNTabForInvoice(winValue,false,false,isCustomer,true):OpenCNDNTab(winValue,false,false,false);
            }
            break;

        case Wtf.Acc_Receive_Payment_ModuleId:
            if(isMainReport || winValue==undefined){
                if(Wtf.isNewPaymentStructure) {
                    callReceiptNew();
                }
            }else{
                if(winValue==9){
                    if(Wtf.isNewPaymentStructure) {
                        callReceiptSalesNew(winValue);
                    }
                }
                if(winValue==1 || winValue==2){
                    if(Wtf.isNewPaymentStructure) {
                        callPaymentReceiptNew(winValue,true, undefined,undefined,fromNavigationPanel,undefined,false);
                    }
                }
            //                else
            //                    openPaymentTypeWin(winValue,true);
            }
            break;
        case Wtf.Acc_Make_Payment_ModuleId:
            if (isMainReport || winValue==undefined) {
                //                if (!isinven) {
                if (Wtf.isNewPaymentStructure) {
                    callPaymentNew('','','');   //ERP-12437
                }
            //                } else {
            //                    callBillingPayment();
            //                }
            } else {
                if (winValue == 9) {
                    if (Wtf.isNewPaymentStructure) {
                        callPaymentSalesNew(winValue);
                    }
                }
                if(winValue==1 || winValue==2){
                if(Wtf.isNewPaymentStructure) {
                        callPaymentReceiptNew(winValue,false, undefined,undefined,fromNavigationPanel,undefined,false);
                    }
                }
            //                else
            //                    openPaymentTypeWin(winValue, false);
            }
            break;

        case Wtf.Acc_Vendor_Quotation_ModuleId:
            callVendorQuotation();
            break;
        case Wtf.Acc_FixedAssets_Vendor_Quotation_ModuleId:
            callFixedAssetVendorQuotation();
            break;
        case Wtf.Acc_Customer_Quotation_ModuleId:
            callQuotation();
            break;

        case Wtf.Acc_Sales_Order_ModuleId:
            //            if(!isinven){
            callSalesOrder(false, null);
            //            }else{
            //                callBillingSalesOrder(false, null)
            //            }
            break
        case 62:// MRP Sales Order
            callSalesOrder(false, null,undefined,undefined,undefined,undefined,undefined,undefined,undefined,true);
            break

        case Wtf.Acc_Purchase_Order_ModuleId :
            //            if(!isinven){
            callPurchaseOrder(false, null);
            //            }else{
            //                callBillingPurchaseOrder(false, null)
            //            }
            break;
        case Wtf.MRP_Job_Work_ModuleID :
            callPurchaseOrder(false,null,"JobWorkorder",false,true);
            break;
        case Wtf.Job_Work_Out_ORDER_REC :
            callPurchaseOrder(false,null,"JobWorkoutorder",false,false,true);
            break;


        case Wtf.Acc_FixedAssets_Purchase_Order_ModuleId:
            callFixedAssetPurchaseOrder(false, null);
            break;

        case Wtf.Acc_Invoice_ModuleId:
            //            if(!isinven){
            callInvoice(false,null,null,isExciseTab);
            //            }else{
            //                callBillingInvoice(false,null)
            //            }
            break

        case Wtf.Acc_Vendor_Invoice_ModuleId :
            //            if(!isinven){
            if(isJobWorkoutInvoice!=undefined&&isJobWorkoutInvoice!=null){
            callGoodsReceipt(false,null,null,null,null,null,isExciseTab,null,null,null,null,isJobWorkoutInvoice);
            }else{
            callGoodsReceipt(false,null,null,null,null,null,isExciseTab);
             }
            //            }
            //            else{
            //                callBillingGoodsReceipt(false,null)
            //            }
            break;

        case Wtf.MRP_Job_Work_ORDER_REC:
            var winid="JobWorkOrderReciever";
            callSalesOrder(false, null,winid,undefined,undefined,undefined,undefined,undefined,undefined,false,true);
            break;
        case Wtf.Acc_Security_Gate_Entry_ModuleId:
            callPurchaseOrder(false,null,undefined,undefined,undefined,undefined,true);
            break;
            
    }
}

//function callBillingSalesOrderList(){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewso)) {
//        var panel = Wtf.getCmp("bSalesOrderList");
//        if(panel==null){
//            panel = getSOTab(true, "bSalesOrderList", WtfGlobal.getLocaleText("acc.soList.tabTitle"));
//            Wtf.getCmp('as').add(panel);
//            panel.on('journalentry',callJournalEntryDetails);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.soList.tabTitle"));
//}

//function callBillingCreditNote(){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.createcn)) {
//        var panel = Wtf.getCmp("bCreditNote");
//        if(panel!=null){
//            Wtf.getCmp('as').remove(panel);
//            panel.destroy();
//            panel=null;
//        }
//        if(panel==null){
//            panel = new Wtf.account.TrNotePanel({
//                id : 'bCreditNote',
//                border : false,
//                layout: 'fit',
//                helpmodeid:13,
//                moduleid:Wtf.Acc_Credit_Note_ModuleId,
//                isCN:true,
//                isCustBill:true,
//                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoCN"),Wtf.TAB_TITLE_LENGTH) ,
//                tabTip:WtfGlobal.getLocaleText("acc.accPref.autoCN"),  //'Credit Note',
//                closable: true,
//                iconCls:'accountingbase creditnote',
//                modeName:'autobillingcreditmemo'
//            });
//            panel.on("activate", function(){
//                panel.doLayout();
//            }, this);
//            Wtf.getCmp('as').add(panel);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.accPref.autoCN"));
//}

//function callBillingDebitNote(){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.createdn)) {
//        var panel = Wtf.getCmp("bDebitNote");
//        if(panel!=null){
//            Wtf.getCmp('as').remove(panel);
//            panel.destroy();
//            panel=null;
//        }
//        if(panel==null){
//            panel = new Wtf.account.TrNotePanel({
//                id : 'bDebitNote',
//                border : false,
//                layout: 'fit',
//                isCN:false,
//                moduleid:Wtf.Acc_Debit_Note_ModuleId,
//                isCustBill:true,
//                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.accPref.autoDN"),Wtf.TAB_TITLE_LENGTH),
//                tabTip:WtfGlobal.getLocaleText("acc.accPref.autoDN"),  //'Debit Note',
//                helpmodeid:14,
//                iconCls:'accountingbase debitnote',
//                closable: true,
//                modeName:'autobillingdebitnote'
//            });
//            panel.on("activate", function(){
//                panel.doLayout();
//            }, this);
//            Wtf.getCmp('as').add(panel);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.creating")+" "+WtfGlobal.getLocaleText("acc.accPref.autoDN"));
//}

//function callBillingCreditNoteDetails(searchStr, filterAppend){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.invoice, Wtf.Perm.invoice.viewcn)) {
//        var panel = Wtf.getCmp("bCreditNoteDetails");
//        if(panel==null){
//            panel = getCNTab(true, "bCreditNoteDetails", WtfGlobal.getLocaleText("acc.cnList.tabTitle"),undefined,undefined,searchStr, filterAppend,Wtf.Acc_Credit_Note_ModuleId);
//            Wtf.getCmp('as').add(panel);
//            panel.on('journalentry',callJournalEntryDetails);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//        showAdvanceSearch(panel,searchStr, filterAppend);
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.cnList.tabTitle"));
//}

//function callBillingDebitNoteDetails(searchStr, filterAppend){
//    if(!WtfGlobal.EnableDisable(Wtf.UPerm.vendorinvoice, Wtf.Perm.vendorinvoice.viewdn)) {
//        var panel = Wtf.getCmp("bDebitNoteDetails");
//        if(panel==null){
//            panel = getDNTab(true, "bDebitNoteDetails", WtfGlobal.getLocaleText("acc.dnList.tabTitle"),undefined,undefined,searchStr, filterAppend,Wtf.Acc_Debit_Note_ModuleId);
//            Wtf.getCmp('as').add(panel);
//            //panel.on('goodsreceipt', callGoodsReceiptDetails);
//            panel.on('journalentry',callJournalEntryDetails);
//        }
//        Wtf.getCmp('as').setActiveTab(panel);
//        Wtf.getCmp('as').doLayout();
//        showAdvanceSearch(panel,searchStr, filterAppend);
//    }
//    else
//        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.dnList.tabTitle"));
//}
//
//function callViewBillingPaymentReceipt(rec,type,winid){
//    winid=(winid==null?'ViewbPaymentReceipt':winid);
//    var panel = Wtf.getCmp(winid);
//    var label=WtfGlobal.getLocaleText("acc.accPref.autoCP");
//    if(panel==null){
//        panel = new Wtf.account.TransectionTemplate({
//            id : winid,
//            isCustomer:false,
//            readOnly:true,
//            isCustBill:true,
//            rec: rec,
//            label:label,
//            name : 'View '+label,
//            title:Wtf.util.Format.ellipsis((WtfGlobal.getLocaleText("acc.het.113")+label),Wtf.TAB_TITLE_LENGTH),
//            tabTip:WtfGlobal.getLocaleText("acc.het.113")+label,
//            iconCls:'accountingbase viewgoodsreceipt'
//        });
//        panel.on("activate", function(){
//            panel.doLayout();
//        }, this);
//        Wtf.getCmp('as').add(panel);
//    }
//    Wtf.getCmp('as').setActiveTab(panel);
//    panel.refreshView(rec);
//    Wtf.getCmp('as').doLayout();
//}
//function callViewBillingGoodsReceipt(rec,type,winid,inCash){
//    winid=(winid==null?'ViewbGoodsReceipt':winid);
//    var panel = Wtf.getCmp(winid);
//    var label=inCash?WtfGlobal.getLocaleText("acc.accPref.autoCP"):WtfGlobal.getLocaleText("acc.agedPay.inv");
//    if(panel==null){
//        panel = new Wtf.account.TransectionTemplate({
//            id : winid,
//            isCustomer:false,
//            isCustBill:true,
//            readOnly:true,
//            rec: rec,
//            label:label,
//            name:'View '+label,
//            title:Wtf.util.Format.ellipsis((WtfGlobal.getLocaleText("acc.wtfTrans.vvi")+label),Wtf.TAB_TITLE_LENGTH),
//            tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.vvi")+label,
//            iconCls:'accountingbase viewgoodsreceipt'
//        });
//        panel.on("activate", function(){
//            panel.doLayout();
//        }, this);
//        Wtf.getCmp('as').add(panel);
//    }
//    Wtf.getCmp('as').setActiveTab(panel);
//    panel.refreshView(rec);
//    Wtf.getCmp('as').doLayout();
//}

//function callViewBillingCreditNote(rec,type,winid){
//    winid=(winid==null?'ViewCreditNote':winid);
//    var panel = Wtf.getCmp(winid);
//    if(panel==null){
//        panel = new Wtf.account.TransectionTemplate({
//            id : winid,
//            isCustomer:true,
//            readOnly:true,
//            rec: rec,
//            isCustBill:true,
//            label:WtfGlobal.getLocaleText("acc.dimension.module.4"),
//            name:WtfGlobal.getLocaleText("acc.cnList.tabTitle"),
//            title:WtfGlobal.getLocaleText("acc.wtfTrans.vcn"),  //'View Credit Note',
//            iconCls:'accountingbase viewcreditnote'
//        });
//        panel.on("activate", function(){
//            panel.doLayout();
//        }, this);
//        Wtf.getCmp('as').add(panel);
//    }
//    Wtf.getCmp('as').setActiveTab(panel);
//    panel.refreshView(rec);
//    Wtf.getCmp('as').doLayout();
//}
//function callViewBillingDebitNote(rec,type,winid){
//    winid=(winid==null?'ViewDebitNote':winid);
//    var panel = Wtf.getCmp(winid);
//    if(panel==null){
//        panel = new Wtf.account.TransectionTemplate({
//            id : winid,
//            isCustomer:false,
//            isCustBill:true,
//            readOnly:true,
//            rec: rec,
//            label:WtfGlobal.getLocaleText("acc.accPref.autoDN"),
//            name:WtfGlobal.getLocaleText("acc.dnList.tabTitle"),
//            title:WtfGlobal.getLocaleText("acc.wtfTrans.vdn"),  //'View Debit Note',
//            iconCls:'accountingbase viewdebitnote'
//        });
//        panel.on("activate", function(){
//            panel.doLayout();
//        }, this);
//        Wtf.getCmp('as').add(panel);
//    }
//    Wtf.getCmp('as').setActiveTab(panel);
//    panel.refreshView(rec);
//    Wtf.getCmp('as').doLayout();
//}


function pendingOrdersTab(isCustomer){
    var panel = isCustomer? Wtf.getCmp("SalesOrderListPending") : Wtf.getCmp("PurchaseOrderListPending");
    if(panel==null){
        if(isCustomer) {
            panel = getSOTab(false, "SalesOrderListPending", "Pending Approval SO(s)", undefined, false, true)
        }else {
            panel = getPOTab(false, "PurchaseOrderListPending", "Pending Approval PO(s)", undefined, false, true)
        }
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function pendingCustomerInvpicesTab(isCustomer){
    var panel = isCustomer? Wtf.getCmp("InvoiceListPending") : Wtf.getCmp("GRListPending");

    if(panel==null){
        if(isCustomer){
            panel = getInvoiceTab(false, "InvoiceListPending", "Pending Approval CI(s)", undefined, false, false, true);
        }else {
            panel = getVendorInvoiceTab(false, "GRListPending", "Pending Approval VI(s)", undefined, false, true);
        }
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}


//function monthlyRevenue(accid,startMonth, endMonth, startYear, endYear){
//    if(!accid){
//        accid="All";
//    }
//    var panel=Wtf.getCmp('monthlyRevenue');
//    if(panel==null){
//        panel = new Wtf.account.MonthlyRevenue({
//            id : 'monthlyRevenue',
//            border : false,
//            layout: 'fit',
//            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.monthlyRevenue.tabTitle"),Wtf.TAB_TITLE_LENGTH),
//            tabTip:WtfGlobal.getLocaleText("acc.monthlyRevenue.tabTip"),  //'Monthly Revenue',
//            iconCls: 'accountingbase revenue',
//            accountID:accid,
//            // stDate:startDate,
//            // enDate:endDate,
//            sMonth: startMonth,
//            sYear: startYear,
//            eMonth: endMonth,
//            eYear: endYear,
//            closable: true
//
//        });
//        Wtf.getCmp('as').add(panel);
//    }
//    Wtf.getCmp('as').setActiveTab(panel);
//    Wtf.getCmp('as').doLayout();
//}

// change monthly Revenue logic as same as monthly P/L     ERP-14954


function getClaimableInvoicesPanel(tabTitle, isCustomer){
    var reportPanel = new Wtf.account.BadDebtInvoiceListPanel({
        border : false,
        isClaim:true,
        isCustomer:isCustomer,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip: tabTitle,
        layout: 'fit',
        helpmodeid: 16,
        label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),  //"Invoice",
        iconCls:'accountingbase invoicelist'
    });

    reportPanel.on('baddebtClaimed',function(panel){
        if(panel.gridStore){
            panel.gridStore.load();
        }

    },this);
    reportPanel.on('journalentry',callJournalEntryDetails);

    return reportPanel;
}


function getTaxableDeliveryOrdersPanel(id,isFromGSTForm3){
    if(isFromGSTForm3){
        Wtf.MessageBox.hide();
    }
    id=(id)?id:"getTaxableDeliveryOrdersPanel";
    var panel = Wtf.getCmp(id);
    if(panel==null){
        var claimableInvoicePanel = getTaxApplicableDOPanel("Applicable", true);
        var recoverableInvoicePanel = getTaxAppliedDOPanel("Applied",true);

        var itemsArray = [];
        itemsArray.push(claimableInvoicePanel);
        itemsArray.push(recoverableInvoicePanel);

        panel = new Wtf.TabPanel({
            activeTab: 0,
            border: false,
            closable: true,
            id: id,
            title:Wtf.util.Format.ellipsis('Delivery Orders',Wtf.TAB_TITLE_LENGTH),
            tabTip:'Delivery Orders',
            items: itemsArray
        });
        Wtf.getCmp('as').add(panel);
    }

    Wtf.getCmp('as').setActiveTab(panel);
    //    panel.setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
//    showAdvanceSearch(panel,searchStr, filterAppend);
}
//
//function getTaxableDeliveryOrdersPanel(id){
//
//    id=(id)?id:"getTaxableDeliveryOrdersPanel";
//    var panel = Wtf.getCmp(id);
//    if(panel==null){
//        var tabTitle = "Delivery Orders";
//        panel = new Wtf.account.TaxableDeliveryListPanel({
//            border : false,
//            label:'Delivery Order',
//            isCustomer:true,
//            title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
//            tabTip: tabTitle,
//            layout: 'fit',
//            helpmodeid: 16,
//            iconCls:'accountingbase invoicelist'
//        });
////        });
//        Wtf.getCmp('as').add(panel);
//    }
//
//    panel.on('taxapplied',function(panel){
//        if(panel.gridStore){
//            panel.gridStore.load();
//        }
//
//    },this);
//
//    Wtf.getCmp('as').setActiveTab(panel);
//    //    panel.setActiveTab(panel);
//    Wtf.getCmp('as').doLayout();
//
//}
function getTaxApplicableDOPanel(tabTitle,isCustomer){
    var reportPanel = new Wtf.account.TaxableDeliveryListPanel({
        border : false,
        label:'Delivery Order',
        isCustomer:true,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip: tabTitle,
        layout: 'fit',
        helpmodeid: 16,
        iconCls:'accountingbase invoicelist'
    });

    reportPanel.on('taxapplied',function(panel){
        if(panel.gridStore){
            panel.gridStore.load();
        }

    },this);

    return reportPanel;
}
function getTaxAppliedDOPanel(tabTitle,isCustomer){
    var reportPanel = new Wtf.account.TaxableDeliveryListPanel({
        border : false,
        label:'Delivery Order',
        isCustomer:true,
        isTaxAppliedDOs:true,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip: tabTitle,
        layout: 'fit',
        helpmodeid: 16,
        iconCls:'accountingbase invoicelist'
    });

    reportPanel.on('taxapplied',function(panel){
        if(panel.gridStore){
            panel.gridStore.load();
        }
    },this);

    return reportPanel;
}

function taxAdjustmentWindow(isCustomer){

    var title = (isCustomer)?"Output Tax Adjustment":"Input Tax Adjustment";

    this.transactionForm = new Wtf.account.TaxAdjustment({
        title:title,
        layout:'border',
        id:'createTransactionFormId123',
        iconCls :getButtonIconCls(Wtf.etype.deskera),
        resizable:false,
        isCustomer:isCustomer,
        height:400,
        width:500,
        modal:true
    });
    //        this.transactionForm.on('datasaved',this.reloadStore,this)
    this.transactionForm.show();
}

function getRecoverableInvoicesPanel(tabTitle,isCustomer){
    var reportPanel = new Wtf.account.BadDebtInvoiceListPanel({
        border : false,
        isClaim:false,
        isCustomer:isCustomer,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip: tabTitle,
        layout: 'fit',
        helpmodeid: 16,
        label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),  //"Invoice",
        iconCls:'accountingbase invoicelist'
    });

    reportPanel.on('baddebtRecovered',function(panel){
        if(panel.gridStore){
            panel.gridStore.load();
        }

    },this);

    return reportPanel;
}

function getInvoiceTab(isWithOutInventory, tabId, tabTitle, extraFilters, isCash, consolidateFlag, pendingapproval,searchStr, filterAppend,moduleid,reportbtnshwFlag,isFixedAsset,isLeaseFixedAsset,isConsignment,isDraft){
    var label=WtfGlobal.getLocaleText("acc.accPref.autoInvoice");   //"Invoice"
    if(isFixedAsset){
        label=WtfGlobal.getLocaleText("erp.navigate.AssetDisposalInvoice"); //"Asset Disposel Invoice"
    } else if (isDraft) {
        label = WtfGlobal.getLocaleText("acc.field.draftedSalesInvoice"); // "Drafted Sales Invoice"
    } 
    var reportPanel = new Wtf.account.TransactionListPanel({
        id : tabId,
        consolidateFlag:consolidateFlag,
        border : false,
        searchJson: searchStr,
        filterConjuctionCrit:filterAppend,
        moduleId:moduleid,
        reportbtnshwFlag:reportbtnshwFlag,
        isCustBill: isWithOutInventory,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip:(isFixedAsset)?WtfGlobal.getLocaleText("acc.invoiceListFixedAsset.tabtitle"):(!isFixedAsset && !isLeaseFixedAsset)?WtfGlobal.getLocaleText("acc.invoiceList.invoicetabTT"):WtfGlobal.getLocaleText("acc.invoiceList.tabTT"),
        extraFilters: extraFilters,
        pendingapproval : pendingapproval,
        isDraft: isDraft,
        layout: 'fit',
        isCash: isCash,
        isCustomer:true,
        isFixedAsset:isFixedAsset,
        isLeaseFixedAsset:isLeaseFixedAsset,
        isConsignment:isConsignment,
        helpmodeid: 16,
        label:isConsignment?WtfGlobal.getLocaleText("acc.field.ConsignmentSalesInvoice"):label,  //"Invoice",
        isOrder:false,
        closable: pendingapproval || isFixedAsset || isDraft,
        iconCls:'accountingbase invoicelist'
    });
    return reportPanel;
}

function getCustInvoiceTabView(isWithOutInventory, tabId, tabTitle, extraFilters, isCash){
    var reportPanel = new Wtf.account.TransactionListPanelView({
        id : tabId + "trans",
        border : false,
        isCustBill: isWithOutInventory,
        //        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        //        tabTip: tabTitle,
        extraFilters: extraFilters,
        layout: 'fit',
        isCash: isCash,
        isCustomer:true,
        helpmodeid: 16,
        label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),  //"Invoice",
        isOrder:false,
        closable: false,
        iconCls:'accountingbase invoicelist'
    });
    return reportPanel;
}

function getSalesByCustTabView(){
    var reportPanel = Wtf.getCmp('salesbycust');
    if(reportPanel == null){
        reportPanel = new Wtf.account.TransactionListPanelViewSales({
            id : 'salesbycust',
            border : false,
            title: WtfGlobal.getLocaleText("acc.field.SalesByCustomer"),
            tabTip: WtfGlobal.getLocaleText("acc.field.Salesbycustomerreport"),
            layout: 'fit',
            iscustreport : true,
            isAddressFieldSearch : true, //Flag used to enable advance search on address fields
            closable : true,
            businessPerson:'Customer',
            moduleid : Wtf.Acc_Invoice_ModuleId,
            isCustomer:true,
            label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),  //"Invoice",
            iconCls:'accountingbase invoicelist'
        });
        Wtf.getCmp('as').add(reportPanel);
    }

    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();

}


function getSalesByCustSalesOrderTabView(){
    var reportPanel = Wtf.getCmp('salesbycustSalesOrder');
    if(reportPanel == null){
        reportPanel = new Wtf.account.TransactionListPanelViewSales({
            id : 'salesbycustSalesOrder',
            border : false,
            title: WtfGlobal.getLocaleText("acc.field.SalesByCustomerSO"),
            tabTip: WtfGlobal.getLocaleText("acc.field.SalesbycustomerSOreport"),
            layout: 'fit',
            iscustreport : true,
            closable : true,
            isOrder:true,
            businessPerson:'Customer',
            moduleid : Wtf.Acc_Sales_Order_ModuleId,
            isCustomer:true,
            label:WtfGlobal.getLocaleText("acc.field.SalesOrder"),  //"Sales Order",
            iconCls:'accountingbase invoicelist',
            salesbycustSalesOrder:true
        });
        Wtf.getCmp('as').add(reportPanel);
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}

function getPurchaseByVendorTabView(){
    var reportPanel = Wtf.getCmp('pucharsebyvendor');
    if(reportPanel == null){
        reportPanel = new Wtf.account.TransactionListPanelViewSales({
            id : 'pucharsebyvendor',
            border : false,
            title: WtfGlobal.getLocaleText('acc.field.PurchaseByVendor'),
            tabTip: WtfGlobal.getLocaleText('acc.field.PurchaseByVendorReport'),
            layout: 'fit',
            iscustreport : true,
            closable : true,
            moduleid : Wtf.Acc_Invoice_ModuleId,
            reportID:Wtf.autoNum.PurchaseByVendorReport,
            businessPerson:'Vendor',
            isCustomer:false,
            label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),  //"Invoice",
            iconCls:'accountingbase invoicelist'
        });
        Wtf.getCmp('as').add(reportPanel);
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();

}

function getSalesByProdTabView(){
    var reportPanel = Wtf.getCmp('salesbyprod');
    if(reportPanel == null){
        reportPanel = new Wtf.account.TransactionListPanelViewSales({
            id : 'salesbyprod',
            border : false,
            title: WtfGlobal.getLocaleText("acc.field.SalesByProduct"),
            tabTip: WtfGlobal.getLocaleText("acc.field.Salesbyproductreport"),
            layout: 'fit',
            iscustreport : false,
            closable : true,
            moduleid : Wtf.Acc_Invoice_ModuleId,
            isCustomer:true,
            businessPerson:'Customer',
            isAddressFieldSearch:true,  //Flag used to enable advance search on address fields
            isSalesByProductReport: true,
            label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),
            iconCls:'accountingbase invoicelist'
        });
        Wtf.getCmp('as').add(reportPanel);
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}

function callSalesByProductAgainstSalesOrder(isBlockQtyReport,ProductId){
    var winid=isBlockQtyReport?'isBlockQtyReport':'salesbyprodagainstso';
    var reportPanel = Wtf.getCmp(winid);
    if(reportPanel == null){
        reportPanel = new Wtf.account.TransactionListPanelViewSales({
            id : winid,
            border : false,
            title: isBlockQtyReport?WtfGlobal.getLocaleText("acc.field.blockqtyReport"):WtfGlobal.getLocaleText("acc.field.SalesByProductAgainstSO"),
            tabTip: isBlockQtyReport?WtfGlobal.getLocaleText("acc.field.blockqtyReport"):WtfGlobal.getLocaleText("acc.field.SalesByProductAgainstSOReport"),
            layout: 'fit',
            iscustreport : false,
            closable : true,
            moduleid : Wtf.Acc_Sales_Order_ModuleId,
            isCustomer:true,
            isOrder:true,
            businessPerson:'Customer',
            isSalesByProductReport: true,
            label:WtfGlobal.getLocaleText("acc.accPref.autoSO"),
            iconCls:'accountingbase invoicelist',
            isBlockQtyReport:isBlockQtyReport,
            ProductId:ProductId
        });
        Wtf.getCmp('as').add(reportPanel);
    } 
    else {
        reportPanel.productname.setValue(ProductId);
        reportPanel.loaddata();
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}

function getSalesBySalesPersonTabView(){
    var reportPanel = Wtf.getCmp('salesbysalesperson');
    if(reportPanel == null){
        reportPanel = new Wtf.account.TransactionListPanelViewSales({
            id : 'salesbysalesperson',
            border : false,
            title: WtfGlobal.getLocaleText("acc.field.SalesBySalesPerson"),
            tabTip: WtfGlobal.getLocaleText("acc.field.SalesBySalesPersonreport"),
            layout: 'fit',
            iscustreport : true,
            closable : true,
            moduleid : Wtf.Acc_Invoice_ModuleId,
            isCustomer:true,
            businessPerson:'Customer',
            isSalesPersonName:true,
            label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),
            iconCls:'accountingbase invoicelist'
        });
        Wtf.getCmp('as').add(reportPanel);
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}

function getCurrencyExposureTab(isCustomer,isAnalysys){
    var id = (isCustomer ? 'customer' : 'vendor') + "LedgerRpt"
    var title = (isCustomer ? WtfGlobal.getLocaleText("acc.agedPay.cus") : WtfGlobal.getLocaleText("acc.agedPay.ven")) + WtfGlobal.getLocaleText("acc.field.AccountStatement");
    if (isAnalysys) {
        id = (isCustomer ? 'customer' : 'vendor') + "analysysLedgerRpt"
        title = (isCustomer ? WtfGlobal.getLocaleText("acc.agedPay.cus") : WtfGlobal.getLocaleText("acc.agedPay.ven")) + WtfGlobal.getLocaleText("acc.field.AccountReport");
    }
    var customerLedgerRpt = Wtf.getCmp(id);
    if (customerLedgerRpt == null) {
        customerLedgerRpt = new Wtf.account.cvLedger({
            id: id,
            border: false,
            isCustomer: isCustomer,
            layout: 'fit',
            iconCls: 'accountingbase ledger',
            title: title,
            tabTip: title
        });
        customerLedgerRpt.on('journalentry', callJournalEntryDetails)
        if (isAnalysys)
            Wtf.getCmp('customerVendorAnalysisLedger').add(customerLedgerRpt);
        else
            Wtf.getCmp('customerVendorLedger').add(customerLedgerRpt);
    }
}
function getCurrencyExposure() {
    var panel = Wtf.getCmp("BankCurrencyExposure");
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.ForeignCurrencyExposureStatement"),Wtf.TAB_TITLE_LENGTH) ,
            tabTip:WtfGlobal.getLocaleText("acc.field.ForeignCurrencyExposureStatementforBankAccounts"),
            id:'BankCurrencyExposure',
            closable:true,
            border:false,
            iconCls:'accountingbase balancesheet',
            activeTab:0
        });
        Wtf.getCmp('as').add(panel);
        callCustomerVendorLedgerTab(true,false);
        callCustomerVendorLedgerTab(false,false);

    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}
function getVendorInvoiceTab(isWithOutInventory, tabId, tabTitle, extraFilters, consolidateFlag, pendingapproval,searchStr,filterAppend,moduleid,reportbtnshwFlag,isFixedAsset,isConsignment,isMRPJOBWORKIN,isJobWorkoutInvoice,isDraft){
    var label=(isFixedAsset)?WtfGlobal.getLocaleText("acc.field.PurchaseInvoice"):(isConsignment?WtfGlobal.getLocaleText("acc.field.ConsignmentPurchaseInvoice"):WtfGlobal.getLocaleText("acc.accPref.autoVI"));  //'Vendor Invoice',
    if(isMRPJOBWORKIN){
        label=tabTitle;
    }
    var reportPanel = new Wtf.account.TransactionListPanel({
        id : tabId,
        border : false,
        isOrder:false,
        searchJson: searchStr,
        filterConjuctionCrit:filterAppend,
        moduleId:moduleid,
        isCustBill: isWithOutInventory,
        consolidateFlag:consolidateFlag,
        isFixedAsset:isFixedAsset,
        isConsignment:isConsignment,
        isMRPJOBWORKIN:isMRPJOBWORKIN,
        isDraft: isDraft,// Flag for drafted document
        extraFilters: extraFilters,
        reportbtnshwFlag:reportbtnshwFlag,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip: (!isFixedAsset)?isDraft ? WtfGlobal.getLocaleText("acc.field.draftedPurcahseInvoices") :tabTitle+" :<br>"+WtfGlobal.getLocaleText("acc.grList.tabToolTip"):tabTitle,
        pendingapproval : pendingapproval,
        label:label,
        layout: 'fit',
        helpmodeid:isFixedAsset?92:21,
        isCustomer: false,
        closable: pendingapproval ||isFixedAsset ||isDraft,
        iconCls:'accountingbase invoicelist',
       isJobWorkoutInvoice:(isJobWorkoutInvoice!=undefined&&isJobWorkoutInvoice!=null)?isJobWorkoutInvoice:false
    });
    return reportPanel;
}

function getVendorInvoiceTabView(isWithOutInventory, tabId, tabTitle, extraFilters){
    var reportPanel = new Wtf.account.TransactionListPanelView({
        id : tabId + "trans",
        border : false,
        isOrder:false,
        isCustBill: isWithOutInventory,
        extraFilters: extraFilters,
        label:WtfGlobal.getLocaleText("acc.accPref.autoVI"),  //'Vendor Invoice',
        layout: 'fit',
        helpmodeid:21,
        isCustomer: false,
        closable: true,
        iconCls:'accountingbase invoicelist'
    });
    return reportPanel;
}

function getSOTab(isWithOutInventory, tabId, tabTitle, extraFilters, consolidateFlag, pendingapproval,outstandingreportflag,person,reportbtnshwFlag,isLeaseFixedAsset,isConsignment,searchStr, filterAppend,isMRPSalesOrder,isJobWorkOrderReciever,isfromReportList, isDraft){
    var label="";
    if(isLeaseFixedAsset){
        label=WtfGlobal.getLocaleText("acc.lease.order"); //for lease lease order report
    }else if(isConsignment)
    {
        label=WtfGlobal.getLocaleText("acc.consignment.order"); //for lease lease order report
    }else{
        label=WtfGlobal.getLocaleText("acc.accPref.autoSO");
    }
    if (isJobWorkOrderReciever) {
        label = tabTitle
    }

    var reportPanel = new Wtf.account.TransactionListPanel({
        id : tabId,
        border : false,
        isOrder:true,
        isCustomer:true,
        consolidateFlag:consolidateFlag,
        moduleId:isJobWorkOrderReciever?Wtf.MRP_Job_Work_ORDER_REC:(isLeaseFixedAsset? Wtf.Acc_Lease_Order:(isConsignment?Wtf.Acc_ConsignmentRequest_ModuleId:Wtf.Acc_Sales_Order_ModuleId)),
        isCustBill: isWithOutInventory,
        isLeaseFixedAsset:isLeaseFixedAsset,
        reportbtnshwFlag:reportbtnshwFlag,
        pendingapproval : pendingapproval,
        outstandingreportflag:outstandingreportflag,
        isConsignment:isConsignment,
        isDraft: isDraft,// Flag for drafted document
        isJobWorkOrderReciever:isJobWorkOrderReciever,
        isfromReportList:isfromReportList,//true if outstanding report is clicked from Report List
        isMRPSalesOrder:isMRPSalesOrder,
        person:person,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip: tabTitle,
        extraFilters: extraFilters,
        //        label:isLeaseFixedAsset?WtfGlobal.getLocaleText("acc.lease.order"):WtfGlobal.getLocaleText("acc.accPref.autoSO"),  //lease order?'Sales Order',
        label:label,
        helpmodeid:18,
        layout: 'fit',
        closable: ( isConsignment || isJobWorkOrderReciever || isfromReportList )?false:true,
        iconCls:'accountingbase salesorderlist',
        searchJson: searchStr,
        filterConjuctionCrit:filterAppend
    });
    return reportPanel;
}

function getPOTab(isWithOutInventory, tabId, tabTitle, extraFilters, consolidateFlag, pendingapproval,outstandingreportflag,person,reportbtnshwFlag,isConsignment,searchStr, filterAppend,isMRPJOBWORKOUT,isfromReportList,isJobWorkOrderReciever,isSecurityGateEntry, isDraft){
var moduleId=Wtf.Acc_Purchase_Order_ModuleId;
if(isConsignment){
    moduleId=Wtf.Acc_ConsignmentVendorRequest_ModuleId;
    var label=WtfGlobal.getLocaleText("acc.consignment.order");  
}else if(isMRPJOBWORKOUT){
    moduleId=Wtf.MRP_Job_Work_ModuleID;
    label=WtfGlobal.getLocaleText("acc.accPref.autoJOBWORKOUT"); 
}else if(isSecurityGateEntry) {
    moduleId=Wtf.Acc_Security_Gate_Entry_ModuleId;
    label=WtfGlobal.getLocaleText("acc.securitygate.title");  
}else if (isJobWorkOrderReciever) {
    moduleId=Wtf.Job_Work_Out_ORDER_REC;
    label=WtfGlobal.getLocaleText("acc.JobWorkOut.PurcahseOrder");  
} else {
    moduleId=Wtf.Acc_Purchase_Order_ModuleId;
    label=WtfGlobal.getLocaleText("acc.accPref.autoPO"); 
}
var reportPanel = new Wtf.account.TransactionListPanel({
        id : tabId,
        border : false,
        isOrder:true,
        consolidateFlag:consolidateFlag,
        isCustomer:false,
        reportbtnshwFlag:reportbtnshwFlag,
        moduleId:moduleId,
        isCustBill: isWithOutInventory,
        pendingapproval : pendingapproval,
        isDraft: isDraft,// Flag for drafted document
        outstandingreportflag:outstandingreportflag,
        person:person,
        isConsignment:isConsignment,
        isMRPJOBWORKOUT:isMRPJOBWORKOUT,
        isSecurityGateEntry:isSecurityGateEntry,
        isfromReportList:isfromReportList,//true if outstanding report is clicked from Report List
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip: (!pendingapproval)?isConsignment?WtfGlobal.getLocaleText("acc.accPref.venconsTabToolTip"):(isfromReportList? WtfGlobal.getLocaleText("acc.stockStatusReport.poQty"):isSecurityGateEntry? WtfGlobal.getLocaleText("acc.accPref.sgeTabToolTip") : isDraft ? WtfGlobal.getLocaleText("acc.field.draftedPurcahseOrders") : WtfGlobal.getLocaleText("acc.accPref.POTabToolTip")):tabTitle,
        extraFilters: extraFilters,
        label:label,
        helpmodeid:17,
        layout: 'fit',
        closable: true,
        iconCls:'accountingbase purchaseorderlist',
        searchJson: searchStr,
        filterConjuctionCrit:filterAppend,
        isJobWorkOrderReciever:isJobWorkOrderReciever
    });
    return reportPanel;
}

function getCNTab(isWithOutInventory, tabId, tabTitle, extraFilters, consolidateFlag,searchStr, filterAppend,moduleid,reportbtnshwFlag,pendingapproval,type){
    var reportPanel = new Wtf.account.NoteDetailsPanel({
        id : tabId,
        border : false,
        layout: 'fit',
        helpmodeid:19,
        searchJson: searchStr,
        reportbtnshwFlag:reportbtnshwFlag,
        filterConjuctionCrit:filterAppend,
        moduleId:moduleid,
        isCNReport:true,
        consolidateFlag:consolidateFlag,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip: tabTitle+" :<br>"+WtfGlobal.getLocaleText("acc.cnListTabToolTip"),
        isCustBill: isWithOutInventory,
        extraFilters: extraFilters,
        closable: true,
        pendingapproval:pendingapproval,
        iconCls:'accountingbase creditnotereport',
        cntypeNo:type
    });
    return reportPanel;
}
function getDNTab(isWithOutInventory, tabId, tabTitle, extraFilters, consolidateFlag,searchStr, filterAppend,moduleid,reportbtnshwFlag,pendingapproval, type){
    var reportPanel = new Wtf.account.NoteDetailsPanel({
        id : tabId,
        border : false,
        searchJson: searchStr,
        filterConjuctionCrit:filterAppend,
        moduleId:moduleid,
        isCNReport:false,
        isCustBill: isWithOutInventory,
        consolidateFlag:consolidateFlag,
        reportbtnshwFlag:reportbtnshwFlag,
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip:tabTitle+" :<br>"+WtfGlobal.getLocaleText("acc.dnListTabToolTip"),
        extraFilters: extraFilters,
        helpmodeid:22,
        layout: 'fit',
        closable: true,
        pendingapproval:pendingapproval,
        iconCls:'accountingbase debitnotereport',
        cntypeNo:type
    });
    return reportPanel;
}
function getJETab(tabId, tabTitle, jeId, extraFilters, consolidateFlag,reportbtnshwFlag,pendingApproval, startDate, endDate, params,isUserSummaryReport,userid){
    if(params === undefined){
        params = {};
    }
    var searchStr=params.searchStr||"";
    var filterAppend=params.filterAppend ||"";
    var reportPanel = new Wtf.account.JournalEntryDetailsPanel({
        id : tabId,
        pendingApproval:pendingApproval,
        consolidateFlag:consolidateFlag,
        border : false,
        helpmodeid: pendingApproval?91:24,
        layout: 'fit',
        title: Wtf.util.Format.ellipsis(tabTitle, Wtf.TAB_TITLE_LENGTH),
        tabTip: tabTitle,
        label : tabTitle,
        reportbtnshwFlag:reportbtnshwFlag,
        extraFilters: extraFilters,
        entryID:jeId,
        closable: true,
        sDate : startDate,
        eDate : endDate,
        searchJson: searchStr,
        filterAppend: filterAppend,
        userid: userid,
        isUserSummaryReportFlag:isUserSummaryReport,
        iconCls:'accountingbase journalentryreport'
    });
    //    reportPanel.expandJournalEntry();
    return reportPanel;
}
function GSTReportTab(searchStr, filterAppend){
    var panel = Wtf.getCmp("GSTtaxreport");
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.taxReport.GSTReport"),Wtf.TAB_TITLE_LENGTH) ,
            tabTip:WtfGlobal.getLocaleText("acc.taxReport.GSTReport"), //'You can view your Purchase and Sales Tax reports here.',
            id:'GSTtaxreport',
            closable:true,
            border:false,
            iconCls:'accountingbase agedrecievable',
            activeTab:0
        });
    }
    //    if( Wtf.account.companyAccountPref.countryid=='203'){           //Issue ERP-457: [SMS] GST details report(1st tab) allow the user to see the report in base currency as well.(check if it can be done / standard practice)
    Wtf.getCmp('as').add(panel);
    callGSTTAXCalculation(searchStr, filterAppend);
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    showAdvanceSearch(panel.items.map.GSTReportWithTaxRegister, searchStr, filterAppend);
//        }else{
//            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.ThisReportisapplicableforSingaporespecificcountriesonly")],2);  //This Report is applicable for Singapore specific countries only
//        }
}


function callGSTTAXCalculation(searchStr, filterAppend){
    var taxCalculation =Wtf.getCmp('GSTReportWithTaxRegister');
    if(taxCalculation==null){
        taxCalculation = new Wtf.account.GSTReportTab({
            id: "GSTReportWithTaxRegister",
            border: false,
            //             isSales:isSales,
            iconCls: 'accountingbase agedpayable',
            searchJson:searchStr,
            filterAppend:filterAppend,
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.taxReport.GSTReport"),Wtf.TAB_TITLE_LENGTH) ,
            tabTip:WtfGlobal.getLocaleText("acc.taxReport.GSTReport") //'You can view your Purchase and Sales Tax reports here.',
        });
    }
    Wtf.getCmp('GSTtaxreport').add(taxCalculation);
    taxCalculation.on('journalentry',callJournalEntryDetails);
    if(Wtf.account.companyAccountPref.countryid=='203'){
        var GSTForm5Report =Wtf.getCmp('GSTForm5HierarchyTab');
        if(GSTForm5Report==null){
            GSTForm5Report = new Wtf.account.GSTForm5HierarchyTab({
                id: "GSTForm5HierarchyTab",
                border: false,
                //             isSales:isSales,
//                layout: 'fit',
                iconCls: 'accountingbase agedpayable',
                title:WtfGlobal.getLocaleText('acc.field.GSTForm5'),
                tabTip:WtfGlobal.getLocaleText("acc.field.GSTForm5Report") //'You can view your Purchase and Sales Tax reports here.',
            });
        }
        Wtf.getCmp('GSTtaxreport').add(GSTForm5Report);
        GSTForm5Report.on('journalentry',callJournalEntryDetails);
    }
    Wtf.getCmp('GSTtaxreport').setActiveTab(taxCalculation);
    Wtf.getCmp('GSTtaxreport').doLayout();
}

function GSTForm5DetailedView(startdate, enddate){
    var GSTForm5DetailedViewPanel = Wtf.getCmp('GSTForm5DetailedViewID');
    if(GSTForm5DetailedViewPanel==null){
        var detailedView = new Wtf.account.GSTForm5DetailedView({
            id:'GSTForm5DetailedViewID',
            border: false,
            layout: 'fit',
            iconCls: 'accountingbase agedpayable',
            closable:true,
            title:Wtf.util.Format.ellipsis((Wtf.account.companyAccountPref.countryid=='137')?WtfGlobal.getLocaleText("acc.field.GSTTapReturnDetailedView"):WtfGlobal.getLocaleText("acc.field.GSTForm5DetailedView"),Wtf.TAB_TITLE_LENGTH) ,
            tabTip:(Wtf.account.companyAccountPref.countryid=='137')?WtfGlobal.getLocaleText("acc.field.GSTTapReturnDetailedView"):WtfGlobal.getLocaleText("acc.field.GSTForm5DetailedView"),
            startdate:startdate,
            enddate:enddate
        });
        if(Wtf.getCmp('GSTtaxreport')){ //when gst open from report list
            Wtf.getCmp('GSTtaxreport').add(detailedView);
            Wtf.getCmp('GSTtaxreport').setActiveTab(detailedView);
            Wtf.getCmp('GSTtaxreport').doLayout();
        } else{     //when call gst from navigation pannel
            Wtf.getCmp('as').add(detailedView);
            Wtf.getCmp('as').setActiveTab(detailedView);
            Wtf.getCmp('as').doLayout();
        }
        detailedView.on('journalentry',callJournalEntryDetails);
    }else{
        if(Wtf.getCmp('GSTtaxreport')){ //when gst open from report list
            GSTForm5DetailedViewPanel.updateData(GSTForm5DetailedViewPanel,startdate, enddate);//update detailed view grid data only when detailed view component already initialized
            Wtf.getCmp('GSTtaxreport').setActiveTab(GSTForm5DetailedViewPanel);
            Wtf.getCmp('GSTtaxreport').doLayout();
        }else{  //when call gst from navigation pannel
            GSTForm5DetailedViewPanel.updateData(GSTForm5DetailedViewPanel,startdate, enddate);//update detailed view grid data only when detailed view component already initialized
            Wtf.getCmp('as').setActiveTab(GSTForm5DetailedViewPanel);
            Wtf.getCmp('as').doLayout();
        }
        GSTForm5DetailedViewPanel.on('journalentry',callJournalEntryDetails);
    }
}

function callTaxReport(){
    var panel = Wtf.getCmp("maintaxreport");
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.taxReport.taxReport"),Wtf.TAB_TITLE_LENGTH) ,
            tabTip:WtfGlobal.getLocaleText("acc.taxReport.taxReportTT"), //'You can view your Purchase and Sales Tax reports here.',
            id:'maintaxreport',
            closable:true,
            border:false,
            iconCls:'accountingbase agedrecievable',
            activeTab:0
        });
        Wtf.getCmp('as').add(panel);
        callTaxCalculation(false);
        callTaxCalculation(true);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}


function getSerialNoTabView(){
    var reportPanel = Wtf.getCmp('serialnodetail');
    if(reportPanel == null){
        reportPanel = new Wtf.account.TransactionListPanelViewSerialNoDetails({
            id : 'serialnodetail',
            border : false,
            title: WtfGlobal.getLocaleText("acc.field.SerialNoDetailReport"),
            tabTip: WtfGlobal.getLocaleText("acc.field.SerialNoDetailReport"),
            layout: 'fit',
            iscustreport : true,
            closable : true,
            isCustomer:true,
            isSalesPersonName:true,
            label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),
            iconCls:getButtonIconCls(Wtf.etype.inventoryval)
        });
        Wtf.getCmp('as').add(reportPanel);
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}
function getProductExpiryTabView(){
    var reportPanel = Wtf.getCmp('productexpirydetail');
    if(reportPanel == null){
        reportPanel = new Wtf.account.TransactionListPanelViewSerialNoDetails({
            id : 'productexpirydetail',
            border : false,
            title: WtfGlobal.getLocaleText("acc.field.ProductExpiryDetailReport"),
            tabTip: WtfGlobal.getLocaleText("acc.field.ProductExpiryDetailReport"),
            layout: 'fit',
            iscustreport : true,
            closable : true,
            isCustomer:false,
            ispurchase:true,
            isSalesPersonName:true,
            label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),
            iconCls:getButtonIconCls(Wtf.etype.inventoryval)
        });
        Wtf.getCmp('as').add(reportPanel);
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}

function getCashFlowStatementAsPerCOATabView(){
    var reportPanel = Wtf.getCmp('cashflowstatement');
    if(reportPanel == null){
        reportPanel = new Wtf.account.TransactionListPanelViewCashFlowStatementAsPerCOA({
            id : 'cashflowstatement',
            border : false,
            title: WtfGlobal.getLocaleText("acc.field.CashFlowStatementview"), //Cash Flow Statement
            tabTip: WtfGlobal.getLocaleText("acc.field.cashflowstatementviewtip"), //View Cash Flow Statement as per COA available in Deskera
            layout: 'fit',
            iscustreport : true,
            closable : true,
            isCustomer:true,
            isSalesPersonName:true,
            label:WtfGlobal.getLocaleText("acc.field.CashFlowStatementview"), //Cash Flow Statement
            iconCls: 'accountingbase agedrecievable'
        });
        Wtf.getCmp('as').add(reportPanel);
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}

function getStockReportTab(params) {
    if(params == undefined ){
        params = {};
    }
    if(params.isCustomWidgetReport){
        var panel=new Wtf.account.TransactionListPanelViewStockReport({
               border : false,
               layout: 'fit',
               iscustreport : true,
               closable : true,
               isCustomer:true,
               isSalesPersonName:true,
               isCustomWidgetReport : params.isCustomWidgetReport,
               label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice")
       });
        if (params.callbackFn) {
            /*
             *call callback function to add this report to widget.
             **/
            params.callbackFn.call(this, panel);
        }
    }
    else
    {
        
        var reportPanel = Wtf.getCmp('stockreport');
        if(reportPanel == null){
            reportPanel = new Wtf.account.TransactionListPanelViewStockReport({
               id : 'stockreport',
               border : false,
               title: WtfGlobal.getLocaleText("acc.dashboard.StockReport"),
               tabTip: WtfGlobal.getLocaleText("acc.dashboard.StockReport"),
               layout: 'fit',
               iscustreport : true,
               closable : true,
               isCustomer:true,
               isSalesPersonName:true,
               label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),
               iconCls:getButtonIconCls(Wtf.etype.inventoryval)
       });
       Wtf.getCmp('as').add(reportPanel);    
        }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
    }
}

function callCustomerVendorLedgerReport(searchStr,filterAppend,isCustomer,reportid){
    var panel = Wtf.getCmp("customerVendorLedger");
    var ID = "customerVendorLedger";
    if(reportid==Wtf.autoNum.SOA_CustomerAccountStatement){
        panel = Wtf.getCmp("customerAccountStatement");
        ID = "customerAccountStatement";
    }else if(reportid==Wtf.autoNum.SOA_VendorAccountStatement){
        panel = Wtf.getCmp("vendorAccountStatement");
        ID = "vendorAccountStatement";
    }
    if(panel==null){
        var title = '';
        var tabTip = '';
        if(reportid==Wtf.autoNum.SOA_CustomerAccountStatement || reportid==Wtf.autoNum.SOA_VendorAccountStatement){
            title = (isCustomer ? WtfGlobal.getLocaleText("acc.agedPay.cus") : WtfGlobal.getLocaleText("acc.invoice.vendor")) + WtfGlobal.getLocaleText("acc.field.AccountStatement");
            title = Wtf.util.Format.ellipsis('SOA - '+title,Wtf.TAB_TITLE_LENGTH);
            tabTip = (isCustomer ? WtfGlobal.getLocaleText("acc.agedPay.cus") : WtfGlobal.getLocaleText("acc.invoice.vendor")) + WtfGlobal.getLocaleText("acc.field.AccountStatement");
        }else{
            title = Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.StatementofAccounts"),Wtf.TAB_TITLE_LENGTH);
            tabTip = WtfGlobal.getLocaleText("acc.field.YoucanviewyourCustomerVendorAccountStatementReportshere");
        }
         
        panel = new Wtf.TabPanel({
            title: title,
            tabTip:tabTip,
            id: ID,
            closable:true,
            border:false,
            iconCls:'accountingbase balancesheet',
            activeTab:0,
            searchJson:searchStr,
            filterAppend:filterAppend
        });
        Wtf.getCmp('as').add(panel);
        if (isCustomer != undefined){
            if (isCustomer){
                if(reportid==Wtf.autoNum.SOA_CustomerAccountStatement){
                    callCustomerVendorLedgerTab(true, false, searchStr, filterAppend, reportid);
                }else{
                    callCustomerVendorLedgerTab(true, false, searchStr, filterAppend);
                    callCustomerVendorLedgerTab(false, false);
                }
            } else{
                if(reportid==Wtf.autoNum.SOA_VendorAccountStatement){
                    callCustomerVendorLedgerTab(false, false, searchStr, filterAppend, reportid);
                }else{
                    callCustomerVendorLedgerTab(false, false, searchStr, filterAppend);
                    callCustomerVendorLedgerTab(true, false);
                }
            }
        } else{
            callCustomerVendorLedgerTab(true, false);
            callCustomerVendorLedgerTab(false, false);
        }
        
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}
/* ----Purchase Sales Report Master  from Report List-------*/
function callPurchaseSalesReportMaster(searchStr,filterAppend,isCustomer,reportid){
     var panel;
     var title;
   
    if(reportid==Wtf.autoNum.Sales_Report_Master){
        panel = Wtf.getCmp("salesreportmaster");
        title="Sales Report Master"
       
    }else if(reportid==Wtf.autoNum.Purchase_Report_Master){
        panel = Wtf.getCmp("purchasereportmaster");
        title="Purchas Report Master";
       
    }
    
    if(panel==null){        
         panel = new Wtf.account.purchaseSalesReportMaster({
            id: isCustomer ? "salesreportmaster" : "purchasereportmaster",
            border: false,
            isCustomer: isCustomer,
            layout: 'fit',
            closable : true,
            iconCls: 'accountingbase ledger',
            title: title,
            tabTip: title,
            searchJson:searchStr,
            filterAppend:filterAppend,
            reportid:reportid
        });
        Wtf.getCmp('as').add(panel); 
    }
    
    Wtf.getCmp('as').setActiveTab(panel);
   Wtf.getCmp('as').doLayout();
}

function callBudgetVsCostReport(){
    var panel = Wtf.getCmp("BudgetVsCostReport"+this.id);
    if (panel == null){
        panel = new Wtf.account.BudgetVsCostReport({
            id : 'BudgetVsCostReport'+this.id,
            border : false,
            layout: 'fit',
            title:Wtf.util.Format.ellipsis('Budget Vs. Cost Report', Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("Budget Vs. Cost Report"),
            closable: true,
            iconCls:'accountingbase creditnote'
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callActualVsBudgetReport(){
    var panel = Wtf.getCmp("ActualVsBudgetReport"+this.id);
    if (panel == null){
        panel = new Wtf.account.ActualVsBudgetReport({
            id : 'ActualVsBudgetReport'+this.id,
            border : false,
            layout: 'fit',
            title:Wtf.util.Format.ellipsis('Actual Vs. Budget Report', Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("Actual Vs. Budget Report"),
            closable: true,
            iconCls:'accountingbase creditnote'
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}
function callForecastingWidgetReport(){
    var panel = Wtf.getCmp("ForecastingWidgetReport"+this.id);
    if (panel == null){
        panel = new Wtf.account.ForecastingWidgetReport({
            id : 'ForecastingWidgetReport'+this.id,
            border : false,
            layout: 'fit',
            title:Wtf.util.Format.ellipsis('Forecasting Report', Wtf.TAB_TITLE_LENGTH),
            tabTip:"Forecasting Report",
            closable: true,
            iconCls:'accountingbase creditnote'
        });
        Wtf.getCmp('as').add(panel);
    }
    panel.on("activate",function(panel){
        panel.doLayout();
    });
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callSalesPersonAgeingReport(){
    var panel=Wtf.getCmp("agedreportbasedonsalesperson");
    if(panel==null){
        panel=new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.agedbysalesperson.title"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.agedbysalesperson.title"),
            id:'agedreportbasedonsalesperson',
            closable:true,
            border:false,
            iconCls:'accountingbase agedpayable',
            activeTab:0
        });
        Wtf.getCmp('as').add(panel);
        callSalesPersonAgeingReportTab(true);//true for summary tab
        callSalesPersonAgeingReportTab(false);//false for detail tab
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callSalesPersonAgeingReportTab(isSummary){
    var id=(isSummary?'agedSummary':'agedDetail')+'agedreportbasedonsalesperson';
    var title=isSummary? WtfGlobal.getLocaleText("acc.agedPay.summaryView") : WtfGlobal.getLocaleText("acc.1099.detail");
    var panel = Wtf.getCmp(id);
    if(panel==null){
        panel= new Wtf.account.AgedDetail({
            id:id,
            title:title,
            tabTip:title,
            border:false,
            layout: 'fit',
            iconCls:'accountingbase agedpayable',
            activeTab:0,
            receivable:true,
            isSummary:isSummary,
            isAgedForSalesPerson:true
        });
       if(!isSummary){
            panel.on("activate",function(){
                panel.storeloaded(panel.AgedStore);// Called to set the grand total Ref ERP-8925
                panel.doLayout();
         });
    }
       Wtf.getCmp('agedreportbasedonsalesperson').add(panel);
    }
}
/**
 * Function to Open Aged payable in Parent Child hierarchy
 */
function callParentChildAgeingPayableReport(){
    var panel=Wtf.getCmp("agedreportbasedparentchild");
    if(panel==null){
        panel=new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.wtfTrans.agedprparentchild"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.wtfTrans.agedparentTabTp"),  //'Aged Payable',
            id:'agedreportbasedparentchild',
            closable:true,
            border:false,
            iconCls:'accountingbase agedpayable',
            activeTab:0
        });
        Wtf.getCmp('as').add(panel);
        callParentChildAgeingPayableReportTab(true,true);//true for summary tab
        callParentChildAgeingPayableReportTab(false,true);//false for detail tab
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}
/**
 * Function to Open Aged payable in Parent Child hierarchy
 */
function callParentChildAgeingPayableReportTab(isSummary,isParentChild){
    var id=(isSummary?'agedSummary':'agedDetail')+'agedreportbasedparentchild';
    var title=isSummary? WtfGlobal.getLocaleText("acc.agedPay.summaryView") : WtfGlobal.getLocaleText("acc.1099.detail");
    var panel = Wtf.getCmp(id);
    if(panel==null){
        panel= new Wtf.account.AgedDetail({
            id:id,
            title:title,
            tabTip:title,
            border:false,
            layout: 'fit',
            iconCls:'accountingbase agedpayable',
            activeTab:0,
            isSummary:isSummary,
            isParentChild:isParentChild
        });
       if(!isSummary){
            panel.on("activate",function(){
                panel.storeloaded(panel.AgedStore);// Called to set the grand total Ref ERP-8925
                panel.doLayout();
         });
    }
       Wtf.getCmp('agedreportbasedparentchild').add(panel);
    }
}


function callCustomerVendorLedgerAnalysisReport(){
    var panel = Wtf.getCmp("customerVendorAnalysisLedger");
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.AnalysisReport"),Wtf.TAB_TITLE_LENGTH) ,
            tabTip:WtfGlobal.getLocaleText("acc.field.YoucanviewyourCustomerandVendorAnalysisReportshere"),
            id:'customerVendorAnalysisLedger',
            closable:true,
            border:false,
            iconCls:'accountingbase balancesheet',
            activeTab:0
        });
        Wtf.getCmp('as').add(panel);
        callCustomerVendorLedgerTab(true,true);
        callCustomerVendorLedgerTab(false,true);

    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function topCustomersByProducts(){
    var panel = Wtf.getCmp("topCustomersByProducts");
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.TopandDormantCustomersByProducts"),Wtf.TAB_TITLE_LENGTH) ,
            tabTip:WtfGlobal.getLocaleText("acc.field.ViewTopcustomersandDormantcustomersByProducts"),
            id:'topCustomersByProducts',
            border:false,
            closable:true,
            iconCls:'accountingbase agedpayable'  ,
            activeTab:0
        });
        Wtf.getCmp('as').add(panel);
        calltopCustomersByProducts();
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function topVendorsByProducts(){
    var panel = Wtf.getCmp("topVendorsByProducts");
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.TopandDormantVendorsByProducts"),Wtf.TAB_TITLE_LENGTH) ,
            tabTip:WtfGlobal.getLocaleText("acc.field.ViewTopvendorsandDormantvendorsByProducts"),
            id:'topVendorsByProducts',
            border:false,
            closable:true,
            iconCls:'accountingbase agedpayable'  ,
            activeTab:0
        });
        Wtf.getCmp('as').add(panel);
        calltopVendorsByProducts();
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function topProductsByCustomers(){
    var panel = Wtf.getCmp("topProductsByCustomers");
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.TopandDormantProductsByCustomers"),Wtf.TAB_TITLE_LENGTH) ,
            tabTip:WtfGlobal.getLocaleText("acc.field.ViewTopproductsandDormantproductsByCustomers"),
            id:'topProductsByCustomers',
            border:false,
            closable:true,
            iconCls:'accountingbase agedpayable'  ,
            activeTab:0
        });
        Wtf.getCmp('as').add(panel);
        calltopProductsByCustomers();
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function salesCommissionStmt(){
    var panel = Wtf.getCmp("salesCommissionStmt");
    if(panel==null){
        panel = new Wtf.account.TransactionListPanel({
            id : "salesCommissionStmt",
            border : false,
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.SalesCommissionStatement"),Wtf.TAB_TITLE_LENGTH),
            tabTip: WtfGlobal.getLocaleText("acc.field.ViewSalesPersonsCommissionStatements"),
            moduleId:Wtf.SalesCommisionStmt_Moduleid,
            layout: 'fit',
            isSalesCommissionStmt: true,
            isCustomer:true,
            helpmodeid:55,
            label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),  //"Invoice",
            isOrder:false,
            closable: true,
            iconCls:'accountingbase invoicelist'
        });
        Wtf.getCmp('as').add(panel);
        panel.on('journalentry',callJournalEntryDetails);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function openAccountStatement(customerid,isCustomer){
    if(isCustomer=="true"){
        callCustomerVendorLedgerReport(undefined,undefined,true,Wtf.autoNum.SOA_CustomerAccountStatement);
    }else{
        callCustomerVendorLedgerReport(undefined,undefined,false,Wtf.autoNum.SOA_VendorAccountStatement);
    }
    if(Wtf.getCmp('customerVendorLedger')!=undefined){
        if(isCustomer=="true"){
            var customerLedgerRptPanel=Wtf.getCmp('customerLedgerRpt');
            Wtf.getCmp('customerVendorLedger').setActiveTab(customerLedgerRptPanel);
            customerLedgerRptPanel.custStore.load();
            customerLedgerRptPanel.custStore.on("load", function(){
                if(customerid){
                customerLedgerRptPanel.cmbAccount.setValue(customerid);
                customerLedgerRptPanel.onClick();
                }
            },this);
        }else{
            var vendorLedgerRptPanel=Wtf.getCmp('vendorLedgerRpt');
            Wtf.getCmp('customerVendorLedger').setActiveTab(vendorLedgerRptPanel);
            vendorLedgerRptPanel.custStore.load();
            vendorLedgerRptPanel.custStore.on("load", function(){
                if(customerid){
                vendorLedgerRptPanel.cmbAccount.setValue(customerid);
                vendorLedgerRptPanel.onClick();
                }
            },this);
        }
    }
}

function callMapAccountsMultiCompany(winid){
    winid=(winid?"mapAccountsMultiCompany":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        panel = new Wtf.account.mapAccountsWindow({
            id:winid,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 700,
            height: 600,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right'
        });
        panel.show();
        return panel;
    }
}

function callTaxCalculation(isSales){
    var id=(isSales?'sales':'purchase')+"TaxCalculation"
    var taxCalculation=Wtf.getCmp(id);
    if(taxCalculation==null){
        taxCalculation = new Wtf.account.sampleTaxCalculation({
            id: id,
            border: false,
            isSales:isSales,
            iconCls: 'accountingbase agedpayable',
            title: isSales?WtfGlobal.getLocaleText("acc.taxReport.salesTax"):WtfGlobal.getLocaleText("acc.taxReport.purchaseTax"),
            tabTip:isSales?WtfGlobal.getLocaleText("acc.taxReport.salesTaxTT"):WtfGlobal.getLocaleText("acc.taxReport.purchaseTaxTT")
        });
        Wtf.getCmp('maintaxreport').add(taxCalculation);
    }else{
    }
    //     Wtf.getCmp('maintaxreport').setActiveTab(taxCalculation);
    Wtf.getCmp('maintaxreport').doLayout();
    }

function callCustomerVendorLedgerTab(isCustomer, isAnalysys,searchStr,filterAppend, reportid) {
    var id = (isCustomer ? 'customer' : 'vendor') + ((reportid==Wtf.autoNum.SOA_CustomerAccountStatement||reportid==Wtf.autoNum.SOA_VendorAccountStatement) ? "AccountStatementRpt" : "LedgerRpt");
    var title = (isCustomer ? WtfGlobal.getLocaleText("acc.agedPay.cus") : WtfGlobal.getLocaleText("acc.invoice.vendor")) + WtfGlobal.getLocaleText("acc.field.AccountStatement");
    if (isAnalysys) {
        id = (isCustomer ? 'customer' : 'vendor') + "analysysLedgerRpt"
        title = (isCustomer ? WtfGlobal.getLocaleText("acc.agedPay.cus") : WtfGlobal.getLocaleText("acc.invoice.vendor")) + WtfGlobal.getLocaleText("acc.field.AccountReport");
    }
    var moduleid = -1;
    if(isCustomer){
            moduleid = Wtf.Acc_Customer_AccountStatement_ModuleId;
    }else{
            moduleid = Wtf.Acc_Vendor_AccountStatement_ModuleId;
    }
    var customerLedgerRpt = Wtf.getCmp(id);
    if (customerLedgerRpt == null) {
        customerLedgerRpt = new Wtf.account.cvLedger({
            id: id,
            border: false,
            isCustomer: isCustomer,
            moduleid: moduleid,
            layout: 'fit',
            iconCls: 'accountingbase ledger',
            title: title,
            tabTip: title,
            searchJson:searchStr,
            filterAppend:filterAppend,
            reportid:reportid
        });
        customerLedgerRpt.on('journalentry', callJournalEntryDetails)
        if(reportid==Wtf.autoNum.SOA_CustomerAccountStatement){
            Wtf.getCmp('customerAccountStatement').add(customerLedgerRpt);
        } else if(reportid==Wtf.autoNum.SOA_VendorAccountStatement){
            Wtf.getCmp('vendorAccountStatement').add(customerLedgerRpt);
        } else{
            if (isAnalysys){
                Wtf.getCmp('customerVendorAnalysisLedger').add(customerLedgerRpt);
            }else{
                Wtf.getCmp('customerVendorLedger').add(customerLedgerRpt);
            }
        }
    }
    showAdvanceSearch(customerLedgerRpt, searchStr, filterAppend);
}


function callDataSink(){
    var panel = Wtf.getCmp("dataSink");
    if(panel==null){
        panel = new Wtf.DataSink({
            id : 'dataSink',
            border : false,
            layout: 'fit',
            title:Wtf.util.Format.ellipsis('Sink Data',Wtf.TAB_TITLE_LENGTH) ,
            tabTip:WtfGlobal.getLocaleText("acc.field.SinkData"),
            closable: true,
            iconCls:'accountingbase creditnote'
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callCostCenterReport(consolidateFlag,check){
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    var id = 'CostCenterReport';
    id = consolidateFlag?id+'Merged':id;
    var panel = Wtf.getCmp(id);
    if(panel==null){
        panel = new Wtf.TabPanel({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.ccReport.tabTitle"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.ccReport.Tip4"),  //'You can view the Summary, Details and Transactions associated with different Cost Center(s) in your organization from here.',
            id:id,
            closable:true,
            iconCls:'accountingbase balancesheet',
            activeTab:0
        });
        Wtf.getCmp('as').add(panel);
    }
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.costcenter, Wtf.Perm.costcenter.viewccs) || check)
        var allSummary = callAllCostCenterSummary(consolidateFlag);
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.costcenter, Wtf.Perm.costcenter.viewccd) || check)
        var reportDetails = callCostCenterDetailsReport(consolidateFlag);
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.costcenter, Wtf.Perm.costcenter.viewcct) || check)
        var transactionDetails = callCostCenterReportTransactionDetails(consolidateFlag);

    if(!WtfGlobal.EnableDisable(Wtf.UPerm.costcenter, Wtf.Perm.costcenter.viewccd) || check){
        reportDetails.on("activate",function(panel){
            panel.westPanel.setWidth(panel.getInnerWidth()/2);
            panel.doLayout();
            if(!panel.LoadedOnActivate){
                panel.fetchStatement();
                panel.LoadedOnActivate = true;
            }
        });
    }

    if(!WtfGlobal.EnableDisable(Wtf.UPerm.costcenter, Wtf.Perm.costcenter.viewccs) || check)
        Wtf.getCmp(id).setActiveTab(allSummary);
    Wtf.getCmp(id).doLayout();

    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}
function callCostCenterDetailsReport(consolidateFlag){
    consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
    var id = 'CostCenterSummary';
    id = consolidateFlag?id+'Merged':id;
    var panel = Wtf.getCmp(id);
    if(panel==null){
        panel = new Wtf.account.FinalStatement({
            id : id,
            consolidateFlag:consolidateFlag,
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.ccReport.tab2"),Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.ccReport.Tip3"),  //'View Details Report of different Cost Center(s) in your organization from here.',
            topTitle:'<center><font size=4>'+WtfGlobal.getLocaleText("acc.field.CostCenterDetailsReport")+'</font></center>',
            statementType:'CostCenter',
            border : false,
            closable: false,
            layout: 'fit',
            iconCls:'accountingbase balancesheet'
        });
        if(consolidateFlag) {
            Wtf.getCmp('CostCenterReportMerged').add(panel);
        } else {
            Wtf.getCmp('CostCenterReport').add(panel);
        }

        panel.on('account',viewGroupDetailReport);
    }
    return panel;
}


function callGSTTaxWindow(winid, reconRec){
    reconRec=(reconRec==undefined?"":reconRec);
    winid=(winid==null?"gsttaxwin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.GstTaxWindow({
            id:winid,
            closable: true,
            reconRec:reconRec,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 450,
            height: 270,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}
function callIAFfileWindow(winid, reconRec){
    reconRec=(reconRec==undefined?"":reconRec);
    winid=(winid==null?"iaffilewin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.IAFfileWindow({
            id:winid,
            closable: true,
            reconRec:reconRec,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 450,
            height: 270,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}
function callIAFfileWindowforeSubmission(){
    var winid="iaffilewinesubmission";
    var panel = Wtf.getCmp(winid);
    if(!panel){
        new Wtf.account.IAFfileWindow({
            id:winid,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 450,
            height: 270,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body,
            iseSubmission: true
        }).show();
    }
}

function NewTradingProfitLoss(consolidateFlag,searchStr, filterAppend){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewtradingpnl)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var id = 'newTradingProfitandLoss';
        id = consolidateFlag?id+'Merged':id;
        var panel = Wtf.getCmp(id);
        callFinalStatement(2);
        
        var defaultPnlTemplate = Wtf.CustomLayout.DefaultTemplates[Wtf.templateType.pnl];
        if(defaultPnlTemplate){
            if(panel==null){
                panel = new Wtf.account.TradingCustomLayout({
                    id : id,
                    consolidateFlag : consolidateFlag,
                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.P&L.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                    tabTip:WtfGlobal.getLocaleText("acc.P&L.tabTip"),  //'Trading & Profit/Loss',
                    templatetitle : WtfGlobal.getLocaleText("acc.P&L.tabTitle"),  //'Trading & Profit/Loss',
                    topTitle:'<center><font size=4>'+WtfGlobal.getLocaleText("acc.field.TradingandProfit/LossAccount")+'</font></center>',
                    moduleid : 101, //Added module id for Tading Profit and loss search report
                    reportid : Wtf.autoNum.TradingAndProfitLoss,
                    searchJson : "",
                    filterConjuctionCrit : "",
                    templateid : defaultPnlTemplate.id,
                    templatetype : 0,
                    //                    templatetitle : templatetitle!=''?templatetitle:templateName,
                    //                    templateheadings : templateheadings,
                    statementType : "TradingAndProfitLoss",
                    border : false,
                    closable : false,
                    layout : 'fit',
                    iconCls :'accountingbase financialreport'
                });
                panel.on('account',viewGroupDetailReport);//Open 'Group Detail Report' (ERP-33398)
                Wtf.getCmp('finalStmnt').add(panel);
            }
        }else{
            if(panel==null){
                panel = new Wtf.account.NewTrading({
                    id : id,
                    consolidateFlag:consolidateFlag,
                    title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.P&L.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                    tabTip:WtfGlobal.getLocaleText("acc.P&L.tabTip"),  //'Trading & Profit/Loss',
                    topTitle:'<center><font size=4>'+WtfGlobal.getLocaleText("acc.field.TradingandProfit/LossAccount")+'</font></center>',
                    statementType:'TradingAndProfitLoss',
                    moduleid:101, //Added module id for Tading Profit and loss search report
                    searchJson: searchStr,
                    filterConjuctionCrit:filterAppend,
                    border : false,
                    closable: false,
                    layout: 'fit',
                    iconCls:'accountingbase financialreport'
                });
                Wtf.getCmp('finalStmnt').add(panel);
                panel.on('account',viewGroupDetailReport);//Open 'Group Detail Report' (ERP-33398)
            }
        }
        Wtf.getCmp('finalStmnt').setActiveTab(panel);
        Wtf.getCmp('finalStmnt').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
        Wtf.getCmp('as').doLayout();
    //    panel.on("activate",function(panel){
    //        panel.westPanel.setWidth(panel.getInnerWidth()/2);
    //        panel.doLayout();
    //    });
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.P&L.tabTitle"));
}

function viewGroupDetailReport(searchStr, filterAppend, accid, startDate, endDate, currencyFilter, excludePreviousYear,isDefaultGL){
    isDefaultGL = isDefaultGL == true;
    var id = isDefaultGL ? 'newgeneralledgerreport' : 'groupDetailReport';
    var title = isDefaultGL ? WtfGlobal.getLocaleText("acc.field.GeneralLedgerReport") : "Group Detail Report";
    var panel = Wtf.getCmp(id);
    callFinalStatement(2);
    if (panel == null){
        panel = new Wtf.account.GroupDetailReport({
            id : id,
            title:Wtf.util.Format.ellipsis(title, Wtf.TAB_TITLE_LENGTH),
            tabTip:WtfGlobal.getLocaleText("acc.field.generalLedgerTabTip"),
            topTitle:'<center><font size=4>' + title + '</font></center>',
            border : false,
            closable: false,
            periodView: true,
            layout: 'fit',
            accountID : accid,
            stDate:startDate,
            enDate:endDate,
            currencyFilterConfig : currencyFilter,
            isDefaultGL : isDefaultGL,
            iconCls:'accountingbase coa',
            excludePreviousYearConfig : excludePreviousYear
        });
        Wtf.getCmp('finalStmnt').add(panel);
    } else{
        panel.showGroupDetailsReport({
            accountID : accid,
            stDate : startDate,
            enDate : endDate,
            currencyFilterConfig : currencyFilter,
            excludePreviousYearConfig : excludePreviousYear,
            isDefaultGL : isDefaultGL,
            searchStrConfig : searchStr
        });
    }
    Wtf.getCmp('finalStmnt').setActiveTab(panel);
    Wtf.getCmp('finalStmnt').doLayout();
    showAdvanceSearch(panel,searchStr, filterAppend);
    Wtf.getCmp('as').doLayout();
 }

function TradingProfitLossWithOpening(consolidateFlag,searchStr, filterAppend){
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewtradingpnl)) {
        consolidateFlag = consolidateFlag!=undefined?consolidateFlag:false;
        var id = 'TradingProfitandLossWithOpening';
        id = consolidateFlag?id+'Merged':id;
        var panel = Wtf.getCmp(id);
        callFinalStatement(2);
        if(panel==null){
            panel = new Wtf.account.NewTrading({
                id : id,
                consolidateFlag:consolidateFlag,
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.P&L.tabTitle"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.P&L.tabTip"),  //'Trading & Profit/Loss',
                topTitle:'<center><font size=4>'+WtfGlobal.getLocaleText("acc.field.TradingandProfit/LossAccount")+'</font></center>',
                statementType:'TradingAndProfitLoss',
                moduleid:101, //Added module id for Tading Profit and loss search report
                searchJson: searchStr,
                filterConjuctionCrit:filterAppend,
                border : false,
                closable: false,
                periodView: true,
                layout: 'fit',
                iconCls:'accountingbase financialreport'
            });
            Wtf.getCmp('finalStmnt').add(panel);
            panel.on('account',viewGroupDetailReport);//
        }
        Wtf.getCmp('finalStmnt').setActiveTab(panel);
        Wtf.getCmp('finalStmnt').doLayout();
        showAdvanceSearch(panel,searchStr, filterAppend);
        Wtf.getCmp('as').doLayout();
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.P&L.tabTitle"));
}

function callGSTForm5fileWindow(winid, reconRec){
    reconRec=(reconRec==undefined?"":reconRec);
    winid=(winid==null?"gstform5filewin":winid);
    var panel = Wtf.getCmp(winid);
    if(!panel){
        if( Wtf.account.companyAccountPref.countryid=='203'){           //Issue ERP-457: [SMS] GST details report(1st tab) allow the user to see the report in base currency as well.(check if it can be done / standard practice)
            new Wtf.account.IAFfileWindow({
                id:winid,
                closable: true,
                reconRec:reconRec,
                modal: true,
                isGST: true,
                iconCls :getButtonIconCls(Wtf.etype.deskera),
                width: 450,
                height: 270,
                resizable: false,
                layout: 'border',
                buttonAlign: 'right',
                renderTo: document.body
            }).show();
        }else{
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.ThisReportisapplicableforSingaporespecificcountriesonly")],2);  //This Report is applicable for Singapore specific countries only
        }
    }
}

function newBalanceSheet(){


    if(!WtfGlobal.EnableDisable(Wtf.UPerm.fstatement, Wtf.Perm.fstatement.viewbsheet)) {
        var panel = Wtf.getCmp("bsheet");
        callFinalStatement(3);
        if(panel==null){
            panel = new Wtf.account.NewTrading({
                id : 'bsheet',
                statementType:'BalanceSheet',
                border : false,
                layout: 'fit',
                title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.balanceSheet"),Wtf.TAB_TITLE_LENGTH),
                tabTip:WtfGlobal.getLocaleText("acc.balanceSheet"),  //'Balance Sheet',
                topTitle:'<center><font size=4>'+WtfGlobal.getLocaleText("acc.dashboard.consolidateBalanceSheetLink")+'</font></center>',
                closable: false,
                iconCls:'accountingbase balancesheet'
            });
            Wtf.getCmp('finalStmnt').add(panel);
            panel.on('account',viewGroupDetailReport);
        }
        Wtf.getCmp('finalStmnt').setActiveTab(panel);
        Wtf.getCmp('finalStmnt').doLayout();
        Wtf.getCmp('as').doLayout();
        panel.on("activate",function(panel){
            panel.westPanel.setWidth(panel.getInnerWidth()/2);
            panel.doLayout();
        });
    }
    else
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing")+" "+WtfGlobal.getLocaleText("acc.dashboard.consolidateBalanceSheetLink"));
}
function showAdvanceSearch(panel, c, filterAppend) {
    if (c != undefined) {
        if (c != "") {
            var data = eval("(" + decodeURIComponent(c) + ")");
            if (!panel.objsearchComponent) {
                panel.getAdvanceSearchComponent();
            }
               panel.configurAdvancedSearch();
                panel.objsearchComponent.advGrid.appendCaseCombo.setValue(filterAppend);
                panel.objsearchComponent.advGrid.searchStore.loadData(data);
                for (var i = 0; i < data.data.length; i++) {
                    panel.objsearchComponent.advGrid.combovalArr.push(data.data[i].combosearch);
                }
            if(panel.Store!=undefined)
                panel.Store.on("load", panel.storeLoad, panel);
            else
                panel.storeLoad
            panel.objsearchComponent.advGrid.doSearch(false);
            panel.objsearchComponent.advGrid.search.enable();
        //            panel.objsearchComponent.saveSearch.enable();
            if(!(data.data.length > 0)){
                panel.clearStoreFilter();
            }
        }
    }
}


function uncheckedCheckedModule(){
    Wtf.getCmp("columncreationinvoiceid").setValue(false);
    Wtf.getCmp("columncreationveninvoiceid").setValue(false);
    Wtf.getCmp("columncreationinvoiceid").setValue(false);
    Wtf.getCmp("columncreationinvoiceid").setValue(false);
    Wtf.getCmp("columncreationdebitnoteid").setValue(false);
    Wtf.getCmp("columncreationcreditnoteid").setValue(false);
    Wtf.getCmp("columncreationmakepaymentid").setValue(false);
    Wtf.getCmp("columncreationreceivepaymentid").setValue(false);
    Wtf.getCmp("columncreationpurchaseorderid").setValue(false);
    Wtf.getCmp("columncreationsalesorderid").setValue(false);
    Wtf.getCmp("columncreationcustomerquotationid").setValue(false);
    Wtf.getCmp("columncreationvendorquotationid").setValue(false);
    Wtf.getCmp("columncreationdeliveryorderid").setValue(false);
    Wtf.getCmp("columncreationgoodsreceiptid").setValue(false);
    Wtf.getCmp("columncreationsalesreturnid").setValue(false);
    Wtf.getCmp("columncreationrequestforquotationid").setValue(false);
    Wtf.getCmp("columncreationfixedassetsdisposalinvoiceid").setValue(false);
    Wtf.getCmp("columncreationfixedassetspurchaseinvoiceid").setValue(false);
    Wtf.getCmp("columncreationfixedassetsgoodsreceiptid").setValue(false);
    Wtf.getCmp("columncreationfixedassetsdeliveryorderid").setValue(false);
    Wtf.getCmp("columncreationfixedassetsgroupsid").setValue(false);
    Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").setValue(false);
    Wtf.getCmp("columncreationfixedassetsrfqid").setValue(false);
    Wtf.getCmp("columncreationfixedassetsvendorquotationid").setValue(false);
    Wtf.getCmp("columncreationfixedassetspurchaseorderid").setValue(false);
    Wtf.getCmp("columncreationpurchaserequisitionid").setValue(false);
    Wtf.getCmp("columncreationpurchasereturnid").setValue(false);
    Wtf.getCmp("columncreationfixedassetspurchasereturnid").setValue(false);
    Wtf.getCmp("columncreationfixedassetssalesreturnid").setValue(false);
    Wtf.getCmp("columncreationfixedassetdetailsid").setValue(false);
    Wtf.getCmp("columncreationstockadjustmentid").setValue(false);
    Wtf.getCmp("columncreationstockrequestid").setValue(false);
    Wtf.getCmp("columnCreationISTid").setValue(false);
    Wtf.getCmp("columncreationILTid").setValue(false);
    Wtf.getCmp("columncreationcyclecid").setValue(false);
    Wtf.getCmp("AccountStatementid").setValue(false);
}
function resetModulesParentIds(){
    Wtf.getCmp("columncreationinvoiceparentid").setValue("");
    Wtf.getCmp("columncreationveninvoiceparentid").setValue("");
    Wtf.getCmp("columncreationveninvoiceparentid").setValue("");
    Wtf.getCmp("columncreationdebitnoteparentid").setValue("");
    Wtf.getCmp("columncreationcreditnoteparentid").setValue("");
    Wtf.getCmp("columncreationmakepaymentparentid").setValue("");
    Wtf.getCmp("columncreationreceivepaymentparentid").setValue("");
    Wtf.getCmp("columncreationpurchaseorderparentid").setValue("");
    Wtf.getCmp("columncreationsalesorderparentid").setValue("");
    Wtf.getCmp("columncreationcustomerquotationparentid").setValue("");
    Wtf.getCmp("columncreationvendorquotationparent").setValue("");
    Wtf.getCmp("columncreationdeliveryorderparentid").setValue("");
    Wtf.getCmp("columncreationgoodsreceiptparentid").setValue("");
    Wtf.getCmp("columncreationsalesreturnparentid").setValue("");
    Wtf.getCmp("columncreationpurchasereturnparentid").setValue("");
    Wtf.getCmp("columncreationpurchasereturnparentid").setValue("");
    Wtf.getCmp("columncreationpurchaserequisitionparentid").setValue("");
    Wtf.getCmp("columncreationrequestforquotationparentid").setValue("");
    Wtf.getCmp("AccountStatementParentId").setValue("");
    Wtf.getCmp("columncreationfixedassetsdisposalinvoiceparentid").setValue("");
    Wtf.getCmp("columncreationfixedassetspurchaseinvoiceparentid").setValue("");
    Wtf.getCmp("columncreationfixedassetsgoodsreceiptparentid").setValue("");
    Wtf.getCmp("columncreationfixedassetsdeliveryorderparentid").setValue("");
    Wtf.getCmp("columncreationfixedassetsgroupsparentid").setValue("");
    Wtf.getCmp("columncreationfixedassetspurchaserequisitionparentid").setValue("");
    Wtf.getCmp("columncreationfixedassetsrfqparentid").setValue("");
    Wtf.getCmp("columncreationfixedassetsvendorquotationparentid").setValue("");
    Wtf.getCmp("columncreationfixedassetspurchaseorderparentid").setValue("");
    Wtf.getCmp("columncreationconsignmentrequestparentid").setValue("");
    Wtf.getCmp("columncreationconsignmentinvoiceparentid").setValue("");
    Wtf.getCmp("columncreationconsignmentdoparentid").setValue("");
    Wtf.getCmp("columncreationconsignmentsalesreturnparentid").setValue("");
    Wtf.getCmp("columncreationconsignmentvendorrequestparentid").setValue("");
    Wtf.getCmp("columncreationconsignmentpurchaseinvoiceparentid").setValue("");
    Wtf.getCmp("columncreationconsignmentgrparentid").setValue("");
    Wtf.getCmp("columncreationconsignmentpurchasereturnparentid").setValue("");
    Wtf.getCmp("columncreationleasecontractparentid").setValue("");
    Wtf.getCmp("columncreationleasequotationparentid").setValue("");
    Wtf.getCmp("columnCreationLeaseInvoiceparentid").setValue("");
    Wtf.getCmp("columncreationleasedoparentid").setValue("");
    Wtf.getCmp("columncreationleasereturnparentid").setValue("");
    Wtf.getCmp("columncreationfixedassetspurchasereturnparentid").setValue("");
    Wtf.getCmp("columncreationfixedassetssalesreturnparentid").setValue("");
    Wtf.getCmp("columncreationfixedassetdetailsparentid").setValue("");
    Wtf.getCmp("columncreationstockadjustmentparentid").setValue("");
    Wtf.getCmp("columncreationstockrequestparentid").setValue("");
    Wtf.getCmp("columnCreationISTparentid").setValue("");
    Wtf.getCmp("columncreationILTparentid").setValue("");
    Wtf.getCmp("columncreationcyclecparentid").setValue("");
    Wtf.getCmp("columncreationsecgateentryparentid").setValue("");
    Wtf.getCmp("columncreationmultientitydimensionparentid").setValue("");
}
function CheckModuleCheckBox(modulestr,parentidstr){// flag value - IF false then its for dimension otherwise for custom column
    uncheckedCheckedModule()
    var moduleArray=modulestr.split(",");
    var parentIdArray=parentidstr.split(",");
    for(var i=0;i<moduleArray.length;i++){
        switch(moduleArray[i]){
            case "2":
                Wtf.getCmp("columncreationinvoiceid").setValue(true);
                Wtf.getCmp("columncreationinvoiceparentid").setValue(parentIdArray[i]);
                break;
            case "4":
                Wtf.getCmp("columncreationinvoiceid").setValue(true);
                Wtf.getCmp("columncreationinvoiceparentid").setValue(parentIdArray[i]);
                break;
            case "6":
                Wtf.getCmp("columncreationveninvoiceid").setValue(true);
                Wtf.getCmp("columncreationveninvoiceparentid").setValue(parentIdArray[i]);
                break;
            case "8":
                Wtf.getCmp("columncreationveninvoiceid").setValue(true);
                Wtf.getCmp("columncreationveninvoiceparentid").setValue(parentIdArray[i]);
                break;
            case "10":
                Wtf.getCmp("columncreationdebitnoteid").setValue(true);
                Wtf.getCmp("columncreationdebitnoteparentid").setValue(parentIdArray[i]);
                break;
            case "12":
                Wtf.getCmp("columncreationcreditnoteid").setValue(true);
                Wtf.getCmp("columncreationcreditnoteparentid").setValue(parentIdArray[i]);
                break;
            case "14":
                Wtf.getCmp("columncreationmakepaymentid").setValue(true);
                Wtf.getCmp("columncreationmakepaymentparentid").setValue(parentIdArray[i]);
                break;
            case "16":
                Wtf.getCmp("columncreationreceivepaymentid").setValue(true);
                Wtf.getCmp("columncreationreceivepaymentparentid").setValue(parentIdArray[i]);
                break;
            case "18":
                Wtf.getCmp("columncreationpurchaseorderid").setValue(true);
                Wtf.getCmp("columncreationpurchaseorderparentid").setValue(parentIdArray[i]);
                break;
            case "20":
                Wtf.getCmp("columncreationsalesorderid").setValue(true);
                Wtf.getCmp("columncreationsalesorderparentid").setValue(parentIdArray[i]);
                break;
            case "22":
                Wtf.getCmp("columncreationcustomerquotationid").setValue(true);
                Wtf.getCmp("columncreationcustomerquotationparentid").setValue(parentIdArray[i]);
                break;
            case "23":
                Wtf.getCmp("columncreationvendorquotationid").setValue(true);
                Wtf.getCmp("columncreationvendorquotationparent").setValue(parentIdArray[i]);
                break;
            case "27":
                Wtf.getCmp("columncreationdeliveryorderid").setValue(true);
                Wtf.getCmp("columncreationdeliveryorderparentid").setValue(parentIdArray[i]);
                break;
            case "28":
                Wtf.getCmp("columncreationgoodsreceiptid").setValue(true);
                Wtf.getCmp("columncreationgoodsreceiptparentid").setValue(parentIdArray[i]);
                break;
            case "29":
                Wtf.getCmp("columncreationsalesreturnid").setValue(true);
                Wtf.getCmp("columncreationsalesreturnparentid").setValue(parentIdArray[i]);
                break;
            case "30":
                Wtf.getCmp("columncreationproductid").setValue(true);
                Wtf.getCmp("columncreationproductparentid").setValue(parentIdArray[i]);
                break;
            case "31":
                Wtf.getCmp("columncreationpurchasereturnid").setValue(true);
                Wtf.getCmp("columncreationpurchasereturnparentid").setValue(parentIdArray[i]);
                break;
            case "32":
                Wtf.getCmp("columncreationpurchaserequisitionid").setValue(true);
                Wtf.getCmp("columncreationpurchaserequisitionparentid").setValue(parentIdArray[i]);
                break;
            case "33":
                Wtf.getCmp("columncreationrequestforquotationid").setValue(true);
                Wtf.getCmp("columncreationrequestforquotationparentid").setValue(parentIdArray[i]);
                break;
            case "34":
                Wtf.getCmp("AccountStatementid").setValue(true);
                Wtf.getCmp("AccountStatementParentId").setValue(parentIdArray[i]);
                break;
            case "38":
                Wtf.getCmp("columncreationfixedassetsdisposalinvoiceid").setValue(true);
                Wtf.getCmp("columncreationfixedassetsdisposalinvoiceparentid").setValue(parentIdArray[i]);
                break;
            case "39":
                Wtf.getCmp("columncreationfixedassetspurchaseinvoiceid").setValue(true);
                Wtf.getCmp("columncreationfixedassetspurchaseinvoiceparentid").setValue(parentIdArray[i]);
                break;
            case "40":
                Wtf.getCmp("columncreationfixedassetsgoodsreceiptid").setValue(true);
                Wtf.getCmp("columncreationfixedassetsgoodsreceiptparentid").setValue(parentIdArray[i]);
                break;
            case "41":
                Wtf.getCmp("columncreationfixedassetsdeliveryorderid").setValue(true);
                Wtf.getCmp("columncreationfixedassetsdeliveryorderparentid").setValue(parentIdArray[i]);
                break;
            case "42":
                Wtf.getCmp("columncreationfixedassetsgroupsid").setValue(true);
                Wtf.getCmp("columncreationfixedassetsgroupsparentid").setValue(parentIdArray[i]);
                break;
            case "87":
                Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").setValue(true);
                Wtf.getCmp("columncreationfixedassetspurchaserequisitionparentid").setValue(parentIdArray[i]);
                break;
            case "88":
                Wtf.getCmp("columncreationfixedassetsrfqid").setValue(true);
                Wtf.getCmp("columncreationfixedassetsrfqparentid").setValue(parentIdArray[i]);
                break;
            case "89":
                Wtf.getCmp("columncreationfixedassetsvendorquotationid").setValue(true);
                Wtf.getCmp("columncreationfixedassetsvendorquotationparentid").setValue(parentIdArray[i]);
                break;
            case "90":
                Wtf.getCmp("columncreationfixedassetspurchaseorderid").setValue(true);
                Wtf.getCmp("columncreationfixedassetspurchaseorderparentid").setValue(parentIdArray[i]);
                break;
            case "50":
                Wtf.getCmp("columncreationconsignmentrequestid").setValue(true);
                Wtf.getCmp("columncreationconsignmentrequestparentid").setValue(parentIdArray[i]);
                break;
            case "52":
                Wtf.getCmp("columncreationconsignmentinvoiceid").setValue(true);
                Wtf.getCmp("columncreationconsignmentinvoiceparentid").setValue(parentIdArray[i]);
                break;
            case "51":
                Wtf.getCmp("columncreationconsignmentdoid").setValue(true);
                Wtf.getCmp("columncreationconsignmentdoparentid").setValue(parentIdArray[i]);
                break;
            case "53":
                Wtf.getCmp("columncreationconsignmentsalesreturnid").setValue(true);
                Wtf.getCmp("columncreationconsignmentsalesreturnparentid").setValue(parentIdArray[i]);
                break;
            case "63":
                Wtf.getCmp("columncreationconsignmentrequestvendorid").setValue(true);
                Wtf.getCmp("columncreationconsignmentvendorrequestparentid").setValue(parentIdArray[i]);
                break;
            case "58":
                Wtf.getCmp("columncreationconsignmentpurchaseinvoiceid").setValue(true);
                Wtf.getCmp("columncreationconsignmentpurchaseinvoiceparentid").setValue(parentIdArray[i]);
                break;
            case "57":
                Wtf.getCmp("columncreationconsignmentgrid").setValue(true);
                Wtf.getCmp("columncreationconsignmentgrparentid").setValue(parentIdArray[i]);
                break;
            case "59":
                Wtf.getCmp("columncreationconsignmentpurchasereturnid").setValue(true);
                Wtf.getCmp("columncreationconsignmentpurchasereturnparentid").setValue(parentIdArray[i]);
                break;
            case "64":
                Wtf.getCmp("columncreationleasecontractid").setValue(true);
                Wtf.getCmp("columncreationleasecontractparentid").setValue(parentIdArray[i]);
                break;
            case "65":
                Wtf.getCmp("columncreationleasequotationid").setValue(true);
                Wtf.getCmp("columncreationleasequotationparentid").setValue(parentIdArray[i]);
                break;
            case "93":
                Wtf.getCmp("columnCreationLeaseInvoiceid").setValue(true);
                Wtf.getCmp("columnCreationLeaseInvoiceparentid").setValue(parentIdArray[i]);
                break;
            case "67":
                Wtf.getCmp("columncreationleasedoid").setValue(true);
                Wtf.getCmp("columncreationleasedoparentid").setValue(parentIdArray[i]);
                break;
            case "68":
                Wtf.getCmp("columncreationleasereturnid").setValue(true);
                Wtf.getCmp("columncreationleasereturnparentid").setValue(parentIdArray[i]);
                break;
            case "96":
                Wtf.getCmp("columncreationfixedassetspurchasereturnid").setValue(true);
                Wtf.getCmp("columncreationfixedassetspurchasereturnparentid").setValue(parentIdArray[i]);
                break;
            case "98":
                Wtf.getCmp("columncreationfixedassetssalesreturnid").setValue(true);
                Wtf.getCmp("columncreationfixedassetssalesreturnparentid").setValue(parentIdArray[i]);
                break;
            case "121":
                Wtf.getCmp("columncreationfixedassetdetailsid").setValue(true);
                Wtf.getCmp("columncreationfixedassetdetailsparentid").setValue(parentIdArray[i]);
                break;
            case "36":
            Wtf.getCmp("columncreationleaseorderid").setValue(true);
            Wtf.getCmp("columncreationleaseorderparentid").setValue(parentIdArray[i]);
            break;
            case "25":
            Wtf.getCmp("columncreationcustomerid").setValue(true);
            Wtf.getCmp("columncreationcustomerparentid").setValue(parentIdArray[i]);
            break;
            case "24":
            Wtf.getCmp("columncreationgeneraletryid").setValue(true);
            Wtf.getCmp("columncreationgeneraletryparentid").setValue(parentIdArray[i]);
            break;
            case "26":
            Wtf.getCmp("columncreationvendorid").setValue(true);
            Wtf.getCmp("columncreationvendorparentid").setValue(parentIdArray[i]);
            break;
            case "35":
            Wtf.getCmp("columncreationcontractid").setValue(true);
            Wtf.getCmp("columncreationcontractparentid").setValue(parentIdArray[i]);
            break;
            case "92":
            Wtf.getCmp("columncreationinventoryid").setValue(true);
            Wtf.getCmp("columncreationstockissueparentid").setValue(parentIdArray[i]);
            break;
            case "95":
            Wtf.getCmp("columncreationstockadjustmentid").setValue(true);
            Wtf.getCmp("columncreationstockadjustmentparentid").setValue(parentIdArray[i]);
            break;
            case "1001":
            Wtf.getCmp("columncreationstockrequestid").setValue(true);
            Wtf.getCmp("columncreationstockrequestparentid").setValue(parentIdArray[i]);
            break;
            case "1002":
            Wtf.getCmp("columnCreationISTid").setValue(true);
            Wtf.getCmp("columnCreationISTparentid").setValue(parentIdArray[i]);
            break;
            case "1003":
            Wtf.getCmp("columncreationILTid").setValue(true);
            Wtf.getCmp("columncreationILTparentid").setValue(parentIdArray[i]);
            break;
            case Wtf.autoNum.Acc_CycleCount_ModuleId:
            Wtf.getCmp("columncreationcyclecid").setValue(true);
            Wtf.getCmp("columncreationcyclecparentid").setValue(parentIdArray[i]);
            break;
            case "1101":
                Wtf.getCmp("columncreationlabourid").setValue(true);
                Wtf.getCmp("columncreationlabourparentid").setValue(parentIdArray[i]);
                break;
            case "1102":
                Wtf.getCmp("columncreationWorkCenterMasterid").setValue(true);
                Wtf.getCmp("columncreationWorkCenterMasterparentid").setValue(parentIdArray[i]);
                break;
            case "1103":
                Wtf.getCmp("columncreationMachineMasterid").setValue(true);
                Wtf.getCmp("columncreationMachineMasterparentid").setValue(parentIdArray[i]);
                break;
            case "1104":
                Wtf.getCmp("columncreationjobworkid").setValue(true);
                Wtf.getCmp("columncreationjobworkparentid").setValue(parentIdArray[i]);
            break;
            case "1114":
            Wtf.getCmp("columncreationvendorjobworkorderid").setValue(true);
            Wtf.getCmp("columncreationvendorjobworkorderparentid").setValue(parentIdArray[i]);
            break;
            case "1105":
                Wtf.getCmp("columncreationWorkOrderid").setValue(true);
                Wtf.getCmp("columncreationWorkOrderparentid").setValue(parentIdArray[i]);
                break;
            case "1106":
                Wtf.getCmp("columncreationMasterContractid").setValue(true);
                Wtf.getCmp("columncreationMasterContractparentid").setValue(parentIdArray[i]);
                break;
            case "1107":
                Wtf.getCmp("columncreationRoutingTemplateid").setValue(true);
                Wtf.getCmp("columncreationRoutingTemplateparentid").setValue(parentIdArray[i]);
                break;
            case "79":
                 Wtf.getCmp("columncreationserialid").setValue(true);
                break;
            case "1116":
                Wtf.getCmp("columncreationsecgateentryid").setValue(true);
                Wtf.getCmp("columncreationsecgateentryparentid").setValue(parentIdArray[i]);
                break;
            case "1200":// Module ID for Multi Entity Dimesion
                Wtf.getCmp("columncreationmultientitydimensionid").setValue(true);
                Wtf.getCmp("columncreationmultientitydimensionparentid").setValue(parentIdArray[i]);
                break;   
            case "1115" :
                Wtf.getCmp("jobworkoutorderid").setValue(true);
                Wtf.getCmp("jobworkoutorderparentid").setValue(parentIdArray[i]);
        }
    }
}
function CheckParentValueForCheckedModule(){
    var moduleName="";

    if(Wtf.getCmp("columncreationinvoiceid").getValue())
    {
        if(Wtf.getCmp("columncreationinvoiceparentid").getValue()==""){
            moduleName="Customer Invoice";
        }
    }
    if(Wtf.getCmp("columncreationveninvoiceid").getValue()){
        if(Wtf.getCmp("columncreationveninvoiceparentid").getValue()==""){
            moduleName="Vendor Invoice";
        }
    }
    if(Wtf.getCmp("columncreationdebitnoteid").getValue()){
        if(Wtf.getCmp("columncreationdebitnoteparentid").getValue()==""){
            moduleName="Debit Note";
        }
    }
    if(Wtf.getCmp("columncreationcreditnoteid").getValue()){
        if(Wtf.getCmp("columncreationcreditnoteparentid").getValue()==""){
            moduleName="Credit Note";
        }
    }
    if(Wtf.getCmp("columncreationmakepaymentid").getValue()){
        if(Wtf.getCmp("columncreationmakepaymentparentid").getValue()==""){
            moduleName="Make Payment";
        }
    }
    if(Wtf.getCmp("columncreationreceivepaymentid").getValue()){
        if(Wtf.getCmp("columncreationreceivepaymentparentid").getValue()==""){
            moduleName="Receive Payment";
        }
    }
    if(Wtf.getCmp("columncreationpurchaseorderid").getValue()){
        if(Wtf.getCmp("columncreationpurchaseorderparentid").getValue()==""){
            moduleName="Purchase Order";
        }
    }
    if(Wtf.getCmp("columncreationsalesorderid").getValue()){
        if(Wtf.getCmp("columncreationsalesorderparentid").getValue()==""){
            moduleName="Sales Order";
        }
    }
    if(Wtf.getCmp("columncreationsecgateentryid").getValue()){
        if(Wtf.getCmp("columncreationsecgateentryparentid").getValue()==""){
            moduleName="Security Gate Entry";
        }
    }
    if(Wtf.getCmp("columncreationmultientitydimensionid").getValue()){
        if(Wtf.getCmp("columncreationmultientitydimensionparentid").getValue()==""){
            moduleName=WtfGlobal.getLocaleText("acc.multientitydimension.title");
        }
    }
    if(Wtf.getCmp("jobworkoutorderid").getValue()){
        if(Wtf.getCmp("jobworkoutorderparentid").getValue()==""){
            moduleName=WtfGlobal.getLocaleText("acc.jobworkout.title");
        }
    }
    if(Wtf.getCmp("columncreationcustomerquotationid").getValue()){
        if(Wtf.getCmp("columncreationcustomerquotationparentid").getValue()==""){
            moduleName="Customer Quotation";
        }
    }
    if(Wtf.getCmp("columncreationvendorquotationid").getValue()){
        if(Wtf.getCmp("columncreationvendorquotationparent").getValue()==""){
            moduleName="vendor Quotation";
        }
    }
    if(Wtf.getCmp("columncreationdeliveryorderid").getValue()){
        if(Wtf.getCmp("columncreationdeliveryorderparentid").getValue()==""){
            moduleName="Delivery Order";
        }
    }
    if(Wtf.getCmp("columncreationrequestforquotationid").getValue()){
        if(Wtf.getCmp("columncreationrequestforquotationparentid").getValue()==""){
            moduleName="Request For Quotation";
        }
    }
    if(Wtf.getCmp("columncreationpurchaserequisitionid").getValue()){
        if(Wtf.getCmp("columncreationpurchaserequisitionparentid").getValue()==""){
            moduleName="Purchase Requisition";
        }
    }
    if(Wtf.getCmp("columncreationgoodsreceiptid").getValue()){
        if(Wtf.getCmp("columncreationgoodsreceiptparentid").getValue()==""){
            moduleName="Goods Receipt Order";
        }
    }
    if(Wtf.getCmp("columncreationsalesreturnid").getValue()){
        if(Wtf.getCmp("columncreationsalesreturnparentid").getValue()==""){
            moduleName="Sales Return";
        }
    }
    if(Wtf.getCmp("columncreationpurchasereturnid").getValue()){
        if(Wtf.getCmp("columncreationpurchasereturnparentid").getValue()==""){
            moduleName="Purchase Return";
        }
    }

    if(Wtf.getCmp("columncreationfixedassetsdisposalinvoiceid").getValue()){
        if(Wtf.getCmp("columncreationfixedassetsdisposalinvoiceparentid").getValue()==""){
            moduleName="FA Disposal Invoice";
        }
    }
    if(Wtf.getCmp("columncreationfixedassetspurchaseinvoiceid").getValue()){
        if(Wtf.getCmp("columncreationfixedassetspurchaseinvoiceparentid").getValue()==""){
            moduleName="FA Purchase Invoice";
        }
    }
    if(Wtf.getCmp("columncreationfixedassetsgoodsreceiptid").getValue()){
        if(Wtf.getCmp("columncreationfixedassetsgoodsreceiptparentid").getValue()==""){
            moduleName="FA Goods Receipt";
        }
    }
    if(Wtf.getCmp("columncreationfixedassetsdeliveryorderid").getValue()){
        if(Wtf.getCmp("columncreationfixedassetsdeliveryorderparentid").getValue()==""){
            moduleName="FA Delivery Order";
        }
    }
    if(Wtf.getCmp("columncreationfixedassetsgroupsid").getValue()){
        if(Wtf.getCmp("columncreationfixedassetsgroupsparentid").getValue()==""){
            moduleName="FA Assets Group";
        }
    }

    if(Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").getValue()){
        if(Wtf.getCmp("columncreationfixedassetspurchaserequisitionparentid").getValue()==""){
            moduleName="FA Assets Purchase Requisition";
        }
    }
    if(Wtf.getCmp("columncreationfixedassetsrfqid").getValue()){
        if(Wtf.getCmp("columncreationfixedassetsrfqparentid").getValue()==""){
            moduleName="FA Assets RFQ";
        }
    }
    if(Wtf.getCmp("columncreationfixedassetsvendorquotationid").getValue()){
        if(Wtf.getCmp("columncreationfixedassetsvendorquotationparentid").getValue()==""){
            moduleName="FA Assets Vendor Quotation";
        }
    }
    if(Wtf.getCmp("columncreationfixedassetspurchaseorderid").getValue()){
        if(Wtf.getCmp("columncreationfixedassetspurchaseorderparentid").getValue()==""){
            moduleName="FA Assets Purchase Order";
        }
    }
    if(Wtf.getCmp("columncreationfixedassetspurchasereturnid").getValue()){
        if(Wtf.getCmp("columncreationfixedassetspurchasereturnparentid").getValue()==""){
            moduleName="FA Purchase Return";
        }
    }
    if(Wtf.getCmp("columncreationfixedassetssalesreturnid").getValue()){
        if(Wtf.getCmp("columncreationfixedassetssalesreturnparentid").getValue()==""){
            moduleName="FA Sales Return";
        }
    }
    if (Wtf.getCmp("columncreationfixedassetdetailsid").getValue()){
        if (Wtf.getCmp("columncreationfixedassetdetailsparentid").getValue() == ""){
            moduleName = "FA Details";
        }
    }
    if(Wtf.getCmp("AccountStatementid").getValue()){
        if(Wtf.getCmp("AccountStatementParentId").getValue()==""){
            moduleName="GL Accounts";
        }
    }

    return moduleName;
}

function addCustomColumn(isCustomField,isEdit,masterid,masterStore,moduleNames,moduleID,relatedModuleIds,name,isDeactivate, activeModuleNames){// flag value - IF false then its for dimension otherwise for custom column
    var id = 'createcustomecolumnid';
    this.prevParentDimention="";
    this.isDeactivate=isDeactivate==undefined?false:isDeactivate;
    if(activeModuleNames!=undefined){
        this.activeModuleNames=activeModuleNames.split(',');
    }

    if(moduleNames!=undefined)
        this.ModuleNamesArray=moduleNames.split(',');
    if(moduleID!=undefined)
        this.moduleID=moduleID;
    if(relatedModuleIds != undefined)
        this.relatedModuleIds=relatedModuleIds.split(',');
    var field_type_store;
    if(isCustomField) {
        field_type_store = new Wtf.data.SimpleStore({
            fields: ['field_name', 'typecode'],
            data:[['Text Field','1'],['Numeric Field','2'],['Drop Down','4']
            ,['Date','3'],['Check Box','11'],['Multi-Select Drop Down','7'],['Check List','12'],['Text Area','13'],['Rich Text Area','15']/*,['Time Field','5'],['Reference Drop Down','8'],['Multi-Select Drop Down','7'],['Auto Number','9']*/]
        });
    } else {
        field_type_store = new Wtf.data.SimpleStore({
            fields: ['field_name', 'typecode'],
            data:[['Drop Down','4']]//,['Numeric Field','2'],['Drop Down','4'],['Multi-Select Drop Down','7'],['Date','3'],['Time Field','5'],['Reference Drop Down','8'],['Auto Number','9']]
        //        data:[['Text Field','1'],['Numeric Field','2'],['Drop Down','4'],['Multi-Select Drop Down','7'],['Date','3'],['Time Field','5'],['Reference Drop Down','8'],['Auto Number','9']]
        });
    }
    var addressCombo = new Wtf.data.SimpleStore({
            fields: ['add_field_name'],
            data:[['State'],['City'],['Postal Code'],['County'],['Phone']/*,['Time Field','5'],['Reference Drop Down','8'],['Multi-Select Drop Down','7'],['Auto Number','9']*/]
        });

    //    var validation_type_store = new Wtf.data.SimpleStore({
    //        fields: ['validation_name', 'typecode'],
    //        data:[['Alphabetic','1'],['Alphanumeric','2'],['Email','3'],['URL','4'],['Custom','5']]
    //    });

    var dimension_type_store = new Wtf.data.SimpleStore({
        fields: ['name', 'id'],
        data:[['None','1'],['LMS - Program','2'],['LMS - Session','3'],['LMS - Course','4']
        ,['LMS - Learning Center','5']]
    });
    this.parentComboRec = Wtf.data.Record.create ([
    {
        name:'fieldid'
    },

    {
        name:'moduleid'
    },

    {
        name: 'fieldlabel'
    },{
        name: 'fieldtooltip'
    },
    {
        name: 'moduleidstr'
    },
    {
        name: 'parentidstr'
    },
    {
        name: 'isessential'
    }
    ]);
    this.parentComboStore=new Wtf.data.Store({
        url: "ACCAccountCMN/getFieldParamsForCombo.do",
        baseParams:{
            moduleidarray:'2,4,6,8,10,12,14,16,18,20,22,23,27,28,29,30,31,32,33,34,38,39,40,41,42,50,51,52,53,57,58,59,63,79,87,88,89,90,64,65,67,68,96,98,36,92,93,95,24,25,26,35,121,1001,1002,1003,1114,1116,1115,1200'.split(','),
            name:name
        },
        reader: new Wtf.data.KwlJsonReader({
            totalProperty: 'totalCount',
            root: "data"
        },this.parentComboRec)
    });
    this.parentCombo=  new Wtf.form.ComboBox({
        fieldLabel:WtfGlobal.getLocaleText("acc.dimension.parentCmb"),//'Select Parent',
        hiddenName:'fieldid',
        store:this.parentComboStore,
        width:185,
        hidden:isCustomField,
        hideLabel:isCustomField,
        //        hide:true,
        //        hideField:true,
        valueField:'fieldid',
        displayField:'fieldlabel',
        disabled:this.isDeactivate,
        forceSelection: true,
        triggerAction:'all',
        mode: 'local',
        selectOnFocus:true
    });
    
    this.parentCombo.on('beforeselect',function (combo,rec) {
        this.prevParentDimention=this.parentCombo.getValue();
    },this);
    this.parentCombo.on('select',function (combo,rec) {
        if(rec!=null){
            if(isEdit){
                if(Wtf.getCmp(id+'isessential').getValue()){
                    if(!rec.data.isessential){
                        this.parentCombo.setValue(this.prevParentDimention);
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.msg.ParentDimensionshouldbeMandatory")],0);
                    }
                }
            }else{
                resetAllRelatedModuleFields();
                Wtf.getCmp(id+'lineitem').setValue(false);
                Wtf.getCmp(id+'lineitem').setDisabled(true);
                if(rec.data.isessential){
                    Wtf.getCmp(id+'isessential').enable();
                }else{
                    Wtf.getCmp(id+'isessential').setValue(false);
                    Wtf.getCmp(id+'isessential').disable();
                }
            }
        }
    },this);
    this.parentComboStore.on('load', function () {
        if (isEdit) {
            if(this.parentVal != "" && this.parentVal != undefined){
                var rec = WtfGlobal.searchRecord(this.parentComboStore, this.parentVal, 'fieldlabel');
                if (rec !== null && rec != undefined) {
                    var parentid = rec.data.fieldid;
                    this.parentCombo.setValue(parentid);
                }else{
                    this.parentCombo.reset();
                }
                if(rec.data.moduleidstr!=undefined && rec.data.moduleidstr!=""){
                    CheckModuleCheckBox(rec.data.moduleidstr,rec.data.parentidstr);
                }
            }else{
                resetModulesParentIds();
            }            
        }
    }, this);
    if(!isCustomField)
        this.parentComboStore.load();
    this.parentCombo.on("select",function(store,rec){
        CheckModuleCheckBox(rec.data.moduleidstr,rec.data.parentidstr);
    },this);
    var ref_module_reader = Wtf.data.Record.create([{
        name:'id'
    },{
        name:'name'
    },{
        name:'moduleflag'
    }]);
    var ref_module_store = new Wtf.data.Store({
        url: 'crm/common/fieldmanager/getRefComboNames.do',
        reader: new Wtf.data.KwlJsonReader({
            root: 'data'
        },
        ref_module_reader
        )
    });
    var comboValue;
    var drop = new Wtf.Panel({
        layout:'column',
        cls:'crmcustomfieldhideshow',
        id:'customcombo',
        bodyStyle:"font-size:12px",
        hidden:true,
        border:false,
        items: [{
            border:false,
            width: 235,
            html:WtfGlobal.getLocaleText("acc.field.Addmultiplevaluesseparatedwith&nbsp"),//'WtfGlobal.getLocaleText("crm.spredsheet.customcolumn.multiselfieldname")+':&nbsp',//Add multiple values separated with [;]:&nbsp',
            columnWidth: .5
        },
        comboValue =  new Wtf.form.ExtendedTextField({
            id:id+"dropdowndata",
            //allowBlank : false,
            cls: "customautonopanel",
            disabled:isEdit || this.isDeactivate,
            hidden:true,
            //validator:Wtf.ValidateCustomItemName,
            name:"combodata",
            maskRe:Wtf.productNameCommaMaskRe,
            regex:Wtf.productNameCommaMaskRe,
            width:185,
            columnWidth: .4
        })  ]
    });

    var ref_drop = new Wtf.Panel({
        layout:'column',
        id:'customrefpanel',
        hidden:true,
        border:false,
        bodyStyle:"font-size:12px",
        defaults:{
            border:false
        },
        //layoutConfig:Wtf.layout.ColumnLayout,
        items: [{
            html:WtfGlobal.getLocaleText("acc.field.ReferenceField*&nbsp&nbsp"),//'WtfGlobal.getLocaleText("crm.spredsheet.customcolumn.refrencecolfieldname")+'*:&nbsp&nbsp',//'Reference Field*:&nbsp&nbsp',
            width: 235,
            layout:'fit',
            columnWidth: .65
        },{
            width: 185,
            columnWidth: .25,
            cls: "customautonopanel",
            //layout:'fit',
            items:[{
                xtype:"combo",
                name:"refeModule",
                fieldLabel:WtfGlobal.getLocaleText("acc.field.ReferenceField"),
                id:id+"ref_module",
                store:ref_module_store,
                mode:'remote',
                displayField:'name',
                hideLabel:true,
                triggerAction:'all',
                editable:false,
                valueField:'id',
                hiddenName:"refModuleid",
                typeAhead : true,
                width:167,
                listWidth:167
            }]
        },{
            html:"&nbsp&nbsp<img src='images/help.png' title="+WtfGlobal.getLocaleText("acc.invoice.msg10")+" onclick = 'showHelp(72)' >",
            id: "addrefdrpdwncustomcombo",
            columnWidth: .1
        }]
    });

    var auto_numberpanel = new Wtf.Panel({
        layout:'column',
        id:'customautonopanel',
        hidden:true,
        border:false,
        defaults:{
            border:false
        },
        bodyStyle:"font-size:12px",
        items: [{
            html:'Prefix:&nbsp&nbsp',//WtfGlobal.getLocaleText("crm.spredsheet.customcolumn.prefixfield")+':&nbsp&nbsp',//Prefix:&nbsp&nbsp',
            width: 235,
            layout:'fit',
            columnWidth: .65
        },{
            width: 185,
            columnWidth: .25,
            cls: "customautonopanel",
            items:[{
                xtype:'striptextfield',
                hideLabel:true,
                id:"prefix_field",
                maxLength:15,
                name:"prefix",
                width:185,
                validator : function() {
                    Wtf.getCmp("preview_field").body.dom.innerHTML = Wtf.getCmp("prefix_field").getValue()+parseStartNoToInt()+Wtf.getCmp("suffix_field").getValue();
                    return true;
                }
            }]
        },{
            html:'Starting Number*:&nbsp&nbsp',//WtfGlobal.getLocaleText("crm.spredsheet.customcolumn.startingnofield")+':&nbsp&nbsp',//'Starting Number*:&nbsp&nbsp',
            width: 235,
            layout:'fit',
            columnWidth: .65
        },{
            width: 185,
            columnWidth: .25,
            cls: "customautonopanel",
            items:[{
                xtype:'striptextfield',
                id:"startingno_field",
                regex: Wtf.validateNumber,
                allowBlank : false,
                regexText : Wtf.NumberInvalidText,
                hideLabel:true,
                maxLength:6,
                name:"startingnumber",
                width:185,
                validator : function() {
                    Wtf.getCmp("preview_field").body.dom.innerHTML = Wtf.getCmp("prefix_field").getValue()+parseStartNoToInt()+Wtf.getCmp("suffix_field").getValue();
                    return true;
                }
            }]
        },{
            html:"&nbsp&nbsp<img src='images/help.png' title="+WtfGlobal.getLocaleText("acc.invoice.msg10")+" onclick = 'showHelp(77)' >",
            id: "addcustomautono",
            columnWidth: .1
        },{
            html:'Suffix:&nbsp&nbsp',//WtfGlobal.getLocaleText("crm.spredsheet.customcolumn.suffix")+':&nbsp&nbsp',//'Suffix:&nbsp&nbsp',
            width: 235,
            layout:'fit',
            columnWidth: .65
        },{
            width: 185,
            columnWidth: .25,
            cls: "customautonopanel",
            items:[{
                xtype:'striptextfield',
                id:"suffix_field",
                hideLabel:true,
                maxLength:15,
                name:"suffix",
                width:185,
                validator : function() {
                    Wtf.getCmp("preview_field").body.dom.innerHTML = Wtf.getCmp("prefix_field").getValue()+parseStartNoToInt()+Wtf.getCmp("suffix_field").getValue();
                    return true;
                }
            }]
        },{
            html:'Preview:&nbsp&nbsp',//WtfGlobal.getLocaleText("crm.spredsheet.customcolumn.preview")+':&nbsp&nbsp',//'Preview:&nbsp&nbsp',
            width: 235,
            layout:'fit',
            columnWidth: .65
        },{
            width: 185,
            columnWidth: .25,
            baseCls : 'previewField',
            style:(!Wtf.isIE)? 'margin-bottom:0px !important;':'',//[IE8]: 'Add Custom Column' option is not working/ nothing happens when user clicks on the option
            items:[{
                xtype:'panel',
                id:"preview_field",
                height:20,
                border:false,
                width:185
            }]
        },{
            html:WtfGlobal.getLocaleText("acc.field.ExistingRecords&nbsp&nbsp"),//WtfGlobal.getLocaleText("crm.spredsheet.customcolumn.existingrecs")+':&nbsp&nbsp',//'Existing Records:&nbsp&nbsp',
            width: 235,
            layout:'fit',
            columnWidth: .65
        },{
            width: 185,
            columnWidth: .25,
            cls: "customautonopanel",
            items:[{
                xtype:"checkbox",
                id:id+'existingrecords',
                name:"existingrecords",
                inputValue:"1",
                cls:"checkboxLeft"
            }]
        }]
    });
    
    this.newDefaultValueField = new Wtf.form.TextField({
            fieldLabel: WtfGlobal.getLocaleText("acc.template.defaultvalue"),//Default Value
            maxLength: 100,
            width:185,
            id:id+'newdefaultvaluefield',
            hidden:true,
            hideLabel:true
        });

    var form_panel =   new Wtf.Panel({
        layout:'border',
        autoScroll:true,
        height:isCustomField ? 550:525,
        buttons:[
        {
            text: isEdit ?(isCustomField ? WtfGlobal.getLocaleText("acc.masterconfig.editCustomColumn") : WtfGlobal.getLocaleText("acc.masterconfig.editDimension")):(this.isDeactivate?WtfGlobal.getLocaleText("acc.common.saveBtn"):(isCustomField ?WtfGlobal.getLocaleText("acc.masterconfig.createCustomColumn") : WtfGlobal.getLocaleText("acc.masterconfig.createDimension"))),//WtfGlobal.getLocaleText("crm.spredsheet.addcustomcolwin.addcolbtn")),//'Add New Column',
            handler:function(e){
                var comboname = "";
                var comboid = "";
                var moduleflag = "";
                if(!this.isDeactivate){
                    if(this.parentCombo.getValue()!=""){
                        var moduleName=CheckParentValueForCheckedModule();
                        if(moduleName!=""){
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.msg.ALERTTITLE"),WtfGlobal.getLocaleText("acc.addcustomcolwin.emptyParent")+" "+moduleName+" <BR/>"+WtfGlobal.getLocaleText("acc.addcustomcolwin.emptyParent1")]);
                            return;
                        }
                    }
                }

                var checkVal=Wtf.getCmp("columncreationinvoiceid").getValue();
                var checkVal1=Wtf.getCmp("columncreationmakepaymentid").getValue();
                var checkVal2=Wtf.getCmp("columncreationcreditnoteid").getValue();
                var checkVal3=Wtf.getCmp("columncreationdebitnoteid").getValue();
                var checkVal4=Wtf.getCmp("columncreationveninvoiceid").getValue();
                var checkVal5=Wtf.getCmp("columncreationreceivepaymentid").getValue();
                var checkVal6 = Wtf.getCmp("columncreationgeneraletryid").getValue();
                var checkVal7=Wtf.getCmp("columncreationproductid").getValue();
                var checkVal8=Wtf.getCmp("columncreationpurchaseorderid").getValue();
                var checkVal9=Wtf.getCmp("columncreationsalesorderid").getValue();
                //                var checkVal10=Wtf.getCmp("columncreationcustomerquotationid").getValue();
                //                var checkVal11=Wtf.getCmp("columncreationvendorquotationid").getValue();
                var checkVal12=Wtf.getCmp("columncreationdeliveryorderid").getValue();
                var checkVal14 = Wtf.getCmp("columncreationcustomerid").getValue();
                var checkVal15 = Wtf.getCmp("columncreationvendorid").getValue();
                var checkVal16=Wtf.getCmp("columncreationgoodsreceiptid").getValue();
                var checkVal17 = Wtf.getCmp("columncreationsalesreturnid").getValue();
                var checkVal18 = Wtf.getCmp("columncreationpurchasereturnid").getValue();
                var checkVal19 = Wtf.getCmp("columncreationcustomerquotationid").getValue();
                var checkVal20 = Wtf.getCmp("columncreationvendorquotationid").getValue();
                var checkVal22 = Wtf.getCmp("columncreationpurchaserequisitionid").getValue();

                var checkVal23 = Wtf.getCmp("columncreationleaseorderid").getValue();
                var checkVal1101 = Wtf.getCmp("columncreationlabourid").getValue();
                var checkVal1102 = Wtf.getCmp("columncreationWorkCenterMasterid").getValue();
                var checkVal1103 = Wtf.getCmp("columncreationMachineMasterid").getValue();
                var checkVal1104 = Wtf.getCmp("columncreationjobworkid").getValue();
                var checkVal1114 = Wtf.getCmp("columncreationvendorjobworkorderid").getValue();
                var checkVal1105 = Wtf.getCmp("columncreationWorkOrderid").getValue();
                var checkVal1106 = Wtf.getCmp("columncreationMasterContractid").getValue();
                var checkVal1107 = Wtf.getCmp("columncreationRoutingTemplateid").getValue();
                var checkVal24 = Wtf.getCmp("columncreationcontractid").getValue();
                var checkVal33=Wtf.getCmp("columncreationrequestforquotationid").getValue();

                var checkVal38 = Wtf.getCmp("columncreationfixedassetsdisposalinvoiceid").getValue();
                var checkVal39 = Wtf.getCmp("columncreationfixedassetspurchaseinvoiceid").getValue();
                var checkVal40 = Wtf.getCmp("columncreationfixedassetsgoodsreceiptid").getValue();
                var checkVal41 = Wtf.getCmp("columncreationfixedassetsdeliveryorderid").getValue();
                var checkVal42=Wtf.getCmp("columncreationfixedassetsgroupsid").getValue();
                var checkVal87=Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").getValue();
                var checkVal88=Wtf.getCmp("columncreationfixedassetsrfqid").getValue();
                var checkVal89=Wtf.getCmp("columncreationfixedassetsvendorquotationid").getValue();
                var checkVal90=Wtf.getCmp("columncreationfixedassetspurchaseorderid").getValue();
                var checkVal43=Wtf.getCmp("columncreationserialid").getValue();
                var checkVal44=Wtf.getCmp("columncreationinventoryid").getValue();
                var checkVal50=Wtf.getCmp("columncreationconsignmentrequestid").getValue();
                var checkVal51=Wtf.getCmp("columncreationconsignmentdoid").getValue();
                var checkVal52=Wtf.getCmp("columncreationconsignmentinvoiceid").getValue();
                var checkVal53=Wtf.getCmp("columncreationconsignmentsalesreturnid").getValue();
                var checkVal57=Wtf.getCmp("columncreationconsignmentgrid").getValue();
                var checkVal58=Wtf.getCmp("columncreationconsignmentpurchaseinvoiceid").getValue();
                var checkVal59=Wtf.getCmp("columncreationconsignmentpurchasereturnid").getValue();
                var checkVal63=Wtf.getCmp("columncreationconsignmentrequestvendorid").getValue();
                var checkVal66=Wtf.getCmp("columnCreationLeaseInvoiceid").getValue();
                var checkVal64=Wtf.getCmp("columncreationleasecontractid").getValue();
                var checkVal65=Wtf.getCmp("columncreationleasequotationid").getValue();
                var checkVal67=Wtf.getCmp("columncreationleasedoid").getValue();
                var checkVal68=Wtf.getCmp("columncreationleasereturnid").getValue();
                var checkVal96=Wtf.getCmp("columncreationfixedassetspurchasereturnid").getValue();
                var checkVal98=Wtf.getCmp("columncreationfixedassetssalesreturnid").getValue();
                var checkVal123=Wtf.getCmp("columncreationfixedassetdetailsid").getValue();
                var checkVal124=Wtf.getCmp("columncreationstockadjustmentid").getValue();
                var checkVal125=Wtf.getCmp("columncreationstockrequestid").getValue();
                var checkVal126=Wtf.getCmp("columnCreationISTid").getValue();
                var checkVal127=Wtf.getCmp("columncreationILTid").getValue();
                var checkVal1104=Wtf.getCmp("columncreationcyclecid").getValue();
                var checkVal1116=Wtf.getCmp("columncreationsecgateentryid").getValue();
                var checkVal1200=Wtf.getCmp("columncreationmultientitydimensionid").getValue();
                var checkVal1115=Wtf.getCmp("jobworkoutorderid").getValue();                

                var checkVal21 = Wtf.getCmp("AccountStatementid").getValue();
                if(!this.isDeactivate){
                    if( !checkVal22&&!checkVal21 && !checkVal && !checkVal1 && !checkVal2 && !checkVal3 && !checkVal4 && !checkVal5 && !checkVal6 && !checkVal7 &&  !checkVal12 && !checkVal14 && !checkVal15 && !checkVal16 && !checkVal17 && !checkVal18 && !checkVal8 && !checkVal9 && !checkVal19 && !checkVal20  && !checkVal23 && !checkVal24 && !checkVal33 && !checkVal38 && !checkVal39 && !checkVal40 && !checkVal41 && !checkVal42 && !checkVal87 && !checkVal88 && !checkVal89 && !checkVal90 && !checkVal43 && !checkVal44 && !checkVal50 && !checkVal51 && !checkVal52 && !checkVal53 && !checkVal57 && !checkVal58 && !checkVal59 && !checkVal63 &&!checkVal64
                            && !checkVal65 && !checkVal66 && !checkVal67 && !checkVal68 && !checkVal96 && !checkVal98 && !checkVal123 && !checkVal124 && !checkVal125 && !checkVal126 && !checkVal127 && !checkVal1101 && !checkVal1102 && !checkVal1103 && !checkVal1104 && !checkVal1105 && !checkVal1106 && !checkVal1107 && !checkVal1114 && !checkVal1104 && !checkVal1116 && !checkVal1200 && !checkVal1115){
                        Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Pleaseselectmoduleforadding") + (isCustomField ?WtfGlobal.getLocaleText("acc.field.CustomField") : WtfGlobal.getLocaleText("acc.field.Dimension")));
                        return;
                    }
                }
                //                if (checkVal7) {
                //                    var frmcheckVal1 = Wtf.getCmp("columncreationinvoiceformid").getValue();
                //                    var frmcheckVal2 = Wtf.getCmp("columncreationveninvoiceformid").getValue();
                //                    var frmcheckVal3 = Wtf.getCmp("columncreationsalesorderformid").getValue();
                //                    var frmcheckVal4 = Wtf.getCmp("columncreationpurchaseorderformid").getValue();
                //                    var frmcheckVal5 = Wtf.getCmp("columncreationdeliveryorderformid").getValue();
                //                    //var frmcheckVal6 = Wtf.getCmp("columncreationgrorderformid").getValue();
                //                    //var frmcheckVal7 = Wtf.getCmp("columncreationcustomerquotationformid").getValue();
                //                    //var frmcheckVal8 = Wtf.getCmp("columncreationvendorquotationformid").getValue();
                //                    if (!frmcheckVal1 && !frmcheckVal2 && !frmcheckVal3 && !frmcheckVal4 && !frmcheckVal5
                //                        /*&& !frmcheckVal6 && !frmcheckVal7 && !frmcheckVal8*/) {
                //                        Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.field.Pleaseselectmoduleforadding") + (isCustomField ? WtfGlobal.getLocaleText("acc.field.CustomField") : WtfGlobal.getLocaleText("acc.field.Dimension")));
                //                        return;
                //                    }
                //
                //                }
                if(Wtf.getCmp(id+"ref_module").getValue() != "") {
                    comboname = Wtf.getCmp(id+"ref_module").lastSelectionText;
                    comboid = Wtf.getCmp(id+"ref_module").value;
                    moduleflag = ref_module_store.getAt(ref_module_store.find('id',Wtf.getCmp(id+"ref_module").value)).get("moduleflag");
                }
                var drpDown =Wtf.getCmp(id+"dropdowndata");
                var val = drpDown.getValue();
                if(val.trim() != ""){
                    var valArray = val.split(";")
                    var finalval="";

                    if(!drpDown.hidden){
                        var maxLengthCheck = 0;
                        var value="";
                        for(var i = 0 ; i < valArray.length ; i++){
                            var combodata = valArray[i].trim();
                            if(combodata!=""){
                                finalval+=combodata+";"
                                if(combodata.length > maxLengthCheck){
                                    maxLengthCheck = combodata.length;
                                    value=combodata;
                                }
                            }

                        }
                        var mxVal = Wtf.getCmp("max_length").getValue();
                        if(mxVal!="" && maxLengthCheck > mxVal){
                            if(!this.formPanel.isValid()){
                                WtfComMsgBox(111);
                            } else {
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.msg.FAILURSEARCHETITLE"),WtfGlobal.getLocaleText({
                                    key:"acc.addcustomcolwin.maxlencheck",
                                    params:[value,maxLengthCheck,mxVal]
                                    })]);
                            }
                            Wtf.getCmp("max_length").setValue("");
                            Wtf.getCmp("max_length").allowBlank=false;
                            //Wtf.getCmp(id+"dropdowndata").allowBlank=false;
                            return;
                        }
                        var trmLen = finalval.length - 1;
                        finalval = finalval.substr(0,trmLen);
                        drpDown.setValue(finalval);
                    }
                }
                var defval = "";
                var fieldType = Wtf.getCmp(id+"fieldtype_combo").getValue();
                if(fieldType =="11" || fieldType =="3" || fieldType =="2" || fieldType =="5")
                {
                    Wtf.getCmp(id+"dropdowndata").allowBlank=true;
                }
                if(fieldType =="9") { // auto number field
                    Wtf.getCmp(id+'iseditablecolumn').value = false;
                    var forexistingrecords = Wtf.getCmp(id+'existingrecords').getValue();
                    if(forexistingrecords) {
                        Wtf.getCmp(id+'defaultvalue').setValue(Wtf.getCmp("startingno_field").getValue());
                    }
                }
                if(fieldType =="2") //Kuldeep Singh : Maxlength for number field can not be greater than 16: Does not supported by WTF
                {
                    var mxValue = Wtf.getCmp("max_length").getValue();
                    defval = this.newDefaultValueField.getValue();

                    if(mxValue>16){
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.msg.ALERTTITLE"),WtfGlobal.getLocaleText("acc.addcustomcolwin.numfield.maxlenchk")]);//"Max Length for number field can not be greater than 16."]);
                        Wtf.getCmp("max_length").setValue("");
                        Wtf.getCmp("max_length").markInvalid();
                        Wtf.getCmp("max_length").allowBlank=false;
                        return;
                    }

                }
                if(fieldType =="5"){
                    Wtf.getCmp("max_length").setValue(16);
                    var mxValue = Wtf.getCmp("max_length").getValue();
                    if(mxValue<15){
                        WtfComMsgBox(961,0);
                        Wtf.getCmp("max_length").setValue("");
                        Wtf.getCmp("max_length").markInvalid();
                        Wtf.getCmp("max_length").allowBlank=false;
                        return;
                    }

                }
                if (fieldType == "") {
                   // Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.dimension.msg.21"));
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.dimension.msg.21")],2);
                    Wtf.getCmp(id+"fieldtype_combo").markInvalid();
                    return;
                }
                if (fieldType == "7" &&  comboValue.getValue()=="") {
                    //Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.dimension.msg.21"));
                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.dimension.msg.21")],2);
                    return;
                }
                this.formPanel=Wtf.getCmp(id+"cstfrm").form;
                var  isautopopulatedefaultvalue = Wtf.getCmp(id+'isautopopulatedefaultvalue').getValue();
                var  isForGST = Wtf.getCmp(id+'gstitem').getValue();
                var addressField = Wtf.getCmp(id+'multientityaddress').getValue();
                if(isForGST) {//if isForGST is true then address field cannot be empty
                    if(addressField == undefined || addressField == "") {
                        Wtf.getCmp(id+'multientityaddress').markInvalid();
                        //Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.dimension.msg.21"));
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.dimension.msg.21")],2);
                        return;
                    }
                }
                var isessential = Wtf.getCmp(id+'isessential').getValue();
                var isforproject = Wtf.getCmp(id+'isforproject').getValue();
                var isForeclaim = Wtf.getCmp(id+"isforeclaim").getValue();
                var isForSalesCommission = Wtf.getCmp(id+'isforsalescommission').getValue();
                var defval1=undefined;
                var isForKnockOffDocuments = Wtf.getCmp(id+'isusedforknockoffdocuments').getValue();
                if(this.formPanel.isValid()){
                if(this.isDeactivate) {
                    defval = "";
                } else if(fieldType == "3" && isessential){
                    
                    //defaultDate=WtfGlobal.convertToGenericDate(this.newDefaultValueField.getValue());
                    defval1 = this.newDefaultValueField.getValue();//value.format("M d, Y h:i:s A");
                    defval = defval1.format("M d, Y h:i:s A");
                } else if(fieldType == "2"){
                    defval = this.newDefaultValueField.getValue();
                } else{
                    defval = this.newDefaultValueField.getValue().trim();
                }
                var isvalid = isessential ? (defval != "" && defval != undefined) : true;//If isessential is true then check default value else retun true
                    if(isvalid || this.isDeactivate){
                    e.disable();
                    Wtf.commonWaitMsgBox(WtfGlobal.getLocaleText("acc.msgbox.49"));//"Saving data...");
                    //                                WtfGlobal.setAjaxReqTimeout();
                    WtfGlobal.setAjaxTimeOut();
                    this.formPanel.submit({
                        params:{
                            masterid : masterid,
                            comboname: comboname,
                            comboid: comboid,
                            moduleflag: moduleflag,
                            isessential:isessential?1:0,
                            isforproject: isforproject?1:0,
                            isforeclaim:isForeclaim?1:0,
                            isEdit:isEdit,
                            moduleID:this.moduleID,
                            isCustomColumn:this.isCustomColumn,
                            defaultval : defval,
                            combodata :  comboValue.getValue(),
                            lineitem : Wtf.getCmp(id+'lineitem').getValue() ? "1":"",
                            isForSalesCommission:isForSalesCommission,
                            isautopopulatedefaultvalue : isautopopulatedefaultvalue,
                            isForKnockOff:isForKnockOffDocuments,
                            isForGST : isForGST,
                            addressField : addressField  // Address Field Mapped With dimension
                        },
                        success:function(formobj,action){
                            WtfGlobal.resetAjaxTimeOut();
                            //                                        WtfGlobal.resetAjaxReqTimeout();
                            Wtf.updateProgress();
                            masterStore.load();
                            var fieldHeader = formobj.items.items[0].getValue();
                            var fieldName =fieldHeader.replace(/\s+/g,"_");

                            e.enable();
                            var data = eval('('+action.response.responseText+')').data;
                            var sucess = data.sucess;
                            var duplicateflag = data.duplicateflag != undefined ? data.duplicateflag : false;
                            var msg="";
                            var modulename="";
                            var msg1="";
                            var msg2="";
                            var temp="";
                            var q="";
                            var flge =true;

                            if(sucess!=undefined){
                                if(isEdit ) {
                                    msg =WtfGlobal.getLocaleText("acc.field.Column/Dimensionhasbeensavedsuccessfully");
                                } else if(this.isDeactivate){
                                    msg =WtfGlobal.getLocaleText("acc.field.changessavedsucessfully");
                                } else {
                                    var flg=false;

                                    for(var x=0; x<sucess.length;x++){
                                        var q=eval('('+sucess[x]+')');
                                        var notadded = q.msg.match("Cannot");
                                        if(q.moduleName){
                                            msg1=WtfGlobal.getLocaleText("acc.field.CannotaddnewColumn/DimensionMaximumcustomfieldlimitreachedforfollowingmodules");
                                        }
                                        if(notadded){
                                            modulename+=q.moduleName+", ";
                                            temp=WtfGlobal.getLocaleText("acc.field.forrestmodules");
                                        }else{
                                            flg=true;
                                            msg=WtfGlobal.getLocaleText("acc.field.NewColumn/Dimensionhasbeencreatedsuccessfully");
                                            msg2="";
                                        }
                                    }
                                    modulename= modulename!=""?modulename.substring(0,modulename.length-2)+".":"";
                                    temp=msg!=""?temp:"";
                                    msg=msg1+"<b>"+modulename+"</b><br/>"+msg+ temp+msg2;
                                }
                                } else if(data.values1!=undefined && data.values1!="")
                                    {
                                        flge=false;
                                        comboValue.setValue(data.values1);
                                        msg=data.sms;
                                    }
                            //else if(!flge){
                            //                                        msg= data.sms;
                            //                                    }
                            else{
                                msg=data.msg;
                            }
                            //msg=data.msg;
                            if(flg)
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.masterConfig.tabTitle"),msg],0);
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.field.AlertMessage"),msg],0);
                            //                                        if(Wtf.getCmp(this.id+'lineitem')) {
                            loadCustomFieldColModel(undefined, '2,4,6,8,10,12,14,16,18,20,22,23,24,27,28,29,31,34,1115,1116'.split(',')) //ERP-18446 Added moduleId:22,23
                            //
                            //                                                                            }
                            if(flg)
                            {
                                Wtf.getCmp("new_custom_field_window").close();
                            }
                            if(data.values1!="")
                            {
                                comboValue.setValue(data.values1);
                            }
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.masterConfig.tabTitle"),msg],0);
                            //                                        if(Wtf.getCmp(this.id+'lineitem')) {
                            //ERP-5454 , 27 For Delivery Order module
                            loadCustomFieldColModel(undefined, '2,4,6,8,10,12,14,16,18,20,22,23,24,27,28,29,30,31,32,33,34,1115,1116'.split(',')) // ERP-18446 Added moduleId:22,23
                            //                                        }
                            if(!duplicateflag && Wtf.getCmp("new_custom_field_window"))
                                Wtf.getCmp("new_custom_field_window").close();

                        },
                        failure:function(formobj,action) {
                            WtfGlobal.resetAjaxTimeOut();
                            var evalData=eval('('+action.response.responseText+')');
                            var msg =WtfGlobal.getLocaleText("acc.field.Failedtoaddnewcolumn");
                            if(evalData.data.msg!=undefined)
                                msg = eval('('+action.response.responseText+')').data.msg;
                            Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.invoiceList.status"), msg);
                            e.enable();
                        },
                        scope:this
                    })
                }else{
                    //Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.dimension.msg.21"));
                     WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.dimension.msg.21")],2);
                    return;
                }
            }else{
              //  Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.dimension.msg.21"));
                 WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.dimension.msg.21")],2);
                return;
            }

            },
            scope:this
        }/*,{
            text:'Add Custom Formula',
            id: id+"addFormulae",
            disabled:true,
            hidden: (obj.importflag==1?true:false),
            scope:this,
            handler:function(){
                    var isessential =Wtf.getCmp(id+'isessential').getValue();
                    var defaultval = Wtf.getCmp(id+'defaultvalue').getValue();
                    if(!isessential || ( defaultval && defaultval.trim()!="")){
                        Wtf.getCmp("new_custom_field_window").hide();
                        new Wtf.SpreadSheet.FormulaeWindow({
                            id:id+'addCustomFormulae',
                            cm:colModel,
                            fieldlabel:Wtf.getCmp("column_header_field").getValue(),
                            maxlength:Wtf.getCmp("max_length").getValue(),
                            validationType:"",
                            fieldType:Wtf.getCmp(id+"fieldtype_combo").getValue(),
                            modulename:modName,
                            isessential:isessential,
                            customRegex:Wtf.getCmp(id+"customregx").getValue(),
                            moduleid:moduleid,
                            createFieldFlag : true,
                            defaultval : defaultval.trim()
                        });
                    }else{
                        WtfComMsgBox(958,0);
                        return;
                    }
            }
        }*/,{
            text:WtfGlobal.getLocaleText("acc.CLOSEBUTTON"),//,
            height:10,
            scope:this,
            handler:function(){
                if(Wtf.getCmp(id+'addCustomFormulae') != null) {
                    Wtf.getCmp(id+'addCustomFormulae').destroy();
                }
                Wtf.getCmp("new_custom_field_window").close();
            }

        }
        ],
        items:[{
            region : 'north',
            height : 75,
            border : false,
            bodyStyle : 'background:white;border-bottom:1px solid #bfbfbf;',
            html: getTopHtml((isEdit ?(isCustomField ? WtfGlobal.getLocaleText("acc.masterconfig.editCustomColumn") : WtfGlobal.getLocaleText("acc.masterconfig.editDimension")):(this.isDeactivate?(isCustomField ? WtfGlobal.getLocaleText("acc.field.DeactivateCustomField") : WtfGlobal.getLocaleText("acc.field.DeactivateDimensions")):(isCustomField ? WtfGlobal.getLocaleText("acc.field.CreateCustomField") : WtfGlobal.getLocaleText("acc.field.CreateDimensions")))) ,isEdit ?(isCustomField ? WtfGlobal.getLocaleText("acc.masterconfig.editCustomColumn") : WtfGlobal.getLocaleText("acc.masterconfig.editDimension")):(this.isDeactivate?(isCustomField ? WtfGlobal.getLocaleText("acc.field.DeactivateCustomField") : WtfGlobal.getLocaleText("acc.field.DeactivateDimensions")):(isCustomField ? WtfGlobal.getLocaleText("acc.field.CreateCustomField") :WtfGlobal.getLocaleText("acc.field.CreateDimensions"))) ,"../../images/customize-header-popup.jpg"),
            layout:'fit'
        },{
            region:'center',
            border:false,
            layout:'fit',
            autoScroll:true,
            bodyStyle: "background:#f1f1f1; padding:10px ",
            items:[{
                xtype:"form",
                border:false,
                id:id+"cstfrm",
                autoScroll:true,
                labelWidth:230,
                url:this.isDeactivate?"ACCAccountCMN/saveCustomFieldActivation.do":"ACCAccountCMN/insertfield.do",
                bodyStyle: "background: none repeat scroll 0% 0% transparent; padding: 10px; ",
                items:[this.parentCombo,{
                    xtype:'striptextfield',
                    fieldLabel:isCustomField ? WtfGlobal.getLocaleText("acc.field.FieldName*") : WtfGlobal.getLocaleText("acc.field.DimensionHeader*"),//WtfGlobal.getLocaleText("crm.editor.managecols.addcustomcolwin.columnheader")+'*',//"Column Header",
                    id:"column_header_field",
                    allowBlank : false,
                    maxLength:50,
                    disabled:this.isDeactivate,
                    validator:Wtf.ValidateCustomColumnName,
                    name:"fieldlabel",
                    width:185
                },{
                    xtype:'striptextfield',
                    fieldLabel: WtfGlobal.getLocaleText("acc.field.FieldTooltip") ,//isCustomField ? WtfGlobal.getLocaleText("acc.field.FieldTooltip") : WtfGlobal.getLocaleText("acc.field.DimensionTooltip"),
                    id:"column_header_field_tooltip",
                    hidden : !isCustomField,
                    hideLabel : !isCustomField,
                    maxLength:150,
                    disabled:this.isDeactivate,
                    name:"fieldtooltip",
                    width:185
                },{
                    xtype:"combo",
                    fieldLabel:WtfGlobal.getLocaleText("acc.field.FieldType")+"*",//WtfGlobal.getLocaleText("crm.customreport.header.fieldtype"),//"Field Type",
                    name:"fieldType",
                    id:id+"fieldtype_combo",
                    allowBlank : false,
                    store:field_type_store,
                    displayField:"field_name",
                    valueField:'typecode',
                    mode:'local',
                    typeAhead:true,
                    disabled:this.isDeactivate,
                    triggerAction:'all',
                    hiddenName:"fieldType",
                    width:185
                },{
                    xtype:"numberfield",
                    fieldLabel:WtfGlobal.getLocaleText("acc.field.MaxLength"),//WtfGlobal.getLocaleText("crm.editor.managecols.addcustomcolwin.maxlength"),//"Max Length",
                    id:"max_length",
                    hideLabel:this.isDeactivate,
                    hidden:this.isDeactivate,
                    minValue:1,
                    maxValue:2000,
                    allowBlank : false,
                    //                    value:50,
                    allowDecimals:false,
                    name:"maxlength",
                    width:185
                },{
                    xtype:"combo",
                    fieldLabel:WtfGlobal.getLocaleText("acc.field.mapWithFieldType"),
                    name:"mapWithFieldType",
                    id:id+"mapWithFieldType",
                    allowBlank : false,
                    store:dimension_type_store,
                    displayField:"name",
                    valueField:'id',
                    hidden : !Wtf.account.companyAccountPref.isLMSIntegration || isCustomField, // || this.isDeactivate,
                    hideLabel : !Wtf.account.companyAccountPref.isLMSIntegration || isCustomField, //|| this.isDeactivate,
                    mode:'local',
                    typeAhead:true,
                    triggerAction:'all',
                    hiddenName:"mapWithFieldType",
                    width:185
                },ref_drop,drop,auto_numberpanel,{
                    xtype:"checkbox",
                    fieldLabel:WtfGlobal.getLocaleText("acc.field.IsUsedForKnockOffDocuments"),
                    id:id+'isusedforknockoffdocuments',
                    name:"isusedforknockoffdocuments",
                    hidden : this.isDeactivate,
                    hideLabel : this.isDeactivate,
                    style:'margin-top: 4px;',
                    inputValue:"1"
                },{
                    xtype:"checkbox",
                    fieldLabel:WtfGlobal.getLocaleText("acc.field.IsLineItem"),//"Is Line Item",
                    id:id+'lineitem',
                    name:"lineitem",
                    inputValue:"1",
                    style:'margin-top: 4px;',
                    hideLabel:this.isDeactivate,
                    hidden:this.isDeactivate
//                    cls:"checkboxLeft"

                },{
                    xtype:"checkbox",
                    fieldLabel:WtfGlobal.getLocaleText("acc.field.IsForGST"),//"Is For GST",
                    id:id+'gstitem',
                    name:"gstitem",
                    inputValue:"1",
                    style:'margin-top: 4px;',
                    hideLabel:true,//isCustomField || !Wtf.account.companyAccountPref.isMultiEntity,
                    hidden:true//isCustomField || !Wtf.account.companyAccountPref.isMultiEntity
                    //disabled:!Wtf.account.companyAccountPref.isMultiEntity
                },{
                    xtype:'fieldset',
                    id:id+'addressfieldset',
                    border : false,
                    style: 'margin-top: 9px; margin-bottom: 0px; padding: 0px; border-width: 0px;',                    
                    height: 30,
                    hidden : true,
                    layout: 'form',
                    items: [{
                                xtype:"combo",
                                fieldLabel:WtfGlobal.getLocaleText("acc.multientity.address") + "*",
                                name:"fieldType",
                                id:id + 'multientityaddress',
                                forceSelection: true,
                                store:addressCombo,
                                displayField:"add_field_name",
                                valueField:'add_field_name',
                                mode:'local',
                                typeAhead:true,
                                minChars: 1,
                                disabled:this.isDeactivate,
                                triggerAction:'all',
                                hiddenName:"fieldType",
                                listWidth: 185,
                                width:168,
                                hideLabel:true,
                                hidden:true
                            }]                                        
                },{
                    xtype:"checkbox",
                    fieldLabel:WtfGlobal.getLocaleText("acc.customfield.isMandetory"),//WtfGlobal.getLocaleText("crm.isMandatory"),//"Is mandatory",
                    id:id+'isessential',
                    name:"isessential",
                    style:'margin-top: 4px;',
                    hideLabel:this.isDeactivate,
                    hidden:this.isDeactivate,
                    inputValue:"1"
//                    cls:"checkboxLeft"

                },this.newDefaultValueField,{
                    xtype:"checkbox",
                    fieldLabel: "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.customfield.isAutoPopulate.defaultvalue.qtip") + "'>" + WtfGlobal.getLocaleText("acc.customfield.isAutoPopulate.defaultvalue") + "</span>" + ' *',
                    id:id+'isautopopulatedefaultvalue',
                    name:"isautopopulatedefaultvalue",
                    style:'margin-top: 4px;',
                    hideLabel:true,
                    hidden:true,
                    inputValue:"1"
                },{
                    xtype:"checkbox",
                    fieldLabel:WtfGlobal.getLocaleText("acc.field.IsForProject"),
                    id:id+'isforproject',
                    name:"isforproject",
                    hidden : !Wtf.isPMSync || isCustomField || this.isDeactivate,
                    hideLabel : !Wtf.isPMSync || isCustomField || this.isDeactivate,
                    style:'margin-top: 4px;',
                    inputValue:"1"
                },{
                    xtype:"checkbox",
                    fieldLabel:WtfGlobal.getLocaleText("acc.field.IsForTask"),
                    id:id+'isfortask',
                    name:"isfortask",
                    hidden : !Wtf.isPMSync || isCustomField || this.isDeactivate,
                    hideLabel : !Wtf.isPMSync || isCustomField || this.isDeactivate,
                    style:'margin-top: 4px;',
                    inputValue:"1"
                },{
                    xtype:"checkbox",
                    fieldLabel:WtfGlobal.getLocaleText("acc.field.IsForeClaim"),
                    id:id+'isforeclaim',
                    name:"isforeclaim",
                    hidden : !Wtf.iseClaimSync || isCustomField || this.isDeactivate,
                    hideLabel : !Wtf.iseClaimSync || isCustomField || this.isDeactivate,
                    style:'margin-top: 4px;',
                    inputValue:"1"
                },{
                    xtype:"checkbox",
                    fieldLabel:WtfGlobal.getLocaleText("acc.field.SendNotification"),//"Send Notification",
                    id:id+'sendNotification',
                    name:"sendNotification",
                    inputValue:"1",
                    hideLabel:true,
                    hidden:true
                },{
                    xtype:"checkbox",
                    fieldLabel:WtfGlobal.getLocaleText("acc.field.isForSalesCommission"),
                    id:id+'isforsalescommission',
                    name:"isforsalescommission",
                    hidden : isCustomField || this.isDeactivate || (Wtf.account.companyAccountPref.countryid != Wtf.Country.US),
                    hideLabel : isCustomField || this.isDeactivate || (Wtf.account.companyAccountPref.countryid != Wtf.Country.US),
                    style:'margin-top: 4px;',
                    inputValue:"1"
                },{
                    xtype:'fieldset',
                    width:(Wtf.isIE)?'91%':'85%',//[IE8]: 'Add Custom Column' option is not working/ nothing happens when user clicks on the option
                    height:'75%',
                    title:this.isDeactivate?WtfGlobal.getLocaleText("acc.field.activeinmodule"):WtfGlobal.getLocaleText("acc.field.Createinmodules"),//WtfGlobal.getLocaleText("crm.fieldsetTitle"),//'Create in other modules also',
                    border : false,
                    labelWidth:150,
                    items: [{
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.1"),
                                name:'columncreationinvoice',
                                style:'margin-top: 3px;',
                                id:'columncreationinvoiceid',
                                checked: (isEdit || this.isDeactivate) ? false : true
                            }),new Wtf.form.Hidden({
                                name:'columncreationinvoiceparent',
                                style:'margin-top: 3px;',
                                id:'columncreationinvoiceparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.2"),
                                name:'columncreationveninvoice',
                                style:'margin-top: 3px;',
                                id:'columncreationveninvoiceid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationveninvoiceparent',
                                style:'margin-top: 3px;',
                                id:'columncreationveninvoiceparentid',
                                checked:true
                            })]
                        }]
                    },{
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.3"),
                                name:'columncreationdebitnote',
                                style:'margin-top: 3px;',
                                id:'columncreationdebitnoteid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationdebitnoteparent',
                                style:'margin-top: 3px;',
                                id:'columncreationdebitnoteparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.4"),
                                name:'columncreationcreditnote',
                                style:'margin-top: 3px;',
                                id:'columncreationcreditnoteid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationcreditnoteparent',
                                style:'margin-top: 3px;',
                                id:'columncreationcreditnoteparentid',
                                checked:true
                            })]
                        }]
                    },{
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.5"),
                                name:'columncreationmakepayment',
                                style:'margin-top: 3px;',
                                id:'columncreationmakepaymentid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationmakepaymentparent',
                                style:'margin-top: 3px;',
                                id:'columncreationmakepaymentparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.6"),
                                name:'columncreationreceivepayment',
                                style:'margin-top: 3px;',
                                id:'columncreationreceivepaymentid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationreceivepaymentparent',
                                style:'margin-top: 3px;',
                                id:'columncreationreceivepaymentparentid',
                                checked:true
                            })]
                        }]
                    },{
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.8"),
                                name:'columncreationgeneraletry',
                                style:'margin-top: 3px;',
                                id:'columncreationgeneraletryid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationgeneraletryparent',
                                style:'margin-top: 3px;',
                                id:'columncreationgeneraletryparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            //                                 hideLabel:!isCustomField,
                            //                                 hidden:!isCustomField,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.14"),
                                name:'columncreationcustomer',
                                style:'margin-top: 3px;',
                                id:'columncreationcustomerid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationcustomerparent',
                                style:'margin-top: 3px;',
                                id:'columncreationcustomerparentid',
                                checked:true
                            })]
                        }]
                    },{
                        layout : 'column',
                        border : false,
                        //                            hideLabel:!isCustomField,
                        //                            hidden:!isCustomField,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.15"),
                                name:'columncreationvendor',
                                style:'margin-top: 3px;',
                                id:'columncreationvendorid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationvendorparent',
                                style:'margin-top: 3px;',
                                id:'columncreationvendorparentid',
                                checked:true
                            })]
                        }]

                    /*},{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                                items : [this.check3=new Wtf.form.Checkbox({
                                    fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.9"),
                                    name:'columncreationgeneraletry',
                                style:'margin-top: 3px;',
                                    id:'columncreationgeneraletryid'
                            })]
                            }] */
                    },{
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.10"),
                                name:'columncreationpurchaseorderid',
                                style:'margin-top: 3px;',
                                id:'columncreationpurchaseorderid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationpurchaseorderparent',
                                style:'margin-top: 3px;',
                                id:'columncreationpurchaseorderparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.9"),
                                name:'columncreationsalesorderid',
                                style:'margin-top: 3px;',
                                id:'columncreationsalesorderid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationsalesorderparent',
                                style:'margin-top: 3px;',
                                id:'columncreationsalesorderparentid',
                                checked:true
                            })]
                        }]
                    },{
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.13"),
                                name:'columncreationdeliveryorder',
                                style:'margin-top: 3px;',
                                id:'columncreationdeliveryorderid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationdeliveryorderparent',
                                style:'margin-top: 3px;',
                                id:'columncreationdeliveryorderparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.16"),
                                name:'columncreationgoodsreceipt',
                                style:'margin-top: 3px;',
                                id:'columncreationgoodsreceiptid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationgoodsreceiptparent',
                                style:'margin-top: 3px;',
                                id:'columncreationgoodsreceiptparentid',
                                checked:true
                            })]
                        }]
                    },{
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.17"),
                                name:'columncreationsalesreturn',
                                style:'margin-top: 3px;',
                                id:'columncreationsalesreturnid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationsalesreturnparent',
                                style:'margin-top: 3px;',
                                id:'columncreationsalesreturnparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.18"),
                                name:'columncreationpurchasereturn',
                                style:'margin-top: 3px;',
                                id:'columncreationpurchasereturnid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationpurchasereturnparent',
                                style:'margin-top: 3px;',
                                id:'columncreationpurchasereturnparentid',
                                checked:true
                            })]
                        }]
                    },
                    {
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.12"),
                                name:'columncreationcustomerquotation',
                                style:'margin-top: 3px;',
                                id:'columncreationcustomerquotationid'

                            }),new Wtf.form.Hidden({
                                name:'columncreationcustomerquotationparent',
                                style:'margin-top: 3px;',
                                id:'columncreationcustomerquotationparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.11"),
                                name:'columncreationvendorquotation',
                                style:'margin-top: 3px;',
                                id:'columncreationvendorquotationid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationvendorquotationparent',
                                style:'margin-top: 3px;',
                                id:'columncreationvendorquotationparent',
                                checked:true
                            })]
                        }]
                    },
                    {
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.20"),
                                name:'columncreationpurchaserequisition',
                                style:'margin-top: 3px;',
                                id:'columncreationpurchaserequisitionid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationpurchaserequisitionparent',
                                style:'margin-top: 3px;',
                                id:'columncreationpurchaserequisitionparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.checkrfq=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.23"),
                                name:'columncreationrequestforquotation',
                                style:'margin-top: 3px;',
                                id:'columncreationrequestforquotationid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationrequestforquotationparent',
                                style:'margin-top: 3px;',
                                id:'columncreationrequestforquotationparentid',
                                checked:true
                            })]
                        }
                        //                        ,{
                        //                            columnWidth: '.45',
                        //                            layout : 'form',
                        //                            border : false,
                        //                            items : [this.check3=new Wtf.form.Checkbox({
                        //                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.11"),
                        //                                name:'columncreationvendorquotation',
                        //                                style:'margin-top: 3px;',
                        //                                id:'columncreationvendorquotationid'
                        //                            })]
                        //                        }
                        ]
                    },{
                        layout : 'column',
                        border : false,
                        items: [
//                            {
//                            columnWidth: '.45',
//                            layout : 'form',
//                            border : false,
//                            items : [new Wtf.form.Checkbox({
//                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.21"),
//                                name:'columncreationleaseorder',
//                                style:'margin-top: 3px;',
//                                id:'columncreationleaseorderid'
//                            })]
//                        }
                        {
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.35"),
                                name:'columncreationcontract',
                                style:'margin-top: 3px;',
                                id:'columncreationcontractid'
                                }),new Wtf.form.Hidden({
                                name:'columncreationcontractparent',
                                style:'margin-top: 3px;',
                                id:'columncreationcontractparentid',
                                checked:true
                            })]
                        }]
                    },
                    {
                        layout : 'column',
                        border : false,
                        hideLabel:true,
                        hidden:false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.7"),
                                name:'columncreationproduct',
                                style:'margin-top: 3px;',
                                id:'columncreationproductid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationproductparent',
                                style:'margin-top: 3px;',
                                id:'columncreationproductparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
//                            hidden:!isCustomField,
                            //                                hideLabel:!isCustomField,
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.19"),
                                name:'AccountStatement',
                                style:'margin-top: 3px;',
                                id:'AccountStatementid'
                            }),new Wtf.form.Hidden({
                                name:'AccountStatementParent',
                                style:'margin-top: 3px;',
                                id:'AccountStatementParentId',
                                checked:true
                            })]
                        }]
                    },
                    {
                        layout: 'column',
                        border: false,
                        hideLabel: true,
                        hidden: false,
                        items: [{
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.54"),
                                name: 'columncreationserial',
                                style: 'margin-top: 3px;',
                                id: 'columncreationserialid',
                                disabled:true                // Keep Serial Window disabled initially (i.e for global level fields.)
                            })]
                                                }, {
                                                columnWidth: '.45',
                                                        layout: 'form',
                                                        border: false,
                                                        items: [this.vendorjobworkorder = new Wtf.form.Checkbox({
                                                        fieldLabel: WtfGlobal.getLocaleText("acc.jobWorkOrder.vendorjobworkorder"),
                                                                name: 'columncreationvendorjobworkorder',
                                                                style: 'margin-top: 3px;',
                                                                id: 'columncreationvendorjobworkorderid'
                                                        }), new Wtf.form.Hidden({
                                                        name: 'columncreationvendorjobworkorderparent',
                                                                style: 'margin-top: 3px;',
                                                                id: 'columncreationvendorjobworkorderparentid',
                                                                checked: true
                                                        })]
                                                }
//                        ,{
//                            columnWidth: '.45',
//                            layout: 'form',
//                            border: false,
//                            editable:false,
//                            items: [new Wtf.form.Checkbox({
//                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.55"),     // Inventory Window
//                                name: 'columncreationinventory',
//                                style: 'margin-top: 3px;',
//                                id: 'columncreationinventoryid'
//                            })]
//                        }
//                        ,{
//                            columnWidth: '.45',
//                            layout: 'form',
//                            border: false,
//                            editable:false,
//                            items: [new Wtf.form.Checkbox({
//                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.56"),     // Inventory Window
//                                name: 'columnCreationLeaseInvoice',
//                                style: 'margin-top: 3px;',
//                                id: 'columnCreationLeaseInvoiceId'
//                            })]
//                        }

                        ]
                    },{
                        layout: 'column',
                        border: false,
                        hideLabel: true,
                        hidden: false,
                        items: [{
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [new Wtf.form.Checkbox({
                            fieldLabel: WtfGlobal.getLocaleText("acc.securitygate.title"),
                                    name: 'columncreationsecgateentry',
                                    style: 'margin-top: 3px;',
                                    id: 'columncreationsecgateentryid',
                                    disabled: !Wtf.account.companyAccountPref.securityGateEntryFlag
                                    //checked: true               
                                    }), new Wtf.form.Hidden({
                                    name: 'columncreationsecgateentryparent',
                                    style: 'margin-top: 3px;',
                                    id: 'columncreationsecgateentryparentid',
                                    checked: true
                            })]
                          },{
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [new Wtf.form.Checkbox({
                                    fieldLabel: WtfGlobal.getLocaleText("acc.multientitydimension.title"),
                                    name: 'columncreationmultientitydimension',
                                    style: 'margin-top: 3px;',
                                    id: 'columncreationmultientitydimensionid',
                                    disabled: !Wtf.account.companyAccountPref.isMultiEntity
                                   // checked: Wtf.getCmp(id+'gstitem').getValue();               
                                    }), new Wtf.form.Hidden({
                                    name: 'columncreationmultientitydimensionparent',
                                    style: 'margin-top: 3px;',
                                    id: 'columncreationmultientitydimensionparentid',
                                    checked: true
                            })]
                          }
                        ]
                    },{
                        layout: 'column',
                        border: false,
                        hideLabel: true,
                        hidden: false,
                        items: [{
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [new Wtf.form.Checkbox({
                            fieldLabel: WtfGlobal.getLocaleText("acc.jobworkout.title"),
                                    name: 'jobworkoutorder',
                                    style: 'margin-top: 3px;',
                                    id: 'jobworkoutorderid'                                    
                                    //checked: true               
                                    }), new Wtf.form.Hidden({
                                    name: 'jobworkoutorderparent',
                                    style: 'margin-top: 3px;',
                                    id: 'jobworkoutorderparentid',
                                    checked: true
                            })]
                          }
                        ]
                    }
                        ]
                },{
                    xtype:'fieldset',
                    width:(Wtf.isIE)?'91%':'85%',//[IE8]: 'Add Custom Column' option is not working/ nothing happens when user clicks on the option
                    height:'75%',
                    id:'createformid',
                    hidden:true,
                    title:this.isDeactivate?WtfGlobal.getLocaleText("acc.field.activeinforms"):WtfGlobal.getLocaleText("acc.field.CreateinFormss"),//WtfGlobal.getLocaleText("crm.fieldsetTitle"),//'Create in other modules also',
                    border : false,
                    labelWidth:150,
                    items: [{
                            columnWidth: '.90',             //ERM-177 / ERP-34804
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                    fieldLabel:"<span wtf:qtip=\"" + WtfGlobal.getLocaleText("acc.dimension.module.100tooltip") + "\">" + WtfGlobal.getLocaleText("acc.dimension.module.100") + "</span>",
                                    name:'relatedModuleIsAllowEdit',
                                    style:'margin-top: 3px;margin-right: 6px;',
                                    id:'relatedModuleIsAllowEditid',
                                    checked: (this.isDeactivate) ? false : true
                            })]
                        },{
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.1"),
                                name:'columncreationinvoiceform',
                                style:'margin-top: 3px;margin-right: 6px;',
                                id:'columncreationinvoiceformid',
                                checked: (isEdit || this.isDeactivate) ? false : true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.2"),
                                name:'columncreationveninvoiceform',
                                style:'margin-top: 3px;',
                                id:'columncreationveninvoiceformid'
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.9"),
                                name:'columncreationsalesorderform',
                                style:'margin-top: 3px;margin-right: 6px;',//margin-right for ERP2438 -space in check box and custome field text
                                id:'columncreationsalesorderformid'
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.10"),
                                name:'columncreationpurchaseorderform',
                                style:'margin-top: 3px;margin-right: 6px;',
                                id:'columncreationpurchaseorderformid'
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.13"),
                                name:'columncreationdeliveryorderform',
                                style:'margin-top: 3px;margin-right: 6px;',
                                id:'columncreationdeliveryorderformid'
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.12"),
                                name:'columncreationcustomerquotationform',
                                style:'margin-top: 3px;margin-right: 6px;',
                                id:'columncreationcustomerquotationformid'
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.11"),
                                name:'columncreationvendorquotationform',
                                style:'margin-top: 3px;margin-right: 6px;',
                                id:'columncreationvendorquotationformid'
                            })]
                       },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.18"),
                                name:'columncreationpurchasereturnform',
                                style:'margin-top: 3px;margin-right: 6px;',
                                id:'columncreationpurchasereturnformid'
                            })]
                       },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.check3=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.17"),
                                name:'columncreationsalesreturnform',
                                style:'margin-top: 3px;margin-right: 6px;',
                                id:'columncreationsalesreturnformid'
                            })]
                       }
                        /*,{
                                columnWidth: '.45',
                                layout : 'form',
                                border : false,
                                items : [this.check3=new Wtf.form.Checkbox({
                                    fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.16"),
                                    name:'columncreationgrorderform',
                       } */
                        ,{
                                columnWidth: '.45',
                                layout : 'form',
                                border : false,
                                items : [this.check3=new Wtf.form.Checkbox({
                                    fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.16"),
                                    name:'columncreationgrorderform',
                                    style:'margin-top: 3px;',
                                    id:'columncreationgrorderformid'
                                })]
                            }
                            /*,{
                                columnWidth: '.45',
                                layout : 'form',
                                border : false,
                                items : [this.check3=new Wtf.form.Checkbox({
                                    fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.12"),
                                    name:'columncreationcustomerquotationform',
                                    style:'margin-top: 3px;',
                                    id:'columncreationcustomerquotationformid'
                                })]
                            },{
                                columnWidth: '.45',
                                layout : 'form',
                                border : false,
                                items : [this.check3=new Wtf.form.Checkbox({
                                    fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.11"),
                                    name:'columncreationvendorquotationform',
                                    style:'margin-top: 3px;',
                                    id:'columncreationvendorquotationformid'
                                })
                            ]
                            } */
                        ]
                    }
                    //                        ,{
                    //                            layout : 'column',
                    //                            border : false,
                    //                            items: [{
                    //                                columnWidth: '.45',
                    //                                layout : 'form',
                    //                                border : false,
                    //                                items : [new Wtf.form.Checkbox({
                    //                                    fieldLabel:'Purchase Order',
                    //                                    name:'columncreationpoform',
                    //                                    style:'margin-top: 3px;',
                    //                                    id:'columncreationpoformid',
                    //                                    checked:false
                    //                                })]
                    //                            }]
                    //                        }
                    ]
                },{
                    xtype:'fieldset',
                    width:(Wtf.isIE)?'91%':'85%',//[IE8]: 'Add Custom Column' option is not working/ nothing happens when user clicks on the option
                    height:'75%',
                    id:'fixedassetsid',
                    hidden:!Wtf.account.companyAccountPref.assetManagementFlag,
                    title:this.isDeactivate?WtfGlobal.getLocaleText("acc.field.activeinfixedassetmodule"):WtfGlobal.getLocaleText("acc.field.FixedAssetsCreateinmodules"),
                    border : false,
                    labelWidth:150,
                    items: [{
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FADisposalInvoiceCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.24"),
                                name:'columncreationfixedassetsdisposalinvoice',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsdisposalinvoiceid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetsdisposalinvoiceparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsdisposalinvoiceparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FAPurchaseInvoiceCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.25"),
                                name:'columncreationfixedassetspurchaseinvoice',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetspurchaseinvoiceid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetspurchaseinvoiceparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetspurchaseinvoiceparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FAGoodsReceiptCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.26"),
                                name:'columncreationfixedassetsgoodsreceipt',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsgoodsreceiptid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetsgoodsreceiptparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsgoodsreceiptparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FADeliveryOrderCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.27"),      // Delivery Order
                                name:'columncreationfixedassetsdeliveryorder',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsdeliveryorderid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetsdeliveryorderparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsdeliveryorderparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FAAssetsGroupsCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.288"),      // Assets Group
                                name:'columncreationfixedassetsgroups',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsgroupsid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetsgroupsparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsgroupsparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FAAssetsPurchaseRequisitionCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.29"),      // Assets Purchase Requisition
                                name:'columncreationfixedassetspurchaserequisition',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetspurchaserequisitionid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetspurchaserequisitionparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetspurchaserequisitionparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FAAssetsRFQCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.39"),      // Assets FRQ
                                name:'columncreationfixedassetsrfq',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsrfqid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetsrfqparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsrfqparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FAAssetsVendorQuotationCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.30"),      // Assets Vendor Quotation
                                name:'columncreationfixedassetsvendorquotation',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsvendorquotationid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetsvendorquotationparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetsvendorquotationparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FAAssetsPurchaseOrderCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.31"),      // Assets Purchase Order
                                name:'columncreationfixedassetspurchaseorder',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetspurchaseorderid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetspurchaseorderparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetspurchaseorderparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FAAssetsPurchaseReturnCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.96"),      // Assets Purchase Return
                                name:'columncreationfixedassetspurchasereturn',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetspurchasereturnid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetspurchasereturnparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetspurchasereturnparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FAAssetsSalesReturnCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.98"),      // Assets Sales Return
                                name:'columncreationfixedassetssalesreturn',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetssalesreturnid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetssalesreturnparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetssalesreturnparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            items : [this.FAAssetsSalesReturnCheck=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.99"),      // Assets Details
                                name:'columncreationfixedassetdetails',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetdetailsid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationfixedassetdetailsparent',
                                style:'margin-top: 3px;',
                                id:'columncreationfixedassetdetailsparentid',
                                checked:true
                            })]
                        }]
                        }
                    ]
                },
                {
                    xtype:'fieldset',
                    width:(Wtf.isIE)?'91%':'85%',//[IE8]: 'Add Custom Column' option is not working/ nothing happens when user clicks on the option
                    height:'75%',
                    id:'consignmentid',
                    hidden:!Wtf.account.companyAccountPref.consignmentPurchaseManagementFlag && !Wtf.account.companyAccountPref.consignmentSalesManagementFlag,
                    title:this.isDeactivate?WtfGlobal.getLocaleText("acc.field.activeinconsignmentmodule"):WtfGlobal.getLocaleText("acc.field.ConsignmentCreateinmodules"),
                    border : false,
                    labelWidth:150,
                    items: [{
                        layout : 'column',
                        border : false,
                        items: [{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            hidden: !Wtf.account.companyAccountPref.consignmentSalesManagementFlag,
                            items : [this.ConsignmentRequest=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.50"),
                                name:'columncreationconsignmentrequest',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentrequestid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationconsignmentrequestparent',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentrequestparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            hidden: !Wtf.account.companyAccountPref.consignmentSalesManagementFlag,
                            items : [this.Consignmentinvoice=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.52"),
                                name:'columncreationconsignmentinvoice',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentinvoiceid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationconsignmentinvoiceparent',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentinvoiceparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            hidden: !Wtf.account.companyAccountPref.consignmentSalesManagementFlag,
                            items : [this.ConsignmentDO=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.51"),
                                name:'columncreationconsignmentdo',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentdoid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationconsignmentdoparent',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentdoparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            hidden: !Wtf.account.companyAccountPref.consignmentSalesManagementFlag,
                            items : [this.ConsignmentSalesReturn=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.53"),
                                name:'columncreationconsignmentsalesreturn',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentsalesreturnid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationconsignmentsalesreturnparent',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentsalesreturnparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            hidden:!Wtf.account.companyAccountPref.consignmentPurchaseManagementFlag,
                            items : [this.ConsignmentVendorRequest=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.63"),
                                name:'columncreationconsignmentvendorrequest',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentrequestvendorid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationconsignmentvendorrequestparent',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentvendorrequestparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            hidden:!Wtf.account.companyAccountPref.consignmentPurchaseManagementFlag,
                            items : [this.Consignmentpurchaseinvoice=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.58"),
                                name:'columncreationconsignmentpurchaseinvoice',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentpurchaseinvoiceid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationconsignmentpurchaseinvoiceparent',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentpurchaseinvoiceparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            hidden:!Wtf.account.companyAccountPref.consignmentPurchaseManagementFlag,
                            items : [this.ConsignmentGR=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.57"),
                                name:'columncreationconsignmentgr',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentgrid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationconsignmentgrparent',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentgrparentid',
                                checked:true
                            })]
                        },{
                            columnWidth: '.45',
                            layout : 'form',
                            border : false,
                            hidden:!Wtf.account.companyAccountPref.consignmentPurchaseManagementFlag,
                            items : [this.ConsignmentPurchaseReturn=new Wtf.form.Checkbox({
                                fieldLabel:WtfGlobal.getLocaleText("acc.dimension.module.59"),
                                name:'columncreationconsignmentpurchasereturn',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentpurchasereturnid'
                            }),new Wtf.form.Hidden({
                                name:'columncreationconsignmentpurchasereturnparent',
                                style:'margin-top: 3px;',
                                id:'columncreationconsignmentpurchasereturnparentid',
                                checked:true
                            })]
                        }
                        ]
                        }
                    ]
                            },
                            {
                    xtype: 'fieldset',
                    width: (Wtf.isIE) ? '91%' : '85%', //[IE8]: 'Add Custom Column' option is not working/ nothing happens when user clicks on the option
                    height: '75%',
                    id: 'leaseid',
                    hidden:!Wtf.account.companyAccountPref.leaseManagementFlag,
                    title: this.isDeactivate ? WtfGlobal.getLocaleText("acc.field.activeinleasemodule") : WtfGlobal.getLocaleText("acc.field.leaseCreateinmodules"),
                    border: false,
                    labelWidth: 150,
                    items: [{
                        layout: 'column',
                        border: false,
                        items: [{
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [this.leaseOrder = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.21"),
                                name: 'columncreationleaseorder',
                                style: 'margin-top: 3px;',
                                id: 'columncreationleaseorderid'
                            }), new Wtf.form.Hidden({
                                name: 'columncreationleaseorderparent',
                                style: 'margin-top: 3px;',
                                id: 'columncreationleaseorderparentid',
                                checked: true
                            })]
                        },{
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [this.leaseContract = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.64"),
                                name: 'columncreationleasecontract',
                                style: 'margin-top: 3px;',
                                id: 'columncreationleasecontractid'
                            }), new Wtf.form.Hidden({
                                name: 'columncreationleasecontractparent',
                                style: 'margin-top: 3px;',
                                id: 'columncreationleasecontractparentid',
                                checked: true
                            })]
                        }, {
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [this.leaseQuotation = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.65"),
                                name: 'columncreationleasequotation',
                                style: 'margin-top: 3px;',
                                id: 'columncreationleasequotationid'
                            }), new Wtf.form.Hidden({
                                name: 'columncreationleasequotationparent',
                                style: 'margin-top: 3px;',
                                id: 'columncreationleasequotationparentid',
                                checked: true
                            })]
                        },
                        {
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [this.leaseinvoice = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.66"),
                                name: 'columnCreationLeaseInvoice',
                                style: 'margin-top: 3px;',
                                id: 'columnCreationLeaseInvoiceid'
                            }), new Wtf.form.Hidden({
                                name: 'columnCreationLeaseInvoiceparent',
                                style: 'margin-top: 3px;',
                                id: 'columnCreationLeaseInvoiceparentid',
                                checked: true
                            })]
                        }, {
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [this.leasedo = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.67"),
                                name: 'columncreationleasedo',
                                style: 'margin-top: 3px;',
                                id: 'columncreationleasedoid'
                            }), new Wtf.form.Hidden({
                                name: 'columncreationleasedoparent',
                                style: 'margin-top: 3px;',
                                id: 'columncreationleasedoparentid',
                                checked: true
                            })]
                        }, {
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [this.leaseReturn = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.68"),
                                name: 'columncreationleasereturn',
                                style: 'margin-top: 3px;',
                                id: 'columncreationleasereturnid'
                            }), new Wtf.form.Hidden({
                                name: 'columncreationleasereturnparent',
                                style: 'margin-top: 3px;',
                                id: 'columncreationleasereturnparentid',
                                checked: true
                            })]
                        }
                        ]
                    }
                    ]
                },
                {
                    xtype: 'fieldset',
                    width: (Wtf.isIE) ? '91%' : '85%', //[IE8]: 'Add Custom Column' option is not working/ nothing happens when user clicks on the option
                    height: '75%',
                    id: id+'invccid',
                    hidden:!(Wtf.account.companyAccountPref.activateInventoryTab),
                    title: this.isDeactivate ? WtfGlobal.getLocaleText("acc.field.activeininventorymodule") : WtfGlobal.getLocaleText("acc.field.activeininventorymodule"),
                    border: false,
                    labelWidth: 150,
                    items: [{
                        layout: 'column',
                        border: false,
                        items: [{
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [ this.stockIssue = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.invmodule.1"),    
                                name: 'columncreationinventory',
                                style: 'margin-top: 3px;',
                                id: 'columncreationinventoryid'
                            }), new Wtf.form.Hidden({
                                name: 'columncreationstockissueparent',
                                style: 'margin-top: 3px;',
                                id: 'columncreationstockissueparentid',
                                checked: true
                            })]
                        },{
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [this.stockRequest = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.invmodule.2"),
                                name: 'columncreationstockrequest',
                                style: 'margin-top: 3px;',
                                id: 'columncreationstockrequestid'
                            }), new Wtf.form.Hidden({
                                name: 'columncreationstockrequestparent',
                                style: 'margin-top: 3px;',
                                id: 'columncreationstockrequestparentid',
                                checked: true
                            })]
                        }, {
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [this.stockAdjustment = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.invmodule.3"),
                                name: 'columncreationstockadjustment',
                                style: 'margin-top: 3px;',
                                id: 'columncreationstockadjustmentid'
                            }), new Wtf.form.Hidden({
                                name: 'columncreationstockadjustmentparent',
                                style: 'margin-top: 3px;',
                                id: 'columncreationstockadjustmentparentid',
                                checked: true
                            })]
                        },
                        {
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [this.interStoreTransfer = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.invmodule.4"),
                                name: 'columnCreationIST',
                                style: 'margin-top: 3px;',
                                id: 'columnCreationISTid'
                            }), new Wtf.form.Hidden({
                                name: 'columnCreationISTparent',
                                style: 'margin-top: 3px;',
                                id: 'columnCreationISTparentid',
                                checked: true
                            })]
                        }, {
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [this.inteLocationTransfer = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.dimension.invmodule.5"),
                                name: 'columncreationILT',
                                style: 'margin-top: 3px;',
                                id: 'columncreationILTid'
                            }), new Wtf.form.Hidden({
                                name: 'columncreationILTparent',
                                style: 'margin-top: 3px;',
                                id: 'columncreationILTparentid',
                                checked: true
                            })]
                        },
                        {
                            columnWidth: '.45',
                            layout: 'form',
                            border: false,
                            items: [this.cycleCount = new Wtf.form.Checkbox({
                                fieldLabel: WtfGlobal.getLocaleText("acc.accPref.autoCycleCount"),
                                name: 'columncreationcyclec',
                                style: 'margin-top: 3px;',
                                id: 'columncreationcyclecid',
                                disabled:true
                            }), new Wtf.form.Hidden({
                                name: 'columncreationcyclecparent',
                                style: 'margin-top: 3px;',
                                id: 'columncreationcyclecparentid',
                                checked: true
                            })]
                        }
                        ]
                    }
                    ]
                            }, {
                                xtype: 'fieldset',
                                width: (Wtf.isIE) ? '91%' : '85%', //[IE8]: 'Add Custom Column' option is not working/ nothing happens when user clicks on the option
                                height: '75%',
                                id: 'mrpid',
                                hidden: !Wtf.account.companyAccountPref.activateMRPManagementFlag,
                                title: this.isDeactivate ? WtfGlobal.getLocaleText("acc.field.activeinmrpmodule") : WtfGlobal.getLocaleText("acc.field.mrpCreateinmodules"),
                                border: false,
                                labelWidth: 150,
                                items: [{
                                        layout: 'column',
                                        border: false,
                                        items: [{
                                                columnWidth: '.45',
                                                layout: 'form',
                                                border: false,
                                                items: [this.labour = new Wtf.form.Checkbox({
                                                        fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.1101"),
                                                        name: 'columncreationlabour',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationlabourid'
                                                    }), new Wtf.form.Hidden({
                                                        name: 'columncreationlabourparent',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationlabourparentid',
                                                        checked: true
                                                    })]
                                            },{
                                                columnWidth: '.45',
                                                layout: 'form',
                                                border: false,
                                                items: [this.workcenter = new Wtf.form.Checkbox({
                                                        fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.1102"),
                                                        name: 'columncreationWorkCenter',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationWorkCenterMasterid'
                                                    }), new Wtf.form.Hidden({
                                                        name: 'columncreationWorkCenterparent',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationWorkCenterparentid',
                                                        checked: true
                                                    })]
                                            },{
                                                columnWidth: '.45',
                                                layout: 'form',
                                                border: false,
                                                items: [this.machinemaster = new Wtf.form.Checkbox({
                                                        fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.1103"),
                                                        name: 'columncreationMachineMaster',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationMachineMasterid'
                                                    }), new Wtf.form.Hidden({
                                                        name: 'columncreationMachineMasterparent',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationMachineMasterparentid',
                                                        checked: true
                                                    })]
                                            },{
                                                columnWidth: '.45',
                                                layout: 'form',
                                                border: false,
                                                items: [this.workorder = new Wtf.form.Checkbox({
                                                        fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.1105"),
                                                        name: 'columncreationWorkOrder',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationWorkOrderid'
                                                    }), new Wtf.form.Hidden({
                                                        name: 'columncreationWorkOrderparent',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationWorkOrderparentid',
                                                        checked: true
                                                    })]
                                            },{
                                                columnWidth: '.45',
                                                layout: 'form',
                                                border: false,
                                                items: [this.mastercontract = new Wtf.form.Checkbox({
                                                        fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.1106"),
                                                        name: 'columncreationMasterContract',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationMasterContractid'
                                                    }), new Wtf.form.Hidden({
                                                        name: 'columncreationMasterContractparent',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationMasterContractparentid',
                                                        checked: true
                                                    })]
                                            },{
                                                columnWidth: '.45',
                                                layout: 'form',
                                                border: false,
                                                items: [this.routingtemplate = new Wtf.form.Checkbox({
                                                        fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.1107"),
                                                        name: 'columncreationRoutingTemplate',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationRoutingTemplateid'
                                                    }), new Wtf.form.Hidden({
                                                        name: 'columncreationRoutingTemplateparent',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationRoutingTemplateparentid',
                                                        checked: true
                                                    })]
                                            },{
                                                columnWidth: '.45',
                                                layout: 'form',
                                                border: false,
                                                items: [this.jobwork = new Wtf.form.Checkbox({
                                                        fieldLabel: WtfGlobal.getLocaleText("acc.dimension.module.1104"),
                                                        name: 'columncreationjobwork',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationjobworkid'
                                                    }), new Wtf.form.Hidden({
                                                        name: 'columncreationjobworkparent',
                                                        style: 'margin-top: 3px;',
                                                        id: 'columncreationjobworkparentid',
                                                        checked: true
                                                    })]
                                            }]
                                    }
                                ]
                },
                {
                    xtype:"textfield",
                    id:id+"customregx",
                    fieldLabel:WtfGlobal.getLocaleText("acc.editor.managecols.addcustomcolwin.customregexp"),//"Custom Regular Expression",
                    name:"customregex",
                    maxLength:100,
                    hideLabel:true,
                    hidden:true,
                    width:185
                },{
                    xtype:'hidden',
                    name:'moduleid'
                //                    value:moduleid
                },{
                    xtype:'hidden',
                    id:id+"iseditablecolumn",
                    name:'iseditable',
                    value:true
               },{
                    xtype:'hidden',
                    name:'createFieldFlag',
                    value:true
                },{
                    xtype:'hidden',
                    name:'iscustomfield',
                    value:isCustomField
                },{
                    xtype:'hidden',
                    id:id+'defaultvalue',
                    name:'defaultvalue'
                },{
                    xtype:'hidden',
                    id:'notificationDays',
                    name:'notificationDays'
                }]
            }]
        }]
    })
    Wtf.getCmp('column_header_field').on('change',function(){
        this.formPanel=Wtf.getCmp(id+"cstfrm").form;
    //        if(this.formPanel.isValid())
    //            Wtf.getCmp(id+"addFormulae").enable();
    //        else
    //            Wtf.getCmp(id+"addFormulae").disable();
    },this);

    Wtf.getCmp('max_length').on('change',function(){
        this.formPanel=Wtf.getCmp(id+"cstfrm").form;
    //        if(this.formPanel.isValid())
    //            Wtf.getCmp(id+"addFormulae").enable();
    //        else
    //            Wtf.getCmp(id+"addFormulae").disable();
    },this);
    if(Wtf.getCmp(id+"mapWithFieldType") != undefined){
        Wtf.getCmp(id+"mapWithFieldType").setValue(1);
    }
    this.defaultwindow = function(c,checked,config){

        this.defaultForm = new Wtf.form.FormPanel({
            waitMsgTarget: true,
            labelWidth:110,
            border : false,
            bodyStyle : 'font-size:10px;padding:10px 20px;margin-top:3%',
            autoScroll:false,
            autoHeight:true,
            defaultType:'textfield',
            layoutConfig: {
                deferredRender: false
            },
            items:[config]
        });
        var assmngrbtn = [];
        assmngrbtn.push({
        text:WtfGlobal.getLocaleText("acc.OK"), //'Ok',
                handler:function(){
                var configobjval;
               if (this.defaultForm.getForm().isValid()){
                var cmpObj = Wtf.getCmp(config.id);
                var cmpObj = Wtf.getCmp(config.id);
               if (cmpObj != undefined && cmpObj.getValue() == ""){
                Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.defaultValue"));
                        return;
                };
                        if (cmpObj.xtype == "datefield") {
                configobjval = cmpObj.getValue().getTime();
                } else {
                configobjval = cmpObj.getValue();
                }
                var mxVal = Wtf.getCmp("max_length").getValue();
                        if (Wtf.getCmp(id + "fieldtype_combo").getValue() == "1" && configobjval.length > mxVal && config.hiddenName != 'refdefaultvalue' && config.hiddenName != 'timedefaultvalue' && config.hiddenName != 'multidefaultvalue'){
                WtfComMsgBox([WtfGlobal.getLocaleText("acc.msg.ALERTTITLE"), WtfGlobal.getLocaleText({
                key:"acc.addcustomcolwin.maxlenchk",
                        params:[Wtf.getCmp('column_header_field').getValue(), mxVal]
                })]); //"Data field length exceed maximum length for field '<b> "+value+" </b>'. <br/>Max Length value cannot be less than ' <b>"+maxLengthCheck+" </b>'."]);
                        return;
                }
                if (configobjval != undefined && (configobjval != "" || configobjval == 0)){
                Wtf.getCmp(id + 'defaultvalue').setValue(configobjval);
                }
                this.default_window.close();
                }
                },
                scope:this
        });

        assmngrbtn.push({
            text: WtfGlobal.getLocaleText("acc.CANCELBUTTON"),//'Cancel',
            scope:this,
            handler: function(){
                this.default_window.close();
            }
        });
        this.default_window =new Wtf.Window({
            title:WtfGlobal.getLocaleText("acc.template.defaultvalue"),//WtfGlobal.getLocaleText("crm.defaultwindow"),//"Default Window",
            autoHeight:true,
            width:400,
            modal:true,
            items:[{
                border:false,
                cls : 'panelstyleClass2',
                items:[this.defaultForm]
            }],
            buttonAlign :'right',
            buttons: assmngrbtn
        });
        if(!isEdit && !this.isDeactivate){
            this.default_window.show();
        }
    }



    this.getfieldconfig = function(){
        this.fieldtype_combo = Wtf.getCmp(id+"fieldtype_combo");

        this.getdropdowndata = function(){
            var value = Wtf.getCmp(id+"dropdowndata").getValue();
            if(value!=undefined && value.length>0){
                this.defaultdata = new Array();
                var valuearray = Wtf.getCmp(id+"dropdowndata").getValue().split(";");
                this.defaultarray = ["None","None"];    // SDP-5276 - Allow default values to be "None"
                this.defaultdata.push(this.defaultarray);
                for(var i=0;i<valuearray.length;i++){
                    if(valuearray[i]!=undefined && valuearray[i].length >0){
                        this.defaultarray = [valuearray[i],valuearray[i]];
                        this.defaultdata.push(this.defaultarray);
                    }
                }
            }
            return this.defaultdata;
        }

        switch(parseInt(this.fieldtype_combo.getValue())){
            case 1:
                this.config = new Wtf.form.ExtendedTextField({
                    id:id+"textfielddefault",
                    fieldLabel:WtfGlobal.getLocaleText("acc.template.defaultvalue"),//WtfGlobal.getLocaleText("crm.defaultvalue"),//"Default value",
                    name:"tdefaultvalue",
                    width:185,
                    allowBlank:false
                });
                break;
            case 2:
                this.config =new Wtf.form.NumberField({
                    xtype:"numberfield",
                    id:id+"numberfielddefault",
                    fieldLabel:WtfGlobal.getLocaleText("acc.template.defaultvalue"),//WtfGlobal.getLocaleText("crm.defaultvalue"),//"Default value",
                    name:"ndefaultvalue",
                    maxLength : 15,
                    width:185,
                    allowBlank:false
                });
                break;
            case 3:
                this.config = new Wtf.form.DateField({
                    xtype:"datefield",
                    id:id+"datefielddefault",
                    fieldLabel:WtfGlobal.getLocaleText("acc.template.defaultvalue"),//WtfGlobal.getLocaleText("crm.defaultvalue"),//"Default value",
                    name:"ndefaultvalue",
                    format:WtfGlobal.getOnlyDateFormat(),
                    width:185
                });
                break;
            case 4:
                this.defaultdata = this.getdropdowndata();

                if(this.defaultdata!=undefined){

                    this.default_type_store = new Wtf.data.SimpleStore({
                        fields:['id','name'],
                        data: this.defaultdata,
                        autoLoad: true
                    });

                    this.config=new  Wtf.form.ComboBox({
                        xtype:"combo",
                        fieldLabel:WtfGlobal.getLocaleText("acc.template.defaultvalue")+"*",//WtfGlobal.getLocaleText("crm.defaultvalue"),//"Default value",
                        name:"ddefaultvalue",
                        id:id+"dropdowndefault",
                        allowBlank : false,
                        store:this.default_type_store,
                        displayField:"name",
                        valueField:'id',
                        mode:'local',
                        typeAhead:true,
                        triggerAction:'all',
                        hiddenName:"ddefaultvalue",
                        editable:false,
                        width:185
                    });
                }
                break;
            case 5:
                this.config = new Wtf.form.TimeField({
                    xtype:"timefield",
                    id:id+"timefielddefault",
                    fieldLabel:WtfGlobal.getLocaleText("acc.template.defaultvalue"),//WtfGlobal.getLocaleText("crm.defaultvalue"),//"Default value",
                    hiddenName:"timedefaultvalue",
                    width:185
                });
                break;
            case 7:
                this.defaultdata = this.getdropdowndata();

                if(this.defaultdata!=undefined){

                    this.multidefault_type_store = new Wtf.data.SimpleStore({
                        fields:['id','name'],
                        data: this.defaultdata,
                        autoLoad: true
                    });

                    this.config = new Wtf.common.Select(Wtf.applyIf({
                        multiSelect:true,
                        forceSelection:true
                    },{
                        fieldLabel:WtfGlobal.getLocaleText("acc.template.defaultvalue"),//WtfGlobal.getLocaleText("crm.defaultvalue"),//"Default value",
                        name:"multidefaultvalue",
                        id:id+"multidropdowndefault",
                        allowBlank : false,
                        store:this.multidefault_type_store,
                        displayField:"name",
                        valueField:'id',
                        mode:'local',
                        typeAhead:true,
                        triggerAction:'all',
                        hiddenName:"multidefaultvalue",
                        width:185
                    }));
                }
                break;
            case 8:
                var Refcombo = Wtf.getCmp(id+"ref_module");
                var defaultref = Refcombo.getRawValue();
                if(defaultref!=undefined && defaultref!=""){
                    var baseParam = {};
                    var url = "Common/CRMManager/getComboData.do";
                    if(Refcombo.getValue() == Wtf.userModuleId) {
                        url = "Common/User/getOwner.do";
                        baseParam.common = '1';
                        baseParam.allUsers = true;
                    } else {
                        baseParam.common = '1';
                        baseParam.comboname = defaultref;
                    }
                    Wtf.DefaultRefStore = new Wtf.data.Store({
                        url: url,
                        baseParams:baseParam,
                        reader: new Wtf.data.KwlJsonReader({
                            root:'data'
                        }, Wtf.ComboReader),
                        autoLoad:true
                    });
                    this.config = new  Wtf.form.ComboBox({
                        xtype:"combo",
                        fieldLabel:WtfGlobal.getLocaleText("acc.template.defaultvalue"),//WtfGlobal.getLocaleText("crm.defaultvalue"),//"Default value",
                        name:"refdefaultvalue",
                        id:id+"refdropdowndefault",
                        allowBlank : false,
                        store:Wtf.DefaultRefStore,
                        displayField:"name",
                        valueField:'id',
                        mode:'local',
                        typeAhead:true,
                        triggerAction:'all',
                        hiddenName:"refdefaultvalue",
                        width:185
                    });
                }
                break;
            case 13:
                this.config =new Wtf.form.TextArea({
                    xtype:"textarea",
                    id:id+"textareafielddefault",
                    fieldLabel:WtfGlobal.getLocaleText("acc.template.defaultvalue"),//WtfGlobal.getLocaleText("crm.defaultvalue"),//"Default value",
                    name:"textareadefaultvalue",
                    width:185
                });
                break;
            default:
                this.config = new Wtf.form.ExtendedTextField({
                    id:id+"textfielddefault",
                    fieldLabel:WtfGlobal.getLocaleText("acc.template.defaultvalue"),//WtfGlobal.getLocaleText("crm.defaultvalue"),//"Default value",
                    name:"tdefaultvalue",
                    width:185,
                    allowBlank:false
                });
        }
        return this.config;
    }

    Wtf.getCmp("columncreationproductid").on('check', function(c, checked) {
        if(this.isDeactivate){
            Wtf.getCmp("createformid").setVisible(false);
        } else {
            Wtf.getCmp("createformid").setVisible(checked);
        }
    }, this);

    Wtf.getCmp(id+'isfortask').on('check', function(c, checked) {
        if(!isEdit){
            if(checked){
                Wtf.getCmp(id+'isforproject').reset();
                Wtf.getCmp(id+'isforproject').setDisabled(true);
            }else{
                Wtf.getCmp(id+'isforproject').setDisabled(false);
            }
        }
    }, this);

    Wtf.getCmp(id+'isforproject').on('check', function(c, checked) {
        if(!isEdit){
            if(checked){
                Wtf.getCmp(id+'isfortask').reset();
                Wtf.getCmp(id+'isfortask').setDisabled(true);
            }else{
                Wtf.getCmp(id+'isfortask').setDisabled(false);
            }
        }
    }, this);
    
    Wtf.getCmp(id+'isusedforknockoffdocuments').on('check',function(c,checked){
        if(checked) {
            Wtf.getCmp(id+"lineitem").container.parent().dom.style.display="none";
            if(!isEdit && !this.isDeactivate){
                /*
                 * If "isusedforknockoffdocuments" is checked 
                 * then set value true for SI,PI,MP,RP,DN,CN,JE
                 */
                Wtf.getCmp("columncreationmakepaymentid").setValue(true);
                Wtf.getCmp("columncreationreceivepaymentid").setValue(true);
                Wtf.getCmp("columncreationinvoiceid").setValue(true);
                Wtf.getCmp("columncreationveninvoiceid").setValue(true);
                Wtf.getCmp("columncreationcreditnoteid").setValue(true);
                Wtf.getCmp("columncreationdebitnoteid").setValue(true);
                Wtf.getCmp("columncreationgeneraletryid").setValue(true);
            }
        }else{
            Wtf.getCmp(id+"lineitem").container.parent().dom.style.display="block";
            if(!isEdit && !this.isDeactivate){
                Wtf.getCmp("columncreationmakepaymentid").reset();
                Wtf.getCmp("columncreationreceivepaymentid").reset();
                Wtf.getCmp("columncreationinvoiceid").reset();
                Wtf.getCmp("columncreationveninvoiceid").reset();
                Wtf.getCmp("columncreationcreditnoteid").reset();
                Wtf.getCmp("columncreationdebitnoteid").reset();
                if (!Wtf.getCmp(id + 'isforeclaim').getValue()){
                Wtf.getCmp("columncreationgeneraletryid").reset();
            }
        }
        }
    }, this);

    Wtf.getCmp(id+"lineitem").on('check',function(c,checked){
        if(checked) {
//            Wtf.getCmp(id+"isessential").reset();
            //            Wtf.getCmp("columncreationmakepaymentid").reset();
            //            Wtf.getCmp("columncreationcreditnoteid").reset();
            //            Wtf.getCmp("columncreationdebitnoteid").reset();
            //            Wtf.getCmp("columncreationreceivepaymentid").reset();
            //            Wtf.getCmp("columncreationproductid").reset();
//            Wtf.getCmp("columncreationleaseorderid").setDisabled(true);
//            Wtf.getCmp("columncreationleaseorderid").reset();
            Wtf.getCmp("columncreationleasecontractid").setDisabled(true);
            Wtf.getCmp("columncreationleasecontractid").reset();
            /*
            * if is line item then assest group can be enable for Product Tax Class dimension 
            */
            if (WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.NONE || !isEdit){
                Wtf.getCmp("columncreationfixedassetsgroupsid").setDisabled(true);
                Wtf.getCmp("columncreationfixedassetsgroupsid").reset();
            }
            Wtf.getCmp(id+'gstitem').setDisabled(true);
            Wtf.getCmp(id+'gstitem').reset();
            
            if( Wtf.getCmp("columncreationcyclecid")){
                Wtf.getCmp("columncreationcyclecid").setDisabled(false);
            }
            if( Wtf.getCmp("columncreationserialid")){
                Wtf.getCmp("columncreationserialid").setDisabled(false);
            }
            Wtf.getCmp("columncreationlabourid").setDisabled(true);
            Wtf.getCmp("columncreationlabourid").reset();
            Wtf.getCmp("columncreationMachineMasterid").setDisabled(true);
            Wtf.getCmp("columncreationMachineMasterid").reset();
            Wtf.getCmp("columncreationWorkCenterMasterid").setDisabled(true);
            Wtf.getCmp("columncreationWorkCenterMasterid").reset();
            Wtf.getCmp("columncreationjobworkid").setDisabled(true);
            Wtf.getCmp("columncreationjobworkid").reset();
            Wtf.getCmp("columncreationWorkOrderid").setDisabled(true);
            Wtf.getCmp("columncreationWorkOrderid").reset();
            Wtf.getCmp("columncreationRoutingTemplateid").reset();
            Wtf.getCmp("columncreationRoutingTemplateid").setDisabled(true);
            /*
            * if is line item then Product and services  can be enable for Product Tax Class dimension 
            */
            if (WtfGlobal.GSTApplicableForCompany() == Wtf.GSTStatus.NONE || !isEdit){
                Wtf.getCmp("columncreationproductid").setDisabled(true);
                Wtf.getCmp("columncreationproductid").reset();
            }
            /*
             * Set "Is For Forward Invoice Data" disabled on "Is Line Item" is check.
             */
            Wtf.getCmp(id+'isusedforknockoffdocuments').setDisabled(true);
            Wtf.getCmp(id+'isusedforknockoffdocuments').reset();
        } else {
            if(!isEdit) {
                //Preventing disableing of isForGST checkbox for add new dimension case
                Wtf.getCmp(id+'gstitem').setDisabled(false);
            }
            
            Wtf.getCmp("columncreationmakepaymentid").setDisabled(false);
            Wtf.getCmp("columncreationcreditnoteid").setDisabled(false);
            Wtf.getCmp("columncreationdebitnoteid").setDisabled(false);
            Wtf.getCmp("columncreationreceivepaymentid").setDisabled(false);
            Wtf.getCmp("columncreationproductid").setDisabled(false);
            Wtf.getCmp("columncreationleaseorderid").setDisabled(false);
            Wtf.getCmp("columncreationlabourid").setDisabled(false);
            Wtf.getCmp("columncreationWorkCenterMasterid").setDisabled(false);
            Wtf.getCmp("columncreationMachineMasterid").setDisabled(false);
            Wtf.getCmp("columncreationWorkOrderid").setDisabled(false);
            Wtf.getCmp("columncreationjobworkid").setDisabled(false);
            Wtf.getCmp("columncreationvendorjobworkorderid").setDisabled(false);
            Wtf.getCmp("columncreationMasterContractid").setDisabled(false);
            Wtf.getCmp("columncreationRoutingTemplateid").setDisabled(false);
            Wtf.getCmp("columncreationleasecontractid").setDisabled(false);
            Wtf.getCmp("columncreationfixedassetsgroupsid").setDisabled(false);
            Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").setDisabled(false);
            Wtf.getCmp("columncreationfixedassetsrfqid").setDisabled(false);
            Wtf.getCmp("columncreationfixedassetsvendorquotationid").setDisabled(false);
            Wtf.getCmp("columncreationfixedassetspurchaseorderid").setDisabled(false);
            Wtf.getCmp("AccountStatementid").setDisabled(false);
            Wtf.getCmp("columncreationcustomerid").setDisabled(false);
            Wtf.getCmp("columncreationvendorid").setDisabled(false);
            Wtf.getCmp(id+'isusedforknockoffdocuments').setDisabled(false);
             if( Wtf.getCmp("columncreationinventoryid")){
                Wtf.getCmp("columncreationinventoryid").setDisabled(false);
            }
            if( Wtf.getCmp("columncreationstockrequestid")){
                Wtf.getCmp("columncreationstockrequestid").setDisabled(false);
            }
            if( Wtf.getCmp("columncreationILTid")){
                Wtf.getCmp("columncreationILTid").setDisabled(false);
            }
            if( Wtf.getCmp("columncreationcyclecid")){
                Wtf.getCmp("columncreationcyclecid").setDisabled(true);
            }
            if( Wtf.getCmp("columncreationserialid")){
                Wtf.getCmp("columncreationserialid").setDisabled(true);
                Wtf.getCmp("columncreationserialid").reset();
            }


            if(isEdit)
            {
                for(var i=0; i< this.ModuleNamesArray.length; i++)
                {
                    if(this.ModuleNamesArray[i].trim()=="Invoice/Cash Sales") {
                        Wtf.getCmp("columncreationinvoiceid").setValue(true);
                        Wtf.getCmp("columncreationinvoiceid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Purchase Invoice/Cash Purchase") {
                        Wtf.getCmp("columncreationveninvoiceid").setValue(true);
                        Wtf.getCmp("columncreationveninvoiceid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Debit Note") {
                        Wtf.getCmp("columncreationdebitnoteid").setValue(true);
                        Wtf.getCmp("columncreationdebitnoteid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Credit Note") {
                        Wtf.getCmp("columncreationcreditnoteid").setValue(true);
                        Wtf.getCmp("columncreationcreditnoteid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Make Payment") {
                        Wtf.getCmp("columncreationmakepaymentid").setValue(true);
                        Wtf.getCmp("columncreationmakepaymentid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Receive Payment") {
                        Wtf.getCmp("columncreationreceivepaymentid").setValue(true);
                        Wtf.getCmp("columncreationreceivepaymentid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Products & Services") {
                        Wtf.getCmp("columncreationproductid").setValue(true);
                        Wtf.getCmp("columncreationproductid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Journal Entry") {
                        Wtf.getCmp("columncreationgeneraletryid").setValue(true);
                        Wtf.getCmp("columncreationgeneraletryid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Sales Order") {
                        Wtf.getCmp("columncreationsalesorderid").setValue(true);
                        Wtf.getCmp("columncreationsalesorderid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Purchase Order") {
                        Wtf.getCmp("columncreationpurchaseorderid").setValue(true);
                        Wtf.getCmp("columncreationpurchaseorderid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Vendor Quotation") {
                        Wtf.getCmp("columncreationvendorquotationid").setValue(true);
                        Wtf.getCmp("columncreationvendorquotationid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Customer Quotation") {
                        Wtf.getCmp("columncreationcustomerquotationid").setValue(true);
                        Wtf.getCmp("columncreationcustomerquotationid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Delivery Order") {
                        Wtf.getCmp("columncreationdeliveryorderid").setValue(true);
                        Wtf.getCmp("columncreationdeliveryorderid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Request For Quotation") {
                        Wtf.getCmp("columncreationrequestforquotationid").setValue(true);
                        Wtf.getCmp("columncreationrequestforquotationid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Customer") {
                        Wtf.getCmp("columncreationcustomerid").setValue(true);
                        Wtf.getCmp("columncreationcustomerid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Vendor") {
                        Wtf.getCmp("columncreationvendorid").setValue(true);
                        Wtf.getCmp("columncreationvendorid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Goods Receipt Order") {
                        Wtf.getCmp("columncreationgoodsreceiptid").setValue(true);
                        Wtf.getCmp("columncreationgoodsreceiptid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Sales Return") {
                        Wtf.getCmp("columncreationsalesreturnid").setValue(true);
                        Wtf.getCmp("columncreationsalesreturnid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="FA Disposal Invoice") {
                        Wtf.getCmp("columncreationfixedassetsdisposalinvoiceid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetsdisposalinvoiceid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="FA Purchase Invoice") {
                        Wtf.getCmp("columncreationfixedassetspurchaseinvoiceid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetspurchaseinvoiceid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="FA Goods Receipt") {
                        Wtf.getCmp("columncreationfixedassetsgoodsreceiptid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetsgoodsreceiptid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="FA Delivery Order") {
                        Wtf.getCmp("columncreationfixedassetsdeliveryorderid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetsdeliveryorderid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="FA Assets Group") {
                        Wtf.getCmp("columncreationfixedassetsgroupsid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetsgroupsid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="FA Purchase Requisition") {
                        Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="FA RFQ") {
                        Wtf.getCmp("columncreationfixedassetsrfqid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetsrfqid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="FA Vendor Quotation") {
                        Wtf.getCmp("columncreationfixedassetsvendorquotationid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetsvendorquotationid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="FA Purchase Order") {
                        Wtf.getCmp("columncreationfixedassetspurchaseorderid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetspurchaseorderid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Purchase Return") {
                        Wtf.getCmp("columncreationpurchasereturnid").setValue(true);
                        Wtf.getCmp("columncreationpurchasereturnid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Lease Order") {
                        Wtf.getCmp("columncreationleaseorderid").setValue(true);
                        Wtf.getCmp("columncreationleaseorderid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Contract Order") {
                        Wtf.getCmp("columncreationcontractid").setValue(true);
                        Wtf.getCmp("columncreationcontractid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="GL Accounts") {
                        Wtf.getCmp("AccountStatementid").setValue(true);
                        Wtf.getCmp("AccountStatementid").setDisabled(true);
                    }
                    if(this.ModuleNamesArray[i].trim()=="Purchase Requisition") {
                        Wtf.getCmp("columncreationpurchaserequisitionid").setValue(true);
                        Wtf.getCmp("columncreationpurchaserequisitionid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Serial Window") {
                        Wtf.getCmp("columncreationserialid").setValue(true);
                        Wtf.getCmp("columncreationserialid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Inventory Window") {
                        Wtf.getCmp("columncreationinventoryid").setValue(true);
                        Wtf.getCmp("columncreationinventoryid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Consignment Request") {
                        Wtf.getCmp("columncreationconsignmentrequestid").setValue(true);
                        Wtf.getCmp("columncreationconsignmentrequestid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Consignment Invoice") {
                        Wtf.getCmp("columncreationconsignmentinvoiceid").setValue(true);
                        Wtf.getCmp("columncreationconsignmentinvoiceid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Consignment DeliveryOrder") {
                        Wtf.getCmp("columncreationconsignmentdoid").setValue(true);
                        Wtf.getCmp("columncreationconsignmentdoid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Consignment SalesReturn") {
                        Wtf.getCmp("columncreationconsignmentsalesreturnid").setValue(true);
                        Wtf.getCmp("columncreationconsignmentsalesreturnid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Consignment VendorRequest") {
                        Wtf.getCmp("columncreationconsignmentrequestvendorid").setValue(true);
                        Wtf.getCmp("columncreationconsignmentrequestvendorid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Consignment GoodsReceipt") {
                        Wtf.getCmp("columncreationconsignmentpurchaseinvoiceid").setValue(true);
                        Wtf.getCmp("columncreationconsignmentpurchaseinvoiceid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Consignment GoodsReceiptOrder") {
                        Wtf.getCmp("columncreationconsignmentgrid").setValue(true);
                        Wtf.getCmp("columncreationconsignmentgrid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Consignment PurchaseReturn") {
                        Wtf.getCmp("columncreationconsignmentpurchasereturnid").setValue(true);
                        Wtf.getCmp("columncreationconsignmentpurchasereturnid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Lease Contract") {
                        Wtf.getCmp("columncreationleasecontractid").setValue(true);
                        Wtf.getCmp("columncreationleasecontractid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Lease Quotation") {
                        Wtf.getCmp("columncreationleasequotationid").setValue(true);
                        Wtf.getCmp("columncreationleasequotationid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Lease Delivery Order") {
                        Wtf.getCmp("columncreationleasedoid").setValue(true);
                        Wtf.getCmp("columncreationleasedoid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Lease Return") {
                        Wtf.getCmp("columncreationleasereturnid").setValue(true);
                        Wtf.getCmp("columncreationleasereturnid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Lease Invoice") {
                        Wtf.getCmp("columnCreationLeaseInvoiceid").setValue(true);
                        Wtf.getCmp("columnCreationLeaseInvoiceid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "FA Purchase Return") {
                        Wtf.getCmp("columncreationfixedassetspurchasereturnid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetspurchasereturnid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "FA Sales Return") {
                        Wtf.getCmp("columncreationfixedassetssalesreturnid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetssalesreturnid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "FA Details") {
                        Wtf.getCmp("columncreationfixedassetdetailsid").setValue(true);
                        Wtf.getCmp("columncreationfixedassetdetailsid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Stock Adjustment") {
                        Wtf.getCmp("columncreationstockadjustmentid").setValue(true);
                        Wtf.getCmp("columncreationstockadjustmentid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Stock Request") {
                        Wtf.getCmp("columncreationstockrequestid").setValue(true);
                        Wtf.getCmp("columncreationstockrequestid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Inter Store Transfer") {
                        Wtf.getCmp("columnCreationISTid").setValue(true);
                        Wtf.getCmp("columnCreationISTid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Inter Location Transfer") {
                        Wtf.getCmp("columncreationILTid").setValue(true);
                        Wtf.getCmp("columncreationILTid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Cycle Count") {
                        Wtf.getCmp("columncreationcyclecid").setValue(true);
                        Wtf.getCmp("columncreationcyclecid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Labour") {
                        Wtf.getCmp("columncreationlabourid").setValue(true);
                        Wtf.getCmp("columncreationlabourid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Work Center Master") {
                        Wtf.getCmp("columncreationWorkCenterMasterid").setValue(true);
                        Wtf.getCmp("columncreationWorkCenterMasterid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Machine Master") {
                        Wtf.getCmp("columncreationMachineMasterid").setValue(true);
                        Wtf.getCmp("columncreationMachineMasterid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Work Order") {
                        Wtf.getCmp("columncreationWorkOrderid").setValue(true);
                        Wtf.getCmp("columncreationWorkOrderid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Master Contract") {
                        Wtf.getCmp("columncreationMasterContractid").setValue(true);
                        Wtf.getCmp("columncreationMasterContractid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Routing Template") {
                        Wtf.getCmp("columncreationRoutingTemplateid").setValue(true);
                        Wtf.getCmp("columncreationRoutingTemplateid").setDisabled(true);
                    }
                    if (this.ModuleNamesArray[i].trim() == "Job Work") {
                        Wtf.getCmp("columncreationjobworkid").setValue(true);
                        Wtf.getCmp("columncreationjobworkid").setDisabled(true);
                }
                    if (this.ModuleNamesArray[i].trim() == "Vendor Job Work Order") {
                    Wtf.getCmp("columncreationvendorjobworkorderid").setValue(true);
                            Wtf.getCmp("columncreationvendorjobworkorderid").setDisabled(true);
                    }
                    }
                for(i=0; i< this.relatedModuleIds.length; i++)
                {
                    if(this.relatedModuleIds[i].trim()==Wtf.Acc_Invoice_ModuleId) {
                        Wtf.getCmp("columncreationinvoiceformid").setValue(true);
                        Wtf.getCmp("columncreationinvoiceformid").setDisabled(true);
                    }
                    if(this.relatedModuleIds[i].trim()==Wtf.Acc_Vendor_Invoice_ModuleId) {
                        Wtf.getCmp("columncreationveninvoiceformid").setValue(true);
                        Wtf.getCmp("columncreationveninvoiceformid").setDisabled(true);
                    }
                    if(this.relatedModuleIds[i].trim()==Wtf.Acc_Sales_Order_ModuleId) {
                        Wtf.getCmp("columncreationsalesorderformid").setValue(true);
                        Wtf.getCmp("columncreationsalesorderformid").setDisabled(true);
                    }
                    if(this.relatedModuleIds[i].trim()==Wtf.Acc_Purchase_Order_ModuleId) {
                        Wtf.getCmp("columncreationpurchaseorderformid").setValue(true);
                        Wtf.getCmp("columncreationpurchaseorderformid").setDisabled(true);
                    }
                    if(this.relatedModuleIds[i].trim()==Wtf.Acc_Delivery_Order_ModuleId) {
                        Wtf.getCmp("columncreationdeliveryorderformid").setValue(true);
                        Wtf.getCmp("columncreationdeliveryorderformid").setDisabled(true);
                    }
                    if(this.relatedModuleIds[i].trim()==Wtf.Acc_Customer_Quotation_ModuleId) {
                        Wtf.getCmp("columncreationcustomerquotationformid").setValue(true);
                        Wtf.getCmp("columncreationcustomerquotationformid").setDisabled(true);
                    }
                    if(this.relatedModuleIds[i].trim()==Wtf.Acc_Vendor_Quotation_ModuleId) {
                        Wtf.getCmp("columncreationvendorquotationformid").setValue(true);
                        Wtf.getCmp("columncreationvendorquotationformid").setDisabled(true);
                    }
                    if(this.relatedModuleIds[i].trim()==Wtf.Acc_Purchase_Return_ModuleId) {
                        Wtf.getCmp("columncreationpurchasereturnformid").setValue(true);
                        Wtf.getCmp("columncreationpurchasereturnformid").setDisabled(true);
                }
                    if(this.relatedModuleIds[i].trim()==Wtf.Acc_Sales_Return_ModuleId) {
                        Wtf.getCmp("columncreationsalesreturnformid").setValue(true);
                        Wtf.getCmp("columncreationsalesreturnformid").setDisabled(true);
            }
                   if(this.relatedModuleIds[i].trim()==Wtf.Acc_Goods_Receipt_ModuleId) {
                            Wtf.getCmp("columncreationgrorderformid").setValue(true);
                            Wtf.getCmp("columncreationgrorderformid").setDisabled(true);
                   }
                }
            }
        }
    },this);
    
    /*
     * Below Code is commented because "Is For Gst" checkbox is made hidden temporary. In future if required this case will be uncommented.
     */
//    Wtf.getCmp(id+'gstitem').on('check', function(c, checked){
//        if (checked){
//            Wtf.getCmp(id+'addressfieldset').show();
//            Wtf.getCmp('columncreationmultientitydimensionid').setValue(true);
//        } else{
//            Wtf.getCmp(id+'multientityaddress').reset();
//            Wtf.getCmp(id+'addressfieldset').hide();
//            Wtf.getCmp('columncreationmultientitydimensionid').setValue(false);
//        }
//    }, this);
        if (!isEdit){
            Wtf.getCmp(id + 'isforeclaim').on('check', function(c, checked){
                if (checked){
                    Wtf.getCmp('columncreationgeneraletryid').setValue(true);
                } else{
                    Wtf.getCmp('columncreationgeneraletryid').reset();
                }
            }, this);
        }
    
//    Wtf.getCmp('columncreationmultientitydimensionid').on('change', function(c, checked){
//        if (checked){
//            Wtf.getCmp(id+'gstitem').setValue(true);
//        } else{
//            Wtf.getCmp(id+'gstitem').setValue(false);
//            Wtf.getCmp(id+'multientityaddress').reset();
//            Wtf.getCmp(id+'addressfieldset').hide();
//        }
//    }, this);
        
    Wtf.getCmp(id+"isessential").on('check',function(c,checked){
        
        var fieldType = Wtf.getCmp(id+"fieldtype_combo").value;
        if(fieldType=='4' || fieldType=='7' || fieldType=='8' ||fieldType=='1' ){
            var drpDownValue =Wtf.getCmp(id+"dropdowndata").getValue();
            if(fieldType=='8'){
                drpDownValue =Wtf.getCmp(id+"ref_module").getValue();
            }
            if(checked && drpDownValue.trim()=="" && fieldType!='1' && !(isEdit||this.isDeactivate)){
                //Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.dimension.msg.21"));
                 WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.dimension.msg.21")],2);
                Wtf.getCmp(id+"isessential").reset();
                return;
            }
        }
        if(this.newDefaultValueField !=undefined){
            if(checked){
                var formPanel1 = Wtf.getCmp(id + "cstfrm");
                var newFieldIndex = formPanel1.items.keys.lastIndexOf(this.newDefaultValueField.getId());
                var newDefValueField = this.getfieldconfig();
                formPanel1.items.removeAt(newFieldIndex);
                this.newDefaultValueField.destroy();
                this.newDefaultValueField = newDefValueField;
                formPanel1.items.insert(newFieldIndex, this.newDefaultValueField);
                
                Wtf.getCmp(id+'isautopopulatedefaultvalue').setVisible(checked);
                WtfGlobal.showFormElement(Wtf.getCmp(id+'isautopopulatedefaultvalue'));
                WtfGlobal.showFormLabel(Wtf.getCmp(id+'isautopopulatedefaultvalue'));
                Wtf.getCmp(id+"cstfrm").doLayout();
            }else{
                this.newDefaultValueField.destroy();
                WtfGlobal.hideFormElement(this.newDefaultValueField);
                Wtf.getCmp(id+'isautopopulatedefaultvalue').reset();
                WtfGlobal.hideFormElement(Wtf.getCmp(id+'isautopopulatedefaultvalue'));
            }
        }
    },this);
    
    Wtf.getCmp(id+"sendNotification").on('check',function(c,checked){

        if(checked){
            notificationWindow(false);
        }else{
            Wtf.getCmp('notificationDays').setValue("")
        }
    },this);
    
    Wtf.getCmp("columncreationinvoiceformid").on('check',function(c,checked){
        checkifModuleCanbeactivated("columncreationinvoiceformid",checked,this.parentCombo.getValue());
    },this);
    
    Wtf.getCmp("columncreationveninvoiceformid").on('check',function(c,checked){
       checkifModuleCanbeactivated("columncreationveninvoiceformid",checked,this.parentCombo.getValue());
    },this);
    
      Wtf.getCmp("columncreationsalesorderformid").on('check',function(c,checked){
        checkifModuleCanbeactivated("columncreationsalesorderformid",checked,this.parentCombo.getValue());
    },this);
    
      Wtf.getCmp("columncreationpurchaseorderformid").on('check',function(c,checked){
          checkifModuleCanbeactivated("columncreationpurchaseorderformid",checked,this.parentCombo.getValue());
    },this);
    
      Wtf.getCmp("columncreationdeliveryorderformid").on('check',function(c,checked){
          checkifModuleCanbeactivated("columncreationdeliveryorderformid",checked,this.parentCombo.getValue());
    },this);
    
      Wtf.getCmp("columncreationcustomerquotationformid").on('check',function(c,checked){
          checkifModuleCanbeactivated("columncreationcustomerquotationformid",checked,this.parentCombo.getValue());
    },this);
    
      Wtf.getCmp("columncreationvendorquotationformid").on('check',function(c,checked){
          checkifModuleCanbeactivated("columncreationvendorquotationformid",checked,this.parentCombo.getValue());
    },this);
    
      Wtf.getCmp("columncreationpurchasereturnformid").on('check',function(c,checked){
          checkifModuleCanbeactivated("columncreationpurchasereturnformid",checked,this.parentCombo.getValue());
    },this);
    
      Wtf.getCmp("columncreationsalesreturnformid").on('check',function(c,checked){
          checkifModuleCanbeactivated("columncreationsalesreturnformid",checked,this.parentCombo.getValue());
    },this);
    
      Wtf.getCmp("columncreationgrorderformid").on('check',function(c,checked){
          checkifModuleCanbeactivated("columncreationgrorderformid",checked,this.parentCombo.getValue());
    },this);
    
    Wtf.getCmp(id+"fieldtype_combo").on('select',function(c,rec){
        Wtf.getCmp("startingno_field").allowBlank = true;
        Wtf.getCmp(id+"ref_module").allowBlank = true;
//        Wtf.getCmp(id+"isessential").reset();
        Wtf.getCmp(id+"lineitem").reset();
        Wtf.getCmp(id+'isessential').reset();
        var typeCode = rec.data.typecode;
        Wtf.getCmp("max_length").container.parent().dom.style.display=((typeCode=='11' || typeCode=='3' || typeCode=='4' || typeCode=='2' || typeCode=='5' || typeCode=='7' || typeCode=='12' || typeCode=='15')?"none":"block");
        Wtf.getCmp(id+'isessential').container.parent().dom.style.display=((typeCode=='11'|| typeCode=='12')?"none":"block");
        Wtf.getCmp(id+"lineitem").container.parent().dom.style.display=((typeCode=='11' || typeCode=='12')?"none":"block");
        Wtf.getCmp("columncreationproductid").container.parent().dom.style.display=((typeCode=='11' || typeCode=='12')?"none":"block");
        Wtf.getCmp("AccountStatementid").container.parent().dom.style.display=(typeCode=='12')?"none":"block";
        Wtf.getCmp(id+'isfortask').container.parent().dom.style.display=(typeCode=='4'?"block":"none");
        Wtf.getCmp(id+"isforproject").container.parent().dom.style.display=(typeCode=='4'?"block":"none");
        Wtf.getCmp(id+"sendNotification").container.parent().dom.style.display = typeCode=='3' ? "block" : "none"
        Wtf.getCmp(id+'isusedforknockoffdocuments').reset();
        Wtf.getCmp(id+'isusedforknockoffdocuments').container.parent().dom.style.display = (typeCode == '11' || typeCode == '12' || typeCode == '13' || typeCode == '15' || typeCode == '7')?"none":"block";

        if(typeCode!='1' && typeCode!='13' ){
            Wtf.getCmp("max_length").allowBlank=true;
            if(typeCode=='4'){// if drop down
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
                Wtf.getCmp(id+"customregx").allowBlank=true;
                Wtf.getCmp("max_length").allowBlank=true;
            }else if(typeCode=='2'){// if number
                Wtf.getCmp("max_length").setValue('15');
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
            }else if(typeCode=='3' || typeCode=='11'){// if date
                Wtf.getCmp("max_length").setValue('');
            }else if(typeCode=='9'){// if auto no
                Wtf.getCmp("startingno_field").allowBlank = false;
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
                Wtf.getCmp("max_length").container.parent().dom.style.display="none";
                Wtf.getCmp("max_length").setValue('');
            }else if(typeCode=='8'){// if drop down reference
                Wtf.getCmp(id+"ref_module").allowBlank = false;
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
                Wtf.getCmp("max_length").container.parent().dom.style.display="none";
                Wtf.getCmp("max_length").setValue('');
            }else if(typeCode=='7'){
                Wtf.getCmp(id+"dropdowndata").allowBlank=false;
                Wtf.getCmp("max_length").allowBlank=true;
                Wtf.getCmp("max_length").setValue('');
            }else if(typeCode=='12'){
                Wtf.getCmp(id+"dropdowndata").allowBlank=false;
                Wtf.getCmp("max_length").allowBlank=true;
                Wtf.getCmp("max_length").setValue('');

            }else if(typeCode=='15'){// Rich Text Area
                Wtf.getCmp("max_length").setValue('2000');
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
            }else{
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
            }
        }else{
            Wtf.getCmp("max_length").allowBlank=false;
            Wtf.getCmp("max_length").setValue('');
            Wtf.getCmp(id+"dropdowndata").allowBlank=true;
        }
    },this);
    
    var custom_field_win =  new Wtf.Window({
        layout:'fit',
        id:"new_custom_field_window",
        draggable:false,
        modal:true,
        width:530,
        title:isEdit ? (isCustomField ? WtfGlobal.getLocaleText("acc.masterconfig.editCustomColumn") :WtfGlobal.getLocaleText("acc.masterconfig.editDimension")):(isCustomField ? WtfGlobal.getLocaleText("acc.field.CreateCustomField") :WtfGlobal.getLocaleText("acc.field.CreateDimensions")),//WtfGlobal.getLocaleText("crm.spredsheet.customcolumn"),//"Custom Column",
        iconCls:getButtonIconCls(Wtf.etype.deskera),
        autoHeight:true,
        items:[form_panel]
    })
    custom_field_win.on("show", function(){
        if(isEdit || this.isDeactivate) {
            Wtf.Ajax.requestEx({
                url:"ACCMaster/getMasterData.do",
                params: {
                    mode:111,
                    masterid : masterid,
                    isShowCustColumn:true
                }
            },this,this.genSuccessResponse,this.genFailureResponse);
        } else if (!isCustomField){
            var fieldcombo = Wtf.getCmp(id + "fieldtype_combo");
            fieldcombo.setValue("4"); // Set field type Drop down by default.
            var record = fieldcombo.store.getAt(0);
            fieldcombo.fireEvent('select', fieldcombo, record);
            var dd_textfield = Wtf.getCmp(id + "dropdowndata");
            drop_down_FieldShow(dd_textfield, "block");
        }
        Wtf.getCmp(id+"sendNotification").container.parent().dom.style.display = "none";
    },this)
    custom_field_win.show();
    var ref_module_dropdown = Wtf.getCmp(id+"ref_module");
    ref_moule_comboShow(ref_module_dropdown,"none");

    Wtf.getCmp(id+"fieldtype_combo").on("select",function(combo,record,index){
        var dd_textfield = Wtf.getCmp(id+"dropdowndata");
        var ref_module_dropdown = Wtf.getCmp(id+"ref_module");
        ref_moule_comboShow(ref_module_dropdown,"none");
        autoNoFieldShow("none",id);

        //        Wtf.getCmp(id+"addFormulae").disable();
        this.formPanel=Wtf.getCmp(id+"cstfrm").form;
        //        if(combo.getValue() == 1){
        if(combo.getValue() == 4){
            cmpid=70;
            drop_down_FieldShow(dd_textfield,"block");
        }
        else if(combo.getValue() == 7)
        {
            cmpid=71;
            drop_down_FieldShow(dd_textfield,"block");
        }
        else if(combo.getValue() == 12)
        {
            drop_down_FieldShow(dd_textfield,"block");
        }
        else if(combo.getValue() == 8){
            ref_moule_comboShow(ref_module_dropdown,"block");
            drop_down_FieldShow(dd_textfield,"none");

        // if(combo.getValue() != 3 && combo.getValue() != 5) {//DateField or TimeField
        // or Dropdown - Disable Add formula button.
        // if(this.formPanel.isValid())
        // Wtf.getCmp(id+"addFormulae").enable();
        // else
        // Wtf.getCmp(id+"addFormulae").disable();
        // }
        }else if(combo.getValue() == 9){
            ref_moule_comboShow(ref_module_dropdown,"none");
            drop_down_FieldShow(dd_textfield,"none");
            autoNoFieldShow("block",id);
        } else {
            drop_down_FieldShow(dd_textfield,"none");
        }
    },this);
}

function genSuccessResponse(response) {
    if(response.success){
        var id = 'createcustomecolumnid';

        var groupName = response.data[0].name;
        var isessential = response.data[0].isessential;
        var relatedModuleIsAllowEdit=response.data[0].relatedmoduleisallowedit;
        
        var isForGST = response.data[0].isForGST;
        var dimAddress = response.address;
        if(dimAddress){
           Wtf.getCmp(id+'multientityaddress').setValue(dimAddress); 
           Wtf.getCmp(id+'multientityaddress').show();
        }
        if(isForGST){
            //line item check is disabled in edit case
            Wtf.getCmp(id+'lineitem').setDisabled(true);
            Wtf.getCmp("columncreationmultientitydimensionid").setValue(true);
        }
        var isforproject = response.data[0].isforproject;
        var isforeclaim = response.data[0].isforeclaim;
        var isfortask = response.data[0].isfortask;
        var mapWithFieldType = response.data[0].mapWithFieldType;
        var fieldtooltip = response.data[0].fieldtooltip;
        if(isessential){
            groupName = groupName.substr(0, (groupName.length-1));
        }

        var fieldtype = response.data[0].fieldtype;
        var modulename = response.data[0].modulename;
        var maxlength = response.data[0].maxlength;
        var customcolumn = response.data[0].customcolumn;
        var dropdowndata = response.data[0].combocommvalues;
        var iscustomfield = response.data[0].iscustomfield;
        var newDefaultFieldValue = response.data[0].defaultValue;
        var isautopopulatedefaultvalue = response.data[0].isautopopulatedefaultvalue;
        var  itemparentValue="";
        this.parentVal="";
        if(response.data[0].itemparentValue != undefined && response.data[0].itemparentValue !=""){
            itemparentValue=response.data[0].itemparentValue;
            this.parentVal=itemparentValue;
//            var rec = WtfGlobal.searchRecord(this.parentComboStore, itemparentValue, 'fieldlabel');
//            if (rec !== null && rec != undefined) {
//                var parentid = rec.data.fieldid;
//                this.parentCombo.setValue(parentid);
//            }
        
        }else{
            this.parentCombo.reset();
        }
        this.parentComboStore.load();
        this.isCustomColumn=customcolumn;
         /**
         * If Allow To Edit check is enabled then setting its value true
         * ERM-177 / ERP-34804
         */        
        if (relatedModuleIsAllowEdit != undefined && relatedModuleIsAllowEdit != "" && relatedModuleIsAllowEdit == Wtf.ALLOW_TO_EDIT_PRODUCT_CUSTOMFIELD){
            Wtf.getCmp("relatedModuleIsAllowEditid").setValue(true);
        } else{
            Wtf.getCmp("relatedModuleIsAllowEditid").setValue(false);
        }
        Wtf.getCmp("column_header_field").setValue(groupName);
        Wtf.getCmp(id+"fieldtype_combo").setValue(fieldtype);
        Wtf.getCmp(id+'lineitem').setValue(customcolumn);
        Wtf.getCmp("max_length").setValue(maxlength);
//        var defaultvaluefield = Wtf.getCmp(id+'defaultvalue');
//        defaultvaluefield.setValue(response.data[0].defaultValue);
        if(iscustomfield){
            Wtf.getCmp("column_header_field_tooltip").setValue(fieldtooltip);
        }
        if(this.isDeactivate){
            setDisableAllCustomModule();
        }
        for(var i=0; i< this.ModuleNamesArray.length; i++) {
            var ModuleName=this.ModuleNamesArray[i].trim();
             if(ModuleName=="Invoice/Cash Sales") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationinvoiceid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationinvoiceid").setValue(true);
                    Wtf.getCmp("columncreationinvoiceid").setDisabled(true);
                }
            }
            if(ModuleName=="Security Gate Entry") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationsecgateentryid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationsecgateentryid").setValue(true);
                    Wtf.getCmp("columncreationsecgateentryid").setDisabled(true);
                }
            }
            if(ModuleName==WtfGlobal.getLocaleText("acc.multientitydimension.title")) { //newly Added Module along with isForGST
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationmultientitydimensionid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationmultientitydimensionid").setValue(true);
                    Wtf.getCmp("columncreationmultientitydimensionid").setDisabled(true);
                }
            }
            if(ModuleName==WtfGlobal.getLocaleText("acc.jobworkout.title")) { //Job Work out module
                if(this.isDeactivate){
                    Wtf.getCmp("jobworkoutorderid").setDisabled(false);
                } else {
                    Wtf.getCmp("jobworkoutorderid").setValue(true);
                    Wtf.getCmp("jobworkoutorderid").setDisabled(true);
                }
            }
            if(ModuleName=="Purchase Invoice/Cash Purchase") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationveninvoiceid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationveninvoiceid").setValue(true);
                    Wtf.getCmp("columncreationveninvoiceid").setDisabled(true);
                }
            }
            if(ModuleName=="Debit Note") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationdebitnoteid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationdebitnoteid").setValue(true);
                    Wtf.getCmp("columncreationdebitnoteid").setDisabled(true);
                }
            }
            if(ModuleName=="Credit Note") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationcreditnoteid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationcreditnoteid").setValue(true);
                    Wtf.getCmp("columncreationcreditnoteid").setDisabled(true);
                }
            }
            if(ModuleName=="Make Payment") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationmakepaymentid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationmakepaymentid").setValue(true);
                    Wtf.getCmp("columncreationmakepaymentid").setDisabled(true);
                }
            }
            if(ModuleName=="Receive Payment") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationreceivepaymentid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationreceivepaymentid").setValue(true);
                    Wtf.getCmp("columncreationreceivepaymentid").setDisabled(true);
                }
            }
            if(ModuleName=="Products & Services") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationproductid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationproductid").setValue(true);
                    Wtf.getCmp("columncreationproductid").setDisabled(true);
                    Wtf.getCmp(id+'lineitem').setDisabled(true)
                }
            }
            if(ModuleName=="Journal Entry") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationgeneraletryid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationgeneraletryid").setValue(true);
                    Wtf.getCmp("columncreationgeneraletryid").setDisabled(true);
                }
            }
            if(ModuleName=="Sales Order") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationsalesorderid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationsalesorderid").setValue(true);
                    Wtf.getCmp("columncreationsalesorderid").setDisabled(true);
                }
            }
            if(ModuleName=="Purchase Order") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationpurchaseorderid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationpurchaseorderid").setValue(true);
                    Wtf.getCmp("columncreationpurchaseorderid").setDisabled(true);
                }
            }
            if(ModuleName=="Vendor Quotation") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationvendorquotationid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationvendorquotationid").setValue(true);
                    Wtf.getCmp("columncreationvendorquotationid").setDisabled(true);
                }
            }
            if(ModuleName=="Customer Quotation") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationcustomerquotationid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationcustomerquotationid").setValue(true);
                    Wtf.getCmp("columncreationcustomerquotationid").setDisabled(true);
                }
            }
            if(ModuleName=="Delivery Order") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationdeliveryorderid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationdeliveryorderid").setValue(true);
                    Wtf.getCmp("columncreationdeliveryorderid").setDisabled(true);
                }
            }
            if(ModuleName=="Request For Quotation") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationrequestforquotationid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationrequestforquotationid").setValue(true);
                    Wtf.getCmp("columncreationrequestforquotationid").setDisabled(true);
                }
            }
            if(ModuleName=="FA Disposal Invoice") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationfixedassetsdisposalinvoiceid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetsdisposalinvoiceid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetsdisposalinvoiceid").setDisabled(true);
                }
            }
            if(ModuleName=="FA Purchase Invoice") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationfixedassetspurchaseinvoiceid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetspurchaseinvoiceid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetspurchaseinvoiceid").setDisabled(true);
                }
            }
            if(ModuleName=="FA Goods Receipt") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationfixedassetsgoodsreceiptid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetsgoodsreceiptid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetsgoodsreceiptid").setDisabled(true);
                }
            }
            if(ModuleName=="FA Delivery Order") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationfixedassetsdeliveryorderid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetsdeliveryorderid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetsdeliveryorderid").setDisabled(true);
                }
            }
            if(ModuleName=="FA Assets Group") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationfixedassetsgroupsid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetsgroupsid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetsgroupsid").setDisabled(true);
                }
            }
            if(ModuleName=="FA Purchase Requisition") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").setDisabled(true);
                }
            }
            if(ModuleName=="FA RFQ") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationfixedassetsrfqid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetsrfqid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetsrfqid").setDisabled(true);
                }
            }
            if(ModuleName=="FA Vendor Quotation") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationfixedassetsvendorquotationid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetsvendorquotationid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetsvendorquotationid").setDisabled(true);
                }
            }
            if(ModuleName=="FA Purchase Order") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationfixedassetspurchaseorderid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetspurchaseorderid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetspurchaseorderid").setDisabled(true);
                }
            }
            if(ModuleName=="Customer") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationcustomerid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationcustomerid").setValue(true);
                    Wtf.getCmp("columncreationcustomerid").setDisabled(true);
                }
            }
            if(ModuleName=="Vendor") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationvendorid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationvendorid").setValue(true);
                    Wtf.getCmp("columncreationvendorid").setDisabled(true);
                }
            }
            if(ModuleName=="Goods Receipt Order") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationgoodsreceiptid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationgoodsreceiptid").setValue(true);
                    Wtf.getCmp("columncreationgoodsreceiptid").setDisabled(true);
                }
            }
            if(ModuleName=="Sales Return") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationsalesreturnid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationsalesreturnid").setValue(true);
                    Wtf.getCmp("columncreationsalesreturnid").setDisabled(true);
                }
            }
            if(ModuleName=="Purchase Return") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationpurchasereturnid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationpurchasereturnid").setValue(true);
                    Wtf.getCmp("columncreationpurchasereturnid").setDisabled(true);
                }
            }
            if(this.ModuleNamesArray[i].trim()=="Lease Order") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationleaseorderid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationleaseorderid").setValue(true);
                    Wtf.getCmp("columncreationleaseorderid").setDisabled(true);
                }
            }
            if(this.ModuleNamesArray[i].trim()=="Contract Order") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationcontractid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationcontractid").setValue(true);
                    Wtf.getCmp("columncreationcontractid").setDisabled(true);
                }
            }
            if(ModuleName=="GL Accounts") {
                if(this.isDeactivate){
                    Wtf.getCmp("AccountStatementid").setDisabled(false);
                }else {
                    Wtf.getCmp("AccountStatementid").setValue(true);
                    Wtf.getCmp("AccountStatementid").setDisabled(true);
                }
            }
            if(ModuleName=="Purchase Requisition") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationpurchaserequisitionid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationpurchaserequisitionid").setValue(true);
                    Wtf.getCmp("columncreationpurchaserequisitionid").setDisabled(true);
                }
            }
            if (ModuleName == "Serial Window") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationserialid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationserialid").setValue(true);
                    Wtf.getCmp("columncreationserialid").setDisabled(true);
                    Wtf.getCmp(id+'lineitem').setDisabled(true);         // cannot change line level check if serial window is already activated.
                }
            }
            if (ModuleName == "Inventory Window") {
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationinventoryid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationinventoryid").setValue(true);
                    Wtf.getCmp("columncreationinventoryid").setDisabled(true);
                }
            }
            if (ModuleName == "Consignment Request") { //***
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationconsignmentrequestid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationconsignmentrequestid").setValue(true);
                    Wtf.getCmp("columncreationconsignmentrequestid").setDisabled(true);
                }
            }
            if (ModuleName == "Consignment Invoice") { //***
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationconsignmentinvoiceid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationconsignmentinvoiceid").setValue(true);
                    Wtf.getCmp("columncreationconsignmentinvoiceid").setDisabled(true);
                }
            }
            if (ModuleName == "Consignment DeliveryOrder") { //***
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationconsignmentdoid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationconsignmentdoid").setValue(true);
                    Wtf.getCmp("columncreationconsignmentdoid").setDisabled(true);
                }
            }
            if (ModuleName == "Consignment SalesReturn") { //****
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationconsignmentsalesreturnid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationconsignmentsalesreturnid").setValue(true);
                    Wtf.getCmp("columncreationconsignmentsalesreturnid").setDisabled(true);
                }
            }
            if (ModuleName == "Consignment VendorRequest") {// ***
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationconsignmentrequestvendorid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationconsignmentrequestvendorid").setValue(true);
                    Wtf.getCmp("columncreationconsignmentrequestvendorid").setDisabled(true);
                }
            }
            if (ModuleName == "Consignment GoodsReceipt") { //*****
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationconsignmentpurchaseinvoiceid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationconsignmentpurchaseinvoiceid").setValue(true);
                    Wtf.getCmp("columncreationconsignmentpurchaseinvoiceid").setDisabled(true);
                }
            }
            if (ModuleName == "Consignment GoodsReceiptOrder") {//***
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationconsignmentgrid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationconsignmentgrid").setValue(true);
                    Wtf.getCmp("columncreationconsignmentgrid").setDisabled(true);
                }
            }
            if (ModuleName == "Consignment PurchaseReturn") { //****
                if(this.isDeactivate){
                    Wtf.getCmp("columncreationconsignmentpurchasereturnid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationconsignmentpurchasereturnid").setValue(true);
                    Wtf.getCmp("columncreationconsignmentpurchasereturnid").setDisabled(true);
                }
            }
            if (ModuleName == "Lease Contract") { //****
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationleasecontractid").setDisabled(false);
                }else {
                    Wtf.getCmp("columncreationleasecontractid").setValue(true);
                    Wtf.getCmp("columncreationleasecontractid").setDisabled(true);
                }
            }
            if (ModuleName == "Lease Quotation") { //****
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationleasequotationid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationleasequotationid").setValue(true);
                    Wtf.getCmp("columncreationleasequotationid").setDisabled(true);
                }
            }
            if (ModuleName == "Lease Delivery Order") { //****
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationleasedoid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationleasedoid").setValue(true);
                    Wtf.getCmp("columncreationleasedoid").setDisabled(true);
                }
            }
            if (ModuleName == "Lease Return") { //****
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationleasereturnid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationleasereturnid").setValue(true);
                    Wtf.getCmp("columncreationleasereturnid").setDisabled(true);
                }
            }
            if (ModuleName == "Lease Invoice") {
                if(this.isDeactivate){
                    Wtf.getCmp("columnCreationLeaseInvoiceid").setDisabled(false);
                } else {
                    Wtf.getCmp("columnCreationLeaseInvoiceid").setValue(true);
                    Wtf.getCmp("columnCreationLeaseInvoiceid").setDisabled(true);
                }
            }
            if (ModuleName == "FA Purchase Return") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationfixedassetspurchasereturnid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetspurchasereturnid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetspurchasereturnid").setDisabled(true);
                }
            }
            if (ModuleName == "FA Sales Return") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationfixedassetssalesreturnid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetssalesreturnid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetssalesreturnid").setDisabled(true);
                }
            }
            if (ModuleName == "FA Details") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationfixedassetdetailsid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationfixedassetdetailsid").setValue(true);
                    Wtf.getCmp("columncreationfixedassetdetailsid").setDisabled(true);
                }
            }
            if (ModuleName == "Stock Adjustment") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationstockadjustmentid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationstockadjustmentid").setValue(true);
                    Wtf.getCmp("columncreationstockadjustmentid").setDisabled(true);
                }
            }
            if (ModuleName == "Stock Request") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationstockrequestid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationstockrequestid").setValue(true);
                    Wtf.getCmp("columncreationstockrequestid").setDisabled(true);
                }
            }
            if (ModuleName == "Inter Store Transfer") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columnCreationISTid").setDisabled(false);
                } else {
                    Wtf.getCmp("columnCreationISTid").setValue(true);
                    Wtf.getCmp("columnCreationISTid").setDisabled(true);
                }
            }
            if (ModuleName == "Inter Location Transfer") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationILTid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationILTid").setValue(true);
                    Wtf.getCmp("columncreationILTid").setDisabled(true);
                }
            }
            if (ModuleName == "Cycle Count") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationcyclecid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationcyclecid").setValue(true);
                    Wtf.getCmp("columncreationcyclecid").setDisabled(true);
                }
            }
            if (this.ModuleNamesArray[i].trim() == "Labour") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationlabourid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationlabourid").setValue(true);
                    Wtf.getCmp("columncreationlabourid").setDisabled(true);
                }
            }
            if (this.ModuleNamesArray[i].trim() == "Work Center Master") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationWorkCenterMasterid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationWorkCenterMasterid").setValue(true);
                    Wtf.getCmp("columncreationWorkCenterMasterid").setDisabled(true);
                }
            }
            if (this.ModuleNamesArray[i].trim() == "Machine Master") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationMachineMasterid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationMachineMasterid").setValue(true);
                    Wtf.getCmp("columncreationMachineMasterid").setDisabled(true);
                }
            }
            if (this.ModuleNamesArray[i].trim() == "Work Order") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationWorkOrderid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationWorkOrderid").setValue(true);
                    Wtf.getCmp("columncreationWorkOrderid").setDisabled(true);
                }
            }
            if (this.ModuleNamesArray[i].trim() == "Master Contract") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationMasterContractid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationMasterContractid").setValue(true);
                    Wtf.getCmp("columncreationMasterContractid").setDisabled(true);
                }
            }
            if (this.ModuleNamesArray[i].trim() == "Routing Template") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationRoutingTemplateid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationRoutingTemplateid").setValue(true);
                    Wtf.getCmp("columncreationRoutingTemplateid").setDisabled(true);
                }
            }
            if (this.ModuleNamesArray[i].trim() == "Job Work") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationjobworkid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationjobworkid").setValue(true);
                    Wtf.getCmp("columncreationjobworkid").setDisabled(true);
                }
            }
            if (this.ModuleNamesArray[i].trim() == "Vendor Job Work Order") {
                if (this.isDeactivate) {
                    Wtf.getCmp("columncreationvendorjobworkorderid").setDisabled(false);
                } else {
                    Wtf.getCmp("columncreationvendorjobworkorderid").setValue(true);
                    Wtf.getCmp("columncreationvendorjobworkorderid").setDisabled(true);
                }
            }
        }
        if(this.isDeactivate){
            setCheckedActivatedCustomModule(this.activeModuleNames);
        }
        //    Wtf.getCmp("customcombo").setDisabled(true);
        Wtf.getCmp(id+"fieldtype_combo").setDisabled(true);
        //if(customcolumn)
        //   Wtf.getCmp(id+'lineitem').setDisabled(true);
//        Wtf.getCmp(id+"isessential").setDisabled(true);

        var combo=Wtf.getCmp(id+"fieldtype_combo");
        Wtf.getCmp("startingno_field").allowBlank = true;
        Wtf.getCmp(id+"ref_module").allowBlank = true;
//        Wtf.getCmp(id+"isessential").setValue(isessential);
        Wtf.getCmp(id+"isessential").setDisabled(true);
        Wtf.getCmp(id+'gstitem').setDisabled(true);
        Wtf.getCmp(id+"isforproject").setValue(isforproject);
        Wtf.getCmp(id+"isforproject").setDisabled(true);
        Wtf.getCmp(id+"isforeclaim").setValue(isforeclaim);
        Wtf.getCmp(id+"isforeclaim").setDisabled(true);
        Wtf.getCmp(id+"isfortask").setValue(isfortask);
        Wtf.getCmp(id+"isfortask").setDisabled(true);
        Wtf.getCmp(id+"mapWithFieldType").setValue(mapWithFieldType);
        Wtf.getCmp(id+"mapWithFieldType").setDisabled(true);
        var typeCode = combo.getValue();
        Wtf.getCmp("max_length").container.parent().dom.style.display=((typeCode=='11' || typeCode=='3' || typeCode=='4' || typeCode=='2' || typeCode=='5' || typeCode=='7' || typeCode=='12' || typeCode=='15' )?"none":"block");
        Wtf.getCmp(id+'isessential').container.parent().dom.style.display=((typeCode=='11'|| typeCode=='12')?"none":"block");
        Wtf.getCmp(id+"lineitem").container.parent().dom.style.display=((typeCode=='11' || typeCode=='12')?"none":"block");
        Wtf.getCmp("columncreationproductid").container.parent().dom.style.display=((typeCode=='11' || typeCode=='12')?"none":"block");
        Wtf.getCmp("AccountStatementid").container.parent().dom.style.display=(typeCode=='12')?"none":"block";

        Wtf.getCmp(id+"sendNotification").container.parent().dom.style.display = typeCode=='3' ? "block" : "none"
        
        if(typeCode!='1'  && typeCode!='13'){
            Wtf.getCmp("max_length").allowBlank=true;
            if(typeCode=='4'){// if drop down
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
                Wtf.getCmp(id+"customregx").allowBlank=true;
                Wtf.getCmp("max_length").allowBlank=true;
            }else if(typeCode=='2'){// if number
                Wtf.getCmp("max_length").setValue('15');
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
            }else if(typeCode=='3' || typeCode=='11'){// if date
                Wtf.getCmp("max_length").setValue('');
            }else if(typeCode=='9'){// if auto no
                Wtf.getCmp("startingno_field").allowBlank = false;
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
                Wtf.getCmp("max_length").container.parent().dom.style.display="none";
                Wtf.getCmp("max_length").setValue('');
            }else if(typeCode=='8'){// if drop down reference
                Wtf.getCmp(id+"ref_module").allowBlank = false;
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
                Wtf.getCmp("max_length").container.parent().dom.style.display="none";
                Wtf.getCmp("max_length").setValue('');
            }else if(typeCode=='7' || typeCode=='12'){
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
                Wtf.getCmp("max_length").allowBlank=true;
                Wtf.getCmp("max_length").setValue('');
            }else if(typeCode=='15'){// Rich Text Area
                Wtf.getCmp("max_length").setValue('2000');
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
            }else{
                Wtf.getCmp(id+"dropdowndata").allowBlank=true;
            }
        }else{
            Wtf.getCmp("max_length").allowBlank=false;
            //            Wtf.getCmp("max_length").setValue('');
            Wtf.getCmp(id+"dropdowndata").allowBlank=true;
        }


        var dd_textfield = Wtf.getCmp(id+"dropdowndata");
        var ref_module_dropdown = Wtf.getCmp(id+"ref_module");
        ref_moule_comboShow(ref_module_dropdown,"none");
        //        autoNoFieldShow("none",id);

        //        Wtf.getCmp(id+"addFormulae").disable();
        this.formPanel=Wtf.getCmp(id+"cstfrm").form;
        //        if(combo.getValue() == 1){
        if(combo.getValue() == 4){
            cmpid=70;
            drop_down_FieldShow(dd_textfield,"block");
            Wtf.getCmp(id+"dropdowndata").setValue(dropdowndata);
        }
        else if(combo.getValue() == 7)
        {
            cmpid=71;
            drop_down_FieldShow(dd_textfield,"block");
            Wtf.getCmp(id+"dropdowndata").setValue(dropdowndata);
        }
        else if(combo.getValue() == 12)
        {
            drop_down_FieldShow(dd_textfield,"block");
            Wtf.getCmp(id+"dropdowndata").setValue(dropdowndata);
        }
        else if(combo.getValue() == 8){
            ref_moule_comboShow(ref_module_dropdown,"block");
            drop_down_FieldShow(dd_textfield,"none");
            Wtf.getCmp(id+"dropdowndata").setValue(dropdowndata);

        // if(combo.getValue() != 3 && combo.getValue() != 5) {//DateField or TimeField
        // or Dropdown - Disable Add formula button.
        // if(this.formPanel.isValid())
        // Wtf.getCmp(id+"addFormulae").enable();
        // else
        // Wtf.getCmp(id+"addFormulae").disable();
        // }
        } else if(combo.getValue() == 9){
            ref_moule_comboShow(ref_module_dropdown,"none");
            drop_down_FieldShow(dd_textfield,"none");
            autoNoFieldShow("block",id);
            Wtf.getCmp(id+"dropdowndata").setValue(dropdowndata);
        } else {
            drop_down_FieldShow(dd_textfield,"none");
            Wtf.getCmp(id+"dropdowndata").setValue(dropdowndata);
        }
        Wtf.getCmp(id+'isforsalescommission').setValue(response.data[0].isforsalescommission);
        Wtf.getCmp(id+'isusedforknockoffdocuments').setValue(response.data[0].isForKnockOff);
        Wtf.getCmp(id+'isusedforknockoffdocuments').setDisabled(true);
        Wtf.getCmp(id+'gstitem').setValue(response.data[0].isForGST);
        Wtf.getCmp(id+"isessential").setValue(isessential);
        if(fieldtype==3 && newDefaultFieldValue!="" && newDefaultFieldValue != undefined){
            var v = new Date(newDefaultFieldValue);
            this.newDefaultValueField.setValue(v);
        }else{
            this.newDefaultValueField.setValue(newDefaultFieldValue);
        }
        Wtf.getCmp(id+'isautopopulatedefaultvalue').setValue(isautopopulatedefaultvalue);

        if (this.isDeactivate) {
            this.newDefaultValueField.setDisabled(true);
            WtfGlobal.hideFormElement(Wtf.getCmp(id+'isautopopulatedefaultvalue'));
        }
    }
}

function setDisableAllCustomModule(){
    Wtf.getCmp("columncreationinvoiceid").setDisabled(true);
    Wtf.getCmp("columncreationveninvoiceid").setDisabled(true);
    Wtf.getCmp("columncreationdebitnoteid").setDisabled(true);
    Wtf.getCmp("columncreationcreditnoteid").setDisabled(true);
    Wtf.getCmp("columncreationmakepaymentid").setDisabled(true);
    Wtf.getCmp("columncreationreceivepaymentid").setDisabled(true);
    Wtf.getCmp("columncreationproductid").setDisabled(true);
    Wtf.getCmp("columncreationgeneraletryid").setDisabled(true);
    Wtf.getCmp("columncreationsalesorderid").setDisabled(true);
    Wtf.getCmp("columncreationpurchaseorderid").setDisabled(true);
    Wtf.getCmp("columncreationvendorquotationid").setDisabled(true);
    Wtf.getCmp("columncreationcustomerquotationid").setDisabled(true);
    Wtf.getCmp("columncreationdeliveryorderid").setDisabled(true);
    Wtf.getCmp("columncreationrequestforquotationid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetsdisposalinvoiceid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetspurchaseinvoiceid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetsgoodsreceiptid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetsdeliveryorderid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetsgroupsid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetsrfqid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetsvendorquotationid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetspurchaseorderid").setDisabled(true);
    Wtf.getCmp("columncreationcustomerid").setDisabled(true);
    Wtf.getCmp("columncreationvendorid").setDisabled(true);
    Wtf.getCmp("columncreationgoodsreceiptid").setDisabled(true);
    Wtf.getCmp("columncreationsalesreturnid").setDisabled(true);
    Wtf.getCmp("columncreationpurchasereturnid").setDisabled(true);
    Wtf.getCmp("columncreationleaseorderid").setDisabled(true);
    Wtf.getCmp("columncreationlabourid").setDisabled(true);
    Wtf.getCmp("columncreationWorkCenterMasterid").setDisabled(true);
    Wtf.getCmp("columncreationMachineMasterid").setDisabled(true);
    Wtf.getCmp("columncreationWorkOrderid").setDisabled(true);
    Wtf.getCmp("columncreationjobworkid").setDisabled(true);
    Wtf.getCmp("columncreationvendorjobworkorderid").setDisabled(true);
    Wtf.getCmp("columncreationMasterContractid").setDisabled(true);
    Wtf.getCmp("columncreationRoutingTemplateid").setDisabled(true);
    Wtf.getCmp("columncreationcontractid").setDisabled(true);
    Wtf.getCmp("AccountStatementid").setDisabled(true);
    Wtf.getCmp("columncreationpurchaserequisitionid").setDisabled(true);
    Wtf.getCmp("columncreationinvoiceformid").setDisabled(true);
    Wtf.getCmp("columncreationveninvoiceformid").setDisabled(true);
    Wtf.getCmp("columncreationsalesorderformid").setDisabled(true);
    Wtf.getCmp("columncreationpurchaseorderformid").setDisabled(true);
    Wtf.getCmp("columncreationdeliveryorderformid").setDisabled(true);
    Wtf.getCmp("columncreationcustomerquotationformid").setDisabled(true);
    Wtf.getCmp("columncreationvendorquotationformid").setDisabled(true);
    Wtf.getCmp("columncreationpurchasereturnformid").setDisabled(true);
    Wtf.getCmp("columncreationsalesreturnformid").setDisabled(true);
    Wtf.getCmp("columncreationgrorderformid").setDisabled(true);
    Wtf.getCmp("columncreationserialid").setDisabled(true);
    Wtf.getCmp("columncreationinventoryid").setDisabled(true);
    Wtf.getCmp("columncreationconsignmentrequestid").setDisabled(true);
    Wtf.getCmp("columncreationconsignmentinvoiceid").setDisabled(true);
    Wtf.getCmp("columncreationconsignmentdoid").setDisabled(true);
    Wtf.getCmp("columncreationconsignmentsalesreturnid").setDisabled(true);
    Wtf.getCmp("columncreationconsignmentrequestvendorid").setDisabled(true);
    Wtf.getCmp("columncreationconsignmentpurchaseinvoiceid").setDisabled(true);
    Wtf.getCmp("columncreationconsignmentgrid").setDisabled(true);
    Wtf.getCmp("columncreationconsignmentpurchasereturnid").setDisabled(true);
    Wtf.getCmp("columncreationleasecontractid").setDisabled(true);
    Wtf.getCmp("columncreationleasequotationid").setDisabled(true);
    Wtf.getCmp("columncreationleasedoid").setDisabled(true);
    Wtf.getCmp("columncreationleasereturnid").setDisabled(true);
    Wtf.getCmp("columnCreationLeaseInvoiceid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetspurchasereturnid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetssalesreturnid").setDisabled(true);
    Wtf.getCmp("columncreationfixedassetdetailsid").setDisabled(true);
    Wtf.getCmp("columncreationstockadjustmentid").setDisabled(true);
    Wtf.getCmp("columncreationstockrequestid").setDisabled(true);
    Wtf.getCmp("columnCreationISTid").setDisabled(true);
    Wtf.getCmp("columncreationILTid").setDisabled(true);
    Wtf.getCmp("columncreationcyclecid").setDisabled(true);
    Wtf.getCmp("columncreationsecgateentryid").setDisabled(true);
    Wtf.getCmp("columncreationmultientitydimensionid").setDisabled(true);
}

function resetAllRelatedModuleFields(){
    Wtf.getCmp("columncreationinvoiceformid").setValue(false);
    Wtf.getCmp("columncreationveninvoiceformid").setValue(false);
    Wtf.getCmp("columncreationsalesorderformid").setValue(false);
    Wtf.getCmp("columncreationpurchaseorderformid").setValue(false);
    Wtf.getCmp("columncreationdeliveryorderformid").setValue(false);
    Wtf.getCmp("columncreationcustomerquotationformid").setValue(false);
    Wtf.getCmp("columncreationvendorquotationformid").setValue(false);
    Wtf.getCmp("columncreationpurchasereturnformid").setValue(false);
    Wtf.getCmp("columncreationsalesreturnformid").setValue(false);
    Wtf.getCmp("columncreationgrorderformid").setValue(false);
}

function checkifModuleCanbeactivated(id,checked,parent){
     if(checked && parent!="" && parent!=undefined){
            Wtf.getCmp(id).setValue(false);
            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.msg.cannotActivateChild")],0);
       }
}
function setCheckedActivatedCustomModule(activeModuleNames){
    for(var i=0; i< activeModuleNames.length; i++) {
        var ModuleName=activeModuleNames[i].trim();
        if(ModuleName=="Invoice/Cash Sales") {
            Wtf.getCmp("columncreationinvoiceid").setValue(true);
        }
        if(ModuleName=="Purchase Invoice/Cash Purchase") {
            Wtf.getCmp("columncreationveninvoiceid").setValue(true)
        }
        if(ModuleName=="Debit Note") {
            Wtf.getCmp("columncreationdebitnoteid").setValue(true);
        }
        if(ModuleName=="Credit Note") {
            Wtf.getCmp("columncreationcreditnoteid").setValue(true);
        }
        if(ModuleName=="Make Payment") {
            Wtf.getCmp("columncreationmakepaymentid").setValue(true);
        }
        if(ModuleName=="Receive Payment") {
            Wtf.getCmp("columncreationreceivepaymentid").setValue(true);
        }
        if(ModuleName=="Products & Services") {
            Wtf.getCmp("columncreationproductid").setValue(true);
        }
        if(ModuleName=="Journal Entry") {
            Wtf.getCmp("columncreationgeneraletryid").setValue(true);
        }
        if(ModuleName=="Sales Order") {
            Wtf.getCmp("columncreationsalesorderid").setValue(true);
        }
        if(ModuleName=="Purchase Order") {
            Wtf.getCmp("columncreationpurchaseorderid").setValue(true);
        }
        if(ModuleName=="Vendor Quotation") {
            Wtf.getCmp("columncreationvendorquotationid").setValue(true);
        }
        if(ModuleName=="Customer Quotation") {
            Wtf.getCmp("columncreationcustomerquotationid").setValue(true);
        }
        if(ModuleName=="Delivery Order") {
            Wtf.getCmp("columncreationdeliveryorderid").setValue(true);
        }
        if(ModuleName=="Request For Quotation") {
            Wtf.getCmp("columncreationrequestforquotationid").setValue(true);
        }
        if(ModuleName=="FA Disposal Invoice") {
            Wtf.getCmp("columncreationfixedassetsdisposalinvoiceid").setValue(true);
        }
        if(ModuleName=="FA Purchase Invoice") {
            Wtf.getCmp("columncreationfixedassetspurchaseinvoiceid").setValue(true);
        }
        if(ModuleName=="FA Goods Receipt") {
            Wtf.getCmp("columncreationfixedassetsgoodsreceiptid").setValue(true);
        }
        if(ModuleName=="FA Delivery Order") {
            Wtf.getCmp("columncreationfixedassetsdeliveryorderid").setValue(true);
        }
        if(ModuleName=="FA Assets Group") {
            Wtf.getCmp("columncreationfixedassetsgroupsid").setValue(true);
        }
        if(ModuleName=="FA Purchase Requisition") {
            Wtf.getCmp("columncreationfixedassetspurchaserequisitionid").setValue(true);
        }
        if(ModuleName=="FA RFQ") {
            Wtf.getCmp("columncreationfixedassetsrfqid").setValue(true);
        }
        if(ModuleName=="FA Vendor Quotation") {
            Wtf.getCmp("columncreationfixedassetsvendorquotationid").setValue(true);
        }
        if(ModuleName=="FA Purchase Order") {
            Wtf.getCmp("columncreationfixedassetspurchaseorderid").setValue(true);
        }
        if(ModuleName=="Customer") {
            Wtf.getCmp("columncreationcustomerid").setValue(true);
        }
        if(ModuleName=="Vendor") {
            Wtf.getCmp("columncreationvendorid").setValue(true);
        }
        if(ModuleName=="Goods Receipt Order") {
            Wtf.getCmp("columncreationgoodsreceiptid").setValue(true);
        }
        if(ModuleName=="Sales Return") {
            Wtf.getCmp("columncreationsalesreturnid").setValue(true);
        }
        if(ModuleName=="Purchase Return") {
            Wtf.getCmp("columncreationpurchasereturnid").setValue(true);
        }
        if(ModuleName=="Lease Order") {
            Wtf.getCmp("columncreationleaseorderid").setValue(true);
        }
        if(ModuleName=="Contract Order") {
            Wtf.getCmp("columncreationcontractid").setValue(true);
        }
        if(ModuleName=="GL Accounts") {
            Wtf.getCmp("AccountStatementid").setValue(true);
        }
        if(ModuleName=="Purchase Requisition") {
            Wtf.getCmp("columncreationpurchaserequisitionid").setValue(true);
        }
        if(ModuleName=="Consignment Request") {
            Wtf.getCmp("columncreationconsignmentrequestid").setValue(true);
        }
        if(ModuleName=="Consignment Invoice") {
            Wtf.getCmp("columncreationconsignmentinvoiceid").setValue(true);
        }
        if(ModuleName=="Consignment DeliveryOrder") {
            Wtf.getCmp("columncreationconsignmentdoid").setValue(true);
        }
        if(ModuleName=="Consignment SalesReturn") {
            Wtf.getCmp("columncreationconsignmentsalesreturnid").setValue(true);
        }
        if(ModuleName=="Consignment VendorRequest") {
            Wtf.getCmp("columncreationconsignmentrequestvendorid").setValue(true);
        }
        if(ModuleName=="Consignment GoodsReceipt") {
            Wtf.getCmp("columncreationconsignmentpurchaseinvoiceid").setValue(true);
        }
        if(ModuleName=="Consignment GoodsReceiptOrder") {
            Wtf.getCmp("columncreationconsignmentgrid").setValue(true);
        }
        if(ModuleName=="Consignment PurchaseReturn") {
            Wtf.getCmp("columncreationconsignmentpurchasereturnid").setValue(true);
        }
        if (ModuleName == "Lease Contract") {
            Wtf.getCmp("columncreationleasecontractid").setValue(true);
        }
        if (ModuleName == "Lease Quotation") {
            Wtf.getCmp("columncreationleasequotationid").setValue(true);
        }
        if (ModuleName == "Lease Delivery Order") {
            Wtf.getCmp("columncreationleasedoid").setValue(true);
        }
        if (ModuleName == "Lease Return") {
            Wtf.getCmp("columncreationleasereturnid").setValue(true);
        }
        if (ModuleName == "Lease Invoice") {
            Wtf.getCmp("columnCreationLeaseInvoiceid").setValue(true);
        }
        if (ModuleName == "FA Purchase Return") {
            Wtf.getCmp("columncreationfixedassetspurchasereturnid").setValue(true);
        }
        if (ModuleName == "FA Sales Return") {
            Wtf.getCmp("columncreationfixedassetssalesreturnid").setValue(true);
        }
        if (ModuleName == "FA Details") {
            Wtf.getCmp("columncreationfixedassetdetailsid").setValue(true);
        }
        if (ModuleName == "Stock Adjustment") {
            Wtf.getCmp("columncreationstockadjustmentid").setValue(true);
        }
        if (ModuleName == "Inventory Window") {
            Wtf.getCmp("columncreationinventoryid").setValue(true);
        }
        if (ModuleName == "Stock Request") {
            Wtf.getCmp("columncreationstockrequestid").setValue(true);
        }
        if (ModuleName == "Inter Store Transfer") {
            Wtf.getCmp("columnCreationISTid").setValue(true);
        }
        if (ModuleName == "Inter Location Transfer") {
            Wtf.getCmp("columncreationILTid").setValue(true);
        }
        if (ModuleName == "Cycle Count") {
            Wtf.getCmp("columncreationcyclecid").setValue(true);
        }
        if (ModuleName == "Labour") {
            Wtf.getCmp("columncreationlabourid").setValue(true);
        }
        if (ModuleName == "Work Center Master") {
            Wtf.getCmp("columncreationWorkCenterMasterid").setValue(true);
        }
        if (ModuleName == "Machine Master") {
            Wtf.getCmp("columncreationMachineMasterid").setValue(true);
        }
        if (ModuleName == "Work Order") {
            Wtf.getCmp("columncreationWorkOrderid").setValue(true);
        }
        if (ModuleName == "Master Contract") {
            Wtf.getCmp("columncreationMasterContractid").setValue(true);
        }
        if (ModuleName == "Routing Template") {
            Wtf.getCmp("columncreationRoutingTemplateid").setValue(true);
        }
        if (ModuleName == "Job Work") {
            Wtf.getCmp("columncreationjobworkid").setValue(true);
                }
        if (ModuleName == "Vendor Job Work Order") {
        Wtf.getCmp("columncreationvendorjobworkorderid").setValue(true);
        }
        if (ModuleName == "Security Gate Entry") {
            Wtf.getCmp("columncreationsecgateentryid").setValue(true);
        }
        if (ModuleName == WtfGlobal.getLocaleText("acc.multientitydimension.title")) {
            Wtf.getCmp("columncreationmultientitydimensionid").setValue(true);
        }
        if (ModuleName == WtfGlobal.getLocaleText("acc.jobworkout.title")) {
            Wtf.getCmp("jobworkoutorderid").setValue(true);
        }
}
}

function genFailureResponse() {
    var msg=WtfGlobal.getLocaleText("acc.common.msg1"); //"Failed to make connection with Web Server";
    if(response.msg)msg=response.msg;
    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),msg],2);
}

function ref_moule_comboShow (ref_module_dropdown,display) {
    if(display=="block"){
        ref_module_dropdown.show();
        Wtf.getCmp('customrefpanel').show();
        ref_module_dropdown.setValue("");
    }
    else {
        Wtf.getCmp('customrefpanel').hide();
    }

}

function autoNoFieldShow(display,id) {
    if(display=="block") {
        Wtf.getCmp('customautonopanel').show();
        Wtf.getCmp(id+'isessential').disable();
        Wtf.getCmp("prefix_field").setValue("");
        Wtf.getCmp("startingno_field").setValue("");
        Wtf.getCmp("suffix_field").setValue("");
    } else {
        Wtf.getCmp('customautonopanel').hide();
//        Wtf.getCmp(id+'isessential').enable();
    }
}

function drop_down_FieldShow (dd_textfield,display) {

    //    dd_textfield.setValue("");
    if(display=="block"){
        dd_textfield.show();
        Wtf.getCmp('customcombo').show();
        dd_textfield.setValue("");
    //        Wtf.getCmp(id+"dropdowndata").setValue("");
    }
    else {
        Wtf.getCmp('customcombo').hide();
    }
}

function parseStartNoToInt() {
    var startNo = Wtf.getCmp("startingno_field").getValue();
    startNo = startNo.trim() =="" ? "0": parseInt(startNo,10);
    startNo = isNaN(startNo)?"0" : startNo;
    return startNo;
}


function showHelp(compID) {
    Wtf.Ajax.requestEx({
        url: "EditHelp/getComponents.do",
        params: {
            mod : compID
        }
    }, this,
    function(res, req){
        var len=res.data.length;
        var dat=[];
        var count=0;
        for(i=0;i<len;i++) {
            if(Wtf.get(res.data[i]['compid'])!=null && Wtf.get(res.data[i]['compid']).findParent(".x-hide-display") == null) {
                dat[count] = res.data[i];
                count++;
            } else if (res.data[i]['compid']==''){
                dat[count] = res.data[i];
                count++;
            }
        }
        _helpContent = dat;
        var we = new Wtf.taskDetail();
        we.welcomeHelp();
    }, signOut);

}

function callAccountRevaluationWindow(){
    var panel = Wtf.getCmp('accountRevaluewin');
    if(!panel){
        new Wtf.account.selectAccountwin({
            closable: true,
            modal: true,
            id:'accountRevaluewin',
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 500,
            height: 350,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right'
        }).show();
    }
}
function callsetExchangeRateWindow(){
    var panel = Wtf.getCmp('setExchangeRate');
    if(!panel){
        new Wtf.account.setExchangeRate({
            closable: true,
            modal: true,
            id:'setExchangeRate',
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 450,
            height: 300,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right'
        }).show();
    }
}

function callProductExportDetails(){
    var panel=Wtf.getCmp('productExportDetailsTab');
    if(panel==null){
        panel = new Wtf.ProductExportDetails({
            title:WtfGlobal.getLocaleText("acc.ExportDetails.ExportDetails"),
            tooltip:WtfGlobal.getLocaleText("acc.ExportDetails.ExportDetails"),
            tabTip:WtfGlobal.getLocaleText("acc.ExportDetails.ExportDetails"),
            closable:true,
            layout: "fit",
            border:false,
            iconCls: 'pwnd projectTabIcon',
            id:"productExportDetailsTab"
        });
        Wtf.getCmp('as').add(panel);
    } else {
        panel.dataStore.reload(); //Reload log if already opened
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callCommonExportDetails(){
    var panel=Wtf.getCmp('commonExportDetailsTab');
    if(panel==null){
        panel = new Wtf.CommonExportDetails({
            title:"Arshad",
            tooltip:WtfGlobal.getLocaleText("acc.ExportDetails.ExportDetails"),
            tabTip:WtfGlobal.getLocaleText("acc.ExportDetails.ExportDetails"),
            closable:true,
            layout: "fit",
            border:false,
            iconCls: 'pwnd projectTabIcon',
            id:"commonExportDetailsTab"
        });
        Wtf.getCmp('as').add(panel);
    } else {
        panel.dataStore.reload(); //Reload log if already opened
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callAccountReevaluationHistoryWindow(){

    var panel = Wtf.getCmp("AccountReevaluationHistory");
    if(panel==null){
        panel = new Wtf.account.AccountReevaluationHistory({
            title:Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.reval.history"),Wtf.TAB_TITLE_LENGTH) ,//"Finance Details"
            tabTip:WtfGlobal.getLocaleText("acc.field.YoucanviewRe-evaluationHistoryfromhere"),
            id:'AccountReevaluationHistory',
            border:false,
            layout: 'fit',
            iconCls: 'accountingbase agedrecievable',
            closable: true

        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();

}

/*
 *@Params 
 *isEditToApprove : This come from the pending approval when we click on approve and need to editing for approving. this is only for Note against Invoice 
 **/
function createNote(winid, isEdit, isCN, notetype,record,gridId,isCopy,isLinkedTransaction,isEditToApprove,isCreatedFromReturnForm){
    winid=(winid==null?(isCN?"creditnotepanel":"debitnotepanel"):winid);
    var panel = Wtf.getCmp(winid);
    isLinkedTransaction = (isLinkedTransaction == null || isLinkedTransaction == undefined)?false:isLinkedTransaction;
    if(!panel){
        var tabTitle="";
        if(isCN){
            if(isCopy){
                tabTitle=WtfGlobal.getLocaleText("acc.cn.copy")+"-"+record.data.noteno; 
            } else if(isEdit){
                tabTitle=WtfGlobal.getLocaleText("acc.cn.edit")+"-"+record.data.noteno;
            } else {
                tabTitle=WtfGlobal.getLocaleText("acc.cn.generate")
            }
        } else {
            if(isCopy){
                tabTitle=WtfGlobal.getLocaleText("acc.dn.copy")+"-"+record.data.noteno;
            } else if(isEdit){
                tabTitle=WtfGlobal.getLocaleText("acc.dn.edit")+"-"+record.data.noteno;
            } else {
                tabTitle=WtfGlobal.getLocaleText("acc.dn.generate");
            }
        }
        panel=new Wtf.account.NoteAgainsInvoice({
            title:tabTitle, 
            tabTip:tabTitle,
            id: winid,
            isCustBill:false,// it will be true for billing mode but now billing mode is to remove so making it false.
            closable: true,
            isCN:isCN,
            reloadGrid:gridId,
            moduleid:isCN?Wtf.Acc_Credit_Note_ModuleId:Wtf.Acc_Debit_Note_ModuleId,
            cntype:notetype,
            isEdit:isEdit,
            isCopy:isCopy,
            readOnly:false,
            record:record,
            heplmodeid:isCN?12:13,      //helpmodeid=12 is for credit note and helpmodeid=13 is for debit note
            iconCls :isCN?'accountingbase creditnote':'accountingbase debitnote',
            autoScroll:true,
            layout: 'border',
            modeName:isCN?'autocreditmemo':'autodebitnote',
            isLinkedTransaction:isLinkedTransaction,
            isEditToApprove : isEditToApprove,
            isCreatedFromReturnForm:isCreatedFromReturnForm
        });
         Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function getCreateNewButton(consolidateFlag,scope,tooltip,reportbtnshwFlag)
{
    this.newTabButton=new Wtf.Toolbar.Button({
        text:WtfGlobal.getLocaleText("acc.create.title"),
        scope: scope,
        disabled :false,
        hidden:consolidateFlag || reportbtnshwFlag,
        tooltip:tooltip,
        iconCls :getButtonIconCls(Wtf.etype.add)
    });
    return this.newTabButton;
}


function showActiveDateRange(){
    var p = Wtf.getCmp("activedaterangelinkforaccounting");
    if(!p){
        new Wtf.activedaterangewin().show();
    }
}

function addExchangeRate(rec,transactiondate,superthis){
    var p = Wtf.getCmp("addexchangerateforcurrency");
    if(!p){
        new Wtf.AddExchangeRateWindow({
            id:'addexchangerateforcurrency',
            record:rec,
            superthis:superthis,
            transactiondate:transactiondate
        }).show();
    }
}

function downloadSampleFie(storeageName,fileName,ModuleName){
    
    var withoutBOM=CompanyPreferenceChecks.withoutBOMCheck();
    
    Wtf.get('downloadframe').dom.src = "ACCExportRecord/downloadSampleFile.do?storagename="+storeageName+"&filename="+fileName+"&filetype=csv"+"&moduleName="+ModuleName+"&withoutBOM="+withoutBOM;
}

function downloadSampleFileType(storeageName,fileName,type,ModuleName){
    
    var withoutBOM=CompanyPreferenceChecks.withoutBOMCheck();
    
    Wtf.get('downloadframe').dom.src = "ACCExportRecord/downloadSampleFile.do?storagename="+storeageName+"&filename="+fileName+"&filetype="+type+"&moduleName="+ModuleName+"&withoutBOM="+withoutBOM;
}
function callDemoTransactionsImportWin(){
    var type = "csv";
    var moduleName = "Just Commodity Transactions";
    var fileName = "sample_just_commodity_transactions_v1.csv";
    var storeageName = "download_just_commodity_transactions_v1.csv";

    var downloadSampleFileLink = new Wtf.XTemplate(
        "<div> &nbsp;</div>",
        '<tpl>',
        WtfGlobal.getLocaleText("acc.field.DownloadSampleFile")+" <a class='tbar-link-text' href='#' onClick='javascript: downloadSampleFileType(\""+storeageName+"\",\""+fileName+"\",\""+type+"\",\""+moduleName+"\")'wtf:qtip=''>"+WtfGlobal.getLocaleText("acc.field.SampleFile")+"</a>",
        '</tpl>'
    );

    var sampleLinkPanel = new Wtf.Panel({
        border: false,
        html: downloadSampleFileLink.apply()
    });
    
    var titleMsg = WtfGlobal.getLocaleText("acc.field.ImportJustCommodityTransactions");
    var delimiterStore = new Wtf.data.SimpleStore({
        fields: ['delimiterid','delimiter'],
        data : [
        [0,'Comma']
        ]
    });

    this.conowner= new Wtf.form.ComboBox({
        fieldLabel:WtfGlobal.getLocaleText("acc.rem.88")+" ",  //'Delimiter ',
        hiddenName:'Delimiter',
        store:delimiterStore,
        valueField:'delimiter',
        displayField:'delimiter',
        mode: 'local',
        triggerAction: 'all',
        emptyText:WtfGlobal.getLocaleText("acc.rem.89"),  //'--Select delimiter--',
        typeAhead:true,
        selectOnFocus:true,
        allowBlank:false,
        width: 200,
        itemCls : (this.typeXLSFile)?"hidden-from-item":"",
        hidden: this.typeXLSFile,
        hideLabel: this.typeXLSFile,
        forceSelection: true,
        value:'Comma'
    });

    this.hiddenDate= new Wtf.form.DateField({
        fieldLabel:"",
        format:WtfGlobal.getOnlyDateFormat(),
        name: 'importDate',
        width : 240,
        hidden:true,
        hideLabel:true
    //            hiddenname:'importDate'
    });

    this.hiddenDate.setValue(Wtf.serverDate);

    this.importForm = new Wtf.form.FormPanel({
        waitMsgTarget: true,
        method: 'POST',
        border: false,
        region: 'center',
        bodyStyle: "background: transparent;",
        style: "background: transparent;padding:20px;",
        labelWidth: 100,
        frame: false,
        fileUpload: true,
        items: [{
            xtype: 'textfield',
            fieldLabel: WtfGlobal.getLocaleText("acc.field.SelectFile*"),
            name: "importTransactionsFile",
            inputType: 'file',
            msgTarget: 'under',
            allowBlank:false,
            id: "importTransactionsFileID"
        },this.conowner,
        this.hiddenDate,
        sampleLinkPanel
        ]
    });


    this.importTransactionsWindow = new Wtf.Window({
        modal: true,
        iconCls :'importIcon',
        title: titleMsg,
        bodyStyle: 'padding:5px;',
        buttonAlign: 'right',
        width: 500,
        scope: this,
        items: [{
            region: 'north',
            height: 90,
            border: false,
            bodyStyle: 'background:white;border-bottom:1px solid #bfbfbf;',
            html: getTopHtml(titleMsg, "<ul style='list-style-type:disc;padding-left:15px;'><li>"+ WtfGlobal.getLocaleText("acc.rem.143")+"</li><li><b>"+WtfGlobal.getLocaleText("acc.field.Note")+"</b>: "+WtfGlobal.getLocaleText("acc.rem.92")+"</li></ul>","../../images/import.png", true, "5px 0px 0px 0px", "7px 0px 0px 10px")
        }, {
            region: 'center',
            border: false,
            bodyStyle: 'background:#f1f1f1;font-size:10px;',
            autoScroll: true,
            items: this.importForm
        }],
        buttons: [{
            text: WtfGlobal.getLocaleText("acc.invoiceList.bt.upload"),
            scope: this,
            handler: function(button) {
                var message = WtfGlobal.getLocaleText("acc.upload.msg");
                Wtf.MessageBox.confirm(WtfGlobal.getLocaleText("acc.je.confirm"),message,function(btn){
                    if(btn!="yes") {
                        this.importTransactionsWindow.close();
                        return;
                    }
                    var value = Wtf.getCmp('importTransactionsFileID').getValue();
                    var extension =value.substr(value.lastIndexOf(".")+1);
                    var patt1 = new RegExp("csv","i");
                    if (this.importForm.form.isValid() && value != '') {
                        if(patt1.test(extension)) {

                            var importDate = WtfGlobal.convertToGenericDate(this.hiddenDate.getValue());
                                                        var importUrl = "ACCInvoiceCMN/importCommodityTransactions.do?";//for comodity transactions
//                            var importUrl = "ACCInvoiceCMN/importInvoiceTransactions.do?";// for normal invoices HCIS ERP-3169

                            this.importForm.getForm().submit({
                                url: importUrl+"&do=getMapCSV&delimiterType=Comma&importDate="+importDate,
                                waitMsg :WtfGlobal.getLocaleText("acc.rem.167"),  //'Uploading File...',
                                success: function(req,res) {
                                    if(res.result.success){
                                        showImportSummary(false, res.result);
                                        WtfGlobal.setAjaxTimeOut();
                                        this.importTransactionsWindow.close();
                                    }else { // Failure
                                        WtfImportMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), res.msg], 1);
                                    }
                                },
                                scope: this,
                                failure: function(req,response) {
                                    var resultObj = eval('('+response.response.responseText+')');
                                    WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),resultObj.msg],2);
                                }
                            })
                        } else {
                            WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.rem.84")],2);
                        }
                    } else {
                        return false;
                    }
                },this);
            }
        }, {
            text: WtfGlobal.getLocaleText("acc.invoiceList.bt.cancel"),
            scope: this,
            handler: function() {
                this.importTransactionsWindow.close();
            }
        }]
    });

    this.importTransactionsWindow.show();

}

function callGstCurrencyRateWin(compid,transactionCurrency,compObj,gstCurrencyRateVal, onSaveCNDNOverchargeFlag){
    this.gstForm = new Wtf.form.FormPanel({
        waitMsgTarget: true,
        method: 'POST',
        border: false,
        region: 'center',
        bodyStyle: "background: transparent;",
        style: "background: transparent;padding:20px;margin-left:11%",
        labelWidth: 140,
        frame: false,
        fileUpload: true,
        items: [this.currencyrate = new Wtf.form.NumberField({
            fieldLabel: "1 "+transactionCurrency+" = ",
            name: 'currencyrate',
            decimalPrecision:10,
            id:"currencyrate"+compid,
            width : 140,
            maxLength: 255,
            scope: this,
            allowNegative:false,
            value:gstCurrencyRateVal!=undefined?gstCurrencyRateVal:0.0,
            validator: function(val) {
                if (val!=0) {
                    return true;
                } else {
                    return false;
                }
            }
        })]
    });

    this.gstCurrencyRateWindow = new Wtf.Window({
        modal: true,
        //        iconCls :'importIcon',
        title: "GST Currency Rate",
        bodyStyle: 'padding:5px;',
        buttonAlign: 'right',
        width: 500,
        scope: this,
        items: [{
            region: 'north',
            height: 150,
            border: false,
            bodyStyle: 'background:white;border-bottom:1px solid #bfbfbf;',
            html: getTopHtml("GST Currency Rate", "<ul style='list-style-type:disc;padding-left:15px;'><li><b>Note</b>:"+WtfGlobal.getLocaleText("acc.gstCurrencyRateWindow.note")+"</li></ul>","../../images/accounting_image/currency-exchange.jpg", true, "5px 0px 0px 0px", "7px 0px 0px 10px")
        },{
            region: 'center',
            border: false,
            bodyStyle: 'background:#f1f1f1;font-size:10px;',
            autoScroll: true,
            items: this.gstForm
        }],
        buttons: [{
            text: WtfGlobal.getLocaleText("Save"),
            scope: this,
            handler: function(button) {
                var value = this.currencyrate.getValue();
                if (this.gstForm.form.isValid() && value != '') {
                    if(compObj!= undefined){
                        compObj.record.set("gstCurrencyRate",value);
                    }else{
                        Wtf.getCmp(compid).gstCurrencyRate=value;
                    }
                    this.gstCurrencyRateWindow.close();
                } else {
                    return false;
                }
                /*
                 * onSaveFlag: GST Currency rate window called on save button for CN/DN Undercharge and Overcharge
                 * Proceed execution of save function after clicking on save button of window.
                 */
                if (onSaveCNDNOverchargeFlag != undefined && onSaveCNDNOverchargeFlag && compid != undefined && compid != '' && Wtf.getCmp(compid)!=undefined) {
                     Wtf.getCmp(compid).validationBeforeSave();
                }
            }
        }, {
            text: WtfGlobal.getLocaleText("acc.invoiceList.bt.cancel"),
            scope: this,
            handler: function() {
                this.gstCurrencyRateWindow.close();
            }
        }]
    });
    this.gstCurrencyRateWindow.show();
}

function callOpeningOrderForm(isCustomer){

    if(Wtf.getCmp('createTransactionFormId')){
        Wtf.getCmp('createTransactionFormId').close();
    }

    if(Wtf.getCmp('openBalWinId')){
        Wtf.getCmp('openBalWinId').close();
    }

    var isOpeningBalanceOrder = true;
    var isEdit = false;
    var rec = null;
    var winid = null;
    if(isCustomer == "true"){
        var copyInv = false;
        var templateId = null;
        var isViewTemplate = false;
        var isSOfromPO = false;

        callSalesOrder(isEdit,rec,winid, copyInv,templateId,isViewTemplate,isSOfromPO,isOpeningBalanceOrder);
    }else{
        callPurchaseOrder(isEdit,rec,winid,isOpeningBalanceOrder);
    }
}

function callOpeningBalaneWindow(rec, isCustomer){
    var openingBalenceWindow = new Wtf.account.openingBalanceWindow({
        title:WtfGlobal.getLocaleText("acc.field.OpeningBalances"),
        layout:'border',
        accRec:rec,
        id:'openBalWinId',
        resizable:false,
        iconCls :getButtonIconCls(Wtf.etype.deskera),
        modal:true,
        isCustomer:isCustomer,
        height:600,
        width:700
    });
    openingBalenceWindow.show();
}


function callCustomizeViewWindow(moduleId){
    var customizeViewWin=new Wtf.customizeView({
        moduleid:moduleId,
        isForFormFields:true,
        isForLineFields:true,
        parentHelpModeId:null,
        parentId:null
    });
    customizeViewWin.show();
}

function callMobileFieldCustomizeViewWindow(type,moduleid){
    var customizeViewWin=new Wtf.mobileCustomizeView({
        type:type,
        moduleid:moduleid
    });
    customizeViewWin.show();
}

function callMalasianGSTWindow(tabtype,searchStr, filterAppend){
    var GSTTapReturnFilePanel;
    var title;
    if(tabtype!=undefined && tabtype=='tapfile'){
        title=WtfGlobal.getLocaleText("acc.tapfile.title");
    }else if(tabtype!=undefined && tabtype=='auditfile'){
        title=WtfGlobal.getLocaleText("acc.auditfile.title");
    }else if(tabtype!=undefined && tabtype=='tapreturnfile'){
        title=WtfGlobal.getLocaleText("acc.returntapfile.title");
    }
    GSTTapReturnFilePanel = Wtf.getCmp(tabtype);
    if(!GSTTapReturnFilePanel || GSTTapReturnFilePanel == null){
        var malasianGstForm5 = new Wtf.MalasianGSTTab({
            id:tabtype,
            border: false,
            layout: 'fit',
            iconCls: 'accountingbase agedpayable',
            closable:true,
            title:Wtf.util.Format.ellipsis(title,Wtf.TAB_TITLE_LENGTH) ,
            tabTip:title,
            tabtype:tabtype,
            textVal:'Malasian Gst',
            searchJson:searchStr,
            filterAppend:filterAppend
        });
        Wtf.getCmp('as').add(malasianGstForm5);
        Wtf.getCmp('as').setActiveTab(malasianGstForm5);
        showAdvanceSearch(malasianGstForm5, searchStr, filterAppend);
    }else{
        Wtf.getCmp('as').setActiveTab(GSTTapReturnFilePanel);
        showAdvanceSearch(GSTTapReturnFilePanel, searchStr, filterAppend);
    }
    Wtf.getCmp('as').doLayout();
}

function callProductImportWin(isPriceListVolumeDiscountImport, isJournalEntryImport, isRefundJournalEntryImport, typeXLSFile) {
    if(Wtf.getCmp('importTransactionJEwindow')==undefined){
            callProductImportWindow(isPriceListVolumeDiscountImport, isJournalEntryImport, isRefundJournalEntryImport, typeXLSFile);
    }
}
function callProductImportWindow(isPriceListVolumeDiscountImport, isJournalEntryImport, isRefundJournalEntryImport, typeXLSFile) {
    var type = "";
    if (typeXLSFile) {
        type = "xls";
    } else {
        type = "csv";
    }

    var storeageName = "";
    var ModuleName = "";
    var fileName = "";
    if (isPriceListVolumeDiscountImport) {
        ModuleName = "Price List Volume Discount";
        fileName = 'sample_price_list_volume_discount';
        storeageName = 'download_sample_price_list_volume_discount.csv';
    } else if (isJournalEntryImport) {
        ModuleName = 'Journal Entry Import';
        fileName = 'sample_transaction_journal_entry';
        if (typeXLSFile) {
            storeageName = 'download_sample_transaction_journal_entry.xls';
        } else {
            storeageName = 'download_sample_transaction_journal_entry.csv';
        }
    } else if (isRefundJournalEntryImport) {
        ModuleName = 'Refund Journal Entry Import';
        fileName = 'sample_transaction_refund_journal_entry';
        storeageName = 'download_sample_transaction_refund_journal_entry.xls';
    }

    var downloadSampleFileLink=new Wtf.XTemplate(
        "<div> &nbsp;</div>",
        '<tpl>',
            WtfGlobal.getLocaleText("acc.field.DownloadSampleFile")+" <a class='tbar-link-text' href='#' onClick='javascript: downloadSampleFileType(\""+storeageName+"\",\""+fileName+"\",\""+type+"\",\""+ModuleName+"\")'wtf:qtip=''>"+WtfGlobal.getLocaleText("acc.field.SampleFile")+"</a>",
        '</tpl>'
    );

    var sampleLinkPanel = new Wtf.Panel({
        border:false,
        html:downloadSampleFileLink.apply()
    })

    var titleMsg = "";
    if (isPriceListVolumeDiscountImport) {
        titleMsg = WtfGlobal.getLocaleText("acc.field.priceListVolumeDiscount")
    } else if (isJournalEntryImport) {
        titleMsg = WtfGlobal.getLocaleText("acc.je.tabTitle");
    } else if (isRefundJournalEntryImport) {
        titleMsg = WtfGlobal.getLocaleText("acc.field.RefundJournalEntry");
    }

    var delimiterStore = new Wtf.data.SimpleStore({
        fields: ['delimiterid','delimiter'],
        data : [
        [0,'Comma']
        ]
    });
    this.conowner= new Wtf.form.ComboBox({
        fieldLabel:WtfGlobal.getLocaleText("acc.rem.88")+" ",  //'Delimiter ',
        hiddenName:'Delimiter',
        store:delimiterStore,
        valueField:'delimiter',
        displayField:'delimiter',
        mode: 'local',
        triggerAction: 'all',
        emptyText:WtfGlobal.getLocaleText("acc.rem.89"),  //'--Select delimiter--',
        typeAhead:true,
        selectOnFocus:true,
        allowBlank:false,
        width: 200,
        itemCls: (typeXLSFile) ? "hidden-from-item" : "",
        hidden: typeXLSFile,
        hideLabel: typeXLSFile,
        forceSelection: true,
        value:'Comma'
    });

    this.dfRec = Wtf.data.Record.create ([
        {name: 'formatid'},
        {name: 'name'}
    ]);

    this.dfStore=new Wtf.data.Store({
        url:"kwlCommonTables/getAllDateFormats.do",
        baseParams:{
            mode:32
        },
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        },this.dfRec)
    });
    this.dfStore.load();
    this.dfStore.on('load',function(){
        if(this.dfStore.getCount()>0){
            this.datePreference.setValue("2"); // Default for YYYY-MM-DD
        }
    },this);

    this.datePreference= new Wtf.form.ComboBox({
        fieldLabel:WtfGlobal.getLocaleText("acc.import.df"),  //'Date Format',
        hiddenName:'dateFormat',
        store:this.dfStore,
        valueField:'formatid',
        displayField:'name',
        mode: 'local',
        triggerAction: 'all',
        width: 200,
        itemCls: (typeXLSFile) ? "hidden-from-item" : "",
        hidden: typeXLSFile,
        hideLabel: typeXLSFile,
        forceSelection: true
    });

    this.mapAccBttn = new Wtf.Button({
        text: WtfGlobal.getLocaleText("acc.MapAccounts"), // 'Map Accounts',
        tooltip: WtfGlobal.getLocaleText("acc.MapAccounts"), // 'Map Accounts',
        scope: this
    });

    var saleAccID = "", commissionAccID = "", commissionGSTAccID = "", paymentGatewayChargeAccID = "", amountToSellerAccID = "";

    this.mapAccBttn.on('click',function() {
        this.accRec = Wtf.data.Record.create([
            {name: 'accountname', mapping: 'accname'},
            {name: 'accountid', mapping: 'accid'},
            {name: 'acccode'},
            {name: 'accountpersontype'},
            {name: 'mappedaccountid'},
            {name: 'masterTypeValue'},
            {name: 'groupname'}
        ]);

        var baseparam = {
            mode: 2,
            deleted: false,
            nondeleted: true,
            ignoreAssets: true,
            ignoreTaggedAccounts: true
        };
        baseparam.controlAccounts = true;

        this.accountStore = new Wtf.data.Store({
            url: "ACCAccountCMN/getAccountsForCombo.do",
            baseParams: baseparam,
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },this.accRec)
        });
        this.accountStore.load();

        this.saleAccount = new Wtf.form.FnComboBox({
            fieldLabel: WtfGlobal.getLocaleText("acc.invReport.sale"), // "Sale",
            hiddenName: 'accountid',
            store: this.accountStore,
            valueField: 'accountid',
            mode: 'local',
            displayField: 'accountname',
            extraComparisionField: 'acccode', // type ahead search on acccode as well.
            selectOnFocus: true,
            scope: this,
            forceSelection: true,
            triggerAction: 'all',
            allowBlank: false
        });

        this.commissionAccount = new Wtf.form.FnComboBox({
            fieldLabel: WtfGlobal.getLocaleText("acc.field.commission"), // "Commission",
            hiddenName: 'accountid',
            store: this.accountStore,
            valueField: 'accountid',
            mode: 'local',
            displayField: 'accountname',
            extraComparisionField: 'acccode', // type ahead search on acccode as well.
            selectOnFocus: true,
            scope: this,
            forceSelection: true,
            triggerAction: 'all',
            allowBlank: false
        });

        this.commissionGSTAccount = new Wtf.form.FnComboBox({
            fieldLabel: WtfGlobal.getLocaleText("acc.field.commissionGST"), // "Commission GST";
            hiddenName: 'accountid',
            store: this.accountStore,
            valueField: 'accountid',
            mode: 'local',
            displayField: 'accountname',
            extraComparisionField: 'acccode', // type ahead search on acccode as well.
            selectOnFocus: true,
            scope: this,
            forceSelection: true,
            triggerAction: 'all',
            allowBlank: false
        });

        this.paymentGatewayChargeAccount = new Wtf.form.FnComboBox({
            fieldLabel: WtfGlobal.getLocaleText("acc.field.paymentGatewayCharge"), // "Payment Gateway Charge",
            hiddenName: 'accountid',
            store: this.accountStore,
            valueField: 'accountid',
            mode: 'local',
            displayField: 'accountname',
            extraComparisionField: 'acccode', // type ahead search on acccode as well.
            selectOnFocus: true,
            scope: this,
            forceSelection: true,
            triggerAction: 'all',
            allowBlank: false
        });

        this.amountToSellerAccount = new Wtf.form.FnComboBox({
            fieldLabel: WtfGlobal.getLocaleText("acc.field.amountToSeller"), // "Amount to Seller",
            hiddenName: 'accountid',
            store: this.accountStore,
            valueField: 'accountid',
            mode: 'local',
            displayField: 'accountname',
            extraComparisionField: 'acccode', // type ahead search on acccode as well.
            selectOnFocus: true,
            scope: this,
            forceSelection: true,
            triggerAction: 'all',
            allowBlank: false
        });

        this.accountStore.on('load', function() {
            if (saleAccID != "") {
                this.saleAccount.setValue(saleAccID);
            }
            if (commissionAccID != "") {
                this.commissionAccount.setValue(commissionAccID);
            }
            if (commissionGSTAccID != "") {
                this.commissionGSTAccount.setValue(commissionGSTAccID);
            }
            if (paymentGatewayChargeAccID != "") {
                this.paymentGatewayChargeAccount.setValue(paymentGatewayChargeAccID);
            }
            if (amountToSellerAccID != "") {
                this.amountToSellerAccount.setValue(amountToSellerAccID);
            }
        }, this);

        this.mapAccWin = new Wtf.Window({
            height: 300,
            width: 500,
            maxLength: 1000,
            title: WtfGlobal.getLocaleText("acc.MapAccounts"),
            bodyStyle: 'padding:5px;background-color:#f1f1f1;',
            autoScroll: true,
            allowBlank: false,
            layout: 'border',
            iconCls: getButtonIconCls(Wtf.etype.deskera),
            items: [
            {
                region: 'north',
                border: false,
                height: 70,
                bodyStyle: 'background-color:#ffffff;border-bottom:1px solid #bfbfbf;',
                html: getTopHtml(WtfGlobal.getLocaleText("acc.MapAccounts"), WtfGlobal.getLocaleText("acc.MapAccounts"), "../../images/accounting_image/Chart-of-Accounts.gif", true, "10px 0 0 5px", "7px 0px 0px 10px")
            },{
                region: 'center',
                border: false,
                layout: 'form',
                bodyStyle: 'padding:5px;',
                labelWidth: 175,
                items: [this.saleAccount, this.commissionAccount, this.commissionGSTAccount, this.paymentGatewayChargeAccount, this.amountToSellerAccount]
            }],
            modal: true,
            buttons: [
            {
                text: WtfGlobal.getLocaleText("acc.common.saveBtn"),
                scope: this,
                handler: function() {
                    saleAccID = this.saleAccount.getValue();
                    commissionAccID = this.commissionAccount.getValue();
                    commissionGSTAccID = this.commissionGSTAccount.getValue();
                    paymentGatewayChargeAccID = this.paymentGatewayChargeAccount.getValue();
                    amountToSellerAccID = this.amountToSellerAccount.getValue();

                    if (!this.saleAccount.isValid() || !this.commissionAccount.isValid() || !this.commissionGSTAccount.isValid() || !this.paymentGatewayChargeAccount.isValid() || !this.amountToSellerAccount.isValid()) {
                        if (!this.saleAccount.isValid()) {
                            this.saleAccount.markInvalid();
                        }
                        if (!this.commissionAccount.isValid()) {
                            this.commissionAccount.markInvalid();
                        }
                        if (!this.commissionGSTAccount.isValid()) {
                            this.commissionGSTAccount.markInvalid();
                        }
                        if (!this.paymentGatewayChargeAccount.isValid()) {
                            this.paymentGatewayChargeAccount.markInvalid();
                        }
                        if (!this.amountToSellerAccount.isValid()) {
                            this.amountToSellerAccount.markInvalid();
                        }
                    } else {
                        this.mapAccWin.close();
                    }
                }
            },{
                text: WtfGlobal.getLocaleText("acc.common.cancelBtn"),
                scope: this,
                handler: function() {
                    this.mapAccWin.close();
                }
            }
            ]
        });

        this.mapAccWin.show();
    },this);

    var itemArr = [];

    itemArr.push({
        xtype: 'textfield',
        fieldLabel: WtfGlobal.getLocaleText("acc.field.SelectFile*"),
        name: "importTransactionsFile",
        inputType: 'file',
        //        msgTarget: 'under',
        allowBlank:false,
        id: "importTransactionsFileID"
    });

    itemArr.push(this.conowner,this.datePreference);

    if (isJournalEntryImport) {
        itemArr.push(this.mapAccBttn);
    }

    itemArr.push(sampleLinkPanel);

    this.importForm = new Wtf.form.FormPanel({
        waitMsgTarget: true,
        method: 'POST',
        border: false,
        region: 'center',
        bodyStyle: "background: transparent;",
        style: "background: transparent;padding:20px;",
        labelWidth: 100,
        frame: false,
        fileUpload: true,
        items: itemArr
    });
    
    this.importTransactionsWindow = new Wtf.Window({
        modal: true,
        iconCls :'importIcon',
        title: WtfGlobal.getLocaleText("acc.common.import") + " " + titleMsg,
        bodyStyle: 'padding:5px;',
        id: 'importTransactionJEwindow',
        buttonAlign: 'right',
        width: 500,
        scope: this,
        items: [{
            region: 'north',
            height: 100,
            border: false,
            bodyStyle: 'background:white;border-bottom:1px solid #bfbfbf;',
            html: getTopHtml("Import " + titleMsg, "<ul style='list-style-type:disc;padding-left:15px;'><li>" + (typeXLSFile ? WtfGlobal.getLocaleText("acc.rem.142") : WtfGlobal.getLocaleText("acc.rem.143")) + "</li><li><b>"+WtfGlobal.getLocaleText("acc.field.Note")+"</b>: " + WtfGlobal.getLocaleText("acc.rem.92") + "</li></ul>","../../images/import.png", true, "5px 0px 0px 0px", "7px 0px 0px 10px")
        }, {
            region: 'center',
            border: false,
            bodyStyle: 'background:#f1f1f1;font-size:10px;',
            autoScroll: true,
            items: this.importForm
        }],
        buttons: [{
            text: WtfGlobal.getLocaleText("acc.invoiceList.bt.upload"),
            id : 'uploadBtnID',
            scope: this,
            handler: function(button) {
                var value = Wtf.getCmp('importTransactionsFileID').getValue();
                var extension =value.substr(value.lastIndexOf(".")+1);
                var patt1 = (typeXLSFile) ? new RegExp("xls","i") : new RegExp("csv","i");
                if (this.importForm.form.isValid() && value != '') {
                    if (isJournalEntryImport && (saleAccID == "" || commissionAccID == "" || commissionGSTAccID == "" || paymentGatewayChargeAccID == "" || amountToSellerAccID == "")) {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.pleaseMapTheAccounts")],2);
                        return false;
                    }
                    Wtf.getCmp('uploadBtnID').disable();
                    if(patt1.test(extension)) {

                        var importUrl = "";
                        if (isPriceListVolumeDiscountImport) {
                            importUrl = "ACCProduct/importPriceListVolumeDiscount.do?";
                        } else if (isJournalEntryImport) {
                            importUrl = "ACCJournalCMN/importjournalEntry.do?&saleAccID="+saleAccID+"&commissionAccID="+commissionAccID+"&commissionGSTAccID="+commissionGSTAccID+"&paymentGatewayChargeAccID="+paymentGatewayChargeAccID+"&amountToSellerAccID="+amountToSellerAccID;
                        } else if (isRefundJournalEntryImport) {
                            importUrl = "ACCJournalCMN/importjournalEntry.do?&isRefundJournalEntryImport="+isRefundJournalEntryImport;
                        }

                        this.importForm.getForm().submit({
                            url: importUrl + (typeXLSFile ? "&do=getMapXLS" : "&do=getMapCSV") + "&delimiterType=Comma&dateFormat="+this.datePreference.getValue(),
                            waitMsg :WtfGlobal.getLocaleText("acc.rem.167"),  //'Uploading File...',
                            success: function(req,res) {
                                if(res.result.success){
                                    Wtf.getCmp('uploadBtnID').enable();
                                    showImportSummary(false, res.result);

                                    if (isJournalEntryImport || isRefundJournalEntryImport) {
                                        if (Wtf.getCmp('JournalEntryDetails') != undefined && Wtf.getCmp('JournalEntryDetails').Store != undefined) { // WtfGlobal.getLocaleText("acc.je.tabTitle")
                                            Wtf.getCmp('JournalEntryDetails').Store.reload();
                                        }
                                    } else if (!isPriceListVolumeDiscountImport) {
                                        this.productStore.reload();
                                    }

                                    WtfGlobal.resetAjaxTimeOut();
                                    this.importTransactionsWindow.close();
                                }else { // Failure
                                    WtfImportMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), res.msg], 1);
                                }
                            },
                            scope: this,
                            failure: function(req,response) {
                                Wtf.getCmp('uploadBtnID').enable();
                                var resultObj = eval('('+response.response.responseText+')');
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),resultObj.msg],2);
                            }
                        })
                    } else {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.rem.84")],2);
                        Wtf.getCmp('uploadBtnID').enable();
                    }
                } else {
                    return false;
                }
            }
        }, {
            text: WtfGlobal.getLocaleText("acc.common.cancelBtn"),
            scope: this,
            handler: function() {
                this.importTransactionsWindow.close();
            }
        }]
    });

    this.importTransactionsWindow.show();
}

function callSettingsImportWin(storeageName,fileName,titleMsg,importUrl,showdateformater,ModuleName) {
    if(Wtf.getCmp('SettingsImportWindow')==undefined){
            callSettingsImportWindow(storeageName,fileName,titleMsg,importUrl,showdateformater,ModuleName);
    }
}
function callSettingsImportWindow(storeageName,fileName,titleMsg,importUrl,showdateformater,ModuleName) {

    var downloadSampleFileLink=new Wtf.XTemplate(
        "<div> &nbsp;</div>",  //Currency:
        '<tpl>',
        WtfGlobal.getLocaleText("acc.field.DownloadSampleFile")+" <a class='tbar-link-text' href='#' onClick='javascript: downloadSampleFie(\""+storeageName+"\",\""+fileName+"\",\""+ModuleName+"\")'wtf:qtip=''>"+WtfGlobal.getLocaleText("acc.field.SampleFile")+"</a>",
        '</tpl>'
        );

    var sampleLinkPanel = new Wtf.Panel({
        border:false,
        html:downloadSampleFileLink.apply()
    })

    var delimiterStore = new Wtf.data.SimpleStore({
        fields: ['delimiterid','delimiter'],
        data : [
        [0,'Comma']
        ]
    });
    this.conowner= new Wtf.form.ComboBox({
        fieldLabel:WtfGlobal.getLocaleText("acc.rem.88")+" ",  //'Delimiter ',
        hiddenName:'Delimiter',
        store:delimiterStore,
        valueField:'delimiter',
        displayField:'delimiter',
        mode: 'local',
        triggerAction: 'all',
        emptyText:WtfGlobal.getLocaleText("acc.rem.89"),  //'--Select delimiter--',
        typeAhead:true,
        selectOnFocus:true,
        allowBlank:false,
        width: 200,
        itemCls : (this.typeXLSFile)?"hidden-from-item":"",
        hidden: this.typeXLSFile,
        hideLabel: this.typeXLSFile,
        forceSelection: true,
        value:'Comma'
    });

    this.dfRec = Wtf.data.Record.create ([
    {
        name:'formatid'
    },

    {
        name:'name'
    }
    ]);

    this.dfStore=new Wtf.data.Store({
        url:"kwlCommonTables/getAllDateFormats.do",
        baseParams:{
            mode:32
        },
        reader: new Wtf.data.KwlJsonReader({
            root: "data"
        },this.dfRec)
    });
    this.dfStore.load();
    this.dfStore.on('load',function(){
        if(this.dfStore.getCount()>0){
            this.datePreference.setValue("2"); // Default for dd/MM/yy
        }
    },this);

    this.datePreference= new Wtf.form.ComboBox({
        fieldLabel:WtfGlobal.getLocaleText("acc.import.df"),  //'Date Format',
        hiddenName:'dateFormat',
        store:this.dfStore,
        valueField:'formatid',
        displayField:'name',
        mode: 'local',
        triggerAction: 'all',
        width: 200,
        itemCls : (this.typeXLSFile)?"hidden-from-item":"",
        hidden: !showdateformater,
        hideLabel:!showdateformater,
        forceSelection: true
    });

    this.importForm = new Wtf.form.FormPanel({
        waitMsgTarget: true,
        method: 'POST',
        border: false,
        region: 'center',
        bodyStyle: "background: transparent;",
        style: "background: transparent;padding:20px;",
        labelWidth: 100,
        frame: false,
        fileUpload: true,
        items: [{
            xtype: 'textfield',
            fieldLabel: WtfGlobal.getLocaleText("acc.field.SelectFile*"),
            name: "importTransactionsFile",
            inputType: 'file',
            //            msgTarget: 'under',
            allowBlank:false,
            id: "importTransactionsFileID"
        },this.conowner,this.datePreference,sampleLinkPanel
        ]
    });
    this.importTransactionsWindow = new Wtf.Window({
        modal: true,
        iconCls :'importIcon',
        id:'SettingsImportWindow',
        title: titleMsg,//WtfGlobal.getLocaleText("acc.common.import")+titleMsg
        bodyStyle: 'padding:5px;',
        buttonAlign: 'right',
        width: 500,
        scope: this,
        items: [{
            region: 'north',
            height: 90,
            border: false,
            bodyStyle: 'background:white;border-bottom:1px solid #bfbfbf;',
            html: getTopHtml(titleMsg, "<ul style='list-style-type:disc;padding-left:15px;'><li>"+ WtfGlobal.getLocaleText("acc.rem.143")+"</li><li><b>"+WtfGlobal.getLocaleText("acc.field.Note")+"</b>: "+WtfGlobal.getLocaleText("acc.rem.92")+"</li></ul>","../../images/import.png", true, "5px 0px 0px 0px", "7px 0px 0px 10px")
        }, {
            region: 'center',
            border: false,
            bodyStyle: 'background:#f1f1f1;font-size:10px;',
            autoScroll: true,
            items: this.importForm
        }],
        buttons: [{
            text: WtfGlobal.getLocaleText("acc.uploadbtn"),
            scope: this,
            handler: function(button) {
                var value = Wtf.getCmp('importTransactionsFileID').getValue();
                var extension =value.substr(value.lastIndexOf(".")+1);
                var patt1 = new RegExp("csv","i");
                if (this.importForm.form.isValid() && value != '') {
                    if(patt1.test(extension)) {

                        this.importForm.getForm().submit({
                            url: importUrl+"&do=getMapCSV&delimiterType=Comma&dateFormat="+this.datePreference.getValue()+"&titleMsg="+titleMsg,
                            waitMsg :WtfGlobal.getLocaleText("acc.rem.167"),  //'Uploading File...',
                            success: function(req,res) {
                                if(res.result.success){
                                    showImportSummary(false, res.result);
                                    WtfGlobal.resetAjaxTimeOut();
                                     if(Wtf.getCmp("masterconfiguration")!=undefined){
                                        Wtf.getCmp("masterconfiguration").masterStore.load();
                                    }
                                    this.importTransactionsWindow.close();
                                }else { // Failure
                                    WtfImportMsgBox([WtfGlobal.getLocaleText("acc.common.alert"), res.msg], 1);
                                }
                            },
                            scope: this,
                            failure: function(req,response) {
                                var resultObj = eval('('+response.response.responseText+')');
                                WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText(resultObj.msg)],2);
                            }
                        })
                    } else {
                        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.alert"),WtfGlobal.getLocaleText("acc.rem.84")],2);
                    }
                } else {
                    return false;
                }
            }
        }, {
            text: WtfGlobal.getLocaleText("acc.common.cancelBtn"),
            scope: this,
            handler: function() {
                this.importTransactionsWindow.close();
            }
        }]
    });

    this.importTransactionsWindow.show();
}
function callAddressDetailWindow(addressrec,isEdit,copyInv,accid,currentaddress,isCustomer,viewGoodReceipt,isViewTemplate,singleLink,linkedDocuments,moduleid,isPOFromSO,customeridforshippingaddress,isLinkedTransaction,isdropshipDocument,stateAsComboFlag){
    var panel = Wtf.getCmp('addressDetailWindow');
    if(!panel){
        var config = {
            title:WtfGlobal.getLocaleText("acc.field.BillingandShippingAddress"),
            id:'addressDetailWindow',
            accid:accid,
            copyInv:copyInv,
            currentaddress:currentaddress,
            record:addressrec,
            isEdit:isEdit,
            isCustomer:isCustomer,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            height:isCustomer?625:620,
            width:1120,
            autoScroll:true,
            resizable:false,
            closable: true,
            linkedDocuments:linkedDocuments,
            isLinkedTransaction:isLinkedTransaction,
            moduleid:moduleid,
//            layout:'fit',
            renderTo: document.body,
            modal: true,
            viewGoodReceipt:viewGoodReceipt,
            isViewTemplate:isViewTemplate,
            constrainHeader :true,
            singleLink:singleLink!=undefined?singleLink:false,
            isPOFromSO:(isPOFromSO!=undefined || isPOFromSO!='')?isPOFromSO:false,
            customeridforshippingaddress:(customeridforshippingaddress!==undefined ||customeridforshippingaddress!=='')?customeridforshippingaddress:'',
            isdropshipTypeDocument:isdropshipDocument,
            stateAsComboFlag:stateAsComboFlag
        };
        //If Avalara Integration is enabled and address validation is enabled, then we add a button for user to validate addresses
        if (Wtf.account.companyAccountPref.avalaraIntegration && Wtf.account.companyAccountPref.avalaraAddressValidation) {
            config.avalaraAddressValidation = true;//Add Avalara Address Validation flag's value equal to true in config if address validation is on
        }
        new Wtf.account.addressWindow(config).show();       
    } else {
        panel.show();
    }
}

function notificationWindow(isEdit) {
    notificationNumber = 1;
    notificationID = 1;
    var notificationDaysData = [];
    var defaultarray = ["Days", "Days"];
    notificationDaysData.push(defaultarray);
    defaultarray = ["Weeks", "Weeks"];
    notificationDaysData.push(defaultarray);
    defaultarray = ["Months", "Months"];
    notificationDaysData.push(defaultarray);

    var notificationDaysStore = new Wtf.data.SimpleStore({
        fields: ['id', 'name'],
        data: notificationDaysData,
        autoLoad: true
    });

    var removeNotificationHandler = function(button) {
        if (notificationNumber > 1) {
            var panel = Wtf.getCmp(button.id.replace("notifyRemove", "fieldTabPanel"));
            var fieldSetItemsPanel = Wtf.getCmp('notificationFieldSet');
            fieldSetItemsPanel.remove(panel);
            notificationNumber--;
        } else {
            Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Therearenonotificationstoremove"));
        }
    }
    var initConfig = {
        layout: 'table',
        autoHeight: true,
        layoutConfig: {
            columns: 3
        },
        id: 'fieldTabPanel' + notificationID,
        border: false,
        items: [{
            xtype: 'numberfield',
            id: 'notifyBefore' + notificationID,
            hideLabel: true,
            maxLength: 2,
            minValue: 1,
            allowDecimals: false,
            width: 40,
            allowBlank: false,
            border: false
        }, {
            xtype: 'combo',
            forceSelection: true,
            allowBlank: false,
            id: 'notifyType' + notificationID,
            cls: 'reminder-custom',
            triggerAction: 'all',
            mode: 'local',
            store: notificationDaysStore,
            valueField: 'id',
            displayField: 'name',
            width: 80,
            border: false
        }, {
            xtype: 'button',
            cls: 'reminder-custom1',
            id: 'notifyRemove' + notificationID,
            text: WtfGlobal.getLocaleText("acc.field.Remove"),
            handler: function(button) {
                removeNotificationHandler(button);
            }
        }]
    };
    var notificationForm = new Wtf.form.FormPanel({
        waitMsgTarget: true,
        labelWidth: 110,
        border: false,
        bodyStyle: 'font-size:10px;padding:10px 20px;margin-top:3%',
        autoScroll: false,
        autoHeight: true,
        defaultType: 'textfield',
        items: [{
            xtype: 'fieldset',
            autoHeight: true,
            title: WtfGlobal.getLocaleText("acc.field.RemindBefore"),
            border: false,
            id: 'notificationFieldSet',
            items: isEdit ? undefined : [initConfig]
        }]
    });
    if (!isEdit) {
        notificationNumber++;
        notificationID++;
    }
    var assmngrbtn = [];
    assmngrbtn.push({
        text: WtfGlobal.getLocaleText("acc.msgbox.ok"), //'Ok',
        handler: function() {
            var configobjval;
            var isFormFilled = true;

            var tmpID = notificationID;
            var notificationData = "["
            var dailyData = "{\"Days\":\"";
            var weeklyData = "{\"Weeks\":\"";
            var monthlyData = "{\"Months\":\"";

            for (var i = (tmpID - 1); i > 0; i--) {

                tmpID--;
                if (Wtf.getCmp('notifyType' + tmpID) && Wtf.getCmp('notifyBefore' + tmpID)) {

                    var notificationType = Wtf.getCmp('notifyType' + tmpID).getValue();
                    var notifyBefore = Wtf.getCmp('notifyBefore' + tmpID).getValue();

                    if ((notificationType == "" || notifyBefore == "") && isFormFilled) {
                        isFormFilled = false;
                        break;
                    }

                    if (notificationType == "Days")
                        dailyData += notifyBefore + ",";
                    else if (notificationType == "Weeks")
                        weeklyData += notifyBefore + ",";
                    else if (notificationType == "Months")
                        monthlyData += notifyBefore + ",";
                }

            }

            if (!isFormFilled) {
                Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Pleaseenterproperdatatosave"));
                return;
            }

            if (dailyData.lastIndexOf(",") == (dailyData.length - 1))
                dailyData = dailyData.substr(0, dailyData.length - 1);
            dailyData += "\"}";

            if (weeklyData.lastIndexOf(",") == (weeklyData.length - 1))
                weeklyData = weeklyData.substr(0, weeklyData.length - 1);
            weeklyData += "\"}";

            if (monthlyData.lastIndexOf(",") == (monthlyData.length - 1))
                monthlyData = monthlyData.substr(0, monthlyData.length - 1);
            monthlyData += "\"}";

            notificationData += dailyData;
            notificationData += ",";
            notificationData += weeklyData;
            notificationData += ",";
            notificationData += monthlyData;
            notificationData += "]"

            configobjval = notificationData;

            if (configobjval != undefined && (configobjval != "" || configobjval == 0)) {
                Wtf.getCmp('notificationDays').setValue(configobjval);
            }

            Wtf.Msg.alert("", WtfGlobal.getLocaleText("acc.field.Pleasereloadthetabtoseethechanges"));
            notification_window.close();
        },
        scope: this
    });

    assmngrbtn.push({
        text: WtfGlobal.getLocaleText("acc.msgbox.cancel"), //'Cancel',
        scope: this,
        handler: function() {
            notification_window.close();
        }
    });
    var notification_window = new Wtf.Window({
        title: WtfGlobal.getLocaleText("acc.field.NotificationSettings"),
        autoHeight: true,
        id: 'notification_window',
        width: 400,
        modal: true,
        items: [{
            border: false,
            cls: 'panelstyleClass2',
            items: [notificationForm]
        }],
        tbar: [{
            text: WtfGlobal.getLocaleText("acc.field.AddNotification"),
            scope: this,
            handler: function() {

                var prevCmb = Wtf.getCmp('notifyType' + (notificationID - 1));
                var prevTxt = Wtf.getCmp('notifyBefore' + (notificationID - 1));
                if (notificationNumber <= 5) {

                    if ((!prevTxt && !prevCmb) || (prevTxt.getValue() != "" && prevCmb.getValue() != "")) {

                        var fieldSetItemsPanel = Wtf.getCmp('notificationFieldSet');

                        fieldSetItemsPanel.add({
                            layout: 'table',
                            autoHeight: true,
                            layoutConfig: {
                                columns: 3
                            },
                            cls: notificationNumber == 1 ? '' : 'reminder-custom2',
                            id: 'fieldTabPanel' + notificationID,
                            border: false,
                            items: [{
                                xtype: 'numberfield',
                                id: 'notifyBefore' + notificationID,
                                allowBlank: false,
                                hideLabel: true,
                                minValue: 1,
                                allowDecimals: false,
                                maxLength: 2,
                                width: 40,
                                border: false
                            }, {
                                xtype: 'combo',
                                forceSelection: true,
                                allowBlank: false,
                                id: 'notifyType' + notificationID,
                                cls: 'reminder-custom',
                                triggerAction: 'all',
                                mode: 'local',
                                store: notificationDaysStore,
                                valueField: 'id',
                                displayField: 'name',
                                width: 80,
                                border: false
                            }, {
                                xtype: 'button',
                                cls: 'reminder-custom1',
                                id: 'notifyRemove' + notificationID,
                                text: WtfGlobal.getLocaleText("acc.field.Remove"),
                                handler: function(button) {
                                    removeNotificationHandler(button);
                                }
                            }]
                        });


                        notification_window.doLayout();
                        Wtf.getCmp('notificationFieldSet').doLayout();
                        fieldSetItemsPanel.doLayout();
                        notificationNumber++;
                        notificationID++;

                        Wtf.getCmp('notifyType' + (notificationID - 1)).on('select', function(combo) {
                            var tmpID = notificationID;
                            var currentID = combo.id;
                            var currentText = Wtf.getCmp(currentID.replace("notifyType", "notifyBefore"));

                            for (var i = 1; i < notificationNumber; i++) {
                                tmpID--;
                                if (('notifyType' + tmpID) != currentID) {
                                    var tmpCombo = Wtf.getCmp('notifyType' + tmpID);
                                    var tmpText = Wtf.getCmp('notifyBefore' + tmpID);
                                    if (tmpCombo && tmpText && tmpCombo.getValue() == combo.getValue() && tmpText.getValue() == currentText.getValue()) {
                                        currentText.setValue("");
                                        combo.setValue("");
                                        Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Thisnotificationisalreadyset"));
                                    }
                                }
                            }

                        }, this);

                    } else {
                        Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.PleasefillthedetailsforcurrentNotificationSettingsinordertoaddnewNotifications"));
                    }

                } else {
                    Wtf.Msg.alert(WtfGlobal.getLocaleText("acc.common.alert"), WtfGlobal.getLocaleText("acc.field.Youcannotaddmorethan5notificationsatonce"));
                }

            }
        }],
        buttonAlign: 'right',
        buttons: assmngrbtn
    });

    notification_window.on("show", function() {
        var oldVal = Wtf.getCmp('notificationDays').getValue();
        if (oldVal.length > 0) {
            var notificationDays = eval('(' + oldVal + ')');
            var fieldSetItemsPanel = Wtf.getCmp('notificationFieldSet');
            for (var cnt = 0; cnt < notificationDays.length; cnt++) {
                var obj = notificationDays[cnt];
                for (var key in obj) {
                    var values = obj[key].split(",");
                    for (var arrindex = 0; arrindex < values.length; arrindex++) {
                        var value = values[arrindex];
                        if (value.length > 0) {
                            fieldSetItemsPanel.add({
                                layout: 'table',
                                autoHeight: true,
                                layoutConfig: {
                                    columns: 3
                                },
                                cls: notificationNumber == 1 ? '' : 'reminder-custom2',
                                id: 'fieldTabPanel' + notificationID,
                                border: false,
                                items: [{
                                    xtype: 'numberfield',
                                    id: 'notifyBefore' + notificationID,
                                    allowBlank: false,
                                    hideLabel: true,
                                    minValue: 1,
                                    allowDecimals: false,
                                    maxLength: 2,
                                    value: value,
                                    width: 40,
                                    border: false
                                }, {
                                    xtype: 'combo',
                                    forceSelection: true,
                                    allowBlank: false,
                                    id: 'notifyType' + notificationID,
                                    cls: 'reminder-custom',
                                    triggerAction: 'all',
                                    mode: 'local',
                                    store: notificationDaysStore,
                                    valueField: 'id',
                                    value: key,
                                    displayField: 'name',
                                    width: 80,
                                    border: false
                                }, {
                                    xtype: 'button',
                                    cls: 'reminder-custom1',
                                    id: 'notifyRemove' + notificationID,
                                    text: WtfGlobal.getLocaleText("acc.field.Remove"),
                                    handler: function(button) {
                                        removeNotificationHandler(button);
                                    }
                                }]
                            });
                            Wtf.getCmp('notification_window').doLayout();
                            Wtf.getCmp('notificationFieldSet').doLayout();
                            fieldSetItemsPanel.doLayout();
                            notificationNumber++;
                            notificationID++;
                        }
                    }
                }
            }
        }
    });
    notification_window.show();
}
//
//function callSystemDataBackup(){
//    var module='Product';
//    var mode=198;
//    var type="csv";
//    var filename="ProductDetails";
//    WtfGlobal.exportAllData(mode,filename,type,module);
//}


function callIBGEntryReport(){
    if(!Wtf.account.companyAccountPref.activateIBG) {
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),WtfGlobal.getLocaleText("acc.IBG.activate.msg")],3);
        return;
    }
    var panel=Wtf.getCmp("ibgentryreportpanel");
    if(panel==null){
        panel=new Wtf.account.IBGEntryReportPanel({
            title:WtfGlobal.getLocaleText("acc.IBG.tabtitel"),
            tabTip:WtfGlobal.getLocaleText("acc.IBG.tabtip"),
            id:'ibgentryreportpanel',
            border:false,
            layout:'fit',
            closable:true,
            iconCls:'accountingbase invoicelist'
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}
function callCalendar(){
    callCalendarOnScriptLoad();
}

function callCalendarOnScriptLoad() {
    var panel=Wtf.getCmp("calendarpanel");
    if(panel==null){
        panel=new Wtf.Panel({
            title:WtfGlobal.getLocaleText("Calendar"),
            tabTip:WtfGlobal.getLocaleText("Calendar"),
            id:'calendarpanel',
            border:false,
            layout:'fit',
            closable:true,
            iconCls:'accountingbase invoicelist',
            autoScroll:true,
            autoLoad:{
                url:'landingpage.jsp',
                scripts:true
            }
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}

function callIBGbankDetailsWin(winid,isEdit,isView,rec,isEditCase) {
    winid = (winid == null? "ibgBankDetailsWin" : winid);
    var panel = Wtf.getCmp(winid);
    if(!panel) {
        var win = new Wtf.account.IBGBankDetails({
            title:WtfGlobal.getLocaleText("Originating IBG Bank Details"),  // 'Originating IBG Bank Details',
            tabTip:WtfGlobal.getLocaleText("acc.field.originatingIBGbankDetails"),  // 'Originating IBG Bank Details',
            record:rec,
            isEdit:isEdit,
            isView:isView,
            id:winid,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 700,
            height:500,
            isEditCase:isEditCase,
            resizable: false,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        }).show();
    }
}
function chkEmptyCmb(reccount,msgid){
    var str=""
    if (reccount==0) {
        switch(msgid) {
            case '1':
                str='acc.costcenetrnotdefined.msg';//cost center not defined
                break;
        }
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),WtfGlobal.getLocaleText(str)],3)
    }
    return;
}

//######################## Pricing List-Band Master ########################
function callPricingBandMaster(winid) {
    if (Wtf.account.companyAccountPref.productPricingOnBands || Wtf.account.companyAccountPref.productPricingOnBandsForSales) {
        var cmpId = 'pricingBandMaster'
        var panel = Wtf.getCmp(cmpId);
        if (panel == null) {
            panel = new Wtf.account.PricingBandMaster({
                id: cmpId,
                title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.pricingBands"),Wtf.TAB_TITLE_LENGTH) ,
                tabTip: WtfGlobal.getLocaleText("acc.field.pricingBands"),
                layout:'fit',
                border : false,
                closable: true,
                iconCls: getButtonIconCls(Wtf.etype.product)
            });

            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    } else {
        //      WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.product.pricelistBand.access"));
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),WtfGlobal.getLocaleText("acc.product.pricelistBand.access")], 3);
    }
}

function callCustomerByPricingBandReport(){
    var panel = Wtf.getCmp("CustomerByPricingBandDetails");
    if(panel == null) {
        panel = new Wtf.account.BusinessPersonListByCategory({
            id: 'CustomerByPricingBandDetails',
            border: false,
            layout: 'fit',
            closable: true,
            isCustomer: true,
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.customerList.tabTitlePricingBand"), Wtf.TAB_TITLE_LENGTH), // "Customer List by Pricing Band",
            tabTip: WtfGlobal.getLocaleText("acc.customerList.tabTitlePricingBand"),  // "Customer List by Pricing Band",
            iconCls: getButtonIconCls(Wtf.etype.customer),
            isPricingBandGrouping: true
        });
        Wtf.getCmp('mainCustomerDetails').add(panel);
    }
    Wtf.getCmp('mainCustomerDetails').setActiveTab(panel);
    Wtf.getCmp('mainCustomerDetails').doLayout();
}

function callVendorByPricingBandReport(){
    var panel = Wtf.getCmp("VendorByPricingBandDetails");
    if(panel == null) {
        panel = new Wtf.account.BusinessPersonListByCategory({
            id: 'VendorByPricingBandDetails',
            border: false,
            layout: 'fit',
            closable: true,
            isCustomer: false,
            title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.vendorList.tabTitlePricingBand"), Wtf.TAB_TITLE_LENGTH), // "Vendor List by Pricing List-Band",
            tabTip: WtfGlobal.getLocaleText("acc.vendorList.tabTitlePricingBand"),  // "Vendor List by Pricing List-Band",
            iconCls: 'accountingbase vendor',
            isPricingBandGrouping: true
        });
        Wtf.getCmp('mainVendorDetails').add(panel);
    }
    Wtf.getCmp('mainVendorDetails').setActiveTab(panel);
    Wtf.getCmp('mainVendorDetails').doLayout();
}

function callPriceListVolumeDiscount() {
    if (Wtf.account.companyAccountPref.productPricingOnBands || Wtf.account.companyAccountPref.productPricingOnBandsForSales) {
        var cmpId = 'priceListVolumeDiscount'
        var panel = Wtf.getCmp(cmpId);
        if (panel == null) {
            panel = new Wtf.account.PriceListVolumeDiscount({
                id: cmpId,
                title: Wtf.util.Format.ellipsis(WtfGlobal.getLocaleText("acc.field.priceListVolumeDiscount"),Wtf.TAB_TITLE_LENGTH), // "Price List - Volume Discount",
                tabTip: WtfGlobal.getLocaleText("acc.field.priceListVolumeDiscount"), // "Price List - Volume Discount",
                layout: 'fit',
                border : false,
                closable: true,
                iconCls: getButtonIconCls(Wtf.etype.product)
            });

            Wtf.getCmp('as').add(panel);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    } else {
        //        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.common.viewing") + " " + WtfGlobal.getLocaleText("acc.wtfTrans.vpPriceListVolumeDiscount"));
        WtfComMsgBox([WtfGlobal.getLocaleText("acc.common.information"),WtfGlobal.getLocaleText("acc.product.pricelistBand.access")], 3);
    }
}
function beforeClose(channelName) {
    if (channelName != "") {
        dojo.cometd.unsubscribe(channelName);
    }
}

function callCustomLayoutWithPeriodOrEndingBalances(id,templatetitle,templatetype,isOnlyPeriodBalances) {
        var statementType = "";
        if (templatetype == 0) {
            statementType = "TradingAndProfitLoss";
        } else if (templatetype == 1) {
            statementType = "BalanceSheet";
        } else if (templatetype == 3) {
            statementType = "CashFlowStatement";
        } else {
            statementType = "TrialBalance";
        }
        var panelid = isOnlyPeriodBalances ? "periodcustomLayout" + id : "endingcustomLayout" + id;
        var panel = Wtf.getCmp(panelid);
        if(panel==null){
            var panel = new Wtf.account.TradingCustomLayout({
                id : panelid,
                consolidateFlag:false,
                title:Wtf.util.Format.ellipsis(templatetitle, Wtf.TAB_TITLE_LENGTH),
                tabTip:templatetitle, //'Trading & Profit/Loss',
                topTitle:'<center><font size=4>' + Wtf.util.Format.ellipsis(templatetitle, Wtf.TAB_TITLE_LENGTH) + '</font></center>',
                moduleid:101, //Added module id for Tading Profit and loss search report
                searchJson: "",
                filterConjuctionCrit:"",
                templateid : id,
                templatetype : templatetype,
                isOnlyPeriodBalances: isOnlyPeriodBalances,
                isOnlyEndingBalances: !isOnlyPeriodBalances,
                templatetitle:templatetitle,
        //        statementType:templatetype==0?'TradingAndProfitLoss':templatetype==1?'BalanceSheet' : 'TrialBalance',
                statementType:statementType,
                border : false,
                closable: true,
                layout: 'fit',
                iconCls:'accountingbase financialreport'
            });
            Wtf.getCmp('as').add(panel);
            panel.on('account', viewGroupDetailReport);
        }
        Wtf.getCmp('as').setActiveTab(panel);
        Wtf.getCmp('as').doLayout();
    }

function callcustomLayout(id,templatetitle,templatetype,searchStr,filterAppend) {
    var panel = Wtf.getCmp("customLayout" + id);
    var reportid = Wtf.autoNum.TrialBalance;
    if (panel == null) {
        if (templatetype == 2) {
            panel = new Wtf.account.TrialBalanceCustomLayout({
                id: "customLayout" + id,
                consolidateFlag: false,
                title: Wtf.util.Format.ellipsis(templatetitle != '' ? templatetitle : templateName, Wtf.TAB_TITLE_LENGTH),
                tabTip: templatetitle != '' ? templatetitle : templateName, //'Trading & Profit/Loss',
                topTitle: '<center><font size=4>' + Wtf.util.Format.ellipsis(templatetitle != '' ? templatetitle : templateName, Wtf.TAB_TITLE_LENGTH) + '</font></center>',
                moduleid: 101, //Added module id for Tading Profit and loss search report
                reportid: reportid,
                searchJson:searchStr,
                filterConjuctionCrit:filterAppend,
                templateid: id,
                templatetype: templatetype,
                templatetitle: templatetitle != '' ? templatetitle : templateName,
                statementType: 'TrialBalance',
                border: false,
                closable: true,
                layout: 'fit',
                iconCls: 'accountingbase financialreport'
            });
        } else {
            var statementType = "";
            if (templatetype == 0) {
                statementType = "TradingAndProfitLoss";
                reportid = Wtf.autoNum.TradingAndProfitLoss;
            } else if (templatetype == 1) {
                statementType = "BalanceSheet";
                reportid = Wtf.autoNum.BalanceSheetReportId;
            } else if (templatetype == 3) {
                statementType = "CashFlowStatement";
                reportid = Wtf.autoNum.CashFlowStatement;
            } else {
                statementType = "TrialBalance";
            }
            panel = new Wtf.account.TradingCustomLayout({
                id: "customLayout" + id,
                consolidateFlag: false,
                title: Wtf.util.Format.ellipsis(templatetitle != '' ? templatetitle : templateName, Wtf.TAB_TITLE_LENGTH),
                tabTip: templatetitle != '' ? templatetitle : templateName, //'Trading & Profit/Loss',
                topTitle: '<center><font size=4>' + Wtf.util.Format.ellipsis(templatetitle != '' ? templatetitle : templateName, Wtf.TAB_TITLE_LENGTH) + '</font></center>',
                moduleid: 101, //Added module id for Tading Profit and loss search report
                reportid: reportid,
                searchJson:searchStr,
                filterConjuctionCrit:filterAppend,
                templateid: id,
                templatetype: templatetype,
                templatetitle: templatetitle != '' ? templatetitle : templateName,
                statementType: statementType,
                border: false,
                closable: true,
                layout: 'fit',
                iconCls: 'accountingbase financialreport'
            });
        }
        Wtf.getCmp('as').add(panel);
        panel.on('account', viewGroupDetailReport);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
    showAdvanceSearch(panel, searchStr, filterAppend);
}

function getStockByCustomerStore(){
    var inventoryTab1 = Wtf.getCmp("storewisestock");
    if(!WtfGlobal.EnableDisable(Wtf.UPerm.consignmentsales, Wtf.Perm.consignmentsales.viewconsignmentcustomerwarehouse)) {
        if(inventoryTab1 == null){
            inventoryTab1 = new Wtf.StoreWisecustomerStock({
                title: WtfGlobal.getLocaleText("acc.field.StockAvailabilityByCustomerWarehouse"), // "Stock Availability by Customer Warehouse",
                id:"storewisestock",
                layout:"fit",
                closable:true
            });
            Wtf.getCmp("as").add(inventoryTab1);
        }
        Wtf.getCmp("as").setActiveTab(inventoryTab1);
        Wtf.getCmp("as").doLayout();
    }
    else
    {
        WtfComMsgBox(46,0,false,WtfGlobal.getLocaleText("acc.lp.viewconsignmentcustomerwarehouse"));
    }
}
function getJournalEntryByCustomerTab() {   //LMS JE Report
    var reportPanel = new Wtf.account.JournalEntryCustomerDetailPanel({
        id: 'jebycust',
        border: false,
        title: WtfGlobal.getLocaleText("acc.field.JEByCustomer"),
        tabTip: WtfGlobal.getLocaleText("acc.field.JEByCustomerreport"),
        layout: 'fit',
        closable: true,
        moduleid: Wtf.Acc_GENERAL_LEDGER_ModuleId,
        isCustomer: true,
        label: WtfGlobal.getLocaleText("acc.accPref.autoInvoice"), //"Invoice",
        iconCls: 'accountingbase journalentryreport'
    });
    Wtf.getCmp('as').add(reportPanel);
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}
function callSOPOByProductReportTab(isCustomer) {
    var id = (isCustomer ? 'SO' : 'PO') + "ByProductReport"
    var title = isCustomer ? WtfGlobal.getLocaleText("acc.field.SOByProductReport") : WtfGlobal.getLocaleText("acc.field.POByProductReport");
    var label = isCustomer ? WtfGlobal.getLocaleText("acc.accPref.autoSO") : WtfGlobal.getLocaleText("acc.accPref.autoPO");
    var reportPanel = Wtf.getCmp(id);
    if(reportPanel == null){
        reportPanel = new Wtf.account.TransactionListPanelViewSales({
            id : id,
            border : false,
            title: title,
            tabTip: title,
            layout: 'fit',
            closable : true,
            label:label,
            iscustreport : false,
            moduleid : isCustomer? Wtf.Acc_Sales_Order_ModuleId : Wtf.Acc_Purchase_Order_ModuleId,
            isCustomer:isCustomer,
            businessPerson:isCustomer?'Customer':'Vendor',
            isSOPOByProductReport: true,
            iconCls:'accountingbase invoicelist'
        });
        Wtf.getCmp('as').add(reportPanel);
    }
    Wtf.getCmp('as').setActiveTab(reportPanel);
    Wtf.getCmp('as').doLayout();
}
function WriteOffInvoicesWindow(isCustomerInvoice){
    var id = isCustomerInvoice ? "writeOffCustomerInvoiceWindow":"writeOffVendorInvoiceWindow";
    var title = isCustomerInvoice ? WtfGlobal.getLocaleText("acc.writeOff.salesInvoice") : WtfGlobal.getLocaleText("acc.writeOff.purchaseInvoice");
    var panel = Wtf.getCmp(id);
    if(panel == null){
        panel = new Wtf.account.WriteOffInvoicesWindow({
            id: id,
            title: title,
            border: false,
            isCustomer:isCustomerInvoice
        }).show();
    }
}
function WriteOffInvoicesReport(isCustomerInvoice){    
    var id = isCustomerInvoice ? "writeOffCustomerInvoiceReport":"writeOffVendorInvoiceReport";
    var title = isCustomerInvoice ? WtfGlobal.getLocaleText("acc.writtenOff.SalesInvoice") : WtfGlobal.getLocaleText("acc.writtenOff.PurchaseInvoice");
    var panel = Wtf.getCmp(id);
    if(panel == null){
        panel = new Wtf.account.WriteOffInvoicesReport({
            id : id,
            border : false,
            title: title,
            tabTip: title,
            layout: 'fit',
            iscustreport : true,
            closable : true,
            isCustomer:isCustomerInvoice,
            label:WtfGlobal.getLocaleText("acc.accPref.autoInvoice"),
            iconCls:'writtenOffSalesInvoiceIcon'
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}
function WriteOffPaymentsWindow(isReceipt){
    var id = isReceipt ? "writeOffReceiptWindow":"writeOffPaymentWindow";
    var title = isReceipt ? WtfGlobal.getLocaleText("acc.writeOff.receipts") : WtfGlobal.getLocaleText("acc.writeOff.payments");
    var panel = Wtf.getCmp(id);
    if(panel == null){
        panel = new Wtf.account.WriteOffPaymentsWindow({
            id: id,
            title: title,
            border: false,
            isReceipt:isReceipt
        }).show();
    }
}
function writeOffPaymentsReport(isReceipt){    
    var id = isReceipt ? "writeOffReceiptReport":"writeOffPaymentReport";
    var title = isReceipt ? WtfGlobal.getLocaleText("acc.writtenOff.receipts") : WtfGlobal.getLocaleText("acc.writtenOff.payments");
    var panel = Wtf.getCmp(id);
    if(panel == null){
        panel = new Wtf.account.writeOffPaymentsReport({
            id : id,
            border : false,
            title: title,
            tabTip: title,
            layout: 'fit',
            iscustreport : true,
            closable : true,
            isReceipt:isReceipt,
            iconCls:'writtenOffSalesInvoiceIcon'
        });
        Wtf.getCmp('as').add(panel);
    }
    Wtf.getCmp('as').setActiveTab(panel);
    Wtf.getCmp('as').doLayout();
}
function ExchangeRateswindows(){
    var id ='ExchangeRates';
    var title = WtfGlobal.getLocaleText('acc.common.downloadexchangerates');
    var panel = Wtf.getCmp(id);
    if(panel == null){
        panel = new Wtf.account.ExchangeRateswindow({
            id:id,
            title:title,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 800,
            height: 600,
            resizable: true,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        });
         panel.show();
        return panel;
    }
 }
 
 function CustomizeCurrencySymbolCodewindows(){
    var id ='CustomizeCurrecy';
    var title = WtfGlobal.getLocaleText('acc.common.customizecurrencysymbolcode');
    var panel = Wtf.getCmp(id);
    if(panel == null){
        panel = new Wtf.account.CustomizeCurrencywindow({
            id:id,
            title:title,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 800,
            height: 600,
            resizable: true,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        });
         panel.show();
        return panel;
    }
 }
 
 function LimitedAccountsWindow(){
    var id ='LimitedAccountWindow';
    var title = WtfGlobal.getLocaleText('acc.common.LimitedAccountsLink');
    var panel = Wtf.getCmp(id);
    if(panel == null){
        panel = new Wtf.account.MasterFormAccountWindow({
            id:id,
            title:title,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 400,
            height: 200,
            resizable: true,
            buttonAlign: 'right'
        });
        panel.show();
//        return panel;
    }
 }

 function RevaluationJournalEnteryDimensionWindow(){
    var id ='SetDimensionWindow';
    var title = "Set Dimension Window";
    var panel = Wtf.getCmp(id);
    if(panel == null){
        panel =new Wtf.account.journalEnteryCustomDimensionWindow({
            id:id,
            title:title,
            closable: true,
            modal: true,
            iconCls :getButtonIconCls(Wtf.etype.deskera),
            width: 950,
            height: 450,
            resizable: true,
            layout: 'border',
            buttonAlign: 'right',
            renderTo: document.body
        });
         panel.show();
        return panel;
    }
 }

function callWidgetTab() {
    if (!isProdBuild) {
        showWidgetDynamicLoad();
    } else {
        if (Wtf.ReportScriptLoadedFlag.showWidget) {
            showWidgetDynamicLoad();
        } else {
            ScriptMgr.load({
                scripts: ['../../scripts/Reports/Widgets.js'],
                callback: function () {
                    showWidgetDynamicLoad();
                    Wtf.ReportScriptLoadedFlag.showWidget = true
                },
                scope: this
            });
        }
    }
}

function showAutheticationForm() {
    if (!isProdBuild) {
        SMTPAutheticationFormDynamicLoad();
    } else {
        if (Wtf.ReportScriptLoadedFlag.smtpauthentication) {
            SMTPAutheticationFormDynamicLoad();
        } else {
            ScriptMgr.load({
                scripts: ['../../scripts/Reports/SMTPAuthentication.js'],
                callback: function() {
                    SMTPAutheticationFormDynamicLoad();
                    Wtf.ReportScriptLoadedFlag.smtpauthentication = true
                },
                scope: this
            });
        }
    }
}

function SMTPAutheticationFormDynamicLoad() {
    var id = 'SMTPAuthWindowId';
    var panel = Wtf.getCmp(id);
    if (panel == null) {
        panel = new Wtf.account.SMTPAuthenticationwindow({
            title: WtfGlobal.getLocaleText('acc.field.SMTPAuth.header'),
            closable: true,
            modal: true,
            resizable: false,
            height: 300,
            width: 400,
            layout: 'border',
            buttonAlign: 'right',
            iconCls: 'iconwin',
            renderTo: document.body
        });
        panel.show();
        return panel;
    }
    
}

function callExciseUnitWin(winid) {
 
    winid=(winid==null?"ExciseUnitWin":winid);
    var p = Wtf.getCmp(winid);
    if(!p){
        
        var registrationTypeCombo = new Wtf.form.ComboBox({
            fieldLabel: WtfGlobal.getLocaleText("acc.field.india.registrationtype"),
            store: Wtf.registrationTypeStore,
            name: 'registrationType',
            id: 'registrationType' + this.id,
            hiddenName: 'registrationType',
            valueField: 'id',
            mode: 'local',
            displayField: 'name',
            forceSelection: true,
            triggerAction: 'all',
            selectOnFocus: true
        });
        
        var storeRec = new Wtf.data.Record.create([
        {
            name:'warehouse', 
            mapping:'store_id'
        },
        {
            name:'name', 
            mapping:'fullname'
        }]
        );
        var Stores=new Wtf.data.Store({
            reader: new Wtf.data.KwlJsonReader({
                root: "data"
            },storeRec),
            url:"INVStore/getStoreList.do"
        });

        var storesRecord = Wtf.data.Record.create([
        {
            name: 'store_id'
        },

        {
            name: 'description'
        },

        {
            name: 'code'
        },

        {
            name: 'abbr'
        },

        {
            name: 'address'
        },

        {
            name: 'lastday'
        },

        {
            name: 'storeMan'
        },

        {
            name: 'storetypename'
        },

        {
            name: 'storetypeid'
        },

        {
            name: 'ManagerId'
        },

        {
            name: 'roleid'
        },

        {
            name: 'ccdateallow'
        },

        {
            name:'actstatus'
        },

        {
            name:'smccallow'
        },

        {
            name:'locationid'
        },

        {
            name:'locationname'
        },

        {
            name:'contact'
        },

        {
            name:'fax'
        },

        {
            name:'mappedLocations'
        },
        {
            name:'userids'
        },
        {
            name:'users'
        },
        {
            name:'executives'
        },
        {
            name:'executiveids'
        },
        {
            name:'defaultlocation'
        },
        {
            name:'defaultlocationid'
        },
        {
            name:'movementtype'
        },
        {
            name:'vattinnumber'
        },

        {
            name:'csttinnumber'
        }

        ]);
        var storesds = new Wtf.data.GroupingStore({
            url:  'INVStore/getStoreList.do',
            reader: new Wtf.data.KwlJsonReader({
                totalProperty: 'count',
                root:'data'
            }, storesRecord)
        });
        this.wareHouseEditor = new Wtf.form.FnComboBox({
            addNewFn:function(){
                var win=new Wtf.exchangeRecordsGrid({
                    title: WtfGlobal.getLocaleText("acc.common.addStore"),
                    floating: true,
                    closable : true,
                    id:'StoreformIdAdd'+this.id,
                    modal: true,
                    autoShow: true,
                    iconCls: 'win',
                    storerec: undefined,
                    width: 420,
                    action: "Add",
                    orderStore: storesds,
                    stores:Stores,
                    height: 470,
                    layout: 'fit',
                    createFlag: true,
                    resizable: false,
                    autoScroll:true,
                    mode:'remote',
                    parentStore:storesds,  //dummy added to avoid js error
                    hideParentCmb:true
                }).show();
            },
            triggerAction: 'all',
            mode: 'local',
            fieldLabel: "<span wtf:qtip='" + WtfGlobal.getLocaleText("acc.field.availableWarehouse") + "'>" + WtfGlobal.getLocaleText("acc.field.availableWarehouse") + "</span>", //WtfGlobal.getLocaleText("acc.field.DefaultWarehouse"),
            valueField: 'warehouse',
            displayField: 'name',
            store: Stores,
            typeAhead: true,
            selectOnFocus: true,
             disableKeyFilter:true,
             triggerAction:'all',
            name: 'warehouse',
            hiddenName: 'warehouse'

        });
//           
        Stores.load();
        var cm= [{
            header: WtfGlobal.getLocaleText("acc.field.india.exciseUnitName")+"*",  //"Excise Unit Name*",
            dataIndex: 'name',
            editor: new Wtf.form.ExtendedTextField({
                allowBlank: false,
                maxLength:50
            })
        },{
            header: WtfGlobal.getLocaleText("acc.field.india.registrationtype"),  //"Registration Type*",
            dataIndex: 'registrationType',
            editor: registrationTypeCombo,
            renderer:Wtf.comboBoxRenderer(registrationTypeCombo)
        },{
            header: WtfGlobal.getLocaleText("acc.field.Companyecc"),  //"Company Excise Control Code(ECC No)*",
            dataIndex: 'ECCNo',
            editor: new Wtf.form.ExtendedTextField({
               maxLength: 15,
               invalidText: 'Alphabets and numbers only',
               vtype: "alphanum"
            })
        },{
            header: WtfGlobal.getLocaleText("acc.common.addStore"),  //"Add Store*",
            dataIndex: 'warehouse',            
            renderer:Wtf.comboBoxRenderer(this.wareHouseEditor),
            editor: this.wareHouseEditor
        }];
        
        this.UnitStoreRec = Wtf.data.Record.create ([   // ERP-27117 :Provide Feature to Edit Excise Unit Window Showing in Grid
        {
            name: 'id'
        },

        {
            name: 'name'
        },

        {
            name: 'registrationType'
        },

        {
            name: 'ECCNo'
        },

        {
            name: 'warehouse'
        }]);
        this.FormUnitStore=new Wtf.data.Store({
            url: "ACCInvoice/getCompanyUnit.do",
            reader: new Wtf.data.KwlJsonReader({
                root: "data",totalProperty:"count"
            },this.UnitStoreRec)
        });
        this.FormUnitStore.load();
        new Wtf.account.GridUpdateWindow({
            cm:cm,
            headerImage:"../../images/accounting_image/Unit-of-measure.gif",
            store:this.FormUnitStore,
            record:this.UnitStoreRec,
            mode:102,
            addDeleteCol: true,
            title:WtfGlobal.getLocaleText("acc.paymentEntry.ExciseUnit"),  //'Excise Unit',
            id:winid,
            renderTo: document.body
        }).show();
    }
}
/*
 * Function for calling the IBG details window
 */
function generateIBGFileForUOB(configObject){
    var id = "windowForGeneratingIBGFileForUOB";
    var title = WtfGlobal.getLocaleText("acc.uob.generateIBGFile");
    var panel = Wtf.getCmp(id);
    if(panel == null){
        panel = new Wtf.account.IBGFileForUOBWindow({
            id: id,
            height:300,
            width : 800,
            title: title,
            border: false,
            modal : true,
            arrayOfBillIds:configObject.arrayOfBillIds,
            arrayOfBaseAmount:configObject.arrayOfBaseAmount,
            arrayOfInvoiceNumbers : configObject.arrayOfInvoiceNumbers,
            invoiceListComponent : configObject.invoiceListComponent,
            totalAmount:configObject.totalAmount
        }).show();
    }
}

function callDiscountMasterSalesWindow(){
    var winid = "discountmastersaleswindow";
    if (winid){
        this.accRec = Wtf.data.Record.create ([
            {
                name:'accountname',
                mapping:'accname'
            },
            {
                name:'accountid',
                mapping:'accid'
            }
            ,
            {
                name:'acccode',
                mapping:'acccode'
            },
            {
                name:'groupid',
                mapping:'groupid'
            },
            {
                name:'accounttype'
            }
        ]);

        this.dgStore = new Wtf.data.Store({
            url : "ACCAccountCMN/getAccountsForCombo.do",
            baseParams:{
                mode:2,
                ignoreCashAccounts:true,
                ignoreBankAccounts:true,
                ignoreGSTAccounts:true,
                ignorecustomers:true,
                ignorevendors:true,
                ignore:true,
                nondeleted:true
            },
            reader: new Wtf.data.KwlJsonReader({
                        root: "data"
                    }, this.accRec)
        });
        
        this.discountTypeStore = new Wtf.data.SimpleStore({
            fields: [{name:'typeid', type:'int'}, 'name'],
            data :[[1, 'Percentage'], [0, 'Flat']]
        });
        
        this.discountTypeCmb = new Wtf.form.ComboBox({
        store: this.discountTypeStore,
               name:'discounttypeid',
               displayField:'name',
               valueField:'typeid',
               mode: 'local',
               triggerAction: 'all',
               selectOnFocus:true,
               allowBlank:false
        });
        this.discountAccountCmb = new Wtf.form.ExtFnComboBox({
            name:'discountgiven',
            store:this.dgStore,
            hiddenName:'discountgiven',
            displayField:'accountname',
            valueField:'accountid',
            extraComparisionField:'acccode', // type ahead search on acccode as well.
            extraFields: Wtf.account.companyAccountPref.accountsWithCode ? ['acccode']:[],
            listWidth: Wtf.account.companyAccountPref.accountsWithCode ? 550 : 400,
            emptyText:WtfGlobal.getLocaleText("acc.accPref.emptyText"),
            allowBlank:false
        });
        var cm = [
            {
            header: WtfGlobal.getLocaleText("acc.masterConfig.costCenter.name"), //" Name*",
                    dataIndex: 'discountname',
                    editor:new Wtf.form.TextField({
                            allowBlank:false,
                            maxLength:50,
                            allowBlank:false
                        })
            }, {
            header: WtfGlobal.getLocaleText("acc.invset.header.7"), //"Description",
                    dataIndex: 'discountdescription',
                    editor:new Wtf.form.TextField({
                            allowBlank:true
                    })
            }, {
            header: WtfGlobal.getLocaleText("acc.masterConfig.DiscountType"), //"Discount Type*",
                    dataIndex: 'discounttype',
                    editor:this.discountTypeCmb,
                    renderer:Wtf.comboBoxRendererwithClearFilter(this.discountTypeCmb)
        }, {
            header: WtfGlobal.getLocaleText("acc.field.Value*"), //"Value*",
                    dataIndex: 'discountvalue',
                    editor:new Wtf.form.NumberField({
                        allowBlank: false,
                        allowNegative:false,
                        maxLength:15,
                        decimalPrecision:Wtf.AMOUNT_DIGIT_AFTER_DECIMAL
                    })
            }, {
            header: WtfGlobal.getLocaleText("acc.masterConfig.discountAccount*"), //"Account*",
                    dataIndex: 'discountaccount',
                    editor:this.discountAccountCmb,
                    renderer:Wtf.comboBoxRenderer(this.discountAccountCmb)
            }
        ];
        Wtf.discountmasterRec = new Wtf.data.Record.create([
            {
                name: 'discountid'
            }, {
                name: 'discountname'
            }, {
                name: 'discountdescription'
            }, {
                name: 'discounttype'
            }, {
                name:'discountvalue'
            }, {
                name:'discountaccount'
            }
//            ,{
//                name:'dmid'
//            }
        ]);
        Wtf.discountMasterStore = new Wtf.data.Store({
                reader: new Wtf.data.KwlJsonReader({
                        root: "data",
                        totalProperty: "count"
            }, Wtf.discountmasterRec),
            url : "AccDiscountController/getDiscountMaster.do",
            baseParams:{
                        companyid:companyid
            }
        });
        this.dgStore.load();
        this.dgStore.on('load',function(){
            Wtf.discountMasterStore.load();
        },this);
        
        new Wtf.account.GridUpdateWindow({
            mode:Wtf.DISCOUNT_MASTER_MODE,                       //Discount Master mode
            store:Wtf.discountMasterStore,
            discountAccountStore:this.dgStore,
            headerImage:"../../images/accounting_image/price-list.gif",
            record:Wtf.discountmasterRec,
            cm:cm,
            title:WtfGlobal.getLocaleText("acc.masterConfig.discountMasterSales"),
            id:winid,
            addDeleteCol: true,
            renderTo: document.body
        }).show();
    }
}
