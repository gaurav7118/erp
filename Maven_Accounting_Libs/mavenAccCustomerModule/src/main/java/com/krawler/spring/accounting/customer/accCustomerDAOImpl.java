/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.krawler.spring.accounting.customer;

import com.krawler.common.admin.*;
import com.krawler.common.dao.BaseDAO;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.StringUtil;
import com.krawler.esp.utils.ConfigReader;
import com.krawler.hql.accounting.*;
import com.krawler.spring.accounting.account.accAccountDAOImpl;

import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.sql.SQLException;
import java.util.*;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.http.HttpServletRequest;

/**
 *
 * @author krawler
 */

public class accCustomerDAOImpl extends BaseDAO implements accCustomerDAO {

    public KwlReturnObject addCustomer(HashMap request) {
        KwlReturnObject result;
        try {
            Customer customer = new Customer();
            if (request.containsKey("synchedfromotherapp")) {
                customer.setSynchedFromOtherApp((Boolean) request.get("synchedfromotherapp"));
            }
            if (request.containsKey("creationDate")) {
                customer.setCreatedOn((Date) request.get("creationDate"));
            }
            if (request.containsKey("accountid")) {
                Account account = (Account) get(Account.class, (String) request.get("accountid"));
                customer.setAccount(account);
                if (account != null) {
                    String usedin = account.getUsedIn();
                    account.setUsedIn(StringUtil.getUsedInValue(usedin, Constants.Customer_Default_Account));
                }
            }
            if (request.containsKey(Constants.SEQFORMAT) && request.get(Constants.SEQFORMAT)!=null) {   //sometimes sequenceformat may have null
                customer.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) request.get(Constants.SEQFORMAT)));
            }
            if (request.containsKey(Constants.SEQNUMBER)) {
                customer.setSeqnumber(Integer.parseInt(request.get(Constants.SEQNUMBER).toString()));
            }
            if (request.containsKey(Constants.DATEPREFIX) && request.get(Constants.DATEPREFIX) !=null) {
                customer.setDatePreffixValue((String) request.get(Constants.DATEPREFIX));
            }
            if (request.containsKey(Constants.DATEAFTERPREFIX) && request.get(Constants.DATEAFTERPREFIX) !=null) {
                customer.setDateAfterPreffixValue((String) request.get(Constants.DATEAFTERPREFIX));
            }
            if (request.containsKey(Constants.DATESUFFIX) && request.get(Constants.DATESUFFIX) !=null) {
                customer.setDateSuffixValue((String) request.get(Constants.DATESUFFIX));
            }
            if (request.containsKey("autogenerated")) {
                customer.setAutoGenerated((Boolean) request.get("autogenerated"));
            }
            if (request.containsKey("isPermOrOnetime")) {
                customer.setIsPermOrOnetime(Boolean.FALSE.parseBoolean(String.valueOf(request.get("isPermOrOnetime"))));
            }
            if (request.containsKey("acccode")) {
                if (request.get("acccode") != null) {
                    customer.setAcccode((String) request.get("acccode"));
                }
            }
            if (request.containsKey("sezfromdate") && request.get("sezfromdate") != null) {
                customer.setSezFromDate((Date) request.get("sezfromdate"));
            }
            if (request.containsKey("seztodate") && request.get("seztodate") != null) {
                customer.setSezToDate((Date) request.get("seztodate"));
            }
            if (request.containsKey("title")) {
                customer.setTitle((String) request.get("title"));
            }
            if (request.containsKey("accname")) {
                customer.setName((String) request.get("accname"));
            }
            if (request.containsKey("aliasname")) {
                customer.setAliasname((String) request.get("aliasname"));
            }
            if (request.containsKey("bankaccountno")) {
                customer.setBankaccountno((String) request.get("bankaccountno"));
            }
            if (request.containsKey("other")) {
                customer.setOther((String) request.get("other"));
            }
            if (request.containsKey("taxno")) {
                customer.setTaxNo((String) request.get("taxno"));
            }
            if (request.containsKey("overseas")) {
                customer.setOverseas((Boolean) request.get("overseas"));
            }
            if (request.containsKey("mapcustomervendor")) {
                customer.setMapcustomervendor((Boolean) request.get("mapcustomervendor"));
            }
            if (request.containsKey("termid")) {
                customer.setCreditTerm((Term) get(Term.class, (String) request.get("termid")));
            }
            if (request.containsKey("mappingSalesPersonId") && request.get("mappingSalesPersonId") != null) {
                customer.setMappingSalesPerson((MasterItem) get(MasterItem.class, (String) request.get("mappingSalesPersonId")));
            }
            
            if (request.containsKey("mappingReceivedFromId") && request.get("mappingReceivedFromId") != null) {
                customer.setMappingReceivedFrom((MasterItem) get(MasterItem.class, (String) request.get("mappingReceivedFromId")));
            }
            
            if (request.containsKey("mappingPaidTo") && request.get("mappingPaidTo") != null) {
                customer.setMappingPaidTo((MasterItem) get(MasterItem.class, (String) request.get("mappingPaidTo")));
            }
            
            if (request.containsKey("iscutomeravailableonlytosalespersons") && request.get("iscutomeravailableonlytosalespersons") != null) {
                customer.setIsCusotmerAvailableOnlyToSalespersons(Boolean.parseBoolean(request.get("iscutomeravailableonlytosalespersons").toString()));
            }
            if (request.containsKey("taxId") && request.get("taxId") != null) {
                customer.setTaxid((String) request.get("taxId"));
            }
            if (request.containsKey("companyid")&& request.get("companyid") != null) {
                customer.setCompany((Company) get(Company.class, (String) request.get("companyid")));
            }
            if (request.containsKey("country")&& request.get("country") != null) {
                customer.setCountry((Country) get(Country.class, (String) request.get("country")));
            }
            if (request.containsKey("creditLimit")&& request.get("creditLimit") != null) {
                customer.setCreditlimit(Double.parseDouble((String) request.get("creditLimit")));
            }
            if (request.containsKey("parentid") && request.get("parentid") != null) {
                customer.setParent((Customer) get(Customer.class, (String) request.get("parentid")));
            }
            if (request.containsKey("intercompanyflag")&& request.get("intercompanyflag") != null) {
                customer.setIntercompanyflag((Boolean) request.get("intercompanyflag"));
            }
            if (request.containsKey("intercompanytype")&& request.get("intercompanytype") != null) {
                customer.setIntercompanytype((MasterItem) get(MasterItem.class, (String) request.get("intercompanytype")));
            }
            if (request.containsKey("currencyid")&& request.get("currencyid") != null) {
                customer.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) request.get("currencyid")));
            }
            if (request.containsKey("crmaccountid")&& request.get("crmaccountid") != null) {
                customer.setCrmaccountid((String) request.get("crmaccountid"));
            }
            if(request.containsKey("paymentmethod") && request.get("paymentmethod") != null){                //ERM-735 Set default payment method.
                customer.setDefaultPaymentMethod((String)request.get("paymentmethod"));
            }
            if (request.containsKey("paymentCriteria") && request.get("paymentCriteria") != null) {
                 customer.setPaymentCriteria(Integer.parseInt(request.get("paymentCriteria").toString()));
            }
            if (request.containsKey("companyRegistrationNumber") && request.get("companyRegistrationNumber") != null) {
                customer.setCompanyRegistrationNumber((String) request.get("companyRegistrationNumber"));
            }
            if (request.containsKey("employmentStatus") && request.get("employmentStatus") != null) {
                customer.setEmploymentStatus((String) request.get("employmentStatus"));
            }
            if (request.containsKey("employerName") && request.get("employerName") != null) {
                customer.setEmployerName((String) request.get("employerName"));
            }
            if (request.containsKey("companyAddress") && request.get("companyAddress") != null) {
                customer.setCompanyAddress((String) request.get("companyAddress"));
            }
            if (request.containsKey("occupationAndYears") && request.get("occupationAndYears") != null) {
                customer.setOccupation((String) request.get("occupationAndYears"));
            }
            if (request.containsKey("noofActiveCreditLoans") && request.get("noofActiveCreditLoans") != null) {
                customer.setNoofActiveCreditLoans((String) request.get("noofActiveCreditLoans"));
            }
            if (request.containsKey("monthlyIncome") && request.get("monthlyIncome") != null) {
                customer.setIncome((Double) request.get("monthlyIncome"));
            }
            
            if (request.containsKey("gstRegistrationNumber") && request.get("gstRegistrationNumber") != null) {
                customer.setGstRegistrationNumber((String) request.get("gstRegistrationNumber"));
            }
            if (request.containsKey("pricingBand") && request.get("pricingBand") != null) {
                customer.setPricingBandMaster((PricingBandMaster) get(PricingBandMaster.class, (String) request.get("pricingBand")));
            }
            if (request.containsKey("uenno") && request.get("uenno") != null) {
                customer.setUENNumber((String) request.get("uenno"));
            }
            if (request.containsKey("vattinno") && request.get("vattinno") != null) {
                customer.setVATTINnumber((String) request.get("vattinno"));
            }
            if (request.containsKey("csttinno") && request.get("csttinno") != null) {
                customer.setCSTTINnumber((String) request.get("csttinno"));
            }
            if (request.containsKey("servicetaxno") && request.get("servicetaxno") != null) {
                customer.setSERVICEnumber((String) request.get("servicetaxno"));
            }
            if (request.containsKey("tanno") && request.get("tanno") != null) {
                customer.setTANnumber((String) request.get("tanno"));
            }
            if (request.containsKey("eccno") && request.get("eccno") != null) {
                customer.setECCnumber((String) request.get("eccno"));
            }
            if (request.containsKey("panno") && request.get("panno") != null) {
                customer.setPANnumber((String) request.get("panno"));
            }
            if (request.containsKey("panstatus") && request.get("panstatus") != null) {
                customer.setPanStatus((String) request.get("panstatus"));
            }
            if (request.containsKey("deducteetype") && request.get("deducteetype") != null) {
                customer.setDeducteeType((String) request.get("deducteetype"));
            }
            if (request.containsKey("residentialstatus") && !StringUtil.isNullOrEmpty(request.get("residentialstatus").toString()) ) {
                customer.setResidentialstatus((int)request.get("residentialstatus"));
            }
            if (request.containsKey("createdInVendor") && request.get("createdInVendor") != null) {
                customer.setCreatedInVendor(Boolean.parseBoolean(request.get("createdInVendor").toString()));
            }
            if (request.containsKey("parentCompanyCustomerID") && request.get("parentCompanyCustomerID") != null) {
                customer.setPropagatedCustomerID((Customer) get(Customer.class, (String) request.get("parentCompanyCustomerID")));
            }
            if (request.containsKey("interstateparty")&& request.get("interstateparty") != null) {
                customer.setInterstateparty((Boolean) request.get("interstateparty"));
            }
            if (request.containsKey("cformapplicable")&& request.get("cformapplicable") != null) {
                customer.setCformapplicable((Boolean) request.get("cformapplicable")); 
            }
            if (request.containsKey("isTDSapplicableoncust")&& request.get("isTDSapplicableoncust") != null) {
                customer.setIsTDSapplicableoncust((Boolean) request.get("isTDSapplicableoncust")); 
            }
            if (request.containsKey("dealertype") && request.get("dealertype") != null) {
                customer.setDealertype((String) request.get("dealertype"));
            }
            if (request.containsKey("vatregdate")&& request.get("vatregdate") != null) {
                customer.setVatregdate((Date) request.get("vatregdate"));
            }
            if (request.containsKey("cstregdate")&& request.get("cstregdate") != null) {
                customer.setCSTRegDate((Date) request.get("cstregdate"));
            }
            if (request.containsKey("commissionerate") && request.get("commissionerate") != null) {
                customer.setCommissionerate((String) request.get("commissionerate"));
            }
            if (request.containsKey("defaultnatureofpurchase") && request.get("defaultnatureofpurchase") != null) {
                customer.setDefaultnatureOfPurchase((String) request.get("defaultnatureofpurchase"));
            }
            if (request.containsKey("division") && request.get("division") != null) {
                customer.setDivision((String) request.get("division"));
            }
            if (request.containsKey("iecno") && request.get("iecno") != null) {
                customer.setIECNo((String) request.get("iecno"));
            }
            if (request.containsKey("importereccno") && request.get("importereccno") != null) {
                customer.setImporterECCNo((String) request.get("importereccno"));
            }
            if (request.containsKey("range") && request.get("range") != null) {
                customer.setRangecode((String) request.get("range"));
            }
            if (request.containsKey("gstin") && request.get("gstin") != null) {
                customer.setGSTIN((String) request.get("gstin"));
            }
            customer.setPreferedDeliveryMode(StaticValues.PDM_EMAIL);
            if (request.containsKey("deliveryDate") && request.get("deliveryDate") != null) {
                customer.setDeliveryDate((Integer) request.get("deliveryDate"));
            }
            if (request.containsKey("deliveryTime") && request.get("deliveryTime") != null) {
                customer.setDeliveryTime((String) request.get("deliveryTime"));
            }
            if (request.containsKey("vehicleNo") && request.get("vehicleNo") != null) {
                customer.setVehicleNo((MasterItem) get(MasterItem.class, (String) request.get("vehicleNo")));
            }
            if (request.containsKey("driver") && request.get("driver") != null) {
                customer.setDriver((MasterItem) get(MasterItem.class, (String) request.get("driver")));
            }
            if (request.containsKey("GSTINRegistrationTypeId") && request.get("GSTINRegistrationTypeId") != null && !StringUtil.isNullOrEmpty(request.get("GSTINRegistrationTypeId").toString())) {
                customer.setGSTRegistrationType((MasterItem) get(MasterItem.class, (String) request.get("GSTINRegistrationTypeId")));
            }
            if (request.containsKey("CustomerVendorTypeId") && request.get("CustomerVendorTypeId") != null && !StringUtil.isNullOrEmpty(request.get("CustomerVendorTypeId").toString())) {
                customer.setGSTCustomerType((MasterItem) get(MasterItem.class, (String) request.get("CustomerVendorTypeId")));
            }
//            if (Integer.parseInt(request.getParameter("pdm")) == StaticValues.PDM_PRINT) {
//                customer.setPreferedDeliveryMode(StaticValues.PDM_PRINT);
//            }

            saveOrUpdate(customer);
            
            List resultlist = new ArrayList();
            resultlist.add(customer);
            result = new KwlReturnObject(true, null, null, resultlist, resultlist.size());
        } catch (Exception ex) {
            result = new KwlReturnObject(false, "accCustomerDAOImpl.addCustomer:" + ex.getMessage(), null, null, 0);
        }
          return result;
    }
    
    public KwlReturnObject updateCustomer(HashMap request) {
        KwlReturnObject result;
        try {
            String customerid = (String) request.get("accid");
            Customer customer = (Customer) get(Customer.class, customerid);
            if (request.containsKey("creationDate")) {
                customer.setModifiedOn((Date) request.get("creationDate"));
            }
            if (request.containsKey("accountid")) {
                Account account = (Account) get(Account.class, (String) request.get("accountid"));
                customer.setAccount(account);
                if (account != null) {
                    String usedin = account.getUsedIn();
                    account.setUsedIn(StringUtil.getUsedInValue(usedin, Constants.Customer_Default_Account));
                }
            }
            if (request.containsKey(Constants.SEQFORMAT)) {
                customer.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) request.get(Constants.SEQFORMAT)));
            }
            if (request.containsKey(Constants.SEQNUMBER)) {
                customer.setSeqnumber(Integer.parseInt(request.get(Constants.SEQNUMBER).toString()));
            }
            if (request.containsKey(Constants.DATEPREFIX) && request.get(Constants.DATEPREFIX) !=null) {
                customer.setDatePreffixValue((String) request.get(Constants.DATEPREFIX));
            }
            if (request.containsKey(Constants.DATEAFTERPREFIX) && request.get(Constants.DATEAFTERPREFIX) !=null) {
                customer.setDateAfterPreffixValue((String) request.get(Constants.DATEAFTERPREFIX));
            }
            if (request.containsKey(Constants.DATESUFFIX) && request.get(Constants.DATESUFFIX) !=null) {
                customer.setDateSuffixValue((String) request.get(Constants.DATESUFFIX));
            }
            if (request.containsKey("autogenerated")) {
                customer.setAutoGenerated((Boolean) request.get("autogenerated"));
            }
            if (request.containsKey("mappingReceivedFromId") && request.get("mappingReceivedFromId") != null) {
                customer.setMappingReceivedFrom((MasterItem) get(MasterItem.class, (String) request.get("mappingReceivedFromId")));
            }
            if (request.containsKey("mappingPaidTo") && request.get("mappingPaidTo") != null) {
                customer.setMappingPaidTo((MasterItem) get(MasterItem.class, (String) request.get("mappingPaidTo")));
            }
            if (request.containsKey("acccode")) {
                if (request.get("acccode") != null) {
                    customer.setAcccode((String) request.get("acccode"));
                }
            }
            if (request.containsKey("isPermOrOnetime") && request.get("isPermOrOnetime") != null) {
                customer.setIsPermOrOnetime(Boolean.FALSE.parseBoolean(String.valueOf(request.get("isPermOrOnetime"))));
            }
            if (request.containsKey("sezfromdate") && request.get("sezfromdate") != null) {
                customer.setSezFromDate((Date) request.get("sezfromdate"));
            }
            if (request.containsKey("seztodate") && request.get("seztodate") != null) {
                customer.setSezToDate((Date) request.get("seztodate"));
            }
            if (request.containsKey("taxId") && request.get("taxId") != null) {
                customer.setTaxid((String) request.get("taxId"));
            }
            if (request.containsKey("title") && request.get("title") != null) {
                customer.setTitle((String) request.get("title"));
            }
            if (request.containsKey("accname") && request.get("accname") != null) {
                customer.setName((String) request.get("accname"));
            }
            if (request.containsKey("aliasname") && request.get("aliasname") != null) {
                customer.setAliasname((String) request.get("aliasname"));
            }
            if (request.containsKey("bankaccountno") && request.get("bankaccountno") != null) {
                customer.setBankaccountno((String) request.get("bankaccountno"));
            }
            if (request.containsKey("other") && request.get("other") != null) {
                customer.setOther((String) request.get("other"));
            }
            if (request.containsKey("taxno") && request.get("taxno") != null) {
                customer.setTaxNo((String) request.get("taxno"));
            }
            if (request.containsKey("overseas") && request.get("overseas") != null) {
                customer.setOverseas((Boolean) request.get("overseas"));
            }
            if (request.containsKey("mapcustomervendor") && request.get("mapcustomervendor") != null) {
                customer.setMapcustomervendor((Boolean) request.get("mapcustomervendor"));
            }
            if (request.containsKey("termid") && request.get("termid") != null) {
                customer.setCreditTerm((Term) get(Term.class, (String) request.get("termid")));
            }
            if (request.containsKey("mappingSalesPersonId") && request.get("mappingSalesPersonId") != null) {
                customer.setMappingSalesPerson((MasterItem) get(MasterItem.class, (String) request.get("mappingSalesPersonId")));
            }
            if (request.containsKey("iscutomeravailableonlytosalespersons") && request.get("iscutomeravailableonlytosalespersons") != null) {
                customer.setIsCusotmerAvailableOnlyToSalespersons(Boolean.parseBoolean(request.get("iscutomeravailableonlytosalespersons").toString()));
            }
            if (request.containsKey("companyid")) {
                customer.setCompany((Company) get(Company.class, (String) request.get("companyid")));
            }
            if (request.containsKey("country")) {
                customer.setCountry((Country) get(Country.class, (String) request.get("country")));
            }
            if (request.containsKey("creditLimit")&& request.get("creditLimit") != null) {
                customer.setCreditlimit(Double.parseDouble((String) request.get("creditLimit")));
            }
            if (request.containsKey("parentid")) {
                if (request.get("parentid") != null) {
                    customer.setParent((Customer) get(Customer.class, (String) request.get("parentid")));
                } else {
                    customer.setParent(null);
                }
            }
            if (request.containsKey("acccustomercustomdataref") && request.get("acccustomercustomdataref") != null) {
                CustomerCustomData accCustomerCustomData = null;
                accCustomerCustomData = (CustomerCustomData) get(CustomerCustomData.class, (String) request.get("acccustomercustomdataref"));
                customer.setAccCustomerCustomData(accCustomerCustomData);
            }
            customer.setPreferedDeliveryMode(StaticValues.PDM_EMAIL);
//            if (Integer.parseInt(request.getParameter("pdm")) == StaticValues.PDM_PRINT) {
//                customer.setPreferedDeliveryMode(StaticValues.PDM_PRINT);
//            }
            if (request.containsKey("intercompanyflag")&& request.get("intercompanyflag") != null) {
                customer.setIntercompanyflag((Boolean) request.get("intercompanyflag"));
            }
            if (request.containsKey("isTDSapplicableoncust")&& request.get("isTDSapplicableoncust") != null) {
                customer.setIsTDSapplicableoncust((Boolean) request.get("isTDSapplicableoncust"));
            }
            if (request.containsKey("intercompanytype")&& request.get("intercompanytype") != null) {
                customer.setIntercompanytype((MasterItem) get(MasterItem.class, (String) request.get("intercompanytype")));
            }
            if (request.containsKey("currencyid")&& request.get("currencyid") != null) {
                customer.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) request.get("currencyid")));
            }
            if (request.containsKey("crmaccountid")&& request.get("crmaccountid") != null) {
                customer.setCrmaccountid((String) request.get("crmaccountid"));
            }
            if(request.containsKey("paymentmethod") && request.get("paymentmethod") != null){                //ERM-735 Set default payment method.
                customer.setDefaultPaymentMethod((String)request.get("paymentmethod"));
            }
            if (request.containsKey("paymentCriteria") && request.get("paymentCriteria") != null) {
                customer.setPaymentCriteria(Integer.parseInt(request.get("paymentCriteria").toString()));
            }
            if (request.containsKey("companyRegistrationNumber") && request.get("companyRegistrationNumber") != null) {
                customer.setCompanyRegistrationNumber((String) request.get("companyRegistrationNumber"));
            }
             if (request.containsKey("employmentStatus") && request.get("employmentStatus") != null) {
                customer.setEmploymentStatus((String) request.get("employmentStatus"));
            }
            if (request.containsKey("employerName") && request.get("employerName") != null) {
                customer.setEmployerName((String) request.get("employerName"));
            }
            if (request.containsKey("companyAddress") && request.get("companyAddress") != null) {
                customer.setCompanyAddress((String) request.get("companyAddress"));
            }
            if (request.containsKey("occupationAndYears") && request.get("occupationAndYears") != null) {
                customer.setOccupation((String) request.get("occupationAndYears"));
            }
            if (request.containsKey("noofActiveCreditLoans") && request.get("noofActiveCreditLoans") != null) {
                customer.setNoofActiveCreditLoans((String) request.get("noofActiveCreditLoans"));
            }
            if (request.containsKey("monthlyIncome") && request.get("monthlyIncome") != null) {
                customer.setIncome((Double) request.get("monthlyIncome"));
            }
            if (request.containsKey("gstRegistrationNumber") && request.get("gstRegistrationNumber") != null) {
                customer.setGstRegistrationNumber((String) request.get("gstRegistrationNumber"));
            }
            if (request.containsKey("pricingBand") && request.get("pricingBand") != null) {
                customer.setPricingBandMaster((PricingBandMaster) get(PricingBandMaster.class, (String) request.get("pricingBand")));
            }
            if (request.containsKey("uenno") && request.get("uenno") != null) {
                customer.setUENNumber((String) request.get("uenno"));
            }
            if (request.containsKey("vattinno") && request.get("vattinno") != null) {
                customer.setVATTINnumber((String) request.get("vattinno"));
            }
            if (request.containsKey("csttinno") && request.get("csttinno") != null) {
                customer.setCSTTINnumber((String) request.get("csttinno"));
            }
            if (request.containsKey("panno") && request.get("panno") != null) {
                customer.setPANnumber((String) request.get("panno"));
            }
            if (request.containsKey("panstatus") && request.get("panstatus") != null) {
                customer.setPanStatus((String) request.get("panstatus"));
            }
            if (request.containsKey("deducteetype") && request.get("deducteetype") != null) {
                customer.setDeducteeType((String) request.get("deducteetype"));
            }
            if (request.containsKey("residentialstatus") && !StringUtil.isNullOrEmpty((String)request.get("residentialstatus").toString())) {
                customer.setResidentialstatus((int)request.get("residentialstatus"));
            }
            if (request.containsKey("servicetaxno") && request.get("servicetaxno") != null) {
                customer.setSERVICEnumber((String) request.get("servicetaxno"));
            }
            if (request.containsKey("tanno") && request.get("tanno") != null) {
                customer.setTANnumber((String) request.get("tanno"));
            }
            if (request.containsKey("eccno") && request.get("eccno") != null) {
                customer.setECCnumber((String) request.get("eccno"));
            }
            if (request.containsKey("parentCompanyCustomerID") && request.get("parentCompanyCustomerID") != null) {
                customer.setPropagatedCustomerID((Customer) get(Customer.class, (String) request.get("parentCompanyCustomerID")));
            }
            if (request.containsKey("interstateparty")&& request.get("interstateparty") != null) {
                customer.setInterstateparty((Boolean) request.get("interstateparty"));
            }
            if (request.containsKey("cformapplicable")&& request.get("cformapplicable") != null) {
                customer.setCformapplicable((Boolean) request.get("cformapplicable"));
            }
            if (request.containsKey("dealertype") && request.get("dealertype") != null) {
                customer.setDealertype((String) request.get("dealertype"));
            }
            if (request.containsKey("vatregdate") && request.get("vatregdate") != null) {
                customer.setVatregdate((Date) request.get("vatregdate"));
            }
            if (request.containsKey("cstregdate")&& request.get("cstregdate") != null) {
                customer.setCSTRegDate((Date) request.get("cstregdate"));
            }
            if (request.containsKey("deliveryDate") && request.get("deliveryDate") != null) {
                customer.setDeliveryDate((Integer) request.get("deliveryDate"));
            }
            if (request.containsKey("deliveryTime") && request.get("deliveryTime") != null) {
                customer.setDeliveryTime((String) request.get("deliveryTime"));
            }
            if (request.containsKey("vehicleNo") && request.get("vehicleNo") != null) {
                customer.setVehicleNo((MasterItem) get(MasterItem.class, (String) request.get("vehicleNo")));
            }
            if (request.containsKey("driver") && request.get("driver") != null) {
                customer.setDriver((MasterItem) get(MasterItem.class, (String) request.get("driver")));
            }
            if (request.containsKey("commissionerate") && request.get("commissionerate") != null) {
                customer.setCommissionerate((String) request.get("commissionerate"));
            }
            if (request.containsKey("defaultnatureofpurchase") && request.get("defaultnatureofpurchase") != null) {
                customer.setDefaultnatureOfPurchase((String) request.get("defaultnatureofpurchase"));
            }
            if (request.containsKey("division") && request.get("division") != null) {
                customer.setDivision((String) request.get("division"));
            }
            if (request.containsKey("iecno") && request.get("iecno") != null) {
                customer.setIECNo((String) request.get("iecno"));
            }
            if (request.containsKey("importereccno") && request.get("importereccno") != null) {
                customer.setImporterECCNo((String) request.get("importereccno"));
            }
            if (request.containsKey("range") && request.get("range") != null) {
                customer.setRangecode((String) request.get("range"));
            }
            if (request.containsKey("gstin") && request.get("gstin") != null) {
                customer.setGSTIN((String) request.get("gstin"));
            }
            if (request.containsKey("GSTINRegistrationTypeId") && request.get("GSTINRegistrationTypeId") != null && !StringUtil.isNullOrEmpty(request.get("GSTINRegistrationTypeId").toString())) {
                customer.setGSTRegistrationType((MasterItem) get(MasterItem.class, (String) request.get("GSTINRegistrationTypeId")));
            }
            if (request.containsKey("CustomerVendorTypeId") && request.get("CustomerVendorTypeId") != null && !StringUtil.isNullOrEmpty(request.get("CustomerVendorTypeId").toString())) {
                customer.setGSTCustomerType((MasterItem) get(MasterItem.class, (String) request.get("CustomerVendorTypeId")));
            }
            saveOrUpdate(customer);
            
            List resultlist = new ArrayList();
            resultlist.add(customer);
            result = new KwlReturnObject(true, null, null, resultlist, resultlist.size());
        } catch (Exception ex) {
            result = new KwlReturnObject(false, "accCustomerDAOImpl.updateCustomer:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }

//    public KwlReturnObject getCustomerObj(String customerid) {
//        List list = new ArrayList();
//        Customer customer = (Customer) get(Customer.class, customerid);
//        list.add(customer);
//        return new KwlReturnObject(true, null, null, list, list.size());
//    }
    public KwlReturnObject getCustomer_Dashboard(String companyid, boolean isnull, String orderby, int start, int limit) throws ServiceException {
        List list = new ArrayList();
        String condition = isnull ? "modifiedOn is null" : "modifiedOn is not null";

//        query="from Customer where company.companyID=? and modifiedOn is null order by createdOn";
//        query="from Customer where company.companyID=? and modifiedOn is not null order by modifiedOn";

        String query = "from Customer where company.companyID=? and " + condition + " order by " + orderby + " desc";
        list = executeQueryPaging( query, new Object[]{companyid}, new Integer[]{start, limit});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject activateDeactivateCustomers(HashMap request) throws ServiceException{
        List list = new ArrayList();
        try {
            JSONArray jArr = new JSONArray((String) request.get("data"));
            boolean customerActivateDeactivateFlag = (Boolean) request.get("customerActivateDeactivateFlag");
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                if (!StringUtil.isNullOrEmpty(jobj.getString("accid"))) {
                    Customer customerObj = (Customer) get(Customer.class, jobj.getString("accid"));
                    if (customerObj != null) {
                        customerObj.setActivate(customerActivateDeactivateFlag);
                        update(customerObj);
                        list.add(customerObj);
                    }
                }
            }
        }  catch (JSONException ex) {
            Logger.getLogger(accAccountDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject deleteCustomer(String accountid, String companyid) throws ServiceException {
        String delQuery = "delete from Customer c where c.ID=? and c.company.companyID=?";
        int numRows = executeUpdate( delQuery, new Object[]{accountid, companyid});
        int numRows1 = deleteCustomerCustomData(accountid, companyid);
        return new KwlReturnObject(true, "Customer has been deleted successfully.", null, null, numRows + numRows1);
    }
    
    public KwlReturnObject checkCustomerExist(String crmaccountid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String selQuery = "from Customer c where c.crmaccountid=? and c.company.companyID=?";
        list = executeQuery( selQuery, new Object[]{crmaccountid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject checkCustomerExistbyCode(String accountid, String companyid) throws ServiceException {
        return checkCustomerExistbyCode(accountid, companyid, "");  //as it defaults to send empty string
    }
    
    @Override
    public KwlReturnObject checkCustomerExistbyCode(String accountid, String companyid, String exceptCustomerId) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String selQuery = "from Customer c where c.acccode=? and c.company.companyID=?";
        params.add(accountid);
        params.add(companyid);
        if(!StringUtil.isNullOrEmpty(exceptCustomerId)) {
            selQuery += " and ID<>?";
            params.add(exceptCustomerId);
        }
        list = executeQuery( selQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getDefaultCreditTermForCustomer(String companyid) throws ServiceException {
        List list = new ArrayList();
        String selQuery = "from Term where company.companyID=? and  termname = 'NET 15'";
        list = executeQuery( selQuery, new Object[]{companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public int deleteCustomerCustomData(String accountid, String companyid) throws ServiceException {
        String delQueryForCustomData = "delete from CustomerCustomData c where c.customerId=? and c.company.companyID=?";
        int numRows1 = executeUpdate( delQueryForCustomData, new Object[]{accountid, companyid});
        return numRows1;
    }
    
    public KwlReturnObject getCustomerForAgedReceivable(HashMap request) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(request.get("companyid"));
        String condition = "";
        String customerid = (String) request.get("custVendorID");
        String customerIdFinal = "";
        if (customerid != null) {
            if (customerid.equalsIgnoreCase("All") || customerid.equals("")) {       //for giving the functionality to select all 
                customerIdFinal = "";
            } else {
                for (String customeridObj : customerid.split(",")) {
                    customerIdFinal += "'" + customeridObj + "',";
                }
            }
            if (customerIdFinal.contains(",")) {
                customerIdFinal = customerIdFinal.substring(0, customerIdFinal.lastIndexOf(","));
            }
            if (!StringUtil.isNullOrEmpty(customerIdFinal)) {
                condition += " and c.ID in(" + customerIdFinal + ")";
            }
        }
        String query = "select ID from Customer c where company.companyID= ?" + condition +" Order By name";
        list = executeQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getCustomerWithCurrencyForAgedReceivables(HashMap request) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        try{
        params.add(request.get("companyid"));
        String condition = "";
        String customerid = (String) request.get("custVendorID");
        String customerIdFinal = "";
        if (customerid != null) {
            if (customerid.equalsIgnoreCase("All") || customerid.equals("")) {       //for giving the functionality to select all 
                customerIdFinal = "";
            } else {
                for (String customeridObj : customerid.split(",")) {
                    customerIdFinal += "'" + customeridObj + "',";
                }
            }
            if (customerIdFinal.contains(",")) {
                customerIdFinal = customerIdFinal.substring(0, customerIdFinal.lastIndexOf(","));
            }
            if (!StringUtil.isNullOrEmpty(customerIdFinal)) {
                condition += " and c.ID in(" + customerIdFinal + ")";
            }
        }
        String appendCase = "and";
            String mySearchFilterString = "";
            boolean isdimensionbasedgrouping = false;
            if (request.containsKey("isdimensionbasedgrouping")) {
                isdimensionbasedgrouping = (Boolean) request.get("isdimensionbasedgrouping");
            }
            if (isdimensionbasedgrouping) {
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();
                
                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    request.put(Constants.Searchjson, Searchjson);
                    request.put(Constants.appendCase, appendCase);
                    request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                    mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
                    mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "c.accCustomerCustomData");
                    StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                }
            }
            }
//        String query = "select ID from Customer c where company.companyID= ?" + condition + " Order By name";
        /*Select customer ID and currency details from query*/
        String query = "select ID,account.currency.currencyID,account.currency.name,account.currency.symbol,c.currency.currencyID from Customer c where company.companyID= ?" + condition + mySearchFilterString+" Order By name";
        list = executeQuery( query, params.toArray());
        }catch(Exception ex){
            new KwlReturnObject(false, "accCustomerDAOImpl.getCustomerWithCurrencyForAgedReceivables:" + ex.getMessage(), null, null, 0);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public void saveLoanDisburementRule(LoanRules loanRules) throws ServiceException {
        try {
//            if (!StringUtil.isNullOrEmpty(id)) {
//                String query = "delete from LoanRules lr where lr.ID = ?";
//                int numRows = executeUpdate( query, new Object[]{id});
                saveOrUpdate(loanRules);
//            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("SaveConsignmentApprovalRules : " + ex.getMessage(), ex);
        }
    }
    
    @Override
    public KwlReturnObject getLoanRules(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from LoanRules";
        return buildNExecuteQuery( query, requestParams);
    }

    @Override
    public KwlReturnObject deleteLoanRule(String companyid, String ruleid) throws ServiceException {

        String delQuery = "delete from LoanRules lr where lr.company.companyID = ? and lr.ID = ?";
        int numRows = executeUpdate( delQuery, new Object[]{companyid, ruleid});
        return new KwlReturnObject(true, "Loan rule deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject getCustomerIds(HashMap<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result;
        try {
            ArrayList params = new ArrayList();

            String condition = (requestParams.get("ignore") == null ? "" : " not ");
            String companyid = (String) requestParams.get("companyid");
            params.add(companyid);
            boolean deleted = Boolean.parseBoolean((String) requestParams.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) requestParams.get("nondeleted"));
            String propagatedCustomerID = requestParams.containsKey("propagatedCustomerID") ? (String) requestParams.get("propagatedCustomerID") : "";

            if (requestParams.containsKey("activeDormantFlag") && requestParams.get("activeDormantFlag") != null) {
                String activeDormantFlag = requestParams.get("activeDormantFlag").toString();

                if (activeDormantFlag.equalsIgnoreCase("1")) {
                    condition += " and ct.activate='T' ";
                } else if (activeDormantFlag.equalsIgnoreCase("2")) {
                    condition += " and ct.activate='F' ";
                }
            }

            if (nondeleted) {
                condition += " and ct.account.deleted=false ";
            } else if (deleted) {
                condition += " and ct.account.deleted=true ";
            }
            if (!StringUtil.isNullOrEmpty(propagatedCustomerID)) {
                condition += " and ct.propagatedCustomerID.ID=? ";
                params.add(propagatedCustomerID);
            }

            String appendCase = "and";
            String searchJoin = "";
            String searchDefaultFieldSQL = "";
            String mySearchFilterString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         * Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, Constants.CUSTOMER_MODULE_UUID, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchDefaultFieldSQL = searchDefaultFieldSQL.replaceAll("customerRef", "ct");
                    }
                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        requestParams.put(Constants.Searchjson, Searchjson);
                        requestParams.put(Constants.appendCase, appendCase);
                        requestParams.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(requestParams, true).get(Constants.myResult));
                        mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "ct.accCustomerCustomData");
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            if (requestParams.containsKey("isPermOrOnetime") && requestParams.get("isPermOrOnetime") != null) {
                condition += " and ct.isPermOrOnetime=" + requestParams.get("isPermOrOnetime").toString();
            }

            String orderBy = " order by ct.name ";
            if (requestParams.containsKey("dir") && requestParams.containsKey("sort")) {
                String Col_Name = requestParams.get("sort").toString();
                String Col_Dir = requestParams.get("dir").toString();
                orderBy = sortCustomers(Col_Name, Col_Dir);
            }
            condition = condition + " ";
            String cntQuery = "select count(ct.ID) from Customer ct where ct.company.companyID=? " +  condition + mySearchFilterString + orderBy;
            String query = "select ct.ID from Customer ct where ct.company.companyID=? "  + condition + mySearchFilterString + orderBy;

            Long totalCount = 0l;
            List cntlist = executeQuery(cntQuery, params.toArray());
            if (cntlist != null && !cntlist.isEmpty()) {
                totalCount = (Long) cntlist.get(0);
            }
            List list = executeQuery(query, params.toArray());
            
            result = new KwlReturnObject(true, null, null, list, totalCount.intValue());
        } catch (Exception ex) {
            result = new KwlReturnObject(false, "accCustomerDAOImpl.getCustomer:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }
    
    
    public KwlReturnObject getCustomer(HashMap<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result;
        try {
            int start = 0;
            int limit = 15;
            boolean pagingFlag = false;
            boolean quickSearchFlag = false;
            if (requestParams.containsKey("start") && requestParams.containsKey("limit") && !StringUtil.isNullOrEmpty(requestParams.get("start").toString())) {
                start = Integer.parseInt(requestParams.get("start").toString());
                limit = Integer.parseInt(requestParams.get("limit").toString());
                pagingFlag = true;
            }
            
            ArrayList params = new ArrayList();
            String[] groups = (String[]) requestParams.get("group");
            
            String condition = (requestParams.get("ignore") == null ? "" : " not ");
            String[] nature = (String[]) requestParams.get("nature");
            String companyid = (String) requestParams.get("companyid");
            params.add(companyid);
            boolean getSundryCustomer = Boolean.parseBoolean((String) requestParams.get("getSundryCustomer"));
            boolean deleted = Boolean.parseBoolean((String) requestParams.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) requestParams.get("nondeleted"));
            String  propagatedCustomerID =requestParams.containsKey("propagatedCustomerID") ?  (String) requestParams.get("propagatedCustomerID") : "";
            String userID = "";
            boolean isenableSalesPersonAgentFlow=false;
            boolean hasViewAllPermission=false;
            boolean isexcludeCustomersChecked=false;
            boolean customerIntegrationFlag = false;
            if (requestParams.containsKey("customerIntegrationFlag") && requestParams.get("customerIntegrationFlag") != null && !StringUtil.isNullOrEmpty(requestParams.get("customerIntegrationFlag").toString())) {
                customerIntegrationFlag = Boolean.parseBoolean(requestParams.get("customerIntegrationFlag").toString());
            }
            if (requestParams.containsKey("enablesalespersonagentflow") && requestParams.get("enablesalespersonagentflow") != null && !StringUtil.isNullOrEmpty(requestParams.get("enablesalespersonagentflow").toString())) {
                isenableSalesPersonAgentFlow = Boolean.parseBoolean(requestParams.get("enablesalespersonagentflow").toString());
            }
            if (isenableSalesPersonAgentFlow) {
                if (requestParams.containsKey("userid") && requestParams.get("userid") != null && !StringUtil.isNullOrEmpty(requestParams.get("userid").toString())) {
                    userID = (String) requestParams.get("userid");
                }

                if (requestParams.containsKey("hasViewAllPermission") && requestParams.get("hasViewAllPermission") != null && !StringUtil.isNullOrEmpty(requestParams.get("hasViewAllPermission").toString())) {
                    hasViewAllPermission = Boolean.parseBoolean(requestParams.get("hasViewAllPermission").toString());
                }
                if (requestParams.containsKey("isexcludeCustomersChecked") && requestParams.get("isexcludeCustomersChecked") != null && !StringUtil.isNullOrEmpty(requestParams.get("isexcludeCustomersChecked").toString())) {
                    isexcludeCustomersChecked = Boolean.parseBoolean(requestParams.get("isexcludeCustomersChecked").toString());
                }

            }
            /*
                IN Query for fetching id specific customers
            */
            String exportcustomers="";
            if (requestParams.containsKey("exportcustomers") && requestParams.get("exportcustomers") != null && !StringUtil.isNullOrEmpty(requestParams.get("exportcustomers").toString())) {
                    exportcustomers = requestParams.get("exportcustomers").toString();
                    exportcustomers=" and ct.ID IN("+exportcustomers+")";
            }
             String ViewAllExcludeCustomerHQL="";
             String JoinQuery="";
             if (isenableSalesPersonAgentFlow  && !StringUtil.isNullOrEmpty(userID)) {
                   JoinQuery=" left Join ct.salesperson spm left join spm.salesperson mi ";  //com.krawler.hql.accounting.SalesPersonMapping
                    /*
                    exculdeCustomerbasedonViewallPerm = true - User has view all permission- In this case show only those customers who are mapped with any user through salesperson mapping
                    viewAllExcludeCustomers = true  : show only those customers to current user to whom he is mapped through salespersonmapping.
                     ERP-27605
                    */
                    if(hasViewAllPermission && isexcludeCustomersChecked){
                        /*
                        When View All permission= true
                          When "View All exclude customers without Sales Person" = true and "View All" = True 
                        Show those customers who are mapped with any user/salesperson.
                        */
                       ViewAllExcludeCustomerHQL=" and mi.user.userID is not null and ct.isCusotmerAvailableOnlyToSalespersons='T'  ";
                    }else if ( !hasViewAllPermission && isexcludeCustomersChecked) {
                        /*
                        When View All permission= false
                        When "View All exclude customers without Sales Person" = true and "View All" = False 
                        Show those customers who are mapped with current user/salesperson.
                        */
                                
                        ViewAllExcludeCustomerHQL="and mi.user.userID='"+userID+"' and ct.isCusotmerAvailableOnlyToSalespersons='T'  ";
                    } else {
                        /*
                        Current bahaviour
                        When "View All exclude customers without Sales Person" = false and "View All" = False 
                        */
                        ViewAllExcludeCustomerHQL=" and ((mi.user.userID='"+userID+"' or mi.user.userID is null  and ct.isCusotmerAvailableOnlyToSalespersons='T' ) or  (ct.isCusotmerAvailableOnlyToSalespersons='F')) ";

                    }
//                   
                }
            
             if (requestParams.containsKey("activeDormantFlag") && requestParams.get("activeDormantFlag") != null) {
                String activeDormantFlag = requestParams.get("activeDormantFlag").toString();

                if (activeDormantFlag.equalsIgnoreCase("1")) {
                    condition += " and ct.activate='T' ";
                } else if (activeDormantFlag.equalsIgnoreCase("2")) {
                    condition += " and ct.activate='F' ";
                }

            }
            if (requestParams.containsKey("ss") && requestParams.get("ss") != null) {
                String ss = requestParams.get("ss").toString();
                ss = ss.replaceAll("%", "////");		// issue for search
                ss = ss.replaceAll("_", "\\_");
                if (!StringUtil.isNullOrEmpty(ss)) {
                    String[] searchcol = new String[]{"ct.name", "ct.acccode", "ct.aliasname", "ct.UENNumber"};
                    Map map = StringUtil.insertParamSearchStringMap(params, ss, 4);
                    StringUtil.insertParamSearchString(map);
                    String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                    condition += searchQuery;
                    quickSearchFlag = true;
                }
            }
            
            //search alphabetically on customer name for android 
            if (requestParams.containsKey(Constants.sortstring) && requestParams.get(Constants.sortstring) != null) {
                String mobilesearch = requestParams.get(Constants.sortstring).toString();
                mobilesearch = mobilesearch.replaceAll("%", "////");
                mobilesearch = mobilesearch.replaceAll("_", "////");
                if (!StringUtil.isNullOrEmpty(mobilesearch)) {
                    if (!mobilesearch.equalsIgnoreCase(Constants.NON_ALPHANUMERIC)) {
                        String[] searchArray = mobilesearch.split(",");
                        String[] searchcol = new String[searchArray.length];

                        for (int i = 0; i < searchArray.length; i++) {
                            searchcol[i] = "ct.name";
                            params.add(searchArray[i].trim() + "%");
                            params.add(searchArray[i].trim() + "%");
                        }

                        String searchQuery = StringUtil.getSearchString(mobilesearch, "and", searchcol);
                        condition += searchQuery;
                        quickSearchFlag = true;
                    } else {
                        /**
                         * sort string key is nonalphanumeric for Customer Name
                         * starts with any Special Characters.
                         */
                        condition += "and ( (ct.name NOT BETWEEN 'a' and 'z') and (ct.name NOT BETWEEN 'A' and 'Z') and (ct.name NOT BETWEEN '0' and '9'))";
                        condition += "and ct.name NOT LIKE 'z%' and ct.name NOT LIKE 'Z%' and ct.name NOT LIKE '9%'";//for excluding EndPoint from Between Condition
                    }
                }
            }
            if (nondeleted) {
                condition += " and ct.account.deleted=false ";
            } else if (deleted) {
                condition += " and ct.account.deleted=true ";
            }
            if (!StringUtil.isNullOrEmpty(propagatedCustomerID)) {
                condition += " and ct.propagatedCustomerID.ID=? ";
                params.add(propagatedCustomerID);
            }
            if (requestParams.containsKey(Constants.customerid) && requestParams.get(Constants.customerid) != null && !StringUtil.isNullOrEmpty(requestParams.get(Constants.customerid).toString())) {
                params.add(requestParams.get(Constants.customerid).toString());
                condition += " and ct.ID=? ";
            }
            
            
            String parentid = "";
            String parentCondition = "";
            KwlReturnObject accResult = getSundryAccount(companyid, false);
//            if(accResult.getEntityList().size() > 0 && accResult.getEntityList().get(0) != null){
//                parentid = (String) accResult.getEntityList().get(0);
//                parentCondition = " ct.parent.ID = '" + parentid + "' or ct.parent is null ";
//                }
//            else {
            if(!customerIntegrationFlag){
                parentCondition = " and ct.parent is null ";
            }
            // }

            if (quickSearchFlag) {
                parentCondition = "";
            }
            
            String appendCase = "and";
            String searchJoin = "";
            String searchDefaultFieldSQL = "";
            String mySearchFilterString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();
                
                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, Constants.CUSTOMER_MODULE_UUID, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
//                        searchJoin += " left join solinking on solinking.docid=salesorder.id and solinking.sourceflag = 1 ";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchDefaultFieldSQL = searchDefaultFieldSQL.replaceAll("customerRef", "ct");
                    }
                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        requestParams.put(Constants.Searchjson, Searchjson);
                        requestParams.put(Constants.appendCase, appendCase);
                        requestParams.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(requestParams, true).get(Constants.myResult));
                        mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "ct.accCustomerCustomData");
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            if (requestParams.containsKey("isPermOrOnetime") && requestParams.get("isPermOrOnetime") != null) {
                condition += " and ct.isPermOrOnetime=" + requestParams.get("isPermOrOnetime").toString();
            }
            
            //Not in query for group company
            if (requestParams.containsKey("notinquery") && requestParams.get("notinquery") != null) {
                String notinquery = (String) requestParams.get("notinquery");
                notinquery = AccountingManager.getFilterInString(notinquery);
                if (!StringUtil.isNullOrEmpty(notinquery)) {
                    condition += " and ct.acccode NOT IN " + notinquery;
                }
            }
            
            String orderBy = " order by ct.name ";
            if (requestParams.containsKey("dir") && requestParams.containsKey("sort")) {
                String Col_Name = requestParams.get("sort").toString();
                String Col_Dir = requestParams.get("dir").toString();
                orderBy = sortCustomers(Col_Name, Col_Dir);
            }
            condition=condition+" ";
            String cntQuery = "select  count(distinct ct.ID) from Customer ct "+ JoinQuery +" where ct.company.companyID=? " + parentCondition + condition + ViewAllExcludeCustomerHQL + mySearchFilterString + orderBy;
            String query = "select distinct ct from Customer ct "+ JoinQuery +" where ct.company.companyID=? " + parentCondition + condition + ViewAllExcludeCustomerHQL + mySearchFilterString + exportcustomers +orderBy;
                
            Long totalCount = 0l;
            List cntlist = executeQuery( cntQuery, params.toArray());
            if (cntlist != null && !cntlist.isEmpty()) {
                totalCount = (Long) cntlist.get(0);
            }
            List list = null;
            if (pagingFlag) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{start, limit});
            } else {
                list = executeQuery( query, params.toArray());
            }
            result = new KwlReturnObject(true, null, null, list, totalCount.intValue());
        } catch (Exception ex) {
            result = new KwlReturnObject(false, "accCustomerDAOImpl.getCustomer:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }
    
    public String sortCustomers(String Col_Name, String Col_Dir) throws ServiceException {
        String orderBy = "";
        if (Col_Name.equals("acccode")) {
            orderBy = " order by ct.acccode " + Col_Dir;
        } else if (Col_Name.equals("accname")) {
            orderBy = " order by ct.name " + Col_Dir;
        } else if (Col_Name.equals("billingAddress1")) {
            orderBy = " order by ct.customerAddresses.billingAddress1 " + Col_Dir;
        } else if (Col_Name.equals("billingEmail1")) {
            orderBy = " order by ct.customerAddresses.billingEmail1 " + Col_Dir;
        } else if (Col_Name.equals("billingMobile1")) {
            orderBy = " order by ct.customerAddresses.billingMobile1 " + Col_Dir;
        } else if (Col_Name.equals("contactno2")) { //Customer UEN
            orderBy = " order by ct.altContactNumber " + Col_Dir;
        } else if (Col_Name.equals("creationDate")) {
            orderBy = " order by ct.createdOn " + Col_Dir;
        } else if (Col_Name.equals("other")) { // GST NUmber/ Other Information 
            orderBy = " order by ct.other " + Col_Dir;
        } else if (Col_Name.equals("termname")) {
            orderBy = " order by ct.creditTerm.termname " + Col_Dir;
        } else if (Col_Name.equals("shippingAddress1")) {
            orderBy = " order by ct.customerAddresses.shippingAddress1 " + Col_Dir;
        } else if (Col_Name.equals("limit")) {
            orderBy = " order by ct.creditlimit " + Col_Dir;
        }
        return orderBy;
    }
    
    
    public String sortCustomersCategory(String Col_Name, String Col_Dir) throws ServiceException {
        String orderBy = "";
        if (Col_Name.equals("acccode")) {
            orderBy = " order by c.acccode " + Col_Dir;             
        } else if (Col_Name.equals("aliasname")) {
            orderBy = " order by c.aliasname " + Col_Dir;
        } else if (Col_Name.equals("name")) {
            orderBy = " order by c.name " + Col_Dir;
        } else if (Col_Name.equals("billingAddress")) {
            orderBy = " order by cad.address " + Col_Dir;
        } else if (Col_Name.equals("billingEmailID")) {
            orderBy = " order by cad.emailid " + Col_Dir;
        } else if (Col_Name.equals("accname")) {
            orderBy = " order by c.name " + Col_Dir;
        }  
        return orderBy;
    }
    
    @Override
    public KwlReturnObject getInactiveCustomer(HashMap<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result;
        try {
            int start = 0;
            int limit = 15;
            boolean pagingFlag = false;
            String conditionSQL = "";
            if (requestParams.containsKey("start") && requestParams.containsKey("limit") && !StringUtil.isNullOrEmpty(requestParams.get("start").toString())) {
                start = Integer.parseInt(requestParams.get("start").toString());
                limit = Integer.parseInt(requestParams.get("limit").toString());
                pagingFlag = true;
            }
            
            ArrayList params = new ArrayList();
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            String companyid = (String) requestParams.get("companyid");
            String ss = (String) requestParams.get("ss");
            String startDate = (String) requestParams.get(Constants.REQ_startdate);
            
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            params.add(df.parse(startDate));
            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 2; i++) {
                    params.add(ss + "%");
                }
                conditionSQL += " and ( cs.name like ? or cs.acccode like ? )";
                
            }
            String mysqlQuery = " select * from customer cs where cs.company='" + companyid + "' and cs.id not in ("
                    + "select DISTINCT(inv.customer) from invoice inv inner join journalentry je on inv.journalentry=je.id where je.entrydate>=? and inv.customer is not null and inv.company='" + companyid + "' "
                    + "UNION select DISTINCT(inv.customer) from invoice inv  where inv.isopeningbalenceinvoice=1 and  inv.creationdate>=? and inv.customer is not null and inv.company='" + companyid + "' "
                    + " UNION select DISTINCT(so.customer) from salesorder so  where so.orderdate>=? and so.company='" + companyid + "' and so.customer is not null "
                    + " UNION select DISTINCT(dor.customer) from deliveryorder dor  where dor.orderdate>=? and dor.company='" + companyid + "' and dor.customer is not null "
                    + " UNION select DISTINCT(cn.customer) from creditnote cn inner join journalentry je on cn.journalentry=je.id where je.entrydate>=? and cn.company='" + companyid + "' and cn.customer is not null "
                    + " UNION select DISTINCT(cn.customer) from creditnote cn where cn.isopeningbalencecn=1 and cn.creationdate>=? and cn.company='" + companyid + "' and cn.customer is not null "
                    + " UNION select DISTINCT(sr.customer) from salesreturn sr  where sr.orderdate>=? and sr.company='" + companyid + "' and  sr.customer is not null "
                    + " UNION select DISTINCT(rp.customer) from receipt rp inner join journalentry je on rp.journalentry=je.id where je.entrydate>=? and rp.company='" + companyid + "' and rp.customer is not null "
                    + " UNION select DISTINCT(rp.customer) from receipt rp  where rp.isopeningbalencereceipt=1 and rp.creationdate>=? and rp.company='" + companyid + "' and rp.customer is not null "
                    + " UNION select DISTINCT(py.customer) from payment py inner join journalentry je on py.journalentry=je.id where je.entrydate>=? and py.company='" + companyid + "' and py.customer is not null "
                    + " UNION select DISTINCT(dn.customer) from debitnote dn inner join journalentry je on dn.journalentry=je.id where je.entrydate>=? and dn.company='" + companyid + "' and dn.customer is not null "
                    + " UNION select DISTINCT(dn.customer) from debitnote dn where  dn.isopeningbalencedn=1 and dn.creationdate>=? and dn.company='" + companyid + "' and dn.customer is not null "
                    + " UNION select DISTINCT(qo.customer) from quotation qo  where qo.quotationdate>=? and qo.company='" + companyid + "' and qo.customer is not null)" + conditionSQL;
            
            List list = executeSQLQuery( mysqlQuery, params.toArray());;
            int totalCount = list.size();
            if (pagingFlag) {
                list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{start, limit});
            }
            result = new KwlReturnObject(true, null, null, list, totalCount);
        } catch (Exception ex) {
            result = new KwlReturnObject(false, "accAccountDAOImpl.getAccounts:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }
    
    @Override
    public KwlReturnObject getCustomerByCode(String customerCode, String companyId) throws ServiceException {
        return getCustomerByCode(customerCode, companyId, null);
    }

    @Override
    public KwlReturnObject getCustomerByCode(String customerCode, String companyId, String crmAccountId) throws ServiceException {
        KwlReturnObject result = null;
        if (!StringUtil.isNullOrEmpty(companyId) && !StringUtil.isNullOrEmpty(customerCode)) {
            ArrayList params = new ArrayList();
            params.add(customerCode);
            params.add(companyId);
            String query = "from Customer where acccode=? and company.companyID=? ";
            if (!StringUtil.isNullOrEmpty(crmAccountId)) {
                query += " and crmaccountid<>? ";
                params.add(crmAccountId);
            }
            List list = executeQuery( query, params.toArray());
            int totalCount = list.size();
            result = new KwlReturnObject(true, null, null, list, totalCount);
        }
        return result;
    }
    
    @Override
    public KwlReturnObject getCustomerByName(String customerName, String companyId) throws ServiceException {
        return getCustomerByName(customerName, companyId, null);
    }

    @Override
    public KwlReturnObject getCustomerByName(String customerName, String companyId, String crmAccountId) throws ServiceException {
        KwlReturnObject result = null;
        if (!StringUtil.isNullOrEmpty(companyId) && !StringUtil.isNullOrEmpty(customerName)) {
            ArrayList params = new ArrayList();
            params.add(customerName);
            params.add(companyId);
            String query = "from Customer where name=? and company.companyID=? ";
            if (!StringUtil.isNullOrEmpty(crmAccountId)) {
                query += " and crmaccountid<>? ";
                params.add(crmAccountId);
            }
            List list = executeQuery( query, params.toArray());
            int totalCount = list.size();
            result = new KwlReturnObject(true, null, null, list, totalCount);
        }
        return result;
    }
    
    @Override
    public KwlReturnObject getCustomerByCodeOrName(String customerCode, String companyId) throws ServiceException {
        KwlReturnObject result = null;
        if (!StringUtil.isNullOrEmpty(companyId) && !StringUtil.isNullOrEmpty(customerCode)) {
            ArrayList params = new ArrayList();
            params.add(customerCode);
            params.add(customerCode);
            params.add(companyId);
            String query = "from Customer where ( acccode=? or name=? ) and company.companyID=?";
            List list = executeQuery( query, params.toArray());
            int totalCount = list.size();
            result = new KwlReturnObject(true, null, null, list, totalCount);
        }
        return result;
    }
    
    @Override
    public KwlReturnObject getTermIdByDays(int days, String companyId) throws ServiceException {
        KwlReturnObject result = null;
        if (!StringUtil.isNullOrEmpty(companyId) && days != 0) {
            ArrayList params = new ArrayList();
            params.add(days);
            params.add(companyId);
            String query = "from Term where termdays=? and company.companyID=?";
            List list = executeQuery( query, params.toArray());
            int totalCount = list.size();
            result = new KwlReturnObject(true, null, null, list, totalCount);
        }
        return result;
    }
    
    public ArrayList getCustomerArrayList(List list, HashMap<String, Object> requestParams, boolean quickSearchFlag, boolean noactivityAcc) throws ServiceException {
        ArrayList resultlist = new ArrayList();
        boolean ignoreCustomers = requestParams.get("ignorecustomers") != null;
        boolean ignoreVendors = requestParams.get("ignorevendors") != null;
        String excludeaccountid = (String) requestParams.get("accountid");
        String includeaccountid = (String) requestParams.get("includeaccountid");
        String includeparentid = (String) requestParams.get("includeparentid");
        String customerCpath = ConfigReader.getinstance().get("Customer");
        String vendorCpath = ConfigReader.getinstance().get("Vendor");
        boolean deleted = Boolean.parseBoolean((String) requestParams.get("deleted"));
        boolean nondeleted = Boolean.parseBoolean((String) requestParams.get("nondeleted"));
//        boolean getSundryCustomer =Boolean.parseBoolean((String)requestParams.get("getSundryCustomer"));          
//            boolean getSundryVendor =Boolean.parseBoolean((String)requestParams.get("getSundryVendor"));
        String currencyid = (String) requestParams.get("currencyid");
        KWLCurrency currency = (KWLCurrency) get(KWLCurrency.class, currencyid);
        if (list != null && list.size() > 0) {
            Iterator itr = list.iterator();
            int level = 0;
            while (itr.hasNext()) {
                Object listObj = itr.next();
                Customer customer = (Customer) listObj;
                if (excludeaccountid != null && customer.getID().equals(excludeaccountid)) {
                    continue;
                }
                if ((includeparentid != null && (!customer.getID().equals(includeparentid) || (customer.getParent() != null && !customer.getParent().getID().equals(includeparentid))))) {
                    continue;
                } else if ((includeaccountid != null && !customer.getID().equals(includeaccountid))) {
                    continue;
                }

//                Object c = AccountingHandlerDAOImpl.getObject( customerCpath, customer.getID());

                Object tmplist[] = new Object[8];
                tmplist[0] = listObj;
                tmplist[1] = customer;
                tmplist[2] = level;
                resultlist.add(tmplist);
                if (quickSearchFlag) {
                    tmplist[3] = true;
                    if (noactivityAcc) {
                        resultlist.remove(tmplist);
                    }
                } else {
                    boolean isLeaf = getChildCustomer(customer, resultlist, level, excludeaccountid, includeaccountid, ignoreCustomers, ignoreVendors, currency, customerCpath, vendorCpath, nondeleted, deleted, tmplist, noactivityAcc);
                    tmplist[3] = isLeaf;
                    
                }
                
                tmplist[4] = currency;
                tmplist[5] = null;//Parent Account

            }
        }
        return resultlist;
    }
    
    @Override
    public JSONObject getLoanConfirmation(String customerId, String companyId) throws ServiceException {
        JSONObject resultlist = new JSONObject();
        try {

            List list = new ArrayList();
            ArrayList params = new ArrayList();
            boolean isCustomerApplyLoan = false;
            params.add(customerId);
            params.add(companyId);
            String query = "select paymentstatus from repaymentdetails inner join disbursement on disbursement.id=repaymentdetails.disbursement"
                    + " where disbursement.customer=? and repaymentdetails.company=?";
            list = executeSQLQuery(query, params.toArray());
            if (list != null && list.size() > 0) {
                isCustomerApplyLoan = true;
                query = "select paymentstatus from repaymentdetails inner join disbursement on disbursement.id=repaymentdetails.disbursement"
                        + " where disbursement.customer=? and repaymentdetails.company=? and paymentstatus=1";
                list = executeSQLQuery(query, params.toArray());
                resultlist.put("isCustomerApplyLoan", isCustomerApplyLoan);
            }else{
                resultlist.put("isCustomerApplyLoan", isCustomerApplyLoan);
            }
            resultlist.put("list", list);

        } catch (JSONException ex) {
            Logger.getLogger(accCustomerDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return resultlist;
    }
    
    @Override
    public JSONObject checkPaymentStausIsPaid(String customerId, String companyId,String loanRefNumber) throws ServiceException {
        JSONObject resultlist = new JSONObject();
        try {

            List list = new ArrayList();
            ArrayList params = new ArrayList();
            params.add(customerId);
            params.add(companyId);
            params.add(loanRefNumber);
            String query = "";
            query = "select paymentstatus from repaymentdetails inner join disbursement on disbursement.id=repaymentdetails.disbursement"
                    + " where disbursement.customer=? and repaymentdetails.company=? and loanrefnumber=? and paymentstatus=0";
            list = executeSQLQuery(query, params.toArray());
            resultlist.put("list", list);

        } catch (JSONException ex) {
            Logger.getLogger(accCustomerDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return resultlist;
    }
    
    
    
    
    public boolean getChildCustomer(Customer customer, List resultlist, int level, String excludeaccountid, String includeaccountid, boolean ignoreCustomers, boolean ignoreVendors, KWLCurrency currency, String customerCpath, String vendorCpath, boolean nondeleted, boolean deleted, Object tmplist1[], boolean noactivityAcc) throws ServiceException {
        boolean leaf = true;
        //Iterator<Account> itr = new TreeSet(account.getChildren()).iterator();
        List ll = new ArrayList(customer.getChildren());//Added code for sorting on account code, account name
//        Collections.sort(ll, new accAccountDAOImpl.accountComp(sortOnType, directionDesc));
        Iterator<Account> itr = ll.iterator();
        
        level++;
        while (itr.hasNext()) {
            Object listObj = itr.next();
            Customer child = (Customer) listObj;
            if ((excludeaccountid != null && child.getID().equals(excludeaccountid))) {
                continue;
            }
            if ((includeaccountid != null && !child.getID().equals(includeaccountid))) {
                continue;
            }

//            Customer c=(Customer)get(Customer.class,child.getID());
//            Object c = AccountingHandlerDAOImpl.getObject( customerCpath, child.getID());
            Object c ;
            try{
                c = get(Class.forName(customerCpath), child.getID());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(accCustomerDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
                throw ServiceException.FAILURE(ex.getMessage(), ex);
            }
            
            
            leaf = false;
            
            Object tmplist[] = new Object[8];
            tmplist[0] = listObj;
            tmplist[1] = c;
            tmplist[2] = level;
            resultlist.add(tmplist);
            int resultListSize = resultlist.size();
            tmplist[3] = getChildCustomer(child, resultlist, level, excludeaccountid, excludeaccountid, ignoreCustomers, ignoreVendors, currency, customerCpath, vendorCpath, nondeleted, deleted, tmplist, noactivityAcc);
            if (noactivityAcc && (!child.getChildren().isEmpty()) && resultlist.size() == resultListSize) {
                resultlist.remove(tmplist);
            }
            tmplist[4] = currency;
            tmplist[5] = customer;//Parent Account
        }
        
        return leaf;
    }
    
    private KwlReturnObject getSundryAccount(String companyId, boolean isVendor) throws ServiceException {
        String query = "select acc.id from " + (isVendor ? "vendor v " : "customer v ") + "  right join account acc  ON v.id = acc.id where acc.company =  ?  and v.ID is  null  and acc.name =  ? ";
        ArrayList params = new ArrayList();
        params.add(companyId);
        params.add(isVendor ? Constants.SUNDRY_VENDOR : Constants.SUNDRY_CUSTOMER);
        List list = executeSQLQuery( query, params.toArray());;
        int count = list.size();
        return new KwlReturnObject(true, "", "", list, count);
    }
    
    public KwlReturnObject getCustomersForCombo(HashMap<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result;
        int start = 0;
        int limit = 30;
        boolean pagingFlag = false;
        boolean ismultiselectcustomeridsFlag = false;
        try {
            ArrayList params = new ArrayList();
            String condition = (requestParams.get("ignore") == null ? "" : " not ");
            String ss = (String) requestParams.get(Constants.ss);
            String companyid = (String) requestParams.get("companyid");
            params.add(companyid);
            boolean receivableAccFlag = requestParams.containsKey("receivableAccFlag") && requestParams.get("receivableAccFlag") != null ? Boolean.parseBoolean((String) requestParams.get("receivableAccFlag")) : false;
            String userID = "";
            boolean isenableSalesPersonAgentFlow=false;
            boolean hasViewAllPermission=false;
            boolean isexcludeCustomersChecked=false;
            
            String sw = null;
            sw=(String) requestParams.get("searchstartwith");
            
            if (requestParams.containsKey("enablesalespersonagentflow") && requestParams.get("enablesalespersonagentflow") != null && !StringUtil.isNullOrEmpty(requestParams.get("enablesalespersonagentflow").toString())) {
                isenableSalesPersonAgentFlow = Boolean.parseBoolean(requestParams.get("enablesalespersonagentflow").toString());
            }
             
            if (isenableSalesPersonAgentFlow) {
                if (requestParams.containsKey("userid") && requestParams.get("userid") != null && !StringUtil.isNullOrEmpty(requestParams.get("userid").toString())) {
                    userID = (String) requestParams.get("userid");
                }

                if (requestParams.containsKey("hasViewAllPermission") && requestParams.get("hasViewAllPermission") != null && !StringUtil.isNullOrEmpty(requestParams.get("hasViewAllPermission").toString())) {
                    hasViewAllPermission = Boolean.parseBoolean(requestParams.get("hasViewAllPermission").toString());
                }
                if (requestParams.containsKey("isexcludeCustomersChecked") && requestParams.get("isexcludeCustomersChecked") != null && !StringUtil.isNullOrEmpty(requestParams.get("isexcludeCustomersChecked").toString())) {
                    isexcludeCustomersChecked = Boolean.parseBoolean(requestParams.get("isexcludeCustomersChecked").toString());
                }
            }

            if (requestParams.containsKey("start") && requestParams.containsKey("limit") && !StringUtil.isNullOrEmpty(requestParams.get("start").toString())) {
                start = Integer.parseInt(requestParams.get("start").toString());
                limit = Integer.parseInt(requestParams.get("limit").toString());
                pagingFlag = true;
            }
            
            if (requestParams.containsKey("selectedCustomerIds") && requestParams.get("selectedCustomerIds") != null) {
                String customerIdGroup = requestParams.get("selectedCustomerIds").toString();
                customerIdGroup = AccountingManager.getFilterInString(customerIdGroup);
                condition += " and ct.id IN " + customerIdGroup;
            }
            /**
             * ismultiselectcustomeridsFlag : check true when getting  selected customres from SOA- customer account statement.
             */
            if (requestParams.containsKey("ismultiselectcustomeridsFlag") && requestParams.get("ismultiselectcustomeridsFlag") != null && !StringUtil.isNullOrEmpty(requestParams.get("ismultiselectcustomeridsFlag").toString())) {
                ismultiselectcustomeridsFlag = Boolean.parseBoolean(requestParams.get("ismultiselectcustomeridsFlag").toString());
            }
            if (requestParams.containsKey("multiselectcustomerids") && requestParams.get("multiselectcustomerids") != null) {
                String multiselectcustomerIdGroup = requestParams.get("multiselectcustomerids").toString();
                multiselectcustomerIdGroup = AccountingManager.getFilterInString(multiselectcustomerIdGroup);
                if (ismultiselectcustomeridsFlag) {
                    condition += " AND ct.id IN " + multiselectcustomerIdGroup;
                } else {
                    condition += " AND ct.id NOT IN " + multiselectcustomerIdGroup;
                }
            }

             if (requestParams.containsKey("isPermOrOnetime") && requestParams.get("isPermOrOnetime") != null) {
                boolean isPermOrOnetime=(Boolean) requestParams.get("isPermOrOnetime");
                if (isPermOrOnetime) {
                    condition += " and ct.isonetime= ? ";
                    params.add('T');
                } else {
                    condition += " and ct.isonetime= ? ";
                    params.add('F');
                }
            }
            if (!StringUtil.isNullOrEmpty(ss) && !ismultiselectcustomeridsFlag) {
                String[] searchcol = new String[]{"ct.name", "ct.acccode"};  // search on Customer code and name
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 2);
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery;
            }
            if (!StringUtil.isNullOrEmpty(sw)) // search on Customer code and name starting with
            {
                String searchby = (String) requestParams.get("cmpRecordField");
                if (searchby.equals("code")) {
                    condition += " and ct.acccode like '" + sw + "%' ";
                } else {
                    condition += " and ct.name like '" + sw + "%' ";
                }
            }
            String orderBy = "";
            if (requestParams.containsKey("customervendorsortingflag") && requestParams.get("customervendorsortingflag") != null) {
                int customervendorsortingflag = Integer.parseInt(requestParams.get("customervendorsortingflag").toString());
                if (customervendorsortingflag == 0) {
                    orderBy = " order by ct.name";
                } else if (customervendorsortingflag == 1) {
                    orderBy = " order by ct.acccode";
                }

            }
            String query = "";
            if (receivableAccFlag) {
                query = "SELECT DISTINCTROW ct.id, ct.parent, ct.acccode, ct.crmaccountid, ct.account, ct.`name`, ct.aliasname, ct.taxid, IF(ct.isPermOrOnetime = 'T', 'true', 'false') as isPermOrOnetime, IF(ct.interstateparty = 'T', 'true', 'false') as interstateparty, IF(ct.cformapplicable = 'T', 'true', 'false') as cformapplicable, ct.commissionerate, ct.division, ct.rangecode, ct.iecno, ct.csttinnumber, ct.vattinnumber, ct.eccnumber, ct.pannumber, ct.salespersonmap, ct.billingaddress, ct.email, ct.receivedfrommap, ct.mappingpaidto, ct.paymentcriteria, ct.defaultnatureofpurchase, IF(ct.overseas = 'T', 'true', 'false') as overseas, IF(ct.activate = 'T','true', 'false') as activate, ct.deliverydate, ct.deliverytime, ct.gstcustomertype, ct.sezfromdate, ct.seztodate, ct.currency, cur.symbol, cur.`name` as currencyname, ' ' as groupname, cre.termdays, cre.termid, ' ' as acctaxid, ' ' as deleteflag, ct.gstin, ct.gstregistrationtype, ct.paymentmethod " +
                        "FROM customer ct " +
                        "INNER JOIN currency cur ON ct.currency = cur.currencyid " +
                        "INNER JOIN creditterm cre ON ct.creditTerm = cre.termid " +
                        "WHERE ct.company= ? " + condition + orderBy;
            } else {
                if (isenableSalesPersonAgentFlow  && !StringUtil.isNullOrEmpty(userID)) {
                    String ViewAllExcludeCustomerSQL="";
                    /*
                    exculdeCustomerbasedonViewallPerm = true - User has view all permission- In this case show only those customers who are mapped with any user through salesperson mapping
                    viewAllExcludeCustomers = true  : show only those customers to current user to whom he is mapped through salespersonmapping.
                     ERP-27605
                    */
                    if(hasViewAllPermission && isexcludeCustomersChecked){
                        /*
                        When View All permission= true
                          When "View All exclude customers without Sales Person" = true and "View All" = True 
                        Show those customers who are mapped with any user/salesperson.
                        */
                        ViewAllExcludeCustomerSQL=" (mst.user IS NOT NULL and ct.isavailableonlytosalespersons = 'T' ) ";
                    }else if ( !hasViewAllPermission && isexcludeCustomersChecked) {
                        /*
                        When View All permission= false
                        When "View All exclude customers without Sales Person" = true and "View All" = False 
                        Show those customers who are mapped with current user/salesperson.
                        */
                                
                        ViewAllExcludeCustomerSQL=" (mst.user = '" + userID + "' and ct.isavailableonlytosalespersons = 'T' ) ";
                    } else {
                        /*
                        Current bahaviour
                        When "View All exclude customers without Sales Person" = false and "View All" = False 
                        */
                        ViewAllExcludeCustomerSQL=" ((mst.user = '" + userID + "' OR mst.user IS NULL AND ct.isavailableonlytosalespersons = 'T' ) OR  (ct.isavailableonlytosalespersons = 'F')) ";
                    }
                    query = "SELECT DISTINCTROW ct.id, ct.parent, ct.acccode, ct.crmaccountid, ct.account, ct.`name`, ct.aliasname, ct.taxid, IF(ct.isPermOrOnetime = 'T', 'true', 'false') as isPermOrOnetime,  IF(ct.interstateparty = 'T', 'true', 'false') as interstateparty,  IF(ct.cformapplicable = 'T', 'true', 'false') as cformapplicable, ct.commissionerate, ct.division, ct.rangecode, ct.iecno, ct.csttinnumber, ct.vattinnumber, ct.eccnumber, ct.pannumber, ct.salespersonmap, ct.billingaddress, ct.email, ct.receivedfrommap, ct.mappingpaidto, ct.paymentcriteria, ct.defaultnatureofpurchase, IF(ct.overseas = 'T', 'true', 'false') as overseas, IF(ct.activate = 'T', 'true', 'false') as activate, ct.deliverydate, ct.deliverytime, ct.gstcustomertype, ct.sezfromdate, ct.seztodate, ct.currency, cur.symbol, cur.`name` as currencyname, gr.`name` as groupname, cre.termdays, cre.termid, acc.taxid as acctaxid, IF(acc.deleteflag = 'T', 'true', 'false') as deleteflag, ct.gstin, ct.gstregistrationtype, ct.paymentmethod " +
                            "FROM customer ct " +
                            "LEFT JOIN salespersonmapping spm ON spm.customerid = ct.id " +
                            "LEFT JOIN masteritem mst ON mst.id = spm.salesperson " +
                            "INNER JOIN account acc ON ct.account = acc.id " +
                            "INNER JOIN currency cur ON ct.currency = cur.currencyid " +
                            "INNER JOIN accgroup gr ON acc.groupname = gr.id " +
                            "INNER JOIN creditterm cre ON ct.creditTerm = cre.termid " +
                            "WHERE " + ViewAllExcludeCustomerSQL + " AND ct.company = ? " + condition + orderBy;
                } else {
                    query = "SELECT DISTINCTROW ct.id, ct.parent, ct.acccode, ct.crmaccountid, ct.account, ct.`name`, ct.aliasname, ct.taxid, IF(ct.isPermOrOnetime = 'T', 'true', 'false') as isPermOrOnetime,  IF(ct.interstateparty = 'T', 'true', 'false') as interstateparty,  IF(ct.cformapplicable = 'T', 'true', 'false') as cformapplicable, ct.commissionerate, ct.division, ct.rangecode, ct.iecno, ct.csttinnumber, ct.vattinnumber, ct.eccnumber, ct.pannumber, ct.salespersonmap, ct.billingaddress, ct.email, ct.receivedfrommap, ct.mappingpaidto, ct.paymentcriteria, ct.defaultnatureofpurchase, IF(ct.overseas = 'T', 'true', 'false') as overseas, IF(ct.activate = 'T', 'true', 'false') as activate, ct.deliverydate, ct.deliverytime, ct.gstcustomertype, ct.sezfromdate, ct.seztodate, ct.currency, cur.symbol, cur.`name` as currencyname, gr.`name` as groupname, cre.termdays, cre.termid, acc.taxid as acctaxid, IF(acc.deleteflag = 'T', 'true', 'false') as deleteflag, ct.gstin, ct.gstregistrationtype,ct.paymentmethod " +
                            "FROM customer ct " +
                            "INNER JOIN account acc ON ct.account = acc.id " +
                            "INNER JOIN currency cur ON ct.currency = cur.currencyid " +
                            "INNER JOIN accgroup gr ON acc.groupname = gr.id " +
                            "INNER JOIN creditterm cre ON ct.creditTerm = cre.termid " +
                            "WHERE ct.company= ? " + condition + orderBy;
                }
            }
            
            List list = executeSQLQuery(query, params.toArray());
            int totalCount = list.size();
            if (pagingFlag && !ismultiselectcustomeridsFlag) {
                list = executeSQLQueryPaging(query, params.toArray(), new Integer[]{start, limit});
            }
            
            result = new KwlReturnObject(true, null, null, list, totalCount);
        } catch (Exception ex) {
            result = new KwlReturnObject(false, "accAccountDAOImpl.getAccounts:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }
    
    @Override
    public KwlReturnObject getCustomerList(HashMap<String, Object> requestParams) throws ServiceException {
        String initialQuery = "from Customer";
        return buildNExecuteQuery( initialQuery, requestParams);
    }
    
    public KwlReturnObject getNewCustomerList(HashMap<String, Object> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        List listSql = null;
        String conditionSQL = "";
        String categoryid = (String) requestParams.get("categoryid"); // in case of isPricingBandGrouping = true treated as pricing band
        String start = (String) requestParams.get(Constants.start);
        String limit = (String) requestParams.get(Constants.limit);
        String salesPersonAgentId = requestParams.get("salesPersonAgentId")!=null?(String) requestParams.get("salesPersonAgentId"):"";
        boolean isBySalesPersonOrAgent = (requestParams.containsKey("isBySalesPersonOrAgent") && requestParams.get("isBySalesPersonOrAgent")!=null)?Boolean.parseBoolean(requestParams.get("isBySalesPersonOrAgent").toString()):false;
        boolean isPricingBandGrouping = false;
        if (requestParams.containsKey("isPricingBandGrouping")) {
            isPricingBandGrouping = (Boolean) requestParams.get("isPricingBandGrouping");
        }
        boolean isenableSalesPersonAgentFlow = false;
        boolean hasViewAllPermission = false;
        boolean isexcludeCustomersChecked = false;
        String userID="";
        if (requestParams.containsKey("enablesalespersonagentflow") && requestParams.get("enablesalespersonagentflow") != null && !StringUtil.isNullOrEmpty(requestParams.get("enablesalespersonagentflow").toString())) {
            isenableSalesPersonAgentFlow = Boolean.parseBoolean(requestParams.get("enablesalespersonagentflow").toString());
        }
        if (isenableSalesPersonAgentFlow) {
            if (requestParams.containsKey("userid") && requestParams.get("userid") != null && !StringUtil.isNullOrEmpty(requestParams.get("userid").toString())) {
                userID = (String) requestParams.get("userid");
            }

            if (requestParams.containsKey("hasViewAllPermission") && requestParams.get("hasViewAllPermission") != null && !StringUtil.isNullOrEmpty(requestParams.get("hasViewAllPermission").toString())) {
                hasViewAllPermission = Boolean.parseBoolean(requestParams.get("hasViewAllPermission").toString());
            }
            if (requestParams.containsKey("isexcludeCustomersChecked") && requestParams.get("isexcludeCustomersChecked") != null && !StringUtil.isNullOrEmpty(requestParams.get("isexcludeCustomersChecked").toString())) {
                isexcludeCustomersChecked = Boolean.parseBoolean(requestParams.get("isexcludeCustomersChecked").toString());
            }

        }
        String ViewAllExcludeCustomerHQL=" ";
         if (isenableSalesPersonAgentFlow  && !StringUtil.isNullOrEmpty(userID)) {
                
                    /*
                    exculdeCustomerbasedonViewallPerm = true - User has view all permission- In this case show only those customers who are mapped with any user through salesperson mapping
                    viewAllExcludeCustomers = true  : show only those customers to current user to whom he is mapped through salespersonmapping.
                     ERP-27605
                    */
                    if(hasViewAllPermission && isexcludeCustomersChecked){
                        /*
                        When View All permission= true
                          When "View All exclude customers without Sales Person" = true and "View All" = True 
                        Show those customers who are mapped with any user/salesperson.
                        */
                        ViewAllExcludeCustomerHQL=" (mst.user is not null and c.isavailableonlytosalespersons='T' ) ";
                    }else if ( !hasViewAllPermission && isexcludeCustomersChecked) {
                        /*
                        When View All permission= false
                        When "View All exclude customers without Sales Person" = true and "View All" = False 
                        Show those customers who are mapped with current user/salesperson.
                        */
                                
                        ViewAllExcludeCustomerHQL=" (mst.user='"+userID+"' and c.isavailableonlytosalespersons='T' ) ";
                    } else {
                        /*
                        Current bahaviour
                        When "View All exclude customers without Sales Person" = false and "View All" = False 
                        */
                        ViewAllExcludeCustomerHQL=" ((mst.user='"+userID+"' or mst.user is null  and c.isavailableonlytosalespersons='T' ) or  (c.isavailableonlytosalespersons='F')) ";

                    }
                   } 
        String query = "";
        if(isBySalesPersonOrAgent){
            params.add((String) requestParams.get("companyid"));
            if (!StringUtil.isNullOrEmpty(salesPersonAgentId)) {
                params.add(salesPersonAgentId);
                conditionSQL += " and  sm.salesperson = ? ";
            }
            String orderBy = "";
            if (requestParams.containsKey("dir") && requestParams.containsKey("sort")) {
                    String Col_Name = requestParams.get("sort").toString();
                    String Col_Dir = requestParams.get("dir").toString();
                    orderBy = sortCustomersCategory(Col_Name, Col_Dir);
            }else{
                orderBy =" order by sm.salesperson desc";
            }
            if(isenableSalesPersonAgentFlow&& !StringUtil.isNullOrEmpty(userID)){
                query = "select  c.id,sm.salesperson from customer c left join salespersonmapping sm on c.id=sm.customerid left join masteritem  mst on mst.id=sm.salesperson  where "
                    +ViewAllExcludeCustomerHQL+"  and c.company=? " + conditionSQL + " order by sm.salesperson desc";    
            }else{
            query = " select c.id,sm.salesperson from customer c left join salespersonmapping sm on c.id=sm.customerid where c.company= ? " + conditionSQL + orderBy;
            }
            }else{
            if (isPricingBandGrouping) {
                params.add((String) requestParams.get("companyid"));

                if (!StringUtil.isNullOrEmpty(categoryid)) {
                    params.add(categoryid);
                    conditionSQL += " and  c.pricingbandmaster = ? ";
                }
                query = " select c.id, c.pricingbandmaster from customer c where c.company= ? " + conditionSQL + " order by c.pricingbandmaster desc";
            } else {
                params.add((String) requestParams.get("companyid"));

                if (!StringUtil.isNullOrEmpty(categoryid)) {
                    params.add(categoryid);
                    conditionSQL += " and  cm.customercategory = ? ";
                }
                String orderBy = "";
                String innerjoin="";
                if (requestParams.containsKey("dir") && requestParams.containsKey("sort")) {
                    String Col_Name = requestParams.get("sort").toString();
                    String Col_Dir = requestParams.get("dir").toString();
                    orderBy = sortCustomersCategory(Col_Name, Col_Dir);
                    orderBy+=" ,cm.customercategory desc";
                    if (Col_Name.equalsIgnoreCase("billingAddress") || Col_Name.equalsIgnoreCase("billingEmailID")) {
                        innerjoin+=" left join customeraddressdetails cad on(c.id=cad.customerid) ";
                        conditionSQL += " and  cad.isbillingaddress = 'T' ";
                    }
                } else {
                    orderBy =" order by cm.customercategory desc";
                }
                if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {
                    query = "select  c.id,cm.customercategory from customer c left join customercategorymapping cm on c.id=cm.customerid " + innerjoin +" left join salespersonmapping sm on c.id=sm.customerid left join masteritem  mst on mst.id=sm.salesperson  where "
                            + ViewAllExcludeCustomerHQL + "  and c.company=? " + conditionSQL + orderBy;
                } else {
                    query = " select c.id,cm.customercategory from customer c left join customercategorymapping cm on c.id=cm.customerid" + innerjoin + " where c.company= ? " + conditionSQL + orderBy;
                }
            }
        }
        
        
        listSql = executeSQLQuery( query, params.toArray());
        int totalCount = listSql.size();
        if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
            listSql = executeSQLQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
        }
        return new KwlReturnObject(true, "", "", listSql, totalCount);
    }
    
    public KwlReturnObject getCustomerCategoryIDs(String customerid) throws ServiceException {
        KwlReturnObject result;
        ArrayList params = new ArrayList();
        params.add(customerid);
        
        String query = "from CustomerCategoryMapping where customerID.ID =  ? ";
        List list = executeQuery( query, params.toArray());
        
        result = new KwlReturnObject(true, null, null, list, list.size());
        return result;
    }
    
    public KwlReturnObject getMultiSalesPersonIDs(String customerid) throws ServiceException {
        KwlReturnObject result;
        ArrayList params = new ArrayList();
        params.add(customerid);
        
        String query = "from SalesPersonMapping where customerID.ID =  ? ";
        List list = executeQuery( query, params.toArray());
        
        result = new KwlReturnObject(true, null, null, list, list.size());
        return result;
    }
    
    public KwlReturnObject getContractForDO(HashMap<String, Object> requestParams) throws ServiceException {
        List list = null;
        
        String transid = (String) requestParams.get("transid");
        String mysql = " select co.id,co.contractNumber from docontractmapping  dc inner join contract as co  on dc.contract=co.id where dc.deliveryorder=? ";
        list = executeSQLQuery( mysql, new Object[]{transid});
        return new KwlReturnObject(true, "", null, list, list.size());
        
    }
    
    public KwlReturnObject getQuotationFromAccount(String accountid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from Quotation t where t.customer.ID=? and t.company.companyID=?";
        list = executeQuery( q, new Object[]{accountid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getDeliveryOrderFromAccount(String accountid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from DeliveryOrder d where d.customer.ID=? and d.company.companyID=?";
        list = executeQuery( q, new Object[]{accountid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public void saveCustomizedAgedDuration(String companyId, int fromDuration, int toDuration) throws ServiceException {
        CustomizeAgedDuration agedDuration = new CustomizeAgedDuration();
        agedDuration.setFromDuration(fromDuration);
        agedDuration.setToDuration(toDuration);
        if (!StringUtil.isNullOrEmpty(companyId)) {
            agedDuration.setCompany((Company) get(Company.class, companyId));
        }
        saveOrUpdate(agedDuration);
    }
    
    @Override
    public KwlReturnObject getCustomizedAgedDuration(String companyId) throws ServiceException {
        List list = new ArrayList();
        String sql = "from CustomizeAgedDuration cad where cad.company.companyID=?";
        if (!StringUtil.isNullOrEmpty(companyId)) {
            list = executeQuery( sql, new Object[]{companyId});
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject deleteCustomizedAgedDuration(String companyId, String id) throws ServiceException {
        String delQuery = "delete from CustomizeAgedDuration cad where cad.id=? and cad.company.companyID=?";
        int numRows = 0;
        if (!StringUtil.isNullOrEmpty(companyId)) {
            numRows = executeUpdate( delQuery, new Object[]{id, companyId});
        }
        return new KwlReturnObject(true, "Duration has been deleted successfully.", null, null, numRows);
    }
    
    @Override
    public void updateCustomizedAgedDuration(String companyId, String id, int fromDuration, int toDuration) throws ServiceException {
        CustomizeAgedDuration agedDuration = new CustomizeAgedDuration();
        agedDuration.setId(id);
        agedDuration.setFromDuration(fromDuration);
        agedDuration.setToDuration(toDuration);
        agedDuration.setCompany((Company) get(Company.class, companyId));
        update(agedDuration);
    }
    
    public void updateCustomersDefaultWarehouse(String warehouseMapId, String warehouseId, String customerId, boolean isDefault) throws ServiceException {
        CustomerWarehouseMap cwmap = (CustomerWarehouseMap) get(CustomerWarehouseMap.class, warehouseMapId);
        if (cwmap != null) {
            cwmap.setIsdefault(isDefault);
            update(cwmap);
        }
    }
    
    public KwlReturnObject getLastTransactionCustomer(String id, boolean isBilling) throws ServiceException {
        List list = new ArrayList();
        
        String query = "select tax from invoice "
                + " inner join journalentry on journalentry.id = invoice.journalentry "
                + "where invoice.customer = ? and invoice.deleteflag='F' order by journalentry.createdon desc limit 1";
        if (isBilling) {
            query = "select tax from billinginvoice "
                    + " inner join journalentry on journalentry.id = billinginvoice.journalentry "
                    + "where billinginvoice.customer = ? and billinginvoice.deleteflag='F' order by journalentry.createdon desc limit 1";
        }
        list = executeSQLQuery( query, id);
        
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject saveCustomerCategoryMapping(String customerid, String customerCategory) throws ServiceException {
        List list = new ArrayList();
        try {
            CustomerCategoryMapping categoryMapping = new CustomerCategoryMapping();
            if (customerid != null) {
                categoryMapping.setCustomerID((Customer) get(Customer.class, customerid));
            }
            if (customerCategory != null) {
                categoryMapping.setCustomerCategory((MasterItem) get(MasterItem.class, customerCategory));
            }
            save(categoryMapping);
            list.add(categoryMapping);
        } catch (Exception e) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.saveCustomerCategoryMapping", e);
        }
        return new KwlReturnObject(true, "", "", list, list.size());
    }
    
    public KwlReturnObject saveSalesPersonMapping(String customerid, String salesPerson) throws ServiceException {
        List list = new ArrayList();
        try {
            SalesPersonMapping salespersonMapping = new SalesPersonMapping();
            if (customerid != null) {
                salespersonMapping.setCustomerID((Customer) get(Customer.class, customerid));
            }
            if (salesPerson != null) {
                salespersonMapping.setSalesperson((MasterItem) get(MasterItem.class, salesPerson));
            }
            save(salespersonMapping);
            list.add(salespersonMapping);
        } catch (Exception e) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.saveSalesPersonMapping", e);
        }
        return new KwlReturnObject(true, "", "", list, list.size());
    }
    
    public KwlReturnObject deleteCustomerCategoryMappingDtails(String customerid) throws ServiceException {
        int numRows = 0;
        String delQuery = "delete from CustomerCategoryMapping cm where cm.customerID.ID=?";
        numRows += executeUpdate( delQuery, new Object[]{customerid});
        return new KwlReturnObject(true, "", null, null, numRows);
    }

    public KwlReturnObject deletecustomervendormapping(String customerid) throws ServiceException {
        int numRows = 0;
        int update=0;
        String query="";
        List list=new ArrayList();
        query="select vendoraccountid.ID from CustomerVendorMapping where customeraccountid.ID=?";
        list = executeQuery( query, new Object[]{customerid});
        
        if (list!= null && list.size() != 0) {
            query = "update Vendor set mapcustomervendor=? where ID=?";
            update = executeUpdate( query, new Object[]{false, list.get(0)});
        }
        query = "delete from CustomerVendorMapping where customeraccountid.ID=?";
        numRows += executeUpdate( query, new Object[]{customerid});
        return new KwlReturnObject(true, "", null, null, numRows);
    }
    
    public KwlReturnObject deleteSalesPersonMappingDtails(String customerid) throws ServiceException {
        int numRows = 0;
        String delQuery = "delete from SalesPersonMapping sp where sp.customerID.ID=?";
        numRows += executeUpdate( delQuery, new Object[]{customerid});
        return new KwlReturnObject(true, "", null, null, numRows);
    }
    
    @Override
    public KwlReturnObject resetCustomerDefaultSalesPerson(String customerid, String salesPersons[]) throws ServiceException {
        List list = new ArrayList();
        try {
            boolean isSalesPersonPresent=false;
            if(!StringUtil.isNullOrEmpty(customerid)){
                Customer customer = (Customer) get(Customer.class, customerid);
                if (customer != null && customer.getMappingSalesPerson()!=null) {
                    MasterItem defSalesPerson=customer.getMappingSalesPerson();
                    for (int i = 0; i < salesPersons.length; i++) {
                        if (!StringUtil.isNullOrEmpty(salesPersons[i]) && defSalesPerson.getID().equals(salesPersons[i])) {
                            isSalesPersonPresent=true;
                            break;
                        }
                    }
                    if(!isSalesPersonPresent){
                        customer.setMappingSalesPerson(null);
                    }
                    save(customer);
                    list.add(customer);
                }
            }
        } catch (Exception e) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.resetCustomerDefaultSalesPerson", e);
        }
        return new KwlReturnObject(true, "", "", list, list.size());
    }
    
    @Override
    public KwlReturnObject getCategorytByName(String companyId, String categoryName, String groupid) throws ServiceException {
        List list = new ArrayList();
        try {
            ArrayList params = new ArrayList();
            params.add(categoryName);
            params.add(groupid);
            params.add(companyId);
            String query = "from MasterItem mst where mst.value=? and mst.masterGroup.ID=? and mst.company.companyID=? ";
            list = executeQuery( query, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.getCategorytByCategoryname", ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    
    @Override
    public KwlReturnObject getMasterItemByNameorID(String companyid, String value, String masterGroupID,String fetchColumn,String conditionColumn) throws ServiceException {
          List list = new ArrayList();
        try {
            ArrayList params = new ArrayList();
            params.add(masterGroupID);
            params.add(companyid);
            params.add(value);
            String query = "SELECT "+fetchColumn +" from MasterItem mst where  mst.masterGroup.ID=? and mst.company.companyID=? and "+conditionColumn+"=? ";
            list = executeQuery( query, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.getCategorytByCategoryname", ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getSalesPersonByName(String companyId, String salesPersonName) throws ServiceException {
        List list = new ArrayList();
        try {
            ArrayList params = new ArrayList();
            params.add(salesPersonName);
            params.add(companyId);
            String query = "from MasterItem mst where mst.value=? and mst.company.companyID=? ";
            list = executeQuery( query, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.getCategorytByCategoryname", ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getCustomerTransactionDetail(HashMap<String, Object> requestParams) throws ServiceException {
        List returnList = new ArrayList();
        int totalCount = 0;
        try {
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            String start = (String) requestParams.get("start");
            String limit = (String) requestParams.get("limit");
            
            boolean isPurchase = Boolean.parseBoolean((String) requestParams.get("isPurchase"));
            boolean fetchAvailableStock=false;
            if(requestParams.get("fetchOnHandData") != null){
                fetchAvailableStock=(boolean) requestParams.get("fetchOnHandData");
            }
            String serialAvailabilityCondition="";
            
            ArrayList params = new ArrayList();
            ArrayList deliveryOrderParams = new ArrayList();
            ArrayList salesReturnParams = new ArrayList();
            ArrayList goodsReceiptOrderParams = new ArrayList();
            ArrayList purchaseReturnParams = new ArrayList();
            ArrayList openingParams = new ArrayList();
            ArrayList stockAdjINParams = new ArrayList();
            ArrayList stockAdjOutParams = new ArrayList();
            
            
            // For Goods recipt Order
            goodsReceiptOrderParams.add((String) requestParams.get("companyid"));
            // For Purchase Return
            purchaseReturnParams.add((String) requestParams.get("companyid"));
            // For Opening
            openingParams.add((String) requestParams.get("companyid"));
            // For Stock Adjsutment IN
            stockAdjINParams.add((String) requestParams.get("companyid"));
            // For Stock Adjsutment Out
            stockAdjOutParams.add((String) requestParams.get("companyid"));
            // For Delivery Order
            deliveryOrderParams.add((String) requestParams.get("companyid"));
            // For Sales Return
            salesReturnParams.add((String) requestParams.get("companyid"));
            
            String goodsReceiptOrderConditionSQL = "";
            String purchaseReturnConditionSQL = "";
            String openingConditionSQL = "";
            String stockAdjINConditionSQL = "";
            String stockAdjOutConditionSQL = "";
            String deliveryOrderConditionSQL = "";
            String salesReturnConditionSQL = "";
            String orderByClause=" order by date,productid asc ";
            
            
            String ss = (String) requestParams.get("ss");
            if (!StringUtil.isNullOrEmpty(ss)) {
                    String[] searchcolGR = new String[]{"p.productid", "p.description","p.name", "gro.gronumber ", "gro.grorderdate", "v.acccode", "v.name", "bs.serialname"};
                    Map SearchStringMap = StringUtil.insertParamSearchStringMap(goodsReceiptOrderParams, ss, 8);
                    StringUtil.insertParamSearchString(SearchStringMap);
                    String searchQueryGR = StringUtil.getSearchString(ss, "and", searchcolGR);
                    goodsReceiptOrderConditionSQL += searchQueryGR;
                    
                    String[] searchcolPR = new String[]{"p.productid", "p.description","p.name", "pr.prnumber", "pr.orderdate", "v.acccode", "v.name", "bs.serialname"};
                    SearchStringMap = StringUtil.insertParamSearchStringMap(purchaseReturnParams, ss, 8); 
                    StringUtil.insertParamSearchString(SearchStringMap);
                    String searchQueryPR = StringUtil.getSearchString(ss, "and", searchcolPR);
                    purchaseReturnConditionSQL += searchQueryPR;
                    
                    String[] searchcolOpening = new String[]{"p.productid", "p.description","p.name", "bs.serialname"};
                    SearchStringMap = StringUtil.insertParamSearchStringMap(openingParams, ss, 4); 
                    StringUtil.insertParamSearchString(SearchStringMap);
                    String searchQueryOpening = StringUtil.getSearchString(ss, "and", searchcolOpening);
                    openingConditionSQL += searchQueryOpening;
                    
                    String[] searchcolstockAdjIN = new String[]{"p.productid", "p.description","p.name"};
                    SearchStringMap = StringUtil.insertParamSearchStringMap(stockAdjINParams, ss, 3); 
                    StringUtil.insertParamSearchString(SearchStringMap);
                    String searchQuerystockAdjIN = StringUtil.getSearchString(ss, "and", searchcolstockAdjIN);
                    stockAdjINConditionSQL += searchQuerystockAdjIN;
                    
                    String[] searchcolstockAdjOut = new String[]{"p.productid", "p.description","p.name"};
                    SearchStringMap = StringUtil.insertParamSearchStringMap(stockAdjOutParams, ss, 3); 
                    StringUtil.insertParamSearchString(SearchStringMap);
                    String searchQuerystockAdjOut = StringUtil.getSearchString(ss, "and", searchcolstockAdjOut);
                    stockAdjOutConditionSQL += searchQuerystockAdjOut;
                    
                
                    String[] searchcol5 = new String[]{"p.productid", "p.description","p.name", "do.donumber", "do.orderdate", "c.acccode", "c.name", "bs.serialname", "co.contractnumber"};
                    SearchStringMap = StringUtil.insertParamSearchStringMap(deliveryOrderParams, ss, 9); 
                    StringUtil.insertParamSearchString(SearchStringMap);
                    String searchQuery5 = StringUtil.getSearchString(ss, "and", searchcol5);
                    deliveryOrderConditionSQL += searchQuery5;
                    
                    String[] searchcol6 = new String[]{"p.productid", "p.description","p.name", "sr.srnumber", "sr.orderdate", "c.acccode", "c.name", "bs.serialname"};
                    SearchStringMap = StringUtil.insertParamSearchStringMap(salesReturnParams, ss, 8); 
                    StringUtil.insertParamSearchString(SearchStringMap);
                    String searchQuery6 = StringUtil.getSearchString(ss, "and", searchcol6);
                    salesReturnConditionSQL += searchQuery6;
                    
                    if(fetchAvailableStock){
                        serialAvailabilityCondition= " AND bs.quantitydue=1 ";
                    }
            }
            String customerIds = "";
            
            if (requestParams.containsKey("customerID") && requestParams.get("customerID") != null) {
                customerIds = (String) requestParams.get("customerID");
            }
            
            if (!StringUtil.isNullOrEmpty(customerIds) && !StringUtil.equal(customerIds, "-1") && !StringUtil.equal(customerIds, "All")) {
                customerIds = AccountingManager.getFilterInString(customerIds);
                
                goodsReceiptOrderConditionSQL += " and gro.vendor  in" + customerIds;
                
                purchaseReturnConditionSQL += " and pr.vendor  in" + customerIds;
                
                deliveryOrderConditionSQL += " and do.customer  in" + customerIds;
                
                salesReturnConditionSQL += " and sr.customer  in" + customerIds;
            }
            
            boolean dateType = Boolean.parseBoolean((String) requestParams.get("dateType"));
            
            String startDate = (String) requestParams.get(Constants.REQ_startdate);
            String endDate = (String) requestParams.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                
                deliveryOrderParams.add(df.parse(startDate));
                deliveryOrderParams.add(df.parse(endDate));
                if (dateType) {
                    deliveryOrderParams.add(df.parse(startDate));
                    deliveryOrderParams.add(df.parse(endDate));
                    deliveryOrderConditionSQL += " and ((bs.exptodate >=? and bs.exptodate <=?) ";
//                    deliveryOrderConditionSQL += " or (bs1.exptodate >=? and bs1.exptodate <=?)) ";
                } else {
                    deliveryOrderConditionSQL += " and (do.orderdate >=? and do.orderdate <=?) ";
                }
                
                salesReturnParams.add(df.parse(startDate));
                salesReturnParams.add(df.parse(endDate));
                if (dateType) {
//                    salesReturnParams.add(df.parse(startDate));
//                    salesReturnParams.add(df.parse(endDate));
                    salesReturnConditionSQL += " and (bs.exptodate >=? and bs.exptodate <=?) ";
                    //salesReturnConditionSQL += " and (bs1.exptodate >=? and bs1.exptodate <=?)) ";
                } else {
                    salesReturnConditionSQL += " and (sr.orderdate >=? and sr.orderdate <=?) ";
                }
                purchaseReturnParams.add(df.parse(startDate));
                purchaseReturnParams.add(df.parse(endDate));
                if (dateType) {
                    purchaseReturnConditionSQL += " and (bs.exptodate >=? and bs.exptodate <=?) ";
                } else {
                    purchaseReturnConditionSQL += " and (pr.orderdate >=? and pr.orderdate <=?) ";
                }
                
                openingParams.add(df.parse(startDate));
                openingParams.add(df.parse(endDate));
                if (dateType) {
                    openingConditionSQL += " and (bs.exptodate >=? and bs.exptodate <=?) ";
                } else {
                    openingConditionSQL += " and (inv.updatedate >=? and inv.updatedate <=?) ";
                }
                
                if (!dateType) {
                    stockAdjINParams.add(df.parse(startDate));
                    stockAdjINParams.add(df.parse(endDate));
                    stockAdjINConditionSQL += " and ( Date(sa.createdon) >=? and Date(sa.createdon) <= ? )  ";
                    
                    stockAdjOutParams.add(df.parse(startDate));
                    stockAdjOutParams.add(df.parse(endDate));
                    stockAdjOutConditionSQL += " and ( Date(sa.createdon) >=? and Date(sa.createdon) <= ? )  ";
                }
                
                goodsReceiptOrderParams.add(df.parse(startDate));
                goodsReceiptOrderParams.add(df.parse(endDate));
                if (dateType) {
                    goodsReceiptOrderConditionSQL += " and (bs.exptodate >=? and bs.exptodate <=?) ";
                } else {
                    goodsReceiptOrderConditionSQL += " and (gro.grorderdate >=? and gro.grorderdate <=?) ";
                }                
            }
            
            // Queries for IN Type Transactions
            
            String GRQry=" select 'Goodsreceipt Order' as transType, p.id, p.productid, p.name as prodname, gro.grorderdate as date, gro.gronumber as transactionNumber,gro.id as transid, v.acccode as acccode, v.name as name, v.id, inv.quantity, grod.rate as rate, inv.baseuomrate,locationbatchdocumentmapping.batchmapid as batch,gro.isfixedassetgro as isfixedassetdo,'FALSE' as isleasedo,ad.id as asset,gro.currency,grod.id as documentid,locationbatchdocumentmapping.quantity as useqty,ad.assetid as assetName,'' as deliveryorder,p.isSerialForProduct from grorder gro "
                        + " inner join grodetails grod on grod.grorder = gro.id "
                        + " inner join inventory inv on inv.id = grod.id "
                        + " inner join product p on p.id = inv.product "
                        + " inner join vendor v on v.id = gro.vendor "
                        + " left join assetdetailsinvdetailmapping asd on asd.invoicedetailid = grod.id "
                        + " left join assetdetail ad on asd.assetdetails = ad.id "
                        + " left join locationbatchdocumentmapping on locationbatchdocumentmapping.documentid=grod.id "
                        + " left join newproductbatch on locationbatchdocumentmapping.batchmapid=newproductbatch.id "
                        + " left join newbatchserial bs on bs.batch=newproductbatch.id "
                        + " left join serialdocumentmapping on serialdocumentmapping.documentid=grod.id "
                        + " where gro.company = ? and p.deleteflag = 'F' " + serialAvailabilityCondition + goodsReceiptOrderConditionSQL;
            
            String openingQry=" SELECT  'Opening' as transType, p.id, p.productid, p.name as prodname, inv.updatedate as date, '' as transactionNumber,inv.id as transid,  '' as acccode,  '' as name,  '' , inv.quantity, inv.baseuomrate as  rate,"
                        +" inv.baseuomrate,lbm.batchmapid as batch,'FALSE' as isfixedassetdo,'FALSE' as isleasedo, '',  '',p.id as documentid,lbm.quantity as useqty, '' as assetName,  '' as deliveryorder,p.isSerialForProduct  from inventory inv "
                        +" INNER JOIN product p ON p.id=inv.product  left join locationbatchdocumentmapping  lbm on lbm.documentid=p.id  left join newproductbatch on lbm.batchmapid=newproductbatch.id  left join newbatchserial bs "
                        +" on bs.batch=newproductbatch.id  left join serialdocumentmapping  sdm on sdm.documentid=p.id   "
                        +" WHERE inv.company = ?  AND inv.isopening='T' and inv.carryin='T' AND inv.newinv='T'  and p.deleteflag = 'F' "+ serialAvailabilityCondition + openingConditionSQL;
            
            String StockAdjInQry=" SELECT 'Stock Adjustment IN' as transType, p.id, p.productid, p.name as prodname, Date(sa.createdon) as date, sa.seqno as transactionNumber,sa.id as transid, '' as acccode, '' as name, '', sad.finalquantity,"
                        +" 1 as rate, 1 as baseuomrate,(SELECT npb.id  from newproductbatch npb WHERE  npb.warehouse=sa.store AND npb.location=sad.location AND npb.batchname = sad.batchname ANd npb.product=sa.product ) as batch,"
                        +" 'FALSE' as isfixedassetdo,'FALSE' as isleasedo,'' as asset, '',sa.id as documentid,sad.finalquantity as useqty,'' as assetName, '' as deliveryorder,p.isSerialForProduct   from in_stockadjustment  sa "
                        +" INNER JOIN  in_sa_detail  sad ON sad.stockadjustment=sa.id INNER JOIN product p ON p.id=sa.product  INNER JOIN in_storemaster stm ON stm.id=sa.store INNER JOIN in_location lcm ON lcm.id=sad.location "
                        +" WHERE  sa.company=? AND sa.adjustment_type='Stock IN' "+stockAdjINConditionSQL;
            
            String SRQry=" select 'Sales Return' as transType, p.id, p.productid, p.name as prodname, sr.orderdate as date, sr.srnumber as transactionNumber,sr.id as transid, c.acccode as acccode, c.name as name, c.id, inv.quantity, srd.rate as rate, inv.baseuomrate,locationbatchdocumentmapping.batchmapid as batch,'FALSE' as isfixedassetdo,'FALSE' as isleasedo,ad.id as asset, sr.currency,srd.id as documentid,locationbatchdocumentmapping.quantity as useqty,ad.assetid as assetName,srd.dodetails as deliveryorder,p.isSerialForProduct  from salesreturn sr "
                        + " inner join srdetails srd on srd.salesreturn = sr.id "
                        + " inner join inventory inv on inv.id = srd.id "
                        + " inner join product p on p.id = inv.product "
                        + " inner join customer c on c.id = sr.customer "
                        + " left join assetdetailsinvdetailmapping asd on asd.invoicedetailid = srd.id "
                        + " left join assetdetail ad on asd.assetdetails = ad.id "
                        + " left join locationbatchdocumentmapping on locationbatchdocumentmapping.documentid=srd.id "
                        + " left join newproductbatch on locationbatchdocumentmapping.batchmapid=newproductbatch.id "
                        + " left join newbatchserial bs on bs.batch=newproductbatch.id "
                        + " left join serialdocumentmapping on serialdocumentmapping.documentid=srd.id "
                        + " where sr.company = ? and p.deleteflag = 'F' " + serialAvailabilityCondition + salesReturnConditionSQL;
            
            
            // Queries for Out Type Transactions
            
            String PRQry= " select 'Purchase Return' as transType, p.id, p.productid, p.name as prodname, pr.orderdate as date, pr.prnumber as transactionNumber,pr.id as transid, v.acccode as acccode, v.name as name, v.id, inv.quantity, prd.rate as rate, inv.baseuomrate,locationbatchdocumentmapping.batchmapid as batch,'FALSE' as isfixedassetdo,'FALSE' as isleasedo,ad.id as asset, pr.currency,prd.id as documentid,locationbatchdocumentmapping.quantity as useqty,ad.assetid as assetName, prd.grdetails as deliveryorder,p.isSerialForProduct  from purchasereturn pr "
                        + " inner join prdetails prd on prd.purchasereturn = pr.id "
                        + " inner join inventory inv on inv.id = prd.id "
                        + " inner join product p on p.id = inv.product "
                        + " inner join vendor v on v.id = pr.vendor "
                        + " left join assetdetailsinvdetailmapping asd on asd.invoicedetailid = prd.id "
                        + " left join assetdetail ad on asd.assetdetails = ad.id "
                        + " left join locationbatchdocumentmapping on locationbatchdocumentmapping.documentid=prd.id "
                        + " left join newproductbatch on locationbatchdocumentmapping.batchmapid=newproductbatch.id "
                        + " left join newbatchserial bs on bs.batch=newproductbatch.id "
                        + " left join serialdocumentmapping on serialdocumentmapping.documentid=prd.id "
                        + " where pr.company = ? and p.deleteflag = 'F' " + serialAvailabilityCondition + purchaseReturnConditionSQL;
            
            String StockAdjOutQry=" SELECT 'Stock Adjustment Out' as transType, p.id, p.productid, p.name as prodname, Date(sa.createdon) as date, sa.seqno as transactionNumber,sa.id as transid, '' as acccode, '' as name, '', ABS(sad.finalquantity), "
                        +" 1 as rate, 1 as baseuomrate,(SELECT npb.id  from newproductbatch npb WHERE  npb.warehouse=sa.store AND npb.location=sad.location AND npb.batchname = sad.batchname ANd npb.product=sa.product ) as batch,"
                        +" 'FALSE' as isfixedassetdo,'FALSE' as isleasedo,'' as asset, '',sa.id as documentid,ABS(sad.finalquantity) as useqty,'' as assetName, '' as deliveryorder,p.isSerialForProduct   from in_stockadjustment  sa "
                        +" INNER JOIN  in_sa_detail  sad ON sad.stockadjustment=sa.id INNER JOIN product p ON p.id=sa.product  INNER JOIN in_storemaster stm ON stm.id=sa.store INNER JOIN in_location lcm ON lcm.id=sad.location "
                        +" WHERE  sa.company=? AND sa.adjustment_type IN('Stock Out','Stock Sales') "+stockAdjOutConditionSQL;
            
            String DOQry="select 'Delivery Order' as transType, p.id, p.productid, p.name as prodname, do.orderdate as date, do.donumber as transactionNumber,do.id as transid, c.acccode as acccode, c.name as name, c.id, inv.quantity, dod.rate as rate, inv.baseuomrate,locationbatchdocumentmapping.batchmapid as batch,do.isfixedassetdo as isfixedassetdo,do.isleasedo as isleasedo,ad.id as asset,do.currency,dod.id as documentid,locationbatchdocumentmapping.quantity as useqty,ad.assetid as assetName,'' as deliveryorder,p.isSerialForProduct  from deliveryorder do"
                        + " inner join dodetails dod on do.id=dod.deliveryorder "
                        + " inner join inventory inv on inv.id = dod.id "
                        + " inner join product p on p.id = inv.product "
                        + " inner join customer c on c.id = do.customer "
                        + " left join assetdetailsinvdetailmapping asd on asd.invoicedetailid = dod.id "
                        + " left join assetdetail ad on asd.assetdetails = ad.id "
                        + " left join locationbatchdocumentmapping on locationbatchdocumentmapping.documentid=dod.id "
                        + " left join newproductbatch on locationbatchdocumentmapping.batchmapid=newproductbatch.id "
                        + " left join newbatchserial bs on bs.batch=newproductbatch.id "
                        + " left join serialdocumentmapping on serialdocumentmapping.documentid=dod.id "
                        + " left join docontractmapping  dc on do.id=dc.deliveryorder"
                        + " left join contract co on dc.contract=co.id "
                        + " where do.company=?  and p.deleteflag = 'F'" + serialAvailabilityCondition + deliveryOrderConditionSQL;
            
            String mysqlQuery = "";
            if (isPurchase) {
                params.addAll(goodsReceiptOrderParams);
                params.addAll(purchaseReturnParams);
                params.addAll(openingParams);
                params.addAll(stockAdjINParams);
                
                mysqlQuery = GRQry+ " union "+PRQry+ " union "+ openingQry +" union "  +StockAdjInQry + orderByClause;
                
            } else {
                params.addAll(deliveryOrderParams);
                params.addAll(salesReturnParams);
                params.addAll(stockAdjOutParams);
                mysqlQuery =DOQry+ " union "+ SRQry +" union "+StockAdjOutQry+ orderByClause;
                
            }
            
            returnList = executeSQLQuery( mysqlQuery, params.toArray());
            totalCount = returnList.size();
            
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                returnList = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accCustomerDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new KwlReturnObject(true, "", null, returnList, totalCount);
    }
    
    public KwlReturnObject getCustomerForTax(String taxid, String companyid) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(taxid);
        params.add(companyid);
        String query = "Select acccode from Customer c where c.taxid=? and c.company.companyID=?";
        List list = executeQuery( query, params.toArray());
        KwlReturnObject result = new KwlReturnObject(true, null, null, list, list.size());
        return result;
    }
    
    public KwlReturnObject addCustomerWarehouses(HashMap<String, Object> itemmap) throws ServiceException {
        List list = new ArrayList();
        try {
            InventoryWarehouse location = new InventoryWarehouse();
            String itemID = (String) itemmap.get("id");
            if (itemmap.containsKey("id") && !StringUtil.isNullOrEmpty(itemID)) {
                location = (InventoryWarehouse) get(InventoryWarehouse.class, itemID);
                if (location == null) {
                    location = new InventoryWarehouse();
                    location.setId(itemID);
                }
            } else {
                String newitemID = UUID.randomUUID().toString();
                location.setId(newitemID);
            }
            if (itemmap.containsKey("name")) {
                location.setName((String) itemmap.get("name"));
            }
            if (itemmap.containsKey("companyid")) {
                Company company = itemmap.get("companyid") == null ? null : (Company) get(Company.class, (String) itemmap.get("companyid"));
                location.setCompany(company);
            }
            
            if (itemmap.containsKey("customerid") && itemmap.get("customerid") != null) {
                location.setCustomer((String) itemmap.get("customerid"));
            }
            if (itemmap.containsKey("isForCustomer") && itemmap.get("isForCustomer") != null) {
                location.setIsForCustomer((Boolean) itemmap.get("isForCustomer"));
            }
            saveOrUpdate(location);
           
            list.add(location);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accMasterItemsImpl.addCustomerWarehouses :" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Customer Warehouse has been added successfully.", null, list, list.size());
    }
    
    public KwlReturnObject addCustomerWarehouseMapping(String warehouseId, String customerId, boolean isForEdit, String itemID, boolean isDefault) throws ServiceException {
        List list = new ArrayList();
        try {
            CustomerWarehouseMap customerWarehouseMap = new CustomerWarehouseMap();
            
            if (!StringUtil.isNullOrEmpty(warehouseId) && !StringUtil.isNullOrEmpty(customerId)) {
                InventoryWarehouse warehouse = new InventoryWarehouse();
                Customer cstm = new Customer();
                warehouse = (InventoryWarehouse) get(InventoryWarehouse.class, warehouseId);
                cstm = (Customer) get(Customer.class, customerId);
                if (warehouse != null && cstm != null) {
                    if (!StringUtil.isNullOrEmpty(itemID)) {
                        customerWarehouseMap = (CustomerWarehouseMap) get(CustomerWarehouseMap.class, itemID);
                    }
                    customerWarehouseMap.setCustomer(cstm);
                    customerWarehouseMap.setIsdefault(isDefault);
                    customerWarehouseMap.setInventoryWarehouse(warehouse);
                    saveOrUpdate(customerWarehouseMap);
                }

            }
            list.add(customerWarehouseMap.getInventoryWarehouse());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accMasterItemsImpl.addCustomerWarehouses :" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Customer Warehouse has been added successfully.", null, list, list.size());
    }

    public KwlReturnObject addCustomerWarehouseMapping(String warehouseId, String customerId, boolean isForEdit, String itemID) throws ServiceException {
        return addCustomerWarehouseMapping(warehouseId, customerId, isForEdit, itemID, false);
    }

    public KwlReturnObject deleteCustomerWarehouses(String itemid) throws ServiceException {
        boolean successflag = false;
        try {
//            InventoryWarehouse mdata = (InventoryWarehouse) get(InventoryWarehouse.class, itemid);
            CustomerWarehouseMap mdata = (CustomerWarehouseMap) get(CustomerWarehouseMap.class, itemid);
            if (mdata != null) {
                delete(mdata);
                successflag = true;
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accMasterItemsImpl.deleteCustomerWarehouses :" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(successflag, "Customer Warehouses has been deleted successfully.", null, null, 1);
    }
    
    public KwlReturnObject getCustomerWarehouses(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from InventoryWarehouse";
        return buildNExecuteQuery( query, requestParams);
    }
    
    public KwlReturnObject getCustomerWarehousesMap(HashMap<String, Object> requestParams, Company company) throws ServiceException {
        
        StringBuilder hql = new StringBuilder("FROM CustomerWarehouseMap AS c WHERE c.customer.company=?");
        List params = new ArrayList();
        params.add(company);
        if (requestParams.containsKey("customerid")) {
            Customer customer = (Customer) get(Customer.class, requestParams.get("customerid").toString());
            hql.append(" AND c.customer=? ");
            params.add(customer);
        }
        if (requestParams.containsKey("warehouseid")) {
            InventoryWarehouse inventoryWarehouse = (InventoryWarehouse) get(InventoryWarehouse.class, requestParams.get("warehouseid").toString());
            hql.append(" AND c.inventoryWarehouse=? ");
            params.add(inventoryWarehouse);
        }
        if (requestParams.containsKey("groupbywarehouse")) {
            hql.append(" Group By inventoryWarehouse");
        }
//        hql.append(" Group By inventoryWarehouse");
        hql.append(" ORDER BY c.customer.name ");
        List list = executeQuery( hql.toString(), params.toArray());
        
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getCustomerDefaultWarehousesMap(HashMap<String, Object> requestParams, Company company) throws ServiceException {
        
        StringBuilder hql = new StringBuilder("FROM CustomerWarehouseMap AS c WHERE c.customer.company=?");
        List params = new ArrayList();
        params.add(company);
        if (requestParams.containsKey("customerid")) {
            Customer customer = (Customer) get(Customer.class, requestParams.get("customerid").toString());
            hql.append(" AND c.customer=? ");
            params.add(customer);
        }
        if (requestParams.containsKey("warehouseid")) {
            InventoryWarehouse inventoryWarehouse = (InventoryWarehouse) get(InventoryWarehouse.class, requestParams.get("warehouseid").toString());
            hql.append(" AND c.inventoryWarehouse=? ");
            params.add(inventoryWarehouse);
        }
        hql.append("AND c.isdefault='T' ORDER BY c.customer.name ");
        List list = executeQuery( hql.toString(), params.toArray());
        
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public String getCustomerWarehousesMapById(String mapingId, Company company) throws ServiceException {
        String id = null;
        StringBuilder hql = new StringBuilder("FROM CustomerWarehouseMap AS c WHERE c.customer.company=? AND id=?");
        List params = new ArrayList();
        params.add(company);
        params.add(mapingId);
        
        hql.append(" ORDER BY customer ");
        List list = executeQuery( hql.toString(), params.toArray());
        if (list.size() > 0) {
            CustomerWarehouseMap customerWarehouseMap = (CustomerWarehouseMap) list.iterator().next();
            id = customerWarehouseMap.getInventoryWarehouse().getId();
        }
        return id;
        
    }
    
    public KwlReturnObject deleteCustomerFromWarehouseMap(String warehouseId, String[] customerIds, String companyid) throws ServiceException {
        int numRows = 0;
        for (int i = 0; i < customerIds.length; i++) {
            String delQuery4 = "delete c from customerwarehousemap c INNER JOIN customer cu ON cu.id=c.customer where warehouse=? AND customer=? AND cu.company=? ";
            int numRows4 = executeSQLUpdate( delQuery4, new Object[]{warehouseId, customerIds[i], companyid});
        }
        return new KwlReturnObject(true, "Customer has been deleted successfully.", null, null, numRows);
    }
    
    public KwlReturnObject getBatchForAsset(HashMap<String, Object> requestParams) throws ServiceException {
        List list = null;
        
        String assetid = (String) requestParams.get("assetid");
        String mysql = "  select loc.batchmapid from locationbatchdocumentmapping loc where loc.documentid=? and loc.transactiontype in(27,41,51)";
        list = executeSQLQuery( mysql, new Object[]{assetid});
        return new KwlReturnObject(true, "", null, list, list.size());
        
    }
     @Override
    public KwlReturnObject customerNumberCount(String customerNo, String companyId) throws ServiceException {
        List list = new ArrayList();
        String q = "from Customer where acccode=? and company.companyID=?";
        if (!StringUtil.isNullOrEmpty(customerNo)) {
            list = executeQuery( q, new Object[]{customerNo, companyId});
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
     @Override
     public synchronized String updateCustomerEntryNumberForNA(String prid, String entrynumber) {
        try {
            String query = "update Customer set acccode = ? where ID=?";
            int numRows = executeUpdate( query, new Object[]{entrynumber, prid});
        } catch (Exception e) {
            System.out.println(e);
        }
        return entrynumber;
    }
     
     
        public KwlReturnObject getTitleForCustomer(String companyid,String value) throws ServiceException {
        List list = new ArrayList();
        String group=""+6;
        String selQuery = "from MasterItem m where m.value=? and m.company.companyID=? and m.masterGroup.ID=?";
        list = executeQuery( selQuery, new Object[]{value, companyid, group});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
       @Override
    public synchronized String updateCustomerNumber(Map<String, Object> seqNumberMap) {
           String documnetNumber = "";
        try {
            documnetNumber = seqNumberMap.containsKey(Constants.AUTO_ENTRYNUMBER) ? (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER) : "";
            int seqNumber = 0;
            if(seqNumberMap.containsKey(Constants.SEQNUMBER) && !StringUtil.isNullObject(seqNumberMap.get(Constants.SEQNUMBER)) && !StringUtil.isNullOrEmpty(seqNumberMap.get(Constants.SEQNUMBER).toString())){
               seqNumber= Integer.parseInt(seqNumberMap.get(Constants.SEQNUMBER).toString());
            }
            String datePrefix = seqNumberMap.containsKey(Constants.DATEPREFIX) ? (String)seqNumberMap.get(Constants.DATEPREFIX) : "";
            String dateSuffix = seqNumberMap.containsKey(Constants.DATESUFFIX) ? (String)seqNumberMap.get(Constants.DATESUFFIX) : "";
            String dateafterPrefix = seqNumberMap.containsKey(Constants.DATEAFTERPREFIX) ? (String) seqNumberMap.get(Constants.DATEAFTERPREFIX) : "";
            String sequenceFormatID = seqNumberMap.containsKey(Constants.SEQUENCEFORMATID) ? (String)seqNumberMap.get(Constants.SEQUENCEFORMATID) : "";
            String documentID = seqNumberMap.containsKey(Constants.DOCUMENTID) ? (String)seqNumberMap.get(Constants.DOCUMENTID) : "";
            String companyID = seqNumberMap.containsKey(Constants.companyKey) ? (String)seqNumberMap.get(Constants.companyKey) : "";
            String query = "update Customer set acccode = ?,seqnumber=?,datePreffixValue=?, dateafterpreffixvalue =? ,dateSuffixValue=?,seqformat.ID=? where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{documnetNumber, seqNumber, datePrefix,dateafterPrefix, dateSuffix, sequenceFormatID, documentID, companyID});
        } catch (Exception e) {
            System.out.println(e);
        }
        return documnetNumber;
    }
       
        public String getDeliveryorderId(String companyid, String dodetailsid) throws ServiceException {
        ArrayList params = new ArrayList();
        String doid = "";
           String myquery = "select deliveryorder from dodetails where id=? and company = ?";
                List list = executeSQLQuery( myquery, new Object[]{dodetailsid,companyid});
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                     doid = itr.next().toString();
                }
                return doid;
    }

    @Override
    public KwlReturnObject getChildCustomerCount(HashMap<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result;
         List cntlist=new ArrayList();
        try {
            ArrayList params = new ArrayList();
            String condition = "";
            String propagatedCustomerID = requestParams.containsKey("propagatedCustomerID") ? (String) requestParams.get("propagatedCustomerID") : "";
            
            condition += "  ct.account.deleted=false ";
            if (!StringUtil.isNullOrEmpty(propagatedCustomerID)) {
                condition += " and ct.propagatedCustomerID.ID=? ";
                params.add(propagatedCustomerID);
            }
            String query = "select ct from Customer ct where  " + condition;
            Long totalCount = 0l;
             cntlist = executeQuery( query, params.toArray());
            
            result = new KwlReturnObject(true, null, null, cntlist, cntlist.size());
        } catch (Exception ex) {
           throw ServiceException.FAILURE("accCustomerDaoImpl.getChildCustomerCount :" + ex.getMessage(), ex);
        }
        return result;
    }
    
    @Override
    public KwlReturnObject checkDuplicateCustomerForEdit(String entryNumber, String companyid, String customerid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from Customer where acccode=? and company.companyID=? and ID!=?";
            list = executeQuery( q, new Object[]{entryNumber, companyid, customerid});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            Logger.getLogger(accCustomerDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accVendorDAOImpl.checkduplicate:" + ex.getMessage(), ex);
        }
    }
    
    @Override
    public KwlReturnObject getCustomerCount(String customerno, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from Customer where acccode=? and company.companyID=?";
        if (!StringUtil.isNullOrEmpty(customerno)) {
            list = executeQuery( q, new Object[]{customerno, companyid});
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getCustomerWithPartNumber(String partnumber, String companyid) throws ServiceException{
        List list = new ArrayList();
        String query = " from DeliveryOrderDetail dod where dod.company.companyID = ? and dod.partno like ? and dod.deliveryOrder.customer.account.crmaccountid is not null order by dod.deliveryOrder.customer.name ";
        list = executeQuery(query, new Object[]{companyid, partnumber});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject UpdateCustomerVendorMapping(String customerid) throws ServiceException{
        List list = null;
        ArrayList params = new ArrayList();
        params.add(customerid);
        String query = "select vendoraccountid from customervendormapping where customeraccountid=?";
        list = executeSQLQuery(query, params.toArray());
        if(!list.isEmpty()){
            String vendorid=(String) list.get(0);
            String updatequery ="update Vendor set mapcustomervendor = ? where ID=?";
            executeUpdate( updatequery, new Object[]{false,vendorid});
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject saveCustomerCheckIn(JSONObject paramJobj) throws SessionExpiredException {
        KwlReturnObject result;
         boolean ischeckin = paramJobj.optBoolean("ischeckin",false);
        try {
            CustomerCheckInOut checkin = new CustomerCheckInOut();
            Date checkInDate = new Date();
            checkin.setCheckintime(checkInDate);

            if (paramJobj.has(Constants.customerid)) {
                Customer customer = (Customer) get(Customer.class, paramJobj.getString(Constants.customerid));
                if (customer != null) {
                    checkin.setCustomer(customer);
                }
            }
            if (paramJobj.has("location")) {
                checkin.setLocation(paramJobj.getString("location"));
            }
            if (ischeckin) {
                if (paramJobj.has("latitude")) {
                    checkin.setInLatitude(paramJobj.optString("latitude", ""));
                }
                if (paramJobj.has("longitude")) {
                    checkin.setInLongitude(paramJobj.optString("longitude", ""));
                }
            } else {
                if (paramJobj.has("latitude")) {
                    checkin.setOutLatitude(paramJobj.optString("latitude", ""));
                }
                if (paramJobj.has("longitude")) {
                    checkin.setOutLongitude(paramJobj.optString("longitude", ""));
                }
            }
          
            if (paramJobj.has(Constants.useridKey)) {
                User checkInBy = (User) get(User.class, paramJobj.getString(Constants.useridKey));
                if (checkInBy != null) {
                    checkin.setCheckinby(checkInBy);
                }
            }
            if (paramJobj.has(Constants.companyid)) {
                Company company = (Company) get(Company.class, paramJobj.getString(Constants.companyid));
                if (company != null) {
                    checkin.setCompany(company);
                }
            }

            saveOrUpdate(checkin);

            List resultlist = new ArrayList();
            resultlist.add(checkin);
            result = new KwlReturnObject(true, null, null, resultlist, resultlist.size());
        } catch (JSONException | ServiceException ex) {
            result = new KwlReturnObject(false, "accCustomerDAOImpl.saveCustomerCheckIn:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }
    
    @Override
    public KwlReturnObject saveCustomerCheckOut(JSONObject paramJobj) throws SessionExpiredException {
        KwlReturnObject result;
        try {
            CustomerCheckInOut checkout = (CustomerCheckInOut) get(CustomerCheckInOut.class, paramJobj.getString("id"));
            Date checkOutDate = new Date();
            
            if (paramJobj.has("checkouttime")) {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                checkOutDate = sdf.parse(paramJobj.optString("checkouttime", ""));
            }
            checkout.setCheckouttime(checkOutDate);
            if (paramJobj.has("latitude")) {
                checkout.setOutLatitude(paramJobj.optString("latitude", ""));
            }
            if (paramJobj.has("longitude")) {
                checkout.setOutLongitude(paramJobj.optString("longitude", ""));
            }
            if (paramJobj.has(Constants.useridKey)) {
                User checkOutBy = (User) get(User.class, paramJobj.getString(Constants.useridKey));
                if (checkOutBy != null) {
                    checkout.setCheckoutby(checkOutBy);
                }
            }

            saveOrUpdate(checkout);

            List resultlist = new ArrayList();
            resultlist.add(checkout);
            result = new KwlReturnObject(true, null, null, resultlist, resultlist.size());
        }  catch (JSONException | ServiceException |ParseException ex) {
            result = new KwlReturnObject(false, "accCustomerDAOImpl.saveCustomerCheckIn:" + ex.getMessage(), null, null, 0);
        }
        return result;
    }
    
    @Override
    public KwlReturnObject getCustomerCheckIn(JSONObject jobj) throws SessionExpiredException, ServiceException {
        List list = new ArrayList();
        int totalCount = 0;
        boolean allCheckInAndCheckOut=false;
        try {
            boolean ischeckin = jobj.optBoolean("ischeckin",false);
            if(jobj.has("allcheckinandout")){
                allCheckInAndCheckOut=jobj.optBoolean("allcheckinandout",false);
            }
            ArrayList params = new ArrayList();
            Date date = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat(Constants.yyyyMMdd);
            SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.S");
            String checkInDate = sdf.format(date);
            checkInDate += " 00:00:00.0";
            Date checkin = sdf1.parse(checkInDate);
            String selectQuery = " from CustomerCheckInOut checkin  ";
            String conditionQuery = " where (checkin.company.companyID = ?) ";
            params.add(jobj.optString(Constants.companyKey, ""));
            
            if(!allCheckInAndCheckOut){
                conditionQuery+= " and (checkin.customer.ID = ?) and (checkin.checkouttime is null) ";
                params.add(jobj.optString(Constants.customerid, ""));
                conditionQuery += " and (DATE(checkin.checkintime) >= ?) ";
                params.add(checkin);
            }
            String ss = "";
            if(jobj.has("ss")){
                ss= jobj.optString("ss");
            }
            
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"checkin.customer.name", "checkin.customer.acccode"};
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 2);
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionQuery += searchQuery;
            }
            
            String orderBy = " order by checkin.checkintime";
            String query = selectQuery + conditionQuery + orderBy;

            list = executeQuery(query, params.toArray());
            totalCount = list.size();

        } catch (ParseException | SQLException ex) {
            Logger.getLogger(accCustomerDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new KwlReturnObject(true, null, null, list, totalCount);
    }
    public int getCustomerCount(HashMap<String, Object> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        String companyid = (String) requestParams.get("companyid");
        params.add(companyid);
        String cntQuery = "select count(ct.ID) from Customer ct where ct.company.companyID=? ";
        Long totalCount = 0l;
        List cntlist = executeQuery(cntQuery, params.toArray());
        if (cntlist != null && !cntlist.isEmpty()) {
            totalCount = (Long) cntlist.get(0);
        }
        return totalCount.intValue();
    }
    /*
     * Method for saving the UOB bank details for customer
    */
    @Override
    public KwlReturnObject saveUOBReceivingBankDetails(HashMap dataMap) throws ServiceException {
        UOBReceivingDetails receivingBankDetails = createUOBReceivingBankDetails(dataMap);
        saveOrUpdate(receivingBankDetails);
        List resultlist = new ArrayList();
        resultlist.add(receivingBankDetails);
        KwlReturnObject result = new KwlReturnObject(true, null, null, resultlist, resultlist.size());
        return result;
    }

    /*
     * Method for creating the UOB bank details for customer
    */
    public UOBReceivingDetails createUOBReceivingBankDetails(HashMap dataMap) {
        UOBReceivingDetails receivingBankDetails = new UOBReceivingDetails();

        if (dataMap.containsKey("receivingBankDetailId") && dataMap.get("receivingBankDetailId") != null && !StringUtil.isNullOrEmpty((String)dataMap.get("receivingBankDetailId"))) {
            receivingBankDetails = (UOBReceivingDetails) get(UOBReceivingDetails.class, (String) dataMap.get("receivingBankDetailId"));
        }

        if (dataMap.containsKey("companyId") && dataMap.get("companyId") != null) {
            Company company = (Company) get(Company.class, (String) dataMap.get("companyId"));
            receivingBankDetails.setCompany(company);
        }

        if (dataMap.containsKey("customerBankAccountType") && dataMap.get("customerBankAccountType") != null) {
            MasterItem customerBankAccountType = (MasterItem) get(MasterItem.class, (String) dataMap.get("customerBankAccountType"));
            receivingBankDetails.setCustomerBankAccountType(customerBankAccountType);
        }

        if (dataMap.containsKey("customer") && dataMap.get("customer") != null) {
            Customer customer = (Customer) get(Customer.class, (String) dataMap.get("customer"));
            receivingBankDetails.setCustomer(customer);        
        }

        if (dataMap.containsKey("UOBBICCode") && dataMap.get("UOBBICCode") != null) {
            receivingBankDetails.setReceivingBICCode((String) dataMap.get("UOBBICCode"));
        }

        if (dataMap.containsKey("UOBEndToEndID") && dataMap.get("UOBEndToEndID") != null) {
            receivingBankDetails.setEndToEndId((String) dataMap.get("UOBEndToEndID"));
        }

        if (dataMap.containsKey("UOBMandateId") && dataMap.get("UOBMandateId") != null) {
            receivingBankDetails.setMandateId((String) dataMap.get("UOBMandateId"));
        }

        if (dataMap.containsKey("UOBReceivingBankAccNumber") && dataMap.get("UOBReceivingBankAccNumber") != null) {
            receivingBankDetails.setReceivingBankAccountNumber((String) dataMap.get("UOBReceivingBankAccNumber"));
        }
        
        if (dataMap.containsKey("UOBReceivingAccName") && dataMap.get("UOBReceivingAccName") != null) {
            receivingBankDetails.setReceivingAccountName((String) dataMap.get("UOBReceivingAccName"));
        }

        if (dataMap.containsKey("UOBPurposeCode") && dataMap.get("UOBPurposeCode") != null) {
            receivingBankDetails.setPurposeCode((String) dataMap.get("UOBPurposeCode"));
        }
        
        if (dataMap.containsKey("UOBCustomerReference") && dataMap.get("UOBCustomerReference") != null) {
            receivingBankDetails.setCustomerReference((String) dataMap.get("UOBCustomerReference"));
        }
        
        if (dataMap.containsKey("UOBUltimatePayerBeneficiaryName") && dataMap.get("UOBUltimatePayerBeneficiaryName") != null) {
            receivingBankDetails.setUltimatePayerOrBeneficiaryName((String) dataMap.get("UOBUltimatePayerBeneficiaryName"));
        }
        
        if (dataMap.containsKey("UOBCurrency") && dataMap.get("UOBCurrency") != null) {
            receivingBankDetails.setCurrencyCode((String) dataMap.get("UOBCurrency"));
        }
        
        if(dataMap.containsKey("bankNameForUOB") && !StringUtil.isNullOrEmpty((String)dataMap.get("bankNameForUOB"))){
            MasterItem bankNameForUOB = (MasterItem)get(MasterItem.class, (String)dataMap.get("bankNameForUOB"));
            receivingBankDetails.setBankName(bankNameForUOB);
        }
        if (dataMap.containsKey("UOBBankCode") && dataMap.get("UOBBankCode") != null) {
            receivingBankDetails.setReceivingBankCode((String) dataMap.get("UOBBankCode"));
        }
        if (dataMap.containsKey("UOBBranchCode") && dataMap.get("UOBBranchCode") != null) {
            receivingBankDetails.setReceivingBranchCode((String) dataMap.get("UOBBranchCode"));
        }
        if (dataMap.containsKey("activated") && dataMap.get("activated") != null) {
            receivingBankDetails.setActivated((Boolean) dataMap.get("activated"));
        }
        return receivingBankDetails;
    }

    /*
     * Method for getting the UOB bank details for customer
     */
    @Override
    public KwlReturnObject getUOBReceivingBankDetails(HashMap requestParams) throws ServiceException {
        String condition = "";
        ArrayList params = new ArrayList();
        params.add((String) requestParams.get("companyId"));

        if (requestParams.containsKey("customer") && !StringUtil.isNullOrEmpty((String)requestParams.get("customer"))) {
            params.add((String) requestParams.get("customer"));
            condition += " and rbd.customer.ID=? ";
        }

        if (requestParams.containsKey("customerBankAccountType") && requestParams.get("customerBankAccountType") != null) {
            params.add((String) requestParams.get("customerBankAccountType"));
            condition += " and rbd.customerBankAccountType.ID=? ";
        }

        String query = "From UOBReceivingDetails rbd where rbd.company.companyID=? " + condition;

        List list = executeQuery( query, params.toArray());

        KwlReturnObject result = new KwlReturnObject(true, null, null, list, list.size());

        return result;
    }

    /*
     * Method for deleting the UOB bank details for customer
    */
    @Override
    public KwlReturnObject deleteExistingReceivingData(HashMap<String,Object> datamap) throws ServiceException{
        String condition = "";
        ArrayList params = new ArrayList();
        params.add((String) datamap.get("companyId"));

        if (datamap.containsKey("customer") && datamap.get("customer") != null) {
            params.add((String) datamap.get("customer"));
            condition += " and rbd.customer.ID=? ";
        }
        if (datamap.containsKey("customerBankAccountType") && datamap.get("customerBankAccountType") != null) {
            params.add((String) datamap.get("customerBankAccountType"));
            condition += " and rbd.customerBankAccountType.id=? ";
        }
        if (datamap.containsKey("UOBReceivingBankDetailId") && datamap.get("UOBReceivingBankDetailId") != null) {
            params.add((String) datamap.get("UOBReceivingBankDetailId"));
            condition += " and rbd.id=? ";
        }
        String query = "DELETE From UOBReceivingDetails rbd where rbd.company.companyID=? " + condition;

        int i = executeUpdate( query, params.toArray());

        KwlReturnObject result = new KwlReturnObject(true, null, null,null,i);

        return result;
    }
    
    /**
     *
     * @param datamap
     * @return True if selected IBG details are used on transaction.
     * @throws ServiceException
     */
    @Override
    public boolean isIBGDetailsUsedInTransaction(HashMap<String,Object> datamap) throws ServiceException{
        boolean isIBGDetailsUsed = false;
        try{
            ArrayList params = new ArrayList();
            String condition = "";
            
            if(datamap.containsKey("companyId") && !StringUtil.isNullOrEmpty((String)datamap.get("companyId"))){
                params.add((String) datamap.get("companyId"));
            }
            if(datamap.containsKey("customer") && !StringUtil.isNullOrEmpty((String)datamap.get("customer"))){
                params.add(datamap.get("customer"));
                condition+=" and inv.customer.ID = ? ";
            }
            if(datamap.containsKey("customerBankAccountType") && !StringUtil.isNullOrEmpty((String)datamap.get("customerBankAccountType"))){
                params.add(datamap.get("customerBankAccountType"));
                condition+=" and inv.CustomerBankAccountType.ID = ? ";
            }
            
            if (datamap.containsKey(Constants.isEdit) && Boolean.parseBoolean((String) datamap.get(Constants.isEdit))) {
                condition+=" and inv.isGIROFileGeneratedForUOBBank = 1 ";
            } else if (datamap.containsKey("isGIROFileGeneratedForUOBBank") && datamap.get("isGIROFileGeneratedForUOBBank") != null) {
                Boolean isGIROFileGeneratedForUOBBank = Boolean.parseBoolean(datamap.get("isGIROFileGeneratedForUOBBank").toString());
                condition += " and inv.isGIROFileGeneratedForUOBBank = ? ";
                params.add(isGIROFileGeneratedForUOBBank);
            }
            condition += " and inv.deleted=false and inv.draft=false and inv.pendingapproval = 0 ";
            String query = " select inv from Invoice inv where inv.company.companyID = ? " + condition;
            List invoiceList = executeQuery(query, params.toArray());
            if(invoiceList!=null && invoiceList.size()>0){
                isIBGDetailsUsed = true;
            }
        }catch(Exception ex){
            throw ServiceException.FAILURE("accCustomerDAOImpl.isIBGDetailsUsedInTransaction:" + ex.getMessage(), ex);
        }
        return isIBGDetailsUsed;
    }

    /*
     * Method for getting the UOB bank GIRO file generation history
     */
    @Override
    public KwlReturnObject getGiroFileGenerationHistory(HashMap map) throws ServiceException {
        List list = new ArrayList();
        int count=0;
        try {
            ArrayList params = new ArrayList();
            DateFormat df = (DateFormat) map.get(Constants.df);
            StringBuilder condition = new StringBuilder();
            String query = "from GiroFileGenerationHistory ";
            String orderBy = " order by generationDate DESC ";
            
            if (map.containsKey("companyid") && map.get("companyid") != null) {
                String companyid = map.get("companyid").toString();
                condition.append(" where company.companyID=? ");
                params.add(companyid);
            }
            if (map.containsKey("id") && map.get("id") != null) {
                String id = map.get("id").toString();
                if (condition.indexOf("where") >= 0) {
                    condition.append(" and ID=?");
                } else {
                    condition.append(" where ID=? ");
                }
                params.add(id);
            }
            if (map.containsKey("bank") && map.get("bank") != null) {
                int bank = Integer.parseInt(map.get("bank").toString());
                if (condition.indexOf("where") >= 0) {
                    condition.append(" and bank = ?");
                } else {
                    condition.append(" where bank = ? ");
                }
                params.add(bank);
            }
            if (map.containsKey("startdate") && map.get("startdate") != null && map.containsKey("enddate") && map.get("enddate") != null) {
                Date startdate = df.parse(map.get("startdate").toString());
                Date enddate = df.parse(map.get("enddate").toString());
                if (condition.indexOf("where") >= 0) {
                    condition.append(" and generationDate >=? and generationDate <=?");
                } else {
                    condition.append(" where generationDate >=? and generationDate <=?");
                }
                params.add(startdate);
                params.add(enddate);
            }
            query += condition.toString();
            query += orderBy;
            list = executeQuery(query, params.toArray());
            if (list != null && !list.isEmpty()) {
                count = list.size();
            }
            
        } catch (Exception ex) {
            Logger.getLogger(accCustomerDAOImpl.class.getName()).log(Level.INFO, ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    /**
     * Method used to update status of bank account type.
     */
    @Override
    public KwlReturnObject updateStatusOfExistingBankAccountType(HashMap<String, Object> datamap) throws ServiceException {
        String condition = "";
        ArrayList params = new ArrayList();
        params.add((Boolean) datamap.get("activated"));
        params.add((String) datamap.get("companyId"));

        if (datamap.containsKey("customer") && datamap.get("customer") != null) {
            params.add((String) datamap.get("customer"));
            condition += " and rbd.customer.ID=? ";
        }
        if (datamap.containsKey("customerBankAccountType") && datamap.get("customerBankAccountType") != null) {
            params.add((String) datamap.get("customerBankAccountType"));
            condition += " and rbd.customerBankAccountType.id=? ";
        }
        if (datamap.containsKey("UOBReceivingBankDetailId") && datamap.get("UOBReceivingBankDetailId") != null) {
            params.add((String) datamap.get("UOBReceivingBankDetailId"));
            condition += " and rbd.id=? ";
        }
        String query = "UPDATE UOBReceivingDetails rbd set rbd.activated = ? where rbd.company.companyID=? " + condition;
        int i = executeUpdate(query, params.toArray());
        KwlReturnObject result = new KwlReturnObject(true, null, null, null, i);
        return result;
    }
    /**
     * Description: Fetches the values of custom fields for a particular customer. 
     *
     * @param colNumberList -> contains the column-name for custom fields for which values are to be fetched; for example 'col103', 'col1004' etc
     * @param customerID -> ID of Customer
     * @param companyID
     * @return KwlReturnObject -> List containing values of columns from colNumberList
     * @throws ServiceException
     */
    @Override
    public KwlReturnObject getCustomFieldsValuesForCustomer(String customerID, String companyID, List<String> colNamesList) throws ServiceException {
        StringBuilder sqlQuery = new StringBuilder("select ");
        List<String> paramList = new ArrayList<>();
        for (int i=0; i<colNamesList.size(); i++) {//create comma-separated string of columns which are to be fetched from table
            sqlQuery.append(colNamesList.get(i));
            if (i != colNamesList.size()-1) {//Add a comma for each element from list except for last element
                sqlQuery.append(", ");
            }
        }
        sqlQuery.append(" from customercustomdata where company=? and deleted='F'");
        paramList.add(companyID);
        if (!StringUtil.isNullOrEmpty(customerID)) {
            sqlQuery.append("and customerId=?");
            paramList.add(customerID);
        }
        List list = executeSQLQuery(sqlQuery.toString(), paramList.toArray());
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    /**
     * @DESC : Get type of Customer
     * @param object
     * @return 
     */
    @Override
    public int getUniqueCase(JSONObject object) {
        int uniqueCase = Constants.APPLYGST;
        String type = object.optString("type");
        if (!StringUtil.isNullOrEmpty(type)) {
            if (type.equalsIgnoreCase(Constants.CUSTVENTYPE.get("Export (WPAY)"))) {
                return Constants.APPLY_IGST;
            }else if (type.equalsIgnoreCase(Constants.CUSTVENTYPE.get("Export (WOPAY)"))) {
                return Constants.NOGST;
            } else if (type.equalsIgnoreCase(Constants.CUSTVENTYPE.get("Import"))) {
                return Constants.NOGST;
            } else if (type.equalsIgnoreCase(Constants.CUSTVENTYPE.get("SEZ (WPAY)"))) {
                return Constants.APPLY_IGST;
            } else if (type.equalsIgnoreCase(Constants.CUSTVENTYPE.get("SEZ (WOPAY)"))) {
                return Constants.NOGST;
            }else if (type.equalsIgnoreCase(Constants.CUSTVENTYPE.get("Deemed_Export"))) {
                return Constants.APPLY_IGST;
            }else if (type.equalsIgnoreCase(Constants.CUSTVENTYPE.get("Tax Exempt"))) {
                return Constants.NOGST;
            }
        }
        return uniqueCase;
    }
    
    @Override
    public String[] getMultiSalesPerson(String customerid) throws ServiceException{
        JSONObject jobj = new JSONObject();
        String[] valuesStr = {"", ""};
        boolean issuccess = false;
        try {
            KwlReturnObject result = getMultiSalesPersonIDs(customerid);
            if (result != null && result.getEntityList().size() > 0) {
                List list = result.getEntityList();
                Iterator itr = list.iterator();

                while (itr.hasNext()) {
                    SalesPersonMapping row = (SalesPersonMapping) itr.next();
                    MasterItem masterItemObj = row.getSalesperson();
                    if (itr.hasNext()) {
                        valuesStr[0] += masterItemObj.getID() + ",";
                        valuesStr[1] += masterItemObj.getValue() + ",";
                    } else {
                        valuesStr[0] += masterItemObj.getID();
                        valuesStr[1] += masterItemObj.getValue();
                    }
                }
                issuccess = true;
            }
        } catch (Exception e) {
            try {
                throw ServiceException.FAILURE(e.getMessage(), e);
            } catch (ServiceException ex) {
                Logger.getLogger(accCustomerDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        } finally {
            try {
                jobj.put(Constants.RES_success, issuccess);
                jobj.put(Constants.RES_msg, "");
            } catch (JSONException ex) {
                Logger.getLogger(accCustomerDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return valuesStr;
    }
    /**
     * Function to save GST fields history
     *
     * @param reqMap
     * @return
     * @throws ServiceException
     */
    public KwlReturnObject saveGstCustomerHistory(Map<String, Object> reqMap) throws ServiceException {
        List list = new ArrayList();
        try {
            GstCustomerHistory customerHistory = null;
            if (reqMap.containsKey("gstcustomerhistoryid") && reqMap.get("gstcustomerhistoryid") != null) {
                customerHistory = (GstCustomerHistory) get(GstCustomerHistory.class, (String) reqMap.get("gstcustomerhistoryid"));
            } else {
                customerHistory = new GstCustomerHistory();
            }
            if (reqMap.containsKey("gstin") && reqMap.get("gstin") != null) {
                customerHistory.setGstin((String) reqMap.get("gstin"));
            }
            if (reqMap.containsKey("GSTINRegistrationTypeId") && reqMap.get("GSTINRegistrationTypeId") != null && !StringUtil.isNullOrEmpty(reqMap.get("GSTINRegistrationTypeId").toString())) {
                customerHistory.setGSTRegistrationType((MasterItem) get(MasterItem.class, (String) reqMap.get("GSTINRegistrationTypeId")));
            }
            if (reqMap.containsKey("CustomerVendorTypeId") && reqMap.get("CustomerVendorTypeId") != null && !StringUtil.isNullOrEmpty(reqMap.get("CustomerVendorTypeId").toString())) {
                customerHistory.setGSTCustomerType((MasterItem) get(MasterItem.class, (String) reqMap.get("CustomerVendorTypeId")));
            }
            if (reqMap.containsKey("customerid") && reqMap.get("customerid") != null && !StringUtil.isNullOrEmpty(reqMap.get("customerid").toString())) {
                customerHistory.setCustomer((Customer) get(Customer.class, (String) reqMap.get("customerid")));
            }
            if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
                customerHistory.setApplyDate((Date) reqMap.get("applyDate"));
            }
            saveOrUpdate(customerHistory);

            list.add(customerHistory);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    /**
     * * Function to get GST fields history
     *
     * @param reqMap
     * @return
     * @throws ServiceException
     */
    public List getGstCustomerHistory(Map<String, Object> reqMap) throws ServiceException {
        List params = new ArrayList();
        String selectcol = " select gch.id from GstCustomerHistory gch ";
        String condition = "";
        if (reqMap.containsKey("returnalldata") && (Boolean)reqMap.get("returnalldata")==true) {
            selectcol = " From GstCustomerHistory gch ";
        }
        if (reqMap.containsKey("customerid")) {
            params.add((String) reqMap.get("customerid"));
            condition += " where gch.customer.ID=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            condition += " and DATE(gch.applyDate)=DATE(?) ";
            params.add(applyDate);
        }
        if (reqMap.containsKey("isfortransaction") && reqMap.get("isfortransaction") != null && (Boolean)reqMap.get("isfortransaction")==true) {
            condition += " and gch.applyDate=(select max(gch1.applyDate) from GstCustomerHistory gch1 where gch1.customer.ID=?"
                    + " and DATE(gch1.applyDate)<=DATE(?))";
            params.add((String) reqMap.get("customerid"));
            Date applyDate = (Date) reqMap.get("transactiondate");
            params.add(applyDate);
        }
        
        String query = selectcol + condition + " order by gch.applyDate desc ";
        List list = executeQuery(query, params.toArray());
        return list;
    }

    /**
     * * Function to get GST fields used in documents
     *
     * @param reqMap
     * @return
     * @throws ServiceException
     */
    public List getGstCustomerUsedHistory(Map<String, Object> reqMap) throws ServiceException {
        List params = new ArrayList();
        String SIselectcol = " select gdh.id,MAX(inv.creationdate) as invmaxdate from gstdocumenthistory gdh ";
        String SIjoinsql = " inner join invoice inv on inv.id=gdh.refdocid "
                + " inner join customer c on c.id=inv.customer ";
        String SIcondition = "";
       
        if (reqMap.containsKey("customerid")) {
            params.add((String) reqMap.get("customerid"));
            SIcondition += " where c.id=? ";
        }
        if (reqMap.containsKey("companyid")) {
            params.add((String) reqMap.get("companyid"));
            SIcondition += " and inv.company=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            SIcondition += " and DATE(inv.creationdate)>=DATE(?) ";
            params.add(applyDate);
        }
        String having=" having invmaxdate is not null ";
        String SIquery = SIselectcol + SIjoinsql + SIcondition + having;
        String CNselectcol = " select gdh.id,MAX(cn.creationdate) as invmaxdate from gstdocumenthistory gdh ";
        String CNjoinsql = " inner join creditnote cn on cn.id=gdh.refdocid inner join customer c on c.id=cn.customer ";
        String CNcondition = "";
       
        if (reqMap.containsKey("customerid")) {
            params.add((String) reqMap.get("customerid"));
            CNcondition += " where c.id=? ";
        }
        if (reqMap.containsKey("companyid")) {
            params.add((String) reqMap.get("companyid"));
            CNcondition += " and cn.company=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            CNcondition += " and DATE(cn.creationdate)>=DATE(?) ";
            params.add(applyDate);
        }   
        String CNquery = CNselectcol + CNjoinsql + CNcondition + having;
        String DNselectcol = " select gdh.id,MAX(dn.creationdate) as invmaxdate from gstdocumenthistory gdh ";
        String DNjoinsql = " inner join debitnote dn on dn.id=gdh.refdocid inner join customer c on c.id=dn.customer ";
        String DNcondition = "";
       
        if (reqMap.containsKey("customerid")) {
            params.add((String) reqMap.get("customerid"));
            DNcondition += " where c.id=? ";
        }
        if (reqMap.containsKey("companyid")) {
            params.add((String) reqMap.get("companyid"));
            DNcondition += " and dn.company=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            DNcondition += " and DATE(dn.creationdate)>=DATE(?) ";
            params.add(applyDate);
        }   
        String DNquery = DNselectcol + DNjoinsql + DNcondition + having;
        String SOselectcol = " select gdh.id,MAX(so.orderdate) as invmaxdate from gstdocumenthistory gdh ";
        String SOjoinsql = " inner join salesorder so on so.id=gdh.refdocid inner join customer c on c.id=so.customer ";
        String SOcondition = "";
       
        if (reqMap.containsKey("customerid")) {
            params.add((String) reqMap.get("customerid"));
            SOcondition += " where c.id=? ";
        }
        if (reqMap.containsKey("companyid")) {
            params.add((String) reqMap.get("companyid"));
            SOcondition += " and so.company=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            SOcondition += " and DATE(so.orderdate)>=DATE(?) ";
            params.add(applyDate);
        }   
        String SOquery = SOselectcol + SOjoinsql + SOcondition + having;
        String RPselectcol = " select gdh.id,MAX(r.creationdate) as invmaxdate from gstdocumenthistory gdh ";
        String RPjoinsql = " inner join receipt r on r.id=gdh.refdocid inner join customer c on c.id=r.customer ";
        String RPcondition = "";
       
        if (reqMap.containsKey("customerid")) {
            params.add((String) reqMap.get("customerid"));
            RPcondition += " where c.id=? ";
        }
        if (reqMap.containsKey("companyid")) {
            params.add((String) reqMap.get("companyid"));
            RPcondition += " and r.company=? ";
        }
        if (reqMap.containsKey("applyDate") && reqMap.get("applyDate") != null) {
            Date applyDate = (Date) reqMap.get("applyDate");
            RPcondition += " and DATE(r.creationdate)>=DATE(?) ";
            params.add(applyDate);
        }   
        String RPquery = RPselectcol + RPjoinsql + RPcondition + having;
        String orderby=" order by invmaxdate DESC ";
        String union =" union ";    
        String allModuleQurey= SIquery + union + CNquery + union + DNquery + union + SOquery + union + RPquery + orderby; 
        List list = executeSQLQuery(allModuleQurey, params.toArray());
        return list;
    }

    /**
     * * Function to delete GST fields history
     *
     * @param customerid
     * @return
     * @throws ServiceException
     */
    public KwlReturnObject deleteGstCustomerHistory(String customerid) throws ServiceException {
        String delQuery = "delete from GstCustomerHistory p where p.customer.ID=? ";
        int numRows = executeUpdate(delQuery, new Object[]{customerid});
        return new KwlReturnObject(true, "GST history has been deleted successfully.", null, null, numRows);
    }
}
