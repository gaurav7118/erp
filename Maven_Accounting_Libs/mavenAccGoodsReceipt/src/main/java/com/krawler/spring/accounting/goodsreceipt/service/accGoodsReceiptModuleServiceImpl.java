/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.krawler.spring.accounting.goodsreceipt.service;

import com.krawler.inventory.model.ist.GRODetailISTMapping;
import com.krawler.common.admin.AuditAction;
import com.krawler.common.admin.*;
import com.krawler.common.service.ServiceException;
import com.krawler.common.session.SessionExpiredException;
import com.krawler.common.util.*;
import com.krawler.esp.handlers.SendMailHandler;
import com.krawler.hql.accounting.*;
import com.krawler.hql.accounting.journalentry.service.AccJournalEntryModuleService;
import com.krawler.inventory.exception.InventoryException;
import com.krawler.inventory.exception.SeqFormatException;
import com.krawler.inventory.model.ist.ISTDetail;
import com.krawler.inventory.model.ist.InterStoreTransferRequest;
import com.krawler.inventory.model.ist.InterStoreTransferService;
import com.krawler.inventory.model.ist.InterStoreTransferStatus;
import com.krawler.inventory.model.location.Location;
import com.krawler.inventory.model.sequence.ModuleConst;
import com.krawler.inventory.model.sequence.SeqFormat;
import com.krawler.inventory.model.sequence.SeqService;
import com.krawler.inventory.model.stock.StockService;
import com.krawler.inventory.model.stockmovement.*;
import com.krawler.inventory.model.stockout.StockAdjustment;
import com.krawler.inventory.model.stockout.StockAdjustmentDetail;
import com.krawler.inventory.model.stockout.StockAdjustmentService;
import com.krawler.inventory.model.store.Store;
import com.krawler.inventory.model.store.StoreService;
import com.krawler.spring.accounting.account.accAccountDAO;
import com.krawler.spring.accounting.bankreconciliation.accBankReconciliationDAO;
import com.krawler.spring.accounting.companypreferances.CompanyPreferencesCMN;
import com.krawler.spring.accounting.companypreferances.CompanyPreferencesConstants;
import com.krawler.spring.accounting.companypreferances.accCompanyPreferencesDAO;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.spring.accounting.currency.accCurrencyDAO;
import com.krawler.spring.accounting.discount.accDiscountDAO;
import com.krawler.spring.accounting.goodsreceipt.GoodsReceiptConstants;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptController;
import com.krawler.spring.accounting.goodsreceipt.accGoodsReceiptDAO;
import com.krawler.spring.accounting.handler.AccountingHandlerDAO;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.accounting.journalentry.JournalEntryConstants;
import com.krawler.spring.accounting.journalentry.accJournalEntryDAO;
import com.krawler.spring.accounting.masteritems.accMasterItemsDAO;
import com.krawler.spring.accounting.multiLevelApprovalRule.AccMultiLevelApprovalDAO;
import com.krawler.spring.accounting.payment.accPaymentDAO;
import com.krawler.spring.accounting.product.accProductDAO;
import com.krawler.spring.accounting.productmodule.service.AccProductModuleService;
import com.krawler.spring.accounting.purchaseorder.accPurchaseOrderDAO;
import com.krawler.spring.accounting.purchaseorder.service.AccPurchaseOrderModuleService;
import com.krawler.spring.accounting.salesorder.accSalesOrderService;
import com.krawler.spring.accounting.tax.accTaxDAO;
import com.krawler.spring.accounting.vendor.accVendorDAO;
import com.krawler.spring.auditTrailModule.auditTrailDAO;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.authHandler.authHandlerDAO;
import com.krawler.spring.common.AccCommonTablesDAO;
import com.krawler.spring.common.CommonFnController;
import com.krawler.spring.common.CommonFnControllerService;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.common.fieldDataManager;
import com.krawler.spring.common.kwlCommonTablesDAO;
import com.krawler.spring.importFunctionality.ImportDAO;
import com.krawler.spring.importFunctionality.ImportHandler;
import com.krawler.spring.permissionHandler.permissionHandlerDAO;
import com.krawler.spring.sessionHandler.sessionHandlerImpl;
import com.krawler.spring.storageHandler.storageHandlerImpl;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.io.*;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Map.Entry;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.MessagingException;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;
import javax.script.ScriptException;
import javax.servlet.ServletContext;
import org.apache.commons.lang.StringUtils;
import org.springframework.context.MessageSource;
import org.springframework.context.MessageSourceAware;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.support.DefaultTransactionDefinition;

/**
 *
 * @author krawler
 */
public class accGoodsReceiptModuleServiceImpl implements accGoodsReceiptModuleService, GoodsReceiptConstants, MessageSourceAware {

    private AccountingHandlerDAO accountingHandlerDAOobj;
    private authHandlerDAO authHandlerDAOObj;
    private accGoodsReceiptDAO accGoodsReceiptobj;
    private accJournalEntryDAO accJournalEntryobj;
    private accProductDAO accProductObj;
    private accDiscountDAO accDiscountobj;
    private accCurrencyDAO accCurrencyDAOobj;
    private accCompanyPreferencesDAO accCompanyPreferencesObj;
    private MessageSource messageSource;
    private fieldDataManager fieldDataManagercntrl;
    private accPurchaseOrderDAO accPurchaseOrderobj;
    private accPaymentDAO accPaymentDAOobj;
    private accBankReconciliationDAO accBankReconciliationObj;
    String tranID = "";
    String recId = "";
    private AccMultiLevelApprovalDAO accMultiLevelApprovalDAOObj;
    private AccCommonTablesDAO accCommonTablesDAO;
    private accTaxDAO accTaxObj;
    private StockMovementService stockMovementService;
    private HibernateTransactionManager txnManager;
    private accVendorDAO accVendorDAOObj;
    private ImportHandler importHandler;
    private AccJournalEntryModuleService journalEntryModuleServiceobj;
    private AccPurchaseOrderModuleService accPurchaseOrderModuleServiceObj;
    private accSalesOrderService accSalesOrderServiceobj;
    private AccProductModuleService accProductModuleService;
    private ImportDAO importDao;
    private auditTrailDAO auditTrailObj;
    private accMasterItemsDAO accMasterItemsDAOobj;
    private accAccountDAO accAccountDAOobj;
    private StockAdjustmentService stockAdjustmentService;
    private InterStoreTransferService istService;
    private SeqService seqService;
    private StockService stockService;
    private CommonFnControllerService commonFnControllerService;
    private permissionHandlerDAO permissionHandlerDAOObj;
    private kwlCommonTablesDAO kwlCommonTablesDAOObj;

    public void setKwlCommonTablesDAOObj(kwlCommonTablesDAO kwlCommonTablesDAOObj) {
        this.kwlCommonTablesDAOObj = kwlCommonTablesDAOObj;
    }
    
    public void setIstService(InterStoreTransferService istService) {
        this.istService = istService;
    }

    public void setSeqService(SeqService seqService) {
        this.seqService = seqService;
    }

    public void setStockService(StockService stockService) {
        this.stockService = stockService;
    }
    
    public void setaccPaymentDAO(accPaymentDAO accPaymentDAOobj) {
        this.accPaymentDAOobj = accPaymentDAOobj;
    }

    @Override
    public void setMessageSource(MessageSource ms) {
        this.messageSource = ms;
    }

    public void setaccMultiLevelApprovalDAOObj(AccMultiLevelApprovalDAO accMultiLevelApprovalDAO) {
        this.accMultiLevelApprovalDAOObj = accMultiLevelApprovalDAO;
    }

    public void setauthHandlerDAO(authHandlerDAO authHandlerDAOObj1) {
        this.authHandlerDAOObj = authHandlerDAOObj1;
    }

    public void setaccGoodsReceiptDAO(accGoodsReceiptDAO accGoodsReceiptobj) {
        this.accGoodsReceiptobj = accGoodsReceiptobj;
    }

    public void setaccJournalEntryDAO(accJournalEntryDAO accJournalEntryobj) {
        this.accJournalEntryobj = accJournalEntryobj;
    }

    public void setaccProductDAO(accProductDAO accProductObj) {
        this.accProductObj = accProductObj;
    }

    public void setaccDiscountDAO(accDiscountDAO accDiscountobj) {
        this.accDiscountobj = accDiscountobj;
    }

    public void setaccCurrencyDAO(accCurrencyDAO accCurrencyDAOobj) {
        this.accCurrencyDAOobj = accCurrencyDAOobj;
    }

    public void setaccCompanyPreferencesDAO(accCompanyPreferencesDAO accCompanyPreferencesObj) {
        this.accCompanyPreferencesObj = accCompanyPreferencesObj;
    }

    public void setaccountingHandlerDAO(AccountingHandlerDAO AccountingHandlerDAOobj) {
        this.accountingHandlerDAOobj = AccountingHandlerDAOobj;
    }

    public void setFieldDataManager(fieldDataManager fieldDataManagercntrl) {
        this.fieldDataManagercntrl = fieldDataManagercntrl;
    }

    public void setaccPurchaseOrderDAO(accPurchaseOrderDAO accPurchaseOrderobj) {
        this.accPurchaseOrderobj = accPurchaseOrderobj;
    }

    public void setaccBankReconciliationDAO(accBankReconciliationDAO accBankReconciliationObj) {
        this.accBankReconciliationObj = accBankReconciliationObj;
    }

    public void setaccCommonTablesDAO(AccCommonTablesDAO accCommonTablesDAO) {
        this.accCommonTablesDAO = accCommonTablesDAO;
    }
    
    public void setaccTaxDAO(accTaxDAO accTaxObj) {
        this.accTaxObj = accTaxObj;
    }
    
    public void setStockMovementService(StockMovementService stockMovementService) {
        this.stockMovementService = stockMovementService;
    }
    
    public void setTxnManager(HibernateTransactionManager txManager) {
        this.txnManager = txManager;
    }
    
    public void setAccVendorDAO(accVendorDAO accVendorDAOObj) {
        this.accVendorDAOObj = accVendorDAOObj;
    }
    
    public void setimportHandler(ImportHandler importHandler) {
        this.importHandler = importHandler;
    }
    
    public void setJournalEntryModuleServiceobj(AccJournalEntryModuleService journalEntryModuleServiceobj) {
        this.journalEntryModuleServiceobj = journalEntryModuleServiceobj;
    }
    
    public void setAccPurchaseOrderModuleServiceObj(AccPurchaseOrderModuleService accPurchaseOrderModuleServiceObj) {
        this.accPurchaseOrderModuleServiceObj = accPurchaseOrderModuleServiceObj;
    }
    
    public void setAccSalesOrderServiceobj(accSalesOrderService accSalesOrderServiceobj) {
        this.accSalesOrderServiceobj = accSalesOrderServiceobj;
    }
    
    public void setAccProductModuleService(AccProductModuleService accProductModuleService) {
        this.accProductModuleService = accProductModuleService;
    }
    
    public void setimportDAO(ImportDAO importDao) {
        this.importDao = importDao;
    }
    
    public void setAuditTrailObj(auditTrailDAO auditTrailObj) {
        this.auditTrailObj = auditTrailObj;
    }
    public void setaccMasterItemsDAO(accMasterItemsDAO accMasterItemsDAOobj) {
        this.accMasterItemsDAOobj = accMasterItemsDAOobj;
    }
    
    public void setaccAccountDAO(accAccountDAO accAccountDAOobj) {
        this.accAccountDAOobj = accAccountDAOobj;
    }

    public void setStockAdjustmentService(StockAdjustmentService stockAdjustmentService) {
        this.stockAdjustmentService = stockAdjustmentService;
    }
    
    public void setCommonFnControllerService(CommonFnControllerService commonFnControllerService) {
        this.commonFnControllerService = commonFnControllerService;
    }

    public void setpermissionHandlerDAO(permissionHandlerDAO permissionHandlerDAOObj1) {
        this.permissionHandlerDAOObj = permissionHandlerDAOObj1;
    }

    private void deleteAssetDetails(GoodsReceipt gr, String companyId) throws ServiceException {
        HashMap<String, Object> requestParams = new HashMap<String, Object>();
        requestParams.put("greceiptid", gr.getID());
        requestParams.put("companyid", companyId);
        accGoodsReceiptobj.deleteAssetDetailsLinkedWithGR(requestParams);

    }

    private void saveBankReconsilation(Map<String, Object> requestParams, Map<String, Object> globalParams) throws ServiceException, JSONException, UnsupportedEncodingException {
        HashMap<String, Object> brMap = new HashMap<String, Object>();
        KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(globalParams, (Double) requestParams.get("clearingamount"), (String) requestParams.get("currencyid"), (Date) requestParams.get("clearanceDate"), 0);
        double clearingAmount = (Double) crresult.getEntityList().get(0);

        if (requestParams.containsKey("oldjeid")) {
            deleteBankReconcilation(requestParams);
        }

        brMap.put("startdate", (Date) requestParams.get("startDate"));
        brMap.put("enddate", (Date) requestParams.get("endDate"));
        brMap.put("clearanceDate", (Date) requestParams.get("clearanceDate"));
        brMap.put("clearingamount", (0 - clearingAmount));
        brMap.put("endingamount", (Double) requestParams.get("endingAmount"));
        brMap.put("accountid", requestParams.containsKey("bankAccountId") ? (String) requestParams.get("bankAccountId") : "");
        brMap.put("companyid", requestParams.containsKey("companyId") ? (String) requestParams.get("companyId") : "");
        brMap.put("checkCount", 1);
        brMap.put("depositeCount", 0);
        brMap.put("createdby", requestParams.containsKey("createdby") ? (String) requestParams.get("createdby") : "");
        GoodsReceipt invoice = (GoodsReceipt) requestParams.get("GoodsReceipt");
        JournalEntry entry = invoice.getJournalEntry();

        Set details = entry.getDetails();
        Iterator iter = details.iterator();
        String accountName = "";
        while (iter.hasNext()) {
            JournalEntryDetail d = (JournalEntryDetail) iter.next();
            if (!d.isDebit()) {
                continue;
            }
            accountName += d.getAccount().getName() + ", ";
        }
        accountName = accountName.substring(0, Math.max(0, accountName.length() - 2));


        KwlReturnObject brresult = accBankReconciliationObj.addBankReconciliation(brMap);
        BankReconciliation br = (BankReconciliation) brresult.getEntityList().get(0);
        String brid = br.getID();
        HashSet hs = new HashSet();
        HashMap<String, Object> brdMap = new HashMap<String, Object>();
        brdMap.put("companyid", (String) requestParams.get("companyId"));
        brdMap.put("amount", clearingAmount);
        brdMap.put("jeid", entry.getID());
        brdMap.put("accountname", accountName);
        brdMap.put("debit", false);
        brdMap.put("brid", brid);
        KwlReturnObject brdresult1 = accBankReconciliationObj.addBankReconciliationDetail(brdMap);
        BankReconciliationDetail brd1 = (BankReconciliationDetail) brdresult1.getEntityList().get(0);
        hs.add(brd1);
    }

    private void deleteBankReconcilation(Map<String, Object> requestParams) throws ServiceException {
        if (requestParams.containsKey("oldjeid")) {
            String reconsilationID = "";
            String unReconsilationID = "";
            String jeid = requestParams.containsKey("oldjeid") ? (String) requestParams.get("oldjeid") : "";
            String companyid = (String) requestParams.get("companyId");

            //Deleting  BankReconciliationDetail
            KwlReturnObject reconsiledDetails = accBankReconciliationObj.getBRfromJE(jeid, companyid, true);
            if (reconsiledDetails.getRecordTotalCount() > 0) {
                List<BankReconciliationDetail> brd = reconsiledDetails.getEntityList();
                for (BankReconciliationDetail reconciliation : brd) {
                    accBankReconciliationObj.permenantDeleteBankReconciliationDetail(reconciliation.getID(), companyid);
                    reconsilationID = reconciliation.getBankReconciliation().getID();
                }
            }

            //Deleting  BankUnreconciliationDetail
            KwlReturnObject unReconsiledDetails = accBankReconciliationObj.getBankUnReconsiledfromJE(jeid, companyid, true);
            if (unReconsiledDetails.getRecordTotalCount() > 0) {
                List<BankUnreconciliationDetail> brd = unReconsiledDetails.getEntityList();
                for (BankUnreconciliationDetail reconciliation : brd) {
                    accBankReconciliationObj.permenantDeleteBankUnReconciliationDetail(reconciliation.getID(), companyid);
                    unReconsilationID = reconciliation.getBankReconciliation().getID();
                }
            }
            if (!StringUtil.isNullOrEmpty(reconsilationID)) {
                accBankReconciliationObj.deleteBankReconciliation(reconsilationID, companyid);
            }
            if (!StringUtil.isNullOrEmpty(unReconsilationID)) {
                accBankReconciliationObj.deleteBankReconciliation(unReconsilationID, companyid);
            }
        }
    }

    private void updatePOisOpenAndLinkingWithVI(String linking) throws ServiceException {
        try {
            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), linking);
            PurchaseOrder purchaseOrder = (PurchaseOrder) rdresult.getEntityList().get(0);
            HashMap hMap = new HashMap();

            boolean isopen = false;
            Set<PurchaseOrderDetail> rows = purchaseOrder.getRows();
            Iterator itrPOD = rows.iterator();
            while (itrPOD.hasNext()) {
                PurchaseOrderDetail row = (PurchaseOrderDetail) itrPOD.next();
                KwlReturnObject idresult = accGoodsReceiptobj.getReceiptDFromPOD(row.getID());
                List list = idresult.getEntityList();
                Iterator iteGRD = list.iterator();
                double qua = 0.0;
                while (iteGRD.hasNext()) {
                    GoodsReceiptDetail grd = (GoodsReceiptDetail) iteGRD.next();
                    qua += grd.getInventory().getQuantity();
                }
                double addobj = row.getQuantity() - qua;
                if (addobj > 0) {
                    isopen = true;
                    break;
                }
            }
            hMap.put("isOpen", isopen);
            hMap.put("purchaseOrder", purchaseOrder);
            hMap.put("value", "1");
            accGoodsReceiptobj.updatePOLinkflag(hMap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("updatePOisOpenAndLinkingWithVI : " + ex.getMessage(), ex);
        }

    }

    public List<String> approvegr(GoodsReceipt gr, HashMap<String, Object> grApproveMap, boolean isMailApplicable) throws SessionExpiredException, AccountingException, ServiceException, ScriptException, MessagingException, JSONException {
        boolean hasAuthority = false;
        String companyid = "";
        boolean iscash = false;
        List returnList = new ArrayList();
        List mailParamList = new ArrayList();
        int returnStatus;

        if (grApproveMap.containsKey("companyid") && grApproveMap.get("companyid") != null) {
            companyid = grApproveMap.get("companyid").toString();
        }
        String currentUser = "";
        if (grApproveMap.containsKey("currentUser") && grApproveMap.get("currentUser") != null) {
            currentUser = grApproveMap.get("currentUser").toString();
        }
        int level = 0;
        if (grApproveMap.containsKey("level") && grApproveMap.get("level") != null) {
            level = Integer.parseInt(grApproveMap.get("level").toString());
        }
        String amount = "";
        if (grApproveMap.containsKey("totalAmount") && grApproveMap.get("totalAmount") != null) {
            amount = grApproveMap.get("totalAmount").toString();
        }
        boolean fromCreate = false;
        if (grApproveMap.containsKey("fromCreate") && grApproveMap.get("fromCreate") != null) {
            fromCreate = Boolean.parseBoolean(grApproveMap.get("fromCreate").toString());
        }
        int moduleid = 0;
        if (grApproveMap.containsKey("moduleid") && grApproveMap.get("moduleid") != null) {
            moduleid = Integer.parseInt(grApproveMap.get("moduleid").toString());
        }
        if (grApproveMap.containsKey("iscash") && grApproveMap.get("iscash") != null) {
            iscash = Boolean.parseBoolean(grApproveMap.get("iscash").toString());
        }
        JSONArray productDiscountMapList = null;
        if (grApproveMap.containsKey("productDiscountMapList") && grApproveMap.get("productDiscountMapList") != null) {
            productDiscountMapList = new JSONArray(grApproveMap.get("productDiscountMapList").toString());
        }

        if (!fromCreate) {
            String thisUser = currentUser;
            KwlReturnObject userclass = accountingHandlerDAOobj.getObject(User.class.getName(), thisUser);
            User user = (User) userclass.getEntityList().get(0);

            if (AccountingManager.isCompanyAdmin(user)) {
                hasAuthority = true;
            } else {
                hasAuthority = accountingHandlerDAOobj.checkForMultiLevelApprovalRules(grApproveMap);
            }
        } else {
            hasAuthority = true;
        }
        if (hasAuthority) {
            ScriptEngineManager mgr = new ScriptEngineManager();
            ScriptEngine engine = mgr.getEngineByName("JavaScript");
            int approvalStatus = 11;
            String grNumber = gr.getGoodsReceiptNumber();
            String grID = gr.getID();
            HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
            qdDataMap.put("companyid", companyid);
            qdDataMap.put("level", level + 1);
            qdDataMap.put("moduleid", moduleid);
            KwlReturnObject flowresult = accMultiLevelApprovalDAOObj.getMultiApprovalRuleData(qdDataMap);
            Iterator itr = flowresult.getEntityList().iterator();
            String fromName = "User";
            fromName = gr.getCreatedby().getFirstName().concat(" ").concat(gr.getCreatedby().getLastName());
            /**
             * parameters required for sending mail
             */
            Map<String, Object> mailParameters = new HashMap();
            mailParameters.put(Constants.companyid, companyid);
            mailParameters.put(Constants.prNumber, grNumber);
            mailParameters.put(Constants.fromName, fromName);
            mailParameters.put(Constants.moduleid, Constants.Acc_Goods_Receipt_ModuleId);
            mailParameters.put(Constants.isCash, false);
            mailParameters.put(Constants.createdBy, gr.getCreatedby().getUserID());
            if (grApproveMap.containsKey(Constants.PAGE_URL)) {
                mailParameters.put(Constants.PAGE_URL, (String) grApproveMap.get(Constants.PAGE_URL));
            }
            while (itr.hasNext()) {
                Object[] row = (Object[]) itr.next();
                HashMap<String, Object> recMap = new HashMap();
                mailParameters.put(Constants.ruleid, row[0].toString());
//            JSONObject obj = new JSONObject();
                String rule = "";
                if (row[2] != null) {
                    rule = row[2].toString();
                }
                String discountRule = "";
                if (row[7] != null) {
                    discountRule = row[7].toString();
                }
                boolean sendForApproval = false;
                int appliedUpon = Integer.parseInt(row[5].toString());
                if (appliedUpon == Constants.Specific_Products || appliedUpon == Constants.Specific_Products_Discount) {
                    if (productDiscountMapList != null) {
                        sendForApproval = AccountingManager.checkForProductAndProductDiscountRule(productDiscountMapList, appliedUpon, rule, discountRule);
                    }
                } else if(appliedUpon ==Constants.Specific_Products_Category){
                    /*
                     * Check If Rule is apply on product category from
                     * multiapproverule window
                     */
                    sendForApproval = accountingHandlerDAOobj.checkForProductCategoryForProduct(productDiscountMapList, appliedUpon, rule);
                }else {
                    rule = rule.replaceAll("[$$]+", amount);
                }
                if (StringUtil.isNullOrEmpty(rule) || (!StringUtil.isNullOrEmpty(rule) && appliedUpon != Constants.Specific_Products && appliedUpon != Constants.Specific_Products_Discount && appliedUpon !=Constants.Specific_Products_Category && Boolean.parseBoolean(engine.eval(rule).toString())) || sendForApproval) {
                    // send emails
                    boolean hasApprover = Boolean.parseBoolean(row[3].toString());
                    mailParameters.put(Constants.hasApprover, hasApprover);
                    if (isMailApplicable) {
                        sendMailToApprover(mailParameters);
                        approvalStatus = level + 1;
                    } else {
                        approvalStatus = level + 1;
                        recMap.put("ruleid", row[0].toString());
                        recMap.put("fromName", fromName);
                        recMap.put("hasApprover", hasApprover);

                        mailParamList.add(recMap);
                    }
                }
            }
            accGoodsReceiptobj.approvePendinggr(grID, companyid, approvalStatus);
            returnStatus = approvalStatus;
        } else {
            returnStatus = Constants.NoAuthorityToApprove; //if not have approval permission then return one fix value like 999
        }
        returnList.add(returnStatus);
        returnList.add(mailParamList);

        return returnList;

    }
    /**
     * @param mailParameters (String companyid, String ruleId, String prNumber, String fromName, boolean hasApprover, int moduleid, boolean iscash,String createdby, String PAGE_URL)
     * @throws ServiceException 
     */
    public void sendMailToApprover(Map<String, Object> mailParameters) throws ServiceException {
        KwlReturnObject cap = null;
        int level =0;
        if (mailParameters.containsKey(Constants.companyid)) {
            cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), (String) mailParameters.get(Constants.companyid));
        }
        boolean hasApprover = false;
        int moduleid = 0;
        String createdby = "";
        boolean iscash = false;
        if(mailParameters.containsKey(Constants.createdBy)){
            createdby = (String) mailParameters.get(Constants.createdBy);
        }
        if(mailParameters.containsKey(Constants.moduleid)){
            moduleid = (int) mailParameters.get(Constants.moduleid);
        }
        if(mailParameters.containsKey(Constants.hasApprover)){
            hasApprover = (boolean) mailParameters.get(Constants.hasApprover);
        }
        if(mailParameters.containsKey(Constants.isCash)){
            iscash = (boolean) mailParameters.get(Constants.isCash);
        }
        if(mailParameters.containsKey("level")){
            level = (int) mailParameters.get("level");
        }
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
        String transactionName = "";
        String transactionNo = "";
        switch (moduleid) {
            case Constants.Acc_Vendor_Invoice_ModuleId:
                if (iscash) {
                    transactionName = "Cash Purchase";
                    transactionNo = "Cash Purchase Number";
                } else {
                    transactionName = "Purchase Invoice";
                    transactionNo = "Purchase Invoice Number";
                }
                break;
            case Constants.Acc_Goods_Receipt_ModuleId:
                transactionName = "Goods Receipt";
                transactionNo = "Goods Receipt Number";
                break;
        }
        String requisitionApprovalSubject = transactionName + " : %s - Approval Notification";
        String requisitionApprovalHtmlMsg = "<html><head><title>Deskera Accounting - Your Deskera Account</title></head><style type='text/css'>"
                + "a:link, a:visited, a:active {\n"
                + " 	color: #03C;"
                + "}\n"
                + "body {\n"
                + "	font-family: Arial, Helvetica, sans-serif;"
                + "	color: #000;"
                + "	font-size: 13px;"
                + "}\n"
                + "</style><body>"
                + "<p>Hi All,</p>"
                + "<p></p>"
                + "<p>%s has created " + transactionName + " %s and sent it to you for approval. at level "+(level)+"</p>"
                + "<p>Please review and approve it (" + transactionNo + " : %s).</p>"
                + "<p>Company Name:- %s</p>"
                + "<p>Please check on Url:- %s</p>"
                + "<p></p>"
                + "<p>Thanks</p>"
                + "<p>This is an auto generated email. Do not reply<br>";
        String requisitionApprovalPlainMsg = "Hi All,\n\n"
                + "%s has created " + transactionName + "%s and sent it to you for approval. "+(level)+"\n"
                + "Please review and approve it (" + transactionNo + " : %s).\n\n"
                + "Company Name:- %s \n"
                + "Please check on Url:- %s \n\n"
                + "Thanks\n\n"
                + "This is an auto generated email. Do not reply\n";
        try {
            if (hasApprover && preferences.isSendapprovalmail()) {//If allow to send approval mail in company account preferences
                KwlReturnObject returnObject = null;
                if(mailParameters.containsKey(Constants.companyid)){
                    returnObject = accountingHandlerDAOobj.getObject(Company.class.getName(), (String) mailParameters.get(Constants.companyid));
                }
                Company company = (Company) returnObject.getEntityList().get(0);
                String fromEmailId = (!company.isEmailFromCompanyCreator()) ? Constants.ADMIN_EMAILID : authHandlerDAOObj.getSysEmailIdByCompanyID(company.getCompanyID());
                String companyName = company.getCompanyName();
                String subject = "";
                String htmlMsg = "";
                String plainMsg = "";
                if (mailParameters.containsKey(Constants.prNumber) ) {
                     subject = String.format(requisitionApprovalSubject, (String) mailParameters.get(Constants.prNumber));
                }
                if (mailParameters.containsKey(Constants.prNumber) && mailParameters.containsKey(Constants.fromName) && mailParameters.containsKey(Constants.PAGE_URL)) {
                     htmlMsg = String.format(requisitionApprovalHtmlMsg, (String) mailParameters.get(Constants.fromName), (String) mailParameters.get(Constants.prNumber),  (String) mailParameters.get(Constants.prNumber), companyName, (String) mailParameters.get(Constants.PAGE_URL));
                     plainMsg = String.format(requisitionApprovalPlainMsg, (String) mailParameters.get(Constants.fromName), (String) mailParameters.get(Constants.prNumber), (String) mailParameters.get(Constants.prNumber), companyName, (String) mailParameters.get(Constants.PAGE_URL));
                }
                ArrayList<String> emailArray = new ArrayList<String>();
                String[] emails = {};

                String userDepartment=null;
                KwlReturnObject returnObjectRes=null; 
                
                HashMap<String, Object> dataMap=new HashMap<String,Object>();
                if (mailParameters.containsKey(Constants.ruleid)) {
                    dataMap.put(Constants.ruleid, (String) mailParameters.get(Constants.ruleid));
                }
                if(mailParameters.containsKey(Constants.companyid)){
                    dataMap.put(Constants.companyKey, (String) mailParameters.get(Constants.companyid));
                }
                dataMap.put("checkdeptwiseapprover", true);
                
                KwlReturnObject userResult1 = accMultiLevelApprovalDAOObj.checkDepartmentWiseApprover(dataMap);
                if (userResult1 != null && userResult1.getEntityList() != null && userResult1.getEntityList().size() > 0) {
                    User user = null;
                    if (!StringUtil.isNullObject(createdby)) {
                        returnObjectRes = accountingHandlerDAOobj.getObject(User.class.getName(), createdby);
                        user = (User) returnObjectRes.getEntityList().get(0);
                    }
                     if(user!=null && !StringUtil.isNullObject(user.getDepartment())){
                       userDepartment= user.getDepartment();
                       dataMap.put("userdepartment", userDepartment);
                    }
                }
                
                KwlReturnObject userResult = accMultiLevelApprovalDAOObj.getApprovalRuleTargetUsers(dataMap);
                
                if(userResult.getEntityList()!=null && userResult.getEntityList().size()<=0 && !StringUtil.isNullOrEmpty(userDepartment )){
                    dataMap.remove("userdepartment");
                    userResult = accMultiLevelApprovalDAOObj.getApprovalRuleTargetUsers(dataMap);
                }
//                KwlReturnObject userResult = accMultiLevelApprovalDAOObj.getApprovalRuleTargetUsers(ruleId);
                Iterator useritr = userResult.getEntityList().iterator();
                while (useritr.hasNext()) {
                    Object[] userrow = (Object[]) useritr.next();
                    emailArray.add(userrow[3].toString());
                }
                emails = emailArray.toArray(emails);
                if (!StringUtil.isNullOrEmpty(preferences.getApprovalEmails())) {
                    String[] compPrefMailIds = preferences.getApprovalEmails().split(",");
                    emails = AccountingManager.getMergedMailIds(emails, compPrefMailIds);
                }
                if (emails.length > 0) {
                    Map<String, Object> smtpConfigMap = authHandler.getSMTPConfigMap(company);
                    SendMailHandler.postMail(emails, subject, htmlMsg, plainMsg, fromEmailId, smtpConfigMap);
                }
            }
        } catch (MessagingException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void updateVQisOpenAndLinking(String linking) throws ServiceException {
        try {
            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(VendorQuotation.class.getName(), linking);
            VendorQuotation quotation = (VendorQuotation) rdresult.getEntityList().get(0);
            HashMap hMap = new HashMap();
            boolean isopen = false;
            Set<VendorQuotationDetail> rows = quotation.getRows();
            Iterator itrVQD = rows.iterator();
            while (itrVQD.hasNext()) {
                VendorQuotationDetail row = (VendorQuotationDetail) itrVQD.next();
                KwlReturnObject idresult = accPurchaseOrderobj.getGRDFromVQD(row.getID());
                List list = idresult.getEntityList();
                Iterator iteGRD = list.iterator();
                double qua = 0.0;
                while (iteGRD.hasNext()) {
                    GoodsReceiptDetail grd = (GoodsReceiptDetail) iteGRD.next();
                    qua += grd.getInventory().getQuantity();
                }
                double addobj = row.getQuantity() - qua;
                if (addobj > 0) {
                    isopen = true;
                    break;
                }
            }
            hMap.put("isOpen", isopen);
            hMap.put("quotation", quotation);
            hMap.put("value", "1");
            accGoodsReceiptobj.updateVQLinkflag(hMap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("updateVQisOpenAndLinking : " + ex.getMessage(), ex);
        }

    }

    private void updateGRisOpenAndLinkingWithVI(String linking) throws ServiceException {
        try {

            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), linking);
            GoodsReceiptOrder goodsReceiptOrder = (GoodsReceiptOrder) rdresult.getEntityList().get(0);
            Set<GoodsReceiptOrderDetails> orderDetail = (Set<GoodsReceiptOrderDetails>) goodsReceiptOrder.getRows();
            String status1 = getGoodsReceiptOrderStatus(orderDetail);
            HashMap hMap = new HashMap();
            hMap.put("goodsReceiptOrder", goodsReceiptOrder);
            if (status1.equals("Open")) {
                hMap.put("isOpenInPI", true);
            } else {
                hMap.put("isOpenInPI", false);
            }
            accGoodsReceiptobj.updateGRLinkflag(hMap);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("updatePOisOpenAndLinkingWithVI : " + ex.getMessage(), ex);
        }

    }

    public String getGoodsReceiptOrderStatus(Set<GoodsReceiptOrderDetails> orderDetail) throws ServiceException {
//        Set<GoodsReceiptOrderDetails> orderDetail = so.getRows();
        Iterator ite = orderDetail.iterator();

        String result = "Closed";
        while (ite.hasNext()) {
            GoodsReceiptOrderDetails soDetail = (GoodsReceiptOrderDetails) ite.next();
            KwlReturnObject idresult = accGoodsReceiptobj.getIDFromGROD(soDetail.getID());
            List list = idresult.getEntityList();
            Iterator ite1 = list.iterator();
            double qua = 0;
            while (ite1.hasNext()) {
                GoodsReceiptDetail ge = (GoodsReceiptDetail) ite1.next();
//                qua += ge.getInventory().isInvrecord() ? ge.getInventory().getQuantity() : ge.getInventory().getActquantity();
                qua += ge.getInventory().getQuantity();
            }
            if (qua < soDetail.getDeliveredQuantity()) {
                result = "Open";
                break;
            }
        }
        return result;
    }

    public List mapInvoiceTerms(String InvoiceTerms, String ID, String userid, boolean isGR) throws ServiceException {
        List ll = new ArrayList();
        try {
            JSONArray termsArr = new JSONArray(InvoiceTerms);
            for (int cnt = 0; cnt < termsArr.length(); cnt++) {
                JSONObject temp = termsArr.getJSONObject(cnt);
                HashMap<String, Object> termMap = new HashMap<String, Object>();
                termMap.put("term", temp.getString("id"));
                termMap.put("termamount", Double.parseDouble(temp.getString("termamount")));
                termMap.put("termtaxamount", temp.optDouble("termtaxamount",0));
                termMap.put("termtaxamountinbase", temp.optDouble("termtaxamountinbase",0));
                termMap.put("termtax", temp.optString("termtax",null));
                termMap.put("termAmountExcludingTax", temp.optDouble("termAmountExcludingTax",0));
                termMap.put("termAmountExcludingTaxInBase", temp.optDouble("termAmountExcludingTaxInBase",0));
                termMap.put("termamountinbase", temp.optDouble("termamountinbase",0));
                double percentage = 0;
                if (!StringUtil.isNullOrEmpty(temp.getString("termpercentage"))) {
                    percentage = Double.parseDouble(temp.getString("termpercentage"));
                }
                termMap.put("termpercentage", percentage);
                termMap.put("creationdate", new Date());
                termMap.put("userid", userid);
                termMap.put("grdetail", temp.optString("grdetail"));
                if (isGR) {
                    termMap.put("goodsReceiptOrderID", ID);
                    accGoodsReceiptobj.saveGoodsReceiptTermMap(termMap);
                } else {
                    termMap.put("invoice", ID);
                    accGoodsReceiptobj.saveInvoiceTermMap(termMap);
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return ll;
    }
    
     public List mapReceiptDetailTerms(String termsObj, Inventory invObj, String userid) throws ServiceException {
        List ll = new ArrayList();
        try {
            JSONArray termsArr = new JSONArray(termsObj);
            for (int cnt = 0; cnt < termsArr.length(); cnt++) {
                JSONObject temp = termsArr.getJSONObject(cnt);
                HashMap<String, Object> termMap = new HashMap<String, Object>();
                termMap.put("term", temp.has("termid")?temp.getString("termid"):temp.getString("id"));
                termMap.put("termamount", StringUtil.isNullOrEmpty(temp.getString("termamount"))? 0.0 : Double.parseDouble(temp.getString("termamount")));
                if (temp.has("glaccount") && !StringUtil.isNullOrEmpty(temp.getString("glaccount"))) {
                    termMap.put("accountid", temp.getString("glaccount"));
                }
                double percentage = 0;
                if (!StringUtil.isNullOrEmpty(temp.getString("termpercentage"))) {
                    percentage = Double.parseDouble(temp.getString("termpercentage"));
                }
                termMap.put("termpercentage", percentage);
                termMap.put("assessablevalue", temp.has("assessablevalue") && !StringUtil.isNullOrEmpty(temp.getString("assessablevalue")) ? Double.parseDouble(temp.getString("assessablevalue")) : 0.0);
                /**
                 * In Purchase Invoice set Entitbasedtermrate column id
                 */
                termMap.put("productentitytermid", temp.optString("productentitytermid"));
//                termMap.put("glaccountname",temp.has("glaccountname")? temp.getString("glaccountname") : "");
//                termMap.put("accountid",temp.has("accountid")? temp.getString("accountid") : "");
//                termMap.put("glaccount",temp.has("glaccount")? temp.getString("glaccount") : "");
                termMap.put("creationdate", new Date());
                termMap.put("userid", userid);
                termMap.put("purchasevalueorsalevalue", (temp.has("purchasevalueorsalevalue") && !StringUtil.isNullOrEmpty(temp.getString("purchasevalueorsalevalue")))?temp.getDouble("purchasevalueorsalevalue"):0.0);
                termMap.put("deductionorabatementpercent", (temp.has("deductionorabatementpercent") && !StringUtil.isNullOrEmpty(temp.getString("deductionorabatementpercent")))?temp.getDouble("deductionorabatementpercent"):0.0);
                termMap.put("payableaccountid", temp.optString("payableaccountid"));
                if (temp.has("taxtype") && !StringUtil.isNullOrEmpty(temp.getString("taxtype"))) {
                    termMap.put("taxtype", temp.getInt("taxtype"));
                    if (temp.has("taxvalue") && !StringUtil.isNullOrEmpty(temp.getString("taxvalue"))) {
                        if(temp.getInt("taxtype")==0){ // If Flat
                            termMap.put("termamount", temp.getDouble("termamount"));
                        } else { // Else Percentage
                            termMap.put("termpercentage", temp.getDouble("taxvalue"));
                        }
                    }
                }
                ll.add(termMap);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return ll;
    }
     
    private Set<AssetDetails> saveAssetDetails(Map<String, Object> request, String productId, String assetDetails, boolean invrecord, boolean isFromVendorInvoice, boolean isGRLinkFromVi, boolean isVILinkFromGR, boolean isVILinkFromVQ, boolean isVILinkFromPO, Map<String, String> map) throws SessionExpiredException, AccountingException, UnsupportedEncodingException {
        Set<AssetDetails> assetDetailsSet = new HashSet<>();
        try {
            String assetduplicateId = "";
            JSONArray jArr = new JSONArray(assetDetails);
            String companyId = "";
            if (request.containsKey(Constants.companyKey) && request.get(Constants.companyKey) != null) {
                companyId = (String) request.get(Constants.companyKey);
            }
            DateFormat df = null;
            if (request.containsKey(Constants.df) && request.get(Constants.df) != null) {
                df = (DateFormat) request.get(Constants.df);
            }
            /**
             * saving asset cost according to spot rate SDP-14825.
             */
            Double exchangerate = 1d;
            if (request.containsKey("externalcurrencyrate") && request.get("externalcurrencyrate") != null) {
                exchangerate = (double) request.get("externalcurrencyrate");
            }
            // In case of linking no need to check for duplicacy at here, as duplicacy check
            // is implemented on js side.
            // but while creating new asset either by Purchase Invoice or by Goods Receipt it is need to check duplicacy.

            boolean isbeingCreateFromLinking = false;

            if (isGRLinkFromVi || isVILinkFromGR || isVILinkFromVQ || isVILinkFromPO) {
                isbeingCreateFromLinking = true;
            }

            HashMap<String, Object> assetParams = new HashMap<>();
            assetParams.put("companyId", companyId);
            KwlReturnObject assetResult = accProductObj.getAssetDetails(assetParams);

            List assetList = assetResult.getEntityList();
            List<String> assetNameList = new ArrayList<>();

            Iterator it = assetList.iterator();
            while (it.hasNext()) {
                AssetDetails ad = (AssetDetails) it.next();
                assetNameList.add(ad.getAssetId().toLowerCase());
            }

            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                String assetId = StringUtil.DecodeText(jobj.optString("assetId"));
                String assetName = StringUtil.DecodeText(jobj.optString("assetName"));
                String location = jobj.getString("location");
                String department = jobj.getString("department");
                String assetdescription = StringUtil.DecodeText(jobj.optString("assetdescription"));
                String assetUser = jobj.getString("assetUser");

                double costInForeignCurrency = jobj.optDouble("costInForeignCurrency",0);
                double cost = costInForeignCurrency / exchangerate;
                double salvageRate = jobj.optDouble("salvageRate",0);
                double salvageValue = jobj.optDouble("salvageValue",0);
                double salvageValueInForeignCurrency = jobj.optDouble("salvageValueInForeignCurrency",0);
                double accumulatedDepreciation = jobj.optDouble("accumulatedDepreciation",0);
                double assetLife = jobj.optDouble("assetLife",0);
                double elapsedLife = jobj.optDouble("elapsedLife",0);
                double nominalValue = jobj.optDouble("nominalValue",0);

                String installationDateStr = jobj.getString("installationDate");
                Date installationDate = df.parse(installationDateStr);

                String purchaseDateStr = jobj.getString("purchaseDate");
                Date purchaseDate = df.parse(purchaseDateStr);

                // Check Whether asset of this name exist or not in case of GRO -
                if (!isbeingCreateFromLinking && assetNameList.contains(assetId.toLowerCase())) { // comparing two assetids in case insensitive manner
                   assetduplicateId = assetId+",";           
                }
                
                if (assetduplicateId.length() ==0) {
                    AssetDetails details = null;
                    HashMap<String, Object> dataMap = new HashMap<>();
                    KwlReturnObject assObj = accountingHandlerDAOobj.getObject(AssetDetails.class.getName(), assetId);
                    details = (AssetDetails) assObj.getEntityList().get(0);

                    //UPDATE ASSET COST WHILE CREATING INVOICE THROUGH GRN, AS IT IS ENTERED IN INVOICE.
                    if (isVILinkFromGR && details != null) {
                        HashMap<String, Object> grAssMap = new HashMap<String, Object>();
                        grAssMap.put("assetDetailId", assetId);
                        grAssMap.put("companyId", companyId);
                        grAssMap.put("cost", cost);
                        grAssMap.put("location", location);
                        grAssMap.put("department", department);
                        grAssMap.put("assetdescription", assetdescription);
                        grAssMap.put("assetUser", assetUser);
                        grAssMap.put("costInForeignCurrency", costInForeignCurrency);
                        grAssMap.put("salvageRate", salvageRate);
                        grAssMap.put("salvageValue", salvageValue);
                        grAssMap.put("salvageValueInForeignCurrency", salvageValueInForeignCurrency);
                        grAssMap.put("assetLife", assetLife);
                        grAssMap.put("elapsedLife", elapsedLife);
                        grAssMap.put("nominalValue", nominalValue);
                        grAssMap.put("productId", details.getProduct().getID());

                        accProductObj.updateAssetDetails(grAssMap);
                    } else if (isVILinkFromGR && details == null) { // in case of edition of linked vendor invoice details object will be null, because we are deleting it in previous lines in saveGoodsReceipt() method.
                        HashMap<String, Object> grAssMap = new HashMap<>();
                        grAssMap.put("assetId", assetName);
                        grAssMap.put("companyId", companyId);
                        grAssMap.put("invrecord", true);
                        KwlReturnObject kro = accProductObj.getAssetDetails(grAssMap);// will give you asset details object ehich is created from selected GRO in Vendor Invoice, whose cost you need to update in case of edit.
                        details = (AssetDetails) kro.getEntityList().get(0); // asset details object created from selected GRO.

                        grAssMap = new HashMap<>();
                        grAssMap.put("assetDetailId", details.getId());
                        grAssMap.put("companyId", companyId);
                        grAssMap.put("cost", cost);
                        grAssMap.put("costInForeignCurrency", costInForeignCurrency);
                        grAssMap.put("location", location);
                        grAssMap.put("department", department);
                        grAssMap.put("assetdescription", assetdescription);
                        grAssMap.put("salvageRate", salvageRate);
                        grAssMap.put("salvageValue", salvageValue);
                        grAssMap.put("salvageValueInForeignCurrency", salvageValueInForeignCurrency);
                        grAssMap.put("assetLife", assetLife);
                        grAssMap.put("elapsedLife", elapsedLife);
                        grAssMap.put("nominalValue", nominalValue);
                        grAssMap.put("assetUser", assetUser);
                        grAssMap.put("productId", details.getProduct().getID());
                        // updating cost of asset created From GRO
                        accProductObj.updateAssetDetails(grAssMap);
                    }


                    if (isGRLinkFromVi || isVILinkFromGR || isVILinkFromVQ || isVILinkFromPO) {
                        dataMap.put("assetId", assetName);
                    } else {
                        dataMap.put("assetId", assetId);
                    }

                    dataMap.put("location", location);
                    dataMap.put("department", department);
                    dataMap.put("assetdescription", assetdescription);
                    dataMap.put("assetUser", assetUser);
                    dataMap.put("cost", cost);
                    dataMap.put("costInForeignCurrency", costInForeignCurrency);
                    dataMap.put("salvageRate", salvageRate);
                    dataMap.put("salvageValue", salvageValue);
                    dataMap.put("salvageValueInForeignCurrency", salvageValueInForeignCurrency);
                    dataMap.put("accumulatedDepreciation", accumulatedDepreciation);
                    dataMap.put("assetLife", assetLife);
                    dataMap.put("elapsedLife", elapsedLife);
                    dataMap.put("nominalValue", nominalValue);
                    dataMap.put("productId", productId);
                    dataMap.put("installationDate", installationDate);
                    dataMap.put("purchaseDate", purchaseDate);
                    dataMap.put("companyId", companyId);
                    dataMap.put("invrecord", invrecord);
                    dataMap.put("assetSoldFlag", 0);

                    KwlReturnObject result = accProductObj.saveAssetDetails(dataMap);
                    AssetDetails row = (AssetDetails) result.getEntityList().get(0);
                    String machine = jobj.optString("machine", "");
                    if (!StringUtil.isNullOrEmpty(machine)) {
                        map.put(machine, row.getId());
                    }
                    if (jobj.has("customfield")) {
                        String customfield = jobj.getString("customfield");
                        if (!StringUtil.isNullOrEmpty(customfield)) {
                            HashMap<String, Object> DOMap = new HashMap<>();
                            JSONArray jcustomarray = new JSONArray(customfield);
                            HashMap<String, Object> customrequestParams = new HashMap<>();
                            customrequestParams.put("customarray", jcustomarray);
                            customrequestParams.put("modulename", "AssetDetails");
                            customrequestParams.put("moduleprimarykey", "AssetDetailsId");
                            customrequestParams.put("modulerecid", row.getId());
                            customrequestParams.put("moduleid", Constants.Acc_FixedAssets_Details_ModuleId);
                            customrequestParams.put("companyid", companyId);
                            DOMap.put("id", row.getId());
                            customrequestParams.put("customdataclasspath", Constants.Acc_FixedAsset_Details_Custom_Data_classpath);
                            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                DOMap.put("accassetdetailscustomdata", row.getId());
                                accProductObj.updateAssetDetails(DOMap);
                            }
                        }
                    }
                    // save serial no detail in case of GR only not for invoice
                    if (invrecord && jobj.has("batchdetails") && !jobj.isNull("batchdetails")) { // saving batchdetail in case of fixed asset purchase invoice and in case of Fixed asset Gr which is linked from purchase invoice
                        String batchDetails = jobj.getString("batchdetails");
                        if (!StringUtil.isNullOrEmpty(batchDetails) && !batchDetails.equalsIgnoreCase("null")) {
                            String assetMainId = row.getId();
                            dataMap.put("assetDetailId", assetMainId);
                            saveAssetNewBatch(batchDetails, productId, request, assetMainId);
                        }
                    }

                    AssetDetails assetDetail = (AssetDetails) result.getEntityList().get(0);

                    assetDetailsSet.add(assetDetail);
                }
                if (assetduplicateId.length() > 0) {
                    assetduplicateId = assetduplicateId.substring(0, assetduplicateId.length() - 1);
                    throw new AccountingException("Duplicate Asset Id <b>" + assetduplicateId + "</b> is already generated through Fixed Asset Opening / Fixed Asset Goods Receipt / Fixed Asset Purchase Invoice.");
                }
             }
            
        } catch (UnsupportedEncodingException | ServiceException | ParseException | JSONException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Processing Data");
        }
        return assetDetailsSet;
    }
     
    public void saveAssetNewBatch(String batchJSON, String productId, Map<String, Object> request, String documentId) throws JSONException, ParseException, SessionExpiredException, ServiceException, UnsupportedEncodingException, AccountingException {
        JSONArray jArr = new JSONArray(batchJSON);
        String purchasebatchid = "";
        KwlReturnObject kmsg = null;
        double ActbatchQty = 1;
        double batchQty = 0;
        boolean isBatch = false;
        boolean isserial = false;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;
        DateFormat df = null;
        if (request.containsKey(Constants.df) && request.get(Constants.df) != null) {
            df = (DateFormat) request.get(Constants.df);
        }
        String companyid = "";
        if (request.containsKey(Constants.companyKey) && request.get(Constants.companyKey) != null) {
            companyid = (String) request.get(Constants.companyKey);
        }
        String transType = "0";
        if (request.containsKey("transType") && request.get("transType") != null && !StringUtil.isNullOrEmpty((String) request.get("transType"))) {
            transType = (String) request.get("transType");
        }
        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
        isBatch = preferences.isIsBatchCompulsory();
        isserial = preferences.isIsSerialCompulsory();

        if (!StringUtil.isNullOrEmpty(productId)) {
            KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), productId);
            Product product = (Product) prodresult.getEntityList().get(0);
            isLocationForProduct = product.isIslocationforproduct();
            isWarehouseForProduct = product.isIswarehouseforproduct();
            isBatchForProduct = product.isIsBatchForProduct();
            isSerialForProduct = product.isIsSerialForProduct();
            isRowForProduct = product.isIsrowforproduct();
            isRackForProduct = product.isIsrackforproduct();
            isBinForProduct = product.isIsbinforproduct();
        }
        NewProductBatch productBatch = null;
        String productBatchId = "";
        // Save Batch detail for both  option for serial no and batch also as if batch option is off then also we are generating batch in backend
        for (int i = 0; i < jArr.length(); i++) {
            JSONObject jSONObject = new JSONObject(jArr.get(i).toString());
            if (jSONObject.has("quantity") && !jSONObject.getString("quantity").equals("undefined") && !jSONObject.getString("quantity").equals("undefined")) {
                ActbatchQty = jSONObject.optDouble("quantity");
            }
            if (batchQty == 0) {
                batchQty = jSONObject.optDouble("quantity");
            }
            if ((isLocationForProduct || isWarehouseForProduct || isBatchForProduct || isRowForProduct || isRackForProduct || isBinForProduct) && (batchQty == ActbatchQty)) {

                HashMap<String, Object> pdfTemplateMap = new HashMap<>();
                pdfTemplateMap.put("companyid", companyid);
                pdfTemplateMap.put("name", StringUtil.DecodeText(jSONObject.optString("batch")));
                if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.optString("mfgdate"))) {
                    pdfTemplateMap.put("mfgdate", df.parse(jSONObject.optString("mfgdate")));
                }
                if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                    pdfTemplateMap.put("expdate", df.parse(jSONObject.getString("expdate")));
                }
                pdfTemplateMap.put("quantity", jSONObject.optString("quantity"));
                pdfTemplateMap.put("balance", jSONObject.optString("balance"));
                pdfTemplateMap.put("location", jSONObject.optString("location"));
                pdfTemplateMap.put("product", productId);
                pdfTemplateMap.put("asset", documentId); // stored the assetid of the asset
                pdfTemplateMap.put("warehouse", jSONObject.optString("warehouse"));

                pdfTemplateMap.put("row", jSONObject.optString("row"));
                pdfTemplateMap.put("rack", jSONObject.optString("rack"));
                pdfTemplateMap.put("bin", jSONObject.optString("bin"));

                pdfTemplateMap.put("isopening", false);
                pdfTemplateMap.put("transactiontype", transType); // This is GRN Type Tranction  
                pdfTemplateMap.put("ispurchase", true);
                kmsg = accCommonTablesDAO.saveNewBatchForProduct(pdfTemplateMap);

                if (kmsg != null && kmsg.getEntityList().size() != 0) {
                    productBatch = (NewProductBatch) kmsg.getEntityList().get(0);
                    productBatchId = productBatch.getId();
                }

                HashMap<String, Object> documentMap = new HashMap<>();
                documentMap.put("quantity", jSONObject.optString("quantity"));
                documentMap.put("batchmapid", productBatchId);
                documentMap.put("documentid", documentId);
                documentMap.put("transactiontype", transType); // This is GRN Type Tranction
                if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.optString("mfgdate"))) {
                    documentMap.put("mfgdate", df.parse(jSONObject.getString("mfgdate")));
                }
                if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.optString("expdate"))) {
                    documentMap.put("expdate", df.parse(jSONObject.optString("expdate")));
                }

                accCommonTablesDAO.saveBatchDocumentMapping(documentMap);
            }
            batchQty--;


            if (isSerialForProduct) { // if serial no option is on then only save the serial no details 
                HashMap<String, Object> pdfTemplateMap = new HashMap<>();
                pdfTemplateMap.put("id", jSONObject.optString("serialnoid"));
                pdfTemplateMap.put("companyid", companyid);
                pdfTemplateMap.put("product", productId);
                pdfTemplateMap.put("asset", documentId); // stored the assetid of the asset
                pdfTemplateMap.put("name", StringUtil.DecodeText(jSONObject.optString("serialno")));
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.optString("expstart"))) {
                    pdfTemplateMap.put("expfromdate", df.parse(jSONObject.getString("expstart")));
                }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.optString("expend"))) {
                    pdfTemplateMap.put("exptodate", df.parse(jSONObject.optString("expend")));
                }
                pdfTemplateMap.put("batch", productBatchId);
                pdfTemplateMap.put("transactiontype", transType); // This is GRN Type Tranction  
                pdfTemplateMap.put("quantity", "1"); // This is GRN Type Tranction  
                pdfTemplateMap.put("ispurchase", true);
                kmsg = accCommonTablesDAO.saveNewSerialForBatch(pdfTemplateMap);
                String serialDetailsId = "";
                if (kmsg != null && kmsg.getEntityList().size() != 0) {
                    NewBatchSerial serialDetails = (NewBatchSerial) kmsg.getEntityList().get(0);
                    serialDetailsId = serialDetails.getId();
                }

                HashMap<String, Object> documentMap = new HashMap<>();
                documentMap.put("quantity", 1);
                documentMap.put("serialmapid", serialDetailsId);
                documentMap.put("documentid", documentId);
                documentMap.put("transactiontype", transType); // This is GRN Type Tranction  
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.optString("expstart"))) {
                    documentMap.put("expfromdate", df.parse(jSONObject.optString("expstart")));
                }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.optString("expend"))) {
                    documentMap.put("exptodate", df.parse(jSONObject.optString("expend")));
                }

                // Code to Send Serial Numbers to Inventory
                KwlReturnObject krObj = accCommonTablesDAO.saveSerialDocumentMapping(documentMap);

                SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) krObj.getEntityList().get(0);
                if (jSONObject.has("customfield")) {
                    String customfield = jSONObject.optString("customfield");
                    if (!StringUtil.isNullOrEmpty(customfield)) {
                        HashMap<String, Object> DOMap = new HashMap<>();
                        JSONArray jcustomarray = new JSONArray(customfield);

                        HashMap<String, Object> customrequestParams = new HashMap<>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", "SerialDocumentMapping");
                        customrequestParams.put("moduleprimarykey", "SerialDocumentMappingId");
                        customrequestParams.put("modulerecid", serialDocumentMapping.getId());
                        customrequestParams.put("moduleid", Constants.SerialWindow_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        DOMap.put("id", serialDocumentMapping.getId());
                        customrequestParams.put("customdataclasspath", Constants.Acc_Serial_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            DOMap.put("serialcustomdataref", serialDocumentMapping.getId());
                            accCommonTablesDAO.updateserialcustomdata(DOMap);
                        }
                    }
                }

            } else {
                batchQty = 0;
            }
        }
    }
     
     public Set<AssetInvoiceDetailMapping> saveAssetInvoiceDetailMapping(String invoiceDetailId, Set<AssetDetails> assetDetailsSet, String companyId, int moduleId) throws AccountingException {
        Set<AssetInvoiceDetailMapping> assetInvoiceDetailMappings = new HashSet<AssetInvoiceDetailMapping>();
        try {
            for (AssetDetails assetDetails : assetDetailsSet) {
                HashMap<String, Object> dataMap = new HashMap<String, Object>();
                dataMap.put("invoiceDetail", invoiceDetailId);
                dataMap.put("moduleId", moduleId);
                dataMap.put("assetDetails", assetDetails.getId());
                dataMap.put("company", companyId);
                KwlReturnObject object = accProductObj.saveAssetInvoiceDetailMapping(dataMap);

                AssetInvoiceDetailMapping detailMapping = (AssetInvoiceDetailMapping) object.getEntityList().get(0);
                assetInvoiceDetailMappings.add(detailMapping);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            throw new AccountingException("Error while processing data.");
        }
        return assetInvoiceDetailMappings;
    }
    
    @Override
    public List saveGoodsReceiptOrder(JSONObject paramJobj, String invoiceid, Map<String, String> map) throws SessionExpiredException, ServiceException, AccountingException, UnsupportedEncodingException ,SeqFormatException{
        GoodsReceiptOrder grOrder = null;
        List li = new ArrayList();
        List mailParams = null;
        String unlinkMessage = "";
        try {
            String entryNumber = "";
            boolean gstIncluded = false;
            String invoiceno = "";
            /**
             * 'isdefaultHeaderMap' flag indicates the call coming from REST service
             */
            long createdon = System.currentTimeMillis();
            long updatedon = System.currentTimeMillis();
            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)) {
                entryNumber = paramJobj.optString("goodsReceiptNo");
                gstIncluded = (!StringUtil.isNullOrEmpty(paramJobj.optString("gstIncluded", ""))) ? Boolean.parseBoolean(paramJobj.getString("gstIncluded")) : false;
                invoiceno = paramJobj.optString("vendorInvoiceNumber");
            } else {
                if (paramJobj.has("numberDo") && paramJobj.optString("numberDo", null) != null) {
                    entryNumber = (String) paramJobj.get("numberDo");
                } else if (paramJobj.has("number") && paramJobj.optString("number", null) != null) {
                    entryNumber = (String) paramJobj.get("number");
                }
                if (paramJobj.has(NUMBER) && paramJobj.optString(NUMBER,null) != null) {
                    invoiceno = (String) paramJobj.get(NUMBER);
                }
                gstIncluded = (!StringUtil.isNullOrEmpty(paramJobj.optString("includingGST", ""))) ? Boolean.parseBoolean(paramJobj.getString("includingGST")) : false;
            }
            boolean isEditedPendingDocument = StringUtil.isNullOrEmpty(paramJobj.optString("isEditedPendingDocument")) ? false : Boolean.parseBoolean(paramJobj.optString("isEditedPendingDocument"));
            String userid = "";
            Date createdOn = new Date();
            if (paramJobj.has("userid") && paramJobj.optString("userid",null) != null) {
                userid = (String) paramJobj.getString("userid");
            }
            Locale locale = null;
            if (paramJobj.has("locale") && paramJobj.optString("locale",null) != null) {
                locale = (Locale) paramJobj.get("locale");
            }
            String companyid = "";
            if (paramJobj.has(Constants.companyKey) && paramJobj.optString(Constants.companyKey,null) != null) {
                companyid = (String) paramJobj.get(Constants.companyKey);
            }
            String currencyid = "";
            if (paramJobj.has("currencyid") && paramJobj.optString("currencyid",null) != null) {
                currencyid = (String) paramJobj.get("currencyid");
            }
            boolean seqformat_oldflag = false;
            if (paramJobj.has("seqformat_oldflagDo") && paramJobj.optString("seqformat_oldflagDo",null) != null) {
                seqformat_oldflag = StringUtil.getBoolean((String) paramJobj.get("seqformat_oldflagDo"));
            } else if (paramJobj.has("seqformat_oldflag") && paramJobj.optString("seqformat_oldflag",null) != null) {
                seqformat_oldflag = StringUtil.getBoolean((String) paramJobj.get("seqformat_oldflag"));
            }
            int DOSeqNum = 0;
            if (paramJobj.has("DOSeqNum") && paramJobj.get("DOSeqNum") != null) {
                DOSeqNum = Integer.parseInt(paramJobj.get("DOSeqNum").toString());
            }
            String datePrefix = "";
            if (paramJobj.has(Constants.DATEPREFIX) && paramJobj.optString(Constants.DATEPREFIX,null) != null) {
                datePrefix = (String) paramJobj.get(Constants.DATEPREFIX);
            }
            String dateSuffix = "";
            if (paramJobj.has(Constants.DATESUFFIX) && paramJobj.optString(Constants.DATESUFFIX,null) != null) {
                dateSuffix = (String) paramJobj.get(Constants.DATESUFFIX);
            }
            String sequenceformat = "";
            if (paramJobj.has("sequenceformatDo") && paramJobj.optString("sequenceformatDo",null) != null) {
                sequenceformat = (String) paramJobj.get("sequenceformatDo");
            } else if (paramJobj.has("sequenceformat") && paramJobj.optString("sequenceformat",null) != null) {
                sequenceformat = (String) paramJobj.get("sequenceformat");
            }
            String costCenterId = "";
            if (paramJobj.has("costcenter") && paramJobj.optString("costcenter",null) != null) {
                costCenterId = (String) paramJobj.get("costcenter");
            }
            double externalCurrencyRate = 0.0;
            if (paramJobj.has("externalcurrencyrate") && paramJobj.optString("externalcurrencyrate",null) != null) {
                externalCurrencyRate = StringUtil.getDouble(paramJobj.optString("externalcurrencyrate"));
            }
            String doid = "";
            if (paramJobj.has("doid") && paramJobj.optString("doid",null) != null) {
                doid = (String) paramJobj.get("doid");
            }
            String status = "";
            if (paramJobj.has("statuscombo") && paramJobj.optString("statuscombo",null) != null) {
                status = (String) paramJobj.get("statuscombo");
            }
            String isfavourite = "";
            if (paramJobj.has("isfavourite") && paramJobj.optString("isfavourite",null) != null) {
                isfavourite = (String) paramJobj.get("isfavourite");
            }
            boolean isEdit = false;
            if (paramJobj.has("isEdit") && paramJobj.optString("isEdit",null) != null) {
                isEdit = Boolean.parseBoolean((String) paramJobj.get("isEdit"));
            }
            boolean isCopy = false;
            if (paramJobj.has("copyInv") && paramJobj.optString("copyInv",null) != null) {
                isCopy = Boolean.parseBoolean((String) paramJobj.get("copyInv"));
            }
            boolean isFixedAsset = false;
            if (paramJobj.has("isFixedAsset") && paramJobj.optString("isFixedAsset",null) != null) {
                isFixedAsset = Boolean.parseBoolean((String) paramJobj.get("isFixedAsset"));
            }
            boolean isConsignment = false;
            if (paramJobj.has("isConsignment") && paramJobj.optString("isConsignment",null) != null) {
                isConsignment = Boolean.parseBoolean((String) paramJobj.get("isConsignment"));
            }
    
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            boolean isnegativestockforlocwar = extraCompanyPreferences.isIsnegativestockforlocwar();
            String nextAutoNumber = "";
            int countryid = 0;
            boolean rcmApplicable = (!StringUtil.isNullOrEmpty(paramJobj.optString("GTAApplicable", ""))) ? Boolean.parseBoolean(paramJobj.getString("GTAApplicable")) : false;
            boolean EWAYApplicable = paramJobj.optBoolean("EWAYApplicable",false);
            if(extraCompanyPreferences != null && extraCompanyPreferences.getCompany().getCountry() != null){
                countryid = Integer.parseInt(extraCompanyPreferences.getCompany().getCountry().getID());
            }
            boolean isAutoCreateDO = false;
            if (paramJobj.has("isAutoCreateDO") && paramJobj.optString("isAutoCreateDO",null) != null) {
                isAutoCreateDO = Boolean.FALSE.parseBoolean((String) paramJobj.get("isAutoCreateDO"));
            }
            String createdby = "";
            if (paramJobj.has("userid") && paramJobj.optString("userid",null) != null) {
                createdby = (String) paramJobj.get("userid");
            }
            boolean sendForQAApproval = paramJobj.optBoolean("sendForQAApproval");
            if (sendForQAApproval) {
                if ((StringUtil.isNullOrEmpty(extraCompanyPreferences.getInspectionStore()) && StringUtil.isNullOrEmpty(extraCompanyPreferences.getRepairStore()))) {
                    throw new InventoryException(messageSource.getMessage("acc.companypreferences.qastore.repairstore.notset", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                } else if ((StringUtil.isNullOrEmpty(extraCompanyPreferences.getInspectionStore()))) {
                    throw new InventoryException(messageSource.getMessage("acc.companypreferences.qastore.notset", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                } else if (StringUtil.isNullOrEmpty(extraCompanyPreferences.getRepairStore())) {
                    throw new InventoryException(messageSource.getMessage("acc.companypreferences.repairstore.notset", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                }
            }
            String modifiedby = "";
            if (paramJobj.has("userid") && paramJobj.optString("userid",null) != null) {
                modifiedby = (String) paramJobj.get("userid");
            }
            HashMap<String, Object> doDataMap = new HashMap<>();
            Map<String, Object> oldgro = new HashMap<>();
            Map<String, Object> newAuditKey = new HashMap<>();
            String auditMessage = "";
            String deletedLinkedDocumentID = "";
            if (paramJobj.has("deletedLinkedDocumentId") && paramJobj.optString("deletedLinkedDocumentId",null) != null) {
                deletedLinkedDocumentID = (String) paramJobj.get("deletedLinkedDocumentId");
            }

            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            if (!isAutoCreateDO) {
                String msg = checkPOUsedFlag(paramJobj, 1);
                if (!StringUtil.isNullOrEmpty(msg)) { // Check if PO is already used in Vendor Invoice or not.
                    throw new AccountingException(msg);
                }
            }

            if (!StringUtil.isNullOrEmpty(doid) && !isAutoCreateDO) {
                // delete asset detail here
                if (isFixedAsset) {
                    HashMap<String, Object> deleteParams = new HashMap<>();
                    deleteParams.put("doid", doid);
                    deleteParams.put("companyid", companyid);
                    accGoodsReceiptobj.deleteAssetDetailsLinkedWithGROrder(deleteParams);
                }
                if (!isFixedAsset && isEdit) { //Added fixed asset check beacuse this funtion is used for normal Goods Receipt only
                    isGoodsReceiptOrderEditable(paramJobj, companyid);
                }
                KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptOrderInventory(doid);
                KwlReturnObject resultBatch = accGoodsReceiptobj.getGoodsReceiptOrderBatches(doid, companyid);

                HashMap<String, Object> requestParams = new HashMap<>();
                requestParams.put("doid", doid);
                requestParams.put("companyid", companyid);
                requestParams.put("isConsignment", isConsignment);
                requestParams.put("isnegativestockforlocwar", isnegativestockforlocwar);

                // update the purchase order balance quantity
                accGoodsReceiptobj.updatePOBalanceQtyAfterGR(doid, "", companyid);
                accGoodsReceiptobj.deleteGoodsReceiptOrdersBatchSerialDetails(requestParams); // dlete serial no and mapping
                stockMovementService.removeStockMovementByReferenceId(preferences.getCompany(), doid);

                // Delete Goods Receipt Order Details Term Map  While Update time ... 
                if (extraCompanyPreferences.getLineLevelTermFlag()==1) {
                    if (isEdit) {
                        KwlReturnObject venresult = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), doid);
                        GoodsReceiptOrder goodsReceiptOrder = (GoodsReceiptOrder) venresult.getEntityList().get(0);
                        Set<GoodsReceiptOrderDetails> groDetailsobj = goodsReceiptOrder.getRows();
                        for (GoodsReceiptOrderDetails temObj : groDetailsobj) {
                            accGoodsReceiptobj.deleteGRODetailsTermMap(temObj.getID());
                        }
                    }
                }
                
                /**
                 * Delete Mapping in edit case
                 */
                if (!StringUtil.isNullOrEmpty(doid)) {
                    KwlReturnObject venresult = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), doid);
                    GoodsReceiptOrder goodsReceiptOrder = (GoodsReceiptOrder) venresult.getEntityList().get(0);
                    Set<GoodsReceiptOrderDetails> grodetails = goodsReceiptOrder.getRows();
                    for (GoodsReceiptOrderDetails goodsReceiptOrderDetails : grodetails) {
                        JSONObject json = new JSONObject();
                        json.put("grodid", goodsReceiptOrderDetails.getID());
                        KwlReturnObject kwlReturnObject = stockService.getGRODetailISTMapping(json);
                        List<GRODetailISTMapping> groDetailIstMappings = kwlReturnObject.getEntityList();
                        for (GRODetailISTMapping groDetailIstMapping : groDetailIstMappings) {
                            /**
                             * Don't allow user to edit GRN, if GRN is
                             * approved/rejected from QC store.
                             */
                            if (groDetailIstMapping.getApprovedInterStoreTransferRequests() != null && !groDetailIstMapping.getApprovedInterStoreTransferRequests().isEmpty()) {
                                throw new AccountingException(messageSource.getMessage("acc.goodsreceiptnote.cannot.be.deleted.as.approvedOrRejected.byQAstore", new Object[]{"edit", goodsReceiptOrder.getGoodsReceiptOrderNumber(), "approved"}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                            }
                            if (groDetailIstMapping.getRejectedInterStoreTransferRequests() != null && !groDetailIstMapping.getRejectedInterStoreTransferRequests().isEmpty()) {
                                throw new AccountingException(messageSource.getMessage("acc.goodsreceiptnote.cannot.be.deleted.as.approvedOrRejected.byQAstore", new Object[]{"edit", goodsReceiptOrder.getGoodsReceiptOrderNumber(), "rejected"},Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                            }
                            /**
                             * Delete inter store transfer request which is
                             * created to send GRN document for QC approval.
                             */
                          
                            if (groDetailIstMapping.getInterStoreTransferRequest() != null) {
                                if (groDetailIstMapping.getInterStoreTransferRequest().getStatus() != InterStoreTransferStatus.INTRANSIT) {
                                     throw new AccountingException(messageSource.getMessage("acc.goodsreceiptnote.cannot.be.deleted.as.stockisaccepted.byQAstore", new Object[]{"edit",goodsReceiptOrder.getGoodsReceiptOrderNumber()}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                                } else {
                                    istService.deleteISTRequest(groDetailIstMapping.getInterStoreTransferRequest());
                                }
                            }
                        }
                    }
                }
                accGoodsReceiptobj.deleteGoodsReceiptOrderDetails(doid, companyid);
                List list = result.getEntityList();
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    String inventoryid = (String) itr.next();
                    accProductObj.deleteInventory(inventoryid, companyid);
                }
                List listBatch = resultBatch.getEntityList();
                Iterator itrBatch = listBatch.iterator();
                while (itrBatch.hasNext()) {
                    String batchid = (String) itrBatch.next();
                    if (!StringUtil.isNullOrEmpty(batchid)) {
                        accCommonTablesDAO.deleteBatches(batchid, companyid);
                    }
                }

                HashMap<String, Object> termReqMap = new HashMap<>();
                termReqMap.put("doid", doid);
                /*
                 * Deleting Linking information of Goods receipt during Editing
                 * Goods receipt
                 */
                accGoodsReceiptobj.deleteLinkingInformationOfGR(termReqMap);//Deleting linking informatio

                /*
                 * Updating Isopen Flag=0 & Linkflag =0 of PO & PI during
                 * Editing GR
                 */
                if (!StringUtil.isNullOrEmpty(deletedLinkedDocumentID)) {
                    String[] deletedLinkedDocumentIDArr = deletedLinkedDocumentID.split(",");

                    for (int i = 0; i < deletedLinkedDocumentIDArr.length; i++) {
                        KwlReturnObject venresult = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), deletedLinkedDocumentIDArr[i]);
                        PurchaseOrder purchaseorder = (PurchaseOrder) venresult.getEntityList().get(0);
                        if (purchaseorder != null) {
                            termReqMap.put("purchaseOrder", purchaseorder);
                            termReqMap.put("value", "0");
                            termReqMap.put("isOpen", true);
                            accGoodsReceiptobj.updatePOLinkflag(termReqMap);
                            if (i == 0) {
                                unlinkMessage += " from the Purchase Order(s) ";
                            }
                            if (unlinkMessage.indexOf(purchaseorder.getPurchaseOrderNumber()) == -1) {
                                unlinkMessage += purchaseorder.getPurchaseOrderNumber() + ", ";
                            }
                        } else {
                            venresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), deletedLinkedDocumentIDArr[i]);
                            GoodsReceipt invoice = (GoodsReceipt) venresult.getEntityList().get(0);
                            if (invoice != null) {
                                termReqMap.put("isOpenInGR", true);
                                termReqMap.put("goodsReceipt", invoice);
                                accGoodsReceiptobj.updatePILinkflag(termReqMap);
                                if (i == 0) {
                                    unlinkMessage += " from the Purchase Invoice(s) ";
                                }
                                if (unlinkMessage.indexOf(invoice.getGoodsReceiptNumber()) == -1) {
                                    unlinkMessage += invoice.getGoodsReceiptNumber() + ", ";
                                }
                            }
                        }
                    }
                }

                if (!StringUtil.isNullOrEmpty(unlinkMessage) && unlinkMessage.endsWith(", ")) {
                    unlinkMessage = unlinkMessage.substring(0, unlinkMessage.length() - 2);
                }
            }

            boolean isFromOtherSource = paramJobj.optBoolean("isFromOtherSource", false);
            synchronized (this) {
                if (!StringUtil.isNullOrEmpty(doid) && !isAutoCreateDO && !isFromOtherSource) { // Edit case
                    KwlReturnObject socnt = accGoodsReceiptobj.getDuplicaeGoodsReceiptOrderNumber(entryNumber, companyid, doid);
                    if (sequenceformat.equals("NA") && socnt.getRecordTotalCount() > 0) {
                        throw new AccountingException(messageSource.getMessage("acc.field.GoodsReceiptnumber", null, locale) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, locale));
                    }
                    KwlReturnObject res = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), doid);
                    GoodsReceiptOrder gro = (GoodsReceiptOrder) res.getEntityList().get(0);
                    if (isEdit == true) {
                        setValuesForAuditTrialForGRO(gro, paramJobj, oldgro, doDataMap, newAuditKey);
                    }
                    if (!sequenceformat.equals("NA")) {
                        nextAutoNumber = entryNumber;
                    }
                    doDataMap.put("id", doid);
                } else {
                    if (!"NA".equals(sequenceformat) && StringUtil.isNullOrEmpty(doid) && !isFromOtherSource) {
                        entryNumber = nextAutoNumber;
                    }
                }               
                if (sequenceformat.equals("NA")) {//In case of NA checks wheather this number can also be generated by a sequence format or not 
                    List list = accCompanyPreferencesObj.checksEntryNumberForSequenceNumber(Constants.Acc_Goods_Receipt_ModuleId, entryNumber, companyid);
                    if (!list.isEmpty()) {
                        boolean isvalidEntryNumber = (Boolean) list.get(0);
                        String formatName = (String) list.get(1);
                        if (!isvalidEntryNumber) {
                            throw new AccountingException(messageSource.getMessage("acc.common.enterdocumentnumber", null, locale) + " <b>" + entryNumber + "</b> " + messageSource.getMessage("acc.common.belongsto", null, locale) + " <b>" + formatName + "</b>. " + messageSource.getMessage("acc.common.plselectseqformat", null, locale) + " <b>" + formatName + "</b> " + messageSource.getMessage("acc.common.insteadof", null, locale));
                        }
                    }
                }
                if (countryid == Constants.indian_country_id) {
                    String supplierInvoiceNumber = paramJobj.optString(Constants.SUPPLIERINVOICENO);
                    String vendor = paramJobj.optString("vendor");
                    String goodsReceiptNo = "";
                    if (!StringUtil.isNullOrEmpty(supplierInvoiceNumber) && !StringUtil.isNullOrEmpty(vendor)) {
                        JSONObject reqParams = new JSONObject();
                        reqParams.put("supplierInvoiceNumber", supplierInvoiceNumber);
                        reqParams.put("vendor", vendor);
                        reqParams.put("companyid", companyid);
                        reqParams.put("doid", doid);
                        KwlReturnObject result = accGoodsReceiptobj.getDuplicateSupplierInvoiceNumberForGRN(reqParams);
                        if (result != null && result.getRecordTotalCount() > 0) {
                            List<String> list = result.getEntityList();
                            if (!list.isEmpty()) {
                                for (String obj : list) {
                                    goodsReceiptNo = !StringUtil.isNullOrEmpty(obj) ? obj : "";
                                }
                                throw new AccountingException(messageSource.getMessage("acc.gst.SINErorGR", null, locale) + "<b>" + goodsReceiptNo + "<b>");
                            }
                        }
                    }
                }
            }
            boolean autogen = sequenceformat.equals("NA") ? false : true;
            if (DOSeqNum != 0) {
                autogen = true;
            }
            DateFormat df = authHandler.getDateOnlyFormat();
//            if (paramJobj.has(Constants.df) && paramJobj.optString(Constants.df,null) != null) {
//                df = (DateFormat) paramJobj.get(Constants.df);
//            }
            if (sequenceformat.equals("NA") || !StringUtil.isNullOrEmpty(doid)) {
                doDataMap.put("entrynumber", entryNumber);
                if (isAutoCreateDO && !sequenceformat.equals("NA")) {
                    doDataMap.put(Constants.SEQNUMBER, DOSeqNum);
                    doDataMap.put(Constants.SEQFORMAT, sequenceformat);
                    doDataMap.put(Constants.DATEPREFIX, datePrefix);
                    doDataMap.put(Constants.DATESUFFIX, dateSuffix);
                }
            } else {
                if (isFromOtherSource) {        //this block will pass entry number from imported CSV.
                    doDataMap.put("entrynumber", entryNumber);
                    doDataMap.put(Constants.SEQNUMBER, DOSeqNum);
                    doDataMap.put(Constants.SEQFORMAT, sequenceformat);
                } else {
                    doDataMap.put("entrynumber", "");
                }
            }
            String taxid = "";
            if (paramJobj.has(TAXID) && paramJobj.optString(TAXID,null) != null) {
                taxid = (String) paramJobj.get(TAXID);
            }
            if (paramJobj.optString(TAXID).equalsIgnoreCase("None")) {
                taxid = null;
            } else {
                taxid = paramJobj.optString(TAXID,null);
            }
            doDataMap.put("autogenerated", autogen);
            doDataMap.put("externalCurrencyRate", externalCurrencyRate);
            //if (!StringUtil.isNullOrEmpty(taxid)) {
           
            /* If Global tax changing from Yes to No then key should be put in dataMap  
             *so that it should be saved in database
             */
            doDataMap.put("taxid", taxid);
           // }
            if (paramJobj.has("memo") && paramJobj.optString("memo",null) != null) {
                doDataMap.put("memo", (String) paramJobj.get("memo"));
            }
            if (paramJobj.has("challannumber") && paramJobj.optString("challannumber",null) != null) {
                doDataMap.put("challannumber", (String) paramJobj.get("challannumber"));
            }
            if (countryid == Constants.indian_country_id && paramJobj.has("formtypeid") && paramJobj.optString("formtypeid",null) != null) {
                doDataMap.put("formtype", (String) paramJobj.get("formtypeid"));
            }
            if (paramJobj.has("posttext") && paramJobj.optString("posttext",null) != null) {
                doDataMap.put("posttext", (String) paramJobj.get("posttext"));
            }
            String vendId = "";
            /**
             * 'isdefaultHeaderMap' flag indicates the call coming from REST service
             */
            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)) {
                vendId = paramJobj.optString("VendorName", null);
            } else if (paramJobj.has("vendor") && paramJobj.optString("vendor",null) != null) {
                vendId = paramJobj.optString("vendor");
            }
            doDataMap.put("vendorid", vendId);
            if (paramJobj.has("shipvia") && paramJobj.optString("shipvia",null) != null) {
                doDataMap.put("shipvia", (String) paramJobj.get("shipvia"));
            }
            if (paramJobj.has("term") && paramJobj.get("term") != null) {
                doDataMap.put("termid", (String) paramJobj.get("term"));
            }
            if (paramJobj.has("fob") && paramJobj.get("fob") != null) {
                doDataMap.put("fob", (String) paramJobj.get("fob"));
            }
            if (paramJobj.has("agent") && paramJobj.get("agent") != null) {
                doDataMap.put("agent", (String) paramJobj.get("agent"));
            }
            doDataMap.put("createdby", createdby);
            doDataMap.put("modifiedby", modifiedby);
            doDataMap.put("createdon", createdon);
            doDataMap.put("updatedon", updatedon);
            if (paramJobj.has("permitNumber") && paramJobj.optString("permitNumber",null) != null && !StringUtil.isNullOrEmpty(paramJobj.optString("permitNumber"))) {
                doDataMap.put("permitNumber", paramJobj.get("permitNumber"));
            }
            if (paramJobj.has(SHIPDATE) && paramJobj.optString(SHIPDATE,null) != null && !StringUtil.isNullOrEmpty(paramJobj.optString(SHIPDATE,null))) {
                doDataMap.put(SHIPDATE, df.parse((String) paramJobj.get(SHIPDATE)));
            }
            if (paramJobj.has("billdate") && paramJobj.optString("billdate",null) != null && !StringUtil.isNullOrEmpty((String) paramJobj.get("billdate"))) {
                doDataMap.put("orderdate", df.parse((String) paramJobj.get("billdate")));
                doDataMap.put(Constants.Checklocktransactiondate, (String) paramJobj.get("billdate")); // ERP-16800-Without parsing date
            }
            if (paramJobj.has(Constants.SUPPLIERINVOICENO) && !StringUtil.isNullOrEmpty(paramJobj.optString(Constants.SUPPLIERINVOICENO))) {
                doDataMap.put(Constants.SUPPLIERINVOICENO, paramJobj.optString(Constants.SUPPLIERINVOICENO));
            }

            doDataMap.put("status", status);
            doDataMap.put("isfavourite", isfavourite);
            doDataMap.put("isFixedAsset", isFixedAsset);
            doDataMap.put("isConsignment", isConsignment);
            doDataMap.put("gstIncluded", gstIncluded);
            doDataMap.put("rcmApplicable", rcmApplicable);
            doDataMap.put(Constants.EWAYApplicable, EWAYApplicable);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                doDataMap.put("costCenterId", costCenterId);
            }
            doDataMap.put("companyid", companyid);
            if (isFixedAsset || isAutoCreateDO || isConsignment) { // if there is no approval rule then default approvedlevel value is 11, so in case of fixed asset, Approve status level value will be 11;
                doDataMap.put("approvestatuslevel", 11);
            }
            doDataMap.put("currencyid", currencyid);
            if (isAutoCreateDO) {
                doDataMap.put("isautogeneratedgro", isAutoCreateDO); // true if GRO is generated from Vendor invoice side
            }
            String linktransaction = paramJobj.optString("fromLinkCombo");
            if (!StringUtil.isNullOrEmpty(linktransaction)) {
                if (StringUtil.equalIgnoreCase(linktransaction, "Job Work Out Order")) {
                    doDataMap.put("isJobWorkOutOrder", true);
                }
            }
            Vendor vendor = null;
            KwlReturnObject vendresult = null;
            if (!StringUtil.isNullOrEmpty(vendId)) {
                vendresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), vendId);
                vendor = (Vendor) vendresult.getEntityList().get(0);
            }

            boolean isDefaultAddress = false;
            if (paramJobj.has("defaultAdress") && paramJobj.optString("defaultAdress",null) != null) {
                isDefaultAddress = Boolean.parseBoolean((String) paramJobj.get("defaultAdress"));
            }
            Map<String, Object> addressParams = Collections.EMPTY_MAP;
            if (isDefaultAddress) { // defautladdress came true only when user create a new GRO without saving any address from address window.customer addresses taken default 
                if (extraCompanyPreferences.isIsAddressFromVendorMaster()) {
                    addressParams = AccountingAddressManager.getDefaultVendorAddressParams(vendId, companyid, accountingHandlerDAOobj);
                } else {
                    addressParams = AccountingAddressManager.getDefaultVendorCompanyAddressParams(vendId, companyid, accountingHandlerDAOobj);
                }
            } else {
                    addressParams = AccountingAddressManager.getAddressParamsJson(paramJobj,true);
            }
            String inventoryJEID = "";
            if (!StringUtil.isNullOrEmpty(doid)) { // If Edit case then updating existing GRO address 
                KwlReturnObject res = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), doid);
                GoodsReceiptOrder order = (GoodsReceiptOrder) res.getEntityList().get(0);
                String addressID = order.getBillingShippingAddresses() == null ? "" : order.getBillingShippingAddresses().getID();
                addressParams.put("id", addressID);
                if (order.getInventoryJE() != null) {
                    inventoryJEID = order.getInventoryJE().getID();
                }
            }
            KwlReturnObject addressresult = accountingHandlerDAOobj.saveAddressDetail(addressParams, companyid);
            BillingShippingAddresses bsa = (BillingShippingAddresses) addressresult.getEntityList().get(0);
            doDataMap.put("billshipAddressid", bsa.getID());
            String goodsReceiptTerms = null;
            if (paramJobj.has("invoicetermsmap") && paramJobj.optString("invoicetermsmap") != null) {
                goodsReceiptTerms = (String) paramJobj.get("invoicetermsmap");
            }
            if (StringUtil.isAsciiString(goodsReceiptTerms)) {
                if (new JSONArray(goodsReceiptTerms).length() > 0) {
                    if (paramJobj.has(Constants.termsincludegst) && paramJobj.optString(Constants.termsincludegst,null) != null) {
                        doDataMap.put(Constants.termsincludegst, Boolean.parseBoolean(paramJobj.optString(Constants.termsincludegst)));
                    }
                }
            }
            /**
             * ERP-32829 
             */
            if(extraCompanyPreferences.isIsNewGST()){
                doDataMap.put("gstapplicable", paramJobj.optBoolean("GSTApplicable", false));
                doDataMap.put(Constants.isMerchantExporter, paramJobj.optBoolean(Constants.isMerchantExporter, false));
            }    
              //Rounding Adjustment will always calculated after calculation of totalInvAmount
            boolean isRoundingAdjustmentApplied = !StringUtil.isNullOrEmpty(paramJobj.optString(Constants.IsRoundingAdjustmentApplied,null))?Boolean.parseBoolean(paramJobj.optString(Constants.IsRoundingAdjustmentApplied)): false;
            doDataMap.put(Constants.IsRoundingAdjustmentApplied, isRoundingAdjustmentApplied);
            
            doDataMap.put(Constants.isApplyTaxToTerms,paramJobj.optBoolean(Constants.isApplyTaxToTerms,false));
            KwlReturnObject doresult = accGoodsReceiptobj.saveGoodsReceiptOrder(doDataMap);
            grOrder = (GoodsReceiptOrder) doresult.getEntityList().get(0);
        /**
             * Save GST History Customer/Vendor data.
             */
            if (grOrder.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                paramJobj.put("docid", grOrder.getID());
                paramJobj.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
                /**
                 * IF Auto Generated GRN from Purchase Invoice then check GST
                 * History present for GRN or not. Problem only in Edit case.
                 */
                if (isAutoCreateDO && isEdit) {
                    JSONObject DODocGSTHistory = new JSONObject();
                    DODocGSTHistory.put("refdocid", grOrder.getID());
                    fieldDataManagercntrl.getGSTDocumentHistory(DODocGSTHistory);
                    paramJobj.put("gstdochistoryid", DODocGSTHistory.optString("gstdochistoryid", ""));
                }
                fieldDataManagercntrl.createRequestMapToSaveDocHistory(paramJobj);
            }
            String linkedDocuments = "";
            doDataMap.put("id", grOrder.getID());
            Set<JournalEntryDetail> jedetails = new HashSet<>();
            String jeid = "";
            JournalEntry inventoryJE = null;
            boolean postInventoryJournalEntry = false;
            /*
             * Check if there is any non-inventory present or not, as Inventory Journal Entry should not be posted for non-inventory products.
             */
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.detail))) {
                JSONArray jArr = new JSONArray(paramJobj.optString(Constants.detail));
                for (int i = 0; i < jArr.length(); i++) {
                    JSONObject jobj = jArr.getJSONObject(i);
                    if (!StringUtil.isNullOrEmpty(jobj.getString(Constants.productid))) {
                        KwlReturnObject proresult = accountingHandlerDAOobj.getObject(Product.class.getName(), jobj.getString(Constants.productid));
                        Product product = (Product) proresult.getEntityList().get(0);
                        /**
                          * Added (!product.isAsset) -: Asset GR - JE should not be posted ERP-38879.
                          */
                        if (product != null && product.getProducttype() != null && !(product.getProducttype().getID().equals(Producttype.SERVICE) || product.getProducttype().getID().equals(Producttype.NON_INVENTORY_PART)) && !product.isAsset()) {
                            postInventoryJournalEntry = true;
                            break;
                        }
                    }
                }
            }
            try { // create JE for GRO
                if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD) && postInventoryJournalEntry) {
                    String oldjeid = null;
                    String jeentryNumber = null;
                    boolean jeautogenflag = false;
                    String jeIntegerPart = "";
                    String jeDatePrefix = "";
                    String jeAfterDatePrefix = "";
                    String jeDateSuffix = "";
                    String jeSeqFormatId = "";
                    Date entryDate = null;
                    if (paramJobj.has("billdate") && paramJobj.optString("billdate",null) != null && !StringUtil.isNullOrEmpty(paramJobj.optString("billdate"))) {
                        entryDate = df.parse(paramJobj.optString("billdate"));
                    }
                    if (grOrder != null && grOrder.getInventoryJE() != null) {
                        jeentryNumber = grOrder.getInventoryJE().getEntryNumber(); // preserving these data to generate same JE number in edit case                    
                        jeautogenflag = grOrder.getInventoryJE().isAutoGenerated();
                        jeSeqFormatId = grOrder.getInventoryJE().getSeqformat() == null ? "" : grOrder.getInventoryJE().getSeqformat().getID();
                        jeIntegerPart = String.valueOf(grOrder.getInventoryJE().getSeqnumber());
                        jeDatePrefix = grOrder.getInventoryJE().getDatePreffixValue();
                        jeAfterDatePrefix = grOrder.getInventoryJE().getDateAfterPreffixValue();
                        jeDateSuffix = grOrder.getInventoryJE().getDateSuffixValue();
                        oldjeid = grOrder.getInventoryJE().getID();
                        grOrder.setInventoryJE(null);
                        accGoodsReceiptobj.updateGoodsReceiptOrderSetNull(grOrder);
                        accJournalEntryobj.deleteJournalEntryPermanent(oldjeid, companyid);
                    } else if (isAutoCreateDO && !StringUtil.isNullOrEmpty(inventoryJEID)) {
                        KwlReturnObject inventoryJEResult = accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), inventoryJEID);
                        JournalEntry inventoryje = (JournalEntry) inventoryJEResult.getEntityList().get(0);
                        if (inventoryje != null) {
                            jeentryNumber = inventoryje.getEntryNumber(); //preserving these data to generate same JE number in edit case                    
                            jeautogenflag = inventoryje.isAutoGenerated();
                            jeSeqFormatId = inventoryje.getSeqformat() == null ? "" : inventoryje.getSeqformat().getID();
                            jeIntegerPart = String.valueOf(inventoryje.getSeqnumber());
                            jeDatePrefix = inventoryje.getDatePreffixValue();
                            jeAfterDatePrefix = inventoryje.getDateAfterPreffixValue();
                            jeDateSuffix = inventoryje.getDateSuffixValue();
                            oldjeid = inventoryje.getID();
                            grOrder.setInventoryJE(null);
                            accGoodsReceiptobj.updateGoodsReceiptOrderSetNull(grOrder);
                            accJournalEntryobj.deleteJournalEntryPermanent(oldjeid, companyid);
                        }
                    }
                    if (StringUtil.isNullOrEmpty(oldjeid)) {
                        synchronized (this) {
                            HashMap<String, Object> JEFormatParams = new HashMap<>();
                            JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                            JEFormatParams.put("modulename", "autojournalentry");
                            JEFormatParams.put("companyid", companyid);
                            JEFormatParams.put("isdefaultFormat", true);
                            KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                            SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                            Map<String, Object> seqNumberMap = new HashMap<>();
                            seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, entryDate);
                            jeentryNumber = (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER); // next auto generated number
                            jeIntegerPart = (String) seqNumberMap.get(Constants.SEQNUMBER); // integer Part
                            jeDatePrefix = (String) seqNumberMap.get(Constants.DATEPREFIX); // Date Prefix Part
                            jeAfterDatePrefix = (String)seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
                            jeDateSuffix = (String) seqNumberMap.get(Constants.DATESUFFIX); // Date Suffix Part
                            jeSeqFormatId = format.getID();
                            jeautogenflag = true;
                        }
                    }

                    Map<String, Object> jeDataMap = AccountingManager.getGlobalParamsJson(paramJobj);
                    jeDataMap.put("entrynumber", jeentryNumber);
                    jeDataMap.put("autogenerated", jeautogenflag);
                    jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
                    jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
                    jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
                    jeDataMap.put(Constants.DATEAFTERPREFIX, jeAfterDatePrefix);
                    jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
                    jeDataMap.put("entrydate", entryDate);
                    jeDataMap.put("companyid", companyid);
                    jeDataMap.put("createdby", createdby);
                    jeDataMap.put("memo", paramJobj.optString("memo",""));
                    jeDataMap.put("currencyid", currencyid);
                    jeDataMap.put("costcenterid", costCenterId);
                    jeDataMap.put("transactionModuleid", Constants.Acc_Goods_Receipt_ModuleId);
                    jeDataMap.put("transactionId", grOrder.getID());
                    jeDataMap.put(JournalEntryConstants.EXTERNALCURRENCYRATE, grOrder.getExternalCurrencyRate());
                    KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap); // Create Journal entry without JEdetails
                    inventoryJE = (JournalEntry) jeresult.getEntityList().get(0);
                    jeid = inventoryJE.getID();
                    grOrder.setInventoryJE(inventoryJE);
                }
            } catch (Exception ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.WARNING, ex.getMessage());
            }
            String interstore_loc_No = "";
            SeqFormat seqFormat = null;
            try {
                if (sendForQAApproval) { // send GRN for QA approval
                    seqFormat = seqService.getDefaultSeqFormat(extraCompanyPreferences.getCompany(), ModuleConst.INTER_STORE_TRANSFER);
                    if (seqFormat != null) {
                        interstore_loc_No = seqService.getNextFormatedSeqNumber(seqFormat);
                        paramJobj.put("interstoreSeqNo", interstore_loc_No);
                        paramJobj.put("interstoreseqFormat", seqFormat);
                    } else {
                        throw new AccountingException(messageSource.getMessage("acc.companypreferences.defaultsequenceformatforistnotset", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    }
                }
            } catch (SeqFormatException ex) {
                throw new AccountingException(messageSource.getMessage("acc.companypreferences.defaultsequenceformatforistnotset", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
            }
//            if (countryid == Constants.indian_country_id && vendor != null && vendor.getGSTRegistrationType() != null) {
//                MasterItem gstRegistrationType = vendor.getGSTRegistrationType();
//                if (gstRegistrationType != null && gstRegistrationType.getDefaultMasterItem() != null && !StringUtil.isNullOrEmpty(gstRegistrationType.getDefaultMasterItem().getID())) {
//                    paramJobj.put("isUnRegisteredDealer", gstRegistrationType.getDefaultMasterItem().getID().equals(Constants.GSTRegType.get(Constants.GSTRegType_Unregistered)));;
//                }
//            }
            if (isConsignment) {
                paramJobj.put("moduleidcn", Constants.Acc_Consignment_GoodsReceipt_ModuleId);
            }
            HashSet<GoodsReceiptOrderDetails> groDetails = saveGoodsReceiptOrderRows(paramJobj, grOrder, companyid, isAutoCreateDO, invoiceid, map, jedetails, jeid,createdOn);
            if (inventoryJE != null && jedetails != null && extraCompanyPreferences != null && extraCompanyPreferences.isActivateMRPModule()) {
                inventoryJE.setDetails(jedetails);
                accJournalEntryobj.saveJournalEntryDetailsSet(jedetails);
            }
            if (!isAutoCreateDO) { // If GR is auto generated from Invoice form.
                String linkMode = ""; // When adding Purchase order link for Goods Receipt Order update link flag(2) in purchase order.
                if (paramJobj.has("fromLinkCombo") && paramJobj.optString("fromLinkCombo",null) != null) {
                    linkMode = (String) paramJobj.get("fromLinkCombo");
                }
                String linkNumberStr = "";
                if (paramJobj.has("linkNumber") && paramJobj.optString("linkNumber",null) != null) {
                    linkNumberStr = (String) paramJobj.get("linkNumber");
                }
                String[] linkNumbers = linkNumberStr.split(",");
                if (!StringUtil.isNullOrEmpty(linkMode) && linkNumbers.length > 0) {
                    if (linkMode.equalsIgnoreCase("Purchase Order") || linkMode.equalsIgnoreCase("Consignment Request") || linkMode.equalsIgnoreCase("Job Work Out Order")) {
                        for (int i = 0; i < linkNumbers.length; i++) {
                            if (!StringUtil.isNullOrEmpty(linkNumbers[i])) {
                                updatePOisOpenAndLinkingWithGR(linkNumbers[i], grOrder.getID());

                                /*
                                 * Saving linking information of Goods Receipt
                                 * while linking with Purchase Order
                                 */
                                HashMap<String, Object> requestParamsLinking = new HashMap<>();
                                requestParamsLinking.put("linkeddocid", grOrder.getID());
                                requestParamsLinking.put("docid", linkNumbers[i]);
                                requestParamsLinking.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
                                requestParamsLinking.put("linkeddocno", invoiceno);
                                requestParamsLinking.put("sourceflag", 0);
                                KwlReturnObject result = accPurchaseOrderobj.savePOLinking(requestParamsLinking);

                                requestParamsLinking.put("linkeddocid", linkNumbers[i]);
                                requestParamsLinking.put("docid", grOrder.getID());
                                requestParamsLinking.put("moduleid", Constants.Acc_Purchase_Order_ModuleId);
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), linkNumbers[i]);
                                PurchaseOrder purchaseorder = (PurchaseOrder) rdresult.getEntityList().get(0);
                                String purchaseorderno = purchaseorder.getPurchaseOrderNumber();;
                                requestParamsLinking.put("linkeddocno", purchaseorderno);
                                requestParamsLinking.put("sourceflag", 1);
                                result = accGoodsReceiptobj.saveGRLinking(requestParamsLinking);
                                linkedDocuments += purchaseorderno + " ,";
                            }
                        }
                        linkedDocuments = linkedDocuments.substring(0, linkedDocuments.length() - 1);
                    } else if (linkMode.equalsIgnoreCase("Purchase Invoice")) {
                        if (groDetails != null && !groDetails.isEmpty()) { // update balance quantity to po when creating gr link to pi and pi link to po
                            for (GoodsReceiptOrderDetails cnt : groDetails) {
                                if (cnt.getVidetails() != null && cnt.getVidetails().getPurchaseorderdetail() != null) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrderDetail.class.getName(), cnt.getVidetails().getPurchaseorderdetail().getID());
                                    PurchaseOrderDetail purchaseorderdetails = (PurchaseOrderDetail) rdresult.getEntityList().get(0);
                                    HashMap poMap = new HashMap();
                                    poMap.put("podetails", purchaseorderdetails.getID());
                                    poMap.put("companyid", purchaseorderdetails.getCompany().getCompanyID());
                                    poMap.put("balanceqty", cnt.getDeliveredQuantity());
                                    poMap.put("add", false);
                                    accCommonTablesDAO.updatePurchaseOrderStatus(poMap);
                                }
                            }
                        }
                        for (int i = 0; i < linkNumbers.length; i++) {
                            if (!StringUtil.isNullOrEmpty(linkNumbers[i])) {
                                updatePIisOpenAndLinkingWithGR(linkNumbers[i]);

                                /*
                                 * Saving linking information of Goods Receipt
                                 * while linking with Purchase Invoice
                                 */
                                HashMap<String, Object> requestParamsLinking = new HashMap<>();
                                requestParamsLinking.put("linkeddocid", grOrder.getID());
                                requestParamsLinking.put("docid", linkNumbers[i]);
                                requestParamsLinking.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
                                requestParamsLinking.put("linkeddocno", invoiceno);
                                requestParamsLinking.put("sourceflag", 0);
                                KwlReturnObject result = accGoodsReceiptobj.saveVILinking(requestParamsLinking);

                                requestParamsLinking.put("linkeddocid", linkNumbers[i]);
                                requestParamsLinking.put("docid", grOrder.getID());
                                requestParamsLinking.put("moduleid", Constants.Acc_Vendor_Invoice_ModuleId);
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), linkNumbers[i]);
                                GoodsReceipt goodsreceipt = (GoodsReceipt) rdresult.getEntityList().get(0);
                                String goodsreceiptno = goodsreceipt.getGoodsReceiptNumber();
                                requestParamsLinking.put("linkeddocno", goodsreceiptno);
                                requestParamsLinking.put("sourceflag", 1);
                                result = accGoodsReceiptobj.saveGRLinking(requestParamsLinking);
                                linkedDocuments += goodsreceiptno + " ,";

                            }
                        }
                        linkedDocuments = linkedDocuments.substring(0, linkedDocuments.length() - 1);
                    } else if(linkMode.equalsIgnoreCase("Security Gate Entry")){// added for Security Gate ERM-1099
                        if (groDetails != null && !groDetails.isEmpty()) { // update balance quantity to po when creating gr link to EG and EG link to PO
                            HashMap prodMap = new HashMap();
                            for (GoodsReceiptOrderDetails cnt : groDetails) {
                                if (cnt.getSecuritydetails() != null && cnt.getSecuritydetails().getPodetail() != null) {
                                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrderDetail.class.getName(), cnt.getSecuritydetails().getPodetail().getID());
                                    PurchaseOrderDetail purchaseorderdetails = (PurchaseOrderDetail) rdresult.getEntityList().get(0);
                                    HashMap poMap = new HashMap();
                                    HashMap hMap = new HashMap();
                                    
                                    double quantity=0.0;
                                    poMap.put("podetails", purchaseorderdetails.getID());
                                    poMap.put("companyid", purchaseorderdetails.getCompany().getCompanyID());
                                    poMap.put("balanceqty", cnt.getDeliveredQuantity());
                                    accCommonTablesDAO.updatePurchaseOrderStatus(poMap);
                                    /*Need to update isOpen flag if GR is created*/
                                    String prID=purchaseorderdetails.getProduct().getID();
                                    if (prodMap.containsKey(prID)) {
                                        quantity = (double) prodMap.get(prID) + cnt.getDeliveredQuantity();
                                        prodMap.put(prID, quantity);
                                    } else {
                                        quantity = cnt.getDeliveredQuantity();
                                    }
                                    if (purchaseorderdetails.getPurchaseOrder() != null) {
                                        if (purchaseorderdetails.getPurchaseOrder() != null && !StringUtil.isNullOrEmpty(purchaseorderdetails.getPurchaseOrder().getID())) {
                                            if ((purchaseorderdetails.getBalanceqty() - quantity ) == purchaseorderdetails.getQuantity()) {
                                                hMap.put("value", "0");
                                            } else {
                                                hMap.put("value", "3");
                                            }
                                            if ((purchaseorderdetails.getBalanceqty() - quantity ) > 0) {//1.Balance qty 2.Qty used in GR(s) 3. Current GR qty
                                                hMap.put("isOpen", true);
                                            } else {
                                                hMap.put("isOpen", false);
                                            }
                                            hMap.put("purchaseOrder", purchaseorderdetails.getPurchaseOrder());
                                            accPurchaseOrderobj.updatePOLinkflag(hMap);
                                        }
                                    }
                                    
                                    prodMap.put(prID,cnt.getDeliveredQuantity());
                                }
                            }
                        }
                        for (int i = 0; i < linkNumbers.length; i++) {
                            if (!StringUtil.isNullOrEmpty(linkNumbers[i])) {
                                updateSecurityisOpenAndLinkingWithGR(linkNumbers[i], grOrder.getID());
                            }
                        }
               }
                }
            } else if (isAutoCreateDO) {
                if (!StringUtil.isNullOrEmpty(invoiceid)) {
                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), invoiceid);
                    GoodsReceipt invoice = (GoodsReceipt) rdresult.getEntityList().get(0);
                    HashMap hMap = new HashMap();
                    hMap.put("goodsReceipt", invoice);
                    boolean isOpenInGR = false;
                    hMap.put("isOpenInGR", isOpenInGR);
                    accGoodsReceiptobj.updatePILinkflag(hMap);
                    if (groDetails != null && !groDetails.isEmpty()) { // update balance quantity to po when creating gr link to pi and pi link to po
                        for (GoodsReceiptOrderDetails cnt : groDetails) {
                            if (cnt.getVidetails() != null && cnt.getVidetails().getPurchaseorderdetail() != null) {
                                KwlReturnObject invdresult = accountingHandlerDAOobj.getObject(PurchaseOrderDetail.class.getName(), cnt.getVidetails().getPurchaseorderdetail().getID());
                                PurchaseOrderDetail purchaseorderdetails = (PurchaseOrderDetail) invdresult.getEntityList().get(0);
                                HashMap poMap = new HashMap();
                                poMap.put("podetails", purchaseorderdetails.getID());
                                poMap.put("companyid", purchaseorderdetails.getCompany().getCompanyID());
                                poMap.put("balanceqty", cnt.getDeliveredQuantity());
                                poMap.put("add", false);
                                accCommonTablesDAO.updatePurchaseOrderStatus(poMap);
                            }
                        }
                    }
                    /*
                     * Saving linking information of Goods Receipt while auto
                     * creating from Purchase Invoice
                     */
                    HashMap<String, Object> requestParamsLinking = new HashMap<>();
                    requestParamsLinking.put("linkeddocid", grOrder.getID());
                    requestParamsLinking.put("docid", invoiceid);
                    requestParamsLinking.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
                    requestParamsLinking.put("linkeddocno", entryNumber);
                    requestParamsLinking.put("sourceflag", 0);
                    KwlReturnObject result = accGoodsReceiptobj.saveVILinking(requestParamsLinking);

                    requestParamsLinking.put("linkeddocid", invoiceid);
                    requestParamsLinking.put("docid", grOrder.getID());
                    requestParamsLinking.put("moduleid", Constants.Acc_Vendor_Invoice_ModuleId);
                    requestParamsLinking.put("linkeddocno", invoiceno);
                    requestParamsLinking.put("sourceflag", 1);
                    result = accGoodsReceiptobj.saveGRLinking(requestParamsLinking);

                }
            }

            double totalAmount = 0;
            double subtotal = 0;
            double quantity = 0;
            double discountAmount = 0;
            double discountAmountInBase = 0;
            double taxAmount = 0;
            JSONArray productDiscountJArr = new JSONArray();
            HashMap<String, Object> GlobalParams = AccountingManager.getGlobalParamsJson(paramJobj);
            if (groDetails != null && !groDetails.isEmpty()) {
                for (GoodsReceiptOrderDetails cnt : groDetails) {
                    double rate = 0;
                    if (gstIncluded) {
                        rate = cnt.getRateincludegst();
                    } else {
                        rate = cnt.getRate();
                        taxAmount += authHandler.round(cnt.getRowTaxAmount(), companyid);
                    }
                    /*
                     * Code for Add termamount into totalamount for India,US country only (i.e. countries on which GST-Terms applies) ERP-41783               
                     */
                    if (extraCompanyPreferences.getLineLevelTermFlag() == 1 && !rcmApplicable) {
                        taxAmount += authHandler.round(cnt.getRowTermAmount(), companyid);
                    }
                    String productId = cnt.getInventory().getProduct().getID();
                    quantity = cnt.getInventory().getQuantity();
                    totalAmount += authHandler.round(rate * quantity, companyid);
                    subtotal = authHandler.round(rate * quantity, companyid);
//                    taxAmount += authHandler.round(cnt.getRowTaxAmount(), Constants.AMOUNT_DIGIT_AFTER_DECIMAL);
                    double rowDiscVal = 0;
                    if (cnt.getDiscountispercent() == 1) {
                        rowDiscVal = authHandler.round((subtotal * cnt.getDiscount() / 100), companyid);
                        discountAmount += rowDiscVal;
                    } else {
                        rowDiscVal = authHandler.round(cnt.getDiscount(), companyid);
                        discountAmount += rowDiscVal;
                    }
                    // Mapping Product and Discount
                    KwlReturnObject dAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(GlobalParams, rowDiscVal, currencyid, df.parse(paramJobj.optString("billdate")), grOrder.getExternalCurrencyRate());
                    double discAmountinBase = (Double) dAmount.getEntityList().get(0);
                    discAmountinBase = authHandler.round(discAmountinBase, companyid);
                    JSONObject productDiscountObj = new JSONObject();
                    productDiscountObj.put("productId", productId);
                    productDiscountObj.put("discountAmount", discAmountinBase);
                    productDiscountJArr.put(productDiscountObj);
                }
            }           
            double totalAmountInDocumentCurrecy = totalAmount - discountAmount;
            double taxPercent = 0;
            if (grOrder.getTax() != null) {
                KwlReturnObject taxresult = accTaxObj.getTaxPercent(companyid, grOrder.getOrderDate(), grOrder.getTax().getID());
                taxPercent = (Double) taxresult.getEntityList().get(0);
                double ordertaxamount = (taxPercent == 0 ? 0 : authHandler.round((totalAmountInDocumentCurrecy * taxPercent / 100), companyid));
                taxAmount += ordertaxamount;
            }
            totalAmountInDocumentCurrecy = totalAmountInDocumentCurrecy + taxAmount;
            
            //Rounding Adjustment will always calculated after calculation of totalInvAmount
            double roundingadjustmentAmount = 0.0, roundingadjustmentAmountinbase = 0.0;
            String roundingAdjustmentAccountID = "";
            String columnPref = extraCompanyPreferences.getColumnPref();
            if (!StringUtil.isNullOrEmpty(columnPref)) {
                JSONObject prefObj = new JSONObject(columnPref);
                roundingAdjustmentAccountID = prefObj.optString(Constants.RoundingAdjustmentAccountID, "");
            }

            if (isRoundingAdjustmentApplied && !StringUtil.isNullOrEmpty(roundingAdjustmentAccountID)) {
                double totalInvAmountAfterRound = Math.round(totalAmountInDocumentCurrecy);
                roundingadjustmentAmount = authHandler.round(totalInvAmountAfterRound - totalAmountInDocumentCurrecy, companyid);
                if (roundingadjustmentAmount != 0) {
                    totalAmountInDocumentCurrecy = totalInvAmountAfterRound;//Now rounded value becomes total quotation amount
                    doDataMap.put(Constants.roundingadjustmentamount, roundingadjustmentAmount);
                    doDataMap.put(Constants.roundingadjustmentamountinbase, roundingadjustmentAmount);
                    grOrder.setRoundingadjustmentamountinbase(roundingadjustmentAmount);
                    grOrder.setRoundingadjustmentamount(roundingadjustmentAmount);

                    String globalcurrency = paramJobj.getString(Constants.globalCurrencyKey);
                    if (!globalcurrency.equalsIgnoreCase(currencyid)) {
                        HashMap<String, Object> roundingRequestParams = new HashMap<String, Object>();
                        roundingRequestParams.put("companyid", companyid);
                        roundingRequestParams.put("gcurrencyid", (paramJobj.optString(Constants.globalCurrencyKey, null) == null ? paramJobj.optString(Constants.globalCurrencyKey) : paramJobj.optString(Constants.globalCurrencyKey)));
                        KwlReturnObject baseAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(roundingRequestParams, roundingadjustmentAmount, currencyid, df.parse(paramJobj.optString("billdate")), externalCurrencyRate);
                        roundingadjustmentAmountinbase = authHandler.round((Double) baseAmt.getEntityList().get(0), companyid);
                        doDataMap.put(Constants.roundingadjustmentamountinbase, roundingadjustmentAmountinbase);
                        grOrder.setRoundingadjustmentamountinbase(roundingadjustmentAmountinbase);
                        grOrder.setRoundingadjustmentamount(roundingadjustmentAmount);
                    }
                }
            }
            
            double totalAmountInBaseCurrecy = 0;
            if (grOrder.getCurrency() != null) {
                HashMap<String, Object> filterRequestParams = new HashMap<>();
                filterRequestParams.put("companyid", companyid);
                if (paramJobj.has(Constants.globalCurrencyKey) && paramJobj.optString(Constants.globalCurrencyKey,null) != null) {
                    filterRequestParams.put(Constants.globalCurrencyKey, paramJobj.optString(Constants.globalCurrencyKey));
                }

                KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(filterRequestParams, totalAmountInDocumentCurrecy, grOrder.getCurrency().getCurrencyID(), grOrder.getOrderDate(), grOrder.getExternalCurrencyRate());
                totalAmountInBaseCurrecy = authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                KwlReturnObject bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(filterRequestParams, discountAmount, grOrder.getCurrency().getCurrencyID(), grOrder.getOrderDate(), grOrder.getExternalCurrencyRate());
                discountAmountInBase = authHandler.round((Double) bAmt1.getEntityList().get(0), companyid);
            }
            totalAmountInDocumentCurrecy = authHandler.round(totalAmountInDocumentCurrecy, companyid);
            grOrder.setRows(groDetails);
            grOrder.setDiscountinbase(discountAmountInBase);
            grOrder.setTotalamount(totalAmountInDocumentCurrecy);
            grOrder.setTotalamountinbase(totalAmountInBaseCurrecy);
            accGoodsReceiptobj.updateGoodsReceiptOrder(grOrder);

            int level = (isEdit && !isCopy) ? 0 : grOrder.getApprovestatuslevel();
            String currentUser = "";
            if (paramJobj.has("userid") && paramJobj.optString("userid",null) != null) {
                currentUser = paramJobj.optString("userid");
            }

            HashMap<String, Object> grApproveMap = new HashMap<>();
            grApproveMap.put("companyid", companyid);
            grApproveMap.put("level", level);
            grApproveMap.put("totalAmount", String.valueOf(totalAmountInBaseCurrecy));
            grApproveMap.put("currentUser", currentUser);
            grApproveMap.put("fromCreate", true);
            grApproveMap.put("productDiscountMapList", productDiscountJArr);
            grApproveMap.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
            List approvedlevel = null;
            Iterator groDetailsItr = groDetails.iterator();
                        
            
             /*----Declaring variable for EditedPending document-------*/
           
            JSONObject columnprefObj = new JSONObject();
            boolean sendPendingDocumentsToNextLevel = false;
            boolean ismailApplicable = false;
          
            List approvalHistoryList = null;
            String roleName = "";
            boolean isAuthorityToApprove = true;

            if (!StringUtil.isNullOrEmpty(extraCompanyPreferences.getColumnPref())) {
                columnprefObj = new JSONObject((String) extraCompanyPreferences.getColumnPref());
            }
            if (columnprefObj.has("sendPendingDocumentsToNextLevel") && columnprefObj.get("sendPendingDocumentsToNextLevel") != null && (Boolean) columnprefObj.get("sendPendingDocumentsToNextLevel") != false) {
                sendPendingDocumentsToNextLevel = true;
            }

            /*------If pending document is Edited & Check is activated from system preferences
             *---Then Edit will work same as while approving document
             */
            if (isEditedPendingDocument) {
                level = grOrder.getApprovestatuslevel();
                grApproveMap.put("fromCreate", false);
                grApproveMap.put("documentLevel", level);
                if (sendPendingDocumentsToNextLevel) {

                    ismailApplicable = true;
                    grApproveMap.put("level", level);

                } else {
                    grApproveMap.put("isEditedPendingDocumentWithCheckOff", true);
                }
            }
            grApproveMap.put(Constants.PAGE_URL, paramJobj.optString(Constants.PAGE_URL));
            int approvedlevelInt =0;
            
            /* ---Approval Code ---- */
            if (!isAutoCreateDO && !isFixedAsset && !isConsignment && !grOrder.isIsAutoGeneratedGRO()) { // in case of fixed asset GR will not go for approval
                approvedlevel = approveGRO(grOrder, grApproveMap, ismailApplicable); // false : Not to send pending approval status mail
                approvedlevelInt = (Integer) approvedlevel.get(0);
                mailParams = (List) approvedlevel.get(1);
                grOrder.setApprovestatuslevel(approvedlevelInt);

                int pendingApprovalFlag = (grOrder.getApprovestatuslevel() != 11) ? 1 : 0;
                if (pendingApprovalFlag == 1) {
                    stockMovementService.removeStockMovementByReferenceId(grOrder.getCompany(), grOrder.getID());
                    while (groDetailsItr.hasNext()) {
                        GoodsReceiptOrderDetails groDetail = (GoodsReceiptOrderDetails) groDetailsItr.next();
                        Inventory inventory = groDetail.getInventory();
                        if (inventory.isInvrecord()) {
                            inventory.setActquantity(inventory.getBaseuomquantity());
                            inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() - inventory.getBaseuomquantity());
                            inventory.setBaseuomquantity(0.0);
                        }
                    }
                    Boolean restrictDuplicateBatch=false;
                    if(columnprefObj!=null && columnprefObj.has("restrictDuplicateBatch")){
                        restrictDuplicateBatch = columnprefObj.getBoolean("restrictDuplicateBatch");
                    }
                    //ERP-37751 setting Newproduct batch and newbatchserial qty to 0 till approval of GRN is complete    
                    updateInvTablesAfterPendingApproval(grOrder, true, restrictDuplicateBatch);
                }
                if (inventoryJE != null && extraCompanyPreferences.isActivateMRPModule()) {
                    inventoryJE.setPendingapproval(pendingApprovalFlag);
                }
            }
            
           
          
            if (isEditedPendingDocument) {

                /*---Update Inventory & Stock------*/
                if (approvedlevelInt == 11) {
                    Set<GoodsReceiptOrderDetails> groDetails1 = grOrder.getRows();
                    List<StockMovement> stockMovementsList = new ArrayList<>();
                    for (GoodsReceiptOrderDetails groDetail : groDetails1) {
                        Product product = groDetail.getProduct();
                        if (product != null && extraCompanyPreferences.isActivateInventoryTab() && (product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct() && product.isIsSerialForProduct())) {
                            newStockMovementGROrder(groDetail, stockMovementsList);
                        }
                        Inventory inventory = groDetail.getInventory();
                        if (inventory.isInvrecord()) {
                            inventory.setBaseuomquantity(inventory.getActquantity());
                            inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() + inventory.getBaseuomquantity());
                            inventory.setActquantity(0.0);
                        }
                    }

                    if (extraCompanyPreferences != null && extraCompanyPreferences.isActivateInventoryTab() && !stockMovementsList.isEmpty()) {
                        stockMovementService.addOrUpdateBulkStockMovement(grOrder.getCompany(), grOrder.getID(), stockMovementsList);
                    }
                }

                KwlReturnObject returnObject = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                Company company = (Company) returnObject.getEntityList().get(0);

                if (sendPendingDocumentsToNextLevel) {

                    /*----Send mail if allowed from system preferences------- */
                    if (approvedlevelInt != Constants.NoAuthorityToApprove && preferences.isSendapprovalmail()) { // If allow to send approval mail in company account preferences

                        HashMap emailMap = new HashMap();
                        String userName = paramJobj.optString(Constants.username, null);
                        emailMap.put("userName", userName);

                        emailMap.put("company", company);
                        emailMap.put("goodsReceipt", grOrder);
                        emailMap.put("baseUrl", paramJobj.optString("baseUrl", null));
                        emailMap.put("preferences", preferences);
                        emailMap.put("level", level);

                        sendApprovalMailForGRIfAllowedFromSystemPreferences(emailMap);

                    }

                    /*--------Save Approval history Code--------  */
                    if (approvedlevelInt != Constants.NoAuthorityToApprove) {

                        HashMap approvalHistoryMap = new HashMap();
                        userid = paramJobj.optString(Constants.userid, null);
                        approvalHistoryMap.put("userid", userid);

                        approvalHistoryMap.put("company", company);
                        approvalHistoryMap.put("goodsReceipt", grOrder);

                        approvalHistoryList = saveApprovalHistoryForGoodsReceiptOrder(approvalHistoryMap);
                        roleName = approvalHistoryList != null ? approvalHistoryList.get(0).toString() : "";

                    } else if (approvedlevelInt == Constants.NoAuthorityToApprove) {
                        /*----If User have no authority to approve------*/
                        isAuthorityToApprove = false;
                    }
                } else if (approvedlevelInt == Constants.NoAuthorityToApprove) {//If User is not authorised to approve
                    isAuthorityToApprove = false;                   
                }

            }          
            

            if (preferences.isInventoryAccountingIntegration() && preferences.isWithInvUpdate()) {

                String action = "17";
                boolean isDirectUpdateInvFlag = false;
                if (preferences.isUpdateInvLevel()) {
                    isDirectUpdateInvFlag = true;
                    action = "19"; // Direct Inventory Update action
                }

                JSONArray productArray = new JSONArray();
                if (!StringUtil.isNullOrEmpty(paramJobj.optString(DETAIL, null))) {
                    JSONArray jArr = new JSONArray(paramJobj.optString(DETAIL));
                    for (int i = 0; i < jArr.length(); i++) {
                        JSONObject jobj = jArr.getJSONObject(i);
                        KwlReturnObject proresult = accountingHandlerDAOobj.getObject(Product.class.getName(), jobj.getString("productid"));
                        Product product = (Product) proresult.getEntityList().get(0);

                        JSONObject productObject = new JSONObject();

                        double productRate = 0;
                        if (isAutoCreateDO) {
                            productRate = jobj.getDouble("rate");
                        }
                        if (!jobj.isNull("rowid") && !StringUtil.isNullOrEmpty(jobj.getString("rowid")) && !jobj.getString("rowid").equalsIgnoreCase("undefined")) {
                            productRate = getProductPrice(paramJobj, jobj.getString("rowid"));
                        }

                        if (!StringUtil.isNullOrEmpty(doid)) {
                            if (jobj.optDouble("changedQuantity", 0) != 0) {
                                if (paramJobj.has("deletedData") && paramJobj.optString("deletedData",null) != null && !StringUtil.isNullOrEmpty(paramJobj.optString("deletedData"))) {
                                    productObject.put("itemUomId", jobj.getString("uomid"));
                                    productObject.put("itemBaseUomRate", jobj.getDouble("baseuomrate"));
                                    productObject.put("quantity", jobj.getDouble("quantity"));
                                    if (isAutoCreateDO) {
                                        productObject.put("itemQuantity", jobj.getInt("quantity") * jobj.getDouble("baseuomrate"));
                                    } else {
                                        productObject.put("itemQuantity", jobj.getInt("dquantity") * jobj.getDouble("baseuomrate"));
                                    }
                                    productObject.put("itemCode", product.getProductid());
                                    if (isDirectUpdateInvFlag) {
                                        productObject.put("storeid", jobj.optString("invstore"));
                                        productObject.put("locationid", jobj.optString("invlocation"));
                                        productObject.put("rate", productRate);
                                    }
                                    productArray.put(productObject);
                                } else {
                                    productObject.put("itemUomId", jobj.getString("uomid"));
                                    productObject.put("itemBaseUomRate", jobj.getDouble("baseuomrate"));
                                    productObject.put("itemQuantity", jobj.getDouble("changedQuantity"));
                                    productObject.put("quantity", jobj.getDouble("changedQuantity"));
                                    productObject.put("itemCode", product.getProductid());
                                    if (isDirectUpdateInvFlag) {
                                        productObject.put("storeid", jobj.optString("invstore"));
                                        productObject.put("locationid", jobj.optString("invlocation"));
                                        productObject.put("rate", productRate);
                                    }
                                    productArray.put(productObject);
                                }
                            }
                        } else {
                            productObject.put("itemUomId", jobj.getString("uomid"));
                            productObject.put("itemBaseUomRate", jobj.getDouble("baseuomrate"));
                            productObject.put("quantity", jobj.getDouble("quantity"));
                            if (isAutoCreateDO) {
                                productObject.put("itemQuantity", jobj.getInt("quantity") * jobj.getDouble("baseuomrate"));
                            } else {
                                productObject.put("itemQuantity", jobj.getInt("dquantity") * jobj.getDouble("baseuomrate"));
                            }
                            productObject.put("itemCode", product.getProductid());
                            if (isDirectUpdateInvFlag) {
                                productObject.put("storeid", jobj.optString("invstore"));
                                productObject.put("locationid", jobj.optString("invlocation"));
                                productObject.put("rate", productRate);
                            }
                            productArray.put(productObject);
                        }
                    }

                    if (!StringUtil.isNullOrEmpty(doid)) {
                        if (paramJobj.has("deletedData") && paramJobj.get("deletedData") != null && !StringUtil.isNullOrEmpty((String) paramJobj.get("deletedData"))) {
                            JSONArray deleteArr = new JSONArray((String) paramJobj.get("deletedData"));
                            for (int i = 0; i < deleteArr.length(); i++) {
                                JSONObject jobj = deleteArr.getJSONObject(i);

                                KwlReturnObject proresult = accountingHandlerDAOobj.getObject(Product.class.getName(), jobj.getString("productid"));
                                Product product = (Product) proresult.getEntityList().get(0);

                                double productRate = 0;
                                if (!jobj.isNull("rowid") && !StringUtil.isNullOrEmpty(jobj.getString("rowid")) && !jobj.getString("rowid").equalsIgnoreCase("undefined")) {
                                    productRate = getProductPrice(paramJobj, jobj.getString("rowid"));
                                }

                                JSONObject productObject = new JSONObject();
                                productObject.put("itemUomId", jobj.getString("productuomid"));
                                productObject.put("itemBaseUomRate", jobj.getDouble("productbaseuomrate"));
                                productObject.put("itemQuantity", jobj.getDouble("productbaseuomquantity") * (-1));
                                productObject.put("quantity", jobj.getDouble("productquantity") * (-1));
                                productObject.put("itemCode", product.getProductid());
                                if (isDirectUpdateInvFlag) {
                                    productObject.put("storeid", jobj.optString("invstore"));
                                    productObject.put("locationid", jobj.optString("invlocation"));
                                    productObject.put("rate", productRate);
                                }
                                productArray.put(productObject);
                            }
                        }
                    }

                    if (productArray.length() > 0) {
                        String sendDateFormat = "yyyy-MM-dd";
                        DateFormat dateformat = new SimpleDateFormat(sendDateFormat);

                        JSONObject jSONObject = new JSONObject();
                        if (paramJobj.has(BILLDATE) && paramJobj.optString(BILLDATE,null) != null) {
                            Date date = df.parse((String) paramJobj.get(BILLDATE));
                            String stringDate = dateformat.format(date);
                            jSONObject.put("deliveryDate", stringDate);
                        }

                        jSONObject.put("dateFormat", sendDateFormat);
                        jSONObject.put("details", productArray);
                        jSONObject.put("orderNumber", entryNumber);
                        jSONObject.put("purchasing", true);

                        if (paramJobj.has("servletContext") && paramJobj.optString("servletContext",null) != null) {
                            ServletContext servletContext = (ServletContext) paramJobj.get("servletContext");
                            String url = servletContext.getInitParameter("inventoryURL");
                            CommonFnController cfc = new CommonFnController();
                            JSONObject jobj = new JSONObject();
                            cfc.updateInventoryLevel(paramJobj, jSONObject, url, action, jobj);
                        } else if (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.inventoryURL, null))) {
                            /**
                             * this check is to handle call from REST service
                             * In call from REST service, inventoryURL is passed in paramJobj
                             */
                            String url = paramJobj.optString(Constants.inventoryURL);
                            CommonFnController cfc = new CommonFnController();
                            JSONObject jobj = new JSONObject();
                            cfc.updateInventoryLevel(paramJobj, jSONObject, url, action, jobj);
                        }
                    }
                }
            }
            if (isEdit == true) { // For Audit Trial-ERP-14034
                // ERP-14034 
//                DateFormat sdf = authHandler.getUserDateFormatterJson(paramJobj);
//                if (paramJobj.has("userDateFormatter") && paramJobj.optString("userDateFormatter",null) != null) {
//                    sdf = (DateFormat) paramJobj.get("userDateFormatter");
//                }
                if (grOrder.getShipdate() != null) {
                    doDataMap.put("AuditShipDate", df.format(grOrder.getShipdate())); // New Ship Date
                } else {
                    doDataMap.put("AuditShipDate", "");
                }
                if (grOrder.getOrderDate() != null) {
                    doDataMap.put("AuditOrderDate", df.format(grOrder.getOrderDate())); // New Order Date
                } else {
                    doDataMap.put("AuditOrderDate", "");
                }
                if (grOrder.getMasterAgent() != null) {
                    KwlReturnObject newmasteragent = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), grOrder.getMasterAgent().getID());
                    MasterItem newsalesperson = (MasterItem) newmasteragent.getEntityList().get(0);
                    doDataMap.put("auditAgent", newsalesperson != null ? newsalesperson.getValue() : "");
                } else {
                    doDataMap.put("auditAgent", "");
                }
                if (grOrder.getStatus() != null) {
                    KwlReturnObject newmasterstatus = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), grOrder.getStatus().getID());
                    MasterItem newstatus = (MasterItem) newmasterstatus.getEntityList().get(0);
                    doDataMap.put("auditStatus", newstatus != null ? newstatus.getValue() : "");
                } else {
                    doDataMap.put("auditStatus", "");
                }
            }

            String customfield = "";
            if (paramJobj.has("customfield") && paramJobj.optString("customfield",null) != null) {
                customfield = paramJobj.optString("customfield");
            }
            if (!StringUtil.isNullOrEmpty(customfield)) {
                JSONArray jcustomarray = new JSONArray(customfield);
                /**
                 * 'isdefaultHeaderMap' flag indicates the call coming from REST service
                 */
                if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)) {
                    jcustomarray = fieldDataManagercntrl.GetJsonArrayUsingFieldIds(jcustomarray, Constants.Acc_Goods_Receipt_ModuleId, companyid, true);
                }
                if (isAutoCreateDO) {
                    jcustomarray = fieldDataManagercntrl.getComboValueIdsForCurrentModule(jcustomarray, Constants.Acc_Goods_Receipt_ModuleId, companyid, 0); // 1 = for line item
                }
                HashMap<String, Object> customrequestParams = new HashMap<>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_GoodsReceipt_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_GoodsReceiptId);
                customrequestParams.put("modulerecid", grOrder.getID());
                customrequestParams.put("moduleid", isFixedAsset ? Constants.Acc_FixedAssets_GoodsReceipt_ModuleId : isConsignment ? Constants.Acc_Consignment_GoodsReceiptOrder_ModuleId : Constants.Acc_Goods_Receipt_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_GoodsReceipt_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    doDataMap.put("accgoodsreceiptcustomdataref", grOrder.getID());
                    KwlReturnObject accresult = accGoodsReceiptobj.updateGoodsReceiptCustomData(doDataMap);
                }
            }
            if (isEdit == true) {
                int moduleid = Constants.Acc_Goods_Receipt_ModuleId;
                auditMessage = AccountingManager.BuildAuditTrialMessage(doDataMap, oldgro, moduleid, newAuditKey);
            }
            li.add(grOrder);
            li.add(auditMessage);
            li.add(mailParams);
            li.add(linkedDocuments);
            li.add(unlinkMessage);
            li.add(roleName);
            li.add(isAuthorityToApprove);
            li.add(sendPendingDocumentsToNextLevel);
            li.add(level);

            // Send Mail when Goods Receipt  Order is generated or modified.
            String moduleName = Constants.Goods_Receipt;
            if (isFixedAsset) {
                moduleName = Constants.Fixed_Asset_Goods_Receipt;
            }
            if (isConsignment) {
                moduleName = Constants.moduleID_NameMap.get(Constants.Acc_Consignment_GoodsReceiptOrder_ModuleId);
            }

            if (StringUtil.isAsciiString(goodsReceiptTerms)) {
                boolean isGR = true;
                mapInvoiceTerms(goodsReceiptTerms, grOrder.getID(), userid, isGR);
            }

            DocumentEmailSettings documentEmailSettings = null;
            KwlReturnObject documentEmailresult = accountingHandlerDAOobj.getObject(DocumentEmailSettings.class.getName(), companyid);
            documentEmailSettings = documentEmailresult != null ? (DocumentEmailSettings) documentEmailresult.getEntityList().get(0) : null;
            if (documentEmailSettings != null) {
                boolean sendmail = false;
                boolean isEditMail = false;
                if (StringUtil.isNullOrEmpty(doid)) {
                    if (isFixedAsset && documentEmailSettings.isAssetGoodsReceiptGenerationMail()) {
                        sendmail = true;
                    } else if (isConsignment && documentEmailSettings.isConsignmentPDOGenerationMail()) {
                        sendmail = true;
                    } else if (documentEmailSettings.isGoodsReceiptGenerationMail()) {
                        sendmail = true;
                    }
                } else {
                    isEditMail = true;
                    if (isFixedAsset && documentEmailSettings.isAssetGoodsReceiptUpdationMail()) {
                        sendmail = true;
                    } else if (isConsignment && documentEmailSettings.isConsignmentPDOUpdationMail()) {
                        sendmail = true;
                    } else if (documentEmailSettings.isGoodsReceiptUpdationMail()) {
                        sendmail = true;
                    }
                }
                 if (sendmail) {
                    String userMailId = "", userName = "",currentUserid="";
                    String createdByEmail = "";
                    String createdById = "";
                    HashMap<String, Object> requestParams = AccountingManager.getEmailNotificationParamsJson(paramJobj);
                    if (paramJobj.has("emailNotificationParams") && paramJobj.optString("emailNotificationParams",null) != null) {
                        requestParams = (HashMap<String, Object>) paramJobj.get("emailNotificationParams");
                    }
                    if (requestParams.containsKey("userfullName") && requestParams.get("userfullName") != null) {
                        userName = (String) requestParams.get("userfullName");
                    }
                    if (requestParams.containsKey("usermailid") && requestParams.get("usermailid") != null) {
                        userMailId = (String) requestParams.get("usermailid");
                    }
                    if(requestParams.containsKey(Constants.useridKey)&& requestParams.get(Constants.useridKey)!=null){
                        currentUserid=(String)requestParams.get(Constants.useridKey);
                    }
                     List<String> mailIds = new ArrayList();
                     if (!StringUtil.isNullOrEmpty(userMailId)) {
                         mailIds.add(userMailId);
                     }
                     /*
                      if Edit mail option is true then get userid and Email id of document creator.
                      */
                     if (isEditMail) {
                         if (grOrder != null && grOrder.getCreatedby() != null) {
                             createdByEmail = grOrder.getCreatedby().getEmailID();
                             createdById = grOrder.getCreatedby().getUserID();
                         }
                         /*
                          if current user userid == document creator userid then don't add creator email ID in List.
                          */
                         if (!StringUtil.isNullOrEmpty(createdByEmail) && !(currentUserid.equalsIgnoreCase(createdById))) {
                             mailIds.add(createdByEmail);
                         }
                     }
                    String[] temp = new String[mailIds.size()];
                    String[] tomailids = mailIds.toArray(temp);
                    String grNumber = entryNumber;

                    accGoodsReceiptobj.saveOrUpdateObj(grOrder);

                    if ((documentEmailSettings.isGoodsReceiptUpdationMail() || documentEmailSettings.isGoodsReceiptGenerationMail()) && isConsignment) {
                        sendMailOnGRNCreationUpdation(companyid, grOrder, isEdit, tomailids, grNumber);
                    } else {
                        accountingHandlerDAOobj.sendSaveTransactionEmails(grNumber, moduleName, tomailids, userName, isEditMail, companyid);
                    }
                }
            }
        } catch (AccountingException | InventoryException ex) {
            throw new AccountingException(ex.getMessage());
        } catch (SeqFormatException ex) {
            try {
               /*
                    Throws a SeqFormatException  if sequence format for the 'Stock Adjustment is not set' refer:ERP-33771
                */
                throw new SeqFormatException( messageSource.getMessage("acc.jobworkoutwarning.SeqFormatNotFound", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
            } catch (JSONException ex1) {
                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex1);
            }
        } catch (Exception ex) {
            if (!StringUtil.isNullOrEmpty(ex.getMessage())) {
                throw ServiceException.FAILURE("saveGoodsReceiptOrder : " + ex.getMessage(), ex);
            } else if (ex.getCause() != null && !StringUtil.isNullOrEmpty(ex.getCause().getMessage())) {
                throw new AccountingException(ex.getCause().getMessage());
            }
        }
        return li;
    }
    
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {ServiceException.class, JSONException.class, AccountingException.class})
    protected JSONObject checkDuplicateNumber(String entryNumber, String companyid, String sequenceformat, JSONObject paramJobj, boolean accexception) {
        JSONObject returnJobj = new JSONObject();
        boolean accExceptionFlag = accexception;
        try {
            if (sequenceformat.equals("NA")) {
                KwlReturnObject resultInv = accCommonTablesDAO.getTransactionInTemp(entryNumber, companyid, Constants.Acc_Goods_Receipt_ModuleId);
                if (resultInv.getRecordTotalCount() > 0) {
                    accExceptionFlag = true;
                    throw new AccountingException(messageSource.getMessage("acc.GR.selectedgoodsrecno", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyinprocess.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                } else {
                    accCommonTablesDAO.insertTransactionInTemp(entryNumber, companyid, Constants.Acc_Goods_Receipt_ModuleId);
                }
            }
        } catch (AccountingException ex) {
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (JSONException ex) {
        } finally {
            try {
                returnJobj.put("isException", accExceptionFlag);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        return returnJobj;
    }
    
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {ServiceException.class, JSONException.class, AccountingException.class})
    protected JSONObject updateGRNEntryNumber(String grid, String sequenceformat, String companyid, GoodsReceiptOrder grOrder, String billno, String billid, String entryNumber, JSONObject paramJobj, int DOSeqNum) throws  AccountingException{
        JSONObject returnJobj = new JSONObject();
        String updatedGRNNumber = billno;
        try {

            if (StringUtil.isNullOrEmpty(grid) && (!StringUtil.isNullOrEmpty(sequenceformat) && !sequenceformat.equals("NA"))) {
                String nextAutoNumber = "";
                boolean seqformat_oldflag = false;//    old flag was used when sequence format not implemented.
                Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                if (seqformat_oldflag) {
                    nextAutoNumber = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_GOODSRECEIPTORDER, sequenceformat);
                    seqNumberMap.put(Constants.AUTO_ENTRYNUMBER, nextAutoNumber);
                } else {
                    seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_GOODSRECEIPTORDER, sequenceformat, seqformat_oldflag, grOrder.getOrderDate());
                    if (DOSeqNum != 0) {
                        seqNumberMap.put(Constants.SEQNUMBER, DOSeqNum);
                    }
                }
                seqNumberMap.put(Constants.DOCUMENTID, billid);
                seqNumberMap.put(Constants.companyKey, companyid);
                seqNumberMap.put(Constants.SEQUENCEFORMATID, sequenceformat);
                updatedGRNNumber = accGoodsReceiptobj.updateGREntryNumberForNewGR(seqNumberMap);
                boolean sendForQAApproval = paramJobj.optBoolean("sendForQAApproval");
                if (sendForQAApproval) {
                    String memo = "IST created for QC against GRN:" + billno;
                    accGoodsReceiptobj.updateMemoForIST(memo, billid, companyid);
                }
                /*
                 * Memo of Stock Adjust ment are set in case of Job Work Out GRN
                 * 
                 */
                if (grOrder.isIsJobWorkOutOrder()) {
                    String stockAdjustmentMemo = "Stock OUT for GRN:" + updatedGRNNumber;
                    accGoodsReceiptobj.updateMemoForJWOSA(stockAdjustmentMemo, billid, companyid);
            }
            }
        }catch (AccountingException ex) {
            try {
                accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Purchase_Order_ModuleId);
                throw ex;
            } catch (ServiceException e) {
                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        catch (Exception ex) {
            try {
                accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Purchase_Order_ModuleId);
            } catch (ServiceException e) {
                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                returnJobj.put("billno", updatedGRNNumber);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        return returnJobj;
    }
    
 //Allocating quantity to Blocked SO Quantity    
  @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {ServiceException.class, JSONException.class, AccountingException.class})
    protected JSONObject allocatingQuantitytoBlockedSOQuantity(GoodsReceiptOrder grOrder, JSONObject paramJobj,String entryNumber,String companyid) throws ServiceException {
        JSONObject returnJobj = new JSONObject();
        try {

            Set<GoodsReceiptOrderDetails> groDetailsObj = grOrder.getRows();
            for (GoodsReceiptOrderDetails row : groDetailsObj) {
                Product product = row.getProduct();
                Inventory inventory = row.getInventory();
                HashMap<Integer, Object[]> grBatchdetalisMap = new HashMap<Integer, Object[]>();
                boolean isLocationForProduct = false;
                boolean isWarehouseForProduct = false;
                boolean isBatchForProduct = false;
                boolean isSerialForProduct = false;
                boolean isRowForProduct = false;
                boolean isRackForProduct = false;
                boolean isBinForProduct = false;
                if (!StringUtil.isNullOrEmpty(row.getProduct().getID())) {
                    isBatchForProduct = product.isIsBatchForProduct();
                    isSerialForProduct = product.isIsSerialForProduct();
                    isLocationForProduct = product.isIslocationforproduct();
                    isWarehouseForProduct = product.isIswarehouseforproduct();
                    isRowForProduct = product.isIsrowforproduct();
                    isRackForProduct = product.isIsrackforproduct();
                    isBinForProduct = product.isIsbinforproduct();

                }
                KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), row.getCompany().getCompanyID());
                CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
                if (preferences.isIsBatchCompulsory() || preferences.isIsSerialCompulsory() || preferences.isIslocationcompulsory() || preferences.isIswarehousecompulsory() || preferences.isIsrowcompulsory() || preferences.isIsrackcompulsory() || preferences.isIsbincompulsory()) {  //check if company level option is on then only we will check productt level
                    if (isBatchForProduct || isSerialForProduct || isSerialForProduct || isLocationForProduct || isWarehouseForProduct || isRowForProduct || isRackForProduct || isBinForProduct) {  //product level batch and serial no on or not
                        //getNewBatchJson(row.getProduct(), request, row.getID(),grBatchdetalisMap);
                        updateBatchDetailsForSO(grBatchdetalisMap, row.getProduct().getID(), inventory, paramJobj, row.getID());
                    }
                }

            }
        } catch (Exception ex) {
            accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Goods_Receipt_ModuleId);
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return returnJobj;
    }   
    
    
    /**
     * Description : This method is used to save Goods Receipt Order
     * @param paramJobj
     * @return 
     */
    @Override
    @Transactional(propagation = Propagation.REQUIRED, rollbackFor = {ServiceException.class, JSONException.class, AccountingException.class,Exception.class})
    public JSONObject saveGoodsReceiptOrder(JSONObject paramJobj) throws AccountingException{

        JSONObject jobj = new JSONObject();
        String msg = "";
        String billno = "";
        String productids="";
        String billid = "";
        String channelName = "", entryNumber = "", companyid = "";
        String additionalsauditmessage = "";
        boolean issuccess = false;
        boolean accexception = false;
        boolean isEdit = false;
        boolean isCopy = false;
        boolean isConsignment = false;
        boolean isFixedAsset = false;
        boolean isTaxDeactivated = false;
        int approvedLevel = 11;
        int DOSeqNum =  0;
        String sequenceformat = "";
        try {
            isEdit = StringUtil.isNullOrEmpty(paramJobj.optString("isEdit", null)) ? false : Boolean.parseBoolean(paramJobj.getString("isEdit"));
            isCopy = StringUtil.isNullOrEmpty(paramJobj.optString("copyInv", null)) ? false : Boolean.parseBoolean(paramJobj.getString("copyInv"));
            isConsignment = StringUtil.isNullOrEmpty(paramJobj.optString("isConsignment",null)) ? false: Boolean.parseBoolean(paramJobj.getString("isConsignment"));
            isFixedAsset = StringUtil.isNullOrEmpty(paramJobj.optString("isFixedAsset",null)) ? false: Boolean.parseBoolean(paramJobj.getString("isFixedAsset"));
            boolean isEditedPendingDocument = StringUtil.isNullOrEmpty(paramJobj.optString("isEditedPendingDocument",null)) ? false : Boolean.parseBoolean(paramJobj.optString("isEditedPendingDocument"));
            /**
             * 'isdefaultHeaderMap' flag indicates the call coming from REST service
             */
            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)) {
                entryNumber = paramJobj.optString("numberDo", null) != null ? paramJobj.getString("numberDo") : paramJobj.optString("goodsReceiptNo");
            } else {
                entryNumber = paramJobj.optString("numberDo",null)!=null ? paramJobj.optString("numberDo") :paramJobj.optString("number");
            }
            DOSeqNum=StringUtil.isNullOrEmpty(paramJobj.optString("DOSeqNum",null)) ? 0:Integer.parseInt(paramJobj.getString("DOSeqNum").toString());
            String grid = paramJobj.optString("doid");
            companyid = paramJobj.optString(Constants.companyKey);
            String fromLinkCombo = paramJobj.optString("fromLinkCombo") != null ? paramJobj.optString("fromLinkCombo") : "";
            sequenceformat=paramJobj.optString("sequenceformatDo",null) != null ? paramJobj.optString("sequenceformatDo") : paramJobj.optString("sequenceformat");
            String GoodsReceiptID = "";
            KwlReturnObject socnt = null;
            if (!StringUtil.isNullOrEmpty(grid)) {//In edit case checks duplicate number
                socnt = accGoodsReceiptobj.getDuplicaeGoodsReceiptOrderNumber(entryNumber, companyid, grid);
                if (sequenceformat.equals("NA") && socnt.getRecordTotalCount() > 0) {
                    accexception = true;
                    throw new AccountingException(messageSource.getMessage("acc.field.GoodsReceiptnumber", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)))+ entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                }
            } else {//In add case checks duplicate number
                socnt = accGoodsReceiptobj.getGoodsReceiptOrderCount(entryNumber, companyid);
                if (sequenceformat.equals("NA") && socnt.getRecordTotalCount() > 0) {
                    accexception = true;
                    throw new AccountingException(messageSource.getMessage("acc.field.GoodsReceiptnumber", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                }
                //Check Deactivate Tax in New Transaction.
                if (!fieldDataManagercntrl.isTaxActivated(paramJobj)) {
                    isTaxDeactivated = true;
                    throw ServiceException.FAILURE(messageSource.getMessage("acc.tax.deactivated.tax.saveAlert", null, Locale.forLanguageTag(paramJobj.optString(Constants.language))), "", false);
                }
            }

            synchronized (this) {//Checks duplicate number for simultaneous transactions
                 JSONObject checkDuplicateJson = checkDuplicateNumber(entryNumber, companyid, sequenceformat, paramJobj, accexception);
                if (checkDuplicateJson.has("isException") && checkDuplicateJson.get("isException") != null) {
                    accexception = checkDuplicateJson.optBoolean("isException");
                }
            }

            Map<String, String> map1 = new HashMap<String, String>();
            List li = saveGoodsReceiptOrder(paramJobj, GoodsReceiptID, map1);
            GoodsReceiptOrder grOrder = (GoodsReceiptOrder) li.get(0);
            /**
             * Get Goods Receipt JE Number as it is required to display in prompt while saving 
             * Goods Receipt document.
             */
            String jeNumber = "";
            if (grOrder.getInventoryJE() != null) {
                jeNumber = ((JournalEntry) grOrder.getInventoryJE()).getEntryNumber();
            }
            billid = grOrder.getID();
            billno = grOrder.getGoodsReceiptOrderNumber();
            String linkedDocuments = (String) li.get(3);
            String unlinkMessage = (String) li.get(4);

            issuccess = true;
            if (li.get(1) != null) {//fields updated
                additionalsauditmessage = li.get(1).toString();
            }
            List mailParams = (List) li.get(2);

            //message construction
            if (isConsignment) {
                msg = messageSource.getMessage("acc.consignment.GR.save", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
            } else {
                msg = messageSource.getMessage("acc.gro.save", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
            }

            String pendingstatus, moduleName = "";
            approvedLevel = grOrder.getApprovestatuslevel();
            if (approvedLevel == 11) {
                pendingstatus = "";
            } else {
                pendingstatus = " " + messageSource.getMessage("acc.field.butpendingforApproval", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))); // " but pending for Approval.";
                msg = msg.substring(0, msg.length() - 1);
            }
            Map<String, Object> filterParams = new HashMap<String, Object>();
            filterParams.put("id", companyid);
            KwlReturnObject extraresult = accCompanyPreferencesObj.getExtraCompanyPreferences(filterParams);
            ExtraCompanyPreferences extra = null;
            if (extraresult.getEntityList().size() > 0) {
                extra = (ExtraCompanyPreferences) extraresult.getEntityList().get(0);
            }
            
            //Get mapping details id of invoice documents
            String savedFilesMappingId = paramJobj.optString("savedFilesMappingId", "");
            if(!StringUtil.isNullOrEmpty(savedFilesMappingId)){
                /**
                * Save temporary saved attachment files mapping in permanent table
                */
                JSONObject jsonObj = new JSONObject();
                jsonObj.put("savedFilesMappingId", savedFilesMappingId);
                jsonObj.put("docId", billid);
                jsonObj.put("companyid", companyid);
                accSalesOrderServiceobj.saveDocuments(jsonObj);
            }
            
            if (extra.isActivateMRPModule()) {
                savemachineAsset(map1, companyid);
            }
            try {
                synchronized (this) {
                    JSONObject updatedPOJson = updateGRNEntryNumber(grid, sequenceformat, companyid, grOrder, billno, billid, entryNumber, paramJobj, DOSeqNum);
                    if (updatedPOJson.has("billno") && updatedPOJson.get("billno") != null) {
                        billno = updatedPOJson.optString("billno");
                    }
                }
            }catch (AccountingException ex) {
                accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Goods_Receipt_ModuleId);
                throw ex;
            }catch (Exception ex) {
                accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Goods_Receipt_ModuleId);
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
            String auditSMS = "";
            String action = "added new";
            if (isEdit == true && isCopy == false) {
                action = "updated";
            }

            /* Preparing Audit trial message if document is linking at teh time of creating */
            String linkingMessages = "";
            if (!StringUtil.isNullOrEmpty(linkedDocuments) && !StringUtil.isNullOrEmpty(fromLinkCombo)) {
                linkingMessages = " by Linking to " + fromLinkCombo + " " + linkedDocuments;
                if (isFixedAsset) {
                    linkingMessages = " by Linking to " + Constants.ACQUIRED_INVOICE + " " + linkedDocuments;
                }
            }

            if (isConsignment) {
                moduleName = "Consignment Goods Receipt";
            } else if (isFixedAsset) {
                moduleName = "Asset "+Constants.Goods_Receipt;
            } else {
                moduleName = Constants.Goods_Receipt;
            }
            msg += pendingstatus + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + billno + "</b>";   //"Goods receipt has been saved successfully";
            /**
             * Display Information to user in prompt about JE posted for this 
             * current transaction.
             */
            if (!StringUtil.isNullOrEmpty(jeNumber)) {
                msg += approvedLevel != 11 ? " " :", " + messageSource.getMessage("acc.field.JENo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + jeNumber + "</b>";
            }
            auditSMS = " has " + action + " " + moduleName + " " + billno + linkingMessages + (approvedLevel != 11 ? " " + messageSource.getMessage("acc.field.whichispendingforApproval", null, null) : "") + additionalsauditmessage;
            
            /* Updating entry in Audit Trial while unlinking transaction through Editing*/
            Map<String, Object> auditRequestParams = new HashMap<>();
            auditRequestParams.put(Constants.reqHeader, paramJobj.getString(Constants.reqHeader));
            auditRequestParams.put(Constants.remoteIPAddress, paramJobj.getString(Constants.remoteIPAddress));
            auditRequestParams.put(Constants.useridKey, paramJobj.getString(Constants.useridKey));
            if (!StringUtil.isNullOrEmpty(unlinkMessage)) {
                auditTrailObj.insertAuditLog(AuditAction.GOODS_RECEIPT_CREATED, "User " + paramJobj.optString(Constants.userfullname) + " has unlinked " + "Goods Receipt " + billno + unlinkMessage + ".", auditRequestParams, billno);
            }
            auditTrailObj.insertAuditLog(AuditAction.GOODS_RECEIPT_CREATED, "User " + paramJobj.optString(Constants.userfullname) + auditSMS, auditRequestParams, grOrder.getID());

            if (mailParams != null && !mailParams.isEmpty()) {
                /**
                 * parameters required for sending mail
                 */
                Map<String, Object> mailParameters = new HashMap();
                mailParameters.put(Constants.companyid, companyid);
                mailParameters.put(Constants.prNumber, billno);
                mailParameters.put(Constants.moduleid, Constants.Acc_Goods_Receipt_ModuleId);
                mailParameters.put(Constants.createdBy, grOrder.getCreatedby().getUserID());
                mailParameters.put(Constants.isCash, false);
                mailParameters.put(Constants.PAGE_URL, paramJobj.optString(Constants.PAGE_URL));
                mailParameters.put("level", grOrder.getApprovestatuslevel());

                Iterator itr = mailParams.iterator();

                while (itr.hasNext()) {
                    HashMap<String, Object> paramsMap = (HashMap<String, Object>) itr.next();
                    
                    mailParameters.put(Constants.ruleid, (String) paramsMap.get("ruleid"));
                    mailParameters.put(Constants.fromName, (String) paramsMap.get("fromName"));
                    mailParameters.put(Constants.hasApprover, (Boolean) paramsMap.get("hasApprover"));
                    sendMailToApprover(mailParameters);

                }

            }

            if (grOrder.isFixedAssetGRO() && !(grOrder.isIsconsignment())) {
                channelName = "/FixedAssetReceiptList/gridAutoRefresh";
            } else if (!(grOrder.isFixedAssetGRO() || grOrder.isIsconsignment())) {
                channelName = "/GoodsReceiptReport/gridAutoRefresh";
            }

            //Allocating quantity to Blocked SO Quantity 
            boolean activateCRblockingWithoutStock = false;
            KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), grOrder.getCompany().getCompanyID());
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
            activateCRblockingWithoutStock = extraCompanyPreferences.isActivateCRblockingWithoutStock();
            if (activateCRblockingWithoutStock && grOrder != null) {
                try {
                    JSONObject allocatingQuantitytJson = allocatingQuantitytoBlockedSOQuantity(grOrder,paramJobj,entryNumber,companyid);
                } catch (Exception ex) {
                    accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Goods_Receipt_ModuleId);
                    Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            
            /*------Code if we edit pending document---------  */
            if (isEditedPendingDocument) {

                String roleName = li.get(5) != null ? (String) li.get(5) : "";
                boolean isAuthorityToApprove = li.get(6) != null ? (Boolean) li.get(6) : false;
                boolean sendPendingDocumentsToNextLevel = li.get(7) != null ? (Boolean) li.get(7) : false;
                int levelOnWhichDocumentIsApproved = li.get(8) != null ? (Integer) li.get(8) : 0;

                msg += "<br>";
                /*-------If check "Send pending documents to next level" is activated from system preferences---------  */
                if (sendPendingDocumentsToNextLevel) {

                    if (roleName != "" && isAuthorityToApprove) {

                        auditTrailObj.insertAuditLog("65", "User " + paramJobj.optString(Constants.userfullname) + " has Approved a Goods Receipt " + grOrder.getGoodsReceiptOrderNumber() + " at Level-" + levelOnWhichDocumentIsApproved, auditRequestParams, grOrder.getID());

                        msg += messageSource.getMessage("acc.field.GoodsReceiptHasBeenApprovedSuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " by " + roleName + " " + paramJobj.optString(Constants.userfullname) + " at Level " + levelOnWhichDocumentIsApproved + ".";

                    } else if (!isAuthorityToApprove) {//If User have no authority to approve the document
                        msg = messageSource.getMessage("acc.msgbox.YouarenotauthorizedtoapprovethisrecordatLevel", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + levelOnWhichDocumentIsApproved + ".";
                    }
                } else if (!isAuthorityToApprove) {//If user have no authority to approve document
                    msg += messageSource.getMessage("acc.msgbox.YouarenotauthorizedtoapprovethisrecordatLevel", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + levelOnWhichDocumentIsApproved + " and record will be available at this level for approval" + ".";
                }

            }
            
            
            
            accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Goods_Receipt_ModuleId);
             productids=paramJobj.optString("productIds");
        }
        catch (AccountingException |SeqFormatException ex) {
            try {
                accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Goods_Receipt_ModuleId);
            } catch (ServiceException ex1) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex1);
            }
            msg = "" + ex.getMessage();
            if (ex.getMessage() == null) {
                msg = ex.getCause().getMessage();
            }
            try {
                if (accexception) {
                    paramJobj.put("accException", accexception);
                }
            } catch (JSONException ex1) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex1);
            } 
             throw new AccountingException(ex.getMessage());
            //Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }                
           catch (Exception ex) {
            try {
                accCommonTablesDAO.deleteTransactionInTemp(entryNumber, companyid, Constants.Acc_Goods_Receipt_ModuleId);
            } catch (ServiceException ex1) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex1);
            }
            msg = "" + ex.getMessage();
            if (ex.getMessage() == null) {
                msg = ex.getCause().getMessage();
            }
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("billid", billid);
                jobj.put("billno", billno);
                jobj.put("accException", accexception);
                jobj.put("pendingApproval", approvedLevel != 11);
                jobj.put("productIds", productids);
                jobj.put(Constants.channelName,channelName);
                jobj.put(Constants.isTaxDeactivated, isTaxDeactivated);


            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
       return jobj;

    }
    
     @Override
    public void getGoodsReceiptCustomDataForPayment(HashMap<String, Object> request, JSONObject obj, GoodsReceipt goodsReceipt, JournalEntry je) throws ServiceException {
        try {
            String companyid = (String) request.get(Constants.companyKey);
            boolean isFixedAsset = request.containsKey(Constants.isFixedAsset) ? (Boolean) request.get(Constants.isFixedAsset) : false;
            int moduleid = isFixedAsset ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : Constants.Acc_Vendor_Invoice_ModuleId;
            HashMap<String, Object> fieldrequestParams = new HashMap();
            HashMap<String, String> customFieldMap = new HashMap<>();
            HashMap<String, String> customDateFieldMap = new HashMap<>();
            HashMap<String, String> replaceFieldMap = new HashMap<>();
            KwlReturnObject custumObjresult = null;

            fieldrequestParams.put(Constants.filter_names, Arrays.asList(Constants.companyKey, Constants.moduleid, Constants.customcolumn));
            fieldrequestParams.put(Constants.filter_values, Arrays.asList(companyid, moduleid, 0));
            HashMap<String, Integer> FieldMap = accAccountDAOobj.getFieldParamsCustomMap(fieldrequestParams, replaceFieldMap, customFieldMap, customDateFieldMap);
            if (goodsReceipt.isNormalInvoice()) {
                Map<String, Object> variableMap = new HashMap<>();
                custumObjresult = accountingHandlerDAOobj.getObject(AccJECustomData.class.getName(), je.getID());
                replaceFieldMap = new HashMap<>();
                if (custumObjresult != null && custumObjresult.getEntityList().size() > 0) {
                    AccJECustomData jeDetailCustom = (AccJECustomData) custumObjresult.getEntityList().get(0);
                    if (jeDetailCustom != null) {
                        AccountingManager.setCustomColumnValues(jeDetailCustom, FieldMap, replaceFieldMap, variableMap);
                        JSONObject params = new JSONObject();
                        params.put(Constants.companyKey, companyid);
                        params.put(Constants.isLink, true);
                        if (request.containsKey(Constants.requestModuleId) && request.get(Constants.requestModuleId) != null) {
                            params.put(Constants.linkModuleId, request.get(Constants.requestModuleId));
                        }
                        fieldDataManagercntrl.addCustomData(variableMap, customFieldMap, customDateFieldMap, obj, params);
                    }
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.getGoodsReceiptCustomDataForPayment : " + ex.getMessage(), ex);
        }
    }
     
    /**
     * Description: Validate and Import Goods Receipt Orders data
     * @param paramJobj
     * @return JSONObject
     */
    @Override
    public JSONObject importGoodsReceiptOrdersJSON(JSONObject paramJobj) {
        JSONObject jobj = new JSONObject();
        try {
            String doAction = paramJobj.getString("do");

            if (doAction.compareToIgnoreCase("import") == 0) {
                jobj = importGoodsReceiptOrderRecordsForCSV(paramJobj);
            } else if (doAction.compareToIgnoreCase("validateData") == 0) {
                String eParams = paramJobj.getString("extraParams");
                JSONObject extraParams = StringUtil.isNullOrEmpty(eParams) ? new JSONObject() : new JSONObject(eParams);

                HashMap<String, Object> requestParams = importHandler.getImportRequestParams(paramJobj);
                requestParams.put("extraParams", extraParams);
                requestParams.put("extraObj", null);
                requestParams.put("servletContext", paramJobj.get("servletContext"));

                jobj = importHandler.validateFileData(requestParams);
                jobj.put("success", true);
            }
        } catch (Exception ex) {
            try {
                jobj.put("success", false);
                jobj.put("msg", "" + ex.getMessage());
            } catch (JSONException jex) {
                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, jex);
            }
        }
        return jobj;
    }
    
    public JSONObject importGoodsReceiptOrderRecordsForCSV(JSONObject requestJobj) throws AccountingException, IOException, SessionExpiredException, JSONException {
        JSONObject returnObj = new JSONObject();
        String msg = "";
        int total = 0, failed = 0;
        String fileName = requestJobj.getString("filename");
        String companyID = requestJobj.getString(Constants.companyKey);
        String masterPreference = requestJobj.getString("masterPreference");
        boolean issuccess = true;
        boolean isAlreadyExist = false;
        boolean isRecordFailed = false;
        FileInputStream fileInputStream = null;
        CsvReader csvReader = null;
        JSONObject paramJobj = new JSONObject();
        JSONArray rows = new JSONArray();
        Map <String,Object> rowDetailMap = new HashMap<>();
        Map <String,List<JSONObject>> batchMap = new HashMap<>();
        Map <String,List<Object>> batchSerialMap = new HashMap<>();
        JSONArray batchDetailArr = new JSONArray();
        Set<String> uniqueLineLevelRecordKeyList = new HashSet<>(); // Hashset to identify duplicate line level and inner line level record (GR + Product + Warehouse + Location + Batch)
        String prevRow = "";
        String prevBatch = "";
        double totalBatchQty=0;
        String entryNumber = "";
        String prevInvNo = "";

        try {
            String dateFormat = null, dateFormatId = requestJobj.getString("dateFormat");
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);

                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            DateFormat df = new SimpleDateFormat(dateFormat);
            df.setLenient(false);
            paramJobj.put(Constants.importdf, df); //sending this format for Processing batch details

            SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");

            KwlReturnObject extraPref = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyID);
            ExtraCompanyPreferences extrareferences = (ExtraCompanyPreferences) extraPref.getEntityList().get(0);
            Boolean isCurrencyCode = extrareferences.isCurrencyCode();

            String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
            File filePath = new File(destinationDirectory + File.separator + fileName);
            fileInputStream = new FileInputStream(filePath);
            String delimiterType = requestJobj.getString("delimiterType");
            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);

            JSONObject resjson = new JSONObject(requestJobj.getString("resjson"));
            JSONArray jSONArray = resjson.getJSONArray("root");
            HashMap<String, Integer> columnConfig = new HashMap<>();
            for (int i = 0; i < jSONArray.length(); i++) {
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }

            int cnt = 0;
            StringBuilder failedRecords = new StringBuilder();
            StringBuilder singleInvociceFailedRecords = new StringBuilder();// Invoive with one row of failure record then all rows will be included in failure file
            int singleInvoiceFailureRecoredCount = 0;//  count of total invoice rows in import file
            Set<String> failureList = new HashSet<>(); // set of invoice having failyure record's
            HashMap currencyMap = accSalesOrderServiceobj.getCurrencyMap(isCurrencyCode);

            while (csvReader.readRecord()) {
                String failureMsg = "";
                boolean isfailurerecord = false; // used to keep track Invoice Row  failure/correct
                String[] recarr = csvReader.getValues();

                if (cnt == 0) {
                    failedRecords.append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\" \"");
                } else if (cnt == 1) {
                    failedRecords.append("\n").append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\"Error Message\"");
                } else {
                    try {
                        String currencyID = requestJobj.getString(Constants.globalCurrencyKey);

                        entryNumber = "";
                        if (columnConfig.containsKey("number")) {
                            entryNumber = recarr[(Integer) columnConfig.get("number")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(entryNumber)) {
                                failureMsg += "Goods Receipt Order Number is not available. ";
                            }
                        } else {
                            failureMsg += "Goods Receipt Order Number column is not found. ";
                        }

                        Date billDate = null;
                        if (columnConfig.containsKey("billdate")) {
                            String goodsReceiptOrderDateStr = recarr[(Integer) columnConfig.get("billdate")].replaceAll("\"", "").trim();

                            if (StringUtil.isNullOrEmpty(goodsReceiptOrderDateStr)) {
                                failureMsg += "Goods Receipt Order Date is not available. ";
                            } else {
                                try {
                                    billDate = df.parse(goodsReceiptOrderDateStr);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect date format for Goods Receipt Order Date, Please specify values in " + dateFormat + " format. ";
                                }
                            }
                        } else {
                            failureMsg += "Goods Receipt Order Date column is not found. ";
                        }

                        String supplierInvoiceNo = "";
                        if (columnConfig.containsKey(Constants.SUPPLIERINVOICENO)) {
                            supplierInvoiceNo = recarr[(Integer) columnConfig.get(Constants.SUPPLIERINVOICENO)].replaceAll("\"", "").trim();
                        }

                        String costCenterID = "";
                        if (columnConfig.containsKey("costcenter")) {
                            String costCenterName = recarr[(Integer) columnConfig.get("costcenter")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(costCenterName)) {
                                costCenterID = accSalesOrderServiceobj.getCostCenterIDByName(costCenterName, companyID);
                                if (StringUtil.isNullOrEmpty(costCenterID)) {
                                    failureMsg += "Cost Center is not found for name " + costCenterName + ". ";
                                }
                            }
                        }

                        Date shipDate = null;
                        if (columnConfig.containsKey("shipdate")) {
                            String shipDateStr = recarr[(Integer) columnConfig.get("shipdate")].replaceAll("\"", "").trim();

                            if (!StringUtil.isNullOrEmpty(shipDateStr)) {
                                try {
                                    shipDate = df.parse(shipDateStr);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect date format for Ship Date, Please specify values in " + dateFormat + " format. ";
                                }
                            }
                        }

                        String vendorID = "";
                        /*
                         * 1. Vendor Code
                         */
                        if (columnConfig.containsKey("vendorCode")) {
                            String vendorCode = recarr[(Integer) columnConfig.get("vendorCode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(vendorCode)) {
                                Vendor vendor = accPurchaseOrderModuleServiceObj.getVendorByCode(vendorCode, companyID);
                                if (vendor != null) {
                                    vendorID = vendor.getID();
                                } else {
                                    failureMsg += messageSource.getMessage("acc.field.VendorCodeisnotavailable", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + vendorCode + ". ";
                                }
                            }
                        }

                        /*
                         * 2. Vendor Name if vendorID is empty it means
                         * Vendor is not found for given code. so need to
                         * search data on name
                         */
                        if (StringUtil.isNullOrEmpty(vendorID)) {
                            if (columnConfig.containsKey("VendorName")) {
                                String vendorName = recarr[(Integer) columnConfig.get("VendorName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(vendorName)) {
                                    Vendor vendor = accPurchaseOrderModuleServiceObj.getVendorByName(vendorName, companyID);
                                    if (vendor != null) {
                                        vendorID = vendor.getID();
                                    } else {
                                        failureMsg += messageSource.getMessage("acc.field.VendorisnotfoundforVendorCodeName", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ". ";
                                    }
                                } else {
                                    failureMsg += messageSource.getMessage("acc.field.VendorisnotfoundforVendorCodeName", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ".";
                                }
                            } else {
                                failureMsg += messageSource.getMessage("acc.field.VendorisnotfoundforVendorCodeName", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ".";
                            }
                        }

                        String termID = "";
                        if (columnConfig.containsKey("term")) {
                            String termName = recarr[(Integer) columnConfig.get("term")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(termName)) {
                                termID = accSalesOrderServiceobj.getTermIDByName(termName, companyID);
                                if (StringUtil.isNullOrEmpty(termID)) {
                                    failureMsg += "Debit Term is not found for name " + termName + ". ";
                                }
                            } else {
                                failureMsg += "Debit Term is not available. ";
                            }
                        } else {
                            failureMsg += "Debit Term column is not found. ";
                        }

                        String memo = "";
                        if (columnConfig.containsKey("memo")) {
                            memo = recarr[(Integer) columnConfig.get("memo")].replaceAll("\"", "").trim();
                        }

                        String shipVia = "";
                        if (columnConfig.containsKey("shipvia")) {
                            shipVia = recarr[(Integer) columnConfig.get("shipvia")].replaceAll("\"", "").trim();
                        }

                        String fob = "";
                        if (columnConfig.containsKey("fob")) {
                            fob = recarr[(Integer) columnConfig.get("fob")].replaceAll("\"", "").trim();
                        }


                        String agentID = "";
                        if (columnConfig.containsKey("agent")) {
                            String agentName = recarr[(Integer) columnConfig.get("agent")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(agentName)) {
                                agentID = accPurchaseOrderModuleServiceObj.getAgentIDByName(agentName, companyID);
                                if (StringUtil.isNullOrEmpty(agentID)) {
                                    failureMsg += "Agent is not found for name " + agentName + ". ";
                                }
                            }
                        }

                        String status = "";
                        if (columnConfig.containsKey("statuscombo")) {
                            String statusName = recarr[(Integer) columnConfig.get("statuscombo")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(statusName)) {
                                status = getGROStatusIDByName(statusName, companyID);
                                if (StringUtil.isNullOrEmpty(status)) {
                                    failureMsg += "Goods Receipt Order status is not found for name " + statusName + ". ";
                                }
                            }
                        }

                        if (isCurrencyCode ? columnConfig.containsKey("currencyCode") : columnConfig.containsKey("currencyName")) {
                            String currencyStr = isCurrencyCode ? recarr[(Integer) columnConfig.get("currencyCode")].replaceAll("\"", "").trim() : recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(currencyStr)) {
                                currencyID = accSalesOrderServiceobj.getCurrencyId(currencyStr, currencyMap);

                                if (StringUtil.isNullOrEmpty(currencyID)) {
                                    failureMsg += messageSource.getMessage("acc.field.ImportProductExceptionFormat", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ". ";
                                }
                            } else {
                                if (!masterPreference.equalsIgnoreCase("1")) {
                                    failureMsg += "Currency is not available. ";
                                }
                            }
                        }

                        Product product = null;
                        if (columnConfig.containsKey("productid")) {
                            String productID = recarr[(Integer) columnConfig.get("productid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productID)) {
                                product = accSalesOrderServiceobj.getProductByProductID(productID, companyID);
                                if (product == null) {
                                    failureMsg += "Product ID is not found for " + productID + ". ";
                                }
                            } else {
                                failureMsg += "Product ID is not available. ";
                            }
                        } else {
                            failureMsg += "Product ID column is not found. ";
                        }

                        double quantity = 0;
                        if (columnConfig.containsKey("quantity")) {
                            String quantityStr = recarr[(Integer) columnConfig.get("quantity")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(quantityStr)) {
                                failureMsg += "Actual Quantity is not available. ";
                            } else {
                                try {
                                    quantity = authHandler.roundQuantity(Double.parseDouble(quantityStr), companyID);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect numeric value for Actual Quantity, Please ensure that value type of Quantity matches with the Quantity. ";
                                }
                            }
                        } else {
                            failureMsg += "Quantity column is not found. ";
                        }
                        double dquantity = 0;
                        if (columnConfig.containsKey("dquantity")) {
                            String quantityStr = recarr[(Integer) columnConfig.get("dquantity")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(quantityStr)) {
                                failureMsg += " Received Quantity is not available. ";
                            } else {
                                try {
                                    dquantity = authHandler.roundQuantity(Double.parseDouble(quantityStr), companyID);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect numeric value for Received Quantity, Please ensure that value type of Quantity matches with the Quantity. ";
                                }
                            }
                        } else {
                            failureMsg += "Received Quantity column is not found. ";
                        }

                        if (dquantity > quantity) {
                            failureMsg += "Receipt quantity should not be greater than actual quantity. ";
                        } else if (dquantity <= 0) {
                            failureMsg += "Receipt quantity should not be equal or less than zero.";
                        }

                        double unitPrice = 0;
                        if (columnConfig.containsKey("rate")) {
                            String unitPriceStr = recarr[(Integer) columnConfig.get("rate")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(unitPriceStr)) {
                                failureMsg += "Unit Price is not available. ";
                            } else {
                                try {
                                    unitPrice = authHandler.roundQuantity(Double.parseDouble(unitPriceStr), companyID);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect numeric value for Unit Price, Please ensure that value type of Unit Price matches with the Unit Price. ";
                                }
                            }
                        } else {
                            failureMsg += "Unit Price column is not found. ";
                        }

                        UnitOfMeasure uom = null;
                        if (columnConfig.containsKey("uomid")) {
                            String productUOMName = recarr[(Integer) columnConfig.get("uomid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
                                uom = accSalesOrderServiceobj.getUOMByName(productUOMName, companyID);
                                if (uom != null) {
                                } else {
                                    if (!masterPreference.equalsIgnoreCase("1")) {
                                        failureMsg += "Product Unit Of Measure is not found for " + productUOMName + ". ";
                                    }
                                }
                            } else {
                                if (!masterPreference.equalsIgnoreCase("1")) {
                                    failureMsg += "Product Unit Of Measure is not available. ";
                                }
                            }
                        }

                        int discountType = 1;
                        if (columnConfig.containsKey("discountType")) {
                            String discountTypeStr = recarr[(Integer) columnConfig.get("discountType")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(discountTypeStr)) {
                                if (discountTypeStr.equalsIgnoreCase("Percentage")) {
                                    discountType = 1;
                                } else if (discountTypeStr.equalsIgnoreCase("Flat")) {
                                    discountType = 0;
                                } else {
                                    failureMsg += "Format you entered is not correct. It should be like \"Percentage\" or \"Flat\". ";
                                }
                            } 
                        }

                        double discount = 0;
                        if (columnConfig.containsKey("prdiscount")) {
                            String discountStr = recarr[(Integer) columnConfig.get("prdiscount")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(discountStr)) {
                                try {
                                    discount = authHandler.roundQuantity(Double.parseDouble(discountStr), companyID);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect numeric value for Discount, Please ensure that value type of Discount matches with the Discount. ";
                                }
                            }
                        }


                        // Warehouse Location Batch detail validation
                        Map<String, Object> requestMap = new HashMap<>();
                        requestMap.put("product", product);
                        requestMap.put("columnConfig", columnConfig);
                        requestMap.put("recarr", recarr);
                        requestMap.put("companyID", companyID);
                        requestMap.put("failureMsg", failureMsg);
                        requestMap.put("masterPreference", masterPreference);
                        requestMap.put("df", df);
                        requestMap.put("dateFormat", dateFormat);

                        boolean isLocationForProduct = false;
                        boolean isWarehouseForProduct = false;
                        boolean isBatchForProduct = false;
                        boolean isSerialForProduct = false;
                        boolean isRowForProduct = false;
                        boolean isRackForProduct = false;
                        boolean isBinForProduct = false;
                        String mfgdate = null;
                        String expdate = null;
                        String expstart = null;
                        String expend = null;
                        double batchquantity = 0;
                        String serialName = "";
                        String batchName = "";

                        InventoryWarehouse warehouseObj = null;
                        InventoryLocation locationObj = null;
                        StoreMaster rowObj = null;
                        StoreMaster rackObj = null;
                        StoreMaster binObj = null;

                        if (product.isIswarehouseforproduct() && product.isIslocationforproduct()) {
                            Map<String, Object> returnMap = accProductModuleService.validateBatchSerialDetail(requestMap);
                            if (returnMap.containsKey("isWarehouseForProduct") && returnMap.get("isWarehouseForProduct") != null) {
                                isWarehouseForProduct = (boolean) returnMap.get("isWarehouseForProduct");
                            }
                            if (returnMap.containsKey("isLocationForProduct") && returnMap.get("isLocationForProduct") != null) {
                                isLocationForProduct = (boolean) returnMap.get("isLocationForProduct");
                            }
                            if (returnMap.containsKey("isBatchForProduct") && returnMap.get("isBatchForProduct") != null) {
                                isBatchForProduct = (boolean) returnMap.get("isBatchForProduct");
                            }
                            if (returnMap.containsKey("isSerialForProduct") && returnMap.get("isSerialForProduct") != null) {
                                isSerialForProduct = (boolean) returnMap.get("isSerialForProduct");
                            }
                            if (returnMap.containsKey("isRowForProduct") && returnMap.get("isRowForProduct") != null) {
                                isRowForProduct = (boolean) returnMap.get("isRowForProduct");
                            }
                            if (returnMap.containsKey("isRackForProduct") && returnMap.get("isRackForProduct") != null) {
                                isRackForProduct = (boolean) returnMap.get("isRackForProduct");
                            }
                            if (returnMap.containsKey("isBinForProduct") && returnMap.get("isBinForProduct") != null) {
                                isBinForProduct = (boolean) returnMap.get("isBinForProduct");
                            }

                            if (returnMap.containsKey("warehouseObj") && returnMap.get("warehouseObj") != null) {
                                warehouseObj = (InventoryWarehouse) returnMap.get("warehouseObj");
                            }
                            if (returnMap.containsKey("locationObj") && returnMap.get("locationObj") != null) {
                                locationObj = (InventoryLocation) returnMap.get("locationObj");
                            }
                            if (returnMap.containsKey("rowObj") && returnMap.get("rowObj") != null) {
                                rowObj = (StoreMaster) returnMap.get("rowObj");
                            }
                            if (returnMap.containsKey("rackObj") && returnMap.get("rackObj") != null) {
                                rackObj = (StoreMaster) returnMap.get("rackObj");
                            }
                            if (returnMap.containsKey("binObj") && returnMap.get("binObj") != null) {
                                binObj = (StoreMaster) returnMap.get("binObj");
                            }
                            if (returnMap.containsKey("mfgdate") && returnMap.get("mfgdate") != null) {
                                mfgdate = (String) returnMap.get("mfgdate");
                            }
                            if (returnMap.containsKey("expdate") && returnMap.get("expdate") != null) {
                                expdate = (String) returnMap.get("expdate");
                            }
                            if (returnMap.containsKey("expstart") && returnMap.get("expstart") != null) {
                                expstart = (String) returnMap.get("expstart");
                            }
                            if (returnMap.containsKey("expend") && returnMap.get("expend") != null) {
                                expend = (String) returnMap.get("expend");
                            }
                            if (returnMap.containsKey("batchName") && returnMap.get("batchName") != null) {
                                batchName = (String) returnMap.get("batchName");
                            }
                            if (returnMap.containsKey("serialName") && returnMap.get("serialName") != null) {
                                serialName = (String) returnMap.get("serialName");
                            }
                            if (returnMap.containsKey("failureMsg") && returnMap.get("failureMsg") != null) {
                                failureMsg = (String) returnMap.get("failureMsg");
                            }

                            if (returnMap.containsKey("batchquantity") && returnMap.get("batchquantity") != null) {
                                batchquantity = (double) returnMap.get("batchquantity");
                                totalBatchQty += batchquantity;
                            }

                            if (prevRow.equalsIgnoreCase("") || !prevRow.equalsIgnoreCase(entryNumber + product.getProductid())) { // For New Row or New line level
                                prevRow = entryNumber + product.getProductid();
                                totalBatchQty = batchquantity;
                            }
                            if (totalBatchQty > dquantity) {
                                failureMsg += "Batch Quantity can't be greater than Product Quantity. ";
                            }
                        }
                        
                        isAlreadyExist = false;

                        KwlReturnObject result = accGoodsReceiptobj.getGoodsReceiptOrderCount(entryNumber, companyID);
                        int nocount = result.getRecordTotalCount();
                        if (nocount > 0) {
                            isAlreadyExist = true;
                            throw new AccountingException("Goods Receipt Order number'" + entryNumber + "' already exists.");
                        }

                        // Creating Goods Receipt Order JSON
                        if (!prevInvNo.equalsIgnoreCase(entryNumber) || entryNumber.equalsIgnoreCase("")) {
                            if(failureList.contains(prevInvNo)) {
//                                failed += singleInvoiceFailureRecoredCount;
                                if(singleInvoiceFailureRecoredCount > 0){
                                    failedRecords.append(singleInvociceFailedRecords);
                                }
                            }
                          
                            if (!isRecordFailed) { //rows.length() > 0 &&
                                 if (rowDetailMap.size() > 0 || rows.length()>0) {
                                   Map<String,Object> resultMap= manipulateRowDetails(rowDetailMap, batchSerialMap, batchMap, batchDetailArr, failedRecords, singleInvociceFailedRecords, totalBatchQty, isRecordFailed, rows);
                                   if(resultMap.containsKey("isRecordFailed")){
                                       isRecordFailed=(boolean) resultMap.get("isRecordFailed");
                                       if(isRecordFailed){
                                            failed++;
                                            if (singleInvociceFailedRecords.toString().length() > 0) {
                                                failedRecords.append(singleInvociceFailedRecords);
                                            }
                                       }
                                   }
                                   if(resultMap.containsKey("batchMap")&& resultMap.get("batchMap")!= null){
                                       batchMap =(Map<String, List<JSONObject>>)resultMap.get("batchMap");
                                   } 
                                    if (!isRecordFailed) {
                                        paramJobj.put(Constants.detail, rows.toString());
                                        paramJobj.put(Constants.PAGE_URL, requestJobj.optString(Constants.PAGE_URL));
                                        saveGoodsReceiptOrder(paramJobj);
                                    }
                                }     
                            }
                            // reset variables
                            rowDetailMap = new HashMap<>();
                            batchMap = new HashMap<>();
                            batchSerialMap = new HashMap<>();
                            batchDetailArr = new JSONArray();
                            paramJobj = new JSONObject();
                            rows = new JSONArray();
                            
                            singleInvociceFailedRecords = new StringBuilder();
                            singleInvoiceFailureRecoredCount = 0;
                            prevInvNo = entryNumber;
                            isRecordFailed = false;
                            
                            // For create custom field array
                            JSONArray customJArr = accSalesOrderServiceobj.createGlobalCustomFieldArrayForImport(requestJobj, jSONArray, recarr, df, Constants.Acc_Goods_Receipt_ModuleId);


                            // For adding due date
                            Date dueDate = getDueDateFromTermAndBillDate(termID, billDate);


                            // For getting exchange rate
                            double exchangeRateForTransaction = accSalesOrderServiceobj.getExchangeRateForTransaction(requestJobj, billDate, currencyID);

                            String sequenceFormatID = "NA";
                            boolean autogenerated = false;
                            boolean isFromOtherSource = false;
                            if (!StringUtil.isNullOrEmpty(entryNumber)) {
                                Map<String, String> sequenceNumberDataMap = new HashMap<String, String>();
                                sequenceNumberDataMap.put("moduleID", String.valueOf(Constants.Acc_Goods_Receipt_ModuleId));
                                sequenceNumberDataMap.put("entryNumber", entryNumber);
                                sequenceNumberDataMap.put("companyID", companyID);
                                List list = importHandler.checksEntryNumberForSequenceNumber(sequenceNumberDataMap);
                                if (!list.isEmpty()) {
                                    boolean isvalidEntryNumber = (Boolean) list.get(0);
                                    if (!isvalidEntryNumber) {
                                        String formatID = (String) list.get(2);
                                        int intSeq = (Integer) list.get(3);
                                        paramJobj.put(Constants.SEQNUMBER, intSeq);
                                        paramJobj.put(Constants.SEQFORMAT, formatID);
                                        autogenerated = true;
                                        sequenceFormatID = formatID;
                                        isFromOtherSource = true;
                                    }
                                }
                            }

                            
                            paramJobj.put(Constants.importdf, df); //sending this format for Processing batch details
                            paramJobj.put(Constants.companyKey, companyID);
                            paramJobj.put(Constants.globalCurrencyKey, requestJobj.optString(Constants.globalCurrencyKey));
                            paramJobj.put(Constants.useridKey, requestJobj.optString(Constants.useridKey));
                            paramJobj.put(Constants.userfullname, requestJobj.optString(Constants.userfullname));
                            paramJobj.put(Constants.reqHeader, requestJobj.optString(Constants.reqHeader));
                            paramJobj.put(Constants.remoteIPAddress, requestJobj.optString(Constants.remoteIPAddress));
                            paramJobj.put(Constants.timezonedifference, requestJobj.optString(Constants.timezonedifference));
                            paramJobj.put(Constants.language, Constants.language);
                            paramJobj.put(Constants.currencyKey, currencyID);
                            paramJobj.put("number", entryNumber);
                            paramJobj.put("sequenceformat", sequenceFormatID);
                            paramJobj.put("autogenerated", autogenerated);
                            paramJobj.put("isFromOtherSource", isFromOtherSource);
                            paramJobj.put("vendor", vendorID);
                            paramJobj.put("defaultAdress", "true");
                            paramJobj.put(Constants.costcenter, costCenterID);
                            paramJobj.put("statuscombo", status);
                            paramJobj.put("memo", memo);
                            paramJobj.put("posttext", "");
                            paramJobj.put("term", termID);
                            paramJobj.put("billdate", sdf.format(billDate));
                            paramJobj.put("duedate", sdf.format(dueDate));
                            paramJobj.put("perdiscount", "false");
                            paramJobj.put("discount", "0");
                            paramJobj.put("includingGST", "false");

                            if (shipDate != null) {
                                paramJobj.put("shipdate", sdf.format(shipDate));
                            }
                            paramJobj.put("shipvia", shipVia);
                            paramJobj.put("fob", fob);
                            paramJobj.put("isfavourite", "false");
                            paramJobj.put("agent", agentID);
                            paramJobj.put("externalcurrencyrate", String.valueOf(exchangeRateForTransaction));
                            paramJobj.put("istemplate", "0");
                            paramJobj.put("taxamount", "0");
                            paramJobj.put("invoicetermsmap", "[]");
                            paramJobj.put("termsincludegst", "false");
                            paramJobj.put("fromLinkCombo", "");
                            paramJobj.put("linkFrom", "");
                            paramJobj.put("linkNumber", "");
                            paramJobj.put("templatename", "");
                            paramJobj.put("customfield", customJArr.toString());
                            paramJobj.put("isEdit", "false");
                            paramJobj.put("copyInv", "false");
                            paramJobj.put(Constants.isDraft, "false");
                            paramJobj.put("includeprotax", "false");
                            paramJobj.put("shipLength", "1");
                            paramJobj.put("taxid", "");
                            paramJobj.put("deletedLinkedDocumentId", "");
                            paramJobj.put("invoicetype", "");
                            paramJobj.put("seqformat_oldflag", "false");
                            paramJobj.put(Constants.SUPPLIERINVOICENO, supplierInvoiceNo);

                            Map<String, Object> requestParams = new HashMap<>();
                            requestParams.put(Constants.companyKey, companyID);
                            CompanyPreferencesCMN.checkLockPeriod(accCompanyPreferencesObj, requestParams, billDate, false);
                        } // end global details
                        
                        if (!StringUtil.isNullOrEmpty(failureMsg)) {
                            throw new AccountingException(failureMsg);
                        }

                        // For Line level details
                        double conversionFactor = 1;
                        // Add Custom fields details of line items
                        JSONArray lineCustomJArr = accSalesOrderServiceobj.createLineLevelCustomFieldArrayForImport(requestJobj, jSONArray, recarr, df, Constants.Acc_Goods_Receipt_ModuleId);

                        String key = entryNumber + product.getProductid();
                        JSONObject obj = new JSONObject();
                        if(!isRecordFailed){
                            if (product.isIswarehouseforproduct() && product.isIslocationforproduct()) {   // For batch Serial Flow
                                String newLineLevelKey = key;
                                if (isWarehouseForProduct && warehouseObj != null) {
                                    key = key + warehouseObj.getName();
                                    obj.put("warehouse", warehouseObj.getId());
                                }
                                if (isLocationForProduct && locationObj != null) {
                                    key = key + locationObj.getName();
                                    obj.put("location", locationObj.getId());
                                }
                                
                                // check if inner line level record combination is duplicate (GR + Product + Warehouse + Location + Batch)
                                if(uniqueLineLevelRecordKeyList.contains(key + batchName)){// Duplicate found then reset all variables and throw failure message.
                                    rowDetailMap = new HashMap<>();
                                    batchMap = new HashMap<>();
                                    batchSerialMap = new HashMap<>();
                                    batchDetailArr = new JSONArray();
                                    paramJobj = new JSONObject();
                                    rows = new JSONArray();
                                    throw new AccountingException("Duplicate record found for GRN, Product, Warehouse, Location and Batch.");
                                } else {
                                    uniqueLineLevelRecordKeyList.add(key + batchName);
                                }
                                
                                if (isRowForProduct && rowObj != null) {
                                    obj.put("row", rowObj.getId());
                                }
                                if (isRackForProduct && rackObj != null) {
                                    obj.put("rack", rackObj.getId());
                                }
                                if (isBinForProduct && binObj != null) {
                                    obj.put("bin", binObj.getId());
                                }
                                obj.put("quantity", batchquantity);
                                obj.put("isBatchForProduct", isBatchForProduct);
                                if (isBatchForProduct) {
                                    obj.put("batch", batchName);
                                    obj.put("mfgdate", mfgdate);
                                    obj.put("expdate", expdate);
                                    obj.put("isSerialForProduct", isSerialForProduct);


                                    String batchKey = isBatchForProduct ? key + batchName : key;
                                    if (batchMap.containsKey(batchKey)) {
                                        List<JSONObject> list = batchMap.get(batchKey);
                                        list.add(obj);
                                        batchMap.put(batchKey, list);
                                    } else {
                                        List<JSONObject> list = new ArrayList<>();
                                        list.add(obj);
                                        batchMap.put(batchKey, list);
                                    }
                                }
                                if (isSerialForProduct) {
                                    obj.put("serialno", serialName);
                                    obj.put("serialnoid", "");
                                    obj.put("expstart", expstart);
                                    obj.put("expend", expend);

                                    String batchKey = isBatchForProduct ? key + batchName : key;
                                    if (batchSerialMap.containsKey(batchKey)) {
                                        List<Object> list = batchSerialMap.get(batchKey);
                                        list.add(serialName);
                                        batchSerialMap.put(batchKey, list);
                                    } else {
                                        List<Object> list = new ArrayList<>();
                                        list.add(serialName);
                                        batchSerialMap.put(batchKey, list);
                                    }
                                }
                                if (!rowDetailMap.containsKey(newLineLevelKey)) {// If Entry No + Productid is changed then it is new line level, so process previous batch stuff of previous line level.
                                    if (rowDetailMap.size() > 0) {
                                        Map<String, Object> resultMap = manipulateRowDetails(rowDetailMap, batchSerialMap, batchMap, batchDetailArr, failedRecords, singleInvociceFailedRecords, totalBatchQty, isRecordFailed, rows);
                                        if (resultMap.containsKey("isRecordFailed")) {
                                            isRecordFailed = (boolean) resultMap.get("isRecordFailed");
                                            if (isRecordFailed) {
                                                failed++;
                                                if (singleInvociceFailedRecords.toString().length() > 0) {
                                                    failedRecords.append(singleInvociceFailedRecords);
                                                }
                                                singleInvociceFailedRecords = new StringBuilder();
                                                
                                                paramJobj = new JSONObject();
                                                rows = new JSONArray();
                                            }
                                        }
                                        if (resultMap.containsKey("batchMap") && resultMap.get("batchMap") != null) {
                                            batchMap = (Map<String, List<JSONObject>>) resultMap.get("batchMap");
                                        }
                                        rowDetailMap = new HashMap<>();
                                        batchSerialMap = new HashMap<>();
                                        batchDetailArr = new JSONArray();
                                    }

                                    if (!isRecordFailed) {
                                        JSONObject detailData = new JSONObject();
                                        detailData.put("productid", (product != null) ? product.getID() : "");
                                        detailData.put("rate", String.valueOf(unitPrice));
                                        detailData.put("priceSource", "");
                                        detailData.put("quantity", String.valueOf(quantity));
                                        detailData.put("dquantity", String.valueOf(dquantity));
                                        detailData.put("uomid", (uom != null) ? uom.getID() : "");
                                        detailData.put("baseuomquantity", String.valueOf(quantity * conversionFactor));
                                        detailData.put("baseuomrate", String.valueOf(conversionFactor));
                                        detailData.put("dependentType", "");
                                        detailData.put("inouttime", "");
                                        detailData.put("showquantity", "");
                                        detailData.put("description", (product != null) ? product.getDescription() : "");
                                        detailData.put("invstore", "");
                                        detailData.put("invlocation", "");
                                        detailData.put("rowid", "");
                                        detailData.put("prdiscount", String.valueOf(discount));
                                        detailData.put("discountispercent", String.valueOf(discountType));
                                        detailData.put("prtaxid", "");
                                        detailData.put("taxamount", "0");
                                        detailData.put("linkto", "");
                                        detailData.put("savedrowid", "");
                                        detailData.put("recTermAmount", "");
                                        detailData.put("OtherTermNonTaxableAmount", "");
                                        detailData.put("productcustomfield", "[{}]");
                                        detailData.put("LineTermdetails", "");
                                        detailData.put("productMRP", "");
                                        detailData.put("valuationType", "");
                                        detailData.put("reortingUOMExcise", "");
                                        detailData.put("reortingUOMSchemaExcise", "");
                                        detailData.put("valuationTypeVAT", "");
                                        detailData.put("reportingUOMVAT", "");
                                        detailData.put("reportingUOMSchemaVAT", "");
                                        detailData.put("customfield", lineCustomJArr.toString());
                                        rowDetailMap.put(newLineLevelKey, detailData);
                                        batchDetailArr.put(obj);
                                    }
                                } else {
                                    batchDetailArr.put(obj);
                                }
                            } else {
                                // for already existing row having batch details and next product don't have batchdetails. to first row details then process current 
                                if (rowDetailMap.size() > 0) {
                                    Map<String, Object> resultMap = manipulateRowDetails(rowDetailMap, batchSerialMap, batchMap, batchDetailArr, failedRecords, singleInvociceFailedRecords, totalBatchQty, isRecordFailed, rows);
                                    if (resultMap.containsKey("isRecordFailed")) {
                                        isRecordFailed = (boolean) resultMap.get("isRecordFailed");
                                        if (isRecordFailed) {
                                            failed++;
                                            if (singleInvociceFailedRecords.toString().length() > 0) {
                                                failedRecords.append(singleInvociceFailedRecords);
                                            }
                                            singleInvociceFailedRecords = new StringBuilder();

                                            paramJobj = new JSONObject();
                                            rows = new JSONArray();
                                        }
                                    }
                                    if (resultMap.containsKey("batchMap") && resultMap.get("batchMap") != null) {
                                        batchMap = (Map<String, List<JSONObject>>) resultMap.get("batchMap");
                                    }
                                    rowDetailMap = new HashMap<>();
                                    batchSerialMap = new HashMap<>();
                                    batchDetailArr = new JSONArray();
                                }
                                
                                if(uniqueLineLevelRecordKeyList.contains(key)){
                                    throw new AccountingException("Duplicate record found for GRN and Product.");
                                } else {
                                    uniqueLineLevelRecordKeyList.add(key);
                                }

                                if (!isRecordFailed) {
                                    JSONObject detailData = new JSONObject();
                                    detailData.put("productid", (product != null) ? product.getID() : "");
                                    detailData.put("rate", String.valueOf(unitPrice));
                                    detailData.put("priceSource", "");
                                    detailData.put("quantity", String.valueOf(quantity));
                                    detailData.put("dquantity", String.valueOf(dquantity));
                                    detailData.put("uomid", (uom != null) ? uom.getID() : "");
                                    detailData.put("baseuomquantity", String.valueOf(quantity * conversionFactor));
                                    detailData.put("baseuomrate", String.valueOf(conversionFactor));
                                    detailData.put("dependentType", "");
                                    detailData.put("inouttime", "");
                                    detailData.put("showquantity", "");
                                    detailData.put("description", (product != null) ? product.getDescription() : "");
                                    detailData.put("invstore", "");
                                    detailData.put("invlocation", "");
                                    detailData.put("rowid", "");
                                    detailData.put("prdiscount", String.valueOf(discount));
                                    detailData.put("discountispercent", String.valueOf(discountType));
                                    detailData.put("prtaxid", "");
                                    detailData.put("taxamount", "0");
                                    detailData.put("linkto", "");
                                    detailData.put("savedrowid", "");
                                    detailData.put("recTermAmount", "");
                                    detailData.put("OtherTermNonTaxableAmount", "");
                                    detailData.put("productcustomfield", "[{}]");
                                    detailData.put("LineTermdetails", "");
                                    detailData.put("productMRP", "");
                                    detailData.put("valuationType", "");
                                    detailData.put("reortingUOMExcise", "");
                                    detailData.put("reortingUOMSchemaExcise", "");
                                    detailData.put("valuationTypeVAT", "");
                                    detailData.put("reportingUOMVAT", "");
                                    detailData.put("reportingUOMSchemaVAT", "");
                                    detailData.put("customfield", lineCustomJArr.toString());

                                    rows.put(detailData);
                                }
                            }
                        }
                    } catch (Exception ex) {
                        failed++;
                        isRecordFailed = true;
                        isfailurerecord = true;
                        String errorMsg = "";
                        if (ex.getMessage() != null) {
                            errorMsg = ex.getMessage();
                        } else if (ex.getCause() != null) {
                            errorMsg = ex.getCause().getMessage();
                        }
                        if(!failureList.contains(entryNumber)) {
//                                failed += singleInvoiceFailureRecoredCount;
                            if(singleInvoiceFailureRecoredCount > 0 ){
                                failedRecords.append(singleInvociceFailedRecords);
                                singleInvociceFailedRecords = new StringBuilder();
                                singleInvoiceFailureRecoredCount = 0;
                            }
                            prevInvNo = entryNumber;
                            failureList.add(entryNumber);
                        }
                        singleInvoiceFailureRecoredCount++;
                        singleInvociceFailedRecords.append("\n").append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\"").append(errorMsg.replaceAll("\"", "")).append("\"");
                    }
                    if (!isfailurerecord) {
//                        singleInvoiceFailureRecoredCount++;
                        singleInvociceFailedRecords.append("\n").append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\"").append(" ").append("\"");
                    }
                    total++;
                }
                cnt++;
            }

            // save GRO for last record
            if (!isAlreadyExist && !isRecordFailed) {
                Map<String, Object> resultMap = manipulateRowDetails(rowDetailMap, batchSerialMap, batchMap, batchDetailArr, failedRecords, singleInvociceFailedRecords, totalBatchQty, isRecordFailed, rows);
                if (resultMap.containsKey("isRecordFailed")) {
                    isRecordFailed = (boolean) resultMap.get("isRecordFailed");
                    if (!isRecordFailed) {
                        rowDetailMap = new HashMap<>();
                        batchSerialMap = new HashMap<>();
                        batchDetailArr = new JSONArray();
                    } else {
                        failed++;
                    }
                }
                if (resultMap.containsKey("batchMap") && resultMap.get("batchMap") != null) {
                    batchMap = (Map<String, List<JSONObject>>) resultMap.get("batchMap");
                }
                
                if(!isRecordFailed){
                    paramJobj.put(Constants.detail, rows.toString());
                    paramJobj.put(Constants.PAGE_URL, requestJobj.optString(Constants.PAGE_URL));
                    saveGoodsReceiptOrder(paramJobj);
                }    
            }
            
            if (isRecordFailed) {// only if last invoice is failed
                //failed += singleInvoiceFailureRecoredCount; // last interation failure record
                if (singleInvociceFailedRecords.toString().length() > 0) {
                    failedRecords.append(singleInvociceFailedRecords);
                }
            }

            if (failed > 0) {
                if ( !isRecordFailed && singleInvociceFailedRecords.toString().length() > 0) {
                    failedRecords.append(singleInvociceFailedRecords);
                }
                importHandler.createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = "Empty file.";
            } else if (success == 0) {
                msg = "Failed to import all the records.";
            } else if (success == total) {
                msg = "All records are imported successfully.";
            } else {
                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
                msg += (failed == 0 ? "." : " and failed to import " + failed + " record" + (failed > 1 ? "s" : "") + ".");
            }
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();

            // For saving import log
            accPurchaseOrderModuleServiceObj.saveImportLog(requestJobj, msg, total, failed, Constants.Acc_Goods_Receipt_ModuleId);

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", ImportLog.getActualFileName(fileName));
                returnObj.put("Module", Constants.Acc_Goods_Receipt_ModuleId);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }
    public String getGROStatusIDByName(String statusName, String companyID) throws AccountingException {
        String statusID = "";
        try {
            if (!StringUtil.isNullOrEmpty(statusName) && !StringUtil.isNullOrEmpty(companyID)) {
                HashMap<String, Object> filterRequestParams = new HashMap<>();
                ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                filter_names.add("company.companyID");
                filter_params.add(companyID);
                filter_names.add("masterGroup.ID");
                filter_params.add("11"); // For Geting GRO status ID
                filter_names.add("value");
                filter_params.add(statusName);
                filterRequestParams.put("filter_names", filter_names);
                filterRequestParams.put("filter_params", filter_params);

                KwlReturnObject retObj = accMasterItemsDAOobj.getMasterItems(filterRequestParams);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    MasterItem status = (MasterItem) retObj.getEntityList().get(0);
                    statusID = status.getID();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Sales Person.");
        }
        return statusID;
    }
    
    public Date getDueDateFromTermAndBillDate(String termID, Date billDate) throws ServiceException {
        Date dueDate;
        KwlReturnObject termObj = accountingHandlerDAOobj.getObject(Term.class.getName(), termID);
        Term term = (Term) termObj.getEntityList().get(0);

        Calendar cal = Calendar.getInstance();
        cal.setTime(billDate);
        cal.add(Calendar.DAY_OF_MONTH, term.getTermdays());
        dueDate = cal.getTime();

        return dueDate;
    }
    
    /**
     * Description: This method is used to update BatchD etails For SO
     * @param grBatchdetalisMap
     * @param productId
     * @param inventory
     * @param paramJobj
     * @param documentId
     * @throws JSONException
     * @throws ParseException
     * @throws SessionExpiredException
     * @throws ServiceException
     * @throws UnsupportedEncodingException 
     */
    public void updateBatchDetailsForSO(HashMap<Integer, Object[]> grBatchdetalisMap, String productId,Inventory inventory,JSONObject paramJobj, String documentId) throws JSONException, ParseException, SessionExpiredException, ServiceException, UnsupportedEncodingException {

        
      //  KwlReturnObject kmsg = null;
        DateFormat df = authHandler.getDateOnlyFormat();
        String companyid = paramJobj.optString(Constants.companyKey);;
        String userid = paramJobj.optString(Constants.useridKey);
        boolean isEdit = StringUtil.isNullOrEmpty(paramJobj.optString("isEdit",null)) ? false : Boolean.parseBoolean(paramJobj.getString("isEdit"));        
        boolean activateCRblockingWithoutStock = false;
        User user=null;
        KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
        activateCRblockingWithoutStock = extraCompanyPreferences.isActivateCRblockingWithoutStock();
        if (!StringUtil.isNullOrEmpty(userid)) {
            KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(User.class.getName(), userid);
            user = (User) jeresult.getEntityList().get(0);
        }
        // if CRBlockingWithoutStock feature is activated then procceed further
        if (activateCRblockingWithoutStock) {

            // get Pending consignment requests 
            KwlReturnObject pendingReqList = accGoodsReceiptobj.getPendingConsignmentRequests(companyid,productId);

            if (pendingReqList != null && pendingReqList.isSuccessFlag() && pendingReqList.getRecordTotalCount() > 0) {

                List<SalesOrder> consReqList = (List<SalesOrder>) pendingReqList.getEntityList();

                /*
                 * this set is used to check whether serial is locked already or
                 * not.this has to be used bcoz somewhere in code sql query is
                 * used and somewhere hql is used (so hibernatetemplates session
                 * will be different) so changes made in Objects will not get
                 * reflected due to different hibernate session.So for this ,
                 * map is used to save locked serial until commit operation is
                 * performed.
                 */
                Set usedProductBatchSerialSet = new HashSet();

                // Sales Order for loop
                for (int i = 0; i < consReqList.size(); i++) {

                    SalesOrder so = consReqList.get(i);
                    String serialNames="",batchNames="",auditMessage = "",sonumber="";
                    sonumber=so.getSalesOrderNumber();
                    Set<SalesOrderDetail> rows = so.getRows();

                    MasterItem requestType = so.getMovementType();
                    String requestTypeId = null;
                    if (requestType != null) {
                        requestTypeId = requestType.getID();
                    }
                    

                    //Sales Order Detail for loop
                    for (SalesOrderDetail soDetail : rows) {

                        try {
                            Product product = soDetail.getProduct();
                            HashMap<Integer, Object[]> BatchdetalisMap = new HashMap<Integer, Object[]>();
                            KwlReturnObject kmsg = null;
                            int batchcnt = 0;
                            int cnt = 0;
                            boolean isquantityNotavl = false;  //this flag is used to check whether serial batch quantity is avilabale 

                            //get products batch serial list that is available (ie. non-locked)
                            if (product.isIsBatchForProduct() && product.isIsSerialForProduct() && product.isIslocationforproduct() && product.isIswarehouseforproduct()) {
                                kmsg = accCommonTablesDAO.getBatchSerialDetailsforProduct(productId,product.isIsSerialForProduct(), isEdit, paramJobj);
                                List batchList = kmsg.getEntityList();
                                Iterator bitr = batchList.iterator();
                                while (bitr.hasNext()) {
                                    Object[] ObjBatchrow = (Object[]) bitr.next();
                                    BatchdetalisMap.put(cnt++, ObjBatchrow);
                                }
                            }

                            String sodetailsid = soDetail.getID();
                            double lockquantitydue = soDetail.getLockquantitydue();
                            int cntp = (int) lockquantitydue;

                            for (int j = 0; j < cntp; j++) {

                                for (int serialCnt = 0; serialCnt < cnt; serialCnt++) {

                                    Object[] objArr = BatchdetalisMap.get(serialCnt);

                                    if (objArr != null) {

                                        String serialId = objArr[0] != null ? (String) objArr[0] : "";
                                        String batchId = objArr[1] != null ? (String) objArr[1] : "";
                                        String batchname = objArr[2] != null ? (String) objArr[2] : "";
                                        String warehouse = objArr[10] != null ? (String) objArr[10] : "";
                                        String location = objArr[11] != null ? (String) objArr[11] : "";
                                        String serialname = objArr[12] != null ? (String) objArr[12] : "";

                                        Date mfgDateObj = null;
                                        Date expDateObj = null;

                                        String checkInSet = product.getID() + batchId + serialId;

                                        if (!usedProductBatchSerialSet.contains(checkInSet)) {

                                            if (objArr[3] != null) { //ie mfgdate is not null
                                                java.sql.Timestamp mfgdatets = (java.sql.Timestamp) objArr[3];
                                                mfgDateObj = new Date(mfgdatets.getTime());
                                            }
                                            if (objArr[4] != null) { //ie expdate is not null
                                                java.sql.Timestamp expdatets = (java.sql.Timestamp) objArr[4];
                                                expDateObj = new Date(expdatets.getTime());
                                            }
   
                                            if (!StringUtil.isNullOrEmpty(serialname)) {
                                                serialNames += "'" + serialname + "',";
                                            }

                                            if (!StringUtil.isNullOrEmpty(serialNames)) {
                                                serialNames = serialNames.substring(0, serialNames.length() - 1);
                                            }
                                            if (!StringUtil.isNullOrEmpty(batchname)) {
                                                batchNames += "'" + batchname + "',";
                                            }

                                            if (!StringUtil.isNullOrEmpty(batchNames)) {
                                                batchNames = batchNames.substring(0, batchNames.length() - 1);
                                            }

                                            if (!StringUtil.isNullOrEmpty(sodetailsid) && !StringUtil.isNullOrEmpty(batchId) && !StringUtil.isNullOrEmpty(serialId)) {
                                                HashMap<String, Object> documentMap = new HashMap<String, Object>();
                                                documentMap.put("quantity", "1");
                                                documentMap.put("documentid", sodetailsid);
                                                documentMap.put("transactiontype", "20");//This is SO Type Tranction   sales order moduleid

                                                if (mfgDateObj != null) {
                                                    documentMap.put("mfgdate", mfgDateObj);
                                                }
                                                if (expDateObj != null) {
                                                    documentMap.put("expdate", expDateObj);
                                                }
                                                documentMap.put("batchmapid", batchId);
                                                accCommonTablesDAO.saveBatchDocumentMapping(documentMap);

                                                HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                                                batchUpdateQtyMap.put("id", batchId);
                                                batchUpdateQtyMap.put("lockquantity", "1");
                                                accCommonTablesDAO.saveBatchAmountDue(batchUpdateQtyMap);

                                                
                                                
                                                HashMap<String, Object> serialdocumentMap = new HashMap<String, Object>();
                                                serialdocumentMap.put("quantity", "1");
                                                serialdocumentMap.put("documentid", sodetailsid);

                                                if (mfgDateObj != null) {
                                                    serialdocumentMap.put("mfgdate", mfgDateObj);
                                                }
                                                if (expDateObj != null) {
                                                    serialdocumentMap.put("expdate", expDateObj);
                                                }
                                                serialdocumentMap.put("serialmapid", serialId);
                                                serialdocumentMap.put("transactiontype", "20");//This is so Type Tranction  
                                                
                                                HashMap<String, Object> requestParams = new HashMap<String, Object>();

                                                requestParams.put("companyid", companyid);
                                                if (!StringUtil.isNullOrEmpty(userid)) {
                                                    requestParams.put("requestorid",userid);
                                                }
                                                if (!StringUtil.isNullOrEmpty(warehouse)) {
                                                    requestParams.put("warehouse", warehouse);
                                                }
                                                if (!StringUtil.isNullOrEmpty(location)) {
                                                    requestParams.put("location", location);
                                                }

                                                //code to Apply Pending Approval Rule
                                                KwlReturnObject ruleResult = accMasterItemsDAOobj.CheckRuleForPendingApproval(requestParams);
                                                Iterator itr = ruleResult.getEntityList().iterator();
                                                Set<User> approverSet = null;
                                                boolean isRequestPending = false;
                                                while (itr.hasNext()) {
                                                    ConsignmentRequestApprovalRule approvalRule = (ConsignmentRequestApprovalRule) itr.next();
                                                    if (approvalRule != null) {
                                                        KwlReturnObject res = accGoodsReceiptobj.getConsignmentRequestApproverList(approvalRule.getID());
                                                        List<User> userlist = res.getEntityList();
                                                        Set<User> users = new HashSet<User>();;
                                                        for (User us : userlist) {
                                                            users.add(us);
                                                        }
                                                        approverSet = users;
                                                        isRequestPending = true;
                                                        break;
                                                    }
                                                }
                                                if (isRequestPending) {
                                                    serialdocumentMap.put("requestpendingapproval", RequestApprovalStatus.PENDING);
                                                    serialdocumentMap.put("approver", approverSet);
                                                }
                                                
                                                accCommonTablesDAO.saveSerialDocumentMapping(serialdocumentMap);

                                                HashMap<String, Object> serialUpdateQtyMap = new HashMap<String, Object>();
                                                serialUpdateQtyMap.put("lockquantity", "1");
                                                serialUpdateQtyMap.put("id", serialId);
                                                accCommonTablesDAO.saveSerialAmountDue(serialUpdateQtyMap);

                                                String setName = product.getID() + batchId + serialId;
                                                usedProductBatchSerialSet.add(setName);

                                                batchcnt += 1;
                                                break;
                                            }
                                        }

                                    } else {
                                        isquantityNotavl = true;  //if quantity is not available then break and come out of for loop
                                        break;
                                    }

                                }

                            }
                            accCommonTablesDAO.updateSOLockQuantitydue(sodetailsid, batchcnt, companyid);
                            if (isquantityNotavl) {
                                break;
                            }

                        } catch (Exception ex) {
                            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    }
                    Map<String, Object> auditRequestParams = new HashMap<>();
                    auditRequestParams.put(Constants.reqHeader, paramJobj.getString(Constants.reqHeader));
                    auditRequestParams.put(Constants.remoteIPAddress, paramJobj.getString(Constants.remoteIPAddress));
                    auditRequestParams.put(Constants.useridKey, paramJobj.getString(Constants.useridKey));
                    auditMessage = "User " + user.getFullName() + " has assigned Stock for Request No: " + sonumber + " With Batch: " + batchNames + " and With Serials: " + serialNames + ", " + auditMessage;
                    auditTrailObj.insertAuditLog(AuditAction.STOCK_AUTOASSIGNED, auditMessage, auditRequestParams, "0");
                }

            }

        }
        
    }
    
    /**
     * Description: This method is used to Check PO used Flag
     * @param paramJobj
     * @param linkflag
     * @return
     * @throws ServiceException 
     */
    public String checkPOUsedFlag(JSONObject paramJobj, int linkflag) throws ServiceException {
        String msg = "";
        try {
            Locale locale = null;
            if (paramJobj.has("locale") && paramJobj.get("locale") != null) {
                locale = (Locale) paramJobj.get("locale");
            }
            String linkMode = ""; // When adding Purchase order link for Goods Receipt Order update link flag(2) in purchase order.
            if (paramJobj.has("fromLinkCombo") && paramJobj.get("fromLinkCombo") != null) {
                linkMode = (String) paramJobj.get("fromLinkCombo");
            }
            String linkNumberStr = "";
            if (paramJobj.has("linkNumber") && paramJobj.get("linkNumber") != null) {
                linkNumberStr = (String) paramJobj.get("linkNumber");
            }
            String[] linkNumbers = linkNumberStr.split(",");
            if (!StringUtil.isNullOrEmpty(linkMode) && linkNumbers.length > 0) {
                if (linkMode.equalsIgnoreCase("Purchase Order")) {
                    for (int i = 0; i < linkNumbers.length; i++) {
                        if (!StringUtil.isNullOrEmpty(linkNumbers[i])) {
                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), linkNumbers[i]);
                            PurchaseOrder purchaseOrder = (PurchaseOrder) rdresult.getEntityList().get(0);
                            if (purchaseOrder.getLinkflag() == linkflag) {
                                msg += purchaseOrder.getPurchaseOrderNumber() + ", ";
                            }
                        }
                    }
                    if (!StringUtil.isNullOrEmpty(msg)) {
                        String usedIn = messageSource.getMessage("acc.accPref.autoVI", null, locale);
                        if (linkflag == 2) {
                            usedIn = messageSource.getMessage("acc.accPref.autoGRO", null, locale);
                        }
                        msg = messageSource.getMessage("acc.field.SelectedPurchaseOrdersarealreadyusedin", null, locale) + " " +usedIn + ".<BR />" + msg.substring(0, msg.length() - 2);
                    }
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("checkPOUsedFlag : " + ex.getMessage(), ex);
        }
        return msg;
    }

    public void setValuesForAuditTrialForGRO(GoodsReceiptOrder oldgrd, JSONObject paramJobj, Map<String, Object> oldgreceipt, Map<String, Object> doDataMap, Map<String, Object> newAuditKey) throws SessionExpiredException {
        DateFormat df = authHandler.getDateOnlyFormat();
        try {
            // Setting values in map for oldgreceipt
            if (oldgrd != null) {
                KwlReturnObject currobretrurnlist = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), oldgrd.getCurrency().getCurrencyID());
                KWLCurrency oldcurrencyobj = (KWLCurrency) currobretrurnlist.getEntityList().get(0);
                KwlReturnObject venobretrurnlist = accountingHandlerDAOobj.getObject(Vendor.class.getName(), oldgrd.getVendor().getID());
                Vendor oldvendor = (Vendor) venobretrurnlist.getEntityList().get(0);
                if (oldgrd.getMasterAgent() != null) {
                    KwlReturnObject oldmasteritemobretrurnlist = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), oldgrd.getMasterAgent().getID());
                    MasterItem oldsalesPerson = (MasterItem) oldmasteritemobretrurnlist.getEntityList().get(0);
                    oldgreceipt.put("auditAgent", oldsalesPerson != null ? oldsalesPerson.getValue() : "");
                } else {
                    oldgreceipt.put("auditAgent", "");
                }
                newAuditKey.put("auditAgent", "Agent");

                if (oldgrd.getStatus() != null) {
                    KwlReturnObject oldmasteritemstatuslist = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), oldgrd.getStatus().getID());
                    MasterItem oldstatus = (MasterItem) oldmasteritemstatuslist.getEntityList().get(0);
                    oldgreceipt.put("auditStatus", oldstatus != null ? oldstatus.getValue() : "");
                } else {
                    oldgreceipt.put("auditStatus", "");
                }
                newAuditKey.put("auditStatus", "Status");

                oldgreceipt.put(Constants.VendorName, oldvendor.getName());
                newAuditKey.put(Constants.VendorName, "Vendor");
                oldgreceipt.put(ENTRYNUMBER, oldgrd.getGoodsReceiptOrderNumber());
                newAuditKey.put(ENTRYNUMBER, "Entry Number");
                oldgreceipt.put(Constants.CurrencyName, oldcurrencyobj.getName()); // Currency name
                newAuditKey.put(Constants.CurrencyName, "Currency");
                oldgreceipt.put(MEMO, StringUtil.isNullOrEmpty(oldgrd.getMemo()) ? "" : oldgrd.getMemo());
                newAuditKey.put(MEMO, "Memo");
                oldgreceipt.put("shipvia", StringUtil.isNullOrEmpty(oldgrd.getShipvia()) ? "" : oldgrd.getShipvia());
                newAuditKey.put("shipvia", "Ship Via");
                oldgreceipt.put("fob", StringUtil.isNullOrEmpty(oldgrd.getFob()) ? "" : oldgrd.getFob());
                newAuditKey.put("fob", "FOB");
                oldgreceipt.put("AuditOrderDate", oldgrd.getOrderDate() != null ? df.format(oldgrd.getOrderDate()) : "");
                newAuditKey.put("AuditOrderDate", "Good Receipt Date");
                oldgreceipt.put("AuditShipDate", oldgrd.getShipdate() != null ? df.format(oldgrd.getShipdate()) : "");
                newAuditKey.put("AuditShipDate", "Ship Date");
            }

            // Setting values in map for greceipthm
            if (paramJobj.has(CURRENCYID) && paramJobj.get(CURRENCYID) != null) {
                KwlReturnObject newcurrencyreturnobj = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), (String) paramJobj.get(CURRENCYID));
                KWLCurrency newcurrencyobj = (KWLCurrency) newcurrencyreturnobj.getEntityList().get(0);
                doDataMap.put(Constants.CurrencyName, newcurrencyobj.getName()); // Currencey name
            }

            String vendorId = "";
            /**
             * 'isdefaultHeaderMap' flag indicates the call coming from REST service
             */
            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)) {
                vendorId = paramJobj.optString("VendorName", null);
            } else if (paramJobj.has(VENDOR) && paramJobj.optString(VENDOR,null) != null) {
                vendorId = paramJobj.optString(VENDOR);
            }
            if (!StringUtil.isNullOrEmpty(vendorId)) {
                KwlReturnObject venobretrurnlist = accountingHandlerDAOobj.getObject(Vendor.class.getName(), vendorId);
                Vendor newvendor = (Vendor) venobretrurnlist.getEntityList().get(0);
                doDataMap.put(Constants.VendorName, newvendor.getName()); // Vendor Name
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void isGoodsReceiptOrderEditable(JSONObject paramJobj, String companyid )  throws ServiceException, AccountingException,JSONException{
        try{
            if(!StringUtil.isNullOrEmpty(paramJobj.optString("detail", null))){
                 KwlReturnObject cap = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                 Company company=(Company)cap.getEntityList().get(0);   
                 JSONArray jArr = new JSONArray(paramJobj.getString("detail"));
                  for (int i = 0; i < jArr.length(); i++) {
                        JSONObject jobj = jArr.getJSONObject(i);
                        boolean isIsBatchForProduct=jobj.optBoolean("isBatchForProduct");
                        boolean isSerialForProduct=jobj.optBoolean("isSerialForProduct");
                        String batchDetails = jobj.optString("batchdetails",null);
                        if(StringUtil.isNullOrEmpty(batchDetails)) continue;
                        JSONArray batches=new JSONArray(batchDetails);
                        for(int j=0;j<batches.length();j++){
                            JSONObject batch=batches.getJSONObject(j);
                            boolean isNewEntry=StringUtil.isNullOrEmpty(batch.optString("batchname"));
                            String quantity = batch.has("quantity")?batch.getString("quantity"):"";
                            batch.put("billid",paramJobj.getString("doid"));
                            String storeId = batch.optString("warehouse");
                            String locationId = batch.optString("location");
                            if( !batch.getString("batchname").equals(batch.getString("batch")) && !isNewEntry &&  isIsBatchForProduct && !StringUtil.isNullOrEmpty(quantity)){
                                JSONObject isEditableStatus=accGoodsReceiptobj.isGRNEditable(company, storeId, locationId, batch);
                                if (!isEditableStatus.getBoolean("isEditable")) {
                                throw new AccountingException(isEditableStatus.getString("msg"));
                            }
                            }
                        }
                  }
            }
        }catch(AccountingException ex){
            paramJobj.put("accException",true);
            throw  new AccountingException(ex.getMessage());
        }catch (JSONException ex) {
            throw ServiceException.FAILURE("isGoodsReceiptOrderEditable : " + ex.getMessage(), ex);
        }
    }

    public HashSet saveGoodsReceiptOrderRows(JSONObject paramJobj, GoodsReceiptOrder grOrder, String companyid, boolean isAutoCreateDO, String invoiceid, Map<String, String> map, Set<JournalEntryDetail> jedetails, String jeid,Date createdOn) throws ServiceException, AccountingException, SessionExpiredException, ParseException, UnsupportedEncodingException, SeqFormatException,JSONException {
        HashSet rows = new HashSet();
        String productids="";
        try {
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("detail", null))) {
                KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
                KwlReturnObject extracap = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
                ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extracap.getEntityList().get(0);
                Country country = preferences.getCompany().getCountry();
                JSONArray jArr = new JSONArray(paramJobj.getString("detail"));
                DateFormat df =authHandler.getDateOnlyFormat();
                boolean isFixedAsset = false;
                boolean isConsignment = false;
                boolean isLinkFromVi = false;
                
                if (paramJobj.has("isFixedAsset") && paramJobj.get("isFixedAsset") != null) {
                    isFixedAsset = Boolean.parseBoolean((String) paramJobj.get("isFixedAsset"));
                }
                if (paramJobj.has("isConsignment") && paramJobj.get("isConsignment") != null) {
                    isConsignment = Boolean.parseBoolean((String) paramJobj.get("isConsignment"));
                }
                if (isAutoCreateDO) {
                    if (!StringUtil.isNullOrEmpty(invoiceid)) {
                        HashMap<String, Object> invRequestParams = new HashMap<>();
                        ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                        filter_names.add("goodsReceipt.ID");
                        invRequestParams.put("filter_names", filter_names);
                        invRequestParams.put("filter_params", filter_params);
                        filter_params.clear();
                        filter_params.add(invoiceid);
                        KwlReturnObject idresult = accGoodsReceiptobj.getGoodsReceiptDetails(invRequestParams);
                        Iterator itr = idresult.getEntityList().iterator();
                        int index = 0;
                        while (itr.hasNext()) {
                            GoodsReceiptDetail row = (GoodsReceiptDetail) itr.next();
                            jArr.getJSONObject(index).put("rowid", row.getID());
                            index++;
                        }
                    }
                }
                
                Set<String> productNameRCMNotActivate = new HashSet<String>();
                List<StockMovement> stockMovementsList = new ArrayList<>();
                boolean sendForQAApproval = paramJobj.optBoolean("sendForQAApproval");
                Map<Store, InterStoreTransferRequest> storeWiseInterStoreTransferRequest = new HashMap<>();
                for (int i = 0; i < jArr.length(); i++) {
                    JSONObject jobj = jArr.getJSONObject(i);
                    HashMap<String, Object> dodDataMap = new HashMap<>();

                    if (jobj.has("srno")) {
                        dodDataMap.put("srno", jobj.getInt("srno"));
                    }

                    dodDataMap.put("companyid", companyid);
                    dodDataMap.put("doid", grOrder.getID());
                    dodDataMap.put("productid", jobj.getString("productid"));

                    if (jobj.has("priceSource") && jobj.get("priceSource") != null) {
                        dodDataMap.put("priceSource", !StringUtil.isNullOrEmpty(jobj.optString("priceSource")) ? StringUtil.DecodeText(jobj.getString("priceSource")) : "");
                    }
                    if (jobj.has("pricingbandmasterid") && jobj.get("pricingbandmasterid") != null) {
                        dodDataMap.put("pricingbandmasterid", !StringUtil.isNullOrEmpty(jobj.optString("pricingbandmasterid")) ? StringUtil.DecodeText(jobj.getString("pricingbandmasterid")) : "");
                    }

                    String linkMode = "";
                    if (paramJobj.has("fromLinkCombo") && paramJobj.get("fromLinkCombo") != null) {
                        linkMode = (String) paramJobj.get("fromLinkCombo");
                    }
                    double actquantity = jobj.getDouble("quantity");
                    String description = "";
                    double dquantity = 0;
                    double baseuomrate = 1;
                    if (jobj.has("baseuomrate") && jobj.get("baseuomrate") != null) {
                        if (!StringUtil.isNullOrEmpty(jobj.get("baseuomrate").toString())) {
                            baseuomrate = jobj.getDouble("baseuomrate");
                        }
                    }
                    if (isAutoCreateDO) {
                        dquantity = actquantity;
                        if (jobj.has("desc") && !StringUtil.isNullOrEmpty(jobj.getString("desc"))) {
                            description = StringUtil.DecodeText(jobj.optString("desc"));
                        }
                        dodDataMap.put("description", description);
                        dodDataMap.put("deliveredquantity", dquantity);
                        dodDataMap.put("baseuomdeliveredquantity", authHandler.calculateBaseUOMQuatity(dquantity, baseuomrate, companyid));
                        dodDataMap.put("partno", "");
                        if (paramJobj.has("fromLinkComboAutoDO") && paramJobj.get("fromLinkComboAutoDO") != null) {
                            linkMode = (String) paramJobj.get("fromLinkComboAutoDO");
                        }
                    } else {
                        description = StringUtil.DecodeText(jobj.optString("description"));
                        dquantity = jobj.optDouble("dquantity",0.0);
                        dodDataMap.put("description", description);
                        dodDataMap.put("deliveredquantity", dquantity);
                        dodDataMap.put("baseuomdeliveredquantity", authHandler.calculateBaseUOMQuatity(dquantity, baseuomrate, companyid));
                        dodDataMap.put("partno", jobj.optString("partno"));
                    }
                    dodDataMap.put("quantity", actquantity);
                    dodDataMap.put("baseuomrate", baseuomrate);
                    /**
                     * 'isdefaultHeaderMap' flag indicates the call coming from REST service
                     */
                    if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)) {
                        if (jobj.has("uomname")) {
                            dodDataMap.put("uomid", jobj.getString("uomname"));
                        }
                    } else {
                        if (jobj.has("uomid")) {
                            dodDataMap.put("uomid", jobj.getString("uomid"));
                        }
                    }
                    dodDataMap.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(actquantity, baseuomrate, companyid));
                    dodDataMap.put("baseuomdeliveredquantity", authHandler.calculateBaseUOMQuatity(dquantity, baseuomrate, companyid));

                    dodDataMap.put("remark", jobj.optString("remark"));
                    dodDataMap.put("reason", jobj.optString("reason"));
                    if (jobj.has("shelfLocation")) {
                        String shelfLocation = jobj.optString("shelfLocation");
                        if (!StringUtil.isNullOrEmpty("shelfLocation")) {
                                dodDataMap.put("shelfLocation", StringUtil.DecodeText(shelfLocation));
                                dodDataMap.put("shelfLocation", shelfLocation);
                        }
                    }
                        dodDataMap.put("supplierpartnumber", StringUtil.DecodeText(jobj.optString("supplierpartnumber")));
                    
                        dodDataMap.put("supplierpartnumber", jobj.optString("supplierpartnumber"));
                   

                    if (!StringUtil.isNullOrEmpty(jobj.optString("invstore"))) {
                        dodDataMap.put("invstoreid", jobj.optString("invstore"));
                    } else {
                        dodDataMap.put("invstoreid", "");
                    }
                    if (!StringUtil.isNullOrEmpty(jobj.optString("invlocation"))) {
                        dodDataMap.put("invlocationid", jobj.optString("invlocation"));
                    } else {
                        dodDataMap.put("invlocationid", "");
                    }

                    String rowtaxid = "";
                    if (!StringUtil.isNullOrEmpty(jobj.optString("prtaxid", null)) && jobj.optString("prtaxid").equalsIgnoreCase("None")) {
                        rowtaxid = null;
                    } else {
                        rowtaxid = jobj.optString("prtaxid", null);
                    }
                    if (!StringUtil.isNullOrEmpty(rowtaxid)) {
                        boolean taxExist = false;
                        KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), rowtaxid); // (Tax)session.get(Tax.class, taxid);
                        Tax rowtax = (Tax) txresult.getEntityList().get(0);
                        double rowtaxamountFromJS = jobj.optDouble("taxamount", 0);

                        if (rowtax == null) {
                            throw new AccountingException("The Tax code(s) used in this transaction has been deleted."); // messageSource.getMessage("acc.so.taxcode", null, RequestContextUtils.getLocale(request)));
                        } else {
                            dodDataMap.put("prtaxid", rowtaxid);
                            dodDataMap.put("taxamount", rowtaxamountFromJS);
                        }
                    }
                    
                    dodDataMap.put(Constants.isUserModifiedTaxAmount, jobj.optBoolean(Constants.isUserModifiedTaxAmount, false));//ERM-1085
                    /**
                     * 'isdefaultHeaderMap' flag indicates the call coming from REST service
                     */
                    if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)) {
                        if (jobj.has("discount")) {
                            dodDataMap.put("discount", jobj.optDouble("discount", 0));
                        }
                        if (jobj.has("discountType")) {
                            dodDataMap.put("discountispercent", jobj.optInt("discountType", 1));
                        }
                    } else {
                        if (jobj.has("prdiscount") && jobj.get("prdiscount") != null) {
                            dodDataMap.put("discount", jobj.optDouble("prdiscount", 0));
                        }
                        if (jobj.has("discountispercent") && jobj.get("discountispercent") != null) {
                            dodDataMap.put("discountispercent", jobj.optInt("discountispercent", 1));
                        }
                    }

                    if (jobj.has("recTermAmount")&& jobj.get("recTermAmount")!=null) {
                        dodDataMap.put("recTermAmount", jobj.get("recTermAmount"));
                    }
                    if (jobj.has("OtherTermNonTaxableAmount") && jobj.get("OtherTermNonTaxableAmount")!=null) {
                        dodDataMap.put("OtherTermNonTaxableAmount", jobj.get("OtherTermNonTaxableAmount"));
                    }

                    if (!StringUtil.isNullOrEmpty(linkMode)) {
                        if (linkMode.equalsIgnoreCase("Purchase Order") || linkMode.equalsIgnoreCase("Consignment Request") || linkMode.equalsIgnoreCase("Job Work Out Order")) {
                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrderDetail.class.getName(), (StringUtil.isNullOrEmpty(jobj.optString("linkto",null))) ? jobj.getString("rowid") : jobj.optString("savedrowid")); //for link
                            PurchaseOrderDetail sod = (PurchaseOrderDetail) rdresult.getEntityList().get(0);
                            dodDataMap.put("PurchaseOrderDetail", sod);
                        } else if (linkMode.equalsIgnoreCase("Vendor Invoice") || linkMode.equalsIgnoreCase("Purchase Invoice")) {
                            isLinkFromVi = true;
                            /*
                             * Called in two cases 1.Auto GR 2. When Linking GR
                             * with PI & in both cases Vendot Invoice details ID
                             * is coming in rowid
                             */
                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(GoodsReceiptDetail.class.getName(), jobj.getString("rowid"));
                            GoodsReceiptDetail id = (GoodsReceiptDetail) rdresult.getEntityList().get(0);
                            dodDataMap.put("GoodsReceiptDetail", id);
                        }else if(linkMode.equalsIgnoreCase("Security Gate Entry")){
                            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(SecurityGateDetails.class.getName(), (StringUtil.isNullOrEmpty(jobj.getString("linkto"))) ? jobj.getString("rowid") : jobj.getString("savedrowid")); //for link
                            SecurityGateDetails id = (SecurityGateDetails) rdresult.getEntityList().get(0);
                            dodDataMap.put("securityGateDetail", id);
                        }
                            
                    }
                    if (country != null && Constants.INDIA_COUNTRYID.equals(country.getID()) && grOrder.isRcmApplicable()) {
                        KwlReturnObject prdresult = accountingHandlerDAOobj.getObject(Product.class.getName(), jobj.optString("productid"));
                        Product product = (Product) prdresult.getEntityList().get(0);
                        if (!paramJobj.optBoolean("isUnRegisteredDealer",false) && product != null && !product.isRcmApplicable()) {
                            productNameRCMNotActivate.add(product.getName());
                            //throw new AccountingException(messageSource.getMessage("acc.common.rcmforproductnotactivated.cannotsave.goodsreceiptorder", new Object[]{product.getName()}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                        }
                    }
                    JSONObject inventoryjson = new JSONObject();
                    inventoryjson.put("productid", jobj.getString("productid"));
                    inventoryjson.put("quantity", dquantity);
                    inventoryjson.put("description", URLEncoder.encode(description, StaticValues.ENCODING));
                    /**
                     * 'isdefaultHeaderMap' flag indicates the call coming from REST service
                     */
                    if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)) {
                        if (jobj.has("uomname")) {
                            inventoryjson.put("uomid", jobj.getString("uomname"));
                        }
                    } else {
                        if (jobj.has("uomid")) {
                            inventoryjson.put("uomid", jobj.getString("uomid"));
                        }
                    }
                    if (!isConsignment) {
                        inventoryjson.put("baseuomquantity", authHandler.calculateBaseUOMQuatity(dquantity, baseuomrate, companyid));
                    }
                    inventoryjson.put("baseuomrate", baseuomrate);

                    inventoryjson.put("carryin", true);
                    inventoryjson.put("defective", false);
                    inventoryjson.put("newinventory", false);
                    inventoryjson.put("companyid", companyid);
                    if (paramJobj.has("billdate") && paramJobj.get("billdate") != null) {
                        inventoryjson.put("updatedate", df.parse((String) paramJobj.get("billdate")));
                    }

                    if (isConsignment) {
                        inventoryjson.put("venconsignuomquantity", authHandler.calculateBaseUOMQuatity(dquantity, baseuomrate, companyid));
                        inventoryjson.put("isConsignment", isConsignment);
                    }
                    KwlReturnObject invresult = accProductObj.addInventory(inventoryjson);
                    Inventory inventory = (Inventory) invresult.getEntityList().get(0);

                    dodDataMap.put("Inventory", inventory);
                    if (jobj.has("rate")) {
                        dodDataMap.put("rate", jobj.optString("rate","1"));
                    }
                    if (jobj.has("rateIncludingGst")) {
                        dodDataMap.put("rateIncludingGst", jobj.optString("rateIncludingGst","1"));
                    }
                    // GRO rows
             
                    KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Product.class.getName(), jobj.getString("productid"));
                    Product product = (Product) txresult.getEntityList().get(0);
                    if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD) && !StringUtil.isNullOrEmpty(jeid)) {
                        if (!(product.getProducttype().getID().equals(Producttype.SERVICE) || product.getProducttype().getID().equals(Producttype.NON_INVENTORY_PART))) {
                            if (product != null && product.getInventoryAccount() != null && product.getPurchaseAccount() != null && jobj.has("rate")) {
                                // Inventory Account
                                JSONObject jedjson = new JSONObject();
                                jedjson.put("srno", jedetails.size() + 1);
                                jedjson.put("companyid", companyid);
                                jedjson.put("amount", jobj.optDouble("rate", 0.0) * dquantity);
                                jedjson.put("accountid", product.getInventoryAccount() != null ? product.getInventoryAccount().getID() : "");
                                jedjson.put("debit", true);
                                jedjson.put("jeid", jeid);
                                KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                dodDataMap.put("inventoryjedetailid", jed.getID());
                                jedetails.add(jed);
                                // Accrued Purchase Account
                                jedjson = new JSONObject();
                                jedjson.put("srno", jedetails.size() + 1);
                                jedjson.put("companyid", companyid);
                                jedjson.put("amount", jobj.optDouble("rate", 0.0) * dquantity);
                                jedjson.put("accountid", product.getPurchaseAccount() != null ? product.getPurchaseAccount().getID() : "");
                                jedjson.put("debit", false);
                                jedjson.put("jeid", jeid);
                                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                dodDataMap.put("purchasesjedetailid", jed.getID());
                                jedetails.add(jed);
                            }
                        }
                    }

                    if (!StringUtil.isNullOrEmpty(jobj.optString("sourcedeliveryorderdetailsid",null))) {
                        dodDataMap.put("sourcedeliveryorderdetailsid", jobj.optString("sourcedeliveryorderdetailsid"));
                    } 
                    KwlReturnObject result = accGoodsReceiptobj.saveGoodsReceiptOrderDetails(dodDataMap);
                    GoodsReceiptOrderDetails row = (GoodsReceiptOrderDetails) result.getEntityList().get(0);
                    if (jobj.has("batchdetails") && jobj.getString("batchdetails") != null) {
                        String batchDetails = jobj.getString("batchdetails");
                        if (!StringUtil.isNullOrEmpty(batchDetails)) {
                            /**
                             * 'isdefaultHeaderMap' flag indicates the call coming from REST service
                             */
                            if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)&& product != null && product.isIsBatchForProduct() && product.isIsSerialForProduct()) {
                                JSONObject jsobj = accProductModuleService.manipulateBatchDetailsforMobileApps(batchDetails, jobj.getString(Constants.productid), paramJobj);
                                if (jsobj.get("batchdetails") != null && !StringUtil.isNullOrEmpty(jsobj.optString("batchdetails", null))) {
                                    batchDetails = jsobj.getString("batchdetails");
                                }
                            }
                            JSONArray batchDetailsJsonArray = new JSONArray(batchDetails);
                            boolean isOnlyBatchForProduct = product.isIsBatchForProduct() && !product.isIsSerialForProduct() && !product.isIsrowforproduct() && !product.isIsrackforproduct() && !product.isIsbinforproduct();
                            if (isOnlyBatchForProduct && batchDetailsJsonArray.length() != 0) {
                                batchDetailsJsonArray = StringUtil.sortJsonArray(batchDetailsJsonArray, "batch", false, true);
                                JSONObject prev_batchDetail = batchDetailsJsonArray.getJSONObject(0);
                                String prev_warehouseid = prev_batchDetail.optString("warehouse");
                                String prev_locationid = prev_batchDetail.optString("location");
                                String prev_batch = prev_batchDetail.optString("batch");
                                JSONArray newBatchDetailsJsonArray = new JSONArray();
                                JSONObject newBatchDetail = prev_batchDetail;
                                double quantity = 0d;
                                for (int j = 1; j < batchDetailsJsonArray.length(); j++) {
                                    JSONObject batchDetail = batchDetailsJsonArray.getJSONObject(j);
                                    if (StringUtil.equal(prev_warehouseid, batchDetail.optString("warehouse")) && StringUtil.equal(prev_locationid, batchDetail.optString("location")) && StringUtil.equal(prev_batch, batchDetail.optString("batch"))) {
                                        quantity = newBatchDetail.optDouble("quantity") + batchDetail.optDouble("quantity");
                                        newBatchDetail = batchDetail;
                                        newBatchDetail.put("quantity", quantity);
                                    } else {
                                        newBatchDetailsJsonArray.put(newBatchDetail);
                                        newBatchDetail = batchDetail;
                                        prev_warehouseid = batchDetail.optString("warehouse");
                                        prev_locationid = batchDetail.optString("location");
                                        prev_batch = batchDetail.optString("batch");
                                    }
                                }
                                if (newBatchDetail.length() != 0) {
                                    newBatchDetailsJsonArray.put(newBatchDetail);
                                }
                                batchDetails = newBatchDetailsJsonArray.toString();
                            }
                            saveGRNNewBatch(batchDetails, inventory, paramJobj, row, stockMovementsList, createdOn, storeWiseInterStoreTransferRequest);
                        }
                    }
                    String customfield = jobj.optString("customfield",null);
                    if (!StringUtil.isNullOrEmpty(customfield)) {
                        HashMap<String, Object> GROMap = new HashMap<>();
                        JSONArray jcustomarray = new JSONArray(customfield);
                        /**
                         * 'isdefaultHeaderMap' flag indicates the call coming from REST service
                         */
                        if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)) {
                            jcustomarray = fieldDataManagercntrl.GetJsonArrayUsingFieldIds(jcustomarray, Constants.Acc_Goods_Receipt_ModuleId, companyid, false);
                        }
                        if (isAutoCreateDO) {
                            jcustomarray = fieldDataManagercntrl.getComboValueIdsForCurrentModule(jcustomarray, Constants.Acc_Goods_Receipt_ModuleId, companyid, 1); // 1 = for line item
                        }
                        HashMap<String, Object> customrequestParams = new HashMap<>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", "GoodsReceiptOrderDetails");
                        customrequestParams.put("moduleprimarykey", "GoodsReceiptOrderDetailsId");
                        customrequestParams.put("modulerecid", row.getID());
                        customrequestParams.put("moduleid", isFixedAsset ? Constants.Acc_FixedAssets_GoodsReceipt_ModuleId : isConsignment ? Constants.Acc_Consignment_GoodsReceiptOrder_ModuleId : Constants.Acc_Goods_Receipt_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        GROMap.put("id", row.getID());
                        customrequestParams.put("customdataclasspath", Constants.Acc_GoodsReceiptOrderDetailsCustomDate_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            GROMap.put("grDetailsordercustomdataref", row.getID());
                            accGoodsReceiptobj.updateGRDetailsCustomData(GROMap);
                        }
                    }
                    // Add Custom fields details for Product
                    if (!StringUtil.isNullOrEmpty(jobj.optString("productcustomfield", ""))) {
                        JSONArray jcustomarray = new JSONArray(jobj.optString("productcustomfield", "[]"));
                        /**
                         * 'isdefaultHeaderMap' flag indicates the call coming from REST service
                         */
                        if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)) {
                            jcustomarray = fieldDataManagercntrl.GetJsonArrayUsingFieldIds(jcustomarray, Constants.Acc_Product_Master_ModuleId, companyid, true);
                        }
                        HashMap<String, Object> grMap = new HashMap<>();
                        HashMap<String, Object> customrequestParams = new HashMap<>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", "GrProductCustomData");
                        customrequestParams.put("moduleprimarykey", "GrDetailID");
                        customrequestParams.put("modulerecid", row.getID());
                        customrequestParams.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        grMap.put("id", row.getID());
                        customrequestParams.put("customdataclasspath", Constants.Acc_GRODetail_Productcustom_data_classpath);   
                        /*
                         * Rich Text Area is put in json if User have not selected any data for this field. ERP-ERP-37624
                         */
                        customrequestParams.put("productIdForRichRext", row.getInventory().getProduct().getID());                    
                        fieldDataManagercntrl.setRichTextAreaForProduct(customrequestParams);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            grMap.put("grodetailproductcustomdataref", row.getID());
                            accGoodsReceiptobj.updateGRDetailsProductCustomData(grMap);
                        }
                    }
                    if (extraCompanyPreferences.getLineLevelTermFlag()==1) {
                        /**
                         * Save GST History Customer/Vendor data.
                         */
                        jobj.put("detaildocid", row.getID());
                        jobj.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
                        fieldDataManagercntrl.createRequestMapToSaveTaxClassHistory(jobj);
                    }
                    // Save VAT - For Indain Company Case...
                    if (extraCompanyPreferences.getLineLevelTermFlag()==1 && jobj.has("LineTermdetails") && !StringUtil.isNullOrEmpty((String) jobj.optString("LineTermdetails"))) {
                        if (!StringUtil.isNullOrEmpty(jobj.optString("LineTermdetails", ""))) {
                            JSONArray termdetails = new JSONArray(StringUtil.DecodeText((String) jobj.optString("LineTermdetails", "[]")));
                            HashMap<String, Object> grdMap = new HashMap<>();
                            String userid = "";
                            if (paramJobj.has("userid") && paramJobj.get("userid") != null) {
                                userid = (String) paramJobj.get("userid");
                            }
                            for (int cnt = 0; cnt < termdetails.length(); cnt++) {
                                JSONObject temp = termdetails.getJSONObject(cnt);
                                HashMap<String, Object> termMap = new HashMap<>();
                                termMap.put("term", temp.getString("termid"));
                                termMap.put("termamount", StringUtil.isNullOrEmpty(temp.getString("termamount")) ? "0.0" : Double.parseDouble(temp.getString("termamount")));
                                double percentage = 0;
                                if (!StringUtil.isNullOrEmpty(temp.getString("termpercentage"))) {
                                    percentage = Double.parseDouble(temp.getString("termpercentage"));
                                }
                                double purchaseValueOrSaleValue = 0;
                                double deductionOrAbatementPercent = 0;
                                if (!StringUtil.isNullOrEmpty(temp.getString("purchasevalueorsalevalue"))) {
                                    purchaseValueOrSaleValue = Double.parseDouble(temp.getString("purchasevalueorsalevalue"));
                                }
                                if (!StringUtil.isNullOrEmpty(temp.getString("deductionorabatementpercent"))) {
                                    deductionOrAbatementPercent = Double.parseDouble(temp.getString("deductionorabatementpercent"));
                                }
                                termMap.put("termpercentage", percentage);
                                termMap.put("purchasevalueorsalevalue", purchaseValueOrSaleValue);
                                termMap.put("deductionorabatementpercent", deductionOrAbatementPercent);
                                termMap.put("assessablevalue", temp.has("assessablevalue") && !StringUtil.isNullOrEmpty(temp.getString("assessablevalue")) ? Double.parseDouble(temp.getString("assessablevalue")) : 0.0);
                                if (temp.has("taxtype") && !StringUtil.isNullOrEmpty(temp.getString("taxtype"))) {
                                    termMap.put("taxtype", temp.getInt("taxtype"));
                                    if (temp.has("taxvalue") && !StringUtil.isNullOrEmpty(temp.getString("taxvalue"))) {
                                        if (temp.getInt("taxtype") == 0) { // If Flat
                                            termMap.put("termamount", temp.getDouble("termamount"));
                                        } else { // Else Percentage
                                            termMap.put("termpercentage", temp.getDouble("taxvalue"));
                                        }
                                    }
                                }
                                /**
                                 * ERP-32829 
                                 */
                                termMap.put("isDefault", temp.optString("isDefault", "false"));
                                termMap.put("productentitytermid", temp.optString("productentitytermid"));
                                termMap.put("creationdate", new Date());
                                termMap.put("userid", userid);
                                termMap.put("gordetails", row.getID());
                                temp.put("gordetails", row.getID());
                                accGoodsReceiptobj.saveOrUpdateGRODetailsTermsMap(termMap);
                            }
                        }
                    }
                    rows.add(row);
                    // add asset Details 
                    if (isFixedAsset) {
                        Map<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
                        if (paramJobj.has("transType")) {
                            requestParams.put("transType", paramJobj.optString("transType", "0"));
                        }
                        if (paramJobj.has("externalcurrencyrate") && paramJobj.optDouble("externalcurrencyrate", 0) != 0.0) {
                            requestParams.put("externalcurrencyrate", paramJobj.optDouble("externalcurrencyrate",1));
                        }
                        Set<AssetDetails> assetDetailsSet = saveAssetDetails(requestParams, jobj.getString("productid"), jobj.getString("assetDetails"), true, false, isLinkFromVi, false, false, false, map);
                        Set<AssetInvoiceDetailMapping> assetInvoiceDetailMappings = saveAssetInvoiceDetailMapping(row.getID(), assetDetailsSet, companyid, Constants.Acc_Goods_Receipt_ModuleId);
                    }
                    
                    /**
                     * Save Stock OUT for JOB Work Out Order case
                     */
                    boolean isJobWorkOutProd = jobj.optBoolean("isJobWorkOutProd");
                    if (isJobWorkOutProd && extraCompanyPreferences.isJobWorkOutFlow() && !(grOrder.isIsconsignment() || grOrder.isFixedAssetGRO())) {
                        dodDataMap.clear();
                        dodDataMap.put("grod", row);
                        dodDataMap.put("locale", cap);
                        saveStockOut(jobj, dodDataMap);
                        productids+=jobj.optString("productids");
                        productids+=jobj.optString("productid")+",";
                    }
                    HashMap<String, Object> paramMap = new HashMap();
                    paramMap.put("id",jobj.optString("productid"));
                    Object productisQAEnable = kwlCommonTablesDAOObj.getRequestedObjectFields(Product.class, new String[]{"qaenable"}, paramMap);
                    boolean isQAEnable = productisQAEnable != null ? (boolean) productisQAEnable : false;
                    if (sendForQAApproval && isQAEnable) {
                        if (extraCompanyPreferences.isActivateInventoryTab() && !stockMovementsList.isEmpty()) {
                                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.INFO, " Stock Movement" + stockMovementsList.get(0).getCreatedOn());
                                stockMovementService.addOrUpdateBulkStockMovement(grOrder.getCompany(), grOrder.getID(), stockMovementsList, false);
                        }
                        stockMovementsList.clear();
                        /**
                         * We have created map for storing store wise separate
                         * IST request. All IST request will have same
                         * transaction number.
                         */
                        for (Entry<Store, InterStoreTransferRequest> entrySet : storeWiseInterStoreTransferRequest.entrySet()) {
                            InterStoreTransferRequest value = entrySet.getValue();
                            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.INFO, "IST createdOn: " + value.getCreatedOn());
                            Map<String, Object> requestParams = new HashMap<>();
                            requestParams.put(Constants.companyid, companyid);
                            requestParams.put("grodid", row.getID());
                            requestParams.put("actualquantity", value.getAcceptedQty());
                            requestParams.put("quantitydue", value.getAcceptedQty());
                            double rate = row.getRate();
                            double spotRate = grOrder.getExternalCurrencyRate();
                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rate, grOrder.getCurrency().getCurrencyID(), grOrder.getOrderDate(), spotRate);
                            double rateInBase = (Double) crresult.getEntityList().get(0);
                            requestParams.put("rateInGRN", rateInBase);
                            requestParams.put(Constants.moduleid, Constants.Acc_InterStore_ModuleId);
                            istService.addInterStoreTransferRequest(row.getGrOrder().getCreatedby(), value, false, requestParams);
                            istService.acceptInterStoreTransferRequest(row.getGrOrder().getCreatedby(), value);
                        }
                        storeWiseInterStoreTransferRequest.clear();
                    }else  if(sendForQAApproval && !isQAEnable){
                        if (extraCompanyPreferences.isActivateInventoryTab() && !stockMovementsList.isEmpty()) {
                              Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.INFO, " Stock Movement" + stockMovementsList.get(0).getCreatedOn());
                              stockMovementService.addOrUpdateBulkStockMovement(grOrder.getCompany(), grOrder.getID(), stockMovementsList, false);
                        }
                        stockMovementsList.clear();
                    }
                }
                if (country != null && Constants.INDIA_COUNTRYID.equals(country.getID()) && grOrder.isRcmApplicable()) {
                    if (!paramJobj.optBoolean("isUnRegisteredDealer",false) && !productNameRCMNotActivate.isEmpty()) {
                        throw new AccountingException(messageSource.getMessage("acc.common.rcmforproductnotactivated.cannotsave.goodsreceiptorder", new Object[]{StringUtils.join(productNameRCMNotActivate, ", ")}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    }
                }
                if (!sendForQAApproval) {
                    if (extraCompanyPreferences != null && extraCompanyPreferences.isActivateInventoryTab() && !stockMovementsList.isEmpty()) {
                        stockMovementService.addOrUpdateBulkStockMovement(grOrder.getCompany(), grOrder.getID(), stockMovementsList);
                    }
                }
            }
            if(!StringUtil.isNullOrEmpty(productids) && productids.length()>1){
                paramJobj.put("productIds", productids.substring(0, productids.length()-1));
            }
        }catch(AccountingException ex){
            paramJobj.put("accException",true);
            throw  new AccountingException(ex.getMessage());
        }catch (InventoryException | JSONException ex) {
            throw ServiceException.FAILURE("saveGoodsReceiptOrderRows : " + ex.getMessage(), ex);
        }
        return rows;
    }
    /**
     * 
     * @param jobj
     * @param map
     * @Desc : Save Stock out if Job order GRN
     * @throws ServiceException
     * @throws SeqFormatException
     * @throws AccountingException
     * @throws JSONException 
     */
    private void saveStockOut(JSONObject jobj, Map<String, Object> map) throws ServiceException, SeqFormatException, AccountingException, JSONException {
        GoodsReceiptOrderDetails goodsReceiptOrderDetails = (GoodsReceiptOrderDetails) map.get("grod");
        User user = goodsReceiptOrderDetails.getGrOrder().getCreatedby();
//        Locale locale = (Locale) map.get("locale");
        JSONArray jSONArray = new JSONArray((String)jobj.opt("joborderdetails"));
        String seqNo = "";
        String productids = "";
        Company company = goodsReceiptOrderDetails.getCompany();
        Date businessDate = goodsReceiptOrderDetails.getGrOrder().getOrderDate();
        String groNumber = goodsReceiptOrderDetails.getGrOrder().getGoodsReceiptOrderNumber();
        SeqFormat seqFormat = null;
        seqFormat = seqService.getDefaultSeqFormat(goodsReceiptOrderDetails.getCompany(), ModuleConst.STOCK_ADJUSTMENT);
        seqNo = seqFormat != null ? seqService.getNextFormatedSeqNumber(seqFormat) : goodsReceiptOrderDetails.getGrOrder().getGoodsReceiptOrderNumber();
        Map<String, StockAdjustment> productMap = new HashMap();
        Set<StockAdjustmentDetail> adjustmentDetailSet = new HashSet<StockAdjustmentDetail>();
        for (int i = 0; i < jSONArray.length(); i++) {
            JSONObject jSONObject = jSONArray.optJSONObject(i);
            String productid = jSONObject.optString("productid");
            double qty = jSONObject.optDouble("quantity");
      
            StockAdjustment createStockAdjustment = null;
            KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Product.class.getName(), productid);
            Product product = (Product) custresult.getEntityList().get(0);
            double productPrice = stockService.getProductPurchasePrice(product, goodsReceiptOrderDetails.getGrOrder().getOrderDate());
            Store fromStore = null;
            String istId = jSONObject.optString("istId");
            KwlReturnObject custresult1 = accountingHandlerDAOobj.getObject(InterStoreTransferRequest.class.getName(), istId);
            InterStoreTransferRequest transferRequest = (InterStoreTransferRequest) custresult1.getEntityList().get(0);

                /**
                 * For new product Create Object of Stock out
                 */
                    /**
                     * if last product
                     */
                    adjustmentDetailSet = new HashSet<StockAdjustmentDetail>();
                    
                    fromStore = transferRequest.getToStore();//storeService.getStoreById(storeId);
                    UnitOfMeasure uom = transferRequest.getUom();//UnitOfMeasure) jeresult.getEntityList().get(0);

                    createStockAdjustment = new StockAdjustment(product, fromStore, uom, -qty, productPrice, goodsReceiptOrderDetails.getGrOrder().getOrderDate());
                    createStockAdjustment.setAdjustmentType("Stock Out");
                    createStockAdjustment.setTransactionNo(seqNo);
                    createStockAdjustment.setMemo("Stock OUT for GRN: " + groNumber);
                    createStockAdjustment.setRemark("Stock OUT for GRN: " + groNumber);
                    createStockAdjustment.setReason("");
                    createStockAdjustment.setCompany(company);
                    createStockAdjustment.setCreatedOn(businessDate);
                    createStockAdjustment.setCreationdate(businessDate.getTime());
                    createStockAdjustment.setTransactionNo(seqNo);
                    createStockAdjustment.setTransactionModule(TransactionModule.STOCK_ADJUSTMENT);
                    /**
                     * Get Batch Details
                     */
                    Location location = null;
                    StoreMaster row = null;
                    StoreMaster rack = null;
                    StoreMaster bin = null;

                    JSONArray challanArr = new JSONArray((String)jSONObject.opt("batchdetails"));
                    

                    for (int ch = 0; ch < challanArr.length(); ch++) {
                        JSONObject chObj = challanArr.optJSONObject(ch);
                        String locationid = chObj.optString("location");
                        double quantity = chObj.optDouble("quantity");
                        KwlReturnObject jeresult = accountingHandlerDAOobj.getObject(Location.class.getName(), locationid);
                        location = (Location) jeresult.getEntityList().get(0);
                        String batchName = chObj.optString("batchName");
                        String serialNames = chObj.optString("serialno");
                        String rowid = chObj.optString("row");
                        jeresult = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), rowid);
                        if (jeresult != null && jeresult.getEntityList().size() > 0 && jeresult.getEntityList().get(0) != null) {
                            row = (StoreMaster) jeresult.getEntityList().get(0);
                        }

                        String rackid = chObj.optString("rack");
                        jeresult = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), rackid);
                        if (jeresult != null && jeresult.getEntityList().size() > 0 && jeresult.getEntityList().get(0) != null) {
                            rack = (StoreMaster) jeresult.getEntityList().get(0);
                        }

                        String binid = chObj.optString("bin");
                        jeresult = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), binid);
                        if (jeresult != null && jeresult.getEntityList().size() > 0 && jeresult.getEntityList().get(0) != null) {
                            bin = (StoreMaster) jeresult.getEntityList().get(0);
                        }

                        StockAdjustmentDetail stockAdjustmentDetail = new StockAdjustmentDetail();
                        stockAdjustmentDetail.setBatchName(batchName);
                        stockAdjustmentDetail.setBin(bin);
                        stockAdjustmentDetail.setRack(rack);
                        stockAdjustmentDetail.setRow(row);
                        stockAdjustmentDetail.setLocation(location);
                        stockAdjustmentDetail.setFinalQuantity(qty);
                        stockAdjustmentDetail.setQuantity(quantity);
                        stockAdjustmentDetail.setFinalSerialNames(serialNames);
                        stockAdjustmentDetail.setSerialNames(serialNames);
                        stockAdjustmentDetail.setStockAdjustment(createStockAdjustment);
                        adjustmentDetailSet.add(stockAdjustmentDetail);
                    }
                    /*
                     Save Stock out for every new product (Exclude first and include last Iteration)
                     */
                    createStockAdjustment.setStockAdjustmentDetail(adjustmentDetailSet);
                    KwlReturnObject cap1 = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), company.getCompanyID());
                    ExtraCompanyPreferences extarPreferences = (ExtraCompanyPreferences) cap1.getEntityList().get(0);
                    cap1 = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), company.getCompanyID());
                    CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap1.getEntityList().get(0);

                    JournalEntry inventoryJE = null;
                    if (extarPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD) {
                        if (product.getInventoryAccount() != null) {
                            productids+=productid+",";
                            String companyId = company.getCompanyID();
                            Map<String, Object> JEFormatParams = new HashMap<>();
                            JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                            JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
                            JEFormatParams.put("companyid", company.getCompanyID());
                            JEFormatParams.put("isdefaultFormat", true);
                            KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                            if (kwlObj.getEntityList() != null && !kwlObj.getEntityList().isEmpty()) {
                                SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                                if (format != null) {
                                    Map<String, Object> jeDataMap = new HashMap<>();//AccountingManager.getGlobalParams(request);
                                    Map<String, Object> seqNumberMap = new HashMap<>();
                                    seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyId, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, businessDate);
                                    jeDataMap.put("entrynumber", (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER));
                                    jeDataMap.put("autogenerated", true);
                                    jeDataMap.put(Constants.SEQFORMAT, format.getID());
                                    jeDataMap.put(Constants.SEQNUMBER, (String) seqNumberMap.get(Constants.SEQNUMBER));
                                    jeDataMap.put(Constants.DATEPREFIX, (String) seqNumberMap.get(Constants.DATEPREFIX));
                                    jeDataMap.put(Constants.DATEAFTERPREFIX, (String) seqNumberMap.get(Constants.DATEAFTERPREFIX));
                                    jeDataMap.put(Constants.DATESUFFIX, (String) seqNumberMap.get(Constants.DATESUFFIX));
                                    jeDataMap.put("entrydate", businessDate);
                                    jeDataMap.put("companyid", companyId);
                                    jeDataMap.put("memo", "Stock Adjustment JE for " + product.getName());
                                    jeDataMap.put("createdby", goodsReceiptOrderDetails.getGrOrder().getCreatedby().getUserID());
                                    jeDataMap.put("currencyid", goodsReceiptOrderDetails.getGrOrder().getCurrency().getCurrencyID());
                                    jeDataMap.put("transactionModuleid", Constants.Inventory_Stock_Adjustment_ModuleId);
                                    KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap); // Create Journal entry without JEdetails
                                    inventoryJE = (JournalEntry) jeresult.getEntityList().get(0);
                                    createStockAdjustment.setInventoryJE(inventoryJE);
                                    HashSet jeDetails = new HashSet();
                                    JSONObject jedjson = new JSONObject();
                                    jedjson.put("srno", jeDetails.size() + 1);
                                    jedjson.put("companyid", companyId);
                                    jedjson.put("amount", authHandler.round(((qty * productPrice) * (-1)), companyId));
                                    jedjson.put("debit", false);
                                    jedjson.put("accountid", product.getInventoryAccount().getID());
                                    jedjson.put("jeid", inventoryJE.getID());
                                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                    JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                    jeDetails.add(jed);
                                    jedjson = new JSONObject();
                                    jedjson.put("srno", jeDetails.size() + 1);
                                    jedjson.put("companyid", companyId);
                                    jedjson.put("amount", authHandler.round(((qty * productPrice) * (-1)), companyId));
                                    jedjson.put("accountid", product.getStockAdjustmentAccount().getID());
                                    jedjson.put("debit", true);
                                    jedjson.put("jeid", inventoryJE.getID());
                                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                    jeDetails.add(jed);
                                    inventoryJE.setDetails(jeDetails);
                                    accJournalEntryobj.saveJournalEntryDetailsSet(jeDetails);
                                } else {
                                    throw new AccountingException("No default Sequence Format found. Please add a default format for Journal Entry.");
                                }
                            } else {
                                throw new AccountingException("No default Sequence Format found. Please add a default format for Journal Entry.");
                            }
                        } else {
                            throw new AccountingException("Please set inventory account for product: " + product.getProductid());
                        }
                    }
                    HashMap<String, Object> requestparams = new HashMap<>();
                    requestparams.put("userid", user.getUserID());
//                    requestparams.put("locale", locale);
                    stockAdjustmentService.requestStockAdjustment(user, createStockAdjustment, false, false, null, requestparams);
                    if (inventoryJE != null) {
                        inventoryJE.setTransactionId(createStockAdjustment.getId());
                    }
                    String auditMessage = "";
                    String StUom = createStockAdjustment.getUom() != null ? createStockAdjustment.getUom().getNameEmptyforNA() : "";
                    auditMessage = "(Product :" + product.getProductid() + ", Quantity :" + (-qty) + " " + StUom + ", AdjustmentType : " + "Stock Out " + ")";
                    auditMessage = "User " + user.getFullName() + " has created Stock Adjustment: " + seqNo + " for Store: " + fromStore.getAbbreviation() + " " + auditMessage;
                    auditTrailObj.insertAuditLog(AuditAction.STOCK_ADJUSTMENT_ADDED, auditMessage, requestparams, "0");
            
            /**
             * Save GRD-InterStore-StockOut Mapping
             */
            Map<String,Object>mappingParams=new HashMap();
            mappingParams.put("grd", goodsReceiptOrderDetails);
            mappingParams.put("stockout", createStockAdjustment);
            mappingParams.put("ist", transferRequest);
            mappingParams.put("quantity",jSONObject.optDouble("quantity"));
            accGoodsReceiptobj.saveGRODetailsStockOutISTMapping(mappingParams);
        }
        seqService.updateSeqNumber(seqFormat);
        jobj.put("productids", productids);
    }

    private double getProductPrice(JSONObject paramJobj, String rowid) throws ServiceException {
        double productPrice = 0.0;
        try {
            String linkMode = "";
            if (paramJobj.has("fromLinkCombo") && paramJobj.get("fromLinkCombo") != null) {
                linkMode = (String) paramJobj.get("fromLinkCombo");
            }
            if (!StringUtil.isNullOrEmpty(linkMode) && !StringUtil.isNullOrEmpty(rowid)) {
                if (linkMode.equalsIgnoreCase("Purchase Order")) {
                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrderDetail.class.getName(), rowid);
                    PurchaseOrderDetail purchaseOrderDetail = (PurchaseOrderDetail) rdresult.getEntityList().get(0);
                    if (purchaseOrderDetail != null) {
                        productPrice = purchaseOrderDetail.getRate();
                    }
                } else if (linkMode.equalsIgnoreCase("Vendor Invoice") || linkMode.equalsIgnoreCase("Purchase Invoice")) {
                    KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(GoodsReceiptDetail.class.getName(), rowid);
                    GoodsReceiptDetail goodsReceiptDetail = (GoodsReceiptDetail) rdresult.getEntityList().get(0);
                    if (goodsReceiptDetail != null) {
                        productPrice = goodsReceiptDetail.getRate();
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accGoodsReceiptController.getProductPrice() -: " + ex.getMessage(), ex);
        }
        return productPrice;
    }

    private void sendMailOnGRNCreationUpdation(String companyId, GoodsReceiptOrder grOrder, boolean isEdit, String[] toEmailIds, String GRNNumber) throws ServiceException {
        String htmlTextC = "", subject = "";
        String GRNCreatorName = grOrder.getCreatedby().getFullName();

        htmlTextC += "<br/>Hi,<br/>";
        if (!isEdit) {
            htmlTextC += "<br/>User <b>" + GRNCreatorName + "</b> has created new Goods Receipt Order  <b>" + GRNNumber + "</b>.<br/>";
        } else {
            htmlTextC += "<br/>User <b>" + GRNCreatorName + "</b> has edited Goods Receipt Order <b>" + GRNNumber + "</b>.<br/>";
        }

        KwlReturnObject result = accountingHandlerDAOobj.getNotifications(companyId);
        List<NotificationRules> list = result.getEntityList();
        Iterator<NotificationRules> nrItr = list.iterator();
        while (nrItr.hasNext()) {
            NotificationRules nr = nrItr.next();
            if (nr != null && nr.getModuleId() == 202 && Integer.parseInt(nr.getFieldid()) == 32) {
                String toUserListStr = StringUtil.join(",", toEmailIds);

                if (nr.isMailToStoreManager()) {
                    List storeManagerList = accGoodsReceiptobj.getStoreManagerListByGROrderId(companyId, grOrder.getID());
                    Set<User> managerSet = new HashSet();
                    Iterator itr1 = storeManagerList.iterator();
                    while (itr1.hasNext()) {
                        Object str = itr1.next();
                        KwlReturnObject resStore = accountingHandlerDAOobj.getObject(Store.class.getName(), (str != null ? (String) str : ""));
                        Store store = (Store) resStore.getEntityList().get(0);
                        if (store != null) {
                            managerSet = store.getStoreManagerSet();
                            Iterator itr = managerSet.iterator();
                            while (itr.hasNext()) {
                                User user = (User) itr.next();
                                if (user != null && !StringUtil.isNullOrEmpty(user.getEmailID())) {
                                    if (StringUtil.isNullOrEmpty(toUserListStr)) {
                                        toUserListStr += user.getEmailID();
                                    } else {
                                        toUserListStr += "," + user.getEmailID();
                                    }
                                }
                            }
                        }
                    }
                }

                toEmailIds = toUserListStr.split(",");

                subject = nr.getMailsubject();
                htmlTextC = nr.getMailcontent();

                subject = subject.replaceAll("#Vendor_Alias#", grOrder.getVendor().getAliasname());
                subject = subject.replaceAll("#Document_Number#", GRNNumber);
                htmlTextC = htmlTextC.replaceAll("#Document_Number#", GRNNumber);
                htmlTextC = htmlTextC.replaceAll("#User_Name#", GRNCreatorName);

                if (isEdit) {
                    subject = subject.replaceAll("Creation", "updation");
                    subject = subject.replaceAll("generation", "updation");
                    htmlTextC = htmlTextC.replaceAll("added", "updated");
                    htmlTextC = htmlTextC.replaceAll("created", "updated");
                }
                break;
            }
        }
        accountingHandlerDAOobj.sendTransactionEmails(toEmailIds, "", subject, htmlTextC, htmlTextC, companyId);
    }

    @Override
    public void updatePIisOpenAndLinkingWithGR(String linking) throws ServiceException {
        try {

            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), linking);
            GoodsReceipt goodsReceipt = (GoodsReceipt) rdresult.getEntityList().get(0);
            Set<GoodsReceiptDetail> orderDetail = (Set<GoodsReceiptDetail>) goodsReceipt.getRows();
            String status1 = getInvoiceStatusForGRO(orderDetail);
            HashMap hMap = new HashMap();
            hMap.put("goodsReceipt", goodsReceipt);
            if (status1.equals("Open")) {
                hMap.put("isOpenInGR", true);
            } else {
                hMap.put("isOpenInGR", false);
            }
            accGoodsReceiptobj.updatePILinkflag(hMap);

        } catch (Exception ex) {
            throw ServiceException.FAILURE("updatePOisOpenAndLinkingWithGR : " + ex.getMessage(), ex);
        }
    }

    /*
     * Function to fetch Invoice status for Goods recipt Order. Checked if
     * delivery order of all invoice quantities is prepared.
     */
    public String getInvoiceStatusForGRO(Set<GoodsReceiptDetail> ivDetail) throws ServiceException {
        Iterator ite = ivDetail.iterator();
        String result = "Closed";
        while (ite.hasNext()) {
            GoodsReceiptDetail iDetail = (GoodsReceiptDetail) ite.next();
            KwlReturnObject idresult = accGoodsReceiptobj.getGDOIDFromVendorInvoiceDetails(iDetail.getID());
            List list = idresult.getEntityList();
            Iterator ite1 = list.iterator();
            double qua = 0;
            while (ite1.hasNext()) {
                GoodsReceiptOrderDetails ge = (GoodsReceiptOrderDetails) ite1.next();
                qua += ge.getInventory().getQuantity();
            }
            if (qua < iDetail.getInventory().getQuantity()) {
                result = "Open";
                break;
            }
        }
        return result;
    }

    @Override
    public void updatePOisOpenAndLinkingWithGR(String linking, String grorderId) throws ServiceException {
        try {
            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), linking);
            PurchaseOrder purchaseOrder = (PurchaseOrder) rdresult.getEntityList().get(0);
            HashMap hMap = new HashMap();

            boolean isopen = false;
            Set<PurchaseOrderDetail> rows = purchaseOrder.getRows();
            Iterator itrPOD = rows.iterator();
            while (itrPOD.hasNext()) {
                PurchaseOrderDetail row = (PurchaseOrderDetail) itrPOD.next();
                //this code is used to update the purchase return so as as we are making GR then that purchase return shoild not be deleteable
                KwlReturnObject pridresult = accGoodsReceiptobj.getPRFromPOD(row.getID());
                List listPr = pridresult.getEntityList();
                Iterator itePR = listPr.iterator();
                while (itePR.hasNext()) {
                    KwlReturnObject presult = accountingHandlerDAOobj.getObject(PurchaseReturn.class.getName(), (String) itePR.next());
                    PurchaseReturn purchasereturn = (PurchaseReturn) presult.getEntityList().get(0);
                    if (purchasereturn != null) {
                        HashMap poMap = new HashMap();
                        poMap.put("purchasereturn", purchasereturn);
                        poMap.put("companyid", purchasereturn.getCompany().getCompanyID());
                        poMap.put("isdeletable", false);
                        accGoodsReceiptobj.updatePurchaseReturnStatus(poMap);
                    }
                }

                //below code is used to get the quantity of current GR order and according to that to update linked purchase order
                KwlReturnObject idresult = accGoodsReceiptobj.getGRODIDFromPOD(row.getID(), grorderId);
                List list = idresult.getEntityList();
                Iterator iteGRD = list.iterator();
                double qua = 0.0;
                while (iteGRD.hasNext()) {
                    GoodsReceiptOrderDetails grod = (GoodsReceiptOrderDetails) iteGRD.next();
                    qua += grod.getInventory().getQuantity();
                }
                if (row != null) {
                    if (row != null && !StringUtil.isNullOrEmpty(row.getID()) && qua > 0) {
                        HashMap poMap = new HashMap();
                        poMap.put("podetails", row.getID());
                        poMap.put("companyid", row.getCompany().getCompanyID());
                        poMap.put("balanceqty", qua);
                        poMap.put("add", false);
                        accCommonTablesDAO.updatePurchaseOrderStatus(poMap);
                    }
                }
                double addobj = row.getBalanceqty() - qua;
                if (addobj > 0) {
                    isopen = true;
                }
            }
            hMap.put("isOpen", isopen);
            hMap.put("purchaseOrder", purchaseOrder);
            hMap.put("value", "2");
            accGoodsReceiptobj.updatePOLinkflag(hMap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("updatePOisOpenAndLinkingWithGR : " + ex.getMessage(), ex);
        }
    }
    /**
     * To update isopen flag for security gate entry
     * @param linking
     * @param grorderId
     * @throws ServiceException 
     */
    public void updateSecurityisOpenAndLinkingWithGR(String linking, String grorderId) throws ServiceException {
        try {
            KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(SecurityGateEntry.class.getName(), linking);
            SecurityGateEntry securityGateEntry = (SecurityGateEntry) rdresult.getEntityList().get(0);
            HashMap hMap = new HashMap();

            boolean isopen = false;
            Set<SecurityGateDetails> rows = securityGateEntry.getRows();
            Iterator itrPOD = rows.iterator();
            while (itrPOD.hasNext()) {
                SecurityGateDetails row = (SecurityGateDetails) itrPOD.next();
                KwlReturnObject idresult = accGoodsReceiptobj.getGRODIDFromSGE(row.getID(), grorderId);
                List list = idresult.getEntityList();
                Iterator iteGRD = list.iterator();
                double qua = 0.0;
                while (iteGRD.hasNext()) {
                    GoodsReceiptOrderDetails grod = (GoodsReceiptOrderDetails) iteGRD.next();
                    qua += grod.getInventory().getQuantity();
                }
                if (row != null) {
                    if (row != null && !StringUtil.isNullOrEmpty(row.getID()) && qua > 0) {
                        HashMap poMap = new HashMap();
                        poMap.put("sgedetails", row.getID());
                        poMap.put("companyid", row.getCompany().getCompanyID());
                        poMap.put("balanceqty", qua);
                        poMap.put("add", false);
                        accCommonTablesDAO.updateSecurityGateStatus(poMap);
                    }
                }
                double addobj = row.getBalanceqty() - qua;
                if (addobj > 0) {
                    isopen = true;
                }
            }
            hMap.put("isOpen", isopen);
            hMap.put("securityGateEntry", securityGateEntry);
            hMap.put("value", "2");
            accGoodsReceiptobj.updateSGELinkflag(hMap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("updatePOisOpenAndLinkingWithGR : " + ex.getMessage(), ex);
        }
    }

    @Override
    public List<String> approveGRO(GoodsReceiptOrder groObj, HashMap<String, Object> grApproveMap, boolean isMailApplicable) throws SessionExpiredException, AccountingException, ServiceException, ScriptException, MessagingException, JSONException {
        boolean hasAuthority = false;
        String companyid = "";
        List returnList = new ArrayList();
        List mailParamList = new ArrayList();
        int returnStatus;
        Date postingDate=null;
        if (grApproveMap.containsKey("companyid") && grApproveMap.get("companyid") != null) {
            companyid = grApproveMap.get("companyid").toString();
        }
        String currentUser = "";
        if (grApproveMap.containsKey("currentUser") && grApproveMap.get("currentUser") != null) {
            currentUser = grApproveMap.get("currentUser").toString();
        }
        int level = 0;
        if (grApproveMap.containsKey("level") && grApproveMap.get("level") != null) {
            level = Integer.parseInt(grApproveMap.get("level").toString());
        }
        String amount = "";
        if (grApproveMap.containsKey("totalAmount") && grApproveMap.get("totalAmount") != null) {
            amount = grApproveMap.get("totalAmount").toString();
        }
        if (grApproveMap.containsKey("postingDate") && grApproveMap.get("postingDate") != null) {
            postingDate = (Date)grApproveMap.get("postingDate");
        }
        boolean fromCreate = false;
        if (grApproveMap.containsKey("fromCreate") && grApproveMap.get("fromCreate") != null) {
            fromCreate = Boolean.parseBoolean(grApproveMap.get("fromCreate").toString());
        }
        JSONArray productDiscountMapList = null;
        if (grApproveMap.containsKey("productDiscountMapList") && grApproveMap.get("productDiscountMapList") != null) {
            productDiscountMapList = new JSONArray(grApproveMap.get("productDiscountMapList").toString());
        }
        if (!fromCreate) {
            String thisUser = currentUser;
            KwlReturnObject userclass = accountingHandlerDAOobj.getObject(User.class.getName(), thisUser);
            User user = (User) userclass.getEntityList().get(0);

            if (AccountingManager.isCompanyAdmin(user)) {
                hasAuthority = true;
            } else {
                
                /*
                 If "Send approval documents to next level" is disabled from system preferences & pending document is edited then
                 1. When user is authorised then document is always goes at first level
                 2. When user is not authorised then document remains at same level
                 
                 */
                boolean isEditedPendingDocumentWithCheckOff = false;
                if (grApproveMap.containsKey("isEditedPendingDocumentWithCheckOff") && grApproveMap.get("isEditedPendingDocumentWithCheckOff") != null) {
                    level = Integer.parseInt(grApproveMap.get("documentLevel").toString());//Actual level of document for fetching rule at that level for the user
                    grApproveMap.put("level", level);
                    isEditedPendingDocumentWithCheckOff = true;
                }
                
                hasAuthority = accountingHandlerDAOobj.checkForMultiLevelApprovalRules(grApproveMap);
                
                  /*---If User is authorised at this level then sending document to first level that's why assigning "level=0" ------ */
                if (isEditedPendingDocumentWithCheckOff && hasAuthority) {
                    level = 0;
                }
            }
        } else {
            hasAuthority = true;
        }
        if (hasAuthority) {
            ScriptEngineManager mgr = new ScriptEngineManager();
            ScriptEngine engine = mgr.getEngineByName("JavaScript");
            int approvalStatus = 11;
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            String groNumber = groObj.getGoodsReceiptOrderNumber();
            String groID = groObj.getID();
            HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
            qdDataMap.put("companyid", companyid);
            qdDataMap.put("level", level + 1);
            qdDataMap.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
            KwlReturnObject flowresult = accMultiLevelApprovalDAOObj.getMultiApprovalRuleData(qdDataMap);
            Iterator itr = flowresult.getEntityList().iterator();
            String fromName = "User";
            fromName = groObj.getCreatedby().getFirstName().concat(" ").concat(groObj.getCreatedby().getLastName());
            /**
             * parameters required for sending mail
             */
            Map<String, Object> mailParameters = new HashMap();
            mailParameters.put(Constants.companyid, companyid);
            mailParameters.put(Constants.prNumber, groNumber);
            mailParameters.put(Constants.fromName, fromName);
            mailParameters.put(Constants.moduleid, Constants.Acc_Goods_Receipt_ModuleId);
            mailParameters.put(Constants.isCash, false);
            mailParameters.put(Constants.createdBy, groObj.getCreatedby().getUserID());
            if (grApproveMap.containsKey(Constants.PAGE_URL)) {
                mailParameters.put(Constants.PAGE_URL, (String) grApproveMap.get(Constants.PAGE_URL));
            }
            while (itr.hasNext()) {

                HashMap<String, Object> recMap = new HashMap();
                Object[] row = (Object[]) itr.next();
                mailParameters.put(Constants.ruleid, row[0].toString());
                String rule = "";
                if (row[2] != null) {
                    rule = row[2].toString();
                }
                String discountRule = "";
                if (row[7] != null) {
                    discountRule = row[7].toString();
                }
                boolean sendForApproval = false;
                int appliedUpon = Integer.parseInt(row[5].toString());
                if (appliedUpon == Constants.Specific_Products || appliedUpon == Constants.Specific_Products_Discount) {
                    if (productDiscountMapList != null) {
                        sendForApproval = AccountingManager.checkForProductAndProductDiscountRule(productDiscountMapList, appliedUpon, rule, discountRule);
                    }
                }else if(appliedUpon ==Constants.Specific_Products_Category){
                    /*
                     * Check If Rule is apply on product
                     * category from multiapproverule window
                     */
                    sendForApproval = accountingHandlerDAOobj.checkForProductCategoryForProduct(productDiscountMapList, appliedUpon, rule);
                }else {
                    rule = rule.replaceAll("[$$]+", amount);
                }
                if (StringUtil.isNullOrEmpty(rule) || (!StringUtil.isNullOrEmpty(rule) && appliedUpon != Constants.Specific_Products && appliedUpon != Constants.Specific_Products_Discount && appliedUpon != Constants.Specific_Products_Category && Boolean.parseBoolean(engine.eval(rule).toString())) || sendForApproval) {
                    // send emails
                    boolean hasApprover = Boolean.parseBoolean(row[3].toString());
                    mailParameters.put(Constants.hasApprover, hasApprover);
                    if (isMailApplicable) {
                        mailParameters.put("level", level+1);
                        sendMailToApprover(mailParameters);
                        approvalStatus = level + 1;
                    } else {
                        approvalStatus = level + 1;
                        recMap.put("ruleid", row[0].toString());
                        recMap.put("fromName", fromName);
                        recMap.put("hasApprover", hasApprover);

                        mailParamList.add(recMap);
                    }

                }
            }
            accGoodsReceiptobj.approvePendingGRO(groID, companyid, approvalStatus);
            if (groObj != null && groObj.getInventoryJE() != null) {
                KwlReturnObject invJEObj = accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), groObj.getInventoryJE().getID());
                JournalEntry invJE = (JournalEntry) invJEObj.getEntityList().get(0);
                if (invJE != null) {
                    invJE.setApprovestatuslevel(approvalStatus);
                    if(postingDate!=null){
                        invJE.setEntryDate(postingDate);
                    }
                }
            }
            returnStatus = approvalStatus;
        } else {
            returnStatus = Constants.NoAuthorityToApprove; //if not have approval permission then return one fix value like 999
        }

        returnList.add(returnStatus);
        returnList.add(mailParamList);

        return returnList;
    }

     public void saveGRNNewBatch(String batchJSON, Inventory inventory, JSONObject paramJobj, GoodsReceiptOrderDetails goodsReceiptOrderDetails, List<StockMovement> stockMovementsList,Date createdOn,Map<Store, InterStoreTransferRequest> storeWiseInterStoreTransferRequest) throws JSONException, ParseException, SessionExpiredException, ServiceException, UnsupportedEncodingException, AccountingException {
         JSONArray jArr = new JSONArray(batchJSON);
        String purchasebatchid = "";
        KwlReturnObject kmsg = null;
        double ActbatchQty = 1;
        double batchQty = 0;
        boolean isBatch = false;
        boolean isserial = false;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;
        boolean isnegativestockforlocwar = false;
        int serialsequence = 1 , batchsequence = 1; // for user selected sequence of batch and serial while creating GRN.
        DateFormat df = authHandler.getDateOnlyFormat();
        if (paramJobj.has(Constants.importdf) && ((DateFormat) paramJobj.get(Constants.importdf)) != null) {
            df = (DateFormat) paramJobj.get(Constants.importdf);
        }
        boolean sendForQAApproval = paramJobj.optBoolean("sendForQAApproval");
//        if (paramJobj.has(Constants.dateformatid) && paramJobj.get(Constants.dateformatid) != null) {
//            df = (DateFormat) paramJobj.get(Constants.dateformatid);
//        }
        String companyid = "";
        if (paramJobj.has(Constants.companyKey) && paramJobj.get(Constants.companyKey) != null) {
            companyid = (String) paramJobj.get(Constants.companyKey);
        }
        boolean isEdit = false;
        if (paramJobj.has("isEdit") && paramJobj.get("isEdit") != null) {
            isEdit = Boolean.parseBoolean((String) paramJobj.get("isEdit"));
        }
        boolean isConsignment = false;
        if (paramJobj.has("isConsignment") && paramJobj.get("isConsignment") != null) {
            isConsignment = Boolean.parseBoolean((String) paramJobj.get("isConsignment"));
        }
        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
        isBatch = preferences.isIsBatchCompulsory();
        isserial = preferences.isIsSerialCompulsory();

        ExtraCompanyPreferences extraCompanyPreferences = null;
        KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
        extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
        isnegativestockforlocwar = extraCompanyPreferences.isIsnegativestockforlocwar();
        Product product =null;
        if (!StringUtil.isNullOrEmpty(inventory.getProduct().getID())) {
            KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), inventory.getProduct().getID());
            product = (Product) prodresult.getEntityList().get(0);
            isLocationForProduct = product.isIslocationforproduct();
            isWarehouseForProduct = product.isIswarehouseforproduct();
            isBatchForProduct = product.isIsBatchForProduct();
            isSerialForProduct = product.isIsSerialForProduct();
            isRowForProduct = product.isIsrowforproduct();
            isRackForProduct = product.isIsrackforproduct();
            isBinForProduct = product.isIsbinforproduct();
        }
        NewProductBatch productBatch = null;
        String productBatchId = "";
        // Save Batch detail for both  option for serial no and batch also as if batch option is off then also we are generating batch in backend
        StockMovementDetail smd = null;
        StockMovement stockMovement = null;
        
        /**
         * Get Inter Store / Location Sequence format
         */
        String interstore_loc_No = "";
        SeqFormat seqFormat = null;
         Store qaStore = null;
//         Map<Store, InterStoreTransferRequest> storeWiseInterStoreTransferRequest = new HashMap<Store, InterStoreTransferRequest>();
         try {
             if (sendForQAApproval && (product!=null && product.isQaenable())) {
                 if (!StringUtil.isNullOrEmpty(paramJobj.optString("interstoreSeqNo")) && !StringUtil.isNullOrEmpty(paramJobj.optString("interstoreseqFormat"))) {
                     interstore_loc_No = paramJobj.optString("interstoreSeqNo");
                     seqFormat = (SeqFormat) paramJobj.opt("interstoreseqFormat");
                 } else {
                     throw new AccountingException(messageSource.getMessage("acc.companypreferences.defaultsequenceformatforistnotset", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                 }
                 KwlReturnObject tostoreres = accountingHandlerDAOobj.getObject(Store.class.getName(), extraCompanyPreferences.getInspectionStore());
                 qaStore = (Store) tostoreres.getEntityList().get(0);
                 if (qaStore == null) {
                     throw new InventoryException(messageSource.getMessage("acc.companypreferences.qastore.notset", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                 }
             }
         } catch (AccountingException ex) {
             throw new AccountingException(ex.getMessage());
         }
         InterStoreTransferRequest interStoreTransfer = null;
         ISTDetail srd = null;
        Map<Store, StockMovement> storeWiseStockMovement = new HashMap<>();
        if(jArr.length()>0){
        for (int i = 0; i < jArr.length(); i++) {
            JSONObject jSONObject = new JSONObject(jArr.get(i).toString());
            if (jSONObject.has("quantity") && !jSONObject.getString("quantity").equals("undefined") && !jSONObject.getString("quantity").isEmpty()) {
                ActbatchQty = authHandler.roundQuantity(jSONObject.getDouble("quantity"), companyid);
            }
            if (batchQty == 0 && !StringUtil.isNullOrEmpty(jSONObject.optString("warehouse",null))) {
                batchQty = authHandler.roundQuantity(jSONObject.getDouble("quantity"), companyid);
               
                KwlReturnObject warehouseObj = accountingHandlerDAOobj.getObject(Store.class.getName(), jSONObject.optString("warehouse"));
                Store store = (Store) warehouseObj.getEntityList().get(0);
                if (isWarehouseForProduct && isLocationForProduct) {
                    if (storeWiseStockMovement.containsKey(store)) {
                        stockMovement = storeWiseStockMovement.get(store);
                        stockMovement.setQuantity(authHandler.roundQuantity(stockMovement.getQuantity() + jSONObject.optDouble("quantity", 0.0),inventory.getCompany().getCompanyID()));
                    } else {
                        stockMovement = new StockMovement();
                        if (store != null) {
                            stockMovement.setStore(store);
                        }
                        stockMovement.setCompany(inventory.getCompany());
                        if (createdOn != null) {
                            Date oldDate = stockMovement.getCreatedOn();
                            try {
                                Calendar cal = Calendar.getInstance();
                                cal.setTime(createdOn);
                                cal.add(Calendar.SECOND, (cal.get(Calendar.SECOND) - 20));
                                Date createdDate = cal.getTime();
                                stockMovement.setCreatedOn(createdDate);
                            } catch (Exception ex) {
                                stockMovement.setCreatedOn(oldDate);
                            }
                        }
                        Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.INFO, "Stock Movement Created:" + stockMovement.getCreatedOn());
                        stockMovement.setProduct(inventory.getProduct());
                        stockMovement.setStockUoM(inventory.getProduct().getUnitOfMeasure());
                        stockMovement.setPricePerUnit(goodsReceiptOrderDetails.getBaseuomrate() < 1 ? (goodsReceiptOrderDetails.getRate() * (1/goodsReceiptOrderDetails.getBaseuomrate())) : goodsReceiptOrderDetails.getRate() / goodsReceiptOrderDetails.getBaseuomrate());
                        stockMovement.setQuantity(authHandler.roundQuantity(jSONObject.optDouble("quantity", 0.0),inventory.getCompany().getCompanyID()));
                        stockMovement.setTransactionDate(goodsReceiptOrderDetails.getGrOrder().getOrderDate());
                        stockMovement.setModuleRefId(goodsReceiptOrderDetails.getGrOrder().getID());
                        stockMovement.setModuleRefDetailId(goodsReceiptOrderDetails.getID());
                        stockMovement.setVendor(goodsReceiptOrderDetails.getGrOrder().getVendor());
                        stockMovement.setCostCenter(goodsReceiptOrderDetails.getGrOrder().getCostcenter());
                        stockMovement.setTransactionNo(goodsReceiptOrderDetails.getGrOrder().getGoodsReceiptOrderNumber());
                        if (goodsReceiptOrderDetails.getGrOrder().isIsconsignment()) {
                            stockMovement.setTransactionModule(TransactionModule.ERP_Consignment_GR);
                            stockMovement.setRemark("Consignment GRN created");
                        }else{
                            stockMovement.setTransactionModule(TransactionModule.ERP_GRN);
                            stockMovement.setRemark("GRN created");
                        }
                        stockMovement.setTransactionType(TransactionType.IN);
                        stockMovement.setMemo(goodsReceiptOrderDetails.getGrOrder().getMemo());
                        storeWiseStockMovement.put(store, stockMovement);
                    }
                    if (sendForQAApproval  && (product!=null && product.isQaenable())) {
                        /**
                         * If GRN is send for QA approval then need to create
                         * store wise separate inter store transfer request. 
                         * Create IST request and set values for required fields.
                         */
                        if (storeWiseInterStoreTransferRequest.containsKey(store)) {
                            interStoreTransfer = storeWiseInterStoreTransferRequest.get(store);
                            interStoreTransfer.setAcceptedQty(interStoreTransfer.getAcceptedQty() + jSONObject.optDouble("quantity", 0.0));
                            interStoreTransfer.setOrderedQty(interStoreTransfer.getOrderedQty() + jSONObject.optDouble("quantity", 0.0));
                        } else {
                            if (store != null) {
                                interStoreTransfer = new InterStoreTransferRequest(goodsReceiptOrderDetails.getProduct(), store, qaStore, goodsReceiptOrderDetails.getProduct().getUnitOfMeasure() != null ? goodsReceiptOrderDetails.getProduct().getUnitOfMeasure() : goodsReceiptOrderDetails.getUom());
                                interStoreTransfer.setAcceptedQty(authHandler.roundQuantity(jSONObject.optDouble("quantity", 0.0),inventory.getCompany().getCompanyID()));
                                interStoreTransfer.setOrderedQty(authHandler.roundQuantity(jSONObject.optDouble("quantity", 0.0),inventory.getCompany().getCompanyID()));
                                interStoreTransfer.setRemark(goodsReceiptOrderDetails.getRemark());
                                interStoreTransfer.setCostCenter(goodsReceiptOrderDetails.getGrOrder().getCostcenter());
                                interStoreTransfer.setTransactionNo(interstore_loc_No);
                                interStoreTransfer.setBusinessDate(goodsReceiptOrderDetails.getGrOrder().getOrderDate());
                                interStoreTransfer.setUom(goodsReceiptOrderDetails.getUom());
                                String groNumber = goodsReceiptOrderDetails.getGrOrder() != null && !StringUtil.isNullOrEmpty(goodsReceiptOrderDetails.getGrOrder().getGoodsReceiptOrderNumber()) ? goodsReceiptOrderDetails.getGrOrder().getGoodsReceiptOrderNumber() : "";
                                interStoreTransfer.setMemo((StringUtil.isNullOrEmpty(groNumber) ? ("IST created for QC against GRN.") : ("IST created for QC against GRN:" + groNumber)));
                                interStoreTransfer.setProduct(goodsReceiptOrderDetails.getProduct());
                                interStoreTransfer.setPackaging(goodsReceiptOrderDetails.getProduct().getPackaging());
                                interStoreTransfer.setCreatedOn(authHandler.getSimpleDateAndTimeFormat().parse(authHandler.getConstantDateFormatter().format(new Date())));
                                long creationDate = System.currentTimeMillis();
                                interStoreTransfer.setCreationdate(creationDate);
                                interStoreTransfer.setModifiedOn(authHandler.getSimpleDateAndTimeFormat().parse(authHandler.getConstantDateFormatter().format(new Date())));
                                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.INFO, "IST Creation: " + interStoreTransfer.getCreatedOn());
                                storeWiseInterStoreTransferRequest.put(store, interStoreTransfer);

                            }
                        }
                    }
                }
            }
            if ((isLocationForProduct || isWarehouseForProduct || isBatchForProduct || isRowForProduct || isRackForProduct || isBinForProduct) && (batchQty == ActbatchQty)) {

                String batchname=StringUtil.DecodeText(jSONObject.optString("batch"));
                productBatchId = accCommonTablesDAO.getpurchaseBatchIdForLocationWarehouseRowRackBin(inventory.getProduct().getID(), jSONObject.getString("location"), jSONObject.getString("warehouse"), jSONObject.optString("row", null), jSONObject.optString("rack", null), jSONObject.optString("bin", null), batchname);

                if (StringUtil.isNullOrEmpty(productBatchId)) {
                    // if negative stock for location warehouse is not activated thencreate new batch always otherwise id negative stock is activated and batch not found then also create new batch
                    HashMap<String, Object> pdfTemplateMap = new HashMap<>();
                    pdfTemplateMap.put("companyid", inventory.getCompany().getCompanyID());
                    pdfTemplateMap.put("name", batchname);
                    if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgdate"))) {
                        pdfTemplateMap.put("mfgdate", df.parse(jSONObject.getString("mfgdate")));
                    }
                    if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                        pdfTemplateMap.put("expdate", df.parse(jSONObject.getString("expdate")));
                    }
                    pdfTemplateMap.put("quantity", authHandler.roundQuantity(jSONObject.optDouble("quantity", 0.0),inventory.getCompany().getCompanyID()));
                    if (isConsignment) {
                        pdfTemplateMap.put("consignquantity", authHandler.roundQuantity(jSONObject.optDouble("quantity", 0.0),inventory.getCompany().getCompanyID()));
                        /**
                         * qty was resetting quantitydue in newproductbatch table
                         * in Goods Receipt Order for consignment, making quantitydue 0.
                         */
                        if(paramJobj.has("moduleidcn") && paramJobj.get("moduleidcn") != null && (int)paramJobj.get("moduleidcn") == Constants.Acc_Consignment_GoodsReceipt_ModuleId) {
                            pdfTemplateMap.put("qty", "0");
                        }
                    }
                    
                    if (StringUtil.isNullOrEmpty(jSONObject.getString("location")) || StringUtil.isNullOrEmpty(jSONObject.getString("warehouse"))) {
                        throw new AccountingException("Warehouse Location details should not be empty .");

                    }

                    if (jSONObject.has("balance") && !StringUtil.isNullOrEmpty(jSONObject.getString("balance"))) {
                        pdfTemplateMap.put("balance", jSONObject.getString("balance"));
                    }
                    pdfTemplateMap.put("location", jSONObject.get("location"));
                    pdfTemplateMap.put("product", inventory.getProduct().getID());
                    pdfTemplateMap.put("warehouse", jSONObject.get("warehouse"));

                    pdfTemplateMap.put("row", jSONObject.optString("row", null));
                    pdfTemplateMap.put("rack", jSONObject.optString("rack", null));
                    pdfTemplateMap.put("bin", jSONObject.optString("bin", null));
                    pdfTemplateMap.put("isConsignment", isConsignment);

                    pdfTemplateMap.put("isopening", false);
                    pdfTemplateMap.put("transactiontype", "28");//This is GRN Type Tranction  
                    pdfTemplateMap.put("ispurchase", true);
                    kmsg = accCommonTablesDAO.saveNewBatchForProduct(pdfTemplateMap);

                    if (kmsg != null && kmsg.getEntityList().size() != 0) {
                        productBatch = (NewProductBatch) kmsg.getEntityList().get(0);
                        productBatchId = productBatch.getId();
                    }
                } else {
                    KwlReturnObject btchObj = accountingHandlerDAOobj.getObject(NewProductBatch.class.getName(), productBatchId);
                    NewProductBatch npb = (NewProductBatch) btchObj.getEntityList().get(0);
                    HashMap<String, Object> batchUpdateQtyMap = new HashMap<>();
                        batchUpdateQtyMap.put("quantity", String.valueOf(Double.parseDouble(jSONObject.getString("quantity"))));
                    if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgdate"))  && npb != null) {
                        npb.setMfgdate(df.parse(jSONObject.getString("mfgdate")));
                    }
                    if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))  && npb != null) {
                        npb.setExpdate(df.parse(jSONObject.getString("expdate")));
                    }
                    if (isConsignment) {
                        batchUpdateQtyMap.put("consignquantity", String.valueOf(Double.parseDouble(jSONObject.getString("quantity"))));
                        batchUpdateQtyMap.put("qty", "0");
                    } 
                    else {
                        batchUpdateQtyMap.put("qty", String.valueOf(Double.parseDouble(jSONObject.getString("quantity"))));
                    }
                    batchUpdateQtyMap.put("id", productBatchId);
                    accCommonTablesDAO.saveBatchAmountDue(batchUpdateQtyMap);
                }
                HashMap<String, Object> documentMap = new HashMap<>();
                documentMap.put("quantity", jSONObject.getString("quantity"));
                documentMap.put("batchmapid", productBatchId);
                documentMap.put("documentid", goodsReceiptOrderDetails.getID());
                documentMap.put("transactiontype", "28"); // This is GRN Type Tranction
                documentMap.put(Constants.isConsignment, isConsignment); 
                if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgdate"))) {
                    documentMap.put("mfgdate", df.parse(jSONObject.getString("mfgdate")));
                }
                if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                    documentMap.put("expdate", df.parse(jSONObject.getString("expdate")));
                }

                // Code to Send Batch
                KwlReturnObject batchObj = accountingHandlerDAOobj.getObject(NewProductBatch.class.getName(), productBatchId);
                NewProductBatch newProductBatch1 = (NewProductBatch) batchObj.getEntityList().get(0);

                KwlReturnObject locationUpdate = accountingHandlerDAOobj.getObject(Location.class.getName(), jSONObject.getString("location"));
                Location locationObj = (Location) locationUpdate.getEntityList().get(0);
                if (isWarehouseForProduct && isLocationForProduct) {
                    smd = new StockMovementDetail();
                    /**
                     * Create ISTDetail object for IST request when goods
                     * receipt order is created and sent for QA approval.
                     */
                    srd = new ISTDetail();
                    if (locationObj != null) {
                        smd.setLocation(locationObj);
                        if (sendForQAApproval && (product!=null && product.isQaenable())) {
                            if (qaStore.getDefaultLocation() == null) {
                                throw new AccountingException(messageSource.getMessage("acc.companypreferences.defaultLocationNotSetforQAStore", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                            }
                            Location toLocatioObj = qaStore.getDefaultLocation();
                            srd.setDeliveredLocation(toLocatioObj);
                            srd.setIssuedLocation(locationObj);
                        }
                    }
                    if (isRowForProduct) {
                        KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("row"));
                        StoreMaster row = (StoreMaster) krObject.getEntityList().get(0);
                        smd.setRow(row);
                        if (sendForQAApproval && (product!=null && product.isQaenable())) {
                            srd.setIssuedRow(row);
                            srd.setDeliveredRow(row);
                        }
                    }
                    if (isRackForProduct) {
                        KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("rack"));
                        StoreMaster rack = (StoreMaster) krObject.getEntityList().get(0);
                        smd.setRack(rack);
                        if (sendForQAApproval && (product!=null && product.isQaenable())) {
                            srd.setIssuedRack(rack);
                            srd.setDeliveredRack(rack);
                        }
                    }
                    if (isBinForProduct) {
                        KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), jSONObject.optString("bin"));
                        StoreMaster bin = (StoreMaster) krObject.getEntityList().get(0);
                        smd.setBin(bin);
                        if (sendForQAApproval && (product!=null && product.isQaenable())) {
                            srd.setIssuedBin(bin);
                            srd.setDeliveredBin(bin);
                        }
                    }
                    smd.setQuantity(authHandler.roundQuantity(Double.parseDouble(jSONObject.getString("quantity")),newProductBatch1.getCompany().getCompanyID()));
                    smd.setBatchName(newProductBatch1.getBatchname());
                    smd.setStockMovement(stockMovement);

                    stockMovement.getStockMovementDetails().add(smd);
                    
                    if (sendForQAApproval && (product!=null && product.isQaenable())) {
                        srd.setDeliveredQuantity(authHandler.roundQuantity(Double.parseDouble(jSONObject.getString("quantity")),newProductBatch1.getCompany().getCompanyID()));
                        srd.setIssuedQuantity(authHandler.roundQuantity(Double.parseDouble(jSONObject.getString("quantity")),newProductBatch1.getCompany().getCompanyID()));
                        srd.setBatchName(newProductBatch1.getBatchname());
                        srd.setIstRequest(interStoreTransfer);
                        interStoreTransfer.getIstDetails().add(srd);
                    }
                }
                /**
                 * added selected sequence for batch selected by user while
                 * creating GRN.
                 */
                documentMap.put("batchsequence", batchsequence++);
                accCommonTablesDAO.saveBatchDocumentMapping(documentMap);
            }
            batchQty--;

            if (isSerialForProduct) { // if serial no option is on then only save the serial no details 
                HashMap<String, Object> pdfTemplateMap = new HashMap<>();
                if (isEdit) {
                    pdfTemplateMap.put("id", "");
                } else {
                    pdfTemplateMap.put("id", jSONObject.getString("serialnoid"));
                }
                pdfTemplateMap.put("companyid", inventory.getCompany().getCompanyID());
                pdfTemplateMap.put("product", inventory.getProduct().getID());
                pdfTemplateMap.put("name", StringUtil.DecodeText(jSONObject.optString("serialno")));
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.getString("expstart"))) {
                    pdfTemplateMap.put("expfromdate", df.parse(jSONObject.getString("expstart")));
                }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.getString("expend"))) {
                    pdfTemplateMap.put("exptodate", df.parse(jSONObject.getString("expend")));
                }
                pdfTemplateMap.put("batch", productBatchId);
                pdfTemplateMap.put(Constants.isConsignment, isConsignment);
                pdfTemplateMap.put("transactiontype", "28"); // This is GRN Type Tranction  
                pdfTemplateMap.put("quantity", "1"); // This is GRN Type Tranction
                
                if (isConsignment) {
                    pdfTemplateMap.put("consignquantity", "1");
                    /**
                      * qty was resetting quantitydue in newbatchserial table
                      * in Goods Receipt Order for consignment, making quantitydue 0.
                      */
                    if(paramJobj.has("moduleidcn") && paramJobj.get("moduleidcn") != null && (int) paramJobj.get("moduleidcn") == Constants.Acc_Consignment_GoodsReceipt_ModuleId) {
                        pdfTemplateMap.put("qty", "0");
                    }
                }
                pdfTemplateMap.put("ispurchase", true);
                pdfTemplateMap.put("purchasereturn", false);
                pdfTemplateMap.put("skuvalue", jSONObject.optString("skufield", ""));
                kmsg = accCommonTablesDAO.saveNewSerialForBatch(pdfTemplateMap);
                String serialDetailsId = "";
                if (kmsg != null && kmsg.getEntityList().size() != 0) {
                    NewBatchSerial serialDetails = (NewBatchSerial) kmsg.getEntityList().get(0);
                    serialDetailsId = serialDetails.getId();
                }

                HashMap<String, Object> documentMap = new HashMap<>();
                documentMap.put("quantity", 1);
                documentMap.put("serialmapid", serialDetailsId);
                documentMap.put("documentid", goodsReceiptOrderDetails.getID());
                documentMap.put("transactiontype", "28"); // This is GRN Type Tranction  
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.getString("expstart"))) {
                    documentMap.put("expfromdate", df.parse(jSONObject.getString("expstart")));
                }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.getString("expend"))) {
                    documentMap.put("exptodate", df.parse(jSONObject.getString("expend")));
                }
                
                /**
                 * added selected sequence for serial selected by user while
                 * creating GRN.
                 */
                documentMap.put("serialsequence", serialsequence++);
                KwlReturnObject krObj = accCommonTablesDAO.saveSerialDocumentMapping(documentMap);
                SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) krObj.getEntityList().get(0);
                if (jSONObject.has("customfield")) {
                    String customfield = jSONObject.getString("customfield");
                    if (!StringUtil.isNullOrEmpty(customfield)) {
                        HashMap<String, Object> DOMap = new HashMap<>();
                        JSONArray jcustomarray = new JSONArray(customfield);
                        /**
                         * 'isdefaultHeaderMap' flag indicates the call coming from REST service
                         */
                        if (paramJobj.optBoolean(Constants.isdefaultHeaderMap, false)) {
                            jcustomarray = fieldDataManagercntrl.GetJsonArrayUsingFieldIds(jcustomarray, Constants.SerialWindow_ModuleId, companyid, false);
                        }

                        HashMap<String, Object> customrequestParams = new HashMap<>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", "SerialDocumentMapping");
                        customrequestParams.put("moduleprimarykey", "SerialDocumentMappingId");
                        customrequestParams.put("modulerecid", serialDocumentMapping.getId());
                        customrequestParams.put("moduleid", Constants.SerialWindow_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        DOMap.put("id", serialDocumentMapping.getId());
                        customrequestParams.put("customdataclasspath", Constants.Acc_Serial_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            DOMap.put("serialcustomdataref", serialDocumentMapping.getId());
                            accCommonTablesDAO.updateserialcustomdata(DOMap);
                        }
                    }
                }
                KwlReturnObject serialObj = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), serialDetailsId);
                NewBatchSerial newBatchSerial = (NewBatchSerial) serialObj.getEntityList().get(0);
                if (newBatchSerial != null) {
                    if (isWarehouseForProduct && isLocationForProduct) {
                        smd.addSerialName(newBatchSerial.getSerialname());
                        if (sendForQAApproval && (product!=null && product.isQaenable())) {
                            StringBuilder serialNames = new StringBuilder();
                            serialNames.append(StringUtil.isNullOrEmpty(srd.getIssuedSerialNames()) ? "" : srd.getIssuedSerialNames());
                            if (serialNames.length() > 0) {
                                serialNames.append(",").append(newBatchSerial.getSerialname());
                            } else {
                                serialNames.append(newBatchSerial.getSerialname());
                            }
                            srd.setDeliveredSerialNames(serialNames.toString());
                            srd.setIssuedSerialNames(serialNames.toString());
                        }
                    }
                }
            } else {
                batchQty = 0;
            }
            /**
             * Update document transaction id with batch id
             */
            if (jSONObject.has("attachmentids") && !StringUtil.isNullOrEmpty(jSONObject.getString("attachmentids"))) {
                accCommonTablesDAO.UpdateDocuments(productBatchId,jSONObject.getString("attachmentids"));
            }
        }
     }else{
            throw new AccountingException("Warehouse Location details should not be empty .");
        }
        if (isWarehouseForProduct && isLocationForProduct) {
            for (Entry<Store, StockMovement> entry : storeWiseStockMovement.entrySet()) {
                stockMovementsList.add(entry.getValue());
            }
        }
         if (sendForQAApproval && (product!=null && product.isQaenable())) {
             try {
                 seqService.updateSeqNumber(seqFormat);
             } catch (SeqFormatException ex) {
                 Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
             }
         }
     }

    public String getSequenceFormatIDByNameForPI(String sequenceFormatName, String companyID) throws AccountingException {
        String sequenceFormatID = "";
        try {
            if (!StringUtil.isNullOrEmpty(sequenceFormatName) && !StringUtil.isNullOrEmpty(companyID)) {
                HashMap<String, Object> formatParams = new HashMap<>();
                formatParams.put("moduleid", Constants.Acc_Vendor_Invoice_ModuleId);
                formatParams.put("name", sequenceFormatName);
                formatParams.put("companyid", companyID);

                KwlReturnObject retObj = accCompanyPreferencesObj.getSequenceFormat(formatParams);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    SequenceFormat format = (SequenceFormat) retObj.getEntityList().get(0);
                    sequenceFormatID = format.getID();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Sequence Format.");
        }
        return sequenceFormatID;
    }

    public String getSequenceFormatIDByNameForGR(String sequenceFormatName, String companyID) throws AccountingException {
        String sequenceFormatID = "";
        try {
            if (!StringUtil.isNullOrEmpty(sequenceFormatName) && !StringUtil.isNullOrEmpty(companyID)) {
                HashMap<String, Object> formatParams = new HashMap<>();
                formatParams.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
                formatParams.put("name", sequenceFormatName);
                formatParams.put("companyid", companyID);

                KwlReturnObject retObj = accCompanyPreferencesObj.getSequenceFormat(formatParams);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    SequenceFormat format = (SequenceFormat) retObj.getEntityList().get(0);
                    sequenceFormatID = format.getID();
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Sequence Format.");
        }
        return sequenceFormatID;
    }

    @Override
    public HashMap getCurrencyMap(boolean isCurrencyCode) throws ServiceException {
        HashMap currencyMap = new HashMap();
        KwlReturnObject returnObject = accCurrencyDAOobj.getCurrencies(currencyMap);
        List currencyList = returnObject.getEntityList();

        if (currencyList != null && !currencyList.isEmpty()) {
            Iterator iterator = currencyList.iterator();
            while (iterator.hasNext()) {
                KWLCurrency currency = (KWLCurrency) iterator.next();
                if (isCurrencyCode) {
                    currencyMap.put(currency.getCurrencyCode(), currency.getCurrencyID());
                } else {
                    currencyMap.put(currency.getName(), currency.getCurrencyID());
                }
            }
        }
        return currencyMap;
    }

    @Override
    public String getCurrencyId(String currencyName, HashMap currencyMap) {
        String currencyId = "";
        if (currencyMap != null && currencyMap.containsKey(currencyName)) {
            currencyId = currencyMap.get(currencyName).toString();
        }
        return currencyId;
    }

    @Override
    public String createCSVrecord(Object[] listArray) {
        String rec = "";
        for (int i = 0; i < listArray.length; i++) { // Discard columns id at index 0 and isvalid,invalidColumns, validationlog at last 3 indexes.
            rec += "\"" + (listArray[i] == null ? "" : listArray[i].toString().replaceAll("\"", "")) + "\",";
        }
        return rec;
    }

    @Override
    public Vendor getVendorByCode(String vendorCode, String companyID) throws AccountingException {
        Vendor vendor = null;
        try {
            if (!StringUtil.isNullOrEmpty(vendorCode) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accVendorDAOObj.getVendorByCode(vendorCode, companyID);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    vendor = (Vendor) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Vendor");
        }
        return vendor;
    }

    @Override
    public Vendor getVendorByName(String vendorName, String companyID) throws AccountingException {
        Vendor vendor = null;
        try {
            if (!StringUtil.isNullOrEmpty(vendorName) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accVendorDAOObj.getVendorByName(vendorName, companyID);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    vendor = (Vendor) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("System Failure while fetching Vendor");
        }
        return vendor;
    }
//    
//    @Override
//    public JSONObject importPurchaseInvoiceJSON(JSONObject paramJobj) {
//        JSONObject jobj = new JSONObject();
//        try {
//            String doAction = paramJobj.getString("do");
//
//            if (doAction.compareToIgnoreCase("import") == 0) {
//                jobj = importPurchaseInvoiceRecordsForCSV(paramJobj);
//            } else if (doAction.compareToIgnoreCase("validateData") == 0) {
//                String eParams = paramJobj.getString("extraParams");
//                JSONObject extraParams = StringUtil.isNullOrEmpty(eParams) ? new JSONObject() : new JSONObject(eParams);
//
//                HashMap<String, Object> requestParams = importHandler.getImportRequestParams(paramJobj);
//                requestParams.put("extraParams", extraParams);
//                requestParams.put("extraObj", null);
//                requestParams.put("servletContext", paramJobj.get("servletContext"));
//
//                jobj = importHandler.validateFileData(requestParams);
//                jobj.put("success", true);
//            }
//        } catch (Exception ex) {
//            try {
//                jobj.put("success", false);
//                jobj.put("msg", "" + ex.getMessage());
//            } catch (JSONException jex) {
//                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, jex);
//            }
//        }
//        return jobj;
//    }
    
//    @Override
//    public JSONObject importPurchaseInvoiceRecordsForCSV(JSONObject requestJobj) throws AccountingException, IOException, JSONException {
//        JSONObject returnObj = new JSONObject();
//        String msg = "";
//        int total = 0, failed = 0;
//        String fileName = requestJobj.getString("filename");
//        String companyID = requestJobj.getString(Constants.companyKey);
//        String masterPreference = requestJobj.getString("masterPreference");
//        Locale locale = (Locale) requestJobj.get("locale");
//        boolean issuccess = true;
//        boolean isAlreadyExist = false;
//        boolean isRecordFailed = false;
//        FileInputStream fileInputStream = null;
//        CsvReader csvReader = null;
//        JSONObject paramJobj = new JSONObject();
//        Map <String,Object> rowDetailMap = new HashMap<>();
//        Map <String,List<JSONObject>> batchMap = new HashMap<>();
//        Map <String,List<Object>> batchSerialMap = new HashMap<>();
//        JSONArray batchDetailArr = new JSONArray();
//        JSONArray rows = new JSONArray();
//        String vendorInvoiceNumber = "";
//        String prevInvNo = "";
//        String prevRow = "";
//        String prevBatch = "";
//        double totaldiscount = 0, totalamount = 0;
//        double totalBatchQty=0;
//
//        try {
//            String dateFormat = null, dateFormatId = requestJobj.getString("dateFormat");
//            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
//                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
//                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);
//
//                dateFormat = kdf != null ? kdf.getJavaForm() : null;
//            }
//            DateFormat df = new SimpleDateFormat(dateFormat);
//            df.setLenient(false);
//            requestJobj.put(Constants.importdf, df); //sending this format for Processing batch details
//
//            SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
//            DateFormat dateOnlydf = null;
//            if (requestJobj.has(Constants.df) && requestJobj.get(Constants.df) != null) {
//                dateOnlydf = (DateFormat) requestJobj.get(Constants.df);
//            }
//
//            KwlReturnObject extraPref = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyID);
//            ExtraCompanyPreferences extrareferences = (ExtraCompanyPreferences) extraPref.getEntityList().get(0);
//            Boolean isCurrencyCode = extrareferences.isCurrencyCode();
//            
//            String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
//            File filePath = new File(destinationDirectory + File.separator + fileName);
//            fileInputStream = new FileInputStream(filePath);
//            String delimiterType = requestJobj.getString("delimiterType");
//            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);
//            
//            JSONObject resjson = new JSONObject(requestJobj.getString("resjson"));
//            JSONArray jSONArray = resjson.getJSONArray("root");
//            HashMap<String, Integer> columnConfig = new HashMap<>();
//            for (int i = 0; i < jSONArray.length(); i++) { // Map the column config with csv column 
//                JSONObject jSONObject = jSONArray.getJSONObject(i);
//                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
//            }
//            
//            int cnt = 0;
//            StringBuilder failedRecords = new StringBuilder();
//            StringBuilder singleInvociceFailedRecords = new StringBuilder();// Invoive with one row of failure record then all rows will be included in failure file
//            int singleInvoiceFailureRecoredCount = 0;//  count of total invoice rows in import file
//            Set<String> failureList = new HashSet<>(); // set of invoice having failyure record's
//            HashMap currencyMap = accSalesOrderServiceobj.getCurrencyMap(isCurrencyCode);
//
//            while (csvReader.readRecord()) {
//                String failureMsg = "";
//                boolean isfailurerecord = false; // used to keep track Invoice Row  failure/correct
//                String[] recarr = csvReader.getValues();
//                
//                if (cnt == 0) {
//                    failedRecords.append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\" \"");
//                } else if (cnt == 1) {
//                    failedRecords.append("\n").append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\"Error Message\"");
//                } else {
//                    try {
//                        String currencyID = requestJobj.getString(Constants.globalCurrencyKey);
//
//                        vendorInvoiceNumber = "";
//                        if (columnConfig.containsKey("vendorInvoiceNumber")) {
//                            vendorInvoiceNumber = recarr[(Integer) columnConfig.get("vendorInvoiceNumber")].replaceAll("\"", "").trim();
//                            if (StringUtil.isNullOrEmpty(vendorInvoiceNumber)) {
//                                failureMsg += "Vendor Invoice Number is not available. ";
//                            }
//                        } else {
//                            failureMsg += "Vendor Invoice Number column is not found. ";
//                        }
//
//                        Date vendorInvoiceDate = null;
//                        if (columnConfig.containsKey("vendorInvoiceDate")) {
//                            String vendorInvoiceDateStr = recarr[(Integer) columnConfig.get("vendorInvoiceDate")].replaceAll("\"", "").trim();
//
//                            if (StringUtil.isNullOrEmpty(vendorInvoiceDateStr)) {
//                                failureMsg += "Vendor Invoice Date is not available. ";
//                            } else {
//                                try {
//                                    vendorInvoiceDate = df.parse(vendorInvoiceDateStr);
//                                } catch (Exception ex) {
//                                    failureMsg += "Incorrect date format for Vendor Invoice Date, Please specify values in " + dateFormat + " format. ";
//                                }
//                            }
//                        } else {
//                            failureMsg += "Vendor Invoice Date column is not found. ";
//                        }
//                        
//                        String supplierInvoiceNo = "";
//                        if (columnConfig.containsKey(Constants.SUPPLIERINVOICENO)) {
//                            supplierInvoiceNo = recarr[(Integer) columnConfig.get(Constants.SUPPLIERINVOICENO)].replaceAll("\"", "").trim();
//                        }
//                        /**
//                         * get and put Cash Purchase related columns details and validation
//                         */
//                        String payMethodId = "";
//                        String ChequeNo = "";
//                        String bankName = "";
//                        String bankNameMasterItemID = "";
//                        Date chequeDate = null;
//                        boolean cleared = false;
//                        Date clearanceDate = null;
//                        String ChequeDesc = "";
//                        if(requestJobj.optBoolean("incash", false)){
//                            //get Payment Method
//                            PaymentMethod payMethod = null;
//                            if (columnConfig.containsKey("paymentmethodid")) {
//                                String paymentMethodStr = recarr[(Integer) columnConfig.get("paymentmethodid")].replaceAll("\"", "").trim();
//                                if (!StringUtil.isNullOrEmpty(paymentMethodStr)) {
//                                    KwlReturnObject retObj = accMasterItemsDAOobj.getPaymentMethodIdFromName(paymentMethodStr, companyID);
//                                    if (retObj != null && !retObj.getEntityList().isEmpty()) {
//                                        payMethod = (PaymentMethod) retObj.getEntityList().get(0);
//                                        payMethodId = payMethod.getID();
//                                    }
//                                    if (payMethod == null) {
//                                        failureMsg += "Payment Method is not found for " + paymentMethodStr + ". ";
//                                    }
//                                } else {
//                                    failureMsg += "Payment Method is not available. ";
//                                }
//                            } else {
//                                failureMsg += "Payment Method column is not found. ";
//                            }
//                            //get Cheque Number
//                            if (columnConfig.containsKey("chequeno")) {
//                                ChequeNo = recarr[(Integer) columnConfig.get("chequeno")].replaceAll("\"", "").trim();
//                            }
//                            //get Bank Name
//                            if (columnConfig.containsKey("bankname")) {
//                                bankName = recarr[(Integer) columnConfig.get("bankname")].replaceAll("\"", "").trim();
//                                if (!StringUtil.isNullOrEmpty(bankName)) {
//                                    KwlReturnObject returnObject = importDao.getBankNameMasterItemName(companyID, bankName);
//                                    if (returnObject.getEntityList().isEmpty()) {
////                                        failureMsg += "Incorrect Bank Name type value for Bank Name. Please add new Bank Name as \"" + bankName + "\" with other details.";
//                                    } else {
//                                        MasterItem masterItem = (MasterItem) returnObject.getEntityList().get(0);
//                                        bankNameMasterItemID = masterItem.getID();
//                                    }
//                                } else {
//                                    if (payMethod != null && payMethod.getDetailType() == Constants.bank_detail_type) {
//                                        failureMsg += "Empty data found in Bank Name, cannot set empty data for Bank Name if Payment Method is selected as Bank.";
//                                    }
//                                }
//                            } else {
//                                if (payMethod != null && payMethod.getDetailType() == Constants.bank_detail_type) {
//                                    failureMsg += "Bank Name column is not found. ";
//                                }
//                            }
//                            //get Cheque Date
//                            if (columnConfig.containsKey("chequedate")) {
//                                String chequeDateStr = recarr[(Integer) columnConfig.get("chequedate")].replaceAll("\"", "").trim();
//                                if (StringUtil.isNullOrEmpty(chequeDateStr)) {
//                                    if (payMethod != null && payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {
//                                        failureMsg += "Cheque Date is not available. ";
//                                    }
//                                } else {
//                                    try {
//                                        chequeDate = df.parse(chequeDateStr);
//                                    } catch (Exception ex) {
//                                        failureMsg += "Incorrect date format for Cheque Date, Please specify values in " + dateFormat + " format. ";
//                                    }
//                                }
//                            } else {
//                                if (payMethod != null && payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {
//                                    failureMsg += "Cheque Date column is not found. ";
//                                }
//                            }
//                            //get Payment Status
//                            if (columnConfig.containsKey("paymentStatus")) {
//                                String paymentStatusStr = recarr[(Integer) columnConfig.get("paymentStatus")].replaceAll("\"", "").trim();
//                                if (StringUtil.isNullOrEmpty(paymentStatusStr)) {
//                                    if (payMethod != null && payMethod.getDetailType() == Constants.bank_detail_type) {
//                                        failureMsg += "Payment Status is not available. ";
//                                    }
//                                } else {
//                                    if (paymentStatusStr.equalsIgnoreCase("Cleared")) {
//                                        cleared = true;
//                                    } else if (paymentStatusStr.equalsIgnoreCase("Uncleared")) {
//                                        cleared = false;
//                                    } else {
//                                        failureMsg += "Incorrect Payment Status type value for Payment Status. It should be either Cleared or Uncleared. ";
//                                    }
//                                }
//                            } else {
//                                if (payMethod != null && payMethod.getDetailType() == Constants.bank_detail_type) {
//                                    failureMsg += "Payment Status column is not found. ";
//                                }
//                            }
//                            //get Clearance Date
//                            if (columnConfig.containsKey("clearanceDate")) {
//                                if (payMethod != null && payMethod.getDetailType() != PaymentMethod.TYPE_CASH && cleared) { // when payment type is other than cash and payment sttus is clear then only need of clerance date. So its validation
//                                    String clearenceDateStr = recarr[(Integer) columnConfig.get("clearanceDate")].replaceAll("\"", "").trim();
//                                    if (!StringUtil.isNullOrEmpty(clearenceDateStr)) {
//                                        try {
//                                            clearanceDate = df.parse(clearenceDateStr);
//                                            if (chequeDate.compareTo(clearanceDate) > 0) {
//                                                failureMsg += "Clearence date should be greter than Cheque date.";
//                                            }
//                                        } catch (ParseException ex) {
//                                            failureMsg += "Incorrect date format for Clearence Date, Please specify values in " + dateFormat + " format.";
//                                        }
//                                    } else {
//                                        failureMsg += "You have entered the Payment Status as Cleared. So you cannot set empty data for Clearence Date.";
//                                    }
//                                }
//                            } else {
//                                if (payMethod != null && payMethod.getDetailType() != PaymentMethod.TYPE_CASH && cleared) {
//                                    failureMsg += "Clearance Date column is not found. ";
//                                }
//                            }
//                            //get Cheque Description
//                            if (columnConfig.containsKey("chequedescription")) {
//                                ChequeDesc = recarr[(Integer) columnConfig.get("chequedescription")].replaceAll("\"", "").trim();
//                            }
//                        }
//                        
//                        String importDeclarationNo = "";
//                        if (columnConfig.containsKey(Constants.importExportDeclarationNo)) {
//                            importDeclarationNo = recarr[columnConfig.get(Constants.importExportDeclarationNo)].replaceAll("\"", "").trim();
//                        }
//
//                        String costCenterID = "";
//                        if (columnConfig.containsKey("costcenter")) {
//                            String costCenterName = recarr[(Integer) columnConfig.get("costcenter")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(costCenterName)) {
//                                costCenterID = accPurchaseOrderModuleServiceObj.getCostCenterIDByName(costCenterName, companyID);
//                                if (StringUtil.isNullOrEmpty(costCenterID)) {
//                                    failureMsg += "Cost Center is not found for name " + costCenterName + ". ";
//                                }
//                            }
//                        }
//
//                        Date dueDate = null;
//                        if (columnConfig.containsKey("dueDate")) {
//                            String dueDateStr = recarr[(Integer) columnConfig.get("dueDate")].replaceAll("\"", "").trim();
//
//                            if (StringUtil.isNullOrEmpty(dueDateStr)) {
//                                failureMsg += "Due Date is not available. ";
//                            } else {
//                                try {
//                                    dueDate = df.parse(dueDateStr);
//                                } catch (Exception ex) {
//                                    failureMsg += "Incorrect date format for Due Date, Please specify values in " + dateFormat + " format. ";
//                                }
//                            }
//                        } else {
//                            failureMsg += "Due Date column is not found. ";
//                        }
//
//                        Date shipDate = null;
//                        if (columnConfig.containsKey("shipdate")) {
//                            String shipDateStr = recarr[(Integer) columnConfig.get("shipdate")].replaceAll("\"", "").trim();
//
//                            if (!StringUtil.isNullOrEmpty(shipDateStr)) {
//                                try {
//                                    shipDate = df.parse(shipDateStr);
//                                } catch (Exception ex) {
//                                    failureMsg += "Incorrect date format for Ship Date, Please specify values in " + dateFormat + " format. ";
//                                }
//                            }
//                        }
//
//                        String vendorID = "";
//                        /*
//                         * 1. Vendor Code
//                         */
//                        if (columnConfig.containsKey("vendorCode")) {
//                            String vendorCode = recarr[(Integer) columnConfig.get("vendorCode")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(vendorCode)) {
//                                Vendor vendor = accPurchaseOrderModuleServiceObj.getVendorByCode(vendorCode, companyID);
//                                if (vendor != null) {
//                                    vendorID = vendor.getID();
//                                } else {
//                                    failureMsg += messageSource.getMessage("acc.field.VendorCodeisnotavailable", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + vendorCode + ". ";
//                                }
//                            }
//                        }
//
//                        /*
//                         * 2. Vendor Name if vendorID is empty it means
//                         * Vendor is not found for given code. so need to
//                         * search data on name
//                         */
//                        if (StringUtil.isNullOrEmpty(vendorID)) {
//                            if (columnConfig.containsKey("VendorName")) {
//                                String vendorName = recarr[(Integer) columnConfig.get("VendorName")].replaceAll("\"", "").trim();
//                                if (!StringUtil.isNullOrEmpty(vendorName)) {
//                                    Vendor vendor = accPurchaseOrderModuleServiceObj.getVendorByName(vendorName, companyID);
//                                    if (vendor != null) {
//                                        vendorID = vendor.getID();
//                                    } else {
//                                        failureMsg += messageSource.getMessage("acc.field.VendorisnotfoundforVendorCodeName", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ". ";
//                                    }
//                                } else {
//                                    failureMsg += messageSource.getMessage("acc.field.VendorisnotfoundforVendorCodeName", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ".";
//                                }
//                            } else {
//                                failureMsg += messageSource.getMessage("acc.field.VendorisnotfoundforVendorCodeName", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ".";
//                            }
//                        }
//
//                        String termID = "";
//                        if (columnConfig.containsKey("term")) {
//                            String termName = recarr[(Integer) columnConfig.get("term")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(termName)) {
//                                termID = accSalesOrderServiceobj.getTermIDByName(termName, companyID);
//                                if (StringUtil.isNullOrEmpty(termID)) {
//                                    failureMsg += "Debit Term is not found for name " + termName + ". ";
//                                }
//                            } else {
//                                failureMsg += "Debit Term is not available. ";
//                            }
//                        } else {
//                            failureMsg += "Debit Term column is not found. ";
//                        }
//
//                        String memo = "";
//                        if (columnConfig.containsKey("memo")) {
//                            memo = recarr[(Integer) columnConfig.get("memo")].replaceAll("\"", "").trim();
//                        }
//
//                        String shipVia = "";
//                        if (columnConfig.containsKey("shipvia")) {
//                            shipVia = recarr[(Integer) columnConfig.get("shipvia")].replaceAll("\"", "").trim();
//                        }
//
//                        String fob = "";
//                        if (columnConfig.containsKey("fob")) {
//                            fob = recarr[(Integer) columnConfig.get("fob")].replaceAll("\"", "").trim();
//                        }
//
//                        String agentID = "";
//                        if (columnConfig.containsKey("agent")) {
//                            String agentName = recarr[(Integer) columnConfig.get("agent")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(agentName)) {
//                                agentID = accPurchaseOrderModuleServiceObj.getAgentIDByName(agentName, companyID);
//                                if (StringUtil.isNullOrEmpty(agentID)) {
//                                    failureMsg += "Agent is not found for name " + agentName + ". ";
//                                }
//                            }
//                        }
//
//                        if (isCurrencyCode ? columnConfig.containsKey("currencyCode") : columnConfig.containsKey("currencyName")) {
//                            String currencyStr = isCurrencyCode ? recarr[(Integer) columnConfig.get("currencyCode")].replaceAll("\"", "").trim() : recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(currencyStr)) {
//                                currencyID = accSalesOrderServiceobj.getCurrencyId(currencyStr, currencyMap);
//
//                                if (StringUtil.isNullOrEmpty(currencyID)) {
//                                    failureMsg += messageSource.getMessage("acc.field.ImportProductExceptionFormat", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ". ";
//                                }
//                            } else {
//                                if (!masterPreference.equalsIgnoreCase("1")) {
//                                    failureMsg += "Currency is not available. ";
//                                }
//                            }
//                        }
//
//                        String consignmentID = "";
//                        if (columnConfig.containsKey("consignmentNumber")) {
//                            String consignmentNumber = recarr[(Integer) columnConfig.get("consignmentNumber")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(consignmentNumber)) {
//                                KwlReturnObject consignmentResult = accGoodsReceiptobj.getReceiptFromNo(consignmentNumber, companyID);
//                                if (consignmentResult.getEntityList() != null && !consignmentResult.getEntityList().isEmpty()) {
//                                    GoodsReceipt goodsReceipt = (GoodsReceipt) consignmentResult.getEntityList().get(0);
//                                    consignmentID = goodsReceipt.getID();
//                                } else {
//                                    failureMsg += "Consignment Number is not found for name " + consignmentNumber + ". ";
//                                }
//                            }
//                        }
//                        
//                        boolean isGenerateGoodsReceipt = false;
//                        if (columnConfig.containsKey("generateGoodsReceipt")) {
//                            String generateGoodsReceipt = recarr[(Integer) columnConfig.get("generateGoodsReceipt")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(generateGoodsReceipt)) {
//                                if (generateGoodsReceipt.equalsIgnoreCase("TRUE")) {
//                                    isGenerateGoodsReceipt = true;
//                                } else if (generateGoodsReceipt.equalsIgnoreCase("FALSE")) {
//                                    isGenerateGoodsReceipt = false;
//                                } else {
//                                    throw new AccountingException("Format you entered for Generate Goods Receipt is not correct. It should be like \"TRUE\" or \"FALSE\"");
//                                }
//                            } else {
//                                isGenerateGoodsReceipt = false;
//                            }
//                        }
//
//                        String goodsReceiptNo = "";
//                        if (columnConfig.containsKey("goodsReceiptNo") && isGenerateGoodsReceipt) {
//                            goodsReceiptNo = recarr[(Integer) columnConfig.get("goodsReceiptNo")].replaceAll("\"", "").trim();
//                            if (StringUtil.isNullOrEmpty(goodsReceiptNo)) {
//                                failureMsg += "Goods Receipt No is not available. ";
//                            } else {
//                                KwlReturnObject groResult = accGoodsReceiptobj.getGoodsReceiptOrderCount(goodsReceiptNo, companyID);
//                                if (groResult.getRecordTotalCount() > 0) {
//                                    failureMsg += "Goods Receipt No " + goodsReceiptNo + " is already exist. ";
//                                }
//                            }
//                        }
//                        
//                        boolean isIncludingGST = false;
//                        if (columnConfig.containsKey("gstIncluded")) {
//                            String isIncludingGSTStr = recarr[(Integer) columnConfig.get("gstIncluded")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(isIncludingGSTStr)) {
//                                if (isIncludingGSTStr.equalsIgnoreCase("TRUE")) {
//                                    isIncludingGST = true;
//                                } else if (isIncludingGSTStr.equalsIgnoreCase("FALSE")) {
//                                    isIncludingGST = false;
//                                } else {
//                                    failureMsg += "Format you entered for Include GST is not correct. It should be like \"TRUE\" or \"FALSE\". ";
//                                }
//                            }
//                        }
//
//                        boolean isIncludeProductTax = false;
//                        if (columnConfig.containsKey("includeprotax")) {
//                            String isIncludeProductTaxStr = recarr[(Integer) columnConfig.get("includeprotax")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(isIncludeProductTaxStr)) {
//                                if (isIncludeProductTaxStr.equalsIgnoreCase("Yes")) {
//                                    isIncludeProductTax = true;
//                                } else if (isIncludeProductTaxStr.equalsIgnoreCase("No")) {
//                                    isIncludeProductTax = false;
//                                } else {
//                                    failureMsg += "Format you entered for Include Product Tax is not correct. It should be like \"Yes\" or \"No\". ";
//                                }
//                            }
//                        }
//
//                        if (isIncludingGST && !isIncludeProductTax) {
//                            failureMsg += "If value Including GST is \"TRUE\" then value of Include Product Tax should be \"Yes\". ";
//                        }
//
//                        boolean isIncludeTotalTax = false;
//                        if (columnConfig.containsKey("taxincluded")) {
//                            String isIncludeTotalTaxStr = recarr[(Integer) columnConfig.get("taxincluded")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(isIncludeTotalTaxStr)) {
//                                if (isIncludeTotalTaxStr.equalsIgnoreCase("Yes")) {
//                                    isIncludeTotalTax = true;
//                                } else if (isIncludeTotalTaxStr.equalsIgnoreCase("No")) {
//                                    isIncludeTotalTax = false;
//                                } else {
//                                    failureMsg += "Format you entered for Include Total Tax is not correct. It should be like \"Yes\" or \"No\". ";
//                                }
//                            }
//                        }
//
//                        if (isIncludeProductTax && isIncludeTotalTax) {
//                            failureMsg += "If value of Include Product Tax is \"Yes\" then value of Include Total Tax should be \"No\".";
//                        }
//
//                        String taxID = "";
//                        if (columnConfig.containsKey("taxid")) {
//                            String taxCode = recarr[(Integer) columnConfig.get("taxid")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(taxCode)) {
//                                Tax tax = getGSTByCode(taxCode, companyID);
//                                if (tax == null) {
//                                    failureMsg += "Tax Code is not found for code " + taxCode;
//                                } else if (!tax.isActivated()) {
//                                    failureMsg += "Tax Code is deactivated " + taxCode;
//                                } else {
//                                    taxID = tax.getID();
//                                    if(tax.getTaxtype()==Constants.SALES_TYPE_TAX && isIncludeTotalTax){
//                                      failureMsg += "Tax Code is not Purchase Type TAX for code " + taxCode;  
//                                    }
//                                }
//                            } else {
//                                if (!isIncludingGST && !isIncludeProductTax && isIncludeTotalTax) {
//                                    failureMsg += "Tax Code is not available. ";
//                                }
//                            }
//                        } else {
//                            if (!isIncludingGST && !isIncludeProductTax && isIncludeTotalTax) {
//                                failureMsg += "Tax Code column is not found. ";
//                            }
//                        }
//
//                        Product product = null;
//                        if (columnConfig.containsKey("productID")) {
//                            String productID = recarr[(Integer) columnConfig.get("productID")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(productID)) {
//                                product = accSalesOrderServiceobj.getProductByProductID(productID, companyID);
//                                if (product == null) {
//                                    if (!masterPreference.equalsIgnoreCase("1")) {
//                                        failureMsg += "Product is not found for " + productID + ". ";
//                                    }
//                                }
//                            } else {
//                                failureMsg += "Product is not available. ";
//                            }
//                        } else {
//                            failureMsg += "Product column is not found. ";
//                        }
//
//                        double quantity = 0;
//                        if (columnConfig.containsKey("quantity")) {
//                            String quantityStr = recarr[(Integer) columnConfig.get("quantity")].replaceAll("\"", "").trim();
//                            if (StringUtil.isNullOrEmpty(quantityStr)) {
//                                failureMsg += "Quantity is not available. ";
//                            } else {
//                                try {
//                                    quantity = authHandler.roundQuantity(Double.parseDouble(quantityStr), companyID);
//                                } catch (Exception ex) {
//                                    failureMsg += "Incorrect numeric value for Quantity, Please ensure that value type of Quantity matches with the Quantity. ";
//                                }
//                            }
//                        } else {
//                            failureMsg += "Quantity column is not found. ";
//                        }
//                        
//                        String unitPriceIncludingGST = "0";
//                        if (columnConfig.containsKey("rateIncludingGst")) {
//                            unitPriceIncludingGST = recarr[(Integer) columnConfig.get("rateIncludingGst")].replaceAll("\"", "").trim();
//                            if (isIncludingGST && StringUtil.isNullOrEmpty(unitPriceIncludingGST)) {
//                                failureMsg += "Unit Price Including GST is not available. ";
//                            }
//                        } else {
//                            if (isIncludingGST) {
//                                failureMsg += "Unit Price Including GST column is not found. ";
//                            }
//                        }
//
//                        double unitPrice = 0;
//                        if (columnConfig.containsKey("rate")) {
//                            String unitPriceStr = recarr[(Integer) columnConfig.get("rate")].replaceAll("\"", "").trim();
//                            if (StringUtil.isNullOrEmpty(unitPriceStr)) {
//                                failureMsg += "Unit Price is not available. ";
//                            } else {
//                                try {
//                                    unitPrice = authHandler.roundQuantity(Double.parseDouble(unitPriceStr), companyID);
//                                } catch (Exception ex) {
//                                    failureMsg += "Incorrect numeric value for Unit Price, Please ensure that value type of Unit Price matches with the Unit Price. ";
//                                }
//                            }
//                        } else {
//                            failureMsg += "Unit Price column is not found. ";
//                        }
//
//                        UnitOfMeasure uom = null;
//                        if (columnConfig.containsKey("uomname")) {
//                            String productUOMName = recarr[(Integer) columnConfig.get("uomname")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(productUOMName)) {
//                                uom = accSalesOrderServiceobj.getUOMByName(productUOMName, companyID);
//                                if (uom == null) {
//                                    if (!masterPreference.equalsIgnoreCase("1")) {
//                                        failureMsg += "Product Unit Of Measure is not found for " + productUOMName + ". ";
//                                    }
//                                }
//                            } else {
//                                if (!masterPreference.equalsIgnoreCase("1")) {
//                                    failureMsg += "Product Unit Of Measure is not available. ";
//                                }
//                            }
//                        }
//
//                        int discountType = 1;
//                        if (columnConfig.containsKey("discountType")) {
//                            String discountTypeStr = recarr[(Integer) columnConfig.get("discountType")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(discountTypeStr)) {
//                                if (discountTypeStr.equalsIgnoreCase("Percentage")) {
//                                    discountType = 1;
//                                } else if (discountTypeStr.equalsIgnoreCase("Flat")) {
//                                    discountType = 0;
//                                } else {
//                                    failureMsg += "Format you entered is not correct. It should be like \"Percentage\" or \"Flat\". ";
//                                }
//                            }  
//                        }
//
//                        double discount = 0;
//                        if (columnConfig.containsKey("discount")) {
//                            String discountStr = recarr[(Integer) columnConfig.get("discount")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(discountStr)) {
//                                try {
//                                    discount = authHandler.round(Double.parseDouble(discountStr), companyID);
//                                } catch (Exception ex) {
//                                    failureMsg += "Incorrect numeric value for Discount, Please ensure that value type of Discount matches with the Discount. ";
//                                }
//                            }
//                        }
//                        
//                        Tax rowtax = null;
//                        if (columnConfig.containsKey("prtaxid")) {
//                            String taxCode = recarr[(Integer) columnConfig.get("prtaxid")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(taxCode)) {
//                                rowtax = getGSTByCode(taxCode, companyID);
//                                if (rowtax == null) {
//                                    failureMsg += "Product Tax is not found for name " + taxCode;
//                                } else if (!rowtax.isActivated()) {
//                                    failureMsg += "Tax Code is deactivated " + taxCode;
//                                } else {
//                                    if(rowtax.getTaxtype()==Constants.SALES_TYPE_TAX && isIncludeProductTax){
//                                      failureMsg += "Tax Code is not Purchase Type TAX for code " + taxCode;  
//                                    }
//                                }
//                            } else {
//                                if (isIncludeProductTax) {
//                                    failureMsg += "Product Tax is not available. ";
//                                }
//                            }
//                        } else {
//                            if (isIncludeProductTax) {
//                                failureMsg += "Product Tax column is not found. ";
//                            }
//                        }
//
//                        String rowtaxamount = "0";
//                        if (columnConfig.containsKey("taxamount")) {
//                            rowtaxamount = recarr[(Integer) columnConfig.get("taxamount")].replaceAll("\"", "").trim();
//                            if (!StringUtil.isNullOrEmpty(rowtaxamount)) {
//                                try {
//                                    double rowtaxamountvalue = Double.parseDouble(rowtaxamount);
//                                    if (rowtaxamountvalue < 0) {
//                                        failureMsg += "Tax Amount should not be negative.";
//                                    }
//                                } catch (Exception ex) {
//                                    failureMsg += "Incorrect numeric value for Tax Amount. ";
//                                }
//                            }
//                        }
//                        
//                        
//                        // Warehouse Location Batch detail validation
//                        Map<String, Object> requestMap = new HashMap<>();
//                        requestMap.put("isGenerateGoodsReceipt", isGenerateGoodsReceipt);
//                        requestMap.put("product", product);
//                        requestMap.put("columnConfig", columnConfig);
//                        requestMap.put("recarr", recarr);
//                        requestMap.put("companyID", companyID);
//                        requestMap.put("failureMsg", failureMsg);
//                        requestMap.put("masterPreference", masterPreference);
//                        requestMap.put("df", df);
//                        requestMap.put("dateFormat", dateFormat);
//                        
//                        boolean isLocationForProduct = false;
//                        boolean isWarehouseForProduct = false;
//                        boolean isBatchForProduct = false;
//                        boolean isSerialForProduct = false;
//                        boolean isRowForProduct = false;
//                        boolean isRackForProduct = false;
//                        boolean isBinForProduct = false;
//                        String mfgdate = null;
//                        String expdate = null;
//                        String expstart = null;
//                        String expend = null;
//                        double batchquantity = 0;
//                        String serialName = "";
//                        String batchName = "";
//                     
//                        InventoryWarehouse warehouseObj = null;
//                        InventoryLocation locationObj = null;
//                        StoreMaster rowObj = null;
//                        StoreMaster rackObj = null;
//                        StoreMaster binObj = null;
//
//                        if (!StringUtil.isNullOrEmpty(consignmentID) && product != null) {
//                            KwlReturnObject productTypeObj = importDao.getProductTypeOfProduct(product.getID(), companyID);
//                            if (productTypeObj.getEntityList() != null && !productTypeObj.getEntityList().isEmpty()) {
//                                String productType = productTypeObj.getEntityList().get(0).toString();
//
//                                if (productType.equalsIgnoreCase(Constants.ASSEMBLY) || productType.equalsIgnoreCase(Constants.INVENTORY_PART)) {
//                                    failureMsg += "Inventory and Assembly Type Product are not allowed in Consignment link case.";
//                                }
//                            }
//                        }
//                        
//                        // creating invoice json
//                        if (!prevInvNo.equalsIgnoreCase(vendorInvoiceNumber) || vendorInvoiceNumber.equalsIgnoreCase("")) {
//                            //If failed invoice then increase failed count and append in failed records string
//                            if (failureList.contains(prevInvNo)) {
//                                if (singleInvoiceFailureRecoredCount > 0) {
//                                    //append record in failed records string
//                                    failedRecords.append(singleInvociceFailedRecords);
//                                }
//                                //Increase failed records count
//                                failed += singleInvoiceFailureRecoredCount;
//                                //reinitialize variables for next record
//                                singleInvociceFailedRecords = new StringBuilder();
//                                singleInvoiceFailureRecoredCount = 0;
//                            }
//                            
//                           if ((rowDetailMap.size() > 0 || rows.length()>0) && !isAlreadyExist && !isRecordFailed) {
//                                double taxamount = 0.0;
//                                if (!StringUtil.isNullOrEmpty(paramJobj.optString("taxid", null))) {
//                                    HashMap<String, Object> taxParams = new HashMap<>();
//                                    taxParams.put("transactiondate", sdf.parse(paramJobj.optString("billdate")));
//                                    taxParams.put("taxid", paramJobj.optString("taxid"));
//                                    taxParams.put("companyid", companyID);
//                                    KwlReturnObject taxResult = accTaxObj.getTax(taxParams);
//                                    Object[] taxRow = (Object[]) taxResult.getEntityList().get(0);
//                                    double taxPercentage = (double) taxRow[1];
//                                    taxamount = ((totalamount - totaldiscount) * taxPercentage) / 100;
//                                    taxamount = authHandler.round(taxamount, companyID);
//                                }
//                                paramJobj.put("taxamount", String.valueOf(taxamount));
//                                paramJobj.remove("isIncludeProductTax");
//                                // on next document saving current documents rows
//                                // If product is not service type and non-inventory type then manipulate rows
//                                if (rowDetailMap.size() > 0 && !(product.getProducttype().getID().equals(Producttype.SERVICE) || product.getProducttype().getID().equals(Producttype.NON_INVENTORY_PART))) {
//                                   Map<String,Object> resultMap= manipulateRowDetails(rowDetailMap, batchSerialMap, batchMap, batchDetailArr, failedRecords, singleInvociceFailedRecords, totalBatchQty, isRecordFailed, rows);
//                                   if(resultMap.containsKey("isRecordFailed")){
//                                       isRecordFailed=(boolean) resultMap.get("isRecordFailed");
//                                       if(isRecordFailed){
//                                            if(!failureList.contains(prevInvNo)) {
//                                                failureList.add(prevInvNo);
//                                            }
//                                            failed += singleInvoiceFailureRecoredCount;
//                                            if (singleInvociceFailedRecords.toString().length() > 0) {
//                                                failedRecords.append(singleInvociceFailedRecords);
//                                            }
//                                       }    
//                                   }
//                                   if(resultMap.containsKey("batchMap")&& resultMap.get("batchMap")!= null){
//                                       batchMap =(Map<String, List<JSONObject>>)resultMap.get("batchMap");
//                                   }   
//                                }
//                                if (!isRecordFailed) {
//                                    paramJobj.put(Constants.detail, rows.toString());
//                                    paramJobj.put(Constants.PAGE_URL,  requestJobj.optString(Constants.PAGE_URL));
//                                    // for save Purchase Invoice
//                                    saveGoodsReceipt(paramJobj);
//                                }
//                            }
//                            prevInvNo = vendorInvoiceNumber;
//                           // reset variables
//                            totaldiscount = 0;
//                            totalamount = 0;
//                            paramJobj = new JSONObject();
//                            rowDetailMap = new HashMap<>();
//                            batchMap = new HashMap<>();
//                            batchSerialMap = new HashMap<>();
//                            batchDetailArr = new JSONArray();
//                            rows = new JSONArray();
//                            isRecordFailed = false;
//                            isAlreadyExist = false;
//                            //below variable are get initialized to give correct failure and sucess
//                            singleInvociceFailedRecords = new StringBuilder();
//                            singleInvoiceFailureRecoredCount = 0;
//                            /**
//                             * Check invoice number exist or not.
//                             * If exist then throw exception with error message.
//                             */
//                            KwlReturnObject result = accGoodsReceiptobj.getReceiptFromNo(vendorInvoiceNumber, companyID);
//                            int nocount = result.getRecordTotalCount();
//                            if (nocount > 0) {
//                                isAlreadyExist = true;
//                                throw new AccountingException("Vendor Invoice number'" + vendorInvoiceNumber + "' already exists.");
//                            }
//
//
//                            // For create custom field array
//                            JSONArray customJArr = accPurchaseOrderModuleServiceObj.createGlobalCustomFieldArrayForImport(requestJobj, jSONArray, recarr, df, Constants.Acc_Vendor_Invoice_ModuleId);
//                            
//                            // For getting exchange rate
//                            double exchangeRateForTransaction = accPurchaseOrderModuleServiceObj.getExchangeRateForTransaction(requestJobj, vendorInvoiceDate, currencyID);
//                            
//                            String sequenceFormatID = "NA";
//                            boolean autogenerated = false;
//                            boolean isFromOtherSource = false;
//                            if (!StringUtil.isNullOrEmpty(vendorInvoiceNumber)) {
//                                int moduleId = requestJobj.optBoolean("incash", false) ? Constants.Acc_Cash_Purchase_ModuleId : Constants.Acc_Vendor_Invoice_ModuleId; 
//                                Map<String, String> sequenceNumberDataMap = new HashMap<String, String>();
//                                sequenceNumberDataMap.put("moduleID", String.valueOf(moduleId));
//                                sequenceNumberDataMap.put("entryNumber", vendorInvoiceNumber);
//                                sequenceNumberDataMap.put("companyID", companyID);
//                                sequenceNumberDataMap.put("isFromImport", "true");
//                                List list = importHandler.checksEntryNumberForSequenceNumber(sequenceNumberDataMap);
//                                if (!list.isEmpty()) {
//                                    boolean isvalidEntryNumber = (Boolean) list.get(0);
//                                    if (!isvalidEntryNumber) {
//                                        String formatID = (String) list.get(2);
//                                        int intSeq = (Integer) list.get(3);
//                                        paramJobj.put(Constants.SEQNUMBER, intSeq);
//                                        paramJobj.put(Constants.SEQFORMAT, formatID);
//                                        autogenerated = true;
//                                        sequenceFormatID = formatID;
//                                        isFromOtherSource = true;
//                                    }
//                                }
//                            }
//
//                            String goodsReceiptSequenceformatID = "NA";
//                            if (!StringUtil.isNullOrEmpty(goodsReceiptNo)) {
//                                Map<String, String> sequenceNumberDataMap = new HashMap<String, String>();
//                                sequenceNumberDataMap.put("moduleID", String.valueOf(Constants.Acc_Goods_Receipt_ModuleId));
//                                sequenceNumberDataMap.put("entryNumber", goodsReceiptNo);
//                                sequenceNumberDataMap.put("companyID", companyID);
//                                sequenceNumberDataMap.put("isFromImport", "true");
//                                List list = importHandler.checksEntryNumberForSequenceNumber(sequenceNumberDataMap);
//                                if (!list.isEmpty()) {
//                                    boolean isvalidEntryNumber = (Boolean) list.get(0);
//                                    if (!isvalidEntryNumber) {
//                                        String formatID = (String) list.get(2);
//                                        int intSeq = (Integer) list.get(3);
//                                        paramJobj.put("DOSeqNum", intSeq);
//                                        goodsReceiptSequenceformatID = formatID;
//                                    }
//                                }
//                            }
//
//                            // param obj
//                            paramJobj.put(Constants.companyKey, companyID);
//                            paramJobj.put(Constants.globalCurrencyKey, requestJobj.getString(Constants.globalCurrencyKey));
//                            paramJobj.put(Constants.useridKey, requestJobj.getString(Constants.useridKey));
//                            paramJobj.put(Constants.lid, requestJobj.getString(Constants.useridKey));
//                            paramJobj.put(Constants.userfullname, requestJobj.getString(Constants.userfullname));
//                            paramJobj.put(Constants.reqHeader, requestJobj.getString(Constants.reqHeader));
//                            paramJobj.put(Constants.remoteIPAddress, requestJobj.getString(Constants.remoteIPAddress));
//                            paramJobj.put(Constants.language, requestJobj.getString(Constants.language));
//                            paramJobj.put(Constants.timezonedifference, requestJobj.optString(Constants.timezonedifference));
//                            paramJobj.put(Constants.currencyKey, currencyID);
//                            // request map for save goods receipt  
//                            paramJobj.put("locale", locale);
//                            paramJobj.put("customfield", customJArr.toString());
//                            paramJobj.put("companyid", companyID);
//                            paramJobj.put("df", dateOnlydf);
//                            paramJobj.put("userid", requestJobj.getString(Constants.useridKey));
//                            paramJobj.put("agent", agentID);
//                            if (isGenerateGoodsReceipt == true) {
//                                paramJobj.put("autogenerateDO", "on");
//                                paramJobj.put("isAutoCreateDO", "true");
//                                paramJobj.put("fromLinkComboAutoDO", "Vendor Invoice");
//                            }
//                            paramJobj.put("billdate", sdf.format(vendorInvoiceDate));
//                            paramJobj.put(Constants.SUPPLIERINVOICENO, supplierInvoiceNo);
//                            //put cash purchase related fields
//                            if(requestJobj.optBoolean("incash", false)){
//                                //create payment details json
//                                JSONObject payDetail = new JSONObject();
//                                payDetail.put("chequeno", ChequeNo);
//                                payDetail.put("description",ChequeDesc);
//                                payDetail.put("bankname", bankName);
//                                payDetail.put("paymentStatus", cleared ? "Cleared" : "Uncleared");
//                                payDetail.put("bankmasteritemid", bankNameMasterItemID);
//                                payDetail.put("payDate", chequeDate != null ? sdf.format(chequeDate) : "");
//                                payDetail.put("clearanceDate", clearanceDate != null ? sdf.format(clearanceDate) : "");
//                                //put payment method details in map
//                                paramJobj.put("pmtmethod", payMethodId);
//                                paramJobj.put("paydetail", payDetail.toString());
//                            }
//                            paramJobj.put(Constants.importExportDeclarationNo, importDeclarationNo);
//                            paramJobj.put("costcenter", costCenterID);
//                            paramJobj.put("currencyid", currencyID);
//                            paramJobj.put("duedate", sdf.format(dueDate));
//                            paramJobj.put("externalcurrencyrate", String.valueOf(exchangeRateForTransaction));
//                            paramJobj.put("fob", fob);
//                            paramJobj.put("landedInvoiceID", consignmentID);
//                            paramJobj.put("landedInvoiceNumber", consignmentID);
//                            paramJobj.put("memo", memo);
//                            paramJobj.put("number", vendorInvoiceNumber);
//                            paramJobj.put("numberDo", goodsReceiptNo);
//                            paramJobj.put("sequenceformat", sequenceFormatID);
//                            paramJobj.put("autogenerated", autogenerated);
//                            paramJobj.put("isFromOtherSource", isFromOtherSource);
//                            paramJobj.put("sequenceformatDo", goodsReceiptSequenceformatID);
//                            if (shipDate != null) {
//                                paramJobj.put("shipdate", sdf.format(shipDate));
//                            }
//                            paramJobj.put("shipvia", shipVia);
//                            paramJobj.put("term", termID);
//                            paramJobj.put("termid", termID);
//                            paramJobj.put("vendor", vendorID);
//                            paramJobj.put("istemplate", "0");
//                            paramJobj.put("defaultAdress", "true");
//                            paramJobj.put("seqformat_oldflag", "false");
//                            paramJobj.put("seqformat_oldflagDo", "false");
//                            paramJobj.put("fromLinkCombo", "");
//                            paramJobj.put("linkNumber", "");
//                            paramJobj.put("termsincludegst", "false");
//                            paramJobj.put("taxamount", "0");
//                            paramJobj.put("incash", requestJobj.optString("incash", "false"));
//                            paramJobj.put("includeprotax", String.valueOf(isIncludeProductTax));
//                            paramJobj.put("includingGST", String.valueOf(isIncludingGST));
//                            paramJobj.put("isAllowToEdit", "false");
//                            paramJobj.put("isCapitalGoodsAcquired", "false");
//                            paramJobj.put("isDraft", "false");
//                            paramJobj.put("isEdit", "false");
//                            paramJobj.put("isExciseInvoice", "false");
//                            paramJobj.put("isLinkedTransaction", "false");
//                            paramJobj.put("isMRPSalesOrder", "false");
//                            paramJobj.put("isOpeningBalanceOrder", "false");
//                            paramJobj.put("isRetailPurchase", "false");
//                            paramJobj.put("isfavourite", "false");
//                            paramJobj.put("islockQuantity", "false");
//                            paramJobj.put("partialinv", "false");
//                            paramJobj.put("perdiscount", "false");
//                            paramJobj.put("moduletempname", "false");
//                            paramJobj.put("invoicetermsmap", "[]");
//                            paramJobj.put("shipLength", "1");
//                            paramJobj.put("copyInv", "");
//                            
//                            if (isIncludeTotalTax) {
//                                paramJobj.put("taxid", taxID);
//                            } else {
//                                paramJobj.put("taxid", "");
//                            }
//                            
//                            paramJobj.put("template", "");
//                            paramJobj.put("templatename", "");
//                            paramJobj.put("validdate", "");
//                            paramJobj.put("shippingterm", "");
//                            paramJobj.put("podept", "");
//                            paramJobj.put("posttext", "");
//                            paramJobj.put("poyourref", "");
//                            paramJobj.put("project", "");
//                            paramJobj.put("requestor", "");
//                            paramJobj.put("manufacturerType", "");
//                            paramJobj.put("RMCDApprovalNo", "");
//                            paramJobj.put("customerporefno", "");
//                            paramJobj.put("defaultnatureofpurchase", "");
//                            paramJobj.put("deletedLinkedDocumentId", "");
//                            paramJobj.put("deliveryTime", "");
//                            paramJobj.put("delydate", "");
//                            paramJobj.put("delyterm", "");
//                            paramJobj.put("discount", "0");
//                            paramJobj.put("doid", "");
//                            paramJobj.put("excisetypeid", "");
//                            paramJobj.put("formtypeid", "");
//                            paramJobj.put("gstCurrencyRate", "0");
//                            paramJobj.put("importService", "false");
//                            paramJobj.put("invoiceto", "");
//                            paramJobj.put("invoicetype", "");
//                            paramJobj.put("isselfbilledinvoice", "");
//                            paramJobj.put("merno", "");
//                            paramJobj.put("mode", "11");
//                            paramJobj.put("isIncludeProductTax", isIncludeProductTax);
//                            
//                            SimpleDateFormat formatter = (SimpleDateFormat) authHandler.getGlobalDateFormat();
//                            paramJobj.put(Constants.Checklocktransactiondate, formatter.format(vendorInvoiceDate));
//                            
//                            Map<String, Object> requestParams = new HashMap<>();
//                            requestParams.put(Constants.companyKey, companyID);
//                            CompanyPreferencesCMN.checkLockPeriod(accCompanyPreferencesObj, requestParams, vendorInvoiceDate, false);
//                        } // end global details
//                        /**
//                         * Validate warehouse, location, batch, serial, row, rack, bin, batch quantity etc.
//                         */
//                        if(isGenerateGoodsReceipt && product != null && (product.isIswarehouseforproduct() && product.isIslocationforproduct())){
//                            Map <String,Object> returnMap = accProductModuleService.validateBatchSerialDetail(requestMap);
//                            if(returnMap.containsKey("isWarehouseForProduct") && returnMap.get("isWarehouseForProduct")!= null){
//                                isWarehouseForProduct=(boolean) returnMap.get("isWarehouseForProduct");
//                            }
//                            if(returnMap.containsKey("isLocationForProduct") && returnMap.get("isLocationForProduct")!= null){
//                                isLocationForProduct=(boolean) returnMap.get("isLocationForProduct");
//                            }
//                            if(returnMap.containsKey("isBatchForProduct") && returnMap.get("isBatchForProduct")!= null){
//                                isBatchForProduct=(boolean) returnMap.get("isBatchForProduct");
//                            }
//                            if(returnMap.containsKey("isSerialForProduct") && returnMap.get("isSerialForProduct")!= null){
//                                isSerialForProduct=(boolean) returnMap.get("isSerialForProduct");
//                            }
//                            if(returnMap.containsKey("isRowForProduct") && returnMap.get("isRowForProduct")!= null){
//                                isRowForProduct=(boolean) returnMap.get("isRowForProduct");
//                            }
//                            if(returnMap.containsKey("isRackForProduct") && returnMap.get("isRackForProduct")!= null){
//                                isRackForProduct=(boolean) returnMap.get("isRackForProduct");
//                            }
//                            if(returnMap.containsKey("isBinForProduct") && returnMap.get("isBinForProduct")!= null){
//                                isBinForProduct=(boolean) returnMap.get("isBinForProduct");
//                            }
//                            if(returnMap.containsKey("warehouseObj") && returnMap.get("warehouseObj")!= null){
//                                warehouseObj=(InventoryWarehouse) returnMap.get("warehouseObj");
//                            }
//                            if(returnMap.containsKey("locationObj") && returnMap.get("locationObj")!= null){
//                                locationObj=(InventoryLocation) returnMap.get("locationObj");
//                            }
//                            if(returnMap.containsKey("rowObj") && returnMap.get("rowObj")!= null){
//                                rowObj=(StoreMaster) returnMap.get("rowObj");
//                            }
//                            if(returnMap.containsKey("rackObj") && returnMap.get("rackObj")!= null){
//                                rackObj=(StoreMaster) returnMap.get("rackObj");
//                            }
//                            if(returnMap.containsKey("binObj") && returnMap.get("binObj")!= null){
//                                binObj=(StoreMaster) returnMap.get("binObj");
//                            }
//                            if(returnMap.containsKey("mfgdate") && returnMap.get("mfgdate")!= null){
//                                mfgdate=(String) returnMap.get("mfgdate");
//                            }
//                            if(returnMap.containsKey("expdate") && returnMap.get("expdate")!= null){
//                                expdate=(String) returnMap.get("expdate");
//                            }
//                            if(returnMap.containsKey("expstart") && returnMap.get("expstart")!= null){
//                                expstart=(String) returnMap.get("expstart");
//                            }
//                            if(returnMap.containsKey("expend") && returnMap.get("expend")!= null){
//                                expend=(String) returnMap.get("expend");
//                            }
//                            if(returnMap.containsKey("batchName") && returnMap.get("batchName")!= null){
//                                batchName=(String) returnMap.get("batchName");
//                            }
//                            if(returnMap.containsKey("serialName") && returnMap.get("serialName")!= null){
//                                serialName=(String) returnMap.get("serialName");
//                            }
//                            if (returnMap.containsKey("failureMsg") && returnMap.get("failureMsg") != null) {
//                                failureMsg = (String) returnMap.get("failureMsg");
//                            }
//                            if(returnMap.containsKey("batchquantity") && returnMap.get("batchquantity")!= null){
//                                batchquantity=(double) returnMap.get("batchquantity");
//                                totalBatchQty+=batchquantity;
//                            }
//                            if (prevRow.equalsIgnoreCase("") || !prevRow.equalsIgnoreCase(vendorInvoiceNumber + product.getProductid() + unitPrice)) {
//                                prevRow = vendorInvoiceNumber + product.getProductid() + unitPrice;
//                                totalBatchQty = batchquantity;
//                            }
//                            if (totalBatchQty > quantity) {
//                                failureMsg += "Batch Quantity can't be greater than Product Quantity. ";
//                            }                            
//                        }
//                        
//                        //Throw exception with error message if failure message is available
//                        if (!StringUtil.isNullOrEmpty(failureMsg)) {
//                            throw new AccountingException(failureMsg);
//                        }
//
//                        double conversionFactor = 1;
//                        // Add Custom fields details of line items
//                        JSONArray lineCustomJArr = accPurchaseOrderModuleServiceObj.createLineLevelCustomFieldArrayForImport(requestJobj, jSONArray, recarr, df, Constants.Acc_Vendor_Invoice_ModuleId);
//                        
//                        String key = vendorInvoiceNumber + product.getProductid() + unitPrice;
//                        JSONObject obj=new JSONObject();
//                        if(!isRecordFailed){
//                        if(isGenerateGoodsReceipt  && (product.isIswarehouseforproduct() && product.isIslocationforproduct())){   // For batch Serial Flow
//                            String newLineLevelKey = key;
//                            if(isWarehouseForProduct && warehouseObj != null ){
//                                key=key+warehouseObj.getName();
//                                obj.put("warehouse", warehouseObj.getId());
//                            }
//                            if(isLocationForProduct && locationObj != null){
//                                key=key+locationObj.getName();
//                                obj.put("location", locationObj.getId());
//                            }
//                            if (isRowForProduct && rowObj != null) {
//                                obj.put("row", rowObj.getId());
//                            }
//                            if (isRackForProduct && rackObj != null) {
//                                obj.put("rack", rackObj.getId());
//                            }
//                            if (isBinForProduct && binObj != null) {
//                                obj.put("bin", binObj.getId());
//                            }
//                            obj.put("quantity", batchquantity);   
//                            obj.put("isBatchForProduct", isBatchForProduct);
//                            if(isBatchForProduct){
//                                obj.put("batch", batchName);
//                                obj.put("mfgdate", mfgdate );
//                                obj.put("expdate", expdate );
//                                obj.put("isSerialForProduct", isSerialForProduct);
//                                
//                                
//                                 String batchKey=isBatchForProduct ?key+batchName :key;
//                                 if (batchMap.containsKey(batchKey)) {
//                                    List<JSONObject> list = batchMap.get(batchKey);
//                                    list.add(obj);
//                                    batchMap.put(batchKey, list);
//                                } else {
//                                    List<JSONObject> list = new ArrayList<>();
//                                    list.add(obj);
//                                    batchMap.put(batchKey, list);
//                                }
//                            }
//                            if(isSerialForProduct){
//                                obj.put("serialno", serialName);
//                                obj.put("serialnoid", "");
//                                obj.put("expstart",  expstart);
//                                obj.put("expend",  expend );
//                                
//                                String batchKey=isBatchForProduct ?key+batchName :key;     
//                                if(batchSerialMap.containsKey(batchKey)){
//                                   List<Object> list=batchSerialMap.get(batchKey);
//                                   list.add(serialName);
//                                    batchSerialMap.put(batchKey, list);
//                                }else{
//                                   List<Object> list=new ArrayList<>();
//                                   list.add(serialName);
//                                   batchSerialMap.put(batchKey, list);
//                                }
//                            }
//                            
//                            if (!rowDetailMap.containsKey(newLineLevelKey)) {
//                                if (rowDetailMap.size() > 0){
//                                    Map<String,Object> resultMap= manipulateRowDetails(rowDetailMap, batchSerialMap, batchMap, batchDetailArr, failedRecords, singleInvociceFailedRecords, totalBatchQty, isRecordFailed, rows);
//                                    if (resultMap.containsKey("isRecordFailed")) {
//                                        isRecordFailed = (boolean) resultMap.get("isRecordFailed");
//                                        if (isRecordFailed) {
//                                            if(!failureList.contains(vendorInvoiceNumber)) {
//                                                failureList.add(vendorInvoiceNumber);
//                                            }
//                                            paramJobj = new JSONObject();
//                                            rows = new JSONArray();
//                                        }
//                                    }
//                                    if (resultMap.containsKey("batchMap") && resultMap.get("batchMap") != null) {
//                                        batchMap = (Map<String, List<JSONObject>>) resultMap.get("batchMap");
//                                    }
//                                    rowDetailMap = new HashMap<>();
//                                    batchSerialMap = new HashMap<>();
//                                    batchDetailArr = new JSONArray();
//                                }
//                                
//                                if (!isRecordFailed) {
//                                    JSONObject invdData = new JSONObject();
//                                    invdData.put("priceSource", "");
//                                    invdData.put("dependentType", "");
//                                    invdData.put("inouttime", "");
//                                    invdData.put("showquantity", "");
//                                    invdData.put(DESC, (product != null && !StringUtil.isNullOrEmpty(product.getDescription())) ? product.getDescription() : "");
//                                    invdData.put("supplierpartnumber", "");
//                                    invdData.put("invstore", "");
//                                    invdData.put("invlocation", "");
//                                    invdData.put("permit", "");
//                                    invdData.put("gstCurrencyRate", "0.0");
//                                    invdData.put("linkto", "");
//                                    invdData.put("rowid", "");
//                                    invdData.put("savedrowid", "");
//                                    invdData.put(RATE, String.valueOf(authHandler.roundUnitPrice(unitPrice, companyID)));
//                                    if (isIncludingGST) {
//                                        invdData.put("rateIncludingGst", String.valueOf(authHandler.roundUnitPrice(Double.parseDouble(unitPriceIncludingGST), companyID)));
//                                    }
//                                    invdData.put(PRODUCTID, (product != null) ? product.getID() : "");
//                                    invdData.put("quantity", String.valueOf(authHandler.roundQuantity(quantity, companyID)));
//                                    invdData.put("uomid", (uom != null) ? uom.getID() : "");
//                                    invdData.put("baseuomquantity", String.valueOf(authHandler.roundQuantity(quantity * conversionFactor, companyID)));
//                                    invdData.put(PRDISCOUNT, String.valueOf(discount));
//                                    invdData.put("discountispercent", String.valueOf(discountType));
//                                    if (paramJobj.has("isIncludeProductTax") && paramJobj.optBoolean("isIncludeProductTax") == true && rowtax != null) {
//                                        invdData.put("prtaxid", rowtax.getID());
//                                        invdData.put("taxamount", rowtaxamount);
//                                    } else {
//                                        invdData.put("prtaxid", "");
//                                        invdData.put("taxamount", "0");
//                                    }
//
//                                    invdData.put("taxpercent", 0);
//                                    invdData.put("LineTermdetails", "");
//                                    invdData.put("productcustomfield", "[{}]");
//                                    invdData.put("productMRP", "");
//                                    invdData.put("valuationType", "");
//                                    invdData.put("reortingUOMExcise", "");
//                                    invdData.put("reortingUOMSchemaExcise", "");
//                                    invdData.put("valuationTypeVAT", "");
//                                    invdData.put("reportingUOMVAT", "");
//                                    invdData.put("reportingUOMSchemaVAT", "");
//                                    invdData.put("recTermAmount", "");
//                                    invdData.put("OtherTermNonTaxableAmount", "");
//                                    invdData.put("changedQuantity", String.valueOf(authHandler.roundQuantity(quantity, companyID)));
//                                    invdData.put("baseuomrate", String.valueOf(conversionFactor));
//                                    invdData.put("customfield", lineCustomJArr.toString());
//
//                                    double rate = authHandler.roundUnitPrice(unitPrice, companyID);
//                                    if (paramJobj.has("includingGST") && paramJobj.optString("includingGST").equalsIgnoreCase("true") && !StringUtil.isNullOrEmpty(unitPriceIncludingGST)) {
//                                        rate = authHandler.roundUnitPrice(Double.parseDouble(unitPriceIncludingGST), companyID);
//                                    }
//                                    double rowAmount = authHandler.round(rate * authHandler.round(quantity, companyID), companyID);
//                                    rowAmount = authHandler.round(rowAmount, companyID);
//                                    totalamount += rowAmount;
//
//                                    double rowdiscount = discount;
//                                    if (discountType == 1) { // for percent disc
//                                        rowdiscount = (rowAmount * discount) / 100;
//                                    }
//                                    rowdiscount = authHandler.round(rowdiscount, companyID);
//                                    totaldiscount += rowdiscount;
//                                    rowDetailMap.put(newLineLevelKey, invdData);
//                                    batchDetailArr.put(obj);
//                                }
//                            } else {
//                                batchDetailArr.put(obj);
//                            }
//                        }else{
//                           // for already existing row having batch details and next product don't have batchdetails. to first row details then process current 
//                            if (rowDetailMap.size() > 0) {
//                                Map<String, Object> resultMap = manipulateRowDetails(rowDetailMap, batchSerialMap, batchMap, batchDetailArr, failedRecords, singleInvociceFailedRecords, totalBatchQty, isRecordFailed, rows);
//                                if (resultMap.containsKey("isRecordFailed")) {
//                                    isRecordFailed = (boolean) resultMap.get("isRecordFailed");
//                                    if (isRecordFailed) {
//                                        if(!failureList.contains(vendorInvoiceNumber)) {
//                                            failureList.add(vendorInvoiceNumber);
//                                        }
//                                        paramJobj = new JSONObject();
//                                        rows = new JSONArray();
//                                    } 
//                                }
//                                if (resultMap.containsKey("batchMap") && resultMap.get("batchMap") != null) {
//                                    batchMap = (Map<String, List<JSONObject>>) resultMap.get("batchMap");
//                                }
//                                rowDetailMap = new HashMap<>();
//                                batchSerialMap = new HashMap<>();
//                                batchDetailArr = new JSONArray();
//                            }
//                            
//                            if (!isRecordFailed) {
//                                // For Normal Flow
//                                JSONObject invdData = new JSONObject();
//                                invdData.put("priceSource", "");
//                                invdData.put("dependentType", "");
//                                invdData.put("inouttime", "");
//                                invdData.put("showquantity", "");
//                                invdData.put(DESC, (product != null && !StringUtil.isNullOrEmpty(product.getDescription())) ? product.getDescription() : "");
//                                invdData.put("supplierpartnumber", "");
//                                invdData.put("invstore", "");
//                                invdData.put("invlocation", "");
//                                invdData.put("permit", "");
//                                invdData.put("gstCurrencyRate", "0.0");
//                                invdData.put("linkto", "");
//                                invdData.put("rowid", "");
//                                invdData.put("savedrowid", "");
//                                invdData.put(RATE, String.valueOf(authHandler.roundUnitPrice(unitPrice, companyID)));
//                                if (isIncludingGST) {
//                                    invdData.put("rateIncludingGst", String.valueOf(authHandler.roundUnitPrice(Double.parseDouble(unitPriceIncludingGST), companyID)));
//                                }
//                                invdData.put(PRODUCTID, (product != null) ? product.getID() : "");
//                                invdData.put("quantity", String.valueOf(authHandler.roundQuantity(quantity, companyID)));
//                                invdData.put("uomid", (uom != null) ? uom.getID() : "");
//                                invdData.put("baseuomquantity", String.valueOf(authHandler.roundQuantity(quantity * conversionFactor, companyID)));
//                                invdData.put(PRDISCOUNT, String.valueOf(discount));
//                                invdData.put("discountispercent", String.valueOf(discountType));
//                                if (paramJobj.has("isIncludeProductTax") && paramJobj.optBoolean("isIncludeProductTax") == true && rowtax != null) {
//                                    invdData.put("prtaxid", rowtax.getID());
//                                    invdData.put("taxamount", rowtaxamount);
//                                } else {
//                                    invdData.put("prtaxid", "");
//                                    invdData.put("taxamount", "0");
//                                }
//
//                                invdData.put("taxpercent", 0);
//                                invdData.put("LineTermdetails", "");
//                                invdData.put("productcustomfield", "[{}]");
//                                invdData.put("productMRP", "");
//                                invdData.put("valuationType", "");
//                                invdData.put("reortingUOMExcise", "");
//                                invdData.put("reortingUOMSchemaExcise", "");
//                                invdData.put("valuationTypeVAT", "");
//                                invdData.put("reportingUOMVAT", "");
//                                invdData.put("reportingUOMSchemaVAT", "");
//                                invdData.put("recTermAmount", "");
//                                invdData.put("OtherTermNonTaxableAmount", "");
//                                invdData.put("changedQuantity", String.valueOf(authHandler.roundQuantity(quantity, companyID)));
//                                invdData.put("baseuomrate", String.valueOf(conversionFactor));
//                                invdData.put("customfield", lineCustomJArr.toString());
//
//                                double rate = authHandler.roundUnitPrice(unitPrice, companyID);
//                                if (paramJobj.has("includingGST") && paramJobj.optString("includingGST").equalsIgnoreCase("true") && !StringUtil.isNullOrEmpty(unitPriceIncludingGST)) {
//                                    rate = authHandler.roundUnitPrice(Double.parseDouble(unitPriceIncludingGST), companyID);
//                                }
//                                double rowAmount = authHandler.round(rate * authHandler.roundQuantity(quantity, companyID), companyID);
//                                rowAmount = authHandler.round(rowAmount, companyID);
//                                totalamount += rowAmount;
//
//                                double rowdiscount = discount;
//                                if (discountType == 1) { // for percent disc
//                                    rowdiscount = (rowAmount * discount) / 100;
//                                }
//                                rowdiscount = authHandler.round(rowdiscount, companyID);
//                                totaldiscount += rowdiscount;
//                                rows.put(invdData);
//                            }
//                        }
//                        }
//
//                    } catch (Exception ex) {
////                        failed++;
//                        isRecordFailed = true;
//                        isfailurerecord = true;
//                        String errorMsg = "";
//                        if (ex.getMessage() != null) {
//                            errorMsg = ex.getMessage();
//                        } else if (ex.getCause() != null) {
//                            errorMsg = ex.getCause().getMessage();
//                        }
//                        if(!failureList.contains(vendorInvoiceNumber)) {
//                            if(singleInvoiceFailureRecoredCount > 0 ){
//                                failedRecords.append(singleInvociceFailedRecords);
//                                singleInvociceFailedRecords = new StringBuilder();
//                            }
////                                failed += singleInvoiceFailureRecoredCount;
//                            prevInvNo = vendorInvoiceNumber;
//                            failureList.add(vendorInvoiceNumber);
//                        }
//                        singleInvoiceFailureRecoredCount++;
//                        singleInvociceFailedRecords.append("\n").append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\"").append(errorMsg.replaceAll("\"", "")).append("\"");
//                    }
//                    if (!isfailurerecord) {
//                        singleInvoiceFailureRecoredCount++;
//                        singleInvociceFailedRecords.append("\n").append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\"").append(" ").append("\"");
//                    }                    
//                    total++;
//                }
//                cnt++;
//            }
//
//            // save PI for last record
//            if (!isAlreadyExist && !isRecordFailed) {
//                double taxamount = 0.0;
//                if (!StringUtil.isNullOrEmpty(paramJobj.optString("taxid"))) {
//                    HashMap<String, Object> taxParams = new HashMap<>();
//                    taxParams.put("transactiondate", sdf.parse(paramJobj.optString("billdate")));
//                    taxParams.put("taxid", paramJobj.optString("taxid"));
//                    taxParams.put("companyid", companyID);
//                    KwlReturnObject taxResult = accTaxObj.getTax(taxParams);
//                    Object[] taxRow = (Object[]) taxResult.getEntityList().get(0);
//                    double taxPercentage = (double) taxRow[1];
//                    taxamount = ((totalamount - totaldiscount) * taxPercentage) / 100;
//                    taxamount = authHandler.round(taxamount, companyID);
//                }
//                paramJobj.put("taxamount", String.valueOf(taxamount));
//                paramJobj.remove("isIncludeProductTax");
//                Map<String, Object> resultMap = manipulateRowDetails(rowDetailMap, batchSerialMap, batchMap, batchDetailArr, failedRecords, singleInvociceFailedRecords, totalBatchQty, isRecordFailed, rows);
//                if (resultMap.containsKey("isRecordFailed")) {
//                isRecordFailed = (boolean) resultMap.get("isRecordFailed");
//                if (!isRecordFailed) {
//                    rowDetailMap = new HashMap<>();
//                    batchSerialMap = new HashMap<>();
//                    batchDetailArr = new JSONArray();
//
//                }
//                }
//                if (resultMap.containsKey("batchMap") && resultMap.get("batchMap") != null) {
//                    batchMap = (Map<String, List<JSONObject>>) resultMap.get("batchMap");
//                }
//
//                if(!isRecordFailed){
//                    
//                    paramJobj.put(Constants.detail, rows.toString());
//                    paramJobj.put(Constants.PAGE_URL,  requestJobj.optString(Constants.PAGE_URL));
//                    // for save Purchase Invoice
//                    saveGoodsReceipt(paramJobj);
//                }
//            }
//            
//             if (isRecordFailed) {// only if last invoice is failed
//                failed += singleInvoiceFailureRecoredCount; // last interation failure record
//                if (singleInvociceFailedRecords.toString().length() > 0) {
//                    failedRecords.append(singleInvociceFailedRecords);
//                }
//            }
//
//            if (failed > 0) {
//                importHandler.createFailureFiles(fileName, failedRecords, ".csv");
//            }
//
//            int success = total - failed;
//            if (total == 0) {
//                msg = "Empty file.";
//            } else if (success == 0) {
//                msg = "Failed to import all the records.";
//            } else if (success == total) {
//                msg = "All records are imported successfully.";
//            } else {
//                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
//                msg += (failed == 0 ? "." : " and failed to import " + failed + " record" + (failed > 1 ? "s" : "") + ".");
//            }
//        } catch (Exception ex) {
//            issuccess = false;
//            msg = "" + ex.getMessage();
//
//            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
//            throw new AccountingException("Error While Importing Records.");
//        } finally {
//            fileInputStream.close();
//            csvReader.close();
//            
//            // For saving import log
//            accPurchaseOrderModuleServiceObj.saveImportLog(requestJobj, msg, total, failed, Constants.Acc_Vendor_Invoice_ModuleId);
//
//            try {
//                returnObj.put("success", issuccess);
//                returnObj.put("msg", msg);
//                returnObj.put("totalrecords", total);
//                returnObj.put("successrecords", total - failed);
//                returnObj.put("failedrecords", failed);
//                returnObj.put("filename", ImportLog.getActualFileName(fileName));
//                returnObj.put("Module", Constants.Acc_Vendor_Invoice_ModuleId);
//            } catch (JSONException ex) {
//                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
//            }
//        }
//
//        return returnObj;
//    }
    
    @Override
    public JSONObject importExpenseInvoiceJSON(JSONObject paramJobj) {
        JSONObject jobj = new JSONObject();
        try {
            String doAction = paramJobj.getString("do");

            if (doAction.compareToIgnoreCase("import") == 0) {
                jobj = importExpenseInvoiceRecordsForCSV(paramJobj);
            } else if (doAction.compareToIgnoreCase("validateData") == 0) {
                String eParams = paramJobj.getString("extraParams");
                JSONObject extraParams = StringUtil.isNullOrEmpty(eParams) ? new JSONObject() : new JSONObject(eParams);

                HashMap<String, Object> requestParams = importHandler.getImportRequestParams(paramJobj);
                requestParams.put("extraParams", extraParams);
                requestParams.put("extraObj", null);
                requestParams.put("servletContext", paramJobj.get("servletContext"));
                requestParams.put("isExpenseInvoiceImport", paramJobj.optBoolean("isExpenseInvoiceImport",false));
                requestParams.put("incash", paramJobj.optBoolean("incash",false));

                jobj = importHandler.validateFileData(requestParams);
                jobj.put("success", true);
            }
        } catch (Exception ex) {
            try {
                jobj.put("success", false);
                jobj.put("msg", "" + ex.getMessage());
            } catch (JSONException jex) {
                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, jex);
            }
        }
        return jobj;
    }

    
    
    public JSONObject importExpenseInvoiceRecordsForCSV(JSONObject requestJobj) throws AccountingException, IOException, JSONException {
        JSONObject returnObj = new JSONObject();
        String msg = "";
        int total = 0, failed = 0;
        String fileName = requestJobj.getString("filename");
        String companyID = requestJobj.getString(Constants.companyKey);
        String masterPreference = requestJobj.getString("masterPreference");
        Locale locale = (Locale) requestJobj.get("locale");
        boolean issuccess = true;
        boolean isAlreadyExist = false;
        boolean isRecordFailed = false;
        FileInputStream fileInputStream = null;
        CsvReader csvReader = null;
        JSONObject paramJobj = new JSONObject();
        JSONArray rows = new JSONArray();
        String vendorInvoiceNumber = "";
        String prevInvNo = "";
        String prevRow = "";
        double totaldiscount = 0, totalamount = 0;
        double subTotal = 0;

        try {
            String dateFormat = null, dateFormatId = requestJobj.getString("dateFormat");
            if (!StringUtil.isNullOrEmpty(dateFormatId)) {
                KwlReturnObject kdfObj = accountingHandlerDAOobj.getObject(KWLDateFormat.class.getName(), dateFormatId);
                KWLDateFormat kdf = (KWLDateFormat) kdfObj.getEntityList().get(0);

                dateFormat = kdf != null ? kdf.getJavaForm() : null;
            }
            DateFormat df = new SimpleDateFormat(dateFormat);
            df.setLenient(false);
            requestJobj.put(Constants.importdf, df); //sending this format for Processing batch details

            SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");
            DateFormat dateOnlydf = null;
            if (requestJobj.has(Constants.df) && requestJobj.get(Constants.df) != null) {
                dateOnlydf = (DateFormat) requestJobj.get(Constants.df);
            }

            KwlReturnObject extraPref = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyID);
            ExtraCompanyPreferences extrareferences = (ExtraCompanyPreferences) extraPref.getEntityList().get(0);
            Boolean isCurrencyCode = extrareferences.isCurrencyCode();

            String destinationDirectory = storageHandlerImpl.GetDocStorePath() + "importplans";
            File filePath = new File(destinationDirectory + File.separator + fileName);
            fileInputStream = new FileInputStream(filePath);
            String delimiterType = requestJobj.getString("delimiterType");
            csvReader = new CsvReader(new InputStreamReader(fileInputStream), delimiterType);

            JSONObject resjson = new JSONObject(requestJobj.getString("resjson"));
            JSONArray jSONArray = resjson.getJSONArray("root");
            HashMap<String, Integer> columnConfig = new HashMap<>();
            for (int i = 0; i < jSONArray.length(); i++) { // Map the column config with csv column 
                JSONObject jSONObject = jSONArray.getJSONObject(i);
                columnConfig.put(jSONObject.getString("dataindex"), jSONObject.getInt("csvindex"));
            }

            int cnt = 0;
            StringBuilder failedRecords = new StringBuilder();
            StringBuilder singleInvociceFailedRecords = new StringBuilder();// Invoive with one row of failure record then all rows will be included in failure file
            int singleInvoiceFailureRecoredCount = 0;//  count of total invoice rows in import file
            Set<String> failureList = new HashSet<>(); // set of invoice having failyure record's
            HashMap currencyMap = accSalesOrderServiceobj.getCurrencyMap(isCurrencyCode);

            while (csvReader.readRecord()) {
                String failureMsg = "";
                boolean isfailurerecord = false; // used to keep track Invoice Row  failure/correct
                String[] recarr = csvReader.getValues();

                if (cnt == 0) {
                    failedRecords.append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\" \"");
                } else if (cnt == 1) {
                    failedRecords.append("\n").append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\"Error Message\"");
                } else {
                    try {
                        String currencyID = requestJobj.getString(Constants.globalCurrencyKey);

                        vendorInvoiceNumber = "";
                        if (columnConfig.containsKey("vendorInvoiceNumber")) {
                            vendorInvoiceNumber = recarr[(Integer) columnConfig.get("vendorInvoiceNumber")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(vendorInvoiceNumber)) {
                                failureMsg += "Vendor Invoice Number is not available. ";
                            }
                        } else {
                            failureMsg += "Vendor Invoice Number column is not found. ";
                        }

                        Date vendorInvoiceDate = null;
                        if (columnConfig.containsKey("vendorInvoiceDate")) {
                            String vendorInvoiceDateStr = recarr[(Integer) columnConfig.get("vendorInvoiceDate")].replaceAll("\"", "").trim();

                            if (StringUtil.isNullOrEmpty(vendorInvoiceDateStr)) {
                                failureMsg += "Vendor Invoice Date is not available. ";
                            } else {
                                try {
                                    vendorInvoiceDate = df.parse(vendorInvoiceDateStr);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect date format for Vendor Invoice Date, Please specify values in " + dateFormat + " format. ";
                                }
                            }
                        } else {
                            failureMsg += "Vendor Invoice Date column is not found. ";
                        }

                        String supplierInvoiceNo = "";
                        if (columnConfig.containsKey(Constants.SUPPLIERINVOICENO)) {
                            supplierInvoiceNo = recarr[(Integer) columnConfig.get(Constants.SUPPLIERINVOICENO)].replaceAll("\"", "").trim();
                        }

                        String costCenterID = "";
                        if (columnConfig.containsKey("costcenter")) {
                            String costCenterName = recarr[(Integer) columnConfig.get("costcenter")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(costCenterName)) {
                                costCenterID = accPurchaseOrderModuleServiceObj.getCostCenterIDByName(costCenterName, companyID);
                                if (StringUtil.isNullOrEmpty(costCenterID)) {
                                    failureMsg += "Cost Center is not found for name " + costCenterName + ". ";
                                }
                            }
                        }

                        Date dueDate = null;
                        if (columnConfig.containsKey("dueDate")) {
                            String dueDateStr = recarr[(Integer) columnConfig.get("dueDate")].replaceAll("\"", "").trim();

                            if (StringUtil.isNullOrEmpty(dueDateStr)) {
                                failureMsg += "Due Date is not available. ";
                            } else {
                                try {
                                    dueDate = df.parse(dueDateStr);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect date format for Due Date, Please specify values in " + dateFormat + " format. ";
                                }
                            }
                        } else {
                            failureMsg += "Due Date column is not found. ";
                        }

                        Date shipDate = null;
                        if (columnConfig.containsKey("shipdate")) {
                            String shipDateStr = recarr[(Integer) columnConfig.get("shipdate")].replaceAll("\"", "").trim();

                            if (!StringUtil.isNullOrEmpty(shipDateStr)) {
                                try {
                                    shipDate = df.parse(shipDateStr);
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect date format for Ship Date, Please specify values in " + dateFormat + " format. ";
                                }
                            }
                        }

                        String vendorID = "";
                        /*
                         * 1. Vendor Code
                         */
                        if (columnConfig.containsKey("vendorCode")) {
                            String vendorCode = recarr[(Integer) columnConfig.get("vendorCode")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(vendorCode)) {
                                Vendor vendor = accPurchaseOrderModuleServiceObj.getVendorByCode(vendorCode, companyID);
                                if (vendor != null) {
                                    vendorID = vendor.getID();
                                } else {
                                    failureMsg += messageSource.getMessage("acc.field.VendorCodeisnotavailable", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + vendorCode + ". ";
                                }
                            }
                        }

                        /*
                         * 2. Vendor Name if vendorID is empty it means
                         * Vendor is not found for given code. so need to
                         * search data on name
                         */
                        if (StringUtil.isNullOrEmpty(vendorID)) {
                            if (columnConfig.containsKey("VendorName")) {
                                String vendorName = recarr[(Integer) columnConfig.get("VendorName")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(vendorName)) {
                                    Vendor vendor = accPurchaseOrderModuleServiceObj.getVendorByName(vendorName, companyID);
                                    if (vendor != null) {
                                        vendorID = vendor.getID();
                                    } else {
                                        failureMsg += messageSource.getMessage("acc.field.VendorisnotfoundforVendorCodeName", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ". ";
                                    }
                                } else {
                                    failureMsg += messageSource.getMessage("acc.field.VendorisnotfoundforVendorCodeName", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ".";
                                }
                            } else {
                                failureMsg += messageSource.getMessage("acc.field.VendorisnotfoundforVendorCodeName", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ".";
                            }
                        }

                        String termID = "";
                        if (!requestJobj.optBoolean("incash", false)) {
                            if (columnConfig.containsKey("term")) {
                                String termName = recarr[(Integer) columnConfig.get("term")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(termName)) {
                                    termID = accSalesOrderServiceobj.getTermIDByName(termName, companyID);
                                    if (StringUtil.isNullOrEmpty(termID)) {
                                        failureMsg += "Debit Term is not found for name " + termName + ". ";
                                    }
                                } else {
                                    failureMsg += "Debit Term is not available. ";
                                }
                            } else {
                                failureMsg += "Debit Term column is not found. ";
                            }
                        }
                        
                        String memo = "";
                        if (columnConfig.containsKey("memo")) {
                            memo = recarr[(Integer) columnConfig.get("memo")].replaceAll("\"", "").trim();
                        }

                        String shipVia = "";
                        if (columnConfig.containsKey("shipvia")) {
                            shipVia = recarr[(Integer) columnConfig.get("shipvia")].replaceAll("\"", "").trim();
                        }

                        String fob = "";
                        if (columnConfig.containsKey("fob")) {
                            fob = recarr[(Integer) columnConfig.get("fob")].replaceAll("\"", "").trim();
                        }

                        String agentID = "";
                        if (columnConfig.containsKey("agent")) {
                            String agentName = recarr[(Integer) columnConfig.get("agent")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(agentName)) {
                                agentID = accPurchaseOrderModuleServiceObj.getAgentIDByName(agentName, companyID);
                                if (StringUtil.isNullOrEmpty(agentID)) {
                                    failureMsg += "Agent is not found for name " + agentName + ". ";
                                }
                            }
                        }

                        if (isCurrencyCode ? columnConfig.containsKey("currencyCode") : columnConfig.containsKey("currencyName")) {
                            String currencyStr = isCurrencyCode ? recarr[(Integer) columnConfig.get("currencyCode")].replaceAll("\"", "").trim() : recarr[(Integer) columnConfig.get("currencyName")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(currencyStr)) {
                                currencyID = accSalesOrderServiceobj.getCurrencyId(currencyStr, currencyMap);

                                if (StringUtil.isNullOrEmpty(currencyID)) {
                                    failureMsg += messageSource.getMessage("acc.field.ImportProductExceptionFormat", null, Locale.forLanguageTag(requestJobj.getString(Constants.language))) + ". ";
                                }
                            } else {
                                if (!masterPreference.equalsIgnoreCase("1")) {
                                    failureMsg += "Currency is not available. ";
                                }
                            }
                        }

                        boolean isIncludingGST = false;
                        if (columnConfig.containsKey("gstIncluded")) {
                            String isIncludingGSTStr = recarr[(Integer) columnConfig.get("gstIncluded")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(isIncludingGSTStr)) {
                                if (isIncludingGSTStr.equalsIgnoreCase("TRUE")) {
                                    isIncludingGST = true;
                                } else if (isIncludingGSTStr.equalsIgnoreCase("FALSE")) {
                                    isIncludingGST = false;
                                } else {
                                    failureMsg += "Format you entered for Include GST is not correct. It should be like \"TRUE\" or \"FALSE\". ";
                                }
                            }
                        }

                        boolean isIncludeProductTax = false;
                        if (columnConfig.containsKey("includeprotax")) {
                            String isIncludeProductTaxStr = recarr[(Integer) columnConfig.get("includeprotax")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(isIncludeProductTaxStr)) {
                                if (isIncludeProductTaxStr.equalsIgnoreCase("Yes")) {
                                    isIncludeProductTax = true;
                                } else if (isIncludeProductTaxStr.equalsIgnoreCase("No")) {
                                    isIncludeProductTax = false;
                                } else {
                                    failureMsg += "Format you entered for Include Product Tax is not correct. It should be like \"Yes\" or \"No\". ";
                                }
                            }
                        }

                        if (isIncludingGST && !isIncludeProductTax) {
                            failureMsg += "If value Including GST is \"TRUE\" then value of Include Product Tax should be \"Yes\". ";
                        }

                        boolean isIncludeTotalTax = false;
                        if (columnConfig.containsKey("taxincluded")) {
                            String isIncludeTotalTaxStr = recarr[(Integer) columnConfig.get("taxincluded")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(isIncludeTotalTaxStr)) {
                                if (isIncludeTotalTaxStr.equalsIgnoreCase("Yes")) {
                                    isIncludeTotalTax = true;
                                } else if (isIncludeTotalTaxStr.equalsIgnoreCase("No")) {
                                    isIncludeTotalTax = false;
                                } else {
                                    failureMsg += "Format you entered for Include Total Tax is not correct. It should be like \"Yes\" or \"No\". ";
                                }
                            }
                        }

                        if (isIncludeProductTax && isIncludeTotalTax) {
                            failureMsg += "If value of Include Product Tax is \"Yes\" then value of Include Total Tax should be \"No\".";
                        }

                        String taxID = "";
                        if (columnConfig.containsKey("taxid")) {
                            String taxCode = recarr[(Integer) columnConfig.get("taxid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(taxCode)) {
//                                Tax tax = getGSTByCode(taxCode, companyID);
                                Map taxMap = new HashMap<>();
                                taxMap.put(Constants.companyKey, companyID);
                                taxMap.put(Constants.TAXCODE, taxCode);
                                ArrayList taxList = importHandler.getTax(taxMap);
                                if (taxList.get(0) != null) {
                                    Tax tax = (Tax) taxList.get(0);
                                    if(tax.getTaxtype()==Constants.SALES_TYPE_TAX && isIncludeTotalTax){
                                        failureMsg += "Tax Code is not Purchase Type TAX for code " + taxCode;
                                    } else {
                                        taxID = tax.getID();
                                    }
                                } else if (!StringUtil.isNullOrEmpty((String) taxList.get(2))) {
                                    failureMsg += (String) taxList.get(2) + taxCode;
                                }
                            } else {
                                if (!isIncludingGST && !isIncludeProductTax && isIncludeTotalTax) {
                                    failureMsg += "Tax Code is not available. ";
                                }
                            }
                        } else {
                            if (!isIncludingGST && !isIncludeProductTax && isIncludeTotalTax) {
                                failureMsg += "Tax Code column is not found. ";
                            }
                        }
                        
                         /**
                         * get and put Cash Purchase related columns details and validation
                         */
                        String payMethodId = "";
                        String ChequeNo = "";
                        String bankName = "";
                        String bankNameMasterItemID = "";
                        Date chequeDate = null;
                        boolean cleared = false;
                        Date clearanceDate = null;
                        String ChequeDesc = "";
                        if(requestJobj.optBoolean("incash", false)){
                            //get Payment Method
                            PaymentMethod payMethod = null;
                            if (columnConfig.containsKey("paymentmethodid")) {
                                String paymentMethodStr = recarr[(Integer) columnConfig.get("paymentmethodid")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(paymentMethodStr)) {
                                    KwlReturnObject retObj = accMasterItemsDAOobj.getPaymentMethodIdFromName(paymentMethodStr, companyID);
                                    if (retObj != null && !retObj.getEntityList().isEmpty()) {
                                        payMethod = (PaymentMethod) retObj.getEntityList().get(0);
                                        payMethodId = payMethod.getID();
                                    }
                                    if (payMethod == null) {
                                        failureMsg += "Payment Method is not found for " + paymentMethodStr + ". ";
                                    }
                                } else {
                                    failureMsg += "Payment Method is not available. ";
                                }
                            } else {
                                failureMsg += "Payment Method column is not found. ";
                            }
                            //get Cheque Number
                            if (columnConfig.containsKey("chequeno")) {
                                ChequeNo = recarr[(Integer) columnConfig.get("chequeno")].replaceAll("\"", "").trim();
                            }
                            //get Bank Name
                            if (columnConfig.containsKey("bankname")) {
                                bankName = recarr[(Integer) columnConfig.get("bankname")].replaceAll("\"", "").trim();
                                if (!StringUtil.isNullOrEmpty(bankName)) {
                                    KwlReturnObject returnObject = importDao.getBankNameMasterItemName(companyID, bankName);
                                    if (returnObject.getEntityList().isEmpty()) {
//                                        failureMsg += "Incorrect Bank Name type value for Bank Name. Please add new Bank Name as \"" + bankName + "\" with other details.";
                                    } else {
                                        MasterItem masterItem = (MasterItem) returnObject.getEntityList().get(0);
                                        bankNameMasterItemID = masterItem.getID();
                                    }
                                } else {
                                    if (payMethod != null && payMethod.getDetailType() == Constants.bank_detail_type) {
                                        failureMsg += "Empty data found in Bank Name, cannot set empty data for Bank Name if Payment Method is selected as Bank.";
                                    }
                                }
                            } else {
                                if (payMethod != null && payMethod.getDetailType() == Constants.bank_detail_type) {
                                    failureMsg += "Bank Name column is not found. ";
                                }
                            }
                            //get Cheque Date
                            if (columnConfig.containsKey("chequedate")) {
                                String chequeDateStr = recarr[(Integer) columnConfig.get("chequedate")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(chequeDateStr)) {
                                    if (payMethod != null && payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {
                                        failureMsg += "Cheque Date is not available. ";
                                    }
                                } else {
                                    try {
                                        chequeDate = df.parse(chequeDateStr);
                                    } catch (Exception ex) {
                                        failureMsg += "Incorrect date format for Cheque Date, Please specify values in " + dateFormat + " format. ";
                                    }
                                }
                            } else {
                                if (payMethod != null && payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {
                                    failureMsg += "Cheque Date column is not found. ";
                                }
                            }
                            //get Payment Status
                            if (columnConfig.containsKey("paymentStatus")) {
                                String paymentStatusStr = recarr[(Integer) columnConfig.get("paymentStatus")].replaceAll("\"", "").trim();
                                if (StringUtil.isNullOrEmpty(paymentStatusStr)) {
                                    if (payMethod != null && payMethod.getDetailType() == Constants.bank_detail_type) {
                                        failureMsg += "Payment Status is not available. ";
                                    }
                                } else {
                                    if (paymentStatusStr.equalsIgnoreCase("Cleared")) {
                                        cleared = true;
                                    } else if (paymentStatusStr.equalsIgnoreCase("Uncleared")) {
                                        cleared = false;
                                    } else {
                                        failureMsg += "Incorrect Payment Status type value for Payment Status. It should be either Cleared or Uncleared. ";
                                    }
                                }
                            } else {
                                if (payMethod != null && payMethod.getDetailType() == Constants.bank_detail_type) {
                                    failureMsg += "Payment Status column is not found. ";
                                }
                            }
                            //get Clearance Date
                            if (columnConfig.containsKey("clearanceDate")) {
                                if (payMethod != null && payMethod.getDetailType() != PaymentMethod.TYPE_CASH && cleared) { // when payment type is other than cash and payment sttus is clear then only need of clerance date. So its validation
                                    String clearenceDateStr = recarr[(Integer) columnConfig.get("clearanceDate")].replaceAll("\"", "").trim();
                                    if (!StringUtil.isNullOrEmpty(clearenceDateStr)) {
                                        try {
                                            clearanceDate = df.parse(clearenceDateStr);
                                            if (chequeDate.compareTo(clearanceDate) > 0) {
                                                failureMsg += "Clearence date should be greter than Cheque date.";
                                            }
                                        } catch (ParseException ex) {
                                            failureMsg += "Incorrect date format for Clearence Date, Please specify values in " + dateFormat + " format.";
                                        }
                                    } else {
                                        failureMsg += "You have entered the Payment Status as Cleared. So you cannot set empty data for Clearence Date.";
                                    }
                                }
                            } else {
                                if (payMethod != null && payMethod.getDetailType() != PaymentMethod.TYPE_CASH && cleared) {
                                    failureMsg += "Clearance Date column is not found. ";
                                }
                            }
                            //get Cheque Description
                            if (columnConfig.containsKey("chequedescription")) {
                                ChequeDesc = recarr[(Integer) columnConfig.get("chequedescription")].replaceAll("\"", "").trim();
                            }
                        }

                        
                        /*
                         Get Line level details from File and validate the data
                        */
                        KwlReturnObject returnObject=null;
                        boolean isAccountNotFound=false;
                        boolean notAllowToPostJe=false;
                        String accountID="";
                        String usedIn="";
                        if (columnConfig.containsKey("account")) {
                            String accountName = recarr[(Integer) columnConfig.get("account")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(accountName)) {
                                returnObject = importDao.getAccountFromName(companyID, accountName);
                                if (returnObject.getEntityList().isEmpty()) {
                                    isAccountNotFound = true;
                                } else {
                                    List list = returnObject.getEntityList();
                                    Object[] details = (Object[]) list.get(0);
                                    accountID = (String) details[0];
                                    usedIn = (String) details[1];
                                    if (details[2] != null) {
                                        notAllowToPostJe = "F".equals(details[2].toString());
                                    }
                                }
                                if (isAccountNotFound) {
                                    if (!masterPreference.equalsIgnoreCase("1")) {
                                        failureMsg += "Account is not found for " + accountName + ". ";
                                    }
                                } else if (notAllowToPostJe && !StringUtil.isNullOrEmpty(usedIn)) {
                                    failureMsg += "Account is used for  " + usedIn + ". ";
                                }
                            } else {
                                failureMsg += "Account is not available. ";
                            }
                        } else {
                            failureMsg += "Account column is not found. ";
                        }

                       boolean isDebit=false;
                        if (columnConfig.containsKey("type")) {
                            String type = recarr[(Integer) columnConfig.get("type")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(type)) {
                                failureMsg += "Account debit or credit type is not available. ";
                            } else {
                               if(type.equalsIgnoreCase("debit")){
                                  isDebit=true; 
                               }else if(type.equalsIgnoreCase("credit")){
                                 isDebit=false;
                               }else{
                                 failureMsg += "Account type value is not correct.Please give Type value as 'debit' or 'credit' "; 
                               }
                                   
                            }
                        } else {
                            failureMsg += "Type column is not found. ";
                        }

                        
                        String lineDesc = "";
                        if (columnConfig.containsKey("desc")) {
                            lineDesc = recarr[(Integer) columnConfig.get("desc")].replaceAll("\"", "").trim();
                        }

                        double amount = 0;
                        if (columnConfig.containsKey("amount")) {
                            String amountStr = recarr[(Integer) columnConfig.get("amount")].replaceAll("\"", "").trim();
                            if (StringUtil.isNullOrEmpty(amountStr)) {
                                failureMsg += "Amount is not available. ";
                            } else {
                                try {
                                    amount = authHandler.round(Double.parseDouble(amountStr), companyID);
                                    if(amount<0){
                                        failureMsg += "Amount should not be negative.";
                                    }
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect numeric value for Amount, Please ensure that value type of amount matches with the amount. ";
                                }
                            }
                        } else {
                            failureMsg += "Amount column is not found. ";
                        }

                        int discountType = 1;
                        if (columnConfig.containsKey("discountType")) {
                            String discountTypeStr = recarr[(Integer) columnConfig.get("discountType")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(discountTypeStr)) {
                                if (discountTypeStr.equalsIgnoreCase("Percentage")) {
                                    discountType = 1;
                                } else if (discountTypeStr.equalsIgnoreCase("Flat")) {
                                    discountType = 0;
                                } else {
                                    failureMsg += "Format you entered is not correct. It should be like \"Percentage\" or \"Flat\". ";
                                }
                            }
                        }
                        double discount = 0;
                        if (columnConfig.containsKey("discount")) {
                            String discountStr = recarr[(Integer) columnConfig.get("discount")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(discountStr)) {
                                try {
                                    discount = authHandler.round(Double.parseDouble(discountStr), companyID);
                                     if (discount < 0) {
                                        failureMsg += "Discount Amount should not be negative.";
                                    }
                                } catch (Exception ex) {
                                    failureMsg += "Incorrect numeric value for Discount, Please ensure that value type of Discount matches with the Discount. ";
                                }
                            }
                        }

                        Tax rowtax = null;
                        if (columnConfig.containsKey("prtaxid")) {
                            String taxCode = recarr[(Integer) columnConfig.get("prtaxid")].replaceAll("\"", "").trim();
                            if (!StringUtil.isNullOrEmpty(taxCode)) {
//                                rowtax = getGSTByCode(taxCode, companyID);
                                Map taxMap = new HashMap<>();
                                taxMap.put(Constants.companyKey, companyID);
                                taxMap.put(Constants.TAXCODE, taxCode);
                                ArrayList taxList = importHandler.getTax(taxMap);
                                if (taxList.get(0) != null) {
                                    rowtax = (Tax) taxList.get(0);
                                    if (rowtax.getTaxtype() == Constants.SALES_TYPE_TAX && isIncludeProductTax) {
                                        failureMsg += "Tax Code is not Purchase Type TAX for code " + taxCode;
                                    }
                                } else if (!StringUtil.isNullOrEmpty((String) taxList.get(2))) {
                                    failureMsg += (String) taxList.get(2) + taxCode;
                                }
                            } else {
                                if (isIncludeProductTax) {
                                    failureMsg += "Account Tax is not available. ";
                                }
                            }
                        } else {
                            if (isIncludeProductTax) {
                                failureMsg += "Account Tax column is not found. ";
                            }
                        }

                        String rowtaxamount = "0";
                        double rowtaxamountvalue = 0;
                        if (columnConfig.containsKey("taxamount")) {
                            rowtaxamount = recarr[(Integer) columnConfig.get("taxamount")].replaceAll("\"", "").trim();
                             if (!StringUtil.isNullOrEmpty(rowtaxamount)) {
                                    try {
                                        rowtaxamountvalue = Double.parseDouble(rowtaxamount);
                                        if (rowtaxamountvalue < 0) {
                                            failureMsg += "Tax Amount should not be negative.";
                                        }
                                    } catch (Exception ex) {
                                        failureMsg += "Incorrect numeric value for Tax Amount. ";
                                    }
                                }
                        }

                        // creating invoice json
                        if (!prevInvNo.equalsIgnoreCase(vendorInvoiceNumber) || vendorInvoiceNumber.equalsIgnoreCase("")) {
                            //If failed invoice then increase failed count and append in failed records string
                            if (failureList.contains(prevInvNo)) {
                                if (singleInvoiceFailureRecoredCount > 0) {
                                    //append record in failed records string
                                    failedRecords.append(singleInvociceFailedRecords);
                                }
                                //Increase failed records count
                                failed += singleInvoiceFailureRecoredCount;
                                //reinitialize variables for next record
                                singleInvociceFailedRecords = new StringBuilder();
                                singleInvoiceFailureRecoredCount = 0;
                            }

                            isRecordFailed = false;
                            if (rows.length() > 0 && !isAlreadyExist && !isRecordFailed) {
                                double taxamount = 0.0;
                                if (!StringUtil.isNullOrEmpty(paramJobj.optString("taxid"))) {
                                    HashMap<String, Object> taxParams = new HashMap<>();
                                    taxParams.put("transactiondate", sdf.parse(paramJobj.optString("billdate")));
                                    taxParams.put("taxid", paramJobj.optString("taxid"));
                                    taxParams.put("companyid", companyID);
                                    KwlReturnObject taxResult = accTaxObj.getTax(taxParams);
                                    Object[] taxRow = (Object[]) taxResult.getEntityList().get(0);
                                    double taxPercentage = (double) taxRow[1];
                                    taxamount = ((totalamount - totaldiscount) * taxPercentage) / 100;
                                    taxamount = authHandler.round(taxamount, companyID);
//                                    subTotal=(totalamount - totaldiscount)+taxamount;
                                    
                                }
                                
                                if(authHandler.round(subTotal,companyID)<=0){
                                    String message="Total amount should be greater than Zero.";
                                    singleInvociceFailedRecords.append(message.replaceAll("\"", "")).append("\"");
                                    isRecordFailed=true;
                                }
                                paramJobj.put("taxamount", String.valueOf(taxamount));
                                paramJobj.remove("isIncludeProductTax");
                                // on next document saving current documents rows
                                if (!isRecordFailed) {
                                    paramJobj.put(Constants.EXPENSE_DETAIL, rows.toString());
                                    paramJobj.put(Constants.PAGE_URL,  requestJobj.optString(Constants.PAGE_URL));
                                    // for save Purchase Invoice
                                    saveGoodsReceipt(paramJobj);
                                } else {
                                    /**
                                     * If record failed then append it in failed
                                     * records string. Increase failed records
                                     * count.
                                     */
                                    failedRecords.append(singleInvociceFailedRecords);
                                    failed += singleInvoiceFailureRecoredCount;
                                    failureList.add(prevInvNo);
                                }
                                //below variable are get initialized to give correct failure and sucess
                                singleInvociceFailedRecords = new StringBuilder();
                                singleInvoiceFailureRecoredCount = 0;
                            }
                            prevInvNo = vendorInvoiceNumber;
                            // reset variables
                            totaldiscount = 0;
                            totalamount = 0;
                            subTotal = 0;
                            paramJobj = new JSONObject();
                            rows = new JSONArray();
                            isRecordFailed = false;
                            isAlreadyExist = false;
                            /**
                             * Check invoice number exist or not. If exist then
                             * throw exception with error message.
                             */
                            KwlReturnObject result = accGoodsReceiptobj.getReceiptFromNo(vendorInvoiceNumber, companyID);
                            int nocount = result.getRecordTotalCount();
                            if (nocount > 0) {
                                isAlreadyExist = true;
                                throw new AccountingException("Vendor Invoice number'" + vendorInvoiceNumber + "' already exists.");
                            }

                            // For create custom field array
                            JSONArray customJArr = accPurchaseOrderModuleServiceObj.createGlobalCustomFieldArrayForImport(requestJobj, jSONArray, recarr, df, Constants.Acc_Vendor_Invoice_ModuleId);

                            // For getting exchange rate
                            double exchangeRateForTransaction = accPurchaseOrderModuleServiceObj.getExchangeRateForTransaction(requestJobj, vendorInvoiceDate, currencyID);

                            String sequenceFormatID = "NA";
                            boolean autogenerated = false;
                            boolean isFromOtherSource = false;
                            if (!StringUtil.isNullOrEmpty(vendorInvoiceNumber)) {
                                int moduleId = requestJobj.optBoolean("incash", false) ? Constants.Acc_Cash_Purchase_ModuleId : Constants.Acc_Vendor_Invoice_ModuleId;
                                Map<String, String> sequenceNumberDataMap = new HashMap<String, String>();
                                sequenceNumberDataMap.put("moduleID", String.valueOf(moduleId));
                                sequenceNumberDataMap.put("entryNumber", vendorInvoiceNumber);
                                sequenceNumberDataMap.put("companyID", companyID);
                                sequenceNumberDataMap.put("isFromImport", "true");
                                List list = importHandler.checksEntryNumberForSequenceNumber(sequenceNumberDataMap);
                                if (!list.isEmpty()) {
                                    boolean isvalidEntryNumber = (Boolean) list.get(0);
                                    if (!isvalidEntryNumber) {
                                        String formatID = (String) list.get(2);
                                        int intSeq = (Integer) list.get(3);
                                        paramJobj.put(Constants.SEQNUMBER, intSeq);
                                        paramJobj.put(Constants.SEQFORMAT, formatID);
                                        autogenerated = true;
                                        sequenceFormatID = formatID;
                                        isFromOtherSource = true;
                                    }
                                }
                            }

                            // param obj
                            paramJobj.put(Constants.companyKey, companyID);
                            paramJobj.put(Constants.globalCurrencyKey, requestJobj.getString(Constants.globalCurrencyKey));
                            paramJobj.put(Constants.useridKey, requestJobj.getString(Constants.useridKey));
                            paramJobj.put(Constants.lid, requestJobj.getString(Constants.useridKey));
                            paramJobj.put(Constants.userfullname, requestJobj.getString(Constants.userfullname));
                            paramJobj.put(Constants.reqHeader, requestJobj.getString(Constants.reqHeader));
                            paramJobj.put(Constants.remoteIPAddress, requestJobj.getString(Constants.remoteIPAddress));
                            paramJobj.put(Constants.language, requestJobj.getString(Constants.language));
                            paramJobj.put(Constants.timezonedifference, requestJobj.optString(Constants.timezonedifference));
                            paramJobj.put(Constants.currencyKey, currencyID);
                            // request map for save goods receipt  
                            paramJobj.put("locale", locale);
                            paramJobj.put("customfield", customJArr.toString());
                            paramJobj.put("companyid", companyID);
                            paramJobj.put("df", dateOnlydf);
                            paramJobj.put("userid", requestJobj.getString(Constants.useridKey));
                            paramJobj.put("agent", agentID);
                            paramJobj.put("billdate", sdf.format(vendorInvoiceDate));
                            paramJobj.put(Constants.SUPPLIERINVOICENO, supplierInvoiceNo);
                            paramJobj.put("costcenter", costCenterID);
                            paramJobj.put("currencyid", currencyID);
                            paramJobj.put("duedate", sdf.format(dueDate));
                            paramJobj.put("externalcurrencyrate", String.valueOf(exchangeRateForTransaction));
                            paramJobj.put("fob", fob);
                            paramJobj.put("landedInvoiceID", "");
                            paramJobj.put("landedInvoiceNumber", "");
                            paramJobj.put("memo", memo);
                            paramJobj.put("number", vendorInvoiceNumber);
                            paramJobj.put("numberDo", "");
                            paramJobj.put("sequenceformat", sequenceFormatID);
                            paramJobj.put("autogenerated", autogenerated);
                            paramJobj.put("isFromOtherSource", isFromOtherSource);
                            if (shipDate != null) {
                                paramJobj.put("shipdate", sdf.format(shipDate));
                            }
                            paramJobj.put("shipvia", shipVia);
                            paramJobj.put("term", termID);
                            paramJobj.put("termid", termID);
                            paramJobj.put("vendor", vendorID);
                            paramJobj.put("istemplate", "0");
                            paramJobj.put("defaultAdress", "true");
                            paramJobj.put("seqformat_oldflag", "false");
                            paramJobj.put("seqformat_oldflagDo", "false");
                            paramJobj.put("fromLinkCombo", "");
                            paramJobj.put("linkNumber", "");
                            paramJobj.put("termsincludegst", "false");
                            paramJobj.put("taxamount", "0");
                            paramJobj.put("incash", requestJobj.optString("incash", "false"));
                            paramJobj.put("includeprotax", String.valueOf(isIncludeProductTax));
                            paramJobj.put("includingGST", String.valueOf(isIncludingGST));
                            paramJobj.put("isAllowToEdit", "false");
                            paramJobj.put("isCapitalGoodsAcquired", "false");
                            paramJobj.put("isDraft", "false");
                            paramJobj.put("isEdit", "false");
                            paramJobj.put("isExciseInvoice", "false");
                            paramJobj.put("isExpenseInv", true); //need to send expense type invoice
                            paramJobj.put("isLinkedTransaction", "false");
                            paramJobj.put("isMRPSalesOrder", "false");
                            paramJobj.put("isOpeningBalanceOrder", "false");
                            paramJobj.put("isRetailPurchase", "false");
                            paramJobj.put("isfavourite", "false");
                            paramJobj.put("islockQuantity", "false");
                            paramJobj.put("partialinv", "false");
                            paramJobj.put("perdiscount", "false");
                            paramJobj.put("moduletempname", "false");
                            paramJobj.put("invoicetermsmap", "[]");
                            paramJobj.put("shipLength", "1");
                            paramJobj.put("copyInv", "");
                             //put cash purchase related fields
                            if(requestJobj.optBoolean("incash", false)){
                                //create payment details json
                                JSONObject payDetail = new JSONObject();
                                payDetail.put("chequeno", ChequeNo);
                                payDetail.put("description",ChequeDesc);
                                payDetail.put("bankname", bankName);
                                payDetail.put("paymentStatus", cleared ? "Cleared" : "Uncleared");
                                payDetail.put("bankmasteritemid", bankNameMasterItemID);
                                payDetail.put("payDate", chequeDate != null ? sdf.format(chequeDate) : "");
                                payDetail.put("clearanceDate", clearanceDate != null ? sdf.format(clearanceDate) : "");
                                //put payment method details in map
                                paramJobj.put("pmtmethod", payMethodId);
                                paramJobj.put("paydetail", payDetail.toString());
                            }
                            if (isIncludeTotalTax) {
                                paramJobj.put("taxid", taxID);
                            } else {
                                paramJobj.put("taxid", "");
                            }

                            paramJobj.put("template", "");
                            paramJobj.put("templatename", "");
                            paramJobj.put("validdate", "");
                            paramJobj.put("shippingterm", "");
                            paramJobj.put("podept", "");
                            paramJobj.put("posttext", "");
                            paramJobj.put("poyourref", "");
                            paramJobj.put("project", "");
                            paramJobj.put("requestor", "");
                            paramJobj.put("manufacturerType", "");
                            paramJobj.put("RMCDApprovalNo", "");
                            paramJobj.put("customerporefno", "");
                            paramJobj.put("defaultnatureofpurchase", "");
                            paramJobj.put("deletedLinkedDocumentId", "");
                            paramJobj.put("deliveryTime", "");
                            paramJobj.put("delydate", "");
                            paramJobj.put("delyterm", "");
                            paramJobj.put("discount", "0");
                            paramJobj.put("doid", "");
                            paramJobj.put("excisetypeid", "");
                            paramJobj.put("formtypeid", "");
                            paramJobj.put("gstCurrencyRate", "0");
                            paramJobj.put("importService", "false");
                            paramJobj.put("invoiceto", "");
                            paramJobj.put("invoicetype", "");
                            paramJobj.put("isselfbilledinvoice", "");
                            paramJobj.put("merno", "");
                            paramJobj.put("mode", "11");
                            paramJobj.put("isIncludeProductTax", isIncludeProductTax);

                            SimpleDateFormat formatter = (SimpleDateFormat) authHandler.getGlobalDateFormat();
                            paramJobj.put(Constants.Checklocktransactiondate, formatter.format(vendorInvoiceDate));
                        } // end global details
                        
                        Map<String, Object> requestParams = new HashMap<>();
                        requestParams.put(Constants.companyKey, companyID);
                        CompanyPreferencesCMN.checkLockPeriod(accCompanyPreferencesObj, requestParams, vendorInvoiceDate, false);
                        CompanyPreferencesCMN.checkActiveDateRange(accCompanyPreferencesObj, requestJobj, vendorInvoiceDate);

                        //Throw exception with error message if failure message is available
                        if (!StringUtil.isNullOrEmpty(failureMsg)) {
                            throw new AccountingException(failureMsg);
                        }

                        double conversionFactor = 1;
                        // Add Custom fields details of line items
                        JSONArray lineCustomJArr = accPurchaseOrderModuleServiceObj.createLineLevelCustomFieldArrayForImport(requestJobj, jSONArray, recarr, df, Constants.Acc_Vendor_Invoice_ModuleId);

                        /*
                        Put the line level details
                        */
                        JSONObject invdData = new JSONObject();
                        invdData.put("priceSource", "");
                        invdData.put("dependentType", "");
                        invdData.put("inouttime", "");
                        invdData.put("showquantity", "");
                        invdData.put(DESC, lineDesc);
                        invdData.put("supplierpartnumber", "");
                        invdData.put("invstore", "");
                        invdData.put("invlocation", "");
                        invdData.put("permit", "");
                        invdData.put("gstCurrencyRate", "0.0");
                        invdData.put("linkto", "");
                        invdData.put("rowid", "");
                        invdData.put("savedrowid", "");
                        invdData.put(RATE, amount);
                        invdData.put("amount", amount);
                        invdData.put(ACCOUNTID, accountID);
                        invdData.put("quantity", "");
                        invdData.put("debit", isDebit);
                        invdData.put("baseuomquantity", "");
                        invdData.put(PRDISCOUNT, String.valueOf(discount));
                        invdData.put("discountispercent", String.valueOf(discountType));
                        if (paramJobj.has("isIncludeProductTax") && paramJobj.optBoolean("isIncludeProductTax") == true && rowtax != null) {
                            invdData.put("prtaxid", rowtax.getID());
                        } else {
                            invdData.put("prtaxid", "");
                            invdData.put("taxamount", "0");
                        }

                        invdData.put("taxpercent", 0);
                        invdData.put("LineTermdetails", "");
                        invdData.put("productcustomfield", "[{}]");
                        invdData.put("productMRP", "");
                        invdData.put("valuationType", "");
                        invdData.put("reortingUOMExcise", "");
                        invdData.put("reortingUOMSchemaExcise", "");
                        invdData.put("valuationTypeVAT", "");
                        invdData.put("reportingUOMVAT", "");
                        invdData.put("reportingUOMSchemaVAT", "");
                        invdData.put("recTermAmount", "");
                        invdData.put("OtherTermNonTaxableAmount", "");
                        invdData.put("changedQuantity","");
                        invdData.put("baseuomrate", String.valueOf(conversionFactor));
                        invdData.put("customfield", lineCustomJArr.toString());
                       
                        double rowAmount = authHandler.round(amount, companyID);
                        double rowdiscount = discount;
                        if (discountType == 1) { // for percent disc
                            rowdiscount = (rowAmount * discount) / 100;
                        }
                        rowdiscount = authHandler.round(rowdiscount, companyID);
                        totaldiscount += rowdiscount;
                        double tempRowTaxamount=authHandler.round(rowtaxamountvalue,companyID);
                        double amountExcludingGST=0;
                        double rowAmountVal=authHandler.round(rowAmount-rowdiscount,companyID);
                        totalamount += rowAmountVal;
                        if (isIncludingGST) {
                            tempRowTaxamount = authHandler.round((rowAmountVal * tempRowTaxamount) / (tempRowTaxamount + 100), companyID);
                            amountExcludingGST = rowAmountVal - tempRowTaxamount;
                            invdData.put("rateIncludingGstEx", amountExcludingGST);
                            invdData.put("taxamount", tempRowTaxamount);
                            invdData.put("calamount", rowAmountVal);
                        } else {
                            invdData.put("calamount", rowAmountVal + tempRowTaxamount);
                            invdData.put("taxamount", tempRowTaxamount);
                            invdData.put("rateIncludingGstEx", "0.0");
                        }
                        
                         /*
                          Calculate the total amount of line level .
                         */
                        if (isDebit) {
                            subTotal += authHandler.round((rowAmountVal+tempRowTaxamount), companyID);
                        } else {
                            subTotal -= authHandler.round((rowAmountVal+tempRowTaxamount), companyID);
                        }
                        rows.put(invdData);

                    } catch (Exception ex) {
                        isRecordFailed = true;
                        isfailurerecord = true;
                        String errorMsg = "";
                        if (ex.getMessage() != null) {
                            errorMsg = ex.getMessage();
                        } else if (ex.getCause() != null) {
                            errorMsg = ex.getCause().getMessage();
                        }
                        if (prevInvNo.equalsIgnoreCase(vendorInvoiceNumber) || vendorInvoiceNumber.equalsIgnoreCase("")) {
                            if (!failureList.contains(vendorInvoiceNumber)) {
                                if (singleInvoiceFailureRecoredCount > 0) {
                                    failedRecords.append(singleInvociceFailedRecords);
                                }
                                singleInvociceFailedRecords = new StringBuilder();
//                                failed += singleInvoiceFailureRecoredCount;
                                singleInvoiceFailureRecoredCount = 0;
                                prevInvNo = vendorInvoiceNumber;
                            }
                            failureList.add(vendorInvoiceNumber);
                        }
                        singleInvoiceFailureRecoredCount++;
                        singleInvociceFailedRecords.append("\n").append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\"").append(errorMsg.replaceAll("\"", "")).append("\"");
                    }
                    if (!isfailurerecord) {
                        singleInvoiceFailureRecoredCount++;
                        singleInvociceFailedRecords.append("\n").append(accSalesOrderServiceobj.createCSVrecord(recarr)).append("\"").append(" ").append("\"");
                    }
                    total++;
                }
                cnt++;
            }

            // save PI for last record
            if (!isAlreadyExist && !isRecordFailed) {
                double taxamount = 0.0;
                if (!StringUtil.isNullOrEmpty(paramJobj.optString("taxid"))) {
                    HashMap<String, Object> taxParams = new HashMap<>();
                    taxParams.put("transactiondate", sdf.parse(paramJobj.optString("billdate")));
                    taxParams.put("taxid", paramJobj.optString("taxid"));
                    taxParams.put("companyid", companyID);
                    KwlReturnObject taxResult = accTaxObj.getTax(taxParams);
                    Object[] taxRow = (Object[]) taxResult.getEntityList().get(0);
                    double taxPercentage = (double) taxRow[1];
                    taxamount = ((totalamount - totaldiscount) * taxPercentage) / 100;
                    taxamount = authHandler.round(taxamount, companyID);
                }
                paramJobj.put("taxamount", String.valueOf(taxamount));
                paramJobj.remove("isIncludeProductTax");
                if (authHandler.round(subTotal, companyID) <= 0) {
                    String message = "Total amount should be greater than Zero.";
                    singleInvociceFailedRecords.append(message.replaceAll("\"", "")).append("\"");
                    isRecordFailed = true;
                }
                if (!isRecordFailed) {
                    paramJobj.put(Constants.EXPENSE_DETAIL, rows.toString());
                    paramJobj.put(Constants.PAGE_URL,  requestJobj.optString(Constants.PAGE_URL));
                    saveGoodsReceipt(paramJobj);
                }
            }

            if (isRecordFailed) {// only if last invoice is failed
                failed += singleInvoiceFailureRecoredCount; // last interation failure record
                if (singleInvociceFailedRecords.toString().length() > 0) {
                    failedRecords.append(singleInvociceFailedRecords);
                }
            }

            if (failed > 0) {
                importHandler.createFailureFiles(fileName, failedRecords, ".csv");
            }

            int success = total - failed;
            if (total == 0) {
                msg = "Empty file.";
            } else if (success == 0) {
                msg = "Failed to import all the records.";
            } else if (success == total) {
                msg = "All records are imported successfully.";
            } else {
                msg = "Imported " + success + " record" + (success > 1 ? "s" : "") + " successfully";
                msg += (failed == 0 ? "." : " and failed to import " + failed + " record" + (failed > 1 ? "s" : "") + ".");
            }
        } catch (Exception ex) {
            issuccess = false;
            msg = "" + ex.getMessage();

            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Importing Records.");
        } finally {
            fileInputStream.close();
            csvReader.close();

            // For saving import log
            accPurchaseOrderModuleServiceObj.saveImportLog(requestJobj, msg, total, failed, Constants.Acc_Vendor_Invoice_ModuleId);

            try {
                returnObj.put("success", issuccess);
                returnObj.put("msg", msg);
                returnObj.put("totalrecords", total);
                returnObj.put("successrecords", total - failed);
                returnObj.put("failedrecords", failed);
                returnObj.put("filename", ImportLog.getActualFileName(fileName));
                returnObj.put("Module", Constants.Acc_Vendor_Invoice_ModuleId);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        return returnObj;
    }
    
    @Override
    public Map<String,Object> manipulateRowDetails(Map<String, Object> rowDetailMap, Map<String, List<Object>> batchSerialMap, Map<String, List<JSONObject>> batchMap, JSONArray batchDetailArr, StringBuilder failedRecords, StringBuilder singleInvociceFailedRecords, double totalBatchQty, boolean isRecordFailed, JSONArray rows) {
            Map<String,Object> dataMap=new HashMap<>();
            try {
                List<String> batchKeyList = new ArrayList(batchMap.size());
                for (String batchKey : batchMap.keySet()) {
                    double rowQty = 0;
                    List<JSONObject> list = (List<JSONObject>) batchMap.get(batchKey);
                    double batchQty = 0.0;
                    if (!list.isEmpty()) {
                        for (JSONObject obj1 : list) {
                            if (obj1.has("quantity")) {
                                batchQty += obj1.optDouble("quantity", 0.0);
                            }
                            break; //getting quantity from first row only for same batch
                        }
                    }
                    rowQty += batchQty;
                    if (batchSerialMap.containsKey(batchKey)) {
                        List serialList = batchSerialMap.get(batchKey);
                        if (!serialList.isEmpty() && serialList.size() != batchQty) {
                            throw new AccountingException("Product batch quantity and serial quantity does not match");
                        } else {
                            batchKeyList.add(batchKey);
                        }
                    }
                }
                for (String batchKey : batchKeyList) { // Removing checked Batches
                    batchMap.remove(batchKey);
                }

                for (String keydetail : rowDetailMap.keySet()) {
                    JSONObject jObj = (JSONObject) rowDetailMap.get(keydetail);
                    double rowQunatity = jObj.has("dquantity") ? jObj.optDouble("dquantity", 0.0) : jObj.optDouble("quantity", 0.0);
                    double batchQty = 0;
                    for (int i = 0; i < batchDetailArr.length(); i++) {
                        JSONObject batchObj = (JSONObject) batchDetailArr.get(i);
                        if (batchObj.has("quantity") && batchObj.get("quantity") != null) {
                            batchQty += (double) batchObj.optDouble("quantity", 0);
                        }
                    }
                    if (rowQunatity != batchQty && !(jObj.has("noQuantityMatchingRequire") && jObj.optBoolean("noQuantityMatchingRequire"))) {
                        throw new AccountingException("Product quantity and product batch quantity does not match");
                    }
                    jObj.put("batchdetails", batchDetailArr.toString());
                    rows.put(jObj);
                }
                
            } catch (Exception ex) {
                String errorMsg = ex.getMessage();
                isRecordFailed = true;
                if (ex.getMessage() != null) {
                    errorMsg = ex.getMessage();
                } else if (ex.getCause() != null) {
                    errorMsg = ex.getCause().getMessage();
                }
                singleInvociceFailedRecords.append(errorMsg.replaceAll("\"", "")).append("\"");

            }
            dataMap.put("batchMap",batchMap);
            dataMap.put("totalBatchQty",totalBatchQty);
            dataMap.put("isRecordFailed", isRecordFailed);
            return dataMap;
    }
    // Function used to delete entries in temporary tables
    @Override
    public void deleteEntryInTemp(Map deleteparam) {
        try {
            String invoiceno = deleteparam.get("invoiceno").toString();
            String grno = deleteparam.get("grno").toString();
            String companyid = deleteparam.get("companyid").toString();
            accCommonTablesDAO.deleteTransactionInTemp(invoiceno, companyid, Constants.Acc_Vendor_Invoice_ModuleId);
            if (deleteparam.containsKey("isautocreategr") && deleteparam.get("isautocreategr") != null) {
                accCommonTablesDAO.deleteTransactionInTemp(grno, companyid, Constants.Acc_Goods_Receipt_ModuleId);
            }
        } catch (ServiceException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void deleteEditedGoodsReceiptJE(String oldjeid, String companyid) throws ServiceException, AccountingException, SessionExpiredException {
        try {
            if (!StringUtil.isNullOrEmpty(oldjeid)) {
                KwlReturnObject result = accJournalEntryobj.getJournalEntryDetail(oldjeid, companyid);
                List<JournalEntryDetail> list = result.getEntityList();
                if (list != null && !list.isEmpty()) {
                    for (JournalEntryDetail jed : list) {
                        // Sagar - No need to revert entry from optimized table as entries are already reverted from calling main function in edit case.
                        result = accJournalEntryobj.deleteJournalEntryDetailRow(jed.getID(), companyid);
                    }
                }
                result = accJournalEntryobj.permanentDeleteJournalEntry(oldjeid, companyid);
                KwlReturnObject jedresult1 = accJournalEntryobj.deleteJECustomData(oldjeid);

            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }

    @Override
    public void deleteEditedGoodsReceiptDiscount(ArrayList discArr, String companyid) throws ServiceException, AccountingException, SessionExpiredException {
        try {
            for (int i = 0; i < discArr.size(); i++) {
                if (discArr.get(i) != null) {
                    accDiscountobj.deleteDiscount(discArr.get(i).toString(), companyid);
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }

    /**
     *
     * @param map
     * @param company
     * @throws AccountingException @Desc : Save Asset Machine mapping after
     * trnsaction commit
     */
    @Override
    public void savemachineAsset(Map<String, String> map, String company) throws AccountingException {
        for (Map.Entry<String, String> entry : map.entrySet()) {
            try {
                Map<String, String> map1 = new HashMap<>();
                map1.put("assetdetailId", entry.getValue());
                map1.put("machineid", entry.getKey());
                map1.put("companyid", company);
                accProductObj.saveAssetMachineMapping(map1);
            } catch (ServiceException ex) {
                throw new AccountingException("Error While saving Machine Data");
            }
        }
    }
    
    @Override
    public Tax getGSTByCode(String accountCode, String companyID){
        Tax tax = null;
        try {
            if (!StringUtil.isNullOrEmpty(accountCode) && !StringUtil.isNullOrEmpty(companyID)) {
                KwlReturnObject retObj = accAccountDAOobj.getTaxFromCode(companyID, accountCode);
                if (retObj != null && !retObj.getEntityList().isEmpty()) {
                    tax = (Tax) retObj.getEntityList().get(0);
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return tax;
    }
    
    @Override
    public JSONObject getLandingCostItemReport(HashMap<String, Object> map, String company) throws ServiceException {
        JSONObject jsonObj = new JSONObject();
        JSONArray jsonArry=new JSONArray();
        KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), company);
        CompanyAccountPreferences pref = (CompanyAccountPreferences) extraprefresult.getEntityList().get(0);
        
        extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), company);
        ExtraCompanyPreferences extrapref = (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0);
        try {
            
            String start=null,limit=null;
            if(map.containsKey(Constants.start)){
                start=(String)map.get(Constants.start);
            }
            if(map.containsKey(Constants.limit)){
                limit=(String)map.get(Constants.limit);
            }
            KwlReturnObject kwlObj = accGoodsReceiptobj.getGoodsReceipt_LandedInvoice(map);
            if (kwlObj != null) {
                List list = kwlObj.getEntityList(); 
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    GoodsReceipt grObj = (GoodsReceipt) itr.next();
                    JournalEntry je=grObj.getJournalEntry();
                    KWLCurrency currency=(KWLCurrency)grObj.getCurrency();
                    String currencyId=currency.getCurrencyID();
                    DateFormat df = (DateFormat)map.get("df");
//                    Date billDate=grObj.getJournalEntry()!=null?grObj.getJournalEntry().getEntryDate():grObj.getFormdate();                    
                    Date billDate=grObj.getCreationDate()!=null?grObj.getCreationDate():grObj.getFormdate();                    
                    Set<GoodsReceiptDetail> grdetailsObj=grObj.getRows();
                    JSONObject jsObj = new JSONObject();
                    Iterator itrGrd=grdetailsObj.iterator();
                    while(itrGrd.hasNext()){
                        jsObj = new JSONObject();
                        HashMap<String, Double> allcactionMthdData=new HashMap<String, Double>();
                        GoodsReceiptDetail grDetil=(GoodsReceiptDetail)itrGrd.next();
                        double quantity=grDetil.getInventory().getQuantity();
                        double productlandedcostinJE=0.0d;
                        double rate=authHandler.roundUnitPrice(grDetil.getRate(), company) ;
                        KwlReturnObject returnBaseRate=accCurrencyDAOobj.getCurrencyToBaseAmount(map,rate,currencyId,billDate, je.getExternalCurrencyRate()); 
                        rate= authHandler.roundUnitPrice((Double) returnBaseRate.getEntityList().get(0), company);
                        double totalvalue=authHandler.roundUnitPrice(quantity*rate, company);
                        Product productObj=grDetil.getInventory().getProduct();
                        double productWeight=productObj.getProductweight();
                        jsObj.put("purchaseinvoice",grDetil.getGoodsReceipt().getGoodsReceiptNumber());
                        jsObj.put("product", productObj.getProductid());
                        jsObj.put("quantity",quantity);
                        jsObj.put("purchaseprice",rate);
                        jsObj.put("totalvalue",totalvalue);
                        
                        //SDP-15731 providing linked expense invoice numbers against each Purchase Invoice
                        KwlReturnObject expenseinvoiceset =  accGoodsReceiptobj.getExpenseInvoiceNumbersFromGoodsReceipt(grDetil.getGoodsReceipt().getID(), company);
                        String expenselist =(String) (expenseinvoiceset.getEntityList().isEmpty() ? "":expenseinvoiceset.getEntityList().get(0));
                        jsObj.put("expenseinvoice",expenselist);
                        
                        /**
                         * SDP-15928(For perpetual JE case only) For adjustment
                         * of the rounding difference we are checking if this
                         * product has the rounding value adjusted during JE
                         * posting.
                         */
                        if (pref.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD) {
                            HashMap<String, Object> lcdmparams = new HashMap<>();
                            lcdmparams.put("grdetailid", grDetil.getID());
                            KwlReturnObject mappingkwl = accGoodsReceiptobj.getLandingCostDetailMapping(lcdmparams);
                            Object[] mappingobj = mappingkwl.getEntityList().isEmpty() ? null : (Object[]) mappingkwl.getEntityList().get(0);
                            String landingcostmappingid = (mappingobj != null ? mappingobj[0].toString() : " "); //landingcostmapping table id

                            mappingkwl = accountingHandlerDAOobj.getObject(LandingCostDetailMapping.class.getName(), landingcostmappingid);
                            LandingCostDetailMapping lcmappingobj = (LandingCostDetailMapping) mappingkwl.getEntityList().get(0);
                            productlandedcostinJE = lcmappingobj!=null ? lcmappingobj.getInventoryJED().getAmountinbase() : 0.0d;
                        }
                        
                        Map<Integer,Double> mapStore=new HashMap<Integer,Double>();
                        Set<LandingCostCategory> lccSet=productObj.getLccategoryid();
                        //ERM-971 landed cost tax level check
                        boolean isMalaysiaOrSingaporeCompany = false; //presently only for Malaysian/Singpore companies
                        double landingCosttax=0.0; //tax on the expense invoice excluded from inventory side
                        double termtotalamount=0.0; //
                        String countrycode = pref.getCompany().getCountry().getID();
                        if (countrycode.equalsIgnoreCase(String.valueOf(Constants.malaysian_country_id)) || countrycode.equalsIgnoreCase(String.valueOf(Constants.SINGAPOREID))) {
                                    isMalaysiaOrSingaporeCompany = true;
                        }
                        if(lccSet.isEmpty()){
                            continue;
                        }
                        double landingCost=0.0D,unitlanded=0.0D,totalunitcost=0.0D;
                        for (LandingCostCategory lcc : lccSet) {
                            /*
                             * ------------------ Landed Invoice List(Landing Cost Category ) ------------------
                             */
                            
                            String landingCostOfCategory = lcc.getId();
                            String purchaseinvoiceid = grObj.getID();
                            KwlReturnObject kwlLCObj = accGoodsReceiptobj.getLandedInviceList(purchaseinvoiceid, landingCostOfCategory);  // Get List of Landed Cost Category  Expense Invoice .
                            List<String> expanseGRList = kwlLCObj.getEntityList();
                            KwlReturnObject custresult = null;
                            
                            for (String grIDObj : expanseGRList) {
                                double expanseCharge = 0.0D;
                                if (!StringUtil.isNullOrEmpty(grIDObj)) {                                    
                                    // Check allocation type Total eligable Total Cost & Total Item .
                                    custresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), grIDObj);
                                    GoodsReceipt expanseGRObj = (GoodsReceipt) custresult.getEntityList().get(0);
                                    KwlReturnObject kwlnoEligiableItem = accGoodsReceiptobj.getNumberEligiableItem(expanseGRObj.getID(), landingCostOfCategory);
                                    double noEligiableItem=0.0;
                                    double eligiableItemCost=0.0;
                                    double eligiableItemWgt=0.0;
                                    double itemWgt=0.0;
                                    double  goodsrecmanualProductAmount=0.0;
                                    List noEligiableItemList = kwlnoEligiableItem.getEntityList();  
                                    Iterator itrItem=noEligiableItemList.iterator();
                                      // get all Procurement Invoice eligable product.   
                                    while (itrItem.hasNext()) {
                                       double tempUnit=0,unitRate =0, baseRate=0;
                                        Object[] valueArray = (Object[]) itrItem.next();
                                        List valueObjLit = (valueArray != null) ? new ArrayList(Arrays.asList(valueArray)) : null;
                                        tempUnit = (valueObjLit.size() > 0 && valueObjLit.get(0) != null) ? (double) valueObjLit.get(0) : 0.0D;
                                        unitRate = (valueObjLit.size() > 1 && valueObjLit.get(1) != null) ? (double) valueObjLit.get(1) : 0.0D;
                                        itemWgt = (valueObjLit.size() > 2 && valueObjLit.get(2) != null) ? (double) valueObjLit.get(2) : 0.0D;
                                        String  goodsrecId= (valueObjLit.size() > 3 && valueObjLit.get(3) != null) ? (String) valueObjLit.get(3) : "";                                       
                                        
                                        // get all Procurement Invoice get Base currency rate .   
                                        
                                        KwlReturnObject custresulttemp = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), goodsrecId);
                                        GoodsReceipt invoiceObj = (GoodsReceipt) custresulttemp.getEntityList().get(0);
                                        KWLCurrency currencytemp = (KWLCurrency) invoiceObj.getCurrency();
                                        String currencyIdtemp = currencytemp.getCurrencyID();
//                                        Date billDateTemp=invoiceObj.getJournalEntry()!=null?invoiceObj.getJournalEntry().getEntryDate():invoiceObj.getFormdate(); 
                                        Date billDateTemp=invoiceObj.getCreationDate()!=null?invoiceObj.getCreationDate():invoiceObj.getFormdate(); 
                                        KwlReturnObject ruternBR=accCurrencyDAOobj.getCurrencyToBaseAmount(map,unitRate,currencyIdtemp,billDateTemp, invoiceObj.getJournalEntry().getExternalCurrencyRate());
                                        baseRate = authHandler.roundUnitPrice((Double) ruternBR.getEntityList().get(0), company); 
                                        
                                        eligiableItemCost+=(tempUnit*baseRate);
                                        eligiableItemWgt+=(tempUnit*itemWgt);
                                        noEligiableItem+=tempUnit;
                                    }
                                    
                                    /*Get Product Cost Manual Entered  and allocation type is Manual */
                                    
                                    if (lcc.getLcallocationid() == 3 || lcc.getLcallocationid() == 4) {
                                        KwlReturnObject kwlreturn = accGoodsReceiptobj.getManualProductCostLCC(expanseGRObj.getID(), grDetil.getID()); 
                                        List itemList = kwlreturn.getEntityList();
                                        Iterator itemItr = itemList.iterator();
                                        while (itemItr.hasNext()) { 
                                            LccManualWiseProductAmount lccManualWiseProductAmount = (LccManualWiseProductAmount)itemItr.next();
                                            goodsrecmanualProductAmount = lccManualWiseProductAmount.isCustomDutyAllocationType() ? lccManualWiseProductAmount.getTaxablevalueforigst() : lccManualWiseProductAmount.getAmount();
                                            KWLCurrency currencytemp = (KWLCurrency) expanseGRObj.getCurrency();
                                            String currencyIdtemp = currencytemp.getCurrencyID();
//                                            Date billDateTemp = expanseGRObj.getJournalEntry() != null ? expanseGRObj.getJournalEntry().getEntryDate() : expanseGRObj.getFormdate();
                                            Date billDateTemp = expanseGRObj.getCreationDate() != null ? expanseGRObj.getCreationDate() : expanseGRObj.getFormdate();
                                            KwlReturnObject ruternBRExpan = accCurrencyDAOobj.getCurrencyToBaseAmount(map, goodsrecmanualProductAmount, currencyIdtemp, billDateTemp, expanseGRObj.getJournalEntry().getExternalCurrencyRate());
                                            goodsrecmanualProductAmount = authHandler.roundUnitPrice((Double) ruternBRExpan.getEntityList().get(0), company); 
                                        }
                                    }
                                    //to calculate row level tax in the invoice and reduce tax amount from landed cost currently for Singapore?Malaysian companies only
                                    if (expanseGRObj.getTax() == null) {
                                        Set<ExpenseGRDetail> expensegrset = expanseGRObj.getExpenserows();
                                        for (ExpenseGRDetail expgrd : expensegrset) {
                                            if (expgrd.getTax() != null && (isMalaysiaOrSingaporeCompany && !expgrd.getTax().isInputCredit() && expgrd.isIsdebit())) { //ERM-971 landed cost tax level check
                                                landingCosttax += expgrd.getRowTaxAmount();
                                            }
                                            else if (expgrd.getTax() != null && (isMalaysiaOrSingaporeCompany && !expgrd.getTax().isInputCredit() && !expgrd.isIsdebit())) { //ERM-971 landed cost tax level check
                                                landingCosttax -= expgrd.getRowTaxAmount();
                                            }
                                        }
                                    } else if (expanseGRObj.getTax() != null && (isMalaysiaOrSingaporeCompany && !expanseGRObj.getTax().isInputCredit())) {   //global level tax
                                        landingCosttax = expanseGRObj.getTaxamountinbase();
                                    }
                                    if (landingCosttax != 0.0) {
                                        String transcurrency = grObj.getCurrency() != null ? grObj.getCurrency().getCurrencyID() : "";
                                        if (!transcurrency.equalsIgnoreCase(currencyId)) {
                                            double exrate = grObj.getExchangeRateDetail().getExchangeRate();
                                            KwlReturnObject crresult = accCurrencyDAOobj.getCurrencyToBaseAmount(map, landingCosttax, currencyId, billDate, exrate);
                                            landingCosttax = authHandler.roundUnitPrice((Double) crresult.getEntityList().get(0), company);
                                        }
                                    }
                                    //Get amount from Invoice Terms of Expense Invoice and exclude this from landed cost if the term check in company preferences is off
                                    if (!extrapref.islandedcosttermJE()) {
                                        HashMap<String, Object> termParams = new HashMap();
                                        termParams.put("invoiceid", expanseGRObj.getID());
                                        KwlReturnObject invoicetermkwl = accGoodsReceiptobj.getInvoiceTermMap(termParams);
                                        List<ReceiptTermsMap> invoicetermlist = invoicetermkwl != null ? invoicetermkwl.getEntityList() : null;
                                        for (ReceiptTermsMap termmap : invoicetermlist) {
                                            if (termmap != null) {
                                                termtotalamount += termmap.getTermamount();
                                            }
                                        }
                                        termtotalamount = (termtotalamount > 0 ? 0 : termtotalamount);
                                    }
                                        allcactionMthdData.put("totLandedCost", expanseGRObj.getInvoiceAmountInBase() - landingCosttax - termtotalamount);
                                        allcactionMthdData.put("noEligiableItem", noEligiableItem);
                                        allcactionMthdData.put("lineItemQty", quantity);
                                        allcactionMthdData.put("valueOfItem", totalvalue);
                                        allcactionMthdData.put("eligiableItemCost", eligiableItemCost);
                                        allcactionMthdData.put("eligiableItemWgt", eligiableItemWgt);
                                        allcactionMthdData.put("itemWght", (productWeight * quantity));
                                        allcactionMthdData.put("manualProductAmount", goodsrecmanualProductAmount);
                                        
                                        /* Calculate Item wise Landed cost category */
                                        
                                        expanseCharge = LandingCostAllocationType.getTotalLanddedCost(expanseGRObj.getLandingCostCategory().getLcallocationid(), allcactionMthdData);
                                        
                                    /**
                                     * SDP-15928(Perpetual Only) Check in the landed cost JE if the posted amount is
                                     * the same as the one processed here , to check if this is the product where
                                     * rounding difference has been adjusted.
                                     */
                                    if (pref.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD && productlandedcostinJE!=0.0) {
                                        double roundedlc = authHandler.round(expanseCharge, company);
                                        if (productlandedcostinJE != roundedlc) {
                                            double roundingdiff = Math.abs(productlandedcostinJE - roundedlc);
                                            expanseCharge += roundingdiff;
                                        }
                                    }
                                        
                                        landingCost+= authHandler.roundUnitPrice(expanseCharge, company);
                                        //Same landing cost of category have multipul Expense Purchase invoice then combine expanse Charges  
                                        if(jsObj.has(landingCostOfCategory)){   
                                            expanseCharge +=jsObj.getDouble(landingCostOfCategory);
                                            jsObj.put(landingCostOfCategory, authHandler.roundUnitPrice(expanseCharge, company));
                                        }else{
                                           jsObj.put(landingCostOfCategory, authHandler.roundUnitPrice(expanseCharge, company)); 
                                        }                                        
                                        
//                                    }
                                }
                            }
                        }
                        
                        landingCost=authHandler.roundUnitPrice(landingCost, company);
                        unitlanded=authHandler.roundUnitPrice((landingCost/quantity), company);
                        totalunitcost=authHandler.roundUnitPrice((rate + unitlanded), company);
                        
                        jsObj.put("totallanded",landingCost);
                        jsObj.put("unitlanded",unitlanded);
                        jsObj.put("totalunitcost",totalunitcost);
                        jsonArry.put(jsObj);
                    }
                    
                }
            }
            JSONArray pagedJson = jsonArry;
            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit)) {
                pagedJson = StringUtil.getPagedJSON(pagedJson, Integer.parseInt(start), Integer.parseInt(limit));
            }
            jsonObj.put("data",pagedJson);
            jsonObj.put("totalCount",jsonArry.length());
            jsonObj.put("success",true);
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return jsonObj;
    }
    @Override
    public JSONObject createLandingCostItemConfig(HashMap<String, Object> map, String company) throws ServiceException {
        JSONObject jsonObj = new JSONObject();
         boolean issuccess = false;
         boolean isstockledger = false;
         boolean isstockvaluation = false;
        if (map.containsKey("isstockledger") && map.get("isstockledger")!=null && !StringUtil.isNullOrEmpty((String) map.get("isstockledger"))) {
            isstockledger = Boolean.parseBoolean((String) map.get("isstockledger"));
        }
        if (map.containsKey("isstockvaluation") && map.get("isstockvaluation")!=null && !StringUtil.isNullOrEmpty((String) map.get("isstockvaluation"))) {
            isstockvaluation = Boolean.parseBoolean((String) map.get("isstockvaluation"));
        }
        String msg = "";
        try{
            
            KwlReturnObject landingCostOfRetObj= accMasterItemsDAOobj.getMasterItemFromLandingCostCategory(null, company);
            List list=landingCostOfRetObj.getEntityList();
            Iterator itr=list.iterator();
            JSONArray jsonRecArry = new JSONArray();
            JSONArray jsonColumArry = new JSONArray();
            JSONObject jsonRec = new JSONObject();
           
            /**
            * ERM-447 - Inventory side stockledger/valuation report only need custom columns of landing cost category hence ignoring rest.
            */
            
            if (!(isstockledger || isstockvaluation)) {  
            jsonRec.put("dataIndex","purchaseinvoice");
            jsonRecArry.put(jsonRec);
            jsonRec.put("header","Purchase Invoice");
            jsonRec.put("width","150");
            jsonRec.put("pdfwidth","75");
            jsonColumArry.put(jsonRec);
            
            jsonRec = new JSONObject();
            jsonRec.put("dataIndex","product");
            jsonRecArry.put(jsonRec);
            jsonRec.put("header","Product Id");
            jsonRec.put("width","150");
            jsonRec.put("pdfwidth","75");
            jsonColumArry.put(jsonRec);

            jsonRec = new JSONObject();
            jsonRec.put("dataIndex","expenseinvoice");
            jsonRecArry.put(jsonRec);
            jsonRec.put("header","Expense Invoice");
            jsonRec.put("width","150");
            jsonRec.put("pdfwidth","75");
            jsonRec.put("renderer","expenseinvoice");
            jsonColumArry.put(jsonRec);
            
            jsonRec = new JSONObject();
            jsonRec.put("dataIndex","quantity");
            jsonRecArry.put(jsonRec);
            jsonRec.put("header","Purchase Quantity");
            jsonRec.put("width","150");
            jsonRec.put("pdfwidth","75");
            jsonColumArry.put(jsonRec);
            
            jsonRec = new JSONObject();
            jsonRec.put("dataIndex","purchaseprice");
            jsonRecArry.put(jsonRec);
            jsonRec.put("header","Purchase Price");
            jsonRec.put("width","150");
            jsonRec.put("pdfwidth","75");
            jsonRec.put("renderer","WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jsonColumArry.put(jsonRec);
            
            jsonRec = new JSONObject();
            jsonRec.put("dataIndex","totalvalue");
            jsonRecArry.put(jsonRec);
            jsonRec.put("header","Total Value");
            jsonRec.put("width","150");
            jsonRec.put("pdfwidth","75");
            jsonRec.put("renderer","WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jsonColumArry.put(jsonRec);
            }
            while (itr.hasNext()) {
                LandingCostCategory lcc = (LandingCostCategory) itr.next();
                jsonRec = new JSONObject();
                jsonRec.put("dataIndex", lcc.getId());
                jsonRecArry.put(jsonRec);
                jsonRec.put("header", lcc.getLccName()+" ( "+LandingCostAllocationType.getByValue(lcc.getLcallocationid())+" )");
                jsonRec.put("width", "150");
                jsonRec.put("pdfwidth", "75");
                jsonRec.put("renderer", "WtfGlobal.withoutRateCurrencyDeletedSymbol");
                jsonColumArry.put(jsonRec);
            }
            if (!(isstockledger || isstockvaluation)) {
            jsonRec = new JSONObject();
            jsonRec.put("dataIndex","totallanded");
            jsonRecArry.put(jsonRec);
            jsonRec.put("header","Total Landed Cost");
            jsonRec.put("width","150");
            jsonRec.put("pdfwidth","75");
            jsonRec.put("renderer","WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jsonColumArry.put(jsonRec);
             
            jsonRec = new JSONObject();
            jsonRec.put("dataIndex","unitlanded");
            jsonRecArry.put(jsonRec);
            jsonRec.put("header","Unit Landed Cost");
            jsonRec.put("width","150");
            jsonRec.put("pdfwidth","75");
            jsonRec.put("renderer","WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jsonColumArry.put(jsonRec);
            
            jsonRec = new JSONObject();
            jsonRec.put("dataIndex","totalunitcost");
            jsonRecArry.put(jsonRec);
            jsonRec.put("header","Total Unit Cost");
            jsonRec.put("width","150");
            jsonRec.put("pdfwidth","75");
            jsonRec.put("renderer","WtfGlobal.withoutRateCurrencyDeletedSymbol");
            jsonColumArry.put(jsonRec);
            }
            
            JSONObject jsonObjTemp = new JSONObject();
            jsonObjTemp.put("rec", jsonRecArry);
            jsonObjTemp.put("columnModel", jsonColumArry);
            jsonObj.put(Constants.RES_data, jsonObjTemp);
            jsonObj.put(Constants.RES_TOTALCOUNT, jsonRecArry.length());
            issuccess=true;
        }catch(Exception ex){
             Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }finally {
            try {
                jsonObj.put(Constants.RES_success, issuccess);
                jsonObj.put(Constants.RES_msg, msg);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return jsonObj;
    }
    /**
     *
     * @param reqMap
     * @return
     * @Desc : Delete stock Out GRN
     * @throws ServiceException
     */
    public Map DeleteStockOutFromGRN(Map<String, Object> reqMap) throws ServiceException {
        Map<String, Object> params = new HashMap();
        GoodsReceiptOrderDetails orderDetails = (GoodsReceiptOrderDetails) reqMap.get("orderDetails");
        reqMap.put("grodid", orderDetails.getID());
        /**
         * get Stock out GRN Mapping
         */
        KwlReturnObject kwlReturnObject = accGoodsReceiptobj.getStockOutGRNMapping(reqMap);
        List<GRODetailsStockOutISTMapping> detailsStockOutISTMappings = kwlReturnObject.getEntityList();
        for (GRODetailsStockOutISTMapping gRODetailsStockOutISTMapping : detailsStockOutISTMappings) {
            /**
             * Iterate Mapping
             */
            StockAdjustment stockAdjustment = gRODetailsStockOutISTMapping.getStockAdjustment();
            params = new HashMap();

            String productid = stockAdjustment.getProduct().getID();
            params.put("productid", productid);
            String storeid = stockAdjustment.getStore().getId();
            params.put("storeid", storeid);
            Set<StockAdjustmentDetail> adjustmentDetails = stockAdjustment.getStockAdjustmentDetail();
            for (StockAdjustmentDetail stockAdjustmentDetail : adjustmentDetails) {
                /**
                 * Iterate Stock Out details
                 */

                String locationid = stockAdjustmentDetail.getLocation().getId();
                params.put("locationid", locationid);
                String batchname = stockAdjustmentDetail.getBatchName();
                if (!StringUtil.isNullOrEmpty(batchname)) {
                    params.put("batchname", batchname);
                }
                String SerialName = stockAdjustmentDetail.getSerialNames();
                if (!StringUtil.isNullOrEmpty(SerialName)) {
                    params.put("SerialName", SerialName);
                }
                double qty = stockAdjustmentDetail.getQuantity();
                params.put("qty", qty);
                /**
                 * update In_Stock table
                 */

                accGoodsReceiptobj.updateQuantityinStock(params);

            }
            /**
             * delete stock movement,inventory,Stock Out
             */
            params = new HashMap();
            params.put("grodid", orderDetails.getID());
            params.put("stockadjustmentid", stockAdjustment.getId());
            params.put("inventoryid", stockAdjustment.getInventoryRef().getID());
            params.put("journalentryid", stockAdjustment.getInventoryJE() != null ? stockAdjustment.getInventoryJE().getID() : "");
            accGoodsReceiptobj.deleteStockAdjustment(params);
        }
        return null;
    }
    
   /**
     * @param : paramJobj
     * @Desc : Method create rounding JE after calculating total PI knocked off amount in base and other stuff
     * @throws : JSONException, ServiceException, SessionExpiredException, AccountingException
     * @return : JournalEntry if Rounding JE Created otherwise it returns null
     */
    @Override
    public JournalEntry createRoundingOffJE(JSONObject paramJobj) throws JSONException, ServiceException, SessionExpiredException, AccountingException {
        //Global variable Section
        JournalEntry journalEntry = null;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("RJE_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        TransactionStatus status = null;
        try {
            GoodsReceipt gr = (GoodsReceipt) paramJobj.get("goodsReceiptObj");
            Date amountDueDate = gr.getAmountDueDate();
            String companyid = paramJobj.getString(Constants.companyKey);
            String gcurrenyid = paramJobj.getString(Constants.globalCurrencyKey);
            boolean isEdit = paramJobj.optBoolean("isEdit", false);
            boolean dontCheckYearLock = paramJobj.optBoolean("DontCheckYearLock", false);//When call come from Rounding JE Script,No need to check Year Lock and this flag comes true 
            String grid = gr.getID();
            String grAccountID = gr.getAccount() != null ? gr.getAccount().getID() : gr.getVendor().getAccount().getID();
            KwlReturnObject extraPref = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences compAccPref = (CompanyAccountPreferences) extraPref.getEntityList().get(0);
            String roundingAccID = compAccPref.getRoundingDifferenceAccount().getID();
            double totalKnockedOffAmtInBase = getGrAmountUtilizedInMPandDN(paramJobj);
            double gramountInBase = gr.isIsOpeningBalenceInvoice()?gr.getOriginalOpeningBalanceBaseAmount():gr.getInvoiceAmountInBase();
            gramountInBase = authHandler.round(gramountInBase , companyid);
            double amtDiff = authHandler.round(( gramountInBase - totalKnockedOffAmtInBase), companyid);
            if (amtDiff != 0 && Math.abs(amtDiff)<=0.05) {//Generating Rounding JE is amtdiff is non zero and it is assumed that rounding JE will not generate more than 0.05
                status = txnManager.getTransaction(def);
                Map<String, Object> jeDataMap = getJournalEntryMapWithEntryNumberDetail(paramJobj, amountDueDate);
                jeDataMap.put("entrydate", amountDueDate);
                jeDataMap.put("companyid", companyid);
                jeDataMap.put("memo", "Rounding Journal Entry for Purchase Invoice "+gr.getGoodsReceiptNumber());
                jeDataMap.put("currencyid", gcurrenyid);
                jeDataMap.put("typevalue", 4);//type Value 4 for Rounding JE
                jeDataMap.put("transactionId", grid);//type Value 4 for Rounding JE
                if (dontCheckYearLock) {
                    jeDataMap.put("DontCheckYearLock", true);
                }
                KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
                journalEntry = (JournalEntry) jeresult.getEntityList().get(0);

                Set<JournalEntryDetail> jeDetails = new HashSet<>();
                JSONObject jedjson = new JSONObject();
                jedjson.put("srno", jeDetails.size() + 1);
                jedjson.put("companyid", companyid);
                jedjson.put("accountid", (amtDiff < 0) ? roundingAccID : grAccountID);
                jedjson.put("amount", Math.abs(amtDiff));
                jedjson.put("amountinbase", Math.abs(amtDiff));
                jedjson.put("debit", true);
                jedjson.put("jeid", journalEntry.getID());
                KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                JournalEntryDetail jeDetailRoundingAccount = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jeDetailRoundingAccount);

                jedjson = new JSONObject();
                jedjson.put("srno", jeDetails.size() + 1);
                jedjson.put("companyid", companyid);
                jedjson.put("accountid", (amtDiff < 0) ? grAccountID : roundingAccID);
                jedjson.put("amount", Math.abs(amtDiff));
                jedjson.put("amountinbase", Math.abs(amtDiff));
                jedjson.put("debit", false);
                jedjson.put("jeid", journalEntry.getID());
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                JournalEntryDetail jeDetailGRAccount = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jeDetailGRAccount);

                jeDataMap.put("jeid", journalEntry.getID());
                jeDataMap.put("jedetails", jeDetails);
                jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Add Journal entry details
                journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
                txnManager.commit(status);
            } else if (isEdit) {//In Edit case of MP and DN if PI amount due becomes zero and there is no rounding difference Now then we need to delete existing Rounding JE
                status = txnManager.getTransaction(def);
                KwlReturnObject jeResult = accJournalEntryobj.getRoundingJournalEntryByGRIds(gr.getID(), companyid);
                List<JournalEntry> jeList = jeResult.getEntityList();
                for (JournalEntry roundingJE : jeList) {
                    KwlReturnObject jedResult = accJournalEntryobj.getJournalEntryDetail(roundingJE.getID(), companyid);
                    List<JournalEntryDetail> jedList = jedResult.getEntityList();
                    for (JournalEntryDetail jed : jedList) {
                        accJournalEntryobj.deleteJournalEntryDetailRow(jed.getID(), companyid);
                    }
                    accJournalEntryobj.permanentDeleteJournalEntry(roundingJE.getID(), companyid);
                }
                txnManager.commit(status);
            }
        } catch (Exception ex) {
            txnManager.rollback(status);
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            throw new AccountingException(ex.getMessage(), ex);
        }
        return journalEntry;
    }
    
   /**
     * @param : paramJobj
     * @Desc : This method used to calculate total amount of PI in base used in Payment and DN 
     * @throws : JSONException, ServiceException, SessionExpiredException
     * @return : GR utilized Amount in base 
     */
    
    @Override
    public double getGrAmountUtilizedInMPandDN(JSONObject paramJobj) throws JSONException, ServiceException, SessionExpiredException {
        Map<String, Object> requestMap = AccountingManager.getGlobalParamsJson(paramJobj);
        String companyid = paramJobj.getString(Constants.companyKey);
        String gcurrenyid = paramJobj.getString(Constants.globalCurrencyKey);
        GoodsReceipt gr = (GoodsReceipt) paramJobj.get("goodsReceiptObj");
        String grid = gr.getID();
        double grExternalCurrencyRate = 0d;
        Date grCreationDate = null;
        String grCurrencyID = gr.getCurrency() != null ? gr.getCurrency().getCurrencyID() : gcurrenyid;
        grCreationDate = gr.getCreationDate();
        if (gr.isIsOpeningBalenceInvoice() && !gr.isNormalInvoice()) {
            grExternalCurrencyRate = gr.getExchangeRateForOpeningTransaction();
        } else {
//            grCreationDate = gr.getJournalEntry().getEntryDate();
//            grExternalCurrencyRate = gr.getJournalEntry().getExternalCurrencyRate();

            //code to avoid Lazy Initialization Error while executing PostRoundingJE Script
            KwlReturnObject result = accGoodsReceiptobj.getExternalCurrencyRateForGoodsReceipt(grid, companyid);
            if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty() && result.getEntityList().get(0) != null) {
                grExternalCurrencyRate = (Double) result.getEntityList().get(0);
        }
        }

        //#1.Payment with PI, information saved in PaymentDetail 
        double totalKnockedOffAmtInBase = 0;
        KwlReturnObject result = accGoodsReceiptobj.getPaymentDetailsOfGR(grid);
        if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty() && result.getEntityList().get(0) != null) {
            totalKnockedOffAmtInBase += (Double) result.getEntityList().get(0);
        }

        //#2.Case when Invoice linked in opening payment/ advance payment, information saved in LinkedPaymentDetails
        List<Double> knockedOffAmountList = new ArrayList();
        result = accGoodsReceiptobj.getLinkedPaymentDetailsOfGR(grid);
        if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty() && result.getEntityList().get(0) != null) {
            List list = result.getEntityList();
            for (int i = 0; i < list.size(); i++) {
                Object[] details = (Object[]) list.get(i);
                double enteredamount = (Double) details[0];
                double forexjeamountinbase = (Double) details[1];
                double paymentexchangerate = (Double) details[2];
                int isopeningbalencepayment = (Integer) details[3];
                int isconversionratefromcurrencytobase = (Integer) details[4];
                boolean isdebit = true;
                if (details.length >= 5 && details[5] != null) {
                    isdebit = Boolean.parseBoolean(details[5].toString());
                }

                double enteredAmtInBase = 0;
                if (isopeningbalencepayment == 1 && isconversionratefromcurrencytobase == 1) {//Opening Receipt
                    enteredAmtInBase = authHandler.round((enteredamount * paymentexchangerate), companyid);
                } else {
                    enteredAmtInBase = authHandler.round((enteredamount / paymentexchangerate), companyid);
                }
                if (isdebit) { //Adjust Frx Amount According to Debit or Credit
                    totalKnockedOffAmtInBase += authHandler.round(enteredAmtInBase - forexjeamountinbase, companyid);
                } else {
                    totalKnockedOffAmtInBase += authHandler.round(enteredAmtInBase + forexjeamountinbase, companyid);
                }
            }
        }

        //#3.linked Opening DN/ DN otherwise with PI, information saved in LinkedPaymentDetails
        result = accGoodsReceiptobj.getLinkedDebitNoteDetailsOfGR(grid);
        if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty() && result.getEntityList().get(0) != null) {
            List list = result.getEntityList();
            for (int i = 0; i < list.size(); i++) {
                Object[] details = (Object[]) list.get(i);
                double enteredamount = (Double) details[0];
                double forexjeamountinbase = (Double) details[1];
                double dnchangerate = (Double) details[2];
                int isopeningbalencedn = (Integer) details[3];
                int isconversionratefromcurrencytobase = (Integer) details[4];
                boolean isdebit = true;
                if (details.length >= 5 && details[5] != null) {
                    isdebit = Boolean.parseBoolean(details[5].toString());
                }
                double enteredAmtInBase = 0;
                if (isopeningbalencedn == 1 && isconversionratefromcurrencytobase == 1) {//Opening Receipt
                    enteredAmtInBase = authHandler.round((enteredamount * dnchangerate), companyid);
                } else {
                    enteredAmtInBase = authHandler.round((enteredamount / dnchangerate), companyid);
                }
                if (isdebit) { //Adjust Frx Amount According to Debit or Credit
                    totalKnockedOffAmtInBase += authHandler.round(enteredAmtInBase - forexjeamountinbase, companyid);
                } else {
                    totalKnockedOffAmtInBase += authHandler.round(enteredAmtInBase + forexjeamountinbase, companyid);
                }
            }
        }

        for (double grAmount : knockedOffAmountList) {
            if (grAmount != 0) {
                if (!grCurrencyID.equalsIgnoreCase(gcurrenyid)) {//when PI currency is different from base curreny
                    KwlReturnObject grAmtInBaseResult = null;
                    if (gr.isIsOpeningBalenceInvoice() && gr.isConversionRateFromCurrencyToBase()) {// if invoice is opening balance invoice and Conversion rate is taken from user is Currency to base then following method will be called.
                        grAmtInBaseResult = accCurrencyDAOobj.getCurrencyToBaseAmountAccordingToCurrencyToBaseExchangeRate(requestMap, grAmount, grCurrencyID, grCreationDate, grExternalCurrencyRate);
                    } else {
                        grAmtInBaseResult = accCurrencyDAOobj.getCurrencyToBaseAmount(requestMap, grAmount, grCurrencyID, grCreationDate, grExternalCurrencyRate);
                    }
                    if (grAmtInBaseResult != null) {
                        //Doing round off each value before summing for matching aged amount with balance sheet in base currency 
                        totalKnockedOffAmtInBase += authHandler.round((Double) grAmtInBaseResult.getEntityList().get(0), companyid);
                    }
                } else {
                    totalKnockedOffAmtInBase += authHandler.round(grAmount, companyid);
                }
            }
        }
        return totalKnockedOffAmtInBase;
    }
    
   /**
     * @param : paramJobj,jeEntryDate = It is JE creation Date
     * @Desc : This method used get JE Number Details like SEQFORMAT, SEQNUMBER etc
     * @throws : JSONException, ServiceException, SessionExpiredException, AccountingException
     * @return : Map<String, Object> having JE number info
     */
    public Map<String, Object> getJournalEntryMapWithEntryNumberDetail(JSONObject paramJobj, Date jeEntryDate) throws JSONException, ServiceException, SessionExpiredException, AccountingException {
        Map<String, Object> jeDataMap = AccountingManager.getGlobalParamsJson(paramJobj);
        boolean isEdit = paramJobj.optBoolean("isEdit", false);
        String companyid = paramJobj.getString(Constants.companyKey);
        JournalEntry roundingJE = null;
        if (isEdit) {//In Edit case of Rounding JE we need to preserve number and delete existing rounding JE
            GoodsReceipt gr = (GoodsReceipt) paramJobj.get("goodsReceiptObj");
            if (gr != null) {
                KwlReturnObject jeResult = accJournalEntryobj.getRoundingJournalEntryByGRIds(gr.getID(), companyid);
                if (jeResult != null && !jeResult.getEntityList().isEmpty() && jeResult.getEntityList().get(0) != null) {
                    roundingJE = (JournalEntry) jeResult.getEntityList().get(0);
                }
            }
        }

        if (roundingJE != null) {
            jeDataMap.put("entrynumber", roundingJE.getEntryNumber());
            jeDataMap.put("autogenerated", roundingJE.isAutoGenerated());
            jeDataMap.put(Constants.SEQFORMAT, roundingJE.getSeqformat().getID());
            jeDataMap.put(Constants.SEQNUMBER, roundingJE.getSeqnumber());
            jeDataMap.put(Constants.DATEPREFIX, roundingJE.getDatePreffixValue());
            jeDataMap.put(Constants.DATEAFTERPREFIX, roundingJE.getDateAfterPreffixValue());
            jeDataMap.put(Constants.DATESUFFIX, roundingJE.getDateSuffixValue());

            //Delete rounding JE
            KwlReturnObject jedResult = accJournalEntryobj.getJournalEntryDetail(roundingJE.getID(), companyid);
            List<JournalEntryDetail> jedList = jedResult.getEntityList();
            for (JournalEntryDetail jed : jedList) {
                accJournalEntryobj.deleteJournalEntryDetailRow(jed.getID(), companyid);
            }
            accJournalEntryobj.permanentDeleteJournalEntry(roundingJE.getID(), companyid);
        } else {
            HashMap<String, Object> JEFormatParams = new HashMap();
            JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
            JEFormatParams.put("modulename", "autojournalentry");
            JEFormatParams.put("companyid", companyid);
            JEFormatParams.put("isdefaultFormat", true);

            KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
            SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
            Map<String, Object> seqNumberMap = new HashMap();
            seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, jeEntryDate);

            String jeentryNumber = (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
            int jeIntegerPart = Integer.parseInt((String) seqNumberMap.get(Constants.SEQNUMBER));
            String jeDatePrefix = (String) seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
            String jeDateAfterPrefix = (String) seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
            String jeDateSuffix = (String) seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part

            jeDataMap.put("entrynumber", jeentryNumber);
            jeDataMap.put("autogenerated", true);
            jeDataMap.put(Constants.SEQFORMAT, format.getID());
            jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
            jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
            jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
            jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
        }
        return jeDataMap;
    }
    
  @Override  
    public JSONObject deleteGoodsReceiptOrdersPermanentJSON(JSONObject paramJobj) {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        boolean isConsignment = false;
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("SO_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        if (!StringUtil.isNullOrEmpty(paramJobj.optString("isConsignment",null))) {
            isConsignment = Boolean.parseBoolean(paramJobj.optString("isConsignment"));
        }
        StringBuffer productIds = new StringBuffer();
        TransactionStatus status = txnManager.getTransaction(def);
        List list = new ArrayList();
        String linkedTransaction = "";
        try {
//            list = deleteGoodsReceiptOrdersPermanent(request);
            list = deleteGoodsReceiptOrdersPermanent(paramJobj);
            if (list != null && !list.isEmpty()) {
                linkedTransaction = (String) list.get(0);
            }
            txnManager.commit(status);
            issuccess = true;
            if (StringUtil.isNullOrEmpty(linkedTransaction)) {
                if (isConsignment) {
                    msg = messageSource.getMessage("acc.consignment.GR.del", null, Locale.forLanguageTag(paramJobj.optString("language")));   //"Delivery Order has been deleted successfully";
                } else {
                    msg = messageSource.getMessage("acc.gro.del", null, Locale.forLanguageTag(paramJobj.optString("language")));   //"Goods receipt has been deleted successfully";
                }
            } else {
                if (isConsignment) {
                    msg = messageSource.getMessage("acc.field.consGoodsreceiptsexcept", null, Locale.forLanguageTag(paramJobj.optString("language"))) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, Locale.forLanguageTag(paramJobj.optString("language")));
                } else {
                    //msg = messageSource.getMessage("acc.field.Goodsreceiptsexcept", null, Locale.forLanguageTag(paramJobj.optString("language"))) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.hasbeendeletedsuccessfully", null, Locale.forLanguageTag(paramJobj.optString("language")));
                    msg = messageSource.getMessage("acc.field.Goodsreceiptsexcept", null, Locale.forLanguageTag(paramJobj.optString("language"))) + " " + linkedTransaction.substring(0, linkedTransaction.length() - 2) + " " + messageSource.getMessage("acc.field.Goodsreceiptsnotdeletedreason", null, Locale.forLanguageTag(paramJobj.optString("language")));
                }
            }
            if (list != null && list.size() > 0) {
                productIds = (StringBuffer) list.get(1);
            }
        } catch (SessionExpiredException ex) {
            txnManager.rollback(status);
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            txnManager.rollback(status);
            msg = "" + ex.getMessage();
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
                jobj.put("productIds", productIds);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return jobj;
    }
    /**
     * Get Total Invoice amount on Bill Date to check Daily Limit for Un-Registered Vendor PI
     * @param paramJobj
     * @return 
     */
  @Override  
    public JSONObject getTotalInvoiceAmountURDVendorPurchaseInvoice(JSONObject paramJobj) throws ServiceException, JSONException{
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try{
            KwlReturnObject result = accGoodsReceiptobj.getURDVendorRCMPurchaseInvoice(paramJobj);
            if(result!=null && !result.getEntityList().isEmpty()){
               Object[] resultObj =  (Object[])result.getEntityList().get(0);
               if(paramJobj.optBoolean("isInvoiceAmountOnly", false)){
                  jobj.put("amount", resultObj[0]);
               }
            }
            issuccess =true;
        }catch(ServiceException ex){
            msg = messageSource.getMessage("acc.urd.pi.failed.gettotal.amount", null, Locale.forLanguageTag(paramJobj.optString("language")));
            throw ServiceException.FAILURE(msg, ex);
        }finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                throw ServiceException.FAILURE(ex.getMessage(), ex);
            }
        }
        return jobj;
    }
  @Override  
    public JSONObject modifyURDVendorRCMPurchaseInvoiceJEDetails(JSONObject paramJobj) throws ServiceException, JSONException{
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean issuccess = false;
        try{
            String companyid = paramJobj.optString(Constants.companyid);
            paramJobj.put("isInvoiceAmountOnly", true);
            KwlReturnObject result = accGoodsReceiptobj.getURDVendorRCMPurchaseInvoice(paramJobj);
            double totalInvocieAmount = 0.0;
            if (result != null && !result.getEntityList().isEmpty()) {
                Object[] amountObj = (Object[]) result.getEntityList().get(0);
                totalInvocieAmount = amountObj[0]!=null && amountObj[0]!="" ? Double.parseDouble(amountObj[0].toString()) : totalInvocieAmount;
                totalInvocieAmount = totalInvocieAmount + paramJobj.optDouble("invoiceAmount", 0);
            }
            paramJobj.put("isInvoiceAmountOnly", false);
            result = accGoodsReceiptobj.getURDVendorRCMPurchaseInvoice(paramJobj);
            Map<String,String> JENumberUpdated = new HashMap<String,String>();
            Locale locale = Locale.forLanguageTag(paramJobj.optString("language"));
            String billdate = paramJobj.getString("billdate");
            DateFormat dfwithTime = (DateFormat) paramJobj.get(Constants.df);
            DateFormat df = authHandler.getDateOnlyFormat();
            Date billDateObj = dfwithTime.parse(billdate);
            billdate = df.format(billDateObj);
            String GRNNumber = paramJobj.optString("GRNNumber",""); // Purhcase Invoice Number
            String auditMsg = "";
            if (result != null && !result.getEntityList().isEmpty()) {
                int AuditTrailFlag = 0;
                List<Object[]> JEDetailObj = (ArrayList<Object[]>) result.getEntityList();
                if (totalInvocieAmount > Constants.INDIA_URD_RCM_PI_AMOUNTLIMIT) {
                    AuditTrailFlag = 1 ;
                    for (Object[] JEDetailObjArray : JEDetailObj) {
                        String URDJETableID = JEDetailObjArray[0]!=null ? JEDetailObjArray[0].toString() : "";
                        String JEntryDetail_DebitID = JEDetailObjArray[1]!=null ? JEDetailObjArray[1].toString() : "";
                        String JEntryDetail_CreditID = JEDetailObjArray[2]!=null ? JEDetailObjArray[2].toString() : "";
                        String JournalEntry_ID = JEDetailObjArray[3]!=null ? JEDetailObjArray[3].toString() : "";
                        String goodsReceiptDetail = JEDetailObjArray[4]!=null ? JEDetailObjArray[4].toString() : "";
                        double termamount = JEDetailObjArray[5]!=null && JEDetailObjArray[5]!="" ? Double.parseDouble(JEDetailObjArray[5].toString()) : 0;
                        String payableAccount = JEDetailObjArray[6]!=null ? JEDetailObjArray[6].toString() : "";
                        String account = JEDetailObjArray[7]!=null ? JEDetailObjArray[7].toString() : "";
                        String JENumber = JEDetailObjArray[8]!=null ? JEDetailObjArray[8].toString() : "";
                        String GRNumber = JEDetailObjArray[9]!=null ? JEDetailObjArray[9].toString() : "";
                        if(StringUtil.isNullOrEmpty(JEntryDetail_DebitID) && StringUtil.isNullOrEmpty(JEntryDetail_CreditID)){
                            JSONObject jedjson = new JSONObject();
                            //jedjson.put("srno", jeDetails.size() + 1);
                            jedjson.put("companyid", companyid);
                            jedjson.put("amount", termamount);
                            jedjson.put("accountid", payableAccount);
                            jedjson.put("debit", true);
                            jedjson.put("jeid", JournalEntry_ID);
                            if(!StringUtil.isNullOrEmpty(JEntryDetail_DebitID)){
                                jedjson.put("jedid", JEntryDetail_DebitID);
                            }
                            KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                            JournalEntryDetail payableJED = (JournalEntryDetail) jedresult.getEntityList().get(0);
                            String entryDetaildebit = payableJED.getID();
                            // End Update Table 

                            jedjson = new JSONObject();
                            //jedjson.put("srno", jeDetails.size() + 1);
                            jedjson.put("companyid", companyid);
                            jedjson.put("amount", termamount);
                            jedjson.put("accountid", account);
                            jedjson.put("debit", false);
                            jedjson.put("jeid", JournalEntry_ID);
                            if(!StringUtil.isNullOrEmpty(JEntryDetail_CreditID)){
                                jedjson.put("jedid", JEntryDetail_CreditID);
                            }
                            jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                            payableJED = (JournalEntryDetail) jedresult.getEntityList().get(0);

                            String entryDetailcredit = payableJED.getID();
                            JSONObject URDJsonObj = new JSONObject();
                            URDJsonObj.put("entryDetaildebit", entryDetaildebit);
                            URDJsonObj.put("entryDetailcredit", entryDetailcredit);
                            URDJsonObj.put(COMPANYID, companyid);
                            if(!StringUtil.isNullOrEmpty(URDJETableID)){
                                URDJsonObj.put("id", URDJETableID);
                            }
                            accGoodsReceiptobj.saveURDPurchaseInvoiceMapping(URDJsonObj);
                            JENumberUpdated.put(JournalEntry_ID,JENumber + ":" + GRNumber);
                        }
                    }

                } else if (totalInvocieAmount <= Constants.INDIA_URD_RCM_PI_AMOUNTLIMIT){
                    AuditTrailFlag =2 ;
                    for (Object[] JEDetailObjArray : JEDetailObj) {
                        String URDJETableID = JEDetailObjArray[0]!=null ? JEDetailObjArray[0].toString() : "";
                        String JEntryDetail_DebitID = JEDetailObjArray[1]!=null ? JEDetailObjArray[1].toString() : "";
                        String JEntryDetail_CreditID = JEDetailObjArray[2]!=null ? JEDetailObjArray[2].toString() : "";
                        String JournalEntry_ID = JEDetailObjArray[3]!=null ? JEDetailObjArray[3].toString() : "";
                        String JENumber = JEDetailObjArray[8]!=null ? JEDetailObjArray[8].toString() : "";
                        String GRNumber = JEDetailObjArray[9]!=null ? JEDetailObjArray[9].toString() : "";
                        if(!StringUtil.isNullOrEmpty(JEntryDetail_DebitID) && !StringUtil.isNullOrEmpty(JEntryDetail_CreditID)){
                           JSONObject URDJsonObj = new JSONObject();
                           URDJsonObj.put("id", URDJETableID);
                           URDJsonObj.put(COMPANYID, companyid);
                           accGoodsReceiptobj.updateURDPurchaseInvoiceMapping(URDJsonObj);
                           accJournalEntryobj.deleteJournalEntryDetailRow(JEntryDetail_DebitID, companyid);
                           accJournalEntryobj.deleteJournalEntryDetailRow(JEntryDetail_CreditID, companyid);
                           JENumberUpdated.put(JournalEntry_ID,JENumber + ":" + GRNumber);
                        }
                    }
                }
                if(AuditTrailFlag!=0){
                    for (Map.Entry<String,String> mapObject : JENumberUpdated.entrySet()) {
                        Map<String, Object> auditRequestParams = new HashMap<String, Object>();
                        String JEAndPINumber[] = mapObject.getValue().split(":");
                        String JENumber =  JEAndPINumber.length>=2? JEAndPINumber[0] : "";
                        String PINumber =  JEAndPINumber.length>=2? JEAndPINumber[1] : "";
                        if(AuditTrailFlag==1){
                            auditMsg = messageSource.getMessage("acc.common.rcm.URD.PI.audit.updatedJE.text", new Object[]{paramJobj.getString(Constants.userfullname),GRNNumber,JENumber,PINumber, billdate}, locale);
                        }else if(AuditTrailFlag==2){
                            auditMsg = messageSource.getMessage("acc.common.rcm.URD.PI.audit.deletedJE.text", new Object[]{paramJobj.getString(Constants.userfullname),GRNNumber,JENumber,PINumber, billdate}, locale);
                        }
                        auditRequestParams.put(Constants.reqHeader, paramJobj.getString(Constants.reqHeader));
                        auditRequestParams.put(Constants.remoteIPAddress, paramJobj.getString(Constants.remoteIPAddress));
                        auditRequestParams.put(Constants.useridKey, paramJobj.getString(Constants.useridKey));
                        auditTrailObj.insertAuditLog(AuditAction.RCM_URD_JE_UPDATED, auditMsg, auditRequestParams, mapObject.getKey());
                    }
                }
            }
            issuccess =true;
        } catch (ServiceException ex) {
            msg = messageSource.getMessage("acc.urd.pi.failed.update.jedetails", null, Locale.forLanguageTag(paramJobj.optString("language")));
            throw ServiceException.FAILURE(msg, ex);
        } catch (SessionExpiredException ex) {
            msg = messageSource.getMessage("acc.urd.pi.failed.update.jedetails", null, Locale.forLanguageTag(paramJobj.optString("language")));
            throw ServiceException.FAILURE(msg, ex);
        } catch (ParseException ex) {
            msg = messageSource.getMessage("acc.urd.pi.failed.update.jedetails", null, Locale.forLanguageTag(paramJobj.optString("language")));
            throw ServiceException.FAILURE(msg, ex);
        } finally {
            try {
                jobj.put("success", issuccess);
                jobj.put("msg", msg);
            } catch (JSONException ex) {
                throw ServiceException.FAILURE("Faild to update/ Delete Un-Registered Vendor Purchase Invoice Tax Journal Entry Details If Daily limit cross", ex);
            }
        }
        return jobj;
    }
    
    public List deleteGoodsReceiptOrdersPermanent(JSONObject paramJobj) throws SessionExpiredException, AccountingException, ServiceException, JSONException {
        String linkedTransaction = "";
        List resultList = new ArrayList();
        StringBuffer productIds = new StringBuffer();
        String transactionDeleted="";

        try {
            GoodsReceiptOrder GoodsReceiptOrder = null;
            JSONArray jArr = new JSONArray(paramJobj.optString("data","[{}]"));
            String companyid = paramJobj.optString(Constants.companyKey);
            String doid = "", dono = "";
            KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);

            KwlReturnObject excapresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences expreferences = (ExtraCompanyPreferences) excapresult.getEntityList().get(0);

            boolean isFixedAsset = false;

            if (!StringUtil.isNullOrEmpty(paramJobj.optString("isFixedAsset",null))) {
                isFixedAsset = Boolean.parseBoolean( paramJobj.optString("isFixedAsset"));
            }
            boolean isnegativestockforlocwar = false;
            ExtraCompanyPreferences extraCompanyPreferences = null;
            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            isnegativestockforlocwar = extraCompanyPreferences.isIsnegativestockforlocwar();

            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                doid = StringUtil.DecodeText(jobj.optString("billid"));
                if (!StringUtil.isNullOrEmpty(jobj.optString("billno"))) {
                    dono = StringUtil.DecodeText(jobj.optString("billno"));
                }

                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("doid", doid);
                requestParams.put("companyid", companyid);
                requestParams.put("dono", dono);
                requestParams.put("isFixedAsset", isFixedAsset);
                requestParams.put("isnegativestockforlocwar", isnegativestockforlocwar);

                if (!StringUtil.isNullOrEmpty(doid)) {
                    KwlReturnObject res = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), doid);
                    GoodsReceiptOrder = (GoodsReceiptOrder) res.getEntityList().get(0);
                    if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) { // delete JE temporary
                        KwlReturnObject result = accGoodsReceiptobj.getProductsFromGoodReceiptOrder(doid, companyid);
                        if (result != null && result.getEntityList() != null && !result.getEntityList().isEmpty()) {
                            List productList = result.getEntityList();
                            if (productList != null && !productList.isEmpty()) {
                                for (Object object : productList) {
                                    String productid = (String) object;
                                    if (productIds.indexOf(productid) == -1) {
                                        productIds.append(productid).append(",");
                                    }
                                }
                            }
                        }
                    }
                    // Check is GRO has Depreciated OR SoldAsset
                    if (GoodsReceiptOrder.isFixedAssetGRO()) {
                        boolean isGROhasDepreciatedAsset = accGoodsReceiptobj.isGROhasDepreciatedAsset(doid, companyid);

                        String exceptionMsg = "Goods Receipt Order " + dono + " has depreciated asset(s) so it cannot be deleted.";

                        // check invoice hase sold asset or not

                        boolean isGROhasSoldAsset = accGoodsReceiptobj.isGROhasSoldAsset(doid, companyid);

                        if (!isGROhasDepreciatedAsset) {
                            isGROhasDepreciatedAsset = isGROhasSoldAsset;
                        }

                        // Check GRO has Leased Asset

                        boolean isGROhasLeasedAsset = accGoodsReceiptobj.isGROhasLeasedAsset(doid, companyid);

                        if (!isGROhasDepreciatedAsset) {
                            isGROhasDepreciatedAsset = isGROhasLeasedAsset;
                        }

                        if (isGROhasSoldAsset) {
                            exceptionMsg = "Goods Receipt Order " + dono + " has sold asset(s) so it cannot be deleted.";
                        } else if (isGROhasLeasedAsset) {
                            exceptionMsg = "Goods Receipt Order " + dono + " has Leased asset(s) so it cannot be deleted.";
                        }


                        if (isGROhasDepreciatedAsset) {
                            throw new AccountingException(exceptionMsg);
                        }
                    }


                    KwlReturnObject result = accGoodsReceiptobj.getGROFromPR(doid, companyid);
                    List list = result.getEntityList();
                    if (!list.isEmpty()) {
                        //throw new AccountingException("Selected record(s) is currently used in the Purchase Return(s). So it cannot be deleted.");
                        linkedTransaction += dono + ", ";
                        continue;
                    }
                    KwlReturnObject result1 = accGoodsReceiptobj.getGROFromInv(doid, companyid);
                    List list1 = result1.getEntityList();
                    if (!list1.isEmpty()) {
                        //throw new AccountingException("Selected record(s) is currently used in the Goods Receipt(s). So it cannot be deleted.");
                        linkedTransaction += dono + ", ";
                        continue;
                    }
                    KwlReturnObject result2 = accGoodsReceiptobj.getSerialNoUsedinDOFromGRO(doid, companyid);
                    List list2 = result2.getEntityList();
                    if (!list2.isEmpty()) {
                        linkedTransaction += dono + ", ";
                        continue;
                    }
                    if (!expreferences.isIsnegativestockforlocwar()) { //ERP-12639 : if [Activate Negative Stock For Location Warehouse] check is true then we ll not check whether the GR batch id is used in DO or not.
                        Set<GoodsReceiptOrderDetails> grdSet = GoodsReceiptOrder.getRows();
                        boolean checkBatchusedinDO = false;
                        for (GoodsReceiptOrderDetails grd : grdSet) {
                            if ((grd.getProduct().isIsBatchForProduct() && grd.getProduct().isIswarehouseforproduct() && grd.getProduct().isIslocationforproduct()) || !(grd.getProduct().isIsSerialForProduct())) {
                                KwlReturnObject resultqty = accGoodsReceiptobj.getAvailableQtyOfBatchUsedinDOFromGRO(doid, companyid);
                                List listQty = resultqty.getEntityList();
                                if (!listQty.isEmpty()) {
                                    checkBatchusedinDO = true;
                                    requestParams.clear();
                                    break;
                                }
                            } else {
                                Double qty = grd.getProduct().getAvailableQuantity() - grd.getBaseuomdeliveredquantity();
                                if (qty < 0) {
                                    checkBatchusedinDO = true;
                                    requestParams.clear();
                                    break;
                                }
                            }
                        }
                        if (checkBatchusedinDO) {
                            KwlReturnObject result3 = accGoodsReceiptobj.getbatchUsedinDOFromGRO(doid, companyid);
                            List list3 = result3.getEntityList();
                            if (!list3.isEmpty()) {
                                linkedTransaction += dono + ", ";
                                continue;
                            }
                        }
                    }
                    HashMap<String, Object> doRequestParams = new HashMap<String, Object>();
                    ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
                    filter_names.add("grOrder.ID");
                    filter_params.add(GoodsReceiptOrder.getID());
                    doRequestParams.put("filter_names", filter_names);
                    doRequestParams.put("filter_params", filter_params);

                    KwlReturnObject podresult = accGoodsReceiptobj.getGoodsReceiptOrderDetails(doRequestParams);
                    Iterator itr = podresult.getEntityList().iterator();
                    while (itr.hasNext()) {
                        GoodsReceiptOrderDetails row = (GoodsReceiptOrderDetails) itr.next();
                        JSONObject json = new JSONObject();
                        json.put("grodid", row.getID());
                        KwlReturnObject kwlReturnObject = stockService.getGRODetailISTMapping(json);
                        List<GRODetailISTMapping> groDetailIstMappings = kwlReturnObject.getEntityList();
                        for (GRODetailISTMapping groDetailIstMapping : groDetailIstMappings) {
                            /**
                             * Don't allow user to edit GRN, if GRN is
                             * approved/rejected from QC store.
                             */
                            if (groDetailIstMapping.getApprovedInterStoreTransferRequests() != null && !groDetailIstMapping.getApprovedInterStoreTransferRequests().isEmpty()) {
                                throw new AccountingException(messageSource.getMessage("acc.goodsreceiptnote.cannot.be.deleted.as.approvedOrRejected.byQAstore", new Object[]{"delete", dono, "approved"}, Locale.forLanguageTag(paramJobj.optString("language"))));
                            }
                            if (groDetailIstMapping.getRejectedInterStoreTransferRequests() != null && !groDetailIstMapping.getRejectedInterStoreTransferRequests().isEmpty()) {
                                throw new AccountingException(messageSource.getMessage("acc.goodsreceiptnote.cannot.be.deleted.as.approvedOrRejected.byQAstore", new Object[]{"delete", dono, "rejected"}, Locale.forLanguageTag(paramJobj.optString("language"))));
                            }
                            /**
                             * Delete inter store transfer request which is
                             * created to send GRN document for QC approval.
                             */
                            if (groDetailIstMapping.getInterStoreTransferRequest() != null) {
                                if (groDetailIstMapping.getInterStoreTransferRequest().getStatus() != InterStoreTransferStatus.INTRANSIT) {
                                    throw new AccountingException(messageSource.getMessage("acc.goodsreceiptnote.cannot.be.deleted.as.stockisaccepted.byQAstore", new Object[]{"delete", dono}, Locale.forLanguageTag(paramJobj.optString("language"))));
                                } else {
                                    istService.deleteISTRequest(groDetailIstMapping.getInterStoreTransferRequest());
                                }
                            }
                        }
                        if (row.getPodetails() != null) {
                            String linkid = row.getPodetails().getPurchaseOrder().getID();
                            if (!StringUtil.isNullOrEmpty(linkid)) {
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), linkid);
                                PurchaseOrder purchaseOrder = (PurchaseOrder) rdresult.getEntityList().get(0);
                                HashMap hMap = new HashMap();
                                hMap.put("purchaseOrder", purchaseOrder);
                                hMap.put("value", "0");
                                accGoodsReceiptobj.updatePOLinkflag(hMap);
                            }
                        } else if (row.getVidetails() != null) {
                            String linkid = row.getVidetails().getGoodsReceipt().getID();
                            if (!StringUtil.isNullOrEmpty(linkid)) {
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), linkid);
                                GoodsReceipt goodsReceipt = (GoodsReceipt) rdresult.getEntityList().get(0);
                                HashMap hMap = new HashMap();
                                hMap.put("goodsReceipt", goodsReceipt);
                                hMap.put("isOpenInGR", true);
                                accGoodsReceiptobj.updatePILinkflag(hMap);
                            }
                        } else if (row.getSecuritydetails() != null) {
                            String linkid = row.getSecuritydetails().getSecurityGateEntry().getID();
                            if (!StringUtil.isNullOrEmpty(linkid)) {
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(SecurityGateEntry.class.getName(), linkid);
                                SecurityGateEntry securityGateEntry = (SecurityGateEntry) rdresult.getEntityList().get(0);
                                HashMap hMap = new HashMap();
                                hMap.put("securityGateEntry", securityGateEntry);
                                hMap.put("isOpen", true);
                                hMap.put("value", "0");
                                accGoodsReceiptobj.updateSGELinkflag(hMap);
                            }
                        }

                        /**
                         * Delete Stock out created for GRN ---- JOb work Out
                         * flow
                         */
                        Map<String, Object> reqMap = new HashMap();
                        reqMap.put("orderDetails", row);
                        DeleteStockOutFromGRN(reqMap);

                    }
                    if (preferences.isInventoryAccountingIntegration() && preferences.isWithInvUpdate()) {
                        JSONArray productArray = new JSONArray();

                        String action = "17";
                        boolean isDirectUpdateInvFlag = false;
                        if (preferences.isUpdateInvLevel()) {
                            isDirectUpdateInvFlag = true;
                            action = "19";//Direct Inventory Update action
                        }



                        Set<GoodsReceiptOrderDetails> goodsReceiptOrderDetails = GoodsReceiptOrder.getRows();
                        for (GoodsReceiptOrderDetails goodsReceiptOrderDetail : goodsReceiptOrderDetails) {
                            JSONObject productObject = new JSONObject();
                            productObject.put("itemUomId", goodsReceiptOrderDetail.getInventory().getUom().getID());
                            productObject.put("itemBaseUomRate", goodsReceiptOrderDetail.getInventory().getBaseuomrate());
                            productObject.put("itemQuantity", goodsReceiptOrderDetail.getInventory().getBaseuomquantity() * (-1));
                            productObject.put("quantity", goodsReceiptOrderDetail.getInventory().getQuantity() * (-1));
                            //productObject.put("itemQuantity", goodsReceiptOrderDetail.getInventory().getQuantity()*(-1));
                            productObject.put("itemCode", goodsReceiptOrderDetail.getInventory().getProduct().getProductid());
                            if (isDirectUpdateInvFlag) {
                                productObject.put("storeid", goodsReceiptOrderDetail.getInvstoreid());
                                productObject.put("locationid", goodsReceiptOrderDetail.getInvlocid());
                            }
                            productArray.put(productObject);
                        }
                        if (productArray.length() > 0) {

                            String sendDateFormat = "yyyy-MM-dd";
                            DateFormat dateformat = new SimpleDateFormat(sendDateFormat);
                            Date date = GoodsReceiptOrder.getOrderDate();
                            String stringDate = dateformat.format(date);

                            JSONObject jSONObject = new JSONObject();
                            jSONObject.put("deliveryDate", stringDate);
                            jSONObject.put("dateFormat", sendDateFormat);
                            jSONObject.put("details", productArray);
                            jSONObject.put("orderNumber", GoodsReceiptOrder.getGoodsReceiptOrderNumber());
                            jSONObject.put("companyId", companyid);
                            jSONObject.put("purchasing", true);

                            String url = paramJobj.optString(Constants.inventoryURL);
                            CommonFnController cfc = new CommonFnController();
//                            cfc.updateInventoryLevel(request, jSONObject, url, action);
                            cfc.updateInventoryLevel(paramJobj, jSONObject, url, action);
                        }
                    }
                    String audtmsg = "";
                    if (isFixedAsset) {
                        audtmsg = " Asset ";
                    } else {
                        audtmsg = " ";
                    }
                    // update the purchase order balance quantity
                    if (!StringUtil.isNullObject(requestParams) && requestParams.size() > 0 && !requestParams.isEmpty()) {
                        accGoodsReceiptobj.updatePOBalanceQtyAfterGR(doid, "", companyid);
                        accGoodsReceiptobj.deleteLinkingInformationOfGR(requestParams);//deleting linking information of GR 

                        /*
                         * Updating isLineItemClosed & isPOClosed flag if GR is
                         * deleting that was linked with PO
                         */
                        Set<GoodsReceiptOrderDetails> orderDetail = GoodsReceiptOrder.getRows();
                        for (GoodsReceiptOrderDetails grdetail : orderDetail) {
                            if (grdetail.getPodetails() != null) {
                                grdetail.getPodetails().setIsLineItemClosed(false);
                                grdetail.getPodetails().getPurchaseOrder().setIsPOClosed(false);
                            } else if (grdetail.getVidetails() != null && grdetail.getVidetails().getPurchaseorderdetail() != null) {
                                grdetail.getVidetails().getPurchaseorderdetail().setIsLineItemClosed(false);
                                grdetail.getVidetails().getPurchaseorderdetail().getPurchaseOrder().setIsPOClosed(false);
                            } else if (grdetail.getSecuritydetails() != null) {
                                grdetail.getSecuritydetails().setIsLineItemClosed(false);
                            }

                        }

                        stockMovementService.removeStockMovementByReferenceId(GoodsReceiptOrder.getCompany(), GoodsReceiptOrder.getID());
                        accGoodsReceiptobj.deleteGoodsReceiptOrdersBatchSerialDetails(requestParams); //dlete serial no and mapping
                        requestParams.put("isMRPModuleActivated", extraCompanyPreferences.isActivateMRPModule());
                        requestParams.put("isPerpetualValuationActivated", (preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD));
                        if (extraCompanyPreferences != null && (extraCompanyPreferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                            if (GoodsReceiptOrder.getInventoryJE() != null) { // delete inventory JE
                                JournalEntry inventoryJE = GoodsReceiptOrder.getInventoryJE();
                                requestParams.put("inventoryjeid", inventoryJE.getID());
                            }
                        }
                        accGoodsReceiptobj.deleteGoodsReceiptOrdersPermanent(requestParams);
                        Map<String, Object> auditRequestParams = new HashMap<String, Object>();
                        auditRequestParams.put(Constants.reqHeader, paramJobj.getString(Constants.reqHeader));
                        auditRequestParams.put(Constants.remoteIPAddress, paramJobj.getString(Constants.remoteIPAddress));
                        auditRequestParams.put(Constants.useridKey, paramJobj.getString(Constants.useridKey));

                        auditTrailObj.insertAuditLog(AuditAction.GOODS_RECEIPT_DELETED, "User " + paramJobj.optString(Constants.userfullname) + " has deleted" + audtmsg + "Goods Receipt Permanently " + dono, auditRequestParams, doid);
                        transactionDeleted += GoodsReceiptOrder.getGoodsReceiptOrderNumber();
                    }
                }
            }
            if(StringUtil.isNullOrEmpty(transactionDeleted)){
                throw new AccountingException(messageSource.getMessage("acc.field.Goodsreceiptsquantitynotavailable", null, Locale.forLanguageTag(paramJobj.optString("language"))));
            }
            resultList.add(0, linkedTransaction);
            resultList.add(1, productIds);
        } catch (AccountingException ex) {
            throw new AccountingException(ex.getMessage());
        } catch (InventoryException ex) {
            throw new AccountingException(messageSource.getMessage("acc.common.excp1", null, Locale.forLanguageTag(paramJobj.optString("language"))));
        } catch (JSONException ex) {
            throw new AccountingException(messageSource.getMessage("acc.common.excp1", null, Locale.forLanguageTag(paramJobj.optString("language"))));
        }
        return resultList;
    }  
    
    public void saveGoodsReceiptTdsJEMapping(HashMap<String, Object> paramJobj) {
        try {
            CompanyAccountPreferences cap = (CompanyAccountPreferences) paramJobj.get("companyAccountPreferences");
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            HashMap<String, Date> hmFinancialsdate = authHandler.getFinancialsDates(cap.getFinancialYearFrom(), (Date) paramJobj.get("billdate"));
            Date financialYearStartDate = hmFinancialsdate.get("financialstartdate");
            Date financialYearEndDate = hmFinancialsdate.get("financialenddate");
            Vendor vendor = (Vendor) paramJobj.get("vendor");
            ArrayList<String> nopParams = new ArrayList<String>();
            HashMap<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put("activeFromDate", sdf.format(financialYearStartDate));
            requestParams.put("activeToDate", sdf.format(financialYearEndDate));
            requestParams.put("billdate", sdf.format((Date) paramJobj.get("billdate")));
            requestParams.put("billdateObj", (Date) paramJobj.get("billdate"));
            requestParams.put("vendorID", vendor.getID());
            requestParams.put("companyid", paramJobj.get("companyid"));
            MasterItem naruteofPayment = null;
            TDSRate tdsRate = null;
            if ((boolean) paramJobj.get("isExpenseInv")) { /// Expense Invoices
                Set<ExpenseGRDetail> grd = (Set<ExpenseGRDetail>) paramJobj.get("rowDetailId");
                HashMap<String, Double> tdsAssessableAmounts = getGridTDSAssessableAmount(null, grd);//total assessable amount of 0 TDS in current Invoice
                JSONObject jobjnop = calculateAssessableAmount(null, grd, requestParams);// total assessable amount of 0 TDS in Previous Invoices
                for (ExpenseGRDetail egd : grd) {
                    if (egd.getTdsAssessableAmount() > 0) {
                        naruteofPayment = egd.getNatureOfPayment();
                        requestParams.put("natureofPayment", naruteofPayment.getID());
                        if (!nopParams.contains(naruteofPayment.getID())) {
                            KwlReturnObject res = accountingHandlerDAOobj.getObject(TDSRate.class.getName(), egd.getTdsRuleId());
                            tdsRate = (TDSRate) res.getEntityList().get(0);
                            JSONObject jobj = jobjnop.getJSONObject(naruteofPayment.getID());
                            double totalAssesableAmount = jobj.getDouble("totalTDSAssesableAmount");
                            double totalTDSamountdeducted = jobj.getDouble("totalTDSamountdeducted");
                            boolean tdsjemeppeing_deducted = jobj.getBoolean("deductedWithMapping");
                            if (tdsRate.getBasicexemptionperannum() > 0 && (totalAssesableAmount + tdsAssessableAmounts.get(naruteofPayment.getID()) > tdsRate.getBasicexemptionperannum()) && totalTDSamountdeducted <= 0 && !tdsjemeppeing_deducted) { // Every check is important please do not remove
                                requestParams.put("tdsRate", Double.parseDouble(tdsRate.getRate()));
                                saveGoodsReceiptDetailsTdsJEMapping(paramJobj, requestParams,null);
                                saveExpenseReceiptDetailsTdsJEMapping(paramJobj, requestParams,grd);
                                nopParams.add(naruteofPayment.getID());
                            }
                        }
                    }
                }
            } else { /// Goods Receipt Invoices
                Set<GoodsReceiptDetail> grd = (Set<GoodsReceiptDetail>) paramJobj.get("rowDetailId");
                HashMap<String, Double> tdsAssessableAmounts = getGridTDSAssessableAmount(grd, null);//total assessable amount of 0 TDS in current Invoice
                JSONObject jobjnop = calculateAssessableAmount(grd, null, requestParams);// total assessable amount of 0 TDS in Previous Invoices
                for (GoodsReceiptDetail egd : grd) {
                    if (egd.getTdsAssessableAmount() > 0) {
                        naruteofPayment = egd.getNatureOfPayment();
                        requestParams.put("natureofPayment", naruteofPayment.getID());
                        if (!nopParams.contains(naruteofPayment.getID())) {
                            KwlReturnObject res = accountingHandlerDAOobj.getObject(TDSRate.class.getName(), egd.getTdsRuleId());
                            tdsRate = (TDSRate) res.getEntityList().get(0);
                            JSONObject jobj = jobjnop.getJSONObject(naruteofPayment.getID());
                            double totalAssesableAmount = jobj.getDouble("totalTDSAssesableAmount");
                            double totalTDSamountdeducted = jobj.getDouble("totalTDSamountdeducted");
                            boolean tdsjemeppeing_deducted = jobj.getBoolean("deductedWithMapping");
                            if (tdsRate.getBasicexemptionperannum() > 0 && (totalAssesableAmount + tdsAssessableAmounts.get(naruteofPayment.getID()) > tdsRate.getBasicexemptionperannum()) && totalTDSamountdeducted <= 0 && !tdsjemeppeing_deducted) { // Every check is important please do not remove
                                requestParams.put("tdsRate", Double.parseDouble(tdsRate.getRate()));
                                saveGoodsReceiptDetailsTdsJEMapping(paramJobj, requestParams,grd);
                                saveExpenseReceiptDetailsTdsJEMapping(paramJobj, requestParams,null);
                                nopParams.add(naruteofPayment.getID());
                            }
                        }
                    }
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void saveGoodsReceiptDetailsTdsJEMapping(HashMap<String, Object> paramJobj, HashMap<String, Object> requestParams,Set<GoodsReceiptDetail> grd) throws Exception {
        try {
            KwlReturnObject kwlobj = accGoodsReceiptobj.getGoodsReceiptDetailsTDSForJE(requestParams);
            List<GoodsReceiptDetail> grDetail = kwlobj.getEntityList();
            List<GoodsReceiptDetail> currentInvoice = getCurrentInvoiceUndeductedTDS(grd,null,requestParams.get("natureofPayment").toString());
            grDetail.addAll(currentInvoice);
            Map<String, Object> newMapJE = (Map<String, Object>) paramJobj.get("jeDataMap");
            Set jeDataMapSet = newMapJE.keySet();
            for (GoodsReceiptDetail goodsReceiptDetail : grDetail) {
                HashMap<String, Object> jeDataMap = new HashMap<String, Object>();
                Iterator<String> itr = jeDataMapSet.iterator();
                while (itr.hasNext()) {
                    String key = itr.next();
                    jeDataMap.put(key, newMapJE.get(key));
                }
                JSONObject jedjson = null;
                KwlReturnObject jedresult = null;
                JournalEntryDetail jed = null;
                jeDataMap.putAll(getVendorInvoiceJournalEntrySequenceMap(paramJobj, requestParams));
                if(currentInvoice.contains(goodsReceiptDetail)){
                    jeDataMap.put("transactionId", paramJobj.get("goodsReceiptId"));
                    jeDataMap.put(MEMO, "Exempt Limit is Crossed, Auto JE for TDS of " + paramJobj.get("goodsReceiptNumber") + ", " + paramJobj.get("vendorName"));
                }else{
                    jeDataMap.put("transactionId", goodsReceiptDetail.getGoodsReceipt().getID());
                    jeDataMap.put(MEMO, "Exempt Limit is Crossed, Auto JE for TDS of " + goodsReceiptDetail.getGoodsReceipt().getGoodsReceiptNumber() + ", " + goodsReceiptDetail.getGoodsReceipt().getVendor().getName());
                }

                Set<JournalEntryDetail> jedetails = new HashSet<JournalEntryDetail>();
                KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
                JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
                String jeid = journalEntry.getID();
                double rate = (double) requestParams.get("tdsRate");
                double amount = (rate * goodsReceiptDetail.getTdsAssessableAmount()) / 100;
                amount = Math.ceil(amount);
                /*
                 * Debit JE Entry For GoodsReceipts
                 */
                jedjson = new JSONObject();
                jedjson.put(SRNO, jedetails.size() + 1);
                jedjson.put(COMPANYID, paramJobj.get("companyid"));
                jedjson.put(AMOUNT, amount);
                jedjson.put(ACCOUNTID, goodsReceiptDetail.getInventory().getProduct().getPurchaseAccount().getID());
                jedjson.put(DEBIT, true);
                jedjson.put(JEID, jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);

                /*
                 * Credit JE Entry For GoodsReceipts
                 */
                jedjson = new JSONObject();
                jedjson.put(SRNO, jedetails.size() + 1);
                jedjson.put(COMPANYID, paramJobj.get("companyid"));
                jedjson.put(AMOUNT, amount);
                jedjson.put(ACCOUNTID, goodsReceiptDetail.getTdsPayableAccount().getID());
                jedjson.put(DEBIT, false);
                jedjson.put(JEID, jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);

                /*
                 * Save JE with JE details 
                 */
                jeDataMap.put(JEID, jeid);
                jeDataMap.put(JEDETAILS, jedetails);
                jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);
                journalEntry = (JournalEntry) jeresult.getEntityList().get(0);

                accGoodsReceiptobj.saveTDSJEMapping(journalEntry, paramJobj, rate, amount, goodsReceiptDetail, null);
            }
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
    }

    public void saveExpenseReceiptDetailsTdsJEMapping(HashMap<String, Object> paramJobj, HashMap<String, Object> requestParams,Set<ExpenseGRDetail> grd) throws Exception {
        try {
            KwlReturnObject kwlobj = accGoodsReceiptobj.getExpenseReceiptDetailsTDSForJE(requestParams);
            List<ExpenseGRDetail> expenseDetail = kwlobj.getEntityList();
            List<ExpenseGRDetail> currentInvoice = getCurrentInvoiceUndeductedTDS(null,grd,requestParams.get("natureofPayment").toString());
            expenseDetail.addAll(currentInvoice);
            Map<String, Object> newMapJE = (Map<String, Object>) paramJobj.get("jeDataMap");
            Set jeDataMapSet = newMapJE.keySet();
            for (ExpenseGRDetail ExpenseGRDetail : expenseDetail) {

                HashMap<String, Object> jeDataMap = new HashMap<String, Object>();
                Iterator<String> itr = jeDataMapSet.iterator();
                while (itr.hasNext()) {
                    String key = itr.next();
                    jeDataMap.put(key, newMapJE.get(key));
                }
                JSONObject jedjson = null;
                KwlReturnObject jedresult = null;
                JournalEntryDetail jed = null;

                jeDataMap.putAll(getVendorInvoiceJournalEntrySequenceMap(paramJobj, requestParams));
                if(currentInvoice.contains(ExpenseGRDetail)){
                    jeDataMap.put("transactionId", paramJobj.get("goodsReceiptId"));
                }else{
                    jeDataMap.put("transactionId", ExpenseGRDetail.getGoodsReceipt().getID());
                }
                jeDataMap.put(MEMO, "Exemption Limit is Crossed, Auto JE for TDS of " + ExpenseGRDetail.getGoodsReceipt().getGoodsReceiptNumber() + ", " + ExpenseGRDetail.getGoodsReceipt().getVendor().getName());

                Set<JournalEntryDetail> jedetails = new HashSet<JournalEntryDetail>();
                KwlReturnObject jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
                JournalEntry journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
                String jeid = journalEntry.getID();
                double rate = (double) requestParams.get("tdsRate");
                double amount = (rate * ExpenseGRDetail.getTdsAssessableAmount()) / 100;
                amount = Math.ceil(amount);
                /*
                 * Debit JE Entry For Expense Invoices
                 */
                jedjson = new JSONObject();
                jedjson.put(SRNO, jedetails.size() + 1);
                jedjson.put(COMPANYID, paramJobj.get("companyid"));
                jedjson.put(AMOUNT, amount);
                jedjson.put(ACCOUNTID, ExpenseGRDetail.getAccount().getID());
                jedjson.put(DEBIT, true);
                jedjson.put(JEID, jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);

                /*
                 * Credit JE Entry For Expense Invoices
                 */
                jedjson = new JSONObject();
                jedjson.put(SRNO, jedetails.size() + 1);
                jedjson.put(COMPANYID, paramJobj.get("companyid"));
                jedjson.put(AMOUNT, amount);
                jedjson.put(ACCOUNTID, ExpenseGRDetail.getTdsPayableAccount().getID());
                jedjson.put(DEBIT, false);
                jedjson.put(JEID, jeid);
                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jedetails.add(jed);

                /*
                 * Save JE with JE details 
                 */
                jeDataMap.put(JEID, jeid);
                jeDataMap.put(JEDETAILS, jedetails);
                jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);
                journalEntry = (JournalEntry) jeresult.getEntityList().get(0);

                accGoodsReceiptobj.saveTDSJEMapping(journalEntry, paramJobj, rate, amount, null, ExpenseGRDetail);
            }
        } catch (Exception ex) {
            throw new Exception(ex.getMessage());
        }
    }

    public HashMap<String, Object> getVendorInvoiceJournalEntrySequenceMap(HashMap<String, Object> paramJobj, HashMap<String, Object> requestParams) throws Exception {
        HashMap<String, Object> jeDataMap = new HashMap<String, Object>();
        String jeentryNumber = "";
        String jeIntegerPart = "";
        String jeDatePrefix = "";
        String jeDateAfterPrefix = "";
        String jeDateSuffix = "";
        String jeSeqFormatId = "";
        boolean jeautogenflag = false;
        synchronized (this) {
            HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
            JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
            JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
            JEFormatParams.put("companyid", paramJobj.get("companyid"));
            JEFormatParams.put("isdefaultFormat", true);

            KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
            SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
            Map<String, Object> seqNumberMap = new HashMap<String, Object>();
            seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(paramJobj.get("companyid").toString(), StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, (Date) requestParams.get("billdateObj"));
            jeentryNumber = (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER);  //next auto generated number
            jeIntegerPart = (String) seqNumberMap.get(Constants.SEQNUMBER);//integer Part
            jeDatePrefix = (String) seqNumberMap.get(Constants.DATEPREFIX);//Date Prefix Part
            jeDateAfterPrefix = (String) seqNumberMap.get(Constants.DATEAFTERPREFIX);  //Date After Prefix Part
            jeDateSuffix = (String) seqNumberMap.get(Constants.DATESUFFIX);//Date Suffix Part
            jeSeqFormatId = format.getID();
            jeautogenflag = true;
        }
        jeDataMap.put("entrynumber", jeentryNumber);
        jeDataMap.put("autogenerated", jeautogenflag);
        jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
        jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
        jeDataMap.put(Constants.DATEPREFIX, jeDatePrefix);
        jeDataMap.put(Constants.DATEAFTERPREFIX, jeDateAfterPrefix);
        jeDataMap.put(Constants.DATESUFFIX, jeDateSuffix);
        jeDataMap.put("transactionModuleid", Constants.Acc_Vendor_Invoice_ModuleId);

        return jeDataMap;
    }

    public HashMap<String, Double> getGridTDSAssessableAmount(Set<GoodsReceiptDetail> grd, Set<ExpenseGRDetail> erd) throws Exception {
        HashMap<String, Double> tdsAssessableAmounts = new HashMap<String, Double>();
        if (grd != null) {
            for (GoodsReceiptDetail egd : grd) {
                if (egd.getTdsAssessableAmount() > 0) {
                    String naruteofPayment = egd.getNatureOfPayment().getID();
                    if (tdsAssessableAmounts.containsKey(naruteofPayment)) {
                        tdsAssessableAmounts.put(naruteofPayment, tdsAssessableAmounts.get(naruteofPayment) + egd.getTdsAssessableAmount());
                    } else {
                        tdsAssessableAmounts.put(naruteofPayment, egd.getTdsAssessableAmount());
                    }
                }
            }
        } else {
            for (ExpenseGRDetail egd : erd) {
                if (egd.getTdsAssessableAmount() > 0) {
                    String naruteofPayment = egd.getNatureOfPayment().getID();
                    if (tdsAssessableAmounts.containsKey(naruteofPayment)) {
                        tdsAssessableAmounts.put(naruteofPayment, tdsAssessableAmounts.get(naruteofPayment) + egd.getTdsAssessableAmount());
                    } else {
                        tdsAssessableAmounts.put(naruteofPayment, egd.getTdsAssessableAmount());
                    }
                }
            }
        }
        return tdsAssessableAmounts;
    }

    public JSONObject calculateAssessableAmount(Set<GoodsReceiptDetail> grd, Set<ExpenseGRDetail> erd, HashMap<String, Object> hashParams) throws Exception {
        JSONObject jobjNop = new JSONObject();
        if (grd != null) {
            for (GoodsReceiptDetail egd : grd) {
                if (egd.getTdsAssessableAmount() > 0 && !jobjNop.has(egd.getNatureOfPayment().getID())) {
                    hashParams.put("natureofPayment", egd.getNatureOfPayment().getID());
                    JSONObject jobj = accCommonTablesDAO.totalTDSAssessableAmountForExemptLimit(hashParams);
                    jobjNop.put(egd.getNatureOfPayment().getID(), jobj);
                }
            }
        } else {
            for (ExpenseGRDetail edg : erd) {
                if (edg.getTdsAssessableAmount() > 0 && !jobjNop.has(edg.getNatureOfPayment().getID())) {
                    hashParams.put("natureofPayment", edg.getNatureOfPayment().getID());
                    JSONObject jobj = accCommonTablesDAO.totalTDSAssessableAmountForExemptLimit(hashParams);
                    jobjNop.put(edg.getNatureOfPayment().getID(), jobj);
                }
            }
        }
        return jobjNop;
    }
    public List getCurrentInvoiceUndeductedTDS(Set<GoodsReceiptDetail> grd, Set<ExpenseGRDetail> erd, String natureofPayment) {
        List grList = new ArrayList();
        if (grd != null) {
            for (GoodsReceiptDetail egd : grd) {
                if (egd.getTdsAssessableAmount() > 0 && egd.getTdsLineAmount() <= 0 && natureofPayment.equals(egd.getNatureOfPayment().getID()) && egd.getTdsRate() <= 0 && egd.getTdsJEMapping()== null) {
                    grList.add(egd);
                }
            }
        } else if(erd!=null) {
            for (ExpenseGRDetail edg : erd) {
                if (edg.getTdsAssessableAmount() > 0 && edg.getTdsLineAmount() <= 0 && natureofPayment.equals(edg.getNatureOfPayment().getID()) && edg.getTdsRate() <= 0 && edg.getTdsJEMapping()== null) {
                    grList.add(edg);
                }
            }
        }
        return grList;
    }
    
        /*-------Function to send approval mail if check "Allow Sending Approval Mail" is activated from system preferences---------*/
    @Override
    public void sendApprovalMailIfAllowedFromSystemPreferences(HashMap emailMap) throws ServiceException {

        String userName = "";
        Company company = null;
        GoodsReceipt purchaseInvoice = null;
        String baseUrl = "";
        CompanyAccountPreferences preferences = null;
        HashMap<String, Object> ApproveMap =new HashMap();


        if (emailMap.containsKey("userName") && emailMap.get("userName") != null) {
            userName = (String)emailMap.get("userName");
        }
        if (emailMap.containsKey("company") && emailMap.get("company") != null) {
             company = (Company)emailMap.get("company");
        }

        if (emailMap.containsKey("purchaseInvoice") && emailMap.get("purchaseInvoice") != null) {
            purchaseInvoice = (GoodsReceipt)emailMap.get("purchaseInvoice");
        }

        if (emailMap.containsKey("baseUrl") && emailMap.get("baseUrl") != null) {
            baseUrl = (String)emailMap.get("baseUrl");
        }

        if (emailMap.containsKey("preferences") && emailMap.get("preferences") != null) {
            preferences = (CompanyAccountPreferences)emailMap.get("preferences");
        }
         if (emailMap.containsKey("ApproveMap") && emailMap.get("ApproveMap") != null) {
                ApproveMap = (HashMap<String, Object>) emailMap.get("ApproveMap");
        }
               
               
        String creatormail = company.getCreator().getEmailID();
        String fname = company.getCreator().getFirstName() == null ? "" : company.getCreator().getFirstName();
        String lname = company.getCreator().getLastName() == null ? "" : company.getCreator().getLastName();
        String creatorname = fname + " " + lname;
        String documentcreatoremail = (purchaseInvoice != null && purchaseInvoice.getCreatedby() != null) ? purchaseInvoice.getCreatedby().getEmailID() : "";
        String approvalpendingStatusmsg = "";
        HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
        ArrayList<String> emailArray = new ArrayList<>();
        qdDataMap.put(Constants.companyKey, company.getCompanyID());
        qdDataMap.put("level", purchaseInvoice.getApprovestatuslevel());
        qdDataMap.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
//        emailArray = commonFnControllerService.getUserApprovalEmail(qdDataMap);
        emailArray.add(creatormail);
        if (!StringUtil.isNullOrEmpty(documentcreatoremail) && !creatormail.equalsIgnoreCase(documentcreatoremail)) {
                    emailArray.add(documentcreatoremail);
                }
        String[] emails = {};
        emails = emailArray.toArray(emails);
//                    String[] emails = {creatormail};
        if (!StringUtil.isNullOrEmpty(preferences.getApprovalEmails())) {
            String[] compPrefMailIds = preferences.getApprovalEmails().split(",");
            emails = AccountingManager.getMergedMailIds(emails, compPrefMailIds);
        }
        if (purchaseInvoice.getApprovestatuslevel() < 11) {
            qdDataMap.put("ApproveMap", ApproveMap);
                approvalpendingStatusmsg=commonFnControllerService.getApprovalstatusmsg(qdDataMap);
                }
        Map<String, Object> mailParameters = new HashMap();
        mailParameters.put("Number", purchaseInvoice.getGoodsReceiptNumber());
        mailParameters.put("userName", userName);
        mailParameters.put("emails", emails);
        mailParameters.put("sendorInfo", Constants.ADMIN_EMAILID);
        mailParameters.put("moduleName", Constants.VENDOR_INVOICE);
        mailParameters.put("addresseeName", "All");
        mailParameters.put("companyid", company.getCompanyID());
        mailParameters.put("baseUrl", baseUrl);
        mailParameters.put("approvalstatuslevel", purchaseInvoice.getApprovestatuslevel());
        mailParameters.put("approvalpendingStatusmsg", approvalpendingStatusmsg);
        if (emails.length > 0) {
            accountingHandlerDAOobj.sendApprovedEmails(mailParameters);
        }
    }
    
    
    /*---Function to save approval history , If any document is approved at some level------   */
    public List saveApprovalHistory(HashMap approvalHistoryMap) throws ServiceException {

        List approvalHistoryList = new ArrayList();

        GoodsReceipt purchaseInvoice = null;
        Company companyObj = null;
        String userid = "";

        if (approvalHistoryMap.containsKey("purchaseInvoice") && approvalHistoryMap.get("purchaseInvoice") != null) {
            purchaseInvoice = (GoodsReceipt) approvalHistoryMap.get("purchaseInvoice");
        }

        if (approvalHistoryMap.containsKey("company") && approvalHistoryMap.get("company") != null) {
            companyObj = (Company) approvalHistoryMap.get("company");
        }

        if (approvalHistoryMap.containsKey("userid") && approvalHistoryMap.get("userid") != null) {
            userid = (String) approvalHistoryMap.get("userid");
        }

        HashMap<String, Object> hashMap = new HashMap<String, Object>();
        hashMap.put("transtype", Constants.VENDOR_Invoice_APPROVAL);
        hashMap.put("transid", purchaseInvoice.getID());
        hashMap.put("approvallevel", purchaseInvoice.getApprovestatuslevel());//  If approvedLevel = 11 then its final Approval
        hashMap.put("remark", "");
        hashMap.put("userid", userid);
        hashMap.put("companyid", companyObj.getCompanyID());
        accountingHandlerDAOobj.updateApprovalHistory(hashMap);
       
        String roleName = "Company User";
        KwlReturnObject kmsg = null;
        kmsg = permissionHandlerDAOObj.getRoleofUser(userid);
        Iterator ite2 = kmsg.getEntityList().iterator();
        while (ite2.hasNext()) {
            Object[] row = (Object[]) ite2.next();
            roleName = row[1].toString();
        }

        approvalHistoryList.add(roleName);

        return approvalHistoryList;

    }
    
    
    /*---Approve pending items related to Vendor Invoice If 
     Invoice is being approved
     */
    public List approveRelevantDocumentAttachedToVendorInvoice(HashMap approveJeMap) throws ServiceException, JSONException, AccountingException, SessionExpiredException, ParseException {//also think should be thrown or catch

        List approveJeMapList = new ArrayList();
        GoodsReceipt purchaseInvoice = null;
        Company companyObj = null;
        String postingDateStr = "";
        ExtraCompanyPreferences extrareferences = null;
        CompanyAccountPreferences preferences = null;
        JSONObject paramJobj = new JSONObject();
           Map<String, Object> jeDataMap = new HashMap<String, Object>();
           boolean  isEditedPendingDocument =false;

        if (approveJeMap.containsKey("purchaseInvoice") && approveJeMap.get("purchaseInvoice") != null) {
            purchaseInvoice = (GoodsReceipt) approveJeMap.get("purchaseInvoice");
        }

        if (approveJeMap.containsKey("company") && approveJeMap.get("company") != null) {
            companyObj = (Company) approveJeMap.get("company");
        }

        if (approveJeMap.containsKey("extraPreferences") && approveJeMap.get("extraPreferences") != null) {
            extrareferences = (ExtraCompanyPreferences) approveJeMap.get("extraPreferences");
        }

        if (approveJeMap.containsKey("preferences") && approveJeMap.get("preferences") != null) {
            preferences = (CompanyAccountPreferences) approveJeMap.get("preferences");
        }

        if (approveJeMap.containsKey("postingDateStr") && approveJeMap.get("postingDateStr") != null) {
            postingDateStr = (String) approveJeMap.get("postingDateStr");
        }

        if (approveJeMap.containsKey("paramJobj") && approveJeMap.get("paramJobj") != null) {
            paramJobj = (JSONObject) approveJeMap.get("paramJobj");
        }
        
        if (approveJeMap.containsKey("jeDataMap") && approveJeMap.get("jeDataMap") != null) {
            jeDataMap = (Map<String, Object>) approveJeMap.get("jeDataMap");
        }
        
        if (approveJeMap.containsKey("isEditedPendingDocument") && approveJeMap.get("isEditedPendingDocument") != null) {
            isEditedPendingDocument = (Boolean) approveJeMap.get("isEditedPendingDocument");
        }
        
        

        String companyid = companyObj.getCompanyID();

        String jeID = purchaseInvoice.getJournalEntry().getID();
        String jeCompany = purchaseInvoice.getJournalEntry().getCompany().getCompanyID();
        String JENumber = "";
        String JEMsg = "";

        DateFormat df = authHandler.getDateOnlyFormat();
        Date postingDate = null;
        if (!StringUtil.isNullOrEmpty(postingDateStr)) {
            postingDate = df.parse(postingDateStr);
        }

        if (StringUtil.isNullOrEmpty(purchaseInvoice.getJournalEntry().getEntryNumber())) {
            int isApproved = 0;
            HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
            JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
            JEFormatParams.put("modulename", CompanyPreferencesConstants.AUTOJOURNALENTRY);
            JEFormatParams.put("companyid", companyid);
            JEFormatParams.put("isdefaultFormat", true);
            KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
            SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
            jeDataMap.put("postingDate", postingDateStr);
            jeDataMap.put("isEditedPendingDocument", isEditedPendingDocument);
//            String JENumBer = journalEntryModuleServiceobj.updateJEEntryNumberForNewJE(jeDataMap, purchaseInvoice.getJournalEntry(), companyid, format.getID(), isApproved);
            String JENumBer = "";
            KwlReturnObject returnObj = journalEntryModuleServiceobj.updateJEEntryNumberForNewJE(jeDataMap, purchaseInvoice.getJournalEntry(), companyid, format.getID(), isApproved);
            if (returnObj.isSuccessFlag() && returnObj.getRecordTotalCount() > 0) {
                JENumBer = (String) returnObj.getEntityList().get(0);
            }
        } else {
            JSONObject jeJobj = new JSONObject();
            HashSet<JournalEntryDetail> details = new HashSet<JournalEntryDetail>();
            jeJobj.put("jeid", jeID);
            jeJobj.put("companyid", jeCompany);
            jeJobj.put("pendingapproval", 0);
            JSONObject jObj = extrareferences.getColumnPref() != null ? new JSONObject(extrareferences.getColumnPref()) : new JSONObject();
            boolean isPostingDateCheck = false;
            if (!StringUtil.isNullObject(jObj) && jObj.has(Constants.IS_POSTING_DATE_CHECK) && jObj.get(Constants.IS_POSTING_DATE_CHECK) != null && jObj.optBoolean(Constants.IS_POSTING_DATE_CHECK, false)) {
                isPostingDateCheck = true;
            }
            if (isPostingDateCheck) {
                jeJobj.put("entrydate", postingDate);
            }
            accJournalEntryobj.updateJournalEntry(jeJobj, details);
        }
        JENumber = " with JE No. " + purchaseInvoice.getJournalEntry().getEntryNumber();
        JEMsg = " JE No : <b>" + purchaseInvoice.getJournalEntry().getEntryNumber() + "</b>";
        // Approve Auto Generated GR if respective PI approved
        KwlReturnObject InvoiceGRO = accGoodsReceiptobj.getAutoGeneratedGROFromVInvoices(purchaseInvoice.getID(), companyid);//check id is proper or not
        if (InvoiceGRO.getEntityList() != null && InvoiceGRO.getEntityList().size() > 0) {
            Object[] oj = (Object[]) InvoiceGRO.getEntityList().get(0);
            String goodsRecieptOrderID = oj[1].toString();
            KwlReturnObject grores = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), goodsRecieptOrderID);
            GoodsReceiptOrder doObj = (GoodsReceiptOrder) grores.getEntityList().get(0);
            if (doObj.getApprovestatuslevel() != 11) {
                accGoodsReceiptobj.approvePendingGRO(goodsRecieptOrderID, companyid, 11);

                List<StockMovement> stockMovementsList = new ArrayList<>();
                Set<GoodsReceiptOrderDetails> groDetails = doObj.getRows();
                for (GoodsReceiptOrderDetails groDetail : groDetails) {
                    Product product = groDetail.getProduct();
                    if (product != null && (extrareferences != null && extrareferences.isActivateInventoryTab()) && (product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct() || product.isIsSerialForProduct())) {
                        newStockMovementGROrder(groDetail, stockMovementsList);
                    }
                    Inventory inventory = groDetail.getInventory();
                    if (inventory.isInvrecord()) {
                        inventory.setBaseuomquantity(inventory.getActquantity());
                        inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() + inventory.getBaseuomquantity());
                        inventory.setActquantity(0.0);
                    }
                }
                if (doObj.getInventoryJE() != null && extrareferences != null && (extrareferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                    doObj.getInventoryJE().setPendingapproval(0); // approve GRO Inventory JE
                }
                if (extrareferences != null && extrareferences.isActivateInventoryTab() && !stockMovementsList.isEmpty()) {
                    stockMovementService.addOrUpdateBulkStockMovement(doObj.getCompany(), doObj.getID(), stockMovementsList);
                }
            }
        }

        /* Modify RCM Un-Registered Journal Entry details table data on Approve Purchase Invoice
         && cqObj.isGtaapplicable()
         */
        Date entryDateForLock = null;
        entryDateForLock = purchaseInvoice.getJournalEntry().getEntryDate();
        if (Constants.isRCMPurchaseURD5KLimit && purchaseInvoice != null && purchaseInvoice.getVendor() != null) {
            if (purchaseInvoice.getVendor().getGSTRegistrationType() != null && purchaseInvoice.getVendor().getGSTRegistrationType().getDefaultMasterItem() != null) {
                String DefaultMasterItemId = purchaseInvoice.getVendor().getGSTRegistrationType().getDefaultMasterItem().getID();
                if (DefaultMasterItemId.equals(Constants.GSTRegType.get(Constants.GSTRegType_Unregistered))) {
                    /**
                     * Modify All Journal Entry details if daily limit cross on
                     * particular Bill date
                     */
                    if (entryDateForLock != null) {
                        paramJobj.put("billdate", df.format(entryDateForLock));
                        paramJobj.put("companyid", companyid);
                        paramJobj.put(Constants.df, df);
                        paramJobj.put("invoiceAmount", 0);
                        paramJobj.put("GRNNumber", purchaseInvoice.getGoodsReceiptNumber());
                        modifyURDVendorRCMPurchaseInvoiceJEDetails(paramJobj);
                    }
                }
            }
        }
        approveJeMapList.add(JENumber);
        approveJeMapList.add(JEMsg);
        
        return approveJeMapList;
    } 
    
    
    
    

     public void newStockMovementGROrder(GoodsReceiptOrderDetails goodsReceiptOrderDetails,List<StockMovement> stockMovementsList) throws ServiceException{
        try {
            String documentid=goodsReceiptOrderDetails.getID();
            Product product=goodsReceiptOrderDetails.getProduct();
            KwlReturnObject kmsg = null;
            List<Object[]> batchserialdetails = null;
            if (!product.isIsSerialForProduct()) {
                kmsg = accCommonTablesDAO.getBatchSerialDetails(documentid, true, false,  Integer.toString(Constants.Acc_Goods_Receipt_ModuleId), false, true, "");
                batchserialdetails = kmsg.getEntityList();
            } else {
                kmsg = accCommonTablesDAO.getBatchSerialDetails(documentid, !product.isIsSerialForProduct(), false, Integer.toString(Constants.Acc_Goods_Receipt_ModuleId), false, true, "");
                batchserialdetails = kmsg.getEntityList();
            }

            double ActbatchQty = 1;
            double batchQty = 0;
            if (batchserialdetails != null) {
                // Save Batch detail for both  option for serial no and batch also as if batch option is off then also we are generating batch in backend
                StockMovementDetail smd = null;
                StockMovement stockMovement = null;
                Map<Store, StockMovement> storeWiseStockMovement = new HashMap<>();
                for (Object[] objArr : batchserialdetails) {
                    String locationid = "";
                    String warehouseid = "";
                    String batchid = (String) objArr[0];
                    if (objArr[2] != null) {
                        locationid = (String) objArr[2];
                    }
                    if (objArr[3] != null) {
                        warehouseid = (String) objArr[3];
                    }
                    //double quantity = getNewBatchRemainingQuantity(locationid, warehouseid, companyid, product.getID(), batchid, moduleID, isEdit, documentid);
//                    obj.put("avlquantity", quantity);
                    if ((product.isIsBatchForProduct() || product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct())) {
                        ActbatchQty = accCommonTablesDAO.getBatchQuantity(documentid, (String) objArr[0]);
                        if (batchQty == 0) {
                            batchQty = ActbatchQty;

                            KwlReturnObject warehouseObj = accountingHandlerDAOobj.getObject(Store.class.getName(), warehouseid);
                            Store store = (Store) warehouseObj.getEntityList().get(0);
                            if (product.isIswarehouseforproduct() && product.isIslocationforproduct()) {
                                if (storeWiseStockMovement.containsKey(store)) {
                                    stockMovement = storeWiseStockMovement.get(store);
                                    stockMovement.setQuantity(stockMovement.getQuantity() + batchQty);
                                } else {
                                    stockMovement = new StockMovement();
                                    if (store != null) {
                                        stockMovement.setStore(store);
                                    }
                                    stockMovement.setCompany(product.getCompany());
                                    stockMovement.setProduct(product);
                                    stockMovement.setStockUoM(product.getUnitOfMeasure());
                                    stockMovement.setPricePerUnit(goodsReceiptOrderDetails.getBaseuomrate() < 1 ? (goodsReceiptOrderDetails.getRate() * (1 / goodsReceiptOrderDetails.getBaseuomrate())) : goodsReceiptOrderDetails.getRate() / goodsReceiptOrderDetails.getBaseuomrate());
                                    stockMovement.setQuantity(batchQty);
                                    stockMovement.setTransactionDate(goodsReceiptOrderDetails.getGrOrder().getOrderDate());
                                    stockMovement.setModuleRefId(goodsReceiptOrderDetails.getGrOrder().getID());
                                    stockMovement.setModuleRefDetailId(goodsReceiptOrderDetails.getID());
                                    stockMovement.setVendor(goodsReceiptOrderDetails.getGrOrder().getVendor());
                                    stockMovement.setCostCenter(goodsReceiptOrderDetails.getGrOrder().getCostcenter());
                                    stockMovement.setTransactionNo(goodsReceiptOrderDetails.getGrOrder().getGoodsReceiptOrderNumber());
                                    if (goodsReceiptOrderDetails.getGrOrder().isIsconsignment()) {
                                        stockMovement.setTransactionModule(TransactionModule.ERP_Consignment_GR);
                                        stockMovement.setRemark("Consignment GRN created");
                                    } else {
                                        stockMovement.setTransactionModule(TransactionModule.ERP_GRN);
                                        stockMovement.setRemark("GRN created");
                                    }
                                    stockMovement.setTransactionType(TransactionType.IN);
                                    stockMovement.setMemo(goodsReceiptOrderDetails.getGrOrder().getMemo());
                                    storeWiseStockMovement.put(store, stockMovement);
                                }
                            }
                        }
                        if ((product.isIslocationforproduct() || product.isIswarehouseforproduct() || product.isIsBatchForProduct() || product.isIsrowforproduct() || product.isIsrackforproduct() || product.isIsbinforproduct()) && (batchQty == ActbatchQty)) {
                            KwlReturnObject locationUpdate = accountingHandlerDAOobj.getObject(Location.class.getName(), locationid);
                            Location locationObj = (Location) locationUpdate.getEntityList().get(0);
                            if (product.isIswarehouseforproduct() && product.isIslocationforproduct()) {
                                smd = new StockMovementDetail();
                                if (locationObj != null) {
                                    smd.setLocation(locationObj);
                                }
                                if (product.isIsrowforproduct()) {
                                    KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), (String) objArr[15]);
                                    StoreMaster row = (StoreMaster) krObject.getEntityList().get(0);
                                    smd.setRow(row);
                                }
                                if (product.isIsrackforproduct()) {
                                    KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), (String) objArr[16]);
                                    StoreMaster rack = (StoreMaster) krObject.getEntityList().get(0);
                                    smd.setRack(rack);
                                }
                                if (product.isIsbinforproduct()) {
                                    KwlReturnObject krObject = accountingHandlerDAOobj.getObject(StoreMaster.class.getName(), (String) objArr[17]);
                                    StoreMaster bin = (StoreMaster) krObject.getEntityList().get(0);
                                    smd.setBin(bin);
                                }

                                if (product.isIsBatchForProduct() && objArr[0] != null) {
                                    KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewProductBatch.class.getName(), objArr[0].toString());
                                    NewProductBatch newProductBatch = (NewProductBatch) result1.getEntityList().get(0);
                                    if (newProductBatch != null) {
                                        smd.setBatchName(newProductBatch.getBatchname());
                                    }
                                }
                                smd.setQuantity(batchQty);
                                smd.setStockMovement(stockMovement);

                                stockMovement.getStockMovementDetails().add(smd);
                            }

                        }
                    }
                    batchQty--;

                    if (product.isIsSerialForProduct() && objArr[7] != null) {
                        KwlReturnObject result1 = accountingHandlerDAOobj.getObject(NewBatchSerial.class.getName(), objArr[7].toString());
                        NewBatchSerial newBatchSerial = (NewBatchSerial) result1.getEntityList().get(0);
                        if (newBatchSerial != null && product.isIswarehouseforproduct() && product.isIslocationforproduct()) {
                            smd.addSerialName(newBatchSerial.getSerialname());
                        }
                    } else {
                        batchQty = 0;
                    }

                }
                if (product.isIswarehouseforproduct() && product.isIslocationforproduct()) {
                    for (Map.Entry<Store, StockMovement> entry : storeWiseStockMovement.entrySet()) {
                        stockMovementsList.add(entry.getValue());
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.INFO, ex.getMessage());
        }
    }
     
     
       /*-------Function to send approval mail if check "Allow Sending Approval Mail" is activated from system preferences---------*/
    @Override
    public void sendApprovalMailForGRIfAllowedFromSystemPreferences(HashMap emailMap) throws ServiceException {

        String userName = "";
        Company company = null;
        GoodsReceiptOrder goodsReceiptObj = null;
        String baseUrl = "";       
        int level=0;
        CompanyAccountPreferences preferences=null;
        HashMap<String, Object> ApproveMap =new HashMap();
        if (emailMap.containsKey("userName") && emailMap.get("userName") != null) {
            userName = (String)emailMap.get("userName");
        }
        if (emailMap.containsKey("company") && emailMap.get("company") != null) {
             company = (Company)emailMap.get("company");
        }

        if (emailMap.containsKey("goodsReceipt") && emailMap.get("goodsReceipt") != null) {
            goodsReceiptObj = (GoodsReceiptOrder)emailMap.get("goodsReceipt");
        }

        if (emailMap.containsKey("baseUrl") && emailMap.get("baseUrl") != null) {
            baseUrl = (String)emailMap.get("baseUrl");
        }

          if (emailMap.containsKey("ApproveMap") && emailMap.get("ApproveMap") != null) {
                ApproveMap = (HashMap<String, Object>) emailMap.get("ApproveMap");
        }    
          if (emailMap.containsKey("preferences") && emailMap.get("preferences") != null) {
                preferences = (CompanyAccountPreferences)  emailMap.get("preferences");
        }    
          if (emailMap.containsKey("level") && emailMap.get("level") != null) {
                level = (int)  emailMap.get("level");
        }    
                 
                 
        String sendorInfo = (!company.isEmailFromCompanyCreator()) ? Constants.ADMIN_EMAILID : authHandlerDAOObj.getSysEmailIdByCompanyID(company.getCompanyID());
        String creatormail = company.getCreator().getEmailID();
        String documentcreatoremail = (goodsReceiptObj != null && goodsReceiptObj.getCreatedby() != null) ? goodsReceiptObj.getCreatedby().getEmailID() : "";
        String fname = company.getCreator().getFirstName() == null ? "" : company.getCreator().getFirstName();
        String lname = company.getCreator().getLastName() == null ? "" : company.getCreator().getLastName();
        String creatorname = fname + " " + lname;
        String approvalpendingStatusmsg = "";
        HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
        ArrayList<String> emailArray = new ArrayList<>();
        qdDataMap.put(Constants.companyKey, company.getCompanyID());
        qdDataMap.put("level", level);
        qdDataMap.put(Constants.moduleid, Constants.Acc_Goods_Receipt_ModuleId);
//        emailArray = commonFnControllerService.getUserApprovalEmail(qdDataMap);
        emailArray.add(creatormail);
        if (!StringUtil.isNullOrEmpty(documentcreatoremail) && !creatormail.equalsIgnoreCase(documentcreatoremail)) {
                    emailArray.add(documentcreatoremail);
                }
        String[] emails = {};
        emails = emailArray.toArray(emails);
        if (!StringUtil.isNullOrEmpty(preferences.getApprovalEmails())) {
            String[] compPrefMailIds = preferences.getApprovalEmails().split(";");
            emails = AccountingManager.getMergedMailIds(emails, compPrefMailIds);
        }
        
        if (goodsReceiptObj.getApprovestatuslevel() < 11) {
            qdDataMap.put("ApproveMap", ApproveMap);
            approvalpendingStatusmsg = commonFnControllerService.getApprovalstatusmsg(qdDataMap);
        }
         Map<String, Object> mailParameters = new HashMap();
        mailParameters.put("Number", goodsReceiptObj.getGoodsReceiptOrderNumber());
        mailParameters.put("userName", userName);
        mailParameters.put("emails", emails);
        mailParameters.put("sendorInfo", Constants.ADMIN_EMAILID);
        mailParameters.put("moduleName", Constants.Goods_Receipt);
        mailParameters.put("addresseeName", "All");
        mailParameters.put("companyid", company.getCompanyID());
        mailParameters.put("baseUrl", baseUrl);
        mailParameters.put("approvalstatuslevel", level);
        mailParameters.put("approvalpendingStatusmsg", approvalpendingStatusmsg);
        if (emails.length > 0) {
            accountingHandlerDAOobj.sendApprovedEmails(mailParameters);
        }
    }
    
    
    /*---Function to save approval history , If any document is approved at some level------   */
    public List saveApprovalHistoryForGoodsReceiptOrder(HashMap approvalHistoryMap) throws ServiceException {

        List approvalHistoryList = new ArrayList();

        GoodsReceiptOrder goodsReceiptOrderObj = null;
        Company companyObj = null;
        String userid = "";

        if (approvalHistoryMap.containsKey("goodsReceipt") && approvalHistoryMap.get("goodsReceipt") != null) {
            goodsReceiptOrderObj = (GoodsReceiptOrder) approvalHistoryMap.get("goodsReceipt");
        }

        if (approvalHistoryMap.containsKey("company") && approvalHistoryMap.get("company") != null) {
            companyObj = (Company) approvalHistoryMap.get("company");
        }

        if (approvalHistoryMap.containsKey("userid") && approvalHistoryMap.get("userid") != null) {
            userid = (String) approvalHistoryMap.get("userid");
        }

        HashMap<String, Object> hashMap = new HashMap<String, Object>();
        hashMap.put("transtype", Constants.GOODS_RECEIPT_APPROVAL);
        hashMap.put("transid", goodsReceiptOrderObj.getID());
        hashMap.put("approvallevel", goodsReceiptOrderObj.getApprovestatuslevel()); //  If approvedLevel = 11 then its final Approval
        hashMap.put("remark", "");
        hashMap.put("userid", userid);
        hashMap.put("companyid", companyObj.getCompanyID());
        accountingHandlerDAOobj.updateApprovalHistory(hashMap);

        KwlReturnObject kmsg = null;
        String roleName = "Company User";
        kmsg = permissionHandlerDAOObj.getRoleofUser(userid);
        Iterator userRoleIterator = kmsg.getEntityList().iterator();
        while (userRoleIterator.hasNext()) {
            Object[] row = (Object[]) userRoleIterator.next();
            roleName = row[1].toString();
        }

        approvalHistoryList.add(roleName);

        return approvalHistoryList;

    }
    
    /**
     * Updates Inventory Side tables before and fter pending approval GRN is approved 
     * pass isbeforependingapproval flag as true during GRN inital Save as quantitydue needs to be 0 until approved
     * tables updated - newproductbatch ,newbatchserial
     * @param grorder
     * @param isbeforePendingapproval
     * @throws ServiceException
     */
     @Override
     public void updateInvTablesAfterPendingApproval(GoodsReceiptOrder grorder,boolean isbeforePendingapproval,boolean restrictDuplicateBatch) throws ServiceException, AccountingException {
        Set<GoodsReceiptOrderDetails> grodetails = grorder != null ? grorder.getRows() : null;
        HashMap<String, Object> requestparams = new HashMap<>();
        ArrayList filternames = new ArrayList<>();
        ArrayList filterparams = new ArrayList<>();
        //INVStockLevel/isBatchExists.do
        HashMap<String, Object> requestParams = new HashMap<>();
        boolean isBatchPresent = false;
        
        try {
            for (GoodsReceiptOrderDetails grod : grodetails) {
                Product product = grod.getProduct();
                filternames.clear();filterparams.clear();
                filternames.add("locBatchDocMap.documentid");
                filterparams.add(grod.getID());
                requestparams.put("filter_names", filternames);
                requestparams.put("filter_params", filterparams);
                KwlReturnObject locbatchdockwl = accMasterItemsDAOobj.getBatchesForDocuments(requestparams);
                List<LocationBatchDocumentMapping> locdocmappinglist = locbatchdockwl.getEntityList();
                
                for (LocationBatchDocumentMapping lbdm : locdocmappinglist) {
                    NewProductBatch npb = lbdm.getBatchmapid();
                    if(!isbeforePendingapproval && restrictDuplicateBatch){
                        requestParams.put("batchname", npb.getBatchname());
                        requestParams.put("company", npb.getCompany().getCompanyID());
                        requestParams.put("documentid","");
                        requestParams.put("isEdit", false);
                        requestParams.put("moduleid", lbdm.getTransactiontype());
                        requestParams.put("productid", npb.getProduct());
                        isBatchPresent=accProductObj.IsBatchUsedInOutTransaction(requestParams);
                        if(isBatchPresent){
                            //throw new Accounting("Batches are restricted");
                            throw new AccountingException("Batch name should not duplicate.");
                        }
                    }
                    if (npb != null) {
                        if (isbeforePendingapproval) {
                            if (npb.getQuantitydue() >= lbdm.getQuantity()) {
                                npb.setQuantitydue(authHandler.roundQuantity((npb.getQuantitydue() - lbdm.getQuantity()),npb.getCompany().getCompanyID()));
                            } else {
                                npb.setQuantitydue(0);
                            }
                        } else {
                            npb.setQuantitydue(authHandler.roundQuantity((npb.getQuantitydue() + lbdm.getQuantity()),npb.getCompany().getCompanyID()));
                        }
                    }
                }
                if (product.isIsSerialForProduct()) { //serial type products update the quantitydue in NewBatchSerial as well
                    filternames.clear();filterparams.clear();
                    filternames.add("nbs.documentid");
                    filterparams.add(grod.getID());
                    requestparams.put("filter_names", filternames);
                    requestparams.put("filter_params", filterparams);
                    KwlReturnObject serialkwl = accMasterItemsDAOobj.getSerialsForDocuments(requestparams);
                    List<SerialDocumentMapping> serialdocmappinglist = serialkwl.getEntityList();
                    for (SerialDocumentMapping sdm : serialdocmappinglist) {
                        NewBatchSerial nbs = sdm.getSerialid();
                        if (isbeforePendingapproval) {
                            nbs.setQuantitydue(0);
                        } else {
                        if (nbs.getQuantitydue() <= 0) {
                            nbs.setQuantitydue(1);
                        }
                    }
                }
            }
            }
        }catch(AccountingException ex){
            throw new AccountingException(ex.getMessage(), ex);
        }catch (Exception ex) {
              throw ServiceException.FAILURE("updateInvTablesAfterPendingApproval: " + ex.getMessage(), ex);
        }
    }

    @Override
    public JSONObject saveGoodsReceipt(JSONObject paramJobj) {
        JSONObject jobj = new JSONObject();
        
        boolean issuccess = false;
        boolean isAccountingExe = false;
        boolean isDuplicateNoExe = false;
        boolean isTaxDeactivated = false;
        String msg = "";
        String auditAction = "";
        String JENumBer = "";
        String purchaseInvID="";
        int approvedLevel = 11;
        double totalPOBalQty = 0;
        boolean isPOClosed = false;
        HashMap<String, Object> poMap = new HashMap<>();
        Map<String, Object> seqNumMap = new HashMap<String, Object>();
        DefaultTransactionDefinition def = new DefaultTransactionDefinition();
        def.setName("JE_Tx");
        def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
        boolean isFixedAsset = paramJobj.optBoolean("isFixedAsset", false);
        boolean isConsignment = paramJobj.optBoolean("isConsignment", false);
        boolean isAutoCreateGR = false;
        // Excise Opening Balance check from Vendor Master Form ERP-27108
        boolean isExicseOpeningbalance = paramJobj.optBoolean("isExicseOpeningbalance");
        boolean inCash = paramJobj.optBoolean(INCASH);
        boolean isEditedPendingDocument = paramJobj.optBoolean("isEditedPendingDocument");
        boolean isDraft = paramJobj.optBoolean(Constants.isDraft, false);
        boolean isSaveDraftRecord = paramJobj.optBoolean("isSaveDraftRecord", false); //SDP-13487
        boolean isAutoSeqForEmptyDraft = paramJobj.optBoolean("isAutoSeqForEmptyDraft", false);  //SDP-13927 : If Draft already having sequence no. then do not update it
        String sequenceformat = paramJobj.optString("sequenceformat");
        String grid = paramJobj.optString(INVOICEID);
        String doid = paramJobj.optString("doid");
        String entryNumber = paramJobj.optString(NUMBER);
        String GRNumber = paramJobj.optString("numberDo", paramJobj.optString(NUMBER));
        int DOSeqNum = paramJobj.optInt("DOSeqNum");
        String sequenceformatgr = paramJobj.optString("sequenceformatDo", paramJobj.optString("sequenceformat"));
        int level=0;
        String expInvId=paramJobj.optString("landedInvoiceNumber");
        boolean isFromOtherSource = paramJobj.optBoolean("isFromOtherSource", false);
       // boolean isLeaseFixedAsset = (!StringUtil.isNullOrEmpty(request.getParameter("isLeaseFixedAsset"))) ? Boolean.parseBoolean(request.getParameter("isLeaseFixedAsset")) : false;           
        String channelName = "",additionalsauditmessage="";
        TransactionStatus status = null;//txnManager.getTransaction(def);
        Map<String,String> deleteparam=null;
        String companyid="";
        KwlReturnObject result = null;
        int nocount;
        int doinvflag = 0;
        String fromLinkCombo = paramJobj.optString("fromLinkCombo");
        try {
            isAutoCreateGR = paramJobj.optBoolean("isAutoCreateDO");
            companyid = paramJobj.optString(COMPANYID);
            
            deleteparam=new HashMap<String, String>();
            deleteparam.put("invoiceno", entryNumber);
            deleteparam.put("grno", GRNumber);
            deleteparam.put("companyid", companyid);
            if(isAutoCreateGR){
                deleteparam.put("isautocreategr", paramJobj.optString("isAutoCreateDO"));
            }
            /**
             * createAsTransactionChkboxwithTemplate- used to create template along with transaction.
             */
            boolean createAsTransactionChkboxwithTemplate = (paramJobj.optString("createAsTransactionChkbox")!=null && paramJobj.optString("createAsTransactionChkbox").equalsIgnoreCase("on")) ? true : false;
            if (!StringUtil.isNullOrEmpty(grid) ) {//In edit case checks duplicate number
                if (!isAutoCreateGR) { // If Auto create GR enabled, then we don't allow to edit the invoice. This case handled in next code block. 
                    result = accGoodsReceiptobj.getDuplicateGRNumberForEdit(entryNumber, companyid, grid);
                    nocount = result.getRecordTotalCount();
                    if (nocount > 0 && sequenceformat.equals("NA")) {
                        doinvflag=0;
                        if (inCash) {//For cash purchase
                            isDuplicateNoExe = true;
                            throw new AccountingException(messageSource.getMessage("acc.CP.purchasereceipteno", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                        } else {
                            isDuplicateNoExe = true;
                            throw new AccountingException(messageSource.getMessage("acc.INV.purchaseinvno", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                        }
                        
                    }
                }
                /*
                    Checks duplicate number in Edit case and if auto create DO is enabled 
                */
                if (isAutoCreateGR && sequenceformatgr.equals("NA")) {
                    result = accGoodsReceiptobj.getDuplicaeGoodsReceiptOrderNumber(GRNumber, companyid,doid);
                    if (result.getRecordTotalCount() > 0) {
                        doinvflag=1;
                        isDuplicateNoExe = true;
                        throw new AccountingException(messageSource.getMessage("acc.field.GoodsReceiptnumber", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + GRNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    }
                }
            } else {//In add case check duplicate number
                if (!StringUtil.isNullObject(entryNumber) && entryNumber!="") {
                    result = accGoodsReceiptobj.getReceiptFromNo(entryNumber, companyid);
                }
                if ( result!=null && result.getRecordTotalCount() > 0 && sequenceformat.equals("NA")) {
                    doinvflag=0;
                    if (inCash) {
                        isDuplicateNoExe = true;
                        throw new AccountingException(messageSource.getMessage("acc.CP.purchasereceipteno", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    } else {
                        isDuplicateNoExe = true;
                        throw new AccountingException(messageSource.getMessage("acc.INV.purchaseinvno", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    }
                }

                if (isAutoCreateGR && sequenceformatgr.equals("NA")) {
                    result = accGoodsReceiptobj.getGoodsReceiptOrderCount(GRNumber, companyid);
                    if (result.getRecordTotalCount() > 0) {
                        doinvflag=1;
                        isDuplicateNoExe = true;
                        throw new AccountingException(messageSource.getMessage("acc.field.GoodsReceiptnumber", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + GRNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    }
                }
                //Check Deactivate Tax in New Transaction.
                if (!fieldDataManagercntrl.isTaxActivated(paramJobj)) {
                    isTaxDeactivated = true;
                    throw ServiceException.FAILURE(messageSource.getMessage("acc.tax.deactivated.tax.saveAlert", null, Locale.forLanguageTag(paramJobj.optString(Constants.language))), "", false);
                }
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("countryid")) && paramJobj.optInt("countryid") == Constants.indian_country_id) {
                String supplierInvoiceNumber = paramJobj.optString(Constants.SUPPLIERINVOICENO);
                String vendor = paramJobj.optString("vendor");
                String purchaseInvNo = "";
                if (!StringUtil.isNullOrEmpty(supplierInvoiceNumber) && !StringUtil.isNullOrEmpty(vendor)) {
                    JSONObject reqParams=new JSONObject();
                    reqParams.put("supplierInvoiceNumber", supplierInvoiceNumber);
                    reqParams.put("vendor",vendor);
                    reqParams.put("companyid",companyid);
                    reqParams.put("grid", grid);
                    result = accGoodsReceiptobj.getReceiptFromSIN(reqParams);
                    if (result != null && result.getRecordTotalCount() > 0) {
                        List<String> li = result.getEntityList();
                        if (!li.isEmpty()) {
                            for (String obj : li) {
                                purchaseInvNo = !StringUtil.isNullOrEmpty(obj)?obj:"";
                            }
                            if (inCash) {
                                throw new AccountingException(messageSource.getMessage("acc.gst.SINErrorPI", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) +"<b>"+ purchaseInvNo +"<b>");
                            } else {
                                throw new AccountingException(messageSource.getMessage("acc.gst.SINErrorPI", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) +"<b>"+ purchaseInvNo +"<b>");
                            }
                        }
                    }
                }
            }
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("countryid")) && paramJobj.optInt("countryid") == Constants.indian_country_id) {
                    int from = StaticValues.AUTONUM_GOODSRECEIPT;
                    if (inCash) {
                        from = StaticValues.AUTONUM_CASHPURCHASE;
                    }
                    boolean seqformat_oldflag = paramJobj.optBoolean("seqformat_oldflag");
                    Date billDate = authHandler.getDateOnlyFormat().parse(paramJobj.optString(Constants.BillDate));
                    if ((!StringUtil.isNullOrEmpty(sequenceformat) && !sequenceformat.equals("NA"))) {
                        seqNumMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, from, sequenceformat, seqformat_oldflag, billDate);
                        String autoNumber = (String) seqNumMap.get(Constants.AUTO_ENTRYNUMBER);
                       if (autoNumber.length() > Constants.SequenceFormatMaxLength || !StringUtil.isSequenceFormatValid(autoNumber)) {
                            throw new AccountingException(Constants.SequenceformatErrorMsg1 + autoNumber + Constants.SequenceformatErrorMsg2 + Constants.SequenceFormatMaxLength + Constants.SequenceformatErrorMsg3);
                        }
                    } else if (!StringUtil.isNullOrEmpty(sequenceformat) && sequenceformat.equals("NA") || !StringUtil.isSequenceFormatValid(entryNumber)) {
                        if ((!StringUtil.isNullOrEmpty(sequenceformat) && entryNumber.length() > Constants.SequenceFormatMaxLength) || !StringUtil.isSequenceFormatValid(entryNumber)) {
                            throw new AccountingException(Constants.SequenceformatErrorMsg1 + entryNumber + Constants.SequenceformatErrorMsg2 + Constants.SequenceFormatMaxLength + Constants.SequenceformatErrorMsg3);
                        }
                    }
                }
            
            synchronized (this) {//Checks duplicate number for simultaneous transactions
                
                status = txnManager.getTransaction(def);
                KwlReturnObject resultInv = accCommonTablesDAO.getTransactionInTemp(entryNumber, companyid, Constants.Acc_Vendor_Invoice_ModuleId);
                if (resultInv.getRecordTotalCount() > 0 && sequenceformat.equals("NA")) {
                    doinvflag=0;
                    if (inCash) {
                        isDuplicateNoExe = true;
                        throw new AccountingException(messageSource.getMessage("acc.CP.selectedpurchasereceipteno", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyinprocess.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    } else {
                        isDuplicateNoExe = true;
                        throw new AccountingException(messageSource.getMessage("acc.INV.selectedpurchaseinvno", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyinprocess.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    }
                } else {
                    accCommonTablesDAO.insertTransactionInTemp(entryNumber, companyid, Constants.Acc_Vendor_Invoice_ModuleId);
                }
                
                if (isAutoCreateGR && sequenceformatgr.equals("NA")) {
                    resultInv = accCommonTablesDAO.getTransactionInTemp(GRNumber, companyid, Constants.Acc_Goods_Receipt_ModuleId);
                    if (resultInv.getRecordTotalCount() > 0) {
                        doinvflag=1;
                        isDuplicateNoExe = true;
                        throw new AccountingException(messageSource.getMessage("acc.GR.selectedgoodsrecno", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + GRNumber + messageSource.getMessage("acc.field.alreadyinprocess.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    } else {
                        accCommonTablesDAO.insertTransactionInTemp(GRNumber, companyid, Constants.Acc_Goods_Receipt_ModuleId);
                    }
                }
                txnManager.commit(status);
            }
            def.setIsolationLevel(TransactionDefinition.ISOLATION_READ_UNCOMMITTED); 
            status = txnManager.getTransaction(def);
            Map<String, String> map1 = new HashMap<String, String>();
             /**
             * creating template for purchase invoice.
             * istemplate=2 //creating only template
             * istemplate=0 //creating only transaction
             */
            if (createAsTransactionChkboxwithTemplate) {
                map1.put("istemplate", "2");
                saveGoodsReceipt(paramJobj, map1);
                map1.remove("istemplate");
            }
           /**
             * creating purchase invoice transaction.
             */
            List li = saveGoodsReceipt(paramJobj,map1);
             //HashMap<String, Object> grvApproveMap = new HashMap<String, Object>();
            // grvApproveMap=(HashMap)li.get(9);
            // GoodsReceipt gr = (GoodsReceipt) li.get(8);
            if (li.get(5) != null) {
                JENumBer = li.get(5).toString();
            }

            if (li.get(7) != null) {//fields updated
                additionalsauditmessage = li.get(7).toString();
            }
            List mailParams=(List)li.get(9);
            String linkedDocuments = (String) li.get(10);
            String unlinkMessage = (String) li.get(11);
            
            String billno = (String) li.get(3);
            String pendingstatus = (String) li.get(2);
            boolean pendingApprovalFlag = false;
            String[] id = (String[]) li.get(0);
            String autoCreateDOMsg = "";
            String groid="",grono="";
            KwlReturnObject extraPref = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extrareferences = (ExtraCompanyPreferences) extraPref.getEntityList().get(0);
            KwlReturnObject capref = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) capref.getEntityList().get(0);
            Date groDate = null;
            List newlist = null;
            if (isAutoCreateGR) {
                String productids="";
                 /*Get request parameters */
                newlist = saveGoodsReceiptOrder(paramJobj, id[0], map1); // To Auto create GR
                GoodsReceiptOrder GoodsReceipt = (GoodsReceiptOrder) newlist.get(0);
                groid=GoodsReceipt.getID();
                grono=GoodsReceipt.getGoodsReceiptOrderNumber();
                jobj.put("groid", groid);  //ERP-17244
                jobj.put("grono", grono);  //ERP-17244
                groDate = GoodsReceipt.getOrderDate();
                Set<GoodsReceiptOrderDetails> doRows = GoodsReceipt.getRows();
                if (StringUtil.equal("Pending Approval", pendingstatus)) {
                    accGoodsReceiptobj.approvePendingGRO(GoodsReceipt.getID(), companyid, 1);
                    approvedLevel = 1;
                    stockMovementService.removeStockMovementByReferenceId(GoodsReceipt.getCompany(), GoodsReceipt.getID());
                    Iterator groDetailsItr = doRows.iterator();
                    while (groDetailsItr.hasNext()) {
                        GoodsReceiptOrderDetails groDetail = (GoodsReceiptOrderDetails) groDetailsItr.next();
                        Inventory inventory = groDetail.getInventory();
                        if (inventory.isInvrecord()) {
                            inventory.setActquantity(inventory.getBaseuomquantity());
                            inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity()-inventory.getBaseuomquantity());
                            inventory.setBaseuomquantity(0.0);
                        }
                    }
                    if (GoodsReceipt.getInventoryJE() != null && extrareferences != null && (extrareferences.isActivateMRPModule() || preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD)) {
                        GoodsReceipt.getInventoryJE().setPendingapproval(approvedLevel);
                    }
                }
//                approvedLevel = approveGRO(GoodsReceipt, sessionHandlerImpl.getCompanyid(request), GoodsReceipt.getApprovestatuslevel(), String.valueOf(0.0)); // To assign Approval status of Auto create GR
                autoCreateDOMsg = messageSource.getMessage("acc.field.VendorInvoice/CashPurchasewithGoodsReceiptOrder", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "<b> (" + GoodsReceipt.getGoodsReceiptOrderNumber() + ") </b>" + messageSource.getMessage("acc.field.hasbeensavedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + billno + "</b>, " + messageSource.getMessage("acc.field.JENo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + JENumBer + "</b>";
                productids = paramJobj.optString("productIds");
                jobj.put("productIds", productids);
            }

            ArrayList discountArr = (ArrayList) li.get(1);
            //jobj.put("billno", billno);
            jobj.put("amount", li.get(4));
            jobj.put("isExpenseInv", li.get(6));  // To export the good receipt of Expense Type.
            
            if(!StringUtil.isNullOrEmpty(expInvId) && ((Boolean) li.get(6))){
               String productids="";
                KwlReturnObject grList = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), expInvId);
                GoodsReceipt goodsReceiptObj = (GoodsReceipt) grList.getEntityList().get(0);
                if(!StringUtil.isNullObject(goodsReceiptObj)){
                    for(GoodsReceiptDetail gd:goodsReceiptObj.getRows()){
                        productids=gd.getInventory().getProduct().getID()+",";
                    }
                }
                if(!StringUtil.isNullOrEmpty(productids)){
                    productids=productids.substring(0, productids.length()-1);
                     jobj.put("productIds", productids);
                }
           }

            jobj.put(INVOICEID, id[0]);
            if (StringUtil.equal("Pending Approval", pendingstatus)) {
                if (approvedLevel != 11 && isAutoCreateGR) {
                    pendingstatus = messageSource.getMessage("acc.field.butBothPendingForApproval", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))); // " but both pending for Approval.";
                } else {
                    pendingstatus = messageSource.getMessage("acc.field.butVendorInvoicePendingForApproval", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))); // " but Vendor Invoice pending for Approval.";
                }
                pendingApprovalFlag = true;
            } else {
                if (approvedLevel != 11 && isAutoCreateGR) {
                    pendingstatus = messageSource.getMessage("acc.field.butGoodsReceiptPendingForApproval", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))); // " but Goods Receipt pending for Approval.";
                } else {
                    pendingstatus = " ";
                }
            }
            
            /* 
             If we Edit pending document &
             "Send Pending Document to Next Level" is activated
             then pending message should not be appended in main message
             So it should be blank
             */
            boolean sendPendingDocumentsToNextLevel = false;
            if (isEditedPendingDocument) {
                sendPendingDocumentsToNextLevel = li.get(15) != null ? (Boolean) li.get(15) : false;
                if (sendPendingDocumentsToNextLevel) {
                    pendingstatus = "";
                }
            }
            
            purchaseInvID=id[0];
            //Get mapping details id of invoice documents
            String savedFilesMappingId = paramJobj.optString("savedFilesMappingId");
            if(!StringUtil.isNullOrEmpty(savedFilesMappingId)){
                /**
                * Save temporary saved attachment files mapping in permanent table
                */
                JSONObject jsonObj = new JSONObject();
                jsonObj.put("savedFilesMappingId", savedFilesMappingId);
                jsonObj.put("docId", purchaseInvID);
                jsonObj.put("companyid", companyid);
                accSalesOrderServiceobj.saveDocuments(jsonObj);
            }

            
            txnManager.commit(status);
            //Save Line Level terms of Opening Excise Purchase invoice. 
            if (isExicseOpeningbalance && extrareferences.getLineLevelTermFlag() == IndiaComplianceConstants.LINELEVEL_FLAG_ON) { // In Expense terms not presnt only use account            
                saveOpeningBalanceOfExciseGRLineleveTerm(li);
            }
            
            Map<String, Object> filterParams = new HashMap<String, Object>();
            String companyId = paramJobj.optString(COMPANYID);
            filterParams.put("id", companyId);
            KwlReturnObject extraresult = accCompanyPreferencesObj.getExtraCompanyPreferences(filterParams);
            ExtraCompanyPreferences extra = null;
            if (extraresult.getEntityList().size() > 0) {
                extra = (ExtraCompanyPreferences) extraresult.getEntityList().get(0);
                if (extra.isActivateMRPModule()) {
                    savemachineAsset(map1, companyid);
                }
            }
            
            Map<String, Object> auditRequestParams = new HashMap<String, Object>();
            auditRequestParams.put(Constants.reqHeader, paramJobj.getString(Constants.reqHeader));
            auditRequestParams.put(Constants.remoteIPAddress, paramJobj.getString(Constants.remoteIPAddress));
            auditRequestParams.put(Constants.useridKey, paramJobj.getString(Constants.useridKey));
            
            status=null;
            TransactionStatus AutoNoStatus = null;
            int istemplate = paramJobj.optInt("istemplate");
            String invoiceNumBer = paramJobj.optString(NUMBER);
            try {
                synchronized (this) {
                    DefaultTransactionDefinition def1 = new DefaultTransactionDefinition();
                    def1.setName("AutoNum_Tx");
                    def1.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);
                    AutoNoStatus = txnManager.getTransaction(def1);
                    GoodsReceipt gr = (GoodsReceipt) li.get(8);
                    if (!sequenceformat.equals("NA") && StringUtil.isNullOrEmpty(grid) && !StringUtil.isNullOrEmpty(sequenceformat) && !isFromOtherSource) {
                        
                        String nextAutoNo = "";
                        int nextAutoNoInt = 0;
                                
                        int from = StaticValues.AUTONUM_GOODSRECEIPT;
                        if (inCash) {
                            from = StaticValues.AUTONUM_CASHPURCHASE;
                        }
                        boolean seqformat_oldflag = paramJobj.optBoolean("seqformat_oldflag");
                        Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                        if (seqformat_oldflag) {
                            nextAutoNo = accCompanyPreferencesObj.getNextAutoNumber(companyid, from, sequenceformat);
                            seqNumberMap.put(Constants.AUTO_ENTRYNUMBER, nextAutoNo);
                        } else {                            
                            Date creationDate=null;
                            if(!isExicseOpeningbalance){
//                                creationDate=gr.getJournalEntry().getEntryDate();
                            }else{
                            }                            
                            creationDate=gr.getCreationDate();
                            seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, from, sequenceformat, seqformat_oldflag, creationDate);
                        }
                        seqNumberMap.put(Constants.DOCUMENTID, id[0]);
                        seqNumberMap.put(Constants.companyKey, companyid);
                        seqNumberMap.put(Constants.SEQUENCEFORMATID, sequenceformat);
                        billno = accGoodsReceiptobj.updatePIEntryNumberForNewPI(seqNumberMap);
                        invoiceNumBer=billno;
                    } else if (isSaveDraftRecord && !sequenceformat.equals("NA") && isAutoSeqForEmptyDraft) {  //ERP-41992 (Reference - SDP-13487) : Do not update Draft No. in case of Sequence Format as "NA",  //SDP-13927 : If Draft already having sequence no. then do not update it
                        /*
                         Below piece of code has written to handle Auto-Sequence no.in edit mode.
                         When user open the draft in edit mode, he can save it as a draft or a transaction. If it save as draft again then this code will not be execute.
                         But, if he saves it as a transaction then this code will be execute to get the Auto-Sequence No and set it to transaction no.
                         */
                        Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                        seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_GOODSRECEIPT, sequenceformat, false, gr.getCreationDate());
                        seqNumberMap.put(Constants.DOCUMENTID, id[0]);
                        seqNumberMap.put(Constants.companyKey, companyid);
                        seqNumberMap.put(Constants.SEQUENCEFORMATID, sequenceformat);
                        seqNumberMap.put(Constants.isDraft, isDraft);
                        billno = accGoodsReceiptobj.updatePIEntryNumberForNewPI(seqNumberMap);
                        invoiceNumBer = billno;
                    } else if (isDraft && !sequenceformat.equals("NA") && isAutoSeqForEmptyDraft) {
                        /* ERP-41992 (Reference - SDP-13923)
                         This piece of code has been written to fix below case.
                         1)Draft has been made with NA. 2)Draft has opened in edit mode and saved as a draft again with Auto-Sequence Format.
                         3)Again draft opened in edit mode then sequence format should be Auto-Sequence Format.
                         */
                        Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                        seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_GOODSRECEIPT, sequenceformat, false, gr.getCreationDate());
                        seqNumberMap.put(Constants.DOCUMENTID, id[0]);
                        seqNumberMap.put(Constants.companyKey, companyid);
                        seqNumberMap.put(Constants.SEQUENCEFORMATID, sequenceformat);
                        seqNumberMap.put(Constants.isDraft, isDraft);
                        billno = accGoodsReceiptobj.updatePIEntryNumberForNewPI(seqNumberMap);
                        invoiceNumBer = billno;
                    }

                    if (isAutoCreateGR) {
                        if (!sequenceformatgr.equals("NA") && StringUtil.isNullOrEmpty(grono) && !isFromOtherSource) {
                            String nextAutoNumber = "";
                            boolean seqformat_oldflag = false;
                            Map<String, Object> seqNumberMap = new HashMap<String, Object>();
                            if (seqformat_oldflag) {
                                nextAutoNumber = accCompanyPreferencesObj.getNextAutoNumber(companyid, StaticValues.AUTONUM_GOODSRECEIPTORDER, sequenceformatgr);
                                seqNumberMap.put(Constants.AUTO_ENTRYNUMBER, nextAutoNumber);
                            } else {
                                seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_GOODSRECEIPTORDER, sequenceformatgr, seqformat_oldflag, groDate);
                                if (DOSeqNum != 0) {
                                    seqNumberMap.put(Constants.SEQNUMBER, DOSeqNum);
                                }
                            }
                            seqNumberMap.put(Constants.DOCUMENTID, groid);
                            seqNumberMap.put(Constants.companyKey, companyid);
                            seqNumberMap.put(Constants.SEQUENCEFORMATID, sequenceformatgr);
                            grono = accGoodsReceiptobj.updateGREntryNumberForNewGR(seqNumberMap);
                            boolean sendForQAApproval = paramJobj.optBoolean("sendForQAApproval");
                            if (sendForQAApproval) {
                                String memo = "IST created for QC against GRN:" + grono;
                                accGoodsReceiptobj.updateMemoForIST(memo, groid, companyid);
                            }
              
                            /*
                            * Memo of  Stock Adjust ment are set in case of Job Work Out GRN
                            * 
                            */
                             KwlReturnObject invResult = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), groid);
                             GoodsReceiptOrder groder  = (GoodsReceiptOrder) invResult.getEntityList().get(0);
                             if (groder.isIsJobWorkOutOrder()) {
                                    String stockAdjustmentMemo = "Stock OUT for GRN:" + grono;
                                accGoodsReceiptobj.updateMemoForJWOSA(stockAdjustmentMemo, groid, companyid);
                                }
                        }
                        String action = " added new ";
                        if (!StringUtil.isNullOrEmpty(grid)) {
                            action = " updated ";
                        }
                        String auditMSG = " "+messageSource.getMessage("acc.common.has", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + action + messageSource.getMessage("acc.common.autogr", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + grono +" "+messageSource.getMessage("acc.common.withPI", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)))+invoiceNumBer;
                        auditTrailObj.insertAuditLog(AuditAction.GOODS_RECEIPT_CREATED, "User " + paramJobj.optString(Constants.userfullname) + auditMSG, auditRequestParams, groid);
                    }
                    
                    
                    if (mailParams != null && !mailParams.isEmpty()) {
                        String createdby = paramJobj.optString(Constants.useridKey);
                        Iterator itr = mailParams.iterator();
                        /**
                         * parameters required for sending mail
                         */
                        Map<String, Object> mailParameters = new HashMap();
                        mailParameters.put(Constants.companyid, companyid);
                        mailParameters.put(Constants.prNumber, billno);
                        mailParameters.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                        mailParameters.put(Constants.isCash, false);
                        mailParameters.put(Constants.createdBy, createdby);
                        mailParameters.put(Constants.PAGE_URL, paramJobj.optString(Constants.PAGE_URL));

                        while (itr.hasNext()) {
                            HashMap<String, Object> paramsMap = (HashMap<String, Object>) itr.next();
                            
                            mailParameters.put(Constants.ruleid, (String) paramsMap.get("ruleid"));
                            mailParameters.put(Constants.fromName, (String) paramsMap.get("fromName"));
                            mailParameters.put(Constants.hasApprover, (Boolean) paramsMap.get("hasApprover"));
                            sendMailToApprover(mailParameters);

                        }


                    }
                txnManager.commit(AutoNoStatus);
                }
            }catch(AccountingException ex){
                msg = ex.getMessage();
                if (AutoNoStatus != null) {
                    txnManager.rollback(AutoNoStatus);
                }
                deleteEntryInTemp(deleteparam);
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
                throw ex;
            }catch (Exception ex) {
                if (AutoNoStatus != null) {
                    txnManager.rollback(AutoNoStatus);
                }
                deleteEntryInTemp(deleteparam);
                Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
            }
            // Excise Opening Balance check from Vendor Master ERP-27108
            if(StringUtil.isNullOrEmpty(id[1]) && istemplate != 2 && !pendingApprovalFlag && !isExicseOpeningbalance) { // only when new invoice is created
                try {
                        status = txnManager.getTransaction(def);
                        HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                        JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                        JEFormatParams.put("modulename", "autojournalentry");
                        JEFormatParams.put("companyid", companyid);
                        JEFormatParams.put("isdefaultFormat", true);

                        KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                        SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                        GoodsReceipt gr = (GoodsReceipt) li.get(8);
                        Map<String, Object> jeDataMap = AccountingManager.getGlobalParamsJson(paramJobj);
//                        JENumBer = journalEntryModuleServiceobj.updateJEEntryNumberForNewJE(jeDataMap, gr.getJournalEntry(), companyid, format.getID(),gr.getJournalEntry().getPendingapproval());
                        KwlReturnObject returnObj = journalEntryModuleServiceobj.updateJEEntryNumberForNewJE(jeDataMap, gr.getJournalEntry(), companyid, format.getID(),gr.getJournalEntry().getPendingapproval());
                        if (returnObj.isSuccessFlag() && returnObj.getRecordTotalCount() > 0) {
                            JENumBer = (String) returnObj.getEntityList().get(0);
                        }
                        txnManager.commit(status);
                    } catch ( Exception ex) {
                        txnManager.rollback(status);
                        Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
            }
                
            String smsAudit = "";
            boolean isJeNoEmpty = false;
            if (StringUtil.isNullOrEmpty(JENumBer)) {
                isJeNoEmpty = true;
            }
             /*Mapping of Excise Unit Fields with the Template mapping*/

            if (!StringUtil.isNullOrEmpty(paramJobj.optString("countryid")) && paramJobj.optInt("countryid") == Constants.indian_country_id) {
                //status=null;
                //status = txnManager.getTransaction(def);     
                TransactionStatus statusTmp=null;
                try {
                    String invid=id[0];
                    HashMap<String, Object> requestParams = new HashMap<String, Object>();
                    HashMap<String, Object> ModuleTempParams = new HashMap<String, Object>();
                    ModuleTempParams.put("modulerecordid", invid);
                    ModuleTempParams.put("companyid", companyid);
                    KwlReturnObject capInv = accountingHandlerDAOobj.getModuleTemplates(ModuleTempParams);
                    if (capInv != null && capInv.getEntityList().size()>0) {
                        DefaultTransactionDefinition tmpdef = new DefaultTransactionDefinition();
                        tmpdef.setName("EUT_Tx");
                        tmpdef.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
                        statusTmp = txnManager.getTransaction(tmpdef);
                        ModuleTemplate moduleTemp = (ModuleTemplate) capInv.getEntityList().get(0);
//                    requestParams.put("manufacturertype", (!StringUtil.isNullOrEmpty(request.getParameter("manufacturerType"))) ? request.getParameter("manufacturerType") : "");
                        requestParams.put("registrationtype", paramJobj.optString("registrationType"));
                        requestParams.put("unitname", paramJobj.optString("UnitName"));
                        requestParams.put("eccnumber", paramJobj.optString("ECCNo"));
                        requestParams.put("type", moduleTemp.getModuleId());
                        requestParams.put("templateid", moduleTemp);
                        KwlReturnObject cap = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
                        Company company = (Company) cap.getEntityList().get(0);
                        requestParams.put("companyid", company);
                        KwlReturnObject ExciseTempMap = accGoodsReceiptobj.saveExciseTemplateMapping(requestParams);
                        txnManager.commit(statusTmp);
                        statusTmp = null;
                    }
                }catch(Exception ex){
                    if (statusTmp != null) {
                        txnManager.rollback(statusTmp);
                    }
                    statusTmp = null;
                }
            }
           /* Preparing Audit trial message if document is linking at teh time of creating */
            String linkingMessages = "";
            if (!StringUtil.isNullOrEmpty(linkedDocuments) && !StringUtil.isNullOrEmpty(fromLinkCombo)) {
                linkingMessages = " by Linking to " + fromLinkCombo + " " + linkedDocuments;
                if(isFixedAsset){
                 linkingMessages = " by Linking to " + " Asset "+ fromLinkCombo + " " + linkedDocuments;
                }
            }
            String JEmsg="";
            if (!isJeNoEmpty) {
                if (!pendingApprovalFlag) {
                    JEmsg = " with " + messageSource.getMessage("acc.field.JENo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ":" + JENumBer;
                } else if (paramJobj.optBoolean("isEdit") && !paramJobj.optBoolean("copyInv")) {
                    /*
                     When document is edited and it goes to pending approval in that case JE msg need to be appended
                     */
                    JEmsg = " with " + messageSource.getMessage("acc.field.JENo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ":" + JENumBer;
                }
            }
            if (istemplate == 1) {
                if (inCash) {
                    msg = messageSource.getMessage("acc.field.PurchaseReceiptandTemplatehasbeensavedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + (pendingApprovalFlag ? messageSource.getMessage("acc.field.butPurchaseReceiptispendingforApproval", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) : ".");
                    auditAction = AuditAction.CASH_PURCHASE_CREATED;
                    smsAudit = " has added a new template for record Cash Purchase " + invoiceNumBer + (pendingApprovalFlag ? " "+messageSource.getMessage("acc.field.butPurchaseReceiptispendingforApproval", null, null) : ".");
                } else {
                    msg = messageSource.getMessage("acc.field.VendorInvoiceandTemplatehasbeensavedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + (pendingApprovalFlag ? messageSource.getMessage("acc.field.butVendorInvoiceispendingforApproval", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) : ".");
                    auditAction = AuditAction.INVOICE_CREATED;
                    smsAudit = " has added a new template for record Invoice " + invoiceNumBer +(pendingApprovalFlag ? " "+messageSource.getMessage("acc.field.butVendorInvoiceispendingforApproval", null, null) : ".");
                }
            } else if (istemplate == 2) {
                if (inCash) {
                    msg = messageSource.getMessage("acc.field.PurchaseReceiptTemplatehasbeensavedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                    auditAction = AuditAction.CASH_PURCHASE_CREATED;
                    smsAudit = " has added a new template for record Cash Purchase " + invoiceNumBer;
                } else {
                    msg = messageSource.getMessage("acc.field.VendorInvoiceTemplatehasbeensavedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                    auditAction = AuditAction.INVOICE_CREATED;
                    smsAudit = " has added a new template for record Vendor Invoice " + invoiceNumBer;
                }
            } else if(isDraft){   
                if(StringUtil.isNullOrEmpty(billno)){
                    msg = messageSource.getMessage("acc.field.PurchaseInvoiceDraft", null, Locale.forLanguageTag(paramJobj.getString("language"))) +" "+messageSource.getMessage("acc.draft.success.msg.hasbeensavedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString("language")));                    
                } else {
                    msg = messageSource.getMessage("acc.field.PurchaseInvoiceDraft", null, Locale.forLanguageTag(paramJobj.getString("language"))) +" <b>"+billno+"</b> "+messageSource.getMessage("acc.draft.success.msg.hasbeensavedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString("language")));                    
                }
            } else {
                boolean isEdit = paramJobj.optBoolean("isEdit");
                boolean isCopy = paramJobj.optBoolean("copyInv");
                String action = "added new";
                if (isEdit == true && isCopy == false) {
                    action = "updated";
                }
                if (inCash) {
                    msg = messageSource.getMessage("acc.rem.120", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + pendingstatus + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + billno + "</b>" + (isJeNoEmpty?".":", "+messageSource.getMessage("acc.field.JENo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + JENumBer + "</b>");
                    smsAudit = " has " + action + " Cash Purchase " + invoiceNumBer+ JEmsg+linkingMessages+(pendingApprovalFlag ? " "+messageSource.getMessage("acc.field.whichispendingforApproval", null, null) : "")+additionalsauditmessage;
                    auditAction = (action.equalsIgnoreCase("Updated") ? AuditAction.CASH_PURCHASE_UPDATED : AuditAction.CASH_PURCHASE_CREATED);
                    if (!StringUtil.isNullOrEmpty(paramJobj.optString("createAsTransactionChkbox", "")) && paramJobj.optString("createAsTransactionChkbox").equalsIgnoreCase("on") && !StringUtil.isNullOrEmpty(paramJobj.optString("templatename", ""))) {
                        msg += "<br>Template Name: <b>"+ paramJobj.optString("templatename", "") +"</b>";
                    }
                } else {
                    if (isFixedAsset) {
                        msg = messageSource.getMessage("acc.PISavedSuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + pendingstatus + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + billno + "</b>, " + (isJeNoEmpty?"":messageSource.getMessage("acc.field.JENo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + JENumBer + "</b>");
                        smsAudit = " has " + action + " Asset Acquired Invoice " + invoiceNumBer+ JEmsg+linkingMessages+(pendingApprovalFlag ? " "+messageSource.getMessage("acc.field.whichispendingforApproval", null, null) : "")+additionalsauditmessage;
                    } else if(isConsignment){
                        msg = messageSource.getMessage("acc.Consignment.purchaseinv.creditsave", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + pendingstatus + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + billno + "</b>, " + (isJeNoEmpty?"":messageSource.getMessage("acc.field.JENo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + JENumBer + "</b>");
                        smsAudit = " has " + action + " Consignment Purchase Invoice " + invoiceNumBer+ JEmsg+linkingMessages+(pendingApprovalFlag ? " "+messageSource.getMessage("acc.field.whichispendingforApproval", null, null) : "")+additionalsauditmessage;
                    }else {
                        msg = messageSource.getMessage("acc.rem.119", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " " + pendingstatus + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + billno + "</b>, " + (isJeNoEmpty?"":messageSource.getMessage("acc.field.JENo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + JENumBer + "</b>");
                        smsAudit = " has " + action + " Vendor Invoice " + invoiceNumBer+ JEmsg +linkingMessages +(pendingApprovalFlag ? " "+messageSource.getMessage("acc.field.whichispendingforApproval", null, null) : "")+additionalsauditmessage ;
                        if (!StringUtil.isNullOrEmpty(paramJobj.optString("createAsTransactionChkbox", "")) && paramJobj.optString("createAsTransactionChkbox").equalsIgnoreCase("on") && !StringUtil.isNullOrEmpty(paramJobj.optString("templatename", ""))) {
                            msg += "<br>Template Name: <b>"+ paramJobj.optString("templatename", "") +"</b>";
                        }
                    }
                   auditAction = (action.equalsIgnoreCase("Updated") ? AuditAction.INVOICE_UPDATED : AuditAction.INVOICE_CREATED); 
                }
            }
            if (isAutoCreateGR) {
                autoCreateDOMsg = messageSource.getMessage("acc.field.VendorInvoice/CashPurchasewithGoodsReceiptOrder", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "<b> (" + grono + ") </b>" + messageSource.getMessage("acc.field.hasbeensavedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "<br/>" + messageSource.getMessage("acc.field.DocumentNo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + billno + "</b>, " + (isJeNoEmpty?"":messageSource.getMessage("acc.field.JENo", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + ": <b>" + JENumBer + "</b>");
                msg = autoCreateDOMsg + " " + pendingstatus;
            }
           /*Inserting Entry in Audit trial when any document is unlinking through Edit*/
            if (!StringUtil.isNullOrEmpty(unlinkMessage)) {
                auditTrailObj.insertAuditLog(auditAction, "User " + paramJobj.optString(Constants.userfullname) + " has unlinked " + "Purchase Invoice " + billno + unlinkMessage + ".", auditRequestParams, billno);
            }
            auditTrailObj.insertAuditLog(auditAction, "User " + paramJobj.optString(Constants.userfullname) + smsAudit, auditRequestParams, id[0]);
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("createAsTransactionChkbox", "")) && paramJobj.optString("createAsTransactionChkbox").equalsIgnoreCase("on") && !StringUtil.isNullOrEmpty(paramJobj.optString("templatename", ""))) {
                auditTrailObj.insertAuditLog(AuditAction.TEMPLATE_CREATED, "User " + paramJobj.optString(Constants.userfullname) + " has added Document Template "+paramJobj.optString("templatename", "")+ " for record "+ (inCash ? "Cash Purchase" :"Purchase Invoice") , auditRequestParams, tranID);
            }
            
                                                    
            /*------Code if we edit pending document---------  */
            if (isEditedPendingDocument) {

                
                String roleName = li.get(13) != null ? (String) li.get(13) : "";
                boolean isAuthorityToApprove = li.get(14) != null ? (Boolean) li.get(14) : false;
                String journalEntryNumber = li.get(16) != null ? (String) li.get(16) : "";
                String journalEntryMsg = li.get(17) != null ? (String) li.get(17) : "";
                int levelOnWhichDocumentIsApproved = li.get(18) != null ? (Integer) li.get(18) : 0;
                GoodsReceipt goodsReceipt = (GoodsReceipt) li.get(8);

                String approvalMessage = "<ol style='list-style: inside none inside; padding: 5px;'>";
                String notAuthorisedMsg = "<ol style='list-style: inside none inside; padding: 5px;'>";
                String userMsg = "";
                String combineUseMsg = "";
                String notAuthorisedUserMsg = "";

                /*-------If check "Send pending documents to next level" is activated from system preferences---------  */
                if (sendPendingDocumentsToNextLevel) {

                    if (roleName != "" && isAuthorityToApprove) {

                        // Audit log entry
                        String action = "Cash Purchase ";
                        String auditaction = AuditAction.CASH_SALES_APPROVED;
                        if (!inCash) {
                            action = "Purchase Invoice ";
                            auditaction = AuditAction.CUSTOMERINVOICEAPPROVED;
                        }
                      
                        userMsg = roleName + " " + paramJobj.optString(Constants.userfullname) + " " + messageSource.getMessage("acc.field.transactionhasbeenapprovedsuccessfully", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                        approvalMessage += "<li>" + messageSource.getMessage("acc.common.purchaseinvoice", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "<b>" + " " + goodsReceipt.getGoodsReceiptNumber() + "</b> " + " at Level " + levelOnWhichDocumentIsApproved + "." + journalEntryMsg + "</li>";

                        auditTrailObj.insertAuditLog(auditaction, "User " + paramJobj.optString(Constants.userfullname) + " has Approved a " + action + goodsReceipt.getGoodsReceiptNumber() + journalEntryNumber + " at Level-" + levelOnWhichDocumentIsApproved, auditRequestParams, goodsReceipt.getID());

                    } else if (!isAuthorityToApprove) {//If User have no authority to approve the document
                        notAuthorisedUserMsg = roleName + " " + paramJobj.optString(Constants.userfullname) + " " + messageSource.getMessage("acc.field.transactionsarenotapproved", null, Locale.forLanguageTag(paramJobj.getString(Constants.language)));
                        notAuthorisedMsg += "<li>" + messageSource.getMessage("acc.common.purchaseinvoice", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + "<b>" + " " + goodsReceipt.getGoodsReceiptNumber() + "</b> " + " at Level " + levelOnWhichDocumentIsApproved + "." + journalEntryMsg + "</li>";
                    }
                } else if (!isAuthorityToApprove) {//If user have no authority to approve document
                    approvalMessage += "<br>";
                    approvalMessage += messageSource.getMessage("acc.msgbox.YouarenotauthorizedtoapprovethisrecordatLevel", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + levelOnWhichDocumentIsApproved + " and record will be available at this level for approval" + ".";
                }

                approvalMessage += "</ol>";
                notAuthorisedMsg += "</ol>";
                approvalMessage = userMsg + approvalMessage;
                notAuthorisedMsg = notAuthorisedUserMsg + notAuthorisedMsg;
                combineUseMsg = approvalMessage + notAuthorisedMsg;
                msg += "</br>";
                msg += combineUseMsg;
            }
                        
                                    
            jobj.put("pendingApproval", pendingApprovalFlag);                
            jobj.put("billno", billno);  //ERP-17244
            if (isFixedAsset) {
                channelName = "/FixedAssetAcquiredInvoiceList/gridAutoRefresh";
            } else {
                channelName = "/VendorInvoiceAndCashPurchaseReport/gridAutoRefresh";
            }
            
//            txnManager.commit(status);
            
            status = txnManager.getTransaction(def);
            deleteEditedGoodsReceiptJE(id[1], companyid);
            txnManager.commit(status);
            status = txnManager.getTransaction(def);
            deleteEditedGoodsReceiptDiscount(discountArr, companyid);
            txnManager.commit(status);
            
            /**
             * If the existing procurement number has been removed in the edit case for a landed invoice then remove old JE entry GR table.
             */
            boolean isEdit = paramJobj.optBoolean("isEdit");
            if (isEdit && extrareferences.isActivelandingcostofitem() &&  (StringUtil.isNullOrEmpty(paramJobj.optString("landingCostCategoryCombo")) || paramJobj.optString("landingCostCategoryCombo").equalsIgnoreCase("NOT APPLICABLE"))) {
                status = txnManager.getTransaction(def);
                accGoodsReceiptobj.setLandedInvoiceJEDMappingToNULL(grid, companyid);
                txnManager.commit(status);
            }
            /**
             * id[2] contains the old landed invoice JE id which is still pending for deletion.      
             */
            if (!StringUtil.isNullOrEmpty(id[2])) {
            //delete the old landed invoice JE as the new one is already saved with the same sequence number
                status = txnManager.getTransaction(def);
                deleteEditedGoodsReceiptJE(id[2], companyid);
                txnManager.commit(status);
            }
            issuccess = true;
            status = txnManager.getTransaction(def);
            deleteEntryInTemp(deleteparam);
            txnManager.commit(status);
        } catch (SessionExpiredException ex) {
            if(status!=null) {
                txnManager.rollback(status);
            }
            deleteEntryInTemp(deleteparam);
            msg = ex.getMessage();
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }catch (AccountingException ex) {
            if(status!=null) {
                txnManager.rollback(status);
            }
            deleteEntryInTemp(deleteparam);
            isAccountingExe=true;
            msg = "" + ex.getMessage();
            if (msg.equalsIgnoreCase(Constants.invalidSeqNumberMsg)) {
                isAccountingExe = false;
            }
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            if(status!=null) {
                txnManager.rollback(status);
            }
            deleteEntryInTemp(deleteparam);
            msg = "" + ex.getMessage();
            if(ex.getMessage()==null){
            msg = "" + ex.getCause().getMessage();
            }
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                jobj.put(SUCCESS, issuccess);
                jobj.put(MSG, msg);
                jobj.put("isAccountingExe", isAccountingExe);
                jobj.put("isDuplicateNoExe", isDuplicateNoExe);
                jobj.put("doinvflag", doinvflag);
                jobj.put(Constants.channelName, channelName);
                jobj.put(Constants.isTaxDeactivated, isTaxDeactivated);
            } catch (JSONException ex) {
                Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return jobj;
    }
    
   //Save Line Level terms of Opening Excise Purchase invoice. 
    public void saveOpeningBalanceOfExciseGRLineleveTerm(List li) {
        try {
            GoodsReceipt GoodsReceipt = li.size() > 8 ? (GoodsReceipt) li.get(8) : null;
            if (!GoodsReceipt.isIsExpenseType()) {
                Map<Inventory, Object> FinalTerm = li.size() > 12 ? (Map<Inventory, Object>) li.get(12) : null;
                Set<GoodsReceiptDetail> goodsReceiptDetailsSet = GoodsReceipt != null ? GoodsReceipt.getRows() : null;
                for (GoodsReceiptDetail goodsReceiptDetail : goodsReceiptDetailsSet) {
                    if (goodsReceiptDetail.getInventory() != null && FinalTerm != null && ((List) FinalTerm.get(goodsReceiptDetail.getInventory()) != null)) {
                        List ll2 = (List) FinalTerm.get(goodsReceiptDetail.getInventory());
                        Iterator itr2 = ll2.iterator();
                        while (itr2.hasNext()) {
                            HashMap<String, Object> termMap = (HashMap<String, Object>) itr2.next();
                            termMap.put("goodsReceiptDetail", goodsReceiptDetail);
                            accGoodsReceiptobj.saveInvoiceDetailTermMap(termMap);
                        }
                    }
                }
            }
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptModuleServiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    @Override
    public List saveGoodsReceipt(JSONObject paramJobj, Map<String,String> map) throws SessionExpiredException, ServiceException, AccountingException, UnsupportedEncodingException {
        String id = null;
        List ll = new ArrayList();
        String jeentryNumber = null;
        GoodsReceipt gr = null;
        ArrayList discountArr = new ArrayList();
        String oldjeid = null;
        GoodsReceiptOrder groObj = null;
        int pendingApprovalFlag = 0;
        List mailParams=null;
        String unlinkMessage="";
        String oldLandedInvoiceJEId = null;
        try {
            KwlReturnObject result = null;
            int nocount;
            boolean isAllowToEdit = paramJobj.optBoolean(Constants.IS_INVOICE_ALLOW_TO_EDIT);
            Map<String, Object> requestParams = AccountingManager.getGlobalParamsJson(paramJobj);
//            requestParams=getGoodsReceiptRequestMap(request, requestParams);
            DateFormat df = authHandler.getDateOnlyFormat();
            String companyid = paramJobj.optString(COMPANYID);
            String sequenceformat = paramJobj.optString("sequenceformat");
            int seqNumber = paramJobj.optInt(Constants.SEQNUMBER, 0);
            String grid = paramJobj.optString(INVOICEID);
            String posttext = paramJobj.optString("posttext");
            String transactionDateStr = paramJobj.optString("billdate");
            Date transactionDate = df.parse(df.format(new Date()));
            String customfield = paramJobj.optString("customfield");
            String shipLength = paramJobj.optString("shipLength");
            double gstCurrencyRate = paramJobj.optDouble("gstCurrencyRate", 0.0);
            String invoicetype = paramJobj.optString("invoicetype");
            String formtype = paramJobj.optString("formtypeid");
            boolean rcmApplicable = paramJobj.optBoolean("GTAApplicable");
            boolean gstapplicable = !StringUtil.isNullOrEmpty(paramJobj.optString("GSTApplicable"));
            String RMCDApprovalNo = paramJobj.optString("RMCDApprovalNo");
            String methodid = paramJobj.optString("pmtmethod");
            int istemplate = paramJobj.optInt("istemplate");
            /**
             * createAsTransactionChkboxwithTemplate- used to create template along with transaction.
             */
            boolean createAsTransactionChkboxwithTemplate = (!StringUtil.isNullOrEmpty(paramJobj.optString("createAsTransactionChkbox")) && paramJobj.optString("createAsTransactionChkbox").equalsIgnoreCase("on")) ? true : false;
            if (createAsTransactionChkboxwithTemplate && map.containsKey("istemplate") && map.get("istemplate")!=null) {
                istemplate = Integer.parseInt(map.get("istemplate"));
            }
            String agent = paramJobj.optString("agent");
            String goodsReceiptOrderid = paramJobj.optString("doid");
            String moduleTemplateId = paramJobj.optString("moduletemplateid");
            boolean isCapitalGoodsAcquired = paramJobj.optBoolean("isCapitalGoodsAcquired");
            boolean isApplyTaxToTerms = paramJobj.optBoolean("isApplyTaxToTerms");
            boolean isRetailPurchase = paramJobj.optBoolean("isRetailPurchase");
            boolean importService = paramJobj.optBoolean("importService");
            boolean isExciseInvoice = paramJobj.optBoolean("isExciseInvoice");
            // Excise Opening Balance check from Vendor Master ERP-27108
            boolean isExicseOpeningbalance = paramJobj.optBoolean("isExicseOpeningbalance");
            
            String defaultnatureofpurchase = paramJobj.optString("defaultnatureofpurchase");

            if (!StringUtil.isNullOrEmpty(transactionDateStr)) {
                transactionDate = df.parse(transactionDateStr);
            }
            String manufacturerType = paramJobj.optString("manufacturerType");
            double tdsRate = paramJobj.optDouble("tdsrate", 0.0);
            double tdsAmount = paramJobj.optDouble("tdsamount", 0.0);
            int tdsmasterrateruleid = paramJobj.optInt("tdsmasterrateruleid");
            String supplierInvoiceNo = paramJobj.optString(Constants.SUPPLIERINVOICENO);//SDP-4510
            String importDeclarationNo = paramJobj.optString(Constants.importExportDeclarationNo);
            boolean isCreditable = paramJobj.optBoolean(Constants.isCreditable, true);
            boolean isExpenseInv = paramJobj.optBoolean("isExpenseInv");
            boolean iscash = paramJobj.optBoolean("incash");
            boolean isEdit = paramJobj.optBoolean("isEdit");
            boolean isCopy = paramJobj.optBoolean("copyInv");
            boolean isLeaseFixedAsset = paramJobj.optBoolean("isLeaseFixedAsset");
            boolean selfBilledInvoice = paramJobj.optBoolean("isselfbilledinvoice");
            boolean isFixedAsset = paramJobj.optBoolean("isFixedAsset");
            boolean isConsignment = paramJobj.optBoolean("isConsignment");
            boolean isMRPJOBWORKIN = paramJobj.optBoolean("isMRPJOBWORKIN");
            boolean includeProductTax = paramJobj.optBoolean("includeprotax");
            boolean isdropshipchecked = paramJobj.optBoolean("isdropshipchecked");
            boolean isEditedPendingDocument = paramJobj.optBoolean("isEditedPendingDocument");
            boolean isDraft = (!StringUtil.isNullOrEmpty(paramJobj.optString(Constants.isDraft,null))) ? Boolean.parseBoolean(paramJobj.optString(Constants.isDraft)) : false;
            /**
             * If Un-Registered Vendor made PI 
             */
            boolean isURDPIDocument = paramJobj.optBoolean("isURDPIDocument");
            /**
             * For INDIA GST Purchase Invoice Edit case 
             * If Before Edit PI is RCM Applicable and then edit and removed RCM Applicable then 
             * Need to check 5k Limit for that day All invoice made by Un-Registered Vendor.
             */
            boolean isPreviousRCMApplicable = paramJobj.optBoolean("isPreviousRCMApplicable");
            paramJobj.put("locale", Locale.forLanguageTag(paramJobj.getString(Constants.language)));
            String currentUser = paramJobj.optString(Constants.useridKey);
            String deletedLinkedDocumentID = paramJobj.optString("deletedLinkedDocumentId");
            /* ---- Landing Cost Category (ERP-20637) ---- */
            String landingCostCategory=paramJobj.optString("landingCostCategoryCombo");
            

            String createdby = paramJobj.optString(Constants.useridKey);
            String modifiedby = paramJobj.optString(Constants.useridKey);
            long createdon = System.currentTimeMillis();
            long updatedon = System.currentTimeMillis();
            String jeid = null;
            Vendor vendor = null;
            PayDetail paydetail = null;
            boolean jeautogenflag = false;
            String jeIntegerPart = "";
            String datePrefix = "";
            String dateafterPrefix = "";
            String dateSuffix = "";
            String jeSeqFormatId = "";
            String ljeIntegerPart = "";
            String ljeentryNumber = null;
            String ldatePrefix = "";
            String ldateafterPrefix = "";
            String ldateSuffix = "";
            String ljeSeqFormatId = "";
            String auditMessage="";
            String vendorId = paramJobj.optString("vendor");
            String accountid = vendorId;
            KwlReturnObject custresult = null;
            String allocationType = paramJobj.optString("allocationType","");
            if (!StringUtil.isNullOrEmpty(vendorId)) {
                custresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), vendorId);
                vendor = (Vendor) custresult.getEntityList().get(0);
                if (vendor.getAccount() != null) {
                    accountid = vendor.getAccount().getID();
                }
            }
             KwlReturnObject compResult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
             ExtraCompanyPreferences extraPreferences = (ExtraCompanyPreferences) compResult.getEntityList().get(0);
             
            KwlReturnObject indiaCompResult = accountingHandlerDAOobj.getObject(IndiaComplianceCompanyPreferences.class.getName(), companyid);
            IndiaComplianceCompanyPreferences indiaExtraPreferences = (IndiaComplianceCompanyPreferences) indiaCompResult.getEntityList().get(0);
            boolean isMalaysian = extraPreferences != null ? extraPreferences.getCompany().getCountry().getID().equalsIgnoreCase("137") : false;
            String compids[] = Constants.Companyids_Chkl_And_Marubishi.split(",");
            boolean isFromChklorMarubishi = false;
            for (int cnt = 0; cnt < compids.length; cnt++) {
                String compid = compids[cnt];
                if (compid.equalsIgnoreCase(companyid)) {
                    isFromChklorMarubishi = true;
                }
            }
            boolean bankReconsilationEntry = false, bankPayment = false;
            Date clearanceDate = null, startDate = null, endDate = null;
            String bankAccountId = "";
            Map< String, Object> bankReconsilationMap = new HashMap<String, Object>();
            String countryId = paramJobj.optString(Constants.COUNTRY_ID);
//**For editing Invoice[PS]
            if (!StringUtil.isNullOrEmpty(grid)) {
                KwlReturnObject invObj = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), grid);
                gr = (GoodsReceipt) invObj.getEntityList().get(0);
                paydetail = gr.getPayDetail();
                oldjeid = gr.getJournalEntry().getID();
                /*
                 * Taking original account in edit and copy Purchase Invoice. Refer
                 * SDP-7867
                 */
                //While editing invoice if vendor is changed then take account of new Vendor.
                if (gr.getVendorEntry() != null && gr.getVendor() != null && vendor != null && gr.getVendor().getID().equals(vendor.getID())) {
                    accountid = gr.getVendorEntry().getAccount().getID();
                }
                JournalEntry jetemp = gr.getJournalEntry();
                if (jetemp != null) {
                    jeentryNumber = jetemp.getEntryNumber(); //preserving these data to generate same JE number in edit case                    
                    jeautogenflag = jetemp.isAutoGenerated();
                    jeSeqFormatId = jetemp.getSeqformat() == null ? "" : jetemp.getSeqformat().getID();
                    jeIntegerPart = String.valueOf(jetemp.getSeqnumber());
                    datePrefix = jetemp.getDatePreffixValue();
                    dateafterPrefix = jetemp.getDateAfterPreffixValue();
                    dateSuffix = jetemp.getDateSuffixValue();
                }
                /**
                * ERM-447 landed cost
                *Preserving this data to generate same JE number in edit case.
                */
                JournalEntry ljetemp = gr.getLandedInvoiceJE();
                if (ljetemp != null) {
                    oldLandedInvoiceJEId = ljetemp.getID();
                    ljeentryNumber = ljetemp.getEntryNumber();                     
                    ljeSeqFormatId = ljetemp.getSeqformat() == null ? "" : ljetemp.getSeqformat().getID();
                    ljeIntegerPart = String.valueOf(ljetemp.getSeqnumber());
                    ldatePrefix = ljetemp.getDatePreffixValue();
                    ldateafterPrefix = ljetemp.getDateAfterPreffixValue();
                    ldateSuffix = ljetemp.getDateSuffixValue();
                }                
                if (!isAllowToEdit) { // allow the document to edit
                    result = accGoodsReceiptobj.getGRFromGRInvoice(gr.getID(), companyid);
                    if (result.getEntityList().size() > 0) {
                        GoodsReceiptOrderDetails GoodsReceiptOrderDetailObj = (GoodsReceiptOrderDetails) result.getEntityList().get(0);
                        if (GoodsReceiptOrderDetailObj != null && isEdit) {
                            throw new AccountingException("Cannot Edit Purchase Invoice as it is or was already used in Goods Receipt Order.");
                        }
                    }
                    result = accGoodsReceiptobj.getCreditNoteLinkedWithInvoice(gr.getID(), companyid);
                    if (result.getEntityList().size() > 0 && isEdit) {
                            throw new AccountingException("Cannot Edit Purchase Invoice as it is or was already used in Goods Receipt Order.");
                    }
                }
                Map<String, Object> addressParams = new HashMap<String, Object>();
                String billingAddress = paramJobj.optString(Constants.BILLING_ADDRESS);
                if (isdropshipchecked) {
                    addressParams = AccountingAddressManager.getVendorBillingAddressParamsForDropShipTypeDoc(paramJobj);
                } else {

                    if (!StringUtil.isNullOrEmpty(billingAddress)) {  //handling the cases when no address coming in edit case 
                        addressParams = AccountingAddressManager.getAddressParamsJson(paramJobj, true);
                    } else {
                        if (extraPreferences.isIsAddressFromVendorMaster()) {
                            addressParams = AccountingAddressManager.getDefaultVendorAddressParams(vendor.getID(), companyid, accountingHandlerDAOobj);//getVendorDefaultAddressParams(vendor,companyid);  
                        } else {
                            addressParams = AccountingAddressManager.getDefaultVendorCompanyAddressParams(vendor.getID(), companyid, accountingHandlerDAOobj);//getVendorDefaultAddressParams(vendor,companyid); 
                        }
                    }
                }
                BillingShippingAddresses bsa = gr.getBillingShippingAddresses();
                addressParams.put("id", bsa != null ? bsa.getID() : "");
                KwlReturnObject addressresult = accountingHandlerDAOobj.saveAddressDetail(addressParams, companyid);
                bsa = (BillingShippingAddresses) addressresult.getEntityList().get(0);
                String addressid = bsa.getID();

                // Deleting data from AssetInvoiceDetailMapping if GoodsReceipt in Asset GoodsReceipt
                if (gr.isFixedAssetInvoice()) {
                    deleteAssetDetails(gr, companyid);
                }

                //Delete Goods Receipt Order Details Term Map  While Update time ... 
                if (extraPreferences.getLineLevelTermFlag()==1) {
                    if (isEdit) {
                        KwlReturnObject venresult = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), grid);
                        GoodsReceipt goodsReceipt = (GoodsReceipt) venresult.getEntityList().get(0);
                        Set<GoodsReceiptDetail> grDetailsobj = goodsReceipt.getRows();
                        for (GoodsReceiptDetail temObj : grDetailsobj) {
                            accGoodsReceiptobj.deleteGRDetailsTermMap(temObj.getID());
                        }
                    }
                } 
//**Gettinging invoice inventory[PS]
                result = accGoodsReceiptobj.getGRInventory(grid);
                //deleting Goods Receipt order row
                if (!StringUtil.isNullOrEmpty(goodsReceiptOrderid)) {
                    KwlReturnObject GROObj = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), goodsReceiptOrderid);
                    groObj = (GoodsReceiptOrder) GROObj.getEntityList().get(0);
                    // Update the balance qty for PO if we edit the Invoice ref SDP-6947
                    Set<GoodsReceiptOrderDetails> groDetails = groObj.getRows();
                    if (groDetails != null && !groDetails.isEmpty()) { // update balance quantity to po when creating gr link to pi and pi link to po
                        for (GoodsReceiptOrderDetails cnt : groDetails) {
                            if (cnt.getVidetails() != null && cnt.getVidetails().getPurchaseorderdetail() != null) {
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrderDetail.class.getName(), cnt.getVidetails().getPurchaseorderdetail().getID());
                                PurchaseOrderDetail purchaseorderdetails = (PurchaseOrderDetail) rdresult.getEntityList().get(0);
                                HashMap poMap = new HashMap();
                                poMap.put("podetails", purchaseorderdetails.getID());
                                poMap.put("companyid", purchaseorderdetails.getCompany().getCompanyID());
                                poMap.put("balanceqty", cnt.getDeliveredQuantity());
                                poMap.put("add", true);
                                accCommonTablesDAO.updatePurchaseOrderStatus(poMap);
                            }
                        }
                        Set<GoodsReceiptOrderDetails> grodetails = groObj.getRows();
                        for (GoodsReceiptOrderDetails goodsReceiptOrderDetails : grodetails) {
                            JSONObject json = new JSONObject();
                            json.put("grodid", goodsReceiptOrderDetails.getID());
                            KwlReturnObject kwlReturnObject = stockService.getGRODetailISTMapping(json);
                            List<GRODetailISTMapping> groDetailIstMappings = kwlReturnObject.getEntityList();
                            for (GRODetailISTMapping groDetailIstMapping : groDetailIstMappings) {
                                /**
                                 * Don't allow user to edit GRN, if GRN is
                                 * approved/rejected from QC store.
                                 */
                                if (groDetailIstMapping.getApprovedInterStoreTransferRequests() != null && !groDetailIstMapping.getApprovedInterStoreTransferRequests().isEmpty()) {
                                    throw new AccountingException(messageSource.getMessage("acc.goodsreceiptnote.cannot.be.deleted.as.approvedOrRejected.byQAstore", new Object[]{"edit", groObj.getGoodsReceiptOrderNumber(), "approved"}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                                }
                                if (groDetailIstMapping.getRejectedInterStoreTransferRequests() != null && !groDetailIstMapping.getRejectedInterStoreTransferRequests().isEmpty()) {
                                    throw new AccountingException(messageSource.getMessage("acc.goodsreceiptnote.cannot.be.deleted.as.approvedOrRejected.byQAstore", new Object[]{"edit", groObj.getGoodsReceiptOrderNumber(), "rejected"}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                                }
                                /**
                                 * Delete inter store transfer request which is
                                 * created to send GRN document for QC approval.
                                 */

                                if (groDetailIstMapping.getInterStoreTransferRequest() != null) {
                                    if (groDetailIstMapping.getInterStoreTransferRequest().getStatus() != InterStoreTransferStatus.INTRANSIT) {
                                        throw new AccountingException(messageSource.getMessage("acc.goodsreceiptnote.cannot.be.deleted.as.stockisaccepted.byQAstore", new Object[]{"edit", groObj.getGoodsReceiptOrderNumber()},  Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                                    } else {
                                        istService.deleteISTRequest(groDetailIstMapping.getInterStoreTransferRequest());
                                    }
                                }
                            }
                        }
                    }
                    
//                    request.setAttribute("DOSeqNum", groObj.getSeqnumber());
//                    request.setAttribute(Constants.DATEPREFIX, groObj.getDatePreffixValue());
//                    request.setAttribute(Constants.DATEAFTERPREFIX, groObj.getDateAfterPreffixValue());
//                    request.setAttribute(Constants.DATESUFFIX, groObj.getDateSuffixValue());
                    paramJobj.put("DOSeqNum", groObj.getSeqnumber());
                    paramJobj.put(Constants.DATEPREFIX, groObj.getDatePreffixValue());
                    paramJobj.put(Constants.DATEAFTERPREFIX, groObj.getDateAfterPreffixValue());
                    paramJobj.put(Constants.DATESUFFIX, groObj.getDateSuffixValue());
                    HashMap<String, Object> DeliveryorderMap = new HashMap<String, Object>();
                    DeliveryorderMap.put("doid", goodsReceiptOrderid);
                    DeliveryorderMap.put("companyid", companyid);
                    if (isAllowToEdit) {
                        accGoodsReceiptobj.deleteLinkingInformationOfGR(DeliveryorderMap);
                    }
                    stockMovementService.removeStockMovementByReferenceId(groObj.getCompany(), goodsReceiptOrderid);
                    accGoodsReceiptobj.deleteGoodsReceiptOrdersBatchSerialDetails(DeliveryorderMap); //dlete serial no and mapping
                    accGoodsReceiptobj.deleteGoodsReceiptOrdersPermanent(DeliveryorderMap);
                }
//**Deleting Advance Payment Mapping GoodsReceiptDetailsPaymentMapping                
                if (extraPreferences != null && extraPreferences.getCompany() != null && extraPreferences.getCompany().getCountry() != null
                        && !StringUtil.isNullOrEmpty(extraPreferences.getCompany().getCountry().getID()) && Integer.parseInt(extraPreferences.getCompany().getCountry().getID()) == Constants.indian_country_id) {
                    accGoodsReceiptobj.deleteTDSAdvancePaymentMapping(grid, companyid, isExpenseInv);
                }
                /**
                 * On Edit case Need to delete existing JE details mapping 
                 * if PI made from Un-Registered Vendor
                 */
                if (!StringUtil.isNullOrEmpty(countryId) && Integer.parseInt(countryId) == Constants.indian_country_id && isEdit && !StringUtil.isNullOrEmpty(grid)) {
                    JSONObject URDjobj = new JSONObject();
                    URDjobj.put("receiptID", grid);
                    URDjobj.put(COMPANYID, companyid);
                    accGoodsReceiptobj.deleteURDVendorRCMPurchaseInvoice(URDjobj);
                }
                accGoodsReceiptobj.deleteExpenseGridDetails(grid, companyid);
                    /**
                     * In landed invoice edit case if user removes existing procurement number and keeps field empty while editing.
                     */
                    
                if (extraPreferences.isActivelandingcostofitem() && !StringUtil.isNullOrEmpty(grid)) {
                    String landedinvoicenumber = paramJobj.optString("landedInvoiceNumber");
                    if (isEdit && StringUtil.isNullOrEmpty(landedinvoicenumber)) {
                        accGoodsReceiptobj.deleteGoodsReceiptsLandedInvoice(grid, companyid);
                    }
                    if (jetemp != null) {
                        /**
                         * Delete JournalEntryDetails for Landing Cost Invoice Entry(ERM-447).
                         */
                        accGoodsReceiptobj.deleteLandingCostDetailMapping(grid, companyid,isExpenseInv);
                    }
                    accGoodsReceiptobj.setLandedInvoiceJEDMappingToNULL(grid, companyid);
                }
//**Deleting invoice row[PS]
                accGoodsReceiptobj.deleteGoodsReceiptDetails(grid, companyid);
               
                
                List<String> list = result.getEntityList();
                if (list != null && !list.isEmpty()) {
                    for (String inventoryid : list) {
                        accProductObj.deleteInventory(inventoryid, companyid);
                    }
                }
//**Deleting all Invoice Detail discounts[PS]
                result = accGoodsReceiptobj.getGRDetailsDiscount(grid);
                list = result.getEntityList();
                if (list != null && !list.isEmpty()) {
                    for (String discountid : list) {
                        discountArr.add(discountid);
                    }
                }
//**Deleting Invoice discount[PS]
                String discountid = (gr.getDiscount() == null ? null : gr.getDiscount().getID());
                gr.setDiscount(null);
                if (StringUtil.isNullOrEmpty(discountid)) {
                    discountArr.add(discountid);
                }
//**Setting other required values NULL[PS]
                String nl = null;
                Map<String, Object> dataMap = new HashMap<String, Object>();
                dataMap.put(GRID, grid);
                dataMap.put("posttext", posttext);
                dataMap.put("otherentryid", nl);
                dataMap.put(SHIPENTRYID, nl);
                dataMap.put(TAXID, nl);
                dataMap.put(TAXENTRYID, nl);
                dataMap.put(CUSTOMERENTRYID, nl);
                dataMap.put(Constants.RoundingAdjustmentEntryID, nl);
                dataMap.put("createdby", createdby);
                dataMap.put("modifiedby", modifiedby);
                dataMap.put("createdon", createdon);
                dataMap.put("updatedon", updatedon);
                dataMap.put("creationDate", transactionDate);
                dataMap.put("shipLength", shipLength);
                dataMap.put("gstCurrencyRate", gstCurrencyRate);
                dataMap.put("invoicetype", invoicetype);
                dataMap.put(INCASH, paramJobj.optString(INCASH));
                dataMap.put("billshipAddressid", addressid);
                dataMap.put("selfBilledInvoice", selfBilledInvoice);
                dataMap.put("RMCDApprovalNo", RMCDApprovalNo);
                if (isdropshipchecked) {
                    dataMap.put("isdropshipchecked", isdropshipchecked);
                }
                if (!StringUtil.isNullOrEmpty(moduleTemplateId)) {
                    dataMap.put("moduletemplateid", moduleTemplateId);
                }
                dataMap.put(Constants.Checklocktransactiondate, paramJobj.optString("billdate"));
                dataMap.put(Constants.SUPPLIERINVOICENO, supplierInvoiceNo);
                dataMap.put(Constants.importExportDeclarationNo, importDeclarationNo);
                dataMap.put(Constants.isCreditable, isCreditable);
                
                
                if (isEditedPendingDocument) {
                    dataMap.put("isEditedPendingDocument", isEditedPendingDocument);
                }
                KwlReturnObject uresult = accGoodsReceiptobj.addGoodsReceipt(dataMap);
                gr = (GoodsReceipt) uresult.getEntityList().get(0);
                jeentryNumber = gr.getJournalEntry().getEntryNumber();
                //Delete old entries and insert new entries again from optimized table in edit case.
                accJournalEntryobj.deleteOnEditAccountJEs_optimized(oldjeid);
                deleteJEDetailsCustomData(oldjeid);


                // Delete Invoice Term Map
                HashMap<String, Object> termReqMap = new HashMap<String, Object>();
                termReqMap.put("invoiceid", grid);
                accGoodsReceiptobj.deleteInvoiceTermMap(termReqMap);
               
                     /* Deleting Linking information of Purchase Invoice during Editing Purchase Invoice*/ 
                termReqMap.put("greceiptid", grid);
                accGoodsReceiptobj.deleteLinkingInformationOfPI(termReqMap);//Deleting linking information 

                  /* Updating Isopen Flag=0 & Linkflag=0 of PO, VQ & GR during Editing Purchase Invoice*/
                if (!StringUtil.isNullOrEmpty(deletedLinkedDocumentID)) {
                    String[] deletedLinkedDocumentIDArr = deletedLinkedDocumentID.split(",");
                    for (int i = 0; i < deletedLinkedDocumentIDArr.length; i++) {
                        KwlReturnObject venresult = accountingHandlerDAOobj.getObject(VendorQuotation.class.getName(), deletedLinkedDocumentIDArr[i]);
                        VendorQuotation vendorquotation = (VendorQuotation) venresult.getEntityList().get(0);
                        if (vendorquotation != null) {
                            termReqMap.put("quotation", vendorquotation);
                            termReqMap.put("value", "0");
                            termReqMap.put("isOpen", true);
                            accPurchaseOrderobj.updateVQLinkflag(termReqMap);
                            if (i == 0) {
                                unlinkMessage += " from the Vendor Quotation(s) ";
                            }
                            if (unlinkMessage.indexOf(vendorquotation.getQuotationNumber()) == -1) {
                                unlinkMessage += vendorquotation.getQuotationNumber() + ", ";
                            }
                        } else {
                            venresult = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), deletedLinkedDocumentIDArr[i]);
                            PurchaseOrder purchaseorder = (PurchaseOrder) venresult.getEntityList().get(0);
                            if (purchaseorder != null) {
                                termReqMap.put("isOpen", true);
                                termReqMap.put("purchaseOrder", purchaseorder);
                                termReqMap.put("value", "0");
                                accGoodsReceiptobj.updatePOLinkflag(termReqMap);
                               /* Preparing audit trial message while unlinking document through Edit*/
                                if (i == 0) {
                                    unlinkMessage += " from the Purchase Order(s) ";
                                }
                                if (unlinkMessage.indexOf(purchaseorder.getPurchaseOrderNumber()) == -1) {
                                    unlinkMessage += purchaseorder.getPurchaseOrderNumber() + ", ";
                                }

                            } else {
                                venresult = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), deletedLinkedDocumentIDArr[i]);
                                GoodsReceiptOrder goodsreceipt = (GoodsReceiptOrder) venresult.getEntityList().get(0);
                                termReqMap.put("isOpenInPI", true);
                                termReqMap.put("goodsReceiptOrder", goodsreceipt);
                                accGoodsReceiptobj.updateGRLinkflag(termReqMap);
                                /* Preparing audit trial message while unlinking document through Edit*/
                                if (i == 0) {
                                    unlinkMessage += " from the Goods Receipt(s) ";
                                }
                                if (unlinkMessage.indexOf(goodsreceipt.getGoodsReceiptOrderNumber()) == -1) {
                                    unlinkMessage += goodsreceipt.getGoodsReceiptOrderNumber() + ", ";
                                }
                            }
                        }
                    }
                }
                if (!StringUtil.isNullOrEmpty(unlinkMessage) && unlinkMessage.endsWith(", ")) {
                    unlinkMessage = unlinkMessage.substring(0, unlinkMessage.length() - 2);
                }
            } else if (isCopy) {
                /*
                 * Taking original account in edit and copy Purchase Invoice.
                 * Refer SDP-7867
                 */
                String oldGrId = paramJobj.optString("billid");
                KwlReturnObject invObj = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), oldGrId);
                gr = (GoodsReceipt) invObj.getEntityList().get(0);

                //While copying invoice if vendor is changed then take account of new Vendor.
                if (gr != null && gr.getVendorEntry() != null && gr.getVendor() !=null && vendor!=null && gr.getVendor().getID().equals(vendor.getID())) {
                    accountid = gr.getVendorEntry().getAccount().getID();
                }
            }
            String costCenterId = paramJobj.optString(CCConstants.REQ_costcenter);
//            String taxid = request.getParameter(TAXID);
            String taxid = "";
            if (paramJobj.optString(TAXID).equalsIgnoreCase("None")) {
                taxid = null;
            } else {
                taxid = paramJobj.optString(TAXID);
            }
            KwlReturnObject cmp = accountingHandlerDAOobj.getObject(Company.class.getName(), companyid);
            Company company = (Company) cmp.getEntityList().get(0);
            int countryid = company.getCountry() != null ? Integer.parseInt(company.getCountry().getID()) : 0;
            
            double taxamount = 0.0d;
            if(extraPreferences.getLineLevelTermFlag()!=1){ // Fo Indian company GST Tax is not consider only Term as tax
                taxamount=paramJobj.optDouble(TAXAMOUNT, 0.0);
            }
            
            taxamount = authHandler.round(taxamount, companyid);

            double externalCurrencyRate = paramJobj.optDouble(EXTERNALCURRENCYRATE, 0.0);
            Discount discount = null;
            double discValue = 0.0;
//            double shippingCharges = StringUtil.getDouble(request.getParameter("shipping"));   //Removed from all the ransactions [PS]
//            double otherCharges = StringUtil.getDouble(request.getParameter("othercharges"));
            boolean inCash = paramJobj.optBoolean(INCASH);

            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);

           
            String currencyid = paramJobj.optString(Constants.globalCurrencyKey);
            //            KWLCurrency currency = (KWLCurrency) session.get(KWLCurrency.class, AuthHandler.getCurrencyID(request));
            KwlReturnObject curresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
            KWLCurrency currency = (KWLCurrency) curresult.getEntityList().get(0);
            currencyid = paramJobj.optString(CURRENCYID, currency.getCurrencyID());
            
            String entryNumber = paramJobj.optString(NUMBER);
            String vendorid = paramJobj.optString(VENDOR);
            Map<String, Object> greceipthm = new HashMap<String, Object>();
            Map<String, Object> oldgreceipt = new HashMap<String, Object>();
            Map<String, Object> newAuditKey = new HashMap<String, Object>();
            greceipthm.put(GRID, grid);
            greceipthm.put("posttext", posttext);
            greceipthm.put("isFixedAsset", isFixedAsset);
            greceipthm.put("isConsignment", isConsignment);
            greceipthm.put(Constants.isDraft, isDraft);
            greceipthm.put("isMRPJOBWORKIN", isMRPJOBWORKIN);
            greceipthm.put("isCapitalGoodsAcquired",isCapitalGoodsAcquired);
            greceipthm.put("isRetailPurchase",isRetailPurchase);
            greceipthm.put("importService",importService);
            greceipthm.put("isExciseInvoice",isExciseInvoice);
            greceipthm.put("defaultnatureofpurchase",defaultnatureofpurchase);
            greceipthm.put("manufacturertype",manufacturerType);
            greceipthm.put("tdsrate",tdsRate);
            greceipthm.put("tdsamount",tdsAmount);
            greceipthm.put("tdsmasterrateruleid",tdsmasterrateruleid);
            greceipthm.put(VENDORID, vendorid);
            greceipthm.put(ACCOUNTID, accountid);
            greceipthm.put(ENTRYNUMBER, entryNumber);
            greceipthm.put("shipLength", shipLength);
            greceipthm.put("invoicetype", invoicetype);
            greceipthm.put("createdby", createdby);
            greceipthm.put("modifiedby", modifiedby);
            greceipthm.put("createdon", createdon);
            greceipthm.put("updatedon", updatedon);
            greceipthm.put(Constants.isApplyTaxToTerms, isApplyTaxToTerms);
            String linktransaction = paramJobj.optString("fromLinkCombo");
            if (!StringUtil.isNullOrEmpty(linktransaction)) {
                if (StringUtil.equalIgnoreCase(linktransaction, "Job Work Out Order")) {
                    greceipthm.put("isJobWorkOutInv", true);
                }
            }
            if(Constants.indian_country_id == countryid && !isEdit){
                greceipthm.put("isTDSApplicable", vendor.isIsTDSapplicableonvendor());
            }
            greceipthm.put(Constants.SUPPLIERINVOICENO, supplierInvoiceNo);
            greceipthm.put(Constants.importExportDeclarationNo, importDeclarationNo);
            greceipthm.put(Constants.isCreditable, isCreditable);
            if (extraPreferences.getCompany().getCountry()!=null && extraPreferences.getCompany().getCountry().getID().equals(String.valueOf(Constants.indian_country_id))) {
                greceipthm.put("formtype", formtype);
                greceipthm.put("gtaapplicable", rcmApplicable);
                greceipthm.put("gstapplicable", gstapplicable);
                if (!StringUtil.isNullOrEmpty(paramJobj.optString("TotalAdvanceTDSAdjustmentAmt")) && extraPreferences.isTDSapplicable()) {
                    //TDS Amount of Advance Payments
                    greceipthm.put("TotalAdvanceTDSAdjustmentAmt",paramJobj.optDouble("TotalAdvanceTDSAdjustmentAmt", 0.0));
                }
                greceipthm.put(Constants.isMerchantExporter, paramJobj.optBoolean(Constants.isMerchantExporter, false));
            }
            if (StringUtil.isNullOrEmpty(grid)) {
                String msg = checkPOUsedFlag(paramJobj, 2);
                if (!StringUtil.isNullOrEmpty(msg)) {//Check if PO is already used in Goods Receipt or not.
                    throw new AccountingException(msg);
                }
            }
            synchronized (this) {
                SequenceFormat prevSeqFormat = null;
                String nextAutoNo = "";
                String nextAutoNoInt = "";
                boolean isFromOtherSource = paramJobj.optBoolean("isFromOtherSource", false);//if this service is called from other source like import than the sequence number should not be generated instead it will take Receipt number from file
                if (!StringUtil.isNullOrEmpty(grid)) { //in edit case checks duplicate                  
                    result = accGoodsReceiptobj.getDuplicateGRNumberForEdit(entryNumber, companyid, grid);
                    nocount = result.getRecordTotalCount();
                    if (nocount > 0 && istemplate != 2 && sequenceformat.equals("NA")) {
                        if (inCash) {
                            throw new AccountingException(messageSource.getMessage("acc.field.Purchasereceiptnumber", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                        } else {
                            throw new AccountingException(messageSource.getMessage("acc.field.VendorInvoicenumber", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                        }
                    } else {
                        KwlReturnObject rst = accountingHandlerDAOobj.getObject(GoodsReceipt.class.getName(), grid);
                        GoodsReceipt grd = (GoodsReceipt) rst.getEntityList().get(0);
                        prevSeqFormat = grd.getSeqformat();
                        //                                              //Building new array
                        if (isEdit == true) { //For Audit Trial-ERP-12922
                            setValuesForAuditTrialMessage(grd,paramJobj, oldgreceipt, greceipthm, inCash, newAuditKey);
                        }
                        if (!sequenceformat.equals("NA")) {
                            nextAutoNo = entryNumber;
                        }
                    }
                    
                } /*else { // create new case checks duplicate
                    result = accGoodsReceiptobj.getReceiptFromNo(entryNumber, companyid);
                    nocount = result.getRecordTotalCount();
                    if (nocount > 0 && istemplate != 2 && sequenceformat.equals("NA")) {
                        if (inCash) {
                            throw new AccountingException(messageSource.getMessage("acc.field.Purchasereceiptnumber", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                        } else {
                            throw new AccountingException(messageSource.getMessage("acc.field.VendorInvoicenumber", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + entryNumber + messageSource.getMessage("acc.field.alreadyexists.", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                        }
                    }
                }*/

                if (sequenceformat.equals("NA")) {//In case of NA checks wheather this number can also be generated by a sequence format or not
                    int mduleid = Constants.Acc_Vendor_Invoice_ModuleId;
                    if (inCash) {
                        mduleid = Constants.Acc_Cash_Purchase_ModuleId;
                    }
                    List list = accCompanyPreferencesObj.checksEntryNumberForSequenceNumber(mduleid, entryNumber, companyid);
                    if (!list.isEmpty()) {
                        boolean isvalidEntryNumber = (Boolean) list.get(0);
                        String formatName = (String) list.get(1);
                        if (!isvalidEntryNumber) {
                            throw new AccountingException(messageSource.getMessage("acc.common.enterdocumentnumber", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " <b>" + entryNumber + "</b> " + messageSource.getMessage("acc.common.belongsto", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " <b>" + formatName + "</b>. " + messageSource.getMessage("acc.common.plselectseqformat", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))) + " <b>" + formatName + "</b> " + messageSource.getMessage("acc.common.insteadof", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                        }
                    }
                }

                /*if (!sequenceformat.equals("NA") && prevSeqFormat == null) {
                    int from = StaticValues.AUTONUM_GOODSRECEIPT;
                    if (inCash) {
                        from = StaticValues.AUTONUM_CASHPURCHASE;
                    }
                    boolean seqformat_oldflag = StringUtil.getBoolean(request.getParameter("seqformat_oldflag"));
                    if (seqformat_oldflag) {
                        nextAutoNo = accCompanyPreferencesObj.getNextAutoNumber(companyid, from, sequenceformat);
                    } else {
                        String[] nextAutoNoTemp = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, from, sequenceformat, seqformat_oldflag);
                        nextAutoNo = nextAutoNoTemp[0];
                        nextAutoNoInt = nextAutoNoTemp[1];
                        greceipthm.put(Constants.SEQFORMAT, sequenceformat);
                        greceipthm.put(Constants.SEQNUMBER, nextAutoNoInt);
                    }
                    entryNumber = nextAutoNo;
                }*/

                if (sequenceformat.equals("NA") || !StringUtil.isNullOrEmpty(grid)) {
                    greceipthm.put(ENTRYNUMBER, entryNumber);
                } else {
                    if (isFromOtherSource) {        //this block will pass entry number from imported CSV.
                        greceipthm.put("entrynumber", entryNumber);
                        greceipthm.put(Constants.SEQNUMBER, seqNumber);
                        greceipthm.put(Constants.SEQFORMAT, sequenceformat);
                    } else {
                        greceipthm.put(ENTRYNUMBER, "");
                    }
                }
                greceipthm.put(AUTOGENERATED, sequenceformat.equals("NA") ?  false : true);
            }
            
            greceipthm.put(MEMO, paramJobj.optString(MEMO));
            greceipthm.put(BILLTO, paramJobj.optString(BILLTO));
            greceipthm.put(SHIPADDRESS, paramJobj.optString(SHIPADDRESS));
//            greceipthm.put(SHIPDATE, df.parse(paramJobj.optString(SHIPDATE)));
            if (paramJobj.optString(SHIPDATE) != null && !StringUtil.isNullOrEmpty(paramJobj.optString(SHIPDATE))) {
                greceipthm.put(SHIPDATE, df.parse(paramJobj.optString(SHIPDATE)));
            }
            greceipthm.put(DUEDATE, df.parse(paramJobj.optString(DUEDATE)));
            greceipthm.put(CURRENCYID, currencyid);
            greceipthm.put(COMPANYID, companyid);
            greceipthm.put("shipvia", paramJobj.optString("shipvia"));
            greceipthm.put(termid, paramJobj.optString("termid"));
            greceipthm.put("fob", paramJobj.optString("fob"));
            greceipthm.put("externalCurrencyRate", externalCurrencyRate);
            greceipthm.put("agent", paramJobj.optString("agent"));
            greceipthm.put("isfavourite", paramJobj.optString("isfavourite"));
            greceipthm.put("landedInvoiceNumber", paramJobj.optString("landedInvoiceNumber"));
            greceipthm.put("venbilladdress", paramJobj.optString("venbilladdress"));
            greceipthm.put("venshipaddress", paramJobj.optString("venshipaddress"));
            boolean gstIncluded = paramJobj.optBoolean("includingGST");
            greceipthm.put("gstIncluded", gstIncluded);
            greceipthm.put("selfBilledInvoice", selfBilledInvoice);
            greceipthm.put("RMCDApprovalNo", RMCDApprovalNo);
            greceipthm.put("landingCostCategory", landingCostCategory);
            if (inCash && !StringUtil.isNullOrEmpty(methodid)) { //in cash when payment method selected
                KwlReturnObject payresult = accountingHandlerDAOobj.getObject(PaymentMethod.class.getName(), methodid);
                PaymentMethod payMethod = (PaymentMethod) payresult.getEntityList().get(0);
                if (payMethod != null) {
                    HashMap pdetailhm = new HashMap();
                    pdetailhm.put("paymethodid", payMethod.getID());
                    pdetailhm.put("companyid", companyid);
                    if (paydetail != null) { //For Edit Case                      
                        pdetailhm.put("paydetailid", paydetail.getID());
                    }

                    if (payMethod.getDetailType() != PaymentMethod.TYPE_CASH) {
                        if (paramJobj.optString("paydetail") != null && !StringUtil.isNullOrEmpty(paramJobj.optString("paydetail"))) {
                            JSONObject obj = new JSONObject(paramJobj.optString("paydetail"));
                            if (payMethod.getDetailType() == PaymentMethod.TYPE_BANK) {
                                HashMap chequehm = new HashMap();
                                chequehm.put("chequeno", obj.getString("chequeno"));
                                chequehm.put("description",  StringUtil.DecodeText(obj.getString("description")));
                                chequehm.put("bankname",  StringUtil.DecodeText(obj.getString("bankname")));
                                chequehm.put("duedate", df.parse(obj.getString("payDate")));
                                chequehm.put("companyId", companyid);
                                Map<String, Object> seqchequehm = new HashMap<>();
                                obj.put(Constants.companyKey, companyid);
                                String chequesequenceformat = obj.optString("sequenceformat");
                                String nextChequeNumber = "";
                                /**
                                 * getNextChequeNumber method to generate next sequence number using
                                 * sequence format,also saving the dateprefix and datesuffix in cheque table.
                                 */
                                if (!StringUtil.isNullOrEmpty(chequesequenceformat) && !chequesequenceformat.equals("NA")) {
                                    seqchequehm = accCompanyPreferencesObj.getNextChequeNumber(obj);
                                } else {
                                    nextChequeNumber = obj.optString("chequenumber");
                                }

                                if (seqchequehm.containsKey(Constants.AUTO_ENTRYNUMBER)) {
                                    chequehm.put("chequeno", (String) seqchequehm.get(Constants.AUTO_ENTRYNUMBER));
                                }
                                if (seqchequehm.containsKey(Constants.SEQNUMBER)) {
                                    chequehm.put("sequenceNumber", (String) seqchequehm.get(Constants.SEQNUMBER));
                                }
                                if (seqchequehm.containsKey(Constants.DATEPREFIX)) {
                                    chequehm.put(Constants.DATEPREFIX, (String) seqchequehm.get(Constants.DATEPREFIX));
                                }
                                if (seqchequehm.containsKey(Constants.DATEAFTERPREFIX)) {
                                    chequehm.put(Constants.DATEAFTERPREFIX, (String) seqchequehm.get(Constants.DATEAFTERPREFIX));
                                }
                                if (seqchequehm.containsKey(Constants.DATESUFFIX)) {
                                    chequehm.put(Constants.DATESUFFIX, (String) seqchequehm.get(Constants.DATESUFFIX));
                                }
                                KwlReturnObject cqresult = accPaymentDAOobj.addCheque(chequehm);
                                Cheque cheque = (Cheque) cqresult.getEntityList().get(0);
                                pdetailhm.put("chequeid", cheque.getID());
                                 /*
                                 * need to save the data to reconcilation
                                 * Cleared or Uncleared
                                 */
                                bankReconsilationEntry = obj.getString("paymentStatus") != null ? obj.getString("paymentStatus").equals("Cleared") : false;
                                if (bankReconsilationEntry) {
                                    bankAccountId = paramJobj.optString("bankaccid");
                                    startDate = df.parse(paramJobj.optString("startdate"));
                                    endDate = df.parse(paramJobj.optString("enddate"));
                                    clearanceDate = df.parse(obj.getString("clearanceDate"));
                                    bankReconsilationMap.put("bankAccountId", bankAccountId);
                                    bankReconsilationMap.put("startDate", startDate);
                                    bankReconsilationMap.put("endDate", endDate);
                                    bankReconsilationMap.put("clearanceDate", clearanceDate);
                                    bankReconsilationMap.put("endingAmount", 0.0);
                                    bankReconsilationMap.put("companyId", companyid);

                                }
                            } else if (payMethod.getDetailType() == PaymentMethod.TYPE_CARD) {
                                HashMap cardhm = new HashMap();
                                cardhm.put("cardno", obj.getString("cardno"));
                                cardhm.put("nameoncard", obj.getString("nameoncard"));
                                cardhm.put("expirydate", df.parse(obj.getString("expirydate")));
                                cardhm.put("cardtype", obj.getString("cardtype"));
                                cardhm.put("refno", obj.getString("refno"));
                                KwlReturnObject cdresult = accPaymentDAOobj.addCard(cardhm);
                                Card card = (Card) cdresult.getEntityList().get(0);
                                pdetailhm.put("cardid", card.getID());
                            }
                        }
                    }
                    payresult = accPaymentDAOobj.addPayDetail(pdetailhm);
                    paydetail = (PayDetail) payresult.getEntityList().get(0);
                    if (paydetail != null) {
                        greceipthm.put("paydetailsid", paydetail.getID());
                    }
                }
            }
            greceipthm.put("gstCurrencyRate", gstCurrencyRate);
//** Create Journal Entry[PS]
            if (StringUtil.isNullOrEmpty(oldjeid)) {
                synchronized (this) {
                    HashMap<String, Object> JEFormatParams = new HashMap<String, Object>();
                    JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                    JEFormatParams.put("modulename", "autojournalentry");
                    JEFormatParams.put("companyid", companyid);
                    JEFormatParams.put("isdefaultFormat", true);

                    KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                    SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
//                    String[] nextAutoNoTemp = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false);
                    jeentryNumber = "";//nextAutoNoTemp[0];  //next auto generated number
                    jeIntegerPart = "0";//nextAutoNoTemp[1];
                    jeSeqFormatId = format.getID();
                    jeautogenflag = true;
                }
            }
            

            Map<String, Object> jeDataMap = AccountingManager.getGlobalParamsJson(paramJobj);
                if (istemplate == 2) {
                    jeDataMap.put("entrynumber", "");
                } else {
                    jeDataMap.put("entrynumber", jeentryNumber);
                    jeDataMap.put(Constants.SEQFORMAT, jeSeqFormatId);
                    jeDataMap.put(Constants.SEQNUMBER, jeIntegerPart);
                    jeDataMap.put(Constants.DATEPREFIX, datePrefix);
                    jeDataMap.put(Constants.DATEAFTERPREFIX, dateafterPrefix);
                    jeDataMap.put(Constants.DATESUFFIX, dateSuffix);
                }
                jeDataMap.put("autogenerated", jeautogenflag);
                jeDataMap.put(ENTRYDATE, df.parse(paramJobj.optString(BILLDATE)));
                jeDataMap.put(Constants.Checklocktransactiondate, paramJobj.optString(BILLDATE));//for checking lock period ERP-16800
                jeDataMap.put(COMPANYID, companyid);
                jeDataMap.put(MEMO, paramJobj.optString(MEMO));
                jeDataMap.put(CURRENCYID, currencyid);
                jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
                jeDataMap.put("createdby", createdby);
                jeDataMap.put(CCConstants.JSON_costcenterid, costCenterId);
                Set<JournalEntryDetail> jedetails = new HashSet<JournalEntryDetail>();     
                KwlReturnObject jeresult=null;
                JournalEntry journalEntry =null;
                // Excise Opening Balance check from Vendor Master ERP-27108
                if (!isExicseOpeningbalance) {  
                    jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
                    journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
                    jeid = journalEntry.getID();
                    greceipthm.put("journalentryid", jeid);
                }
                jeDataMap.put(JEID, jeid);
            Set<GoodsReceiptDetail> grdetails = null;
            Set<ExpenseGRDetail> expensegrdetails = null;
            double[] totals = null;
            JournalEntry landedInvoiceJE = null;
            HashSet<JournalEntryDetail> landedInvoiceJEDetails = new HashSet<>();  
            /**
             * Post separate JE for landed expense invoice Changes done in ERM-447.
             */
            Map<String, Object> landedJEMap = AccountingManager.getGlobalParamsJson(paramJobj);
            String landedInvoiceJEId = null;
            if (preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD && extraPreferences.isActivelandingcostofitem() && isExpenseInv && !StringUtil.isNullOrEmpty(landingCostCategory) && !landingCostCategory.equalsIgnoreCase("NOT APPLICABLE")) {
                if (!StringUtil.isNullOrEmpty(oldLandedInvoiceJEId)) {
                    /**
                     * JournalEntry seqformat,entryno should be same in edit case.
                     */
                    landedJEMap.put("entrynumber", ljeentryNumber);
                    landedJEMap.put(Constants.SEQFORMAT, ljeSeqFormatId);
                    landedJEMap.put(Constants.SEQNUMBER, ljeIntegerPart);
                    landedJEMap.put(Constants.DATEPREFIX, ldatePrefix);
                    landedJEMap.put(Constants.DATEAFTERPREFIX, ldateafterPrefix);
                    landedJEMap.put(Constants.DATESUFFIX, ldateSuffix);
                } else {
                    HashMap<String, Object> JEFormatParams = new HashMap<>();
                    JEFormatParams.put("moduleid", Constants.Acc_GENERAL_LEDGER_ModuleId);
                    JEFormatParams.put("modulename", "autojournalentry");
                    JEFormatParams.put("companyid", companyid);
                    JEFormatParams.put("isdefaultFormat", true);
                    KwlReturnObject kwlObj = accCompanyPreferencesObj.getSequenceFormat(JEFormatParams);
                    SequenceFormat format = (SequenceFormat) kwlObj.getEntityList().get(0);
                    Map<String, Object> seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_JOURNALENTRY, format.getID(), false, df.parse(paramJobj.optString(BILLDATE)));
                    landedJEMap.put("entrynumber", (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER));
                    landedJEMap.put(Constants.SEQFORMAT, format.getID());
                    landedJEMap.put(Constants.SEQNUMBER, (String) seqNumberMap.get(Constants.SEQNUMBER));
                    landedJEMap.put(Constants.DATEPREFIX, (String) seqNumberMap.get(Constants.DATEPREFIX));
                    landedJEMap.put(Constants.DATEAFTERPREFIX, (String) seqNumberMap.get(Constants.DATEAFTERPREFIX));
                    landedJEMap.put(Constants.DATESUFFIX, (String) seqNumberMap.get(Constants.DATESUFFIX));
                }
                landedJEMap.put("autogenerated", jeautogenflag);
                landedJEMap.put(ENTRYDATE, df.parse(paramJobj.optString(BILLDATE)));
                landedJEMap.put(COMPANYID, companyid);
                landedJEMap.put(MEMO, paramJobj.optString(MEMO));
                landedJEMap.put(CURRENCYID, currencyid);
                landedJEMap.put("createdby", createdby);
                landedJEMap.put(CCConstants.JSON_costcenterid, costCenterId);
                landedJEMap.put("externalCurrencyRate", externalCurrencyRate);
                landedJEMap.put("istemplate", istemplate);
                KwlReturnObject landedInvoiceJEResult = accJournalEntryobj.saveJournalEntry(landedJEMap);
                landedInvoiceJE = (JournalEntry) landedInvoiceJEResult.getEntityList().get(0);
                landedInvoiceJEId = landedInvoiceJE.getID();
                greceipthm.put("landedInvoiceJE", landedInvoiceJEId);
            }
            ArrayList<String> prodList = null;
            Map<Inventory, Object> FinalTerm  = null;
            Map<Inventory, Object> ExciseDetails  = null;
            HashMap exciseDetails  = null;
            if (!isExicseOpeningbalance) {
                if (!inCash) {
//                    request.setAttribute("vendorAccountId", accountid);
                    paramJobj.put("vendorAccountId", accountid);
                } else {
                    if (paydetail != null && paydetail.getPaymentMethod() != null) {
//                        request.setAttribute("vendorAccountId", paydetail.getPaymentMethod().getAccount().getID());
                        paramJobj.put("vendorAccountId", paydetail.getPaymentMethod().getAccount().getID());
                    } else {
//                        request.setAttribute("vendorAccountId", preferences.getCashAccount().getID());
                        paramJobj.put("vendorAccountId", preferences.getCashAccount().getID());
                    }
                }
            }
//            if (countryid == Constants.indian_country_id && vendor != null && vendor.getGSTRegistrationType() != null) {
//                MasterItem gstRegistrationType = vendor.getGSTRegistrationType();
//                if (gstRegistrationType != null && gstRegistrationType.getDefaultMasterItem() != null && !StringUtil.isNullOrEmpty(gstRegistrationType.getDefaultMasterItem().getID())) {
//                    request.setAttribute("isUnRegisteredDealer", gstRegistrationType.getDefaultMasterItem().getID().equals(Constants.GSTRegType.get(Constants.GSTRegType_Unregistered)));
//                }
//            }
//**Saving product grid[PS]
            Map<Integer, Map<String,List<String>>> JEDetailsIDAgainstTerms = null;
            Map<Integer,List<String>> grDetailTermMap = new HashMap<>();
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(DETAIL))) {
                List li = saveGoodsReceiptRows(paramJobj, jeid, company, jedetails, currency, externalCurrencyRate,map,grDetailTermMap);
                totals = (double[]) li.get(0);
                grdetails = (HashSet<GoodsReceiptDetail>) li.get(1);
                prodList = (ArrayList<String>) li.get(2);
                if(extraPreferences.getLineLevelTermFlag()==1){
                    FinalTerm = (Map<Inventory, Object>)li.get(3);
                }
                if(countryid == Constants.indian_country_id ){
                    ExciseDetails = (Map<Inventory, Object>)li.get(4);
                }
                if(countryid == Constants.indian_country_id && rcmApplicable && isURDPIDocument && li.size()>=5){
                   JEDetailsIDAgainstTerms = (Map<Integer, Map<String,List<String>>>)li.get(5);
                }
            }
            /*
             * If invoice terms applied then add mapping in against invoice
             */
            double termTotalAmount = 0;
            HashMap<String, Double> termAcc = new HashMap<String, Double>();
            HashMap<String, Double> termTaxAmt = new HashMap<String, Double>();
            double termTaxTotalAmount = 0;
            Tax termTax = null; 
            String InvoiceTerms = paramJobj.optString("invoicetermsmap");
            if (!StringUtil.isNullOrEmpty(InvoiceTerms)) {
                JSONArray termsArr = new JSONArray(InvoiceTerms);
                for (int cnt = 0; cnt < termsArr.length(); cnt++) {
                    double termamount = 0;
                    if (gstIncluded) {
                        termamount = termsArr.getJSONObject(cnt).optDouble("termAmountExcludingTax",0);
                    } else {
                        termamount = termsArr.getJSONObject(cnt).optDouble("termamount",0);
                    }
                    double termTaxAmount = termsArr.getJSONObject(cnt).optDouble("termtaxamount", 0);
                    String termTaxId = termsArr.getJSONObject(cnt).optString("termtax",null);
                    if (!StringUtil.isNullOrEmpty(termTaxId)) {
                        KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), termTaxId);
                        termTax = (Tax) txresult.getEntityList().get(0);
                        if (termTaxAmt.containsKey(termTax.getAccount().getID())) {
                            double tempTaxAmount = termTaxAmt.get(termTax.getAccount().getID());
                            termTaxAmt.put(termTax.getAccount().getID(), termTaxAmount + tempTaxAmount);
                        } else {
                            termTaxAmt.put(termTax.getAccount().getID(), termTaxAmount);
                        }
                        termTaxTotalAmount += termTaxAmount;
                    }
                    termTotalAmount += termamount;
                    if (termAcc.containsKey(termsArr.getJSONObject(cnt).getString("glaccount"))) {
                        double tempAmount = termAcc.get(termsArr.getJSONObject(cnt).getString("glaccount"));
                        termAcc.put(termsArr.getJSONObject(cnt).getString("glaccount"), termamount + tempAmount);
                    } else {
                        termAcc.put(termsArr.getJSONObject(cnt).getString("glaccount"), termamount);
                    }
                }
                if(termsArr.length()>0) {
                    greceipthm.put(Constants.termsincludegst, paramJobj.optBoolean(Constants.termsincludegst));
                }
            }

//**Saving account grid[PS]
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(EXPENSEDETAIL))) {
                if(extraPreferences.isActivelandingcostofitem() && !extraPreferences.islandedcosttermJE()) {
                    paramJobj.put("totaltermamountforlandedcost", termTotalAmount);
                }
                List li = saveExpenseGRRows(paramJobj, jeid, company, jedetails, currency, externalCurrencyRate, landedInvoiceJEId, landedInvoiceJEDetails,extraPreferences);
                totals = (double[]) li.get(0);
                expensegrdetails = (HashSet<ExpenseGRDetail>) li.get(1);
                greceipthm.put(ISEXPENSETYPE, true);
            }

            double disc = paramJobj.optDouble(DISCOUNT, 0.0);
            if (disc > 0) {
                JSONObject discjson = new JSONObject();
                discjson.put(DISCOUNT, disc);
                discjson.put(INPERCENT, paramJobj.optBoolean(PERDISCOUNT));
                discjson.put(ORIGINALAMOUNT, totals[1] - totals[0] + totals[2]);
                discjson.put(COMPANYID, companyid);
                KwlReturnObject dscresult = accDiscountobj.addDiscount(discjson);
                discount = (Discount) dscresult.getEntityList().get(0);
                greceipthm.put(DISCOUNTID, discount.getID());
                discValue = discount.getDiscountValue();
            }
            discValue += totals[0];


             
//            if (!StringUtil.isNullOrEmpty(taxid)){
//                taxamount = taxamount-termTaxTotalAmount;
//            }
            double lineLeveltermTotalAmount=0;
            double GTATaxAmount=0;
            double GTA_SERVICETaxAmount=0;
            double GTA_KKCTaxAmount=0;
            double GTA_SBCTaxAmount=0;
            String LineDetails = paramJobj.optString(DETAIL);
            if(!StringUtil.isNullOrEmpty(LineDetails) && extraPreferences.getLineLevelTermFlag()==1){            
                JSONArray jArr = new JSONArray(LineDetails);
                for (int i = 0; i < jArr.length(); i++) {
//                JournalEntryDetail jed;
                    JSONObject jobj = jArr.getJSONObject(i);
                    InvoiceTerms =  StringUtil.DecodeText((String) jobj.optString("LineTermdetails"));
                    if (!StringUtil.isNullOrEmpty(InvoiceTerms)) {
                        JSONArray termsArr = new JSONArray(InvoiceTerms);
                        for (int cnt = 0; cnt < termsArr.length(); cnt++) {
                            double termamount = termsArr.getJSONObject(cnt).getDouble("termamount");
                                lineLeveltermTotalAmount += termamount;
                                if (rcmApplicable && (termsArr.getJSONObject(cnt).getInt("termtype") == IndiaComplianceConstants.LINELEVELTERMTYPE_GST  ||termsArr.getJSONObject(cnt).getInt("termtype") == IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX || termsArr.getJSONObject(cnt).getInt("termtype") == IndiaComplianceConstants.LINELEVELTERMTYPE_KKC || termsArr.getJSONObject(cnt).getInt("termtype") == IndiaComplianceConstants.LINELEVELTERMTYPE_SBC)){
                                    GTATaxAmount+= termamount;
                                    if(termsArr.getJSONObject(cnt).getInt("termtype") == IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX){// Get toal Service tax amount of Goods Receipt(Vendor Invoice)
                                        GTA_SERVICETaxAmount+=termamount;
                                    }else if(termsArr.getJSONObject(cnt).getInt("termtype") == IndiaComplianceConstants.LINELEVELTERMTYPE_KKC){// Get toal KKC tax amount of Goods Receipt(Vendor Invoice)
                                        GTA_KKCTaxAmount+=termamount;
                                    }else if(termsArr.getJSONObject(cnt).getInt("termtype") == IndiaComplianceConstants.LINELEVELTERMTYPE_SBC){// Get total SBC amount of Goods Receipt(Vendor Invoice)
                                        GTA_SBCTaxAmount+=termamount;
                                    }
                                }
                            }
                        if (termsArr.length() > 0) {
                            greceipthm.put(Constants.termsincludegst, paramJobj.optBoolean(Constants.termsincludegst));
                        }
                    }
                }
            }
            
            double totalInvAmount = totals[1] - discValue + termTotalAmount + taxamount + termTaxTotalAmount;
//            if (!StringUtil.isNullOrEmpty(taxid)){
//                totalInvAmount += termTaxTotalAmount;
//            }
            if(!gstIncluded) {
                totalInvAmount += totals[2];
            }
            
            if(lineLeveltermTotalAmount!=0 && extraPreferences.getLineLevelTermFlag()==1 && !gstIncluded){
                totalInvAmount+=lineLeveltermTotalAmount;
            }
            if(extraPreferences.isTDSapplicable() && tdsAmount>0 && vendor.getNatureOfPayment()!=null){
                totalInvAmount-=tdsAmount;
            }
            
            // **** Only for india compliance - GTA (Start) **** // 
            if (rcmApplicable && GTATaxAmount > 0 && !isExciseInvoice && countryid == Constants.indian_country_id) { //GTA Applicable
                totalInvAmount = totalInvAmount - GTATaxAmount;// Payble total amount = Total Invoice amount - 3 service taxes
            }
            // **** Only for india compliance - GTA (End) **** // 
            
            //Rounding Adjustment Code Start
            //Rounding Adjustment will always calculated after calculation of totalInvAmount
            boolean isRoundingAdjustmentApplied = paramJobj.optBoolean(Constants.IsRoundingAdjustmentApplied);
            String roundingAdjustmentAccountID = "";
            String columnPref = extraPreferences.getColumnPref();
            if (!StringUtil.isNullOrEmpty(columnPref)) {
                JSONObject prefObj = new JSONObject(columnPref);
                roundingAdjustmentAccountID = prefObj.optString(Constants.RoundingAdjustmentAccountID, "");
            }

            if (isRoundingAdjustmentApplied && !StringUtil.isNullOrEmpty(roundingAdjustmentAccountID)) {
                double totalInvAmountAfterRound = Math.round(totalInvAmount);
                double roundingAdjustmentValue = authHandler.round(totalInvAmountAfterRound - totalInvAmount, companyid);
                if (roundingAdjustmentValue != 0) {
                    totalInvAmount = totalInvAmountAfterRound;//Now rounded value becomes total invoice amount
                    JSONObject jedjson = new JSONObject();
                    jedjson.put("srno", jedetails.size() + 1);
                    jedjson.put(Constants.companyKey, companyid);
                    jedjson.put("amount", Math.abs(roundingAdjustmentValue));
                    jedjson.put("accountid", roundingAdjustmentAccountID);
                    jedjson.put("debit", (roundingAdjustmentValue<0)?false:true);
                    jedjson.put("jeid", jeid);
                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    
                    greceipthm.put(Constants.RoundingAdjustmentEntryID, jed.getID());
                    jedetails.add(jed);
                }
            }
            greceipthm.put(Constants.IsRoundingAdjustmentApplied, isRoundingAdjustmentApplied);
            //Rounding Adjustment Code End
            
            KwlReturnObject bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totalInvAmount, currencyid, df.parse(paramJobj.optString("billdate")), externalCurrencyRate);
            double totalInvAmountinBase = (Double) bAmt.getEntityList().get(0);

//            boolean amountExceed = false;
//            boolean prodExists = false;
//
//            int approvalAmountPending = 0;
//            int approvalProductPending = 0;
//            ArrayList prodApprove = null;
//
//            ArrayList amountApprove = (accountingHandlerDAOobj.getApprovalFlagForAmount(totalInvAmountinBase, Constants.VENDOR_INVOICE_APPROVAL, Constants.TRANS_AMOUNT, companyid));
//            amountExceed = (Boolean) amountApprove.get(0) && (Integer)amountApprove.get(1)!=0;
//            approvalAmountPending = (Integer) (amountApprove.get(1));
//            boolean pendingApprovalFlagForDisc = false;
//            int approvalLevelForDisc = 1;
//            if (!isExpenseInv) {
//                prodApprove = (accountingHandlerDAOobj.getApprovalFlagForProducts(prodList, Constants.VENDOR_INVOICE_APPROVAL, Constants.TRANS_PRODUCT, companyid));
//                prodExists = (Boolean) prodApprove.get(0);
//                approvalProductPending = (Integer) (prodApprove.get(1));
//
//
            JSONArray productDiscountJArr=new JSONArray();
            double lineLevelTermAmount = 0;//used get line level term amount if GST include is option is true
            if (grdetails != null) {
                for (GoodsReceiptDetail grDetail : grdetails) {
                    if (grDetail.getInventory() != null) {
                        String productId = grDetail.getInventory().getProduct().getID();
                        Discount invDiscount = grDetail.getDiscount();
                        double discAmountinBase = 0;
                        if (invDiscount != null) {
                            double discountVal = invDiscount.getDiscountValue();
                            KwlReturnObject dAmount = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, discountVal, currencyid, df.parse(paramJobj.optString("billdate")), externalCurrencyRate);
                            discAmountinBase = (Double) dAmount.getEntityList().get(0);
                        }
                        discAmountinBase = authHandler.round(discAmountinBase, companyid);
                        JSONObject productDiscountObj = new JSONObject();
                        productDiscountObj.put("productId", productId);
                        productDiscountObj.put("discountAmount", discAmountinBase);
                        productDiscountJArr.put(productDiscountObj);
                    }
                    /*
                     if GST include is true then add the value in line level term
                     */
                    lineLevelTermAmount += grDetail.getLineLevelTermAmount();
                }
            }
//            }
//            pendingApprovalFlag = (isFixedAsset ||isConsignment) ? 0: (istemplate != 2 ? ((amountExceed || prodExists || pendingApprovalFlagForDisc) ? 1 : 0) : 0);//No need of approval if transaction is saved as only template , Also in case of fixedasset purchase invoice no need to go for approval flow
//            int approvalLevel = (approvalAmountPending > approvalProductPending) ? approvalAmountPending : approvalProductPending;
//            if (approvalLevelForDisc > approvalLevel) {
//                approvalLevel = approvalLevelForDisc;
//            }
//            
//            if(isFixedAsset && isConsignment){// in case of Fixed Asset Purchase Invoice, there will be no approval level
//                approvalLevel = 1;
//            }
                JSONObject jedjson = new JSONObject();
                KwlReturnObject jedresult =null;
                JournalEntryDetail jed=null;
             // Excise Opening Balance check from Vendor Master ERP-27108 : to hide JE POST 
            if (!isExicseOpeningbalance) {
                    jedjson.put(SRNO, jedetails.size() + 1);
                    jedjson.put(COMPANYID, companyid);
                    jedjson.put(AMOUNT, authHandler.round(totalInvAmount, companyid));   //+  shippingCharges +otherCharges  ERP-12597 [SJ]
                    if (!inCash) {
                        jedjson.put(ACCOUNTID, accountid);
                    } else {
                        if (paydetail != null && paydetail.getPaymentMethod() != null) {
                            jedjson.put(ACCOUNTID, paydetail.getPaymentMethod().getAccount().getID());
                        } else {
                            jedjson.put(ACCOUNTID, preferences.getCashAccount().getID());
                        }
                    }
                    jedjson.put(DEBIT, false);
                    jedjson.put(JEID, jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
//            gReceipt.setVendorEntry(jed);
                    greceipthm.put(VENDORENTRYID, jed.getID());
                    
                    if (rcmApplicable && GTATaxAmount > 0 && !isExciseInvoice && countryid == Constants.indian_country_id) { //GTA Applicable - JE shuld be split in payble amount + 3 service taxes        
                        if (GTA_SERVICETaxAmount > 0) {
                            jed = GTAServiceTaxJEEntry(jedetails, companyid, GTA_SERVICETaxAmount, extraPreferences.getSTPayableAcc(), jeid);
                            jedetails.add(jed);
                        }
                        if (GTA_KKCTaxAmount > 0) {
                            jed = GTAServiceTaxJEEntry(jedetails, companyid, GTA_KKCTaxAmount, indiaExtraPreferences.getGTAKKCPaybleAccount(), jeid);
                            jedetails.add(jed);
                        }
                        if (GTA_SBCTaxAmount > 0) {
                            jed = GTAServiceTaxJEEntry(jedetails, companyid, GTA_SBCTaxAmount, indiaExtraPreferences.getGTASBCPaybleAccount(), jeid);
                            jedetails.add(jed);
                        }
                    }
                    
                if (discValue > 0) {
                    jedjson = new JSONObject();
                    jedjson.put(SRNO, jedetails.size() + 1);
                    jedjson.put(COMPANYID, companyid);
                    jedjson.put(AMOUNT, discValue);
                    jedjson.put(ACCOUNTID, preferences.getDiscountReceived().getID());
                    jedjson.put(DEBIT, false);
                    jedjson.put(JEID, jeid);
                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jedetails.add(jed);
                }

                if (termAcc.size() > 0) {
                    for (Map.Entry<String, Double> entry : termAcc.entrySet()) {
                        jedjson = new JSONObject();
                        jedjson.put("srno", jedetails.size() + 1);
                        jedjson.put("companyid", companyid);
                        jedjson.put("amount", entry.getValue() > 0 ? entry.getValue() : (entry.getValue() * (-1)));
                        jedjson.put("accountid", entry.getKey());
                        jedjson.put("debit", entry.getValue() > 0 ? true : false);
                        jedjson.put("jeid", jeid);
                        jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                        jedetails.add(jed);
                    }
                }
                   //Update term account in landed cost JE as well if it has been used in the expense invoice
                    if (!StringUtil.isNullOrEmpty(landedInvoiceJEId) && isExpenseInv && extraPreferences.isActivelandingcostofitem() && extraPreferences.islandedcosttermJE()) {
                        if (termAcc.size() > 0) {
                            for (Map.Entry<String, Double> entry : termAcc.entrySet()) {
                                JSONObject ljedjson = new JSONObject();
                                ljedjson.put("srno", landedInvoiceJEDetails.size() + 1);
                                ljedjson.put("companyid", company.getCompanyID());
                                ljedjson.put("amount", entry.getValue() > 0 ? entry.getValue() : (entry.getValue() * (-1)));
                                ljedjson.put("accountid", entry.getKey());
                                ljedjson.put("debit", !(entry.getValue() > 0)); //this is a reverse JE hence conditions are reverse too
                                ljedjson.put("jeid", jeid);
                                jedresult = accJournalEntryobj.addJournalEntryDetails(ljedjson);
                                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                landedInvoiceJEDetails.add(jed);
                            }
                        }
                    } 
                
                if (termTaxAmt.size() > 0 && termTax!= null) {
                    for (Map.Entry<String, Double> entry : termTaxAmt.entrySet()) {
                        jedjson = new JSONObject();
                        jedjson.put("srno", jedetails.size() + 1);
                        jedjson.put(Constants.companyKey, companyid);
                        jedjson.put("amount", entry.getValue() > 0 ? entry.getValue() : (entry.getValue() * (-1)));
                        jedjson.put("accountid", entry.getKey());
                        jedjson.put("debit",entry.getValue() > 0 ? true : false);
                        jedjson.put("jeid", jeid);
                        jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                        jedetails.add(jed);
                    }
                }
                if (extraPreferences.isTDSapplicable() && tdsAmount > 0) {
                    /*
                    TDS JE posting for GoodsReceipt Invoice
                    */
                    JSONArray DataArr = null;
                    if(!StringUtil.isNullOrEmpty(paramJobj.optString("AdvancePaymentDetails"))){
                        String jsondata = paramJobj.optString("AdvancePaymentDetails");
                        DataArr = new JSONArray("[" + jsondata + "]");
                    }
                    if (grdetails != null &&  !StringUtil.isNullOrEmpty(paramJobj.optString(DETAIL))) {
                        for (GoodsReceiptDetail grDetail : grdetails) {
                            if (grDetail.getTdsLineAmount() != 0.0 && grDetail.getTdsPayableAccount()!=null) {
                                double paymentMappingamount = 0.0; 
                                if(grDetail.getGoodsReceiptDetailPaymentMapping()!=null && !StringUtil.isNullOrEmpty(paramJobj.optString("AdvancePaymentDetails")) && DataArr.length()>0){
                                   Set<GoodsReceiptDetailPaymentMapping> paymentDetailsSet = grDetail.getGoodsReceiptDetailPaymentMapping();
                                     for (GoodsReceiptDetailPaymentMapping mappingDetails : paymentDetailsSet) { 
                                         paymentMappingamount += mappingDetails.getAdvanceAdjustedAmount();
                                     }
                                }
                                jedjson = new JSONObject();
                                jedjson.put("srno", jedetails.size() + 1);
                                jedjson.put("companyid", companyid);
                                jedjson.put("amount", grDetail.getTdsLineAmount() - paymentMappingamount);
                                jedjson.put("accountid", grDetail.getTdsPayableAccount().getID());
                                jedjson.put("debit", false);
                                jedjson.put("jeid", jeid);
                                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                jedetails.add(jed);
                            }
                        }
                    }
                    /*
                    TDS JE posting for Expense Invoice
                    */
                    if (expensegrdetails != null &&  !StringUtil.isNullOrEmpty(paramJobj.optString(EXPENSEDETAIL))) {
                        for (ExpenseGRDetail expenseDetail : expensegrdetails) {
                            if (expenseDetail.getTdsLineAmount()!= 0.0 && expenseDetail.getTdsPayableAccount()!=null) {
                                double paymentMappingamount = 0.0; 
                                if(expenseDetail.getGoodsReceiptDetailPaymentMapping()!=null && !StringUtil.isNullOrEmpty(paramJobj.optString("AdvancePaymentDetails")) && DataArr.length()>0){
                                   Set<GoodsReceiptDetailPaymentMapping> paymentDetailsSet = expenseDetail.getGoodsReceiptDetailPaymentMapping();
                                     for (GoodsReceiptDetailPaymentMapping mappingDetails : paymentDetailsSet) { 
                                         paymentMappingamount += mappingDetails.getAdvanceAdjustedAmount();
                                     }
                                     if(expenseDetail.getTdsLineAmount()-paymentMappingamount<=0){
                                         continue;
                                     }
                                }
                                jedjson = new JSONObject();
                                jedjson.put("srno", jedetails.size() + 1);
                                jedjson.put("companyid", companyid);
                                jedjson.put("amount", expenseDetail.getTdsLineAmount() - paymentMappingamount);
                                jedjson.put("accountid", expenseDetail.getTdsPayableAccount().getID());
                                    jedjson.put("debit", false);
                                jedjson.put("jeid", jeid);
                                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                jedetails.add(jed);
                            }
                        }
                    }
                }
            }
//            if (shippingCharges > 0) {
//                jedjson = new JSONObject();
//                jedjson.put("srno", jedetails.size()+1);
//                jedjson.put("companyid", companyid);
//                jedjson.put("amount", shippingCharges);
//                jedjson.put("accountid", preferences.getShippingCharges().getID());
//                jedjson.put("debit", true);
//                jedjson.put("jeid", jeid);
//                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
//                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
//                jedetails.add(jed);
//                greceipthm.put("shipentryid", jed.getID());
//            }
//            if (otherCharges > 0) {
//                jedjson = new JSONObject();
//                jedjson.put("srno", jedetails.size()+1);
//                jedjson.put("companyid", companyid);
//                jedjson.put("amount", otherCharges);
//                jedjson.put("accountid", preferences.getOtherCharges().getID());
//                jedjson.put("debit", true);
//                jedjson.put("jeid", jeid);
//                jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
//                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
//                jedetails.add(jed);
//                greceipthm.put("otherentryid", jed.getID());
//
//            }
            // Excise Opening Balance check from Vendor Master ERP-27108 : to hide JE POST
            double taxAmountinBase=0;
            double excludingGstAmountInBase=0;
            KwlReturnObject baseAmountObj =null;
            if (!isExicseOpeningbalance) {  
                if (!StringUtil.isNullOrEmpty(taxid)) {
                    result = accountingHandlerDAOobj.getObject(Tax.class.getName(), taxid);
                    Tax tax = (Tax) result.getEntityList().get(0);
                    if (tax == null && !taxid.isEmpty()) {
                        throw new AccountingException(messageSource.getMessage("acc.so.taxcode", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    }
                    greceipthm.put(TAXID, tax.getID());
                    if (taxamount > 0) {
                        jedjson = new JSONObject();
                        jedjson.put(SRNO, jedetails.size() + 1);
                        jedjson.put(COMPANYID, companyid);
                        jedjson.put(AMOUNT, taxamount);
                        jedjson.put(ACCOUNTID, tax.getAccount().getID());
                        jedjson.put(DEBIT, true);
                        jedjson.put(JEID, jeid);
                        jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                        jedetails.add(jed);
                        greceipthm.put(TAXENTRYID, jed.getID());
                    }
                }
                    /* Add global level tax amount and tax amount in base value */
                    greceipthm.put("taxAmount", taxamount+termTaxTotalAmount);
                    baseAmountObj = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, taxamount+termTaxTotalAmount, currencyid, df.parse(paramJobj.optString("billdate")), externalCurrencyRate);
                    taxAmountinBase = (Double) baseAmountObj.getEntityList().get(0);
                    taxAmountinBase = authHandler.round(taxAmountinBase, companyid);
                    greceipthm.put("taxAmountInBase", taxAmountinBase);
                    greceipthm.put("excludingGstAmount", totals[1]-discValue);
                    baseAmountObj = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, (totals[1]-discValue), currencyid, df.parse(paramJobj.optString("billdate")), externalCurrencyRate);
                    excludingGstAmountInBase = (Double) baseAmountObj.getEntityList().get(0);
                    excludingGstAmountInBase=authHandler.round(excludingGstAmountInBase, companyid);
                    greceipthm.put("excludingGstAmountInBase", excludingGstAmountInBase);
                    
                /* Add line level tax amount and tax amount in base value */
                if (includeProductTax) {
                    greceipthm.put("taxAmount", totals[2]+termTaxTotalAmount);
                    baseAmountObj = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, totals[2]+termTaxTotalAmount, currencyid, df.parse(paramJobj.optString("billdate")), externalCurrencyRate);
                    taxAmountinBase = (Double) baseAmountObj.getEntityList().get(0);
                    taxAmountinBase = authHandler.round(taxAmountinBase, companyid);
                    greceipthm.put("taxAmountInBase", taxAmountinBase);
                    excludingGstAmountInBase = totals[1] - discValue;
                    if (gstIncluded) {
                        excludingGstAmountInBase = totals[1] - totals[2] - discValue;
                        excludingGstAmountInBase += lineLevelTermAmount;
                    }
                    greceipthm.put("excludingGstAmount", authHandler.round(excludingGstAmountInBase, companyid));
                    baseAmountObj = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, excludingGstAmountInBase, currencyid, df.parse(paramJobj.optString("billdate")), externalCurrencyRate);
                    excludingGstAmountInBase = (Double) baseAmountObj.getEntityList().get(0);
                    excludingGstAmountInBase = authHandler.round(excludingGstAmountInBase, companyid);
                    greceipthm.put("excludingGstAmountInBase", excludingGstAmountInBase);
                }
            
            jeDataMap.put(JEDETAILS, jedetails);
            }
                jeDataMap.put("externalCurrencyRate", externalCurrencyRate);
//            if (isFixedAsset || isConsignment) {
//                jeDataMap.put("pendingapproval", 1);   //JE pending 
//            } else {
//                jeDataMap.put("pendingapproval", 0);   //approve JE incase of fixedasset and isconsignment
//            }
            jeDataMap.put("istemplate", istemplate);
            // Excise Opening Balance check from Vendor Master ERP-27108 : to hide JE POST
           if(!isExicseOpeningbalance){
               jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);//Create Journal entry without JEdetails
                journalEntry = (JournalEntry) jeresult.getEntityList().get(0);
                
            if (!StringUtil.isNullOrEmpty(customfield)) {
                JSONArray jcustomarray = new JSONArray(customfield);
                HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                customrequestParams.put("customarray", jcustomarray);
                customrequestParams.put("modulename", Constants.Acc_JE_modulename);
                customrequestParams.put("moduleprimarykey", Constants.Acc_JEid);
                customrequestParams.put("modulerecid", journalEntry.getID());
                customrequestParams.put("moduleid", isFixedAsset ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : isConsignment?Constants.Acc_Consignment_GoodsReceipt_ModuleId:Constants.Acc_Vendor_Invoice_ModuleId);
                customrequestParams.put("companyid", companyid);
                customrequestParams.put("customdataclasspath", Constants.Acc_BillInv_custom_data_classpath);
                KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                    jeDataMap.put("accjecustomdataref", journalEntry.getID());
                    jeresult = accJournalEntryobj.saveJournalEntry(jeDataMap);
                }
            }
           }
            String erdid = null;
            Date billDate = !StringUtil.isNullObject(paramJobj.optString(BILLDATE)) ? null : df.parse(paramJobj.optString(BILLDATE));
            KwlReturnObject ERresult = accCurrencyDAOobj.getExcDetailID(requestParams, currencyid, billDate, null);
            List ERlist = ERresult.getEntityList();
            if (!ERlist.isEmpty()) {
                Iterator itr = ERlist.iterator();
                ExchangeRateDetails erd = (ExchangeRateDetails) itr.next();
                erdid = erd.getID();
            }
            greceipthm.put(ERDID, erdid);
            greceipthm.put(INCASH, paramJobj.optString(INCASH));

            if (StringUtil.isNullOrEmpty(grid)) {// Cases other than Edit
                boolean isDefaultAddress = paramJobj.optBoolean("defaultAdress");
                Map<String, Object> addressParams = new HashMap<String, Object>();
                if (isDefaultAddress) {
                    if (extraPreferences.isIsAddressFromVendorMaster()) {
                        addressParams = AccountingAddressManager.getDefaultVendorAddressParams(vendorid, companyid, accountingHandlerDAOobj);
                    } else {
                        addressParams = AccountingAddressManager.getDefaultVendorCompanyAddressParams(vendorid, companyid, accountingHandlerDAOobj);
                    }
                } else {

                    if (isdropshipchecked) {
                        addressParams = AccountingAddressManager.getVendorBillingAddressParamsForDropShipTypeDoc(paramJobj);
                    } else {
                        addressParams = AccountingAddressManager.getAddressParamsJson(paramJobj, true);
                    }

                }
                KwlReturnObject addressresult = accountingHandlerDAOobj.saveAddressDetail(addressParams, companyid);
                BillingShippingAddresses bsa = (BillingShippingAddresses) addressresult.getEntityList().get(0);
                greceipthm.put("billshipAddressid", bsa.getID());
            }
            double invoiceamountdue = totalInvAmount;
            double invoiceamountdueinbase = totalInvAmountinBase;
            if (inCash) {
                invoiceamountdue = 0d;
                invoiceamountdueinbase = 0d;
            }

            greceipthm.put(Constants.invoiceamountdue, invoiceamountdue);
            greceipthm.put(Constants.invoiceamount, totalInvAmount);
            greceipthm.put(Constants.invoiceamountinbase, totalInvAmountinBase);
            greceipthm.put(Constants.invoiceamountdueinbase, invoiceamountdueinbase);
            greceipthm.put(Constants.discountAmount, discValue);
            // Excise Opening Balance check from Vendor Master ERP-27108 : to hide JE POST 
            // Opening Balance Field Add
            if (isExicseOpeningbalance) {
                greceipthm.put("isOpeningBalenceInvoice", isExicseOpeningbalance);
                greceipthm.put("isNormalInvoice", !isExicseOpeningbalance);
                greceipthm.put("originalOpeningBalanceAmount", totalInvAmount);
                greceipthm.put("openingBalanceAmountDue", totalInvAmount);
            }
            greceipthm.put("creationDate", df.parse(paramJobj.optString(BILLDATE)));
            bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, discValue, currencyid, df.parse(paramJobj.optString("billdate")), externalCurrencyRate);
            double discValueInBase = (Double) bAmt.getEntityList().get(0);
            greceipthm.put(Constants.discountAmountInBase, discValueInBase);
            
            greceipthm.put(Constants.Checklocktransactiondate, paramJobj.optString("billdate"));
            if (isdropshipchecked) {
                greceipthm.put("isdropshipchecked", isdropshipchecked);
            }
            
            if (isEditedPendingDocument) {
                greceipthm.put("isEditedPendingDocument", isEditedPendingDocument);
            }
            result = accGoodsReceiptobj.addGoodsReceipt(greceipthm);
            gr = (GoodsReceipt) result.getEntityList().get(0);
            greceipthm.put(GRID, gr.getID());
            /**
             * Save GST History Customer/Vendor data.
             */
            if (gr.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                JSONObject paramsJobj = new JSONObject();
                paramsJobj.put("CustomerVendorTypeId", paramJobj.optString("CustomerVendorTypeId"));
                paramsJobj.put("GSTINRegistrationTypeId", paramJobj.optString("GSTINRegistrationTypeId"));
                paramsJobj.put("gstdochistoryid", paramJobj.optString("gstdochistoryid"));
                paramsJobj.put("gstin", paramJobj.optString("gstin"));
                paramsJobj.put("docid", gr.getID());
                paramsJobj.put("moduleid", isFixedAsset?Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId:Constants.Acc_Vendor_Invoice_ModuleId);
                fieldDataManagercntrl.createRequestMapToSaveDocHistory(paramsJobj);
            }
            if (extraPreferences.getCompany().getCountry() != null && extraPreferences.getCompany().getCountry().getID().equals(String.valueOf(Constants.indian_country_id))
                    && extraPreferences.isTDSapplicable()) {
                if (!StringUtil.isNullOrEmpty(paramJobj.optString("AdvancePaymentDetails"))) {
                    HashMap updateParamsHM = new HashMap();
                    updateParamsHM.put("companyid", companyid);
                    updateParamsHM.put("goodsreceiptid", gr.getID());
                    updateParamsHM.put("isUsed", false);//To Update is UsedFlag in Advance Payment.
                    //Before Delete, unflag the TDSUsed flag from AdvancePayment.
                    accGoodsReceiptobj.updateAdvancePaymentTDSUsedFlag(updateParamsHM);
                    //Before adding new mapping details, delete existing details.
                    boolean isDeleteGoodsReceiptPaymentMapping = accGoodsReceiptobj.deleteGoodsReceiptPaymentMapping(gr.getID());
                    //Set Mapping between Goods Receipt & Payments(Advance payments from which TDS Amount is adjusted)
                    Set<GoodsReceiptPaymentMapping> paymentIDset = new HashSet<GoodsReceiptPaymentMapping>();
                    HashMap paramsHM = new HashMap();
                    String AdvancePaymentIDs = "";
                    String jsondata = paramJobj.optString("AdvancePaymentDetails");
                    JSONArray DataArr = new JSONArray("[" + jsondata + "]");
                    KwlReturnObject curObjresult = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), currencyid);
                    KWLCurrency currencyObj = (KWLCurrency) curObjresult.getEntityList().get(0);
                    for (int i = 0; i < DataArr.length(); i++) {
                        JSONObject jobj = DataArr.getJSONObject(i);
                        GoodsReceiptPaymentMapping grpm = new GoodsReceiptPaymentMapping();
                        grpm.setPaymentid(jobj.getString("AdvancePaymentID"));
                        grpm.setTdsAmount(jobj.getDouble("AdvanceTDSAmount"));
                        grpm.setTdsAmountDue(jobj.getDouble("AdvanceTDSAmount"));
                        grpm.setGoodsreceiptid(gr);
                        grpm.setCurrency(currencyObj);
                        paymentIDset.add(grpm);
                        AdvancePaymentIDs += "'" + jobj.getString("AdvancePaymentID") + "',";
                    }
                    gr.setAdvancepaymentrows(paymentIDset);//To set AdvancePaymentrows to GoodsReceipt. 
                    paramsHM.put("companyid", companyid);
                    paramsHM.put("AdvancePaymentIDs", AdvancePaymentIDs.substring(0, AdvancePaymentIDs.length() - 1));
                    paramsHM.put("isUsed", true);
                    //To Update is UsedFlag in Advance Payment.
                    accGoodsReceiptobj.updateAdvancePaymentTDSUsedFlag(paramsHM);
                } else if (isEdit && StringUtil.isNullOrEmpty(paramJobj.optString("AdvancePaymentDetails"))) {
                    HashMap paramsHM = new HashMap();
                    paramsHM.put("companyid", companyid);
                    paramsHM.put("goodsreceiptid", gr.getID());
                    paramsHM.put("isUsed", false);//To Update is UsedFlag in Advance Payment.
                    //Before Delete, unflag the TDSUsed flag from AdvancePayment.
                    accGoodsReceiptobj.updateAdvancePaymentTDSUsedFlag(paramsHM);
                    //To Delete GoodsReceiptPaymentMapping rows against selected Goods Receipt
                    boolean isDeleteGoodsReceiptPaymentMapping = accGoodsReceiptobj.deleteGoodsReceiptPaymentMapping(gr.getID());
                }
            }
//            double subTotalAmount = 0;
//            double taxAmount = 0;
//            double totalTermAmount = 0;
//            double grTotalAmount = 0;
//            if (!StringUtil.isNullOrEmpty(request.getParameter("subTotal"))) {
//                subTotalAmount = Double.parseDouble(request.getParameter("subTotal"));
//            }
//            if (!StringUtil.isNullOrEmpty(request.getParameter("taxamount"))) {
//                taxAmount = Double.parseDouble(request.getParameter("taxamount"));
//            }
//            if (!StringUtil.isNullOrEmpty(request.getParameter("invoicetermsmap"))) {
//                JSONArray termDetailsJArr = new JSONArray(request.getParameter("invoicetermsmap"));
//                for (int cnt = 0; cnt < termDetailsJArr.length(); cnt++) {
//                    JSONObject temp = termDetailsJArr.getJSONObject(cnt);
//                    if (temp != null) {
//                        double termAmount = Double.parseDouble(temp.getString("termamount"));
//                        totalTermAmount += termAmount;
//                    }
//                }
//            }
            List approvedlevel = null;
//            grTotalAmount= subTotalAmount + taxAmount + totalTermAmount;
            HashMap<String, Object> grvApproveMap = new HashMap<String, Object>();
            String baseUrl = paramJobj.optString(Constants.PAGE_URL);
            int approvalStatusLevel = 11;
            int level = (isEdit && !isCopy) ? 0 : gr.getApprovestatuslevel();
            boolean ismailApplicable=false;
            grvApproveMap.put("companyid", paramJobj.optString(COMPANYID));
            grvApproveMap.put("level", level);
            grvApproveMap.put("totalAmount", String.valueOf(authHandler.round(totalInvAmountinBase, companyid)));
            grvApproveMap.put("currentUser", currentUser);
            grvApproveMap.put("fromCreate", true);
            grvApproveMap.put("productDiscountMapList", productDiscountJArr);
            grvApproveMap.put("moduleid", Constants.Acc_Vendor_Invoice_ModuleId);
            grvApproveMap.put("iscash", iscash);
            grvApproveMap.put(Constants.PAGE_URL, baseUrl);
            
            
            /*----Declaring variable for EditedPending document-------*/
            String postingDateStr = paramJobj.optString("postingDate");
            JSONObject columnprefObj = new JSONObject();
            boolean sendPendingDocumentsToNextLevel = false;
          
            List approvalJEList = null;
            String JENumber = "";
            String JEMsg = "";
            List approvalHistoryList = null;
            String roleName = "";
            boolean isAuthorityToApprove = true;

            if (!StringUtil.isNullOrEmpty(extraPreferences.getColumnPref())) {
                columnprefObj = new JSONObject((String) extraPreferences.getColumnPref());
            }
            if (columnprefObj.has("sendPendingDocumentsToNextLevel") && columnprefObj.get("sendPendingDocumentsToNextLevel") != null && (Boolean) columnprefObj.get("sendPendingDocumentsToNextLevel") != false) {
                sendPendingDocumentsToNextLevel = true;
            }

            /*------If pending document is Edited & Check is activated from system preferences
             *---Then Edit will work same as while approving document
             */
            if (isEditedPendingDocument) {
                level = gr.getApprovestatuslevel();
                grvApproveMap.put("fromCreate", false);
                grvApproveMap.put("documentLevel", level);
                if (sendPendingDocumentsToNextLevel) {

                    ismailApplicable = true;
                    grvApproveMap.put("level", level);

                } else {
                    grvApproveMap.put("isEditedPendingDocumentWithCheckOff", true);
                }
            }
         
                     
            /*-------Code for approval---------*/
            if (!(isLeaseFixedAsset || isConsignment || isFixedAsset || istemplate == 2 || isDraft)) { // if there is no approval rule then default approvedlevel value is 11, so in case of fixed asset, Approve status level value will be 11;
                approvedlevel = approvegr(gr, grvApproveMap, ismailApplicable);
                approvalStatusLevel = (Integer) approvedlevel.get(0);
                mailParams = (List) approvedlevel.get(1);

                greceipthm.put("approvalstatuslevel", approvalStatusLevel);
            } else {
                gr.setApprovestatuslevel(11);
                greceipthm.put("approvalstatuslevel", 11);
            }
            
                    
            int levelOnWhichDocumentIsApproved = gr.getApprovestatuslevel();

              /*-----Block is executed when Edited pending Document & Check "Send pending documents to next level" is activated-------*/
                /*------If pending document is Edited & Check is activated from system preferences
                 *---Then Edit will work same as while approving document
                 -----*/
            if (isEditedPendingDocument) {

                if (sendPendingDocumentsToNextLevel) {

                    String userName = paramJobj.optString(Constants.userfullname);

                    if (approvalStatusLevel == 11) {//Approve JE

                        HashMap approveJeMap = new HashMap();

                        approveJeMap.put("company", company);
                        approveJeMap.put("purchaseInvoice", gr);
                        approveJeMap.put("preferences", preferences);
                        approveJeMap.put("extraPreferences", extraPreferences);
                        approveJeMap.put("postingDateStr", postingDateStr);
                        approveJeMap.put("paramJobj", paramJobj);
                        approveJeMap.put("jeDataMap", jeDataMap);
                        approveJeMap.put("isEditedPendingDocument", isEditedPendingDocument);

                        approvalJEList = approveRelevantDocumentAttachedToVendorInvoice(approveJeMap);

                        JENumber = approvalJEList != null ? approvalJEList.get(0).toString() : "";

                        JEMsg = approvalJEList != null ? approvalJEList.get(1).toString() : "";

                    }

                    /*----Block will execute if "Allow Sending Approval Mail" check is activated from system preferences ------*/
                    if (approvalStatusLevel != Constants.NoAuthorityToApprove && preferences.isSendapprovalmail()) {

                        HashMap emailMap = new HashMap();

                        emailMap.put("userName", userName);
                        emailMap.put("company", company);
                        emailMap.put("purchaseInvoice", gr);
                        emailMap.put("baseUrl", baseUrl);
                        emailMap.put("preferences", preferences);
                        emailMap.put("ApproveMap", grvApproveMap);

                        sendApprovalMailIfAllowedFromSystemPreferences(emailMap);

                    }

                    /*--------Save Approval history Code--------  */
                    if (approvalStatusLevel != Constants.NoAuthorityToApprove) {

                        HashMap approvalHistoryMap = new HashMap();
                        String userid = paramJobj.optString(Constants.userid);
                        approvalHistoryMap.put("userid", userid);
                        approvalHistoryMap.put("userName", userName);
                        approvalHistoryMap.put("company", company);
                        approvalHistoryMap.put("purchaseInvoice", gr);
                        approvalHistoryMap.put("baseUrl", baseUrl);
                        approvalHistoryMap.put("preferences", preferences);

                        approvalHistoryList = saveApprovalHistory(approvalHistoryMap);
                        roleName = approvalHistoryList != null ? approvalHistoryList.get(0).toString() : "";
                       
                    } else if (approvalStatusLevel == Constants.NoAuthorityToApprove){
                        /*----If User have no authority to approve------*/
                        isAuthorityToApprove = false;
                         greceipthm.put("approvalstatuslevel", gr.getApprovestatuslevel());
                    }
                } else if (approvalStatusLevel == Constants.NoAuthorityToApprove) {//If User is not authorised to approve
                    isAuthorityToApprove = false;
                     greceipthm.put("approvalstatuslevel", gr.getApprovestatuslevel());
                }
            }
            
            
            if(approvalStatusLevel!=11){
                pendingApprovalFlag=1;
            }else{
                pendingApprovalFlag=0;
            }
            
            /* For India Country only 
             *  Save TDS JE mapping if eligible 
             *
             */
            if (countryid == Constants.indian_country_id && extraPreferences.isTDSapplicable() && tdsAmount > 0 && vendor.isConsiderExemptLimit()) {
                Map<String, Object> jeDATA = AccountingManager.getGlobalParamsJson(paramJobj);

                jeDATA.put(ENTRYDATE, df.parse(paramJobj.optString(BILLDATE)));
                jeDATA.put(Constants.Checklocktransactiondate, paramJobj.optString(BILLDATE));//for checking lock period ERP-16800
                jeDATA.put(COMPANYID, companyid);
                jeDATA.put(CURRENCYID, currencyid);
                jeDATA.put("externalCurrencyRate", externalCurrencyRate);
                jeDATA.put("createdby", createdby);
                jeDATA.put(CCConstants.JSON_costcenterid, costCenterId);
                jeDATA.put("istemplate", 0);
                HashMap<String, Object> tdsJE = new HashMap<String, Object>();

                KwlReturnObject accountPrefResult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
                CompanyAccountPreferences pref = (CompanyAccountPreferences) accountPrefResult.getEntityList().get(0);
                tdsJE.put("isExpenseInv", isExpenseInv);
                if (isExpenseInv) {
                    tdsJE.put("rowDetailId", expensegrdetails);
                } else {
                    tdsJE.put("rowDetailId", grdetails);
                }
                tdsJE.put("extraPreferences", extraPreferences);
                tdsJE.put("companyAccountPreferences", pref);
                tdsJE.put("billdate", billDate);
                tdsJE.put("vendor", vendor);
                tdsJE.put("companyid", companyid);
                tdsJE.put("jeDataMap", jeDATA);
                tdsJE.put("company", company);
                tdsJE.put("goodsReceiptId", gr.getID());
                tdsJE.put("goodsReceiptNumber", gr.getGoodsReceiptNumber());
                tdsJE.put("vendorName", gr.getVendor().getName());
                saveGoodsReceiptTdsJEMapping(tdsJE);
            }

//**For product grid
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(DETAIL))) {
//                Iterator itr = grdetails.iterator();
//                while(itr.hasNext()){
//                    GoodsReceiptDetail grd = (GoodsReceiptDetail) itr.next();
                if (grdetails != null && !grdetails.isEmpty()) {
                    for (GoodsReceiptDetail grd : grdetails) {
                        if ((pendingApprovalFlag == 1 || istemplate == 2) && grd.getInventory().isInvrecord()) {//No need to update inventory if transaction is saved as only template
                            Inventory invtry = grd.getInventory();
                            invtry.setActquantity(invtry.getQuantity());
                            invtry.setQuantity(0);
                        }
                        grd.setGoodsReceipt(gr);
                    }
                }
                greceipthm.put(GRDETAILS, grdetails);
            }
//**For account grid
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(EXPENSEDETAIL))) {
//                Iterator itr = expensegrdetails.iterator();
//                while(itr.hasNext()){
//                    ExpenseGRDetail grd = (ExpenseGRDetail) itr.next();
                if (expensegrdetails != null && !expensegrdetails.isEmpty()) {
                    for (ExpenseGRDetail grd : expensegrdetails) {
                        grd.setGoodsReceipt(gr);
                    }
                }
                greceipthm.put(EXPENSEGRDETAILS, expensegrdetails);
            }
            greceipthm.put("pendingapproval", pendingApprovalFlag);
            greceipthm.put("istemplate", istemplate);
            if (!StringUtil.isNullOrEmpty(moduleTemplateId)) {
                greceipthm.put("moduletemplateid", moduleTemplateId);
            }
//            greceipthm.put("approvallevel", approvalLevel);
            result = accGoodsReceiptobj.updateGoodsReceipt(greceipthm);
            // Excise Opening Balance check from Vendor Master ERP-27108 : To Hide JE POST
            if (!isExicseOpeningbalance) {
                JSONObject jeJobj = new JSONObject();
                HashSet<JournalEntryDetail> details = new HashSet<JournalEntryDetail>();
                if (approvalStatusLevel == 11) {
                    jeJobj.put("pendingapproval", 0);
                } else {
                    jeJobj.put("pendingapproval", 1);
                }
                jeJobj.put("jeid", jeid);
                jeJobj.put("companyid", paramJobj.optString(COMPANYID));
                jeJobj.put("transactionId", gr.getID());
                jeJobj.put("transactionModuleid", isFixedAsset ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : isConsignment ? Constants.Acc_Consignment_GoodsReceipt_ModuleId : inCash ? Constants.Acc_Cash_Purchase_ModuleId : Constants.Acc_Vendor_Invoice_ModuleId);
                accJournalEntryobj.updateJournalEntry(jeJobj, details);
            }
            gr = (GoodsReceipt) result.getEntityList().get(0);
             if (bankReconsilationEntry) {
                bankReconsilationMap.put("clearingamount", gr.getInvoiceAmount());
                bankReconsilationMap.put("currencyid", currencyid);
                bankReconsilationMap.put("GoodsReceipt", gr);
               
                if (!StringUtil.isNullOrEmpty(oldjeid)) {
                    bankReconsilationMap.put("oldjeid", oldjeid);
                }
                HashMap<String, Object> globalParams = AccountingManager.getGlobalParamsJson(paramJobj);
                saveBankReconsilation(bankReconsilationMap, globalParams);
            }
            if (!bankReconsilationEntry && !StringUtil.isNullOrEmpty(oldjeid)) {
                bankReconsilationMap.put("oldjeid", oldjeid);
                bankReconsilationMap.put("companyId", companyid);
                deleteBankReconcilation(bankReconsilationMap);
            }
            
            if(extraPreferences.getLineLevelTermFlag()==1 && !isExpenseInv && !isExicseOpeningbalance) {// In Expense terms not presnt only use account
                Set<GoodsReceiptDetail> goodsReceiptDetailsSet = gr.getRows();
                for (GoodsReceiptDetail goodsReceiptDetail : goodsReceiptDetailsSet) {
                    if (goodsReceiptDetail.getInventory() != null && FinalTerm != null && ((List) FinalTerm.get(goodsReceiptDetail.getInventory()) != null)) {
                        List ll2 = (List) FinalTerm.get(goodsReceiptDetail.getInventory());
                        Iterator itr2 = ll2.iterator();
                        while (itr2.hasNext()) {
                            HashMap<String, Object> termMap = (HashMap<String, Object>) itr2.next();
                            termMap.put("goodsReceiptDetail", goodsReceiptDetail);
                            /**
                             * IF Un-Registered Vendor create PI then Need to check Terms have payableAccount or not
                             */
                            if(isURDPIDocument && rcmApplicable){
                                String payableaccountid = termMap.get("payableaccountid") == null ? "" : (String) termMap.get("payableaccountid");
                                if (StringUtil.isNullOrEmpty(payableaccountid)) {
                                    throw new AccountingException(messageSource.getMessage("acc.common.payableaccountnotmappedtoaccount", new Object[]{termMap.get("termname")}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                                }
                            }
                            accGoodsReceiptobj.saveInvoiceDetailTermMap(termMap);
                            /**
                             * Add Journal Entry Details data in mapping table if PI made by Un- Registered Vendor
                             */
                             if (Constants.isRCMPurchaseURD5KLimit && rcmApplicable && isURDPIDocument) {
                                JSONObject URDJsonObj = new JSONObject();
                                URDJsonObj.put(Constants.companyid, companyid);
                                URDJsonObj.put(AMOUNT, goodsReceiptDetail.getGoodsReceipt().getInvoiceAmountInBase());
                                URDJsonObj.put(BILLDATE, billDate.getTime());
                                URDJsonObj.put("goodsReceiptDetail", goodsReceiptDetail.getID());
                                String termID = termMap.get("term").toString();
                                URDJsonObj.put("term", termID);
                                double termamount = (Double) termMap.get("termamount");
                                URDJsonObj.put("termamount", termamount);
                                if(JEDetailsIDAgainstTerms!=null && !JEDetailsIDAgainstTerms.isEmpty()){
                                    Map<String, List<String>> JEMap = (Map<String, List<String>>)JEDetailsIDAgainstTerms.get(goodsReceiptDetail.getSrno());
                                    if(JEMap!=null){
                                        for (Map.Entry<String,List<String>> mapObject : JEMap.entrySet()) {
                                            if(termID.equalsIgnoreCase(mapObject.getKey())){
                                               List<String> JEList = (List<String>)mapObject.getValue();
                                               if(JEList!=null && !JEList.isEmpty()){
                                                    URDJsonObj.put("entryDetaildebit", JEList.get(0));
                                                    URDJsonObj.put("entryDetailcredit", JEList.get(1));
                                               }
                                            }
                                        }
                                    }
                                }
                                accGoodsReceiptobj.saveURDPurchaseInvoiceMapping(URDJsonObj);
                            }//
                        }
                    }
                }
            }
            /**
             * Check And Modify Journal Entry Details if cross the daily Limit or not on Bill Date 
             * For INDIA GST Purchase Invoice Edit case 
             * If Before Edit PI is RCM Applicable and then edit and removed RCM Applicable then 
             * Need to check 5k Limit for that day All invoice made by Un-Registered Vendor.
             */
            if((Constants.isRCMPurchaseURD5KLimit && (isPreviousRCMApplicable || (isURDPIDocument && rcmApplicable)))){
                paramJobj.put(COMPANYID, companyid);
                paramJobj.put(Constants.df, df);
                if (approvalStatusLevel == 11) {
                    paramJobj.put("invoiceAmount", gr.getInvoiceAmountInBase());
                }else{
                    paramJobj.put("invoiceAmount", -gr.getInvoiceAmountInBase());
                }
                paramJobj.put("GRNNumber", gr.getGoodsReceiptNumber());
                modifyURDVendorRCMPurchaseInvoiceJEDetails(paramJobj);
            }
             if(countryid == Constants.indian_country_id && extraPreferences.isExciseApplicable() && !isExpenseInv) {
                Set<GoodsReceiptDetail> goodsReceiptDetailsSet = gr.getRows();
                 synchronized (this) {
                     for (GoodsReceiptDetail goodsReceiptDetail : goodsReceiptDetailsSet) {
                         if (goodsReceiptDetail.getInventory() != null && ExciseDetails != null && ((JSONObject) ExciseDetails.get(goodsReceiptDetail.getInventory()) != null)) {
                             JSONObject ll2 = (JSONObject) ExciseDetails.get(goodsReceiptDetail.getInventory());
                             ll2.put("company", companyid);
                             ll2.put("goodsreceiptdetails", goodsReceiptDetail.getID());
                             if (ll2.has("ManuInvoiceDate") && !StringUtil.isNullOrEmpty(ll2.getString("ManuInvoiceDate"))) {
                                 ll2.put("ManuInvoiceDate", authHandler.getUserDateFormatterJson(paramJobj).parse(ll2.getString("ManuInvoiceDate")));
                             }
                             if (ll2.has("sequenceformat") && !StringUtil.isNullOrEmpty(ll2.getString("sequenceformat")) && (isCopy || !isEdit)) { // Execute this block only if its new invoice or Copy invoice. Do not execute while edit invoice
                                 String sequenceformatforDetails = ll2.getString("sequenceformat");
                                 Map<String, Object> seqNumberMap = accCompanyPreferencesObj.getNextAutoNumber_Modified(companyid, StaticValues.AUTONUM_DEALER_EXCISE_RG23D_NUMBER, sequenceformatforDetails, false, billDate);
                                 ll2.put("seqnumber", seqNumberMap.get(Constants.SEQNUMBER));
                                 ll2.put("datePreffixValue", seqNumberMap.get(Constants.DATEPREFIX));
                                 ll2.put("dateAfterPreffixValue",seqNumberMap.get(Constants.DATEAFTERPREFIX));
                                 ll2.put("dateSuffixValue", seqNumberMap.get(Constants.DATESUFFIX));
                                 ll2.put("RG23DEntryNumber", seqNumberMap.get(Constants.AUTO_ENTRYNUMBER));
                             }
                             if (ll2.has("RG23DEntryNumber") && ll2.get("RG23DEntryNumber") != null && !StringUtil.isNullOrEmpty(ll2.get("RG23DEntryNumber").toString())) {
                                 KwlReturnObject dealerExciseJson = accGoodsReceiptobj.saveUpdateDealerExciseDetails(ll2);
                                 List DEList = dealerExciseJson.getEntityList();
                                 if (!DEList.isEmpty()) {
                                     if (ll2.has("dealerExciseTerms") && !StringUtil.isNullOrEmpty(ll2.getString("dealerExciseTerms"))) {
                                         DealerExciseDetails dex = (DealerExciseDetails) DEList.get(0);
                                         JSONArray dealerExcise = new JSONArray(ll2.getString("dealerExciseTerms"));
                                         for(int j=0;j<dealerExcise.length();j++){
                                         JSONObject dealerJson = dealerExcise.getJSONObject(j);
                                         dealerJson.put("company", companyid);
                                         accGoodsReceiptobj.saveUpdateDealerExciseTermDetails(dealerJson, dex);
                                         }
                                     }
                                 }
                             }
                         }
                     }
                 }
            }
            
            
            if(countryid == Constants.indian_country_id && extraPreferences.isExciseApplicable()) {
                if(!StringUtil.isNullOrEmpty(paramJobj.optString("indiaExcise"))){
                    JSONObject jobj = new JSONObject(paramJobj.optString("indiaExcise"));
                    if (countryid == Constants.indian_country_id && extraPreferences.isExciseApplicable()) {
                        jobj.put("goodreceiptid", gr.getID());
                        exciseDetails = mapExciseDetails(gr,jobj);
                         if(isCopy){
                                if(exciseDetails.containsKey("id")){
                                    exciseDetails.remove("id");
                                }
                            }
                        accGoodsReceiptobj.saveExciseDetails(exciseDetails);
                    }
                }
            }
             
            //Save Product Manual Landed cost categoty details 
            HashMap manualLandedCostCategoryDetails = null;
            LandingCostCategory landedCostCategory = null;
            if (extraPreferences.isActivelandingcostofitem() && !StringUtil.isNullOrEmpty(landingCostCategory) && !landingCostCategory.equalsIgnoreCase("NOT APPLICABLE")) {
                KwlReturnObject landingResult = accountingHandlerDAOobj.getObject(LandingCostCategory.class.getName(), landingCostCategory);
                landedCostCategory = (landingResult != null && landingResult.getEntityList() != null && !landingResult.getEntityList().isEmpty()) ? (LandingCostCategory) landingResult.getEntityList().get(0) : null;
                //check if all the selected procurement invoices have a GRN linked & the products listed in them have the landed cost categories
                if(gr.isIsExpenseType()){
                    for (GoodsReceipt landingGoodsReceipt : gr.getLandedInvoice()) {
                        KwlReturnObject grnkwl = accGoodsReceiptobj.getGoodsReceiptLinkedWithPurchaseInvoice(landingGoodsReceipt.getID(), companyid);
                        List grndetail = grnkwl.getEntityList();
                        //if there is no GRN linked with a procurement invoice
                        if (grndetail != null && grndetail.isEmpty()) {
                            throw new AccountingException(messageSource.getMessage("acc.landingcost.nogrnlinked", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                        }
                        
                        KwlReturnObject grodResult = accGoodsReceiptobj.getGoodsReceiptDetailForLandingCategory(landingGoodsReceipt.getID(), landingCostCategory);
                        List groDetailList = grodResult.getEntityList();
                        //If the landed cost category does not match for any product in the invoice
                        if (groDetailList != null && groDetailList.isEmpty()) {
                            throw new AccountingException(messageSource.getMessage("acc.landingcost.nocategory", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                        }
                    }
                }
            }                   
            String manualLandedCostCategory =paramJobj.optString("manualLandedCostCategory");
            if (extraPreferences.isActivelandingcostofitem() && isExpenseInv && !StringUtil.isNullOrEmpty(manualLandedCostCategory)) {
                
                if(isEdit || isCopy){
                   accGoodsReceiptobj.deleteExpenseGridDetailsLanded(gr.getID(), companyid);
                }
               
                JSONArray jrr = new JSONArray( StringUtil.DecodeText(manualLandedCostCategory)); 
                for (int i = 0; i < jrr.length(); i++) {
                    JSONObject josnObj = new JSONObject(jrr.get(i).toString());
                    manualLandedCostCategoryDetails = manualLandedCostCategoryDetailsReturnMap(josnObj);
                    manualLandedCostCategoryDetails.put("expenseid", gr.getID());
                    manualLandedCostCategoryDetails.put("isEdit", isEdit);
                    if (landedCostCategory != null && LandingCostAllocationType.getByValue(landedCostCategory.getLcallocationid()) == LandingCostAllocationType.CUSTOMDUTY) {
                        manualLandedCostCategoryDetails.put("customDutyAllocationType", true);
                    } else {
                        manualLandedCostCategoryDetails.put("customDutyAllocationType", false);
                    }
                    KwlReturnObject lccResult = accGoodsReceiptobj.saveManualLandedCostCategoryDetails(manualLandedCostCategoryDetails);
                    LccManualWiseProductAmount lccManualWiseProductAmount =(LccManualWiseProductAmount) lccResult.getEntityList().get(0);
                    if (lccManualWiseProductAmount != null && landedInvoiceJE != null && preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD) {
                        /**
                         * Add journalentrydetail for landed invoice if
                         * perpetual inventory is activated at company level.
                         */
                        Product product = lccManualWiseProductAmount.getGrdetailid().getInventory().getProduct();
                        
                        if (product != null && product.getInventoryAccount() == null && !product.isAsset()) {
                            throw new AccountingException("Inventory Account is not mapped for product: " + product.getProductid());
                        }
                        if ((!product.isAsset() && product != null && product.getInventoryAccount() != null) || (product.isAsset() && product.getPurchaseAccount() != null)) {
                            JSONObject ljedjson = new JSONObject();
                            ljedjson.put(SRNO, landedInvoiceJEDetails.size() + 1);
                            ljedjson.put(COMPANYID, company.getCompanyID());
                            if (landedCostCategory != null && LandingCostAllocationType.getByValue(landedCostCategory.getLcallocationid()) == LandingCostAllocationType.CUSTOMDUTY) {
//                                ljedjson.put(AMOUNT, lccManualWiseProductAmount.getCustomdutyandothercharges()+ lccManualWiseProductAmount.getIgstamount());
                                ljedjson.put(AMOUNT, lccManualWiseProductAmount.getCustomdutyandothercharges());
                            } else {
                                ljedjson.put(AMOUNT, lccManualWiseProductAmount.getAmount());
                            }
                            if (product.isAsset()) {
                                ljedjson.put(ACCOUNTID, product.getPurchaseAccount().getID());
                            } else {
                                ljedjson.put(ACCOUNTID, product.getInventoryAccount().getID());
                            }
                            ljedjson.put(DEBIT, true);
                            ljedjson.put(JEID, landedInvoiceJEId);
                            KwlReturnObject ljedresult = accJournalEntryobj.addJournalEntryDetails(ljedjson);
                            JournalEntryDetail ljed = (JournalEntryDetail) ljedresult.getEntityList().get(0);
                            landedInvoiceJEDetails.add(ljed);

                            JSONObject landingCostJSON = new JSONObject();
                            landingCostJSON.put(LandingCostDetailMapping.LANDING_CATEGORY_ID, landingCostCategory);
                            landingCostJSON.put(LandingCostDetailMapping.INVENTORY_JED, ljed.getID());
                            landingCostJSON.put(LandingCostDetailMapping.GOODSRECEIPT_DETAIL_ID, lccManualWiseProductAmount.getGrdetailid().getID());
                            landingCostJSON.put(LandingCostDetailMapping.EXPENSE_INVOICE_ID, lccManualWiseProductAmount.getExpenseInvoiceid().getID());
                            landingCostJSON.put(LandingCostDetailMapping.LANDING_COST, lccManualWiseProductAmount.getAmount());
                            accGoodsReceiptobj.saveLandingCostDetailMapping(landingCostJSON);
                        }
                    }   
                }
            }
            if (extraPreferences.isActivelandingcostofitem() && !StringUtil.isNullOrEmpty(landingCostCategory) && !landingCostCategory.equalsIgnoreCase("NOT APPLICABLE") && preferences.getInventoryValuationType() == Constants.PERPETUAL_VALUATION_METHOD && gr.getLandedInvoice() != null && !gr.getLandedInvoice().isEmpty()) {
                /**
                 * Add mapping details in LandingCostDetailMapping if perpetual
                 * inventory is activated for company. Mapping includes
                 * GoodsReceiptDetail (Purchase Invoice which is selected in
                 * procurement number) with the GoodsReceipt(Expense Invoice).
                 */
                /**
                 * Malaysian or Singapore company flag.
                 */
                boolean isMalaysiaOrSingaporeCompany = false;
                String countrycode = extraPreferences.getCompany().getCountry().getID();
                if(countrycode.equalsIgnoreCase(String.valueOf(Constants.malaysian_country_id)) || countrycode.equalsIgnoreCase(String.valueOf(Constants.SINGAPOREID)) ){
                    isMalaysiaOrSingaporeCompany = true;
                }
                KWLCurrency globalCurrency = company.getCurrency();
                if (landedCostCategory != null && LandingCostAllocationType.getByValue(landedCostCategory.getLcallocationid()) != LandingCostAllocationType.MANUAL && LandingCostAllocationType.getByValue(landedCostCategory.getLcallocationid()) != LandingCostAllocationType.CUSTOMDUTY) {
                    double totalWeight = 0.0, totalQuantity = 0.0, totalCost = 0.0;
                    double totallandedcostinbase = 0.0;
                    double totalinvoicecostinbase = 0.0;
                    JournalEntryDetail referencejed = null;

                    for (GoodsReceipt landingGoodsReceipt : gr.getLandedInvoice()) {
                        KwlReturnObject grodResult = accGoodsReceiptobj.getGoodsReceiptDetailForLandingCategory(landingGoodsReceipt.getID(), landingCostCategory);
                        List groDetailList = grodResult.getEntityList();
                        if (groDetailList != null && !groDetailList.isEmpty()) {
                            for (Object object : groDetailList) {
                                Object[] objArr = (Object[]) object;
                                double rate = (Double) objArr[1];
                                double quantity = (Double) objArr[2];
                                double productWeight = (Double) objArr[3];
//                                KwlReturnObject resultBR = accCurrencyDAOobj.getCurrencyToBaseAmount(map, rate, landingGoodsReceipt.getCurrency().getCurrencyID(), landingGoodsReceipt.getJournalEntry().getEntryDate(), landingGoodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                KwlReturnObject resultBR = accCurrencyDAOobj.getCurrencyToBaseAmount(map, rate, landingGoodsReceipt.getCurrency().getCurrencyID(), landingGoodsReceipt.getCreationDate(), landingGoodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                double baseRate = authHandler.roundUnitPrice((Double) resultBR.getEntityList().get(0), companyid);
                                totalWeight += (quantity * productWeight);
                                totalQuantity += quantity;
                                totalCost +=(quantity * baseRate);
                            }
                        }
                    }
                    double landingCosttax = 0.0;
                    double landingCosttermamount = 0.0;
                    //to calculate row level tax in the invoice and reduce tax amount from JE 2 of landed cost 
                    if (gr.getTax() == null && totals != null) {//line level tax  reduce only if it is not included in landed cost
                        if (isMalaysiaOrSingaporeCompany) {
                            landingCosttax = (Double) (totals.length > 3 ? totals[3] : 0.0);
                        } else {
                            landingCosttax = (Double) (totals.length > 2 ? totals[2] : 0.0);
                        }
                    }
                    if (gr.getTax() != null) { //global level tax reduce only if it is not included in landed cost
                        if (!isMalaysiaOrSingaporeCompany || !gr.getTax().isInputCredit()) {
                            landingCosttax += gr.getTaxamount();
                        } else if ((isMalaysiaOrSingaporeCompany && gr.getTax().isInputCredit())) { //ERM-971 separate tax account entry in landed cost
                            JSONObject ljedjson = new JSONObject();
                            ljedjson.put(SRNO, landedInvoiceJEDetails.size() + 1);
                            ljedjson.put(COMPANYID, company.getCompanyID());
                            ljedjson.put(AMOUNT, gr.getTaxamount());
                            ljedjson.put(ACCOUNTID, gr.getTax().getAccount().getID());
                            ljedjson.put(DEBIT, false);
                            ljedjson.put(JEID, landedInvoiceJEId);
                            KwlReturnObject ljedresult = accJournalEntryobj.addJournalEntryDetails(ljedjson);
                            JournalEntryDetail ljed = (JournalEntryDetail) ljedresult.getEntityList().get(0);
                            landedInvoiceJEDetails.add(ljed);
                        }
                    }
                    for (GoodsReceipt landingGoodsReceipt : gr.getLandedInvoice()) {                        
                        KwlReturnObject grodResult = accGoodsReceiptobj.getGoodsReceiptDetailForLandingCategory(landingGoodsReceipt.getID(), landingCostCategory);
                        List groDetailList = grodResult.getEntityList();
                        String procurementCurrency = landingGoodsReceipt.getCurrency()!=null ? landingGoodsReceipt.getCurrency().getCurrencyID() : "";
                        
                        if (groDetailList != null && !groDetailList.isEmpty()) {
                            for (Object object : groDetailList) {
                                Object[] objArr = (Object[]) object;
                                String groID = (String) (objArr[0]!=null?objArr[0]:""); 
                                String productId = (String) (objArr[4]!=null?objArr[4]:"");
                                double landingCost = 0;
                                KwlReturnObject productResult = accountingHandlerDAOobj.getObject(Product.class.getName(), productId);
                                Product product = (productResult.getEntityList() != null && !productResult.getEntityList().isEmpty()) ? (Product) productResult.getEntityList().get(0) : null;
                                if (product != null) {
                                    if (product.getInventoryAccount() == null) {
                                        throw new AccountingException("Inventory Account is not mapped for product: " + product.getProductid());
                                    }
                                    double rate = (Double) objArr[1];
                                    double quantity = (Double) objArr[2];
                                    double productWeight = (Double) objArr[3];
                                    double baseRate = rate;
                                    if(globalCurrency!=null && !globalCurrency.getCurrencyID().equals(procurementCurrency)) {
                                        KwlReturnObject ruternBR = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rate, procurementCurrency, landingGoodsReceipt.getCreationDate(), landingGoodsReceipt.getJournalEntry().getExternalCurrencyRate());
                                        baseRate = authHandler.roundUnitPrice((Double) ruternBR.getEntityList().get(0), companyid);
                                    }
                                    if((LandingCostAllocationType.getByValue(landedCostCategory.getLcallocationid())==LandingCostAllocationType.WEIGHT) && productWeight==0 ){
                                       throw new AccountingException(messageSource.getMessage("acc.landingcostcategory.weightmsg", new Object[]{"<b>"+product.getProductid()+"</b>"}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                                    }
                                    double totalvalue = authHandler.roundUnitPrice(quantity * baseRate, companyid);
                                    landingCosttermamount = !extraPreferences.islandedcosttermJE() ? (termTotalAmount > 0 ? 0 : termTotalAmount): 0;

                                    switch (LandingCostAllocationType.getByValue(landedCostCategory.getLcallocationid())) {
                                        case QUANTITY:
                                        case VALUE:
                                        case WEIGHT:
                                            Map<String, Double> allcactionMthdData = new HashMap<>();
                                            //reducing term/tax amount as tax is based on input credit flag for malaysia/singapore and term is directly reduced from invoice cost
                                            allcactionMthdData.put("totLandedCost", gr.getInvoiceAmount() - landingCosttax - landingCosttermamount);
                                            allcactionMthdData.put("noEligiableItem", totalQuantity);
                                            allcactionMthdData.put("lineItemQty", quantity);
                                            allcactionMthdData.put("valueOfItem", totalvalue);
                                            allcactionMthdData.put("eligiableItemCost", totalCost);
                                            allcactionMthdData.put("eligiableItemWgt", totalWeight);
                                            allcactionMthdData.put("itemWght", (productWeight * quantity));
                                            allcactionMthdData.put("manualProductAmount", 0.0);
                                            landingCost = LandingCostAllocationType.getTotalLanddedCost(landedCostCategory.getLcallocationid(), allcactionMthdData);
                                            break;
                                        case CUSTOMDUTY:
                                            break;
                                        case MANUAL:
                                            /**
                                             * Handled separately while saving
                                             * LccManualWiseProductAmount.
                                             */
                                            break;
                                    }
                                    /**
                                     * Add JournalEntryDetail against Product's
                                     * Inventory Account.
                                     */
                                    double landingCostInTransactionCurrency = landingCost;
//                                    if (globalCurrency != null && !globalCurrency.getCurrencyID().equals(currencyid)) {
//                                        /**
//                                         * If transaction currency is not equal to base currency then convert landingCost into transactionCurrency.
//                                         */
////                                        KwlReturnObject ruternBR = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, landingCost, currencyid, landingGoodsReceipt.getJournalEntry().getEntryDate(), landingGoodsReceipt.getJournalEntry().getExternalCurrencyRate());
//                                        KwlReturnObject ruternBR = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, landingCost, currencyid, landingGoodsReceipt.getCreationDate(), landingGoodsReceipt.getJournalEntry().getExternalCurrencyRate());
//                                        landingCostInTransactionCurrency = authHandler.roundUnitPrice((Double) ruternBR.getEntityList().get(0), companyid);
//                                    }
                                    JSONObject ljedjson = new JSONObject();
                                    ljedjson.put(SRNO, landedInvoiceJEDetails.size() + 1);
                                    ljedjson.put(COMPANYID, company.getCompanyID());
                                    ljedjson.put(AMOUNT, landingCostInTransactionCurrency);
                                    ljedjson.put(ACCOUNTID, product.getInventoryAccount().getID());
                                    ljedjson.put(DEBIT, true);
                                    ljedjson.put(JEID, landedInvoiceJEId);
                                    KwlReturnObject ljedresult = accJournalEntryobj.addJournalEntryDetails(ljedjson);
                                    JournalEntryDetail ljed = (JournalEntryDetail) ljedresult.getEntityList().get(0);
                                    landedInvoiceJEDetails.add(ljed);
                                    referencejed = ljed; //keeping the last debit reference for landing cost precision difference case 

                                    /**
                                     * Save GoodsReceiptDetail(Normal Purchase
                                     * Invoice) and GoodsReceipt(Expense
                                     * Invoice) in case of landing cost
                                     * category.
                                     */
                                    JSONObject landingCostJSON = new JSONObject();
                                    landingCostJSON.put(LandingCostDetailMapping.LANDING_CATEGORY_ID, landingCostCategory);
                                    landingCostJSON.put(LandingCostDetailMapping.INVENTORY_JED, ljed.getID());
                                    landingCostJSON.put(LandingCostDetailMapping.GOODSRECEIPT_DETAIL_ID, groID);
                                    landingCostJSON.put(LandingCostDetailMapping.EXPENSE_INVOICE_ID, gr.getID());
                                    landingCostJSON.put(LandingCostDetailMapping.LANDING_COST, landingCostInTransactionCurrency);
                                    accGoodsReceiptobj.saveLandingCostDetailMapping(landingCostJSON);
                                }
                            }
                        }
                    }
                    /**
                     * ERP-31096 Calculating precision difference in landed cost
                     * JE credit and debit amount and passing flag based on that.
                     */
                    double transamount = 0d; //amount in transaction currency

                    for (JournalEntryDetail ljedobj : landedInvoiceJEDetails) {
                        bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, ljedobj.getAmount(), gr.getJournalEntry().getCurrency() == null ? currencyid : gr.getJournalEntry().getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());

                        if (ljedobj.isDebit()) {
                            transamount += ljedobj.getAmount();
                            totallandedcostinbase += authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                        } else {
                            transamount -= ljedobj.getAmount();
                            totalinvoicecostinbase += authHandler.round((Double) bAmt.getEntityList().get(0), companyid);
                        }
                    }
                    /**
                     * SDP-15928 - In landed cost distribution there can be precision loss for large number of products 
                     * hence adjusting the precision loss into the final product of the PI to allow saving the Expense Invoice
                     * getting the jedetails reference of the final product and if difference occurs then adjusting it into this jed.
                     */
                    if ((transamount != 0.0 && transamount <= 0.1) || Math.abs(totallandedcostinbase - totalinvoicecostinbase) > 0.01 && referencejed!=null && referencejed.isDebit()) {
                        landedInvoiceJEDetails.remove(referencejed);
                        double basecurrencydifference = Math.abs(totallandedcostinbase - totalinvoicecostinbase);
                        bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, basecurrencydifference, gr.getJournalEntry().getCurrency() == null ? currencyid : gr.getJournalEntry().getCurrency().getCurrencyID(), gr.getJournalEntry().getEntryDate(), gr.getJournalEntry().getExternalCurrencyRate());
                        double transdifference = (Double) bAmt.getEntityList().get(0);  
                        referencejed.setAmount(referencejed.getAmount() + transdifference);
                        landedInvoiceJEDetails.add(referencejed);
                    }
//                    if (Math.abs(transamount) >= 0.000001 && Math.abs(totallandedcostinbase - totalinvoicecostinbase) > 0.01 && (transamount < 0.10 && Math.abs(totallandedcostinbase - totalinvoicecostinbase) < 0.10)) {
//                        boolean isprecisiondiff = true;
//                        landedJEMap.put(Constants.isPrecisiongDiffInLandedCost, isprecisiondiff);
//                    }
                }
            }
            if (landedInvoiceJE != null && !landedInvoiceJEDetails.isEmpty()) {
                if (approvalStatusLevel == 11) {
                    landedJEMap.put("pendingapproval", 0);
                } else {
                    landedJEMap.put("pendingapproval", 1);
                }
                landedJEMap.put("jeid", landedInvoiceJE.getID());
                landedJEMap.put("companyid", companyid);
                landedJEMap.put("transactionId", gr.getID());
                landedJEMap.put(JEDETAILS, landedInvoiceJEDetails);
                landedJEMap.put("transactionModuleid", isFixedAsset ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : isConsignment ? Constants.Acc_Consignment_GoodsReceipt_ModuleId : inCash ? Constants.Acc_Cash_Purchase_ModuleId : Constants.Acc_Vendor_Invoice_ModuleId);
                KwlReturnObject ljeresult = accJournalEntryobj.saveJournalEntry(landedJEMap);
                landedInvoiceJE = (JournalEntry) ljeresult.getEntityList().get(0);
                landedInvoiceJE.setDetails(landedInvoiceJEDetails);
            }
            String linkedDocuments="";
            if (!StringUtil.isNullOrEmpty(paramJobj.optString(DETAIL)) || !StringUtil.isNullOrEmpty(paramJobj.optString(EXPENSEDETAIL))) { //**For GR or Expense grid
                String linkMode = paramJobj.optString("fromLinkCombo"); //When adding Purchase order link for vendor invoice update link flag(1) in purchase order.
                String[] linkNumbers = paramJobj.optString("linkNumber").split(",");
                if (!StringUtil.isNullOrEmpty(linkMode) && linkNumbers.length > 0) {
                    if (linkMode.equalsIgnoreCase("Purchase Order") || linkMode.equalsIgnoreCase("Job Work Out Order")) {
                        for (int i = 0; i < linkNumbers.length; i++) {
                            if (!StringUtil.isNullOrEmpty(linkNumbers[i])) {
                                updatePOisOpenAndLinkingWithVI(linkNumbers[i]);
                                
                                /*
                                 * Saving Linking information in Purchase Order
                                 */
                                HashMap<String, Object> requestParamsLinking = new HashMap<String, Object>();
                                requestParamsLinking.put("linkeddocid", gr.getID());
                                requestParamsLinking.put("docid", linkNumbers[i]);
                                requestParamsLinking.put("moduleid", Constants.Acc_Vendor_Invoice_ModuleId);
                                 requestParamsLinking.put("linkeddocno", entryNumber);
                                requestParamsLinking.put("sourceflag", 0);
                                result = accPurchaseOrderobj.savePOLinking(requestParamsLinking);

                                /*
                                 * Saving Linking information in Vendor Invoice
                                 */
                                requestParamsLinking.put("linkeddocid", linkNumbers[i]);
                                requestParamsLinking.put("docid", gr.getID());
                                requestParamsLinking.put("moduleid", Constants.Acc_Purchase_Order_ModuleId);
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(PurchaseOrder.class.getName(), linkNumbers[i]);
                                PurchaseOrder purchaseorder = (PurchaseOrder) rdresult.getEntityList().get(0);
                                String purchaseorderno = purchaseorder.getPurchaseOrderNumber();
                                requestParamsLinking.put("linkeddocno", purchaseorderno);
                                requestParamsLinking.put("sourceflag", 1);
                                result = accGoodsReceiptobj.saveVILinking(requestParamsLinking);
                                linkedDocuments +=purchaseorderno+ " ,";
                                
                                /*---If dropship PO->PI then close PO manually--- */
                                if (isdropshipchecked && purchaseorder != null) {

                                    purchaseorder.setIsPOClosed(true);
                                }
                                
                            }
                        }
                        if(linkedDocuments.length()>0){
                        linkedDocuments = linkedDocuments.substring(0, linkedDocuments.length() - 1);
                        }
                    } else if (linkMode.equalsIgnoreCase("Vendor Quotation")) { // Update link flag 1 of Vendor Quotation in case if link with Vendor Invoice
                        for (int i = 0; i < linkNumbers.length; i++) {
                            if (!StringUtil.isNullOrEmpty(linkNumbers[i])) {
                                updateVQisOpenAndLinking(linkNumbers[i]);
                                
                                /*
                                 * Saving Linking information in Vendor Quotation
                                 */
                                HashMap<String, Object> requestParamsLinking = new HashMap<String, Object>();
                                requestParamsLinking.put("linkeddocid", gr.getID());
                                requestParamsLinking.put("docid", linkNumbers[i]);
                                requestParamsLinking.put("moduleid", Constants.Acc_Vendor_Invoice_ModuleId);
                                requestParamsLinking.put("linkeddocno", entryNumber);
                                requestParamsLinking.put("sourceflag", 0);
                                result = accPurchaseOrderobj.saveVQLinking(requestParamsLinking);


                                /*
                                 * Saving Linking information in Vendor Invoice
                                 */
                                requestParamsLinking.put("linkeddocid", linkNumbers[i]);
                                requestParamsLinking.put("docid", gr.getID());
                                requestParamsLinking.put("sourceflag", 1);
                                requestParamsLinking.put("moduleid", Constants.Acc_Vendor_Quotation_ModuleId);
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(VendorQuotation.class.getName(), linkNumbers[i]);
                                VendorQuotation quotation = (VendorQuotation) rdresult.getEntityList().get(0);
                                String quotationno = quotation.getQuotationNumber();
                                requestParamsLinking.put("linkeddocno", quotationno);
                                result = accGoodsReceiptobj.saveVILinking(requestParamsLinking);
                                  linkedDocuments +=quotationno+ " ,";
                            }
                        }
                         if (linkedDocuments.length() > 0) {
                         linkedDocuments = linkedDocuments.substring(0, linkedDocuments.length() - 1);
                        }
                    } else if (linkMode.equalsIgnoreCase("Goods Receipt")) {
                        for (int i = 0; i < linkNumbers.length; i++) {
                            if (!StringUtil.isNullOrEmpty(linkNumbers[i])) {
                                updateGRisOpenAndLinkingWithVI(linkNumbers[i]);
                                
                                  /* Saving Linking information of Vendor Invoice while linking with Goods Receipt*/
                                HashMap<String, Object> requestParamsLinking = new HashMap<String, Object>();
                                requestParamsLinking.put("linkeddocid", gr.getID());
                                requestParamsLinking.put("docid", linkNumbers[i]);
                                requestParamsLinking.put("moduleid", Constants.Acc_Vendor_Invoice_ModuleId);
                                requestParamsLinking.put("linkeddocno", entryNumber);
                                requestParamsLinking.put("sourceflag", 0);
                                result = accGoodsReceiptobj.saveGRLinking(requestParamsLinking);
                                
                                
                                requestParamsLinking.put("linkeddocid", linkNumbers[i]);
                                requestParamsLinking.put("docid", gr.getID());
                                requestParamsLinking.put("moduleid", Constants.Acc_Goods_Receipt_ModuleId);
                                KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(GoodsReceiptOrder.class.getName(), linkNumbers[i]);
                                GoodsReceiptOrder goodsreceiptorder = (GoodsReceiptOrder) rdresult.getEntityList().get(0);
                                String goodsreceiptorderno = goodsreceiptorder.getGoodsReceiptOrderNumber();
                                requestParamsLinking.put("linkeddocno", goodsreceiptorderno);
                                requestParamsLinking.put("sourceflag", 1);
                                result = accGoodsReceiptobj.saveVILinking(requestParamsLinking);
                                linkedDocuments +=goodsreceiptorderno+ " ,";
                            }
                        }
                        if(linkedDocuments.length()>0){
                        linkedDocuments = linkedDocuments.substring(0, linkedDocuments.length() - 1);
                    }
                }
            }
                            }   
                    
//            if (!StringUtil.isNullOrEmpty(request.getParameter(DETAIL))) { //**For product grid
//                String linkMode = request.getParameter("fromLinkCombo"); //When adding  Goods Receipt Order link for Goods Receipt also Adding Goods Receipt link for Goods Receipt order
//                if (!StringUtil.isNullOrEmpty(linkMode)) {
//                    if (linkMode.equalsIgnoreCase("Goods Receipt")) { //Goods Receipt Order
//                        Set<GoodsReceiptDetail> details = gr.getRows();
//                        for (GoodsReceiptDetail goodsReceiptDetail : details) {
//                            if(goodsReceiptDetail.getGoodsReceiptOrderDetails()!=null){
//                                HashMap hMap = new HashMap();
//                                hMap.put("goodsReceiptDetail", goodsReceiptDetail);                            
//                                accGoodsReceiptobj.updateGoodsReceiptOrderDetails(hMap);
//                            }                            
//                        }
//                    }
//                }
//            }
//                                              //Building new array
            if (isEdit == true) {
                int moduleid = Constants.Acc_Vendor_Invoice_ModuleId;
                if (inCash) {
                    moduleid = Constants.Acc_Cash_Purchase_ModuleId;
                }
                auditMessage = AccountingManager.BuildAuditTrialMessage(greceipthm, oldgreceipt, moduleid, newAuditKey);
            }
             // Excise Opening Balance check from Vendor Master ERP-27108 : to hide JE POST           
             if (!isExicseOpeningbalance) {
                //Insert new entries again in optimized table.
                accJournalEntryobj.saveAccountJEs_optimized(jeid);
            }
            String billno = gr.getGoodsReceiptNumber();
            id = gr.getID();
            ll.add(new String[]{id, oldjeid, oldLandedInvoiceJEId});
            ll.add(discountArr);
            ll.add((pendingApprovalFlag == 1) ? "Pending Approval" : "Approved");
            ll.add(billno);
            ll.add(totalInvAmount);
            ll.add(journalEntry !=null? journalEntry.getEntryNumber() :"");
            ll.add(isExpenseInv);   //Flag for to export Expense Invoices
            ll.add(auditMessage);
            ll.add(gr);
            ll.add(mailParams);
            ll.add(linkedDocuments);
            ll.add(unlinkMessage);
            ll.add(FinalTerm);
          
            /*-----Added parameter is relevant while Editing pending document-------*/
            ll.add(roleName);
            ll.add(isAuthorityToApprove);
            ll.add(sendPendingDocumentsToNextLevel);
            ll.add(JENumber);
            ll.add(JEMsg);
            ll.add(levelOnWhichDocumentIsApproved);

           // ll.add(grvApproveMap);
            //SDP-12509 - Putting grdetail id in InvoiceTerms Array
            InvoiceTerms = paramJobj.optString("invoicetermsmap");
            if (gr.getRows() != null) {
                Set<GoodsReceiptDetail> details = gr.getRows();
                JSONArray termsArrRemove = new JSONArray(InvoiceTerms);
                JSONArray termsArrAdd = new JSONArray();
                for (int cnt = 0; cnt < termsArrRemove.length(); cnt++) {
                    JSONObject temp = termsArrRemove.getJSONObject(cnt);
                    boolean added = false;
                    for (GoodsReceiptDetail grdetail : details) {
                        if (grDetailTermMap.containsKey(grdetail.getSrno()) && grDetailTermMap.get(grdetail.getSrno()) != null) {
                            List termids = grDetailTermMap.get(grdetail.getSrno());
                            for (Object termid1 : termids) {
                                if (temp.optString("id").equals(termid1)) {
                                    temp.put("grdetail", grdetail.getID());
                                    termsArrAdd.put(temp);
                                    added = true;     
                                }
                            }
                        }
                    }
                    if(!added){
                    termsArrAdd.put(temp);
                    }
                }
                InvoiceTerms = termsArrAdd.toString();
            }
            /*
             * If invoice terms applied then add mapping in against invoice
             */
            
            if (StringUtil.isAsciiString(InvoiceTerms)) {
                boolean isGR = false;
                mapInvoiceTerms(InvoiceTerms, id, paramJobj.optString(Constants.useridKey), isGR);
               }
//            if (pendingApprovalFlag == 1 && preferences.isSendapprovalmail()) { //this for send approval email
//                String[] emails = {};
//                String invoiceNumber = gr.getGoodsReceiptNumber();
//                String userName = sessionHandlerImpl.getUserFullName(request);
//                String moduleName = "Vendor Invoice";
//                emails = accountingHandlerDAOobj.getApprovalUserList(request, moduleName, 1);
//                if (!StringUtil.isNullOrEmpty(preferences.getApprovalEmails())) {
//                    String[] compPrefMailIds = preferences.getApprovalEmails().split(";");
//                    emails = AccountingManager.getMergedMailIds(emails, compPrefMailIds);
//                }
//                String fromEmailId = Constants.ADMIN_EMAILID;
//                accountingHandlerDAOobj.sendApprovalEmails(invoiceNumber, userName, emails, fromEmailId, moduleName);
//            }

            //Save record as template
            if (!StringUtil.isNullOrEmpty(paramJobj.optString("templatename")) && (istemplate == 1 || istemplate == 2)) {
                HashMap<String, Object> hashMap = new HashMap<String, Object>();
                String moduletemplateid = paramJobj.optString("moduletemplateid");
                hashMap.put("templatename", paramJobj.optString("templatename"));
                if (!StringUtil.isNullOrEmpty(moduletemplateid)) {
                    hashMap.put("moduletemplateid", moduletemplateid);
                }
                if (inCash) {
                    hashMap.put("moduleid", Constants.Acc_Cash_Purchase_ModuleId);
                } else {
                    hashMap.put("moduleid", Constants.Acc_Vendor_Invoice_ModuleId);
                }
                /*
                 *  Flags for populating customer info and product info from template
                 */
                if (!StringUtil.isNullOrEmpty(paramJobj.optString("populateproducttemplate")) && paramJobj.optString("populateproducttemplate").equalsIgnoreCase("on")) {
                    hashMap.put("populateproducttemplate", (!StringUtil.isNullOrEmpty(paramJobj.optString("populateproducttemplate"))) ? paramJobj.optString("populateproducttemplate").equalsIgnoreCase("on") : true);
                } else {
                    hashMap.put("populateproducttemplate", false);
                }

                if (!StringUtil.isNullOrEmpty(paramJobj.optString("populatecustomertemplate")) && paramJobj.optString("populatecustomertemplate").equalsIgnoreCase("on")) {
                    hashMap.put("populatecustomertemplate", (!StringUtil.isNullOrEmpty(paramJobj.optString("populatecustomertemplate"))) ? paramJobj.optString("populatecustomertemplate").equalsIgnoreCase("on") : true);
                } else {
                    hashMap.put("populatecustomertemplate", false);
                }
                if (!StringUtil.isNullOrEmpty(paramJobj.optString("autogenerateDO")) && paramJobj.optString("autogenerateDO").equalsIgnoreCase("on")) {
                    hashMap.put("populateautodointemp", (!StringUtil.isNullOrEmpty(paramJobj.optString("autogenerateDO"))) ? paramJobj.optString("autogenerateDO").equalsIgnoreCase("on") : true);
                } else {
                    hashMap.put("populateautodointemp", false);
                }
                hashMap.put("modulerecordid", gr.getID());
                hashMap.put("companyid", companyid);
                //hashMap.put("companyunitid", request.getParameter("companyunitid"));
                if(!StringUtil.isNullOrEmpty(paramJobj.optString("companyunitid"))){
                    hashMap.put("companyunitid", paramJobj.optString("companyunitid")); // Added Unit ID if it is present in request
                }
                 /**
                 * checks the template name is already exist in create and edit template case
                 */
                result = accountingHandlerDAOobj.getModuleTemplateForTemplatename(hashMap);
                nocount = result.getRecordTotalCount();
                if (nocount > 0) {
                    throw new AccountingException(messageSource.getMessage("acc.tmp.templateNameAlreadyExists", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                }

                accountingHandlerDAOobj.saveModuleTemplate(hashMap);
            }

            if (preferences.isInventoryAccountingIntegration() && (!preferences.isWithInvUpdate() || inCash)) {

                String action = "17";
                boolean isDirectUpdateInvFlag = false;
                if (preferences.isUpdateInvLevel()) {
                    isDirectUpdateInvFlag = true;
                    action = "19";//Direct Inventory Update action
                }

                JSONArray productArray = new JSONArray();
                if (!StringUtil.isNullOrEmpty(paramJobj.optString(DETAIL))) {
                    JSONArray jArr = new JSONArray(paramJobj.optString(DETAIL));
                    for (int i = 0; i < jArr.length(); i++) {
                        JSONObject jobj = jArr.getJSONObject(i);
                        KwlReturnObject proresult = accountingHandlerDAOobj.getObject(Product.class.getName(), jobj.getString("productid"));
                        Product product = (Product) proresult.getEntityList().get(0);

                        JSONObject productObject = new JSONObject();
                        if (!StringUtil.isNullOrEmpty(grid)) {
                            if (jobj.optDouble("changedQuantity", 0) != 0) {
                                productObject.put("itemUomId", jobj.getString("uomid"));
                                productObject.put("itemBaseUomRate", jobj.getDouble("baseuomrate"));
                                productObject.put("itemQuantity", jobj.getDouble("changedQuantity"));
                                productObject.put("quantity", jobj.getDouble("changedQuantity"));
                                //productObject.put("itemQuantity", jobj.getDouble("changedQuantity"));                                
                                productObject.put("itemCode", product.getProductid());
                                if (isDirectUpdateInvFlag) {
                                    productObject.put("storeid", jobj.optString("invstore"));
                                    productObject.put("locationid", jobj.optString("invlocation"));
                                    productObject.put("rate", jobj.optDouble("rate", 0));
                                }
                                productArray.put(productObject);
                            }
                        } else {
                            productObject.put("itemUomId", jobj.getString("uomid"));
                            productObject.put("itemBaseUomRate", jobj.getDouble("baseuomrate"));
                            productObject.put("itemQuantity", jobj.getDouble("baseuomquantity"));
                            productObject.put("quantity", jobj.getDouble("quantity"));
                            //productObject.put("itemQuantity", jobj.getDouble("quantity"));                            
                            productObject.put("itemCode", product.getProductid());
                            if (isDirectUpdateInvFlag) {
                                productObject.put("storeid", jobj.optString("invstore"));
                                productObject.put("locationid", jobj.optString("invlocation"));
                                productObject.put("rate", jobj.optDouble("rate", 0));
                            }
                            productArray.put(productObject);
                        }
                    }

                    if (!StringUtil.isNullOrEmpty(grid)) {
                        if (!StringUtil.isNullOrEmpty(paramJobj.optString("deletedData"))) {
                            JSONArray deleteArr = new JSONArray(paramJobj.optString("deletedData"));
                            for (int i = 0; i < deleteArr.length(); i++) {
                                JSONObject jobj = deleteArr.getJSONObject(i);

                                KwlReturnObject proresult = accountingHandlerDAOobj.getObject(Product.class.getName(), jobj.getString("productid"));
                                Product product = (Product) proresult.getEntityList().get(0);

                                JSONObject productObject = new JSONObject();
                                productObject.put("itemUomId", jobj.getString("productuomid"));
                                productObject.put("itemBaseUomRate", jobj.getDouble("productbaseuomrate"));
                                productObject.put("itemQuantity", jobj.getDouble("productbaseuomquantity") * (-1));
                                productObject.put("quantity", jobj.getDouble("productquantity") * (-1));
                                //productObject.put("itemQuantity", jobj.getDouble("productquantity")*(-1));
                                productObject.put("itemCode", product.getProductid());
                                if (isDirectUpdateInvFlag) {
                                    productObject.put("storeid", jobj.optString("productinvstore"));
                                    productObject.put("locationid", jobj.optString("productinvlocation"));
                                    productObject.put("rate", jobj.optDouble("productrate", 0));
                                }
                                productArray.put(productObject);
                            }
                        }
                    }

                    if (productArray.length() > 0) {

                        String sendDateFormat = "yyyy-MM-dd";
                        DateFormat dateformat = new SimpleDateFormat(sendDateFormat);
                        Date date = df.parse(paramJobj.optString(BILLDATE));
                        String stringDate = dateformat.format(date);

                        JSONObject jSONObject = new JSONObject();
                        jSONObject.put("deliveryDate", stringDate);
                        jSONObject.put("dateFormat", sendDateFormat);
                        jSONObject.put("details", productArray);
                        jSONObject.put("orderNumber", entryNumber);
                        jSONObject.put("purchasing", true);

                        String url = paramJobj.optString(Constants.inventoryURL);
                        CommonFnController cfc = new CommonFnController();
                        cfc.updateInventoryLevel(paramJobj, jSONObject, url, action);
                    }
                }
            }
            
//            ExtraCompanyPreferences extraCompanyPreferences = null;
//            KwlReturnObject extraprefresult = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), sessionHandlerImpl.getCompanyid(request));
//            extraCompanyPreferences = extraprefresult != null ? (ExtraCompanyPreferences) extraprefresult.getEntityList().get(0) : null;
            String moduleName =Constants. moduleID_NameMap.get(Constants.Acc_Vendor_Invoice_ModuleId);
           
            if(isFixedAsset){
                moduleName = Constants.ASSET_PURCHASE_INVOICE;
            }
            if(iscash){
                moduleName = Constants.CASH_PURCHASE;
            }
            if(isConsignment){
                moduleName = Constants.VENDORCON_INVOICE;
            }
            DocumentEmailSettings documentEmailSettings = null;
            KwlReturnObject documentEmailresult = accountingHandlerDAOobj.getObject(DocumentEmailSettings.class.getName(), paramJobj.optString(COMPANYID));
            documentEmailSettings = documentEmailresult != null ? (DocumentEmailSettings) documentEmailresult.getEntityList().get(0) : null;
            if (documentEmailSettings != null) {
                boolean sendmail = false;
                boolean isEditMail = false;
                if (StringUtil.isNullOrEmpty(grid)) { // create new case  
                    if(isFixedAsset && documentEmailSettings.isAssetPurchaseInvoiceGenerationMail()){
                         sendmail = true;
                    }else if(isConsignment && documentEmailSettings.isConsignmentPInvoiceGenerationMail()){
                        sendmail = true;
                    } else if (documentEmailSettings.isPurchaseInvoiceGenerationMail()) {
                        sendmail = true;
                    }
                } else { // edit case
                    isEditMail = true;
                    if(isFixedAsset && documentEmailSettings.isAssetPurchaseInvoiceUpdationMail()){
                        sendmail = true;
                    }else if(isConsignment && documentEmailSettings.isConsignmentPInvoiceUpdationMail()){
                        sendmail = true;
                    } else if (documentEmailSettings.isPurchaseInvoiceUpdationMail()) {
                        sendmail = true;
                    }
                }
                if (sendmail) {           //if allow to send alert mail when option selected in companypreferences
                    String userMailId="",userName="",currentUserid="";
                    String createdByEmail = "";
                    String createdById = "";          
                    HashMap<String, Object> requestParams1= AccountingManager.getEmailNotificationParamsJson(paramJobj);
                    if(requestParams1.containsKey("userfullName")&& requestParams1.get("userfullName")!=null){
                        userName=(String)requestParams1.get("userfullName");
                    }
                    if(requestParams1.containsKey("usermailid")&& requestParams1.get("usermailid")!=null){
                        userMailId=(String)requestParams1.get("usermailid");
                    }
                    if(requestParams1.containsKey(Constants.useridKey)&& requestParams1.get(Constants.useridKey)!=null){
                        currentUserid=(String)requestParams1.get(Constants.useridKey);
                    }
                    List<String> mailIds = new ArrayList();
                    if (!StringUtil.isNullOrEmpty(userMailId)) {
                        mailIds.add(userMailId);
                    }
                    /*
                      if Edit mail option is true then get userid and Email id of document creator.
                    */
                   if (isEditMail) {
                       if (gr != null && gr.getCreatedby() != null) {
                           createdByEmail = gr.getCreatedby().getEmailID();
                           createdById = gr.getCreatedby().getUserID();
                       }
                       /*
                        if current user userid == document creator userid then don't add creator email ID in List.
                        */
                       if (!StringUtil.isNullOrEmpty(createdByEmail) && !(currentUserid.equalsIgnoreCase(createdById))) {
                           mailIds.add(createdByEmail);
                       }
                   }
                    String[] temp = new String[mailIds.size()];
                    String[] tomailids = mailIds.toArray(temp);
                    String srNumber = entryNumber;
                    
                    if((documentEmailSettings.isPurchaseInvoiceUpdationMail() || documentEmailSettings.isPurchaseInvoiceGenerationMail()) && isConsignment){
                        sendMailOnPurchaseInvoiceCreationUpdation(companyid, gr, isEdit, tomailids, srNumber);
                    }else{
                        accountingHandlerDAOobj.sendSaveTransactionEmails(srNumber, moduleName, tomailids, userName, isEditMail, companyid);
                    }
                }
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("saveGoodsReceipt : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("saveGoodsReceipt : " + ex.getMessage(), ex);
        }catch (ScriptException ex) {
            throw ServiceException.FAILURE("saveGoodsReceipt : " + ex.getMessage(), ex);
        }catch (MessagingException ex) {
            throw ServiceException.FAILURE("saveGoodsReceipt : " + ex.getMessage(), ex);
        }

        return ll;
    }
    
    @Override
    public void deleteJEDetailsCustomData(String jeid) throws ServiceException {
        KwlReturnObject cap = accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), jeid);
        JournalEntry salesOrderDetails = (JournalEntry) cap.getEntityList().get(0);
        Set<JournalEntryDetail> journalEntryDetails = salesOrderDetails.getDetails();
        for (JournalEntryDetail journalEntryDetail : journalEntryDetails) {
            String jeDetailsId = journalEntryDetail.getID();
            KwlReturnObject jedresult1 = accJournalEntryobj.deleteJEDetailsCustomData(jeDetailsId);
        }
    }
    
       //Appending values in Map to build Audit Trial
    public void setValuesForAuditTrialMessage(GoodsReceipt oldgrd,JSONObject paramJobj,Map<String,Object>oldgreceipt,Map<String,Object>greceipthm,boolean inCash,Map<String, Object>newAuditKey) throws SessionExpiredException {
         DateFormat df = authHandler.getDateOnlyFormat();
           try {
             //Setting values in map for oldgreceipt
            if (oldgrd != null) {
                if (oldgrd.getTermid() != null) {
                    KwlReturnObject olddebittermresult = accountingHandlerDAOobj.getObject(Term.class.getName(), oldgrd.getTermid().getID());
                    Term term = (Term) olddebittermresult.getEntityList().get(0);
                    oldgreceipt.put(Constants.DebitTermName, term.getTermname());
                    newAuditKey.put(Constants.DebitTermName, "Debit Term");
                }  
                KwlReturnObject currobretrurnlist = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), oldgrd.getCurrency().getCurrencyID());
                KWLCurrency oldcurrencyobj = (KWLCurrency) currobretrurnlist.getEntityList().get(0);
                KwlReturnObject venobretrurnlist = accountingHandlerDAOobj.getObject(Vendor.class.getName(), oldgrd.getVendor().getID());
                Vendor oldvendor = (Vendor) venobretrurnlist.getEntityList().get(0);
                oldgreceipt.put(Constants.VendorName, oldvendor.getName());
                newAuditKey.put(Constants.VendorName, "Vendor");
                oldgreceipt.put(ENTRYNUMBER, oldgrd.getGoodsReceiptNumber());
                newAuditKey.put(ENTRYNUMBER, "Entry Number");
                oldgreceipt.put(Constants.CurrencyName, oldcurrencyobj.getName());//Currency name
                newAuditKey.put(Constants.CurrencyName, "Currency");
                oldgreceipt.put(MEMO, StringUtil.isNullOrEmpty(oldgrd.getMemo()) ? "" : oldgrd.getMemo());
                newAuditKey.put(MEMO, "Memo");
                oldgreceipt.put("shipvia", StringUtil.isNullOrEmpty(oldgrd.getShipvia()) ? "" : oldgrd.getShipvia());
                newAuditKey.put("shipvia", "Ship Via");
                oldgreceipt.put("fob", StringUtil.isNullOrEmpty(oldgrd.getFob()) ? "" : oldgrd.getFob());
                newAuditKey.put("fob", "FOB");
                oldgreceipt.put(DUEDATE, oldgrd.getDueDate() != null ? df.parse(df.format(oldgrd.getDueDate())) : "");
                newAuditKey.put(DUEDATE, "Due Date");
                oldgreceipt.put(SHIPDATE, oldgrd.getShipDate() != null ? df.parse(df.format(oldgrd.getShipDate())) : "");
                newAuditKey.put(SHIPDATE, "Ship Date");
                oldgreceipt.put(ENTRYDATE, oldgrd.getCreationDate() != null ? df.parse(df.format(oldgrd.getCreationDate())) : df.parse(df.format(oldgrd.getJournalEntry().getEntryDate())));
                newAuditKey.put(ENTRYDATE, "Entry Date");
            }
            
                //Setting values in map for greceipthm
            if (!inCash) {
                KwlReturnObject debittermresult = accountingHandlerDAOobj.getObject(Term.class.getName(), paramJobj.optString("termid"));
                Term term = (Term) debittermresult.getEntityList().get(0);
                greceipthm.put(Constants.DebitTermName, term.getTermname());//Debit Term Name
            }

            KwlReturnObject newcurrencyreturnobj = accountingHandlerDAOobj.getObject(KWLCurrency.class.getName(), paramJobj.optString(CURRENCYID));
            KWLCurrency newcurrencyobj = (KWLCurrency) newcurrencyreturnobj.getEntityList().get(0);
            greceipthm.put(Constants.CurrencyName, newcurrencyobj.getName());//Currencey name
            KwlReturnObject venobretrurnlist = accountingHandlerDAOobj.getObject(Vendor.class.getName(), paramJobj.optString(VENDOR));
            Vendor newvendor = (Vendor) venobretrurnlist.getEntityList().get(0);
            greceipthm.put(Constants.VendorName, newvendor.getName());//Vendor Name
            
        } catch (Exception ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private JournalEntryDetail GTAServiceTaxJEEntry(Set<JournalEntryDetail> jedetails, String companyid, double amount, String accountid, String jeid) throws ServiceException {
        JournalEntryDetail jed = null;
        try {
            JSONObject jedjson = new JSONObject();
            KwlReturnObject jedresult = null;
            jedjson.put(SRNO, jedetails.size() + 1);
            jedjson.put(COMPANYID, companyid);
            jedjson.put(AMOUNT, authHandler.round(amount, companyid));//JE entry for service tax
            jedjson.put(ACCOUNTID, accountid);
            jedjson.put(DEBIT, false);
            jedjson.put(JEID, jeid);
            jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
            jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("GTAServiceTaxJEEntry : " + ex.getMessage(), ex);
        }
        return jed;
    }
    
    public HashMap manualLandedCostCategoryDetailsReturnMap(JSONObject temp) throws ServiceException {
        HashMap<String, Object> manualLandedCostCategoryMap = new HashMap<String, Object>();
        try {
            
             manualLandedCostCategoryMap.put("id", temp.has("id")?temp.getString("id"):"");
             manualLandedCostCategoryMap.put("billid", temp.has("billid")?temp.getString("billid"):"");             
             manualLandedCostCategoryMap.put("originalTransactionRowid", temp.has("originalTransactionRowid")?temp.getString("originalTransactionRowid"):"");
             manualLandedCostCategoryMap.put("productid", temp.has("productid")?temp.getString("productid"):"");
             manualLandedCostCategoryMap.put("billno", temp.has("billno")?temp.getString("billno"):"");
             manualLandedCostCategoryMap.put("productname", temp.has("productname")?temp.getString("productname"):"");
             manualLandedCostCategoryMap.put("enterpercentage", (temp.has("enterpercentage")&&  !StringUtil.isNullOrEmpty(temp.getString("enterpercentage")))?temp.getString("enterpercentage"):"0");
             manualLandedCostCategoryMap.put("enteramount", (temp.has("enteramount")&&  !StringUtil.isNullOrEmpty(temp.getString("enteramount")))?temp.getString("enteramount"):"0");
             manualLandedCostCategoryMap.put("igstrate", (temp.has("igstrate") && !StringUtil.isNullOrEmpty(temp.getString("igstrate"))) ? temp.getString("igstrate") : "0");
            manualLandedCostCategoryMap.put("igstamount", (temp.has("igstamount") && !StringUtil.isNullOrEmpty(temp.getString("igstamount"))) ? temp.getString("igstamount") : "0");
            manualLandedCostCategoryMap.put("taxablevalueforigst", (temp.has("taxablevalueforigst") && !StringUtil.isNullOrEmpty(temp.getString("taxablevalueforigst"))) ? temp.getString("taxablevalueforigst") : "0");
            manualLandedCostCategoryMap.put("customdutyandothercharges", (temp.has("customdutyandothercharges") && !StringUtil.isNullOrEmpty(temp.getString("customdutyandothercharges"))) ? temp.getString("customdutyandothercharges") : "0");
            manualLandedCostCategoryMap.put("taxablevalueforcustomduty", (temp.has("taxablevalueforcustomduty") && !StringUtil.isNullOrEmpty(temp.getString("taxablevalueforcustomduty"))) ? temp.getString("taxablevalueforcustomduty") : "0");
            manualLandedCostCategoryMap.put("taxablevalueforcustomduty", (temp.has("taxablevalueforcustomduty") && !StringUtil.isNullOrEmpty(temp.getString("taxablevalueforcustomduty"))) ? temp.getString("taxablevalueforcustomduty") : "0");
            manualLandedCostCategoryMap.put("assetId", (temp.has("assetId") && !StringUtil.isNullOrEmpty(temp.getString("assetId"))) ? temp.getString("assetId") : "");
             
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return manualLandedCostCategoryMap;
    }
    
    private void sendMailOnPurchaseInvoiceCreationUpdation(String companyId, GoodsReceipt gr, boolean isEdit, String[] toEmailIds, String PINumber) throws ServiceException {
        String htmlTextC = "", subject = "";
        String GRNCreatorName = gr.getCreatedby().getFullName();

        htmlTextC += "<br/>Hi,<br/>";
        if (!isEdit) {
            htmlTextC += "<br/>User <b>" + GRNCreatorName + "</b> has created new Consignment Purchase Invoice  <b>" + PINumber + "</b>.<br/>";
        } else {
            htmlTextC += "<br/>User <b>" + GRNCreatorName + "</b> has edited Consignment Purchase Invoice <b>" + PINumber + "</b>.<br/>";
        }

        KwlReturnObject result = accountingHandlerDAOobj.getNotifications(companyId);
        List<NotificationRules> list = result.getEntityList();
        Iterator<NotificationRules> nrItr = list.iterator();
        while (nrItr.hasNext()) {
            NotificationRules nr = nrItr.next();
            if (nr != null && nr.getModuleId() == 202 && Integer.parseInt(nr.getFieldid()) == 33) {
                String toUserListStr = StringUtil.join(",", toEmailIds);
                
                if (nr.isMailToSalesPerson()) {
                    Set<VendorAgentMapping> agentList=gr.getVendor().getAgent();
                    Iterator agntItr=agentList.iterator();
                    while(agntItr.hasNext()){
                        VendorAgentMapping vam=(VendorAgentMapping)agntItr.next();
                        if (vam != null && vam.getAgent() != null) {
                            String email = vam.getAgent().getEmailID();
                            if (!StringUtil.isNullOrEmpty(email)) {
                                if (StringUtil.isNullOrEmpty(toUserListStr)) {
                                    toUserListStr += email;
                                } else {
                                    toUserListStr += "," + email;
                                }
                            }
                        }
                    }
                }

                toEmailIds = toUserListStr.split(",");

                subject = nr.getMailsubject();
                htmlTextC = nr.getMailcontent();

                subject = subject.replaceAll("#Vendor_Alias#", gr.getVendor().getAliasname());
//                    subject = subject.replaceAll("#Sales_Person#", deliveryOrder.getSalesperson().getValue());
                subject = subject.replaceAll("#Document_Number#", PINumber);
                htmlTextC = htmlTextC.replaceAll("#Document_Number#", PINumber);
                htmlTextC = htmlTextC.replaceAll("#User_Name#", GRNCreatorName);

                if (isEdit) {
                    subject = subject.replaceAll("Creation", "updation");
                    subject = subject.replaceAll("generation", "updation");
                    htmlTextC = htmlTextC.replaceAll("added", "updated");
                    htmlTextC = htmlTextC.replaceAll("created", "updated");
                }
                break;
            }
        }
        accountingHandlerDAOobj.sendTransactionEmails(toEmailIds, "", subject, htmlTextC, htmlTextC, companyId);
    }
    
    public HashMap mapExciseDetails(GoodsReceipt gr,JSONObject temp) throws ServiceException {
        HashMap<String, Object> exciseMap = new HashMap<String, Object>();
        try {
            exciseMap.put("id", temp.has("id")?temp.getString("id"):"");
            exciseMap.put("goodreceiptid", temp.getString("goodreceiptid"));
            exciseMap.put("suppliers", temp.has("suppliers")?temp.getString("suppliers"):"");
            exciseMap.put("supplierTINSalesTAXNo", temp.has("supplierTINSalesTAXNo")?temp.getString("supplierTINSalesTAXNo"):"");
            exciseMap.put("supplierExciseRegnNo", temp.has("supplierExciseRegnNo")?temp.getString("supplierExciseRegnNo"):"");
            exciseMap.put("cstnumber", temp.has("cstnumber")?temp.getString("cstnumber"):"");
            exciseMap.put("supplierRange", temp.has("supplierRange")?temp.getString("supplierRange"):"");
            exciseMap.put("supplierCommissionerate", temp.has("supplierCommissionerate")?temp.getString("supplierCommissionerate"):"");
            exciseMap.put("supplierAddress", temp.has("supplierAddress")?temp.getString("supplierAddress"):"");
            if(temp.has("supplierState") && !temp.getString("supplierState").equals("")){
                exciseMap.put("supplierState", temp.has("supplierState")?temp.getString("supplierState"):"");
            }
            exciseMap.put("supplierImporterExporterCode", temp.has("supplierImporterExporterCode")?temp.getString("supplierImporterExporterCode"):"");
            exciseMap.put("supplierDivision", temp.has("supplierDivision")?temp.getString("supplierDivision"):"");
            exciseMap.put("manufacturername", temp.has("manufacturername")?temp.getString("manufacturername"):"");
            exciseMap.put("manufacturerExciseRegnNo", temp.has("manufacturerExciseRegnNo")?temp.getString("manufacturerExciseRegnNo"):"");
            exciseMap.put("manufacturerRange", temp.has("manufacturerRange")?temp.getString("manufacturerRange"):"");
            exciseMap.put("manufacturerCommissionerate", temp.has("manufacturerCommissionerate")?temp.getString("manufacturerCommissionerate"):"");
            exciseMap.put("manufacturerDivision", temp.has("manufacturerDivision")?temp.getString("manufacturerDivision"):"");
            exciseMap.put("manufacturerAddress", temp.has("manufacturerAddress")?temp.getString("manufacturerAddress"):"");
            exciseMap.put("manufacturerImporterExporterCode", temp.has("manufacturerImporterExporterCode")?temp.getString("manufacturerImporterExporterCode"):"");
            
            exciseMap.put("registrationType", temp.has("registrationType")?temp.getString("registrationType"):"");
            exciseMap.put("UnitName", temp.has("UnitName")?temp.getString("UnitName"):"");
            exciseMap.put("ECCNo", temp.has("ECCNo")?temp.getString("ECCNo"):"");
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return exciseMap;
    }
    
    public List saveGoodsReceiptRows(JSONObject paramJobj, String jeid, Company company, Set<JournalEntryDetail> jeDetails, KWLCurrency currency, double externalCurrencyRate,Map<String,String> map, Map<Integer,List<String>> grDetailTermMap) throws ServiceException, SessionExpiredException, AccountingException, UnsupportedEncodingException {
        Set hs = new HashSet(), rows = new HashSet();
        Map<Inventory, List<HashMap>> FinalTerm = new HashMap<Inventory, List<HashMap>>();
        Map<Inventory, JSONObject> dealerExcise = new HashMap<Inventory, JSONObject>();
        Map<Inventory, Object> exciseDetails  = null;
        Map<Integer, Map<String,List<String>>> URDjeDetails = new HashMap<Integer, Map<String,List<String>>>();
        ArrayList<String> prodList = new ArrayList<String>();
        double totaldiscount = 0, totalamount = 0, taxamount = 0;
        List ll = new ArrayList();
        try {

            String currencyid = paramJobj.optString(CURRENCYID, currency.getCurrencyID());
            Map<String, Object> requestParams = new HashMap<String, Object>();
            String companyid = paramJobj.optString(COMPANYID);
            requestParams.put(COMPANYID, companyid);
            int countryid = Integer.parseInt(company.getCountry().getID());
            requestParams.put(GCURRENCYID, paramJobj.optString(Constants.globalCurrencyKey));
            requestParams.put(DATEFORMAT, authHandler.getDateOnlyFormat());
            boolean inCash = paramJobj.optBoolean(INCASH);
            boolean gstIncluded = paramJobj.optBoolean("includingGST");
            boolean isFixedAsset = paramJobj.optBoolean("isFixedAsset");
            boolean includeProductTax = paramJobj.optBoolean("includeprotax");
            boolean isConsignment = paramJobj.optBoolean("isConsignment");
            boolean isVILinkFromGR = false;
            boolean isVILinkFromVQ = false;
            boolean isVILinkFromPO = false;
            // Excise Opening Balance check from Vendor Master ERP-27108 : to hide JE POST
            boolean isExicseOpeningbalance = paramJobj.optBoolean("isExicseOpeningbalance");
            boolean rcmApplicable = paramJobj.optBoolean("GTAApplicable");
            boolean isURDPIDocument = paramJobj.optBoolean("isURDPIDocument");
            boolean isURDPIDocumentLimitCorss = paramJobj.optBoolean("isURDPIDocumentLimitCorss");
            DateFormat df = authHandler.getDateOnlyFormat();
            KwlReturnObject cap = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
            CompanyAccountPreferences preferences = (CompanyAccountPreferences) cap.getEntityList().get(0);
            KwlReturnObject extraCompanyPreferencesObj = accountingHandlerDAOobj.getObject(ExtraCompanyPreferences.class.getName(), companyid);
            ExtraCompanyPreferences extraCompanyPreferences = (ExtraCompanyPreferences) extraCompanyPreferencesObj.getEntityList().get(0);
            boolean updateInventoryFlag = (preferences.isWithInvUpdate()) ? false : true;
            JSONArray jArr = new JSONArray(paramJobj.optString(DETAIL));
            String vendorAccountId = paramJobj.optString("vendorAccountId");
            boolean isUnRegisteredDealer = paramJobj.optBoolean("isUnRegisteredDealer");
            Set<String> productNameRCMNotActivate = new HashSet<String>();
            JournalEntry journalEntry = null;
            JSONArray jedForCustomFields = null; //Jedetails array that needs dimension value
            for (int i = 0; i < jArr.length(); i++) {
//                JournalEntryDetail jed;
                jedForCustomFields = new JSONArray();
                JSONObject jobj = jArr.getJSONObject(i);
                GoodsReceiptDetail row = new GoodsReceiptDetail();
                row.setSrno(i + 1);
                //Creating mapping of sr no with term id to get corresponding gr detail
                List termidslist = new ArrayList();
                if (!StringUtil.isNullOrEmpty(jobj.optString("termids"))) {
                    String[] termids = jobj.optString("termids").split(",");
                    for (String id : termids) {
                        if (!StringUtil.isNullOrEmpty(id)) {
                            termidslist.add(id);
                        }
                    }
                    grDetailTermMap.put(i + 1, termidslist);
                }
                
                row.setWasRowTaxFieldEditable(true);// this field has been added after making row tax field editable its value will be set always true from its implementation. i.e from 28-jan-2014.REASON -  when Row Tax Amount field was not editable then tax calculation was taking place according to tax percent, as selected From Tax combo in JS Side.
                
                if (jobj.has("priceSource")) {
                    row.setPriceSource(!StringUtil.isNullOrEmpty(jobj.optString("priceSource")) ?  StringUtil.DecodeText(jobj.optString("priceSource")) : "");
                }
                if (jobj.has("pricingbandmasterid") && !StringUtil.isNullOrEmpty(jobj.optString("pricingbandmasterid"))) {
                    row.setPricingBandMasterid(jobj.optString("pricingbandmasterid"));
                }
                if(gstIncluded){
                    if(jobj.has("lineleveltermamount")){
                        row.setLineLevelTermAmount(jobj.optDouble("lineleveltermamount",0));
                    }
                }
                row.setCompany(company);
                if (storageHandlerImpl.GetSATSCompanyId().contains(companyid)) {  //This is sats specific code  
                    if (jobj.has("dependentType")) {
                        row.setDependentType(StringUtil.isNullOrEmpty(jobj.getString("dependentType")) ? jobj.getString("dependentTypeNo") : jobj.getString("dependentType"));
                    }
                    if (jobj.has("inouttime")) {
                        row.setInouttime(!StringUtil.isNullOrEmpty(jobj.getString("inouttime")) ? jobj.getString("inouttime") : "");
                    }
                    if (jobj.has("showquantity")) {
                        row.setShowquantity(!StringUtil.isNullOrEmpty(jobj.getString("showquantity")) ? jobj.getString("showquantity") : "");
                    }
                }
                if (!StringUtil.isNullOrEmpty(jobj.optString("desc"))) {
                    try {
                        row.setDescription( StringUtil.DecodeText(jobj.optString("desc")));
                    } catch (Exception ex) {
                        row.setDescription(jobj.optString("desc"));
                    }
                }

                if (!StringUtil.isNullOrEmpty(jobj.optString("supplierpartnumber"))) {
                  
                        row.setSupplierpartnumber( StringUtil.DecodeText(jobj.optString("supplierpartnumber")));
                    
                }

//                if (preferences.isInventoryAccountingIntegration() && (!preferences.isWithInvUpdate() || inCash) && preferences.isUpdateInvLevel()) {
                if (!StringUtil.isNullOrEmpty(jobj.optString("invstore"))) {
                    row.setInvstoreid(jobj.optString("invstore"));
                } else {
                    row.setInvstoreid("");
                }
                if (!StringUtil.isNullOrEmpty(jobj.optString("invlocation"))) {
                    row.setInvlocid(jobj.optString("invlocation"));
                } else {
                    row.setInvlocid("");
                }
//                }
                if (!StringUtil.isNullOrEmpty(jobj.optString("permit"))) {
                    row.setPermit( StringUtil.DecodeText(jobj.optString("permit")));
                }                
                
                double gstCurrencyRate = (jobj.has("gstCurrencyRate") && (!StringUtil.isNullOrEmpty(jobj.get("gstCurrencyRate").toString()))) ? jobj.getDouble("gstCurrencyRate") : 0.0;
                row.setGstCurrencyRate(gstCurrencyRate);
//                PurchaseOrderDetail rd = (PurchaseOrderDetail) session.get(PurchaseOrderDetail.class, jobj.getString("rowid"));
                String linkMode = paramJobj.optString("fromLinkCombo");
                if (!StringUtil.isNullOrEmpty(linkMode)) {
                    if (linkMode.equalsIgnoreCase("Purchase Order") || linkMode.equalsIgnoreCase("Job Work Out Order")) {
                        isVILinkFromPO = true;
                        KwlReturnObject podresult = accountingHandlerDAOobj.getObject(PurchaseOrderDetail.class.getName(), (StringUtil.isNullOrEmpty(jobj.getString("linkto"))) ? jobj.getString("rowid") : jobj.getString("savedrowid"));
                        PurchaseOrderDetail rd = (PurchaseOrderDetail) podresult.getEntityList().get(0);
                        row.setPurchaseorderdetail(rd);
                    } else if (linkMode.equalsIgnoreCase("Goods Receipt")) {
                        isVILinkFromGR = true;
                        KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(GoodsReceiptOrderDetails.class.getName(), (StringUtil.isNullOrEmpty(jobj.getString("linkto"))) ? jobj.getString("rowid") : jobj.getString("savedrowid"));
                        GoodsReceiptOrderDetails rd = (GoodsReceiptOrderDetails) rdresult.getEntityList().get(0);
                        row.setGoodsReceiptOrderDetails(rd);
                    } else if (linkMode.equalsIgnoreCase("Vendor Quotation")) {
                        isVILinkFromVQ = true;
                        KwlReturnObject rdresult = accountingHandlerDAOobj.getObject(VendorQuotationDetail.class.getName(), (StringUtil.isNullOrEmpty(jobj.getString("linkto"))) ? jobj.getString("rowid") : jobj.getString("savedrowid"));
                        VendorQuotationDetail vendorQuotationDetail = (VendorQuotationDetail) rdresult.getEntityList().get(0);
                        row.setVendorQuotationDetail(vendorQuotationDetail);
                    }
                }

                //            row.setGoodsReceipt(gReceipt);
                //            row.setRate(CompanyHandler.getBaseToCurrencyAmount(session,request,jobj.getDouble("rate"),currencyid,AuthHandler.getDateFormatter(request).parse(paramJobj.optString("billdate"))));
                KwlReturnObject bAmt = accCurrencyDAOobj.getBaseToCurrencyAmount(requestParams, jobj.getDouble(RATE), currencyid, authHandler.getDateOnlyFormat().parse(paramJobj.optString(BILLDATE)), externalCurrencyRate);
                if(jobj.has("rateIncludingGst")) {
                    row.setRateincludegst(jobj.optDouble("rateIncludingGst",0));
                }
                row.setRate(jobj.optDouble(RATE, 0.0)); // row.setRate((Double) bAmt.getEntityList().get(0));
                //            Product product = (Product) session.get(Product.class, jobj.getString("productid"));
                KwlReturnObject prdresult = accountingHandlerDAOobj.getObject(Product.class.getName(), jobj.getString(PRODUCTID));
                Product product = (Product) prdresult.getEntityList().get(0);
                prodList.add(jobj.getString(PRODUCTID));
                //            Inventory inventory = CompanyHandler.makeInventory(session, request, product, jobj.getInt("quantity"), jobj.optString("desc"), true, false);
                JSONObject inventoryjson = new JSONObject();
                inventoryjson.put(PRODUCTID, jobj.getString(PRODUCTID));
                //inventoryjson.put(QUANTITY, jobj.getInt(QUANTITY));
                inventoryjson.put(DESCRIPTION, URLEncoder.encode(jobj.getString("desc"), StaticValues.ENCODING));
//                StringUtil.DecodeText(jobj.optString("desc"));
                inventoryjson.put(CARRYIN, true);
                inventoryjson.put(DEFECTIVE, false);
                inventoryjson.put(NEWINVENTORY, false);
                inventoryjson.put(COMPANYID, company.getCompanyID());

                inventoryjson.put("quantity", jobj.getDouble("quantity"));
                if (jobj.has("uomid")) {
                    inventoryjson.put("uomid", jobj.getString("uomid"));
                }
                if (jobj.has("baseuomquantity") && jobj.get("baseuomquantity") != null) {
                    inventoryjson.put("baseuomquantity", updateInventoryFlag ? jobj.getDouble("baseuomquantity") : 0);
                    inventoryjson.put("actquantity", updateInventoryFlag ? 0 : jobj.getDouble("baseuomquantity"));
                    inventoryjson.put("baseuomrate", jobj.getDouble("baseuomrate"));
                } else {
                    inventoryjson.put("baseuomquantity", updateInventoryFlag ? jobj.getDouble("quantity") : 0);
                    inventoryjson.put("actquantity", updateInventoryFlag ? 0 : jobj.getDouble("quantity"));
                    inventoryjson.put("baseuomrate", jobj.getDouble("baseuomrate"));
                }
                inventoryjson.put("invrecord", updateInventoryFlag ? true : false);

                inventoryjson.put(UPDATEDATE, authHandler.getDateOnlyFormat().parse(paramJobj.optString(BILLDATE)));
                KwlReturnObject invresult = accProductObj.addInventory(inventoryjson);
                Inventory inventory = (Inventory) invresult.getEntityList().get(0);
                
                row.setInventory(inventory);
                
                double rate = row.getRate();
                double rowamount = 0;
                if(gstIncluded) {
                    rate = jobj.optDouble("rateIncludingGst",0);
                }
                rowamount = authHandler.round((rate * jobj.getDouble("quantity")),companyid);
                double rowdiscount = 0;
                totalamount += rowamount;

                Discount discount = null;
                double disc = jobj.getDouble(PRDISCOUNT);
                int rowdisc = jobj.getInt("discountispercent");
                if (disc != 0.0) {
                    JSONObject discjson = new JSONObject();
                    discjson.put(DISCOUNT, disc);
                    discjson.put(INPERCENT, (rowdisc == 1) ? true : false);
                    discjson.put(ORIGINALAMOUNT, rowamount);
                    discjson.put(COMPANYID, company.getCompanyID());
                    KwlReturnObject dscresult = accDiscountobj.addDiscount(discjson);
                    discount = (Discount) dscresult.getEntityList().get(0);
                    row.setDiscount(discount);
                    rowdiscount = discount.getDiscountValue();
                    totaldiscount += discount.getDiscountValue();
                }
                
                String rowtaxid = "";
                if (!StringUtil.isNullOrEmpty(jobj.optString(PRTAXID, null)) && jobj.optString(PRTAXID).equalsIgnoreCase("None")) {
                    rowtaxid = null;   
                } else {
                    rowtaxid = jobj.optString(PRTAXID,null); 
                }
//                boolean taxExist = false;
                double rowtaxamount = 0d;
                double rowTaxAmtInBase = 0d;
//                double lineleveltaxtermamount = 0d;
                double lineleveltaxtermamountInBase = 0d;
                double rowTaxPercent = 0;
                double rowExcludingGstAmount=0d;
                double rowExcludingGstAmountInBase=0d;
                KwlReturnObject bAmt1 = null,jeResult=null;
                Tax rowtax = null;
                HashMap<String, Object> requestParams1 = new HashMap();
                if (!requestParams1.containsKey("gcurrencyid") && !StringUtil.isNullOrEmpty(jeid)) {
                    jeResult=accountingHandlerDAOobj.getObject(JournalEntry.class.getName(), jeid); 
                    journalEntry = (JournalEntry) jeResult.getEntityList().get(0);
                    requestParams1.put("gcurrencyid", journalEntry.getCompany().getCurrency().getCurrencyID());
                    requestParams1.put("companyid", journalEntry.getCompany().getCompanyID());
                    
                }
                if (!StringUtil.isNullOrEmpty(rowtaxid) && includeProductTax) {
                    KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), rowtaxid); // (Tax)session.get(Tax.class, taxid);
                    rowtax = (Tax) txresult.getEntityList().get(0);
                    double rowtaxamountFromJS = StringUtil.getDouble(jobj.getString("taxamount"));
                    if (rowtax == null) {
                        throw new AccountingException(messageSource.getMessage("acc.so.taxcode", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    } else {
                        row.setTax(rowtax);
                        rowTaxPercent = jobj.optDouble("taxpercent",0);
                        rowtaxamount = authHandler.round(rowtaxamountFromJS,companyid);//(rowamount - rowdiscount) * rowTaxper/100;//StringUtil.getDouble(jobj.getString(TAXAMOUNT));
                        
                        row.setRowTaxAmount(rowtaxamount);
                        /*Save Row tax amount in base*/
                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowtaxamount, journalEntry.getCurrency().getCurrencyID(), journalEntry.getEntryDate(), journalEntry.getExternalCurrencyRate());
                        rowTaxAmtInBase = (Double) bAmt1.getEntityList().get(0);
                        rowTaxAmtInBase = authHandler.round(rowTaxAmtInBase, companyid);
                        row.setRowTaxAmountInBase(rowTaxAmtInBase);
                        taxamount += rowtaxamount;
                        
                        row.setIsUserModifiedTaxAmount(jobj.optBoolean(Constants.isUserModifiedTaxAmount, false));//ERM-1085
                        
//                        lineleveltaxtermamount = StringUtil.getDouble(jobj.optString("lineleveltaxtermamount","0"));
//                        row.setRowTermTaxAmount(lineleveltaxtermamount);
                       
                        /*Save Row Term tax amount in base*/
//                        bAmt1 = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, lineleveltaxtermamount, journalEntry.getCurrency().getCurrencyID(), journalEntry.getEntryDate(), journalEntry.getExternalCurrencyRate());
//                        lineleveltaxtermamountInBase = (Double) bAmt1.getEntityList().get(0);
//                        lineleveltaxtermamountInBase = authHandler.round(lineleveltaxtermamountInBase, companyid);
//                        row.setRowTermTaxAmountInBase(lineleveltaxtermamountInBase);
//                        if (taxamount > 0) {
//                            if (jeDetails != null && !jeDetails.isEmpty()) {
//                                for (JournalEntryDetail jed : jeDetails) {
//                                    if (jed.getAccount() == rowtax.getAccount()) {
//                                        //                                          jed.setAmount(jed.getAmount() + row.getRate() * inventory.getQuantity());
//                                        JSONObject jedjson = new JSONObject();
//                                        jedjson.put(JEDID, jed.getID());
//                                        jedjson.put(AMOUNT, jed.getAmount() + rowtaxamount);
//                                        jedjson.put(DESCRIPTION, URLEncoder.encode(jobj.getString(DESC), StaticValues.ENCODING));
//                                        KwlReturnObject jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
//                                        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
//                                        taxExist = true;
//                                        break;
//                                    }
//                                }
//                            }
//                        }
                    }
                }
                if (countryid == Constants.indian_country_id && rcmApplicable) {
                    if (!isUnRegisteredDealer && product != null && !product.isRcmApplicable()) {
                        productNameRCMNotActivate.add(product.getName());
                        //throw new AccountingException(messageSource.getMessage("acc.common.rcmforproductnotactivated", new Object[]{product.getName()}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    }
                }
                /**
                 * Code to save ITC type
                 */
                int itcType = 1;
                String itcAccId = null;
                if (countryid == Constants.indian_country_id) {
                    itcType = jobj.optInt("itctype", 1);
                    row.setItcType(itcType);
                    if (itcType == Constants.GST_ITCTYPE_BLOCKED && isFixedAsset) {
                        /**
                         * Take purchase account id from Asset group if Blocked
                         * ITC.
                         */
                        itcAccId = product.getPurchaseAccount().getID();
                    } else if (itcType == Constants.GST_ITCTYPE_BLOCKED) {
                        /**
                         * Take ITC account from product if Blocked ITC
                         * selected.
                         */
                        itcAccId = product.getItcAccount() != null ? product.getItcAccount().getID() : "";
                    }
                }
                /*Below code is used to save exlcuding gst amt and excluding gst amount in base*/
                rowExcludingGstAmount = rowamount;
                if (gstIncluded) {
                    rowExcludingGstAmount -= rowdiscount;
                    rowExcludingGstAmount += jobj.optDouble("lineleveltermamount", 0);
                    double taxAppliedOn = 0;
                    taxAppliedOn = (100 * rowExcludingGstAmount) / (100 + rowTaxPercent);
                    rowExcludingGstAmount = taxAppliedOn;
                } else {
                    rowExcludingGstAmount -= rowdiscount;
                }
                rowExcludingGstAmount = authHandler.round(rowExcludingGstAmount, companyid);
                row.setRowExcludingGstAmount(rowExcludingGstAmount);
                /*Save Excluding GST amount  in base*/
                if (journalEntry != null) {
                    bAmt = accCurrencyDAOobj.getCurrencyToBaseAmount(requestParams, rowExcludingGstAmount, journalEntry.getCurrency().getCurrencyID(), journalEntry.getEntryDate(), journalEntry.getExternalCurrencyRate());
                    rowExcludingGstAmountInBase = (Double) bAmt.getEntityList().get(0);
                }
                rowExcludingGstAmountInBase = authHandler.round(rowExcludingGstAmountInBase, companyid);
                row.setRowExcludingGstAmountInBase(rowExcludingGstAmountInBase);
                List<HashMap> Tlist = null;
                double indainMulTax=0.0d;
                // Excise Opening Balance check from Vendor Master ERP-27108 : to hide JE POST
                if (extraCompanyPreferences.getLineLevelTermFlag()==1 && jobj.has("LineTermdetails") && !StringUtil.isNullOrEmpty((String) jobj.optString("LineTermdetails"))) {
                    Tlist = mapReceiptDetailTerms( StringUtil.DecodeText((String) jobj.optString("LineTermdetails")), row.getInventory(), paramJobj.optString(Constants.useridKey));
                    if (!isExicseOpeningbalance || (countryid == Constants.indian_country_id && rcmApplicable)) {
                        Map<String,List<String>> jeMap = new HashMap<String,List<String>>();
                        for (HashMap listData : Tlist) {
                            /**
                             * If No Un-registered Vendor then directly POST JE or
                             * If Un-registered Vendor and Cross the daily Limit then POST JE also
                             */
                           //if(!isURDPIDocument || (isURDPIDocument && isURDPIDocumentLimitCorss && rcmApplicable)){
                           if(!isURDPIDocument || (isURDPIDocument && rcmApplicable)){
                               List<String> JEList= new ArrayList<String>();
                                JSONObject jedjson = new JSONObject();
                                jedjson.put("srno", jeDetails.size() + 1);
                                jedjson.put("companyid", companyid);
                                jedjson.put("amount", listData.get("termamount"));
                                if (countryid == Constants.indian_country_id && rcmApplicable) {
                                    String payableaccountid = listData.get("payableaccountid") == null ? "" : (String) listData.get("payableaccountid");
                                    if (StringUtil.isNullOrEmpty(payableaccountid)) {
                                        throw new AccountingException(messageSource.getMessage("acc.common.payableaccountnotmappedtoaccount", new Object[]{listData.get("termname")}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                                    }
                                   jedjson.put("accountid", listData.get("payableaccountid"));
                               } else if (countryid == Constants.indian_country_id && itcType == Constants.GST_ITCTYPE_BLOCKED) {
                                   /**
                                    * If blocked ITC then post JE detail in ITC account.
                                    */
                                     if (StringUtil.isNullOrEmpty(itcAccId)) {
                                        throw new AccountingException(messageSource.getMessage("acc.common.blockeditcaccountnotmappedtoaccount",new Object[]{product.getName()}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                                    }
                                   jedjson.put("accountid", itcAccId);
                               } else {
                                   jedjson.put("accountid", listData.get("accountid"));
                               }
                                jedjson.put("debit", true);
                                jedjson.put("jeid", jeid);
                                KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                jeDetails.add(jed);
                                row.setGstJED(jed);
                                indainMulTax += Double.parseDouble(listData.get("termamount").toString());
                                if (countryid == Constants.indian_country_id && rcmApplicable) {
                                    jedjson = new JSONObject();
                                    jedjson.put("srno", jeDetails.size() + 1);
                                    jedjson.put("companyid", companyid);
                                    jedjson.put("amount", listData.get("termamount"));
                                    jedjson.put("accountid", listData.get("accountid"));
                                    jedjson.put("debit", false);
                                    jedjson.put("jeid", jeid);
                                    jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                    JournalEntryDetail payableJED = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                    jeDetails.add(payableJED);
                                    /**
                                     * Each Line level Have term taxes and each tax have Credit and debit JE Detail entry 
                                     * if RCM Purchases.
                                     * To Store Each term Credit and Debit JE Detail ID against each term in list.
                                     */
                                    if(rcmApplicable &&  isURDPIDocument){
                                        JEList.add(jed.getID());
                                        JEList.add(payableJED.getID());
                                        jeMap.put(listData.get("term").toString(), JEList);
                                    }
                                }
                              }
                            }
                            /**
                             * Store All JE Details ID's against each Line detail.
                             * If PI from UnRegistered Vendor
                             */
                           if (rcmApplicable && isURDPIDocument && isURDPIDocumentLimitCorss) {
                              URDjeDetails.put(row.getSrno(), jeMap);
                           }
                        }
                }
                FinalTerm.put(inventory, Tlist);
                if (countryid == Constants.indian_country_id) {
                    if (jobj.has("dealerExciseDetails") && !StringUtil.isNullOrEmpty(jobj.getString("dealerExciseDetails"))) {
                        JSONObject jobjExciseDealerDetails = new JSONObject();
                        JSONArray jrr = new JSONArray( StringUtil.DecodeText(jobj.getString("dealerExciseDetails")));
                        if(!(jrr.get(0).toString()).equals("{}")){
                             jobjExciseDealerDetails = new JSONObject(jrr.get(0).toString());
                        }
                        dealerExcise.put(inventory, jobjExciseDealerDetails);
                    }
                }
                if (company.getCountry() != null && !StringUtil.isNullOrEmpty(company.getCountry().getID()) && Constants.indian_country_id == Integer.parseInt(company.getCountry().getID()) && jobj.has("appliedTDS") && !StringUtil.isNullOrEmpty(jobj.optString("appliedTDS"))) {// only for indian country
                    JSONArray jArrAppliedTDS = new JSONArray(jobj.optString("appliedTDS"));
                    if (jArrAppliedTDS.length() > 0) {
                        JSONObject jobjAppliedTDS = jArrAppliedTDS.getJSONObject(0);
                        KwlReturnObject assObj = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), jobjAppliedTDS.getString("natureofpayment"));
                        KwlReturnObject tdsAccresult = accountingHandlerDAOobj.getObject(Account.class.getName(), jobjAppliedTDS.getString("tdsaccountid")); // (Tax)session.get(Tax.class, taxid);
                        Account tdsPayableAccount = (Account) tdsAccresult.getEntityList().get(0);
                        MasterItem nop = (MasterItem) assObj.getEntityList().get(0);
                        row.setTdsAssessableAmount(jobjAppliedTDS.getDouble("tdsAssessableAmount"));
                        row.setNatureOfPayment(nop);
                        row.setTdsRuleId(jobjAppliedTDS.getInt("ruleid"));
                        row.setTdsRate(jobjAppliedTDS.getDouble("tdspercentage"));
                        row.setTdsLineAmount(jobjAppliedTDS.getDouble("tdsamount"));
                        row.setTdsPayableAccount(tdsPayableAccount);
                        if (jobj.has("tdsjemappingID") && jobjAppliedTDS.getDouble("tdsamount")<=0.0) {// Edit Case Set TDS JE mapping
                            KwlReturnObject tdsJEmapObj = accountingHandlerDAOobj.getObject(TdsJEMapping.class.getName(), jobj.getString("tdsjemappingID"));
                            TdsJEMapping tdje=(TdsJEMapping) tdsJEmapObj.getEntityList().get(0);
                            row.setTdsJEMapping(tdje);
                        }
                        if (jobjAppliedTDS.has("advancePaymentDetails") && new JSONArray(jobjAppliedTDS.optString("advancePaymentDetails")).length() > 0) {
                            HashSet advancepaymentmapping = accGoodsReceiptobj.saveUpdateAdvancePaymentMapping(jobjAppliedTDS,row,null,company);
                            if (!advancepaymentmapping.isEmpty() || advancepaymentmapping.size() > 0) {
                                row.setGoodsReceiptDetailPaymentMapping(advancepaymentmapping);
                            }
                        }
                    }
                    
                }
             
                //  if (hs.add(product.getPurchaseAccount())) 
                {
                   
                    double JElineAmount = rowamount; // Row Amount Not Include Gst(Tax)
                    
                    if (gstIncluded) { // Check For  Row Amount Include Gst(Tax)
                        if (extraCompanyPreferences.getLineLevelTermFlag()==1) { //Indian Company Including mul Tax
                            JElineAmount -= indainMulTax;
                        } else {
                            JElineAmount -= rowtaxamount;
                        }
                    }
                
                    JSONObject jedjson = new JSONObject();
                    JSONObject sepatratedjedjson = new JSONObject();
                    jedjson.put(SRNO, jeDetails.size() + 1);
                    jedjson.put(COMPANYID, company.getCompanyID());
                    /*
                        For JE Detail Entry for sales amount = rowAmount - Tax Amount
                    */
                    jedjson.put(AMOUNT,JElineAmount);
                    Account rowProductAccount = null;
//                    if(countryid == Constants.indian_country_id ){
//                         String vendorId = request.getParameter("vendor");
//                         Vendor vendor =null;
//                         if (!StringUtil.isNullOrEmpty(vendorId)) {
//                           KwlReturnObject custresult = accountingHandlerDAOobj.getObject(Vendor.class.getName(), vendorId);
//                           vendor = (Vendor) custresult.getEntityList().get(0);
//                        }
//                        if (vendor.isInterstateparty() && vendor.isCformapplicable()) { //Vendor Level interstatechange is true and c form is true
//                            if (product.getInterStatePurchaseAccountCForm() != null) {
//                                jedjson.put(ACCOUNTID, product.getInterStatePurchaseAccountCForm().getID());
//                            } else {
//                                throw new AccountingException("Please Map Inter State and C Form  Transactions Accounts  ( Product Name : "+product.getName()+" ) at Product Master  to proceed further.");
//                            }
//                           
//                        } else if (vendor.isInterstateparty() && !vendor.isCformapplicable()) { //Vendor Level interstatechange is true and c form is false
//                            if (product.getInterStatePurchaseAccount()!= null) {
//                                jedjson.put(ACCOUNTID, product.getInterStatePurchaseAccount().getID());
//                            } else {
//                                throw new AccountingException("Please Map Inter State Transactions Accounts ( Product Name : "+product.getName()+" )  at Product Master  to proceed further.");
//                            }
//                        } else {
//                            jedjson.put(ACCOUNTID, product.getPurchaseAccount().getID()); //Vendor Level interstatechange is false and c form is false
//                        }
                        if (jobj.has("productaccountid") && !StringUtil.isNullOrEmpty((String) jobj.optString("productaccountid")) && countryid == Constants.indian_country_id ) {// If Invoice Line Level Change the account it will show line level Account Only
                            jedjson.put("accountid", (String) jobj.getString("productaccountid"));
                        } else {
                            jedjson.put(ACCOUNTID, product.getPurchaseAccount().getID());
                        }
                    jedjson.put(DEBIT, true);
                    jedjson.put(JEID, jeid);
                    //jedjson.put(DESCRIPTION, jobj.getString(DESC)); //ERP-15224
                    // Excise Opening Balance check from Vendor Master ERP-27108 : to hide JE POST
                    if(!isExicseOpeningbalance){
                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                    JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jeDetails.add(jed);
                    row.setPurchaseJED(jed);

                    // Add Custom fields details 
                    if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                        JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);
                        customrequestParams.put("modulerecid", jed.getID());
                        customrequestParams.put("recdetailId", row.getInventory().getID());
                        customrequestParams.put("moduleid", isConsignment?Constants.Acc_Consignment_GoodsReceipt_ModuleId:Constants.Acc_Vendor_Invoice_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            jedjson.put("accjedetailcustomdata", jed.getID());
                            jedjson.put("jedid", jed.getID());
                            jedjson.put(DESCRIPTION, URLEncoder.encode(jobj.getString(DESC), StaticValues.ENCODING));
                            jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
                        }
                        
                        /*
                         * Post additional jedetail if dimension is tagged for
                         * matching financial reports in advance search
                         */
                        sepatratedjedjson = new JSONObject();
                        sepatratedjedjson.put(SRNO, jeDetails.size() + 1);
                        sepatratedjedjson.put(COMPANYID, company.getCompanyID());
                        sepatratedjedjson.put(AMOUNT, rowExcludingGstAmount);
                        sepatratedjedjson.put(ACCOUNTID, vendorAccountId);
                        sepatratedjedjson.put(DEBIT, false);
                        sepatratedjedjson.put(JEID, jeid);
                        sepatratedjedjson.put("mainjedid", jed.getID());
                        sepatratedjedjson.put(Constants.ISSEPARATED, true);
                        jedresult = accJournalEntryobj.addJournalEntryDetails(sepatratedjedjson);
                        JournalEntryDetail controllAccjed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                        jeDetails.add(controllAccjed);
                        jedForCustomFields.put(controllAccjed.getID());
                    }
                    // Add Custom fields details for Product
                    if (!StringUtil.isNullOrEmpty(jobj.optString("productcustomfield", ""))) {
                        JSONArray jcustomarray = new JSONArray(jobj.optString("productcustomfield", "[]"));
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);
                        customrequestParams.put("modulerecid", jed.getID());
                        customrequestParams.put("moduleid", isFixedAsset ? Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId : Constants.Acc_Vendor_Invoice_ModuleId);
                        customrequestParams.put("recdetailId", inventory.getID());
                        customrequestParams.put("productId", row.getInventory().getProduct().getID());
                        customrequestParams.put("companyid", companyid);
                        customrequestParams.put("customdataclasspath", Constants.Acc_JEDetail_Productcustom_data_classpath);
                        /*
                         * Rich Text Area is put in json if User have not selected any data for this field. ERP-ERP-37624
                         */
                        customrequestParams.put("productIdForRichRext", row.getInventory().getProduct().getID());                    
                        fieldDataManagercntrl.setRichTextAreaForProduct(customrequestParams);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            jedjson.put("accjedetailproductcustomdataref", jed.getID());
                            jedjson.put("jedid", jed.getID());
                            jedjson.put(DESCRIPTION, URLEncoder.encode(jobj.getString(DESC), StaticValues.ENCODING));
                            jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
                        }
                    }
//                    jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
//                    row.setPurchaseJED(jed);
                }
                    if (extraCompanyPreferences.getCompany().getCountry().getID().equalsIgnoreCase("" + Constants.indian_country_id)) {
                        /**
                         * Save GST History Customer/Vendor data.
                         */
                        jobj.put("detaildocid", row.getInventory().getID());
                        jobj.put("moduleid", isFixedAsset?Constants.Acc_FixedAssets_PurchaseInvoice_ModuleId:Constants.Acc_Vendor_Invoice_ModuleId);
                        fieldDataManagercntrl.createRequestMapToSaveTaxClassHistory(jobj);
                    }  
                if (rowtax != null) {
                    JSONObject jedjson1 = new JSONObject();
                    jedjson1 = new JSONObject();
                    jedjson1.put(SRNO, jeDetails.size() + 1);
                    jedjson1.put(COMPANYID, company.getCompanyID());
                    jedjson1.put(AMOUNT, rowtaxamount);
                    jedjson1.put(ACCOUNTID, rowtax.getAccount().getID());
                    jedjson1.put(DEBIT, true);
                    jedjson1.put(JEID, jeid);
                    //jedjson.put(DESCRIPTION, jobj.getString(DESC));
                    KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson1);
                    JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                    jeDetails.add(jed);
                    row.setGstJED(jed);
                    
                    if (!StringUtil.isNullOrEmpty(jobj.optString(Constants.customfield, null))) {
                        JSONArray jcustomarray = new JSONArray(jobj.optString(Constants.customfield, "[]"));
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                        customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                        customrequestParams.put("modulerecid", jed.getID());
                        customrequestParams.put("recdetailId", row.getInventory().getID());
                        customrequestParams.put("moduleid", isConsignment?Constants.Acc_Consignment_GoodsReceipt_ModuleId:Constants.Acc_Vendor_Invoice_ModuleId);
                        customrequestParams.put(Constants.companyKey, companyid);
                        customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            jedjson1.put("accjedetailcustomdata", jed.getID());
                            jedjson1.put("jedid", jed.getID());
                            jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson1);
                        }
                        /*
                         * Post additional jedetail if dimension is tagged for
                         * matching financial reports in advance search
                         */
                        sepatratedjedjson = new JSONObject();
                        sepatratedjedjson.put(SRNO, jeDetails.size() + 1);
                        sepatratedjedjson.put(COMPANYID, company.getCompanyID());
                        sepatratedjedjson.put(AMOUNT, rowtaxamount);
                        sepatratedjedjson.put(ACCOUNTID, vendorAccountId);
                        sepatratedjedjson.put(DEBIT, false);
                        sepatratedjedjson.put(JEID, jeid);
                        sepatratedjedjson.put("mainjedid", jed.getID());
                        sepatratedjedjson.put(Constants.ISSEPARATED, true);
                        jedresult = accJournalEntryobj.addJournalEntryDetails(sepatratedjedjson);
                        JournalEntryDetail controllAccjed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                        jeDetails.add(controllAccjed);
                        jedForCustomFields.put(controllAccjed.getID());
                    }
                    
                    /*
                        Define JE detail entry for Product line level Term Tax
                    */
//                    if(lineleveltaxtermamount!=0) {
//                        jedjson1 = new JSONObject();
//                        jedjson1.put(SRNO, jeDetails.size() + 1);
//                        jedjson1.put(COMPANYID, company.getCompanyID());
//                        jedjson1.put(AMOUNT, lineleveltaxtermamount);
//                        jedjson1.put(ACCOUNTID, rowtax.getAccount().getID());
//                        jedjson1.put(DEBIT, true);
//                        jedjson1.put(JEID, jeid);
//                        jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson1);
//                        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
//                        jeDetails.add(jed);
//                        
//                        if (!StringUtil.isNullOrEmpty(jobj.optString(Constants.customfield, null))) {
//                            JSONArray jcustomarray = new JSONArray(jobj.optString(Constants.customfield, "[]"));
//                            HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
//                            customrequestParams.put("customarray", jcustomarray);
//                            customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
//                            customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
//                            customrequestParams.put("modulerecid", jed.getID());
//                            customrequestParams.put("recdetailId", row.getInventory().getID());
//                            customrequestParams.put("moduleid", isConsignment?Constants.Acc_Consignment_GoodsReceipt_ModuleId:Constants.Acc_Vendor_Invoice_ModuleId);
//                            customrequestParams.put(Constants.companyKey, companyid);
//                            customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
//                            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
//                            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
//                                jedjson1.put("accjedetailcustomdata", jed.getID());
//                                jedjson1.put("jedid", jed.getID());
//                                jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson1);
//                            }
//                            /*
//                             * Post additional jedetail if dimension is tagged
//                             * for matching financial reports in advance search
//                             */
//                            sepatratedjedjson = new JSONObject();
//                            sepatratedjedjson.put(SRNO, jeDetails.size() + 1);
//                            sepatratedjedjson.put(COMPANYID, company.getCompanyID());
//                            sepatratedjedjson.put(AMOUNT, lineleveltaxtermamount);
//                            sepatratedjedjson.put(ACCOUNTID, vendorAccountId);
//                            sepatratedjedjson.put(DEBIT, false);
//                            sepatratedjedjson.put(JEID, jeid);
//                            sepatratedjedjson.put("mainjedid", jed.getID());
//                            sepatratedjedjson.put(Constants.ISSEPARATED, true);
//                            jedresult = accJournalEntryobj.addJournalEntryDetails(sepatratedjedjson);
//                            JournalEntryDetail controllAccjed = (JournalEntryDetail) jedresult.getEntityList().get(0);
//                            jeDetails.add(controllAccjed);
//                            jedForCustomFields.put(controllAccjed.getID());
//                        }
//                    }
                    
                }
            }
                // Indian Details Valuation Type -- start
                
                if(countryid == Constants.indian_country_id ){
                    if (jobj.has("productMRP") && !StringUtil.isNullOrEmpty(jobj.getString("productMRP"))) {
                        row.setMrpIndia(jobj.getDouble("productMRP"));
                    }
                    if(jobj.has("valuationType") && !StringUtil.isNullOrEmpty(jobj.getString("valuationType"))){ // Excise Details
                       row.setExciseValuationType(jobj.getString("valuationType"));
                       if((Constants.QUENTITY).equals(jobj.getString("valuationType"))){
                           if(jobj.has("reortingUOMExcise") && !StringUtil.isNullOrEmpty(jobj.getString("reortingUOMExcise"))){
                               UnitOfMeasure reportingUom=null;
                               KwlReturnObject custresult = accountingHandlerDAOobj.getObject(UnitOfMeasure.class.getName(),jobj.getString("reortingUOMExcise"));
                               reportingUom = (UnitOfMeasure) custresult.getEntityList().get(0);
                               row.setReportingUOMExcise(reportingUom);
                           }
                           if(jobj.has("reortingUOMSchemaExcise") && !StringUtil.isNullOrEmpty(jobj.getString("reortingUOMSchemaExcise"))){
                               UOMschemaType reportingUom=null;
                               KwlReturnObject custresult = accountingHandlerDAOobj.getObject(UOMschemaType.class.getName(),jobj.getString("reortingUOMSchemaExcise"));
                               reportingUom = (UOMschemaType) custresult.getEntityList().get(0);
                               row.setReportingSchemaTypeExcise(reportingUom);
                           }
                       }
                    }
                    if(jobj.has("valuationTypeVAT") && !StringUtil.isNullOrEmpty(jobj.getString("valuationTypeVAT"))){ // VAT Details
                       row.setVatValuationType(jobj.getString("valuationTypeVAT"));
                       if( (Constants.QUENTITY).equals(jobj.getString("valuationTypeVAT"))){
                           if(jobj.has("reportingUOMVAT") &&!StringUtil.isNullOrEmpty(jobj.getString("reportingUOMVAT"))){
                               UnitOfMeasure reportingUom=null;
                               KwlReturnObject custresult = accountingHandlerDAOobj.getObject(UnitOfMeasure.class.getName(), jobj.getString("reportingUOMVAT"));
                                 reportingUom = (UnitOfMeasure) custresult.getEntityList().get(0);
                                 row.setReportingUOMVAT(reportingUom);
                           }
                           if(jobj.has("reportingUOMSchemaVAT") && !StringUtil.isNullOrEmpty(jobj.getString("reportingUOMSchemaVAT"))){
                               UOMschemaType reportingUom=null;
                               KwlReturnObject custresult = accountingHandlerDAOobj.getObject(UOMschemaType.class.getName(),jobj.getString("reportingUOMSchemaVAT"));
                               reportingUom = (UOMschemaType) custresult.getEntityList().get(0);
                               row.setReportingSchemaVAT(reportingUom);
                           }
                       }
                    }
                }

                
                if(jobj.has("recTermAmount")) {
                    row.setRowTermAmount(jobj.optDouble("recTermAmount",0));
                }
                if(jobj.has("OtherTermNonTaxableAmount")) {
                    row.setOtherTermNonTaxableAmount(jobj.optDouble("OtherTermNonTaxableAmount",0));
                }
                rows.add(row);
                // add asset Details 
                boolean isInvRecord = false;
                if (updateInventoryFlag) {
                    isInvRecord = true;
                }

                
                if (isFixedAsset) {
                    if (jobj.has("assetDetails") && jobj.getString("assetDetails") != null) {
                        String assetDetails = jobj.getString("assetDetails");
                        requestParams.put("externalcurrencyrate", externalCurrencyRate);
                        if (!StringUtil.isNullOrEmpty(assetDetails)) {
                            Set<AssetDetails> assetDetailsSet = saveAssetDetails(paramJobj, jobj.getString("productid"), assetDetails, isInvRecord, true, false, isVILinkFromGR, isVILinkFromVQ, isVILinkFromPO,map);
                            Set<AssetInvoiceDetailMapping> assetInvoiceDetailMappings = saveAssetInvoiceDetailMapping(row.getInventory().getID(), assetDetailsSet, companyid, Constants.Acc_Vendor_Invoice_ModuleId);
                        }
                    }

                }                
                if (!StringUtil.isNullOrEmpty(jobj.optString(Constants.customfield, null))) {
                    /*
                     * Tagging dimension value to jedetails added in
                     * jedForCustomFields array
                     */
                    JSONArray jcustomarray = new JSONArray(jobj.optString(Constants.customfield, "[]"));
                    HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                    customrequestParams.put("customarray", jcustomarray);
                    customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                    customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);// Constants.Acc_JEDetail_recdetailId
                    customrequestParams.put("recdetailId", row.getInventory().getID());
                    customrequestParams.put("moduleid", isConsignment ? Constants.Acc_Consignment_GoodsReceipt_ModuleId : Constants.Acc_Vendor_Invoice_ModuleId);
                    customrequestParams.put(Constants.companyKey, companyid);
                    customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                    
                    for (int custCount = 0; custCount < jedForCustomFields.length(); custCount++) {
                        String jedForCust = jedForCustomFields.getString(custCount);
                        customrequestParams.put("modulerecid", jedForCust);

                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            JSONObject jedjson1 = new JSONObject();
                            jedjson1.put("accjedetailcustomdata", jedForCust);
                            jedjson1.put("jedid", jedForCust);
                            accJournalEntryobj.updateJournalEntryDetails(jedjson1);
                        }
                    }
                }
            }
            if (countryid == Constants.indian_country_id && rcmApplicable) {
                if (!isUnRegisteredDealer && !productNameRCMNotActivate.isEmpty()) {
                    throw new AccountingException(messageSource.getMessage("acc.common.rcmforproductnotactivated", new Object[]{StringUtils.join(productNameRCMNotActivate, ", ")}, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                }
            }
            //        gReceipt.setRows(rows);
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("saveGoodsReceiptRows : " + ex.getMessage(), ex);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("saveGoodsReceiptRows : " + ex.getMessage(), ex);
        } finally {
            ll.add(new double[]{totaldiscount, totalamount, taxamount});
            ll.add(rows);
            ll.add(prodList);
            ll.add(FinalTerm);
            ll.add(dealerExcise);
            ll.add(URDjeDetails);
        }
        return ll;
    }
    
    private Set<AssetDetails> saveAssetDetails(JSONObject paramJobj, String productId, String assetDetails, boolean invrecord, boolean isFromVendorInvoice, boolean isGRLinkFromVi, boolean isVILinkFromGR, boolean isVILinkFromVQ, boolean isVILinkFromPO,Map<String,String> map) throws SessionExpiredException, AccountingException, UnsupportedEncodingException {
        Set<AssetDetails> assetDetailsSet = new HashSet<AssetDetails>();
        try {
            JSONArray jArr = new JSONArray(assetDetails);
            String companyId = paramJobj.optString(COMPANYID);
            DateFormat df = authHandler.getDateOnlyFormat();

            
            // In case of linking no need to check for duplicacy at here, as duplicacy check
            // is implemented on js side.
            // but while creating new asset either by Purchase Invoice or by Goods Receipt it is need to check duplicacy.
            
            
            boolean isbeingCreateFromLinking = false;
            
            if(isGRLinkFromVi || isVILinkFromGR || isVILinkFromVQ || isVILinkFromPO){
                isbeingCreateFromLinking = true;
            }
            
            HashMap<String, Object> assetParams = new HashMap<String, Object>();
            assetParams.put("companyId", companyId);
//            assetParams.put("invrecord", !isFromVendorInvoice);
            KwlReturnObject assetResult = accProductObj.getAssetDetails(assetParams);
            
            List assetList = assetResult.getEntityList();

            List<String> assetNameList = new ArrayList<String>();

            Iterator it = assetList.iterator();
            while (it.hasNext()) {
                AssetDetails ad = (AssetDetails) it.next();
                assetNameList.add(ad.getAssetId().toLowerCase());
            }

            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                String assetId =  StringUtil.DecodeText(jobj.optString("assetId"));
                String assetName =  StringUtil.DecodeText(jobj.optString("assetName"));
                String location = jobj.getString("location");
                String department = jobj.getString("department");
                String assetdescription =  StringUtil.DecodeText(jobj.optString("assetdescription"));
                String assetUser = jobj.getString("assetUser");

                double cost = jobj.getDouble("cost");
                double costInForeignCurrency = jobj.getDouble("costInForeignCurrency");
                double salvageRate = jobj.getDouble("salvageRate");
                double salvageValue = jobj.getDouble("salvageValue");
                double salvageValueInForeignCurrency = jobj.getDouble("salvageValueInForeignCurrency");
                double accumulatedDepreciation = jobj.getDouble("accumulatedDepreciation");
                /* // ERP-16629: WDV field should be optional during asset creation
                double wdv = jobj.getDouble("wdv"); */
                double assetLife = jobj.getDouble("assetLife");
                double elapsedLife = jobj.getDouble("elapsedLife");
                double nominalValue = jobj.getDouble("nominalValue");

                String installationDateStr = jobj.getString("installationDate");
                Date installationDate = df.parse(installationDateStr);
                
                String purchaseDateStr = jobj.getString("purchaseDate");
                Date purchaseDate = df.parse(purchaseDateStr);
                
                // Check Whether asset of this name exist or not in case of GRO -

                if (!isbeingCreateFromLinking && assetNameList.contains(assetId.toLowerCase())) {// comparing two assetids in case insensitive manner
                    throw new AccountingException("Asset Id <b>" + assetId + "</b> is already generated through Fixed Asset Opening/Fixed Asset Goods Receipt/Fixed Asset Purchase Invoice.");
                }

                AssetDetails details = null;

                HashMap<String, Object> dataMap = new HashMap<String, Object>();
                KwlReturnObject assObj = accountingHandlerDAOobj.getObject(AssetDetails.class.getName(), assetId);
                details = (AssetDetails) assObj.getEntityList().get(0);

                //UPDATE ASSET COST WHILE CREATING INVOICE THROUGH GRN, AS IT IS ENTERED IN INVOICE.
                if (isVILinkFromGR && details != null) {
                    HashMap<String, Object> grAssMap = new HashMap<String, Object>();
                    grAssMap.put("assetDetailId", assetId);
                    grAssMap.put("companyId", companyId);
                    grAssMap.put("cost", cost);
                    grAssMap.put("location", location);
                    grAssMap.put("department", department);
                    grAssMap.put("assetdescription", assetdescription);
                    grAssMap.put("assetUser", assetUser);
                    grAssMap.put("costInForeignCurrency", costInForeignCurrency);
                    grAssMap.put("salvageRate", salvageRate);
                    grAssMap.put("salvageValue", salvageValue);
                    grAssMap.put("salvageValueInForeignCurrency", salvageValueInForeignCurrency);
//                    grAssMap.put("wdv", wdv);
                    grAssMap.put("assetLife", assetLife);
                    grAssMap.put("elapsedLife", elapsedLife);
                    grAssMap.put("nominalValue", nominalValue);
                    grAssMap.put("productId", details.getProduct().getID());

                    accProductObj.updateAssetDetails(grAssMap);
                } else if (isVILinkFromGR && details == null) {// in case of edition of linked vendor invoice details object will be null, because we are deleting it in previous lines in saveGoodsReceipt() method.
                    HashMap<String, Object> grAssMap = new HashMap<String, Object>();
                    grAssMap.put("assetId", assetName);
                    grAssMap.put("companyId", companyId);
                    grAssMap.put("invrecord", true);
                    KwlReturnObject kro = accProductObj.getAssetDetails(grAssMap);// will give you asset details object ehich is created from selected GRO in Vendor Invoice, whose cost you need to update in case of edit.
                    details = (AssetDetails) kro.getEntityList().get(0);// asset details object created from selected GRO.

                    grAssMap = new HashMap<String, Object>();
                    grAssMap.put("assetDetailId", details.getId());
                    grAssMap.put("companyId", companyId);
                    grAssMap.put("cost", cost);
                    grAssMap.put("costInForeignCurrency", costInForeignCurrency);
                    grAssMap.put("location", location);
                    grAssMap.put("department", department);
                    grAssMap.put("assetdescription", assetdescription);
                    grAssMap.put("salvageRate", salvageRate);
                    grAssMap.put("salvageValue", salvageValue);
                    grAssMap.put("salvageValueInForeignCurrency", salvageValueInForeignCurrency);
//                    grAssMap.put("wdv", wdv);
                    grAssMap.put("assetLife", assetLife);
                    grAssMap.put("elapsedLife", elapsedLife);
                    grAssMap.put("nominalValue", nominalValue);
                    grAssMap.put("assetUser", assetUser);
                    grAssMap.put("productId", details.getProduct().getID());
                    // updating cost of asset created From GRO
                    accProductObj.updateAssetDetails(grAssMap);
                }


                if (isGRLinkFromVi || isVILinkFromGR || isVILinkFromVQ || isVILinkFromPO) {
                    dataMap.put("assetId", assetName);
                } else {
                    dataMap.put("assetId", assetId);
                }

                dataMap.put("location", location);
                dataMap.put("department", department);
                dataMap.put("assetdescription", assetdescription);
                dataMap.put("assetUser", assetUser);
                dataMap.put("cost", cost);
                dataMap.put("costInForeignCurrency", costInForeignCurrency);
                dataMap.put("salvageRate", salvageRate);
                dataMap.put("salvageValue", salvageValue);
                dataMap.put("salvageValueInForeignCurrency", salvageValueInForeignCurrency);
                dataMap.put("accumulatedDepreciation", accumulatedDepreciation);
//                dataMap.put("wdv", wdv);
                dataMap.put("assetLife", assetLife);
                dataMap.put("elapsedLife", elapsedLife);
                dataMap.put("nominalValue", nominalValue);
                dataMap.put("productId", productId);
                dataMap.put("installationDate", installationDate);
                dataMap.put("purchaseDate", purchaseDate);
                dataMap.put("companyId", companyId);
                dataMap.put("invrecord", invrecord);
                dataMap.put("assetSoldFlag", 0);

                KwlReturnObject result = accProductObj.saveAssetDetails(dataMap);
                AssetDetails row = (AssetDetails) result.getEntityList().get(0);
                String machine = jobj.optString("machine","");
                if (!StringUtil.isNullOrEmpty(machine)) {
                map.put(machine, row.getId());
                }
                if (jobj.has("customfield")) {
                    String customfield = jobj.getString("customfield");
                    if (!StringUtil.isNullOrEmpty(customfield)) {
                        HashMap<String, Object> DOMap = new HashMap<String, Object>();
                        JSONArray jcustomarray = new JSONArray(customfield);
                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", "AssetDetails");
                        customrequestParams.put("moduleprimarykey", "AssetDetailsId");
                        customrequestParams.put("modulerecid", row.getId());
                        customrequestParams.put("moduleid", Constants.Acc_FixedAssets_Details_ModuleId);
                        customrequestParams.put("companyid", companyId);
                        DOMap.put("id", row.getId());
                        customrequestParams.put("customdataclasspath", Constants.Acc_FixedAsset_Details_Custom_Data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            DOMap.put("accassetdetailscustomdata", row.getId());
                            accProductObj.updateAssetDetails(DOMap);
                        }
                    }
                }
                //save serial no detail in case of GR only not for invoice
//                if ((invrecord || isFromVendorInvoice || isGRLinkFromVi)  && jobj.has("batchdetails") && !jobj.isNull("batchdetails")) {  //saving batchdetail in case of fixed asset purchase invoice and in case of Fixed asset Gr which is linked from purchase invoice
                if (invrecord && jobj.has("batchdetails") && !jobj.isNull("batchdetails")) {  //saving batchdetail in case of fixed asset purchase invoice and in case of Fixed asset Gr which is linked from purchase invoice
                    String batchDetails = jobj.getString("batchdetails");
                    if (!StringUtil.isNullOrEmpty(batchDetails) && !batchDetails.equalsIgnoreCase("null")) {
                        String assetMainId = row.getId();
                        dataMap.put("assetDetailId", assetMainId);
//                        ProductBatch productBatch = saveAssetBatch(batchDetails, assetMainId, productId, request);
                        saveAssetNewBatch(batchDetails, productId, paramJobj, assetMainId);
//                        if (productBatch != null) {
//                            dataMap.put("batch", productBatch.getId());
//                            dataMap.put("id", row.getId());
//                            result = accProductObj.updateAssetDetails(dataMap);
//                            row = (AssetDetails) result.getEntityList().get(0);
//                        }
                    }
                }

                AssetDetails assetDetail = (AssetDetails) result.getEntityList().get(0);

                assetDetailsSet.add(assetDetail);
            }
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Processing Data");
        } catch (ServiceException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Processing Data");
        } catch (ParseException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Processing Data");
        } catch (JSONException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            throw new AccountingException("Error While Processing Data");
        }
        return assetDetailsSet;
    }
    
    public void saveAssetNewBatch(String batchJSON, String productId, JSONObject paramJobj, String documentId) throws JSONException, ParseException, SessionExpiredException, ServiceException, UnsupportedEncodingException, AccountingException {
        JSONArray jArr = new JSONArray(batchJSON);
        String purchasebatchid = "";
        KwlReturnObject kmsg = null;
        double ActbatchQty = 1;
        double batchQty = 0;
        boolean isBatch = false;
        boolean isserial = false;
        boolean isLocationForProduct = false;
        boolean isWarehouseForProduct = false;
        boolean isBatchForProduct = false;
        boolean isSerialForProduct = false;
        boolean isRowForProduct = false;
        boolean isRackForProduct = false;
        boolean isBinForProduct = false;
        DateFormat df = authHandler.getDateOnlyFormat();
        String companyid = paramJobj.optString(COMPANYID);
        String transType = paramJobj.optString("transType", "0");
        KwlReturnObject capresult = accountingHandlerDAOobj.getObject(CompanyAccountPreferences.class.getName(), companyid);
        CompanyAccountPreferences preferences = (CompanyAccountPreferences) capresult.getEntityList().get(0);
        isBatch = preferences.isIsBatchCompulsory();
        isserial = preferences.isIsSerialCompulsory();

//<<<<<<< .mine
        if (!StringUtil.isNullOrEmpty(productId)) {
            KwlReturnObject prodresult = accProductObj.getObject(Product.class.getName(), productId);
            Product product = (Product) prodresult.getEntityList().get(0);
            isLocationForProduct = product.isIslocationforproduct();
            isWarehouseForProduct = product.isIswarehouseforproduct();
            isBatchForProduct = product.isIsBatchForProduct();
            isSerialForProduct = product.isIsSerialForProduct();
             isRowForProduct = product.isIsrowforproduct();
            isRackForProduct = product.isIsrackforproduct();
            isBinForProduct = product.isIsbinforproduct();
//=======
//        String userName = "";
//        Company company = null;
//        GoodsReceiptOrder goodsReceiptObj = null;
//        String baseUrl = "";       
//        int level=0;
//        CompanyAccountPreferences preferences=null;
//        HashMap<String, Object> ApproveMap =new HashMap();
//        if (emailMap.containsKey("userName") && emailMap.get("userName") != null) {
//            userName = (String)emailMap.get("userName");
//        }
//        if (emailMap.containsKey("company") && emailMap.get("company") != null) {
//             company = (Company)emailMap.get("company");
//>>>>>>> .r3119445
        }
        NewProductBatch productBatch = null;
        String productBatchId = "";
        //Save Batch detail for both  option for serial no and batch also as if batch option is off then also we are generating batch in backend
        for (int i = 0; i < jArr.length(); i++) {
            JSONObject jSONObject = new JSONObject(jArr.get(i).toString());
            if (jSONObject.has("quantity") && !jSONObject.getString("quantity").equals("undefined") && !jSONObject.getString("quantity").equals("undefined")) {
                ActbatchQty = jSONObject.getDouble("quantity");
            }
            if (batchQty == 0) {
                batchQty = jSONObject.getDouble("quantity");
            }
            if ((isLocationForProduct || isWarehouseForProduct || isBatchForProduct || isRowForProduct || isRackForProduct  || isBinForProduct) && (batchQty == ActbatchQty)) {

                HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
                pdfTemplateMap.put("companyid", companyid);
                pdfTemplateMap.put("name",  StringUtil.DecodeText(jSONObject.optString("batch")));
                if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgdate"))) {
                    pdfTemplateMap.put("mfgdate", authHandler.getDateOnlyFormat().parse(jSONObject.getString("mfgdate")));
                }
                if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                    pdfTemplateMap.put("expdate", authHandler.getDateOnlyFormat().parse(jSONObject.getString("expdate")));
                }
                pdfTemplateMap.put("quantity", jSONObject.getString("quantity"));
                pdfTemplateMap.put("balance", jSONObject.getString("balance"));
                pdfTemplateMap.put("location", jSONObject.getString("location"));
                pdfTemplateMap.put("product", productId);
                pdfTemplateMap.put("asset", documentId);   //stored the assetid of the asset
                pdfTemplateMap.put("warehouse", jSONObject.getString("warehouse"));
                
                pdfTemplateMap.put("row", jSONObject.getString("row"));
                pdfTemplateMap.put("rack", jSONObject.getString("rack"));
                pdfTemplateMap.put("bin", jSONObject.getString("bin"));

                pdfTemplateMap.put("isopening", false);
                pdfTemplateMap.put("transactiontype", transType);//This is GRN Type Tranction  
                pdfTemplateMap.put("ispurchase", true);
                kmsg = accCommonTablesDAO.saveNewBatchForProduct(pdfTemplateMap);

//<<<<<<< .mine
                if (kmsg != null && kmsg.getEntityList().size() != 0) {
                    productBatch = (NewProductBatch) kmsg.getEntityList().get(0);
                    productBatchId = productBatch.getId();
//=======
//          if (emailMap.containsKey("ApproveMap") && emailMap.get("ApproveMap") != null) {
//                ApproveMap = (HashMap<String, Object>) emailMap.get("ApproveMap");
//        }    
//          if (emailMap.containsKey("preferences") && emailMap.get("preferences") != null) {
//                preferences = (CompanyAccountPreferences)  emailMap.get("preferences");
//        }    
//          if (emailMap.containsKey("level") && emailMap.get("level") != null) {
//                level = (int)  emailMap.get("level");
//        }    
//                 
//                 
//        String sendorInfo = (!company.isEmailFromCompanyCreator()) ? Constants.ADMIN_EMAILID : authHandlerDAOObj.getSysEmailIdByCompanyID(company.getCompanyID());
//        String creatormail = company.getCreator().getEmailID();
//        String documentcreatoremail = (goodsReceiptObj != null && goodsReceiptObj.getCreatedby() != null) ? goodsReceiptObj.getCreatedby().getEmailID() : "";
//        String fname = company.getCreator().getFirstName() == null ? "" : company.getCreator().getFirstName();
//        String lname = company.getCreator().getLastName() == null ? "" : company.getCreator().getLastName();
//        String creatorname = fname + " " + lname;
//        String approvalpendingStatusmsg = "";
//        HashMap<String, Object> qdDataMap = new HashMap<String, Object>();
//        ArrayList<String> emailArray = new ArrayList<>();
//        qdDataMap.put(Constants.companyKey, company.getCompanyID());
//        qdDataMap.put("level", level);
//        qdDataMap.put(Constants.moduleid, Constants.Acc_Goods_Receipt_ModuleId);
////        emailArray = commonFnControllerService.getUserApprovalEmail(qdDataMap);
//        emailArray.add(creatormail);
//        if (!StringUtil.isNullOrEmpty(documentcreatoremail) && !creatormail.equalsIgnoreCase(documentcreatoremail)) {
//                    emailArray.add(documentcreatoremail);
//>>>>>>> .r3119445
                }
//<<<<<<< .mine
//               
                HashMap<String, Object> documentMap = new HashMap<String, Object>();
                documentMap.put("quantity", jSONObject.getString("quantity"));
                documentMap.put("batchmapid", productBatchId);
                documentMap.put("documentid", documentId);
                documentMap.put("transactiontype", transType);//This is GRN Type Tranction
                if (jSONObject.has("mfgdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("mfgdate"))) {
                    documentMap.put("mfgdate", authHandler.getDateOnlyFormat().parse(jSONObject.getString("mfgdate")));
                }
                if (jSONObject.has("expdate") && !StringUtil.isNullOrEmpty(jSONObject.getString("expdate"))) {
                    documentMap.put("expdate", authHandler.getDateOnlyFormat().parse(jSONObject.getString("expdate")));
                }
//=======
//        String[] emails = {};
//        emails = emailArray.toArray(emails);
//        if (!StringUtil.isNullOrEmpty(preferences.getApprovalEmails())) {
//            String[] compPrefMailIds = preferences.getApprovalEmails().split(";");
//            emails = AccountingManager.getMergedMailIds(emails, compPrefMailIds);
//        }
//        
//        if (goodsReceiptObj.getApprovestatuslevel() < 11) {
//            qdDataMap.put("ApproveMap", ApproveMap);
//            approvalpendingStatusmsg = commonFnControllerService.getApprovalstatusmsg(qdDataMap);
//        }
//         Map<String, Object> mailParameters = new HashMap();
//        mailParameters.put("Number", goodsReceiptObj.getGoodsReceiptOrderNumber());
//        mailParameters.put("userName", userName);
//        mailParameters.put("emails", emails);
//        mailParameters.put("sendorInfo", Constants.ADMIN_EMAILID);
//        mailParameters.put("moduleName", Constants.Goods_Receipt);
//        mailParameters.put("addresseeName", "All");
//        mailParameters.put("companyid", company.getCompanyID());
//        mailParameters.put("baseUrl", baseUrl);
//        mailParameters.put("approvalstatuslevel", level);
//        mailParameters.put("approvalpendingStatusmsg", approvalpendingStatusmsg);
//        if (emails.length > 0) {
//            accountingHandlerDAOobj.sendApprovedEmails(mailParameters);
//        }
//    }
//    
//    
//    /*---Function to save approval history , If any document is approved at some level------   */
//    public List saveApprovalHistoryForGoodsReceiptOrder(HashMap approvalHistoryMap) throws ServiceException {
//>>>>>>> .r3119445

                accCommonTablesDAO.saveBatchDocumentMapping(documentMap);
            }
            batchQty--;


            if (isSerialForProduct) {  //if serial no option is on then only save the serial no details 

                HashMap<String, Object> pdfTemplateMap = new HashMap<String, Object>();
                pdfTemplateMap.put("id", jSONObject.getString("serialnoid"));
                pdfTemplateMap.put("companyid", companyid);
                pdfTemplateMap.put("product", productId);
                pdfTemplateMap.put("asset", documentId);   //stored the assetid of the asset
                pdfTemplateMap.put("name",  StringUtil.DecodeText(jSONObject.optString("serialno")));
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.getString("expstart"))) {
                    pdfTemplateMap.put("expfromdate", authHandler.getDateOnlyFormat().parse(jSONObject.getString("expstart")));
                }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.getString("expend"))) {
                    pdfTemplateMap.put("exptodate", authHandler.getDateOnlyFormat().parse(jSONObject.getString("expend")));
                }
                pdfTemplateMap.put("batch", productBatchId);
                pdfTemplateMap.put("transactiontype", transType);//This is GRN Type Tranction  
                pdfTemplateMap.put("quantity", "1");//This is GRN Type Tranction  
                pdfTemplateMap.put("ispurchase", true);
                kmsg = accCommonTablesDAO.saveNewSerialForBatch(pdfTemplateMap);
                String serialDetailsId = "";
                if (kmsg != null && kmsg.getEntityList().size() != 0) {
                    NewBatchSerial serialDetails = (NewBatchSerial) kmsg.getEntityList().get(0);
                    serialDetailsId = serialDetails.getId();
                }

                HashMap<String, Object> documentMap = new HashMap<String, Object>();
                documentMap.put("quantity", 1);
                documentMap.put("serialmapid", serialDetailsId);
                documentMap.put("documentid", documentId);
                documentMap.put("transactiontype", transType);//This is GRN Type Tranction  
                if (jSONObject.has("expstart") && !StringUtil.isNullOrEmpty(jSONObject.getString("expstart"))) {
                    documentMap.put("expfromdate", authHandler.getDateOnlyFormat().parse(jSONObject.getString("expstart")));
                }
                if (jSONObject.has("expend") && !StringUtil.isNullOrEmpty(jSONObject.getString("expend"))) {
                    documentMap.put("exptodate", authHandler.getDateOnlyFormat().parse(jSONObject.getString("expend")));
                }

            //    accCommonTablesDAO.saveSerialDocumentMapping(documentMap);
                 //Code to Send Serial Numbers to Inventory
                KwlReturnObject krObj = accCommonTablesDAO.saveSerialDocumentMapping(documentMap);

                SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) krObj.getEntityList().get(0);
                if (jSONObject.has("customfield")) {
                    String customfield = jSONObject.getString("customfield");
                    if (!StringUtil.isNullOrEmpty(customfield)) {
                        HashMap<String, Object> DOMap = new HashMap<String, Object>();
                        JSONArray jcustomarray = new JSONArray(customfield);

                        HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                        customrequestParams.put("customarray", jcustomarray);
                        customrequestParams.put("modulename", "SerialDocumentMapping");
                        customrequestParams.put("moduleprimarykey", "SerialDocumentMappingId");
                        customrequestParams.put("modulerecid", serialDocumentMapping.getId());
                        customrequestParams.put("moduleid", Constants.SerialWindow_ModuleId);
                        customrequestParams.put("companyid", companyid);
                        DOMap.put("id", serialDocumentMapping.getId());
                        customrequestParams.put("customdataclasspath", Constants.Acc_Serial_custom_data_classpath);
                        KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                        if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                            DOMap.put("serialcustomdataref", serialDocumentMapping.getId());
                            accCommonTablesDAO.updateserialcustomdata(DOMap);
                        }
                    }
                }

            }else{
               batchQty=0; 
            }
        }

    }
    
    public List saveExpenseGRRows(JSONObject paramJobj, String jeid, Company company, Set<JournalEntryDetail> jeDetails, KWLCurrency currency, double externalCurrencyRate, String landedInvoiceJEId, HashSet<JournalEntryDetail> landedInvoiceJEDetails, ExtraCompanyPreferences extraPreferences) throws ServiceException, SessionExpiredException, AccountingException, JSONException, UnsupportedEncodingException {
        Set<ExpenseGRDetail> rows = new HashSet<ExpenseGRDetail>();
        double totaldiscount = 0, totalamount = 0, taxamount = 0 , lineleveltaxamount = 0; double totaltermamount = 0;
        List ll = new ArrayList();
        JSONArray jArr = new JSONArray(paramJobj.optString(EXPENSEDETAIL));
        try {
            String countryId = company.getCountry().getID();
            String landingCostCategory = paramJobj.optString("landingCostCategoryCombo");
            LandingCostCategory landedCostCategory = null;
            if (extraPreferences.isActivelandingcostofitem() && !StringUtil.isNullOrEmpty(landingCostCategory) && !landingCostCategory.equalsIgnoreCase("NOT APPLICABLE")) {
                KwlReturnObject landingResult = accountingHandlerDAOobj.getObject(LandingCostCategory.class.getName(), landingCostCategory);
                landedCostCategory = (landingResult != null && landingResult.getEntityList() != null && !landingResult.getEntityList().isEmpty()) ? (LandingCostCategory) landingResult.getEntityList().get(0) : null;

                //ERP-39781 Adding term based check to include/exclude term amount from landed cost JE
                totaltermamount += paramJobj.optDouble("totaltermamountforlandedcost", 0);
            }
            KwlReturnObject icomp = accountingHandlerDAOobj.getObject(IndiaComplianceCompanyPreferences.class.getName(), paramJobj.optString(COMPANYID));
            IndiaComplianceCompanyPreferences complianceCompanyPreferences = (IndiaComplianceCompanyPreferences) icomp.getEntityList().get(0);
            Map<String, Object> requestParams = new HashMap<String, Object>();
            requestParams.put(COMPANYID, paramJobj.optString(COMPANYID));
            requestParams.put(GCURRENCYID, paramJobj.optString(Constants.globalCurrencyKey));
            requestParams.put(DATEFORMAT, authHandler.getDateOnlyFormat());
            String linkMode = paramJobj.optString("fromLinkCombo");
            boolean gstIncluded = paramJobj.optBoolean("includingGST");
            for (int i = 0; i < jArr.length(); i++) {
                JSONObject jobj = jArr.getJSONObject(i);
                ExpenseGRDetail row = new ExpenseGRDetail();
                String ExpenseGRDetailID = StringUtil.generateUUID();
                row.setID(ExpenseGRDetailID);
                row.setSrno(i + 1);
                row.setWasRowTaxFieldEditable(true);// this field has been added after making row tax field editable. its value will be set always true from its implementation. i.e from 28-jan-2014.REASON -  when Row Tax Amount field was not editable then tax calculation was taking place according to tax percent, as selected From Tax combo in JS Side.
                row.setCompany(company);
                row.setRate(jobj.getDouble(RATE));
                row.setIsdebit(jobj.getBoolean("debit"));
                row.setRateExcludingGst(jobj.optDouble("rateIncludingGstEx", 0.0));
                row.setGstCurrencyRate(jobj.optDouble("gstCurrencyRate", 0.0));
                row.setAmount(jobj.getDouble(CALAMOUNT));
                if(gstIncluded){
                    if(jobj.has("lineleveltermamount")){
                        row.setLineLevelTermAmount(jobj.optDouble("lineleveltermamount",0));
                    }
                }
                if (!StringUtil.isNullOrEmpty(countryId) && Constants.indian_country_id == Integer.parseInt(company.getCountry().getID()) && jobj.has("appliedTDS") && !StringUtil.isNullOrEmpty(jobj.optString("appliedTDS"))) {// only for indian country
                    JSONArray jArrAppliedTDS = new JSONArray(jobj.optString("appliedTDS"));
                    if (jArrAppliedTDS.length() > 0) {
                        JSONObject jobjAppliedTDS = jArrAppliedTDS.getJSONObject(0);
                        KwlReturnObject assObj = accountingHandlerDAOobj.getObject(MasterItem.class.getName(), jobjAppliedTDS.getString("natureofpayment"));
                        MasterItem nop = (MasterItem) assObj.getEntityList().get(0);
                        KwlReturnObject tdsAccresult = accountingHandlerDAOobj.getObject(Account.class.getName(), jobjAppliedTDS.getString("tdsaccountid")); // (Tax)session.get(Tax.class, taxid);
                        Account tdsPayableAccount = (Account) tdsAccresult.getEntityList().get(0);
                        row.setTdsAssessableAmount(jobjAppliedTDS.getDouble("tdsAssessableAmount"));
                        row.setNatureOfPayment(nop);
                        row.setTdsRuleId(jobjAppliedTDS.getInt("ruleid"));
                        row.setTdsRate(jobjAppliedTDS.getDouble("tdspercentage"));
                        row.setTdsLineAmount(jobjAppliedTDS.getDouble("tdsamount"));
                        row.setTdsPayableAccount(tdsPayableAccount);
                        if (jobj.has("tdsjemappingID") && jobjAppliedTDS.getDouble("tdsamount")<=0.0) {// Edit Case Set TDS JE mapping
                            KwlReturnObject tdsJEmapObj = accountingHandlerDAOobj.getObject(TdsJEMapping.class.getName(), jobj.getString("tdsjemappingID"));
                            TdsJEMapping tdje=(TdsJEMapping) tdsJEmapObj.getEntityList().get(0);
                            row.setTdsJEMapping(tdje);
                        }
                        if (jobjAppliedTDS.has("advancePaymentDetails") && new JSONArray(jobjAppliedTDS.optString("advancePaymentDetails")).length() > 0) {
                            HashSet advancepaymentmapping = accGoodsReceiptobj.saveUpdateAdvancePaymentMapping(jobjAppliedTDS, null, row, company);
                            if (!advancepaymentmapping.isEmpty() || advancepaymentmapping.size() > 0) {
                                row.setGoodsReceiptDetailPaymentMapping(advancepaymentmapping);
                            }
                        }
                    }
                }
                //If linking PO
                if (!StringUtil.isNullOrEmpty(linkMode)) {
                    if (linkMode.equalsIgnoreCase("Purchase Order")) {
                        KwlReturnObject podresult = accountingHandlerDAOobj.getObject(ExpensePODetail.class.getName(), (StringUtil.isNullOrEmpty(jobj.getString("linkto"))) ? jobj.getString("rowid") : jobj.getString("savedrowid"));
                        ExpensePODetail epod = (ExpensePODetail) podresult.getEntityList().get(0);
                        row.setExpensePODetail(epod);
                    }
                }
                
                KwlReturnObject accresult = accountingHandlerDAOobj.getObject(Account.class.getName(), jobj.getString(ACCOUNTID)); // (Tax)session.get(Tax.class, taxid);
                Account account = (Account) accresult.getEntityList().get(0);
                row.setAccount(account);
                
                    row.setDescription( StringUtil.DecodeText(jobj.optString(DESC)));    //To avoid %20 & special char problems	//ERP-6523
               
                if (jobj.getBoolean("debit")) {
                    totalamount += jobj.getDouble(RATE);
                } else {
                        totalamount -= jobj.getDouble(RATE);
                    }
                    
                Discount discount = null;
                double disc = jobj.getDouble(PRDISCOUNT);
                int rowdisc = jobj.getInt("discountispercent");
                if (disc != 0.0) {
                    Map<String, Object> discMap = new HashMap();
                    discMap.put(DISCOUNT, disc);
                    /*
                     * rowdisc=1 (discountispercent is percentage)
                     * rowdisc=0 (discountispercent is flat)
                     */
                    discMap.put(INPERCENT, (rowdisc == 1) ? true : false);
                    discMap.put(ORIGINALAMOUNT, jobj.getDouble(RATE));
                    discMap.put(COMPANYID, company.getCompanyID());
                    KwlReturnObject dscresult = accDiscountobj.updateDiscount(discMap);
                    discount = (Discount) dscresult.getEntityList().get(0);
                    row.setDiscount(discount);
                    if (jobj.optBoolean("debit")) { // calculating total discount for expence type document.
                        totaldiscount += discount.getDiscountValue();
                    } else {
                        totaldiscount -= discount.getDiscountValue();
                    }
                }
                String rowtaxid = "";
                if (!StringUtil.isNullOrEmpty(jobj.optString(PRTAXID, null)) && jobj.optString(PRTAXID).equalsIgnoreCase("None")) {
                    rowtaxid = null;    
                } else {
                    rowtaxid = jobj.optString(PRTAXID,null);
                }
                double rowtaxamount=0;
                if (!StringUtil.isNullOrEmpty(rowtaxid)) {
//                    boolean taxExist = false;
                    KwlReturnObject txresult = accountingHandlerDAOobj.getObject(Tax.class.getName(), rowtaxid); // (Tax)session.get(Tax.class, taxid);
                    Tax rowtax = (Tax) txresult.getEntityList().get(0);
                    if (rowtax == null) {
                        throw new AccountingException(messageSource.getMessage("acc.so.taxcode", null, Locale.forLanguageTag(paramJobj.getString(Constants.language))));
                    } else {
                        row.setTax(rowtax);
                        rowtaxamount= StringUtil.getDouble(jobj.getString(TAXAMOUNT));
                        row.setRowTaxAmount(rowtaxamount);
                        row.setIsUserModifiedTaxAmount(jobj.optBoolean(Constants.isUserModifiedTaxAmount, false));//ERM-1085
                        if (jobj.getBoolean("debit")) {
                            taxamount += rowtaxamount;
                        } else {
                            taxamount -= rowtaxamount;
                        }
                            
//                        if (taxamount > 0) {
//                            Iterator itr = jeDetails.iterator();
//                            while (itr.hasNext()) {
//                                jed = (JournalEntryDetail) itr.next();
//                            if (jeDetails != null && !jeDetails.isEmpty()) {
//                                for (JournalEntryDetail jed : jeDetails) {
//                                    if (jed.getAccount() == rowtax.getAccount()) {
//                                        //                                          jed.setAmount(jed.getAmount() + row.getRate() * inventory.getQuantity());
//                                        JSONObject jedjson = new JSONObject();
//                                        jedjson.put(JEDID, jed.getID());
//                                        jedjson.put(AMOUNT, jed.getAmount() + rowtaxamount);
//                                        jedjson.put(DESCRIPTION, StringUtil.DecodeText(jobj.optString(DESC)));
//                                        KwlReturnObject jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
//                                        jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
//                                        taxExist = true;
//                                        break;
//                                    }
//                                }
//                            }
//                            if (!taxExist) {
                                JSONObject jedjson = new JSONObject();
                                jedjson = new JSONObject();
                                jedjson.put(SRNO, jeDetails.size() + 1);
                                jedjson.put(COMPANYID, company.getCompanyID());
                                jedjson.put(AMOUNT, rowtaxamount);
                                jedjson.put(ACCOUNTID, rowtax.getAccount().getID());
                                jedjson.put(DEBIT, jobj.getBoolean("debit"));
                                jedjson.put(JEID, jeid);
                                jedjson.put(DESCRIPTION, jobj.getString(DESC));
                                KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                                JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                                jeDetails.add(jed);
                                row.setGstJED(jed);
                                
//                            }
//                        }
                        // Add Custom fields details 
                        if (!StringUtil.isNullOrEmpty(jobj.optString(Constants.customfield, null))) {
                            JSONArray jcustomarray = new JSONArray(jobj.optString(Constants.customfield, "[]"));
                            HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                            customrequestParams.put("customarray", jcustomarray);
                            customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                            customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);
                            customrequestParams.put("modulerecid", jed.getID());
                            customrequestParams.put("recdetailId", row.getID());
                            customrequestParams.put(Constants.moduleid, Constants.Acc_Vendor_Invoice_ModuleId);
                            customrequestParams.put(Constants.companyKey, row.getCompany().getCompanyID());
                            customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                            KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                            if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                                jedjson.put("accjedetailcustomdata", jed.getID());
                                jedjson.put("jedid", jed.getID());
                                jedjson.put(DESCRIPTION,  StringUtil.DecodeText(jobj.optString(DESC)));
                                jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
                            }
                        }
                    }
                }
                JSONObject jedjson = new JSONObject();
                jedjson.put(SRNO, jeDetails.size() + 1);
                jedjson.put(COMPANYID, company.getCompanyID());
                if (!paramJobj.optBoolean("includingGST")) {
                    jedjson.put(AMOUNT, jobj.getDouble(RATE));
                } else {
                    jedjson.put(AMOUNT, jobj.getDouble(RATE)-rowtaxamount);  // ERP-24202
                }
                    
                jedjson.put(ACCOUNTID, account.getID());
                jedjson.put(DEBIT, jobj.getBoolean("debit"));
                jedjson.put(JEID, jeid);
                jedjson.put(DESCRIPTION, jobj.getString(DESC));
                KwlReturnObject jedresult = accJournalEntryobj.addJournalEntryDetails(jedjson);
                JournalEntryDetail jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                jeDetails.add(jed);
                rows.add(row);
                if (!StringUtil.isNullOrEmpty(landedInvoiceJEId)) {
                    /**
                     * JournalEntryDetail to be added for account used in
                     * expense account. Add JournalEntryDetail only if
                     * landedCostCategory and perpetual inventory valuation is activated at company level
                     */
                    //ERM-971 taxes in landed cost separate JEdetail entry for tax account in the landed cost JE no 2
                    boolean isMalaysiaOrSingaporeCompany = false;
                    String countrycode = company.getCountry().getID();
                    if (countrycode.equalsIgnoreCase(String.valueOf(Constants.malaysian_country_id)) || countrycode.equalsIgnoreCase(String.valueOf(Constants.SINGAPOREID))) {
                        isMalaysiaOrSingaporeCompany = true;
                    }
                    
                    if (row.getTax() != null && isMalaysiaOrSingaporeCompany) {
                        if (row.getTax().isInputCredit()) {
                            JSONObject ljedjson = new JSONObject();
                            ljedjson.put(SRNO, landedInvoiceJEDetails.size() + 1);
                            ljedjson.put(COMPANYID, company.getCompanyID());
                            ljedjson.put(AMOUNT, rowtaxamount);
                            ljedjson.put(ACCOUNTID, row.getTax().getAccount().getID());
                            ljedjson.put(DEBIT, !jobj.getBoolean("debit"));
                            ljedjson.put(JEID, landedInvoiceJEId);
                            ljedjson.put(DESCRIPTION, jobj.getString(DESC));
                            KwlReturnObject ljedresult = accJournalEntryobj.addJournalEntryDetails(ljedjson);
                            JournalEntryDetail ljed = (JournalEntryDetail) ljedresult.getEntityList().get(0);
                            landedInvoiceJEDetails.add(ljed);
                        } else {
                            if (jobj.getBoolean("debit")) {
                                lineleveltaxamount += rowtaxamount;
                            } else {
                                lineleveltaxamount -= rowtaxamount;
                            }
                        }
                    } 
                    if ((landedCostCategory == null || (landedCostCategory != null && LandingCostAllocationType.getByValue(landedCostCategory.getLcallocationid()) != LandingCostAllocationType.CUSTOMDUTY)) || (landedCostCategory != null && LandingCostAllocationType.getByValue(landedCostCategory.getLcallocationid()) == LandingCostAllocationType.CUSTOMDUTY && !StringUtil.isNullOrEmpty(complianceCompanyPreferences.getIGSTAccount()) && !account.getID().equals(complianceCompanyPreferences.getIGSTAccount()))) {
                        /**
                         * Include Expense invoice account in landed cost
                         * calculation only in following cases: 1.
                         * landedCostCategory is NULL. 2. landedCostCategory is
                         * other than CUSTOM_DUTY allocation ID. 3.
                         * landedCostCategory is CUSTOM_DUTY(Only for Indian
                         * Countries) then it should not include IGST account in
                         * landed cost JE.
                         */
                        JSONObject ljedjson = new JSONObject();
                        double landedcosttax = isMalaysiaOrSingaporeCompany ? paramJobj.optBoolean("includingGST") ? rowtaxamount : 0.0 : rowtaxamount; //ERM-971 for malaysia/singapore companies tax is based in inputcredit check
                        totaltermamount = !extraPreferences.islandedcosttermJE() ? (totaltermamount > 0 ? totaltermamount * (-1) : 0 ): 0;
                        ljedjson.put(SRNO, landedInvoiceJEDetails.size() + 1);
                        ljedjson.put(COMPANYID, company.getCompanyID());
                        if (!paramJobj.optBoolean("includingGST") && row.getTax() == null) {
                            ljedjson.put(AMOUNT, jobj.getDouble(RATE) - totaldiscount - totaltermamount);
                        } else {
                            ljedjson.put(AMOUNT, jobj.getDouble(RATE) - totaldiscount - landedcosttax - totaltermamount);
                        }
                        ljedjson.put(ACCOUNTID, account.getID());
                        ljedjson.put(DEBIT, !jobj.getBoolean("debit"));
                        ljedjson.put(JEID, landedInvoiceJEId);
                        ljedjson.put(DESCRIPTION, jobj.getString(DESC));
                        KwlReturnObject ljedresult = accJournalEntryobj.addJournalEntryDetails(ljedjson);
                        JournalEntryDetail ljed = (JournalEntryDetail) ljedresult.getEntityList().get(0);
                        landedInvoiceJEDetails.add(ljed);
                    }
                }
                // Add Custom fields details 
                if (!StringUtil.isNullOrEmpty(jobj.optString("customfield", ""))) {
                    JSONArray jcustomarray = new JSONArray(jobj.optString("customfield", "[]"));
                    HashMap<String, Object> customrequestParams = new HashMap<String, Object>();
                    customrequestParams.put("customarray", jcustomarray);
                    customrequestParams.put("modulename", Constants.Acc_JEDetail_modulename);
                    customrequestParams.put("moduleprimarykey", Constants.Acc_JEDetailId);
                    customrequestParams.put("modulerecid", jed.getID());
                    customrequestParams.put("recdetailId", row.getID());
                    customrequestParams.put("moduleid", Constants.Acc_Vendor_Invoice_ModuleId);
                    customrequestParams.put("companyid", row.getCompany().getCompanyID());
                    customrequestParams.put("customdataclasspath", Constants.Acc_BillInvDetail_custom_data_classpath);
                    KwlReturnObject customDataresult = fieldDataManagercntrl.setCustomData(customrequestParams);
                    if (customDataresult != null && customDataresult.getEntityList().size() > 0) {
                        jedjson.put("accjedetailcustomdata", jed.getID());
                        jedjson.put("jedid", jed.getID());
                        jedjson.put(DESCRIPTION,  StringUtil.DecodeText(jobj.optString(DESC)));
                        jedresult = accJournalEntryobj.updateJournalEntryDetails(jedjson);
            }
                }
                jed = (JournalEntryDetail) jedresult.getEntityList().get(0);
                row.setPurchaseJED(jed);
            }           
        } catch (JSONException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ServiceException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SessionExpiredException ex) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            ll.add(new double[]{totaldiscount, totalamount, taxamount,lineleveltaxamount,totaltermamount});
            ll.add(rows);
        }
        return ll;
    }
    /**
     * Method to check if there are any landed cost transactions in the system with invoice terms used in the expense invoices
     * @param params
     * @return JSONObject
     */
    @Override
    public JSONObject isLandedCostWithTermTransactionsPresent(JSONObject params) throws ServiceException {
        JSONObject jobj = new JSONObject();
        Locale locale = (Locale) params.opt(Constants.locale);
        try {            
            KwlReturnObject returnkwl = accGoodsReceiptobj.isLandedCostWithTermTransactionsPresent(params);            
            if (returnkwl != null) {
                jobj.put(Constants.RES_success, returnkwl.isSuccessFlag());
                /**
                 * Display message if Landed Cost with term Transactions are Present.
                 */
                if (returnkwl.isSuccessFlag()) {
                    jobj.put(Constants.RES_msg, messageSource.getMessage("acc.landingcosttermjemsg", null, locale));
//                    jobj.put(Constants.RES_msg, "Landing Cost transactions with terms are already present in the system hence you cannot enable/disable this flag");
                }
            }
        } catch (Exception e) {
            Logger.getLogger(accGoodsReceiptController.class.getName()).log(Level.SEVERE, null, e);
        }
        return jobj;
    }
    /**
     * Function to get ITC info for product i.e GL.
     *
     * @param paramJobj
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public JSONObject getITCInformationForProducts(JSONObject paramJobj) throws ServiceException, JSONException {
        JSONObject jobj = new JSONObject();
        String msg = "";
        boolean isaccountpresent = true;
        String products = "";
        List<String> result = accGoodsReceiptobj.getITCGLForProducts(paramJobj);
        if (!result.isEmpty() && result.size() > 0 && result.get(0) != null) {
            for (String string : result) {
                products += string + ",";
            }
            if (products.length() > 0) {
                jobj.put("products", products.substring(0, products.length() - 1));
                isaccountpresent = false;
            }
        }
        jobj.put("isaccountnotpresent", isaccountpresent);
        return jobj;
    }
}
