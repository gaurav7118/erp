/*
 * Copyright (C) 2012  Krawler Information Systems Pvt Ltd
 * All rights reserved.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
* This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package com.krawler.spring.accounting.invoice;

import com.krawler.accounting.integration.common.IntegrationConstants;
import com.krawler.hql.accounting.InvoiceDocuments;
import com.krawler.hql.accounting.InvoiceDocumentCompMap;
import com.krawler.common.admin.*;
import com.krawler.common.dao.BaseDAO;
import com.krawler.common.service.ServiceException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.IndiaComplianceConstants;
import com.krawler.common.util.StringUtil;
import com.krawler.hql.accounting.*;
import com.krawler.hql.accounting.BillingInvoice;
import com.krawler.hql.accounting.CompanyAccountPreferences;
import com.krawler.hql.accounting.Customer;
import com.krawler.hql.accounting.Discount;
import com.krawler.hql.accounting.ExchangeRateDetails;
import com.krawler.hql.accounting.Invoice;
import com.krawler.hql.accounting.InvoiceDetail;
import com.krawler.hql.accounting.InvoiceTermsSales;
import com.krawler.hql.accounting.JournalEntry;
import com.krawler.hql.accounting.JournalEntryDetail;
import com.krawler.hql.accounting.Tax;
import com.krawler.inventory.model.ist.DeliveryDetailInterStoreLocationMapping;
import com.krawler.inventory.model.stockout.ShippingDeliveryOrder;
import com.krawler.inventory.model.stockout.StockAdjustment;
import com.krawler.inventory.model.store.Store;
import com.krawler.spring.accounting.account.accAccountDAOImpl;
import com.krawler.spring.accounting.costCenter.CCConstants;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.accounting.invoice.dm.InvoiceInfo;
import com.krawler.spring.authHandler.authHandler;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONException;
import com.krawler.utils.json.base.JSONObject;
import java.math.BigInteger;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.springframework.orm.hibernate3.HibernateObjectRetrievalFailureException;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 *
 * @author krawler
 */
public class accInvoiceImpl extends BaseDAO implements accInvoiceDAO {

    public KwlReturnObject getInvoiceCount(String invoiceno, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from Invoice where invoiceNumber=? and company.companyID=? AND isDraft='F'";  //SDP-13487 - Do not check duplicate in Draft Report. Because Multiple draft records having empty entry no.
        if (!StringUtil.isNullOrEmpty(invoiceno)) {
            list = executeQuery( q, new Object[]{invoiceno, companyid});
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
     @Override
     //@Transactional(propagation = Propagation.REQUIRED)
     public synchronized String updateInvoiceEntryNumberForNewSI(Map<String, Object> seqNumberMap) {
         String documnetNumber = "";
         try {
             documnetNumber = seqNumberMap.containsKey(Constants.AUTO_ENTRYNUMBER) ? (String) seqNumberMap.get(Constants.AUTO_ENTRYNUMBER) : "";
             int seqNumber = 0;
             if (seqNumberMap.containsKey(Constants.SEQNUMBER) && !StringUtil.isNullObject(seqNumberMap.get(Constants.SEQNUMBER)) && !StringUtil.isNullOrEmpty(seqNumberMap.get(Constants.SEQNUMBER).toString())) {
                 seqNumber = Integer.parseInt(seqNumberMap.get(Constants.SEQNUMBER).toString());
             }
             boolean isDraft = false;
             if (seqNumberMap.containsKey(Constants.isDraft) && seqNumberMap.get(Constants.isDraft) != null) {
                 isDraft = (Boolean) seqNumberMap.get(Constants.isDraft);
                 if (isDraft) {
                     documnetNumber = "";    //SDP-13487 : Set invoice no.empty
                     seqNumber = 0;
                 }
             }
             String datePrefix = seqNumberMap.containsKey(Constants.DATEPREFIX) ? (String) seqNumberMap.get(Constants.DATEPREFIX) : "";
             String dateAfterPrefix = seqNumberMap.containsKey(Constants.DATEAFTERPREFIX) ? (String) seqNumberMap.get(Constants.DATEAFTERPREFIX) : "";
             String dateSuffix = seqNumberMap.containsKey(Constants.DATESUFFIX) ? (String) seqNumberMap.get(Constants.DATESUFFIX) : "";
             String sequenceFormatID = seqNumberMap.containsKey(Constants.SEQUENCEFORMATID) ? (String) seqNumberMap.get(Constants.SEQUENCEFORMATID) : "";
             String documentID = seqNumberMap.containsKey(Constants.DOCUMENTID) ? (String) seqNumberMap.get(Constants.DOCUMENTID) : "";
             String companyID = seqNumberMap.containsKey(Constants.companyKey) ? (String) seqNumberMap.get(Constants.companyKey) : "";
            //String query = "update Invoice set invoiceNumber = ?,seqnumber=?, datePreffixValue=?, dateAfterPreffixValue=?, dateSuffixValue=? , seqformat.ID=? where ID=? and company.companyID=?";
            // int numRows = executeUpdate( query, new Object[]{documnetNumber,seqNumber,datePrefix,dateAfterPrefix,dateSuffix,sequenceFormatID, documentID, companyID});
             Invoice inv = (Invoice) get(Invoice.class, documentID);
             SequenceFormat sequenceFormat = (SequenceFormat) get(SequenceFormat.class, sequenceFormatID);
             inv.setInvoiceNumber(documnetNumber);
             inv.setSeqnumber(seqNumber);
             inv.setDatePreffixValue(datePrefix);
             inv.setDateAfterPreffixValue(dateAfterPrefix);
             inv.setDateSuffixValue(dateSuffix);
             inv.setSeqformat(sequenceFormat);
             saveOrUpdate(inv);
         } catch (Exception e) {
             System.out.println(e);
         }
         return documnetNumber;
     }

    
    @Override
    public KwlReturnObject deleteAssetMaintenanceScheduleObject(HashMap<String, Object> dataMap) throws ServiceException {
        List list = null;
        int numRows = 0;

        String id = (String) dataMap.get("id");
        String companyId = (String) dataMap.get("companyId");

        ArrayList params = new ArrayList();

        params.add(id);
        params.add(companyId);
        
        String query = "delete from AssetMaintenanceScheduler amso where amso.assetMaintenanceSchedulerObject.id=? and amso.company.companyID=?";
        numRows = executeUpdate( query, params.toArray());
        
        query = "delete from AssetMaintenanceSchedulerObject amso where amso.id=? and amso.company.companyID=?";
        numRows += executeUpdate( query, params.toArray());
        return new KwlReturnObject(true, "Schedule has been deleted successfully.", null, null, numRows);

    }
    
    @Override
    public KwlReturnObject deleteAssetMaintenanceScheduleEvent(HashMap<String, Object> dataMap) throws ServiceException {
        List list = null;
        int numRows = 0;

        String id = (String) dataMap.get("id");
        String companyId = (String) dataMap.get("companyId");

        ArrayList params = new ArrayList();

        params.add(id);
        params.add(companyId);
        
        String query = "delete from AssetMaintenanceScheduler amso where amso.id=? and amso.company.companyID=?";
        numRows = executeUpdate( query, params.toArray());
        
        return new KwlReturnObject(true, "Schedule Event has been deleted successfully.", null, null, numRows);

    }
    
    
    @Override
    public KwlReturnObject deleteAssetMaintenanceWorkOrder(String workOrderIDS, String companyId) throws ServiceException {
        int numRows = 0;
        String query = "";
        ArrayList params = new ArrayList();

        if (!StringUtil.isNullOrEmpty(workOrderIDS)) {

            params = new ArrayList();
            params.add(companyId);
            
            String detailQuery = "select id from assetmaintenanceworkorderdetail where assetMaintenanceWorkOrder in (" + workOrderIDS + ") and company=?";
            
            List detailList = executeSQLQuery( detailQuery, params.toArray());
            
            Iterator itrDetail = detailList.iterator();
            
            String idStrings = "";
            
            while (itrDetail.hasNext()) {
                String detailId = itrDetail.next().toString();
                idStrings += "'" + detailId + "',";
            }
            
            if (!StringUtil.isNullOrEmpty(idStrings)) {
                idStrings = idStrings.substring(0, idStrings.length() - 1);
            }

            params = new ArrayList();
            params.add(companyId);

            query = "delete from assetmaintenanceworkorderdetail where assetMaintenanceWorkOrder IN (" + workOrderIDS + ") and company=?";

            numRows = executeSQLUpdate( query, params.toArray());

            System.out.println("assetmaintenanceworkorderdetail rows : " + numRows);

             String selQuery = "from Inventory where company.companyID = ? and  ID in (" + idStrings + ") ";
            List resultList = executeQuery( selQuery, new Object[]{companyId});
            Iterator itr = resultList.iterator();
            while (itr.hasNext()) {
                Inventory inventory = (Inventory) itr.next();
                if (inventory != null && inventory.isDeleted() == false) {
                    if (inventory.isCarryIn()) {
                        inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() - inventory.getBaseuomquantity());// minus Purchase and Plus Sales (for Reverse effect for quantity)
                    } else {
                        inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() + inventory.getBaseuomquantity());
                    }
                }
            }
            deleteAll(resultList);

            query = "delete from assetmaintenanceworkorder where id IN(" + workOrderIDS + ") and company=?";

            numRows = executeSQLUpdate( query, params.toArray());

            System.out.println("assetmaintenanceworkorder rows : " + numRows);
        }

        return new KwlReturnObject(true, "Work Order has been deleted successfully.", null, null, numRows);
    }

    public KwlReturnObject deleteWorkOrdersBatchSerialDetails(String workOrderIDS, String companyId) throws ServiceException {
        String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuerypb = "", delQuery5 = "", delQuery6, delQuery15 = "", delQueryBatch = "", delQuerySerail = "", delQueryBmap = "";
        int numtotal = 0, numRows5 = 0;
        String batchserialids = "", batchids = "";
        String serialmapids = "", docids = "";
        String batchmapids = "";
        if (!StringUtil.isNullOrEmpty(workOrderIDS)) {
           ArrayList params = new ArrayList();
            params.add(companyId);

            String myquery3 = " select id from assetmaintenanceworkorderdetail where assetMaintenanceWorkOrder in (" + workOrderIDS + ") and company=? ";
            List listBatch = executeSQLQuery( myquery3, params.toArray());
            Iterator itrBatch = listBatch.iterator();
            while (itrBatch.hasNext()) {
                String batchstring = itrBatch.next().toString();
                docids += "'" + batchstring + "',";
            }
            if (!StringUtil.isNullOrEmpty(docids)) {
                docids = docids.substring(0, docids.length() - 1);
            }
            if (!StringUtil.isNullOrEmpty(docids)) {
                ArrayList params14 = new ArrayList();
                String myquery4 = " select batchmapid,id from locationbatchdocumentmapping where documentid in (" + docids + ") ";
                String myquery5 = " select serialid,id from serialdocumentmapping where documentid in (" + docids + ") ";


                List list4 = executeSQLQuery( myquery4, params14.toArray());
                Iterator itr4 = list4.iterator();
                while (itr4.hasNext()) {
                    Object[] objArr = (Object[]) itr4.next();
                    LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
                    if (locationBatchDocumentMapping != null) {
                        HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                        batchUpdateQtyMap.put("qty", locationBatchDocumentMapping.getQuantity());
                        batchUpdateQtyMap.put("id", locationBatchDocumentMapping.getBatchmapid().getId());
                        saveBatchAmountDue(batchUpdateQtyMap);
                    }
                    batchmapids += "'" + objArr[0] + "',";

                }
                if (!StringUtil.isNullOrEmpty(batchmapids)) {
                    batchmapids = batchmapids.substring(0, batchmapids.length() - 1);
                }
                list4 = executeSQLQuery( myquery5, params14.toArray());
                itr4 = list4.iterator();
                while (itr4.hasNext()) {
                    Object[] objArr = (Object[]) itr4.next();
                    SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) get(SerialDocumentMapping.class, (String) objArr[1]);
                    if (serialDocumentMapping != null) {
                        HashMap<String, Object> serialUpdateQtyMap = new HashMap<String, Object>();
                        serialUpdateQtyMap.put("qty", "1");
                        serialUpdateQtyMap.put("id", serialDocumentMapping.getSerialid().getId());
                        saveSerialAmountDue(serialUpdateQtyMap);
                    }
                    serialmapids += "'" + objArr[0] + "',";
                }
                if (!StringUtil.isNullOrEmpty(serialmapids)) {
                    serialmapids = serialmapids.substring(0, serialmapids.length() - 1);
                }
            }
            ArrayList params15 = new ArrayList();
            delQuerypb = "delete  from locationbatchdocumentmapping where documentid in (" + docids + ") ";
            int numRows = executeSQLUpdate( delQuerypb, params15.toArray());

            delQuerypb = "delete  from locationbatchdocumentmapping where documentid in (" + docids + ") ";
            numRows = executeSQLUpdate( delQuerypb, params15.toArray());
        }
        return new KwlReturnObject(true, "work Order has been deleted successfully.", null, null, numtotal);
    }

    @Override
    public KwlReturnObject deleteAssetMaintenanceWorkOrderofSchedules(HashMap<String, Object> dataMap) throws ServiceException {
//        List list = null;
        int numRows = 0;

        String schedulerId = (String) dataMap.get("schedulerId");
        String companyId = (String) dataMap.get("companyId");

        ArrayList params = new ArrayList();

        params.add(schedulerId);
        params.add(companyId);

        String query = "from AssetMaintenanceWorkOrder amso where amso.assetMaintenanceScheduler.id=? and amso.company.companyID=?";
        List<AssetMaintenanceWorkOrder> list = executeQuery( query, params.toArray());

        String workOrderIDS = "";

        for (AssetMaintenanceWorkOrder workOrder : list) {
            workOrderIDS += "'" + workOrder.getId() + "',";
        }

        if (!StringUtil.isNullOrEmpty(workOrderIDS)) {
            workOrderIDS = workOrderIDS.substring(0, workOrderIDS.length() - 1);
        }
        deleteWorkOrdersBatchSerialDetails(workOrderIDS,companyId);  //delete work order batch and serial details
        deleteAssetMaintenanceWorkOrder(workOrderIDS, companyId);

        return new KwlReturnObject(true, "Schedule has been deleted successfully.", null, null, numRows);
    }
    
    public AssetMaintenanceSchedulerObject createAssetMaintenanceSchedulerObject(AssetMaintenanceSchedulerObject schedulerObject, HashMap<String, Object> dataMap) {
        if (dataMap.containsKey("startDate") && dataMap.get("startDate") != null) {
            schedulerObject.setStartDate((Date) dataMap.get("startDate"));
        }


        if (dataMap.containsKey("endDate") && dataMap.get("endDate") != null) {
            schedulerObject.setEndDate((Date) dataMap.get("endDate"));
        }

        if (dataMap.containsKey("scheduleNumber") && dataMap.get("scheduleNumber") != null) {
            schedulerObject.setScheduleName((String) dataMap.get("scheduleNumber"));
        }

        if (dataMap.containsKey("isAdhocSchedule") && dataMap.get("isAdhocSchedule") != null) {
            schedulerObject.setAdHoc((Boolean) dataMap.get("isAdhocSchedule"));
        }

        if (dataMap.containsKey("frequency") && dataMap.get("frequency") != null) {
            schedulerObject.setFrequency((Integer) dataMap.get("frequency"));
        }

        if (dataMap.containsKey("frequencyType") && dataMap.get("frequencyType") != null) {
            schedulerObject.setFrequencyType((String) dataMap.get("frequencyType"));
        }

        if (dataMap.containsKey("totalSchedules") && dataMap.get("totalSchedules") != null) {
            schedulerObject.setTotalEvents((Integer) dataMap.get("totalSchedules"));
        }

        if (dataMap.containsKey("scheduleDuration") && dataMap.get("scheduleDuration") != null) {
            schedulerObject.setScheduleDuration((Integer) dataMap.get("scheduleDuration"));
        }

        if (dataMap.containsKey("companyId") && dataMap.get("companyId") != null) {
            Company company = (Company) get(Company.class, (String) dataMap.get("companyId"));
            schedulerObject.setCompany(company);
        }

        if (dataMap.containsKey("assetId") && dataMap.get("assetId") != null) {
            AssetDetails assetDetails = (AssetDetails) get(AssetDetails.class, (String) dataMap.get("assetId"));
            schedulerObject.setAssetDetails(assetDetails);
        }

        return schedulerObject;
    }
    

    @Override
    public KwlReturnObject addInvoice(JSONObject json, HashSet details) throws ServiceException {
        List list = new ArrayList();
        Invoice invoice = new Invoice();
        invoice.setDeleted(false);
        try {
            String companyid = "";
            if (json.has("companyid")) {
                companyid = json.optString(companyid);
            }
            if (json.has("invoiceid")) {
                if (!StringUtil.isNullOrEmpty(json.getString("invoiceid"))) {
                    invoice = (Invoice) get(Invoice.class, json.getString("invoiceid"));
                }
                if (json.has("modifiedby")) {
                    User modifiedby = json.get("modifiedby") == null ? null : (User) get(User.class, (String) json.get("modifiedby"));
                    invoice.setModifiedby(modifiedby);
                }
                if (json.has("updatedon")) {
                    invoice.setUpdatedon((Long) json.get("updatedon"));
                }
            } else {
                if (json.has("createdby")) {
                    User createdby = json.get("createdby") == null ? null : (User) get(User.class, (String) json.get("createdby"));
                    invoice.setCreatedby(createdby);
                }
                if (json.has("createdon")) {
                    invoice.setCreatedon((Long) json.get("createdon"));
                }
                if (json.has("modifiedby")) {
                    User modifiedby = json.get("modifiedby") == null ? null : (User) get(User.class, (String) json.get("modifiedby"));
                    invoice.setModifiedby(modifiedby);
                }
                if (json.has("updatedon")) {
                    invoice.setUpdatedon((Long) json.get("updatedon"));
                }
            }
            if (json.has("entrynumber")) {
                invoice.setInvoiceNumber(json.getString("entrynumber"));
            }
            /*
             * isJobWorkOutRemain is true if sales invoice is creating from Aged order work report.
             */
            if (json.has("isjobWorkWitoutGrn")) {
                invoice.setIsjobWorkInvoice((Boolean) json.get("isjobWorkWitoutGrn"));
            }
            if (json.has(Constants.SEQFORMAT)) {
                invoice.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) json.getString(Constants.SEQFORMAT)));
            }
            if (json.has(Constants.SEQNUMBER) && json.get(Constants.SEQNUMBER)!=null && !StringUtil.isNullOrEmpty(json.get(Constants.SEQNUMBER).toString())) {
                invoice.setSeqnumber(Integer.parseInt(json.get(Constants.SEQNUMBER).toString()));
            }
            if (json.has(Constants.DATEPREFIX)) {
                invoice.setDatePreffixValue(json.getString(Constants.DATEPREFIX));
            }
            if (json.has(Constants.DATEAFTERPREFIX)) {
                invoice.setDateAfterPreffixValue(json.getString(Constants.DATEAFTERPREFIX));
            }
            if (json.has(Constants.DATESUFFIX)) {
                invoice.setDateSuffixValue(json.getString(Constants.DATESUFFIX));
            }
            if (json.has("autogenerated")) {
                invoice.setAutoGenerated(json.getBoolean("autogenerated"));
            }
            if (json.has("taxAmount")) {
                invoice.setTaxamount((Double) json.get("taxAmount"));
            }
            if (json.has("taxAmountInBase")) {
                invoice.setTaxamountinbase((Double) json.get("taxAmountInBase"));
            }
            if (json.has("excludingGstAmount")) {
                invoice.setExcludingGstAmount((Double) json.get("excludingGstAmount"));
            }
            if (json.has("excludingGstAmountInBase")) {
                invoice.setExcludingGstAmountInBase((Double) json.get("excludingGstAmountInBase"));
            }
            if (json.has("memo")) {
                invoice.setMemo(json.getString("memo"));
            }
//            if(json.has("billto")){
//                invoice.setBillTo(json.getString("billto"));
//            }
//            if(json.has("shipaddress")){
//                invoice.setShipTo(json.getString("shipaddress"));
//            }
            if (json.has("shipdate")) {
                invoice.setShipDate((Date) json.get("shipdate"));
            } else{
                 invoice.setShipDate(null);
            }
            if (json.has("duedate")) {
                invoice.setDueDate((Date) json.get("duedate"));
            }
            if (json.has("companyid")) {
                invoice.setCompany((Company) get(Company.class, json.getString("companyid")));
            }
            if (json.has("currencyid")) {
                invoice.setCurrency((KWLCurrency) get(KWLCurrency.class, json.getString("currencyid")));
            }
            if (json.has("discountid")) {
                invoice.setDiscount((Discount) get(Discount.class, json.getString("discountid")));
            }
            if (json.has("customerentryid")) {
                invoice.setCustomerEntry((JournalEntryDetail) get(JournalEntryDetail.class, json.getString("customerentryid")));
            }
            if (json.has(Constants.RoundingAdjustmentEntryID)) {
                invoice.setRoundingAdjustmentEntry((JournalEntryDetail) get(JournalEntryDetail.class, json.getString(Constants.RoundingAdjustmentEntryID)));
            }
            if (json.has(Constants.IsRoundingAdjustmentApplied)) {
                invoice.setIsRoundingAdjustmentApplied(json.optBoolean(Constants.IsRoundingAdjustmentApplied,false));
            }  
            if (json.has("shipentryid")) {
                invoice.setShipEntry((JournalEntryDetail) get(JournalEntryDetail.class, json.getString("shipentryid")));
            }
            if (json.has("otherentryid")) {
                invoice.setOtherEntry((JournalEntryDetail) get(JournalEntryDetail.class, json.getString("otherentryid")));
            }
            if (json.has("taxentryid")) {
                invoice.setTaxEntry((JournalEntryDetail) get(JournalEntryDetail.class, json.getString("taxentryid")));
            }
            if (json.has("taxid")) {
                invoice.setTax((Tax) get(Tax.class, json.getString("taxid")));
            }
            if (json.has("journalerentryid")) {
                invoice.setJournalEntry((JournalEntry) get(JournalEntry.class, json.getString("journalerentryid")));
            }
            if (json.has("erdid")) {
                invoice.setExchangeRateDetail((ExchangeRateDetails) get(ExchangeRateDetails.class, json.getString("erdid")));
            }   
            if (json.has("externalCurrencyRate")) {
                invoice.setExternalCurrencyRate((Double) json.get("externalCurrencyRate"));
            }
            if (json.has("customerid")) {
                invoice.setCustomer((Customer) get(Customer.class, json.getString("customerid")));
            }
            if (json.has("salesPerson") && !StringUtil.isNullOrEmpty(json.getString("salesPerson"))) {
                invoice.setMasterSalesPerson((MasterItem) get(MasterItem.class, json.getString("salesPerson")));
            }
            if (json.has("customerBankAccountTypeId") && !StringUtil.isNullOrEmpty(json.getString("customerBankAccountTypeId"))) {
                invoice.setCustomerBankAccountType((MasterItem) get(MasterItem.class, json.getString("customerBankAccountTypeId")));
            }
            if (json.has("repeateid")) {
                invoice.setRepeateInvoice((RepeatedInvoices) get(RepeatedInvoices.class, json.getString("repeateid")));
            }
            if (json.has("parentid")) {
                invoice.setParentInvoice((Invoice) get(Invoice.class, json.getString("parentid")));
            }
            if (json.has("porefno")) {
                invoice.setPoRefNumber(json.getString("porefno"));
            }
            if (json.has("shipvia")) {
                invoice.setShipvia(json.getString("shipvia"));
            }
            
            if (json.has("termid")) {
                invoice.setTermid((Term) get(Term.class, json.getString("termid")));
            }
            if (json.has("fob")) {
                invoice.setFob(json.getString("fob"));
            }
            if (json.has("isNormalInvoice")) {
                invoice.setNormalInvoice(json.optBoolean("isNormalInvoice", false));
            } else {
                invoice.setNormalInvoice(true);
            }
            if (json.has("isOpeningBalenceInvoice")) {
                invoice.setIsOpeningBalenceInvoice(json.optBoolean("isOpeningBalenceInvoice", true));
            } else {
                invoice.setIsOpeningBalenceInvoice(false);
            }
            if (json.has("originalOpeningBalanceAmount")) {
                invoice.setOriginalOpeningBalanceAmount(json.optDouble("originalOpeningBalanceAmount", 0.0));
            }
            if (json.has(Constants.originalOpeningBalanceBaseAmount)) {
                invoice.setOriginalOpeningBalanceBaseAmount(authHandler.round(json.optDouble(Constants.originalOpeningBalanceBaseAmount, 0.0), companyid));
            }
            if (json.has("openingBalanceAmountDue")) {
                /*
                 * set status flag for opening invoices
                 */
                if (invoice.isIsOpeningBalenceInvoice()) {
                    if (authHandler.round(json.optDouble("openingBalanceAmountDue", 0.0), companyid) <= 0) {
                        invoice.setIsOpenReceipt(false);
                    } else {
                        invoice.setIsOpenReceipt(true);
                    }
                }
                invoice.setOpeningBalanceAmountDue(json.optDouble("openingBalanceAmountDue", 0.0));
            }
            if (json.has(Constants.openingBalanceBaseAmountDue)) {
                invoice.setOpeningBalanceBaseAmountDue(authHandler.round(json.optDouble(Constants.openingBalanceBaseAmountDue, 0.0), companyid));
            }
            if (json.has("lastModifiedDate")) {
                invoice.setLastModifiedDate((Date) json.get("lastModifiedDate"));
            }
            if (json.has("creationDate")) {
                invoice.setCreationDate((Date) json.get("creationDate"));
            }
            if (json.has("poRefDate")) {
                invoice.setPoRefDate((Date) json.get("poRefDate"));
            }
            if (json.has("exchangeRateForOpeningTransaction")) {
                double exchangeRateForOpeningTransaction = (Double) json.get("exchangeRateForOpeningTransaction");
                invoice.setExchangeRateForOpeningTransaction(exchangeRateForOpeningTransaction);
            }
            if (json.has("conversionRateFromCurrencyToBase")) {
                invoice.setConversionRateFromCurrencyToBase((Boolean) json.get("conversionRateFromCurrencyToBase"));
            }
//            if (json.has("moduletemplateid") && !StringUtil.isNullOrEmpty(json.getString("moduletemplateid"))) {
//                invoice.setModuletemplateid((ModuleTemplate) get(ModuleTemplate.class, json.getString("moduletemplateid")));
//            }
//            if(json.has("template")){
//                invoice.setTemplateid((Projreport_Template) get(Projreport_Template.class, json.getString("template")));
//            }
            invoice.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));

            if (json.has("partialinv")) {
                invoice.setPartialinv(json.getBoolean("partialinv"));
            }

            if (json.has("pendingapproval")) {
                invoice.setPendingapproval(json.getInt("pendingapproval"));
            } else {
                invoice.setPendingapproval(0);
            }
            if (json.has("approvalstatuslevel")) {
                invoice.setApprovestatuslevel(json.getInt("approvalstatuslevel"));
            } else if (json.has("isOpeningBalenceInvoice") && json.getBoolean("isOpeningBalenceInvoice")) {
                invoice.setApprovestatuslevel(11);
            } else{
                if(!json.has("isEditedPendingDocument")){//If edited pending document then approval rule is not set to 0
                    invoice.setApprovestatuslevel(0); 
                }               
            }
                      


            if (json.has("istemplate")) {
                invoice.setIstemplate(json.getInt("istemplate"));
            } else {
                invoice.setIstemplate(0);
            }
            if (json.has("posttext")) {
                invoice.setPostText(json.getString("posttext"));
            }
            if (json.has("approvallevel")) {
                invoice.setApprovallevel(json.getInt("approvallevel"));
            }

            if (!details.isEmpty()) {
                invoice.setRows(details);
            }
            if (json.has("isfavourite")) {
                if (!json.isNull("isfavourite")) {
                    invoice.setFavourite(json.optBoolean("isfavourite", false));
                }
            }
            if (json.has("isFixedAsset")) {
                if (!json.isNull("isFixedAsset")) {
                    invoice.setFixedAssetInvoice(json.getBoolean("isFixedAsset"));
                }
            }
            if (json.has("isInvoiceLinkedWithTaxAppliedDO")) {
                if (!json.isNull("isInvoiceLinkedWithTaxAppliedDO")) {
                    invoice.setLinkedWithTaxAppliedDO(json.getBoolean("isInvoiceLinkedWithTaxAppliedDO"));
                }
            }
            if (json.has("isLeaseFixedAsset")) {
                if (!json.isNull("isLeaseFixedAsset")) {
                    invoice.setFixedAssetLeaseInvoice(json.getBoolean("isLeaseFixedAsset"));
                }
            }
            if (json.has("isConsignment")) {
                if (!json.isNull("isConsignment")) {
                    invoice.setIsconsignment(json.getBoolean("isConsignment"));
                }
            }
            if (json.has("custWarehouse") && json.get("custWarehouse") != null) {
                InventoryWarehouse warehouse = new InventoryWarehouse();
                warehouse = (InventoryWarehouse) get(InventoryWarehouse.class, json.getString("custWarehouse"));
                if (warehouse != null) {
                    invoice.setCustWarehouse(warehouse);
                }
            }
            if (json.has("movementtype") && json.get("movementtype") != null) {
                MasterItem movementType = null;
                movementType = (MasterItem) get(MasterItem.class, (String) json.get("movementtype"));
                if (movementType != null) {
                    invoice.setMovementType(movementType);
                }
            }
             
            if (json.has("accountid")) {
                Account account = json.get("accountid") == null ? null : (Account) get(Account.class, (String) json.get("accountid"));
                invoice.setAccount(account);
            }
            if (json.has("shipLength")) {
                invoice.setShiplength(Double.parseDouble((String) json.get("shipLength")));
            }
            if (json.has("invoicetype")) {
                invoice.setInvoicetype((String) json.get("invoicetype"));
            }
            if (json.has("incash") && json.get("incash") != null) {
                invoice.setCashtransaction(Boolean.parseBoolean(json.get("incash").toString()));
            }
            if (json.has("isExciseInvoice") && json.get("isExciseInvoice") != null) {
                invoice.setIsExciseInvoice(Boolean.parseBoolean(json.get("isExciseInvoice").toString()));
            }
            if (json.has("defaultnatureofpurchase") && json.get("defaultnatureofpurchase") != null) {
                invoice.setDefaultnatureOfPurchase((String) json.get("defaultnatureofpurchase"));
            }
            if (json.has("billshipAddressid")) {
                BillingShippingAddresses bsa = json.get("billshipAddressid") == null ? null : (BillingShippingAddresses) get(BillingShippingAddresses.class, (String) json.get("billshipAddressid"));
                invoice.setBillingShippingAddresses(bsa);
            }
            if (json.has("gstIncluded")) {
                invoice.setGstIncluded((Boolean) json.get("gstIncluded"));
            }
            if (json.has("gstCurrencyRate")) {
                invoice.setGstCurrencyRate(json.optDouble("gstCurrencyRate",0.0));
            }
            if (json.has(Constants.invoiceamountdue)) {
                /*
                 set status flag for amount due 
                 */
                if (authHandler.round(json.optDouble(Constants.invoiceamountdue, 0.0), companyid) <= 0) {
                    invoice.setIsOpenReceipt(false);
                } else {
                    invoice.setIsOpenReceipt(true);
                }
                invoice.setInvoiceamountdue(authHandler.round(json.optDouble(Constants.invoiceamountdue, 0.0), companyid));
            }
            if (json.has(Constants.invoiceamount)) { // invoice amount
                invoice.setInvoiceamount(authHandler.round(json.optDouble(Constants.invoiceamount, 0.0), companyid));
            }
            if (json.has(Constants.invoiceamountinbase)) { // invoice amount in base
                invoice.setInvoiceamountinbase(authHandler.round(json.optDouble(Constants.invoiceamountinbase, 0.0), companyid));
            }
            if (json.has("deliveryTime") && json.get("deliveryTime") != null) {
                invoice.setDeliveryTime(json.getString("deliveryTime"));
            }    
            if (json.has(Constants.termsincludegst) && json.get(Constants.termsincludegst) != null) {
                invoice.setTermsincludegst(json.getBoolean(Constants.termsincludegst));
            }
            if (json.has("paydetailsid")) {                
                PayDetail payDetail = StringUtil.isNullOrEmpty((String)json.getString("paydetailsid")) ? null : (PayDetail) get(PayDetail.class, (String) json.get("paydetailsid"));
                invoice.setPayDetail(payDetail);
            }
            if(json.has(("paymentMethod"))){
                invoice.setdefaultPaymentmethod(json.getString("paymentMethod"));
            }
            if (json.has("isDraft")) {
                if (!json.isNull("isDraft")) {
                    invoice.setDraft(json.getBoolean("isDraft"));
                }
            } else {
                invoice.setDraft(false);
            }
            if (json.has("isFromPOS")) {
                if (!json.isNull("isFromPOS")) {
                    invoice.setPOSInvoice(json.getBoolean("isFromPOS"));
                }
            }
            if (json.has(Constants.invoiceamountdueinbase)) { // invoice amount due in base
                invoice.setInvoiceAmountDueInBase(authHandler.round(json.optDouble(Constants.invoiceamountdueinbase, 0.0), companyid));
               
            }
            if (json.has(Constants.discountAmount)) { // discount amount in document currency
                invoice.setDiscountAmount(authHandler.round(json.optDouble(Constants.discountAmount, 0.0), companyid));
            }
            if (json.has(Constants.discountAmountInBase)) { // discount amount in base
                invoice.setDiscountAmountInBase(authHandler.round(json.optDouble(Constants.discountAmountInBase, 0.0), companyid));
            }
            if (json.has("formtype") && json.get("formtype") != null && !(json.get("formtype").equals("1"))) {  //"1","Without Form"
                invoice.setFormtype((String) json.get("formtype"));
                invoice.setFormstatus("2");//Pending
            }
            if (json.has("formtype") && ((StringUtil.isNullOrEmpty((String)json.get("formtype"))) || (json.get("formtype").equals("1")))){  //"1","Without Form"
                invoice.setFormstatus("1");//NA
                if(json.get("formtype").equals("1")){
                    invoice.setFormtype((String) json.get("formtype"));
                }
            }
            if (json.has("parentInvoice") && json.get("parentInvoice") != null) {
                invoice.setParentInvoice((Invoice) json.get("parentInvoice"));
            }
            if (json.has("isSupplementary") && json.get("isSupplementary") != null) {
                invoice.setIsSupplementary(Integer.parseInt(json.get("isSupplementary").toString()));
            }
            if (json.has("excisetypeid") && json.get("excisetypeid") != null) {
                invoice.setExcisetype((String) json.get("excisetypeid"));
            }
            if (json.has(Constants.generatedSource) && json.get(Constants.generatedSource) != null) {
                invoice.setGeneratedSource((Integer) json.get(Constants.generatedSource));
            }
            if (json.has(Constants.CASH_RECEIVED)) { // Cash Received
                invoice.setCashReceived(authHandler.round(json.optDouble(Constants.CASH_RECEIVED, 0.0), companyid));
            }
            if (json.has(Constants.isApplyTaxToTerms) && json.get(Constants.isApplyTaxToTerms) != null) {  // If Save As Draft
                invoice.setApplyTaxToTerms((Boolean) json.get(Constants.isApplyTaxToTerms));
            }
            if (!StringUtil.isNullOrEmpty(json.optString(Constants.importExportDeclarationNo))) {
                invoice.setExportDeclarationNo(json.optString(Constants.importExportDeclarationNo));
            }
            invoice.setRcmapplicable(json.optBoolean(Constants.RCMApplicable,false));
            invoice.setIsMerchantExporter(json.optBoolean(Constants.isMerchantExporter,false));
            /**
             * Save Additional Memo for INDONESIA
             */
            if (!StringUtil.isNullOrEmpty(json.optString(Constants.additionalMemo, ""))) {
                AdditionalMemo additionalMemo = (AdditionalMemo) get(AdditionalMemo.class, json.optString(Constants.additionalMemo, ""));
                invoice.setAdditionalmemo(additionalMemo);
            }
             /*---Dropship SI is not eligible for further linking in SR & DO---- */
            if (json.has("isdropshipchecked")) {
                 invoice.setIsDropshipDocument(json.getBoolean("isdropshipchecked"));
                invoice.setIsOpenDO(false);
                invoice.setIsOpenSR(false);
            }
            if (json.has("isTaxCommittedOnAvalara") && json.get("isTaxCommittedOnAvalara") != null) {
                invoice.setIsTaxCommittedOnAvalara(json.optBoolean("isTaxCommittedOnAvalara", false));
            }
            save(invoice);
            list.add(invoice);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.addInvoice:" + ex, ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
       
    public List getTerms(String tax) throws ServiceException {

        String query = "select invoicetermssales from taxtermsmapping where tax = ?";

        List list = executeSQLQuery(query, new Object[]{tax});
        return list;
    }
     /*@Override
   public boolean mapProductTaxToInvoiceTax(HashMap<String, String> requestParams, InvoiceDetail invoicedetail) throws ServiceException {
        List returnList = new ArrayList();
        boolean isCompletFlag = false;
        int count = 0;
        double termamount=0.0f,assessablevalue=0.0f;
        try {
            String selQuery = "from ProductTermsMap where product.ID = ? and term.account.ID = ?";
            if (!StringUtil.isNullOrEmpty(requestParams.get("productid")) && !StringUtil.isNullOrEmpty(requestParams.get("accountid"))) {
                returnList = executeQuery(selQuery, new Object[]{requestParams.get("productid"),requestParams.get("accountid")});
            }          
            
            if (!StringUtil.isNullOrEmpty(requestParams.get("termamount"))) {
                termamount = Double.parseDouble(requestParams.get("termamount"));
            }
            if (!StringUtil.isNullOrEmpty(requestParams.get("assessablevalue"))) {
                assessablevalue = Double.parseDouble(requestParams.get("assessablevalue"));;
            }
            
            Iterator itr = returnList.iterator();
            while (itr.hasNext()) {
                ProductTermsMap ptm = (ProductTermsMap) itr.next(); 
                String uuid = UUID.randomUUID().toString();
                InvoiceDetailTermsMap idtm=new InvoiceDetailTermsMap();
                idtm.setId(uuid);
                idtm.setTerm((LineLevelTerms)ptm.getTerm());
                idtm.setInvoicedetail((InvoiceDetail)invoicedetail);
                idtm.setTermamount(termamount);
                idtm.setAssessablevalue(assessablevalue);
                idtm.setPercentage(ptm.getTerm().getPercentage());
                idtm.setCreator(ptm.getCreator());
                idtm.setDeleted(0);
                save(idtm);
//                String insertQuery="INSERT INTO invoicedetailtermsmap (id,term,invoicedetail,percentage,termamount,assessablevalue,purchasevalueorsalevalue,deductionorabatementpercent,creator,deleted) VALUES (?,?,?,?,?,?,?,?,?,?)";
//                executeSQLUpdate(insertQuery,new Object[]{uuid,,invoicedetail.getID().toString(),ptm.getTerm().getPercentage(),termamount,assessablevalue,ptm.getTerm().getPurchaseValueOrSaleValue(),ptm.getTerm().getDeductionOrAbatementPercent(),ptm.getCreator().getUserID(),0});                           
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("mapCompanyTaxToProductTax : " + ex.getMessage(), ex);
        }
        return isCompletFlag;
    }
    */
    @Override
    public KwlReturnObject updateInvoice(JSONObject json, HashSet details) throws ServiceException {
        List list = new ArrayList();
        try {
            String invoiceid = json.getString("invoiceid");
            String companyid = "";
            if (json.has("companyid")) {
                companyid = json.optString(companyid);
            }
            Invoice invoice = (Invoice) get(Invoice.class, invoiceid);
            if (invoice != null) {
                if (json.has("entrynumber")) {
                    invoice.setInvoiceNumber(json.getString("entrynumber"));
                    if (json.has("modifiedby")) {
                        User modifiedby = json.get("modifiedby") == null ? null : (User) get(User.class, (String) json.get("modifiedby"));
                        invoice.setModifiedby(modifiedby);
                    }
                    if (json.has("updatedon")) {
                        invoice.setUpdatedon((Long) json.get("updatedon"));
                    }
                }
                if (json.has(Constants.SEQFORMAT)) {
                    invoice.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) json.getString(Constants.SEQFORMAT)));
                }
                if (json.has(Constants.SEQNUMBER) && json.get(Constants.SEQNUMBER)!=null && !StringUtil.isNullOrEmpty(json.get(Constants.SEQNUMBER).toString())) {
                    invoice.setSeqnumber(Integer.parseInt(json.get(Constants.SEQNUMBER).toString()));
                }
                if (json.has(Constants.DATEPREFIX)) {
                    invoice.setDatePreffixValue(json.getString(Constants.DATEPREFIX));
                }
                if (json.has(Constants.DATEAFTERPREFIX)) {
                    invoice.setDateAfterPreffixValue(json.getString(Constants.DATEAFTERPREFIX));
                }
                if (json.has(Constants.DATESUFFIX)) {
                    invoice.setDateSuffixValue(json.getString(Constants.DATESUFFIX));
                }
                if (json.has("autogenerated")) {
                    invoice.setAutoGenerated(json.getBoolean("autogenerated"));
                }
                if (json.has("memo")) {
                    invoice.setMemo(json.getString("memo"));
                }
                if (json.has("taxAmount")) {
                    invoice.setTaxamount((Double) json.get("taxAmount"));
                }
                if (json.has("taxAmountInBase")) {
                    invoice.setTaxamountinbase((Double) json.get("taxAmountInBase"));
                }
                if (json.has("excludingGstAmount")) {
                    invoice.setExcludingGstAmount((Double) json.get("excludingGstAmount"));
                }
                if (json.has("excludingGstAmountInBase")) {
                    invoice.setExcludingGstAmountInBase((Double) json.get("excludingGstAmountInBase"));
                }
                if (json.has("billto")) {
                    invoice.setBillTo(json.getString("billto"));
                }
                if (json.has("shipaddress")) {
                    invoice.setShipTo(json.getString("shipaddress"));
                }
                if (json.has("shipdate")) {
                    invoice.setShipDate((Date) json.get("shipdate"));
                } else{
                    invoice.setShipDate(null);
                }
                if (json.has("duedate")) {
                    invoice.setDueDate((Date) json.get("duedate"));
                }
                if (json.has("companyid")) {
                    invoice.setCompany((Company) get(Company.class, json.getString("companyid")));
                }
                if (json.has("currencyid")) {
                    invoice.setCurrency((KWLCurrency) get(KWLCurrency.class, json.getString("currencyid")));
                }
                if (json.has("discountid")) {
                    invoice.setDiscount((Discount) get(Discount.class, json.getString("discountid")));
                }
                if (json.has("customerentryid")) {
                    invoice.setCustomerEntry((JournalEntryDetail) get(JournalEntryDetail.class, json.getString("customerentryid")));
                }
                if (json.has(Constants.RoundingAdjustmentEntryID)) {
                    invoice.setRoundingAdjustmentEntry((JournalEntryDetail) get(JournalEntryDetail.class, json.getString(Constants.RoundingAdjustmentEntryID)));
                }
                if (json.has(Constants.IsRoundingAdjustmentApplied)) {
                    invoice.setIsRoundingAdjustmentApplied(json.optBoolean(Constants.IsRoundingAdjustmentApplied, false));
                }
                if (json.has("shipentryid")) {
                    invoice.setShipEntry((JournalEntryDetail) get(JournalEntryDetail.class, json.getString("shipentryid")));
                }
                if (json.has("otherentryid")) {
                    invoice.setOtherEntry((JournalEntryDetail) get(JournalEntryDetail.class, json.getString("otherentryid")));
                }
                if (json.has("taxentryid")) {
                    invoice.setTaxEntry((JournalEntryDetail) get(JournalEntryDetail.class, json.getString("taxentryid")));
                }
                if (json.has("taxid")) {
                    invoice.setTax((Tax) get(Tax.class, json.getString("taxid")));
                }
                if (json.has("journalerentryid")) {
                    invoice.setJournalEntry((JournalEntry) get(JournalEntry.class, json.getString("journalerentryid")));
                }
                if (json.has("erdid")) {
                    invoice.setExchangeRateDetail((ExchangeRateDetails) get(ExchangeRateDetails.class, json.getString("erdid")));
                }
                if (json.has("externalCurrencyRate")) {
                    invoice.setExternalCurrencyRate((Double) json.get("externalCurrencyRate"));
                }
                if (json.has("customerid")) {
                    invoice.setCustomer((Customer) get(Customer.class, json.getString("customerid")));
                }
                if (json.has("salesPerson")) {
                    invoice.setMasterSalesPerson((MasterItem) get(MasterItem.class, json.getString("salesPerson")));
                }
                if (json.has("customerBankAccountTypeId") && !StringUtil.isNullOrEmpty(json.getString("customerBankAccountTypeId"))) {
                    invoice.setCustomerBankAccountType((MasterItem) get(MasterItem.class, json.getString("customerBankAccountTypeId")));
                }
                if (json.has("repeateid")) {
                    invoice.setRepeateInvoice((RepeatedInvoices) get(RepeatedInvoices.class, json.getString("repeateid")));
                }
                if (json.has("parentid")) {
                    invoice.setParentInvoice((Invoice) get(Invoice.class, json.getString("parentid")));
                }
                if (json.has("openingBalanceInvoiceCustomData")) {
                    invoice.setOpeningBalanceInvoiceCustomData((OpeningBalanceInvoiceCustomData) get(OpeningBalanceInvoiceCustomData.class, json.getString("openingBalanceInvoiceCustomData")));
                }
                if (json.has("termid")) {
                    invoice.setTermid((Term) get(Term.class, json.getString("termid")));
                }
                if (json.has("porefno")) {
                    invoice.setPoRefNumber(json.getString("porefno"));
                }
                if (json.has("shipvia")) {
                    invoice.setShipvia(json.getString("shipvia"));
                }
                if (json.has("fob")) {
                    invoice.setFob(json.getString("fob"));
                }
//               if(json.has("template")){
//                invoice.setTemplateid((Projreport_Template) get(Projreport_Template.class, json.getString("template")));
//                } 
//                if (json.has("moduletemplateid")) {
//                    invoice.setModuletemplateid((ModuleTemplate) get(ModuleTemplate.class, json.getString("moduletemplateid")));
//                }
                invoice.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));

                if (json.has("pendingapproval")) {
                    invoice.setPendingapproval(json.getInt("pendingapproval"));
                }
                if (json.has("approvalstatuslevel")) {
                    invoice.setApprovestatuslevel(json.getInt("approvalstatuslevel"));
                }else{
                    invoice.setApprovestatuslevel(11);
                }

                if (json.has("istemplate")) {
                    invoice.setIstemplate(json.getInt("istemplate"));
                } else {
                    invoice.setIstemplate(0);
                }
                 if (json.has("posttext")) {
                    invoice.setPostText(json.getString("posttext"));
                }

                if (json.has("approvallevel")) {
                    invoice.setApprovallevel(json.getInt("approvallevel"));
                }

                if (json.has("partialinv")) {
                    invoice.setPartialinv(json.getBoolean("partialinv"));
                }
                if (json.has("isfavourite")) {
                    if (!json.isNull("isfavourite")) {
                        invoice.setFavourite(json.optBoolean("isfavourite", false));
                    }
                }
                if (json.has("isFixedAsset")) {
                    if (!json.isNull("isFixedAsset")) {
                        invoice.setFixedAssetInvoice(json.getBoolean("isFixedAsset"));
                    }
                }
                if (json.has("isLeaseFixedAsset")) {
                    if (!json.isNull("isLeaseFixedAsset")) {
                        invoice.setFixedAssetLeaseInvoice(json.getBoolean("isLeaseFixedAsset"));
                    }
                }
                if (json.has("isConsignment")) {
                    if (!json.isNull("isConsignment")) {
                        invoice.setIsconsignment(json.getBoolean("isConsignment"));
                    }
                }
                if (json.has("custWarehouse") && json.get("custWarehouse") != null) {
                    InventoryWarehouse warehouse = new InventoryWarehouse();
                    warehouse = (InventoryWarehouse) get(InventoryWarehouse.class, json.getString("custWarehouse"));
                    if (warehouse != null) {
                        invoice.setCustWarehouse(warehouse);
                    }
                }
          
                if (json.has("shipLength")) {
                    invoice.setShiplength(Double.parseDouble((String) json.get("shipLength")));
                }
                if (json.has("invoicetype")) {
                    invoice.setInvoicetype((String) json.get("invoicetype"));
                }
                if (json.has("isInvoiceLinkedWithTaxAppliedDO")) {
                    if (!json.isNull("isInvoiceLinkedWithTaxAppliedDO")) {
                        invoice.setLinkedWithTaxAppliedDO(json.getBoolean("isInvoiceLinkedWithTaxAppliedDO"));
                    }
                }
                if (json.has(Constants.MARKED_PRINTED)) {
                    if (!json.isNull(Constants.MARKED_PRINTED)) {
                        invoice.setPrinted(json.getBoolean(Constants.MARKED_PRINTED));
                    }
                }
                if (json.has("originalOpeningBalanceAmount")) {
                    invoice.setOriginalOpeningBalanceAmount(json.optDouble("originalOpeningBalanceAmount", 0.0));
                }
                if (json.has(Constants.originalOpeningBalanceBaseAmount)) {
                    invoice.setOriginalOpeningBalanceBaseAmount(authHandler.round(json.optDouble(Constants.originalOpeningBalanceBaseAmount, 0.0), companyid));
                }
            
                if (json.has("openingBalanceAmountDue")) {
                    /*
                     * set status flag for opening invoices
                     */
                    if (invoice.isIsOpeningBalenceInvoice()) {
                        if (authHandler.round(json.optDouble("openingBalanceAmountDue", 0.0), companyid) <= 0) {
                            invoice.setIsOpenReceipt(false);
                        } else {
                            invoice.setIsOpenReceipt(true);
                        }
                    }
                    invoice.setOpeningBalanceAmountDue(authHandler.round(json.optDouble("openingBalanceAmountDue", 0.0),companyid));
                }
                if (json.has(Constants.openingBalanceBaseAmountDue)) {
                    invoice.setOpeningBalanceBaseAmountDue(authHandler.round(json.optDouble(Constants.openingBalanceBaseAmountDue, 0.0), companyid));
                }
                if (json.has("lastModifiedDate")) {
                    invoice.setLastModifiedDate((Date) json.get("lastModifiedDate"));
                }
                if (json.has("poRefDate")) {
                    invoice.setPoRefDate((Date) json.get("poRefDate"));
                }
                if (json.has("creationDate")) {
                    invoice.setCreationDate((Date) json.get("creationDate"));
                }
                if (json.has("isNormalInvoice")) {
                    invoice.setNormalInvoice(json.optBoolean("isNormalInvoice", false));
                }
                if (json.has("exchangeRateForOpeningTransaction")) {
                    double exchangeRateForOpeningTransaction = (Double) json.get("exchangeRateForOpeningTransaction");
                    invoice.setExchangeRateForOpeningTransaction(exchangeRateForOpeningTransaction);
                }
                if (json.has("conversionRateFromCurrencyToBase")) {
                    invoice.setConversionRateFromCurrencyToBase((Boolean) json.get("conversionRateFromCurrencyToBase"));
                }

                if (json.has("accountid")) {
                    Account account = json.get("accountid") == null ? null : (Account) get(Account.class, (String) json.get("accountid"));
                    invoice.setAccount(account);
                }
                if (json.has("incash") && json.get("incash") != null) {
                    invoice.setCashtransaction(Boolean.parseBoolean(json.get("incash").toString()));
                }
                if (json.has("isExciseInvoice") && json.get("isExciseInvoice") != null) {
                    invoice.setIsExciseInvoice(Boolean.parseBoolean(json.get("isExciseInvoice").toString()));
                }
                if (json.has("defaultnatureofpurchase") && json.get("defaultnatureofpurchase") != null) {
                    invoice.setDefaultnatureOfPurchase((String) json.get("defaultnatureofpurchase"));
                }
                if (json.has("billshipAddressid")) {
                    BillingShippingAddresses bsa = json.get("billshipAddressid") == null ? null : (BillingShippingAddresses) get(BillingShippingAddresses.class, (String) json.get("billshipAddressid"));
                    invoice.setBillingShippingAddresses(bsa);
                }

                if (json.has("contractMappings")) {
                    Set<InvoiceContractMapping> contractMappings = (Set<InvoiceContractMapping>) json.get("contractMappings");
                    invoice.setContractMappings(contractMappings);
                }
                if (json.has("gstIncluded")) {
                    invoice.setGstIncluded((Boolean) json.get("gstIncluded"));
                }
                if (json.has("badDebtType") && json.get("badDebtType") != null) {
                    invoice.setBadDebtType((Integer) json.get("badDebtType"));
                }
                if (json.has("claimedPeriod") && json.get("claimedPeriod") != null) {
                    invoice.setClaimedPeriod((Integer) json.get("claimedPeriod"));
                }
                if (json.has("claimedDate") && json.get("claimedDate") != null) {
                    invoice.setDebtClaimedDate((Date) json.get("claimedDate"));
                }
//                if (json.has("recoveredDate") && json.get("recoveredDate") != null) {
//                    invoice.setDebtRecoveredDate((Date) json.get("recoveredDate"));
//                }
                if (json.has("gstCurrencyRate")) {
                    invoice.setGstCurrencyRate(json.optDouble("gstCurrencyRate", 0.0));
                }
                if (json.has(Constants.invoiceamountdue)) {
                    /*
                     set status flag for amount due 
                     */
                    if (invoice.isNormalInvoice()) {
                        if (authHandler.round(json.optDouble(Constants.invoiceamountdue, 0.0), companyid) <= 0) {
                            invoice.setIsOpenReceipt(false);
                        } else {
                            invoice.setIsOpenReceipt(true);
                        }
                    }
                    invoice.setInvoiceamountdue(authHandler.round(json.optDouble(Constants.invoiceamountdue, 0.0), companyid));
                    }
                if (json.has(Constants.claimAmountDue)) {
                    invoice.setClaimAmountDue(authHandler.round(json.optDouble(Constants.claimAmountDue, 0.0), companyid));
                }
                if (details != null) {
                    if (!details.isEmpty()) {
                        invoice.setRows(details);
                    }
                }
                if (json.has("deliveryTime") && json.get("deliveryTime") != null) {
                    invoice.setDeliveryTime(json.getString("deliveryTime"));
                }
                
                if (json.has(Constants.termsincludegst) && json.get(Constants.termsincludegst) != null) {
                    invoice.setTermsincludegst(json.getBoolean(Constants.termsincludegst));
                }
                
                if (json.has("paydetailsid")) {
                    PayDetail payDetail = StringUtil.isNullOrEmpty((String) json.getString("paydetailsid")) ? null : (PayDetail) get(PayDetail.class, (String) json.get("paydetailsid"));
                    invoice.setPayDetail(payDetail);
                }
                
                if (json.has("isDraft")) {
                    if (!json.isNull("isDraft")) {
                        invoice.setDraft(json.getBoolean("isDraft"));
                    }
                } else {
                    invoice.setDraft(false);
                }

                if (json.has(Constants.invoiceamount)) { // invoice amount
                    invoice.setInvoiceamount(authHandler.round(json.optDouble(Constants.invoiceamount, 0.0), companyid));
                }
                if (json.has(Constants.invoiceamountinbase)) { // invoice amount in base
                    invoice.setInvoiceamountinbase(authHandler.round(json.optDouble(Constants.invoiceamountinbase, 0.0), companyid));
                }
                if (json.has(Constants.invoiceamountdueinbase)) { // invoice amount due in base
                    invoice.setInvoiceAmountDueInBase(authHandler.round(json.optDouble(Constants.invoiceamountdueinbase, 0.0), companyid));
                   
                }
                if (json.has(Constants.discountAmount)) { // discount amount in document currency
                    invoice.setDiscountAmount(authHandler.round(json.optDouble(Constants.discountAmount, 0.0), companyid));
                }
                if (json.has(Constants.discountAmountInBase)) { // discount amount in base
                    invoice.setDiscountAmountInBase(authHandler.round(json.optDouble(Constants.discountAmountInBase, 0.0), companyid));
                }
                if (json.has("amountduedate") && json.get("amountduedate")!=null) {
                    if(StringUtil.isNullOrEmpty(json.get("amountduedate").toString())){
                        invoice.setAmountDueDate(null);
                    }else{
                        invoice.setAmountDueDate((Date) json.get("amountduedate"));
                    }
                }
                if (json.has("FormSeriesNo") && json.get("FormSeriesNo") != null) {
                    invoice.setFormseriesno((String) json.get("FormSeriesNo"));
                }
                if (json.has("FormNo") && json.get("FormNo") != null) {
                    invoice.setFormno((String) json.get("FormNo"));
                }
                if (json.has("FormDate") && json.get("FormDate") != null) {
                    invoice.setFormdate((Date) json.get("FormDate"));
                }
                if (json.has("FormAmount") && json.get("FormAmount") != null) {
                    invoice.setFormamount((Double) json.get("FormAmount"));
                }
                if (json.has("FormStatus") && json.get("FormStatus") != null) {
                    invoice.setFormstatus((String)json.get("FormStatus"));
                }
                if (json.has("parentInvoice") && json.get("parentInvoice") != null) {
                    invoice.setParentInvoice((Invoice) json.get("parentInvoice"));
                }
                if (json.has("isSupplementary") && json.get("isSupplementary") != null) {
                    invoice.setIsSupplementary(Integer.parseInt(json.get("isSupplementary").toString()));
                }
                if (json.has("excisetypeid") && json.get("excisetypeid") != null) {
                    invoice.setExcisetype((String) json.get("excisetypeid"));
                }
                if (json.has("formtype") && json.get("formtype") != null && !(json.get("formtype").equals("1"))) {  //"1","Without Form"
                    invoice.setFormtype((String) json.get("formtype"));
                    invoice.setFormstatus("2");//Pending
                }
                if (json.has("formtype") && ((StringUtil.isNullOrEmpty((String) json.get("formtype"))) || (json.get("formtype").equals("1")))) {  //"1","Without Form"
                    invoice.setFormstatus("1");//NA
                    if (json.get("formtype").equals("1")) {
                        invoice.setFormtype((String) json.get("formtype"));
                    }
                }
                if(json.has(Constants.RCMApplicable)){
                    invoice.setRcmapplicable(json.optBoolean(Constants.RCMApplicable,false));
                }
                if (json.has("isTaxCommittedOnAvalara") && json.get("isTaxCommittedOnAvalara") != null) {
                    invoice.setIsTaxCommittedOnAvalara(json.optBoolean("isTaxCommittedOnAvalara", false));
                }
                
                saveOrUpdate(invoice);
            }
            list.add(invoice);
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateInvoice:" + ex, ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public boolean updateInvoiceAmountInBase(Invoice invoice, JSONObject json) throws ServiceException {
        boolean success = true;
        try {
            String companyid = json.optString("companyid");
            if (invoice != null) {
                if (json.has(Constants.invoiceamount)) { // invoice amount
                    invoice.setInvoiceamount(authHandler.round(json.optDouble(Constants.invoiceamount, 0.0), companyid));
                }
                if (json.has(Constants.invoiceamountinbase)) { // invoice amount in base
                    invoice.setInvoiceamountinbase(authHandler.round(json.optDouble(Constants.invoiceamountinbase, 0.0), companyid));
                }
                if (json.has(Constants.invoiceamountdueinbase)) { // invoice amount due in base
                    invoice.setInvoiceAmountDueInBase(authHandler.round(json.optDouble(Constants.invoiceamountdueinbase, 0.0), companyid));
                   
                }
                if (json.has(Constants.discountAmount)) { // discount amount in document currency
                    invoice.setDiscountAmount(authHandler.round(json.optDouble(Constants.discountAmount, 0.0), companyid));
                }
                if (json.has(Constants.discountAmountInBase)) { // discount amount in base
                    invoice.setDiscountAmountInBase(authHandler.round(json.optDouble(Constants.discountAmountInBase, 0.0), companyid));
                }
                saveOrUpdate(invoice);
            }
        } catch (Exception ex) {
            success = false;
            System.out.println("accInvoiceImpl.updateInvoice:" + ex.getMessage());
        }
        return success;
    }
    
    /* Function to save the date on which amount due is set to 0*/
    public boolean saveInvoiceAmountDueZeroDate(Invoice invoice, HashMap<String, Object> dataMap) {
        boolean success = true;
        try {
            DateFormat dateOnlyFormatter = authHandler.getDateOnlyFormat();
            Date maxLinkDate = null;
            Date amountduedate = null;
            if (dataMap.containsKey("amountduedate")) {
                amountduedate = (Date) dataMap.get("amountduedate");
            }
            ArrayList params = new ArrayList();
            params.add(invoice.getID());
            params.add(invoice.getID());
            params.add(invoice.getID());
            String selectQuery = "select max(resulttable.linkeddate) "
                    + "from "
                    + "( "
                    + "select invoicelinkdate as linkeddate from cndetails  "
                    + "where invoice=? and (invoicelinkdate IS NOT NULL AND invoicelinkdate!='1970-01-01') "
                    + "union "
                    + "select receiptlinkdate as linkeddate from linkdetailreceipt  "
                    + "where invoice=? and (receiptlinkdate IS NOT NULL AND receiptlinkdate!='1970-01-01') "
                    + "union "
                    + "select je.entrydate as linkeddate from receiptdetails  "
                    + "inner join receipt rp on rp.id=receiptdetails.receipt inner join journalentry as je on je.id=rp.journalentry "
                    + "where  receiptdetails.invoice=? "
                    + ") as resulttable ";
            List list = executeSQLQuery(selectQuery, params.toArray());
            if (!list.isEmpty() && list.get(0) != null) {
                Iterator iterator = list.iterator();
                if (iterator.hasNext()) {
                    try {
                        maxLinkDate = (Date) iterator.next();
                        maxLinkDate = dateOnlyFormatter.parse(dateOnlyFormatter.format(maxLinkDate));//Removing time part
                    } catch (ClassCastException | ParseException ex) {
                        maxLinkDate = null;
                    }
                }
            }
            if (maxLinkDate != null && amountduedate != null) {// when both are not null
                if (maxLinkDate.after(amountduedate)) {
                    amountduedate = maxLinkDate;
                }
            } else if (maxLinkDate != null && amountduedate == null) {// when max date is not null and amountdue date is null
                amountduedate = maxLinkDate;
            }

            if (amountduedate != null) {
                invoice.setAmountDueDate(amountduedate);
            }
            saveOrUpdate(invoice);
        } catch (Exception ex) {
            System.out.println("saveInvoiceAmountDueZeroDate: " + ex.getMessage());
            success = false;
        }
        return success;
    }
    public KwlReturnObject updateInvoiceUsingSet(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String invoiceid = (String) dataMap.get("id");;
            Invoice invoice = (Invoice) get(Invoice.class, invoiceid);
            if (invoice != null) {
                if (dataMap.containsKey("contractMappings")) {
                    Set<InvoiceContractMapping> contractMappings = (Set<InvoiceContractMapping>) dataMap.get("contractMappings");
                    invoice.setContractMappings(contractMappings);
                }
            }
            saveOrUpdate(invoice);

            list.add(invoice);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateInvoice:" + ex, ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    
    @Override
    public KwlReturnObject saveTaxAdjustment(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        TaxAdjustment taxAdjustment = new TaxAdjustment();
        taxAdjustment = createTaxAdjustment(taxAdjustment, dataMap);
        saveOrUpdate(taxAdjustment);
        list.add(taxAdjustment);
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject updateTaxAdjustment(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        String taxAdjustmentId = (String) dataMap.get("documentId");
        TaxAdjustment taxAdjustment = (TaxAdjustment) get(TaxAdjustment.class, taxAdjustmentId);
        taxAdjustment = createTaxAdjustment(taxAdjustment, dataMap);
        saveOrUpdate(taxAdjustment);
        list.add(taxAdjustment);
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public TaxAdjustment createTaxAdjustment(TaxAdjustment taxAdjustment, HashMap<String, Object> dataMap) {
        if (dataMap.containsKey("companyId") && dataMap.get("companyId") != null) {
            Company company = (Company) get(Company.class, (String) dataMap.get("companyId"));
            taxAdjustment.setCompany(company);
        }
        if (dataMap.containsKey("journalEntryId") && dataMap.get("journalEntryId") != null) {
            JournalEntry journalEntry = (JournalEntry) get(JournalEntry.class, (String) dataMap.get("journalEntryId"));
            taxAdjustment.setJournalEntry(journalEntry);
        }
        if (dataMap.containsKey("documentNo") && dataMap.get("documentNo") != null) {
            taxAdjustment.setDocumentNo((String) dataMap.get("documentNo"));
        }
        if (dataMap.containsKey("billDate") && dataMap.get("billDate") != null) {
            taxAdjustment.setCreationDate((Date) dataMap.get("billDate"));
        }
        if (dataMap.containsKey("amount") && dataMap.get("amount") != null) {
            taxAdjustment.setAmount((Double) dataMap.get("amount"));
        }
        if (dataMap.containsKey("gstAmount") && dataMap.get("gstAmount") != null) {
            taxAdjustment.setTaxAmount((Double) dataMap.get("gstAmount"));
        }
        if (dataMap.containsKey("taxId") && dataMap.get("taxId") != null) {
            Tax tax = (Tax) get(Tax.class, (String) dataMap.get("taxId"));
            taxAdjustment.setTax(tax);
        }
        if (dataMap.containsKey("reason") && dataMap.get("reason") != null) {
            MasterItem masterItem = dataMap.get("reason") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("reason"));
            taxAdjustment.setReason(masterItem);
        }
        if (dataMap.containsKey("isInputAdjustment") && dataMap.get("isInputAdjustment") != null) {
            taxAdjustment.setInputAdjustment((Boolean) dataMap.get("isInputAdjustment"));
        }

        return taxAdjustment;
    }
    
    @Override
    public KwlReturnObject deleteTaxAdjustment(HashMap<String, Object> dataMap) throws ServiceException {
        String taxAdjustmentId = (String) dataMap.get("documentId");
        String companyId = (String) dataMap.get("companyId");

        List params = new ArrayList();
        params.add(taxAdjustmentId);
        params.add(companyId);

        String query = "DELETE FROM TaxAdjustment ta WHERE ta.id=? AND ta.company.companyID=?";

        int numRows = executeUpdate( query, params.toArray());

        return new KwlReturnObject(true, "Tax Adjustment has been deleted successfully.", null, null, numRows);
    }
    
    @Override
    public KwlReturnObject saveBadDebtInvoiceMapping(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        BadDebtInvoiceMapping badDebtInvoiceMapping = new BadDebtInvoiceMapping();
        badDebtInvoiceMapping = createBadDebtInvoiceMapping(badDebtInvoiceMapping, dataMap);
        saveOrUpdate(badDebtInvoiceMapping);
        list.add(badDebtInvoiceMapping);
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public BadDebtInvoiceMapping createBadDebtInvoiceMapping(BadDebtInvoiceMapping badDebtInvoiceMapping, HashMap<String, Object> dataMap) {
        if (dataMap.containsKey("companyId") && dataMap.get("companyId") != null) {
            Company company = (Company) get(Company.class, (String) dataMap.get("companyId"));
            badDebtInvoiceMapping.setCompany(company);
        }
        if (dataMap.containsKey("invoiceId") && dataMap.get("invoiceId") != null) {
            Invoice invoice = (Invoice) get(Invoice.class, (String) dataMap.get("invoiceId"));
            badDebtInvoiceMapping.setInvoice(invoice);
        }
        if (dataMap.containsKey("journalEntryId") && dataMap.get("journalEntryId") != null) {
            JournalEntry journalEntry = (JournalEntry) get(JournalEntry.class, (String) dataMap.get("journalEntryId"));
            badDebtInvoiceMapping.setJournalEntry(journalEntry);
        }
        if (dataMap.containsKey("badDebtType") && dataMap.get("badDebtType") != null) {
            badDebtInvoiceMapping.setBadDebtType((Integer) dataMap.get("badDebtType"));
        }
        if (dataMap.containsKey("invoiceReceivedAmt") && dataMap.get("invoiceReceivedAmt") != null) {
            badDebtInvoiceMapping.setBadDebtAmtRecovered((Double) dataMap.get("invoiceReceivedAmt"));
        }
        if (dataMap.containsKey("gstToRecover") && dataMap.get("gstToRecover") != null) {
            badDebtInvoiceMapping.setBadAmtDebtGSTAmtRecovered((Double) dataMap.get("gstToRecover"));
        }
        if (dataMap.containsKey("badDebtAmtClaimed") && dataMap.get("badDebtAmtClaimed") != null) {
            badDebtInvoiceMapping.setBadDebtAmtClaimed((Double) dataMap.get("badDebtAmtClaimed"));
        }
        if (dataMap.containsKey("badDebtGSTAmtClaimed") && dataMap.get("badDebtGSTAmtClaimed") != null) {
            badDebtInvoiceMapping.setBadDebtGSTAmtClaimed((Double) dataMap.get("badDebtGSTAmtClaimed"));
        }
        if (dataMap.containsKey("recoveredDate") && dataMap.get("recoveredDate") != null) {
            badDebtInvoiceMapping.setBadDebtRecoveredDate((Date) dataMap.get("recoveredDate"));
        }
        if (dataMap.containsKey("claimedDate") && dataMap.get("claimedDate") != null) {
            badDebtInvoiceMapping.setBadDebtClaimedDate((Date) dataMap.get("claimedDate"));
        }
        if (dataMap.containsKey("autoGenerated") && dataMap.get("autoGenerated") != null) {
            badDebtInvoiceMapping.setAutoGenerated(true);
        }
        if (dataMap.containsKey("seqnumber") && dataMap.get("seqnumber") != null) {
            badDebtInvoiceMapping.setSeqnumber(Integer.parseInt(dataMap.get("seqnumber").toString()));
        }
        if (dataMap.containsKey("baddebtentryNumber") && dataMap.get("baddebtentryNumber") != null) {
            badDebtInvoiceMapping.setBadDebtSeqNumber(dataMap.get("baddebtentryNumber").toString());
        }
        if (dataMap.containsKey(Constants.DATEPREFIX) && dataMap.get(Constants.DATEPREFIX) !=null) {
            badDebtInvoiceMapping.setDatePreffixValue((String) dataMap.get(Constants.DATEPREFIX));
        }
        if (dataMap.containsKey(Constants.DATEAFTERPREFIX) && dataMap.get(Constants.DATEAFTERPREFIX) !=null) {
            badDebtInvoiceMapping.setDateAfterPreffixValue((String) dataMap.get(Constants.DATEAFTERPREFIX));
        }
        if (dataMap.containsKey(Constants.DATESUFFIX) && dataMap.get(Constants.DATESUFFIX) !=null) {
            badDebtInvoiceMapping.setDateSuffixValue((String) dataMap.get(Constants.DATESUFFIX));
        }
        if (dataMap.containsKey("receiptid") && dataMap.get("receiptid") != null) {
            badDebtInvoiceMapping.setReceiptId(dataMap.get("receiptid").toString());
        }
        if (dataMap.containsKey("seqformat") && dataMap.get("seqformat") != null) {
            String id = dataMap.get("seqformat").toString();
            SequenceFormat seqFormat = (SequenceFormat) get(com.krawler.hql.accounting.SequenceFormat.class, id);
            badDebtInvoiceMapping.setSeqformat(seqFormat);
        }
        return badDebtInvoiceMapping;
    }
    
    public KwlReturnObject saveInvoice(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        String companyid= "";
        try {
            Invoice invoice = new Invoice();
            if (dataMap.containsKey("companyid")) {
                companyid = (String) dataMap.get("companyid");
            }
            if (dataMap.containsKey("invoiceid")) {
                invoice = (Invoice) get(Invoice.class, (String) dataMap.get("invoiceid"));
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    invoice.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("updatedon")) {
                    invoice.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            } else {
                if (dataMap.containsKey("createdby")) {
                    User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
                    invoice.setCreatedby(createdby);
                }
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    invoice.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("createdon")) {
                    invoice.setCreatedon((Long) dataMap.get("createdon"));
                }
                if (dataMap.containsKey("updatedon")) {
                    invoice.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            }
            if (dataMap.containsKey(Constants.SEQFORMAT)) {
                invoice.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get(Constants.SEQFORMAT)));
            }
            if (dataMap.containsKey(Constants.SEQNUMBER)) {
                invoice.setSeqnumber(Integer.parseInt(dataMap.get(Constants.SEQNUMBER).toString()));
            }
            if (dataMap.containsKey(Constants.DATEPREFIX) && dataMap.get(Constants.DATEPREFIX) != null) {
                invoice.setDatePreffixValue((String) dataMap.get(Constants.DATEPREFIX));
            }
            
            if (dataMap.containsKey("creationDate")) {
                invoice.setCreationDate((Date) dataMap.get("creationDate"));
            }
            if (dataMap.containsKey(Constants.DATEAFTERPREFIX) && dataMap.get(Constants.DATEAFTERPREFIX) != null) {
                invoice.setDateAfterPreffixValue((String) dataMap.get(Constants.DATEAFTERPREFIX));
            }
            if (dataMap.containsKey(Constants.DATESUFFIX) && dataMap.get(Constants.DATESUFFIX) != null) {
                invoice.setDateSuffixValue((String) dataMap.get(Constants.DATESUFFIX));
            }
            if (dataMap.containsKey("otherentryid")) {
                JournalEntryDetail jed = dataMap.get("otherentryid") == null ? null : (JournalEntryDetail) get(JournalEntryDetail.class, (String) dataMap.get("otherentryid"));
                invoice.setOtherEntry(jed);
            }
            if (dataMap.containsKey("shipentryid")) {
                JournalEntryDetail jed = dataMap.get("shipentryid") == null ? null : (JournalEntryDetail) get(JournalEntryDetail.class, (String) dataMap.get("shipentryid"));
                invoice.setShipEntry(jed);
            }
            if (dataMap.containsKey("taxentryid")) {
                JournalEntryDetail jed = dataMap.get("taxentryid") == null ? null : (JournalEntryDetail) get(JournalEntryDetail.class, (String) dataMap.get("taxentryid"));
                invoice.setTaxEntry(jed);
            }
            if (dataMap.containsKey("customerentryid")) {
                JournalEntryDetail jed = dataMap.get("customerentryid") == null ? null : (JournalEntryDetail) get(JournalEntryDetail.class, (String) dataMap.get("customerentryid"));
                invoice.setCustomerEntry(jed);
            }
            if (dataMap.containsKey(Constants.RoundingAdjustmentEntryID)) {
                JournalEntryDetail jed = dataMap.get(Constants.RoundingAdjustmentEntryID) == null ? null : (JournalEntryDetail) get(JournalEntryDetail.class, (String) dataMap.get(Constants.RoundingAdjustmentEntryID));
                invoice.setRoundingAdjustmentEntry(jed);
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid"));
                invoice.setTax(tax);
            }
            if (dataMap.containsKey("termid")) {
                Term term = dataMap.get("termid") == null ? null : (Term) get(Term.class, (String) dataMap.get("termid"));
                invoice.setTermid(term);
            }
            if (dataMap.containsKey("autogenerated")) {
                invoice.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("isjobWorkWitoutGrn")) {
                invoice.setIsjobWorkInvoice((Boolean) dataMap.get("isjobWorkWitoutGrn"));
            }
            if (dataMap.containsKey(Constants.generatedSource)&& dataMap.get(Constants.generatedSource) != null) {
                invoice.setGeneratedSource((Integer)dataMap.get(Constants.generatedSource));
            }
            if (dataMap.containsKey("memo")) {
                invoice.setMemo((String) dataMap.get("memo"));
            }
//            if (dataMap.containsKey("moduletemplateid") && !StringUtil.isNullOrEmpty(dataMap.get("moduletemplateid").toString())) {
//                invoice.setModuletemplateid((ModuleTemplate) get(ModuleTemplate.class, dataMap.get("moduletemplateid").toString()));
//            }
            if (dataMap.containsKey("externalCurrencyRate")) {
                invoice.setExternalCurrencyRate((Double) dataMap.get("externalCurrencyRate"));
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                invoice.setCompany(company);
            }
            if (dataMap.containsKey("currencyid")) {
                KWLCurrency currency = dataMap.get("currencyid") == null ? null : (KWLCurrency) get(KWLCurrency.class, (String) dataMap.get("currencyid"));
                invoice.setCurrency(currency);
            }
            if (dataMap.containsKey("customerid")) {
                invoice.setCustomer((Customer) get(Customer.class, (String) dataMap.get("customerid")));
            }

            if (dataMap.containsKey("repeateid")) {
                RepeatedInvoices rpt = dataMap.get("repeateid") == null ? null : (RepeatedInvoices) get(RepeatedInvoices.class, (String) dataMap.get("repeateid"));
                invoice.setRepeateInvoice(rpt);
            }
            if (dataMap.containsKey("parentid")) {
                Invoice pInvoice = dataMap.get("parentid") == null ? null : (Invoice) get(Invoice.class, (String) dataMap.get("parentid"));
                invoice.setParentInvoice(pInvoice);
            }

            if (dataMap.containsKey("details")) {
                invoice.setRows((Set<InvoiceDetail>) dataMap.get("details"));
            }
            if (dataMap.containsKey("porefno")) {
                invoice.setPoRefNumber((String) dataMap.get("porefno"));
            }
            if (dataMap.containsKey("accountid")) {
                Account account = dataMap.get("accountid") == null ? null : (Account) get(Account.class, (String) dataMap.get("accountid"));
                invoice.setAccount(account);
            }
            if (dataMap.containsKey("shipLength")) {
                invoice.setShiplength(Double.parseDouble((String) dataMap.get("shipLength")));
            }
            if (dataMap.containsKey("invoicetype")) {
                invoice.setInvoicetype((String) dataMap.get("invoicetype"));
            }
            if (dataMap.containsKey("gstCurrencyRate")) {
                invoice.setGstCurrencyRate((Double) dataMap.get("gstCurrencyRate"));
            }

            if (dataMap.containsKey("incash") && dataMap.get("incash") != null) {
                invoice.setCashtransaction(Boolean.parseBoolean(dataMap.get("incash").toString()));
            }
            if (dataMap.containsKey("isExciseInvoice") && dataMap.get("isExciseInvoice") != null) {
                invoice.setIsExciseInvoice((Boolean) dataMap.get("isExciseInvoice"));
            }
            if (dataMap.containsKey("defaultnatureofpurchase") && dataMap.get("defaultnatureofpurchase") != null) {
                invoice.setDefaultnatureOfPurchase((String) dataMap.get("defaultnatureofpurchase"));
            }
            if (dataMap.containsKey(Constants.invoiceamountdue) && dataMap.get(Constants.invoiceamountdue) != null) {
                /*
                 set status flag for amount due 
                 */
                if (authHandler.round(Double.valueOf(dataMap.get(Constants.invoiceamountdue).toString()), companyid) <= 0) {
                    invoice.setIsOpenReceipt(false);
                } else {
                    invoice.setIsOpenReceipt(true);
                }
                invoice.setInvoiceamountdue(authHandler.round(Double.valueOf(dataMap.get(Constants.invoiceamountdue).toString()), companyid));
            }
            if (dataMap.containsKey(Constants.termsincludegst) && dataMap.get(Constants.termsincludegst) != null) {
                invoice.setTermsincludegst((Boolean)dataMap.get(Constants.termsincludegst));
            }
            if (dataMap.containsKey(Constants.invoiceamount)  && dataMap.get(Constants.invoiceamount) != null) { // invoice amount
                invoice.setInvoiceamount(authHandler.round(Double.valueOf(dataMap.get(Constants.invoiceamount).toString()), companyid));
            }
            if (dataMap.containsKey(Constants.invoiceamountinbase)  && dataMap.get(Constants.invoiceamountinbase) != null) { // invoice amount in base
                invoice.setInvoiceamountinbase(authHandler.round(Double.valueOf(dataMap.get(Constants.invoiceamountinbase).toString()), companyid));
            }
            if (dataMap.containsKey("shipdate") && StringUtil.isNullOrEmpty(dataMap.get("shipdate").toString())) {
                invoice.setShipDate((Date) dataMap.get("shipdate"));
            } else {
                invoice.setShipDate(null);
            }
            if (dataMap.containsKey("gstapplicable") && dataMap.get("gstapplicable") != null) {  // If New GST Appliled
                invoice.setIsIndGSTApplied((Boolean) dataMap.get("gstapplicable"));
            }
            if (dataMap.containsKey(Constants.isMerchantExporter) && dataMap.get(Constants.isMerchantExporter) != null) {  
                invoice.setIsMerchantExporter((Boolean) dataMap.get(Constants.isMerchantExporter));
            }
            /**
             * Save Additional Memo for INDONESIA
             */
            if (dataMap.containsKey(Constants.additionalMemo) && dataMap.get(Constants.additionalMemo) != null && !StringUtil.isNullOrEmpty(dataMap.get(Constants.additionalMemo).toString())) {
                AdditionalMemo additionalMemo = (AdditionalMemo) get(AdditionalMemo.class, dataMap.get(Constants.additionalMemo).toString());
                invoice.setAdditionalmemo(additionalMemo);
            }
            if (dataMap.containsKey(Constants.isApplyTaxToTerms) && dataMap.get(Constants.isApplyTaxToTerms) != null) {  // If Save As Draft
                invoice.setApplyTaxToTerms((Boolean) dataMap.get(Constants.isApplyTaxToTerms));
            }
             /*---Dropship SI is not eligible for further linking in SR & DO---- */
            if (dataMap.containsKey("isdropshipchecked")) {
                invoice.setIsDropshipDocument((Boolean) dataMap.get("isdropshipchecked"));
                invoice.setIsOpenDO(false);
                invoice.setIsOpenSR(false);
            }
            if (dataMap.containsKey("isTaxCommittedOnAvalara") && dataMap.get("isTaxCommittedOnAvalara") != null) {
                invoice.setIsTaxCommittedOnAvalara((Boolean) dataMap.get("isTaxCommittedOnAvalara"));
            }
            save(invoice);
            list.add(invoice);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveInvoice : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject saveExciseTemplateMapping(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        String msg="Created Excise Unit successfully.";
        try{
            ExciseDetailsTemplateMap exciseTempMap=new ExciseDetailsTemplateMap();
            
//            if (requestParams.containsKey("manufacturertype")) {
//                exciseTempMap.setManufacturerType((String) requestParams.get("manufacturertype"));
//            }
            if (requestParams.containsKey("id") && !StringUtil.isNullOrEmpty(requestParams.get("id").toString())) {
                exciseTempMap = (ExciseDetailsTemplateMap) get(ExciseDetailsTemplateMap.class, (String) requestParams.get("id"));
                msg="Update Excise Unit successfully.";
            }
            if (requestParams.containsKey("registrationtype")) {
                exciseTempMap.setRegistrationType((String) requestParams.get("registrationtype"));
            }
            if (requestParams.containsKey("unitname")) {
                exciseTempMap.setUnitname((String) requestParams.get("unitname"));
            }
            if (requestParams.containsKey("eccnumber")) {
                exciseTempMap.setECCNo((String) requestParams.get("eccnumber"));
            }
            if (requestParams.containsKey("warehouseid")) {
                exciseTempMap.setWarehouseid((Store) requestParams.get("warehouseid"));
            }
            if (requestParams.containsKey("companyid")) {
                exciseTempMap.setCompanyid((Company) requestParams.get("companyid"));
            }
            save(exciseTempMap);
            list.add(exciseTempMap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveExciseTemplateMapping : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Excise Unit Update successfully.", null, null, list.size());
    }
    /*
     * Check Excise Unit ma with any Module template
     * checkIdUsedInTranscation
     * @ param : HashMap<String, Object> requestParams.
     * return value : KwlReturnObject
     */
    @Override
    public KwlReturnObject checkIdUsedInTranscation(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        String msg="";
        try{
            if (requestParams.containsKey("id") && !StringUtil.isNullOrEmpty(requestParams.get("id").toString())) {
                String query = " from ModuleTemplate where companyUnitid = ?";
                 list = executeQuery(query, new Object[]{requestParams.get("id")});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveExciseTemplateMapping : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, list.size());
    }
    /*
     * Delete Excise Unit 
     * deleteExciseTemplateMapping
     * @ param : HashMap<String, Object> requestParams.
     * return value : KwlReturnObject
     */
    @Override
    public KwlReturnObject deleteExciseTemplateMapping(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        String msg="Created Excise Unit successfully.";
        try{
            if (requestParams.containsKey("id") && !StringUtil.isNullOrEmpty(requestParams.get("id").toString())) {
                String query = "delete from excisedetailstemplatemap where id = ?";
                 int count = executeSQLUpdate(query, new Object[]{requestParams.get("id")});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveExciseTemplateMapping : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Delete Excise Unit Sucessfully", null, null, list.size());
    }
    
    @Override
    public KwlReturnObject deleteInvoice(String invoiceid, String companyid) throws ServiceException {
        String journalent = "";
        String delQueryJeDetail="";
        String delQueryJE="";
        String delQueryForWriteOff="";
        
        ArrayList writeOffParams = new ArrayList();
        writeOffParams.add(companyid);
        writeOffParams.add(invoiceid);

        String queryToGetWriteOffJE = "select journalentry from invoicewriteoff where company = ? and invoice = ?";
        List writeOffJEList = executeSQLQuery( queryToGetWriteOffJE, writeOffParams.toArray());
        Iterator writeOffJEIterator = writeOffJEList.iterator();

        while (writeOffJEIterator.hasNext()) {
            String jeidi = writeOffJEIterator.next().toString();
            journalent += "'" + jeidi + "',";
        }

        String queryToGetReverseWriteOffJE = "select reversejournalentry from invoicewriteoff where company = ? and invoice = ?";
        List writeOffReverseJEList = executeSQLQuery( queryToGetReverseWriteOffJE, writeOffParams.toArray());
        Iterator writeOffReverseJEIterator = writeOffReverseJEList.iterator();

        while (writeOffReverseJEIterator.hasNext()) {
            String jeidi = writeOffReverseJEIterator.next().toString();
            journalent += "'" + jeidi + "',";
        }

        if (!StringUtil.isNullOrEmpty(journalent)) {
            journalent = journalent.substring(0, journalent.length() - 1);
        }
        
        ArrayList paramsWriteOffDelete = new ArrayList();
        paramsWriteOffDelete.add(invoiceid);
        delQueryForWriteOff = "delete from invoicewriteoff where invoice = ? ";
        int writeOffCount = executeSQLUpdate( delQueryForWriteOff, paramsWriteOffDelete.toArray());

        if (!journalent.equals("")) {
            ArrayList paramsJEDEtail = new ArrayList();
            paramsJEDEtail.add(companyid);
            delQueryJeDetail = "delete from jedetail where company = ? and journalEntry in (" + journalent + ") ";
            int numRows1 = executeSQLUpdate( delQueryJeDetail, paramsJEDEtail.toArray());

            ArrayList paramsJE = new ArrayList();
            delQueryJE = "delete from journalentry where id  in (" + journalent + ")";
            int numRows2 = executeSQLUpdate( delQueryJE, paramsJE.toArray());
        }
        
        ArrayList params1 = new ArrayList();
        String delQuery1 = "delete from openingbalanceinvoicecustomdata where openingbalanceinvoiceid=? ";
        params1.add(invoiceid);
        int numRows1 = executeSQLUpdate(delQuery1, params1.toArray());
        
        //Delete Invoice
        String delQuery = "delete from Invoice inv where ID=? and inv.company.companyID=?";
        int numRows = executeUpdate( delQuery, new Object[]{invoiceid, companyid});

        return new KwlReturnObject(true, "Invoice has been deleted successfully.", null, null, numRows);
    }

    @Override
    public KwlReturnObject deleteInvoiceContractMappings(HashMap<String, Object> requestParams) throws ServiceException {
        int totalRowDeleted = 0;
        if (requestParams.containsKey("invoiceid") && requestParams.containsKey("companyid")) {
            List params = new ArrayList();
            params.add(requestParams.get("invoiceid"));
            params.add(requestParams.get("companyid"));

            String hql = "DELETE from InvoiceContractMapping icm where icm.invoice.ID=? and icm.company.companyID=?";
            totalRowDeleted = executeUpdate( hql, params.toArray());
        }
        return new KwlReturnObject(true, "Invoice Contract Mappings has been deleted successfully.", null, null, totalRowDeleted);
    }

    @Override
    public KwlReturnObject deleteAssetDetailsLinkedWithInvoice(HashMap<String, Object> requestParams) throws ServiceException {
        int numtotal = 0;
        try {
            if (requestParams.containsKey("invoiceid") && requestParams.containsKey("companyid")) {
                boolean updateFlag = true;

                if (requestParams.containsKey("updateFlag")) {
                    updateFlag = (Boolean) requestParams.get("updateFlag");
                }

                int numRows = 0;
                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("invoiceid"));



                // Deleting data from asset details table

                String assetQuery = "SELECT ad.id FROM invoice inv "
                        + "INNER JOIN  invoicedetails invd ON inv.id=invd.invoice "
                        + "INNER JOIN assetdetailsinvdetailmapping amp ON invd.id=amp.invoicedetailid "
                        + "INNER JOIN assetdetail ad on ad.id=amp.assetdetails "
                        + "WHERE amp.moduleid=2 AND inv.company=? and inv.id=?";

                List assetList = executeSQLQuery( assetQuery, params8.toArray());
                Iterator assetItr = assetList.iterator();
                String assupdateQuery="";
                while (assetItr.hasNext()) {
                    ArrayList assetParams = new ArrayList();

                    String assetId = assetItr.next().toString();

                    assetParams.add(assetId);
                    assetParams.add(requestParams.get("companyid"));
                    if (updateFlag) {
                        assupdateQuery = "UPDATE assetdetail SET assetsoldflag=0, disposalprofitloss=0 WHERE id=? AND company=? AND assetsoldflag=1";
                        numRows = executeSQLUpdate(assupdateQuery, assetParams.toArray());

                        assupdateQuery = "UPDATE assetdetail SET isused=0, disposalprofitloss=0 WHERE id=? AND company=? AND assetsoldflag=2";
                        numRows += executeSQLUpdate(assupdateQuery, assetParams.toArray());
                    }

                    assupdateQuery = "UPDATE assetdetail SET isleasecicreated=0 WHERE id=? AND company=? AND assetsoldflag=0";
                    numRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());
//                    
//                    String query = "update JournalEntry set deleted=true where ID=? and company.companyID=?";
//                    numRows = executeUpdate( query, new Object[]{obj[1], requestParams.get("companyid")});
                }

//                if (deleteMappingAlso) {

//                String myquery = "select id from invoicedetails where invoice in (select id from invoice where company =? and id=?)";
                String myquery = "select invd.id from invoicedetails invd inner join invoice inv on invd.invoice=inv.id where inv.company = ? and inv.id=?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {

                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }


                // Deleting data from assetdetailsinvdetailmapping

                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));

                    String assetMapDelQuery = "DELETE FROM assetdetailsinvdetailmapping WHERE invoicedetailid IN (" + idStrings + ") and moduleid=2 and company=?";
                    numRows = executeSQLUpdate( assetMapDelQuery, assetParams.toArray());
                }
//                }
            }


        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Delivery Order as its referance child field is not deleted.", ex);//+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Delivery Order has been deleted successfully.", null, null, numtotal);
    }

    public List getCompanyUnit(HashMap<String, Object> requestParams) throws ServiceException {
        List returnList = new ArrayList();
        ArrayList params = new ArrayList();
        String conditionQuery = "";
        String query = " SELECT * FROM excisedetailstemplatemap ";
        
        if(requestParams.containsKey(Constants.companyKey) && requestParams.get(Constants.companyKey) != null){
            conditionQuery += " excisedetailstemplatemap.companyid= ?  ";
            params.add(requestParams.get(Constants.companyKey));
        }
        if(requestParams.containsKey("excludeUsedExciseUnits") && requestParams.get("excludeUsedExciseUnits") != null){
            if(!StringUtil.isNullOrEmpty(conditionQuery)){
                 conditionQuery += " and ";
            }
            conditionQuery += " excisedetailstemplatemap.id NOT IN(SELECT companyunitid FROM moduletemplate WHERE companyid=? AND companyunitid IS NOT NULL) ";
            params.add(requestParams.get(Constants.companyKey));
        }
        if(!StringUtil.isNullOrEmpty(conditionQuery)){
            query += " where " +conditionQuery;
        }
        returnList = executeSQLQuery(query, params.toArray());
        return returnList;
    }

    @Override
    public KwlReturnObject deleteInvoicePermanent(HashMap<String, Object> requestParams) throws ServiceException,AccountingException {

        String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "", delQuery6 = "",delQuery7="", delQuery8 = "",delQuery9 = "",delQueryForWriteOff="";
        int numtotal = 0;
        try {
            if (requestParams.containsKey("invoiceid") && requestParams.containsKey("companyid")) {

                boolean isFixedAsset = false;
                if (requestParams.containsKey("isFixedAsset") && requestParams.get("isFixedAsset") != null) {
                    isFixedAsset = (Boolean) requestParams.get("isFixedAsset");
                }

                boolean isLeaseFixedAsset = false;
                if (requestParams.containsKey("isLeaseFixedAsset") && requestParams.get("isLeaseFixedAsset") != null) {
                    isLeaseFixedAsset = (Boolean) requestParams.get("isLeaseFixedAsset");
                }

                int assRows = 0;
                String journalent = "";
                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("invoiceid"));


                //This code used for update the link flag of quotation
                ArrayList updateLinkFlagList = new ArrayList();
                updateLinkFlagList.add(requestParams.get("invoiceid"));
                String upadteQuotation ="update  quotation as q inner join  quotationdetails as qd inner join invoicedetails ind on  q.id=qd.quotation and ind.quotationdetail=qd.id set linkflag=0,isopen='T' where ind.invoice=?";
                int result = executeSQLUpdate( upadteQuotation, updateLinkFlagList.toArray());
                // Deleting data from asset details table

                if (isFixedAsset || isLeaseFixedAsset) {

                    String assetQuery = "SELECT ad.id FROM invoice inv "
                            + "INNER JOIN  invoicedetails invd ON inv.id=invd.invoice "
                            + "INNER JOIN assetdetailsinvdetailmapping amp ON invd.id=amp.invoicedetailid "
                            + "INNER JOIN assetdetail ad on ad.id=amp.assetdetails "
                            + "WHERE amp.moduleid=2 AND inv.company=? and inv.id=?";

                    List assetList = executeSQLQuery( assetQuery, params8.toArray());
                    Iterator assetItr = assetList.iterator();

                    while (assetItr.hasNext()) {
                        ArrayList assetParams = new ArrayList();
                        String assetId = assetItr.next().toString();


                        assetParams.add(assetId);
                        assetParams.add(requestParams.get("companyid"));

                        String assupdateQuery = "UPDATE assetdetail SET assetsoldflag=0,isleasecicreated=false,disposalprofitloss=0 WHERE id=? AND company=? AND assetsoldflag=1";
                        assRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());

                        assupdateQuery = "UPDATE assetdetail SET isused=0,isleasecicreated=false,disposalprofitloss=0 WHERE id=? AND company=? AND assetsoldflag=2";
                        assRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());

                        assupdateQuery = "UPDATE assetdetail SET isleasecicreated=false WHERE id=? AND company=? AND assetsoldflag=0";
                        assRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());
                    }

                    if (isLeaseFixedAsset) {
                        String contractDeleteQuery = "delete from invoicecontractmapping where company=? and invoice=?";
                        assRows += executeSQLUpdate( contractDeleteQuery, params8.toArray());
                    }
                }

//                String myquery = "select id from invoicedetails where invoice in (select id from invoice where company =? and id=?)";
                String myquery = "select invd.id from invoicedetails invd inner join invoice inv on invd.invoice=inv.id where inv.company =? and inv.id=?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {

                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }


                // Deleting data from assetdetailsinvdetailmapping
                if (!StringUtil.isNullOrEmpty(idStrings) && (isFixedAsset || isLeaseFixedAsset)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));

                    String assetMapDelQuery = "DELETE FROM assetdetailsinvdetailmapping WHERE invoicedetailid IN (" + idStrings + ") and moduleid=2 and company=?";
                    int numRows = executeSQLUpdate( assetMapDelQuery, assetParams.toArray());
                }
                String invoiceID = (String) requestParams.get("invoiceid");
                int numRows10 = 0;
                String delQuery10 = "delete from invoicetermsmap where invoice=?";
                numRows10 = executeSQLUpdate( delQuery10, new Object[]{invoiceID});

                ArrayList params5 = new ArrayList();
                params5.add(requestParams.get("companyid"));
                params5.add(requestParams.get("invoiceid"));
//                delQuery5 = "delete from invoicedetails where invoice in (select id from invoice where company = ? and id=?)";
                delQuery5 = "delete invd from invoicedetails invd inner join invoice inv on invd.invoice=inv.id where inv.company = ? and inv.id=?";
                int numRows5 = executeSQLUpdate( delQuery5, params5.toArray());
                /**
                 * Delete GST Fields for India.
                 */
                deleteGstTaxClassDetails(idStrings);

                
//                ArrayList params = new ArrayList();
//                params.add(requestParams.get("companyid"));
//                //   params.add(requestParams.get("invoiceid"));
//                delQuery = "delete  from inventory where company = ? and id in (" + idStrings + ") ";
//                int numRows = executeSQLUpdate( delQuery, params.toArray());
                List resultList = null;
                int numRows = 0;
                String companyid = (String) requestParams.get("companyid");
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    String selQuery = "from Inventory where company.companyID = ? and  ID in (" + idStrings + ") ";
                    resultList = executeQuery(selQuery, new Object[]{companyid});
                    Iterator itrInv = resultList.iterator();
                    while (itrInv.hasNext()) {
                        Inventory inventory = (Inventory) itrInv.next();
                        if (inventory != null && inventory.isDeleted() == false) {
                            if (inventory.isCarryIn()) {
                                inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() - inventory.getBaseuomquantity());// minus Purchase and Plus Sales (for Reverse effect for quantity)
                            } else {
                                inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() + inventory.getBaseuomquantity());
                            }
                        }
                    }
                    deleteAll(resultList);
                    numRows = resultList.size();
                }

                
                ArrayList params9 = new ArrayList();
                params9.add(requestParams.get("companyid"));
                params9.add(requestParams.get("invoiceid"));
                String myquery1 = "select journalentry from invoice where company = ? and id=?";
                List list1 = executeSQLQuery( myquery1, params9.toArray());
                Iterator itr1 = list1.iterator();

                while (itr1.hasNext()) {

                    String jeidi = itr1.next().toString();
                    journalent += "'" + jeidi + "',";
                }
                
                ArrayList writeOffParams = new ArrayList();
                writeOffParams.add(requestParams.get("companyid"));
                writeOffParams.add(requestParams.get("invoiceid"));
                
                String queryToGetWriteOffJE = "select journalentry from invoicewriteoff where company = ? and invoice = ?";
                List writeOffJEList = executeSQLQuery( queryToGetWriteOffJE, writeOffParams.toArray());
                Iterator writeOffJEIterator = writeOffJEList.iterator();

                while (writeOffJEIterator.hasNext()) {
                    String jeidi = writeOffJEIterator.next().toString();
                    journalent += "'" + jeidi + "',";
                }
                
                String queryToGetReverseWriteOffJE = "select reversejournalentry from invoicewriteoff where company = ? and invoice = ?";
                List writeOffReverseJEList = executeSQLQuery( queryToGetReverseWriteOffJE, writeOffParams.toArray());
                Iterator writeOffReverseJEIterator = writeOffReverseJEList.iterator();
                
                while (writeOffReverseJEIterator.hasNext()) {
                    String jeidi = writeOffReverseJEIterator.next().toString();
                    journalent += "'" + jeidi + "',";
                }
                
                if (!StringUtil.isNullOrEmpty(journalent)) {
                    journalent = journalent.substring(0, journalent.length() - 1);
                }
                
                
                ArrayList params1 = new ArrayList();
                params1.add(requestParams.get("companyid"));
                params1.add(requestParams.get("companyid"));
                params1.add(requestParams.get("invoiceid"));
                delQuery1 = "delete  from accjedetailcustomdata where jedetailId in (select id from jedetail where company = ? and journalEntry in (select journalentry from invoice where company = ? and id= ?))";
                int numRows1 = executeSQLUpdate( delQuery1, params1.toArray());

                ArrayList params10 = new ArrayList();
                params10.add(requestParams.get("companyid"));
                params10.add(requestParams.get("companyid"));
                params10.add(requestParams.get("greceiptid"));
                delQuery8 = "delete  from accjedetailproductcustomdata where jedetailId in (select id from jedetail where company = ? and journalEntry in (select journalentry from goodsreceipt where company =? and id = ?))";
                int numRows8 = executeSQLUpdate( delQuery8, params1.toArray());

                ArrayList params6 = new ArrayList();
                params6.add(requestParams.get("companyid"));
                params6.add(requestParams.get("invoiceid"));   
//                delQuery9 = "delete from repeatedjememo where repeatedinv = (select  id   from repeatedinvoices where id in (select repeateinvoice from invoice where company = ? and id=?))";
                delQuery9 = "delete rpmemo from repeatedjememo rpmemo inner join repeatedinvoices rpinv on rpmemo.repeatedinv=rpinv.id inner join invoice inv on rpinv.id=inv.repeateinvoice where inv.company =? and inv.id=?";
                int numRows9 = executeSQLUpdate( delQuery9, params6.toArray());
               
//                delQuery7 = "delete from repeatedinvoices where id in (select repeateinvoice from invoice where company = ? and id=?)";
                delQuery7 = "delete rpinv from repeatedinvoices rpinv inner join invoice inv on rpinv.id=inv.repeateinvoice where inv.company =? and inv.id=?";
                int numRows7 = executeSQLUpdate( delQuery7, params6.toArray());

                ArrayList paramsWriteOffDelete = new ArrayList();
                paramsWriteOffDelete.add(requestParams.get("invoiceid"));
                delQueryForWriteOff = "delete from invoicewriteoff where invoice = ? ";
                int writeOffCount = executeSQLUpdate( delQueryForWriteOff, paramsWriteOffDelete.toArray());
//                String invoiceID = (String) requestParams.get("invoiceid");
//                int numRows10 = 0;
//                
//                String delQuery10 = "delete from invoicetermsmap where invoice=?";
//                numRows10 = executeSQLUpdate( delQuery10, new Object[]{invoiceID});

                delQuery6 = "delete from invoice where company = ? and id=?";
                int numRows6 = executeSQLUpdate( delQuery6, params6.toArray());

                deleteGstDocHistoryDetails((String)requestParams.get("invoiceid"));
                ArrayList params3 = new ArrayList();
                ArrayList params4 = new ArrayList();
                ArrayList params2 = new ArrayList();
                params3.add(requestParams.get("companyid"));
                // params3.add(requestParams.get("invoiceid"));
                int numRows3 = 0, numRows4 = 0,numRows2=0;
                delQuery3 = "delete from jedetail where company = ? and journalEntry in (" + journalent + ") ";
                delQuery4 = "delete from journalentry where id  in (" + journalent + ")";
                delQuery2 = "delete  from accjecustomdata where journalentryId in (" + journalent + ")";
                if (!StringUtil.isNullOrEmpty(journalent)) {
                    numRows3 = executeSQLUpdate(delQuery3, params3.toArray());
                    numRows4 = executeSQLUpdate(delQuery4, params4.toArray());
                    numRows2 = executeSQLUpdate( delQuery2, params2.toArray());
                }


                numtotal = numRows + numRows1 + numRows2 + numRows3 + numRows4 + numRows5 + numRows6 + numRows8+writeOffCount + numRows10;
            }

            return new KwlReturnObject(true, "Invoice has been deleted successfully.", null, null, numtotal);
        } catch (Exception ex) {
            throw ServiceException.INTERRUPTED("Selected Invoice cannot be deleted as it is used in other transaction(s)");    //For Temporary purpose, showing this prompt message. Once delete option ll be avail in Delivery Planner Report, It ll get remove.
//            throw ServiceException.FAILURE("Cannot delete Invoice as its referance child field is not deleted.", ex);//+ex.getMessage(), ex);     //Show this once delete button avail in delivery planner report.
        }

    }

    public KwlReturnObject deleteInvoiceEntry(String invoiceid, String companyid) throws ServiceException,AccountingException {
        //This code used for update the link flag of quotation
        ArrayList updateLinkFlagList = new ArrayList();
        updateLinkFlagList.add(invoiceid);
        String upadteQuotation = "update  quotation as q inner join  quotationdetails as qd inner join invoicedetails ind on  q.id=qd.quotation and ind.quotationdetail=qd.id set linkflag=0 where ind.invoice=?";
        int result = executeSQLUpdate( upadteQuotation, updateLinkFlagList.toArray());
        String query = "update Invoice inv set inv.deleted=true where inv.ID=? and inv.company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "Invoice has been deleted successfully.", null, null, numRows);
    }

    @Override
    public KwlReturnObject getCalculatedInvTax(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        ArrayList paramslist = new ArrayList();
        String Condition = "";
        String taxid = (String) requestParams.get("taxid");
        paramslist.add(taxid);
        if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
//            Condition = " and inv.journalEntry.entryDate >= ? and inv.journalEntry.entryDate <= ?";
            Condition = " and inv.creationDate >= ? and inv.creationDate <= ?";
            paramslist.add(requestParams.get("startDate"));
            paramslist.add(requestParams.get("endDate"));
        }

        String ss = requestParams.containsKey("ss")?(String) requestParams.get("ss"):"";
        
        if (!StringUtil.isNullOrEmpty(ss)) {
            try {
                String[] searchcol = new String[]{"inv.tax.name", "inv.customer.name", "inv.journalEntry.entryNumber","inv.invoiceNumber"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(paramslist, ss, 4); 
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                Condition +=searchQuery;
            } catch (SQLException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
                
          }

        String mySearchFilterString = "";
        String joinString = "";
        String mySearchFilterString1 = "";
        if (requestParams.containsKey(Constants.Acc_Search_Json) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.Acc_Search_Json))) {
            mySearchFilterString = StringUtil.getMySearchFilterString(requestParams, paramslist);
            if (mySearchFilterString.contains("c.accjecustomdata")) {
                mySearchFilterString = mySearchFilterString.replaceAll("c.accjecustomdata", "inv.journalEntry.accBillInvCustomData");
            }
            if (mySearchFilterString.contains("c.AccJEDetailCustomData")) {
                joinString = " inner join inv.rows row";
                mySearchFilterString = mySearchFilterString.replaceAll("c.AccJEDetailCustomData", "row.gstJED.accJEDetailCustomData");
            }
        }
        if (requestParams.containsKey(Constants.fixedAssetsDisposalInvoiceSearchJson) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson))) {
            requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson));
            requestParams.put(Constants.moduleid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);
            mySearchFilterString1 = StringUtil.getMySearchFilterString(requestParams, paramslist);
            if (mySearchFilterString1.contains("c.accjecustomdata")) {
                mySearchFilterString1 = mySearchFilterString1.replaceAll("c.accjecustomdata", "inv.journalEntry.accBillInvCustomData");
            }
            if (mySearchFilterString1.contains("c.AccJEDetailCustomData")) {
                joinString = " inner join inv.rows row";
                mySearchFilterString1 = mySearchFilterString1.replaceAll("c.AccJEDetailCustomData", "row.gstJED.accJEDetailCustomData");
            }
            mySearchFilterString = StringUtil.combineTwoCustomSearchStrings(mySearchFilterString,mySearchFilterString1);
        }

//            if(StringUtil.isNullOrEmpty(ss)==false){
//               for(int i=0;i<=3;i++){
//                 paramslist.add(ss+"%");
//               }
//                 Condition+= " and (inv.tax.name like ? or inv.customer.name like ?  or inv.journalEntry.entryNumber like ? or inv.invoiceNumber like ? ) ";
//        }
        String query = "select inv from Invoice inv " + joinString + " where inv.tax.ID = ? and inv.deleted=false and inv.pendingapproval = 0 and inv.draft=false and inv.istemplate != 2 and inv.linkedWithTaxAppliedDO = false " + Condition + mySearchFilterString;
        returnlist = executeQuery( query, paramslist.toArray());
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }
    
    public KwlReturnObject getCalculatedInvTaxNew(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        ArrayList paramslist = new ArrayList();
        String Condition = "";
        String taxid = (String) requestParams.get("taxid");
        paramslist.add(taxid);
        if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
//            Condition = " and inv.journalEntry.entryDate >= ? and inv.journalEntry.entryDate <= ?";
            Condition = " and inv.creationDate >= ? and inv.creationDate <= ?";
            paramslist.add(requestParams.get("startDate"));
            paramslist.add(requestParams.get("endDate"));
        }

        String ss = requestParams.containsKey("ss")?(String) requestParams.get("ss"):"";
        
        if (!StringUtil.isNullOrEmpty(ss)) {
            try {
                String[] searchcol = new String[]{"inv.tax.name", "inv.customer.name", "inv.journalEntry.entryNumber","inv.invoiceNumber"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(paramslist, ss, 4); 
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                Condition +=searchQuery;
            } catch (SQLException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
                
          }

        String mySearchFilterString = "";
        String joinString = "";
        String mySearchFilterString1 = "";
        if (requestParams.containsKey(Constants.Acc_Search_Json) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.Acc_Search_Json))) {
            mySearchFilterString = StringUtil.getMySearchFilterString(requestParams, paramslist);
            if (mySearchFilterString.contains("c.accjecustomdata")) {
                mySearchFilterString = mySearchFilterString.replaceAll("c.accjecustomdata", "inv.journalEntry.accBillInvCustomData");
            }
            if (mySearchFilterString.contains("c.AccJEDetailCustomData")) {
                joinString = " inner join inv.rows row";
                mySearchFilterString = mySearchFilterString.replaceAll("c.AccJEDetailCustomData", "row.gstJED.accJEDetailCustomData");
            }
        }
        if (requestParams.containsKey(Constants.fixedAssetsDisposalInvoiceSearchJson) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson))) {
            requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson));
            requestParams.put(Constants.moduleid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);
            mySearchFilterString1 = StringUtil.getMySearchFilterString(requestParams, paramslist);
            if (mySearchFilterString1.contains("c.accjecustomdata")) {
                mySearchFilterString1 = mySearchFilterString1.replaceAll("c.accjecustomdata", "inv.journalEntry.accBillInvCustomData");
            }
            if (mySearchFilterString1.contains("c.AccJEDetailCustomData")) {
                joinString = " inner join inv.rows row";
                mySearchFilterString1 = mySearchFilterString1.replaceAll("c.AccJEDetailCustomData", "row.gstJED.accJEDetailCustomData");
            }
            mySearchFilterString = StringUtil.combineTwoCustomSearchStrings(mySearchFilterString,mySearchFilterString1);
        }

//            if(StringUtil.isNullOrEmpty(ss)==false){
//               for(int i=0;i<=3;i++){
//                 paramslist.add(ss+"%");
//               }
//                 Condition+= " and (inv.tax.name like ? or inv.customer.name like ?  or inv.journalEntry.entryNumber like ? or inv.invoiceNumber like ? ) ";
//        }
        String query = "";
        if(requestParams.containsKey("onlyCount") && (Boolean)requestParams.get("onlyCount")){
            query = "select count(*) from Invoice inv " + joinString + " where inv.tax.ID = ? and inv.deleted=false and inv.pendingapproval = 0 and inv.draft=false and inv.istemplate != 2 and inv.linkedWithTaxAppliedDO = false " + Condition + mySearchFilterString;
            returnlist = executeQuery( query, paramslist.toArray());
        }
        else{
            query = "select inv, inv.journalEntry from Invoice inv " + joinString + " where inv.tax.ID = ? and inv.deleted=false and inv.pendingapproval = 0 and inv.draft=false and inv.istemplate != 2 and inv.linkedWithTaxAppliedDO = false " + Condition + mySearchFilterString;
            if(requestParams.containsKey("start") && requestParams.containsKey("limit")){
                int start = (Integer)requestParams.get("start");
                int limit = (Integer)requestParams.get("limit");
                returnlist = executeQueryPaging( query, paramslist.toArray(), new Integer[]{start, limit});   
            }
            else{
                returnlist = executeQuery( query, paramslist.toArray());
            }
        }
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }

    public KwlReturnObject getCalculatedVHT(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        ArrayList paramslist = new ArrayList();
        String Condition = "";
        paramslist.add(requestParams.get("companyid"));
        if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
//            Condition = " and inv.journalEntry.entryDate >= ? and inv.journalEntry.entryDate <= ?";
            Condition = " and inv.creationDate >= ? and inv.creationDate <= ?";
            paramslist.add(requestParams.get("startDate"));
            paramslist.add(requestParams.get("endDate"));
        }

        String ss = requestParams.containsKey("ss") ? (String) requestParams.get("ss") : "";

        if (!StringUtil.isNullOrEmpty(ss)) {
            try {
                String[] searchcol = new String[]{"inv.tax.name", "inv.customer.name", "inv.journalEntry.entryNumber", "inv.invoiceNumber"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(paramslist, ss, 4);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                Condition += searchQuery;
            } catch (SQLException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        String query = "from Invoice inv where inv.deleted=false and inv.pendingapproval = 0 and inv.draft=false and inv.istemplate != 2 and inv.linkedWithTaxAppliedDO = false and inv.company.companyID=?" + Condition;
        returnlist = executeQuery( query, paramslist.toArray());
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }
    public KwlReturnObject getDOFromSR(String invoiceid, String companyid) throws ServiceException {
        String selQuery = "from SalesReturnDetail srd  where srd.dodetails.deliveryOrder.ID=? and srd.salesReturn.deleted=false and srd.company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getDOFromInv(String invoiceid, String companyid) throws ServiceException {
        String selQuery = "from InvoiceDetail srd  where srd.deliveryOrderDetail.deliveryOrder.ID=? and srd.invoice.deleted=false and srd.company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCalculatedInvDtlTax(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        ArrayList paramslist = new ArrayList();
        String Condition = "";
        String taxid = (String) requestParams.get("taxid");
        paramslist.add(taxid);
        if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
//            Condition = " and inv.invoice.journalEntry.entryDate >= ? and inv.invoice.journalEntry.entryDate <= ?";
            Condition = " and inv.invoice.creationDate >= ? and inv.invoice.creationDate <= ?";
            paramslist.add(requestParams.get("startDate"));
            paramslist.add(requestParams.get("endDate"));
        }

	String ss = requestParams.containsKey("ss")?(String) requestParams.get("ss"):"";
        if (!StringUtil.isNullOrEmpty(ss)) {
            try {
                String[] searchcol = new String[]{"inv.tax.name", "inv.invoice.customer.name", "inv.invoice.journalEntry.entryNumber","inv.invoice.invoiceNumber"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(paramslist, ss, 4);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                Condition +=searchQuery;
            } catch (SQLException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        String mySearchFilterString = "";
        String mySearchFilterString1 = "";
        if (requestParams.containsKey(Constants.Acc_Search_Json) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.Acc_Search_Json))) {
            mySearchFilterString = StringUtil.getMySearchFilterString(requestParams, paramslist);
            if (mySearchFilterString.contains("c.accjecustomdata")) {
                mySearchFilterString = mySearchFilterString.replaceAll("c.accjecustomdata", "inv.invoice.journalEntry.accBillInvCustomData");
            }
            if (mySearchFilterString.contains("c.AccJEDetailCustomData")) {
                mySearchFilterString = mySearchFilterString.replaceAll("c.AccJEDetailCustomData", "inv.gstJED.accJEDetailCustomData");
            }
        }
        if (requestParams.containsKey(Constants.fixedAssetsDisposalInvoiceSearchJson) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson))) {
            requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson));
            requestParams.put(Constants.moduleid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);
            mySearchFilterString1 = StringUtil.getMySearchFilterString(requestParams, paramslist);
            if (mySearchFilterString1.contains("c.accjecustomdata")) {
                mySearchFilterString1 = mySearchFilterString1.replaceAll("c.accjecustomdata", "inv.invoice.journalEntry.accBillInvCustomData");
            }
            if (mySearchFilterString1.contains("c.AccJEDetailCustomData")) {
                mySearchFilterString1 = mySearchFilterString1.replaceAll("c.AccJEDetailCustomData", "inv.gstJED.accJEDetailCustomData");
            }
            mySearchFilterString = StringUtil.combineCustomSearchStrings(mySearchFilterString.replace("and", "AND"),mySearchFilterString1.replace("and", "AND")," or ");
            }
        
//            if(StringUtil.isNullOrEmpty(ss)==false){
//               for(int i=0;i<=3;i++){
//                 paramslist.add(ss+"%");
//               }
//                 Condition+= " and (inv.tax.name like ? or inv.invoice.customer.name like ?  or inv.invoice.journalEntry.entryNumber like ? or inv.invoice.invoiceNumber like ? ) ";
//        }

        String query = "from InvoiceDetail inv where inv.tax.ID = ? and inv.invoice.deleted=false and inv.invoice.pendingapproval=0 and inv.invoice.draft=false and inv.invoice.istemplate != 2 and inv.invoice.linkedWithTaxAppliedDO = false " + Condition + mySearchFilterString;
        returnlist = executeQuery( query, paramslist.toArray());
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }
    
    /*
    * Deprecating this method as it is only used to fetch the old records
    * i.e debitnote of type 1 and 3 created before 22 april 2014 are considered as oldrecord.
    * because creation UI of type 1 and 3 has been change.
    */
    @Deprecated    
    @Override
    public KwlReturnObject getCalculatedCNTax(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        ArrayList paramslist = new ArrayList();
        String Condition = "";       
//        String taxid = (String) requestParams.get("taxid");
//        paramslist.add(taxid);
        if (requestParams.containsKey("companyid") && requestParams.containsKey("companyid")) {
            String companyid = (String) requestParams.get("companyid");
            paramslist.add(companyid);
            Condition = " and dn.company.companyID = ? ";
        }
        if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
//            Condition += " and dn.journalEntry.entryDate >= ? and dn.journalEntry.entryDate <= ?";
            Condition += " and dn.creationDate >= ? and dn.creationDate <= ?";
            paramslist.add(requestParams.get("startDate"));
            paramslist.add(requestParams.get("endDate"));
        }

	     
	     String ss = requestParams.containsKey("ss")?(String) requestParams.get("ss"):"";
       
        if (!StringUtil.isNullOrEmpty(ss)) {
            try {
                String[] searchcol = new String[]{"dn.vendor.name", "dn.journalEntry.entryNumber", "dn.creditNoteNumber"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(paramslist, ss, 3);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                Condition +=searchQuery;
            } catch (SQLException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
                
          }
        String mySearchFilterString = "";
        String joinString = "";
        if (requestParams.containsKey(Constants.Acc_Search_Json) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.Acc_Search_Json))) {
            mySearchFilterString = StringUtil.getMySearchFilterString(requestParams, paramslist);
            if (mySearchFilterString.contains("c.accjecustomdata")) {
                mySearchFilterString = mySearchFilterString.replaceAll("c.accjecustomdata", "dn.journalEntry.accBillInvCustomData");
            }
            if (mySearchFilterString.contains("c.AccJEDetailCustomData")) {
                joinString = " inner join dn.rows rows ";
                mySearchFilterString = mySearchFilterString.replaceAll("c.AccJEDetailCustomData", " rows.gstJED.accJEDetailCustomData");
            }
        }
//            if(StringUtil.isNullOrEmpty(ss)==false){
//               for(int i=0;i<=2;i++){
//                 paramslist.add(ss+"%");//inv.tax.name like ? or 
//               }
//                 Condition+= " and (dn.vendor.name like ?  or dn.journalEntry.entryNumber like ? or dn.creditNoteNumber like ? ) ";
//        }


//        gr.tax.ID = ? and 
        String query = "select dn from CreditNote dn " + joinString + " where dn.deleted=false AND dn.normalCN = true AND dn.approvestatuslevel = 11 AND dn.oldRecord = true " + Condition + mySearchFilterString;
        returnlist = executeQuery( query, paramslist.toArray());
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }
    
    @Override
    public KwlReturnObject getCalculatedCreditNoteTax(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        ArrayList paramslist = new ArrayList();
        String Condition = "";
        if (requestParams.containsKey("companyid") && requestParams.containsKey("companyid")) {
            String companyid = (String) requestParams.get("companyid");
            paramslist.add(companyid);
            Condition = " and dn.company.companyID = ? ";
        }
        if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
//            Condition += " and dn.journalEntry.entryDate >= ? and dn.journalEntry.entryDate <= ?";
            Condition += " and dn.creationDate >= ? and dn.creationDate <= ?";
            paramslist.add(requestParams.get("startDate"));
            paramslist.add(requestParams.get("endDate"));
        }

        String ss = requestParams.containsKey("ss") ? (String) requestParams.get("ss") : "";

        if (!StringUtil.isNullOrEmpty(ss)) {
            try {
                String[] searchcol = new String[]{"dn.vendor.name", "dn.journalEntry.entryNumber", "dn.creditNoteNumber"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(paramslist, ss, 3);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                Condition += searchQuery;
            } catch (SQLException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        if (requestParams.containsKey("taxid")) {
            String taxid = (String) requestParams.get("taxid");
            Condition += " and dn.tax.ID = ? ";
            paramslist.add(taxid);
        }
        String mySearchFilterString = "";
        String joinString = "";
        if (requestParams.containsKey(Constants.Acc_Search_Json) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.Acc_Search_Json))) {
            mySearchFilterString = StringUtil.getMySearchFilterString(requestParams, paramslist);
            if (mySearchFilterString.contains("c.accjecustomdata")) {
                mySearchFilterString = mySearchFilterString.replaceAll("c.accjecustomdata", "dn.journalEntry.accBillInvCustomData");
            }
            if (mySearchFilterString.contains("c.AccJEDetailCustomData")) {
                joinString = " inner join dn.rowsGst rowgst ";
                mySearchFilterString = mySearchFilterString.replaceAll("c.AccJEDetailCustomData", " rowgst.gstJED.accJEDetailCustomData");
            }
        }
        String query = "select dn from CreditNote dn " + joinString + " where dn.deleted=false AND dn.normalCN = true AND dn.approvestatuslevel = 11 AND dn.oldRecord = false " + Condition + mySearchFilterString;
        returnlist = executeQuery(query, paramslist.toArray());
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }
    
    public KwlReturnObject getJEFromInvoice(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String query = "select inv.journalEntry.ID from Invoice inv where inv.ID=? and inv.company.companyID=inv.journalEntry.company.companyID";
        list = executeQuery( query, new Object[]{invoiceid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getInvoiceDiscount(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String query = "select inv.discount.ID from Invoice inv where inv.ID=? and inv.company.companyID=inv.discount.company.companyID";
        list = executeQuery( query, new Object[]{invoiceid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getInvoiceDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from InvoiceDetail";
        return buildNExecuteQuery( query, requestParams);
    }
    
    public KwlReturnObject getAllInvoices(HashMap<String, Object> requestParams) throws ServiceException {
        List list = null;
        String query = "",conditionQuery="";
        List params = new ArrayList();
        list = new ArrayList();
        if (Boolean.parseBoolean(requestParams.get("isSales").toString())) {
            query = " select inv.id from invoice inv "
                  + " inner join journalentry je on je.id = inv.journalentry ";
            if( requestParams.containsKey("companyid") && requestParams.get("companyid")!= null && !StringUtil.isNullOrEmpty(requestParams.get("companyid").toString()) ){
                if(!StringUtil.isNullOrEmpty(conditionQuery)){
                   conditionQuery += " and "; 
                }
                conditionQuery += " inv.company= ? ";
                params.add(requestParams.get("companyid"));
            }
            if( requestParams.containsKey("deleteflag") && requestParams.get("deleteflag")!= null && !StringUtil.isNullOrEmpty(requestParams.get("deleteflag").toString()) ){
                if(!StringUtil.isNullOrEmpty(conditionQuery)){
                   conditionQuery += " and "; 
                }
                conditionQuery += " inv.deleteflag= ? ";
                params.add(requestParams.get("deleteflag"));
            }
        } else {
            query = " select grpt.id from goodsreceipt grpt "
                  + " inner join journalentry je on je.id = grpt.journalentry ";
            if( requestParams.containsKey("companyid") && requestParams.get("companyid")!= null && !StringUtil.isNullOrEmpty(requestParams.get("companyid").toString()) ){
                if(!StringUtil.isNullOrEmpty(conditionQuery)){
                   conditionQuery += " and "; 
                }
                conditionQuery += " grpt.company= ? ";
                params.add(requestParams.get("companyid"));
            }
            if( requestParams.containsKey("deleteflag") && requestParams.get("deleteflag")!= null && !StringUtil.isNullOrEmpty(requestParams.get("deleteflag").toString()) ){
                if(!StringUtil.isNullOrEmpty(conditionQuery)){
                   conditionQuery += " and "; 
                }
                conditionQuery += " grpt.deleteflag= ? ";
                params.add(requestParams.get("deleteflag"));
            }
        }
        if( requestParams.containsKey("startDate") && requestParams.get("startDate")!= null && !StringUtil.isNullOrEmpty(requestParams.get("startDate").toString()) ){
            if(!StringUtil.isNullOrEmpty(conditionQuery)){
                conditionQuery += " and "; 
            }
            conditionQuery += " je.entrydate >= ? ";
            params.add(requestParams.get("startDate"));
        }
        if( requestParams.containsKey("endDate") && requestParams.get("endDate")!= null && !StringUtil.isNullOrEmpty(requestParams.get("endDate").toString()) ){
            if(!StringUtil.isNullOrEmpty(conditionQuery)){
                conditionQuery += " and "; 
            }
            conditionQuery += " je.entrydate <= ? ";
            params.add(requestParams.get("endDate"));
        }
        if(!StringUtil.isNullOrEmpty(conditionQuery)){
            query += " where "+conditionQuery;
        }
        list = executeSQLQuery(query, params.toArray());
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    public KwlReturnObject getSalesReturnDetailsByInvoiceDetails(HashMap<String, Object> requestParams) throws ServiceException{
        List list = null;
        ArrayList paramslist = new ArrayList();
        String condition= "";
        String companyid = (String) requestParams.get("companyid");
        if(!StringUtil.isNullOrEmpty(companyid)){
            paramslist.add(companyid);
            if (requestParams.containsKey("invoicedetailid") && requestParams.get("invoicedetailid")!=null) {
                String invoiceDetailId=(String) requestParams.get("invoicedetailid");
                condition += " and srd.cidetails.ID = ? ";
                paramslist.add(invoiceDetailId);
            }
            if (requestParams.containsKey("isNoteAlso") && requestParams.get("isNoteAlso")!=null) {
                boolean isNoteAlso = Boolean.parseBoolean(requestParams.get("isNoteAlso").toString());
                condition += " and srd.salesReturn.isNoteAlso = ?";
                paramslist.add(isNoteAlso);
            }
            String selQuery = "from SalesReturnDetail srd where srd.company.companyID = ? and srd.salesReturn.deleted = false" + condition;
            list = executeQuery( selQuery, paramslist.toArray());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public int getTotalSalesReturnDetailsCountByInvoiceDetails(String companyid) throws ServiceException{
        List list = null;
        ArrayList params= new ArrayList();
        int count = 0;
        try {
            String query = "select srd.id from srdetails srd inner join salesreturn sr on sr.id=srd.salesreturn where srd.cidetails in (select invd.id from invoicedetails invd where invd.company=?) and srd.company=? and sr.isNoteAlso='T'"; 
            params.add(companyid);
            params.add(companyid);
            list = executeSQLQuery( query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getTotalSalesReturnDetailsCountByInvoiceDetails:" + ex.getMessage(), ex);
        }
        return count;
    }
    
    public KwlReturnObject getSalesInvoiceExciseDetails(String invoiceId) throws ServiceException {
        List list = new ArrayList();
        String query = "select * from salesinvoiceexcisedetailsmap WHERE invoice=?";
        list=executeSQLQuery(query,new Object[]{invoiceId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    /**
     * To return salesinvoiceexcisedetailsmap from HQL Query
     * @param invoiceId
     * @return
     * @throws ServiceException 
     */
    public KwlReturnObject getSalesInvoiceExciseDetailsHQL(String invoiceId) throws ServiceException {
        List list = new ArrayList();
        String query = "from SalesInvoiceExciseDetailsMap WHERE invoice.ID=?";
        list = executeQuery( query, new Object[]{ invoiceId});
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    //Neeraj change-Customer Quotation
    public KwlReturnObject getQuotationDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from QuotationDetail";
        return buildNExecuteQuery( query, requestParams);
    }

    public KwlReturnObject getQuotationCreditTermDetails(String companyid, int paymentdays) throws ServiceException {
        List list = new ArrayList();
        String hq1 = " from Term where company.companyID=? and  termdays = ? ";
        list = executeQuery( hq1, new Object[]{companyid, paymentdays});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getInvoiceDetailsCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from AccJEDetailCustomData";
        return buildNExecuteQuery( query, requestParams);
    }

    public KwlReturnObject getOpeningInvoiceDetailsCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from OpeningBalanceInvoiceCustomData";
        return buildNExecuteQuery( query, requestParams);
    }

    public int getInvoiceDetailsCustomDataRecCount(String companyid, String recid) throws ServiceException {
        List list = new ArrayList();
        String query = "select jedetailId from AccJEDetailCustomData  where company.companyID =  ? and recdetailId = ? ";
        list = executeQuery( query, new Object[]{companyid, recid});
        return list.size();
    }

    
    /**
     * Checks if records present for given JEdetailId.
     * @param companyid
     * @param recid
     * @return list of JEdetailId's
     * @throws ServiceException 
     */
    public int getInvoiceDetailsCustomDataJECount(String companyid, String recid) throws ServiceException {
        List list = new ArrayList();
        String query = "select jedetailId from AccJEDetailCustomData  where company.companyID =  ? and jedetailId = ? ";
        list = executeQuery( query, new Object[]{companyid, recid});
        return list.size();
    }

    public KwlReturnObject getInvoiceDetailsCustomDataForProduct(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from AccJEDetailsProductCustomData";
        return buildNExecuteQuery( query, requestParams);
    }
    public KwlReturnObject getInvoiceDetailsCustomDataForProductNew(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "select jedetailId from AccJEDetailsProductCustomData";
        return buildNExecuteQuery( query, requestParams);
    }

    public KwlReturnObject getInvoiceDetailsDiscount(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String query = "select invd.discount.ID from InvoiceDetail invd where invd.invoice.ID=? and invd.company.companyID=invd.discount.company.companyID";
        list = executeQuery( query, new Object[]{invoiceid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getInvoiceInventory(String invoiceid) throws ServiceException {
        List list = new ArrayList();
        String query = "select invd.inventory.ID from InvoiceDetail invd where invd.invoice.ID=? and invd.company.companyID=invd.inventory.company.companyID";
        list = executeQuery( query, new Object[]{invoiceid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject getDeliveryOrderInventory(String doid) throws ServiceException {
        List list = new ArrayList();
        String query = "select invd.inventory.ID from DeliveryOrderDetail invd where invd.deliveryOrder.ID=? and invd.company.companyID=invd.inventory.company.companyID";
        list = executeQuery( query, new Object[]{doid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject getWorkOrderInventory(String doid) throws ServiceException {
        List list = new ArrayList();
        String query = "select invd.inventory.ID from AssetMaintenanceWorkOrderDetail invd where invd.assetMaintenanceWorkOrder.id=? and invd.company.companyID=invd.inventory.company.companyID";
        list = executeQuery( query, new Object[]{doid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getDeliveryOrderBatches(String doid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "select invd.batch.id from DeliveryOrderDetail invd where invd.deliveryOrder.ID=? and invd.company.companyID=? ";
        list = executeQuery( query, new Object[]{doid, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject getWorkOrderBatches(String doid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "select invd.batch.id from AssetMaintenanceWorkOrderDetail invd where invd.assetMaintenanceWorkOrder.id=? and invd.company.companyID=? ";
        list = executeQuery( query, new Object[]{doid, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getSalesReturnInventory(String doid) throws ServiceException {
        List list = new ArrayList();
        String query = "select invd.inventory.ID from SalesReturnDetail invd where invd.salesReturn.ID=? and invd.company.companyID=invd.inventory.company.companyID";
        list = executeQuery( query, new Object[]{doid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getSalesReturnBatches(String doid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "select invd.batch.id from SalesReturnDetail invd where invd.salesReturn.ID=? and invd.company.companyID=? ";
        list = executeQuery( query, new Object[]{doid, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject deleteInvoiceDtails(String invoiceid, String companyid) throws ServiceException,AccountingException {
        int numRows = 0;
        try {
            ArrayList params1 = new ArrayList();
            params1.add(companyid);
            params1.add(companyid);
            params1.add(invoiceid);
            String delQuery1 = "delete  from accjedetailcustomdata where jedetailId in (select id from jedetail where company = ? and journalEntry in (select journalentry from invoice where company =? and id = ?))";
            int numRows1 = executeSQLUpdate( delQuery1, params1.toArray());
            Invoice invoice = (Invoice) get(Invoice.class, invoiceid);
            Iterator itr = invoice.getRows().iterator();
            while (itr.hasNext()) {
                InvoiceDetail row = (InvoiceDetail) itr.next();
                String delQuery = "delete from InvoiceDetail where ID=? and company.companyID=?";
                numRows += executeUpdate( delQuery, new Object[]{row.getID(), companyid});
               /**
                * Delete GST Fields for India.
                */
                deleteGstTaxClassDetails("'" + row.getID() + "'");
            }
            return new KwlReturnObject(true, "Invoice details has been deleted successfully.", null, null, numRows);

        } catch (Exception ex) {
            throw new AccountingException("Cannot Edit Invoice as it is or was already used in Other Transactions.", ex);//+ex.getMessage(), ex);
        }

    }
    /**
     * Function to delete GST tax class history for document.
     * @param docrefid
     * @throws ServiceException
     */
    public void deleteGstTaxClassDetails(String docrefid) throws ServiceException {
        if (!StringUtil.isNullOrEmpty(docrefid)) {
            String delQuery = " delete from gsttaxclasshistory where refdocid IN (" + docrefid + ")";
            executeSQLUpdate(delQuery);
        }
    }

    /**
     * Function to delete GST Fields data document
     * @param docrefid
     * @throws ServiceException
     */
    public void deleteGstDocHistoryDetails(String docrefid) throws ServiceException {
        if (!StringUtil.isNullOrEmpty(docrefid)) {
            String delQuery = " delete from gstdocumenthistory where refdocid=?";
            executeSQLUpdate(delQuery, new Object[]{docrefid});
        }
    }
    @Override
    public KwlReturnObject getCompanyInvoices(String companyid) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String query = "from Invoice inv where inv.deleted=false and inv.company.companyID=? "; //" order by inv.customerEntry.account.id, inv.invoiceNumber";            
            list = executeQuery( query, companyid);
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getCompanyInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }
    
    @Override
    public KwlReturnObject getDeliverOrderDetails(String doId, String companyId) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String query = "from DeliveryOrderDetail where deliveryOrder.ID =? and company.companyID=? "; //" order by inv.customerEntry.account.id, inv.invoiceNumber";            
              list = executeQuery( query, new Object[]{doId,companyId});
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getDeliverOrderDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }
    @Override
    public KwlReturnObject getDeliverOrderDetailsForBulkInvoices(List doId, String companyId) throws ServiceException {
        List list = null;
        List newList=new ArrayList();
        int count = 0;
        try {
            
            String query = "from DeliveryOrderDetail where deliveryOrder.ID =? and company.companyID=? "; //" order by inv.customerEntry.account.id, inv.invoiceNumber";            
            for(int i= 0; i < doId.size(); i++) {
                String doIdstr = (String) doId.get(i);
                list = executeQuery( query, new Object[]{doIdstr, companyId});
                for (int j = 0; j < list.size(); j++) {
                    newList.add(list.get(j));

                }
            }
          //  list = executeQuery( query, new Object[]{companyId});
            count = newList.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getDeliverOrderDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, newList, count);
    }
    

    @Override
    public KwlReturnObject getInvoices(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            boolean calendar=false;
            if(request.get("calendar")!=null){
                calendar=(Boolean)request.get("calendar");
            }          
            boolean getRecordBasedOnJEDate = (request.containsKey("getRecordBasedOnJEDate") && request.get("getRecordBasedOnJEDate") != null) ? Boolean.parseBoolean(request.get("getRecordBasedOnJEDate").toString()) : false;
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.add(Calendar.YEAR, 1);
            
            Date startFinYearCalDate = null;
            Date endFinYearCalDate = null;

            try {
                String startFinYearCalString = authHandler.getDateOnlyFormat().format(startFinYearCal.getTime());
                startFinYearCalDate = authHandler.getDateOnlyFormat().parse(startFinYearCalString);

                String endFinYearCalString = authHandler.getDateOnlyFormat().format(endFinYearCal.getTime());
                endFinYearCalDate = authHandler.getDateOnlyFormat().parse(endFinYearCalString);

            } catch (ParseException ex) {
                startFinYearCalDate = startFinYearCal.getTime();
                endFinYearCalDate = endFinYearCal.getTime();

                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }

            String customerid = (String) request.get(InvoiceConstants.customerid);
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (customerid == null) {
                customerid = (String) request.get(InvoiceConstants.accid);
            }
            String ss = (String) request.get(Constants.ss);
//            String cashAccount=((CompanyAccountPreferences) session.get(CompanyAccountPreferences.class, AuthHandler.getCompanyid(request))).getCashAccount().getID();
//            String cashAccount = pref.getCashAccount().getID();
            
            //report id flag
            boolean isAged = (request.get("isAged") != null || request.get("isAged") != "") ? Boolean.parseBoolean((String)request.get("isAged")) : false;
            //chart type flag
            String chartType = "";
            if(request.get(Constants.CHART_TYPE) != null) {
                chartType = (String) request.get(Constants.CHART_TYPE);
            }
            boolean cashonly = false;
            boolean creditonly = false;
            boolean personGroup = false;
            boolean isagedgraph = false;
            boolean isFixedAsset = false;
            boolean isLeaseFixedAsset = false;
            boolean isConsignment=false;
            boolean includeFixedAssetInvoicesFlag = false;
            String upperLimitDate=(String) request.get("upperLimitDate");
            boolean filterForClaimedDateForPayment =false;
            boolean doflag =false;
            boolean salesPurchaseReturnflag =false;
            String invoiceIdToSkip = "";
            boolean isForm402 =false;
            if(request.containsKey("isForm402") && request.get("isForm402")!=null){//To avoide supplementary invoice for Form402(Indian Company) 
                isForm402 = (Boolean) request.get("isForm402");
            }
            if(request.containsKey("invoiceIdToSkip") && request.get("invoiceIdToSkip")!=null){
                invoiceIdToSkip=(String)request.get("invoiceIdToSkip");
            } 
            if(request.containsKey("doflag") && request.get("doflag")!=null){
                doflag = (Boolean) request.get("doflag");
            } 
            if(request.containsKey("salesPurchaseReturnflag") && request.get("salesPurchaseReturnflag")!=null){
                salesPurchaseReturnflag = (Boolean) request.get("salesPurchaseReturnflag");
            } 
            if (request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }

            if (request.get("isLeaseFixedAsset") != null) {
                isLeaseFixedAsset = (Boolean) request.get("isLeaseFixedAsset");
            }
            if (request.containsKey("isConsignment") && request.get("isConsignment") != null) {
                isConsignment = (Boolean) request.get("isConsignment");
            }

            if (request.get("includeFixedAssetInvoicesFlag") != null) {
                includeFixedAssetInvoicesFlag = (Boolean) request.get("includeFixedAssetInvoicesFlag");
            }
            if(request.get("filterForClaimedDateForPayment")!=null){
                filterForClaimedDateForPayment = Boolean.parseBoolean(request.get("filterForClaimedDateForPayment").toString());
            }
            String group = "";
            boolean isLifoFifo = false;
            if (request.containsKey("isLifoFifo") && request.get("isLifoFifo") != null && request.get("isLifoFifo") != "") {
                isLifoFifo = Boolean.parseBoolean((String) request.get("isLifoFifo"));
            }
            cashonly = Boolean.parseBoolean((String) request.get(Constants.cashonly));
            creditonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.creditonly));
            String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
            boolean deleted = Boolean.parseBoolean((String) request.get(InvoiceConstants.deleted));
            boolean nondeleted = Boolean.parseBoolean((String) request.get(InvoiceConstants.nondeleted));
            boolean CashAndInvoice = Boolean.FALSE.parseBoolean(String.valueOf(request.get("CashAndInvoice")));

            String start = "";
            if (request.containsKey(Constants.start) && request.get(Constants.start) != null) {
                start = (String) request.get(Constants.start);
            }
            String limit = "";
            if (request.containsKey(Constants.limit) && request.get(Constants.limit) != null) {
                limit = (String) request.get(Constants.limit);
            }
//            if (cashonly) {
//                customerid = cashAccount;
//            }
//            boolean ignoreZero = (String) request.get("ignorezero") != null;
            personGroup = Boolean.parseBoolean((String) request.get(InvoiceConstants.persongroup));
            isagedgraph = Boolean.parseBoolean((String) request.get(InvoiceConstants.isagedgraph));
            String dueDate = (String) request.get(InvoiceConstants.curdate);
            
            boolean isDraft = false;
            if (request.containsKey("isDraft") && request.get("isDraft") != null) {
                isDraft = (Boolean) request.get("isDraft");
            }
            
            ArrayList params = new ArrayList();
            String condition = "";
            params.add(companyid);

            if (request.containsKey(InvoiceConstants.getRepeateInvoice)) {
                if (Boolean.parseBoolean((String) request.get(InvoiceConstants.getRepeateInvoice))) {
                    condition += " and repeateInvoice is not null";
                }
            }
            String billID = (String) request.get(InvoiceConstants.billid);
            if (!StringUtil.isNullOrEmpty(billID)) {
                params.add(billID);
                condition += " and inv.ID=?";
            } else {
                if (!StringUtil.isNullOrEmpty(customerid)) {
                    params.add(customerid);
                    condition += " and inv.customer.ID=?";
                }
            }
            
            if(isForm402){//To avoide supplementary invoice for Form402(Indian Company) 
                params.add(0);
                condition += " and inv.isSupplementary=?";
            }
            
            if (!CashAndInvoice) {
                if (cashonly) {
                    params.add(true);
                    condition += " and inv.cashtransaction=?";
                } else {
                    params.add(false);
                    condition += " and inv.cashtransaction=?";
                }
            }
            if (!includeFixedAssetInvoicesFlag) {
                if (isFixedAsset) {
                    condition += " and inv.fixedAssetInvoice=true ";
                } else {
                    condition += " and inv.fixedAssetInvoice=false ";
                }

                if (isLeaseFixedAsset) {
                    condition += " and inv.fixedAssetLeaseInvoice=true ";
                } else {
                    condition += " and inv.fixedAssetLeaseInvoice=false ";
                }
                
                if (isConsignment) {
                    condition += " and inv.isconsignment=true ";
                } else {
                    condition += " and inv.isconsignment=false ";
                }
            }
            if(Constants.InvoiceAmountDueFlag && request.containsKey("ignorezero") && request.get("ignorezero")!=null && request.get("ignorezero").toString().equals("false")) {
                condition += " and inv.invoiceamountdue == 0 ";
            }
            if(Constants.InvoiceAmountDueFlag && request.containsKey("minimumAmountDue") && request.get("minimumAmountDue")!=null ) {
                double minimummountDue = Double.parseDouble(request.get("minimumAmountDue").toString());
                condition += " and inv.invoiceamountdue >= "+minimummountDue+" ";
            }
            if (!StringUtil.isNullOrEmpty(currencyfilterfortrans) && !request.containsKey("isReceipt")) {
                condition += " and inv.currency.currencyID = ?";
                params.add(currencyfilterfortrans);
            }
            String jeIds = (String) request.get("jeIds");
            if (!StringUtil.isNullOrEmpty(jeIds)) {
                condition += " and inv.journalEntry.ID IN(" + jeIds + ")";
            }
            
            if (!StringUtil.isNullOrEmpty(dueDate)) {
                params.add(df.parse(dueDate));
                condition += " and inv.dueDate<=?";
            }
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                condition += " and inv.journalEntry.costcenter.ID=?";
            }
            if(Constants.InvoiceAmountDueFlag && request.containsKey(InvoiceConstants.onlyamountdue) && request.get(InvoiceConstants.onlyamountdue)!=null && Boolean.parseBoolean(request.get(InvoiceConstants.onlyamountdue).toString())) {
                /*
                 * onlyclaimedamountdue will be true for fetching the invoices for payment.
                 * It will return those invoices which are claimed but not recovered completely.
                 */ 
                if(request.containsKey("onlyclaimedamountdue") && request.get("onlyclaimedamountdue")!=null && Boolean.parseBoolean(request.get("onlyclaimedamountdue").toString())){
                    condition += " and ( inv.invoiceamountdue != 0 or (inv.claimAmountDue != 0 and (inv.badDebtType = 1 or inv.badDebtType = 2))) ";
                } else {
                condition += " and inv.invoiceamountdue != 0  ";
            }
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
//                condition += " and (inv.journalEntry.entryDate >=? and inv.journalEntry.entryDate <=?)";
                if (getRecordBasedOnJEDate) {
                    condition += " and (inv.journalEntry.entryDate >=? and inv.journalEntry.entryDate <=?)";
                } else {
                    condition += " and (inv.creationDate >=? and inv.creationDate <=?)";
                }
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            } else if (!StringUtil.isNullOrEmpty(endDate)) {   //condition for account reevaluation up to selected date
//                condition += " and  inv.journalEntry.entryDate <=? ";
                if (getRecordBasedOnJEDate) {
                    condition += " and  inv.journalEntry.entryDate <=? ";
                } else {
                    condition += " and  inv.creationDate <=? ";
                }
                params.add(df.parse(endDate));
            }

            if (StringUtil.isNullOrEmpty(ss) == false) {
                for (int i = 0; i <= 5; i++) {
                    params.add(ss + "%");
                }
                condition += " and (inv.invoiceNumber like ? or inv.billTo like ?  or inv.journalEntry.entryNumber like ? or inv.memo like ? or inv.customerEntry.account.name like ? or inv.customer.name like ?) ";
            }

            if (personGroup) {
                params.add(startFinYearCalDate);
                params.add(endFinYearCalDate);
                condition += " and inv.dueDate>=? and inv.dueDate<=?";
            }
            if (calendar) {
                String calstartdt = "", calenddt = "";
                if (request.get("calstartdt") != null) {
                    calstartdt = (String) request.get("calstartdt");
                }
                if (request.get("calenddt") != null) {
                    calenddt = (String) request.get("calenddt");
                }
                SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd", Locale.ENGLISH);
                Date dt11 = (Date) df1.parse(calstartdt);
                Date dt12 = (Date) df1.parse(calenddt);
                params.add(df.parse(df.format(dt11)));
                params.add(df.parse(df.format(dt12)));
                condition += " and inv.dueDate>=? and inv.dueDate<=?";
            }
//             adding (dueDate) condition in query for charts
            if (isagedgraph || StringUtil.equalIgnoreCase(chartType, Constants.BAR_CHART) && isAged) {
                params.add(startFinYearCalDate);
                params.add(endFinYearCalDate);
                condition += " and inv.dueDate>=? and inv.dueDate<=?";
            }
            if (nondeleted) {
                condition += " and inv.deleted=false ";
            } else if (deleted) {
                condition += " and inv.deleted=true ";
            }
            if (doflag) {
                condition += " and inv.isOpenDO='T' ";
            } else if (salesPurchaseReturnflag) {
                condition += " and inv.isOpenSR='T' ";
            }
            if (request.containsKey("upperLimitDate") && request.get("upperLimitDate") != null && request.get("upperLimitDate") != "") {
//                condition += " and inv.journalEntry.entryDate <= ?";
                if (getRecordBasedOnJEDate) {
                    condition += " and inv.journalEntry.entryDate <= ?";
                } else {
                    condition += " and inv.creationDate <= ?";
                }
                params.add(df.parse(upperLimitDate));
            }
            
            if (isDraft) {
                condition += " and inv.draft = true ";
            } else {
                condition += " and inv.draft = false ";
            }
            if(!StringUtil.isNullOrEmpty(invoiceIdToSkip)){
                condition+= " and inv.ID not in ( "+invoiceIdToSkip+" ) ";
            }
            if(filterForClaimedDateForPayment && request.containsKey("upperLimitDate") && request.get("upperLimitDate") != null && request.get("upperLimitDate") != ""){
                condition += " and (inv.debtClaimedDate is NULL or inv.debtClaimedDate <= ?) ";
                params.add(df.parse(upperLimitDate));
            }
            String appendCase = "and";
            String mySearchFilterString = "";
            String joinString = "";
            HashMap<String, Object> reqParams1 = new HashMap<String, Object>();
            reqParams1.putAll(request);
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            String joinquery="from Invoice inv";
                if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    reqParams1.put(Constants.Searchjson, Searchjson);
                    reqParams1.put(Constants.appendCase, appendCase);
                    reqParams1.put("filterConjuctionCriteria", filterConjuctionCriteria);
                    mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(reqParams1, true).get(Constants.myResult));
                    mySearchFilterString = mySearchFilterString.replaceAll("accjecustomdata", "inv.journalEntry.accBillInvCustomData");
                    mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "jedc");//   
                    mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "jedprdc");
                    StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    if (mySearchFilterString.contains("jedc") || mySearchFilterString.contains("jedprdc")) {
                        joinString = " inner join inv.journalEntry je inner join je.details jed ";
                        if (mySearchFilterString.contains("jedc")) {
                            joinString += " inner join jed.accJEDetailCustomData jedc ";
                        }
                        if (mySearchFilterString.contains("jedprdc")) {
                            joinString += " inner join jed.accJEDetailsProductCustomData jedprdc ";
                        }
                    }
                }
            }
                
            condition += " and inv.pendingapproval = 0 and inv.istemplate != 2 ";
            String orderSubQuery = " order by inv.customerEntry.account.id, inv.invoiceNumber asc";
            if (request.containsKey("direction") && request.get("direction") != null && isLifoFifo) {
//                orderSubQuery = " order by inv.journalEntry.entryDate " + request.get("direction").toString() + ", inv.invoiceNumber " + request.get("direction").toString();
                if (getRecordBasedOnJEDate) {
                    orderSubQuery = " order by inv.journalEntry.entryDate " + request.get("direction").toString() + ", inv.invoiceNumber " + request.get("direction").toString();
                } else {
                    orderSubQuery = " order by inv.creationDate " + request.get("direction").toString() + ", inv.invoiceNumber " + request.get("direction").toString();
                }
            }
            String query = joinquery+joinString+" where inv.isOpeningBalenceInvoice=false AND inv.company.companyID=? " + condition + mySearchFilterString + group + orderSubQuery; //" order by inv.customerEntry.account.id, inv.invoiceNumber";            
            if(request.containsKey("getJEIDAndInvoice") && request.get("getJEIDAndInvoice")!=null){
                String executeQuery = "select inv.journalEntry.ID , inv " + query;
                list = executeQuery( executeQuery, params.toArray());
                request.remove("getJEIDAndInvoice");
            }else{
                list = executeQuery( query, params.toArray());
            }
            count = list.size();
             if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getInvoicesForSalesCommission(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.add(Calendar.YEAR, 1);

            String ss = (String) request.get(Constants.ss);
            String salesPerson = (String) request.get("itemid");
            String salesPersonIds = "";
            String customerID="";
            if (request.containsKey("salesPersonIds") && request.get("salesPersonIds") != null) {
                salesPersonIds = (String) request.get("salesPersonIds");
            }
            if (request.containsKey("customerID") && request.get("customerID") != null) {
                customerID = (String) request.get("customerID");
            }
            String start = "";
            if (request.containsKey(Constants.start) && request.get(Constants.start) != null) {
                start = (String) request.get(Constants.start);
            }
            String limit = "";
            if (request.containsKey(Constants.limit) && request.get(Constants.limit) != null) {
                limit = (String) request.get(Constants.limit);
            }

            String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
            boolean deleted = Boolean.parseBoolean((String) request.get(InvoiceConstants.deleted));
            boolean nondeleted = Boolean.parseBoolean((String) request.get(InvoiceConstants.nondeleted));

            ArrayList params = new ArrayList();
            String condition = "";
            params.add(companyid);

            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
//                condition += " and (inv.journalEntry.entryDate >=? and inv.journalEntry.entryDate <=?)";
                condition += " and (inv.creationDate >=? and inv.creationDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            } else if (!StringUtil.isNullOrEmpty(endDate)) {   //condition for account reevaluation up to selected date
//                condition += " and  inv.journalEntry.entryDate <=? ";
                condition += " and  inv.creationDate <=? ";
                params.add(df.parse(endDate));
            }

            if (StringUtil.isNullOrEmpty(ss) == false) {
//                 params.add(ss + "%");
                String[] searchcol = new String[]{"inv.masterSalesPerson.value", "inv.masterSalesPerson.code", "inv.invoiceNumber", "inv.journalEntry.entryNumber"};
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 4);
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery;
//                 condition += " and inv.masterSalesPerson.name like ? ";
            }
            if (StringUtil.isNullOrEmpty(salesPerson) == false) {
                params.add(salesPerson);
                condition += " and inv.masterSalesPerson.ID =?  ";
            } else if (StringUtil.isNullOrEmpty(salesPersonIds) == false) {
                condition += " and inv.masterSalesPerson.ID IN (" + salesPersonIds + "))";
            }
            if(!StringUtil.isNullOrEmpty(customerID)){
                condition +=" and inv.customer.ID IN ("+customerID+")";
            }
            if (nondeleted) {
                condition += " and inv.deleted=false ";
            } else if (deleted) {
                condition += " and inv.deleted=true ";
            }

            condition += " and inv.pendingapproval = 0 and inv.istemplate != 2 and inv.draft = false ";
            String orderSubQuery = " order by inv.customerEntry.account.id, inv.invoiceNumber asc";
            if (request.containsKey("direction") && request.get("direction") != null) {
//                orderSubQuery = " order by inv.journalEntry.entryDate " + request.get("direction").toString() + ", inv.invoiceNumber " + request.get("direction").toString();
                orderSubQuery = " order by inv.creationDate " + request.get("direction").toString() + ", inv.invoiceNumber " + request.get("direction").toString();
            }
            
            String appendCase = "and";
            String mySearchFilterString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().trim().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            String joinString = "";
            String joinString1 = "";
            String searchDefaultFieldSQL="";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (customSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Custom fields
                         */
                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, false).get(Constants.myResult));
                        joinString = " inner join inv.journalEntry je inner join je.details jed ";
                        joinString+=" inner join inv.customer cust ";
//                        
                        if (mySearchFilterString.contains("c.accjecustomdata") || mySearchFilterString.contains("c.AccJECustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("c.accjecustomdata", "jeCustomData");
                            joinString1+=" inner join je.accBillInvCustomData jeCustomData ";
                        }
                        if (mySearchFilterString.contains("c.AccJEDetailCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("c.AccJEDetailCustomData", "jedCustomData");
                            joinString1 += " left join jed.accJEDetailCustomData jedCustomData ";
                        }
                        if (mySearchFilterString.contains("c.AccJEDetailsProductCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("c.AccJEDetailsProductCustomData", "jedProductCustomData");    
                            joinString1 += " left join jed.accJEDetailsProductCustomData jedProductCustomData ";
                        }
                        if (mySearchFilterString.contains("CustomerCustomData")) {
                            joinString1 += " left join cust.accCustomerCustomData  custCustomData ";
                            mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "custCustomData");
                        }
                        //product custom data
                        if (mySearchFilterString.contains("accproductcustomdata")) {
                            joinString1 += " inner join inv.rows invDetails left join invDetails.inventory inventory "
                                    + "left join inventory.product prod left join prod.productCustomData prodCustomData ";
                            mySearchFilterString = mySearchFilterString.replaceAll("c.accproductcustomdata", "prodCustomData");
                        }
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            
            String query = "select distinct(inv) from Invoice inv "+joinString+joinString1+" where inv.masterSalesPerson is not null and inv.isOpeningBalenceInvoice=false AND inv.company.companyID=? " + condition + mySearchFilterString + orderSubQuery; //" order by inv.customerEntry.account.id, inv.invoiceNumber";            
            list = executeQuery( query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging(query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getInvoicesForBrandCommission(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.add(Calendar.YEAR, 1);

            String ss = (String) request.get(Constants.ss);
            String salesPerson = (String) request.get("itemid");
            String categoryid = (String) request.get("categoryid");

            String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
            boolean deleted = Boolean.parseBoolean((String) request.get(InvoiceConstants.deleted));
            boolean nondeleted = Boolean.parseBoolean((String) request.get(InvoiceConstants.nondeleted));

            ArrayList params = new ArrayList();
            String condition = "";
            params.add(companyid);


            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
//                condition += " and (invdDetail.invoice.journalEntry.entryDate >=? and invdDetail.invoice.journalEntry.entryDate <=?)";
                condition += " and (invdDetail.invoice.creationDate >=? and invdDetail.invoice.creationDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            } else if (!StringUtil.isNullOrEmpty(endDate)) {   //condition for account reevaluation up to selected date
//                condition += " and  invdDetail.invoice.journalEntry.entryDate <=? ";
                condition += " and  invdDetail.invoice.creationDate <=? ";
                params.add(df.parse(endDate));
            }

            if (StringUtil.isNullOrEmpty(salesPerson) == false) {
                params.add(salesPerson);
                condition += " and invdDetail.invoice.masterSalesPerson.ID =?  ";
            }
            if (StringUtil.isNullOrEmpty(categoryid) == false && !categoryid.contains("All")) {
//                params.add(categoryid);
                condition += " and invdDetail.inventory.product.ID IN(Select pcm.productID.ID from ProductCategoryMapping pcm where pcm.productCategory.ID IN ('" + categoryid + "'))";
            }
            if (nondeleted) {
                condition += " and invdDetail.invoice.deleted=false ";
            } else if (deleted) {
                condition += " and invdDetail.invoice.deleted=true ";
            }

            String query = "from InvoiceDetail invdDetail where invdDetail.invoice.masterSalesPerson is not null and invdDetail.invoice.isOpeningBalenceInvoice=false AND invdDetail.company.companyID=? " + condition;    // + orderSubQuery; //" order by inv.customerEntry.account.id, inv.invoiceNumber";            
            list = executeQuery( query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getDeliveryOrderForMap(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            String jeIds = (String) request.get("jeIds");
            if (!StringUtil.isNullOrEmpty(jeIds)) {
                ArrayList params = new ArrayList();
                params.add(companyid);
                            String query = "from DeliveryOrder do where do.company.companyID=?  and do.journalEntry.ID IS NOT NULL and do.journalEntry.ID IN (" + jeIds + ") order by  do.deliveryOrderNumber asc";
                list = executeQuery( query, params.toArray());
                    count = list.size();
                }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getDeliveryOrderForMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getRevalFlag(String receiptId) throws ServiceException { //checked wherther invoice is present or not
        String selQuery = "select count(rh.invoiceid) from RevaluationHistory rh where rh.invoiceid= ? and rh.deleted=false";
        List list = executeQuery( selQuery, new Object[]{receiptId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getDOFromInvoices(String invoiceId, String CompanyId, boolean CallFromCI) throws ServiceException {
        String selQuery = "";
        if (CallFromCI) {
            selQuery = "select distinct DD.deliveryOrder.deliveryOrderNumber,DD.deliveryOrder.ID,DD.deliveryOrder.seqformat.ID ,DD.deliveryOrder.autoGenerated from DeliveryOrderDetail DD where DD.cidetails.invoice.ID=? and DD.deliveryOrder.deleted=false and DD.company.companyID = ?";
        } else {
            selQuery = "select distinct GR.grOrder.goodsReceiptOrderNumber,GR.grOrder.ID,GR.grOrder.seqformat.ID , GR.grOrder.autoGenerated from GoodsReceiptOrderDetails GR where GR.videtails.goodsReceipt.ID=? and GR.grOrder.deleted=false and GR.company.companyID = ?";
        }
        List list = executeQuery( selQuery, new Object[]{invoiceId, CompanyId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getAutogeneratedDOFromInvoices(String invoiceId, String CompanyId) throws ServiceException {
        String selQuery = "";
        selQuery = "select DD.deliveryOrder.deliveryOrderNumber,DD.deliveryOrder.ID,DD.deliveryOrder.seqformat.ID,DD.deliveryOrder.autoGenerated from DeliveryOrderDetail DD where DD.cidetails.invoice.ID=? and DD.deliveryOrder.deleted=false and DD.deliveryOrder.isAutoGeneratedDO=true and DD.deliveryOrder.approvestatuslevel !=11 and DD.company.companyID = ?";
        List list = executeQuery( selQuery, new Object[]{invoiceId, CompanyId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getRecurringInvoices(HashMap<String, Object> dataMap) throws ServiceException {
        String selQuery = "";
        try {
            String companyid = (String) dataMap.get("companyid");
            DateFormat df = (DateFormat) (dataMap.get("df"));
            Date startDate = (Date) df.parse((String) dataMap.get("startdate"));
            ArrayList params = new ArrayList();
            params.add(startDate);
            params.add(startDate);
            params.add(companyid);
            selQuery = "from Invoice Inv where Inv.repeateInvoice is not null and ( Inv.repeateInvoice.expireDate is null or  Inv.repeateInvoice.expireDate >= ?) and  Inv.repeateInvoice.startDate <= ? and Inv.company.companyID = ?";
            List list = executeQuery( selQuery, params.toArray());
            return new KwlReturnObject(true, "", null, list, list.size());
        } catch (Exception ex) {
            return new KwlReturnObject(false, "accInvoiceImpl.getRecurringInvoices:" + ex.getMessage(), null, null, 0);
        }
    }

    public KwlReturnObject saveExcludedRecords(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            ExcludedOutstandingOrders ExcObj = null;
            if (dataMap.containsKey("id")) {
                ExcObj = (ExcludedOutstandingOrders) get(ExcludedOutstandingOrders.class, (String) dataMap.get("id"));
            } else {
                ExcObj = new ExcludedOutstandingOrders();
            }
            if (dataMap.containsKey("invoice")) {
                Invoice inv = dataMap.get("invoice") == null ? null : (Invoice) get(Invoice.class, (String) dataMap.get("invoice"));
                ExcObj.setInvoice(inv);
            }
            if (dataMap.containsKey("companyid")) {
                Company cmp = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                ExcObj.setCompany(cmp);
            }
            if (dataMap.containsKey("generatedDate")) {
                ExcObj.setGeneratedDate((Date) dataMap.get("generatedDate"));
            }
            if (dataMap.containsKey("excludeOrGenerate")) {
                ExcObj.setExcludeOrGenerate((Integer) dataMap.get("excludeOrGenerate"));
            }
            saveOrUpdate(ExcObj);
            list.add(ExcObj);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveExcludedRecords : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public String[] columSort(String Col_Name, String Col_Dir) throws ServiceException {
        String[] String_Sort = new String[5];
        if (Col_Name.equals("personname")) {
            String_Sort[0] = " order by name " + Col_Dir;
            String_Sort[1] = ", customer.name ";
            String_Sort[2] = ", customer.name ";
            String_Sort[3] = "";
            String_Sort[4] = "";
        } else if (Col_Name.equals("billno")) {
            String_Sort[0] = " order by invoicenumber " + Col_Dir;
            String_Sort[1] = ",invoice.invoicenumber ";
            String_Sort[2] = ", billinginvoice.billinginvoicenumber ";
            String_Sort[3] = "";
            String_Sort[4] = "";
        } else if (Col_Name.equals("entryno")) {
            String_Sort[0] = " order by entryno " + Col_Dir;
            String_Sort[1] = ", journalentry.entryno ";
            String_Sort[2] = ", journalentry.entryno ";
            String_Sort[3] = "";
            String_Sort[4] = "";
        } else if (Col_Name.equals("date")) {
            String_Sort[0] = " order by entrydate " + Col_Dir;
            String_Sort[1] = ", journalentry.entrydate ";
            String_Sort[2] = ", journalentry.entrydate ";
            String_Sort[3] = "";
            String_Sort[4] = "";
        } else if (Col_Name.equals("duedate")) {
            String_Sort[0] = " order by duedate " + Col_Dir;
            String_Sort[1] = ", invoice.duedate ";
            String_Sort[2] = ", billinginvoice.duedate ";
            String_Sort[3] = "";
            String_Sort[4] = "";
        }  else if (Col_Name.equals("shipdate")) {
            String_Sort[0] = " order by shipdate " + Col_Dir;
            String_Sort[1] = ", invoice.shipdate ";
            String_Sort[2] = ", billinginvoice.shipdate ";
            String_Sort[3] = "";
            String_Sort[4] = "";
        } else if (Col_Name.equals("salespersonname")) {
            String_Sort[0] = " order by value " + Col_Dir;
            String_Sort[1] = ",masteritem.value ";
            String_Sort[2] = ", masteritem.value ";
            String_Sort[3] = "";
            String_Sort[4] = "";
        } else if (Col_Name.equals("aliasname")){
            String_Sort[0] = " order by customer.aliasname " + Col_Dir;
            String_Sort[3] = "";
            String_Sort[4] = "";
            String_Sort[1] = ", customer.aliasname ";
            String_Sort[2] = ", customer.aliasname ";
        } else if (Col_Name.equals("startDate")){
            String_Sort[0] = " order by RI.startdate " + Col_Dir;
            String_Sort[3] = " inner join repeatedinvoices RI on RI.id = invoice.repeateinvoice ";
            String_Sort[4] = "";
            String_Sort[1] = ", RI.startdate ";
            String_Sort[2] = ", RI.startdate ";
        } else if (Col_Name.equals("expireDate")){
            String_Sort[0] = " order by RI.expiredate " + Col_Dir;
            String_Sort[3] = " inner join repeatedinvoices RI on RI.id = invoice.repeateinvoice ";
            String_Sort[4] = "";
            String_Sort[1] = ", RI.expiredate ";
            String_Sort[2] = ", RI.expiredate ";
        } else if (Col_Name.equals("nextDate")){
            String_Sort[0] = " order by RI.nextdate " + Col_Dir;
            String_Sort[3] = " inner join repeatedinvoices RI on RI.id = invoice.repeateinvoice ";
            String_Sort[4] = "";
            String_Sort[1] = ", RI.nextdate ";
            String_Sort[2] = ", RI.nextdate ";
        } else if (Col_Name.equals("NoOfpost")){
            String_Sort[0] = " order by RI.noofinvoicespost " + Col_Dir;
            String_Sort[3] = " inner join repeatedinvoices RI on RI.id = invoice.repeateinvoice ";
            String_Sort[4] = "";
            String_Sort[1] = ", RI.noofinvoicespost ";
            String_Sort[2] = ", RI.noofinvoicespost ";
        }else if (Col_Name.equals("paymentMethodUsedForUOB")) {
            String_Sort[0] = " order by methodname " + Col_Dir;
            String_Sort[1] = ", p.methodname ";
            String_Sort[2] = ", p.methodname ";
            String_Sort[3] = "";
            String_Sort[4] = "";
        }else if (Col_Name.equals("customerbankaccounttypevalue")) {
            String_Sort[0] = " order by value " + Col_Dir;
            String_Sort[1] = ", m.value ";
            String_Sort[2] = ", m.value ";
            String_Sort[3] = "";
            String_Sort[4] = "";
        }else if (Col_Name.equals("isGIROFileGeneratedForUOBBank")) {
            String_Sort[0] = " order by isgirofilegeneratedforuobbank " + Col_Dir;
            String_Sort[1] = ", isgirofilegeneratedforuobbank ";
            String_Sort[2] = ", isgirofilegeneratedforuobbank ";
            String_Sort[3] = "";
            String_Sort[4] = "";
        } else {
            String_Sort[0] = " order by entrydate " + Col_Dir;
            String_Sort[1] = ", journalentry.entrydate ";
            String_Sort[2] = ", journalentry.entrydate ";
            String_Sort[3] = "";
            String_Sort[4] = "";
        }

        return String_Sort;
    }

    public KwlReturnObject getInvoicesMerged(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        int totalCount=0;
        String joinTables = "";
        String moduleid = "";
        if (request.containsKey(Constants.moduleid) && request.get(Constants.moduleid) != null) {
            moduleid = request.get(Constants.moduleid).toString();
        }
        try {
            String userID = "";
            boolean isenableSalesPersonAgentFlow = false;
            if (request.containsKey("enablesalespersonagentflow") && request.get("enablesalespersonagentflow") != null && !StringUtil.isNullOrEmpty(request.get("enablesalespersonagentflow").toString())) {
                isenableSalesPersonAgentFlow = Boolean.parseBoolean(request.get("enablesalespersonagentflow").toString());
                if (isenableSalesPersonAgentFlow) {
                    if (request.containsKey("userid") && request.get("userid") != null && !StringUtil.isNullOrEmpty(request.get("userid").toString())) {
                        userID = (String) request.get("userid");
                    }
                }
            }
            boolean ispendingAproval = false;
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.add(Calendar.YEAR, 1);
            
            Date startFinYearCalDate = null;
            Date endFinYearCalDate = null;

            try {
                String startFinYearCalString = authHandler.getDateOnlyFormat().format(startFinYearCal.getTime());
                startFinYearCalDate = authHandler.getDateOnlyFormat().parse(startFinYearCalString);

                String endFinYearCalString = authHandler.getDateOnlyFormat().format(endFinYearCal.getTime());
                endFinYearCalDate = authHandler.getDateOnlyFormat().parse(endFinYearCalString);

            } catch (ParseException ex) {
                startFinYearCalDate = startFinYearCal.getTime();
                endFinYearCalDate = endFinYearCal.getTime();

                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String formtypeid = "0";//By Default, All
            String vatcommodityid = "all";//By Default, All
            String productSearch = "";
            String pmtMethod="";
            String checkformstatus = "0";//By Default, All
            String customerid = (String) request.get(InvoiceConstants.customerid);
            int datefilter = (request.containsKey("datefilter") && request.get("datefilter") != null) ? Integer.parseInt(request.get("datefilter").toString()) : 0;// 0 = Invoice Due date OR 1 = Invoice date
            boolean isAged = (request.containsKey("isAged") && request.get("isAged") != null) ? Boolean.parseBoolean(request.get("isAged").toString()) : false;
            boolean isSalesPersonAged = (request.containsKey("isSalesPersonAgedSummary") && request.get("isSalesPersonAgedSummary") != null) ? Boolean.parseBoolean(request.get("isSalesPersonAgedSummary").toString()) : false;
            boolean includeExcludeChildCmb=false;
            String customerIdGroup = "";
            if (request.containsKey("custVendorID") && request.get("custVendorID") != null) {
                customerIdGroup = (String) request.get("custVendorID");
            }
            String newcustomerid = "";
            if (request.containsKey(InvoiceConstants.newcustomerid) && request.get(InvoiceConstants.newcustomerid) != null) {
                newcustomerid = (String) request.get(InvoiceConstants.newcustomerid);
            }
            if (request.containsKey("includeExcludeChildCmb") && request.get("includeExcludeChildCmb") != null) {
                includeExcludeChildCmb = (Boolean) request.get("includeExcludeChildCmb");
            }
            String productid = (String) request.get(InvoiceConstants.productid);

            String productCategoryid = "";
            if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.get(Constants.productCategoryid);
            }
            if (request.containsKey("ispendingAproval") && request.get("ispendingAproval") != null) {
                ispendingAproval = Boolean.FALSE.parseBoolean(String.valueOf(request.get("ispendingAproval")));
            }
            /*
             * ERP-29076
             */
            String customerBankAccountType = "";
            if (request.containsKey("customerBankAccountType") && request.get("customerBankAccountType") != null) {
                customerBankAccountType = StringUtil.decodeString((String) request.get("customerBankAccountType"));
                String[] bankAccTypeArray = customerBankAccountType.split(",") ;
                customerBankAccountType = "";
                for(int i=0; i<bankAccTypeArray.length;i++){
                    if(!StringUtil.isNullOrEmpty(bankAccTypeArray[i])){
                        customerBankAccountType += "'"+bankAccTypeArray[i]+"'"+",";
                    }    
                }
                if(!StringUtil.isNullOrEmpty(customerBankAccountType)){
                    customerBankAccountType = customerBankAccountType.substring(0,customerBankAccountType.length()-1);
                }
            }
            String prodFilterCustid = (String) request.get(InvoiceConstants.prodfiltercustid);
            String termid = (String) request.get(InvoiceConstants.termid);
            if(request.containsKey(InvoiceConstants.pmtmethod)){
                pmtMethod=(String) request.get(InvoiceConstants.pmtmethod);
            }
            String customercategoryid = (String) request.get(InvoiceConstants.customerCategoryid);
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (customerid == null) {
                customerid = (String) request.get(InvoiceConstants.accid);
            }
            String ss = (String) request.get(Constants.ss);
            boolean isForTemplate = false;
            boolean CashAndInvoice = (request.containsKey("CashAndInvoice") && request.get("CashAndInvoice") != null) ? Boolean.parseBoolean(request.get("CashAndInvoice").toString()) : false;
            boolean cashonly = false;
            boolean personGroup = false;
            boolean isagedgraph = false;
            boolean isfavourite = false;
            boolean isFixedAsset = false;
            boolean isLeaseFixedAsset = false;
            boolean isConsignment = false;
            boolean isprinted = false;
            boolean isOpeningBalanceInvoices = false;
            boolean consolidateFlag = false;
            boolean onlyRecurredInvoices=false;
            boolean onlyNormalPendingInvoices=false;
//            String group = "";
            cashonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.cashonly));
            boolean deleted = false;
            if (request.get(InvoiceConstants.deleted) != null) {
                deleted = Boolean.parseBoolean(request.get(InvoiceConstants.deleted).toString());
            }
            boolean nondeleted = false;
            if (request.get(InvoiceConstants.nondeleted) != null) {
                nondeleted = Boolean.parseBoolean(request.get(InvoiceConstants.nondeleted).toString());
            }
            boolean pendingapproval = false;
            if(request.get("pendingapproval")!=null){
                pendingapproval =(Boolean) request.get("pendingapproval");
            }
            consolidateFlag = Boolean.parseBoolean((String) request.get(consolidateFlag));
            boolean isMonthlyAgeingReport=false;
            if(request.get("isMonthlyAgeingReport")!=null){
                isMonthlyAgeingReport=Boolean.parseBoolean(request.get("isMonthlyAgeingReport").toString());
            }
            if (request.get("isfavourite") != null) {
                isfavourite = Boolean.parseBoolean((String) request.get("isfavourite"));
            }
            
            if (request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }

            if (request.get("isLeaseFixedAsset") != null) {
                isLeaseFixedAsset = (Boolean) request.get("isLeaseFixedAsset");
            }
            if (request.containsKey("isConsignment") && request.get("isConsignment") != null) {
                isConsignment = (Boolean) request.get("isConsignment");
            }
            if (request.containsKey("formtypeid") && request.get("formtypeid") != null) {
                formtypeid = (String) request.get("formtypeid");
            }
            if (request.containsKey("vatcommodityid") && request.get("vatcommodityid") != null) {
                vatcommodityid = (String) request.get("vatcommodityid");
            }
            if (request.containsKey("checkformstatus") && request.get("checkformstatus") != null) {
                checkformstatus = (String) request.get("checkformstatus");
            }
            if (request.get(Constants.MARKED_PRINTED) != null) {
                isprinted = Boolean.parseBoolean((String) request.get(Constants.MARKED_PRINTED));
            }
            if (request.get("isOpeningBalanceInvoices") != null) {
                isOpeningBalanceInvoices = Boolean.parseBoolean((String) request.get("isOpeningBalanceInvoices"));
            }
            if (request.containsKey("isForTemplate") && request.get("isForTemplate") != null) {
                isForTemplate = Boolean.parseBoolean(request.get("isForTemplate").toString());
            }
            if (request.containsKey("onlyRecurredInvoices") && request.get("onlyRecurredInvoices") != null) {
                onlyRecurredInvoices = Boolean.parseBoolean(request.get("onlyRecurredInvoices").toString());
            }
            if (request.containsKey("onlyNormalPendingInvoices") && request.get("onlyNormalPendingInvoices") != null) {
                onlyNormalPendingInvoices = Boolean.parseBoolean(request.get("onlyNormalPendingInvoices").toString());
            }
            boolean includeAllRec = false;
            if (request.get("includeAllRec") != null) {
                includeAllRec = Boolean.parseBoolean(request.get("includeAllRec").toString());
            }
            boolean onlyOutstanding =false;
            if(request.containsKey("onlyOutsatnding") && !StringUtil.isNullOrEmpty(request.get("onlyOutsatnding").toString())){
                onlyOutstanding = Boolean.parseBoolean(request.get("onlyOutsatnding").toString());
            }
            boolean ispendingpayment =false;
            if(request.containsKey("ispendingpayment") && !StringUtil.isNullOrEmpty(request.get("ispendingpayment").toString())){
                ispendingpayment = Boolean.parseBoolean(request.get("ispendingpayment").toString());
            }
            boolean isUnpaidInvoiceReport =false;
            if(request.containsKey("isUnpaidInvoiceReport") && !StringUtil.isNullOrEmpty(request.get("isUnpaidInvoiceReport").toString())){
                isUnpaidInvoiceReport = Boolean.parseBoolean(request.get("isUnpaidInvoiceReport").toString());
            }  
            personGroup = Boolean.parseBoolean((String) request.get(InvoiceConstants.persongroup));
            isagedgraph = Boolean.parseBoolean((String) request.get(InvoiceConstants.isagedgraph));
            String dueDate = (String) request.get(InvoiceConstants.curdate);
            
            String userDepartment = "";
            if (request.containsKey("userDepartment") && request.get("userDepartment") != null) {
                userDepartment = (String) request.get("userDepartment");
            }
            
            boolean isDraft = false;
            if (request.containsKey("isDraft") && request.get("isDraft") != null) {
                isDraft = (Boolean) request.get("isDraft");
            }
            
            boolean isExcise = false;
            if (request.containsKey("isExciseInvoice") && request.get("isExciseInvoice") != null) {
                isExcise =  Boolean.parseBoolean(request.get("isExciseInvoice").toString());
            }
            boolean isExport = false;
            if (request.containsKey("isExport") && request.get("isExport") != null) {
                isExport = (Boolean) request.get("isExport");
            }
            boolean isMonthlySalesInvoice = false;         //ERP-20971
            if (request.containsKey("isMonthlySalesInvoice") && request.get("isMonthlySalesInvoice") != null) {
                isMonthlySalesInvoice = (boolean) request.get("isMonthlySalesInvoice");
            }
            ArrayList params = new ArrayList();
            ArrayList paramsSQLWithoutInv = new ArrayList();
            ArrayList paramsSQLOpeningBalanceInv = new ArrayList();
            String conditionSQL = "";
            String conditionSQLForOpeningBalanceInvoice = "";
            params.add(companyid);
            paramsSQLWithoutInv.add(companyid);
            paramsSQLOpeningBalanceInv.add(companyid);
            
            if (request.containsKey(InvoiceConstants.getRepeateInvoice)) {
                if (Boolean.parseBoolean((String) request.get(InvoiceConstants.getRepeateInvoice))) {
                    joinTables = " inner join repeatedinvoices on repeatedinvoices.id = invoice.repeateinvoice  ";
                    if (!ispendingAproval) {
                        if (request.containsKey("activeInactive")) {                //Getting the filter type and generating query according to filter ERM-384
                            if (request.get("activeInactive") != null) {
                                if (Integer.parseInt(request.get("activeInactive").toString()) == Constants.RECURRINGDEACTIVATED) {
                                    conditionSQL += " and (invoice.repeateinvoice is not null and repeatedinvoices.isactivate='F') ";
                                } else if (Integer.parseInt(request.get("activeInactive").toString()) == Constants.RECURRINGACTIVATED) {
                                    conditionSQL += " and (invoice.repeateinvoice is not null and repeatedinvoices.isactivate='T') ";
                                }
                            }
                        }
                    }
                    if (ispendingAproval) {   //Pending Approval Records
                        conditionSQL += " and (invoice.repeateinvoice is not null and repeatedinvoices.ispendingapproval='T') ";
                    } else {
                        conditionSQL += " and (invoice.repeateinvoice is not null and repeatedinvoices.ispendingapproval='F') ";
                    }
                }
            }
            String billID = (String) request.get(InvoiceConstants.billid);
            if (!StringUtil.isNullOrEmpty(billID)) {
                params.add(billID);
                paramsSQLOpeningBalanceInv.add(billID);
                paramsSQLWithoutInv.add(billID);
                conditionSQL += " and invoice.id = ? ";
                conditionSQLForOpeningBalanceInvoice += " and invoice.id = ? ";
            }
            
            if (!StringUtil.isNullOrEmpty(formtypeid) && !formtypeid.equals("0")) {
                params.add(formtypeid);
                paramsSQLWithoutInv.add(formtypeid);
                conditionSQL += " and invoice.formtype=?";
            }
            if (!StringUtil.isNullOrEmpty(checkformstatus) && !checkformstatus.equals("0")) {
                params.add(checkformstatus);
                conditionSQL += " and invoice.formstatus=?";
            }

            if (!StringUtil.isNullOrEmpty(customerid)) {
                params.add(customerid);
                paramsSQLOpeningBalanceInv.add(customerid);
                paramsSQLWithoutInv.add(customerid);
                conditionSQL += " and invoice.customer = ? ";
                conditionSQLForOpeningBalanceInvoice += " and invoice.customer = ? ";
            }

            if (!CashAndInvoice) {
                if (cashonly) {
                    params.add(true);
                    conditionSQL += " and invoice.cashtransaction=? ";
                } else {
                    params.add(false);
                    conditionSQL += " and invoice.cashtransaction=? ";
                }
            }
            if (request.containsKey("groupcombo") && request.get("groupcombo") != null && request.containsKey(Constants.globalCurrencyKey) && request.get(Constants.globalCurrencyKey) != null) {
                int groupcombo = (Integer) request.get("groupcombo");

                if (groupcombo == Constants.AgedPayableBaseCurrency) {
                    conditionSQL += " and invoice.currency=" + Integer.parseInt((String) request.get(Constants.globalCurrencyKey));
                } else if (groupcombo == Constants.AgedPayableOtherthanBaseCurrency) {
                    conditionSQL += " and invoice.currency!=" + Integer.parseInt((String) request.get(Constants.globalCurrencyKey));
                }
            }
            

            String innerQuery3 = "";
            String innerQuery4 = "";
            if (request.containsKey("soid") && request.get("soid") != null) {
                String soid = (String) request.get("soid");
                // if(!StringUtil.isNullOrEmpty(soid)){
                params.add(soid);
                paramsSQLWithoutInv.add(soid);
                innerQuery3 = " inner join invoicedetails on invoicedetails.invoice = invoice.id "
                        + " inner join sodetails on invoicedetails.salesorderdetail = sodetails.id "
                        + " inner join salesorder on sodetails.salesorder = salesorder.id ";
                innerQuery4 = " inner join billinginvoicedetails on billinginvoicedetails.billinginvoice = billinginvoice.id "
                        + " inner join billingsodetails on billinginvoicedetails.salesorderdetail = billingsodetails.id "
                        + " inner join billingsalesorder on billingsodetails.salesorder = billingsalesorder.id ";
                conditionSQL += "and  salesorder.id= ?";
            }
            String jeIds = (String) request.get("jeIds");
            if (!StringUtil.isNullOrEmpty(jeIds)) {
                conditionSQL += " and journalentry.id IN(" + jeIds + ")";
            }
            if (cashonly) {
                conditionSQL += " and invoice.cashtransaction=1 ";
            }
            if (!StringUtil.isNullOrEmpty(customerIdGroup) && !customerIdGroup.contains("All")) {
                customerIdGroup = AccountingManager.getFilterInString(customerIdGroup);
                conditionSQL += " and invoice.customer in " + customerIdGroup;
                conditionSQLForOpeningBalanceInvoice += " and invoice.customer in " + customerIdGroup;
            }
            if (datefilter == 0 && !isAged) {//Get records upto selected end date only.
                if (!StringUtil.isNullOrEmpty(dueDate)) {
                    if (isMonthlyAgeingReport) {
                        params.add(new Date(Long.parseLong(dueDate)));
                        paramsSQLWithoutInv.add(new Date(Long.parseLong(dueDate)));
                    } else {
                        params.add(df.parse(dueDate));
                        paramsSQLWithoutInv.add(df.parse(dueDate));
                    }
                    conditionSQL += " and invoice.duedate<=? ";
                }
            }
            if (request.containsKey("isBadDebtInvoices") && request.get("isBadDebtInvoices") != null && (Boolean) request.get("isBadDebtInvoices")) {
//                if (request.containsKey("badDebtCalculationDate") && request.get("badDebtCalculationDate") != null) {
                    int baddebttype = (Integer) request.get("baddebttype");
                    if (baddebttype == 0) {
                    params.add(df.parse((String) request.get("badDebtCalculationDate")));
                    paramsSQLWithoutInv.add(df.parse((String) request.get("badDebtCalculationDate")));
                    paramsSQLOpeningBalanceInv.add(df.parse((String) request.get("badDebtCalculationDate")));
                    params.add(baddebttype);
                    paramsSQLWithoutInv.add(baddebttype);
                    paramsSQLOpeningBalanceInv.add(baddebttype);
                    if ((Integer) request.get("badDebtCriteria") == 0) {// Filter on behalf of invoice due date
                        if (isOpeningBalanceInvoices) {
                            conditionSQLForOpeningBalanceInvoice += " and invoice.duedate<=? and invoice.openingbalanceamountdue>0 and invoice.baddebttype=? ";
                        } else {
                            conditionSQL += " and invoice.duedate<=? and invoice.invoiceamountdue>0 and invoice.baddebttype=? ";
                        }
                    } else if ((Integer) request.get("badDebtCriteria") == 1) {// Filter on behalf of invoice creation date
                        if (isOpeningBalanceInvoices) {
                            conditionSQLForOpeningBalanceInvoice += " and invoice.creationdate<=? and invoice.openingbalanceamountdue>0 and invoice.baddebttype=? ";
                        } else {
//                            conditionSQL += " and journalentry.entryDate<=? and invoice.invoiceamountdue>0 and invoice.baddebttype=? ";
                            conditionSQL += " and invoice.creationdate<=? and invoice.invoiceamountdue>0 and invoice.baddebttype=? ";
                        }
                    }
                } else if (baddebttype == 1) {// for recover tab
                    params.add(df.parse((String) request.get("badDebtCalculationFromDate")));
                    paramsSQLWithoutInv.add(df.parse((String) request.get("badDebtCalculationFromDate")));
                    params.add(df.parse((String) request.get("badDebtCalculationToDate")));
                    paramsSQLWithoutInv.add(df.parse((String) request.get("badDebtCalculationToDate")));
                    params.add(baddebttype);
                    paramsSQLWithoutInv.add(baddebttype);

                    params.add(2);
                    paramsSQLWithoutInv.add(2);
                    conditionSQL += " and (invoice.debtclaimeddate>=? and invoice.debtclaimeddate<=? ) and (invoice.baddebttype=? or invoice.baddebttype=?) ";
                }
            }
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                paramsSQLWithoutInv.add(costCenterId);
                conditionSQL += " and costcenter.id=? ";
            }
            if (!StringUtil.isNullOrEmpty(customercategoryid) && !customercategoryid.contains("All")) {
                params.add(customercategoryid);
                paramsSQLWithoutInv.add(customercategoryid);
                conditionSQL += " and customercategorymapping.customercategory=? ";
            }
            if(!StringUtil.isNullOrEmpty(pmtMethod)){
                if(!pmtMethod.equalsIgnoreCase("all")){
                    params.add(pmtMethod);
                    conditionSQL += "and invoice.defaultpaymentmethod= ?";
                    paramsSQLOpeningBalanceInv.add(pmtMethod);
                    conditionSQLForOpeningBalanceInvoice += "and invoice.defaultpaymentmethod= ?";
                }
            }
            if (!StringUtil.isNullOrEmpty(termid)) {
                params.add(termid);
                // paramsSQLWithoutInv.add(termid);
//                condition += " and inv.journalEntry.costcenter.ID=?";
                conditionSQL += " and invoice.termid=? ";
                // conditionSQLWithoutInv += " and invoice.termid=? ";
                paramsSQLOpeningBalanceInv.add(termid);
                conditionSQLForOpeningBalanceInvoice += " and invoice.termid=? ";
            }
            String innerQuery = "";
//            String openingBalanceInvoicesUnionQuery = "";
            String tableInv = "";
            if (!StringUtil.isNullOrEmpty(productid)) {
                tableInv = ", invoicedetails.id as invid ";
                params.add(productid);
                innerQuery = " inner join invoicedetails on invoicedetails.invoice = invoice.id "
                        + " inner join inventory on invoicedetails.id = inventory.id ";
                if (StringUtil.isNullOrEmpty(prodFilterCustid)) {
                    conditionSQL += " and inventory.product = ? ";
                } else {
                    params.add(prodFilterCustid);
                    conditionSQL += " and inventory.product = ? and invoice.customer = ? ";
                }
            }

            if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                tableInv = ", invoicedetails.id as invid ";
                params.add(productCategoryid);
                innerQuery = " inner join invoicedetails on invoicedetails.invoice = invoice.id "
                        + " inner join inventory on invoicedetails.id = inventory.id ";
                if (StringUtil.isNullOrEmpty(prodFilterCustid)) {
                    conditionSQL += " and inventory.product in (select productid from productcategorymapping where productcategory = ?) ";
                } else {
                    params.add(prodFilterCustid);
                    conditionSQL += " and inventory.product in (select productid from productcategorymapping where productcategory = ?) and invoice.customer = ? ";
                }
            }
            if(!StringUtil.isNullOrEmpty(customerBankAccountType)){
                conditionSQL += " and invoice.customerbankaccounttype in ("+customerBankAccountType+") ";
//                params.add(customerBankAccountType);
            }
            
            if (CashAndInvoice) {
                if (!StringUtil.isNullOrEmpty(newcustomerid)) {
                    if (newcustomerid.contains(",")) {
                        newcustomerid = AccountingManager.getFilterInString(newcustomerid);
//                    conditionSQL += " and invoice.customer IN" + newcustomerid;
//                    conditionSQLForOpeningBalanceInvoice += " and invoice.customer IN" + newcustomerid;
                        if (includeExcludeChildCmb) {
                            conditionSQL += " and (invoice.customer IN" + newcustomerid + " or customer.parent IN" + newcustomerid + ")";
                            conditionSQLForOpeningBalanceInvoice += " and (invoice.customer IN" + newcustomerid + " or customer.parent IN" + newcustomerid + ")";

                        } else {
                            conditionSQL += " and invoice.customer IN" + newcustomerid;
                            conditionSQLForOpeningBalanceInvoice += " and invoice.customer IN" + newcustomerid;

                        }
                    } else {
                        params.add(newcustomerid);
                        paramsSQLOpeningBalanceInv.add(newcustomerid);
                        paramsSQLWithoutInv.add(newcustomerid);
                        if (includeExcludeChildCmb) {
                            params.add(newcustomerid);
                            paramsSQLOpeningBalanceInv.add(newcustomerid);
                            conditionSQL += " and (invoice.customer = ? or customer.parent = ?)";
                            conditionSQLForOpeningBalanceInvoice += " and (invoice.customer = ? or customer.parent = ?) ";

                        } else {
                            conditionSQL += " and invoice.customer = ? ";
                            conditionSQLForOpeningBalanceInvoice += " and invoice.customer = ? ";

                        }
                    }
                } else if (!includeExcludeChildCmb) {
                    conditionSQL += " and customer.parent is  null ";
                    conditionSQLForOpeningBalanceInvoice += " and customer.parent is  null ";
                }
            } else {
                if (!StringUtil.isNullOrEmpty(newcustomerid)) {
                    if (newcustomerid.contains(",")) {
                        newcustomerid = AccountingManager.getFilterInString(newcustomerid);
                        conditionSQL += " and invoice.customer IN" + newcustomerid;
                        conditionSQLForOpeningBalanceInvoice += " and invoice.customer IN" + newcustomerid;
                    } else {
                        params.add(newcustomerid);
                        paramsSQLOpeningBalanceInv.add(newcustomerid);
                        paramsSQLWithoutInv.add(newcustomerid);
                        conditionSQL += " and invoice.customer = ? ";
                        conditionSQLForOpeningBalanceInvoice += " and invoice.customer = ? ";
                    }
                }
            }
            if (request.containsKey("linknumber") && request.get("linknumber") != null && !request.get("linknumber").toString().equals("")) {
                conditionSQL += " and invoice.invoicenumber = ? ";
                params.add(request.get("linknumber"));
            }

            String startDate = request.get(Constants.REQ_startdate)!=null? StringUtil.DecodeText((String) request.get(Constants.REQ_startdate)):(String) request.get(Constants.REQ_startdate);
            String endDate = request.get(Constants.REQ_enddate)!=null? StringUtil.DecodeText((String) request.get(Constants.REQ_enddate)):(String) request.get(Constants.REQ_enddate);
            if ((!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) || (isAged && !StringUtil.isNullOrEmpty(endDate))) {
//                condition += " and (inv.journalEntry.entryDate >=? and inv.journalEntry.entryDate <=?)";
                if (includeAllRec) {
//                       conditionSQL += " and ((journalentry.entrydate >=? and journalentry.entrydate <=?) or (invoice.creationdate BETWEEN ? and ?))"; 
                       conditionSQL += " and ((invoice.creationdate BETWEEN ? and ?))"; 
                } else if((isAged || isSalesPersonAged) && !isMonthlyAgeingReport){// for aged needs all invoices whose creation date is upto end date
//                    conditionSQL += " and journalentry.entrydate <=? ";
                    conditionSQL += " and invoice.creationdate <=? ";
                    conditionSQLForOpeningBalanceInvoice += " and goodsreceipt.creationdate <=? ";
                } else {
//                    conditionSQL += " and (journalentry.entrydate >=? and journalentry.entrydate <=?)";
                    conditionSQL += " and (invoice.creationdate >=? and invoice.creationdate <=?)";
                    conditionSQLForOpeningBalanceInvoice += " and (invoice.creationdate >=? and invoice.creationdate <=?)";
                }
                if (isMonthlyAgeingReport) {
                    params.add(new Date(Long.parseLong(startDate)));
                    params.add(new Date(Long.parseLong(endDate)));
                    paramsSQLOpeningBalanceInv.add(new Date(Long.parseLong(startDate)));
                    paramsSQLOpeningBalanceInv.add(new Date(Long.parseLong(endDate)));
                    paramsSQLWithoutInv.add(new Date(Long.parseLong(startDate)));
                    paramsSQLWithoutInv.add(new Date(Long.parseLong(endDate)));
                } else if (isAged || isSalesPersonAged) {
                    params.add(df.parse(endDate));
                    paramsSQLOpeningBalanceInv.add(df.parse(endDate));
                } else {
                    params.add(df.parse(startDate));
                    params.add(df.parse(endDate));
//                    if (includeAllRec) {
//                        params.add(df.parse(startDate));
//                        params.add(df.parse(endDate));
//                    }
                    paramsSQLOpeningBalanceInv.add(df.parse(startDate));
                    paramsSQLOpeningBalanceInv.add(df.parse(endDate));
                    paramsSQLWithoutInv.add(df.parse(startDate));
                    paramsSQLWithoutInv.add(df.parse(endDate));
                }
            }

            String searchJoin = "";
            String opSearchjoin= "";
            boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
            if (request.containsKey("upsIntegrationFlag")) {
                upsIntegrationFlag = (boolean) request.get("upsIntegrationFlag");
            }
            if (!StringUtil.isNullOrEmpty(ss)) {
                List<String> searchcolList = new ArrayList<String>(Arrays.asList(new String[]{"invoice.invoicenumber", "invoice.billto", "journalentry.entryno", "invoice.memo", "account.name", "customer.name","customer.aliasname", "product.name", "product.productid",
                    "bsaddr.billingaddress", "bsaddr.billingcountry", "bsaddr.billingstate", "bsaddr.billingcity", "bsaddr.billingemail", "bsaddr.billingpostal",
                    "bsaddr.shippingaddress", "bsaddr.shippingCountry", "bsaddr.shippingstate", "bsaddr.shippingcity", "bsaddr.shippingemail", "bsaddr.shippingpostal"}));
                if(upsIntegrationFlag) {    //To allow Quick Search on 'Shipment Tracking Number(s)'
                    searchcolList.add("upspackagedetails.trackingnumber");
                }
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, searchcolList.size());
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcolList.toArray(new String[searchcolList.size()]));
                conditionSQL += searchQuery;
                searchJoin = " left join invoicedetails on invoicedetails.invoice = invoice.id "
                        + " left join inventory on invoicedetails.id = inventory.id "
                        + " left join product on inventory.product = product.id "
                        + " left join billingshippingaddresses bsaddr on bsaddr.id=invoice.billingshippingaddresses ";
                if(upsIntegrationFlag) {    //To allow Quick Search on 'Shipment Tracking Number(s)'
                    searchJoin += " left join dodetails on (dodetails.cidetails = invoicedetails.id OR dodetails.id = invoicedetails.deliveryorderdetail) "
                            + " left join packingdetails ON packingdetails.dodetailid = dodetails.id "
                            + " left join packing ON packing.id = packingdetails.packinglist "
                            + " left join upspackagedetails ON upspackagedetails.packing = packing.id ";
                }
                
                String[] searchcol = new String[]{"invoice.invoicenumber","customer.name","customer.aliasname"};
                SearchStringMap = StringUtil.insertParamSearchStringMap(paramsSQLOpeningBalanceInv, ss, 3);
                StringUtil.insertParamSearchString(SearchStringMap);
                searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionSQLForOpeningBalanceInvoice += searchQuery;
                opSearchjoin=" inner join customer on customer.id = invoice.customer ";

                searchcol = new String[]{"billinginvoice.billinginvoicenumber", "billinginvoice.billto", "journalentry.entryno", "billinginvoice.memo", "account.name"};
                SearchStringMap = StringUtil.insertParamSearchStringMap(paramsSQLWithoutInv, ss, 5);
                StringUtil.insertParamSearchString(SearchStringMap);
                searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
            }
            /**
             * Fetch those record which has at least one job Order item
             */
            if (request.containsKey("joborderitem") && request.get("joborderitem") != null) {
                boolean joborderitem = (Boolean) request.get("joborderitem");
                if (joborderitem) {
                    searchJoin = " inner join invoicedetails on invoicedetails.invoice = invoice.id ";
                    conditionSQL += " and invoicedetails.joborderitem =true ";
                }
            }
            if (personGroup) {
                params.add(startFinYearCalDate);
                params.add(endFinYearCalDate);
                paramsSQLWithoutInv.add(startFinYearCalDate);
                paramsSQLWithoutInv.add(endFinYearCalDate);
                conditionSQL += " and invoice.duedate>=? and invoice.duedate<=?";
            }

            if (isagedgraph) {
                params.add(startFinYearCalDate);
                params.add(endFinYearCalDate);
                paramsSQLWithoutInv.add(startFinYearCalDate);
                paramsSQLWithoutInv.add(endFinYearCalDate);
                conditionSQL += " and invoice.duedate>=? and invoice.duedate<=?";
            }

            if (request.containsKey("custInvFlagForSalesPerson") && (Boolean) request.get("custInvFlagForSalesPerson") && request.get(InvoiceConstants.userid) != null) {
                String userId = (String) request.get(InvoiceConstants.userid);
                if (!StringUtil.isNullOrEmpty(userId)) {
                    DataFilteringModule dataFilteringModule = null;
                    MasterItem masterItem = null;
                    List<DataFilteringModule> dataFilteringModuleList = new ArrayList<DataFilteringModule>();
                    List<MasterItem> masterItems = new ArrayList<MasterItem>();

                    dataFilteringModuleList = find("from DataFilteringModule where user.userID='" + userId + "' and company.companyID='" + companyid + "'");
                    masterItems = find("from MasterItem where user='" + userId + "' and company.companyID='" + companyid + "' and masterGroup.ID='" + 15 + "'");
                    if (!dataFilteringModuleList.isEmpty()) {
                        dataFilteringModule = dataFilteringModuleList.get(0);
                    }
//                    if (!masterItems.isEmpty()) {
//                        masterItem = masterItems.get(0);
//                    }
                    if ((dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice()) || (dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice() && masterItem != null)) {
                        conditionSQL += " and ( ";
                    }

                    if (dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice()) {
                        params.add(dataFilteringModule.getUser().getUserID());
                        conditionSQL += "invoice.createdby=? ";
                    }

                    if (dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice() && !masterItems.isEmpty()) {
                        String qMarks = "";
                        for (MasterItem item : masterItems) {
                            qMarks += "?,";
                            params.add(item.getID());
                        }
                        qMarks = qMarks.substring(0, qMarks.length() - 1);
                        conditionSQL += " or invoice.masterSalesPerson in (" + qMarks + ")";
                    }
                    if ((dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice()) || (dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice() && masterItem != null)) {
                        conditionSQL += " ) ";
                    }
                }
            }
            //Check this with sagar sir Anup
            if (request.containsKey(InvoiceConstants.isSalesCommissionStmt)) {
                if (Boolean.parseBoolean((String) request.get(InvoiceConstants.isSalesCommissionStmt))) {
                    String userid = (String) request.get(InvoiceConstants.userid);
                    if (StringUtil.isNullOrEmpty(userid)) {
//                        condition += " and inv.salesperson is not null ";
                        conditionSQL += " and invoice.masterSalesPerson is not null ";
                    } else if (!StringUtil.isNullOrEmpty(userid)) {
                        params.add(userid);
                        paramsSQLWithoutInv.add(userid);
//                        condition += " and inv.salesperson=? ";
                        conditionSQL += " and invoice.masterSalesPerson=? ";
                    }
                }
            }
                
            if (isSalesPersonAged) { //this block will execute when call coming from Report "Ageing Report Based on sales person"                
                if (request.containsKey(InvoiceConstants.salesPersonid)) {
                    String salesPersonID = (String) request.get(InvoiceConstants.salesPersonid);
                    if (!StringUtil.isNullOrEmpty(salesPersonID) && !salesPersonID.equalsIgnoreCase("All")) {
                        salesPersonID = AccountingManager.getFilterInString(salesPersonID);
                        conditionSQL += " and invoice.masterSalesPerson in " + salesPersonID + " ";
                    } else {
                        conditionSQL += " and invoice.masterSalesPerson is not null ";
                    }
                } else {
                    conditionSQL += " and invoice.masterSalesPerson is not null ";
                }
            } else if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {//this block is executed only when owners restriction feature is on 
                String salesPersonID = (String) request.get(InvoiceConstants.salesPersonid);
                String salespersonQuery = "";
                if (!StringUtil.isNullOrEmpty(salesPersonID)) {
                   salesPersonID= AccountingManager.getFilterInString(salesPersonID);
                    salespersonQuery = "  invoice.masterSalesPerson in " + salesPersonID + " or ";
                }
                
                conditionSQL += " and ( " + salespersonQuery + "  invoice.createdby='" + userID + "' or invoice.masterSalesPerson is null  ) ";
            }
            
            if (nondeleted) {
//                condition += " and inv.deleted=false ";
                params.add('F');
                paramsSQLWithoutInv.add('F');
                conditionSQL += " and invoice.deleteflag=? ";
            } else if (deleted) {
//                condition += " and inv.deleted=true ";
                conditionSQL += " and invoice.deleteflag='T' ";
            }

            if (!isForTemplate) {
                if (pendingapproval) {
                    params.add(11);
                    conditionSQL += " and invoice.approvestatuslevel != ? ";
                } else {
                    params.add(11);
                    conditionSQL += " and invoice.approvestatuslevel= ? ";
                }

                //Ignore records created as only templates.
                params.add(2);
                conditionSQL += " and invoice.istemplate != ? ";
            }

            if (isfavourite) {
                conditionSQL += " and invoice.favouriteflag=true ";
            }
            if (!isAged && !isMonthlySalesInvoice) { //ERP-20971//In case of Aged Receivable we need all types of Invoices so no need to applying below check in case of aged
                if (isFixedAsset) {
                    conditionSQL += " and invoice.isfixedassetinvoice=true ";
                } else {
                    conditionSQL += " and invoice.isfixedassetinvoice=false ";
                }

                if (isLeaseFixedAsset) {
                    conditionSQL += " and invoice.isfixedassetleaseinvoice=true ";
                } else {
                    conditionSQL += " and invoice.isfixedassetleaseinvoice=false ";
                }
                if (isConsignment) {
                    conditionSQL += " and invoice.isconsignment='T'";
                } else {
                    conditionSQL += " and invoice.isconsignment='F'";
                }
            }
            if (isprinted) {
                conditionSQL += " and invoice.printedflag=true ";
            }
            
            if (!StringUtil.isNullOrEmpty(userDepartment)) {
                innerQuery += " inner join users on users.userid = invoice.createdby ";
                conditionSQL += " and users.department = ? ";
                params.add(userDepartment);
            }
            if (onlyNormalPendingInvoices) {
                //to fetch only normal invoices  in pending approval invoice list tab (Exclude recurred docs)invoice list
                conditionSQL += " and invoice.parentinvoice is null ";
            }
            if(onlyRecurredInvoices){
                //to fetch only recurred invoice list
                conditionSQL += " and invoice.parentinvoice is not null ";
            }
            if (isDraft) {
                conditionSQL += " and invoice.isdraft = true ";
            } else {
                params.add(false);
                conditionSQL += " and invoice.isdraft = ? ";
            }
            if(isExcise){
                conditionSQL += " and invoice.isexciseinvoice = ? ";
                params.add(1);
            }
            
            if (request.containsKey(Constants.generatedSource) && request.get(Constants.generatedSource) != null) {
                conditionSQL += " and invoice.generatedsource = ? ";
                params.add((Integer) (request.get(Constants.generatedSource)));
            }

            if(request.containsKey("moduletemplateid") && !StringUtil.isNullOrEmpty(request.get("moduletemplateid").toString())){
                conditionSQL += " and invoice.moduletemplateid = ? ";
                params.add(request.get("moduletemplateid").toString());
            }

            /*
             * Please Add any condition above this comment in query . If you add
             * any condition after below code then advance search will not work.
             * Its reason is that order of params is changes.
             */
            
            String appendCase = "and";
            String mySearchFilterString = "";
            String mySearchFilterStringforOpeningTransaction = "";
            String joinString1 = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            String searchDefaultFieldSQL="";
            String jeid=" jedetail.id = invoice.centry ";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = StringUtil.DecodeText(request.get("searchJson").toString());

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, moduleid, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchJoin += " left join invoicelinking on invoicelinking.docid=invoice.id and invoicelinking.sourceflag = 1 ";
                        if(searchDefaultFieldSQL.contains("newproductbatch")){
                         searchJoin +=" left join invoicedetails invdetails on invdetails.invoice = invoice.id "
                        + " inner join dodetails on invdetails.id = dodetails.cidetails "
                        + "inner join locationbatchdocumentmapping on dodetails.id = locationbatchdocumentmapping.documentid "
                        + "inner join newproductbatch  on newproductbatch.id=locationbatchdocumentmapping.batchmapid ";
                        }
                    }
                    if (customSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Custom fields
                         */
                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        if (isOpeningBalanceInvoices) {
                            request.put("isOpeningBalance", isOpeningBalanceInvoices);
                            mySearchFilterStringforOpeningTransaction = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
                            mySearchFilterStringforOpeningTransaction = mySearchFilterStringforOpeningTransaction.replaceAll("AccJEDetailCustomData", "openingbalanceinvoicecustomdata");//    
//                        mySearchFilterStringforOpeningTransaction = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                            joinString1 = " inner join openingbalanceinvoicecustomdata on openingbalanceinvoicecustomdata.openingbalanceinvoiceid=invoice.id ";
                            StringUtil.insertParamAdvanceSearchString1(paramsSQLOpeningBalanceInv, Searchjson);
                        } else {
                            mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
//                            mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                            if (mySearchFilterString.contains("accjecustomdata") || mySearchFilterString.contains("AccJECustomData")) {
                                joinString1 = " inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry ";
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJECustomData", "accjecustomdata");//    
                            }
                            StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                            if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "accjedetailcustomdata");//    
                                joinString1 += " left join accjedetailcustomdata  on accjedetailcustomdata.jedetailId=jedetail.id ";
                                jeid = " jedetail.journalentry = invoice.journalentry ";
                            }
                            if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "accjedetailproductcustomdata");//    
                                joinString1 += " left join accjedetailproductcustomdata  on accjedetailproductcustomdata.jedetailId=jedetail.id ";
                                jeid = " jedetail.journalentry = invoice.journalentry ";
                            }
                            if (mySearchFilterString.contains("CustomerCustomData")) {
                                joinString1 += " left join customercustomdata  on customercustomdata.customerId=customer.id ";
                                mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "customercustomdata");
                            }
                            //product custom data
                            if (mySearchFilterString.contains("accproductcustomdata")) {
                                joinString1 += " inner join invoicedetails on invoicedetails.invoice=invoice.id left join inventory on inventory.id=invoicedetails.id "
                                        + "left join product on product.id=inventory.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                            }
                        }
                        StringUtil.insertParamAdvanceSearchString1(paramsSQLWithoutInv, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }

            String orderBy = "";
            String[] stringSort = null;
            String sort_Col = "";
            String joinString2 = "";
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                stringSort = columSort(Col_Name, Col_Dir);
                orderBy += stringSort[0];
                sort_Col += stringSort[1];
                innerQuery += stringSort[3];
                innerQuery4 += stringSort[4];
                if(request.get("sort").toString().equals("salespersonname")){
                    if(includeAllRec){
                        joinString2 += " left join masteritem on masteritem.id = invoice.mastersalesperson ";
                    } else{
                        joinString2 += " inner join masteritem on masteritem.id = invoice.mastersalesperson ";
                    }
                }
                /*
                 * For Sorting column on Customer bank account type
                 */
                if(request.get("sort").toString().equals("customerbankaccounttypevalue")){
                    joinString2 += " left join masteritem m on m.id = invoice.customerbankaccounttype ";
                }
                /*
                 * For Sorting column on payment method used for UOB
                 */
                if(request.get("sort").toString().equals("paymentMethodUsedForUOB")){
                    joinString2 += " left join paymentmethod p on p.id = invoice.paymentmethodusedforuob ";
                }
                
            } else {
                if (isConsignment) {
                    orderBy +=  " order by entrydate desc,invoicenumber desc";
                    sort_Col += ", journalentry.entrydate,invoice.invoicenumber " ;
                } else if(isUnpaidInvoiceReport)  {
                    orderBy += " order by name ASC,entrydate DESC";
//                    sort_Col += ", customer.name,journalentry.entrydate";
                    sort_Col += ", customer.name,invoice.creationdate";
                }   else {
                    orderBy += " order by entrydate desc";
//                    sort_Col += ", journalentry.entrydate";
                    sort_Col += ", invoice.creationdate";
                }
            }
//            params.addAll(paramsSQLWithoutInv);
            String finalFilters="";
            String productjoin="";
            if (!StringUtil.isNullOrEmpty(vatcommodityid) && !vatcommodityid.equals("all")) {
                if(!joinString1.contains("left join product") &&  !searchJoin.contains("left join product") &&  !innerQuery.contains("left join product") &&  !innerQuery3.contains("left join product") && !joinString2.contains("left join product")){
                    if(!joinString1.contains("left join invoicedetails") &&  !searchJoin.contains("left join invoicedetails") &&  !innerQuery.contains("left join invoicedetails") &&  !innerQuery3.contains("left join invoicedetails") &&  !joinString2.contains("left join invoicedetails")){
                        productjoin = " left join invoicedetails on invoicedetails.invoice = invoice.id "
                            + " left join inventory on invoicedetails.id = inventory.id "
                            + " left join product on product.id = inventory.product ";
                    } else if(!joinString1.contains("left join inventory") &&  !searchJoin.contains("left join inventory") &&  !innerQuery.contains("left join inventory") &&  !innerQuery3.contains("left join inventory") &&  !joinString2.contains("left join inventory")){
                        productjoin = " left join inventory on invoicedetails.id = inventory.id "
                            + " left join product on product.id = inventory.product ";
                    } else{
                        productjoin = " left join product on product.id = inventory.product ";
                    }
                    
                }
                productSearch += " and product.vatcommoditycode = '"+vatcommodityid+"' ";
            }
            if (includeAllRec) {
                joinTables += " left join journalentry on invoice.journalentry = journalentry.id  "
                        + "left join jedetail on " + jeid + " "
                        + " left join account on account.id = jedetail.account "
                        + " left join customer on customer.id = invoice.customer "
                        + joinString2 +productjoin
                        + " left join customercategorymapping on customercategorymapping.customerid = customer.id ";
                finalFilters = " invoice.company = ?" + conditionSQL + mySearchFilterString +productSearch;
            } else {
                joinTables += " inner join journalentry on invoice.journalentry = journalentry.id  "
                        + "inner join jedetail on " + jeid + " "
                        + " inner join account on account.id = jedetail.account "
                        + " inner join customer on customer.id = invoice.customer "
                        + joinString2 +productjoin 
                        + " left join customercategorymapping on customercategorymapping.customerid = customer.id ";
                finalFilters = " invoice.company = ?" + conditionSQL + mySearchFilterString+ productSearch ;
            }
            
        /*    String billingJoinTables = " inner join journalentry on billinginvoice.journalentry = journalentry.id  "
                    + " inner join jedetail on jedetail.id = billinginvoice.centry "
                    //      +" inner join invoice on invoice.centry = jedetail.id  "
                    + " inner join account on account.id = jedetail.account ";
            String finalBillingFilters = " billinginvoice.company = ?" + conditionSQLWithoutInv + mySearchFilterString;
          */  
//            String salesPersonMappingQuery = "";
//            if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {
//                salesPersonMappingQuery = " left join salespersonmapping spm on spm.customerid=invoice.customer  left join masteritem  mst on mst.id=spm.salesperson ";
//                joinString1+=salesPersonMappingQuery;
//                finalFilters += " and ((mst.user= '" + userID + "' or mst.user is null  and customer.isavailableonlytosalespersons='T' ) or  (customer.isavailableonlytosalespersons='F')) ";
//            }
            String mysqlQuery = "select DISTINCT invoice.id,  'false' as withoutinventory, journalentry.createdon " + sort_Col + tableInv + "  from invoice  "
                    + joinTables
                    + searchJoin + innerQuery + innerQuery3 + joinString1 
                    + " left join costcenter on costcenter.id = journalentry.costcenter  "
                    + " where " + finalFilters + " ";

//                    + " union "
//                    + " select billinginvoice.id,  'true' as withoutinventory, journalentry.createdon  "+  sort_Col1 +tableBillingInv+" from billinginvoice  "
//                    + billingJoinTables
//                    +joinString +innerQuery4
//                    + " left join costcenter on costcenter.id = journalentry.costcenter  "                   
//                    + " where " + finalBillingFilters;

            String countSQLQuery = "select count(DISTINCT invoice.id) from invoice  "
                    + joinTables
                    + searchJoin + innerQuery + innerQuery3 + joinString1
                    + " left join costcenter on costcenter.id = journalentry.costcenter  "
                    + " where " + finalFilters + " ";
//                    + " union "
//                    + " select billinginvoice.id,  'true' as withoutinventory, journalentry.createdon  "+  sort_Col1 +tableBillingInv+" from billinginvoice  "
//                    +joinString +innerQuery4
//                    + " where " + finalBillingFilters;
            
            /* Used in Aged Receivables- to filter invoice on asOfdate */
            Date asOfDate = null;
            if (request.containsKey("asofdate") && request.get("asofdate") != null) {
                String asOfDateString = (String) request.get("asofdate");
                asOfDate = df.parse(asOfDateString);
            }
            if(request.containsKey("isAgedReceivables") && request.get("isAgedReceivables")!=null && Boolean.parseBoolean(request.get("isAgedReceivables").toString()) && asOfDate!=null){ // used for aged receivables
                mysqlQuery+=" and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0)) or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) and (invoice.amountduedate>? or invoice.amountduedate is null)) )";
                countSQLQuery += " and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0)) or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) and (invoice.amountduedate>? or invoice.amountduedate is null))) ";
                params.add(asOfDate);
            }
            if (onlyOutstanding || ispendingpayment) {
                mysqlQuery+= "AND ( ((invoice.invoiceamountdueinbase >?)))";
                countSQLQuery+= "AND ( ((invoice.invoiceamountdueinbase >? )))"; 
                params.add(0.0);
                 
            }
            mysqlQuery += orderBy;
            if (isOpeningBalanceInvoices) {
                params = paramsSQLOpeningBalanceInv;
                mysqlQuery = " select invoice.id,  'false' as withoutinventory, invoice.creationdate, invoice.creationdate from invoice " + joinString1+opSearchjoin
                        + " where invoice.isopeningbalenceinvoice=True and invoice.company = ?" + conditionSQLForOpeningBalanceInvoice + mySearchFilterStringforOpeningTransaction;
                countSQLQuery = "select count(invoice.id) from invoice "+ joinString1+opSearchjoin
                        + " where invoice.isopeningbalenceinvoice=True and invoice.company = ?" + conditionSQLForOpeningBalanceInvoice + mySearchFilterStringforOpeningTransaction;
            }
//            list = executeQuery( query, params.toArray());

            //list = executeSQLQuery( countSQLQuery, params.toArray());
//            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false && consolidateFlag == false && !isExport) {// paging to data when company is non consolidate.
                list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                List countList = executeSQLQuery( countSQLQuery, params.toArray());
                if (!countList.isEmpty()) {
                    BigInteger bigInteger = (BigInteger) countList.get(0);
                    totalCount = bigInteger.intValue();
                }
            } else {
                list = executeSQLQuery( mysqlQuery, params.toArray());
            }
            if(list!=null && !list.isEmpty())
             count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, totalCount);
    }

    
    @Override
    public KwlReturnObject getAssetMaintenanceScheduleReport(HashMap<String, Object> requestParams) throws ServiceException {
        String companyId = (String) requestParams.get("companyId");
        List<AssetMaintenanceScheduler> list = null;
        int count = 0;

        String condition = "";
        ArrayList params = new ArrayList();
        try {
            params.add(companyId);
            
            boolean isContract = false;
            
            if (requestParams.containsKey("isContract") && requestParams.get("isContract") != null) {
                isContract = (Boolean) requestParams.get("isContract");
            }

            if (requestParams.containsKey("assetId") && requestParams.get("assetId") != null) {
                condition += " and ams.assetDetails.id=? ";
                params.add((String) requestParams.get("assetId"));
            }
            
            if (isContract) {// if contract schedule
                condition += " and ams.scheduleType=1 ";
            } else { // if Asset schedule
                condition += " and ams.scheduleType=0 ";
            }

            if (requestParams.containsKey("scheduleId") && requestParams.get("scheduleId") != null) {
                condition += " and ams.assetMaintenanceSchedulerObject.id=? ";
                params.add((String) requestParams.get("scheduleId"));
            }
            
            if (requestParams.containsKey("fromDate") && requestParams.get("fromDate") != null && requestParams.containsKey("toDate") && requestParams.get("toDate") != null) {
                params.add((Date) requestParams.get("fromDate"));
                params.add((Date) requestParams.get("toDate"));
                params.add((Date) requestParams.get("fromDate"));
                params.add((Date) requestParams.get("toDate"));
                condition += " and ((ams.startDate>=? and ams.startDate<=?) OR (ams.endDate>=? and ams.endDate<=?)) ";
            }

            String start = "";
            String limit = "";

            if (requestParams.containsKey(Constants.start) && requestParams.get(Constants.start) != null && requestParams.containsKey(Constants.limit) && requestParams.get(Constants.limit) != null) {
                start = (String) requestParams.get(Constants.start);
                limit = (String) requestParams.get(Constants.limit);
            }

//            String ss = (requestParams.containsKey("ss") && requestParams.get("ss") != null) ? (String) requestParams.get("ss") : "";
//            if (!StringUtil.isNullOrEmpty(ss)) {
//                String[] searchcol = new String[]{"ams.assignedTo","ams.status"};
//                StringUtil.insertParamSearchString(params, ss, 2);
//                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
//                condition += searchQuery;
//            }

            String sortingCondition = " order by ams.startDate asc";

            String query = "From AssetMaintenanceScheduler ams where ams.company.companyID=? " + condition + sortingCondition;

            list = executeQuery( query, params.toArray());
            count = list.size();

            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getAssetMaintenanceWorkOrders:" + ex.getMessage(), ex);
        }

        return new KwlReturnObject(true, null, null, list, count);
    }
    
    @Override
    public KwlReturnObject getAssetMaintenanceScheduleForCrown(HashMap<String, Object> requestParams) throws ServiceException {
        String companyId = (String) requestParams.get("companyId");
        List<AssetMaintenanceScheduler> list = null;
        int count = 0;

        String condition = "";
        ArrayList params = new ArrayList();
        try {
            params.add(companyId);

            if (requestParams.containsKey("assetId") && requestParams.get("assetId") != null) {
                condition += " and ams.assetDetails.id=? ";
                params.add((String) requestParams.get("assetId"));
            }

            if (requestParams.containsKey("scheduleId") && requestParams.get("scheduleId") != null) {
                condition += " and ams.assetMaintenanceSchedulerObject.id=? ";
                params.add((String) requestParams.get("scheduleId"));
            }
            
            if (requestParams.containsKey("eventStartDate") && requestParams.get("eventStartDate") != null) {
                String eventStartDate = (String) requestParams.get("eventStartDate");
                condition += " and (ams.startDate like '"+eventStartDate+"%') " ;
            }
            
            if (requestParams.containsKey("eventEndDate") && requestParams.get("eventEndDate") != null) {
                String eventEndDate = (String) requestParams.get("eventEndDate");
                condition += " and (ams.endDate like '"+eventEndDate+"%') " ;
            }
            
            String sortingCondition = " order by ams.startDate asc";

            String query = "From AssetMaintenanceScheduler ams where ams.company.companyID=? and ams.scheduleType=0 " + condition + sortingCondition;

            list = executeQuery( query, params.toArray());
            count = list.size();

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getAssetMaintenanceWorkOrders:" + ex.getMessage(), ex);
        }

        return new KwlReturnObject(true, null, null, list, count);
    }
    
    
    @Override
    public KwlReturnObject getMaintenanceSchedules(HashMap<String, Object> requestParams) throws ServiceException {
        String companyId = (String) requestParams.get("companyId");
        List<AssetMaintenanceSchedulerObject> list = null;
        int count = 0;

        String condition = "";
        ArrayList params = new ArrayList();
        try {
            params.add(companyId);

            if (requestParams.containsKey("assetId") && requestParams.get("assetId") != null) {
                condition += " and ams.assetDetails.id=? ";
                params.add((String) requestParams.get("assetId"));
            }

            String ss = (requestParams.containsKey("ss") && requestParams.get("ss") != null) ? (String) requestParams.get("ss") : "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"ams.scheduleName"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 1);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery;
            }

            String start = "";
            String limit = "";

            if (requestParams.containsKey(Constants.start) && requestParams.get(Constants.start) != null && requestParams.containsKey(Constants.limit) && requestParams.get(Constants.limit) != null) {
                start = (String) requestParams.get(Constants.start);
                limit = (String) requestParams.get(Constants.limit);
            }

            String query = "From AssetMaintenanceSchedulerObject ams where ams.company.companyID=? " + condition;

            list = executeQuery( query, params.toArray());
            count = list.size();

            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getMaintenanceSchedules:" + ex.getMessage(), ex);
        }

        return new KwlReturnObject(true, null, null, list, count);
    }
    
    @Override
    public KwlReturnObject getOpeningBalanceInvoices(HashMap<String, Object> request) throws ServiceException {
        List<Invoice> list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            boolean onlyAmountDue = (request.containsKey("onlyAmountDue") && request.get("onlyAmountDue") != null) ? Boolean.parseBoolean(request.get("onlyAmountDue").toString()) : false;
            boolean isAgedReceivables = (request.containsKey("isAgedReceivables") && request.get("isAgedReceivables")!=null)?  Boolean.parseBoolean(request.get("isAgedReceivables").toString()):false;
            boolean isSalesPersonAgedReport = (request.containsKey("isSalesPersonAgedReport") && request.get("isSalesPersonAgedReport") != null) ? Boolean.parseBoolean(request.get("isSalesPersonAgedReport").toString()) : false;
            int dateFilter = (request.containsKey("datefilter") && request.get("datefilter") != null) ? Integer.parseInt(request.get("datefilter").toString()) : 0;
//            DateFormat df = (DateFormat) request.get(Constants.df);
//            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);

            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String customerid = (String) request.get(InvoiceConstants.customerid);
            if (customerid == null) {
                customerid = (String) request.get(InvoiceConstants.accid);
            }
            String vendorIdGroup = (String) request.get("custVendorID");
            if (!StringUtil.isNullOrEmpty(vendorIdGroup)) {
                vendorIdGroup = AccountingManager.getFilterInString(vendorIdGroup);
            }

            String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
            boolean isAccountInvoices = false;
            if (request.containsKey("isAccountInvoices") && request.get("isAccountInvoices") != null) {
                isAccountInvoices = (Boolean) request.get("isAccountInvoices");
            }

            Boolean isExciseInvoice= false;
            if(request.get("isExciseInvoice")!=null && !StringUtil.isNullOrEmpty(request.get("isExciseInvoice").toString())){
                isExciseInvoice=(Boolean)request.get("isExciseInvoice");
            }
            Boolean isForOpeningTransactionTab= false;
            if(request.get("isForOpeningTransactionTab")!=null && !StringUtil.isNullOrEmpty(request.get("isForOpeningTransactionTab").toString())){
                isForOpeningTransactionTab=(Boolean)request.get("isForOpeningTransactionTab");
            }            
            String condition = "";
            ArrayList params = new ArrayList();
            params.add(companyid);

            if (isAccountInvoices && request.containsKey("accountId") && request.get("accountId") != null) {
                String accountId = request.get("accountId").toString();
                condition += " AND inv.account.ID=? ";
                params.add(accountId);
            }
            if (!StringUtil.isNullOrEmpty(customerid)) {
                condition += " AND inv.customer.ID=? ";
                params.add(customerid);
            }

            if (isSalesPersonAgedReport) {// When call came from Aged Report based on sales person
                if (!StringUtil.isNullOrEmpty(vendorIdGroup) && !vendorIdGroup.contains("All")) {
                    condition += " AND inv.masterSalesPerson.ID IN " + vendorIdGroup;
                } else {
                    condition += " AND inv.masterSalesPerson is not null ";
                }
            } else if (!StringUtil.isNullOrEmpty(vendorIdGroup) && !vendorIdGroup.contains("All")) {
                condition += " AND inv.customer.ID IN " + vendorIdGroup;
            }
            
            if (!StringUtil.isNullOrEmpty(currencyfilterfortrans)&& !request.containsKey("isReceipt")) {
                condition += " and inv.currency.currencyID = ?";
                params.add(currencyfilterfortrans);
            }
            if (isExciseInvoice !=null && isForOpeningTransactionTab) {
                condition += " and inv.isExciseInvoice = ?";
                params.add(isExciseInvoice);
            }
            
            if (request.containsKey("groupcombo") && request.get("groupcombo") != null && request.containsKey(Constants.globalCurrencyKey) && request.get(Constants.globalCurrencyKey) != null) {
                int groupcombo = (Integer) request.get("groupcombo");

                if (groupcombo == Constants.AgedPayableBaseCurrency) {
                    condition += " and inv.currency.currencyID=" + Integer.parseInt((String) request.get(Constants.globalCurrencyKey));
                } else if (groupcombo == Constants.AgedPayableOtherthanBaseCurrency) {
                    condition += " and inv.currency.currencyID!=" + Integer.parseInt((String) request.get(Constants.globalCurrencyKey));
                }
            }
            
            if (request.containsKey(InvoiceConstants.salesPersonid) && request.get(InvoiceConstants.salesPersonid)!=null) {
                String salesPersonID = (String) request.get(InvoiceConstants.salesPersonid);
                if (!StringUtil.isNullOrEmpty(salesPersonID) && !salesPersonID.equalsIgnoreCase("All")) {
                    salesPersonID = AccountingManager.getFilterInString(salesPersonID);
                    condition += " and inv.masterSalesPerson in " + salesPersonID + " ";
                }
            }
            
            if (onlyAmountDue) {
                condition += " AND inv.openingBalanceAmountDue > 0 ";
            }
            /* Used in Aged Receivables- to filter invoice on asOfdate */
            DateFormat df = (DateFormat) request.get(Constants.df);
            Date asOfDate = null;
            if (request.containsKey("asofdate") && request.get("asofdate") != null) {
                String asOfDateString = (String) request.get("asofdate");
                asOfDate = df.parse(asOfDateString);
            }
            if ((isAgedReceivables || isSalesPersonAgedReport) && asOfDate!=null) { // used for aged receivables
                condition+=" and (inv.openingBalanceAmountDue>0 or (inv.openingBalanceAmountDue=0 and inv.amountDueDate>?))";
                params.add(asOfDate);
            }
         
            String endDateString = "";
            Date endDate = null;
            if (request.containsKey("MonthlyAgeingEndDate") && request.get("MonthlyAgeingEndDate") != null) {
                endDate = (Date)request.get("MonthlyAgeingEndDate");
            } else if (request.containsKey(Constants.REQ_enddate) && request.get(Constants.REQ_enddate) != null) {
                endDateString = (String) request.get(Constants.REQ_enddate);
                endDate = df.parse(endDateString);
            }
            if (isAgedReceivables) {
                if (endDate != null) {
                    condition += " and inv.creationDate<= ?";
                    params.add(endDate);
                }

            }
            
            String ss = (request.containsKey("ss") && request.get("ss") != null) ? (String) request.get("ss") : "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"inv.customer.name", "inv.customer.aliasname","inv.invoiceNumber", "inv.account.name"};
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 4);
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery + " AND inv.customer IS NOT NULL ";
            }

            String appendCase = "and";
            String mySearchFilterStringforOpeningTransaction = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();
                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (customSearchFieldArray.length() > 0) {
                        /*
                         * Advance Search For Custom fields
                         */
                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterStringforOpeningTransaction = String.valueOf(StringUtil.getAdvanceSearchString(request, false).get(Constants.myResult));
                        mySearchFilterStringforOpeningTransaction=mySearchFilterStringforOpeningTransaction.replaceAll("c.openingbalanceinvoicecustomdata", "inv.openingBalanceInvoiceCustomData");
                        mySearchFilterStringforOpeningTransaction=mySearchFilterStringforOpeningTransaction.replaceAll("c.AccJEDetailCustomData", "inv.openingBalanceInvoiceCustomData");
                        mySearchFilterStringforOpeningTransaction=mySearchFilterStringforOpeningTransaction.replaceAll("c.CustomerCustomData", "inv.customer.accCustomerCustomData");
                        mySearchFilterStringforOpeningTransaction=mySearchFilterStringforOpeningTransaction.replaceAll("c.accjecustomdata", "inv.openingBalanceInvoiceCustomData");
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                }
            }
            String query = "from Invoice inv where inv.isOpeningBalenceInvoice=true AND inv.deleted=false AND inv.company.companyID=?" + condition+ mySearchFilterStringforOpeningTransaction;
            list = executeQuery( query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }
    
    public KwlReturnObject getUninvoicedDos(HashMap<String, Object> request) throws ServiceException {
           List list = null;
        int count = 0;
            String companyid = (String) request.get(Constants.companyKey);
            String customerid="";
            String custWarehouse="";
            if (!StringUtil.isNullOrEmpty((String) request.get("customerid"))) {
                customerid = (String) request.get("customerid");
            }
            if (!StringUtil.isNullOrEmpty((String) request.get("custWarehouse"))) {
                custWarehouse = (String) request.get("custWarehouse");
            }
             ArrayList params= new  ArrayList();
             params.add(customerid);
             params.add(custWarehouse);
             params.add(companyid);
           String mysqlQuery = " select id from deliveryorder where customer=? and custWarehouse=? and company=? ";
      
        list = executeSQLQuery( mysqlQuery, params.toArray());
        count = list.size();

        return new KwlReturnObject(true, "", null, list, count);
    }
    
    @Override
    public int getOpeningBalanceInvoiceCount(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            String customerid = (String) request.get(InvoiceConstants.customerid);
            String vendorIdGroup = (String) request.get("custVendorID");
            if (!StringUtil.isNullOrEmpty(vendorIdGroup)) {
                vendorIdGroup = AccountingManager.getFilterInString(vendorIdGroup);
            }

            String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
            boolean isAccountInvoices = false;
            if (request.containsKey("isAccountInvoices") && request.get("isAccountInvoices") != null) {
                isAccountInvoices = (Boolean) request.get("isAccountInvoices");
            }

            String condition = "";
            ArrayList params = new ArrayList();
            params.add(companyid);

            if (isAccountInvoices && request.containsKey("accountId") && request.get("accountId") != null) {
                String accountId = request.get("accountId").toString();
                condition += " AND inv.account.ID=? ";
                params.add(accountId);
            }
            if (!StringUtil.isNullOrEmpty(customerid)) {
                condition += " AND inv.customer.ID=? ";
                params.add(customerid);
            }

            if (!StringUtil.isNullOrEmpty(vendorIdGroup) && !vendorIdGroup.contains("All")) {
                condition += " AND inv.customer.ID IN " + vendorIdGroup;
            }

            if (!StringUtil.isNullOrEmpty(currencyfilterfortrans)) {
                condition += " and inv.currency.currencyID = ?";
                params.add(currencyfilterfortrans);
            }

            String ss = (request.containsKey("ss") && request.get("ss") != null) ? (String) request.get("ss") : "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"inv.customer.name", "inv.invoiceNumber", "inv.account.name"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 3);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery + " AND inv.customer IS NOT NULL ";
            }

            String query = "select count(inv.ID) from Invoice inv where inv.isOpeningBalenceInvoice=true AND inv.deleted=false AND inv.company.companyID=?" + condition;

            list = executeQuery( query, params.toArray());
            Long totalCnt = 0l;
            if (list != null && !list.isEmpty()){
                totalCnt = (Long) list.get(0);
            }
            count = totalCnt.intValue();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getOpeningBalanceInvoiceCount:" + ex.getMessage(), ex);
        }
        return count;
    }
    
    @Override
    public KwlReturnObject getOpeningBalanceTotalBaseAmountDueForInvoices(HashMap<String, Object> request) throws ServiceException {
        List<Invoice> list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
//            DateFormat df = (DateFormat) request.get(Constants.df);
//            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);

            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String customerid = (String) request.get(InvoiceConstants.customerid);
            String vendorIdGroup = (String) request.get("custVendorID");
            if (!StringUtil.isNullOrEmpty(vendorIdGroup)) {
                vendorIdGroup = AccountingManager.getFilterInString(vendorIdGroup);
            }

            String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
            boolean isAccountInvoices = false;
            if (request.containsKey("isAccountInvoices") && request.get("isAccountInvoices") != null) {
                isAccountInvoices = (Boolean) request.get("isAccountInvoices");
            }

            String condition = "";
            ArrayList params = new ArrayList();
            params.add(companyid);

            if (isAccountInvoices && request.containsKey("accountId") && request.get("accountId") != null) {
                String accountId = request.get("accountId").toString();
                condition += " AND inv.account.ID=? ";
                params.add(accountId);
            }
            if (!StringUtil.isNullOrEmpty(customerid)) {
                condition += " AND inv.customer.ID=? ";
                params.add(customerid);
            }

            if (!StringUtil.isNullOrEmpty(vendorIdGroup) && !vendorIdGroup.contains("All")) {
                condition += " AND inv.customer.ID IN " + vendorIdGroup;
            }

            if (!StringUtil.isNullOrEmpty(currencyfilterfortrans)) {
                condition += " and inv.currency.currencyID = ?";
                params.add(currencyfilterfortrans);
            }

            String ss = (request.containsKey("ss") && request.get("ss") != null) ? (String) request.get("ss") : "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"inv.customer.name","inv.customer.acccode", "inv.invoiceNumber", "inv.account.name"};
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 4);
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery + " AND inv.customer IS NOT NULL ";
            }

            String query = "select COALESCE(SUM(inv.openingBalanceBaseAmountDue),0) from Invoice inv where inv.isOpeningBalenceInvoice=true AND inv.deleted=false AND inv.company.companyID=?" + condition;

            list = executeQuery( query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getOpeningBalanceBaseAmountDueInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    @Override
    public KwlReturnObject getOpeningBalanceTotalBaseAmountForInvoices(HashMap<String, Object> request) throws ServiceException {
        List<Invoice> list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
//            DateFormat df = (DateFormat) request.get(Constants.df);
//            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);

            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String customerid = (String) request.get(InvoiceConstants.customerid);
            String vendorIdGroup = (String) request.get("custVendorID");
            if (!StringUtil.isNullOrEmpty(vendorIdGroup)) {
                vendorIdGroup = AccountingManager.getFilterInString(vendorIdGroup);
            }

            String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
            boolean isAccountInvoices = false;
            if (request.containsKey("isAccountInvoices") && request.get("isAccountInvoices") != null) {
                isAccountInvoices = (Boolean) request.get("isAccountInvoices");
            }

            String condition = "";
            ArrayList params = new ArrayList();
            params.add(companyid);
            
            if (isAccountInvoices && request.containsKey("accountId") && request.get("accountId") != null) {
                String accountId = request.get("accountId").toString();
                if (request.containsKey("Searchjson") && request.get("Searchjson") != null && !StringUtil.isNullOrEmpty((String)request.get("Searchjson"))){
                    condition += " AND invoice.account=? ";
                } else {
                    condition += " AND inv.account.ID=? ";
                }
                params.add(accountId);
            }
            if (!StringUtil.isNullOrEmpty(customerid)) {
                condition += " AND inv.customer.ID=? ";
                params.add(customerid);
            }

            if (!StringUtil.isNullOrEmpty(vendorIdGroup) && !vendorIdGroup.contains("All")) {
                condition += " AND inv.customer.ID IN " + vendorIdGroup;
            }

            if (!StringUtil.isNullOrEmpty(currencyfilterfortrans)) {
                condition += " and inv.currency.currencyID = ?";
                params.add(currencyfilterfortrans);
            }

            String ss = (request.containsKey("ss") && request.get("ss") != null) ? (String) request.get("ss") : "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"inv.customer.name","inv.customer.acccode", "inv.invoiceNumber", "inv.account.name"};
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 4);
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery + " AND inv.customer IS NOT NULL ";
            }                    
            
            String appendCase = "and";
            String mySearchFilterStringforOpeningTransaction = "";
            String joinString1 = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            if (request.containsKey("Searchjson") && request.get("Searchjson") != null && !StringUtil.isNullOrEmpty((String)request.get("Searchjson"))) {
                Searchjson = request.get("Searchjson").toString();
                Searchjson = getJsornStringForSearch(Searchjson, companyid);
                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    request.put(Constants.Searchjson, Searchjson);
                    request.put(Constants.appendCase, appendCase);
                    request.put(Constants.moduleid, 2);
                    request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                    request.put("isOpeningBalance", true);
                    mySearchFilterStringforOpeningTransaction = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                    mySearchFilterStringforOpeningTransaction=mySearchFilterStringforOpeningTransaction.replaceAll("AccJEDetailCustomData", "openingbalanceinvoicecustomdata");
                    mySearchFilterStringforOpeningTransaction=mySearchFilterStringforOpeningTransaction.replaceAll("AccJEDetailsProductCustomData", "openingbalanceinvoicecustomdata");
                    joinString1 = " inner join openingbalanceinvoicecustomdata on openingbalanceinvoicecustomdata.openingbalanceinvoiceid=invoice.id ";
                    StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                }
            }       
            
            String query = "";
            if (request.containsKey("Searchjson") && request.get("Searchjson") != null && !StringUtil.isNullOrEmpty((String)request.get("Searchjson"))){
                query = "Select COALESCE(SUM(invoice.originalopeningbalancebaseamount),0) from invoice  "+joinString1+ " where invoice.isopeningbalenceinvoice=true AND invoice.deleteflag=false AND invoice.company=?" + condition+mySearchFilterStringforOpeningTransaction;
                list = executeSQLQuery( query, params.toArray());
            }else{
                query = "Select COALESCE(SUM(originalOpeningBalanceBaseAmount),0) from Invoice inv where inv.isOpeningBalenceInvoice=true AND inv.deleted=false AND inv.company.companyID=?" + condition;
                list = executeQuery( query, params.toArray());
            }
            
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getOpeningBalanceTotalBaseAmountForInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

     public KwlReturnObject getFieldParams(HashMap<String, Object> requestParams) {
        KwlReturnObject result = null;
        List list = null;
        try {
            ArrayList name = null;
            String hql = "";
            ArrayList value = null;
            ArrayList orderby = null;
            ArrayList ordertype = null;
            String[] searchCol = null;
            hql = "from FieldParams ";
            if (requestParams.get("filter_names") != null && requestParams.get("filter_values") != null) {
                name = new ArrayList((List<String>) requestParams.get("filter_names"));
                value = new ArrayList((List<Object>) requestParams.get("filter_values"));
                hql += com.krawler.common.util.StringUtil.filterQuery(name, "where");
                int ind = hql.indexOf("(");

                if (ind > -1) {
                    int index = Integer.valueOf(hql.substring(ind + 1, ind + 2));
                    hql = hql.replace("(" + index + ")", "(" + value.get(index).toString() + ")");
                    value.remove(index);
                }

            }
            int moduleId = 0;
            if (requestParams.containsKey("moduleid")) {
                moduleId = requestParams.get("moduleid") != null ? Integer.parseInt(requestParams.get("moduleid").toString()) : 0;
            }

            if (requestParams.get("searchcol") != null && requestParams.get("ss") != null) {
                searchCol = (String[]) requestParams.get("searchcol");
                hql += StringUtil.getSearchquery(requestParams.get("ss").toString(), searchCol, value);
            }

            if (requestParams.containsKey("customfield") && (Integer) requestParams.get("customfield") != null) {
                hql += " and customfield = 1";
            }
            if (requestParams.containsKey("isActivated") && (Integer) requestParams.get("isActivated") != null) {
                int activatedFlag = (Integer) requestParams.get("isActivated");
                hql += " and isactivated = " + activatedFlag;
            }
            if (requestParams.containsKey("relatedmoduleid")) {
                hql += " and relatedmoduleid like '%" + requestParams.get("relatedmoduleid") + "%'";
            }
            if (requestParams.containsKey("parentid")) {
                hql += " and parentid = '" + requestParams.get("parentid") + "'";
            }
            if (requestParams.containsKey("checkForParent")) {
                hql += " and parentid is not null ";
            }
            if (moduleId != 0) {
                value.add(moduleId);
                hql += " and moduleid = ? ";
            }
            if (requestParams.get("order_by") != null && requestParams.get("order_type") != null) {
                orderby = new ArrayList((List<String>) requestParams.get("order_by"));
                ordertype = new ArrayList((List<Object>) requestParams.get("order_type"));
                hql += com.krawler.common.util.StringUtil.orderQuery(orderby, ordertype);
            }

            list = executeQuery( hql, value.toArray());


        } catch (Exception ex) {
            ex.printStackTrace();

        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public String getJsornStringForSearch(String Searchjson, String companyId) throws ServiceException {
        String returnStr = "";
        try {
            JSONArray jArray = new JSONArray();
            JSONObject jSONObject = new JSONObject();
            JSONObject jobjSearch = new JSONObject(Searchjson);
            int count = jobjSearch.getJSONArray(Constants.root).length();
            for (int i = 0; i < count; i++) {
                KwlReturnObject result = null;
                KwlReturnObject resultdata = null;
                JSONObject jobj1 = jobjSearch.getJSONArray(Constants.root).getJSONObject(i);
                String[] arr = null;
                HashMap<String, Object> requestParams = new HashMap<String, Object>();
                requestParams.put("moduleid",2);
                requestParams.put(Constants.filter_names, Arrays.asList(Constants.companyid, Constants.fieldlabel));
                requestParams.put(Constants.filter_values, Arrays.asList(companyId,StringUtil.DecodeText(jobj1.optString("columnheader"))));
                result = getFieldParams(requestParams);
                List lst = result.getEntityList();
                Iterator ite = lst.iterator();
                while (ite.hasNext()) {
                    JSONObject jobj = new JSONObject();
                    FieldParams tmpcontyp = null;
                    tmpcontyp = (FieldParams) ite.next();
                    jobj.put("column", tmpcontyp.getId());
                    jobj.put("refdbname", Constants.Custom_Column_Prefix + tmpcontyp.getColnum());
                    jobj.put("xfield", Constants.Custom_Column_Prefix + tmpcontyp.getColnum());
                    jobj.put("iscustomcolumn", jobj1.getString("iscustomcolumn"));
                    jobj.put("iscustomcolumndata", tmpcontyp.isIsForKnockOff() ? (tmpcontyp.getCustomcolumn() == 1 ? "true" : "false") : jobj1.getString("iscustomcolumndata"));
                    jobj.put("isfrmpmproduct", jobj1.getString("isfrmpmproduct"));
                    jobj.put("fieldtype", tmpcontyp.getFieldtype());
                    if (tmpcontyp.getFieldtype() == 4 || tmpcontyp.getFieldtype() == 7 || tmpcontyp.getFieldtype() == 12) {
                        arr = jobj1.getString("searchText").split(",");
                        String Searchstr = "";
                        HashMap<String, Object> requestParamsdata = null;
                        for (String key : arr) {
                            FieldComboData fieldComboData1 = (FieldComboData) get(FieldComboData.class, key);
                            requestParamsdata = new HashMap<String, Object>();
                            requestParamsdata.put(Constants.filter_names, Arrays.asList(Constants.Acc_custom_fieldId, "value"));
                            try {
                                requestParamsdata.put(Constants.filter_values, Arrays.asList(tmpcontyp.getId(), StringUtil.DecodeText(fieldComboData1.getValue())));
                            } catch (Exception e) {
                                requestParamsdata.put(Constants.filter_values, Arrays.asList(tmpcontyp.getId(), fieldComboData1.getValue()));
                            }

                            resultdata = getFieldParamsComboData(requestParamsdata);
                            List lstdata = resultdata.getEntityList();
                            Iterator itedata = lstdata.iterator();
                            if (itedata.hasNext()) {
                                FieldComboData fieldComboData = null;
                                fieldComboData = (FieldComboData) itedata.next();
                                Searchstr += fieldComboData.getId().toString() + ",";
                            }
                        }
                        jobj.put("searchText", Searchstr);
                        jobj.put("search", Searchstr);
                    } else {
                        jobj.put("searchText", jobj1.getString("searchText"));
                        jobj.put("search", jobj1.getString("searchText"));
                    }
                    jobj.put("columnheader", StringUtil.DecodeText(jobj1.optString("columnheader")));
                    try{
                        jobj.put("combosearch", StringUtil.DecodeText(jobj1.optString("combosearch")));
                    } catch(Exception e){
                        jobj.put("combosearch", jobj1.getString("combosearch"));
                    }
                    jobj.put("isinterval", jobj1.getString("isinterval"));
                    jobj.put("interval", jobj1.getString("interval"));
                    jobj.put("isbefore", jobj1.getString("isbefore"));
                    jobj.put("xtype", StringUtil.getXtypeVal(tmpcontyp.getFieldtype()));
                    jArray.put(jobj);
                    if (tmpcontyp.getCustomcolumn() == 1 && tmpcontyp.getCustomfield() == 0) {
                        JSONObject jobjOnlyForDimention = new JSONObject(jobj.toString());
                        jobjOnlyForDimention.remove("iscustomcolumndata");
                        jobjOnlyForDimention.put("iscustomcolumndata", "true");
                        jArray.put(jobjOnlyForDimention);
                    }
                }
            }
            jSONObject.put("root", jArray);
            returnStr = jSONObject.toString();
        } catch (JSONException ex) {
            Logger.getLogger(accAccountDAOImpl.class.getName()).log(Level.SEVERE, null, ex);
        }catch (Exception e) {
            Logger.getLogger(accAccountDAOImpl.class.getName()).log(Level.SEVERE, null, e);
        }
        return returnStr;
    }

    public KwlReturnObject getFieldParamsComboData(HashMap<String, Object> requestParams) {
        KwlReturnObject result = null;
        List list = null;
        try {
            ArrayList name = null;
            String hql = "";
            ArrayList value = null;
            ArrayList orderby = null;
            ArrayList ordertype = null;
            String[] searchCol = null;
            hql = "from FieldComboData ";
            if (requestParams.get("filter_names") != null && requestParams.get("filter_values") != null) {
                name = new ArrayList((List<String>) requestParams.get("filter_names"));
                value = new ArrayList((List<Object>) requestParams.get("filter_values"));
                hql += com.krawler.common.util.StringUtil.filterQuery(name, "where");
                int ind = hql.indexOf("(");

                if (ind > -1) {
                    int index = Integer.valueOf(hql.substring(ind + 1, ind + 2));
                    hql = hql.replace("(" + index + ")", "(" + value.get(index).toString() + ")");
                    value.remove(index);
                }
            }

            if (requestParams.get("searchcol") != null && requestParams.get("ss") != null) {
                searchCol = (String[]) requestParams.get("searchcol");
                hql += StringUtil.getSearchquery(requestParams.get("ss").toString(), searchCol, value);
            }

            if (requestParams.get("order_by") != null && requestParams.get("order_type") != null) {
                orderby = new ArrayList((List<String>) requestParams.get("order_by"));
                ordertype = new ArrayList((List<Object>) requestParams.get("order_type"));
                hql += com.krawler.common.util.StringUtil.orderQuery(orderby, ordertype);
            }
            if (requestParams.containsKey("customfield") && (Integer) requestParams.get("customfield") != null) {
                hql += " and customfield = 1";
            }
            if (requestParams.containsKey("relatedmoduleid")) {
                hql += " and relatedmoduleid like '%" + requestParams.get("relatedmoduleid") + "%'";
            }
            list = executeQuery( hql, value.toArray());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }      
    

    /*
     * get only opening balance invoices those are not normal invoices
     */
    @Override
    public KwlReturnObject getOpeningBalanceInvoicesExcludingNormalInvoices(HashMap<String, Object> request) throws ServiceException {
        List<Invoice> list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            boolean forMonthWiseInvoices = request.containsKey("forMonthWiseInvoices");
            
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String customerid = (String) request.get(InvoiceConstants.customerid);
            String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
            String ss = "";
            if (request.containsKey(Constants.ss)) {
                ss = !StringUtil.isNullOrEmpty((String) request.get(Constants.ss)) ? (String) request.get(Constants.ss) : "";
            }
            
            String condition = "";
            ArrayList params = new ArrayList();
              
            params.add(companyid);
            
            String startDate =  request.get(Constants.REQ_startdate) != null ?request.get(Constants.REQ_startdate).toString():"";
            String endDate =  request.get(Constants.REQ_startdate) !=null?request.get(Constants.REQ_enddate).toString():"";
            if (forMonthWiseInvoices) {
                if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                    condition += " and (inv.creationDate >= ? and inv.creationDate <= ? ) ";
                    params.add(df.parse(startDate));
                    params.add(df.parse(endDate));
                }
            }
            if(!StringUtil.isNullOrEmpty(customerid)){
                params.add(customerid);
                condition += " AND inv.customer.ID=? ";
            }
            
            if (!StringUtil.isNullOrEmpty(currencyfilterfortrans) && !request.containsKey("isReceipt")) {
                condition += " and inv.currency.currencyID = ?";
                params.add(currencyfilterfortrans);
            }
            if(Constants.InvoiceAmountDueFlag && request.containsKey(InvoiceConstants.onlyamountdue) && request.get(InvoiceConstants.onlyamountdue)!=null && Boolean.parseBoolean(request.get(InvoiceConstants.onlyamountdue).toString())) {
                if(request.containsKey("onlyclaimedamountdue") && request.get("onlyclaimedamountdue")!=null && Boolean.parseBoolean(request.get("onlyclaimedamountdue").toString())){
                    condition += " and ( inv.openingBalanceAmountDue != 0 or (inv.claimAmountDue != 0 and (inv.badDebtType = 1 or inv.badDebtType = 2))) ";
                } else {
                    condition += " and inv.openingBalanceAmountDue != 0  ";
                }
            }
            if(Constants.InvoiceAmountDueFlag && request.containsKey("ignorezero") && request.get("ignorezero")!=null && request.get("ignorezero").toString().equals("false")) {
                condition += " and inv.openingBalanceAmountDue == 0 ";
            }
            if(Constants.InvoiceAmountDueFlag && request.containsKey("minimumAmountDue") && request.get("minimumAmountDue")!=null ) {
                double minimummountDue = Double.parseDouble(request.get("minimumAmountDue").toString());
                condition += " and inv.openingBalanceAmountDue >= "+minimummountDue+" ";
            }
            String query="";
            
            query = "from Invoice inv where inv.isOpeningBalenceInvoice=true AND inv.normalInvoice=false AND inv.deleted=false AND inv.company.companyID=?" + condition;  
           
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"inv.invoiceNumber"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 1);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                query += searchQuery;
            }
            
            list = executeQuery( query, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getSelectedInvoicesMerged(HashMap<String, Object> request, String invoiceIds) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.add(Calendar.YEAR, 1);
            
            Date startFinYearCalDate = null;
            Date endFinYearCalDate = null;

            try {
                String startFinYearCalString = authHandler.getDateOnlyFormat().format(startFinYearCal.getTime());
                startFinYearCalDate = authHandler.getDateOnlyFormat().parse(startFinYearCalString);

                String endFinYearCalString = authHandler.getDateOnlyFormat().format(endFinYearCal.getTime());
                endFinYearCalDate = authHandler.getDateOnlyFormat().parse(endFinYearCalString);

            } catch (ParseException ex) {
                startFinYearCalDate = startFinYearCal.getTime();
                endFinYearCalDate = endFinYearCal.getTime();

                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            String customerid = (String) request.get(InvoiceConstants.customerid);
            String productid = (String) request.get(InvoiceConstants.productid);
            String prodFilterCustid = (String) request.get(InvoiceConstants.prodfiltercustid);
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (customerid == null) {
                customerid = (String) request.get(InvoiceConstants.accid);
            }
            String ss = (String) request.get(Constants.ss);
//            String cashAccount=((CompanyAccountPreferences) session.get(CompanyAccountPreferences.class, AuthHandler.getCompanyid(request))).getCashAccount().getID();
            String cashAccount = pref.getCashAccount().getID();
            boolean cashonly = false;
            boolean creditonly = false;
            boolean personGroup = false;
            boolean isagedgraph = false;
            boolean isfavourite = false;
            String group = "";
            cashonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.cashonly));
            creditonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.creditonly));
            boolean deleted = Boolean.parseBoolean((String) request.get(InvoiceConstants.deleted));
            boolean nondeleted = Boolean.parseBoolean((String) request.get(InvoiceConstants.nondeleted));
            boolean pendingapproval = (Boolean) request.get("pendingapproval");

            if (request.get("isfavourite") != null) {
                isfavourite = Boolean.parseBoolean((String) request.get("isfavourite"));
            }

            if (cashonly) {
                customerid = cashAccount;
            }
//            boolean ignoreZero = (String) request.get("ignorezero") != null;
            personGroup = Boolean.parseBoolean((String) request.get(InvoiceConstants.persongroup));
            isagedgraph = Boolean.parseBoolean((String) request.get(InvoiceConstants.isagedgraph));
            String dueDate = (String) request.get(InvoiceConstants.curdate);
            
            boolean isDraft = false;
            if (request.containsKey("isDraft") && request.get("isDraft") != null) {
                isDraft = (Boolean) request.get("isDraft");
            }
            
            ArrayList params = new ArrayList();
            ArrayList paramsSQLWithoutInv = new ArrayList();
//            String condition = "";
            String conditionSQL = "";
            String conditionSQLWithoutInv = "";
            params.add(companyid);
            paramsSQLWithoutInv.add(companyid);

            if (request.containsKey(InvoiceConstants.getRepeateInvoice)) {
                if (Boolean.parseBoolean((String) request.get(InvoiceConstants.getRepeateInvoice))) {
//                    condition += " and repeateInvoice is not null";
                    conditionSQL += " and repeateinvoice is not null";
                    conditionSQLWithoutInv += " and repeateinvoice is not null";
                }
            }
            String billID = (String) request.get("billidString");
            if (!StringUtil.isNullOrEmpty(invoiceIds)) {
//                params.add(billID);
//                paramsSQLWithoutInv.add(billID);
//                condition += " and inv.ID=?";
                conditionSQL += " and invoice.id IN(" + invoiceIds + ")";
                conditionSQLWithoutInv += " and billinginvoice.id IN(" + invoiceIds + ")";
            } else {
                if (!StringUtil.isNullOrEmpty(customerid)) {
                    params.add(customerid);
                    paramsSQLWithoutInv.add(customerid);
//                    condition += " and inv.customerEntry.account.ID=?";
                    conditionSQL += " and jedetail.account = ? ";
                    conditionSQLWithoutInv += " and jedetail.account = ? ";
                } else {
                    String q = "select ID from Customer where company.companyID=?";
                    Iterator itrcust = executeQuery( q, new Object[]{companyid}).iterator();
                    String qMarks = "";
                    if (!creditonly) {
                        qMarks = "?,";
                        params.add(cashAccount);
                        paramsSQLWithoutInv.add(cashAccount);
                    }
                    while (itrcust.hasNext()) {
                        qMarks += "?,";
                        String custAccount = (itrcust.next()).toString();
                        params.add(custAccount);
                        paramsSQLWithoutInv.add(custAccount);
                    }
                    qMarks = qMarks.substring(0, Math.max(0, qMarks.length() - 1));
                    if (!StringUtil.isNullOrEmpty(qMarks)) {
//                        condition += " and inv.customerEntry.account.ID in (" + qMarks + ")";
                        conditionSQL += " and jedetail.account in (" + qMarks + ")";
                        conditionSQLWithoutInv += " and jedetail.account in (" + qMarks + ")";
                    }
                }
            }
            String jeIds = (String) request.get("jeIds");
            if (!StringUtil.isNullOrEmpty(jeIds)) {
//                condition += " and inv.journalEntry.ID IN(" + jeIds + ")";
                conditionSQL += " and journalentry.id IN(" + jeIds + ")";
                conditionSQLWithoutInv += " and journalentry.id IN(" + jeIds + ")";
            }

            if (!StringUtil.isNullOrEmpty(dueDate)) {
                params.add(df.parse(dueDate));
                paramsSQLWithoutInv.add(df.parse(dueDate));
//                condition += " and inv.dueDate<=?";
                conditionSQL += " and invoice.duedate<=?";
                conditionSQLWithoutInv += " and billinginvoice.duedate<=?";
            }
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                paramsSQLWithoutInv.add(costCenterId);
//                condition += " and inv.journalEntry.costcenter.ID=?";
                conditionSQL += " and costcenter.id=?";
                conditionSQLWithoutInv += " and costcenter.id=?";
            }
            String innerQuery = "";
            String tableInv = "";
            String tableBillingInv = "";
            if (!StringUtil.isNullOrEmpty(productid)) {
                tableInv = ", invoicedetails.id as invid ";
                tableBillingInv = ", '' as invid ";

                params.add(productid);
                params.add(prodFilterCustid);
                innerQuery = " inner join invoicedetails on invoicedetails.invoice = invoice.id "
                        + " inner join inventory on invoicedetails.id = inventory.id ";
                conditionSQL += " and inventory.product = ? and invoice.customer = ? ";
                conditionSQLWithoutInv += " and jedetail.account = '' ";

            }

            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
//                condition += " and (inv.journalEntry.entryDate >=? and inv.journalEntry.entryDate <=?)";
//                conditionSQL += " and (journalentry.entrydate >=? and journalentry.entrydate <=?)";
                conditionSQL += " and (invoice.creationdate >=? and invoice.creationdate <=?)";
                conditionSQLWithoutInv += " and (journalentry.entrydate >=? and journalentry.entrydate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
                paramsSQLWithoutInv.add(df.parse(startDate));
                paramsSQLWithoutInv.add(df.parse(endDate));
            }

            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"invoice.invoicenumber", "invoice.billto", "journalentry.entryno", "invoice.memo", "account.name"};
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 5);
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionSQL += searchQuery;

                searchcol = new String[]{"billinginvoice.billinginvoicenumber", "billinginvoice.billto", "journalentry.entryno", "billinginvoice.memo", "account.name"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(paramsSQLWithoutInv, ss, 5);
                StringUtil.insertParamSearchString(SearchStringMap);
                searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionSQLWithoutInv += searchQuery;

//                for (int i = 0; i <= 4; i++) {
//                    params.add(ss + "%");
//                    paramsSQLWithoutInv.add(ss + "%");
//                }
////                condition += " and (inv.invoiceNumber like ? or inv.billTo like ?  or inv.journalEntry.entryNumber like ? or inv.memo like ? or inv.customerEntry.account.name like ? ) ";
//                conditionSQL += " and (invoice.invoicenumber like ? or invoice.billto like ?  or journalentry.entryno like ? or invoice.memo like ? or account.name like ? ) ";
//                conditionSQLWithoutInv += " and (billinginvoice.billinginvoicenumber like ? or billinginvoice.billto like ?  or journalentry.entryno like ? or billinginvoice.memo like ? or account.name like ? ) ";
            }

            if (personGroup) {
                params.add(startFinYearCalDate);
                params.add(endFinYearCalDate);
                paramsSQLWithoutInv.add(startFinYearCalDate);
                paramsSQLWithoutInv.add(endFinYearCalDate);
//                condition += " and inv.dueDate>=? and inv.dueDate<=?";
                conditionSQL += " and invoice.duedate>=? and invoice.duedate<=?";
                conditionSQLWithoutInv += " and billinginvoice.duedate>=? and billinginvoice.duedate<=?";
            }

            if (isagedgraph) {
                params.add(startFinYearCalDate);
                params.add(endFinYearCalDate);
                paramsSQLWithoutInv.add(startFinYearCalDate);
                paramsSQLWithoutInv.add(endFinYearCalDate);
//                condition += " and inv.dueDate>=? and inv.dueDate<=?";
                conditionSQL += " and invoice.duedate>=? and invoice.duedate<=?";
                conditionSQLWithoutInv += " and billinginvoice.duedate>=? and billinginvoice.duedate<=?";
            }
            if (request.containsKey(InvoiceConstants.isSalesCommissionStmt)) {
                if (Boolean.parseBoolean((String) request.get(InvoiceConstants.isSalesCommissionStmt))) {
                    String userid = (String) request.get(InvoiceConstants.userid);
                    if (StringUtil.isNullOrEmpty(userid)) {
//                        condition += " and inv.salesperson is not null ";
                        conditionSQL += " and invoice.salesperson is not null ";
                        conditionSQLWithoutInv += " and billinginvoice.salesperson is not null ";
                    } else if (!StringUtil.isNullOrEmpty(userid)) {
                        params.add(userid);
                        paramsSQLWithoutInv.add(userid);
//                        condition += " and inv.salesperson=? ";
                        conditionSQL += " and invoice.salesperson=? ";
                        conditionSQLWithoutInv += " and billinginvoice.salesperson=? ";
                    }
                }
            }

            if (nondeleted) {
//                condition += " and inv.deleted=false ";
                conditionSQL += " and invoice.deleteflag='F' ";
                conditionSQLWithoutInv += " and billinginvoice.deleteflag='F' ";
            } else if (deleted) {
//                condition += " and inv.deleted=true ";
                conditionSQL += " and invoice.deleteflag='T' ";
                conditionSQLWithoutInv += " and billinginvoice.deleteflag='T' ";
            }

            if (pendingapproval) {
                conditionSQL += " and invoice.pendingapproval != 0 ";
                conditionSQLWithoutInv += " and billinginvoice.pendingapproval != 0 ";
            } else {
                conditionSQL += " and invoice.pendingapproval= 0 ";
                conditionSQLWithoutInv += " and billinginvoice.pendingapproval= 0 ";
            }

            //Ingnore records created as only template.
            conditionSQL += " and invoice.istemplate != 2 ";
            conditionSQLWithoutInv += " and billinginvoice.istemplate != 2 ";

            if (isfavourite) {
                conditionSQL += " and invoice.favouriteflag=true ";
                conditionSQLWithoutInv += " and billinginvoice.favouriteflag=true ";
            }
            
            if (isDraft) {
                conditionSQL += " and invoice.isdraft = true ";
            } else {
                conditionSQL += " and invoice.isdraft = false ";
            }

//            String query = "from Invoice inv where inv.company.companyID=? " + condition + group + " order by customerEntry.account.id";
            String appendCase = "and";
            String mySearchFilterString = "";
            String joinString = "";
            String joinString1 = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    request.put(Constants.Searchjson, Searchjson);
                    request.put(Constants.appendCase, appendCase);
                    request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                    mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                    joinString = " inner join accjecustomdata on accjecustomdata.journalentryId=billinginvoice.journalentry ";
                    joinString1 = " inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry ";
                    StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    StringUtil.insertParamAdvanceSearchString1(paramsSQLWithoutInv, Searchjson);
                }
            }
            params.addAll(paramsSQLWithoutInv);
            String mysqlQuery = "select invoice.id,  'false' as withoutinventory, journalentry.createdon " + tableInv + "  from invoice  "
                    + "inner join journalentry on invoice.journalentry = journalentry.id  "
                    + "inner join jedetail on jedetail.id = invoice.centry "
                    + " inner join account on account.id = jedetail.account "
                    + innerQuery + joinString1
                    + " left join costcenter on costcenter.id = journalentry.costcenter  "
                    + " where invoice.company = ?" + conditionSQL + mySearchFilterString + " "
                    + " union "
                    + "select billinginvoice.id,  'true' as withoutinventory, journalentry.createdon " + tableBillingInv + " from billinginvoice  "
                    + "inner join journalentry on billinginvoice.journalentry = journalentry.id  "
                    + "inner join jedetail on jedetail.id = billinginvoice.centry "
                    + " inner join account on account.id = jedetail.account "
                    + joinString
                    + "left join costcenter on costcenter.id = journalentry.costcenter  "
                    + " where billinginvoice.company = ?" + conditionSQLWithoutInv + mySearchFilterString
                    + "order by createdon desc";
//            list = executeQuery( query, params.toArray());
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getSalesByCustomer(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            DateFormat df = (DateFormat) request.get(Constants.df);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.add(Calendar.YEAR, 1);
            String customerid = (String) request.get(InvoiceConstants.customerid);
            String productid = (String) request.get(InvoiceConstants.productid);

            String productCategoryid = "";
            if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.get(Constants.productCategoryid);
            }

            String prodFilterCustid = (String) request.get(InvoiceConstants.prodfiltercustid);
            String salesPersonid = (String) request.get(InvoiceConstants.salesPersonid);
            if (customerid == null) {
                customerid = (String) request.get(InvoiceConstants.accid);
            }

            String customerCategoryid = "";
            if (request.containsKey(InvoiceConstants.customerCategoryid) && request.get(InvoiceConstants.customerCategoryid) != null) {
                customerCategoryid = (String) request.get(InvoiceConstants.customerCategoryid);
            }
            String ss = (String) request.get(Constants.ss);
//            String cashAccount=((CompanyAccountPreferences) session.get(CompanyAccountPreferences.class, AuthHandler.getCompanyid(request))).getCashAccount().getID();
            String cashAccount = pref.getCashAccount().getID();
            boolean creditonly = false;
            creditonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.creditonly));
            boolean isSalesByProductReport= request.get("isSalesByProductReport")==null?false:Boolean.parseBoolean(request.get("isSalesByProductReport").toString());
            boolean isSalesBysalesPerosnReport= request.get("isSalesBysalesPerosnReport")==null?false:Boolean.parseBoolean(request.get("isSalesBysalesPerosnReport").toString());
            
            ArrayList params = new ArrayList();

            String conditionSQL = "";
            String conditionSQForNotLease = "";

            params.add(companyid);
            String userID = "";
            boolean isenableSalesPersonAgentFlow=false;
            if (request.containsKey("enablesalespersonagentflow") && request.get("enablesalespersonagentflow") != null && !StringUtil.isNullOrEmpty(request.get("enablesalespersonagentflow").toString())) {
                isenableSalesPersonAgentFlow = Boolean.parseBoolean(request.get("enablesalespersonagentflow").toString());
            }
            if (isenableSalesPersonAgentFlow) {
                if (request.containsKey("userid") && request.get("userid") != null && !StringUtil.isNullOrEmpty(request.get("userid").toString())) {
                    userID = (String) request.get("userid");
                }
            }
            if ( request.get("userid") != null) {//request.containsKey("salesPersonFilterFlag") && (Boolean) request.get("salesPersonFilterFlag")
                String userId = (String) request.get("userid");
                if (!StringUtil.isNullOrEmpty(userId)) {
                    DataFilteringModule dataFilteringModule = null;
                    MasterItem masterItem = null;
                    List<DataFilteringModule> dataFilteringModuleList = new ArrayList<DataFilteringModule>();
                    List<MasterItem> masterItems = new ArrayList<MasterItem>();

                    dataFilteringModuleList = find("from DataFilteringModule where user.userID='" + userId + "' and company.companyID='" + companyid + "'");
                    masterItems = find("from MasterItem where user='" + userId + "' and company.companyID='" + companyid + "' and masterGroup.ID='" + 15 + "'");
                    if (!dataFilteringModuleList.isEmpty()) {
                        dataFilteringModule = dataFilteringModuleList.get(0);
                    }
                    if (!masterItems.isEmpty()) {
                        masterItem = masterItems.get(0);
                    }
                   // if (!isSalesBysalesPerosnReport) {
                    if ((dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice()) || (dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice() && masterItem != null)) {
                        conditionSQL += " and ( ";
                    }

                    if (dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice()) {
                        params.add(dataFilteringModule.getUser().getUserID());
                        conditionSQL += "invoice.createdby=? ";
                    }

                    if (dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice() && masterItem != null) {
                        params.add(masterItem.getID());
                        conditionSQL += " or invoice.mastersalesperson=? ";
                    }

                    if ((dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice()) || (dataFilteringModule != null && !dataFilteringModule.isCustomerInvoice() && masterItem != null)) {
                        conditionSQL += " ) ";
                    }
                //}
            }
            }
            /*
             * String q = "select ID from Customer where company.companyID=?";
             * Iterator itrcust = executeQuery(
             * q, new Object[]{companyid}).iterator(); String qMarks = ""; if
             * (!creditonly) { qMarks = "?,"; params.add(cashAccount); } while
             * (itrcust.hasNext()) { qMarks += "?,"; String custAccount =
             * (itrcust.next()).toString(); params.add(custAccount);
             *
             * }
             * qMarks = qMarks.substring(0, Math.max(0, qMarks.length() - 1));
             * if (!StringUtil.isNullOrEmpty(qMarks)) { conditionSQL += " and
             * jedetail.account in (" + qMarks + ")"; }
             */
            if (!StringUtil.isNullOrEmpty(productid) && !StringUtil.equal(productid, "-1") && !StringUtil.equal(productid, "All")) {
//                params.add(productid);
                productid = AccountingManager.getFilterInString(productid);
                conditionSQL += " and inventory.product in " + productid + "  ";
            }

            if (!StringUtil.isNullOrEmpty(productCategoryid) && !StringUtil.equal(productCategoryid, "-1")) {
                params.add(productCategoryid);
//                productCategoryid = AccountingManager.getFilterInString(productCategoryid);
                conditionSQL += " and inventory.product in (select productid from productcategorymapping where productcategory = ?)  ";
            }

            if (!StringUtil.isNullOrEmpty(prodFilterCustid) && !StringUtil.equal(prodFilterCustid, "-1") && !StringUtil.equal(prodFilterCustid, "All")) {
//                params.add(prodFilterCustid);                
                prodFilterCustid = AccountingManager.getFilterInString(prodFilterCustid);
                conditionSQL += " and invoice.customer in " + prodFilterCustid + "  ";
            }

            if (!StringUtil.isNullOrEmpty(customerCategoryid) && !StringUtil.equal(customerCategoryid, "-1") && !StringUtil.equal(customerCategoryid, "All")) {
                params.add(customerCategoryid);
                conditionSQL += " and invoice.customer in (select customerid from customercategorymapping where customercategory = ?)  ";
            }

//            if (!StringUtil.isNullOrEmpty(salesPersonid) && !StringUtil.equal(salesPersonid, "-1") && !StringUtil.equal(salesPersonid, "All")) {
////                params.add(salesPersonid);
//                salesPersonid = AccountingManager.getFilterInString(salesPersonid);
//                conditionSQL += " and invoice.masterSalesPerson in " + salesPersonid + "  ";
//            } else if (StringUtil.equal(salesPersonid, "All")) {
//                conditionSQL += " and invoice.masterSalesPerson is not null ";
//            }
            
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
//                conditionSQL += " and (journalentry.entrydate >=? and journalentry.entrydate <=?) ";
                conditionSQL += " and (invoice.creationdate >=? and invoice.creationdate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            
            if (StringUtil.isNullOrEmpty(ss) == false) {
                for (int i = 0; i < 5; i++) {
                    params.add("%" +ss + "%");
                }
                conditionSQL += " and (invoice.invoicenumber like ? or account.name like ? or product.name like ? or customer.name like ? or product.productid like ?) ";
            }
             //condition for Non Lease invoice and non fixed asset disposal invoice records
            conditionSQForNotLease="and invoice.isfixedassetleaseinvoice=0 and invoice.isfixedassetinvoice=0 ";
            String appendCase = "and";
            String mySearchFilterString = "";
            String joinString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            String searchJoin = "";
            String searchDefaultFieldSQL="";
            String jeid=" jedetail.id = invoice.centry ";
             if (isSalesBysalesPerosnReport ) {
                 // this bloc k is executed for sales by saleseprson report
                if (!StringUtil.isNullOrEmpty(salesPersonid) && !StringUtil.equal(salesPersonid, "-1") && !StringUtil.equal(salesPersonid, "All")) {
                    salesPersonid = AccountingManager.getFilterInString(salesPersonid);
                    conditionSQL += " and invoice.masterSalesPerson in " + salesPersonid + "  ";
                } else if (StringUtil.equal(salesPersonid, "All")) {
                    conditionSQL += " and invoice.masterSalesPerson is not null ";
                }
            } else if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {//this block is executed only when owners restriction feature is on 
                String salesPersonID = (String) request.get("salesPersonid");
                String salespersonQuery = "";
                if (!StringUtil.isNullOrEmpty(salesPersonID)) {
                    salesPersonID = AccountingManager.getFilterInString(salesPersonID);
                    salespersonQuery = "  invoice.mastersalesperson in " + salesPersonID + " or ";
                }

                conditionSQL += " and ( " + salespersonQuery + "  invoice.createdby='" + userID + "' or invoice.mastersalesperson is null  ) ";
                }
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, "2" ,tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchJoin += " left join invoicelinking on invoicelinking.docid=invoice.id and invoicelinking.sourceflag = 1 ";
                    }
                    if (customSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Custom fields
                         */
                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                      
                            mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
//                            mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                            if (mySearchFilterString.contains("accjecustomdata") || mySearchFilterString.contains("AccJECustomData")) {
                                joinString = " inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry ";
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJECustomData", "accjecustomdata");//    
                            }
                      
                            if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "accjedetailcustomdata");//    
                                joinString += " left join accjedetailcustomdata  on accjedetailcustomdata.jedetailId=jedetail.id ";
                                jeid = " jedetail.journalentry = invoice.journalentry ";
                            }
                            if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "accjedetailproductcustomdata");//    
                                joinString += " left join accjedetailproductcustomdata  on accjedetailproductcustomdata.jedetailId=jedetail.id ";
                                jeid = " jedetail.journalentry = invoice.journalentry ";
                            }
                            if (mySearchFilterString.contains("CustomerCustomData")) {
                                joinString += " left join customercustomdata  on customercustomdata.customerId=customer.id ";
                                mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "customercustomdata");
                            }
                            //product custom data
                            if (mySearchFilterString.contains("accproductcustomdata")) {
                                joinString += " left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                            }
                            /*Address Fields*/
                            if (mySearchFilterString.contains("address") || mySearchFilterString.contains("city") || mySearchFilterString.contains("state") || mySearchFilterString.contains("country") || mySearchFilterString.contains("postalcode")) {
                                joinString += " left join customeraddressdetails on customeraddressdetails.customerid=customer.id ";
                            }
                       
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
        
            String mysqlQuery = "select DISTINCT invoice.id,  'false' as withoutinventory, journalentry.createdon , invoicedetails.id as invid   from invoice  "
                    + "inner join journalentry on invoice.journalentry = journalentry.id  "
                    + "inner join jedetail on "+jeid
                    + " inner join account on account.id = jedetail.account "
                    + " inner join invoicedetails on invoicedetails.invoice = invoice.id "
                    + " inner join inventory on invoicedetails.id = inventory.id "
                    + " inner join customer on customer.id = invoice.customer "
                    + " inner join product on product.id = inventory.product "+searchJoin+joinString
                    + " where invoice.company = ? and invoice.deleteflag='F' and invoice.pendingapproval=0 and invoice.isdraft = false " + conditionSQL + conditionSQForNotLease + mySearchFilterString + " "
                    + "order by createdon desc";
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false ) {
                    list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getCustomerRevenue(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.add(Calendar.YEAR, 1);
            String customerid = (String) request.get(InvoiceConstants.customerid);
            String productid = (String) request.get(InvoiceConstants.productid);
            String prodFilterCustid = (String) request.get(InvoiceConstants.prodfiltercustid);
            String salesPersonid = (String) request.get(InvoiceConstants.salesPersonid);
            String conditionSQL = "";
            String moduleid = "";
            boolean isCustomFieldAdvSearch = false;
            if (request.containsKey(Constants.moduleid) && request.get(Constants.moduleid) != null) {
                moduleid = request.get(Constants.moduleid).toString();
            }
            if(request.containsKey("isfixedassetinvoice") && request.get("isfixedassetinvoice")!=null){
                conditionSQL += " and invoice.isfixedassetinvoice="+Integer.parseInt(request.get("isfixedassetinvoice").toString())+" ";
            }
            if(request.containsKey("isconsignment") && request.get("isconsignment")!=null){
                conditionSQL += (Boolean) request.get("isconsignment") ? " and invoice.isconsignment='T' " : " and invoice.isconsignment='F' ";
            }
            if(request.containsKey("isfixedassetleaseinvoice") && request.get("isfixedassetleaseinvoice")!=null){
                conditionSQL += " and invoice.isfixedassetleaseinvoice="+Integer.parseInt(request.get("isfixedassetleaseinvoice").toString())+" ";
            }
            if (customerid == null) {
                customerid = (String) request.get(InvoiceConstants.accid);
            }
            String ss = (String) request.get(Constants.ss);
//            String cashAccount=((CompanyAccountPreferences) session.get(CompanyAccountPreferences.class, AuthHandler.getCompanyid(request))).getCashAccount().getID();
            String cashAccount = pref.getCashAccount().getID();
            boolean creditonly = false;
            creditonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.creditonly));

            ArrayList params = new ArrayList();

            
            
            params.add(companyid);

//            String q = "select ID from Customer where company.companyID=?";
//            Iterator itrcust = executeQuery( q, new Object[]{companyid}).iterator();
            String qMarks = "";
//            if (!creditonly) {
//                qMarks = "?,";
//                params.add(cashAccount);
//            }
//            while (itrcust.hasNext()) {
//                qMarks += "?,";
//                String custAccount = (itrcust.next()).toString();
//                params.add(custAccount);
//
//            }
//            qMarks = qMarks.substring(0, Math.max(0, qMarks.length() - 1));
//            if (!StringUtil.isNullOrEmpty(qMarks)) {
//                conditionSQL += " and jedetail.account in (" + qMarks + ")";
//            }

            if (!StringUtil.isNullOrEmpty(productid) && !StringUtil.equal(productid, "-1")) {
//                params.add(productid);
                productid = AccountingManager.getFilterInString(productid);
                conditionSQL += " and inventory.product in " + productid + "  ";
            }

            if (!StringUtil.isNullOrEmpty(prodFilterCustid) && !StringUtil.equal(prodFilterCustid, "-1")) {
//                params.add(prodFilterCustid);                
                prodFilterCustid = AccountingManager.getFilterInString(prodFilterCustid);
                conditionSQL += " and invoice.customer in " + prodFilterCustid + "  ";
            }

            if (!StringUtil.isNullOrEmpty(salesPersonid) && !StringUtil.equal(salesPersonid, "-1")) {
//                params.add(salesPersonid);
                salesPersonid = AccountingManager.getFilterInString(salesPersonid);
                conditionSQL += " and invoice.masterSalesPerson in " + salesPersonid + "  ";
            }

            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
//                conditionSQL += " and (journalentry.entrydate >=? and journalentry.entrydate <=?) ";
                conditionSQL += " and (invoice.creationdate >=? and invoice.creationdate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }

            if (StringUtil.isNullOrEmpty(ss) == false) {
                for (int i = 0; i < 3; i++) {
                    params.add(ss + "%");
                }
                conditionSQL += " and (invoice.invoicenumber like ? or account.name like ? or product.name like ? ) ";
            }
            
            String appendCase = "and";
            String mySearchFilterString = "";
            String joinString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            String searchDefaultFieldSQL = "";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();
                
                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    request.put(Constants.Searchjson, Searchjson);
                    request.put(Constants.appendCase, appendCase);
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, moduleid, tableArray, filterConjuctionCriteria);
                        joinString += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                    }
                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        isCustomFieldAdvSearch = true;
                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                    joinString = " inner join accjecustomdata on accjecustomdata.journalentryId=journalentry.id ";
                    StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                }
            }
            String mysqlQuery = "select invoice.id,  'false' as withoutinventory, journalentry.createdon , amount as invamount from invoice"
                    + " inner join customer on customer.id = invoice.customer "
                    + " inner join journalentry on invoice.journalentry = journalentry.id"
                    + " inner join jedetail on jedetail.id = invoice.centry "
                    + " inner join account on account.id = jedetail.account "
                    + joinString
                    + " where invoice.company = ? and invoice.deleteflag='F' and invoice.pendingapproval=0 and invoice.isdraft=false " + conditionSQL + mySearchFilterString + " "
                    + "order by customer.name,createdon ASC";
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    @Override
    public KwlReturnObject getCustomerLedgerReport(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyId = (String) request.get(Constants.companyKey);
//            String customerId = (String) request.get("customerId");
            String withoutinventory = (String) request.get("withoutinventory");
            Date startDate = (Date) request.get("startDate");
            Date endDate = (Date) request.get("endDate");
            boolean isPostDatedCheque = false;
            if (request.get("isPostDatedCheque") != null) {
                isPostDatedCheque = (Boolean) request.get("isPostDatedCheque");
            }
            boolean isLedgerReport = false;
            if (request.get("isLedgerReport") != null) {
                isLedgerReport = (Boolean) request.get("isLedgerReport");
            }
             boolean isSortedOnCreationDate = false;
            if (request.get("isSortedOnCreationDate") != null) {
                isSortedOnCreationDate = (Boolean) request.get("isSortedOnCreationDate");
            }
            boolean showDishonouredPayment = false;
            if (request.containsKey("showDishonouredPayment") && request.get("showDishonouredPayment") != null) {
                showDishonouredPayment = (Boolean) request.get("showDishonouredPayment");
            }
            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyId);
            String discountGivenAccId = pref.getDiscountGiven().getID();
            String discountReceivedAccId = pref.getDiscountReceived().getID();
            
            String orderBy = "";
            if (isLedgerReport) {
                orderBy = " ORDER BY  entrydate";//customerName,inttype,, entryno 
            }else if (isSortedOnCreationDate) {
                orderBy = " ORDER BY  customerName,entrydate";//customerName,inttype,, entryno 
            } else {
                 if (request.containsKey("dir") && request.containsKey("sort")) {
                    String Col_Name = request.get("sort").toString();
                    String Col_Dir = request.get("dir").toString();
                    orderBy = columSortSOA(Col_Name, Col_Dir,true);

                }else{
                     orderBy = " ORDER BY  customerName,inttype,entrydate ";//Customer Name, Record Type, entry Date";
                }
            }

            ArrayList paramsInv = new ArrayList();
            String condition = " WHERE inv.company = ? AND je1.pendingapproval = 0 AND je1.isdraft = false AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? ";
            String conditionRp = " WHERE rc.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? and rc.paymentwindowtype!=3";
            String conditioncustomerPayment = " WHERE p.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? ";
            String conditionCustomerReceipt = " WHERE rc.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? ";
            String conditionOtherwise = " WHERE cn.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? ";
            String conditionOtherwiseForDebitNote = " WHERE dn.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? ";
            String opnInvCondition = " WHERE inv.company = ? ";
            String opnDNCondition = " WHERE dn.company = ? ";
            String opnCNCondition = " WHERE cn.company = ? ";
            String opnRPCondition = " WHERE rp.company = ? ";
            String creditNoteQryInvOtherwise = "";
            String debitNoteQryInvOtherwise = "";
            String invoiceQryInv = "";
            String receiptQryInv = "";
            String receiptQryInvAdvance = "";
            String receiptQryInvOnlyAdvance = "";
            String receiptDishonouredQryInv = "";
            String customerDishonouredQryInv = "";
            String customerPaymentQryInv = "";
            String customerDNReceiptQryInv = "";
            String creditNoteQryInv = "";
            String customerCondition = "";
            String customerIds = "";
            String receiptCheque = "";
            String receiptChequeCondition = "";
            String openingInvQry = "";
            String openingDNQry = "";
            String openingCNQry = "";
            String openingRPQry = "";
            String creditNoteOverchargeQry = "";
            String debitNoteUnderchargeQry = "";
            if (request.containsKey("customerIds") && request.get("customerIds") != null) {
                customerIds = (String) request.get("customerIds");
            }

            if (!StringUtil.isNullOrEmpty(customerIds) && !customerIds.contains("All")) {
                 customerIds = AccountingManager.getFilterInString(customerIds);
                customerCondition = " AND inv.customer in" + customerIds;
                conditionOtherwise = conditionOtherwise + " AND cn.customer in" + customerIds;
                conditionOtherwiseForDebitNote = conditionOtherwiseForDebitNote + " AND dn.customer in" + customerIds;
                conditioncustomerPayment = conditioncustomerPayment + " AND p.customer in" + customerIds;
                conditionCustomerReceipt = conditionCustomerReceipt + " AND customer.id in" + customerIds;
                opnInvCondition += " AND inv.customer in" + customerIds;
                opnDNCondition += " AND dn.customer in" + customerIds;
                opnCNCondition += " AND cn.customer in" + customerIds;
                opnRPCondition += " AND rp.customer in" + customerIds;
                conditionRp += " AND rc.customer in" + customerIds;
            }
            /*===================Advance Search Related Code Start==========================*/
            String invoiceSearchJson = "";
            if (request.containsKey("invoiceSearchJson") && request.get("invoiceSearchJson") != null) {
                invoiceSearchJson = (String) request.get("invoiceSearchJson");
            }
            String makePaymentSearchJson = "";
            if (request.containsKey("makePaymentSearchJson") && request.get("makePaymentSearchJson") != null) {
                makePaymentSearchJson = (String) request.get("makePaymentSearchJson");
            }
            String receiptSearchJson = "";
            if (request.containsKey("receiptSearchJson") && request.get("receiptSearchJson") != null) {
                receiptSearchJson = (String) request.get("receiptSearchJson");
            }
            String cnSearchJson = "";
            if (request.containsKey("cnSearchJson") && request.get("cnSearchJson") != null) {
                cnSearchJson = (String) request.get("cnSearchJson");
            }
            String dnSearchJson = "";
            if (request.containsKey("dnSearchJson") && request.get("dnSearchJson") != null) {
                dnSearchJson = (String) request.get("dnSearchJson");
            }
            boolean isAdvanceSearch = false;
            if (request.containsKey("isAdvanceSearch") && request.get("isAdvanceSearch") != null) {
                isAdvanceSearch = (boolean) request.get("isAdvanceSearch");
            }

            String mySISearchString = "";
            String mySISearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Invoice_ModuleId, false);
                mySISearchString = mySearchJSON.getString("mySearchFilterString");
                mySISearchJoin = mySearchJSON.getString("customjoin");
            }

            String myPaymentMadeSearchString = "";
            String myPaymentMadeSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Make_Payment_ModuleId, false);
                myPaymentMadeSearchString = mySearchJSON.getString("mySearchFilterString");
                myPaymentMadeSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myReceiptPaymentSearchString = "";
            String myReceiptPaymentSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Receive_Payment_ModuleId, false);
                myReceiptPaymentSearchString = mySearchJSON.getString("mySearchFilterString");
                myReceiptPaymentSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myDebitNoteSearchString = "";
            String myDebitNoteSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Debit_Note_ModuleId, false);
                myDebitNoteSearchString = mySearchJSON.getString("mySearchFilterString");
                myDebitNoteSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myCreditNoteSearchString = "";
            String myCreditNoteSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Credit_Note_ModuleId, false);
                myCreditNoteSearchString = mySearchJSON.getString("mySearchFilterString");
                myCreditNoteSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myOpnSISearchString = "";
            String myOpnSISearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Invoice_ModuleId, true);
                myOpnSISearchString = mySearchJSON.getString("mySearchFilterString");
                myOpnSISearchJoin = mySearchJSON.getString("customjoin");
            }

            String myOpnReceiptPaymentSearchString = "";
            String myOpnReceiptPaymentSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Receive_Payment_ModuleId, true);
                myOpnReceiptPaymentSearchString = mySearchJSON.getString("mySearchFilterString");
                myOpnReceiptPaymentSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myOpnDebitNoteSearchString = "";
            String myOpnDebitNoteSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Debit_Note_ModuleId, true);
                myOpnDebitNoteSearchString = mySearchJSON.getString("mySearchFilterString");
                myOpnDebitNoteSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myOpnCreditNoteSearchString = "";
            String myOpnCreditNoteSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Credit_Note_ModuleId, true);
                myOpnCreditNoteSearchString = mySearchJSON.getString("mySearchFilterString");
                myOpnCreditNoteSearchJoin = mySearchJSON.getString("customjoin");
            }

            /*========================Advance Search Related Code End==========================*/

            
            if (isPostDatedCheque) {
                receiptCheque += "INNER JOIN paydetail pd1 ON rc.paydetail = pd1.id INNER JOIN cheque ch1 ON pd1.cheque = ch1.id";
                receiptChequeCondition += " AND DATE(ch1.duedate) <= DATE(now())";
            }

            condition += customerCondition;
            /*
             * Below In select query, inttype is given which is used for sorting
             * records based on transaction type. 1 = Cash Sales Invoice, 2 =
             * sales Invoice, 3 = Payment Made, 4 = Credit Note, 5 = Payment
             * Receioved, 6 = Debit Note
             */

            invoiceQryInv = "SELECT if(inv.cashtransaction = 1, 'Cash Sale','Sales Invoice') AS type,inv.id as invoiceId,inv.invoicenumber,inv.journalentry, "
                    + " inv.memo,inv.currency,jd.amount as Amount,je1.entryno,je1.entrydate,je1.externalcurrencyrate, inv.customer, customer.name as customerName, if(inv.cashtransaction = 1, 1,2) AS inttype "
                    + " ,'FALSE' as withoutinventory,0 as amountDue,jd.account, inv.isopeningbalenceinvoice as isopeningtransaction, inv.isconversionratefromcurrencytobase, inv.customer as CustomerID, customer.acccode as customerCode,inv.isfixedassetleaseinvoice as isLeaseFixedAsset FROM invoice inv "
                    + " INNER JOIN customer  ON inv.customer = customer.id "
                    + " INNER JOIN journalentry je1 ON inv.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON inv.centry = jd.id ";

            receiptQryInv = "SELECT 'Payment Received' AS type,rc.id as invoiceId, rc.receiptnumber as invoicenumber,  "
                    + " rc.journalentry, rc.memo, rc.currency , rc.depositamount as Amount,  je1.entryno, je1.entrydate, "
                    + " je1.externalcurrencyrate, customer.id, customer.name as customerName ,5 AS inttype"
                    + " ,'FALSE' as withoutinventory,0 as amountDue,jd.account, rc.isopeningbalencereceipt as isopeningtransaction, rc.isconversionratefromcurrencytobase, rc.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset FROM receipt rc "
                    + " INNER JOIN customer  ON rc.customer = customer.id "
                    + " INNER JOIN journalentry je1 ON rc.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON jd.id = rc.deposittojedetail ";
            if (showDishonouredPayment) {
                receiptDishonouredQryInv = "SELECT '" + Constants.DISHONOURED_RECEIVE_PAYMENT + "' AS type,rc.id as invoiceId, rc.receiptnumber as invoicenumber,"
                        + " rc.dishonouredchequeje, rc.memo, rc.currency , rc.depositamount as Amount,  je1.entryno, je1.entrydate, "
                        + " je1.externalcurrencyrate, customer.id, customer.name as customerName ,5 AS inttype"
                        + " ,'FALSE' as withoutinventory,0 as amountDue,jd.account, rc.isopeningbalencereceipt as isopeningtransaction, rc.isconversionratefromcurrencytobase, rc.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset FROM receipt rc "
                        + " INNER JOIN customer  ON rc.customer = customer.id "
                        + " INNER JOIN journalentry je1 ON rc.dishonouredchequeje = je1.id "
                        + " INNER JOIN jedetail jd ON jd.id = rc.deposittojedetail ";
            }

            receiptQryInvAdvance = "SELECT 'Payment Received' AS type,rc.advanceid as invoiceId, rc.receiptnumber as invoicenumber, "
                    + "rc.journalentry, rc.memo, rc.currency , rc.advanceamount as Amount,  je1.entryno, je1.entrydate,  je1.externalcurrencyrate, "
                    + "inv.customer, customer.name as customerName ,5 AS inttype ,'FALSE' as withoutinventory,0 as amountDue,jd.account, rc.isopeningbalencereceipt as isopeningtransaction, rc.isconversionratefromcurrencytobase, inv.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset FROM invoice inv  "
                    + "INNER JOIN customer  ON inv.customer = customer.id  "
                    + "INNER JOIN receiptdetails rd ON inv.id = rd.invoice  "
                    + "INNER JOIN receipt rc ON rd.receipt = rc.id  "
                    + "INNER JOIN journalentry je1 ON rc.journalentry = je1.id"
                    + " INNER JOIN jedetail jd ON jd.id = rc.deposittojedetail ";


            receiptQryInvOnlyAdvance = "SELECT 'Payment Received' AS type, rc.id as invoiceId, rc.receiptnumber as invoicenumber, "
                    + "rc.journalentry, rc.memo, rc.currency , rc.depositamount as Amount,je1.entryno, je1.entrydate,  je1.externalcurrencyrate, "
                    + "rc.customer as customer, customer.name as customerName ,5 AS inttype ,'FALSE' as withoutinventory,0 as amountDue,customer.account, rc.isopeningbalencereceipt as isopeningtransaction, rc.isconversionratefromcurrencytobase, rc.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset FROM receipt rc  "
                    + " INNER JOIN customer  ON rc.customer = customer.id  "
                    + " INNER JOIN journalentry je1 ON rc.journalentry = je1.id ";

            customerPaymentQryInv = "SELECT 'Payment Made' AS type, p.id as invoiceId, p.paymentnumber as invoicenumber, "
                    + "p.journalentry, p.memo, p.currency , jd.amount as Amount,je1.entryno, je1.entrydate,  je1.externalcurrencyrate, "
                    + "p.customer as customer, customer.name as customerName ,3 AS inttype ,'FALSE' as withoutinventory,0 as amountDue,jd.account, p.isopeningbalencepayment as isopeningtransaction, p.isconversionratefromcurrencytobase, p.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset FROM payment p  "
                    + " INNER JOIN customer  ON p.customer = customer.id  "
                    + " INNER JOIN journalentry je1 ON p.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON jd.id = p.deposittojedetail ";
            
            if (showDishonouredPayment) {
                customerDishonouredQryInv = "SELECT '" + Constants.DISHONOURED_MAKE_PAYMENT + "' AS type, p.id as invoiceId, p.paymentnumber as invoicenumber, "
                        + "p.journalentry, p.memo, p.currency , jd.amount as Amount,je1.entryno, je1.entrydate,  je1.externalcurrencyrate, "
                        + "p.customer as customer, customer.name as customerName ,3 AS inttype ,'FALSE' as withoutinventory,0 as amountDue,jd.account, p.isopeningbalencepayment as isopeningtransaction, p.isconversionratefromcurrencytobase, p.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset FROM payment p  "
                        + " INNER JOIN customer  ON p.customer = customer.id  "
                        + " INNER JOIN journalentry je1 ON p.dishonouredchequeje = je1.id "
                        + " INNER JOIN jedetail jd ON jd.id = p.deposittojedetail ";
            }

            customerDNReceiptQryInv = "SELECT 'Payment Received' AS type, rc.id as invoiceId, rc.receiptnumber as invoicenumber, "
                    + "rc.journalentry, rc.memo, rc.currency , jd.amount as Amount,je1.entryno, je1.entrydate,  je1.externalcurrencyrate, "
                    + "customer.id as customer, customer.name as customerName , 5 AS inttype ,'FALSE' as withoutinventory,0 as amountDue,jd.account, rc.isopeningbalencereceipt as isopeningtransaction, rc.isconversionratefromcurrencytobase, dn.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset FROM receipt rc  "
                    + "INNER JOIN debitnotepayment dnp ON rc.id = dnp.receiptid "
                    + "INNER JOIN debitnote dn ON dn.id = dnp.dnid "
                    + "INNER JOIN customer  ON dn.customer = customer.id "
                    + "INNER JOIN journalentry je1 ON rc.journalentry = je1.id "
                    + "INNER JOIN jedetail jd ON jd.id = rc.deposittojedetail ";

            creditNoteQryInv = "SELECT 'Credit Note' AS type, cn.id as invoiceId, cn.cnnumber as invoicenumber,  "
                    + " cn.journalentry, cn.memo, cn.currency , jd.amount as Amount,  je1.entryno, je1.entrydate, "
                    + " je1.externalcurrencyrate, inv.customer, customer.name as customerName, 4 AS inttype"
                    + " ,'FALSE' as withoutinventory,cn.cnamountdue as amountDue,jd.account, cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase, inv.customer as CustomerID, customer.acccode as customerCode,inv.isfixedassetleaseinvoice as isLeaseFixedAsset FROM invoice inv "
                    + " INNER JOIN customer  ON inv.customer = customer.id "
                    + " INNER JOIN invoicedetails invd ON inv.id = invd.invoice "
                    + " INNER JOIN cndetails cnd ON invd.id = cnd.invoiceRow "
                    + " INNER JOIN creditnote cn ON cn.id= cnd.creditNote "
                    + " INNER JOIN journalentry je1 ON cn.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON je1.id = jd.journalEntry ";

            creditNoteQryInvOtherwise = "SELECT DISTINCT 'Credit Note' AS type, cn.id as invoiceId, cn.cnnumber as "
                    + " invoicenumber, cn.journalentry, cn.memo, cn.currency , jd.amount as Amount, je1.entryno, je1.entrydate, "
                    + " je1.externalcurrencyrate,cn.customer AS customer, customer.name as customerName, 4 AS inttype , 'FALSE' as withoutinventory,cn.cnamountdue as amountDue,jd.account, "
                    + " cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase, cn.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset from creditnote cn INNER JOIN customer  on customer.id=cn.customer  INNER JOIN journalentry je1 ON "
                    + " cn.journalentry = je1.id  INNER JOIN jedetail jd ON jd.id = cn.centry ";
            //For Debit Note Otherwise of Customers.
            //removed jedetails dependency because Multiple entries were shown in Analysis report.Need to change the customers account by saving the account in details in dn.               
            debitNoteQryInvOtherwise = "SELECT DISTINCT 'Debit Note' AS type, dn.id as invoiceId, dn.dnnumber as "
                    + "invoicenumber, dn.journalentry, dn.memo, dn.currency , dn.dnamount as Amount, je1.entryno, je1.entrydate, "
                    + "je1.externalcurrencyrate,dn.customer AS customer, customer.name as customerName, 6 AS inttype , 'FALSE' as withoutinventory,dn.dnamountdue as amountDue,customer.account as account, "
                    + " dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase, dn.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset from debitnote dn INNER JOIN customer on customer.id=dn.customer  INNER JOIN journalentry je1 ON "
                    + "dn.journalentry = je1.id  INNER JOIN jedetail jd ON jd.journalEntry = je1.id ";

            openingInvQry = "SELECT DISTINCT 'Sales Invoice' AS type,inv.id as invoiceId,inv.invoicenumber,inv.journalentry, "
                    + " inv.memo,inv.currency,inv.originalopeningbalanceamount as Amount,'' AS entryno,inv.creationdate AS entrydate,inv.exchangerateforopeningtransaction AS externalcurrencyrate, inv.customer, customer.name as customerName,2 AS inttype "
                    + " ,'FALSE' as withoutinventory,inv.openingbalanceamountdue as amountDue,inv.account, inv.isopeningbalenceinvoice as isopeningtransaction, inv.isconversionratefromcurrencytobase, inv.customer as CustomerID, customer.acccode as customerCode,inv.isfixedassetleaseinvoice as isLeaseFixedAsset FROM invoice inv "
                    + " INNER JOIN customer  ON inv.customer = customer.id ";

            openingDNQry = "SELECT DISTINCT 'Debit Note' AS type,dn.id as invoiceId,dn.dnnumber AS invoicenumber,dn.journalentry, "
                    + " dn.memo,dn.currency,dn.dnamount as Amount,'' AS entryno,dn.creationdate AS entrydate,dn.exchangerateforopeningtransaction AS externalcurrencyrate, dn.customer, customer.name as customerName,6 AS inttype "
                    + " ,'FALSE' as withoutinventory,dn.openingbalanceamountdue as amountDue,dn.account, dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase, dn.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset FROM debitnote dn "
                    + " INNER JOIN customer  ON dn.customer = customer.id ";

            openingCNQry = "SELECT DISTINCT 'Credit Note' AS type,cn.id as invoiceId,cn.cnnumber AS invoicenumber,cn.journalentry, "
                    + " cn.memo,cn.currency,cn.cnamount as Amount,'' AS entryno,cn.creationdate AS entrydate,cn.exchangerateforopeningtransaction AS externalcurrencyrate, cn.customer, customer.name as customerName,4 AS inttype "
                    + " ,'FALSE' as withoutinventory,cn.openingbalanceamountdue as amountDue,cn.account, cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase, cn.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset FROM creditnote cn "
                    + " INNER JOIN customer  ON cn.customer = customer.id ";

            openingRPQry = "SELECT DISTINCT 'Payment Received' AS type,rp.id as invoiceId,rp.receiptnumber AS invoicenumber,rp.journalentry, "
                    + " rp.memo,rp.currency,rp.depositamount as Amount,'' AS entryno,rp.creationdate AS entrydate,rp.exchangerateforopeningtransaction AS externalcurrencyrate, rp.customer, customer.name as customerName,5 AS inttype "
                    + " ,'FALSE' as withoutinventory,rp.openingbalanceamountdue as amountDue,rp.account, rp.isopeningbalencereceipt as isopeningtransaction, rp.isconversionratefromcurrencytobase, rp.customer as CustomerID, customer.acccode as customerCode,0 as isLeaseFixedAsset FROM receipt rp "
                    + " INNER JOIN customer  ON rp.customer = customer.id ";

            creditNoteOverchargeQry = "SELECT DISTINCT 'Credit Note' AS type, cn.id as invoiceId, cn.cnnumber as invoicenumber,  "
                    + " cn.journalentry, cn.memo, cn.currency , jd.amount as Amount,  je1.entryno, je1.entrydate, "
                    + " je1.externalcurrencyrate, inv.customer, customer.name as customerName, 6 AS inttype"
                    + " ,'FALSE' as withoutinventory,cn.cnamountdue as amountDue,jd.account, cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase, inv.customer as CustomerID, customer.acccode as customerCode,inv.isfixedassetleaseinvoice as isLeaseFixedAsset FROM invoice inv "
                    + " INNER JOIN customer  ON inv.customer = customer.id "
                    + " INNER JOIN invoicedetails invd ON inv.id = invd.invoice "
                    + " INNER JOIN cndetailsgst cnd ON invd.id = cnd.invoicedetail "
                    + " INNER JOIN creditnote cn ON cn.id= cnd.creditNote "
                    + " INNER JOIN journalentry je1 ON cn.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON je1.id = jd.journalEntry ";

            debitNoteUnderchargeQry = "SELECT DISTINCT 'Debit Note' AS type, dn.id as invoiceId, dn.dnnumber as invoicenumber,  "
                    + " dn.journalentry, dn.memo, dn.currency , jd.amount as Amount,  je1.entryno, je1.entrydate, "
                    + " je1.externalcurrencyrate, inv.customer, customer.name as customerName, 5 AS inttype"
                    + " ,'FALSE' as withoutinventory,dn.dnamountdue as amountDue,jd.account, dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase, inv.customer as CustomerID, customer.acccode as customerCode,inv.isfixedassetleaseinvoice as isLeaseFixedAsset FROM invoice inv "
                    + " INNER JOIN customer  ON inv.customer = customer.id "
                    + " INNER JOIN invoicedetails invd ON inv.id = invd.invoice "
                    + " INNER JOIN dndetailsgst dnd ON invd.id = dnd.cidetails "
                    + " INNER JOIN debitnote dn ON dn.id= dnd.debitNote "
                    + " INNER JOIN journalentry je1 ON dn.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON je1.id = jd.journalEntry ";
            
//            }
            //excluding Cash Sales in invoice Query
            if (isPostDatedCheque) {
                receiptQryInv += receiptCheque;
            } 
//            invoiceQry += joincustomer+condition + " AND inv.deleteflag='F' "+mySearchFilterString;
            invoiceQryInv += mySISearchJoin+condition + " AND inv.deleteflag='F' "+mySISearchString;
            if(showDishonouredPayment){
                receiptQryInv += myReceiptPaymentSearchJoin+conditionRp + " AND rc.deleteflag = 'F' "+myReceiptPaymentSearchString;
                receiptDishonouredQryInv += myReceiptPaymentSearchJoin+conditionRp + " AND rc.deleteflag = 'F' AND rc.isdishonouredcheque='T' "+myReceiptPaymentSearchString;
                receiptDishonouredQryInv = " UNION (" + receiptDishonouredQryInv + ")";
                customerDishonouredQryInv += myPaymentMadeSearchJoin+conditioncustomerPayment + " AND p.deleteflag = 'F' "+myPaymentMadeSearchString;
                customerDishonouredQryInv =  " UNION (" + customerDishonouredQryInv + ")";
            }else{
                receiptQryInv += myReceiptPaymentSearchJoin+conditionRp + " AND rc.deleteflag = 'F' AND rc.isdishonouredcheque='F'"+myReceiptPaymentSearchString;
            }
            customerPaymentQryInv += myPaymentMadeSearchJoin+conditioncustomerPayment + " AND p.deleteflag = 'F' "+myPaymentMadeSearchString;
            customerDNReceiptQryInv += myReceiptPaymentSearchJoin+conditionCustomerReceipt + " AND rc.deleteflag = 'F' "+myReceiptPaymentSearchString;
            creditNoteQryInv += myCreditNoteSearchJoin+condition + " AND jd.debit = 'T' AND cn.deleteflag = 'F' AND cn.approvestatuslevel = 11 AND cn.isoldrecord=true"+myCreditNoteSearchString;
            creditNoteQryInvOtherwise += myCreditNoteSearchJoin+conditionOtherwise + " AND otherwise ='T' AND cn.deleteflag='F' AND cn.approvestatuslevel = 11 "+myCreditNoteSearchString;
            debitNoteQryInvOtherwise += myDebitNoteSearchJoin+conditionOtherwiseForDebitNote + " AND otherwise ='T' AND dn.deleteflag='F' AND dn.approvestatuslevel = 11 "+myDebitNoteSearchString;
            creditNoteOverchargeQry += myCreditNoteSearchJoin + condition + " AND jd.debit = 'F' AND jd.account!= '" + discountGivenAccId + "' AND cn.deleteflag = 'F' AND cn.approvestatuslevel = 11 " + myCreditNoteSearchString;
            debitNoteUnderchargeQry += myDebitNoteSearchJoin + condition + " AND jd.debit = 'T' AND jd.account!= '" + discountReceivedAccId + "' AND dn.deleteflag = 'F' AND dn.approvestatuslevel = 11 " + myDebitNoteSearchString;

            receiptQryInvAdvance += myReceiptPaymentSearchJoin+condition + " AND advanceid IN (SELECT id FROM receipt WHERE isadvancepayment = 'T') AND rc.deleteflag = 'F'"+myReceiptPaymentSearchString;
            receiptQryInvOnlyAdvance += myReceiptPaymentSearchJoin+conditionCustomerReceipt + " AND advanceid IS NULL and rc.advanceamount=0 and rc.isadvancepayment='T' AND rc.receipttype=0 AND rc.deleteflag = 'F'"+myReceiptPaymentSearchString;
            openingInvQry += myOpnSISearchJoin+opnInvCondition + " AND inv.deleteflag='F' AND inv.isopeningbalenceinvoice=1 "+myOpnSISearchString;
            openingDNQry += myOpnDebitNoteSearchJoin+opnDNCondition + " AND dn.deleteflag='F' AND dn.isopeningbalencedn=1 "+myOpnDebitNoteSearchString;
            openingCNQry += myOpnCreditNoteSearchJoin+opnCNCondition + " AND cn.deleteflag='F' AND cn.isopeningbalencecn=1 "+myOpnCreditNoteSearchString;
            openingRPQry += myOpnReceiptPaymentSearchJoin+opnRPCondition + " AND rp.deleteflag='F' AND rp.isopeningbalencereceipt=1 "+myOpnReceiptPaymentSearchString;
            
            if (isPostDatedCheque) {
                receiptQryInv += receiptChequeCondition;
            }
            //for invoiceQryInv
            paramsInv.add(companyId);                       
            paramsInv.add(startDate);           
            paramsInv.add(endDate);
             if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, invoiceSearchJson);
            }
            //for receiptQryInv
            paramsInv.add(companyId);
            paramsInv.add(startDate);            
            paramsInv.add(endDate);             
             if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, receiptSearchJson);
            }
            if (showDishonouredPayment) {
                //for receiptDishonouredQryInv
                paramsInv.add(companyId);
                paramsInv.add(startDate);
                paramsInv.add(endDate);
                if (isAdvanceSearch) {
                    StringUtil.insertParamAdvanceSearchString1(paramsInv, receiptSearchJson);
                }
            }
            //for customerPaymentQryInv
            paramsInv.add(companyId);            
            paramsInv.add(startDate);            
            paramsInv.add(endDate);           
             if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, makePaymentSearchJson);
            }
            if (showDishonouredPayment) {
                //for customerDishonouredQryInv
                paramsInv.add(companyId);
                paramsInv.add(startDate);
                paramsInv.add(endDate);
                if (isAdvanceSearch) {
                    StringUtil.insertParamAdvanceSearchString1(paramsInv, makePaymentSearchJson);
                }
            }
           //for creditNoteQryInv
            paramsInv.add(companyId);            
            paramsInv.add(startDate);            
            paramsInv.add(endDate);
             if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, cnSearchJson);
            }
           //for creditNoteQryInvOtherwise
            paramsInv.add(companyId);
            paramsInv.add(startDate);
            paramsInv.add(endDate);
             if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, cnSearchJson);
            }
           //for debitNoteQryInvOtherwise
            paramsInv.add(companyId);
            paramsInv.add(startDate);
            paramsInv.add(endDate);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, dnSearchJson);
            }
            //For openingInvQry
            paramsInv.add(companyId);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, invoiceSearchJson);
            }
            //For openingDNQry             
            paramsInv.add(companyId);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, dnSearchJson);
            }
            //For openingCNQry
            paramsInv.add(companyId);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, cnSearchJson);
            }
            //For openingRPQry
            paramsInv.add(companyId);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, receiptSearchJson);
            }
            //For creditNoteOverchargeQry
            paramsInv.add(companyId);
            paramsInv.add(startDate);
            paramsInv.add(endDate);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, cnSearchJson);
            }
            //For debitNoteUnderchargeQry
            paramsInv.add(companyId);
            paramsInv.add(startDate);
            paramsInv.add(endDate);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(paramsInv, dnSearchJson);
            }
            
            invoiceQryInv += " GROUP BY inv.journalentry ";
            debitNoteQryInvOtherwise += " GROUP BY dn.journalentry ";
            
            String query = " SELECT * FROM ("
                    + " (" + invoiceQryInv + ") "
                    + " UNION "
                    + " (" + receiptQryInv + ") "
                    + receiptDishonouredQryInv
                    + " UNION "
                    + " (" + customerPaymentQryInv + ") "
                    + customerDishonouredQryInv
                    + " UNION "
                    + " (" + creditNoteQryInv + ") "
                    + " UNION "
                    + " (" + creditNoteQryInvOtherwise + ") "
                    + " UNION "
                    + " (" + debitNoteQryInvOtherwise + ") "
                    + " UNION "
                    + " (" + openingInvQry + ") "
                    + " UNION "
                    + " (" + openingDNQry + ") "
                    + " UNION "
                    + " (" + openingCNQry + ") "
                    + " UNION "
                    + " (" + openingRPQry + ") "
                    + " UNION "
                    + " (" + creditNoteOverchargeQry + ") "
                    + " UNION "
                    + " (" + debitNoteUnderchargeQry + ") "
                    + " ) AS t1 " + orderBy;


            list = executeSQLQuery( query, paramsInv.toArray());
            count = list.size();

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", "", list, count);
    }

    @Override
    public KwlReturnObject getCustomerLedgerOpeningTransactionReport(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyId = (String) request.get(Constants.companyKey);

            boolean isLedgerReport = false;
            if (request.get("isLedgerReport") != null) {
                isLedgerReport = (Boolean) request.get("isLedgerReport");
            }
             boolean isSortedOnCreationDate = false;
            if (request.get("isSortedOnCreationDate") != null) {
                isSortedOnCreationDate = (Boolean) request.get("isSortedOnCreationDate");
            }
            String orderBy = "";
            if (isLedgerReport) {
                orderBy = " ORDER BY  entrydate";//customerName,inttype,, entryno 
            }else if (isSortedOnCreationDate) {
                orderBy = " ORDER BY  customerName, entrydate";//customerName,inttype,, entryno 
            } else {
                 if (request.containsKey("dir") && request.containsKey("sort")) {
                    String Col_Name = request.get("sort").toString();
                    String Col_Dir = request.get("dir").toString();
                    orderBy = columSortSOA(Col_Name, Col_Dir,true);

                }else{
                     orderBy = " ORDER BY  customerName, inttype, entrydate ";//entrydate, entryno";
                }
            }

            ArrayList params = new ArrayList();
            ArrayList paramsInv = new ArrayList();
            String openingInvQry = "";
            String openingDNQry = "";
            String openingCNQry = "";
            String openingRPQry = "";
            String customerIds = "";
            String accountID = "";
            String opnInvCondition = " WHERE inv.company = ? ";
            String opnDNCondition = " WHERE dn.company = ? ";
            String opnCNCondition = " WHERE cn.company = ? ";
            String opnRPCondition = " WHERE rp.company = ? ";
            if (request.containsKey("customerIds") && request.get("customerIds") != null) {
                customerIds = (String) request.get("customerIds");
            }

            if (!StringUtil.isNullOrEmpty(customerIds) && !customerIds.contains("All")) {
                 customerIds = AccountingManager.getFilterInString(customerIds);
                opnInvCondition += " AND inv.customer in" + customerIds;
                opnDNCondition += " AND dn.customer in" + customerIds;
                opnCNCondition += " AND cn.customer in" + customerIds;
                opnRPCondition += " AND rp.customer in" + customerIds;
            }
            
            if (request.containsKey("accid") && request.get("accid") != null) {
                accountID = (String) request.get("accid");
            }
            if (!StringUtil.isNullOrEmpty(accountID) && !accountID.contains("All")) {
                accountID = AccountingManager.getFilterInString(accountID);
                opnInvCondition += " AND inv.account in" + accountID;
                opnDNCondition += " AND dn.account in" + accountID;
                opnCNCondition += " AND cn.account in" + accountID;
                opnRPCondition += " AND rp.account in" + accountID;
            }
         
            openingInvQry = "SELECT DISTINCT 'Sales Invoice' AS type,inv.id as invoiceId,inv.invoicenumber,inv.journalentry, "
                    + " inv.memo,inv.currency,inv.originalopeningbalanceamount as Amount, inv.creationdate AS entrydate,inv.exchangerateforopeningtransaction AS externalcurrencyrate, inv.customer, c.name as customerName,2 AS inttype "
                    + " ,'FALSE' as withoutinventory,inv.openingbalanceamountdue as amountDue,inv.account, inv.isopeningbalenceinvoice as isopeningtransaction, inv.isconversionratefromcurrencytobase FROM invoice inv "
                    + " INNER JOIN customer c ON inv.customer = c.id ";

            openingDNQry = "SELECT DISTINCT 'Debit Note' AS type,dn.id as invoiceId,dn.dnnumber AS invoicenumber,dn.journalentry, "
                    + " dn.memo,dn.currency,dn.dnamount as Amount, dn.creationdate AS entrydate,dn.exchangerateforopeningtransaction AS externalcurrencyrate, dn.customer, c.name as customerName,5 AS inttype "
                    + " ,'FALSE' as withoutinventory,dn.openingbalanceamountdue as amountDue,dn.account, dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase FROM debitnote dn "
                    + " INNER JOIN customer c ON dn.customer = c.id ";

            openingCNQry = "SELECT DISTINCT 'Credit Note' AS type,cn.id as invoiceId,cn.cnnumber AS invoicenumber,cn.journalentry, "
                    + " cn.memo,cn.currency,cn.cnamount as Amount, cn.creationdate AS entrydate,cn.exchangerateforopeningtransaction AS externalcurrencyrate, cn.customer, c.name as customerName,3 AS inttype "
                    + " ,'FALSE' as withoutinventory,cn.openingbalanceamountdue as amountDue,cn.account, cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase FROM creditnote cn "
                    + " INNER JOIN customer c ON cn.customer = c.id ";

            openingRPQry = "SELECT DISTINCT 'Payment Received' AS type,rp.id as invoiceId,rp.receiptnumber AS invoicenumber,rp.journalentry, "
                    + " rp.memo,rp.currency,rp.depositamount as Amount, rp.creationdate AS entrydate,rp.exchangerateforopeningtransaction AS externalcurrencyrate, rp.customer, c.name as customerName,4 AS inttype "
                    + " ,'FALSE' as withoutinventory,rp.openingbalanceamountdue as amountDue,rp.account, rp.isopeningbalencereceipt as isopeningtransaction, rp.isconversionratefromcurrencytobase FROM receipt rp "
                    + " INNER JOIN customer c ON rp.customer = c.id ";

            openingInvQry += opnInvCondition + " AND inv.deleteflag='F' AND inv.isopeningbalenceinvoice=1 ";
            openingDNQry += opnDNCondition + " AND dn.deleteflag='F' AND dn.isopeningbalencedn=1 ";
            openingCNQry += opnCNCondition + " AND cn.deleteflag='F' AND cn.isopeningbalencecn=1 ";
            openingRPQry += opnRPCondition + " AND rp.deleteflag='F' AND rp.isopeningbalencereceipt=1 ";

            //For openingInvQry
            paramsInv.add(companyId);
            //For openingDNQry
            paramsInv.add(companyId);
            //For openingCNQry
            paramsInv.add(companyId);
            //For openingRPQry
            paramsInv.add(companyId);
            
            params.addAll(paramsInv);
            
            String query = " SELECT * FROM ("
                    + " (" + openingInvQry + ") "
                    + " UNION "
                    + " (" + openingDNQry + ") "
                    + " UNION "
                    + " (" + openingCNQry + ") "
                    + " UNION "
                    + " (" + openingRPQry + ") "
                    + " ) AS t1 " + orderBy;


            list = executeSQLQuery( query, params.toArray());
            count = list.size();

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getCustomerLedgerOpeningTransactionReport:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", "", list, count);
    }

    @Override
    public KwlReturnObject getVendorLedgerReport(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyId = (String) request.get(Constants.companyKey);
//            String vendorId = (String) request.get("vendorId");
            String withoutinventory = (String) request.get("withoutinventory");
            Date startDate = (Date) request.get("startDate");
            Date endDate = (Date) request.get("endDate");
            boolean isPostDatedCheque = false;
            if (request.get("isPostDatedCheque") != null) {
                isPostDatedCheque = (Boolean) request.get("isPostDatedCheque");
            }
            boolean isLedgerReport = false;
            if (request.get("isLedgerReport") != null) {
                isLedgerReport = (Boolean) request.get("isLedgerReport");
            }
            boolean showDishonouredPayment=false;
            if (request.containsKey("showDishonouredPayment") && request.get("showDishonouredPayment") != null) {
                showDishonouredPayment =(Boolean) request.get("showDishonouredPayment");
            }
            boolean isSortedOnCreationDate = false;
            if (request.get("isSortedOnCreationDate") != null) {
                isSortedOnCreationDate = (Boolean) request.get("isSortedOnCreationDate");
            }
            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyId);
            String cashAccount = pref.getCashAccount().getID();
            String discountReceivedAccountId = pref.getDiscountReceived().getID();
            String orderBy = " ";
            if (isLedgerReport) {
                orderBy = " ORDER BY entrydate";//vendorName,inttype,, entryno  
            } else if (isSortedOnCreationDate) {
                orderBy = " ORDER BY vendorName,entrydate";
            } else {
                if (request.containsKey("dir") && request.containsKey("sort")) {
                    String Col_Name = request.get("sort").toString();
                    String Col_Dir = request.get("dir").toString();
                    orderBy = columSortSOA(Col_Name, Col_Dir, false);

                } else {
                    orderBy = " ORDER BY vendorName,inttype, entrydate, entryno ";
                }
            }

            ArrayList params = new ArrayList();
            String condition = " WHERE gsr.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? ";
            String conditionpayment = " WHERE p.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? and p.paymentwindowtype!=3";
            String conditionOtherwise = " WHERE dn.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? ";
            String conditionOtherwiseForCreditNote = " WHERE cn.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? ";
            String opnVICondition = " WHERE gsr.company = ? ";
            String opnDNCondition = " WHERE dn.company = ? ";
            String opnCNCondition = " WHERE cn.company = ? ";
            String opnMPCondition = " WHERE mp.company = ? ";
            String goodsReceiptQry = "";
            String paymentQry = "";
            String debitNoteQry = "";
            String goodsReceiptQryInv = "";
            String paymentQryInv = "";
            String paymentDishonouredQryInv = "";
            String vendorDishonouredQryInv = "";
            String paymentQryInvAdvance = "";
            String debitNoteQryInv = "";
            String debitNoteQryInvOtherwise = "";
            String creditNoteQryInvOtherwise = "";
            String paymentQryInvOnlyAdvance = "";
            String vendorIds = "";
            String vendorCondition = "";
            String paymentCheque = "";
            String paymentChequeCondition = "";
            String vendorCNPaymentQryInv = "";
            String conditionvendorPayment = " WHERE rc.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? ";
            String conditionVendorReceipt = " WHERE rc.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? ";
            String conditionCustomerReceipt = " WHERE rc.company = ? AND je1.pendingapproval = 0 AND je1.istemplate != 2 AND je1.entrydate >= ? AND je1.entrydate <= ? ";
            String vendorReceiptQry = "";
            String vendorReceiptQryInv = "";
            String openingVIQry = "";
            String openingDNQry = "";
            String openingCNQry = "";
            String openingMPQry = "";
            String debitNoteOverchargeQry = "";
            String creditNoteUnderchargeQry = "";

            if (request.containsKey("vendorIds") && request.get("vendorIds") != null) {
                vendorIds = (String) request.get("vendorIds");
            }
            if (!StringUtil.isNullOrEmpty(vendorIds) && !vendorIds.contains("All")) {
                vendorIds = AccountingManager.getFilterInString(vendorIds);
                vendorCondition = " AND gsr.vendor in" + vendorIds + " ";
                conditionOtherwise = conditionOtherwise + " AND dn.vendor in" + vendorIds + "";
                conditionOtherwiseForCreditNote = conditionOtherwiseForCreditNote + " AND cn.vendor in" + vendorIds + "";
                conditionVendorReceipt = conditionVendorReceipt + " AND rc.vendor in" + vendorIds;
                conditionvendorPayment = conditionvendorPayment + " AND v.id in" + vendorIds;
                opnVICondition += " AND gsr.vendor in" + vendorIds;
                opnDNCondition += " AND dn.vendor in" + vendorIds;
                opnCNCondition += " AND cn.vendor in" + vendorIds;
                opnMPCondition += " AND mp.vendor in" + vendorIds;
                conditionpayment += " AND p.vendor in" + vendorIds;
            }
            if (isPostDatedCheque) {
                paymentCheque += " INNER JOIN paydetail pd1 ON p.paydetail = pd1.id INNER JOIN cheque ch1 ON pd1.cheque = ch1.id";
                paymentChequeCondition += " AND DATE(ch1.duedate) <= DATE(now())";
            }
            condition += vendorCondition;
            /*
             * Below In select query, inttype is given which is used for sorting
             * records based on transaction type. 1 = Cash Purchase Invoice, 2 =
             * Purchase Invoice, 3 = Payment Made, 4 = Credit Note, 5 = Payment
             * Receioved, 6 = Debit Note
             */
            goodsReceiptQry = "SELECT if(jd.account = '" + cashAccount + "', 'Cash Purchase','Purchase Invoice') AS type, gsr.id as invoiceId, gsr.billinggrnumber as invoicenumber,  gsr.journalentry, "
                    + " gsr.memo, gsr.currency, jd.amount as Amount, je1.entryno, je1.entrydate, je1.externalcurrencyrate, gsr.vendor, v.name as vendorName,if(jd.account = '" + cashAccount + "', 1,2) AS inttype  "
                    + "  ,'TRUE' as withoutinventory,0 as amountDue,jd.account, 0 as isopeningtransaction, 0 as isConversionRateFromCurrencyToBase, v.acccode as vendorCode, gsr.vendor as VendorID FROM billinggr gsr "
                    + " INNER JOIN vendor  v ON gsr.vendor = v.id "
                    + " INNER JOIN journalentry je1 ON gsr.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON gsr.centry = jd.id ";
            paymentQry = "SELECT 'Payment Made' AS type, p.id as invoiceId, p.billingpaymentnumber as invoicenumber,  "
                    + " p.journalentry, p.memo, p.currency , pd.amount as Amount,  je1.entryno, je1.entrydate, "
                    + " je1.externalcurrencyrate, gsr.vendor, v.name as vendorName,3 AS inttype "
                    + "  ,'TRUE' as withoutinventory,0 as amountDue,jd.account, 0 as isopeningtransaction, 0 as isConversionRateFromCurrencyToBase, v.acccode as vendorCode, gsr.vendor as VendorID FROM billinggr gsr "
                    + " INNER JOIN vendor  v ON gsr.vendor = v.id "
                    + " INNER JOIN billingpaymentdetails pd ON gsr.id = pd.billinggoodsreceipt "
                    + " INNER JOIN billingpayment p ON pd.billingpayment = p.id "
                    + " INNER JOIN journalentry je1 ON p.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON jd.id = p.deposittojedetail ";
            vendorReceiptQry = "SELECT 'Payment Received' AS type, rc.id as invoiceId, rc.billingreceiptnumber as invoicenumber, "
                    + "rc.journalentry, rc.memo, rc.currency , jd.amount as Amount,je1.entryno, je1.entrydate,  je1.externalcurrencyrate, "
                    + "rc.vendor as vendor, v.name as vendorName , 5 AS inttype ,'TRUE' as withoutinventory,0 as amountDue,jd.account, 0 as isopeningtransaction, 0 as isConversionRateFromCurrencyToBase, v.acccode as vendorCode, rc.vendor as VendorID FROM billingreceipt rc  "
                    + " INNER JOIN vendor v ON rc.vendor = v.id  "
                    + " INNER JOIN journalentry je1 ON rc.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON jd.id = rc.deposittojedetail ";
            debitNoteQry = "SELECT 'Debit Note' AS type, dn.id as invoiceId, dn.dnnumber as invoicenumber,  "
                    + " dn.journalentry, dn.memo, dn.currency , jd.amount as Amount,  je1.entryno, je1.entrydate, "
                    + " je1.externalcurrencyrate, gsr.vendor, v.name as vendorName, 6 AS inttype "
                    + "  ,'TRUE' as withoutinventory,0 as amountDue,jd.account, 0 as isopeningtransaction, 0 as isConversionRateFromCurrencyToBase, v.acccode as vendorCode, gsr.vendor as VendorID FROM billinggr gsr "
                    + " INNER JOIN vendor  v ON gsr.vendor = v.id "
                    + " INNER JOIN billinggrdetails grd ON gsr.id = grd.billinggreceipt "
                    + " INNER JOIN billingdndetails dnd ON grd.id = dnd.goodsReceiptRow "
                    + " INNER JOIN billingdebitnote dn ON dn.id= dnd.debitNote "
                    + " INNER JOIN journalentry je1 ON dn.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON je1.id = jd.journalEntry ";

            goodsReceiptQryInv = " SELECT if(gsr.cashtransaction = 1, 'Cash Purchase','Purchase Invoice') AS type, gsr.id as invoiceId, gsr.grnumber as invoicenumber,  gsr.journalentry, "
                    + " gsr.memo, gsr.currency, jd.amount as Amount, je1.entryno, je1.entrydate, je1.externalcurrencyrate, gsr.vendor, v.name as vendorName,if(gsr.cashtransaction = 1, 1,2) AS inttype  "
                    + " ,'FALSE' as withoutinventory,0 as amountDue,jd.account,gsr.isopeningbalenceinvoice as isopeningtransaction, gsr.isconversionratefromcurrencytobase, v.acccode as vendorCode, gsr.vendor as VendorID FROM goodsreceipt gsr "
                    + " INNER JOIN vendor  v ON gsr.vendor = v.id "
                    + " INNER JOIN journalentry je1 ON gsr.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON gsr.centry = jd.id ";

            paymentQryInv = "SELECT 'Payment Made' AS type, p.id as invoiceId, p.paymentnumber as invoicenumber,  "
                    + " p.journalentry, p.memo, p.currency , p.depositamount as Amount,  je1.entryno, je1.entrydate, "
                    + " je1.externalcurrencyrate, p.vendor, v.name as vendorName,3 AS inttype "
                    + " ,'FALSE' as withoutinventory,0 as amountDue,jd.account, p.isopeningbalencepayment as isopeningtransaction, p.isconversionratefromcurrencytobase, v.acccode as vendorCode,p.vendor as VendorID FROM payment p "
                    + " INNER JOIN vendor  v ON p.vendor = v.id "
                    + " INNER JOIN journalentry je1 ON p.journalentry = je1.id"
                    + " INNER JOIN jedetail jd ON jd.id = p.deposittojedetail ";
            if (showDishonouredPayment) {
                paymentDishonouredQryInv = "SELECT 'Dishonoured Make Payment' AS type, p.id as invoiceId, p.paymentnumber as invoicenumber,  "
                        + " p.dishonouredchequeje, p.memo, p.currency , p.depositamount as Amount,  je1.entryno, je1.entrydate, "
                        + " je1.externalcurrencyrate, p.vendor, v.name as vendorName,3 AS inttype "
                        + " ,'FALSE' as withoutinventory,0 as amountDue,jd.account, p.isopeningbalencepayment as isopeningtransaction, p.isconversionratefromcurrencytobase, v.acccode as vendorCode,p.vendor as VendorID FROM payment p "
                        + " INNER JOIN vendor  v ON p.vendor = v.id "
                        + " INNER JOIN journalentry je1 ON p.dishonouredchequeje = je1.id"
                        + " INNER JOIN jedetail jd ON jd.id = p.deposittojedetail ";
            }
            vendorReceiptQryInv = "SELECT 'Payment Received' AS type, rc.id as invoiceId, rc.receiptnumber as invoicenumber, "
                    + "rc.journalentry, rc.memo, rc.currency , jd.amount as Amount,je1.entryno, je1.entrydate,  je1.externalcurrencyrate, "
                    + "rc.vendor as vendor, v.name as vendorName , 5 AS inttype ,'FALSE' as withoutinventory,0 as amountDue,jd.account, rc.isopeningbalencereceipt as isopeningtransaction, rc.isconversionratefromcurrencytobase, v.acccode as vendorCode, rc.vendor  as VendorID FROM receipt rc  "
                    + " INNER JOIN vendor v ON rc.vendor = v.id  "
                    + " INNER JOIN journalentry je1 ON rc.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON jd.id = rc.deposittojedetail ";
            if (showDishonouredPayment) {
                vendorDishonouredQryInv = "SELECT 'Dishonoured Receive Payment' AS type, rc.id as invoiceId, rc.receiptnumber as invoicenumber, "
                        + "rc.journalentry, rc.memo, rc.currency , jd.amount as Amount,je1.entryno, je1.entrydate,  je1.externalcurrencyrate, "
                        + "rc.vendor as vendor, v.name as vendorName , 5 AS inttype ,'FALSE' as withoutinventory,0 as amountDue,jd.account, rc.isopeningbalencereceipt as isopeningtransaction, rc.isconversionratefromcurrencytobase, v.acccode as vendorCode, rc.vendor  as VendorID FROM receipt rc  "
                        + " INNER JOIN vendor v ON rc.vendor = v.id  "
                        + " INNER JOIN journalentry je1 ON rc.dishonouredchequeje = je1.id "
                        + " INNER JOIN jedetail jd ON jd.id = rc.deposittojedetail ";
            }
            vendorCNPaymentQryInv = "SELECT 'Payment Made' AS type, rc.id as invoiceId, rc.paymentnumber as invoicenumber, "
                    + "rc.journalentry, rc.memo, rc.currency , jd.amount as Amount,je1.entryno, je1.entrydate,  je1.externalcurrencyrate, "
                    + "v.id as vendor, v.name as vendorName ,3 AS inttype ,'FALSE' as withoutinventory,0 as amountDue,jd.account, rc.isopeningbalencepayment as isopeningtransaction, rc.isconversionratefromcurrencytobase, v.acccode as vendorCode, rc.vendor as VendorID FROM payment rc  "
                    + "INNER JOIN creditnotpayment cnp ON rc.id = cnp.paymentid "
                    + "INNER JOIN creditnote cn ON cn.id = cnp.cnid "
                    + "INNER JOIN vendor v ON cn.vendor = v.id "
                    + "INNER JOIN journalentry je1 ON rc.journalentry = je1.id "
                    + "INNER JOIN jedetail jd ON jd.id = rc.deposittojedetail ";

            paymentQryInvAdvance = "SELECT 'Payment Made' AS type, p.advanceid as invoiceId, p.paymentnumber as invoicenumber,  "
                    + " p.journalentry, p.memo, p.currency , p.advanceamount as Amount,  je1.entryno, je1.entrydate, "
                    + " je1.externalcurrencyrate, gsr.vendor, v.name as vendorName,3 AS inttype "
                    + " , 'FALSE' as withoutinventory,0 as amountDue,jd.account, p.isopeningbalencepayment as isopeningtransaction, p.isconversionratefromcurrencytobase, v.acccode as vendorCode, gsr.vendor as VendorID FROM goodsreceipt gsr "
                    + " INNER JOIN vendor  v ON gsr.vendor = v.id "
                    + " INNER JOIN paymentdetail pd ON gsr.id = pd.goodsReceipt "
                    + " INNER JOIN payment p ON pd.payment = p.id "
                    + " INNER JOIN journalentry je1 ON p.journalentry = je1.id"
                    + " INNER JOIN jedetail jd ON jd.id = p.deposittojedetail ";

            paymentQryInvOnlyAdvance = "SELECT 'Payment Made' AS type, rc.id as invoiceId, rc.paymentnumber as invoicenumber, "
                    + "rc.journalentry, rc.memo, rc.currency , rc.depositamount as Amount,je1.entryno, je1.entrydate,  je1.externalcurrencyrate, "
                    + "rc.vendor as vendor, v.name as vendorName ,3 AS inttype ,'FALSE' as withoutinventory,0 as amountDue,v.account, rc.isopeningbalencepayment as isopeningtransaction, rc.isconversionratefromcurrencytobase, v.acccode as vendorCode, gsr.vendor as VendorID FROM payment rc  "
                    + "INNER JOIN vendor v ON rc.vendor = v.id "
                    + "INNER JOIN journalentry je1 ON rc.journalentry = je1.id ";


            debitNoteQryInv = "SELECT 'Debit Note' AS type, dn.id as invoiceId, dn.dnnumber as invoicenumber, "
                    + " dn.journalentry, dn.memo, dn.currency , jd.amount as Amount,  je1.entryno, je1.entrydate, "
                    + " je1.externalcurrencyrate, gsr.vendor, v.name as vendorName,6 AS inttype "
                    + " ,'FALSE' as withoutinventory,dn.dnamountdue as amountDue,jd.account, dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase, v.acccode as vendorCode, gsr.vendor as VendorID FROM goodsreceipt gsr "
                    + " INNER JOIN vendor  v ON gsr.vendor = v.id "
                    + " INNER JOIN grdetails grd ON gsr.id = grd.goodsreceipt "
                    + " INNER JOIN dndetails dnd ON grd.id = dnd.goodsReceiptRow "
                    + " INNER JOIN debitnote dn ON dn.id= dnd.debitNote "
                    + " INNER JOIN journalentry je1 ON dn.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON je1.id = jd.journalEntry ";

            debitNoteQryInvOtherwise = "SELECT DISTINCT 'Debit Note' AS type, dn.id as invoiceId, dn.dnnumber as invoicenumber,  "
                    + "dn.journalentry, dn.memo, dn.currency , jd.amount as Amount,  je1.entryno, je1.entrydate,  je1.externalcurrencyrate,"
                    + "dn.vendor AS vendor, v.name as vendorName,6 AS inttype  , 'FALSE' as withoutinventory,dn.dnamountdue as amountDue,jd.account,dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase, v.acccode as vendorCode, dn.vendor as VendorID FROM debitnote dn  INNER JOIN vendor "
                    + "v ON dn.vendor = v.id  INNER JOIN journalentry je1 ON dn.journalentry = je1.id  INNER JOIN jedetail jd ON jd.id = dn.centry";
            //For credit Note Otherwise of Vendors.
            //removed jedetails dependency because Multiple entries were shown in Analysis report.Need to change the customers account by saving the account in details in cn.            
            creditNoteQryInvOtherwise = "SELECT DISTINCT 'Credit Note' AS type, cn.id as invoiceId, cn.cnnumber as invoicenumber,  "
                    + "cn.journalentry, cn.memo, cn.currency , cn.cnamount as Amount,  je1.entryno, je1.entrydate,  je1.externalcurrencyrate,"
                    + "cn.vendor AS vendor, v.name as vendorName,4 AS inttype  , 'FALSE' as withoutinventory,cn.cnamountdue as amountDue,v.account as account, cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase, v.acccode as vendorCode, cn.vendor as VendorID FROM creditnote cn  INNER JOIN vendor "
                    + "v ON cn.vendor = v.id  INNER JOIN journalentry je1 ON cn.journalentry = je1.id INNER JOIN jedetail jd ON jd.journalEntry = je1.id ";

            openingVIQry = "SELECT DISTINCT 'Purchase Invoice' AS type,gsr.id as invoiceId,gsr.grnumber AS invoicenumber,gsr.journalentry, "
                    + " gsr.memo,gsr.currency,gsr.originalopeningbalanceamount as Amount,'' AS entryno,gsr.creationdate AS entrydate,gsr.exchangerateforopeningtransaction AS externalcurrencyrate, gsr.vendor, v.name as vendorName,2 AS inttype "
                    + " ,'FALSE' as withoutinventory,gsr.openingbalanceamountdue as amountDue,gsr.account, gsr.isopeningbalenceinvoice as isopeningtransaction, gsr.isconversionratefromcurrencytobase, v.acccode as vendorCode, gsr.vendor as VendorID FROM goodsreceipt gsr "
                    + " INNER JOIN vendor v ON gsr.vendor = v.id ";

            openingDNQry = "SELECT DISTINCT 'Debit Note' AS type,dn.id as invoiceId,dn.dnnumber AS invoicenumber,dn.journalentry, "
                    + " dn.memo,dn.currency,dn.dnamount as Amount,'' AS entryno,dn.creationdate AS entrydate,dn.exchangerateforopeningtransaction AS externalcurrencyrate, dn.vendor, v.name as vendorName,6 AS inttype "
                    + " ,'FALSE' as withoutinventory,dn.openingbalanceamountdue as amountDue,dn.account, dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase, v.acccode as vendorCode, dn.vendor as VendorID FROM debitnote dn "
                    + " INNER JOIN vendor v ON dn.vendor = v.id ";

            openingCNQry = "SELECT DISTINCT 'Credit Note' AS type,cn.id as invoiceId,cn.cnnumber AS invoicenumber,cn.journalentry, "
                    + " cn.memo,cn.currency,cn.cnamount as Amount,'' AS entryno,cn.creationdate AS entrydate,cn.exchangerateforopeningtransaction AS externalcurrencyrate, cn.vendor, v.name as vendorName,4 AS inttype "
                    + " ,'FALSE' as withoutinventory,cn.openingbalanceamountdue as amountDue,cn.account, cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase, v.acccode as vendorCode, cn.vendor as VendorID FROM creditnote cn "
                    + " INNER JOIN vendor v ON cn.vendor = v.id ";

            openingMPQry = "SELECT DISTINCT 'Payment Made' AS type,mp.id as invoiceId,mp.paymentnumber AS invoicenumber,mp.journalentry, "
                    + " mp.memo,mp.currency,mp.depositamount as Amount,'' AS entryno,mp.creationdate AS entrydate,mp.exchangerateforopeningtransaction AS externalcurrencyrate, mp.vendor, v.name as vendorName,3 AS inttype "
                    + " ,'FALSE' as withoutinventory,mp.openingbalanceamountdue as amountDue,mp.account, mp.isopeningbalencepayment as isopeningtransaction, mp.isconversionratefromcurrencytobase, v.acccode as vendorCode, mp.vendor as VendorID FROM payment mp "
                    + " INNER JOIN vendor v ON mp.vendor = v.id ";
            
            debitNoteOverchargeQry = "SELECT DISTINCT 'Debit Note' AS type, dn.id as invoiceId, dn.dnnumber as invoicenumber, "
                    + " dn.journalentry, dn.memo, dn.currency , jd.amount as Amount,  je1.entryno, je1.entrydate, "
                    + " je1.externalcurrencyrate, gsr.vendor, v.name as vendorName,6 AS inttype "
                    + " ,'FALSE' as withoutinventory,dn.dnamountdue as amountDue,jd.account, dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase, v.acccode as vendorCode, gsr.vendor as VendorID FROM goodsreceipt gsr "
                    + " INNER JOIN vendor  v ON gsr.vendor = v.id "
                    + " INNER JOIN grdetails grd ON gsr.id = grd.goodsreceipt "
                    + " INNER JOIN dndetailsgst dnd ON grd.id = dnd.grdetail "
                    + " INNER JOIN debitnote dn ON dn.id= dnd.debitNote "
                    + " INNER JOIN journalentry je1 ON dn.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON je1.id = jd.journalEntry ";

            creditNoteUnderchargeQry = "SELECT DISTINCT 'Credit Note' AS type, cn.id as invoiceId, cn.cnnumber as invoicenumber, "
                    + " cn.journalentry, cn.memo, cn.currency , jd.amount as Amount, je1.entryno, je1.entrydate, je1.externalcurrencyrate,"
                    + " cn.vendor AS vendor, v.name as vendorName, 5 AS inttype "
                    + " , 'FALSE' as withoutinventory,cn.cnamountdue as amountDue,v.account as account, cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase, v.acccode as vendorCode, cn.vendor as VendorID FROM goodsreceipt gsr "
                    + " INNER JOIN vendor v ON gsr.vendor = v.id "
                    + " INNER JOIN grdetails grd ON gsr.id = grd.goodsreceipt "
                    + " INNER JOIN cndetailsgst cnd ON grd.id = cnd.videtails "
                    + " INNER JOIN creditnote cn ON cn.id= cnd.creditnote "
                    + " INNER JOIN journalentry je1 ON cn.journalentry = je1.id "
                    + " INNER JOIN jedetail jd ON je1.id = jd.journalEntry ";
            
            /*===================Advance Search Related Code Start==========================*/
            String invoiceSearchJson = "";
            if(request.containsKey("invoiceSearchJson") && request.get("invoiceSearchJson")!=null){
                invoiceSearchJson = (String) request.get("invoiceSearchJson");
            }
            String makePaymentSearchJson = "";
            if(request.containsKey("makePaymentSearchJson") && request.get("makePaymentSearchJson")!=null){
                makePaymentSearchJson = (String) request.get("makePaymentSearchJson");
            }
            String receiptSearchJson = "";
            if(request.containsKey("receiptSearchJson") && request.get("receiptSearchJson")!=null){
                receiptSearchJson = (String) request.get("receiptSearchJson");
            }
            String cnSearchJson = "";
            if(request.containsKey("cnSearchJson") && request.get("cnSearchJson")!=null){
                cnSearchJson = (String) request.get("cnSearchJson");
            }
            String dnSearchJson = "";
            if(request.containsKey("dnSearchJson") && request.get("dnSearchJson")!=null){
                dnSearchJson = (String) request.get("dnSearchJson");
            }
             boolean isAdvanceSearch = false;
            if(request.containsKey("isAdvanceSearch") && request.get("isAdvanceSearch")!=null){
                isAdvanceSearch = (boolean) request.get("isAdvanceSearch");
            }

            String myPISearchString = "";
            String myPISearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Vendor_Invoice_ModuleId, false);
                myPISearchString = mySearchJSON.getString("mySearchFilterString");
                myPISearchJoin = mySearchJSON.getString("customjoin");
            }

            String myPaymentMadeSearchString = "";
            String myPaymentMadeSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Make_Payment_ModuleId, false);
                myPaymentMadeSearchString = mySearchJSON.getString("mySearchFilterString");
                myPaymentMadeSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myVendorReceiptSearchString = "";
            String myVendorReceiptSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Receive_Payment_ModuleId, false);
                myVendorReceiptSearchString = mySearchJSON.getString("mySearchFilterString");
                myVendorReceiptSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myDebitNoteSearchString = "";
            String myDebitNoteSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Debit_Note_ModuleId, false);
                myDebitNoteSearchString = mySearchJSON.getString("mySearchFilterString");
                myDebitNoteSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myCreditNoteSearchString = "";
            String myCreditNoteSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Credit_Note_ModuleId, false);
                myCreditNoteSearchString = mySearchJSON.getString("mySearchFilterString");
                myCreditNoteSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myOpnPISearchString = "";
            String myOpnPISearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Vendor_Invoice_ModuleId, true);
                myOpnPISearchString = mySearchJSON.getString("mySearchFilterString");
                myOpnPISearchJoin = mySearchJSON.getString("customjoin");
            }

            String myOpnPaymentMadeSearchString = "";
            String myOpnPaymentMadeSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Make_Payment_ModuleId, true);
                myOpnPaymentMadeSearchString = mySearchJSON.getString("mySearchFilterString");
                myOpnPaymentMadeSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myOpnDebitNoteSearchString = "";
            String myOpnDebitNoteSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Debit_Note_ModuleId, true);
                myOpnDebitNoteSearchString = mySearchJSON.getString("mySearchFilterString");
                myOpnDebitNoteSearchJoin = mySearchJSON.getString("customjoin");
            }

            String myOpnCreditNoteSearchString = "";
            String myOpnCreditNoteSearchJoin = "";
            if (isAdvanceSearch) {
                JSONObject mySearchJSON = getCustomSearchString(request, Constants.Acc_Credit_Note_ModuleId, true);
                myOpnCreditNoteSearchString = mySearchJSON.getString("mySearchFilterString");
                myOpnCreditNoteSearchJoin = mySearchJSON.getString("customjoin");
            }

            /*========================Advance Search Related Code End==========================*/
            
            //excluding Cash Purchase in Goods Receipt Query
            if (isPostDatedCheque) {
                paymentQry += paymentCheque;
                paymentQryInv += paymentCheque;
            }
            /*
             * below are query on billing tables which are not in use now need
             * to remove
             */
            goodsReceiptQry +=  condition + " AND gsr.deleteflag='F' " ;
            paymentQry +=  condition + " AND p.deleteflag = 'F' " ;
            vendorReceiptQry +=  conditionVendorReceipt + " AND rc.deleteflag = 'F' " ;
            debitNoteQry +=  condition + " AND jd.debit = 'F' AND dn.deleteflag = 'F' " ;
            /*
             * Billing table query ended
             */

            goodsReceiptQryInv += myPISearchJoin + condition + " AND gsr.deleteflag='F' " + myPISearchString;
            vendorReceiptQryInv += myVendorReceiptSearchJoin + conditionVendorReceipt + " AND rc.deleteflag = 'F' " + myVendorReceiptSearchString;
            if (showDishonouredPayment) {
                vendorDishonouredQryInv += myVendorReceiptSearchJoin + conditionVendorReceipt + " AND rc.deleteflag = 'F' " + myVendorReceiptSearchString;
                vendorDishonouredQryInv =" UNION (" + vendorDishonouredQryInv + ") ";
                paymentQryInv += myPaymentMadeSearchJoin + conditionpayment + " AND p.deleteflag = 'F' " + myPaymentMadeSearchString;
                paymentDishonouredQryInv += myPaymentMadeSearchJoin + conditionpayment + " AND p.deleteflag = 'F' AND p.isdishonouredcheque='T' " + myPaymentMadeSearchString;
                paymentDishonouredQryInv = " UNION (" + paymentDishonouredQryInv + ") ";
            }else{
                paymentQryInv += myPaymentMadeSearchJoin + conditionpayment + " AND p.deleteflag = 'F' AND p.isdishonouredcheque='F' " + myPaymentMadeSearchString;
            }
            debitNoteQryInv += myDebitNoteSearchJoin + condition + " AND jd.debit = 'F' AND dn.deleteflag = 'F' AND dn.approvestatuslevel = 11 AND dn.isoldrecord=true " + myDebitNoteSearchString;
            debitNoteQryInvOtherwise += myDebitNoteSearchJoin + conditionOtherwise + " AND jd.debit = 'T' AND otherwise ='T' AND dn.deleteflag = 'F' AND dn.approvestatuslevel = 11 " + myDebitNoteSearchString;
            creditNoteQryInvOtherwise += myCreditNoteSearchJoin + conditionOtherwiseForCreditNote + " AND otherwise ='T' AND cn.deleteflag = 'F' AND cn.approvestatuslevel = 11 " + myCreditNoteSearchString;
            debitNoteOverchargeQry += myDebitNoteSearchJoin + condition + " AND jd.debit = 'T' AND jd.account!= '" + discountReceivedAccountId + "' AND dn.deleteflag = 'F' AND dn.approvestatuslevel = 11 " + myDebitNoteSearchString;
            creditNoteUnderchargeQry += myCreditNoteSearchJoin + condition + " AND jd.debit = 'F' AND jd.account!= '" + discountReceivedAccountId + "' AND cn.deleteflag = 'F' AND cn.approvestatuslevel = 11 " + myCreditNoteSearchString;
            
            openingVIQry += myOpnPISearchJoin + opnVICondition + " AND gsr.deleteflag='F' AND gsr.isopeningbalenceinvoice= 1 " + myOpnPISearchString;
            openingDNQry += myOpnDebitNoteSearchJoin + opnDNCondition + " AND dn.deleteflag='F' AND dn.isopeningbalencedn= 1 " + myOpnDebitNoteSearchString;
            openingCNQry += myOpnCreditNoteSearchJoin + opnCNCondition + " AND cn.deleteflag='F' AND cn.isopeningbalencecn= 1 " + myOpnCreditNoteSearchString;
            openingMPQry += myOpnPaymentMadeSearchJoin + opnMPCondition + " AND mp.deleteflag='F' AND mp.isopeningbalencepayment= 1 " + myOpnPaymentMadeSearchString;
            if (isPostDatedCheque) {
                paymentQry += paymentChequeCondition;
                paymentQryInv += paymentChequeCondition;
            }

            // For goodsReceiptQry
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);
           
            // For paymentQry
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);
           
            // For vendorReceiptQry
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);

            // For debitNoteQry
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);
           
            // For goodsReceiptQryInv
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, invoiceSearchJson);
            }
            // For paymentQryInv
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, makePaymentSearchJson);
            }
            if (showDishonouredPayment) {
                // For paymentDishonouredQryInv
                params.add(companyId);
                params.add(startDate);
                params.add(endDate);
                if (isAdvanceSearch) {
                    StringUtil.insertParamAdvanceSearchString1(params, makePaymentSearchJson);
                }
            }
            // For vendorReceiptQryInv
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, receiptSearchJson);
            }
            
            if (showDishonouredPayment) {
                // For VendorReceiptDishonouredQryInv
                params.add(companyId);
                params.add(startDate);
                params.add(endDate);
                if (isAdvanceSearch) {
                    StringUtil.insertParamAdvanceSearchString1(params, receiptSearchJson);
                }
            }
            // For debitNoteQryInv
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, dnSearchJson);
            }
            // For debitNoteQryInvOtherwise
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, dnSearchJson);
            }
            // For creditNoteQryInvOtherwise
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, cnSearchJson);
            }
            //For openingVIQry
            params.add(companyId);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, invoiceSearchJson);
            }
            //For openingDNQry
            params.add(companyId);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, dnSearchJson);
            }
            //For openingCNQry
            params.add(companyId);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, cnSearchJson);
            }
            //For openingMPQry
            params.add(companyId);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, makePaymentSearchJson);
            }
            // For debitNoteOverchargeQry
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, dnSearchJson);
            }
            // For creditNoteUnderchargeQry
            params.add(companyId);
            params.add(startDate);
            params.add(endDate);
            if (isAdvanceSearch) {
                StringUtil.insertParamAdvanceSearchString1(params, cnSearchJson);
            }

            paymentQryInv += " GROUP BY p.journalentry ";
            goodsReceiptQryInv += " GROUP BY gsr.journalentry ";
            creditNoteQryInvOtherwise += " GROUP BY cn.journalentry ";

            String query = " SELECT * FROM ("
                    + " (" + goodsReceiptQry + ") "
                    + " UNION "
                    + " (" + paymentQry + ") "
                    + " UNION "
                    + " (" + vendorReceiptQry + ") "
                    + " UNION "
                    + " (" + debitNoteQry + ") "
                    + " UNION "
                    + " (" + goodsReceiptQryInv + ") "
                    + " UNION "
                    + " (" + paymentQryInv + ") "
                    + paymentDishonouredQryInv
                    + " UNION "
                    + " (" + vendorReceiptQryInv + ") "
                    + vendorDishonouredQryInv
                    + " UNION "
                    + " (" + debitNoteQryInv + ") "
                    + " UNION "
                    + " (" + debitNoteQryInvOtherwise + ") "
                    + " UNION "
                    + " (" + creditNoteQryInvOtherwise + ") "
                    + " UNION "
                    + " (" + openingVIQry + ") "
                    + " UNION "
                    + " (" + openingDNQry + ") "
                    + " UNION "
                    + " (" + openingCNQry + ") "
                    + " UNION "
                    + " (" + openingMPQry + ") "
                    + " UNION "
                    + " (" + debitNoteOverchargeQry + ") "
                    + " UNION "
                    + " (" + creditNoteUnderchargeQry + ") "
                    + " ) AS t1 " + orderBy;


            list = executeSQLQuery(query, params.toArray());
            count = list.size();

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", "", list, count);
    }

    private JSONObject getCustomSearchString(HashMap<String, Object> request, int moduleid, boolean isOpeningTransaction) throws JSONException {
        String searchDefaultFieldSQL = "";
        String mySearchFilterString = "";
        String searchString = getSearchStringByModuleID(request, moduleid);

        String filterConjuctionCriteria = request.get(Constants.Filter_Criteria).toString();
        JSONObject serachJobj = new JSONObject(searchString);

        JSONArray customSearchFieldArray = new JSONArray();
        JSONArray defaultSearchFieldArray = new JSONArray();
        StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);

        String joinString = "";
        if (customSearchFieldArray.length() > 0) {
            request.put(Constants.Searchjson, searchString);
            request.put(Constants.appendCase, "and");
            request.put("filterConjuctionCriteria", filterConjuctionCriteria);
            request.put(Constants.moduleid, moduleid);
            if (isOpeningTransaction) {
                request.put("isOpeningBalance", true);
            }

            mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
            if (isOpeningTransaction) {
                if (mySearchFilterString.contains("OpeningBalanceVendorInvoiceCustomData") || mySearchFilterString.contains("openingbalancevendorinvoicecustomdata")
                        || mySearchFilterString.contains("OpeningBalanceInvoiceCustomData") || mySearchFilterString.contains("openingbalanceinvoicecustomdata")
                        || mySearchFilterString.contains("OpeningBalanceMakePaymentCustomData") || mySearchFilterString.contains("openingbalancemakepaymentcustomdata")
                        || mySearchFilterString.contains("OpeningBalanceReceiptCustomData") || mySearchFilterString.contains("openingbalancereceiptcustomdata")
                        || mySearchFilterString.contains("OpeningBalanceDebitNoteCustomData") || mySearchFilterString.contains("openingbalancedebitnotecustomdata")
                        || mySearchFilterString.contains("OpeningBalanceCreditNoteCustomData") || mySearchFilterString.contains("openingbalancecreditnotecustomdata")
                        || mySearchFilterString.contains("AccJEDetailCustomData") || mySearchFilterString.contains("AccJEDetailsProductCustomData") || mySearchFilterString.contains("accjecustomdata")) {
                    joinString += getOBCustomDataJoinStringByModuleID(moduleid);
                    mySearchFilterString = getOBReplacedMySearchStringByModuleID(mySearchFilterString, moduleid);
                }
            } else {
                if (mySearchFilterString.contains("accjecustomdata") || mySearchFilterString.contains("AccJECustomData")) {
                    joinString += getAccJECustomDataJoinStringByModuleID(moduleid);
                    mySearchFilterString = mySearchFilterString.replaceAll("AccJECustomData", "accjecustomdata");//    
                }
                if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                    joinString += getAccJAccJEDetailCustomDataJoinStringByModuleID(moduleid);
                    mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "accjedetailcustomdata");//    
                }
            }
            if (mySearchFilterString.contains("VendorCustomData")) {
                mySearchFilterString = mySearchFilterString.replaceAll("VendorCustomData", "vendorcustomdata");
                joinString += " left join vendorcustomdata  on vendorcustomdata.vendorId=v.id ";
            }
            if (mySearchFilterString.contains("CustomerCustomData")) {
                mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "customercustomdata");
                joinString += " left join customercustomdata  on customercustomdata.customerId=customer.id ";
            }
        }
        if (defaultSearchFieldArray.length() > 0) {
            request.put("filterConjuctionCriteria", filterConjuctionCriteria);
            for (int arrayItr = 0; arrayItr < defaultSearchFieldArray.length(); arrayItr++) {
                JSONObject jObj = defaultSearchFieldArray.getJSONObject(arrayItr);
                if (jObj.optBoolean("isRangeSearchField", false)) {
                    String headerTableName = "";
                    String headercolumnName = "";
                    String xtype = "";
                    try {
                        String fieldId = jObj.getString("column");
                        String query = "from DefaultHeader where id=?";
                        List<DefaultHeader> headerlist = executeQuery(query, fieldId);
                        if (headerlist.size() > 0) {
                            DefaultHeader header = headerlist.get(0);
                            xtype = header.getXtype();
                            headerTableName = header.getDbTableName();
                            headercolumnName = header.getDbcolumnname();
                        }
                        if (StringUtil.isNullOrEmptyWithTrim(searchDefaultFieldSQL)) {
                            searchDefaultFieldSQL += " AND (" + headerTableName + "." + headercolumnName + " ";
                        } else {
                            searchDefaultFieldSQL += filterConjuctionCriteria + " " + headerTableName + "." + headercolumnName;
                        }
                        searchDefaultFieldSQL += StringUtil.getStringRangeFilterForAdvanceSearch(jObj, filterConjuctionCriteria) + " ";

                    } catch (Exception ex) {
                        Logger.getLogger(StringUtil.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
            if (!StringUtil.isNullOrEmptyWithTrim(searchDefaultFieldSQL)) {
                searchDefaultFieldSQL += ") ";
            }
        }

        mySearchFilterString = " "+StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
        JSONObject returnJOBJ = new JSONObject();
        returnJOBJ.put("customjoin", joinString);
        returnJOBJ.put("mySearchFilterString", mySearchFilterString);
        return returnJOBJ;
    }

    private String getOBReplacedMySearchStringByModuleID(String mySearchFilterString, int moduleID) {
        if (moduleID == Constants.Acc_Vendor_Invoice_ModuleId) {
            mySearchFilterString = mySearchFilterString.replaceAll("OpeningBalanceVendorInvoiceCustomData", "openingbalancevendorinvoicecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "openingbalancevendorinvoicecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "openingbalancevendorinvoicecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("accjecustomdata", "openingbalancevendorinvoicecustomdata");
        } else if (moduleID == Constants.Acc_Invoice_ModuleId) {
            mySearchFilterString = mySearchFilterString.replaceAll("OpeningBalanceInvoiceCustomData", "openingbalanceinvoicecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "openingbalanceinvoicecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "openingbalanceinvoicecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("accjecustomdata", "openingbalanceinvoicecustomdata");
        } else if (moduleID == Constants.Acc_Make_Payment_ModuleId) {
            mySearchFilterString = mySearchFilterString.replaceAll("OpeningBalanceMakePaymentCustomData", "openingbalancemakepaymentcustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "openingbalancemakepaymentcustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "openingbalancemakepaymentcustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("accjecustomdata", "openingbalancemakepaymentcustomdata");
        } else if (moduleID == Constants.Acc_Receive_Payment_ModuleId) {
            mySearchFilterString = mySearchFilterString.replaceAll("OpeningBalanceReceiptCustomData", "openingbalancereceiptcustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "openingbalancereceiptcustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "openingbalancereceiptcustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("accjecustomdata", "openingbalancereceiptcustomdata");
        } else if (moduleID == Constants.Acc_Debit_Note_ModuleId) {
            mySearchFilterString = mySearchFilterString.replaceAll("OpeningBalanceDebitNoteCustomData", "openingbalancedebitnotecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "openingbalancedebitnotecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "openingbalancedebitnotecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("accjecustomdata", "openingbalancedebitnotecustomdata");
        } else if (moduleID == Constants.Acc_Credit_Note_ModuleId) {
            mySearchFilterString = mySearchFilterString.replaceAll("OpeningBalanceCreditNoteCustomData", "openingbalancecreditnotecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "openingbalancecreditnotecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "openingbalancecreditnotecustomdata");
            mySearchFilterString = mySearchFilterString.replaceAll("accjecustomdata", "openingbalancecreditnotecustomdata");
        }
        return mySearchFilterString;
    }

    private String getOBCustomDataJoinStringByModuleID(int moduleID) {
        String joinString = "";
        if (moduleID == Constants.Acc_Vendor_Invoice_ModuleId) {
            joinString = " INNER JOIN openingbalancevendorinvoicecustomdata on openingbalancevendorinvoicecustomdata.openingbalancevendorinvoiceid=gsr.id ";
        } else if (moduleID == Constants.Acc_Invoice_ModuleId) {
            joinString = " INNER JOIN openingbalanceinvoicecustomdata on openingbalanceinvoicecustomdata.openingbalanceinvoiceid=inv.id ";
        } else if (moduleID == Constants.Acc_Make_Payment_ModuleId) {
            joinString = " INNER JOIN openingbalancemakepaymentcustomdata on openingbalancemakepaymentcustomdata.openingbalancemakepaymentid=mp.id ";
        } else if (moduleID == Constants.Acc_Receive_Payment_ModuleId) {
            joinString = " INNER JOIN openingbalancereceiptcustomdata on openingbalancereceiptcustomdata.openingbalancereceiptid=rp.id ";
        } else if (moduleID == Constants.Acc_Debit_Note_ModuleId) {
            joinString = " INNER JOIN openingbalancedebitnotecustomdata on openingbalancedebitnotecustomdata.openingbalancedebitnoteid=dn.id ";
        } else if (moduleID == Constants.Acc_Credit_Note_ModuleId) {
            joinString = " INNER JOIN openingbalancecreditnotecustomdata on openingbalancecreditnotecustomdata.openingbalancecreditnoteid=cn.id ";
        }
        return joinString;
    }

    private String getAccJAccJEDetailCustomDataJoinStringByModuleID(int moduleID) {
        String joinString = "";
        if (moduleID == Constants.Acc_Vendor_Invoice_ModuleId) {
            joinString = " INNER JOIN grdetails grd on grd.goodsreceipt =gsr.id"
                    + " LEFT JOIN accjedetailcustomdata  on accjedetailcustomdata.recdetailId=grd.id ";
        } else if (moduleID == Constants.Acc_Invoice_ModuleId) {
            joinString = " INNER JOIN invoicedetails invd on invd.invoice =inv.id"
                    + " LEFT JOIN accjedetailcustomdata  on accjedetailcustomdata.recdetailId=invd.id ";
        } else {
            joinString = " LEFT JOIN accjedetailcustomdata  on accjedetailcustomdata.jedetailId=jd.id ";
        }
        return joinString;
    }
    private String getAccJECustomDataJoinStringByModuleID(int moduleID) {
        String joinString = "";
        if (moduleID == Constants.Acc_Vendor_Invoice_ModuleId) {
            joinString = " INNER JOIN accjecustomdata on accjecustomdata.journalentryId=gsr.journalentry ";
        } else if (moduleID == Constants.Acc_Invoice_ModuleId) {
            joinString = " INNER JOIN accjecustomdata on accjecustomdata.journalentryId=inv.journalentry ";
        } else if (moduleID == Constants.Acc_Make_Payment_ModuleId) {
            joinString = " INNER JOIN accjecustomdata on accjecustomdata.journalentryId=p.journalentry ";
        } else if (moduleID == Constants.Acc_Receive_Payment_ModuleId) {
            joinString = " INNER JOIN accjecustomdata on accjecustomdata.journalentryId=rc.journalentry ";
        } else if (moduleID == Constants.Acc_Debit_Note_ModuleId) {
            joinString = " INNER JOIN accjecustomdata on accjecustomdata.journalentryId=dn.journalentry ";
        } else if (moduleID == Constants.Acc_Credit_Note_ModuleId) {
            joinString = " INNER JOIN accjecustomdata on accjecustomdata.journalentryId=cn.journalentry ";
        }
        return joinString;
    }

    private String getSearchStringByModuleID(HashMap<String, Object> request, int moduleID) {
        String searchString = "";
        if (moduleID == Constants.Acc_Vendor_Invoice_ModuleId) {
            searchString = request.get("invoiceSearchJson").toString();
        } else if (moduleID == Constants.Acc_Invoice_ModuleId) {
            searchString = request.get("invoiceSearchJson").toString();
        } else if (moduleID == Constants.Acc_Make_Payment_ModuleId) {
            searchString = request.get("makePaymentSearchJson").toString();
        } else if (moduleID == Constants.Acc_Receive_Payment_ModuleId) {
            searchString = request.get("receiptSearchJson").toString();
        } else if (moduleID == Constants.Acc_Debit_Note_ModuleId) {
            searchString = request.get("dnSearchJson").toString();
        } else if (moduleID == Constants.Acc_Credit_Note_ModuleId) {
            searchString = request.get("cnSearchJson").toString();
        }
        return searchString;
    }
    
    @Override
    public KwlReturnObject getVendorLedgerOpeningTransactionReport(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyId = (String) request.get(Constants.companyKey);
            boolean isLedgerReport = false;
            if (request.get("isLedgerReport") != null) {
                isLedgerReport = (Boolean) request.get("isLedgerReport");
            }
            boolean isSortedOnCreationDate = false;
            if (request.get("isSortedOnCreationDate") != null) {
                isSortedOnCreationDate = (Boolean) request.get("isSortedOnCreationDate");
            }
            String orderBy = " ";
            if (isLedgerReport) {
                orderBy = " ORDER BY entrydate";//vendorName,inttype,, entryno  
            }else if(isSortedOnCreationDate){
                orderBy = " ORDER BY vendorName,entrydate";
            }else {
                 if (request.containsKey("dir") && request.containsKey("sort")) {
                    String Col_Name = request.get("sort").toString();
                    String Col_Dir = request.get("dir").toString();
                    orderBy = columSortSOA(Col_Name, Col_Dir,false);

                }else{
                    orderBy = " ORDER BY vendorName,inttype, entrydate ";
                }
            }
            ArrayList<String> params = new ArrayList();
            ArrayList<String> paramsInv = new ArrayList();
            String openingVIQry = "";
            String openingDNQry = "";
            String openingCNQry = "";
            String openingMPQry = "";
            String vendorIds = "";
            String accountID = "";
            String opnVICondition = " WHERE gsr.company = ? ";
            String opnDNCondition = " WHERE dn.company = ? ";
            String opnCNCondition = " WHERE cn.company = ? ";
            String opnMPCondition = " WHERE mp.company = ? ";
            if (request.containsKey("vendorIds") && request.get("vendorIds") != null) {
                vendorIds = (String) request.get("vendorIds");
            }
            if (!StringUtil.isNullOrEmpty(vendorIds) && !vendorIds.contains("All")) {
                vendorIds = AccountingManager.getFilterInString(vendorIds);
                opnVICondition += " AND gsr.vendor in" + vendorIds;
                opnDNCondition += " AND dn.vendor in" + vendorIds;
                opnCNCondition += " AND cn.vendor in" + vendorIds;
                opnMPCondition += " AND mp.vendor in" + vendorIds;
            }
            if (request.containsKey("accid") && request.get("accid") != null) {
                accountID = (String) request.get("accid");
            }
            if (!StringUtil.isNullOrEmpty(accountID) && !accountID.contains("All")) {
                accountID = AccountingManager.getFilterInString(accountID);
                opnVICondition += " AND gsr.account in" + accountID;
                opnDNCondition += " AND dn.account in" + accountID;
                opnCNCondition += " AND cn.account in" + accountID;
                opnMPCondition += " AND mp.account in" + accountID;
            }
            openingVIQry = "SELECT DISTINCT 'Purchase Invoice' AS type,gsr.id as invoiceId,gsr.grnumber AS invoicenumber,gsr.journalentry, "
                    + " gsr.memo,gsr.currency,gsr.originalopeningbalanceamount as Amount,gsr.creationdate AS entrydate,gsr.exchangerateforopeningtransaction AS externalcurrencyrate, gsr.vendor, v.name as vendorName,2 AS inttype "
                    + " ,'FALSE' as withoutinventory,gsr.openingbalanceamountdue as amountDue,gsr.account, gsr.isopeningbalenceinvoice as isopeningtransaction, gsr.isconversionratefromcurrencytobase FROM goodsreceipt gsr "
                    + " INNER JOIN vendor v ON gsr.vendor = v.id ";

            openingDNQry = "SELECT DISTINCT 'Debit Note' AS type,dn.id as invoiceId,dn.dnnumber AS invoicenumber,dn.journalentry, "
                    + " dn.memo,dn.currency,dn.dnamount as Amount,dn.creationdate AS entrydate,dn.exchangerateforopeningtransaction AS externalcurrencyrate, dn.vendor, v.name as vendorName,5 AS inttype "
                    + " ,'FALSE' as withoutinventory,dn.openingbalanceamountdue as amountDue,dn.account, dn.isopeningbalencedn as isopeningtransaction, dn.isconversionratefromcurrencytobase FROM debitnote dn "
                    + " INNER JOIN vendor v ON dn.vendor = v.id ";

            openingCNQry = "SELECT DISTINCT 'Credit Note' AS type,cn.id as invoiceId,cn.cnnumber AS invoicenumber,cn.journalentry, "
                    + " cn.memo,cn.currency,cn.cnamount as Amount,cn.creationdate AS entrydate,cn.exchangerateforopeningtransaction AS externalcurrencyrate, cn.vendor, v.name as vendorName,3 AS inttype "
                    + " ,'FALSE' as withoutinventory,cn.openingbalanceamountdue as amountDue,cn.account, cn.isopeningbalencecn as isopeningtransaction, cn.isconversionratefromcurrencytobase FROM creditnote cn "
                    + " INNER JOIN vendor v ON cn.vendor = v.id ";

            openingMPQry = "SELECT DISTINCT 'Payment Made' AS type,mp.id as invoiceId,mp.paymentnumber AS invoicenumber,mp.journalentry, "
                    + " mp.memo,mp.currency,mp.depositamount as Amount,mp.creationdate AS entrydate,mp.exchangerateforopeningtransaction AS externalcurrencyrate, mp.vendor, v.name as vendorName,4 AS inttype "
                    + " ,'FALSE' as withoutinventory,mp.openingbalanceamountdue as amountDue,mp.account, mp.isopeningbalencepayment as isopeningtransaction, mp.isconversionratefromcurrencytobase FROM payment mp "
                    + " INNER JOIN vendor v ON mp.vendor = v.id ";
            openingVIQry += opnVICondition + " AND gsr.deleteflag='F' AND gsr.isopeningbalenceinvoice= 1 ";
            openingDNQry += opnDNCondition + " AND dn.deleteflag='F' AND dn.isopeningbalencedn= 1 ";
            openingCNQry += opnCNCondition + " AND cn.deleteflag='F' AND cn.isopeningbalencecn= 1 ";
            openingMPQry += opnMPCondition + " AND mp.deleteflag='F' AND mp.isopeningbalencepayment= 1 ";
            
            //For openingVIQry
            paramsInv.add(companyId);
            //For openingDNQry
            paramsInv.add(companyId);
            //For openingCNQry
            paramsInv.add(companyId);
            //For openingMPQry
            paramsInv.add(companyId);
            
            params.addAll(paramsInv);
            
            String query = " SELECT * FROM ("
                    + " (" + openingVIQry + ") "
                    + " UNION "
                    + " (" + openingDNQry + ") "
                    + " UNION "
                    + " (" + openingCNQry + ") "
                    + " UNION "
                    + " (" + openingMPQry + ") "
                    + " ) AS t1 " + orderBy;
            
            list = executeSQLQuery( query, params.toArray());
            count = list.size();
            
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getVendorLedgerOpeningTransactionReport:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", "", list, count);
    }
    @Override
    public KwlReturnObject getBuildAssemblyJEs(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);
            
            String ss = (String) request.get(Constants.ss);

            ArrayList params = new ArrayList();
            String condition = "";
            params.add(companyid);

            String jeIds = (String) request.get("jeIds");
            if (!StringUtil.isNullOrEmpty(jeIds)) {
                condition += " and inv.journalentry.ID IN(" + jeIds + ")";
            }

            if (StringUtil.isNullOrEmpty(ss) == false) {
                for (int i = 0; i <= 5; i++) {
                    params.add(ss + "%");
                }
                condition += " and (inv.journalentry.entryNumber like ? or inv.memo like ?) ";
            }

            String query = "from ProductBuild inv where inv.company.companyID=? " + condition;
            list = executeQuery( query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getBillingInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    public KwlReturnObject getInvoiceProductDetails(String productid, Date fromDate, Date toDate, HashMap<String, Object> requestParams1) throws ServiceException {
        ArrayList params = new ArrayList();
        List list = null;
        String ss = requestParams1.containsKey("ss") ? (String)requestParams1.get("ss"):"";
        boolean isorderByProduct=requestParams1.containsKey("isorderByProduct") ? (Boolean) requestParams1.get("isorderByProduct"):false;
        String orderBy=isorderByProduct ? "order by inventory.product ": "";
        String condition = "";
        String companyid = "";
        int count = 0;
        String start = null;
        String limit = null;
        try {
            if (requestParams1.containsKey("start")) {
                start = (String) requestParams1.get("start");
            }
            if (requestParams1.containsKey("limit")) {
                limit = (String) requestParams1.get("limit");
            }
            if(requestParams1.containsKey("companyid")){
                companyid = (String)requestParams1.get("companyid");
            }
            if (!StringUtil.isNullOrEmpty(companyid)) {
                condition += " and inv.invoice.company.companyID=? ";
                params.add(companyid);
            }
            /*Search By product Id  or product name */
            if (!StringUtil.isNullOrEmpty(ss)) {
                List<String> searchcolList = new ArrayList<String>(Arrays.asList(new String[]{"inventory.product.productid", "inventory.product.name"}));
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, searchcolList.size());
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcolList.toArray(new String[searchcolList.size()]));
                condition += searchQuery;
            }
            if (!StringUtil.isNullOrEmpty(productid)) {
                condition += " and inventory.product.ID=? ";
                params.add(productid);
            }else{
                condition += " and inventory.product.ID is not null ";
            }
            if (fromDate != null) {
                params.add(fromDate);
//                condition += "  and inv.invoice.journalEntry.entryDate>= ?";
                condition += "  and inv.invoice.creationDate>= ?";
            }
            if (toDate != null) {
                params.add(toDate);
//                condition += "  and inv.invoice.journalEntry.entryDate<= ?";
                condition += "  and inv.invoice.creationDate<= ?";
            }
            String avgAmountQuery = "from InvoiceDetail inv where inv.invoice.deleted=false and inv.invoice.pendingapproval=0 and inv.invoice.draft = false " + condition + orderBy;
            list = executeQuery(avgAmountQuery, params.toArray());

            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( avgAmountQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }        
        return new KwlReturnObject(true, "", null, list, count);
        //         String selQuery = "from InvoiceDetail ge where ge.salesorderdetail.ID = ?";
//        List list = executeQuery( selQuery, new Object[]{invoiceid});
//         return new KwlReturnObject(true, "", null, list, list.size());
    }
//        public KwlReturnObject getInvoiceSalesorderDetails(String soid,String companyid) throws ServiceException {
//        String selQuery = "from InvoiceDetail ge where ge.salesorderdetail.ID = ? and ge.salesorderdetail.deleted = false";
//        List list = executeQuery( selQuery, new Object[]{soid});
//        return new KwlReturnObject(true, "", null, list, list.size());
//    }

    public KwlReturnObject getIDFromSOD(String soid) throws ServiceException {
        String selQuery = "from InvoiceDetail ge where ge.salesorderdetail.ID = ? and ge.invoice.deleted = false";
        List list = executeQuery( selQuery, new Object[]{soid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    /* Get All invoice linked with that particular SO*/
    public KwlReturnObject getInvoicesLinkedInSO(String soid) throws ServiceException {
        String selQuery = "select docid from invoicelinking where linkeddocid=?";
        List list = executeSQLQuery(selQuery, new Object[]{soid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
     /* Get an invoice from many which is created linking with SO first(i.e creation date is minimum in all invoices)*/
    public KwlReturnObject getfirstPartialInvoiceOfSO(String soid) throws ServiceException {
        String selQuery = "select  id,invoicenumber from invoice where createdon = ( select MIN(createdon) from invoice  where id in ("+ soid +"))";
        List list = executeSQLQuery(selQuery);
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getVenInvIDFromPOD(String poid,String company) throws ServiceException{
        List list = new ArrayList();
        int count = 0;
        try {

            ArrayList params = new ArrayList();
            if (!StringUtil.isNullOrEmpty(poid)){
                params.add(poid);
                params.add(company);
                String query = "select goodsreceipt from  grdetails where purchaseorderdetail= ? and company = ?";
                list = executeSQLQuery( query, params.toArray());
                count = list.size();
            }

        } catch (Exception ex) {
           throw ServiceException.FAILURE("getGoodsReceiptIDForDiamondAviation : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getSODFromQD(String QDid) throws ServiceException {
        String selQuery = "from SalesOrderDetail sod  where sod.quotationDetail.ID = ? and sod.salesOrder.deleted = false";
        List list = executeQuery( selQuery, new Object[]{QDid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
   public KwlReturnObject getPODFromSOD(String QDid) throws ServiceException {
        List list = new ArrayList();
        String q = "select ID from podetails po where po.salesorderdetailid = ?";
        list = executeSQLQuery( q, new Object[]{QDid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getINVDFromQD(String QDid) throws ServiceException {
        String selQuery = "from InvoiceDetail invd  where invd.quotationDetail.ID = ? and invd.invoice.deleted = false";
        List list = executeQuery( selQuery, new Object[]{QDid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getINVDFromDOD(String DoDid) throws ServiceException {
        String selQuery = "from InvoiceDetail invd  where invd.deliveryOrderDetail.ID = ? and invd.invoice.deleted = false";
        List list = executeQuery( selQuery, new Object[]{DoDid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getDODFromINVD(String INVDid) throws ServiceException {
        String selQuery = "from DeliveryOrderDetail dod  where dod.cidetails.ID = ? and dod.deliveryOrder.deleted = false";
        List list = executeQuery( selQuery, new Object[]{INVDid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getIDFromDOD(String soid) throws ServiceException {
        String selQuery = "from InvoiceDetail ge where ge.deliveryOrderDetail.ID = ? and ge.invoice.deleted = false";
        List list = executeQuery( selQuery, new Object[]{soid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public double getInvoiceQuantityFromDOD(String dodID) throws ServiceException {
        double returnQuantity=0;
        String selQuery = " select sum(quantity) from Inventory where ID in (select ge.ID from InvoiceDetail ge where ge.deliveryOrderDetail.ID = ? and ge.invoice.deleted = false )";
        List list = executeQuery( selQuery, new Object[]{dodID});
         if (list.size() > 0 && !list.contains(null)) {
            returnQuantity = (Double) list.get(0); 
        }
        return returnQuantity;
    }
    
    public KwlReturnObject getIDFromDODFORSR(String soid) throws ServiceException {
        String selQuery = "from SalesReturnDetail ge where ge.dodetails.ID = ?  and ge.salesReturn.deleted = false";
        List list = executeQuery( selQuery, new Object[]{soid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getIDFromSRD(String soid) throws ServiceException {
        String selQuery = "from SalesReturnDetail ge where ge.dodetails.ID = ? and ge.salesReturn.deleted = false";
        List list = executeQuery( selQuery, new Object[]{soid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
  public KwlReturnObject getDODIDFromSRD(String soid,String salesreturnId) throws ServiceException {
        String selQuery ="";
        ArrayList params=new ArrayList();
        params.add(soid);
        if(!StringUtil.isNullOrEmpty(salesreturnId)){
            params.add(salesreturnId);
         selQuery = "from SalesReturnDetail ge where ge.dodetails.ID = ? and ge.salesReturn.ID = ? and ge.salesReturn.deleted = false";
        }else{
            selQuery = "from SalesReturnDetail ge where ge.dodetails.ID = ? and ge.salesReturn.deleted = false";
        }
        List list = executeQuery( selQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
     public KwlReturnObject getDOIDFromSOD(String soid,String dorderId) throws ServiceException {
       String selQuery="";
       ArrayList params=new ArrayList();
       params.add(soid);
        if(!StringUtil.isNullOrEmpty(dorderId)){
            params.add(dorderId);
          selQuery = "from DeliveryOrderDetail ge where ge.sodetails.ID = ? and ge.deliveryOrder.ID= ? and ge.deliveryOrder.deleted = false";
        }else{
            selQuery = "from DeliveryOrderDetail ge where ge.sodetails.ID = ? and ge.deliveryOrder.deleted = false";
        }
        List list = executeQuery( selQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getSRFromSOD(String soid) throws ServiceException {
        String selQuery = "select srd.salesreturn from srdetails srd inner join dodetails do on do.id=srd.dodetails inner join sodetails sod on sod.id=do.sodetails where sod.id=?";
        List list = executeSQLQuery( selQuery, new Object[]{soid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject updateSalesReturnStatus(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            if (requestParams.containsKey("salesreturn") && requestParams.get("salesreturn") != null && requestParams.get("salesreturn") != "undefined") {
                SalesReturn salesreturn = (SalesReturn) requestParams.get("salesreturn");
                Boolean isdeletable = (Boolean) requestParams.get("isdeletable") != null ? (Boolean) requestParams.get("isdeletable") : true;
                salesreturn.setIsdeletable(isdeletable);
                saveOrUpdate(salesreturn);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateSalesReturnStatus:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
    @Override
    public KwlReturnObject getProductReplacementIDFromSOD(String productReplacementId) throws ServiceException {
        String selQuery = "from SalesOrderDetail sod where sod.productReplacementDetail.id = ?";
        List list = executeQuery( selQuery, new Object[]{productReplacementId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getQuotationDetailsFromProductReplacementID(String productReplacementId) throws ServiceException {
        String selQuery = "from QuotationDetail qd where qd.productReplacementDetail.id = ?";
        List list = executeQuery( selQuery, new Object[]{productReplacementId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getDOIDFromInvoiceDetails(String soid) throws ServiceException {
        String selQuery = "from DeliveryOrderDetail ge where ge.cidetails.ID = ? and ge.deliveryOrder.deleted = false";
        List list = executeQuery( selQuery, new Object[]{soid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getSalesReturnIDFromInvoiceDetails(String invId) throws ServiceException {
        String selQuery = "from SalesReturnDetail srd where srd.cidetails.ID = ? and srd.salesReturn.deleted = false";
        List list = executeQuery( selQuery, new Object[]{invId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getSalesReturnIDFromDODetails(String dodid) throws ServiceException {
        String selQuery = "from SalesReturnDetail srd where srd.dodetails.ID = ? and srd.salesReturn.deleted = false";
        List list = executeQuery( selQuery, new Object[]{dodid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getSalesReturnIDFromDODetailsForFullReturnCase(String dodid) throws ServiceException {
        String selQuery = "from SalesReturnDetail srd where srd.dodetails.ID = ? and srd.salesReturn.deleted = false AND srd.actualQuantity=srd.returnQuantity ";
        List list = executeQuery( selQuery, new Object[]{dodid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getOutstandingBatchSerialDetailBySalesReturnDetailId(Product product,String srdId,String doDetailId) throws ServiceException{
        String selQuery="";
        List list = new ArrayList();
        List params=new ArrayList();
        if(!product.isIsBatchForProduct() && product.isIsSerialForProduct()){
            selQuery = "SELECT batchname,GROUP_CONCAT(serialname),GROUP_CONCAT(skufield) from newbatchserial  srl INNER JOIN  newproductbatch bch ON  bch.id=srl.batch where batch=(SELECT batchmapid from locationbatchdocumentmapping where documentid=? AND transactiontype=53)  and srl.quantitydue=1 "+
                          " AND srl.id IN(SELECT serialid from serialdocumentmapping  sdm  INNER JOIN newbatchserial s ON s.id=sdm.serialid WHERE documentid=?  AND quantitydue=1 ) ";
            params.add(srdId);
            params.add(doDetailId);
            list = executeSQLQuery( selQuery, params.toArray());
        }else if(product.isIsBatchForProduct() && !product.isIsSerialForProduct()){
            selQuery = "SELECT GROUP_CONCAT(npb.batchname),'' as serialname,'' as skufield from  dodetails dodtl " +
                    " INNER JOIN locationbatchdocumentmapping lcm ON lcm.documentid=dodtl.id " +
                    " INNER JOIN newproductbatch npb ON npb.id=lcm.batchmapid " +
                    " WHERE dodtl.id=? AND lcm.transactiontype=? AND batchmapid not IN (SELECT batchmapid from locationbatchdocumentmapping lbm INNER JOIN srdetails srdtl ON srdtl.id=lbm.documentid WHERE srdtl.dodetails=?)";
            params.add(doDetailId);
            params.add(28);
            params.add(doDetailId);
            list = executeSQLQuery( selQuery, params.toArray());
        }else if(product.isIsBatchForProduct() && product.isIsSerialForProduct()){
            selQuery = "SELECT GROUP_CONCAT(batchname),GROUP_CONCAT(serialname),GROUP_CONCAT(skufield) from newbatchserial  srl INNER JOIN  newproductbatch bch ON  bch.id=srl.batch where batch IN(SELECT batchmapid from locationbatchdocumentmapping where documentid=? AND transactiontype=28)  and srl.quantitydue=1 "+
                          " AND srl.id IN(SELECT serialid from serialdocumentmapping  sdm  INNER JOIN newbatchserial s ON s.id=sdm.serialid WHERE documentid=?  AND quantitydue=1 ) ";
            params.add(doDetailId);
            params.add(doDetailId);
            list = executeSQLQuery( selQuery, params.toArray());
        }else{
//            return new KwlReturnObject(true, "", null, params, params.size());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getPartialFullSalesReturnDetailsByDOId(String companyID,String dodid) throws ServiceException{
        String selQuery = "SELECT GROUP_CONCAT(srnumber) ,CONVERT(GROUP_CONCAT(FROM_UNIXTIME(createdon/1000, '%Y-%m-%d %H:%i') ) USING utf8)as createdon,sum(baseuomquantity) as returnqty,"
                + " sr.memo,srd.remark from salesreturn sr "
                + " INNER JOIN srdetails srd ON sr.id=srd.salesreturn WHERE srd.company=?  AND dodetails=? AND sr.deleteflag='F' ORDER BY createdon desc";
        List list = executeSQLQuery( selQuery, new Object[]{companyID,dodid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getInvoiceFromJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "from Invoice where journalEntry.ID=? and deleted=false and company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getDeliveryOrderFromJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "from DeliveryOrder where journalEntry.ID=? and deleted=false and company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getRepeateInvoiceNo(Date prevDate) throws ServiceException {
        String query = "FROM Invoice WHERE repeateInvoice is not null and (repeateInvoice.isActivate=true and repeateInvoice.ispendingapproval=false) and deleted=false and ((repeateInvoice.prevDate = ? and (repeateInvoice.expireDate is null or repeateInvoice.expireDate >= repeateInvoice.nextDate)) ";
        //getting repeate invoices for which prev date will be updated to today's date after repeated invoice creation 
        query += " or (repeateInvoice.invoiceAdvanceCreationDate=? and repeateInvoice.intervalUnit=1 and repeateInvoice.intervalType='day' )) ";
        List list = executeQuery( query, new Object[]{prevDate, prevDate});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getRepeateInvoices(HashMap<String, Object> requestParams) throws ServiceException {
        Date currentDate = new Date();
//        String companyid = (String)requestParams.get("companyid");
//        String query = "from Invoice where company.companyID = ? and repeateInvoice is not null and repeateInvoice.nextDate <= ? and (repeateInvoice.expireDate is null or repeateInvoice.expireDate >= ?)";
//        List list = executeQuery( query, new Object[]{companyid, currentDate, currentDate});
//        String query = "from Invoice where repeateInvoice is not null and (repeateInvoice.isActivate=true and repeateInvoice.ispendingapproval=false) and repeateInvoice.startDate<=now() and repeateInvoice.nextDate <= ? and (repeateInvoice.expireDate is null or repeateInvoice.expireDate >= ?)";
//        String query = "from Invoice where repeateInvoice is not null and (repeateInvoice.isActivate=true and repeateInvoice.ispendingapproval=false) and repeateInvoice.invoiceAdvanceCreationDate = ? and (repeateInvoice.expireDate is null or repeateInvoice.expireDate >= repeateInvoice.nextDate) and deleted=false";
          String query = "from Invoice inv where repeateInvoice is not null and (repeateInvoice.isActivate=true and repeateInvoice.ispendingapproval=false) and "
                  + "(repeateInvoice.expireDate is null or repeateInvoice.expireDate >= repeateInvoice.nextDate) and deleted=false and "
                  + "(case when inv.fixedAssetLeaseInvoice = true then repeateInvoice.nextDate  else repeateInvoice.invoiceAdvanceCreationDate end)= ? ";
        List list = executeQuery( query, new Object[]{currentDate});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
 
    @Override
    public KwlReturnObject getRepeatePreviousInvoices(HashMap<String, Object> requestParams) throws ServiceException {
        Date currentDate = new Date();
        ArrayList paramList=new ArrayList();
        paramList.add(currentDate);
        String query = "from Invoice where repeateInvoice is not null and (repeateInvoice.isActivate=true and repeateInvoice.ispendingapproval=false) and repeateInvoice.invoiceAdvanceCreationDate < ? and (repeateInvoice.expireDate is null or repeateInvoice.expireDate >= repeateInvoice.nextDate)";
        if(requestParams.get(Constants.companyKey)!=null){
            query+=" and company.companyID = ? ";
            paramList.add(requestParams.get(Constants.companyKey).toString());
        }
        List list = executeQuery(query, paramList.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
 
    public KwlReturnObject getExcludedInvoices(HashMap<String, Object> requestParams) throws ServiceException {
        List list = Collections.EMPTY_LIST;
        Date currentDate = new Date();
        if (requestParams.containsKey("InvoicesOnDate") && requestParams.get("InvoicesOnDate") != null) {
            currentDate = (Date) requestParams.get("InvoicesOnDate");
        }
        String query = "from ExcludedOutstandingOrders where invoice is not null and generatedDate=? ";
        list = executeQuery( query, new Object[]{currentDate});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getRepeateInvoicesDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String parentInvoiceId = (String) requestParams.get("parentInvoiceId");
        String query = "from Invoice where parentInvoice.ID = ? ";
        List list = executeQuery( query, new Object[]{parentInvoiceId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getRepeateInvoicesDetailsForExpander(HashMap<String, Object> requestParams) throws ServiceException {
        String parentInvoiceId = (String) requestParams.get("parentInvoiceId");
        String companyid = (String) requestParams.get("companyid");
        String selQuery = "SELECT id,invoicenumber from invoice where company =? and  parentinvoice = ?";
        List list = executeSQLQuery(selQuery, new Object[]{companyid,parentInvoiceId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
  
    @Override
    public KwlReturnObject getInvoicesContainingProject(HashMap<String, Object> dataMap) throws ServiceException {
        String companyId = (String) dataMap.get("companyid");
        String searchString = (String) dataMap.get("searchString");
        Date startDate = (Date) dataMap.get("startDate");
        Date endDate = (Date) dataMap.get("endDate");

        String mysqlQuery = "select invoice.id,  'false' as withoutinventory  from invoice  "
                + " inner join journalentry on invoice.journalentry = journalentry.id  "
                + " inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry "
//                + " where invoice.company = ? and (journalentry.entrydate >=? and journalentry.entrydate <=?) " + searchString
                + " where invoice.company = ? and (invoice.creationdate >=? and invoice.creationdate <=?) " + searchString
                + " union "
                + " select billinginvoice.id,  'true' as withoutinventory from billinginvoice  "
                + " inner join journalentry on billinginvoice.journalentry = journalentry.id  "
                + " inner join accjecustomdata on accjecustomdata.journalentryId=billinginvoice.journalentry "
                + " where billinginvoice.company = ? and (journalentry.entrydate >=? and journalentry.entrydate <=?) " + searchString;

        List list = executeSQLQuery( mysqlQuery, new Object[]{companyId, startDate, endDate, companyId, startDate, endDate});

        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject saveRepeateInvoiceInfo(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            RepeatedInvoices rinvoice = new RepeatedInvoices();
            if (dataMap.containsKey("id")) {
                rinvoice = (RepeatedInvoices) get(RepeatedInvoices.class, (String) dataMap.get("id"));
            }
            if (dataMap.containsKey("intervalType")) {
                rinvoice.setIntervalType((String) dataMap.get("intervalType"));
            }
            if (dataMap.containsKey("intervalUnit")) {
                rinvoice.setIntervalUnit((Integer) dataMap.get("intervalUnit"));
            }
            if (dataMap.containsKey("NoOfpost")) {
                rinvoice.setNoOfInvoicespost(((Integer) dataMap.get("NoOfpost")));
            }
            if (dataMap.containsKey("NoOfRemainpost")) {
                rinvoice.setNoOfRemainInvoicespost((Integer) dataMap.get("NoOfRemainpost"));
            }
            if (dataMap.containsKey("startDate")) {
                rinvoice.setStartDate((Date) dataMap.get("startDate"));
            }
            if (dataMap.containsKey("nextDate")) {
                rinvoice.setNextDate((Date) dataMap.get("nextDate"));
            }
            if (dataMap.containsKey("expireDate")) {
                rinvoice.setExpireDate((Date) dataMap.get("expireDate"));
            }
            if (dataMap.containsKey("isactivate")) {
                rinvoice.setIsActivate((Boolean)dataMap.get("isactivate"));
            } 
            if (dataMap.containsKey("ispendingapproval")) {
                rinvoice.setIspendingapproval((Boolean)dataMap.get("ispendingapproval"));
            }
            if (dataMap.containsKey("approver")) {
                rinvoice.setApprover((String) dataMap.get("approver"));
            } else {
                rinvoice.setApprover("");
            }
            if (dataMap.containsKey("prevDate")) {
                rinvoice.setPrevDate((Date) dataMap.get("prevDate"));
            }
            if (dataMap.containsKey("allowEditingRecurredDocuments")) {
                rinvoice.setAllowToEditRecurredDocument((Boolean) dataMap.get("allowEditingRecurredDocuments"));
            }
            if (dataMap.containsKey("editedRecurredDocumentsApprover")) {
                User user = (User) get(User.class, (String) dataMap.get("editedRecurredDocumentsApprover"));
                if (user != null) {
                    rinvoice.setApproverOfEditedrecurredInvoice(user);
                }else{
                      rinvoice.setApproverOfEditedrecurredInvoice(null);
                }
            }
            if (dataMap.containsKey("advancedays")) {
                rinvoice.setAdvanceNoofdays((Integer) dataMap.get("advancedays"));
            }
            if (dataMap.containsKey("advanceDate") && dataMap.get("advanceDate") != null) {
                rinvoice.setInvoiceAdvanceCreationDate((Date) dataMap.get("advanceDate"));
            }
            saveOrUpdate(rinvoice);
            list.add(rinvoice);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveRepeateInvoiceInfo : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getInvoice_Product(Map<String, Object> requestMap) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String condition = "";
        String productId = "";
        String companyId = "";
        DateFormat df = null;
        String startdate = "";
        boolean isApproved=false;
        String enddate = "";
        if (requestMap.containsKey("productId")) {
            productId = requestMap.get("productId").toString();
            params.add(productId);
        }
        if (requestMap.containsKey("companyId")) {
            companyId = requestMap.get("companyId").toString();
            params.add(companyId);
        }
        if (requestMap.containsKey("df")) {
            try {
                df = (DateFormat) requestMap.get("df");
                if (requestMap.containsKey("startdate")) {
                    startdate = requestMap.get("startdate").toString();
                }
                if (requestMap.containsKey("enddate")) {
                    enddate = requestMap.get("enddate").toString();
                }
//                condition += " and (invd.invoice.journalEntry.entryDate >=? and invd.invoice.journalEntry.entryDate <=?)";
                condition += " and (invd.invoice.creationDate >=? and invd.invoice.creationDate <=?)";
                params.add(df.parse(startdate));
                params.add(df.parse(enddate));
            } catch (ParseException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (requestMap.containsKey("isApproved")) {
            isApproved = Boolean.parseBoolean(requestMap.get("isApproved").toString());
            if (isApproved) {
                condition += " and invd.invoice.approvestatuslevel=?";
                params.add(11);
            }
        }
        String q = "from InvoiceDetail invd where inventory.product.ID=? and invd.company.companyID=? and invd.invoice.deleted=false and invd.invoice.draft=false "+condition;
        list = executeQuery( q,params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getCalculatedInvDtlTaxDistinct(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        List paramslist = new ArrayList();
        String Condition = "";
        String taxid = (String) requestParams.get("taxid");
        paramslist.add(taxid);
        paramslist.add(taxid);
        if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
//            Condition = " and inv.invoice.journalEntry.entryDate >= ? and inv.invoice.journalEntry.entryDate <= ?";
            Condition = " and inv.invoice.creationDate >= ? and inv.invoice.creationDate <= ?";
            paramslist.add(requestParams.get("startDate"));
            paramslist.add(requestParams.get("endDate"));
        }
        String query = "select distinct(inv.invoice.journalEntry.ID), inv.invoice.invoiceNumber from InvoiceDetail inv where (inv.invoice.tax.ID = ? OR inv.tax.ID = ?) and inv.invoice.deleted=false" + Condition;
        returnlist = executeQuery( query, paramslist.toArray());
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }

    public String[] columSortDeliveryOrder(String Col_Name, String Col_Dir) throws ServiceException {
        String[] String_Sort = new String[5];
        if (Col_Name.equals("personname")) {
            String_Sort[0] = " order by name " + Col_Dir;
            String_Sort[1] = ", customer.name ";

        } else if (Col_Name.equals("billno")) {
            String_Sort[0] = " order by donumber " + Col_Dir;
            String_Sort[1] = ",deliveryorder.donumber ";
        } else if (Col_Name.equals("date")) {
            String_Sort[0] = " order by orderdate " + Col_Dir;
            String_Sort[1] = ",deliveryorder.orderdate  ";
        } else if (Col_Name.equals("mapSalesPersonName")) {
            String_Sort[0] = " order by value " + Col_Dir;
            String_Sort[1] = ",masteritem.value  ";
        } else {
            String_Sort[0] = " order by orderdate " + Col_Dir;
            String_Sort[1] = ",deliveryorder.orderdate  ";
        }

        return String_Sort;
    }

    public String columSortSOA(String Col_Name, String Col_Dir, boolean isCustomer) throws ServiceException {

        String String_Sort = "";
        if (isCustomer) {
            if (Col_Name.equals("accName") && isCustomer) {
                String_Sort = " ORDER BY customerName " + Col_Dir + " ,inttype,entrydate";
            } else if (Col_Name.equals("type")) {
                String_Sort = " ORDER BY customerName,inttype " + Col_Dir + " ,entrydate";
            } else if (Col_Name.equals("jeEntryDate")) {
                String_Sort = " ORDER BY customerName,inttype,entrydate " + Col_Dir;
            } else if (Col_Name.equals("invoiceNumber")) {
                String_Sort = " ORDER BY customerName,inttype,entryno " + Col_Dir;
            } else {
                String_Sort = " ORDER BY customerName,inttype,entrydate, entryno " + Col_Dir;
            }
        } else {
            if (Col_Name.equals("accName")) {
                String_Sort = " ORDER BY vendorName " + Col_Dir + " ,inttype,entrydate";
            } else if (Col_Name.equals("type")) {
                String_Sort = " ORDER BY vendorName,inttype " + Col_Dir + " ,entrydate";
            } else if (Col_Name.equals("jeEntryDate")) {
                String_Sort = " ORDER BY vendorName,inttype,entrydate " + Col_Dir;
            } else if (Col_Name.equals("invoiceNumber")) {
                String_Sort = " ORDER BY vendorName,inttype,entryno " + Col_Dir;
            } else {
                String_Sort = " ORDER BY vendorName,inttype,entrydate, entryno " + Col_Dir;
            }
        }

        return String_Sort;
    }

    public KwlReturnObject getDeliveryOrdersMerged(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            String moduleid = "";
            if (request.containsKey(Constants.moduleid) && request.get(Constants.moduleid) != null) {
                moduleid = request.get(Constants.moduleid).toString();
            }
            String userID = "";
            boolean isenableSalesPersonAgentFlow=false;
            if (request.containsKey("enablesalespersonagentflow") && request.get("enablesalespersonagentflow") != null && !StringUtil.isNullOrEmpty(request.get("enablesalespersonagentflow").toString())) {
                isenableSalesPersonAgentFlow = Boolean.parseBoolean(request.get("enablesalespersonagentflow").toString());
            }
            if (isenableSalesPersonAgentFlow) {
                if (request.containsKey("userid") && request.get("userid") != null && !StringUtil.isNullOrEmpty(request.get("userid").toString())) {
                    userID = (String) request.get("userid");
                }
            }
            String newcustomerid = "";
            if (request.containsKey(InvoiceConstants.newcustomerid) && request.get(InvoiceConstants.newcustomerid) != null) {
                newcustomerid = (String) request.get(InvoiceConstants.newcustomerid);
            }
            boolean isdodetailsJoin = false;
            boolean isFixedAsset = false;
            boolean isJobWorkOutReciever = false;
            boolean closedStatusflag=false;
            boolean isFreeGift=false;

            if (request.get("isFixedAsset") != null) {
                isFixedAsset = Boolean.parseBoolean(request.get("isFixedAsset").toString());
            }
            if (request.get("closedStatusflag") != null) {
                closedStatusflag = (Boolean) request.get("closedStatusflag");
            }
            if (request.get("isFreeGift") != null) {
                isFreeGift = Boolean.parseBoolean((String)request.get("isFreeGift"));
            }

            boolean isLeaseFixedAsset = false;
            boolean isConsignment = false;
            
            if (request.get("isLeaseFixedAsset") != null) {
                isLeaseFixedAsset = (Boolean) request.get("isLeaseFixedAsset");
            }
            if (request.get("isJobWorkOutReciever") != null) {
                isJobWorkOutReciever = (Boolean) request.get("isJobWorkOutReciever");
            }
            if (request.containsKey("isConsignment") && request.get("isConsignment") != null) {
                isConsignment = (Boolean) request.get("isConsignment");
            }

            boolean isfavourite = false;
            if (request.get("isfavourite") != null) {
                isfavourite = Boolean.parseBoolean((String) request.get("isfavourite"));
            }
            boolean isOnlyPOSRecords = false;
            if (request.get("isPOSRecords") != null) {
                isOnlyPOSRecords = (Boolean)request.get("isPOSRecords");
            }
            boolean isPendingApproval = false;
            if (request.get("pendingapproval") != null) {
                isPendingApproval = Boolean.parseBoolean(request.get("pendingapproval").toString());
            }
            boolean isprinted = false;
            if (request.get(Constants.MARKED_PRINTED) != null) {
                isprinted = Boolean.parseBoolean((String) request.get(Constants.MARKED_PRINTED));
            }
            
            String productid = "";
            if (request.containsKey(Constants.productid) && request.get(Constants.productid) != null) {
                productid = (String) request.get(Constants.productid);
            }

            String productCategoryid = "";
            if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.get(Constants.productCategoryid);
            }
            
            String userDepartment = "";
            if (request.containsKey("userDepartment") && request.get("userDepartment") != null) {
                userDepartment = (String) request.get("userDepartment");
            }
            
            ArrayList params = new ArrayList();

//            params.add((String) request.get(Constants.companyKey));

            String companyid = AccountingManager.getFilterInString((String) request.get(Constants.companyKey));
            //String conditionSQL = " where deliveryorder.deleteflag='F' and deliveryorder.company in "+companyid+" ";
            boolean deleted = Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) request.get("nondeleted"));

            String conditionSQL = "";

            if (nondeleted) {

                conditionSQL = "  where deliveryorder.deleteflag='F' and deliveryorder.company in " + companyid + " ";

            } else if (deleted) {

                conditionSQL += " where deliveryorder.deleteflag='T' and deliveryorder.company in " + companyid + " ";

            } else {

                conditionSQL += " where deliveryorder.company in " + companyid + " ";

            }
            String searchJoin = "";
            boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
            if (request.containsKey("upsIntegrationFlag")) {
                upsIntegrationFlag = (boolean) request.get("upsIntegrationFlag");
            }
            if (!StringUtil.isNullOrEmpty(ss)) {
                List<String> searchcolList = new ArrayList<String>(Arrays.asList(new String[]{"deliveryorder.donumber", "deliveryorder.memo", "customer.name","customer.aliasname", "dodetails.partno", "dodetails.description", "product.name","product.productid",
                    "caddr.billingAddress1", "caddr.billingCity1", "caddr.billingCountry1", "caddr.billingEmail1", "caddr.billingState1", "caddr.billingPostal1",
                    "caddr.shippingAddress1", "caddr.shippingCity1", "caddr.shippingCountry1", "caddr.shippingEmail1", "caddr.shippingState1", "caddr.shippingPostal1"}));
                if(upsIntegrationFlag) {    //To allow Quick Search on 'Shipment Tracking Number(s)'
                    searchcolList.add("upspackagedetails.trackingnumber");
                }
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, searchcolList.size());
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcolList.toArray(new String[searchcolList.size()]));
                conditionSQL += searchQuery;

                searchJoin = " inner join dodetails on dodetails.deliveryorder = deliveryorder.id "
                        + " inner join product on dodetails.product = product.id "
                        + "left join customeraddresses caddr on caddr.id= customer.customeraddresses ";
                if(upsIntegrationFlag) {    //To allow Quick Search on 'Shipment Tracking Number(s)'
                    searchJoin += " LEFT JOIN packingdetails ON packingdetails.dodetailid = dodetails.id "
                                + " left join packing ON packing.id = packingdetails.packinglist "
                                + " left join upspackagedetails ON upspackagedetails.packing = packing.id ";
                }
                
                isdodetailsJoin = true;
//                for (int i = 0; i < 3; i++) {
//                    params.add(ss + "%");
//                }
//                params.add("%" + ss + "%");
//                conditionSQL += " and ( deliveryorder.donumber like ? or deliveryorder.memo like ? or customer.name like ? or dodetails.partno like ? )";

            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                conditionSQL += " and costcenter.id=?";
            }
            String customerId = (String) request.get(CCConstants.REQ_customerId);
            if (!StringUtil.isNullOrEmpty(customerId)) {
                params.add(customerId);
                conditionSQL += " and customer.id=?";
            }
            String currencyfilterfortrans = (String) request.get("currencyfilterfortrans");
            if (!StringUtil.isNullOrEmpty(currencyfilterfortrans)) {
                conditionSQL += " and deliveryorder.currency = ? ";
                params.add(currencyfilterfortrans);
            }
            
            if (!StringUtil.isNullOrEmpty(newcustomerid)) {
                if (newcustomerid.contains(",")) {
                    newcustomerid = AccountingManager.getFilterInString(newcustomerid);
                    conditionSQL += " and deliveryorder.customer IN" + newcustomerid;
                } else {
                    params.add(newcustomerid);
                    conditionSQL += " and deliveryorder.customer = ? ";
                }
            }
            
            if (isfavourite) {
                conditionSQL += " and deliveryorder.favouriteflag=true ";
            }
            if (isOnlyPOSRecords) {
                conditionSQL += " and deliveryorder.isfromPOS=1";
            }
            if (isprinted) {
                conditionSQL += " and deliveryorder.printedflag=true ";
            }
            if (request.containsKey("custWarehouse") && request.get("custWarehouse") != null) {
                String custWarehouse = (String) request.get("custWarehouse");
                if (isConsignment && !StringUtil.isNullOrEmpty(custWarehouse)) {
                    params.add(custWarehouse);
                    conditionSQL += " and deliveryorder.custWarehouse = ?";
                }
            }
//             Get only approved records
            if (isPendingApproval) {
                conditionSQL += " and deliveryorder.approvestatuslevel != ? and deliveryorder.approvestatuslevel != ? ";
                params.add(11);
                params.add(-1);
            } else {
                conditionSQL += " and deliveryorder.approvestatuslevel = ?";
                params.add(11);
            }

            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            String joinString = "";
            boolean isTaxAppliedDOs = false;
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                if (request.containsKey("isTaxAppliedDOs") && request.get("isTaxAppliedDOs") != null) {
                    isTaxAppliedDOs = (Boolean) request.get("isTaxAppliedDOs");
                }
                if(isTaxAppliedDOs){
                    conditionSQL += " and (deliveryorder.applieddate >=? and deliveryorder.applieddate <=?)";
                } else {
                    conditionSQL += " and (deliveryorder.orderdate >=? and deliveryorder.orderdate <=?)";
                }
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }

            if(isFreeGift){
                conditionSQL += " and deliveryorder.isfreegift = 1 ";
            }
            String billID = (String) request.get(InvoiceConstants.billid);
            if (!StringUtil.isNullOrEmpty(billID)) {
                params.add(billID);
                conditionSQL += " and deliveryorder.id = ? ";
            }
            if (request.containsKey("linknumber") && request.get("linknumber") != null && !request.get("linknumber").toString().equals("")) {
                conditionSQL += " and deliveryorder.donumber = ? ";
                params.add(request.get("linknumber"));
            }
            String customerCategoryid = "";
            if (request.containsKey(InvoiceConstants.customerCategoryid) && request.get(InvoiceConstants.customerCategoryid) != null) {
                customerCategoryid = (String) request.get(InvoiceConstants.customerCategoryid);
            }
            if (!StringUtil.isNullOrEmpty(customerCategoryid) && !StringUtil.equal(customerCategoryid, "-1") && !StringUtil.equal(customerCategoryid, "All")) {
                params.add(customerCategoryid);
                conditionSQL += "and customer.id in (select customerid from customercategorymapping where customercategory = ?)";
            }

            String joinString1 = " ";
            if (request.containsKey("soid") && request.get("soid") != null) {
                String soid = (String) request.get("soid");
                //if(!StringUtil.isNullOrEmpty(soid)){
                params.add(soid);
                if (searchJoin.equals("")) {
                    joinString1 = " inner join dodetails on dodetails.deliveryorder = deliveryorder.id ";
                    isdodetailsJoin = true;
                }

                joinString1 += " inner join sodetails on sodetails.id=dodetails.sodetails  "
                        + " inner join salesorder on salesorder.id=sodetails.salesorder ";
                conditionSQL += " and  salesorder.id= ? ";

            }

            String joinString2 = " ";
            if (request.containsKey("invoiceid") && request.get("invoiceid") != null) {
                String invid = (String) request.get("invoiceid");
                //if(!StringUtil.isNullOrEmpty(soid)){
                params.add(invid);
                if (searchJoin.equals("")) {
                    joinString2 = " inner join dodetails on dodetails.deliveryorder = deliveryorder.id ";
                    isdodetailsJoin = true;
                }
                joinString2 += " inner join invoicedetails on invoicedetails.id=dodetails.cidetails  ";
                conditionSQL += " and  invoicedetails.invoice= ? ";
            }

            String appendCase = "and";
            String mySearchFilterString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            String searchDefaultFieldSQL="";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) { //Advance Search Case
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {                    
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray=new JSONArray();
                    JSONArray defaultSearchFieldArray=new JSONArray();  
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj,customSearchFieldArray,defaultSearchFieldArray);                                                                                                 
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, moduleid, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchJoin += " left join dolinking on dolinking.docid=deliveryorder.id and dolinking.sourceflag = 1 ";
                    } 
                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        JSONObject tempjson=new JSONObject();
                        tempjson.put(Constants.root, customSearchFieldArray);
                        request.put(Constants.Searchjson, tempjson.toString());
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
//                        mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                        String innerJoinOnDetailTable = "";
                        if (!searchJoin.contains("dodetails.deliveryorder")) {
                            innerJoinOnDetailTable = " inner join dodetails on dodetails.deliveryorder=deliveryorder.id ";
                        }
                        boolean isInnerJoinAppend = false;
                        if (mySearchFilterString.contains("deliveryordercustomdata")) {
                            joinString = " inner join deliveryordercustomdata on deliveryordercustomdata.deliveryOrderId=deliveryorder.accdeliveryordercustomdataref ";
                        }
                        if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "dodetailscustomdata");
                            joinString += innerJoinOnDetailTable+" left join dodetailscustomdata on dodetails.id=dodetailscustomdata.dodetailsid ";
                            isInnerJoinAppend=true;
                        }
                        if (mySearchFilterString.contains("CustomerCustomData")) {
                            joinString += " left join customercustomdata  on customercustomdata.customerId=deliveryorder.customer ";
                            mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "customercustomdata");
                        }
                        if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "dodetailproductcustomdata");
                            joinString += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join dodetailproductcustomdata on dodetails.id=dodetailproductcustomdata.doDetailID ";
                            isInnerJoinAppend=true;
                        }
                        if (mySearchFilterString.contains("accproductcustomdata")) {
                            if(isInnerJoinAppend){
                                joinString += " left join product on product.id=dodetails.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                            }else{
                                joinString +=  innerJoinOnDetailTable + " left join product on product.id=dodetails.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                                isdodetailsJoin=true;
                            }
                            
                        }
                        StringUtil.insertParamAdvanceSearchString1(params, tempjson.toString());
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            
            String joinString3 = "";
            String conditionSQLAfterSearch = "";
            if (!StringUtil.isNullOrEmpty(productid)) {
                if (!isdodetailsJoin) {
                    joinString3 = " inner join dodetails on dodetails.deliveryorder = deliveryorder.id ";
                    isdodetailsJoin = true;
                }
                params.add(productid);
                conditionSQLAfterSearch += " and dodetails.product = ? ";
            }

            if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                if (!isdodetailsJoin) {
                    joinString3 = " inner join dodetails on dodetails.deliveryorder = deliveryorder.id ";
                    isdodetailsJoin = true;
                }
                params.add(productCategoryid);
                conditionSQLAfterSearch += " and dodetails.product in (select productid from productcategorymapping where productcategory = ?) ";
            }
            
            String joinString4 = "";
            
            if (request.containsKey("isForTaxApplication") && request.get("isForTaxApplication") != null) {
                boolean isForTaxApplication = (Boolean) request.get("isForTaxApplication");
                if (isForTaxApplication && request.containsKey("taxApplicableCalculationDate") && request.get("taxApplicableCalculationDate") != null) {
                    conditionSQLAfterSearch += " and (deliveryorder.orderdate <=?)";
                    Date taxApplicableCalculationDate = (Date) request.get("taxApplicableCalculationDate");
                    params.add(taxApplicableCalculationDate);
                    
                    
                    isTaxAppliedDOs = (Boolean) request.get("isTaxAppliedDOs");// is for Applied DO tax Tab
                    
                    if(!isTaxAppliedDOs){
                        joinString4 = " inner join dodetails on dodetails.deliveryorder = deliveryorder.id ";
                        conditionSQLAfterSearch += " and (dodetails.cidetails is null) and (dodetails.id not in (select deliveryorderdetail from invoicedetails invdetail inner join invoice invobj on invdetail.invoice=invobj.id where invobj.deleteflag='F' and invobj.pendingapproval = 0 and invobj.isdraft = 0 and deliveryorderdetail is not NULL and invdetail.company in "+companyid+" )) and deliveryorder.isappliedfortax=false ";
                    }
                }
            }
            
            if (request.containsKey("isTaxAppliedDOs") && request.get("isTaxAppliedDOs") != null) {
                isTaxAppliedDOs = (Boolean) request.get("isTaxAppliedDOs");// is for Applied DO tax Tab
                if (isTaxAppliedDOs) {
                    params.add(isTaxAppliedDOs);
                    conditionSQLAfterSearch += " and deliveryorder.isappliedfortax=? ";
                }
                /**
                 * Fetch delivery order merged data specified tax only. 
                 */
                if (request.containsKey("taxid") && !StringUtil.isNullOrEmpty((String) request.get("taxid"))) {
                    String taxID = (String) request.get("taxid");
                    params.add(taxID);
                    conditionSQLAfterSearch += "and deliveryorder.tax = ? ";
                }
                
            }

            String orderBy = "";
            String joinString5 = "";
            String[] stringSort = null;
            String sort_Col = "";
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                stringSort = columSortDeliveryOrder(Col_Name, Col_Dir);
                orderBy += stringSort[0];
                sort_Col += stringSort[1];
                if(request.get("sort").toString().equals("mapSalesPersonName")){
                joinString5 += "  left join masteritem on masteritem.id = deliveryorder.salesperson  ";
            }

            } else {
                if (isConsignment) {
                    orderBy += " order by orderdate desc,donumber desc";
                    sort_Col += " ,deliveryorder.orderdate,deliveryorder.donumber ";
                } else {
                    orderBy += " order by orderdate desc";
                    sort_Col += " ,deliveryorder.orderdate ";
                }

            }
            
            if (isFixedAsset) {
                conditionSQLAfterSearch += " and deliveryorder.isfixedassetdo=true ";
            } else {
                conditionSQLAfterSearch += " and deliveryorder.isfixedassetdo=false ";
            }

            if (isLeaseFixedAsset) {
                conditionSQLAfterSearch += " and deliveryorder.isleasedo=true ";
            } else {
                conditionSQLAfterSearch += " and deliveryorder.isleasedo=false ";
            }
            if (isConsignment) {
                conditionSQLAfterSearch += " and deliveryorder.isconsignment='T'";
            } else {
                conditionSQLAfterSearch += " and deliveryorder.isconsignment='F'";
            }
            if (isJobWorkOutReciever) { // Check for view filter, for fetching job work records.
                conditionSQLAfterSearch += " and deliveryorder.isjobworkout='T'";
            }
//            else {
//                conditionSQLAfterSearch += " and deliveryorder.isjobworkout='F'";
//            }
             if (closedStatusflag) {
                conditionSQLAfterSearch += " and deliveryorder.isdoclosed='F'";
            }
            
            if (!StringUtil.isNullOrEmpty(userDepartment)) {
                joinString += " inner join users on users.userid = deliveryorder.createdby ";
                conditionSQLAfterSearch += " and users.department = ? ";
                params.add(userDepartment);
            }
            if ((request.containsKey("linkFlag") && request.get("linkFlag").equals("true"))) {
                if ((request.containsKey("srflag") && request.get("srflag").equals("true"))) {
                        conditionSQLAfterSearch += " and deliveryorder.isopeninsr = 'T' ";
                } else {
                        conditionSQLAfterSearch += " and deliveryorder.isopeninsi = 'T' ";
                    }
                }
            String salesPersonMappingQuery = "";
//           if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {
//                salesPersonMappingQuery = " left join salespersonmapping spm on spm.customerid=deliveryorder.customer  left join masteritem  mst on mst.id=spm.salesperson ";
//                joinString2 += salesPersonMappingQuery;
//                conditionSQL += " and ((mst.user= '" + userID + "' or mst.user is null  and customer.isavailableonlytosalespersons='T' ) or  (customer.isavailableonlytosalespersons='F')) ";
//            }
           
           if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {//this block is executed only when owners restriction feature is on 
                String salesPersonID = (String) request.get("salesPersonid");
                String salespersonQuery = "";
                 if (!StringUtil.isNullOrEmpty(salesPersonID)) {
                   salesPersonID= AccountingManager.getFilterInString(salesPersonID);
                    salespersonQuery = "  deliveryorder.salesperson in " + salesPersonID + " or ";
                }
                
                conditionSQLAfterSearch += " and ( " + salespersonQuery + "  deliveryorder.createdby='" + userID + "' or deliveryorder.salesperson is null  ) ";
            }
    
           /*  Code to showing Data in report as per permission */
            if (request.containsKey("salesPersonFilterFlag") && (Boolean) request.get("salesPersonFilterFlag") && request.get("userid") != null) {
                String userId = (String) request.get(InvoiceConstants.userid);
                String companyId = (String) request.get(Constants.companyKey);
                if (!StringUtil.isNullOrEmpty(userId)) {
                    DataFilteringModule dataFilteringModule = null;
                    MasterItem masterItem = null;
                    List<DataFilteringModule> dataFilteringModuleList = new ArrayList<DataFilteringModule>();
                    List<MasterItem> masterItems = new ArrayList<MasterItem>();

                    dataFilteringModuleList = find("from DataFilteringModule where user.userID='" + userId + "' and company.companyID='" + companyId + "'");
                    masterItems = find("from MasterItem where user='" + userId + "' and company.companyID='" + companyId + "' and masterGroup.ID='" + 15 + "'");
                    if (!dataFilteringModuleList.isEmpty()) {
                        dataFilteringModule = dataFilteringModuleList.get(0);
                    }
//                    if (!masterItems.isEmpty()) {
//                        masterItem = masterItems.get(0);
//                    }
                    if ((dataFilteringModule != null && !dataFilteringModule.isDeliveryOrder()) || (dataFilteringModule != null && !dataFilteringModule.isDeliveryOrder() && masterItem != null)) {
                        conditionSQLAfterSearch += " and ( ";
                    }

                    if (dataFilteringModule != null && !dataFilteringModule.isDeliveryOrder()) {
                        params.add(dataFilteringModule.getUser().getUserID());
                        conditionSQLAfterSearch += "deliveryorder.createdby=? ";
                    }

                    if (dataFilteringModule != null && !dataFilteringModule.isDeliveryOrder() && !masterItems.isEmpty()) {
                        String qMarks = "";
                        for (MasterItem item : masterItems) {
                            qMarks += "?,";
                            params.add(item.getID());
                        }
                        qMarks = qMarks.substring(0, qMarks.length() - 1);
                        conditionSQLAfterSearch += " or deliveryorder.salesperson in (" + qMarks + ")";
                    }
                    if ((dataFilteringModule != null && !dataFilteringModule.isDeliveryOrder()) || (dataFilteringModule != null && !dataFilteringModule.isDeliveryOrder() && masterItem != null)) {
                        conditionSQLAfterSearch += " ) ";
                    }
                }
            }
           
            String mysqlQuery = " select distinct(deliveryorder.id), 'false' as withoutinventory" + sort_Col + "  from deliveryorder "
                    + "inner join customer on customer.id = deliveryorder.customer " + joinString1 + joinString2 + joinString3 + searchJoin + joinString+joinString4+joinString5
                    + "left join costcenter on costcenter.id = deliveryorder.costcenter " + conditionSQL + mySearchFilterString + conditionSQLAfterSearch
                    + orderBy;



            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
                if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                    list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.getdeliveryorders:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
        
    public String[] columSortSalesReturn(String Col_Name, String Col_Dir) throws ServiceException {
        String[] String_Sort = new String[5];
        if (Col_Name.equals("personname")) {
            String_Sort[0] = " order by name " + Col_Dir;
            String_Sort[1] = ", customer.name ";

        } else if (Col_Name.equals("billno")) {
            String_Sort[0] = " order by srnumber " + Col_Dir;
            String_Sort[1] = ",salesreturn.srnumber ";
        } else if (Col_Name.equals("date")) {
            String_Sort[0] = " order by orderdate " + Col_Dir;
            String_Sort[1] = ",salesreturn.orderdate ";
        } else {
            String_Sort[0] = " order by orderdate " + Col_Dir;
            String_Sort[1] = ",salesreturn.orderdate ";
        }

        return String_Sort;
    }

    public KwlReturnObject getSalesReturn(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            boolean isfavourite = false;
            boolean isConsignment = false;
            String userID = "";
            String moduleid = "";
            if (request.containsKey(Constants.moduleid) && request.get(Constants.moduleid) != null) {
                moduleid = request.get(Constants.moduleid).toString();
            }
            boolean isenableSalesPersonAgentFlow = false;
            if (request.containsKey("enablesalespersonagentflow") && request.get("enablesalespersonagentflow") != null && !StringUtil.isNullOrEmpty(request.get("enablesalespersonagentflow").toString())) {
                isenableSalesPersonAgentFlow = Boolean.parseBoolean(request.get("enablesalespersonagentflow").toString());
            }
            if (isenableSalesPersonAgentFlow) {
                if (request.containsKey("userid") && request.get("userid") != null && !StringUtil.isNullOrEmpty(request.get("userid").toString())) {
                    userID = (String) request.get("userid");
                }
            }
            if (request.get("isfavourite") != null) {
                isfavourite = Boolean.parseBoolean((String) request.get("isfavourite"));
            }
            boolean isLeaseFixedAsset = false;
            if (request.get("isLeaseFixedAsset") != null) {
                isLeaseFixedAsset = (Boolean) request.get("isLeaseFixedAsset");
            }
            if (request.containsKey("isConsignment") && request.get("isConsignment") != null) {
                isConsignment = (Boolean) request.get("isConsignment");
            }
            boolean isFixedAsset = false;
            if (request.get("isFixedAsset") != null) {
                isFixedAsset = (Boolean) request.get("isFixedAsset");
            }
            boolean issrdetailsJoin = false;
            String productid = "";
            if (request.containsKey(Constants.productid) && request.get(Constants.productid) != null) {
                productid = (String) request.get(Constants.productid);
            }

            String productCategoryid = "";
            if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.get(Constants.productCategoryid);
            }
             String customerCategoryid = "";
            if (request.containsKey(Constants.customerCategoryid) && request.get(Constants.customerCategoryid) != null) {
                customerCategoryid = (String) request.get(Constants.customerCategoryid);
            }
            String newcustomerid = "";
            if (request.containsKey(Constants.newcustomerid) && request.get(Constants.newcustomerid) != null) {
                newcustomerid = (String) request.get(Constants.newcustomerid);
            }
            ArrayList params = new ArrayList();

            boolean deleted = Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) request.get("nondeleted"));

            String conditionSQL = "";
            String companyid = AccountingManager.getFilterInString((String) request.get(Constants.companyKey));
            if (nondeleted) {

                conditionSQL = "  where salesreturn.deleteflag='F' and salesreturn.company in " + companyid + " ";

            } else if (deleted) {

                conditionSQL += " where salesreturn.deleteflag='T' and salesreturn.company in " + companyid + " ";

            } else {
                conditionSQL += " where salesreturn.company in " + companyid + " ";

            }
            if (request.containsKey(Constants.generatedSource) && request.get(Constants.generatedSource) != null) {
                conditionSQL += " and salesreturn.generatedsource = ? ";
                params.add((Integer) (request.get(Constants.generatedSource)));
            }
            
            if (request.containsKey("linknumber") && request.get("linknumber") != null && !request.get("linknumber").toString().equals("")) {
                conditionSQL += " and salesreturn.srnumber = '"+request.get("linknumber")+"' ";
            }
            String billID = "";
            if (request.containsKey("billid") && request.get("billid") != null) { // view GRO from journal entry
                billID = (String) request.get("billid");
            }
            if (!StringUtil.isNullOrEmpty(billID)) {
                params.add(billID);
                conditionSQL += " and salesreturn.id=?";
            }
            //   String conditionSQL = " where salesreturn.deleteflag='F' and salesreturn.company in "+companyid+" ";
            String searchJoin = "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                searchJoin = " inner join srdetails on srdetails.salesreturn = salesreturn.id ";
                if(request.get("moduleid")!=null && Integer.parseInt(request.get("moduleid").toString())==Constants.Acc_Sales_Return_ModuleId){
                    for (int i = 0; i < 6; i++) {
                        params.add("%" + ss + "%");//ERP-9307:Option to search by any letter. 
                    }
                    
                    conditionSQL += " and (( salesreturn.srnumber like ? or salesreturn.memo like ? or customer.name like ? or customer.aliasname like ? ) or srdetails.product in (select id from product where product.company in " + companyid + " and (productid like ? or name like ?)))";
                }else{
                    for (int i = 0; i < 7; i++) {
                        params.add("%" + ss + "%");//ERP-9307:Option to search by any letter. 
                    }
    //                params.add("%" + ss + "%");

                    conditionSQL += " and ( salesreturn.srnumber like ? or salesreturn.memo like ? or customer.name like ? or customer.aliasname like ? or srdetails.partno like ? ) or srdetails.product in (select id from product where productid like ? or name like ?)";
                }
                issrdetailsJoin = true;
            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                conditionSQL += " and costcenter.id=?";
            }


            if (isfavourite) {
                conditionSQL += " and salesreturn.favouriteflag=true ";
            }
            if (isConsignment) {
                conditionSQL += " and salesreturn.isconsignment='T' ";
            } else {
                conditionSQL += " and salesreturn.isconsignment='F' ";
            }
            
            if (isFixedAsset) {
                conditionSQL += " and salesreturn.isfixedasset = true ";
            } else {
                conditionSQL += " and salesreturn.isfixedasset = false ";
            }
             

            if (isLeaseFixedAsset) {
                conditionSQL += " and salesreturn.isleasesalesreturn=true ";
            } else {
                conditionSQL += " and salesreturn.isleasesalesreturn=false ";
            }
            if (request.containsKey("custWarehouse") && request.get("custWarehouse") != null) {
                String custWarehouse = (String) request.get("custWarehouse");
                if (isConsignment && !StringUtil.isNullOrEmpty(custWarehouse)) {
                    params.add(custWarehouse);
                    conditionSQL += " and salesreturn.custWarehouse = ?";
                }
            }
            if (!StringUtil.isNullOrEmpty(newcustomerid)) {
                if (newcustomerid.contains(",")) {
                    newcustomerid = AccountingManager.getFilterInString(newcustomerid);
                    conditionSQL += " and salesreturn.customer IN" + newcustomerid;
                } else {
                    params.add(newcustomerid);
                    conditionSQL += " and salesreturn.customer = ? ";
                }
            }
            
            String prodFilterCustid = (String) request.get(Constants.prodfiltercustid);
            if (!StringUtil.isNullOrEmpty(prodFilterCustid) && !StringUtil.equal(prodFilterCustid, "-1") && !StringUtil.equal(prodFilterCustid, "All")) {
                prodFilterCustid = AccountingManager.getFilterInString(prodFilterCustid);
                conditionSQL += " and salesreturn.customer in " + prodFilterCustid + "  ";
            }
            
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);

            String joinString = "";
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and (salesreturn.orderdate >=? and salesreturn.orderdate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }

            String appendCase = "and";
            String mySearchFilterString = "";
             String searchDefaultFieldSQL = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         * Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, moduleid, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchJoin += " left join salesreturnlinking on salesreturnlinking.docid=salesreturn.id and salesreturnlinking.sourceflag = 1 ";
                        //ERP-40423:to fetch records on the basis of Store
                        //it is implemented same as in invoices report
                        if (searchDefaultFieldSQL.contains("newproductbatch")) {
                            searchJoin += " left join srdetails srd on srd.salesreturn = salesreturn.id "
                                    + "inner join locationbatchdocumentmapping on srd.id = locationbatchdocumentmapping.documentid "
                                    + "inner join newproductbatch  on newproductbatch.id=locationbatchdocumentmapping.batchmapid ";
                        }
                    }
                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
//                    mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                        String innerJoinOnDetailTable = "";
                        if (!searchJoin.contains("srdetails.salesreturn")) {
                            innerJoinOnDetailTable = " inner join srdetails on srdetails.salesreturn=salesreturn.id ";
                        }
                        boolean isInnerJoinAppend = false;
                        if (mySearchFilterString.contains("salesreturncustomdata")) {
                            joinString = " inner join salesreturncustomdata on salesreturncustomdata.salesreturnid=salesreturn.accsalesreturncustomdataref ";
                        }
                        if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "srdetailscustomdata");
                            joinString += innerJoinOnDetailTable + " left join srdetailscustomdata on srdetails.id=srdetailscustomdata.srdetailsid ";
                            isInnerJoinAppend = true;
                        }
                        if (mySearchFilterString.contains("CustomerCustomData")) {
                            joinString += " left join customercustomdata  on customercustomdata.customerId=salesreturn.customer ";
                            mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "customercustomdata");
                        }
                        if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "srdetailproductcustomdata");
                            joinString += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join srdetailproductcustomdata on srdetails.id=srdetailproductcustomdata.srDetailID ";
                            isInnerJoinAppend=true;
                        }
                        //product custom data
                        if (mySearchFilterString.contains("accproductcustomdata")) {
                            joinString += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join product on product.id=srdetails.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                        }
//                    mySearchFilterString = mySearchFilterString.replaceAll("DeliveryOrderCustomData", "deliveryorder.accdeliveryordercustomdataref");
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            
            String joinString2 = "";
            if (!StringUtil.isNullOrEmpty(productid)) {
                if (!issrdetailsJoin) {
                    joinString2 = " inner join srdetails on srdetails.salesreturn = salesreturn.id ";
                    issrdetailsJoin = true;
                }
                params.add(productid);
                conditionSQL += " and srdetails.product = ? ";
            }

            if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                if (!issrdetailsJoin) {
                    joinString2 = " inner join srdetails on srdetails.salesreturn = salesreturn.id ";
                    issrdetailsJoin = true;
                }
                params.add(productCategoryid);
                conditionSQL += " and srdetails.product in (select productid from productcategorymapping where productcategory = ?) ";
            }
            
             if (!StringUtil.isNullOrEmpty(customerCategoryid) && !StringUtil.equal(customerCategoryid, "-1") && !StringUtil.equal(customerCategoryid, "All")) {
                params.add(customerCategoryid);
                conditionSQL += " and salesreturn.customer in (select customerid from customercategorymapping where customercategory = ?)  ";
            }
            
            String joinString3 = "";
            
            boolean isSalesReturnCreditNote = false;
            
            if (request.containsKey("isSalesReturnCreditNote") && request.get("isSalesReturnCreditNote") != null) {
                isSalesReturnCreditNote = (Boolean) request.get("isSalesReturnCreditNote");
            }
            
            if(isSalesReturnCreditNote){// those sales returns which are created with credit notes
                joinString3 = " inner join creditnote on creditnote.salesreturn = salesreturn.id ";
            }

            String orderBy = "";
            String[] stringSort = null;
            String sort_Col = "";
            String sort_Col1 = "";
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                stringSort = columSortSalesReturn(Col_Name, Col_Dir);
                orderBy += stringSort[0];
                sort_Col += stringSort[1];

            } else {
                if (isConsignment) {
                    orderBy += " order by orderdate desc,srnumber desc ";
                    sort_Col += " ,salesreturn.orderdate,salesreturn.srnumber ";
                } else {
                    orderBy += " order by orderdate desc ";
                    sort_Col += " ,salesreturn.orderdate ";
                }

            }
            String salesPersonMappingQuery = "";
//            if (isenableSalesPersonAgentFlow  && !StringUtil.isNullOrEmpty(userID)) {
//                salesPersonMappingQuery = " left join salespersonmapping spm on spm.customerid=salesreturn.customer  left join masteritem  mst on mst.id=spm.salesperson ";
//                joinString += salesPersonMappingQuery;
//                mySearchFilterString += " and ((mst.user= '" + userID + "' or mst.user is null  and customer.isavailableonlytosalespersons='T' ) or  (customer.isavailableonlytosalespersons='F')) ";
//            }
             if (isenableSalesPersonAgentFlow && !StringUtil.isNullOrEmpty(userID)) {//this block is executed only when owners restriction feature is on 
                String salesPersonID = (String) request.get("salesPersonid");
                String salespersonQuery = "";
                 if (!StringUtil.isNullOrEmpty(salesPersonID)) {
                   salesPersonID= AccountingManager.getFilterInString(salesPersonID);
                    salespersonQuery = "  salesreturn.salesperson in " + salesPersonID + " or ";
                }
                
                conditionSQL += " and ( " + salespersonQuery + "  salesreturn.createdby='" + userID + "' or salesreturn.salesperson is null  ) ";
            }
            String mysqlQuery = " select distinct(salesreturn.id), 'false' as withoutinventory " + sort_Col + " from salesreturn "
                    + "inner join customer on customer.id = salesreturn.customer " + searchJoin + joinString + joinString2+joinString3
                    + "left join costcenter on costcenter.id = salesreturn.costcenter " + conditionSQL + mySearchFilterString
                    + orderBy;



            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.getSalesReturn:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject deleteDeliveryOrder(String doid, String companyid) throws ServiceException {

        ArrayList params4 = new ArrayList();
//        String delQuery4 = "update journalentry set deleteflag='T' where ID in (select journalentry from deliveryorder where id=? and company=?);";
        String delQuery4 = "update journalentry je join deliveryorder do on je.id=do.journalentry set je.deleteflag='T' where do.id=? and do.company=?";
        int numRows4 = executeSQLUpdate( delQuery4, new Object[]{doid, companyid});

        String query = "update DeliveryOrder set deleted=true where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{doid, companyid});
        return new KwlReturnObject(true, "Delivery Order has been deleted successfully.", null, null, numRows);
    }

    @Override
    public KwlReturnObject deleteDOContractMappings(HashMap<String, Object> requestParams) throws ServiceException {
        int totalRowDeleted = 0;
        if (requestParams.containsKey("doid") && requestParams.containsKey("companyid")) {
            List params = new ArrayList();
            params.add(requestParams.get("doid"));
            params.add(requestParams.get("companyid"));

            String hql = "DELETE from DOContractMapping dcm where dcm.deliveryOrder.ID=? and dcm.company.companyID=?";
            totalRowDeleted = executeUpdate( hql, params.toArray());
        }
        return new KwlReturnObject(true, "Delivery Order Contact Mapping has been deleted successfully.", null, null, totalRowDeleted);
    }

    @Override
    public KwlReturnObject deleteAssetDetailsLinkedWithDeliveryOrder(HashMap<String, Object> requestParams) throws ServiceException {
        int numtotal = 0;
        try {
            String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuerypb = "", delQuery5 = "", delQuery6, delQuery15 = "", delQueryBatch = "", delQuerySerail = "", delQueryBmap = "", delQueryBs = "";
            String batchserialids = "", batchids = "",batchmapids="";
            String serialmapids = "", docids = "";
            if (requestParams.containsKey("doid") && requestParams.containsKey("companyid")) {
                boolean deleteMappingAlso = false;

                if (requestParams.containsKey("deleteMappingAlso")) {
                    deleteMappingAlso = (Boolean) requestParams.get("deleteMappingAlso");
                }

                int numRows = 0;
                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("doid"));

                // Deleting data from asset details table

                String assetQuery = "SELECT ad.id FROM deliveryorder de "
                        + "INNER JOIN  dodetails dod ON de.id=dod.deliveryorder "
                        + "INNER JOIN assetdetailsinvdetailmapping amp ON dod.id=amp.invoicedetailid "
                        + "INNER JOIN assetdetail ad on ad.id=amp.assetdetails "
                        + "WHERE amp.moduleid=27 AND de.company=? and de.id=?";

                List assetList = executeSQLQuery( assetQuery, params8.toArray());
                Iterator assetItr = assetList.iterator();

                while (assetItr.hasNext()) {
                    ArrayList assetParams = new ArrayList();
                    String batchstring = assetItr.next().toString();
                    assetParams.add(batchstring);
                    assetParams.add(requestParams.get("companyid"));

                    String assupdateQuery = "UPDATE assetdetail SET assetsoldflag=0, isleasedocreated=false WHERE id=? AND company=? AND assetsoldflag=2";
                    numRows = executeSQLUpdate( assupdateQuery, assetParams.toArray());

                    assupdateQuery = "UPDATE assetdetail SET isused=0, isleasedocreated=false WHERE id=? AND company=? AND assetsoldflag=1";
                    numRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());

                    assupdateQuery = "UPDATE assetdetail SET isleasedocreated=0 WHERE id=? AND company=? AND assetsoldflag=0";
                    numRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());
          
                    
                    docids += "'" + batchstring + "',";
                }
                if (!StringUtil.isNullOrEmpty(docids)) {
                    docids = docids.substring(0, docids.length() - 1);
                }
                if (!StringUtil.isNullOrEmpty(docids)) {
                    ArrayList params14 = new ArrayList();
                    String myquery4 = " select batchmapid,id from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='F' and transactiontype in (41,27) ";
                    String myquery5 = " select serialid,id from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='F' and transactiontype in (41,27) ";


                    List list4 = executeSQLQuery( myquery4, params14.toArray());
                    Iterator itr4 = list4.iterator();
                    while (itr4.hasNext()) {
                        Object[] objArr = (Object[]) itr4.next();
                        LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
                        if (locationBatchDocumentMapping != null) {
                            HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                            batchUpdateQtyMap.put("qty", locationBatchDocumentMapping.getQuantity());
                            batchUpdateQtyMap.put("id", locationBatchDocumentMapping.getBatchmapid().getId());
                            batchUpdateQtyMap.put("isForconsignment", false);
                            batchUpdateQtyMap.put("consignquantity", 0.0);
                            saveBatchAmountDue(batchUpdateQtyMap);
                        }
                        batchmapids += "'" + objArr[0] + "',";

                    }
                    if (!StringUtil.isNullOrEmpty(batchmapids)) {
                        batchmapids = batchmapids.substring(0, batchmapids.length() - 1);
                    }
                    list4 = executeSQLQuery( myquery5, params14.toArray());
                    itr4 = list4.iterator();
                    while (itr4.hasNext()) {
                        Object[] objArr = (Object[]) itr4.next();
                        SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) get(SerialDocumentMapping.class, (String) objArr[1]);
                        if (serialDocumentMapping != null) {
                            HashMap<String, Object> serialUpdateQtyMap = new HashMap<String, Object>();
                            serialUpdateQtyMap.put("qty", "1");
                            serialUpdateQtyMap.put("id", serialDocumentMapping.getSerialid().getId());
                            serialUpdateQtyMap.put("isForconsignment", false);
                            serialUpdateQtyMap.put("consignquantity", 0.0);
                            saveSerialAmountDue(serialUpdateQtyMap);
                        }
                        serialmapids += "'" + objArr[0] + "',";
                    }
                    if (!StringUtil.isNullOrEmpty(serialmapids)) {
                        serialmapids = serialmapids.substring(0, serialmapids.length() - 1);
                    }
                    ArrayList params15 = new ArrayList();
                    delQuerypb = "delete  from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='F' and transactiontype in (41,27) ";
                    numRows = executeSQLUpdate( delQuerypb, params15.toArray());

                    delQuerypb = "delete  from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='F'and transactiontype in(41,27) ";
                    numRows = executeSQLUpdate( delQuerypb, params15.toArray());

                }
             
//                if (deleteMappingAlso) {

//                String myquery = "select id from dodetails where deliveryorder in (select id from deliveryorder where company = ? and id=?)";
                String myquery = " select dod.id from dodetails dod inner join deliveryorder do on dod.deliveryorder = do.id where do.company = ? and do.id=?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {

                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }

                // Deleting data from assetdetailsinvdetailmapping

                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));

                    String assetMapDelQuery = "DELETE FROM assetdetailsinvdetailmapping WHERE invoicedetailid IN (" + idStrings + ") and moduleid=27 and company=?";
                    numRows = executeSQLUpdate( assetMapDelQuery, assetParams.toArray());
                }
//                }
                numtotal = numRows;
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Delivery Order as its referance child field is not deleted.", ex);//+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Delivery Order has been deleted successfully.", null, null, numtotal);
    }

    public KwlReturnObject deleteDeliveryOrdersBatchSerialDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuerypb = "", delQuery5 = "", delQuery6, delQuery15 = "", delQueryBatch = "", delQuerySerail = "", delQueryBmap = "",delQueryBs="";
        int numtotal = 0, numRows5 = 0;
        List<String> serList=new ArrayList<>();
        String batchserialids = "", batchids = "";
        String serialmapids = "", docids = "";
        String batchmapids = "",consignbatchmapid="",consignserialmapid="",companyid="";
        boolean isConsignment=false;
        boolean islockedinSo=false;
        boolean isSeriallockedinSO=false;
        boolean isbatchlockedinSO=false;
        if (requestParams.containsKey("companyid") && requestParams.get("companyid") != null) {
             companyid = (String) requestParams.get("companyid");
        }
        boolean isnegativestockforlocwar=false;
        ArrayList params13 = new ArrayList();
        params13.add(requestParams.get("companyid"));
        params13.add(requestParams.get("doid"));
        if (requestParams.containsKey("isConsignment") && requestParams.get("isConsignment") != null) {
            isConsignment = Boolean.parseBoolean(requestParams.get("isConsignment").toString());
        }
        if (requestParams.containsKey("isnegativestockforlocwar") && requestParams.get("isnegativestockforlocwar") != null) {
            isnegativestockforlocwar = Boolean.parseBoolean(requestParams.get("isnegativestockforlocwar").toString());
        }
        ArrayList paramslock = new ArrayList();
        paramslock.add(requestParams.get("companyid"));
        paramslock.add(requestParams.get("doid"));
//        String myquerylock = "select sodetails from dodetails where deliveryorder in (select id from deliveryorder where company = ? and id=?)";
        String myquerylock = "SELECT if(ISNULL(dod.sodetails), vcd.salesorderdetail, dod.sodetails) as sodetails FROM deliveryorder d "
                + " INNER JOIN dodetails dod ON dod.deliveryorder=d.id "
                + " left JOIN invoicedetails vcd ON dod.cidetails=vcd.id "
                + " LEFT JOIN sodetails sod ON sod.id=vcd.salesorderdetail "
                + " WHERE d.company =?  and d.id=?";
        List listlock = executeSQLQuery( myquerylock, paramslock.toArray());
        Iterator itrlock = listlock.iterator();
        if (listlock.size() > 0 && !listlock.contains(null)) {
            while (itrlock.hasNext()) {
                //if (itrlock.next() != null) {
                String sodetailstring = itrlock.next().toString();
                if (!StringUtil.isNullOrEmpty(sodetailstring)) {
                    if (!StringUtil.isNullOrEmpty(sodetailstring)) {
                        isSeriallockedinSO = getSalesorderSerialStatus(sodetailstring, companyid);   //get sales order status whether is locked or not
                        getSalesorderSerialS(sodetailstring, companyid,serList);   //get sales order status whether is locked or not
                    }
                    if (!StringUtil.isNullOrEmpty(sodetailstring)) {
                        isbatchlockedinSO = getSalesorderBatchStatus(sodetailstring, companyid);   //get sales order status whether is locked or not
                    }
                }
            }
        }
//        String myquery3 = "select id from dodetails where deliveryorder in (select id from deliveryorder where company = ? and id=?)";
        String myquery3 = "select dod.id from dodetails dod inner join deliveryorder do on dod.deliveryorder = do.id where do.company = ? and do.id=?";
        List listBatch = executeSQLQuery( myquery3, params13.toArray());
        Iterator itrBatch = listBatch.iterator();
        while (itrBatch.hasNext()) {
            String batchstring = itrBatch.next().toString();
            docids += "'" + batchstring + "',";
        }
        if (!StringUtil.isNullOrEmpty(docids)) {
            docids = docids.substring(0, docids.length() - 1);
        }
        if (!StringUtil.isNullOrEmpty(docids)) {
            ArrayList params14 = new ArrayList();
            String myquery4 = " select batchmapid,id,stocktype from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='F'";
            String myquery5 = " select serialid,id,stocktype from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='F' ";
            
            
            List list4 = executeSQLQuery( myquery4, params14.toArray());
            Iterator itr4 = list4.iterator();
            while (itr4.hasNext()) {
                Object[] objArr = (Object[]) itr4.next();
                LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
                if (locationBatchDocumentMapping != null) {
                    int stocktype=(Integer) objArr[2];
                    HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                    if(stocktype==0){
                         batchUpdateQtyMap.put("consignquantity", locationBatchDocumentMapping.getQuantity());
                    }else{
                        batchUpdateQtyMap.put("qty", locationBatchDocumentMapping.getQuantity());
                          batchUpdateQtyMap.put("consignquantity", 0.0);
                    }
//                    batchUpdateQtyMap.put("qty", locationBatchDocumentMapping.getQuantity());
                    String productid=locationBatchDocumentMapping.getBatchmapid() != null ?locationBatchDocumentMapping.getBatchmapid().getProduct():null; 
                    boolean isBatchSerialforProduct=false;
                    if(!StringUtil.isNullOrEmpty(productid)){
                        Product product= (Product) get(Product.class, productid);
                        isBatchSerialforProduct= product != null ? (product.isIsBatchForProduct() || product.isIsSerialForProduct()) :false;
                    } // Now we checking negative stock at item level. if batch or serial is activated we are not allowing negative stock
                    if (isnegativestockforlocwar && !isBatchSerialforProduct) {
                        batchUpdateQtyMap.put("quantity", locationBatchDocumentMapping.getQuantity());
                    }
                    if (locationBatchDocumentMapping.getBatchmapid() != null) {
                        batchUpdateQtyMap.put("id", locationBatchDocumentMapping.getBatchmapid().getId());
                    }
                    if(isbatchlockedinSO){ //if serial no are blocked in salesorder then only increase lock Quantity
                        String batchId=locationBatchDocumentMapping.getBatchmapid().getId();
                        boolean increaseQty=getSalesorderLockStatus(locationBatchDocumentMapping.getDocumentid(),batchId);
                        if(increaseQty){
                        batchUpdateQtyMap.put("lockquantity", locationBatchDocumentMapping.getQuantity()); //in case of deleting DO increase lock Quantity
                    }
                    }
                    batchUpdateQtyMap.put("isForconsignment", false);
//                    batchUpdateQtyMap.put("consignquantity", 0.0);
                    saveBatchAmountDue(batchUpdateQtyMap);
                }
                batchmapids += "'" + objArr[0] + "',";

            }
            if (!StringUtil.isNullOrEmpty(batchmapids)) {
                batchmapids = batchmapids.substring(0, batchmapids.length() - 1);
            }
            String serialDocumentMappingId="";
            List list5 = executeSQLQuery( myquery5, params14.toArray());
            Iterator itr5 = list5.iterator();
            while (itr5.hasNext()) {
                Object[] objArr = (Object[]) itr5.next();
                SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) get(SerialDocumentMapping.class, (String) objArr[1]);
                if (serialDocumentMapping != null) {
                    HashMap<String, Object> serialUpdateQtyMap = new HashMap<String, Object>();
                    int srStocktyep = (Integer) objArr[2];
                    if (srStocktyep==0) {
                        serialUpdateQtyMap.put("consignquantity", "1");
                    } else {
                        if (serialDocumentMapping.getSerialid().getQuantitydue() == 0) {
                            serialUpdateQtyMap.put("qty", "1");
                        }
                        serialUpdateQtyMap.put("consignquantity", 0.0);
                    }
                    serialUpdateQtyMap.put("id", serialDocumentMapping.getSerialid().getId());
                    serialUpdateQtyMap.put("isForconsignment", false);
                    if (isSeriallockedinSO && serList != null && serList.size() > 0 && serList.contains(serialDocumentMapping.getSerialid().getId())) { //if serial no are blocked in salesorder then only increase lock Quantity
                     serialUpdateQtyMap.put("lockquantity", "1"); //in case of deleting DO increase lock Quantity
                    }
//                    serialUpdateQtyMap.put("consignquantity", 0.0);
                    saveSerialAmountDue(serialUpdateQtyMap);
                }
                serialmapids += "'" + objArr[0] + "',";
            }
            serialDocumentMappingId = getSerialDocumentIds(list4);
            if (!StringUtil.isNullOrEmpty(serialmapids)) {
                serialmapids = serialmapids.substring(0, serialmapids.length() - 1);
            }
            ArrayList params15 = new ArrayList();
            delQuerypb = "delete  from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='F' ";
            int numRows = executeSQLUpdate( delQuerypb, params15.toArray());

            delQuerypb = "delete  from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='F' ";
            numRows = executeSQLUpdate( delQuerypb, params15.toArray());

            if (!StringUtil.isNullOrEmpty(serialDocumentMappingId)) {
                serialDocumentMappingId = serialDocumentMappingId.substring(0, serialDocumentMappingId.length() - 1);
                ArrayList params1 = new ArrayList();
                delQuery1 = "delete  from serialcustomdata where serialdocumentmappingid in (" + serialDocumentMappingId + ")";
                int numRows1 = executeSQLUpdate( delQuery1, params1.toArray());
            }
            
        }    
        if (isConsignment) {  //delete the batch and serial detail wich are generated for stock movment to customer warehouse
            if (!StringUtil.isNullOrEmpty(docids)) {
                ArrayList params14 = new ArrayList();
                String myquery4 = " select batchmapid, id from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='T' ";
                String myquery5 = " select serialid, id from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='T' ";
                List list4 = executeSQLQuery( myquery4, params14.toArray());
                Iterator itr4 = list4.iterator();
                while (itr4.hasNext()) {
                    Object[] objArr = (Object[]) itr4.next();
                    LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
                    if (locationBatchDocumentMapping != null) {
                        NewProductBatch productBatch = locationBatchDocumentMapping.getBatchmapid();
                        if (productBatch != null) {
                            productBatch.setQuantitydue(authHandler.roundQuantity((productBatch.getQuantitydue() - locationBatchDocumentMapping.getQuantity()),companyid));
                            productBatch.setQuantity(productBatch.getQuantity() - locationBatchDocumentMapping.getQuantity());
                        }
                        saveOrUpdate(productBatch);
                    }
                    consignbatchmapid += "'" + objArr[0] + "',";
                }
                if (!StringUtil.isNullOrEmpty(consignbatchmapid)) {
                    consignbatchmapid = consignbatchmapid.substring(0, consignbatchmapid.length() - 1);
                }
                List list5 = executeSQLQuery( myquery5, params14.toArray());
                Iterator  itr5 = list5.iterator();
                while (itr5.hasNext()) {
                    Object[] objArr = (Object[]) itr5.next();
                    SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) get(SerialDocumentMapping.class, (String) objArr[1]);
                    if (serialDocumentMapping != null) {
                        NewBatchSerial batchSerial = serialDocumentMapping.getSerialid();
                        if (batchSerial != null) {
                            batchSerial.setQuantitydue(0);
                        }
                        saveOrUpdate(batchSerial);
                    }
                    consignserialmapid += "'" + objArr[0] + "',";
                }
                if (!StringUtil.isNullOrEmpty(consignserialmapid)) {
                    consignserialmapid = consignserialmapid.substring(0, consignserialmapid.length() - 1);
                }
                ArrayList paramslmap = new ArrayList();
                delQuerypb = "delete  from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='T' ";
                int numRowslmap = executeSQLUpdate( delQuerypb, paramslmap.toArray());
                
                ArrayList paramssmap = new ArrayList();
                delQuerypb = "delete  from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='T' ";
                int numRows = executeSQLUpdate( delQuerypb, paramssmap.toArray());

            }
         
            if (!StringUtil.isNullOrEmpty(consignserialmapid)) {
                delQueryBs = " delete from NewBatchSerial where id in(" + consignserialmapid + ") AND quantitydue = 0";
                int numRowsSerial = executeUpdate(delQueryBs);
            }
        }
        

        return new KwlReturnObject(true, "Delivery Order has been deleted successfully.", null, null, numtotal);
    }
    public String getSerialDocumentIds(List list) {
        String serialDocument = "";
        String serialDocumentMappingId = "";
        Iterator itr = list.iterator();
        while (itr.hasNext()) {
            Object[] objArr = (Object[]) itr.next();
            for (int i = 0; i < objArr.length-1; i++) {
                if (objArr[i] != null) {
                    SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) get(SerialDocumentMapping.class, (String) objArr[i]);
                    if (serialDocumentMapping != null) {
                        serialDocument = serialDocumentMapping.getId().toString();
                        serialDocumentMappingId += "'" + serialDocument + "',";

                    }
                }
            }

        }
        return serialDocumentMappingId;
    }
    
    public KwlReturnObject deleteInvoicesBatchSerialDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuerypb = "", delQuery5 = "", delQuery6, delQuery15 = "", delQueryBatch = "", delQuerySerail = "", delQueryBmap = "",delQueryBs="";
        int numtotal = 0, numRows5 = 0;
        String batchserialids = "", batchids = "";
        String serialmapids = "", docids = "";
        String batchmapids = "",consignbatchmapid="",consignserialmapid="";
        boolean isConsignment=false;
        ArrayList params13 = new ArrayList();
        params13.add(requestParams.get("companyid"));
        params13.add(requestParams.get("invoiceid"));
           if (requestParams.containsKey("isConsignment") && requestParams.get("isConsignment") != null) {
            isConsignment = Boolean.parseBoolean(requestParams.get("isConsignment").toString());
        }
//        String myquery3 = "select id from invoicedetails where invoice in (select id from invoice where company = ? and id=?)";
        String myquery3 = "select invd.id from invoicedetails invd inner join invoice inv on invd.invoice=inv.id where inv.company = ? and inv.id=?";
        List listBatch = executeSQLQuery( myquery3, params13.toArray());
        Iterator itrBatch = listBatch.iterator();
        while (itrBatch.hasNext()) {
            String batchstring = itrBatch.next().toString();
            docids += "'" + batchstring + "',";
        }
        if (!StringUtil.isNullOrEmpty(docids)) {
            docids = docids.substring(0, docids.length() - 1);
        }
        if (!StringUtil.isNullOrEmpty(docids)) {
            ArrayList params14 = new ArrayList();
            String myquery4 = " select batchmapid,id from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='F'";
            String myquery5 = " select serialid,id from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='F' ";
            
            
            List list4 = executeSQLQuery( myquery4, params14.toArray());
            Iterator itr4 = list4.iterator();
            while (itr4.hasNext()) {
                Object[] objArr = (Object[]) itr4.next();
                LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
                if (locationBatchDocumentMapping != null) {
                    HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                    batchUpdateQtyMap.put("qty", locationBatchDocumentMapping.getQuantity());
                    batchUpdateQtyMap.put("id", locationBatchDocumentMapping.getBatchmapid()!=null?locationBatchDocumentMapping.getBatchmapid().getId():"");
                    batchUpdateQtyMap.put("isForconsignment", false);
                    batchUpdateQtyMap.put("consignquantity", locationBatchDocumentMapping.getQuantity());
                    saveBatchAmountDue(batchUpdateQtyMap);
                }
                batchmapids += "'" + objArr[0] + "',";

            }
            if (!StringUtil.isNullOrEmpty(batchmapids)) {
                batchmapids = batchmapids.substring(0, batchmapids.length() - 1);
            }
            list4 = executeSQLQuery( myquery5, params14.toArray());
            itr4 = list4.iterator();
            while (itr4.hasNext()) {
                Object[] objArr = (Object[]) itr4.next();
                SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) get(SerialDocumentMapping.class, (String) objArr[1]);
                if (serialDocumentMapping != null) {
                    HashMap<String, Object> serialUpdateQtyMap = new HashMap<String, Object>();
                    serialUpdateQtyMap.put("qty", "1");
                    serialUpdateQtyMap.put("id", serialDocumentMapping.getSerialid().getId());
                    serialUpdateQtyMap.put("isForconsignment", false);
                    serialUpdateQtyMap.put("consignquantity", 1.0);
                    saveSerialAmountDue(serialUpdateQtyMap);
                }
                serialmapids += "'" + objArr[0] + "',";
            }
            if (!StringUtil.isNullOrEmpty(serialmapids)) {
                serialmapids = serialmapids.substring(0, serialmapids.length() - 1);
            }
        }
        ArrayList params15 = new ArrayList();
        delQuerypb = "delete  from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='F' ";
        int numRows = executeSQLUpdate( delQuerypb, params15.toArray());

        delQuerypb = "delete  from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='F' ";
        numRows = executeSQLUpdate( delQuerypb, params15.toArray());
     
        return new KwlReturnObject(true, "Delivery Order has been deleted successfully.", null, null, numtotal);
    }
    public KwlReturnObject getDeliveryOrdersBatchDetails(HashMap<String, Object> requestParams) throws ServiceException {
            String docids = "";
            List list= new ArrayList();
    //        String bewatcArrrhmapids = "";
            ArrayList params = new ArrayList();
            params.add(requestParams.get("companyid"));
            params.add(requestParams.get("doid"));
//            String query = "select id from dodetails where deliveryorder in (select id from deliveryorder where company = ? and id=?)";
            String query = "select dod.id from dodetails dod inner join deliveryorder do on dod.deliveryorder = do.id where do.company = ? and do.id=?";
            List listBatch = executeSQLQuery( query, params.toArray());
            Iterator itrBatch = listBatch.iterator();
            String batchstring="";
            while (itrBatch.hasNext()) {
            DeliveryOrderDetail deliveryOrderDetail=(DeliveryOrderDetail) get(DeliveryOrderDetail.class, (String) itrBatch.next());
            if(deliveryOrderDetail!=null){
                batchstring = deliveryOrderDetail.getID();
                docids += "'" + batchstring + "',";
            } 

            }
            if (!StringUtil.isNullOrEmpty(docids)) {
                docids = docids.substring(0, docids.length() - 1);
            }
            if (!StringUtil.isNullOrEmpty(docids)) {
//                ArrayList params14 = new ArrayList();
                String myquery4 = "from LocationBatchDocumentMapping where documentid in (" + docids + ") ";
    //            String myquery5 = " select serialid,id from serialdocumentmapping where documentid in (" + docids + ") ";


             list = executeQuery( myquery4);             
            }   
        return new KwlReturnObject(true, "Delivery Order has been deleted successfully.", null, list, list.size());
    }
        
    public void saveBatchAmountDue(HashMap<String, Object> productbatchMap) throws ServiceException {
        try {
            NewProductBatch productBatch = new NewProductBatch();
            String itemID = (String) productbatchMap.get("id");
            Double itemQty=0.0,consignquantity=0.0, lockQty = 0.0;
            if (productbatchMap.containsKey("id") && !StringUtil.isNullOrEmpty(itemID)) {
                productBatch = (NewProductBatch) get(NewProductBatch.class, itemID);
                if (productbatchMap.containsKey("qty")) {
                    itemQty = (Double) productbatchMap.get("qty");
                }
                if (productbatchMap.containsKey("quantity") && productbatchMap.get("quantity")!=null) {
                    Double quantity = (Double) productbatchMap.get("quantity");
                    productBatch.setQuantity(productBatch.getQuantity() + quantity);
                }
                
                productBatch.setQuantitydue(authHandler.roundQuantity((productBatch.getQuantitydue() + itemQty),productBatch.getCompany().getCompanyID()));
                if (productbatchMap.containsKey("lockquantity")) {
                    lockQty = (Double) productbatchMap.get("lockquantity");
                    productBatch.setLockquantity(productBatch.getLockquantity() + lockQty);
                }
                if (productbatchMap.containsKey("consignquantity") && productbatchMap.get("consignquantity")!=null) {
                    consignquantity = (Double) productbatchMap.get("consignquantity");
                }
                productBatch.setConsignquantity(productBatch.getConsignquantity()+consignquantity);
                if(productbatchMap.containsKey("isForconsignment") && productbatchMap.get("isForconsignment")!=null){
                productBatch.setIsForconsignment(Boolean.parseBoolean(productbatchMap.get("isForconsignment").toString()));
                }
                saveOrUpdate(productBatch);
              
            }
        } catch (HibernateObjectRetrievalFailureException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccCommonTablesDAOImpl.saveBatchAmountDue : " + ex.getMessage(), ex);
        }
    }
    public void saveSerialAmountDue(HashMap<String, Object> productSerialMap) throws ServiceException {
        try {
            NewBatchSerial newBatchSerial = new NewBatchSerial();
            String itemID = (String) productSerialMap.get("id");
            Double itemQty = 0.0, consignquantity = 0.0;
            if (productSerialMap.containsKey("id") && !StringUtil.isNullOrEmpty(itemID)) {
                newBatchSerial = (NewBatchSerial) get(NewBatchSerial.class, itemID);
                if (productSerialMap.containsKey("qty") && !StringUtil.isNullOrEmpty((String) productSerialMap.get("qty"))) {
                    itemQty = Double.parseDouble((String) productSerialMap.get("qty"));
                }
//                Double itemQty = Double.parseDouble((String)productSerialMap.get("qty"));
                newBatchSerial.setQuantitydue(newBatchSerial.getQuantitydue() + itemQty);
                if (productSerialMap.containsKey("consignquantity")&& productSerialMap.get("consignquantity")!=null) {
                    consignquantity =  Double.parseDouble(productSerialMap.get("consignquantity").toString());
                }
                newBatchSerial.setConsignquantity(newBatchSerial.getConsignquantity() + consignquantity);
                if (productSerialMap.containsKey("isForconsignment") && productSerialMap.get("isForconsignment")!=null) {
                    newBatchSerial.setIsForconsignment(Boolean.parseBoolean(productSerialMap.get("isForconsignment").toString()));
                }
                if (productSerialMap.containsKey("lockquantity") && !StringUtil.isNullOrEmpty((String) productSerialMap.get("lockquantity"))) {
                    Double lockQty = Double.parseDouble((String) productSerialMap.get("lockquantity"));
                    newBatchSerial.setLockquantity(newBatchSerial.getLockquantity() + lockQty);
                }
                if (productSerialMap.containsKey("approvalstatus") && (QaApprovalStatus) productSerialMap.get("approvalstatus") != null) {
                   newBatchSerial.setQaApprovalstatus((QaApprovalStatus) productSerialMap.get("approvalstatus"));
                }
            }
            saveOrUpdate(newBatchSerial);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AccCommonTablesDAOImpl.saveSerialAmountDue : " + ex.getMessage(), ex);
        }
    }
    @Override
    public KwlReturnObject deleteWorkOrdersBatchSerialDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "", delQuery6, delQuery15 = "", delQueryBatch = "", delQuerySerail = "",delQueryBmap="";
        int numtotal = 0, numRows5 = 0;
        String batchserialids = "", batchids = "";;
        ArrayList params13 = new ArrayList();
        params13.add(requestParams.get("companyid"));
        params13.add(requestParams.get("woid"));
//        String myquery3 = "select batch from assetmaintenanceworkorderdetail where assetmaintenanceworkorder in (select id from assetmaintenanceworkorder where company = ? and id=?) and batch is not null";
        String myquery3 = "select awod.batch from assetmaintenanceworkorderdetail awod inner join assetmaintenanceworkorder awo on awod.assetmaintenanceworkorder=awo.id where awo.company = ? and awo.id=? and awod.batch is not null";
        List listBatch = executeSQLQuery( myquery3, params13.toArray());
        Iterator itrBatch = listBatch.iterator();
        while (itrBatch.hasNext()) {
            String batchstring = itrBatch.next().toString();
            batchids += "'" + batchstring + "',";
        }
        if (!StringUtil.isNullOrEmpty(batchids)) {
            batchids = batchids.substring(0, batchids.length() - 1);
        }
        if (!StringUtil.isNullOrEmpty(batchids)) {
            ArrayList params14 = new ArrayList();
            String myquery4 = " select id from batchserial where batch in (" + batchids + ") ";
            List list4 = executeSQLQuery( myquery4, params14.toArray());
            Iterator itr4 = list4.iterator();
            while (itr4.hasNext()) {

                String batchstringids = itr4.next().toString();
                batchserialids += "'" + batchstringids + "',";
            }
            if (!StringUtil.isNullOrEmpty(batchserialids)) {
                batchserialids = batchserialids.substring(0, batchserialids.length() - 1);
            }
            
            ArrayList paramsBmap = new ArrayList();
            delQueryBmap = "delete  from salespurchasebatchmapping where salesBatch in (" + batchids + ") ";
            int numRowsBmap = executeSQLUpdate( delQueryBmap, paramsBmap.toArray());
            System.out.println("numRowsBmap : "+numRowsBmap);
            
        }
        if (!StringUtil.isNullOrEmpty(batchserialids)) {
            ArrayList params15 = new ArrayList();
            delQuery15 = "delete  from batchserialmapping where salesSerial in (" + batchserialids + ") ";
            int numRows8 = executeSQLUpdate( delQuery15, params15.toArray());
            System.out.println("numRows8 : "+numRows8);

            ArrayList paramsSerial = new ArrayList();
            delQuerySerail = " delete from batchserial where id in(" + batchserialids + ") ";
            int numRowsSerial = executeSQLUpdate( delQuerySerail, paramsSerial.toArray());
            System.out.println("numRowsSerial : "+numRowsSerial);
        }

        return new KwlReturnObject(true, "batchserial detail has been deleted successfully.", null, null, numtotal);
    }

    @Override
    public KwlReturnObject deleteDeliveryOrdersPermanent(HashMap<String, Object> requestParams) throws ServiceException, AccountingException {

        String errormsg = "Cannot delete Delivery Order as its referance child field is not deleted.";
        String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "", delQuery6, delQuery15 = "", delQueryBatch = "", delQuerySerail = "",delQueryRetBmap="";
        int numtotal = 0, numRows5 = 0;
        String batchserialids = "", batchids = "";
        String companyid = (String) requestParams.get("companyid");
        try {
            if (requestParams.containsKey("doid") && requestParams.containsKey("companyid")) {

                boolean isFixedAsset = false;
                boolean isBatchSerial = false;
                boolean isConsignment = false;
                if (requestParams.containsKey("isFixedAsset") && requestParams.get("isFixedAsset") != null) {
                    isFixedAsset = (Boolean) requestParams.get("isFixedAsset");
                }

                boolean isLeaseFixedAsset = false;
                if (requestParams.containsKey("isLeaseFixedAsset") && requestParams.get("isLeaseFixedAsset") != null) {
                    isLeaseFixedAsset = (Boolean) requestParams.get("isLeaseFixedAsset");
                }
                if (requestParams.containsKey("isConsignment") && requestParams.get("isConsignment") != null) {
                    isConsignment = (Boolean) requestParams.get("isConsignment");
                }

                if (requestParams.containsKey("isBatchSerial") && requestParams.get("isBatchSerial") != null) {
                    isBatchSerial = (Boolean) requestParams.get("isBatchSerial");
                }

                int numRows = 0;
                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("doid"));

                // Deleting data from asset details table

                if (isFixedAsset || isLeaseFixedAsset) {
                    String assetQuery = "SELECT ad.id FROM deliveryorder de "
                            + "INNER JOIN  dodetails dod ON de.id=dod.deliveryorder "
                            + "INNER JOIN assetdetailsinvdetailmapping amp ON dod.id=amp.invoicedetailid "
                            + "INNER JOIN assetdetail ad on ad.id=amp.assetdetails "
                            + "WHERE amp.moduleid=27 AND de.company=? and de.id=?";

                    List assetList = executeSQLQuery( assetQuery, params8.toArray());
                    Iterator assetItr = assetList.iterator();

                    while (assetItr.hasNext()) {
                        ArrayList assetParams = new ArrayList();
                        String assetDetailId = "";
                        Object object = (Object) assetItr.next();
                        assetDetailId = object.toString();

                        assetParams.add(assetDetailId);
                        assetParams.add(requestParams.get("companyid"));
                        String docids = "", docid = "", delAssetBatchMap = "", delAssetSerialMap;
                        String batchmapids = "", serialAssetmapids = "";
                        ArrayList assetBatchParams = new ArrayList();
                        assetBatchParams.add(assetDetailId);

                        String assupdateQuery = "UPDATE assetdetail SET assetsoldflag=0, isleasedocreated=false WHERE id=? AND company=? AND assetsoldflag=2";// make assetsoldflag =0 if only FA delivery order of this asset is created
                        numRows = executeSQLUpdate( assupdateQuery, assetParams.toArray());

                        assupdateQuery = "UPDATE assetdetail SET isused=0, isleasedocreated=false WHERE id=? AND company=? AND assetsoldflag=1";// if FA Sales invoice is created for this asset firstly, and then FA delivery order is created, then in deletion of this FA delivery order you need to set isused =0;
                        numRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());

                        assupdateQuery = "UPDATE assetdetail SET isleasedocreated=false WHERE id=? AND company=? AND assetsoldflag=0"; // set isleasedocreated=false if lease do is created and asset is not sold
                        numRows += executeSQLUpdate( assupdateQuery, assetParams.toArray());

                        if (!StringUtil.isNullOrEmpty(assetDetailId)) {
                            docid += "'" + assetDetailId + "',";
                        }
                        if (!StringUtil.isNullOrEmpty(docid)) {
                            docids = docid.substring(0, docid.length() - 1);
                        }
                        if (!StringUtil.isNullOrEmpty(docids)) {
                            ArrayList params14 = new ArrayList();
                            String myquery4 = " select batchmapid,id from locationbatchdocumentmapping where documentid in (" + docids + ") and transactiontype in (41,27) ";
                            String myquery5 = " select serialid,id from serialdocumentmapping where documentid in (" + docids + ") and transactiontype in (41,27) ";


                            List list4 = executeSQLQuery( myquery4, params14.toArray());
                            Iterator itr4 = list4.iterator();
                            while (itr4.hasNext()) {
                                Object[] objArr = (Object[]) itr4.next();
                                LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
                                if (locationBatchDocumentMapping != null) {
                                    HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                                    batchUpdateQtyMap.put("qty", locationBatchDocumentMapping.getQuantity());
                                    batchUpdateQtyMap.put("id", locationBatchDocumentMapping.getBatchmapid().getId());
                                    saveBatchAmountDue(batchUpdateQtyMap);
                                }
                                batchmapids += "'" + objArr[0] + "',";

                            }
                            if (!StringUtil.isNullOrEmpty(batchmapids)) {
                                batchmapids = batchmapids.substring(0, batchmapids.length() - 1);
                            }
                            list4 = executeSQLQuery( myquery5, params14.toArray());
                            itr4 = list4.iterator();
                            while (itr4.hasNext()) {
                                Object[] objArr = (Object[]) itr4.next();
                                SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) get(SerialDocumentMapping.class, (String) objArr[1]);
                                if (serialDocumentMapping != null) {
                                    HashMap<String, Object> serialUpdateQtyMap = new HashMap<String, Object>();
                                    serialUpdateQtyMap.put("qty", "1");
                                    serialUpdateQtyMap.put("id", serialDocumentMapping.getSerialid().getId());
                                    saveSerialAmountDue(serialUpdateQtyMap);
                                }
                                serialAssetmapids += "'" + objArr[0] + "',";
                            }
                            if (!StringUtil.isNullOrEmpty(serialAssetmapids)) {
                                serialAssetmapids = serialAssetmapids.substring(0, serialAssetmapids.length() - 1);
                            }
                        }
                        ArrayList params15 = new ArrayList();
                        delAssetBatchMap = "delete  from locationbatchdocumentmapping where documentid in (" + docids + ") and transactiontype in (41,27) ";
                        numRows += executeSQLUpdate( delAssetBatchMap, params15.toArray());

                        delAssetSerialMap = "delete  from serialdocumentmapping where documentid in (" + docids + ") and transactiontype in (41,27) ";
                        numRows = executeSQLUpdate( delAssetSerialMap, params15.toArray());

                    }

//                    if (isLeaseFixedAsset) {
//                        String contractDeleteQuery = "  DELETE from docontractmapping where company=? and deliveryorder=? ";
//                        numRows += executeSQLUpdate( contractDeleteQuery, params8.toArray());
//                    }
                }
                
           
                
            String contractDeleteQuery = "  DELETE from docontractmapping where company=? and deliveryorder=? ";
            numRows += executeSQLUpdate( contractDeleteQuery, params8.toArray());
            
            contractDeleteQuery = "  DELETE from invoicecontractmapping where company=? and deliveryorder=? ";
            numRows += executeSQLUpdate( contractDeleteQuery, params8.toArray());
            
//                String myquery = "select id from dodetails where deliveryorder in (select id from deliveryorder where company = ? and id=?)";
                String myquery = "select dod.id from dodetails dod inner join deliveryorder do on dod.deliveryorder = do.id where do.company = ? and do.id=?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                String sodidStrings = "";
                while (itr.hasNext()) {

                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                    // While deleting the  DO,wherein sales order is linked in which Quantities are blocked,the Quantites are returned again as block Quanity
                    String sodQuery = "select sodetails,baseuomdeliveredquantity from dodetails where  id=? ";
                    List solist = executeSQLQuery( sodQuery, new Object[]{invdid});
                    Iterator soitr = solist.iterator();
                    String sonumber = "";
                    while (soitr.hasNext()) {
                        Object[] sodObj = (Object[]) soitr.next();
                        String sodid = sodObj[0] != null ? sodObj[0].toString() : "";
                        Double doquntity = sodObj[1] != null ? Double.parseDouble(sodObj[1].toString()) : 0;
                        if (!StringUtil.isNullOrEmpty(sodid)) {
                            SalesOrderDetail sod = (SalesOrderDetail) get(SalesOrderDetail.class, sodid);
//                            String query = "select sonumber from salesorder where id in (select salesorder from sodetails where id=? and company=?) select so.sonumber from salesorder so inner join sodetails sod on so.id=sod.salesorder where sod.id=\"0000000051b8af6a0151b8e8dc570004\" and sod.company=\"a86a7524-20d5-4bcf-96f6-9bf4f270a5f3\";";
                            String query = "select so.sonumber from salesorder so inner join sodetails sod on so.id=sod.salesorder where sod.id=? and sod.company=?";
                            List slist = executeSQLQuery( query, new Object[]{sodid, companyid});
                            Iterator sitr = slist.iterator();
                            while (sitr.hasNext()) {
                                sonumber = sitr.next().toString();
                                if (!StringUtil.isNullOrEmpty(sonumber)) {
                                    Boolean isLock = getSalesorderStatus(sonumber, companyid);   //get sales order status whether is locked or not
                                    if (isLock) { //if in salesorder block quantity option true or not
                                        if (sod.getProduct().getProducttype().getID().equals(Producttype.ASSEMBLY)) {   //check type of product if assembly type of product is there then update quantity in assemby lock quantity for its sub products
                                            KwlReturnObject result2 = getAssemblySubProductList(sod.getProduct().getID());
                                            List subAssProdlist = result2.getEntityList();
                                            Iterator subAssProditr = subAssProdlist.iterator();
                                            while (subAssProditr.hasNext()) {
                                                Object[] subAssProdObj = (Object[]) subAssProditr.next();
                                                String assmblyid = subAssProdObj[0].toString();
                                                updateAssemblyLockQuantityAfterDeletion(assmblyid, doquntity);  //update the quantity for assbley auantity if its delivered

                                            }
                                        }
                                        updateSOLockQuantityAfterDeletion(sodid, doquntity, companyid);  //updte salesorder lock  quntity for all type of products
//                                        if (isConsignment) {          //  already increased lock quantity in deleteDeliveryOrdersBatchSerialDetails () method
//                                            sodidStrings += "'" + sodid + "',";
//                                            if (!StringUtil.isNullOrEmpty(sodidStrings)) {
//                                                sodidStrings = sodidStrings.substring(0, sodidStrings.length() - 1);
//                                            }
//                                            updateSOLockBatchSerialDetailsAfterDeletion(sodidStrings, doquntity, companyid);  //updte salesorder lock  quntity for all type of products
//                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }
                /**
                 * Delete GST Fields for India.
                 */
                deleteGstTaxClassDetails(idStrings);
                // For deleting Wastage Details of DO
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    ArrayList wastageParams = new ArrayList();
                    String delWastageDetailQuery = "delete  from wastagedetails where deliveryorderdetail in (" + idStrings + ")";
                    int numRows2 = executeSQLUpdate(delWastageDetailQuery, wastageParams.toArray());
                }
                
                // Deleting data from assetdetailsinvdetailmapping

                if (!StringUtil.isNullOrEmpty(idStrings) && (isFixedAsset || isLeaseFixedAsset)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));

                    String assetMapDelQuery = "DELETE FROM assetdetailsinvdetailmapping WHERE invoicedetailid IN (" + idStrings + ") and moduleid=27 and company=?";
                    numRows += executeSQLUpdate( assetMapDelQuery, assetParams.toArray());
                }


                ArrayList params13 = new ArrayList();
                params13.add(requestParams.get("companyid"));
                params13.add(requestParams.get("doid"));
//                 String myquery3 = "select batch from dodetails where deliveryorder in (select id from deliveryorder where company = ? and id=?) and batch is not null";
                String myquery3 = "select dod.batch from dodetails dod inner join deliveryorder do on dod.deliveryorder=do.id where do.company = ? and do.id=? and dod.batch is not null";
                List listBatch = executeSQLQuery( myquery3, params13.toArray());
                Iterator itrBatch = listBatch.iterator();
                while (itrBatch.hasNext()) {
                    String batchstring = itrBatch.next().toString();
                    batchids += "'" + batchstring + "',";
                }
                if (!StringUtil.isNullOrEmpty(batchids)) {
                    batchids = batchids.substring(0, batchids.length() - 1);
                }
                if (!StringUtil.isNullOrEmpty(batchids)) {
                    ArrayList params14 = new ArrayList();
                    String myquery4 = " select id from batchserial where batch in (" + batchids + ") ";
                    List list4 = executeSQLQuery( myquery4, params14.toArray());
                    Iterator itr4 = list4.iterator();
                    while (itr4.hasNext()) {

                        String batchstringids = itr4.next().toString();
                        batchserialids += "'" + batchstringids + "',";
                    }
                    if (!StringUtil.isNullOrEmpty(batchserialids)) {
                        batchserialids = batchserialids.substring(0, batchserialids.length() - 1);
                    }
                }
                if (!StringUtil.isNullOrEmpty(batchserialids)) {
                    ArrayList params15 = new ArrayList();
                    delQuery15 = "delete  from batchserialmapping where salesSerial in (" + batchserialids + ") ";
                    int numRows8 = executeSQLUpdate( delQuery15, params15.toArray());

                    ArrayList paramsSerial = new ArrayList();
                    delQuerySerail = " delete from batchserial where id in(" + batchserialids + ") ";
                    int numRowsSerial = executeSQLUpdate( delQuerySerail, paramsSerial.toArray());
                }
                
               
                /*
                * function for deleting DO with pick pack ship and updating inventory stock quantities               
                */
                 int packingandshippingdelrows=0;
                String doidforcustomdata = requestParams.get("doid").toString(); //storing doid for queries below this function once do is deleted
                if (requestParams.containsKey("status") && requestParams.get("status") != null) {
                    String status = requestParams.get("status").toString();
                    if (requestParams.containsKey("isPickPackShipOn") && requestParams.get("isPickPackShipOn") != null && "true".equalsIgnoreCase(requestParams.get("isPickPackShipOn").toString()) && (!StringUtil.isNullOrEmpty(status) && status.equalsIgnoreCase("Picked") || status.equalsIgnoreCase("Packed") || status.equalsIgnoreCase("Shipped"))) {
                        packingandshippingdelrows = deleteDOWithPickPackandShip(requestParams);
                    }
                }
                ArrayList params5 = new ArrayList();
                params5.add(requestParams.get("companyid"));
                params5.add(requestParams.get("doid"));
//                delQuery5 = " delete from dodetails where deliveryorder in (select id from deliveryorder where company =?  and id=?) ";
                delQuery5 = " delete dod from dodetails dod inner join deliveryorder do on do.id=dod.deliveryorder where do.company =? and do.id=?";
                numRows5 = executeSQLUpdate( delQuery5, params5.toArray());
                boolean isMRPModuleActivated = false;
                String inventoryjeid = "";
                boolean isPerpetualValuationActivated = false;
                if (requestParams.containsKey("isPerpetualValuationActivated") && requestParams.get("isPerpetualValuationActivated") != null) {
                    isPerpetualValuationActivated = Boolean.parseBoolean(requestParams.get("isPerpetualValuationActivated").toString());
                }
                if (requestParams.containsKey("isMRPModuleActivated") && requestParams.get("isMRPModuleActivated") != null) {
                    isMRPModuleActivated = Boolean.parseBoolean(requestParams.get("isMRPModuleActivated").toString());
                }
                if (isMRPModuleActivated || isPerpetualValuationActivated) {
                    if (requestParams.containsKey("inventoryjeid") && requestParams.get("inventoryjeid") != null && !StringUtil.isNullOrEmpty(requestParams.get("inventoryjeid").toString())) {
                        inventoryjeid = requestParams.get("inventoryjeid").toString();
                        String query = "update deliveryorder set inventoryje=NULL where id = ? and company = ?";
                        executeSQLUpdate(query, new Object[]{requestParams.get("doid"), requestParams.get("companyid")});
                        ArrayList params1 = new ArrayList();
                        params1.add(requestParams.get("companyid"));
                        delQuery1 = "delete  from accjedetailcustomdata where jedetailId in (select id from jedetail where company = ? and journalEntry in ('" + inventoryjeid + "'))";
                        executeSQLUpdate(delQuery1, params1.toArray());
                        ArrayList params3 = new ArrayList();
                        params3.add(requestParams.get("companyid"));
                        delQuery3 = "delete from jedetail where company = ? and journalEntry in ('" + inventoryjeid + "') ";
                        executeSQLUpdate(delQuery3, params3.toArray());
                        ArrayList params4 = new ArrayList();
                        delQuery4 = "delete from journalentry where id  in ('" + inventoryjeid + "')";
                        executeSQLUpdate(delQuery4, params4.toArray());
                        ArrayList params2 = new ArrayList();
                        delQuery2 = "delete  from accjecustomdata where journalentryId in ('" + inventoryjeid + "')";
                        executeSQLUpdate(delQuery2, params2.toArray());
                    }
                }
                
                if (!StringUtil.isNullOrEmpty(batchids)) {
                    ArrayList paramsRetBmap = new ArrayList();
                    delQueryRetBmap = "delete  from salespurchasebatchmapping where salesBatch in (" + batchids + ") ";
                    int numRowsRetBmap = executeSQLUpdate( delQueryRetBmap, paramsRetBmap.toArray());

                    ArrayList paramsBatch = new ArrayList();
                    delQueryBatch = "delete  from productbatch where id in (" + batchids + ") ";
                    int numRowsBatch = executeSQLUpdate( delQueryBatch, paramsBatch.toArray());
                }

                params5 = new ArrayList();
                params5.add(requestParams.get("companyid"));
               params5.add(requestParams.get("doid"));
//                delQuery5 = "delete from dodetails where deliveryorder in (select id from deliveryorder where company =?  and id=?)";
                delQuery5 = " delete dod from dodetails dod inner join deliveryorder do on do.id=dod.deliveryorder where do.company =? and do.id=?";
                numRows5 = executeSQLUpdate( delQuery5, params5.toArray());

                
//                ArrayList params = new ArrayList();
//                params.add(requestParams.get("companyid"));
//                delQuery = "delete  from inventory where company = ? and id in (" + idStrings + ") ";
//                numRows += executeSQLUpdate( delQuery, params.toArray());        
                String selQuery = "from Inventory where company.companyID = ? and deleted = 'F' and  ID in (" + idStrings + ") ";
                List resultList = executeQuery( selQuery, new Object[]{companyid});
                Iterator itrInv = resultList.iterator();
                while (itrInv.hasNext()) {
                    Inventory inventory = (Inventory) itrInv.next();
                    if (inventory != null && inventory.isDeleted() == false) {
                        if (inventory.isCarryIn()) {
                            inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() - inventory.getBaseuomquantity());// minus Purchase and Plus Sales (for Reverse effect for quantity)
                        } else {
                            inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() + inventory.getBaseuomquantity());
                        }
                    }
                }
                deleteAll(resultList);
                numRows = resultList.size();
                /**
                 * Delete GST Fields for India.
                 */
                deleteGstDocHistoryDetails(requestParams.get("doid").toString());
                ArrayList params9 = new ArrayList();
                params9.add(requestParams.get("companyid"));
                params9.add(requestParams.get("doid"));
                String myquery1 = "select id from deliveryorder where company = ? and id=?";
                List list1 = executeSQLQuery( myquery1, params9.toArray());
                Iterator itr1 = list1.iterator();
                String journalent = "";
                while (itr1.hasNext()) {

                    String jeidi = itr1.next().toString();
                    journalent += "'" + jeidi + "',";
                }
                if (!StringUtil.isNullOrEmpty(journalent)) {
                    journalent = journalent.substring(0, journalent.length() - 1);
                }


                ArrayList params10 = new ArrayList();
                params10.add(requestParams.get("companyid"));
                params10.add(requestParams.get("doid"));
                String myquery2 = " select journalentry from deliveryorder where company = ? and id=?";
                List list2 = executeSQLQuery( myquery2, params10.toArray());
                Iterator itr2 = list2.iterator();
                String journalentry = "";
                while (itr2.hasNext()) {
                    Object object = itr2.next();
                    if (object != null) {
                        String jeidi = object.toString();
                        journalentry += "'" + jeidi + "',";
                    }
                }

                /*
                 * Deleteing free gift JE before deleting DO
                 */ 
                myquery = " select freegiftje from deliveryorder where company = ? and id=? ";
                list2 = executeSQLQuery(myquery,params10.toArray());
                itr2 = list2.iterator();
                while (itr2.hasNext()) {
                    Object object = itr2.next();
                    if (object != null) {
                        String jeidi = object.toString();
                        journalentry += "'" + jeidi + "',";
                    }
                }
                if (!StringUtil.isNullOrEmpty(journalentry)) {
                    journalentry = journalentry.substring(0, journalentry.length() - 1);
                }
                
                ArrayList params1 = new ArrayList();
                delQuery1 = "delete  from dodetailscustomdata where dodetailsid in (" + idStrings + ")";
                int numRows1 = executeSQLUpdate( delQuery1, params1.toArray());

                /*Checking entry in delivery Order Planner*/
                
                KwlReturnObject result = getDeliveryOrderFromDeliveryPlanner((String)requestParams.get("doid"),(String)requestParams.get("companyid"));
                List deliveryplannerlist = result.getEntityList();
                if (deliveryplannerlist.size() > 0) {
                    errormsg = "Delivery Order is already present in Delivery Order Planner Report. You cannot delete/edit this Delivery Order.";
                    throw new AccountingException("Delivery Order is already present in Delivery Order Planner Report. You cannot delete/edit this Delivery Order.");
                }
                
                ArrayList params6 = new ArrayList();
                params6.add(requestParams.get("companyid"));
                params6.add(requestParams.get("doid"));
                delQuery6 = "delete from deliveryorder where company = ? and id=?";
                int numRows6 = executeSQLUpdate( delQuery6, params6.toArray());


                int numRows3 = 0;
                int numRows4 = 0;
                if (!StringUtil.isNullOrEmpty(journalentry)) {
                    ArrayList params3 = new ArrayList();
                    params3.add(requestParams.get("companyid"));
                    delQuery3 = "delete from jedetail where company = ? and journalEntry in (" + journalentry + ") ";
                    numRows3 = executeSQLUpdate( delQuery3, params3.toArray());

                    ArrayList params4 = new ArrayList();
                    delQuery4 = "delete from journalentry where id  in (" + journalentry + ")";
                    numRows4 = executeSQLUpdate( delQuery4, params4.toArray());
                }

                ArrayList params2 = new ArrayList();
                delQuery2 = "delete  from deliveryordercustomdata where deliveryOrderId in ('" + doidforcustomdata + "')";
                int numRows2 = executeSQLUpdate( delQuery2);
             
                
                numtotal = numRows + numRows1 + numRows2 + numRows5 + packingandshippingdelrows; //+ numRows6;
            }

            return new KwlReturnObject(true, "Delivery Order has been deleted successfully.", null, null, numtotal);
        } catch (AccountingException ex) {
            throw new AccountingException(ex.getMessage());
        } catch (Exception ex) {
            throw ServiceException.FAILURE(errormsg, ex);//+ex.getMessage(), ex);
        }

    }
    /**
     * Function for permanently deleting a DO with pick pack ship functionality and restoring inventory quantities
     * @param requestParams - doid,isEdit,companyid,DOstatus 
     * @return int - deleted rows count 
     * @throws ServiceException
     * @throws AccountingException 
     */
    @Override
    public int deleteDOWithPickPackandShip(HashMap<String, Object> requestParams) throws ServiceException, AccountingException {

        String errormsg = " Cannot delete Delivery Order as its reference child field is not deleted.";
        String delpackingquery = "", delShippingQuery1 = "", packingidquery = "", delInvQuery = "", quantityquery = "", dodistquery = "";
        String ist="";
        String dodetails = "";
        String doid = "";
        int updaterows=0;String status="";
        double[] shipqty;
        List<String> packingid = new ArrayList<>();
        List<String> shipid = new ArrayList<>();
        ArrayList shippingparams;
        int totaldelrows = 0;
        boolean isEdit= false;
        boolean islinkedinso= false;
        boolean isDelete= true;  //set delete flag true initially so when isedit flag occurs set isdelete to false
        String companyid = (String) requestParams.get("companyid");
        String[] istdbatch= null;
        String[] istdserials=null;
        String[] sabatch= null;
        String[] saserials=null;
        
        if (requestParams.containsKey("isEdit")) {
            isEdit = Boolean.parseBoolean(requestParams.get("isEdit") != null ? requestParams.get("isEdit").toString() : "false");
            isDelete = false; //set isdelete false to execute only edit cases 
            
        }
        if (requestParams.containsKey("islinkedinso")) {
            islinkedinso = Boolean.parseBoolean(requestParams.get("islinkedinso") != null ? requestParams.get("islinkedinso").toString() : "false");
        }
       try {
            ArrayList packingparams = new ArrayList();

            doid =(String) requestParams.get("doid");
            
            /*
            first gettting the dod id from dodetails by passing deliverorder 
            */ 
            ArrayList invparams = new ArrayList();
            invparams.add(doid);
            delInvQuery = "select id from dodetails where deliveryorder=? ";
            List<String> dod = executeSQLQuery(delInvQuery, invparams.toArray());

            int dodindex = 0;
            while (dodindex < dod.size()) {
                Object objdod = (Object) dod.get(dodindex);
                if (dodindex > 0) {
                    objdod = objdod != null ? objdod.toString() : "";
                    dodetails = dodetails + "," + objdod;
                } else {
                    dodetails = objdod != null ? objdod.toString() : "";
                }
                dodindex++;
            }
            String multdo[] = null;
            /*
            split for multiple dodetail ids if delivery order has more than one product and execute deletion one by one
            */
            multdo = dodetails.split(",");  
            /*
                     Getting the shipped quantity for a DO if it has been partially shipped and status is still packed or picked
                     */
                    shipqty = new double[multdo.length];
                    for (int doindex = 0; doindex < multdo.length; doindex++) {
                        quantityquery = "select SUM(shipqty) from shippingdeliverydetails where dod= ?";
                        List<String> shippingqtyrs = executeSQLQuery(quantityquery, multdo[doindex]);
                        Iterator shiprs = shippingqtyrs.iterator();

                        while (shiprs.hasNext()) {
                            Object objrs = (Object) shiprs.next();
                            shipqty[doindex] = Double.parseDouble(objrs == null ? "0" : objrs.toString());
                        }
                    }
                    

            for (int doindex = 0; doindex < multdo.length; doindex++) {

                /*
                 getting fromstore,batchname,location for reversing quantity only at that record
                */    
                quantityquery = "select ist.fromstore,istd.batchname,istd.deliveredqty,istd.issued_location,ist.product,istd.issued_serialnames,ist.tostore,dd.baseuomrate,istd.delivered_location "
                        + "from in_interstoretransfer ist"
                        + " INNER JOIN in_ist_detail istd on ist.id=istd.istrequest INNER JOIN dodistmapping dodist ON ist.id=dodist.ist"
                        +"  INNER JOIN dodetails dd ON dd.id = dodist.dod "
                        + " WHERE dodist.dod= ?";
                List<String> product_params = executeSQLQuery(quantityquery, multdo[doindex]);
                Iterator rs = product_params.iterator();
                String fromstore = "";
                String tostore = "";
                String batchname = "";
                String qty = "0";
                String location = "";  // issued location
                String product = "";
                String serialname = "";
                double baseuomrate = 1;
                String deliveredlocation = "";    // delivered location
                double countshipqty_st = 0.0;  
                double countshipqty_npb = 0.0;  
                while (rs.hasNext()) {
                    Object[] obj = (Object[]) rs.next();
                    fromstore = obj[0] == null ? "" : obj[0].toString();
                    batchname = obj[1] == null ? "" : obj[1].toString();
                    qty = obj[2] == null ? "0" : obj[2].toString();
                    location = obj[3] == null ? "" : obj[3].toString();
                    product = obj[4] == null ? "" : obj[4].toString();
                    serialname = obj[5] == null ? "" : obj[5].toString();
                    tostore = obj[6] == null ? "" : obj[6].toString();
                    baseuomrate =Double.parseDouble(obj[7] == null ? "1" : obj[7].toString());
                    deliveredlocation = obj[8] == null ? "" : obj[8].toString();
                    
                    /**
                     * The shipping details table does not store product qty with UOM conversion
                     * hence If the product has a UOM schema multiply the shipping qty with the baseuomrate.
                     */
                    if (baseuomrate != 1 && shipqty[doindex] != 0) {
                        shipqty[doindex] = shipqty[doindex] * baseuomrate;
                    }
                    /*
                     IF DO HAS BEEN SHIPPED OR PACKED/PICKED but Packing and Picking Warehouses are different then add in pick warehouse/fromstore
                     */
                    if (isEdit || isDelete) {
                        if (requestParams.containsKey("status")) {
                            status = requestParams.get("status") != null ? requestParams.get("status").toString() : "";
                        }
                        if ((status.equalsIgnoreCase("Packed") || status.equalsIgnoreCase("Picked") || status.equalsIgnoreCase("Shipped")) || isEdit) {
                            if (!fromstore.equalsIgnoreCase(tostore) || (fromstore.equalsIgnoreCase(tostore) && status.equalsIgnoreCase("Shipped")) || isEdit) {
                                /*
                                 * updating the quantity now using above parameters in in_stock
                                 */
                                invparams = new ArrayList();
                                quantityquery = "update in_stock set quantity = quantity + ? where store=? AND batchname=? AND location=? AND product=?;";
                                invparams.add(qty);
                                invparams.add(fromstore);
                                invparams.add(batchname);
                                invparams.add(location);
                                invparams.add(product);
                                updaterows = executeSQLUpdate(quantityquery, invparams.toArray());
                            }
                        }
                        

                        if(!StringUtil.isNullOrEmpty(batchname)){                          
                          istdbatch= batchname.split(",");  
                        }
                         if(!StringUtil.isNullOrEmpty(serialname)){
                          istdserials = serialname.split(",");                            
                        }
                        
                        
                        /*
                         * Reducing Quantity from the Packing Warehouse if it is different than the Picking Warehouse 
                         Checking that product has not been shipped because shipping automatically reduces quantity already so no need to reduce again.
                         */
                        if (!fromstore.equalsIgnoreCase(tostore) && (status.equalsIgnoreCase("Packed") || status.equalsIgnoreCase("Picked")) || isEdit) {
                            /*
                             * IF PICKING STORE AND PACKING STORE IS NOT SAME 
                             * reducing the quantity now from the toStore(packingstore) using above parameters in in_stock
                             */
                            invparams = new ArrayList();
                            quantityquery = "update in_stock set quantity = quantity - ? where store=? AND batchname=? AND location=? AND product=?;";
                            if (shipqty[doindex] != 0) {
                                String sadetailquery = "select sa.store,sad.location,sad.batchname,sad.serialnames,sad.quantity from dodistmapping dodist inner join in_stockadjustment sa on sa.id=dodist.stockadjustment inner join in_sa_detail sad on sa.id = sad.stockadjustment where dodist.dod='" + multdo[doindex] + "' and dodist.stockadjustment is not null ";
                                List<String> sadetaillist = executeSQLQuery(sadetailquery);
                                Iterator sadetail = sadetaillist.iterator();
                                boolean flag = true;
                                double reductionqty = Double.parseDouble(qty);
                                while (sadetail.hasNext()) {
                                    Object[] obj1 = (Object[]) sadetail.next();
                                    if (obj1[2] != null && !StringUtil.isNullOrEmpty(obj1[2].toString())) {
                                        sabatch = obj1[2].toString().split(",");
                                    }
                                    if (obj1[3] != null && !StringUtil.isNullOrEmpty(obj1[3].toString())) {
                                        saserials = obj1[3].toString().split(",");
                                    }

                                    if (obj1[0] != null && obj1[1] != null && obj1[2] != null && obj1[3] != null && obj1[4] != null && obj1[0].toString().equalsIgnoreCase(tostore) && obj1[1].toString().equalsIgnoreCase(deliveredlocation) && !StringUtil.isNullOrEmpty(serialname) && !StringUtil.isNullOrEmpty(batchname)) {
                                        
                                        if (istdbatch.length > 0 && sabatch.length > 0) {
                                            for (int i = 0; i < istdbatch.length; i++) {
                                                for (int j = 0; j < sabatch.length; j++) {
                                                    if (istdbatch[i].equalsIgnoreCase(sabatch[j])) {
                                                        if (istdserials.length > 0 && saserials.length > 0) {
                                                            for (int k = 0; k < istdserials.length; k++) {
                                                                for (int l = 0; l < saserials.length; l++) {
                                                                    if (istdserials[k].equalsIgnoreCase(saserials[l])){
                                                                        if (countshipqty_st == shipqty[doindex]) {
                                                                            break;
                                                                        }
                                                                        reductionqty = reductionqty - 1;
                                                                        countshipqty_st++;
                                                                        flag = false;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
//                                            if (reductionqty!=Double.parseDouble(qty)) {
//                                                invparams.add(reductionqty);
//                                            }
                                        }
                                    } else if (obj1[0] != null && obj1[1] != null && obj1[3] != null && obj1[4] != null && obj1[0].toString().equalsIgnoreCase(tostore) && obj1[1].toString().equalsIgnoreCase(deliveredlocation) && !StringUtil.isNullOrEmpty(serialname)) {
                                        
                                        if (istdserials.length > 0 && saserials.length > 0) {
                                            for (int k = 0; k < istdserials.length; k++) {
                                                for (int l = 0; l < saserials.length; l++) {
                                                    if (istdserials[k].equalsIgnoreCase(saserials[l])) {
                                                        if (countshipqty_st == shipqty[doindex]) {
                                                            break;
                                                        }
                                                        reductionqty = reductionqty - 1;
                                                        countshipqty_st++;
                                                        flag = false;
                                                    }
                                                }
                                            }
//                                            if (reductionqty!=Double.parseDouble(qty)) {
//                                                invparams.add(reductionqty);
//                                            }
                                        }
                                    } else if (obj1[0] != null && obj1[1] != null && obj1[2] != null && obj1[4] != null && obj1[0].toString().equalsIgnoreCase(tostore) && obj1[1].toString().equalsIgnoreCase(deliveredlocation) && !StringUtil.isNullOrEmpty(batchname)) {
                                       
                                        if (istdbatch.length > 0 && sabatch.length > 0) {
                                            for (int i = 0; i < istdbatch.length; i++) {
                                                for (int j = 0; j < sabatch.length; j++) {
                                                    if (istdbatch[i].equalsIgnoreCase(sabatch[j])) {
                                                        if (countshipqty_st == shipqty[doindex]) {
                                                            break;
                                                        }
                                                        reductionqty = reductionqty - (Double) obj1[4];
                                                        countshipqty_st += (Double) obj1[4];
                                                        flag = false;
                                                    }
                                                }
                                            }
//                                            if (reductionqty!=Double.parseDouble(qty)) {
//                                                invparams.add(reductionqty);
//                                            }
                                        }
                                    } else if (obj1[0] != null && obj1[1] != null && obj1[4] != null && obj1[0].toString().equalsIgnoreCase(tostore) && obj1[1].toString().equalsIgnoreCase(deliveredlocation)) {
                                        if (countshipqty_st == shipqty[doindex]) {
                                            break;
                                        }
                                       
                                        invparams.add(reductionqty - (Double) obj1[4]);
                                        flag = false;
                                        countshipqty_st += (Double) obj1[4];
                                    }
                                }
                                if (!flag) {
                                    if(!StringUtil.isNullOrEmpty(serialname) || !StringUtil.isNullOrEmpty(batchname)){
                                       invparams.add(reductionqty); 
                                    }                                    
                                } else {
                                    invparams.add(qty);
                                }
                            } else {
                                invparams.add(qty);
                            }
                            invparams.add(tostore);
                            invparams.add(batchname);
                            invparams.add(deliveredlocation);
                            invparams.add(product);
                            updaterows = updaterows + executeSQLUpdate(quantityquery, invparams.toArray());

                            invparams = new ArrayList();
                            quantityquery = "update newproductbatch set quantitydue = quantitydue - ? where warehouse=? AND batchname=? AND location=? AND product=?;";
                            if (shipqty[doindex] != 0) {
                                String sadetailquery = "select sa.store,sad.location,sad.batchname,sad.serialnames,sad.quantity from dodistmapping dodist inner join in_stockadjustment sa on sa.id=dodist.stockadjustment inner join in_sa_detail sad on sa.id = sad.stockadjustment where dodist.dod='" + multdo[doindex] + "' and dodist.stockadjustment is not null ";
                                List<String> sadetaillist = executeSQLQuery(sadetailquery);
                                Iterator sadetail = sadetaillist.iterator();
                                boolean flag = true;
                                double reductionqty = Double.parseDouble(qty);
                                while (sadetail.hasNext()) {
                                    Object[] obj1 = (Object[]) sadetail.next();
                                    if (obj1[2] != null && !StringUtil.isNullOrEmpty(obj1[2].toString())) {
                                        sabatch = obj1[2].toString().split(",");
                                    }
                                    if (obj1[3] != null && !StringUtil.isNullOrEmpty(obj1[3].toString())) {
                                        saserials = obj1[3].toString().split(",");
                                    }

                                    if (obj1[0] != null && obj1[1] != null && obj1[2] != null && obj1[3] != null && obj1[4] != null && obj1[0].toString().equalsIgnoreCase(tostore) && obj1[1].toString().equalsIgnoreCase(deliveredlocation) && !StringUtil.isNullOrEmpty(serialname) && !StringUtil.isNullOrEmpty(batchname)) {
                                        
                                        if (istdbatch.length > 0 && sabatch.length > 0) {
                                            for (int i = 0; i < istdbatch.length; i++) {
                                                for (int j = 0; j < sabatch.length; j++) {
                                                    if (istdbatch[i].equalsIgnoreCase(sabatch[j])) {
                                                        if (istdserials.length > 0 && saserials.length > 0) {
                                                            for (int k = 0; k < istdserials.length; k++) {
                                                                for (int l = 0; l < saserials.length; l++) {
                                                                    if (istdserials[k].equalsIgnoreCase(saserials[l])){
                                                                        if (countshipqty_npb == shipqty[doindex]) {
                                                                            break;
                                                                        }
                                                                        reductionqty = reductionqty - 1;
                                                                        countshipqty_npb++;
                                                                        flag = false;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
//                                            if (reductionqty!=Double.parseDouble(qty)) {
//                                                invparams.add(reductionqty);
//                                            }
                                        }
                                    } else if (obj1[0] != null && obj1[1] != null && obj1[3] != null && obj1[4] != null && obj1[0].toString().equalsIgnoreCase(tostore) && obj1[1].toString().equalsIgnoreCase(deliveredlocation) && !StringUtil.isNullOrEmpty(serialname)) {
                                        
                                        if (istdserials.length > 0 && saserials.length > 0) {
                                            for (int k = 0; k < istdserials.length; k++) {
                                                for (int l = 0; l < saserials.length; l++) {
                                                    if (istdserials[k].equalsIgnoreCase(saserials[l])) {
                                                        if (countshipqty_npb == shipqty[doindex]) {
                                                            break;
                                                        }
                                                        reductionqty = reductionqty - 1;
                                                        countshipqty_npb++;
                                                        flag = false;
                                                    }
                                                }
                                            }
//                                            if (reductionqty!=Double.parseDouble(qty)) {
//                                                invparams.add(reductionqty);
//                                            }
                                        }
                                    } else if (obj1[0] != null && obj1[1] != null && obj1[2] != null && obj1[4] != null && obj1[0].toString().equalsIgnoreCase(tostore) && obj1[1].toString().equalsIgnoreCase(deliveredlocation) && !StringUtil.isNullOrEmpty(batchname)) {
                                       
                                        if (istdbatch.length > 0 && sabatch.length > 0) {
                                            for (int i = 0; i < istdbatch.length; i++) {
                                                for (int j = 0; j < sabatch.length; j++) {
                                                    if (istdbatch[i].equalsIgnoreCase(sabatch[j])) {
                                                        if (countshipqty_npb == shipqty[doindex]) {
                                                            break;
                                                        }
                                                        reductionqty = reductionqty - (Double) obj1[4];
                                                        countshipqty_npb += (Double) obj1[4];
                                                        flag = false;
                                                    }
                                                }
                                            }
//                                            if (reductionqty!=Double.parseDouble(qty)) {
//                                                invparams.add(reductionqty);
//                                            }
                                        }
                                    } else if (obj1[0] != null && obj1[1] != null && obj1[4] != null && obj1[0].toString().equalsIgnoreCase(tostore) && obj1[1].toString().equalsIgnoreCase(deliveredlocation)) {
                                        if (countshipqty_npb == shipqty[doindex]) {
                                            break;
                                        }
                                       
                                        invparams.add(reductionqty - (Double) obj1[4]);
                                        flag = false;
                                        countshipqty_npb += (Double) obj1[4];
                                    }
                                }
                                if (!flag) {
                                    if(!StringUtil.isNullOrEmpty(serialname) || !StringUtil.isNullOrEmpty(batchname)){
                                       invparams.add(reductionqty); 
                                    }                                    
                                } else {
                                    invparams.add(qty);
                                }
                            } else {
                                invparams.add(qty);
                            }
                            invparams.add(tostore);
                            invparams.add(batchname);
                            invparams.add(deliveredlocation);
                            invparams.add(product);
                            updaterows = updaterows + executeSQLUpdate(quantityquery, invparams.toArray());
                        }

                
                        /*
                         get batchid from newproductbatch
                         */
                        invparams = new ArrayList();
                        quantityquery = "select id from newproductbatch where warehouse=? AND batchname=? AND location=? AND product=?;";
                        invparams.add(fromstore);
                        invparams.add(batchname);
                        invparams.add(location);
                        invparams.add(product);
                        List<String> batchrs = executeSQLQuery(quantityquery, invparams.toArray());
                        String batchid = "";
                        if (batchrs.size() > 0) {
                            batchid = batchrs.get(0); //storing dod to use in queries below
                        }
                        /*
                         updating the quantity now using above parameters in in_stock
                         */
                        invparams = new ArrayList();
                        quantityquery = "update newproductbatch set quantitydue = quantitydue + ?,lockquantity=lockquantity+? where warehouse=? AND batchname=? AND location=? AND product=?;";
                        invparams.add(qty);
                        if(islinkedinso){
                            invparams.add(qty);
                        }else{
                            invparams.add(0);
                        }
                        invparams.add(fromstore);
                        invparams.add(batchname);
                        invparams.add(location);
                        invparams.add(product);
                        updaterows = updaterows + executeSQLUpdate(quantityquery, invparams.toArray());
                        /*
                         if serial names are not  empty update quantity for specific serials
                         */
                        if (!StringUtil.isNullOrEmpty(serialname)) {
                            /*
                             split serial names and update quantity by 1 based on each serial
                             */
                            String[] serialarray = serialname.split(",");
                            /*
                             updating the quantity using parameters acquired above 
                             */
                            for (int serialindex = 0; serialindex < serialarray.length; serialindex++) {
                                invparams = new ArrayList();
                                quantityquery = "update newbatchserial set quantitydue = 1 where serialname=? and product=? and batch=?;";
                                invparams.add(serialarray[serialindex]);
                                invparams.add(product);
                                invparams.add(batchid);
                                updaterows = updaterows + executeSQLUpdate(quantityquery, invparams.toArray());

                                /*
                                 * updating serial names in in_stock
                                 * check if multple serialnames exist for same batch then add them with a comma separator
                                 * if no entry exists previously then simply add the serial name without comma separator
                                 */
                                quantityquery = "update in_stock set serialnames = CASE "
                                        + "WHEN serialnames IS NULL THEN ? "
                                        + "WHEN serialnames ='' THEN ? "
                                        + "WHEN (serialnames <>null or serialnames<> '') THEN CONCAT_WS(',',serialnames,?) "
                                        + "END  where product=? and store=? and location= ?";

                                /*
                                 if serials have no  batchnames update directly using serialnames so only 4 params
                                 */
                                if (StringUtil.isNullOrEmpty(batchname)) {
                                    invparams = new ArrayList();
                                    invparams.add(serialarray[serialindex]);
                                    invparams.add(serialarray[serialindex]);
                                    invparams.add(serialarray[serialindex]);
                                    invparams.add(product);
                                    invparams.add(fromstore);
                                    invparams.add(location);
                                } else //else 5 params add batchname check
                                {
                                    invparams = new ArrayList();
                                    quantityquery = quantityquery + "and batchname=?;";
                                    invparams.add(serialarray[serialindex]);
                                    invparams.add(serialarray[serialindex]);
                                    invparams.add(serialarray[serialindex]);
                                    invparams.add(product);
                                    invparams.add(fromstore);
                                    invparams.add(location);
                                    invparams.add(batchname);

                                }

                                updaterows = updaterows + executeSQLUpdate(quantityquery, invparams.toArray());
                                /*
                                 Remove the DO serials from the packing Warehouse after deletion 
                                 */
                                String serialquery = "select serialnames from in_stock where product = ? and store = ? and location = ?";

                                if (StringUtil.isNullOrEmpty(batchname)) {
                                    invparams = new ArrayList();
                                    invparams.add(product);
                                    invparams.add(tostore);
                                    invparams.add(deliveredlocation);
                                } else //else 5 params add batchname check
                                {
                                    invparams = new ArrayList();
                                    serialquery = serialquery + "and batchname=?;";
                                    invparams.add(product);
                                    invparams.add(tostore);
                                    invparams.add(deliveredlocation);
                                    invparams.add(batchname);

                                }
                                List<String> serialrs = executeSQLQuery(serialquery, invparams.toArray());
                                String allserialnames = "";
                                if (serialrs.size() > 0) {
                                    allserialnames = serialrs.get(0);
                                }
                                //converting the comma separated string and adding into a Hash set and removing DO serials and updating the new serialnames 
                                String doserialnames = serialname;
                                Set<String> tSet = new HashSet<String>(Arrays.asList(allserialnames.split(",")));
                                Set<String> doSet = new HashSet<String>(Arrays.asList(doserialnames.split(",")));
                                tSet.removeAll(doSet);
                                String targetserials = "";
                                for (String ts : tSet) {
                                    if (StringUtil.isNullOrEmpty(targetserials)) {
                                        targetserials = ts;
                                    } else {
                                        targetserials += "," + ts;
                                    }
                                }
                                quantityquery = "update in_stock set serialnames = ? where product=? and store=? and location=? ";

                                if (StringUtil.isNullOrEmpty(batchname)) {
                                    invparams = new ArrayList();
                                    invparams.add(targetserials);
                                    invparams.add(product);
                                    invparams.add(tostore);
                                    invparams.add(deliveredlocation);
                                } else //else 5 params add batchname check
                                {
                                    invparams = new ArrayList();
                                    quantityquery = quantityquery + "and batchname=?;";
                                    invparams.add(targetserials);
                                    invparams.add(product);
                                    invparams.add(tostore);
                                    invparams.add(deliveredlocation);
                                    invparams.add(batchname);

                                }
                                updaterows = updaterows + executeSQLUpdate(quantityquery, invparams.toArray());

                            }

                        }
                    }
                }
                if(isDelete){
                /*
                 get shipping do from shippingdeliverydetails before deleting it 
                */
                shippingparams = new ArrayList();
                shippingparams.add(requestParams.get("doid"));
                delShippingQuery1 = "select shd.shippingdo from shippingdeliverydetails shd INNER JOIN dodetails dd ON shd.dod=dd.id where dd.deliveryorder=?";
                List<String> shipdo = executeSQLQuery(delShippingQuery1, shippingparams.toArray());
                String shippingdo = "";
                if (shipdo.size() > 0) //if products are not shipped then dont take its shippindo and shippingdeliverydetails id
                {
                    shippingdo = shipdo.get(0) != null ? shipdo.get(0) : "";

                    int shipdoindex = 0;
                    while (shipdoindex < shipdo.size()) {
                        Object objsa = (Object) shipdo.get(shipdoindex);
                        if (shipdoindex > 0) {
                            objsa = objsa != null ? objsa.toString() : "";
                            shippingdo = shippingdo + "','" + objsa;
                        } else {
                            shippingdo = objsa != null ? objsa.toString() : "";
                        }
                        shipdoindex++;
                    }
                }
                
                /*
                 SHIPPINGDELIVERYDETAILS DELETION
                 */
                shippingparams = new ArrayList();
                shippingparams.add(requestParams.get("doid"));
                delShippingQuery1 = "delete from shippingdeliverydetails where shippingdo IN ('"+shippingdo+ "')";
                totaldelrows = totaldelrows + executeSQLUpdate(delShippingQuery1);

                /*
                 SHIPPINGDELIVERY DELETION
                 */
                shippingparams = new ArrayList();
                shippingparams.add(requestParams.get("doid"));
                delShippingQuery1 = "delete from shippingdelivery where id IN ('"+shippingdo+"')";
                totaldelrows = totaldelrows + executeSQLUpdate(delShippingQuery1);
                }
                /*
                 getting ist,sa,from dodistmapping
                */
                shippingparams = new ArrayList();

                shippingparams.add(multdo[doindex]);
                dodistquery = "select ist from dodistmapping  where dod = ? AND ist IS NOT NULL";

                List<String> dodistparams = executeSQLQuery(dodistquery, shippingparams.toArray());
                if (!dodistparams.isEmpty() && dodistparams.size() > 0) {
                    if (dodistparams.size() > 1) {
                        ist = StringUtil.join("','", dodistparams);
                    } else {
                        Object objist = (Object) dodistparams.get(0);
                        ist = objist != null ? objist.toString() : "";
                    }

                }
               
                /*
                getting stock adjustment from dodist
                */
                shippingparams = new ArrayList();
                shippingparams.add(multdo[doindex]);
                dodistquery = "select stockadjustment from dodistmapping where dod=?";
                List<String> saparams = executeSQLQuery(dodistquery, shippingparams.toArray());
                
                String sa = "";
                int i = 0;
                while (i < saparams.size()) {
                    Object objsa = (Object) saparams.get(i);
                    if (i > 0) {
                        objsa = objsa != null ? objsa.toString() : "";
                        sa = sa + "','" + objsa;
                    } else {
                        sa = objsa != null ? objsa.toString() : "";
                    }
                    i++;
                }
                
                /*
                 getting inventory id for stockadjustment
                 */
                dodistquery = "select inventoryref from in_stockadjustment where id IN ('" + sa + "')";
                List<String> invrefparams = executeSQLQuery(dodistquery);
                int invindex = 0;
                String invref = "";
                while (invindex < invrefparams.size()) {
                    Object objsa = (Object) invrefparams.get(invindex);
                    if (invindex > 0) {
                        objsa = objsa != null ? objsa.toString() : "";
                        invref = invref + "','" + objsa;
                    } else {
                        invref = objsa != null ? objsa.toString() : "";
                    }
                    invindex++;
                }
                if(isDelete || isEdit){
                /*
                 ** DODISTMAPPING DELETION
                 */
                packingparams = new ArrayList();
                packingparams.add(requestParams.get("doid"));
                delpackingquery = "delete from dodistmapping where dod=?";
                totaldelrows = totaldelrows + executeSQLUpdate(delpackingquery, multdo[doindex]);
                }
                if(isDelete)
                {
                /*
                getting the packingid and packingdetails id before deleting the packingdodetails table data because this id is needed to delete the packing table data 
                */
                packingparams = new ArrayList();
                packingparams.add(requestParams.get("doid"));
                packingidquery = "select packing,packingdetails  from packingdodetails where deliveryorder=?";
                List<String> packingdetails = executeSQLQuery(packingidquery, packingparams.toArray());
                String packid = "";
                String packingdetailsid = "";
                if (packingdetails.size() > 0) //if products are not packed then dont take its packingid,packingdetailsid
                {
                    Iterator packingrs = packingdetails.iterator();
                    int packindex = 0;

                    while (packingrs.hasNext()) {
                        Object[] obj = (Object[]) packingrs.next();
                        if (packindex > 0) {
                            packid = packid + "','" + (obj[0] != null ? obj[0].toString() : "");
                            packingdetailsid = packingdetailsid + "','" + (obj[1] != null ? obj[1].toString() : "");
                        } else {
                            packid = obj[0]!=null?obj[0].toString():"";
                            packingdetailsid = obj[1]!=null?obj[1].toString():"";
                        }
                        packindex++;
                    }
                }

                
                /*
                 *deleting packing tables data starting from packingdodetails -> itemdetail -> packingdetails -> packing
                 ** PACKINGDODETAILS DELETION
                 */
                packingparams = new ArrayList();
                packingparams.add(requestParams.get("doid"));
                delpackingquery = "delete from packingdodetails where deliveryorder=?";
                totaldelrows = totaldelrows + executeSQLUpdate(delpackingquery, packingparams.toArray());

                /*
                 ** ITEMDETAIL DELETION
                 */
                packingparams = new ArrayList();
                packingparams.add(requestParams.get("doid"));
                delpackingquery = "delete from itemdetail where packing IN ('" + packid + "') ";
                totaldelrows = totaldelrows + executeSQLUpdate(delpackingquery);

                /*
                getting the packinglist id before deleting the packingdetails table data because this id is needed to delete the packing table data
                */
                packingparams = new ArrayList();
                packingparams.add(requestParams.get("doid"));
                packingidquery = "select pkd.packinglist from packingdetails pkd INNER JOIN dodetails dod ON pkd.dodetailid=dod.id where dod.deliveryorder=?";
                packingid = executeSQLQuery(packingidquery, packingparams.toArray());

                /*
                 ** PACKINGDETAILS DELETION
                 */
                packingparams = new ArrayList();
                packingparams.add(requestParams.get("doid"));
                delpackingquery = "delete from packingdetails where id IN ('" + packingdetailsid + "')";
                totaldelrows = totaldelrows + executeSQLUpdate(delpackingquery);

                /*
                ** PACKING DELETION
                */
                delpackingquery = "delete from packing where id IN ('"+ packid +"')";
                totaldelrows = totaldelrows + executeSQLUpdate(delpackingquery);

                /*
                inventory deletion dodetails - > inventory -> in_sa_detail -> in_stockadjustment -> in_interstoretransfer -> in_ist_detail -> in_sm_detail -> in_stockmovement
                */
                
                /*
                ** DODETAILS DELETION
                */
                invparams = new ArrayList();
                invparams.add(multdo[doindex]);
                delInvQuery = "delete from dodetails where id=? ";
                totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery, invparams.toArray());
                                                
                }
                if( isDelete)
                {
                
                /*
                **INVENTORY DELETION for dodetails using dod id acquired at the start
                */
                invparams = new ArrayList();
                invparams.add(dodetails);
                delInvQuery = "delete from inventory where id IN ('" + multdo[doindex] + "') and isjobworkorder='F'";
                totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery);

                /*
                **INVENTORY DELETION for stockadjustment using invref id acquired at the start
                */
               invparams = new ArrayList();
                invparams.add(dodetails);
                delInvQuery = "delete from inventory where id IN ('" + invref + "') and isjobworkorder='F'";
                totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery);
                }
                if(isEdit || isDelete)
                {
                /*
                **IN_IST_DETAIL DELETION using IST id
                */
                invparams = new ArrayList();
                delInvQuery = "delete from in_ist_detail where istrequest IN ('" + ist + "')";
                totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery);

                /*
                **IN_INTERSTORETRANSFER DELETION using id
                */ 
                invparams = new ArrayList();
                delInvQuery = "delete from in_interstoretransfer where id IN ('" + ist + "')";
                totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery);

                /*
                **IN_SM_DETAIL DELETION for INTER STORE TRANSFER ENTRY
                */
                invparams = new ArrayList();
                invparams.add(dodetails);
                delInvQuery = "delete from in_sm_detail where stockmovement in (select id from in_stockmovement "
                        + "where modulerefid IN ('" + ist + "'))";
                totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery);
                }
                if(isDelete)
                {
                if (!StringUtil.isNullOrEmpty(sa)) {
                    /*
                    **IN_SM_DETAIL DELETION for STOCK ADJUSTMENT ENTRY
                    */
                    invparams = new ArrayList();
                    invparams.add(product);
                    delInvQuery = "delete from in_sm_detail where stockmovement in (select id from in_stockmovement "
                            + "where modulerefid IN ('" + sa + "') and product=?)";

                    totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery, invparams.toArray());
                }
                }
                if(isEdit || isDelete)
                {

                /*
                 **IN_STOCKMOVEMENT DELETION for INTER STORE TRANSFER ENTRY
                 */
                invparams = new ArrayList();
                invparams.add(dodetails);
                delInvQuery = "delete from in_stockmovement where modulerefid IN ('" + ist + "')";
                totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery);
                }
                if(isDelete)
                {

                if (!StringUtil.isNullOrEmpty(sa)) {
                    /*
                     **IN_STOCKMOVEMENT DELETION for STOCK ADJUSTMENT ENTRY
                     */
                    invparams = new ArrayList();
                    delInvQuery = "delete from in_stockmovement where modulerefid IN ('" + sa + "')";

                    totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery, invparams.toArray());
                }
                /*
                **IN_SA_DETAIL DELETION using sa id  acquired above
                */
                invparams = new ArrayList();
                invparams.add(product);
                delInvQuery = "delete isd from in_sa_detail isd INNER JOIN in_stockadjustment sa ON isd.stockadjustment=sa.id "
                        + " where isd.stockadjustment IN ('" + sa + "') and sa.product=?";
                totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery, invparams.toArray());

                /*
                **IN_STOCKADJUSTMENT DELELTION using sa id acquired above
                */
                invparams = new ArrayList();
                invparams.add(product);
                delInvQuery = "delete from in_stockadjustment where id IN ('" + sa + "') and product=?";

                totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery, invparams.toArray());

                /*
                 **Finally UPDATING PRODUCT Table with deleted quantity only if item is shipped
                 */
                invparams = new ArrayList();
                
                if (status.equalsIgnoreCase("Shipped") || shipqty[doindex] != 0) //update product available quantity only if it is shipped
                {
                    quantityquery = "update product set availablequantity = availablequantity + ? where  id=?;";
                    if (StringUtil.isNullOrEmpty(product)) {
                        qty = "0";
                    }
                    if (status.equalsIgnoreCase("Packed") || status.equalsIgnoreCase("Picked")) {
                        invparams.add(shipqty[doindex]);
                    } else {
                        invparams.add(qty);
                    }
                    invparams.add(product);
                    updaterows = updaterows + executeSQLUpdate(quantityquery, invparams.toArray());
                }
                }
            }
             if(isDelete){             
                /*
                **DELIVERYORDER DELETION
                */
                invparams = new ArrayList();
                invparams.add(requestParams.get("doid"));
                delInvQuery = "delete from deliveryorder where id=? ";
                totaldelrows = totaldelrows + executeSQLUpdate(delInvQuery, invparams.toArray());
                }        

       invparams = null;packingid= null; shipid=null; //dereferencing objects after use
        } catch (Exception ex) {
            throw new AccountingException(errormsg);
        }

        return totaldelrows;
    }
    
    @Override
    public KwlReturnObject deleteSalesReturn(String srid, String companyid) throws ServiceException {
        String query = "update SalesReturn set deleted=true where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{srid, companyid});
        return new KwlReturnObject(true, "Sales Return has been deleted successfully.", null, null, numRows);
    }

    @Override
    public KwlReturnObject deleteAssetDetailsLinkedWithSalesReturn(HashMap<String, Object> requestParams) throws ServiceException {
        int numtotal = 0;
        String errormsg = "Cannot delete Sales Return as its referance child field is not deleted.";
        try {
            if (requestParams.containsKey("srid") && requestParams.containsKey("companyid")) {

                int numRows = 0;
                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("srid"));

                // Deleting data from asset details table

                String assetQuery = "SELECT ad.id FROM salesreturn sr "
                        + "INNER JOIN  srdetails srd ON sr.id=srd.salesreturn "
                        + "INNER JOIN assetdetailsinvdetailmapping amp ON srd.id=amp.invoicedetailid "
                        + "INNER JOIN assetdetail ad on ad.id=amp.assetdetails "
                        + "WHERE amp.moduleid=29 AND sr.company=? and sr.id=?";

                List assetList = executeSQLQuery( assetQuery, params8.toArray());
                Iterator assetItr = assetList.iterator();

                while (assetItr.hasNext()) {
                    ArrayList assetParams = new ArrayList();

                    String assetId = assetItr.next().toString();

                    ArrayList countParams = new ArrayList();
                    countParams.add(assetId);
                    countParams.add(requestParams.get("companyid"));

                    int soCnt = 0, srCnt = 0;

                    String srcountQuery = "SELECT COUNT(*) AS srcount FROM assetdetailsinvdetailmapping amp INNER JOIN "
                            + "assetdetail ad ON amp.assetdetails=ad.id WHERE amp.moduleid=29 AND ad.id=? AND ad.company=?";

                    List srcountList = executeSQLQuery( srcountQuery, countParams.toArray());
                    Iterator srcountListItr = srcountList.iterator();

                    if (srcountListItr.hasNext()) {
                        srCnt = Integer.parseInt(srcountListItr.next().toString());
                    }

                    String socountQuery = "SELECT COUNT(*) AS srcount FROM assetdetailsinvdetailmapping amp INNER JOIN "
                            + "assetdetail ad ON amp.assetdetails=ad.id WHERE amp.moduleid=20 AND ad.id=? AND ad.company=?";

                    List socountList = executeSQLQuery( socountQuery, countParams.toArray());
                    Iterator socountListItr = socountList.iterator();

                    if (socountListItr.hasNext()) {
                        soCnt = Integer.parseInt(socountListItr.next().toString());
                    }

                    if (srCnt < soCnt) {
                        errormsg = "New Lease Order has been created by selecting asset included in this Sales Return, You cannot delete/edit this sales return";
                        throw new AccountingException("New Lease Order has been created by selecting asset included in this Sales Return, You cannot delete/edit this sales return");
                    }

                    assetParams.add(assetId);
                    assetParams.add(requestParams.get("companyid"));

                    String assupdateQuery = "UPDATE assetdetail SET islinkedtoleaseso=true WHERE id=? AND company=?";
                    numRows = executeSQLUpdate( assupdateQuery, assetParams.toArray());
                }


//                String myquery = "select id from srdetails where salesreturn in (select id from salesreturn where company = ? and id=?)";
                String myquery = "select srd.id from srdetails srd inner join salesreturn sr on sr.id=srd.salesreturn where sr.company = ? and sr.id=?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {

                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }

                // Deleting data from assetdetailsinvdetailmapping

                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));

                    String assetMapDelQuery = "DELETE FROM assetdetailsinvdetailmapping WHERE invoicedetailid IN (" + idStrings + ") and moduleid=29 and company=?";
                    numRows += executeSQLUpdate( assetMapDelQuery, assetParams.toArray());
                }
                numtotal = numRows;
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE(errormsg, ex);//+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Delivery Order has been deleted successfully.", null, null, numtotal);
    }

        public KwlReturnObject deleteSalesReturnsBatchSerialDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "", delQuery6, delQuery15 = "", delQueryBatch = "", delQuerySerail = "";
        int numtotal = 0, numRows5 = 0;
        boolean isConsignment=false;
        boolean isnegativestockforlocwar=false;
        String batchserialids = "", batchids = "";
        String serialmapids = "", docids = "";
        String batchmapids = "",consignbatchmapid="",consignserialmapid="",delQueryBs;
        if (requestParams.containsKey("isConsignment") && requestParams.get("isConsignment") != null) {
            isConsignment = Boolean.parseBoolean(requestParams.get("isConsignment").toString());
        }
        if (requestParams.containsKey("isnegativestockforlocwar") && requestParams.get("isnegativestockforlocwar") != null) {
            isnegativestockforlocwar = Boolean.parseBoolean(requestParams.get("isnegativestockforlocwar").toString());
        }
        ArrayList params13 = new ArrayList();
        params13.add(requestParams.get("companyid"));
        params13.add(requestParams.get("srid"));
//        String myquery3 = "  select id from srdetails where salesreturn in(select id from salesreturn where company = ? and id=?)";
        String myquery3 = "  select srd.id from srdetails srd inner join salesreturn sr on sr.id=srd.salesreturn where sr.company = ? and sr.id=?";
        List listBatch = executeSQLQuery( myquery3, params13.toArray());
        Iterator itrBatch = listBatch.iterator();
        while (itrBatch.hasNext()) {
            String batchstring = itrBatch.next().toString();
            docids += "'" + batchstring + "',";
        }
        if (!StringUtil.isNullOrEmpty(docids)) {
            docids = docids.substring(0, docids.length() - 1);
        }
        if (!StringUtil.isNullOrEmpty(docids)) {
            ArrayList params14 = new ArrayList();
            String myquery4 = " select batchmapid,id,stocktype from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='F'";
            String myquery5 = " select serialid,id,stocktype from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='F'";


            List list4 = executeSQLQuery( myquery4, params14.toArray());
            Iterator itr4 = list4.iterator();
            while (itr4.hasNext()) {
                Object[] objArr = (Object[]) itr4.next();
                LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
                if (locationBatchDocumentMapping != null) {
                    HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                     int stocktype=(Integer) objArr[2];
//                    if (isConsignment) {
//                        batchUpdateQtyMap.put("qty", locationBatchDocumentMapping.getQuantity());
//                    } else {
                     if (stocktype == 0) {
                        batchUpdateQtyMap.put("consignquantity", -locationBatchDocumentMapping.getQuantity());
                    } else {
                        batchUpdateQtyMap.put("qty", -locationBatchDocumentMapping.getQuantity());
                    }
//                    }
                    String productid=locationBatchDocumentMapping.getBatchmapid() != null ?locationBatchDocumentMapping.getBatchmapid().getProduct():null; 
                    boolean isBatchSerialforProduct=false;
                    if(!StringUtil.isNullOrEmpty(productid)){
                        Product product= (Product) get(Product.class, productid);
                        isBatchSerialforProduct= product != null ? (product.isIsBatchForProduct() || product.isIsSerialForProduct()) :false;
                    } // Now we checking negative stock at item level. if batch or serial is activated we are not allowing negative stock
                    if (isnegativestockforlocwar && !isBatchSerialforProduct) {
                        batchUpdateQtyMap.put("quantity", -locationBatchDocumentMapping.getQuantity());
                    }

                    if (locationBatchDocumentMapping.getBatchmapid() != null) {
                        Product product = (Product) get(Product.class, (String) locationBatchDocumentMapping.getBatchmapid().getProduct());
                        if (!product.isIsSerialForProduct() && locationBatchDocumentMapping.getTransactiontype() == Constants.Acc_Sales_Return_ModuleId) {
                            batchUpdateQtyMap.put("quantity", -locationBatchDocumentMapping.getQuantity());
                        }
//                    if(locationBatchDocumentMapping.getBatchmapid()!=null){
                        batchUpdateQtyMap.put("id", locationBatchDocumentMapping.getBatchmapid().getId());
                        saveBatchAmountDue(batchUpdateQtyMap);
                    }
                }
                batchmapids += "'" + objArr[0] + "',";

            }
            if (!StringUtil.isNullOrEmpty(batchmapids)) {
                batchmapids = batchmapids.substring(0, batchmapids.length() - 1);
            }
            list4 = executeSQLQuery( myquery5, params14.toArray());
            itr4 = list4.iterator();
            while (itr4.hasNext()) {
                Object[] objArr = (Object[]) itr4.next();
                SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) get(SerialDocumentMapping.class, (String) objArr[1]);
                if (serialDocumentMapping != null) {
                    HashMap<String, Object> serialUpdateQtyMap = new HashMap<String, Object>();
                    int stocktype=(Integer) objArr[2];
//                       if (isConsignment) {
//                        serialUpdateQtyMap.put("qty","1");
//                    } else {
                     if (stocktype == 0) {                                          //   t vend   Consig   ntt   Sock   
                        serialUpdateQtyMap.put("consignquantity", "-1");
                    } else {
                        serialUpdateQtyMap.put("qty", "-1");
                    }
//                    }
                    serialUpdateQtyMap.put("id", serialDocumentMapping.getSerialid().getId());
                    serialUpdateQtyMap.put("approvalstatus",QaApprovalStatus.APPROVED );
                    saveSerialAmountDue(serialUpdateQtyMap);
                }
                serialmapids += "'" + objArr[0] + "',";
            }
            String serialDocumentMappingId = getSerialDocumentIds(list4);
            if (!StringUtil.isNullOrEmpty(serialDocumentMappingId)) {
                serialDocumentMappingId = serialDocumentMappingId.substring(0, serialDocumentMappingId.length() - 1);
                ArrayList params1 = new ArrayList();
                delQuery1 = "delete  from serialcustomdata where serialdocumentmappingid in (" + serialDocumentMappingId + ")";
                int numRows1 = executeSQLUpdate( delQuery1, params1.toArray());
            }
            
            ArrayList params15 = new ArrayList();
            String delQuerypb = "delete  from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='F'";
            int numRows = executeSQLUpdate( delQuerypb, params15.toArray());

            delQuerypb = "delete  from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='F' ";
            numRows = executeSQLUpdate( delQuerypb, params15.toArray());

        if (isConsignment) {  //delete the batch and serial detail wich are generated for stock movment to customer warehouse
            if (!StringUtil.isNullOrEmpty(docids)) {
                ArrayList params17 = new ArrayList();
                String myquery7 = " select batchmapid,id from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='T' ";
                String myquery8 = " select serialid,id from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='T' ";
                List listBatchForConsig= executeSQLQuery( myquery7, params17.toArray());
                Iterator itrBatchForConsig = listBatchForConsig.iterator();
                while (itrBatchForConsig.hasNext()) {
                    Object[] objArr = (Object[]) itrBatchForConsig.next();
                    LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
                    if (locationBatchDocumentMapping != null) {
                        HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
                        batchUpdateQtyMap.put("qty", locationBatchDocumentMapping.getQuantity());
                        batchUpdateQtyMap.put("id", locationBatchDocumentMapping.getBatchmapid().getId());
                        saveBatchAmountDue(batchUpdateQtyMap);
                    }
                    batchmapids += "'" + objArr[0] + "',";

                }
                if (!StringUtil.isNullOrEmpty(batchmapids)) {
                    batchmapids = batchmapids.substring(0, batchmapids.length() - 1);
                }
                listBatchForConsig = executeSQLQuery( myquery8, params17.toArray());
                itrBatchForConsig = listBatchForConsig.iterator();
                while (itrBatchForConsig.hasNext()) {
                    Object[] objArr = (Object[]) itrBatchForConsig.next();
                    SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) get(SerialDocumentMapping.class, (String) objArr[1]);
                    if (serialDocumentMapping != null) {
                        HashMap<String, Object> serialUpdateQtyMap = new HashMap<String, Object>();
                        serialUpdateQtyMap.put("qty", "1");
                        serialUpdateQtyMap.put("id", serialDocumentMapping.getSerialid().getId());
                        serialUpdateQtyMap.put("approvalstatus",QaApprovalStatus.APPROVED );
                        saveSerialAmountDue(serialUpdateQtyMap);
                    }
                    serialmapids += "'" + objArr[0] + "',";
                }
                ArrayList paramslmap = new ArrayList();
                delQuerypb = "delete  from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='T' ";
                int numRowslmap = executeSQLUpdate( delQuerypb, paramslmap.toArray());

                delQuerypb = "delete  from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='T' ";
                numRows = executeSQLUpdate( delQuerypb, params15.toArray());

            }
        }

    }
        return new KwlReturnObject(true, "Delivery Order has been deleted successfully.", null, null, numtotal);
    }
        public KwlReturnObject getSalesReturnsBatchDetails(HashMap<String, Object> requestParams) throws ServiceException {        
        List list=new ArrayList();
        String docids = "";
        ArrayList params13 = new ArrayList();
        params13.add(requestParams.get("companyid"));
        params13.add(requestParams.get("srid"));
//        String myquery3 = "  select id from srdetails where salesreturn in(select id from salesreturn where company = ? and id=?)";
        String myquery3 = " select srd.id from srdetails srd inner join salesreturn sr on sr.id=srd.salesreturn where sr.company = ? and sr.id=?";
        List listBatch = executeSQLQuery( myquery3, params13.toArray());
        Iterator itrBatch = listBatch.iterator();
        while (itrBatch.hasNext()) {
            String batchstring = itrBatch.next().toString();
            docids += "'" + batchstring + "',";
        }
        if (!StringUtil.isNullOrEmpty(docids)) {
            docids = docids.substring(0, docids.length() - 1);
        }
        if (!StringUtil.isNullOrEmpty(docids)) {
//            ArrayList params14 = new ArrayList();
            String myquery4 = "from LocationBatchDocumentMapping where documentid in (" + docids + ") ";
//            String myquery5 = " select serialid,id from serialdocumentmapping where documentid in (" + docids + ") ";


          list = executeQuery( myquery4);
//            Iterator itr4 = list4.iterator();
//            while (itr4.hasNext()) {
//                Object[] objArr = (Object[]) itr4.next();
//                LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
//                if (locationBatchDocumentMapping != null) {
//                    HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
//                    batchUpdateQtyMap.put("qty", -locationBatchDocumentMapping.getQuantity());
//                    batchUpdateQtyMap.put("id", locationBatchDocumentMapping.getBatchmapid().getId());
//                    saveBatchAmountDue(batchUpdateQtyMap);
//                }
//                batchmapids += "'" + objArr[0] + "',";
//
//            }
           

        }
        return new KwlReturnObject(true, "Sales Return Batch Details.", null, list, list.size());
    }

    @Override
    public KwlReturnObject deleteSalesReturnPermanent(HashMap<String, Object> requestParams) throws ServiceException {

        String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "", delQuery6, batchserialids = "", batchids = "", delQuery15 = "", delQuerySerail = "", delQueryBatch = "",delQueryRetBmap="";
        int numtotal = 0;
        String errormsg = "Cannot delete Sales Return as its referance child field is not deleted.";
        try {
            if (requestParams.containsKey("srid") && requestParams.containsKey("companyid")) {

                boolean isLeaseFixedAsset = false;
                boolean isConsignment = false;
                boolean isnegativestockforlocwar = false;
           
                if (requestParams.containsKey("isLeaseFixedAsset") && requestParams.get("isLeaseFixedAsset") != null) {
                    isLeaseFixedAsset = (Boolean) requestParams.get("isLeaseFixedAsset");
                }
                if (requestParams.containsKey("isConsignment") && requestParams.get("isConsignment") != null) {
                    isConsignment = (Boolean) requestParams.get("isConsignment");
                }
                if (requestParams.containsKey("isnegativestockforlocwar") && requestParams.get("isnegativestockforlocwar") != null) {
                    isnegativestockforlocwar = Boolean.parseBoolean(requestParams.get("isnegativestockforlocwar").toString());
                }
                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("srid"));

                // Deleting data from asset details table

                if (isLeaseFixedAsset) {

                    String assetQuery = "SELECT ad.id FROM salesreturn sr "
                            + "INNER JOIN srdetails srd ON sr.id=srd.salesreturn "
                            + "INNER JOIN assetdetailsinvdetailmapping amp ON srd.id=amp.invoicedetailid "
                            + "INNER JOIN assetdetail ad on ad.id=amp.assetdetails "
                            + "WHERE amp.moduleid=29 AND sr.company=? and sr.id=?";

                    List assetList = executeSQLQuery( assetQuery, params8.toArray());
                    Iterator assetItr = assetList.iterator();

                    while (assetItr.hasNext()) {
                        ArrayList assetParams = new ArrayList();

                        String assetId = assetItr.next().toString();

                        // Check SR And SO Count before updating asset details of an asset

                        ArrayList countParams = new ArrayList();
                        countParams.add(assetId);
                        countParams.add(requestParams.get("companyid"));

                        int soCnt = 0, srCnt = 0;

                        String srcountQuery = "SELECT COUNT(*) AS srcount FROM assetdetailsinvdetailmapping amp INNER JOIN "
                                + "assetdetail ad ON amp.assetdetails=ad.id WHERE amp.moduleid=29 AND ad.id=? AND ad.company=?";

                        List srcountList = executeSQLQuery( srcountQuery, countParams.toArray());
                        Iterator srcountListItr = srcountList.iterator();

                        if (srcountListItr.hasNext()) {
                            srCnt = Integer.parseInt(srcountListItr.next().toString());
                        }

                        String socountQuery = "SELECT COUNT(*) AS srcount FROM assetdetailsinvdetailmapping amp INNER JOIN "
                                + "assetdetail ad ON amp.assetdetails=ad.id WHERE amp.moduleid=20 AND ad.id=? AND ad.company=?";

                        List socountList = executeSQLQuery( socountQuery, countParams.toArray());
                        Iterator socountListItr = socountList.iterator();

                        if (socountListItr.hasNext()) {
                            soCnt = Integer.parseInt(socountListItr.next().toString());
                        }

                        if (srCnt < soCnt) {
                            errormsg = "New Lease Order has been created by selecting asset included in this Sales Return, You cannot delete/edit this sales return";
                            throw new AccountingException("New Lease Order has been created by selecting asset included in this Sales Return, You cannot delete/edit this sales return");
                        }

                        assetParams.add(assetId);
                        assetParams.add(requestParams.get("companyid"));

                        String assupdateQuery = "UPDATE assetdetail SET islinkedtoleaseso=true WHERE id=? AND company=?";
                        int numRows = executeSQLUpdate( assupdateQuery, assetParams.toArray());
                    }
                }
                
            
//                String myquery = "select id from srdetails where salesreturn in (select id from salesreturn where company = ? and id=?)";
                String myquery = "select srd.id from srdetails srd inner join salesreturn sr on sr.id=srd.salesreturn where sr.company = ? and sr.id=?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {

                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }

               
                myquery = "select srdetails.id as srdetailsid,product.id as productid,srdetails.perviousissuecount,product.totalissuecount from srdetails inner join product on srdetails.product=product.id where srdetails.id in (" + idStrings + ")  and product.company=?";

                List list2 = executeSQLQuery( myquery, new Object[]{requestParams.get("companyid")});
                String updteissuecntquery = "update product set totalissuecount=? where id=? and company=?";
                for (Object obj : list2) {
                    Object objArr[] = (Object[]) obj;
                    String productID = (String) objArr[1];
                    double perviousIssueCount = Double.parseDouble(objArr[2].toString());
                    double totalIssueCount = Double.parseDouble(objArr[3].toString());
                    double updatedCount = totalIssueCount - perviousIssueCount;
                    double numRows = executeSQLUpdate( updteissuecntquery, new Object[]{updatedCount, productID, requestParams.get("companyid")});
                }
                
                if (!StringUtil.isNullOrEmpty(idStrings) && isLeaseFixedAsset) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));

                    String assetMapDelQuery = "DELETE FROM assetdetailsinvdetailmapping WHERE invoicedetailid IN (" + idStrings + ") and moduleid=29 and company=?";
                    int numRows = executeSQLUpdate( assetMapDelQuery, assetParams.toArray());
                }

                if (!isLeaseFixedAsset) {
                    
                    HashMap<String, Object> requestParamsdelete = new HashMap<String, Object>();
                    requestParamsdelete.put("srid", requestParams.get("srid"));
                    requestParamsdelete.put("companyid", requestParams.get("companyid"));
                    requestParamsdelete.put("isLeaseFixedAsset", isLeaseFixedAsset);
                    requestParamsdelete.put("isConsignment", isConsignment);
                    requestParamsdelete.put("isConsignment", isConsignment);
                    requestParamsdelete.put("isnegativestockforlocwar", isnegativestockforlocwar);
                    deleteSalesReturnsBatchSerialDetails(requestParamsdelete);
                    
//                    ArrayList params13 = new ArrayList();
//                    params13.add(requestParams.get("companyid"));
//                    params13.add(requestParams.get("srid"));
//                    String myquery3 = "  select batch from srdetails where salesreturn in(select id from salesreturn where company = ? and id=?) and batch is not null";
//                    List listBatch = executeSQLQuery( myquery3, params13.toArray());
//                    Iterator itrBatch = listBatch.iterator();
//                    while (itrBatch.hasNext()) {
//                        String batchstring = itrBatch.next().toString();
//                        batchids += "'" + batchstring + "',";
//                    }
//                    if (!StringUtil.isNullOrEmpty(batchids)) {
//                        batchids = batchids.substring(0, batchids.length() - 1);
//                    }
//                    if (!StringUtil.isNullOrEmpty(batchids)) {
//                        ArrayList params14 = new ArrayList();
//                        String myquery4 = " select id from batchserial where batch in (" + batchids + ") ";
//                        List list4 = executeSQLQuery( myquery4, params14.toArray());
//                        Iterator itr4 = list4.iterator();
//                        while (itr4.hasNext()) {
//
//                            String batchstringids = itr4.next().toString();
//                            batchserialids += "'" + batchstringids + "',";
//                        }
//                        if (!StringUtil.isNullOrEmpty(batchserialids)) {
//                            batchserialids = batchserialids.substring(0, batchserialids.length() - 1);
//                        }
//                    }
//                    if (!StringUtil.isNullOrEmpty(batchserialids)) {  //delete mapping 
//                        ArrayList params15 = new ArrayList();
//                        delQuery15 = "delete  from returnserialmapping where mapserial in (" + batchserialids + ") ";
//                        int numRows8 = executeSQLUpdate( delQuery15, params15.toArray());
//
//                        ArrayList paramsSerial = new ArrayList(); //delete all serial no 
//                        delQuerySerail = " delete from batchserial where id in(" + batchserialids + ") ";
//                        int numRowsSerial = executeSQLUpdate( delQuerySerail, paramsSerial.toArray());
//                    }
                }

                ArrayList params5 = new ArrayList();
                params5.add(requestParams.get("companyid"));
                params5.add(requestParams.get("srid"));
//                delQuery5 = "delete from srdetails where salesreturn in (select id from salesreturn where company =?  and id=?)";
                delQuery5 = "delete srd from srdetails srd join salesreturn sr on sr.id=srd.salesreturn where sr.company =? and sr.id=?";
                int numRows5 = executeSQLUpdate( delQuery5, params5.toArray());
                
                if (!isLeaseFixedAsset) { //deleting batch from table
                    if (!StringUtil.isNullOrEmpty(batchids)) {
                        ArrayList paramsRetBmap = new ArrayList();
                        delQueryRetBmap = "delete  from returnbatchmapping where batchmap in (" + batchids + ") ";
                        int numRowsRetBmap = executeSQLUpdate( delQueryRetBmap, paramsRetBmap.toArray());

                        ArrayList paramsBatch = new ArrayList();
                        delQueryBatch = "delete  from productbatch where id in (" + batchids + ") ";
                        int numRowsBatch = executeSQLUpdate( delQueryBatch, paramsBatch.toArray());
                    }
                }
                //deleteSalesReturnPermanent
                boolean isMRPModuleActivated = false;
                String inventoryjeid = "";
                boolean isPerpetualValuationActivated = false;
                if (requestParams.containsKey("isPerpetualValuationActivated") && requestParams.get("isPerpetualValuationActivated") != null) {
                    isPerpetualValuationActivated = Boolean.parseBoolean(requestParams.get("isPerpetualValuationActivated").toString());
                }
                if (requestParams.containsKey("isMRPModuleActivated") && requestParams.get("isMRPModuleActivated") != null) {
                    isMRPModuleActivated = Boolean.parseBoolean(requestParams.get("isMRPModuleActivated").toString());
                }
                if (isMRPModuleActivated || isPerpetualValuationActivated) {
                    if (requestParams.containsKey("inventoryjeid") && requestParams.get("inventoryjeid") != null && !StringUtil.isNullOrEmpty(requestParams.get("inventoryjeid").toString())) {
                        inventoryjeid = requestParams.get("inventoryjeid").toString();
                        String query = "update salesreturn set inventoryje=NULL where id = ? and company = ?";
                        executeSQLUpdate(query, new Object[]{requestParams.get("srid"), requestParams.get("companyid")});
                        ArrayList params1 = new ArrayList();
                        params1.add(requestParams.get("companyid"));
                        delQuery1 = "delete  from accjedetailcustomdata where jedetailId in (select id from jedetail where company = ? and journalEntry in ('" + inventoryjeid + "'))";
                        executeSQLUpdate(delQuery1, params1.toArray());
                        ArrayList params3 = new ArrayList();
                        params3.add(requestParams.get("companyid"));
                        delQuery3 = "delete from jedetail where company = ? and journalEntry in ('" + inventoryjeid + "') ";
                        executeSQLUpdate(delQuery3, params3.toArray());
                        ArrayList params4 = new ArrayList();
                        delQuery4 = "delete from journalentry where id  in ('" + inventoryjeid + "')";
                        executeSQLUpdate(delQuery4, params4.toArray());
                        ArrayList params2 = new ArrayList();
                        delQuery2 = "delete  from accjecustomdata where journalentryId in ('" + inventoryjeid + "')";
                        executeSQLUpdate(delQuery2, params2.toArray());
                    }
                }
//                ArrayList params = new ArrayList();
//                params.add(requestParams.get("companyid"));
//                delQuery = "delete  from inventory where company = ? and id in (" + idStrings + ") ";
//                int numRows = executeSQLUpdate( delQuery, params.toArray());
                String companyid = (String) requestParams.get("companyid");
                String selQuery = "from Inventory where company.companyID = ? and  ID in (" + idStrings + ") ";
                List resultList = executeQuery( selQuery, new Object[]{companyid});
                Iterator itrInv = resultList.iterator();
                while (itrInv.hasNext()) {
                    Inventory inventory = (Inventory) itrInv.next();
                    if (inventory != null && inventory.isDeleted() == false) {
                        if (inventory.isCarryIn()) {
                            inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() - inventory.getBaseuomquantity());// minus Purchase and Plus Sales (for Reverse effect for quantity)
                        } else {
                            inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() + inventory.getBaseuomquantity());
                        }
                    }
                }
                deleteAll(resultList);
                int numRows = resultList.size();


                ArrayList params9 = new ArrayList();
                params9.add(requestParams.get("companyid"));
                params9.add(requestParams.get("srid"));
                String myquery1 = "select id from salesreturn where company = ? and id=?";
                List list1 = executeSQLQuery( myquery1, params9.toArray());
                Iterator itr1 = list1.iterator();
                String journalent = "";
                while (itr1.hasNext()) {

                    String jeidi = itr1.next().toString();
                    journalent += "'" + jeidi + "',";
                }
                if (!StringUtil.isNullOrEmpty(journalent)) {
                    journalent = journalent.substring(0, journalent.length() - 1);
                }
                /**
                 * Delete GST Fields for India.
                 */
                deleteGstTaxClassDetails(idStrings);
                ArrayList params1 = new ArrayList();
                delQuery1 = "delete  from srdetailscustomdata where srdetailsid in (" + idStrings + ")";
                int numRows1 = executeSQLUpdate( delQuery1, params1.toArray());

                deleteGstDocHistoryDetails(requestParams.get("srid").toString());
                ArrayList params6 = new ArrayList();
                params6.add(requestParams.get("companyid"));
                params6.add(requestParams.get("srid"));
                delQuery6 = "delete from salesreturn where company = ? and id=?";
                int numRows6 = executeSQLUpdate( delQuery6, params6.toArray());


                ArrayList params2 = new ArrayList();
                delQuery2 = "delete  from salesreturncustomdata where salesReturnId in (" + journalent + ")";
                int numRows2 = executeSQLUpdate( delQuery2, params2.toArray());


                numtotal = numRows + numRows1 + numRows2 + numRows5 + numRows6;
            }

            return new KwlReturnObject(true, "Sales Return  has been deleted successfully.", null, null, numtotal);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(errormsg, ex);//+ex.getMessage(), ex);
        }

    }

    public KwlReturnObject saveDeliveryOrderStatus(String doId, String status) throws ServiceException {
        String query = "update DeliveryOrder set status.ID=? where ID=? ";
        int numRows = executeUpdate( query, new Object[]{status, doId});
        return new KwlReturnObject(true, "Status has been updated successfully.", null, null, numRows);
    }

    public KwlReturnObject getDeliveryOrderDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from DeliveryOrderDetail";
        return buildNExecuteQuery( query, requestParams);
    }
    
     /**
     *
     * @param requestParams
     * @return DeliveryOrderDetail List
     * @throws ServiceException
     */
    @Override
    public KwlReturnObject getCalculatedDODtlTax(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        try {
            ArrayList paramslist = new ArrayList();
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            String startDate = (String) requestParams.get(Constants.REQ_startdate);
            String endDate = (String) requestParams.get(Constants.REQ_enddate);
            boolean isTaxAppliedDOs = requestParams.containsKey("isTaxAppliedDOs") ? (Boolean) requestParams.get("isTaxAppliedDOs") : false;

            if (requestParams.containsKey(Constants.companyKey) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.companyKey))) {
                paramslist.add(requestParams.get(Constants.companyKey));
            }
            String Condition = "";
            if (requestParams.containsKey(Constants.TAXID) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.TAXID))) {
                Condition += " and doDtl.tax.ID = ? ";
                paramslist.add(requestParams.get(Constants.TAXID));
            }
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate) && isTaxAppliedDOs) {
                Condition += " and ( deliveryOrder.appliedDate >=? and deliveryOrder.appliedDate <=?) and doDtl.deliveryOrder.appliedForTax = ? ";
                paramslist.add(df.parse(startDate));
                paramslist.add(df.parse(endDate));
                paramslist.add(isTaxAppliedDOs);
            }
            String mySearchFilterString = "";
            if (requestParams.containsKey(Constants.Acc_Search_Json) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.Acc_Search_Json))) {
                mySearchFilterString = StringUtil.getMySearchFilterString(requestParams, paramslist);
                if (mySearchFilterString.contains("c.deliveryordercustomdata")) {
                    mySearchFilterString = mySearchFilterString.replaceAll("c.deliveryordercustomdata", "doDtl.deliveryOrder.deliveryOrderCustomData");
                }
            }

            String query = "select distinct(doDtl) from DeliveryOrderDetail doDtl where doDtl.company.companyID = ? and doDtl.deliveryOrder.deleted = false " + Condition + mySearchFilterString;
            returnlist = executeQuery(query, paramslist.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getCalculatedDODtlTax:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }

    @Override
    public KwlReturnObject getWorkOrderDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from AssetMaintenanceWorkOrderDetail";
        return buildNExecuteQuery( query, requestParams);
    }

    
    public KwlReturnObject getInvoiceForSalesProductCategoryDetails(HashMap<String, Object> requestParams) throws ServiceException { //function to check delivery order used in sales return
        List returnlist = new ArrayList();
        ArrayList params = new ArrayList();
        int count = 0;
        String condition = "";
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        try {
            String companyId = (String) requestParams.get("companyid");
            params.add(companyId);
            String startDate = (String) requestParams.get(Constants.REQ_startdate);
            String endDate = (String) requestParams.get(Constants.REQ_enddate);
            String ss = (String) requestParams.get(Constants.ss);
            String start = "";
            String limit = "";
            String joinString1 = "";
            if (requestParams.containsKey(Constants.start) && requestParams.get(Constants.start) != null && requestParams.containsKey(Constants.limit) && requestParams.get(Constants.limit) != null) {
                start = (String) requestParams.get(Constants.start);
                limit = (String) requestParams.get(Constants.limit);
            }
            if (!StringUtil.isNullOrEmpty(ss)) {
                joinString1 += " inner join customer on customer.id = invoice.customer ";
                String[] searchcol = new String[]{"invoice.invoicenumber", "customer.name"};
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 2); StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, Constants.and, searchcol);
                condition += searchQuery;
            }
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                joinString1 += " inner join journalentry on journalentry.ID=invoice.journalentry ";
//                condition += " and (journalentry.entryDate >=? and journalentry.entryDate <=?)";
                condition += " and (invoice.creationdate >=? and invoice.creationdate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String appendCase = "and";
            String mySearchFilterString = "";

            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            String searchDefaultFieldSQL = "";
            String jeid = " jedetail.id = invoice.centry ";
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);

                    if (customSearchFieldArray.length() > 0) {
                        /*
                         * Advance Search For Custom fields
                         */
                        requestParams.put(Constants.Searchjson, Searchjson);
                        requestParams.put(Constants.appendCase, appendCase);
                        requestParams.put("filterConjuctionCriteria", filterConjuctionCriteria);

                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(requestParams, true).get(Constants.myResult));
                        if (mySearchFilterString.contains("accjecustomdata")) {
                            joinString1 += " inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry ";
                        }
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                        if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "accjedetailcustomdata");//    
                            joinString1 += " inner join accjedetailcustomdata  on accjedetailcustomdata.jedetailId=jedetail.id ";
                            jeid = " jedetail.journalentry = invoice.journalentry ";
                        }
                        if (mySearchFilterString.contains("CustomerCustomData")) {
                            joinString1 += " inner join customercustomdata  on customercustomdata.customerId=invoice.customer ";
                            mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "customercustomdata");
                        }
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }

            String query = "select invoice.id from invoice " + joinString1 + " where invoice.isfixedassetinvoice=false and invoice.isconsignment=false and invoice.isfixedassetleaseinvoice=false and  invoice.company=? " + condition + mySearchFilterString;
            returnlist = executeSQLQuery( query, params.toArray());
            count = returnlist.size();
            returnlist = executeSQLQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoiceForSalesProductCategoryDetails:" + ex.getMessage(), ex);
        }

        return new KwlReturnObject(true, "", null, returnlist, count);
    }

    public KwlReturnObject getProductCategoryForDetailsReport(String productId) throws ServiceException { //function to check delivery order used in sales return
        List returnlist = new ArrayList();
        ArrayList params = new ArrayList();
        int count = 0;
        try {
            String query = "from ProductCategoryMapping where productID.ID=? ";
            returnlist = executeQuery( query, new Object[]{productId});
            count = returnlist.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoiceForSalesProductCategoryDetails:" + ex.getMessage(), ex);
        }

        return new KwlReturnObject(true, "", null, returnlist, count);
    }
     
    @Override
    public KwlReturnObject getTaxAdjustments(HashMap<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        ArrayList params = new ArrayList();
        int count = 0;
        try {
            String companyId = (String) requestParams.get("companyid");
            params.add(companyId);

            String condition = "";

            if (requestParams.containsKey("isInputTax") && requestParams.get("isInputTax") != null) {
                condition += " and ta.inputAdjustment=? ";
                params.add((Boolean) requestParams.get("isInputTax"));
            }

            if (requestParams.containsKey("documentNo") && requestParams.get("documentNo") != null) {
                condition += " and ta.documentNo=? ";
                params.add((String) requestParams.get("documentNo"));
            }

            if (requestParams.containsKey("startDate") && requestParams.get("startDate") != null && requestParams.containsKey("endDate") && requestParams.get("endDate") != null) {
                condition += " and ta.creationDate>=? and ta.creationDate<=? ";
                params.add((Date) requestParams.get("startDate"));
                params.add((Date) requestParams.get("endDate"));
            }
            if (requestParams.containsKey("taxid") && requestParams.get("taxid") != null) {
                condition += " and ta.tax.ID = ? ";
                params.add((String) requestParams.get("taxid"));
            }


            String ss = (requestParams.containsKey("ss") && requestParams.get("ss") != null) ? (String) requestParams.get("ss") : "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"ta.documentNo"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 1);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery;
            }

            String start = "";
            String limit = "";

            if (requestParams.containsKey(Constants.start) && requestParams.get(Constants.start) != null && requestParams.containsKey(Constants.limit) && requestParams.get(Constants.limit) != null) {
                start = (String) requestParams.get(Constants.start);
                limit = (String) requestParams.get(Constants.limit);
            }
            
            String mySearchFilterString = "";
            if (requestParams.containsKey(Constants.Acc_Search_Json) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.Acc_Search_Json))) {
                mySearchFilterString = StringUtil.getMySearchFilterString(requestParams, params);
                if (mySearchFilterString.contains("c.AccJECustomData")) {
                    mySearchFilterString = mySearchFilterString.replaceAll("c.AccJECustomData", "ta.journalEntry.accBillInvCustomData");
                }
            }

            String query = "from TaxAdjustment ta where ta.company.companyID=? " + condition + mySearchFilterString;
            returnlist = executeQuery( query, params.toArray());
            count = returnlist.size();

            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                returnlist = executeQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getAssetMaintenanceWorkOrders:" + ex.getMessage(), ex);
        }

        return new KwlReturnObject(true, "", null, returnlist, count);
    }

    public KwlReturnObject getSalesReturnDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from SalesReturnDetail";
        return buildNExecuteQuery( query, requestParams);
    }

    public KwlReturnObject getCalculatedInvDtlTaxDistinctBilling(Map<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        List paramslist = new ArrayList();
        String Condition = "";
        String taxid = (String) requestParams.get("taxid");
        paramslist.add(taxid);
        if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
            Condition = " and inv.billingInvoice.journalEntry.entryDate >= ? and inv.billingInvoice.journalEntry.entryDate <= ?";
            paramslist.add(requestParams.get("startDate"));
            paramslist.add(requestParams.get("endDate"));
        }
        String query = "select distinct(inv.billingInvoice.journalEntry.ID), inv.billingInvoice.billingInvoiceNumber from BillingInvoiceDetail inv where inv.tax.ID = ? and inv.billingInvoice.deleted=false" + Condition;
        returnlist = executeQuery( query, paramslist.toArray());
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }

//select inv.journalEntry.ID from BillingInvoice inv where inv.ID in( " + qMarks + ") and inv.company.companyID=je.company.companyID
    @Override
    public KwlReturnObject getDeliveryOrderCount(String orderno, String companyid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from DeliveryOrder where deliveryOrderNumber=? and company.companyID=?";
        list = executeQuery( q, new Object[]{orderno, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }
    /*
     * Get INVOICE as per invoice number
     * 
     */
    @Override
    public KwlReturnObject getInvoiceNoCount(String invoiceNo, String companyid,String customerId) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from Invoice where invoiceNumber=? and company.companyID=? and customer.ID=? and approvestatuslevel=11 and deleted=false";
        list = executeQuery( q, new Object[]{invoiceNo, companyid,customerId});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    /* check for dublication of customer PORefNo */
     public KwlReturnObject getInvoiceFromCustomerPORefNo(JSONObject reqParams) throws ServiceException {
        List list = new ArrayList();
        String receiptno=reqParams.optString("CustomerPORefNo");
        String companyid=reqParams.optString("companyid");
        String invid=reqParams.optString("invid");  
        String q = "select invoicenumber from invoice where porefno=?  and company=? ";
        if(!StringUtil.isNullOrEmpty(invid)){
                    q +=" and id <>" +"'"+ invid +"'";
        }
        list = executeSQLQuery(q, new Object[]{receiptno, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    /*
     * Get CUSTOMER DEBIT NOTE as per debit note number
     * 
     */
    @Override
    public KwlReturnObject getCustomerDebitNoCount(String debitNo, String companyid,String customerId ) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from DebitNote where debitNoteNumber=? and company.companyID=? and customer.ID=? and approvestatuslevel=11 and deleted=false";
        list = executeQuery( q, new Object[]{debitNo, companyid,customerId});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    /*
     * Get VENDOR DEBIT NOTE as per debit note number
     * 
     */
    
    @Override
    public KwlReturnObject getVendorDebitNoCount(String debitNo, String companyid,String vendorId ) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from DebitNote where debitNoteNumber=? and company.companyID=? and vendor.ID=? and approvestatuslevel=11 and deleted=false";
        list = executeQuery( q, new Object[]{debitNo, companyid,vendorId});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    
    /*
     * Get PAYMENT as per refundNo
     * 
     */
    

    
    @Override
    public KwlReturnObject getSalesInvoiceLinkedWithDebitNote(String debitNoteId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(companyId);
        params.add(debitNoteId);
        String query = "SELECT DISTINCT inv.id, je.entrydate, inv.invoicenumber FROM dndetailsgst dnd, invoicedetails invd, invoice inv, debitnote dn inner join journalentry je on je.id=dn.journalentry"
                + " WHERE inv.id = invd.invoice AND invd.id = dnd.cidetails AND dn.id = dnd.debitNote AND dnd.company = ?"
                + " AND dnd.debitnote = ?";
        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
     @Override
    public KwlReturnObject getInvoiceLinkedWithCreditNote(String creditNoteId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(companyId);
        params.add(creditNoteId);
        String query = "select DISTINCT inv.id,inv.grnumber from cndetailsgst dnd, grdetails invd , goodsreceipt inv where inv.id = invd.goodsreceipt and invd.id = dnd.videtails and dnd.company =  ? and dnd.creditnote = ?";
        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getPurchaseInvoiceLinkedWithOverchargeDebitNote(String debitNoteId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(companyId);
        params.add(debitNoteId);
        String query = "select DISTINCT gr.id,gr.grnumber from dndetailsgst dndgst, grdetails grd , goodsreceipt gr where gr.id = grd.goodsreceipt and grd.id = dndgst.grdetail and dndgst.company =  ? and dndgst.debitNote = ?";
        List list = executeSQLQuery(query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getInvoiceLinkedWithOverchargeCreditNote(String creditNoteId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(companyId);
        params.add(creditNoteId);
        String query = "select DISTINCT inv.id,inv.invoicenumber from cndetailsgst cndgst, invoicedetails invDetails , invoice inv where inv.id = invDetails.invoice and invDetails.id = cndgst.invoicedetail and cndgst.company =  ? and cndgst.creditNote = ? "
                + " UNION "
                + " select inv.id,cnd.invoicelinkdate from invoice inv inner join cndetails cnd on inv.id = cnd.invoice where cnd.creditNote= '"+ creditNoteId +"' and cnd.company = '"+companyId+"'";
        List list = executeSQLQuery(query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getWorkOrderCount(String orderno, String companyid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from AssetMaintenanceWorkOrder where workOrderNumber=? and company.companyID=?";
        list = executeQuery( q, new Object[]{orderno, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }
//    @Override
//    public KwlReturnObject getScheduleNumberCount(String scheduleNumber, String companyid) throws ServiceException {
//        List list = new ArrayList();
//        int count = 0;
//        String q = "from AssetMaintenanceSchedulerObject where scheduleName=? and company.companyID=?";
//        list = executeQuery( q, new Object[]{scheduleNumber, companyid});
//        count = list.size();
//        return new KwlReturnObject(true, "", null, list, count);
//    }
    //update the Lock quantity of So if it is delivered

    public KwlReturnObject updateSOLockQuantity(String sodid, double dquantity, String companyid) throws ServiceException {
        int count = 0;
        ArrayList params = new ArrayList();
        params.add(dquantity);
        params.add(sodid);
        params.add(companyid);
        String query = "update sodetails set lockquantity=(lockquantity-?) where id=? and company=?";
        count = executeSQLUpdate( query, params.toArray());
        return new KwlReturnObject(true, "lockquantity has been updated successfully.", null, null, count);
    }
    //update the Lock quantity of sub products used in Assemby type of product if its SO is delivered

    public KwlReturnObject updateAssemblyLockQuantity(String sodid, double dquantity) throws ServiceException {
        int count = 0;
        ArrayList params = new ArrayList();
        params.add(dquantity);
        params.add(sodid);
        String query = "update lockassemblyquantitymapping set quantity=(quantity-?) where id=? ";
        count = executeSQLUpdate( query, params.toArray());
        return new KwlReturnObject(true, "quantity has been updated successfully.", null, null, count);
    }

    public KwlReturnObject updateSOLockQuantityAfterDeletion(String sodid, double dquantity, String companyid) throws ServiceException {
        int count = 0;
        ArrayList params = new ArrayList();
        params.add(dquantity);
        params.add(sodid);
        params.add(companyid);
        String query = "update sodetails set lockquantity=(lockquantity+?) where id=? and company=?";
        count = executeSQLUpdate( query, params.toArray());
        return new KwlReturnObject(true, "lockquantity has been updated successfully.", null, null, count);
    }
    //this function is for the purpose of updating serial no and batch lock quantity while deleting do we are againg locking that much quantity and locked serial
    public KwlReturnObject updateSOLockBatchSerialDetailsAfterDeletion(String docids, double dquantity, String companyid) throws ServiceException {
        String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuerypb = "", delQuery5 = "", delQuery6, delQuery15 = "", delQueryBatch = "", delQuerySerail = "", delQueryBmap = "",delQueryBs="";
        int numtotal = 0, numRows5 = 0;
        String batchserialids = "", batchids = "";
        String serialmapids = "";
        String batchmapids = "",consignbatchmapid="",consignserialmapid="";
        if (!StringUtil.isNullOrEmpty(docids)) {
            ArrayList params14 = new ArrayList();
            String myquery4 = " select batchmapid,id from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='F'";
            String myquery5 = " select serialid,id from serialdocumentmapping where documentid in (" + docids + ") and isconsignment='F' ";
            
            
            List list4 = executeSQLQuery( myquery4, params14.toArray());
            Iterator itr4 = list4.iterator();
            while (itr4.hasNext()) {
                Object[] objArr = (Object[]) itr4.next();
                LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
                if (locationBatchDocumentMapping != null) {
                    HashMap<String, Object> batchUpdateQtyMap = new HashMap<String, Object>();
//                    batchUpdateQtyMap.put("qty", locationBatchDocumentMapping.getQuantity());
                    batchUpdateQtyMap.put("id", locationBatchDocumentMapping.getBatchmapid().getId());
                    
//                    batchUpdateQtyMap.put("isForconsignment", false);
//                    batchUpdateQtyMap.put("consignquantity", 0.0);
                    batchUpdateQtyMap.put("lockquantity", locationBatchDocumentMapping.getQuantity());
                    saveBatchAmountDue(batchUpdateQtyMap);
                }
                batchmapids += "'" + objArr[0] + "',";

            }
            if (!StringUtil.isNullOrEmpty(batchmapids)) {
                batchmapids = batchmapids.substring(0, batchmapids.length() - 1);
            }
            list4 = executeSQLQuery( myquery5, params14.toArray());
            itr4 = list4.iterator();
            while (itr4.hasNext()) {
                Object[] objArr = (Object[]) itr4.next();
                SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) get(SerialDocumentMapping.class, (String) objArr[1]);
                if (serialDocumentMapping != null) {
                    HashMap<String, Object> serialUpdateQtyMap = new HashMap<String, Object>();
//                    serialUpdateQtyMap.put("qty", "1");
                    serialUpdateQtyMap.put("id", serialDocumentMapping.getSerialid().getId());
//                    serialUpdateQtyMap.put("isForconsignment", false);
//                    serialUpdateQtyMap.put("consignquantity", 0.0);
                    serialUpdateQtyMap.put("lockquantity","1");
                    saveSerialAmountDue(serialUpdateQtyMap);
                }
                serialmapids += "'" + objArr[0] + "',";
            }
            if (!StringUtil.isNullOrEmpty(serialmapids)) {
                serialmapids = serialmapids.substring(0, serialmapids.length() - 1);
            }
        }
        return new KwlReturnObject(true, "Delivery Order has been deleted successfully.", null, null, numtotal);
    }
    //update the Lock quantity of sub products used in Assemby type of product if its SO is delivered

    public KwlReturnObject updateAssemblyLockQuantityAfterDeletion(String sodid, double dquantity) throws ServiceException {
        int count = 0;
        ArrayList params = new ArrayList();
        params.add(dquantity);
        params.add(sodid);
        String query = "update lockassemblyquantitymapping set quantity=(quantity+?) where id=? ";
        count = executeSQLUpdate( query, params.toArray());
        return new KwlReturnObject(true, "quantity has been updated successfully.", null, null, count);
    }
//get the sales order status wether it is locked or not

    public boolean getSalesorderStatus(String orderno, String companyId) throws ServiceException {
        boolean isLock = false;
        ArrayList params = new ArrayList();
        params.add(orderno);
        params.add(companyId);
        String query = "select lockquantityflag from salesorder where sonumber=? and company=?";
        List list = executeSQLQuery( query, params.toArray());
        Object lst = list.get(0);
        isLock = Boolean.parseBoolean(lst.toString());
        return isLock;
    }

// function to check whether batch is blocked in salesorder or not
    public boolean getSalesorderBatchStatus(String documentid, String companyId) throws ServiceException {
        boolean isbatchlockedinSO = false;
        int result=0;
        ArrayList params = new ArrayList();
        params.add(documentid);
        String query = "select id from locationbatchdocumentmapping where documentid=?";
        List list = executeSQLQuery( query, params.toArray());
         result = list.size();
         if(result>0){
             isbatchlockedinSO=true;
         }
        return isbatchlockedinSO;
    }
// function to check whether batch is blocked in salesorder or not
    public boolean getSalesorderSerialStatus(String documentid, String companyId) throws ServiceException {
        boolean isSeriallockedinSO = false;
        int result=0;
        ArrayList params = new ArrayList();
        params.add(documentid);
        String query = "select id from serialdocumentmapping where documentid=?";
        List list = executeSQLQuery( query, params.toArray());
         result = list.size();
         if(result>0){
             isSeriallockedinSO=true;
         }
        return isSeriallockedinSO;
    }
    public void getSalesorderSerialS(String documentid, String companyId,List<String> serList) throws ServiceException {
//        List<String> SrList = new ArrayList<>();
        int result = 0;
        ArrayList params = new ArrayList();
        params.add(documentid);
        String query = "select serialid from serialdocumentmapping where documentid=?";
        List list = executeSQLQuery(query, params.toArray());
        if (list != null && list.size() > 0) {
            Iterator itr = list.iterator();
            while (itr.hasNext()) {
                String srid = itr.next().toString();
                serList.add(srid);
            }
        }
//        return SrList;
    }


    public boolean getSalesorderLockStatus(String documentid,String batchid) throws ServiceException {
        boolean lockedinSO = false;
        int result=0;
        ArrayList params = new ArrayList();
        params.add(batchid);
        params.add(documentid);
        params.add(batchid);
        String query = " SELECT dod.id FROM dodetails dod "
                + " INNER JOIN ( SELECT sd.id as sodid , lcbm.documentid as documentid , lcbm.batchmapid FROM sodetails sd "
                + " INNER JOIN locationbatchdocumentmapping lcbm ON sd.id=lcbm.documentid WHERE lcbm.batchmapid = ? ) AS t ON dod.sodetails = t.sodid"
                + " INNER JOIN locationbatchdocumentmapping lcm ON lcm.documentid=t.sodid  WHERE dod.id= ? AND t.batchmapid=? ";
//                + " INNER JOIN sodetails sd ON dod.sodetails=sd.id "
//                + " INNER JOIN locationbatchdocumentmapping lcm ON lcm.documentid=sd.id  WHERE lcm.documentid= ? AND batchmapid=? ";
        List list = executeSQLQuery( query, params.toArray());
         result = list.size();
         if(result>0){
             lockedinSO=true;
         }
        return lockedinSO;
    }

//get the subproduct of assembly type of product
    public KwlReturnObject getAssemblySubProductList(String sodProductidid) throws ServiceException {
        List list = null;
        String mysqlQuery = "";
        int count = 0;
        ArrayList params = new ArrayList();
        if (!StringUtil.isNullOrEmpty(sodProductidid)) {
            params.add(sodProductidid);
            mysqlQuery = "select * from lockassemblyquantitymapping  where product=?";
        }

        list = executeSQLQuery( mysqlQuery, params.toArray());
        count = list.size();

        return new KwlReturnObject(true, "", null, list, count);
    }
    //function to check Do used in Sales retun or not

    public KwlReturnObject getDODetailsFromSR(String doid, String companyid) throws ServiceException { //function to check delivery order used in sales return
        List list = new ArrayList();
        String query = "from SalesReturnDetail sr  where sr.dodetails.deliveryOrder.ID=? and sr.salesReturn.deleted=false and sr.company.companyID=?";
        list = executeQuery( query, new Object[]{doid, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject getSalesReturnCount(String orderno, String companyid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from SalesReturn where salesReturnNumber=? and company.companyID=?";
        list = executeQuery( q, new Object[]{orderno, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getDOFromInvoice(String invoiceid, String companyid) throws ServiceException {
        String selQuery = "from DeliveryOrderDetail do  where do.cidetails.invoice.ID=? and do.deliveryOrder.deleted=false and do.company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getDOFromInvoiceNew(String invoiceid, String companyid) throws ServiceException {
        String selQuery = "select id from DeliveryOrderDetail do  where do.cidetails.invoice.ID=? and do.deliveryOrder.deleted=false and do.company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getSRFromInvoice(String invoiceid, String companyid) throws ServiceException {
        String selQuery = "from SalesReturnDetail sr  where sr.cidetails.invoice.ID=? and sr.salesReturn.deleted=false and sr.company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getInvoiceFromDeliveryPlanner(String invoiceid, String companyid) throws ServiceException {
        String selQuery = "from DeliveryPlanner dp  where dp.referenceNumber.ID=? and dp.company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getBadDebtInvoiceMappingForInvoice(HashMap<String, Object> requestParams) throws ServiceException {
        List list = null;
        try {
            String condition = "";
            ArrayList params = new ArrayList();
            String companyid = (String) requestParams.get("companyid");
            params.add(companyid);

            String start = "";
            String limit = "";

            if (requestParams.containsKey("invoiceid") && requestParams.get("invoiceid") != null) {
                condition += " and bdm.invoice.ID=? ";
                params.add((String) requestParams.get("invoiceid"));
            }

            if (requestParams.containsKey("badDebtType") && requestParams.get("badDebtType") != null) {
                condition += " and bdm.badDebtType=? ";
                params.add((Integer) requestParams.get("badDebtType"));
            }

            if (requestParams.containsKey("recoveredFromDate") && requestParams.get("recoveredFromDate") != null && requestParams.containsKey("recoveredToDate") && requestParams.get("recoveredToDate") != null) {
                condition += " and (bdm.badDebtRecoveredDate>=? and bdm.badDebtRecoveredDate<=?)";
                params.add((Date) requestParams.get("recoveredFromDate"));
                params.add((Date) requestParams.get("recoveredToDate"));
            }

            if (requestParams.containsKey("claimedFromDate") && requestParams.get("claimedFromDate") != null && requestParams.containsKey("claimedToDate") && requestParams.get("claimedToDate") != null) {
                condition += " and (bdm.badDebtClaimedDate>=? and bdm.badDebtClaimedDate<=?)";
                params.add((Date) requestParams.get("claimedFromDate"));
                params.add((Date) requestParams.get("claimedToDate"));
            }

            if (requestParams.containsKey(Constants.start) && requestParams.get(Constants.start) != null && requestParams.containsKey(Constants.limit) && requestParams.get(Constants.limit) != null) {
                start = (String) requestParams.get(Constants.start);
                limit = (String) requestParams.get(Constants.limit);
            }

            String ss = (requestParams.containsKey("ss") && requestParams.get("ss") != null) ? (String) requestParams.get("ss") : "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"bdm.invoice.invoiceNumber"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 1);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                condition += searchQuery;
            }
            
            String mySearchFilterString = "";
            if (requestParams.containsKey(Constants.Acc_Search_Json) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.Acc_Search_Json))) {
                mySearchFilterString = StringUtil.getMySearchFilterString(requestParams, params);
                if (mySearchFilterString.contains("c.accjecustomdata")) {
                    mySearchFilterString = mySearchFilterString.replaceAll("c.accjecustomdata", "bdm.invoice.journalEntry.accBillInvCustomData");
                }
            }

            String selQuery = "from BadDebtInvoiceMapping bdm where bdm.company.companyID=? " + condition + mySearchFilterString;
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeQueryPaging( selQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            } else {
                list = executeQuery( selQuery, params.toArray());
            }
        } catch (SQLException | NumberFormatException | ServiceException ex) {
            throw ServiceException.FAILURE("getBadDebtInvoiceMappingForInvoice : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject saveWorkOrder(HashMap<String, Object> dataMap) throws ServiceException {

        List list = new ArrayList();

        String woid = (String) dataMap.get("id");

        AssetMaintenanceWorkOrder assetMaintenanceWorkOrder = new AssetMaintenanceWorkOrder();

        if (StringUtil.isNullOrEmpty(woid)) {
//            if (dataMap.containsKey("createdby")) {
//                    User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
//                    assetMaintenanceWorkOrder.setCreatedby(createdby);
//                }
//            if (dataMap.containsKey("modifiedby")) {
//                User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
//                deliveryOrder.setModifiedby(modifiedby);
//            }
//            if (dataMap.containsKey("createdon")) {
//                deliveryOrder.setCreatedon((Long) dataMap.get("createdon"));
//            }
//            if (dataMap.containsKey("updatedon")) {
//                deliveryOrder.setUpdatedon((Long) dataMap.get("updatedon"));
//            }
        } else {
            assetMaintenanceWorkOrder = (AssetMaintenanceWorkOrder) get(AssetMaintenanceWorkOrder.class, woid);

//            if (dataMap.containsKey("modifiedby")) {
//                User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
//                deliveryOrder.setModifiedby(modifiedby);
//            }
//            if (dataMap.containsKey("updatedon")) {
//                deliveryOrder.setUpdatedon((Long) dataMap.get("updatedon"));
//            }
        }


        if (dataMap.containsKey("entrynumber")) {
            assetMaintenanceWorkOrder.setWorkOrderNumber((String) dataMap.get("entrynumber"));
        }

        if (dataMap.containsKey("workOrderDate")) {
            assetMaintenanceWorkOrder.setWorkOrderDate((Date) dataMap.get("workOrderDate"));
        }

        if (dataMap.containsKey("startDate")) {
            assetMaintenanceWorkOrder.setStartDate((Date) dataMap.get("startDate"));
        }

        if (dataMap.containsKey("endDate")) {
            assetMaintenanceWorkOrder.setEndDate((Date) dataMap.get("endDate"));
        }

        if (dataMap.containsKey("remark")) {
            assetMaintenanceWorkOrder.setRemark((String) dataMap.get("remark"));
        }

        if (dataMap.containsKey("assignedTo")) {
            MasterItem masterItem = dataMap.get("assignedTo") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("assignedTo"));
            assetMaintenanceWorkOrder.setAssignedTo(masterItem);
        }

        if (dataMap.containsKey("schedulerId")) {
            AssetMaintenanceScheduler scheduler = dataMap.get("schedulerId") == null ? null : (AssetMaintenanceScheduler) get(AssetMaintenanceScheduler.class, (String) dataMap.get("schedulerId"));
            assetMaintenanceWorkOrder.setAssetMaintenanceScheduler(scheduler);
        }

        if (dataMap.containsKey("companyid")) {
            Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
            assetMaintenanceWorkOrder.setCompany(company);
        }

        if (dataMap.containsKey("wodetails")) {
            if (dataMap.get("wodetails") != null) {
                assetMaintenanceWorkOrder.setMaintenanceWorkOrderDetails((Set<AssetMaintenanceWorkOrderDetail>) dataMap.get("wodetails"));
            }
        }

        if (dataMap.containsKey("currencyid") && dataMap.get("currencyid") != null) {
            assetMaintenanceWorkOrder.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) dataMap.get("currencyid")));
        }

        saveOrUpdate(assetMaintenanceWorkOrder);
        list.add(assetMaintenanceWorkOrder);

        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    @Override
    public KwlReturnObject saveDeliveryOrder(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String doid = (String) dataMap.get("id");

            DeliveryOrder deliveryOrder = new DeliveryOrder();
            if (StringUtil.isNullOrEmpty(doid)) {
                deliveryOrder.setDeleted(false);
                if (dataMap.containsKey("createdby")) {
                    User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
                    deliveryOrder.setCreatedby(createdby);
                }
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    deliveryOrder.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("createdon")) {
                    deliveryOrder.setCreatedon((Long) dataMap.get("createdon"));
                }
                if (dataMap.containsKey("updatedon")) {
                    deliveryOrder.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            } else {
                deliveryOrder = (DeliveryOrder) get(DeliveryOrder.class, doid);
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    deliveryOrder.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("updatedon")) {
                    deliveryOrder.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            }
            if (dataMap.containsKey(Constants.SEQFORMAT)) {
                deliveryOrder.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get(Constants.SEQFORMAT)));
            }
            if (dataMap.containsKey(Constants.SEQNUMBER)) {
                deliveryOrder.setSeqnumber(Integer.parseInt(dataMap.get(Constants.SEQNUMBER).toString()));
            }
            if (dataMap.containsKey(Constants.DATEPREFIX) && dataMap.get(Constants.DATEPREFIX) != null) {
                deliveryOrder.setDatePreffixValue((String) dataMap.get(Constants.DATEPREFIX));
            }
            if (dataMap.containsKey(Constants.DATEAFTERPREFIX) && dataMap.get(Constants.DATEAFTERPREFIX) != null) {
                deliveryOrder.setDateAfterPreffixValue((String) dataMap.get(Constants.DATEAFTERPREFIX));
            }
            if (dataMap.containsKey(Constants.DATESUFFIX) && dataMap.get(Constants.DATESUFFIX) != null) {
                deliveryOrder.setDateSuffixValue((String) dataMap.get(Constants.DATESUFFIX));
            }
            if (dataMap.containsKey("entrynumber")) {
                deliveryOrder.setDeliveryOrderNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("autogenerated")) {
                deliveryOrder.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }
            if (dataMap.containsKey("externalCurrencyRate")) {
                deliveryOrder.setExternalCurrencyRate((Double) dataMap.get("externalCurrencyRate"));
            }
            if (dataMap.containsKey("isautogenerateddo")) {
                deliveryOrder.setIsAutoGeneratedDO((Boolean) dataMap.get("isautogenerateddo"));
            }
            if (dataMap.containsKey("memo")) {
                deliveryOrder.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("ordernoreferedformemoaddress")) {
                deliveryOrder.setOrderNoReferedForMemoAddress((String) dataMap.get("ordernoreferedformemoaddress"));
            }
            if (dataMap.containsKey("posttext")) {
                deliveryOrder.setPostText((String) dataMap.get("posttext"));
            }
            if (dataMap.containsKey("customerid")) {
                Customer customer = dataMap.get("customerid") == null ? null : (Customer) get(Customer.class, (String) dataMap.get("customerid"));
                deliveryOrder.setCustomer(customer);
            }
            if (dataMap.containsKey("orderdate")) {
                deliveryOrder.setOrderDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("shipdate")) {
                deliveryOrder.setShipdate((Date) dataMap.get("shipdate"));
            }
            if (dataMap.containsKey("shipvia")) {
                deliveryOrder.setShipvia((String) dataMap.get("shipvia"));
            }
            if (dataMap.containsKey("fob")) {
                deliveryOrder.setFob((String) dataMap.get("fob"));
            }
            if (dataMap.containsKey("status")) {
                MasterItem masterItem = dataMap.get("status") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("status"));
                deliveryOrder.setStatus(masterItem);
            }
            if (dataMap.containsKey("costCenterId")) {
                CostCenter costCenter = dataMap.get("costCenterId") == null ? null : (CostCenter) get(CostCenter.class, (String) dataMap.get("costCenterId"));
                deliveryOrder.setCostcenter(costCenter);
            } else {
                deliveryOrder.setCostcenter(null);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                deliveryOrder.setCompany(company);
            }
            if (dataMap.containsKey("dodetails")) {
                if (dataMap.get("dodetails") != null) {
                    deliveryOrder.setRows((Set<DeliveryOrderDetail>) dataMap.get("dodetails"));
                }
            }
            if (dataMap.containsKey("currencyid") && dataMap.get("currencyid") != null) {
                deliveryOrder.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) dataMap.get("currencyid")));
            }
            if (dataMap.containsKey(Constants.IsRoundingAdjustmentApplied) && dataMap.get(Constants.IsRoundingAdjustmentApplied) != null) {
                boolean isRoundingAdjustmentApplied = Boolean.parseBoolean(dataMap.get(Constants.IsRoundingAdjustmentApplied).toString());
                deliveryOrder.setIsRoundingAdjustmentApplied(isRoundingAdjustmentApplied);
            }
            
            if (dataMap.containsKey(Constants.roundingadjustmentamountinbase) && dataMap.get(Constants.roundingadjustmentamountinbase) != null) {
                deliveryOrder.setRoundingadjustmentamountinbase(Double.valueOf(dataMap.get(Constants.roundingadjustmentamountinbase).toString()));
            }

            if (dataMap.containsKey(Constants.roundingadjustmentamount) && dataMap.get(Constants.roundingadjustmentamount) != null) { // quotation amount
                deliveryOrder.setRoundingadjustmentamount(Double.valueOf(dataMap.get(Constants.roundingadjustmentamount).toString()));
            }
            if (dataMap.containsKey(Constants.IsRoundingAdjustmentApplied) && dataMap.get(Constants.IsRoundingAdjustmentApplied) != null) {  // If New GST Appliled
                deliveryOrder.setIsRoundingAdjustmentApplied((Boolean) dataMap.get(Constants.IsRoundingAdjustmentApplied));
            }

            if (dataMap.containsKey("isFixedAsset")) {
                deliveryOrder.setFixedAssetDO((Boolean) dataMap.get("isFixedAsset"));
            }

            if (dataMap.containsKey("isLeaseFixedAsset")) {
                deliveryOrder.setLeaseDO((Boolean) dataMap.get("isLeaseFixedAsset"));
            }
            if (dataMap.containsKey("isConsignment")) {
                deliveryOrder.setIsconsignment((Boolean) dataMap.get("isConsignment"));
            }
            if (dataMap.containsKey("isJobWorkOutReciever")) {
                deliveryOrder.setIsJobWorkOut((Boolean) dataMap.get("isJobWorkOutReciever"));
            }
            
            if (dataMap.containsKey("isAppliedForTax") && dataMap.get("isAppliedForTax") != null) {
                deliveryOrder.setAppliedForTax((Boolean) dataMap.get("isAppliedForTax"));
            }
            
            if (dataMap.containsKey("appliedDate") && dataMap.get("appliedDate") != null) {
                deliveryOrder.setAppliedDate((Date) dataMap.get("appliedDate"));
            }
            if (dataMap.containsKey("salesPerson")) {
                MasterItem mi = (dataMap.get("salesPerson") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("salesPerson")));
                deliveryOrder.setSalesperson(mi);
            }

            if (dataMap.containsKey("custWarehouse") && dataMap.get("custWarehouse") != null) {
                InventoryWarehouse warehouse = new InventoryWarehouse();
                warehouse = (InventoryWarehouse) get(InventoryWarehouse.class, (String) dataMap.get("custWarehouse"));
                if (warehouse != null) {
                    deliveryOrder.setCustWarehouse(warehouse);
                }
            }
            if (dataMap.containsKey("movementtype") && dataMap.get("movementtype") != null) {
                MasterItem movementType = null;
                movementType = (MasterItem) get(MasterItem.class, (String) dataMap.get("movementtype"));
                if (movementType != null) {
                    deliveryOrder.setMovementType(movementType);
                }
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid"));
                deliveryOrder.setTax(tax);
            }
            if (dataMap.containsKey("contractMappings")) {
                Set<DOContractMapping> contractMappings = (Set<DOContractMapping>) dataMap.get("contractMappings");
                deliveryOrder.setdOContractMappings(contractMappings);
            }
            if (dataMap.containsKey("approvestatuslevel") && dataMap.get("approvestatuslevel") !=null) {
                deliveryOrder.setApprovestatuslevel((Integer) dataMap.get("approvestatuslevel"));
            }

            if (dataMap.containsKey("isfavourite")) {
                if (dataMap.get("isfavourite") != null) {
                    deliveryOrder.setFavourite(Boolean.parseBoolean(dataMap.get("isfavourite").toString()));
                }
            }
            if (dataMap.containsKey("customerporefno")) {
                if (dataMap.get("customerporefno") != null) {
                    deliveryOrder.setCustomerPORefNo(dataMap.get("customerporefno").toString());
                }
            } 
            if (dataMap.containsKey(Constants.MARKED_PRINTED)) {
                if (dataMap.get(Constants.MARKED_PRINTED) != null) {
                    deliveryOrder.setPrinted(Boolean.parseBoolean(dataMap.get(Constants.MARKED_PRINTED).toString()));
                }
            }
            if (dataMap.containsKey("billshipAddressid") && !StringUtil.isNullOrEmpty((String)dataMap.get("billshipAddressid"))) {
                deliveryOrder.setBillingShippingAddresses((BillingShippingAddresses) get(BillingShippingAddresses.class, (String) dataMap.get("billshipAddressid")));               
            }
            if (dataMap.containsKey("driver") && dataMap.get("driver") != null) {
                deliveryOrder.setDriver((MasterItem) get(MasterItem.class, (String) dataMap.get("driver")));
            }
            if (dataMap.containsKey("isFromPOS") && dataMap.get("isFromPOS") != null) {
                deliveryOrder.setPOSDO((Boolean)dataMap.get("isFromPOS"));
            }
            if (dataMap.containsKey("termid") && dataMap.get("termid")!=null && dataMap.get("termid").toString()!="") {
                deliveryOrder.setTerm((Term) get(Term.class, (String) dataMap.get("termid")));
            }
            if (dataMap.containsKey("formtype") && dataMap.get("formtype") !=null) {
                deliveryOrder.setFormtype((String) dataMap.get("formtype"));
            }
            if (dataMap.containsKey("gstIncluded") && dataMap.get("gstIncluded") !=null) {
                deliveryOrder.setGstIncluded((Boolean) dataMap.get("gstIncluded"));
            }
            if (dataMap.containsKey("isFreeGift")) {
                deliveryOrder.setIsFreeGift((Boolean) dataMap.get("isFreeGift"));
            }
            if (dataMap.containsKey(Constants.isApplyTaxToTerms) && dataMap.get(Constants.isApplyTaxToTerms) != null) {  // If Save As Draft
                deliveryOrder.setApplyTaxToTerms((Boolean) dataMap.get(Constants.isApplyTaxToTerms));
            }
            if (dataMap.containsKey("gstapplicable") && dataMap.get("gstapplicable") != null) {  // If New GST Appliled
                deliveryOrder.setIsIndGSTApplied((Boolean) dataMap.get("gstapplicable"));
            }
            if (dataMap.containsKey(Constants.RCMApplicable) && dataMap.get(Constants.RCMApplicable) != null) {  // If New GST Appliled
                deliveryOrder.setRcmapplicable((Boolean) dataMap.get(Constants.RCMApplicable));
            }
            if (dataMap.containsKey(Constants.EWAYApplicable) && dataMap.get(Constants.EWAYApplicable) != null) {  // If New GST Appliled
                deliveryOrder.setEwayapplicable((Boolean) dataMap.get(Constants.EWAYApplicable));
            }
            if (dataMap.containsKey(Constants.isMerchantExporter) && dataMap.get(Constants.isMerchantExporter) != null) {  // If New GST Appliled
                deliveryOrder.setIsMerchantExporter((Boolean) dataMap.get(Constants.isMerchantExporter));
            }
            deliveryOrder.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));
            if (dataMap.containsKey(Constants.generatedSource) && dataMap.get(Constants.generatedSource) != null) {
                deliveryOrder.setGeneratedSource((Integer) dataMap.get(Constants.generatedSource));
            }
            saveOrUpdate(deliveryOrder);
            list.add(deliveryOrder);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveDeliveryOrder : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject updateDeliveryOrder(DeliveryOrder deliveryOrder) throws ServiceException {
        List list = new ArrayList();
        try {
            saveOrUpdate(deliveryOrder);
            list.add(deliveryOrder);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveDeliveryOrder : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject updateDeliveryOrderSetNull(DeliveryOrder deliveryOrder) throws ServiceException {


        List list = new ArrayList();
        try {
            String doId = deliveryOrder.getID();
            String companyId = deliveryOrder.getCompany().getCompanyID();
            String query = "update deliveryorder set journalentry=NULL where id = ? and company = ?";
//            list = executeQuery( query, new Object[]{invoiceID});
            executeSQLUpdate( query, new Object[]{doId, companyId});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.deleteInvoiceTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());

    }

    @Override
    public KwlReturnObject saveSalesReturn(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        String companyid = "";
        try {
            String srid = (String) dataMap.get("id");
            if (dataMap.containsKey("companyid")) {
                companyid = (String) dataMap.get("companyid");
            }
            SalesReturn salesReturn = new SalesReturn();

            if (StringUtil.isNullOrEmpty(srid)) {
                salesReturn.setDeleted(false);
                 if (dataMap.containsKey("createdby")) {
                    User createdby = dataMap.get("createdby") == null ? null : (User) get(User.class, (String) dataMap.get("createdby"));
                    salesReturn.setCreatedby(createdby);
                }
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    salesReturn.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("createdon")) {
                    salesReturn.setCreatedon((Long) dataMap.get("createdon"));
                }
                if (dataMap.containsKey("updatedon")) {
                    salesReturn.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            } else {
                salesReturn = (SalesReturn) get(SalesReturn.class, srid);
                if (dataMap.containsKey("modifiedby")) {
                    User modifiedby = dataMap.get("modifiedby") == null ? null : (User) get(User.class, (String) dataMap.get("modifiedby"));
                    salesReturn.setModifiedby(modifiedby);
                }
                if (dataMap.containsKey("updatedon")) {
                    salesReturn.setUpdatedon((Long) dataMap.get("updatedon"));
                }
            }
            if (dataMap.containsKey(Constants.generatedSource) && dataMap.get(Constants.generatedSource) != null) {
                salesReturn.setGeneratedSource((Integer) dataMap.get(Constants.generatedSource));
            }

            if (dataMap.containsKey("gstIncluded") && dataMap.get("gstIncluded") !=null) {
                salesReturn.setGstIncluded((Boolean) dataMap.get("gstIncluded"));
            }
            
            if (dataMap.containsKey(Constants.isApplyTaxToTerms) && dataMap.get(Constants.isApplyTaxToTerms) != null) {
                salesReturn.setApplyTaxToTerms((Boolean) dataMap.get(Constants.isApplyTaxToTerms));
            }
            
            if (dataMap.containsKey(Constants.SEQFORMAT)) {
                salesReturn.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get(Constants.SEQFORMAT)));
            }
            if (dataMap.containsKey(Constants.SEQNUMBER)) {
                salesReturn.setSeqnumber(Integer.parseInt(dataMap.get(Constants.SEQNUMBER).toString()));
            }
            if (dataMap.containsKey(Constants.DATEPREFIX) && dataMap.get(Constants.DATEPREFIX) != null) {
                salesReturn.setDatePreffixValue((String) dataMap.get(Constants.DATEPREFIX));
            }
            if (dataMap.containsKey(Constants.DATEAFTERPREFIX) && dataMap.get(Constants.DATEAFTERPREFIX) != null) {
                salesReturn.setDateAfterPreffixValue((String) dataMap.get(Constants.DATEAFTERPREFIX));
            }
            if (dataMap.containsKey(Constants.DATESUFFIX) && dataMap.get(Constants.DATESUFFIX) != null) {
                salesReturn.setDateSuffixValue((String) dataMap.get(Constants.DATESUFFIX));
            }
            if (dataMap.containsKey("entrynumber")) {
                salesReturn.setSalesReturnNumber((String) dataMap.get("entrynumber"));
            }
            if (dataMap.containsKey("autogenerated")) {
                salesReturn.setAutoGenerated((Boolean) dataMap.get("autogenerated"));
            }         
            if (dataMap.containsKey("memo")) {
                salesReturn.setMemo((String) dataMap.get("memo"));
            }
            if (dataMap.containsKey("externalCurrencyRate")) {
                salesReturn.setExternalCurrencyRate((Double) dataMap.get("externalCurrencyRate"));
            }
            if (dataMap.containsKey("posttext")) {
                salesReturn.setPostText((String) dataMap.get("posttext"));
            }
            if (dataMap.containsKey("customerid")) {
                Customer customer = dataMap.get("customerid") == null ? null : (Customer) get(Customer.class, (String) dataMap.get("customerid"));
                salesReturn.setCustomer(customer);
            }
            if (dataMap.containsKey("orderdate")) {
                salesReturn.setOrderDate((Date) dataMap.get("orderdate"));
            }
            if (dataMap.containsKey("shipdate")) {
                salesReturn.setShipdate((Date) dataMap.get("shipdate"));
            }
            if (dataMap.containsKey("shipvia")) {
                salesReturn.setShipvia((String) dataMap.get("shipvia"));
            }
            if (dataMap.containsKey("fob")) {
                salesReturn.setFob((String) dataMap.get("fob"));
            }
            if (dataMap.containsKey("formtype")) {
                salesReturn.setFormtype((String) dataMap.get("formtype"));
            }
            
            if (dataMap.containsKey(Constants.MVATTRANSACTIONNO) && dataMap.get(Constants.MVATTRANSACTIONNO)!=null) {
                salesReturn.setMvatTransactionNo((String) dataMap.get(Constants.MVATTRANSACTIONNO));
            }

            if (dataMap.containsKey("costCenterId")) {
                CostCenter costCenter = dataMap.get("costCenterId") == null ? null : (CostCenter) get(CostCenter.class, (String) dataMap.get("costCenterId"));
                salesReturn.setCostcenter(costCenter);
            } else {
                salesReturn.setCostcenter(null);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                salesReturn.setCompany(company);
            }
            if (dataMap.containsKey("srdetails")) {
                if (dataMap.get("srdetails") != null) {
                    salesReturn.setRows((Set<SalesReturnDetail>) dataMap.get("srdetails"));
                }
            }
            if (dataMap.containsKey("currencyid") && dataMap.get("currencyid") != null) {
                salesReturn.setCurrency((KWLCurrency) get(KWLCurrency.class, (String) dataMap.get("currencyid")));
            }
            

            if (dataMap.containsKey("isfavourite")) {
                if (dataMap.get("isfavourite") != null) {
                    salesReturn.setFavourite(Boolean.parseBoolean(dataMap.get("isfavourite").toString()));
                }
            }

            if (dataMap.containsKey("isLeaseFixedAsset") && dataMap.get("isLeaseFixedAsset") != null) {
                salesReturn.setLeaseSalesReturn((Boolean) dataMap.get("isLeaseFixedAsset"));
            }
            if (dataMap.containsKey("isConsignment") && dataMap.get("isConsignment") != null) {
                salesReturn.setIsconsignment((Boolean) dataMap.get("isConsignment"));
            }
           
            if (dataMap.containsKey("isNoteAlso") && dataMap.get("isNoteAlso") != null) {
                salesReturn.setIsNoteAlso ((Boolean) dataMap.get("isNoteAlso"));
            }
            if (dataMap.containsKey("isPayment") && dataMap.get("isPayment") != null) {
                salesReturn.setIsPayment((Boolean) dataMap.get("isPayment"));
            }

            if (dataMap.containsKey("isAssignSRNumberntocn") && dataMap.get("isAssignSRNumberntocn") != null) {
                salesReturn.setIsAssignSRNumberntocn((Boolean)dataMap.get("isAssignSRNumberntocn"));
            }
             if (dataMap.containsKey("custWarehouse") && dataMap.get("custWarehouse") != null) {
                InventoryWarehouse warehouse = new InventoryWarehouse();
                warehouse = (InventoryWarehouse) get(InventoryWarehouse.class, (String) dataMap.get("custWarehouse"));
                if (warehouse != null) {
                    salesReturn.setCustWarehouse(warehouse);
                }
            }
            if (dataMap.containsKey("salesPerson") && dataMap.get("salesPerson") != null) {
                MasterItem salesPerson = null;
                salesPerson = (MasterItem) get(MasterItem.class, (String) dataMap.get("salesPerson"));
                if (salesPerson != null) {
                    salesReturn.setSalesperson(salesPerson);
                }
            }
            if (dataMap.containsKey("movementtype") && dataMap.get("movementtype") != null) {
                MasterItem movementType = null;
                movementType = (MasterItem) get(MasterItem.class, (String) dataMap.get("movementtype"));
                if (movementType != null) {
                    salesReturn.setMovementType(movementType);
                }
            }

            if (dataMap.containsKey("contractid") && dataMap.get("contractid") != null) {
                Contract contract = (Contract) get(Contract.class, (String) dataMap.get("contractid"));
                salesReturn.setContract(contract);
            }
            if (dataMap.containsKey("taxid")) {
                Tax tax = dataMap.get("taxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("taxid"));
                salesReturn.setTax(tax);
            }
            if (dataMap.containsKey("isFixedAsset") && dataMap.get("isFixedAsset") != null) {
                salesReturn.setFixedAsset((Boolean) dataMap.get("isFixedAsset"));
            }
            if (dataMap.containsKey("totalamountinbase") && dataMap.get("totalamountinbase") != null) {
                salesReturn.setTotalamountinbase(authHandler.round(Double.valueOf(dataMap.get("totalamountinbase").toString()), companyid));
            }

            if (dataMap.containsKey("totalamount") && dataMap.get("totalamount") != null) { 
                salesReturn.setTotalamount(authHandler.round(Double.valueOf(dataMap.get("totalamount").toString()), companyid));
            }

            if (dataMap.containsKey("discountinbase") && dataMap.get("discountinbase") != null) { // Discount in Base
                salesReturn.setDiscountinbase(authHandler.round(Double.valueOf(dataMap.get("discountinbase").toString()), companyid));
            }

            if (dataMap.containsKey("totallineleveldiscount") && dataMap.get("totallineleveldiscount") != null) { // Discount
                salesReturn.setTotallineleveldiscount(authHandler.round(Double.valueOf(dataMap.get("totallineleveldiscount").toString()), companyid));
            }
            if (dataMap.containsKey("gstapplicable") && dataMap.get("gstapplicable") != null) {  // If New GST Appliled
                salesReturn.setIsIndGSTApplied((Boolean) dataMap.get("gstapplicable"));
            }
            if (dataMap.containsKey(Constants.RCMApplicable) && dataMap.get(Constants.RCMApplicable) != null) {  // If New GST Appliled
                salesReturn.setRcmapplicable((Boolean) dataMap.get(Constants.RCMApplicable));
            }
            if (dataMap.containsKey(Constants.EWAYApplicable) && dataMap.get(Constants.EWAYApplicable) != null) {  // If New GST Appliled
                salesReturn.setEwayapplicable((Boolean) dataMap.get(Constants.EWAYApplicable));
            }
            if (dataMap.containsKey("isTaxCommittedOnAvalara") && dataMap.get("isTaxCommittedOnAvalara") != null) {
                salesReturn.setIsTaxCommittedOnAvalara((Boolean) dataMap.get("isTaxCommittedOnAvalara"));
            }
            salesReturn.setTemplateid((Projreport_Template) get(Projreport_Template.class, Constants.HEADER_IMAGE_TEMPLATE_ID));

            saveOrUpdate(salesReturn);
            list.add(salesReturn);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveDeliveryOrder : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    @Override
    public KwlReturnObject saveWorkOrderDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();

        String wodid = (String) dataMap.get("id");

        AssetMaintenanceWorkOrderDetail workOrderDetail = new AssetMaintenanceWorkOrderDetail();

        if (!StringUtil.isNullOrEmpty(wodid)) {
            workOrderDetail = (AssetMaintenanceWorkOrderDetail) get(AssetMaintenanceWorkOrderDetail.class, wodid);
        }

        if (dataMap.containsKey("woid")) {
            AssetMaintenanceWorkOrder workOrder = dataMap.get("woid") == null ? null : (AssetMaintenanceWorkOrder) get(AssetMaintenanceWorkOrder.class, (String) dataMap.get("woid"));
            workOrderDetail.setAssetMaintenanceWorkOrder(workOrder);
        }

        if (dataMap.containsKey("srno")) {
            workOrderDetail.setSrno((Integer) dataMap.get("srno"));
        }
//        
//        if (dataMap.containsKey("quantity")) {
//            workOrderDetail.setActualQuantity((Double) dataMap.get("quantity"));
//        }

        if (dataMap.containsKey("deliveredquantity")) {
            workOrderDetail.setDeliveredQuantity((Double) dataMap.get("deliveredquantity"));
        }

        if (dataMap.containsKey("uomid")) {
            workOrderDetail.setUom((UnitOfMeasure) get(UnitOfMeasure.class, dataMap.get("uomid").toString()));
        }

        if (dataMap.containsKey("baseuomrate") && dataMap.get("baseuomrate") != null && dataMap.get("baseuomrate") != "") {
            workOrderDetail.setBaseuomrate((Double) dataMap.get("baseuomrate"));
        }

        if (dataMap.containsKey("baseuomquantity") && dataMap.get("baseuomquantity") != null && dataMap.get("baseuomquantity") != "") {
            workOrderDetail.setBaseuomquantity((Double) dataMap.get("baseuomquantity"));
        }

        if (dataMap.containsKey("batch")) {
            ProductBatch productBatch = dataMap.get("batch") == null ? null : (ProductBatch) get(ProductBatch.class, (String) dataMap.get("batch"));
            if (productBatch != null) {
                workOrderDetail.setBatch(productBatch);
            }
        }

        if (dataMap.containsKey("baseuomdeliveredquantity") && dataMap.get("baseuomdeliveredquantity") != null && dataMap.get("baseuomdeliveredquantity") != "") {
            workOrderDetail.setBaseuomdeliveredquantity((Double) dataMap.get("baseuomdeliveredquantity"));
        }

        if (dataMap.containsKey("remark")) {
           // try {
                workOrderDetail.setRemark(StringUtil.DecodeText(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark")));
            /*} catch (UnsupportedEncodingException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }*/
        }

        if (dataMap.containsKey("description")) {
            workOrderDetail.setDescription(StringUtil.DecodeText((String) dataMap.get("description")));
        }

        if (dataMap.containsKey("productid")) {
            Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
            workOrderDetail.setProduct(product);
        }

        if (dataMap.containsKey("companyid")) {
            Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
            workOrderDetail.setCompany(company);
        }

        if (dataMap.containsKey("Inventory")) {
            workOrderDetail.setInventory((Inventory) dataMap.get("Inventory"));
        }

        if (dataMap.containsKey("rate") && !StringUtil.isNullOrEmpty((String) dataMap.get("rate"))) {
            workOrderDetail.setRate(Double.parseDouble((String) dataMap.get("rate")));
        }

        saveOrUpdate(workOrderDetail);
        list.add(workOrderDetail);

        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject saveDeliveryOrderDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String dodid = (String) dataMap.get("id");

            DeliveryOrderDetail deliveryOrderDetail = new DeliveryOrderDetail();
            if (!StringUtil.isNullOrEmpty(dodid)) {
                deliveryOrderDetail = (DeliveryOrderDetail) get(DeliveryOrderDetail.class, dodid);
            }

            if (dataMap.containsKey("doid")) {
                DeliveryOrder deliveryOrder = dataMap.get("doid") == null ? null : (DeliveryOrder) get(DeliveryOrder.class, (String) dataMap.get("doid"));
                deliveryOrderDetail.setDeliveryOrder(deliveryOrder);
            }
            if (dataMap.containsKey("srno")) {
                deliveryOrderDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("quantity")) {
                deliveryOrderDetail.setActualQuantity(authHandler.roundQuantity((Double) dataMap.get("quantity"),(String) dataMap.get("companyid") ));
            }
            if (dataMap.containsKey("deliveredquantity")) {
                deliveryOrderDetail.setDeliveredQuantity(authHandler.roundQuantity((Double) dataMap.get("deliveredquantity"),(String) dataMap.get("companyid") ));
            }
            if (dataMap.containsKey("uomid")) {
                deliveryOrderDetail.setUom((UnitOfMeasure) get(UnitOfMeasure.class, dataMap.get("uomid").toString()));
            }
            if (dataMap.containsKey("baseuomrate") && dataMap.get("baseuomrate") != null && dataMap.get("baseuomrate") != "") {
                deliveryOrderDetail.setBaseuomrate((Double) dataMap.get("baseuomrate"));
//            } else {
//                deliveryOrderDetail.setBaseuomrate(1);
            }
            if (dataMap.containsKey("baseuomquantity") && dataMap.get("baseuomquantity") != null && dataMap.get("baseuomquantity") != "") {
                deliveryOrderDetail.setBaseuomquantity(authHandler.roundQuantity((Double) dataMap.get("baseuomquantity"),(String) dataMap.get("companyid") ));
//            } else {
//                if (dataMap.containsKey("quantity")) {
//                    deliveryOrderDetail.setBaseuomquantity((Double) dataMap.get("quantity"));
//                }
            }
            if (dataMap.containsKey("batch")) {
                ProductBatch productBatch = dataMap.get("batch") == null ? null : (ProductBatch) get(ProductBatch.class, (String) dataMap.get("batch"));
                if (productBatch != null) {
                    deliveryOrderDetail.setBatch(productBatch);
                }
            }
            if (dataMap.containsKey("baseuomdeliveredquantity") && dataMap.get("baseuomdeliveredquantity") != null && dataMap.get("baseuomdeliveredquantity") != "") {
                deliveryOrderDetail.setBaseuomdeliveredquantity(authHandler.roundQuantity((Double) dataMap.get("baseuomdeliveredquantity"),(String) dataMap.get("companyid") ));
//            } else {
//                if (dataMap.containsKey("deliveredquantity")) {
//                    deliveryOrderDetail.setBaseuomquantity((Double) dataMap.get("deliveredquantity"));
//                }
            }
            if (dataMap.containsKey("remark")) {
                deliveryOrderDetail.setRemark(StringUtil.DecodeText(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark")));
            }
            if (dataMap.containsKey("description")) {
                deliveryOrderDetail.setDescription(StringUtil.DecodeText((String) dataMap.get("description")));
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                deliveryOrderDetail.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                deliveryOrderDetail.setCompany(company);
            }
            if (dataMap.containsKey("SalesOrderDetail")) {
                deliveryOrderDetail.setSodetails((SalesOrderDetail) dataMap.get("SalesOrderDetail"));
            }
            if (dataMap.containsKey("InvoiceDetail")) {
                deliveryOrderDetail.setCidetails((InvoiceDetail) dataMap.get("InvoiceDetail"));
            }
            if (dataMap.containsKey("sourcegrorderdetailid") && dataMap.get("sourcegrorderdetailid") != null) {
                deliveryOrderDetail.setSourcegoodsReceiptOrderDetailsid((String) dataMap.get("sourcegrorderdetailid"));
            }
            if (dataMap.containsKey("Inventory")) {
                deliveryOrderDetail.setInventory((Inventory) dataMap.get("Inventory"));
            }
            if (dataMap.containsKey("partno")) {
                deliveryOrderDetail.setPartno(StringUtil.DecodeText((String) dataMap.get("partno")));
            } else {
                deliveryOrderDetail.setPartno("");
            }
            if (dataMap.containsKey("invstoreid")) {
                deliveryOrderDetail.setInvstoreid((String) dataMap.get("invstoreid"));
            } else {
                deliveryOrderDetail.setInvstoreid("");
            }
            if (dataMap.containsKey("prtaxid") && dataMap.get("prtaxid") != null) {
                Tax tax = dataMap.get("prtaxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("prtaxid"));
                deliveryOrderDetail.setTax(tax);
            }
            if (dataMap.containsKey("taxamount") && dataMap.get("taxamount") != null) {
                deliveryOrderDetail.setRowTaxAmount((Double) dataMap.get("taxamount"));
            }
            if (dataMap.containsKey("bomid") && dataMap.get("bomid") != null) {
                BOMDetail bomObj = (BOMDetail) get(BOMDetail.class, (String) dataMap.get("bomid"));
                deliveryOrderDetail.setBomcode(bomObj);
            }
            if (dataMap.containsKey("discount")) {
                deliveryOrderDetail.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("discountispercent")) {
                deliveryOrderDetail.setDiscountispercent((Integer) dataMap.get("discountispercent"));
            }
            if (dataMap.containsKey("invlocationid")) {
                deliveryOrderDetail.setInvlocid((String) dataMap.get("invlocationid"));
            } else {
                deliveryOrderDetail.setInvlocid("");
            }
            if (dataMap.containsKey("rate") && !StringUtil.isNullOrEmpty((String) dataMap.get("rate"))) {
                deliveryOrderDetail.setRate(Double.parseDouble((String) dataMap.get("rate")));
            }
            if (dataMap.containsKey("rateIncludingGst") && !StringUtil.isNullOrEmpty((String) dataMap.get("rateIncludingGst"))) {
                deliveryOrderDetail.setRateincludegst(Double.parseDouble((String) dataMap.get("rateIncludingGst")));
            }
            if (dataMap.containsKey("isFromVendorConsign") && dataMap.get("isFromVendorConsign") != null) {
                deliveryOrderDetail.setIsFromVendorConsign((Boolean) dataMap.get("isFromVendorConsign"));
            }
            if (dataMap.containsKey("priceSource") && dataMap.get("priceSource") != null) {
                deliveryOrderDetail.setPriceSource((String) dataMap.get("priceSource"));
            }
            if (dataMap.containsKey("pricingbandmasterid") && dataMap.get("pricingbandmasterid") != null) {
                deliveryOrderDetail.setPricingBandMasterid((String) dataMap.get("pricingbandmasterid"));
            }
            if (dataMap.containsKey("recTermAmount") && !StringUtil.isNullOrEmpty(dataMap.get("recTermAmount").toString())) {
                double recTermAmount = Double.parseDouble(dataMap.get("recTermAmount").toString());
                deliveryOrderDetail.setRowTermAmount(recTermAmount);
            }
            if (dataMap.containsKey("OtherTermNonTaxableAmount") && !StringUtil.isNullOrEmpty(dataMap.get("OtherTermNonTaxableAmount").toString())) {
                double OtherTermNonTaxableAmount = Double.parseDouble(dataMap.get("OtherTermNonTaxableAmount").toString());
                deliveryOrderDetail.setOtherTermNonTaxableAmount(OtherTermNonTaxableAmount);
            }
            if (dataMap.containsKey("cogsjedetailid") && dataMap.get("cogsjedetailid") != null) {
                deliveryOrderDetail.setCostOfGoodsSoldJEdetail((JournalEntryDetail) get(JournalEntryDetail.class, dataMap.get("cogsjedetailid").toString()));
            }
            if (dataMap.containsKey("inventoryjedetailid") && dataMap.get("inventoryjedetailid") != null) {
                deliveryOrderDetail.setInventoryJEdetail((JournalEntryDetail) get(JournalEntryDetail.class, dataMap.get("inventoryjedetailid").toString()));
            }
            if (dataMap.containsKey("productbuild") && dataMap.get("productbuild") != null) {
                deliveryOrderDetail.setProductbuild((ProductBuild) dataMap.get("productbuild"));
            }
            if (dataMap.containsKey("discountjson") && dataMap.get("discountjson") != null) {
                deliveryOrderDetail.setDiscountJson((String) dataMap.get("discountjson"));
            }
            if (dataMap.containsKey(Constants.isUserModifiedTaxAmount) && dataMap.get(Constants.isUserModifiedTaxAmount) != null) {
                deliveryOrderDetail.setIsUserModifiedTaxAmount((boolean) dataMap.get(Constants.isUserModifiedTaxAmount));
            }
            saveOrUpdate(deliveryOrderDetail);
            list.add(deliveryOrderDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveDeliveryOrderDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject saveSalesReturnDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String srdid = (String) dataMap.get("id");

            SalesReturnDetail salesReturnDetail = new SalesReturnDetail();
            if (!StringUtil.isNullOrEmpty(srdid)) {
                salesReturnDetail = (SalesReturnDetail) get(SalesReturnDetail.class, srdid);
            }

            if (dataMap.containsKey("srid")) {
                SalesReturn salesReturn = dataMap.get("srid") == null ? null : (SalesReturn) get(SalesReturn.class, (String) dataMap.get("srid"));
                salesReturnDetail.setSalesReturn(salesReturn);
            }
            if (dataMap.containsKey("srno")) {
                salesReturnDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("quantity")) {
                salesReturnDetail.setActualQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("returnquantity")) {
                salesReturnDetail.setReturnQuantity((Double) dataMap.get("returnquantity"));
            }
            if (dataMap.containsKey("previousissuecount")) {
                salesReturnDetail.setPreviousIssueCount(Double.parseDouble(dataMap.get("previousissuecount").toString()));
            }
            if (dataMap.containsKey("uomid")) {
                salesReturnDetail.setUom((UnitOfMeasure) get(UnitOfMeasure.class, dataMap.get("uomid").toString()));
            }
            if (dataMap.containsKey("baseuomrate") && dataMap.get("baseuomrate") != null && dataMap.get("baseuomrate") != "") {
                salesReturnDetail.setBaseuomrate((Double) dataMap.get("baseuomrate"));
//            } else {
//                groDetail.setBaseuomrate(1);
            }
            if (dataMap.containsKey("baseuomquantity") && dataMap.get("baseuomquantity") != null && dataMap.get("baseuomquantity") != "") {
                salesReturnDetail.setBaseuomquantity((Double) dataMap.get("baseuomquantity"));
//            } else {
//                if (dataMap.containsKey("quantity")) {
//                    groDetail.setBaseuomquantity((Double) dataMap.get("quantity"));
//                }
            }
            if (dataMap.containsKey("baseuomreturnquantity") && dataMap.get("baseuomreturnquantity") != null && dataMap.get("baseuomreturnquantity") != "") {
                salesReturnDetail.setBaseuomquantity((Double) dataMap.get("baseuomreturnquantity"));
//            } else {
//                if (dataMap.containsKey("deliveredquantity")) {
//                    groDetail.setBaseuomquantity((Double) dataMap.get("deliveredquantity"));
//                }
            }
            if (dataMap.containsKey("remark")) {
                salesReturnDetail.setRemark(StringUtil.DecodeText(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark")));
            }
            if (dataMap.containsKey("description")) {
                salesReturnDetail.setDescription(StringUtil.DecodeText((String) dataMap.get("description")));
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                salesReturnDetail.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                salesReturnDetail.setCompany(company);
            }
            if (dataMap.containsKey("DeliveryOrderDetail")) {
                salesReturnDetail.setDodetails((DeliveryOrderDetail) dataMap.get("DeliveryOrderDetail"));
            }
            if (dataMap.containsKey("InvoiceDetail")) {
                salesReturnDetail.setCidetails((InvoiceDetail) dataMap.get("InvoiceDetail"));
            }
            
            if (dataMap.containsKey("reason") && dataMap.get("reason") != null) {
                MasterItem masterItem = dataMap.get("reason") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("reason"));
                salesReturnDetail.setReason(masterItem);
            }

            if (dataMap.containsKey("prtaxid")) {
                Tax tax = dataMap.get("prtaxid") == null ? null : (Tax) get(Tax.class, (String) dataMap.get("prtaxid"));
                salesReturnDetail.setTax(tax);
            }

            if (dataMap.containsKey("taxamount") && dataMap.get("taxamount") != null) {
                salesReturnDetail.setRowTaxAmount((Double) dataMap.get("taxamount"));
            }

            if (dataMap.containsKey("discount")) {
                salesReturnDetail.setDiscount((Double) dataMap.get("discount"));
            }
            if (dataMap.containsKey("discountispercent")) {
                salesReturnDetail.setDiscountispercent((Integer) dataMap.get("discountispercent"));
            }

            if (dataMap.containsKey("Inventory")) {
                salesReturnDetail.setInventory((Inventory) dataMap.get("Inventory"));
            }
            if (dataMap.containsKey("partno")) {
                salesReturnDetail.setPartno(StringUtil.DecodeText((String) dataMap.get("partno")));
            } else {
                salesReturnDetail.setPartno("");
            }
            if (dataMap.containsKey("invstoreid")) {
                salesReturnDetail.setInvstoreid((String) dataMap.get("invstoreid"));
            } else {
                salesReturnDetail.setInvstoreid("");
            }
            if (dataMap.containsKey("batch")) {
                ProductBatch productBatch = dataMap.get("batch") == null ? null : (ProductBatch) get(ProductBatch.class, (String) dataMap.get("batch"));
                if (productBatch != null) {
                    salesReturnDetail.setBatch(productBatch);
                }
            }
            if (dataMap.containsKey("invlocationid")) {
                salesReturnDetail.setInvlocid((String) dataMap.get("invlocationid"));
            } else {
                salesReturnDetail.setInvlocid("");
            }
            if (dataMap.containsKey("rate") && dataMap.get("rate") != null) {
                salesReturnDetail.setRate(Double.parseDouble((String) dataMap.get("rate")));
            }
            if(dataMap.containsKey("rateIncludingGst") && dataMap.get("rateIncludingGst") != null){
                salesReturnDetail.setRateincludegst((Double) dataMap.get("rateIncludingGst"));
            }
            if (dataMap.containsKey("priceSource") && dataMap.get("priceSource") != null) {
                salesReturnDetail.setPriceSource((String) dataMap.get("priceSource"));
            }
            if (dataMap.containsKey("pricingbandmasterid") && dataMap.get("pricingbandmasterid") != null) {
                salesReturnDetail.setPricingBandMasterid((String)dataMap.get("pricingbandmasterid"));
            }
            if (dataMap.containsKey("recTermAmount") && !StringUtil.isNullOrEmpty(dataMap.get("recTermAmount").toString())) {
                double recTermAmount = Double.parseDouble(dataMap.get("recTermAmount").toString());
                salesReturnDetail.setRowtermamount(recTermAmount);
            }
            if (dataMap.containsKey("OtherTermNonTaxableAmount") && !StringUtil.isNullOrEmpty(dataMap.get("OtherTermNonTaxableAmount").toString())) {
                double OtherTermNonTaxableAmount = Double.parseDouble(dataMap.get("OtherTermNonTaxableAmount").toString());
                salesReturnDetail.setOtherTermNonTaxableAmount(OtherTermNonTaxableAmount);
            }
            if (dataMap.containsKey("cogsjedetailid") && dataMap.get("cogsjedetailid") != null) {
                salesReturnDetail.setCostOfGoodsSoldJEdetail((JournalEntryDetail) get(JournalEntryDetail.class, dataMap.get("cogsjedetailid").toString()));
            }
            if (dataMap.containsKey("inventoryjedetailid") && dataMap.get("inventoryjedetailid") != null) {
                salesReturnDetail.setInventoryJEdetail((JournalEntryDetail) get(JournalEntryDetail.class, dataMap.get("inventoryjedetailid").toString()));
            }
            if (dataMap.containsKey("discountjson") && dataMap.get("discountjson") != null) {
                salesReturnDetail.setDiscountJson((String) dataMap.get("discountjson"));
            }
            if (dataMap.containsKey(Constants.isUserModifiedTaxAmount) && dataMap.get(Constants.isUserModifiedTaxAmount) != null) {
                salesReturnDetail.setIsUserModifiedTaxAmount((boolean) dataMap.get(Constants.isUserModifiedTaxAmount));
            }
            saveOrUpdate(salesReturnDetail);
            list.add(salesReturnDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveDeliveryOrderDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

//    @Override
//    public KwlReturnObject deleteSalesOrderDetails(String soid, String companyid) throws ServiceException {
//	try{	
//		String delQuery = "delete from SalesOrderDetail sod where sod.salesOrder.ID=? and sod.company.companyID=?";
//        int numRows = executeUpdate( delQuery,new Object[]{soid, companyid});
//        return new KwlReturnObject(true, "Goods Receipt Details has been deleted successfully.", null, null, numRows);
//	   }
//    catch(Exception ex){
//        throw ServiceException.FAILURE("Cannot Edit Sales Order as it is used in Customer Invoice already.",ex);//+ex.getMessage(), ex);
//     }    
//	}
    @Override
    public KwlReturnObject deleteDeliveryOrderDetails(String doid, String companyid) throws AccountingException {
        try {
            ArrayList params8 = new ArrayList();
            params8.add(doid);
            params8.add(companyid);
//            String myquery = " select id from dodetails where deliveryorder in (select id from deliveryorder where id=? and company = ?) ";
            String myquery = " select dod.id from dodetails dod inner join deliveryorder do on dod.deliveryorder = do.id where do.id=? and do.company =?";
            List list = executeSQLQuery( myquery, params8.toArray());
            Iterator itr = list.iterator();
            String idStrings = "";
            while (itr.hasNext()) {
                String invdid = itr.next().toString();
                idStrings += "'" + invdid + "',";
            }
            if (!StringUtil.isNullOrEmpty(idStrings)) {
                idStrings = idStrings.substring(0, idStrings.length() - 1);
                }
            deleteGstTaxClassDetails(idStrings);
            ArrayList params1 = new ArrayList();
            String deletecustomdetails = "delete  from dodetailscustomdata where dodetailsid in (" + idStrings + ")";
            int numRows1 = executeSQLUpdate( deletecustomdetails, params1.toArray());
            
            ArrayList params2 = new ArrayList();
            String delWastageDetailQuery = "delete  from wastagedetails where deliveryorderdetail in (" + idStrings + ")";
            int numRows2 = executeSQLUpdate(delWastageDetailQuery, params2.toArray());
            
            String delQuery = "delete from DeliveryOrderDetail dod where dod.deliveryOrder.ID=? and dod.company.companyID=?";
            int numRows = executeUpdate( delQuery, new Object[]{doid, companyid});
            return new KwlReturnObject(true, "Delivery Order Details has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw new AccountingException("Cannot Edit Delivery Order as it is or was already used in Other Transactions.", ex);
    }
    }
    /**
     * @Desc : Get Stock Store Transfer Data using DO
     * @param requestParams
     * @return
     * @throws ServiceException
     */
    public KwlReturnObject getStockStoreTransferFromDO(Map<String, Object> requestParams) throws ServiceException {
        List params = new ArrayList();
        if (requestParams.containsKey("dodid")) {
            params.add((String) requestParams.get("dodid"));
        }
        String query = "select domist From DeliveryDetailInterStoreLocationMapping domist inner join domist.interStoreTransferRequest ist where domist.deliveryOrderDetail=?";
        List list = executeQuery(query, params.toArray());
        return new KwlReturnObject(true, "get Batch Remaining Qty From IST.", "", list, list.size());
    }
/**
 * @Desc : Delete IST and DO Mapping
 * @param requestParams
 * @return
 * @throws ServiceException 
 */
    public KwlReturnObject deleteStockStoreLoactionDOMapping(Map<String, Object> requestParams) throws ServiceException {
        List params = new ArrayList();
        if (requestParams.containsKey("inst")) {
            params.add((String) requestParams.get("inst"));
        }
        String query = "delete from dodistmapping where ist=?";
        executeSQLUpdate(query, params.toArray());
        return new KwlReturnObject(true, "get Batch Remaining Qty From IST.", "", null, 0);
    }
    public KwlReturnObject updateSOBalanceQtyAfterDO(String doid, String linkedDocumentID, String companyid) throws AccountingException {
        List list = new ArrayList();
        try {
            Set<String> soNumbers = new HashSet<String>();
            KwlReturnObject resultPo = getSalesorderOrdersDetailsforBalanceqty(doid, companyid);
            List listPo = resultPo.getEntityList();
            Iterator itrPodetails = listPo.iterator();
            while (itrPodetails.hasNext()) {
                Object[] objArr = (Object[]) itrPodetails.next();
                if (objArr != null && (objArr[0]!=null||objArr[2]!=null)) {
                    SalesOrderDetail sodetails =null;
                    String soDetailsId = (objArr[0] != null) ? (String) objArr[0] : (String) objArr[2];
                    if ((String) objArr[2] != null) {
                        InvoiceDetail invdeatils = (InvoiceDetail) get(InvoiceDetail.class, (String) objArr[2]);
                        if(invdeatils.getSalesorderdetail()!=null){
                         soDetailsId = invdeatils.getSalesorderdetail().getID();
                        }
                    }
                    double doQty = (double) objArr[1];
                    
                    sodetails = (SalesOrderDetail) get(SalesOrderDetail.class, soDetailsId);
                    if (sodetails != null) {
                        doQty = sodetails.getBaseuomrate() != 0 ? (doQty / sodetails.getBaseuomrate()) : doQty;
                        if (sodetails.getSalesOrder() != null){
                            soNumbers.add(sodetails.getSalesOrder().getSalesOrderNumber());
                        }
                    }
                    boolean unlinkFlag = false;
                    if (!StringUtil.isNullOrEmpty(linkedDocumentID) && !sodetails.getSalesOrder().getID().equals(linkedDocumentID)) {
                        unlinkFlag = true;
                    }
                   if (!unlinkFlag) {
                    HashMap hMap = new HashMap();
                    hMap.put("sodetails", sodetails);
                    hMap.put("companyid", companyid);
                    hMap.put("balanceqty", doQty);
                    hMap.put("add", true);
                    updateSalesorderOrderStatus(hMap);
                    if (doQty > 0) {
                        HashMap poMap = new HashMap();
                        if (objArr != null && !StringUtil.isNullOrEmpty(soDetailsId)) {
                            if (sodetails != null) {
                                poMap.put("salesOrder", sodetails.getSalesOrder());
                                 if (sodetails.getBalanceqty() == sodetails.getQuantity()) {
                                      poMap.put("value", "0");
                                  }else{
                                      poMap.put("value", "2");
                                  }
                                if (sodetails.getBalanceqty() > 0) {
                                    poMap.put("isSOOpen", true);
                                } else {
                                    poMap.put("isSOOpen", false);
                                }
                                updateSOLinkflag(poMap);
                            }
                        }
                    }
                }
              }
            }
            list.addAll(soNumbers);
        } catch (Exception ex) {
            throw new AccountingException("Cannot update Delivery Order as it is or was already used in Other Transactions.", ex);
        }
        return new KwlReturnObject(true, "updateSOBalanceQty.", null, list, list.size());
    }

   @Override  
    public KwlReturnObject updateSOBalanceQtyAfterDOAfterDelete(String doid, String linkedDocumentID, String companyid) throws AccountingException {
        List list = new ArrayList();
        Set<String> soBillIds = new HashSet<>();
        Set<String> soDetailIds = new HashSet<>();
        double invoiceDetailQty = 0.0; // to keep track as how many qty of SO is used in Invoice. Accordingly,isSOOpen flag will be updated.
        try {
            Set<String> soNumbers = new HashSet<String>();
            KwlReturnObject resultPo = getSalesorderOrdersDetailsforBalanceqty(doid, companyid);
            List listPo = resultPo.getEntityList();
            Iterator itrPodetails = listPo.iterator();
            while (itrPodetails.hasNext()) {
                Object[] objArr = (Object[]) itrPodetails.next();
                boolean isSoLinkedToInvoiceFlag = false;//Link to detect whether so is linked to invoice or not in case of autogenerated DO 
                if (objArr != null && (objArr[0] != null || objArr[2] != null)) {
                    SalesOrderDetail sodetails = null;
                    String soDetailsId = (objArr[0] != null) ? (String) objArr[0] : (String) objArr[2];
                    if ((String) objArr[2] != null) {
                        InvoiceDetail invdeatils = (InvoiceDetail) get(InvoiceDetail.class, (String) objArr[2]);
                        if (invdeatils.getSalesorderdetail() != null) {
                        soDetailsId = invdeatils.getSalesorderdetail().getID();
                            if (!StringUtil.isNullOrEmpty(invdeatils.getSalesorderdetail().getSalesOrder().getID())) {
                                soBillIds.add(invdeatils.getSalesorderdetail().getSalesOrder().getID());
                                soDetailIds.add(soDetailsId);
                            }

                            invoiceDetailQty = invdeatils.getInventory().getQuantity();
                            isSoLinkedToInvoiceFlag = true;
                        } else {
                            isSoLinkedToInvoiceFlag = false;
                        }
                    }
                    double doQty = (double) objArr[1];
                    
                    sodetails = (SalesOrderDetail) get(SalesOrderDetail.class, soDetailsId);
                    if (sodetails != null) {
                        doQty = sodetails.getBaseuomrate() != 0 ? (doQty / sodetails.getBaseuomrate()) : doQty;
                        if (sodetails.getSalesOrder() != null) {
                            soNumbers.add(sodetails.getSalesOrder().getSalesOrderNumber());
                        }
                    }
                    boolean unlinkFlag = false;
                    if (!StringUtil.isNullOrEmpty(linkedDocumentID) && !sodetails.getSalesOrder().getID().equals(linkedDocumentID)) {
                        unlinkFlag = true;
                    }
                   if (!unlinkFlag) {
                    HashMap hMap = new HashMap();
                    hMap.put("sodetails", sodetails);
                    hMap.put("companyid", companyid);
                    hMap.put("balanceqty", doQty);
                    hMap.put("add", true);
                    updateSalesorderOrderStatus(hMap);
                    if (doQty > 0) {
                        HashMap poMap = new HashMap();
                        if (objArr != null && !StringUtil.isNullOrEmpty(soDetailsId)) {
                            if (sodetails != null) {
                                poMap.put("salesOrder", sodetails.getSalesOrder());

                                    //SDP-15767
                                    //Case: when delivery order is autogenerated from Invoice and invoice is linked to SalesOrder.Then deliveryorder is deleted.So should be updated
                                    //Before updating balance quantity and isSOOpen flag value it should check whether it is linked to any invoice or not.
                                    if (isSoLinkedToInvoiceFlag) {
                                        poMap.put("value", "1");
                                    } else if (sodetails.getBalanceqty() == sodetails.getQuantity()) {
                                      poMap.put("value", "0");
                                    } else {
                                      poMap.put("value", "2");
                                  }
                                    //if invoice quantity is fully utilised by invoice then make its open state to false. 
                                    //Next time while creating invoice, in link combo, sales order won't appear as it is fully utlised in early invoice
                                    if (isSoLinkedToInvoiceFlag && invoiceDetailQty == sodetails.getQuantity()) {
                                        poMap.put("isSOOpen", false);
                                    } else if (sodetails.getBalanceqty() > 0) {
                                    poMap.put("isSOOpen", true);
                                } else {
                                    poMap.put("isSOOpen", false);
                                }
                                updateSOLinkflag(poMap);
                            }
                        }
                    }
                }
              }
            }

            //Partial case: SO-Invoice-DO: When do is deleted then SO status should be upated properly 
            if (soDetailIds.size() > 0) {
                for (String billid : soBillIds) {
                    SalesOrder soObj = (SalesOrder) get(SalesOrder.class, billid);
                    if (soObj != null) {
                        List param8 = new ArrayList();
                        param8.add(companyid);
                        param8.add(billid);
                        String myquery = " select sod.id from sodetails sod inner join salesorder so on so.id=sod.salesorder where so.company =? and so.id=?";
                        List listso = executeSQLQuery(myquery, param8.toArray());
                        Iterator itr = listso.iterator();
                        while (itr.hasNext()) {
                            String sodetailid = itr.next().toString();
                            if (!soDetailIds.contains(sodetailid)) {
                                param8 = new ArrayList();
                                param8.add(companyid);
                                param8.add(sodetailid);
                                SalesOrderDetail sodetObj = (SalesOrderDetail) get(SalesOrderDetail.class, sodetailid);
                                if (sodetObj != null) {
                                    //Reopened case:checking whether sales order detail id is present in another invoice or not. If present then do not update the SO Open else update if it is not used in any invoice. 
                                    String sodquery = "select invoicedetails.id from invoicedetails inner join invoice on invoicedetails.invoice=invoice.id where invoice.company=? and invoice.deleteflag='F' and invoicedetails.salesorderdetail=?";
                                    List sodList = executeSQLQuery(sodquery, param8.toArray());
                                    //If salesodrerdetailid is not linked to any invoicedetail then update the flag 
                                    if (sodList.size() <= 0) {
                                        HashMap hMap = new HashMap();
                                        hMap.put("salesOrder", soObj);
                                        hMap.put("value", "1");
                                        hMap.put("isSOOpen", true);
                                        updateSOLinkflag(hMap);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            list.addAll(soNumbers);
        } catch (Exception ex) {
            throw new AccountingException("Cannot update Delivery Order as it is or was already used in Other Transactions.", ex);
        }
        return new KwlReturnObject(true, "updateSOBalanceQty.", null, list, list.size());
    }

    public KwlReturnObject getSalesorderOrdersDetailsforBalanceqty(String doid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "  select sodetails,baseuomdeliveredquantity,cidetails from dodetails  where deliveryorder=? and company=?";
        list = executeSQLQuery( query, new Object[]{doid, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    //this function is useful when we return any transction with link to DO and if that DO is linked with SO then we will update the SO status
    public KwlReturnObject updateSalesorderOrderStatus(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            SalesOrderDetail sodetails = (SalesOrderDetail) requestParams.get("sodetails");
            if (sodetails != null) {
                double balanceqty = 0;
                String query = "";
                boolean add = false;
                boolean update = false;
                if (requestParams.containsKey("add") && requestParams.get("add") != null && requestParams.get("add") != "") {
                    add = (Boolean) requestParams.get("add");
                }
                if (requestParams.containsKey("update") && requestParams.get("update") != null && requestParams.get("update") != "") {
                    update = (Boolean) requestParams.get("update");
                }

                if (requestParams.containsKey("balanceqty") && requestParams.get("balanceqty") != null && requestParams.get("balanceqty") != "") {
                    balanceqty = (Double) requestParams.get("balanceqty");
                }
                if (add) {
                    sodetails.setBalanceqty(sodetails.getBalanceqty() + balanceqty);
                } else if (update) {
                    sodetails.setBalanceqty(balanceqty);
                } else {
                    if ((sodetails.getBalanceqty() - balanceqty) >= 0) {
                        sodetails.setBalanceqty(sodetails.getBalanceqty() - balanceqty);
                    }
                }
                saveOrUpdate(sodetails);
            }   
             } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateDeliveryOrderStatus:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    public KwlReturnObject updateSOBalanceQtyAfterSR(String srid, String companyid) throws AccountingException {
        try {
            KwlReturnObject resultPo = getSoDetailsFromDODetailsforBalanceqty(srid, companyid);
            List listPo = resultPo.getEntityList();
            Iterator itrPodetails = listPo.iterator();
            while (itrPodetails.hasNext()) {
                Object[] objArr = (Object[]) itrPodetails.next();
               if (objArr != null && (objArr[0]!=null||objArr[2]!=null)) {
                   SalesOrderDetail sodetails = null;
                   String soDetailsId = (objArr[0]!=null)?(String) objArr[0]:(String)objArr[2];
                   if ((String) objArr[2] != null) {
                       InvoiceDetail invdeatils = (InvoiceDetail) get(InvoiceDetail.class, (String) objArr[2]);
                       if (invdeatils.getSalesorderdetail() != null) {
                           soDetailsId = invdeatils.getSalesorderdetail().getID();
                       }
                   }
                   double srQty = (double) objArr[1];
                   sodetails = (SalesOrderDetail) get(SalesOrderDetail.class, soDetailsId);
                   HashMap hMap = new HashMap();
                   hMap.put("sodetails", sodetails);
                   hMap.put("companyid", companyid);
                   hMap.put("balanceqty", srQty);
                   hMap.put("add", false);
                   updateSalesorderOrderStatus(hMap);
                   if (srQty > 0) {
                       HashMap poMap = new HashMap();
                       if (objArr != null && !StringUtil.isNullOrEmpty(soDetailsId)) {
                           if (sodetails != null) {
                               poMap.put("salesOrder", sodetails.getSalesOrder());
                               if (sodetails.getBalanceqty() == sodetails.getQuantity()) {
                                   poMap.put("value", "0");
                               }
                               if (sodetails.getBalanceqty() > 0) {
                                   poMap.put("isSOOpen", true);
                               } else {
                                   poMap.put("isSOOpen", false);
                               }
                               updateSOLinkflag(poMap);
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
            throw new AccountingException("Cannot update Delivery Order as it is or was already used in Other Transactions.", ex);
        }

        return new KwlReturnObject(true, "updateSOBalanceQtyAfterSR.", null, null, 0);
    }

    public KwlReturnObject getSoDetailsFromDODetailsforBalanceqty(String srid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String query = "  select dod.sodetails,sr.returnquantity,dod.cidetails from srdetails sr inner join dodetails dod on dod.id=sr.dodetails where sr.salesreturn=? and sr.company=?";
        list = executeSQLQuery( query, new Object[]{srid, companyid});
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    @Override
    public KwlReturnObject deleteWorkOrderDetails(String doid, String companyid) throws ServiceException {
        try {
            String delQuery = "delete from AssetMaintenanceWorkOrderDetail dod where dod.assetMaintenanceWorkOrder.id=? and dod.company.companyID=?";
            int numRows = executeUpdate( delQuery, new Object[]{doid, companyid});
            return new KwlReturnObject(true, "Work Order Details has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot Edit Work Order as it is or was already used in Other Transactions.", ex);//+ex.getMessage(), ex);
        }
    }

    @Override
    public KwlReturnObject deleteSalesReturnDetails(String doid, String companyid) throws ServiceException {
        try {
            ArrayList params8 = new ArrayList();
            params8.add(doid);
            params8.add(companyid);
//            String myquery = " select id from srdetails where salesreturn in (select id from salesreturn where id=? and company = ?) ";
            String myquery = " select srd.id from srdetails srd inner join salesreturn sr on sr.id=srd.salesreturn where sr.id=? and sr.company = ?";
            List list = executeSQLQuery( myquery, params8.toArray());
            Iterator itr = list.iterator();
            String idStrings = "";
            while (itr.hasNext()) {
                String invdid = itr.next().toString();
                idStrings += "'" + invdid + "',";
            }
            if (!StringUtil.isNullOrEmpty(idStrings)) {
                idStrings = idStrings.substring(0, idStrings.length() - 1);
            }
            /**
             * Delete GST Fields for India.
             */
            deleteGstTaxClassDetails(idStrings);
            ArrayList params1 = new ArrayList();
            String deletecustomdetails = "delete  from srdetailscustomdata where srdetailsid in (" + idStrings + ")";
            int numRows1 = executeSQLUpdate( deletecustomdetails, params1.toArray());
            String delQuery = "delete from SalesReturnDetail dod where dod.salesReturn.ID=? and dod.company.companyID=?";
            int numRows = executeUpdate( delQuery, new Object[]{doid, companyid});
            return new KwlReturnObject(true, "Sales Return Details has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot Edit Sales Return as it is or was already used in Other Transactions.", ex);//+ex.getMessage(), ex);
        }
    }

    @Override
    public KwlReturnObject saveinvoiceDocuments(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            if (dataMap.containsKey("InvoceDocument")) {
                InvoiceDocuments document = (InvoiceDocuments) dataMap.get("InvoceDocument");
                saveOrUpdate(document);
                list.add(document);
            }
            if (dataMap.containsKey("InvoiceDocumentMapping")) {
                InvoiceDocumentCompMap documentCompMap = (InvoiceDocumentCompMap) dataMap.get("InvoiceDocumentMapping");
                saveOrUpdate(documentCompMap);
                list.add(documentCompMap);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveinvoiceDocuments : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject getinvoiceDocuments(HashMap<String, Object> dataMap) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String start = (String) dataMap.get(Constants.start);
            String limit = (String) dataMap.get(Constants.limit);

            ArrayList params = new ArrayList();

            params.add((String) dataMap.get(Constants.companyKey));

            String conditionSQL = " where invoicedoccompmap.company=?";

            String invoiceId = (String) dataMap.get("invoiceID");
            if (dataMap.containsKey("invoiceID") && !StringUtil.isNullOrEmpty(invoiceId)) {
                params.add(invoiceId);
                conditionSQL += " and invoicedoccompmap.invoiceid=?";
            }
            if (dataMap.containsKey("docid")) {
                String docidsarr[] = dataMap.get("docid").toString().split(",");
                String ids = "";
                for (int i = 0; i < docidsarr.length; i++) {
                    ids = ids + ",'" + docidsarr[i] + "'";
                }
                ids = ids.substring(1);
                conditionSQL += " and invoicedocuments.id in("+ids+")";
            }

            String mysqlQuery = "select invoicedocuments.docname  as docname,invoicedocuments.doctypeid as doctypeid,invoicedocuments.docid as docid,invoicedocuments.crmdocumentid  as crmdocumentid "
                    + "from invoicedoccompmap inner join invoicedocuments on invoicedoccompmap.documentid=invoicedocuments.id " + conditionSQL;

            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.getinvoiceDocuments:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject deleteinvoiceDocument(String documentID) throws ServiceException {
        List list = null;
        int numRows = 0;

        String query = "from InvoiceDocuments invdoc where invdoc.docID=?";
        list = executeQuery( query, new Object[]{documentID});

        if (!list.isEmpty()) {
            query = "delete from InvoiceDocumentCompMap invdocmap where invdocmap.document=?";
            numRows = executeUpdate( query, new Object[]{list.get(0)});
            delete(list.get(0));
            return new KwlReturnObject(true, "Document has been deleted successfully.", null, list, numRows);
        }
        return new KwlReturnObject(true, "", null, list, 0);
    }
    @Override
    public KwlReturnObject deleteTemporaryAndPermanentInvoiceDocument(JSONObject requestParams) throws ServiceException {
        List list = null;
        List list1 = null;
        int numRows = 0;
        BigInteger permenentDocumentReferenceCount = BigInteger.ZERO, temporaryDocumentReferenceCount = BigInteger.ZERO;
        try {
            String documentID = requestParams.optString("docid", "");
            String transactionID = requestParams.optString("transactionid", "");

            String query = "from InvoiceDocuments invdoc where invdoc.docID = ?";
            list = executeQuery(query, new Object[]{documentID});

            if (!list.isEmpty()) {
                /*
                 *Getting count of documents from permanant table.
                 */
                query = "select count(*) from invoicedoccompmap where documentid = ? ";
                list1 = executeSQLQuery(query, new Object[]{list.get(0)});
                if (!list1.isEmpty() && !StringUtil.isNullObject(list1)) {
                    permenentDocumentReferenceCount = (BigInteger) list1.get(0);
                }
                /*
                 *Getting count of documents from temporary table.
                 */
                query = "select count(*) from invoicedoccompmaptemporary where documentid = ? ";
                list1 = executeSQLQuery(query, new Object[]{list.get(0)});
                if (!list1.isEmpty() && !StringUtil.isNullObject(list1)) {
                    temporaryDocumentReferenceCount = (BigInteger) list1.get(0);
                }
                /*
                 *If count from permanant table is 1 and temporary table is 0
                 * or count from permanant table is 0 and temporary table is 1
                 * then we are deleting documents permanantly.
                 * If permenentDocumentReferenceCount and temporaryDocumentReferenceCount
                 * is greater than 1 in this case we are deleting only reference of that document.
                 */
                query = "delete from invoicedoccompmap where documentid = ? and invoiceid = ?";
                numRows = executeSQLUpdate(query, new Object[]{list.get(0), transactionID});
                query = "delete from invoicedoccompmaptemporary where documentid = ? ";
                numRows = executeSQLUpdate(query, new Object[]{list.get(0)});
                //
                
                if ((permenentDocumentReferenceCount.intValue() == 1 && temporaryDocumentReferenceCount.intValue() == 0) || (permenentDocumentReferenceCount.intValue() == 0 && temporaryDocumentReferenceCount.intValue() == 1)) {
                    //Delete document permanantly
                    delete(list.get(0));
                }
                return new KwlReturnObject(true, "Document has been deleted successfully.", null, null, numRows);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("deleteTemporaryAndPermanentInvoiceDocument:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
    @Override
    public KwlReturnObject getAttachedDocumentDetailsFromTransactionId(String transactionID, String companyId) throws ServiceException {
        List list = null;
        try {
            String query = "SELECT documentid FROM invoicedoccompmap WHERE invoiceid=? AND company=? ";
            list = executeSQLQuery(query, new Object[]{transactionID, companyId});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAttachedDocumentDetailsFromTransactionId:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, 0);
    }
    
    public KwlReturnObject getUsersByProducts(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get("df");
            String startDate = (String) request.get("startdate");
            String endDate = (String) request.get("enddate");
            String start = (String) request.get("start");
            String limit = (String) request.get("limit");
            String productid = (String) request.get("productid");
            boolean isCustomer = (request.containsKey("isCustomer")) ? Boolean.parseBoolean((String) request.get("isCustomer")) : false;
            boolean isTopCustomers = (request.containsKey("isTopCustomers")) ? Boolean.parseBoolean((String) request.get("isTopCustomers")) : false;
            ArrayList params = new ArrayList();

            //Get Filter String
            String filter = "";
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            if (request.containsKey("filter_names") && request.containsKey("filter_params")) {
                filter_names = (ArrayList) request.get("filter_names");
                filter_params = (ArrayList) request.get("filter_params");
                //if(filter_names.size() != filter_params.size()) { //throw "size not same" exception}
                filter = StringUtil.filterQuery(filter_names, "and");
                int ind = filter.indexOf("("); // Insert in/not in params in filter query.
                if (ind > -1) {
                    int index = Integer.valueOf(filter.substring(ind + 1, filter.indexOf(")")));
                    filter = filter.replaceAll("(" + index + ")", filter_params.get(index).toString());
                    filter_params.remove(index);
                }
            }

            String conditionSql = "";
            //This code commented because in get dormant customer query (not in ) is used for get dormant customer. because of offset it skip the records before offset so it produce wrong result.
//            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
//              //  conditionSql = " limit " + limit + " offset " + start;
//            }
            
            String conditionQuery = "";
            if (productid.equalsIgnoreCase("All")) {
                conditionQuery = " and inventory.product is not ? ";
                productid = null;
                conditionSql = "";
            } else {
                conditionQuery = " and inventory.product= ? ";
            }
            conditionSql = filter + conditionSql;
            
            params.add((String) request.get(Constants.companyKey));
            params.add(productid);
            params.add(df.parse(startDate));
            params.add(df.parse(endDate));
            params.add((String) request.get(Constants.companyKey));
            params.add(productid);

            String mysqlQuery = "";
            if (isCustomer) {
                mysqlQuery = "select * from (select t.customer as customer,sum(t.productcount) as count from "
                        + "(select sum(quantity) as productcount ,deliveryorder.customer, deliveryorder.id as id from deliveryorder "
                        + "inner join dodetails on dodetails.deliveryorder=deliveryorder.id "
                        + "inner join inventory on inventory.id=dodetails.id "
                        + "where deliveryorder.company=?" +conditionQuery + "and deliveryorder.deleteflag='F' "
                        + "and inventory.deleteflag='F' and (deliveryorder.orderdate >=? and deliveryorder.orderdate <=?) group by deliveryorder.customer "
                        + " union "
                        + "select -sum(inventory.quantity) as productcount ,deliveryorder.customer, salesreturn.id as id from salesreturn "
                        + "inner join srdetails on srdetails.salesreturn=salesreturn.id "
                        + "inner join inventory on inventory.id=srdetails.id "
                        + "inner join dodetails on dodetails.id=srdetails.dodetails "
                        + "inner join deliveryorder on deliveryorder.id=dodetails.deliveryorder "
                        + "where  salesreturn.company=? "+conditionQuery+" and salesreturn.deleteflag='F' "
                        + "and inventory.deleteflag='F' group by deliveryorder.customer "
                        + ") as t group by t.customer order by count desc ) as test where test.count!=0 ";
            } else if (!isCustomer) {
                mysqlQuery = "select * from (select t.vendor as vendor,sum(t.productcount) as count from "
                        + "(select sum(quantity) as productcount ,vendor,grorder.id as id from grorder "
                        + "inner join grodetails on grodetails.grorder=grorder.id "
                        + "inner join inventory on inventory.id=grodetails.id "
                        + "where  grorder.company=? "+conditionQuery+" and grorder.deleteflag='F' "
                        + "and inventory.deleteflag='F' and (grorder.grorderdate >=? and grorder.grorderdate <=?) group by vendor "
                        + "union "
                        + "select -sum(inventory.quantity) as productcount ,grorder.vendor,purchasereturn.id as id from purchasereturn "
                        + "inner join prdetails on prdetails.purchasereturn=purchasereturn.id "
                        + "inner join inventory on inventory.id=prdetails.id "
                        + "inner join grodetails on grodetails.id=prdetails.grdetails "
                        + "inner join grorder on grorder.id=grodetails.grorder "
                        + "where  purchasereturn.company=? "+conditionQuery+" and purchasereturn.deleteflag='F' "
                        + "and inventory.deleteflag='F' group by grorder.vendor "
                        + ") as t group by t.vendor order by count desc ) as test where test.count!=0 ";
            }
            if (isCustomer && !isTopCustomers) {
                params.add((String) request.get(Constants.companyKey));
                params.add((String) request.get(Constants.companyKey));
                params.add(productid);
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
                params.add((String) request.get(Constants.companyKey));
                params.add(productid);
                mysqlQuery = "select customer.id,ifnull(count,0) from customer "
                        + "left join ( " + mysqlQuery + " ) as tmp on customer.id=tmp.customer "
                        + "where customer.company=? and customer.id not in "
                        + "(select temp.customer from ( " + mysqlQuery + conditionSql + " ) as temp) order by count asc ";
            } else if (!isCustomer && !isTopCustomers) {
                params.add((String) request.get(Constants.companyKey));
                params.add((String) request.get(Constants.companyKey));
                params.add(productid);
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
                params.add((String) request.get(Constants.companyKey));
                params.add(productid);
                mysqlQuery = "select vendor.id,ifnull(count,0) from vendor "
                        + "left join ( " + mysqlQuery + " ) as tmp on vendor.id=tmp.vendor "
                        + "where vendor.company=? and vendor.id not in "
                        + "(select temp.vendor from ( " + mysqlQuery + conditionSql + ") as temp) order by count asc ";
            }
            //list = executeSQLQuery( mysqlQuery+conditionSql, params.toArray());           
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getUsersByProducts:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
     /**
     * @param requestParams  HashMap should include parameters required by this
     * method
     * @description DAO implementation method getReports which 
     * retrieves requested reports  
     * @return KwlReturnObject This will return the total count and list of reports 
     */
    @Override
    public KwlReturnObject getReports(HashMap<String, Object> requestParams) throws ServiceException {
        List list = null;
        String mysqlQuery = "";
        String mysqlQuery1 = "";
        String conditionss = "";
        String customReports = "";
        String filterCondition = "";
        String buildConditionalQuery = "";
        int countryId;
        String userid="";
        int count = 0;
        boolean isActivateDeliveryPlanner=false;
        boolean isActivateProfitMargin=false;
        boolean isVhqSubDomain=false;
        boolean isCustomWidgetReport = false;
        boolean isActivateCheckinCheckout = false;
        ArrayList params = new ArrayList();
        /*
         * variable to decide the request i.e. wthether it is for all reports or for favourite reports
        */
        int typeid = 0;
        if (requestParams.containsKey("typeid") && requestParams.get("typeid") != null) {
            typeid = Integer.parseInt((String) requestParams.get("typeid"));
        }
        String start = (String) requestParams.get("start");
        String limit = (String) requestParams.get("limit");
        String moduleid = requestParams.get("moduleid") != null ? (String) requestParams.get("moduleid") : "";
            
        String ss = (String) requestParams.get("ss");
        String conditionSql = "";
        if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
            conditionSql = " order by r.`name` limit " + limit + " offset " + start;
        }
        
        if(requestParams.containsKey("isactivatedeliveryplanner") && requestParams.get("isactivatedeliveryplanner")!=null){
            isActivateDeliveryPlanner=(Boolean)requestParams.get("isactivatedeliveryplanner");
            
            if (!isActivateDeliveryPlanner) {
                buildConditionalQuery += " and r.id not in('Delivery_Planner_Report','Vehicle_Delivery_Summary_Report','Individual_Vehicle_Delivery_Report','Individual_Vehicle_DO_PO_Report','Driver_Delivery_Summary_Report','Individual_Driver_Delivery_Report','Individual_Driver_DO_PO_Report','PO_Delivery_Planner_Report','Sales_Return_Delivery_Planner_Report')";
            } else {
                buildConditionalQuery += " and r.id not in('Drivers_Tracking_Report')";
            }
        }
         /*
         * sets favourite to true if the request is made for favourite reports
         */
         if (typeid == 1) {
            buildConditionalQuery += " and  f.favourite = 'T' ";   
         
        }
        
        if (requestParams.containsKey("countryid") && requestParams.get("countryid") != null) {
            countryId = Integer.parseInt(requestParams.get("countryid").toString());
            if (countryId != Constants.indian_country_id) {
                buildConditionalQuery += " and r.id not in('Output_VAT_Calculation_Report','VAT_Liability_Calculation_Report','Input_VAT_Report_Summary','Sales_Register','Purchase_Register')";
            }
            if (countryId != Constants.malaysian_country_id && countryId != Integer.parseInt(Constants.SINGAPOREID)) {
                buildConditionalQuery += " and r.id not in('view_gst_report')";
            }
            if (countryId != Constants.INDONESIAN_COUNTRY_ID) {
                buildConditionalQuery += " and r.id not in('Invoice_VHT_Report')";
            }
        }
        
        if(requestParams.containsKey("isactivateprofitmargin") && requestParams.get("isactivateprofitmargin")!=null){
            isActivateProfitMargin=(Boolean)requestParams.get("isactivateprofitmargin");
            if (!isActivateProfitMargin) {
                buildConditionalQuery += " and r.id not in('Monthly_Commission_Of_Sales_Person')";
            } 
        }
        
        if (requestParams.containsKey("isvhqsubdomain") && requestParams.get("isvhqsubdomain") != null) {
            isVhqSubDomain = (Boolean) requestParams.get("isactivateprofitmargin");
            if (!isVhqSubDomain) {
                buildConditionalQuery += " and r.id not in('Cash_Flow_Statement_As_Per_COA')";
            }
        }
        if (requestParams.containsKey("isactivatecheckincheckout") && requestParams.get("isactivatecheckincheckout") != null) {
            isActivateCheckinCheckout = (Boolean) requestParams.get("isactivatecheckincheckout");
            if (!isActivateCheckinCheckout) {
                buildConditionalQuery += " and r.id not in('CheckInCheckOut')";
            }
        }
        
        buildConditionalQuery +=" and r.isdefaultreport='T' ";
        
        
        String companyid = "";
        if (requestParams.containsKey("companyid") && requestParams.get("companyid") != null) {
            companyid = requestParams.get("companyid").toString();
            params.add(companyid);
        }
        if (requestParams.containsKey("isCustomWidgetReport") && requestParams.get("isCustomWidgetReport") != null) {
            isCustomWidgetReport = Boolean.valueOf(requestParams.get("isCustomWidgetReport").toString());
        }
        if (requestParams.containsKey("userid") && requestParams.get("userid") != null) {
            userid = requestParams.get("userid").toString();
            params.add(userid);
        }
        if (StringUtil.isNullOrEmpty(ss) == false) {
            params.add(("%" + ss + "%").toString());
            conditionss += "where r.name like ?";
        }
        if (!StringUtil.isNullOrEmpty(ss) && !StringUtil.isNullOrEmpty(moduleid)) {//this block is executed only when report list is fetched modulewise
            conditionss += "and  r.moduleid = ?";
            params.add(moduleid);
        } else if (!StringUtil.isNullOrEmpty(moduleid)) {
            conditionss += " where  r.moduleid = ?";
            params.add(moduleid);
        }
        if (!StringUtil.isNullOrEmpty(conditionss)) {
            if (requestParams.containsKey("countryid") && requestParams.get("countryid") != null) {
                conditionss += " and ( r.countryid = '' or r.countryid is null or r.countryid = ?)";
                params.add(requestParams.get("countryid"));
            }
        } else {
            if (requestParams.containsKey("countryid") && requestParams.get("countryid") != null) {
                conditionss += " where  ( r.countryid = '' or r.countryid is null or r.countryid = ?)";
                params.add(requestParams.get("countryid"));
            }
        }
        String selectQuery = "select DISTINCT r.id, r.`name`, r.description, "
                + " CASE "
                + " WHEN w.id is null THEN FALSE "
                + " WHEN w.id is not null THEN TRUE "
                + " END "
                + " AS addedTowidget " + ", f.favourite"
                + " from reportmaster r "
                + " left join (select * from widgetreportmaster where company=?) w on r.id=w.report left join (select * from favouritereportmaster where userid=?) f on r.id=f.report ";
        
        if (isCustomWidgetReport) {
            buildConditionalQuery += " and r.iscustomwidgetready = ? ";
            params.add("T");
            selectQuery += " left join reportrolemap on  reportrolemap.reportid = r.id left join users on  reportrolemap.userid = users.userid ";
            customReports = " or (r.companyId = ?  and (users.userid=? or r.createdbyid=?)and r.ispivotreport='F' ) ";
            params.add(companyid);
            params.add(userid);
            params.add(userid);
            if (!StringUtil.isNullOrEmpty(ss)) {
                params.add(("%" + ss + "%").toString());
                customReports += " and r.name like ? ";
            }

            mysqlQuery = selectQuery + conditionss + buildConditionalQuery + customReports + conditionSql;
            mysqlQuery1 = selectQuery + conditionss + buildConditionalQuery + customReports;
        } else {
            mysqlQuery = selectQuery + conditionss + buildConditionalQuery + conditionSql;
            mysqlQuery1 = selectQuery + conditionss + buildConditionalQuery;
        }
        

        list = executeSQLQuery(mysqlQuery1, params.toArray());
        count = list.size();
        list = executeSQLQuery(mysqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, count);
   }
    
    @Override
    public KwlReturnObject getReportsForWidgets(HashMap<String, Object> requestParams) throws ServiceException {
        List list = null;
        ArrayList params = new ArrayList();
        String query = "";
        String companyid = "";
        if (requestParams.containsKey("companyid") && requestParams.get("companyid") != null) {
            companyid = requestParams.get("companyid").toString();
            params.add(companyid);
        }
       
        query = "select r.id, r.`name`, r.description from reportmaster r inner join widgetreportmaster w on r.id=w.report where w.company = ? order by r.`name`";
        list = executeSQLQuery(query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getReportPerm(HashMap<String, Object> requestParams) throws ServiceException {
        List list = null;
        String mysqlQuery = "";
        String mysqlQuery1 = "";
        int count = 0;
        ArrayList params = new ArrayList();
        params.add((String) requestParams.get("reportid"));
        params.add((String) requestParams.get("companyid"));
        String start = (String) requestParams.get("start");
        String limit = (String) requestParams.get("limit");
        String conditionSql = "";
        if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
            conditionSql = " limit " + limit + " offset " + start;
        }
        mysqlQuery = "select * from reportrolemap inner join rolelist on rolelist.roleid=reportrolemap.roleid inner join users on reportrolemap.userid=users.userid where reportid=? and users.company=?" + conditionSql;
        mysqlQuery1 = "select * from reportrolemap inner join rolelist on rolelist.roleid=reportrolemap.roleid inner join users on reportrolemap.userid=users.userid where reportid=? and users.company=?";
        list = executeSQLQuery( mysqlQuery1, params.toArray());
        count = list.size();
        list = executeSQLQuery( mysqlQuery, params.toArray());

        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getUserForCombo(HashMap<String, Object> requestParams) throws ServiceException {
        List list = null;
        String mysqlQuery = "";
        int count = 0;
        ArrayList params = new ArrayList();
        params.add((String) requestParams.get("companyid"));
        params.add((String) requestParams.get("groupid"));
        params.add((String) requestParams.get("reportid"));
        mysqlQuery = "select * from users us  where us.company=? and us.deleteflag=0 and us.roleid=? and userid not in (select rp.userid from reportrolemap rp where rp.reportid=?) ";
        list = executeSQLQuery( mysqlQuery, params.toArray());
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }

    public boolean checkUserPermissionForReport(HashMap<String, Object> dataMap) throws ServiceException {
        boolean alreadyuseid = false;
        List list = null;
        String mysqlQuery = "";
        int count = 0;
        String condition = "";
        ArrayList params = new ArrayList();
        if (dataMap.containsKey("reportid") && dataMap.get("reportid") != null && dataMap.containsKey("userid") && dataMap.get("userid") != null) {
            condition += "where rep.reportid = ? ";
            params.add((String) dataMap.get("reportid"));
            condition += "and rep.userid in ( ? )";
            params.add((String) dataMap.get("userid"));
        }
        if (dataMap.containsKey("roleid") && dataMap.get("roleid") != null) {
            condition += " and rep.roleid = ? ";
            params.add((String) dataMap.get("roleid"));
        }
        mysqlQuery = "select * from reportrolemap rep " + condition;
        list = executeSQLQuery(mysqlQuery, params.toArray());
        count = list.size();
        if (count > 0) {
            alreadyuseid = true;
        }
        return alreadyuseid;
    }
    public KwlReturnObject AssignUserPerm(HashMap<String, Object> dataMap) throws ServiceException {


        List list = new ArrayList();
        List<JSONObject> auditLogJson = new ArrayList<JSONObject>();
        try {
            String[] userIDS = dataMap.get("userid").toString().split(",");
            String loginUserName = "";
            if (dataMap.containsKey("loginid")) {
                User user = (User) get(User.class, (String) dataMap.get("loginid"));
                loginUserName = !StringUtil.isNullObject(user) ? user.getUserLogin().getUserName() : "";
            }
            ReportRoleMap reportrolmap = new ReportRoleMap();
            for (int cnt = 0; cnt < userIDS.length; cnt++) {
                reportrolmap = new ReportRoleMap();
                String uuid = StringUtil.generateUUID();
                reportrolmap.setID(uuid);
                String reportName = "", roleName = "";
                if (dataMap.containsKey("reportid")) {
                    ReportMaster Rm = (ReportMaster) get(ReportMaster.class, (String) dataMap.get("reportid"));
                    reportrolmap.setReportid(Rm);
                    reportName = !StringUtil.isNullObject(Rm) ? Rm.getName() : "";
                }
                if (dataMap.containsKey("roleid")) {
                    Rolelist Ro = (Rolelist) get(Rolelist.class, (String) dataMap.get("roleid"));  // for selecting rolls 
                    reportrolmap.setRoleid(Ro);
                    roleName = !StringUtil.isNullObject(Ro) ? Ro.getDisplayrolename() : "";
                }

                User Ur = (User) get(User.class, (String) userIDS[cnt]);

                reportrolmap.setUserid(Ur);

                save(reportrolmap);

                list.add(reportrolmap);    
                
                JSONObject jobj = new JSONObject();
                jobj.put("loginUserName", loginUserName);
                jobj.put("userName", Ur.getUserLogin().getUserName());
                jobj.put("roleName", roleName);
                jobj.put("reportName", reportName);
                jobj.put("reportID", uuid);
                auditLogJson.add(jobj);
            }
            list.add(auditLogJson);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveInvoiceTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());

    }

    public KwlReturnObject AssignAmendingPrice(HashMap<String, Object> dataMap) throws ServiceException {


        List list = new ArrayList();

        try {

            AmendingPrice AmendingPriceObj = null;

            AmendingPriceObj = (AmendingPrice) get(AmendingPrice.class, (String) dataMap.get("userid"));
            if (AmendingPriceObj == null) {
                AmendingPriceObj = new AmendingPrice();
                if (dataMap.containsKey("userid")) {
                    User UserObj = (User) get(User.class, (String) dataMap.get("userid"));
                    AmendingPriceObj.setUserID(UserObj);
                    AmendingPriceObj.setID((String) dataMap.get("userid"));
                }
            }
            if (dataMap.containsKey("companyid")) {
                Company CompanyObj = (Company) get(Company.class, (String) dataMap.get("companyid"));
                AmendingPriceObj.setCompanyID(CompanyObj);
            }

            AmendingPriceObj.setCInvoice(Boolean.parseBoolean(dataMap.get("CInvoice").toString()));
            AmendingPriceObj.setVInvoice(Boolean.parseBoolean(dataMap.get("VInvoice").toString()));
            AmendingPriceObj.setSalesOrder(Boolean.parseBoolean(dataMap.get("SalesOrder").toString()));
            AmendingPriceObj.setPurchaseOrder(Boolean.parseBoolean(dataMap.get("PurchaseOrder").toString()));
            AmendingPriceObj.setVendorQuotation(Boolean.parseBoolean(dataMap.get("VendorQuotation").toString()));
            AmendingPriceObj.setCustomerQuotation(Boolean.parseBoolean(dataMap.get("CustomerQuotation").toString()));
            AmendingPriceObj.setBlockAmendingPrice(Boolean.parseBoolean(dataMap.get("BlockAmendingPrice").toString()));
            save(AmendingPriceObj);

            list.add(AmendingPriceObj);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("AssignAmendingPrice : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());

    }

    public KwlReturnObject savePermissionsforFilteringReportsData(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();

        try {
            List<DataFilteringModule> dataFilteringModuleList = new ArrayList<DataFilteringModule>();
            DataFilteringModule dataFilteringModule = null;
            if (dataMap.get("userid") != null && !dataMap.get("userid").toString().equals("") && dataMap.containsKey("companyid") && dataMap.get("companyid") != null && !dataMap.get("companyid").toString().equals("")) {
                dataFilteringModuleList = find("from DataFilteringModule where user.userID='" + dataMap.get("userid").toString() + "' and company.companyID='" + dataMap.get("companyid").toString() + "'");
            }
            if (!dataFilteringModuleList.isEmpty()) {
                dataFilteringModule = dataFilteringModuleList.get(0);
            }
//                dataFilteringModule = (DataFilteringModule) get(DataFilteringModule.class, (String)dataMap.get("userid"));
            if (dataFilteringModule == null) {
                dataFilteringModule = new DataFilteringModule();
                if (dataMap.containsKey("userid")) {
                    User user = (User) get(User.class, (String) dataMap.get("userid"));
                    dataFilteringModule.setUser(user);
//                        dataFilteringModule.setId((String) dataMap.get("userid"));
                }
            }
            if (dataMap.containsKey("companyid")) {
                Company company = (Company) get(Company.class, (String) dataMap.get("companyid"));
                dataFilteringModule.setCompany(company);
            }
            dataFilteringModule.setCustomerInvoice(Boolean.parseBoolean(dataMap.get("customerInvoiceCheck").toString()));
            dataFilteringModule.setSalesOrder(Boolean.parseBoolean(dataMap.get("salesOrderCheck").toString()));
            dataFilteringModule.setCustomerQuotation(Boolean.parseBoolean(dataMap.get("customerQuotationCheck").toString()));
            dataFilteringModule.setDeliveryOrder(Boolean.parseBoolean(dataMap.get("deliveryOrderCheck").toString()));
            saveOrUpdate(dataFilteringModule);
            list.add(dataFilteringModule);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("DataFilteringModule : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());

    }

    public JSONObject GetUserAmendingPrice(HashMap<String, Object> requestParams) throws ServiceException {
        JSONObject jobj = new JSONObject();
        AmendingPrice AmendingPriceObj = (AmendingPrice) get(AmendingPrice.class, (String) requestParams.get("userid"));
        if (AmendingPriceObj != null) {
            try {
                jobj.put("CInvoice", AmendingPriceObj.isCInvoice());
                jobj.put("VInvoice", AmendingPriceObj.isVInvoice());
                jobj.put("SalesOrder", AmendingPriceObj.isSalesOrder());
                jobj.put("PurchaseOrder", AmendingPriceObj.isPurchaseOrder());
                jobj.put("VendorQuotation", AmendingPriceObj.isVendorQuotation());
                jobj.put("CustomerQuotation", AmendingPriceObj.isCustomerQuotation());
                jobj.put("BlockAmendingPrice", AmendingPriceObj.isBlockAmendingPrice());
            } catch (JSONException ex) {
                throw ServiceException.FAILURE("GetUserAmendingPrice.GetUserAmendingPrice:" + ex, ex);
            }
        }

        return jobj;
    }

    @Override
    public JSONObject getPermissionsforFilteringReportsData(HashMap<String, Object> requestParams) throws ServiceException {
        JSONObject jobj = new JSONObject();
        DataFilteringModule dataFilteringModule = null;
//         DataFilteringModule dataFilteringModule = (DataFilteringModule) get(DataFilteringModule.class, (String) requestParams.get("userid"));
        List<DataFilteringModule> dataFilteringModuleList = new ArrayList<DataFilteringModule>();
        if (requestParams.get("userid") != null && !requestParams.get("userid").toString().equals("") && requestParams.containsKey("companyid") && requestParams.get("companyid") != null && !requestParams.get("companyid").toString().equals("")) {
            dataFilteringModuleList = find("from DataFilteringModule where user.userID='" + requestParams.get("userid").toString() + "' and company.companyID='" + requestParams.get("companyid").toString() + "'");
        }

        if (!dataFilteringModuleList.isEmpty()) {
            dataFilteringModule = dataFilteringModuleList.get(0);
        }
        if (dataFilteringModule != null) {
            try {
                jobj.put("customerInvoiceCheck", dataFilteringModule.isCustomerInvoice());
                jobj.put("salesOrderCheck", dataFilteringModule.isSalesOrder());
                jobj.put("customerQuotationCheck", dataFilteringModule.isCustomerQuotation());
                jobj.put("deliveryOrderCheck", dataFilteringModule.isDeliveryOrder());
            } catch (JSONException ex) {
                throw ServiceException.FAILURE("GetUserAmendingPrice.GetUserAmendingPrice:" + ex, ex);
            }
        }

        return jobj;
 }
 
    public JSONObject DeleteUserPerm(HashMap<String, Object> requestParams) throws ServiceException {
        JSONObject response = new JSONObject();
        String mysqlQuery = "";
        String reportid = (requestParams.get("reportid")).toString();
        String userid = (requestParams.get("userid")).toString();
        // delete from PurchaseOrderDetail pod where pod.purchaseOrder.ID=? and pod.company.companyID=?    
        mysqlQuery = "delete from ReportRoleMap rep where rep.reportid.ID=? and rep.userid.userID=?";

        int numRows = executeUpdate(mysqlQuery, new Object[]{reportid, userid});
        try {
        response.put("count", numRows);
        String userName = "", reportName = "", roleName = "", loginUserName = "";
        if (numRows > 0) {
            if (requestParams.containsKey("reportid") && !StringUtil.isNullObject(requestParams.get("reportid"))) {
                ReportMaster rm = (ReportMaster) get(ReportMaster.class, (String) requestParams.get("reportid"));
                reportName = !StringUtil.isNullObject(rm) ? rm.getName() : "";
            }
            if (requestParams.containsKey("roleid") && !StringUtil.isNullObject(requestParams.get("roleid"))) {
                Rolelist ro = (Rolelist) get(Rolelist.class, (String) requestParams.get("roleid"));
                roleName = !StringUtil.isNullObject(ro) ? ro.getDisplayrolename() : "";
            }
            if (requestParams.containsKey("userid") && !StringUtil.isNullObject(requestParams.get("userid"))) {
                User user = (User) get(User.class, (String) requestParams.get("userid"));
                userName = !StringUtil.isNullObject(user) ? user.getUserLogin().getUserName() : "";
            }
            if (requestParams.containsKey("loginid")) {
                User user = (User) get(User.class, (String) requestParams.get("loginid"));
                loginUserName = !StringUtil.isNullObject(user) ? user.getUserLogin().getUserName() : "";
            } 
            
            JSONObject jobj = new JSONObject();
            jobj.put("loginUserName", loginUserName);
            jobj.put("userName", userName);
            jobj.put("roleName", roleName);
            jobj.put("reportName", reportName);
            jobj.put("reportID", reportid);
            response.put("auditLogJson", jobj);
        }
        } catch (JSONException ex){
            throw ServiceException.FAILURE("accInvoiceImpl.DeleteUserPerm:" + ex, ex);
        }
        return response;

    }

    public JSONArray getMissingAutoSequenceNumber(HashMap<String, Object> requestParams) throws ServiceException {
        JSONArray JArray = new JSONArray();
        int SeqCount = 0;
        int count = 0;
        try {
            String companyid = (String) requestParams.get("companyid");
            int moduleid = (Integer) requestParams.get("moduleid");
            String tablename = (String) requestParams.get("tablename");
            String orderby = (String) requestParams.get("orderby");
            String SequenceFormat = (String) requestParams.get("sequenceFormat");
            if (!StringUtil.isNullOrEmpty(SequenceFormat)) {
                String[] SeqnFormatArr = SequenceFormat.split(",");
                for (SeqCount = 0; SeqCount < SeqnFormatArr.length; SeqCount++) {
                    ArrayList params = new ArrayList();
                    ArrayList params1 = new ArrayList();
                    String MissingSqnSQL = "SELECT a.seqnumber+1 AS start, MIN(b.seqnumber) - 1 AS end "
                            + " FROM (select * from " + tablename + " where  company=? and seqformat=?) AS a, (select * from " + tablename + " where  company=?  and seqformat=?) AS b "
                            + " WHERE a.seqnumber < b.seqnumber "
                            + " GROUP BY a.seqnumber "
                            + "HAVING start < MIN(b.seqnumber)";

                    params.add(companyid);
                    params.add(SeqnFormatArr[SeqCount]);
                    params.add(companyid);
                    params.add(SeqnFormatArr[SeqCount]);
                    SequenceFormat SequenceObj = (SequenceFormat) get(SequenceFormat.class, SeqnFormatArr[SeqCount]);
                    Iterator itrMissingSqn = executeSQLQuery( MissingSqnSQL, params.toArray()).iterator();
                    // for tempoary deleted records (where deleteflag get mentain)
                 /*   String MinNum = "SELECT MIN(a.seqnumber) from " + tablename + " a where company=? and seqformat=? and deleteflag='F'";
                    params1.add(companyid);
                    params1.add(SeqnFormatArr[SeqCount]);
                    Iterator itrMinNum = executeSQLQuery( MinNum, params1.toArray()).iterator();
                    int min = 0, max = 0;
                    try {
                        min = Integer.parseInt(itrMinNum.next().toString());
                    } catch (NoSuchElementException nsee) {
                        min = 0;
                    } catch (NullPointerException npe) {
                        min = 0;
                    }      
                    // If all records are temporary deleted then to show all deleted records 
                    if (min == 0) {
                        String maxnum = "SELECT MAX(a.seqnumber) from " + tablename + " a where company=? and seqformat=? ";
                        Iterator itrMaxNum = executeSQLQuery( maxnum, params1.toArray()).iterator();
                        try {
                            max = Integer.parseInt(itrMaxNum.next().toString());
                        } catch (NoSuchElementException nsee) {
                            max = 0;
                            min = -1;
                        } catch (NullPointerException npe) {
                            max = 0;
                            min = -1;
                        }    
                        if(max>0)
                            min=max+1;
                    }
                    //
                         */
                    count = SequenceObj.getNumberofdigit();
                    /*if (min != SequenceObj.getStartfrom()) {
                        for (int i = SequenceObj.getStartfrom(); i < min; i++) {
                            String MissNumber = "";
                            JSONObject Json = new JSONObject();
                            MissNumber = MissNumber.format("%0" + count + "d", i);
                            Json.put("SequenceFormat", SequenceObj.getName());
                            Json.put("MissingNumber", SequenceObj.getPrefix() + MissNumber + SequenceObj.getSuffix());
                            JArray.put(Json);
                        }
                        }
                            */
                    // For getting Date in formatted form by Prefix/Suffix DateFormat which is selected in SequenceFormat
                    boolean datebeforePrefix = SequenceObj.isDateBeforePrefix();
                    boolean dateAfterSuffix = SequenceObj.isShowDateFormatAfterSuffix();
                    String selecteddateformat = StringUtil.isNullOrEmpty(SequenceObj.getDateformatinprefix()) ? "" : SequenceObj.getDateformatinprefix();
                    String selectedSuffixDate = StringUtil.isNullOrEmpty(SequenceObj.getDateFormatAfterSuffix()) ? "" : SequenceObj.getDateFormatAfterSuffix();
                    String datePrefix = "";
                    String dateSuffix = "";
                    if (datebeforePrefix || dateAfterSuffix) {
                        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
                        Date date = new Date();
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(date);
                        int year = cal.get(Calendar.YEAR);
                        int yy = Math.abs(year) % 100; // Get YY value from year
                        DecimalFormat mFormat = new DecimalFormat("00");
                        int month = cal.get(Calendar.MONTH) + 1;
                        int day = cal.get(Calendar.DAY_OF_MONTH);
                        if (datebeforePrefix) {
                            if (selecteddateformat.equalsIgnoreCase("YYYY")) {
                                datePrefix = "" + year;
                            } else if (selecteddateformat.equalsIgnoreCase("YYYYMM")) {
                                datePrefix = "" + year + mFormat.format(month);
                            } else if (selecteddateformat.equalsIgnoreCase("YY")) {
                                datePrefix = "" + mFormat.format(yy);
                            } else if (selecteddateformat.equalsIgnoreCase("YYMM")) {
                                datePrefix = "" + mFormat.format(yy) + mFormat.format(month);
                            } else if (selecteddateformat.equalsIgnoreCase("YYMMDD")) {
                                datePrefix = "" + mFormat.format(yy) + mFormat.format(month)+mFormat.format(day);
                            } else { //for YYYYMMDD this will default case
                                datePrefix = sdf.format(date);
                            }
                        }
                        if (dateAfterSuffix) {
                            if (selectedSuffixDate.equalsIgnoreCase("YYYY")) {
                                dateSuffix = "" + year;
                            } else if (selectedSuffixDate.equalsIgnoreCase("YYYYMM")) {
                                dateSuffix = "" + year + mFormat.format(month);
                            } else if (selectedSuffixDate.equalsIgnoreCase("YY")) {
                                dateSuffix = "" + mFormat.format(yy);
                            } else if (selectedSuffixDate.equalsIgnoreCase("YYMM")) {
                                dateSuffix = "" + mFormat.format(yy) + mFormat.format(month);
                            } else if (selectedSuffixDate.equalsIgnoreCase("YYMMDD")) {
                                dateSuffix = "" + mFormat.format(yy) + mFormat.format(month)+mFormat.format(day);
                            } else { //for YYYYMMDD this will default case
                                dateSuffix = sdf.format(date);
                            }
                        }
                    }
                    while (itrMissingSqn.hasNext()) {
                        Object[] oj = (Object[]) itrMissingSqn.next();
                        int start = oj[0] != null ? Integer.parseInt(oj[0].toString()) : 0;
                        int end = oj[1] != null ? Integer.parseInt(oj[1].toString()) : 0;
                        String MissNumber = "";
                        for (int i = start; i <= end; i++) {
                            JSONObject Json = new JSONObject();
                            MissNumber = MissNumber.format("%0" + count + "d", i);
                            Json.put("SequenceFormat", selecteddateformat+SequenceObj.getName()+selectedSuffixDate);
                            Json.put("MissingNumber", datePrefix + SequenceObj.getPrefix() + MissNumber + SequenceObj.getSuffix() + dateSuffix);
                            JArray.put(Json);
                        }
                    }

                }
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("getMissingAutoSequenceNumber : " + ex.getMessage(), ex);
        }
        return JArray;

    }
 
public KwlReturnObject getUsersByProductRevenue(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get("df");
            String startDate = (String) request.get("startdate");
            String endDate = (String) request.get("enddate");
            String start = (String) request.get("start");
            String limit = (String) request.get("limit");
            String productid = (String) request.get("productid");
            boolean isCustomer = (request.containsKey("isCustomer")) ? Boolean.parseBoolean((String) request.get("isCustomer")) : false;
            boolean isTopCustomers = (request.containsKey("isTopCustomers")) ? Boolean.parseBoolean((String) request.get("isTopCustomers")) : false;
            ArrayList params = new ArrayList();

            //Get Filter String
            String filter = "";
            ArrayList filter_names = new ArrayList(), filter_params = new ArrayList();
            if (request.containsKey("filter_names") && request.containsKey("filter_params")) {
                filter_names = (ArrayList) request.get("filter_names");
                filter_params = (ArrayList) request.get("filter_params");
                //if(filter_names.size() != filter_params.size()) { //throw "size not same" exception}
                filter = StringUtil.filterQuery(filter_names, "and");
                int ind = filter.indexOf("("); // Insert in/not in params in filter query.
                if (ind > -1) {
                    int index = Integer.valueOf(filter.substring(ind + 1, filter.indexOf(")")));
                    filter = filter.replaceAll("(" + index + ")", filter_params.get(index).toString());
                    filter_params.remove(index);
                }
            }

            String conditionSql = "";
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                conditionSql = " limit " + limit + " offset " + start;
            }
            conditionSql = filter + conditionSql;

            params.add((String) request.get(Constants.companyKey));
            params.add(productid);
            params.add(df.parse(startDate));
            params.add(df.parse(endDate));
//            params.add((String) request.get(Constants.companyKey));
//            params.add(productid);
//            params.add(df.parse(startDate));
//            params.add(df.parse(endDate));
            params.add((String) request.get(Constants.companyKey));
            params.add(productid);

            String mysqlQuery = "";
            if (isCustomer) {
                mysqlQuery = "select * from (select t.customer as customer,sum(t.productcount) as count,sum(t.amount) as amount  from "
                        + "(select sum(quantity) as productcount ,invoice.customer, invoice.id as id, "
//                        + "sum(inventory.quantity * (invoicedetails.rate/(if(invoice.isOpeningBalenceInvoice='1',invoice.exchangerateforopeningtransaction,journalentry.externalcurrencyrate)))) as amount from invoice "
                        + "sum(if(invoice.isopeningbalenceinvoice='1',invoice.originalopeningbalancebaseamount,inventory.quantity *(invoicedetails.rate/journalentry.externalcurrencyrate))) as amount from invoice "
                        + "inner join invoicedetails on invoice.id=invoicedetails.invoice "
                        + "inner join inventory on inventory.id=invoicedetails.id "
                        + "inner join journalentry on invoice.journalentry=journalentry.id "
                        + "inner join jedetail on jedetail.journalEntry=journalentry.id and jedetail.debit='T' "
                        + "where invoice.company=? and inventory.product=? and invoice.deleteflag='F' "
                        + "and inventory.deleteflag='F' and (journalentry.entrydate >=? and journalentry.entrydate <=?) group by invoice.customer "
                        + "union "
                        + //                            "select sum(quantity) as productcount ,customer, deliveryorder.id as id from deliveryorder "+
                        //                            "inner join dodetails on dodetails.deliveryorder=deliveryorder.id "+
                        //                            "inner join inventory on inventory.id=dodetails.id "+
                        //                            "where deliveryorder.company=? and inventory.product=? and invrecord='T' and deliveryorder.deleteflag='F' "+
                        //                            "and inventory.deleteflag='F' and (deliveryorder.orderdate >=? and deliveryorder.orderdate <=?) group by customer "+
                        //                            "union "+
                        "select -sum(inventory.quantity) as productcount ,invoice.customer, creditnote.id as id, "
                        + "sum(if(invoice.isopeningbalenceinvoice='1',invoice.originalopeningbalancebaseamount,inventory.quantity *(invoicedetails.rate/journalentry.externalcurrencyrate))) as amount from creditnote "
                        + "inner join cndetails on cndetails.creditNote=creditnote.id "
                        + "inner join inventory on inventory.id=cndetails.inventory "
                        + "inner join invoicedetails on invoicedetails.id=cndetails.invoiceRow "
                        + "inner join invoice on invoice.id=invoicedetails.invoice "
                        + "inner join journalentry on creditnote.journalentry=journalentry.id "
                        + "inner join jedetail on jedetail.journalEntry=journalentry.id and jedetail.debit='T' "
                        + "where  creditnote.company=? and inventory.product=? and creditnote.deleteflag='F' "
                        + "and inventory.deleteflag='F' group by invoice.customer "
                        + ") as t group by t.customer order by amount desc ) as test where test.amount!=0 ";
            } else if (!isCustomer) {
                mysqlQuery = "select * from (select t.vendor as vendor,sum(t.productcount) as count,sum(t.amount) as amount from "
                        + "(select sum(quantity) as productcount ,vendor,goodsreceipt.id as id, "
                        + "sum(if(goodsreceipt.isopeningbalenceinvoice='1',goodsreceipt.originalopeningbalancebaseamount,inventory.quantity *(grdetails.rate/journalentry.externalcurrencyrate))) as amount from goodsreceipt "
                        + "inner join grdetails on goodsreceipt.id=grdetails.goodsreceipt "
                        + "inner join inventory on inventory.id=grdetails.id "
                        + "inner join journalentry on goodsreceipt.journalentry=journalentry.id "
//                        + "inner join jedetail on jedetail.journalEntry=journalentry.id and jedetail.debit='T' "
                        + "where  goodsreceipt.company=? and inventory.product=? and goodsreceipt.deleteflag='F' "
                        + "and inventory.deleteflag='F' and (journalentry.entrydate >=? and journalentry.entrydate <=?) group by vendor "
                        + "union "
                        + //                            "select sum(quantity) as productcount ,vendor,grorder.id as id from grorder "+
                        //                            "inner join grodetails on grodetails.grorder=grorder.id "+
                        //                            "inner join inventory on inventory.id=grodetails.id "+
                        //                            "where  grorder.company=? and inventory.product=? and invrecord='T' and grorder.deleteflag='F' "+
                        //                            "and inventory.deleteflag='F' and (grorder.grorderdate >=? and grorder.grorderdate <=?) group by vendor "+
                        //                            "union "+
                        "select -sum(inventory.quantity) as productcount ,goodsreceipt.vendor,debitnote.id as id, "
                        + "-sum(inventory.quantity * (grdetails.rate/(if(goodsreceipt.isopeningbalenceinvoice='1',goodsreceipt.exchangerateforopeningtransaction,journalentry.externalcurrencyrate)))) as amount from debitnote "
                        + "inner join dndetails on dndetails.debitNote=debitnote.id "
                        + "inner join inventory on inventory.id=dndetails.inventory "
                        + "inner join grdetails on grdetails.id=dndetails.goodsReceiptRow "
                        + "inner join goodsreceipt on goodsreceipt.id=grdetails.goodsreceipt "
                        + "inner join journalentry on goodsreceipt.journalentry=journalentry.id "
                        + "inner join jedetail on jedetail.journalEntry=journalentry.id and jedetail.debit='T' "
                        + "where  debitnote.company=? and inventory.product=? and debitnote.deleteflag='F' "
                        + "and inventory.deleteflag='F' group by goodsreceipt.vendor "
                        + ") as t group by t.vendor order by amount desc ) as test where test.amount!=0 ";
            }
            if (isCustomer && !isTopCustomers) {
                params.add((String) request.get(Constants.companyKey));
                params.add((String) request.get(Constants.companyKey));
                params.add(productid);
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
//                params.add((String) request.get(Constants.companyKey));
//                params.add(productid);
//                params.add(df.parse(startDate));
//                params.add(df.parse(endDate));
                params.add((String) request.get(Constants.companyKey));
                params.add(productid);
                mysqlQuery = "select customer.id,ifnull(count,0), ifnull(amount,0) from customer "
                        + "left join ( " + mysqlQuery + " ) as tmp on customer.id=tmp.customer "
                        + "where customer.company=? and customer.id not in "
                        + "(select temp.customer from ( " + mysqlQuery + conditionSql + " ) as temp) order by amount asc ";
            } else if (!isCustomer && !isTopCustomers) {
                params.add((String) request.get(Constants.companyKey));
                params.add((String) request.get(Constants.companyKey));
                params.add(productid);
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
//                params.add((String) request.get(Constants.companyKey));
//                params.add(productid);
//                params.add(df.parse(startDate));
//                params.add(df.parse(endDate));
                params.add((String) request.get(Constants.companyKey));
                params.add(productid);
                mysqlQuery = "select vendor.id,ifnull(count,0),ifnull(amount,0) from vendor "
                        + "left join ( " + mysqlQuery + " ) as tmp on vendor.id=tmp.vendor "
                        + "where vendor.company=? and vendor.id not in "
                        + "(select temp.vendor from ( " + mysqlQuery + conditionSql + ") as temp) order by amount asc ";
            }
            list = executeSQLQuery( mysqlQuery + conditionSql, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getUsersByProducts:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getProductsByUsers(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get("df");
            String start = (String) request.get("start");
            String limit = (String) request.get("limit");
            String startDate = (String) request.get("startdate");
            String endDate = (String) request.get("enddate");
            String accid = (String) request.get("accid");
            boolean isProduct = (request.containsKey("isProduct")) ? Boolean.parseBoolean((String) request.get("isProduct")) : false;
            boolean isTopCustomers = (request.containsKey("isTopCustomers")) ? Boolean.parseBoolean((String) request.get("isTopCustomers")) : false;
            ArrayList params = new ArrayList();

            String conditionSql = "";
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                conditionSql = " limit " + limit + " offset " + start;
            }

            params.add((String) request.get(Constants.companyKey));
            params.add(accid);
            params.add(df.parse(startDate));
            params.add(df.parse(endDate));
            params.add((String) request.get(Constants.companyKey));
            params.add(accid);

            String mysqlQuery = "select * from (select t.product,sum(t.productcount) as count from "
                    + "(select sum(quantity) as productcount ,inventory.product as product,deliveryorder.id as id from deliveryorder "
                    + "inner join dodetails on dodetails.deliveryorder=deliveryorder.id "
                    + "inner join inventory on inventory.id=dodetails.id "
                    + "where  deliveryorder.company=? and deliveryorder.customer=? and deliveryorder.deleteflag='F' "
                    + "and inventory.deleteflag='F' and (deliveryorder.orderdate >=? and deliveryorder.orderdate <=?) group by product "
                    + "union "
                    + "select -sum(inventory.quantity) as productcount ,inventory.product as product,salesreturn.id as id from salesreturn "
                    + "inner join srdetails on srdetails.salesreturn=salesreturn.id "
                    + "inner join inventory on inventory.id=srdetails.id "
                    + "inner join dodetails on dodetails.id=srdetails.dodetails "
                    + "inner join deliveryorder on deliveryorder.id=dodetails.deliveryorder "
                    + "where  salesreturn.company=? and deliveryorder.customer=? and salesreturn.deleteflag='F' "
                    + "and inventory.deleteflag='F' group by product "
                    + ") as t group by t.product order by count desc ) as test where test.count!=0 ";

            if (isProduct && !isTopCustomers) {
                params.add((String) request.get(Constants.companyKey));
                params.add((String) request.get(Constants.companyKey));
                params.add(accid);
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
                params.add((String) request.get(Constants.companyKey));
                params.add(accid);
                mysqlQuery = "select product.id,ifnull(count,0) from product "
                        + "left join ( " + mysqlQuery + " )as tmp on product.id=tmp.product "
                        + "where product.company=? and product.deleteflag='F' and product.id not in "
                        + "(select temp.product from ( " + mysqlQuery + conditionSql + " ) as temp) order by count asc ";
            }
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();

            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getProductsByUsers:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getProductRevenueByUsers(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get("df");
            String start = (String) request.get("start");
            String limit = (String) request.get("limit");
            String startDate = (String) request.get("startdate");
            String endDate = (String) request.get("enddate");
            String accid = (String) request.get("accid");
            boolean isProduct = (request.containsKey("isProduct")) ? Boolean.parseBoolean((String) request.get("isProduct")) : false;
            boolean isTopCustomers = (request.containsKey("isTopCustomers")) ? Boolean.parseBoolean((String) request.get("isTopCustomers")) : false;
            ArrayList params = new ArrayList();

            String conditionSql = "";
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                conditionSql = " limit " + limit + " offset " + start;
            }

            params.add((String) request.get(Constants.companyKey));
            params.add(accid);
            params.add(df.parse(startDate));
            params.add(df.parse(endDate));
//            params.add((String) request.get(Constants.companyKey));
//            params.add(accid);
//            params.add(df.parse(startDate));
//            params.add(df.parse(endDate));
            params.add((String) request.get(Constants.companyKey));
            params.add(accid);

            String mysqlQuery = "select * from (select t.product,sum(t.productcount) as count,sum(t.amount) as amount from "
                    + "(select sum(quantity) as productcount ,inventory.product as product,invoice.id as id, "
                    + "sum(inventory.quantity *(invoicedetails.rate/journalentry.externalcurrencyrate)) as amount from invoice "
                    + "inner join invoicedetails on invoice.id=invoicedetails.invoice "
                    + "inner join inventory on inventory.id=invoicedetails.id "
                    + "inner join journalentry on invoice.journalentry=journalentry.id "
                    + "inner join jedetail on jedetail.journalEntry=journalentry.id and jedetail.debit='T' "
                    + "where  invoice.company=? and invoice.customer=? and invoice.deleteflag='F' "
                    + "and inventory.deleteflag='F' and (journalentry.entrydate >=? and journalentry.entrydate <=?) group by invoice.id ,product "
                    + "union "
                    + //                                "select sum(quantity) as productcount ,inventory.product as product,deliveryorder.id as id from deliveryorder "+
                    //                                "inner join dodetails on dodetails.deliveryorder=deliveryorder.id "+
                    //                                "inner join inventory on inventory.id=dodetails.id "+
                    //                                "where  deliveryorder.company=? and deliveryorder.customer=? and invrecord='T' and deliveryorder.deleteflag='F' "+
                    //                                "and inventory.deleteflag='F' and (deliveryorder.orderdate >=? and deliveryorder.orderdate <=?) group by product "+
                    //                                "union "+
                    "select -sum(inventory.quantity) as productcount ,inventory.product as product,creditnote.id as id, "
                    +"sum(inventory.quantity *(invoicedetails.rate/journalentry.externalcurrencyrate)) as amount from creditnote "
                    + "inner join cndetails on cndetails.creditNote=creditnote.id "
                    + "inner join inventory on inventory.id=cndetails.inventory "
                    + "inner join invoicedetails on invoicedetails.id=cndetails.invoiceRow "
                    + "inner join invoice on invoice.id=invoicedetails.invoice "
                    + "inner join journalentry on creditnote.journalentry=journalentry.id "
                    + "inner join jedetail on jedetail.journalEntry=journalentry.id and jedetail.debit='T' "
                    + "where  creditnote.company=? and invoice.customer=? and creditnote.deleteflag='F' "
                    + "and inventory.deleteflag='F' group by product, creditnote.id "
                    + ") as t group by t.product order by amount desc ) as test where test.amount!=0 ";

            if (isProduct && !isTopCustomers) {
                params.add((String) request.get(Constants.companyKey));
                params.add((String) request.get(Constants.companyKey));
                params.add(accid);
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
//                params.add((String) request.get(Constants.companyKey));
//                params.add(accid);
//                params.add(df.parse(startDate));
//                params.add(df.parse(endDate));
                params.add((String) request.get(Constants.companyKey));
                params.add(accid);
//                params.add((String) request.get(Constants.companyKey));
//                params.add(accid);
                mysqlQuery = "select product.id,ifnull(count,0),ifnull(amount,0) from product "
                        + "left join ( " + mysqlQuery + " )as tmp on product.id=tmp.product "
                        + "where product.company=? and product.deleteflag='F' and product.id not in "
                        + "(select temp.product from ( " + mysqlQuery + conditionSql + " ) as temp) order by amount asc ";
            }
            list = executeSQLQuery( mysqlQuery + conditionSql, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getProductsByUsers:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public int approvePendingInvoice(String qid, boolean isbilling, String companyid, String userid) throws ServiceException {
        int approvalLevel = 0;
        User user = (User) get(User.class, userid);

        if (isbilling) {
            BillingInvoice inv = (BillingInvoice) get(BillingInvoice.class, qid);
            approvalLevel = inv.getPendingapproval();
            if (inv.getPendingapproval() < inv.getApprovallevel()) {
                inv.setPendingapproval((inv.getPendingapproval() + 1));
            } else {
                inv.setPendingapproval(Constants.APPROVED);
            }

            inv.setApprover(user);
        } else {
            Invoice inv = (Invoice) get(Invoice.class, qid);
            approvalLevel = inv.getPendingapproval();
            if (inv.getPendingapproval() < inv.getApprovallevel()) {
                inv.setPendingapproval((inv.getPendingapproval() + 1));
            } else {
                inv.setPendingapproval(Constants.APPROVED);
            }
            inv.setApprover(user);
        }

//        String query = "update Invoice set pendingapproval = 0 where ID=? and company.companyID=?";
//        if(isbilling) {
//            query = "update BillingInvoice set pendingapproval = 0 where ID=? and company.companyID=?";
//        }
//        int numRows = executeUpdate( query, new Object[]{qid, companyid});
        return approvalLevel;//new KwlReturnObject(true, "Invoice has been updated successfully.", null, null, 1);
    }

    public int pendingApprovalInvoicesCount(String companyid) throws ServiceException {
        String query = "select * from ("
                + " select id from invoice where deleteflag = 'F' and pendingapproval != 0 and company = ? "
                + " union "
                + " select id from billinginvoice where deleteflag = 'F' and pendingapproval != 0 and company = ? "
                + ") as test";

        List list = executeSQLQuery( query, new Object[]{companyid, companyid});

        int count = list.size();

        return count;
    }

    public KwlReturnObject getUnInvoicedDeliveryOrders(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            Boolean isfavourite = false;
            boolean bulkInv = false;
            if (request.get("bulkInv") != null) {
                bulkInv = (Boolean) request.get("bulkInv");
            }
            
            if (request.get("isfavourite") != null) {
                isfavourite = Boolean.parseBoolean((String) request.get("isfavourite"));
            }
            boolean isprinted = false;
            if (request.get(Constants.MARKED_PRINTED) != null) {
                isprinted = Boolean.parseBoolean((String) request.get(Constants.MARKED_PRINTED));
            }
            //report id flag
            boolean isUnprintedDeliveryOrder = (request.get("isUnprintedDeliveryOrder") != null) ? Boolean.parseBoolean((String)request.get("isUnprintedDeliveryOrder")) : false;
            // UnInvoiced Record flag
            boolean isUnInvoiced = ((request.get("isUnInvoiced") != null) ? (Boolean) request.get("isUnInvoiced") : false);
            //flag for chart type
            String chartType = "";
            if(request.get(Constants.CHART_TYPE) != null) {
                chartType = (String) request.get(Constants.CHART_TYPE);
            }
            boolean isFixedAsset = false;
            boolean isLeaseFixedAsset = false;
            boolean isConsignment = false;
            if (request.containsKey("isFixedAsset") && request.get("isFixedAsset") != null) {
                isFixedAsset = Boolean.parseBoolean(request.get("isFixedAsset").toString());
            }
            if (request.containsKey("isLeaseFixedAsset") && request.get("isLeaseFixedAsset") != null) {
                isLeaseFixedAsset = (Boolean) request.get("isLeaseFixedAsset");
            }
            if (request.containsKey("isConsignment") && request.get("isConsignment") != null) {
                isConsignment = (Boolean) request.get("isConsignment");
            }
            ArrayList params = new ArrayList();

//            params.add((String) request.get(Constants.companyKey));

            String companyid = AccountingManager.getFilterInString((String) request.get(Constants.companyKey));
            String conditionSQL1 ="";
            if (bulkInv) {
                String customerCategoryid = "";
                if (request.containsKey(InvoiceConstants.customerCategoryid) && request.get(InvoiceConstants.customerCategoryid) != null) {
                    customerCategoryid = (String) request.get(InvoiceConstants.customerCategoryid);
                }
                if (!StringUtil.isNullOrEmpty(customerCategoryid) && !StringUtil.equal(customerCategoryid, "-1") && !StringUtil.equal(customerCategoryid, "All")) {
                    params.add(customerCategoryid);
                    conditionSQL1 += " and deliveryorder.customer in (select customerid from customercategorymapping where customercategory = ?)";
                }
            }
            String conditionSQL = " where deliveryorder.deleteflag='F' and deliveryorder.approvestatuslevel='11' "+ conditionSQL1 +" and deliveryorder.company in " + companyid + " ";
            String searchJoin = "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                for (int i = 0; i < 3; i++) {
                    params.add(ss + "%");
                }
                params.add("%" + ss + "%");

//                searchJoin = " inner join dodetails on dodetails.deliveryorder = deliveryorder.id ";
                conditionSQL += " and ( deliveryorder.donumber like ? or deliveryorder.memo like ? or customer.name like ? or dodetails.partno like ? )";

            }
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                conditionSQL += " and costcenter.id=?";
            }


            if (isfavourite) {
                conditionSQL += " and deliveryorder.favouriteflag=true ";
            }

            if (isFixedAsset) {
                conditionSQL += " and deliveryorder.isfixedassetdo=true ";
            } else {
                conditionSQL += " and deliveryorder.isfixedassetdo=false ";
            }
            if (isLeaseFixedAsset) {
                conditionSQL += " and deliveryorder.isleasedo=true ";
            } else {
                conditionSQL += " and deliveryorder.isleasedo=false ";
            }
            if (isConsignment) {
                conditionSQL += " and deliveryorder.isconsignment='T' ";
            } else {
                conditionSQL += " and deliveryorder.isconsignment='F' ";
            }            
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);

            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and (deliveryorder.orderdate >=? and deliveryorder.orderdate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            
            String currencyfilterfortrans = "";
            currencyfilterfortrans = request.get("currencyfilterfortrans")!=null ? (String) request.get("currencyfilterfortrans") : "";
            if (!StringUtil.isNullOrEmpty(currencyfilterfortrans)) {
                conditionSQL += " and deliveryorder.currency = ? ";
                params.add(currencyfilterfortrans);
            }
            
            String customerId = request.get(CCConstants.REQ_customerId)!= null ? (String) request.get(CCConstants.REQ_customerId) : "";
            if (!StringUtil.isNullOrEmpty(customerId)) {
                params.add(customerId);
                conditionSQL += " and customer.id=?";
            }
            
            String moduleid = "";
            if (request.containsKey(Constants.moduleid) && request.get(Constants.moduleid) != null) {
                moduleid = request.get(Constants.moduleid).toString();
            }
            
            //Search Customerwise.
            String newcustomerid = "";
            if (request.containsKey(InvoiceConstants.newcustomerid) && request.get(InvoiceConstants.newcustomerid) != null) {
                newcustomerid = (String) request.get(InvoiceConstants.newcustomerid);
            }
            if (!StringUtil.isNullOrEmpty(newcustomerid)) {
                params.add(newcustomerid);
                conditionSQL += " and deliveryorder.customer = ? ";
            }
            
            //Search Customer Categorywise.
            String customerCategoryid = "";
            if (request.containsKey(InvoiceConstants.customerCategoryid) && request.get(InvoiceConstants.customerCategoryid) != null) {
                customerCategoryid = (String) request.get(InvoiceConstants.customerCategoryid);
            }
            if (!StringUtil.isNullOrEmpty(customerCategoryid) && !StringUtil.equal(customerCategoryid, "-1") && !StringUtil.equal(customerCategoryid, "All")) {
                params.add(customerCategoryid);
                conditionSQL += "and customer.id in (select customerid from customercategorymapping where customercategory = ?)";
            }     
            
            //Search Productwise.
            String productid = "";
            if (request.containsKey(Constants.productid) && request.get(Constants.productid) != null) {
                productid = (String) request.get(Constants.productid);
            }
            if (!StringUtil.isNullOrEmpty(productid)) {
                params.add(productid);
                conditionSQL += " and dodetails.product = ? ";
            }
            
            //Search Product Categorywise.
            String productCategoryid = "";
            if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.get(Constants.productCategoryid);
            }
            if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                params.add(productCategoryid);
                conditionSQL += " and dodetails.product in (select productid from productcategorymapping where productcategory = ?) ";
            }
            
            //Advance Search
            String joinString = "";
            String appendCase = "and";
            String mySearchFilterString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            String searchDefaultFieldSQL = "";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) { //Advance Search Case
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         * Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        tableArray.add("customer"); //this table array used to identified wheather join exists on table or not                         
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, moduleid, tableArray, filterConjuctionCriteria);
                        searchJoin += map.containsKey("searchjoin") ? map.get("searchjoin") : "";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchJoin += " left join dolinking on dolinking.docid=deliveryorder.id and dolinking.sourceflag = 1 ";
                    }
                    if (customSearchFieldArray.length() > 0) {   //Advance search case for Custome field
                        JSONObject tempjson = new JSONObject();
                        tempjson.put(Constants.root, customSearchFieldArray);
                        request.put(Constants.Searchjson, tempjson.toString());
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
//                        mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                        String innerJoinOnDetailTable = " inner join dodetails on dodetails.deliveryorder=deliveryorder.id ";
                        boolean isInnerJoinAppend = false;
                        if (mySearchFilterString.contains("deliveryordercustomdata")) {
                            joinString = " inner join deliveryordercustomdata on deliveryordercustomdata.deliveryOrderId=deliveryorder.accdeliveryordercustomdataref ";
                        }
                        if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "dodetailscustomdata");
                            joinString += innerJoinOnDetailTable + " left join dodetailscustomdata on dodetails.id=dodetailscustomdata.dodetailsid ";
                            isInnerJoinAppend = true;
                        }
                        if (mySearchFilterString.contains("CustomerCustomData")) {
                            joinString += " left join customercustomdata  on customercustomdata.customerId=deliveryorder.customer ";
                            mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "customercustomdata");
                        }
                        if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "dodetailproductcustomdata");
                            joinString += (isInnerJoinAppend ? "" : innerJoinOnDetailTable) + " left join dodetailproductcustomdata on dodetails.id=dodetailproductcustomdata.doDetailID ";
                            isInnerJoinAppend = true;
                        }
                        if (mySearchFilterString.contains("accproductcustomdata")) {
                            if (isInnerJoinAppend) {
                                joinString += " left join product on product.id=dodetails.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                            } else {
                                joinString += innerJoinOnDetailTable + " left join product on product.id=dodetails.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";                               
                            }

                        }
                        StringUtil.insertParamAdvanceSearchString1(params, tempjson.toString());
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            String orderBy = "";
            String groupBy = "";
            String[] stringSort = null;
            String sort_Col = "";
            String mysqlQuery = "";
            
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                stringSort = columSortDeliveryOrder(Col_Name, Col_Dir);
                orderBy += stringSort[0];
                sort_Col += stringSort[1].replace("deliveryorder.", "deliveryorder.");

            } else if (StringUtil.equalIgnoreCase(chartType, Constants.PIE_CHART) && isUnprintedDeliveryOrder) {
                sort_Col = "COUNT(dono) AS docount";
                orderBy = " order by docount DESC";                
                groupBy = " group by custname ";
            } else {
                orderBy += " order by orderdate desc";
                sort_Col += " ,deliveryorder.orderdate as orderdate ";
            }
            if (StringUtil.equalIgnoreCase(chartType, Constants.PIE_CHART) && isUnprintedDeliveryOrder) {
                mysqlQuery = "select " + sort_Col + ", custname from ( select distinct deliveryorder.id, deliveryorder.donumber as dono, customer.name as custname "
                        + "  from deliveryorder as deliveryorder "
                        + " inner join dodetails as dodetails on dodetails.deliveryorder = deliveryorder.id "
                        + " left join invoicedetails as ivd on dodetails.cidetails = ivd.id "
                        + " left join invoice as iv on ivd.invoice = iv.id "
                        + " inner join customer on customer.id = deliveryorder.customer "
                        + " left join costcenter on costcenter.id = deliveryorder.costcenter " + conditionSQL + mySearchFilterString
                        + " and iv.invoicenumber IS NULL ";
                
                if (bulkInv) {
                    mysqlQuery += " and deliveryorder.isopeninsi ='T' ) a " + orderBy;
                } else {
                    mysqlQuery += "and not exists "
                            + "        (     "
                            + "            select null "
                            + "            from invoicedetails as ivd2 "
                            + "            inner join invoice as iv2 on ivd2.invoice = iv2.id "
                            + "            left join dodetails as dodetails2 on ivd2.deliveryorderdetail = dodetails2.id "
                            + "            left join deliveryorder as deliveryorder2 on  dodetails2.deliveryorder = deliveryorder2.id     "
                            + "            where iv2.company in " + companyid + " and iv2.deleteflag='F' and deliveryorder2.id = deliveryorder.id) "
                            + " ) a "
                            + groupBy + orderBy;
                }
            } else {
                mysqlQuery = " select * from ( select distinct(deliveryorder.id), 'false' as withoutinventory " + sort_Col
                        + "  from deliveryorder 		   as deliveryorder "
                        + " inner join dodetails        as dodetails   on dodetails.deliveryorder = deliveryorder.id "
                        + " left join invoicedetails    as ivd    on dodetails.cidetails = ivd.id "
                        + " left join invoice     		as iv     on ivd.invoice = iv.id "
                        + " inner join customer on customer.id = deliveryorder.customer "
                        + " left join costcenter on costcenter.id = deliveryorder.costcenter " + conditionSQL + mySearchFilterString
                        + //                    +" and ( iv.invoicenumber IS NULL OR iv.invoicenumber not in "
                        //		                        +" ( "
                        //		                        +"	select iv2.invoicenumber "
                        //								+"			from invoicedetails     as ivd2 "
                        //								+"			inner join invoice     	as iv2     on ivd2.invoice = iv2.id "
                        //								+"			left join dodetails     as dod2    on ivd2.deliveryorderdetail = dod2.id "
                        //								+"			left join deliveryorder as dor2    on  dod2.deliveryorder = dor2.id "
                        //								+"	where iv2.company in " + companyid + " and iv2.deleteflag='F' "
                        //							    +" ) "
                        " and iv.invoicenumber IS NULL ";
                if (bulkInv) {
                    mysqlQuery += " and deliveryorder.isopeninsi ='T' ) a " + orderBy;
                } else if (isUnInvoiced) {
                    /**
                     * while creating DO, partially linked with SI those should
                     * be shown in UnInvoiced Records.
                     */
                    mysqlQuery += "and not exists "
                            + "        (     "
                            + "             select null  from dodetails     as dodetails3             "
                            + "             left join invoicedetails as invd3 on  dodetails3.cidetails = invd3.id "
                            + "             inner join invoice as iv3 on invd3.invoice = iv3.id            "
                            + "             left join deliveryorder as deliveryorder3    on  dodetails3.deliveryorder = deliveryorder3.id                 "
                            + "             where iv3.company in   "+ companyid +"   and iv3.deleteflag='F'  and deliveryorder3.id = deliveryorder.id )"
                            + " ) a "
                            + " where a.id not in "
                            + "        (    "
                            + "             select do.id from deliveryorder do "
                            + "             inner join dolinking dol on do.id = dol.docid  "
                            + "             where do.company in " + companyid
                            + "             and dol.sourceflag = 0 "
                            + "             and (dol.moduleid = 2 or dol.moduleid = 29)"
                            + "             and (do.isopeninsi = 'F'  "//
                            + "             OR do.isopeninsr = 'F') "//
                            + "        )    "
                            + orderBy;
                } else {
                    mysqlQuery += "and not exists "
                            + "        (     "
                        + "            select null "
                        + "            from invoicedetails     as ivd2 "
                        + "            inner join invoice         as iv2     on ivd2.invoice = iv2.id "
                        + "            left join dodetails     as dodetails2    on ivd2.deliveryorderdetail = dodetails2.id "
                        + "            left join deliveryorder as deliveryorder2    on  dodetails2.deliveryorder = deliveryorder2.id     "
                        + "            where iv2.company in  " + companyid + "  and iv2.deleteflag='F'  and deliveryorder2.id = deliveryorder.id) "
                + " ) a "
                + orderBy;
                }
            }
               
//            System.out.println("getUnInvoicedDeliveryOrders -- mysqlQuery:"+mysqlQuery);

            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
                if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                    list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getUnInvoicedDeliveryOrders:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    @Override
    public KwlReturnObject updateDeliveryOrderDetails(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            InvoiceDetail invoiceDetail = (InvoiceDetail) requestParams.get("invoiceDetail");
            DeliveryOrderDetail deliveryOrderDetail = invoiceDetail.getDeliveryOrderDetail();
            deliveryOrderDetail.setCidetails(invoiceDetail);
            saveOrUpdate(deliveryOrderDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateDeliveryOrderDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    public KwlReturnObject getMonthlySalesReport(HashMap<String, Object> request, java.util.Date startdate, java.util.Date enddate) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);

            ArrayList params = new ArrayList();
            String query = "select customer.name as customername, billinginvoicedetails.productdetail as productname, "
                    + "year(billinginvoice.duedate) as year, DATE_FORMAT(billinginvoice.duedate,'%b') as month, sum(billinginvoicedetails.amount) as amount "
                    + "from customer, billinginvoice, billinginvoicedetails, company "
                    + "where customer.id = billinginvoice.customer and billinginvoice.id = billinginvoicedetails.billinginvoice "
                    + "and billinginvoice.company = ? and billinginvoice.duedate >= ? and billinginvoice.duedate <= ? "
                    + "group by year, month "
                    + "UNION "
                    + "select customer.name as customername, product.name as productname,year(invoice.duedate) as year, DATE_FORMAT(invoice.duedate,'%b') as month, "
                    + "sum(inventory.quantity*invoicedetails.rate) as amount "
                    + "from inventory, invoicedetails, invoice,customer,product "
                    + "where invoicedetails.invoice = invoice.id and invoicedetails.id = inventory.id and invoice.customer = customer.id "
                    + "and product.id = inventory.product and invoice.company = ? and invoice.duedate >= ? and invoice.duedate <= ? "
                    + "group by year, month ";
            params.add(companyid);
            params.add(startdate);
            params.add(enddate);
            params.add(companyid);
            params.add(startdate);
            params.add(enddate);

            list = executeSQLQuery( query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    @Override
    public KwlReturnObject updateSOLinkflag(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            SalesOrder salesOrder = (SalesOrder) requestParams.get("salesOrder");
            if(requestParams.containsKey("value")){
                 int num = Integer.parseInt((String) requestParams.get("value"));
                salesOrder.setLinkflag(num);
            }
            if(requestParams.containsKey("isSOOpen")){
                boolean isSOOpen = Boolean.parseBoolean(requestParams.get("isSOOpen").toString());
                salesOrder.setIsopen(isSOOpen);
            }
            /*---SO is manually Closed when SO->SI---- */
            if (requestParams.containsKey("isdropshipchecked")) {
                
                salesOrder.setIsSOClosed(true);
            }
            
            
            saveOrUpdate(salesOrder);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateSOLinkflag:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    public KwlReturnObject getSalesorder(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String companyid = (String) requestParams.get("companyid");
        // params.add(requestParams.get("linkflag"));
//        String sqlQuery = "select id from salesorder where company=? and linkflag= ? and deleteflag='F'";
        String sqlQuery = "select distinct sod.salesOrder from InvoiceDetail inv inner join inv.salesorderdetail sod  where inv.company.companyID=?";
        list = executeQuery( sqlQuery, new Object[]{companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject updateInvoiceLinkflag(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            Invoice invoice = (Invoice) requestParams.get("invoice");
            if(requestParams.containsKey("isOpenDO")){
                boolean isSOOpen = Boolean.parseBoolean(requestParams.get("isOpenDO").toString());
                invoice.setIsOpenDO(isSOOpen);
            }
            if(requestParams.containsKey("isOpenSR")){
                boolean isSOOpen = Boolean.parseBoolean(requestParams.get("isOpenSR").toString());
                invoice.setIsOpenSR(isSOOpen);
            }
            saveOrUpdate(invoice);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateInvoiceLinkflag:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }


    public KwlReturnObject getDeliveryorder(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String sqlQuery = "select dord.id from deliveryorder dord inner join dodetails dod on dod.deliveryorder=dord.id  inner join invoicedetails invd on invd.deliveryorderdetail=dod.id where dord.company=? and dord.deleteflag='F'";

        list = executeSQLQuery( sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getDeliveryorderForSR(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String sqlQuery = "select dord.id from deliveryorder dord inner join dodetails dod on dod.deliveryorder=dord.id  inner join srdetails srd on srd.dodetails=dod.id where dord.company=? and dord.deleteflag='F'";

        list = executeSQLQuery( sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
   public KwlReturnObject getSalesInvoiceForSR(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String sqlQuery = "select inv.id from invoice inv  where inv.company=? and inv.deleteflag='F'";

        list = executeSQLQuery( sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getGoodsReceiptOrder(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String sqlQuery = "select gord.id from grorder gord inner join grodetails grd on grd.grorder=gord.id  inner join prdetails prd on prd.grdetails=grd.id where gord.company=? and gord.deleteflag='F'";
        list = executeSQLQuery( sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
      public KwlReturnObject getGoodsReceipt(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String sqlQuery = "select grp.id from goodsreceipt grp inner join grdetails grd on grd.goodsreceipt=grp.id  inner join prdetails prd on prd.videtails=grd.id where grp.company=? and grp.deleteflag='F'";
        list = executeSQLQuery( sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    public KwlReturnObject getCompanyList(String[] subdomainArray) throws ServiceException {

        List list = new ArrayList();
        String sqlQuery = "select companyid from company where deleteflag=0";
        String condition = "";

        if (subdomainArray != null) {
            for (int i = 0; i < subdomainArray.length; i++) {
                condition += " " + "'" + subdomainArray[i] + "'" + " ,";
            }
            condition = condition.substring(0, condition.length() - 2);
            condition = " and subdomain in (" + condition + ")";
        }
        sqlQuery += condition;
        list = executeSQLQuery( sqlQuery);
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject updateQuotationLinkflag(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            Quotation quotation = (Quotation) requestParams.get("quotation");
            int num = Integer.parseInt((String) requestParams.get("value"));
            Boolean isopen =requestParams.get("isOpen")!=null?(Boolean)requestParams.get("isOpen"): false;
            quotation.setLinkflag(num);
            quotation.setIsopen(isopen);
            saveOrUpdate(quotation);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateQuotationLinkflag:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
    
      @Override
    public KwlReturnObject updateDeliveryOrderStatus(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            DeliveryOrder deliveryorder = (DeliveryOrder) requestParams.get("deliveryOrder");
            Boolean isopen =requestParams.get("isOpen")!=null?(Boolean)requestParams.get("isOpen"): false;
            Boolean isFromSalesReturn =requestParams.get("isFromSalesReturn")!=null?(Boolean)requestParams.get("isFromSalesReturn"): false;
            if(isFromSalesReturn){
              deliveryorder.setIsOpenInSR(isopen);   
            }else{
              deliveryorder.setIsOpenInSI(isopen);  
            }
            
            saveOrUpdate(deliveryorder);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateDeliveryOrderStatus:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
      
      public KwlReturnObject updateIsJobWorkClose(String rowId,String companyId) throws ServiceException {
        String query = "update in_interstoretransfer set isjobworkclose=? where id=? and company=?";
        int numRows = executeSQLUpdate(query, new Object[]{'F',rowId,companyId});
        return new KwlReturnObject(true, "", null, null, numRows);
    }
      
    @Override
    public KwlReturnObject updateSalesInvoiceStatus(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            Invoice invoice = (Invoice) requestParams.get("invoice");
            Boolean isopen =requestParams.get("isOpen")!=null?(Boolean)requestParams.get("isOpen"): false;
            invoice.setIsOpenSR(isopen);  
             saveOrUpdate(invoice);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateDeliveryOrderStatus:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
    @Override
    public KwlReturnObject updateGoodsReceiptOrderStatus(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String query = "update GoodsReceiptOrder set isOpenInPR = ? where ID=? and company.companyID=?";
            Boolean isopen = requestParams.get("isOpen") != null ? (Boolean) requestParams.get("isOpen") : false;
            String goodsReceiptOrderID = (String) requestParams.get("goodsReceiptOrderID");
            String companyid = (String) requestParams.get("companyid");
            int numRows = executeUpdate( query, new Object[]{isopen, goodsReceiptOrderID, companyid});

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateDeliveryOrderStatus:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
    
    @Override
    public KwlReturnObject updateGoodsReceiptStatus(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String query = "update GoodsReceipt set isOpenInPR = ? where ID=? and company.companyID=?";
            Boolean isopen = requestParams.get("isOpen") != null ? (Boolean) requestParams.get("isOpen") : false;
            String goodsReceiptID = (String) requestParams.get("goodsReceiptID");
            String companyid = (String) requestParams.get("companyid");
            int numRows = executeUpdate( query, new Object[]{isopen, goodsReceiptID, companyid});

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateGoodsReceiptStatus:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
    
    @Override
    public KwlReturnObject getDeliveryOrderDFromSOD(String sodid, String companyid) throws ServiceException {
        List list = new ArrayList();       
        try {
            String query = "select dodetails.id from dodetails inner join deliveryorder on dodetails.deliveryorder=deliveryorder.id "
                    + "where  deliveryorder.company=? and deliveryorder.deleteflag='F' and dodetails.sodetails=? "
                    + "union "
                    + "select dodetails.id from dodetails inner join deliveryorder on dodetails.deliveryorder=deliveryorder.id "
                    + "where  deliveryorder.company=? and deliveryorder.deleteflag='F' and dodetails.cidetails in "
                    + " ( select invoicedetails.id from invoicedetails inner join invoice on invoicedetails.invoice=invoice.id "
                    + "where invoice.company=? and invoice.deleteflag='F' and invoicedetails.salesorderdetail=? )";
            list = executeSQLQuery( query, new Object[]{companyid, sodid, companyid, companyid, sodid});           
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDeliveryOrderDFromSOD:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public double getDeliveryOrderQuantityFromSOD(String sodid, String companyid, boolean inSelectedUOM) throws ServiceException {
        List list = new ArrayList();
        double count=0;
        try {
            String selectQuantity=inSelectedUOM ? "dodetails.deliveredQuantity":"dodetails.baseuomdeliveredquantity";
//            String query = "select sum(t.quantity)  from (select sum("+selectQuantity +") as quantity from dodetails inner join deliveryorder on dodetails.deliveryorder=deliveryorder.id "
//                    + "where  deliveryorder.company=? and deliveryorder.deleteflag='F' and dodetails.sodetails=? "
//                    + "union "
//                    + "select sum("+selectQuantity +") as quantity from dodetails inner join deliveryorder on dodetails.deliveryorder=deliveryorder.id "
//                    + "where  deliveryorder.company=? and deliveryorder.deleteflag='F' and dodetails.cidetails in "
//                    + " ( select invoicedetails.id from invoicedetails inner join invoice on invoicedetails.invoice=invoice.id "
//                    + "where invoice.company=? and invoice.deleteflag='F' and invoicedetails.salesorderdetail=? )) as t";
//            list = executeSQLQuery( query, new Object[]{companyid, sodid, companyid, companyid, sodid});
            String hql="select sum("+selectQuantity+") from DeliveryOrderDetail dodetails inner join dodetails.deliveryOrder doorder"
                    +" where doorder.company.companyID=? and doorder.deleted=? and dodetails.sodetails.ID=?";
            list = executeQuery( hql, new Object[]{companyid, false, sodid});
            Double totalCnt = 0d;
            if (list != null && !list.isEmpty() && list.get(0) != null) {
                totalCnt = (Double) list.get(0);
            }
            hql="select sum("+selectQuantity+") from DeliveryOrderDetail dodetails "
                    + "inner join dodetails.deliveryOrder doorder inner join dodetails.cidetails cidetails inner join cidetails.invoice invoice"
                    +" where invoice.company.companyID=? and invoice.deleted=? and cidetails.salesorderdetail.ID=?"
                    +" and doorder.company.companyID=? and doorder.deleted=?";
            list = executeQuery( hql, new Object[]{companyid, false, sodid,companyid,false});
             if (list != null && !list.isEmpty() && list.get(0) !=null){
                totalCnt += (Double) list.get(0);
            }
            count = totalCnt.doubleValue();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDeliveryOrderDFromSOD:" + ex.getMessage(), ex);
        }
        return count;
    }
    
    @Override
    public double getDODetailQuantityFromProduct(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        double count=0;
        try {
            ArrayList params = new ArrayList();
            String productId = (String) requestParams.get("productId");
            String companyid = (String) requestParams.get("companyid");
            Date startDate = (Date) requestParams.get(Constants.REQ_startdate);
            Date endDate = (Date) requestParams.get(Constants.REQ_enddate);
            String compareUOMId = (String) requestParams.get("compareUOMId");
            boolean inSelectedUOM = (Boolean) requestParams.get("inSelectedUOM");
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            
            String field1 = "", field2 = "", joinquery = "", uomquery = "", datequery = "";
            if(inSelectedUOM){
                field1 = "dodetails.deliveredQuantity";
                field2 = "sod.quantity";
            }else{
                field1 = "dodetails.baseuomdeliveredquantity";
                field2 = "sod.baseuomquantity";
            }
            
            params.add(companyid);
            params.add(productId);
            params.add(companyid);
            if(inSelectedUOM){
                joinquery = "inner join uom on uom.id=sodetails.uom ";
                uomquery = " and sodetails.uom=? ";
                params.add(compareUOMId);
            }
            if(startDate != null  && endDate != null){
                datequery=" and (Date(so.orderdate) >=? and Date(so.orderdate) <=?) ";
                params.add(startDate);
                params.add(endDate);
            }
            String query1 = "(select if(sum("+ field1 +") is not null, sum("+ field1 +"), 0) as deliveredquantity, sodetails.id as sodetails "
                + "from dodetails "
                + "inner join deliveryorder on deliveryorder.id=dodetails.deliveryorder "
                    + "inner join sodetails on sodetails.id=dodetails.sodetails "
                    + "inner join salesorder as so on so.id=sodetails.salesorder "
                    + joinquery
                + "where deliveryorder.company=? and deliveryorder.deleteflag=false "
                    + "and sodetails.product=? and sodetails.company=? "
                    + "and so.deleteflag=false and so.isopeningbalenceso=false  and so.isconsignment=false "
                    + "and so.istemplate!=2  and so.approvestatuslevel=11 "
                    + uomquery + datequery
                + " group by dodetails.sodetails "
                + ") ";
            
            params.add(companyid);
            params.add(productId);
            params.add(companyid);
            params.add(companyid);
            if(inSelectedUOM){
                params.add(compareUOMId);
            }
            if(startDate != null  && endDate != null){
                datequery=" and (Date(so.orderdate) >=? and Date(so.orderdate) <=?) ";
                params.add(startDate);
                params.add(endDate);
            }
            String query2 = "(select if(sum("+ field1 +") is not null, sum("+ field1 +"), 0) as deliveredquantity, sodetails.id as sodetails "
                + "from dodetails "
                + "inner join deliveryorder on deliveryorder.id=dodetails.deliveryorder "
                + "inner join invoicedetails on invoicedetails.id=dodetails.cidetails "
                + "inner join invoice on invoice.id=invoicedetails.invoice "
                    + "inner join sodetails on sodetails.id=invoicedetails.salesorderdetail "
                    + "inner join salesorder as so on so.id=sodetails.salesorder "
                    + joinquery
                + "where invoice.company=? and invoice.deleteflag=false "
                    + "and sodetails.product=? and deliveryorder.company=? and deliveryorder.deleteflag=false "
                    + "and sodetails.company=? and so.deleteflag=false and so.isopeningbalenceso=false  and so.isconsignment=false "
                    + "and so.istemplate!=2 and so.approvestatuslevel=11 "
                    + uomquery + datequery
                + " group by dodetails.sodetails "
                + ") ";
            
            Double totalCnt = 0d;
            String query = "select sum(if(if(table2.deliveredquantity is not null, table2.deliveredquantity, 0) < "+ field2 +", "
                    + field2 +"-if(table2.deliveredquantity is not null, table2.deliveredquantity, 0), 0)) as qty from sodetails as sod left join ( "
                        + "select if(sum(deliveredquantity) is not null, sum(deliveredquantity), 0) as deliveredquantity, sodetails "
                        + "from ( " + query1 + "union all " + query2 + ")table1 group by sodetails "
                    + ")table2 on table2.sodetails=sod.id INNER JOIN salesorder so ON so.id=sod.salesorder where sod.product=? and so.isopen='T' ";
            params.add(productId);
            if(startDate != null  && endDate != null){
                query +=" and (Date(so.orderdate) >=? and Date(so.orderdate) <=?) and sod.balanceqty>0 and so.issoclosed='F' and sod.islineitemclosed='F' and so.deleteflag='F' ";
                params.add(startDate);
                params.add(endDate);
            }
            list = executeSQLQuery(query, params.toArray());
            if (list != null && !list.isEmpty() && list.get(0) !=null){
                totalCnt += (Double) list.get(0);
            }
            count = totalCnt.doubleValue();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDODetailQuantityFromProduct:" + ex.getMessage(), ex);
        }
        return count;
    }

    @Override
     public double getDODetailQuantityForProduct(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        double count=0;
        try {
            ArrayList params = new ArrayList();
            String productId = (String) requestParams.get("productId");
            String companyid = (String) requestParams.get("companyid");
            Date startDate = (Date)requestParams.get(Constants.REQ_startdate);
            Date endDate = (Date) requestParams.get(Constants.REQ_enddate);
            String compareUOMId = (String) requestParams.get("compareUOMId");
            boolean inSelectedUOM = (Boolean) requestParams.get("inSelectedUOM");
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            
           
           
            String conditionalQuery="";
            String conditionalValue="";
            
            if(inSelectedUOM){
                conditionalQuery = "inner join uom on uom.id=sd.uom ";
                conditionalValue = " and sd.uom=? ";
            }
            if (startDate != null && endDate != null) {
                conditionalValue += " and (Date(s.orderdate) >=? and Date(s.orderdate) <=?) ";
            }
            
            Double totalCnt = 0d;

            String query = " SELECT if(SUM(baseuomquantity) is not null and SUM(baseuomquantity)>=0 , SUM(baseuomquantity) , 0) AS qty FROM ( "
                    + " SELECT SUM(sd.baseuomquantity) AS baseuomquantity  FROM salesorder s "
                    + " INNER JOIN sodetails sd ON sd.salesorder=s.id " + conditionalQuery
                    + " WHERE s.company=?  AND sd.product=? " + conditionalValue
                    + " AND s.issoclosed='F' and s.approvestatuslevel=11  AND  s.istemplate!=2 and s.isconsignment=false "
                    + " AND s.deleteflag=false "
                    + " AND sd.islineitemclosed='F'"
                    + " UNION ALL"
		    + " SELECT -sum(dodetails.baseuomdeliveredquantity) AS baseuomquantity  FROM salesorder s "
                    + " INNER JOIN sodetails sd ON sd.salesorder=s.id "
                    + " INNER join dodetails on sd.id=dodetails.sodetails "
                    + " INNER JOIN deliveryorder on deliveryorder.id=dodetails.deliveryorder " + conditionalQuery
                    + " WHERE s.company=?  AND sd.product=? " + conditionalValue
                    + " AND s.issoclosed='F' and s.approvestatuslevel=11 AND  s.istemplate!=2 and s.isconsignment=false "
                    + " AND s.deleteflag=false "
                    + " UNION ALL"
                    + " SELECT -SUM(dodetails.baseuomdeliveredquantity) AS baseuomquantity FROM invoice inv "
                    + " INNER JOIN invoicedetails invd ON inv.id=invd.invoice "
                    + " inner join dodetails ON dodetails.cidetails =invd.id"
                    + " inner join sodetails sd on sd.id=invd.salesorderdetail "
                    + " inner join salesorder as s on s.id=sd.salesorder " + conditionalQuery
                    + " where s.company=? AND sd.product=? " + conditionalValue
                    + " and s.deleteflag=false and inv.deleteflag=false and s.issoclosed='F' "
                    + " and s.isopeningbalenceso=false  and s.isconsignment=false and s.istemplate!=2 "
                    + " and s.approvestatuslevel=11 "
                    + " UNION ALL "
                    + " SELECT SUM(srd.returnquantity) AS baseuomquantity FROM srdetails srd "
                    + " inner JOIN salesreturn as sr on sr.id = srd.salesreturn "
                    + " inner JOIN dodetails as dod on dod.id = srd.cidetails "
                    + " inner JOIN sodetails as sd on dod.sodetails = sd.id "
                    + " inner join salesorder as s on s.id=sd.salesorder " + conditionalQuery
                    + " where s.company=? AND sd.product=? " + conditionalValue
                    + " and s.deleteflag=false and sr.deleteflag=false and s.issoclosed='F' "
                    + " and s.isopeningbalenceso=false  and s.isconsignment=false and s.istemplate!=2 "
                    + " and s.approvestatuslevel=11 "
                    + " UNION ALL "
                    + " SELECT SUM(srd.returnquantity) AS baseuomquantity FROM srdetails srd "
                    + " inner JOIN salesreturn as sr on sr.id = srd.salesreturn "
                    + " inner JOIN dodetails as dod on dod.id = srd.cidetails "
                    + " inner JOIN invoicedetails as invd on dod.cidetails = invd.id "
                    + " inner JOIN sodetails as sd on invd.salesorderdetail = sd.id "
                    + " inner join salesorder as s on s.id=sd.salesorder " + conditionalQuery
                    + " where s.company=? AND sd.product=? " + conditionalValue
                    + " and s.deleteflag=false and sr.deleteflag=false and s.issoclosed='F' "
                    + " and s.isopeningbalenceso=false  and s.isconsignment=false and s.istemplate!=2 "
                    + " and s.approvestatuslevel=11) AS tb";
            
            params.add(companyid);
            params.add(productId);
            if (inSelectedUOM) {
                params.add(compareUOMId);
            }
            if(startDate != null  && endDate != null){
                params.add(startDate);
                params.add(endDate);
            }
            params.add(companyid);
            params.add(productId);
            if (inSelectedUOM) {
                params.add(compareUOMId);
            }
            if(startDate != null  && endDate != null){
                params.add(startDate);
                params.add(endDate);
            }
            params.add(companyid);
            params.add(productId);
            if (inSelectedUOM) {
                params.add(compareUOMId);
            }
            if(startDate != null  && endDate != null){
                params.add(startDate);
                params.add(endDate);
            }
            params.add(companyid);
            params.add(productId);
            if (inSelectedUOM) {
                params.add(compareUOMId);
            }
            if(startDate != null  && endDate != null){
                params.add(startDate);
                params.add(endDate);
            }
            
            params.add(companyid);
            params.add(productId);
            if (inSelectedUOM) {
                params.add(compareUOMId);
            }
            if(startDate != null  && endDate != null){
                params.add(startDate);
                params.add(endDate);
            }
    
            list = executeSQLQuery(query, params.toArray());
            if (list != null && !list.isEmpty() && list.get(0) !=null){
                totalCnt += (Double) list.get(0);
            }
            count = totalCnt.doubleValue();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDODetailQuantityForProduct:" + ex.getMessage(), ex);
        }
        return count;
    }
    
    public KwlReturnObject getDeliveryOrderFromInvoice(String ciid, String companyid) throws ServiceException {
        List list = new ArrayList();
        try {
            String query = " select distinct donumber from ( "
                    + " select deliveryorder.donumber from dodetails inner join deliveryorder on dodetails.deliveryorder=deliveryorder.id "
                    + " inner join invoicedetails on dodetails.cidetails=invoicedetails.id "
                    + " where  deliveryorder.company=? and deliveryorder.deleteflag='F' and invoicedetails.invoice = ? "
                    + " union "
                    + " select deliveryorder.donumber from dodetails inner join deliveryorder on dodetails.deliveryorder=deliveryorder.id "
                    + " inner join invoicedetails on dodetails.id=invoicedetails.deliveryorderdetail "
                    + " where  deliveryorder.company=? and deliveryorder.deleteflag='F' and invoicedetails.invoice = ? "
                    + " ) as temp ";
            list = executeSQLQuery( query, new Object[]{companyid, ciid, companyid, ciid});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDeliveryOrderDFromSOD:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getDeliveryOrderDFromSODOptimized(String sodid, String companyid) throws ServiceException {
        List list = new ArrayList();
        List list1 = new ArrayList();
        Set<String> listSet = new HashSet<String>();
        try {
            String hql="select dodetails.ID from DeliveryOrderDetail dodetails inner join dodetails.deliveryOrder doorder"
                    +" where doorder.company.companyID=? and doorder.deleted=? and dodetails.sodetails.ID=?";
            list1 = executeQuery( hql, new Object[]{companyid, false, sodid});
            if(list1!=null && !list1.isEmpty()){
                listSet.addAll(list1);
            }
            hql="select dodetails.ID from DeliveryOrderDetail dodetails "
                    + "inner join dodetails.deliveryOrder doorder inner join dodetails.cidetails cidetails inner join cidetails.invoice invoice"
                    +" where invoice.company.companyID=? and invoice.deleted=? and cidetails.salesorderdetail.ID=?"
                    +" and doorder.company.companyID=? and doorder.deleted=?";
            list = executeQuery( hql, new Object[]{companyid, false, sodid,companyid,false});
            if (list1 != null && !list1.isEmpty()) {
                listSet.addAll(list1);
            }
//            String hql = "select dodetails.ID from DeliveryOrderDetail dodetails inner join dodetails.deliveryOrder doorder where doorder.company.companyID=? and doorder.deleted=? and dodetails.sodetails.ID=? ";
//            list = executeQuery( hql, new Object[]{companyid, false, sodid});
//            listSet.addAll(list);
//            String hql11 = "select dodetails.ID "
//                    + " from DeliveryOrderDetail dodetails "
//                    + " inner join dodetails.deliveryOrder doorder "
//                    + " inner join dodetails.cidetails cidetails "
//                    //                    + " inner join grdetails.goodsReceipt goodsreceipt"+
//                    + " where doorder.company.companyID=? and cidetails.invoice.deleted=? and dodetails.sodetails.ID=?";
//            list = executeQuery( hql11, new Object[]{companyid, false, sodid});
            if(listSet!=null && !listSet.isEmpty()){
                list.addAll(listSet);    
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDeliveryOrderDFromSOD:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject saveInvoiceTermMap(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            InvoiceTermsMap termmap = new InvoiceTermsMap();

            if (dataMap.containsKey("termamount")) {
                termmap.setTermamount((Double) dataMap.get("termamount"));
            }
            if (dataMap.containsKey("termtaxamount")) {
                termmap.setTermtaxamount((Double) dataMap.get("termtaxamount"));
            }
            if (dataMap.containsKey("termtaxamountinbase")) {
                termmap.setTermtaxamountinbase((Double) dataMap.get("termtaxamountinbase"));
            }
            if (dataMap.containsKey("termAmountExcludingTax")) {
                termmap.setTermAmountExcludingTax((Double) dataMap.get("termAmountExcludingTax"));
            }
            if (dataMap.containsKey("termAmountExcludingTaxInBase")) {
                termmap.setTermAmountExcludingTaxInBase((Double) dataMap.get("termAmountExcludingTaxInBase"));
            }
            if (dataMap.containsKey("termamountinbase")) {
                termmap.setTermamountinbase((Double) dataMap.get("termamountinbase"));
            }
            if (dataMap.containsKey("termtax") && dataMap.get("termtax")!=null) {   //SDP-13535
                Tax termtax = (Tax) get(Tax.class, (String) dataMap.get("termtax"));
                termmap.setTermtax(termtax);
            }
            if (dataMap.containsKey("termpercentage")) {
                termmap.setPercentage((Double) dataMap.get("termpercentage"));
            }
            if (dataMap.containsKey("invoice")) {
                Invoice invoice = (Invoice) get(Invoice.class, (String) dataMap.get("invoice"));
                termmap.setInvoice(invoice);
            }
            if (dataMap.containsKey("term")) {
                InvoiceTermsSales term = (InvoiceTermsSales) get(InvoiceTermsSales.class, (String) dataMap.get("term"));
                termmap.setTerm(term);
            }
            if (dataMap.containsKey("userid")) {
                User userid = (User) get(User.class, (String) dataMap.get("userid"));
                termmap.setCreator(userid);
            }
            if (dataMap.containsKey("creationdate")) {
                termmap.setCreatedOn(((Date) dataMap.get("creationdate")).getTime());
            }
            if (dataMap.containsKey("invoicedetail") && !StringUtil.isNullOrEmpty((String) dataMap.get("invoicedetail")) ) {
                InvoiceDetail invoiceDetail = (InvoiceDetail) get(InvoiceDetail.class, (String) dataMap.get("invoicedetail"));
                termmap.setInvoicedetails(invoiceDetail);
            }
            saveOrUpdate(termmap);
            list.add(termmap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveInvoiceTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    @Override
    public KwlReturnObject updateInvoiceTermMap(HashMap<String, Object> dataMap) throws ServiceException{
        List list = new ArrayList();
        try {
            InvoiceTermsMap termmap = new InvoiceTermsMap();

            if (dataMap.containsKey("invoicetermid")) {
                termmap = (InvoiceTermsMap) get(InvoiceTermsMap.class, (String) dataMap.get("invoicetermid"));
            }
            if(termmap != null){
                if (dataMap.containsKey("termamount")) {
                    termmap.setTermamount((Double) dataMap.get("termamount"));
                }
                if (dataMap.containsKey("termamountinbase")) {
                    termmap.setTermamountinbase((Double) dataMap.get("termamountinbase"));
                }
                if (dataMap.containsKey("termtaxamount")) {
                    termmap.setTermtaxamount((Double) dataMap.get("termtaxamount"));
                }
                if (dataMap.containsKey("termtaxamountinbase")) {
                    termmap.setTermtaxamountinbase((Double) dataMap.get("termtaxamountinbase"));
                }
                if (dataMap.containsKey("termAmountExcludingTax")) {
                    termmap.setTermAmountExcludingTax((Double) dataMap.get("termAmountExcludingTax"));
                }
                if (dataMap.containsKey("termAmountExcludingTaxInBase")) {
                    termmap.setTermAmountExcludingTaxInBase((Double) dataMap.get("termAmountExcludingTaxInBase"));
                }
                if (dataMap.containsKey("termtax") && dataMap.get("termtax") != null) {
                    Tax termtax = (Tax) get(Tax.class, (String) dataMap.get("termtax"));
                    termmap.setTermtax(termtax);
                }
//                if (dataMap.containsKey("termpercentage")) {
//                    termmap.setPercentage((Double) dataMap.get("termpercentage"));
//                }
//                if (dataMap.containsKey("vendorQuotationID") && vendorQuotation != null) {
//                    termmap.setVendorQuotation(vendorQuotation);
//                }
//                if (dataMap.containsKey("term")) {
//                    InvoiceTermsSales term = (InvoiceTermsSales) get(InvoiceTermsSales.class, (String) dataMap.get("term"));
//                    termmap.setTerm(term);
//                }
//                if (dataMap.containsKey("userid")) {
//                    User userid = (User) get(User.class, (String) dataMap.get("userid"));
//                    termmap.setCreator(userid);
//                }
//                if (dataMap.containsKey("createdon")) {
//                    termmap.setCreatedOn(((Date) dataMap.get("creationdate")).getTime());
//                }
                saveOrUpdate(termmap);
                list.add(termmap);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.saveInvoiceTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    public KwlReturnObject saveSalesReturnTermMap(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            SalesReturnTermsMap termmap = new SalesReturnTermsMap();

            if (dataMap.containsKey("salesReturnID")) {
                SalesReturn salesreturn = (SalesReturn) get(SalesReturn.class, (String) dataMap.get("salesReturnID"));
                termmap.setSalesreturn(salesreturn);
            }
            if (dataMap.containsKey("term")) {
                InvoiceTermsSales term = (InvoiceTermsSales) get(InvoiceTermsSales.class, (String) dataMap.get("term"));
                termmap.setTerm(term);
            }
            if (dataMap.containsKey("termamount")) {
                termmap.setTermamount((Double) dataMap.get("termamount"));
            }
            if (dataMap.containsKey("termtaxamount")) {
                termmap.setTermtaxamount((Double) dataMap.get("termtaxamount"));
            }
            if (dataMap.containsKey("termtaxamountinbase")) {
                termmap.setTermtaxamountinbase((Double) dataMap.get("termtaxamountinbase"));
            }
            if (dataMap.containsKey("termAmountExcludingTax")) {
                termmap.setTermAmountExcludingTax((Double) dataMap.get("termAmountExcludingTax"));
            }
            if (dataMap.containsKey("termAmountExcludingTaxInBase")) {
                termmap.setTermAmountExcludingTaxInBase((Double) dataMap.get("termAmountExcludingTaxInBase"));
            }
            if (dataMap.containsKey("termamountinbase")) {
                termmap.setTermamountinbase((Double) dataMap.get("termamountinbase"));
            }
            if (dataMap.containsKey("termtax") && dataMap.get("termtax")!=null) {
                Tax termtax = (Tax) get(Tax.class, (String) dataMap.get("termtax"));
                termmap.setTermtax(termtax);
            }
            if (dataMap.containsKey("termpercentage")) {
                termmap.setPercentage((Double) dataMap.get("termpercentage"));
            }
            if (dataMap.containsKey("userid")) {
                User userid = (User) get(User.class, (String) dataMap.get("userid"));
                termmap.setCreator(userid);
            }
            if (dataMap.containsKey("creationdate")) {
                termmap.setCreatedOn(((Date) dataMap.get("creationdate")).getTime());
            }
            saveOrUpdate(termmap);
            list.add(termmap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveSalesReturnTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject getInvoiceTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String invoiceID = hm.get("invoiceid").toString();
            String query = "from InvoiceTermsMap where invoice.ID = ?";
            list = executeQuery( query, new Object[]{invoiceID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoiceTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject saveInvoiceDetailTermMap(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            InvoiceDetailTermsMap termmap = new InvoiceDetailTermsMap();

            if (dataMap.containsKey("termamount")) {
                termmap.setTermamount((Double) dataMap.get("termamount"));
            }
            if (dataMap.containsKey("termpercentage")) {
                termmap.setPercentage((Double) dataMap.get("termpercentage"));
            }
            if (dataMap.containsKey("invoiceDetail")) {
                termmap.setInvoicedetail((InvoiceDetail)dataMap.get("invoiceDetail"));
            }
            if (dataMap.containsKey("term")) {
                LineLevelTerms term = (LineLevelTerms) get(LineLevelTerms.class, (String) dataMap.get("term"));
                termmap.setTerm(term);
            }
            if (dataMap.containsKey("assessablevalue")) {
                termmap.setAssessablevalue((Double) dataMap.get("assessablevalue"));
            }
            if (dataMap.containsKey("userid")) {
                User userid = (User) get(User.class, (String) dataMap.get("userid"));
                termmap.setCreator(userid);
            }
            if (dataMap.containsKey("creationdate")) {
                termmap.setCreatedOn(((Date) dataMap.get("creationdate")).getTime());
            }
            if (dataMap.containsKey("purchasevalueorsalevalue")) {
                termmap.setPurchaseValueOrSaleValue((Double) dataMap.get("purchasevalueorsalevalue"));
            }
            if (dataMap.containsKey("deductionorabatementpercent")) {
                termmap.setDeductionOrAbatementPercent((Double) dataMap.get("deductionorabatementpercent"));
            }
            if (dataMap.containsKey("taxtype")) {
                termmap.setTaxType((Integer) dataMap.get("taxtype"));
            }
            if (dataMap.containsKey("isDefault")) {
                termmap.setIsGSTApplied(Boolean.parseBoolean(dataMap.get("isDefault").toString()));
            }
             if (dataMap.containsKey("productentitytermid")) {
                EntitybasedLineLevelTermRate term = (EntitybasedLineLevelTermRate) get(EntitybasedLineLevelTermRate.class, (String) dataMap.get("productentitytermid"));
                termmap.setEntitybasedLineLevelTermRate(term);
            }
            saveOrUpdate(termmap);
            list.add(termmap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.saveInvoiceDetailTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    @Override
    public KwlReturnObject saveSupplierExciseDetailMap(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            SupplierExciseDetails supMap = new SupplierExciseDetails();

            if (dataMap.containsKey("goodsreceiptid")) {
                supMap.setGoodsReceiptDetailsId(dataMap.get("goodsreceiptid").toString());
            }
            if (dataMap.containsKey("invoiceDetail")) {
                supMap.setInvoicedetails((InvoiceDetail)dataMap.get("invoiceDetail"));
            }
            if (dataMap.containsKey("actualQuantity")) {
                supMap.setActualQuantity((Integer)dataMap.get("quantityUtilized")); // Actual quantity must be same as utilized qty at save time
            }
            if (dataMap.containsKey("quantityUtilized")) {
                supMap.setUtilizedQuantity((Integer)dataMap.get("quantityUtilized"));
            }
            if (dataMap.containsKey("vendorid")) {
                Vendor vendor = (Vendor) get(Vendor.class, (String) dataMap.get("vendorid"));
                supMap.setVendor(vendor);
            }
            if (dataMap.containsKey("natureofpurchaseId")) {
                MasterItem natureofpurchaseId = (MasterItem) get(MasterItem.class, (String) dataMap.get("natureofpurchaseId"));
                supMap.setNatureOfPurchase(natureofpurchaseId);
            }
            if (dataMap.containsKey("company")) {
                supMap.setCompany((Company)dataMap.get("company"));
            }
            
            saveOrUpdate(supMap);
            list.add(supMap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.saveInvoiceDetailTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getSupplierDetailsMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        List param = new ArrayList();
        try {
            param.add(hm.get("InvoiceDetailid"));
            param.add(hm.get("companyid"));
            String query = "from SupplierExciseDetails sed where sed.invoicedetails.id=? and sed.company.companyID=? ";
            list = executeQuery( query,param.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoicedetailTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
        
    @Override    
    public KwlReturnObject getInvoicedetailTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        List param = new ArrayList();
        try {
            String query = "from InvoiceDetailTermsMap ";
            String condition="";
            String orderby=" order by term.termSequence ";
            if(hm.containsKey("InvoiceDetailid") && hm.get("InvoiceDetailid") != null){
                String InvoiceDetailid = hm.get("InvoiceDetailid").toString();
                condition += " invoicedetail.ID = ? ";
                param.add(InvoiceDetailid);
            }
            if(hm.containsKey("Invoiceid") && hm.get("Invoiceid") != null){
                String Invoiceid = hm.get("Invoiceid").toString();
                condition += " invoicedetail.invoice.ID = ? ";
                param.add(Invoiceid);
            }
            if(hm.containsKey("termtype") && hm.get("termtype") != null){
                if(!StringUtil.isNullOrEmpty(condition)){
                    condition +=" and ";
                }
                condition += " term.termType = ? ";
                param.add(hm.get("termtype"));
            }
            if(!StringUtil.isNullOrEmpty(condition)){
                query += " where "+condition ;
            }
            if(hm.containsKey("orderbyadditionaltax") && hm.get("orderbyadditionaltax") != null){
                orderby += " , term.isAdditionalTax ";
            }
            orderby += " ASC ";
            query += orderby;
            list = executeQuery( query,param.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoicedetailTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override    
    public KwlReturnObject getGenricInvoicedetailTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        List param = new ArrayList();
        try {
            /*
             SELECT sum(rdt.assessablevalue),sum(rdt.termamount) , t.account,t.termType FROM InvoiceDetailTermsMap idt JOIN idt.term t JOIN idt.invoicedetail ids JOIN ids.invoice inv
             
             */
            String groupby="GROUP BY t.account";
            String query = "SELECT sum(idt.assessablevalue),sum(idt.termamount) , t.account.ID , t.termType FROM InvoiceDetailTermsMap idt JOIN idt.term t JOIN idt.invoicedetail ids ";
            String condition ="";
            if (hm.containsKey("termtypeArry")) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }
                
                List listTerm= (List) hm.get("termtypeArry");
                StringBuilder commaSepValueBuilder = new StringBuilder();

                //Looping through the list
                for (int i = 0; i < listTerm.size(); i++) {
                    //append the value into the builder
                    commaSepValueBuilder.append(listTerm.get(i));

                    //if the value is not the last element of the list
                    //then append the comma(,) as well
                    if (i != listTerm.size() - 1) {
                        commaSepValueBuilder.append(", ");
                    }
                }
                
                condition += " t.termType in ( "+commaSepValueBuilder +" ) ";
            }
            
            if (hm.containsKey("termtype")) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }
                condition+="t.termType = ? ";
                param.add(hm.get("termtype"));
            }
            if (hm.containsKey("termpercentage") && hm.get("termpercentage")!=null) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }
                condition+="t.percentage = ? ";
                param.add(Double.parseDouble(hm.get("termpercentage").toString()));
            }
            
            if (hm.containsKey("invoicedetail")) {
                condition += !StringUtil.isNullOrEmpty(condition) ? " AND " : " ";
                condition+="ids.ID= ? ";
                param.add(hm.get("invoicedetail"));
            }
            
            if (hm.containsKey("invoiceid")) {
                query +=" JOIN ids.invoice inv ";
                condition += !StringUtil.isNullOrEmpty(condition) ? " AND " : " ";
                condition+="inv.ID= ? ";
                param.add(hm.get("invoiceid"));
            }
            query+=" WHERE "+condition + groupby;
            
            list = executeQuery( query,param.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoicedetailTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public Map<String, List<InvoiceTermsMap>> getInvoiceTermMapList(List<String> invoiceIDLIST) {
        Map<String, List<InvoiceTermsMap>> invoiceMap = new HashMap<String, List<InvoiceTermsMap>>();
        if (invoiceIDLIST != null && !invoiceIDLIST.isEmpty()) {
            try {
                List li = null;
                String query = "select  invtermmap.invoice.ID, invtermmap "
                        + " from InvoiceTermsMap invtermmap "
                        + " where invtermmap.invoice.ID in (:invoiceIDList)";
                List<List> values = new ArrayList<List>();
                values.add(invoiceIDLIST);
                List<Object[]> results = executeCollectionQuery( query, Collections.singletonList("invoiceIDList"), values);
                
                if (results != null) {
                    for (Object[] result : results) {
                        String invID = (String) result[0];
                        if (invoiceMap.containsKey(invID)) {
                            li = invoiceMap.get(invID);
                        } else {
                            li = new ArrayList<InvoiceTermsMap>();
                        }
                        li.add((InvoiceTermsMap) result[1]);
                        invoiceMap.put(invID, li);
                    }
                }
            } catch (ServiceException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return invoiceMap;
    }

    @Override
    public KwlReturnObject deleteInvoiceTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String invoiceID = hm.get("invoiceid").toString();
            String query = "delete from invoicetermsmap where invoice = ?";
//            list = executeQuery( query, new Object[]{invoiceID});
            executeSQLUpdate( query, new Object[]{invoiceID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.deleteInvoiceTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject deleteSalesReturnTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String salesReturnId = hm.get("salesreturnid").toString();
            String query = "delete from salesreturntermsmap where salesreturn = ?";
            executeSQLUpdate( query, new Object[]{salesReturnId});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.deleteSalesReturnTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject deletePurchaseReturnTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String purchasereturnId = hm.get("purchasereturnid").toString();
            String query = "delete from purchasereturntermsmap where purchasereturn = ?";
            executeSQLUpdate( query, new Object[]{purchasereturnId});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.deletePurchaseReturnTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public boolean deleteInvoiceDetailsTermMap(String invoicedetailId) throws ServiceException {
        boolean result = false;
        try {
            String query = "delete from InvoiceDetailTermsMap where invoicedetail.ID = ? ";
            int numrow= executeUpdate(query, new Object[]{invoicedetailId});
            if(numrow>0){
                result=true;
            }
        } catch (Exception ex) {
           Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }

    @Override
    public KwlReturnObject updateDeliveryOrderCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String deliveryOrderRefId = (String) requestParams.get("accadeliveryordercustomdataref");
            DeliveryOrder deliveryOrder = (DeliveryOrder) get(DeliveryOrder.class, deliveryOrderRefId);
            if (requestParams.containsKey("accadeliveryordercustomdataref")) {
                DeliveryOrderCustomData deliveryOrderCustomData = null;
                deliveryOrderCustomData = (DeliveryOrderCustomData) get(DeliveryOrderCustomData.class, (String) requestParams.get("accadeliveryordercustomdataref"));
                deliveryOrder.setDeliveryOrderCustomData(deliveryOrderCustomData);
            }
            saveOrUpdate(deliveryOrder);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateDeliveryOrderCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);

    }

    @Override
    public KwlReturnObject updateSalesReturnCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String salesReturnRefId = (String) requestParams.get("accsalesreturncustomdataref");
            SalesReturn salesReturn = (SalesReturn) get(SalesReturn.class, salesReturnRefId);
            if (requestParams.containsKey("accsalesreturncustomdataref")) {
                SalesReturnCustomData salesReturnCustomData = null;
                salesReturnCustomData = (SalesReturnCustomData) get(SalesReturnCustomData.class, (String) requestParams.get("accsalesreturncustomdataref"));
                salesReturn.setSalesReturnCustomData(salesReturnCustomData);
            }
            saveOrUpdate(salesReturn);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateSalesReturnCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public KwlReturnObject updateDODetailsCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String deliveryOrderRefId = (String) requestParams.get("dodetailscustomdataref");
            DeliveryOrderDetail deliveryOrderDetail = (DeliveryOrderDetail) get(DeliveryOrderDetail.class, deliveryOrderRefId);
            if (requestParams.containsKey("dodetailscustomdataref")) {
                DeliveryOrderDetailCustomData deliveryOrderDetailCustomData = null;
                deliveryOrderDetailCustomData = (DeliveryOrderDetailCustomData) get(DeliveryOrderDetailCustomData.class, (String) requestParams.get("dodetailscustomdataref"));
                deliveryOrderDetail.setDeliveryOrderDetailCustomData(deliveryOrderDetailCustomData);
            }
            saveOrUpdate(deliveryOrderDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateDeliveryOrderCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public KwlReturnObject updateSRDetailsCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String deliveryOrderRefId = (String) requestParams.get("srdetailscustomdataref");
            SalesReturnDetail salesReturnDetail = (SalesReturnDetail) get(SalesReturnDetail.class, deliveryOrderRefId);
            if (requestParams.containsKey("srdetailscustomdataref")) {
                SalesReturnDetailCustomData salesReturnDetailCustomData = null;
                salesReturnDetailCustomData = (SalesReturnDetailCustomData) get(SalesReturnDetailCustomData.class, (String) requestParams.get("srdetailscustomdataref"));
                salesReturnDetail.setSalesReturnDetailCustomData(salesReturnDetailCustomData);
            }
            saveOrUpdate(salesReturnDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateDeliveryOrderCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public KwlReturnObject updateSRDetailsProductCustomData(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            String salesReturnRefId = (String) requestParams.get("srdetailscustomdataref");
            SalesReturnDetail salesReturnDetail = (SalesReturnDetail) get(SalesReturnDetail.class, salesReturnRefId);
            if (requestParams.containsKey("srdetailscustomdataref")) {
                SalesReturnDetailProductCustomData salesReturnDetailProductCustomData = null;
                salesReturnDetailProductCustomData = (SalesReturnDetailProductCustomData) get(SalesReturnDetailProductCustomData.class, salesReturnRefId);
                salesReturnDetail.setSalesReturnDetailProductCustomData(salesReturnDetailProductCustomData);
            }
            saveOrUpdate(salesReturnDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateSRDetailsProductCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }

    @Override
    public boolean isInvoiceUsedInCreditNote(String invoiceId, String companyId) throws ServiceException {
        boolean isInvoiceUsedInCreditNote = false;
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
        String query = "select * from cndetails cn where cn.invoice=? and cn.company=?";

        List list = executeSQLQuery( query, params.toArray());
        int count = 0;
        if (list != null && !list.isEmpty()) {
            count = list.size();
        }
        if (count > 0) {
            isInvoiceUsedInCreditNote = true;
        }
        return isInvoiceUsedInCreditNote;
    }

    @Override
    public KwlReturnObject getCreditNoteLinkedWithInvoice(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
        String query = "select distinct creditNote,invoicelinkdate from cndetails cn where cn.invoice=? and cn.company=?";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    
    @Override
    public KwlReturnObject getDebitNoteLinkedWithInvoice(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(companyId);
        params.add(invoiceId);
        String query = "select distinct dnd.debitNote from dndetailsgst dnd, invoicedetails invd , invoice inv where inv.id = invd.invoice and invd.id=dnd.cidetails and dnd.company =? and inv.id=?";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getCreditNoteForOverchargeLinkedWithInvoice(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(companyId);
        params.add(invoiceId);
        String query = "select distinct cndgst.creditNote from cndetailsgst cndgst, invoicedetails invd , invoice inv where inv.id = invd.invoice and invd.id=cndgst.invoicedetail and cndgst.company =? and inv.id=?";
        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getPaymentReceiptsLinkedWithInvoice(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
//        String query = "select distinct receipt from receiptdetails rd where rd.invoice=? and rd.company=?"; //ERP-12699
        String query = "select distinct receipt from receiptdetails rd inner join receipt r on rd.receipt = r.id where rd.invoice=? and rd.company=?";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getSalesReturnLinkedWithInvoice(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
        String query = "select distinct salesreturn from srdetails srd INNER JOIN invoicedetails ind on srd.cidetails=ind.id "
                + "and ind.invoice=? and srd.company=?";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getPurchaseInvoiceLinkedWithNote(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
        String query = "select gr.id,dnd.grlinkdate from goodsreceipt gr inner join dndetails dnd on gr.id = dnd.goodsreceipt "
                + "where dnd.debitnote= ? and dnd.company = ? ";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getCreditNoteLinkedWithDebitNote(String debitNoteId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(debitNoteId);
        params.add(companyId);
        params.add(debitNoteId);
        params.add(companyId);
        String query = "select cn.id,dnd.grlinkdate from creditnote cn inner join dndetails dnd on cn.id = dnd.creditnoteid "
                + "where dnd.debitnote= ? and cn.company = ? "
                +" union "
                +" select cn.id,cnd.invoicelinkdate from creditnote cn inner join cndetails cnd on cn.id = cnd.creditNote "
                + "where cnd.debitnoteid= ? and cn.company = ? ";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getSalesInvoiceLinkedWithNote(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
        String query = "select inv.id,cnd.invoicelinkdate from invoice inv inner join cndetails cnd on inv.id = cnd.invoice "
                + "where cnd.creditNote= ? and cnd.company = ? ";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getDebitNoteLinkedWithCreditNote(String creditNoteId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(creditNoteId);
        params.add(companyId);
        
        params.add(creditNoteId);
        params.add(companyId);
        String query = "select dn.id,cnd.invoicelinkdate  from debitnote dn inner join cndetails cnd on dn.id = cnd.debitnoteid "
                + "where cnd.creditNote= ? and dn.company = ? "
                + " union "
                +" select dn.id,dnd.grlinkdate from debitnote dn inner join dndetails dnd on dn.id = dnd.debitNote "
                + "where dnd.creditnoteid= ? and dn.company = ? ";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
   /* @Override
    public KwlReturnObject getSalesReturnLinkedWithDO(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
        String query = "select distinct salesreturn from srdetails srd INNER JOIN dodetails ind on srd.dodetails=ind.id "
                + "and ind.deliveryorder=? and srd.company=?";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getSILinkedWithDO(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
        String query = "select distinct invoice from invoicedetails ind inner join dodetails dod on ind.deliveryorderdetail = dod.id "
                + "where dod.deliveryorder= ? and dod.company=?";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
*/
    @Override
    public boolean isInvoicehasDepreciatedAsset(String invoiceId, String companyId) throws ServiceException {
        boolean isInvoicehasDepreciatedAsset = false;
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
        String query = "SELECT Distinct(adp.id) FROM invoice inv INNER JOIN invoicedetails invd ON "
                + "invd.invoice=inv.id INNER JOIN assetdetailsinvdetailmapping amp ON "
                + "amp.invoicedetailid=invd.id INNER JOIN assetdepreciationdetail adp ON "
                + "adp.assetdetail=amp.assetdetails WHERE inv.id=? AND amp.moduleid=2 AND inv.company=?";

        List list = executeSQLQuery( query, params.toArray());
        Iterator itr = list.iterator();
        if (itr.hasNext()) {
            isInvoicehasDepreciatedAsset = true;
        }

        return isInvoicehasDepreciatedAsset;
    }

    @Override
    public boolean isDOhasDepreciatedAsset(String invoiceId, String companyId) throws ServiceException {
        boolean isInvoicehasDepreciatedAsset = false;
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);

        String query = "SELECT adp.id FROM deliveryorder do INNER JOIN dodetails dod ON "
                + "dod.deliveryorder=do.id INNER JOIN assetdetailsinvdetailmapping amp ON "
                + "amp.invoicedetailid=dod.id INNER JOIN assetdepreciationdetail adp ON "
                + "adp.assetdetail=amp.assetdetails WHERE do.id=? AND amp.moduleid=27 AND do.company=?";

        List list = executeSQLQuery( query, params.toArray());
        Iterator itr = list.iterator();
        if (itr.hasNext()) {
            isInvoicehasDepreciatedAsset = true;
        }

        return isInvoicehasDepreciatedAsset;
    }

    @Override
    public KwlReturnObject getPendingDO(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String userid = request.get("userid").toString();
            String query = "select distinct(level) from multilevelapprovalrule where id in (select ruleid from multilevelapprovalruletargetusers where userid = ?)";
            ArrayList params = new ArrayList();
            params.add(userid);
            User user = null;
            if(!StringUtil.isNullOrEmpty(userid))
                user = (User) get(User.class, userid);
            List flowList = executeSQLQuery( query, params.toArray());

            String inQuery = "";
            ArrayList InParams = new ArrayList();
            Iterator flowITR = flowList.iterator();
            while (flowITR.hasNext()) {
                inQuery += ",?";
                InParams.add(flowITR.next());
            }
            params.clear();
            list = new ArrayList();
            boolean hasRecord = false;
            if (flowList.size() > 0 || AccountingManager.isCompanyAdmin(user)) {
                hasRecord = true;
            }            
            if (hasRecord) {
//                inQuery = inQuery.substring(1);
                DateFormat df = (DateFormat) request.get(Constants.df);
                String start = (String) request.get(Constants.start);
                String limit = (String) request.get(Constants.limit);
                String ss = (String) request.get(Constants.ss);
                boolean isfavourite = false;
                if (request.get("isfavourite") != null) {
                    isfavourite = Boolean.parseBoolean((String) request.get("isfavourite"));
                }
                boolean isprinted = false;
                if (request.get(Constants.MARKED_PRINTED) != null) {
                    isprinted = Boolean.parseBoolean((String) request.get(Constants.MARKED_PRINTED));
                }
                //            params.add((String) request.get(Constants.companyKey));

                String companyid = AccountingManager.getFilterInString((String) request.get(Constants.companyKey));
                //String conditionSQL = " where deliveryorder.deleteflag='F' and deliveryorder.company in "+companyid+" ";
                boolean deleted = Boolean.parseBoolean((String) request.get("deleted"));
                boolean nondeleted = Boolean.parseBoolean((String) request.get("nondeleted"));
                
                boolean isdodetailsJoin = false;
                String productid = "";
                if (request.containsKey(Constants.productid) && request.get(Constants.productid) != null) {
                    productid = (String) request.get(Constants.productid);
                }
                String newcustomerid = "";
                if (request.containsKey(InvoiceConstants.newcustomerid) && request.get(InvoiceConstants.newcustomerid) != null) {
                    newcustomerid = (String) request.get(InvoiceConstants.newcustomerid);
                }
                String productCategoryid = "";
                if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                    productCategoryid = (String) request.get(Constants.productCategoryid);
                }
                String customerCategoryid = "";
                if (request.containsKey(InvoiceConstants.customerCategoryid) && request.get(InvoiceConstants.customerCategoryid) != null) {
                    customerCategoryid = (String) request.get(InvoiceConstants.customerCategoryid);
                }
                
                String userDepartment = "";
                if (request.containsKey("userDepartment") && request.get("userDepartment") != null) {
                    userDepartment = (String) request.get("userDepartment");
                }
                
                String conditionSQL = "";

                if (nondeleted) {

                    conditionSQL = "  where deliveryorder.deleteflag='F' and deliveryorder.company in " + companyid + " ";

                } else if (deleted) {

                    conditionSQL += " where deliveryorder.deleteflag='T' and deliveryorder.company in " + companyid + " ";

                } else {

                    conditionSQL += " where deliveryorder.company in " + companyid + " ";

                }
                String searchJoin = "";
                if (!StringUtil.isNullOrEmpty(ss)) {
                    String[] searchcol = new String[]{"deliveryorder.donumber", "deliveryorder.memo", "customer.name", "dodetails.partno", "dodetails.description", "product.name"};
                    Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 6);
                    StringUtil.insertParamSearchString(SearchStringMap);
                    String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                    conditionSQL += searchQuery;

                    searchJoin = " inner join dodetails on dodetails.deliveryorder = deliveryorder.id "
                            + " inner join product on dodetails.product = product.id ";
                    
                    isdodetailsJoin = true;
                    //                for (int i = 0; i < 3; i++) {
                    //                    params.add(ss + "%");
                    //                }
                    //                params.add("%" + ss + "%");
                    //                conditionSQL += " and ( deliveryorder.donumber like ? or deliveryorder.memo like ? or customer.name like ? or dodetails.partno like ? )";

                }
                String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
                if (!StringUtil.isNullOrEmpty(costCenterId)) {
                    params.add(costCenterId);
                    conditionSQL += " and costcenter.id=?";
                }
                String customerId = (String) request.get(CCConstants.REQ_customerId);
                if (!StringUtil.isNullOrEmpty(customerId)) {
                    params.add(customerId);
                    conditionSQL += " and customer.id=?";
                }
                if (!StringUtil.isNullOrEmpty(newcustomerid)) {
                    params.add(newcustomerid);
                    conditionSQL += " and deliveryorder.customer = ? ";
                }
                if (!StringUtil.isNullOrEmpty(customerCategoryid) && !StringUtil.equal(customerCategoryid, "-1") && !StringUtil.equal(customerCategoryid, "All")) {
                    params.add(customerCategoryid);
                    conditionSQL += " and customer.id in (select customerid from customercategorymapping where customercategory = ?)  ";
                }

                if (isfavourite) {
                    conditionSQL += " and deliveryorder.favouriteflag=true ";
                }
                if (isprinted) {
                    conditionSQL += " and deliveryorder.printedflag=true ";
                }

                String startDate = (String) request.get(Constants.REQ_startdate);
                String endDate = (String) request.get(Constants.REQ_enddate);
                String joinString = "";
                if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                    conditionSQL += " and (deliveryorder.orderdate >=? and deliveryorder.orderdate <=?)";
                    params.add(df.parse(startDate));
                    params.add(df.parse(endDate));
                }
                String joinString1 = " ";
                if (request.containsKey("soid") && request.get("soid") != null) {
                    String soid = (String) request.get("soid");
                    //if(!StringUtil.isNullOrEmpty(soid)){
                    params.add(soid);
                    if (searchJoin.equals("")) {
                        joinString1 = " inner join dodetails on dodetails.deliveryorder = deliveryorder.id ";
                        isdodetailsJoin = true;
                    }

                    joinString1 += " inner join sodetails on sodetails.id=dodetails.sodetails  "
                            + " inner join salesorder on salesorder.id=sodetails.salesorder ";
                    conditionSQL += " and  salesorder.id= ? ";

                }
                String appendCase = " and ";
                String mySearchFilterString = "";
                String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
                if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                    if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                        filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                    }
                }
                String Searchjson = "";
                if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                    Searchjson = request.get("searchJson").toString();

                    if (!StringUtil.isNullOrEmpty(Searchjson)) {
                        request.put(Constants.Searchjson, Searchjson);
                        request.put(Constants.appendCase, appendCase);
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                        joinString = " inner join deliveryordercustomdata on deliveryordercustomdata.deliveryOrderId=deliveryorder.accdeliveryordercustomdataref ";
                        //                    mySearchFilterString = mySearchFilterString.replaceAll("DeliveryOrderCustomData", "deliveryorder.accdeliveryordercustomdataref");
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                }
                
                String joinString2 = "";
                if (!StringUtil.isNullOrEmpty(productid)) {
                    if (!isdodetailsJoin) {
                        joinString2 = " inner join dodetails on dodetails.deliveryorder = deliveryorder.id ";
                        isdodetailsJoin = true;
                    }
                    params.add(productid);
                    conditionSQL += " and dodetails.product = ? ";
                }

                if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                    if (!isdodetailsJoin) {
                        joinString2 = " inner join dodetails on dodetails.deliveryorder = deliveryorder.id ";
                        isdodetailsJoin = true;
                    }
                    params.add(productCategoryid);
                    conditionSQL += " and dodetails.product in (select productid from productcategorymapping where productcategory = ?) ";
                }
                
                if (!StringUtil.isNullOrEmpty(userDepartment)) {
                    joinString += " inner join users on users.userid = deliveryorder.createdby ";
                    conditionSQL += " and users.department = ? ";
                    params.add(userDepartment);
                }
                
                String orderBy = "";
                String[] stringSort = null;
                String sort_Col = "";
                if (request.containsKey("dir") && request.containsKey("sort")) {
                    String Col_Name = request.get("sort").toString();
                    String Col_Dir = request.get("dir").toString();
                    stringSort = columSortDeliveryOrder(Col_Name, Col_Dir);
                    orderBy += stringSort[0];
                    sort_Col += stringSort[1];

                } else {
                    orderBy += " order by orderdate desc";
                    sort_Col += " ,deliveryorder.orderdate ";

                }
                mySearchFilterString += " and approvestatuslevel != ? ";
                params.add(11);

//                mySearchFilterString += " and approvestatuslevel in (" + inQuery + ") ";
//                params.addAll(InParams);

                String mysqlQuery = " select distinct(deliveryorder.id), 'false' as withoutinventory" + sort_Col + "  from deliveryorder "
                        + "inner join customer on customer.id = deliveryorder.customer " + joinString1 + searchJoin + joinString + joinString2
                        + "left join costcenter on costcenter.id = deliveryorder.costcenter " + conditionSQL + mySearchFilterString
                        + orderBy;

                list = executeSQLQuery( mysqlQuery, params.toArray());
                count = list.size();
                if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                    list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getPendingDO:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    public KwlReturnObject getAllUninvoicedConsignmentDetails(HashMap<String, Object> request) {
        List returnList = new ArrayList();
        int totalCount = 0;
        try {
             String companyid = (String) request.get(Constants.companyKey);
            String customerid="";
            String custWarehouse="";
            String custcondition="";
            String wareconditin="";
            String searchString="",searchcondn="";
            ArrayList params= new  ArrayList();
            params.add(companyid);
            if (!StringUtil.isNullOrEmpty((String) request.get("customerid"))) {
                customerid = (String) request.get("customerid");
                custcondition+= " and  do.customer=? ";
                 params.add(customerid);
            }
            
            if (!StringUtil.isNullOrEmpty((String) request.get("custWarehouse"))) {
                custWarehouse = (String) request.get("custWarehouse");
                wareconditin+= " and do.custWarehouse=? ";
                params.add(custWarehouse);
            }
       
            if (!StringUtil.isNullOrEmpty((String) request.get("productsFilter"))) {
                String selectedProductIds = AccountingManager.getFilterInString((String)request.get("productsFilter"));
                searchcondn = " and pro.id in"+ selectedProductIds + " ";
            }
            
            if (!StringUtil.isNullOrEmpty((String) request.get("excludeproductsFilter"))) {
                String selectedProductIds = AccountingManager.getFilterInString((String)request.get("excludeproductsFilter"));
                searchcondn = " and pro.id not in"+ selectedProductIds + " ";
            }
       
            if (!StringUtil.isNullOrEmpty((String) request.get("searchString"))) {
                searchString = (String) request.get("searchString");
                searchcondn = " and (pro.productid LIKE ? OR pro.name LIKE ? ) ";
                params.add("%" + searchString + "%");
                params.add("%" + searchString + "%");
            }
            String mysqlQuery = "select dod.product,sum(dod.actualquantity),sum(dod.deliveredquantity),sum(dod.baseuomquantity),"
                    + " sum(dod.baseuomdeliveredquantity),dod.description, do.customer , cust.name, do.custWarehouse, invwh.name as warehousename  "
                    + " from dodetails as dod "
                    + " inner join product pro on pro.id=dod.product "
                    + " inner join deliveryorder do on do.id=dod.deliveryorder "
                    + " inner join customer cust on do.customer=cust.id "
                    + " inner join inventorywarehouse invwh on do.custWarehouse = invwh.id"
                    + " where do.isconsignment='T' "
                    + " and do.company=? and do.deleteflag='F' "+custcondition+wareconditin+searchcondn+" "
                    + " AND do.isdoclosed='F' AND dod.islineitemclosed='F' AND invwh.isForCustomer='T' "
                    + " group by dod.product,do.customer,do.custWarehouse ORDER BY cust.name"; 
            returnList = executeSQLQuery( mysqlQuery, params.toArray());
            totalCount = returnList.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new KwlReturnObject(true, "", null, returnList, totalCount);
    }


    @Override
    public KwlReturnObject approvePendingDO(String doID, String companyid, int status) throws ServiceException {
        String query = "update DeliveryOrder set approvestatuslevel = ? where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{status, doID, companyid});
        return new KwlReturnObject(true, "Delivery Order has been updated successfully.", null, null, numRows);
    }

    public KwlReturnObject rejectPendingDO(String poid, String companyid) throws ServiceException {
        try {
            String query = "update DeliveryOrder set deleted=true,approvestatuslevel = (-approvestatuslevel) where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{poid, companyid});
            return new KwlReturnObject(true, "Delivery Order has been deleted successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.rejectPendingDO : " + ex.getMessage(), ex);
        }
    }

    @Override
    public void releaseBatchSerialData(String deliveryOrderId, String companyid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from DeliveryOrder where ID=? and company.companyID=?";
            list = executeQuery(q, new Object[]{deliveryOrderId, companyid});
            if (list != null && !list.isEmpty()) {

                Iterator it = list.iterator();
                while (it.hasNext()) {
                    DeliveryOrder doObj = (DeliveryOrder) it.next();
                    for (DeliveryOrderDetail dod : doObj.getRows()) {
                        Product p = dod.getProduct();
                        List<LocationBatchDocumentMapping> lcmList = getLocationBatchMapdoct(dod.getID());

                        if (lcmList != null) {
                            for (LocationBatchDocumentMapping lcm : lcmList) {
                                NewProductBatch nb = lcm.getBatchmapid();
                                nb.setQuantitydue(authHandler.roundQuantity((lcm.getQuantity() + nb.getQuantitydue()),companyid));
                            }
                        }
                        
                        if(p.isIsSerialForProduct()){
                            List<SerialDocumentMapping> srm=getSerialBatchMapdoct(dod.getID());
                            if(srm!=null){
                                for(SerialDocumentMapping sr:srm){
                                    NewBatchSerial srl=sr.getSerialid();
                                    srl.setQuantitydue(1);
                                }
                            }
                        }
                    }

                }
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.rejectPendingDO : " + ex.getMessage(), ex);
        }
    }
    
    public KwlReturnObject rejectPendingInvoice(String invID, String companyid) throws ServiceException{
        try {
            String query = "update Invoice set deleted=true,approvestatuslevel = (-approvestatuslevel) where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{invID, companyid});
            return new KwlReturnObject(true, "Sales Invoice has been rejected successfully.", null, null, numRows);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.rejectPendingInvoice : " + ex.getMessage(), ex);
        }
    }
    @Override
    public KwlReturnObject getInvoiceDetailWithDeferredJE(Invoice invoice) {
        List<InvoiceDetail> invoiceDetails = new ArrayList<InvoiceDetail>();
        try {
            String query = "select * from invoicedetails where invoice=? and company=? and deferredjedetailid IS NOT NULL";
            invoiceDetails = executeSQLQuery( query, new Object[]{invoice.getID(), invoice.getCompany().getCompanyID()});
        } catch (Exception ex) {
        }
        return new KwlReturnObject(true, "", null, invoiceDetails, invoiceDetails.size());
    }

    public KwlReturnObject WeeklyCashFlowUnPaidInvoices(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            CompanyAccountPreferences pref = (CompanyAccountPreferences) get(CompanyAccountPreferences.class, companyid);
            Calendar startFinYearCal = Calendar.getInstance();
            Calendar endFinYearCal = Calendar.getInstance();
            startFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.setTime(pref.getFinancialYearFrom());
            endFinYearCal.add(Calendar.YEAR, 1);
            
            Date startFinYearCalDate = null;
            Date endFinYearCalDate = null;

            try {
                String startFinYearCalString = authHandler.getDateOnlyFormat().format(startFinYearCal.getTime());
                startFinYearCalDate = authHandler.getDateOnlyFormat().parse(startFinYearCalString);

                String endFinYearCalString = authHandler.getDateOnlyFormat().format(endFinYearCal.getTime());
                endFinYearCalDate = authHandler.getDateOnlyFormat().parse(endFinYearCalString);

            } catch (ParseException ex) {
                startFinYearCalDate = startFinYearCal.getTime();
                endFinYearCalDate = endFinYearCal.getTime();

                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String customerid = (String) request.get(InvoiceConstants.customerid);
            int datefilter = (request.containsKey("datefilter") && request.get("datefilter") != null) ? Integer.parseInt(request.get("datefilter").toString()) : 0;// 0 = Invoice Due date OR 1 = Invoice date

            String customerIdGroup = "";
            if (request.containsKey("custVendorID") && request.get("custVendorID") != null) {
                customerIdGroup = (String) request.get("custVendorID");
            }
            String newcustomerid = "";
            if (request.containsKey(InvoiceConstants.newcustomerid) && request.get(InvoiceConstants.newcustomerid) != null) {
                newcustomerid = (String) request.get(InvoiceConstants.newcustomerid);
            }
            String productid = (String) request.get(InvoiceConstants.productid);

            String productCategoryid = "";
            if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.get(Constants.productCategoryid);
            }

            String prodFilterCustid = (String) request.get(InvoiceConstants.prodfiltercustid);
            String termid = (String) request.get(InvoiceConstants.termid);
            String costCenterId = (String) request.get(CCConstants.REQ_costCenterId);
            if (customerid == null) {
                customerid = (String) request.get(InvoiceConstants.accid);
            }
            String ss = (String) request.get(Constants.ss);
            boolean isForTemplate = false;
//            String cashAccount=((CompanyAccountPreferences) session.get(CompanyAccountPreferences.class, AuthHandler.getCompanyid(request))).getCashAccount().getID();
            String cashAccount = pref.getCashAccount().getID();
            boolean cashonly = false;
            boolean creditonly = false;
            boolean personGroup = false;
            boolean isagedgraph = false;
            boolean isfavourite = false;
            boolean isprinted = false;
            boolean isOpeningBalanceInvoices = false;
            boolean consolidateFlag = false;
            String group = "";
            cashonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.cashonly));
            creditonly = Boolean.parseBoolean((String) request.get(InvoiceConstants.creditonly));
            boolean deleted = Boolean.parseBoolean((String) request.get(InvoiceConstants.deleted));
            boolean nondeleted = Boolean.parseBoolean((String) request.get(InvoiceConstants.nondeleted));
            boolean pendingapproval = (Boolean) request.get("pendingapproval");
            boolean isweeklycashflow = true;
            consolidateFlag = Boolean.parseBoolean((String) request.get(consolidateFlag));
            int duration = 0;
            if (request.get("isfavourite") != null) {
                isfavourite = Boolean.parseBoolean((String) request.get("isfavourite"));
            }
            if (request.get(Constants.MARKED_PRINTED) != null) {
                isprinted = Boolean.parseBoolean((String) request.get(Constants.MARKED_PRINTED));
            }
            if (request.get("isOpeningBalanceInvoices") != null) {
                isOpeningBalanceInvoices = Boolean.parseBoolean((String) request.get("isOpeningBalanceInvoices"));
            }
            if (request.containsKey("isForTemplate") && request.get("isForTemplate") != null) {
                isForTemplate = Boolean.parseBoolean(request.get("isForTemplate").toString());
            }
            if (request.get("duration") != null) {
                duration = Integer.parseInt(request.get("duration").toString());
            }
            if (request.get("isweeklycashflow") != null) {
                isweeklycashflow = Boolean.parseBoolean(request.get("isweeklycashflow").toString());
            }
//            if (cashonly) {
//                customerid = cashAccount;
//            }
//            boolean ignoreZero = (String) request.get("ignorezero") != null;
            personGroup = Boolean.parseBoolean((String) request.get(InvoiceConstants.persongroup));
            isagedgraph = Boolean.parseBoolean((String) request.get(InvoiceConstants.isagedgraph));
            String dueDate = (String) request.get(InvoiceConstants.curdate);
            String startdate = (String) request.get(Constants.REQ_startdate);
            
            boolean isDraft = false;
            if (request.containsKey("isDraft") && request.get("isDraft") != null) {
                isDraft = (Boolean) request.get("isDraft");
            }
            
            ArrayList params = new ArrayList();
            ArrayList paramsSQLWithoutInv = new ArrayList();
            ArrayList paramsSQLOpeningBalanceInv = new ArrayList();
//            String condition = "";
            String conditionSQL = "";
            String conditionSQLWithoutInv = "";
            String conditionSQLForOpeningBalanceInvoice = "";
            params.add(companyid);
            paramsSQLWithoutInv.add(companyid);
            paramsSQLOpeningBalanceInv.add(companyid);

            if (request.containsKey(InvoiceConstants.getRepeateInvoice)) {
                if (Boolean.parseBoolean((String) request.get(InvoiceConstants.getRepeateInvoice))) {
//                    condition += " and repeateInvoice is not null";
                    conditionSQL += " and invoice.repeateinvoice is not null"; 
                    conditionSQLWithoutInv += " and billinginvoice.repeateinvoice is not null";
                }
            }
            String billID = (String) request.get(InvoiceConstants.billid);
            if (!StringUtil.isNullOrEmpty(billID)) {
                params.add(billID);
                paramsSQLOpeningBalanceInv.add(billID);
                paramsSQLWithoutInv.add(billID);
//                condition += " and inv.ID=?";
                conditionSQL += " and invoice.id = ? ";
                conditionSQLForOpeningBalanceInvoice += " and invoice.id = ? ";
                conditionSQLWithoutInv += " and billinginvoice.id=?";
            } else {
                if (!StringUtil.isNullOrEmpty(customerid)) {
                    params.add(customerid);
                    paramsSQLOpeningBalanceInv.add(customerid);
                    paramsSQLWithoutInv.add(customerid);
//                    condition += " and inv.customerEntry.account.ID=?";
                    conditionSQL += " and jedetail.account = ? ";
                    conditionSQLForOpeningBalanceInvoice += " and invoice.customer = ? ";
                    conditionSQLWithoutInv += " and jedetail.account = ? ";
                } else {//Cash Sales option is selected in filter.
                    String qMarks = "";
                    if (cashonly || creditonly) {
                        qMarks = "?,";
                        params.add(cashAccount);
                        paramsSQLWithoutInv.add(cashAccount);
                    }
                    qMarks = qMarks.substring(0, Math.max(0, qMarks.length() - 1));
                    if (!StringUtil.isNullOrEmpty(qMarks)) {
//                        condition += " and inv.customerEntry.account.ID in (" + qMarks + ")";
                        if (creditonly) {
                            conditionSQL += " and jedetail.account not in (" + qMarks + ")";
                            conditionSQLWithoutInv += " and jedetail.account not in (" + qMarks + ")";
                        } else if (cashonly) {
                            conditionSQL += " and jedetail.account in (" + qMarks + ")";
                            conditionSQLWithoutInv += " and jedetail.account in (" + qMarks + ")";
                        }
                    }
                }
            }
            String innerQuery3 = "";
            String innerQuery4 = "";
            if (request.containsKey("soid") && request.get("soid") != null) {
                String soid = (String) request.get("soid");
                // if(!StringUtil.isNullOrEmpty(soid)){
                params.add(soid);
                paramsSQLWithoutInv.add(soid);
                innerQuery3 = " inner join invoicedetails on invoicedetails.invoice = invoice.id "
                        + " inner join sodetails on invoicedetails.salesorderdetail = sodetails.id "
                        + " inner join salesorder on sodetails.salesorder = salesorder.id ";
                innerQuery4 = " inner join billinginvoicedetails on billinginvoicedetails.billinginvoice = billinginvoice.id "
                        + " inner join billingsodetails on billinginvoicedetails.salesorderdetail = billingsodetails.id "
                        + " inner join billingsalesorder on billingsodetails.salesorder = billingsalesorder.id ";
                conditionSQL += "and  salesorder.id= ?";
                conditionSQLWithoutInv += " and billingsalesorder.id =? ";
            }
            String jeIds = (String) request.get("jeIds");
            if (!StringUtil.isNullOrEmpty(jeIds)) {
//                condition += " and inv.journalEntry.ID IN(" + jeIds + ")";
                conditionSQL += " and journalentry.id IN(" + jeIds + ")";
                conditionSQLWithoutInv += " and journalentry.id IN(" + jeIds + ")";
            }
            if (cashonly) {
                conditionSQL += " and invoice.cashtransaction=1 ";
            }
            if (!StringUtil.isNullOrEmpty(customerIdGroup) && !customerIdGroup.contains("All")) {
                customerIdGroup = AccountingManager.getFilterInString(customerIdGroup);
                conditionSQL += " and invoice.customer in " + customerIdGroup;
                conditionSQLForOpeningBalanceInvoice += " and invoice.customer in " + customerIdGroup;
                conditionSQLWithoutInv += " and billinginvoice.customer in " + customerIdGroup;
            }
            if (datefilter == 0) {
                if (isweeklycashflow) {
                    params.add(df.parse(startdate));
                    paramsSQLWithoutInv.add(df.parse(startdate));
                    Date curDate = df.parse(startdate);
                    Calendar cal1 = Calendar.getInstance();
                    cal1.setTime(curDate);
                    cal1.add(Calendar.DAY_OF_YEAR, duration * 7);
                    Date cal1Date = null;
                    try {
                        String Cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                        cal1Date = authHandler.getDateOnlyFormat().parse(Cal1String);

                    } catch (ParseException ex) {
                        cal1Date = cal1.getTime();
                        Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    params.add(cal1Date);
                    paramsSQLWithoutInv.add(cal1Date);
                    conditionSQL += " and invoice.duedate>=? and invoice.duedate<=? ";
                    conditionSQLWithoutInv += " and billinginvoice.duedate>=?  and billinginvoice.duedate<=? ";
                } else if (!StringUtil.isNullOrEmpty(dueDate)) {
                    params.add(df.parse(dueDate));
                    paramsSQLWithoutInv.add(df.parse(dueDate));
//                condition += " and inv.dueDate<=?";
                    conditionSQL += " and invoice.duedate<=? ";
                    conditionSQLWithoutInv += " and billinginvoice.duedate<=? ";
                }
            } else {
                if (isweeklycashflow) {
                    params.add(df.parse(startdate));
                    paramsSQLWithoutInv.add(df.parse(startdate));
                    Date curDate = df.parse(startdate);
                    Calendar cal1 = Calendar.getInstance();
                    cal1.setTime(curDate);
                    cal1.add(Calendar.DAY_OF_YEAR, duration * 7);
                    
                    Date cal1Date = null;
                    try {
                        String Cal1String = authHandler.getDateOnlyFormat().format(cal1.getTime());
                        cal1Date = authHandler.getDateOnlyFormat().parse(Cal1String);

                    } catch (ParseException ex) {
                        cal1Date = cal1.getTime();
                        Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    params.add(cal1Date);
                    paramsSQLWithoutInv.add(cal1Date);
//                    conditionSQL += " and journalentry.entryDate>=?  and journalentry.entryDate<=?  ";
                    conditionSQL += " and invoice.creationdate>=?  and invoice.creationdate<=?  ";
                    conditionSQLWithoutInv += " and journalentry.entryDate>=?  and journalentry.entryDate<=?  ";
                } else if (!StringUtil.isNullOrEmpty(dueDate)) {
                    params.add(df.parse(dueDate));
                    paramsSQLWithoutInv.add(df.parse(dueDate));
//                    conditionSQL += " and journalentry.entryDate<=? ";
                    conditionSQL += " and invoice.creationdate<=? ";
                    conditionSQLWithoutInv += " and journalentry.entryDate<=? ";
                }
            }
            if (!StringUtil.isNullOrEmpty(costCenterId)) {
                params.add(costCenterId);
                paramsSQLWithoutInv.add(costCenterId);
//                condition += " and inv.journalEntry.costcenter.ID=?";
                conditionSQL += " and costcenter.id=? ";
                conditionSQLWithoutInv += " and costcenter.id=? ";
            }
            if (!StringUtil.isNullOrEmpty(termid)) {
                params.add(termid);
                // paramsSQLWithoutInv.add(termid);
//                condition += " and inv.journalEntry.costcenter.ID=?";
                conditionSQL += " and invoice.termid=? ";
                // conditionSQLWithoutInv += " and invoice.termid=? ";
            }
            String innerQuery = "";
            String openingBalanceInvoicesUnionQuery = "";
            String tableInv = "";
            String tableBillingInv = "";
            if (!StringUtil.isNullOrEmpty(productid)) {
                tableInv = ", invoicedetails.id as invid ";
                tableBillingInv = ", '' as invid ";

                params.add(productid);
                innerQuery = " inner join invoicedetails on invoicedetails.invoice = invoice.id "
                        + " inner join inventory on invoicedetails.id = inventory.id ";
                if (StringUtil.isNullOrEmpty(prodFilterCustid)) {
                    conditionSQL += " and inventory.product = ? ";
                } else {
                    params.add(prodFilterCustid);
                    conditionSQL += " and inventory.product = ? and invoice.customer = ? ";
                }
                conditionSQLWithoutInv += " and jedetail.account = '' ";
            }

            if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                tableInv = ", invoicedetails.id as invid ";
                tableBillingInv = ", '' as invid ";

                params.add(productCategoryid);
                innerQuery = " inner join invoicedetails on invoicedetails.invoice = invoice.id "
                        + " inner join inventory on invoicedetails.id = inventory.id ";
                if (StringUtil.isNullOrEmpty(prodFilterCustid)) {
                    conditionSQL += " and inventory.product in (select productid from productcategorymapping where productcategory = ?) ";
                } else {
                    params.add(prodFilterCustid);
                    conditionSQL += " and inventory.product in (select productid from productcategorymapping where productcategory = ?) and invoice.customer = ? ";
                }
                conditionSQLWithoutInv += " and jedetail.account = '' ";
            }

            if (!StringUtil.isNullOrEmpty(newcustomerid)) {
                params.add(newcustomerid);
                paramsSQLOpeningBalanceInv.add(newcustomerid);
                paramsSQLWithoutInv.add(newcustomerid);
                conditionSQL += " and invoice.customer = ? ";
                conditionSQLForOpeningBalanceInvoice += " and invoice.customer = ? ";
                conditionSQLWithoutInv += " and billinginvoice.customer = ? ";
            }

            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
//            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)&& datefilter!=1) {
////                condition += " and (inv.journalEntry.entryDate >=? and inv.journalEntry.entryDate <=?)";
//                conditionSQL += " and (journalentry.entrydate >=? and journalentry.entrydate <=?)";
//                conditionSQLWithoutInv += " and (journalentry.entrydate >=? and journalentry.entrydate <=?)";
//                conditionSQLForOpeningBalanceInvoice += " and (invoice.creationdate >=? and invoice.creationdate <=?)";
//                params.add(df.parse(startDate));
//                params.add(df.parse(endDate));
//                paramsSQLOpeningBalanceInv.add(df.parse(startDate));
//                paramsSQLOpeningBalanceInv.add(df.parse(endDate));
//                paramsSQLWithoutInv.add(df.parse(startDate));
//                paramsSQLWithoutInv.add(df.parse(endDate));
//            }

            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"invoice.invoicenumber", "invoice.billto", "journalentry.entryno", "invoice.memo", "customer.name"};
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 5);
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionSQL += searchQuery;

                searchcol = new String[]{"invoice.invoicenumber"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(paramsSQLOpeningBalanceInv, ss, 1);
                StringUtil.insertParamSearchString(SearchStringMap);
                searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionSQLForOpeningBalanceInvoice += searchQuery;

                searchcol = new String[]{"billinginvoice.billinginvoicenumber", "billinginvoice.billto", "journalentry.entryno", "billinginvoice.memo", "account.name"};
                SearchStringMap = StringUtil.insertParamSearchStringMap(paramsSQLWithoutInv, ss, 5);
                StringUtil.insertParamSearchString(SearchStringMap);
                searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionSQLWithoutInv += searchQuery;

//                for (int i = 0; i <= 4; i++) {
//                    params.add(ss + "%");
//                    paramsSQLWithoutInv.add(ss + "%");
//                }
////                condition += " and (inv.invoiceNumber like ? or inv.billTo like ?  or inv.journalEntry.entryNumber like ? or inv.memo like ? or inv.customerEntry.account.name like ? ) ";
//                conditionSQL += " and (invoice.invoicenumber like ? or invoice.billto like ?  or journalentry.entryno like ? or invoice.memo like ? or account.name like ? ) ";
//                conditionSQLWithoutInv += " and (billinginvoice.billinginvoicenumber like ? or billinginvoice.billto like ?  or journalentry.entryno like ? or billinginvoice.memo like ? or account.name like ? ) ";
            }

            if (personGroup) {
                params.add(startFinYearCalDate);
                params.add(endFinYearCalDate);
                paramsSQLWithoutInv.add(startFinYearCalDate);
                paramsSQLWithoutInv.add(endFinYearCalDate);
//                condition += " and inv.dueDate>=? and inv.dueDate<=?";
                conditionSQL += " and invoice.duedate>=? and invoice.duedate<=?";
                conditionSQLWithoutInv += " and billinginvoice.duedate>=? and billinginvoice.duedate<=?";
            }

            if (isagedgraph) {
                params.add(startFinYearCalDate);
                params.add(endFinYearCalDate);
                paramsSQLWithoutInv.add(startFinYearCalDate);
                paramsSQLWithoutInv.add(endFinYearCalDate);
//                condition += " and inv.dueDate>=? and inv.dueDate<=?";
                conditionSQL += " and invoice.duedate>=? and invoice.duedate<=?";
                conditionSQLWithoutInv += " and billinginvoice.duedate>=? and billinginvoice.duedate<=?";
            }
            if (request.containsKey(InvoiceConstants.isSalesCommissionStmt)) {
                if (Boolean.parseBoolean((String) request.get(InvoiceConstants.isSalesCommissionStmt))) {
                    String userid = (String) request.get(InvoiceConstants.userid);
                    if (StringUtil.isNullOrEmpty(userid)) {
//                        condition += " and inv.salesperson is not null ";
                        conditionSQL += " and invoice.masterSalesPerson is not null ";
                        conditionSQLWithoutInv += " and billinginvoice.masterSalesPerson is not null ";
                    } else if (!StringUtil.isNullOrEmpty(userid)) {
                        params.add(userid);
                        paramsSQLWithoutInv.add(userid);
//                        condition += " and inv.salesperson=? ";
                        conditionSQL += " and invoice.masterSalesPerson=? ";
                        conditionSQLWithoutInv += " and billinginvoice.masterSalesPerson=? ";
                    }
                }
            }

            if (nondeleted) {
//                condition += " and inv.deleted=false ";
                conditionSQL += " and invoice.deleteflag='F' ";
                conditionSQLWithoutInv += " and billinginvoice.deleteflag='F' ";
            } else if (deleted) {
//                condition += " and inv.deleted=true ";
                conditionSQL += " and invoice.deleteflag='T' ";
                conditionSQLWithoutInv += " and billinginvoice.deleteflag='T' ";
            }

            if (!isForTemplate) {
                if (pendingapproval) {
                    conditionSQL += " and invoice.pendingapproval != 0 ";
                    conditionSQLWithoutInv += " and billinginvoice.pendingapproval != 0 ";
                } else {
                    conditionSQL += " and invoice.pendingapproval= 0 ";
                    conditionSQLWithoutInv += " and billinginvoice.pendingapproval= 0 ";
                }

                //Ignore records created as only templates.
                conditionSQL += " and invoice.istemplate != 2 ";
                conditionSQLWithoutInv += " and billinginvoice.istemplate != 2 ";
            }
            
            if (isDraft) {
                conditionSQL += " and invoice.isdraft = true ";
            } else {
                conditionSQL += " and invoice.isdraft = false ";
            }

            if (isfavourite) {
                conditionSQL += " and invoice.favouriteflag=true ";
                conditionSQLWithoutInv += " and billinginvoice.favouriteflag=true ";
            }

            if (isprinted) {
                conditionSQL += " and invoice.printedflag=true ";
            }

//            String query = "from Invoice inv where inv.company.companyID=? " + condition + group + " order by customerEntry.account.id";
            String appendCase = "and";
            String mySearchFilterString = "";
            String joinString = "";
            String joinString1 = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                Searchjson = request.get("searchJson").toString();

                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    request.put(Constants.Searchjson, Searchjson);
                    request.put(Constants.appendCase, appendCase);
                    request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                    mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                    joinString = " inner join accjecustomdata on accjecustomdata.journalentryId=billinginvoice.journalentry ";
                    joinString1 = " inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry ";
                    StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    StringUtil.insertParamAdvanceSearchString1(paramsSQLWithoutInv, Searchjson);
                }
            }

            String orderBy = "";
            String[] stringSort = null;
            String sort_Col = "";
            String sort_Col1 = "";
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                stringSort = columSort(Col_Name, Col_Dir);
                orderBy += stringSort[0];
                sort_Col += stringSort[1];
                sort_Col1 += stringSort[2];
                innerQuery += stringSort[3];
                innerQuery4 += stringSort[4];
            } else {
                orderBy += " order by entrydate desc";
//                sort_Col += ", journalentry.entrydate";
                sort_Col += ", invoice.creationdate";
                sort_Col1 += ", journalentry.entrydate";
            }
            params.addAll(paramsSQLWithoutInv);
            String mysqlQuery = "select invoice.id,  'false' as withoutinventory, journalentry.createdon " + sort_Col + tableInv + "  from invoice  "
                    + "inner join journalentry on invoice.journalentry = journalentry.id  "
                    + "inner join jedetail on jedetail.id = invoice.centry "
                    + " inner join account on account.id = jedetail.account "
                    + " inner join customer on invoice.customer = customer.id "
                    + innerQuery + innerQuery3 + joinString1
                    + " left join costcenter on costcenter.id = journalentry.costcenter  "
                    + " where invoice.company = ?" + conditionSQL + mySearchFilterString + " "
                    + " union "
                    + " select billinginvoice.id,  'true' as withoutinventory, journalentry.createdon  " + sort_Col1 + tableBillingInv + " from billinginvoice  "
                    + " inner join journalentry on billinginvoice.journalentry = journalentry.id  "
                    + " inner join jedetail on jedetail.id = billinginvoice.centry "
                    //      +" inner join invoice on invoice.centry = jedetail.id  "
                    + " inner join account on account.id = jedetail.account "
                    + joinString + innerQuery4
                    + " left join costcenter on costcenter.id = journalentry.costcenter  "
                    + " where billinginvoice.company = ?" + conditionSQLWithoutInv + mySearchFilterString;
            mysqlQuery += orderBy;
            if (isOpeningBalanceInvoices) {
                params = paramsSQLOpeningBalanceInv;
                mysqlQuery = " select invoice.id,  'false' as withoutinventory, invoice.creationdate, invoice.creationdate from invoice "
                        + " where invoice.isopeningbalenceinvoice=True and invoice.company = ?" + conditionSQLForOpeningBalanceInvoice;
            }
//            list = executeQuery( query, params.toArray());
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false && consolidateFlag == false) {// paging to data when company is non consolidate.
                list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    @Override
    public KwlReturnObject getDuplicateInvoiceNumberForEdit(String entryNumber, String companyid, String invoiceid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from Invoice where invoiceNumber=? and company.companyID=? and ID!=? AND isDraft='F'";  //SDP-13487 - Do not check duplicate in Draft Report. Because Multiple draft records having empty entry no.
            list = executeQuery( q, new Object[]{entryNumber, companyid, invoiceid});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
    }
    
    @Override
    public KwlReturnObject getInvoiceNumbersOfDO(String deliveryOrderID, String companyid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "select distinct(invoice) from InvoiceDetail invd where invd.deliveryOrderDetail.deliveryOrder.ID = ? and invd.company.companyID = ? ";
            list = executeQuery( q, new Object[]{deliveryOrderID, companyid});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoiceNumbersOfDO:" + ex.getMessage(), ex);
        }
    }

    @Override
    public KwlReturnObject getDODuplicateNumberWithID(String entryNumber, String companyid, String doid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from DeliveryOrder where deliveryOrderNumber=? and company.companyID=? and ID!=?";
            list = executeQuery( q, new Object[]{entryNumber, companyid, doid});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getDODuplicateNumberWithID:" + ex.getMessage(), ex);
        }
    }

    @Override
    public KwlReturnObject getSalesReturnCountForEdit(String entryNumber, String companyid, String srid) throws ServiceException {
        try {
            List list = new ArrayList();
            int count = 0;
            String q = "from SalesReturn where salesReturnNumber=? and company.companyID=? and ID!=?";
            list = executeQuery( q, new Object[]{entryNumber, companyid, srid});
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getSalesReturnCountForEdit:" + ex.getMessage(), ex);
        }
    }

    @Override
    public KwlReturnObject getDO_Product(Map<String, Object> requestMap) throws ServiceException {
        ArrayList params = new ArrayList();
        String condition = "";
        String productId = "";
        String companyId = "";
        boolean isApproved=false;
        DateFormat df = null;
        String startdate = "";
        String enddate = "";
        if (requestMap.containsKey("productId")) {
            productId = requestMap.get("productId").toString();
            params.add(productId);
        }
        if (requestMap.containsKey("companyId")) {
            companyId = requestMap.get("companyId").toString();
            params.add(companyId);
        }
        if (requestMap.containsKey("df")) {
            try {
                df = (DateFormat) requestMap.get("df");
                if (requestMap.containsKey("startdate")) {
                    startdate = requestMap.get("startdate").toString();
                }
                if (requestMap.containsKey("enddate")) {
                    enddate = requestMap.get("enddate").toString();
                }
                condition += " and (dod.deliveryOrder.orderDate >=? and dod.deliveryOrder.orderDate <=?)";
                params.add(df.parse(startdate));
                params.add(df.parse(enddate));
            } catch (ParseException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (requestMap.containsKey("isApproved")) {
            isApproved = Boolean.parseBoolean(requestMap.get("isApproved").toString());
            if (isApproved) {
                condition += " and dod.deliveryOrder.approvestatuslevel=?";
                params.add(11);
            }
        }
        List list = new ArrayList();
        String q = "from DeliveryOrderDetail dod where dod.product.ID=? and dod.company.companyID=?"+condition;// and dod.deliveryOrder.deleted=false ";
        list = executeQuery( q, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getSalesReturn_Product(String productid, String companyid) throws ServiceException {
        List list = new ArrayList();
        String q = "from SalesReturnDetail srd where srd.product.ID=? and srd.company.companyID=?";// and srd.salesReturn.deleted=false ";
        list = executeQuery( q, new Object[]{productid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getCountBuildDettails_Product(String productid, String companyid) throws ServiceException {
        List list = new ArrayList();
//        String q = "from ProductBuildDetails pbd where pbd.build.ID in(select pb.ID from ProductBuild pb where pb.product.ID= ? and pb.company.companyID=? ) and pbd.unbuild != 'T'";// ERP-11936
        String q = "select pbd from ProductBuildDetails pbd inner join pbd.build pb where pb.product.ID= ? and pb.company.companyID=? and pbd.unbuild != 'T'";// ERP-11936
        list = executeQuery( q, new Object[]{productid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public Map<String, InvoiceInfo> getInvoiceList(List<String> invoiceIDLIST) {
        Map<String, InvoiceInfo> invoiceMap = new HashMap<String, InvoiceInfo>();
        if (invoiceIDLIST != null && !invoiceIDLIST.isEmpty()) {
            try {
                String query = "select  inv.ID, inv, "
                        + " inv.company, inv.customer, inv.currency "
                        + " from Invoice inv "
                        + " where inv.ID in (:invoiceIDList)";
                List<List> values = new ArrayList<List>();
                values.add(invoiceIDLIST);
                List<Object[]> results = executeCollectionQuery( query, Collections.singletonList("invoiceIDList"), values);
                
                if (results != null) {
                    for (Object[] result : results) {
                        String invID = (String) result[0];
                        InvoiceInfo info = new InvoiceInfo();
                        info.setInvoiceID(invID);
                        info.setInvoice((Invoice) result[1]);
//                    info.setBillingShippingAddresses((BillingShippingAddresses)result[2]);
                        info.setCompany((Company) result[2]);
                        info.setCustomer((Customer) result[3]);
                        info.setCurrency((KWLCurrency) result[4]);
                        invoiceMap.put(invID, info);
                    }
                }
            } catch (ServiceException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return invoiceMap;
    }

    @Override
    public Map<String, JournalEntry> getInvoiceJEList(List<String> invoiceIDLIST) {
        Map<String, JournalEntry> invoiceMap = new HashMap<String, JournalEntry>();
        if (invoiceIDLIST != null && !invoiceIDLIST.isEmpty()) {
            try {
                String query = "select  inv.ID, inv.journalEntry "
                        + " from Invoice inv "
                        + " where inv.ID in (:invoiceIDList)";
                List<List> values = new ArrayList<List>();
                values.add(invoiceIDLIST);
                List<Object[]> results = executeCollectionQuery( query, Collections.singletonList("invoiceIDList"), values);
                
                if (results != null) {
                    for (Object[] result : results) {
                        String invID = (String) result[0];
                        invoiceMap.put(invID, (JournalEntry) result[1]);
                    }
                }
            } catch (ServiceException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return invoiceMap;
    }

    @Override
    public Map<String, Tax> getInvoiceTaxList(List<String> invoiceIDLIST) {
        Map<String, Tax> invoiceMap = new HashMap<String, Tax>();
        if (invoiceIDLIST != null && !invoiceIDLIST.isEmpty()) {
            try {
                String query = "select  inv.ID, inv.tax "
                        + " from Invoice inv "
                        + " where inv.ID in (:invoiceIDList)";
                List<List> values = new ArrayList<List>();
                values.add(invoiceIDLIST);
                List<Object[]> results = executeCollectionQuery( query, Collections.singletonList("invoiceIDList"), values);
                
                if (results != null) {
                    for (Object[] result : results) {
                        String invID = (String) result[0];
                        invoiceMap.put(invID, (Tax) result[1]);
                    }
                }
            } catch (ServiceException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return invoiceMap;
    }
   
    @Override
    public Map<String, JournalEntryDetail> getInvoiceCustomerEntryList(List<String> invoiceIDLIST) {
        Map<String, JournalEntryDetail> invoiceMap = new HashMap<String, JournalEntryDetail>();
        if (invoiceIDLIST != null && !invoiceIDLIST.isEmpty()) {
            try {
                String query = "select  inv.ID, inv.customerEntry "
                        + " from Invoice inv "
                        + " where inv.ID in (:invoiceIDList)";
                List<List> values = new ArrayList<List>();
                values.add(invoiceIDLIST);
                List<Object[]> results = executeCollectionQuery( query, Collections.singletonList("invoiceIDList"), values);
                
                if (results != null) {
                    for (Object[] result : results) {
                        String invID = (String) result[0];
                        invoiceMap.put(invID, (JournalEntryDetail) result[1]);
                    }
                }
            } catch (ServiceException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return invoiceMap;
    }

    @Override
    public Map<String, Term> getInvoiceTermList(List<String> invoiceIDLIST) {
        Map<String, Term> invoiceMap = new HashMap<String, Term>();
        if (invoiceIDLIST != null && !invoiceIDLIST.isEmpty()) {
            try {
                String query = "select  inv.ID, inv.termid "
                        + " from Invoice inv "
                        + " where inv.ID in (:invoiceIDList)";
                List<List> values = new ArrayList<List>();
                values.add(invoiceIDLIST);
                List<Object[]> results = executeCollectionQuery( query, Collections.singletonList("invoiceIDList"), values);
                
                if (results != null) {
                    for (Object[] result : results) {
                        String invID = (String) result[0];
                        invoiceMap.put(invID, (Term) result[1]);
                    }
                }
            } catch (ServiceException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return invoiceMap;
    }

    @Override
    public Map<String, Projreport_Template> getInvoiceTemplateList(List<String> invoiceIDLIST) {
        Map<String, Projreport_Template> invoiceMap = new HashMap<String, Projreport_Template>();
        if (invoiceIDLIST != null && !invoiceIDLIST.isEmpty()) {
            try {
                String query = "select  inv.ID, inv.templateid "
                        + " from Invoice inv "
                        + " where inv.ID in (:invoiceIDList)";
                List<List> values = new ArrayList<List>();
                values.add(invoiceIDLIST);
                List<Object[]> results = executeCollectionQuery( query, Collections.singletonList("invoiceIDList"), values);
                
                if (results != null) {
                    for (Object[] result : results) {
                        String invID = (String) result[0];
                        invoiceMap.put(invID, (Projreport_Template) result[1]);
                    }
                }
            } catch (ServiceException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return invoiceMap;
    }
    public KwlReturnObject getMaintenanceFromQuotation(String maintenanceId,String companyid) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(maintenanceId);
        params.add(companyid);
        String q = "SELECT * from quotation WHERE maintenance=? and company=?";  
        list = executeSQLQuery( q, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override    
     public KwlReturnObject getDeliveryOrderRowForpackingDoDetails(String productid,String doid, String companyid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from ShipingDoDetails where product.ID=? and deliveryOrder.ID=? and company.companyID=?";
        list = executeQuery( q, new Object[]{productid,doid, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    @Override    
    public KwlReturnObject getPackingDoListCount(String packNumber, String companyid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from PackingDoList where packNumber=? and company.companyID=?";
        list = executeQuery( q, new Object[]{packNumber, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }
    /**
     * 
     * @param packNumber
     * @param companyid
     * @description Check if number already exists.
     * @return KwlReturnObject
     * @throws ServiceException 
     */
    @Override    
    public KwlReturnObject getPackingListCount(String packNumber, String companyid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from Packing where packNumber=? and company.companyID=?";
        list = executeQuery( q, new Object[]{packNumber, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }
    /**
     * 
     * @param packNumber
     * @param companyid
     * @description Check if number already exists.
     * @return KwlReturnObject
     * @throws ServiceException 
     */
    @Override    
    public KwlReturnObject getShippingListCount(String shipNumber, String companyid) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        String q = "from ShippingDeliveryOrder where shipNumber=? and company.companyID=?";
        list = executeQuery( q, new Object[]{shipNumber, companyid});
        count = list.size();
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject savePackingDoList(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String billid = (String) dataMap.get("billid");

            PackingDoList packingDoList = new PackingDoList();
            if (StringUtil.isNullOrEmpty(billid)) {
                packingDoList.setDeleted(false);
            }
            if (dataMap.containsKey("entrynumber")) {
                packingDoList.setPackNumber((String) dataMap.get("entrynumber"));
            }

            if (dataMap.containsKey("memo")) {
                packingDoList.setMemo((String) dataMap.get("memo"));
            }

            if (dataMap.containsKey("customerid")) {
                packingDoList.setCustomerid((String) dataMap.get("customerid"));
            }
            
            if (dataMap.containsKey("customer")) {
                packingDoList.setCustomer((String) dataMap.get("customer"));
            }

            if (dataMap.containsKey("letterofcn")) {
                packingDoList.setLetterOfCn((String) dataMap.get("letterofcn"));
            }

            if (dataMap.containsKey("partialshipment")) {
                packingDoList.setPartialShipment((String) dataMap.get("partialshipment"));
            }

            if (dataMap.containsKey("transhipment")) {
                packingDoList.setTranshipment((String) dataMap.get("transhipment"));
            }

            if (dataMap.containsKey("portofloading")) {
                packingDoList.setPortOfLoading((String) dataMap.get("portofloading"));
            }

            if (dataMap.containsKey("portofdischarge")) {
                packingDoList.setPortOfDischarge((String) dataMap.get("portofdischarge"));
            }

            if (dataMap.containsKey("vessel")) {
                packingDoList.setVessel((String) dataMap.get("vessel"));
            }

            if (dataMap.containsKey("incoterms")) {
                packingDoList.setIncoterms((String) dataMap.get("incoterms"));
            }

            if (dataMap.containsKey("dateoflc")) {
                packingDoList.setDateOfLc((Date) dataMap.get("dateoflc"));
            }
            
            if (dataMap.containsKey("packingdate")) {
                packingDoList.setPackingDate((Date) dataMap.get("packingdate"));
            }

            if (dataMap.containsKey("status")) {
                MasterItem masterItem = dataMap.get("status") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("status"));
                packingDoList.setStatus(masterItem);
            }

            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                packingDoList.setCompany(company);
            }
            if (dataMap.containsKey("packingdolistdetails")) {
                if (dataMap.get("packingdolistdetails") != null) {
                    packingDoList.setRows((Set<PackingDoListDetail>) dataMap.get("packingdolistdetails"));
                }
            }

            saveOrUpdate(packingDoList);
            list.add(packingDoList);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePackingDoList : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    /**
     * @Desc : Save Shipping DO
     * @param dataMap
     * @return
     * @throws ServiceException
     */
    public KwlReturnObject saveShippingDeliveryOrder(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String billid = (String) dataMap.get("billid");
    
            ShippingDeliveryOrder packingDoList = new ShippingDeliveryOrder();
            if (dataMap.containsKey("entrynumber")) {
                packingDoList.setShipNumber((String) dataMap.get("entrynumber"));
            }
            
            if (dataMap.containsKey("autogenerate")) {
                if (dataMap.get("autogenerate") != null) {
                    packingDoList.setAutoGenerated((boolean) dataMap.get("autogenerate"));
                }
            }
            if (dataMap.containsKey("seqnumber")) {
                if (dataMap.get("seqnumber") != null) {
                    packingDoList.setSeqnumber((int) dataMap.get("seqnumber"));
                }
            }
            if (dataMap.containsKey("sequenceformat")) {
                if (dataMap.get("sequenceformat") != null) {
                    packingDoList.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get("sequenceformat")));
                }
            }
            
            if (dataMap.containsKey("memo")) {
                packingDoList.setMemo((String) dataMap.get("memo"));
            }

            if (dataMap.containsKey("letterofcn")) {
                packingDoList.setLetterOfCn((String) dataMap.get("letterofcn"));
            }

            if (dataMap.containsKey("partialshipment")) {
                packingDoList.setPartialShipment((String) dataMap.get("partialshipment"));
            }

            if (dataMap.containsKey("transhipment")) {
                packingDoList.setTranshipment((String) dataMap.get("transhipment"));
            }

            if (dataMap.containsKey("portofloading")) {
                packingDoList.setPortOfLoading((String) dataMap.get("portofloading"));
            }

            if (dataMap.containsKey("portofdischarge")) {
                packingDoList.setPortOfDischarge((String) dataMap.get("portofdischarge"));
            }

            if (dataMap.containsKey("vessel")) {
                packingDoList.setVessel((String) dataMap.get("vessel"));
            }

            if (dataMap.containsKey("incoterms")) {
                packingDoList.setIncoterms((String) dataMap.get("incoterms"));
            }

            if (dataMap.containsKey("dateoflc")) {
                packingDoList.setDateOfLc((Date) dataMap.get("dateoflc"));
            }

            if (dataMap.containsKey("packingdate")) {
                packingDoList.setShippingDate((Date) dataMap.get("packingdate"));
            }

            if (dataMap.containsKey("status")) {
                MasterItem masterItem = dataMap.get("status") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("status"));
                packingDoList.setStatus(masterItem);
            }
            if (dataMap.containsKey("customerid")) {
                Customer customer = dataMap.get("customerid") == null ? null : (Customer) get(Customer.class, (String) dataMap.get("customerid"));
                packingDoList.setCustomer(customer);
            }

            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                packingDoList.setCompany(company);
            }

            saveOrUpdate(packingDoList);
            list.add(packingDoList);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePackingDoList : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
        public KwlReturnObject saveShippingDeliveryOrderDetails(Map<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String billid = (String) dataMap.get("billid");

            ShippingDeliveryDetail shippingDeliveryDetail = new ShippingDeliveryDetail();
    
            if (dataMap.containsKey("actualqty")) {
                
                shippingDeliveryDetail.setActualQuantity((double)dataMap.get("actualqty"));
            }
                        if (dataMap.containsKey("shipqty")) {
                
                shippingDeliveryDetail.setShipQuantity((double)dataMap.get("shipqty"));
            }
            if (dataMap.containsKey("shipdo")) {
                ShippingDeliveryOrder shippingDeliveryOrder = dataMap.get("shipdo") == null ? null : (ShippingDeliveryOrder) get(ShippingDeliveryOrder.class, (String) dataMap.get("shipdo"));
                shippingDeliveryDetail.setShippingDeliveryOrder(shippingDeliveryOrder);
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                shippingDeliveryDetail.setProduct(product);
            }

            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                shippingDeliveryDetail.setCompany(company);
            }
            if (dataMap.containsKey("stockadjustmentid")) {
                StockAdjustment stockAdjustment = dataMap.get("stockadjustmentid") == null ? null : (StockAdjustment) get(StockAdjustment.class, (String) dataMap.get("stockadjustmentid"));
                shippingDeliveryDetail.setStockAdjustment(stockAdjustment);
            }
                        if (dataMap.containsKey("dod")) {
                DeliveryOrderDetail deliveryOrderDetail = dataMap.get("dod") == null ? null : (DeliveryOrderDetail) get(DeliveryOrderDetail.class, (String) dataMap.get("dod"));
                shippingDeliveryDetail.setDeliveryOrderDetail(deliveryOrderDetail);
            }
            saveOrUpdate(shippingDeliveryDetail);
            list.add(shippingDeliveryDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePackingDoList : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    @Override
    public KwlReturnObject savePackingDolistDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String packingDoListDetailId = (String) dataMap.get("id");

            PackingDoListDetail packingDoListDetail = new PackingDoListDetail();
            if (!StringUtil.isNullOrEmpty(packingDoListDetailId)) {
                packingDoListDetail = (PackingDoListDetail) get(PackingDoListDetail.class, packingDoListDetailId);
            }

            if (dataMap.containsKey("packingDoList")) {
                PackingDoList packingDoList = dataMap.get("packingDoList") == null ? null : (PackingDoList) get(PackingDoList.class, (String) dataMap.get("packingDoList"));
                packingDoListDetail.setPackingDoList(packingDoList);
            }
            if (dataMap.containsKey("srno")) {
                packingDoListDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("quantityindo")) {
                packingDoListDetail.setActualQuantity((Double) dataMap.get("quantityindo"));
            }
            if (dataMap.containsKey("shipquantity")) {
                packingDoListDetail.setDeliveredQuantity((Double) dataMap.get("shipquantity"));
            }

            if (dataMap.containsKey("remark")) {
                packingDoListDetail.setRemark(StringUtil.DecodeText(StringUtil.isNullOrEmpty((String) dataMap.get("remark")) ? "" : (String) dataMap.get("remark")));
            }
           
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                packingDoListDetail.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                packingDoListDetail.setCompany(company);
            }

            if (dataMap.containsKey("deliveryorder")) {
                DeliveryOrder deliveryorder = dataMap.get("deliveryorder") == null ? null : (DeliveryOrder) get(DeliveryOrder.class, (String) dataMap.get("deliveryorder"));
                packingDoListDetail.setDeliveryOrder(deliveryorder);
            }

            saveOrUpdate(packingDoListDetail);
            list.add(packingDoListDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePackingDolistDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject saveShipingDoDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String shipingDoDetailsId = (String) dataMap.get("id");

            ShipingDoDetails shipingDoDetails = new ShipingDoDetails();
            if (!StringUtil.isNullOrEmpty(shipingDoDetailsId)) {
                shipingDoDetails = (ShipingDoDetails) get(ShipingDoDetails.class, shipingDoDetailsId);
            }

            if (dataMap.containsKey("packingDoList")) {
                PackingDoList packingDoList = dataMap.get("packingDoList") == null ? null : (PackingDoList) get(PackingDoList.class, (String) dataMap.get("packingDoList"));
                shipingDoDetails.setPackingDoList(packingDoList);
            }

            if (dataMap.containsKey("packingDoListDetail")) {
                PackingDoListDetail packingDoListDetail = dataMap.get("packingDoListDetail") == null ? null : (PackingDoListDetail) get(PackingDoListDetail.class, (String) dataMap.get("packingDoListDetail"));
                shipingDoDetails.setPackingDoListDetails(packingDoListDetail);
            }
            if (dataMap.containsKey("quantityindo")) {
                shipingDoDetails.setActualQuantity((Double) dataMap.get("quantityindo"));
            }

            if (dataMap.containsKey("shipquantity")) {
                shipingDoDetails.setShipQuantity((Double) dataMap.get("shipquantity"));
            }

            if (dataMap.containsKey("shipedquantity")) {
                shipingDoDetails.setShipedQuantity((Double) dataMap.get("shipedquantity"));
            }

            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                shipingDoDetails.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                shipingDoDetails.setCompany(company);
            }

            if (dataMap.containsKey("deliveryorder")) {
                DeliveryOrder deliveryorder = dataMap.get("deliveryorder") == null ? null : (DeliveryOrder) get(DeliveryOrder.class, (String) dataMap.get("deliveryorder"));
                shipingDoDetails.setDeliveryOrder(deliveryorder);
            }

            saveOrUpdate(shipingDoDetails);
            list.add(shipingDoDetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveShipingDoDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject savePackingDoListPackingDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String packingDoListPackingDetailsId = (String) dataMap.get("id");

            ItemPackingDetail itemPackingDetails = new ItemPackingDetail();
            if (!StringUtil.isNullOrEmpty(packingDoListPackingDetailsId)) {
                itemPackingDetails = (ItemPackingDetail) get(ItemPackingDetail.class, packingDoListPackingDetailsId);
            }

            if (dataMap.containsKey("packingDoList")) {
                PackingDoList packingDoList = dataMap.get("packingDoList") == null ? null : (PackingDoList) get(PackingDoList.class, (String) dataMap.get("packingDoList"));
                itemPackingDetails.setPackingDoList(packingDoList);
            }
            if (dataMap.containsKey("packingDoListDetail")) {
                PackingDoListDetail packingDoListDetail = dataMap.get("packingDoListDetail") == null ? null : (PackingDoListDetail) get(PackingDoListDetail.class, (String) dataMap.get("packingDoListDetail"));
                itemPackingDetails.setPackingDoListDetails(packingDoListDetail);
            }

            if (dataMap.containsKey("packagequantity")) {
                itemPackingDetails.setPackageQuantity((Double) dataMap.get("packagequantity"));
            }

            if (dataMap.containsKey("packageperquantity")) {
                itemPackingDetails.setItemPerPackage((Double) dataMap.get("packageperquantity"));
            }

            if (dataMap.containsKey("grossweight")) {
                itemPackingDetails.setGrossWeight((Double) dataMap.get("grossweight"));
            }
            
            if (dataMap.containsKey("totalpackagequantity")) {
                itemPackingDetails.setTotalItems((Double) dataMap.get("totalpackagequantity"));
            }
           
            if (dataMap.containsKey("packageid")) {
                Packages packages = dataMap.get("packageid") == null ? null : (Packages) get(Packages.class, (String) dataMap.get("packageid"));
                itemPackingDetails.setPackages(packages);
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                itemPackingDetails.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                itemPackingDetails.setCompany(company);
            }

            saveOrUpdate(itemPackingDetails);
            list.add(itemPackingDetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePackingDoListPackingDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    public KwlReturnObject getPackingDoLists(HashMap<String, Object> request) throws ServiceException {
          List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            boolean isdodetailsJoin = false;
            String productid = "";
            if (request.containsKey(Constants.productid) && request.get(Constants.productid) != null) {
                productid = (String) request.get(Constants.productid);
            }
            String productCategoryid = "";
            if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.get(Constants.productCategoryid);
            }
            ArrayList params = new ArrayList();
            String companyid = AccountingManager.getFilterInString((String) request.get(Constants.companyKey));
            boolean deleted = Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) request.get("nondeleted"));
            String conditionSQL = "";
            if (nondeleted) {
                conditionSQL = "  where packingdolist.deleteflag='F' and packingdolist.company in " + companyid + " ";
            } else if (deleted) {
                conditionSQL += " where packingdolist.deleteflag='T' and packingdolist.company in " + companyid + " ";
            } else {
                conditionSQL += " where packingdolist.company in " + companyid + " ";
            }
            String searchJoin = "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                String[] searchcol = new String[]{"packingdolist.packnumber", "packingdolist.memo", "product.name","product.productid"};
                Map map = StringUtil.insertParamSearchStringMap(params, ss, 4);
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                conditionSQL += searchQuery;
                searchJoin = " inner join packingdolistdetails on packingdolistdetails.packingdolist = packingdolist.id "
                        + " inner join product on packingdolistdetails.product = product.id ";   
                isdodetailsJoin = true;
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            String joinString = "";
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and (packingdolist.packingdate >=? and packingdolist.packingdate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String billID = (String) request.get(InvoiceConstants.billid);
            if (!StringUtil.isNullOrEmpty(billID)) {
                params.add(billID);
                conditionSQL += " and packingdolist.id = ? ";
            }
            String joinString3 = "";
            if (!StringUtil.isNullOrEmpty(productid)) {
                if (!isdodetailsJoin) {
                    joinString3 = " inner join packingdolistdetails on packingdolistdetails.packingdolist = packingdolist.id ";
                    isdodetailsJoin = true;
                }
                params.add(productid);
                conditionSQL += " and packingdolistdetails.product = ? ";
            }
            if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                if (!isdodetailsJoin) {
                    joinString3 = " inner join packingdolistdetails on packingdolistdetails.packingdolist = packingdolist.id ";
                    isdodetailsJoin = true;
                }
                params.add(productCategoryid);
                conditionSQL += " and packingdolistdetails.product in (select productid from productcategorymapping where productcategory = ?) ";
            } 
            String orderBy = "";
            String[] stringSort = null;
            String sort_Col = "";
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                stringSort = columSortDeliveryOrder(Col_Name, Col_Dir);
                orderBy += stringSort[0];
                sort_Col += stringSort[1];
            } else {
                orderBy += " order by packingdate desc";
                sort_Col += " ,packingdolist.packingdate ";
            }
            String mysqlQuery = " select distinct(packingdolist.id)" + sort_Col + "  from packingdolist "
                    + joinString3 + searchJoin + joinString
                    + conditionSQL + orderBy;
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
                if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                    list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.getPackingDoLists:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    /*
        Function to get actual packed records from database
    */
    public KwlReturnObject getPackingLists(HashMap<String, Object> request) throws ServiceException {
          List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            String ss = (String) request.get(Constants.ss);
            boolean isdodetailsJoin = false;
            String productid = "";
            if (request.containsKey(Constants.productid) && request.get(Constants.productid) != null) {
                productid = (String) request.get(Constants.productid);
            }
            String productCategoryid = "";
            if (request.containsKey(Constants.productCategoryid) && request.get(Constants.productCategoryid) != null) {
                productCategoryid = (String) request.get(Constants.productCategoryid);
            }
            ArrayList params = new ArrayList();
            String companyid = AccountingManager.getFilterInString((String) request.get(Constants.companyKey));
            boolean deleted = Boolean.parseBoolean((String) request.get("deleted"));
            boolean nondeleted = Boolean.parseBoolean((String) request.get("nondeleted"));
            String conditionSQL = "";
            if (nondeleted) {
                conditionSQL = "  where packing.deleteflag='F' and packing.company in " + companyid + " ";
            } else if (deleted) {
                conditionSQL += " where packing.deleteflag='T' and packing.company in " + companyid + " ";
            } else {
                conditionSQL += " where packing.company in " + companyid + " ";
            }
            boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
            if (request.containsKey("upsIntegrationFlag")) {
                upsIntegrationFlag = (boolean) request.get("upsIntegrationFlag");
            }
            String searchJoin = "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                List<String> searchcolList = new ArrayList<String>(Arrays.asList(new String[]{"packing.packnumber", "packing.memo", "product.name","product.productid","do.donumber"}));
                if(upsIntegrationFlag) {    //To allow Quick Search on 'Shipment Tracking Number(s)'
                    searchcolList.add("upspackagedetails.trackingnumber");
                }
                Map map = StringUtil.insertParamSearchStringMap(params, ss, searchcolList.size());
                StringUtil.insertParamSearchString(map);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcolList.toArray(new String[searchcolList.size()]));
                conditionSQL += searchQuery;
                searchJoin = " inner join packingdetails on packingdetails.packinglist = packing.id "
                        + " left join itemdetail ON itemdetail.packingdetails = packingdetails.id "
                        + " inner join product on packingdetails.product = product.id "
                        + "inner join dodetails dod on  packingdetails.dodetailid=dod.id "
                        + "inner join deliveryorder do on  dod.deliveryorder=do.id";
                if(upsIntegrationFlag) {    //To allow Quick Search on 'Shipment Tracking Number(s)'
                    searchJoin += " left join upspackagedetails ON upspackagedetails.packing = packing.id ";
                }
                isdodetailsJoin = true;
            }
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            String joinString = "";
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and (packing.packingdate >=? and packing.packingdate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            String billID = (String) request.get(InvoiceConstants.billid);
            if (!StringUtil.isNullOrEmpty(billID)) {
                params.add(billID);
                conditionSQL += " and packing.id = ? ";
            }
            String joinString3 = "";
            if (!StringUtil.isNullOrEmpty(productid)) {
                if (!isdodetailsJoin) {
                    joinString3 = " inner join packingdetails on packingdetails.packinglist = packing.id ";
                    isdodetailsJoin = true;
                }
                params.add(productid);
                conditionSQL += " and packingdetails.product = ? ";
            }
            if (!StringUtil.isNullOrEmpty(productCategoryid)) {
                if (!isdodetailsJoin) {
                    joinString3 = " inner join packingdetails on packingdetails.packinglist = packing.id ";
                    isdodetailsJoin = true;
                }
                params.add(productCategoryid);
                conditionSQL += " and packingdetails.product in (select productid from productcategorymapping where productcategory = ?) ";
            } 
            String orderBy = "";
            String[] stringSort = null;
            String sort_Col = "";
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                stringSort = columSortDeliveryOrder(Col_Name, Col_Dir);
                orderBy += stringSort[0];
                sort_Col += stringSort[1];
            } else {
                orderBy += " order by packingdate desc";
                sort_Col += " ,packing.packingdate ";
            }
            String mysqlQuery = " select distinct(packing.id)" + sort_Col + "  from packing "
                    + joinString3 + searchJoin + joinString
                    + conditionSQL + orderBy;
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
                if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                    list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.getPackingDoLists:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    public KwlReturnObject getPackingDoListDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from PackingDoListDetail";
        return buildNExecuteQuery( query, requestParams);
    }
    /*
        Function to get actual packed row records from database
    */
    public KwlReturnObject getPackingDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from PackingDetail";
        return buildNExecuteQuery( query, requestParams);
    }

    public KwlReturnObject getShipingDoDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from ShipingDoDetails";
        return buildNExecuteQuery( query, requestParams);
    }
    
    public KwlReturnObject getPackingDoDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from DoDetails";
        return buildNExecuteQuery( query, requestParams);
    }

    public KwlReturnObject getItemPackingDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from ItemPackingDetail";
        return buildNExecuteQuery( query, requestParams);
    }
    /*
        Function to get actual packing details from database
    */
    public KwlReturnObject getItemDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from ItemDetail";
        return buildNExecuteQuery( query, requestParams);
    }
    
    /**
     * Method to get UPS package details; used in UPS Integration functionality
     */
    public KwlReturnObject getUpsPackageDetails(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from UpsPackageDetails";
        return buildNExecuteQuery(query, requestParams);
    }
    
    public double getDoQuantityWhoseInvoiceCreated(HashMap<String, Object> requestParams) throws ServiceException{
        double quantity=0;
        
        
        String companyid = (String) requestParams.get("companyid");
        String customerid = "";
        String custWarehouse = "";
        String productid = "";
        String wareconditin = "";
        String custcondition = "";
        ArrayList params = new ArrayList();
            
        if (!StringUtil.isNullOrEmpty((String) requestParams.get("productid"))) {
            productid = (String) requestParams.get("productid");
            params.add(productid);
        }
        params.add(companyid);
        if (!StringUtil.isNullOrEmpty((String) requestParams.get("customerid"))) {
            customerid = (String) requestParams.get("customerid");
            custcondition += " and  invoice.customer=? ";
            params.add(customerid);
        }
        if (!StringUtil.isNullOrEmpty((String) requestParams.get("custWarehouse"))) {
            custWarehouse = (String) requestParams.get("custWarehouse");
            wareconditin += " and invoice.custWarehouse=? ";
            params.add(custWarehouse);
        }
        String query = " select -sum(inventory.consignuomquantity) from invoice  "
                + " inner join invoicedetails on invoicedetails.invoice = invoice.id  "
                + " inner join inventory on invoicedetails.id = inventory.id where inventory.product=? and  inventory.company=? and inventory.isconsignment='T'" + custcondition + wareconditin;
        List list = executeSQLQuery( query, params.toArray());
        if (list.size() > 0 && !list.contains(null)) {
            quantity = (Double) list.get(0); 
        }
        return quantity;
    }

    public double getReturnQuantity(HashMap<String, Object> requestParams) throws ServiceException{
        double returnQuantity=0;
        String companyid = (String) requestParams.get(Constants.companyKey);
        String customerid = "";
        String custWarehouse = "";
        String productid = "";
        String wareconditin = "";
        String custcondition = "";
        if (!StringUtil.isNullOrEmpty((String) requestParams.get("productid"))) {
            productid = (String) requestParams.get("productid");
        }
        ArrayList params = new ArrayList();
        params.add(productid);
        params.add(companyid);
        if (!StringUtil.isNullOrEmpty((String) requestParams.get("customerid"))) {
            customerid = (String) requestParams.get("customerid");
            custcondition += " and  salesreturn.customer=? ";
            params.add(customerid);
        }
        if (!StringUtil.isNullOrEmpty((String) requestParams.get("custWarehouse"))) {
            custWarehouse = (String) requestParams.get("custWarehouse");
            wareconditin += " and salesreturn.custWarehouse=? ";
            params.add(custWarehouse);
        }
       
        String query = " select -sum(inventory.consignuomquantity) from salesreturn  " 
                + " inner join srdetails on srdetails.salesreturn = salesreturn.id  "      
                + " inner join inventory on srdetails.id = inventory.id "             
                + " inner join dodetails dod on dod.id=srdetails.dodetails"          
                + " inner join deliveryorder d on d.id=dod.deliveryorder "         
                + " where inventory.product=? and  inventory.company=? "          
                + " and inventory.isconsignment='T' and dod.islineitemclosed='F' and d.isdoclosed='F' "+custcondition+wareconditin;
        List list = executeSQLQuery( query, params.toArray());
        if (list.size() > 0 && !list.contains(null)) {
            returnQuantity = (Double) list.get(0); 
        }
        return returnQuantity;
    }
 public String getCustomerId(String companyid, String acccode) throws ServiceException {
        ArrayList params = new ArrayList();
        String id = "";
        params.add(companyid);
        params.add(acccode);
        String query = "from Customer c where c.company.companyID=? and c.acccode=?";
        List list = executeQuery( query, params.toArray());
        Iterator it = list.iterator();
    
        while (it.hasNext()) {
            Customer obj = (Customer) it.next();
            id = obj.getID();
    
        }
        return id;
    }

    public String getproductId(String companyid, String acccode) throws ServiceException {
        ArrayList params = new ArrayList();
        String id = "";
        params.add(companyid);
        params.add(acccode);
        String query = "from Product p where p.company.companyID=? and p.productid=?";
        List list = executeQuery( query, params.toArray());
        Iterator it = list.iterator();

        while (it.hasNext()) {
            Product obj = (Product) it.next();
            id = obj.getID();

        }
        return id;
    }
    
    public String getInvoiceId(String companyid, String invoiceno) throws ServiceException {
        ArrayList params = new ArrayList();
        String id = "";
        params.add(companyid);
        params.add(invoiceno);
        String query = "from Invoice i where i.company.companyID=? and i.invoiceNumber=?";
        List list = executeQuery( query, params.toArray());
        Iterator it = list.iterator();
    
        while (it.hasNext()) {
            Invoice obj = (Invoice) it.next();
            id = obj.getID();

        }
        return id;
    }
    
   @Override 
    public String getDeliveryOrderId(String companyid, String dono) throws ServiceException {
        ArrayList params = new ArrayList();
        String id = "";
        params.add(companyid);
        params.add(dono);
        String query = "from DeliveryOrder do where do.company.companyID=? and do.deliveryOrderNumber=?";
        List<DeliveryOrder> list = executeQuery(query, params.toArray());

        for (DeliveryOrder obj : list) {
            id = obj.getID();
        }
        return id;
    }

    public KwlReturnObject getReceiptFromInvoice(String invoiceid, String companyid) throws ServiceException {
        String selQuery = "from ReceiptDetail rd  where rd.invoice.ID=? and rd.receipt.deleted=false and rd.company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject deletePackingDoListsPermanent(HashMap<String, Object> requestParams) throws ServiceException {
        String delQuery = "",  delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "";
        int numtotal = 0;
        try {
            if (requestParams.containsKey("packId") && requestParams.containsKey("companyid")) {
                int numRows4 = 0,numRows2 = 0,numRows3 = 0,numRows5 = 0;
                ArrayList params1 = new ArrayList();
                params1.add(requestParams.get("companyid"));
                params1.add(requestParams.get("packId"));

                String myquery = "select pdld.id from packingdolistdetails pdld inner join packingdolist pdl on pdld.packingdolist=pdl.id where pdl.company = ? and pdl.id=?";
//                String myquery = "select id from packingdolistdetails where packingdolist in (select id from packingdolist where company = ? and id=?)";
                List list = executeSQLQuery( myquery, params1.toArray());
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    String packingdolistdetailsid = itr.next().toString();
                    ArrayList params2 = new ArrayList();
                    params2.add(requestParams.get("companyid"));
                    params2.add(requestParams.get("packId"));
                    params2.add(requestParams.get("companyid"));
                    params2.add(packingdolistdetailsid);
                    delQuery2 = " delete from shipingdodetails where packingdolist in (select id from packingdolist where company =?  and id=?) and packingdolistdetails in (select id from packingdolistdetails where company =?  and id=?) ";
                    numRows2 += executeSQLUpdate( delQuery2, params2.toArray());

                    delQuery3 = " delete from itempackingdetails where packingdolist in (select id from packingdolist where company =?  and id=?) and packingdolistdetails in (select id from packingdolistdetails where company =?  and id=?) ";
                    numRows3 += executeSQLUpdate( delQuery3, params2.toArray());
                }

                ArrayList params4 = new ArrayList();
                params4.add(requestParams.get("companyid"));
                params4.add(requestParams.get("packId"));
                delQuery4 = " delete from packingdolistdetails where packingdolist in (select id from packingdolist where company =?  and id=?) ";
                numRows4 = executeSQLUpdate( delQuery4, params4.toArray());

                ArrayList params5 = new ArrayList();
                params5.add(requestParams.get("companyid"));
                params5.add(requestParams.get("packId"));
                delQuery5 = "delete from packingdolist where company = ? and id=?";
                numRows5 = executeSQLUpdate( delQuery5, params5.toArray());
                
                numtotal = numRows2 + numRows3 + numRows4 +numRows5;
            }

            return new KwlReturnObject(true, "PackingDoList has been deleted successfully.", null, null, numtotal);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete PackingDoList as its referance child field is not deleted.", ex);//+ex.getMessage(), ex);
        }

    }
    public KwlReturnObject deleteCreditNotesPermanent(HashMap<String, Object> requestParams) throws ServiceException {

        String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "", delQuery6 = "", delQuery7 = "", delQuery8 = "";
        int numtotal = 0;
        try {
            if (requestParams.containsKey("cnid") && requestParams.containsKey("companyid")) {

                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("cnid"));
//                String myquery = "select id from cndetails where creditNote in (select id from creditnote where company =? and id = ?)";
                String myquery = "select cnd.id from cndetails cnd inner join creditnote cn on cnd.creditNote=cn.id where cn.company =? and cn.id = ?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {

                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }

                ArrayList params5 = new ArrayList();
                params5.add(requestParams.get("companyid"));
                params5.add(requestParams.get("cnid"));
//                delQuery5 = "delete from cndetails where creditNote in (select id from creditnote where company =? and id = ?)";
                delQuery5 = "delete cnd from cndetails cnd inner join creditnote cn on cnd.creditNote=cn.id where cn.company =? and cn.id = ?";
                int numRows5 = executeSQLUpdate( delQuery5, params5.toArray());


//                ArrayList params = new ArrayList();
//                params.add(requestParams.get("companyid"));
//                //   params.add(requestParams.get("invoiceid"));
//                delQuery = "delete  from inventory where company =?  and id in(" + idStrings + ") ";
//                int numRows = executeSQLUpdate( delQuery, params.toArray());
                String companyid = (String) requestParams.get("companyid");
                String selQuery = "from Inventory where company.companyID = ? and  ID in (" + idStrings + ") ";
                List resultList = executeQuery( selQuery, new Object[]{companyid});
                Iterator itrInv = resultList.iterator();
                while (itrInv.hasNext()) {
                    Inventory inventory = (Inventory) itrInv.next();
                    if (inventory != null && inventory.isDeleted() == false) {
                        if (inventory.isCarryIn()) {
                            inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() - inventory.getBaseuomquantity());// minus Purchase and Plus Sales (for Reverse effect for quantity)
                        } else {
                            inventory.getProduct().setAvailableQuantity(inventory.getProduct().getAvailableQuantity() + inventory.getBaseuomquantity());
                        }
                    }
                }
                deleteAll(resultList);
                int numRows = resultList.size();


                ArrayList params9 = new ArrayList();
                params9.add(requestParams.get("companyid"));
                params9.add(requestParams.get("cnid"));
                String myquery1 = " select journalentry from creditnote where company = ? and id=?";
                List list1 = executeSQLQuery( myquery1, params9.toArray());
                Iterator itr1 = list1.iterator();
                String journalent = "";
                while (itr1.hasNext()) {
                    Object jeidobj = itr1.next();
                    String jeidi = (jeidobj != null) ? jeidobj.toString() : "";
                    journalent += "'" + jeidi + "',";
                }
                if (!StringUtil.isNullOrEmpty(journalent)) {
                    journalent = journalent.substring(0, journalent.length() - 1);
                }


                ArrayList params1 = new ArrayList();
                params1.add(requestParams.get("companyid"));
                params1.add(requestParams.get("companyid"));
                params1.add(requestParams.get("cnid"));
                delQuery1 = "delete  from accjedetailcustomdata where jedetailId in (select id from jedetail where company = ? and journalEntry in (select journalentry from creditnote where company =? and id = ?))";
                int numRows1 = executeSQLUpdate( delQuery1, params1.toArray());

                ArrayList params11 = new ArrayList();
                params11.add(requestParams.get("companyid"));
                params11.add(requestParams.get("cnid"));
                delQuery8 = "delete  from cntaxentry  where company =? and creditnote= ?";
                int numRows8 = executeSQLUpdate( delQuery8, params11.toArray());
                
                ArrayList params6 = new ArrayList();
      
               params6.add(requestParams.get("cnid"));
               
               /*
                * Deleting Linking information from CreditNoteLinking Table 
                * when Credit note is linked with sales invoice
                */
               
               delQuery6 = "delete  from creditnotelinking  where docid = ?";
               int numRows9 = executeSQLUpdate( delQuery6, params6.toArray());
               
               params6.clear(); 
               params6.add(requestParams.get("companyid"));
               params6.add(requestParams.get("cnid"));
               delQuery6 = "delete  from creditnote  where company =? and id = ?";
               int numRows6 = executeSQLUpdate( delQuery6, params6.toArray());

                ArrayList params10 = new ArrayList();
                params10.add(requestParams.get("companyid"));
                params10.add(requestParams.get("cnid"));
                delQuery7 = "delete from cndiscount where company =? and creditnote =?";
                int numRows7 = executeSQLUpdate( delQuery7, params10.toArray());

                int numRows3 = 0;
                int numRows4 = 0;
                int numRows2 = 0;
                if (!requestParams.containsKey("creditNote")) {
                    ArrayList params3 = new ArrayList();
                    params3.add(requestParams.get("companyid"));
                    delQuery3 = "delete from jedetail where company = ? and journalEntry in (" + journalent + ") ";
                    numRows3 = executeSQLUpdate( delQuery3, params3.toArray());

                    ArrayList params4 = new ArrayList();
                    delQuery4 = "delete from journalentry where id  in (" + journalent + ")";
                    numRows4 = executeSQLUpdate( delQuery4, params4.toArray());

                    ArrayList params2 = new ArrayList();
                    delQuery2 = "delete  from accjecustomdata where journalentryId in (" + journalent + ")";
                    numRows2 = executeSQLUpdate( delQuery2, params2.toArray());
                }

                numtotal = numRows + numRows1 + numRows2 + numRows3 + numRows4 + numRows5 + numRows6 + numRows7 + numRows8 + numRows9;
            }

            return new KwlReturnObject(true, "Credit Note has been deleted successfully.", null, null, numtotal);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Credit Note as its referance child field is not deleted.", ex);//+ex.getMessage(), ex);
        }
    }
    public String getCreditNoteIdFromSRId(String srid, String companyid) throws ServiceException {
        ArrayList params = new ArrayList();
        String creditNoteId = "";
        params.add(srid);
        params.add(companyid);
        String query = "select ID from CreditNote cr where cr.salesReturn.ID = ? and cr.company.companyID=? ";
        List list = executeQuery( query, params.toArray());
        if (!list.isEmpty() && !list.equals("null") && list.size() > 0) {
            creditNoteId = (String) list.get(0);
        }
        return creditNoteId;
    }
    //function for checking Serial No used in delivery order or not 

    public KwlReturnObject getSerialNoUsedinConsignmentInvoiceFromDO(String invoiceid, String companyid) throws ServiceException {
        String selQuery = " select serialid  from serialdocumentmapping  inner join  dodetails on dodetails.id=documentid where dodetails.deliveryorder=? and dodetails.company=? and serialdocumentmapping.isconsignment='T' "; // issue unable to delete GRN as company column become ambigious
        List list = executeSQLQuery( selQuery, new Object[]{invoiceid, companyid});
        String docids = "";
        List lst = new ArrayList();
        Iterator itrSerial = list.iterator();
        while (itrSerial.hasNext()) {
            String serialstring = itrSerial.next().toString();
            docids += "'" + serialstring + "',";
        }

        if (!StringUtil.isNullOrEmpty(docids)) {
            docids = docids.substring(0, docids.length() - 1);
        }
        if (!StringUtil.isNullOrEmpty(docids)) {
            selQuery = " select serialid  from serialdocumentmapping where serialid in (" + docids + ") and transactiontype in(2)";
            lst = executeSQLQuery( selQuery);



        }
        return new KwlReturnObject(true, "", null, lst, lst.size());
    }
    public KwlReturnObject getbatchNoUsedinConsignmentInvoiceFromDO(String invoiceid, String companyid) throws ServiceException {
        String selQuery = " select batchmapid  from locationbatchdocumentmapping  inner join  dodetails on dodetails.id=documentid where dodetails.deliveryorder=? and dodetails.company=? and locationbatchdocumentmapping.isconsignment='T' "; // issue unable to delete GRN as company column become ambigious
        List list = executeSQLQuery( selQuery, new Object[]{invoiceid, companyid});
        String docids = "";
        List lst = new ArrayList();
        Iterator itrSerial = list.iterator();
        while (itrSerial.hasNext()) {
            String serialstring = itrSerial.next().toString();
            docids += "'" + serialstring + "',";
        }

        if (!StringUtil.isNullOrEmpty(docids)) {
            docids = docids.substring(0, docids.length() - 1);
        }
        if (!StringUtil.isNullOrEmpty(docids)) {
            selQuery = " select batchmapid  from locationbatchdocumentmapping where batchmapid in (" + docids + ") and transactiontype in(2)";
            lst = executeSQLQuery( selQuery);



        }
        return new KwlReturnObject(true, "", null, lst, lst.size());
    }
    public String getCustomerIdForPOS(String companyid) throws ServiceException {
        ArrayList params = new ArrayList();
        String id = "";
        params.add(companyid);
        String query = "select customerForPOS from ExtraCompanyPreferences  where id=?";
        List list = executeQuery( query, params.toArray());
        if (!list.isEmpty() && !list.equals("null") && list.size() > 0) {
            id = (String) list.get(0);
        }
        return id;
    }

    @Override
    public int getPendingapprovalForVendorInvoice(String companyid, String InvoiceId) throws ServiceException {
        ArrayList params = new ArrayList();
        int id = 0;
        params.add(companyid);
        params.add(InvoiceId);
        String query = "select pendingapproval from GoodsReceipt  where company.companyID=? and ID=?";
        List list = executeQuery( query, params.toArray());
        if (!list.isEmpty() && !list.equals("null") && list.size() > 0) {
            id = (Integer) list.get(0);
        }
        return id;
    }

    @Override
    public int updateGoodsReceipt(JSONObject json, HashSet details) throws ServiceException {
        ArrayList params = new ArrayList();
        int res=0;
        try {
            RepeatedInvoices repeatedInvoices=(RepeatedInvoices) get(RepeatedInvoices.class, json.getString("repeateid"));            
            int pendingApproval=json.getInt("pendingapproval");
            String invoiceid = json.getString("invoiceid");
            params.add(repeatedInvoices);
            params.add(pendingApproval);
            params.add(invoiceid);
            String query = "update GoodsReceipt set repeateInvoice=? , pendingapproval=? where ID=?";
            res = executeUpdate( query, params.toArray());
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateInvoice:" + ex, ex);
        }
        return res;
    }

    @Override
    public int updateBillingGoodsReceipt(JSONObject json, HashSet details) throws ServiceException {
          ArrayList params = new ArrayList();
        int res =0;
        try {
            RepeatedInvoices repeatedInvoices=(RepeatedInvoices) get(RepeatedInvoices.class, json.getString("repeateid"));            
            int pendingApproval=json.getInt("pendingapproval");
            String invoiceid = json.getString("invoiceid");
            params.add(repeatedInvoices);
            params.add(pendingApproval);
            params.add(invoiceid);
            String query = "update BillingGoodsReceipt set repeateInvoice=? , pendingapproval=? where ID=?";
            res = executeUpdate( query, params.toArray());
        } catch (JSONException ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateInvoice:" + ex, ex);
        }
        return res;
    }

    
    @Override
    public KwlReturnObject getAdvanceReceiptLinkedWithInvoice(String invoiceId, String companyId) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(invoiceId);
        params.add(companyId);
        String query = "select distinct receipt,receiptlinkdate from linkdetailreceipt lrd where lrd.invoice=? and lrd.company=?";

        List list = executeSQLQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    /**
     * Get LIinking in for invoice
     * @param reqParams
     * @return
     * @throws ServiceException 
     */
    public List getReceiptLinkedToInvoice(JSONObject reqParams) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(reqParams.optString("invoiceid"));
        params.add(reqParams.optString("companyid"));
        params.add(reqParams.optString("invoiceid"));
        params.add(reqParams.optString("companyid"));
        String query = "select distinct lrd.receipt, '1' as advancelink,r.receiptnumber from linkdetailreceipt lrd inner join receipt r on r.id=lrd.receipt where lrd.invoice=? and lrd.company=? "
                + " Union all "
                + " select distinct rd.receipt,'0' as invoicelink,r.receiptnumber from receiptdetails rd inner join receipt r on r.id=rd.receipt where rd.invoice=? and rd.company=?";

        List list = executeSQLQuery(query, params.toArray());
        return list;
    }
    
    /**
     * Get Receipt Term Map for a particular for GR Details
     * @param invoiceDetailsID
     * @return InvoiceTermsMap
     * @throws ServiceException
     */
    @Override
    public KwlReturnObject getInvoiceTermMapFromInvoiceDetail(String invoiceDetailsID) throws ServiceException {
        String query = "from InvoiceTermsMap where invoicedetails.ID= ?";
        List list = executeQuery(query, invoiceDetailsID);
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    
    /**
     * Get Receipt Term Map from Tax id.
     * ERM-782
     * @param requestParams
     * @return InvoiceTermsMap
     * @throws ServiceException
     */
    @Override
    public KwlReturnObject getSalesInvoiceTermsMapList(Map<String, Object> requestParams) throws ServiceException {
        ArrayList paramslist = new ArrayList();
        String Condition = "";
        String taxid = (String) requestParams.get("taxid");
        String companyid = (String) requestParams.get("companyid");
        paramslist.add(taxid);
        paramslist.add(companyid);
        if (requestParams.containsKey("startDate") && requestParams.containsKey("endDate")) {
            Condition = " and itm.invoice.creationDate >= ? and itm.invoice.creationDate <= ?";
            paramslist.add(requestParams.get("startDate"));
            paramslist.add(requestParams.get("endDate"));
        }
        
        String ss = requestParams.containsKey("ss")?(String) requestParams.get("ss"):"";
        
        if (!StringUtil.isNullOrEmpty(ss)) {
            try {
                String[] searchcol = new String[]{"itm.termtax.name", "itm.invoice.customer.name", "itm.invoice.journalEntry.entryNumber","itm.invoice.invoiceNumber"};
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(paramslist, ss, 4);
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                Condition +=searchQuery;
            } catch (SQLException ex) {
                Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
        /*
         *For Advance search
         */

        String mySearchFilterString = "";
        String mySearchFilterString1 = "";
        if (requestParams.containsKey(Constants.Acc_Search_Json) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.Acc_Search_Json))) {
            mySearchFilterString = StringUtil.getMySearchFilterString(requestParams, paramslist);
            if (mySearchFilterString.contains("c.accjecustomdata")) {
                mySearchFilterString = mySearchFilterString.replaceAll("c.accjecustomdata", "itm.invoice.journalEntry.accBillInvCustomData");
            }
       }
        if (requestParams.containsKey(Constants.fixedAssetsDisposalInvoiceSearchJson) && !StringUtil.isNullOrEmpty((String) requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson))) {
            requestParams.put(Constants.Acc_Search_Json, requestParams.get(Constants.fixedAssetsDisposalInvoiceSearchJson));
            requestParams.put(Constants.moduleid, Constants.Acc_FixedAssets_DisposalInvoice_ModuleId);
            mySearchFilterString1 = StringUtil.getMySearchFilterString(requestParams, paramslist);
            if (mySearchFilterString1.contains("c.accjecustomdata")) {
                mySearchFilterString1 = mySearchFilterString1.replaceAll("c.accjecustomdata", "itm.invoice.journalEntry.accBillInvCustomData");
            }
            mySearchFilterString = StringUtil.combineTwoCustomSearchStrings(mySearchFilterString, mySearchFilterString1);
        }
        String query = "from InvoiceTermsMap itm where itm.termtax.ID =? and itm.invoice.company.companyID =? " + Condition + mySearchFilterString;
        List list = executeQuery(query, paramslist.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public void updatePreviousIssue(double precnt, String srID, String companyid) throws ServiceException {
        try{
       String query=" update srdetails set perviousissuecount=? where id=? and company=? ";
       int numRows = executeSQLUpdate( query, new Object[]{precnt, srID,companyid});
        }catch (Exception ex) {
            throw ServiceException.FAILURE("updatePreviousIssue" + ex.getMessage(), ex);
        }
        }

    @Override
    public void closeDeliveryOrdersPermanent(HashMap<String, Object> requestParams, String company) throws ServiceException {
        if (requestParams.containsKey("billid")) {
            String billId = requestParams.get("billid").toString();
            String companyId = requestParams.get("companyid").toString();
            try {
                String query = " update deliveryorder set isdoclosed=? where id=? and company=? ";
                int numRows = executeSQLUpdate( query, new Object[]{'T', billId, company});
                
                // Stock Out closed serials 
                
                String updateDodetails = " UPDATE dodetails dt "
                        + " INNER JOIN serialdocumentmapping lcm ON lcm.documentid=dt.id "
                        + " INNER JOIN newbatchserial sr ON sr.id=lcm.serialid "
                        + " INNER JOIN newproductbatch nb ON nb.id=sr.batch"
                        + " SET sr.quantitydue=0"
                        + " WHERE dt.company=? AND dt.deliveryorder=?  AND nb.location IS NULL ";
                
                    numRows = executeSQLUpdate( updateDodetails, new Object[]{companyId, billId});

            } catch (Exception ex) {
                throw ServiceException.FAILURE("updatePreviousIssue" + ex.getMessage(), ex);
            }
        }
    }
    
    @Override
    public KwlReturnObject getConsignmentLoanDetails(HashMap requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        List returnList = new ArrayList();
        int count = 0;
        try {
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            String conditionSQL = "";
            String start = "";
            String limit = "";
            if (requestParams.containsKey(Constants.start) && requestParams.get(Constants.start) != null && requestParams.containsKey(Constants.limit) && requestParams.get(Constants.limit) != null) {
                start = (String) requestParams.get(Constants.start);
                limit = (String) requestParams.get(Constants.limit);
            }

            String companyid = "";
            if (requestParams.containsKey("companyid") && requestParams.get("companyid") != null) {
                companyid = (String) requestParams.get("companyid");
            }
            params.add(companyid);

            boolean isConsignmentLoanOutstadingReport = false;
            if (requestParams.containsKey("isConsignmentLoanOutstadingReport") && requestParams.get("isConsignmentLoanOutstadingReport") != null) {
                isConsignmentLoanOutstadingReport = requestParams.get("isConsignmentLoanOutstadingReport") != null ? Boolean.FALSE.parseBoolean(requestParams.get("isConsignmentLoanOutstadingReport").toString()) : false;

                if (isConsignmentLoanOutstadingReport) {
                    conditionSQL += " and dod.islineitemclosed ='F' and do.isdoclosed ='F' ";
                    // check full return case
//                   conditionSQL+=" AND dod.id NOT IN (SELECT  srd.dodetails FROM srdetails srd INNER JOIN salesreturn sr ON srd.salesreturn=sr.id WHERE sr.deleteflag=false AND dod.baseuomdeliveredquantity=srd.returnQuantity AND srd.dodetails IS NOT NULL GROUP BY srd.dodetails ) ";
                    conditionSQL += " AND dod.id NOT IN (SELECT dtl.id  FROM dodetails dtl "
                            + " INNER JOIN (SELECT SUM(returnquantity) AS returnqty,dodetails FROM srdetails "
                            + " WHERE company=? AND dodetails IS NOT NULL GROUP BY dodetails ) AS tb ON dtl.id=tb.dodetails AND dtl.deliveredquantity=tb.returnqty "
                            + " WHERE company=? AND dtl.deliveredquantity=tb.returnqty) ";
                    params.add(companyid);
                    params.add(companyid);
                }
            }

            String ss = "";
            if (requestParams.containsKey("ss") && requestParams.get("ss") != null) {
                ss = (String) requestParams.get("ss");

                if (!StringUtil.isNullOrEmpty(ss)) {
                    String[] searchcol = new String[]{"c.name", "do.donumber", "p.productid", "p.name"};
                    Map map = StringUtil.insertParamSearchStringMap(params, ss, 4);
                    StringUtil.insertParamSearchString(map);
                    String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                    conditionSQL += searchQuery;
                }
            }
            
            String startDate = "";
            if (requestParams.containsKey(Constants.REQ_startdate) && requestParams.get(Constants.REQ_startdate) != null) {
                startDate = (String) requestParams.get(Constants.REQ_startdate);
            }
            String endDate = "";
            if (requestParams.containsKey(Constants.REQ_enddate) && requestParams.get(Constants.REQ_enddate) != null) {
                endDate = (String) requestParams.get(Constants.REQ_enddate);
            }
            String dueDate = "";
            if (requestParams.containsKey("duedate") && requestParams.get("duedate") != null) {
                dueDate = (String) requestParams.get("duedate");
            }
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and (do.orderdate >=? and do.orderdate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
             if (!StringUtil.isNullOrEmpty(dueDate) ){
                if(requestParams.containsKey("finalduedate") && requestParams.get("finalduedate") != null){
                conditionSQL += " and (so.todate = ?) ";
                params.add(requestParams.get("finalduedate"));
                }
            }
           String orderBy = "Order By do.orderdate DESC,do.donumber DESC";
            
            String groupBy="";
            if (requestParams.containsKey("groupbydo") && (Boolean)requestParams.get("groupbydo") == true) {
                groupBy = " GROUP BY do.id ";
                orderBy = " Order By dod.srno ASC ";
            }
            
            if (requestParams.containsKey("groupbyso") && (Boolean)requestParams.get("groupbyso") == true) {
                groupBy = " GROUP BY so.id,do.id ";
            }

            String mysqlQuery = " select dod.id as doDetailID, so.id as consignmentRequestID from dodetails  dod "
                    + " inner join deliveryorder do on do.id = dod.deliveryorder "
                    + " left join customer c on c.id = do.customer "
                    + " left join product p on p.id = dod.product "
                    + " left join sodetails sod on sod.id = dod.sodetails "
                    + " left join salesorder so on so.id = sod.salesorder "
                    + " where do.isconsignment = 'T'  and do.deleteflag = 'F' and do.company = ? " + conditionSQL + groupBy + orderBy;
            
            returnList = executeSQLQuery( mysqlQuery, params.toArray());
            count = returnList.size();

            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) { // paging to data
               // returnList = HibernateUtil.executeSQLQueryPaging(hibernateTemplate.getSessionFactory().getCurrentSession(), mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
                returnList = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }

        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("getConsignmentLoanDetails: " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, returnList, count);
    }
    
     public KwlReturnObject getDOdBySodID(String inventoryid) throws ServiceException {
        List list = new ArrayList();
        String q = "select dod from DeliveryOrderDetail dod where dod.sodetails.ID=? ";
        list = executeQuery( q, new Object[]{inventoryid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    
    @Override
    public KwlReturnObject approvePendingInvoice(String invID, String companyid, int status) throws ServiceException{
        String condition="";
        if(status==11){
            condition= ",pendingapproval=0 ";
        }
        String query = "update Invoice set approvestatuslevel = ? "+condition+" where ID=? and company.companyID=?";
        int numRows = executeUpdate( query, new Object[]{status, invID, companyid});
        return new KwlReturnObject(true, "Invoice has been updated successfully.", null, null, numRows);
    }
    
    //Linking Information 
    public KwlReturnObject getPurchaseOrderMerged(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) request.get(Constants.df);
            String start = (String) request.get(Constants.start);
            String limit = (String) request.get(Constants.limit);
            boolean isLeaseSO = false;
            boolean isConsignment = false;
            String conditionSQL = "";
            if (request.containsKey("isLeaseFixedAsset") && request.get("isLeaseFixedAsset") != null) {
                isLeaseSO = (Boolean) request.get("isLeaseFixedAsset");
            }
            if (request.containsKey("isConsignment") && request.get("isConsignment") != null) {
                isConsignment = (Boolean) request.get("isConsignment");
            }

            ArrayList params = new ArrayList();
            String billId = "";
            if (request.containsKey("billId")) {
                billId = (String) request.get("billId");
            }
            String orderBy = "";
            String sort_Col = "";
            String sort_Col1 = "";
            String[] stringSort = null;
            if (request.containsKey("dir") && request.containsKey("sort")) {
                String Col_Name = request.get("sort").toString();
                String Col_Dir = request.get("dir").toString();
                stringSort = columSort(Col_Name, Col_Dir);
                orderBy += stringSort[0];
                sort_Col += stringSort[1];
                sort_Col1 += stringSort[2];

            } else {
                if (isConsignment) {
                    orderBy = " order by orderdate desc,ponumber desc ";
                    sort_Col += ", purchaseorder.orderdate ,purchaseorder.ponumber";
                    sort_Col1 += ", billingpurchaseorder.orderdate , billingpurchaseorder.ponumber";
                } else {
                    orderBy = " order by orderdate desc ";
                    sort_Col += ", purchaseorder.orderdate ";
                    sort_Col1 += ", billingpurchaseorder.orderdate ";
                }
            }

            String companyId = (String) request.get(Constants.companyKey);
            params.add((String) request.get(Constants.companyKey));

              if (request.containsKey("soid") && request.get("soid") != null) {
                String soid = (String) request.get("soid");
                params.add(soid);
                conditionSQL += "and salesorder.id= ?";
            }
              
            String mysqlQuery = "select  DISTINCT purchaseorder.id,2, 'false' as withoutinventory" + sort_Col + " from purchaseorder "
                    + "inner join podetails on podetails.purchaseorder = purchaseorder.id "
                    + "inner join sodetails on podetails.salesorderdetailid = sodetails.id "
                    + "inner join salesorder on sodetails.salesorder = salesorder.id where purchaseorder.company=? " + conditionSQL;

            mysqlQuery += orderBy;
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                list = executeSQLQueryPaging( mysqlQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accCustomerDAOImpl.getSalesOrders:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }  
    /* Function to be used for: getting PO linked in Sales Order  */
    public KwlReturnObject getPOlinkedInSO(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            String companyid = "", soid = "";
            if (request.containsKey("soid") && request.containsKey("companyid")) {
                companyid = (String) request.get("companyid");
                soid = (String) request.get("soid");
            }
            if (!StringUtil.isNullOrEmpty(soid) && !StringUtil.isNullOrEmpty(companyid)) {
                String hqlQuery = "select DISTINCT purchaseorder.id, 3, 'false' as withoutinventory, purchaseorder.orderdate  from purchaseorder inner join podetails on podetails.purchaseorder = purchaseorder.id inner join sodetails on sodetails.purchaseorderdetailid = podetails.id inner join salesorder on sodetails.salesorder = salesorder.id\n"
                        + "where purchaseorder.company=? and salesorder.id= ? order by orderdate desc ";
                list = executeSQLQuery( hqlQuery, new Object[]{companyid, soid});
                if (list != null && list.size() > 0) {
                    count = list.size();
                }
            }
        } catch (Exception ex) {
            System.out.println("Exception: getInvoiceFromDO " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    /* Function to be used for: getting CQ linked in Sales Order  */
    public KwlReturnObject getCQlinkedInSO(HashMap<String, Object> request) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            String companyid = "", soid = "";
            if (request.containsKey("soid") && request.containsKey("companyid")) {
                companyid = (String) request.get("companyid");
                soid = (String) request.get("soid");
            }
            if (!StringUtil.isNullOrEmpty(soid) && !StringUtil.isNullOrEmpty(companyid)) {
                String selQuery = "select distinct quotation from SalesOrderDetail sod inner join sod.quotationDetail quod inner join quod.quotation quotation where sod.salesOrder.ID=? and quotation.deleted=false and quod.company.companyID=?";
                list = executeQuery( selQuery, new Object[]{soid, companyid});
            }
        } catch (Exception ex) {
            System.out.println("Exception: getInvoiceFromDO " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public List<Object[]> getInvoiceAllList(List<String> invoiceIDLIST) {
        List<Object[]> results = null;
        try {
            if (invoiceIDLIST != null && !invoiceIDLIST.isEmpty()) {
                String query = "select  inv.ID, inv.journalEntry, inv.tax,inv.termid,inv.templateid,inv.customerEntry,inv, inv.company, inv.customer, inv.currency"
                        + " from Invoice inv "
                        + " where inv.ID in (:invoiceIDList)";
                List<List> values = new ArrayList<List>();
                values.add(invoiceIDLIST);
                results = executeCollectionQuery( query, Collections.singletonList("invoiceIDList"), values);
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return results;
    }
    public KwlReturnObject activateDeactivateRecurringInvoice(String repeateid, boolean isactivate) throws ServiceException {
        RepeatedInvoices rp = null;
        try {
            rp = (RepeatedInvoices) get(RepeatedInvoices.class, repeateid);
            rp.setIsActivate(!isactivate);
        } catch (Exception e) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, e);
        }
        return new KwlReturnObject(true, "Recurring Invoice has been updated successfully.", null, null, 0);
    }

    public KwlReturnObject approveRecurringInvoice(String repeateid, boolean ispendingapproval) throws ServiceException {
        RepeatedInvoices rp = null;
        try {
            rp = (RepeatedInvoices) get(RepeatedInvoices.class, repeateid);
            rp.setIspendingapproval(ispendingapproval);
        } catch (Exception e) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, e);
        }
        return new KwlReturnObject(true, "Recurring Invoice has been approved successfully.", null, null, 0);
    }

    public Object getUserObject(String id) throws ServiceException {
        Object obj = null;
        try {
            obj = get(User.class, id);
        } catch (Exception e) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, e);
        }
        return obj;
    }
    public KwlReturnObject getDOByInventoryID(String inventoryid) throws ServiceException {
        List list = new ArrayList();
        String q = "select dod from DeliveryOrderDetail dod where dod.inventory.ID=? ";
        list = executeQuery( q, new Object[]{inventoryid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getForeignCurrencyGainAndLossData(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        String query = "";
        try {
            boolean isReceipt = false, loadVendorInvoices = false, loadCustomerInvoices = false, isPayment = false, isCreditNote = false, isDebitNote = false;
            int optionSelected=(requestParams.containsKey("optionSelected") && !StringUtil.isNullOrEmpty(requestParams.get("optionSelected").toString()) )?Integer.parseInt(requestParams.get("optionSelected").toString()):2;
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            ArrayList values = new ArrayList();
            ArrayList name = new ArrayList();
            if (requestParams.containsKey("isReceipt") && requestParams.get("isReceipt") != null) {
                isReceipt = true;
            }
            if (requestParams.containsKey("loadVendorInvoices") && requestParams.get("loadVendorInvoices") != null) {
                loadVendorInvoices = true;
                query = "from GoodsReceipt ";
            }
            if (requestParams.containsKey("loadCustomerInvoices") && requestParams.get("loadCustomerInvoices") != null) {
                loadCustomerInvoices = true;
                query = "from Invoice ";
            }
            if (requestParams.containsKey("isPayment") && requestParams.get("isPayment") != null) {
                isPayment = true;
            }
            if (requestParams.containsKey("isCreditNote") && requestParams.get("isCreditNote") != null) {
                isCreditNote = true;
            }
            if (requestParams.containsKey("isDebitNote") && requestParams.get("isDebitNote") != null) {
                isDebitNote = true;
            }
            boolean loadCNType2 = false;
            if (requestParams.containsKey("loadCNType2") && requestParams.get("loadCNType2") != null) {
                loadCNType2 = true;
            }
          
            boolean loadDNType2 = false;
            if (requestParams.containsKey("loadDNType2") && requestParams.get("loadDNType2") != null) {
                loadDNType2 = true;
            }
          
            boolean loadCreditNotePayment = false;
            if (requestParams.containsKey("loadCreditNotePayment") && requestParams.get("loadCreditNotePayment") != null) {
                loadCreditNotePayment = true;
            }
            boolean loadDebitNotePayment = false;
            if (requestParams.containsKey("loadDebitNotePayment") && requestParams.get("loadDebitNotePayment") != null) {
                loadDebitNotePayment = true;
            }
            if (isReceipt) {
                query = "from ReceiptDetail where invoice.ID=? and company.companyID=? and (invoice.deleted=? and receipt.deleted=?)";
                list = executeQuery( query, new Object[]{requestParams.get("invoiceid"), requestParams.get("companyid"),false,false});
            } else if (isPayment) {
                query = "from PaymentDetail where goodsReceipt.ID=? and company.companyID=? and (goodsReceipt.deleted=? and payment.deleted=?)";
                list = executeQuery( query, new Object[]{requestParams.get("goodsReceiptID"), requestParams.get("companyid"),false,false});
            } else if (isCreditNote) {
                query = "from CreditNoteDetail where invoice.ID=? and company.companyID=? and (invoice.deleted=? and creditNote.deleted=?)";
                list = executeQuery( query, new Object[]{requestParams.get("invoiceid"), requestParams.get("companyid"),false,false});
            } else if (isDebitNote) {
                query = "from DebitNoteDetail where goodsReceipt.ID=? and company.companyID=? and (goodsReceipt.deleted=? and debitNote.deleted=?)";
                list = executeQuery( query, new Object[]{requestParams.get("goodsReceiptID"), requestParams.get("companyid"),false,false});
            } else if (loadVendorInvoices || loadCustomerInvoices) {
                if (requestParams.get("filter_names") != null && requestParams.get("filter_values") != null) {
                    name = new ArrayList((List<String>) requestParams.get("filter_names"));
                    values = new ArrayList((List<Object>) requestParams.get("filter_values"));
                    query += com.krawler.common.util.StringUtil.filterQuery(name, "where");
                }
                query += " and (invoiceamountdue = ? OR (invoiceamountdue!=? and openingbalanceamountdue < ?))";
//                query += loadCustomerInvoices ? "and currencS-150806y.currencyID != customer.currency.currencyID " : "and currency.currencyID != vendor.currency.currencyID ";
                values.add(0.0);
                values.add(0.0);
                values.add(0.0);
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                    query += " and (journalEntry.entryDate >=? and journalEntry.entryDate <=?)";
                    values.add(df.parse(startDate));
                    values.add(df.parse(endDate));
                } else if (!StringUtil.isNullOrEmpty(endDate)) {   //condition for account reevaluation up to selected date
                    query += " and  journalEntry.entryDate <=? ";
                    values.add(df.parse(endDate));
                }
                list = executeQuery( query, values.toArray());
            } else if (loadCNType2) {
                query = "from CreditNote where company.companyID=? and deleted=?";
                values.add(requestParams.get("companyid"));
                values.add(false);
                if (optionSelected == 1 && StringUtil.isNullObject(requestParams.get("vendorid"))) {
                    query += " and cntype=? and (cnamountdue = ? OR (cnamountdue!=? and openingBalanceAmountDue < ?))";
                    values.add(4);
                } else if (optionSelected == 0 && StringUtil.isNullObject(requestParams.get("customerid"))) {
                    query += " and cntype=? and (cnamountdue = ? OR (cnamountdue!=? and openingBalanceAmountDue < ?))";
                    values.add(2);
                } else if (optionSelected==1 && requestParams.containsKey("vendorid") && !StringUtil.isNullObject(requestParams.get("vendorid"))) {
                    query += " and (cntype=? and vendor is not null and vendor.ID=?) and (cnamountdue = ? OR (cnamountdue!=? and openingBalanceAmountDue < ?))";
                    values.add(4);
                    values.add(requestParams.get("vendorid"));
                } else if (optionSelected==0 && requestParams.containsKey("customerid") && !StringUtil.isNullObject(requestParams.get("customerid"))) {
                    query += " and (cntype=? and customer is not null and customer.ID=?) and (cnamountdue = ? OR (cnamountdue!=? and openingBalanceAmountDue < ?))";
                    values.add(2);
                    values.add(requestParams.get("customerid"));
                } else {
                    query += "and (cntype=? OR cntype=?) and (cnamountdue = ? OR (cnamountdue!=? and openingBalanceAmountDue < ?))";
                    values.add(2);
                    values.add(4);
                }
                values.add(0.0);
                values.add(0.0);
                values.add(0.0);
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                    query += " and (journalEntry.entryDate >=? and journalEntry.entryDate <=?)";
                    values.add(df.parse(startDate));
                    values.add(df.parse(endDate));
                } else if (!StringUtil.isNullOrEmpty(endDate)) {   //condition for account reevaluation up to selected date
                    query += " and  journalEntry.entryDate <=? ";
                    values.add(df.parse(endDate));
                }
                list = executeQuery( query, values.toArray());
            } else if (loadDNType2) {
                query = "from DebitNote where company.companyID=? and deleted=?";
                values.add(requestParams.get("companyid"));
                values.add(false);
                if (optionSelected == 1 && StringUtil.isNullObject(requestParams.get("vendorid"))) {
                    query += " and dntype=? and (dnamountdue = ? OR (dnamountdue!=? and openingBalanceAmountDue < ?))";
                    values.add(2);
                } else if (optionSelected == 0 && StringUtil.isNullObject(requestParams.get("customerid"))) {
                    query += " and dntype=? and (dnamountdue = ? OR (dnamountdue!=? and openingBalanceAmountDue < ?))";
                    values.add(4);
                } else if (optionSelected==1 && requestParams.containsKey("vendorid") && !StringUtil.isNullObject(requestParams.get("vendorid"))) {
                    query += " and (dntype=? and vendor is not null  and vendor.ID=?) and (dnamountdue = ? OR (dnamountdue!=? and openingBalanceAmountDue < ?))";
                    values.add(2);
                    values.add(requestParams.get("vendorid"));
                } else if (optionSelected == 0 && requestParams.containsKey("customerid") && !StringUtil.isNullObject(requestParams.get("customerid"))) {
                    query += " and (dntype=? and customer is not null and customer.ID=?) and (dnamountdue = ? OR (dnamountdue!=? and openingBalanceAmountDue < ?))";
                    values.add(4);
                    values.add(requestParams.get("customerid"));
                } else {
                    query += " and (dntype=? OR dntype=?) and (dnamountdue = ? OR (dnamountdue!=? and openingBalanceAmountDue < ?))";
                    values.add(2);
                    values.add(4);
                }
                values.add(0.0);
                values.add(0.0);
                values.add(0.0);
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                    query += " and (journalEntry.entryDate >=? and journalEntry.entryDate <=?)";
                    values.add(df.parse(startDate));
                    values.add(df.parse(endDate));
                } else if (!StringUtil.isNullOrEmpty(endDate)) {   //condition for account reevaluation up to selected date
                    query += " and  journalEntry.entryDate <=? ";
                    values.add(df.parse(endDate));
                }
                list = executeQuery( query, values.toArray());
            } else if (loadCreditNotePayment) {
                query = "from CreditNotePaymentDetails where creditnote.ID=? and creditnote.company.companyID=? and creditnote.deleted=?";
                list = executeQuery( query, new Object[]{requestParams.get("cnID"), requestParams.get("companyid"),false});
            } else if (loadDebitNotePayment) {
                query = "from DebitNotePaymentDetails where debitnote.ID=? and debitnote.company.companyID=? and debitnote.deleted=?";
                list = executeQuery( query, new Object[]{requestParams.get("cnID"), requestParams.get("companyid"),false});
            } else if(requestParams.containsKey("LinkDetailReceipt") && requestParams.get("LinkDetailReceipt")!=null){
                query = "from LinkDetailReceipt where invoice.company.companyID=?";
                values.add(requestParams.get("companyid"));
                if (optionSelected == 0 && requestParams.containsKey("customerid") && !StringUtil.isNullObject(requestParams.get("customerid"))) {
                    query += " and invoice.customer.ID=?";
                    values.add(requestParams.get("customerid"));
                }
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                    query += " and (invoice.journalEntry.entryDate >=? and invoice.journalEntry.entryDate <=?)";
                    values.add(df.parse(startDate));
                    values.add(df.parse(endDate));
                } else if (!StringUtil.isNullOrEmpty(endDate)) {   //condition for account reevaluation up to selected date
                    query += " and invoice.journalEntry.entryDate <=? ";
                    values.add(df.parse(endDate));
                }
                list = executeQuery( query, values.toArray());
            } else if (requestParams.containsKey("LinkDetailPayment") && requestParams.get("LinkDetailPayment") != null) {
                query = "from LinkDetailPayment where goodsReceipt.company.companyID=?";
                values.add(requestParams.get("companyid"));
                if (optionSelected == 1 && requestParams.containsKey("vendorid") && !StringUtil.isNullObject(requestParams.get("vendorid"))) {
                    query += " and goodsReceipt.vendor.ID=?";
                    values.add(requestParams.get("vendorid"));
                }
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                    query += " and (goodsReceipt.journalEntry.entryDate >=? and goodsReceipt.journalEntry.entryDate <=?)";
                    values.add(df.parse(startDate));
                    values.add(df.parse(endDate));
                } else if (!StringUtil.isNullOrEmpty(endDate)) {   //condition for account reevaluation up to selected date
                    query += " and goodsReceipt.journalEntry.entryDate <=? ";
                    values.add(df.parse(endDate));
                }
                list = executeQuery( query, values.toArray());
            }
            
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            return new KwlReturnObject(true, "", null, list, list.size());
        }
}

    @Override
     public synchronized String updateDOEntryNumberForNewDO(Map<String, Object> seqNumberMap) {
        String documnetNumber = "";
        try {
            documnetNumber = seqNumberMap.containsKey(Constants.AUTO_ENTRYNUMBER) ? (String)seqNumberMap.get(Constants.AUTO_ENTRYNUMBER) : "";
            int seqNumber = 0;
            if(seqNumberMap.containsKey(Constants.SEQNUMBER) && !StringUtil.isNullObject(seqNumberMap.get(Constants.SEQNUMBER)) && !StringUtil.isNullOrEmpty(seqNumberMap.get(Constants.SEQNUMBER).toString())){
               seqNumber= Integer.parseInt(seqNumberMap.get(Constants.SEQNUMBER).toString());
            }
            String datePrefix = seqNumberMap.containsKey(Constants.DATEPREFIX) ? (String)seqNumberMap.get(Constants.DATEPREFIX) : "";
            String dateAfterPrefix = seqNumberMap.containsKey(Constants.DATEAFTERPREFIX) ? (String)seqNumberMap.get(Constants.DATEAFTERPREFIX) : "";
            String dateSuffix = seqNumberMap.containsKey(Constants.DATESUFFIX) ? (String)seqNumberMap.get(Constants.DATESUFFIX) : "";
            String sequenceFormatID = seqNumberMap.containsKey(Constants.SEQUENCEFORMATID) ? (String)seqNumberMap.get(Constants.SEQUENCEFORMATID) : "";
            String documentID = seqNumberMap.containsKey(Constants.DOCUMENTID) ? (String)seqNumberMap.get(Constants.DOCUMENTID) : "";
            String companyID = seqNumberMap.containsKey(Constants.companyKey) ? (String)seqNumberMap.get(Constants.companyKey) : "";
            
            String query = "update DeliveryOrder set deliveryOrderNumber = ?,seqnumber=?, datePreffixValue=?, dateAfterPreffixValue=?, dateSuffixValue=? , seqformat.ID=? where ID=? and company.companyID=?";
            int numRows = executeUpdate( query, new Object[]{documnetNumber, seqNumber, datePrefix, dateAfterPrefix, dateSuffix, sequenceFormatID, documentID, companyID});
            String query1 = "update StockMovement set transactionNo = ? where moduleRefId=? and company.companyID=?"; // for update entry no in stock movement
            int numRows1 = executeUpdate( query1, new Object[]{documnetNumber,documentID, companyID});
        } catch (Exception e) {
            System.out.println(e);
        }
        return documnetNumber;
    }
     
     @Override
     public synchronized String updateDOEntryNumberForNA(String prid, String entrynumber) {
        try {
            String query = "update DeliveryOrder set deliveryOrderNumber = ? where ID=?";
            int numRows = executeUpdate( query, new Object[]{entrynumber, prid});
        } catch (Exception e) {
            System.out.println(e);
        }
        return entrynumber;
    }

     
     @Override
     public synchronized String updateSIEntryNumberForNA(String prid, String entrynumber) {
        try {
            String query = "update Invoice set invoiceNumber = ? where ID=?";
            int numRows = executeUpdate( query, new Object[]{entrynumber, prid});
        } catch (Exception e) {
            System.out.println(e);
        }
        return entrynumber;
    }

    public KwlReturnObject getInvoicesForJE(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String hqlQuery = "from Invoice inv where inv.company.companyID=? and inv.journalEntry is not null";
        list = list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getInvoicesHavingInvoiceAmount(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String hqlQuery = "from Invoice inv where inv.company.companyID=? and inv.invoiceamount!=? and inv.isOpeningBalenceInvoice=? and inv.normalInvoice=?";
        params.add(0.0);
        params.add(false);
        params.add(true);
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject deleteAssetDetailsLinkedWithAssetSalesReturn(HashMap<String, Object> requestParams) throws ServiceException {
        int numtotal = 0;
        String errormsg = "Cannot delete Asset Sales Return as its referance child field is not deleted.";
        try {
            if (requestParams.containsKey("srid") && requestParams.containsKey("companyid")) {

                int numRows = 0;
                ArrayList params8 = new ArrayList();
                params8.add(requestParams.get("companyid"));
                params8.add(requestParams.get("srid"));

                // Deleting data from asset details table
                String assetQuery = "SELECT ad.id FROM salesreturn sr "
                        + "INNER JOIN  srdetails srd ON sr.id=srd.salesreturn "
                        + "INNER JOIN assetdetailsinvdetailmapping amp ON srd.id=amp.invoicedetailid "
                        + "INNER JOIN assetdetail ad on ad.id=amp.assetdetails "
                        + "WHERE amp.moduleid=98 AND sr.company=? and sr.id=?";

                List<String> assetList = executeSQLQuery( assetQuery, params8.toArray());
                for (String assetID : assetList) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(assetID);
                    assetParams.add(requestParams.get("companyid"));

                    String assupdateQuery = "UPDATE assetdetail SET issalesreturn=false WHERE id=? AND company=?";
                    executeSQLUpdate( assupdateQuery, assetParams.toArray());
                    
                    assupdateQuery = "UPDATE assetdetail SET assetsoldflag=2 WHERE id=? AND company=?";
                    executeSQLUpdate( assupdateQuery, assetParams.toArray());
                }

//                String myquery = "select id from srdetails where salesreturn in (select id from salesreturn where company = ? and id=?)";
                String myquery = "select srd.id from srdetails srd inner join salesreturn sr on sr.id=srd.salesreturn where sr.company = ? and sr.id=?";
                List list = executeSQLQuery( myquery, params8.toArray());
                Iterator itr = list.iterator();
                String idStrings = "";
                while (itr.hasNext()) {
                    String invdid = itr.next().toString();
                    idStrings += "'" + invdid + "',";
                }
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    idStrings = idStrings.substring(0, idStrings.length() - 1);
                }

                // Deleting data from assetdetailsinvdetailmapping
                if (!StringUtil.isNullOrEmpty(idStrings)) {
                    ArrayList assetParams = new ArrayList();
                    assetParams.add(requestParams.get("companyid"));

                    String assetMapDelQuery = "DELETE FROM assetdetailsinvdetailmapping WHERE invoicedetailid IN (" + idStrings + ") and moduleid=98 and company=?";
                    numRows += executeSQLUpdate( assetMapDelQuery, assetParams.toArray());
                }
                numtotal = numRows;
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE(errormsg, ex);
        }
        return new KwlReturnObject(true, "Asset Sales Return has been deleted successfully.", null, null, numtotal);
    }
    @Override
   public KwlReturnObject getAllCompanyFromDb(String[] subdomain) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            ArrayList params = new ArrayList();
            String query = "select companyid from company where deleteflag=?";
            params.add(0);
            if (subdomain != null) {
                String condtion="";
                for (int i = 0; i < subdomain.length; i++) {
                    condtion += "'" + subdomain[i] + "'";
                    if (subdomain.length - 1 != i) {
                        condtion += ",";
                    }
                }
                query += " and subdomain in ("+condtion+")";
            }
            list = executeSQLQuery( query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getQuotations:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject getSOForScript(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();
            String linkFlag = request.get("value").toString();
            ArrayList params = new ArrayList();
            String query = "select salesorder.id from salesorder where salesorder.company =? and salesorder.linkflag=? and salesorder.deleteflag='F'";
            params.add(companyid);
            params.add(linkFlag);
            list = executeSQLQuery( query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getQuotations:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    public KwlReturnObject getSIDForScript(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();           
            ArrayList params = new ArrayList();
            String query = "select invoice.id from invoice where invoice.company =? and invoice.deleteflag='F'";
            params.add(companyid);           
            list = executeSQLQuery( query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accSalesOrderImpl.getQuotations:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public int updateToNullRepeatedInvoiceOfInvoice(String invoiceTable, String repeateid, String invoiceid) throws ServiceException {
        String query = "update "+invoiceTable+" set repeateinvoice=null where id=? and repeateinvoice=?";
        int numRows = executeSQLUpdate( query, new Object[]{invoiceid,repeateid});
        return numRows;
    }
    @Override
    public int deleteRepeatedInvoice(String repeateid) throws ServiceException {
        String query ="delete from repeatedinvoices where id=?";
        int numRows = executeSQLUpdate( query, new Object[]{repeateid});
        return numRows;
    }
    public KwlReturnObject getDeliveryOrderByCompany(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String hqlQuery = "from DeliveryOrder gr where gr.company.companyID=?";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public boolean updateDeliveryOrderAmount(DeliveryOrder order, JSONObject json) throws ServiceException {
        boolean success = true;
        try {
            String companyid = json.optString("companyid");
            if (order != null) {
                if (json.has("discountAmountInBase")) { // quotation amount
                    order.setDiscountinbase(authHandler.round(json.optDouble("discountAmountInBase", 0.0), companyid));
                }
                if (json.has("totalAmountInDocumentCurrecy")) { // quotation amount in base
                    order.setTotalamount(authHandler.round(json.optDouble("totalAmountInDocumentCurrecy", 0.0), companyid));
                }
                if (json.has("totalAmountInBaseCurrecy")) { // Discount in base
                    order.setTotalamountinbase(authHandler.round(json.optDouble("totalAmountInBaseCurrecy", 0.0), companyid));
                }

                saveOrUpdate(order);
            }
        } catch (Exception ex) {
            success = false;
            System.out.println("accSalesOrderImpl.updateQuotation:" + ex.getMessage());
        }
        return success;
    }
    public KwlReturnObject getNormalInvoices(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        try {
            ArrayList params = new ArrayList();
            params.add(requestParams.get("companyid"));
            String hqlQuery = "from Invoice inv where inv.company.companyID=? and inv.normalInvoice=?";
            params.add(true);
            list = executeQuery( hqlQuery, params.toArray());
        } catch (Exception ex) {
            System.out.println("Exception:getNormalInvoices- " + ex.getMessage());
        } finally {
            return new KwlReturnObject(true, "", null, list, list.size());
        }
    }
    
    @Override
    public KwlReturnObject saveDeliveryOrderTermMap(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            DeliveryOrderTermMap termmap = new DeliveryOrderTermMap();
            DeliveryOrder deliveryOrder = null;
            if (dataMap.containsKey("term") && dataMap.containsKey("deliveryOrderID")) {
                deliveryOrder = (DeliveryOrder) get(DeliveryOrder.class, (String) dataMap.get("deliveryOrderID"));
                InvoiceTermsSales term = (InvoiceTermsSales) get(InvoiceTermsSales.class, (String) dataMap.get("term"));
                List<DeliveryOrderTermMap> listTermMap = find("from DeliveryOrderTermMap dotm where dotm.deliveryOrder.ID = '" + deliveryOrder.getID() + "' and dotm.term.id = '" + term.getId() + "'");
                if (listTermMap.size() > 0) {
                    termmap = listTermMap.get(0);
                }
                termmap.setTerm(term);
            }
            if (dataMap.containsKey("termamount")) {
                termmap.setTermamount((Double) dataMap.get("termamount"));
            }
            if (dataMap.containsKey("termtaxamount")) {
                termmap.setTermtaxamount((Double) dataMap.get("termtaxamount"));
            }
            if (dataMap.containsKey("termtaxamountinbase")) {
                termmap.setTermtaxamountinbase((Double) dataMap.get("termtaxamountinbase"));
            }
            if (dataMap.containsKey("termtax") && dataMap.get("termtax")!=null) {   //SDP-13535
                Tax termtax = (Tax) get(Tax.class, (String) dataMap.get("termtax"));
                termmap.setTermtax(termtax);
            }
            if (dataMap.containsKey("termAmountExcludingTax")) {
                termmap.setTermAmountExcludingTax((Double) dataMap.get("termAmountExcludingTax"));
            }
            if (dataMap.containsKey("termAmountExcludingTaxInBase")) {
                termmap.setTermAmountExcludingTaxInBase((Double) dataMap.get("termAmountExcludingTaxInBase"));
            }
            if (dataMap.containsKey("termamountinbase")) {
                termmap.setTermamountinbase((Double) dataMap.get("termamountinbase"));
            }
            if (dataMap.containsKey("termpercentage")) {
                termmap.setPercentage((Double) dataMap.get("termpercentage"));
            }
            if (dataMap.containsKey("deliveryOrderID") && deliveryOrder != null) {
                termmap.setDeliveryOrder(deliveryOrder);
            }
            if (dataMap.containsKey("userid")) {
                User userid = (User) get(User.class, (String) dataMap.get("userid"));
                termmap.setCreator(userid);
            }
            if (dataMap.containsKey("createdon")) {
                termmap.setCreatedOn(((Date) dataMap.get("creationdate")).getTime());
            }
            saveOrUpdate(termmap);
            list.add(termmap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.saveDeliveryOrderTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    @Override
    public KwlReturnObject updateDeliveryOrderTermMap(HashMap<String, Object> dataMap) throws ServiceException{
        List list = new ArrayList();
        try {
            DeliveryOrderTermMap termmap = new DeliveryOrderTermMap();

            if (dataMap.containsKey("ordertermid")) {
                termmap = (DeliveryOrderTermMap) get(DeliveryOrderTermMap.class, (String) dataMap.get("ordertermid"));
            }
            if(termmap != null){
                if (dataMap.containsKey("termamount")) {
                    termmap.setTermamount((Double) dataMap.get("termamount"));
                }
                if (dataMap.containsKey("termamountinbase")) {
                    termmap.setTermamountinbase((Double) dataMap.get("termamountinbase"));
                }
                if (dataMap.containsKey("termtaxamount")) {
                    termmap.setTermtaxamount((Double) dataMap.get("termtaxamount"));
                }
                if (dataMap.containsKey("termtaxamountinbase")) {
                    termmap.setTermtaxamountinbase((Double) dataMap.get("termtaxamountinbase"));
                }
                if (dataMap.containsKey("termAmountExcludingTax")) {
                    termmap.setTermAmountExcludingTax((Double) dataMap.get("termAmountExcludingTax"));
                }
                if (dataMap.containsKey("termAmountExcludingTaxInBase")) {
                    termmap.setTermAmountExcludingTaxInBase((Double) dataMap.get("termAmountExcludingTaxInBase"));
                }
                if (dataMap.containsKey("termtax") && dataMap.get("termtax") != null) {
                    Tax termtax = (Tax) get(Tax.class, (String) dataMap.get("termtax"));
                    termmap.setTermtax(termtax);
                }
//                if (dataMap.containsKey("termpercentage")) {
//                    termmap.setPercentage((Double) dataMap.get("termpercentage"));
//                }
//                if (dataMap.containsKey("vendorQuotationID") && vendorQuotation != null) {
//                    termmap.setVendorQuotation(vendorQuotation);
//                }
//                if (dataMap.containsKey("term")) {
//                    InvoiceTermsSales term = (InvoiceTermsSales) get(InvoiceTermsSales.class, (String) dataMap.get("term"));
//                    termmap.setTerm(term);
//                }
//                if (dataMap.containsKey("userid")) {
//                    User userid = (User) get(User.class, (String) dataMap.get("userid"));
//                    termmap.setCreator(userid);
//                }
//                if (dataMap.containsKey("createdon")) {
//                    termmap.setCreatedOn(((Date) dataMap.get("creationdate")).getTime());
//                }
                saveOrUpdate(termmap);
                list.add(termmap);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.saveInvoiceTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getAllGlobalDeliveryOrderOfInvoiceTerms(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String sqlQuery = "select do.id as doid,dotm.id as dotmid,do.tax,dotm.termamount,tl.percent,dotm.term  from deliveryordertermmap dotm  inner join deliveryorder do on do.id=dotm.deliveryorder  inner join taxlist tl on tl.tax=do.tax  where dotm.termamount != 0 and do.tax is not null and do.company=? ";
        list = executeSQLQuery( sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getAllGlobalSalesInvoiceOfInvoiceTerms(HashMap<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(requestParams.get("companyid"));
        String sqlQuery = "select inv.id as invid,itm.id as itmid,inv.tax,itm.termamount,tl.percent,itm.term  from invoicetermsmap itm  inner join invoice inv on inv.id=itm.invoice  inner join taxlist tl on tl.tax=inv.tax  where itm.termamount != 0 and inv.tax is not null and inv.company=? ";
        list = executeSQLQuery( sqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getDOTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String deliveryOrderID = hm.get("deliveryOrderID").toString();
            String query = "from DeliveryOrderTermMap where deliveryOrder.ID = ?";
            list = executeQuery( query, new Object[]{deliveryOrderID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDOInvoiceTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getSRTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String salesReturnID = hm.get("salesreturn").toString();
            String query = "from SalesReturnTermsMap where salesreturn.ID = ?";
            list = executeQuery( query, new Object[]{salesReturnID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getSRTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getPRTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String purchaseReturnID = hm.get("purchasereturn").toString();
            String query = "from PurchaseReturnTermsMap where purchasereturn.ID = ?";
            list = executeQuery( query, new Object[]{purchaseReturnID});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getPRTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    
    @Override
    public double getPercentageFromTaxid(String taxid, String companyid) throws ServiceException {
        List list = new ArrayList();
        Double percent = 0d;
        try {
            String query = "select percent from taxlist where tax=? and company=? ";
            list = executeSQLQuery( query, new Object[]{taxid,companyid});
            if (list != null && !list.isEmpty() && list.get(0) != null) {
                percent = (Double) list.get(0);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getPercentageFromTaxid:" + ex.getMessage(), ex);
        }
        return percent;
    }
    @Override
    public boolean isSOWithQAStockLiesInQARepairOrOriginalStore(SalesReturnDetail srDetail, Store qaStore, Store repairStore) throws ServiceException {
        boolean isStockLies = true;
        if (srDetail != null) {
            List list = null;
            String originalStore = null;
            String allStoreStr = "";
            int count = 0;
            try {
                String companyid = srDetail.getCompany().getCompanyID();
                String productId = srDetail.getProduct().getID();
                String salesReturnId = srDetail.getSalesReturn().getID();
                String srDetailId = srDetail.getID();
                ArrayList params = new ArrayList();
                String query = " SELECT store from in_consignment where company=? and modulerefid=? AND documentid=? "; //this is to get original store ie. store from where DO is made
                params.add(companyid);
                params.add(salesReturnId);
                params.add(srDetailId);
                list = executeSQLQuery( query, params.toArray());
                if (list != null && !list.isEmpty()) {
                    originalStore = (String) list.get(0);
                }

                if (qaStore != null) {
                    allStoreStr += ("'" + qaStore.getId() + "'");
                }
                if (repairStore != null) {
                    if (!StringUtil.isNullOrEmpty(allStoreStr)) {
                        allStoreStr += (",'" + repairStore.getId() + "'");
                    } else {
                        allStoreStr += ("'" + repairStore.getId() + "'");
                    }
                }
                if (!StringUtil.isNullOrEmpty(originalStore)) {
                    if (!StringUtil.isNullOrEmpty(allStoreStr)) {
                        allStoreStr += (",'" + originalStore + "'");
                    } else {
                        allStoreStr += ("'" + originalStore + "'");
                    }
                }

                if ((srDetail.getProduct().isIsBatchForProduct() && srDetail.getProduct().isIsSerialForProduct()) || (!srDetail.getProduct().isIsBatchForProduct() && srDetail.getProduct().isIsSerialForProduct()) ) {

                    String qry1 = " SELECT FIND_IN_SET(serialname,(SELECT GROUP_CONCAT(serialnames) from in_stock WHERE company=? AND product=? AND store IN(" + allStoreStr + ") "
                            + " GROUP BY batchname)) FROM newbatchserial s INNER JOIN newproductbatch b ON b.id=s.batch WHERE s.id IN(SELECT serialid "
                            + " FROM serialdocumentmapping WHERE documentid=? AND isconsignment='T' AND transactiontype=53) ";
                    List l1 = new ArrayList<Integer>();
                    ArrayList prm1 = new ArrayList();
                    prm1.add(companyid);
                    prm1.add(productId);
                    prm1.add(srDetailId);
                    l1 = executeSQLQuery( qry1, prm1.toArray());
                    if (l1 != null && !l1.isEmpty()) {
                        for(int x=0;x<l1.size();x++){
                            int index = Integer.parseInt(l1.get(0).toString());
                            if (index < 1) {
                                isStockLies=false;
                                return false; // ie. some serial are not found in above 3 store,might be some operaions took place on them
                            }
                        }
                    }

                } else if (srDetail.getProduct().isIsBatchForProduct() && !srDetail.getProduct().isIsSerialForProduct()) {
                    
                     String qry1 = " SELECT FIND_IN_SET(serialname,(SELECT GROUP_CONCAT(serialnames) from in_stock WHERE company=? AND product=? AND store IN(" + allStoreStr + ") "
                            + " GROUP BY batchname)) FROM newbatchserial s INNER JOIN newproductbatch b ON b.id=s.batch WHERE s.id IN(SELECT serialid "
                            + " FROM serialdocumentmapping WHERE documentid=? AND isconsignment='T' AND transactiontype=53) ";
                   
                     
                } else if (!srDetail.getProduct().isIsBatchForProduct() && !srDetail.getProduct().isIsSerialForProduct()) {

                }

                //count = list.size();
            } catch (Exception ex) {
                throw ServiceException.FAILURE("accInvoiceImpl.isSOWithQAStockLiesInQARepairOrOriginalStore:" + ex.getMessage(), ex);
            }
        }

        return isStockLies;
    }
    
    @Override
    public void moveSRStockFromQARepairOriginalStoreToCustomerStore(SalesReturnDetail srDetail, Store qaStore, Store repairStore) throws ServiceException {
        boolean isStockLies = true;
        if (srDetail != null) {
            List list = null;
            String originalStore = null;
            String allStoreStr = "";
            int count = 0;
            try {
                String companyid = srDetail.getCompany().getCompanyID();
                String productId = srDetail.getProduct().getID();
                String salesReturnId = srDetail.getSalesReturn().getID();
                String srDetailId = srDetail.getID();
                ArrayList params = new ArrayList();
                String query = " SELECT store from in_consignment where company=? and modulerefid=? AND documentid=? "; //this is to get original store ie. store from where DO is made
                params.add(companyid);
                params.add(salesReturnId);
                params.add(srDetailId);
                list = executeSQLQuery( query, params.toArray());
                if (list != null && !list.isEmpty()) {
                    originalStore = (String) list.get(0);
                }

                if (qaStore != null) {
                    allStoreStr += ("'" + qaStore.getId() + "'");
                }
                if (repairStore != null) {
                    if (!StringUtil.isNullOrEmpty(allStoreStr)) {
                        allStoreStr += (",'" + repairStore.getId() + "'");
                    } else {
                        allStoreStr += ("'" + repairStore.getId() + "'");
                    }
                }
                if (!StringUtil.isNullOrEmpty(originalStore)) {
                    if (!StringUtil.isNullOrEmpty(allStoreStr)) {
                        allStoreStr += (",'" + originalStore + "'");
                    } else {
                        allStoreStr += ("'" + originalStore + "'");
                    }
                }

                 if ((srDetail.getProduct().isIsBatchForProduct() && srDetail.getProduct().isIsSerialForProduct()) || (!srDetail.getProduct().isIsBatchForProduct() && srDetail.getProduct().isIsSerialForProduct()) ) {
                    
                    // update company warehouse side batch,serial
                    String qry1 = "SELECT b.id as batchid,s.id as serialid,batchname,serialname FROM newbatchserial s INNER JOIN newproductbatch b ON b.id=s.batch "
                            + " WHERE s.id IN(SELECT serialid FROM serialdocumentmapping WHERE documentid=? AND isconsignment='T' AND transactiontype=53) "
                            + " AND batchname IN(SELECT batchname FROM in_stock WHERE company=? AND product=? AND store IN(" + allStoreStr + ") GROUP BY batchname) ";
                    List l1 = new ArrayList<Integer>();
                    ArrayList prm1 = new ArrayList();
                    prm1.add(srDetailId);
                    prm1.add(companyid);
                    prm1.add(productId);
                    l1 = executeSQLQuery( qry1, prm1.toArray());
                    if (l1 != null && !l1.isEmpty()) {
                        Iterator it = l1.iterator();
                        while (it.hasNext()) {
                            Object obj[] = (Object[]) it.next();
                            String batchId = obj[0].toString();
                            String serialId = obj[1].toString();
                            String batchName = obj[2].toString();
                            String serialName = obj[3].toString();
                            
                            String updateQry1=" UPDATE newproductbatch SET quantitydue=quantitydue-1,consignquantity=consignquantity-1 WHERE id=? ";
                            
                            ArrayList updateparam1 = new ArrayList();
                            updateparam1.add(batchId);
                            int update1 = executeSQLUpdate( updateQry1, updateparam1.toArray());
                            
                            String updateQry2=" UPDATE newbatchserial SET quantitydue=0,consignquantity=0 WHERE id=? ";
                            
                            ArrayList updateparam2 = new ArrayList();
                            updateparam2.add(serialId);
                            int update2 = executeSQLUpdate( updateQry2, updateparam2.toArray());
                        }
                    }
                    
                    // update customer warehouse side batch,serial and inventory
                    String qry2 = "SELECT b.id as batchid,s.id as serialid,batchname,serialname FROM newbatchserial s INNER JOIN newproductbatch b ON b.id=s.batch "
                            + " WHERE s.id IN(SELECT serialid FROM serialdocumentmapping WHERE documentid=? AND isconsignment='F' AND transactiontype=53) "
                            + " AND batchname IN(SELECT batchname FROM newproductbatch WHERE company=? AND product=? AND warehouse=? GROUP BY batchname) ";
                    List l2 = new ArrayList<Integer>();
                    ArrayList prm2 = new ArrayList();
                    prm2.add(srDetailId);
                    prm2.add(companyid);
                    prm2.add(productId);
                    prm2.add(srDetail.getSalesReturn().getCustWarehouse().getId());
                    l2 = executeSQLQuery( qry2, prm2.toArray());
                    if (l2 != null && !l2.isEmpty()) {
                        Iterator it = l2.iterator();
                        while (it.hasNext()) {
                            Object obj[] = (Object[]) it.next();
                            String batchId = obj[0].toString();
                            String serialId = obj[1].toString();
                            String batchName = obj[2].toString();
                            String serialName = obj[3].toString();
                            
                            String updateQry1=" UPDATE newproductbatch SET quantitydue=quantitydue+1,consignquantity=consignquantity+1 WHERE id=? ";
                            ArrayList updateparam1 = new ArrayList();
                            updateparam1.add(batchId);
                            int update1 = executeSQLUpdate( updateQry1, updateparam1.toArray());
                            
                            String updateQry2=" UPDATE newbatchserial SET quantitydue=1,consignquantity=1 WHERE id=? ";
                            ArrayList updateparam2 = new ArrayList();
                            updateparam2.add(serialId);
                            int update2 = executeSQLUpdate( updateQry2, updateparam2.toArray());
                           
                            String updateQry3=" UPDATE inventory SET consignuomquantity=consignuomquantity+1 WHERE id=? ";
                            ArrayList updateparam3 = new ArrayList();
                            updateparam3.add(srDetailId);
                            int update3 = executeSQLUpdate( updateQry3, updateparam3.toArray());
                           
                        }
                    }

                } else if (srDetail.getProduct().isIsBatchForProduct() && !srDetail.getProduct().isIsSerialForProduct()) {

                } else if (!srDetail.getProduct().isIsBatchForProduct() && !srDetail.getProduct().isIsSerialForProduct()) {

                }

                //count = list.size();
            } catch (Exception ex) {
                throw ServiceException.FAILURE("accInvoiceImpl.moveSRStockFromQARepairOriginalStoreToCustomerStore:" + ex.getMessage(), ex);
            }
        }

    }
    
    @Override
    public void deleteSRRelatedBatchSerialQAData(SalesReturn salesReturn) throws ServiceException {
        Set<SalesReturnDetail> srDetails = salesReturn.getRows();
        Iterator it = srDetails.iterator();
        while (it.hasNext()) {
            SalesReturnDetail srDetail = (SalesReturnDetail) it.next();
            
            if (srDetail.getProduct().isIsBatchForProduct() && srDetail.getProduct().isIsSerialForProduct() || (!srDetail.getProduct().isIsBatchForProduct() && srDetail.getProduct().isIsSerialForProduct())) {
                
                String deleteLocationBatchDocMappingquery = " DELETE FROM locationbatchdocumentmapping WHERE documentid=? AND transactiontype=53 ";
                ArrayList delparam1 = new ArrayList();
                delparam1.add(srDetail.getID());
                int del1 = executeSQLUpdate( deleteLocationBatchDocMappingquery, delparam1.toArray());

                String deleteSerialDocMappingquery = " DELETE FROM serialdocumentmapping where documentid=? AND isconsignment='F' ";
                int del2 = executeSQLUpdate( deleteSerialDocMappingquery, delparam1.toArray());

//                String deleteConsignmentDetailquery = " DELETE FROM in_consignmentdetails where  consignment IN(SELECT id from in_consignment where company=? AND documentid=?) ";
                String deleteConsignmentDetailquery = "delete incondetails from in_consignmentdetails incondetails inner join in_consignment incon on incondetails.consignment=incon.id where incon.company=? AND incon.documentid=?";
                ArrayList delparam3 = new ArrayList();
                delparam3.add(srDetail.getCompany().getCompanyID());
                delparam3.add(srDetail.getID());
                int del3 = executeSQLUpdate( deleteConsignmentDetailquery, delparam3.toArray());

                String deleteConsignmentquery = " DELETE FROM in_consignment WHERE company=? AND documentid=? ";
                ArrayList delparam4 = new ArrayList();
                delparam4.add(srDetail.getCompany().getCompanyID());
                delparam4.add(srDetail.getID());
                int del4 = executeSQLUpdate( deleteConsignmentquery, delparam4.toArray());

            } else if (srDetail.getProduct().isIsBatchForProduct() && !srDetail.getProduct().isIsSerialForProduct()) {

            } else if (!srDetail.getProduct().isIsBatchForProduct() && !srDetail.getProduct().isIsSerialForProduct()) {

            }
        }

    }
    
    @Override
    public KwlReturnObject getSalesOrderForSalesPerson(HashMap<String, Object> requestParams) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) requestParams.get(Constants.companyKey);
            String salesPersonIDs = (String) requestParams.get("itemid");

            ArrayList params = new ArrayList();
            String condition = "";
            params.add(companyid);
            
            if (!StringUtil.isNullOrEmpty(salesPersonIDs) && !salesPersonIDs.equalsIgnoreCase("All")) {
                salesPersonIDs = AccountingManager.getFilterInString(salesPersonIDs);
                condition += " and salesperson.ID in " + salesPersonIDs + " ";
            }
            
            String ss = "";
            if (requestParams.containsKey(Constants.ss) && requestParams.get(Constants.ss) != null) {
                ss = (String) requestParams.get(Constants.ss);

                if (!StringUtil.isNullOrEmpty(ss)) {
                    String[] searchcol = new String[]{"salesperson.value", "salesOrderNumber", "customer.name"};
                    Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 3);
                    StringUtil.insertParamSearchString(SearchStringMap);
                    String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                    condition += searchQuery;
                }
            }

            String query = " from SalesOrder where salesperson is not null and isopen = false and company.companyID = ? " + condition;
                    
            list = executeQuery( query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoicesFromSOForSalesCommission:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }
    
    @Override
    public KwlReturnObject getInvoicesFromSOForSalesCommission(HashMap<String, Object> requestParams) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) requestParams.get(Constants.companyKey);
            DateFormat df = (DateFormat) requestParams.get(Constants.df);

            ArrayList params = new ArrayList();
            ArrayList params1 = new ArrayList();
            ArrayList params2 = new ArrayList();
            String conditionSQL = "";
            params1.add(companyid);
            params2.add(companyid);
            
            if (requestParams.containsKey("soid") && requestParams.get("soid") != null) {
                conditionSQL += " and so.id = ? ";
                params1.add(requestParams.get("soid"));
                params2.add(requestParams.get("soid"));
            }
            
            String startDate = (String) requestParams.get(Constants.REQ_startdate);
            String endDate = (String) requestParams.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and ((inv.amountduedate >=? and inv.amountduedate <=?) or (inv.amountduedate is null)) ";
                params1.add(df.parse(startDate));
                params1.add(df.parse(endDate));
                params2.add(df.parse(startDate));
                params2.add(df.parse(endDate));
            }
            
            params.addAll(params1);
            params.addAll(params2);

            String query = " select inv.id as invid from invoice inv "
                    + " inner join invoicedetails invd on invd.invoice = inv.id "
                    + " inner join sodetails sod on sod.id = invd.salesorderdetail "
                    + " inner join salesorder so on so.id = sod.salesorder "
                    + " where inv.company = ? " + conditionSQL
                    + " union "
                    + " select inv.id as invid from invoice inv "
                    + " inner join invoicedetails invd on invd.invoice = inv.id "
                    + " inner join dodetails dod on dod.id = invd.deliveryorderdetail "
                    + " inner join deliveryorder do on do.id = dod.deliveryorder "
                    + " inner join sodetails sod on sod.id = dod.sodetails "
                    + " inner join salesorder so on so.id = sod.salesorder "
                    + " where do.isopeninsi = 'F' and inv.company = ? " + conditionSQL;
            
            query += " order by invid ";
                    
            list = executeSQLQuery( query, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoicesFromSOForSalesCommission:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }
    
    @Override
    public KwlReturnObject getInvoiceDetailsForProduct(HashMap<String, Object> requestParams) {
        List list = null;
        int count = 0;
        try {
            String hql = "select idetail from InvoiceDetail idetail inner join idetail.invoice invoice inner join idetail.inventory inventory inner join invoice.journalEntry je where inventory.product.ID=? and idetail.company.companyID=? and invoice.deleted=? and invoice.fixedAssetInvoice=? and invoice.fixedAssetLeaseInvoice=? and invoice.approvestatuslevel=? and invoice.isOpeningBalenceInvoice=? and invoice.isconsignment=?";
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            ArrayList params = new ArrayList();
//            productid,
//companyid,
//deleted,
//fixedassetInvoice,
//fixedAssetLeaseInvoice,
//approvallevel,
//isopeningbalanceinvoice,
//isconsignment
            String productId = (String) requestParams.get("productId");
            String companyid = (String) requestParams.get("companyid");
            params.add(productId);
            params.add(companyid);
            params.add(false);
            params.add(false);
            params.add(false);
            params.add(11);
            params.add(false);
            params.add(false);
            String startDate = (String) requestParams.get(Constants.REQ_startdate);
            String endDate = (String) requestParams.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                hql += " and (je.entryDate >=? and je.entryDate <=?)";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            list = executeQuery( hql, params.toArray());
            if(list!=null && list.size()>0){
                count=list.size();
            }
        } catch (Exception ex) {
            System.out.println("Exception occurred: "+ex.getMessage());
        } finally {
            return new KwlReturnObject(true, null, null, list, count);
        }
    }
    
    @Override
    public double getDeliveryOrderQuantityFromSI(String invoicedetailid, String companyid, boolean inSelectedUOM) throws ServiceException {
        List list = new ArrayList();
        double count = 0;
        try {
            String selectQuantity = inSelectedUOM ? "dodetails.deliveredQuantity" : "dodetails.baseuomdeliveredquantity";
            String hql = "select sum(" + selectQuantity + ") from DeliveryOrderDetail dodetails inner join dodetails.deliveryOrder doorder"
                    + " where doorder.company.companyID=? and doorder.deleted=? and dodetails.cidetails.ID=?";
            list = executeQuery( hql, new Object[]{companyid, false, invoicedetailid});
            Double totalCnt = 0d;
            if (list != null && !list.isEmpty() && list.get(0) != null) {
                totalCnt = (Double) list.get(0);
            }
            count = totalCnt.doubleValue();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDeliveryOrderQuantityFromSI:" + ex.getMessage(), ex);
        }
        return count;
    }
    @Override
    public double getInvoiceFromQuantityDO(String invoicedetailid, String companyid, boolean inSelectedUOM) throws ServiceException {
        List list = new ArrayList();
        double count = 0;
        try {
            String selectQuantity = inSelectedUOM ? "dod.deliveredQuantity" : "dod.baseuomdeliveredquantity";
            String hql = "select sum(" + selectQuantity + ") from InvoiceDetail invd inner join invd.deliveryOrderDetail dod where dod.ID=?"
                    + " and dod.company.companyID=? and dod.deliveryOrder.deleted=?";
            list = executeQuery(hql, new Object[]{invoicedetailid, companyid, false});
            Double totalCnt = 0d;
            if (list != null && !list.isEmpty() && list.get(0) != null) {
                totalCnt = (Double) list.get(0);
            }
            count = totalCnt.doubleValue();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoiceFromQuantityDO:" + ex.getMessage(), ex);
        }
        return count;
    }
    
    @Override
    public KwlReturnObject getInvoicesHavingServiceProduct(HashMap<String, Object> requestParams) throws ServiceException {
        List returnList = null;
        int count = 0;
        try {
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            String start = "";
            String limit = "";
            if (requestParams.containsKey(Constants.start) && requestParams.get(Constants.start) != null && requestParams.containsKey(Constants.limit) && requestParams.get(Constants.limit) != null) {
                start = (String) requestParams.get(Constants.start);
                limit = (String) requestParams.get(Constants.limit);
            }

            ArrayList params = new ArrayList();
            String condition = " where invoice.isfixedassetinvoice = false and invoice.isconsignment = false and invoice.isfixedassetleaseinvoice = false and producttype.id = ? ";
            params.add(Producttype.SERVICE);

            if (requestParams.containsKey(Constants.companyKey) && requestParams.get(Constants.companyKey) != null) {
                condition += " and invoice.company = ? ";
                params.add((String) requestParams.get(Constants.companyKey));
            }

            String startDate = (String) requestParams.get(Constants.REQ_startdate);
            String endDate = (String) requestParams.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " and (journalentry.entrydate >=? and journalentry.entrydate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }

            if (requestParams.containsKey(Constants.ss) && requestParams.get(Constants.ss) != null) {
                String ss = (String) requestParams.get(Constants.ss);

                if (!StringUtil.isNullOrEmpty(ss)) {
                    String[] searchcol = new String[]{"invoice.invoicenumber", "customer.acccode", "customer.name"};
                    Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 3);
                    StringUtil.insertParamSearchString(SearchStringMap);
                    String searchQuery = StringUtil.getSearchString(ss, Constants.and, searchcol);
                    condition += searchQuery;
                }
            }

            String appendCase = "and";
            String mySearchFilterString = "";
            String joinString = "";

            String filterConjuctionCriteria = Constants.and;
            if (requestParams.containsKey(Constants.Filter_Criteria) && requestParams.get(Constants.Filter_Criteria) != null) {
                if (requestParams.get(Constants.Filter_Criteria).toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = Constants.or;
                }
            }

            String searchJson = "";
            String searchDefaultFieldSQL = "";
            if (requestParams.containsKey(Constants.Acc_Search_Json) && requestParams.get(Constants.Acc_Search_Json) != null) {
                searchJson = requestParams.get(Constants.Acc_Search_Json).toString();

                if (!StringUtil.isNullOrEmpty(searchJson)) {
                    JSONObject serachJobj = new JSONObject(searchJson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);

                    if (customSearchFieldArray.length() > 0) {
                        /*
                         * Advance Search For Custom fields
                         */
                        requestParams.put(Constants.Searchjson, searchJson);
                        requestParams.put(Constants.appendCase, appendCase);
                        requestParams.put(Constants.Filter_Criteria, filterConjuctionCriteria);

                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(requestParams, true).get(Constants.myResult));
                        if (mySearchFilterString.contains("accjecustomdata")) {
                            joinString = " inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry ";
                        }
                        StringUtil.insertParamAdvanceSearchString1(params, searchJson);
                        if (mySearchFilterString.contains("CustomerCustomData")) {
                            joinString += " inner join customercustomdata  on customercustomdata.customerId=invoice.customer ";
                            mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "customercustomdata");
                        }
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }

            String query = " select distinct(invoice.id) from invoice "
                    + " inner join invoicedetails on invoicedetails.invoice = invoice.id "
                    + " inner join inventory on inventory.id = invoicedetails.id "
                    + " inner join product on product.id = inventory.product "
                    + " inner join producttype on producttype.id = product.producttype "
                    + " inner join customer on customer.id = invoice.customer "
                    + " inner join journalentry on journalentry.id = invoice.journalentry " + joinString + condition + mySearchFilterString;

            returnList = executeSQLQuery( query, params.toArray());
            count = returnList.size();

            if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
                returnList = executeSQLQueryPaging( query, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
            }
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoicesHavingServiceProduct:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, returnList, count);
    }
  
    @Override
    public KwlReturnObject saveInvoiceLinking(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String invoiceid = (String) hm.get("docid");
            InvoiceLinking invoicelinking = new InvoiceLinking();
            if (hm.containsKey("docid")) {
                Invoice invoice = (Invoice) get(Invoice.class, invoiceid);
                invoicelinking.setDocID(invoice);
            }
            if (hm.containsKey("moduleid")) {
                invoicelinking.setModuleID((Integer) hm.get("moduleid"));
            }
            if (hm.containsKey("linkeddocid")) {
                invoicelinking.setLinkedDocID((String) hm.get("linkeddocid"));
            }
            if (hm.containsKey("linkeddocno")) {
                invoicelinking.setLinkedDocNo((String) hm.get("linkeddocno"));
            }
            if (hm.containsKey("sourceflag")) {
                invoicelinking.setSourceFlag((Integer) hm.get("sourceflag"));
            }
            saveOrUpdate(invoicelinking);
            list.add(invoicelinking);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.saveInvoiceLinking : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject deleteLinkingInformationOfSI(HashMap<String, Object> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        int numRows1 = 0, numRows2 = 0, numRows3 = 0, numRows4 = 0, numRowsTotal = 0;
        String delQuery="";
        try {
            if (requestParams.containsKey("unlinkflag") && requestParams.get("unlinkflag") != null && Boolean.parseBoolean(requestParams.get("unlinkflag").toString())) {
                int type = -1;
                if (requestParams.containsKey("type") && requestParams.get("type") != null) {
                    type = Integer.parseInt(requestParams.get("type").toString());
                }
                params.add(requestParams.get("linkedTransactionID"));
                params.add(requestParams.get("billid"));
                switch (type) {
                    case 1:// SI->Advance Receipt
                    case 2://SI->RV
                        delQuery = "delete from ReceiptLinking rv where rv.DocID.ID=? and rv.LinkedDocID=?";
                        numRows3 = executeUpdate( delQuery, params.toArray());
                        delQuery = "delete from InvoiceLinking inv where inv.LinkedDocID=? and inv.DocID.ID=?";
                        numRows4 = executeUpdate( delQuery, params.toArray());
                        break;
                    case 3: // SI->DO
                        delQuery = "delete from DeliveryOrderLinking do where do.DocID.ID=? and do.LinkedDocID=?";
                        numRows3 = executeUpdate( delQuery, params.toArray());
                        delQuery = "delete from InvoiceLinking inv where inv.LinkedDocID=? and inv.DocID.ID=?";
                        numRows4 = executeUpdate( delQuery, params.toArray());
                        break;
                    case 4: // SI->SR
                        delQuery = "delete from SalesReturnLinking sr where sr.DocID.ID=? and sr.LinkedDocID=?";
                        numRows3 = executeUpdate( delQuery, params.toArray());
                        delQuery = "delete from InvoiceLinking inv where inv.LinkedDocID=? and inv.DocID.ID=?";
                        numRows4 = executeUpdate( delQuery, params.toArray());
                        break;
                    case 5: // DO->SI
                        delQuery = "delete from DeliveryOrderLinking do where do.DocID.ID=? and do.LinkedDocID=?";
                        numRows3 = executeUpdate( delQuery, params.toArray());
                        delQuery = "delete from InvoiceLinking inv where inv.LinkedDocID=? and inv.DocID.ID=?";
                        numRows4 = executeUpdate( delQuery, params.toArray());
                        break;
                    case 6: // SO->SI
                        delQuery = "delete from SalesOrderLinking so where so.DocID.ID=? and so.LinkedDocID=?";
                        numRows2 = executeUpdate( delQuery, params.toArray());
                        delQuery = "delete from InvoiceLinking inv where inv.LinkedDocID=? and inv.DocID.ID=?";
                        numRows4 = executeUpdate( delQuery, params.toArray());
                        break;
                    case 7: // CQ->SI for both forward or backward linking
                        delQuery = "delete from QuotationLinking cq where cq.DocID.ID=? and cq.LinkedDocID=?";
                        numRows1 = executeUpdate( delQuery, params.toArray());
                        delQuery = "delete from InvoiceLinking inv where inv.LinkedDocID=? and inv.DocID.ID=?";
                        numRows4 = executeUpdate( delQuery, params.toArray());
                        break;
                }
            } else {
                params.add(requestParams.get("invoiceid"));
                delQuery = "delete from QuotationLinking cq where cq.LinkedDocID=?";
                numRows1 = executeUpdate( delQuery, params.toArray());

                delQuery = "delete from SalesOrderLinking so where so.LinkedDocID=?";
                numRows2 = executeUpdate( delQuery, params.toArray());

                delQuery = "delete from DeliveryOrderLinking do where do.LinkedDocID=?";
                numRows3 = executeUpdate( delQuery, params.toArray());

                delQuery = "delete from InvoiceLinking inv where inv.DocID.ID=?";
                numRows4 = executeUpdate( delQuery, params.toArray());
            }
            
            numRowsTotal = numRows1 + numRows2 + numRows3 + numRows4;
        } catch (Exception ex) {
            throw ServiceException.FAILURE("", ex);//+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, numRowsTotal);
    }

    @Override
    public KwlReturnObject saveDeliveryOrderLinking(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        try {
            String deliveryorderid = (String) hm.get("docid");
            DeliveryOrderLinking dolinking = new DeliveryOrderLinking();
            if (hm.containsKey("docid")) {
                DeliveryOrder deliveryorder = (DeliveryOrder) get(DeliveryOrder.class, deliveryorderid);
                dolinking.setDocID(deliveryorder);
            }
            if (hm.containsKey("moduleid")) {
                dolinking.setModuleID((Integer) hm.get("moduleid"));
            }
            if (hm.containsKey("linkeddocid")) {
                dolinking.setLinkedDocID((String) hm.get("linkeddocid"));
            }
            if (hm.containsKey("linkeddocno")) {
                dolinking.setLinkedDocNo((String) hm.get("linkeddocno"));
            }
            if (hm.containsKey("sourceflag")) {
                dolinking.setSourceFlag((Integer) hm.get("sourceflag"));
            }
            saveOrUpdate(dolinking);
            list.add(dolinking);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.saveDeliveryOrderLinking : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject deleteLinkingInformationOfDO(HashMap<String, Object> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        int numRows1 = 0, numRows2 = 0, numRows3 = 0,numRows=0, numRowsTotal = 0;
        String query="";
        try {
            if (requestParams.containsKey("unlinkflag") && requestParams.get("unlinkflag") != null && Boolean.parseBoolean(requestParams.get("unlinkflag").toString())) {
                int type = -1;
                if (requestParams.containsKey("type") && requestParams.get("type") != null) {
                    type = Integer.parseInt(requestParams.get("type").toString());
                }
                params.add(requestParams.get("doid"));
                params.add(requestParams.get("billid"));
                if (type == 0 || type==1) {    // Type=0 DO->SI,  Type=1 SI->DO
                    query = "delete from InvoiceLinking inv where inv.LinkedDocID=? and inv.DocID.ID=?";
                    numRows1 = executeUpdate( query, params.toArray());
                    query = "delete from DeliveryOrderLinking do where do.DocID.ID=? and do.LinkedDocID=?";
                    numRows2 = executeUpdate( query, params.toArray());
                } else if (type == 2) { // Type=2 SO->DO
                    query = "delete from SalesOrderLinking so where so.LinkedDocID=? and so.DocID.ID=?";
                    numRows1 = executeUpdate( query, params.toArray());
                    query = "delete from DeliveryOrderLinking do where do.DocID.ID=? and do.LinkedDocID=?";
                    numRows2 = executeUpdate( query, params.toArray());
                } else if (type == 3) { // Type=3 DO->SR
                    query = "delete from SalesReturnLinking sr where sr.LinkedDocID=? and sr.DocID.ID=?";
                    numRows1 = executeUpdate( query, params.toArray());
                    query = "delete from DeliveryOrderLinking do where do.DocID.ID=? and do.LinkedDocID=?";
                    numRows2 = executeUpdate( query, params.toArray());
                }
            } else {
                params.add(requestParams.get("doid"));

                query = "delete from SalesOrderLinking so where so.LinkedDocID=?";
                numRows1 = executeUpdate( query, params.toArray());

                query = "delete from InvoiceLinking inv where inv.LinkedDocID=?";
                numRows2 = executeUpdate( query, params.toArray());

                query = "delete from DeliveryOrderLinking do where do.DocID.ID=?";
                numRows3 = executeUpdate( query, params.toArray());

            }
            numRowsTotal = numRows1 + numRows2 + numRows3;
        } catch (Exception ex) {
            throw ServiceException.FAILURE("", ex);//+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, numRowsTotal);
    }

    @Override
    public KwlReturnObject saveSalesReturnLinking(HashMap<String, Object> hm) throws ServiceException {
            List list = new ArrayList();
        try {
            String salesreturnid = (String) hm.get("docid");
            SalesReturnLinking srlinking = new SalesReturnLinking();
            if (hm.containsKey("docid")) {
                SalesReturn salesreturn = (SalesReturn) get(SalesReturn.class, salesreturnid);
                srlinking.setDocID(salesreturn);
            }
            if (hm.containsKey("moduleid")) {
                srlinking.setModuleID((Integer) hm.get("moduleid"));
            }
            if (hm.containsKey("linkeddocid")) {
                srlinking.setLinkedDocID((String) hm.get("linkeddocid"));
            }
            if (hm.containsKey("linkeddocno")) {
                srlinking.setLinkedDocNo((String) hm.get("linkeddocno"));
            }
            if (hm.containsKey("sourceflag")) {
                srlinking.setSourceFlag((Integer) hm.get("sourceflag"));
            }
            saveOrUpdate(srlinking);
            list.add(srlinking);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.saveSalesReturnLinking : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject deleteLinkingInformationOfSR(HashMap<String, Object> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        int numRows1 = 0, numRows2 = 0, numRows3 = 0, numRowsTotal = 0;
        try {
                      
            String delQuery = "";
            if (requestParams.containsKey("unlinkflag") && requestParams.get("unlinkflag") != null && Boolean.parseBoolean(requestParams.get("unlinkflag").toString())) {
                int type = -1;
                if (requestParams.containsKey("type") && requestParams.get("type") != null) {
                    type = Integer.parseInt(requestParams.get("type").toString());
                }
                params.add(requestParams.get("linkedTransactionID"));
                params.add(requestParams.get("srid"));
                switch (type) {
                    case 1: // SI->SR
                        delQuery = "delete from InvoiceLinking invl where invl.DocID.ID=? and invl.LinkedDocID=?";
                        numRows1 = executeUpdate(delQuery, params.toArray());
                        delQuery = "delete from SalesReturnLinking srl where  srl.LinkedDocID=? and srl.DocID.ID=?";
                        numRows2 = executeUpdate(delQuery, params.toArray());
                        break;
                    case 2: // DO->SR
                        delQuery = "delete from DeliveryOrderLinking dol where dol.DocID.ID=? and dol.LinkedDocID=?";
                        numRows1 = executeUpdate(delQuery, params.toArray());
                        delQuery = "delete from SalesReturnLinking srl where  srl.LinkedDocID=? and srl.DocID.ID=?";
                        numRows2 = executeUpdate(delQuery, params.toArray());
                        break;

                }
            } else {
                params.add(requestParams.get("srid"));

                delQuery = "delete from DeliveryOrderLinking do where do.LinkedDocID=?";
                numRows1 = executeUpdate(delQuery, params.toArray());

                delQuery = "delete from InvoiceLinking inv where inv.LinkedDocID=?";
                numRows2 = executeUpdate(delQuery, params.toArray());

                delQuery = "delete from SalesReturnLinking sr where sr.DocID.ID=?";
                numRows3 = executeUpdate(delQuery, params.toArray());
            }
            numRowsTotal = numRows1 + numRows2 + numRows3;
        } catch (Exception ex) {
            throw ServiceException.FAILURE("", ex);//+ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, numRowsTotal);
    }
    public KwlReturnObject getInvoiceFromDO(String doid, String companyid) throws ServiceException {
        List list = new ArrayList();
        List list1 = new ArrayList();
        List list2 = new ArrayList();
        try {
//            String selQuery = "select distinct invd.invoice,0 from InvoiceDetail invd where invd.deliveryOrderDetail.deliveryOrder.ID=? and invd.invoice.deleted=false and invd.company.companyID=? and invd.deliveryOrderDetail.deliveryOrder.deleted=false";
            // Type=0 DO -> SI
            String selQuery = "select distinct invd.invoice,0 from InvoiceDetail invd inner join invd.deliveryOrderDetail dod where dod.deliveryOrder.ID=? and invd.company.companyID=? and dod.deliveryOrder.deleted=false";
            list1 = executeQuery( selQuery, new Object[]{doid, companyid});
            // Type=1 SI -> DO
            String hqlQuery = "select distinct invd.invoice,1 from DeliveryOrderDetail dod inner join dod.cidetails invd where dod.deliveryOrder.ID=? and dod.company.companyID=? and invd.invoice.deleted=false";
            list2 = executeQuery( hqlQuery, new Object[]{doid, companyid});
            list.addAll(list1);
            list.addAll(list2);
        } catch (Exception ex) {
            System.out.println("Exception: getInvoiceFromDO " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    public KwlReturnObject getSalesOrdersFromDO(String doid, String companyid) throws ServiceException {
        List list = new ArrayList();
        try {
            //  Type=2  SO-> DO
            String hqlQuery = "select distinct invd.salesOrder,2 from DeliveryOrderDetail dod inner join dod.sodetails invd where dod.deliveryOrder.ID=? and dod.company.companyID=? and invd.salesOrder.deleted=false";
            list = executeQuery( hqlQuery, new Object[]{doid, companyid});
        } catch (Exception ex) {
            System.out.println("Exception: getSalesOrdersFromDO " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getSalesReturnsFromDO(String doid, String companyid) throws ServiceException {
        List list = new ArrayList();
        try {
            // Type=3 DO -> SR
            String selQuery = "select distinct invd.salesReturn,3 from SalesReturnDetail invd inner join invd.dodetails dod where dod.deliveryOrder.ID=? and invd.company.companyID=? and dod.deliveryOrder.deleted=false";            
            list = executeQuery( selQuery, new Object[]{doid, companyid});
        } catch (Exception ex) {
            System.out.println("Exception: getInvoiceFromDO " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getDODetailsFromCustomerInvoice(String invoiceid, String doid, String companyid) throws ServiceException {
        List<DeliveryOrderDetail> list = null;
        int count = 0;
        try {
            String selQuery = "select do from DeliveryOrderDetail do  where do.cidetails.invoice.ID=? and do.deliveryOrder.ID=? and do.deliveryOrder.deleted=false and do.company.companyID=?";
            list = executeQuery( selQuery, new Object[]{invoiceid, doid, companyid});
            if (list != null) {
                count = list.size();
            }
        } catch (Exception ex) {
            System.out.println("Exception: getDODetailsFromCustomerInvoice() " + ex.getMessage());
        } finally {
            return new KwlReturnObject(true, "", null, list, count);
        }
    }

    @Override
    public KwlReturnObject getDODetailsFromSalesOrder(String invoiceid, String doid, String companyid) throws ServiceException {
        List<DeliveryOrderDetail> list = null;
        int count = 0;
        try {
            String selQuery = "select do from DeliveryOrderDetail do  where do.sodetails.salesOrder.ID=? and do.deliveryOrder.ID=? and do.company.companyID=?";
            list = executeQuery( selQuery, new Object[]{invoiceid, doid, companyid});
            if (list != null) {
                count = list.size();
            }
        } catch (Exception ex) {
            System.out.println("Exception: getDODetailsFromSalesOrder() " + ex.getMessage());
        } finally {
            return new KwlReturnObject(true, "", null, list, count);
        }
    }

    /**
     * includeDeletedInvoice flag should be passed true if deleted invoices are also to be fetched
     * @param invoiceid
     * @param doid
     * @param companyid
     * @param includeDeletedInvoice
     * @return
     * @throws ServiceException 
     */
    @Override
    public KwlReturnObject getInvoiceDetailsFromDO(String invoiceid, String doid, String companyid, boolean includeDeletedInvoice) throws ServiceException {
        List<InvoiceDetail> list = null;
        int count = 0;
        try {
            String hqlQuery = "select invd from InvoiceDetail invd inner join invd.deliveryOrderDetail dod where invd.invoice.ID=? and dod.deliveryOrder.ID=? and invd.company.companyID=? and dod.deliveryOrder.deleted=false ";
            if (!includeDeletedInvoice) {
                hqlQuery += " and invd.invoice.deleted=false ";
            }
            list = executeQuery( hqlQuery, new Object[]{invoiceid, doid, companyid});
            if (list != null) {
                count = list.size();
            }
        } catch (Exception ex) {
            System.out.println("Exception: getInvoiceDetailsFromDO() " + ex.getMessage());
        } finally {
            return new KwlReturnObject(true, "", null, list, count);
        }
    }
    public KwlReturnObject getSalesReturnDetailsFromDO(String salesReturnId,String doid, String companyid) throws ServiceException {
        List<SalesReturnDetail> list = null;
        int count=0;
        try {
            String selQuery = "select invd from SalesReturnDetail invd inner join invd.dodetails dod where invd.salesReturn.ID=? and dod.deliveryOrder.ID=? and invd.salesReturn.deleted=false and invd.company.companyID=? and dod.deliveryOrder.deleted=false";
            list = executeQuery( selQuery, new Object[]{salesReturnId,doid, companyid});
            if(list!=null){
                count=list.size();
            }
        } catch (Exception ex) {
            System.out.println("Exception: getInvoiceFromDO " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list,count);
    }
    public KwlReturnObject getSalesReturnDFromDOD(String dodid) throws ServiceException {
        List list = new ArrayList();
        String q = "select srd from SalesReturnDetail srd where srd.dodetails.ID=?";
        list = executeQuery( q, new Object[]{dodid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getInvoiceDetailForSalesPersonCommissionDimensionReport(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = (String) request.get(Constants.companyKey);
            DateFormat df = (DateFormat) request.get(Constants.df);
            ArrayList params = new ArrayList();
            String conditionSQL = "";
            params.add(companyid);

            String salesPersonid = (String) request.get(InvoiceConstants.salesPersonid);
            if (!StringUtil.isNullOrEmpty(salesPersonid) && !StringUtil.equal(salesPersonid, "-1") && !StringUtil.equal(salesPersonid, "All")) {
                salesPersonid = AccountingManager.getFilterInString(salesPersonid);
                conditionSQL += " and invoice.masterSalesPerson in " + salesPersonid + "  ";
            } else if (StringUtil.equal(salesPersonid, "All")) {
                conditionSQL += " and invoice.masterSalesPerson is not null ";
            }

            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and (journalentry.entrydate >=? and journalentry.entrydate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            
            String appendCase = "and";
            String mySearchFilterString = "";
            String joinString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
                if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            if (request.containsKey("searchJson") && request.get("searchJson") != null) {
                String Searchjson = request.get("searchJson").toString();
                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    request.put(Constants.Searchjson, Searchjson);
                    request.put(Constants.appendCase, appendCase);
                    request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                    mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
                    if (mySearchFilterString.contains("accjecustomdata") || mySearchFilterString.contains("AccJECustomData")) {
                        joinString += " inner join accjecustomdata on accjecustomdata.journalentryId = invoice.journalentry ";
                        mySearchFilterString = mySearchFilterString.replaceAll("AccJECustomData", "accjecustomdata");
                    }
                    if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                        mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "accjedetailcustomdata");
                        joinString += " inner join accjedetailcustomdata  on accjedetailcustomdata.jedetailId = jedetail.id ";
                    }
                    StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                }
            }

            String mysqlQuery = " select invoicedetails.id as invid from invoicedetails "
                    + " inner join invoice on invoicedetails.invoice = invoice.id "
                    + " inner join journalentry on invoice.journalentry = journalentry.id "
                    + " inner join jedetail on  jedetail.id = invoicedetails.salesjedid " + joinString
                    + " where invoice.company = ? and invoice.deleteflag = 'F' and invoice.pendingapproval = 0 and invoice.isdraft = false " + conditionSQL + mySearchFilterString;
            list = executeSQLQuery( mysqlQuery, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoiceDetailSalesPersonCommissionDimensionReport:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }
    public KwlReturnObject getDOFromOrToInvoices(String invoiceid, String companyid) throws ServiceException {
        List list = new ArrayList();
        List list1 = new ArrayList();
        List list2 = new ArrayList();
        try {
            // Type=5 DO -> SI
            String selQuery = "select distinct dod.deliveryOrder,5 from InvoiceDetail invd inner join invd.deliveryOrderDetail dod where invd.invoice.ID=? and invd.company.companyID=? and dod.deliveryOrder.deleted=false";
            list1 = executeQuery( selQuery, new Object[]{invoiceid, companyid});
            // Type=3 SI -> DO
            selQuery = "select distinct dod.deliveryOrder,3 from DeliveryOrderDetail dod inner join dod.cidetails invd where invd.invoice.ID=? and invd.company.companyID=?";
            list2 = executeQuery( selQuery, new Object[]{invoiceid, companyid});
            list.addAll(list1);
            list.addAll(list2);
        } catch (Exception ex) {
            System.out.println("Exception: getDOFromOrToInvoices " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getCustomerQuotationLinkedInInvoice(String invoiceid, String companyid) throws ServiceException {
        List<Quotation> list = null;
        int count = 0;
        try {
            String selQuery = "select distinct quod.quotation from InvoiceDetail invd inner join invd.quotationDetail quod where invd.invoice.ID=? and invd.company.companyID=? and quod.quotation.deleted=false";
            list = executeQuery( selQuery, new Object[]{invoiceid, companyid});
            if (list != null) {
                count = list.size();
            }
        } catch (Exception ex) {
            System.out.println("Exception: getCustomerQuotationLinkedInInvoice " + ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    public KwlReturnObject getLinkDetailReceipts(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from LinkDetailReceipt";
        return buildNExecuteQuery( query, requestParams);
    }
    
    /**
     * includeDeletedInvoice flag should be passed true if deleted invoices are also to be fetched
     * @param billid
     * @param quotationid
     * @param companyid
     * @param includeDeletedInvoice
     * @return
     * @throws ServiceException 
     */
    @Override
    public KwlReturnObject getInvoiceLinkedWithCQ(String billid, String quotationid, String companyid, boolean includeDeletedInvoice) throws ServiceException {
       List<InvoiceDetail> list = null;
        int count = 0;
        try {
            String hqlQuery = "select invd from InvoiceDetail invd inner join invd.quotationDetail qod where invd.invoice.ID=? and qod.quotation.ID=? and invd.company.companyID=? and qod.quotation.deleted=false ";
            if (!includeDeletedInvoice) {
                hqlQuery += " and invd.invoice.deleted=false ";
            }
            list = executeQuery( hqlQuery, new Object[]{billid, quotationid, companyid});
            if (list != null) {
                count = list.size();
            }
        } catch (Exception ex) {
            System.out.println("Exception: getInvoiceLinkedWithCQ() " + ex.getMessage());
        } finally {
            return new KwlReturnObject(true, "", null, list, count);
        }
    }
    
    @Override
    public KwlReturnObject getSalesOrderLinkedWithCQ(String billid, String quotationid, String companyid) throws ServiceException {
        List<SalesOrderDetail> list = null;
        int count = 0;
        try {
            String hqlQuery = "select sod from SalesOrderDetail sod inner join sod.quotationDetail qod where sod.salesOrder.ID=? and qod.quotation.ID=? and sod.salesOrder.deleted=false and sod.company.companyID=? and qod.quotation.deleted=false";
            list = executeQuery( hqlQuery, new Object[]{billid, quotationid, companyid});
            if (list != null) {
                count = list.size();
            }
        } catch (Exception ex) {
            System.out.println("Exception: getSalesOrderLinkedWithCQ() " + ex.getMessage());
        } finally {
            return new KwlReturnObject(true, "", null, list, count);
        }
    }
    
    @Override
    public KwlReturnObject checkEntryForInvoiceInLinkingTable(String docid, String linkeddocid) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(docid);
        params.add(linkeddocid);
        String hqlQuery = "from InvoiceLinking invl where invl.DocID.ID=? and invl.LinkedDocID=?";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
}

    @Override
    public KwlReturnObject checkEntryForSalesOrderInLinkingTable(String docid, String linkeddocid) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(docid);
        params.add(linkeddocid);
        String hqlQuery = "from SalesOrderLinking sol where sol.DocID.ID=? and sol.LinkedDocID=?";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    

    @Override
    public KwlReturnObject checkEntryForDeliveryOrderInLinkingTable(String docid, String linkeddocid) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(docid);
        params.add(linkeddocid);
        String hqlQuery = "from DeliveryOrderLinking dol where dol.DocID.ID=? and dol.LinkedDocID=?";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject checkEntryForSalesReturnInLinkingTable(String docid, String linkeddocid) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(docid);
        params.add(linkeddocid);
        String hqlQuery = "from SalesReturnLinking srl where srl.DocID.ID=? and srl.LinkedDocID=?";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject checkEntryForInvoiceInLinkingTableForForwardReference(String docid) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        params.add(docid);
        String hqlQuery = "from InvoiceLinking invl where invl.DocID.ID=? and invl.SourceFlag=0";
        list = executeQuery( hqlQuery, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    /**
     * Description : Method is used to get Credit Note Detail ID that linked
     * with Invoice
     *
     * @param <request> contains company ID
     *
     * @return :List
     */
    
    @Override
    public KwlReturnObject getCreditNotesLinkedWithInvoice(HashMap<String, Object> request) throws ServiceException {
         List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();
            String query = "select cnd.ID from CreditNoteDetail cnd  inner join cnd.invoice inv  where cnd.company.companyID=?";


            list = executeQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getCreditNoteLinkedWithInvoice:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    /**
     * Description : Method is used to get PO detail ID linked with SO
     *
     *
     * @param <request> contains company ID
     *
     * @return :List
     */
    
    @Override
    public KwlReturnObject getLinkedPOWithSO(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {

            String companyid = request.get("companyid").toString();
            String query = "select distinct podetails.id from podetails  inner join sodetails  on sodetails.id= podetails.salesorderdetailid where  podetails.company=?";

            list = executeSQLQuery( query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getLinkedPOWithSO:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    public KwlReturnObject getAutoDOFromInvoice(String invoiceId, String companyid) throws ServiceException {
        List list = new ArrayList();
        try {
            String selQuery = "";
            selQuery = "select DD.deliveryOrder.ID from DeliveryOrderDetail DD where DD.cidetails.invoice.ID=? and DD.deliveryOrder.deleted=false and DD.company.companyID = ? and DD.deliveryOrder.isAutoGeneratedDO=true";
            list = executeQuery(selQuery, new Object[]{invoiceId, companyid});
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage());
        } finally {
            return new KwlReturnObject(true, "", null, list, list.size());
        }
    }

    
    @Override
    public KwlReturnObject saveWastageDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            WastageDetails wastageDetails = new WastageDetails();

            if (dataMap.containsKey("productID") && dataMap.get("productID") != null) {
                Product product = (Product) get(Product.class, (String) dataMap.get("productID"));
                wastageDetails.setProduct(product);
            }
            if (dataMap.containsKey("quantity") && dataMap.get("quantity") != null) {
                wastageDetails.setQuantity((Double) dataMap.get("quantity"));
            }
            if (dataMap.containsKey("percentage") && dataMap.get("percentage") != null) {
                wastageDetails.setPercentage((Double) dataMap.get("percentage"));
            }
            if (dataMap.containsKey("actualQuantity") && dataMap.get("actualQuantity") != null) {
                wastageDetails.setActualQuantity((Double) dataMap.get("actualQuantity"));
            }
            if (dataMap.containsKey("wastageQuantityType") && dataMap.get("wastageQuantityType") != null) {
                wastageDetails.setWastageQuantityType((Integer) dataMap.get("wastageQuantityType"));
            }
            if (dataMap.containsKey("wastageQuantity") && dataMap.get("wastageQuantity") != null) {
                wastageDetails.setWastageQuantity((Double) dataMap.get("wastageQuantity"));
            }
            if (dataMap.containsKey("deliveryOrderDetailID") && dataMap.get("deliveryOrderDetailID") != null) {
                DeliveryOrderDetail deliveryOrderDetail = (DeliveryOrderDetail) get(DeliveryOrderDetail.class, (String) dataMap.get("deliveryOrderDetailID"));
                wastageDetails.setDeliveryOrderDetail(deliveryOrderDetail);
            }
            if (dataMap.containsKey("companyID") && dataMap.get("companyID") != null) {
                Company company = (Company) get(Company.class, (String) dataMap.get("companyID"));
                wastageDetails.setCompany(company);
            }

            save(wastageDetails);
            list.add(wastageDetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveWastageDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getWastageDetails(HashMap<String, Object> requestParams) throws ServiceException {
        List returnlist = new ArrayList();
        try {
            List paramslist = new ArrayList();
            String condition = "";
            String companyID = (String) requestParams.get("companyID");
            paramslist.add(companyID);
            if (requestParams.containsKey("deliveryOrderDetailID") && requestParams.containsKey("deliveryOrderDetailID")) {
                condition += " and deliveryOrderDetail.ID = ? ";
                paramslist.add(requestParams.get("deliveryOrderDetailID"));
            }
            String query = " from WastageDetails where company.companyID = ? " + condition;
            returnlist = executeQuery(query, paramslist.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getWastageDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, returnlist, returnlist.size());
    }
  
    /* Purpose to get Linked Debit Note with Purchase Return*/
    @Override
    public KwlReturnObject getLinkedDebitNoteWithPR(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            ArrayList params = new ArrayList();
            String query = "select debitnote from DebitNote debitnote  inner join debitnote.purchaseReturn pr  where debitnote.company.companyID=?";

            list = executeQuery(query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getLinkedDebitNoteWithPR:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    /* Purpose to get Linked Credit Note with Sales Return*/
    @Override
    public KwlReturnObject getLinkedCreditNoteWithSR(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            String query = "select creditnote from CreditNote creditnote  inner join creditnote.salesReturn sr  where creditnote.company.companyID=?";

            list = executeQuery(query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getLinkedCreditNoteWithSR:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    /* Purpose to get Linked Make Payment with Credit Note*/
    @Override
    public KwlReturnObject getLinkedMPWithCN(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            String query = "select cnpayment.ID from CreditNotePaymentDetails cnpayment  inner join cnpayment.creditnote cn  where cn.company.companyID=?";

            list = executeQuery(query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getLinkedMPWithCN:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    /* Purpose to get Linked Receive Payment with Debit Note*/
    @Override
    public KwlReturnObject getLinkedRPWithDN(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            String query = "select dnpayment.ID from DebitNotePaymentDetails dnpayment  inner join dnpayment.debitnote dn  where dn.company.companyID=?";

            list = executeQuery(query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getLinkedRPWithDN:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    /* Purpose to get Linked Advance Make Payment with Credit Note*/
    @Override
    public KwlReturnObject getLinkedAdvanceMPWithCN(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            String query = "select cnpayment.ID from LinkDetailPaymentToCreditNote cnpayment  inner join cnpayment.creditnote cn  where cn.company.companyID=?";

            list = executeQuery(query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getLinkedAdvanceMPWithCN:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    /* Purpose to get Linked advance Receive Payment with Debit Note*/
    @Override
    public KwlReturnObject getLinkedAdvanceRPWithDN(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            String query = "select dnpayment.ID from LinkDetailReceiptToDebitNote dnpayment  inner join dnpayment.debitnote dn  where dn.company.companyID=?";

            list = executeQuery(query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getLinkedAdvanceRPWithDN:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    @Override
    public KwlReturnObject getInvoiceDetailfromCrmQuotation(String crmQuoteID) throws ServiceException {
         List list = null;
         ArrayList params = new ArrayList();
         try{
            params.add(crmQuoteID);
            params.add(crmQuoteID);

            String innerQueryquotation = " inner join invoicedetails ind on ind.invoice = invoice.id"
                    + " inner join sodetails sod on sod.id=ind.salesorderdetail"
                    + " inner join quotationdetails qd on qd.id = sod.quotationdetail"
                    + " inner join quotation quot on quot.id=qd.quotation where quot.crmquoteid=? ";

            String innerQuerysalesorder = " inner join invoicedetails ind on ind.invoice = invoice.id"
                    + " inner join quotationdetails qd on qd.id = ind.quotationdetail"
                    + " inner join quotation quot on quot.id=qd.quotation where quot.crmquoteid=?";

            String query = "select invoice.invoicenumber,invoice.id from invoice invoice" + innerQuerysalesorder + " union select invoice.invoicenumber,invoice.id from invoice invoice" + innerQueryquotation;
            list = executeSQLQuery(query, params.toArray());
         }catch(Exception ex){
             throw ServiceException.FAILURE("accInvoiceImpl.getInvoiceDetailfromCrmQuotation:" + ex.getMessage(), ex);
         }
         return new KwlReturnObject(true, "", null, list, list.size());
     }

    /* Used to get Document ID that was linked with Invoice from invoicelinking table */

    @Override
    public KwlReturnObject getIDFromInvoiceLinking(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();
            String moduleid = request.get("moduleid").toString();
            String query = "SELECT docid, linkeddocid from invoicelinking INNER JOIN invoice on invoice.id=invoicelinking.docid WHERE  invoicelinking.moduleid=? and invoice.company=?";

            list = executeSQLQuery(query, new Object[]{moduleid, companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getIDFromInvoiceLinking:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject getInvoicesWithSearchColumn(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        ArrayList paramslist = new ArrayList();
        String condition = "";
        try {
            String companyid = request.get("companyid").toString();
            paramslist.add(companyid);

            if (request.containsKey("startdate") && request.containsKey("enddate")) {
                Date startDate = (Date) request.get("startdate");
                Date endDate = (Date) request.get("enddate");

                condition = " and (journalentry.entrydate >=? and journalentry.entrydate <=?)";
                paramslist.add(startDate);
                paramslist.add(endDate);
            }

            String searchString = request.get("searchstring").toString();
            String mysqlQuery = "select invoice.id from invoice  "
                    + " inner join journalentry on invoice.journalentry = journalentry.id  "
                    + " inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry "
                    + " where invoice.company = ? and invoice.deleteflag='F' " + condition + searchString;

            list = executeSQLQuery(mysqlQuery, paramslist.toArray());
//            list = executeSQLQuery(mysqlQuery, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoicesWithSearchColumn:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    
    /**
     * Description : Method is used to get sales Invoice linked in sales Return
     *
     * @param <request> contains Sales Return ID & company ID
     * @return :List
     */
    @Override
    public KwlReturnObject getInvoicesLinkedInSalesReturn(Map request) throws ServiceException {
        String purchseReturnID = (String) request.get("salesReturnID");
        String companyid = (String) request.get("companyid");
        String selQuery = "select distinct inv from SalesReturnDetail srd inner join srd.cidetails invd inner join invd.invoice inv where srd.salesReturn.ID=? and inv.deleted=false and invd.company.companyID=?";

        List list = executeQuery(selQuery, new Object[]{purchseReturnID, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    /**
     * Description : Method is used to get Delivery Order linked in sales Return
     *
     * @param <request> contains Sales Return ID & company ID
     * @return :List
     */
    @Override
    public KwlReturnObject getDOLinkedInSalesReturn(Map request) throws ServiceException {
        String purchseReturnID = (String) request.get("salesReturnID");
        String companyid = (String) request.get("companyid");
        String selQuery = "select distinct do from SalesReturnDetail srd inner join srd.dodetails dod inner join dod.deliveryOrder do where srd.salesReturn.ID=? and do.deleted=false and dod.company.companyID=?";

        List list = executeQuery(selQuery, new Object[]{purchseReturnID, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    /**
     * Description : Method is used to get Credit Note linked in sales Return
     *
     * @param <request> contains Sales Return ID & company ID
     * @return :List
     */
    
    @Override
    public KwlReturnObject getCredittNoteLinkedInsalesReturn(Map request) throws ServiceException {
        String purchseReturnID = (String) request.get("salesReturnID");
        String companyid = (String) request.get("companyid");
        String selQuery = "select distinct cn from CreditNote cn inner join cn.salesReturn sr where sr.ID=? and cn.company.companyID=?";

        List list = executeQuery(selQuery, new Object[]{purchseReturnID, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getPaymentLinkedInsalesReturn(Map request) throws ServiceException {
        String purchseReturnID = (String) request.get("salesReturnID");
        String companyid = (String) request.get("companyid");
        String selQuery = "select distinct cn from Payment cn inner join cn.salesReturn sr where sr.ID=? and cn.company.companyID=?";

        List list = executeQuery(selQuery, new Object[]{purchseReturnID, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    /**
     * Description : Method is used to get Purchase Return linked with Debit
     * Note
     *
     * @param <request> contains Debit Note ID & company ID
     * @return :List
     */
    @Override
    public KwlReturnObject getPurchaseReturnLinkedInDebitNote(Map request) throws ServiceException {
        String debitNoteID = (String) request.get("noteId");
        String companyid = (String) request.get("companyid");
        String selQuery = "select distinct pr from DebitNote dn inner join dn.purchaseReturn pr where dn.ID=? and pr.company.companyID=?";

        List list = executeQuery(selQuery, new Object[]{debitNoteID, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    /**
     * Description : Method is used to get Sales Return linked with Credit Note
     *
     * @param <request> contains Credit Note ID & company ID
     * @return :List
     */
    @Override
    public KwlReturnObject getSalesReturnLinkedInCreditNote(Map request) throws ServiceException {
        String creditNoteID = (String) request.get("noteId");
        String companyid = (String) request.get("companyid");
        String selQuery = "select distinct sr from CreditNote cn inner join cn.salesReturn sr where cn.ID=? and sr.company.companyID=?";

        List list = executeQuery(selQuery, new Object[]{creditNoteID, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    /**
     * Description : Method is used to get Receive Payment made against Sales
     * Invoice
     *
     * @param <request> contains company ID
     * @return :List contains id of Receive payment detail
     */
    @Override
    public KwlReturnObject getLinkedRPWithSI(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            String query = "select invpayment.ID from ReceiptDetail invpayment  inner join invpayment.invoice inv  where inv.company.companyID=?";

            list = executeQuery(query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getLinkedRPWithSI:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    /**
     * Description : Method is used to get Advance Receive Payment made against
     * sales Invoice
     *
     * @param <request> contains company ID
     * @return :List contains id of Receive payment detail
     */
    @Override
    public KwlReturnObject getLinkedAdvanceRPWithSI(HashMap<String, Object> request) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            String companyid = request.get("companyid").toString();

            String query = "select invpayment.ID from LinkDetailReceipt invpayment  inner join invpayment.invoice inv  where inv.company.companyID=?";

            list = executeQuery(query, new Object[]{companyid});
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getLinkedAdvanceRPWithSI:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    @Override
    public KwlReturnObject deleteBadDebtInvoiceMapping(HashMap<String, Object> requestParams) throws ServiceException {
        int count=0;
        try {
            String condition = "";
            ArrayList params = new ArrayList();
            String companyid = (String) requestParams.get("companyid");
            params.add(companyid);

            if (requestParams.containsKey("id") && requestParams.get("id") != null) {
                condition += " and bdm.id=? ";
                params.add((String) requestParams.get("id"));
            }
            
            if (requestParams.containsKey("invoiceid") && requestParams.get("invoiceid") != null) {
                condition += " and bdm.invoice.ID=? ";
                params.add((String) requestParams.get("invoiceid"));
            }
            
            if (requestParams.containsKey("receiptid") && requestParams.get("receiptid") != null) {
                condition += " and bdm.receiptId=? ";
                params.add((String) requestParams.get("receiptid"));
            }

            if (requestParams.containsKey("badDebtType") && requestParams.get("badDebtType") != null) {
                condition += " and bdm.badDebtType=? ";
                params.add((Integer) requestParams.get("badDebtType"));
            }
            String query = "Delete from BadDebtInvoiceMapping bdm where bdm.company.companyID=? " + condition;
            count = executeUpdate(query, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("deleteBadDebtInvoiceMapping : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null,count);
    }
    /**
     *
     * @param request
     * @return
     * @throws ServiceException
     * @Description : Advance Search on Detail Table
     */
    public KwlReturnObject getInvoiceDetailsUsingAdvanceSearch(HashMap<String, Object> request) throws ServiceException {
        ArrayList params = new ArrayList();
        if (request.containsKey("Id")) {
            String id = request.get("Id").toString();
            params.add(id);
        }
        boolean lineLevelAmount = true;
        if (request.containsKey("lineLevelAmount")) {
            lineLevelAmount = Boolean.parseBoolean(request.get("lineLevelAmount").toString());
        }
        String appendCase = "and";
        String mySearchFilterString = "";
        String joinString = "";
        String joinString1 = "";
        String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
        if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
            if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                filterConjuctionCriteria = com.krawler.common.util.Constants.or;
            }
        }
        String Searchjson = "";
        if (request.containsKey("searchJson") && request.get("searchJson") != null) {
            Searchjson = request.get("searchJson").toString();

            if (!StringUtil.isNullOrEmpty(Searchjson) && lineLevelAmount) {
                try {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);

                    if (customSearchFieldArray.length() > 0) {
                        try {
                            //Advance search case for Custome field
                            request.put(Constants.Searchjson, Searchjson);
                            request.put(Constants.appendCase, appendCase);
                            request.put("filterConjuctionCriteria", filterConjuctionCriteria);

                            mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
                            if (mySearchFilterString.contains("accjecustomdata")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("accjecustomdata", "invd.invoice.journalEntry.accBillInvCustomData");//
//                                joinString1 = " inner join invoice on invoice.id = invoicedetails.invoice  inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry ";
                            }
                            if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "jed.accJEDetailCustomData");//
//                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "accjedetailcustomdata");//
//                                joinString1 += " left join accjedetailcustomdata  on accjedetailcustomdata.jedetailId=jedetail.id ";
                            }
                            if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "jed.accJEDetailsProductCustomData");//    
//                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "accjedetailproductcustomdata");//    
//                                joinString1 += " left join accjedetailproductcustomdata  on accjedetailproductcustomdata.jedetailId=jedetail.id ";
                            }
                            StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                        } catch (ParseException ex) {
                            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } catch (JSONException ex) {
                    Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

//        String query = " select DISTINCT invoicedetails from invoicedetails  inner join jedetail jed on jedetail.id=invoicedetails.salesjedid  where invoicedetails.invoice =? " + mySearchFilterString;
        String query = " select DISTINCT  invd from InvoiceDetail invd  inner join invd.salesJED  jed where invd.invoice.ID =? " + mySearchFilterString;
        List list = executeQuery(query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    /**
     * Description : Method is used to get InvoiceDetail using SalesOrderDetail ID     *
     * @param <soid> contains SalesOderDetail ID
     * @return :KwlReturnObject
     */
    public KwlReturnObject getInvoiceDetailFromSOD(String soid) throws ServiceException {
        String selQuery = "from InvoiceDetail ge where ge.salesorderdetail.ID = ? and ge.invoice.deleted = false and ge.invoice.draft=false and approvestatuslevel=11";
        List list = executeQuery(selQuery, new Object[]{soid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getDeliveryOrderIDFromSOD(String sodid, String companyid) throws ServiceException {
        List list = new ArrayList();       
        try {
            String query = "select dodetails.id from dodetails inner join deliveryorder on dodetails.deliveryorder=deliveryorder.id "
                    + "where  deliveryorder.company=? and deliveryorder.deleteflag='F' and dodetails.sodetails=? and deliveryorder.approvestatuslevel=11 "
                    + "union "
                    + "select dodetails.id from dodetails inner join deliveryorder on dodetails.deliveryorder=deliveryorder.id "
                    + "where  deliveryorder.company=? and deliveryorder.deleteflag='F' and deliveryorder.approvestatuslevel=11 and dodetails.cidetails in "
                    + " ( select invoicedetails.id from invoicedetails inner join invoice on invoicedetails.invoice=invoice.id "
                    + "where invoice.company=? and invoice.deleteflag='F' and invoicedetails.salesorderdetail=? )";
            list = executeSQLQuery( query, new Object[]{companyid, sodid, companyid, companyid, sodid});           
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDeliveryOrderDFromSOD:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getSalesReturnDetailTermMap(HashMap<String, Object> hm) throws ServiceException{
        List list = new ArrayList();
        List param = new ArrayList();
        try {
            String query = "from SalesReturnDetailsTermMap ";
            String condition = "";
            String orderby = " order by term.termSequence ";
            if (hm.containsKey("salesReturnDetailid") && hm.get("salesReturnDetailid") != null) {
                String SODetailid = hm.get("salesReturnDetailid").toString();
                condition += " salesreturndetail.ID = ? ";
                param.add(SODetailid);
            }
            if (hm.containsKey("productid") && hm.get("productid") != null) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }
                condition += " product.ID = ? ";
                param.add(hm.get("productid"));
            }
            if (hm.containsKey("termtype") && hm.get("termtype") != null) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }
                condition += " term.termType = ? ";
                param.add(hm.get("termtype"));
            }
            if (!StringUtil.isNullOrEmpty(condition)) {
                query += " where " + condition;
            }
            if (hm.containsKey("orderbyadditionaltax") && hm.get("orderbyadditionaltax") != null) {
                orderby += " , term.isAdditionalTax ";
            }
            orderby += " ASC ";
            query += orderby;
            list = executeQuery(query, param.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getSalesReturnDetailTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    
    }

    
    @Override
    public KwlReturnObject saveSalesReturnDetailsTermMap(HashMap<String, Object> SRDetailsTermsMap) throws ServiceException{
        List list = new ArrayList();
        try {
            SalesReturnDetailsTermMap srtermmap = new SalesReturnDetailsTermMap();

            if (SRDetailsTermsMap.containsKey("id")) {
                srtermmap = (SalesReturnDetailsTermMap) get(SalesReturnDetailsTermMap.class, (String) SRDetailsTermsMap.get("id"));
            }
            if (SRDetailsTermsMap.containsKey("termamount") && SRDetailsTermsMap.get("termamount")!=null && !StringUtil.isNullOrEmpty(SRDetailsTermsMap.get("termamount").toString())) {
                srtermmap.setTermamount(Double.parseDouble(SRDetailsTermsMap.get("termamount").toString()));
            }
            if (SRDetailsTermsMap.containsKey("termpercentage") && SRDetailsTermsMap.get("termpercentage")!=null && !StringUtil.isNullOrEmpty(SRDetailsTermsMap.get("termpercentage").toString())) {
                srtermmap.setPercentage(Double.parseDouble(SRDetailsTermsMap.get("termpercentage").toString()));
            }
            if (SRDetailsTermsMap.containsKey("assessablevalue") && SRDetailsTermsMap.get("assessablevalue")!=null && !StringUtil.isNullOrEmpty(SRDetailsTermsMap.get("assessablevalue").toString())) {
                srtermmap.setAssessablevalue(Double.parseDouble(SRDetailsTermsMap.get("assessablevalue").toString()));
            }
            if (SRDetailsTermsMap.containsKey("salesReturnDetailID") && SRDetailsTermsMap.get("salesReturnDetailID")!=null && !StringUtil.isNullOrEmpty(SRDetailsTermsMap.get("salesReturnDetailID").toString())) {
                SalesReturnDetail salesreturndetail = (SalesReturnDetail) get(SalesReturnDetail.class, (String) SRDetailsTermsMap.get("salesReturnDetailID"));
                srtermmap.setSalesreturndetail(salesreturndetail);
            }
            if (SRDetailsTermsMap.containsKey("term") && SRDetailsTermsMap.get("term")!=null && !StringUtil.isNullOrEmpty(SRDetailsTermsMap.get("term").toString())) {
                LineLevelTerms term = (LineLevelTerms) get(LineLevelTerms.class, (String) SRDetailsTermsMap.get("term"));
                srtermmap.setTerm(term);
            }
            if (SRDetailsTermsMap.containsKey("userid") && SRDetailsTermsMap.get("userid")!=null && !StringUtil.isNullOrEmpty(SRDetailsTermsMap.get("userid").toString())) {
                User userid = (User) get(User.class, (String) SRDetailsTermsMap.get("userid"));
                srtermmap.setCreator(userid);
            }
            if (SRDetailsTermsMap.containsKey("createdon") && SRDetailsTermsMap.get("createdon")!=null && !StringUtil.isNullOrEmpty(SRDetailsTermsMap.get("createdon").toString())) {
                srtermmap.setCreatedOn(((Date) SRDetailsTermsMap.get("createdon")));
            }
            if (SRDetailsTermsMap.containsKey("product") && SRDetailsTermsMap.get("product")!=null && !StringUtil.isNullOrEmpty(SRDetailsTermsMap.get("product").toString())) {
                Product product = (Product) get(Product.class, (String) SRDetailsTermsMap.get("product"));
                srtermmap.setProduct(product);
            }
            if (SRDetailsTermsMap.containsKey("purchasevalueorsalevalue") && SRDetailsTermsMap.get("purchasevalueorsalevalue")!=null && !StringUtil.isNullOrEmpty(SRDetailsTermsMap.get("purchasevalueorsalevalue").toString())) {
                srtermmap.setPurchaseValueOrSaleValue(Double.parseDouble(SRDetailsTermsMap.get("purchasevalueorsalevalue").toString()));
            }
            if (SRDetailsTermsMap.containsKey("deductionorabatementpercent") && SRDetailsTermsMap.get("deductionorabatementpercent")!=null && !StringUtil.isNullOrEmpty(SRDetailsTermsMap.get("deductionorabatementpercent").toString())) {
                srtermmap.setDeductionOrAbatementPercent(Double.parseDouble(SRDetailsTermsMap.get("deductionorabatementpercent").toString()));
            }
            if (SRDetailsTermsMap.containsKey("taxtype") && SRDetailsTermsMap.get("taxtype")!=null && !StringUtil.isNullOrEmpty(SRDetailsTermsMap.get("taxtype").toString())) {
                srtermmap.setTaxType(Integer.parseInt(SRDetailsTermsMap.get("taxtype").toString()));
            }
            if (SRDetailsTermsMap.containsKey("isDefault")) {
                srtermmap.setIsGSTApplied(Boolean.parseBoolean(SRDetailsTermsMap.get("isDefault").toString()));
            }  
             if (SRDetailsTermsMap.containsKey("productentitytermid")) {
                EntitybasedLineLevelTermRate term = (EntitybasedLineLevelTermRate) get(EntitybasedLineLevelTermRate.class, (String) SRDetailsTermsMap.get("productentitytermid"));
                srtermmap.setEntitybasedLineLevelTermRate(term);
            }
            saveOrUpdate(srtermmap);
            list.add(srtermmap);
            
            } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.saveSalesReturnDetailsTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "Sales Return Details Term mapped successfully!!", null, list, list.size());
    }

    @Override
    public KwlReturnObject saveOrUpdateDODetailsTermsMap(HashMap<String, Object> requestParams) throws ServiceException {
         int count = 0;
        try {
            DeliveryOrderDetailTermMap dodetailstermmap = new DeliveryOrderDetailTermMap();
            if (requestParams.containsKey("term")) {
                LineLevelTerms term = (LineLevelTerms) get(LineLevelTerms.class, (String) requestParams.get("term"));
                dodetailstermmap.setTerm(term);
            }
            if (requestParams.containsKey("termamount")) {
                dodetailstermmap.setTermamount(Double.parseDouble(requestParams.get("termamount") + ""));
            }
            if (requestParams.containsKey("termpercentage")) {
                dodetailstermmap.setPercentage(Double.parseDouble(requestParams.get("termpercentage") + ""));
            }
            if (requestParams.containsKey("assessablevalue")) {
                dodetailstermmap.setAssessablevalue(Double.parseDouble(requestParams.get("assessablevalue") + ""));
            }
            if (requestParams.containsKey("creationdate")) {
                dodetailstermmap.setCreatedOn((Date) requestParams.get("creationdate"));
            }
            if (requestParams.containsKey("dodetails")) {
                DeliveryOrderDetail dodetails = (DeliveryOrderDetail) get(DeliveryOrderDetail.class, (String) requestParams.get("dodetails"));
                dodetailstermmap.setDodetail(dodetails);
            }
            if (requestParams.containsKey("userid")) {
                User userid = (User) get(User.class, (String) requestParams.get("userid"));
                dodetailstermmap.setCreator(userid);
            }
            if (requestParams.containsKey("purchasevalueorsalevalue")) {
                dodetailstermmap.setPurchaseValueOrSaleValue(Double.parseDouble(requestParams.get("purchasevalueorsalevalue") + ""));
            }
            if (requestParams.containsKey("deductionorabatementpercent")) {
                dodetailstermmap.setDeductionOrAbatementPercent(Double.parseDouble(requestParams.get("deductionorabatementpercent") + ""));
            }
            if (requestParams.containsKey("taxtype")) {
                dodetailstermmap.setTaxType(Integer.parseInt(requestParams.get("taxtype") + ""));
            }
            if (requestParams.containsKey("isDefault")) {
                dodetailstermmap.setIsGSTApplied(Boolean.parseBoolean(requestParams.get("isDefault").toString()));
            }
            if (requestParams.containsKey("productentitytermid")) {
                EntitybasedLineLevelTermRate term = (EntitybasedLineLevelTermRate) get(EntitybasedLineLevelTermRate.class, (String) requestParams.get("productentitytermid"));
                dodetailstermmap.setEntitybasedLineLevelTermRate(term);
            }
            saveOrUpdate(dodetailstermmap);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveOrUpdateDODetailsTermsMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, count);
    }
    @Override
    public JSONArray getDODetailsTermMap(String invoicedetailId) throws ServiceException {
        JSONArray jsonArray = new JSONArray();
        try {
            String query = "from DeliveryOrderDetailTermMap where dodetail.ID = ?";
            List<DeliveryOrderDetailTermMap> list = executeQuery(query, new Object[]{invoicedetailId});
            for (DeliveryOrderDetailTermMap obj : list) {
                JSONObject jsonObj=new JSONObject();
                jsonObj.put("id",obj.getId());
                jsonObj.put("termid",obj.getTerm().getId());
                jsonObj.put("term",obj.getTerm().getTerm());
                jsonObj.put("formulaids",obj.getTerm().getFormula());
                jsonObj.put("termamount",obj.getTermamount());
                jsonObj.put("termpercentage",obj.getPercentage());
                jsonObj.put("originalTermPercentage",obj.getTerm().getPercentage());
                jsonObj.put("assessablevalue",obj.getAssessablevalue());
                jsonObj.put("glaccountname",obj.getTerm().getAccount().getName());
                jsonObj.put("IsOtherTermTaxable",obj.getTerm().isOtherTermTaxable());
                jsonObj.put("accountid",obj.getTerm().getAccount().getID());
                jsonObj.put("glaccount",obj.getTerm().getAccount().getID());
                jsonObj.put("purchasevalueorsalevalue",obj.getPurchaseValueOrSaleValue());
                jsonObj.put("deductionorabatementpercent",obj.getDeductionOrAbatementPercent());
                jsonObj.put("taxtype",obj.getTaxType());
                jsonObj.put("taxvalue",obj.getTaxType()==0 ? obj.getTermamount() : obj.getPercentage());
                jsonObj.put("termtype",obj.getTerm().getTermType());
                jsonObj.put("termsequence",obj.getTerm().getTermSequence());
                jsonObj.put("sign",obj.getTerm().getSign());
                /**
                 * ERP-32829 
                 */
                jsonObj.put("productentitytermid", obj.getEntitybasedLineLevelTermRate().getId());
                jsonObj.put("isDefault", obj.isIsGSTApplied());
                jsonObj.put("payableaccountid", obj.getTerm().getPayableAccount() != null ? obj.getTerm().getPayableAccount().getID() : "");
                jsonObj.put(IndiaComplianceConstants.GST_CESS_TYPE, obj.getEntitybasedLineLevelTermRate()!=null && obj.getEntitybasedLineLevelTermRate().getCessType()!=null ? obj.getEntitybasedLineLevelTermRate().getCessType().getId() : "");
                jsonObj.put(IndiaComplianceConstants.GST_CESS_VALUATION_AMOUNT, obj.getEntitybasedLineLevelTermRate()!=null ? obj.getEntitybasedLineLevelTermRate().getValuationAmount() : 0.0);
                jsonObj.put(IndiaComplianceConstants.DEFAULT_TERMID, obj.getTerm()!=null && obj.getTerm().getDefaultTerms()!=null ? obj.getTerm().getDefaultTerms().getId() : "");
                jsonArray.put(jsonObj);
            }


        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return jsonArray;
    }
    @Override
    public boolean deleteDODetailsTermMap(String invoicedetailId) throws ServiceException {
        boolean result = false;
        try {
            String query = "delete from DeliveryOrderDetailTermMap where dodetail.ID = ? ";
            int numrow= executeUpdate(query, new Object[]{invoicedetailId});
            if(numrow>0){
                result=true;
            }
        } catch (Exception ex) {
           Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return result;
    }
    
    @Override
    public KwlReturnObject getDocumentIdFromMappingId(String mappingId, String companyId) throws ServiceException{
        List list = new ArrayList();
        try {
            String returnString = "";
            String query = "select documentid from invoicedoccompmaptemporary where id = ? and company = ?";
            list = executeSQLQuery(query, new Object[]{mappingId, companyId});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDeliveryOrderDFromSOD:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    
    @Override
    public List getInvoiceVatDetails(HashMap paramsHM) {
        List list = null;
        SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");    
        String query = "SELECT acc.`name`,its.account,idtm.percentage,idtm.assessablevalue,idtm.termamount, its.termtype, idtm.taxpaidflag FROM invoice iv INNER JOIN invoicedetails ivd ON iv.id = ivd.invoice "
                + "INNER JOIN invoicedetailtermsmap idtm ON idtm.invoicedetail = ivd.id "
                + "INNER JOIN linelevelterms its ON idtm.term=its.id "
                + "INNER JOIN account acc ON its.account = acc.id "
                + "INNER JOIN journalentry je ON je.id = iv.journalentry "
                + " WHERE  ivd.company =? AND je.entrydate >= ? AND je.entrydate <=? "
                + "AND (its.termtype = 1 OR its.termtype = 3)  ORDER BY its.termtype, its.account ";

        try {
            Date stDate = sdf.parse(paramsHM.get("startdate").toString());
            Date endDate = sdf.parse(paramsHM.get("enddate").toString());
            list = executeSQLQuery(query, new Object[]{paramsHM.get("companyid"),stDate,endDate});

        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    @Override
    public List getSalesReturnVatDetails(HashMap paramsHM) {
       List list = null;
        SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");    
        try {
            Date stDate = sdf.parse(paramsHM.get("startdate").toString());
            Date endDate = sdf.parse(paramsHM.get("enddate").toString());
            
            String query = "SELECT acc.`name`,its.account,srdtm.percentage,-srdtm.assessablevalue, -srdtm.termamount, its.termtype, srdtm.taxpaidflag , inv.id "
                    + "from salesreturn sr "
                    + "INNER JOIN srdetails srd ON sr.id = srd.salesreturn "
                    + "INNER JOIN invoicedetails invd ON invd.id = srd.cidetails "
                    + "INNER JOIN invoice inv ON inv.id = invd.invoice "
                    + "INNER JOIN salesreturndetailtermmap srdtm ON srd.id = srdtm.salesreturndetail "
                    + "INNER JOIN linelevelterms its ON srdtm.term=its.id "
                    + "INNER JOIN account acc ON its.account = acc.id "
                    + " WHERE  sr.company =? AND sr.orderDate >= ? AND sr.orderDate <=? AND (its.termtype = 1 OR its.termtype = 3) AND sr.isNoteAlso = 'T'  "
                    + "ORDER BY its.termtype, its.account";

            list = executeSQLQuery(query, new Object[]{paramsHM.get("companyid").toString(), stDate,endDate});

        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ParseException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return list;
    }
    
    @Override
    public void updateSalesReturnTaxPaidFlag(HashMap params){
        SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");    
        try {
            Date stDate = sdf.parse(params.get("startdate").toString());
            Date endDate = sdf.parse(params.get("enddate").toString());
            int taxType = 1;
            int taxpaidflag = 0;
            String subQuery = "";
            if(params.containsKey("vatpaidflag")){
                taxpaidflag = Integer.parseInt(params.get("vatpaidflag").toString());
                taxType = 1;
            }
            if(params.containsKey("cstpaidflag")){
                taxpaidflag = Integer.parseInt(params.get("cstpaidflag").toString());
                taxType = 3;
            }
            
            String setQuery = "";
            if(params.containsKey("journalentryid")){
                setQuery += ",prdtm.taxpaymentje='"+ params.get("journalentryid").toString() +"' ";
            }
            if(params.containsKey("paymentid")){
                setQuery += ",prdtm.taxmakepayment='"+ params.get("paymentid").toString() +"' ";
            }
            
            String query = "UPDATE salesreturndetailtermmap prdtm "
                    + " INNER JOIN srdetails prd ON prd.id = prdtm.salesreturndetail "
                    + " INNER JOIN salesreturn pr ON pr.id = prd.salesreturn "
                    + " INNER JOIN linelevelterms its ON prdtm.term=its.id "
                    + " SET prdtm.taxpaidflag=? "+ setQuery
                    + " WHERE pr.company = ? AND pr.orderdate >= ? AND pr.orderdate <=? AND its.termtype = ? " + subQuery;
            executeSQLUpdate(query, new Object[]{taxpaidflag, params.get("companyid"),stDate,endDate, taxType});
            
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }
    
    @Override
    public void resetSalesReturnTaxPaidFlag(HashMap params){
        try {
            String whereClauseQuery = "",setQuery = "", termTypeQuery="",conditionQuery="";
            List list = null;
            List queryParams = new ArrayList();
            int termtype = 0;
            //To Check whether this Credit Adjustment is From Excise Computation Report OR ST Computation Report
            termTypeQuery = "select llt.termtype from linelevelterms llt "
                    + "INNER JOIN salesreturndetailtermmap rdtm ON llt.id = rdtm.term "
                    + "INNER JOIN journalentry je ON rdtm.taxpaymentje = je.id ";
            if(params.containsKey("journalentryid")){
                if(!StringUtil.isNullOrEmpty(conditionQuery)){
                    conditionQuery += " and ";
                }
                conditionQuery += " je.id = ?  ";
                queryParams.add(params.get("journalentryid").toString());
            }
            if(!StringUtil.isNullOrEmpty(conditionQuery)){
               termTypeQuery += " where "+ conditionQuery;
            }
            list = executeSQLQuery(termTypeQuery, queryParams.toArray());
            if (!list.isEmpty() && !list.equals("null") && list.size() > 0) {
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    termtype = (int)itr.next();
                    break;
                }
            }
            if(params.containsKey("journalentryid")){
                setQuery += " ,taxpaymentje=NULL ";
                whereClauseQuery = " taxpaymentje='"+ params.get("journalentryid").toString() +"' ";
            }
            if(params.containsKey("paymentid")){
                setQuery = ",taxmakepayment=NULL ";
                whereClauseQuery = " taxmakepayment='"+ params.get("paymentid").toString() +"' ";
            }
            
            String query = "UPDATE salesreturndetailtermmap SET taxpaidflag = 0 "+ setQuery
                    + " WHERE "+ whereClauseQuery;
            executeSQLUpdate(query);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }
    
    @Override
    public void updateInvoiceTaxPaidFlag(HashMap paramsHM) {
        SimpleDateFormat sdf = new SimpleDateFormat("MMMM d, yyyy hh:mm:ss aa");    
        try {
            Date stDate = sdf.parse(paramsHM.get("startdate").toString());
            Date endDate = sdf.parse(paramsHM.get("enddate").toString());
            int taxType = 1;
            int taxpaidflag = 0;
            if(paramsHM.containsKey("vatpaidflag")){
                taxpaidflag = Integer.parseInt(paramsHM.get("vatpaidflag").toString());
                taxType = 1;
            }
            if(paramsHM.containsKey("cstpaidflag")){
                taxpaidflag = Integer.parseInt(paramsHM.get("cstpaidflag").toString());
                taxType = 3;
            }
            if(paramsHM.containsKey("excisepaidflag")){
                taxpaidflag = Integer.parseInt(paramsHM.get("excisepaidflag").toString());
                taxType = 2;
            }
            String setQuery = "";
            if(paramsHM.containsKey("journalentryid")){
                setQuery += ",idtm.taxpaymentje='"+ paramsHM.get("journalentryid").toString() +"' ";
            }
            if(paramsHM.containsKey("paymentid")){
                setQuery += ",idtm.taxmakepayment='"+ paramsHM.get("paymentid").toString() +"' ";
            }
            String query = "UPDATE invoicedetailtermsmap idtm "
                    + " INNER JOIN invoicedetails ivd ON idtm.invoicedetail = ivd.id "
                    + " INNER JOIN invoice iv ON iv.id = ivd.invoice "
                    + " INNER JOIN linelevelterms its ON idtm.term=its.id "
                    + " INNER JOIN journalentry je ON je.id = iv.journalentry "
                    + " SET idtm.taxpaidflag=? "+ setQuery
                    + " WHERE iv.company = ? AND je.entrydate >= ? AND je.entrydate <=? AND its.termtype = ?";
            executeSQLUpdate(query, new Object[]{taxpaidflag, paramsHM.get("companyid"),stDate,endDate, taxType});
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }
    
    @Override
    public void resetInvoiceTaxPaidFlag(HashMap paramsHM) {
        try {
            String whereClauseQuery = "",setQuery = "", termTypeQuery="", conditionQuery="";
            List list = null;
            List queryParams = new ArrayList();
            int termtype = 0;
            //To Check whether this Credit Adjustment is From Excise Computation Report OR ST Computation Report
            termTypeQuery = "select llt.termtype from linelevelterms llt "
                    + "INNER JOIN invoicedetailtermsmap idtm ON llt.id = idtm.term "
                    + "INNER JOIN journalentry je ON idtm.taxpaymentje = je.id ";
            if(paramsHM.containsKey("journalentryid")){
                if(!StringUtil.isNullOrEmpty(conditionQuery)){
                    conditionQuery += " and ";
                }
                conditionQuery += " je.id = ?  ";
                queryParams.add(paramsHM.get("journalentryid").toString());
            }
            if(!StringUtil.isNullOrEmpty(conditionQuery)){
               termTypeQuery += " where "+ conditionQuery;
            }
            list = executeSQLQuery(termTypeQuery, queryParams.toArray());
            if (list != null && !list.isEmpty() && !list.equals("null") && list.size() > 0) {
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    termtype = (int) itr.next();
                    break;
                }
            }
            if(termtype == IndiaComplianceConstants.LINELEVELTERMTYPE_Excise_DUTY){
                setQuery += "  , creditavailedflag=0 ";
            }else if(termtype == IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX || termtype == IndiaComplianceConstants.LINELEVELTERMTYPE_KKC ){
                setQuery += "  , creditavailedflagservicetax=0 ";
            }else if(termtype == 0){//Work as previous
                setQuery += "  , creditavailedflag=0 ";
            }
            if(paramsHM.containsKey("journalentryid")){
                setQuery += " ,taxpaymentje=NULL ";
                whereClauseQuery = " taxpaymentje='"+ paramsHM.get("journalentryid").toString() +"' ";
            }
            if(paramsHM.containsKey("paymentid")){
                setQuery = ",taxmakepayment=NULL ";
                whereClauseQuery = " taxmakepayment='"+ paramsHM.get("paymentid").toString() +"' ";
            }
            
            String query = "UPDATE invoicedetailtermsmap SET taxpaidflag=0 "+ setQuery
                        + " WHERE "+ whereClauseQuery;
            executeSQLUpdate(query);
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }
    
    @Override
    public KwlReturnObject getTaxPaymentFromInvoice(String invoiceid, String companyid) throws ServiceException {
        String selQuery = "from InvoiceDetailTermsMap idtm where idtm.taxPaidFlag=1 and idtm.invoicedetail.invoice.ID=? and idtm.invoicedetail.invoice.company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{invoiceid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    /**
     *
     * @param deliveryorder
     * @return
     */
    @Override
    public KwlReturnObject updateDeliveryOrderInventoryJESetNull(DeliveryOrder deliveryorder) {
        List list = new ArrayList();
        try {
            String purchaseReturnID = deliveryorder.getID();
            String companyId = deliveryorder.getCompany().getCompanyID();
            String query = "update deliveryorder set inventoryje=NULL where id = ? and company = ?";
            executeSQLUpdate(query, new Object[]{purchaseReturnID, companyId});
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
}
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    /**
     *
     * @param jeid
     * @param companyid
     * @return
     * @throws ServiceException
     */
    public KwlReturnObject getDOCountForInventoryJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "select count(*) from DeliveryOrder where inventoryJE.ID=? and company.companyID=?";
        List list = executeQuery(selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject updateSalesReturnInventoryJESetNull(SalesReturn salesReturn) {
        List list = new ArrayList();
        try {
            String purchaseReturnID = salesReturn.getID();
            String companyId = salesReturn.getCompany().getCompanyID();
            String query = "update salesreturn set inventoryje=NULL where id = ? and company = ?";
            executeSQLUpdate(query, new Object[]{purchaseReturnID, companyId});
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getSRCountForInventoryJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "select count(*) from SalesReturn where inventoryJE.ID=? and company.companyID=?";
        List list = executeQuery(selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject saveExciseDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            SalesInvoiceExciseDetailsMap exciseDetails = new SalesInvoiceExciseDetailsMap();

            Invoice invObj = null;
            State state = null;
            
            if (dataMap.containsKey("id") && !StringUtil.isNullOrEmpty(dataMap.get("id").toString())) {
                exciseDetails = (SalesInvoiceExciseDetailsMap) get(SalesInvoiceExciseDetailsMap.class, dataMap.get("id").toString());
            }
            if (dataMap.containsKey("invoiceid") && dataMap.get("invoiceid")!=null) {
                invObj = (Invoice) get(Invoice.class, (String) dataMap.get("invoiceid"));
                exciseDetails.setInvoice(invObj);
            }
            if (dataMap.containsKey("suppliers")) {
                exciseDetails.setSupplier(dataMap.get("suppliers").toString());
            }
            if (dataMap.containsKey("supplierTINSalesTAXNo")) {
                exciseDetails.setSupplierTINSalesTaxNo(dataMap.get("supplierTINSalesTAXNo").toString());
            }
            if (dataMap.containsKey("supplierExciseRegnNo")) {
                exciseDetails.setSupplierExciseRegnNo(dataMap.get("supplierExciseRegnNo").toString());
            }
            if (dataMap.containsKey("cstnumber")) {
                exciseDetails.setCstnumber(dataMap.get("cstnumber").toString());
            }
            if (dataMap.containsKey("supplierCommissionerate")) {
                exciseDetails.setSupplierCommissioneRate(dataMap.get("supplierCommissionerate").toString());
            }
            if (dataMap.containsKey("supplierAddress")) {
                exciseDetails.setSupplierAddress(dataMap.get("supplierAddress").toString());
            }
            if (dataMap.containsKey("supplierRange")) {
                exciseDetails.setSupplierRange(dataMap.get("supplierRange").toString());
            }
            if (dataMap.containsKey("supplierState")) {
                exciseDetails.setSupplierstate(dataMap.get("supplierState").toString());
            }
            if (dataMap.containsKey("supplierImporterExporterCode")) {
                exciseDetails.setSupplierImporterExporterCode(dataMap.get("supplierImporterExporterCode").toString());
            }
            if (dataMap.containsKey("supplierDivision")) {
                exciseDetails.setSupplierDivision(dataMap.get("supplierDivision").toString());
            }
            if (dataMap.containsKey("manufacturername")) {
                exciseDetails.setManufacturerName(dataMap.get("manufacturername").toString());
            }
            if (dataMap.containsKey("manufacturerExciseRegnNo")) {
                exciseDetails.setManufacturerExciseregnNo(dataMap.get("manufacturerExciseRegnNo").toString());
            }
            if (dataMap.containsKey("manufacturerRange")) {
                exciseDetails.setManufacturerRange(dataMap.get("manufacturerRange").toString());
            }
            if (dataMap.containsKey("manufacturerCommissionerate")) {
                exciseDetails.setManufacturerCommissionerate(dataMap.get("manufacturerCommissionerate").toString());
            }
            if (dataMap.containsKey("manufacturerDivision")) {
                exciseDetails.setManufacturerDivision(dataMap.get("manufacturerDivision").toString());
            }
            if (dataMap.containsKey("manufacturerAddress")) {
                exciseDetails.setManufacturerAddress(dataMap.get("manufacturerAddress").toString());
            }
            if (dataMap.containsKey("manufacturerImporterExporterCode")) {
                exciseDetails.setManufacturerImporterexporterCode(dataMap.get("manufacturerImporterExporterCode").toString());
            }
            if (dataMap.containsKey("InvoicenoManuFacture")) {
                exciseDetails.setInvoicenoManufacture(dataMap.get("InvoicenoManuFacture").toString());
            }
            if (dataMap.containsKey("InvoiceDateManuFacture")) {
                exciseDetails.setInvoiceDateManufacture((Date)dataMap.get("InvoiceDateManuFacture"));
            }
            if (dataMap.containsKey("registrationType")) {
                exciseDetails.setRegistrationType(dataMap.get("registrationType").toString());
            }
            if (dataMap.containsKey("UnitName")) {
                exciseDetails.setUnitname(dataMap.get("UnitName").toString());
            }
            if (dataMap.containsKey("ECCNo")) {
                exciseDetails.setECCNo(dataMap.get("ECCNo").toString());
            }
            
            saveOrUpdate(exciseDetails);
            list.add(exciseDetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.saveGoodsReceiptTermMap : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    @Override
    public KwlReturnObject updateRecDetailId(Invoice inv) throws ServiceException {
        int NoOFRecords = 0;
        String query = "";
        try {
            Set<InvoiceDetail> invoiceDetail = inv.getRows();
            for (InvoiceDetail ivd : invoiceDetail) {
                if (ivd.getSalesJED() != null) {
                    query = "update AccJEDetailCustomData   set recdetailId =? where jedetailId =? ";
                    int numRows = executeUpdate(query, new Object[]{ivd.getInventory().getID(), ivd.getSalesJED().getID()});
                    NoOFRecords += numRows;
                }
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("accGoodsReceiptImpl.updateGoodsReceiptCustomData:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, NoOFRecords);
    }

    @Override
    public KwlReturnObject getExciseComputationReportDetails(Map<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        try {
            ArrayList paramslist = new ArrayList();
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            String LineLevelTermType = "2";//For [2,'Excise Duty'] Terms only
            String companyId = "";
            String condition = "";
            int paidStatus = 0;//0- Non paid, 1- Paid.
            paramslist.add(LineLevelTermType);
            if (requestParams.containsKey("companyid")) {
                companyId = (String)requestParams.get("companyid");
                condition += " and inv.company= ? ";
                paramslist.add(companyId);
            }
            if (requestParams.containsKey("isexcisepaid")) {
                paidStatus = (int) requestParams.get("isexcisepaid");
                condition += " and invdtm.taxpaidflag = ? ";
                paramslist.add(paidStatus);
            }
            if (requestParams.containsKey("startdate") && requestParams.containsKey("enddate")) {
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                condition += " and (je.entrydate >=? and je.entrydate <=?) || (inv.creationDate >=? and inv.creationDate <=?)";
                paramslist.add(df.parse(startDate));
                paramslist.add(df.parse(endDate));
                paramslist.add(df.parse(startDate));
                paramslist.add(df.parse(endDate));
            }
            String query = "select inv.excisetype,sum(invdtm.termamount),sum(invdtm.assessablevalue) from linelevelterms llt "
                    + "INNER JOIN invoicedetailtermsmap invdtm ON llt.id = invdtm.term INNER JOIN invoicedetails invd ON invdtm.invoicedetail = invd.id "
                    + "INNER JOIN invoice inv ON invd.invoice = inv.id left JOIN journalentry je on inv.journalentry = je.id "
                    + "where  llt.termtype= ? and inv.excisetype <> ''  and inv.excisetype IS NOT NULL " + condition + "GROUP BY inv.excisetype";
            list = executeSQLQuery(query, paramslist.toArray());
        } catch (ParseException | ServiceException ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getExciseComputationReportDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getServiceTaxComputationReportDetails(Map<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        try {
            ArrayList paramslist = new ArrayList();
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            String companyId = "";
            String condition = "";
            String query = "";
            if (requestParams.containsKey("companyid")) {
                companyId = (String) requestParams.get("companyid");
                condition += " je.company= ? ";
                paramslist.add(companyId);
            }
            if (requestParams.containsKey("startdate") && requestParams.containsKey("enddate")) {
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                condition += " and (je.entrydate >=? and je.entrydate <=?) ";
                paramslist.add(df.parse(startDate));
                paramslist.add(df.parse(endDate));
            }
            if (requestParams.containsKey("SERVICE TAX") || requestParams.containsKey("KKC")) {
                String termTypeQry = "";
                termTypeQry += " and llt.termtype in ( ";
                if (requestParams.containsKey("SERVICE TAX")) {
                    termTypeQry += " ?,";
                    paramslist.add(IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX);
                }
                if (requestParams.containsKey("KKC")) {
                    termTypeQry += " ?,";
                    paramslist.add(IndiaComplianceConstants.LINELEVELTERMTYPE_KKC);
                }
                if (requestParams.containsKey("SBC")) {
                    termTypeQry += " ?,";
                    paramslist.add(IndiaComplianceConstants.LINELEVELTERMTYPE_SBC);
                }
                condition += termTypeQry.substring(0, termTypeQry.length() - 1) + ")";
            }
            if (requestParams.containsKey("creditavailedflagservicetax")) {
                condition += " and grdtm.creditavailedflagservicetax= ? ";
                paramslist.add((int)requestParams.get("creditavailedflagservicetax"));
            }
            if(requestParams.containsKey("ISSalesORPurchase") && !StringUtil.isNullOrEmpty(requestParams.get("ISSalesORPurchase").toString())){
                if(requestParams.get("ISSalesORPurchase").equals(Constants.VENDOR_INVOICE)){
                    query = "select grdtm.termamount,grdtm.assessablevalue,llt.termtype from linelevelterms llt "
                            + "INNER JOIN receiptdetailtermsmap grdtm ON llt.id = grdtm.term INNER JOIN grdetails grd ON grdtm.goodsreceiptdetail = grd.id "
                            + "INNER JOIN goodsreceipt gr ON grd.goodsreceipt = gr.id INNER JOIN journalentry je on gr.journalentry = je.id "
                            + "where  " + condition;
                }else if(requestParams.get("ISSalesORPurchase").equals(Constants.CUSTOMER_INVOICE)){
                    query = "select grdtm.termamount,grdtm.assessablevalue, llt.termtype from linelevelterms llt "
                            + "INNER JOIN invoicedetailtermsmap grdtm ON llt.id = grdtm.term INNER JOIN invoicedetails grd ON grdtm.invoicedetail = grd.id "
                            + "INNER JOIN invoice gr ON grd.invoice = gr.id INNER JOIN journalentry je on gr.journalentry = je.id "
                            + "where  " + condition;
                }
            }
            if(!StringUtil.isNullOrEmpty(query)){
                list = executeSQLQuery(query, paramslist.toArray());
            }
        } catch (ParseException ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getExciseComputationReportDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getComputationReportDetailsTransactionWise(Map<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        try {
            ArrayList paramslist = new ArrayList();
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            String LineLevelTermType = "2";//For [2,'Excise Duty'] Terms only
            String companyId = "";
            String condition = "";
            int paidStatus = 0;//0- Non paid, 1- Paid.
            boolean isSTCompReport = false;
            if(requestParams.containsKey("isSTCompReport") && !StringUtil.isNullOrEmpty(requestParams.get("isSTCompReport").toString())){
                isSTCompReport =  Boolean.parseBoolean(requestParams.get("isSTCompReport").toString());
            }
            if(!isSTCompReport){
                condition += " llt.termtype= ? and inv.excisetype <> ''  and inv.excisetype IS NOT NULL ";
                paramslist.add(LineLevelTermType);
            }else{
                condition += " llt.termtype in ( ?, ? ) ";
                paramslist.add(IndiaComplianceConstants.LINELEVELTERMTYPE_SERVICE_TAX);
                paramslist.add(IndiaComplianceConstants.LINELEVELTERMTYPE_KKC);
            }    
                
            if (requestParams.containsKey("companyid")) {
                companyId = (String)requestParams.get("companyid");
                condition += " and inv.company= ? ";
                paramslist.add(companyId);
            }
//            if (requestParams.containsKey("isexcisepaid")) {
//                paidStatus = (int) requestParams.get("isexcisepaid");
//                condition += " and inv.isexcisepaid = ? ";
//                paramslist.add(paidStatus);
//            }
            if (requestParams.containsKey("startdate") && requestParams.containsKey("enddate")) {
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                condition += " and (je.entrydate >=? and je.entrydate <=?) ";
                paramslist.add(df.parse(startDate));
                paramslist.add(df.parse(endDate));
            }
            String query = "";
            if(isSTCompReport){
                query = "select inv.id, inv.invoicenumber,llt.account,sum(invdtm.termamount) as termamount,inv.excisetype from linelevelterms llt "
                    + "INNER JOIN invoicedetailtermsmap invdtm ON llt.id = invdtm.term INNER JOIN invoicedetails invd ON invdtm.invoicedetail = invd.id "
                    + "INNER JOIN invoice inv ON invd.invoice = inv.id INNER JOIN journalentry je on inv.journalentry = je.id "
                    + "where  " + condition +" GROUP BY llt.account ORDER BY je.entrydate ASC";
            }else{
                query = "select inv.id, inv.invoicenumber,llt.account,invdtm.termamount,inv.excisetype from linelevelterms llt "
                    + "INNER JOIN invoicedetailtermsmap invdtm ON llt.id = invdtm.term INNER JOIN invoicedetails invd ON invdtm.invoicedetail = invd.id "
                    + "INNER JOIN invoice inv ON invd.invoice = inv.id INNER JOIN journalentry je on inv.journalentry = je.id "
                    + "where  " + condition +" ORDER BY je.entrydate ASC";
            }
            list = executeSQLQuery(query, paramslist.toArray());
        } catch (ParseException | ServiceException ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getExciseComputationReportDetails:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    /**
     * @param jeid ID for JournalEntry
     * @param companyid ID for Company
     * @return KwlReturnObject
     * @throws com.krawler.common.service.ServiceException
     * @description Function to get Sales Invoice using Journal Entry ID and company's ID.
     */
    public KwlReturnObject getSalesInvoiceFromJE(String jeid, String companyid) throws ServiceException {
        String selQuery = "from Invoice where journalEntry.ID=? and company.companyID=?";
        List list = executeQuery(selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
 @Override
    public boolean updateInvoiceExciseDuty(Invoice invoice) throws ServiceException {
        boolean issuccess = true;
        try {
            saveOrUpdate(invoice);
        } catch (ServiceException ex) {
            issuccess = false;
            throw ServiceException.FAILURE("accInvoiceImpl.updateInvoiceExciseDuty:" + ex.getMessage(), ex);
        } catch (Exception ex) {
            issuccess = false;
            throw ServiceException.FAILURE("accInvoiceImpl.updateInvoiceExciseDuty:" + ex.getMessage(), ex);
        }
        return issuccess;
    }
    @Override
    public KwlReturnObject getExciseDetails(String receiptId) throws ServiceException {
        List list = new ArrayList();
        try {
            String selQuery = "from SalesInvoiceExciseDetailsMap where invoice.ID=?";
            list = executeQuery(selQuery, new Object[]{receiptId});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getExciseDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
 
    @Override
    public KwlReturnObject getDeliveryOrderLinking(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from DeliveryOrderLinking";
        return buildNExecuteQuery(query, requestParams);
    }
  
    @Override
    public KwlReturnObject getInvoiceLinking(HashMap<String, Object> requestParams) throws ServiceException {
        String query = "from InvoiceLinking";
        return buildNExecuteQuery(query, requestParams);
    }
    
    @Override
    public KwlReturnObject updateDeliveryPlannerEntry(Map<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        try {
            int moduleID = 0;
            if (requestParams.containsKey("moduleID") && requestParams.get("moduleID") != null) {
                moduleID = (Integer) requestParams.get("moduleID");
            }
            
            DeliveryPlanner deliveryPlanner = null;
            if (requestParams.containsKey("deliveryPlannerID") && requestParams.get("deliveryPlannerID") != null) {
                deliveryPlanner = (DeliveryPlanner) get(DeliveryPlanner.class, (String) requestParams.get("deliveryPlannerID"));
            }

            if (deliveryPlanner != null) {
                if (moduleID == Constants.Acc_Invoice_ModuleId) {
                    if (requestParams.containsKey("invoiceID") && requestParams.get("invoiceID") != null) {
                        deliveryPlanner.setReferenceNumber((Invoice) get(Invoice.class, (String) requestParams.get("invoiceID")));
                    }
                } else if (moduleID == Constants.Acc_Delivery_Order_ModuleId) {
                    if (requestParams.containsKey("deliveryOrderID") && requestParams.get("deliveryOrderID") != null) {
                        deliveryPlanner.setDeliveryOrder((DeliveryOrder) get(DeliveryOrder.class, (String) requestParams.get("deliveryOrderID")));
                    }
                }
                
                saveOrUpdate(deliveryPlanner);
            }
            
            list.add(deliveryPlanner);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.updateDeliveryPlannerEntry:" + ex, ex);
        }
        
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getDeliveryPlannerForModule(Map<String, Object> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        String condition = "";
        
        int moduleID = 0;
        if (requestParams.containsKey("moduleID") && requestParams.get("moduleID") != null) {
            moduleID = (Integer) requestParams.get("moduleID");
        }
        boolean isEmptyLinkedDoc = false;
        if (requestParams.containsKey("isEmptyLinkedDoc") && requestParams.get("isEmptyLinkedDoc") != null) {
            isEmptyLinkedDoc = (Boolean) requestParams.get("isEmptyLinkedDoc");
        }
        
//        if (moduleID != 0) {
//            condition += (condition.length()==0 ? " where " : " and " ) + "module=?";
//            params.add(moduleID);
//        }
        
        if (requestParams.containsKey("invoiceID") && requestParams.get("invoiceID") != null) {
            condition += (condition.length() == 0 ? " where " : " and ") + "referenceNumber.ID=?";
            params.add((String) requestParams.get("invoiceID"));
        } else if (requestParams.containsKey("deliveryOrderID") && requestParams.get("deliveryOrderID") != null) {
            condition += (condition.length() == 0 ? " where " : " and ") + "deliveryOrder.ID=?";
            params.add((String) requestParams.get("deliveryOrderID"));
        }
        
        if (isEmptyLinkedDoc && moduleID == Constants.Acc_Invoice_ModuleId) {
            condition += (condition.length() == 0 ? " where " : " and ") + "referenceNumber is null";
        } else if (isEmptyLinkedDoc && moduleID == Constants.Acc_Delivery_Order_ModuleId) {
            condition += (condition.length() == 0 ? " where " : " and ") + "deliveryOrder is null";
        }
        
        String orderBy = " order by pushTime desc";
        
        String selQuery = "from DeliveryPlanner" + condition + orderBy;
        List list = executeQuery(selQuery, params.toArray());
        
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject createEntryOfDeliveryPlannerForModule(Map<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        try {
            String userID = "";
            if (requestParams.containsKey("userID") && requestParams.get("userID") != null) {
                userID = (String) requestParams.get("userID");
            }
            int moduleID = 0;
            if (requestParams.containsKey("moduleID") && requestParams.get("moduleID") != null) {
                moduleID = (Integer) requestParams.get("moduleID");
            }
            DeliveryPlanner existDeliveryPlanner = null;
            if (requestParams.containsKey("existDeliveryPlanner") && requestParams.get("existDeliveryPlanner") != null) {
                existDeliveryPlanner = (DeliveryPlanner) requestParams.get("existDeliveryPlanner");
            }
            
            if (existDeliveryPlanner != null) {
                DeliveryPlanner newDeliveryPlanner = new DeliveryPlanner();
                
                if (moduleID == Constants.Acc_Invoice_ModuleId) {
                    if (requestParams.containsKey("invoiceID") && requestParams.get("invoiceID") != null) {
                        newDeliveryPlanner.setReferenceNumber((Invoice) get(Invoice.class, (String) requestParams.get("invoiceID")));
                    }
                    newDeliveryPlanner.setDeliveryOrder(existDeliveryPlanner.getDeliveryOrder());
                } else if (moduleID == Constants.Acc_Delivery_Order_ModuleId) {
                    if (requestParams.containsKey("deliveryOrderID") && requestParams.get("deliveryOrderID") != null) {
                        newDeliveryPlanner.setDeliveryOrder((DeliveryOrder) get(DeliveryOrder.class, (String) requestParams.get("deliveryOrderID")));
                    }
                    newDeliveryPlanner.setReferenceNumber(existDeliveryPlanner.getReferenceNumber());
                }
                
                if (!StringUtil.isNullOrEmpty(userID)) {
                    newDeliveryPlanner.setFromUser((User) get(User.class, userID));
                } else {
                    newDeliveryPlanner.setFromUser(existDeliveryPlanner.getFromUser());
                }
                
                newDeliveryPlanner.setPushTime(new Date());
                newDeliveryPlanner.setDeliveryLocation(existDeliveryPlanner.getDeliveryLocation());
                newDeliveryPlanner.setDeliveryDate(existDeliveryPlanner.getDeliveryDate());
                newDeliveryPlanner.setDeliveryTime(existDeliveryPlanner.getDeliveryTime());
                newDeliveryPlanner.setRemarksBySales(existDeliveryPlanner.getRemarksBySales());
                newDeliveryPlanner.setPrintedBy(existDeliveryPlanner.getPrintedBy());
                newDeliveryPlanner.setRemarksByPlanner(existDeliveryPlanner.getRemarksByPlanner());
                newDeliveryPlanner.setVehicleNumber(existDeliveryPlanner.getVehicleNumber());
                newDeliveryPlanner.setDriver(existDeliveryPlanner.getDriver());
                newDeliveryPlanner.setTripNumber(existDeliveryPlanner.getTripNumber());
                newDeliveryPlanner.setTripDescription(existDeliveryPlanner.getTripDescription());
                newDeliveryPlanner.setCompany(existDeliveryPlanner.getCompany());
                newDeliveryPlanner.setInvoiceOccurance(existDeliveryPlanner.getInvoiceOccurance() + 1);
                newDeliveryPlanner.setModule(existDeliveryPlanner.getModule());
                
                saveOrUpdate(newDeliveryPlanner);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.createEntryOfDeliveryPlannerForModule:" + ex, ex);
        }
        
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getDeliveryOrderFromDeliveryPlanner(String doID, String companyID) throws ServiceException {
        String selQuery = "from DeliveryPlanner where deliveryOrder.ID=? and company.companyID=?";
        List list = executeQuery(selQuery, new Object[]{doID, companyID});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getSalesReturnFromDeliveryPlanner(String srID, String companyID) throws ServiceException {
        String selQuery = "from DeliveryPlanner where salesReturn.ID=? and company.companyID=?";
        List list = executeQuery(selQuery, new Object[]{srID, companyID});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    /**
     * This method is used to get the records for cost and selling price report.
     *
     * @param requestParams
     * @return If callForProduct is 'true' then it will only get distinct
     * product IDs used in invoices and if callForProduct is 'false' then it
     * will return list of invoicedetails Ids whose delivery order has been
     * created.
     * @throws ServiceException
     */
    @Override
    public KwlReturnObject getDataForCostAndSellingPriceReport(JSONObject requestParams) throws ServiceException {
        List list = new ArrayList();
        int count = 0;
        try {
            String companyid = requestParams.getString(Constants.companyKey);
            String startDate = (String) requestParams.get(Constants.REQ_startdate);
            String endDate = (String) requestParams.get(Constants.REQ_enddate);
            List params = new ArrayList();
            DateFormat df = (DateFormat) requestParams.get(Constants.df);
            params.add(companyid);
            String conditionSQL1 = "", conditionSQL2 = "";
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL1 += " and (je.entrydate >=? and je.entrydate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            if (requestParams.has(Constants.productid) && !StringUtil.isNullOrEmpty(requestParams.optString(Constants.productid, null))) {
                String productID = requestParams.getString(Constants.productid);
                conditionSQL1 += " and p.id = ?";
                params.add(productID);
            }
            params.add(companyid);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL2 += " and (je.entrydate >=? and je.entrydate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            if (requestParams.has(Constants.productid) && !StringUtil.isNullOrEmpty(requestParams.optString(Constants.productid, null))) {
                String productID = requestParams.getString(Constants.productid);
                conditionSQL2 += " and p.id = ?";
                params.add(productID);
            }
            boolean callForProduct = false; // to be uesd when you want only distinct product ids used in invoices
            if (requestParams.has("callForProduct") && !StringUtil.isNullOrEmpty(requestParams.optString("callForProduct", null))) {
                callForProduct = Boolean.parseBoolean(requestParams.optString("callForProduct"));
            }
            String start = "";
            String limit = "";
            if (requestParams.has(Constants.start) && !StringUtil.isNullOrEmpty(requestParams.optString(Constants.start, null)) && requestParams.has(Constants.limit) && !StringUtil.isNullOrEmpty(requestParams.optString(Constants.limit, null))) {
                start = (String) requestParams.get(Constants.start);
                limit = (String) requestParams.get(Constants.limit);
            }
            
            String selQuery = "";
            if (callForProduct) {
                selQuery = "select distinct p.id from invoicedetails invd "
                        + "inner join invoice inv on inv.id=invd.invoice "
                        + "inner join journalentry je on je.id = inv.journalentry "
                        + "inner join customer c on c.id = inv.customer "
                        + "inner join inventory on inventory.id=invd.id "
                        + "inner join product p on p.id=inventory.product "
                        + "inner join dodetails dod on dod.cidetails= invd.id "
                        + "inner join deliveryorder do on do.id=dod.deliveryorder "
                        + "where do.company=? and do.deleteflag='F' and inv.pendingapproval=0 " + conditionSQL1
                        + "union "
                        + "select distinct p.id from invoicedetails invd "
                        + "inner join invoice inv on inv.id=invd.invoice "
                        + "inner join journalentry je on je.id = inv.journalentry "
                        + "inner join customer c on c.id = inv.customer "
                        + "inner join inventory on inventory.id=invd.id "
                        + "inner join product p on p.id=inventory.product "
                        + "inner join dodetails dod on dod.id= invd.deliveryorderdetail "
                        + "inner join deliveryorder do on do.id=dod.deliveryorder "
                        + "where do.company=? and do.deleteflag='F' and inv.pendingapproval=0 " + conditionSQL2;
            } else {
                selQuery = "select * from (select invd.id as invdid,dod.id as dodid,do.donumber,do.id as doid,je.entrydate as entrydate,inv.createdon as createdon,do.orderdate as dodate  from invoicedetails invd "
                        + "inner join invoice inv on inv.id=invd.invoice "
                        + "inner join journalentry je on je.id = inv.journalentry "
                        + "inner join customer c on c.id = inv.customer "
                        + "inner join inventory on inventory.id=invd.id "
                        + "inner join product p on p.id=inventory.product "
                        + "inner join dodetails dod on dod.cidetails= invd.id "
                        + "inner join deliveryorder do on do.id=dod.deliveryorder "
                        + "where do.company=? and do.deleteflag='F' and inv.pendingapproval=0 " + conditionSQL1
                        + "union "
                        + "select invd.id as invdid,dod.id as dodid,do.donumber,do.id as doid,je.entrydate as entrydate,inv.createdon as createdon,do.orderdate as dodate from invoicedetails invd "
                        + "inner join invoice inv on inv.id=invd.invoice "
                        + "inner join journalentry je on je.id = inv.journalentry "
                        + "inner join customer c on c.id = inv.customer "
                        + "inner join inventory on inventory.id=invd.id "
                        + "inner join product p on p.id=inventory.product "
                        + "inner join dodetails dod on dod.id = invd.deliveryorderdetail "
                        + "inner join deliveryorder do on do.id=dod.deliveryorder "
                        + "where do.company=? and do.deleteflag='F' and inv.pendingapproval=0 " + conditionSQL2+ " )as t1 order by t1.entrydate,t1.createdon,t1.dodate";
            }
            list = executeSQLQuery(selQuery, params.toArray());
            if (list != null && !list.isEmpty()) {
                count = list.size();
            }
            //commented because of Paging issue in Item History Report(ERP-38617)
//            if (!StringUtil.isNullOrEmpty(start) && !StringUtil.isNullOrEmpty(limit) && callForProduct) {
//                list = executeSQLQueryPaging(selQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
//            }
        } catch (JSONException | ParseException | ServiceException | NumberFormatException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    @Override
    public KwlReturnObject getDataSTBillDateWiseReport(HashMap<String, Object> requestParams) throws ServiceException {
         List list = new ArrayList();
        int count = 0; 
        try {
            DateFormat df = null;
            String companyid= "";
            String groupby= "";
            
            if(requestParams.containsKey("companyid") && requestParams.get("companyid")!=null && !StringUtil.isNullOrEmpty(requestParams.get("companyid").toString())){
                companyid = requestParams.get("companyid").toString();
            }
            if (requestParams.containsKey(Constants.df) && requestParams.get(Constants.df)!=null && !StringUtil.isNullOrEmpty(requestParams.get(Constants.df).toString())) {
                df = (DateFormat) requestParams.get(Constants.df);
            }
            String isCashCheck = "";
            if (requestParams.containsKey("basisOfCalculation") && requestParams.get("basisOfCalculation") != null && !StringUtil.isNullOrEmpty(requestParams.get("basisOfCalculation").toString())) {
                if (StringUtil.equalIgnoreCase(requestParams.get("basisOfCalculation").toString(), "2")) {
                    isCashCheck = " AND inv.id IN(SELECT id FROM invoice WHERE id NOT IN(SELECT invoice FROM receiptdetails))";
                } else if (StringUtil.equalIgnoreCase(requestParams.get("basisOfCalculation").toString(), "1")) {
                    isCashCheck = " AND inv.id IN(SELECT invoice AS id FROM receiptdetails WHERE id NOT IN(SELECT id FROM invoice))";
                }
            }
            
            ArrayList params = new ArrayList();
            
            
            String purchaseInvoice = "select 1 as transType, je.entrydate as date, inv.invoicenumber as refno, cust.name as partyname, 'Taxable Service' as category, inv.invoiceamountinbase as totalamount, sum(invdtm.termamount/je.externalcurrencyrate) as totaltax,0.0 as paidamount, 0.0 as inputcredit, 0.0 as balancecredit "
                    + " from invoice inv "
                    + " left join customer cust on cust.id = inv.customer  "
                    + " left join journalentry je on je.id = inv.journalentry  "
                    + " left join invoicedetails invd on invd.invoice = inv.id"
                    + " left join invoicedetailtermsmap invdtm on invdtm.invoicedetail = invd.id"
                    + " left join linelevelterms llt on invdtm.term = llt.id"
                    + " where inv.deleteflag = 'F' and ( llt.termtype = 4 or llt.termtype = 5 or llt.termtype = 6 ) "+isCashCheck ;
            if(!StringUtil.isNullOrEmpty(companyid)){
                purchaseInvoice += " and inv.company = ? ";
                params.add(companyid);
            }
            
            String startDate = (String) requestParams.get(Constants.REQ_startdate);
            String endDate = (String) requestParams.get(Constants.REQ_enddate);
            if(requestParams.containsKey(Constants.REQ_startdate) && requestParams.get(Constants.REQ_startdate)!=null && !StringUtil.isNullOrEmpty(requestParams.get(Constants.REQ_startdate).toString())){
                 startDate = (String) requestParams.get(Constants.REQ_startdate);
            }
            if(requestParams.containsKey(Constants.REQ_enddate) && requestParams.get(Constants.REQ_enddate)!=null && !StringUtil.isNullOrEmpty(requestParams.get(Constants.REQ_enddate).toString())){
                 endDate = (String) requestParams.get(Constants.REQ_enddate);
            }
            
            String conditionQuery = "";
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate) && df !=null) {
                conditionQuery += " and (je.entrydate >=? and je.entrydate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            purchaseInvoice +=conditionQuery;
            
            groupby += " group by inv.invoicenumber ";
            String orderQuery = " order by date ASC ";
            purchaseInvoice += groupby+orderQuery;
            list = executeSQLQuery(purchaseInvoice,params.toArray());
            count = list.size();
            
        } catch ( ParseException | ServiceException | NumberFormatException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, count);
    }
    @Override
    public KwlReturnObject getInvoiceDetailsBetweenDates(HashMap requestParams) throws ServiceException {
        ArrayList paramslist = new ArrayList();
        List list = new ArrayList();
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        String companyid = requestParams.get("companyid").toString(), condition = "";
        paramslist.add(companyid);
        try {
            if (requestParams.containsKey("startdate") && requestParams.containsKey("enddate")) {
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                condition = " and (journalEntry.entryDate >=? and journalEntry.entryDate <=?)";
                paramslist.add(df.parse(startDate));
                paramslist.add(df.parse(endDate));
            }
            boolean isSalesAnnax = Boolean.valueOf(requestParams.get("isSalesAnnax").toString());
            String selQuery = (isSalesAnnax ? "from Invoice where company.companyID=? " : "from GoodsReceipt where company.companyID=? ") + condition;
            list = executeQuery(selQuery, paramslist.toArray());
        } catch (ParseException | ServiceException | NumberFormatException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject getAdvanceMakepaymentOfExcisDuty(HashMap<String, Object> requestParams) throws ServiceException {
        ArrayList paramslist = new ArrayList();
        List list = new ArrayList();
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        String companyid = requestParams.get("companyid").toString(), condition = "";
        String exciseDutyAdvancePaymentaccount = requestParams.get("exciseDutyAdvancePaymentaccount").toString();
        paramslist.add(companyid);
        paramslist.add(exciseDutyAdvancePaymentaccount);
        try {
            if (requestParams.containsKey("startdate") && requestParams.containsKey("enddate")) {
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                condition = " AND (totalJED.journalEntry.entryDate >= ? AND totalJED.journalEntry.entryDate <= ? )";
                paramslist.add(df.parse(startDate));
                paramslist.add(df.parse(endDate));
            }
            if(requestParams.containsKey("exciseunit")){
                condition +=" AND pdow.payment.exciseunit = ? ";
                paramslist.add(requestParams.get("exciseunit"));
            }

            String selQuery = "from PaymentDetailOtherwise pdow WHERE pdow.payment.company.companyID = ? AND pdow.account.ID = ? " + condition;
            list = executeQuery(selQuery, paramslist.toArray());
        } catch (ParseException | ServiceException | NumberFormatException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getAdvanceJEAdjustmentOfExcisDuty(HashMap<String, Object> requestParams) throws ServiceException {
        ArrayList paramslist = new ArrayList();
        List list = new ArrayList();
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        String companyid = requestParams.get("companyid").toString(), condition = "";
        String exciseDutyAdvancePaymentaccount = requestParams.get("exciseDutyAdvancePaymentaccount").toString();
        paramslist.add(companyid);
        paramslist.add(exciseDutyAdvancePaymentaccount);
        try {
            if (requestParams.containsKey("startdate") && requestParams.containsKey("enddate")) {
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                condition = " AND (jed.journalEntry.entryDate >= ? AND jed.journalEntry.entryDate <= ? )";
                paramslist.add(df.parse(startDate));
                paramslist.add(df.parse(endDate));
            }

            String selQuery = " from JournalEntryDetail jed WHERE jed.company.companyID = ? AND jed.account.ID = ? " + condition;
            list = executeQuery(selQuery, paramslist.toArray());
        } catch (ParseException | ServiceException | NumberFormatException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject createServiceTaxAccount(Object[] subdomainArray) throws ServiceException {
        ArrayList paramslist = new ArrayList();
        List list = new ArrayList();       
        try {
            String selQuery = "SELECT * FROM account WHERE name='Cenvat Credit on Service Tax' AND company = '"+subdomainArray[0]+"'";
            list = executeSQLQuery(selQuery);
            if(list.isEmpty()){
                selQuery = "INSERT INTO account (id, `name`, openingbalance, deleteflag, company, groupname, parent, currency, creationdate, life, salvage, presentvalue, depreciationAccont, category, costcenter, budget, taxid, acccode, isheaderaccount, crmaccountid, eliminateflag, location, department, installation, `user`, isdepreciable, templatepermcode, intercompanyflag, intercompanytype, custminbudget, accaccountcustomdataref, aliascode, accounttype, mastertypeid, ibgbank, controlaccounts, description, activate, usedin, wanttopostje, propagatedaccountid, ibgbanktype, ifsccode, micrcode, bankbranchname, bankbranchaddress, branchstate, bsrcode, pincode, defaultaccountid, mvatcode) VALUES (UUID(), 'Cenvat Credit on Service Tax', 0.0, 'F', ?, ?, NULL, '5', ?, 0.0, 0.0, 0.0, NULL, NULL, NULL, 0.0, '', 'Cenvat Credit on Service Tax', 'F', NULL, 'F', NULL, NULL, NULL, NULL, 0, NULL, 'F', NULL, 0.0, NULL, 'Service Tax Cenvat Credit', 1, 4, 'F', 'F', 'Cenvat Credit on Service Tax', 'T', NULL, 'F', NULL, 0, NULL, NULL, '', '', NULL, 0, 0, NULL, NULL)";
                executeSQLUpdate(selQuery, subdomainArray);
}
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getGroupId(HashMap hashData) throws ServiceException {
        ArrayList paramslist = new ArrayList();
        List list = new ArrayList();       
        try {            
            list.add(hashData.get("grpOldId").toString());
            list.add(hashData.get("companyid"));
            String selQuery = "from Group WHERE grpOldId = ? and company.companyID =?";            
            list = executeQuery(selQuery, list.toArray());
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    @Override
    public KwlReturnObject getJEntryBetweenDates(HashMap requestParams) throws ServiceException {
        ArrayList paramslist = new ArrayList();
        List list = new ArrayList();
        DateFormat df = (DateFormat) requestParams.get(Constants.df);
        String companyid = requestParams.get("companyid").toString(), condition = "";
        paramslist.add(companyid);
        try {
            if (requestParams.containsKey("startdate") && requestParams.containsKey("enddate")) {
                String startDate = (String) requestParams.get(Constants.REQ_startdate);
                String endDate = (String) requestParams.get(Constants.REQ_enddate);
                condition = " and (entryDate >=? and entryDate <=?)";
                paramslist.add(df.parse(startDate));
                paramslist.add(df.parse(endDate));
            }
//            boolean isSalesAnnax = Boolean.valueOf(requestParams.get("isSalesAnnax").toString());
            String selQuery =  "from JournalEntry where company.companyID=? " + condition;
            list = executeQuery(selQuery, paramslist.toArray());
        } catch (ParseException | ServiceException | NumberFormatException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    public KwlReturnObject getSaleOfCustomer(HashMap<String, Object> request) throws ServiceException {
        ArrayList list = new ArrayList();
        List customerlist = null;
        List totallist = null;
        int count = 0;
        try {
            ArrayList params = new ArrayList();
            DateFormat df = (DateFormat) request.get(Constants.df);
            String companyid = (String) request.get(Constants.companyKey);
            String conditionSQL = "";
            params.add(companyid);
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            boolean isdefaultHeaderMap = false;
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and (journalentry.entrydate >=? and journalentry.entrydate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            if (request.containsKey("ss") && request.get("ss") != null) {
                String ss = request.get("ss").toString().toUpperCase();
                if (!StringUtil.isNullOrEmpty(ss)) {
                    String[] searchcol = new String[]{"customer.name", "customer.acccode"};
                    try {
                        Map map = StringUtil.insertParamSearchStringMap(params, ss, 2);
                        StringUtil.insertParamSearchString(map);
                    } catch (SQLException ex) {
                        Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                    conditionSQL += searchQuery;
                }
            }
//            StringBuilder conditionString=new StringBuilder();
//            if (request.containsKey(Constants.isdefaultHeaderMap) && request.get(Constants.isdefaultHeaderMap) != null) {
//                isdefaultHeaderMap = (boolean) request.get(Constants.isdefaultHeaderMap);
//            }
//            
//            if (isdefaultHeaderMap) {//ERP-37811
//                int amountdigitafterdecimal = 2;
//                if (request.containsKey("amountdigitafterdecimal") && !StringUtil.isNullObject(request.get("amountdigitafterdecimal"))) {
//                    amountdigitafterdecimal = (Integer) request.get("amountdigitafterdecimal");
//                }
//                conditionString.append(" CAST(sum(invoice.invoiceamountinbase) AS DECIMAL(20," + amountdigitafterdecimal + "))  ");
//            } else {
//                conditionString.append(" sum(invoice.invoiceamountinbase) ");
//            } 

           String mysqlQuery = "select DISTINCT invoice.id,customer.acccode,customer.name,sum(invoice.invoiceamountinbase) as amountinbase from invoice  "
                    + "inner join journalentry on invoice.journalentry = journalentry.id  "
                    + "inner join customer on customer.id = invoice.customer "
                    + "where invoice.company = ? and invoice.deleteflag='F' and invoice.pendingapproval=0 and invoice.isdraft = false  and invoice.isfixedassetleaseinvoice=0 and invoice.isfixedassetinvoice=0 " + conditionSQL
                    + "Group by customer.name order by customer.id";
            customerlist = executeSQLQuery( mysqlQuery, params.toArray());
            count = customerlist.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, customerlist, count);
    }
    public KwlReturnObject getSaleQuantityOfCustomer(HashMap<String, Object> request) throws ServiceException {
        ArrayList list = new ArrayList();
        List customerlist = null;
        List totallist = null;
        int count = 0;
        try {
            ArrayList params = new ArrayList();
            DateFormat df = (DateFormat) request.get(Constants.df);
            String companyid = (String) request.get(Constants.companyKey);
            String conditionSQL = "";
            params.add(companyid);
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and (journalentry.entrydate >=? and journalentry.entrydate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            if (request.containsKey("ss") && request.get("ss") != null) {
                String ss = request.get("ss").toString().toUpperCase();
                if (!StringUtil.isNullOrEmpty(ss)) {
                    String[] searchcol = new String[]{"customer.name", "customer.acccode"};
                    try {
                        Map map = StringUtil.insertParamSearchStringMap(params, ss, 2);
                        StringUtil.insertParamSearchString(map);
                    } catch (SQLException ex) {
                        Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                    conditionSQL += searchQuery;
                }
            }
            String mysqlQuery = "select DISTINCT invoice.id,sum(inventory.quantity) as quantity from invoice "
                    + "inner join journalentry on invoice.journalentry = journalentry.id "
                    + "inner join invoicedetails on invoicedetails.invoice = invoice.id "
                    + "inner join inventory on invoicedetails.id = inventory.id "
                    + "inner join customer on customer.id = invoice.customer "
                    + "inner join product on product.id = inventory.product "
                    + "where invoice.company = ? and invoice.deleteflag='F' and invoice.pendingapproval=0 and invoice.isdraft = false  and invoice.isfixedassetleaseinvoice=0 and invoice.isfixedassetinvoice=0 " + conditionSQL
                    + "Group by customer.name order by customer.id";
            customerlist = executeSQLQuery( mysqlQuery, params.toArray());
            count = customerlist.size();
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, customerlist, count);
    }
    public KwlReturnObject getSaleOfCompany(HashMap<String, Object> request) throws ServiceException {
        ArrayList list = new ArrayList();
        List customerlist = null;
        List totallist = null;
        int count = 0;
        try {
            ArrayList params = new ArrayList();
            DateFormat df = (DateFormat) request.get(Constants.df);
            String companyid = (String) request.get(Constants.companyKey);
            String conditionSQL = "";
            params.add(companyid);
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and (journalentry.entrydate >=? and journalentry.entrydate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            
            String totalQuery = "select DISTINCT invoice.id,sum(invoice.invoiceamountinbase) as amountinbase from invoice  "
                    + "inner join journalentry on invoice.journalentry = journalentry.id  "
                    + "inner join customer on customer.id = invoice.customer "
                    + "where invoice.company = ? and invoice.deleteflag='F' and invoice.pendingapproval=0 and invoice.isdraft = false  and invoice.isfixedassetleaseinvoice=0 and invoice.isfixedassetinvoice=0 " + conditionSQL
                    + "order by amountinbase";
            totallist = executeSQLQuery( totalQuery, params.toArray());
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, totallist, totallist.size());
    }
    /*
     *Function to get actual data for customer summary report from invoices
     */
    public KwlReturnObject getCustomerSalesbyProduct(HashMap<String, Object> request) throws ServiceException {
        List customerlist = null;
        int count = 0;
        try {
            ArrayList params = new ArrayList();
            DateFormat df = (DateFormat) request.get(Constants.df);
            String companyid = (String) request.get(Constants.companyKey);
            String conditionSQL = "";
            params.add(companyid);
            String startDate = (String) request.get(Constants.REQ_startdate);
            String endDate = (String) request.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                conditionSQL += " and (journalentry.entrydate >=? and journalentry.entrydate <=?) ";
                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }
            if (request.containsKey("ss") && request.get("ss") != null) {
                String ss = request.get("ss").toString().toUpperCase();
                if (!StringUtil.isNullOrEmpty(ss)) {
                    String[] searchcol = new String[]{"product.name", "product.productid"};
                    try {
                        Map map = StringUtil.insertParamSearchStringMap(params, ss, 2);
                        StringUtil.insertParamSearchString(map);
                    } catch (SQLException ex) {
                        Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                    conditionSQL += searchQuery;
                }
            }
            /*
             *This query directly provides product wise sale for each customer for each month 
             *with calulated amounts considering scenarios of row tax,discount,tax including GST
             */
            String mysqlQuery = "SELECT customer.id as customerid,customer.`name` as customername,product.id as productid,"
                +"product.`name` as productname,invoicedetails.rate,inventory.quantity,"
                +"IF(invoice.gstincluded='T',SUM(((rate*quantity)+invoicedetails.rowtaxamount+invoicedetails.rowtermtaxamount)/journalentry.externalcurrencyrate),IF(invoicedetails.discount IS NOT NULL ,IF(discount.inpercent='T',SUM((((rate*quantity)-((rate*quantity)*(discount.discount/100)))+invoicedetails.rowtaxamount+invoicedetails.rowtermtaxamount)/journalentry.externalcurrencyrate),SUM((((rate*quantity)-discount.discount)/journalentry.externalcurrencyrate)+invoicedetails.rowtaxamount+invoicedetails.rowtermtaxamount)),SUM(((rate*quantity)+invoicedetails.rowtaxamount+invoicedetails.rowtermtaxamount)/journalentry.externalcurrencyrate))) as amount,"
                +"journalentry.entrydate,MONTH(journalentry.entrydate) AS month,YEAR(journalentry.entrydate) AS year from invoicedetails "
                +"INNER JOIN invoice on invoice.id=invoicedetails.invoice "
                +"INNER JOIN journalentry ON invoice.journalentry=journalentry.id "
                +"INNER JOIN customer on invoice.customer=customer.id "
                +"INNER JOIN inventory ON inventory.id=invoicedetails.id "
                +"INNER JOIN product ON inventory.product=product.id "
                +"LEFT JOIN discount ON discount.id=invoicedetails.discount "
                +"where invoice.company=? and invoice.isfixedassetinvoice=false  and invoice.isfixedassetleaseinvoice=false and invoice.approvestatuslevel=11 "
                +"and invoice.isconsignment='F' and invoice.isdraft = false AND invoice.deleteflag='F' " + conditionSQL + " GROUP BY invoice.customer,inventory.product,MONTH(journalentry.entrydate)";
            customerlist = executeSQLQuery( mysqlQuery, params.toArray());
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, customerlist, count);
    }
    
    public boolean isTaxApplied(HashMap<String,Object> data, int taxtype) throws ServiceException{
        ArrayList paramslist = new ArrayList();
        List list = new ArrayList();   
        String conditionQuery = "";
        boolean isTaxApplied = false;
        try {            
            String selQuery = "from InvoiceDetailTermsMap idtm WHERE idtm.term.termType = ? ";  
            paramslist.add(taxtype);
            if(data.containsKey("invoiceid") && data.get("invoiceid") != null && !StringUtil.isNullOrEmpty(data.get("invoiceid").toString())){
                conditionQuery += " and idtm.invoicedetail.invoice.ID = ? " ;
                paramslist.add(data.get("invoiceid"));
            }
            if(data.containsKey("invoicedetailid") && data.get("invoicedetailid") != null && !StringUtil.isNullOrEmpty(data.get("invoicedetailid").toString())){
                conditionQuery += " and idtm.invoicedetail.ID = ? " ;
                paramslist.add(data.get("invoicedetailid"));
            }
            if(data.containsKey("companyid") && data.get("companyid") != null && !StringUtil.isNullOrEmpty(data.get("companyid").toString())){
                conditionQuery += " and idtm.term.company.companyID =? " ;
                paramslist.add(data.get("companyid"));
            }
            selQuery += conditionQuery;
            list = executeQuery(selQuery, paramslist.toArray());
            if(list.size() > 0){
                isTaxApplied = true;
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return isTaxApplied;
    }
    
    @Override
    public KwlReturnObject getGenricSalesReturndetailTermMap(HashMap<String, Object> hm) throws ServiceException {
        List list = new ArrayList();
        List param = new ArrayList();
        try {
            String query = "SELECT -sum(srdt.assessablevalue),-sum(srdt.termamount) , t.account.ID,t.termType FROM SalesReturnDetailsTermMap srdt JOIN srdt.term t JOIN srdt.salesreturndetail srds JOIN srds.salesReturn sr";
            String condition = "";
            String orderby = " GROUP BY t.account ";
            if (hm.containsKey("SalesReturnDetailid") && hm.get("SalesReturnDetailid") != null) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }
                String SalesReturnDetailid = hm.get("SalesReturnDetailid").toString();
                condition += " srds.ID = ? ";
                param.add(SalesReturnDetailid);
            }
            if (hm.containsKey("SalesReturnid") && hm.get("SalesReturnid") != null) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }
                String SalesReturnid = hm.get("SalesReturnid").toString();
                condition += " sr.ID = ? ";
                param.add(SalesReturnid);
            }
            
            if (hm.containsKey("termtypeArry") && hm.get("termtypeArry") != null) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }

                List listTerm = (List) hm.get("termtypeArry");
                StringBuilder commaSepValueBuilder = new StringBuilder();

                //Looping through the list
                for (int i = 0; i < listTerm.size(); i++) {
                    //append the value into the builder
                    commaSepValueBuilder.append(listTerm.get(i));

                    //if the value is not the last element of the list
                    //then append the comma(,) as well
                    if (i != listTerm.size() - 1) {
                        commaSepValueBuilder.append(", ");
                    }
                }

                condition += " t.termType in ( " + commaSepValueBuilder + " ) ";
            }
            if (hm.containsKey("termtype") && hm.get("termtype") != null) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }
                param.add(Integer.parseInt(hm.get("termtype").toString()));
                condition += " t.termType = ? ";
            }
            if (hm.containsKey("termpercentage") && hm.get("termpercentage")!=null) {
                if (!StringUtil.isNullOrEmpty(condition)) {
                    condition += " and ";
                }
                condition+="t.percentage = ? ";
                param.add(Double.parseDouble(hm.get("termpercentage").toString()));
            }
            if (!StringUtil.isNullOrEmpty(condition)) {
                query += " where " + condition;
            }
           
            query += orderby;
            list = executeQuery(query, param.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getGenricSalesReturndetailTermMap:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    // Excise Opening Balance check from Vendor Master ERP-27108 : to hide JE POST
     public void permanentDeleteJournalEntryFromInvoice(String invoiceid ,String companyid)throws ServiceException{
         String delQuery = "", delQuery1 = "", delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "", delQuery6 = "",delQuery7="", delQuery8 = "",delQuery9 = "",delQueryForWriteOff="";
        int numtotal = 0;
         try{
                String journalent="";
                ArrayList params9 = new ArrayList();
                params9.add(companyid);
                params9.add(invoiceid);
                String myquery1 = "select journalentry from invoice where company = ? and id=?";
                List list1 = executeSQLQuery( myquery1, params9.toArray());
                Iterator itr1 = list1.iterator();

                while (itr1.hasNext()) {

                    String jeidi = itr1.next().toString();
                    journalent += "'" + jeidi + "',";
                }
                
                ArrayList writeOffParams = new ArrayList();
                writeOffParams.add(companyid);
                writeOffParams.add(invoiceid);
                
                String queryToGetWriteOffJE = "select journalentry from invoicewriteoff where company = ? and invoice = ?";
                List writeOffJEList = executeSQLQuery( queryToGetWriteOffJE, writeOffParams.toArray());
                Iterator writeOffJEIterator = writeOffJEList.iterator();

                while (writeOffJEIterator.hasNext()) {
                    String jeidi = writeOffJEIterator.next().toString();
                    journalent += "'" + jeidi + "',";
                }
                
                String queryToGetReverseWriteOffJE = "select reversejournalentry from invoicewriteoff where company = ? and invoice = ?";
                List writeOffReverseJEList = executeSQLQuery( queryToGetReverseWriteOffJE, writeOffParams.toArray());
                Iterator writeOffReverseJEIterator = writeOffReverseJEList.iterator();
                
                while (writeOffReverseJEIterator.hasNext()) {
                    String jeidi = writeOffReverseJEIterator.next().toString();
                    journalent += "'" + jeidi + "',";
                }
                
                if (!StringUtil.isNullOrEmpty(journalent)) {
                    journalent = journalent.substring(0, journalent.length() - 1);
                }
                
                
                ArrayList params1 = new ArrayList();
                params1.add(companyid);
                params1.add(companyid);
                params1.add(invoiceid);
                
                delQuery1 = "delete  from accjedetailcustomdata where jedetailId in (select id from jedetail where company = ? and journalEntry in (select journalentry from invoice where company = ? and id= ?))";
                int numRows1 = executeSQLUpdate( delQuery1, params1.toArray());

                ArrayList params10 = new ArrayList();
                params10.add(companyid);
                params10.add(companyid);
                params10.add(invoiceid);
                delQuery8 = "delete  from accjedetailproductcustomdata where jedetailId in (select id from jedetail where company = ? and journalEntry in (select journalentry from goodsreceipt where company =? and id = ?))";
                int numRows8 = executeSQLUpdate( delQuery8, params1.toArray());
                
                 ArrayList params3Update = new ArrayList();
                params3Update.add(companyid);
                params3Update.add(invoiceid);
                // params3.add(requestParams.get("invoiceid"));
                delQuery3 = "update invoice set centry=null,sentry=null,oentry=null,journalentry=null,taxentry=null where company = ? and id = ? ";
                int numRows31 = executeSQLUpdate( delQuery3, params3Update.toArray());
                
                ArrayList params3 = new ArrayList();
                params3.add(companyid);
                delQuery3 = "delete from jedetail where company = ? and journalEntry in (" + journalent + ") ";
                int numRows3 = executeSQLUpdate(delQuery3, params3.toArray());

                ArrayList params4 = new ArrayList();
                delQuery4 = "delete from journalentry where id  in (" + journalent + ")";
                int numRows4 = executeSQLUpdate( delQuery4, params4.toArray());

                ArrayList params2 = new ArrayList();
                delQuery2 = "delete  from accjecustomdata where journalentryId in (" + journalent + ")";
                int numRows2 = executeSQLUpdate( delQuery2, params2.toArray());


                numtotal =  numRows1 + numRows2 + numRows3 + numRows4 +  numRows8;
         }catch(Exception ex){
              throw ServiceException.FAILURE("accInvoiceImpl.getGenricSalesReturndetailTermMap:" + ex.getMessage(), ex);
         }
        
         
     }
     
    public KwlReturnObject getAmountFromReceiptDetailOtherwise(String receiptAmount) throws ServiceException {
        List totallist = null;
        try {
            String totalQuery = "select amount,account,isdebit from receiptdetailotherwise where receipt=?";
            totallist = executeSQLQuery(totalQuery, new Object[]{receiptAmount});
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoices:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, totallist, totallist.size());
    }
     
    @Override
    public KwlReturnObject getProductsFromDeliveryOrderOrder(String billid, String companyid) throws ServiceException {
        String query = "select product from dodetails where deliveryorder = ? and company = ?";
        List list = executeSQLQuery(query, new Object[]{billid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject getProductsFromSalesReturn(String billid, String companyid) throws ServiceException {
        String query = "select product from srdetails where salesreturn = ? and company = ?";
        List list = executeSQLQuery(query, new Object[]{billid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    @Override
    public KwlReturnObject checkForExistingFreeGiftJEs(Map<String, Object> map) throws ServiceException {
        
            List list = new ArrayList();
            List params = new ArrayList();
            String condition="";
            String companyId = map.get("companyId")!=null?(String)map.get("companyId"):"";
            params.add(companyId);
            String customerId = map.get("customerId")!=null?(String)map.get("customerId"):"";
            params.add(customerId);
            Date lowerLimitDate = map.get("lowerLimitDate")!=null?(Date)map.get("lowerLimitDate"):null;
            Date upperLimitDate = map.get("upperLimitDate")!=null?(Date)map.get("upperLimitDate"):null;
            if(lowerLimitDate!=null){
                params.add(lowerLimitDate);
                condition += " and DO.orderDate >= ? ";
            }
            if(upperLimitDate!=null){
                params.add(upperLimitDate);
                condition += " and DO.orderDate <= ? ";
            }
            String query = "select SUM(totalamountinbase) from DeliveryOrder DO where DO.isFreeGift = true and DO.deleted = false and DO.approvestatuslevel = 11 and DO.company.companyID = ?  and DO.customer.ID = ? "+condition;
            list = executeQuery( query,params.toArray() );
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject checkForLatestFreeGiftJEs(Map<String, Object> map) throws ServiceException {
        
            List list = new ArrayList();           
            List params = new ArrayList();           
            String condition ="";
            String companyId = map.get("companyid")!=null?(String)map.get("companyid"):"";            
            params.add(companyId);
            String customerId = map.get("customerId")!=null?(String)map.get("customerId"):"";
            if(!StringUtil.isNullOrEmpty(customerId)){
                params.add(customerId);
                condition += " and DO.customer.ID = ? ";
            }
            
            Date lowerLimitDate = map.get("lowerLimitDate")!=null?(Date)map.get("lowerLimitDate"):null;
            Date upperLimitDate = map.get("upperLimitDate")!=null?(Date)map.get("upperLimitDate"):null;
            if(lowerLimitDate!=null){
                params.add(lowerLimitDate);
                condition += " and DO.orderDate >= ? ";
            }
            if(upperLimitDate!=null){
                params.add(upperLimitDate);
                condition += " and DO.orderDate <= ? ";
            }
            String query = "From DeliveryOrder DO where DO.deleted = false and DO.isFreeGift = true and DO.approvestatuslevel = 11 and DO.company.companyID = ? "+ condition+" order by DO.createdon desc LIMIT 1";
            list = executeQuery( query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject JEForFreeGift(String jeid, String companyid) throws ServiceException {
        String selQuery = "from DeliveryOrder where freeGiftJE.ID=? and company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{jeid, companyid});
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    @Override
    public KwlReturnObject deleteDeliveryOrdersFreeGiftJEMapping(String DOId, String companyid) throws ServiceException{
        String delQuery = "update deliveryorder DO set DO.freegiftje = NULL where DO.id = ? and DO.company = ? ";
        int count = executeSQLUpdate(delQuery, new Object[]{DOId,companyid});
        return new KwlReturnObject(true, "Mapping Delee Successfully", null, null, count);
    }
    
    @Override
    public KwlReturnObject getDODetailfromInvoiceDetailID(String invoiceDetailID,String companyId) throws ServiceException {
        String selQuery = "from DeliveryOrderDetail dod where dod.cidetails.ID=?  and dod.company.companyID=?";
        List list = executeQuery( selQuery, new Object[]{invoiceDetailID, companyId});
        return new KwlReturnObject(true, "", null, list, list.size());
    }

    /*
     * Method for saving the file generation history
     */
    @Override
    public List saveGiroFileGenerationHistory(HashMap<String, Object> requestMap) throws ServiceException{
        List list = new ArrayList();
        try {
            GiroFileGenerationHistory history = new GiroFileGenerationHistory();
            if (requestMap.containsKey(Constants.companyKey) && requestMap.get(Constants.companyKey) != null) {
                Company company = (Company) get(Company.class, (String) requestMap.get(Constants.companyKey));
                history.setCompany(company);
            }
            
            if (requestMap.containsKey("fileName") && requestMap.get("fileName") != null) {
                history.setFileName(requestMap.get("fileName").toString());
            }
            if (requestMap.containsKey("generationDate") && requestMap.get("generationDate") != null) {
                history.setGenerationDate((Date) requestMap.get("generationDate"));
            }
            if(requestMap.containsKey("count") && requestMap.get("count")!=null){
                history.setCount((Integer)requestMap.get("count"));
            }
            if(requestMap.containsKey("bank") && requestMap.get("bank")!=null){
                history.setBank((Integer)requestMap.get("bank"));
            }
            save(history);
            list.add(history);
        } catch (Exception ex) {
             Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getMaxCountOfGiroFile:" + ex.getMessage(), ex);
        }
        return list;
    }

    /*
     *  Method for getting the max sequence number of generated file 
     */
    @Override
    public KwlReturnObject getMaxCountOfGiroFile(HashMap<String, Object> requestMap) throws ServiceException{
        List list = new ArrayList();
        try{
        List params = new ArrayList();
            DateFormat df = (DateFormat) requestMap.get(Constants.df);
            DateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");
            StringBuilder condition = new StringBuilder();
            String query = "Select Max(count) from girofilegenerationhistory ";
            
            if (requestMap.containsKey("companyid") && requestMap.get("companyid") != null) {
                String companyid = requestMap.get("companyid").toString();
                condition.append(" where company = ? ");
                params.add(companyid);
            }
            
            if (requestMap.containsKey("bank") && requestMap.get("bank") != null) {
                int bank = Integer.parseInt(requestMap.get("bank").toString());
                if (condition.indexOf("where") >= 0) {
                    condition.append(" and bank = ? ");
                } else {
                    condition.append(" where bank = ? ");
                }    
                params.add(bank);
            }
            
            if (requestMap.containsKey("generationDate") && requestMap.get("generationDate") != null) {
                Date generationDate = df.parse(requestMap.get("generationDate").toString());
                String date = df1.format(generationDate);
                if (condition.indexOf("where") >= 0) {
                    condition.append(" and generationDate =? ");
                } else {
                    condition.append(" where generationDate =? ");
                }
                params.add(date);
            }
            query += condition.toString();
            
            list = executeSQLQuery(query, params.toArray());
        } catch(Exception ex){
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getMaxCountOfGiroFile:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    public KwlReturnObject getInvoicesForCommissionSchema(HashMap<String, Object> request) throws ServiceException {
        ArrayList params = new ArrayList();
        params.add(request.get("companyid").toString());
        DateFormat df = (DateFormat) request.get("df");
        String appendCase = "and";
        String mySearchFilterString = "";
        String joinString = "";
        String joinString1 = "";
        String categoryid = (String) request.get("categoryid");
        String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
        if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
            if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                filterConjuctionCriteria = com.krawler.common.util.Constants.or;
            }
        }
        String condition = "";
        try {
            if (request.containsKey("startdate")) {
                condition += " and jed.journalEntry.entryDate>=?";
                String startdate = (String) request.get("startdate");
                params.add(df.parse(startdate));
    
            }
            if (request.containsKey("enddate")) {
                condition+=" and jed.journalEntry.entryDate<=?";
                String enddate = (String) request.get("enddate");
                params.add(df.parse(enddate));
            }
            if (StringUtil.isNullOrEmpty(categoryid) == false && !categoryid.contains("All")) {
                condition += " and invd.inventory.product.ID IN(Select pcm.productID.ID from ProductCategoryMapping pcm where pcm.productCategory.ID IN ('" + categoryid + "'))";
            }
        } catch (ParseException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        if(request.containsKey("filterby") && request.get("filterby") != null) {
            if(request.get("filterby").toString().equalsIgnoreCase(Constants.FULLY_PAID)) {
                condition += " and invd.invoice.invoiceamountdue <= 0 ";
            }
        }
        
        String Searchjson = "";
        if (request.containsKey("searchJson") && request.get("searchJson") != null) {
            Searchjson = request.get("searchJson").toString();

            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                try {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);

                    if (customSearchFieldArray.length() > 0) {
                        try {
                            //Advance search case for Custome field
                            request.put(Constants.Searchjson, Searchjson);
                            request.put(Constants.appendCase, appendCase);
                            request.put("filterConjuctionCriteria", filterConjuctionCriteria);

                            mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
                            if (mySearchFilterString.contains("accjecustomdata")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("accjecustomdata", "invd.invoice.journalEntry.accBillInvCustomData");//
//                                joinString1 = " inner join invoice on invoice.id = invoicedetails.invoice  inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry ";
}
                            if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "jed.accJEDetailCustomData");//
//                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "accjedetailcustomdata");//
//                                joinString1 += " left join accjedetailcustomdata  on accjedetailcustomdata.jedetailId=jedetail.id ";
                            }
                            if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "jed.accJEDetailsProductCustomData");//    
//                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "accjedetailproductcustomdata");//    
//                                joinString1 += " left join accjedetailproductcustomdata  on accjedetailproductcustomdata.jedetailId=jedetail.id ";
                            }
                            StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                        } catch (ParseException ex) {
                            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } catch (JSONException ex) {
                    Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        }

//        String query = " select DISTINCT invoicedetails from invoicedetails  inner join jedetail jed on jedetail.id=invoicedetails.salesjedid  where invoicedetails.invoice =? " + mySearchFilterString;
        String query = " select DISTINCT  invd from InvoiceDetail invd  inner join invd.salesJED  jed where invd.invoice.approvestatuslevel=11 and invd.invoice.istemplate!=2 "
                + "and invd.invoice.draft='F' and invd.company.companyID=?" + condition + mySearchFilterString;
        List list = executeQuery(query, params.toArray());
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    /*
     * Method for fetching Sales invoices with global level tax
     */
    @Override
    public KwlReturnObject getInvoicesWithGlobalTax(HashMap<String, Object> map) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String condition = "";
        String companyId = "";
        String currencyToExclude = "";
        if (map.containsKey("companyId") && map.get("companyId")!=null) {
            companyId = map.get("companyId").toString();
            params.add(companyId);
        }
        if (map.containsKey("currencyNotIn") && map.get("currencyNotIn")!=null) {
            currencyToExclude = map.get("currencyNotIn").toString();
            condition += " and inv.currency.currencyID not in (?) ";
            params.add(currencyToExclude);
        }
        String query = "From Invoice inv where inv.tax is not null and inv.gstCurrencyRate = 0 and inv.isOpeningBalenceInvoice = false and inv.company.companyID = ? "+condition;
        list = executeQuery(query, params.toArray());
        
        return new KwlReturnObject(true, "", "", list, list.size());
    }

    /*
     * Method for fetching sales invoices with line level tax
     */
    @Override
    public KwlReturnObject getInvoicesWithLineLevelTax(HashMap<String, Object> map) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        String condition = "";
        String companyId = "";
        String currencyToExclude = "";
        if (map.containsKey("companyId") && map.get("companyId")!=null) {
            companyId = map.get("companyId").toString();
            params.add(companyId);
        }
        if (map.containsKey("currencyNotIn") && map.get("currencyNotIn")!=null) {
            currencyToExclude = map.get("currencyNotIn").toString();
            condition += " and invd.invoice.currency.currencyID not in (?) ";
            params.add(currencyToExclude);
        }
        String query = "From InvoiceDetail invd where invd.tax is not null and invd.gstCurrencyRate = 0 and invd.invoice.isOpeningBalenceInvoice = false and invd.company.companyID = ? "+condition;
        list = executeQuery(query, params.toArray());
        
        return new KwlReturnObject(true, "", "", list, list.size());
    }
       /**
  * @DEsc : et DOD and Inter Store Mapping
  * @param requestParams
  * @return
  * @throws ServiceException 
  */
    public KwlReturnObject getDODInterStoreMapping(Map<String, Object> requestParams) throws ServiceException {
        List list = new ArrayList();
        String dodId = "";
        if (requestParams.containsKey("dodid") && requestParams.get("dodid") != null) {
            dodId = (String) requestParams.get("dodid");
        }
        String hq1 = " from DeliveryDetailInterStoreLocationMapping where deliveryOrderDetail = ? ";
        list = executeQuery(hq1, new Object[]{dodId});
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    /**
     * Description: This method is used to fetch all sales person ids which are used in invoices
     * @param Map<String, Object> map
     * @return KwlReturnObject
     * @throws ServiceException
     */
    @Override
    public KwlReturnObject getSalesPersonHavingTransactions(Map<String, Object> map) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();

        String grouBy = "GROUP BY mastersalesperson ";
        String orderBy = "ORDER BY masteritem.value ";
        String condition = "WHERE invoice.company =? ";

        String companyId = (String) map.get(Constants.companyKey);
        params.add(companyId);

        if (map.containsKey(InvoiceConstants.salesPersonid) && map.get(InvoiceConstants.salesPersonid) != null) {
            String salesPersonID = map.get(InvoiceConstants.salesPersonid).toString();
            if (!StringUtil.isNullOrEmpty(salesPersonID) && !salesPersonID.equalsIgnoreCase("All")) {
                salesPersonID = AccountingManager.getFilterInString(salesPersonID);
                condition += " and mastersalesperson in " + salesPersonID + " ";
            }
        }

        if (map.containsKey("dir") && map.containsKey("sort")) {
            String Col_Name = map.get("sort").toString();
            if (Col_Name.equals("salespersonname")) {
                orderBy += map.get("dir").toString() + " ";
            }
        }

        String query = "SELECT mastersalesperson "
                + "FROM invoice "
                + "INNER JOIN masteritem ON masteritem.id=invoice.mastersalesperson "
                + condition + grouBy + orderBy;

        list = executeSQLQuery(query, params.toArray());
        return new KwlReturnObject(true, "", "", list, list.size());
    }
    /**
     * DESC : Get DOIST id
     *
     * @param map
     * @return
     */
    public List getDOISTMapping(Map<String, Object> map) throws ServiceException {

        String param = (String) map.get("dod");
        String query = "select id from dodistmapping where dod=?";
        if (map.containsKey("isforlandedcost") && map.get("isforlandedcost")!=null && ((boolean) map.get("isforlandedcost"))==true) {
            query = " select dodist.ist from dodistmapping dodist INNER JOIN dodetails dod ON dod.id = dodist.dod "
                    + " where dod.product= ?";
            param = (String) (map.get("productid") != null ? map.get("productid") : "");
        }
        List l = executeSQLQuery(query, new Object[]{param});
        return l;

    }
    /**
     * @Desc : Get Shipping Qty from DO-IST-Stock OUt Mapping
     * @param map
     * @return
     * @throws ServiceException 
     */
        public KwlReturnObject getShippingQty(Map<String, Object> map) throws ServiceException {
        List list = new ArrayList();
        ArrayList params = new ArrayList();
        if(map.containsKey("dodid")){
            String dodid=(String)map.get("dodid");
            String query=" From DeliveryDetailInterStoreLocationMapping where deliveryOrderDetail=?";
            list=executeQuery(query, new Object[]{dodid});
        }
       
        return new KwlReturnObject(true, "", "", list, list.size());
    }
/**
 * @Desc update Status of DO
 * @param map
 * @throws ServiceException 
 */        
    public void updateDeliveryOrderStatus(Map<String, Object> map) throws ServiceException {
        String masterid = "";
        List l=null;
        if (map.containsKey("companyid")) {
            String companyid = (String) map.get("companyid");
            String query = "select id from masteritem where masterGroup=? and company=? and value=?";
            if (map.containsKey("ispack")) {
                l = executeSQLQuery(query, new Object[]{10, companyid,"Packed"});
            }else if (map.containsKey("is_pick")) {
                l = executeSQLQuery(query, new Object[]{10, companyid,"Picked"});
            }else{
                l = executeSQLQuery(query, new Object[]{10, companyid,"Shipped"});
            }            
            if (l != null &&l.size()>0 && l.get(0) != null) {
                masterid = (String) l.get(0);
                DeliveryOrder deliveryorder = (DeliveryOrder) map.get("deliveryOrder");
                MasterItem masterItem = (MasterItem) get(MasterItem.class, (String) masterid);
                /**
                 * For Changing Status as 'Shipped' in Packing.
                 */
                if (map.containsKey(Constants.packRecord) && map.get(Constants.packRecord) != null) {
                    List<Packing> packingObjects = (List) map.get(Constants.packRecord);
                    for (Packing packRecord : packingObjects) {
                        packRecord.setStatus(masterItem);
                        saveOrUpdate(packRecord);
                    }
                }
                
                deliveryorder.setStatus(masterItem);
                saveOrUpdate(deliveryorder);
            }
        }
    }
    /*
        Function to save actual packed records to database
    */
    @Override
    public KwlReturnObject savePacking(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String billid = (String) dataMap.get("billid");

            Packing packing = new Packing();
            if (!StringUtil.isNullOrEmpty(billid)) {
                packing = (Packing) get(Packing.class, billid);
            }

            if (dataMap.containsKey(IntegrationConstants.totalShippingCost)) {
                packing.setTotalCost((Double) dataMap.get(IntegrationConstants.totalShippingCost));
            }
            
            if (dataMap.containsKey(IntegrationConstants.shippedWithUPS)) {//ERP-35382
                packing.setShippedWithUPS((Boolean) dataMap.get(IntegrationConstants.shippedWithUPS));
            }

            if (StringUtil.isNullOrEmpty(billid)) {
                packing.setDeleted(false);
            }
            
            if (dataMap.containsKey("entrynumber")) {
                packing.setPackNumber((String) dataMap.get("entrynumber"));
            }

            if (dataMap.containsKey("memo")) {
                packing.setMemo((String) dataMap.get("memo"));
            }

            if (dataMap.containsKey("customer")) {
                packing.setCustomer((String) dataMap.get("customer"));
            }

            if (dataMap.containsKey("packingdate")) {
                packing.setPackingDate((Date) dataMap.get("packingdate"));
            }

            if (dataMap.containsKey("status")) {
                MasterItem masterItem = dataMap.get("status") == null ? null : (MasterItem) get(MasterItem.class, (String) dataMap.get("status"));
                packing.setStatus(masterItem);
            }

            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                packing.setCompany(company);
            }
            if (dataMap.containsKey("packingdolistdetails")) {
                if (dataMap.get("packingdolistdetails") != null) {
                    packing.setRows((Set<PackingDetail>) dataMap.get("packingdolistdetails"));
                }
            }
            if (dataMap.containsKey("autogenerate")) {
                if (dataMap.get("autogenerate") != null) {
                    packing.setAutoGenerated((boolean) dataMap.get("autogenerate"));
                }
            }
            if (dataMap.containsKey("seqnumber")) {
                if (dataMap.get("seqnumber") != null) {
                    packing.setSeqnumber((int) dataMap.get("seqnumber"));
                }
            }
            if (dataMap.containsKey("sequenceformat")) {
                if (dataMap.get("sequenceformat") != null) {
                    packing.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) dataMap.get("sequenceformat")));
                }
            }

            saveOrUpdate(packing);
            list.add(packing);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePackingDoList : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    /*
        Function to save actual packed row records to database
    */
    @Override
    public KwlReturnObject savePackingDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String packingDetailId = (String) dataMap.get("id");

            PackingDetail packingDetail = new PackingDetail();
            if (!StringUtil.isNullOrEmpty(packingDetailId)) {
                packingDetail = (PackingDetail) get(PackingDetail.class, packingDetailId);
            }

            if (dataMap.containsKey("packingDoList")) {
                Packing packing = dataMap.get("packingDoList") == null ? null : (Packing) get(Packing.class, (String) dataMap.get("packingDoList"));
                packingDetail.setPacking(packing);
            }
            if (dataMap.containsKey("srno")) {
                packingDetail.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("description")) {
                packingDetail.setDescription((String) dataMap.get("description"));
            }
            if (dataMap.containsKey("packageNumber")) {
                packingDetail.setPackageNumber((String) dataMap.get("packageNumber"));
            }
            if (dataMap.containsKey("quantityindo")) {
                packingDetail.setActualQuantity((Double) dataMap.get("quantityindo"));
            }
            if (dataMap.containsKey("packquantity")) {
                packingDetail.setPackingQuantity((Double) dataMap.get("packquantity"));
            }
           
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                packingDetail.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                packingDetail.setCompany(company);
            }

            if (dataMap.containsKey("deliveryorderdetail")) {
                DeliveryOrderDetail deliveryorderdetail = dataMap.get("deliveryorderdetail") == null ? null : (DeliveryOrderDetail) get(DeliveryOrderDetail.class, (String) dataMap.get("deliveryorderdetail"));
                packingDetail.setDodetailid(deliveryorderdetail);
            }

            saveOrUpdate(packingDetail);
            list.add(packingDetail);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePackingDolistDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    /*
        Function to save actual packing detail records to database
    */
    @Override
    public KwlReturnObject savePackingItemDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String packingItemDetailsId = (String) dataMap.get("id");

            ItemDetail itemDetails = new ItemDetail();
            if (!StringUtil.isNullOrEmpty(packingItemDetailsId)) {
                itemDetails = (ItemDetail) get(ItemDetail.class, packingItemDetailsId);
            }

            if (dataMap.containsKey("packingDoList")) {
                Packing packing = dataMap.get("packingDoList") == null ? null : (Packing) get(Packing.class, (String) dataMap.get("packingDoList"));
                itemDetails.setPacking(packing);
            }
            if (dataMap.containsKey("packingDoListDetail")) {
                PackingDetail packingDetail = dataMap.get("packingDoListDetail") == null ? null : (PackingDetail) get(PackingDetail.class, (String) dataMap.get("packingDoListDetail"));
                itemDetails.setPackingdetails(packingDetail);
            }

            if (dataMap.containsKey("packagequantity")) {
                itemDetails.setPackageQuantity((Double) dataMap.get("packagequantity"));
            }

            if (dataMap.containsKey("packageperquantity")) {
                itemDetails.setItemPerPackage((Double) dataMap.get("packageperquantity"));
            }

            if (dataMap.containsKey("grossweight")) {
                itemDetails.setGrossWeight((Double) dataMap.get("grossweight"));
            }
            
            if (dataMap.containsKey("totalpackagequantity")) {
                itemDetails.setTotalItems((Double) dataMap.get("totalpackagequantity"));
            }
           
            if (dataMap.containsKey("packageid")) {
                Packages packages = dataMap.get("packageid") == null ? null : (Packages) get(Packages.class, (String) dataMap.get("packageid"));
                itemDetails.setPackages(packages);
            }
            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                itemDetails.setProduct(product);
            }
            if (dataMap.containsKey("productweight")) {
                itemDetails.setProductWeight((Double) dataMap.get("productweight"));
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                itemDetails.setCompany(company);
            }
            if (dataMap.containsKey("srno")) {//Serial Number of ItemDetail records, this field enumerates the records and uniquely identify them
                itemDetails.setSrno((Integer)dataMap.get("srno"));
            }
            saveOrUpdate(itemDetails);
            list.add(itemDetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("savePackingDoListPackingDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    /**
     * Method to save/update UPS package details; used in UPS Integration functionality
     */
    @Override
    public KwlReturnObject saveOrUpdateUpsPackageDetails(Map<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String id = dataMap.containsKey("id") ? (String) dataMap.get("id") : null;
            UpsPackageDetails upsPackageDetails = null;
            if (!StringUtil.isNullOrEmpty(id)) {
                upsPackageDetails = (UpsPackageDetails) get(UpsPackageDetails.class, id);
            }
            if (upsPackageDetails == null) {
                upsPackageDetails = new UpsPackageDetails();
            }
            
            if (dataMap.containsKey("packingId") && !StringUtil.isNullOrEmpty((String) dataMap.get("packingId"))) {
                Packing packing = (Packing) get(Packing.class, (String) dataMap.get("packingId"));
                upsPackageDetails.setPacking(packing);
            }
            if (dataMap.containsKey("srno")) {
                upsPackageDetails.setSrno((Integer) dataMap.get("srno"));
            }
            if (dataMap.containsKey("packageNumber")) {
                upsPackageDetails.setPackageNumber((String) dataMap.get("packageNumber"));
            }
            if (dataMap.containsKey("packagingType")) {
                upsPackageDetails.setPackagingType((String) dataMap.get("packagingType"));
            }
            if (dataMap.containsKey("packageWeight")) {
                upsPackageDetails.setPackageWeight((Double) dataMap.get("packageWeight"));
            }
            if (dataMap.containsKey("packageDimensions")) {
                upsPackageDetails.setPackageDimensions((String) dataMap.get("packageDimensions"));
            }
            if (dataMap.containsKey("declaredValue")) {
                upsPackageDetails.setDeclaredValue((Double)dataMap.get("declaredValue"));
            }
            if (dataMap.containsKey("deliveryConfirmationType")) {
                upsPackageDetails.setDeliveryConfirmationType((String) dataMap.get("deliveryConfirmationType"));
            }
            if (dataMap.containsKey("additionalHandling")) {
                upsPackageDetails.setAdditionalHandling((String) dataMap.get("additionalHandling"));
            }
            if (dataMap.containsKey("trackingNumber")) {
                upsPackageDetails.setTrackingNumber((String) dataMap.get("trackingNumber"));
            }
            if (dataMap.containsKey("shippingLabel")) {
                upsPackageDetails.setShippingLabel((String) dataMap.get("shippingLabel"));
            }
            saveOrUpdate(upsPackageDetails);
            list.add(upsPackageDetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.saveOrUpdateUpsPackageDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    /**
     * Method to get UPS shipment tracking numbers; used in UPS Integration functionality
     */
    @Override
    public KwlReturnObject getUPSTrackingNumberFromDoDetails(Map<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        StringBuilder sqlQuery = new StringBuilder("select distinct(upspackagedetails.trackingnumber) from upspackagedetails ");
        Map paramsMap = new HashMap<String, Object>();
        if (dataMap.containsKey("deliveryOrdeDetailIDs")) {
            sqlQuery.append(" inner join packing on packing.id = upspackagedetails.packing "
                    + " inner join packingdetails on packingdetails.packinglist = packing.id "
                    + " inner join dodetails on dodetails.id = packingdetails.dodetailid ");
            Set deliveryOrdeDetailIDs = (Set<String>) dataMap.get("deliveryOrdeDetailIDs");
            List doDetailIdsList = new ArrayList(deliveryOrdeDetailIDs);
            paramsMap.put("doDetailIdsList", doDetailIdsList);
            sqlQuery.append(" where dodetails.id in (:doDetailIdsList) ");
        }
        list = executeCollectionSqlQuery(sqlQuery.toString(), paramsMap, null);
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
    /*
        Function to save actual packing DO records to database
    */
    @Override
    public KwlReturnObject savePackingDoDetails(HashMap<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String dodetailsId = (String) dataMap.get("id");

            DoDetails dodetails = new DoDetails();
            if (!StringUtil.isNullOrEmpty(dodetailsId)) {
                dodetails = (DoDetails) get(DoDetails.class, dodetailsId);
            }

            if (dataMap.containsKey("packingDoList")) {
                Packing packing = dataMap.get("packingDoList") == null ? null : (Packing) get(Packing.class, (String) dataMap.get("packingDoList"));
                dodetails.setPacking(packing);
            }
            if (dataMap.containsKey("packingDoListDetail")) {
                PackingDetail packingdetail = dataMap.get("packingDoListDetail") == null ? null : (PackingDetail) get(PackingDetail.class, (String) dataMap.get("packingDoListDetail"));
                dodetails.setPackingDetails(packingdetail);
            }
            if (dataMap.containsKey("quantityindo")) {
                dodetails.setActualQuantity((Double) dataMap.get("quantityindo"));
            }

            if (dataMap.containsKey("packquantity")) {
                dodetails.setPackQuantity((Double) dataMap.get("packquantity"));
            }

            if (dataMap.containsKey("productid")) {
                Product product = dataMap.get("productid") == null ? null : (Product) get(Product.class, (String) dataMap.get("productid"));
                dodetails.setProduct(product);
            }
            if (dataMap.containsKey("companyid")) {
                Company company = dataMap.get("companyid") == null ? null : (Company) get(Company.class, (String) dataMap.get("companyid"));
                dodetails.setCompany(company);
            }

            if (dataMap.containsKey("deliveryorder")) {
                DeliveryOrder deliveryorder = dataMap.get("deliveryorder") == null ? null : (DeliveryOrder) get(DeliveryOrder.class, (String) dataMap.get("deliveryorder"));
                dodetails.setDeliveryOrder(deliveryorder);
            }

            saveOrUpdate(dodetails);
            list.add(dodetails);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("saveShipingDoDetails : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    /*
        Function to delete actual packed records from database
    */
    @Override
    public KwlReturnObject deletePackingPermanent(HashMap<String, Object> requestParams) throws ServiceException {
        String delQuery = "",  delQuery2 = "", delQuery3 = "", delQuery4 = "", delQuery5 = "";
        int numtotal = 0;
        try {
            if (requestParams.containsKey("packId") && requestParams.containsKey("companyid")) {
                int numRows4 = 0,numRows2 = 0,numRows3 = 0,numRows5 = 0;
                ArrayList params1 = new ArrayList();
                params1.add(requestParams.get("companyid"));
                params1.add(requestParams.get("packId"));

                String myquery = "select pdld.id from packingdetails pdld inner join packing pdl on pdld.packinglist=pdl.id where pdl.company = ? and pdl.id=?";
                List list = executeSQLQuery( myquery, params1.toArray());
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    String packingdolistdetailsid = itr.next().toString();
                    ArrayList params2 = new ArrayList();
                    params2.add(requestParams.get("companyid"));
                    params2.add(requestParams.get("packId"));
                    params2.add(requestParams.get("companyid"));
                    params2.add(packingdolistdetailsid);
                    delQuery2 = " delete from packingdodetails where packing in (select id from packing where company =?  and id=?) and packingdetails in (select id from packingdetails where company =?  and id=?) ";
                    numRows2 += executeSQLUpdate( delQuery2, params2.toArray());

                    delQuery3 = " delete from itemdetail where packing in (select id from packing where company =?  and id=?) and packingdetails in (select id from packingdetails where company =?  and id=?) ";
                    numRows3 += executeSQLUpdate( delQuery3, params2.toArray());
                }

                ArrayList params4 = new ArrayList();
                params4.add(requestParams.get("companyid"));
                params4.add(requestParams.get("packId"));
                delQuery4 = " delete from packingdetails where packinglist in (select id from packing where company =?  and id=?) ";
                numRows4 = executeSQLUpdate( delQuery4, params4.toArray());

                ArrayList params5 = new ArrayList();
                params5.add(requestParams.get("companyid"));
                params5.add(requestParams.get("packId"));
                delQuery5 = "delete from packing where company = ? and id=?";
                numRows5 = executeSQLUpdate( delQuery5, params5.toArray());
                
                numtotal = numRows2 + numRows3 + numRows4 +numRows5;
            }

            return new KwlReturnObject(true, "Packing has been deleted successfully.", null, null, numtotal);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("Cannot delete Packing as its referance child field is not deleted.", ex);//+ex.getMessage(), ex);
        }

    }
    /**
     * @Desc Get Shipping data
     * @param reqParams
     * @return
     * @throws ServiceException
     */
    public KwlReturnObject getShippingDO(Map<String, Object> reqParams) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            ArrayList param = new ArrayList();
            String conditionSql = "";
            if (reqParams.containsKey("companyid") && reqParams.get("companyid") != null) {
                param.add((String) reqParams.get("companyid"));
            }
            DateFormat df = (DateFormat) reqParams.get(Constants.df);
            String startDate = (String) reqParams.get(Constants.REQ_startdate);
            String endDate = (String) reqParams.get(Constants.REQ_enddate);
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                try {
//                    conditionSql += " and (sh.shippingDate >=? and sh.shippingDate <=?)";
                    conditionSql += " and (sh.shippingdate >=? and sh.shippingdate <=?)";
                    param.add(df.parse(startDate));
                    param.add(df.parse(endDate));
                } catch (ParseException ex) {
                    Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            if (reqParams.containsKey("customerid")) {
//                conditionSql += " and sh.customer.ID=?";
                conditionSql += " and sh.customer=?";
                param.add(reqParams.get("customerid").toString());

            }
            if (reqParams.containsKey("productid")) {
//                conditionSql += " and shd.product.ID=?";
                conditionSql += " and shd.product=?";
                param.add(reqParams.get("productid").toString());

            }
            String ss = (String) reqParams.get(Constants.ss);
            String searchJoin = "";
            boolean upsIntegrationFlag = false; //Flag to indicate whether or not UPS REST integration is enabled ERP-31339
            if (reqParams.containsKey("upsIntegrationFlag")) {
                upsIntegrationFlag = (boolean) reqParams.get("upsIntegrationFlag");
            }
            if (!StringUtil.isNullOrEmpty(ss)) {
                List<String> searchcolList = new ArrayList<String>(Arrays.asList(new String[]{"sh.shipnumber", "sh.memo", "do.donumber"}));
                if (upsIntegrationFlag) {    //To allow Quick Search on 'Shipment Tracking Number(s)'
                    searchcolList.add("upspackagedetails.trackingnumber");
                }
                Map SearchStringMap = StringUtil.insertParamSearchStringMap(param, ss, searchcolList.size());
                StringUtil.insertParamSearchString(SearchStringMap);
                String searchQuery = StringUtil.getSearchString(ss, "and", searchcolList.toArray(new String[searchcolList.size()]));
                conditionSql += searchQuery;
                searchJoin += " left join dodetails ON shd.dod = dodetails.id "
                            + " inner join deliveryorder do ON do.id = dodetails.deliveryorder ";
                if (upsIntegrationFlag) {    //To allow Quick Search on 'Shipment Tracking Number(s)'
                    searchJoin += " left join packingdetails ON packingdetails.dodetailid = dodetails.id "
                            + " left join packing ON packing.id = packingdetails.packinglist "
                            + " left join upspackagedetails ON upspackagedetails.packing = packing.id ";
                }
            }
//            String query = " select sh From ShippingDeliveryDetail shd inner join shd.shippingDeliveryOrder sh where sh.company.companyID=? " +  conditionSql;
            String query = " select distinct(sh.id) from shippingdelivery sh inner join shippingdeliverydetails shd on shd.shippingdo = sh.id " + searchJoin + " where sh.company=? " + conditionSql;
//            list = executeQuery(query, param.toArray());
            list = executeSQLQuery(query, param.toArray());
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getShippingDO:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, count);
    }

    /**
     * @Desc : Get shipping details
     * @param reqParams
     * @return
     * @throws ServiceException
     */
    public KwlReturnObject getShippingDODetails(Map<String, Object> reqParams) throws ServiceException {
        List param = new ArrayList();
        if (reqParams.containsKey("companyid") && reqParams.get("companyid") != null) {
            param.add((String) reqParams.get("companyid"));
        }
        if (reqParams.containsKey("shippingid") && reqParams.get("shippingid") != null) {
            param.add((String) reqParams.get("shippingid"));
        }
        String query = " From ShippingDeliveryDetail where company.companyID=? and shippingDeliveryOrder.ID=?";
        List list = executeQuery(query, param.toArray());
        return new KwlReturnObject(true, null, null, list, list.size());
    }
    
  /*----Return true if Invoice is not linked with any GR----*/
    public List isInvoiceNotLinkedWithAnyDo(Invoice invoice) throws ServiceException {
        ArrayList paramslist = new ArrayList();
        List list = new ArrayList();
        List returnList = new ArrayList();
        int pendingDOCount = 0;
        boolean isNotLinkedWithAnyDO = true;
        boolean isLinkedWithDOPartially = false;
        boolean isAnyDOIsInPendingState = false;
        try {
            String selQuery = "from InvoiceLinking invl  WHERE invl.DocID.ID = ? ";
            paramslist.add(invoice.getID());
            list = executeQuery(selQuery, paramslist.toArray());
            if (list.size() > 0) {               
                Iterator itr = list.iterator();
                while (itr.hasNext()) {
                    InvoiceLinking invlinking = (InvoiceLinking) itr.next();
                    if (invlinking.getSourceFlag() == 0 && invlinking.getModuleID()==Constants.Acc_Delivery_Order_ModuleId) {//Invoice->DO linking
                        isNotLinkedWithAnyDO = false;
                        DeliveryOrder deliveryOrder = (DeliveryOrder) get(DeliveryOrder.class, invlinking.getLinkedDocID());
                        if (deliveryOrder.getApprovestatuslevel() != 11 && list.size() > 1) {
                           isLinkedWithDOPartially=true;
                           isAnyDOIsInPendingState=true;
                            pendingDOCount++;

                        } else if (list.size() == 1 && deliveryOrder.getApprovestatuslevel() != 11) {
                            isNotLinkedWithAnyDO = true;
                            isAnyDOIsInPendingState=true;
                            break;
                        }
                    }
                }
                /* -----If all GR linked with PI (i.e PI->GR ) are in Pending state-------*/
                if (list.size() > 1 && list.size() == pendingDOCount) {
                    isLinkedWithDOPartially = false;
                    isNotLinkedWithAnyDO = true;
                }

            }
            returnList.add(isNotLinkedWithAnyDO);
            returnList.add(isLinkedWithDOPartially);
            returnList.add(isAnyDOIsInPendingState);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return returnList;
    }

    
    /*----Return true if linking like GR->PI----*/
    public boolean isLinkingOfDOInSI(Invoice invoice) throws ServiceException {
        ArrayList paramslist = new ArrayList();
        List list = new ArrayList();

        boolean isLinkingOfDOInSI = false;
        try {
            String selQuery = "from InvoiceLinking invl  WHERE invl.DocID.ID = ?  and invl.SourceFlag=1 and invl.ModuleID=?";
            paramslist.add(invoice.getID());
            paramslist.add(Constants.Acc_Delivery_Order_ModuleId);
            list = executeQuery(selQuery, paramslist.toArray());
            if (list.size() > 0) {
                isLinkingOfDOInSI = true;
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return isLinkingOfDOInSI;
    }
     public KwlReturnObject getSalesReturnDetails(String salesReturnId) throws ServiceException {
        int count = 0;
        List returnlist = new ArrayList();
        ArrayList params = new ArrayList();
        String query = "from SalesReturnDetail where salesReturn.ID=? order by srno asc";
        params.add(salesReturnId);
        returnlist = executeQuery(query, params.toArray());
        if (returnlist != null && returnlist.size() > 0) {
            count = returnlist.size();
        }
        return new KwlReturnObject(true, "", null, returnlist, count);
    }
     
     public KwlReturnObject getCheckListSOSQL(Map<String, Object> reqParams) {
        List param = new ArrayList();

        param.add((String) reqParams.get("companyId"));
        param.add((Date) reqParams.get("startdate"));
        param.add((Date) reqParams.get("enddate"));

        String selectQuery = "SELECT"
                + "	purchaseorder.ponumber,"
                + "	salesorder.sonumber,"
                + "	sodetails.id,"
                + "	invoice.invoicenumber,"
                + "	deliveryorder.donumber,"
                + "	product. NAME,"
                + "	product.productid,"
                + "	sodetails.quantity,"
                + "	dodetails.deliveredquantity,"
                + "	sodetails.rate,"
                + "	salesorder.shipdate,"
                + "	deliveryorder.orderdate as 'dodate', "
                + "     salesorder.duedate,"
                + "     podetails.quantity, "
                + "salesorder.memo, "
                + "customer.name as 'cName', "
                + "customer.acccode ,";
        
                String fromAndJoinQuery= "FROM "
                + "sodetails "
                + "LEFT JOIN invoicedetails ON invoicedetails.salesorderdetail = sodetails.id "
                + "LEFT JOIN dodetails ON dodetails.cidetails = invoicedetails.id "
                + "OR dodetails.sodetails = sodetails.id "
                + "LEFT JOIN salesorder ON salesorder.id = sodetails.salesorder "
                + "LEFT JOIN invoice ON invoice.id = invoicedetails.invoice "
                + "LEFT JOIN deliveryorder ON deliveryorder.id = dodetails.deliveryorder "
                + "LEFT JOIN podetails ON podetails.id = sodetails.purchaseorderdetailid "
                + "LEFT JOIN purchaseorder ON purchaseorder.id = podetails.purchaseorder "
                + "LEFT JOIN product ON product.id = sodetails.product "
                + "LEFT JOIN customer on customer.id = salesorder.customer ";
               
                String whereQuery="WHERE sodetails.company = ? and (salesorder.orderdate between ? and ?) ";
                
                if(reqParams.containsKey("isSerialPresent") && !StringUtil.isNullOrEmpty(reqParams.get(Constants.Colnum).toString()) && Boolean.parseBoolean(reqParams.get("isSerialPresent").toString())){
                    selectQuery = selectQuery+ "salesordercustomdata."+reqParams.get(Constants.Colnum)+" ";
                   fromAndJoinQuery=fromAndJoinQuery + "LEFT JOIN salesordercustomdata on salesordercustomdata.soID= salesorder.id ";
                    
                }

        String filterQuery = " ";
        if (!StringUtil.isNullOrEmpty((String) reqParams.get("newcustomerid"))) {
            param.add(reqParams.get("newcustomerid"));
            filterQuery = " and salesorder.customer = ?";
}
        String orderByQuery = " order by sodetails.id,salesorder.duedate,deliveryorder.orderdate ;";

        String finalQuery = selectQuery+fromAndJoinQuery + whereQuery +filterQuery + orderByQuery;
        List list = null;
        try {
            list = executeSQLQuery(finalQuery, param.toArray());
        } catch (ServiceException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }
     
      @Override
    public KwlReturnObject getClosedQtyForLoan(String companyId) throws ServiceException {
         ArrayList params = new ArrayList();
         String selQuery = " SELECT dod.id ,d.donumber,p.productid,dod.baseuomquantity AS doquantity,srdtl.returnqty, "
                 + " (dod.baseuomquantity-IFNULL(srdtl.returnqty,0)) AS closedqty FROM dodetails dod INNER JOIN deliveryorder d "
                 + " ON d.id=dod.deliveryorder INNER JOIN product p ON p.id=dod.product LEFT JOIN (SELECT srd.dodetails,SUM(baseuomquantity) AS returnqty,"
                 + " srd.product FROM srdetails srd WHERE company=? GROUP BY dodetails,product) AS srdtl ON srdtl.dodetails=dod.id AND srdtl.product=p.id "
                 + " WHERE (islineitemclosed='T' OR d.isdoclosed='T') AND d.company=? group by dod.id";
         params.add(companyId);
         params.add(companyId);
        List list = executeSQLQuery( selQuery, params.toArray());
        
        return new KwlReturnObject(true, "", null, list, list.size());
    }
    
    /**
     *
     * @param requestParams
     * @return InvoiceLinking list
     * @throws ServiceException
     */
    @Override
    public List<InvoiceLinking> getInvoiceLinkingDataToValidateLinkingInfo(Map<String, Object> requestParams) throws ServiceException {
        List<InvoiceLinking> list = null;
        try {
            ArrayList params = new ArrayList();
            String condition = "";
            if (requestParams.containsKey(Constants.moduleid) && requestParams.get(Constants.moduleid) != null) {
                condition += " AND invl.ModuleID = ? ";
                params.add(requestParams.get(Constants.moduleid));
            }
            if (requestParams.containsKey(Constants.companyKey) && requestParams.get(Constants.companyKey) != null) {
                condition += " AND invl.DocID.company.companyID = ? ";
                params.add(requestParams.get(Constants.companyKey));
            }
            String query = " SELECT invl FROM InvoiceLinking invl WHERE invl.SourceFlag = 0 " + condition;
            list = executeQuery(query, params.toArray());
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getInvoiceLinkingDataToValidateLinkingInfo : " + ex.getMessage(), ex);
        }
        return list;
    }
    /**
     * @Desc : Update memo for IST request at a time of DO creation
     * @param memo
     * @param doid
     * @param companyid
     */
    @Override
    public void updateMemoForIST(String memo, String doid, String companyid) {
        try {
            String sqlQuery = "update dodqcistmapping dodqcm inner join dodetails dod on dod.id = dodqcm.dodetailid inner join deliveryorder do on do.id = dod.deliveryorder inner join in_interstoretransfer ist on ist.id = dodqcm.qcistrequest set ist.memo = ? where do.company = ? and do.id = ?";
            executeSQLUpdate(sqlQuery, new Object[]{memo, companyid, doid});
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
    }
    
    /**
     * Method to get DeliveryDetailInterStoreLocationMapping List.
     *
     * @param params
     * @return List<DeliveryDetailInterStoreLocationMapping>
     * @throws ServiceException
     */
    @Override
    public List getDeliveryDetailInterStoreLocationMappingList(JSONObject params) throws ServiceException {
        StringBuilder hql = new StringBuilder();
        List parameters = new ArrayList();
        List<DeliveryDetailInterStoreLocationMapping> list = new ArrayList<>();
        hql.append("select dodm from DeliveryDetailInterStoreLocationMapping dodm ");
        if (!StringUtil.isNullOrEmpty(params.optString("dodetailid"))) {
            hql.append(" where dodm.deliveryOrderDetail = ? ");
            parameters.add(params.optString("dodetailid"));
        }
        if (params.optBoolean("transactionUsingQC", false)) {
            if (hql.indexOf("where") >= 0) {
                hql.append(" and ");
            } else {
                hql.append(" where ");
            }
            hql.append(" (dodqcistmapping is not null or pickRejectedDODQCISTMapping is not null) ");
        }
       list = executeQuery(hql.toString(), parameters.toArray());
        return list;
    }
    
    /**
     * Check if a single DO or all DOs have been partially or completely packed/shipped in the company and get its quantity 
     * @param requestParams  insert only companyid to check for all the DO's in the company or add a doid for a specific do 
     * @return JSONArray
     * @throws ServiceException 
     * 
     */
    @Override
    public JSONArray getDOPackedShippedQty(Map<String, String> requestParams) throws ServiceException {
        HashMap<String, Object> packshipdoqty = new HashMap<>();
        ArrayList params = new ArrayList();
        String doid = null;boolean checkpartialpacked=false;
        boolean issavepacking = false;        
        if(requestParams.containsKey("issavepacking") && requestParams.get("issavepacking") != null){
            issavepacking = Boolean.parseBoolean(requestParams.get("issavepacking"));
        }
        String columns = "dor.id,dd.product,dd.actualquantity,sum(pd.packingquantity),sum(sd.shipqty)";        
        if(issavepacking){
             columns = "dor.id,dd.actualquantity,sum(pd.packingquantity),sum(sd.shipqty)";             
        }
       StringBuilder packshipquery = new StringBuilder("Select " + columns + "  FROM dodetails dd "
               + " INNER JOIN deliveryorder dor on dor.id = dd.deliveryorder "
               + " INNER JOIN product p on dd.product=p.id "
               + " LEFT JOIN packingdetails pd on dd.id=pd.dodetailid "
               + " LEFT JOIN shippingdeliverydetails sd on dd.id=sd.dod  "
               + " WHERE dor.company = ? and p.producttype <> ? and p.producttype <> ?");
        JSONArray jarr = new JSONArray();
        try {
            String companyid = requestParams.get("companyid") != null ? (String) requestParams.get("companyid") : "";
            params.add(companyid);
            params.add(Constants.SERVICE);
            params.add(Constants.NON_INVENTORY_PART);

            if (requestParams.containsKey("doid")) {
                doid = requestParams.get("doid") != null ? (String) requestParams.get("doid") : "";
                packshipquery.append("AND dor.id = ?");
                params.add(doid);
            }
            /**
             * This field is for checking if a DO has been partially packed or shipped so packing/shipping qty > 0 condition is added.
             */
            if (requestParams.containsKey("checkpartialpacked")) {
                checkpartialpacked = requestParams.get("checkpartialpacked") != null ? Boolean.parseBoolean(requestParams.get("checkpartialpacked")) :false;
                if (checkpartialpacked) {
                    packshipquery.append(" AND (pd.packingquantity>0 OR sd.shipqty>0)");
                }
            }
            if(issavepacking){
                packshipquery.append(" GROUP BY dor.id");
            }else{
                packshipquery.append(" GROUP BY product,dor.id");
            }            
            List list = executeSQLQuery(packshipquery.toString(), params.toArray());
            Iterator rs = list.iterator();

                while (rs.hasNext()) {
                    JSONObject jobj = new JSONObject();
                    Object[] Obj = (Object[]) rs.next();
                    String doidrs,actualqty,packingqty,shippingqty, product = "";
                    if (issavepacking) {
                        doidrs = Obj[0] == null ? "" : Obj[0].toString();
                        actualqty = Obj[1] == null ? "" : Obj[1].toString();
                        packingqty = Obj[2] == null ? "" : Obj[2].toString();
                        shippingqty = Obj[3] == null ? "" : Obj[3].toString();
                    } else {
                        doidrs = Obj[0] == null ? "" : Obj[0].toString();
                        product = Obj[1] == null ? "" : Obj[1].toString();
                        actualqty = Obj[2] == null ? "" : Obj[2].toString();
                        packingqty = Obj[3] == null ? "" : Obj[3].toString();
                        shippingqty = Obj[4] == null ? "" : Obj[4].toString();
                    }
                    jobj.put("doid", doidrs);
                    jobj.put("product", product);
                    jobj.put("actualqty", actualqty);
                    jobj.put("packedqty", packingqty);
                    jobj.put("shippedqty", shippingqty);
                    jarr.put(jobj);
                }
            list = null;
            rs = null;
            packshipquery = null; //dereferencing
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDOpackedShippedQty : " +ex.getMessage(), ex);
        }
        return jarr;
    }

    /**
     * Get the total packed quantity for a DO to check during packing whether
     * any quantity is already packed
     * @param dodetailid to get a specific DO's packed quantity pass dodetailid
     *
     */
    @Override
    public double getDOPackedQuantity(String dodetailid) throws ServiceException {
        String query = "";
        double shipqty = 0;
        double packedqty = 0;
        ArrayList params = new ArrayList();
        try {

            query = " SELECT SUM(packingquantity) from packingdetails "
                    + " where dodetailid = ?";
            params.add(dodetailid);
            List list = executeSQLQuery(query, params.toArray());
            Iterator rs = list.iterator();

            while (rs.hasNext()) {
                Object Obj = (Object) rs.next();
                packedqty = Double.parseDouble(Obj == null ? "0" : Obj.toString());
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDOpackedQty: " +ex.getMessage(), ex);
        }

        return packedqty;

    }
     @Override 
    public void closeDeliveryDetailsOrdersPermanent(String DetailId, String company) throws ServiceException {
        if (!StringUtil.isNullOrEmpty(DetailId)) {
            String billId = DetailId;
            String companyId = company;
            try {
//                String query = " update deliveryorder set isdoclosed=? where id=? and company=? ";
//                int numRows = executeSQLUpdate( query, new Object[]{'T', billId, company});
                
                // Stock Out closed serials 
                
                String updateDodetails = " UPDATE dodetails dt "
                        + " INNER JOIN serialdocumentmapping lcm ON lcm.documentid=dt.id "
                        + " INNER JOIN newbatchserial sr ON sr.id=lcm.serialid "
                        + " INNER JOIN newproductbatch nb ON nb.id=sr.batch"
                        + " SET sr.quantitydue=0"
                        + " WHERE dt.company=? AND dt.id=?  AND nb.location IS NULL ";
                
                   int numRows = executeSQLUpdate( updateDodetails, new Object[]{companyId, billId});

            } catch (Exception ex) {
                throw ServiceException.FAILURE("updatePreviousIssue" + ex.getMessage(), ex);
            }
        }
    }   

    
    public List getInvoiceKnockOffTransactions(Map<String, Object> requestParams) throws ServiceException{
        List ll = null;
        try {
            String companyid = (String) requestParams.get(Constants.companyKey);
            String customerid = (String) requestParams.get("custVendorID");
            boolean isAgedDetailsReport = requestParams.containsKey("isAgedDetailsReport") ? (Boolean)requestParams.get("isAgedDetailsReport"): false;
            boolean isSalesPersonAgedReport = requestParams.containsKey("isSalesPersonAgedReport") ? (Boolean)requestParams.get("isSalesPersonAgedReport"): false;
            
            int datefilter = requestParams.containsKey("datefilter") && requestParams.get("datefilter") != null ? Integer.parseInt(requestParams.get("datefilter").toString()) : 0;
            String custQuery = "";
            boolean includeExcludeChildCmb=false;
            if (requestParams.containsKey("includeExcludeChildCmb") && requestParams.get("includeExcludeChildCmb") != null) {
                includeExcludeChildCmb = (Boolean) requestParams.get("includeExcludeChildCmb");
            }
            if (!StringUtil.isNullOrEmpty(customerid) && !customerid.equals("All")) {
                String[] customers = customerid.split(",");
                StringBuilder custValues = new StringBuilder();
                for (String customer : customers) {
                    custValues.append("'").append(customer).append("',");
                }
                String custStr = custValues.substring(0, custValues.lastIndexOf(","));
                if (isSalesPersonAgedReport) {
                    custQuery += " and masteritem.id IN (" + custStr + ")";
                } else if (includeExcludeChildCmb) {
                    custQuery += " and (customer.id IN (" + custStr + ") or customer.parent IN (" + custStr + "))";
                } else {
                    custQuery += " and customer.id IN (" + custStr + ")";
                }
            }else if(!includeExcludeChildCmb){
                custQuery += " and customer.parent is  null";
            }
            DateFormat origdf = authHandler.getDateOnlyFormat();
            String duedateStr = (String)requestParams.get("enddate");
            String asofdateStr= (requestParams.containsKey("asofdate") && requestParams.get("asofdate") != null) ? (String) requestParams.get("asofdate") : duedateStr;
            Date duedate = origdf.parse(duedateStr);
            Date asofdate = origdf.parse(asofdateStr);
            DateFormat mysqldf = new SimpleDateFormat("yyyy-MM-dd");
            duedateStr = mysqldf.format(duedate);
            ArrayList paramsAdvSearch = new ArrayList();
            ArrayList paramsAdvSearch1= new ArrayList();
            JSONObject advSearchQueryObj = getAdvanceSearchForCustomQuery(requestParams, paramsAdvSearch1, paramsAdvSearch, "");            
            String jeid = " jedetail.id = invoice.centry";
            if(advSearchQueryObj.has("jeid") && !StringUtil.isNullOrEmpty(advSearchQueryObj.getString("jeid"))){
                jeid= advSearchQueryObj.getString("jeid");
            }
            String joinString1 = advSearchQueryObj.getString("joinString1");
            String mySearchFilterString = custQuery +advSearchQueryObj.getString("mySearchFilterString");
            ArrayList params = new ArrayList();
            params.add(companyid);
            params.add(duedate);
            params.add(asofdate);
            params.addAll(paramsAdvSearch);

            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(asofdate);
            params.addAll(paramsAdvSearch);

            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(asofdate);
            params.addAll(paramsAdvSearch);

            params.add(asofdate);
//            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(asofdate);
            params.addAll(paramsAdvSearch);

            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(asofdate);
            
            String conditionSQL="";
            if (requestParams.containsKey("groupcombo") && requestParams.get("groupcombo") != null && requestParams.containsKey(Constants.globalCurrencyKey) && requestParams.get(Constants.globalCurrencyKey) != null) {
                int groupcombo = (Integer) requestParams.get("groupcombo");
                if (groupcombo == Constants.AgedPayableBaseCurrency) {
                    conditionSQL += " where a.invcurr=" + Integer.parseInt((String) requestParams.get(Constants.globalCurrencyKey));
                } else if (groupcombo == Constants.AgedPayableOtherthanBaseCurrency) {
                    conditionSQL += " where a.invcurr!=" + Integer.parseInt((String) requestParams.get(Constants.globalCurrencyKey));
                }
            }
            
            String salesPerosnJoinType = "left join";
            if (isSalesPersonAgedReport) {
                salesPerosnJoinType = "inner join";
            } 
//            String sql = "Select a.invid,a.invoiceamount,"+(isAgedDetailsReport?" a.invoiceamountinbase":"AVG(a.invoiceamountinbase)")+", a.withoutinventory, a.createdon , a.entrydate, "+(isAgedDetailsReport?" a.koamount, a.koamountinbase" : " SUM(a.koamount), SUM(a.koamountinbase)")+", a.openinginv,a.company, a.companyname,a.custid,a.custname,a.termname,a.aliasname,a.invoicenumber,a.invcurr,a.invcurrsymbol,a.invcurrname,a.externalcurrrrate,a.exchangerate,a.invdate,a.shipdate,a.duedate,a.custcode,a.custcurrency,a.entryno\n"
//            String sql = "Select a.invid,a.invoiceamount,"+(isAgedDetailsReport?" a.invoiceamountinbase":"AVG(a.invoiceamountinbase)")+", a.withoutinventory, a.createdon , a.entrydate, SUM(a.koamount), SUM(a.koamountinbase), a.openinginv,a.company, a.companyname,a.custid,a.custname,a.termname,a.aliasname,a.invoicenumber,a.invcurr,a.invcurrsymbol,a.invcurrname,a.externalcurrrrate,a.exchangerate,a.invdate,a.shipdate,a.duedate,a.custcode,a.custcurrency,a.entryno,a.salespersonname,a.memo,a.salespersoncode,a.salespersonid \n"
            String sql = "Select a.invid,a.invoiceamount,"+(isAgedDetailsReport?" a.invoiceamountinbase":"AVG(a.invoiceamountinbase)")+", a.withoutinventory, a.createdon , a.creationdate, SUM(a.koamount), SUM(a.koamountinbase), a.openinginv,a.company, a.companyname,a.custid,a.custname,a.termname,a.aliasname,a.invoicenumber,a.invcurr,a.invcurrsymbol,a.invcurrname,a.externalcurrrrate,a.exchangerate,a.invdate,a.shipdate,a.duedate,a.custcode,a.custcurrency,a.entryno,a.salespersonname,a.memo,a.salespersoncode,a.salespersonid,a.invoiceTerm,a.creditlimit,a.custcreatedon, a.journalentryid  \n"
                    + " from ("
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , journalentry.entrydate, 0 as koamount, 0 as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid from invoice   \n"
                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, 0 as koamount, 0 as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invTerm.termname as invoiceTerm,customer.creditlimit as creditlimit,customer.createdon as custcreatedon, journalentry.id as journalentryid,invoice.id as detailid   from invoice   \n"
                    + "inner join journalentry on invoice.journalentry = journalentry.id  \n"
                    + "inner join jedetail on "+jeid+" \n"
                    + "inner join account on account.id = jedetail.account  \n"
                    + "inner join customer on customer.id = invoice.customer  \n"
                    +  salesPerosnJoinType +" masteritem on masteritem.id = invoice.mastersalesperson  \n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join compaccpreferences on compaccpreferences.id=company.companyid\n"
                    + "inner join creditterm term on customer.creditterm = term.termid\n"
                    + "inner join currency invcurrency on invoice.currency=invcurrency.currencyid\n"
                    + "inner join currency compcurrency on company.currency=compcurrency.currencyid\n"
                    + "left join customercategorymapping on customercategorymapping.customerid = customer.id \n"
                    + "left join costcenter on costcenter.id = journalentry.costcenter   \n"
                    + "inner join creditterm invTerm on invTerm.termid = invoice.termid \n"
                    +joinString1
//                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and journalentry.entrydate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n" 
                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and invoice.creationdate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n" 
                    + "and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0))\n"
                    + " or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) \n"
                    + " and (invoice.amountduedate>? or invoice.amountduedate is null)) )\n"
//                    + " and invoiceamount= invoiceamountdue \n"
                    + mySearchFilterString
                    + " UNION "
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , journalentry.entrydate, discount.amountinInvCurrency as koamount, ROUND(discount.amountinInvCurrency/COALESCE(if(journalentry.externalcurrencyrate=0,erd.exchangerate,journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal)  as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid from invoice   \n"
                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, discount.amountinInvCurrency as koamount, ROUND(discount.amountinInvCurrency/COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal)  as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invTerm.termname as invoiceTerm,customer.creditlimit as creditlimit,customer.createdon as custcreatedon, journalentry.id as journalentryid,cnd.id as detailid from invoice   \n"
                    + "inner join journalentry on invoice.journalentry = journalentry.id  \n"
                    + "inner join jedetail on "+jeid+" \n"
                    + "inner join account on account.id = jedetail.account  \n"
                    + "inner join customer on customer.id = invoice.customer  \n"
                    +  salesPerosnJoinType +" masteritem on masteritem.id = invoice.mastersalesperson  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = customer.id  \n"
                    + "left join costcenter on costcenter.id = journalentry.costcenter   \n"
                    + "inner join cndetails cnd on cnd.invoice=invoice.id and cnd.company=invoice.company and cnd.invoicelinkdate<=?\n"
                    + "inner join discount on discount.id=cnd.discount \n"
                    + "inner join creditnote cn on cn.id=cnd.creditnote and cn.deleteflag='F' \n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join compaccpreferences on compaccpreferences.id=company.companyid\n"
                    + "inner join creditterm term on customer.creditterm = term.termid\n"
                    + "inner join currency invcurrency on invoice.currency=invcurrency.currencyid\n"
                    + "inner join currency compcurrency on company.currency=compcurrency.currencyid\n"
                    + "inner join creditterm invTerm on invTerm.termid = invoice.termid \n"
                    +joinString1
//                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and journalentry.entrydate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and invoice.creationdate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0))\n"
                    + " or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) \n"
                    + " and (invoice.amountduedate>? or invoice.amountduedate is null)) )\n"
                    + mySearchFilterString
                    + "\n"                    
                    + "UNION\n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , journalentry.entrydate, ldr.amountininvoicecurrency as koamount, ROUND(ldr.amountininvoicecurrency/COALESCE(if(journalentry.externalcurrencyrate=0,erd.exchangerate,journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname, invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid from invoice   \n"
                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, ldr.amountininvoicecurrency as koamount, ROUND(ldr.amountininvoicecurrency/COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname, invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invTerm.termname as invoiceTerm,customer.creditlimit as creditlimit,customer.createdon as custcreatedon, journalentry.id as journalentryid,ldr.id as detailid from invoice   \n"
                    + "inner join journalentry on invoice.journalentry = journalentry.id  \n"
                    + "inner join jedetail on "+jeid+" \n"
                    + "inner join account on account.id = jedetail.account  \n"
                    + "inner join customer on customer.id = invoice.customer  \n"
                    +  salesPerosnJoinType +" masteritem on masteritem.id = invoice.mastersalesperson  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = customer.id  \n"
                    + "left join costcenter on costcenter.id = journalentry.costcenter   \n"
                    + "inner join linkdetailreceipt ldr on ldr.invoice=invoice.id and ldr.company=invoice.company and ldr.receiptLinkDate<=?\n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join compaccpreferences on compaccpreferences.id=company.companyid\n"
                    + "inner join creditterm term on customer.creditterm = term.termid\n"
                    + "inner join currency invcurrency on invoice.currency=invcurrency.currencyid\n"
                    + "inner join currency compcurrency on company.currency=compcurrency.currencyid\n"
                    + "inner join creditterm invTerm on invTerm.termid = invoice.termid \n" 
                    +joinString1
//                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and journalentry.entrydate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and invoice.creationdate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0))\n"
                    + " or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) \n"
                    + " and (invoice.amountduedate>? or invoice.amountduedate is null)) )\n"
                    + mySearchFilterString
                    + "\n"                    
                    + "UNION\n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, rje.createdon , rje.entrydate, rd.amountininvoicecurrency as koamount, ROUND((case when rd.fromcurrency is not null and rd.tocurrency is not null then (rd.amount/rd.exchangeratefortransaction) else rd.amountininvoicecurrency end) /COALESCE(if(journalentry.externalcurrencyrate=0,erd.exchangerate,journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname, invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid from invoice   \n"
                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, rje.createdon , receipt.creationdate, rd.amountininvoicecurrency as koamount, ROUND((case when rd.fromcurrency is not null and rd.tocurrency is not null then (rd.amount/rd.exchangeratefortransaction) else rd.amountininvoicecurrency end) /COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname, invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invTerm.termname as invoiceTerm,customer.creditlimit as creditlimit,customer.createdon as custcreatedon, journalentry.id as journalentryid,rd.id as detailid from invoice   \n"
                    + "inner join journalentry on invoice.journalentry = journalentry.id  \n"
                    + "inner join jedetail on "+jeid+" \n"
                    + "inner join account on account.id = jedetail.account  \n"
                    + "inner join customer on customer.id = invoice.customer  \n"
                    +  salesPerosnJoinType +" masteritem on masteritem.id = invoice.mastersalesperson  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = customer.id  \n"
                    + "left join costcenter on costcenter.id = journalentry.costcenter   \n"
                    + "inner join receiptdetails rd on rd.invoice=invoice.id and rd.company=invoice.company  \n"
                    + "inner join receipt on rd.receipt=receipt.id and receipt.isdishonouredcheque='F' and receipt.approvestatuslevel=11 and receipt.deleteflag='F' \n"
//                    + "inner join journalentry rje on receipt.journalentry=rje.id and (receipt.creationdate<=? or rje.entryDate<=?) \n"
                    + "inner join journalentry rje on receipt.journalentry=rje.id and (receipt.creationdate<=?) \n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join compaccpreferences on compaccpreferences.id=company.companyid\n"
                    + "inner join creditterm term on customer.creditterm = term.termid\n"
                    + "inner join currency invcurrency on invoice.currency=invcurrency.currencyid\n"
                    + "inner join currency compcurrency on company.currency=compcurrency.currencyid\n"
                    + "inner join creditterm invTerm on invTerm.termid = invoice.termid \n"
                    +joinString1
//                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and journalentry.entrydate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and receipt.creationdate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0))\n"
                    + " or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) \n"
                    + " and (invoice.amountduedate>? or invoice.amountduedate is null)) )\n"
                    + mySearchFilterString
                    + "\n"
                    + "UNION \n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , journalentry.entrydate, iwo.writtenoffamountininvoicecurrency as koamount, ROUND(iwo.writtenoffamountininvoicecurrency/COALESCE(if(journalentry.externalcurrencyrate=0,erd.exchangerate,journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid from invoice   \n"
                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, iwo.writtenoffamountininvoicecurrency as koamount, ROUND(iwo.writtenoffamountininvoicecurrency/COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invTerm.termname as invoiceTerm,customer.creditlimit as creditlimit,customer.createdon as custcreatedon, journalentry.id as journalentryid,iwo.id as detailid from invoice   \n"
                    + "inner join journalentry on invoice.journalentry = journalentry.id  \n"
                    + "inner join jedetail on "+jeid+" \n"
                    + "inner join account on account.id = jedetail.account  \n"
                    + "inner join customer on customer.id = invoice.customer  \n"
                    +  salesPerosnJoinType +" masteritem on masteritem.id = invoice.mastersalesperson  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = customer.id  \n"
                    + "left join costcenter on costcenter.id = journalentry.costcenter   \n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join compaccpreferences on compaccpreferences.id=company.companyid\n"
                    + "inner join creditterm term on customer.creditterm = term.termid\n"
                    + "inner join currency invcurrency on invoice.currency=invcurrency.currencyid\n"
                    + "inner join currency compcurrency on company.currency=compcurrency.currencyid\n"
                    + "inner join invoicewriteoff iwo on iwo.invoice=invoice.id and iwo.company=invoice.company and iwo.isrecovered='F' and iwo.writeoffdate<=?  \n"
                    + "inner join creditterm invTerm on invTerm.termid = invoice.termid \n"
                    +joinString1
//                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and journalentry.entrydate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and invoice.creationdate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0))\n"
                    + " or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) \n"
                    + " and (invoice.amountduedate>? or invoice.amountduedate is null)) )\n"
                    + ") a "
                    + conditionSQL
//                    + (isAgedDetailsReport ? " group by a.entryno":"group by a.invid") +" order by a.entrydate desc";
                    + (isAgedDetailsReport ? " group by a.entryno":"group by a.invid") +" order by a.creationdate desc";
            ll = executeSQLQuery(sql, params.toArray());
        } catch (Exception ex) {
            ex.printStackTrace();
            throw ServiceException.FAILURE("error", ex);
        }
        return ll;
    }
    
    public List getInvoiceKnockOffTransactions_Optimize(Map<String, Object> requestParams) throws ServiceException{
        List ll = null;
        try {
            String companyid = (String) requestParams.get(Constants.companyKey);
            String customerid = (String) requestParams.get("custVendorID");
            boolean isAgedDetailsReport = requestParams.containsKey("isAgedDetailsReport") ? (Boolean)requestParams.get("isAgedDetailsReport"): false;
            boolean isSalesPersonAgedReport = requestParams.containsKey("isSalesPersonAgedReport") ? (Boolean)requestParams.get("isSalesPersonAgedReport"): false;
            
            int datefilter = requestParams.containsKey("datefilter") && requestParams.get("datefilter") != null ? Integer.parseInt(requestParams.get("datefilter").toString()) : 0;
            String custQuery = "";
            boolean includeExcludeChildCmb=false;
            if (requestParams.containsKey("includeExcludeChildCmb") && requestParams.get("includeExcludeChildCmb") != null) {
                includeExcludeChildCmb = (Boolean) requestParams.get("includeExcludeChildCmb");
            }
            if (!StringUtil.isNullOrEmpty(customerid) && !customerid.equals("All")) {
                String[] customers = customerid.split(",");
                StringBuilder custValues = new StringBuilder();
                for (String customer : customers) {
                    custValues.append("'").append(customer).append("',");
                }
                String custStr = custValues.substring(0, custValues.lastIndexOf(","));
                if (isSalesPersonAgedReport) {
                    custQuery += " and masteritem.id IN (" + custStr + ")";
                } else if (includeExcludeChildCmb) {
                    custQuery += " and (customer.id IN (" + custStr + ") or customer.parent IN (" + custStr + "))";
                } else {
                    custQuery += " and customer.id IN (" + custStr + ")";
                }
            }else if(!includeExcludeChildCmb){
                custQuery += " and customer.parent is  null";
            }
            DateFormat origdf = authHandler.getDateOnlyFormat();
            String duedateStr = (String)requestParams.get("enddate");
            String asofdateStr= (requestParams.containsKey("asofdate") && requestParams.get("asofdate") != null) ? (String) requestParams.get("asofdate") : duedateStr;
            Date duedate = origdf.parse(duedateStr);
            Date asofdate = origdf.parse(asofdateStr);
            DateFormat mysqldf = new SimpleDateFormat("yyyy-MM-dd");
            duedateStr = mysqldf.format(duedate);
            ArrayList paramsAdvSearch = new ArrayList();
            ArrayList paramsAdvSearch1= new ArrayList();
            requestParams.remove("isOpeningBalanceInvoices");
            JSONObject advSearchQueryObj = getAdvanceSearchForCustomQuery(requestParams, paramsAdvSearch1, paramsAdvSearch, "");            
            String jeid = " jedetail.id = invoice.centry";
            if(advSearchQueryObj.has("jeid") && !StringUtil.isNullOrEmpty(advSearchQueryObj.getString("jeid"))){
                jeid= advSearchQueryObj.getString("jeid");
            }
            String joinString1 = advSearchQueryObj.getString("joinString1");
            String mySearchFilterString = custQuery +advSearchQueryObj.getString("mySearchFilterString");
            ArrayList params = new ArrayList();
            params.add(companyid);
            params.add(duedate);
            params.add(asofdate);
            params.addAll(paramsAdvSearch);

            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(asofdate);
            
            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(asofdate);
            
            params.add(asofdate);
//            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(asofdate);
            
            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(asofdate);
            
            String conditionSQL="";            
            if (requestParams.containsKey("groupcombo") && requestParams.get("groupcombo") != null && requestParams.containsKey(Constants.globalCurrencyKey) && requestParams.get(Constants.globalCurrencyKey) != null) {
                int groupcombo = (Integer) requestParams.get("groupcombo");
                if (groupcombo == Constants.AgedPayableBaseCurrency) {
                    conditionSQL += " where a.invcurr=" + Integer.parseInt((String) requestParams.get(Constants.globalCurrencyKey));
                } else if (groupcombo == Constants.AgedPayableOtherthanBaseCurrency) {
                    conditionSQL += " where a.invcurr!=" + Integer.parseInt((String) requestParams.get(Constants.globalCurrencyKey));
                }
            }
            
            //global search
            String ss = (requestParams.containsKey("ss") && requestParams.get("ss") != null) ? (String) requestParams.get("ss") : "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                try {
                    String[] searchcol = new String[]{"a.customername","a.custaliasname","a.custcode", "a.invoicenumber", "a.accountname"};
                    Map map = StringUtil.insertParamSearchStringMap(params, ss, 5); 
                    StringUtil.insertParamSearchString(map);
                    String queryStart = "and";
                    if(StringUtil.isNullOrEmpty(conditionSQL)){
                        queryStart = "where";
                    }
                    String searchQuery = StringUtil.getSearchString(ss, queryStart, searchcol);
                    conditionSQL += searchQuery + " AND a.custcode IS NOT NULL ";
                } catch (SQLException ex) {
                    Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            String salesPerosnJoinType = "left join";
            if (isSalesPersonAgedReport) {
                salesPerosnJoinType = "inner join";
            } 

            String sql = "Select a.invid,SUM(a.invoiceamount), SUM(a.invoiceamountinbase), a.withoutinventory, a.createdon , a.creationdate, SUM(a.koamount), SUM(a.koamountinbase), a.openinginv,a.company, a.companyname,a.custid,a.customername,a.termname,a.custaliasname,a.invoicenumber,a.invcurr,a.invcurrsymbol,a.invcurrname,a.externalcurrrrate,a.exchangerate,a.invdate,a.shipdate,a.duedate,a.custcode,a.custcurrency,a.entryno,a.salespersonname,a.memo,a.salespersoncode,a.salespersonid,a.invoiceterm,a.creditlimit,a.accountname \n"
                    + " from ("
                    + "select DISTINCT invoice.id,jedetail.amount as invoiceamount, jedetail.amountinbase as invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, 0 as koamount, 0 as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as customername,term.termname,customer.aliasname as custaliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invterm.termname as invoiceterm,customer.creditlimit as creditlimit, account.name as accountname,customer.createdon as custcreatedon, journalentry.id as journalentryid,invoice.id as detailid from invoice   \n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , journalentry.entrydate, 0 as koamount, 0 as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid from invoice   \n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, 0 as koamount, 0 as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invTerm.termname as invoiceTerm,customer.creditlimit as creditlimit,customer.createdon as custcreatedon, journalentry.id as journalentryid,invoice.id as detailid   from invoice   \n"
                    + "inner join journalentry on invoice.journalentry = journalentry.id  \n"
                    + "inner join jedetail on "+jeid+" \n"
                    + "LEFT join account on account.id = jedetail.account  \n"
                    + "inner join customer on customer.id = invoice.customer  \n"
                    +  salesPerosnJoinType +" masteritem on masteritem.id = invoice.mastersalesperson  \n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join compaccpreferences on compaccpreferences.id=company.companyid\n"
                    + "inner join creditterm term on customer.creditterm = term.termid\n"
                    + "inner join currency invcurrency on invoice.currency=invcurrency.currencyid\n"
                    + "inner join currency compcurrency on company.currency=compcurrency.currencyid\n"
                    + "left join customercategorymapping on customercategorymapping.customerid = customer.id \n"
                    + "left join costcenter on costcenter.id = journalentry.costcenter   \n"
                    + "inner join creditterm invterm on invterm.termid = invoice.termid \n"
                    +joinString1
                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and invoice.creationdate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n" 
                    + "and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0))\n"
                    + " or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) \n"
                    + " and (invoice.amountduedate>? or invoice.amountduedate is null)) )\n"
                    + mySearchFilterString
                    + " UNION "
                    + "select DISTINCT invoice.id,0 as invoiceamount, 0 as invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, discount.amountinInvCurrency as koamount, ROUND(discount.amountinInvCurrency/COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal)  as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as customername,term.termname,customer.aliasname as custaliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invterm.termname as invoiceterm,customer.creditlimit as creditlimit, account.name as accountname,customer.createdon as custcreatedon, journalentry.id as journalentryid, cnd.id as detailid from invoice   \n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , journalentry.entrydate, discount.amountinInvCurrency as koamount, ROUND(discount.amountinInvCurrency/COALESCE(if(journalentry.externalcurrencyrate=0,erd.exchangerate,journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal)  as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid from invoice   \n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, discount.amountinInvCurrency as koamount, ROUND(discount.amountinInvCurrency/COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal)  as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invTerm.termname as invoiceTerm,customer.creditlimit as creditlimit,customer.createdon as custcreatedon, journalentry.id as journalentryid,cnd.id as detailid from invoice   \n"
                    + "inner join journalentry on invoice.journalentry = journalentry.id  \n"
                    + "inner join jedetail on "+jeid+" \n"
                    + "inner join account on account.id = jedetail.account  \n"
                    + "inner join customer on customer.id = invoice.customer  \n"
                    +  salesPerosnJoinType +" masteritem on masteritem.id = invoice.mastersalesperson  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = customer.id  \n"
                    + "left join costcenter on costcenter.id = journalentry.costcenter   \n"
                    + "inner join cndetails cnd on cnd.invoice=invoice.id and cnd.company=invoice.company and cnd.invoicelinkdate<=?\n"
                    + "inner join discount on discount.id=cnd.discount \n"
                    + "inner join creditnote cn on cn.id=cnd.creditnote and cn.deleteflag='F' \n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join compaccpreferences on compaccpreferences.id=company.companyid\n"
                    + "inner join creditterm term on customer.creditterm = term.termid\n"
                    + "inner join currency invcurrency on invoice.currency=invcurrency.currencyid\n"
                    + "inner join currency compcurrency on company.currency=compcurrency.currencyid\n"
                    + "inner join creditterm invterm on invterm.termid = invoice.termid \n"
                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and invoice.creationdate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0))\n"
                    + " or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) \n"
                    + " and (invoice.amountduedate>? or invoice.amountduedate is null)) )\n"
                    + "\n"                    
                    + "UNION\n"
                    + "select DISTINCT invoice.id,0 as invoiceamount, 0 as invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, ldr.amountininvoicecurrency as koamount, ROUND(ldr.amountininvoicecurrency/COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as customername,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname, invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invterm.termname as invoiceterm,customer.creditlimit as creditlimit, account.name as accountname,customer.createdon as custcreatedon, journalentry.id as journalentryid, ldr.id as detailid from invoice   \n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , journalentry.entrydate, ldr.amountininvoicecurrency as koamount, ROUND(ldr.amountininvoicecurrency/COALESCE(if(journalentry.externalcurrencyrate=0,erd.exchangerate,journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname, invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid from invoice   \n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, ldr.amountininvoicecurrency as koamount, ROUND(ldr.amountininvoicecurrency/COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname, invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invTerm.termname as invoiceTerm,customer.creditlimit as creditlimit,customer.createdon as custcreatedon, journalentry.id as journalentryid,ldr.id as detailid from invoice   \n"
                    + "inner join journalentry on invoice.journalentry = journalentry.id  \n"
                    + "inner join jedetail on "+jeid+" \n"
                    + "inner join account on account.id = jedetail.account  \n"
                    + "inner join customer on customer.id = invoice.customer  \n"
                    +  salesPerosnJoinType +" masteritem on masteritem.id = invoice.mastersalesperson  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = customer.id  \n"
                    + "left join costcenter on costcenter.id = journalentry.costcenter   \n"
                    + "inner join linkdetailreceipt ldr on ldr.invoice=invoice.id and ldr.company=invoice.company and ldr.receiptLinkDate<=?\n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join compaccpreferences on compaccpreferences.id=company.companyid\n"
                    + "inner join creditterm term on customer.creditterm = term.termid\n"
                    + "inner join currency invcurrency on invoice.currency=invcurrency.currencyid\n"
                    + "inner join currency compcurrency on company.currency=compcurrency.currencyid\n"
                    + "inner join creditterm invterm on invterm.termid = invoice.termid \n" 
                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and invoice.creationdate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0))\n"
                    + " or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) \n"
                    + " and (invoice.amountduedate>? or invoice.amountduedate is null)) )\n"
                    + "\n"                    
                    + "UNION\n"
                    + "select DISTINCT invoice.id,0 as invoiceamount, 0 as invoiceamountinbase, 'false' as withoutinventory, rje.createdon , receipt.creationdate, rd.amountininvoicecurrency as koamount, ROUND((case when rd.fromcurrency is not null and rd.tocurrency is not null then (rd.amount/rd.exchangeratefortransaction) else rd.amountininvoicecurrency end) /COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as customername,term.termname,customer.aliasname as custaliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname, invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invterm.termname as invoiceterm,customer.creditlimit as creditlimit, account.name as accountname,customer.createdon as custcreatedon, journalentry.id as journalentryid, rd.id as detailid from invoice   \n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, rje.createdon , rje.entrydate, rd.amountininvoicecurrency as koamount, ROUND((case when rd.fromcurrency is not null and rd.tocurrency is not null then (rd.amount/rd.exchangeratefortransaction) else rd.amountininvoicecurrency end) /COALESCE(if(journalentry.externalcurrencyrate=0,erd.exchangerate,journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname, invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid from invoice   \n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, rje.createdon , receipt.creationdate, rd.amountininvoicecurrency as koamount, ROUND((case when rd.fromcurrency is not null and rd.tocurrency is not null then (rd.amount/rd.exchangeratefortransaction) else rd.amountininvoicecurrency end) /COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname, invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invTerm.termname as invoiceTerm,customer.creditlimit as creditlimit,customer.createdon as custcreatedon, journalentry.id as journalentryid,rd.id as detailid from invoice   \n"
                    + "inner join journalentry on invoice.journalentry = journalentry.id  \n"
                    + "inner join jedetail on "+jeid+" \n"
                    + "inner join account on account.id = jedetail.account  \n"
                    + "inner join customer on customer.id = invoice.customer  \n"
                    +  salesPerosnJoinType +" masteritem on masteritem.id = invoice.mastersalesperson  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = customer.id  \n"
                    + "left join costcenter on costcenter.id = journalentry.costcenter   \n"
                    + "inner join receiptdetails rd on rd.invoice=invoice.id and rd.company=invoice.company  \n"
                    + "inner join receipt on rd.receipt=receipt.id and receipt.isdishonouredcheque='F' and receipt.approvestatuslevel=11 and receipt.deleteflag='F' \n"
                    + "inner join journalentry rje on receipt.journalentry=rje.id and (receipt.creationdate<=?) \n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join compaccpreferences on compaccpreferences.id=company.companyid\n"
                    + "inner join creditterm term on customer.creditterm = term.termid\n"
                    + "inner join currency invcurrency on invoice.currency=invcurrency.currencyid\n"
                    + "inner join currency compcurrency on company.currency=compcurrency.currencyid\n"
                    + "inner join creditterm invterm on invterm.termid = invoice.termid \n"
                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and receipt.creationdate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0))\n"
                    + " or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) \n"
                    + " and (invoice.amountduedate>? or invoice.amountduedate is null)) )\n"
                    + "\n"
                    + "UNION \n"

                    + "select DISTINCT invoice.id,0 as invoiceamount, 0 as invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, iwo.writtenoffamountininvoicecurrency as koamount, ROUND(iwo.writtenoffamountininvoicecurrency/COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as customername,term.termname,customer.aliasname as custaliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invterm.termname as invoiceterm,customer.creditlimit as creditlimit, account.name as accountname,customer.createdon as custcreatedon, journalentry.id as journalentryid, iwo.id as detailid from invoice   \n"

//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , journalentry.entrydate, iwo.writtenoffamountininvoicecurrency as koamount, ROUND(iwo.writtenoffamountininvoicecurrency/COALESCE(if(journalentry.externalcurrencyrate=0,erd.exchangerate,journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid from invoice   \n"
//                    + "select DISTINCT invoice.id,invoiceamount, invoiceamountinbase, 'false' as withoutinventory, journalentry.createdon , invoice.creationdate, iwo.writtenoffamountininvoicecurrency as koamount, ROUND(iwo.writtenoffamountininvoicecurrency/COALESCE(if(journalentry.externalcurrencyrate=0,exchangerate_calc(invoice.company,invoice.creationdate,invoice.currency,company.currency),journalentry.externalcurrencyrate),1),compaccpreferences.amountdigitafterdecimal) as koamountinbase, invoice.id as invid,invoice.isopeningbalenceinvoice as openinginv,invoice.company, company.companyname,customer.id as custid,COALESCE(customer.name,'') as custname,term.termname,customer.aliasname,'Sales Invoice',invoice.invoicenumber,invoice.currency as invcurr,invcurrency.symbol as invcurrsymbol,invcurrency.name as invcurrname,if(invoice.currency=company.currency,1,journalentry.externalcurrencyrate) as externalcurrrrate,CONCAT(1,' ',compcurrency.currencycode,' = ',if(invoice.currency=company.currency,1.0,journalentry.externalcurrencyrate),' ',invcurrency.currencycode) as exchangerate,invoice.creationdate as invdate,invoice.shipdate,invoice.duedate,customer.acccode as custcode,customer.currency as custcurrency, journalentry.entryno as entryno, COALESCE(masteritem.value,'') as salespersonname,invoice.memo as memo,COALESCE(masteritem.code,'') as salespersoncode,COALESCE(masteritem.id,'') as salespersonid,invTerm.termname as invoiceTerm,customer.creditlimit as creditlimit,customer.createdon as custcreatedon, journalentry.id as journalentryid,iwo.id as detailid from invoice   \n"

                    + "inner join journalentry on invoice.journalentry = journalentry.id  \n"
                    + "inner join jedetail on "+jeid+" \n"
                    + "inner join account on account.id = jedetail.account  \n"
                    + "inner join customer on customer.id = invoice.customer  \n"
                    +  salesPerosnJoinType +" masteritem on masteritem.id = invoice.mastersalesperson  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = customer.id  \n"
                    + "left join costcenter on costcenter.id = journalentry.costcenter   \n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join compaccpreferences on compaccpreferences.id=company.companyid\n"
                    + "inner join creditterm term on customer.creditterm = term.termid\n"
                    + "inner join currency invcurrency on invoice.currency=invcurrency.currencyid\n"
                    + "inner join currency compcurrency on company.currency=compcurrency.currencyid\n"
                    + "inner join invoicewriteoff iwo on iwo.invoice=invoice.id and iwo.company=invoice.company and iwo.isrecovered='F' and iwo.writeoffdate<=?  \n"
                    + "inner join creditterm invterm on invterm.termid = invoice.termid \n"                    
//                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and journalentry.entrydate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "where  invoice.company = ? and invoice.cashtransaction='0'   and invoice.creationdate <=?  and invoice.deleteflag='F'  and invoice.approvestatuslevel= '11'  and invoice.istemplate != '2'  and invoice.isdraft = '0'   \n"
                    + "and (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue>0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue>0))\n"
                    + " or (((invoice.isopeningbalenceinvoice=false and invoice.invoiceamountdue=0) or (invoice.isopeningbalenceinvoice=true and invoice.openingbalanceamountdue=0)) \n"
                    + " and (invoice.amountduedate>? or invoice.amountduedate is null)) )\n"
                    + ") a "
                    + conditionSQL
//                    + (isAgedDetailsReport ? " group by a.entryno":"group by a.invid") +" order by a.entrydate desc";
                    + (isAgedDetailsReport ? " group by a.entryno":"group by a.invid") +" order by a.creationdate desc";
            ll = executeSQLQuery(sql, params.toArray());
        } catch (Exception ex) {
            ex.printStackTrace();
        throw ServiceException.FAILURE("error", ex);
        }
        return ll;
    }
    public List getOpeningInvoiceKnockOffTransactions(Map<String, Object> requestParams) throws ServiceException{
        List ll = null;
        try {
            String companyid = (String) requestParams.get(Constants.companyKey);
            String customerid = (String) requestParams.get("custVendorID");
            boolean isAgedDetailsReport = requestParams.containsKey("isAgedDetailsReport") ? (Boolean)requestParams.get("isAgedDetailsReport"): false;
            boolean isSalesPersonAgedReport = requestParams.containsKey("isSalesPersonAgedReport") ? (Boolean)requestParams.get("isSalesPersonAgedReport"): false;
            
            int datefilter = requestParams.containsKey("datefilter") && requestParams.get("datefilter") != null ? Integer.parseInt(requestParams.get("datefilter").toString()) : 0;
            String custQuery = "";
            boolean includeExcludeChildCmb=false;
            if (requestParams.containsKey("includeExcludeChildCmb") && requestParams.get("includeExcludeChildCmb") != null) {
                includeExcludeChildCmb = (Boolean) requestParams.get("includeExcludeChildCmb");
            }
            if (!StringUtil.isNullOrEmpty(customerid) && !customerid.equals("All")) {
                String[] customers = customerid.split(",");
                StringBuilder custValues = new StringBuilder();
                for (String customer : customers) {
                    custValues.append("'").append(customer).append("',");
                }
                String custStr = custValues.substring(0, custValues.lastIndexOf(","));
                if (isSalesPersonAgedReport) {
                    custQuery += " and masteritem.id IN (" + custStr + ")";
                } else if (includeExcludeChildCmb) {
                    custQuery += " and (cust.id IN (" + custStr + ") or cust.parent IN (" + custStr + "))";
                } else {
                    custQuery += " and cust.id IN (" + custStr + ")";
                }
            }else if(!includeExcludeChildCmb){
                custQuery += " and cust.parent is  null";
            }
            DateFormat origdf = authHandler.getDateOnlyFormat();
            String duedateStr = (String)requestParams.get("enddate");
            String asofdateStr= (requestParams.containsKey("asofdate") && requestParams.get("asofdate") != null) ? (String) requestParams.get("asofdate") : duedateStr;
            Date duedate = origdf.parse(duedateStr);
            Date asofdate = origdf.parse(asofdateStr);
            DateFormat mysqldf = new SimpleDateFormat("yyyy-MM-dd");
            duedateStr = mysqldf.format(duedate);
            ArrayList paramsAdvSearch = new ArrayList();
            ArrayList paramsAdvSearch1= new ArrayList();
            requestParams.put("isOpeningBalanceInvoices", true);
            JSONObject advSearchQueryObj = getAdvanceSearchForCustomQuery(requestParams, paramsAdvSearch1, paramsAdvSearch, "");            
            String joinString1 = advSearchQueryObj.getString("joinString1");
            String mySearchFilterString = custQuery +advSearchQueryObj.getString("mySearchFilterString");
            ArrayList params = new ArrayList();
            params.add(companyid);
            params.add(duedate);
            params.add(duedate);
            params.addAll(paramsAdvSearch);
            
            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(duedate);
            
            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(duedate);
            
            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(duedate);
            
            params.add(asofdate);
            params.add(companyid);
            params.add(duedate);
            params.add(duedate);
            
            
            String conditionSQL="";
            if (requestParams.containsKey("groupcombo") && requestParams.get("groupcombo") != null && requestParams.containsKey(Constants.globalCurrencyKey) && requestParams.get(Constants.globalCurrencyKey) != null) {
                int groupcombo = (Integer) requestParams.get("groupcombo");
                if (groupcombo == Constants.AgedPayableBaseCurrency) {
                    conditionSQL += " and i.doccurrency=" + Integer.parseInt((String) requestParams.get(Constants.globalCurrencyKey));
                } else if (groupcombo == Constants.AgedPayableOtherthanBaseCurrency) {
                    conditionSQL += " and i.doccurrency!=" + Integer.parseInt((String) requestParams.get(Constants.globalCurrencyKey));
                }
            }
            //global search
            String ss = (requestParams.containsKey("ss") && requestParams.get("ss") != null) ? (String) requestParams.get("ss") : "";
            if (!StringUtil.isNullOrEmpty(ss)) {
                try {
                    String[] searchcol = new String[]{"i.customername","i.custaliasname","i.custcode", "i.docnumber", "i.accountname"};
                    Map map = StringUtil.insertParamSearchStringMap(params, ss, 5); 
                    StringUtil.insertParamSearchString(map);
                    String queryStart = "and";
                    String searchQuery = StringUtil.getSearchString(ss, queryStart, searchcol);
                    conditionSQL += searchQuery + " AND i.custcode IS NOT NULL ";
                } catch (SQLException ex) {
                    Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            String salesPerosnJoinType = "left join";
            if (isSalesPersonAgedReport) {
                salesPerosnJoinType = "inner join";
            } 
//            String sql = "Select a.invid,a.invoiceamount,"+(isAgedDetailsReport?" a.invoiceamountinbase":"AVG(a.invoiceamountinbase)")+", a.withoutinventory, a.createdon , a.entrydate, "+(isAgedDetailsReport?" a.koamount, a.koamountinbase" : " SUM(a.koamount), SUM(a.koamountinbase)")+", a.openinginv,a.company, a.companyname,a.custid,a.custname,a.termname,a.aliasname,a.invoicenumber,a.invcurr,a.invcurrsymbol,a.invcurrname,a.externalcurrrrate,a.exchangerate,a.invdate,a.shipdate,a.duedate,a.custcode,a.custcurrency,a.entryno\n"
//            String sql = "Select a.invid,a.invoiceamount,"+(isAgedDetailsReport?" a.invoiceamountinbase":"AVG(a.invoiceamountinbase)")+", a.withoutinventory, a.createdon , a.entrydate, SUM(a.koamount), SUM(a.koamountinbase), a.openinginv,a.company, a.companyname,a.custid,a.custname,a.termname,a.aliasname,a.invoicenumber,a.invcurr,a.invcurrsymbol,a.invcurrname,a.externalcurrrrate,a.exchangerate,a.invdate,a.shipdate,a.duedate,a.custcode,a.custcurrency,a.entryno,a.salespersonname,a.memo,a.salespersoncode,a.salespersonid \n"
            
            String sql = "SELECT i.docid, i.docnumber, SUM(i.amount), SUM(i.amountinbase), SUM(i.koamt), SUM(i.koamtbase), i.doctype, i.docterm, i.creationdate, i.duedate, i.salespersonname, i.salespersoncode, i.salespersonid, i.entryno, i.entrydate, i.isOpeningBalanceTransaction, i.customerid, i.customername, i.custaliasname, i.custcode, i.customertermname, i.customertermid, i.customercreditlimit, i.memo, i.exchangerate,i.doccurrency, i.doccurrencyname, i.doccurrencycode, i.doccurrencysymbol,i.companyname,i.shipdate, i.basecurrencysymbol, i.accountname\n"
                    + "from (\n"
                    + "select invoice.id as docid, invoice.invoicenumber as docnumber, invoice.originalopeningbalanceamount as amount, invoice.originalopeningbalancebaseamount as amountinbase, 0 as koamtbase,0 as koamt, 'Sales Invoice' as doctype, docterm.termname as docterm, invoice.creationdate, invoice.duedate, COALESCE(masteritem.value,' ') as salespersonname, COALESCE(masteritem.code,' ') as salespersoncode, COALESCE(masteritem.id,' ') as salespersonid, ' ' as entryno, ' ' as entrydate, '1' as isOpeningBalanceTransaction, cust.id as customerid, cust.name as customername, cust.aliasname as custaliasname, cust.acccode as custcode, custcredit.termname as customertermname, custcredit.termid as customertermid, cust.creditlimit as customercreditlimit, invoice.memo, if(invoice.isconversionratefromcurrencytobase=1,1/invoice.exchangerateforopeningtransaction, 1/invoice.exchangerateforopeningtransaction) as exchangerate,invoice.currency as doccurrency, invcurr.name as doccurrencyname, invcurr.currencycode as doccurrencycode, invcurr.symbol as doccurrencysymbol,company.companyname, invoice.shipdate, compcurr.symbol as basecurrencysymbol, account.name as accountname, invoice.id as detailid\n"
                    + "from invoice   \n"
                    + "inner join customer cust on cust.id = invoice.customer  \n"
                    + "LEFT join account on account.id = invoice.account \n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join creditterm custcredit on cust.creditterm = custcredit.termid\n"
                    + "inner join creditterm docterm on invoice.termid = docterm.termid\n"
                    +  salesPerosnJoinType +" masteritem on masteritem.id = invoice.mastersalesperson\n"
                    + "inner join currency invcurr on invoice.currency=invcurr.currencyid\n"
                    + "inner join currency compcurr on company.currency=compcurr.currencyid\n"
                    + "left join customercategorymapping on customercategorymapping.customerid = cust.id \n"
                    +joinString1
                    + "where  invoice.company = ?  and invoice.creationdate <=? and invoice.cashtransaction='0' and invoice.deleteflag='F' and invoice.istemplate != '2'  and invoice.isdraft = '0' and invoice.isopeningbalenceinvoice=1 and (invoice.openingBalanceAmountDue>0 or (invoice.openingBalanceAmountDue=0 and invoice.amountDueDate>?)) \n"
                    + mySearchFilterString +"\n"
                    + "group by invoice.invoicenumber \n"
                    + "\n"
                    + " UNION ALL \n"
                    + "select invoice.id as docid, invoice.invoicenumber as docnumber, 0 as amount, 0 as amountinbase, SUM(discount.amountinInvCurrency*if(invoice.isconversionratefromcurrencytobase=1,invoice.exchangerateforopeningtransaction, 1/invoice.exchangerateforopeningtransaction)) as koamtbase, SUM(discount.amountininvcurrency) as koamt, null as doctype, null as docterm, null as creationdate, null as duedate, null as salespersonname, null as salespersoncode, null as salespersonid, null as entryno, null as entrydate, null as isOpeningBalanceTransaction, null as customerid, null as customername, null as custaliasname, null as custcode, null as customertermname, null as customertermid, null as customercreditlimit, null as memo,null as exchangerate,null as doccurrency, null as doccurrencyname, null as doccurrencycode, null as doccurrencysymbol,null as companyname, null as shipdate, null as basecurrencysymbol, null as accountname, cnd.id as detailid\n"
                    + "from invoice   \n"
                    + "inner join customer cust on cust.id = invoice.customer  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = cust.id  \n"
                    + "inner join cndetails cnd on cnd.invoice=invoice.id and cnd.company=invoice.company and cnd.invoicelinkdate<=?\n"
                    + "inner join discount on discount.id=cnd.discount \n"
                    + "inner join creditnote cn on cn.id=cnd.creditnote and cn.deleteflag='F' \n"
                    + "where  invoice.company = ?  and invoice.creationdate <=? and invoice.cashtransaction='0' and invoice.deleteflag='F' and invoice.istemplate != '2'  and invoice.isdraft = '0' and invoice.isopeningbalenceinvoice=1 and (invoice.openingBalanceAmountDue>0 or (invoice.openingBalanceAmountDue=0 and invoice.amountDueDate>?)) \n"
                    + "group by invoice.invoicenumber \n"
                    + "\n"
                    + " UNION ALL \n"
                    + "select invoice.id as docid, invoice.invoicenumber as docnumber, 0 as amount, 0 as amountinbase, SUM(ldr.amountininvoicecurrency*if(invoice.isconversionratefromcurrencytobase=1,invoice.exchangerateforopeningtransaction, 1/invoice.exchangerateforopeningtransaction)) as koamtbase,SUM(ldr.amountininvoicecurrency) as koamt, null as doctype, null as docterm, null as creationdate, null as duedate, null as salespersonname, null as salespersoncode, null as salespersonid, null as entryno, null as entrydate, null as isOpeningBalanceTransaction, null as customerid, null as customername, null as custaliasname, null as custcode, null as customertermname, null as customertermid, null as customercreditlimit, null as memo,null as exchangerate,null as doccurrency, null as doccurrencyname, null as doccurrencycode, null as doccurrencysymbol,null as companyname, null as shipdate, null as basecurrencysymbol, null as accountname, ldr.id as detailid\n"
                    + " from invoice   \n"
                    + "inner join customer cust on cust.id = invoice.customer  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = cust.id  \n"
                    + "inner join linkdetailreceipt ldr on ldr.invoice=invoice.id and ldr.company=invoice.company and ldr.receiptLinkDate<=?\n"
                    + "where  invoice.company = ? and invoice.creationdate <=?  and invoice.cashtransaction='0' and invoice.deleteflag='F' and invoice.istemplate != '2'  and invoice.isdraft = '0'  and invoice.isopeningbalenceinvoice=1 and (invoice.openingBalanceAmountDue>0 or (invoice.openingBalanceAmountDue=0 and invoice.amountDueDate>?)) \n"
                    + "group by invoice.invoicenumber \n"
                    + "\n"
                    + " UNION ALL \n"
                    + "select invoice.id as docid, invoice.invoicenumber as docnumber, 0 as amount, 0 as amountinbase, SUM(rd.amount/if(rd.amountdueininvoicecurrency=0,exchangeratefortransaction,(rd.amountdueinpaymentcurrency/rd.amountdueininvoicecurrency))*if(invoice.isconversionratefromcurrencytobase=1,invoice.exchangerateforopeningtransaction, 1/invoice.exchangerateforopeningtransaction)) as koamtbase,SUM(rd.amount/if(rd.amountdueininvoicecurrency=0,exchangeratefortransaction,(rd.amountdueinpaymentcurrency/rd.amountdueininvoicecurrency))) as koamt, null as doctype, null as docterm, null as creationdate, null as duedate, null as salespersonname, null as salespersoncode, null as salespersonid, null as entryno, null as entrydate, null as isOpeningBalanceTransaction, null as customerid, null as customername, null as custaliasname, null as custcode, null as customertermname, null as customertermid, null as customercreditlimit, null as memo,null as exchangerate,null as doccurrency, null as doccurrencyname, null as doccurrencycode, null as doccurrencysymbol,null as companyname, null as shipdate, null as basecurrencysymbol, null as accountname, rd.id as detailid\n"
                    + " from invoice   \n"
                    + "inner join customer cust on cust.id = invoice.customer  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = cust.id  \n"
                    + "inner join receiptdetails rd on rd.invoice=invoice.id and rd.company=invoice.company  \n"
                    + "inner join receipt on rd.receipt=receipt.id and receipt.isdishonouredcheque='F' and receipt.approvestatuslevel=11 and receipt.creationdate<=?\n"
                    + "where  invoice.company = ?  and invoice.creationdate <=? and invoice.cashtransaction='0'  and invoice.deleteflag='F' and invoice.istemplate != '2'  and invoice.isdraft = '0' and invoice.isopeningbalenceinvoice=1 and (invoice.openingBalanceAmountDue>0 or (invoice.openingBalanceAmountDue=0 and invoice.amountDueDate>?)) \n"
                    + "group by invoice.invoicenumber \n"
                    + "\n"
                    + " UNION ALL \n"
                    + "select invoice.id as docid, invoice.invoicenumber as docnumber, 0 as amount, 0 as amountinbase, SUM(iwo.writtenoffamountininvoicecurrency*if(invoice.isconversionratefromcurrencytobase=1,invoice.exchangerateforopeningtransaction, 1/invoice.exchangerateforopeningtransaction)) as koamtbase,SUM(iwo.writtenoffamountininvoicecurrency) as koamt, null as doctype, null as docterm, null as creationdate, null as duedate, null as salespersonname, null as salespersoncode, null as salespersonid, null as entryno, null as entrydate, null as isOpeningBalanceTransaction, null as customerid, null as customername, null as custaliasname, null as custcode, null as customertermname, null as customertermid, null as customercreditlimit, null as memo,null as exchangerate,null as doccurrency, null as doccurrencyname, null as doccurrencycode, null as doccurrencysymbol,null as companyname, null as shipdate, null as basecurrencysymbol, null as accountname, iwo.id as detailid\n"
                    + " from invoice   \n"
                    + "inner join customer cust on cust.id = invoice.customer  \n"
                    + "left join customercategorymapping on customercategorymapping.customerid = cust.id  \n"
                    + "inner join company on invoice.company=company.companyid\n"
                    + "inner join invoicewriteoff iwo on iwo.invoice=invoice.id and iwo.company=invoice.company and iwo.isrecovered='F' and iwo.writeoffdate<=?  \n"
                    + "where  invoice.company = ?  and invoice.creationdate <=? and invoice.cashtransaction='0'  and invoice.deleteflag='F' and invoice.istemplate != '2'  and invoice.isdraft = '0' and invoice.isopeningbalenceinvoice=1 and (invoice.openingBalanceAmountDue>0 or (invoice.openingBalanceAmountDue=0 and invoice.amountDueDate>?)) \n"
                    + "group by invoice.invoicenumber \n"
                    + ") i  " + (datefilter == 0 ? " WHERE i.duedate<='"+duedateStr+"'":"")
                    + conditionSQL +" group by i.docnumber order by i.creationdate desc";
            ll = executeSQLQuery(sql, params.toArray());
        } catch (Exception ex) {
            ex.printStackTrace();
            throw ServiceException.FAILURE("error", ex);
        }
        return ll;
    }
    
    private JSONObject getAdvanceSearchForCustomQuery(Map<String, Object> request, ArrayList params, ArrayList paramsSQLWithoutInv, String searchDefaultFieldSQL) throws JSONException, ServiceException {
        JSONObject returnObj = new JSONObject();
        String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
        if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
            if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                filterConjuctionCriteria = com.krawler.common.util.Constants.or;
            }
        }
        String mySearchFilterString = "";
        String joinString1 = "";
        String jeid = "";
       try{
        if (request.containsKey("searchJson") && request.get("searchJson") != null) {
            String Searchjson = StringUtil.DecodeText(request.get("searchJson").toString());

            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                JSONObject serachJobj = new JSONObject(Searchjson);
                JSONArray customSearchFieldArray = new JSONArray();
                JSONArray defaultSearchFieldArray = new JSONArray();
                StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);

                if (customSearchFieldArray.length() > 0) {
                    /*
                     Advance Search For Custom fields
                     */
                    request.put(Constants.Searchjson, Searchjson);
                    request.put(Constants.appendCase, "and");
                    request.put("filterConjuctionCriteria", filterConjuctionCriteria);

                    mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
//                            mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                    if (mySearchFilterString.contains("accjecustomdata") || mySearchFilterString.contains("AccJECustomData")) {
                        joinString1 = " inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry ";
                        mySearchFilterString = mySearchFilterString.replaceAll("AccJECustomData", "accjecustomdata");//    
                    }
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                        mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "accjedetailcustomdata");//    
                        joinString1 += " left join accjedetailcustomdata  on accjedetailcustomdata.jedetailId=jedetail.id ";
                        jeid = " jedetail.journalentry = invoice.journalentry ";
                    }
                    if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                        mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "accjedetailproductcustomdata");//    
                        joinString1 += " left join accjedetailproductcustomdata  on accjedetailproductcustomdata.jedetailId=jedetail.id ";
                        jeid = " jedetail.journalentry = invoice.journalentry ";
                    }
                    if (mySearchFilterString.contains("CustomerCustomData")) {
                        joinString1 += " left join customercustomdata  on customercustomdata.customerId=customer.id ";
                        mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "customercustomdata");
                    }
                    //product custom data
                    if (mySearchFilterString.contains("accproductcustomdata")) {
                        joinString1 += " inner join invoicedetails on invoicedetails.invoice=invoice.id left join inventory on inventory.id=invoicedetails.id "
                                + "left join product on product.id=inventory.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                    }

                    StringUtil.insertParamAdvanceSearchString1(paramsSQLWithoutInv, Searchjson);
                }
                mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
            }
        }
        returnObj.put("jeid", jeid);
        returnObj.put("joinString1", joinString1);
        returnObj.put("mySearchFilterString", mySearchFilterString);
         } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getAdvanceSearchForCustomQuery:" + ex.getMessage(), ex);
        }
        return returnObj;
    }
    
    private JSONObject getAdvanceSearchForCustomQuery_Optimize(Map<String, Object> request, ArrayList params, ArrayList paramsSQLWithoutInv, String searchDefaultFieldSQL) throws JSONException, ServiceException {
        JSONObject returnObj = new JSONObject();
        boolean isOpeningBalanceInvoices = false;
        if (request.containsKey("isOpeningBalanceInvoices")) {
            isOpeningBalanceInvoices = (Boolean) request.get("isOpeningBalanceInvoices");
        }
        String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
        if (request.containsKey("filterConjuctionCriteria") && request.get("filterConjuctionCriteria") != null) {
            if (request.get("filterConjuctionCriteria").toString().equalsIgnoreCase("OR")) {
                filterConjuctionCriteria = com.krawler.common.util.Constants.or;
            }
        }
        String mySearchFilterString = "";
        String joinString1 = "";
        String jeid = "";
        String Searchjson = "";
       try{
        if (request.containsKey("searchJson") && request.get("searchJson") != null) {
            if(request.containsKey("searchJsonInvoice") && request.get("searchJsonInvoice") != null)
            {
                Searchjson = StringUtil.DecodeText(request.get("searchJsonInvoice").toString());
            } 
            else
            {
                Searchjson = StringUtil.DecodeText(request.get("searchJson").toString());
            }
            
            if (!StringUtil.isNullOrEmpty(Searchjson)) {
                JSONObject serachJobj = new JSONObject(Searchjson);
                JSONArray customSearchFieldArray = new JSONArray();
                JSONArray defaultSearchFieldArray = new JSONArray();
                StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);

                if (customSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Custom fields
                         */
                        request.put(Constants.Searchjson, Searchjson);
                    request.put(Constants.appendCase, "and");
                        request.put("filterConjuctionCriteria", filterConjuctionCriteria);
                            request.put("isOpeningBalance", isOpeningBalanceInvoices);
                            request.put(Constants.moduleid, Constants.Acc_Invoice_ModuleId);
                        if (isOpeningBalanceInvoices) {
                            mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
                            mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "openingbalanceinvoicecustomdata");//    
//                        mySearchFilterStringforOpeningTransaction = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                            joinString1 = " inner join openingbalanceinvoicecustomdata on openingbalanceinvoicecustomdata.openingbalanceinvoiceid=invoice.id ";                            
                        } else {
                            mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(request, true).get(Constants.myResult));
//                            mySearchFilterString = String.valueOf(StringUtil.getMyAdvanceSearchString(request, true).get(Constants.myResult));
                            if (mySearchFilterString.contains("accjecustomdata") || mySearchFilterString.contains("AccJECustomData")) {
                                joinString1 = " inner join accjecustomdata on accjecustomdata.journalentryId=invoice.journalentry ";
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJECustomData", "accjecustomdata");//    
                            }
                            StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                            if (mySearchFilterString.contains("AccJEDetailCustomData")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailCustomData", "accjedetailcustomdata");//    
                                joinString1 += " left join accjedetailcustomdata  on accjedetailcustomdata.jedetailId=jedetail.id ";
                                jeid = " jedetail.journalentry = invoice.journalentry ";
                            }
                            if (mySearchFilterString.contains("AccJEDetailsProductCustomData")) {
                                mySearchFilterString = mySearchFilterString.replaceAll("AccJEDetailsProductCustomData", "accjedetailproductcustomdata");//    
                                joinString1 += " left join accjedetailproductcustomdata  on accjedetailproductcustomdata.jedetailId=jedetail.id ";
                                jeid = " jedetail.journalentry = invoice.journalentry ";
                            }
                            if (mySearchFilterString.contains("CustomerCustomData")) {
                                joinString1 += " left join customercustomdata  on customercustomdata.customerId=customer.id ";
                                mySearchFilterString = mySearchFilterString.replaceAll("CustomerCustomData", "customercustomdata");
                            }
                            //product custom data
                            if (mySearchFilterString.contains("accproductcustomdata")) {
                                joinString1 += " inner join invoicedetails on invoicedetails.invoice=invoice.id left join inventory on inventory.id=invoicedetails.id "
                                        + "left join product on product.id=inventory.product left join accproductcustomdata on accproductcustomdata.productId=product.id ";
                            }
                        }
                        StringUtil.insertParamAdvanceSearchString1(paramsSQLWithoutInv, Searchjson);
                    }
                mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
            }
        }
        returnObj.put("jeid", jeid);
        returnObj.put("joinString1", joinString1);
        returnObj.put("mySearchFilterString", mySearchFilterString);
         } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
            throw ServiceException.FAILURE("accInvoiceImpl.getAdvanceSearchForCustomQuery:" + ex.getMessage(), ex);
        }
        return returnObj;
    }
    
    /**
     * @param grID : ID of Sales Invoice 
     * @Desc : Return Invoice amount in Base
     * Currency used in Payment while creating payment
     * @throws ServiceException
     */
    @Override
    public KwlReturnObject getReceiptDetailsOfSI(String grID) throws ServiceException {
        String query = "SELECT COALESCE(sum(jed.amountinbase),0)  "
                + "FROM receiptdetails "
                + "INNER JOIN jedetail jed on jed.id=receiptdetails.totaljedid "
                + "INNER JOIN receipt rp on rp.id=receiptdetails.receipt "
                + "WHERE receiptdetails.invoice=? and rp.deleteflag='F'";
        List list = executeSQLQuery(query, new Object[]{grID});
        return new KwlReturnObject(true, "", "", list, list.size());
    }

    /**
     * @param grID : ID of Sales Invoice 
     * @Desc : Return Invoice amount in
     * Invoice Currency linked in Debit Note
     * @throws ServiceException
     */
    @Override
    public KwlReturnObject getLinkedReceiptDetailsOfSI(String grID) throws ServiceException {
//        String query = "SELECT COALESCE(amount/exchangeratefortransaction,0) as invamount "
//                + "FROM linkdetailreceipt "
//                + "INNER JOIN receipt rp on rp.id=linkdetailreceipt.receipt "
//                + "WHERE linkdetailreceipt.invoice=? and rp.deleteflag='F'";
        String query = "SELECT COALESCE(ldr.amount,0) AS enteredamount,COALESCE(forexjed.amountinbase,0) AS forexjeamountinbase,if(rp.isopeningbalencereceipt=1,rp.exchangerateforopeningtransaction,receiptje.externalcurrencyrate) AS reciptexchangerate, rp.isopeningbalencereceipt, rp.isconversionratefromcurrencytobase, if(forexjed.debit= 'T' , 'true' , 'false') as isdebit "
                + "FROM linkdetailreceipt ldr INNER JOIN receipt rp ON rp.id=ldr.receipt "
                + "LEFT JOIN journalentry receiptje ON receiptje.id=rp.journalentry "
                + "LEFT JOIN journalentry forexje ON forexje.id=ldr.linkedgainlossje "
                + "LEFT JOIN jedetail forexjed ON forexjed.journalEntry=forexje.id "
                + "WHERE ldr.invoice=? AND rp.deleteflag='F' GROUP BY ldr.id";
        List list = executeSQLQuery(query, new Object[]{grID});
        return new KwlReturnObject(true, "", "", list, list.size());
    }
    /**
     * @param grID : ID of Sales Invoice 
     * @Desc : Return Invoice amount in
     * Invoice Currency linked in Payment
     * @throws ServiceException
     */
    @Override
    public KwlReturnObject getLinkedCreditNoteDetailsOfSI(String grID) throws ServiceException {
//        String query = "SELECT COALESCE(amountinInvCurrency,0) as invamount "
//                + "FROM cndetails cnd "
//                + "INNER JOIN creditnote cn on cn.id=cnd.creditNote "
//                + "INNER JOIN discount dis on dis.id=cnd.discount "
//                + "WHERE cnd.invoice=? and cn.deleteflag='F' ";
        String query = "SELECT COALESCE(dis.discount,0) AS enteredamount, COALESCE(forexjed.amountinbase,0) AS forexjeamountinbase,if(cn.isopeningbalencecn=1,cn.exchangerateforopeningtransaction,cnje.externalcurrencyrate) AS cnexchangerate, cn.isopeningbalencecn,cn.isconversionratefromcurrencytobase,if(forexjed.debit= 'T' , 'true' , 'false') as isdebit "
                + "FROM cndetails cnd INNER JOIN creditnote cn ON cn.id=cnd.creditnote "
                + "INNER JOIN discount dis ON dis.id=cnd.discount "
                + "LEFT JOIN journalentry cnje ON cnje.id=cn.journalentry "
                + "LEFT JOIN journalentry forexje ON forexje.id=cnd.linkedgainlossje "
                + "LEFT JOIN jedetail forexjed ON forexjed.journalEntry=forexje.id "
                + "where cnd.invoice=? AND cn.deleteflag='F'GROUP BY cnd.id";         
        List list = executeSQLQuery(query, new Object[]{grID});
        return new KwlReturnObject(true, "", "", list, list.size());
    }
    
    /**
     * Get Total quantity for a product of all batches or a single batch For editing Pick Pack DO
     * @param requestJSON - Product id ,Batch Name,warehouse,location , excludePackingwarehouse(Boolean)
     * @return List - batchname
     * @throws ServiceException
     */
    @Override
    public List getProductBatchQuantity(JSONObject requestJSON) throws ServiceException {
        List batchdetails = null;
        double qty = 0d;
        boolean excludePackingstore = false;
        String batchname = "";
        String warehouse = "";
        String productid = "";
        String location = "";
        ArrayList params = new ArrayList();
        batchname = requestJSON.optString("batchname");
        productid = requestJSON.optString("productid");
        warehouse = requestJSON.optString("warehouse");
        location = requestJSON.optString("location");
        excludePackingstore = requestJSON.optBoolean("excludepackingstore", false);
        StringBuilder query = new StringBuilder("select npb.id, npb.warehouse, npb.batchname, sum(npb.quantitydue) from newproductbatch npb ");
        StringBuilder conditionQuery = new StringBuilder(" where npb.product=? ");
        params.add(productid);
        /**
         * While creating DO from jsp page we will require batches information of a product along with the location and warehouse information.
         */
        String warehouseName = requestJSON.optString("warehouseName");
        if (!StringUtil.isNullOrEmpty(warehouseName)) {
            query.append(" left join in_storemaster on in_storemaster.id = npb.warehouse ");
            conditionQuery.append(" AND in_storemaster.abbrev = ? ");
            params.add(warehouseName);
        }
        String locationName = requestJSON.optString("locationName");
        if (!StringUtil.isNullOrEmpty(locationName)) {
            query.append(" left join in_location on in_location.id = npb.location ");
            conditionQuery.append(" AND in_location.name = ? ");
            params.add(locationName);
        }
        if (!StringUtil.isNullOrEmpty(batchname)) {
            conditionQuery.append(" AND npb.batchname = ? ");
            params.add(batchname);
        }
        if (!StringUtil.isNullOrEmpty(warehouse)) {
            if (excludePackingstore) {
                conditionQuery.append(" AND npb.warehouse <> ? ");
            } else {
                conditionQuery.append(" AND npb.warehouse = ? ");
            }
            params.add(warehouse);
        }
        if (!StringUtil.isNullOrEmpty(location)) {
            conditionQuery.append(" AND npb.location = ? ");
            params.add(location);
        }
        conditionQuery.append(" GROUP By npb.batchname");
        batchdetails = executeSQLQuery(query.append(conditionQuery).toString(), params.toArray());
        return batchdetails;
    }
   
    public void updateRepeatInvoice(JSONObject repeatInvoiceParams) throws ServiceException {
        String query = "update repeatedinvoices rpt INNER JOIN invoice inv on rpt.id=inv.repeateinvoice set rpt.isactivate='F' where inv.id=? and inv.repeateinvoice IS NOT NULL";
        executeSQLUpdate(query, new Object[]{repeatInvoiceParams.optString("invoiceId", "")});
    }

    /*--Delete previously attached document from Crm--*/
    public void deleteAttachDocuments(Map<String, Object> paramsMap) throws ServiceException {
        try {
            String crmdocids = paramsMap.containsKey("crmdocids") ? (String) paramsMap.get("crmdocids") : "";
            if (!StringUtil.isNullOrEmpty(crmdocids)) {
                String query = "delete from InvoiceDocumentCompMap invdocmap where invdocmap.document in(select invdoc.ID from InvoiceDocuments invdoc where invdoc.crmDocumentID in ("+crmdocids+"))";    
//                String query = "delete invdocmap from InvoiceDocumentCompMap invdocmap inner join InvoiceDocuments invdoc on invdocmap.document=invdoc.ID where invdoc.crmDocumentID in ("+crmdocids+")";   //Delete information from InvoiceDocumentCompMap table
                executeUpdate(query);

                query = "delete from InvoiceDocuments invdoc where invdoc.crmDocumentID in ("+crmdocids+")";   //Delete document from database for CRM-ERP quotation Synchronization 
                executeUpdate(query);
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("deleteAttachDocuments : " + ex.getMessage(), ex);       //Fail to delete attached document
        }
    }
    
    /**
     * Check if DO is a pick pack ship DO
     * @param String - doid
     * @return boolean
     * @throws ServiceExceptions
     */
    @Override
    public boolean isPickPackShipDO(String doid) throws ServiceException {
        List list = null;
        Boolean ispickpackdo = false;
        ArrayList params = new ArrayList();
        try {
            if (!StringUtil.isNullOrEmpty(doid)) {

                String query = " SELECT dodist.id FROM dodistmapping dodist "
                        + " INNER JOIN dodetails dod ON dodist.dod = dod.id "
                        + " INNER JOIN deliveryorder dor ON dor.id = dod.deliveryorder "
                        + " where dor.id=?";
                params.add(doid);
                list = executeSQLQuery(query, params.toArray());
                if (!list.isEmpty()) {
                    ispickpackdo = true;
                }
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("isPickPackShipDO : " + ex.getMessage(), ex);
        } 
        return ispickpackdo;
    }
    
    /**
     * ERP-34156
     * @desc checks if pickpackDO created
     * @param params (companyid)
     * @return true (for Present) and false (for Not Present)
     * @throws ServiceException 
     */
    @Override
    public KwlReturnObject isPickPackShipDOPresent(Map<String, Object> params) throws ServiceException {
        List<Object> queryParams = new ArrayList();
        Boolean isPickPackDOPresent = false;
        String defaultQuery = " SELECT dodist.id FROM dodistmapping dodist "
                    + " INNER JOIN dodetails dod ON dodist.dod = dod.id ";
        String conditions = "";
        /**
         * Check if PickPack DO present for particular company.
         */
        if(params.containsKey(Constants.companyid)){
            conditions = " WHERE ";
            conditions += " dod.company=?";
            queryParams.add(params.get(Constants.companyid).toString());
        }
        String q = defaultQuery + conditions;
        List res = executeSQLQuery(q, queryParams.toArray());
        if(res.size()>0){
            isPickPackDOPresent = true;
        }
        return new KwlReturnObject(isPickPackDOPresent, "", "", null, 0);
    }
    
  @Override
    public KwlReturnObject checklinkingofTransactions(String moduleid, String billids) throws ServiceException {
        List list = null;
        int count = 0;
        try {
            ArrayList params = new ArrayList();
            billids = AccountingManager.getFilterInString(billids);
            params.add(moduleid);
            String mysqlQuery = "select sourcetransactionid,sourcemodule,destinationtransactionid,destinationmodule from groupcompany_transactionmapping where destinationtransactionid IN " + billids + " and sourcemodule=? and sourcetransactionid IS NOT  NULL and sourcetransactionid!=''";

            list = executeSQLQuery(mysqlQuery, params.toArray());
            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.checklinkingofTransactions:" + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    
    @Override
    public List getInvoiceDetailsTermMap(String invoicedetailId) throws ServiceException {
        List list = null;
        try {
            String query = "FROM InvoiceDetailTermsMap idt WHERE idt.invoicedetail.ID = ?";
            list = executeQuery( query, new Object[]{invoicedetailId});
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getInvoiceDetailsTermMap : " + ex.getMessage(), ex);
        }
        return list;
    }
    /**
     * Get Additional memo details from table
     * @param reqParams
     * @return
     * @throws ServiceException 
     */
    @Override
    public List<AdditionalMemo> getAdditionalMemo(JSONObject reqParams) throws ServiceException {
        List<AdditionalMemo> list = null;
        try {
            String query = " FROM AdditionalMemo ";
            list = executeQuery(query);
        } catch (Exception ex) {
            throw ServiceException.FAILURE("getAdditionalMemo : " + ex.getMessage(), ex);
        }
        return list;
    }
    
    @Override
    public double getReturnQuantityofDOorSI(String detailid, String companyid, Boolean isreqfromDO) throws ServiceException {
        
        double returnQuantity = 0;
        String query = "SELECT SUM(srd1.returnquantity) FROM srdetails srd1 WHERE srd1.id IN (";
        try{
        if(isreqfromDO){
            
            query += "SELECT srd.id FROM srdetails srd "
                    + "INNER JOIN (SELECT vcdtl.* from dodetails dod "
                    + "INNER JOIN invoicedetails vcdtl ON dod.id=vcdtl.deliveryorderdetail "
                    + "WHERE dod.id='" + detailid + "' "
                    + "UNION "
                    + "SELECT vcdtl.* from dodetails dod "
                    + "INNER JOIN invoicedetails vcdtl ON dod.cidetails=vcdtl.id "
                    + "WHERE dod.id='" + detailid + "') as t ON t.id=srd.cidetails "
                    
                    + "UNION "
                    
                    + "SELECT srd.id FROM srdetails srd "
                    + "INNER JOIN (SELECT dod.* from dodetails dod "
                    + "INNER JOIN invoicedetails vcdtl ON dod.id=vcdtl.deliveryorderdetail "
                    + "WHERE dod.id='" + detailid + "' "
                    + "UNION "
                    + "SELECT dod.* from dodetails dod "
                    + "INNER JOIN invoicedetails vcdtl ON dod.cidetails=vcdtl.id "
                    + "WHERE dod.id='" + detailid + "') as t ON t.id=srd.dodetails";
        
        } else {
            
            query += "SELECT srd.id FROM srdetails srd "
                    + "INNER JOIN (SELECT vcdtl.* from dodetails dod "
                    + "INNER JOIN invoicedetails vcdtl ON dod.id=vcdtl.deliveryorderdetail "
                    + "WHERE vcdtl.id='" + detailid + "' "
                    + "UNION "
                    + "SELECT vcdtl.* from dodetails dod "
                    + "INNER JOIN invoicedetails vcdtl ON dod.cidetails=vcdtl.id "
                    + "WHERE vcdtl.id='" + detailid + "') as t ON t.id=srd.cidetails "
                    
                    + "UNION "
                    
                    + "SELECT srd.id FROM srdetails srd "
                    + "INNER JOIN (SELECT dod.* from dodetails dod "
                    + "INNER JOIN invoicedetails vcdtl ON dod.id=vcdtl.deliveryorderdetail "
                    + "WHERE vcdtl.id='" + detailid + "' "
                    + "UNION "
                    + "SELECT dod.* from dodetails dod INNER JOIN "
                    + "invoicedetails vcdtl ON dod.cidetails=vcdtl.id "
                    + "WHERE vcdtl.id='" + detailid + "') as t ON t.id=srd.dodetails";
        }
        
        query += ") and srd1.company='"+ companyid +"'";
        
        List list =  executeSQLQuery(query);
        Iterator rs = list.iterator();
            while (rs.hasNext()) {
                Object Obj = (Object) rs.next();
                returnQuantity = Double.parseDouble(Obj == null ? "0" : Obj.toString());
            }
        
        }catch (Exception ex){
            throw ServiceException.FAILURE("AccInvoiceServiceImpl.getReturnQuantityofDOorSI:" + ex.getMessage(), ex);
        }
        return returnQuantity;
    }
    /*
    * Following function is to get the sales return quantity.
    */
    public double getReturnQuantityofDOorSIForSR(String detailid, String companyid, String batchmapid) throws ServiceException {

        double returnQuantity = 0;
        ArrayList params = new ArrayList();
        String query = " SELECT SUM(lcm.quantity) as qty FROM srdetails srd "
                + " INNER JOIN locationbatchdocumentmapping lcm  ON srd.id=lcm.documentid "
                + " WHERE srd.dodetails='"+detailid+"' AND batchmapid='"+batchmapid+"' and transactiontype=29 AND srd.company='"+companyid+"'";

        List list = executeSQLQuery(query);
        Iterator rs = list.iterator();
        while (rs.hasNext()) {
                Object Obj = (Object) rs.next();
                returnQuantity = Double.parseDouble(Obj == null ? "0" : Obj.toString());
        }
        return returnQuantity;
    }

    /**
     * Get LIinking in for invoice
     *
     * @param reqParams
     * @return
     * @throws ServiceException
     */
    public KwlReturnObject getSalesReportMasterData(JSONObject reqParams) throws ServiceException, JSONException, ParseException {
        ArrayList params = new ArrayList();

        DateFormat df = (DateFormat) reqParams.get(Constants.df);
        params.add(reqParams.opt("companyid"));

        String condition = "";

        String startDate = "";
        String endDate = "";
        boolean isExport = false;
        if (reqParams.has(Constants.REQ_startdate) && reqParams.get(Constants.REQ_startdate) != null) {

            startDate = (String) reqParams.get(Constants.REQ_startdate);
        }

        if (reqParams.has(Constants.REQ_enddate) && reqParams.get(Constants.REQ_enddate) != null) {

            endDate = (String) reqParams.get(Constants.REQ_enddate);
        }
        
        if (reqParams.has("isExport") && reqParams.get("isExport") != null) {

            isExport = Boolean.parseBoolean(reqParams.get("isExport").toString());
        }

        if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
            condition += "and (invoice.creationdate >=? and invoice.creationdate <=?)";

            params.add(df.parse(startDate));
            params.add(df.parse(endDate));
        }

        String start = "";
        String limit = "";

//        if (reqParams.opt(Constants.start) != null && reqParams.optString(Constants.limit) != null && !isExport) {
//            start = (String) reqParams.get(Constants.start);
//            limit = (String) reqParams.get(Constants.limit);
//        }

        String productCustomField = reqParams.has("productCustomFieldArray") && reqParams.get("productCustomFieldArray") != null ? reqParams.getString("productCustomFieldArray") : "";

        String customColumn = "";
        String customQueryCondition = "";
        String customQueryConditionForCustomer = "";

        if (!StringUtil.isNullOrEmpty(productCustomField) && !productCustomField.equals("[]")) {

            customQueryCondition += "left join accproductcustomdata on accproductcustomdata.productId = product.id ";

            JSONArray productCustomFieldArray = new JSONArray(productCustomField);

            customColumn += ", ";
            for (int i = 0; i < productCustomFieldArray.length(); i++) {

                customColumn += "accproductcustomdata." + productCustomFieldArray.getString(i) + " as productCustom" + i + " ,";
            }
            customColumn = customColumn.substring(0, customColumn.length() - 2);
        }

        String customerCustomField = reqParams.has("customerCustomFieldArray") && reqParams.get("customerCustomFieldArray") != null ? reqParams.getString("customerCustomFieldArray") : "";

        if (!StringUtil.isNullOrEmpty(customerCustomField) && !customerCustomField.equals("[]")) {

            customQueryConditionForCustomer += "left join customercustomdata on customercustomdata.customerId = customer.id ";

            JSONArray customerCustomFieldArray = new JSONArray(customerCustomField);

            customColumn += ", ";

            for (int i = 0; i < customerCustomFieldArray.length(); i++) {

                customColumn += "customercustomdata." + customerCustomFieldArray.getString(i) + " as customerCustom" + i + " ,";
            }
            customColumn = customColumn.substring(0, customColumn.length() - 2);
        }

        /* ----Make final query variable StringBuilder type------- */
        String finalQuery = "select invoice.invoicenumber as invoicenumber , invoice.id as invoiceid, COALESCE(journalentry.entrydate,invoice.creationdate)  as invoicedate , invoice.invoiceamount as invoiceamount , invoice.invoiceamountinbase as invoiceamountinbase , GROUP_CONCAT(DISTINCT deliveryorder.donumber SEPARATOR ',') as deliveryordernumber , deliveryorder.id as  deliveryorderid , deliveryorder.orderdate as deliveryorderdate , salesorder.sonumber as salesordernumber , salesorder.id as salesorderid , salesorder.orderdate as salesorderdate , ";

        finalQuery += " customer.name as customername , customer.acccode as customercode , customer.aliasname as aliasname , item1.value as customertype  , currency.name as currency , country.countryname as countryname , item2.code as salespersoncode , ";
        
        finalQuery += "product.name as productname , product.productid as productid , invoicedetails.description as productdescription, inventory.quantity as quantity , invoicedetails.rate as unitprice , uom.name as productuom ,"
                + " GROUP_CONCAT(DISTINCT IFNULL(npb.batchname , npb1.batchname) SEPARATOR ',') as batchname , GROUP_CONCAT(DISTINCT IFNULL(nbs.serialname , nbs1.serialname) SEPARATOR ',') as serialname , account.name as accountname ,"
                + " vendor.acccode as acccode ,currency.symbol, GROUP_CONCAT(DISTINCT item3.value SEPARATOR ',') as customercategory, product.id as pid, GROUP_CONCAT(DISTINCT deliveryorder.id SEPARATOR ',') as doid, salesorder.id as soid,"
                + " invoice.excludinggstamount as excludinggstamount, invoice.excludinggstamountinbase as excludinggstamountinbase, invoicedetails.rowexcludinggstamountinbase as salesrevenueinbasecurrency, (invoicedetails.rate * inventory.quantity) as salesrevenue,"
                + " IFNULL(dod5.id,dod6.id) as dodetailsid, GROUP_CONCAT(DISTINCT salesreturn.id SEPARATOR ',') as srid, GROUP_CONCAT(DISTINCT salesreturn.srnumber SEPARATOR ',') as srnumber, salesreturn.orderdate as srdate,"
                + " GROUP_CONCAT(DISTINCT creditnote1.cnid SEPARATOR ',') as cnid, GROUP_CONCAT(DISTINCT creditnote1.cnnumber SEPARATOR ',') as cnnumber, creditnote1.cndate as cndate" + customColumn +" from invoice ";

        finalQuery += "left join journalentry on journalentry.id = invoice.journalentry ";
        
        finalQuery += "left join customer on invoice.customer = customer.id " + customQueryConditionForCustomer + " left join masteritem item1 on customer.gstcustomertype = item1.id   left join currency on invoice.currency = currency.currencyid  left join country on customer.country=country.id  ";

        finalQuery += "left join masteritem item2 ON invoice.mastersalesperson = item2.id ";
        
        finalQuery += "left join customercategorymapping ccm ON ccm.customerid = customer.id left JOIN masteritem item3 ON item3.id = ccm.customercategory ";
        
        finalQuery += "left join invoicedetails on invoicedetails.invoice = invoice.id  left join inventory on invoicedetails.id = inventory.id  left join product on product.id = inventory.product  left join uom on inventory.uom = uom.id  left join account on product.salesAccount = account.id  left join vendor on product.vendor=vendor.id  ";

        finalQuery += customQueryCondition;

        finalQuery += "left join dodetails dod1  ON invoicedetails.deliveryorderdetail=dod1.id left JOIN locationbatchdocumentmapping lbdm1 ON lbdm1.documentid=dod1.id left JOIN newproductbatch npb ON npb.id=lbdm1.batchmapid  ";

        finalQuery += "left join dodetails dod2 ON invoicedetails.id=dod2.cidetails left JOIN locationbatchdocumentmapping  lbdm2 ON lbdm2.documentid=dod2.id left JOIN newproductbatch npb1 ON npb1.id=lbdm2.batchmapid  ";

        finalQuery += "left join dodetails dod3 ON dod3.cidetails = invoicedetails.id  left JOIN serialdocumentmapping sdm1 ON sdm1.documentid=dod3.id left JOIN newbatchserial nbs ON nbs.id=sdm1.serialid ";

        finalQuery += "left join dodetails dod4 ON invoicedetails.deliveryorderdetail=dod4.id left JOIN serialdocumentmapping sdm2 ON sdm2.documentid=dod4.id left JOIN newbatchserial nbs1 ON nbs1.id=sdm2.serialid ";

        finalQuery += " left join dodetails dod5 ON dod5.cidetails = invoicedetails.id ";
        
        finalQuery += " left join dodetails dod6 on dod6.id= invoicedetails.deliveryorderdetail ";
        
        finalQuery += "left join ( select deliveryorder.donumber, deliveryorder.id , deliveryorder.orderdate, invoicelinking.linkeddocid ,invoicelinking.docid, dod.product from deliveryorder inner join invoicelinking on deliveryorder.id = invoicelinking.linkeddocid inner join  invoicedetails on invoicedetails.invoice = invoicelinking.docid   inner join inventory on invoicedetails.id = inventory.id inner join dodetails dod on dod.deliveryorder = deliveryorder.id and dod.product = inventory.product   where ( deliveryorder.isfixedassetdo = false and deliveryorder.isleasedo = false and deliveryorder.isconsignment = 'F' and deliveryorder.approvestatuslevel = 11) ) as deliveryorder on deliveryorder.docid = invoice.id and deliveryorder.product=inventory.product   ";
        
        finalQuery += "left join ( select salesreturn.srnumber, salesreturn.id , salesreturn.orderdate, invoicelinking.linkeddocid ,invoicelinking.docid, srd.product from salesreturn inner join invoicelinking on salesreturn.id = invoicelinking.linkeddocid inner join  invoicedetails on invoicedetails.invoice = invoicelinking.docid   inner join inventory on invoicedetails.id = inventory.id inner join srdetails srd on srd.salesreturn = salesreturn.id and srd.product = inventory.product  where ( salesreturn.isfixedasset = false and salesreturn.isleasesalesreturn = false and salesreturn.isconsignment = 'F') ) as salesreturn on salesreturn.docid = invoice.id and salesreturn.product=inventory.product   ";
        
        finalQuery += "left join ( select creditnote.cnnumber as cnnumber, creditnote.id as cnid, creditnote.creationdate as cndate, invoicelinking.linkeddocid ,invoicelinking.docid, cnd.invoice as invid from creditnote inner join invoicelinking on creditnote.id = invoicelinking.linkeddocid inner join  invoicedetails on invoicedetails.invoice = invoicelinking.docid   inner join inventory on invoicedetails.id = inventory.id inner join cndetails cnd on cnd.creditNote = creditnote.id) as creditnote1 on creditnote1.invid = invoice.id   ";

        /*
         * The salesorderid and deliveryorderid in group by are removed because it was fetching the duplicate rows
         */
        
        finalQuery += "left join ( select salesorder.sonumber ,salesorder.id ,salesorder.orderdate , invoicelinking.docid from salesorder inner join invoicelinking on salesorder.id = invoicelinking.linkeddocid   where ( salesorder.leaseOrMaintenanceSO=0 or salesorder.leaseOrMaintenanceSO=2)  and salesorder.istemplate != 2 and salesorder.approvestatuslevel = 11 ) as salesorder on salesorder.docid = invoice.id  where invoice.company = ?  " + condition + " and invoice.approvestatuslevel = 11 and ( invoice.isfixedassetinvoice = false and invoice.isfixedassetleaseinvoice = false and invoice.istemplate != 2 and invoice.isdraft = false and invoice.isconsignment = 'F' and   invoice.deleteflag = 'F' ) group by invoiceid , inventory.id order by invoicedate";

        List list = list = executeSQLQuery(finalQuery, params.toArray());
        int count = list.size();
        if (StringUtil.isNullOrEmpty(start) == false && StringUtil.isNullOrEmpty(limit) == false) {
            list = executeSQLQueryPaging(finalQuery, params.toArray(), new Integer[]{Integer.parseInt(start), Integer.parseInt(limit)});
        }

        return new KwlReturnObject(true, "", null, list, count);
    }

    
    @Override
    public KwlReturnObject isPackingStoreUsedBefore(Map<String, Object> params) throws ServiceException {
        List<Object> queryParams = new ArrayList();
        Boolean isPackingStoreUsedBefore = false;
        String defaultQuery = " SELECT count(*) FROM product pr";
        String conditions = "";
        BigInteger Count = BigInteger.ZERO;
       
        if(params.containsKey(Constants.companyid) && params.get(Constants.companyid)!=null){
            conditions = " WHERE ";
            conditions += " pr.company=?";
            queryParams.add(params.get(Constants.companyid).toString());
        }
        if(params.containsKey("warehouse") && params.get("warehouse")!=null){
            conditions += " and pr.warehouse=?";
            queryParams.add(params.get("warehouse").toString());
        }
        String q = defaultQuery + conditions;
        List res = executeSQLQuery(q, queryParams.toArray());
        if (!res.isEmpty() && !StringUtil.isNullObject(res)) {
                    Count = (BigInteger) res.get(0);
        }
        if(Count.compareTo(BigInteger.ZERO)==-1 || Count.compareTo(BigInteger.ZERO)==0){
        List<Object> resultlist = new ArrayList<>();
        List query_params = new ArrayList();
        if(params.containsKey(Constants.companyid) && params.containsKey("warehouse") && params.get(Constants.companyid)!=null && params.get("warehouse")!=null){
        query_params.add(params.get(Constants.companyid).toString());
        query_params.add(params.get("warehouse").toString());
        String query = "select count(*) from dodistmapping do right join (select sm.modulerefdetailid from in_stockmovement sm left join dodistmapping d on d.ist=sm.modulerefdetailid where sm.company=? and sm.store=? and d.ist is null) as temp on temp.modulerefdetailid=do.stockadjustment where do.stockadjustment is null";
        resultlist = executeSQLQuery(query, query_params.toArray());
        if (!resultlist.isEmpty() && !StringUtil.isNullObject(resultlist)) {
                  Count = (BigInteger) resultlist.get(0);         
        }
       } 
        }  
        if(Count.compareTo(BigInteger.ZERO)==1){
            isPackingStoreUsedBefore = true;
        }
        return new KwlReturnObject(isPackingStoreUsedBefore, "", "", null, 0);
    }
    /**
     * Update memo for IST request at a time of Pick Pack DO creation
     * @param memo
     * @param doid
     * @param companyid
     */
    @Override
    public void updateMemoForPickPackDOIST(String memo, String doid, String companyid) {
        try {
            String sqlQuery = "update dodistmapping dodm inner join dodetails dod on dod.id = dodm.dod inner join deliveryorder do on do.id = dod.deliveryorder inner join in_interstoretransfer ist on ist.id = dodm.ist set ist.memo = ? where do.company = ? and do.id = ?";
            executeSQLUpdate(sqlQuery, new Object[]{memo, companyid, doid});
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
    }
    /**
     * SDP-14735
     *
     * @param paramJObj
     */
    @Override
    public void saveSalesInvoiceRequestData(JSONObject paramJObj, boolean isBeforeSave) {
        try {
            String UUIDstr = UUID.randomUUID().toString();
            String companyid = paramJObj.optString(Constants.companyid, "");
            String saveinvoicebefore_or_after = isBeforeSave ? "Before Invoice Save" : "After Invoice Save";
            String sqlQuery = " insert into saveinvoiceparams_temp (id, paramsjson,saveinvoicebefore_or_after,companyid) values (?,?,?,?) ";
            executeSQLUpdate(sqlQuery, new Object[]{UUIDstr, paramJObj.toString(), saveinvoicebefore_or_after, companyid});
        } catch (Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.WARNING, ex.getMessage());
        }
    }
    /**
     * SDP-14735
     *
     * @param reqParams
     * @return
     * @throws ServiceException
     * @throws JSONException
     */
    public List getGSTDocumentHistory(JSONObject reqParams) throws ServiceException, JSONException {
        String refdocid = reqParams.optString("invoiceid");
        String query = "select id,custventypeid,gstrtype,gstin from gstdocumenthistory where refdocid=?";
        List list = executeSQLQuery(query.toString(), new Object[]{refdocid});
        return list;
    }
    /**
     * Function to check if a DO has gone through QA Approval process 
     * check for an entry in dodqcistmapping table.
     * @param doid
     * @param companyid
     * @return
     * @throws ServiceException
     */
    @Override
    public boolean isQCEnabledDO(String doid, String companyid) throws ServiceException {
        List resultlist = null;
        Boolean isqcDO = false;
        ArrayList params = new ArrayList();
        try {
            if (!(StringUtil.isNullOrEmpty(doid) && StringUtil.isNullOrEmpty(companyid))) {
                String query = " SELECT dodqcist.id FROM dodqcistmapping dodqcist "
                        + " INNER JOIN dodetails dod ON dodqcist.dodetailid = dod.id "
                        + " INNER JOIN deliveryorder dor ON dor.id = dod.deliveryorder "
                        + " where dor.id=? and dor.company=?";
                params.add(doid);
                params.add(companyid);
                resultlist = executeSQLQuery(query, params.toArray());
                isqcDO = !resultlist.isEmpty();
            }
        } catch (Exception ex) {
            throw ServiceException.FAILURE("isQCEnabledDO : " + ex.getMessage(), ex);
        }
        return isqcDO;
    }
    
    public double getShippingQuantity(Map<String, Object> map) throws ServiceException {
        List list = new ArrayList();
        double qty = 0.0;
        ArrayList params = new ArrayList();
        if(map.containsKey("dodid")){
            String dodid=(String)map.get("dodid");
            String query=" select sum(shippedQty) from dodistmapping where dod=?";
            list=executeSQLQuery(query, new Object[]{dodid});
            if(!list.isEmpty() && list.get(0)!=null){
                qty=(Double)list.get(0);
            }            
        }       
        return qty;
    }
     public List<LocationBatchDocumentMapping> getLocationBatchMapdoct(String id) throws ServiceException {

        List<LocationBatchDocumentMapping> resultlist = new ArrayList<>();
        ArrayList params = new ArrayList();
        String myquery4 = " select batchmapid,id from locationbatchdocumentmapping where documentid=? ";
        params.add(id);
        List list4 = executeSQLQuery(myquery4, params.toArray());
        Iterator itr4 = list4.iterator();
        while (itr4.hasNext()) {
            Object[] objArr = (Object[]) itr4.next();
            LocationBatchDocumentMapping locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
            if (locationBatchDocumentMapping != null) {
                resultlist.add(locationBatchDocumentMapping);
            }
        }

        return resultlist;
    }
    public List<SerialDocumentMapping> getSerialBatchMapdoct(String id) throws ServiceException {

        List<SerialDocumentMapping> resultlist = new ArrayList<>();
        Boolean isqcDO = false;
        ArrayList params = new ArrayList();
        String myquery4 = " select serialid,id from serialdocumentmapping where documentid =? ";
        params.add(id);

        List list4 = executeSQLQuery(myquery4, params.toArray());
        Iterator itr4 = list4.iterator();
        while (itr4.hasNext()) {
            Object[] objArr = (Object[]) itr4.next();
            SerialDocumentMapping serialDocumentMapping = (SerialDocumentMapping) get(SerialDocumentMapping.class, (String) objArr[1]);
            if (serialDocumentMapping != null) {
                resultlist.add(serialDocumentMapping);
            }
        }

        return resultlist;
    }
     
    public void deleteSalesOrderSerialDetails(String sodids,String companyid) throws ServiceException {
        String query = "delete ser.* from serialdocumentmapping ser inner join newbatchserial nb on ser.serialid=nb.id where ser.documentid in ("+sodids+") and nb.company='"+companyid+"'";
        executeSQLUpdate(query); 
        query = "delete lbd.* from locationbatchdocumentmapping lbd inner join newproductbatch nb on lbd.batchmapid=nb.id where lbd.documentid in ("+sodids+") and nb.company='"+companyid+"'";
        executeSQLUpdate(query);
    }
    
    @Override
     public HashSet<String> getDOShippedArray(Map<String, String> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        StringBuilder doshipquery = new StringBuilder("Select distinct dor.id FROM dodetails dd "
                + " INNER JOIN deliveryorder dor on dor.id = dd.deliveryorder "
                + " INNER JOIN product p on dd.product=p.id "
                + " LEFT JOIN shippingdeliverydetails sd on dd.id=sd.dod"
                + " WHERE dor.company = ? and dor.status = (select id from masteritem where value = ? and company = ?) and p.producttype = ? and sd.shipqty is null");
        HashSet<String> doids = new HashSet<>();
        try {
            String companyid = requestParams.get("companyid") != null ? (String) requestParams.get("companyid") : "";
            params.add(companyid);
            params.add("shipped");
            params.add(companyid);
            params.add(Constants.SERVICE);

            List<String> list = executeSQLQuery(doshipquery.toString(), params.toArray());
            if(!list.isEmpty() && list!=null){
                for (String x : list) {
                    doids.add(x);
                }
            }            
            list = null;
            doshipquery = null;            
        } catch (Exception ex) {
            throw ServiceException.FAILURE("accInvoiceImpl.getDOpackedShippedQty : " + ex.getMessage(), ex);
        }
          return doids;
    }
     
    //ERP-38641 :Add proper check while delete Sales return transaction for stock
    public JSONObject getQuantityDueToDeleteSalesReturn(Company company, String referenceId) throws ServiceException {

        String docids = "", productIds = "";
        LocationBatchDocumentMapping locationBatchDocumentMapping = null;
        HashMap<String, Object> batchUpdateQtyMap;
        JSONObject jobj = new JSONObject();
        boolean isQuantityAvailable = true;
        try {
            
            ArrayList params1 = new ArrayList();
            params1.add(company.getCompanyID());
            params1.add(referenceId);
            String query1 = "select srd.id from srdetails srd inner join salesreturn sr on sr.id=srd.salesreturn where sr.company = ? and sr.id=?";
            List listBatch = executeSQLQuery(query1, params1.toArray());
            Iterator itrBatch = listBatch.iterator();
            while (itrBatch.hasNext()) {
                String batchstring = itrBatch.next().toString();
                docids += "'" + batchstring + "',";
            }
            if (!StringUtil.isNullOrEmpty(docids)) {
                docids = docids.substring(0, docids.length() - 1);
            }

            ArrayList params2 = new ArrayList();
            String query2 = " select batchmapid,id,stocktype from locationbatchdocumentmapping where documentid in (" + docids + ") and isconsignment='F'";

            List list2 = executeSQLQuery(query2, params2.toArray());
            Iterator itr2 = list2.iterator();
            while (itr2.hasNext()) {
                Object[] objArr = (Object[]) itr2.next();
                locationBatchDocumentMapping = (LocationBatchDocumentMapping) get(LocationBatchDocumentMapping.class, (String) objArr[1]);
                Double quantityDue = 0.0;
                String query3 = "select quantitydue,product from newproductbatch where id = ? AND company = ?";
                ArrayList params3 = new ArrayList();
                params3.add(objArr[0]);
                params3.add(company.getCompanyID());
                List listquantitydue = executeSQLQuery(query3, params3.toArray());
                Iterator itrQuantityDue = listquantitydue.iterator();
                while (itrQuantityDue.hasNext()) {
                    Object[] obj = (Object[]) itrQuantityDue.next();
                    quantityDue = (Double) obj[0];
                    if (quantityDue < locationBatchDocumentMapping.getQuantity()) {
                        isQuantityAvailable = false;
                        productIds += "" + obj[1] + ",";
                    }
                }
            }
            if (!StringUtil.isNullOrEmpty(productIds)) {
                productIds = productIds.substring(0, productIds.length() - 1);
                jobj.put("productIds", productIds);
            }

            jobj.put("isQuantityAvailable", isQuantityAvailable);
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return jobj;
    }

    //ERP-38641 :Add proper check while delete Sales return transaction for stock
    public JSONObject getTransactionsToDeleteSalesReturn(Company company, String referenceId) throws ServiceException {

        boolean isStockNegative = false;
        JSONObject obj = new JSONObject();
        String warehouse = null,location = null,batch = null,productIds="";
        try {
            String query = "select srd.returnquantity,srd.product,sr.createdon from srdetails srd inner join salesreturn sr on sr.id=srd.salesreturn where sr.company = ? and sr.id=?";
            ArrayList params = new ArrayList();
            params.add(company.getCompanyID());
            params.add(referenceId);
            List srdetails = executeSQLQuery(query, params.toArray());
            Iterator itr = srdetails.iterator();
            while (itr.hasNext()) {
                Object[] objArray = (Object[]) itr.next();
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                long dateValueLong = ((BigInteger) objArray[2]).longValue();
                String date=""+sdf.format(new java.util.Date(dateValueLong));

                String query1 = "select smd.batchname,sm.store,smd.location from in_stockmovement sm inner join in_sm_detail smd on sm.id = smd.stockmovement where sm.modulerefid =? and sm.product=?;";
                ArrayList params2 = new ArrayList();
                params2.add(referenceId);
                params2.add(objArray[1].toString());
                List listwarehouselocation = executeSQLQuery(query1,params2.toArray());
                Iterator itrwarehouselocation = listwarehouselocation.iterator();
                while (itrwarehouselocation.hasNext()) {
                    Object[] objWarehouseLocation = (Object[]) itrwarehouselocation.next();
                    batch = (String) objWarehouseLocation[0];
                    warehouse = (String) objWarehouseLocation[1];
                    location = (String) objWarehouseLocation[2];

                    String query2 = "select sum(case when transaction_type=2 then -sm.quantity else sm.quantity end) as sumquantity "
                            + "from in_stockmovement sm inner join in_sm_detail smd on sm.id = smd.stockmovement where "
                            + "sm.product=? AND sm.company=? and sm.createdon < ? and sm.store =? and smd.location =?"; 
                    ArrayList params1 = new ArrayList();
                    params1.add((String)objArray[1]);
                    params1.add(company.getCompanyID());
                    params1.add(date);
                    params1.add(warehouse);
                    params1.add(location);
                    if(!batch.equals(""))
                    {
                        query2 = query2+" and smd.batchname = ?";
                        params1.add(batch);
                    }

                    List listQuantity = executeSQLQuery(query2, params1.toArray());
                    Double quantity = 0.0;
                    Iterator itrQuantity = listQuantity.iterator();
                    while (itrQuantity.hasNext()) {
                        quantity =(Double) itrQuantity.next();
                        quantity=quantity!=null?quantity:0;
                    }
                    double balance = quantity;

                    String query3 = "select sm.transaction_type, sm.quantity,sm.product "
                            + "from in_stockmovement sm inner join in_sm_detail smd on sm.id = smd.stockmovement where "
                            + "sm.product=? AND sm.company=? and sm.createdon > ? and sm.store =? and smd.location =?";
                    if(!batch.equals(""))
                    {
                        query3 = query3+" and smd.batchname = ?";
                    }
                    List listAllTransaction = executeSQLQuery(query3, params1.toArray());
                    Iterator itrTransactionQuantity = listAllTransaction.iterator();
                    while (itrTransactionQuantity.hasNext()) {
                        Object[] objArr = (Object[]) itrTransactionQuantity.next();
                        if ((int) objArr[0] == 2) {
                            balance = balance - (Double) objArr[1];
                        } else {
                            balance = balance + (Double) objArr[1];
                        }
                        if (balance < 0) {
                            productIds = productIds +" "+objArr[2]+",";
                            isStockNegative = true;
                            break;
                        }
                    }
                }
            }
            
            obj.put("isStockNegative",isStockNegative);
            if (!StringUtil.isNullOrEmpty(productIds)) {
                productIds = productIds.substring(0, productIds.length() - 1).trim();
                obj.put("productIds", productIds);
            }
        } catch (JSONException ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return obj;
    }
    
    public double getDOPickedQty(Map<String, Object> map) throws ServiceException {
        String doid = "";
        Double qty = 0.0;
        if(map.containsKey("doid") && map.get("doid")!=null){
            doid = map.get("doid").toString();
        }
        String query = "select sum(pickedqty) from dodistmapping dodist inner join dodetails dod on dod.id = dodist.dod where dod.deliveryorder = '"+doid+"'";
        List l = executeSQLQuery(query);
        if(!l.isEmpty() && l!=null){
            qty = (Double)l.get(0);
        }
        return qty;   
    }
    
    public KwlReturnObject getExternalCurrencyRateForInvoice(String invId, String companyId) throws ServiceException {
        List list = new ArrayList();

        List<String> params = new ArrayList<>();

        String Query = "select je.externalcurrencyrate from invoice inv\n"
                + "inner join journalentry je on je.id = inv.journalentry\n"
                + "where inv.id =? and inv.company = ?";

        params.add(invId);
        params.add(companyId);

        list = executeSQLQuery(Query, params.toArray());

        return new KwlReturnObject(true, " success ", null, list, list.size());
     }
    
    public KwlReturnObject getCreditNoteDetailsForSalesReport(JSONObject reqParams) throws ServiceException {
        List list1 = new ArrayList();
        List list2 = new ArrayList();
        List list = new ArrayList();

        try{
            ArrayList cnWithSR_params = new ArrayList();
            ArrayList cn_overcharged_params = new ArrayList();
            String condition = "", startDate = "", endDate = "", companyId = "";

            DateFormat df = (DateFormat) reqParams.get(Constants.df);

            if (reqParams.has(Constants.REQ_startdate) && reqParams.get(Constants.REQ_startdate) != null) {
                startDate = (String) reqParams.get(Constants.REQ_startdate);
            }

            if (reqParams.has(Constants.REQ_enddate) && reqParams.get(Constants.REQ_enddate) != null) {
                endDate = (String) reqParams.get(Constants.REQ_enddate);
            }

            if (reqParams.has(Constants.companyKey) && reqParams.get(Constants.companyKey) != null) {
                companyId = (String) reqParams.get(Constants.companyKey);
            }

            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " (cn.creationdate >=? and cn.creationdate <=?) and ";

                cnWithSR_params.add(df.parse(startDate));
                cnWithSR_params.add(df.parse(endDate));
                
                cn_overcharged_params.add(df.parse(startDate));
                cn_overcharged_params.add(df.parse(endDate));
            }
            
            String productCustomField = reqParams.has("productCustomFieldArray") && reqParams.get("productCustomFieldArray") != null ? reqParams.getString("productCustomFieldArray") : "";

            String customColumn = "";
            String customQueryCondition = "";
            String customQueryConditionForCustomer = "";

            if (!StringUtil.isNullOrEmpty(productCustomField) && !productCustomField.equals("[]")) {

                customQueryCondition += "left join accproductcustomdata on accproductcustomdata.productId = p.id ";

                JSONArray productCustomFieldArray = new JSONArray(productCustomField);

                customColumn += ", ";
                for (int i = 0; i < productCustomFieldArray.length(); i++) {

                    customColumn += "accproductcustomdata." + productCustomFieldArray.getString(i) + " as productCustom" + i + " ,";
                }
                customColumn = customColumn.substring(0, customColumn.length() - 2);
            }

            String customerCustomField = reqParams.has("customerCustomFieldArray") && reqParams.get("customerCustomFieldArray") != null ? reqParams.getString("customerCustomFieldArray") : "";

            if (!StringUtil.isNullOrEmpty(customerCustomField) && !customerCustomField.equals("[]")) {

                customQueryConditionForCustomer += "left join customercustomdata on customercustomdata.customerId = c.id ";

                JSONArray customerCustomFieldArray = new JSONArray(customerCustomField);

                customColumn += ", ";

                for (int i = 0; i < customerCustomFieldArray.length(); i++) {

                    customColumn += "customercustomdata." + customerCustomFieldArray.getString(i) + " as customerCustom" + i + " ,";
                }
                customColumn = customColumn.substring(0, customColumn.length() - 2);
            }
            
            /**
             * CN with Sales Return
             */
            String cnWithSR_sqlQuery = "select cn.cnnumber as cnno, cn.id as cnid, cn.creationdate as cndate, cn.cnamount as cnamount, cn.cnamountinbase as cnamountinbase, c.acccode as customercode, "
                    + "c.name as customername, c.aliasname as aliasname, item1.value as customertype, cur.name as currency, item2.code as salespersoncode, cnltd.tamount as cntamount, "
                    + "cur2.symbol as cncurrency, sr.externalcurrencyrate, sr.id as srid, sr.srnumber as srno, sr.orderdate as srdate, p.productid as productid, p.name as productname, p.id as pid, "
                    + "srd.description as productdescription, srd.returnquantity as quantity, srd.rate as unitprice, uom.name as productuom, ((srd.rate / sr.externalcurrencyrate) * srd.returnquantity) as salesrevenueinbasecurrency, "
                    + "(srd.rate * srd.returnquantity) as salesrevenue, account.name as accountname, srd.id as srdid " + customColumn +" from creditnote cn inner join customer c on c.id = cn.customer "
                    + customQueryConditionForCustomer
                    + "left join customercategorymapping ccm on c.id = ccm.customerid left join masteritem item1 on ccm.customercategory = item1.id left join currency cur on c.currency = cur.currencyid "
                    + "left join masteritem item2 ON cn.salesperson = item2.id left join currency cur2 on cur2.currencyid = cn.currency left join cntaxentry cnt on cn.id = cnt.creditnote "
                    + "left join salesreturn sr on sr.id = cn.salesreturn left join srdetails srd on srd.salesreturn = sr.id left join product p on p.id = srd.product left join uom on srd.uom = uom.id "
                    + customQueryCondition
                    + "left join account on p.salesAccount = account.id  left join creditnotelinking cnl on cnl.docid = cn.id "
                    + "left join (select sum(cnd2.taxamount) as tamount, cn2.id as cnid2 from cntaxentry cnd2 left join creditnote cn2 on cn2.id = cnd2.creditnote group by cn2.id) as cnltd on cnltd.cnid2 = cn.id "
                    + "where cnl.linkeddocid = sr.id and  " + condition + " cn.company = ? group by srd.id order by cndate";

            cnWithSR_params.add(companyId);

            list1 = executeSQLQuery(cnWithSR_sqlQuery, cnWithSR_params.toArray());
            
            list.addAll(list1);
            /**
             * CN for Overcharged SI
             */
            String cn_overcharged_sqlQuery = "select cn.cnnumber as cnno, cn.id as cnid, cn.creationdate as cndate, cn.cnamount as cnamount, cn.cnamountinbase as cnamountinbase, "
                    + "c.acccode as customercode, c.name as customername, c.aliasname as aliasname, item1.value as customertype, cur.name as currency, item2.code as salespersoncode, "
                    + "cnltd.tamount as cntamount, cur2.symbol as cncurrency, inv.externalcurrencyrate, CAST(NULL as char) as srid, CAST(NULL as char) as srno, CAST(NULL as char) as srdate, "
                    + "p.productid as productid, p.name as productname, p.id as pid, cnd.description as productdescription, inventory.quantity as quantity, invd.rate as unitprice, "
                    + "uom.name as productuom, ((invd.rate / inv.externalcurrencyrate) * inventory.quantity) as salesrevenueinbasecurrency, (invd.rate * inventory.quantity) as salesrevenue, "
                    + "account.name as accountname, invd.id as invdid " + customColumn +" from creditnote cn left join customer c on c.id = cn.customer left join customercategorymapping ccm on c.id = ccm.customerid "
                    + customQueryConditionForCustomer
                    + "left join masteritem item1 on ccm.customercategory = item1.id left join currency cur on c.currency = cur.currencyid left join masteritem item2 ON cn.salesperson = item2.id "
                    + "left join currency cur2 on cur2.currencyid = cn.currency left join cndetailsgst cnd on cnd.creditnote = cn.id left join invoicedetails invd on invd.id = cnd.invoicedetail "
                    + "left join invoice inv on inv.id = invd.invoice left join inventory on inventory.id = invd.id left join  product p on p.id = inventory.product left join uom on inventory.uom = uom.id "
                    + customQueryCondition
                    + "left join account on p.salesAccount = account.id left join (select sum(cnd2.rowtaxamount) as tamount, cn2.id as cnid2 from cndetailsgst cnd2 "
                    + "left join creditnote cn2 on cn2.id = cnd2.creditnote group by cn2.id) as cnltd on cnltd.cnid2 = cn.id where cnd.invoicedetail is not NULL and cn.tax is NULL "
                    + "and "+ condition +" cn.company = ? group by invd.id \n"
                    + "union\n"
                    + "select cn.cnnumber as cnno, cn.id as cnid, cn.creationdate as cndate, cn.cnamount as cnamount, cn.cnamountinbase as cnamountinbase, c.acccode as customercode, "
                    + "c.name as customername, c.aliasname as aliasname, item1.value as customertype, cur.name as currency, item2.code as salespersoncode, cngtd.tamount as cntamount, "
                    + "cur2.symbol as cncurrency, inv.externalcurrencyrate, CAST(NULL as char) as srid, CAST(NULL as char) as srno, CAST(NULL as char) as srdate, p.productid as productid, "
                    + "p.name as productname, p.id as pid, cnd.description as productdescription, inventory.quantity as quantity, invd.rate as unitprice, uom.name as productuom, "
                    + "((invd.rate / inv.externalcurrencyrate) * inventory.quantity) as salesrevenueinbasecurrency, (invd.rate * inventory.quantity) as salesrevenue, account.name as accountname, "
                    + "invd.id as invdid " + customColumn +" from creditnote cn left join customer c on c.id = cn.customer left join customercategorymapping ccm on c.id = ccm.customerid "
                    + customQueryConditionForCustomer
                    + "left join masteritem item1 on ccm.customercategory = item1.id left join currency cur on c.currency = cur.currencyid left join masteritem item2 ON cn.salesperson = item2.id "
                    + "left join currency cur2 on cur2.currencyid = cn.currency left join cndetailsgst cnd on cnd.creditnote = cn.id left join invoicedetails invd on invd.id = cnd.invoicedetail "
                    + "left join invoice inv on inv.id = invd.invoice left join inventory on inventory.id = invd.id left join  product p on p.id = inventory.product left join uom on inventory.uom = uom.id "
                    + customQueryCondition
                    + "left join account on p.salesAccount = account.id left join (select ((tl2.percent * (sum(cnd2.returnquantity * cnd2.rate) - sum(cnd2.discount)))/100) as tamount, cn2.id as cnid2 from cndetailsgst cnd2 "
                    + "left join creditnote cn2 on cn2.id = cnd2.creditnote left join tax t2 on cn2.tax = t2.id left join taxlist tl2 on t2.id = tl2.tax group by cn2.id) as cngtd on cngtd.cnid2 = cn.id "
                    + "where cnd.invoicedetail is not NULL and cn.tax is not NULL and "+ condition +" cn.company = ? group by invd.id order by cndate";

            cn_overcharged_params.add(companyId);
            
            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {

                cn_overcharged_params.add(df.parse(startDate));
                cn_overcharged_params.add(df.parse(endDate));
            }
            cn_overcharged_params.add(companyId);
            
            list2 = executeSQLQuery(cn_overcharged_sqlQuery, cn_overcharged_params.toArray());
            
            list.addAll(list2);
            
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new KwlReturnObject(true, " success ", null, list, list.size());
    }
    /**
     * get Credit Note Otherwise and against Sales Invoice account details
     * @param reqParams
     * @return
     * @throws ServiceException 
     */
    public KwlReturnObject getCreditNoteAccountDetailsForSalesReport(JSONObject reqParams) throws ServiceException {
        List list = new ArrayList();
        try{
            ArrayList params = new ArrayList();
            String condition = "", startDate = "", endDate = "", companyId = "";

            DateFormat df = (DateFormat) reqParams.get(Constants.df);

            if (reqParams.has(Constants.REQ_startdate) && reqParams.get(Constants.REQ_startdate) != null) {
                startDate = (String) reqParams.get(Constants.REQ_startdate);
            }

            if (reqParams.has(Constants.REQ_enddate) && reqParams.get(Constants.REQ_enddate) != null) {
                endDate = (String) reqParams.get(Constants.REQ_enddate);
            }

            if (reqParams.has(Constants.companyKey) && reqParams.get(Constants.companyKey) != null) {
                companyId = (String) reqParams.get(Constants.companyKey);
            }

            if (!StringUtil.isNullOrEmpty(startDate) && !StringUtil.isNullOrEmpty(endDate)) {
                condition += " (cn.creationdate >=? and cn.creationdate <=?) and ";

                params.add(df.parse(startDate));
                params.add(df.parse(endDate));
            }

            String customColumn = "";
            String customQueryConditionForCustomer = "";

            String customerCustomField = reqParams.has("customerCustomFieldArray") && reqParams.get("customerCustomFieldArray") != null ? reqParams.getString("customerCustomFieldArray") : "";

            if (!StringUtil.isNullOrEmpty(customerCustomField) && !customerCustomField.equals("[]")) {

                customQueryConditionForCustomer += "left join customercustomdata on customercustomdata.customerId = c.id ";

                JSONArray customerCustomFieldArray = new JSONArray(customerCustomField);

                customColumn += ", ";

                for (int i = 0; i < customerCustomFieldArray.length(); i++) {

                    customColumn += "customercustomdata." + customerCustomFieldArray.getString(i) + " as customerCustom" + i + " ,";
                }
                customColumn = customColumn.substring(0, customColumn.length() - 2);
            }
        
            String cn_sqlQuery = "select cn.cnnumber as cnno, cn.id as cnid, cn.creationdate as cndate, cn.cnamount as cnamount, cn.cnamountinbase as cnamountinbase, c.acccode as customercode, "
                    + "c.name as customername, c.aliasname as aliasname, item1.value as customertype, cur.name as currency, item2.code as salespersoncode, cur2.symbol as cncurrency, "
                    + "cntd.tamount as cntamount, cn.externalcurrencyrate, account.acccode as accountcode, account.name as accountname, (cnt.amount / cn.externalcurrencyrate) as salesrevenueinbasecurrency, "
                    + "cnt.amount as salesrevenue " + customColumn +" from creditnote cn left join customer c on c.id = cn.customer left join customercategorymapping ccm on c.id = ccm.customerid "
                    + customQueryConditionForCustomer
                    + "left join masteritem item1 on ccm.customercategory = item1.id left join currency cur on c.currency = cur.currencyid left join masteritem item2 ON cn.salesperson = item2.id "
                    + "left join currency cur2 on cur2.currencyid = cn.currency left join cntaxentry cnt on cn.id = cnt.creditnote left join account on account.id = cnt.account "
                    + "left join (select sum(cnt2.taxamount) as tamount, cn2.id as cnid2 from cntaxentry cnt2 left join creditnote cn2 on cnt2.creditnote = cn2.id group by cn2.id) as cntd on cntd.cnid2 = cn.id "
                    + "where cn.cntype in (1,2) and cn.salesreturn is NULL and " + condition + " cn.company = ? group by cnt.id order by cndate";

            params.add(companyId);

            list = executeSQLQuery(cn_sqlQuery, params.toArray());
            
        } catch(Exception ex) {
            Logger.getLogger(accInvoiceImpl.class.getName()).log(Level.SEVERE, null, ex);
        }
        return new KwlReturnObject(true, " success ", null, list, list.size());
    }
    }
