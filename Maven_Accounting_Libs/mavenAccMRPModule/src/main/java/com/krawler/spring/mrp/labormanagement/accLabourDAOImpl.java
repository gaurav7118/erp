/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.krawler.spring.mrp.labormanagement;

import com.krawler.common.admin.Company;
import com.krawler.common.admin.User;
import com.krawler.common.dao.BaseDAO;
import com.krawler.common.service.ServiceException;
import com.krawler.common.util.Constants;
import com.krawler.common.util.StringUtil;
import com.krawler.hql.accounting.MasterItem;
import com.krawler.hql.accounting.PaymentMethod;
import com.krawler.hql.accounting.SequenceFormat;
import com.krawler.spring.accounting.handler.AccountingManager;
import com.krawler.spring.common.KwlReturnObject;
import com.krawler.spring.mrp.workcentremanagement.WorkCentre;
import com.krawler.utils.json.base.JSONArray;
import com.krawler.utils.json.base.JSONObject;
import java.util.*;

/**
 *
 * @author krawler
 */
public class accLabourDAOImpl extends BaseDAO implements accLabourDAO {

    public KwlReturnObject addLabour(HashMap request) throws ServiceException {
        KwlReturnObject result;
        try {
            Labour labour = null;
            if (request.containsKey("labourId") && request.get("labourId") != null) {
                labour = (Labour) get(Labour.class, request.get("labourId").toString());
            } else {
                labour = new Labour();
            }
            if (request.containsKey("empcode") && request.get("empcode") != null) {
                labour.setEmpcode((String) request.get("empcode"));
            }
            if (request.containsKey(Constants.SEQFORMAT) && request.get(Constants.SEQFORMAT) != null) {   //sometimes sequenceformat may have null
                labour.setSeqformat((SequenceFormat) get(SequenceFormat.class, (String) request.get(Constants.SEQFORMAT)));
            }
            if (request.containsKey(Constants.SEQNUMBER)) {
                labour.setSeqnumber(Integer.parseInt(request.get(Constants.SEQNUMBER).toString()));
            }
            if (request.containsKey(Constants.DATEPREFIX) && request.get(Constants.DATEPREFIX) != null) {
                labour.setDatePreffixValue((String) request.get(Constants.DATEPREFIX));
            }
            if (request.containsKey(Constants.DATEAFTERPREFIX) && request.get(Constants.DATEAFTERPREFIX) != null) {
                labour.setDateAfterPreffixValue((String) request.get(Constants.DATEAFTERPREFIX));
            }
            if (request.containsKey(Constants.DATESUFFIX) && request.get(Constants.DATESUFFIX) != null) {
                labour.setDateSuffixValue((String) request.get(Constants.DATESUFFIX));
            }
            if (request.containsKey("autogenerated")) {
                labour.setAutoGenerated((Boolean) request.get("autogenerated"));
            }
            if (request.containsKey("fname") && request.get("fname") != null) {
                labour.setFname((String) request.get("fname"));
            }
            if (request.containsKey("lname") && request.get("lname") != null) {
                labour.setLname((String) request.get("lname"));
            }
            if (request.containsKey("mname") && request.get("mname") != null) {
                labour.setMname((String) request.get("mname"));
            }
            if (request.containsKey("dob") && request.get("dob") != null) {
                labour.setDob((Date) request.get("dob"));
            }
            if (request.containsKey("createdon") && request.get("createdon") != null) {
                labour.setCreatedOn((Date) request.get("createdon"));
            }
            if (request.containsKey("updatedon") && request.get("updatedon") != null) {
                labour.setModifiedOn((Date) request.get("updatedon"));
            }

            if (request.containsKey("expirydatepassport") && request.get("expirydatepassport") != null) {
                labour.setExpirydatepassport((Date) request.get("expirydatepassport"));
            }
            if (request.containsKey("prdate") && request.get("prdate") != null) {
                labour.setPrdate((Date) request.get("prdate"));
            }
            if (request.containsKey("age") && request.get("age") != null) {
                labour.setAge((String) request.get("age"));
            }
            if (request.containsKey("gender") && request.get("gender") != null) {
                labour.setGender((String) request.get("gender"));
            }
            if (request.containsKey("maritalstatus") && request.get("maritalstatus") != null) {
                labour.setMaritalstatus((String) request.get("maritalstatus"));
            }
            if (request.containsKey("bgroup") && request.get("bgroup") != null) {
                labour.setBgroup((String) request.get("bgroup"));
            }
            if (request.containsKey("nationality") && request.get("nationality") != null) {
                labour.setNationality((String) request.get("nationality"));
            }
            if (request.containsKey("countryorigin") && request.get("countryorigin") != null) {
                labour.setCountryorigin((String) request.get("countryorigin"));
            }
            if (request.containsKey("department") && request.get("department") != null) {
                labour.setDepartment((String) request.get("department"));
            }
            if (request.containsKey("dlicenseno") && request.get("dlicenseno") != null) {
                labour.setDlicenseno((String) request.get("dlicenseno"));
            }
            if (request.containsKey("passportno") && request.get("passportno") != null) {
                labour.setPassportno((String) request.get("passportno"));
            }
            if (request.containsKey("paycycle") && request.get("paycycle") != null) {
                labour.setPaycycle((String) request.get("paycycle"));
            }
            if (request.containsKey("residentstatus") && request.get("residentstatus") != null) {
                labour.setResidentstatus((String) request.get("residentstatus"));
            }
            if (request.containsKey("race") && request.get("race") != null) {
                labour.setRace((String) request.get("race"));
            }
            if (request.containsKey("religion") && request.get("religion") != null) {
                labour.setReligion((String) request.get("religion"));
            }
            if (request.containsKey("bankac") && request.get("bankac") != null) {
                labour.setBankac((String) request.get("bankac"));
            }
            if (request.containsKey("bankaname") && request.get("bankaname") != null) {
                labour.setBankaname((String) request.get("bankaname"));
            }
            if (request.containsKey("accountname") && request.get("accountname") != null) {
                labour.setAccountname((String) request.get("accountname"));
            }
            if (request.containsKey("accountnumber") && request.get("accountnumber") != null) {
                labour.setAccountnumber((String) request.get("accountnumber"));
            }
            if (request.containsKey("branchnumber") && request.get("branchnumber") != null) {
                labour.setBranchnumber((String) request.get("branchnumber"));
            }
            if (request.containsKey("banknumber") && request.get("banknumber") != null) {
                labour.setBanknumber((String) request.get("banknumber"));
            }
            if (request.containsKey("branchnumber") && request.get("branchnumber") != null) {
                labour.setBranchnumber((String) request.get("branchnumber"));
            }
            if (request.containsKey("bankbranch") && request.get("bankbranch") != null) {
                labour.setBankbranch((String) request.get("bankbranch"));
            }
            if (request.containsKey("shifttiming") && request.get("shifttiming") != null) {
                labour.setShifttiming((String) request.get("shifttiming"));
            }
//            if (request.containsKey("keyskill") && request.get("keyskill") != null) {
//                labour.setKeyskill((MasterItem) get(MasterItem.class, (String) request.get("keyskill")));
//            }
            if (request.containsKey("deleteflag") && request.get("deleteflag") != null) {
                labour.setDeleteflag((Boolean) request.get("deleteflag"));
            }
            if (request.containsKey("paymentmethod") && request.get("paymentmethod") != null) {
                labour.setPaymentmethod((PaymentMethod) get(PaymentMethod.class, (String) request.get("paymentmethod")));
            }
            if (request.containsKey("company") && request.get("company") != null) {
                labour.setCompany((Company) get(Company.class, (String) request.get("company")));
            }
            if (request.containsKey("createdby") && request.get("createdby") != null) {
                labour.setCreatedby((User) get(User.class, (String) request.get("createdby")));
            }
            if (request.containsKey("modifiedby") && request.get("modifiedby") != null) {
                labour.setModifiedby((User) get(User.class, (String) request.get("modifiedby")));
            }
            if (request.containsKey("acclabourcustomdataref") && request.get("acclabourcustomdataref") != null) {
                LabourCustomData labourCustomData = null;
                labourCustomData = (LabourCustomData) get(LabourCustomData.class, (String) request.get("acclabourcustomdataref"));
                labour.setAccLabourCustomData(labourCustomData);
            }
            if (request.containsKey("labourWCMapping") && request.get("labourWCMapping") != null) {
                Set<LabourWorkCentreMapping> labourWCMapping = (Set<LabourWorkCentreMapping>) request.get("labourWCMapping");
                labour.setLabourWorkCentreMappings(labourWCMapping);
            }
            if (request.containsKey("labourSkillMapping") && request.get("labourSkillMapping") != null) {
                Set<LabourSkillMapping> labourSkillMappings = (Set<LabourSkillMapping>) request.get("labourSkillMapping");
                labour.setLabourSkillMappings(labourSkillMappings);
            }
            labour.setSyncable(false);
            saveOrUpdate(labour);
            List resultlist = new ArrayList();
            resultlist.add(labour);
            result = new KwlReturnObject(true, null, null, resultlist, resultlist.size());
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return result;
    }
    public Set<LabourWorkCentreMapping> getLabourWCMapping(HashMap request) throws ServiceException {
        Set<LabourWorkCentreMapping> labourWorkCentreMappings = new TreeSet<LabourWorkCentreMapping>();
        LabourWorkCentreMapping labourWorkCentreMapping = null;
        if (request.containsKey("labourWCMappingId") && request.get("labourWCMappingId") != null) {
            labourWorkCentreMapping = (LabourWorkCentreMapping) get(LabourWorkCentreMapping.class, request.get("labourWCMappingId").toString());
        } else {
            labourWorkCentreMapping = new LabourWorkCentreMapping();
        }
        if (request.containsKey("labourId") && request.get("labourId") != null) {
            labourWorkCentreMapping.setLabour((Labour) get(Labour.class, (String) request.get("labourId")));
        }
        if (request.containsKey("workcentreId") && request.get("workcentreId") != null) {
            labourWorkCentreMapping.setWorkCentre((WorkCentre) get(WorkCentre.class, (String) request.get("workcentreId")));
        }

        if (request.containsKey("companyId") && request.get("companyId") != null) {
            labourWorkCentreMapping.setCompany((Company) get(Company.class, (String) request.get("companyId")));
        }

        labourWorkCentreMappings.add(labourWorkCentreMapping);
        return labourWorkCentreMappings;
    }
    public KwlReturnObject saveLabourSkillMapping(Map<String, Object> dataMap) throws ServiceException {

        List list = new ArrayList();
        try {
            Set<LabourSkillMapping> lbSkillMappingSet = new HashSet<>();
            Labour labour = null;
            if (dataMap.containsKey("keyskill")) {
                String[] keyskill = dataMap.get("keyskill").toString().split(",");

                if (dataMap.containsKey("labourId")) {
                    labour = (Labour) dataMap.get("labourId");
                }
                for (int i = 0; i < keyskill.length; i++) {
                    String skillId = keyskill[i];
                    LabourSkillMapping labourSkillMapping = new LabourSkillMapping();
                    labourSkillMapping.setLabour(labour);
                    MasterItem keyskillId = (MasterItem) get(MasterItem.class, skillId);
                    if (keyskillId != null) {
                        labourSkillMapping.setSkill(keyskillId);
                    }
                    if (dataMap.containsKey(Constants.companyid) && dataMap.get(Constants.companyid) != null) {
                        Company company = (Company) get(Company.class, (String) dataMap.get(Constants.companyid));
                        labourSkillMapping.setCompany(company);
                    }
                    lbSkillMappingSet.add(labourSkillMapping);
                }
                labour.setLabourSkillMappings(lbSkillMappingSet);
                saveOrUpdate(labour);
            }

//            list.add(labourSkillMapping);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(" saveMachineMaster : " + ex.getMessage(), ex);
        }

        return new KwlReturnObject(true, null, null, list, list.size());

    }
    public KwlReturnObject getLabour(Map<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result = null;
        ArrayList params = new ArrayList();
        String companyId = "";
        String moduleId = "";
        boolean syncable = false;
        String conditionSql = "";
        String joinCondition = "";
        try {
              String machineids="";
            if (requestParams.containsKey("billId")) {
                machineids = requestParams.get("billId").toString();
            }
            if (requestParams.containsKey("companyId")) {
                companyId = requestParams.get("companyId").toString();
                params.add(companyId);
            }
            if (requestParams.containsKey("syncable")) {
                syncable = (Boolean) requestParams.get("syncable");
                conditionSql += " and l.syncable=?";
                params.add(syncable);
            }
              if (!StringUtil.isNullOrEmpty(machineids)) {
                machineids = AccountingManager.getFilterInString(machineids);
                conditionSql += " and l.ID in " + machineids + "  ";
            }
            if(requestParams.containsKey("moduleid")){
                moduleId = (String) requestParams.get("moduleid");
            }
            if (requestParams.containsKey("ss") && requestParams.get("ss") != null) {
                String ss = requestParams.get("ss").toString();
                if (!StringUtil.isNullOrEmpty(ss)) {
                    ss = ss.replaceAll("%", "////");
                    ss = ss.replaceAll("_", "////");
                    if (!StringUtil.isNullOrEmpty(ss)) {
                        String[] searchcol = new String[]{"l.empcode", "l.fname", "l.lname"};
                        Map SearchStringMap = StringUtil.insertParamSearchStringMap(params, ss, 3);
                        StringUtil.insertParamSearchString(SearchStringMap);
                        String searchQuery = StringUtil.getSearchString(ss, "and", searchcol);
                        conditionSql += searchQuery;
                    }
                }
            }
            if (requestParams.containsKey("wcid")) {
                joinCondition += " INNER JOIN l.labourWorkCentreMappings lwm ";
                conditionSql += " and lwm.workCentre.ID= ? ";
                params.add((String) requestParams.get("wcid"));
            }
            /*
             Advance Search Component
             */
            String appendCase = "and";
            String mySearchFilterString = "";
            String filterConjuctionCriteria = com.krawler.common.util.Constants.and;
            if (requestParams.containsKey("filterConjuctionCriteria") && requestParams.get("filterConjuctionCriteria") != null) {
                if (requestParams.get("filterConjuctionCriteria").toString().trim().equalsIgnoreCase("OR")) {
                    filterConjuctionCriteria = com.krawler.common.util.Constants.or;
                }
            }
            String Searchjson = "";
            String searchDefaultFieldSQL = "";
            if (requestParams.containsKey("searchJson") && requestParams.get("searchJson") != null) {
                Searchjson = requestParams.get("searchJson").toString();
                if (!StringUtil.isNullOrEmpty(Searchjson)) {
                    JSONObject serachJobj = new JSONObject(Searchjson);
                    JSONArray customSearchFieldArray = new JSONArray();
                    JSONArray defaultSearchFieldArray = new JSONArray();
                    StringUtil.seperateCostomAndDefaultSerachJson(serachJobj, customSearchFieldArray, defaultSearchFieldArray);
                    if (defaultSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Default Form fields
                         */
                        ArrayList tableArray = new ArrayList();
                        Map<String, Object> map = buildSqlDefaultFieldAdvSearch(defaultSearchFieldArray, params, moduleId, tableArray, filterConjuctionCriteria);
                        joinCondition += " LEFT JOIN l.labourWorkCentreMappings lwm ";
                        joinCondition += " LEFT JOIN l.labourSkillMappings lsm ";
                        searchDefaultFieldSQL = (String) (map.containsKey("condition") ? map.get("condition") : "");
                        searchDefaultFieldSQL = searchDefaultFieldSQL.replaceAll("labourRef.labourWorkCentreMappings", "lwm");
                        searchDefaultFieldSQL = searchDefaultFieldSQL.replaceAll("labourRef.labourSkillMappings", "lsm");
                        searchDefaultFieldSQL = searchDefaultFieldSQL.replaceAll("labourRef", "l");
                    }
                    if (customSearchFieldArray.length() > 0) {
                        /*
                         Advance Search For Custom fields
                         */
                        requestParams.put(Constants.Searchjson, Searchjson);
                        requestParams.put(Constants.appendCase, appendCase);
                        requestParams.put("filterConjuctionCriteria", filterConjuctionCriteria);
                        mySearchFilterString = String.valueOf(StringUtil.getAdvanceSearchString(requestParams, false).get(Constants.myResult));
                        if (mySearchFilterString.contains("c.LabourCustomData")) {
                            mySearchFilterString = mySearchFilterString.replaceAll("c.LabourCustomData", "l.accLabourCustomData");
                        }
                        StringUtil.insertParamAdvanceSearchString1(params, Searchjson);
                    }
                    mySearchFilterString = StringUtil.combineCustomAndDefaultSearch(searchDefaultFieldSQL, mySearchFilterString, filterConjuctionCriteria);
                }
            }
            String query = "select distinct l from Labour l " + joinCondition + " where l.company.companyID=? " + conditionSql + mySearchFilterString;
            List list = executeQuery(query, params.toArray());
            int totalCount = list.size();
            result = new KwlReturnObject(true, null, null, list, totalCount);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return result;
    }

    public KwlReturnObject deleteLabour(HashMap<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result = null;
        ArrayList params = new ArrayList();
        String companyId = "";
        String conditionSql = "";
        String custCondition = "";
        try {
            if (requestParams.containsKey("companyId")) {
                companyId = requestParams.get("companyId").toString();
                params.add(companyId);
            }
            if (requestParams.containsKey("billId")) {
                conditionSql += " and ID=?";
                custCondition += " and labourId=?";
                params.add(requestParams.get("billId").toString());
            }
            String mappedquery = "delete from LabourWorkCentreMapping where company.companyID=? and labour.ID=?";
            int mappednum = executeUpdate(mappedquery, params.toArray());
            
            String mappedskillquery = "delete from LabourSkillMapping where company.companyID=? and labour.ID=?";
            mappednum = executeUpdate(mappedskillquery, params.toArray());
            
            String costQuery = "delete from ResourceCost where company.companyID=? and labour.ID=?";
            mappednum = executeUpdate(costQuery, params.toArray());
            
            String custquery = "delete from LabourCustomData where company.companyID=? " + custCondition;
            int custnum = executeUpdate(custquery, params.toArray());
            String query = "delete from Labour where company.companyID=? " + conditionSql;
            int num = executeUpdate(query, params.toArray());
            result = new KwlReturnObject(true, null, null, null, num);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return result;
    }
    
    public KwlReturnObject deleteLabourCost(HashMap<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result = null;
        ArrayList params = new ArrayList();
        String companyId = "";
        String conditionSql = "";
        String custCondition = "";
        try {
            if (requestParams.containsKey("companyId")) {
                companyId = requestParams.get("companyId").toString();
                params.add(companyId);
            }
            if (requestParams.containsKey("resourcecostid")) {
                conditionSql += " and ID=?";
                params.add(requestParams.get("resourcecostid").toString());
            }
            String query = "delete from ResourceCost where company.companyID=? " + conditionSql;
            int num = executeUpdate(query, params.toArray());
            result = new KwlReturnObject(true, null, null, null, num);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return result;
    }
    public KwlReturnObject deleteLabourSkillMapping(Map<String, Object> dataMap) throws ServiceException {
        ArrayList params1 = new ArrayList();
        String id = "", delQuery1 = "";
        int numRows1 = 0;
        try {
            if (dataMap.containsKey("labourId")) {
                params1.add(dataMap.get("labourId"));
                delQuery1 = "delete from  labour_skill_mapping where labour=?";
                numRows1 = executeSQLUpdate(delQuery1, params1.toArray());
            }

        } catch (Exception ex) {
            throw ServiceException.FAILURE("deleteMachineMaster : " + ex.getMessage(), ex);
        }

        return new KwlReturnObject(true, "Machine(s) has been deleted successfully.", null, null, numRows1);

    }
    public KwlReturnObject getLabourNumberCount(HashMap<String, Object> requestParams) throws ServiceException {
        try {
            List list = new ArrayList();
            String billid = "";
            String entryNumber = "";
            String companyId = "";
            int count = 0;
            String condition = "";
            ArrayList params = new ArrayList();
            if (requestParams.containsKey("entryNumber")) {
                entryNumber = requestParams.get("entryNumber").toString();
                params.add(entryNumber);
            }
            if (requestParams.containsKey("companyId")) {
                companyId = requestParams.get("companyId").toString();
                params.add(companyId);
            }

            if (requestParams.containsKey("labourId")) {
                billid = requestParams.get("labourId").toString();
                condition = " and ID!=?";
                params.add(billid);
            }
            String query = "from Labour where empcode=? and company.companyID=?" + condition;
            list = executeQuery(query, params.toArray());
            count = list.size();
            return new KwlReturnObject(true, "", null, list, count);

        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
    }

    @Override
    public KwlReturnObject getLabourCombo(Map<String, Object> requestParams) throws ServiceException {
        ArrayList params = new ArrayList();
        String companyId = "";
        List list = null;
        int count = 0;
        try {
            if (requestParams.containsKey("companyId")) {
                companyId = requestParams.get("companyId").toString();
                params.add(companyId);
            }
            String query = "select id,fname,lname,empcode from labour where company=?";
            list = executeSQLQuery(query, params.toArray());

            if (requestParams.containsKey("workcenterid")) {  // to fetch labour for a specific workcentre
                params.clear();
                String tempArr[] = requestParams.get("workcenterid").toString().split(",");
                String tempStr = "";
                for (int cnt = 0; cnt < tempArr.length; cnt++) {
                    if (cnt == 0) {
                        tempStr += "'" + tempArr[cnt] + "'";
                    } else {
                        tempStr += ",'" + tempArr[cnt] + "'";
                    }
                }
                query = "select DISTINCT(lwcm.labour.ID),lwcm.labour.fname,lwcm.labour.lname,lwcm.labour.empcode  from LabourWorkCentreMapping lwcm where lwcm.workCentre.ID in (" + tempStr + ")";
//                params.add(tempStr);
                list = executeQuery(query);
            }

            count = list.size();
        } catch (Exception ex) {
            throw ServiceException.FAILURE("LabourIDAlreadyPresent : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, list, count);
    }

    public KwlReturnObject saveResourceCost(Map<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            ResourceCost resourceCost = new ResourceCost();
            if (dataMap.containsKey("resourceCostId")) {
                resourceCost = dataMap.get("resourceCostId") == null ? null : (ResourceCost) get(ResourceCost.class, (String) dataMap.get("resourceCostId"));
            }
            if (dataMap.containsKey("labourId")) {
                Labour labour = dataMap.get("labourId") == null ? null : (Labour) get(Labour.class, (String) dataMap.get("labourId"));
                resourceCost.setLabour(labour);
            }
            if (dataMap.containsKey("resourcecost")) {
                String cost = (String) dataMap.get("resourcecost");
                resourceCost.setResourcecost(cost);
            }
            if (dataMap.containsKey("effectivedate")) {
                Date date = (Date) dataMap.get("effectivedate");
                resourceCost.setEffectivedate(date);
            }
            if (dataMap.containsKey("company") && dataMap.get("company") != null) {
                resourceCost.setCompany((Company) get(Company.class, (String) dataMap.get("company")));
            }
            saveOrUpdate(resourceCost);
            list.add(resourceCost);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(" saveResourceCost : " + ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
    }

    public KwlReturnObject getResourceCost(Map<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result = null;
        ArrayList params = new ArrayList();
        String companyId = "";
        String conditionSql = "";
        List list=null;
        try {
            if (requestParams.containsKey("labourId")) {
                conditionSql += " r.labour.ID=?";
                params.add(requestParams.get("labourId").toString());
            }
            if(requestParams.containsKey("workDate")){
                conditionSql += " and r.effectivedate <= ?  ORDER BY r.effectivedate DESC ";
                params.add((Date)requestParams.get("workDate"));
            }           
            if (requestParams.containsKey("maxdate")) {
                conditionSql += " ORDER BY r.effectivedate DESC LIMIT 1";
            } 
            String query = "From ResourceCost r where " + conditionSql;
            if (requestParams.containsKey("workDate") || requestParams.containsKey("maxdate")) {
                //Limit is not supported by HQL so added paging parameters
                list = executeQueryPaging(query, params.toArray(), new Integer[]{0,1});
            } else {

                list = executeQuery(query, params.toArray());
            }
            int totalCount = list.size();
            result = new KwlReturnObject(true, null, null, list, totalCount);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return result;
    }
    
    public KwlReturnObject getResourceCostSQL(Map<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result = null;
        ArrayList params = new ArrayList();
        String conditionSql = "";
        List list=null;
        String query = "",groupconditionSql="";
        try {
            if (requestParams.containsKey("labourId")) {
                conditionSql += " r.labour=?";
                params.add(requestParams.get("labourId").toString());
            }
            if (requestParams.containsKey("companyId")) {
                conditionSql += (conditionSql.length() > 0) ? " and r.company=? " : " r.company=? ";
                params.add(requestParams.get("companyId").toString());
            }
            if (requestParams.containsKey("workDate")) {
                conditionSql += " and r.effectivedate <= ?  ORDER BY r.effectivedate DESC ";
                params.add((Date) requestParams.get("workDate"));
            } else {
                if (requestParams.containsKey("maxdate")) {
                    conditionSql += " ORDER BY r.effectivedate DESC LIMIT 1";
                } else if (!requestParams.containsKey("maxdate")) {
                    conditionSql += " ORDER BY r.effectivedate DESC";
                    groupconditionSql += " GROUP BY labour ";
                }
            }
            if (requestParams.containsKey("labourId")) {
                query = "SELECT * FROM resourcecost r WHERE " + conditionSql;
            } else {
                query = "SELECT * FROM (SELECT * FROM resourcecost r WHERE " + conditionSql + " ) as t " + groupconditionSql;
            }
            
            list = executeSQLQuery(query, params.toArray());
            
            int totalCount = list.size();
            result = new KwlReturnObject(true, null, null, list, totalCount);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return result;
    }
    public KwlReturnObject deleteResourceCost(HashMap<String, Object> requestParams) throws ServiceException {
        KwlReturnObject result = null;
        ArrayList params = new ArrayList();
        String companyId = "";
        String conditionSql = "";
        try {
            if (requestParams.containsKey("companyId")) {
                companyId = requestParams.get("companyId").toString();
                params.add(companyId);
            }
            if (requestParams.containsKey("billId")) {
                conditionSql += " and ID=?";
                params.add(requestParams.get("billId").toString());
            }
            String query = "delete from ResourceCost where company.companyID=? " + conditionSql;
            int num = executeUpdate(query, params.toArray());
            result = new KwlReturnObject(true, null, null, null, num);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return result;
    }

    public KwlReturnObject updateLabourFlag(Map<String, Object> requestParams) throws ServiceException {
        String ids = "";
        JSONArray labourIdsArray=null;
        List list = new ArrayList();
        if (requestParams.containsKey("ids")) {
            labourIdsArray = (JSONArray) requestParams.get("ids");
        }
        for (int i = 0; i < labourIdsArray.length(); i++) {
            ids += "'" + labourIdsArray.optString(i) + "',";
        }
        String query = "update labour set syncable='T' where id in (" + ids.substring(0, ids.length() - 1) + ")";
        int count = executeSQLUpdate(query);
        return new KwlReturnObject(true, "", null, list, count);
    }

    @Override
    public KwlReturnObject savelabourWorkCentrmapping(Labour labour, Set<LabourWorkCentreMapping> labourWorkCentreMapping) throws ServiceException {

        try {
            labour.setLabourWorkCentreMappings(labourWorkCentreMapping);
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, "", null, null, 0);
    }
    
    @Override
    public KwlReturnObject getWCforLabour(Map<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String condition = "";
            ArrayList params = new ArrayList();
            
            if (dataMap.containsKey("labourId")) {
                condition = " where lwc.labour.ID=?";
                params.add(dataMap.get("labourId"));
             }
            
            String selQuery = "select lwc.ID from LabourWorkCentreMapping lwc " + condition;
            list = executeQuery(selQuery, params.toArray());
            
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
        
       // throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public KwlReturnObject getWOforLabour(Map<String, Object> dataMap) throws ServiceException {
        List list = new ArrayList();
        try {
            String condition = "";
            ArrayList params = new ArrayList();
            
            if (dataMap.containsKey("labourId")) {
                condition = " where lwo.labourid.ID=?";
                params.add(dataMap.get("labourId"));
            }
            
            String selQuery = "select lwo.id from WorkOrderLabourMapping lwo " + condition;
            list = executeQuery(selQuery, params.toArray());
            
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
        //throw new UnsupportedOperationException("Not supported yet.");
    }

    @Override
    public KwlReturnObject getRTforLabour(Map<String, Object> dataMap) throws ServiceException {     
        List list = new ArrayList();
        try {
            String condition = "";
            ArrayList params = new ArrayList();
            
            if (dataMap.containsKey("labourId")) {
                condition = " where lrt.labourid.id=?";
                params.add(dataMap.get("labourId"));
            }
            
            String selQuery = "select lrt.id from RoutingTemplateLabourMapping lrt " + condition;
            list = executeQuery(selQuery, params.toArray());
            
        } catch (Exception ex) {
            throw ServiceException.FAILURE(ex.getMessage(), ex);
        }
        return new KwlReturnObject(true, null, null, list, list.size());
        
        //throw new UnsupportedOperationException("Not supported yet.");
    }
 }
